uint64_t sub_1BBA97994(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, __int16 a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;

  if (*(unsigned __int8 *)(*(void *)(result + 1880) + 2009) - a4 <= *(_DWORD *)(*(void *)(result + 1888) + 1620)) {
    v7 = *(_DWORD *)(*(void *)(result + 1888) + 1620);
  }
  else {
    v7 = *(unsigned __int8 *)(*(void *)(result + 1880) + 2009) - a4;
  }
  v8 = 1 << v7;
  v9 = -(1 << v7);
  v10 = v9 & a2;
  v11 = v9 & a3;
  if (a7)
  {
    v12 = 0;
    v13 = v10 - *((_DWORD *)a5 + 1);
    v14 = *a5;
    if ((v13 & 0x80000000) == 0)
    {
      v15 = v11 - *((_DWORD *)a5 + 2);
      if ((v15 & 0x80000000) == 0)
      {
        if (v13 >= v14 || v15 >= v14) {
          v12 = 0;
        }
        else {
          v12 = *((void *)a5 + 11) + 2 * ((v13 >> 3) + (v14 >> 3) * (unint64_t)(v15 >> 3));
        }
      }
    }
    v23 = v7 - 3;
    if (v23 != 31)
    {
      v24 = 0;
      LODWORD(v25) = 1 << v23;
      if ((int)v25 <= 1) {
        v25 = 1;
      }
      else {
        v25 = v25;
      }
      do
      {
        v26 = (_WORD *)v12;
        v27 = v25;
        do
        {
          *v26 = *v26 & 0x1FF | (a6 << 9);
          ++v26;
          --v27;
        }
        while (v27);
        ++v24;
        v12 += 2 * (v14 >> 3);
      }
      while (v24 != v25);
    }
  }
  else
  {
    v17 = v10 + v8;
    if (v10 + v8 >= *(_DWORD *)(result + 16)) {
      v17 = *(_DWORD *)(result + 16);
    }
    v18 = v11 + v8;
    if (v11 + v8 >= *(_DWORD *)(result + 20)) {
      v18 = *(_DWORD *)(result + 20);
    }
    for (; v11 < v18; v11 += 8)
    {
      if (v10 < v17)
      {
        v19 = v10;
        do
        {
          v20 = *(void *)(*(void *)(result + 1872) + 1360);
          v21 = *(void *)(v20 + 512);
          v22 = *(void *)(v20 + 488) * ((uint64_t)v11 >> 3) + (v19 >> 3);
          *(_WORD *)(v21 + 2 * v22) = *(_WORD *)(v21 + 2 * v22) & 0x1FF | (a6 << 9);
          v19 += 8;
        }
        while (v19 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1BBA97AF4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, char a6, int a7, int a8, unsigned int *a9)
{
  int v9 = a8;
  uint64_t v140 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) - (uint64_t)a4;
  int v14 = 1 << (v140 - 1);
  uint64_t v15 = (v14 + a2);
  unsigned int v136 = v14;
  uint64_t v16 = (v14 + a3);
  if (!a5)
  {
    if (((a3 | a2) & 0x80000000) != 0
      || (uint64_t v24 = *(void *)(*(void *)(a1 + 1872) + 1360), *(_DWORD *)(v24 + 276) <= (int)a2))
    {
      v35 = 0;
    }
    else
    {
      if (*(_DWORD *)(v24 + 280) <= (int)a3) {
        v35 = 0;
      }
      else {
        v35 = (unsigned __int16 *)(*(void *)(v24 + 512)
      }
                                 + 2 * (*(void *)(v24 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
      if (*(_DWORD *)(v24 + 280) > (int)a3)
      {
        v134 = (unsigned int *)(*(void *)(v24 + 576)
                              + 16 * (*(void *)(v24 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2)));
        goto LABEL_15;
      }
    }
    v134 = 0;
LABEL_15:
    if (((v15 | a3) & 0x80000000) != 0
      || (uint64_t v25 = *(void *)(*(void *)(a1 + 1872) + 1360), *(_DWORD *)(v25 + 276) <= (int)v15)
      || *(_DWORD *)(v25 + 280) <= (int)a3)
    {
      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v26 = *(void *)(v25 + 576) + 16 * (*(void *)(v25 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)v15 >> 2));
    }
    uint64_t v27 = *(void *)(*(void *)(a1 + 1872) + 1360);
    if (((v16 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v27 + 276) <= (int)a2
      || *(_DWORD *)(v27 + 280) <= (int)v16)
    {
      v135 = 0;
    }
    else
    {
      v135 = (unsigned int *)(*(void *)(v27 + 576)
                            + 16 * (*(void *)(v27 + 552) * ((uint64_t)(int)v16 >> 2) + ((int)a2 >> 2)));
    }
    if (((v16 | v15) & 0x80000000) != 0
      || *(_DWORD *)(v27 + 276) <= (int)v15
      || *(_DWORD *)(v27 + 280) <= (int)v16)
    {
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v28 = *(void *)(v27 + 576) + 16 * (*(void *)(v27 + 552) * ((uint64_t)(int)v16 >> 2) + ((int)v15 >> 2));
    }
    uint64_t v133 = *(void *)(v27 + 112);
    uint64_t v138 = *(void *)(v27 + 120);
    v129 = (unsigned int *)v26;
    v127 = (unsigned int *)v28;
    if (a6)
    {
      v29 = v35;
      uint64_t v30 = v15;
      int v31 = a7;
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v27 + 16))(v27, a2, a3, 0);
      uint64_t v130 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(*(void *)(a1 + 1872) + 1360)
                                                                         + 16))(*(void *)(*(void *)(a1 + 1872) + 1360), v30, a3, 0);
      uint64_t v132 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(*(void *)(a1 + 1872) + 1360)
                                                                         + 16))(*(void *)(*(void *)(a1 + 1872) + 1360), a2, v16, 0);
      uint64_t v33 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(*(void *)(a1 + 1872) + 1360)
                                                                        + 16))(*(void *)(*(void *)(a1 + 1872) + 1360), v30, v16, 0);
      uint64_t v34 = v32;
      a7 = v31;
      LODWORD(v15) = v30;
LABEL_80:
      v35 = v29;
      uint64_t v125 = v33;
      goto LABEL_82;
    }
    goto LABEL_66;
  }
  int v17 = *((_DWORD *)a5 + 1);
  int v18 = *((_DWORD *)a5 + 2);
  unsigned int v19 = a2 - v17;
  unsigned int v20 = a3 - v18;
  int v21 = (a2 - v17) | (a3 - v18);
  if (v21 < 0 || ((unint64_t v22 = *a5, v19 < v22) ? (v23 = v20 >= v22) : (v23 = 1), v23))
  {
    v35 = 0;
    v134 = 0;
  }
  else
  {
    v35 = (unsigned __int16 *)(*((void *)a5 + 11)
                             + 2 * ((v19 >> 3) + (v22 >> 3) * (unint64_t)(v20 >> 3)));
    v134 = (unsigned int *)(*((void *)a5 + 12)
                          + 16 * ((v19 >> 2) + (v22 >> 2) * (unint64_t)(v20 >> 2)));
  }
  unint64_t v36 = 0;
  unsigned int v37 = v15 - v17;
  if ((int)v15 - v17 >= 0 && (v20 & 0x80000000) == 0)
  {
    unint64_t v38 = *a5;
    if (v37 >= v38 || v20 >= v38) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = *((void *)a5 + 12) + 16 * ((v37 >> 2) + (v38 >> 2) * (unint64_t)(v20 >> 2));
    }
  }
  v129 = (unsigned int *)v36;
  v135 = 0;
  unsigned int v40 = v16 - v18;
  if ((v19 & 0x80000000) == 0 && (v40 & 0x80000000) == 0)
  {
    v135 = 0;
    unint64_t v41 = *a5;
    if (v19 < v41 && v40 < v41) {
      v135 = (unsigned int *)(*((void *)a5 + 12)
    }
                            + 16 * ((v19 >> 2) + (v41 >> 2) * (unint64_t)(v40 >> 2)));
  }
  unint64_t v42 = 0;
  if ((v37 & 0x80000000) == 0 && (v40 & 0x80000000) == 0)
  {
    unint64_t v43 = *a5;
    if (v37 >= v43 || v40 >= v43) {
      unint64_t v42 = 0;
    }
    else {
      unint64_t v42 = *((void *)a5 + 12) + 16 * ((v37 >> 2) + (v43 >> 2) * (unint64_t)(v40 >> 2));
    }
  }
  v127 = (unsigned int *)v42;
  v45 = (unsigned __int8 *)*((void *)a5 + 17);
  uint64_t v138 = 2 * v45[1];
  uint64_t v133 = *v45;
  if ((a6 & 1) == 0)
  {
LABEL_66:
    uint64_t v34 = 0;
    uint64_t v130 = 0;
    uint64_t v132 = 0;
    goto LABEL_67;
  }
  uint64_t v34 = 0;
  if (v21 >= 0)
  {
    unsigned int v46 = *a5;
    if (v19 < v46 && v20 < v46)
    {
      v47 = v35;
      int v48 = v15;
      int v49 = a7;
      uint64_t v50 = (*(uint64_t (**)(void, unint64_t))(**((void **)v45 + 10) + 24))(*((void *)v45 + 10), *((void *)v45 + 11) + v19 + *v45 * (unint64_t)v20);
      a7 = v49;
      LODWORD(v15) = v48;
      v35 = v47;
      uint64_t v34 = v50;
      int v17 = *((_DWORD *)a5 + 1);
      int v18 = *((_DWORD *)a5 + 2);
      unsigned int v37 = v48 - v17;
      unsigned int v20 = a3 - v18;
    }
  }
  uint64_t v130 = 0;
  if ((v37 & 0x80000000) == 0 && (v20 & 0x80000000) == 0)
  {
    unsigned int v51 = *a5;
    if (v37 >= v51 || v20 >= v51)
    {
      uint64_t v130 = 0;
    }
    else
    {
      v53 = v35;
      int v54 = v16;
      int v55 = v15;
      int v56 = a7;
      uint64_t v57 = v34;
      uint64_t v58 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 80) + 24))(*(void *)(*((void *)a5 + 17) + 80), *(void *)(*((void *)a5 + 17) + 88) + v37 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v20);
      uint64_t v34 = v57;
      a7 = v56;
      LODWORD(v15) = v55;
      LODWORD(v16) = v54;
      v35 = v53;
      int v9 = a8;
      uint64_t v130 = v58;
      int v17 = *((_DWORD *)a5 + 1);
      int v18 = *((_DWORD *)a5 + 2);
    }
  }
  uint64_t v132 = 0;
  unsigned int v59 = a2 - v17;
  unsigned int v60 = v16 - v18;
  if (((a2 - v17) & 0x80000000) == 0 && (v60 & 0x80000000) == 0)
  {
    uint64_t v132 = 0;
    unsigned int v61 = *a5;
    if (v59 < v61 && v60 < v61)
    {
      v62 = v35;
      int v63 = v16;
      int v64 = v15;
      int v65 = a7;
      uint64_t v66 = v34;
      uint64_t v67 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 80) + 24))(*(void *)(*((void *)a5 + 17) + 80), *(void *)(*((void *)a5 + 17) + 88) + v59 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v60);
      uint64_t v34 = v66;
      a7 = v65;
      LODWORD(v15) = v64;
      LODWORD(v16) = v63;
      v35 = v62;
      uint64_t v132 = v67;
      int v17 = *((_DWORD *)a5 + 1);
      unsigned int v60 = v63 - *((_DWORD *)a5 + 2);
    }
  }
  int v68 = v15 - v17;
  if (v68 >= 0 && (v60 & 0x80000000) == 0)
  {
    unsigned int v69 = *a5;
    if (v68 < v69 && v60 < v69)
    {
      v29 = v35;
      int v71 = v16;
      int v72 = v15;
      int v73 = a7;
      uint64_t v74 = v34;
      uint64_t v33 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 80) + 24))(*(void *)(*((void *)a5 + 17) + 80), *(void *)(*((void *)a5 + 17) + 88)+ v68+ **((unsigned __int8 **)a5 + 17) * (unint64_t)v60);
      uint64_t v34 = v74;
      a7 = v73;
      LODWORD(v15) = v72;
      LODWORD(v16) = v71;
      goto LABEL_80;
    }
LABEL_67:
    uint64_t v125 = 0;
    goto LABEL_82;
  }
  uint64_t v125 = 0;
LABEL_82:
  int v126 = a7;
  if (v9) {
    int v75 = 1;
  }
  else {
    int v75 = a7;
  }
  char v137 = v75;
  int v139 = a3;
  if (v75 != 1)
  {
    uint64_t v76 = 0;
    uint64_t v128 = 0;
    uint64_t v89 = 0;
    goto LABEL_101;
  }
  if (!a5)
  {
    v124 = v35;
    uint64_t v91 = v34;
    uint64_t v76 = (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 1872) + 1360)
                                                                     + 16))(*(void *)(*(void *)(a1 + 1872) + 1360), ((int)a2 >> 1), ((int)a3 >> 1), 1);
    uint64_t v128 = (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 1872) + 1360)
                                                                      + 16))(*(void *)(*(void *)(a1 + 1872) + 1360), ((int)v15 >> 1), ((int)a3 >> 1), 1);
    uint64_t v89 = (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 1872) + 1360)
                                                                     + 16))(*(void *)(*(void *)(a1 + 1872) + 1360), ((int)a2 >> 1), ((int)v16 >> 1), 1);
    uint64_t v92 = (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 1872) + 1360)
                                                                     + 16))(*(void *)(*(void *)(a1 + 1872) + 1360), ((int)v15 >> 1), ((int)v16 >> 1), 1);
    uint64_t v34 = v91;
    v35 = v124;
LABEL_115:
    uint64_t v90 = v92;
    goto LABEL_116;
  }
  uint64_t v76 = 0;
  int v77 = *((_DWORD *)a5 + 1);
  int v78 = *((_DWORD *)a5 + 2);
  unsigned int v79 = a2 - v77;
  unsigned int v80 = a3 - v78;
  if (((a2 - v77) & 0x80000000) == 0 && (v80 & 0x80000000) == 0)
  {
    uint64_t v76 = 0;
    unsigned int v81 = *a5;
    if (v79 < v81 && v80 < v81)
    {
      v82 = v35;
      uint64_t v83 = v34;
      uint64_t v84 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96) + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v79+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v80 & 0xFFFFFFFE));
      uint64_t v34 = v83;
      v35 = v82;
      uint64_t v76 = v84;
      int v77 = *((_DWORD *)a5 + 1);
      int v78 = *((_DWORD *)a5 + 2);
      unsigned int v80 = a3 - v78;
    }
  }
  uint64_t v85 = 0;
  unsigned int v86 = v15 - v77;
  if ((int)v15 - v77 >= 0 && (v80 & 0x80000000) == 0)
  {
    unsigned int v87 = *a5;
    if (v86 >= v87 || v80 >= v87)
    {
      uint64_t v85 = 0;
    }
    else
    {
      v93 = v35;
      uint64_t v94 = v34;
      uint64_t v85 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96) + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v86+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v80 & 0xFFFFFFFE));
      uint64_t v34 = v94;
      v35 = v93;
      int v77 = *((_DWORD *)a5 + 1);
      int v78 = *((_DWORD *)a5 + 2);
    }
  }
  uint64_t v89 = 0;
  unsigned int v95 = a2 - v77;
  unsigned int v96 = v16 - v78;
  uint64_t v128 = v85;
  if (((a2 - v77) & 0x80000000) == 0 && (v96 & 0x80000000) == 0)
  {
    uint64_t v89 = 0;
    unsigned int v97 = *a5;
    if (v95 < v97 && v96 < v97)
    {
      v98 = v35;
      uint64_t v99 = v34;
      uint64_t v100 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96) + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v95+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v96 & 0xFFFFFFFE));
      uint64_t v34 = v99;
      v35 = v98;
      uint64_t v89 = v100;
      int v77 = *((_DWORD *)a5 + 1);
      unsigned int v96 = v16 - *((_DWORD *)a5 + 2);
    }
  }
  uint64_t v90 = 0;
  int v101 = v15 - v77;
  if (v101 >= 0 && (v96 & 0x80000000) == 0)
  {
    unsigned int v102 = *a5;
    if (v101 < v102 && v96 < v102)
    {
      v104 = v35;
      uint64_t v105 = v34;
      uint64_t v92 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96) + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v101+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v96 & 0xFFFFFFFE));
      uint64_t v34 = v105;
      v35 = v104;
      goto LABEL_115;
    }
LABEL_101:
    uint64_t v90 = 0;
  }
LABEL_116:
  int v106 = v15;
  uint64_t v107 = (1 << v140);
  switch((*v35 >> 4) & 7)
  {
    case 0:
      sub_1BBAD03F0(*(void *)(a1 + 1872), v134, a2, v139, (1 << v140), (1 << v140), v133, v34, v138, v76);
      break;
    case 1:
      sub_1BBAD03F0(*(void *)(a1 + 1872), v134, a2, v139, (1 << v140), v136, v133, v34, v138, v76);
      sub_1BBAD03F0(*(void *)(a1 + 1872), v135, a2, v16, v107, v136, v133, v132, v138, v89);
      break;
    case 2:
      sub_1BBAD03F0(*(void *)(a1 + 1872), v134, a2, v139, v136, (1 << v140), v133, v34, v138, v76);
      sub_1BBAD03F0(*(void *)(a1 + 1872), v129, v106, v139, v136, v107, v133, v130, v138, v128);
      break;
    case 3:
      uint64_t v108 = v136;
      sub_1BBAD03F0(*(void *)(a1 + 1872), v134, a2, v139, v136, v136, v133, v34, v138, v76);
      sub_1BBAD03F0(*(void *)(a1 + 1872), v129, v106, v139, v108, v108, v133, v130, v138, v128);
      sub_1BBAD03F0(*(void *)(a1 + 1872), v135, a2, v16, v108, v108, v133, v132, v138, v89);
      sub_1BBAD03F0(*(void *)(a1 + 1872), v127, v106, v16, v136, v136, v133, v125, v138, v90);
      break;
    default:
      break;
  }
  char v109 = v137 ^ 1;
  if (!a5) {
    char v109 = 1;
  }
  if (v109) {
    return 0;
  }
  uint64_t v110 = 0;
  uint64_t v111 = (a2 - *((_DWORD *)a5 + 1));
  if ((v111 & 0x80000000) != 0)
  {
    int v113 = a8;
  }
  else
  {
    unsigned int v112 = v139 - *((_DWORD *)a5 + 2);
    int v113 = a8;
    if ((v112 & 0x80000000) == 0)
    {
      uint64_t v110 = 0;
      unsigned int v114 = *a5;
      if (v111 < v114 && v112 < v114) {
        uint64_t v110 = (*(uint64_t (**)(void, unint64_t, void))(**((void **)a5 + 5) + 24))(*((void *)a5 + 5), v111 + a5[1] * (unint64_t)(v112 >> 1) + *((void *)a5 + 6), 0);
      }
    }
  }
  uint64_t v116 = a5[1];
  v117 = *(unsigned int (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * v140 + 1208);
  if (v113 == 1)
  {
    unint64_t v118 = (*(unsigned __int16 *)(a1 + 1002) * (unint64_t)v117(v136, v136, v110, v116, v76, v138)) >> 8;
    unsigned int v119 = *a9;
    int v120 = *(char *)(*(void *)(a1 + 952) + 226);
    unsigned int v121 = v119 + (v119 >> 1);
    unsigned int v122 = v119 - (v119 >> 2);
    if (v120 == 1) {
      unsigned int v119 = *a9 >> 1;
    }
    if (v120 == 2) {
      unsigned int v119 = v122;
    }
    if (v120 == 4) {
      unsigned int v119 = v121;
    }
    return (v119 <= v118) | (2 * (v118 >= v119 >> 1));
  }
  else
  {
    uint64_t result = 0;
    if (a9 && v126)
    {
      unsigned int v123 = v117(v136, v136, v110, v116, v76, v138);
      uint64_t result = 0;
      *(void *)a9 += ((*(unsigned __int16 *)(a1 + 1002) * (unint64_t)v123) >> 8);
    }
  }
  return result;
}

uint64_t sub_1BBA98838(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7)
{
  int v7 = *((_DWORD *)a5 + 1);
  if (v7 > a6
    || (unsigned int v8 = *a5, (int)(v7 + v8) <= a6)
    || ((int v9 = *((_DWORD *)a5 + 2), v9 <= a7) ? (v10 = (int)(v9 + v8) <= a7) : (v10 = 1), v10))
  {
    int v11 = *(_DWORD *)(a1 + 4428);
    int v12 = *(_DWORD *)(a1 + 4432);
    int v13 = a6 - v11;
    int v14 = a7 - v12;
    int v15 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009);
    if (a4 < 0)
    {
LABEL_13:
      int v19 = -1;
    }
    else
    {
      int v16 = a2 - v11;
      int v17 = a3 - v12;
      int v18 = v15 - a4;
      while (v16 >> v18 != v13 >> v18 || v17 >> v18 != v14 >> v18)
      {
        BOOL v10 = v18++ < v15;
        if (!v10) {
          goto LABEL_13;
        }
      }
      int v19 = v15 - v18;
      if (v15 - v18 < a4) {
        ++v19;
      }
    }
    a5 = *(unsigned __int8 **)(a1
                             + 32 * v19
                             + 8
                             * ((v13 >> (v15 - v19)) & 1 | (2 * ((v14 >> (v15 - v19)) & 1)))
                             + 4456);
    int v7 = *((_DWORD *)a5 + 1);
    int v9 = *((_DWORD *)a5 + 2);
    unsigned int v8 = *a5;
  }
  return (*(__int16 *)(*((void *)a5 + 11)
                                   + 2
                                   * (((a6 - v7) >> 3)
                                    + (v8 >> 3) * (unint64_t)((a7 - v9) >> 3))) >> 9);
}

void sub_1BBA98928(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  int v8 = a6;
  uint64_t v13 = (uint64_t)(int)a2 >> 2;
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 576)
      + 16
      * (*(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  *(unsigned char *)(v14 + 10) = a8;
  *(unsigned char *)(v14 + 11) &= 0xBEu;
  int v15 = *(uint64_t **)(a1 + 8136);
  if (a8 < 2)
  {
    uint64_t v26 = *v15;
    uint64_t v27 = *v15 * ((uint64_t)(int)a3 >> 4) + ((int)a2 >> 4);
    switch(a4)
    {
      case 2:
        uint64_t v30 = v13 + v26 * (int)(a3 & 0xFFFFFFFC);
        uint64_t v31 = v15[14];
        break;
      case 3:
        uint64_t v30 = v26 * (int)(((int)a3 >> 2) & 0xFFFFFFFE) + ((int)a2 >> 3);
        uint64_t v31 = v15[13];
        break;
      case 4:
        uint64_t v28 = *(unsigned __int8 *)(v15[12] + v27);
        v29 = &unk_1BBB7A450;
LABEL_23:
        *(unsigned char *)uint64_t v14 = v29[v28];
LABEL_24:
        if (a7 && (int v32 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2012), a4 - 1 <= v32)) {
          LOBYTE(v33) = *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 576)
        }
                                 + 16
                                 * (*(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 552)
                                  * ((uint64_t)(int)((-2 << v32) & a3) >> 2)
                                  + ((int)((-2 << v32) & a2) >> 2))
                                 + 1);
        else {
          int v33 = dword_1BBB7A484[*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8136) + 120) + v27)];
        }
        *(unsigned char *)(v14 + 1) = v33;
        goto LABEL_29;
      default:
        goto LABEL_24;
    }
    uint64_t v28 = *(unsigned __int8 *)(v31 + v30);
    v29 = &unk_1BBB7A460;
    goto LABEL_23;
  }
  uint64_t v16 = v13 + *v15 * (int)(a3 & 0xFFFFFFFC);
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15[22] + v16);
  *(unsigned char *)(v14 + 9) = -1;
  uint64_t v17 = a1 + 4932;
  *(void *)uint64_t v14 = *(unsigned int *)(*(void *)(*(void *)(a1 + 8136) + 160) + 4 * v16);
  uint64_t v91 = a1 + 4928;
  sub_1BBAD033C(*(unsigned char **)(a1 + 1872), a2, a3, a5, a6, a1 + 4928);
  if (*(unsigned char *)(a1 + 4988))
  {
    uint64_t v18 = 0;
    int v19 = (_DWORD *)(a1 + 4936);
    while (*(_DWORD *)v14 != *(v19 - 1)
         || *(_DWORD *)(v14 + 4) != *v19
         || *(unsigned __int8 *)(v14 + 8) != *((unsigned __int8 *)v19 - 8)
         || *(unsigned __int8 *)(v14 + 9) != *((unsigned __int8 *)v19 - 7))
    {
      ++v18;
      v19 += 3;
      if (*(unsigned __int8 *)(a1 + 4988) == v18) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    LODWORD(v18) = -1;
  }
  *(unsigned char *)(v14 + 11) = *(unsigned char *)(v14 + 11) & 0xF0 | ((int)v18 >= 0) | (2 * v18) & ~((int)v18 >> 31) & 0xE;
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v93 = *(void *)v14;
    int v94 = 0;
    sub_1BBAD025C(*(void *)(a1 + 1872), a2, a3, 0, *(char *)(v14 + 8), a5, v8, (__int32 *)(a1 + 4992 + 52 * *(char *)(v14 + 8)));
    int v20 = *(char *)(v14 + 8);
    char v21 = sub_1BBA54764(a1 + 4992 + 52 * *(char *)(v14 + 8), (uint64_t)v92, 0);
    char v22 = *(unsigned char *)(v14 + 11);
    *(unsigned char *)(v14 + 11) = (16 * (v21 & 1)) | v22 & 0xEF;
    uint64_t v23 = *(void *)(a1 + 1872);
    int v24 = *(char *)(v23 + 500) - 1 == v20 ? v20 : v20 + 1;
    if ((v22 & 0x40) != 0)
    {
      sub_1BBAD025C(v23, a2, a3, 1u, *(char *)(v14 + 9), a5, v8, (__int32 *)(a1 + 5200 + 52 * *(char *)(v14 + 9)));
      uint64_t v17 = a1 + 4932;
      *(unsigned char *)(v14 + 11) = (32 * (sub_1BBA54764(a1 + 5200 + 52 * *(char *)(v14 + 9), (uint64_t)v92, 1u) & 1)) | *(unsigned char *)(v14 + 11) & 0xDF;
      int v41 = *(char *)(v14 + 8);
      char v25 = *(unsigned char *)(v14 + 8);
      uint64_t v23 = *(void *)(a1 + 1872);
      BOOL v42 = *(char *)(v23 + 501) - 1 == v41;
      int v43 = v24 + v41;
      int v24 = v42 ? v43 : v43 + 1;
    }
    else
    {
      char v25 = v20;
    }
    unsigned int v44 = *(unsigned __int8 *)(v17 + 56);
    unsigned int v45 = v44 - 1 == v44 >> 1 ? v44 >> 1 : (v44 >> 1) + 1;
    if (a5 == v8 && *(_DWORD *)(*(void *)(a1 + 952) + 592) == 2 && v94 + v24 > v45)
    {
      uint64_t v87 = v17;
      int v84 = *(char *)(v14 + 9);
      int v46 = *(_DWORD *)v14;
      int v47 = *(_DWORD *)(v14 + 4);
      char v82 = v25;
      int v48 = *(void **)(*(void *)(v23 + 79216) + 592);
      uint64_t v89 = *(void *)(*(void *)(v23 + 1360) + 112);
      uint64_t v90 = v48[14];
      uint64_t v88 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void))(*v48 + 16))(v48, a2, a3, 0);
      uint64_t v49 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(*(void *)(a1 + 1872) + 1360)
                                                                        + 16))(*(void *)(*(void *)(a1 + 1872) + 1360), a2, a3, 0);
      unint64_t v96 = __PAIR64__(v47, v46);
      int v81 = v47;
      char v50 = v82;
      v95[0] = v82;
      v95[1] = v84;
      unsigned int v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1
                                                                                           + 8 * __clz(__rbit32(a5))
                                                                                           + 1072);
      sub_1BBA54BE4((void *)(a1 + 1368), v95, a2, a3, a5, a5, v89, v49);
      uint64_t v85 = v51;
      uint64_t v86 = v49;
      unsigned int v52 = v51(a5, a5, v88, v90, v49, v89);
      unint64_t v53 = *(unsigned __int8 *)(v14 + 11);
      int v54 = *(_DWORD *)(a1 + 4992 + 52 * v82 + 4 * ((v53 >> 4) & 1));
      int v55 = (__int16)v46 - (__int16)v54;
      if ((v55 + 64) >= 0x80)
      {
        if (v55 >= 0) {
          int v57 = (__int16)v46 - (__int16)v54;
        }
        else {
          int v57 = (__int16)v54 - (__int16)v46;
        }
        unsigned int v56 = 63 - 2 * __clz((v55 < 1) | (2 * v57));
      }
      else
      {
        unsigned int v56 = byte_1BBB7B41C[v55 + 64];
      }
      int v58 = (v46 >> 16) - (v54 >> 16);
      unsigned int v59 = (unint64_t *)v87;
      if ((v58 + 64) >= 0x80)
      {
        if (v58 >= 0) {
          int v61 = v58;
        }
        else {
          int v61 = -v58;
        }
        unsigned int v60 = 63 - 2 * __clz((v58 < 1) | (2 * v61));
      }
      else
      {
        unsigned int v60 = byte_1BBB7B41C[v58 + 64];
      }
      int v83 = v8;
      uint64_t v62 = *(void *)(a1 + 1872);
      unsigned int v63 = v50 + v56 + v60;
      if (*(char *)(v62 + 500) - 1 != v50) {
        ++v63;
      }
      int v64 = v63 + 1;
      if ((v53 & 0x40) != 0)
      {
        int v65 = *(_DWORD *)(a1 + 52 * v84 + 4 * ((v53 >> 5) & 1) + 5200);
        int v66 = (__int16)v81 - (__int16)v65;
        if ((v66 + 64) >= 0x80)
        {
          if (v66 >= 0) {
            int v68 = (__int16)v81 - (__int16)v65;
          }
          else {
            int v68 = (__int16)v65 - (__int16)v81;
          }
          unsigned int v67 = 63 - 2 * __clz((v66 < 1) | (2 * v68));
        }
        else
        {
          unsigned int v67 = byte_1BBB7B41C[v66 + 64];
        }
        int v69 = (v81 >> 16) - (v65 >> 16);
        if ((v69 + 64) >= 0x80)
        {
          if (v69 >= 0) {
            int v71 = v69;
          }
          else {
            int v71 = -v69;
          }
          unsigned int v70 = 63 - 2 * __clz((v69 < 1) | (2 * v71));
        }
        else
        {
          unsigned int v70 = byte_1BBB7B41C[v69 + 64];
        }
        int v72 = v84 + v64 + v67 + v70;
        if (*(char *)(v62 + 501) - 1 != v84) {
          ++v72;
        }
        int v64 = v72 + 1;
      }
      unsigned int v73 = *(unsigned __int8 *)(v87 + 56);
      if (*(unsigned char *)(v87 + 56))
      {
        unint64_t v74 = 0;
        unint64_t v75 = v64 * *(unsigned __int16 *)(a1 + 996) + (unint64_t)v52;
        unsigned int v76 = -1;
        do
        {
          if (!sub_1BBA99114(v91, v74))
          {
            unint64_t v96 = *v59;
            *(_WORD *)unsigned int v95 = *((_WORD *)v59 - 2);
            sub_1BBA54BE4((void *)(a1 + 1368), v95, a2, a3, a5, a5, v89, v86);
            unsigned int v77 = v85(a5, a5, v88, v90, v86, v89);
            unsigned int v73 = *(unsigned __int8 *)(v87 + 56);
            int v78 = v74 == v73 - 1 ? v74 : (int)v74 + 1;
            unint64_t v79 = v78 * *(unsigned __int16 *)(a1 + 996) + (unint64_t)v77;
            if (v79 < v75)
            {
              unint64_t v75 = v79;
              unsigned int v76 = v74;
            }
          }
          ++v74;
          unsigned int v59 = (unint64_t *)((char *)v59 + 12);
        }
        while (v74 < v73);
        if ((v76 & 0x80000000) == 0)
        {
          *(unsigned char *)(v14 + 11) = *(unsigned char *)(v14 + 11) & 0xF0 | (2 * (v76 & 7)) | 1;
          uint64_t v80 = v91 + 12 * v76;
          *(_DWORD *)uint64_t v14 = *(_DWORD *)(v80 + 4);
          *(_DWORD *)(v14 + 4) = *(_DWORD *)(v80 + 8);
          *(unsigned char *)(v14 + 8) = *(unsigned char *)v80;
          *(unsigned char *)(v14 + 9) = *(unsigned char *)(v80 + 1);
        }
      }
      int v8 = v83;
    }
  }
LABEL_29:
  if (v8 >= 4)
  {
    uint64_t v34 = 0;
    LODWORD(v35) = (int)a5 >> 2;
    if ((int)a5 >> 2 <= 1) {
      uint64_t v35 = 1;
    }
    else {
      uint64_t v35 = v35;
    }
    uint64_t v36 = 16 * *(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 552);
    unsigned int v37 = (void *)v14;
    do
    {
      unint64_t v38 = v37;
      uint64_t v39 = v35;
      if ((int)a5 >= 4)
      {
        do
        {
          uint64_t v40 = *(void *)v14;
          *(void *)((char *)v38 + 6) = *(void *)(v14 + 6);
          *unint64_t v38 = v40;
          v38 += 2;
          --v39;
        }
        while (v39);
      }
      ++v34;
      unsigned int v37 = (void *)((char *)v37 + v36);
    }
    while (v34 != v8 >> 2);
  }
}

BOOL sub_1BBA99114(uint64_t a1, int a2)
{
  if (a2 < 1)
  {
    return 0;
  }
  else
  {
    uint64_t v2 = 0;
    v3 = (unsigned __int8 *)(a1 + 12 * a2);
    v4 = v3 + 4;
    int v7 = *v3;
    v5 = v3 + 1;
    int v6 = v7;
    int v8 = (_DWORD *)(a1 + 4);
    BOOL v9 = 1;
    do
    {
      if (v6 == *((unsigned __int8 *)v8 - 4)
        && *v4 == *v8
        && *v5 == *((unsigned __int8 *)v8 - 3)
        && *(_DWORD *)(a1 + 12 * a2 + 8) == v8[1])
      {
        break;
      }
      BOOL v9 = ++v2 < a2;
      v8 += 3;
    }
    while (a2 != v2);
  }
  return v9;
}

uint64_t sub_1BBA991B0(uint64_t result, int a2, int a3, char a4, unsigned __int8 *a5, __int16 a6)
{
  unint64_t v6 = 0;
  unsigned int v7 = a2 - *((_DWORD *)a5 + 1);
  if ((v7 & 0x80000000) == 0)
  {
    unsigned int v8 = a3 - *((_DWORD *)a5 + 2);
    if ((v8 & 0x80000000) == 0)
    {
      unint64_t v9 = *a5;
      if (v7 >= v9 || v8 >= v9) {
        unint64_t v6 = 0;
      }
      else {
        unint64_t v6 = *((void *)a5 + 11) + 2 * ((v7 >> 3) + (v9 >> 3) * (unint64_t)(v8 >> 3));
      }
    }
  }
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(result + 1880) + 2013) >> (a4 + 3);
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      for (uint64_t j = 0; j != v11; ++j)
      {
        uint64_t v14 = j + i * ((unint64_t)*a5 >> 3);
        *(_WORD *)(v6 + 2 * v14) = *(_WORD *)(v6 + 2 * v14) & 0x1FF | (a6 << 9);
      }
    }
  }
  return result;
}

uint64_t sub_1BBA99254(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v6 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) - a4;
  if (v6 <= *(_DWORD *)(*(void *)(a1 + 1888) + 1620)) {
    LOBYTE(v6) = *(_DWORD *)(*(void *)(a1 + 1888) + 1620);
  }
  int v7 = -1 << v6;
  int v8 = v7 & a2;
  int v9 = v7 & a3;
  int v10 = a6;
  if (v8 != *(_DWORD *)(a1 + 4428)) {
    int v10 = *(__int16 *)(*((void *)a5 + 11)
  }
                     + 2
                     * (((v8 + ~*((_DWORD *)a5 + 1)) >> 3)
                      + ((unint64_t)*a5 >> 3) * ((v9 - *((_DWORD *)a5 + 2)) >> 3))) >> 9;
  if (v9 != *(_DWORD *)(a1 + 4432)) {
    a6 = *(__int16 *)(*((void *)a5 + 11)
  }
                    + 2
                    * (((v8 - *((_DWORD *)a5 + 1)) >> 3)
                     + ((unint64_t)*a5 >> 3) * ((v9 + ~*((_DWORD *)a5 + 2)) >> 3))) >> 9;
  return ((v10 + a6 + 1) >> 1);
}

unint64_t sub_1BBA9930C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned int a7, unsigned int a8)
{
  uint64_t v12 = 0;
  int v13 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009);
  int v14 = v13 - a4;
  unsigned int v98 = 1 << (v13 - a4) >> 1;
  int v15 = *(unsigned __int8 *)(a1 + 188);
  unsigned int v16 = a2 - *((_DWORD *)a6 + 1);
  unsigned int v17 = a3 - *((_DWORD *)a6 + 2);
  BOOL v18 = a8 == 3;
  char v113 = 35;
  int v111 = 0;
  int v112 = 17439232;
  int v109 = *(unsigned __int8 *)(*((void *)a6 + 12) + 16 * ((v16 >> 2) + ((unint64_t)*a6 >> 2) * (v17 >> 2)));
  if (a8 == 3) {
    int v19 = 4;
  }
  else {
    int v19 = 1;
  }
  int v105 = v14;
  BOOL v102 = a8 == 3;
  char v20 = v14 - v18;
  int v21 = 1 << (v14 - v18);
  while (*((unsigned __int8 *)&v112 + v12) != v109)
  {
    if (++v12 == 4) {
      goto LABEL_9;
    }
  }
  *((unsigned char *)&v112 + v12) = 34;
LABEL_9:
  uint64_t v22 = 0;
  int v101 = 0;
  __int16 v23 = v15 == 0;
  uint64_t v99 = (uint64_t *)(a1 + 8 * a4 + 4616);
  uint64_t v100 = *((void *)a6 + 17);
  uint64_t v24 = *v99;
  *((void *)a5 + 18) = *v99;
  uint64_t v25 = *((void *)a5 + 17);
  *(_DWORD *)(v25 + 128) = 0;
  uint64_t v26 = v21 >> 2;
  uint64_t v110 = a1 + 1920;
  *(_OWORD *)(v25 + 112) = xmmword_1BBB6F8F0;
  __int16 v104 = 2 * v23;
  *(_WORD *)(v25 + 132) = 2 * v23;
  uint64_t v108 = a6;
  do
  {
    unsigned int v27 = 0;
    *(_DWORD *)(v24 + 128) = 0;
    *(_OWORD *)(v24 + 112) = xmmword_1BBB6F8F0;
    *(_WORD *)(v24 + 132) = v104;
    int v28 = *((unsigned __int8 *)&v112 + v22);
    do
    {
      unint64_t v29 = 0;
      unsigned int v30 = ((v27 & 1) << v20) + a2 - *((_DWORD *)a5 + 1);
      if ((v30 & 0x80000000) == 0)
      {
        unsigned int v31 = (v27 >> 1 << v20) + a3 - *((_DWORD *)a5 + 2);
        if ((v31 & 0x80000000) == 0)
        {
          unint64_t v32 = *a5;
          if (v30 >= v32 || v31 >= v32) {
            unint64_t v29 = 0;
          }
          else {
            unint64_t v29 = *((void *)a5 + 12) + 16 * ((v30 >> 2) + (v32 >> 2) * (unint64_t)(v31 >> 2));
          }
        }
      }
      *(unsigned char *)(v29 + 1) = v28;
      if (v21 >= 4)
      {
        uint64_t v34 = 0;
        unint64_t v35 = 16 * ((unint64_t)*a5 >> 2);
        uint64_t v36 = (void *)v29;
        do
        {
          unsigned int v37 = v36;
          uint64_t v38 = v21 >> 2;
          do
          {
            uint64_t v39 = *(void *)v29;
            *(void *)((char *)v37 + 6) = *(void *)(v29 + 6);
            *unsigned int v37 = v39;
            v37 += 2;
            --v38;
          }
          while (v38);
          ++v34;
          uint64_t v36 = (void *)((char *)v36 + v35);
        }
        while (v34 != v26);
      }
      ++v27;
    }
    while (v27 != v19);
    if (*(unsigned char *)(a1 + 188))
    {
      *(void *)(*((void *)a5 + 18) + 112) = sub_1BBABC664(v110, (uint64_t)a2, a3, a5, a6, 1u, a8, v28, v105, v102, 0, a7, &v111);
      uint64_t v40 = *(void *)(a1 + 944);
      long long v41 = *(_OWORD *)(v40 + 16);
      *(_OWORD *)(v40 + 216) = *(_OWORD *)v40;
      long long v42 = *(_OWORD *)(v40 + 32);
      long long v43 = *(_OWORD *)(v40 + 64);
      long long v44 = *(_OWORD *)(v40 + 80);
      *(_OWORD *)(v40 + 264) = *(_OWORD *)(v40 + 48);
      *(_OWORD *)(v40 + 280) = v43;
      *(_OWORD *)(v40 + 248) = v42;
      *(_OWORD *)(v40 + 232) = v41;
      long long v45 = *(_OWORD *)(v40 + 96);
      long long v46 = *(_OWORD *)(v40 + 128);
      long long v47 = *(_OWORD *)(v40 + 144);
      *(_OWORD *)(v40 + 328) = *(_OWORD *)(v40 + 112);
      *(_OWORD *)(v40 + 344) = v46;
      *(_OWORD *)(v40 + 296) = v44;
      *(_OWORD *)(v40 + 312) = v45;
      long long v48 = *(_OWORD *)(v40 + 176);
      *(_OWORD *)(v40 + 376) = *(_OWORD *)(v40 + 160);
      *(_OWORD *)(v40 + 392) = v48;
      char v115 = 0;
      *(void *)(v40 + 408) = *(void *)(v40 + 192);
      *(_OWORD *)(v40 + 360) = v47;
      uint64_t v49 = 8 * (*(_DWORD *)(v40 + 208) - *(_DWORD *)(v40 + 24));
      *(void *)(v40 + 32) = 0;
      *(void *)(v40 + 8) = 510;
      *(void *)(v40 + 16) = v49;
      int v114 = *((_DWORD *)a5 + 5);
      sub_1BBA99BA0(*(unint64_t **)(a1 + 944), v109, v28);
      sub_1BBA9595C(a1, (int)a2, (int)a3, a5, 1, 0, 0, 0, 1);
      unint64_t result = (unint64_t)sub_1BBAB6590(v110, (uint64_t)a2, (uint64_t)a3, a4, &v114, &v115, 0);
      uint64_t v51 = *(void *)(a1 + 944);
      int v52 = *(_DWORD *)(v51 + 24);
      int v53 = *(_DWORD *)(v51 + 16);
      int v54 = *(_DWORD *)(v51 + 8);
      long long v55 = *(_OWORD *)(v51 + 232);
      *(_OWORD *)uint64_t v51 = *(_OWORD *)(v51 + 216);
      *(_OWORD *)(v51 + 16) = v55;
      long long v56 = *(_OWORD *)(v51 + 360);
      long long v57 = *(_OWORD *)(v51 + 392);
      *(_OWORD *)(v51 + 160) = *(_OWORD *)(v51 + 376);
      *(_OWORD *)(v51 + 176) = v57;
      long long v58 = *(_OWORD *)(v51 + 296);
      long long v59 = *(_OWORD *)(v51 + 328);
      long long v60 = *(_OWORD *)(v51 + 344);
      *(_OWORD *)(v51 + 96) = *(_OWORD *)(v51 + 312);
      *(_OWORD *)(v51 + 112) = v59;
      long long v61 = *(_OWORD *)(v51 + 248);
      *(_OWORD *)(v51 + 128) = v60;
      *(_OWORD *)(v51 + 144) = v56;
      long long v62 = *(_OWORD *)(v51 + 264);
      long long v63 = *(_OWORD *)(v51 + 280);
      *(_OWORD *)(v51 + 32) = v61;
      *(_OWORD *)(v51 + 48) = v62;
      int v64 = ((v53 + 8 * (v52 - *(_DWORD *)(v51 + 208))) << 8) - v54 + 510;
      *(void *)(v51 + 192) = *(void *)(v51 + 408);
      *(_OWORD *)(v51 + 64) = v63;
      *(_OWORD *)(v51 + 80) = v58;
      uint64_t v65 = *((void *)a5 + 18);
      uint64_t v66 = *(void *)(v65 + 112);
    }
    else
    {
      unint64_t result = sub_1BBABB098(v110, a2, (uint64_t)a3, a5, a6, a8, v28, v105, 0, 0, a7);
      uint64_t v66 = result;
      uint64_t v65 = *((void *)a5 + 18);
      *(void *)(v65 + 112) = result;
      if (v28 == 35) {
        int v64 = 1;
      }
      else {
        int v64 = 3;
      }
    }
    *(_DWORD *)(v65 + 128) = v64;
    unint64_t v67 = v66
        + ((v64 * *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(v65 + 132) + 992)) >> (8 * (*(_WORD *)(v65 + 132) == 0)));
    *(void *)(v65 + 120) = v67;
    uint64_t v24 = *((void *)a5 + 17);
    if (v67 >= *(void *)(v24 + 120))
    {
      uint64_t v68 = *((void *)a5 + 17);
      uint64_t v24 = v65;
    }
    else
    {
      *((void *)a5 + 17) = v65;
      *((void *)a5 + 18) = v24;
      uint64_t v68 = v65;
      int v101 = v28;
    }
    a6 = v108;
    ++v22;
  }
  while (v22 != 5);
  unsigned int v69 = 0;
  unsigned int v70 = &a5[24 * *(unsigned __int8 *)(a1 + 188)];
  *((void *)v70 + 21) += *(void *)(v68 + 112);
  *((_DWORD *)v70 + 46) += *(_DWORD *)(v68 + 128);
  do
  {
    unint64_t v71 = 0;
    unsigned int v72 = ((v69 & 1) << v20) + a2 - *((_DWORD *)v108 + 1);
    if ((v72 & 0x80000000) == 0)
    {
      unsigned int v73 = (v69 >> 1 << v20) + a3 - *((_DWORD *)v108 + 2);
      if ((v73 & 0x80000000) == 0)
      {
        unint64_t v74 = *v108;
        if (v72 >= v74 || v73 >= v74) {
          unint64_t v71 = 0;
        }
        else {
          unint64_t v71 = *((void *)v108 + 12) + 16 * ((v72 >> 2) + (v74 >> 2) * (unint64_t)(v73 >> 2));
        }
      }
    }
    *(unsigned char *)(v71 + 1) = v101;
    if (v21 >= 4)
    {
      uint64_t v76 = 0;
      unint64_t v77 = 16 * ((unint64_t)*v108 >> 2);
      int v78 = (void *)v71;
      do
      {
        unint64_t v79 = v78;
        uint64_t v80 = v21 >> 2;
        do
        {
          uint64_t v81 = *(void *)v71;
          *(void *)((char *)v79 + 6) = *(void *)(v71 + 6);
          *unint64_t v79 = v81;
          v79 += 2;
          --v80;
        }
        while (v80);
        ++v76;
        int v78 = (void *)((char *)v78 + v77);
      }
      while (v76 != v26);
    }
    ++v69;
  }
  while (v69 != v19);
  int v111 = 0;
  if (!*(unsigned char *)(a1 + 188))
  {
    if ((*(_WORD *)(*((void *)v108 + 11)
                   + 2
                   * (((a2 - *((_DWORD *)v108 + 1)) >> 3)
                    + ((unint64_t)*v108 >> 3) * ((a3 - *((_DWORD *)v108 + 2)) >> 3))) & 0xC) == 0
      || *(unsigned char *)(a1 + 8126))
    {
      unint64_t result = sub_1BBABC664(v110, (uint64_t)a2, a3, a5, v108, 0, a8, v101, v105, 0, 0, a7, &v111);
      a6 = v108;
      if (!*(unsigned char *)a1) {
        goto LABEL_55;
      }
      uint64_t v82 = result;
      uint64_t v83 = *((void *)a5 + 17);
      *(void *)(v83 + 112) = result;
      int v84 = *(_DWORD *)(v83 + 128) + v111;
      *(_DWORD *)(v83 + 128) = v84;
      goto LABEL_54;
    }
    if (*(unsigned char *)a1)
    {
      uint64_t v88 = 0;
      unsigned int v89 = a2 - *((_DWORD *)a5 + 1);
      unsigned int v90 = a3 - *((_DWORD *)a5 + 2);
      if ((v89 & 0x80000000) == 0 && (v90 & 0x80000000) == 0)
      {
        uint64_t v88 = 0;
        unsigned int v91 = *a5;
        if (v89 < v91 && v90 < v91)
        {
          uint64_t v88 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96) + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v89+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v90 & 0xFFFFFFFE));
          unsigned int v89 = a2 - *((_DWORD *)a5 + 1);
          unsigned int v90 = a3 - *((_DWORD *)a5 + 2);
        }
      }
      uint64_t v92 = 0;
      uint64_t v93 = *((void *)a5 + 17);
      if ((v89 & 0x80000000) != 0) {
        goto LABEL_71;
      }
      uint64_t v94 = 0;
      if ((v90 & 0x80000000) != 0) {
        goto LABEL_72;
      }
      uint64_t v92 = 0;
      unsigned int v95 = *a5;
      if (v89 >= v95)
      {
LABEL_71:
        uint64_t v94 = 0;
      }
      else
      {
        uint64_t v94 = 0;
        if (v90 < v95)
        {
          unint64_t v96 = (v89 >> 1) + *(unsigned __int8 *)(v93 + 1) * (unint64_t)(v90 >> 1);
          uint64_t v92 = *(void *)(v93 + 64) + 2 * v96;
          uint64_t v94 = *(void *)(v93 + 72) + 2 * v96;
        }
      }
LABEL_72:
      unint64_t result = sub_1BBABDA80(v110, (int)a2, (int)a3, a5, v88, 2 * *(unsigned __int8 *)(v93 + 1), v92, v94, *(unsigned __int8 *)(v93 + 1), v98, &v111);
      uint64_t v82 = result;
      uint64_t v97 = *((void *)a5 + 17);
      *(void *)(v97 + 112) = result;
      int v84 = *(_DWORD *)(v97 + 128) + v111;
      *(_DWORD *)(v97 + 128) = v84;
      a6 = v108;
      if (*(unsigned char *)a1)
      {
LABEL_54:
        *((void *)a5 + 24) += v82;
        *((_DWORD *)a5 + 52) += v84;
      }
    }
  }
LABEL_55:
  uint64_t v85 = *((void *)a5 + 17);
  if (v100 == v85)
  {
    uint64_t v86 = *((void *)a5 + 18);
  }
  else
  {
    unint64_t result = (unint64_t)sub_1BBA8E71C(a1, v100, v85, (int)a2 - *((_DWORD *)a6 + 1), (int)a3 - *((_DWORD *)a6 + 2), (int)a2 - *((_DWORD *)a5 + 1), (int)a3 - *((_DWORD *)a5 + 2), *a5 >> 1);
    uint64_t v86 = *((void *)a5 + 18);
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t v87 = *((void *)a5 + 17);
      *((void *)a5 + 17) = v86;
      *((void *)a5 + 18) = v87;
      uint64_t v86 = v87;
    }
  }
  *uint64_t v99 = v86;
  return result;
}

uint64_t sub_1BBA99AE8(int a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (a3 >= 1)
  {
    int v5 = a3 + a2;
    int v6 = a3 + a1;
    if (a5) {
      char v7 = 3;
    }
    else {
      char v7 = 2;
    }
    uint64_t v8 = a5;
    BOOL v9 = (int)a5 > 0;
    int v10 = *((_DWORD *)a4 + 2);
    while (2)
    {
      int v11 = a1;
      do
      {
        int v12 = v11 - *((_DWORD *)a4 + 1);
        if (v12 >= 0
          && ((a2 - v10) & 0x80000000) == 0
          && *(unsigned char *)(*((void *)a4 + 12)
                      + 16 * ((v12 >> 2) + ((unint64_t)*a4 >> 2) * ((a2 - v10) >> 2))
                      + 10) != 2
          && *(unsigned char *)(*(void *)(*((void *)a4 + 17) + 8 * v8 + 32)
                      + (v12 >> v7)
                      + ((unint64_t)*(unsigned __int8 *)(*((void *)a4 + 17) + v9) >> 2)
                      * ((a2 - v10) >> v7)))
        {
          return 1;
        }
        v11 += 4;
      }
      while (v11 < v6);
      a2 += 4;
      if (a2 < v5) {
        continue;
      }
      break;
    }
  }
  return 0;
}

unint64_t *sub_1BBA99BA0(unint64_t *a1, int a2, int a3)
{
  int v5 = (char *)a1 + 57;
  if (a3 == 35)
  {
    return sub_1BBA1CA34(a1, 0, v5);
  }
  else
  {
    sub_1BBA1CA34(a1, 1, v5);
    uint64_t v8 = 0;
    char v11 = 35;
    int v10 = 17439232;
    while (*((unsigned __int8 *)&v10 + v8) != a2)
    {
      if (++v8 == 4) {
        goto LABEL_10;
      }
    }
    *((unsigned char *)&v10 + v8) = 34;
LABEL_10:
    uint64_t v9 = 0;
    while (*((unsigned __int8 *)&v10 + v9) != a3)
    {
      if (++v9 == 4) {
        goto LABEL_15;
      }
    }
    a3 = v9;
LABEL_15:
    return sub_1BBA1CC5C(a1, a3, 2);
  }
}

uint64_t sub_1BBA99CA4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, unsigned __int8 *a6, uint64_t a7, unint64_t a8)
{
  char v15 = *(unsigned char *)(*(void *)(a1 + 1880) + 2009);
  *((_OWORD *)a6 + 12) = xmmword_1BBB6F8F0;
  unsigned int v16 = (unint64_t *)(a6 + 192);
  int v139 = 0;
  char v134 = v15 - a4;
  long long v138 = xmmword_1BBB6F8F0;
  __int16 v140 = 0;
  *((_DWORD *)a6 + 52) = 0;
  *((_WORD *)a6 + 106) = 0;
  LODWORD(v142) = 0;
  long long v141 = xmmword_1BBB6F8F0;
  WORD2(v142) = 0;
  HIWORD(v142) = *((_WORD *)a6 + 107);
  sub_1BBA991B0(a1, a2, a3, a4, a6, *((_DWORD *)a6 + 3));
  if (*(unsigned char *)(a1 + 188) || !*(unsigned char *)(a1 + 8127) || *(char *)(*(void *)(a1 + 952) + 252) >= 1)
  {
    uint64_t result = sub_1BBA9A7B0(a1, a2, a3, a4, a6, (uint64_t)v16, (uint64_t)&v141, 1, &v138);
    goto LABEL_3;
  }
  uint64_t result = sub_1BBA9A7B0(a1, a2, a3, a4, a6, (uint64_t)v16, (uint64_t)&v141, 0, &v138);
  int v18 = result;
  *((_DWORD *)a6 + 52) = v139;
  unsigned int v82 = a2 - *((_DWORD *)a6 + 1);
  if ((v82 & 0x80000000) != 0
    || (unsigned int v83 = a3 - *((_DWORD *)a6 + 2), (v83 & 0x80000000) != 0)
    || (unint64_t v84 = *a6,
        *(unsigned char *)(*((void *)a6 + 12)
                 + 16 * ((v82 >> 2) + (v84 >> 2) * (unint64_t)(v83 >> 2))
                 + 10) != 2))
  {
    if (!*(unsigned char *)(a1 + 8127) || !*(unsigned char *)(*(void *)(a1 + 952) + 251)) {
      goto LABEL_4;
    }
    *((_DWORD *)a6 + 52) = 0;
    *((_OWORD *)a6 + 12) = xmmword_1BBB6F8F0;
    *((_WORD *)a6 + 106) = 0;
    LODWORD(v142) = 0;
    long long v141 = xmmword_1BBB6F8F0;
    WORD2(v142) = 0;
    uint64_t result = sub_1BBAC2E18(a1 + 1920, a2, a3, 0, a6, 0, (uint64_t)v16, (uint64_t)&v141);
LABEL_3:
    int v18 = result;
    goto LABEL_4;
  }
  uint64_t v85 = *((void *)a6 + 11);
  unint64_t v86 = (v82 >> 3) + (v84 >> 3) * (unint64_t)(v83 >> 3);
  __int16 v87 = *(_WORD *)(v85 + 2 * v86);
  if ((v87 & 0x80) == 0)
  {
    uint64_t v88 = 0;
    *(_WORD *)(v85 + 2 * v86) = v87 | 0x80;
    unsigned int v89 = a2 - *((_DWORD *)a6 + 1);
    unint64_t v90 = *a6;
    if ((v89 & 0x80000000) == 0)
    {
      unsigned int v91 = a3 - *((_DWORD *)a6 + 2);
      if ((v91 & 0x80000000) == 0)
      {
        uint64_t v88 = 0;
        if (v89 < v90 && v91 < v90) {
          uint64_t v88 = (_WORD *)(*((void *)a6 + 11)
        }
                        + 2 * ((v89 >> 3) + (v90 >> 3) * (unint64_t)(v91 >> 3)));
      }
    }
    if (1 << v134 >= 8)
    {
      uint64_t v92 = 0;
      uint64_t v93 = v88;
      do
      {
        uint64_t v94 = v93;
        uint64_t v95 = (1 << v134) >> 3;
        do
        {
          *v94++ = *v88;
          --v95;
        }
        while (v95);
        ++v92;
        v93 += v90 >> 3;
      }
      while (v92 != (1 << v134) >> 3);
    }
  }
LABEL_4:
  unint64_t v19 = *v16;
  if (*v16 >= a8)
  {
    *((_DWORD *)a6 + 52) = 1;
    *((void *)a6 + 25) = v19
                         + (*(unsigned __int16 *)(a1 + 2 * *((__int16 *)a6 + 106) + 992) >> (8
                                                                                             * (*((_WORD *)a6 + 106) == 0)));
    return result;
  }
  uint64_t v20 = *(void *)(a1 + 944);
  long long v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)(v20 + 216) = *(_OWORD *)v20;
  long long v22 = *(_OWORD *)(v20 + 32);
  long long v23 = *(_OWORD *)(v20 + 64);
  long long v24 = *(_OWORD *)(v20 + 80);
  *(_OWORD *)(v20 + 264) = *(_OWORD *)(v20 + 48);
  *(_OWORD *)(v20 + 280) = v23;
  *(_OWORD *)(v20 + 248) = v22;
  *(_OWORD *)(v20 + 232) = v21;
  long long v25 = *(_OWORD *)(v20 + 96);
  long long v26 = *(_OWORD *)(v20 + 128);
  long long v27 = *(_OWORD *)(v20 + 144);
  *(_OWORD *)(v20 + 328) = *(_OWORD *)(v20 + 112);
  *(_OWORD *)(v20 + 344) = v26;
  *(_OWORD *)(v20 + 296) = v24;
  *(_OWORD *)(v20 + 312) = v25;
  long long v28 = *(_OWORD *)(v20 + 176);
  *(_OWORD *)(v20 + 376) = *(_OWORD *)(v20 + 160);
  *(_OWORD *)(v20 + 392) = v28;
  char v137 = 0;
  *(void *)(v20 + 408) = *(void *)(v20 + 192);
  *(_OWORD *)(v20 + 360) = v27;
  uint64_t v29 = 8 * (*(_DWORD *)(v20 + 208) - *(_DWORD *)(v20 + 24));
  *(void *)(v20 + 32) = 0;
  *(void *)(v20 + 8) = 510;
  *(void *)(v20 + 16) = v29;
  sub_1BBA9595C(a1, a2, a3, a6, 1, 0, 0, 1, 0);
  *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
  uint64_t result = (uint64_t)sub_1BBA9AF40((unint64_t *)a1, a2, a3, a4, a7, (int *)a6 + 4, &v137);
  uint64_t v30 = *(void *)(a1 + 944);
  *((_DWORD *)a6 + 52) = *((_DWORD *)a6 + 52)
                       - *(_DWORD *)(v30 + 8)
                       + ((*(_DWORD *)(v30 + 16) + 8 * (*(_DWORD *)(v30 + 24) - *(_DWORD *)(v30 + 208))) << 8)
                       + 510;
  long long v32 = *(_OWORD *)(v30 + 264);
  long long v31 = *(_OWORD *)(v30 + 280);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v30 + 248);
  *(_OWORD *)(v30 + 48) = v32;
  long long v34 = *(_OWORD *)(v30 + 328);
  long long v33 = *(_OWORD *)(v30 + 344);
  long long v35 = *(_OWORD *)(v30 + 296);
  *(_OWORD *)(v30 + 96) = *(_OWORD *)(v30 + 312);
  *(_OWORD *)(v30 + 112) = v34;
  *(_OWORD *)(v30 + 64) = v31;
  *(_OWORD *)(v30 + 80) = v35;
  long long v36 = *(_OWORD *)(v30 + 392);
  long long v37 = *(_OWORD *)(v30 + 360);
  *(_OWORD *)(v30 + 160) = *(_OWORD *)(v30 + 376);
  *(_OWORD *)(v30 + 176) = v36;
  long long v38 = *(_OWORD *)(v30 + 232);
  *(void *)(v30 + 192) = *(void *)(v30 + 408);
  *(_OWORD *)(v30 + 128) = v33;
  *(_OWORD *)(v30 + 144) = v37;
  *(_OWORD *)uint64_t v30 = *(_OWORD *)(v30 + 216);
  *(_OWORD *)(v30 + 16) = v38;
  unint64_t v39 = *((void *)a6 + 24)
      + ((*((_DWORD *)a6 + 52) * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)a6 + 106) + 992)) >> (8 * (*((_WORD *)a6 + 106) == 0)));
  *((void *)a6 + 25) = v39;
  if (*(unsigned char *)(*(void *)(a1 + 952) + 227))
  {
    int v40 = (unint64_t)v141 < v39 ? v18 : 0;
    if (v40 == 1)
    {
      if (*(unsigned char *)(*(void *)(a1 + 1888) + 12)) {
        sub_1BBA8E388(a5, a6, a2, a3, *a6);
      }
      long long v41 = *(long long **)(a1 + 944);
      long long v42 = v41[10];
      long long v43 = v41[11];
      long long v44 = v41[8];
      *(long long *)((char *)v41 + 360) = v41[9];
      *(long long *)((char *)v41 + 376) = v42;
      *(long long *)((char *)v41 + 392) = v43;
      long long v45 = v41[6];
      long long v46 = v41[7];
      long long v47 = v41[4];
      *(long long *)((char *)v41 + 296) = v41[5];
      *(long long *)((char *)v41 + 312) = v45;
      *(long long *)((char *)v41 + 328) = v46;
      *(long long *)((char *)v41 + 344) = v44;
      long long v48 = *v41;
      *(long long *)((char *)v41 + 232) = v41[1];
      long long v49 = v41[3];
      *(long long *)((char *)v41 + 248) = v41[2];
      *(long long *)((char *)v41 + 264) = v49;
      *(long long *)((char *)v41 + 280) = v47;
      *((void *)v41 + 51) = *((void *)v41 + 24);
      *(long long *)((char *)v41 + 216) = v48;
      uint64_t v50 = 8 * (*((_DWORD *)v41 + 52) - *((_DWORD *)v41 + 6));
      *((void *)v41 + 4) = 0;
      *((void *)v41 + 1) = 510;
      *((void *)v41 + 2) = v50;
      sub_1BBA9595C(a1, a2, a3, a6, 1, 1, 0, 1, 0);
      *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
      uint64_t result = (uint64_t)sub_1BBA9AF40((unint64_t *)a1, a2, a3, a4, a7, (int *)a6 + 4, &v137);
      uint64_t v51 = *(void *)(a1 + 944);
      long long v53 = *(_OWORD *)(v51 + 264);
      long long v52 = *(_OWORD *)(v51 + 280);
      *(_OWORD *)(v51 + 32) = *(_OWORD *)(v51 + 248);
      *(_OWORD *)(v51 + 48) = v53;
      long long v55 = *(_OWORD *)(v51 + 328);
      long long v54 = *(_OWORD *)(v51 + 344);
      long long v56 = *(_OWORD *)(v51 + 296);
      *(_OWORD *)(v51 + 96) = *(_OWORD *)(v51 + 312);
      *(_OWORD *)(v51 + 112) = v55;
      *(_OWORD *)(v51 + 64) = v52;
      *(_OWORD *)(v51 + 80) = v56;
      long long v57 = *(_OWORD *)(v51 + 392);
      long long v58 = *(_OWORD *)(v51 + 360);
      *(_OWORD *)(v51 + 160) = *(_OWORD *)(v51 + 376);
      *(_OWORD *)(v51 + 176) = v57;
      LODWORD(v142) = v142
                    - *(_DWORD *)(v51 + 8)
                    + ((*(_DWORD *)(v51 + 16) + 8 * (*(_DWORD *)(v51 + 24) - *(_DWORD *)(v51 + 208))) << 8)
                    + 510;
      int v59 = v142;
      *(void *)(v51 + 192) = *(void *)(v51 + 408);
      *(_OWORD *)(v51 + 128) = v54;
      *(_OWORD *)(v51 + 144) = v58;
      long long v60 = *(_OWORD *)(v51 + 232);
      *(_OWORD *)uint64_t v51 = *(_OWORD *)(v51 + 216);
      *(_OWORD *)(v51 + 16) = v60;
      *((void *)&v141 + 1) = v141
                             + ((v59 * *(unsigned __int16 *)(a1 + 2 * SWORD2(v142) + 992)) >> (8 * (WORD2(v142) == 0)));
      if (*((void *)&v141 + 1) >= *((void *)a6 + 25))
      {
        if (!*(unsigned char *)(*(void *)(a1 + 1888) + 12)) {
          return result;
        }
        uint64_t result = (uint64_t)sub_1BBA8E388(a6, a5, a2, a3, *a5);
      }
      else
      {
        long long v61 = 0;
        int v62 = 1 << (*(unsigned char *)(*(void *)(a1 + 1880) + 2009) - a4 - 2);
        unsigned int v63 = a2 - *((_DWORD *)a6 + 1);
        int v136 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) - a4;
        if ((v63 & 0x80000000) == 0)
        {
          unsigned int v64 = a3 - *((_DWORD *)a6 + 2);
          if ((v64 & 0x80000000) == 0)
          {
            long long v61 = 0;
            unsigned int v65 = *a6;
            if (v63 < v65 && v64 < v65) {
              long long v61 = (char *)(*(void *)(*((void *)a6 + 17) + 32)
            }
                           + (v63 >> 2)
                           + ((unint64_t)**((unsigned __int8 **)a6 + 17) >> 2) * (v64 >> 2));
          }
        }
        unint64_t v66 = (unint64_t)**((unsigned __int8 **)a6 + 17) >> 2;
        uint64_t v67 = v62;
        do
        {
          --v67;
          bzero(v61, v62);
          v61 += v66;
        }
        while (v67);
        if (!*(unsigned char *)(a1 + 8))
        {
          uint64_t v68 = 0;
          if ((a3 & 7) == 0 || (a2 & 7) == 0) {
            int v70 = 0;
          }
          else {
            int v70 = v62;
          }
          if (v136 >= 3) {
            LODWORD(v71) = v62 >> 1;
          }
          else {
            LODWORD(v71) = v70;
          }
          uint64_t v72 = *((void *)a6 + 17);
          unint64_t v73 = (unint64_t)*(unsigned __int8 *)(v72 + 1) >> 2;
          unsigned int v74 = a2 - *((_DWORD *)a6 + 1);
          unsigned int v75 = a3 - *((_DWORD *)a6 + 2);
          if ((v74 & 0x80000000) == 0 && (v75 & 0x80000000) == 0)
          {
            uint64_t v68 = 0;
            unsigned int v76 = *a6;
            if (v74 < v76 && v75 < v76) {
              uint64_t v68 = (char *)(*(void *)(v72 + 40) + (v74 >> 3) + v73 * (unint64_t)(v75 >> 3));
            }
          }
          size_t v77 = (int)v71;
          if (v71)
          {
            uint64_t v78 = (int)v71;
            do
            {
              --v78;
              bzero(v68, (int)v71);
              v68 += v73;
            }
            while (v78);
            unsigned int v74 = a2 - *((_DWORD *)a6 + 1);
            unsigned int v75 = a3 - *((_DWORD *)a6 + 2);
          }
          unint64_t v79 = 0;
          if ((v74 & 0x80000000) == 0 && (v75 & 0x80000000) == 0)
          {
            unsigned int v80 = *a6;
            if (v74 >= v80 || v75 >= v80) {
              unint64_t v79 = 0;
            }
            else {
              unint64_t v79 = (char *)(*(void *)(*((void *)a6 + 17) + 48)
            }
                           + (v74 >> 3)
                           + ((unint64_t)*(unsigned __int8 *)(*((void *)a6 + 17) + 1) >> 2) * (v75 >> 3));
          }
          if (v71)
          {
            uint64_t v71 = (int)v71;
            do
            {
              --v71;
              bzero(v79, v77);
              v79 += v73;
            }
            while (v71);
          }
        }
        unint64_t v96 = 0;
        unsigned int v97 = a2 - *((_DWORD *)a6 + 1);
        if ((v97 & 0x80000000) != 0)
        {
          unint64_t v99 = 0;
        }
        else
        {
          unsigned int v98 = a3 - *((_DWORD *)a6 + 2);
          unint64_t v99 = 0;
          if ((v98 & 0x80000000) == 0)
          {
            unint64_t v100 = *a6;
            if (v97 >= v100 || v98 >= v100)
            {
              unint64_t v96 = 0;
              unint64_t v99 = 0;
            }
            else
            {
              unint64_t v96 = (_WORD *)(*((void *)a6 + 11)
                            + 2 * ((v97 >> 3) + (v100 >> 3) * (unint64_t)(v98 >> 3)));
              unint64_t v99 = *((void *)a6 + 12) + 16 * ((v97 >> 2) + (v100 >> 2) * (unint64_t)(v98 >> 2));
            }
          }
        }
        if (*v96 & 0x70) == 0 && (*(unsigned char *)(v99 + 11))
        {
          *v96 |= 0x80u;
          *(unsigned char *)(v99 + 10) = 2;
          *(unsigned char *)(v99 + 11) &= ~1u;
          unint64_t v102 = *a6;
          if (v102 >= 8)
          {
            uint64_t v103 = 0;
            unint64_t v104 = v102 >> 3;
            int v105 = v96;
            do
            {
              int v106 = v105;
              unint64_t v107 = v104;
              do
              {
                *v106++ = *v96;
                --v107;
              }
              while (v107);
              ++v103;
              v105 += v104;
            }
            while (v103 != v104);
            LODWORD(v102) = *a6;
          }
          if (v102 >= 4)
          {
            uint64_t v108 = 0;
            uint64_t v109 = v102 >> 2;
            uint64_t v110 = (void *)v99;
            do
            {
              int v111 = v110;
              uint64_t v112 = v102 >> 2;
              do
              {
                uint64_t v113 = *(void *)v99;
                *(void *)((char *)v111 + 6) = *(void *)(v99 + 6);
                *int v111 = v113;
                v111 += 2;
                --v112;
              }
              while (v112);
              ++v108;
              v110 += 2 * v109;
            }
            while (v108 != v109);
          }
        }
        uint64_t v114 = 0;
        uint64_t v115 = (1 << v134);
        uint64_t v116 = a6[1];
        uint64_t v117 = (a2 - *((_DWORD *)a6 + 1));
        unsigned int v118 = a3 - *((_DWORD *)a6 + 2);
        if ((v117 & 0x80000000) == 0 && (v118 & 0x80000000) == 0)
        {
          unsigned int v119 = *a6;
          if (v117 >= v119 || v118 >= v119)
          {
            uint64_t v114 = 0;
          }
          else
          {
            uint64_t v114 = (*(uint64_t (**)(void, unint64_t))(**((void **)a6 + 7) + 24))(*((void *)a6 + 7), v117 + a6[1] * (unint64_t)v118 + *((void *)a6 + 8));
            LODWORD(v117) = a2 - *((_DWORD *)a6 + 1);
            unsigned int v118 = a3 - *((_DWORD *)a6 + 2);
          }
        }
        uint64_t v121 = 0;
        unsigned int v122 = (unsigned __int8 *)*((void *)a6 + 17);
        uint64_t v123 = *v122;
        if ((v117 & 0x80000000) == 0 && (v118 & 0x80000000) == 0)
        {
          uint64_t v121 = 0;
          unsigned int v124 = *a6;
          if (v117 < v124 && v118 < v124) {
            uint64_t v121 = (*(uint64_t (**)(void, unint64_t))(**((void **)v122 + 10) + 24))(*((void *)v122 + 10), *((void *)v122 + 11) + v117 + *v122 * (unint64_t)v118);
          }
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v115, v115, v116, v114, v123, v121);
        if (!*(unsigned char *)(a1 + 8))
        {
          uint64_t v125 = 0;
          uint64_t v126 = a6[1];
          uint64_t v127 = (a2 - *((_DWORD *)a6 + 1));
          unsigned int v128 = a3 - *((_DWORD *)a6 + 2);
          if ((v127 & 0x80000000) == 0 && (v128 & 0x80000000) == 0)
          {
            uint64_t v125 = 0;
            unsigned int v129 = *a6;
            if (v127 < v129 && v128 < v129)
            {
              uint64_t v125 = (*(uint64_t (**)(void, unint64_t))(**((void **)a6 + 9) + 24))(*((void *)a6 + 9), v127 + a6[1] * (unint64_t)(v128 >> 1) + *((void *)a6 + 10));
              LODWORD(v127) = a2 - *((_DWORD *)a6 + 1);
              unsigned int v128 = a3 - *((_DWORD *)a6 + 2);
            }
          }
          uint64_t v130 = 0;
          uint64_t v131 = *((void *)a6 + 17);
          uint64_t v132 = 2 * *(unsigned __int8 *)(v131 + 1);
          if ((v127 & 0x80000000) == 0 && (v128 & 0x80000000) == 0)
          {
            uint64_t v130 = 0;
            unsigned int v133 = *a6;
            if (v127 < v133 && v128 < v133) {
              uint64_t v130 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v131 + 96) + 24))(*(void *)(v131 + 96), *(void *)(v131 + 104) + v127 + v132 * (unint64_t)(v128 >> 1));
            }
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v115, ((int)v115 >> 1), v126, v125, v132, v130);
        }
        *(_OWORD *)unsigned int v16 = v141;
        v16[2] = v142;
      }
      *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
    }
  }
  return result;
}

uint64_t sub_1BBA9A7B0(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, int a8, long long *a9)
{
  int v14 = a9;
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) - (uint64_t)a4;
  unsigned int v99 = 1 << v15;
  uint64_t v16 = a2 - *((_DWORD *)a5 + 1);
  unsigned int v17 = a3 - *((_DWORD *)a5 + 2);
  if (((v16 | v17) & 0x80000000) == 0)
  {
    unint64_t v18 = *a5;
    if (v16 < v18 && v17 < v18)
    {
      unint64_t v24 = *((void *)a5 + 12)
          + 16 * ((v16 >> 2) + (v18 >> 2) * (unint64_t)(v17 >> 2));
      uint64_t v20 = v24 + 10;
      if (*(unsigned char *)(v24 + 10) == 2)
      {
        uint64_t result = 0;
        if (a6 && a7)
        {
          long long v22 = (void *)a7;
          uint64_t v97 = a6;
          uint64_t v26 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3), v16 + a5[1] * (unint64_t)v17 + *((void *)a5 + 4));
          int v14 = a9;
          uint64_t v23 = v26;
          LODWORD(v16) = a2 - *((_DWORD *)a5 + 1);
          unsigned int v17 = a3 - *((_DWORD *)a5 + 2);
          goto LABEL_16;
        }
        return result;
      }
      long long v25 = (_WORD *)(*((void *)a5 + 11)
                    + 2 * ((v16 >> 3) + (v18 >> 3) * (unint64_t)(v17 >> 3)));
LABEL_36:
      unsigned __int8 v94 = a8;
      if (*(unsigned char *)(a1 + 8127)) {
        LODWORD(v49) = a8;
      }
      else {
        LODWORD(v49) = 1;
      }
      if (v49 != 1 || *(unsigned char *)(*(void *)(a1 + 952) + 227) != 0)
      {
        uint64_t v51 = (unsigned __int8 *)*((void *)a5 + 17);
        uint64_t v52 = *v51;
        char v93 = v49;
        uint64_t v53 = 0;
        if ((int)(v16 | v17) >= 0)
        {
          unsigned int v54 = *a5;
          if (v16 < v54 && v17 < v54)
          {
            uint64_t v55 = *v51;
            uint64_t v56 = (*(uint64_t (**)(void, uint64_t))(**((void **)v51 + 10) + 24))(*((void *)v51 + 10), *((void *)v51 + 11) + v16 + v55 * v17);
            uint64_t v52 = v55;
            uint64_t v53 = v56;
            LODWORD(v16) = a2 - *((_DWORD *)a5 + 1);
            unsigned int v17 = a3 - *((_DWORD *)a5 + 2);
          }
        }
        uint64_t v57 = 0;
        uint64_t v49 = a5[1];
        if ((v16 & 0x80000000) == 0 && (v17 & 0x80000000) == 0)
        {
          uint64_t v57 = 0;
          unsigned int v58 = *a5;
          if (v16 < v58 && v17 < v58)
          {
            uint64_t v91 = v52;
            uint64_t v59 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 7) + 24))(*((void *)a5 + 7), v16 + a5[1] * (unint64_t)v17 + *((void *)a5 + 8));
            uint64_t v52 = v91;
            uint64_t v57 = v59;
          }
        }
        (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v99, v99, v52, v53, v49, v57);
        LOBYTE(v49) = v93;
        if (!*(unsigned char *)(a1 + 8))
        {
          uint64_t v60 = 0;
          uint64_t v61 = ((int)v99 >> 1);
          uint64_t v62 = *((void *)a5 + 17);
          uint64_t v63 = *(unsigned __int8 *)(v62 + 1);
          uint64_t v64 = 2 * v63;
          unsigned int v65 = a2 - *((_DWORD *)a5 + 1);
          unsigned int v66 = a3 - *((_DWORD *)a5 + 2);
          if ((v65 & 0x80000000) == 0 && (v66 & 0x80000000) == 0)
          {
            uint64_t v60 = 0;
            unsigned int v67 = *a5;
            if (v65 < v67 && v66 < v67)
            {
              uint64_t v68 = 2 * v63;
              uint64_t v69 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v62 + 96) + 24))(*(void *)(v62 + 96), *(void *)(v62 + 104)+ v65+ *(unsigned __int8 *)(v62 + 1) * (unint64_t)(v66 & 0xFFFFFFFE));
              uint64_t v64 = v68;
              uint64_t v61 = ((int)v99 >> 1);
              uint64_t v60 = v69;
              unsigned int v65 = a2 - *((_DWORD *)a5 + 1);
              unsigned int v66 = a3 - *((_DWORD *)a5 + 2);
            }
          }
          uint64_t v70 = 0;
          uint64_t v71 = a5[1];
          if ((v65 & 0x80000000) == 0 && (v66 & 0x80000000) == 0)
          {
            uint64_t v70 = 0;
            unsigned int v72 = *a5;
            if (v65 < v72 && v66 < v72)
            {
              unsigned int v92 = v61;
              uint64_t v89 = v60;
              uint64_t v90 = v64;
              uint64_t v73 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 9) + 24))(*((void *)a5 + 9), v65 + a5[1] * (unint64_t)(v66 >> 1) + *((void *)a5 + 10));
              uint64_t v60 = v89;
              uint64_t v64 = v90;
              uint64_t v61 = v92;
              uint64_t v70 = v73;
            }
          }
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v99, v61, v64, v60, v71, v70);
          LOBYTE(v49) = v93;
        }
      }
      sub_1BBAB48E0(a1 + 1920, a1, a2, a3, a4, *(unsigned __int8 *)v20, ((unsigned __int16)*v25 >> 4) & 7);
      if (v49)
      {
        uint64_t v74 = a6;
        uint64_t result = sub_1BBAC4F90(a1 + 1920, a2, a3, 0, a5, 0, a6, a7, *(unsigned char *)(a1 + 8) == 0, 0, v94);
      }
      else
      {
        unsigned int v75 = a9;
        if (a9)
        {
          uint64_t v88 = a7;
        }
        else
        {
          int v101 = 0;
          long long v100 = xmmword_1BBB6F8F0;
          __int16 v102 = 0;
          uint64_t v88 = a7;
          unsigned int v75 = &v100;
        }
        uint64_t v74 = a6;
        uint64_t result = sub_1BBABF424(a1 + 1920, a2, a3, 0, a5, 0, a6, (uint64_t)v75, v88);
      }
      if (!*(unsigned char *)(a1 + 8) || *(char *)(*(void *)(a1 + 952) + 226) <= 0)
      {
        char v76 = *(unsigned char *)v20 == 3 ? result : 1;
        if ((v76 & 1) == 0)
        {
          if ((*v25 & 0x70) != 0) {
            return 0;
          }
          char v77 = *(unsigned char *)(v24 + 11);
          if ((v77 & 1) == 0) {
            return 0;
          }
          *(unsigned char *)uint64_t v20 = 2;
          *(unsigned char *)(v24 + 11) = v77 & 0xFE;
          *v25 |= 0x80u;
          *(_DWORD *)(v74 + 16) = 0;
          unsigned int v78 = *a5;
          if ((int)v99 >= 8)
          {
            uint64_t v79 = 0;
            unsigned int v80 = v25;
            do
            {
              uint64_t v81 = v80;
              uint64_t v82 = v99 >> 3;
              do
              {
                *v81++ = *v25;
                --v82;
              }
              while (v82);
              ++v79;
              v80 += v78 >> 3;
            }
            while (v79 != v99 >> 3);
            unsigned int v78 = *a5;
          }
          if ((int)v99 < 4) {
            return 0;
          }
          uint64_t v83 = 0;
          unint64_t v84 = (void *)v24;
          do
          {
            uint64_t v85 = v84;
            uint64_t v86 = v99 >> 2;
            do
            {
              uint64_t v87 = *(void *)v24;
              *(void *)((char *)v85 + 6) = *(void *)(v24 + 6);
              *uint64_t v85 = v87;
              v85 += 2;
              --v86;
            }
            while (v86);
            uint64_t result = 0;
            ++v83;
            v84 += 2 * (v78 >> 2);
          }
          while (v83 != v99 >> 2);
        }
      }
      return result;
    }
  }
  uint64_t v20 = 10;
  if (MEMORY[0xA] != 2)
  {
    unint64_t v24 = 0;
    long long v25 = 0;
    goto LABEL_36;
  }
  uint64_t result = 0;
  if (a6 && a7)
  {
    long long v22 = (void *)a7;
    uint64_t v97 = a6;
    uint64_t v23 = 0;
LABEL_16:
    uint64_t v27 = 0;
    uint64_t v28 = a5[1];
    uint64_t v29 = (unsigned __int8 *)*((void *)a5 + 17);
    uint64_t v30 = *v29;
    long long v31 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * v15 + 992);
    unint64_t v96 = v14;
    if ((v16 & 0x80000000) == 0 && (v17 & 0x80000000) == 0)
    {
      uint64_t v27 = 0;
      unsigned int v32 = *a5;
      if (v16 < v32 && v17 < v32) {
        uint64_t v27 = (*(uint64_t (**)(void, unint64_t))(**((void **)v29 + 10) + 24))(*((void *)v29 + 10), *((void *)v29 + 11) + v16 + *v29 * (unint64_t)v17);
      }
    }
    unsigned int v33 = v31(v99, v99, v23, v28, v27, v30);
    long long v34 = v22;
    *long long v22 = v33;
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t v35 = 0;
      uint64_t v36 = (1 << (v15 - 1));
      uint64_t v37 = a2 - *((_DWORD *)a5 + 1);
      unsigned int v38 = a3 - *((_DWORD *)a5 + 2);
      if ((v37 & 0x80000000) == 0 && (v38 & 0x80000000) == 0)
      {
        uint64_t v35 = 0;
        unsigned int v39 = *a5;
        if (v37 < v39 && v38 < v39)
        {
          uint64_t v35 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 5) + 24))(*((void *)a5 + 5), v37 + a5[1] * (unint64_t)(v38 >> 1) + *((void *)a5 + 6));
          LODWORD(v37) = a2 - *((_DWORD *)a5 + 1);
          unsigned int v38 = a3 - *((_DWORD *)a5 + 2);
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = a5[1];
      uint64_t v42 = *((void *)a5 + 17);
      uint64_t v43 = 2 * *(unsigned __int8 *)(v42 + 1);
      long long v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * v15 + 1144);
      if ((v37 & 0x80000000) == 0 && (v38 & 0x80000000) == 0)
      {
        uint64_t v40 = 0;
        unsigned int v45 = *a5;
        if (v37 < v45 && v38 < v45) {
          uint64_t v40 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v42 + 96) + 24))(*(void *)(v42 + 96), *(void *)(v42 + 104)+ v37+ *(unsigned __int8 *)(v42 + 1) * (unint64_t)(v38 & 0xFFFFFFFE));
        }
      }
      unsigned int v46 = v44(v36, v36, v35, v41, v40, v43);
      long long v34 = v22;
      *v22 += ((*(unsigned __int16 *)(a1 + 1002) * (unint64_t)v46) >> 8);
    }
    *((_DWORD *)v34 + 4) = 0;
    long long v47 = *(_OWORD *)v34;
    *(void *)(v97 + 16) = v34[2];
    *(_OWORD *)uint64_t v97 = v47;
    if (v96)
    {
      uint64_t result = 0;
      long long v48 = *(_OWORD *)v34;
      *((void *)v96 + 2) = v34[2];
      *unint64_t v96 = v48;
      return result;
    }
    return 0;
  }
  return result;
}

unint64_t *sub_1BBA9AF40(unint64_t *result, int a2, int a3, int a4, uint64_t a5, int *a6, unsigned char *a7)
{
  int v8 = a4;
  int v9 = a3;
  uint64_t v11 = (uint64_t)result;
  int v12 = (unsigned __int8 *)result[235];
  int v13 = v12[2009] - a4;
  int v14 = 1 << (v12[2009] - a4);
  int v15 = v12[2008];
  int v16 = v14 + a2;
  if (v14 + a2 > *((_DWORD *)result + 4) || (v14 + a3 <= *((_DWORD *)result + 5) ? (BOOL v17 = v13 <= v15) : (BOOL v17 = 1), v17))
  {
    if (v13 > v15)
    {
LABEL_54:
      char v47 = v13 - 1;
      int v48 = 1 << (v13 - 1);
      uint64_t v49 = *(void *)(v11 + 1888);
      if (*(unsigned char *)(v49 + 12) && v13 == *(_DWORD *)(v49 + 1620))
      {
        char v151 = 1;
        *a7 = 1;
      }
      else
      {
        char v151 = 0;
      }
      unsigned int v50 = 0;
      int v51 = v48 + a2;
      int v52 = v48 + v9;
      do
      {
        signed int v53 = *(_DWORD *)(v11 + 16);
        if ((int)(((v50 & 1) << v47) + a2) < v53)
        {
          signed int v54 = *(_DWORD *)(v11 + 20);
          if ((int)((v50 >> 1 << v47) + v9) < v54)
          {
            uint64_t v55 = sub_1BBA8EDCC(a5, v50, v51 < v53, v52 < v54);
            uint64_t result = (unint64_t *)sub_1BBA9AF40(v11, ((v50 & 1) << v47) + a2, (v50 >> 1 << v47) + v9, (v8 + 1), v55, a6, a7);
            int v9 = a3;
          }
        }
        ++v50;
      }
      while (v50 != 4);
      if (v151)
      {
        if (*a7)
        {
          uint64_t v56 = *(unsigned __int8 **)(v11 + 848);
          int v57 = *(unsigned __int8 *)(v11 + 800);
          int v58 = sub_1BBA9783C(v11, a2, v9, v8, v56, *a6, v57);
          *a6 = v58;
          uint64_t result = (unint64_t *)sub_1BBA97994(v11, a2, v9, v8, v56, v58, v57);
          *a7 = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (a2 - (1 << v15) < 0)
    {
      BOOL v32 = 0;
    }
    else
    {
      if (*((unsigned char *)result + 800)) {
        uint64_t v26 = *(_WORD **)(result[106] + 104);
      }
      else {
        uint64_t v26 = (_WORD *)(*(void *)(*(void *)(result[234] + 1360) + 512)
      }
                      + 2
                      * (((a2 - (1 << v15)) >> 3)
                       + *(void *)(*(void *)(result[234] + 1360) + 488) * ((uint64_t)a3 >> 3)));
      BOOL v32 = (*v26 & 3) > a4;
    }
    int v34 = v12[241];
    int v35 = a3 - (1 << v15);
    if (v35 < 0)
    {
      BOOL v41 = 0;
    }
    else
    {
      if (*((unsigned char *)result + 800))
      {
        BOOL v36 = v15 == 31;
        uint64_t v37 = 112;
        if (v36) {
          uint64_t v37 = 104;
        }
        uint64_t v38 = *(void *)(result[106] + v37);
        uint64_t v39 = -536870912;
        if (!v36) {
          uint64_t v39 = 0;
        }
        uint64_t v40 = (_WORD *)(v38 + v39);
      }
      else
      {
        uint64_t v40 = (_WORD *)(*(void *)(*(void *)(result[234] + 1360) + 512)
                      + 2
                      * (*(void *)(*(void *)(result[234] + 1360) + 488) * (v35 >> 3) + (a2 >> 3)));
      }
      BOOL v41 = (*v40 & 3) > a4;
    }
    BOOL v44 = v41 + v32;
    BOOL v46 = (*(_WORD *)(result[107]
                    + 2
                    * (result[104] * ((uint64_t)(a3 - *((_DWORD *)result + 203)) >> 3)
                     + ((a2 - *((_DWORD *)result + 202)) >> 3))) & 3) > a4
       && v34 > a4;
    uint64_t result = sub_1BBA1CA34((unint64_t *)result[118], v46, (unsigned char *)(result[118] + v44 + 42));
    int v9 = a3;
    if (v46) {
      goto LABEL_54;
    }
  }
  uint64_t v18 = *(void *)(v11 + 1888);
  if (*(unsigned char *)(v18 + 12) && v13 >= *(_DWORD *)(v18 + 1620)) {
    *a7 = 1;
  }
  int v19 = v9 | a2;
  int v149 = v16;
  if (((v9 | a2) & 0x80000000) == 0
    && ((int v20 = a2 - *(_DWORD *)(v11 + 808),
         int v21 = v9 - *(_DWORD *)(v11 + 812),
         int v22 = *(unsigned __int8 *)(v11 + 804),
         v20 < v22)
      ? (BOOL v23 = v21 < v22)
      : (BOOL v23 = 0),
        v23))
  {
    unint64_t v24 = (unsigned __int16 *)(*(void *)(v11 + 856) + 2 * (*(void *)(v11 + 832) * ((uint64_t)v21 >> 3) + (v20 >> 3)));
    uint64_t v25 = *(void *)(v11 + 864) + 16 * (*(void *)(v11 + 840) * ((uint64_t)v21 >> 2) + (v20 >> 2));
  }
  else
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  int v27 = *(unsigned __int8 *)(*(void *)(v11 + 1880) + 2009);
  uint64_t v28 = *(void *)(v11 + 944);
  if (*(unsigned char *)(v18 + 19))
  {
    sub_1BBA1CA34(*(unint64_t **)(v11 + 944), HIBYTE(*v24) & 1, (unsigned char *)(v28 + 45));
    int v9 = a3;
  }
  v150 = v24;
  int v29 = v27 - v8;
  uint64_t v30 = *(void *)(v11 + 1872);
  if (*(unsigned __int8 *)(v30 + 10) <= 1u)
  {
    if (a2 < 1)
    {
      unsigned int v33 = 0;
    }
    else
    {
      if (*(unsigned char *)(v11 + 800)) {
        long long v31 = *(unsigned __int16 **)(*(void *)(v11 + 848) + 104);
      }
      else {
        long long v31 = (unsigned __int16 *)(*(void *)(*(void *)(v30 + 1360) + 512)
      }
                                 + 2
                                 * (((a2 - 1) >> 3)
                                  + *(void *)(*(void *)(v30 + 1360) + 488) * ((uint64_t)v9 >> 3)));
      unsigned int v33 = (*v31 >> 7) & 1;
    }
    if (v9 < 1)
    {
      unsigned int v43 = 0;
    }
    else
    {
      if (*(unsigned char *)(v11 + 800)) {
        uint64_t v42 = *(unsigned __int16 **)(*(void *)(v11 + 848) + 112);
      }
      else {
        uint64_t v42 = (unsigned __int16 *)(*(void *)(*(void *)(v30 + 1360) + 512)
      }
                                 + 2
                                 * (*(void *)(*(void *)(v30 + 1360) + 488) * ((v9 - 1) >> 3)
                                  + (a2 >> 3)));
      unsigned int v43 = (*v42 >> 7) & 1;
    }
    unint64_t v59 = v43 + (unint64_t)v33;
    if (*(unsigned char *)(v11 + 800))
    {
      if (*(unsigned char *)(v11 + 8)) {
        BOOL v60 = *(char *)(*(void *)(v11 + 952) + 226) < 1;
      }
      else {
        BOOL v60 = 1;
      }
      if ((*v150 & 0x80) == 0)
      {
        if ((*v150 & 0x70) == 0 && *(unsigned char *)(v11 + 801))
        {
          unsigned __int8 v62 = *(unsigned char *)(v25 + 11) & v60;
          uint64_t result = sub_1BBA1CA34((unint64_t *)v28, v62, (unsigned char *)(v28 + v59 + 46));
          int v9 = a3;
          if ((v62 & 1) == 0) {
            goto LABEL_93;
          }
LABEL_83:
          int v63 = v29;
          unsigned int v64 = *(unsigned __int8 *)(*(void *)(v11 + 1872) + 620);
          unsigned int v65 = v64 - 2;
          if (v64 >= 2)
          {
            int v66 = (*(unsigned __int8 *)(v25 + 11) >> 1) & 7;
            uint64_t result = sub_1BBA1CA34((unint64_t *)v28, v66 != 0, (unsigned char *)(v28 + 59));
            if (v66)
            {
              unsigned int v67 = v66 - 1;
              if ((int)v65 >= v66 - 1) {
                int v68 = v66 - 1;
              }
              else {
                int v68 = v65;
              }
              if (v67 >= v65) {
                int v69 = v68;
              }
              else {
                int v69 = v68 + 1;
              }
              uint64_t result = sub_1BBA1CC5C((unint64_t *)v28, ~(v67 < v65), v69);
            }
          }
          goto LABEL_191;
        }
        goto LABEL_92;
      }
LABEL_82:
      uint64_t result = sub_1BBA1CA34((unint64_t *)v28, 1, (unsigned char *)(v28 + v59 + 46));
      goto LABEL_83;
    }
    if ((*v150 & 0x80) != 0) {
      goto LABEL_82;
    }
    if ((*v150 & 0x70) != 0 || !*(unsigned char *)(v11 + 801))
    {
LABEL_92:
      sub_1BBA1CA34((unint64_t *)v28, 0, (unsigned char *)(v28 + v59 + 46));
      int v9 = a3;
      goto LABEL_93;
    }
    char v61 = *(unsigned char *)(v25 + 11);
    uint64_t result = sub_1BBA1CA34((unint64_t *)v28, v61 & 1, (unsigned char *)(v28 + v59 + 46));
    int v9 = a3;
    if (v61) {
      goto LABEL_83;
    }
  }
LABEL_93:
  uint64_t v148 = v25;
  if (*(unsigned __int8 *)(*(void *)(v11 + 1872) + 10) <= 1u)
  {
    sub_1BBA1CA34((unint64_t *)v28, *(unsigned __int8 *)(v25 + 10) == 1, (unsigned char *)(v28 + 51));
    int v9 = a3;
    if (*(unsigned char *)(v25 + 10) != 1)
    {
      int v70 = ((unsigned __int16)*v150 >> 4) & 7;
      if (!v70)
      {
        uint64_t v77 = 0;
LABEL_114:
        sub_1BBA1CA34((unint64_t *)v28, 1, (unsigned char *)(v28 + v77 + 52));
        int v9 = a3;
        goto LABEL_115;
      }
      int v147 = v14;
      int v71 = v29;
      if (v29 != *(unsigned __int8 *)(*(void *)(v11 + 1880) + 2008) || v29 <= 3) {
        unsigned int v73 = 2;
      }
      else {
        unsigned int v73 = 3;
      }
      unint64_t v74 = v73 - 1;
      unint64_t v75 = (v70 - 1);
      if (v74 >= v75) {
        unsigned int v76 = v75;
      }
      else {
        unsigned int v76 = v73 - 1;
      }
      uint64_t v77 = v76 + 1;
      if (v74 >= v75) {
        unint64_t v78 = v75;
      }
      else {
        unint64_t v78 = v73 - 1;
      }
      for (uint64_t i = -1; i != v78; ++i)
        sub_1BBA1CA34((unint64_t *)v28, 0, (unsigned char *)(v28 + i + 53));
      BOOL v80 = v77 >= v73;
      int v9 = a3;
      int v14 = v147;
      int v29 = v71;
      uint64_t v25 = v148;
      if (!v80) {
        goto LABEL_114;
      }
    }
  }
LABEL_115:
  uint64_t v81 = *(unsigned __int8 **)(v11 + 1880);
  if (*(unsigned char *)(v25 + 10) != 1)
  {
    int v63 = v29;
    int v92 = v8;
    char v93 = v81[2009] - v8;
    int v94 = 1 << (v93 - 1);
    int v95 = v94 + a2;
    int v96 = v94 + v9;
    char v97 = v93 - 2;
    int v98 = 1 << v93;
    int v99 = 1 << (v93 - 2);
    switch((*(unsigned __int16 *)(*(void *)(v11 + 856)
                                  + 2
                                  * (*(void *)(v11 + 832) * ((uint64_t)(v9 - *(_DWORD *)(v11 + 812)) >> 3)
                                   + ((a2 - *(_DWORD *)(v11 + 808)) >> 3))) >> 4) & 7)
    {
      case 0:
        uint64_t v100 = v11;
        int v101 = a2;
        int v102 = v9;
        int v103 = 1 << v93;
        int v104 = 1 << v93;
        int v8 = v92;
        int v105 = v92;
        break;
      case 1:
        int v130 = v92;
        sub_1BBA9BE90(v11, a2, v9, 1 << v93, 1 << (v93 - 1), v92);
        uint64_t v100 = v11;
        int v101 = a2;
        int v102 = v94 + v9;
        int v8 = v130;
        int v103 = v98;
        goto LABEL_162;
      case 2:
        int v8 = v92;
        sub_1BBA9BE90(v11, a2, v9, 1 << (v93 - 1), 1 << v93, v92);
        uint64_t v100 = v11;
        int v101 = v94 + a2;
        int v102 = a3;
        int v103 = v94;
        goto LABEL_167;
      case 4:
        int v131 = v96 - v99;
        int v8 = v92;
        sub_1BBA9BE90(v11, a2, v9, 1 << v93, 1 << (v93 - 2), v92);
        int v104 = 3 << v97;
        uint64_t v100 = v11;
        int v101 = a2;
        int v102 = v131;
        int v103 = v98;
        goto LABEL_168;
      case 5:
        int v132 = v96 + v99;
        int v8 = v92;
        sub_1BBA9BE90(v11, a2, v9, v98, 3 << v97, v92);
        uint64_t v100 = v11;
        int v101 = a2;
        int v102 = v132;
        int v103 = v98;
        int v104 = v99;
        goto LABEL_168;
      case 6:
        int v8 = v92;
        sub_1BBA9BE90(v11, a2, v9, 1 << (v93 - 2), 1 << v93, v92);
        int v103 = 3 << v97;
        uint64_t v100 = v11;
        int v101 = v95 - v99;
        int v102 = a3;
        goto LABEL_167;
      case 7:
        int v8 = v92;
        sub_1BBA9BE90(v11, a2, v9, 3 << v97, v98, v92);
        uint64_t v100 = v11;
        int v101 = v95 + v99;
        int v102 = a3;
        int v103 = v99;
LABEL_167:
        int v104 = v98;
LABEL_168:
        int v105 = v8;
        break;
      default:
        int v130 = v92;
        sub_1BBA9BE90(v11, a2, v9, 1 << (v93 - 1), 1 << (v93 - 1), v92);
        sub_1BBA9BE90(v11, v94 + a2, a3, v94, v94, v130);
        sub_1BBA9BE90(v11, a2, v94 + v9, v94, v94, v130);
        uint64_t v100 = v11;
        int v101 = v94 + a2;
        int v102 = v94 + v9;
        int v8 = v130;
        int v103 = v94;
LABEL_162:
        int v104 = v94;
        int v105 = v130;
        break;
    }
    uint64_t result = sub_1BBA9BE90(v100, v101, v102, v103, v104, v105);
    goto LABEL_178;
  }
  if (v29 == v81[2008])
  {
    sub_1BBA1CA34((unint64_t *)v28, (*v150 & 0x70) == 0, (unsigned char *)(v28 + 52));
    int v9 = a3;
    uint64_t v81 = *(unsigned __int8 **)(v11 + 1880);
  }
  int v82 = *(_DWORD *)(v11 + 808);
  int v83 = a2 - v82;
  int v84 = *(_DWORD *)(v11 + 812);
  int v85 = v9 - v84;
  uint64_t v86 = 0;
  if ((v19 & 0x80000000) == 0)
  {
    int v87 = *(unsigned __int8 *)(v11 + 804);
    if (v83 < v87 && v85 < v87) {
      uint64_t v86 = (unsigned __int8 *)(*(void *)(v11 + 864) + 16
    }
                                                       * (*(void *)(v11 + 840) * ((uint64_t)v85 >> 2) + (v83 >> 2)));
  }
  int v88 = v81[2009];
  v158[0] = 1;
  int v89 = *(unsigned __int8 *)(v11 + 800);
  if (((v81[2013] - 1) & v9) == 0) {
    goto LABEL_133;
  }
  if (*(unsigned char *)(v11 + 800))
  {
    uint64_t v90 = *(unsigned char **)(*(void *)(v11 + 848) + 128);
    if (!v90) {
      goto LABEL_133;
    }
  }
  else
  {
    if (((v9 - 1) | a2) < 0) {
      goto LABEL_133;
    }
    uint64_t v106 = *(void *)(*(void *)(v11 + 1872) + 1360);
    if (*(_DWORD *)(v106 + 276) <= a2) {
      goto LABEL_133;
    }
    if (*(_DWORD *)(v106 + 280) < v9) {
      goto LABEL_133;
    }
    uint64_t v90 = (unsigned char *)(*(void *)(v106 + 576) + 16 * (*(void *)(v106 + 552) * ((uint64_t)(v9 - 1) >> 2) + (a2 >> 2)));
    if (!v90) {
      goto LABEL_133;
    }
  }
  if (v90[10] == 1)
  {
    uint64_t v91 = 0;
    goto LABEL_134;
  }
LABEL_133:
  uint64_t v90 = v158;
  uint64_t v91 = v158;
LABEL_134:
  int v107 = a2 - 1;
  if (*(unsigned char *)(v11 + 800))
  {
    uint64_t v108 = *(unsigned char **)(*(void *)(v11 + 848) + 120);
    if (!v108) {
      goto LABEL_142;
    }
  }
  else
  {
    if ((v107 | v9) < 0) {
      goto LABEL_142;
    }
    uint64_t v110 = *(void *)(*(void *)(v11 + 1872) + 1360);
    if (*(_DWORD *)(v110 + 276) < a2) {
      goto LABEL_142;
    }
    if (*(_DWORD *)(v110 + 280) <= v9) {
      goto LABEL_142;
    }
    uint64_t v108 = (unsigned char *)(*(void *)(v110 + 576) + 16 * (*(void *)(v110 + 552) * ((uint64_t)v9 >> 2) + (v107 >> 2)));
    if (!v108) {
      goto LABEL_142;
    }
  }
  if (v108[10] == 1)
  {
    uint64_t v109 = 0;
    goto LABEL_143;
  }
LABEL_142:
  uint64_t v108 = v158;
  uint64_t v109 = v158;
LABEL_143:
  if ((*(_WORD *)(*(void *)(v11 + 856) + 2 * (*(void *)(v11 + 832) * ((uint64_t)v85 >> 3) + (v83 >> 3))) & 0x70) != 0x30)
  {
    int v63 = v29;
    v157[0] = *v86;
    v156[0] = *v90;
    v155[0] = *v108;
    uint64_t v126 = *(void *)(v11 + 944);
    unsigned int v127 = 1;
    goto LABEL_176;
  }
  int v111 = ~v8 + v88;
  uint64_t v112 = *(void *)(v11 + 864);
  uint64_t v113 = *(void *)(v11 + 840);
  uint64_t v114 = v113 * ((uint64_t)v85 >> 2);
  int v115 = v83 >> 2;
  char v116 = *(unsigned char *)(v112 + 16 * (v114 + (v83 >> 2)));
  int v117 = 1 << v111;
  v157[0] = v116;
  int v118 = (1 << v111) + a2;
  int v119 = (v118 - v82) >> 2;
  char v120 = *(unsigned char *)(v112 + 16 * (v114 + v119));
  v157[1] = v120;
  int v121 = (1 << v111) + v9;
  uint64_t v122 = v113 * ((uint64_t)(v121 - v84) >> 2);
  char v123 = *(unsigned char *)(v112 + 16 * (v122 + v115));
  v157[2] = v123;
  v157[3] = *(unsigned char *)(v112 + 16 * (v122 + v119));
  if (!v91)
  {
    if (v89)
    {
      uint64_t v124 = *(void *)(v11 + 848);
      int v125 = v117 >> 2;
      if (v111 == 31) {
        int v128 = -1;
      }
      else {
        int v128 = v125;
      }
      uint64_t v91 = (unsigned char *)(*(void *)(v124 + 128) + 16 * v128);
      if (!v109) {
        goto LABEL_154;
      }
      goto LABEL_175;
    }
    if ((v118 | (v9 - 1)) < 0
      || (uint64_t v133 = *(void *)(*(void *)(v11 + 1872) + 1360), *(_DWORD *)(v133 + 276) <= v118)
      || *(_DWORD *)(v133 + 280) < v9)
    {
      uint64_t v91 = 0;
    }
    else
    {
      uint64_t v91 = (unsigned char *)(*(void *)(v133 + 576) + 16 * (*(void *)(v133 + 552) * ((uint64_t)(v9 - 1) >> 2) + (v118 >> 2)));
    }
  }
  if (!v109)
  {
    if (v89)
    {
      uint64_t v124 = *(void *)(v11 + 848);
      int v125 = v117 >> 2;
LABEL_154:
      if (v111 == 31) {
        int v125 = -1;
      }
      uint64_t v129 = 120;
      if (v111 == 31) {
        uint64_t v129 = 128;
      }
      uint64_t v109 = (unsigned char *)(*(void *)(v124 + v129) + 16 * v125);
      goto LABEL_175;
    }
    uint64_t v109 = (unsigned char *)(*(void *)(*(void *)(*(void *)(v11 + 1872) + 1360) + 576)
                   + 16
                   * (*(void *)(*(void *)(*(void *)(v11 + 1872) + 1360) + 552) * ((uint64_t)v121 >> 2)
                    + (v107 >> 2)));
  }
LABEL_175:
  int v63 = v29;
  v156[0] = *v90;
  v156[1] = *v91;
  v156[2] = v116;
  v156[3] = v120;
  v155[0] = *v108;
  v155[1] = v116;
  v155[2] = *v109;
  v155[3] = v123;
  uint64_t v126 = *(void *)(v11 + 944);
  unsigned int v127 = 4;
LABEL_176:
  uint64_t result = sub_1BBA9C35C(v126, (uint64_t)v157, (uint64_t)v156, (uint64_t)v155, v127);
  if (!*(unsigned char *)(v11 + 8)) {
    uint64_t result = sub_1BBA99BA0(*(unint64_t **)(v11 + 944), *v86, v86[1]);
  }
LABEL_178:
  if (!*(unsigned char *)(*(void *)(v11 + 1880) + 250) && !*(unsigned char *)(v11 + 802))
  {
    sub_1BBAB48E0(v11 + 1920, v11, a2, a3, v8, *(unsigned __int8 *)(v148 + 10), ((unsigned __int16)*v150 >> 4) & 7);
    int v134 = *(unsigned __int8 *)(*(void *)(v11 + 4304) + 2009) - *(_DWORD *)(v11 + 4352);
    int v135 = *(unsigned char *)(v11 + 4336) ? 1 : 3;
    *(_DWORD *)(v11 + 4340) = v135;
    int v136 = *(unsigned char *)(*(void *)(v11 + 4320) + 801)
         ? 0
         : sub_1BBAB4C70(v11 + 1920, *(unsigned int *)(v11 + 4344), *(unsigned int *)(v11 + 4348), v134, 0, 0);
    if (*(unsigned char *)(v148 + 10) == 1
      || (*(unsigned char *)(v148 + 11) & 1) != 0 && !*(_DWORD *)(v11 + 3976)
      || (uint64_t result = sub_1BBA1CA34(*(unint64_t **)(*(void *)(v11 + 4320) + 944), v136, (unsigned char *)(*(void *)(*(void *)(v11 + 4320) + 944) + 70)), v136))
    {
      *(_DWORD *)(v11 + 3988) = *a6;
      *(unsigned char *)(v11 + 3984) = *a7;
      uint64_t result = sub_1BBAB500C(v11 + 1920, *(unsigned int *)(v11 + 4344), *(unsigned int *)(v11 + 4348), v134, 0, 0);
      *a6 = *(_DWORD *)(v11 + 3988);
      *a7 = *(unsigned char *)(v11 + 3984);
    }
  }
LABEL_191:
  uint64_t v137 = *(void *)(v11 + 1888);
  if (*(unsigned char *)(v137 + 12) && v63 >= *(_DWORD *)(v137 + 1620) && *a7)
  {
    *a7 = 0;
    long long v138 = *(unsigned __int8 **)(v11 + 848);
    int v139 = v14;
    int v140 = *(unsigned __int8 *)(v11 + 800);
    int v141 = sub_1BBA9783C(v11, a2, a3, v8, v138, *a6, v140);
    int v142 = v140;
    int v14 = v139;
    uint64_t result = (unint64_t *)sub_1BBA97994(v11, a2, a3, v8, v138, v141, v142);
    *a6 = v141;
  }
  int v143 = *(unsigned __int8 *)(*(void *)(v11 + 1880) + 2013) - 1;
  BOOL v144 = (v143 & v149) != 0 && v149 < *(_DWORD *)(v11 + 16);
  BOOL v145 = (v143 & (v14 + a3)) != 0 && v14 + a3 < *(_DWORD *)(v11 + 20);
  if (!v144 && !v145 && *(_DWORD *)(v11 + 4416) != *(_DWORD *)(*(void *)(v11 + 1872) + 79308))
  {
    v146 = *(unint64_t **)(v11 + 944);
    return sub_1BBA1CBA4(v146, 0);
  }
  return result;
}

unint64_t *sub_1BBA9BE90(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  if (((a3 | a2) & 0x80000000) == 0
    && ((int v12 = a2 - *(_DWORD *)(a1 + 808),
         int v13 = a3 - *(_DWORD *)(a1 + 812),
         int v14 = *(unsigned __int8 *)(a1 + 804),
         v12 < v14)
      ? (BOOL v15 = v13 < v14)
      : (BOOL v15 = 0),
        v15))
  {
    uint64_t v16 = *(void *)(a1 + 864) + 16 * (*(void *)(a1 + 840) * ((uint64_t)v13 >> 2) + (v12 >> 2));
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t result = sub_1BBA1CA34(*(unint64_t **)(a1 + 944), *(unsigned char *)(v16 + 11) & 1, (unsigned char *)(*(void *)(a1 + 944) + 58));
  unsigned int v18 = *(unsigned __int8 *)(v16 + 11);
  if ((v18 & 1) == 0)
  {
    if (*(unsigned char *)(*(void *)(a1 + 1872) + 10))
    {
      char v19 = 1;
    }
    else
    {
      if (a5 + a4 != 12)
      {
        sub_1BBA1CA34(*(unint64_t **)(a1 + 944), (v18 >> 6) & 1, (unsigned char *)(*(void *)(a1 + 944) + a6 + 60));
        LOBYTE(v18) = *(unsigned char *)(v16 + 11);
      }
      if ((v18 & 0x40) != 0)
      {
        char v19 = 0;
      }
      else
      {
        int v27 = *(unsigned __int8 *)(v16 + 8);
        sub_1BBA1CA34(*(unint64_t **)(a1 + 944), v27 == 255, (unsigned char *)(*(void *)(a1 + 944) + 64));
        char v19 = 1;
        char v28 = 1;
        if (v27 == 255)
        {
LABEL_29:
          int v32 = *(_DWORD *)(v16 + 4);
          sub_1BBA8EE84(a1, a2, a3, 1u, *(char *)(v16 + 9), a4, a5, v36);
          unsigned int v33 = &v36[((unint64_t)*(unsigned __int8 *)(v16 + 11) >> 5) & 1];
          __int16 v34 = *(_WORD *)v33;
          __int16 v35 = *((_WORD *)v33 + 1);
          sub_1BBA9C164((unint64_t *)a1, *(char *)(v16 + 9), *(char *)(*(void *)(a1 + 1872) + 501));
          if ((v28 & 1) != 0 || !*(unsigned char *)(*(void *)(a1 + 1872) + 536)) {
            sub_1BBA9C214(*(void *)(a1 + 944), (unsigned __int16)(v32 - v34) | ((unsigned __int16)(HIWORD(v32) - v35) << 16));
          }
          return sub_1BBA1CA34(*(unint64_t **)(a1 + 944), (*(unsigned __int8 *)(v16 + 11) >> 5) & 1, (unsigned char *)(*(void *)(a1 + 944) + 69));
        }
      }
    }
    int v29 = *(_DWORD *)v16;
    sub_1BBA8EE84(a1, a2, a3, 0, *(char *)(v16 + 8), a4, a5, v36);
    uint64_t v30 = &v36[((unint64_t)*(unsigned __int8 *)(v16 + 11) >> 4) & 1];
    int v31 = (unsigned __int16)(v29 - *(_WORD *)v30) | ((unsigned __int16)(HIWORD(v29) - *((_WORD *)v30 + 1)) << 16);
    sub_1BBA9C164((unint64_t *)a1, *(char *)(v16 + 8), *(char *)(*(void *)(a1 + 1872) + 500));
    sub_1BBA9C214(*(void *)(a1 + 944), v31);
    uint64_t result = sub_1BBA1CA34(*(unint64_t **)(a1 + 944), (*(unsigned __int8 *)(v16 + 11) >> 4) & 1, (unsigned char *)(*(void *)(a1 + 944) + 69));
    char v28 = 0;
    if (v19) {
      return result;
    }
    goto LABEL_29;
  }
  unsigned int v20 = *(unsigned __int8 *)(*(void *)(a1 + 1872) + 620);
  unsigned int v21 = v20 - 2;
  if (v20 >= 2)
  {
    uint64_t v22 = *(void *)(a1 + 944);
    int v23 = (v18 >> 1) & 7;
    uint64_t result = sub_1BBA1CA34((unint64_t *)v22, v23 != 0, (unsigned char *)(v22 + 59));
    if (v23)
    {
      unsigned int v24 = v23 - 1;
      if ((int)v21 >= v23 - 1) {
        int v25 = v23 - 1;
      }
      else {
        int v25 = v21;
      }
      if (v24 >= v21) {
        int v26 = v25;
      }
      else {
        int v26 = v25 + 1;
      }
      return sub_1BBA1CC5C((unint64_t *)v22, ~(v24 < v21), v26);
    }
  }
  return result;
}

unint64_t *sub_1BBA9C164(unint64_t *result, signed int a2, int a3)
{
  if (a3 >= 2)
  {
    unsigned int v4 = a2;
    int v5 = result;
    uint64_t result = sub_1BBA1CA34((unint64_t *)result[118], a2 > 0, (unsigned char *)(result[118] + 65));
    if ((int)v4 >= 1)
    {
      unsigned int v6 = a3 - 2;
      if (a3 != 2)
      {
        uint64_t result = sub_1BBA1CA34((unint64_t *)v5[118], v4 > 1, (unsigned char *)(v5[118] + 66));
        if (v4 >= 2 && a3 >= 4)
        {
          do
          {
            uint64_t result = sub_1BBA1CB10((unint64_t *)v5[118], v4 > 2);
            if (v4 < 3) {
              break;
            }
            --v4;
          }
          while (v6-- > 2);
        }
      }
    }
  }
  return result;
}

unint64_t *sub_1BBA9C214(uint64_t a1, int a2)
{
  if ((a2 & 0x8000u) == 0) {
    int v4 = (__int16)a2;
  }
  else {
    int v4 = -(__int16)a2;
  }
  if (a2 >> 16 >= 0) {
    int v5 = a2 >> 16;
  }
  else {
    int v5 = -(a2 >> 16);
  }
  int v6 = v4 << 16;
  int v7 = v5 << 16;
  int v8 = (unsigned char *)(a1 + 67);
  sub_1BBA1CA34((unint64_t *)a1, v4 << 16 > 0, (unsigned char *)(a1 + 67));
  uint64_t result = sub_1BBA1CA34((unint64_t *)a1, v5 << 16 > 0, v8);
  if (v4 << 16 >= 1) {
    uint64_t result = sub_1BBA1CA34((unint64_t *)a1, v6 > 0x10000, (unsigned char *)(a1 + 68));
  }
  if (v7 >= 1) {
    uint64_t result = sub_1BBA1CA34((unint64_t *)a1, v7 > 0x10000, (unsigned char *)(a1 + 68));
  }
  if (v6 >= 1)
  {
    if (v6 > 0x10000) {
      sub_1BBA1CD88((unint64_t *)a1, (__int16)v4 - 2, 1);
    }
    uint64_t result = sub_1BBA1CB10((unint64_t *)a1, (unsigned __int16)a2 >> 15);
  }
  if (v7 >= 1)
  {
    if (v7 > 0x10000) {
      sub_1BBA1CD88((unint64_t *)a1, (__int16)v5 - 2, 1);
    }
    return sub_1BBA1CB10((unint64_t *)a1, a2 >> 31);
  }
  return result;
}

unint64_t *sub_1BBA9C35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v21 = 0;
  uint64_t v9 = a5;
  do
  {
    unsigned int v10 = *(unsigned __int8 *)(a4 + v6);
    int v11 = *(unsigned __int8 *)(a3 + v6);
    if (v10 == v11)
    {
      if (v10 < 2)
      {
        unsigned int v10 = 0;
        unint64_t v22 = 0x100000000;
        int v11 = 1;
        int v12 = 26;
      }
      else
      {
        int v11 = (((_BYTE)v10 + 29) & 0x1F) + 2;
        LODWORD(v22) = *(unsigned __int8 *)(a4 + v6);
        HIDWORD(v22) = v11;
        int v12 = (((_BYTE)v10 - 1) & 0x1F) + 2;
      }
    }
    else
    {
      LODWORD(v22) = *(unsigned __int8 *)(a4 + v6);
      HIDWORD(v22) = v11;
      if (v11 + v10 > 1) {
        int v13 = 1;
      }
      else {
        int v13 = 26;
      }
      if (v10) {
        BOOL v14 = v11 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14) {
        int v12 = v13;
      }
      else {
        int v12 = 0;
      }
    }
    uint64_t v15 = 0;
    int v23 = v12;
    int v16 = *(unsigned __int8 *)(a2 + v6);
    do
    {
      if (*((_DWORD *)&v22 + v15) == v16)
      {
        if (v15) {
          int v8 = v15 + 4 * v8 + 1;
        }
        else {
          v8 *= 2;
        }
        if (v15) {
          v7 += 2;
        }
        else {
          ++v7;
        }
        *((unsigned char *)&v21 + v6) = 1;
        goto LABEL_37;
      }
      ++v15;
    }
    while (v15 != 3);
    if (!*((unsigned char *)&v21 + v6))
    {
      if ((int)v10 <= v11)
      {
        int v17 = v11;
        int v11 = v10;
      }
      else
      {
        unint64_t v22 = __PAIR64__(v10, v11);
        int v17 = v10;
      }
      if (v11 <= v12)
      {
        int v11 = v12;
      }
      else
      {
        LODWORD(v22) = v12;
        int v23 = v11;
      }
      if (v17 > v11)
      {
        HIDWORD(v22) = v11;
        int v23 = v17;
      }
      for (uint64_t i = 8; i != -4; i -= 4)
        v16 -= v16 > *(_DWORD *)((char *)&v22 + i);
      int v8 = v16 + 32 * v8;
      v7 += 5;
    }
LABEL_37:
    ++v6;
  }
  while (v6 != a5);
  uint64_t v19 = 0;
  do
    sub_1BBA1CA34((unint64_t *)a1, *((unsigned __int8 *)&v21 + v19++), (unsigned char *)(a1 + 56));
  while (v9 != v19);

  return sub_1BBA1CC5C((unint64_t *)a1, v8, v7);
}

uint64_t sub_1BBA9C560(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, unsigned int a7)
{
  int v8 = a6;
  uint64_t v9 = a5;
  int v10 = a4;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v13 = result;
  int v14 = *(unsigned __int8 *)(*(void *)(result + 1880) + 2009);
  uint64_t v15 = a4;
  int v16 = (int *)(result + 4 * a4 + 8088);
  int v17 = *v16;
  if ((*v16 & 0x101) != 0)
  {
    int v108 = *(unsigned __int8 *)(*(void *)(result + 1880) + 2009);
    LOBYTE(v18) = 1;
    uint64_t result = sub_1BBAA0564(result, a2, a3, a4, a5, a6, 0, a7, 1u);
    uint64_t v24 = *(void *)(v13 + 952);
    if (*(unsigned char *)(v24 + 257) && *(unsigned char *)(v24 + 260)) {
      int v18 = (*((unsigned __int8 *)(*a6)[12]
    }
             + 16 * ((a2 - *((_DWORD *)*a6 + 1)) >> 2)
             + 16 * ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * ((a3 - *((_DWORD *)*a6 + 2)) >> 2)
             + 11) >> 6) & 1;
    *(unsigned char *)(v13 + v15 + 193) = v18;
    int v17 = *v16;
    uint64_t v9 = a5;
    int v8 = a6;
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    int v10 = a4;
    int v14 = v108;
  }
  if ((v17 & 2) == 0)
  {
    if ((v17 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_14:
    if (*(unsigned char *)(v13 + 189)) {
      unsigned __int8 v26 = *(unsigned char *)(v13 + v15 + 8122) != 0;
    }
    else {
      unsigned __int8 v26 = 1;
    }
    uint64_t result = sub_1BBAA0564(v13, v12, v11, v10, v9, v8, 2, a7, v26);
    if ((*v16 & 8) == 0) {
      goto LABEL_24;
    }
LABEL_18:
    if (v14 - v10 >= 4 && v14 - v10 == *(unsigned __int8 *)(*(void *)(v13 + 1880) + 2008))
    {
      if (*(unsigned char *)(v13 + 189)) {
        unsigned __int8 v27 = *(unsigned char *)(v13 + v15 + 8122) != 0;
      }
      else {
        unsigned __int8 v27 = 1;
      }
      uint64_t result = sub_1BBAA0564(v13, v12, v11, v10, v9, v8, 3, a7, v27);
    }
    goto LABEL_24;
  }
  if (*(unsigned char *)(v13 + 189)) {
    unsigned __int8 v25 = *(unsigned char *)(v13 + v15 + 8122) != 0;
  }
  else {
    unsigned __int8 v25 = 1;
  }
  uint64_t result = sub_1BBAA0564(v13, v12, v11, v10, v9, v8, 1, a7, v25);
  int v17 = *v16;
  if ((*v16 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_8:
  if ((v17 & 8) != 0) {
    goto LABEL_18;
  }
LABEL_24:
  if (!*(unsigned char *)(v13 + 189)) {
    return result;
  }
  if (*(unsigned char *)(v13 + v15 + 8122)) {
    return result;
  }
  char v28 = *v8;
  int v29 = (*v8)[11];
  unint64_t v30 = ((v12 - *((_DWORD *)*v8 + 1)) >> 3)
      + ((unint64_t)*(unsigned __int8 *)*v8 >> 3) * ((v11 - *((_DWORD *)*v8 + 2)) >> 3);
  if ((v29[v30] & 0x70) == 0) {
    return result;
  }
  int v31 = (unsigned char *)(v13 + v15 + 8104);
  if (*v31) {
    return result;
  }
  int v32 = 0;
  *((_DWORD *)v28 + 46) = 0;
  *(_OWORD *)(v28 + 21) = xmmword_1BBB6F8F0;
  *((_WORD *)v28 + 94) = 2;
  int v33 = ((unsigned __int16)v29[v30] >> 4) & 7;
  int v105 = 1 << (*(unsigned char *)(*(void *)(v13 + 1880) + 2009) - v10);
  uint64_t v34 = (v105 >> 1);
  __int16 v35 = *v9;
  unsigned int v36 = v12 - *((_DWORD *)*v9 + 1);
  unint64_t v37 = **v9;
  if ((v36 & 0x80000000) != 0) {
    goto LABEL_34;
  }
  unsigned int v38 = v11 - *((_DWORD *)v35 + 2);
  unint64_t v39 = 0;
  if ((v38 & 0x80000000) != 0) {
    goto LABEL_35;
  }
  int v32 = 0;
  if (v36 >= v37)
  {
LABEL_34:
    unint64_t v39 = 0;
  }
  else
  {
    unint64_t v39 = 0;
    if (v38 < v37)
    {
      int v32 = (unsigned __int16 *)(*((void *)v35 + 11)
                               + 2 * ((v36 >> 3) + (v37 >> 3) * (unint64_t)(v38 >> 3)));
      unint64_t v39 = *((void *)v35 + 12) + 16 * ((v36 >> 2) + (v37 >> 2) * (unint64_t)(v38 >> 2));
    }
  }
LABEL_35:
  unint64_t v100 = v39;
  int v101 = v32;
  int v104 = v31;
  int v107 = v8;
  int v40 = v33;
  sub_1BBA8E12C(v13, v32, v10, v33, 0, v37 >> 3, *((_DWORD *)v35 + 3));
  *(_OWORD *)(v35 + 168) = xmmword_1BBB6F8F0;
  *((_DWORD *)v35 + 46) = 0;
  *((_WORD *)v35 + 94) = 2;
  unsigned int v41 = v34 + v12;
  unsigned int v42 = v34 + v11;
  unsigned int v103 = a7;
  unsigned int v106 = v11;
  if (v40 == 3)
  {
    unsigned int v99 = v34 + v11;
    sub_1BBAA0F18(v13, v12, v11, v10, v9, v107, v34, v34, 3, a7, (uint64_t)(v35 + 168), 1, 0);
    uint64_t v12 = v12;
    sub_1BBAA0F18(v13, v34 + v12, v11, v10, v9, v107, v34, v34, 3, a7, (uint64_t)(v35 + 168), 1, 0);
    sub_1BBAA0F18(v13, v12, (v34 + v11), v10, v9, v107, v34, v34, 3, a7, (uint64_t)(v35 + 168), 1, 0);
    uint64_t v96 = (uint64_t)(v35 + 168);
    LODWORD(v94) = 3;
    HIDWORD(v94) = a7;
    unsigned int v45 = v107;
    BOOL v44 = v9;
    uint64_t v47 = v13;
    unsigned int v48 = v34 + v12;
    uint64_t v49 = v99;
    int v50 = v10;
    int v51 = v9;
    BOOL v46 = v107;
    uint64_t v52 = (v105 >> 1);
    goto LABEL_40;
  }
  int v43 = v40;
  if (v40 == 2)
  {
    unsigned int v102 = v12;
    unsigned int v54 = a7;
    unsigned int v95 = a7;
    unsigned int v97 = v41;
    unsigned int v45 = v107;
    sub_1BBAA0F18(v13, v102, v11, v10, v9, v107, v34, v105, 2, v95, (uint64_t)(v35 + 168), 1, 0);
    uint64_t v96 = (uint64_t)(v35 + 168);
    HIDWORD(v94) = v54;
    uint64_t v12 = v102;
    LODWORD(v94) = 2;
    uint64_t v47 = v13;
    unsigned int v48 = v97;
    uint64_t v49 = v11;
    BOOL v44 = v9;
    int v50 = v10;
    int v51 = v9;
    BOOL v46 = v107;
    uint64_t v52 = (v105 >> 1);
    int v53 = v105;
    goto LABEL_42;
  }
  BOOL v44 = v9;
  unsigned int v45 = v107;
  if (v40 == 1)
  {
    unsigned int v98 = v42;
    sub_1BBAA0F18(v13, v12, v106, v10, v9, v107, v105, v34, 1, v103, (uint64_t)(v35 + 168), 1, 0);
    uint64_t v96 = (uint64_t)(v35 + 168);
    LODWORD(v94) = 1;
    HIDWORD(v94) = v103;
    BOOL v46 = v107;
    BOOL v44 = v9;
    uint64_t v47 = v13;
    unsigned int v48 = v12;
    uint64_t v49 = v98;
    int v50 = v10;
    int v51 = v9;
    uint64_t v52 = v105;
    unsigned int v45 = v107;
LABEL_40:
    int v53 = v105 >> 1;
LABEL_42:
    sub_1BBAA0F18(v47, v48, v49, v50, v51, v46, v52, v53, v94, HIDWORD(v94), v96, 1, 0);
    int v43 = v40;
  }
  uint64_t v55 = v12;
  if (*(unsigned char *)(v13 + 188))
  {
    unsigned int v56 = v106;
    if (v43)
    {
      *((_DWORD *)v35 + 52) = 0;
      *((_OWORD *)v35 + 12) = xmmword_1BBB6F8F0;
      *((_WORD *)v35 + 106) = 2;
      sub_1BBA97AF4(v13, v55, v106, v10, *v44, 1, *(unsigned char *)(v13 + 8) == 0, 0, (unsigned int *)v35 + 48);
      if (!*(unsigned char *)(v13 + 8127))
      {
        *((_DWORD *)v35 + 52) = 0;
        *((_OWORD *)v35 + 12) = xmmword_1BBB6F8F0;
        *((_WORD *)v35 + 106) = 2;
        sub_1BBA9CF24(v13, v55, v106, v10, *v44, (uint64_t)(v35 + 192));
      }
      int v111 = 0;
      long long v110 = xmmword_1BBB6F8F0;
      __int16 v112 = 0;
      *((_DWORD *)v35 + 52) = 0;
      *((_OWORD *)v35 + 12) = xmmword_1BBB6F8F0;
      *((_WORD *)v35 + 106) = 0;
      sub_1BBA9A7B0(v13, v55, v106, v10, *v44, (uint64_t)(v35 + 192), (uint64_t)&v110, 0, 0);
      uint64_t v57 = *(void *)(v13 + 944);
      long long v58 = *(_OWORD *)(v57 + 16);
      *(_OWORD *)(v57 + 216) = *(_OWORD *)v57;
      long long v59 = *(_OWORD *)(v57 + 32);
      long long v60 = *(_OWORD *)(v57 + 64);
      long long v61 = *(_OWORD *)(v57 + 80);
      *(_OWORD *)(v57 + 264) = *(_OWORD *)(v57 + 48);
      *(_OWORD *)(v57 + 280) = v60;
      *(_OWORD *)(v57 + 248) = v59;
      *(_OWORD *)(v57 + 232) = v58;
      long long v62 = *(_OWORD *)(v57 + 96);
      long long v63 = *(_OWORD *)(v57 + 128);
      long long v64 = *(_OWORD *)(v57 + 144);
      *(_OWORD *)(v57 + 328) = *(_OWORD *)(v57 + 112);
      *(_OWORD *)(v57 + 344) = v63;
      *(_OWORD *)(v57 + 296) = v61;
      *(_OWORD *)(v57 + 312) = v62;
      long long v65 = *(_OWORD *)(v57 + 176);
      *(_OWORD *)(v57 + 376) = *(_OWORD *)(v57 + 160);
      *(_OWORD *)(v57 + 392) = v65;
      char v109 = 0;
      *(void *)(v57 + 408) = *(void *)(v57 + 192);
      *(_OWORD *)(v57 + 360) = v64;
      uint64_t v66 = 8 * (*(_DWORD *)(v57 + 208) - *(_DWORD *)(v57 + 24));
      *(void *)(v57 + 32) = 0;
      *(void *)(v57 + 8) = 510;
      *(void *)(v57 + 16) = v66;
      sub_1BBA9595C(v13, v55, v106, *v44, 1, 0, *(unsigned char *)(v13 + 8127), 1, 0);
      unsigned int v67 = *v44;
      *((_DWORD *)v67 + 4) = *((_DWORD *)*v44 + 5);
      sub_1BBA9AF40((unint64_t *)v13, v55, v106, v10, v103, (int *)v67 + 4, &v109);
      uint64_t v68 = *(void *)(v13 + 944);
      *((_DWORD *)v35 + 52) = *((_DWORD *)v35 + 52)
                            - *(_DWORD *)(v68 + 8)
                            + ((*(_DWORD *)(v68 + 16) + 8 * (*(_DWORD *)(v68 + 24) - *(_DWORD *)(v68 + 208))) << 8)
                            + 510;
      long long v70 = *(_OWORD *)(v68 + 264);
      long long v69 = *(_OWORD *)(v68 + 280);
      *(_OWORD *)(v68 + 32) = *(_OWORD *)(v68 + 248);
      *(_OWORD *)(v68 + 48) = v70;
      long long v72 = *(_OWORD *)(v68 + 328);
      long long v71 = *(_OWORD *)(v68 + 344);
      long long v73 = *(_OWORD *)(v68 + 296);
      *(_OWORD *)(v68 + 96) = *(_OWORD *)(v68 + 312);
      *(_OWORD *)(v68 + 112) = v72;
      *(_OWORD *)(v68 + 64) = v69;
      *(_OWORD *)(v68 + 80) = v73;
      long long v74 = *(_OWORD *)(v68 + 392);
      long long v75 = *(_OWORD *)(v68 + 360);
      *(_OWORD *)(v68 + 160) = *(_OWORD *)(v68 + 376);
      *(_OWORD *)(v68 + 176) = v74;
      long long v76 = *(_OWORD *)(v68 + 232);
      *(void *)(v68 + 192) = *(void *)(v68 + 408);
      *(_OWORD *)(v68 + 128) = v71;
      *(_OWORD *)(v68 + 144) = v75;
      *(_OWORD *)uint64_t v68 = *(_OWORD *)(v68 + 216);
      *(_OWORD *)(v68 + 16) = v76;
      *((void *)v35 + 25) = *((void *)v35 + 24)
                            + ((*((_DWORD *)v35 + 52)
                              * *(unsigned __int16 *)(v13 + 2 * *((__int16 *)v35 + 106) + 992)) >> (8 * (*((_WORD *)v35 + 106) == 0)));
      unsigned int v77 = *(unsigned __int8 *)(v13 + 188);
    }
    else
    {
      unsigned int v77 = 1;
    }
  }
  else
  {
    unsigned int v77 = 0;
    int v78 = *(unsigned __int8 *)(*(void *)(v13 + 1880) + 241);
    uint64_t v79 = *(unsigned __int8 *)(v100 + 10) - 1;
    BOOL v80 = v78 <= v10;
    int v81 = *((_DWORD *)v35 + 46) + byte_1BBB7B49C[3 * *(unsigned __int8 *)(*(void *)(v13 + 1872) + 10) + v79];
    *((_DWORD *)v35 + 46) = v81;
    int v82 = byte_1BBB7B4A5[12 * (v78 == v10) + 4 * v79 + (((unint64_t)*v101 >> 4) & 7)];
    if (v80) {
      int v83 = v81;
    }
    else {
      int v83 = v81 + 1;
    }
    int v84 = v83 + v82;
    *((_DWORD *)v35 + 46) = v84;
    *((void *)v35 + 22) = *((void *)v35 + 21)
                          + ((v84 * *(unsigned __int16 *)(v13 + 2 * *((__int16 *)v35 + 94) + 992)) >> (8 * (*((_WORD *)v35 + 94) == 0)));
    unsigned int v56 = v106;
  }
  uint64_t result = sub_1BBAA01B8(v13, (void ***)v44, v45, v77);
  if (result && !*(unsigned char *)(v13 + 188))
  {
    int v85 = 0;
    uint64_t v86 = *v45;
    unsigned int v87 = v55 - *((_DWORD *)*v45 + 1);
    unint64_t v88 = *(unsigned __int8 *)*v45;
    if ((v87 & 0x80000000) == 0)
    {
      unsigned int v89 = v56 - *((_DWORD *)v86 + 2);
      if ((v89 & 0x80000000) == 0)
      {
        int v85 = 0;
        if (v87 < v88 && v89 < v88) {
          int v85 = (char *)v86[11] + 2 * (v87 >> 3) + 2 * (v88 >> 3) * (unint64_t)(v89 >> 3);
        }
      }
    }
    if (v105 >= 8)
    {
      uint64_t v90 = 0;
      uint64_t v91 = v85;
      do
      {
        int v92 = v91;
        uint64_t v93 = v105 >> 3;
        do
        {
          *v92++ = *v85;
          --v93;
        }
        while (v93);
        ++v90;
        v91 += v88 >> 3;
      }
      while (v90 != v105 >> 3);
    }
  }
  unsigned char *v104 = 1;
  return result;
}

uint64_t sub_1BBA9CF24(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v10 = result;
  unsigned int v11 = a2 - *((_DWORD *)a5 + 1);
  unsigned int v12 = a3 - *((_DWORD *)a5 + 2);
  unint64_t v13 = *a5;
  if (v11 >= v13 || v12 >= v13) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = (_WORD *)(*((void *)a5 + 11) + 2 * ((v11 >> 3) + (v13 >> 3) * (unint64_t)(v12 >> 3)));
  }
  int v16 = *(unsigned __int8 *)(*(void *)(result + 1880) + 2009) - a4;
  int v17 = *(unsigned __int8 *)(*((void *)a5 + 12)
                           + 16 * ((v11 >> 2) + (v13 >> 2) * (unint64_t)(v12 >> 2))
                           + 10);
  if (v17 == 2)
  {
    *(void *)(a6 + 8) = *(void *)a6
                        + ((*(_DWORD *)(a6 + 16)
                          * *(unsigned __int16 *)(result + 2 * *(__int16 *)(a6 + 20) + 992)) >> (8 * (*(_WORD *)(a6 + 20) == 0)));
    if ((*v15 & 0x80) == 0)
    {
      *v15 |= 0x80u;
      if (1 << v16 >= 8)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 2 * ((unint64_t)*a5 >> 3);
        unsigned int v20 = v15;
        do
        {
          int v21 = v20;
          uint64_t v22 = (1 << v16) >> 3;
          do
          {
            *v21++ = *v15;
            --v22;
          }
          while (v22);
          ++v18;
          unsigned int v20 = (_WORD *)((char *)v20 + v19);
        }
        while (v18 != (1 << v16) >> 3);
      }
    }
  }
  else
  {
    sub_1BBAB48E0(result + 1920, result, a2, a3, a4, v17, ((unsigned __int16)*v15 >> 4) & 7);
    if (*(unsigned char *)(v10 + 8127) && *(char *)(*(void *)(v10 + 952) + 252) >= 2)
    {
      __int16 v23 = *(_WORD *)(a6 + 20);
      int v25 = 0;
      long long v24 = xmmword_1BBB6F8F0;
      __int16 v26 = v23;
      uint64_t result = sub_1BBABDEDC(v10 + 1920, a2, a3, a5, v16, 0, (uint64_t *)&v24, 0);
      *(void *)(a6 + 8) = *(void *)a6
                          + ((*(_DWORD *)(a6 + 16)
                            * *(unsigned __int16 *)(v10 + 2 * *(__int16 *)(a6 + 20) + 992)) >> (8 * (*(_WORD *)(a6 + 20) == 0)));
    }
    else
    {
      *(void *)a6 = 0;
      return sub_1BBABE604(v10 + 1920, a2, a3, a5, v16, 0, 0, a6, 0);
    }
  }
  return result;
}

BOOL sub_1BBA9D150(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v12 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2013) >> a4;
  if (((a6 & 0xF0) == 0 || (BOOL result = sub_1BBAA02A4(a1, a2, a3, a4, a2 - v12, a3, a5)))
    && ((a6 & 0x1E00) == 0 || (BOOL result = sub_1BBAA02A4(a1, a2, a3, a4, a2, a3 - v12, a5)))
    && ((a6 & 0x1E000) == 0 || (BOOL result = sub_1BBAA02A4(a1, a2, a3, a4, v12 + a2, a3 - v12, a5)))
    && ((a6 & 0x100) == 0 || (BOOL result = sub_1BBAA02A4(a1, a2, a3, a4, a2 - v12, a3 - v12, a5))))
  {
    if ((a6 & 0xF) == 0) {
      return 1;
    }
    BOOL result = sub_1BBAA02A4(a1, a2, a3, a4, a2 - v12, v12 + a3, a5);
    if (result) {
      return 1;
    }
  }
  return result;
}

void sub_1BBA9D284(uint64_t a1, int a2, unsigned __int8 *a3, int a4, unsigned __int8 **a5, void ***a6, unsigned int a7, unsigned int a8)
{
  uint64_t v9 = a3;
  int v10 = a2;
  unsigned int v11 = (unsigned __int8 *)a1;
  int v12 = 0;
  uint64_t v556 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = *a5;
  unsigned int v14 = a2 - *((_DWORD *)*a5 + 1);
  unint64_t v15 = **a5;
  if ((v14 & 0x80000000) == 0)
  {
    unsigned int v16 = a3 - *((_DWORD *)v13 + 2);
    if ((v16 & 0x80000000) == 0)
    {
      if (v14 >= v15 || v16 >= v15) {
        int v12 = 0;
      }
      else {
        int v12 = (_WORD *)(*((void *)v13 + 11)
      }
                      + 2 * ((v14 >> 3) + (v15 >> 3) * (unint64_t)(v16 >> 3)));
    }
  }
  sub_1BBA8E12C(a1, v12, a4, a8, 0, v15 >> 3, *((_DWORD *)v13 + 3));
  unint64_t v18 = 0;
  unint64_t v19 = *a5;
  unsigned int v20 = v10 - *((_DWORD *)*a5 + 1);
  if ((v20 & 0x80000000) == 0)
  {
    unsigned int v21 = v9 - *((_DWORD *)v19 + 2);
    if ((v21 & 0x80000000) == 0)
    {
      unint64_t v22 = *v19;
      if (v20 >= v22 || v21 >= v22) {
        unint64_t v18 = 0;
      }
      else {
        unint64_t v18 = *((void *)v19 + 12) + 16 * ((v20 >> 2) + (v22 >> 2) * (unint64_t)(v21 >> 2));
      }
    }
  }
  v466 = v11 + 4400;
  int v24 = 1;
  *(unsigned char *)(v18 + 10) = 1;
  *(unsigned char *)(v18 + 11) &= ~0x40u;
  unint64_t v25 = **a5;
  if (v25 >= 4)
  {
    uint64_t v26 = 0;
    unint64_t v27 = v25 >> 2;
    char v28 = (void *)v18;
    do
    {
      int v29 = v28;
      unint64_t v30 = v27;
      do
      {
        uint64_t v31 = *(void *)v18;
        *(void *)((char *)v29 + 6) = *(void *)(v18 + 6);
        void *v29 = v31;
        v29 += 2;
        --v30;
      }
      while (v30);
      ++v26;
      v28 += 2 * v27;
    }
    while (v26 != v27);
    int v24 = *(unsigned __int8 *)(v18 + 10);
  }
  sub_1BBAB48E0((uint64_t)(v11 + 1920), (uint64_t)v11, v10, (int)v9, a4, v24, ((unsigned __int16)*v12 >> 4) & 7);
  if (v11[190]) {
    int v32 = (*(_DWORD *)&v11[4 * a4 + 8088] >> 12) & 1;
  }
  else {
    LOBYTE(v32) = 0;
  }
  uint64_t v33 = 0;
  unsigned char *v466 = v32;
  uint64_t v34 = *a5;
  __int16 v35 = *a5;
  *(_OWORD *)(v35 + 168) = xmmword_1BBB6F8F0;
  v456 = v35 + 168;
  *((_WORD *)v34 + 94) = 2;
  *((_OWORD *)v34 + 12) = xmmword_1BBB6F8F0;
  *((_WORD *)v34 + 106) = 0;
  uint64_t v36 = *((void *)v11 + 235);
  LODWORD(v35) = byte_1BBB7B4A5[12 * (*(unsigned __int8 *)(v36 + 241) == a4) + a8]
               + byte_1BBB7B49C[3 * *(unsigned __int8 *)(*((void *)v11 + 234) + 10)];
  *((_DWORD *)v34 + 46) = v35;
  *((_DWORD *)v34 + 52) = v35 << 8;
  unsigned int v37 = *(unsigned __int8 *)*a6;
  int v457 = *((_DWORD *)*a6 + 1);
  int v452 = *((_DWORD *)*a6 + 2);
  unint64_t v445 = (unint64_t)(*a6)[22];
  v446 = (char *)(*a6)[12];
  char v38 = 1;
  uint64_t v504 = *(unsigned __int8 *)(v36 + 2009) - a4 - (a8 == 3);
  int v459 = *(unsigned __int8 *)(*((void *)v11 + 119) + 570);
  v442 = &v11[8 * a4 + 4616];
  *((void *)v34 + 18) = *(void *)v442;
  long long v544 = 0u;
  long long v545 = 0u;
  long long v542 = 0u;
  long long v543 = 0u;
  int v541 = 0;
  unint64_t v540 = 0;
  *((void *)&v539 + 1) = -1;
  *(void *)&long long v539 = -1;
  uint64_t v538 = 0;
  uint64_t v537 = 0;
  uint64_t v536 = 0;
  *(_DWORD *)&v535[8] = 0;
  int v534 = v10;
  int v450 = (1 << v504) + v10;
  *(void *)v535 = v450;
  uint64_t v505 = (1 << v504);
  v533[0] = v9;
  int v449 = (1 << v504) + v9;
  v533[1] = v449;
  unint64_t v39 = (uint64_t *)(v34 + 128);
  int v40 = v11 + 4440;
  int v41 = *((_DWORD *)v11 + 1108);
  do
  {
    int v42 = v533[v33];
    BOOL v43 = v42 < (int)v9;
    int v44 = (v42 - (int)v9) >> 2;
    if (v43) {
      int v44 = -1;
    }
    if (v43) {
      unsigned int v45 = (uint64_t *)(v34 + 128);
    }
    else {
      unsigned int v45 = (uint64_t *)(v34 + 120);
    }
    uint64_t v46 = *v45;
    uint64_t v47 = v46 + 16 * v44;
    *(&v537 + v33) = v47;
    if (!v46 || *(unsigned char *)(v47 + 10) != 1) {
      *(&v537 + v33) = (uint64_t)v40;
    }
    if (v41 == v9)
    {
      unsigned int v48 = (uint64_t *)&v535[8 * v33 + 4];
LABEL_43:
      *unsigned int v48 = (uint64_t)v40;
      goto LABEL_44;
    }
    int v49 = *(_DWORD *)&v535[4 * v33 - 4];
    BOOL v43 = v49 < v10;
    int v50 = (v49 - v10) >> 2;
    if (v43) {
      int v50 = -1;
    }
    uint64_t v51 = *v39;
    uint64_t v52 = *v39 + 16 * v50;
    unsigned int v48 = (uint64_t *)&v535[8 * v33 + 4];
    *unsigned int v48 = v52;
    if (!v51 || *(unsigned char *)(v52 + 10) != 1) {
      goto LABEL_43;
    }
LABEL_44:
    char v53 = (a8 == 3) & v38;
    uint64_t v33 = 1;
    char v38 = 0;
  }
  while ((v53 & 1) != 0);
  *(void *)&long long v542 = v537;
  *((void *)&v542 + 1) = *(void *)&v535[4];
  uint64_t v478 = (uint64_t)(v11 + 1920);
  v507 = v34;
  unsigned int v451 = v37;
  if (a8 == 3)
  {
    unint64_t v54 = 0;
    int v55 = *((_DWORD *)v34 + 1);
    int v56 = *((_DWORD *)v34 + 2);
    unsigned int v57 = v10 - v55;
    unsigned int v58 = v9 - v56;
    if (((v10 - v55) & 0x80000000) == 0 && (v58 & 0x80000000) == 0)
    {
      unint64_t v54 = 0;
      unint64_t v59 = *v34;
      if (v57 < v59 && v58 < v59) {
        unint64_t v54 = *((void *)v34 + 12) + 16 * ((v57 >> 2) + (v59 >> 2) * (unint64_t)(v58 >> 2));
      }
    }
    unint64_t v60 = 0;
    *(void *)&long long v543 = v54;
    *((void *)&v543 + 1) = v536;
    *(void *)&long long v544 = v538;
    *((void *)&v544 + 1) = v54;
    if ((v57 & 0x80000000) == 0)
    {
      unsigned int v61 = v449 - v56;
      if ((v61 & 0x80000000) == 0)
      {
        unint64_t v60 = 0;
        unint64_t v62 = *v34;
        if (v57 < v62 && v61 < v62) {
          unint64_t v60 = *((void *)v34 + 12) + 16 * ((v57 >> 2) + (v62 >> 2) * (unint64_t)(v61 >> 2));
        }
      }
    }
    unint64_t v63 = 0;
    *(void *)&long long v545 = v60;
    int v64 = v450 - v55;
    if (v64 >= 0 && (v58 & 0x80000000) == 0)
    {
      unint64_t v63 = 0;
      unint64_t v65 = *v34;
      if (v64 < v65 && v58 < v65) {
        unint64_t v63 = *((void *)v34 + 12)
      }
            + 16 * ((v64 >> 2) + (v65 >> 2) * (unint64_t)(v58 >> 2));
    }
    *((void *)&v545 + 1) = v63;
    uint64_t v66 = 4;
  }
  else
  {
    uint64_t v66 = 1;
  }
  uint64_t v455 = v66;
  int v458 = (*(uint64_t (**)(void))(**(void **)(*((void *)v11 + 234) + 1400) + 16))(*(void *)(*((void *)v11 + 234) + 1400));
  uint64_t v67 = 0;
  char v463 = 0;
  uint64_t v476 = (int)v504 - 2;
  uint64_t v464 = (v504 - 3);
  unsigned int v469 = v504 == 2;
  if (v504 == 2) {
    uint64_t v68 = 2;
  }
  else {
    uint64_t v68 = 8;
  }
  uint64_t v472 = v68;
  unsigned int v447 = v68 >> 1;
  LODWORD(v68) = (int)v505 >> 2;
  uint64_t v473 = (uint64_t)(int)v505 >> 2;
  if ((int)v505 >> 2 <= 1) {
    uint64_t v68 = 1;
  }
  else {
    uint64_t v68 = v68;
  }
  uint64_t v506 = v68;
  v444 = v11 + 1922;
  v454 = (int *)(v11 + 4344);
  v453 = (int *)(v11 + 4348);
  v512 = v11;
  unsigned int v461 = v10;
  v460 = v9;
  long long v69 = v507;
  v462 = a5;
  do
  {
    if (v459)
    {
      unsigned int v70 = **((unsigned __int8 **)&v542 + 2 * v67);
      unsigned int v71 = **(unsigned __int8 **)((char *)&v542 + ((16 * v67) | 8));
      long long v539 = xmmword_1BBB6F9C0;
      if (v70) {
        unsigned int v72 = 0;
      }
      else {
        unsigned int v72 = v70;
      }
      if (v70 > 1 && a8 == 3) {
        unsigned int v73 = v72;
      }
      else {
        unsigned int v73 = v70;
      }
      if (v71) {
        unsigned int v74 = 0;
      }
      else {
        unsigned int v74 = v71;
      }
      if (v71 > 1 && a8 == 3) {
        unsigned int v75 = v74;
      }
      else {
        unsigned int v75 = v71;
      }
      if (v73 < 2)
      {
        uint64_t v76 = 2;
      }
      else
      {
        DWORD2(v539) = v73;
        uint64_t v76 = 3;
      }
      if (v75 >= 2 && v73 != v75) {
        *(_DWORD *)((unint64_t)&v539 | (4 * v76)) = v75;
      }
    }
    else
    {
      unsigned int v70 = **((unsigned __int8 **)&v542 + 2 * v67);
      unsigned int v71 = **(unsigned __int8 **)((char *)&v542 + ((16 * v67) | 8));
    }
    if (v70 == v71)
    {
      if (v71 < 2)
      {
        unint64_t v540 = 0x100000000;
        int v78 = 26;
      }
      else
      {
        LODWORD(v540) = v70;
        HIDWORD(v540) = (((_BYTE)v70 + 29) & 0x1F) + 2;
        int v78 = (((_BYTE)v70 - 1) & 0x1F) + 2;
      }
    }
    else
    {
      unint64_t v540 = __PAIR64__(v71, v70);
      if (v70) {
        BOOL v79 = v71 == 0;
      }
      else {
        BOOL v79 = 1;
      }
      if (v79)
      {
        if (v71 + v70 > 1) {
          int v78 = 1;
        }
        else {
          int v78 = 26;
        }
      }
      else
      {
        int v78 = 0;
      }
    }
    int v541 = v78;
    unsigned int v477 = a7;
    if (a8 == 3)
    {
      v466[298] = 0;
      unsigned int v80 = sub_1BBA8EDCC(a7, v67, v450 < *((_DWORD *)v11 + 4), v449 < *((_DWORD *)v11 + 5));
      long long v69 = v507;
      unsigned int v477 = v80;
    }
    if (v458)
    {
      uint64_t v81 = *((void *)v11 + 234);
      if (*(unsigned char *)(v81 + 10) != 1) {
        goto LABEL_116;
      }
      uint64_t v82 = *(void *)(v81 + 1400);
      uint64_t v83 = *((void *)v11 + 235);
      int v85 = *(_DWORD *)(v82 + 8);
      int v84 = *(_DWORD *)(v82 + 12);
      int v86 = *(_DWORD *)(v83 + 176);
      int v87 = *(_DWORD *)(v83 + 180);
      int v88 = *(unsigned __int8 *)(v83 + 2009) - a4;
      BOOL v89 = v85 < v86 && v84 < v87;
      if (!v89 || v88 < 4)
      {
LABEL_116:
        char v463 = 0;
      }
      else
      {
        long long v539 = xmmword_1BBB6F9C0;
        char v463 = 1;
      }
    }
    unsigned int v492 = ((v67 & 1) << v504) + v10;
    uint64_t v91 = v492 - *((_DWORD *)v69 + 1);
    uint64_t v486 = (v67 >> 1 << v504) + v9;
    unsigned int v92 = v486 - *((_DWORD *)v69 + 2);
    if ((v91 & 0x80000000) != 0
      || (v92 & 0x80000000) != 0
      || (unint64_t v93 = *v69, v91 >= v93)
      || v92 >= v93)
    {
      unsigned int v97 = 0;
      uint64_t v96 = 0;
      uint64_t v497 = 0;
      uint64_t v498 = v69[1];
      uint64_t v508 = **((unsigned __int8 **)v69 + 17);
    }
    else
    {
      uint64_t v95 = *((void *)v69 + 11);
      uint64_t v94 = *((void *)v69 + 12);
      uint64_t v508 = **((unsigned __int8 **)v69 + 17);
      uint64_t v498 = v69[1];
      uint64_t v497 = (*(uint64_t (**)(void, uint64_t))(**((void **)v69 + 3) + 24))(*((void *)v69 + 3), v91 + v498 * v92 + *((void *)v69 + 4));
      uint64_t v96 = (_WORD *)(v95 + 2 * ((v91 >> 3) + (v93 >> 3) * (unint64_t)(v92 >> 3)));
      unsigned int v97 = (void *)(v94 + 16 * ((v91 >> 2) + (v93 >> 2) * (unint64_t)(v92 >> 2)));
      long long v69 = v507;
      LODWORD(v91) = v492 - *((_DWORD *)v507 + 1);
      unsigned int v92 = v486 - *((_DWORD *)v507 + 2);
      unsigned int v11 = v512;
    }
    v470 = v96;
    uint64_t v467 = v67;
    uint64_t v510 = 0;
    if ((v91 & 0x80000000) == 0 && (v92 & 0x80000000) == 0)
    {
      uint64_t v510 = 0;
      unsigned int v98 = *v69;
      if (v91 < v98 && v92 < v98)
      {
        uint64_t v510 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v69 + 17) + 80) + 24))(*(void *)(*((void *)v69 + 17) + 80), *(void *)(*((void *)v69 + 17) + 88)+ v91+ **((unsigned __int8 **)v69 + 17) * (unint64_t)v92);
        unsigned int v11 = v512;
        long long v69 = v507;
      }
    }
    unsigned int v99 = (unsigned char *)*((void *)v11 + 539);
    if (v99[228] == 1) {
      uint64_t v100 = 4;
    }
    else {
      uint64_t v100 = 2;
    }
    uint64_t v496 = v100;
    if (*v466)
    {
      uint64_t v101 = *((void *)v11 + 538);
      BOOL v481 = *((_DWORD *)v11 + 992) == *(unsigned __int8 *)(v101 + 2008) && *((_DWORD *)v11 + 994) == 0;
    }
    else
    {
      BOOL v481 = 0;
      uint64_t v101 = *((void *)v11 + 538);
    }
    int v102 = v99[570];
    unsigned int v103 = (unsigned __int8 *)*((void *)v11 + 540);
    int v499 = *v103;
    int v483 = (char)v99[571];
    char v530 = -1;
    int v529 = -1;
    if (*(unsigned char *)(v101 + 245)) {
      BOOL v468 = *((_DWORD *)v103 + 1) > 2;
    }
    else {
      BOOL v468 = 0;
    }
    int v104 = v99[352];
    BOOL v105 = v504 != 2 || v104 == 0;
    int v106 = !v105;
    int v479 = v106;
    if (!v105)
    {
      LODWORD(v532) = 0;
      long long v531 = xmmword_1BBB6F8F0;
      WORD2(v532) = 0;
    }
    for (uint64_t i = 0; i != 120; i += 24)
    {
      int v108 = &v555[i];
      *((_DWORD *)v108 + 4) = 0;
      *(_OWORD *)int v108 = xmmword_1BBB6F8F0;
      *((_WORD *)v108 + 10) = 2;
    }
    int v547 = 0;
    long long v546 = xmmword_1BBB6F8F0;
    __int16 v548 = 2;
    int v550 = 0;
    long long v549 = xmmword_1BBB6F8F0;
    __int16 v551 = 2;
    int v553 = 0;
    long long v552 = xmmword_1BBB6F8F0;
    __int16 v554 = 2;
    v500 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)v11 + 541)
                                                                                          + 8 * v476
                                                                                          + 104);
    if (!v103[4698])
    {
      char v109 = (void (*)(unsigned __int8 *, void, uint64_t, void))*((void *)v103 + 1020);
      uint64_t v110 = *((void *)v103 + 1021);
      int v111 = &v103[v110 >> 1];
      if (v110) {
        char v109 = *(void (**)(unsigned __int8 *, void, uint64_t, void))(*(void *)v111 + v109);
      }
      v109(v111, v492, v486, *((unsigned int *)v11 + 1088));
      unsigned int v11 = v512;
      long long v69 = v507;
    }
    if (v464 <= 2)
    {
      (*(void (**)(void, void))(*((void *)v11 + 537) + 8 * v464 + 1440))(*((void *)v69 + 19), *((void *)v69 + 20));
      unsigned int v11 = v512;
      long long v69 = v507;
    }
    if (*(unsigned char *)(*((void *)v11 + 539) + 604))
    {
      __int16 v112 = *(void **)(*(void *)(*((void *)v11 + 537) + 79216) + 592);
      uint64_t v113 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v11 + 524);
      uint64_t v114 = v112[14];
      uint64_t v115 = (*(uint64_t (**)(void *, void, uint64_t, void, unsigned __int8 *))(*v112 + 16))(v112, v492, v486, 0, v69);
      int v482 = 2 * (v113(v114, v115, v504) < 0xA);
      unsigned int v11 = v512;
      long long v69 = v507;
    }
    else
    {
      int v482 = 0;
    }
    uint64_t v116 = v506;
    if (v102)
    {
      if (*(unsigned __int8 *)(*((void *)v11 + 537) + 10) < 2u
        && (uint64_t v117 = *((void *)v11 + 539), *(_DWORD *)(v117 + 508))
        && (int)v504 <= 3
        && *(unsigned char *)(v117 + 577))
      {
        unsigned int v118 = sub_1BBAA5CB4(*((void *)v11 + 540), v492, v486, v504);
        LODWORD(v119) = *(char *)(v117 + 587) + 2;
        if (v118 == 2) {
          uint64_t v119 = 2;
        }
        else {
          uint64_t v119 = v119;
        }
        uint64_t v493 = v119;
        if ((int)v119 < 1)
        {
          int v484 = 0;
          LODWORD(v122) = 0;
          unint64_t v121 = 0;
          uint64_t v495 = 0;
          long long v69 = v507;
          uint64_t v116 = v506;
        }
        else
        {
          uint64_t v120 = 0;
          uint64_t v495 = 0;
          unint64_t v121 = 0;
          uint64_t v122 = 0;
          int v484 = 0;
          unint64_t v123 = -1;
          unsigned int v488 = v118;
          long long v69 = v507;
          do
          {
            unint64_t v124 = v121;
            uint64_t v125 = v122;
            int v126 = byte_1BBB7CD8A[11 * v488 + v120];
            if (v126 == 1)
            {
              BOOL v127 = 0;
            }
            else
            {
              int v128 = 10 - v126;
              if (v126 >= 10) {
                int v128 = v126 - 10;
              }
              int v129 = 26 - v126;
              if (v126 >= 26) {
                int v129 = v126 - 26;
              }
              if (v128 >= v129) {
                int v128 = v129;
              }
              BOOL v127 = v128 > byte_1BBB7CDED[(int)v504];
            }
            sub_1BBA26804(*((void *)v512 + 537) + 1424, byte_1BBB7CD8A[11 * v488 + v120], v504, *(void *)&v69[8 * v127 + 152], v508, v510);
            unsigned int v130 = v500(v505, v505, v497, v498, v510, v508);
            uint64_t v131 = 0;
            char v132 = v482;
            if (v482 == 0 || v126 != 0) {
              char v132 = 0;
            }
            unint64_t v133 = (unint64_t)v130 >> v132;
            uint64_t v134 = v495;
            if (v482 != 0 && v126 == 0) {
              uint64_t v134 = v130;
            }
            uint64_t v495 = v134;
            while (*((_DWORD *)&v540 + v131) != v126)
            {
              if (++v131 == 3)
              {
                uint64_t v135 = 6;
                goto LABEL_188;
              }
            }
            if (v131) {
              uint64_t v135 = 3;
            }
            else {
              uint64_t v135 = 2;
            }
LABEL_188:
            unint64_t v136 = v133 + v135 * *(unsigned __int16 *)(*((void *)v512 + 541) + 2 * v496 + 8);
            if (v499)
            {
              v526[0] = v133;
              v526[1] = v136;
              int v527 = v135;
              __int16 v528 = 2;
              sub_1BBAB66A4(v526, v126, v483, (uint64_t)v555, &v529);
            }
            long long v69 = v507;
            uint64_t v116 = v506;
            if (v136 < v123)
            {
              if (v481)
              {
                uint64_t v137 = 0;
                uint64_t v138 = *((void *)v512 + 540);
                uint64_t v139 = v507[1];
                uint64_t v140 = v492 - *((_DWORD *)v507 + 1);
                if ((v140 & 0x80000000) == 0)
                {
                  unsigned int v141 = v486 - *((_DWORD *)v507 + 2);
                  if ((v141 & 0x80000000) == 0)
                  {
                    uint64_t v137 = 0;
                    unsigned int v142 = *v507;
                    if (v140 < v142 && v141 < v142) {
                      uint64_t v137 = (*(uint64_t (**)(void, unint64_t))(**((void **)v507 + 7) + 24))(*((void *)v507 + 7), v140 + v507[1] * (unint64_t)v141 + *((void *)v507 + 8));
                    }
                  }
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 8144))(v505, v505, v508, v510, v139, v137);
                int v484 = v126;
                uint64_t v125 = v135;
                unint64_t v123 = v136;
                unint64_t v124 = v133;
                long long v69 = v507;
                uint64_t v116 = v506;
              }
              else
              {
                int v484 = v126;
                uint64_t v125 = v135;
                unint64_t v123 = v136;
                unint64_t v124 = v133;
              }
            }
            ++v120;
            uint64_t v122 = v125;
            unint64_t v121 = v124;
          }
          while (v120 != v493);
        }
      }
      else
      {
        uint64_t v143 = 0;
        unint64_t v144 = 0;
        while (1)
        {
          int v145 = *((_DWORD *)&v539 + v143);
          if (v145 < 0) {
            break;
          }
          v144 |= 1 << v145;
          if (++v143 == 4)
          {
            v485 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)v11 + 541)
                                                                                                  + 8 * v476
                                                                                                  + 104);
            LODWORD(v143) = 4;
            goto LABEL_256;
          }
        }
        v485 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)v11 + 541)
                                                                                              + 8 * v476
                                                                                              + 104);
        if (!v143)
        {
          int v484 = 0;
          int v490 = 0;
          unint64_t v487 = 0;
          uint64_t v495 = 0;
          unint64_t v502 = -1;
          goto LABEL_289;
        }
LABEL_256:
        uint64_t v177 = 0;
        unint64_t v487 = 0;
        int v490 = 0;
        int v484 = 0;
        uint64_t v474 = v143;
        unint64_t v502 = -1;
        uint64_t v495 = 0;
        do
        {
          int v178 = *((_DWORD *)&v539 + v177);
          if (v178 == 1)
          {
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*((void *)v11 + 537) + 8 * v476 + 1584))(1, *((void *)v69 + 19), v508, v510);
          }
          else
          {
            int v179 = 10 - v178;
            if (v178 >= 10) {
              int v179 = v178 - 10;
            }
            int v180 = 26 - v178;
            if (v178 >= 26) {
              int v180 = v178 - 26;
            }
            if (v179 >= v180) {
              int v179 = v180;
            }
            sub_1BBA26804(*((void *)v11 + 537) + 1424, *((unsigned int *)&v539 + v177), v504, *(void *)&v69[8 * (v179 > byte_1BBB7CDED[(int)v504]) + 152], v508, v510);
          }
          unsigned int v181 = v485(v505, v505, v497, v498, v510, v508);
          uint64_t v182 = 0;
          char v183 = v482;
          if (v482 == 0 || v178 != 0) {
            char v183 = 0;
          }
          unint64_t v184 = (unint64_t)v181 >> v183;
          uint64_t v185 = v495;
          if (v482 != 0 && v178 == 0) {
            uint64_t v185 = v181;
          }
          uint64_t v495 = v185;
          unsigned int v11 = v512;
          uint64_t v116 = v506;
          while (*((_DWORD *)&v540 + v182) != v178)
          {
            if (++v182 == 3)
            {
              int v186 = 6;
              goto LABEL_277;
            }
          }
          if (v182) {
            int v186 = 3;
          }
          else {
            int v186 = 2;
          }
LABEL_277:
          unint64_t v187 = v184 + v186 * *(unsigned __int16 *)(*((void *)v512 + 541) + 2 * v496 + 8);
          if (v499)
          {
            v523[0] = v184;
            v523[1] = v187;
            int v524 = v186;
            __int16 v525 = 2;
            sub_1BBAB66A4(v523, v178, v483, (uint64_t)v555, &v529);
            uint64_t v116 = v506;
          }
          long long v69 = v507;
          if (v187 < v502)
          {
            if (v481)
            {
              uint64_t v188 = 0;
              uint64_t v189 = *((void *)v512 + 540);
              uint64_t v190 = v507[1];
              uint64_t v191 = v492 - *((_DWORD *)v507 + 1);
              if ((v191 & 0x80000000) == 0)
              {
                unsigned int v192 = v486 - *((_DWORD *)v507 + 2);
                if ((v192 & 0x80000000) == 0)
                {
                  uint64_t v188 = 0;
                  unsigned int v193 = *v507;
                  if (v191 < v193 && v192 < v193) {
                    uint64_t v188 = (*(uint64_t (**)(void, unint64_t))(**((void **)v507 + 7) + 24))(*((void *)v507 + 7), v191 + v507[1] * (unint64_t)v192 + *((void *)v507 + 8));
                  }
                }
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 8144))(v505, v505, v508, v510, v190, v188);
              int v484 = v178;
              int v490 = v186;
              unint64_t v502 = v187;
              unint64_t v487 = v184;
              unsigned int v11 = v512;
              long long v69 = v507;
              uint64_t v116 = v506;
            }
            else
            {
              int v484 = v178;
              int v490 = v186;
              unint64_t v502 = v187;
              unint64_t v487 = v184;
            }
          }
          ++v177;
        }
        while (v177 != v474);
LABEL_289:
        if (v463)
        {
          unsigned __int8 v494 = 0;
        }
        else
        {
          unsigned __int8 v494 = 0;
          unint64_t v194 = 2;
          int v195 = 2;
          do
          {
            if (((v144 >> v194) & 1) == 0)
            {
              int v196 = 10 - v195;
              if (v194 >= 0xA) {
                int v196 = v194 - 10;
              }
              int v197 = 26 - v195;
              if (v194 >= 0x1A) {
                int v197 = v194 - 26;
              }
              if (v196 >= v197) {
                int v196 = v197;
              }
              sub_1BBA26804(*((void *)v512 + 537) + 1424, v194, v504, *(void *)&v69[8 * (v196 > byte_1BBB7CDED[(int)v504]) + 152], v508, v510);
              unsigned int v198 = v485(v505, v505, v497, v498, v510, v508);
              uint64_t v199 = 0;
              unint64_t v200 = v198;
              uint64_t v116 = v506;
              while (v194 != *((_DWORD *)&v540 + v199))
              {
                if (++v199 == 3)
                {
                  int v201 = 6;
                  goto LABEL_306;
                }
              }
              if (v199) {
                int v201 = 3;
              }
              else {
                int v201 = 2;
              }
LABEL_306:
              unint64_t v202 = v201 * *(unsigned __int16 *)(*((void *)v512 + 541) + 2 * v496 + 8)
                   + (unint64_t)v198;
              if (v499)
              {
                v520[0] = v198;
                v520[1] = v202;
                int v521 = v201;
                __int16 v522 = 2;
                sub_1BBAB66A4(v520, v194, v483, (uint64_t)v555, &v529);
                uint64_t v116 = v506;
              }
              long long v69 = v507;
              if (v202 < v502)
              {
                if (v481)
                {
                  uint64_t v203 = 0;
                  uint64_t v204 = *((void *)v512 + 540);
                  uint64_t v205 = v507[1];
                  uint64_t v206 = v492 - *((_DWORD *)v507 + 1);
                  if ((v206 & 0x80000000) == 0)
                  {
                    unsigned int v207 = v486 - *((_DWORD *)v507 + 2);
                    if ((v207 & 0x80000000) == 0)
                    {
                      uint64_t v203 = 0;
                      unsigned int v208 = *v507;
                      if (v206 < v208 && v207 < v208) {
                        uint64_t v203 = (*(uint64_t (**)(void, unint64_t))(**((void **)v507 + 7) + 24))(*((void *)v507 + 7), v206 + v507[1] * (unint64_t)v207 + *((void *)v507 + 8));
                      }
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v204 + 8144))(v505, v505, v508, v510, v205, v203);
                  int v484 = v194;
                  int v490 = v201;
                  unint64_t v502 = v202;
                  unint64_t v487 = v200;
                  long long v69 = v507;
                  uint64_t v116 = v506;
                }
                else
                {
                  int v484 = v194;
                  int v490 = v201;
                  unint64_t v502 = v202;
                  unint64_t v487 = v200;
                }
              }
              v494 |= v194 == 34;
            }
            v194 += v472;
            v195 += v472;
          }
          while (v194 < 0x23);
        }
        if (v484 >= 2 && (int)v505 >= 5 && v447 > v469)
        {
          unsigned int v209 = v447;
          v210 = v512;
          do
          {
            uint64_t v211 = 0;
            char v212 = v209 + v484;
            if ((int)(v209 + v484) >= 34) {
              char v212 = 34;
            }
            char v471 = v212;
            v519[0] = v212;
            unsigned int v475 = v209;
            char v213 = v484 - v209;
            if ((int)(v484 - v209) <= 2) {
              char v213 = 2;
            }
            v519[1] = v213;
            char v214 = 1;
            do
            {
              char v215 = v214;
              uint64_t v216 = (char)v519[v211];
              if (((v144 >> v519[v211]) & 1) == 0 && v216 != 2 && (v494 & (v216 == 34)) == 0)
              {
                if (v216 == 1)
                {
                  BOOL v217 = 0;
                }
                else
                {
                  int v218 = 10 - v216;
                  if ((int)v216 >= 10) {
                    int v218 = v216 - 10;
                  }
                  int v219 = 26 - v216;
                  if ((int)v216 >= 26) {
                    int v219 = v216 - 26;
                  }
                  if (v218 >= v219) {
                    int v218 = v219;
                  }
                  BOOL v217 = v218 > byte_1BBB7CDED[(int)v504];
                }
                sub_1BBA26804(*((void *)v210 + 537) + 1424, v216, v504, *(void *)&v69[8 * v217 + 152], v508, v510);
                unsigned int v220 = v485(v505, v505, v497, v498, v510, v508);
                uint64_t v221 = 0;
                unint64_t v222 = v220;
                v210 = v512;
                while (*((_DWORD *)&v540 + v221) != v216)
                {
                  if (++v221 == 3)
                  {
                    int v223 = 6;
                    goto LABEL_349;
                  }
                }
                if (v221) {
                  int v223 = 3;
                }
                else {
                  int v223 = 2;
                }
LABEL_349:
                unint64_t v224 = v223 * *(unsigned __int16 *)(*((void *)v512 + 541) + 2 * v496 + 8)
                     + (unint64_t)v220;
                if (v499)
                {
                  v516[0] = v220;
                  v516[1] = v224;
                  int v517 = v223;
                  __int16 v518 = 2;
                  sub_1BBAB66A4(v516, v216, v483, (uint64_t)v555, &v529);
                }
                long long v69 = v507;
                uint64_t v116 = v506;
                if (v224 < v502)
                {
                  if (v481)
                  {
                    uint64_t v225 = 0;
                    uint64_t v226 = *((void *)v512 + 540);
                    uint64_t v227 = v507[1];
                    uint64_t v228 = v492 - *((_DWORD *)v507 + 1);
                    if ((v228 & 0x80000000) == 0)
                    {
                      unsigned int v229 = v486 - *((_DWORD *)v507 + 2);
                      if ((v229 & 0x80000000) == 0)
                      {
                        uint64_t v225 = 0;
                        unsigned int v230 = *v507;
                        if (v228 < v230 && v229 < v230) {
                          uint64_t v225 = (*(uint64_t (**)(void, unint64_t))(**((void **)v507 + 7) + 24))(*((void *)v507 + 7), v228 + v507[1] * (unint64_t)v229 + *((void *)v507 + 8));
                        }
                      }
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 8144))(v505, v505, v508, v510, v227, v225);
                    int v484 = v216;
                    int v490 = v223;
                    unint64_t v502 = v224;
                    unint64_t v487 = v222;
                    v210 = v512;
                    long long v69 = v507;
                    uint64_t v116 = v506;
                  }
                  else
                  {
                    int v484 = v216;
                    int v490 = v223;
                    unint64_t v502 = v224;
                    unint64_t v487 = v222;
                  }
                }
              }
              char v214 = 0;
              uint64_t v211 = 1;
            }
            while ((v215 & 1) != 0);
            v494 |= v471 == 34;
            unsigned int v209 = v475 >> 1;
          }
          while (v475 >> 1 > v469);
        }
        LODWORD(v122) = v490;
        unint64_t v121 = v487;
      }
    }
    else
    {
      v146 = v11;
      unint64_t v147 = 0;
      uint64_t v148 = 0;
      int v484 = 0;
      uint64_t v149 = 0;
      v501 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)v146 + 541)
                                                                                            + 8 * v476
                                                                                            + 104);
      uint64_t v495 = 0;
      unint64_t v150 = -1;
      int v151 = 1;
      do
      {
        if (v149 == 1)
        {
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*((void *)v512 + 537) + 8 * v476 + 1584))(1, *((void *)v69 + 19), v508, v510);
        }
        else
        {
          int v152 = 10 - v149;
          if ((int)v149 >= 10) {
            int v152 = v149 - 10;
          }
          int v153 = 26 - v149;
          if ((int)v149 >= 26) {
            int v153 = v149 - 26;
          }
          if (v152 >= v153) {
            int v152 = v153;
          }
          sub_1BBA26804(*((void *)v512 + 537) + 1424, v149, v504, *(void *)&v69[8 * (v152 > byte_1BBB7CDED[(int)v504]) + 152], v508, v510);
        }
        unsigned int v154 = v501(v505, v505, v497, v498, v510, v508);
        uint64_t v155 = 0;
        char v156 = v482;
        if (v482 == 0 || v149 != 0) {
          char v156 = 0;
        }
        unint64_t v157 = (unint64_t)v154 >> v156;
        uint64_t v158 = v495;
        if (v482 != 0 && v149 == 0) {
          uint64_t v158 = v154;
        }
        uint64_t v495 = v158;
        while (*((_DWORD *)&v540 + v155) != v149)
        {
          if (++v155 == 3)
          {
            int v159 = 6;
            goto LABEL_226;
          }
        }
        if (v155) {
          int v159 = 3;
        }
        else {
          int v159 = 2;
        }
LABEL_226:
        uint64_t v160 = *((void *)v512 + 541);
        unint64_t v161 = v157 + v159 * *(unsigned __int16 *)(v160 + 2 * v496 + 8);
        unint64_t v162 = v157;
        if (v499)
        {
          v513[0] = v157;
          v513[1] = v161;
          int v514 = v159;
          __int16 v515 = 2;
          sub_1BBAB66A4(v513, v149, v483, (uint64_t)v555, &v529);
        }
        unsigned int v489 = v159;
        uint64_t v163 = *((void *)v512 + 540);
        int v164 = *(unsigned __int8 *)(v163 + 188);
        long long v69 = v507;
        uint64_t v116 = v506;
        if (*(unsigned char *)(v163 + 188))
        {
          uint64_t v165 = 0;
          while (v149 != *((_DWORD *)&v540 + v165))
          {
            if (++v165 == 3) {
              goto LABEL_234;
            }
          }
          v166 = (char *)&v546 + 24 * v165;
          unint64_t v167 = *(void *)v166 + v162;
          unsigned int v168 = *((_DWORD *)v166 + 4) + v489;
          *((_DWORD *)v166 + 4) = v168;
          unint64_t v169 = v167
               + ((v168 * *(unsigned __int16 *)(v160 + 2 * *((__int16 *)v166 + 10) + 8)) >> (8
                                                                                             * (*((_WORD *)v166 + 10) == 0)));
          *(void *)v166 = v167;
          *((void *)v166 + 1) = v169;
        }
LABEL_234:
        if (v161 >= v150)
        {
          uint64_t v122 = v148;
          unint64_t v161 = v150;
          unint64_t v121 = v147;
        }
        else
        {
          if (v481)
          {
            uint64_t v170 = 0;
            uint64_t v171 = v507[1];
            uint64_t v172 = v492 - *((_DWORD *)v507 + 1);
            if ((v172 & 0x80000000) == 0)
            {
              unsigned int v173 = v486 - *((_DWORD *)v507 + 2);
              if ((v173 & 0x80000000) == 0)
              {
                uint64_t v170 = 0;
                unsigned int v174 = *v507;
                if (v172 < v174 && v173 < v174) {
                  uint64_t v170 = (*(uint64_t (**)(void, unint64_t))(**((void **)v507 + 7) + 24))(*((void *)v507 + 7), v172 + v507[1] * (unint64_t)v173 + *((void *)v507 + 8));
                }
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v163 + 8144))(v505, v505, v508, v510, v171, v170);
            int v164 = *(unsigned __int8 *)(*((void *)v512 + 540) + 188);
            int v484 = v149;
            long long v69 = v507;
            uint64_t v116 = v506;
          }
          else
          {
            int v484 = v149;
          }
          uint64_t v122 = v489;
          unint64_t v121 = v162;
        }
        if (v164) {
          BOOL v175 = 0;
        }
        else {
          BOOL v175 = v149 == 2;
        }
        if (v175 && v504 == 2) {
          int v151 = 2;
        }
        uint64_t v149 = (v151 + v149);
        unint64_t v147 = v121;
        unint64_t v150 = v161;
        uint64_t v148 = v122;
      }
      while ((int)v149 < 35);
    }
    unint64_t v231 = v121;
    int v491 = v122;
    unsigned int v11 = v512;
    if (*(unsigned char *)(*((void *)v512 + 540) + 188))
    {
      uint64_t v232 = 0;
      uint64_t v233 = v505 >> 2;
      int v234 = v483;
      do
      {
        int v235 = *((_DWORD *)&v540 + v232);
        if (v234 < 1)
        {
LABEL_368:
          *((unsigned char *)&v529 + v234) = v235;
          uint64_t v239 = *((void *)v512 + 541);
          v240 = &v555[24 * v234];
          v241 = (char *)&v546 + 24 * v232;
          uint64_t v242 = *(void *)v240 + *(void *)v241;
          LODWORD(v241) = *((_DWORD *)v240 + 4) + *((_DWORD *)v241 + 4);
          *((_DWORD *)v240 + 4) = v241;
          uint64_t v243 = v242
               + ((v241 * *(unsigned __int16 *)(v239 + 2 * *((__int16 *)v240 + 10) + 8)) >> (8 * (*((_WORD *)v240 + 10) == 0)));
          *(void *)v240 = v242;
          *((void *)v240 + 1) = v243;
          ++v234;
        }
        else
        {
          uint64_t v236 = v234;
          v237 = &v529;
          while (1)
          {
            int v238 = *(unsigned __int8 *)v237;
            v237 = (int *)((char *)v237 + 1);
            if (v235 == v238) {
              break;
            }
            if (!--v236) {
              goto LABEL_368;
            }
          }
        }
        ++v232;
      }
      while (v232 != 3);
    }
    else
    {
      uint64_t v233 = v505 >> 2;
      int v234 = v483;
    }
    if (v481)
    {
      uint64_t v244 = 0;
      int v245 = *((_DWORD *)v512 + 992);
      uint64_t v246 = v69[1];
      uint64_t v247 = v492 - *((_DWORD *)v69 + 1);
      unsigned int v248 = v486 - *((_DWORD *)v69 + 2);
      if ((v247 & 0x80000000) == 0 && (v248 & 0x80000000) == 0)
      {
        uint64_t v244 = 0;
        unsigned int v249 = *v69;
        if (v247 < v249 && v248 < v249)
        {
          uint64_t v244 = (*(uint64_t (**)(void, unint64_t))(**((void **)v69 + 3) + 24))(*((void *)v69 + 3), v247 + v69[1] * (unint64_t)v248 + *((void *)v69 + 4));
          long long v69 = v507;
          LODWORD(v247) = v492 - *((_DWORD *)v507 + 1);
          unsigned int v248 = v486 - *((_DWORD *)v507 + 2);
          unsigned int v11 = v512;
          uint64_t v233 = v505 >> 2;
          uint64_t v116 = v506;
        }
      }
      uint64_t v250 = 0;
      if ((v247 & 0x80000000) == 0 && (v248 & 0x80000000) == 0)
      {
        uint64_t v250 = 0;
        unsigned int v251 = *v69;
        if (v247 < v251 && v248 < v251)
        {
          uint64_t v250 = (*(uint64_t (**)(void, unint64_t, void, uint64_t))(**((void **)v69 + 7) + 24))(*((void *)v69 + 7), v247 + v69[1] * (unint64_t)v248 + *((void *)v69 + 8), 0, v116);
          unsigned int v11 = v512;
          long long v69 = v507;
          uint64_t v233 = v505 >> 2;
          uint64_t v116 = v506;
        }
      }
      if (*((_DWORD *)v11 + 992) == v245)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)v11 + 537)
                                                                            + 8 * (v245 - 2)
                                                                            + 1896))(v244, v246, v250, v246, v478);
        unsigned int v11 = v512;
        uint64_t v252 = *((void *)v512 + 540);
        int v253 = *((_DWORD *)v512 + 1088);
        char v254 = *(unsigned char *)(*(void *)(v252 + 1880) + 2009) - v253;
        uint64_t v255 = (1 << v254);
        if ((int)v255 < 2)
        {
          unsigned int v257 = 0;
          long long v69 = v507;
          uint64_t v233 = v505 >> 2;
          uint64_t v116 = v506;
        }
        else
        {
          uint64_t v256 = 0;
          unsigned int v257 = 0;
          do
          {
            int v258 = *(__int16 *)&v444[2 * v256];
            if (v258 < 0) {
              int v258 = -v258;
            }
            unsigned int v259 = v257 + v258;
            int v260 = *(__int16 *)(v478 + 2 * (int)(++v256 << v254));
            if (v260 < 0) {
              int v260 = -v260;
            }
            unsigned int v257 = v259 + v260;
          }
          while (v255 - 1 != v256);
          long long v69 = v507;
          uint64_t v233 = v505 >> 2;
          uint64_t v116 = v506;
          if ((int)v255 >= 4)
          {
            unsigned int v261 = v255 >> 1;
            int v262 = 1;
            do
            {
              v263 = &v444[2 * (v262 << v254)];
              uint64_t v264 = v261 - 1;
              do
              {
                int v266 = *(__int16 *)v263;
                v263 += 2;
                int v265 = v266;
                if (v266 < 0) {
                  int v265 = -v265;
                }
                v257 += v265;
                --v264;
              }
              while (v264);
              ++v262;
            }
            while (v262 != v261);
          }
        }
        unsigned int v267 = v492 - *((_DWORD *)v69 + 1);
        unsigned int v268 = v486 - *((_DWORD *)v69 + 2);
        uint64_t v269 = *((void *)v69 + 11);
        unint64_t v270 = (unint64_t)*v69 >> 3;
        int v271 = *(__int16 *)(v269 + 2 * ((v267 >> 3) + v270 * (unint64_t)(v268 >> 3))) >> 9;
        int v272 = 173 * v271;
        if (173 * v271 >= 7865) {
          int v272 = 7865;
        }
        if (v272 <= 2865) {
          int v272 = 2865;
        }
        int v273 = v272 - 2865;
        int v274 = 200 * v271;
        if (v274 >= 8404) {
          int v274 = 8404;
        }
        if (v274 <= 3404) {
          int v274 = 3404;
        }
        unsigned int v275 = v274 - 3404;
        if (!*(unsigned char *)(*(void *)(v252 + 952) + 234)) {
          unsigned int v275 = v273;
        }
        if (v257 < v275)
        {
          *(_DWORD *)(v252 + 4 * v253 + 8088) &= ~0x1000u;
          int v253 = *((_DWORD *)v512 + 1088);
          unsigned int v267 = v492 - *((_DWORD *)v69 + 1);
          unsigned int v268 = v486 - *((_DWORD *)v69 + 2);
        }
        if ((*(_DWORD *)(v252 + 4 * v253 + 8088) & 0x1000) != 0)
        {
          v276 = (__int16 *)(v269 + 2 * ((v267 >> 3) + v270 * (unint64_t)(v268 >> 3)));
          __int16 v277 = *v276;
          int v278 = *v276 >> 9;
          if (v278 >= 47) {
            LOWORD(v278) = 47;
          }
          __int16 v279 = ((_WORD)v278 << 9) + 2048;
          __int16 *v276 = v279 & 0xFE00 | v277 & 0x1FF;
          char v280 = sub_1BBABA04C(v478, v492, v486, (v279 >> 9), v478, 1 << v245, v478, 1 << v245, *((_DWORD *)v512 + 992), 0, 0);
          __int16 *v276 = v277 & 0xFE00 | *v276 & 0x1FF;
          unsigned int v11 = v512;
          long long v69 = v507;
          uint64_t v233 = v505 >> 2;
          uint64_t v116 = v506;
          if ((v280 & 1) == 0)
          {
            uint64_t v281 = *((void *)v512 + 540) + 4 * *((int *)v512 + 1088);
            *(_DWORD *)(v281 + 8088) &= ~0x1000u;
          }
        }
      }
    }
    v282 = 0;
    unsigned int v283 = v492 - v457;
    if (((v492 - v457) & 0x80000000) == 0)
    {
      unsigned int v284 = v486 - v452;
      if (((v486 - v452) & 0x80000000) == 0)
      {
        v282 = 0;
        if (v283 < v451 && v284 < v451) {
          v282 = &v446[16 * (v283 >> 2) + 16 * (v451 >> 2) * (unint64_t)(v284 >> 2)];
        }
      }
    }
    if (*(int *)(*((void *)v11 + 540) + 4) <= 2)
    {
      int v285 = v282[10];
      BOOL v286 = *(unsigned __int8 *)(*((void *)v11 + 537) + 10) > 1u || v285 == 1;
      if (!v286
        && *((void *)v69 + 21)
         + v231
         + (*((_DWORD *)v69 + 46) + v491) * *(unsigned __int16 *)(*((void *)v11 + 541) + 2) >= v445)
      {
        *(void *)v442 = *((void *)v69 + 18);
        return;
      }
    }
    if (v499)
    {
      uint64_t v287 = *((void *)v69 + 17);
      *(_DWORD *)(v287 + 128) = 0;
      *(_OWORD *)(v287 + 112) = xmmword_1BBB6F8F0;
      *(_WORD *)(v287 + 132) = 0;
      if (v234 >= 1)
      {
        uint64_t v288 = 0;
        int v503 = 0;
        v289 = &v531;
        if (!v479) {
          v289 = 0;
        }
        uint64_t v511 = (uint64_t)v289;
        uint64_t v509 = v234;
        LOBYTE(v234) = 0;
        while (1)
        {
          uint64_t v290 = *((void *)v69 + 18);
          *(_DWORD *)(v290 + 128) = 0;
          *(_OWORD *)(v290 + 112) = xmmword_1BBB6F8F0;
          *(_WORD *)(v290 + 132) = 0;
          int v291 = *((unsigned __int8 *)&v529 + v288);
          *(unsigned char *)unsigned int v97 = v291;
          if ((int)v505 >= 4)
          {
            uint64_t v292 = 0;
            unint64_t v293 = 16 * ((unint64_t)*v69 >> 2);
            v294 = v97;
            do
            {
              v295 = v294;
              uint64_t v296 = v116;
              do
              {
                uint64_t v297 = *v97;
                *(void *)((char *)v295 + 6) = *(void *)((char *)v97 + 6);
                void *v295 = v297;
                v295 += 2;
                --v296;
              }
              while (v296);
              ++v292;
              v294 = (void *)((char *)v294 + v293);
            }
            while (v292 != v233);
          }
          v298 = v69 + 144;
          sub_1BBAB67CC(v478, v492, v486, v69, v504, a8 == 3, v291, a8, v477, *((void *)v69 + 18) + 112, v511);
          v300 = *(unsigned __int8 **)v298;
          unint64_t v301 = *(void *)(*(void *)v298 + 112);
          long long v69 = v507;
          if (((v301 >= *(void *)(*((void *)v507 + 17) + 120)) & ~v479) != 0) {
            goto LABEL_481;
          }
          unsigned int v11 = v512;
          size_t v302 = (uint64_t)(int)v505 >> 2;
          if (*(unsigned char *)(*((void *)v512 + 540) + 188))
          {
            if (*(unsigned char *)(*((void *)v512 + 539) + 352))
            {
              unsigned int v303 = v492 - *((_DWORD *)v507 + 1);
              if ((v303 & 0x80000000) == 0)
              {
                unsigned int v304 = v486 - *((_DWORD *)v507 + 2);
                if ((v304 & 0x80000000) == 0)
                {
                  unsigned int v305 = *v507;
                  if (v303 < v305 && v304 < v305 && v504 >= 2)
                  {
                    unint64_t v306 = (unint64_t)*v300 >> 2;
                    v307 = (char *)(*((void *)v300 + 1)
                                  + (v303 >> 2)
                                  + v306 * (unint64_t)(v304 >> 2));
                    uint64_t v308 = (uint64_t)(int)v505 >> 2;
                    do
                    {
                      --v308;
                      bzero(v307, v473);
                      v307 += v306;
                    }
                    while (v308);
                  }
                }
              }
            }
            sub_1BBAB7060(v478, v492, v486, *((_DWORD *)v512 + 1088), v507, v291, (int *)&v540, 0);
            long long v69 = v507;
            v300 = (unsigned __int8 *)*((void *)v507 + 18);
            *((_DWORD *)v300 + 32) = v309;
            if ((v479 & 1) == 0)
            {
              unint64_t v301 = *((void *)v300 + 14);
              unsigned int v11 = v512;
              uint64_t v233 = v505 >> 2;
              uint64_t v116 = v506;
LABEL_470:
              unint64_t v334 = v301
                   + ((v309
                     * *(unsigned __int16 *)(*((void *)v11 + 541) + 2 * *((__int16 *)v300 + 66) + 8)) >> (8 * (*((_WORD *)v300 + 66) == 0)));
              *((void *)v300 + 15) = v334;
              goto LABEL_478;
            }
            unsigned int v310 = v492 - *((_DWORD *)v507 + 1);
            if ((v310 & 0x80000000) == 0)
            {
              unsigned int v311 = v486 - *((_DWORD *)v507 + 2);
              if ((v311 & 0x80000000) == 0)
              {
                unsigned int v312 = *v507;
                if (v310 < v312 && v311 < v312)
                {
                  memset((void *)(*((void *)v300 + 1) + (v310 >> 2) + ((unint64_t)*v300 >> 2) * (v311 >> 2)), 1, v505 >> 2);
                  long long v69 = v507;
                }
              }
            }
            __n128 v299 = sub_1BBAB7060(v478, v492, v486, *((_DWORD *)v512 + 1088), v69, v291, (int *)&v540, 1);
            int v314 = v313;
            LODWORD(v532) = v313;
            long long v69 = v507;
            v300 = (unsigned __int8 *)*((void *)v507 + 18);
            unint64_t v301 = *((void *)v300 + 14);
            int v309 = *((_DWORD *)v300 + 32);
            unsigned int v11 = v512;
            size_t v302 = (uint64_t)(int)v505 >> 2;
          }
          else
          {
            uint64_t v315 = 0;
            uint64_t v233 = v505 >> 2;
            uint64_t v116 = v506;
            while (*((_DWORD *)&v540 + v315) != v291)
            {
              if (++v315 == 3)
              {
                int v316 = 1536;
                goto LABEL_463;
              }
            }
            if (v315) {
              int v316 = 768;
            }
            else {
              int v316 = 512;
            }
LABEL_463:
            int v309 = *((_DWORD *)v300 + 32) + v316;
            *((_DWORD *)v300 + 32) = v309;
            if (!v479) {
              goto LABEL_470;
            }
            int v314 = v532 + v316;
            LODWORD(v532) = v314;
          }
          uint64_t v317 = *((void *)v11 + 541) + 8;
          unint64_t v318 = v301
               + ((v309 * *(unsigned __int16 *)(v317 + 2 * *((__int16 *)v300 + 66))) >> (8 * (*((_WORD *)v300 + 66) == 0)));
          *((void *)v300 + 15) = v318;
          *((void *)&v531 + 1) = v531
                                 + ((v314 * *(unsigned __int16 *)(v317 + 2 * SWORD2(v532))) >> (8 * (WORD2(v532) == 0)));
          if (v318 > *((void *)&v531 + 1)
            && (uint64_t v319 = *((void *)v512 + 540), v320 = *(unsigned __int8 **)(v319 + 376), **((unsigned char **)v320 + 4)))
          {
            uint64_t v321 = *v320;
            uint64_t v322 = (*(uint64_t (**)(void, void, __n128))(**((void **)v320 + 10) + 24))(*((void *)v320 + 10), *((void *)v320 + 11), v299);
            v323 = (unsigned __int8 *)*((void *)v507 + 18);
            uint64_t v324 = *v323;
            uint64_t v325 = (*(uint64_t (**)(void, uint64_t))(**((void **)v323 + 10) + 24))(*((void *)v323 + 10), *((void *)v323 + 11)- *((int *)v512 + 1086)+ (int)v492+ ((int)v486 - (uint64_t)*((int *)v512 + 1087)) * v324);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v319 + 8144))(v505, v505, v321, v322, v324, v325);
            uint64_t v326 = **((unsigned __int8 **)v507 + 18);
            uint64_t v327 = 2 * v326;
            v328 = *(unsigned __int8 **)(*((void *)v512 + 540) + 376);
            uint64_t v329 = 2 * *v328;
            v330 = (char *)*((void *)v328 + 7);
            v331 = (char *)(*(void *)(*((void *)v507 + 18) + 56)
                          + 2 * (v326 * ((int)v486 - (uint64_t)*v453) - *v454 + (int)v492));
            uint64_t v332 = (int)v505;
            do
            {
              --v332;
              memcpy(v331, v330, 2 * (int)v505);
              v331 += v327;
              v330 += v329;
            }
            while (v332);
            sub_1BBAE40E4(v507, v492, v486, v473, 0, **(unsigned __int8 **)(*(void *)(*((void *)v512 + 540) + 376) + 32), 1);
            uint64_t v333 = *((void *)v507 + 18);
            *(_OWORD *)(v333 + 112) = v531;
            *(void *)(v333 + 128) = v532;
          }
          else
          {
            unsigned int v335 = v492 - *((_DWORD *)v69 + 1);
            if ((v335 & 0x80000000) == 0)
            {
              unsigned int v336 = v486 - *((_DWORD *)v507 + 2);
              if ((v336 & 0x80000000) == 0)
              {
                unsigned int v337 = *v507;
                if (v335 < v337 && v336 < v337)
                {
                  unint64_t v338 = (unint64_t)*v300 >> 2;
                  v339 = (char *)(*((void *)v300 + 1)
                                + (v335 >> 2)
                                + v338 * (unint64_t)(v336 >> 2));
                  size_t v340 = v302;
                  do
                  {
                    --v340;
                    bzero(v339, v302);
                    v339 += v338;
                  }
                  while (v340);
                }
              }
            }
          }
          long long v69 = v507;
          v300 = (unsigned __int8 *)*((void *)v507 + 18);
          unint64_t v334 = *((void *)v300 + 15);
          unsigned int v11 = v512;
          uint64_t v233 = v505 >> 2;
          uint64_t v116 = v506;
LABEL_478:
          uint64_t v341 = *((void *)v69 + 17);
          if (v334 < *(void *)(v341 + 120))
          {
            int v234 = ((unsigned __int16)*v470 >> 2) & 3;
            if (a8 != 3)
            {
              *((void *)v69 + 17) = v300;
              *((void *)v69 + 18) = v341;
              int v484 = v291;
              int v503 = v288;
              goto LABEL_482;
            }
            sub_1BBA8E4A4(*((void *)v11 + 540), (unsigned __int8 *)v341, v300, v492 - *((_DWORD *)v69 + 1), v486 - *((_DWORD *)v69 + 2), v492 - *((_DWORD *)v69 + 1), v486 - *((_DWORD *)v69 + 2), v505);
            long long v69 = v507;
            uint64_t v342 = *((void *)v507 + 17);
            uint64_t v343 = *((void *)v507 + 18);
            long long v344 = *(_OWORD *)(v343 + 112);
            *(void *)(v342 + 128) = *(void *)(v343 + 128);
            *(_OWORD *)(v342 + 112) = v344;
            int v484 = v291;
            int v503 = v288;
LABEL_481:
            unsigned int v11 = v512;
            uint64_t v233 = v505 >> 2;
            uint64_t v116 = v506;
          }
LABEL_482:
          if (++v288 == v509) {
            goto LABEL_486;
          }
        }
      }
    }
    int v503 = 0;
    LOBYTE(v234) = 0;
LABEL_486:
    v345 = v470;
    if ((*v470 & 0xC) != 0) {
      *(unsigned char *)(*((void *)v11 + 540) + 4698) = 0;
    }
    *(unsigned char *)unsigned int v97 = v484;
    if ((int)v505 >= 4)
    {
      uint64_t v346 = 0;
      unint64_t v347 = 16 * ((unint64_t)*v69 >> 2);
      v348 = v97;
      do
      {
        v349 = v348;
        uint64_t v350 = v116;
        do
        {
          uint64_t v351 = *v97;
          *(void *)((char *)v349 + 6) = *(void *)((char *)v97 + 6);
          void *v349 = v351;
          v349 += 2;
          --v350;
        }
        while (v350);
        ++v346;
        v348 = (void *)((char *)v348 + v347);
      }
      while (v346 != v233);
    }
    if (a8 != 3 && v468)
    {
      uint64_t v352 = *((void *)v69 + 18);
      *(_OWORD *)(v352 + 112) = xmmword_1BBB6F8F0;
      v352 += 112;
      *(_DWORD *)(v352 + 16) = 0;
      *(_WORD *)(v352 + 20) = 0;
      sub_1BBAB7384(v478, v492, v486, v69, v504, 0, v484, a8, v477, v352);
      long long v69 = v507;
      *(int8x16_t *)(v507 + 136) = vextq_s8(*(int8x16_t *)(v507 + 136), *(int8x16_t *)(v507 + 136), 8uLL);
      unsigned int v11 = v512;
      v345 = v470;
    }
    if (v499)
    {
      char v353 = v234;
      if (!v482 || v484)
      {
        int v355 = v503;
        uint64_t v354 = *v456 + *(void *)&v555[24 * v503];
      }
      else
      {
        uint64_t v354 = *v456 + v495;
        int v355 = v503;
      }
      uint64_t v356 = v467;
      *((void *)v69 + 21) = v354;
      *((_DWORD *)v69 + 46) += *(_DWORD *)&v555[24 * v355 + 16];
      uint64_t v357 = *((void *)v69 + 17);
      *((void *)v69 + 24) += *(void *)(v357 + 112);
      *((_DWORD *)v69 + 52) += *(_DWORD *)(v357 + 128);
      if (!v468)
      {
        _WORD *v345 = *v345 & 0xFFF3 | (4 * (v353 & 3));
        if ((int)v505 >= 8)
        {
          uint64_t v358 = 0;
          unint64_t v359 = 2 * ((unint64_t)*v69 >> 3);
          v360 = v345;
          do
          {
            v361 = v360;
            uint64_t v362 = v505 >> 3;
            do
            {
              *v361++ = *v345;
              --v362;
            }
            while (v362);
            ++v358;
            v360 = (_WORD *)((char *)v360 + v359);
          }
          while (v358 != v505 >> 3);
        }
      }
    }
    else
    {
      *((_DWORD *)v69 + 46) += v491;
      sub_1BBAB8040(v478, v492, v486, v69, 0, v504, 0, a8, v477, (uint64_t)v456);
      unsigned int v11 = v512;
      long long v69 = v507;
      uint64_t v356 = v467;
    }
    uint64_t v67 = v356 + 1;
    v363 = v462;
    int v10 = v461;
    LODWORD(v9) = v460;
  }
  while (v67 != v455);
  *(void *)v442 = *((void *)v69 + 18);
  if (!v11[8])
  {
    sub_1BBA9930C((uint64_t)v11, (unsigned __int8 *)v461, v460, a4, *v462, *v462, a7, a8);
    unsigned int v11 = v512;
    v363 = v462;
    int v10 = v461;
    LODWORD(v9) = v460;
  }
  if (*((int *)v11 + 1) < 3)
  {
    int v388 = *(unsigned __int8 *)(*((void *)v11 + 235) + 241);
    BOOL v43 = v388 <= a4;
    int v389 = v388 > a4;
    v384 = *v363;
    int v385 = *((_DWORD *)*v363 + 46);
    if (!v43) {
      ++v385;
    }
    *((_DWORD *)v384 + 46) = v385;
    int v386 = *((_DWORD *)v384 + 52) + (v389 << 8);
    *((_DWORD *)v384 + 52) = v386;
    uint64_t v387 = a4;
  }
  else
  {
    uint64_t v364 = *((void *)v11 + 118);
    long long v365 = *(_OWORD *)(v364 + 16);
    *(_OWORD *)(v364 + 216) = *(_OWORD *)v364;
    long long v366 = *(_OWORD *)(v364 + 32);
    long long v367 = *(_OWORD *)(v364 + 64);
    long long v368 = *(_OWORD *)(v364 + 80);
    *(_OWORD *)(v364 + 264) = *(_OWORD *)(v364 + 48);
    *(_OWORD *)(v364 + 280) = v367;
    *(_OWORD *)(v364 + 248) = v366;
    *(_OWORD *)(v364 + 232) = v365;
    long long v369 = *(_OWORD *)(v364 + 96);
    long long v370 = *(_OWORD *)(v364 + 128);
    long long v371 = *(_OWORD *)(v364 + 144);
    *(_OWORD *)(v364 + 328) = *(_OWORD *)(v364 + 112);
    *(_OWORD *)(v364 + 344) = v370;
    *(_OWORD *)(v364 + 296) = v368;
    *(_OWORD *)(v364 + 312) = v369;
    long long v372 = *(_OWORD *)(v364 + 176);
    *(_OWORD *)(v364 + 376) = *(_OWORD *)(v364 + 160);
    *(_OWORD *)(v364 + 392) = v372;
    v555[0] = 0;
    *(void *)(v364 + 408) = *(void *)(v364 + 192);
    *(_OWORD *)(v364 + 360) = v371;
    uint64_t v373 = 8 * (*(_DWORD *)(v364 + 208) - *(_DWORD *)(v364 + 24));
    *(void *)(v364 + 32) = 0;
    *(void *)(v364 + 8) = 510;
    *(void *)(v364 + 16) = v373;
    sub_1BBA9595C((uint64_t)v11, v10, (int)v9, *v363, 1, 0, 0, 0, 0);
    v374 = *v363;
    *((_DWORD *)v374 + 4) = *((_DWORD *)*v363 + 5);
    sub_1BBA9AF40((unint64_t *)v11, v10, (int)v9, a4, a7, (int *)v374 + 4, v555);
    unsigned int v11 = v512;
    uint64_t v375 = *((void *)v512 + 118);
    v363 = v462;
    *((_DWORD *)*v462 + 52) = ((*(_DWORD *)(v375 + 16) + 8 * (*(_DWORD *)(v375 + 24) - *(_DWORD *)(v375 + 208))) << 8)
                            - *(_DWORD *)(v375 + 8)
                            + 510;
    long long v376 = *(_OWORD *)(v375 + 360);
    long long v377 = *(_OWORD *)(v375 + 392);
    *(_OWORD *)(v375 + 160) = *(_OWORD *)(v375 + 376);
    *(_OWORD *)(v375 + 176) = v377;
    *(void *)(v375 + 192) = *(void *)(v375 + 408);
    long long v378 = *(_OWORD *)(v375 + 296);
    long long v379 = *(_OWORD *)(v375 + 328);
    long long v380 = *(_OWORD *)(v375 + 344);
    *(_OWORD *)(v375 + 96) = *(_OWORD *)(v375 + 312);
    *(_OWORD *)(v375 + 112) = v379;
    *(_OWORD *)(v375 + 128) = v380;
    *(_OWORD *)(v375 + 144) = v376;
    long long v381 = *(_OWORD *)(v375 + 264);
    long long v382 = *(_OWORD *)(v375 + 280);
    *(_OWORD *)(v375 + 32) = *(_OWORD *)(v375 + 248);
    *(_OWORD *)(v375 + 48) = v381;
    long long v383 = *(_OWORD *)(v375 + 232);
    *(_OWORD *)(v375 + 64) = v382;
    *(_OWORD *)(v375 + 80) = v378;
    *(_OWORD *)uint64_t v375 = *(_OWORD *)(v375 + 216);
    *(_OWORD *)(v375 + 16) = v383;
    v384 = *v462;
    int v385 = *((_DWORD *)*v462 + 46);
    int v386 = *((_DWORD *)*v462 + 52);
    uint64_t v387 = a4;
    int v10 = v461;
    LODWORD(v9) = v460;
  }
  *((void *)v384 + 22) = *((void *)v384 + 21)
                         + ((v385 * *(unsigned __int16 *)&v11[2 * *((__int16 *)v384 + 94) + 992]) >> (8 * (*((_WORD *)v384 + 94) == 0)));
  *((void *)v384 + 25) = *((void *)v384 + 24)
                         + ((v386 * *(unsigned __int16 *)&v11[2 * *((__int16 *)v384 + 106) + 992]) >> (8 * (*((_WORD *)v384 + 106) == 0)));
  v390 = &v11[32 * v387];
  unint64_t v393 = *((void *)v390 + 4);
  v391 = v390 + 32;
  unint64_t v392 = v393;
  if (a8) {
    char v394 = 64;
  }
  else {
    char v394 = 32;
  }
  v391[26] |= v394;
  v395 = *v363;
  unint64_t v396 = *((void *)*v363 + 22);
  if (v396 < v392) {
    *(void *)v391 = v396;
  }
  unint64_t v397 = 0;
  v398 = *a6;
  unsigned int v399 = v10 - *((_DWORD *)*a6 + 1);
  if ((v399 & 0x80000000) == 0)
  {
    unsigned int v400 = v9 - *((_DWORD *)v398 + 2);
    if ((v400 & 0x80000000) == 0)
    {
      unint64_t v397 = 0;
      unint64_t v401 = *(unsigned __int8 *)v398;
      if (v399 < v401 && v400 < v401) {
        unint64_t v397 = (unint64_t)v398[12]
      }
             + 16 * (v399 >> 2)
             + 16 * (v401 >> 2) * (unint64_t)(v400 >> 2);
    }
  }
  if (v11[1] || v11[188])
  {
    unsigned int v402 = 1;
  }
  else if (*(unsigned char *)(v397 + 10) == 1)
  {
    unsigned int v402 = *v11;
  }
  else
  {
    unsigned int v402 = 0;
  }
  int v403 = *((_DWORD *)v11 + 50);
  if (v403 < 1)
  {
    sub_1BBAA01B8((uint64_t)v11, (void ***)v363, a6, v402);
  }
  else
  {
    if (*(void *)&v395[24 * v402 + 176] < (unint64_t)v398[3 * v402 + 22])
    {
      unint64_t v404 = 0;
      *v363 = (unsigned __int8 *)v398;
      *a6 = (void **)v395;
      v405 = *v363;
      unsigned int v406 = v10 - *((_DWORD *)*v363 + 1);
      if ((v406 & 0x80000000) == 0)
      {
        unsigned int v407 = v9 - *((_DWORD *)v405 + 2);
        if ((v407 & 0x80000000) == 0)
        {
          unint64_t v404 = 0;
          unint64_t v408 = *v405;
          if (v406 < v408 && v407 < v408) {
            unint64_t v404 = *((void *)v405 + 12)
          }
                 + 16 * ((v406 >> 2) + (v408 >> 2) * (unint64_t)(v407 >> 2));
        }
      }
      unint64_t v409 = 0;
      unsigned int v410 = v10 - *((_DWORD *)v395 + 1);
      if ((v410 & 0x80000000) == 0)
      {
        unsigned int v411 = v9 - *((_DWORD *)v395 + 2);
        if ((v411 & 0x80000000) == 0)
        {
          unint64_t v409 = 0;
          unint64_t v412 = *v395;
          if (v410 < v412 && v411 < v412) {
            unint64_t v409 = *((void *)v395 + 12)
          }
                 + 16 * ((v410 >> 2) + (v412 >> 2) * (unint64_t)(v411 >> 2));
        }
      }
      unsigned int v413 = *v405;
      LODWORD(v414) = v413 >> 2;
      int v415 = *(unsigned __int8 *)(v404 + 10);
      if (v403 == 2)
      {
        if (v415 == 1)
        {
          if (v413 >= 4)
          {
            int v416 = 0;
            if (v414 <= 1) {
              uint64_t v414 = 1;
            }
            else {
              uint64_t v414 = v414;
            }
            do
            {
              v417 = (char *)(v404 + 13);
              v418 = (unsigned char *)(v409 + 13);
              uint64_t v419 = v414;
              do
              {
                *(_DWORD *)(v418 - 9) = *(_DWORD *)(v417 - 9);
                *(v418 - 1) = *(v417 - 1);
                char v420 = *v417;
                v417 += 16;
                unsigned char *v418 = v420;
                v418 += 16;
                --v419;
              }
              while (v419);
              v409 += (4 * *v395) & 0x3F0;
              v404 += (4 * *v405) & 0x3F0;
              ++v416;
            }
            while (v416 != v414);
          }
        }
        else
        {
          uint64_t v426 = *(void *)(*((void *)v11 + 234) + 1360);
          if (((v9 | v10) & 0x80000000) != 0
            || *(_DWORD *)(v426 + 276) <= v10
            || *(_DWORD *)(v426 + 280) <= (int)v9)
          {
            uint64_t v427 = 0;
          }
          else
          {
            uint64_t v427 = *(void *)(v426 + 592) + 4 * (*(void *)(v426 + 552) * ((uint64_t)(int)v9 >> 2) + (v10 >> 2));
          }
          if (v413 >= 4)
          {
            int v433 = 0;
            if (v414 <= 1) {
              LODWORD(v414) = 1;
            }
            uint64_t v434 = 4 * *(void *)(v426 + 552);
            do
            {
              uint64_t v435 = 0;
              v436 = (char *)(v404 + 9);
              v437 = (unsigned char *)(v409 + 12);
              do
              {
                *((_DWORD *)v437 - 2) = *(_DWORD *)(v436 - 9);
                *(_DWORD *)(v427 + v435) = *(_DWORD *)(v436 - 5);
                unsigned char *v437 = *(v436 - 1);
                char v438 = *v436;
                v436 += 16;
                v437[1] = v438;
                v435 += 4;
                v437 += 16;
              }
              while (4 * v414 != v435);
              v409 += (4 * *v395) & 0x3F0;
              v404 += (4 * *v405) & 0x3F0;
              ++v433;
              v427 += v434;
            }
            while (v433 != v414);
          }
        }
      }
      else if (v415 == 1)
      {
        if (v413 >= 4)
        {
          int v421 = 0;
          if (v414 <= 1) {
            uint64_t v414 = 1;
          }
          else {
            uint64_t v414 = v414;
          }
          do
          {
            v422 = (char *)(v404 + 13);
            v423 = (unsigned char *)(v409 + 13);
            uint64_t v424 = v414;
            do
            {
              *(_DWORD *)(v423 - 9) = *(_DWORD *)(v422 - 9);
              *(v423 - 1) = *(v422 - 1);
              char v425 = *v422;
              v422 += 16;
              unsigned char *v423 = v425;
              v423 += 16;
              --v424;
            }
            while (v424);
            v409 += (4 * *v395) & 0x3F0;
            v404 += (4 * *v405) & 0x3F0;
            ++v421;
          }
          while (v421 != v414);
        }
      }
      else if (v413 >= 4)
      {
        int v428 = 0;
        if (v414 <= 1) {
          uint64_t v414 = 1;
        }
        else {
          uint64_t v414 = v414;
        }
        do
        {
          v429 = (char *)(v404 + 9);
          v430 = (unsigned char *)(v409 + 12);
          uint64_t v431 = v414;
          do
          {
            *((_DWORD *)v430 - 2) = *(_DWORD *)(v429 - 9);
            unsigned char *v430 = *(v429 - 1);
            char v432 = *v429;
            v429 += 16;
            v430[1] = v432;
            v430 += 16;
            --v431;
          }
          while (v431);
          v409 += (4 * *v395) & 0x3F0;
          v404 += (4 * *v405) & 0x3F0;
          ++v428;
        }
        while (v428 != v414);
      }
      v395 = *v363;
    }
    v439 = (__int16 *)*((void *)v395 + 11);
    __int16 v440 = *v439;
    bzero(v439, 2 * ((unint64_t)*v395 >> 3) * ((unint64_t)*v395 >> 3));
    **((_WORD **)v395 + 11) = **((_WORD **)v395 + 11) & 0xFFFC | v440 & 3;
    **((_WORD **)v395 + 11) = v440 & 0xFE00 | **((_WORD **)v395 + 11) & 0x1FF;
    sub_1BBA8E004((void **)*v363, *(unsigned __int8 *)(*((void *)v11 + 234) + 10) < 2u);
    v441 = *v363;
    *((_DWORD *)v441 + 46) = 0;
    *(_OWORD *)(v441 + 168) = xmmword_1BBB6F8F0;
    *((_WORD *)v441 + 94) = 2;
    *((_DWORD *)v441 + 52) = 0;
    *((_OWORD *)v441 + 12) = xmmword_1BBB6F8F0;
    *((_WORD *)v441 + 106) = 0;
  }
  *(_DWORD *)&v11[4 * v387 + 8088] &= ~(512 << a8);
}

BOOL sub_1BBAA01B8(uint64_t a1, void ***a2, void ***a3, unsigned int a4)
{
  uint64_t v6 = *a2;
  int v7 = (*a2)[3 * a4 + 22];
  int v8 = (*a3)[3 * a4 + 22];
  if (v7 < v8)
  {
    *a2 = *a3;
    *a3 = v6;
    uint64_t v6 = *a2;
  }
  BOOL v9 = v7 < v8;
  int v10 = (__int16 *)v6[11];
  __int16 v11 = *v10;
  bzero(v10, 2 * ((unint64_t)*(unsigned __int8 *)v6 >> 3) * ((unint64_t)*(unsigned __int8 *)v6 >> 3));
  *(_WORD *)v6[11] = *(_WORD *)v6[11] & 0xFFFC | v11 & 3;
  *(_WORD *)v6[11] = v11 & 0xFE00 | *(_WORD *)v6[11] & 0x1FF;
  sub_1BBA8E004(*a2, *(unsigned __int8 *)(*(void *)(a1 + 1872) + 10) < 2u);
  int v12 = *a2;
  *((_DWORD *)v12 + 46) = 0;
  *(_OWORD *)(v12 + 21) = xmmword_1BBB6F8F0;
  *((_WORD *)v12 + 94) = 2;
  *((_DWORD *)v12 + 52) = 0;
  *((_OWORD *)v12 + 12) = xmmword_1BBB6F8F0;
  *((_WORD *)v12 + 106) = 0;
  return v9;
}

BOOL sub_1BBAA02A4(uint64_t a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned __int8 *a7)
{
  uint64_t v7 = *(void *)(a1 + 1872);
  int v8 = (uint64_t *)(v7 + 79296);
  uint64_t v9 = *(void *)(v7 + 1368);
  char v10 = *(unsigned char *)(v9 + 2009);
  int v11 = *(unsigned __int8 *)(v9 + 2013) - 1;
  unsigned int v12 = v11 & a5;
  LODWORD(v9) = (a5 >> v10) + (a6 >> v10) * *(_DWORD *)(v9 + 2016);
  unsigned int v13 = (v11 & a6) >> (v10 - a4);
  unsigned int v14 = v12 >> (v10 - a4);
  uint64_t v15 = *v8;
  uint64_t v16 = v14 + v13 * byte_1BBB7A49D[a4] + *((_DWORD *)v8 + 2) * v9 + byte_1BBB7A499[a4];
  uint64_t v17 = v15 + 32 * v16;
  uint64_t v18 = 1;
  if ((*(unsigned char *)(v17 + 26) & 0x80) != 0 && (*(unsigned char *)(v17 + 26) & 0x18) != 8)
  {
    unint64_t v20 = *((void *)a7 + 22);
    unint64_t v21 = *(void *)(v15 + 32 * v16 + 8);
    BOOL v22 = v20 >= v21;
    unint64_t v23 = 100 * (v20 - v21);
    if (!v22) {
      unint64_t v23 = 0;
    }
    if (v23 / (v20 + 1) > 0x22) {
      return 1;
    }
    char v24 = a4;
    int v25 = a3;
    unsigned int v27 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2013);
    if (sub_1BBAA0474(a2, a3, a7, v17)) {
      return 0;
    }
    unsigned int v28 = v27 >> (v24 + 1);
    int v29 = (*(unsigned __int16 *)(*((void *)a7 + 11)
                               + 2
                               * (((a2 - *((_DWORD *)a7 + 1)) >> 3)
                                + ((unint64_t)*a7 >> 3) * ((v25 - *((_DWORD *)a7 + 2)) >> 3))) >> 4) & 7;
    switch(v29)
    {
      case 3:
        if (sub_1BBAA0474(v28 + a2, v25, a7, v17)) {
          return 0;
        }
        v25 += v28;
        if (sub_1BBAA0474(a2, v25, a7, v17)) {
          return 0;
        }
        int v31 = v28 + a2;
        break;
      case 2:
        int v31 = v28 + a2;
        break;
      case 1:
        int v30 = v28 + v25;
        int v31 = a2;
        return !sub_1BBAA0474(v31, v30, a7, v17);
      default:
        return 1;
    }
    int v30 = v25;
    return !sub_1BBAA0474(v31, v30, a7, v17);
  }
  return v18;
}

BOOL sub_1BBAA0474(int a1, int a2, unsigned __int8 *a3, uint64_t a4)
{
  int v4 = (__int16 *)(*((void *)a3 + 12)
                 + 16
                 * (((a1 - *((_DWORD *)a3 + 1)) >> 2)
                  + ((unint64_t)*a3 >> 2) * ((a2 - *((_DWORD *)a3 + 2)) >> 2)));
  int v5 = *(unsigned __int8 *)(a4 + 24);
  if (v5 != *((unsigned __int8 *)v4 + 8)) {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a4 + 25);
  if (v6 != *((unsigned __int8 *)v4 + 9)) {
    return 0;
  }
  if (v5 == 255) {
    goto LABEL_10;
  }
  int v7 = *(__int16 *)(a4 + 16) - *v4;
  if (v7 < 0) {
    int v7 = *v4 - *(__int16 *)(a4 + 16);
  }
  if (v7 > 5)
  {
LABEL_10:
    BOOL v9 = 0;
  }
  else
  {
    int v8 = *(__int16 *)(a4 + 18) - v4[1];
    if (v8 < 0) {
      int v8 = v4[1] - *(__int16 *)(a4 + 18);
    }
    BOOL v9 = v8 < 6;
  }
  if (v5 != 255 && !v9) {
    return 0;
  }
  if (v6 == 255) {
    goto LABEL_23;
  }
  int v11 = *(__int16 *)(a4 + 20) - v4[2];
  if (v11 < 0) {
    int v11 = v4[2] - *(__int16 *)(a4 + 20);
  }
  if (v11 > 5)
  {
LABEL_23:
    BOOL v13 = 0;
  }
  else
  {
    int v12 = *(__int16 *)(a4 + 22) - v4[3];
    if (v12 < 0) {
      int v12 = -v12;
    }
    BOOL v13 = v12 < 6;
  }
  int v15 = v6 == 255 || v13;
  return v15 != 0;
}

BOOL sub_1BBAA0564(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, int a7, unsigned int a8, unsigned __int8 a9)
{
  int v9 = a7;
  unsigned int v14 = 0;
  int v15 = *a5;
  unsigned int v16 = a2 - *((_DWORD *)*a5 + 1);
  unint64_t v17 = **a5;
  if ((v16 & 0x80000000) != 0)
  {
    unint64_t v19 = 0;
  }
  else
  {
    unsigned int v18 = a3 - *((_DWORD *)v15 + 2);
    unint64_t v19 = 0;
    if ((v18 & 0x80000000) == 0)
    {
      if (v16 >= v17 || v18 >= v17)
      {
        unsigned int v14 = 0;
        unint64_t v19 = 0;
      }
      else
      {
        unsigned int v14 = (unsigned __int16 *)(*((void *)v15 + 11)
                                 + 2 * ((v16 >> 3) + (v17 >> 3) * (unint64_t)(v18 >> 3)));
        unint64_t v19 = *((void *)v15 + 12) + 16 * ((v16 >> 2) + (v17 >> 2) * (unint64_t)(v18 >> 2));
      }
    }
  }
  int v84 = v14;
  unint64_t v85 = v19;
  uint64_t v21 = (1 << (*(unsigned char *)(*(void *)(a1 + 1880) + 2009) - a4));
  sub_1BBA8E12C(a1, v14, a4, a7, 0, v17 >> 3, *((_DWORD *)v15 + 3));
  BOOL v22 = *a5;
  long long v23 = xmmword_1BBB6F8F0;
  char v24 = *a5;
  *(_OWORD *)(v24 + 168) = xmmword_1BBB6F8F0;
  int v88 = v24 + 168;
  *((_DWORD *)v22 + 46) = 0;
  *((_WORD *)v22 + 94) = 2;
  int v86 = v21;
  int v87 = v9;
  uint64_t v25 = ((int)v21 >> 1);
  uint64_t v26 = a3;
  uint64_t v27 = a9;
  switch(v9)
  {
    case 0:
      sub_1BBAA0F18(a1, a2, v26, a4, a5, a6, v21, v21, 0, a8, (uint64_t)v88, a9, 1);
      uint64_t v28 = a1 + 32 * a4;
      *(_DWORD *)(v28 + 48) = *(_DWORD *)v85;
      *(unsigned char *)(v28 + 56) = *(unsigned char *)(v85 + 8);
      *(_DWORD *)(v28 + 52) = *(_DWORD *)(v85 + 4);
      *(unsigned char *)(v28 + 57) = *(unsigned char *)(v85 + 9);
      goto LABEL_16;
    case 1:
      sub_1BBAA0F18(a1, a2, v26, a4, a5, a6, v21, v25, 1, a8, (uint64_t)v88, a9, 1);
      a2 = a2;
      sub_1BBAA0F18(a1, a2, (v25 + v26), a4, a5, a6, v21, v25, 1, a8, (uint64_t)v88, a9, 1);
      goto LABEL_16;
    case 2:
      sub_1BBAA0F18(a1, a2, v26, a4, a5, a6, ((int)v21 >> 1), v21, 2, a8, (uint64_t)v88, a9, 1);
      a2 = a2;
      sub_1BBAA0F18(a1, v25 + a2, v26, a4, a5, a6, v25, v21, 2, a8, (uint64_t)v88, a9, 1);
      goto LABEL_16;
    case 3:
      sub_1BBAA0F18(a1, a2, v26, a4, a5, a6, v25, v25, 3, a8, (uint64_t)v88, a9, 1);
      sub_1BBAA0F18(a1, v25 + a2, v26, a4, a5, a6, v25, v25, 3, a8, (uint64_t)v88, a9, 1);
      sub_1BBAA0F18(a1, a2, (v25 + v26), a4, a5, a6, v25, v25, 3, a8, (uint64_t)v88, a9, 1);
      a2 = a2;
      sub_1BBAA0F18(a1, v25 + a2, (v25 + v26), a4, a5, a6, v25, v25, 3, a8, (uint64_t)v88, a9, 1);
LABEL_16:
      uint64_t v27 = v26;
      long long v23 = xmmword_1BBB6F8F0;
      break;
    default:
      break;
  }
  if (!*(unsigned char *)(a1 + 8) && !*(unsigned char *)(a1 + 188))
  {
    sub_1BBA97AF4(a1, a2, v27, a4, *a5, 0, 1, 0, 0);
    uint64_t v29 = 0;
    uint64_t v30 = v27;
    int v31 = *a5;
    int v32 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) + ~a4;
    uint64_t v33 = (a2 - *((_DWORD *)*a5 + 1));
    uint64_t v34 = v30;
    unsigned int v35 = v30 - *((_DWORD *)*a5 + 2);
    if ((v33 & 0x80000000) == 0 && (v35 & 0x80000000) == 0)
    {
      uint64_t v29 = 0;
      unsigned int v36 = *v31;
      if (v33 < v36 && v35 < v36)
      {
        uint64_t v29 = (*(uint64_t (**)(void, unint64_t, void))(**((void **)v31 + 5) + 24))(*((void *)v31 + 5), v33 + v31[1] * (unint64_t)(v35 >> 1) + *((void *)v31 + 6), 0);
        LODWORD(v33) = a2 - *((_DWORD *)v31 + 1);
        unsigned int v35 = v34 - *((_DWORD *)v31 + 2);
      }
    }
    uint64_t v37 = 0;
    uint64_t v21 = v31[1];
    uint64_t v38 = *((void *)v31 + 17);
    uint64_t v39 = *(unsigned __int8 *)(v38 + 1);
    int v40 = *(unsigned int (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * v32 + 1216);
    if ((v33 & 0x80000000) == 0 && (v35 & 0x80000000) == 0)
    {
      uint64_t v37 = 0;
      unsigned int v41 = *v31;
      if (v33 < v41 && v35 < v41)
      {
        uint64_t v42 = v29;
        uint64_t v43 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v38 + 96) + 24))(*(void *)(v38 + 96), *(void *)(v38 + 104)+ v33+ *(unsigned __int8 *)(v38 + 1) * (unint64_t)(v35 & 0xFFFFFFFE));
        uint64_t v29 = v42;
        uint64_t v37 = v43;
      }
    }
    *v88 += ((*(unsigned __int16 *)(a1 + 1002)
                          * (unint64_t)v40((1 << v32), (1 << v32), v29, v21, v37, 2 * v39)) >> 8);
    LODWORD(v21) = v86;
    int v9 = v87;
    uint64_t v27 = v34;
    long long v23 = xmmword_1BBB6F8F0;
  }
  if (*(unsigned char *)(a1 + 188))
  {
    if (v9)
    {
      *((_DWORD *)v22 + 52) = 0;
      *((_OWORD *)v22 + 12) = v23;
      *((_WORD *)v22 + 106) = 2;
      sub_1BBA97AF4(a1, a2, v27, a4, *a5, 1, *(unsigned char *)(a1 + 8) == 0, 0, (unsigned int *)v22 + 48);
      if (!*(unsigned char *)(a1 + 8127))
      {
        *((_DWORD *)v22 + 52) = 0;
        *((_OWORD *)v22 + 12) = xmmword_1BBB6F8F0;
        *((_WORD *)v22 + 106) = 2;
        sub_1BBA9CF24(a1, a2, v27, a4, *a5, (uint64_t)(v22 + 192));
      }
      int v94 = 0;
      long long v93 = xmmword_1BBB6F8F0;
      __int16 v95 = 0;
      *((_DWORD *)v22 + 52) = 0;
      *((_OWORD *)v22 + 12) = xmmword_1BBB6F8F0;
      *((_WORD *)v22 + 106) = 0;
      sub_1BBA9A7B0(a1, a2, v27, a4, *a5, (uint64_t)(v22 + 192), (uint64_t)&v93, 0, 0);
      uint64_t v44 = *(void *)(a1 + 944);
      long long v45 = *(_OWORD *)(v44 + 16);
      *(_OWORD *)(v44 + 216) = *(_OWORD *)v44;
      long long v46 = *(_OWORD *)(v44 + 32);
      long long v47 = *(_OWORD *)(v44 + 64);
      long long v48 = *(_OWORD *)(v44 + 80);
      *(_OWORD *)(v44 + 264) = *(_OWORD *)(v44 + 48);
      *(_OWORD *)(v44 + 280) = v47;
      *(_OWORD *)(v44 + 248) = v46;
      *(_OWORD *)(v44 + 232) = v45;
      long long v49 = *(_OWORD *)(v44 + 96);
      long long v50 = *(_OWORD *)(v44 + 128);
      long long v51 = *(_OWORD *)(v44 + 144);
      *(_OWORD *)(v44 + 328) = *(_OWORD *)(v44 + 112);
      *(_OWORD *)(v44 + 344) = v50;
      *(_OWORD *)(v44 + 296) = v48;
      *(_OWORD *)(v44 + 312) = v49;
      long long v52 = *(_OWORD *)(v44 + 176);
      *(_OWORD *)(v44 + 376) = *(_OWORD *)(v44 + 160);
      *(_OWORD *)(v44 + 392) = v52;
      char v92 = 0;
      *(void *)(v44 + 408) = *(void *)(v44 + 192);
      *(_OWORD *)(v44 + 360) = v51;
      uint64_t v53 = 8 * (*(_DWORD *)(v44 + 208) - *(_DWORD *)(v44 + 24));
      *(void *)(v44 + 32) = 0;
      *(void *)(v44 + 8) = 510;
      *(void *)(v44 + 16) = v53;
      sub_1BBA9595C(a1, a2, v27, *a5, 1, 0, *(unsigned char *)(a1 + 8127), 1, 0);
      unint64_t v54 = *a5;
      *((_DWORD *)v54 + 4) = *((_DWORD *)*a5 + 5);
      sub_1BBA9AF40((unint64_t *)a1, a2, v27, a4, a8, (int *)v54 + 4, &v92);
      uint64_t v55 = *(void *)(a1 + 944);
      *((_DWORD *)v22 + 52) = *((_DWORD *)v22 + 52)
                            - *(_DWORD *)(v55 + 8)
                            + ((*(_DWORD *)(v55 + 16) + 8 * (*(_DWORD *)(v55 + 24) - *(_DWORD *)(v55 + 208))) << 8)
                            + 510;
      long long v57 = *(_OWORD *)(v55 + 264);
      long long v56 = *(_OWORD *)(v55 + 280);
      *(_OWORD *)(v55 + 32) = *(_OWORD *)(v55 + 248);
      *(_OWORD *)(v55 + 48) = v57;
      long long v59 = *(_OWORD *)(v55 + 328);
      long long v58 = *(_OWORD *)(v55 + 344);
      long long v60 = *(_OWORD *)(v55 + 296);
      *(_OWORD *)(v55 + 96) = *(_OWORD *)(v55 + 312);
      *(_OWORD *)(v55 + 112) = v59;
      *(_OWORD *)(v55 + 64) = v56;
      *(_OWORD *)(v55 + 80) = v60;
      long long v61 = *(_OWORD *)(v55 + 392);
      long long v62 = *(_OWORD *)(v55 + 360);
      *(_OWORD *)(v55 + 160) = *(_OWORD *)(v55 + 376);
      *(_OWORD *)(v55 + 176) = v61;
      long long v63 = *(_OWORD *)(v55 + 232);
      *(void *)(v55 + 192) = *(void *)(v55 + 408);
      *(_OWORD *)(v55 + 128) = v58;
      *(_OWORD *)(v55 + 144) = v62;
      *(_OWORD *)uint64_t v55 = *(_OWORD *)(v55 + 216);
      *(_OWORD *)(v55 + 16) = v63;
      *((void *)v22 + 25) = *((void *)v22 + 24)
                            + ((*((_DWORD *)v22 + 52)
                              * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)v22 + 106) + 992)) >> (8 * (*((_WORD *)v22 + 106) == 0)));
      unsigned int v64 = *(unsigned __int8 *)(a1 + 188);
      LODWORD(v21) = v86;
    }
    else
    {
      unsigned int v64 = 1;
    }
  }
  else
  {
    unsigned int v64 = 0;
    int v65 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 241);
    uint64_t v66 = *(unsigned __int8 *)(v85 + 10) - 1;
    BOOL v67 = v65 <= a4;
    int v68 = *((_DWORD *)v22 + 46) + byte_1BBB7B49C[3 * *(unsigned __int8 *)(*(void *)(a1 + 1872) + 10) + v66];
    *((_DWORD *)v22 + 46) = v68;
    int v69 = byte_1BBB7B4A5[12 * (v65 == a4) + 4 * v66 + (((unint64_t)*v84 >> 4) & 7)];
    if (v67) {
      int v70 = v68;
    }
    else {
      int v70 = v68 + 1;
    }
    int v71 = v70 + v69;
    *((_DWORD *)v22 + 46) = v71;
    *((void *)v22 + 22) = *((void *)v22 + 21)
                          + ((v71 * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)v22 + 94) + 992)) >> (8 * (*((_WORD *)v22 + 94) == 0)));
  }
  BOOL result = sub_1BBAA01B8(a1, (void ***)a5, a6, v64);
  if (result && !*(unsigned char *)(a1 + 188))
  {
    unsigned int v73 = 0;
    unsigned int v74 = *a6;
    unsigned int v75 = a2 - *((_DWORD *)*a6 + 1);
    unint64_t v76 = *(unsigned __int8 *)*a6;
    if ((v75 & 0x80000000) == 0)
    {
      unsigned int v77 = v27 - *((_DWORD *)v74 + 2);
      if ((v77 & 0x80000000) == 0)
      {
        unsigned int v73 = 0;
        if (v75 < v76 && v77 < v76) {
          unsigned int v73 = (char *)v74[11] + 2 * (v75 >> 3) + 2 * (v76 >> 3) * (unint64_t)(v77 >> 3);
        }
      }
    }
    if ((int)v21 >= 8)
    {
      uint64_t v78 = 0;
      BOOL v79 = v73;
      do
      {
        unsigned int v80 = v79;
        uint64_t v81 = v21 >> 3;
        do
        {
          *v80++ = *v73;
          --v81;
        }
        while (v81);
        ++v78;
        v79 += v76 >> 3;
      }
      while (v78 != v21 >> 3);
    }
  }
  uint64_t v82 = a1 + 4 * a4;
  int v83 = *(_DWORD *)(v82 + 8088) & ~(1 << v9);
  if (!v9) {
    v83 &= ~0x100u;
  }
  *(_DWORD *)(v82 + 8088) = v83;
  *(unsigned char *)(a1 + a4 + 8108) = 1;
  return result;
}

void sub_1BBAA0F18(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, uint64_t a7, int a8, int a9, unsigned int a10, uint64_t a11, char a12, char a13)
{
  uint64_t v13 = a7;
  int v14 = a3;
  uint64_t v15 = a1;
  uint64_t v504 = *MEMORY[0x1E4F143B8];
  uint64_t v484 = a1 + 8024;
  unsigned int v16 = *a5;
  unsigned int v17 = a2 - *((_DWORD *)*a5 + 1);
  unsigned int v18 = a3 - *((_DWORD *)*a5 + 2);
  if (((v17 | v18) & 0x80000000) != 0
    || ((unint64_t v19 = *v16, v17 < v19) ? (v20 = v18 >= v19) : (v20 = 1), v20))
  {
    unint64_t v21 = 0;
  }
  else
  {
    unint64_t v21 = *((void *)v16 + 12) + 16 * ((v17 >> 2) + (v19 >> 2) * (unint64_t)(v18 >> 2));
  }
  LOBYTE(v495) = 3;
  __int16 v494 = -1;
  BYTE10(v492) = 3;
  BYTE8(v492) = -1;
  if (a9) {
    BOOL v22 = 1;
  }
  else {
    BOOL v22 = *(unsigned char *)(a1 + 188) == 0;
  }
  int v23 = v22;
  unint64_t v431 = v21;
  v442 = (unsigned __int8 *)(a1 + 4928);
  int v425 = v23;
  if (!a12)
  {
LABEL_70:
    int v423 = 0;
    uint64_t v422 = 0;
    uint64_t v95 = -1;
    goto LABEL_172;
  }
  if ((v23 & 1) == 0)
  {
    uint64_t v29 = (unsigned __int8 *)*((void *)v16 + 17);
    uint64_t v448 = *v29;
    uint64_t v30 = v29[1];
    WORD3(v501) = *((_DWORD *)v16 + 3);
    int v31 = *a6;
    *((_DWORD *)v31 + 52) = 0;
    *((_OWORD *)v31 + 12) = xmmword_1BBB6F8F0;
    *((_WORD *)v31 + 106) = 0;
    sub_1BBA8F298(a1, a2, a3, v16, a7, a8, a1 + 4928);
    unsigned int v32 = *(_DWORD *)(v15 + 4 * a4 + 8088);
    if (((int)v13 < 8 || a8 <= 7) && *(unsigned __int8 *)(*(void *)(v15 + 1880) + 2009) - a4 == 3)
    {
      uint64_t v33 = v442[60];
      if (v442[60])
      {
        uint64_t v34 = v442;
        do
        {
          if (*v34 != 255 && v34[1] != 255)
          {
            v34[1] = -1;
            *((_DWORD *)v34 + 2) = 0;
          }
          v34 += 12;
          --v33;
        }
        while (v33);
      }
    }
    unsigned int v35 = v442[60];
    if (v442[60])
    {
      unint64_t v36 = 0;
      uint64_t v444 = 2 * v30;
      if ((int)v13 >> 2 <= 1) {
        uint64_t v37 = 1;
      }
      else {
        uint64_t v37 = ((int)v13 >> 2);
      }
      int v443 = (v32 >> 8) & 1;
      do
      {
        if (!sub_1BBA99114((uint64_t)v442, v36))
        {
          LOBYTE(v38) = 0;
          unint64_t v39 = v36;
          __int16 v40 = 0;
          char v467 = 2 * (v39 & 7);
          unint64_t v439 = v39;
          unsigned int v41 = &v442[12 * v39];
          v456 = v41 + 8;
          int v459 = v41 + 4;
          char v463 = v41;
          int v452 = v41 + 1;
          int v42 = 1;
          char v43 = 3;
          do
          {
            if (v38) {
              break;
            }
            uint64_t v44 = 0;
            long long v45 = *a5;
            unsigned int v46 = a2 - *((_DWORD *)*a5 + 1);
            unsigned int v47 = v14 - *((_DWORD *)*a5 + 2);
            int v478 = v42;
            if ((v46 & 0x80000000) != 0 || (v47 & 0x80000000) != 0)
            {
              uint64_t v53 = 0;
              uint64_t v52 = 0;
            }
            else
            {
              unint64_t v48 = *v45;
              if (v46 >= v48 || v47 >= v48)
              {
                uint64_t v44 = 0;
                uint64_t v53 = 0;
                uint64_t v52 = 0;
              }
              else
              {
                uint64_t v50 = *((void *)v45 + 11);
                uint64_t v51 = *((void *)v45 + 12);
                uint64_t v52 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v45 + 17) + 80)
                                                                          + 24))(*(void *)(*((void *)v45 + 17) + 80), *(void *)(*((void *)v45 + 17) + 88)+ v46+ **((unsigned __int8 **)v45 + 17) * (unint64_t)v47);
                uint64_t v53 = (unsigned __int16 *)(v50
                                         + 2 * ((v46 >> 3) + (v48 >> 3) * (unint64_t)(v47 >> 3)));
                uint64_t v44 = (uint64_t *)(v51 + 16 * ((v46 >> 2) + (v48 >> 2) * (unint64_t)(v47 >> 2)));
                long long v45 = *a5;
                unsigned int v46 = a2 - *((_DWORD *)*a5 + 1);
                unsigned int v47 = a3 - *((_DWORD *)*a5 + 2);
              }
            }
            uint64_t v54 = 0;
            if ((v46 & 0x80000000) == 0 && (v47 & 0x80000000) == 0)
            {
              unsigned int v55 = *v45;
              if (v46 >= v55 || v47 >= v55) {
                uint64_t v54 = 0;
              }
              else {
                uint64_t v54 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v45 + 17) + 96)
              }
                                                                          + 24))(*(void *)(*((void *)v45 + 17) + 96), *(void *)(*((void *)v45 + 17) + 104)+ v46+ *(unsigned __int8 *)(*((void *)v45 + 17) + 1) * (unint64_t)(v47 & 0xFFFFFFFE));
            }
            unsigned __int16 *v53 = *v53 & 0xFF73 | v40;
            char v57 = *((unsigned char *)v44 + 11);
            *((unsigned char *)v44 + 10) = v43;
            *((unsigned char *)v44 + 11) = v57 & 0xF0 | v467 | 1;
            *(_DWORD *)uint64_t v44 = *v459;
            *((unsigned char *)v44 + 8) = *v463;
            *((_DWORD *)v44 + 1) = *v456;
            *((unsigned char *)v44 + 9) = *v452;
            long long v58 = *a5;
            unsigned int v59 = **a5;
            if (a8 < 4)
            {
              uint64_t v63 = a7;
            }
            else
            {
              uint64_t v60 = 0;
              uint64_t v61 = 16 * (v59 >> 2);
              long long v62 = v44;
              uint64_t v63 = a7;
              do
              {
                unsigned int v64 = v62;
                uint64_t v65 = v37;
                if ((int)a7 >= 4)
                {
                  do
                  {
                    uint64_t v66 = *v44;
                    *(void *)((char *)v64 + 6) = *(uint64_t *)((char *)v44 + 6);
                    *unsigned int v64 = v66;
                    v64 += 2;
                    --v65;
                  }
                  while (v65);
                }
                ++v60;
                long long v62 = (void *)((char *)v62 + v61);
              }
              while (v60 != a8 >> 2);
              long long v58 = *a5;
              unsigned int v59 = **a5;
            }
            sub_1BBA8E12C(a1, v53, a4, 0, (*v53 >> 7) & 1, v59 >> 3, *((_DWORD *)v58 + 3));
            sub_1BBAD03F0(*(void *)(a1 + 1872), (unsigned int *)v44, a2, a3, v63, v63, v448, v52, v444, v54);
            BOOL v67 = *a5;
            *((_DWORD *)v67 + 52) = 0;
            long long v68 = xmmword_1BBB6F8F0;
            *((_OWORD *)v67 + 12) = xmmword_1BBB6F8F0;
            *((_WORD *)v67 + 106) = 0;
            if (*(unsigned char *)(v484 + 103))
            {
              uint64_t v15 = a1;
              uint64_t v69 = a3;
              unsigned int v70 = a2;
            }
            else
            {
              LODWORD(v501) = 0;
              long long v500 = xmmword_1BBB6F8F0;
              WORD2(v501) = 2;
              uint64_t v15 = a1;
              sub_1BBA9CF24(a1, a2, a3, a4, v67, (uint64_t)&v500);
              BOOL v67 = *a5;
              uint64_t v69 = a3;
              unsigned int v70 = a2;
              long long v68 = xmmword_1BBB6F8F0;
            }
            LODWORD(v501) = 0;
            long long v500 = v68;
            WORD2(v501) = 0;
            sub_1BBA9A7B0(v15, v70, v69, a4, v67, (uint64_t)(v67 + 192), (uint64_t)&v500, 0, 0);
            unsigned int v71 = *(unsigned __int16 *)(*((void *)*a5 + 11)
                                      + 2
                                      * (((a2 - *((_DWORD *)*a5 + 1)) >> 3)
                                       + ((unint64_t)**a5 >> 3)
                                       * ((a3 - *((_DWORD *)*a5 + 2)) >> 3)));
            uint64_t v72 = *(void *)(v15 + 944);
            long long v73 = *(_OWORD *)(v72 + 16);
            *(_OWORD *)(v72 + 216) = *(_OWORD *)v72;
            long long v74 = *(_OWORD *)(v72 + 32);
            long long v75 = *(_OWORD *)(v72 + 64);
            long long v76 = *(_OWORD *)(v72 + 80);
            *(_OWORD *)(v72 + 264) = *(_OWORD *)(v72 + 48);
            *(_OWORD *)(v72 + 280) = v75;
            *(_OWORD *)(v72 + 248) = v74;
            *(_OWORD *)(v72 + 232) = v73;
            long long v77 = *(_OWORD *)(v72 + 96);
            long long v78 = *(_OWORD *)(v72 + 128);
            long long v79 = *(_OWORD *)(v72 + 144);
            *(_OWORD *)(v72 + 328) = *(_OWORD *)(v72 + 112);
            *(_OWORD *)(v72 + 344) = v78;
            *(_OWORD *)(v72 + 296) = v76;
            *(_OWORD *)(v72 + 312) = v77;
            long long v80 = *(_OWORD *)(v72 + 176);
            *(_OWORD *)(v72 + 376) = *(_OWORD *)(v72 + 160);
            *(_OWORD *)(v72 + 392) = v80;
            LOBYTE(v499[0]) = 0;
            *(void *)(v72 + 408) = *(void *)(v72 + 192);
            *(_OWORD *)(v72 + 360) = v79;
            uint64_t v81 = 8 * (*(_DWORD *)(v72 + 208) - *(_DWORD *)(v72 + 24));
            *(void *)(v72 + 32) = 0;
            *(void *)(v72 + 8) = 510;
            *(void *)(v72 + 16) = v81;
            sub_1BBA9595C(v15, a2, a3, *a5, 1, 0, *(unsigned char *)(v484 + 103), 1, 0);
            uint64_t v82 = *a5;
            *((_DWORD *)v82 + 4) = *((_DWORD *)*a5 + 5);
            sub_1BBA9AF40((unint64_t *)v15, a2, a3, a4, a10, (int *)v82 + 4, v499);
            uint64_t v83 = *(void *)(v15 + 944);
            int v84 = *a5;
            int v85 = *((_DWORD *)*a5 + 52)
                - *(_DWORD *)(v83 + 8)
                + ((*(_DWORD *)(v83 + 16) + 8 * (*(_DWORD *)(v83 + 24) - *(_DWORD *)(v83 + 208))) << 8)
                + 510;
            *((_DWORD *)v84 + 52) = v85;
            *((void *)v84 + 25) = *((void *)v84 + 24)
                                  + ((v85
                                    * *(unsigned __int16 *)(v15 + 2 * *((__int16 *)v84 + 106) + 992)) >> (8 * (*((_WORD *)v84 + 106) == 0)));
            long long v86 = *(_OWORD *)(v83 + 216);
            long long v88 = *(_OWORD *)(v83 + 264);
            long long v87 = *(_OWORD *)(v83 + 280);
            *(_OWORD *)(v83 + 32) = *(_OWORD *)(v83 + 248);
            *(_OWORD *)(v83 + 48) = v88;
            long long v89 = *(_OWORD *)(v83 + 232);
            *(_OWORD *)uint64_t v83 = v86;
            *(_OWORD *)(v83 + 16) = v89;
            long long v91 = *(_OWORD *)(v83 + 328);
            long long v90 = *(_OWORD *)(v83 + 344);
            long long v92 = *(_OWORD *)(v83 + 296);
            *(_OWORD *)(v83 + 96) = *(_OWORD *)(v83 + 312);
            *(_OWORD *)(v83 + 112) = v91;
            *(_OWORD *)(v83 + 64) = v87;
            *(_OWORD *)(v83 + 80) = v92;
            long long v93 = *(_OWORD *)(v83 + 392);
            long long v94 = *(_OWORD *)(v83 + 360);
            *(_OWORD *)(v83 + 160) = *(_OWORD *)(v83 + 376);
            *(_OWORD *)(v83 + 176) = v93;
            int v38 = (v71 >> 7) & 1;
            *(void *)(v83 + 192) = *(void *)(v83 + 408);
            *(_OWORD *)(v83 + 128) = v90;
            *(_OWORD *)(v83 + 144) = v94;
            sub_1BBAA01B8(v15, (void ***)a5, a6, 1u);
            __int16 v40 = 128;
            char v43 = 2;
            int v42 = 0;
            int v14 = a3;
          }
          while ((v443 & v478 & 1) != 0);
          unint64_t v36 = v439;
          unsigned int v35 = v442[60];
          uint64_t v13 = a7;
          unint64_t v21 = v431;
        }
        ++v36;
      }
      while (v36 < v35);
    }
    goto LABEL_70;
  }
  uint64_t v24 = *(unsigned __int8 *)(*(void *)(a1 + 1872) + 542);
  uint64_t v25 = (unsigned __int8 *)*((void *)v16 + 17);
  uint64_t v26 = *v25;
  if (((v17 | v18) & 0x80000000) != 0 || ((unsigned int v27 = *v16, v17 < v27) ? (v28 = v18 >= v27) : (v28 = 1), v28))
  {
    uint64_t v479 = 0;
  }
  else
  {
    uint64_t v479 = (*(uint64_t (**)(void, unint64_t))(**((void **)v25 + 10) + 24))(*((void *)v25 + 10), *((void *)v25 + 11) + v17 + *v25 * (unint64_t)v18);
    unsigned int v17 = a2 - *((_DWORD *)v16 + 1);
    unsigned int v18 = v14 - *((_DWORD *)v16 + 2);
  }
  unint64_t v96 = 0;
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    unint64_t v97 = *v16;
    if (v17 >= v97 || v18 >= v97) {
      unint64_t v96 = 0;
    }
    else {
      unint64_t v96 = *((void *)v16 + 11) + 2 * ((v17 >> 3) + (v97 >> 3) * (unint64_t)(v18 >> 3));
    }
  }
  uint64_t v472 = v26;
  uint64_t v99 = *(void *)(v15 + 952);
  if (*(unsigned char *)(v99 + 578))
  {
    int v100 = *(_DWORD *)(v99 + 508);
    BOOL v102 = v13 == a8 && v100 != 0 && a8 < 17;
    int v103 = v102;
  }
  else
  {
    int v103 = 0;
  }
  if (*(unsigned char *)(v484 + 96)) {
    BOOL v104 = *(unsigned __int8 *)(*(void *)(v15 + 1880) + 2009) - a4 == *(unsigned __int8 *)(*(void *)(v15 + 1880)
  }
                                                                                             + 2008);
  else {
    BOOL v104 = 0;
  }
  sub_1BBA8F298(v15, a2, v14, v16, v13, a8, (uint64_t)v442);
  if (!*(unsigned char *)(v15 + 788))
  {
    uint64_t v107 = v442[60];
    v453 = (_WORD *)v96;
    char v449 = v104;
    if (!v103)
    {
      BOOL v118 = 0;
      int v119 = 0;
      uint64_t v113 = (uint64_t)v442;
      goto LABEL_119;
    }
    int v108 = *(unsigned __int8 *)(*(void *)(v15 + 1880) + 2009) - a4;
    char v109 = *(uint64_t **)(v15 + 8136);
    uint64_t v110 = *v109;
    uint64_t v111 = v109[22];
    uint64_t v112 = *(char *)(v111 + *v109 * (int)(a3 & 0xFFFFFFFC) + ((int)a2 >> 2));
    if (v108 == 3)
    {
      uint64_t v111 = v110 * (int)(((int)a3 >> 2) & 0xFFFFFFFE) + ((int)a2 >> 3);
      uint64_t v114 = v109 + 32;
      uint64_t v113 = (uint64_t)v442;
    }
    else
    {
      uint64_t v113 = (uint64_t)v442;
      if (v108 != 4)
      {
LABEL_110:
        if (v442[60])
        {
          uint64_t v120 = 0;
          unint64_t v121 = (_DWORD *)(v15 + 4932);
          while (*((unsigned __int8 *)v121 - 4) != v112 || v111 != *v121)
          {
            ++v120;
            v121 += 3;
            if (v107 == v120) {
              goto LABEL_115;
            }
          }
          *(_DWORD *)(v15 + 4 * a4 + 8088) &= ~1u;
        }
        else
        {
LABEL_115:
          LODWORD(v120) = -1;
        }
        BOOL v118 = (int)v120 >= 0;
        int v119 = v120 & ~((int)v120 >> 31);
        if ((int)v120 >= 0) {
          LODWORD(v107) = v120 + 1;
        }
LABEL_119:
        if (*(unsigned char *)(v15 + 192)
          && ((int)v13 < 8 || a8 <= 7)
          && *(unsigned __int8 *)(*(void *)(v15 + 1880) + 2009) - a4 == 3)
        {
          uint64_t v122 = *(unsigned __int8 *)(v113 + 60);
          if (*(unsigned char *)(v113 + 60))
          {
            unint64_t v123 = (unsigned __int8 *)v113;
            do
            {
              if (*v123 != 255 && v123[1] != 255)
              {
                v123[1] = -1;
                *((_DWORD *)v123 + 2) = 0;
              }
              v123 += 12;
              --v122;
            }
            while (v122);
          }
        }
        if (v119 >= (int)v107)
        {
          int v460 = 0;
          int v464 = -1;
          uint64_t v457 = -1;
          unint64_t v128 = -1;
        }
        else
        {
          int v460 = 0;
          BOOL v468 = (void *)(v15 + 1368);
          unsigned int v124 = a8;
          if (a8 >= (int)v13) {
            unsigned int v124 = v13;
          }
          uint64_t v125 = (uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t, uint64_t))(v15
                                                                                             + 8
                                                                                             * __clz(__rbit32(v124))
                                                                                             + 1072);
          uint64_t v126 = v24 + v119 - 4;
          uint64_t v127 = v15 + 12 * v119 + 4928;
          int v464 = -1;
          unint64_t v128 = -1;
          uint64_t v457 = -1;
          do
          {
            if (v118 || !sub_1BBA99114(v113, v119))
            {
              DWORD1(v500) = *(_DWORD *)(v127 + 4);
              LOBYTE(v500) = *(unsigned char *)v127;
              if ((char)v500 != -1)
              {
                uint64_t v129 = *(void *)(*(void *)(a1 + 1584) + 16 * (char)v500 + 3544);
                *(unsigned char *)(a1 + 1386) = v500;
                *(_DWORD *)(a1 + 1388) = *(_DWORD *)(v129 + 276);
                *(_DWORD *)(a1 + 1396) = *(_DWORD *)(v129 + 280);
              }
              if (*(unsigned char *)(a1 + 192))
              {
                DWORD2(v500) = *(_DWORD *)(v127 + 8);
                BYTE1(v500) = *(unsigned char *)(v127 + 1);
                if (SBYTE1(v500) != -1)
                {
                  uint64_t v130 = *(void *)(*(void *)(a1 + 1584) + 16 * SBYTE1(v500) + 3800);
                  *(unsigned char *)(a1 + 1387) = BYTE1(v500);
                  *(_DWORD *)(a1 + 1392) = *(_DWORD *)(v130 + 276);
                  *(_DWORD *)(a1 + 1400) = *(_DWORD *)(v130 + 280);
                }
                sub_1BBA54BE4(v468, (char *)&v500, a2, a3, v13, a8, v472, v479);
              }
              else
              {
                sub_1BBA52CA0((uint64_t)v468, (uint64_t)&v500, a2, a3, v13, a8, v472, v479, 0);
              }
              uint64_t v131 = 0;
              uint64_t v132 = a2 - *((_DWORD *)v16 + 1);
              uint64_t v133 = a7;
              if ((v132 & 0x80000000) == 0)
              {
                unsigned int v134 = a3 - *((_DWORD *)v16 + 2);
                if ((v134 & 0x80000000) == 0)
                {
                  uint64_t v131 = 0;
                  unsigned int v135 = *v16;
                  if (v132 < v135 && v134 < v135)
                  {
                    uint64_t v131 = (*(uint64_t (**)(void, unint64_t, void))(**((void **)v16 + 3) + 24))(*((void *)v16 + 3), v132 + v16[1] * (unint64_t)v134 + *((void *)v16 + 4), 0);
                    uint64_t v133 = a7;
                  }
                }
              }
              unsigned int v136 = (*v125)(v133, a8, v131, v16[1], v479, v472);
              if (v126) {
                int v137 = v119 + 1;
              }
              else {
                int v137 = v119;
              }
              uint64_t v13 = a7;
              uint64_t v113 = (uint64_t)v442;
              if (v137 * *(unsigned __int16 *)(a1 + 996) + (unint64_t)v136 < v128)
              {
                int v460 = v119;
                int v464 = v137;
                unint64_t v128 = v137 * *(unsigned __int16 *)(a1 + 996) + (unint64_t)v136;
                uint64_t v457 = v136;
              }
            }
            ++v119;
            ++v126;
            v127 += 12;
          }
          while (v107 != v119);
        }
        uint64_t v117 = v457;
        int v115 = v464 + 1;
        LOBYTE(v495) = 3;
        uint64_t v138 = (unsigned __int8 *)(v113 + 12 * v460);
        int v139 = v138[1];
        if (v139 == 255 || *v138 == 255) {
          char v141 = 0;
        }
        else {
          char v141 = 64;
        }
        LOBYTE(v494) = *v138;
        uint64_t v493 = *(void *)(v138 + 4);
        HIBYTE(v494) = v139;
        HIBYTE(v495) = v141 & 0xF1 | (2 * (v460 & 7)) | 1;
        uint64_t v15 = a1;
        uint64_t v142 = *(void *)(a1 + 952);
        if (!*(unsigned char *)(v142 + 56))
        {
          unint64_t v21 = v431;
          int v14 = a3;
          goto LABEL_171;
        }
        int v14 = a3;
        if ((*v453 & 0x70) == 0)
        {
          uint64_t v143 = a1 + 4 * a4;
          char v144 = v449;
          if ((*(_DWORD *)(v143 + 8088) & 0x100) == 0) {
            char v144 = 1;
          }
          if ((v144 & 1) == 0)
          {
            int v145 = *(unsigned __int8 *)(v142 + 606);
            unsigned int v146 = a2 - *((_DWORD *)v16 + 1);
            unsigned int v147 = a3 - *((_DWORD *)v16 + 2);
            if (!v145
              || v128 <= (unsigned __int16)a12344566777777[(*(__int16 *)(*((void *)v16 + 11)
                                                                       + 2
                                                                       * ((v146 >> 3)
                                                                        + ((unint64_t)*v16 >> 3) * (v147 >> 3))) >> 9)
                                                         + 12] << (*(unsigned char *)(*(void *)(a1 + 1880) + 2009) - a4))
            {
              uint64_t v415 = 0;
              if ((v146 & 0x80000000) != 0)
              {
                uint64_t v416 = v472;
              }
              else
              {
                uint64_t v416 = v472;
                if ((v147 & 0x80000000) == 0)
                {
                  uint64_t v415 = 0;
                  unsigned int v417 = *v16;
                  if (v146 < v417 && v147 < v417)
                  {
                    uint64_t v415 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v16 + 17)
                                                                                             + 96)
                                                                               + 24))(*(void *)(*((void *)v16 + 17) + 96), *(void *)(*((void *)v16 + 17) + 104)+ v146+ *(unsigned __int8 *)(*((void *)v16 + 17) + 1) * (unint64_t)(v147 & 0xFFFFFFFE));
                    int v14 = a3;
                  }
                }
              }
              sub_1BBAD03F0(*(void *)(a1 + 1872), (unsigned int *)&v493, a2, v14, a7, a7, v416, v479, 2 * *(unsigned __int8 *)(*((void *)v16 + 17) + 1), v415);
              sub_1BBAB4898(a1 + 1920, a1, a2, a3, a4, v16);
              if (!sub_1BBABECE8((void *)(a1 + 1920), a2, a3, 0, v16, *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) - a4))
              {
                uint64_t v13 = a7;
                unint64_t v21 = v431;
                uint64_t v15 = a1;
                int v14 = a3;
                uint64_t v117 = v457;
                goto LABEL_171;
              }
              uint64_t v116 = (_DWORD *)(v143 + 8088);
              LOBYTE(v495) = 2;
              HIBYTE(v495) = v141 | (2 * (v460 & 7));
              uint64_t v13 = a7;
              unint64_t v21 = v431;
              uint64_t v15 = a1;
              int v14 = a3;
              int v115 = v464;
              uint64_t v117 = v457;
              goto LABEL_106;
            }
          }
          uint64_t v13 = a7;
        }
        unint64_t v21 = v431;
        goto LABEL_171;
      }
      uint64_t v111 = v110 * ((uint64_t)(int)a3 >> 4) + ((int)a2 >> 4);
      uint64_t v114 = v109 + 24;
    }
    LODWORD(v111) = *(_DWORD *)(v114[v112] + 4 * v111);
    goto LABEL_110;
  }
  __int16 v495 = 2;
  int v105 = *v442;
  int v106 = v442[1];
  if (v105 == 255)
  {
    unint64_t v21 = v431;
  }
  else
  {
    unint64_t v21 = v431;
    if (v106 != 255 && ((int)v13 < 8 || a8 <= 7) && *(unsigned __int8 *)(*(void *)(v15 + 1880) + 2009) - a4 == 3)
    {
      LOBYTE(v106) = -1;
      v442[1] = -1;
      *(_DWORD *)(v15 + 4936) = 0;
    }
  }
  int v115 = 0;
  LOBYTE(v494) = v105;
  uint64_t v493 = *(void *)(v442 + 4);
  HIBYTE(v494) = v106;
  uint64_t v116 = (_DWORD *)(v15 + 4 * a4 + 8088);
  uint64_t v117 = 0;
LABEL_106:
  *uint64_t v116 = 0;
LABEL_171:
  int v423 = v115;
  uint64_t v422 = v117;
  uint64_t v95 = v117 + v115 * *(unsigned __int16 *)(v15 + 996);
LABEL_172:
  unint64_t v421 = v95;
  if (!a13)
  {
    uint64_t v155 = 0;
    long long v492 = *((_OWORD *)(*a6)[12]
           + ((a2 - *((_DWORD *)*a6 + 1)) >> 2)
           + ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * ((v14 - *((_DWORD *)*a6 + 2)) >> 2));
    int v156 = v14;
    unint64_t v157 = *a5;
    uint64_t v158 = (unsigned __int8 *)*((void *)*a5 + 17);
    uint64_t v488 = *v158;
    unsigned int v159 = a2 - *((_DWORD *)*a5 + 1);
    if ((v159 & 0x80000000) == 0)
    {
      unsigned int v160 = v156 - *((_DWORD *)v157 + 2);
      if ((v160 & 0x80000000) == 0)
      {
        unsigned int v161 = *v157;
        if (v159 >= v161 || v160 >= v161)
        {
          uint64_t v155 = 0;
        }
        else
        {
          uint64_t v155 = (*(uint64_t (**)(void, unint64_t))(**((void **)v158 + 10) + 24))(*((void *)v158 + 10), *((void *)v158 + 11) + v159 + *v158 * (unint64_t)v160);
          uint64_t v13 = a7;
        }
      }
    }
    uint64_t v165 = *(void *)(v15 + 1872);
    int v480 = *(char *)(v165 + 500);
    int v485 = *(char *)(v165 + 501);
    int v166 = SBYTE8(v492);
    int v167 = BYTE8(v492);
    int v168 = SBYTE8(v492);
    int v169 = SBYTE9(v492);
    LOBYTE(v500) = BYTE8(v492);
    if (SBYTE8(v492) != -1)
    {
      sub_1BBA8EEF8(v15, a2, a3, v157, 0, SBYTE8(v492), v13, a8, (__int32 *)(v15 + 52 * SBYTE8(v492) + 4992));
      DWORD1(v500) = v492;
      int v168 = SBYTE8(v492);
      uint64_t v170 = *(void *)(*(void *)(v15 + 1584) + 16 * SBYTE8(v492) + 3544);
      *(unsigned char *)(v15 + 1386) = BYTE8(v492);
      *(_DWORD *)(v15 + 1388) = *(_DWORD *)(v170 + 276);
      *(_DWORD *)(v15 + 1396) = *(_DWORD *)(v170 + 280);
      uint64_t v13 = a7;
    }
    int v473 = v168;
    int v171 = v169;
    BYTE1(v500) = v169;
    if (v169 != 255)
    {
      uint64_t v172 = (__int32 *)(v15 + 52 * v169 + 5200);
      sub_1BBA8EEF8(v15, a2, a3, v157, 1u, v169, v13, a8, v172);
      BOOL v173 = v167 == 255;
      if (!*(unsigned char *)(*(void *)(v15 + 1872) + 536)) {
        BOOL v173 = 1;
      }
      if (v173)
      {
        __int32 v174 = DWORD1(v492);
      }
      else
      {
        __int32 v174 = v172[((unint64_t)BYTE11(v492) >> 5) & 1];
        DWORD1(v492) = v174;
      }
      uint64_t v13 = a7;
      DWORD2(v500) = v174;
      uint64_t v15 = a1;
      int v171 = v169;
      uint64_t v175 = *(void *)(*(void *)(a1 + 1584) + 16 * v169 + 3800);
      *(unsigned char *)(a1 + 1387) = v169;
      *(_DWORD *)(a1 + 1392) = *(_DWORD *)(v175 + 276);
      *(_DWORD *)(a1 + 1400) = *(_DWORD *)(v175 + 280);
    }
    int v469 = v171;
    int v502 = 0;
    long long v501 = xmmword_1BBB6F8F0;
    __int16 v503 = 2;
    sub_1BBA54BE4((void *)(v15 + 1368), (char *)&v500, a2, a3, v13, a8, v488, v155);
    uint64_t v176 = a2 - *((_DWORD *)v157 + 1);
    if ((v176 & 0x80000000) == 0)
    {
      unsigned int v177 = a3 - *((_DWORD *)v157 + 2);
      signed int v178 = a7;
      if ((v177 & 0x80000000) != 0 || (unsigned int v179 = *v157, v176 >= v179) || v177 >= v179)
      {
LABEL_205:
        if (a8 >= v178) {
          unsigned int v180 = v178;
        }
        else {
          unsigned int v180 = a8;
        }
        unsigned int v181 = (*(uint64_t (**)(void))(a1 + 8 * __clz(__rbit32(v180)) + 1072))();
        *(void *)&long long v501 = v501 + v181;
        if ((BYTE11(v492) & 0x40) != 0) {
          int v182 = 2;
        }
        else {
          int v182 = 3;
        }
        if (*(unsigned char *)(a1 + 192)) {
          int v183 = v182;
        }
        else {
          int v183 = 1;
        }
        int v163 = v502 + v183;
        v502 += v183;
        if (v167 != 255)
        {
          BYTE11(v492) = (16 * (sub_1BBA54764(a1 + 52 * v473 + 4992, (uint64_t)&v500, 0) & 1)) | BYTE11(v492) & 0xEF;
          if (v480 - 1 == v166) {
            int v184 = v166;
          }
          else {
            int v184 = v166 + 1;
          }
          int v163 = v184 + v502;
          v502 += v184;
        }
        LODWORD(v13) = a7;
        if (v169 == 255)
        {
          unint64_t v21 = v431;
          uint64_t v185 = a1;
        }
        else
        {
          uint64_t v185 = a1;
          if (v167 == 255 || !*(unsigned char *)(*(void *)(a1 + 1872) + 536))
          {
            BYTE11(v492) = (32 * (sub_1BBA54764(a1 + 52 * v469 + 5200, (uint64_t)&v500, 1u) & 1)) | BYTE11(v492) & 0xDF;
            int v163 = v502;
          }
          if (v485 - 1 == v169) {
            int v186 = v169;
          }
          else {
            int v186 = v169 + 1;
          }
          v163 += v186;
          unint64_t v21 = v431;
        }
        *((void *)&v501 + 1) = v501
                               + ((v163 * *(unsigned __int16 *)(v185 + 2 * v503 + 992)) >> (8 * (v503 == 0)));
        long long v164 = v501;
        goto LABEL_229;
      }
      (*(void (**)(void, unint64_t, void))(**((void **)v157 + 3) + 24))(*((void *)v157 + 3), v176 + v157[1] * (unint64_t)v177 + *((void *)v157 + 4), 0);
    }
    signed int v178 = a7;
    goto LABEL_205;
  }
  uint64_t v148 = *a5;
  uint64_t v149 = a2 - *((_DWORD *)*a5 + 1);
  unsigned int v150 = v14 - *((_DWORD *)*a5 + 2);
  if (((*(_DWORD *)(v15 + 4 * a4 + 8088) >> ((*(unsigned __int16 *)(*((void *)v148 + 11)
                                                                     + 2
                                                                     * ((v149 >> 3)
                                                                      + ((unint64_t)*v148 >> 3) * (v150 >> 3))) >> 4) & 7)) & 1) != 0)
  {
    uint64_t v151 = *(void *)(v15 + 1872);
    uint64_t v152 = *(void *)(v15 + 952);
    if (*(unsigned char *)(v15 + 192)) {
      BOOL v154 = (int)v13 > 7 && a8 > 7;
    }
    else {
      BOOL v154 = 0;
    }
    BOOL v445 = v154;
    if (*(_DWORD *)(v152 + 508))
    {
      if (*(unsigned char *)(v152 + 573)) {
        char v187 = v425;
      }
      else {
        char v187 = 0;
      }
    }
    else
    {
      char v187 = 0;
    }
    int v188 = *(unsigned __int8 *)(*(void *)(v151 + 1368) + 2009);
    int v454 = *(unsigned __int8 *)(v152 + 260);
    int v440 = *(unsigned __int8 *)(v151 + 79160);
    int v461 = *(unsigned __int8 *)(v151 + 536);
    int v189 = *(char *)(v151 + 500);
    int v190 = *(char *)(v151 + 501);
    uint64_t v450 = **((unsigned __int8 **)v148 + 17);
    uint64_t v430 = v148[1];
    uint64_t v426 = *a5;
    uint64_t v429 = (*(uint64_t (**)(void, uint64_t))(**((void **)v148 + 3) + 24))(*((void *)v148 + 3), v149 + v430 * v150 + *((void *)v148 + 4));
    uint64_t v458 = 0;
    uint64_t v191 = v426;
    uint64_t v192 = a2;
    unsigned int v193 = a2 - *((_DWORD *)v426 + 1);
    if ((v193 & 0x80000000) != 0)
    {
      uint64_t v196 = a7;
      uint64_t v197 = a1;
      uint64_t v194 = a3;
    }
    else
    {
      uint64_t v194 = a3;
      unsigned int v195 = a3 - *((_DWORD *)v426 + 2);
      uint64_t v196 = a7;
      uint64_t v197 = a1;
      if ((v195 & 0x80000000) == 0)
      {
        uint64_t v458 = 0;
        unsigned int v198 = *v426;
        if (v193 < v198 && v195 < v198)
        {
          uint64_t v458 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v426 + 17) + 80)
                                                                     + 24))(*(void *)(*((void *)v426 + 17) + 80), *(void *)(*((void *)v426 + 17) + 88)+ v193+ **((unsigned __int8 **)v426 + 17) * (unint64_t)v195);
          uint64_t v196 = a7;
          uint64_t v194 = a3;
          uint64_t v192 = a2;
          uint64_t v191 = v426;
        }
      }
    }
    uint64_t v199 = v197 + 7512;
    int v470 = v188 - a4;
    int v200 = *(unsigned char *)(v197 + 192) != 0;
    if (!v461 && *(unsigned char *)(v197 + 192)) {
      int v200 = *(char *)(*(void *)(*(void *)(v197 + 1872) + 79088) + 258);
    }
    *(_WORD *)uint64_t v199 = -1;
    *(_DWORD *)(v197 + 7544) = 0;
    uint64_t v437 = v190;
    *(_WORD *)(v197 + 7524) = 0;
    *(void *)(v197 + 7516) = 0;
    *(_OWORD *)(v197 + 7528) = xmmword_1BBB6F8F0;
    *(_WORD *)(v197 + 7552) = -1;
    uint64_t v465 = v197 + 7552;
    *(_WORD *)(v197 + 7548) = 2;
    *(_DWORD *)(v197 + 7584) = 0;
    *(_WORD *)(v197 + 7564) = 0;
    *(void *)(v197 + 7556) = 0;
    *(_OWORD *)(v197 + 7568) = xmmword_1BBB6F8F0;
    *(_WORD *)(v197 + 7588) = 2;
    *(_WORD *)(v197 + 7592) = -1;
    uint64_t v436 = v197 + 7592;
    *(_DWORD *)(v197 + 7624) = 0;
    *(_WORD *)(v197 + 7604) = 0;
    *(void *)(v197 + 7596) = 0;
    uint64_t v201 = -160;
    *(_OWORD *)(v197 + 7608) = xmmword_1BBB6F8F0;
    uint64_t v202 = 7796;
    uint64_t v203 = 7632;
    uint64_t v204 = 7636;
    *(_WORD *)(v197 + 7628) = 2;
    do
    {
      uint64_t v205 = (_WORD *)(v197 + v203);
      *uint64_t v205 = -1;
      uint64_t v206 = v197 + v204;
      uint64_t v207 = v197 + v201;
      *(_DWORD *)(v207 + 7824) = 0;
      *(_WORD *)(v206 + 8) = 0;
      *(void *)uint64_t v206 = 0;
      *(_OWORD *)(v207 + 7808) = xmmword_1BBB6F8F0;
      *(_WORD *)(v207 + 7828) = 2;
      v205[80] = -1;
      uint64_t v208 = v197 + v202;
      *(_DWORD *)(v207 + 7984) = 0;
      *(_WORD *)(v208 + 8) = 0;
      *(void *)uint64_t v208 = 0;
      v202 += 40;
      *(_OWORD *)(v207 + 7968) = xmmword_1BBB6F8F0;
      v203 += 40;
      v204 += 40;
      *(_WORD *)(v207 + 7988) = 2;
      v201 += 40;
    }
    while (v201);
    int v424 = v200;
    uint64_t v209 = 0;
    uint64_t v210 = (v192 - *((_DWORD *)v191 + 1));
    uint64_t v435 = v197 + 7512;
    if ((v210 & 0x80000000) == 0)
    {
      unsigned int v211 = v194 - *((_DWORD *)v191 + 2);
      if ((v211 & 0x80000000) == 0)
      {
        uint64_t v209 = 0;
        unsigned int v212 = *v191;
        if (v210 < v212 && v211 < v212)
        {
          uint64_t v209 = (*(uint64_t (**)(void, unint64_t))(**((void **)v191 + 3) + 24))(*((void *)v191 + 3), v210 + v191[1] * (unint64_t)v211 + *((void *)v191 + 4));
          uint64_t v196 = a7;
          uint64_t v194 = a3;
          uint64_t v192 = a2;
          uint64_t v191 = v426;
          uint64_t v199 = v197 + 7512;
        }
      }
    }
    *(void *)(v197 + 1520) = v209;
    *(void *)(v197 + 1528) = v430;
    int v213 = *(_DWORD *)(v197 + 200);
    if (v213 < 1)
    {
      sub_1BBA8EFD8(v197, v192, v194, v191, v196, a8, (unint64_t *)(v197 + 8008), (unint64_t *)(v197 + 8024));
      goto LABEL_318;
    }
    uint64_t v214 = *(void *)(v197 + 1880);
    int v215 = 1 << (*(unsigned char *)(v214 + 2008) - 1);
    int v216 = v196 + v192;
    int v217 = a8 + v194;
    int v218 = a8 + v194 - 1;
    int v219 = *((_DWORD *)v191 + 1);
    int v220 = v192 - v219;
    if (v192 == v219)
    {
      int v221 = *((_DWORD *)v191 + 2);
      *(void *)(v197 + 7968) = *((void *)v191 + 15) + 16 * ((v217 - v221) >> 2);
      uint64_t v222 = *((void *)v191 + 15) + 16 * ((v218 - v221) >> 2);
    }
    else
    {
      unint64_t v223 = 0;
      if ((word_1BBBA39F0[(((*(unsigned __int8 *)(v214 + 2013) - 1) & v218) - *(unsigned __int8 *)(v214 + 2013) + 64) >> 2] >> ((int)((*(unsigned __int8 *)(v214 + 2013) - 1) & v192) >> 2)))
      {
        unsigned int v224 = ~v219 + v192;
        int v221 = *((_DWORD *)v191 + 2);
        if ((v224 & 0x80000000) == 0)
        {
          unsigned int v225 = v217 - v221;
          if (((v217 - v221) & 0x80000000) == 0)
          {
            unint64_t v223 = 0;
            unint64_t v226 = *v191;
            if (v224 < v226 && v225 < v226) {
              unint64_t v223 = *((void *)v191 + 12)
            }
                   + 16 * ((v224 >> 2) + (v226 >> 2) * (unint64_t)(v225 >> 2));
          }
        }
      }
      else
      {
        int v221 = *((_DWORD *)v191 + 2);
        unsigned int v224 = ~v219 + v192;
      }
      uint64_t v222 = 0;
      *(void *)(v197 + 7968) = v223;
      if ((v224 & 0x80000000) == 0)
      {
        unsigned int v227 = v218 - v221;
        if (((v218 - v221) & 0x80000000) == 0)
        {
          uint64_t v222 = 0;
          unint64_t v228 = *v191;
          if (v224 < v228 && v227 < v228) {
            uint64_t v222 = *((void *)v191 + 12)
          }
                 + 16 * ((v224 >> 2) + (v228 >> 2) * (unint64_t)(v227 >> 2));
        }
      }
    }
    int v229 = v216 - v215;
    *(void *)(v197 + 7976) = v222;
    if (v221 == v194)
    {
      *(void *)(v197 + 7984) = *((void *)v191 + 16) + 16 * ((v216 - v219) >> 2);
      *(void *)(v197 + 7992) = *((void *)v191 + 16) + 16 * ((v229 - v219) >> 2);
      uint64_t v230 = *((void *)v191 + 16);
      int v231 = (v220 >> 2) - 1;
    }
    else
    {
      if (((word_1BBB82EEA[(int)((*(unsigned __int8 *)(v214 + 2013) - 1) & v194) >> 2] >> ((((*(unsigned __int8 *)(v214 + 2013)
                                                                                             - 1) & (v216 - 1))
                                                                                           - *(unsigned __int8 *)(v214 + 2013)
                                                                                           + 64) >> 2)) & 1) != 0)
      {
        unsigned int v232 = v216 - v219;
        unsigned int v233 = ~v221 + v194;
        unint64_t v234 = 0;
        if (((v233 | (v216 - v219)) & 0x80000000) == 0)
        {
          unint64_t v235 = *v191;
          if (v232 < v235 && v233 < v235) {
            unint64_t v234 = *((void *)v191 + 12)
          }
                 + 16 * ((v232 >> 2) + (v235 >> 2) * (unint64_t)(v233 >> 2));
        }
      }
      else
      {
        unint64_t v234 = 0;
        unsigned int v233 = ~v221 + v194;
      }
      *(void *)(v197 + 7984) = v234;
      unsigned int v236 = v229 - v219;
      if (((v233 | (v229 - v219)) & 0x80000000) != 0)
      {
        unint64_t v237 = 0;
      }
      else
      {
        unint64_t v237 = 0;
        unint64_t v238 = *v191;
        if (v236 < v238 && v233 < v238) {
          unint64_t v237 = *((void *)v191 + 12) + 16 * ((v236 >> 2) + (v238 >> 2) * (unint64_t)(v233 >> 2));
        }
      }
      *(void *)(v197 + 7992) = v237;
      if (v192 != v219)
      {
        unsigned int v246 = v192 - v219 - v215;
        if (((v233 | v246) & 0x80000000) != 0)
        {
          unint64_t v239 = 0;
        }
        else
        {
          unint64_t v239 = 0;
          unint64_t v247 = *v191;
          if (v246 < v247 && v233 < v247) {
            unint64_t v239 = *((void *)v191 + 12)
          }
                 + 16 * ((v246 >> 2) + (v247 >> 2) * (unint64_t)(v233 >> 2));
        }
        goto LABEL_285;
      }
      uint64_t v230 = *((void *)v191 + 15);
      int v231 = (int)v233 >> 2;
    }
    unint64_t v239 = v230 + 16 * v231;
LABEL_285:
    *(void *)(v197 + 8000) = v239;
    if (v213 == 2)
    {
      uint64_t v240 = 0;
      int v241 = *(unsigned __int8 *)(v214 + 2013);
      int v242 = v194 - 1;
      int v243 = v241 - 1;
      int v244 = v192 - 1;
      if (((word_1BBBA39F0[((v243 & ((int)v194 - 1 + a8)) - v241 + 64) >> 2] >> ((int)(v243 & v192) >> 2)) & 1) != 0
        && ((v217 | v244) & 0x80000000) == 0)
      {
        uint64_t v245 = *(void *)(*(void *)(v197 + 1872) + 1360);
        if (*(_DWORD *)(v245 + 276) < (int)v192 || *(_DWORD *)(v245 + 280) <= v217) {
          uint64_t v240 = 0;
        }
        else {
          uint64_t v240 = *(void *)(v245 + 592) + 4 * (*(void *)(v245 + 552) * ((uint64_t)v217 >> 2) + (v244 >> 2));
        }
      }
      *(void *)(v197 + 8048) = v240;
      if ((v218 | v244) < 0
        || (uint64_t v248 = *(void *)(*(void *)(v197 + 1872) + 1360), *(_DWORD *)(v248 + 276) < (int)v192)
        || *(_DWORD *)(v248 + 280) < v217)
      {
        uint64_t v249 = 0;
      }
      else
      {
        uint64_t v249 = *(void *)(v248 + 592) + 4 * (*(void *)(v248 + 552) * ((uint64_t)v218 >> 2) + (v244 >> 2));
      }
      uint64_t v250 = 0;
      *(void *)(v197 + 8056) = v249;
      if (((word_1BBB82EEA[(int)(v243 & v194) >> 2] >> (((v243 & (v244 + (int)v196)) - v241 + 64) >> 2)) & 1) != 0
        && ((v216 | v242) & 0x80000000) == 0)
      {
        uint64_t v251 = *(void *)(*(void *)(v197 + 1872) + 1360);
        if (*(_DWORD *)(v251 + 276) <= v216 || *(_DWORD *)(v251 + 280) <= v242) {
          uint64_t v250 = 0;
        }
        else {
          uint64_t v250 = *(void *)(v251 + 592) + 4 * (*(void *)(v251 + 552) * ((uint64_t)v242 >> 2) + (v216 >> 2));
        }
      }
      int v252 = v192 - v215;
      *(void *)(v197 + 8064) = v250;
      if ((v229 | v242) < 0
        || (uint64_t v253 = *(void *)(*(void *)(v197 + 1872) + 1360), *(_DWORD *)(v253 + 276) <= v229)
        || *(_DWORD *)(v253 + 280) <= v242)
      {
        uint64_t v254 = 0;
      }
      else
      {
        uint64_t v254 = *(void *)(v253 + 592) + 4 * (*(void *)(v253 + 552) * ((uint64_t)v242 >> 2) + (v229 >> 2));
      }
      *(void *)(v197 + 8072) = v254;
      if ((v252 | v242) < 0
        || (uint64_t v255 = *(void *)(*(void *)(v197 + 1872) + 1360), *(_DWORD *)(v255 + 276) <= v252)
        || *(_DWORD *)(v255 + 280) <= v242)
      {
        uint64_t v256 = 0;
      }
      else
      {
        uint64_t v256 = *(void *)(v255 + 592) + 4 * (*(void *)(v255 + 552) * ((uint64_t)v242 >> 2) + (v252 >> 2));
      }
      *(void *)(v197 + 8080) = v256;
    }
    *(_OWORD *)(v199 + 496) = *(_OWORD *)(v197 + 7968);
    *(_OWORD *)uint64_t v484 = *(_OWORD *)(v197 + 7984);
    *(void *)(v197 + 8040) = v239;
LABEL_318:
    *(void *)(v197 + 7952) = 0;
    uint64_t v257 = *(void *)(v197 + 1872);
    *(_DWORD *)(v197 + 7960) = *(char *)(v257 + 500);
    *(_DWORD *)(v197 + 7964) = *(char *)(v257 + 500);
    if (v187)
    {
      uint64_t v258 = *(void *)(v257 + 79216);
      if (*(void *)(v258 + 400) && (unsigned int v259 = *(uint64_t **)(v258 + 392), v259[1]))
      {
        int v260 = v189;
        uint64_t v261 = *v259;
      }
      else
      {
        int v260 = v189;
        uint64_t v261 = 0;
      }
      *(void *)(v197 + 8136) = v261;
      if (v470 >= 5)
      {
        int v434 = v190;
        char v262 = *(unsigned char *)(*(void *)(v197 + 952) + 588);
        int v263 = *(unsigned char *)(v197 + 192) ? 3 : 1;
        int v481 = v263;
        uint64_t v264 = *(char **)(v197 + 1376);
        uint64_t v265 = v197 + 5460;
        bzero((void *)(v197 + 5460), 0x804uLL);
        if (a8 <= 0)
        {
          unint64_t v278 = 0;
          uint64_t v285 = v197;
          unsigned int v284 = 0;
          unint64_t v282 = 0;
          uint64_t v474 = (unsigned int *)(v285 + 7508);
          *(void *)&long long v500 = sub_1BBAA56A4;
          __int16 v279 = (uint64_t *)v265;
        }
        else
        {
          unsigned int v266 = 0;
          int v267 = 0;
          do
          {
            if ((int)v196 >= 1)
            {
              int v268 = 0;
              do
              {
                uint64_t v269 = *(void **)(v197 + 8136);
                uint64_t v270 = *v269 * (int)((v267 + v194) & 0xFFFFFFFC) + ((v268 + (int)v192) >> 2);
                int v271 = *(_DWORD *)(v269[20] + 4 * v270);
                int v272 = *(unsigned __int8 *)(v269[22] + v270);
                if (v266)
                {
                  uint64_t v273 = 0;
                  uint64_t v274 = v266;
                  unsigned int v275 = v442 + 538;
                  while (v271 != *(_DWORD *)(v275 - 6) || v272 != *v275)
                  {
                    ++v273;
                    v275 += 8;
                    if (v266 == v273) {
                      goto LABEL_339;
                    }
                  }
                  ++*(_WORD *)(v265 + 8 * v273 + 4);
                }
                else
                {
                  uint64_t v274 = 0;
LABEL_339:
                  *(_DWORD *)(v265 + 8 * v274) = v271;
                  uint64_t v276 = *(unsigned int *)(v197 + 7508);
                  uint64_t v277 = v265 + 8 * v276;
                  *(unsigned char *)(v277 + 6) = v272;
                  ++*(_WORD *)(v277 + 4);
                  unsigned int v266 = v276 + 1;
                  *(_DWORD *)(v197 + 7508) = v266;
                }
                v268 += 4;
              }
              while (v268 < (int)v196);
            }
            v267 += 4;
          }
          while (v267 < a8);
          uint64_t v474 = (unsigned int *)(v197 + 7508);
          unint64_t v278 = v266;
          __int16 v279 = (uint64_t *)(v265 + 8 * v266);
          *(void *)&long long v500 = sub_1BBAA56A4;
          if (v266 < 0x81)
          {
            unsigned int v284 = 0;
            unint64_t v282 = 0;
          }
          else
          {
            int v428 = (uint64_t *)(v265 + 8 * v266);
            char v433 = v262;
            char v280 = v187;
            uint64_t v281 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
            unint64_t v432 = v266;
            unint64_t v282 = v266;
            while (1)
            {
              unsigned int v283 = (uint64_t *)operator new(8 * v282, v281);
              if (v283) {
                break;
              }
              BOOL v102 = v282 > 1;
              v282 >>= 1;
              if (!v102)
              {
                unsigned int v284 = 0;
                unint64_t v282 = 0;
                goto LABEL_353;
              }
            }
            unsigned int v284 = v283;
LABEL_353:
            uint64_t v194 = a3;
            uint64_t v192 = a2;
            char v187 = v280;
            char v262 = v433;
            unint64_t v278 = v432;
            __int16 v279 = v428;
          }
        }
        sub_1BBAA4D08(v265, v279, (uint64_t (**)(uint64_t *, uint64_t *))&v500, v278, v284, v282);
        if (v284) {
          operator delete(v284);
        }
        unsigned int v286 = a8;
        if (a8 >= (int)v196) {
          unsigned int v286 = v196;
        }
        uint64_t v197 = a1;
        BOOL v20 = *(_DWORD *)(a1 + 7508) - 1 >= v262;
        int v190 = v434;
        if (!v20)
        {
          unint64_t v287 = 0;
          v446 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1
                                                                                               + 8
                                                                                               * __clz(__rbit32(v286))
                                                                                               + 1072);
          *(_DWORD *)(a1 + 7544) = 0;
          *(_OWORD *)(v435 + 16) = xmmword_1BBB6F8F0;
          *(_WORD *)(a1 + 7548) = 2;
          uint64_t v288 = (char *)(v442 + 538);
          do
          {
            *((_DWORD *)v264 + 8) = 0;
            *((_OWORD *)v264 + 1) = xmmword_1BBB6F8F0;
            *((_WORD *)v264 + 18) = 2;
            uint64_t v289 = *v288;
            *((_DWORD *)v264 + 1) = *(_DWORD *)(v288 - 6);
            uint64_t v290 = *(void *)(*(void *)(a1 + 1584) + 16 * v289 + 3544);
            *(unsigned char *)(a1 + 1386) = v289;
            *(_DWORD *)(a1 + 1388) = *(_DWORD *)(v290 + 276);
            *(_DWORD *)(a1 + 1396) = *(_DWORD *)(v290 + 280);
            **(unsigned char **)(a1 + 1376) = v289;
            **(unsigned char **)(a1 + 1368) = v289;
            *(unsigned char *)(*(void *)(a1 + 1376) + 1) = -1;
            *(unsigned char *)(*(void *)(a1 + 1368) + 1) = -1;
            int v291 = (__int32 *)(a1 + 4992 + 52 * (int)v289);
            sub_1BBA180C8(*(void *)(a1 + 1872), a2, a3, 0, v289, a7, a8, v291, (void *)(a1 + 8008), a1 + 8024);
            v264[12] = sub_1BBA54764((uint64_t)v291, (uint64_t)v264, 0);
            sub_1BBA54BE4((void *)(a1 + 1368), v264, a2, a3, a7, a8, v450, v458);
            unsigned int v292 = v446(a7, a8, v429, v430, v458, v450);
            *((void *)v264 + 2) = v292;
            int v295 = *v264;
            int v296 = v481 + v295 + *((_DWORD *)v264 + 8);
            if (v260 - 1 != v295) {
              ++v296;
            }
            *((_DWORD *)v264 + 8) = v296;
            unint64_t v297 = ((v296 * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)v264 + 18) + 992)) >> (8 * (*((_WORD *)v264 + 18) == 0)))
                 + (unint64_t)v292;
            *((void *)v264 + 3) = v297;
            if (v297 < *(void *)(a1 + 7536))
            {
              *(unsigned char *)uint64_t v435 = v295;
              *(_DWORD *)(a1 + 7516) = *((_DWORD *)v264 + 1);
              *(unsigned char *)(v435 + 12) = v264[12];
              *(_DWORD *)(a1 + 7544) = *((_DWORD *)v264 + 8);
              *(_OWORD *)(v435 + 16) = *((_OWORD *)v264 + 1);
            }
            v288 += 8;
            ++v287;
          }
          while (v287 < *v474);
          BOOL v298 = 0;
          uint64_t v13 = a7;
          goto LABEL_427;
        }
      }
    }
    else
    {
      int v260 = v189;
      *(void *)(v197 + 8136) = 0;
    }
    sub_1BBAA4000(v197, v192, v194, v470, v196, a8, 0, v260, v187, v450, v458);
    if (*(unsigned char *)(v197 + 192))
    {
      uint64_t v293 = a3;
      if (v454 && v440)
      {
        int v482 = (_DWORD *)(v197 + 7964);
        char v299 = v187 ^ 1;
        if (v190 < 2) {
          char v299 = 1;
        }
        if ((v299 & 1) == 0) {
          sub_1BBAA4BB8(v197, a2, a3, v470, a7, a8, (_DWORD *)(v197 + 7956), v482);
        }
        uint64_t v300 = *(int *)(v197 + 7956);
        if ((int)v300 < *(_DWORD *)(v197 + 7964))
        {
          uint64_t v301 = 40 * v300;
          uint64_t v302 = 52 * (int)v300 + 5200;
          uint64_t v303 = 40 * v300 + 7805;
          uint64_t v304 = 40 * v300 + 7792;
          uint64_t v305 = 40 * v300 + 7793;
          do
          {
            sub_1BBA180C8(*(void *)(a1 + 1872), a2, a3, 1u, v300, a7, a8, (__int32 *)(a1 + v302), (void *)(a1 + 8008), a1 + 8024);
            uint64_t v306 = a1 + v301;
            *(unsigned char *)(a1 + v305) = v300;
            *(_DWORD *)(a1 + v301 + 7800) = *(_DWORD *)(a1 + v301 + 7636);
            *(unsigned char *)(a1 + v303) = sub_1BBA54764(a1 + v302, a1 + v304, 1u);
            uint64_t v307 = *(void *)(a1 + v301 + 7648);
            *(void *)(a1 + v301 + 7808) = v307;
            int v308 = *(_DWORD *)(a1 + v301 + 7824);
            if (v437 - 1 != v300) {
              ++v308;
            }
            int v309 = v300 + v308;
            *(_DWORD *)(v306 + 7824) = v309;
            unint64_t v310 = v307
                 + ((v309 * *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(v306 + 7828) + 992)) >> (8 * (*(_WORD *)(v306 + 7828) == 0)));
            *(void *)(v306 + 7816) = v310;
            if (v310 < *(void *)(a1 + 7576))
            {
              long long v311 = *(_OWORD *)(v306 + 7792);
              long long v312 = *(_OWORD *)(v306 + 7808);
              *(void *)(v465 + 32) = *(void *)(v306 + 7824);
              *(_OWORD *)uint64_t v465 = v311;
              *(_OWORD *)(v465 + 16) = v312;
            }
            ++v300;
            v301 += 40;
            v302 += 52;
            v303 += 40;
            v304 += 40;
            v305 += 40;
          }
          while (v300 < (int)*v482);
        }
        uint64_t v197 = a1;
        int v313 = *(_DWORD *)(a1 + 7584);
        if (*(unsigned char *)(a1 + 192)) {
          int v314 = v313 + 3;
        }
        else {
          int v314 = v313 + 1;
        }
        *(_DWORD *)(a1 + 7584) = v314;
        unint64_t v315 = *(void *)(a1 + 7568)
             + ((v314 * *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(a1 + 7588) + 992)) >> (8 * (*(_WORD *)(a1 + 7588) == 0)));
        *(void *)(a1 + 7576) = v315;
      }
      else
      {
        sub_1BBAA4000(v197, a2, a3, v470, a7, a8, 1u, v190, v187, v450, v458);
        unint64_t v315 = *(void *)(v197 + 7576);
      }
      BOOL v298 = v315 < *(void *)(v197 + 7536);
    }
    else
    {
      BOOL v298 = 0;
    }
    uint64_t v13 = a7;
    uint64_t v316 = v435;
    int v317 = v424;
    if (v445)
    {
      if (v454 && v424)
      {
        uint64_t v294 = a3;
        uint64_t v293 = a2;
        if (!*(unsigned char *)(v197 + a4 + 193)
          || (2 * *(_DWORD *)(v197 + 40 * v298 + 7544) - 4) * *(unsigned __int16 *)(v197 + 996)
           + 9 * *(void *)(v197 + 40 * v298 + 7528) / 0xAuLL >= *(void *)(v197 + 40 * v298 + 7536))
        {
          goto LABEL_427;
        }
      }
      else
      {
        uint64_t v294 = a3;
        uint64_t v293 = a2;
        if (!v424) {
          goto LABEL_427;
        }
      }
      *(unsigned char *)(v435 + 80) = *(unsigned char *)v435;
      *(_DWORD *)(v197 + 7596) = *(_DWORD *)(v197 + 7516);
      *(unsigned char *)(v435 + 92) = *(unsigned char *)(v435 + 12);
      *(unsigned char *)(v435 + 81) = *(unsigned char *)(v435 + 41);
      *(_DWORD *)(v197 + 7600) = *(_DWORD *)(v197 + 7560);
      *(unsigned char *)(v435 + 93) = *(unsigned char *)(v435 + 53);
      int v318 = *(_DWORD *)(v197 + 7584);
      *(_DWORD *)(v197 + 7624) = v318;
      *(_OWORD *)(v435 + 96) = *(_OWORD *)(v197 + 7568);
      uint64_t v319 = *(void *)(v197 + 1872);
      int v320 = *(char *)(v319 + 501);
      LODWORD(v500) = *(char *)(v319 + 500);
      DWORD1(v500) = v320;
      int v455 = *(unsigned __int8 *)(*(void *)(v197 + 952) + 260);
      uint64_t v321 = *(int *)(v197 + 7956);
      v499[0] = *(_DWORD *)(v197 + 7952);
      v499[1] = v321;
      int v322 = *(_DWORD *)(v197 + 7964);
      v498[0] = *(_DWORD *)(v197 + 7960);
      v498[1] = v322;
      v323 = (uint64_t *)(v197 + 1368);
      uint64_t v324 = *(void *)(v197 + 1368);
      if (*(unsigned char *)(v197 + 192)) {
        int v325 = 3;
      }
      else {
        int v325 = 1;
      }
      int v496 = *(_DWORD *)(v197 + 7544) - v325;
      int v497 = v318 - v325;
      *(_DWORD *)(v197 + 7624) = 0;
      *(_OWORD *)(v435 + 96) = xmmword_1BBB6F8F0;
      LODWORD(v447) = v298;
      *(_WORD *)(v197 + 7628) = 1;
      BOOL v418 = v298;
      if (v461)
      {
        **(unsigned char **)(v197 + 1376) = -1;
        **(unsigned char **)(v197 + 1368) = -1;
        if (v322 > (int)v321)
        {
          uint64_t v326 = v321 << 32;
          int v327 = v322 - v321;
          uint64_t v328 = v197 + 52 * (int)v321 + 5200;
          do
          {
            uint64_t v329 = *(void *)(*(void *)(v197 + 1584) + (v326 >> 28) + 3800);
            *(unsigned char *)(v197 + 1387) = v321;
            *(_DWORD *)(v197 + 1392) = *(_DWORD *)(v329 + 276);
            *(_DWORD *)(v197 + 1400) = *(_DWORD *)(v329 + 280);
            *(unsigned char *)(*(void *)(v197 + 1376) + 1) = v321;
            *(unsigned char *)(*(void *)(v197 + 1368) + 1) = v321;
            v330 = v323;
            sub_1BBA544E0(v323, v293, v294, a7, a8, 1u, v328, 0, 1, v450, v458);
            if (*(void *)(v324 + 24) < *(void *)(v197 + 7616))
            {
              *(unsigned char *)(v435 + 81) = *(unsigned char *)(v324 + 1);
              *(_DWORD *)(v197 + 7600) = *(_DWORD *)(v324 + 8);
              *(unsigned char *)(v435 + 93) = *(unsigned char *)(v324 + 13);
              *(_DWORD *)(v197 + 7624) = *(_DWORD *)(v324 + 32);
              *(_OWORD *)(v435 + 96) = *(_OWORD *)(v324 + 16);
            }
            LOBYTE(v321) = v321 + 1;
            v326 += 0x100000000;
            v328 += 52;
            --v327;
            uint64_t v294 = a3;
            uint64_t v293 = a2;
            v323 = v330;
          }
          while (v327);
        }
        uint64_t v316 = v435;
        int v331 = *(char *)(v435 + 81);
        int v332 = *(_DWORD *)(v197 + 7624) + v331;
        if (v320 - 1 != v331) {
          ++v332;
        }
        int v497 = v332;
        LODWORD(v447) = 1;
        int v317 = v424;
        BOOL v298 = v418;
      }
      *(_DWORD *)(v197 + 7624) = 0;
      *(_OWORD *)(v316 + 96) = xmmword_1BBB6F8F0;
      int v333 = 2;
      *(_WORD *)(v197 + 7628) = 2;
      if (v317 <= 0)
      {
        uint64_t v352 = 0;
        char v353 = 0;
        *(_DWORD *)(v197 + 7624) = 2;
        uint64_t v354 = 2;
        uint64_t v13 = a7;
      }
      else
      {
        int v334 = 0;
        uint64_t v13 = a7;
        signed int v335 = __clz(__rbit32(a7)) - 3;
        if (!a7) {
          signed int v335 = -3;
        }
        uint64_t v419 = v197 + 7592;
        char v420 = (void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(v197
                                                                                                + 8 * v335
                                                                                                + 1840);
        do
        {
          int v427 = v334;
          if (v317 == 1) {
            uint64_t v336 = (1 - v447);
          }
          else {
            uint64_t v336 = v334 & 1;
          }
          uint64_t v447 = 1 - v336;
          unsigned int v337 = v323;
          sub_1BBA52CA0((uint64_t)v323, v436, v293, v294, v13, a8, v450, v458, 1 - v336);
          (*v420)(a8, v430, v429, v450, v458, (int)a7, *(void *)(v197 + 1536));
          *(void *)(v197 + 1520) = *(void *)(v197 + 1536);
          *(void *)(v197 + 1528) = (int)a7;
          *(unsigned char *)(*(void *)(v197 + 1376) + v447) = *(unsigned char *)(v436 + v447);
          *(_DWORD *)(*(void *)(v197 + 1376) + 4 * v447 + 4) = *(_DWORD *)(v197 + 4 * v447 + 7596);
          uint64_t v339 = (int)v499[v336];
          int v466 = v498[v336];
          v323 = v337;
          if ((int)v339 < v466)
          {
            v462 = (unsigned char *)(v324 + v336 + 12);
            uint64_t v340 = v197 + 1368 + 4 * v336;
            v441 = (_DWORD *)(v340 + 20);
            char v438 = (_DWORD *)(v340 + 28);
            uint64_t v341 = 52 * (int)v339 + 208 * v336 + 4992;
            uint64_t v342 = 40 * v339 + 164 * v336 + 7636;
            uint64_t v343 = 40 * v339 + 161 * v336 + 7644;
            do
            {
              if (!v455 || !v339 || v339 == *(char *)(v197 + 40 * v336 + 7512 + v336))
              {
                *(_DWORD *)(v324 + 32) = 0;
                long long v344 = (_DWORD *)(v324 + 32);
                *(_OWORD *)(v324 + 16) = xmmword_1BBB6F8F0;
                *(_WORD *)(v324 + 36) = 2;
                uint64_t v345 = *(void *)(*(void *)(v197 + 1584) + (v336 << 8) + 16 * (int)v339 + 3544);
                *(unsigned char *)(v197 + 1368 + v336 + 18) = v339;
                _DWORD *v441 = *(_DWORD *)(v345 + 276);
                *char v438 = *(_DWORD *)(v345 + 280);
                *(unsigned char *)(*(void *)(v197 + 1376) + v336) = v339;
                uint64_t v471 = v343;
                uint64_t v346 = (unsigned char *)(v197 + v343);
                *(unsigned char *)(*(void *)(v197 + 1376) + v336 + 12) = *(unsigned char *)(v197 + v343);
                uint64_t v475 = v342;
                uint64_t v483 = v341;
                uint64_t v347 = v197 + v341;
                signed int v348 = *(_DWORD *)(v197 + v341 + 4 * *(char *)(v197 + v343));
                *(_DWORD *)(*(void *)(v197 + 1376) + 4 * v336 + 4) = (((*(_DWORD *)(v197 + v342)
                                                                        - ((*(_DWORD *)(v197 + v342) >> 15) & 0x10001)) & 0xFFFEFFFE)
                                                                      + 131074) & 0xFFFCFFFC;
                uint64_t v349 = (uint64_t)v323;
                sub_1BBA524B8(v323, a2, a3, a7, a8, v336, v348, v450, (int32x4_t)xmmword_1BBB6F8F0, v338, v458, 1u);
                sub_1BBA54840(v349, v347, v336, v324);
                int v350 = *(_DWORD *)(v324 + 32) + v339;
                if (*((_DWORD *)&v500 + v336) - 1 != v339) {
                  ++v350;
                }
                *long long v344 = v350 + *(&v496 + v447);
                *uint64_t v346 = *v462;
                unint64_t v351 = *(void *)(v324 + 16)
                     + ((*v344 * *(unsigned __int16 *)(v197 + 2 * *(__int16 *)(v324 + 36) + 992)) >> (8 * (*(_WORD *)(v324 + 36) == 0)));
                *(void *)(v324 + 24) = v351;
                v323 = (uint64_t *)v349;
                uint64_t v341 = v483;
                uint64_t v342 = v475;
                uint64_t v343 = v471;
                if (v351 < *(void *)(v197 + 7616))
                {
                  *(&v496 + v336) = v350;
                  *(unsigned char *)(v436 + v336) = *(unsigned char *)(v324 + v336);
                  *(_DWORD *)(v419 + 4 * v336 + 4) = *(_DWORD *)(v324 + 4 * v336 + 4);
                  *(unsigned char *)(v419 + v336 + 12) = *v462;
                  *(_DWORD *)(v197 + 7624) = *(_DWORD *)(v324 + 32);
                  *(_OWORD *)(v435 + 96) = *(_OWORD *)(v324 + 16);
                }
              }
              ++v339;
              v341 += 52;
              v342 += 40;
              v343 += 40;
            }
            while (v466 != v339);
          }
          int v334 = v427 + 1;
          int v317 = v424;
          uint64_t v13 = a7;
          uint64_t v294 = a3;
          uint64_t v293 = a2;
        }
        while (v427 + 1 != v424);
        uint64_t v352 = *(void *)(v197 + 7608);
        LOWORD(v354) = *(_WORD *)(v197 + 7628);
        int v333 = *(_DWORD *)(v197 + 7624) + 2;
        *(_DWORD *)(v197 + 7624) = v333;
        char v353 = 8 * ((_WORD)v354 == 0);
        uint64_t v354 = (__int16)v354;
        BOOL v298 = v418;
      }
      *(void *)(v197 + 7616) = v352 + ((v333 * *(unsigned __int16 *)(v197 + 2 * v354 + 992)) >> v353);
    }
LABEL_427:
    unint64_t v355 = *(void *)(v197 + 7616);
    unsigned int v356 = v298;
    unint64_t v357 = *(void *)(v197 + 7512 + 40 * v298 + 24);
    BOOL v20 = v355 >= v357;
    BYTE10(v492) = 3;
    char v358 = BYTE11(v492) & 0x8E | ((v355 < v357) << 6);
    if (!v20) {
      unsigned int v356 = 2;
    }
    uint64_t v359 = v197 + 7512 + 40 * v356;
    BYTE11(v492) = v358 & 0xCF | (16 * (*(unsigned char *)(v359 + 12) & 1)) & 0xDF | (32 * (*(unsigned char *)(v359 + 13) & 1));
    WORD4(v492) = *(_WORD *)v359;
    *(void *)&long long v492 = *(void *)(v359 + 4);
    uint64_t v360 = *(void *)(v359 + 16);
    int v163 = *(_DWORD *)(v359 + 32);
    if (v425)
    {
LABEL_465:
      *(void *)&long long v164 = v360;
      *((void *)&v164 + 1) = v360 + v163 * *(unsigned __int16 *)(v197 + 996);
      unint64_t v21 = v431;
      if (!v425) {
        return;
      }
      goto LABEL_466;
    }
    uint64_t v361 = 0;
    uint64_t v362 = (unsigned __int8 *)*((void *)v426 + 17);
    uint64_t v363 = *v362;
    uint64_t v364 = v362[1];
    unsigned int v365 = a2 - *((_DWORD *)v426 + 1);
    unsigned int v366 = a3 - *((_DWORD *)v426 + 2);
    if ((v365 & 0x80000000) == 0 && (v366 & 0x80000000) == 0)
    {
      uint64_t v361 = 0;
      unsigned int v367 = *v426;
      if (v365 < v367 && v366 < v367)
      {
        uint64_t v361 = (*(uint64_t (**)(void, unint64_t, uint64_t, uint64_t))(**((void **)v362 + 10) + 24))(*((void *)v362 + 10), *((void *)v362 + 11) + v365 + *v362 * (unint64_t)v366, v293, v294);
        unsigned int v365 = a2 - *((_DWORD *)v426 + 1);
        unsigned int v366 = a3 - *((_DWORD *)v426 + 2);
        uint64_t v13 = a7;
      }
    }
    uint64_t v368 = 0;
    if ((v365 & 0x80000000) == 0 && (v366 & 0x80000000) == 0)
    {
      uint64_t v368 = 0;
      unsigned int v369 = *v426;
      if (v365 < v369 && v366 < v369)
      {
        uint64_t v368 = (*(uint64_t (**)(void, unint64_t, uint64_t, uint64_t))(**(void **)(*((void *)v426 + 17) + 96)
                                                                                     + 24))(*(void *)(*((void *)v426 + 17) + 96), *(void *)(*((void *)v426 + 17) + 104)+ v365+ *(unsigned __int8 *)(*((void *)v426 + 17) + 1) * (unint64_t)(v366 & 0xFFFFFFFE), v293, v294);
        unsigned int v365 = a2 - *((_DWORD *)v426 + 1);
        unsigned int v366 = a3 - *((_DWORD *)v426 + 2);
        uint64_t v13 = a7;
      }
    }
    unint64_t v370 = 0;
    if ((v365 & 0x80000000) == 0)
    {
      long long v371 = 0;
      if ((v366 & 0x80000000) != 0)
      {
LABEL_446:
        *(_OWORD *)unint64_t v370 = v492;
        *v371 &= 0xFF73u;
        unsigned int v373 = *v426;
        if (a8 >= 4)
        {
          uint64_t v374 = 0;
          LODWORD(v375) = (int)v13 >> 2;
          if ((int)v13 >> 2 <= 1) {
            uint64_t v375 = 1;
          }
          else {
            uint64_t v375 = v375;
          }
          long long v376 = (void *)v370;
          do
          {
            long long v377 = v376;
            uint64_t v378 = v375;
            if ((int)v13 >= 4)
            {
              do
              {
                uint64_t v379 = *(void *)v370;
                *(void *)((char *)v377 + 6) = *(void *)(v370 + 6);
                *long long v377 = v379;
                v377 += 2;
                --v378;
              }
              while (v378);
            }
            ++v374;
            v376 += 2 * (v373 >> 2);
          }
          while (v374 != a8 >> 2);
          unsigned int v373 = *v426;
        }
        uint64_t v380 = v373 >> 3;
        if ((int)v13 < 8)
        {
          int v385 = v426;
        }
        else
        {
          uint64_t v381 = 0;
          long long v382 = v371;
          do
          {
            long long v383 = v382;
            uint64_t v384 = v13 >> 3;
            do
            {
              *v383++ = *v371;
              --v384;
            }
            while (v384);
            ++v381;
            v382 += v380;
          }
          while (v381 != v13 >> 3);
          int v385 = v426;
          uint64_t v380 = (unint64_t)*v426 >> 3;
        }
        sub_1BBA8E12C(a1, v371, a4, 0, (*v371 >> 7) & 1, v380, *((_DWORD *)v385 + 3));
        sub_1BBAD03F0(*(void *)(a1 + 1872), (unsigned int *)v370, a2, a3, v13, a8, v363, v361, 2 * v364, v368);
        if (!*(unsigned char *)(v484 + 103))
        {
          LODWORD(v501) = 0;
          long long v500 = xmmword_1BBB6F8F0;
          WORD2(v501) = 2;
          sub_1BBA9CF24(a1, a2, a3, a4, v426, (uint64_t)&v500);
        }
        LODWORD(v501) = 0;
        long long v500 = xmmword_1BBB6F8F0;
        WORD2(v501) = 0;
        *((_OWORD *)v426 + 12) = xmmword_1BBB6F8F0;
        *((_DWORD *)v426 + 52) = 0;
        *((_WORD *)v426 + 106) = 0;
        uint64_t v197 = a1;
        sub_1BBA9A7B0(a1, a2, a3, a4, v426, (uint64_t)(v426 + 192), (uint64_t)&v500, 0, 0);
        uint64_t v386 = *(void *)(a1 + 944);
        long long v387 = *(_OWORD *)(v386 + 16);
        *(_OWORD *)(v386 + 216) = *(_OWORD *)v386;
        long long v388 = *(_OWORD *)(v386 + 32);
        long long v389 = *(_OWORD *)(v386 + 64);
        long long v390 = *(_OWORD *)(v386 + 80);
        *(_OWORD *)(v386 + 264) = *(_OWORD *)(v386 + 48);
        *(_OWORD *)(v386 + 280) = v389;
        *(_OWORD *)(v386 + 248) = v388;
        *(_OWORD *)(v386 + 232) = v387;
        long long v391 = *(_OWORD *)(v386 + 96);
        long long v392 = *(_OWORD *)(v386 + 128);
        long long v393 = *(_OWORD *)(v386 + 144);
        *(_OWORD *)(v386 + 328) = *(_OWORD *)(v386 + 112);
        *(_OWORD *)(v386 + 344) = v392;
        *(_OWORD *)(v386 + 296) = v390;
        *(_OWORD *)(v386 + 312) = v391;
        long long v394 = *(_OWORD *)(v386 + 176);
        *(_OWORD *)(v386 + 376) = *(_OWORD *)(v386 + 160);
        *(_OWORD *)(v386 + 392) = v394;
        LOBYTE(v499[0]) = 0;
        *(void *)(v386 + 408) = *(void *)(v386 + 192);
        *(_OWORD *)(v386 + 360) = v393;
        uint64_t v395 = 8 * (*(_DWORD *)(v386 + 208) - *(_DWORD *)(v386 + 24));
        *(void *)(v386 + 32) = 0;
        *(void *)(v386 + 8) = 510;
        *(void *)(v386 + 16) = v395;
        sub_1BBA9595C(a1, a2, a3, v426, 1, 0, *(unsigned char *)(v484 + 103), 1, 0);
        *((_DWORD *)v426 + 4) = *((_DWORD *)v426 + 5);
        sub_1BBA9AF40((unint64_t *)a1, a2, a3, a4, a10, (int *)v426 + 4, v499);
        uint64_t v396 = *(void *)(a1 + 944);
        *((_DWORD *)v426 + 52) = *((_DWORD *)v426 + 52)
                               - *(_DWORD *)(v396 + 8)
                               + ((*(_DWORD *)(v396 + 16) + 8 * (*(_DWORD *)(v396 + 24) - *(_DWORD *)(v396 + 208))) << 8)
                               + 510;
        long long v398 = *(_OWORD *)(v396 + 264);
        long long v397 = *(_OWORD *)(v396 + 280);
        *(_OWORD *)(v396 + 32) = *(_OWORD *)(v396 + 248);
        *(_OWORD *)(v396 + 48) = v398;
        long long v400 = *(_OWORD *)(v396 + 328);
        long long v399 = *(_OWORD *)(v396 + 344);
        long long v401 = *(_OWORD *)(v396 + 296);
        *(_OWORD *)(v396 + 96) = *(_OWORD *)(v396 + 312);
        *(_OWORD *)(v396 + 112) = v400;
        *(_OWORD *)(v396 + 64) = v397;
        *(_OWORD *)(v396 + 80) = v401;
        long long v402 = *(_OWORD *)(v396 + 392);
        long long v403 = *(_OWORD *)(v396 + 360);
        *(_OWORD *)(v396 + 160) = *(_OWORD *)(v396 + 376);
        *(_OWORD *)(v396 + 176) = v402;
        long long v404 = *(_OWORD *)(v396 + 232);
        *(void *)(v396 + 192) = *(void *)(v396 + 408);
        *(_OWORD *)(v396 + 128) = v399;
        *(_OWORD *)(v396 + 144) = v403;
        *(_OWORD *)uint64_t v396 = *(_OWORD *)(v396 + 216);
        *(_OWORD *)(v396 + 16) = v404;
        *((void *)v426 + 25) = *((void *)v426 + 24)
                               + ((*((_DWORD *)v426 + 52)
                                 * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)v426 + 106) + 992)) >> (8 * (*((_WORD *)v426 + 106) == 0)));
        sub_1BBAA01B8(a1, (void ***)a5, a6, 1u);
        LODWORD(v13) = a7;
        goto LABEL_465;
      }
      unint64_t v370 = 0;
      unint64_t v372 = *v426;
      if (v365 < v372)
      {
        long long v371 = 0;
        if (v366 < v372)
        {
          unint64_t v370 = *((void *)v426 + 12) + 16 * ((v365 >> 2) + (v372 >> 2) * (unint64_t)(v366 >> 2));
          long long v371 = (unsigned __int16 *)(*((void *)v426 + 11)
                                    + 2 * ((v365 >> 3) + (v372 >> 3) * (unint64_t)(v366 >> 3)));
        }
        goto LABEL_446;
      }
    }
    long long v371 = 0;
    goto LABEL_446;
  }
  int v163 = 0;
  long long v164 = xmmword_1BBB6F8F0;
LABEL_229:
  if (!v425) {
    return;
  }
LABEL_466:
  uint64_t v405 = v422;
  if (v421 >= *((void *)&v164 + 1)) {
    uint64_t v405 = v164;
  }
  int v406 = v423;
  if (v421 >= *((void *)&v164 + 1)) {
    int v406 = v163;
  }
  unsigned int v407 = (uint64_t *)&v492;
  if (v421 < *((void *)&v164 + 1)) {
    unsigned int v407 = &v493;
  }
  *(void *)a11 += v405;
  *(_DWORD *)(a11 + 16) += v406;
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v407;
  if (a8 >= 4)
  {
    uint64_t v408 = 0;
    LODWORD(v409) = (int)v13 >> 2;
    if ((int)v13 >> 2 <= 1) {
      uint64_t v409 = 1;
    }
    else {
      uint64_t v409 = v409;
    }
    unint64_t v410 = 16 * ((unint64_t)**a5 >> 2);
    unsigned int v411 = (void *)v21;
    do
    {
      unint64_t v412 = v411;
      uint64_t v413 = v409;
      if ((int)v13 >= 4)
      {
        do
        {
          uint64_t v414 = *(void *)v21;
          *(void *)((char *)v412 + 6) = *(void *)(v21 + 6);
          *unint64_t v412 = v414;
          v412 += 2;
          --v413;
        }
        while (v413);
      }
      ++v408;
      unsigned int v411 = (void *)((char *)v411 + v410);
    }
    while (v408 != a8 >> 2);
  }
}

void sub_1BBAA3FE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BBAA4000(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, char a9, uint64_t a10, uint64_t a11)
{
  unsigned int v12 = a7;
  uint64_t v13 = a6;
  int v15 = a4;
  uint64_t v17 = result;
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = *(void *)(result + 1368);
  uint64_t v19 = a7;
  uint64_t v20 = 1 - a7;
  *(unsigned char *)(*(void *)(result + 1376) + v20) = -1;
  *(unsigned char *)(*(void *)(result + 1368) + v20) = -1;
  if (a8 >= 2 && a9) {
    BOOL result = sub_1BBAA4BB8(result, a2, a3, a4, a5, a6, (_DWORD *)(result + 4 * a7 + 7952), (_DWORD *)(result + 4 * a7 + 7960));
  }
  uint64_t v21 = v17 + 4 * v19;
  uint64_t v22 = *(int *)(v21 + 7952);
  if ((int)v22 < *(_DWORD *)(v21 + 7960))
  {
    __int32 v135 = 0;
    uint64_t v152 = (uint64_t *)(v17 + 1368);
    uint64_t v127 = v17 + 40 * v12 + 7512;
    char v141 = (int *)(v21 + 7960);
    uint64_t v143 = (_OWORD *)(v17 + 5408);
    uint64_t v129 = (char *)(v18 + v19 + 12);
    uint64_t v140 = v18 + 4;
    uint64_t v130 = (void *)(v17 + 40 * v19 + 7536);
    uint64_t v131 = (unsigned int *)(v18 + 4 + 4 * v19);
    uint64_t v138 = (unsigned char *)(v17 + 1368 + v19 + 18);
    uint64_t v139 = a8 - 1;
    uint64_t v23 = v17 + 1368 + 4 * v19;
    unsigned int v136 = (_DWORD *)(v23 + 28);
    int v137 = (_DWORD *)(v23 + 20);
    BOOL v25 = a5 == 16 && v13 == 8;
    BOOL v125 = v25;
    if ((int)v13 >= (int)a5) {
      unsigned int v26 = a5;
    }
    else {
      unsigned int v26 = v13;
    }
    unsigned int v128 = v26;
    int v142 = 1;
    char v151 = 1;
    unsigned int v149 = v12;
    char v150 = 1;
    unsigned int v148 = v13;
    int v134 = v15;
    uint64_t v132 = v18;
    uint64_t v133 = v19;
    uint64_t v126 = (unsigned __int8 *)(v17 + 5456);
    while (1)
    {
      *(_WORD *)uint64_t v18 = -1;
      *(_DWORD *)(v18 + 32) = 0;
      *(void *)uint64_t v140 = 0;
      *(_WORD *)(v140 + 8) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_1BBB6F8F0;
      *(_WORD *)(v18 + 36) = 2;
      uint64_t v27 = *(void *)(v17 + 1376);
      *(_WORD *)uint64_t v27 = -1;
      *(_DWORD *)(v27 + 32) = 0;
      *(_WORD *)(v27 + 12) = 0;
      *(void *)(v27 + 4) = 0;
      *(_OWORD *)(v27 + 16) = xmmword_1BBB6F8F0;
      *(_WORD *)(v27 + 36) = 2;
      uint64_t v28 = *(void *)(*(void *)(v17 + 1584) + (v19 << 8) + 16 * (int)v22 + 3544);
      *uint64_t v138 = v22;
      *int v137 = *(_DWORD *)(v28 + 276);
      *unsigned int v136 = *(_DWORD *)(v28 + 280);
      *(unsigned char *)(*(void *)(v17 + 1376) + v19) = v22;
      *(unsigned char *)(*(void *)(v17 + 1368) + v19) = v22;
      uint64_t v29 = v17 + 208 * v19 + 52 * v22;
      uint64_t v153 = v29 + 4992;
      sub_1BBA180C8(*(void *)(v17 + 1872), a2, a3, v12, v22, a5, v13, (__int32 *)(v29 + 4992), (void *)(v17 + 8008), v17 + 8024);
      long long v30 = *(_OWORD *)(v29 + 4992);
      long long v31 = *(_OWORD *)(v29 + 5008);
      long long v32 = *(_OWORD *)(v29 + 5024);
      uint64_t v33 = v17 + 5408;
      *(_DWORD *)(v17 + 5456) = *(_DWORD *)(v29 + 5040);
      *(_OWORD *)(v17 + 5424) = v31;
      *(_OWORD *)(v17 + 5440) = v32;
      *uint64_t v143 = v30;
      uint64_t v34 = v22;
      if (!a9) {
        goto LABEL_63;
      }
      unsigned int v35 = *(uint64_t **)(v17 + 8136);
      uint64_t v36 = *v35;
      uint64_t v37 = ((uint64_t)(int)a2 >> 4) + *v35 * ((uint64_t)(int)a3 >> 4);
      uint64_t v38 = ((uint64_t)(int)a2 >> 3) + *v35 * (int)(((int)a3 >> 2) & 0xFFFFFFFE);
      uint64_t v39 = ((uint64_t)(int)a2 >> 2) + *v35 * (int)(a3 & 0xFFFFFFFC);
      int v40 = *(unsigned __int8 *)(v35[1] + v37);
      if (v15 != 3) {
        break;
      }
      if (a5 == v13)
      {
        char v151 = 0;
        char v150 = 0;
        __int32 v50 = *(_DWORD *)(v35[(int)v22 + 32] + 4 * v38);
        goto LABEL_60;
      }
      if ((v40 - 29) > 1) {
        goto LABEL_54;
      }
      int v64 = *(unsigned __int8 *)(v35[40] + v38);
      if (v13 == 4 && a5 == 8 && v64 == 1) {
        goto LABEL_59;
      }
      __int32 v135 = 0;
      int v142 = 1;
      if (v13 != 8 || a5 != 4)
      {
        char v63 = 1;
LABEL_55:
        char v151 = 1;
        goto LABEL_56;
      }
      char v151 = 1;
      char v150 = 1;
      if (v64 == 2) {
        goto LABEL_59;
      }
LABEL_63:
      if (v150)
      {
        int v66 = *(_DWORD *)(v17 + 200);
        if (v12) {
          BOOL v67 = 0;
        }
        else {
          BOOL v67 = v66 == 1;
        }
        int v68 = v67;
        if (v66 == 2 || v68)
        {
          uint64_t v69 = *(void *)(v17 + 1872);
          unsigned int v70 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))(v69 + 16 * v19 + 79184);
          uint64_t v71 = *(void *)(v69 + 16 * v19 + 79192);
          uint64_t v72 = (void *)(v69 + (v71 >> 1));
          if (v71) {
            unsigned int v70 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))(*v72 + v70);
          }
          v70(v72, a2, a3, v22, a5, v13, v17 + 7968, v17 + 7984, v17 + 8048, v17 + 8064, v143);
          uint64_t v33 = v17 + 5408;
        }
        BOOL result = (uint64_t)sub_1BBA544E0(v152, a2, a3, a5, v13, v12, v33, v153, v142, a10, a11);
        if (v142 == 2) {
          goto LABEL_101;
        }
        int v73 = *v129;
        long long v74 = v131;
      }
      else
      {
        int v73 = 0;
        long long v74 = v131;
        *uint64_t v131 = v135;
      }
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_1BBB6F8F0;
      *(_WORD *)(v18 + 36) = 1;
      unsigned int v75 = *v74;
      char v147 = v73;
      int v146 = *(_DWORD *)(v153 + 4 * v73);
      if (v151)
      {
        unsigned int v75 = (((v75 - ((v75 >> 15) & 0x10001)) & 0xFFFEFFFE) + 131074) & 0xFFFCFFFC;
        unsigned int v76 = a5;
        unsigned int v77 = 1;
      }
      else
      {
        unsigned int v76 = v128;
        unsigned int v77 = 2;
      }
      *(_DWORD *)(*(void *)(v17 + 1376) + 4 * v19 + 4) = v75;
      uint64_t v78 = *(void *)(v17 + 1520);
      uint64_t v144 = *(void *)(v17 + 1528);
      long long v79 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 1592)
                                                                                          + 40 * v77
                                                                                          + 8 * __clz(__rbit32(v76))
                                                                                          + 8);
      uint64_t v80 = *(void *)(v17 + 1376);
      *(_DWORD *)(v80 + 32) = 0;
      *(_OWORD *)(v80 + 16) = xmmword_1BBB6F8F0;
      *(_WORD *)(v80 + 36) = v77;
      uint64_t v81 = (__int16 *)(v80 + 4 * v19);
      int v82 = v81[2];
      v81 += 2;
      int v145 = v81[1];
      sub_1BBA54474((uint64_t)v152, a2, a3, a5, v148, v149, v81);
      sub_1BBA52CA0((uint64_t)v152, *(void *)(v17 + 1376), a2, a3, a5, v148, a10, a11, v149);
      unsigned int v83 = v79(a5, v148, v78, v144, a11, a10);
      __int16 v84 = v82;
      uint64_t v85 = *(void *)(v17 + 1376);
      *(void *)(v85 + 16) = v83;
      int v86 = v82 - (__int16)v146;
      if ((v86 + 64) >= 0x80)
      {
        if (v86 >= 0) {
          int v88 = v86;
        }
        else {
          int v88 = -v86;
        }
        unsigned int v87 = 63 - 2 * __clz((v86 < 1) | (2 * v88));
      }
      else
      {
        unsigned int v87 = byte_1BBB7B41C[v86 + 64];
      }
      int v89 = v145 - (v146 >> 16);
      uint64_t v13 = v148;
      int v15 = v134;
      uint64_t v19 = v133;
      if ((v89 + 64) >= 0x80)
      {
        if (v89 >= 0) {
          int v91 = v145 - (v146 >> 16);
        }
        else {
          int v91 = (v146 >> 16) - v145;
        }
        unsigned int v90 = 63 - 2 * __clz((v89 < 1) | (2 * v91));
      }
      else
      {
        unsigned int v90 = byte_1BBB7B41C[v89 + 64];
      }
      uint64_t v18 = v132;
      unsigned int v92 = v90 + v87;
      *(_DWORD *)(v85 + 32) = v92;
      unint64_t v93 = ((v92 * *(unsigned __int16 *)(*(void *)(v17 + 1592) + 2 * *(__int16 *)(v85 + 36) + 8)) >> (8 * (*(_WORD *)(v85 + 36) == 0)))
          + (unint64_t)v83;
      *(void *)(v85 + 24) = v93;
      if (v93 < *(void *)(*(void *)(v17 + 1368) + 24))
      {
        uint64_t v94 = v85 + 4 * v133;
        *(_WORD *)(v94 + 4) = v84;
        *(_WORD *)(v94 + 6) = v145;
        uint64_t v95 = *(void *)(v17 + 1376);
        uint64_t v96 = *(void *)(v17 + 1368);
        unint64_t v97 = (unsigned char *)(v96 + v133);
        *unint64_t v97 = *(unsigned char *)(v95 + v133);
        *(_DWORD *)(v96 + 4 * v133 + 4) = *(_DWORD *)(v95 + 4 * v133 + 4);
        v97[12] = *(unsigned char *)(v95 + v133 + 12);
        *(_DWORD *)(v96 + 32) = *(_DWORD *)(v95 + 32);
        *(_OWORD *)(v96 + 16) = *(_OWORD *)(v95 + 16);
      }
      unsigned int v12 = v149;
      if (v151)
      {
        unsigned int v98 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, void, void))(v17 + 1824);
        uint64_t v99 = *(void *)(v17 + 1832);
        int v100 = (uint64_t *)((char *)v152 + (v99 >> 1));
        if (v99) {
          unsigned int v98 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, void, void))(*v100 + v98);
        }
        v98(v100, a2, a3, a5, v148, v149);
      }
      *(unsigned char *)(*(void *)(v17 + 1376) + v133 + 12) = v147;
      *(unsigned char *)(*(void *)(v17 + 1368) + v133 + 12) = v147;
      BOOL result = sub_1BBA54840((uint64_t)v152, v153, v149, v132);
LABEL_101:
      if (v22 == v139) {
        int v101 = v22;
      }
      else {
        int v101 = v22 + 1;
      }
      int v102 = v101 + *(_DWORD *)(v18 + 32);
      *(_DWORD *)(v18 + 32) = v102;
      unint64_t v103 = *(void *)(v18 + 16)
           + ((v102 * *(unsigned __int16 *)(v17 + 2 * *(__int16 *)(v18 + 36) + 992)) >> (8 * (*(_WORD *)(v18 + 36) == 0)));
      *(void *)(v18 + 24) = v103;
      uint64_t v104 = v17 + 160 * v19 + 40 * v22;
      if (v103 < *(void *)(v104 + 7656))
      {
        uint64_t v105 = v17 + 160 * v19 + 40 * v22 + 7632;
        long long v106 = *(_OWORD *)v18;
        long long v107 = *(_OWORD *)(v18 + 16);
        *(void *)(v105 + 32) = *(void *)(v18 + 32);
        *(_OWORD *)uint64_t v105 = v106;
        *(_OWORD *)(v105 + 16) = v107;
        if (*(void *)(v104 + 7656) < *v130)
        {
          long long v108 = *(_OWORD *)v18;
          long long v109 = *(_OWORD *)(v18 + 16);
          *(void *)(v127 + 32) = *(void *)(v18 + 32);
          *(_OWORD *)uint64_t v127 = v108;
          *(_OWORD *)(v127 + 16) = v109;
        }
      }
      ++v22;
      if (v34 + 1 >= *v141) {
        goto LABEL_121;
      }
    }
    if (v15 != 4)
    {
      if (v15 != 5)
      {
LABEL_54:
        __int32 v135 = 0;
        char v63 = 1;
        int v142 = 1;
        goto LABEL_55;
      }
      uint64_t v41 = v35[(int)v22 + 24];
      if (a5 == v13)
      {
        int32x2_t v42 = *(int32x2_t *)(v41 + 4 * v37);
        int32x2_t v43 = *(int32x2_t *)(v41 + 4 * (v37 + v36));
        *(int32x2_t *)&long long v44 = v42;
        *((int32x2_t *)&v44 + 1) = v43;
        long long v155 = v44;
        __int32 v45 = v42.i32[0];
        BOOL v46 = v42.i32[0] == v42.i32[1];
        v42.i32[1] = v43.i32[1];
        int32x2_t v47 = vceq_s32(vdup_lane_s32(v43, 0), v42);
        __int32 v48 = v46 & v47.i32[0] & v47.i32[1];
        uint64_t v49 = 4;
      }
      else
      {
        if (a5 == 32) {
          uint64_t v53 = 1;
        }
        else {
          uint64_t v53 = v36;
        }
        unsigned int v54 = *(_DWORD *)(v41 + 4 * (v37 + v53));
        __int32 v45 = *(_DWORD *)(v41 + 4 * v37);
        *(void *)&long long v155 = __PAIR64__(v54, v45);
        __int32 v48 = v45 == v54;
        uint64_t v49 = 2;
      }
      uint64_t v55 = 0;
      int v56 = *v126;
      unsigned __int8 v57 = *v126;
      do
      {
        int v58 = *((_DWORD *)&v155 + v55);
        unsigned int v59 = (int *)(v17 + 5408);
        uint64_t v60 = v57;
        if (v57)
        {
          while (1)
          {
            int v61 = *v59++;
            if (v61 == v58) {
              break;
            }
            if (!--v60) {
              goto LABEL_37;
            }
          }
        }
        else
        {
LABEL_37:
          *uint64_t v126 = v57 + 1;
          *((_DWORD *)v143 + v57) = v58;
          unsigned __int8 v57 = *v126;
        }
        ++v55;
      }
      while (v55 != v49);
      if (!v48) {
        __int32 v45 = 0;
      }
      char v62 = v48 ^ 1;
      if (v56 != v57) {
        __int32 v45 = 0;
      }
      __int32 v135 = v45;
      int v142 = 1;
      char v151 = 0;
      if (v56 == v57) {
        char v63 = v62;
      }
      else {
        char v63 = 1;
      }
LABEL_56:
      char v150 = v63;
      goto LABEL_63;
    }
    if (a5 == v13)
    {
      char v151 = 0;
      char v150 = 0;
      __int32 v50 = *(_DWORD *)(v35[(int)v22 + 24] + 4 * v37);
      goto LABEL_60;
    }
    if (v125)
    {
      uint64_t v51 = (unsigned __int8 *)(v17 + 5456);
      if (v40 != 27 || *(char *)(v35[22] + v39) != v22)
      {
        uint64_t v52 = 1;
        goto LABEL_110;
      }
    }
    else
    {
      uint64_t v51 = (unsigned __int8 *)(v17 + 5456);
      if (v40 != 28 || *(char *)(v35[22] + v39) != v22)
      {
        uint64_t v52 = 2 * v36;
LABEL_110:
        uint64_t v110 = 0;
        uint64_t v111 = v35[(int)v22 + 32];
        unsigned __int32 v112 = *(_DWORD *)(v111 + 4 * v38);
        unsigned int v113 = *(_DWORD *)(v111 + 4 * (v38 + v52));
        __int32 v135 = v112;
        *(void *)&long long v155 = __PAIR64__(v113, v112);
        int v114 = *v51;
        char v115 = 1;
        unsigned __int8 v116 = *v51;
        do
        {
          char v117 = v115;
          int v118 = *((_DWORD *)&v155 + v110);
          int v119 = (int *)(v17 + 5408);
          uint64_t v120 = v116;
          if (v116)
          {
            while (1)
            {
              int v121 = *v119++;
              if (v121 == v118) {
                break;
              }
              if (!--v120) {
                goto LABEL_114;
              }
            }
          }
          else
          {
LABEL_114:
            *uint64_t v51 = v116 + 1;
            *((_DWORD *)v143 + v116) = v118;
            unsigned __int8 v116 = *v51;
          }
          char v115 = 0;
          uint64_t v110 = 1;
        }
        while ((v117 & 1) != 0);
        if (v114 != v116 || v135 != v113)
        {
          __int32 v135 = 0;
          char v151 = 0;
          char v150 = 1;
          int v65 = 2;
          goto LABEL_62;
        }
        char v151 = 0;
        char v150 = 0;
LABEL_61:
        int v65 = 1;
LABEL_62:
        int v142 = v65;
        goto LABEL_63;
      }
    }
LABEL_59:
    char v151 = 0;
    char v150 = 0;
    __int32 v50 = *(_DWORD *)(v35[20] + 4 * v39);
LABEL_60:
    __int32 v135 = v50;
    goto LABEL_61;
  }
LABEL_121:
  uint64_t v122 = v17 + 40 * v19;
  int v123 = *(_DWORD *)(v122 + 7544);
  if (*(unsigned char *)(v17 + 192)) {
    int v124 = v123 + 3;
  }
  else {
    int v124 = v123 + 1;
  }
  *(_DWORD *)(v122 + 7544) = v124;
  *(void *)(v122 + 7536) = *(void *)(v122 + 7528)
                           + ((v124 * *(unsigned __int16 *)(v17 + 2 * *(__int16 *)(v122 + 7548) + 992)) >> (8 * (*(_WORD *)(v122 + 7548) == 0)));
  return result;
}

uint64_t sub_1BBAA4BB8(uint64_t result, int a2, int a3, int a4, int a5, int a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v8 = a2 >> 2;
  if (a4 > 4)
  {
    memset(v22, 0, sizeof(v22));
    if (a6 < 4)
    {
      unsigned int v12 = 0;
    }
    else
    {
      int v11 = 0;
      unsigned int v12 = 0;
      LODWORD(v13) = a5 >> 2;
      if (a5 >> 2 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v13;
      }
      do
      {
        if (a5 >= 4)
        {
          int v14 = (char *)(*(void *)(*(void *)(result + 8136) + 176)
                       + v8
                       + **(void **)(result + 8136) * (int)(a3 & 0xFFFFFFFC));
          uint64_t v15 = v13;
          do
          {
            uint64_t v17 = *v14++;
            unsigned int v16 = v17;
            ++*((_DWORD *)v22 + v17);
            if (v12 <= v17) {
              unsigned int v12 = v16;
            }
            --v15;
          }
          while (v15);
        }
        ++v11;
        a3 += 4;
      }
      while (v11 != a6 >> 2);
    }
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    int v20 = 0;
    uint64_t v21 = v12 + 1;
    do
    {
      if (*((_DWORD *)v22 + v18) > v19)
      {
        int v20 = v18;
        unsigned int v19 = *((_DWORD *)v22 + v18);
      }
      ++v18;
    }
    while (v21 != v18);
    *a7 = v20;
    int v10 = v20 + 1;
  }
  else
  {
    int v9 = *(char *)(*(void *)(*(void *)(result + 8136) + 176)
                 + **(void **)(result + 8136) * (int)(a3 & 0xFFFFFFFC)
                 + v8);
    *a7 = v9;
    int v10 = v9 + 1;
  }
  *a8 = v10;
  return result;
}

uint64_t sub_1BBAA4D08(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    int v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      int v9 = a2 - 1;
      BOOL result = (*a3)(a2 - 1, (uint64_t *)result);
      if (result)
      {
        uint64_t v10 = *v8;
        *int v8 = *v9;
        *int v9 = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unsigned int v19 = (char *)a5;
      unint64_t v20 = a4 >> 1;
      uint64_t v21 = (uint64_t *)(result + 8 * (a4 >> 1));
      unint64_t v22 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1BBAA4F80((uint64_t *)result, v21, a3, v22, a5);
        uint64_t v23 = (uint64_t *)&v19[8 * v20];
        BOOL result = (uint64_t)sub_1BBAA4F80(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23);
        uint64_t v24 = &v19[8 * a4];
        BOOL v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          BOOL result = (*a3)(v25, (uint64_t *)v19);
          if (result) {
            unsigned int v26 = (char *)v25;
          }
          else {
            unsigned int v26 = v19;
          }
          v19 += 8 * (result ^ 1);
          v25 += result;
          *v8++ = *(void *)v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              uint64_t v27 = 0;
              do
              {
                v8[v27] = v25[v27];
                ++v27;
              }
              while (&v25[v27] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          uint64_t v28 = 0;
          do
          {
            v8[v28] = *(void *)&v19[v28 * 8];
            ++v28;
          }
          while (&v19[v28 * 8] != (char *)v23);
        }
      }
      else
      {
        sub_1BBAA4D08(result, v21, a3, v22, a5, a6);
        sub_1BBAA4D08(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v19, a6);
        return sub_1BBAA5190((uint64_t)v8, &v8[a4 >> 1], a2, (uint64_t (**)(void, void))a3, a4 >> 1, a4 - (a4 >> 1), v19, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      unsigned int v12 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        uint64_t v13 = 0;
        int v14 = (uint64_t *)result;
        do
        {
          uint64_t v15 = v14;
          int v14 = v12;
          BOOL result = (*a3)(v12, v15);
          if (result)
          {
            uint64_t v29 = *v14;
            uint64_t v16 = v13;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v16 + 8) = *(uint64_t *)((char *)v8 + v16);
              if (!v16) {
                break;
              }
              v16 -= 8;
              BOOL result = (*a3)(&v29, (uint64_t *)((char *)v8 + v16));
              if ((result & 1) == 0)
              {
                uint64_t v17 = (uint64_t *)((char *)v8 + v16 + 8);
                goto LABEL_15;
              }
            }
            uint64_t v17 = v8;
LABEL_15:
            *uint64_t v17 = v29;
          }
          unsigned int v12 = v14 + 1;
          v13 += 8;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1BBAA4F80(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    int v5 = a5;
    int v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      uint64_t *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = a2 - 1;
      BOOL result = (uint64_t *)(*a3)(a2 - 1, result);
      if (result) {
        int v11 = v10;
      }
      else {
        int v11 = v7;
      }
      *v5++ = *v11;
      if (!result) {
        int v7 = v10;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      unsigned int v19 = &result[a4 >> 1];
      sub_1BBAA4D08(result, v19, a3, a4 >> 1, a5, a4 >> 1);
      BOOL result = (uint64_t *)sub_1BBAA4D08(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v20 = &v7[a4 >> 1];
      while (v20 != a2)
      {
        BOOL result = (uint64_t *)(*a3)(v20, v7);
        if (result) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = v7;
        }
        v20 += result;
        v7 += result ^ 1;
        *v5++ = *v21;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v22 = 0;
            do
            {
              v5[v22] = v20[v22];
              ++v22;
            }
            while (&v20[v22] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v23 = 0;
        do
        {
          v5[v23] = v7[v23];
          ++v23;
        }
        while (&v7[v23] != v19);
      }
    }
    else if (result != a2)
    {
      unsigned int v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        int v14 = a5;
        do
        {
          uint64_t v15 = v14++;
          BOOL result = (uint64_t *)(*a3)(v12, v15);
          uint64_t v16 = v14;
          if (result)
          {
            v15[1] = *v15;
            uint64_t v16 = v5;
            if (v15 != v5)
            {
              uint64_t v17 = v13;
              while (1)
              {
                uint64_t v16 = (uint64_t *)((char *)v5 + v17);
                BOOL result = (uint64_t *)(*a3)(v12, (uint64_t *)((char *)v5 + v17 - 8));
                if (!result) {
                  break;
                }
                *(uint64_t *)((char *)v5 + v17) = *(uint64_t *)((char *)v5 + v17 - 8);
                v17 -= 8;
                if (!v17)
                {
                  uint64_t v16 = v5;
                  break;
                }
              }
            }
          }
          uint64_t v18 = *v12++;
          *uint64_t v16 = v18;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1BBAA5190(uint64_t result, void *a2, void *a3, uint64_t (**a4)(void, void), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  uint64_t v15 = (void *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    while (1)
    {
      BOOL result = (*a4)(a2, v15);
      if (result) {
        break;
      }
      ++v15;
      if (!--a5) {
        return result;
      }
    }
    __src = a7;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        uint64_t v65 = *v15;
        *uint64_t v15 = *a2;
        *a2 = v65;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v22 = a5;
      }
      else {
        uint64_t v22 = a5 + 1;
      }
      uint64_t v72 = v22 >> 1;
      unint64_t v20 = &v15[v22 >> 1];
      if (a3 == a2)
      {
        uint64_t v18 = a3;
        uint64_t v27 = a3;
      }
      else
      {
        uint64_t v69 = v10;
        uint64_t v68 = a8;
        uint64_t v23 = (uint64_t (*)(void *, void *))*a4;
        unint64_t v24 = a3 - a2;
        uint64_t v18 = a2;
        do
        {
          BOOL v25 = &v18[v24 >> 1];
          int v26 = v23(v25, v20);
          if (v26) {
            v24 += ~(v24 >> 1);
          }
          else {
            v24 >>= 1;
          }
          if (v26) {
            uint64_t v18 = v25 + 1;
          }
        }
        while (v24);
        uint64_t v27 = a2;
        a8 = v68;
        uint64_t v10 = v69;
      }
      uint64_t v17 = v18 - v27;
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = v10 + 1;
      }
      uint64_t v17 = v16 >> 1;
      uint64_t v18 = &a2[v16 >> 1];
      if (a2 == v15)
      {
        unint64_t v20 = a2;
        uint64_t v21 = a2;
      }
      else
      {
        uint64_t v71 = v16 >> 1;
        uint64_t v67 = a8;
        unint64_t v19 = a2 - v15;
        unint64_t v20 = v15;
        do
        {
          if ((*a4)(v18, &v20[v19 >> 1]))
          {
            v19 >>= 1;
          }
          else
          {
            v20 += (v19 >> 1) + 1;
            v19 += ~(v19 >> 1);
          }
        }
        while (v19);
        uint64_t v21 = v15;
        a8 = v67;
        uint64_t v17 = v71;
      }
      uint64_t v72 = v20 - v21;
    }
    uint64_t v28 = v18;
    if (v20 != a2)
    {
      uint64_t v28 = v20;
      if (a2 != v18)
      {
        if (v20 + 1 == a2)
        {
          uint64_t v70 = v10;
          uint64_t v35 = *v20;
          int64_t v36 = (char *)v18 - (char *)a2;
          uint64_t v37 = a2;
          size_t v38 = (char *)v18 - (char *)a2;
          uint64_t v39 = v17;
          memmove(v20, v37, v38);
          uint64_t v17 = v39;
          uint64_t v28 = (void *)((char *)v20 + v36);
          *uint64_t v28 = v35;
        }
        else
        {
          if (a2 + 1 != v18)
          {
            uint64_t v29 = a2 - v20;
            if (v29 == v18 - a2)
            {
              uint64_t v30 = 0;
              do
              {
                uint64_t v31 = v20[v30];
                v20[v30] = a2[v30];
                uint64_t v32 = (uint64_t)&v20[v30 + 1];
                a2[v30] = v31;
                uint64_t v33 = (uint64_t)&a2[++v30];
              }
              while ((void *)v32 != a2 && v33 != (void)v18);
              uint64_t v28 = a2;
            }
            else
            {
              uint64_t v43 = v18 - a2;
              uint64_t v44 = a2 - v20;
              do
              {
                uint64_t v45 = v44;
                uint64_t v44 = v43;
                uint64_t v43 = v45 % v43;
              }
              while (v43);
              if (v44)
              {
                BOOL v46 = &v20[v44];
                do
                {
                  uint64_t v48 = *--v46;
                  uint64_t v47 = v48;
                  uint64_t v49 = &v46[v29];
                  __int32 v50 = v46;
                  do
                  {
                    uint64_t v51 = v50;
                    __int32 v50 = v49;
                    *uint64_t v51 = *v49;
                    BOOL v52 = __OFSUB__(v29, v18 - v49);
                    uint64_t v54 = v29 - (v18 - v49);
                    char v53 = (v54 < 0) ^ v52;
                    uint64_t v49 = &v20[v54];
                    if (v53) {
                      uint64_t v49 = &v50[v29];
                    }
                  }
                  while (v49 != v46);
                  *__int32 v50 = v47;
                }
                while (v46 != v20);
              }
              uint64_t v28 = &v20[v18 - a2];
            }
            goto LABEL_64;
          }
          uint64_t v70 = v10;
          uint64_t v40 = a8;
          uint64_t v41 = *(v18 - 1);
          uint64_t v28 = v20 + 1;
          if (v18 - 1 != v20)
          {
            uint64_t v42 = v17;
            memmove(v20 + 1, v20, (char *)(v18 - 1) - (char *)v20);
            uint64_t v17 = v42;
          }
          *unint64_t v20 = v41;
          a8 = v40;
        }
        uint64_t v10 = v70;
      }
    }
LABEL_64:
    a5 -= v72;
    v10 -= v17;
    if (v72 + v17 >= a5 + v10)
    {
      int v56 = a3;
      uint64_t v57 = v17;
      BOOL result = sub_1BBAA5190(v28, v18, v56, a4, a5, v10, __src, a8);
      uint64_t v18 = v20;
      a7 = __src;
      uint64_t v10 = v57;
      a5 = v72;
      a3 = v28;
    }
    else
    {
      uint64_t v55 = v20;
      a7 = __src;
      BOOL result = sub_1BBAA5190(v15, v55, v28, a4, v72, v17, __src, a8);
      uint64_t v15 = v28;
    }
    a2 = v18;
    if (!v10) {
      return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      uint64_t v62 = 0;
      do
      {
        *(void *)&a7[v62 * 8] = v15[v62];
        ++v62;
      }
      while (&v15[v62] != a2);
      char v63 = &a7[v62 * 8];
      if (&a7[v62 * 8] != a7)
      {
        while (a2 != a3)
        {
          BOOL result = (*a4)(a2, a7);
          if (result) {
            int v64 = (char *)a2;
          }
          else {
            int v64 = a7;
          }
          a7 += 8 * (result ^ 1);
          a2 += result;
          *v15++ = *(void *)v64;
          if (a7 == v63) {
            return result;
          }
        }
        return (uint64_t)memmove(v15, a7, v63 - a7);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v58 = 0;
    do
    {
      *(void *)&a7[v58 * 8] = a2[v58];
      ++v58;
    }
    while (&a2[v58] != a3);
    unsigned int v59 = &a7[v58 * 8];
    if (&a7[v58 * 8] != a7)
    {
      uint64_t v60 = a3 - 1;
      while (a2 != v15)
      {
        BOOL result = (*a4)(v59 - 8, a2 - 1);
        if (result) {
          int v61 = (char *)a2;
        }
        else {
          int v61 = v59;
        }
        if (result) {
          --a2;
        }
        else {
          v59 -= 8;
        }
        *v60-- = *((void *)v61 - 1);
        if (v59 == a7) {
          return result;
        }
      }
      uint64_t v66 = 0;
      do
      {
        v60[v66] = *(void *)&v59[v66 * 8 - 8];
        --v66;
      }
      while (&v59[v66 * 8] != a7);
    }
  }
  return result;
}

BOOL sub_1BBAA56A4(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 4) > *(unsigned __int16 *)(a2 + 4);
}

BOOL sub_1BBAA56B8(__int16 *a1, __int16 *a2, unsigned int a3)
{
  int v3 = *((unsigned __int8 *)a1 + 8);
  if (v3 != *((unsigned __int8 *)a2 + 8)) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)a1 + 9);
  if (v4 != *((unsigned __int8 *)a2 + 9)) {
    return 0;
  }
  if (v3 == 255) {
    goto LABEL_7;
  }
  int v5 = *a1 - *a2;
  if (v5 < 0) {
    int v5 = *a2 - *a1;
  }
  if (v5 > a3)
  {
LABEL_7:
    BOOL v6 = 0;
  }
  else
  {
    int v7 = a1[1] - a2[1];
    if (v7 < 0) {
      int v7 = a2[1] - a1[1];
    }
    BOOL v6 = v7 <= a3;
  }
  if (v3 != 255 && !v6) {
    return 0;
  }
  if (v4 == 255) {
    goto LABEL_19;
  }
  int v9 = a1[2] - a2[2];
  if (v9 < 0) {
    int v9 = a2[2] - a1[2];
  }
  if (v9 > a3)
  {
LABEL_19:
    BOOL v10 = 0;
  }
  else
  {
    int v12 = a1[3] - a2[3];
    if (v12 < 0) {
      int v12 = a2[3] - a1[3];
    }
    BOOL v10 = v12 <= a3;
  }
  int v13 = v4 == 255 || v10;
  return v13 != 0;
}

unint64_t *sub_1BBAA5780(uint64_t a1, int *a2)
{
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 1888) + 21);
  char v73 = 0;
  *(_DWORD *)(a1 + 212) = 0;
  if (v4 && !*(_DWORD *)(a1 + 4428) && *(_DWORD *)(a1 + 4432))
  {
    uint64_t v5 = *(void *)(a1 + 944);
    BOOL v6 = *(_OWORD **)(a1 + 1872);
    long long v7 = v6[68];
    long long v8 = v6[69];
    long long v9 = v6[70];
    *(_OWORD *)(v5 + 72) = v6[67];
    *(_OWORD *)(v5 + 120) = v9;
    *(_OWORD *)(v5 + 104) = v8;
    *(_OWORD *)(v5 + 88) = v7;
    long long v10 = v6[65];
    *(_OWORD *)(v5 + 56) = v6[66];
    *(_OWORD *)(v5 + 40) = v10;
    long long v11 = v6[72];
    long long v12 = v6[73];
    long long v13 = *(_OWORD *)((char *)v6 + 1181);
    *(_OWORD *)(v5 + 136) = v6[71];
    *(_OWORD *)(v5 + 181) = v13;
    *(_OWORD *)(v5 + 168) = v12;
    *(_OWORD *)(v5 + 152) = v11;
  }
  uint64_t v14 = *(void *)(a1 + 944);
  *(unsigned char *)(v14 + 197) = 1;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v15 = *(void *)(a1 + 1872);
  int v16 = *(unsigned __int8 *)(v15 + 496);
  int v17 = *(unsigned __int8 *)(v15 + 497);
  if (!*(unsigned char *)(v15 + 496))
  {
    if (!*(unsigned char *)(v15 + 497)) {
      goto LABEL_67;
    }
    int v17 = 1;
  }
  int v71 = v17;
  uint64_t v18 = *(int *)(a1 + 4420);
  int v19 = *(_DWORD *)(a1 + 4424);
  int v20 = *(_DWORD *)(v15 + 78140) * v19;
  uint64_t v72 = *(void *)(*(void *)(v15 + 78120) + 664);
  uint64_t v70 = v15 + 78120;
  uint64_t v21 = *(void *)(v15 + 79048) + 2 * v20;
  if ((int)v18 < 1
    || (sub_1BBA1CA34((unint64_t *)v14, *(unsigned __int8 *)(v21 + 2 * v18), (unsigned char *)(v14 + 40)),
        !*(unsigned char *)(v21 + 2 * v18)))
  {
    if (v19 < 1
      || (int v22 = v4,
          uint64_t v23 = a2,
          uint64_t v24 = v21 + 2 * v18,
          sub_1BBA1CA34((unint64_t *)v14, *(unsigned __int8 *)(v24 + 1), (unsigned char *)(v14 + 40)),
          int v25 = *(unsigned __int8 *)(v24 + 1),
          a2 = v23,
          int v4 = v22,
          !v25))
    {
      uint64_t v26 = v20 + (int)v18;
      uint64_t v27 = (unsigned char *)(v72 + 16 * v26);
      if (v16)
      {
        uint64_t v28 = (unsigned char *)(v14 + 41);
        if (*v27)
        {
          sub_1BBA1CA34((unint64_t *)v14, 1, v28);
          sub_1BBA1CB10((unint64_t *)v14, (*v27 & 8) == 0);
          int v29 = *(unsigned __int8 *)(v70 + 33);
          uint64_t v30 = v72 + 16 * v26;
          uint64_t v31 = v30 + 1;
          if ((*v27 & 0xE) == 8)
          {
            uint64_t v32 = v26;
            uint64_t v33 = 0;
            int v34 = *(unsigned __int8 *)(v30 + 13);
            do
            {
              int v35 = *(char *)(v31 + v33);
              if (v35 < 0) {
                int v35 = -v35;
              }
              if (v29 >= v35) {
                unsigned int v36 = v35;
              }
              else {
                unsigned int v36 = v29;
              }
              int v37 = v35 < v29;
              if (v36 > 0x15) {
                sub_1BBA1CD18((unint64_t *)v14, v36, v37);
              }
              else {
                sub_1BBA1CC5C((unint64_t *)v14, ~v37, v36 + v37);
              }
              ++v33;
            }
            while (v33 != 4);
            for (uint64_t i = 0; i != 4; ++i)
            {
              if (*(unsigned char *)(v31 + i)) {
                sub_1BBA1CB10((unint64_t *)v14, (*(char *)(v31 + i) >> 7) & 1);
              }
            }
            sub_1BBA1CC5C((unint64_t *)v14, v34, 5);
            uint64_t v26 = v32;
          }
          else
          {
            sub_1BBAD2AC4(*(unsigned __int8 *)(v70 + 33), (unint64_t *)v14, (char *)(v30 + 1));
            sub_1BBA1CC5C((unint64_t *)v14, (*v27 >> 1) & 7, 2);
          }
        }
        else
        {
          sub_1BBA1CA34((unint64_t *)v14, 0, v28);
        }
      }
      if (v71)
      {
        uint64_t v39 = (unsigned char *)(v14 + 41);
        if ((*v27 & 0x10) != 0)
        {
          int v40 = v4;
          sub_1BBA1CA34((unint64_t *)v14, 1, v39);
          sub_1BBA1CB10((unint64_t *)v14, (*v27 >> 7) ^ 1);
          int v41 = *(unsigned __int8 *)(v70 + 33);
          uint64_t v42 = v72 + 16 * v26;
          uint64_t v43 = v42 + 5;
          if ((*v27 & 0xE0) == 0x80)
          {
            uint64_t v44 = v26;
            uint64_t v45 = 0;
            int v46 = *(unsigned __int8 *)(v42 + 14);
            do
            {
              int v47 = *(char *)(v43 + v45);
              if (v47 < 0) {
                int v47 = -v47;
              }
              if (v41 >= v47) {
                unsigned int v48 = v47;
              }
              else {
                unsigned int v48 = v41;
              }
              int v49 = v47 < v41;
              if (v48 > 0x15) {
                sub_1BBA1CD18((unint64_t *)v14, v48, v49);
              }
              else {
                sub_1BBA1CC5C((unint64_t *)v14, ~v49, v48 + v49);
              }
              ++v45;
            }
            while (v45 != 4);
            for (uint64_t j = 0; j != 4; ++j)
            {
              if (*(unsigned char *)(v43 + j)) {
                sub_1BBA1CB10((unint64_t *)v14, (*(char *)(v43 + j) >> 7) & 1);
              }
            }
            sub_1BBA1CC5C((unint64_t *)v14, v46, 5);
            uint64_t v51 = 0;
            int v52 = *(unsigned __int8 *)(v70 + 33);
            uint64_t v53 = v72 + 16 * v44;
            uint64_t v54 = v53 + 9;
            int v55 = *(unsigned __int8 *)(v53 + 15);
            do
            {
              int v56 = *(char *)(v54 + v51);
              if (v56 < 0) {
                int v56 = -v56;
              }
              if (v52 >= v56) {
                unsigned int v57 = v56;
              }
              else {
                unsigned int v57 = v52;
              }
              int v58 = v56 < v52;
              if (v57 > 0x15) {
                sub_1BBA1CD18((unint64_t *)v14, v57, v58);
              }
              else {
                sub_1BBA1CC5C((unint64_t *)v14, ~v58, v57 + v58);
              }
              ++v51;
            }
            while (v51 != 4);
            for (uint64_t k = 0; k != 4; ++k)
            {
              if (*(unsigned char *)(v54 + k)) {
                sub_1BBA1CB10((unint64_t *)v14, (*(char *)(v54 + k) >> 7) & 1);
              }
            }
            sub_1BBA1CC5C((unint64_t *)v14, v55, 5);
          }
          else
          {
            sub_1BBAD2AC4(*(unsigned __int8 *)(v70 + 33), (unint64_t *)v14, (char *)(v42 + 5));
            sub_1BBA1CC5C((unint64_t *)v14, *v27 >> 5, 2);
            sub_1BBAD2AC4(*(unsigned __int8 *)(v70 + 33), (unint64_t *)v14, (char *)(v42 + 9));
          }
          int v4 = v40;
        }
        else
        {
          sub_1BBA1CA34((unint64_t *)v14, 0, v39);
        }
      }
    }
  }
LABEL_67:
  BOOL result = sub_1BBA9AF40((unint64_t *)a1, *(_DWORD *)(a1 + 4428), *(_DWORD *)(a1 + 4432), 0, *(unsigned int *)(a1 + 4436), a2, &v73);
  if (v4 && *(_DWORD *)(a1 + 4420) == 1)
  {
    int v61 = *(_OWORD **)(a1 + 1872);
    uint64_t v62 = *(void *)(a1 + 944);
    long long v63 = *(_OWORD *)(v62 + 88);
    long long v64 = *(_OWORD *)(v62 + 104);
    long long v65 = *(_OWORD *)(v62 + 120);
    v61[67] = *(_OWORD *)(v62 + 72);
    v61[70] = v65;
    v61[69] = v64;
    v61[68] = v63;
    long long v66 = *(_OWORD *)(v62 + 152);
    long long v67 = *(_OWORD *)(v62 + 168);
    long long v68 = *(_OWORD *)(v62 + 181);
    v61[71] = *(_OWORD *)(v62 + 136);
    *(_OWORD *)((char *)v61 + 1181) = v68;
    v61[73] = v67;
    v61[72] = v66;
    long long v69 = *(_OWORD *)(v62 + 40);
    v61[66] = *(_OWORD *)(v62 + 56);
    v61[65] = v69;
  }
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(*(void *)(a1 + 952) + 613);
  return result;
}

uint64_t sub_1BBAA5CB4(uint64_t a1, int a2, int a3, int a4)
{
  if (a4 == 2)
  {
    uint64_t v5 = *(void **)(a1 + 8136);
    uint64_t v6 = *v5 * (int)(a3 & 0xFFFFFFFC) + (a2 >> 2);
    uint64_t v7 = v5[14];
    return *(unsigned __int8 *)(v7 + v6);
  }
  if (a4 == 3)
  {
    long long v8 = *(void **)(a1 + 8136);
    uint64_t v6 = *v8 * (int)((a3 >> 2) & 0xFFFFFFFE) + (a2 >> 3);
    uint64_t v7 = v8[13];
    return *(unsigned __int8 *)(v7 + v6);
  }
  if (a4 != 4) {
    return 0;
  }
  if (*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8136) + 96)
                          + **(void **)(a1 + 8136) * ((uint64_t)a3 >> 4)
                          + (a2 >> 4)) >= 2u)
    return 2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8136) + 96)
                            + **(void **)(a1 + 8136) * ((uint64_t)a3 >> 4)
                            + (a2 >> 4));
}

void sub_1BBAA5D54(uint64_t a1, char a2)
{
  uint64_t v4 = 0;
  *(_DWORD *)(a1 + 4240) = 6;
  *(void *)(a1 + 88) = sub_1BBAA6AB8;
  *(void *)(a1 + 96) = sub_1BBAA6A70;
  *(void *)(a1 + 104) = sub_1BBAA6A08;
  *(void *)(a1 + 112) = sub_1BBAC8A70;
  *(void *)(a1 + 120) = Filter8tapV_neon64;
  *(void *)(a1 + 128) = Filter8tapH_neon64;
  *(void *)(a1 + 136) = Filter8tapH_chroma_neon64;
  uint64_t v5 = (_WORD *)(a1 + 2192);
  do
  {
    int v6 = dword_1BBB8BE68[v4];
    sub_1BBAA5F8C(v6, v5 - 1024, 4u, *(_DWORD *)(a1 + 4240));
    sub_1BBAA5F8C(v6, v5, 8u, *(_DWORD *)(a1 + 4240));
    ++v4;
    v5 += 128;
  }
  while (v4 != 8);
  *(unsigned char *)(a1 + 4244) = a2;
  *(void *)(a1 + 4248) = 0;
  operator new();
}

void sub_1BBAA5F60(_Unwind_Exception *a1)
{
  int v3 = sub_1BB9C607C(v1);
  MEMORY[0x1C18605E0](v3, 0xC0C40B8AA526DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBAA5F8C(int a1, _WORD *a2, unsigned int a3, char a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  double v7 = (double)a1 * 0.125;
  int v8 = 16 * a3;
  bzero(v61, 16 * a3);
  uint64_t v9 = 0;
  int v10 = v8 - 2;
  if (v8 <= 2) {
    int v11 = 2;
  }
  else {
    int v11 = v8;
  }
  uint64_t v12 = (v11 - 1);
  do
  {
    double v13 = ((double)(int)v9 - (double)v10 * 0.5) * 3.14159265;
    if (v13 == 0.0)
    {
      double v15 = 1.0;
    }
    else
    {
      long double v14 = sin(v7 * (v13 * 0.0625));
      double v15 = (v14 / v13 * 16.0 / v7 + v14 / v13 * 16.0 / v7) * (sin(v7 * (v13 * 0.0625 * 0.5)) / v13 * 16.0 / v7);
    }
    *(double *)&v61[++v9] = v15;
  }
  while (v12 != v9);
  v61[(v10 >> 1) + 1] = 0x3FF0000000000000;
  uint64_t v16 = a3 - 1;
  double v17 = 0.0;
  uint64_t v18 = 16;
  uint64_t v19 = v16;
  do
  {
    double v17 = v17 + *(double *)&v61[v18];
    v18 += 16;
    --v19;
  }
  while (v19);
  int v20 = 1 << a4;
  double v21 = (double)(1 << a4);
  uint64_t v22 = 16;
  uint64_t v23 = a2;
  do
  {
    double v24 = *(double *)&v61[v22] * v21 / v17;
    if (v24 <= 0.0) {
      double v25 = -0.5;
    }
    else {
      double v25 = 0.5;
    }
    *v23++ = (int)(v24 + v25);
    v22 += 16;
    --v16;
  }
  while (v16);
  __int16 v26 = 0;
  uint64_t v27 = a3 - 1;
  a2[v27] = 0;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  do
  {
    __int16 v30 = *v28++;
    v26 += v30;
    --v29;
  }
  while (v29);
  uint64_t v31 = (unsigned __int16)(v20 - v26);
  uint64_t v32 = a3 >> 1;
  uint64_t v33 = (v32 - 1);
  a2[v33] += v31;
  int v34 = a2 + 8;
  unint64_t v35 = 1;
  uint64_t result = 120;
  do
  {
    double v37 = 0.0;
    uint64_t v38 = result;
    uint64_t v39 = a3 + 1 - 1;
    do
    {
      double v37 = v37 + *(double *)((char *)v61 + v38);
      v38 += 128;
      --v39;
    }
    while (v39);
    int v40 = v61;
    int v41 = v34;
    uint64_t v42 = a3 + 1 - 1;
    do
    {
      double v43 = *(double *)&v40[result] * v21 / v37;
      if (v43 <= 0.0) {
        double v44 = -0.5;
      }
      else {
        double v44 = 0.5;
      }
      *v41++ = (int)(v43 + v44);
      v40 += 128;
      --v42;
    }
    while (v42);
    uint64_t v45 = 0;
    int v46 = 0;
    do
    {
      if (v46 <= (__int16)v34[v45]) {
        int v46 = (__int16)v34[v45];
      }
      ++v45;
    }
    while (a3 != v45);
    if (v46 <= 100)
    {
      uint64_t v56 = 0;
      int v53 = 0;
      do
        v53 += (__int16)v34[v56++];
      while (a3 != v56);
      if (v35 == 8)
      {
        BOOL v50 = __OFSUB__(v20, v53);
        int v57 = v20 - v53;
        if (v57 < 0 != v50) {
          int v58 = v57 + 1;
        }
        else {
          int v58 = v57;
        }
        int v53 = v58 >> 1;
        a2[v32 + 64] += v58 >> 1;
        int v55 = &a2[v33 + 64];
      }
      else
      {
        LOWORD(v53) = v20 - v53;
        if (v35 <= 7) {
          int v55 = &a2[8 * v35 + v27];
        }
        else {
          int v55 = &a2[8 * v35];
        }
      }
    }
    else
    {
      uint64_t v47 = 0;
      do
      {
        v34[v47] = (int)(100.0 / (double)v46 * (double)(__int16)v34[v47]);
        ++v47;
      }
      while (a3 + 1 - 1 != v47);
      uint64_t v48 = 0;
      int v49 = 0;
      do
        v49 += (__int16)v34[v48++];
      while (a3 != v48);
      BOOL v50 = __OFSUB__(v20, v49);
      int v51 = v20 - v49;
      if (v51 < 0 != v50) {
        int v52 = v51 + 1;
      }
      else {
        int v52 = v51;
      }
      int v53 = v52 >> 1;
      uint64_t v54 = &a2[8 * v35];
      v54[v32] += v52 >> 1;
      int v55 = &v54[v33];
    }
    uint64_t v59 = 0;
    __int16 v60 = 0;
    *v55 += v53;
    do
      v60 += v34[v59++];
    while (a3 != v59);
    a2[8 * v35++ + v33] += v20 - v60;
    result -= 8;
    v34 += 8;
  }
  while (v35 != 16);
  return result;
}

uint64_t sub_1BBAA6374(_DWORD *a1, int a2, int a3, int a4, int a5, CVPixelBufferRef pixelBuffer, __CVBuffer *a7)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a7)) {
    return 4294954394;
  }
  uint64_t result = 4294954394;
  if (a2 >= 16 && a3 >= 16 && a4 >= 16 && a5 >= 16)
  {
    if (!sub_1BBAA644C(a2, a3, a1[1062], a1[1063], pixelBuffer))
    {
      uint64_t result = sub_1BBAA644C(a4, a5, 0, 0, a7);
      if (!result)
      {
        a1[16] = a2;
        a1[17] = a3;
        a1[18] = a4;
        a1[19] = a5;
        return result;
      }
    }
    return 4294954394;
  }
  return result;
}

uint64_t sub_1BBAA644C(int a1, int a2, int a3, int a4, CVPixelBufferRef pixelBuffer)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v14 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(pixelBuffer, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v14);
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t v11 = extraColumnsOnLeft + Width + extraColumnsOnRight;
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  uint64_t result = 4294954394;
  if (v11 >= a3 + a1)
  {
    if (extraRowsOnTop + Height + v14 >= a4 + a2) {
      return 0;
    }
    else {
      return 4294954394;
    }
  }
  return result;
}

uint64_t sub_1BBAA6500(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(result + 16);
  if (v5 != *(void *)result && *(void *)(result + 24) != *(void *)(result + 8))
  {
    unsigned __int8 v116 = v114;
    uint64_t v117 = result;
    uint64_t v6 = *(void *)(result + 48);
    int v7 = *(_DWORD *)(result + 76);
    uint64_t v8 = *(void *)(result + 32);
    uint64_t v9 = *(int *)(result + 64);
    uint64_t v10 = MEMORY[0x1F4188790](*(void *)(result + 96), a2, a3, *(unsigned int *)(result + 68), a5, *(void *)(result + 88));
    uint64_t v16 = MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15);
    uint64_t v18 = (char *)v114 - ((v17 + 15) & 0x1FFFFFFF0);
    uint64_t v24 = MEMORY[0x1F4188790](v16, v19, v20, v21, v22, v23);
    int v34 = (char *)v114 - ((v33 + 15) & 0x1FFFFFFF0);
    if ((int)v31 >= 1 && v7 >= 1)
    {
      int v123 = (void (*)(uint64_t, unint64_t, uint64_t, char *, unint64_t))v24;
      uint64_t v35 = 0;
      unsigned int v36 = 0;
      char v37 = 0;
      unint64_t v38 = (v30 + 30) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v39 = v31;
      do
      {
        unsigned int v40 = HIWORD(v36);
        *(unsigned char *)(((unint64_t)(v34 + 15) & 0xFFFFFFFFFFFFFFF0) + v35) = (unsigned __int16)v36 >> 12;
        v36 += (v9 << 16) / (int)v31;
        v18[v35++] = v40 - v37;
        char v37 = v40;
      }
      while (v31 != v35);
      unint64_t v122 = (unint64_t)(v34 + 15) & 0xFFFFFFFFFFFFFFF0;
      int v41 = v26 << 16;
      if ((int)v31 <= 2147483631)
      {
        if (v29 <= (int)v31 + 1) {
          int v29 = v31 + 1;
        }
        unint64_t v120 = v32;
        uint64_t v121 = v9;
        uint64_t v42 = v28;
        int v43 = v26;
        int v44 = v26 << 16;
        bzero(&v18[v31], (v29 + ~v31) + 1);
        int v41 = v44;
        LODWORD(v26) = v43;
        uint64_t v28 = v42;
        unint64_t v32 = v120;
        uint64_t v9 = v121;
      }
      unsigned int v45 = 0;
      int v46 = v26 - 1;
      uint64_t v121 = (int)v9 - 1;
      LODWORD(v120) = v41 / v7;
      int v118 = v18;
      uint64_t v119 = v39;
      do
      {
        uint64_t v47 = HIWORD(v45);
        uint64_t v48 = (unsigned __int16)v45 >> 12;
        v45 += v120;
        unint64_t v49 = v32 + v8 * v47;
        if (v46 >= (int)v47 + 1) {
          int v50 = v47 + 1;
        }
        else {
          int v50 = v46;
        }
        unint64_t v51 = v32 + v8 * v50;
        uint64_t v52 = v8;
        uint64_t v53 = v6;
        unint64_t v54 = v32;
        int v55 = v28;
        v28(v38, v49, v51, v9, v48);
        unint64_t v56 = v122;
        *(_WORD *)(v38 + 2 * v9) = *(_WORD *)(v38 + 2 * v121);
        v123(v5, v38, v119, v118, v56);
        uint64_t v28 = v55;
        unint64_t v32 = v54;
        uint64_t v6 = v53;
        uint64_t v8 = v52;
        v5 += v6;
        --v7;
      }
      while (v7);
    }
    v114[1] = v114;
    uint64_t v57 = *(void *)(v117 + 24);
    uint64_t v58 = *(void *)(v117 + 56);
    uint64_t v59 = *(void *)(v117 + 40);
    __int16 v60 = *(void (**)(uint64_t, unint64_t, uint64_t, char *, unint64_t))(v117 + 104);
    unint64_t v61 = *(int *)(v117 + 64) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v62 = MEMORY[0x1F4188790](*(unsigned int *)(v117 + 72), v25, (*(int *)(v117 + 72) >> 1), v26, v27, *(void *)(v117 + 88));
    uint64_t v68 = MEMORY[0x1F4188790](v62, v63, v64, v65, v66, v67);
    uint64_t result = MEMORY[0x1F4188790](v68, v70, v71, v72, (char *)v114 - ((v69 + 15) & 0x1FFFFFFF0), v73);
    __int16 v84 = (char *)v114 - ((v83 + 15) & 0x1FFFFFFF0);
    if ((int)result > 1 && v80 >= 2)
    {
      int v123 = v60;
      uint64_t v85 = 0;
      unsigned int v86 = 0;
      char v87 = 0;
      int v88 = v80 >> 1;
      int v89 = v81 >> 1;
      unint64_t v90 = (v82 + 30) & 0xFFFFFFFFFFFFFFF0;
      unint64_t v91 = (unint64_t)(v84 + 15) & 0xFFFFFFFFFFFFFFF0;
      int v92 = v81 >> 1 << 16;
      if (v74 <= 1) {
        uint64_t v93 = 1;
      }
      else {
        uint64_t v93 = v74;
      }
      uint64_t v94 = v75;
      do
      {
        unsigned int v95 = HIWORD(v86);
        *(unsigned char *)(v91 + v85) = (unsigned __int16)v86 >> 12;
        v86 += (int)((v78 << 15) & 0xFFFF0000) / v74;
        *(unsigned char *)(v75 + v85++) = 2 * (v95 - v87);
        char v87 = v95;
      }
      while (v93 != v85);
      unint64_t v122 = v91;
      LODWORD(v119) = v74;
      if ((int)v93 < v79)
      {
        LODWORD(v120) = v89;
        uint64_t v121 = v58;
        uint64_t v96 = v77;
        unint64_t v97 = v76;
        unint64_t v98 = v61;
        uint64_t v99 = v78;
        int v100 = v80 >> 1;
        int v101 = v92;
        bzero((void *)(v75 + v93), (v74 - v93 + 15) + 1);
        int v89 = v120;
        int v92 = v101;
        int v88 = v100;
        uint64_t v78 = v99;
        unint64_t v61 = v98;
        unsigned int v76 = v97;
        uint64_t v77 = v96;
        uint64_t v58 = v121;
      }
      unsigned int v102 = 0;
      uint64_t v121 = v94;
      int v103 = v89 - 1;
      unint64_t v120 = v61 - 2;
      uint64_t v117 = v78 | 1;
      int v118 = (char *)(int)v61;
      unsigned __int8 v116 = (void *)((int)v61 - 1);
      if (v88 <= 1) {
        int v104 = 1;
      }
      else {
        int v104 = v88;
      }
      int v115 = v92 / v88;
      do
      {
        uint64_t v105 = HIWORD(v102);
        uint64_t v106 = (unsigned __int16)v102 >> 12;
        v102 += v115;
        uint64_t v107 = v77 + v59 * v105;
        if (v103 >= (int)v105 + 1) {
          int v108 = v105 + 1;
        }
        else {
          int v108 = v103;
        }
        uint64_t v109 = v77 + v59 * v108;
        uint64_t v110 = v59;
        uint64_t v111 = v77;
        unsigned __int32 v112 = v76;
        v76(v90, v107, v109, v61, v106);
        uint64_t v113 = v121;
        *(_WORD *)(v90 + 2 * (void)v118) = *(_WORD *)(v90 + 2 * v120);
        *(_WORD *)(v90 + 2 * v117) = *(_WORD *)(v90 + 2 * (void)v116);
        uint64_t result = ((uint64_t (*)(uint64_t, unint64_t, void, uint64_t, unint64_t))v123)(v57, v90, v119, v113, v122);
        unsigned int v76 = v112;
        uint64_t v77 = v111;
        uint64_t v59 = v110;
        v57 += v58;
        --v104;
      }
      while (v104);
    }
  }
  return result;
}

uint64_t sub_1BBAA6A08(uint64_t result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = a3;
    uint64_t v6 = (unsigned char *)(result + 1);
    do
    {
      __int16 v8 = *a5++;
      __int16 v7 = v8;
      unsigned int v9 = *a4++;
      a2 += v9;
      *(v6 - 1) = (unsigned __int16)(a2[2] * v7 + (16 - v7) * *a2 + 128) >> 8;
      *uint64_t v6 = (unsigned __int16)(a2[3] * v7 + (16 - v7) * a2[1] + 128) >> 8;
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  return result;
}

unsigned char *sub_1BBAA6A70(unsigned char *result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = a3;
    do
    {
      __int16 v7 = *a5++;
      __int16 v6 = v7;
      __int16 v8 = 16 - v7;
      unsigned int v9 = *a4++;
      a2 += v9;
      *result++ = (unsigned __int16)(a2[1] * v6 + v8 * *a2 + 128) >> 8;
      --v5;
    }
    while (v5);
  }
  return result;
}

_WORD *sub_1BBAA6AB8(_WORD *result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, __int16 a5)
{
  if (a4 >= 1)
  {
    uint64_t v5 = a4;
    do
    {
      __int16 v6 = *a2++;
      __int16 v7 = (16 - a5) * v6;
      __int16 v8 = *a3++;
      *result++ = v7 + v8 * a5;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1BBAA6AEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    for (uint64_t i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (uint64_t j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = *(_WORD *)(a3 + 2 * j) >> 7;
      }
      result += 2 * a2;
      a3 += 2 * a4;
    }
  }
  return result;
}

uint64_t sub_1BBAA6B34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    for (uint64_t i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (uint64_t j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = *(_WORD *)(a3 + 2 * j) << 7;
      }
      result += 2 * a2;
      a3 += 2 * a4;
    }
  }
  return result;
}

uint64_t sub_1BBAA6B7C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 1368);
  int v3 = *(unsigned __int8 *)(v2 + 2000);
  if (v3 == 8)
  {
    uint64_t v4 = sub_1BBAA86B0;
    if (*(unsigned char *)(*(void *)(a2 + 1384) + 19)) {
      goto LABEL_9;
    }
    BOOL v5 = *(unsigned char *)(v2 + 255) == 0;
    __int16 v6 = sub_1BBAA86B0;
    uint64_t v4 = sub_1BBAA90BC;
    goto LABEL_7;
  }
  if ((v3 - 9) > 1) {
    return result;
  }
  uint64_t v4 = sub_1BBAA7214;
  if (!*(unsigned char *)(*(void *)(a2 + 1384) + 19))
  {
    BOOL v5 = *(unsigned char *)(v2 + 255) == 0;
    __int16 v6 = sub_1BBAA7214;
    uint64_t v4 = sub_1BBAA7DFC;
LABEL_7:
    if (!v5) {
      uint64_t v4 = v6;
    }
  }
LABEL_9:
  *(void *)(result + 408) = v4;
  *(void *)(result + 416) = 0;
  *(unsigned char *)(result + 32) = v3;
  int v7 = -1 << (v3 - 5);
  *(unsigned char *)(result + 33) = ~(_BYTE)v7;
  if ((v7 & 0x80) == 0) {
    return result;
  }
  __int16 v8 = sub_1BB9FDE68;
  unsigned int v9 = sub_1BB9FE008;
  uint64_t v10 = sub_1BB9FE154;
  uint64_t v11 = sub_1BB9FE658;
  uint64_t v12 = sub_1BB9FEB64;
  uint64_t v13 = sub_1BB9FEF88;
  uint64_t v14 = sub_1BB9FF360;
  uint64_t v15 = sub_1BB9FF6AC;
  uint64_t v16 = sub_1BB9FFA04;
  uint64_t v17 = sub_1BB9FFC84;
  uint64_t v18 = sub_1BB9FFEE8;
  int v46 = sub_1BBA00164;
  unsigned int v45 = sub_1BBA003F0;
  int v44 = sub_1BBA005C8;
  int v43 = sub_1BBA0076C;
  uint64_t v42 = sub_1BBA009A0;
  int v41 = sub_1BBA00BE4;
  unsigned int v40 = sub_1BBA00D90;
  uint64_t v39 = sub_1BBA00EEC;
  unint64_t v38 = sub_1BBA0103C;
  char v37 = sub_1BBA01528;
  unsigned int v36 = sub_1BBA01A14;
  uint64_t v35 = sub_1BBA01E14;
  uint64_t v19 = sub_1BBA021D0;
  uint64_t v20 = sub_1BBA022A4;
  uint64_t v21 = sub_1BBA025D4;
  uint64_t v22 = sub_1BBA02908;
  uint64_t v23 = sub_1BBA02B64;
  uint64_t v24 = sub_1BBA02DAC;
  uint64_t v25 = sub_1BBA02E44;
  uint64_t v26 = sub_1BBA030A4;
  uint64_t v27 = sub_1BBA0330C;
  uint64_t v28 = sub_1BBA034C0;
  int v29 = sub_1BBA03648;
  uint64_t v30 = sub_1BBA036CC;
  uint64_t v31 = sub_1BBA038EC;
  unint64_t v32 = sub_1BBA03B14;
  uint64_t v33 = sub_1BBA03CA4;
  if (v3 == 8)
  {
    int v34 = sub_1BB9FDBA4;
  }
  else
  {
    if (v3 != 10) {
      return result;
    }
    int v34 = sub_1BB9FDC78;
    __int16 v8 = sub_1BB9FDEF8;
    unsigned int v9 = sub_1BB9FE098;
    uint64_t v10 = sub_1BB9FE328;
    uint64_t v11 = sub_1BB9FE834;
    uint64_t v12 = sub_1BB9FECC4;
    uint64_t v13 = sub_1BB9FF0E0;
    uint64_t v14 = sub_1BB9FF4B8;
    uint64_t v15 = sub_1BB9FF80C;
    uint64_t v16 = sub_1BB9FFAF4;
    uint64_t v17 = sub_1BB9FFD74;
    uint64_t v18 = sub_1BB9FFFF8;
    int v46 = sub_1BBA0027C;
    unsigned int v45 = sub_1BBA004B8;
    int v44 = sub_1BBA00670;
    int v43 = sub_1BBA0087C;
    uint64_t v42 = sub_1BBA00AB8;
    int v41 = sub_1BBA00CAC;
    unsigned int v40 = sub_1BBA00E38;
    uint64_t v39 = sub_1BBA00F54;
    unint64_t v38 = sub_1BBA01204;
    char v37 = sub_1BBA016F4;
    unsigned int v36 = sub_1BBA01B64;
    uint64_t v35 = sub_1BBA01F5C;
    uint64_t v19 = sub_1BBA02218;
    uint64_t v20 = sub_1BBA023F0;
    uint64_t v21 = sub_1BBA02724;
    uint64_t v22 = sub_1BBA029E8;
    uint64_t v23 = sub_1BBA02C44;
    uint64_t v24 = sub_1BBA02DE4;
    uint64_t v25 = sub_1BBA02F48;
    uint64_t v26 = sub_1BBA031AC;
    uint64_t v27 = sub_1BBA033C4;
    uint64_t v28 = sub_1BBA03558;
    int v29 = sub_1BBA03680;
    uint64_t v30 = sub_1BBA037D0;
    uint64_t v31 = sub_1BBA039F4;
    unint64_t v32 = sub_1BBA03BCC;
    uint64_t v33 = sub_1BBA03D3C;
  }
  *(void *)(result + 88) = v33;
  *(void *)(result + 96) = v32;
  *(void *)(result + 104) = v31;
  *(void *)(result + 112) = v30;
  *(void *)(result + 120) = v29;
  *(void *)(result + 128) = v28;
  *(void *)(result + 136) = v27;
  *(void *)(result + 144) = v26;
  *(void *)(result + 152) = v25;
  *(void *)(result + 160) = v24;
  *(void *)(result + 168) = v23;
  *(void *)(result + 176) = v22;
  *(void *)(result + 184) = v21;
  *(void *)(result + 192) = v20;
  *(void *)(result + 200) = v19;
  *(void *)(result + 208) = v35;
  *(void *)(result + 216) = v36;
  *(void *)(result + 224) = v37;
  *(void *)(result + 232) = v38;
  *(void *)(result + 240) = v39;
  *(void *)(result + 248) = v40;
  *(void *)(result + 256) = v41;
  *(void *)(result + 264) = v42;
  *(void *)(result + 272) = v43;
  *(void *)(result + 288) = v44;
  *(void *)(result + 296) = v45;
  *(void *)(result + 304) = v46;
  *(void *)(result + 312) = v18;
  *(void *)(result + 336) = v16;
  *(void *)(result + 344) = v15;
  *(void *)(result + 368) = v13;
  *(void *)(result + 376) = v12;
  *(void *)(result + 384) = v11;
  *(void *)(result + 392) = v10;
  *(void *)(result + 320) = v9;
  *(void *)(result + 328) = v17;
  *(void *)(result + 352) = v14;
  *(void *)(result + 360) = v8;
  *(void *)(result + 400) = v34;
  return result;
}

int8x16_t sub_1BBAA7214(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, long long a18, long long a19, long long a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v68 = a3;
  a68 = *MEMORY[0x1E4F143B8];
  uint64_t v71 = (void *)*a1;
  uint64_t v72 = (unsigned __int8 *)(v71[83] + 16 * *((_DWORD *)a1 + 5) * a3);
  uint64_t v150 = v71[15];
  uint64_t v151 = v71[14];
  int v73 = *((_DWORD *)a1 + 3);
  uint64_t v166 = (*(uint64_t (**)(void *, void, void, void))(*v71 + 16))(v71, 0, (*((_DWORD *)a1 + 4) * a3), 0);
  uint64_t v74 = (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)*a1 + 16))(*a1, 0, ((*((_DWORD *)a1 + 4) * v68) >> 1), 1);
  uint64_t v164 = a1[5];
  uint64_t v165 = v74;
  uint64_t v75 = a1[7];
  if (v68) {
    uint64_t v76 = 6;
  }
  else {
    uint64_t v76 = 2;
  }
  if (*((_DWORD *)a1 + 6) - 1 <= v68)
  {
    LODWORD(v77) = *((_DWORD *)a1 + 4);
    int v78 = *(_DWORD *)(*a1 + 280) - v77 * v68;
  }
  else
  {
    if (*(unsigned char *)(a2 + 496)) {
      memcpy((void *)a1[6], (const void *)(v166 + 2 * v151 * (*((int *)a1 + 4) - 1)), 2 * *(int *)(*a1 + 276));
    }
    uint64_t v76 = v76 | 8;
    if (*(unsigned char *)(a2 + 497)) {
      memcpy((void *)a1[8], (const void *)(v165 + 2 * v150 * ((*((int *)a1 + 4) >> 1) - 1)), 2 * *(int *)(*a1 + 276));
    }
    LODWORD(v77) = *((_DWORD *)a1 + 4);
    int v78 = v77;
  }
  int v79 = a1 + 11;
  uint64_t v152 = (v78 >> 1);
  uint64_t vars8 = a1;
  int v80 = *((_DWORD *)a1 + 5);
  int v81 = v80 - 1;
  unsigned int vars0_4 = v78;
  int v146 = a1 + 11;
  if (v80 <= 1)
  {
    int v84 = 0;
    BOOL v111 = 0;
    BOOL vars0b = 0;
  }
  else
  {
    int v162 = v68;
    BOOL v82 = 0;
    BOOL v83 = 0;
    int v84 = 0;
    uint64_t v85 = &v79[5 * v73];
    unsigned int v148 = v85 + 5;
    unsigned int v149 = v85 - 15;
    uint64_t v147 = v78;
    unsigned int v154 = v76 | 1;
    do
    {
      BOOL v160 = v82;
      int v167 = v84;
      uint64_t v86 = sub_1BBAA7C60((void *)a2, v84, v162, v76);
      uint64_t v88 = v86;
      unint64_t v89 = *v72;
      BOOL v90 = (v89 & 1) == 0;
      unint64_t v91 = vars8;
      BOOL v161 = v90;
      if (v89)
      {
        unsigned int vars0 = v86;
        uint64_t v92 = (v89 >> 1) & 7;
        if (v92 > 4) {
          return result;
        }
        if (v92 == 4)
        {
          uint64_t v93 = 0;
          unsigned __int8 v94 = v72[13];
          a17 = 0u;
          a18 = 0u;
          uint64_t v95 = vars0_4;
          do
          {
            *((unsigned char *)&a17 + ((v94 + (_BYTE)v93) & 0x1F)) = v72[v93 + 1];
            ++v93;
          }
          while (v93 != 4);
        }
        else
        {
          LOWORD(a17) = *(_WORD *)(v72 + 1);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 3);
          BYTE2(a17) = 0;
          uint64_t v95 = vars0_4;
        }
        if (v83 && (int)v95 > 0)
        {
          uint64_t v96 = (_WORD *)(v166 - 2);
          unint64_t v97 = &a45;
          uint64_t v98 = v147;
          do
          {
            *(_WORD *)unint64_t v97 = *v96;
            v97 += 2;
            v96 += v151;
            --v98;
          }
          while (v98);
        }
        int v99 = v77;
        uint64_t v100 = v95;
        sub_1BBA18E28(a2, v167 << *((_DWORD *)vars8 + 3), v162 << *((_DWORD *)vars8 + 3), v99, v95, 0);
        int v101 = (void (*)(uint64_t, uint64_t, long long *, void, char *, uint64_t, uint64_t))v149[v92];
        uint64_t v88 = vars0;
        v101(v166, v151, &a17, vars0, &a45, v164, v100);
        sub_1BBA19044(a2, v167 << *((_DWORD *)vars8 + 3), v162 << *((_DWORD *)vars8 + 3), *((_DWORD *)vars8 + 4), v100, 0);
        unint64_t v91 = vars8;
        LODWORD(v89) = *v72;
        BOOL v90 = v161;
      }
      BOOL v102 = (v89 & 0x10) == 0;
      if ((v89 & 0x10) != 0)
      {
        if (v89 > 0x9F) {
          return result;
        }
        unsigned int v153 = v89 >> 5;
        if (v89 >> 5 == 4)
        {
          uint64_t v103 = 0;
          unsigned __int8 v104 = v72[14];
          a17 = 0u;
          a18 = 0u;
          do
          {
            *((unsigned char *)&a17 + ((v104 + (_BYTE)v103) & 0x1F)) = v72[v103 + 5];
            ++v103;
          }
          while (v103 != 4);
          uint64_t v105 = 0;
          unsigned __int8 v106 = v72[15];
          a19 = 0u;
          a20 = 0u;
          do
          {
            *((unsigned char *)&a19 + ((v106 + (_BYTE)v105) & 0x1F)) = v72[v105 + 9];
            ++v105;
          }
          while (v105 != 4);
        }
        else
        {
          LOWORD(a17) = *(_WORD *)(v72 + 5);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 7);
          BYTE2(a17) = 0;
          LOWORD(a19) = *(_WORD *)(v72 + 9);
          *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v72 + 11);
          BYTE2(a19) = 0;
        }
        BOOL vars0a = v102;
        if (v160 && (int)vars0_4 > 1)
        {
          uint64_t v107 = (_DWORD *)(v165 - 4);
          int v108 = &a21;
          uint64_t v109 = v152;
          do
          {
            *(_DWORD *)int v108 = *v107;
            v108 += 4;
            uint64_t v107 = (_DWORD *)((char *)v107 + 2 * v150);
            --v109;
          }
          while (v109);
        }
        uint64_t v110 = v91;
        sub_1BBA18E28(a2, v167 << v91[3], v162 << v91[3], v91[4], vars0_4, 1);
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v148[v153])(v165, v150, &a17, v88, &a21, v75, v152);
        sub_1BBA19044(a2, v167 << v110[3], v162 << v110[3], v110[4], vars0_4, 1);
        unint64_t v91 = v110;
        BOOL v102 = vars0a;
        BOOL v90 = v161;
      }
      uint64_t v77 = (int)v91[4];
      v165 += 2 * v77;
      v166 += 2 * v77;
      v164 += 2 * v77;
      v75 += 2 * v77;
      v72 += 16;
      int v84 = v167 + 1;
      int v81 = v91[5] - 1;
      uint64_t v76 = v154;
      BOOL v82 = v102;
      BOOL v83 = v90;
    }
    while (v167 + 1 < v81);
    BOOL v111 = v90;
    BOOL vars0b = v102;
    LODWORD(v76) = v154;
    int v68 = v162;
  }
  int v168 = v84;
  uint64_t v112 = sub_1BBAA7C60((void *)a2, v84, v68, v76 & 0xFFFFFFFD);
  int v113 = *(_DWORD *)(*vars8 + 276) - v81 * v77;
  unint64_t v114 = *v72;
  if (v114)
  {
    uint64_t v115 = (v114 >> 1) & 7;
    if (v115 > 4) {
      return result;
    }
    if (v115 == 4)
    {
      uint64_t v116 = 0;
      unsigned __int8 v117 = v72[13];
      a17 = 0u;
      a18 = 0u;
      uint64_t v118 = vars0_4;
      do
      {
        *((unsigned char *)&a17 + ((v117 + (_BYTE)v116) & 0x1F)) = v72[v116 + 1];
        ++v116;
      }
      while (v116 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v72 + 1);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 3);
      BYTE2(a17) = 0;
      uint64_t v118 = vars0_4;
    }
    if ((int)v118 > 0 && v111)
    {
      unint64_t v120 = (_WORD *)(v166 - 2);
      uint64_t v121 = &a45;
      uint64_t v122 = v118;
      do
      {
        *(_WORD *)uint64_t v121 = *v120;
        v121 += 2;
        v120 += v151;
        --v122;
      }
      while (v122);
    }
    sub_1BBA18E28(a2, v168 << *((_DWORD *)vars8 + 3), v68 << *((_DWORD *)vars8 + 3), v113, v118, 0);
    unsigned int v163 = v112;
    if (v113 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))vars8[v115 + 26])(v166, v151, &a17, v112, &a45, v164, v118);
      int v123 = v118;
LABEL_66:
      sub_1BBA19044(a2, v168 << *((_DWORD *)vars8 + 3), v68 << *((_DWORD *)vars8 + 3), v113, v123, 0);
      LODWORD(v114) = *v72;
      uint64_t v112 = v163;
      goto LABEL_67;
    }
    int v124 = v113 >> 3;
    if ((v113 & 0x20) != 0)
    {
      v124 -= 4;
      if (v124) {
        uint64_t v127 = v163 | 2;
      }
      else {
        uint64_t v127 = v163;
      }
      uint64_t v125 = v163 | 1;
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))vars8[v115
                                                                                                + 21])(v166, v151, &a17, v127, &a45, v164, vars0_4);
      v166 += 64;
      v164 += 64;
      if ((v124 & 2) != 0) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v125 = v163;
      if ((v124 & 2) != 0)
      {
LABEL_55:
        v124 -= 2;
        if (v124) {
          uint64_t v126 = v125 | 2;
        }
        else {
          uint64_t v126 = v125;
        }
        uint64_t v125 = v125 | 1;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))vars8[v115 + 16])(v166, v151, &a17, v126, &a45, v164, vars0_4);
        int v123 = vars0_4;
        v166 += 32;
        v164 += 32;
LABEL_64:
        if (v124)
        {
          ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))v146[v115])(v166, v151, &a17, v125, &a45, v164, vars0_4);
          int v123 = vars0_4;
        }
        goto LABEL_66;
      }
    }
    int v123 = vars0_4;
    goto LABEL_64;
  }
LABEL_67:
  if ((v114 & 0x10) == 0)
  {
LABEL_100:
    *(int8x16_t *)(vars8 + 5) = vextq_s8(*(int8x16_t *)(vars8 + 5), *(int8x16_t *)(vars8 + 5), 8uLL);
    int8x16_t result = vextq_s8(*(int8x16_t *)(vars8 + 7), *(int8x16_t *)(vars8 + 7), 8uLL);
    *(int8x16_t *)(vars8 + 7) = result;
    return result;
  }
  if (v114 <= 0x9F)
  {
    unsigned int v128 = v114 >> 5;
    if (v114 >> 5 == 4)
    {
      uint64_t v129 = 0;
      unsigned __int8 v130 = v72[14];
      a17 = 0u;
      a18 = 0u;
      BOOL v132 = vars0b;
      int v131 = vars0_4;
      do
      {
        *((unsigned char *)&a17 + ((v130 + (_BYTE)v129) & 0x1F)) = v72[v129 + 5];
        ++v129;
      }
      while (v129 != 4);
      uint64_t v133 = 0;
      unsigned __int8 v134 = v72[15];
      a19 = 0u;
      a20 = 0u;
      do
      {
        *((unsigned char *)&a19 + ((v134 + (_BYTE)v133) & 0x1F)) = v72[v133 + 9];
        ++v133;
      }
      while (v133 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v72 + 5);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 7);
      BYTE2(a17) = 0;
      LOWORD(a19) = *(_WORD *)(v72 + 9);
      *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v72 + 11);
      BYTE2(a19) = 0;
      BOOL v132 = vars0b;
      int v131 = vars0_4;
    }
    if (v131 > 1 && v132)
    {
      unsigned int v136 = (_DWORD *)(v165 - 4);
      int v137 = &a21;
      uint64_t v138 = v152;
      do
      {
        *(_DWORD *)int v137 = *v136;
        v137 += 4;
        unsigned int v136 = (_DWORD *)((char *)v136 + 2 * v150);
        --v138;
      }
      while (v138);
    }
    sub_1BBA18E28(a2, v168 << *((_DWORD *)vars8 + 3), v68 << *((_DWORD *)vars8 + 3), v113, v131, 1);
    if (v113 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))vars8[v128 + 46])(v165, v150, &a17, v112, &a21, v75, v152);
      goto LABEL_98;
    }
    int v139 = v113 >> 3;
    uint64_t v140 = &vars8[v128];
    if ((v113 & 0x20) != 0)
    {
      v139 -= 4;
      if (v139) {
        uint64_t v145 = v112 | 2;
      }
      else {
        uint64_t v145 = v112;
      }
      uint64_t v141 = v112 | 1;
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v140[41])(v165, v150, &a17, v145, &a21, v75, v152);
      v165 += 64;
      v75 += 64;
      if ((v139 & 2) != 0) {
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v141 = v112;
      if ((v139 & 2) != 0)
      {
LABEL_87:
        v139 -= 2;
        if (v139) {
          uint64_t v142 = v141 | 2;
        }
        else {
          uint64_t v142 = v141;
        }
        uint64_t v143 = v141 | 1;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v140[36])(v165, v150, &a17, v142, &a21, v75, v152);
        v165 += 32;
        v75 += 32;
        int v144 = vars0_4;
        goto LABEL_96;
      }
    }
    int v144 = vars0_4;
    uint64_t v143 = v141;
LABEL_96:
    if (!v139)
    {
LABEL_99:
      sub_1BBA19044(a2, v168 << *((_DWORD *)vars8 + 3), v68 << *((_DWORD *)vars8 + 3), v113, v144, 1);
      goto LABEL_100;
    }
    ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))vars8[v128 + 31])(v165, v150, &a17, v143, &a21, v75, v152);
LABEL_98:
    int v144 = vars0_4;
    goto LABEL_99;
  }
  return result;
}

uint64_t sub_1BBAA7C60(void *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v9 = a1[433];
  uint64_t v10 = a1[173];
  if ((unint64_t)(a1[434] - v9) < 0x11 || *(unsigned char *)(v10 + 28)) {
    goto LABEL_10;
  }
  int v12 = *(_DWORD *)sub_1BBA191B4(a1, a2, a3);
  if ((a4 & 1) == 0)
  {
    if ((a4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_20:
    uint64_t v17 = (_DWORD *)sub_1BBA191B4(a1, a2 + 1, a3);
    LODWORD(v9) = a4 & 0xFFFFFFFD;
    if (*v17 == v12) {
      a4 = a4;
    }
    else {
      a4 = v9;
    }
    if ((a4 & 4) == 0)
    {
LABEL_6:
      if ((a4 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }
    goto LABEL_24;
  }
  uint64_t v16 = (_DWORD *)sub_1BBA191B4(a1, a2 - 1, a3);
  LODWORD(v9) = a4 & 0xFFFFFFFE;
  if (*v16 == v12) {
    a4 = a4;
  }
  else {
    a4 = v9;
  }
  if ((a4 & 2) != 0) {
    goto LABEL_20;
  }
LABEL_5:
  if ((a4 & 4) == 0) {
    goto LABEL_6;
  }
LABEL_24:
  uint64_t v18 = (_DWORD *)sub_1BBA191B4(a1, a2, a3 - 1);
  LODWORD(v9) = a4 & 0xFFFFFFFB;
  if (*v18 == v12) {
    a4 = a4;
  }
  else {
    a4 = v9;
  }
  if ((a4 & 8) != 0)
  {
LABEL_7:
    uint64_t v13 = (_DWORD *)sub_1BBA191B4(a1, a2, a3 + 1);
    LODWORD(v9) = a4 & 0xFFFFFFF7;
    if (*v13 == v12) {
      a4 = a4;
    }
    else {
      a4 = v9;
    }
  }
LABEL_10:
  if (*(unsigned char *)(v10 + 20) && !*(unsigned char *)(v10 + 27))
  {
    int v14 = *(_DWORD *)(v10 + 1688);
    if (v14 > a2)
    {
      LODWORD(v9) = *(_DWORD *)(v10 + 1692);
      if ((int)v9 > a3)
      {
        int v4 = *(unsigned __int8 *)(v10 + 1696);
        if (*(unsigned char *)(v10 + 1696))
        {
          uint64_t v15 = *(void *)(v10 + 1656) + 12 * a2;
          int v5 = *(_DWORD *)(v15 + 4);
          int v14 = *(_DWORD *)(v15 + 8);
          uint64_t v9 = *(void *)(v10 + 1672) + 12 * a3;
          int v4 = *(_DWORD *)(v9 + 4);
          LODWORD(v9) = *(_DWORD *)(v9 + 8);
        }
        else
        {
          int v5 = 0;
        }
      }
    }
    if (v5 == a2) {
      unsigned int v19 = a4 & 0xFFFFFFFE;
    }
    else {
      unsigned int v19 = a4;
    }
    if (v14 - 1 == a2) {
      unsigned int v20 = v19 & 0xFFFFFFFD;
    }
    else {
      unsigned int v20 = v19;
    }
    if (v4 == a3) {
      v20 &= ~4u;
    }
    if (v9 - 1 == a3) {
      return v20 & 0xFFFFFFF7;
    }
    else {
      return v20;
    }
  }
  return a4;
}

int8x16_t sub_1BBAA7DFC(void **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, long long a18, long long a19, long long a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v70 = a1;
  a68 = *MEMORY[0x1E4F143B8];
  uint64_t v71 = *a1;
  uint64_t v72 = (unsigned __int8 *)(v71[83] + 16 * *((_DWORD *)v70 + 5) * a3);
  uint64_t v146 = v71[15];
  uint64_t v147 = v71[14];
  int v73 = *((_DWORD *)v70 + 3);
  uint64_t v157 = (*(uint64_t (**)(void *, void, void, void))(*v71 + 16))(v71, 0, (*((_DWORD *)v70 + 4) * a3), 0);
  uint64_t v74 = (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)*v70 + 16))(*v70, 0, ((*((_DWORD *)v70 + 4) * a3) >> 1), 1);
  uint64_t v155 = v70[5];
  uint64_t v156 = v74;
  uint64_t v154 = v70[7];
  if (a3) {
    uint64_t v75 = 6;
  }
  else {
    uint64_t v75 = 2;
  }
  if (*((_DWORD *)v70 + 6) - 1 <= a3)
  {
    LODWORD(v76) = *((_DWORD *)v70 + 4);
    int v77 = *(_DWORD *)(*v70 + 280) - v76 * a3;
  }
  else
  {
    if (*(unsigned char *)(a2 + 496)) {
      memcpy((void *)v70[6], (const void *)(v157 + 2 * v147 * (*((int *)v70 + 4) - 1)), 2 * *(int *)(*v70 + 276));
    }
    uint64_t v75 = v75 | 8;
    if (*(unsigned char *)(a2 + 497)) {
      memcpy((void *)v70[8], (const void *)(v156 + 2 * v146 * ((*((int *)v70 + 4) >> 1) - 1)), 2 * *(int *)(*v70 + 276));
    }
    LODWORD(v76) = *((_DWORD *)v70 + 4);
    int v77 = v76;
  }
  int v78 = v70 + 11;
  uint64_t vars0 = (v77 >> 1);
  int v79 = *((_DWORD *)v70 + 5);
  int v80 = v79 - 1;
  unsigned int v151 = v77;
  if (v79 <= 1)
  {
    int v83 = 0;
    BOOL v109 = 0;
    BOOL v153 = 0;
  }
  else
  {
    uint64_t v150 = v70;
    BOOL v81 = 0;
    BOOL v82 = 0;
    int v83 = 0;
    int v84 = &v78[5 * v73];
    int v144 = v84 + 5;
    uint64_t v145 = v84 - 15;
    uint64_t v143 = v77;
    unsigned int vars8_4 = v75 | 1;
    do
    {
      BOOL v152 = v81;
      uint64_t v85 = sub_1BBAA7C60((void *)a2, v83, a3, v75);
      unint64_t v87 = *v72;
      BOOL v88 = (v87 & 1) == 0;
      if (v87)
      {
        uint64_t v89 = (v87 >> 1) & 7;
        if (v89 > 4) {
          return result;
        }
        if (v89 == 4)
        {
          uint64_t v90 = 0;
          unsigned __int8 v91 = v72[13];
          a17 = 0u;
          a18 = 0u;
          signed int v92 = v151;
          do
          {
            *((unsigned char *)&a17 + ((v91 + (_BYTE)v90) & 0x1F)) = v72[v90 + 1];
            ++v90;
          }
          while (v90 != 4);
        }
        else
        {
          LOWORD(a17) = *(_WORD *)(v72 + 1);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 3);
          BYTE2(a17) = 0;
          signed int v92 = v151;
        }
        BOOL v93 = v88;
        if (v82 && v92 > 0)
        {
          unsigned __int8 v94 = (_WORD *)(v157 - 2);
          uint64_t v95 = &a45;
          uint64_t v96 = v143;
          do
          {
            *(_WORD *)uint64_t v95 = *v94;
            v95 += 2;
            v94 += v147;
            --v96;
          }
          while (v96);
        }
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t))v145[v89])(v157, v147, &a17, v85, &a45, v155);
        LODWORD(v87) = *v72;
        BOOL v88 = v93;
      }
      BOOL v97 = (v87 & 0x10) == 0;
      if ((v87 & 0x10) != 0)
      {
        if (v87 > 0x9F) {
          return result;
        }
        unsigned int v98 = v87 >> 5;
        if (v98 == 4)
        {
          uint64_t v99 = 0;
          unsigned __int8 v100 = v72[14];
          a17 = 0u;
          a18 = 0u;
          do
          {
            *((unsigned char *)&a17 + ((v100 + (_BYTE)v99) & 0x1F)) = v72[v99 + 5];
            ++v99;
          }
          while (v99 != 4);
          uint64_t v101 = v85;
          uint64_t v102 = 0;
          unsigned __int8 v103 = v72[15];
          a19 = 0u;
          a20 = 0u;
          do
          {
            *((unsigned char *)&a19 + ((v103 + (_BYTE)v102) & 0x1F)) = v72[v102 + 9];
            ++v102;
          }
          while (v102 != 4);
        }
        else
        {
          uint64_t v101 = v85;
          LOWORD(a17) = *(_WORD *)(v72 + 5);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 7);
          BYTE2(a17) = 0;
          LOWORD(a19) = *(_WORD *)(v72 + 9);
          *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v72 + 11);
          BYTE2(a19) = 0;
        }
        BOOL v104 = v88;
        BOOL v105 = v97;
        if (v152 && (int)v151 > 1)
        {
          unsigned __int8 v106 = (_DWORD *)(v156 - 4);
          uint64_t v107 = &a21;
          uint64_t v108 = vars0;
          do
          {
            *(_DWORD *)uint64_t v107 = *v106;
            v107 += 4;
            unsigned __int8 v106 = (_DWORD *)((char *)v106 + 2 * v146);
            --v108;
          }
          while (v108);
        }
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v144[v98])(v156, v146, &a17, v101, &a21, v154, vars0);
        BOOL v97 = v105;
        BOOL v88 = v104;
      }
      uint64_t v76 = *((int *)v150 + 4);
      v156 += 2 * v76;
      v157 += 2 * v76;
      v154 += 2 * v76;
      v155 += 2 * v76;
      v72 += 16;
      ++v83;
      int v80 = *((_DWORD *)v150 + 5) - 1;
      uint64_t v75 = vars8_4;
      BOOL v81 = v97;
      BOOL v82 = v88;
    }
    while (v83 < v80);
    BOOL v109 = v88;
    BOOL v153 = v97;
    LODWORD(v75) = vars8_4;
    uint64_t v70 = v150;
  }
  uint64_t v110 = sub_1BBAA7C60((void *)a2, v83, a3, v75 & 0xFFFFFFFD);
  uint64_t v111 = v110;
  int v112 = *(_DWORD *)(*v70 + 276) - v80 * v76;
  unint64_t v113 = *v72;
  if (v113)
  {
    uint64_t v114 = (v113 >> 1) & 7;
    if (v114 > 4) {
      return result;
    }
    if (v114 == 4)
    {
      uint64_t v115 = 0;
      unsigned __int8 v116 = v72[13];
      int8x16_t result = 0uLL;
      a17 = 0u;
      a18 = 0u;
      uint64_t v117 = v151;
      do
      {
        *((unsigned char *)&a17 + ((v116 + (_BYTE)v115) & 0x1F)) = v72[v115 + 1];
        ++v115;
      }
      while (v115 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v72 + 1);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 3);
      BYTE2(a17) = 0;
      uint64_t v117 = v151;
    }
    if ((int)v117 > 0 && v109)
    {
      uint64_t v119 = (_WORD *)(v157 - 2);
      unint64_t v120 = &a45;
      uint64_t v121 = v117;
      do
      {
        *(_WORD *)unint64_t v120 = *v119;
        v120 += 2;
        v119 += v147;
        --v121;
      }
      while (v121);
    }
    if (v112 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v70[v114 + 26])(v157, v147, &a17, v110, &a45, v155, v117);
LABEL_66:
      LODWORD(v113) = *v72;
      goto LABEL_67;
    }
    uint64_t v122 = v78;
    int v123 = v112 >> 3;
    if ((v112 & 0x20) != 0)
    {
      v123 -= 4;
      if (v123) {
        uint64_t v125 = v110 | 2;
      }
      else {
        uint64_t v125 = v110;
      }
      uint64_t v124 = v110 | 1;
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t))v70[v114 + 21])(v157, v147, &a17, v125, &a45, v155);
      v157 += 64;
      v155 += 64;
      if ((v123 & 2) == 0)
      {
LABEL_64:
        if (v123) {
          ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))v122[v114])(v157, v147, &a17, v124, &a45, v155, v151);
        }
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v124 = v110;
      if ((v123 & 2) == 0) {
        goto LABEL_64;
      }
    }
    v123 -= 2;
    if (v123) {
      uint64_t v126 = v124 | 2;
    }
    else {
      uint64_t v126 = v124;
    }
    uint64_t v124 = v124 | 1;
    ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))v70[v114 + 16])(v157, v147, &a17, v126, &a45, v155, v151);
    v157 += 32;
    v155 += 32;
    goto LABEL_64;
  }
LABEL_67:
  if ((v113 & 0x10) == 0)
  {
LABEL_98:
    *(int8x16_t *)(v70 + 5) = vextq_s8(*(int8x16_t *)(v70 + 5), *(int8x16_t *)(v70 + 5), 8uLL);
    int8x16_t result = vextq_s8(*(int8x16_t *)(v70 + 7), *(int8x16_t *)(v70 + 7), 8uLL);
    *(int8x16_t *)(v70 + 7) = result;
    return result;
  }
  if (v113 <= 0x9F)
  {
    unsigned int v127 = v113 >> 5;
    if (v113 >> 5 == 4)
    {
      uint64_t v128 = 0;
      unsigned __int8 v129 = v72[14];
      a17 = 0u;
      a18 = 0u;
      int v130 = v151;
      BOOL v131 = v153;
      do
      {
        *((unsigned char *)&a17 + ((v129 + (_BYTE)v128) & 0x1F)) = v72[v128 + 5];
        ++v128;
      }
      while (v128 != 4);
      uint64_t v132 = 0;
      unsigned __int8 v133 = v72[15];
      a19 = 0u;
      a20 = 0u;
      do
      {
        *((unsigned char *)&a19 + ((v133 + (_BYTE)v132) & 0x1F)) = v72[v132 + 9];
        ++v132;
      }
      while (v132 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v72 + 5);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 7);
      BYTE2(a17) = 0;
      LOWORD(a19) = *(_WORD *)(v72 + 9);
      *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v72 + 11);
      BYTE2(a19) = 0;
      int v130 = v151;
      BOOL v131 = v153;
    }
    if (v130 > 1 && v131)
    {
      __int32 v135 = (_DWORD *)(v156 - 4);
      unsigned int v136 = &a21;
      uint64_t v137 = vars0;
      do
      {
        *(_DWORD *)unsigned int v136 = *v135;
        v136 += 4;
        __int32 v135 = (_DWORD *)((char *)v135 + 2 * v146);
        --v137;
      }
      while (v137);
    }
    if (v112 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v70[v127 + 46])(v156, v146, &a17, v111, &a21, v154, vars0);
      goto LABEL_98;
    }
    int v138 = v112 >> 3;
    int v139 = &v70[v127];
    if ((v112 & 0x20) != 0)
    {
      v138 -= 4;
      if (v138) {
        uint64_t v140 = v111 | 2;
      }
      else {
        uint64_t v140 = v111;
      }
      uint64_t v111 = v111 | 1;
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v139[41])(v156, v146, &a17, v140, &a21, v154, vars0);
      v156 += 64;
      v154 += 64;
      if ((v138 & 2) == 0)
      {
LABEL_87:
        if (!v138) {
          goto LABEL_98;
        }
        goto LABEL_97;
      }
    }
    else if ((v138 & 2) == 0)
    {
      goto LABEL_87;
    }
    int v141 = v138 - 2;
    if (v141) {
      uint64_t v142 = v111 | 2;
    }
    else {
      uint64_t v142 = v111;
    }
    uint64_t v111 = v111 | 1;
    ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v139[36])(v156, v146, &a17, v142, &a21, v154, vars0);
    v156 += 32;
    v154 += 32;
    if (!v141) {
      goto LABEL_98;
    }
LABEL_97:
    ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v70[v127 + 31])(v156, v146, &a17, v111, &a21, v154, vars0);
    goto LABEL_98;
  }
  return result;
}

int8x16_t sub_1BBAA86B0(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, long long a18, long long a19, long long a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  int v52 = a3;
  a52 = *MEMORY[0x1E4F143B8];
  int v55 = (void *)*a1;
  unint64_t v56 = (unsigned __int8 *)(v55[83] + 16 * *((_DWORD *)a1 + 5) * a3);
  uint64_t v137 = v55[15];
  uint64_t v138 = v55[14];
  int v57 = *((_DWORD *)a1 + 3);
  uint64_t v153 = (*(uint64_t (**)(void *, void, void, void))(*v55 + 16))(v55, 0, (*((_DWORD *)a1 + 4) * a3), 0);
  uint64_t v58 = (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)*a1 + 16))(*a1, 0, ((*((_DWORD *)a1 + 4) * v52) >> 1), 1);
  uint64_t v59 = a1[5];
  uint64_t v151 = a1[7];
  uint64_t v152 = v58;
  if (v52) {
    uint64_t v60 = 6;
  }
  else {
    uint64_t v60 = 2;
  }
  if (*((_DWORD *)a1 + 6) - 1 <= v52)
  {
    LODWORD(v61) = *((_DWORD *)a1 + 4);
    int v62 = *(_DWORD *)(*a1 + 280) - v61 * v52;
  }
  else
  {
    if (*(unsigned char *)(a2 + 496)) {
      memcpy((void *)a1[6], (const void *)(v153 + v138 * (*((int *)a1 + 4) - 1)), *(int *)(*a1 + 276));
    }
    uint64_t v60 = v60 | 8;
    if (*(unsigned char *)(a2 + 497)) {
      memcpy((void *)a1[8], (const void *)(v152 + v137 * ((*((int *)a1 + 4) >> 1) - 1)), *(int *)(*a1 + 276));
    }
    LODWORD(v61) = *((_DWORD *)a1 + 4);
    int v62 = v61;
  }
  uint64_t v63 = a1 + 11;
  uint64_t v139 = (v62 >> 1);
  uint64_t vars8 = a1;
  int v64 = *((_DWORD *)a1 + 5);
  int v65 = v64 - 1;
  int v150 = v52;
  unsigned int vars0_4 = v62;
  unsigned __int8 v133 = a1 + 11;
  if (v64 <= 1)
  {
    int v67 = 0;
    BOOL v97 = 0;
    BOOL vars0b = 0;
  }
  else
  {
    BOOL v66 = 0;
    int v67 = 0;
    int v68 = &v63[5 * v57];
    __int32 v135 = v68 + 5;
    unsigned int v136 = v68 - 15;
    uint64_t v134 = v62;
    unsigned int v141 = v60 | 1;
    uint64_t v69 = v59;
    BOOL v70 = 0;
    do
    {
      int v154 = v67;
      uint64_t v71 = sub_1BBAA7C60((void *)a2, v67, v150, v60);
      uint64_t v73 = v71;
      unint64_t v74 = *v56;
      BOOL v75 = (v74 & 1) == 0;
      uint64_t v148 = v69;
      BOOL v147 = v75;
      if (v74)
      {
        unsigned int vars0 = v71;
        uint64_t v76 = (v74 >> 1) & 7;
        if (v76 > 4) {
          return result;
        }
        if (v76 == 4)
        {
          uint64_t v77 = 0;
          unsigned __int8 v78 = v56[13];
          a17 = 0u;
          a18 = 0u;
          uint64_t v79 = vars0_4;
          uint64_t v80 = v138;
          do
          {
            *((unsigned char *)&a17 + ((v78 + (_BYTE)v77) & 0x1F)) = v56[v77 + 1];
            ++v77;
          }
          while (v77 != 4);
        }
        else
        {
          LOWORD(a17) = *(_WORD *)(v56 + 1);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v56 + 3);
          BYTE2(a17) = 0;
          uint64_t v79 = vars0_4;
          uint64_t v80 = v138;
        }
        if (v66 && (int)v79 > 0)
        {
          BOOL v81 = (char *)(v153 - 1);
          BOOL v82 = &a37;
          uint64_t v83 = v134;
          do
          {
            *v82++ = *v81;
            v81 += v80;
            --v83;
          }
          while (v83);
        }
        int v84 = v61;
        uint64_t v85 = v79;
        sub_1BBA18D70(a2, v154 << *((_DWORD *)vars8 + 3), v150 << *((_DWORD *)vars8 + 3), v84, v79, 0);
        uint64_t v86 = (void (*)(uint64_t, uint64_t, long long *, void, char *, uint64_t, uint64_t))v136[v76];
        uint64_t v87 = v80;
        uint64_t v73 = vars0;
        uint64_t v69 = v148;
        v86(v153, v87, &a17, vars0, &a37, v148, v85);
        sub_1BBA18EE4(a2, v154 << *((_DWORD *)vars8 + 3), v150 << *((_DWORD *)vars8 + 3), *((_DWORD *)vars8 + 4), v85, 0);
        LODWORD(v74) = *v56;
        BOOL v75 = v147;
      }
      BOOL v88 = (v74 & 0x10) == 0;
      if ((v74 & 0x10) != 0)
      {
        if (v74 > 0x9F) {
          return result;
        }
        unsigned int v140 = v74 >> 5;
        if (v74 >> 5 == 4)
        {
          uint64_t v89 = 0;
          unsigned __int8 v90 = v56[14];
          a17 = 0u;
          a18 = 0u;
          uint64_t v91 = v137;
          do
          {
            *((unsigned char *)&a17 + ((v90 + (_BYTE)v89) & 0x1F)) = v56[v89 + 5];
            ++v89;
          }
          while (v89 != 4);
          uint64_t v92 = 0;
          unsigned __int8 v93 = v56[15];
          a19 = 0u;
          a20 = 0u;
          do
          {
            *((unsigned char *)&a19 + ((v93 + (_BYTE)v92) & 0x1F)) = v56[v92 + 9];
            ++v92;
          }
          while (v92 != 4);
        }
        else
        {
          LOWORD(a17) = *(_WORD *)(v56 + 5);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v56 + 7);
          BYTE2(a17) = 0;
          LOWORD(a19) = *(_WORD *)(v56 + 9);
          *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v56 + 11);
          BYTE2(a19) = 0;
          uint64_t v91 = v137;
        }
        BOOL vars0a = v88;
        if (v70 && (int)vars0_4 > 1)
        {
          unsigned __int8 v94 = (_WORD *)(v152 - 2);
          uint64_t v95 = &a21;
          uint64_t v96 = v139;
          do
          {
            *(_WORD *)uint64_t v95 = *v94;
            v95 += 2;
            unsigned __int8 v94 = (_WORD *)((char *)v94 + v91);
            --v96;
          }
          while (v96);
        }
        sub_1BBA18D70(a2, v154 << *((_DWORD *)vars8 + 3), v150 << *((_DWORD *)vars8 + 3), *((_DWORD *)vars8 + 4), vars0_4, 1);
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v135[v140])(v152, v91, &a17, v73, &a21, v151, v139);
        sub_1BBA18EE4(a2, v154 << *((_DWORD *)vars8 + 3), v150 << *((_DWORD *)vars8 + 3), *((_DWORD *)vars8 + 4), vars0_4, 1);
        uint64_t v69 = v148;
        BOOL v88 = vars0a;
        BOOL v75 = v147;
      }
      uint64_t v61 = *((int *)vars8 + 4);
      v153 += v61;
      v152 += v61;
      v69 += v61;
      v151 += v61;
      v56 += 16;
      int v67 = v154 + 1;
      int v65 = *((_DWORD *)vars8 + 5) - 1;
      uint64_t v60 = v141;
      BOOL v70 = v88;
      BOOL v66 = v75;
    }
    while (v154 + 1 < v65);
    BOOL v97 = v75;
    BOOL vars0b = v88;
    uint64_t v59 = v69;
    LODWORD(v60) = v141;
    int v52 = v150;
  }
  int v155 = v67;
  uint64_t v98 = sub_1BBAA7C60((void *)a2, v67, v52, v60 & 0xFFFFFFFD);
  int v99 = *(_DWORD *)(*vars8 + 276) - v65 * v61;
  unint64_t v100 = *v56;
  if (v100)
  {
    uint64_t v101 = (v100 >> 1) & 7;
    if (v101 > 4) {
      return result;
    }
    if (v101 == 4)
    {
      uint64_t v102 = 0;
      unsigned __int8 v103 = v56[13];
      a17 = 0u;
      a18 = 0u;
      uint64_t v104 = vars0_4;
      uint64_t v105 = v138;
      do
      {
        *((unsigned char *)&a17 + ((v103 + (_BYTE)v102) & 0x1F)) = v56[v102 + 1];
        ++v102;
      }
      while (v102 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v56 + 1);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v56 + 3);
      BYTE2(a17) = 0;
      uint64_t v104 = vars0_4;
      uint64_t v105 = v138;
    }
    if ((int)v104 > 0 && v97)
    {
      uint64_t v107 = (char *)(v153 - 1);
      uint64_t v108 = v104;
      BOOL v109 = &a37;
      do
      {
        *v109++ = *v107;
        v107 += v105;
        --v108;
      }
      while (v108);
    }
    uint64_t v110 = v104;
    sub_1BBA18D70(a2, v155 << *((_DWORD *)vars8 + 3), v150 << *((_DWORD *)vars8 + 3), v99, v104, 0);
    unsigned int v149 = v98;
    if (v99 < 64)
    {
      int v112 = v99 >> 3;
      if ((v99 & 0x20) != 0)
      {
        v112 -= 4;
        if (v112) {
          uint64_t v113 = v98 | 2;
        }
        else {
          uint64_t v113 = v98;
        }
        uint64_t v98 = v98 | 1;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))vars8[v101 + 21])(v153, v138, &a17, v113, &a37, v59, vars0_4);
        v153 += 32;
        v59 += 32;
      }
      if ((v112 & 2) != 0)
      {
        v112 -= 2;
        if (v112) {
          uint64_t v114 = v98 | 2;
        }
        else {
          uint64_t v114 = v98;
        }
        uint64_t v98 = v98 | 1;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))vars8[v101 + 16])(v153, v138, &a17, v114, &a37, v59, vars0_4);
        int v111 = vars0_4;
        v153 += 16;
        v59 += 16;
      }
      else
      {
        int v111 = vars0_4;
      }
      if (v112)
      {
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))v133[v101])(v153, v138, &a17, v98, &a37, v59, vars0_4);
        int v111 = vars0_4;
      }
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))vars8[v101 + 26])(v153, v138, &a17, v98, &a37, v59, v110);
      int v111 = v110;
    }
    sub_1BBA18EE4(a2, v155 << *((_DWORD *)vars8 + 3), v150 << *((_DWORD *)vars8 + 3), v99, v111, 0);
    LODWORD(v100) = *v56;
    uint64_t v98 = v149;
  }
  if ((v100 & 0x10) == 0)
  {
LABEL_99:
    *(int8x16_t *)(vars8 + 5) = vextq_s8(*(int8x16_t *)(vars8 + 5), *(int8x16_t *)(vars8 + 5), 8uLL);
    int8x16_t result = vextq_s8(*(int8x16_t *)(vars8 + 7), *(int8x16_t *)(vars8 + 7), 8uLL);
    *(int8x16_t *)(vars8 + 7) = result;
    return result;
  }
  if (v100 <= 0x9F)
  {
    unsigned int v115 = v100 >> 5;
    if (v100 >> 5 == 4)
    {
      uint64_t v116 = 0;
      unsigned __int8 v117 = v56[14];
      a17 = 0u;
      a18 = 0u;
      BOOL v119 = vars0b;
      int v118 = vars0_4;
      uint64_t v120 = v137;
      do
      {
        *((unsigned char *)&a17 + ((v117 + (_BYTE)v116) & 0x1F)) = v56[v116 + 5];
        ++v116;
      }
      while (v116 != 4);
      uint64_t v121 = 0;
      unsigned __int8 v122 = v56[15];
      a19 = 0u;
      a20 = 0u;
      do
      {
        *((unsigned char *)&a19 + ((v122 + (_BYTE)v121) & 0x1F)) = v56[v121 + 9];
        ++v121;
      }
      while (v121 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v56 + 5);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v56 + 7);
      BYTE2(a17) = 0;
      LOWORD(a19) = *(_WORD *)(v56 + 9);
      *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v56 + 11);
      BYTE2(a19) = 0;
      BOOL v119 = vars0b;
      int v118 = vars0_4;
      uint64_t v120 = v137;
    }
    if (v118 > 1 && v119)
    {
      uint64_t v124 = (_WORD *)(v152 - 2);
      uint64_t v125 = &a21;
      uint64_t v126 = v139;
      do
      {
        *(_WORD *)uint64_t v125 = *v124;
        v125 += 2;
        uint64_t v124 = (_WORD *)((char *)v124 + v120);
        --v126;
      }
      while (v126);
    }
    sub_1BBA18D70(a2, v155 << *((_DWORD *)vars8 + 3), v150 << *((_DWORD *)vars8 + 3), v99, v118, 1);
    if (v99 < 64)
    {
      uint64_t v127 = v98;
      int v128 = v99 >> 3;
      unsigned __int8 v129 = &vars8[v115];
      if ((v99 & 0x20) != 0)
      {
        v128 -= 4;
        if (v128) {
          uint64_t v130 = v127 | 2;
        }
        else {
          uint64_t v130 = v127;
        }
        uint64_t v127 = v127 | 1;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v129[41])(v152, v137, &a17, v130, &a21, v151, v139);
        v151 += 32;
        v152 += 32;
      }
      if ((v128 & 2) != 0)
      {
        v128 -= 2;
        if (v128) {
          uint64_t v131 = v127 | 2;
        }
        else {
          uint64_t v131 = v127;
        }
        uint64_t v127 = v127 | 1;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v129[36])(v152, v137, &a17, v131, &a21, v151, v139);
        v151 += 16;
        v152 += 16;
      }
      int v132 = vars0_4;
      if (!v128) {
        goto LABEL_98;
      }
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))vars8[v115 + 31])(v152, v137, &a17, v127, &a21, v151, v139);
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))vars8[v115 + 46])(v152, v120, &a17, v98, &a21, v151, v139);
    }
    int v132 = vars0_4;
LABEL_98:
    sub_1BBA18EE4(a2, v155 << *((_DWORD *)vars8 + 3), v150 << *((_DWORD *)vars8 + 3), v99, v132, 1);
    goto LABEL_99;
  }
  return result;
}

int8x16_t sub_1BBAA90BC(void **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, long long a15, long long a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  int v50 = a1;
  a48 = *MEMORY[0x1E4F143B8];
  unint64_t v51 = *a1;
  int v52 = (unsigned __int8 *)(v51[83] + 16 * *((_DWORD *)v50 + 5) * a3);
  uint64_t v53 = v51[14];
  uint64_t v54 = v51[15];
  int v55 = *((_DWORD *)v50 + 3);
  uint64_t v139 = (*(uint64_t (**)(void *, void, void, void))(*v51 + 16))(v51, 0, (*((_DWORD *)v50 + 4) * a3), 0);
  uint64_t v137 = (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)*v50 + 16))(*v50, 0, ((*((_DWORD *)v50 + 4) * a3) >> 1), 1);
  uint64_t v138 = v50[5];
  uint64_t vars8 = (void *)a2;
  uint64_t v136 = v50[7];
  if (a3) {
    uint64_t v56 = 6;
  }
  else {
    uint64_t v56 = 2;
  }
  if (*((_DWORD *)v50 + 6) - 1 <= a3)
  {
    LODWORD(v57) = *((_DWORD *)v50 + 4);
    int v58 = *(_DWORD *)(*v50 + 280) - v57 * a3;
  }
  else
  {
    if (*(unsigned char *)(a2 + 496)) {
      memcpy((void *)v50[6], (const void *)(v139 + v53 * (*((int *)v50 + 4) - 1)), *(int *)(*v50 + 276));
    }
    uint64_t v56 = v56 | 8;
    if (*(unsigned char *)(a2 + 497)) {
      memcpy((void *)v50[8], (const void *)(v137 + v54 * ((*((int *)v50 + 4) >> 1) - 1)), *(int *)(*v50 + 276));
    }
    LODWORD(v57) = *((_DWORD *)v50 + 4);
    int v58 = v57;
  }
  uint64_t v59 = v50 + 11;
  uint64_t v129 = (v58 >> 1);
  int v60 = *((_DWORD *)v50 + 5);
  int v61 = v60 - 1;
  unsigned int vars0_4 = v58;
  int v123 = v50 + 11;
  if (v60 <= 1)
  {
    int v64 = 0;
    BOOL v91 = 0;
    BOOL v127 = 0;
  }
  else
  {
    int vars0 = a3;
    uint64_t v128 = v54;
    uint64_t v131 = v50;
    BOOL v62 = 0;
    BOOL v63 = 0;
    int v64 = 0;
    int v65 = &v59[5 * v55];
    uint64_t v125 = v65 + 5;
    uint64_t v126 = v65 - 15;
    uint64_t v124 = v58;
    unsigned int v130 = v56 | 1;
    do
    {
      uint64_t v66 = sub_1BBAA7C60(vars8, v64, a3, v56);
      unint64_t v68 = *v52;
      BOOL v69 = (v68 & 1) == 0;
      if (v68)
      {
        uint64_t v70 = (v68 >> 1) & 7;
        if (v70 > 4) {
          return result;
        }
        if (v70 == 4)
        {
          uint64_t v71 = 0;
          unsigned __int8 v72 = v52[13];
          a13 = 0u;
          a14 = 0u;
          signed int v73 = vars0_4;
          do
          {
            *((unsigned char *)&a13 + ((v72 + (_BYTE)v71) & 0x1F)) = v52[v71 + 1];
            ++v71;
          }
          while (v71 != 4);
        }
        else
        {
          LOWORD(a13) = *(_WORD *)(v52 + 1);
          *(_WORD *)((char *)&a13 + 3) = *(_WORD *)(v52 + 3);
          BYTE2(a13) = 0;
          signed int v73 = vars0_4;
        }
        BOOL v74 = v69;
        if (v63 && v73 > 0)
        {
          BOOL v75 = (char *)(v139 - 1);
          uint64_t v76 = &a33;
          uint64_t v77 = v124;
          do
          {
            *v76++ = *v75;
            v75 += v53;
            --v77;
          }
          while (v77);
        }
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t))v126[v70])(v139, v53, &a13, v66, &a33, v138);
        LODWORD(v68) = *v52;
        BOOL v69 = v74;
      }
      BOOL v78 = (v68 & 0x10) == 0;
      if ((v68 & 0x10) != 0)
      {
        if (v68 > 0x9F) {
          return result;
        }
        unsigned int v79 = v68 >> 5;
        if (v79 == 4)
        {
          uint64_t v80 = 0;
          unsigned __int8 v81 = v52[14];
          a13 = 0u;
          a14 = 0u;
          do
          {
            *((unsigned char *)&a13 + ((v81 + (_BYTE)v80) & 0x1F)) = v52[v80 + 5];
            ++v80;
          }
          while (v80 != 4);
          uint64_t v82 = v66;
          uint64_t v83 = 0;
          unsigned __int8 v84 = v52[15];
          a15 = 0u;
          a16 = 0u;
          uint64_t v85 = v128;
          do
          {
            *((unsigned char *)&a15 + ((v84 + (_BYTE)v83) & 0x1F)) = v52[v83 + 9];
            ++v83;
          }
          while (v83 != 4);
        }
        else
        {
          uint64_t v82 = v66;
          LOWORD(a13) = *(_WORD *)(v52 + 5);
          *(_WORD *)((char *)&a13 + 3) = *(_WORD *)(v52 + 7);
          BYTE2(a13) = 0;
          LOWORD(a15) = *(_WORD *)(v52 + 9);
          *(_WORD *)((char *)&a15 + 3) = *(_WORD *)(v52 + 11);
          BYTE2(a15) = 0;
          uint64_t v85 = v128;
        }
        BOOL v86 = v69;
        BOOL v87 = v78;
        if (v62 && (int)vars0_4 > 1)
        {
          BOOL v88 = (_WORD *)(v137 - 2);
          uint64_t v89 = &a17;
          uint64_t v90 = v129;
          do
          {
            *(_WORD *)uint64_t v89 = *v88;
            v89 += 2;
            BOOL v88 = (_WORD *)((char *)v88 + v85);
            --v90;
          }
          while (v90);
        }
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v125[v79])(v137, v85, &a13, v82, &a17, v136, v129);
        BOOL v78 = v87;
        BOOL v69 = v86;
      }
      uint64_t v57 = *((int *)v131 + 4);
      v139 += v57;
      v137 += v57;
      v138 += v57;
      v136 += v57;
      v52 += 16;
      ++v64;
      int v61 = *((_DWORD *)v131 + 5) - 1;
      uint64_t v56 = v130;
      BOOL v62 = v78;
      BOOL v63 = v69;
    }
    while (v64 < v61);
    BOOL v91 = v69;
    BOOL v127 = v78;
    LODWORD(v56) = v130;
    int v50 = v131;
    uint64_t v54 = v128;
  }
  uint64_t v92 = sub_1BBAA7C60(vars8, v64, a3, v56 & 0xFFFFFFFD);
  uint64_t v93 = v92;
  int v94 = *(_DWORD *)(*v50 + 276) - v61 * v57;
  unint64_t v95 = *v52;
  if (v95)
  {
    uint64_t v96 = (v95 >> 1) & 7;
    if (v96 > 4) {
      return result;
    }
    if (v96 == 4)
    {
      uint64_t v97 = 0;
      unsigned __int8 v98 = v52[13];
      int8x16_t result = 0uLL;
      a13 = 0u;
      a14 = 0u;
      uint64_t v99 = vars0_4;
      do
      {
        *((unsigned char *)&a13 + ((v98 + (_BYTE)v97) & 0x1F)) = v52[v97 + 1];
        ++v97;
      }
      while (v97 != 4);
    }
    else
    {
      LOWORD(a13) = *(_WORD *)(v52 + 1);
      *(_WORD *)((char *)&a13 + 3) = *(_WORD *)(v52 + 3);
      BYTE2(a13) = 0;
      uint64_t v99 = vars0_4;
    }
    if ((int)v99 > 0 && v91)
    {
      uint64_t v101 = (char *)(v139 - 1);
      uint64_t v102 = v99;
      unsigned __int8 v103 = &a33;
      do
      {
        *v103++ = *v101;
        v101 += v53;
        --v102;
      }
      while (v102);
    }
    if (v94 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v50[v96 + 26])(v139, v53, &a13, v92, &a33, v138, v99);
LABEL_66:
      LODWORD(v95) = *v52;
      goto LABEL_67;
    }
    int v104 = v94 >> 3;
    if ((v94 & 0x20) != 0)
    {
      v104 -= 4;
      if (v104) {
        uint64_t v105 = v92 | 2;
      }
      else {
        uint64_t v105 = v92;
      }
      unsigned int vars8a = v92 | 1;
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t))v50[v96 + 21])(v139, v53, &a13, v105, &a33, v138);
      v138 += 32;
      v139 += 32;
      if ((v104 & 2) == 0)
      {
LABEL_64:
        if (v104) {
          ((void (*)(uint64_t, uint64_t, long long *, void, char *, uint64_t, void))v123[v96])(v139, v53, &a13, vars8a, &a33, v138, vars0_4);
        }
        goto LABEL_66;
      }
    }
    else
    {
      unsigned int vars8a = v92;
      if ((v104 & 2) == 0) {
        goto LABEL_64;
      }
    }
    v104 -= 2;
    if (v104) {
      uint64_t v106 = vars8a | 2;
    }
    else {
      uint64_t v106 = vars8a;
    }
    vars8a |= 1u;
    ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))v50[v96 + 16])(v139, v53, &a13, v106, &a33, v138, vars0_4);
    v138 += 16;
    v139 += 16;
    goto LABEL_64;
  }
LABEL_67:
  if ((v95 & 0x10) == 0)
  {
LABEL_98:
    *(int8x16_t *)(v50 + 5) = vextq_s8(*(int8x16_t *)(v50 + 5), *(int8x16_t *)(v50 + 5), 8uLL);
    int8x16_t result = vextq_s8(*(int8x16_t *)(v50 + 7), *(int8x16_t *)(v50 + 7), 8uLL);
    *(int8x16_t *)(v50 + 7) = result;
    return result;
  }
  if (v95 <= 0x9F)
  {
    unsigned int v107 = v95 >> 5;
    if (v95 >> 5 == 4)
    {
      uint64_t v108 = 0;
      unsigned __int8 v109 = v52[14];
      a13 = 0u;
      a14 = 0u;
      int v110 = vars0_4;
      BOOL v111 = v127;
      do
      {
        *((unsigned char *)&a13 + ((v109 + (_BYTE)v108) & 0x1F)) = v52[v108 + 5];
        ++v108;
      }
      while (v108 != 4);
      uint64_t v112 = 0;
      unsigned __int8 v113 = v52[15];
      a15 = 0u;
      a16 = 0u;
      do
      {
        *((unsigned char *)&a15 + ((v113 + (_BYTE)v112) & 0x1F)) = v52[v112 + 9];
        ++v112;
      }
      while (v112 != 4);
    }
    else
    {
      LOWORD(a13) = *(_WORD *)(v52 + 5);
      *(_WORD *)((char *)&a13 + 3) = *(_WORD *)(v52 + 7);
      BYTE2(a13) = 0;
      LOWORD(a15) = *(_WORD *)(v52 + 9);
      *(_WORD *)((char *)&a15 + 3) = *(_WORD *)(v52 + 11);
      BYTE2(a15) = 0;
      int v110 = vars0_4;
      BOOL v111 = v127;
    }
    if (v110 > 1 && v111)
    {
      unsigned int v115 = (_WORD *)(v137 - 2);
      uint64_t v116 = &a17;
      uint64_t v117 = v129;
      do
      {
        *(_WORD *)uint64_t v116 = *v115;
        v116 += 2;
        unsigned int v115 = (_WORD *)((char *)v115 + v54);
        --v117;
      }
      while (v117);
    }
    if (v94 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v50[v107 + 46])(v137, v54, &a13, v93, &a17, v136, v129);
      goto LABEL_98;
    }
    int v118 = v94 >> 3;
    BOOL v119 = &v50[v107];
    if ((v94 & 0x20) != 0)
    {
      v118 -= 4;
      if (v118) {
        uint64_t v120 = v93 | 2;
      }
      else {
        uint64_t v120 = v93;
      }
      uint64_t v93 = v93 | 1;
      ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v119[41])(v137, v54, &a13, v120, &a17, v136, v129);
      v136 += 32;
      v137 += 32;
      if ((v118 & 2) == 0)
      {
LABEL_87:
        if (!v118) {
          goto LABEL_98;
        }
        goto LABEL_97;
      }
    }
    else if ((v118 & 2) == 0)
    {
      goto LABEL_87;
    }
    int v121 = v118 - 2;
    if (v121) {
      uint64_t v122 = v93 | 2;
    }
    else {
      uint64_t v122 = v93;
    }
    uint64_t v93 = v93 | 1;
    ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v119[36])(v137, v54, &a13, v122, &a17, v136, v129);
    v136 += 16;
    v137 += 16;
    if (!v121) {
      goto LABEL_98;
    }
LABEL_97:
    ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))v50[v107 + 31])(v137, v54, &a13, v93, &a17, v136, v129);
    goto LABEL_98;
  }
  return result;
}

unsigned int *sub_1BBAA990C(unsigned int *result, uint64_t a2, int *a3)
{
  int v4 = result;
  int v5 = *a3;
  if (*a3 >= *(_DWORD *)(*(void *)result + 280))
  {
    int v7 = result[6];
  }
  else
  {
    unsigned int v6 = result[3];
    int v7 = v5 >> v6;
    *a3 = v5 >> v6 << v6;
  }
  uint64_t v8 = result[2];
  if ((int)v8 < v7)
  {
    do
    {
      uint64_t v9 = (uint64_t (*)(void *, uint64_t, uint64_t))*((void *)v4 + 51);
      uint64_t v10 = *((void *)v4 + 52);
      uint64_t v11 = (void *)((char *)v4 + (v10 >> 1));
      if (v10) {
        uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v11 + v9);
      }
      int8x16_t result = (unsigned int *)v9(v11, a2, v8);
      if (result) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v7 - 1 == v8;
      }
      uint64_t v8 = (v8 + 1);
    }
    while (!v12);
  }
  v4[2] = v7;
  return result;
}

void sub_1BBAA99BC(__CFString *a1, const void *a2)
{
  if (!a2)
  {
    CFStringRef v6 = @"NULL";
LABEL_13:
    CFStringAppend(a1, v6);
    return;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    CFTypeID v7 = CFArrayGetTypeID();
    if (v7 != CFGetTypeID(a2))
    {
      CFStringAppendFormat(a1, 0, @"%@", a2);
      return;
    }
    CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
    CFStringAppend(a1, @"[");
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
        if (i) {
          CFStringAppend(a1, @", ");
        }
        sub_1BBAA99BC(a1, ValueAtIndex);
      }
    }
    CFStringRef v6 = @"]";
    goto LABEL_13;
  }
  memset(&v15, 0, sizeof(v15));
  CMTimeMakeFromDictionary(&v15, (CFDictionaryRef)a2);
  if (v15.flags)
  {
    if ((v15.flags & 4) != 0)
    {
      CFStringRef v5 = @"+inf";
    }
    else if ((v15.flags & 8) != 0)
    {
      CFStringRef v5 = @"-inf";
    }
    else
    {
      if ((v15.flags & 0x10) == 0)
      {
        CMTime time = v15;
        Float64 Seconds = CMTimeGetSeconds(&time);
        CFStringAppendFormat(a1, 0, @"%1.3f", *(void *)&Seconds);
        return;
      }
      CFStringRef v5 = @"indef";
    }
  }
  else
  {
    context = a1;
    char v13 = 0;
    CFStringAppend(a1, @"[");
    CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_1BBAA9BA8, &context);
    CFStringRef v5 = @"]";
  }
  CFStringAppend(a1, v5);
}

uint64_t sub_1BBAA9BA8(uint64_t a1, uint64_t a2, void *a3)
{
  if (*((unsigned char *)a3 + 8)) {
    CFStringAppend((CFMutableStringRef)*a3, @", ");
  }
  sub_1BBAA99BC(*a3, a1);
  CFStringAppend((CFMutableStringRef)*a3, @" = ");
  uint64_t result = sub_1BBAA99BC(*a3, a2);
  *((unsigned char *)a3 + 8) = 1;
  return result;
}

uint64_t sub_1BBAA9C20(int a1, int a2, CFMutableDictionaryRef *a3)
{
  CFStringRef v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFTypeID v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(0, 0, v6, v7);
  CFMutableDictionaryRef v10 = v9;
  if (Mutable) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v10) {
      CFRelease(v10);
    }
    return 4294954392;
  }
  else
  {
    int valuePtr = a1;
    CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v13)
    {
      CFNumberRef v14 = v13;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24E10], v13);
      CFRelease(v14);
    }
    int v20 = a2;
    CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v20);
    if (v15)
    {
      CFNumberRef v16 = v15;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D08], v15);
      CFRelease(v16);
    }
    int v21 = 1111970369;
    CFNumberRef v17 = CFNumberCreate(0, kCFNumberSInt32Type, &v21);
    if (v17)
    {
      CFNumberRef v18 = v17;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], v17);
      CFRelease(v18);
    }
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v10);
    CFRelease(v10);
    uint64_t result = 0;
    *a3 = Mutable;
  }
  return result;
}

void sub_1BBAA9DB0(uint64_t a1, unint64_t a2, double a3, double a4, double a5)
{
  CFMutableDictionaryRef v10 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  int v11 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v11 + 1;
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v12 + 1;
  if (a5 < 5.0)
  {
    ++*(_DWORD *)(a1 + 36);
    ++*(_DWORD *)(a1 + 44);
    goto LABEL_22;
  }
  double v13 = (double)a2 * a3;
  double v14 = v13 / a4;
  double v15 = v13 / a4 + *(double *)a1;
  *(double *)a1 = v15;
  int v16 = *(_DWORD *)(a1 + 36);
  if (v11 >= v16) {
    *(double *)(a1 + 16) = v15 / (double)(v11 + 1 - v16);
  }
  if (v11) {
    double v13 = v13 * 0.5 + *(double *)(a1 + 88) * 0.5;
  }
  *(double *)(a1 + 88) = v13;
  if (*(_DWORD *)(a1 + 56))
  {
    if (v12 < 0) {
      goto LABEL_22;
    }
    double v17 = v14 + *(double *)(a1 + 8);
    *(double *)(a1 + 8) = v17;
    double v18 = v17 / (double)(v12 + 1 - *(_DWORD *)(a1 + 44));
    goto LABEL_21;
  }
  unsigned int v19 = (double *)operator new(0x38uLL);
  v19[1] = 0.0;
  v19[2] = 0.0;
  *(void *)unsigned int v19 = &unk_1F14EEAE8;
  v19[3] = a3;
  *((void *)v19 + 6) = a2;
  v19[4] = a4;
  v19[5] = a5;
  int v20 = operator new(0x20uLL);
  int v21 = (void *)(a1 + 64);
  v20[2] = v19 + 3;
  v20[3] = v19;
  uint64_t v23 = *(void **)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 80);
  *int v20 = a1 + 64;
  v20[1] = v23;
  *uint64_t v23 = v20;
  *(void *)(a1 + 72) = v20;
  *(void *)(a1 + 80) = v22 + 1;
  if ((unint64_t)(v22 + 1) >= 0xB)
  {
    uint64_t v24 = *(uint64_t **)(a1 + 64);
    uint64_t v25 = *v24;
    *(void *)(v25 + 8) = v24[1];
    *(void *)v24[1] = v25;
    *(void *)(a1 + 80) = v22;
    uint64_t v26 = (std::__shared_weak_count *)v24[3];
    if (v26) {
      sub_1BB9C09B4(v26);
    }
    operator delete(v24);
    int v20 = *(void **)(a1 + 72);
  }
  if (v20 != v21)
  {
    double v27 = 0.0;
    uint64_t v28 = (double *)&qword_1BBB85248;
    double v29 = 0.0;
    do
    {
      uint64_t v30 = v20[2];
      if (*(double *)(v30 + 16) >= 5.0)
      {
        double v29 = v29 + *(double *)v30 * (double)*(unint64_t *)(v30 + 24) / *(double *)(v30 + 8) * *v28;
        double v27 = v27 + *v28;
      }
      int v20 = (void *)v20[1];
      ++v28;
    }
    while (v20 != v21);
    if (v27 > 0.0)
    {
      double v18 = v29 / v27;
LABEL_21:
      *(double *)(a1 + 24) = v18;
    }
  }
LABEL_22:

  std::mutex::unlock(v10);
}

void sub_1BBAA9FDC(_Unwind_Exception *a1)
{
  sub_1BB9C09B4(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1BBAAA008(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEAE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C18605E0);
}

void sub_1BBAAA05C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEAE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1BBAAA07C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    MEMORY[0x1C18605E0](v2, 0x1000C407A37F5ACLL);
  }
  *(void *)(a1 + 8) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 384));
  sub_1BB9C83D4((void *)(a1 + 360));
  uint64_t v3 = 320;
  do
  {
    std::mutex::~mutex((std::mutex *)(a1 + v3 - 48));
    sub_1BBA56634((uint64_t *)(a1 + v3 - 80));
    v3 -= 160;
  }
  while (v3);
  return a1;
}

uint64_t sub_1BBAAA0F8(uint64_t *a1, uint64_t a2)
{
  a1[43] = a2;
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 64);
  if (v4 > 41)
  {
    if (v4 == 43)
    {
      uint64_t v5 = 4;
      goto LABEL_10;
    }
    if (v4 == 42)
    {
      uint64_t v5 = 2;
      goto LABEL_10;
    }
  }
  else
  {
    if (v4 == 20)
    {
      int v6 = 1;
      uint64_t v5 = 1;
      goto LABEL_12;
    }
    if (v4 == 38)
    {
      uint64_t v5 = 3;
LABEL_10:
      int v6 = v5;
      goto LABEL_12;
    }
  }
  int v6 = 0;
  uint64_t v5 = 0;
LABEL_12:
  *((_DWORD *)a1 + 88) = v6;
  if (!*(_DWORD *)(v3 + 468))
  {
    CFTypeID v7 = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (!v7)
    {
      a1[1] = 0;
      return 4294954392;
    }
    *CFTypeID v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    int v8 = dword_1BBB7A4A4[v5];
    *((_DWORD *)v7 + 6) = 2;
    *((_DWORD *)v7 + 7) = v8;
    *((_DWORD *)v7 + 8) = v8;
    a1[1] = (uint64_t)v7;
  }
  if (*(unsigned char *)(v3 + 68)) {
    *(void *)(a1[1] + 28) = 0xFA000000FALL;
  }
  uint64_t v9 = 0;
  BOOL v11 = v4 == 20 || v4 == 38;
  *((unsigned char *)a1 + 336) = v11;
  char v12 = 1;
  do
  {
    char v13 = v12;
    uint64_t v14 = *(int *)(v3 + 132);
    int v15 = *(_DWORD *)(v3 + 468);
    int v16 = &a1[20 * v9];
    *((_OWORD *)v16 + 1) = 0uLL;
    *((_OWORD *)v16 + 2) = 0uLL;
    v16[13] = 0x3FF0000000000000;
    v16[8] = v14;
    *((_OWORD *)v16 + 3) = xmmword_1BBB6F9D0;
    *((_DWORD *)v16 + 18) = v15;
    uint64_t v9 = 1;
    char v12 = 0;
  }
  while ((v13 & 1) != 0);
  return 0;
}

void sub_1BBAAA24C(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[376];
  unsigned int v5 = *(_DWORD *)(a1 + 356);
  uint64_t v6 = v4 + 976;
  uint64_t v7 = v4 + 120 * v5 + 136;
  if (v5 >= 7) {
    uint64_t v7 = 0;
  }
  if (v5 == 9) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }
  *(void *)(v8 + 112) = **(void **)(a1 + 8);
  sub_1BBA61EF4(&v48, *(void *)(*(void *)(a1 + 344) + 48), 0);
  uint64_t v9 = *(void *)(a1 + 344);
  CFMutableDictionaryRef v10 = (void *)(v9 + 1024);
  BOOL v11 = *(void **)(v9 + 1032);
  uint64_t v12 = v48;
  if (v11 == (void *)(v9 + 1024))
  {
    uint64_t v14 = 0;
    if (!v48) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
  char v13 = 0;
  uint64_t v14 = 0;
  int v15 = *(_DWORD *)(a2[76] + 680);
  uint64_t v47 = v48;
  int v46 = (uint64_t *)(v48 + 24);
  do
  {
    double v17 = (void *)v11[2];
    int v16 = (std::__shared_weak_count *)v11[3];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = v17[76];
    if (*(_DWORD *)(v18 + 680) != v15)
    {
      unsigned int v19 = *(_DWORD *)(a1 + 356);
      if (*(_DWORD *)(v18 + 12) <= (signed int)v19)
      {
        if (v13)
        {
          int v20 = (uint64_t *)(v13[74] + 16);
        }
        else
        {
          int v20 = v46;
          uint64_t v21 = v47;
          if (!v47)
          {
LABEL_16:
            uint64_t v22 = v17[376];
            uint64_t v23 = v22 + 120 * v19 + 136;
            if (v19 >= 7) {
              uint64_t v23 = 0;
            }
            if (v19 == 9) {
              uint64_t v24 = (double *)(v22 + 976);
            }
            else {
              uint64_t v24 = (double *)v23;
            }
            double v25 = *v24;
            if (v21 < 1
              || ((uint64_t v26 = v17[74], v27 = *(void *)(v26 + 16), v28 = *(_DWORD *)(v26 + 32), v29 = v27 - v21, v27 >= 1)
                ? (BOOL v30 = v28 < 1)
                : (BOOL v30 = 1),
                  !v30 ? (BOOL v31 = v29 < 1) : (BOOL v31 = 1),
                  v31))
            {
              double v32 = v24[1];
            }
            else
            {
              double v25 = v25 * (double)v29;
              double v32 = (double)v28;
            }
            *(_DWORD *)(v8 + 112) = (int)(*(double *)(v22 + 56) + (double)*(int *)(v8 + 112)) - (int)(v25 / v32);
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v14) {
              sub_1BB9C09B4(v14);
            }
            uint64_t v14 = v16;
            char v13 = v17;
            goto LABEL_36;
          }
        }
        uint64_t v21 = *v20;
        goto LABEL_16;
      }
    }
LABEL_36:
    if (v16) {
      sub_1BB9C09B4(v16);
    }
    BOOL v11 = (void *)v11[1];
  }
  while (v11 != v10);
  if (v13)
  {
    uint64_t v33 = (uint64_t *)(v13[74] + 16);
    goto LABEL_43;
  }
  uint64_t v12 = v47;
  if (!v47)
  {
LABEL_45:
    uint64_t v34 = 0;
    goto LABEL_46;
  }
LABEL_42:
  uint64_t v33 = (uint64_t *)(v12 + 24);
LABEL_43:
  uint64_t v34 = *v33;
LABEL_46:
  uint64_t v35 = a2[74];
  uint64_t v36 = *(void *)(v35 + 16);
  int v37 = *(_DWORD *)(v35 + 32);
  double v38 = *(double *)v8;
  uint64_t v39 = v36 - v34;
  if (v34 < 1 || v36 < 1 || v37 < 1 || v39 < 1) {
    double v43 = v38 / *(double *)(v8 + 8);
  }
  else {
    double v43 = v38 * (double)v39 / (double)v37;
  }
  double v44 = v38 * (double)*(int *)(v8 + 16) / 1000.0;
  int v45 = (*(_DWORD *)(v8 + 112) - (int)v43) & ~((*(_DWORD *)(v8 + 112) - (int)v43) >> 31);
  *(_DWORD *)(v8 + 112) = v45;
  *(_DWORD *)(v8 + 116) = ((int)v44 - v45) & ~(((int)v44 - v45) >> 31);
  if (v49) {
    sub_1BB9C09B4(v49);
  }
  if (v14)
  {
    sub_1BB9C09B4(v14);
  }
}

double sub_1BBAAA51C(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v3 = (_DWORD *)a3[376];
  uint64_t v4 = (uint64_t)&v3[30 * a2 + 34];
  if (a2 >= 7) {
    uint64_t v4 = 0;
  }
  if (a2 == 9) {
    unsigned int v5 = (double *)(v3 + 244);
  }
  else {
    unsigned int v5 = (double *)v4;
  }
  int v6 = *(unsigned __int8 *)a3;
  uint64_t v7 = a3[363];
  int v8 = v3[8];
  int v9 = v3[4];
  int v10 = v3[10];
  uint64_t v11 = a3[74];
  uint64_t v12 = *(void *)(v11 + 16);
  int v13 = *(_DWORD *)(v11 + 32);
  double v14 = *v5;
  int v15 = *((_DWORD *)v5 + 4);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = v12 - v16;
  if (v12 < 1 || v13 < 1 || v16 < 1 || v17 < 1) {
    double v21 = v14 / v5[1];
  }
  else {
    double v21 = v14 * (double)v17 / (double)v13;
  }
  int v22 = *(_DWORD *)a1 - (int)v21;
  *(void *)(a1 + 8) = v12;
  int v23 = v8 + v7 + v9 + v10;
  if (v6) {
    int v24 = 0;
  }
  else {
    int v24 = v23;
  }
  int v25 = (v22 & ~(v22 >> 31)) + v24;
  double result = v14 * (double)v15 / 1000.0;
  *(_DWORD *)a1 = v25;
  *(_DWORD *)(a1 + 4) = ((int)result - v25) & ~(((int)result - v25) >> 31);
  return result;
}

void sub_1BBAAA5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  unsigned int v4 = *(_DWORD *)(a1 + 356);
  uint64_t v5 = a2 + 120 * v4 + 136;
  if (v4 >= 7) {
    uint64_t v5 = 0;
  }
  if (v4 == 9) {
    uint64_t v6 = a2 + 976;
  }
  else {
    uint64_t v6 = v5;
  }
  char v7 = 1;
  do
  {
    char v8 = v7;
    int v9 = (void *)(v6 + 40 * v3);
    uint64_t v10 = a1 + 160 * v3;
    uint64_t v11 = (std::mutex *)(v10 + 112);
    std::mutex::lock((std::mutex *)(v10 + 112));
    uint64_t v12 = *(void *)(v10 + 104);
    v9[4] = *(void *)(v10 + 40);
    v9[5] = v12;
    int v13 = v9 + 6;
    uint64_t v14 = v9[8];
    if (v14)
    {
      int v15 = *(uint64_t **)(v6 + 40 * v3 + 56);
      uint64_t v16 = *v15;
      *(void *)(v16 + 8) = v15[1];
      *(void *)v15[1] = v16;
      v13[2] = v14 - 1;
      uint64_t v17 = (std::__shared_weak_count *)v15[3];
      if (v17) {
        sub_1BB9C09B4(v17);
      }
      operator delete(v15);
    }
    uint64_t v18 = a1 + 160 * v3;
    unsigned int v19 = (void *)(v18 + 80);
    for (CFIndex i = *(void **)(v18 + 88); i != v19; CFIndex i = (void *)i[1])
    {
      double v21 = operator new(0x20uLL);
      uint64_t v22 = i[3];
      v21[2] = i[2];
      v21[3] = v22;
      if (v22) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *v13;
      *double v21 = *v13;
      v21[1] = v13;
      *(void *)(v23 + 8) = v21;
      *int v13 = (uint64_t)v21;
      ++v13[2];
    }
    std::mutex::unlock(v11);
    char v7 = 0;
    uint64_t v3 = 1;
  }
  while ((v8 & 1) != 0);
}

void sub_1BBAAA738(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_1BBAAA74C(uint64_t a1, uint64_t a2, int a3, int a4, unsigned char *a5, double a6, double a7, float a8)
{
  uint64_t v8 = *(void *)(a2 + 3008);
  unsigned int v9 = *(_DWORD *)(a1 + 356);
  uint64_t v10 = v8 + 976;
  uint64_t v11 = v8 + 120 * v9 + 136;
  if (v9 >= 7) {
    uint64_t v11 = 0;
  }
  if (v9 == 9) {
    uint64_t v11 = v10;
  }
  *a5 = 0;
  double v12 = 0.0;
  if (!*(_DWORD *)(*(void *)a1 + 468))
  {
    if (*(unsigned char *)(a2 + 2464))
    {
      BOOL v15 = 1;
      if (!a3) {
        goto LABEL_11;
      }
    }
    else
    {
      BOOL v15 = *(unsigned char *)(a2 + 2465) != 0;
      if (!a3) {
        goto LABEL_11;
      }
    }
    if (*(unsigned __int8 *)(a2 + 640) >= 2u)
    {
      double v12 = exp2(((float)(a8 + 3.0) + -12.0) / 6.0) * 0.850000024;
LABEL_20:
      if (v15 && !*(unsigned char *)(a1 + 336))
      {
        std::mutex::lock((std::mutex *)(a1 + 112));
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 56) = 0xFFFFFFFFLL;
        std::mutex::unlock((std::mutex *)(a1 + 112));
      }
      return v12;
    }
LABEL_11:
    if (a4)
    {
      double v16 = *(double *)(v11 + 72) / a7;
      BOOL v17 = a7 <= 0.0;
      double v18 = 1.0;
      if (!v17) {
        double v18 = v16;
      }
      double v12 = v18 * a6;
    }
    else
    {
      if (a7 <= 0.0) {
        double v12 = exp2((a8 + -12.0) / 6.0) * 0.850000024 * 1.51452804;
      }
      else {
        double v12 = *(double *)(v11 + 32) / a7 * a6;
      }
      *a5 = 1;
    }
    goto LABEL_20;
  }
  return v12;
}

double sub_1BBAAA8C0(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 316) = 38;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = a2;
  *(_DWORD *)(a1 + 400) = a2[33];
  *(_DWORD *)(a1 + 404) = a2[117];
  int v2 = a2[16];
  BOOL v4 = v2 == 20 || v2 == 38;
  *(unsigned char *)(a1 + 408) = v4;
  double result = 0.0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(unsigned char *)(a1 + 624) = 0;
  *(void *)(a1 + 656) = a1 + 656;
  *(void *)(a1 + 664) = a1 + 656;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 680) = a1 + 680;
  *(void *)(a1 + 688) = a1 + 680;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = a1 + 704;
  *(void *)(a1 + 712) = a1 + 704;
  *(void *)(a1 + 720) = 0;
  return result;
}

uint64_t sub_1BBAAA944(uint64_t a1)
{
  int v2 = *(__CVBuffer **)(a1 + 16);
  if (v2)
  {
    CVPixelBufferRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t sub_1BBAAA988(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 840) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  uint64_t v3 = *(void *)(a1 + 392);
  *(void *)(a1 + 736) = *(void *)(v3 + 96);
  *(_WORD *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 756) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(v3 + 344);
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 624) = *(unsigned char *)(a2 + 1016);
  *(_OWORD *)(a1 + 628) = xmmword_1BBB6F9E0;
  *(void *)(a1 + 644) = 0;
  *(void *)(a1 + 432) = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t result = (***(uint64_t (****)(void))a2)();
  uint64_t v5 = *(void *)(a1 + 392);
  if (result && !*(unsigned char *)(v5 + 58) && *(_DWORD *)(v5 + 560) == 1) {
    return result;
  }
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0x200000002;
  *(unsigned char *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  int v6 = *(_DWORD *)(v5 + 64);
  if (v6 > 41)
  {
    if (v6 == 43)
    {
      int v7 = 4;
      goto LABEL_14;
    }
    if (v6 == 42)
    {
      int v7 = 2;
      goto LABEL_14;
    }
  }
  else
  {
    if (v6 == 20)
    {
      int v7 = 1;
      goto LABEL_14;
    }
    if (v6 == 38)
    {
      int v7 = 3;
      goto LABEL_14;
    }
  }
  int v7 = 0;
LABEL_14:
  *(_DWORD *)(a1 + 320) = v7;
  *(void *)(a1 + 416) = 0x402E000000000000;
  *(_DWORD *)(a1 + 424) = 0;
  *(void *)(a1 + 440) = 0;
  *(unsigned char *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 410) = *(_DWORD *)(v5 + 90);
  if (*(int *)(v5 + 560) < 1)
  {
LABEL_21:
    uint64_t result = (uint64_t)operator new(0x1C0uLL, MEMORY[0x1E4FBA2D0]);
    if (!result)
    {
      *(void *)(a1 + 904) = 0;
      return result;
    }
    uint64_t v12 = 0;
    *(void *)uint64_t result = v5;
    do
    {
      uint64_t v13 = result + v12;
      *(void *)(v13 + 80) = v13 + 80;
      *(void *)(v13 + 88) = v13 + 80;
      *(void *)(v13 + 96) = 0;
      *(void *)(v13 + 112) = 850045863;
      *(_OWORD *)(v13 + 120) = 0uLL;
      *(_OWORD *)(v13 + 136) = 0uLL;
      *(_OWORD *)(v13 + 152) = 0uLL;
      v12 += 160;
      *(void *)(v13 + 168) = 0;
    }
    while (v12 != 320);
    *(_DWORD *)(result + 356) = 9;
    *(void *)(result + 360) = result + 360;
    *(void *)(result + 368) = result + 360;
    *(void *)(result + 376) = 0;
    *(void *)(result + 384) = 850045863;
    *(void *)(result + 440) = 0;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(void *)(a1 + 904) = result;
    sub_1BBAAA0F8((uint64_t *)result, *(void *)(a1 + 840));
    uint64_t v14 = *(void *)(a1 + 392);
    *(void *)&long long v15 = *(void *)(v14 + 96);
    if (*(double *)&v15 > 0.0)
    {
      int v16 = 61 * *(_DWORD *)(v14 + 540);
      if (*(double *)&v15 > (double)v16) {
        *(double *)&long long v15 = (double)v16;
      }
      *(void *)(a1 + 416) = v15;
    }
    *(void *)(a1 + 360) = 0;
    unsigned int v17 = *(unsigned __int16 *)(a1 + 410);
    unsigned int v18 = *(unsigned __int16 *)(a1 + 412);
    if (v17 <= v18) {
      unsigned int v19 = *(unsigned __int16 *)(a1 + 412);
    }
    else {
      unsigned int v19 = *(unsigned __int16 *)(a1 + 410);
    }
    if (v17 >= v18) {
      unsigned int v20 = *(unsigned __int16 *)(a1 + 412);
    }
    else {
      unsigned int v20 = *(unsigned __int16 *)(a1 + 410);
    }
    float v21 = (float)v19 / (float)v20;
    if (*(unsigned char *)(v14 + 58))
    {
      if ((*(unsigned int (**)(void))(***(void ***)(a1 + 840) + 8))(**(void **)(a1 + 840)))
      {
        uint64_t v22 = *(void *)(a1 + 392);
        BOOL v23 = *(__int16 *)(v22 + 92) * *(__int16 *)(v22 + 90) <= 230400 && *(double *)(v22 + 96) <= 30.0
           || *(unsigned __int16 *)(v22 + 90) == *(unsigned __int16 *)(v22 + 92);
        if (*(unsigned __int16 *)(a1 + 410) == *(unsigned __int16 *)(a1 + 412))
        {
          int v28 = 7;
        }
        else
        {
          BOOL v29 = !v23;
          if (fabsf(v21 + -1.33) >= fabsf(v21 + -1.77))
          {
            int v28 = 3;
            int v30 = 6;
          }
          else
          {
            int v28 = 2;
            int v30 = 5;
          }
          if (!v29) {
            int v28 = v30;
          }
        }
        *(_DWORD *)(a1 + 764) = v28;
        uint64_t result = sub_1BBAABCF8(a1);
        if (v17 > v18 || result)
        {
          if (result) {
            return result;
          }
        }
        else
        {
          for (uint64_t i = 0; i != 256; i += 8)
          {
            HIDWORD(v32) = *(_DWORD *)(a1 + i + 24);
            LODWORD(v32) = HIDWORD(v32);
            *(_DWORD *)(a1 + i + 24) = v32 >> 16;
          }
        }
      }
      else
      {
        uint64_t v24 = 0;
        *(_OWORD *)(a1 + 212) = xmmword_1BBB7ABAC;
        *(_OWORD *)(a1 + 228) = unk_1BBB7ABBC;
        *(_OWORD *)(a1 + 244) = xmmword_1BBB7ABCC;
        *(_OWORD *)(a1 + 260) = unk_1BBB7ABDC;
        *(_OWORD *)(a1 + 148) = xmmword_1BBB7AB6C;
        *(_OWORD *)(a1 + 164) = unk_1BBB7AB7C;
        *(_OWORD *)(a1 + 180) = xmmword_1BBB7AB8C;
        *(_OWORD *)(a1 + 196) = unk_1BBB7AB9C;
        *(_OWORD *)(a1 + 84) = xmmword_1BBB7AB2C;
        *(_OWORD *)(a1 + 100) = unk_1BBB7AB3C;
        *(_OWORD *)(a1 + 116) = xmmword_1BBB7AB4C;
        *(_OWORD *)(a1 + 132) = unk_1BBB7AB5C;
        *(_OWORD *)(a1 + 20) = xmmword_1BBB7AAEC;
        *(_OWORD *)(a1 + 36) = unk_1BBB7AAFC;
        DWORD1(v15) = 0;
        *(_OWORD *)(a1 + 52) = xmmword_1BBB7AB0C;
        *(_DWORD *)(a1 + 764) = 4;
        __int16 v25 = *(_WORD *)(a1 + 410);
        __int16 v26 = *(_WORD *)(a1 + 412);
        *(_OWORD *)(a1 + 68) = unk_1BBB7AB1C;
        do
        {
          uint64_t v27 = a1 + v24;
          *(_WORD *)(v27 + 24) = v25;
          *(_WORD *)(v27 + 26) = v26;
          v24 += 8;
        }
        while (v24 != 256);
      }
    }
    int v33 = *(_DWORD *)(a1 + 320);
    if (v33 == 1)
    {
      if ((*(unsigned int (**)(void))(***(void ***)(a1 + 840) + 16))(**(void **)(a1 + 840)))
      {
        if (fabsf(v21 + -1.33) >= fabsf(v21 + -1.77)) {
          uint64_t v34 = 9;
        }
        else {
          uint64_t v34 = 8;
        }
        uint64_t v35 = 412;
        if (v17 <= v18) {
          uint64_t v36 = 412;
        }
        else {
          uint64_t v36 = 410;
        }
        int v37 = *(unsigned __int16 *)(a1 + v36);
        if (v17 <= v18) {
          uint64_t v35 = 410;
        }
        int v38 = *(unsigned __int16 *)(a1 + v35);
        *(_DWORD *)(a1 + 764) = v34;
        uint64_t v39 = (float *)((char *)&unk_1BBB7A6EC + 256 * v34);
        if (*((__int16 *)v39 + 2) < v37
          || *((__int16 *)v39 + 3) < v38
          || ((v38 | v37) & 0xF) != 0
          || (double v88 = *(double *)(*(void *)(a1 + 840) + 3280), v88 > *v39))
        {
          if (dword_1E9F80A90 >= 2)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", v37, v38, *(double *)(*(void *)(a1 + 840) + 3280));
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v40 = *(void *)(*(void *)(a1 + 840) + 3280);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = v37;
              __int16 v112 = 1024;
              int v113 = v38;
              __int16 v114 = 2048;
              uint64_t v115 = v40;
              _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", buf, 0x18u);
            }
          }
          uint64_t v41 = 0;
          *(_OWORD *)(a1 + 212) = xmmword_1BBB7ABAC;
          *(_OWORD *)(a1 + 260) = unk_1BBB7ABDC;
          *(_OWORD *)(a1 + 228) = unk_1BBB7ABBC;
          *(_OWORD *)(a1 + 244) = xmmword_1BBB7ABCC;
          *(_OWORD *)(a1 + 148) = xmmword_1BBB7AB6C;
          *(_OWORD *)(a1 + 164) = unk_1BBB7AB7C;
          *(_OWORD *)(a1 + 180) = xmmword_1BBB7AB8C;
          *(_OWORD *)(a1 + 196) = unk_1BBB7AB9C;
          *(_OWORD *)(a1 + 84) = xmmword_1BBB7AB2C;
          *(_OWORD *)(a1 + 100) = unk_1BBB7AB3C;
          *(_OWORD *)(a1 + 116) = xmmword_1BBB7AB4C;
          *(_OWORD *)(a1 + 132) = unk_1BBB7AB5C;
          *(_OWORD *)(a1 + 20) = xmmword_1BBB7AAEC;
          *(_OWORD *)(a1 + 36) = unk_1BBB7AAFC;
          DWORD1(v15) = 0;
          *(_OWORD *)(a1 + 52) = xmmword_1BBB7AB0C;
          *(_DWORD *)(a1 + 764) = 4;
          *(_OWORD *)(a1 + 68) = unk_1BBB7AB1C;
          do
          {
            uint64_t v42 = a1 + v41;
            *(_WORD *)(v42 + 24) = v37;
            *(_WORD *)(v42 + 26) = v38;
            v41 += 8;
          }
          while (v41 != 256);
        }
        else
        {
          uint64_t v89 = (__int16 *)((char *)&unk_1BBB7A6EC + 256 * v34 + 6);
          uint64_t v90 = -32;
          while (*(v89 - 1) > v37 || *v89 > v38 || v88 < *(float *)(v89 - 3))
          {
            v89 += 4;
            if (__CFADD__(v90++, 1))
            {
              if (dword_1E9F80A90 >= 2)
              {
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", v37, v38, *(double *)(*(void *)(a1 + 840) + 3280));
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v92 = *(void *)(*(void *)(a1 + 840) + 3280);
                  *(_DWORD *)buf = 67109632;
                  *(_DWORD *)&buf[4] = v37;
                  __int16 v112 = 1024;
                  int v113 = v38;
                  __int16 v114 = 2048;
                  uint64_t v115 = v92;
                  _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", buf, 0x18u);
                }
              }
              uint64_t v93 = 0;
              *(_OWORD *)(a1 + 212) = xmmword_1BBB7ABAC;
              *(_OWORD *)(a1 + 260) = unk_1BBB7ABDC;
              *(_OWORD *)(a1 + 228) = unk_1BBB7ABBC;
              *(_OWORD *)(a1 + 244) = xmmword_1BBB7ABCC;
              *(_OWORD *)(a1 + 148) = xmmword_1BBB7AB6C;
              *(_OWORD *)(a1 + 164) = unk_1BBB7AB7C;
              *(_OWORD *)(a1 + 180) = xmmword_1BBB7AB8C;
              *(_OWORD *)(a1 + 196) = unk_1BBB7AB9C;
              *(_OWORD *)(a1 + 84) = xmmword_1BBB7AB2C;
              *(_OWORD *)(a1 + 100) = unk_1BBB7AB3C;
              *(_OWORD *)(a1 + 116) = xmmword_1BBB7AB4C;
              *(_OWORD *)(a1 + 132) = unk_1BBB7AB5C;
              *(_OWORD *)(a1 + 20) = xmmword_1BBB7AAEC;
              *(_OWORD *)(a1 + 36) = unk_1BBB7AAFC;
              DWORD1(v15) = 0;
              *(_OWORD *)(a1 + 52) = xmmword_1BBB7AB0C;
              *(_DWORD *)(a1 + 764) = 4;
              *(_OWORD *)(a1 + 68) = unk_1BBB7AB1C;
              do
              {
                uint64_t v94 = a1 + v93;
                *(_WORD *)(v94 + 24) = v37;
                *(_WORD *)(v94 + 26) = v38;
                v93 += 8;
              }
              while (v93 != 256);
              goto LABEL_75;
            }
          }
          uint64_t v95 = (v90 + 32);
          if (v90 == -32)
          {
            unsigned int v99 = 0;
          }
          else
          {
            uint64_t v96 = (char *)&unk_1BBB7A6EC + 256 * v34;
            float v97 = *(float *)&v96[8 * v95];
            if (v88 == v97)
            {
              unsigned int v99 = 0;
            }
            else
            {
              *(_WORD *)(a1 + 24) = v37;
              *(_WORD *)(a1 + 26) = v38;
              float v98 = v88;
              *(float *)(a1 + 20) = v98;
              unsigned int v99 = 1;
            }
            if (*(__int16 *)&v96[8 * v95 + 4] != v37 || *((__int16 *)&unk_1BBB7A6EC + 128 * v34 + 4 * v95 + 3) != v38)
            {
              uint64_t v100 = a1 + 8 * v99;
              *(_WORD *)(v100 + 24) = v37;
              *(_WORD *)(v100 + 26) = v38;
              *(float *)(v100 + 20) = v97;
              ++v99;
            }
          }
          if (32 - v99 >= -(int)v90) {
            unsigned int v101 = -(int)v90;
          }
          else {
            unsigned int v101 = 32 - v99;
          }
          memcpy((void *)(a1 + 8 * v99 + 20), (char *)&unk_1BBB7A6EC + 256 * v34 + 8 * v95, 8 * v101);
          if (v101 + v99 <= 0x1F)
          {
            uint64_t v102 = -v90;
            unsigned __int8 v103 = (char *)&unk_1BBB7A6EC + 256 * (uint64_t)*(int *)(a1 + 764);
            __int16 v104 = *((_WORD *)v103 + 126);
            __int16 v105 = *((_WORD *)v103 + 127);
            int v106 = *((_DWORD *)v103 + 62);
            if (-v90 >= (unint64_t)(32 - v99)) {
              uint64_t v102 = 32 - v99;
            }
            uint64_t v107 = v99 + v102;
            unint64_t v108 = v107 - 1;
            unsigned __int8 v109 = (_WORD *)(a1 + 8 * v107 + 26);
            do
            {
              *(_DWORD *)(v109 - 3) = v106;
              *(v109 - 1) = v104;
              *unsigned __int8 v109 = v105;
              v109 += 4;
              ++v108;
            }
            while (v108 < 0x1F);
          }
        }
LABEL_75:
        if (v17 <= v18)
        {
          for (uint64_t j = 0; j != 256; j += 8)
          {
            HIDWORD(v44) = *(_DWORD *)(a1 + j + 24);
            LODWORD(v44) = HIDWORD(v44);
            *(_DWORD *)(a1 + j + 24) = v44 >> 16;
          }
        }
      }
      else if (*(unsigned char *)(*(void *)(a1 + 392) + 58))
      {
        uint64_t v45 = 0;
        *(_OWORD *)(a1 + 212) = xmmword_1BBB7ABAC;
        *(_OWORD *)(a1 + 228) = unk_1BBB7ABBC;
        *(_OWORD *)(a1 + 244) = xmmword_1BBB7ABCC;
        *(_OWORD *)(a1 + 260) = unk_1BBB7ABDC;
        *(_OWORD *)(a1 + 148) = xmmword_1BBB7AB6C;
        *(_OWORD *)(a1 + 164) = unk_1BBB7AB7C;
        *(_OWORD *)(a1 + 180) = xmmword_1BBB7AB8C;
        *(_OWORD *)(a1 + 196) = unk_1BBB7AB9C;
        *(_OWORD *)(a1 + 84) = xmmword_1BBB7AB2C;
        *(_OWORD *)(a1 + 100) = unk_1BBB7AB3C;
        *(_OWORD *)(a1 + 116) = xmmword_1BBB7AB4C;
        *(_OWORD *)(a1 + 132) = unk_1BBB7AB5C;
        *(_OWORD *)(a1 + 20) = xmmword_1BBB7AAEC;
        *(_OWORD *)(a1 + 36) = unk_1BBB7AAFC;
        DWORD1(v15) = 0;
        *(_OWORD *)(a1 + 52) = xmmword_1BBB7AB0C;
        *(_DWORD *)(a1 + 764) = 4;
        __int16 v46 = *(_WORD *)(a1 + 410);
        __int16 v47 = *(_WORD *)(a1 + 412);
        *(_OWORD *)(a1 + 68) = unk_1BBB7AB1C;
        do
        {
          uint64_t v48 = a1 + v45;
          *(_WORD *)(v48 + 24) = v46;
          *(_WORD *)(v48 + 26) = v47;
          v45 += 8;
        }
        while (v45 != 256);
      }
      int v33 = *(_DWORD *)(a1 + 320);
    }
    if (v33 == 4)
    {
      uint64_t v49 = *(void *)(a1 + 392);
      int v50 = *(unsigned __int8 *)(v49 + 116);
      int v51 = *(_DWORD *)(v49 + 120);
      int v52 = (*(uint64_t (**)(void))(***(void ***)(a1 + 840) + 8))(**(void **)(a1 + 840));
      if (v50) {
        BOOL v53 = 1;
      }
      else {
        BOOL v53 = v52 == 0;
      }
      if (v53)
      {
        if (v50) {
          BOOL v54 = *(unsigned char *)(*(void *)(a1 + 392) + 58) == 0;
        }
        else {
          BOOL v54 = 1;
        }
        if (!v54)
        {
          unint64_t v55 = 0;
          *(_DWORD *)(a1 + 764) = 4;
          __int16 v56 = *(_WORD *)(a1 + 410);
          __int16 v57 = *(_WORD *)(a1 + 412);
          int v58 = (_WORD *)(a1 + 26);
          do
          {
            uint64_t v59 = v55 + 6;
            if (v55 >= 0x1A) {
              uint64_t v59 = 31;
            }
            *(_DWORD *)(v58 - 3) = *((_DWORD *)&unk_1BBB7A6EC + 2 * v59 + 256);
            *(v58 - 1) = v56;
            *int v58 = v57;
            v58 += 4;
            ++v55;
          }
          while (v55 != 32);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 764) = v51;
        int v60 = (_OWORD *)((char *)&unk_1BBB7A6EC + 256 * (uint64_t)v51);
        *(_OWORD *)(a1 + 212) = v60[12];
        *(_OWORD *)(a1 + 228) = v60[13];
        *(_OWORD *)(a1 + 244) = v60[14];
        *(_OWORD *)(a1 + 260) = v60[15];
        *(_OWORD *)(a1 + 148) = v60[8];
        *(_OWORD *)(a1 + 164) = v60[9];
        *(_OWORD *)(a1 + 180) = v60[10];
        *(_OWORD *)(a1 + 196) = v60[11];
        *(_OWORD *)(a1 + 84) = v60[4];
        *(_OWORD *)(a1 + 100) = v60[5];
        *(_OWORD *)(a1 + 116) = v60[6];
        *(_OWORD *)(a1 + 132) = v60[7];
        *(_OWORD *)(a1 + 20) = *v60;
        *(_OWORD *)(a1 + 36) = v60[1];
        *(_OWORD *)(a1 + 52) = v60[2];
        long long v15 = v60[3];
        *(_OWORD *)(a1 + 68) = v15;
      }
    }
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t v61 = *(void *)(a1 + 392);
    LODWORD(v62) = *(_DWORD *)(v61 + 560);
    if ((int)v62 >= 1)
    {
      uint64_t v63 = 0;
      int v64 = -1;
      do
      {
        *(_DWORD *)(a1 + 920 + 4 * v63++) = v62 + v64;
        uint64_t v62 = *(int *)(v61 + 560);
        --v64;
      }
      while (v63 < v62);
    }
    *(void *)(a1 + 344) = 0;
    if (*(unsigned char *)(v61 + 7804)) {
      operator new();
    }
    if (*(_DWORD *)(v61 + 540) != 1 || ((int v65 = *(_DWORD *)(v61 + 64), v65 != 42) ? (v66 = v65 == 20) : (v66 = 1), !v66))
    {
LABEL_123:
      LODWORD(v15) = *(_DWORD *)(v61 + 110);
      *(int32x4_t *)(a1 + 288) = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&v15));
      int v73 = *(_DWORD *)(v61 + 560);
      BOOL v74 = v73 >= 2 && v73 == *(_DWORD *)(v61 + 564);
      *(_DWORD *)(a1 + 916) = v74;
      int v75 = *(_DWORD *)(v61 + 504);
      uint64_t result = (****(uint64_t (*****)(void))(a1 + 840))(**(void **)(a1 + 840));
      if (v75 == 1)
      {
        if (result)
        {
          uint64_t v78 = *(void *)(a1 + 392);
          __int32 v79 = *(unsigned __int16 *)(v78 + 90);
          LODWORD(v78) = *(unsigned __int16 *)(v78 + 92);
          v76.i32[0] = v78;
          v77.i32[0] = v79;
          int8x8_t v80 = vbsl_s8((int8x8_t)vdup_lane_s16(vceq_s16(v77, v76), 0), (int8x8_t)0x2800000023, (int8x8_t)0x210000001CLL);
          if (v79 == v78) {
            int v81 = 40;
          }
          else {
            int v81 = 33;
          }
        }
        else
        {
          int8x8_t v80 = (int8x8_t)0x2D00000028;
          int v81 = 45;
        }
      }
      else
      {
        if (result) {
          unsigned int v82 = -1;
        }
        else {
          unsigned int v82 = 0;
        }
        int8x8_t v80 = vbsl_s8((int8x8_t)vdup_n_s32(v82), (int8x8_t)0x2800000023, (int8x8_t)0x2D00000028);
        if (result) {
          int v81 = 40;
        }
        else {
          int v81 = 45;
        }
      }
      *(int8x8_t *)(a1 + 280) = v80;
      uint64_t v83 = *(void *)(a1 + 392);
      if (*(int *)(v83 + 560) >= 2)
      {
        *(void *)(a1 + 280) = 0x2D00000025;
        if (*(_DWORD *)(a1 + 916)) {
          *(_DWORD *)(a1 + 280) = 40;
        }
        int v81 = 45;
      }
      if (*(_DWORD *)(v83 + 64) == 43)
      {
        *(void *)(a1 + 280) = 0x220000001ELL;
        int v81 = 34;
      }
      if (*(char *)(v83 + 107) >= 1) {
        *(_DWORD *)(a1 + 280) = *(unsigned __int8 *)(v83 + 107);
      }
      if (*(char *)(v83 + 108) >= 1)
      {
        int v81 = *(unsigned __int8 *)(v83 + 108);
        *(_DWORD *)(a1 + 284) = v81;
      }
      *(unsigned char *)(a1 + 763) = *(unsigned char *)(v83 + 338);
      *(unsigned char *)(a1 + 761) = *(unsigned char *)(v83 + 336);
      *(unsigned char *)(a1 + 762) = *(unsigned char *)(v83 + 337);
      *(void *)(a1 + 304) = 0x8000000080000000;
      *(_DWORD *)(a1 + 312) = 0x80000000;
      *(_DWORD *)(a1 + 772) = 0;
      *(void *)(a1 + 776) = 0xFFFFFFFF00000000;
      *(_OWORD *)(a1 + 784) = xmmword_1BBB6F9F0;
      *(void *)(a1 + 800) = 0x4010000000000000;
      uint64_t v84 = *(unsigned int *)(a1 + 320);
      if (v84 == 4)
      {
        *(void *)(a1 + 816) = 0x4044000000000000;
        *(unsigned char *)(a1 + 824) = 0;
        LODWORD(v84) = 4;
        uint64_t v85 = 0x4044000000000000;
LABEL_162:
        *(void *)(a1 + 808) = v85;
LABEL_163:
        *(double *)(a1 + 832) = (double)dword_1BBB7A4CC[v84];
        if (v84 == 1 && *(_DWORD *)(*(void *)(a1 + 392) + 180) <= 0x4C4B40u) {
          *(void *)(a1 + 832) = 0x4036000000000000;
        }
        if (*(_DWORD *)(a1 + 916)) {
          *(void *)(a1 + 832) = 0x4030000000000000;
        }
        return result;
      }
      int v86 = v81 + *(char *)(v83 + 109);
      if (dword_1BBB7A4B8[v84] > v86) {
        int v86 = dword_1BBB7A4B8[v84];
      }
      *(double *)(a1 + 816) = (double)v86;
      if ((v84 | 2) == 3)
      {
        if (!*(unsigned char *)(v83 + 58)
          || (uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 840) + 16))(**(void **)(a1 + 840)),
              (result & 1) != 0))
        {
          *(unsigned char *)(a1 + 824) = 1;
          goto LABEL_159;
        }
        LODWORD(v84) = *(_DWORD *)(a1 + 320);
      }
      *(unsigned char *)(a1 + 824) = v84 == 2;
      if (v84 != 2)
      {
        uint64_t v85 = *(void *)(a1 + 816);
        goto LABEL_162;
      }
LABEL_159:
      *(void *)(a1 + 784) = 0x3FF0000000000000;
      uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 840) + 16))(**(void **)(a1 + 840));
      double v87 = 10.0;
      if (result) {
        double v87 = 5.0;
      }
      *(double *)(a1 + 808) = *(double *)(a1 + 816) - v87;
      *(_DWORD *)(a1 + 780) = 0;
      LODWORD(v84) = *(_DWORD *)(a1 + 320);
      goto LABEL_163;
    }
    int v67 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
    if (v67)
    {
      unint64_t v68 = v67;
      v67[1] = 0;
      v67[2] = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45020], (const void *)*MEMORY[0x1E4F1CFD0]);
      *(_DWORD *)buf = 16;
      CFNumberRef v70 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v70)
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45028], v70);
        CFRelease(v70);
      }
      if (!VTMotionEstimationSessionCreate())
      {
        int v110 = 0;
        *(void *)buf = 4;
        sysctlbyname("hw.optional.arm.FEAT_FP16", &v110, (size_t *)buf, 0, 0);
        unsigned __int8 v72 = sub_1BBAABB58;
        if (!v110) {
          unsigned __int8 v72 = sub_1BBAABC84;
        }
        *unint64_t v68 = v72;
        CFRelease(Mutable);
        goto LABEL_122;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to create VTMotionEstimationSession\n", buf, 2u);
      }
      CFRelease(Mutable);
      uint64_t v71 = sub_1BBAAA944((uint64_t)v68);
      MEMORY[0x1C18605E0](v71, 0xA0C409BE6959DLL);
    }
    if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to create LowResolutionMotionEsitmation", buf, 2u);
    }
    unint64_t v68 = 0;
LABEL_122:
    *(void *)(a1 + 384) = v68;
    uint64_t v61 = *(void *)(a1 + 392);
    goto LABEL_123;
  }
  uint64_t v8 = 0;
  unsigned int v9 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = (uint64_t)operator new(0x1C0uLL, v9);
    if (!result) {
      break;
    }
    uint64_t v10 = 0;
    *(void *)uint64_t result = v5;
    do
    {
      uint64_t v11 = result + v10;
      *(void *)(v11 + 80) = v11 + 80;
      *(void *)(v11 + 88) = v11 + 80;
      *(void *)(v11 + 96) = 0;
      *(void *)(v11 + 112) = 850045863;
      *(_OWORD *)(v11 + 120) = 0uLL;
      *(_OWORD *)(v11 + 136) = 0uLL;
      *(_OWORD *)(v11 + 152) = 0uLL;
      v10 += 160;
      *(void *)(v11 + 168) = 0;
    }
    while (v10 != 320);
    *(_DWORD *)(result + 356) = v8;
    *(void *)(result + 360) = result + 360;
    *(void *)(result + 368) = result + 360;
    *(void *)(result + 376) = 0;
    *(void *)(result + 384) = 850045863;
    *(void *)(result + 440) = 0;
    *(_OWORD *)(result + 392) = 0uLL;
    *(_OWORD *)(result + 408) = 0uLL;
    *(_OWORD *)(result + 424) = 0uLL;
    *(void *)(a1 + 8 * v8 + 848) = result;
    uint64_t result = sub_1BBAAA0F8((uint64_t *)result, *(void *)(a1 + 840));
    if (result) {
      return result;
    }
    *(_DWORD *)(a1 + 4 * v8++ + 920) = 0;
    uint64_t v5 = *(void *)(a1 + 392);
    if (v8 >= *(int *)(v5 + 560)) {
      goto LABEL_21;
    }
  }
  *(void *)(a1 + 8 * v8 + 848) = 0;
  return result;
}

const __int16 *sub_1BBAABB58(const __int16 *result, unsigned int a2, int a3, unsigned int a4, float *a5, float *a6)
{
  *a5 = 0.0;
  *a6 = 0.0;
  if (a3)
  {
    int v6 = 0;
    unint64_t v7 = a2 & 0xFFFFFFF8;
    do
    {
      if (v7)
      {
        unint64_t v8 = 0;
        float16x8_t v9 = 0uLL;
        uint64_t v10 = result;
        float16x8_t v11 = 0uLL;
        do
        {
          int16x8x2_t v26 = vld2q_s16(v10);
          v10 += 16;
          float16x8_t v11 = vaddq_f16(v11, vabsq_f16((float16x8_t)v26.val[0]));
          float16x8_t v9 = vaddq_f16(v9, vabsq_f16((float16x8_t)v26.val[1]));
          v8 += 8;
        }
        while (v8 < v7);
        unsigned int v12 = ((v7 - 1) & 0xFFFFFFF8) + 8;
      }
      else
      {
        unsigned int v12 = 0;
        float16x8_t v11 = 0uLL;
        float16x8_t v9 = 0uLL;
      }
      float32x4_t v13 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL));
      float32x4_t v14 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
      *a5 = *a5
          + (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13))
                  + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)));
      float32x4_t v15 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL));
      float32x4_t v16 = vcvtq_f32_f16(*(float16x4_t *)v9.i8);
      *a6 = *a6
          + (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15))
                  + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)));
      if (v12 < a2)
      {
        unsigned int v17 = 2 * v12;
        unint64_t v18 = a2 - (unint64_t)v12;
        do
        {
          _H0 = fabsl(*(short float *)&result[v17]);
          __asm { FCVT            S0, H0 }
          *a5 = *a5 + _S0;
          *(short float *)&_S0 = fabsl(*(short float *)&result[v17 + 1]);
          __asm { FCVT            S0, H0 }
          *a6 = *a6 + _S0;
          v17 += 2;
          --v18;
        }
        while (v18);
      }
      result += a4;
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

uint64_t sub_1BBAABC84(uint64_t result, unsigned int a2, int a3, unsigned int a4, float *a5, float *a6)
{
  *a5 = 0.0;
  *a6 = 0.0;
  if (a3)
  {
    for (int i = 0; i != a3; ++i)
    {
      if (a2)
      {
        uint64_t v7 = 0;
        do
        {
          _H0 = fabsl(*(short float *)(result + v7));
          __asm { FCVT            S0, H0 }
          *a5 = *a5 + _S0;
          *(short float *)&_S0 = fabsl(*(short float *)(result + v7 + 2));
          __asm { FCVT            S0, H0 }
          *a6 = *a6 + _S0;
          v7 += 4;
        }
        while (4 * a2 != v7);
      }
      result += 2 * a4;
    }
  }
  return result;
}

uint64_t sub_1BBAABCF8(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(unsigned __int16 *)(a1 + 410);
  unsigned int v2 = *(unsigned __int16 *)(a1 + 412);
  if (v1 <= v2) {
    int v3 = *(unsigned __int16 *)(a1 + 412);
  }
  else {
    int v3 = *(unsigned __int16 *)(a1 + 410);
  }
  if (v1 >= v2) {
    int v4 = *(unsigned __int16 *)(a1 + 412);
  }
  else {
    int v4 = *(unsigned __int16 *)(a1 + 410);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 764);
  if (v5 <= 7)
  {
    unint64_t v8 = (__int16 *)((char *)&unk_1BBB7A6EC + 256 * v5 + 6);
    uint64_t v9 = -32;
    while (*(v8 - 1) > v3 || *v8 > v4)
    {
      v8 += 4;
      if (__CFADD__(v9++, 1))
      {
        if (dword_1E9F80A90 >= 2)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", v1, v2, *(double *)(*(void *)(a1 + 840) + 3280));
          BOOL v11 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
          unsigned int v1 = *(unsigned __int16 *)(a1 + 410);
          unsigned int v2 = *(unsigned __int16 *)(a1 + 412);
          if (v11)
          {
            uint64_t v12 = *(void *)(*(void *)(a1 + 840) + 3280);
            *(_DWORD *)buf = 67109632;
            unsigned int v28 = v1;
            __int16 v29 = 1024;
            unsigned int v30 = v2;
            __int16 v31 = 2048;
            uint64_t v32 = v12;
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", buf, 0x18u);
            LOWORD(v1) = *(_WORD *)(a1 + 410);
            LOWORD(v2) = *(_WORD *)(a1 + 412);
          }
        }
        uint64_t v13 = 0;
        *(_OWORD *)(a1 + 212) = xmmword_1BBB7ABAC;
        *(_OWORD *)(a1 + 260) = unk_1BBB7ABDC;
        *(_OWORD *)(a1 + 228) = unk_1BBB7ABBC;
        *(_OWORD *)(a1 + 244) = xmmword_1BBB7ABCC;
        *(_OWORD *)(a1 + 148) = xmmword_1BBB7AB6C;
        *(_OWORD *)(a1 + 164) = unk_1BBB7AB7C;
        *(_OWORD *)(a1 + 180) = xmmword_1BBB7AB8C;
        *(_OWORD *)(a1 + 196) = unk_1BBB7AB9C;
        *(_OWORD *)(a1 + 84) = xmmword_1BBB7AB2C;
        *(_OWORD *)(a1 + 100) = unk_1BBB7AB3C;
        *(_OWORD *)(a1 + 116) = xmmword_1BBB7AB4C;
        *(_OWORD *)(a1 + 132) = unk_1BBB7AB5C;
        *(_OWORD *)(a1 + 20) = xmmword_1BBB7AAEC;
        *(_OWORD *)(a1 + 36) = unk_1BBB7AAFC;
        *(_OWORD *)(a1 + 52) = xmmword_1BBB7AB0C;
        *(_DWORD *)(a1 + 764) = 4;
        *(_OWORD *)(a1 + 68) = unk_1BBB7AB1C;
        do
        {
          uint64_t v14 = a1 + v13;
          *(_WORD *)(v14 + 24) = v1;
          *(_WORD *)(v14 + 26) = v2;
          v13 += 8;
        }
        while (v13 != 256);
        return 0;
      }
    }
    float32x4_t v15 = (char *)&unk_1BBB7A6EC + 256 * v5;
    float32x4_t v16 = (float *)&v15[8 * (v9 + 32)];
    if (*((__int16 *)v16 + 2) >= v3
      && *(__int16 *)&v15[8 * (v9 + 32) + 6] >= v4
      && *(double *)(a1 + 736) <= *v16)
    {
      unsigned int v18 = 0;
    }
    else
    {
      float v17 = *(double *)(a1 + 736);
      *(float *)(a1 + 20) = v17;
      *(_WORD *)(a1 + 24) = v3;
      *(_WORD *)(a1 + 26) = v4;
      unsigned int v18 = 1;
    }
    if (v18 - v9 <= 0x20) {
      unsigned int v19 = -(int)v9;
    }
    else {
      unsigned int v19 = 32 - v18;
    }
    memcpy((void *)(a1 + 8 * v18 + 20), v16, 8 * v19);
    if (v19 + v18 <= 0x1F)
    {
      unsigned int v20 = (char *)&unk_1BBB7A6EC + 256 * (uint64_t)*(int *)(a1 + 764);
      __int16 v21 = *((_WORD *)v20 + 126);
      __int16 v22 = *((_WORD *)v20 + 127);
      int v23 = *((_DWORD *)v20 + 62);
      uint64_t v24 = 32;
      if ((unint64_t)v18 - v9 < 0x20) {
        uint64_t v24 = v18 - v9;
      }
      unint64_t v25 = v24 - 1;
      int16x8x2_t v26 = (_WORD *)(a1 + 8 * v24 + 26);
      do
      {
        *(_DWORD *)(v26 - 3) = v23;
        *(v26 - 1) = v21;
        *int16x8x2_t v26 = v22;
        v26 += 4;
        ++v25;
      }
      while (v25 < 0x1F);
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v28 = v5;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "FillTable: table_index_ = %d is out of range!", buf, 8u);
    }
    return 4294954386;
  }
}

void *sub_1BBAAC03C(void *result, int a2)
{
  if (a2 >= 31) {
    int v2 = 31;
  }
  else {
    int v2 = a2;
  }
  int v3 = v2 & ~(v2 >> 31);
  int v4 = *((_DWORD *)result + 4);
  if (v3 != v4)
  {
    uint64_t v5 = result;
    *((unsigned char *)result + 276) = v3 < v4;
    *((_DWORD *)result + 3) = 0;
    *((_DWORD *)result + 4) = v3;
    sub_1BB9C83D4(result + 82);
    return sub_1BB9C83D4(v5 + 85);
  }
  return result;
}

double sub_1BBAAC0AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v75[3] = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a1 + 916);
  uint64_t v7 = 72;
  if (!v6) {
    uint64_t v7 = 76;
  }
  unsigned int v8 = *(_DWORD *)(a2 + v7);
  uint64_t v9 = (double *)(a2 + 976);
  uint64_t v10 = (double *)(a2 + 136);
  uint64_t v11 = a2 + 136 + 120 * v8;
  if (v8 >= 7) {
    uint64_t v11 = 0;
  }
  if (v8 == 9) {
    uint64_t v12 = (double *)(a2 + 976);
  }
  else {
    uint64_t v12 = (double *)v11;
  }
  if (*(_DWORD *)(*(void *)(a1 + 392) + 560) == 1)
  {
    double v13 = *v12;
    double v14 = v12[1];
    if (v14 >= *(double *)a2) {
      double v14 = *(double *)a2;
    }
LABEL_11:
    double result = v13 / v14;
    goto LABEL_59;
  }
  memset(v75, 0, 24);
  float v16 = *(double *)(a2 + 176) * *(double *)(a2 + 144);
  float v74 = v16;
  uint64_t v17 = *(unsigned int *)(a2 + 76);
  if ((int)v17 >= 1)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 1;
    uint64_t v20 = a2 + 136;
    do
    {
      uint64_t v21 = v20 + 120;
      if (v19 >= 7) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = v20 + 120;
      }
      if (v18 == 32) {
        uint64_t v22 = a2 + 976;
      }
      if (v19 >= 8) {
        uint64_t v20 = 0;
      }
      if (v19 == 10) {
        uint64_t v20 = a2 + 976;
      }
      float v16 = v16 + *(double *)(v22 + 40) * (*(double *)(v22 + 8) - *(double *)(v20 + 8));
      *(float *)((char *)v75 + v18) = v16;
      ++v19;
      v18 += 4;
      uint64_t v20 = v21;
    }
    while (v19 != v17 + 1);
  }
  if (v6)
  {
    if ((v17 & 0x80000000) != 0)
    {
      double result = 1.79769313e308;
    }
    else
    {
      unint64_t v23 = 0;
      double v24 = v12[5];
      uint64_t v25 = v17 + 1;
      double result = 1.79769313e308;
      do
      {
        if (v23 >= 7) {
          int16x8x2_t v26 = 0;
        }
        else {
          int16x8x2_t v26 = v10;
        }
        if (v23 == 9) {
          int16x8x2_t v26 = (double *)(a2 + 976);
        }
        double v27 = *(&v74 + v23);
        if (*v26 * v24 / v27 < result) {
          double result = *v26 * v24 / v27;
        }
        ++v23;
        v10 += 15;
      }
      while (v25 != v23);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 912) = v17;
    unint64_t v28 = *(unsigned int *)(a2 + 72);
    BOOL v30 = v28 == 9 || v28 < 7;
    BOOL v31 = v17 <= 6 || v17 == 9;
    double result = 0.0;
    if (v31 && v30)
    {
      uint64_t v32 = &v10[15 * v28];
      if (v28 >= 7) {
        uint64_t v32 = 0;
      }
      if (v28 == 9) {
        uint64_t v33 = (double *)(a2 + 976);
      }
      else {
        uint64_t v33 = v32;
      }
      uint64_t v34 = &v10[15 * v17];
      if (v17 >= 7) {
        uint64_t v34 = 0;
      }
      if (v17 == 9) {
        uint64_t v34 = (double *)(a2 + 976);
      }
      double v13 = v33[5] * *v34;
      double v14 = *(&v74 + v17);
      goto LABEL_11;
    }
  }
LABEL_59:
  *(double *)(a2 + 56) = result;
  if (!v8 && *(_DWORD *)(a1 + 424))
  {
    if (a3 <= 3 && a3 != 1)
    {
      unint64_t v35 = (unint64_t)result;
      uint64_t v36 = operator new(0x18uLL);
      v36[1] = a1 + 704;
      v36[2] = v35;
      uint64_t v37 = *(void *)(a1 + 704);
      *uint64_t v36 = v37;
      *(void *)(v37 + 8) = v36;
      *(void *)(a1 + 704) = v36;
      uint64_t v38 = *(void *)(a1 + 720);
      *(void *)(a1 + 720) = v38 + 1;
      if ((unint64_t)(v38 + 1) >= 0x1F)
      {
        uint64_t v39 = *(uint64_t **)(a1 + 712);
        uint64_t v40 = *v39;
        *(void *)(v40 + 8) = v39[1];
        *(void *)v39[1] = v40;
        *(void *)(a1 + 720) = v38;
        operator delete(v39);
      }
    }
    unint64_t v41 = *(void *)(a1 + 720);
    if (v41)
    {
      uint64_t v42 = *(void *)(a1 + 712);
      if (v42 == a1 + 704)
      {
        double v44 = 0.0;
      }
      else
      {
        int v43 = 0;
        do
        {
          v43 += *(_DWORD *)(v42 + 16);
          uint64_t v42 = *(void *)(v42 + 8);
        }
        while (v42 != a1 + 704);
        double v44 = (double)v43;
      }
      double v45 = *(double *)(a2 + 984) * (v44 / (double)v41 + v44 / (double)v41);
      if (v45 >= *(double *)(a2 + 976)) {
        double v45 = *(double *)(a2 + 976);
      }
      *(double *)(a2 + 976) = v45;
    }
    if (a3)
    {
      double result = *(double *)(a2 + 984);
      if (*(double *)(a1 + 416) <= result) {
        goto LABEL_79;
      }
      double result = fmax(*v12 - *v9, 0.0) / (v12[1] - result);
    }
    else
    {
      double result = *(double *)(a2 + 976) / *(double *)(a2 + 984);
    }
    *(double *)(a2 + 56) = result;
  }
LABEL_79:
  if (!*(_DWORD *)(a1 + 404))
  {
    uint64_t v46 = *(void *)(a1 + 536);
    unint64_t v47 = *(void *)(a1 + 560);
    if (*(void *)(a1 + 544) == v46)
    {
      uint64_t v53 = 0;
      uint64_t v51 = *(void *)(a1 + 568);
    }
    else
    {
      uint64_t v48 = (int **)(v46 + 8 * (v47 >> 10));
      uint64_t v49 = *v48;
      int v50 = &(*v48)[*(void *)(a1 + 560) & 0x3FFLL];
      uint64_t v51 = *(void *)(a1 + 568);
      uint64_t v52 = *(void *)(v46 + (((v51 + v47) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v51 + v47) & 0x3FF);
      if (v50 == (int *)v52)
      {
        uint64_t v53 = 0;
      }
      else
      {
        LODWORD(v53) = 0;
        do
        {
          uint64_t v55 = *v50++;
          uint64_t v54 = v55;
          if ((char *)v50 - (char *)v49 == 4096)
          {
            __int16 v56 = v48[1];
            ++v48;
            uint64_t v49 = v56;
            int v50 = v56;
          }
          uint64_t v53 = v54 + (int)v53;
        }
        while (v50 != (int *)v52);
      }
    }
    uint64_t v57 = *(int *)(a2 + 16);
    if (v51) {
      uint64_t v57 = v53
    }
          + v57
          - *(int *)(*(void *)(v46 + (((v47 + v51 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v47 + v51 - 1) & 0x3FF));
    uint64_t v58 = *(void *)(a1 + 488);
    double v59 = 0.0;
    if (*(void *)(a1 + 496) != v58)
    {
      unint64_t v60 = *(void *)(a1 + 512);
      uint64_t v61 = (char **)(v58 + 8 * (v60 >> 10));
      uint64_t v62 = *v61;
      uint64_t v63 = &(*v61)[4 * (v60 & 0x3FF)];
      uint64_t v64 = *(void *)(v58 + (((*(void *)(a1 + 520) + v60) >> 7) & 0x1FFFFFFFFFFFFF8))
          + 4 * ((*(void *)(a1 + 520) + v60) & 0x3FF);
      if (v63 != (char *)v64)
      {
        int v65 = 0;
        do
        {
          int v67 = *(_DWORD *)v63;
          v63 += 4;
          int v66 = v67;
          if (v63 - v62 == 4096)
          {
            unint64_t v68 = v61[1];
            ++v61;
            uint64_t v62 = v68;
            uint64_t v63 = v68;
          }
          v65 += v66;
        }
        while (v63 != (char *)v64);
        if (v65 >= 1) {
          double v59 = (double)v57 / (double)v65;
        }
      }
    }
    double v69 = fmin(v59, 3.3);
    double v70 = *(double *)(a2 + 24);
    int v71 = *(_DWORD *)(a2 + 32);
    if (v70 < v69) {
      double v70 = v69;
    }
    double v72 = *(double *)(a2 + 56);
    double v73 = v72 * 0.5 / (v69 + 1.0 + 0.5);
    if (v73 >= (double)v71) {
      double v73 = (double)v71;
    }
    *(double *)(a2 + 24) = v70;
    *(_DWORD *)(a2 + 36) = (int)v73;
    double result = (v72 - v73) / (v70 + 1.0);
    *(double *)(a2 + 56) = result;
  }
  return result;
}

CFTypeRef sub_1BBAAC5AC(uint64_t a1, CFTypeRef cf)
{
  int v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef result = CFRetain(cf);
  *(void *)(a1 + 16) = cf;
  return result;
}

BOOL sub_1BBAAC5E8(uint64_t a1, double a2)
{
  uint64_t v2 = *(int *)(a1 + 16);
  if ((int)v2 < 1) {
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 20 + 8 * v2 + 4) == *(unsigned __int16 *)(a1 + 20 + 8 * (v2 - 1) + 4)) {
    return 1;
  }
  if (*(int *)(a1 + 12) < 5) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 688);
  if (v4 == a1 + 680)
  {
    double v6 = 0.0;
  }
  else
  {
    int v5 = 0;
    do
    {
      v5 += *(_DWORD *)(v4 + 16);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a1 + 680);
    double v6 = (double)(10 * v5);
  }
  return (double)(unint64_t)(9 * *(void *)(a1 + 696)) * a2 > v6;
}

uint64_t sub_1BBAAC684(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = 0;
  LODWORD(result) = 0;
  double v4 = *(double *)(v2 + 736);
  double v5 = 1.0e20;
  double v6 = -(float)(*(float *)(v2 + 8 * a2 + 20) * (float)*(int *)(*(void *)(v2 + 392) + 540));
  uint64_t v7 = (__int16 *)((char *)&unk_1BBB7A4E0 + 92 * *(unsigned int *)(v2 + 320) + 2);
  do
  {
    double v8 = fabs(v6 + v4 * ((double)*(v7 - 1) / (double)*v7));
    if (v8 >= v5) {
      CFTypeRef result = result;
    }
    else {
      CFTypeRef result = v3;
    }
    if (v8 < v5) {
      double v5 = v8;
    }
    ++v3;
    v7 += 2;
  }
  while (v3 != 23);
  return result;
}

void sub_1BBAAC710(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 3008);
  double v7 = *(double *)(v6 + 56);
  char v44 = 0;
  if (*(unsigned char *)(a1 + 408))
  {
    if (*(unsigned char *)(v6 + 111)) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = *(unsigned char *)(v6 + 110) != 0;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 368);
  if (v9)
  {
    unsigned int v10 = *(unsigned __int8 *)(v9 + 32);
    v12 = (v10 < 2 || ((v10 & 0xFE) == 2 ? (BOOL v11 = *(unsigned char *)(v9 + 110) == 0) : (BOOL v11 = 1), !v11))
       && *(_DWORD *)(a1 + 424) == 0;
    float v13 = *(float *)(v9 + 116);
  }
  else
  {
    BOOL v12 = 0;
    float v13 = 0.0;
  }
  if (*(unsigned char *)(a1 + 824)) {
    float v13 = *(double *)(a1 + 448);
  }
  if (*(int *)(*(void *)(a1 + 392) + 560) >= 2 && *(_DWORD *)(a1 + 916))
  {
    sub_1BBA61FE0(&v42, *(void *)(*(void *)(a3 + 584) + 48), *(_DWORD *)(v6 + 72));
    if (v42) {
      float v13 = *(float *)(v42 + 116);
    }
    if (v43) {
      sub_1BB9C09B4(v43);
    }
  }
  double v14 = 0.0;
  if (*(_DWORD *)(a1 + 404))
  {
    double v15 = v7;
    double v16 = 0.0;
  }
  else
  {
    uint64_t v17 = 72;
    if (!*(_DWORD *)(a1 + 916)) {
      uint64_t v17 = 76;
    }
    unsigned int v18 = *(_DWORD *)(v6 + v17);
    int v19 = *(_DWORD *)(*(void *)(a1 + 392) + 560);
    if ((int)v18 >= v19)
    {
      double v20 = 1.79769313e308;
      double v15 = v7;
    }
    else
    {
      double v20 = 1.79769313e308;
      do
      {
        uint64_t v21 = (int *)(v6 + 136 + 120 * v18);
        if (v18 >= 7) {
          uint64_t v21 = 0;
        }
        if (v18 == 9) {
          uint64_t v21 = (int *)(v6 + 976);
        }
        int v22 = v21[28];
        double v15 = v7;
        if ((v22 & 0x80000000) == 0)
        {
          double v23 = fmax(*(double *)v6 * (double)v21[4] / 1000.0, 10.0);
          if (v19 <= 1 && !*(unsigned char *)(a1 + 824)) {
            double v23 = 10.0;
          }
          int v24 = v21[29];
          double v25 = (double)v22 / v23;
          if (v7 * 0.25 < v25) {
            double v25 = v7 * 0.25;
          }
          double v26 = v7 - v25;
          if (v26 <= (double)v24) {
            double v15 = v26;
          }
          else {
            double v15 = (double)v24;
          }
        }
        if (v15 < v20) {
          double v20 = v15;
        }
        ++v18;
      }
      while (v19 != v18);
    }
    if (a2 || !*(_DWORD *)(a1 + 424))
    {
      uint64_t v28 = *(void *)(a1 + 8 * *(int *)(v6 + 72) + 848);
      uint64_t v29 = a3;
      int v30 = v12;
      int v31 = v8;
    }
    else
    {
      if (*(double *)(v6 + 976) > 0.0)
      {
        double v27 = *(double *)(v6 + 24) + 1.0;
        if ((2040109460.0 - (double)*(int *)(v6 + 36)) / v27 >= v7) {
          double v15 = v7;
        }
        else {
          double v15 = (2040109460.0 - (double)*(int *)(v6 + 36)) / v27;
        }
      }
      uint64_t v28 = *(void *)(a1 + 904);
      uint64_t v29 = a3;
      int v30 = 0;
      int v31 = 0;
      double v20 = v15;
    }
    double v14 = sub_1BBAAA74C(v28, v29, v30, v31, &v44, *(double *)(a3 + 2472), v20, v13);
    double v16 = 1.0;
  }
  uint64_t v32 = *(unsigned int *)(a1 + 320);
  if (v14 >= flt_1BBB7A6D8[v32]) {
    double v33 = v14;
  }
  else {
    double v33 = flt_1BBB7A6D8[v32];
  }
  if (v44)
  {
    BOOL v34 = a2 == 0;
    double v35 = v13;
    BOOL v36 = *(_DWORD *)(a1 + 424) != 0;
    double v37 = v13 + 2.91256094;
    BOOL v38 = v34 && v36;
    if (v34 && v36) {
      double v37 = v13;
    }
    if (v12) {
      double v35 = v37;
    }
    double v39 = exp2((v35 + -12.0) / 6.0) * 0.850000024;
    if (v38)
    {
      double v40 = 2.51984191;
      double v41 = v39 * 2.51984191;
    }
    else
    {
      double v40 = 1.51452804;
      double v41 = v39 * 1.51452804;
      double v39 = v39 / 1.51452804;
      if (v16 >= 0.95)
      {
LABEL_70:
        if (v41 > v33) {
          double v41 = v33;
        }
        if (v39 >= v33) {
          double v33 = v39;
        }
        else {
          double v33 = v41;
        }
        goto LABEL_75;
      }
    }
    double v39 = v39 / v40;
    goto LABEL_70;
  }
LABEL_75:
  log(v33 / 0.850000024);
  if (!*(_DWORD *)(a1 + 404) && sub_1BBA4013C() && *(int *)(*(void *)(a1 + 392) + 560) >= 2) {
    *(double *)(a1 + 432) = v15;
  }
}

double sub_1BBAACBEC(uint64_t a1, uint64_t a2, CMTime *a3, double a4, double a5)
{
  double v8 = a4;
  uint64_t v10 = *(void *)(a1 + 368);
  if (v10) {
    float v11 = *(float *)(v10 + 116);
  }
  else {
    float v11 = 51.0;
  }
  if (*(unsigned char *)(a2 + 3))
  {
    if (*(int *)(a1 + 352) >= 2) {
      double v8 = fmax(((double)*(int *)(a1 + 284) - a4) * 0.5, 0.0) + a4;
    }
    if (*(unsigned char *)a2)
    {
      BOOL v12 = *(_DWORD **)(a1 + 344);
      BOOL v13 = *(_DWORD *)(a2 + 8) <= v12[19] || *(_DWORD *)(a2 + 4) <= v12[18];
      if (!v13 || *(_DWORD *)(a2 + 12) > v12[20])
      {
        double v15 = (double)*(int *)(a1 + 280);
        if (a5 <= 6000000.0 && v8 < v15) {
          double v8 = v8 + (double)((int)(v15 - v8) >> (int)(a5 / 2000001.0));
        }
        if (v12[14] == 1)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F81FB0, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1E9F81FB0))
          {
            CMTimeMake((CMTime *)byte_1E9F81F98, 500, 1000);
            __cxa_guard_release(&qword_1E9F81FB0);
          }
          CMTime lhs = *a3;
          CMTime rhs = *(CMTime *)(*(void *)(a1 + 344) + 28);
          CMTimeSubtract(&time1, &lhs, &rhs);
          CMTime time2 = *(CMTime *)byte_1E9F81F98;
          int32_t v17 = CMTimeCompare(&time1, &time2);
          if (a5 <= 10000000.0 && v17 >= 1 && v8 < 28.0) {
            double v8 = 28.0;
          }
        }
      }
    }
LABEL_56:
    uint64_t v26 = *(void *)(a1 + 368);
    if (v26
      && !*(_DWORD *)(*(void *)(a1 + 344) + 60)
      && !*(_DWORD *)(a2 + 16)
      && v11 <= 28.0
      && v8 < v11
      && 5 * *(void *)(v26 + 56) < (unint64_t)(2 * *(void *)(v26 + 40))
      && v8 < v11 + -0.5)
    {
      return v11 + -0.5;
    }
    return v8;
  }
  uint64_t v18 = *(void *)(a1 + 344);
  int v19 = *(_DWORD *)(v18 + 52);
  if (v19 == 1)
  {
    long long v20 = *(_OWORD *)&a3->value;
    *(void *)(v18 + 44) = a3->epoch;
    *(_OWORD *)(v18 + 28) = v20;
    uint64_t v18 = *(void *)(a1 + 344);
    int v19 = *(_DWORD *)(v18 + 52);
  }
  if (v19 <= 1) {
    int v19 = 1;
  }
  if (*(_DWORD *)(v18 + 68) != 3)
  {
    if (v19 <= 2)
    {
      unsigned int v23 = v19 - 1;
      uint64_t v24 = *(void *)(a1 + 368);
      if (v24 && (*(unsigned char *)(v24 + 140) || *(unsigned char *)(v24 + 141)))
      {
        if ((float)(v11 - (float)*((int *)&unk_1BBB85304 + v23)) > v8) {
          double v8 = (float)(v11 - (float)*((int *)&unk_1BBB85304 + v23));
        }
      }
      else
      {
        sub_1BBA61EF4(&v28, *(void *)(*(void *)(a1 + 840) + 48), 1u);
        if (v28 && (*(unsigned char *)(v28 + 140) || *(unsigned char *)(v28 + 141)))
        {
          float v25 = *(float *)(v28 + 116);
          if ((float)(v25 - (float)*((int *)&unk_1BBB85304 + v23)) > v8) {
            double v8 = (float)(v25 - (float)*((int *)&unk_1BBB85304 + v23));
          }
        }
        if (v29) {
          sub_1BB9C09B4(v29);
        }
      }
    }
    goto LABEL_56;
  }
  double v21 = (float)(v11 + -1.0);
  if (v21 < v8) {
    double v8 = (float)(v11 + -1.0);
  }
  uint64_t v22 = *(void *)(a1 + 368);
  if (v22)
  {
    if (*(double *)(v22 + 64) > (double)*(unint64_t *)(v22 + 56)
      && *(int *)(v18 + 60) >= 3
      && !*(unsigned char *)(v22 + 111)
      && (int)(v21 - v8) <= 1
      && v8 > (double)dword_1BBB7A6AC[*(unsigned int *)(a1 + 320)])
    {
      double v8 = v8 + -1.0;
    }
    goto LABEL_56;
  }
  return v8;
}

void sub_1BBAACF7C(_Unwind_Exception *a1)
{
}

void sub_1BBAACF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 3008);
  uint64_t v7 = *(void *)(a2 + 2904);
  int v8 = *(unsigned __int8 *)(a2 + 640);
  int v9 = *(_DWORD *)(*(void *)(a2 + 608) + 680);
  if (v9 >= 2) {
    int v9 = 2;
  }
  *(double *)(a1 + 440) = (*(float *)(a2 + 2720) + *(double *)(a1 + 440) * (double)v9) / (double)(v9 + 1);
  if (!*(unsigned char *)a2)
  {
    sub_1BB9C8B88((void *)(a1 + 528), (_DWORD *)(v6 + 16));
    unint64_t v10 = *(void *)(a1 + 568);
    if (v10 >= 0x11)
    {
      uint64_t v11 = *(void *)(a1 + 560);
      *(void *)(a1 + 568) = v10 - 1;
      *(void *)(a1 + 560) = v11 + 1;
      sub_1BB9C8C10(a1 + 528);
    }
    int v60 = v7;
    sub_1BB9C8B88((void *)(a1 + 480), &v60);
    unint64_t v12 = *(void *)(a1 + 520);
    if (v12 >= 0x11)
    {
      uint64_t v13 = *(void *)(a1 + 512);
      *(void *)(a1 + 520) = v12 - 1;
      *(void *)(a1 + 512) = v13 + 1;
      sub_1BB9C8C10(a1 + 480);
    }
    if (*(unsigned char *)(a1 + 624))
    {
      int v59 = *(void *)(a2 + 2920);
      sub_1BB9C8B88((void *)(a1 + 576), &v59);
      unint64_t v14 = *(void *)(a1 + 616);
      if (v14 >= 0x11)
      {
        uint64_t v15 = *(void *)(a1 + 608);
        *(void *)(a1 + 616) = v14 - 1;
        *(void *)(a1 + 608) = v15 + 1;
        sub_1BB9C8C10(a1 + 576);
      }
      int v16 = *(_DWORD *)(a1 + 640) + v7;
      *(_DWORD *)(a1 + 640) = v16;
      int v17 = *(_DWORD *)(a1 + 644) + *(_DWORD *)(a2 + 2920);
      *(_DWORD *)(a1 + 644) = v17;
      float v18 = (double)v17 * 100.0 / (double)v16;
      *(float *)(a1 + 648) = v18;
    }
  }
  if (a3 || !*(_DWORD *)(a1 + 424) || v8)
  {
    uint64_t v19 = a1 + 8 * *(int *)(v6 + 72) + 848;
  }
  else
  {
    a3 = 0;
    uint64_t v19 = a1 + 904;
  }
  uint64_t v20 = *(void *)v19;
  int v21 = *(unsigned __int8 *)(*(void *)v19 + 336);
  if (*(unsigned char *)(*(void *)v19 + 336))
  {
    uint64_t v22 = *(void *)(a2 + 3008);
    if (*(unsigned char *)(v22 + 111)) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = *(unsigned char *)(v22 + 110) != 0;
    }
  }
  else
  {
    BOOL v23 = 0;
  }
  uint64_t v24 = *(void *)(a2 + 1064);
  double v25 = *(double *)(v24 + 2472);
  if (*(void *)(v24 + 400))
  {
    uint64_t v26 = *(uint64_t **)(v24 + 392);
    if (v26[1])
    {
      uint64_t v27 = *v26;
      if (v27)
      {
        uint64_t v28 = *(void *)(v24 + 584);
        if (*(unsigned char *)(v28 + 3400))
        {
          if (*(void *)(a2 + 1072) && *(unsigned char *)(v28 + 3768) && *(unsigned char *)(a2 + 2466))
          {
            if (*(unsigned __int8 *)(v24 + 640) > 1u)
            {
              if (*(unsigned char *)(a2 + 2464)) {
                goto LABEL_36;
              }
            }
            else if (*(_DWORD *)(a2 + 2044))
            {
              goto LABEL_36;
            }
            double v29 = ((double)*(unint64_t *)(v27 + 552) + (double)(*(int *)(a2 + 848) >> 1))
                / (double)*(int *)(a2 + 848);
            double v30 = fabs(sqrt(v29)) * 0.5;
            if (v29 == -INFINITY) {
              double v25 = INFINITY;
            }
            else {
              double v25 = v30;
            }
          }
        }
      }
    }
  }
LABEL_36:
  unint64_t v31 = *(void *)(a2 + 2904);
  unsigned int v32 = *(unsigned __int8 *)(a2 + 640);
  double v33 = exp2((*(float *)(a2 + 2720) + -12.0) / 6.0) * 0.850000024;
  uint64_t v34 = *(void *)(a2 + 592);
  int v35 = *(_DWORD *)(v34 + 276);
  int v36 = *(_DWORD *)(v34 + 280);
  double v37 = v25 * (double)v35 * (double)v36;
  if (*(unsigned char *)(v34 + 136))
  {
    int v35 = *(_DWORD *)(v34 + 248);
    if (v35 <= 0) {
      int v35 = *(_DWORD *)(v34 + 240);
    }
    int v36 = *(_DWORD *)(v34 + 252);
    if (v36 <= 0) {
      int v36 = *(_DWORD *)(v34 + 244);
    }
  }
  double v38 = v37 / (double)(v36 * v35);
  if (v32 >= 4) {
    double v39 = v33 / 1.29999995;
  }
  else {
    double v39 = v33;
  }
  if (a3)
  {
    double v40 = exp2((*(float *)(a3 + 16) + -12.0) / 6.0) * 0.850000024;
    if (v32 >= 4) {
      double v40 = v40 / 1.29999995;
    }
    uint64_t v41 = v20 + 16;
    double v42 = (v39 + v40) * 0.5;
    unint64_t v43 = (*(void *)a3 + v31) >> 1;
    double v44 = v25;
    double v45 = v38;
    goto LABEL_54;
  }
  if (!v21)
  {
    uint64_t v41 = v20 + 16;
    goto LABEL_53;
  }
  if (v23 || (sub_1BBAA9DB0(v20 + 16, v31, v39, v25, v38), *(int *)(a2 + 644) <= 1))
  {
    uint64_t v41 = v20 + 176;
LABEL_53:
    double v42 = v39;
    double v44 = v25;
    double v45 = v38;
    unint64_t v43 = v31;
LABEL_54:
    sub_1BBAA9DB0(v41, v43, v42, v44, v45);
  }
  uint64_t v46 = *(int *)(v6 + 72);
  if ((int)v46 < *(_DWORD *)(*(void *)(a1 + 392) + 560))
  {
    do
    {
      uint64_t v47 = *(void *)(a1 + 8 * v46 + 848);
      uint64_t v48 = *(void *)(a2 + 2904);
      int v49 = *(_DWORD *)(a2 + 2720);
      uint64_t v50 = *(void *)(a2 + 592);
      uint64_t v51 = *(void *)(v50 + 16);
      int v52 = *(_DWORD *)(v50 + 32);
      std::mutex::lock((std::mutex *)(v47 + 384));
      uint64_t v53 = operator new(0x30uLL);
      v53[2] = v51;
      *((_DWORD *)v53 + 6) = v52;
      v53[4] = v48;
      *((_DWORD *)v53 + 10) = v49;
      uint64_t v54 = *(void *)(v47 + 360);
      void *v53 = v54;
      v53[1] = v47 + 360;
      *(void *)(v54 + 8) = v53;
      *(void *)(v47 + 360) = v53;
      uint64_t v55 = *(uint64_t **)(v47 + 368);
      ++*(void *)(v47 + 376);
      int v56 = v52 + 3;
      if (v52 >= 0) {
        int v56 = v52;
      }
      if (v51 - v55[2] > v56 >> 2)
      {
        uint64_t v57 = (uint64_t)v56 >> 2;
        do
        {
          uint64_t v58 = *v55;
          *(void *)(v58 + 8) = v55[1];
          *(void *)v55[1] = v58;
          --*(void *)(v47 + 376);
          operator delete(v55);
          uint64_t v55 = *(uint64_t **)(v47 + 368);
        }
        while (*(void *)(*(void *)(v47 + 360) + 16) - v55[2] > v57);
      }
      std::mutex::unlock((std::mutex *)(v47 + 384));
      ++v46;
    }
    while (v46 < *(int *)(*(void *)(a1 + 392) + 560));
  }
}

void sub_1BBAAD470(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBAAD484(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 57)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 + 3008);
  unint64_t v4 = *(void *)(a2 + 2904);
  int v5 = (int)((double)(*(_DWORD *)(v3 + 68) - *(_DWORD *)(v3 + 36)) / (*(double *)(v3 + 24) + 1.0));
  if (v4 <= v5 || *(unsigned __int8 *)(a2 + 4) > 1u) {
    return 0;
  }
  int v8 = (int)(*(float *)(a2 + 2720) + 0.5);
  int v9 = *(_DWORD *)(v3 + 44);
  float v10 = (float)v8;
  float v11 = (float)v8 + 1.0;
  double v12 = v11;
  if (v11 < 50.0)
  {
    unint64_t v13 = *(void *)(a2 + 2928);
    double v25 = (double)(v4 - v13);
    double v14 = exp2((v10 + -12.0) / 6.0) * 0.850000024;
    double v15 = (float)(v10 + 3.0);
    while (1)
    {
      double v16 = exp2((v12 + -12.0) / 6.0) * 0.850000024;
      if (v16 < 0.100000001) {
        double v16 = 0.100000001;
      }
      double v17 = v14 / v16;
      double v18 = pow(v14 / v16, 1.1) * (double)v13;
      double v19 = fabs(sqrt(v17));
      if (v17 == -INFINITY) {
        double v19 = INFINITY;
      }
      if (v18 + v19 * v25 < (double)v5 || v12 >= v15) {
        break;
      }
      double v12 = v12 + 1.0;
      if (v12 >= 50.0) {
        goto LABEL_21;
      }
    }
    if (v12 > v15) {
      double v12 = (float)(v10 + 3.0);
    }
  }
LABEL_21:
  double v21 = 51.0;
  if (v12 <= 51.0) {
    double v21 = v12;
  }
  float v22 = v21;
  int v23 = (int)v22;
  if (*(unsigned char *)(a1 + 58) && *(int *)(a2 + 644) >= 1 && v9 < v23)
  {
    *(unsigned char *)(v3 + 49) = 1;
    int v23 = v9;
  }
  if (v23 <= v8) {
    return 0;
  }
  *(float *)(a2 + 2720) = (float)v23;
  return 1;
}

void sub_1BBAAD6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 3008);
  sub_1BBA61E04(&v59, *(void *)(*(void *)(a2 + 584) + 48));
  int v5 = v59;
  uint64_t v6 = *(void *)(a1 + 392);
  int v7 = *(_DWORD *)(v6 + 512);
  if (v59) {
    BOOL v8 = v7 <= 1;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if (*((unsigned char *)v59 + 111))
    {
      *(_DWORD *)(v4 + 16) += v59[2];
      *(_DWORD *)(v4 + 32) += v5[4];
      float v10 = v5 + 5;
      goto LABEL_10;
    }
  }
  else if (v7 == 2)
  {
    uint64_t v9 = *(void *)(a1 + 840);
    if (*(unsigned char *)(v9 + 1152))
    {
      *(_DWORD *)(v4 + 16) += *(_DWORD *)(v9 + 1156);
      *(_DWORD *)(v4 + 32) += *(_DWORD *)(v9 + 1160);
      float v10 = (_DWORD *)(v9 + 1164);
LABEL_10:
      *(_DWORD *)(v4 + 40) += *v10;
    }
  }
  if (*(unsigned char *)(v6 + 59) == 1)
  {
    int v11 = *(_DWORD *)(a2 + 2888);
    if (v11 != *(_DWORD *)(a1 + 8))
    {
      unsigned int v12 = *(_DWORD *)(a1 + 764);
      if (v11)
      {
        if (v12 <= 1)
        {
          int v13 = 2;
          goto LABEL_18;
        }
      }
      else if ((v12 & 0xFFFFFFFE) == 2)
      {
        int v13 = -2;
LABEL_18:
        unsigned int v14 = v12 + v13;
        uint64_t v15 = a1 + 8 * *(int *)(a1 + 16);
        int v16 = *(__int16 *)(v15 + 24);
        int v17 = *(__int16 *)(v15 + 26);
        double v18 = *(double *)(a1 + 416);
        *(_DWORD *)(a1 + 764) = v14;
        sub_1BBAABCF8(a1);
        double v19 = (__int16 *)(a1 + 26);
        uint64_t v20 = -1;
        while (v20 != 31)
        {
          double v21 = (float)(*(float *)(v19 - 3) * (float)(*v19 * *(v19 - 1)));
          ++v20;
          v19 += 4;
          if (v18 * (double)(v17 * v16) >= v21) {
            goto LABEL_23;
          }
        }
        LODWORD(v20) = 32;
LABEL_23:
        *(_DWORD *)(a1 + 16) = v20;
        *(_DWORD *)(a1 + 728) = sub_1BBAAC684(a1, v20);
      }
      *(_DWORD *)(a1 + 8) = v11;
    }
  }
  if ((*(_DWORD *)(a1 + 320) | 2) != 3 || (uint64_t v22 = *(void *)(a1 + 344)) == 0)
  {
    char v23 = 0;
    BOOL v25 = 1;
    goto LABEL_37;
  }
  if (*(unsigned char *)(v22 + 24) || !*(unsigned char *)(*(void *)(a1 + 840) + 320))
  {
    *(void *)(v22 + 64) = 0;
    *(_DWORD *)(v22 + 60) = 0;
LABEL_29:
    char v23 = 0;
    int v24 = *(_DWORD *)(v22 + 68);
    goto LABEL_30;
  }
  sub_1BBA61EF4(&v61, *(void *)(*(void *)(a2 + 584) + 48), 0);
  if (v61)
  {
    if (*((unsigned char *)v61 + 111))
    {
      BOOL v29 = 0;
      int v30 = 1;
    }
    else
    {
      int v30 = 0;
      BOOL v29 = v61[29] < 18.0;
    }
  }
  else
  {
    BOOL v29 = 0;
    int v30 = 0;
  }
  uint64_t v22 = *(void *)(a1 + 344);
  int v53 = *(_DWORD *)(v22 + 60) + (v30 ^ 1);
  int v54 = *(_DWORD *)(v22 + 64) + v30;
  *(_DWORD *)(v22 + 60) = v53;
  *(_DWORD *)(v22 + 64) = v54;
  if (v53)
  {
    if (v53 <= dword_1BBB7A6C0[*(unsigned int *)(a1 + 320)])
    {
      *(_DWORD *)(v22 + 68) = 0;
      goto LABEL_122;
    }
    int v55 = 3;
  }
  else
  {
    int v55 = 2;
  }
  *(_DWORD *)(v22 + 68) = v55;
LABEL_122:
  int v56 = *(_DWORD *)(v22 + 20);
  if (v53 < v56 && v54 + v53 >= ((28 - v56) & ~((28 - v56) >> 31))) {
    *(_DWORD *)(v22 + 68) = 2;
  }
  if (v62)
  {
    sub_1BB9C09B4(v62);
    uint64_t v22 = *(void *)(a1 + 344);
  }
  if (!v29) {
    goto LABEL_29;
  }
  int v57 = *(_DWORD *)(v22 + 60);
  if (v57 <= 0) {
    goto LABEL_29;
  }
  int v58 = *(_DWORD *)(v22 + 20);
  int v24 = *(_DWORD *)(v22 + 68);
  if (v57 <= v58)
  {
    char v23 = 0;
  }
  else
  {
    char v23 = 1;
    *(unsigned char *)(*(void *)(a1 + 840) + 321) = 1;
  }
LABEL_30:
  BOOL v25 = (v24 - 3) < 0xFFFFFFFE;
  uint64_t v26 = *(void *)(a1 + 840);
  if (*(unsigned char *)(v26 + 321) && ((***(uint64_t (****)(void))v26)() & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = 0;
    }
    if (*(_DWORD *)(a1 + 728)) {
      *(_DWORD *)(a1 + 728) = 0;
    }
  }
LABEL_37:
  sub_1BBA61E04((int **)&v61, *(void *)(*(void *)(a2 + 584) + 48));
  if (v61 && *((unsigned char *)v61 + 130))
  {
    int v27 = *((_DWORD *)v61 + 28);
    if (*((unsigned char *)v61 + 111))
    {
      if (v27)
      {
        int v28 = word_1BBB7A4E0[46 * *(unsigned int *)(a1 + 320) + 1 + 2 * *(int *)(a1 + 728)];
      }
      else
      {
        int v28 = *(_DWORD *)(a1 + 756);
        if (v28 <= 1) {
          int v28 = 1;
        }
      }
      int v31 = v28 - 1;
      goto LABEL_51;
    }
    if (v27 >= 1)
    {
      *(_DWORD *)(a1 + 756) = 0;
      goto LABEL_52;
    }
    if (v27 < 0)
    {
      uint64_t v51 = &word_1BBB7A4E0[46 * *(unsigned int *)(a1 + 320) + 2 * *(int *)(a1 + 728)];
      int v31 = v51[1] - *v51;
LABEL_51:
      *(_DWORD *)(a1 + 756) = v31;
    }
  }
LABEL_52:
  if (v62) {
    sub_1BB9C09B4(v62);
  }
  int v32 = *(_DWORD *)(a1 + 320);
  if (v32 == 3)
  {
    sub_1BBA61EF4(&v61, *(void *)(*(void *)(a2 + 584) + 48), 0);
    if (v61)
    {
      if (*(double *)(a1 + 832) >= v61[29])
      {
        if (*(unsigned char *)(*(void *)(a1 + 840) + 320))
        {
          unsigned int v33 = *(_DWORD *)(a1 + 460);
          if (v33 > *(_DWORD *)(a1 + 772))
          {
            ++*(_DWORD *)(a1 + 456);
            *(_DWORD *)(a1 + 460) = v33 + 1;
            char v23 = 1;
          }
        }
      }
    }
    if (v62) {
      sub_1BB9C09B4(v62);
    }
    int v32 = *(_DWORD *)(a1 + 320);
  }
  uint64_t v34 = &word_1BBB7A4E0[46 * v32 + 2 * *(int *)(a1 + 728)];
  int v35 = *(_DWORD *)(a1 + 756);
  int v36 = v34[1];
  int v37 = *v34;
  uint64_t v38 = *(void *)(a1 + 840);
  *(unsigned char *)(a2 + 2) = *(unsigned char *)(v38 + 320);
  if (*(int *)(*(void *)(a1 + 392) + 560) >= 2)
  {
    *(_DWORD *)(v4 + 72) = -1;
    sub_1BBA61E04((int **)&v61, *(void *)(v38 + 48));
    uint64_t v39 = *(void *)(a1 + 392);
    if (v61 && *(int *)(v39 + 512) <= 1 && *((unsigned char *)v61 + 130) && *((unsigned char *)v61 + 111)) {
      --*(void *)(a1 + 360);
    }
    uint64_t v40 = *(unsigned int *)(v39 + 560);
    if ((int)v40 >= 1)
    {
      uint64_t v41 = *(void *)(a1 + 360);
      do
      {
        uint64_t v42 = v40 - 1;
        if (!(v41 % (1 << *(_DWORD *)(a1 + 4 * (v40 - 1) + 920)))) {
          *(_DWORD *)(v4 + 72) = v40 - 1;
        }
        --v40;
      }
      while ((unint64_t)(v42 + 1) > 1);
    }
    int v43 = *(_DWORD *)(v4 + 76);
    if (*(_DWORD *)(v4 + 72) > v43) {
      *(_DWORD *)(v4 + 72) = v43;
    }
    ++*(void *)(a1 + 360);
    if (v62) {
      sub_1BB9C09B4(v62);
    }
  }
  if (!*(unsigned char *)(a2 + 416))
  {
    if ((v23 & 1) != 0
      || ((uint64_t v44 = *(void *)(a1 + 392), *(unsigned char *)(v44 + 58)) ? (v45 = v25) : (v45 = 0),
          v45 && *(int *)(a1 + 728) >= 1 && v35 % v36 < v36 - v37
       || (*(_DWORD *)(v4 + 72) & 0x80000000) != 0 && *(int *)(v44 + 560) >= 2))
    {
      *(unsigned char *)a2 = 1;
    }
  }
  ++*(_DWORD *)(a1 + 756);
  if (*(unsigned char *)(a1 + 824)
    && !*(unsigned char *)a2
    && *(_DWORD *)(a1 + 460) > *(_DWORD *)(a1 + 772)
    && !*(unsigned char *)(*(void *)(a1 + 840) + 320))
  {
    *(void *)(a1 + 472) = *(void *)(*(void *)(a2 + 592) + 16);
    unsigned int v46 = *(_DWORD *)(v4 + 76);
    uint64_t v47 = v4 + 120 * v46 + 136;
    if (v46 >= 7) {
      uint64_t v47 = 0;
    }
    if (v46 == 9) {
      uint64_t v48 = v4 + 976;
    }
    else {
      uint64_t v48 = v47;
    }
    *(_DWORD *)(a1 + 468) = (*(double *)(v48 + 8) * 100.0 / 1000.0);
  }
  uint64_t v49 = *(void *)(a1 + 384);
  if (v49 && !*(unsigned char *)a2 && *(_DWORD *)(a1 + 468))
  {
    uint64_t v50 = (*(uint64_t (**)(void))(**(void **)(a2 + 592) + 88))(*(void *)(a2 + 592));
    if (*(void *)(v49 + 8) && v50 && *(void *)(v49 + 16))
    {
      uint64_t v61 = 0;
      uint64_t v62 = (std::__shared_weak_count *)&v61;
      uint64_t v63 = 0x3002000000;
      uint64_t v64 = sub_1BBAADFB0;
      int v65 = sub_1BBAADFC0;
      operator new();
    }
    int v52 = *(atomic_ullong **)(v4 + 96);
    *(void *)(v4 + 96) = 0;
    if (v52 && !atomic_fetch_add(v52 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*v52 + 16))(v52);
    }
  }
  if (v60) {
    sub_1BB9C09B4(v60);
  }
}

void sub_1BBAADF20(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  sub_1BBAAE150(v9);
  if (v10 && !atomic_fetch_add(v10 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(atomic_ullong *))(*v10 + 16))(v10);
  }
  if (a3) {
    sub_1BB9C09B4(a3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1BBAADFB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t *sub_1BBAADFC0(uint64_t a1)
{
  return sub_1BBAAE150((uint64_t *)(a1 + 40));
}

void sub_1BBAADFC8(uint64_t a1, int a2, int a3, int a4, CVPixelBufferRef pixelBuffer)
{
  int v7 = *(void (***)(void *, size_t, size_t, void, std::exception_ptr *, float *))(a1 + 40);
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  float v16 = 0.0;
  LODWORD(v17.__ptr_) = 0;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  unsigned int BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 843264104)
  {
    int v11 = *v7;
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
    v11(BaseAddress, Width, Height, BytesPerRow >> 1, &v17, &v16);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  float v13 = 0.0;
  if (Width && Height) {
    float v13 = fmin((float)((float)((float)(*(float *)&v17.__ptr_ + v16) / (float)(Height * Width)) / 120.0), 1.0);
  }
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v14) {
    sub_1BB9CC800(3u);
  }
  std::mutex::lock((std::mutex *)(v14 + 24));
  if ((*(unsigned char *)(v14 + 136) & 1) != 0
    || (v17.__ptr_ = 0, uint64_t v15 = *(void *)(v14 + 16), std::exception_ptr::~exception_ptr(&v17), v15))
  {
    sub_1BB9CC800(2u);
  }
  *(float *)(v14 + 140) = v13;
  *(_DWORD *)(v14 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
  std::mutex::unlock((std::mutex *)(v14 + 24));
}

void sub_1BBAAE13C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BBAAE150(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 136) & 1) == 0)
    {
      v10.__ptr_ = 0;
      uint64_t v3 = *(void *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v10);
      uint64_t v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        int v5 = std::future_category();
        MEMORY[0x1C18603A0](&v8, 4, v5);
        exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
        int v7 = std::logic_error::logic_error(exception, &v8);
        v7->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA440] + 16);
        v7[1] = v9;
        __cxa_throw(v7, (struct type_info *)&unk_1F14EDB80, MEMORY[0x1E4FBA218]);
      }
    }
    if (!atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  return a1;
}

void sub_1BBAAE250(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x1C18603B0](&a11);
  JUMPOUT(0x1BBAAE19CLL);
}

uint64_t sub_1BBAAE28C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_1BBAAE2B0(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x1C18605E0);
}

void sub_1BBAAE330(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

BOOL sub_1BBAAE39C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 840);
  if (!*(unsigned char *)(v1 + 993) || *(int *)(v1 + 152) > 600000) {
    return 0;
  }
  int v2 = *(unsigned __int16 *)(a1 + 8 * *(int *)(a1 + 16) + 24);
  if (v2 == 544) {
    return *(unsigned __int16 *)(*(void *)(a1 + 392) + 90) == 1088;
  }
  if (v2 == 816)
  {
    if (*(_WORD *)(*(void *)(a1 + 392) + 90) != 1664) {
      return 0;
    }
  }
  else if (v2 != 960 || *(_WORD *)(*(void *)(a1 + 392) + 90) != 1920)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_1BBAAE424(unsigned char *a1, char *__s1, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)a1 + 9) = a5;
  *((_DWORD *)a1 + 10) = 0;
  if (__s1)
  {
    a1[32] = 1;
    size_t v7 = strnlen(__s1, 0x95uLL) + 1;
    *((void *)a1 + 3) = v7;
    if (v7 > 0x95) {
      return 4294954386;
    }
    uint64_t result = sub_1BBA3D41C((void **)a1 + 1, v7);
    if (!result)
    {
      memcpy(*((void **)a1 + 1), __s1, *((void *)a1 + 3));
      if (a1[32])
      {
        *((_DWORD *)a1 + 10) = 0;
        size_t v9 = *((void *)a1 + 3);
        if (v9 > 0x96) {
          return 4294954386;
        }
        __lasts = 0;
        std::exception_ptr v10 = strncpy(__dst, *((const char **)a1 + 1), v9);
        uint64_t v11 = strtok_r(v10, ";", &__lasts);
        if (v11)
        {
          std::exception_ptr v12 = v11;
          unint64_t v13 = 0;
          do
          {
            if (!v13 && !strncmp(v12, "FLS", 3uLL)) {
              unint64_t v13 = 0;
            }
            else {
              strlcpy(&__str[20 * v13++], v12, 0x14uLL);
            }
            uint64_t v14 = strtok_r(0, ";", &__lasts);
            if (!v14) {
              break;
            }
            std::exception_ptr v12 = v14;
          }
          while (v13 < 0x64);
          if (v13)
          {
            uint64_t v15 = __str;
            do
            {
              float v16 = strtok_r(v15, ":", &__lasts);
              std::exception_ptr v17 = strtok_r(0, ":", &__lasts);
              if (v16)
              {
                if (v17) {
                  uint64_t v18 = atoi(v17);
                }
                else {
                  uint64_t v18 = 0xFFFFFFFFLL;
                }
                (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)a1 + 328))(a1, v16, v18);
              }
              v15 += 20;
              --v13;
            }
            while (v13);
          }
        }
        (*(void (**)(unsigned char *))(*(void *)a1 + 320))(a1);
      }
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    a1[32] = 0;
  }
  return result;
}

uint64_t sub_1BBAAE674(uint64_t result)
{
  *(unsigned char *)(result + 104) = -1;
  return result;
}

uint64_t sub_1BBAAE680(uint64_t result)
{
  *(_WORD *)(result + 96) = -1;
  return result;
}

CFStringRef sub_1BBAAE68C(uint64_t a1)
{
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const char **)(a1 + 8), 0);
}

uint64_t sub_1BBAAE6A4(uint64_t a1)
{
  return *(char *)(a1 + 112);
}

uint64_t sub_1BBAAE6AC(uint64_t a1)
{
  return *(char *)(a1 + 110);
}

uint64_t sub_1BBAAE6B4(uint64_t a1)
{
  return *(char *)(a1 + 109);
}

uint64_t sub_1BBAAE6BC(uint64_t a1)
{
  return *(char *)(a1 + 108);
}

uint64_t sub_1BBAAE6C4(uint64_t a1)
{
  return *(char *)(a1 + 107);
}

uint64_t sub_1BBAAE6CC(uint64_t a1)
{
  return *(char *)(a1 + 106);
}

uint64_t sub_1BBAAE6D4(uint64_t a1)
{
  return *(char *)(a1 + 105);
}

uint64_t sub_1BBAAE6DC(uint64_t a1)
{
  return *(char *)(a1 + 103);
}

uint64_t sub_1BBAAE6E4(uint64_t a1)
{
  return *(char *)(a1 + 102);
}

uint64_t sub_1BBAAE6EC(uint64_t a1)
{
  return *(char *)(a1 + 101);
}

uint64_t sub_1BBAAE6F4(uint64_t a1)
{
  return *(char *)(a1 + 104);
}

uint64_t sub_1BBAAE6FC(uint64_t a1)
{
  return *(char *)(a1 + 100);
}

uint64_t sub_1BBAAE704(uint64_t a1)
{
  return *(char *)(a1 + 99);
}

uint64_t sub_1BBAAE70C(uint64_t a1)
{
  return *(char *)(a1 + 98);
}

uint64_t sub_1BBAAE714(uint64_t a1)
{
  return *(char *)(a1 + 97);
}

uint64_t sub_1BBAAE71C(uint64_t a1)
{
  return *(char *)(a1 + 96);
}

BOOL sub_1BBAAE724(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112) != 255;
}

BOOL sub_1BBAAE734(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 110) != 255;
}

BOOL sub_1BBAAE744(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 109) != 255;
}

BOOL sub_1BBAAE754(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 108) != 255;
}

BOOL sub_1BBAAE764(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 107) != 255;
}

BOOL sub_1BBAAE774(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 106) != 255;
}

BOOL sub_1BBAAE784(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 105) != 255;
}

BOOL sub_1BBAAE794(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 103) != 255;
}

BOOL sub_1BBAAE7A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 102) != 255;
}

BOOL sub_1BBAAE7B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 101) != 255;
}

BOOL sub_1BBAAE7C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104) != 255;
}

BOOL sub_1BBAAE7D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 100) != 255;
}

BOOL sub_1BBAAE7E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 99) != 255;
}

BOOL sub_1BBAAE7F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 98) != 255;
}

BOOL sub_1BBAAE804(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97) != 255;
}

BOOL sub_1BBAAE814(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96) != 255;
}

uint64_t sub_1BBAAE824(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1)) {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 16);

  return v3(a1);
}

uint64_t sub_1BBAAE8B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(void *)(a1 + 187) = -1;
  *(void *)(a1 + 194) = -1;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  sub_1BBAAE904(a1, a2, a3);
  sub_1BBAAF0D4((char *)a1);
  return *(unsigned int *)(a1 + 264);
}

uint64_t sub_1BBAAE904(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a3)
  {
    int v5 = (unsigned char *)result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 8))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 136))(a3)) & 1) != 0)
    {
      v5[187] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 136))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 144))(a3)) & 1) != 0)
    {
      v5[188] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 144))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 40))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 168))(a3)) & 1) != 0)
    {
      v5[191] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 168))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 160))(a3)) & 1) != 0)
    {
      v5[190] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 160))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 24))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 152))(a3)) & 1) != 0)
    {
      v5[189] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 152))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 56))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 184))(a3)) & 1) != 0)
    {
      v5[193] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 184))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 64))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 192))(a3)) & 1) != 0)
    {
      v5[194] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 192))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 72))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 200))(a3)) & 1) != 0)
    {
      v5[195] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 200))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 48))(a3)) {
      v5[192] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 176))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 80))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 208))(a3)) & 1) != 0)
    {
      v5[196] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 208))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 88))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 216))(a3)) & 1) != 0)
    {
      v5[197] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 216))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 96))(a3)) {
      v5[198] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 224))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 104))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 232))(a3)) & 1) != 0)
    {
      v5[199] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 232))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 112))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(void *)a3 + 240))(a3)) & 1) != 0)
    {
      v5[200] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 240))(a3);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 248))(a3);
      if ((a2 >> result))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 248))(a3);
        v5[201] = result;
      }
    }
  }
  return result;
}

uint64_t sub_1BBAAF0D4(char *a1)
{
  uint64_t v2 = a1[187];
  if (v2 != -1) {
    *(_DWORD *)&a1[4 * v2 + 204] = 2;
  }
  uint64_t v3 = a1[188];
  if (v3 != -1) {
    *(_DWORD *)&a1[4 * v3 + 204] = 4;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 32))(a1)) {
    *(_DWORD *)&a1[4 * a1[191] + 204] = 4;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 24))(a1)) {
    *(_DWORD *)&a1[4 * a1[190] + 204] = 2;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 40))(a1)) {
    *(_DWORD *)&a1[4 * a1[189] + 204] = 1;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 56))(a1)) {
    *(_DWORD *)&a1[4 * a1[193] + 204] = 4;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 64))(a1)) {
    *(_DWORD *)&a1[4 * a1[194] + 204] = 3;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 72))(a1)) {
    *(_DWORD *)&a1[4 * a1[195] + 204] = 6;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 80))(a1)) {
    *(_DWORD *)&a1[4 * a1[196] + 204] = 1;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 88))(a1)) {
    *(_DWORD *)&a1[4 * a1[197] + 204] = 8;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 104))(a1)) {
    *(_DWORD *)&a1[4 * a1[199] + 204] = 4;
  }
  if ((*(unsigned int (**)(char *))(*(void *)a1 + 112))(a1)) {
    *(_DWORD *)&a1[4 * a1[200] + 204] = 1;
  }
  uint64_t result = (*(uint64_t (**)(char *))(*(void *)a1 + 120))(a1);
  if (result) {
    *(_DWORD *)&a1[4 * a1[201] + 204] = 8;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  *((_DWORD *)a1 + 59) = 0;
  do
  {
    v6 += *(_DWORD *)&a1[v5 + 204];
    *(_DWORD *)&a1[v5 + 240] = v6;
    v5 += 4;
  }
  while (v5 != 28);
  return result;
}

uint64_t sub_1BBAAF3E0(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  int v5 = 0;
  int v6 = *(_DWORD *)(a1 + 264);
  *(unsigned char *)(a1 + 186) = 0;
  do
  {
    int v7 = *(char *)(a1 + 187);
    if (v7 != -1 && v5 == v7)
    {
      sub_1BBA19614(a2, *(int *)(a1 + 8) >> 3, 8);
      sub_1BBA19614(a2, *(int *)(a1 + 12) >> 3, 8);
      int v9 = *(unsigned __int8 *)(a1 + 186);
      int v4 = v9 | (1 << *(unsigned char *)(a1 + 187));
      *(unsigned char *)(a1 + 186) = v9 | (1 << *(unsigned char *)(a1 + 187));
    }
    int v10 = *(char *)(a1 + 188);
    if (v10 != -1 && v5 == v10)
    {
      sub_1BBA19614(a2, *(_DWORD *)(a1 + 8), 16);
      sub_1BBA19614(a2, *(_DWORD *)(a1 + 12), 16);
      int v12 = *(unsigned __int8 *)(a1 + 186);
      int v4 = v12 | (1 << *(unsigned char *)(a1 + 188));
      *(unsigned char *)(a1 + 186) = v12 | (1 << *(unsigned char *)(a1 + 188));
    }
    int v13 = *(char *)(a1 + 191);
    if (v13 != -1 && v5 == v13)
    {
      sub_1BBA19614(a2, *(int *)(a1 + 20) >> 4, 8);
      sub_1BBA19614(a2, *(int *)(a1 + 24) >> 4, 8);
      sub_1BBA19614(a2, *(int *)(a1 + 28) >> 4, 8);
      sub_1BBA19614(a2, *(int *)(a1 + 32) >> 4, 8);
      int v15 = *(unsigned __int8 *)(a1 + 186);
      int v4 = v15 | (1 << *(unsigned char *)(a1 + 191));
      *(unsigned char *)(a1 + 186) = v15 | (1 << *(unsigned char *)(a1 + 191));
    }
    int v16 = *(char *)(a1 + 190);
    if (v16 != -1 && v5 == v16)
    {
      sub_1BBA19614(a2, *(unsigned __int16 *)(a1 + 16), 16);
      int v18 = *(unsigned __int8 *)(a1 + 186);
      int v4 = v18 | (1 << *(unsigned char *)(a1 + 190));
      *(unsigned char *)(a1 + 186) = v18 | (1 << *(unsigned char *)(a1 + 190));
    }
    int v19 = *(char *)(a1 + 193);
    if (v19 != -1 && v5 == v19)
    {
      int v20 = (int)(float)((float)(*(float *)(a1 + 52) * 255.0) + 0.5);
      if (v20 >= 255) {
        int v20 = 255;
      }
      sub_1BBA19614(a2, v20 & ~(v20 >> 31), 8);
      int v21 = (int)(float)((float)(*(float *)(a1 + 56) * 255.0) + 0.5);
      if (v21 >= 255) {
        int v21 = 255;
      }
      sub_1BBA19614(a2, v21 & ~(v21 >> 31), 8);
      int v22 = (int)(float)((float)(*(float *)(a1 + 60) * 255.0) + 0.5);
      if (v22 >= 255) {
        int v22 = 255;
      }
      sub_1BBA19614(a2, v22 & ~(v22 >> 31), 8);
      int v23 = (int)(float)((float)(*(float *)(a1 + 64) * 255.0) + 0.5);
      if (v23 >= 255) {
        int v23 = 255;
      }
      sub_1BBA19614(a2, v23 & ~(v23 >> 31), 8);
      int v24 = *(unsigned __int8 *)(a1 + 186);
      int v4 = v24 | (1 << *(unsigned char *)(a1 + 193));
      *(unsigned char *)(a1 + 186) = v24 | (1 << *(unsigned char *)(a1 + 193));
    }
    int v25 = *(char *)(a1 + 194);
    if (v25 != -1 && v5 == v25)
    {
      sub_1BBA19614(a2, *(int *)(a1 + 68) >> 4, 8);
      sub_1BBA19614(a2, *(int *)(a1 + 72) >> 4, 8);
      sub_1BBA19614(a2, *(_DWORD *)(a1 + 76), 8);
      int v26 = *(unsigned __int8 *)(a1 + 186);
      int v4 = v26 | (1 << *(unsigned char *)(a1 + 194));
      *(unsigned char *)(a1 + 186) = v26 | (1 << *(unsigned char *)(a1 + 194));
    }
    int v27 = *(char *)(a1 + 195);
    if (v27 != -1 && v5 == v27)
    {
      sub_1BBA19614(a2, *(_DWORD *)(a1 + 68), 16);
      sub_1BBA19614(a2, *(_DWORD *)(a1 + 72), 16);
      sub_1BBA19614(a2, *(_DWORD *)(a1 + 76), 16);
      int v28 = *(unsigned __int8 *)(a1 + 186);
      int v4 = v28 | (1 << *(unsigned char *)(a1 + 195));
      *(unsigned char *)(a1 + 186) = v28 | (1 << *(unsigned char *)(a1 + 195));
    }
    if (*(unsigned __int8 *)(a1 + 187) != 255 && v5 == *(char *)(a1 + 200))
    {
      sub_1BBA19614(a2, *(unsigned __int8 *)(a1 + 102), 8);
      int v29 = *(unsigned __int8 *)(a1 + 186);
      int v4 = v29 | (1 << *(unsigned char *)(a1 + 200));
      *(unsigned char *)(a1 + 186) = v29 | (1 << *(unsigned char *)(a1 + 200));
    }
    ++v5;
  }
  while (v5 != 7);
  int v30 = *(unsigned __int8 *)(a1 + 192);
  if (v30 != 255 && *(unsigned char *)(a1 + 80))
  {
    v4 |= 1 << v30;
    *(unsigned char *)(a1 + 186) = v4;
  }
  sub_1BBA19614(a2, v4, 8);
  return (v6 + 1);
}

uint64_t sub_1BBAAF770(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 187) = -1;
  *(void *)(a1 + 194) = -1;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  sub_1BBAAE904(a1, a4, a3);
  sub_1BBAAF0D4((char *)a1);
  *(unsigned char *)(a1 + 186) = 0;
  uint64_t v10 = *(char *)(a1 + 187);
  if (v10 == -1)
  {
    int v13 = 0;
  }
  else
  {
    uint64_t v11 = (unsigned char *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v10 + 236));
    *uint64_t v11 = *(_DWORD *)(a1 + 8) >> 3;
    v11[1] = *(_DWORD *)(a1 + 12) >> 3;
    int v12 = *(unsigned __int8 *)(a1 + 186);
    int v13 = v12 | (1 << *(unsigned char *)(a1 + 187));
    *(unsigned char *)(a1 + 186) = v12 | (1 << *(unsigned char *)(a1 + 187));
  }
  uint64_t v14 = *(char *)(a1 + 188);
  if (v14 != -1)
  {
    unsigned int v15 = *(unsigned __int16 *)(a1 + 12);
    int v16 = (_WORD *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v14 + 236));
    *int v16 = bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16;
    v16[1] = bswap32(v15) >> 16;
    v13 |= 1 << v14;
    *(unsigned char *)(a1 + 186) = v13;
  }
  uint64_t v17 = *(char *)(a1 + 191);
  if (v17 != -1)
  {
    int v18 = (unsigned char *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v17 + 236));
    *int v18 = *(_DWORD *)(a1 + 20) >> 4;
    v18[1] = *(_DWORD *)(a1 + 24) >> 4;
    v18[2] = *(_DWORD *)(a1 + 28) >> 4;
    v18[3] = *(_DWORD *)(a1 + 32) >> 4;
    int v19 = *(unsigned __int8 *)(a1 + 186);
    int v13 = v19 | (1 << *(unsigned char *)(a1 + 191));
    *(unsigned char *)(a1 + 186) = v19 | (1 << *(unsigned char *)(a1 + 191));
  }
  uint64_t v20 = *(char *)(a1 + 190);
  if (v20 != -1)
  {
    int v21 = (unsigned char *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v20 + 236));
    *int v21 = *(unsigned char *)(a1 + 17);
    v21[1] = *(unsigned char *)(a1 + 16);
    int v22 = *(unsigned __int8 *)(a1 + 186);
    int v13 = v22 | (1 << *(unsigned char *)(a1 + 190));
    *(unsigned char *)(a1 + 186) = v22 | (1 << *(unsigned char *)(a1 + 190));
  }
  uint64_t v23 = *(char *)(a1 + 193);
  if (v23 != -1)
  {
    uint64_t v24 = *(unsigned int *)(a1 + 4 * v23 + 236);
    int v25 = (int)(float)((float)(*(float *)(a1 + 52) * 255.0) + 0.5);
    if (v25 >= 255) {
      int v25 = 255;
    }
    int v26 = (unsigned char *)(a2 + a5 + v24);
    *int v26 = v25 & ~(v25 >> 31);
    int v27 = (int)(float)((float)(*(float *)(a1 + 56) * 255.0) + 0.5);
    if (v27 >= 255) {
      int v27 = 255;
    }
    v26[1] = v27 & ~(v27 >> 31);
    int v28 = (int)(float)((float)(*(float *)(a1 + 60) * 255.0) + 0.5);
    if (v28 >= 255) {
      int v28 = 255;
    }
    v26[2] = v28 & ~(v28 >> 31);
    int v29 = (int)(float)((float)(*(float *)(a1 + 64) * 255.0) + 0.5);
    if (v29 >= 255) {
      int v29 = 255;
    }
    v26[3] = v29 & ~(v29 >> 31);
    int v30 = *(unsigned __int8 *)(a1 + 186);
    int v13 = v30 | (1 << *(unsigned char *)(a1 + 193));
    *(unsigned char *)(a1 + 186) = v30 | (1 << *(unsigned char *)(a1 + 193));
  }
  uint64_t v31 = *(char *)(a1 + 194);
  if (v31 != -1)
  {
    int v32 = (unsigned char *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v31 + 236));
    *int v32 = *(_DWORD *)(a1 + 68) >> 4;
    v32[1] = *(_DWORD *)(a1 + 72) >> 4;
    v32[2] = *(_DWORD *)(a1 + 76);
    int v33 = *(unsigned __int8 *)(a1 + 186);
    int v13 = v33 | (1 << *(unsigned char *)(a1 + 194));
    *(unsigned char *)(a1 + 186) = v33 | (1 << *(unsigned char *)(a1 + 194));
  }
  uint64_t v34 = *(char *)(a1 + 195);
  if (v34 != -1)
  {
    unsigned int v35 = *(unsigned __int16 *)(a1 + 72);
    unsigned int v36 = *(unsigned __int16 *)(a1 + 76);
    int v37 = (_WORD *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v34 + 236));
    *int v37 = bswap32(*(unsigned __int16 *)(a1 + 68)) >> 16;
    v37[1] = bswap32(v35) >> 16;
    v37[2] = bswap32(v36) >> 16;
    v13 |= 1 << v34;
    *(unsigned char *)(a1 + 186) = v13;
  }
  int v38 = *(unsigned __int8 *)(a1 + 189);
  if (v38 != 255)
  {
    v13 |= 1 << v38;
    *(unsigned char *)(a1 + 186) = v13;
  }
  int v39 = *(unsigned __int8 *)(a1 + 192);
  if (v39 != 255 && *(unsigned char *)(a1 + 80))
  {
    v13 |= 1 << v39;
    *(unsigned char *)(a1 + 186) = v13;
  }
  uint64_t v40 = *(char *)(a1 + 197);
  if (v40 != -1)
  {
    *(void *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v40 + 236)) = bswap64(*(void *)(a1 + 88));
    v13 |= 1 << v40;
    *(unsigned char *)(a1 + 186) = v13;
  }
  int v41 = *(unsigned __int8 *)(a1 + 198);
  if (v41 != 255)
  {
    int v42 = 1 << v41;
    int v43 = v13 | v42;
    v13 &= ~v42;
    if (*(unsigned char *)(a1 + 96)) {
      int v13 = v43;
    }
    *(unsigned char *)(a1 + 186) = v13;
  }
  uint64_t v44 = *(char *)(a1 + 199);
  if (v44 != -1)
  {
    BOOL v45 = (_WORD *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v44 + 236));
    _WORD *v45 = bswap32(*(unsigned __int16 *)(a1 + 98)) >> 16;
    v45[1] = bswap32(*(unsigned __int16 *)(a1 + 100)) >> 16;
    v13 |= 1 << v44;
    *(unsigned char *)(a1 + 186) = v13;
  }
  uint64_t v46 = *(char *)(a1 + 200);
  if (v46 != -1)
  {
    *(unsigned char *)(a2 + *(unsigned int *)(a1 + 4 * v46 + 236) + a5) = *(unsigned char *)(a1 + 102);
    int v47 = *(unsigned __int8 *)(a1 + 186);
    int v13 = v47 | (1 << *(unsigned char *)(a1 + 200));
    *(unsigned char *)(a1 + 186) = v47 | (1 << *(unsigned char *)(a1 + 200));
  }
  uint64_t v48 = *(char *)(a1 + 201);
  if (v48 != -1)
  {
    uint64_t v49 = (_WORD *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v48 + 236));
    *uint64_t v49 = bswap32(*(unsigned __int16 *)(a1 + 104)) >> 16;
    v49[1] = bswap32(*(unsigned __int16 *)(a1 + 106)) >> 16;
    v49[2] = bswap32(*(unsigned __int16 *)(a1 + 108)) >> 16;
    v49[3] = bswap32(*(unsigned __int16 *)(a1 + 110)) >> 16;
    v13 |= 1 << v48;
    *(unsigned char *)(a1 + 186) = v13;
  }
  uint64_t v50 = *(unsigned int *)(a1 + 264);
  uint64_t v51 = v50 + a5;
  uint64_t v52 = ~(v50 + a5) + a6;
  if (v52 < 1)
  {
    if (!(_BYTE)v13)
    {
      uint64_t v50 = (v50 + 1);
      *(unsigned char *)(a2 + v51) = 0;
      uint64_t v51 = v50 + a5;
      LOBYTE(v13) = 0x80;
    }
  }
  else
  {
    *(unsigned char *)(a2 + v51) = 0;
    memset((void *)(a2 + a5 + v50 + 1), 128, v52 - 1);
    uint64_t v50 = (v50 + v52);
    LOBYTE(v13) = *(unsigned char *)(a1 + 186) | 0x80;
    *(unsigned char *)(a1 + 186) = v13;
    uint64_t v51 = v50 + a5;
  }
  *(unsigned char *)(a2 + v51) = v13;
  return (v50 + 1);
}

uint64_t sub_1BBAAFC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a3 - 1;
  unsigned int v10 = *(unsigned __int8 *)(a2 + a3 - 1);
  *(unsigned char *)(a1 + 186) = v10;
  *(void *)(a1 + 187) = -1;
  *(void *)(a1 + 194) = -1;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  sub_1BBAAE904(a1, v10, a4);
  if (*(char *)(a1 + 186) < 0)
  {
    uint64_t v9 = v9 != 0;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = v11 - 1;
      if ((unint64_t)(v11 - 1) < 2) {
        break;
      }
      int v13 = *(char *)(a2 - 2 + v11--);
      if ((v13 & 0x80000000) == 0)
      {
        uint64_t v9 = v12 - 1;
        break;
      }
    }
  }
  sub_1BBAAF0D4((char *)a1);
  uint64_t v15 = v9 - *(unsigned int *)(a1 + 264);
  uint64_t v16 = a2 + v15;
  uint64_t v17 = *(char *)(a1 + 187);
  if (v17 != -1)
  {
    uint64_t v18 = *(unsigned int *)(a1 + 4 * v17 + 236);
    *(_DWORD *)(a1 + 8) = 8 * *(unsigned __int8 *)(v16 + v18);
    *(_DWORD *)(a1 + 12) = 8 * *(unsigned __int8 *)(v16 + (v18 + 1));
  }
  uint64_t v19 = *(char *)(a1 + 188);
  if (v19 != -1)
  {
    uint64_t v20 = (unsigned __int16 *)(v16 + *(unsigned int *)(a1 + 4 * v19 + 236));
    unsigned int v21 = bswap32(*v20) >> 16;
    LODWORD(v20) = bswap32(v20[1]) >> 16;
    *(_DWORD *)(a1 + 8) = v21;
    *(_DWORD *)(a1 + 12) = v20;
  }
  uint64_t v22 = *(char *)(a1 + 191);
  if (v22 != -1)
  {
    uint64_t v23 = *(unsigned int *)(a1 + 4 * v22 + 236);
    *(_DWORD *)(a1 + 20) = 16 * *(unsigned __int8 *)(v16 + v23);
    *(_DWORD *)(a1 + 24) = 16 * *(unsigned __int8 *)(v16 + (v23 + 1));
    *(_DWORD *)(a1 + 28) = 16 * *(char *)(v16 + (v23 + 2));
    *(_DWORD *)(a1 + 32) = 16 * *(char *)(v16 + (v23 + 3));
  }
  uint64_t v24 = *(char *)(a1 + 190);
  if (v24 != -1)
  {
    uint64_t v25 = *(unsigned int *)(a1 + 4 * v24 + 236);
    __int16 v26 = *(unsigned __int8 *)(v16 + v25);
    *(_WORD *)(a1 + 16) = v26 << 8;
    *(_WORD *)(a1 + 16) = *(unsigned __int8 *)(v16 + (v25 + 1)) | (unsigned __int16)(v26 << 8);
  }
  uint64_t v27 = *(char *)(a1 + 193);
  if (v27 != -1)
  {
    uint64_t v28 = *(unsigned int *)(a1 + 4 * v27 + 236);
    LOBYTE(v14) = *(unsigned char *)(v16 + v28);
    *(float *)&unsigned int v29 = (float)v14 / 255.0;
    *(float *)(a1 + 52) = *(float *)&v29;
    LOBYTE(v29) = *(unsigned char *)(v16 + (v28 + 1));
    *(float *)&unsigned int v30 = (float)v29 / 255.0;
    *(float *)(a1 + 56) = *(float *)&v30;
    LOBYTE(v30) = *(unsigned char *)(v16 + (v28 + 2));
    *(float *)&unsigned int v31 = (float)v30 / 255.0;
    *(float *)(a1 + 60) = *(float *)&v31;
    LOBYTE(v31) = *(unsigned char *)(v16 + (v28 + 3));
    *(float *)(a1 + 64) = (float)v31 / 255.0;
  }
  uint64_t v32 = *(char *)(a1 + 194);
  if (v32 != -1)
  {
    uint64_t v33 = *(unsigned int *)(a1 + 4 * v32 + 236);
    *(_DWORD *)(a1 + 68) = 16 * *(unsigned __int8 *)(v16 + v33);
    *(_DWORD *)(a1 + 72) = 16 * *(unsigned __int8 *)(v16 + (v33 + 1));
    *(_DWORD *)(a1 + 76) = *(unsigned __int8 *)(v16 + (v33 + 2));
  }
  uint64_t v34 = *(char *)(a1 + 195);
  if (v34 != -1)
  {
    unsigned int v35 = (unsigned __int16 *)(v16 + *(unsigned int *)(a1 + 4 * v34 + 236));
    unsigned int v36 = bswap32(v35[1]) >> 16;
    *(_DWORD *)(a1 + 68) = bswap32(*v35) >> 16;
    *(_DWORD *)(a1 + 72) = v36;
    *(_DWORD *)(a1 + 76) = bswap32(v35[2]) >> 16;
  }
  int v37 = *(unsigned __int8 *)(a1 + 192);
  if (v37 != 255) {
    *(unsigned char *)(a1 + 80) = (*(unsigned __int8 *)(a1 + 186) >> v37) & 1;
  }
  uint64_t v38 = *(char *)(a1 + 197);
  if (v38 != -1) {
    *(void *)(a1 + 88) = bswap64(*(void *)(v16 + *(unsigned int *)(a1 + 4 * v38 + 236)));
  }
  int v39 = *(unsigned __int8 *)(a1 + 198);
  if (v39 != 255) {
    *(unsigned char *)(a1 + 96) = (*(unsigned __int8 *)(a1 + 186) >> v39) & 1;
  }
  uint64_t v40 = *(char *)(a1 + 199);
  if (v40 != -1)
  {
    int v41 = (unsigned __int16 *)(v16 + *(unsigned int *)(a1 + 4 * v40 + 236));
    *(_WORD *)(a1 + 98) = bswap32(*v41) >> 16;
    *(_WORD *)(a1 + 100) = bswap32(v41[1]) >> 16;
  }
  uint64_t v42 = *(char *)(a1 + 200);
  if (v42 != -1) {
    *(unsigned char *)(a1 + 102) = *(unsigned char *)(v16 + *(unsigned int *)(a1 + 4 * v42 + 236));
  }
  uint64_t v43 = *(char *)(a1 + 201);
  if (v43 != -1)
  {
    uint64_t v44 = (unsigned __int16 *)(v16 + *(unsigned int *)(a1 + 4 * v43 + 236));
    *(_WORD *)(a1 + 104) = bswap32(*v44) >> 16;
    *(_WORD *)(a1 + 106) = bswap32(v44[1]) >> 16;
    *(_WORD *)(a1 + 108) = bswap32(v44[2]) >> 16;
    *(_WORD *)(a1 + 110) = bswap32(v44[3]) >> 16;
  }
  *a5 = a3 - v15;
  return 0;
}

uint64_t sub_1BBAB0024(uint64_t result, char a2)
{
  *(unsigned char *)(result + 187) = a2;
  return result;
}

BOOL sub_1BBAB002C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 201) != 255;
}

BOOL sub_1BBAB003C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200) != 255;
}

BOOL sub_1BBAB004C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 199) != 255;
}

BOOL sub_1BBAB005C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 198) != 255;
}

BOOL sub_1BBAB006C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 197) != 255;
}

BOOL sub_1BBAB007C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196) != 255;
}

BOOL sub_1BBAB008C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 195) != 255;
}

BOOL sub_1BBAB009C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 194) != 255;
}

BOOL sub_1BBAB00AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 193) != 255;
}

BOOL sub_1BBAB00BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 192) != 255;
}

BOOL sub_1BBAB00CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 189) != 255;
}

BOOL sub_1BBAB00DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 191) != 255;
}

BOOL sub_1BBAB00EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 190) != 255;
}

BOOL sub_1BBAB00FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 187) != 255 || *(unsigned __int8 *)(a1 + 188) != 255;
}

void sub_1BBAB0120()
{
}

uint64_t sub_1BBAB0138(unsigned char *a1, char *a2, char a3)
{
  uint64_t result = sub_1BBAB0190(a1, a2, a3);
  if (result)
  {
    uint64_t result = strcmp(a2, "CF");
    if (result) {
      return 4294954386;
    }
    else {
      a1[104] = a3;
    }
  }
  return result;
}

uint64_t sub_1BBAB0190(unsigned char *a1, char *__s1, char a3)
{
  uint64_t result = strcmp(__s1, "LR");
  if (result)
  {
    uint64_t result = strcmp(__s1, "EOD");
    if (result)
    {
      uint64_t result = strcmp(__s1, "RVRA1");
      if (result)
      {
        uint64_t result = strcmp(__s1, "VRAE");
        if (result)
        {
          uint64_t result = strcmp(__s1, "QS");
          if (result)
          {
            uint64_t result = strcmp(__s1, "CR");
            if (result)
            {
              uint64_t result = strcmp(__s1, "CH1");
              if (result)
              {
                uint64_t result = strcmp(__s1, "FA");
                if (result)
                {
                  uint64_t result = strcmp(__s1, "POS");
                  if (result)
                  {
                    uint64_t result = strcmp(__s1, "POSE");
                    if (result)
                    {
                      uint64_t result = strcmp(__s1, "HTS");
                      if (result)
                      {
                        uint64_t result = strcmp(__s1, "RR");
                        if (result)
                        {
                          uint64_t result = strcmp(__s1, "SW");
                          if (result)
                          {
                            uint64_t result = strcmp(__s1, "QP");
                            if (result)
                            {
                              uint64_t result = strcmp(__s1, "MLS");
                              if (result) {
                                return 4294954386;
                              }
                              else {
                                a1[112] = a3;
                              }
                            }
                            else
                            {
                              a1[109] = a3;
                            }
                          }
                          else
                          {
                            a1[110] = a3;
                          }
                        }
                        else
                        {
                          a1[108] = a3;
                        }
                      }
                      else
                      {
                        a1[106] = a3;
                      }
                    }
                    else
                    {
                      a1[103] = a3;
                    }
                  }
                  else
                  {
                    a1[102] = a3;
                  }
                }
                else
                {
                  a1[101] = a3;
                }
              }
              else
              {
                a1[99] = a3;
              }
            }
            else
            {
              a1[100] = a3;
            }
          }
          else
          {
            a1[98] = a3;
          }
        }
        else
        {
          a1[97] = a3;
        }
      }
      else
      {
        a1[96] = a3;
      }
    }
    else
    {
      a1[107] = a3;
    }
  }
  else
  {
    a1[111] = 1;
  }
  return result;
}

uint64_t sub_1BBAB036C(unsigned char *a1)
{
  BOOL v2 = (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 312))(a1)
    || a1[108] != 255
    || a1[107] != 255
    || a1[106] != 255
    || a1[109] != 255
    || a1[110] != 255;
  a1[33] = v2;
  return 0;
}

BOOL sub_1BBAB0408(unsigned __int8 *a1)
{
  return a1[96] != 255
      || a1[98] != 255
      || a1[99] != 255
      || a1[100] != 255
      || a1[101] != 255
      || a1[104] != 255
      || a1[102] != 255
      || a1[97] != 255
      || a1[103] != 255;
}

void sub_1BBAB0480(void *a1)
{
  sub_1BBA3DF70(a1);

  JUMPOUT(0x1C18605E0);
}

uint64_t sub_1BBAB04BC(unsigned char *a1, char *a2, char a3)
{
  uint64_t result = sub_1BBAB0190(a1, a2, a3);
  if (result)
  {
    uint64_t result = strcmp(a2, "MS");
    if (result)
    {
      uint64_t result = strcmp(a2, "CABAC");
      if (result)
      {
        uint64_t result = strcmp(a2, "LTR");
        if (result)
        {
          uint64_t result = strcmp(a2, "RVRA");
          if (result)
          {
            uint64_t result = strcmp(a2, "PR");
            if (result)
            {
              uint64_t result = strcmp(a2, "CH");
              if (result)
              {
                uint64_t result = strcmp(a2, "AS");
                if (result) {
                  return 4294954386;
                }
                else {
                  a1[105] = a3;
                }
              }
              else
              {
                a1[99] = a3;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BBAB0594(unsigned char *a1)
{
  BOOL v2 = (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 312))(a1)
    || a1[107] != 255
    || a1[108] != 255
    || a1[109] != 255
    || a1[110] != 255
    || a1[106] != 255;
  a1[33] = v2;
  return 0;
}

BOOL sub_1BBAB0630(unsigned __int8 *a1)
{
  return a1[96] != 255
      || a1[98] != 255
      || a1[99] != 255
      || a1[100] != 255
      || a1[101] != 255
      || a1[102] != 255
      || a1[105] != 255
      || a1[103] != 255;
}

void sub_1BBAB069C(void *a1)
{
  sub_1BBA3DF70(a1);

  JUMPOUT(0x1C18605E0);
}

void *sub_1BBAB06D8(char *__s1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!__s1 || strncmp(__s1, "FLBA;", 5uLL) && strncmp(__s1, "FLBN;", 5uLL) && strncmp(__s1, "FLS2;", 5uLL))
  {
    if (a4 == 1)
    {
      unsigned int v14 = operator new(0x78uLL, MEMORY[0x1E4FBA2D0]);
      uint64_t v9 = v14;
      if (v14)
      {
        v14[14] = 0;
        *((_OWORD *)v14 + 5) = 0u;
        *((_OWORD *)v14 + 6) = 0u;
        *((_OWORD *)v14 + 3) = 0u;
        *((_OWORD *)v14 + 4) = 0u;
        *((_OWORD *)v14 + 1) = 0u;
        *((_OWORD *)v14 + 2) = 0u;
        *(_OWORD *)unsigned int v14 = 0u;
        *((unsigned char *)v14 + 112) = -1;
        v14[12] = -1;
        *(void *)((char *)v14 + 103) = -1;
        unsigned int v10 = &unk_1F14EE6F0;
        goto LABEL_16;
      }
    }
    else
    {
      if (a4)
      {
        uint64_t v9 = 0;
        goto LABEL_18;
      }
      std::logic_error v8 = operator new(0x78uLL, MEMORY[0x1E4FBA2D0]);
      uint64_t v9 = v8;
      if (v8)
      {
        v8[14] = 0;
        *((_OWORD *)v8 + 5) = 0u;
        *((_OWORD *)v8 + 6) = 0u;
        *((_OWORD *)v8 + 3) = 0u;
        *((_OWORD *)v8 + 4) = 0u;
        *((_OWORD *)v8 + 1) = 0u;
        *((_OWORD *)v8 + 2) = 0u;
        *(_OWORD *)std::logic_error v8 = 0u;
        *((unsigned char *)v8 + 112) = -1;
        v8[12] = -1;
        *(void *)((char *)v8 + 103) = -1;
        unsigned int v10 = &unk_1F14EE850;
LABEL_16:
        *uint64_t v9 = v10;
      }
    }
LABEL_18:
    if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136446978;
      uint64_t v17 = __s1;
      __int16 v18 = 1024;
      int v19 = a2;
      __int16 v20 = 1024;
      int v21 = a3;
      __int16 v22 = 1024;
      int v23 = a4;
      uint64_t v12 = MEMORY[0x1E4F14500];
      int v13 = "NegotiationString is created based on %{public}s encoder %d usage %d codec_type %d \n";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  uint64_t v11 = operator new(0x80uLL, MEMORY[0x1E4FBA2D0]);
  uint64_t v9 = v11;
  if (v11)
  {
    v11[9] = 0;
    v11[10] = 0;
    *((void *)v11 + 2) = 0;
    *((void *)v11 + 3) = 0;
    *((_WORD *)v11 + 16) = 0;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *(void *)uint64_t v11 = &unk_1F14EE3D0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 12) = 0;
    *((void *)v11 + 13) = 0;
  }
  if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136446978;
    uint64_t v17 = __s1;
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    int v23 = a4;
    uint64_t v12 = MEMORY[0x1E4F14500];
    int v13 = "NegotiationBitField is created based on %{public}s encoder %d usage %d codec_type %d \n";
LABEL_21:
    _os_log_impl(&dword_1BB9B9000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v16, 0x1Eu);
  }
LABEL_22:
  if (v9) {
    (*(void (**)(void *, char *, uint64_t, uint64_t, uint64_t))(*v9 + 304))(v9, __s1, a2, a3, a4);
  }
  return v9;
}

CFDataRef sub_1BBAB09E8(const std::string *__s)
{
  uint64_t v1 = __s;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v3 = (std::string::__raw *)__s->__r_.__value_.__r.__words[0];
    uint64_t size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v3 = (std::string::__raw *)__s;
    uint64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  }
  if (size < 5) {
    goto LABEL_5;
  }
  int v7 = (char *)v3 + size;
  std::logic_error v8 = v3;
  while (1)
  {
    if (size == 4) {
      goto LABEL_5;
    }
    uint64_t v9 = (char *)memchr(v8, 70, size - 4);
    if (!v9) {
      goto LABEL_5;
    }
    if (*(_DWORD *)v9 == 1094863942 && v9[4] == 59) {
      break;
    }
    std::logic_error v8 = (std::string::__raw *)(v9 + 1);
    uint64_t size = v7 - (char *)v8;
    if (v7 - (char *)v8 < 5) {
      goto LABEL_5;
    }
  }
  if (v9 == v7 || (uint64_t v17 = (char *)(v9 - (char *)v3), v9 - (char *)v3 == -1))
  {
LABEL_5:
    if ((v2 & 0x80) != 0)
    {
      int v5 = (const std::string *)v1->__r_.__value_.__r.__words[0];
      uint64_t v6 = v1->__r_.__value_.__l.__size_;
    }
    else
    {
      int v5 = v1;
      uint64_t v6 = v2;
    }
    if (v6 >= 5)
    {
      int v13 = (char *)v5 + v6;
      unsigned int v14 = (std::string *)v5;
      do
      {
        if (v6 == 4) {
          break;
        }
        uint64_t v15 = (char *)memchr(v14, 70, v6 - 4);
        if (!v15) {
          break;
        }
        if (*(_DWORD *)v15 == 1312967750 && v15[4] == 59)
        {
          if (v15 == v13) {
            break;
          }
          uint64_t v17 = (char *)(v15 - (char *)v5);
          if (v15 - (char *)v5 == -1) {
            break;
          }
          goto LABEL_39;
        }
        unsigned int v14 = (std::string *)(v15 + 1);
        uint64_t v6 = v13 - (char *)v14;
      }
      while (v13 - (char *)v14 >= 5);
    }
    if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      if ((v2 & 0x80) != 0) {
        uint64_t v1 = (const std::string *)v1->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v38 = v1;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Invalid FLB string %{public}s", buf, 0xCu);
    }
    return 0;
  }
  else
  {
LABEL_39:
    __int16 v18 = std::string::basic_string(&v36, v1, (std::string::size_type)(v17 + 5), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)buf);
    char v24 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v25 = v36.__r_.__value_.__l.__size_;
      if (v36.__r_.__value_.__s.__data_[8])
      {
        CFDataRef v11 = 0;
LABEL_59:
        operator delete(v36.__r_.__value_.__l.__data_);
        return v11;
      }
    }
    else
    {
      if (*((unsigned char *)&v36.__r_.__value_.__s + 23)) {
        return 0;
      }
      std::string::size_type v25 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    unint64_t v26 = v25 >> 1;
    unint64_t v27 = (v25 >> 1) + 7;
    size_t v28 = (v27 >> 2) & 0x3FFFFFFFFFFFFFFELL;
    MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23);
    unsigned int v29 = (char *)&v35 - ((v28 + 15) & 0x7FFFFFFFFFFFFFF0);
    bzero(v29, v28);
    if (v25 >= 2)
    {
      uint64_t v30 = 0;
      if (v26 <= 1) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v25 >> 1;
      }
      uint64_t v32 = &v36;
      if (v24 < 0) {
        uint64_t v32 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      do
      {
        if (v32->__r_.__value_.__s.__data_[v30] == 49) {
          v29[v30 >> 3] |= 1 << (v30 & 7);
        }
        ++v30;
      }
      while (v31 != v30);
      uint64_t v33 = 0;
      uint64_t v34 = (char *)v32 + v26;
      do
      {
        if (v34[v33] == 49) {
          v29[(v27 >> 3) + (v33 >> 3)] |= 1 << (v33 & 7);
        }
        ++v33;
      }
      while (v31 != v33);
    }
    CFDataRef v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)&v35 - ((v28 + 15) & 0x7FFFFFFFFFFFFFF0), (v27 >> 2) & 0x3FFFFFFFFFFFFFFELL);
    if (v24 < 0) {
      goto LABEL_59;
    }
  }
  return v11;
}

void sub_1BBAB0D38(_Unwind_Exception *exception_object)
{
  if (v1 < 0) {
    operator delete(*(void **)(v2 - 120));
  }
  _Unwind_Resume(exception_object);
}

CFDataRef sub_1BBAB0D58(const __CFData *result, const char *a2, char *a3, int a4)
{
  if (result)
  {
    CFDataRef v7 = result;
    CFIndex Length = CFDataGetLength(result);
    uint64_t result = (const __CFData *)strlen(a2);
    if ((unint64_t)result + 8 * Length <= a4)
    {
      int v9 = (int)result;
      strncpy(a3, a2, (size_t)result);
      uint64_t result = (const __CFData *)CFDataGetBytePtr(v7);
      if (Length)
      {
        for (uint64_t i = 0; i != Length; ++i)
        {
          uint64_t v11 = 0;
          do
          {
            if ((*(unsigned __int8 *)result >> v11)) {
              char v12 = 49;
            }
            else {
              char v12 = 48;
            }
            a3[v9 + v11++] = v12;
          }
          while (v11 != 8);
          v9 += 8;
          uint64_t result = (const __CFData *)((char *)result + 1);
        }
      }
      a3[v9] = 0;
    }
  }
  return result;
}

CFDataRef sub_1BBAB0E24(char *__s)
{
  if (!__s) {
    return 0;
  }
  sub_1BB9D08B8(&v4, __s);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    sub_1BBA3CD68(&__p, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v4;
  }
  CFDataRef v1 = sub_1BBAB09E8(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1BBAB0EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_1BBAB0EEC(const __CFString *a1, const __CFString *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(a1);
  int v9 = (char *)&v29 - ((MEMORY[0x1F4188790](Length, v5, Length + 1, v6, v7, v8) + 16) & 0xFFFFFFFFFFFFFFF0);
  CFStringGetCString(a1, v9, v10, 0);
  CFIndex v11 = CFStringGetLength(a2);
  int v16 = (char *)&v29 - ((MEMORY[0x1F4188790](v11, v12, v11 + 1, v13, v14, v15) + 16) & 0xFFFFFFFFFFFFFFF0);
  CFStringGetCString(a2, v16, v17, 0);
  sub_1BB9D08B8(&v45, v9);
  sub_1BB9D08B8(&v44, v16);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    sub_1BBA3CD68(&__dst, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v45;
  }
  sub_1BBA3CE04((std::string::size_type *)&__str, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    sub_1BBA3CD68(&v40, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else {
    std::string v40 = v44;
  }
  sub_1BBA3CE04((std::string::size_type *)&v41, &v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)((char *)v39 + 3) = 0;
  v39[0] = 0;
  *(_DWORD *)((char *)v38 + 3) = 0;
  v38[0] = 0;
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::basic_string(&v37, &__str, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
    uint64_t v20 = (void *)v37.__r_.__value_.__l.__size_;
    uint64_t v19 = (void *)v37.__r_.__value_.__r.__words[0];
    v39[0] = v37.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v39 + 3) = *(_DWORD *)((char *)&v37.__r_.__value_.__r.__words[2] + 3);
    char v21 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
  }
  std::string::size_type v22 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v22 = v41.__r_.__value_.__l.__size_;
  }
  if (v22)
  {
    std::string::basic_string(&v37, &v41, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
    std::string::size_type v24 = v37.__r_.__value_.__l.__size_;
    uint64_t v23 = (void *)v37.__r_.__value_.__r.__words[0];
    v38[0] = v37.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v38 + 3) = *(_DWORD *)((char *)&v37.__r_.__value_.__r.__words[2] + 3);
    char v25 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    if ((v21 & 0x80) == 0)
    {
LABEL_20:
      v34[0] = v19;
      v34[1] = v20;
      *(_DWORD *)uint64_t v35 = v39[0];
      *(_DWORD *)&v35[3] = *(_DWORD *)((char *)v39 + 3);
      char v36 = v21;
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v23 = 0;
    std::string::size_type v24 = 0;
    char v25 = 0;
    if ((v21 & 0x80) == 0) {
      goto LABEL_20;
    }
  }
  sub_1BBA3CD68(v34, v19, (unint64_t)v20);
LABEL_23:
  if (v25 < 0)
  {
    sub_1BBA3CD68(&v33, v23, v24);
  }
  else
  {
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v33.__r_.__value_.__l.__size_ = v24;
    LODWORD(v33.__r_.__value_.__r.__words[2]) = v38[0];
    *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v38 + 3);
    *((unsigned char *)&v33.__r_.__value_.__s + 23) = v25;
  }
  sub_1BBA3D698(&v37, (uint64_t)v34, &v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v36 < 0) {
    operator delete(v34[0]);
  }
  std::operator+<char>();
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    sub_1BBA3CD68(&v29, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  }
  else {
    std::string v29 = v32;
  }
  sub_1BBA3F034((uint64_t)v30, &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v31 >= 0) {
    unint64_t v26 = (const char *)v30;
  }
  else {
    unint64_t v26 = (const char *)v30[0];
  }
  CFStringRef v27 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v26, 0);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v25 & 0x80) == 0) {
      goto LABEL_44;
    }
LABEL_55:
    operator delete(v23);
    if ((v21 & 0x80) == 0) {
      goto LABEL_45;
    }
    goto LABEL_56;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if (v25 < 0) {
    goto LABEL_55;
  }
LABEL_44:
  if ((v21 & 0x80) == 0) {
    goto LABEL_45;
  }
LABEL_56:
  operator delete(v19);
LABEL_45:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  return v27;
}

void sub_1BBAB12FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*(void **)(v1 + 120));
  }
  if (v5 < 0) {
    operator delete(v3);
  }
  if (v4 < 0) {
    operator delete(v2);
  }
  if (*(char *)(v1 + 207) < 0) {
    operator delete(*(void **)(v1 + 184));
  }
  if (*(char *)(v6 - 137) < 0) {
    operator delete(*(void **)(v6 - 160));
  }
  if (*(char *)(v6 - 113) < 0) {
    operator delete(*(void **)(v6 - 136));
  }
  if (*(char *)(v6 - 89) < 0) {
    operator delete(*(void **)(v6 - 112));
  }
  _Unwind_Resume(exception_object);
}

CFDataRef sub_1BBAB1440(const __CFString *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v7 = (char *)&__s - ((MEMORY[0x1F4188790](Length, v3, Length + 1, v4, v5, v6) + 16) & 0xFFFFFFFFFFFFFFF0);
  CFStringGetCString(a1, v7, v8, 0);
  sub_1BB9D08B8(&v15, v7);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    sub_1BBA3CD68(&__dst, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v15;
  }
  sub_1BBA3CE04((std::string::size_type *)&v14, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v9 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    sub_1BBA3CD68(&__s, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = v14;
  }
  CFDataRef v10 = sub_1BBAB09E8(&__s);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
LABEL_11:
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1BBAB1590(_Unwind_Exception *a1)
{
  operator delete(*(void **)(v1 - 72));
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(a1);
}

CFStringRef sub_1BBAB15F4(const __CFData *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFDataGetLength(a1);
  MEMORY[0x1F4188790](Length, v3, v4, (8 * Length) | 6, v5, v6);
  CFIndex v8 = (char *)&__dst - ((v7 + 21) & 0xFFFFFFFFFFFFFFF0);
  sub_1BBAB0D58(a1, "FLBN;", v8, v9);
  sub_1BB9D08B8(&v16, v8);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    sub_1BBA3CD68(&__dst, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v16;
  }
  sub_1BBA3F034((uint64_t)v14, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v15 >= 0) {
    CFDataRef v10 = (const char *)v14;
  }
  else {
    CFDataRef v10 = (const char *)v14[0];
  }
  CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10, 0);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_1BBAB1734(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

char *sub_1BBAB1784(char *result)
{
  if (result)
  {
    if (result[32] && *((_DWORD *)result + 10) == 1)
    {
      uint64_t result = (char *)operator new(0x128uLL, MEMORY[0x1E4FBA2D0]);
      if (result)
      {
        *((void *)result + 36) = 0;
        *((_OWORD *)result + 16) = 0u;
        *((_OWORD *)result + 17) = 0u;
        *((_OWORD *)result + 14) = 0u;
        *((_OWORD *)result + 15) = 0u;
        *((_OWORD *)result + 12) = 0u;
        *((_OWORD *)result + 13) = 0u;
        *((_OWORD *)result + 10) = 0u;
        *((_OWORD *)result + 11) = 0u;
        *((_OWORD *)result + 8) = 0u;
        *((_OWORD *)result + 9) = 0u;
        *((_OWORD *)result + 6) = 0u;
        *((_OWORD *)result + 7) = 0u;
        *((_OWORD *)result + 4) = 0u;
        *((_OWORD *)result + 5) = 0u;
        *((_OWORD *)result + 2) = 0u;
        *((_OWORD *)result + 3) = 0u;
        *(_OWORD *)uint64_t result = 0u;
        *((_OWORD *)result + 1) = 0u;
        *(void *)uint64_t result = &unk_1F14EE310;
        *((void *)result + 25) = 0;
        *((void *)result + 26) = 0;
        *((void *)result + 24) = 0;
      }
    }
    else
    {
      uint64_t result = (char *)operator new(0x110uLL, MEMORY[0x1E4FBA2D0]);
      if (result)
      {
        *(void *)uint64_t result = &unk_1F14EE1F8;
        *((void *)result + 1) = 0;
        *((_WORD *)result + 8) = 0;
        *((void *)result + 11) = 0;
        result[96] = 0;
        *(_DWORD *)(result + 98) = 0;
        *(void *)(result + 28) = 0;
        *(void *)(result + 20) = 0;
        *(void *)(result + 52) = 0;
        *(void *)(result + 68) = 0;
        *(void *)(result + 60) = 0;
        *((_DWORD *)result + 19) = 0;
        *(void *)(result + 187) = -1;
        *(void *)(result + 194) = -1;
        result[80] = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1BBAB1884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  size_t v4 = a3 - a2 - 1;
  if (a3 - a2 < 1) {
    return 0;
  }
  char v7 = *(unsigned char *)(a2 + a1 - 1);
  if (*(unsigned __int8 *)(a2 + a1 - 3) | *(unsigned __int8 *)(a2 + a1 - 2))
  {
    char v9 = 0;
    uint64_t v8 = a2;
  }
  else
  {
    *(unsigned char *)(a1 + a2) = 0;
    uint64_t v8 = a2 + 1;
    char v9 = 3;
  }
  *(unsigned char *)(a1 + a2 - 1) = v9;
  memset((void *)(a1 + v8), 128, v4);
  *(unsigned char *)(a1 + v8 + v4) = v7 | 0x80;
  return v3 - a2 + v8;
}

uint64_t sub_1BBAB1928(_DWORD *a1, int a2, int a3, int a4)
{
  int v4 = a1[9];
  if (v4 <= a2 && a1[11] <= a3 && a4 - 1 + a2 <= a1[10] && a4 - 1 + a3 <= a1[12]) {
    return 2;
  }
  BOOL v5 = a4 + a2 <= v4 || a1[10] < a2;
  BOOL v6 = a4 + a3 <= a1[11] || a1[12] < a3;
  return !v5 && !v6;
}

uint64_t sub_1BBAB19BC(uint64_t a1, uint64_t a2, int a3, OpaqueCMBlockBuffer *a4, void *a5, size_t *a6, void *a7, int a8)
{
  char *returnedPointerOut[10];

  returnedPointerOut[8] = *(char **)MEMORY[0x1E4F143B8];
  size_t offsetIntoDestination = 0;
  uint64_t v45 = 0;
  size_t v43 = 0;
  temporaryBlocuint64_t k = 0;
  uint64_t result = sub_1BBAB1D3C(a4, 4u, a3, &offsetIntoDestination, &v43, &v45);
  if (!result)
  {
    returnedPointerOut[0] = 0;
    uint64_t result = CMBlockBufferAccessDataBytes(a4, v43 - 1, 1uLL, &temporaryBlock, returnedPointerOut);
    if (!result)
    {
      temporaryBlocuint64_t k = *returnedPointerOut[0];
      int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
      size_t v17 = v43;
      size_t v18 = offsetIntoDestination;
      sourceBytes = 0;
      uint64_t result = CMBlockBufferAccessDataBytes(a4, v43 - 1, 1uLL, &v47, &sourceBytes);
      if (!result)
      {
        unint64_t v19 = v17 - v18 - 5;
        unint64_t v40 = v19;
        if (*sourceBytes < 0)
        {
          size_t v35 = v18;
          std::string v37 = a6;
          int v39 = v16;
          uint64_t v29 = 5;
          if (v19 <= 5) {
            uint64_t v30 = 5;
          }
          else {
            uint64_t v30 = v19;
          }
          uint64_t v34 = v30 - 4;
          for (size_t i = v17 - 2; ; --i)
          {
            uint64_t result = CMBlockBufferAccessDataBytes(a4, i, 1uLL, &v47, &sourceBytes);
            if (result) {
              break;
            }
            if (v30 == v29)
            {
              size_t v18 = v35;
              a6 = v37;
              int v16 = v39;
              uint64_t v20 = v34;
              goto LABEL_6;
            }
            if ((*sourceBytes & 0x80000000) == 0)
            {
              uint64_t v20 = v29 - 4;
              size_t v18 = v35;
              a6 = v37;
              int v16 = v39;
              goto LABEL_6;
            }
            ++v29;
          }
        }
        else
        {
          uint64_t v20 = 0;
LABEL_6:
          uint64_t v21 = v20 + v16;
          if (v40 <= v21 + 4)
          {
            return 0xFFFFFFFFLL;
          }
          else
          {
            unsigned int v38 = v16;
            BOOL v22 = v16 < 1;
            uint64_t v23 = v16 - 1;
            uint64_t v36 = v21;
            if (v22 || (size_t v24 = v17 - v20, v25 = v17 - v20 - 4, v26 = v18 + 4, v25 < v18 + 4))
            {
              uint64_t v41 = 0;
LABEL_29:
              if (v23 == -1)
              {
                std::string v32 = a6;
                uint64_t v33 = v36 + v41 + 1;
                if (!a8
                  || (LODWORD(sourceBytes) = bswap32(v45 - v33),
                      uint64_t result = CMBlockBufferReplaceDataBytes(&sourceBytes, a4, offsetIntoDestination, 4uLL),
                      !result))
                {
                  *a5 += v33;
                  *((unsigned char *)returnedPointerOut + v38) = temporaryBlock & 0x7F;
                  sourceBytes = 0;
                  uint64_t result = (*(uint64_t (**)(uint64_t, char **, void, uint64_t, char **))(*(void *)a1 + 136))(a1, returnedPointerOut, v38 + 1, a2, &sourceBytes);
                  if (!result)
                  {
                    if (sourceBytes == (char *)(v38 + 1))
                    {
                      if (a7) {
                        *a7 = v43;
                      }
                      uint64_t result = 0;
                      if (v32) {
                        *std::string v32 = offsetIntoDestination;
                      }
                    }
                    else
                    {
                      return 4294954385;
                    }
                  }
                }
              }
              else
              {
                return 4294954387;
              }
            }
            else
            {
              uint64_t v41 = 0;
              size_t v27 = v24 - 5;
              while (1)
              {
                int v46 = 0;
                uint64_t result = CMBlockBufferAccessDataBytes(a4, v27 + 1, 4uLL, &v46, &sourceBytes);
                if (result) {
                  break;
                }
                if (*sourceBytes || sourceBytes[1] || sourceBytes[2] != 3) {
                  *((unsigned char *)returnedPointerOut + v23--) = sourceBytes[2];
                }
                else {
                  ++v41;
                }
                if ((v23 & 0x8000000000000000) == 0 && v27-- >= v26) {
                  continue;
                }
                goto LABEL_29;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BBAB1D3C(OpaqueCMBlockBuffer *a1, unsigned int a2, int a3, size_t *a4, size_t *a5, void *a6)
{
  char *returnedPointerOut;
  uint64_t temporaryBlock;

  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  returnedPointerOut = 0;
  temporaryBlocuint64_t k = 0;
  BOOL v13 = (DataLength & 0xFFFFFFFF80000000) != 0 || DataLength < a2;
  if (v13) {
    int v14 = -12909;
  }
  else {
    int v14 = 0;
  }
  if (v13)
  {
    uint64_t v15 = 0;
    size_t v16 = 0;
    size_t v17 = 0;
    uint64_t result = 4294954387;
LABEL_12:
    unint64_t v19 = a4;
    if (a4) {
LABEL_13:
    }
      *unint64_t v19 = v16;
LABEL_14:
    if (a6) {
      *a6 = v15;
    }
    if (a5) {
      *a5 = v17;
    }
  }
  else
  {
    unint64_t v20 = DataLength;
    unsigned int v24 = v14;
    unint64_t v25 = a6;
    size_t v21 = 0;
    uint64_t v15 = 0;
    size_t v16 = 0;
    size_t v17 = 0;
    while (1)
    {
      uint64_t result = CMBlockBufferAccessDataBytes(a1, v21, a2, &temporaryBlock, &returnedPointerOut);
      if (result) {
        break;
      }
      switch(a2)
      {
        case 4u:
          uint64_t v22 = bswap32(*(_DWORD *)returnedPointerOut);
          break;
        case 2u:
          uint64_t v22 = bswap32(*(unsigned __int16 *)returnedPointerOut) >> 16;
          break;
        case 1u:
          uint64_t v22 = *returnedPointerOut;
          break;
        default:
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "value of nalu_length_size should be 1, 2 or 4", buf, 2u);
          }
          uint64_t v15 = 0;
          size_t v16 = 0;
          size_t v17 = 0;
          uint64_t result = 4294954385;
          a6 = v25;
          goto LABEL_12;
      }
      temporaryBlocuint64_t k = v22;
      buf[0] = 0;
      uint64_t result = CMBlockBufferAccessDataBytes(a1, v21 + a2, 1uLL, buf, &returnedPointerOut);
      if (result) {
        return result;
      }
      BOOL v23 = (*returnedPointerOut & 0x1Fu) - 1 < 5;
      if (!a3) {
        BOOL v23 = (*returnedPointerOut & 0x40) == 0;
      }
      if (v23)
      {
        uint64_t v15 = temporaryBlock;
        size_t v16 = v21;
        size_t v17 = temporaryBlock + v21 + a2;
      }
      if (temporaryBlock + v21 + 8 >= v20)
      {
        a6 = v25;
        unint64_t v19 = a4;
        uint64_t result = v24;
        if (a4) {
          goto LABEL_13;
        }
        goto LABEL_14;
      }
      v21 += a2 + temporaryBlock;
    }
  }
  return result;
}

uint64_t sub_1BBAB1F58(uint64_t a1, int a2, int a3, unsigned int a4, int a5)
{
  if (a3 == 8)
  {
    *(void *)(a1 + 312) = sub_1BBAB474C;
    *(void *)(a1 + 320) = sub_1BBAB4594;
    *(void *)(a1 + 328) = sub_1BBAB41C0;
    int v10 = 8;
    CFStringRef v11 = sub_1BBAB3DD8;
    uint64_t v12 = sub_1BBAB3E64;
    BOOL v13 = sub_1BBAB4054;
    int v14 = sub_1BBAB3FA4;
    uint64_t v15 = sub_1BBAB4120;
    size_t v16 = sub_1BBAB4174;
  }
  else
  {
    if (a3 > 16) {
      return 4294954386;
    }
    *(void *)(a1 + 24) = sub_1BBAB3D70;
    *(void *)(a1 + 32) = sub_1BBAB3D70;
    *(void *)(a1 + 40) = sub_1BBAB3D70;
    *(void *)(a1 + 48) = sub_1BBAB3D70;
    *(void *)(a1 + 56) = sub_1BBAB3D70;
    *(void *)(a1 + 64) = sub_1BBAB3D04;
    *(void *)(a1 + 72) = sub_1BBAB3D04;
    *(void *)(a1 + 80) = sub_1BBAB3D04;
    *(void *)(a1 + 88) = sub_1BBAB3D04;
    *(void *)(a1 + 96) = sub_1BBAB3D04;
    *(void *)(a1 + 104) = sub_1BBAB2C74;
    *(void *)(a1 + 112) = sub_1BBAB2B18;
    *(void *)(a1 + 120) = sub_1BBAB2A34;
    *(void *)(a1 + 128) = sub_1BBAB2950;
    *(void *)(a1 + 144) = sub_1BBAB2C74;
    *(void *)(a1 + 152) = sub_1BBAB2B18;
    *(void *)(a1 + 184) = sub_1BBAB3C98;
    *(void *)(a1 + 192) = sub_1BBAB3C98;
    *(void *)(a1 + 200) = sub_1BBAB3C98;
    *(void *)(a1 + 208) = sub_1BBAB3C98;
    *(void *)(a1 + 216) = sub_1BBAB3C28;
    *(void *)(a1 + 224) = sub_1BBAB3C28;
    *(void *)(a1 + 232) = sub_1BBAB3C28;
    *(void *)(a1 + 240) = sub_1BBAB3C28;
    *(void *)(a1 + 248) = sub_1BBAB3A50;
    *(void *)(a1 + 256) = sub_1BBAB3878;
    *(void *)(a1 + 264) = sub_1BBAB3720;
    *(void *)(a1 + 280) = sub_1BBAB3A50;
    *(void *)(a1 + 288) = sub_1BBAB3878;
    *(void *)(a1 + 312) = sub_1BBAB3650;
    *(void *)(a1 + 320) = sub_1BBAB3504;
    *(void *)(a1 + 328) = sub_1BBAB2780;
    CFStringRef v11 = sub_1BBAB22B8;
    uint64_t v12 = sub_1BBAB234C;
    BOOL v13 = sub_1BBAB250C;
    int v14 = sub_1BBAB2638;
    uint64_t v15 = sub_1BBAB26E4;
    size_t v16 = sub_1BBAB273C;
    int v10 = a3;
  }
  *(void *)(a1 + 336) = v16;
  *(void *)(a1 + 344) = v15;
  *(void *)(a1 + 352) = v14;
  *(void *)(a1 + 360) = v13;
  *(void *)(a1 + 368) = v12;
  *(void *)(a1 + 376) = v11;
  sub_1BBAD6CF4((void *)a1, v10);
  if (a2 <= 7)
  {
    uint64_t v17 = *(void *)(a1 + 104);
    *(void *)(a1 + 112) = v17;
LABEL_9:
    *(void *)(a1 + 120) = v17;
    uint64_t v18 = *(void *)(a1 + 248);
    *(void *)(a1 + 256) = v18;
    goto LABEL_10;
  }
  if (a2 <= 0xF)
  {
    uint64_t v17 = *(void *)(a1 + 112);
    goto LABEL_9;
  }
  if (a2 >= 0x20)
  {
    uint64_t v17 = *(void *)(a1 + 128);
    uint64_t v18 = *(void *)(a1 + 264);
    goto LABEL_11;
  }
  uint64_t v17 = *(void *)(a1 + 120);
  uint64_t v18 = *(void *)(a1 + 256);
LABEL_10:
  *(void *)(a1 + 128) = v17;
  *(void *)(a1 + 264) = v18;
LABEL_11:
  *(void *)(a1 + 136) = v17;
  *(void *)(a1 + 272) = v18;
  uint64_t v19 = *(void *)(a1 + 152);
  *(void *)(a1 + 160) = v19;
  *(void *)(a1 + 168) = v19;
  *(void *)(a1 + 176) = v19;
  uint64_t v20 = *(void *)(a1 + 288);
  *(void *)(a1 + 296) = v20;
  *(void *)(a1 + 304) = v20;
  if (a4) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = a5 < 3;
  }
  char v22 = v21;
  *(unsigned char *)(a1 + 20) = v22;
  char v23 = a5 - (a5 > 0);
  if (v23 == 3 && a3 == 10) {
    char v23 = 4;
  }
  *(unsigned char *)(a1 + 22) = v23;
  *(unsigned char *)(a1 + 21) = v23;
  if (a4 <= 0x2B && ((1 << a4) & 0x88000000002) != 0 && v23 == 2) {
    *(_WORD *)(a1 + 21) = 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 23) = a3 == 10;
  return result;
}

uint64_t sub_1BBAB22B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, void *a8)
{
  if (a6 < 1)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      if (a5 >= 1)
      {
        uint64_t v11 = 0;
        do
        {
          int v12 = *(unsigned __int16 *)(result + v11 + 2) - *(unsigned __int16 *)(a3 + v11 + 2);
          v10 += (*(unsigned __int16 *)(result + v11) - *(unsigned __int16 *)(a3 + v11))
               * (*(unsigned __int16 *)(result + v11) - *(unsigned __int16 *)(a3 + v11));
          v9 += (v12 * v12);
          v11 += 4;
        }
        while (4 * a5 != v11);
      }
      ++v8;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v8 != a6);
  }
  *a7 = v10;
  *a8 = v9;
  return result;
}

uint64_t sub_1BBAB234C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  uint64_t v42 = result;
  uint64_t v5 = 0;
  LODWORD(result) = 0;
  unint64_t v40 = *a5;
  BOOL v6 = *a5 + 1;
  char v7 = 1;
  do
  {
    uint64_t v8 = 0;
    char v44 = v7;
    uint64_t v9 = v42 + 2 * v5 * a2;
    uint64_t v10 = a3 + 2 * v5 * a4;
    char v11 = 1;
    int v12 = v6;
    do
    {
      uint64_t v13 = 0;
      unsigned int v14 = 0;
      char v15 = v11;
      BOOL v6 = v12 + 1;
      char v16 = 1;
      uint64_t v17 = v9 + 2 * v8;
      uint64_t v18 = v10 + 2 * v8;
      do
      {
        uint64_t v19 = 0;
        char v20 = v16;
        uint64_t v21 = v17 + 2 * v13 * a2;
        uint64_t v22 = v18 + 2 * v13 * a4;
        char v23 = 1;
        unsigned int v24 = v6;
        do
        {
          uint64_t v25 = 0;
          unsigned int v26 = 0;
          char v27 = v23;
          BOOL v6 = v24 + 1;
          char v28 = 1;
          uint64_t v29 = v21 + 2 * v19;
          uint64_t v30 = v22 + 2 * v19;
          do
          {
            uint64_t v31 = 0;
            char v32 = v28;
            uint64_t v33 = v29 + 2 * v25 * a2;
            uint64_t v34 = v30 + 2 * v25 * a4;
            LOBYTE(v25) = 1;
            do
            {
              unsigned int v35 = 0;
              char v36 = v25;
              LODWORD(v25) = 8;
              std::string v37 = (uint16x8_t *)(v33 + 2 * v31);
              unsigned int v38 = (uint16x8_t *)(v34 + 2 * v31);
              do
              {
                uint16x8_t v39 = vabdq_u16(*v37, *v38);
                unsigned int v35 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v35, *(uint16x4_t *)v39.i8), v39));
                unsigned int v38 = (uint16x8_t *)((char *)v38 + 2 * a4);
                std::string v37 = (uint16x8_t *)((char *)v37 + 2 * a2);
                LODWORD(v25) = v25 - 1;
              }
              while (v25);
              *v6++ = v35;
              v26 += v35;
              uint64_t v31 = 8;
            }
            while ((v36 & 1) != 0);
            char v28 = 0;
            uint64_t v25 = 8;
          }
          while ((v32 & 1) != 0);
          char v23 = 0;
          *unsigned int v24 = v26;
          v14 += v26;
          uint64_t v19 = 16;
          unsigned int v24 = v6;
        }
        while ((v27 & 1) != 0);
        char v16 = 0;
        uint64_t v13 = 16;
      }
      while ((v20 & 1) != 0);
      char v11 = 0;
      *int v12 = v14;
      uint64_t result = v14 + result;
      int v12 = v6;
      uint64_t v8 = 32;
    }
    while ((v15 & 1) != 0);
    char v7 = 0;
    uint64_t v5 = 32;
  }
  while ((v44 & 1) != 0);
  *a5 = v6;
  *unint64_t v40 = result;
  return result;
}

uint64_t sub_1BBAB250C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  LODWORD(result) = 0;
  char v7 = *a5;
  uint64_t v8 = *a5 + 1;
  char v9 = 1;
  do
  {
    uint64_t v10 = 0;
    char v11 = v9;
    uint64_t v12 = v5 + 2 * v6 * a2;
    uint64_t v13 = a3 + 2 * v6 * a4;
    char v14 = 1;
    char v15 = v8;
    do
    {
      uint64_t v16 = 0;
      unsigned int v17 = 0;
      char v18 = v14;
      uint64_t v8 = v15 + 1;
      char v19 = 1;
      uint64_t v20 = v12 + 2 * v10;
      uint64_t v21 = v13 + 2 * v10;
      do
      {
        uint64_t v22 = 0;
        char v23 = v19;
        uint64_t v24 = v20 + 2 * v16 * a2;
        uint64_t v25 = v21 + 2 * v16 * a4;
        LOBYTE(v26) = 1;
        do
        {
          unsigned int v27 = 0;
          char v28 = v26;
          int v26 = 8;
          uint64_t v29 = (uint16x8_t *)(v24 + 2 * v22);
          uint64_t v30 = (uint16x8_t *)(v25 + 2 * v22);
          do
          {
            uint16x8_t v31 = vabdq_u16(*v29, *v30);
            unsigned int v27 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v27, *(uint16x4_t *)v31.i8), v31));
            uint64_t v30 = (uint16x8_t *)((char *)v30 + 2 * a4);
            uint64_t v29 = (uint16x8_t *)((char *)v29 + 2 * a2);
            --v26;
          }
          while (v26);
          *v8++ = v27;
          v17 += v27;
          uint64_t v22 = 8;
        }
        while ((v28 & 1) != 0);
        char v19 = 0;
        uint64_t v16 = 8;
      }
      while ((v23 & 1) != 0);
      char v14 = 0;
      *char v15 = v17;
      uint64_t result = v17 + result;
      uint64_t v10 = 16;
      char v15 = v8;
    }
    while ((v18 & 1) != 0);
    char v9 = 0;
    uint64_t v6 = 16;
  }
  while ((v11 & 1) != 0);
  *a5 = v8;
  *char v7 = result;
  return result;
}

uint64_t sub_1BBAB2638(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  LODWORD(result) = 0;
  char v7 = *a5;
  uint64_t v8 = *a5 + 1;
  char v9 = 1;
  do
  {
    uint64_t v10 = 0;
    char v11 = v9;
    uint64_t v12 = v5 + 2 * v6 * a2;
    uint64_t v13 = a3 + 2 * v6 * a4;
    LOBYTE(v14) = 1;
    do
    {
      unsigned int v15 = 0;
      char v16 = v14;
      int v14 = 8;
      unsigned int v17 = (uint16x8_t *)(v12 + 2 * v10);
      char v18 = (uint16x8_t *)(v13 + 2 * v10);
      do
      {
        uint16x8_t v19 = vabdq_u16(*v17, *v18);
        unsigned int v15 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v19.i8), v19));
        char v18 = (uint16x8_t *)((char *)v18 + 2 * a4);
        unsigned int v17 = (uint16x8_t *)((char *)v17 + 2 * a2);
        --v14;
      }
      while (v14);
      *v8++ = v15;
      uint64_t result = v15 + result;
      uint64_t v10 = 8;
    }
    while ((v16 & 1) != 0);
    char v9 = 0;
    uint64_t v6 = 8;
  }
  while ((v11 & 1) != 0);
  *a5 = v8;
  *char v7 = result;
  return result;
}

float sub_1BBAB26E4(uint16x8_t *a1, uint64_t a2, uint16x8_t *a3, uint64_t a4, float **a5)
{
  float v5 = 0.0;
  int v6 = 8;
  do
  {
    uint16x8_t v7 = vabdq_u16(*a1, *a3);
    float result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)LODWORD(v5), *(uint16x4_t *)v7.i8), v7)));
    float v5 = result;
    a3 = (uint16x8_t *)((char *)a3 + 2 * a4);
    a1 = (uint16x8_t *)((char *)a1 + 2 * a2);
    --v6;
  }
  while (v6);
  char v9 = *a5;
  *char v9 = result;
  *a5 = v9 + 1;
  return result;
}

float sub_1BBAB273C(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4)
{
  float v4 = 0.0;
  int v5 = 4;
  do
  {
    float result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vabal_u16((uint32x4_t)LODWORD(v4), *a1, *a3)));
    float v4 = result;
    a3 = (uint16x4_t *)((char *)a3 + 2 * a4);
    a1 = (uint16x4_t *)((char *)a1 + 2 * a2);
    --v5;
  }
  while (v5);
  return result;
}

uint64_t sub_1BBAB2780(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4, _DWORD *a5)
{
  *a5 = sub_1BBAB2950();
  uint64_t v10 = a5 + 1;
  char v11 = 1;
  do
  {
    char v12 = v11;
    char v13 = 1;
    do
    {
      char v14 = v13;
      int v15 = sub_1BBAB2A34();
      char v13 = 0;
      *v10++ = v15;
    }
    while ((v14 & 1) != 0);
    char v11 = 0;
  }
  while ((v12 & 1) != 0);
  unint64_t v16 = 0;
  unsigned int v17 = (uint16x8_t *)a1;
  uint64_t v30 = a3;
  char v18 = (uint16x8_t *)a3;
  do
  {
    unint64_t v19 = -8;
    uint64_t v20 = v17;
    uint64_t v21 = v18;
    do
    {
      *v10++ = sub_1BBAB2B18(8, 8, v20, a2, v21, a4);
      v19 += 8;
      ++v21;
      ++v20;
    }
    while (v19 < 0x18);
    v18 += a4;
    v17 += a2;
    BOOL v22 = v16 >= 0x18;
    v16 += 8;
  }
  while (!v22);
  unint64_t v23 = 0;
  uint64_t v24 = v30;
  do
  {
    unint64_t v25 = 0;
    int v26 = a1;
    unsigned int v27 = v24;
    do
    {
      uint64_t result = sub_1BBAB2C74(4, 4, v26, a2, v24, a4);
      v10[v25] = result;
      unint64_t v29 = v25 * 4 + 4;
      ++v24;
      ++v26;
      BOOL v22 = v25++ >= 7;
    }
    while (!v22);
    uint64_t v10 = (_DWORD *)((char *)v10 + v29);
    uint64_t v24 = &v27[a4];
    a1 += a2;
    BOOL v22 = v23 >= 0x1C;
    v23 += 4;
  }
  while (!v22);
  return result;
}

uint64_t sub_1BBAB2950()
{
  int v0 = MEMORY[0x1F4188790]();
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    uint64_t v6 = 0;
    uint16x8_t v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (uint64_t i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + 2 * i) - *(unsigned __int16 *)(v4 + 2 * i);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1BBAB316C(v0, v1, v11, 0x20u, v10, 1);
}

uint64_t sub_1BBAB2A34()
{
  int v0 = MEMORY[0x1F4188790]();
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    uint64_t v6 = 0;
    uint16x8_t v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (uint64_t i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + 2 * i) - *(unsigned __int16 *)(v4 + 2 * i);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1BBAB316C(v0, v1, v11, 0x10u, v10, 1);
}

uint64_t sub_1BBAB2B18(int a1, int a2, uint16x8_t *a3, uint64_t a4, uint16x8_t *a5, uint64_t a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2 < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 2 * a4;
  uint64_t v21 = a6;
  uint64_t v22 = 16 * a4;
  uint64_t v12 = 2 * a6;
  do
  {
    uint64_t v24 = a5;
    if (a1 >= 1)
    {
      uint64_t v13 = 0;
      char v14 = a3;
      do
      {
        uint64_t v15 = 0;
        unint64_t v16 = a5;
        unsigned int v17 = v14;
        do
        {
          uint32x4_t v18 = vsubl_high_u16(*v17, *v16);
          unint64_t v19 = (uint32x4_t *)&v25[v15];
          *unint64_t v19 = vsubl_u16(*(uint16x4_t *)v17->i8, *(uint16x4_t *)v16->i8);
          v19[1] = v18;
          v15 += 32;
          unsigned int v17 = (uint16x8_t *)((char *)v17 + v11);
          unint64_t v16 = (uint16x8_t *)((char *)v16 + v12);
        }
        while (v15 != 256);
        sub_1BBAB2F58((uint64_t)v25, (uint64_t)v26);
        sub_1BBAB2F58((uint64_t)v26, (uint64_t)v25);
        uint64_t v10 = sub_1BBAB3038((uint64_t)v25) + v10;
        v13 += 8;
        ++v14;
        ++a5;
      }
      while ((int)v13 < a1);
    }
    v9 += 8;
    a3 = (uint16x8_t *)((char *)a3 + v22);
    a5 = &v24[v21];
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1BBAB2C74(int a1, int a2, uint16x4_t *a3, uint64_t a4, uint16x4_t *a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2 < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 2 * a4;
  uint64_t v19 = a6;
  uint64_t v20 = 8 * a4;
  uint64_t v12 = 2 * a6;
  do
  {
    uint64_t v22 = a5;
    if (a1 >= 1)
    {
      uint64_t v13 = 0;
      char v14 = a3;
      do
      {
        uint64_t v15 = 0;
        unint64_t v16 = a5;
        unsigned int v17 = v14;
        do
        {
          *(uint32x4_t *)&v23[v15] = vsubl_u16(*v17, *v16);
          v15 += 16;
          unsigned int v17 = (uint16x4_t *)((char *)v17 + v11);
          unint64_t v16 = (uint16x4_t *)((char *)v16 + v12);
        }
        while (v15 != 64);
        sub_1BBAB2DC8((uint64_t)v23, (uint64_t)v24);
        sub_1BBAB2DC8((uint64_t)v24, (uint64_t)v23);
        uint64_t v10 = sub_1BBAB2E38((uint64_t)v23) + v10;
        v13 += 4;
        ++v14;
        ++a5;
      }
      while ((int)v13 < a1);
    }
    v9 += 4;
    a3 = (uint16x4_t *)((char *)a3 + v20);
    a5 = &v22[v19];
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1BBAB2DC8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (_DWORD *)(a2 + 32);
  uint64_t v4 = result + 12;
  do
  {
    int v5 = *(_DWORD *)(result + v2);
    *(v3 - 8) = v5;
    int v6 = *(_DWORD *)(v4 + v2 - 8);
    *(v3 - 4) = v6;
    int v7 = *(_DWORD *)(v4 + v2 - 4);
    _DWORD *v3 = v7;
    int v8 = *(_DWORD *)(v4 + v2);
    int v9 = v6 + v5;
    int v10 = v5 - v6;
    int v11 = v8 + v7;
    int v12 = v7 - v8;
    *(v3 - 8) = v11 + v9;
    _DWORD *v3 = v9 - v11;
    *(v3 - 4) = v12 + v10;
    v3[4] = v10 - v12;
    v2 += 16;
    ++v3;
  }
  while (v2 != 64);
  return result;
}

uint64_t sub_1BBAB2E38(uint64_t a1)
{
  int v1 = &unk_1E9F81000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F81FE0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v10 = a1;
    int v6 = __cxa_guard_acquire(&qword_1E9F81FE0);
    int v1 = &unk_1E9F81000;
    int v7 = v6;
    a1 = v10;
    if (v7)
    {
      dword_1E9F81FD8 = 1;
      __cxa_guard_release(&qword_1E9F81FE0);
      int v1 = (_DWORD *)&unk_1E9F81000;
      a1 = v10;
    }
  }
  uint64_t v2 = &unk_1E9F81000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F81FF0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = a1;
    int v8 = __cxa_guard_acquire(&qword_1E9F81FF0);
    uint64_t v2 = &unk_1E9F81000;
    int v1 = &unk_1E9F81000;
    int v9 = v8;
    a1 = v11;
    if (v9)
    {
      dword_1E9F81FE8 = 1 << (dword_1E9F81FD8 - 1);
      __cxa_guard_release(&qword_1E9F81FF0);
      uint64_t v2 = (_DWORD *)&unk_1E9F81000;
      int v1 = (_DWORD *)&unk_1E9F81000;
      a1 = v11;
    }
  }
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  do
  {
    unsigned int v4 = vaddvq_s32(vaddq_s32(vabsq_s32(*(int32x4_t *)(a1 + v3)), (int32x4_t)v4));
    v3 += 16;
  }
  while (v3 != 64);
  return ((int)(v2[1018] + v4) >> v1[1014]);
}

uint64_t sub_1BBAB2F58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (_DWORD *)(a2 + 128);
  uint64_t v4 = a1 + 28;
  do
  {
    int v5 = *(_DWORD *)(v4 + v2 - 28);
    *(v3 - 32) = v5;
    int v6 = *(_DWORD *)(v4 + v2 - 24);
    *(v3 - 24) = v6;
    int v7 = *(_DWORD *)(v4 + v2 - 20);
    *(v3 - 16) = v7;
    int v8 = *(_DWORD *)(v4 + v2 - 16);
    *(v3 - 8) = v8;
    int v9 = *(_DWORD *)(v4 + v2 - 12);
    _DWORD *v3 = v9;
    int v10 = *(_DWORD *)(v4 + v2 - 8);
    v3[8] = v10;
    int v11 = *(_DWORD *)(v4 + v2 - 4);
    v3[16] = v11;
    int v12 = v6 + v5;
    int v13 = v5 - v6;
    int v14 = v8 + v7;
    int v15 = v7 - v8;
    int v16 = v14 + v12;
    int v17 = v12 - v14;
    int v18 = v15 + v13;
    int v19 = *(_DWORD *)(v4 + v2);
    int v20 = v13 - v15;
    int v21 = v10 + v9;
    int v22 = v9 - v10;
    int v23 = v19 + v11;
    int v24 = v11 - v19;
    uint64_t result = (v23 + v21);
    int v26 = v21 - v23;
    int v27 = v24 + v22;
    int v28 = v22 - v24;
    *(v3 - 32) = result + v16;
    _DWORD *v3 = v16 - result;
    *(v3 - 24) = v27 + v18;
    v3[8] = v18 - v27;
    *(v3 - 16) = v26 + v17;
    v3[16] = v17 - v26;
    *(v3 - 8) = v28 + v20;
    v3[24] = v20 - v28;
    v2 += 32;
    ++v3;
  }
  while (v2 != 256);
  return result;
}

uint64_t sub_1BBAB3038(uint64_t a1)
{
  int v1 = &unk_1E9F81000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F81FC0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a1;
    int v8 = __cxa_guard_acquire(&qword_1E9F81FC0);
    int v1 = &unk_1E9F81000;
    int v9 = v8;
    a1 = v12;
    if (v9)
    {
      dword_1E9F81FB8 = 2;
      __cxa_guard_release(&qword_1E9F81FC0);
      int v1 = (_DWORD *)&unk_1E9F81000;
      a1 = v12;
    }
  }
  uint64_t v2 = &unk_1E9F81000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F81FD0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a1;
    int v10 = __cxa_guard_acquire(&qword_1E9F81FD0);
    uint64_t v2 = &unk_1E9F81000;
    int v1 = &unk_1E9F81000;
    int v11 = v10;
    a1 = v13;
    if (v11)
    {
      dword_1E9F81FC8 = 1 << (dword_1E9F81FB8 - 1);
      __cxa_guard_release(&qword_1E9F81FD0);
      uint64_t v2 = (_DWORD *)&unk_1E9F81000;
      int v1 = (_DWORD *)&unk_1E9F81000;
      a1 = v13;
    }
  }
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  do
  {
    uint64_t v5 = 0;
    int32x4_t v6 = (int32x4_t)v4;
    do
    {
      int32x4_t v6 = vaddq_s32(vabsq_s32(*(int32x4_t *)(a1 + v5)), v6);
      v5 += 16;
    }
    while (v5 != 32);
    unsigned int v4 = vaddvq_s32(v6);
    ++v3;
    a1 += 32;
  }
  while (v3 != 8);
  return ((int)(v2[1010] + v4) >> v1[1006]);
}

uint64_t sub_1BBAB316C(int a1, int a2, int *a3, unsigned int a4, void *a5, int a6)
{
  *a5 = 0;
  a5[1] = 0;
  uint64_t v74 = a1;
  uint64_t v66 = a2;
  unsigned int v6 = __clz(__rbit32(a4));
  char v61 = a6;
  char v57 = v6;
  int v58 = a2 >> v6;
  if (a4 == 32) {
    int v7 = a6;
  }
  else {
    int v7 = 1;
  }
  BOOL v8 = v7 == 0;
  if (v7) {
    char v9 = 0;
  }
  else {
    char v9 = -2;
  }
  if (v8) {
    int v10 = -3;
  }
  else {
    int v10 = -1;
  }
  unsigned int v55 = v10 + v6;
  int v56 = a1 >> v6;
  int v11 = 1;
  int v54 = 1 << (v6 + v9 - 2);
  uint64_t v12 = a4;
  int v13 = -1;
  do
  {
    int v64 = v13;
    BOOL v14 = (v61 & 1) == 0 && a4 == 32 && v11 == 8;
    int v65 = 2 * v11;
    if (a2 >= 1)
    {
      uint64_t v16 = 0;
      double v73 = &a3[65 * v11];
      uint64_t v68 = (uint64_t)v65 << 8;
      uint64_t v17 = 4 * v65;
      int v71 = a3;
      double v72 = &a3[v11];
      double v70 = &a3[64 * (uint64_t)v11];
      do
      {
        uint64_t v69 = v16;
        if (a1 >= 1)
        {
          uint64_t v18 = 0;
          int v19 = v70;
          int v20 = v71;
          int v21 = v72;
          int v22 = v73;
          do
          {
            if (v11 >= 1)
            {
              uint64_t v23 = 0;
              int v24 = v20;
              uint64_t v25 = v19;
              int v26 = v21;
              int v27 = v22;
              do
              {
                int v28 = v24;
                unint64_t v29 = v25;
                uint64_t v30 = v26;
                uint16x8_t v31 = v27;
                uint64_t v32 = v11;
                do
                {
                  int v33 = *v29 + *v28;
                  int v34 = *v28 - *v29;
                  int v35 = *v31 + *v30;
                  int v36 = *v30 - *v31;
                  if (v14)
                  {
                    int v37 = v34 + 1;
                    int v38 = v35 + 1;
                    int v39 = v36 + 1;
                    *int v28 = (v38 >> 1) + ((v33 + 1) >> 1);
                    int *v29 = (v39 >> 1) + (v37 >> 1);
                    *uint64_t v30 = ((v33 + 1) >> 1) - (v38 >> 1);
                    *uint16x8_t v31 = (v37 >> 1) - (v39 >> 1);
                    *v28 >>= 1;
                    *v29 >>= 1;
                    int v40 = *v30 >> 1;
                    int v41 = *v31 >> 1;
                  }
                  else
                  {
                    *int v28 = v35 + v33;
                    int *v29 = v36 + v34;
                    int v40 = v33 - v35;
                    int v41 = v34 - v36;
                  }
                  *v30++ = v40;
                  *v31++ = v41;
                  ++v29;
                  ++v28;
                  --v32;
                }
                while (v32);
                ++v23;
                v27 += 64;
                v26 += 64;
                v25 += 64;
                v24 += 64;
              }
              while (v23 != v11);
            }
            v18 += v65;
            int v22 = (int *)((char *)v22 + v17);
            int v21 = (int *)((char *)v21 + v17);
            int v19 = (int *)((char *)v19 + v17);
            int v20 = (int *)((char *)v20 + v17);
          }
          while (v18 < v74);
        }
        v16 += v65;
        double v73 = (int *)((char *)v73 + v68);
        double v72 = (int *)((char *)v72 + v68);
        double v70 = (int *)((char *)v70 + v68);
        int v71 = (int *)((char *)v71 + v68);
      }
      while (v69 + v65 < v66);
    }
    if ((v64 & 0x80000000) == 0)
    {
      if (v58 < 1)
      {
        int v43 = 0;
      }
      else
      {
        int v42 = 0;
        int v43 = 0;
        do
        {
          if (v56 >= 1)
          {
            for (int i = 0; i != v56; ++i)
            {
              uint64_t v45 = 0;
              unsigned int v46 = 0;
              uint64_t v47 = (uint64_t)&a3[64 * (uint64_t)(v42 << v57) + (i << v57)];
              do
              {
                uint64_t v48 = (int *)v47;
                uint64_t v49 = v12;
                do
                {
                  int v51 = *v48++;
                  int v50 = v51;
                  if (v51 < 0) {
                    int v50 = -v50;
                  }
                  v46 += v50;
                  --v49;
                }
                while (v49);
                ++v45;
                v47 += 256;
              }
              while (v45 != v12);
              unsigned int v52 = (v46 + v54) >> v55;
              if (!v55) {
                unsigned int v52 = v46;
              }
              v43 += v52;
            }
          }
          ++v42;
        }
        while (v42 != v58);
      }
      *((_DWORD *)a5 + v64) = v43;
    }
    int v13 = v64 + 1;
    v11 *= 2;
  }
  while (v65 < (int)a4);
  return *((unsigned int *)a5 + v64);
}

uint64_t sub_1BBAB3504(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4, _DWORD *a5)
{
  int v10 = sub_1BBAB2A34();
  uint64_t v11 = 0;
  *a5 = v10;
  uint64_t v12 = a5 + 1;
  char v13 = 1;
  do
  {
    uint64_t v14 = 0;
    char v15 = v13;
    uint64_t v16 = (char *)a1 + 2 * v11 * a2;
    uint64_t v17 = (char *)a3 + 2 * v11 * a4;
    char v18 = 1;
    do
    {
      char v19 = v18;
      int v20 = sub_1BBAB2B18(8, 8, (uint16x8_t *)&v16[2 * v14], a2, (uint16x8_t *)&v17[2 * v14], a4);
      char v18 = 0;
      *v12++ = v20;
      uint64_t v14 = 8;
    }
    while ((v19 & 1) != 0);
    char v13 = 0;
    uint64_t v11 = 8;
  }
  while ((v15 & 1) != 0);
  unint64_t v21 = 0;
  do
  {
    unint64_t v22 = 0;
    uint64_t v23 = a1;
    int v24 = a3;
    do
    {
      uint64_t result = sub_1BBAB2C74(4, 4, v23, a2, v24, a4);
      v12[v22] = result;
      unint64_t v26 = v22 * 4 + 4;
      ++v24;
      ++v23;
      BOOL v27 = v22++ >= 3;
    }
    while (!v27);
    uint64_t v12 = (_DWORD *)((char *)v12 + v26);
    a3 += a4;
    a1 += a2;
    BOOL v27 = v21 >= 0xC;
    v21 += 4;
  }
  while (!v27);
  return result;
}

uint64_t sub_1BBAB3650(uint16x8_t *a1, uint64_t a2, uint16x8_t *a3, uint64_t a4, _DWORD *a5)
{
  int v10 = sub_1BBAB2B18(8, 8, a1, a2, a3, a4);
  uint64_t v11 = 0;
  *a5 = v10;
  uint64_t v12 = a5 + 1;
  char v13 = 1;
  do
  {
    uint64_t v14 = 0;
    char v15 = v13;
    uint64_t v16 = &a1->i8[2 * v11 * a2];
    uint64_t v17 = &a3->i8[2 * v11 * a4];
    char v18 = 1;
    do
    {
      char v19 = v18;
      uint64_t result = sub_1BBAB2C74(4, 4, (uint16x4_t *)&v16[2 * v14], a2, (uint16x4_t *)&v17[2 * v14], a4);
      char v18 = 0;
      *v12++ = result;
      uint64_t v14 = 4;
    }
    while ((v19 & 1) != 0);
    char v13 = 0;
    uint64_t v11 = 4;
  }
  while ((v15 & 1) != 0);
  return result;
}

uint64_t sub_1BBAB3720()
{
  int v0 = sub_1BBAB3794();
  return sub_1BBAB3794() + v0;
}

uint64_t sub_1BBAB3794()
{
  int v0 = MEMORY[0x1F4188790]();
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (uint64_t i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + i * 4) - *(unsigned __int16 *)(v4 + i * 4);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1BBAB316C(v0, v1, v11, 0x10u, v10, 1);
}

uint64_t sub_1BBAB3878(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = sub_1BBAB38EC(a1, a2, a3, a4, a5, a6);
  return sub_1BBAB38EC(a1, a2, a3 + 2, a4, a5 + 2, a6) + v12;
}

uint64_t sub_1BBAB38EC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2 < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 2 * a6;
  uint64_t v22 = 16 * a4;
  uint64_t v23 = 16 * a6;
  uint64_t v12 = 2 * a4;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = a3;
      uint64_t v15 = a5;
      do
      {
        uint64_t v16 = 0;
        uint64_t v17 = v25;
        uint64_t v18 = v14;
        uint64_t v19 = v15;
        do
        {
          for (uint64_t i = 0; i != 32; i += 4)
            *(_DWORD *)&v17[i] = *(unsigned __int16 *)(v18 + i) - *(unsigned __int16 *)(v19 + i);
          ++v16;
          v17 += 32;
          v19 += v11;
          v18 += v12;
        }
        while (v16 != 8);
        sub_1BBAB2F58((uint64_t)v25, (uint64_t)v26);
        sub_1BBAB2F58((uint64_t)v26, (uint64_t)v25);
        uint64_t v10 = sub_1BBAB3038((uint64_t)v25) + v10;
        v13 += 8;
        v15 += 32;
        v14 += 32;
      }
      while ((int)v13 < a1);
    }
    v9 += 8;
    a5 += v23;
    a3 += v22;
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1BBAB3A50(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = sub_1BBAB3AC4(a1, a2, a3, a4, a5, a6);
  return sub_1BBAB3AC4(a1, a2, a3 + 2, a4, a5 + 2, a6) + v12;
}

uint64_t sub_1BBAB3AC4(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2 < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 2 * a6;
  uint64_t v22 = 8 * a4;
  uint64_t v23 = 8 * a6;
  uint64_t v12 = 2 * a4;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = a3;
      uint64_t v15 = a5;
      do
      {
        uint64_t v16 = 0;
        uint64_t v17 = v25;
        uint64_t v18 = v14;
        uint64_t v19 = v15;
        do
        {
          for (uint64_t i = 0; i != 16; i += 4)
            *(_DWORD *)&v17[i] = *(unsigned __int16 *)(v18 + i) - *(unsigned __int16 *)(v19 + i);
          ++v16;
          v17 += 16;
          v19 += v11;
          v18 += v12;
        }
        while (v16 != 4);
        sub_1BBAB2DC8((uint64_t)v25, (uint64_t)v26);
        sub_1BBAB2DC8((uint64_t)v26, (uint64_t)v25);
        uint64_t v10 = sub_1BBAB2E38((uint64_t)v25) + v10;
        v13 += 4;
        v15 += 16;
        v14 += 16;
      }
      while ((int)v13 < a1);
    }
    v9 += 4;
    a5 += v23;
    a3 += v22;
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1BBAB3C28(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 1) {
    return 0;
  }
  int v7 = 0;
  uint64_t result = 0;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        int v10 = *(unsigned __int16 *)(a3 + v9) - *(unsigned __int16 *)(a5 + v9);
        if (v10 < 0) {
          int v10 = *(unsigned __int16 *)(a5 + v9) - *(unsigned __int16 *)(a3 + v9);
        }
        uint64_t result = (v10 + result);
        v9 += 2;
      }
      while (2 * (2 * a1) != v9);
    }
    ++v7;
    a5 += 2 * a6;
    a3 += 2 * a4;
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_1BBAB3C98(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 1) {
    return 0;
  }
  int v7 = 0;
  uint64_t result = 0;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        int v10 = *(unsigned __int16 *)(a3 + v9) - *(unsigned __int16 *)(a5 + v9);
        uint64_t result = (result + v10 * v10);
        v9 += 2;
      }
      while (2 * (2 * a1) != v9);
    }
    ++v7;
    a5 += 2 * a6;
    a3 += 2 * a4;
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_1BBAB3D04(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 1) {
    return 0;
  }
  int v7 = 0;
  uint64_t result = 0;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        int v10 = *(unsigned __int16 *)(a3 + v9) - *(unsigned __int16 *)(a5 + v9);
        if (v10 < 0) {
          int v10 = *(unsigned __int16 *)(a5 + v9) - *(unsigned __int16 *)(a3 + v9);
        }
        uint64_t result = (v10 + result);
        v9 += 2;
      }
      while (2 * a1 != v9);
    }
    ++v7;
    a5 += 2 * a6;
    a3 += 2 * a4;
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_1BBAB3D70(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 1) {
    return 0;
  }
  int v7 = 0;
  uint64_t result = 0;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        int v10 = *(unsigned __int16 *)(a3 + v9) - *(unsigned __int16 *)(a5 + v9);
        uint64_t result = (result + v10 * v10);
        v9 += 2;
      }
      while (2 * a1 != v9);
    }
    ++v7;
    a5 += 2 * a6;
    a3 += 2 * a4;
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_1BBAB3DD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, void *a8)
{
  if (a6 < 1)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      if (a5 >= 1)
      {
        uint64_t v11 = 0;
        do
        {
          int v12 = *(unsigned __int8 *)(result + v11 + 1) - *(unsigned __int8 *)(a3 + v11 + 1);
          v10 += (*(unsigned __int8 *)(result + v11) - *(unsigned __int8 *)(a3 + v11))
               * (*(unsigned __int8 *)(result + v11) - *(unsigned __int8 *)(a3 + v11));
          v9 += (v12 * v12);
          v11 += 2;
        }
        while (2 * a5 != v11);
      }
      ++v8;
      result += a2;
      a3 += a4;
    }
    while (v8 != a6);
  }
  *a7 = v10;
  *a8 = v9;
  return result;
}

uint64_t sub_1BBAB3E64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v25 = result;
  uint64_t v8 = 0;
  LODWORD(result) = 0;
  int v24 = (*a5)++;
  char v9 = 1;
  do
  {
    uint64_t v10 = 0;
    char v27 = v9;
    uint64_t v29 = v25 + v8 * a2;
    char v11 = 1;
    uint64_t v28 = a3 + v8 * a4;
    do
    {
      char v31 = v11;
      int v32 = result;
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v14 = v29 + v10;
      uint64_t v15 = v28 + v10;
      uint64_t v30 = (*a5)++;
      char v16 = 1;
      do
      {
        uint64_t v17 = 0;
        char v18 = v16;
        uint64_t v19 = v14 + v12 * a2;
        char v20 = 1;
        uint64_t v21 = v15 + v12 * a4;
        do
        {
          char v22 = v20;
          int v23 = sub_1BBAB3FA4(v19 + v17, a2, v21 + v17, a4, a5);
          char v20 = 0;
          v13 += v23;
          uint64_t v17 = 16;
        }
        while ((v22 & 1) != 0);
        char v16 = 0;
        uint64_t v12 = 16;
      }
      while ((v18 & 1) != 0);
      char v11 = 0;
      *uint64_t v30 = v13;
      uint64_t result = (v13 + v32);
      uint64_t v10 = 32;
    }
    while ((v31 & 1) != 0);
    char v9 = 0;
    uint64_t v8 = 32;
  }
  while ((v27 & 1) != 0);
  *int v24 = result;
  return result;
}

uint64_t sub_1BBAB3FA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  LODWORD(result) = 0;
  int v7 = *a5;
  uint64_t v8 = *a5 + 1;
  *a5 = v8;
  char v9 = 1;
  do
  {
    uint64_t v10 = 0;
    char v11 = v9;
    uint64_t v12 = v5 + v6 * a2;
    char v13 = 1;
    uint64_t v14 = a3 + v6 * a4;
    do
    {
      int v15 = 0;
      int v16 = 0;
      char v17 = v13;
      uint64_t v18 = v12 + v10;
      uint64_t v19 = v14 + v10;
      do
      {
        for (uint64_t i = 0; i != 8; ++i)
        {
          int v21 = *(unsigned __int8 *)(v18 + i) - *(unsigned __int8 *)(v19 + i);
          if (v21 < 0) {
            int v21 = *(unsigned __int8 *)(v19 + i) - *(unsigned __int8 *)(v18 + i);
          }
          v16 += v21;
        }
        ++v15;
        v18 += a2;
        v19 += a4;
      }
      while (v15 != 8);
      char v13 = 0;
      *v8++ = v16;
      *a5 = v8;
      uint64_t result = (v16 + result);
      uint64_t v10 = 8;
    }
    while ((v17 & 1) != 0);
    char v9 = 0;
    uint64_t v6 = 8;
  }
  while ((v11 & 1) != 0);
  *int v7 = result;
  return result;
}

uint64_t sub_1BBAB4054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v10 = 0;
  LODWORD(v11) = 0;
  int v21 = (*a5)++;
  char v12 = 1;
  do
  {
    uint64_t v13 = 0;
    char v14 = v12;
    uint64_t v15 = a1 + v10 * a2;
    char v16 = 1;
    uint64_t v17 = a3 + v10 * a4;
    do
    {
      char v18 = v16;
      int v19 = sub_1BBAB3FA4(v15 + v13, a2, v17 + v13, a4, a5);
      char v16 = 0;
      uint64_t v11 = (v19 + v11);
      uint64_t v13 = 16;
    }
    while ((v18 & 1) != 0);
    char v12 = 0;
    uint64_t v10 = 16;
  }
  while ((v14 & 1) != 0);
  *int v21 = v11;
  return v11;
}

uint64_t sub_1BBAB4120(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v5 = result;
  int v6 = 0;
  LODWORD(result) = 0;
  do
  {
    for (uint64_t i = 0; i != 8; ++i)
    {
      int v8 = *(unsigned __int8 *)(v5 + i) - *(unsigned __int8 *)(a3 + i);
      if (v8 < 0) {
        int v8 = *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(v5 + i);
      }
      uint64_t result = (v8 + result);
    }
    ++v6;
    v5 += a2;
    a3 += a4;
  }
  while (v6 != 8);
  char v9 = *a5;
  *char v9 = result;
  *a5 = v9 + 1;
  return result;
}

float sub_1BBAB4174(unsigned __int32 *a1, uint64_t a2, unsigned __int32 *a3, uint64_t a4, double a5, uint32x4_t a6, uint32x4_t a7)
{
  float v7 = 0.0;
  int v8 = 4;
  do
  {
    a6.i32[0] = *a1;
    a6 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8));
    a7.i32[0] = *a3;
    a7 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a7.i8));
    float result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vabaq_u32((uint32x4_t)LODWORD(v7), a6, a7)));
    float v7 = result;
    a1 = (unsigned __int32 *)((char *)a1 + a2);
    a3 = (unsigned __int32 *)((char *)a3 + a4);
    --v8;
  }
  while (v8);
  return result;
}

uint64_t sub_1BBAB41C0()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  uint64_t v9 = v0;
  uint64_t v10 = 0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v11 = v50;
  uint64_t v12 = v0;
  uint64_t v13 = v6;
  do
  {
    uint64_t v14 = 0;
    uint64_t v15 = (int32x4_t *)v11;
    do
    {
      uint8x16_t v16 = *(uint8x16_t *)(v12 + v14);
      uint8x16_t v17 = *(uint8x16_t *)(v13 + v14);
      int16x8_t v18 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v17.i8);
      int16x8_t v19 = (int16x8_t)vsubl_high_u8(v16, v17);
      v15[2] = vmovl_s16(*(int16x4_t *)v19.i8);
      v15[3] = vmovl_high_s16(v19);
      *uint64_t v15 = vmovl_s16(*(int16x4_t *)v18.i8);
      v15[1] = vmovl_high_s16(v18);
      v15 += 4;
      v14 += 16;
    }
    while (v14 != 32);
    ++v10;
    v12 += v1;
    v13 += v2;
    v11 += 64;
  }
  while (v10 != 32);
  int v20 = sub_1BBAB316C(32, 32, v50, 0x20u, &v48, 0);
  uint64_t v21 = 0;
  _DWORD *v4 = v20;
  char v22 = v4 + 1;
  char v23 = 1;
  do
  {
    uint64_t v24 = 0;
    char v25 = v23;
    uint64_t v26 = v9 + v21 * v8;
    char v27 = 1;
    uint64_t v28 = v7 + v21 * v5;
    do
    {
      uint64_t v29 = 0;
      char v30 = v27;
      char v31 = (uint8x8_t *)(v26 + v24);
      int v32 = (uint8x8_t *)(v28 + v24);
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      do
      {
        int16x8_t v33 = (int16x8_t)vsubl_u8(*v31, *v32);
        int16x8_t v34 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v31->i8, *(uint8x16_t *)v32->i8);
        int v35 = (int32x4_t *)&v50[v29];
        v35[2] = vmovl_s16(*(int16x4_t *)v34.i8);
        v35[3] = vmovl_high_s16(v34);
        int32x4_t *v35 = vmovl_s16(*(int16x4_t *)v33.i8);
        v35[1] = vmovl_high_s16(v33);
        char v31 = (uint8x8_t *)((char *)v31 + v8);
        int v32 = (uint8x8_t *)((char *)v32 + v5);
        v29 += 64;
      }
      while (v29 != 1024);
      int v36 = sub_1BBAB316C(16, 16, v50, 0x10u, &v48, 0);
      char v27 = 0;
      *v22++ = v36;
      uint64_t v24 = 16;
    }
    while ((v30 & 1) != 0);
    char v23 = 0;
    uint64_t v21 = 16;
  }
  while ((v25 & 1) != 0);
  unint64_t v37 = 0;
  uint64_t v38 = v9;
  uint64_t v39 = v7;
  do
  {
    unint64_t v40 = 0;
    do
    {
      *v22++ = sub_1BBAB4448(v38 + v40, v8, v39 + v40, v5);
      BOOL v43 = v40 >= 0x18;
      v40 += 8;
    }
    while (!v43);
    v39 += 8 * v5;
    v38 += 8 * v8;
    BOOL v43 = v37 >= 0x18;
    v37 += 8;
  }
  while (!v43);
  unint64_t v44 = 0;
  do
  {
    unint64_t v45 = 0;
    do
    {
      uint64_t result = sub_1BBAB44F8((unsigned __int32 *)(v9 + v45 * 4), v8, (__int32 *)(v7 + v45 * 4), v5, v41, v42);
      v22[v45] = result;
      unint64_t v47 = v45 * 4 + 4;
      BOOL v43 = v45++ >= 7;
    }
    while (!v43);
    char v22 = (_DWORD *)((char *)v22 + v47);
    v7 += 4 * v5;
    v9 += 4 * v8;
    BOOL v43 = v44 >= 0x1C;
    v44 += 4;
  }
  while (!v43);
  return result;
}

uint64_t sub_1BBAB4448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = v8;
  do
  {
    for (uint64_t i = 0; i != 8; ++i)
      *(_DWORD *)&v5[4 * i] = *(unsigned __int8 *)(a1 + i) - *(unsigned __int8 *)(a3 + i);
    ++v4;
    a1 += a2;
    a3 += a4;
    v5 += 32;
  }
  while (v4 != 8);
  sub_1BBAB2F58((uint64_t)v8, (uint64_t)v9);
  sub_1BBAB2F58((uint64_t)v9, (uint64_t)v8);
  return sub_1BBAB3038((uint64_t)v8);
}

uint64_t sub_1BBAB44F8(unsigned __int32 *a1, uint64_t a2, __int32 *a3, uint64_t a4, __n128 a5, uint8x8_t a6)
{
  uint64_t v6 = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  do
  {
    a5.n128_u32[0] = *a1;
    a6.i32[0] = *a3;
    a6 = (uint8x8_t)vmovl_u8(a6).u64[0];
    a5 = (__n128)vsubl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)a5.n128_u64[0]), (uint16x4_t)a6);
    *(__n128 *)&v8[v6] = a5;
    a1 = (unsigned __int32 *)((char *)a1 + a2);
    a3 = (__int32 *)((char *)a3 + a4);
    v6 += 16;
  }
  while (v6 != 64);
  sub_1BBAB2DC8((uint64_t)v8, (uint64_t)v9);
  sub_1BBAB2DC8((uint64_t)v9, (uint64_t)v8);
  return sub_1BBAB2E38((uint64_t)v8);
}

uint64_t sub_1BBAB4594()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  uint64_t v9 = v0;
  uint64_t v10 = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  v34[0] = 0;
  v34[1] = 0;
  uint64_t v11 = (uint8x8_t *)v0;
  uint64_t v12 = v6;
  do
  {
    int16x8_t v13 = (int16x8_t)vsubl_u8(*v11, *v12);
    int16x8_t v14 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v11->i8, *(uint8x16_t *)v12->i8);
    uint64_t v15 = (int32x4_t *)&v35[v10];
    v15[2] = vmovl_s16(*(int16x4_t *)v14.i8);
    v15[3] = vmovl_high_s16(v14);
    *uint64_t v15 = vmovl_s16(*(int16x4_t *)v13.i8);
    v15[1] = vmovl_high_s16(v13);
    uint64_t v11 = (uint8x8_t *)((char *)v11 + v1);
    uint64_t v12 = (uint8x8_t *)((char *)v12 + v2);
    v10 += 64;
  }
  while (v10 != 1024);
  int v16 = sub_1BBAB316C(16, 16, v35, 0x10u, v34, 0);
  uint64_t v17 = 0;
  _DWORD *v4 = v16;
  int16x8_t v18 = v4 + 1;
  char v19 = 1;
  do
  {
    uint64_t v20 = 0;
    char v21 = v19;
    uint64_t v22 = v9 + v17 * v8;
    char v23 = 1;
    uint64_t v24 = (uint64_t)v7 + v17 * v5;
    do
    {
      char v25 = v23;
      int v26 = sub_1BBAB4448(v22 + v20, v8, v24 + v20, v5);
      char v23 = 0;
      *v18++ = v26;
      uint64_t v20 = 8;
    }
    while ((v25 & 1) != 0);
    char v19 = 0;
    uint64_t v17 = 8;
  }
  while ((v21 & 1) != 0);
  unint64_t v29 = 0;
  do
  {
    unint64_t v30 = 0;
    do
    {
      uint64_t result = sub_1BBAB44F8((unsigned __int32 *)(v9 + v30 * 4), v8, (__int32 *)((char *)v7 + v30 * 4), v5, v27, v28);
      v18[v30] = result;
      unint64_t v32 = v30 * 4 + 4;
      BOOL v33 = v30++ >= 3;
    }
    while (!v33);
    int16x8_t v18 = (_DWORD *)((char *)v18 + v32);
    uint64_t v7 = (uint8x8_t *)((char *)v7 + 4 * v5);
    v9 += 4 * v8;
    BOOL v33 = v29 >= 0xC;
    v29 += 4;
  }
  while (!v33);
  return result;
}

uint64_t sub_1BBAB474C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v10 = sub_1BBAB4448(a1, a2, a3, a4);
  uint64_t v13 = 0;
  *a5 = v10;
  int16x8_t v14 = a5 + 1;
  char v15 = 1;
  do
  {
    uint64_t v16 = 0;
    char v17 = v15;
    uint64_t v18 = a1 + v13 * a2;
    char v19 = 1;
    uint64_t v20 = a3 + v13 * a4;
    do
    {
      char v21 = v19;
      uint64_t result = sub_1BBAB44F8((unsigned __int32 *)(v18 + v16), a2, (__int32 *)(v20 + v16), a4, v11, v12);
      char v19 = 0;
      *v14++ = result;
      uint64_t v16 = 4;
    }
    while ((v21 & 1) != 0);
    char v15 = 0;
    uint64_t v13 = 4;
  }
  while ((v17 & 1) != 0);
  return result;
}

uint64_t sub_1BBAB47F4(uint64_t result, int a2, int a3)
{
  int v3 = a3 + a2;
  if (a3 + a2 >= 63) {
    int v3 = 63;
  }
  unsigned int v4 = v3 & ~(v3 >> 31);
  int v5 = dword_1BBB7B4C0[70 * *(unsigned __int8 *)(result + 22) + v4];
  *(_WORD *)uint64_t result = v5;
  uint64_t v6 = (__int16 *)((char *)&unk_1BBB7C308 + 700 * *(unsigned __int8 *)(result + 20) + 2 * v4);
  __int16 v7 = v6[70 * *(unsigned __int8 *)(result + 21)];
  *(_WORD *)(result + 2) = v7;
  __int16 v8 = *v6;
  *(_WORD *)(result + 4) = *v6;
  *(_WORD *)(result + 6) = v6[70];
  if (a2 >= 51) {
    int v9 = 51;
  }
  else {
    int v9 = a2;
  }
  *(_WORD *)(result + 18) = word_1BBB7C238[v9 & ~(v9 >> 31)];
  *(_WORD *)(result + 10) = v7;
  *(_WORD *)(result + 12) = v7;
  *(_WORD *)(result + 14) = v7;
  *(_WORD *)(result + 8) = v5;
  *(_WORD *)(result + 16) = v8;
  return result;
}

double sub_1BBAB4898(uint64_t a1, uint64_t a2, int a3, int a4, int a5, unsigned __int8 *a6)
{
  return sub_1BBAB48E0(a1, a2, a3, a4, a5, *(unsigned __int8 *)(*((void *)a6 + 12)+ 16* (((a3 - *((_DWORD *)a6 + 1)) >> 2)+ ((unint64_t)*a6 >> 2) * ((a4 - *((_DWORD *)a6 + 2)) >> 2))+ 10), (*(unsigned __int16 *)(*((void *)a6 + 11)+ 2* (((a3 - *((_DWORD *)a6 + 1)) >> 3)+ ((unint64_t)*a6 >> 3) * ((a4 - *((_DWORD *)a6 + 2)) >> 3))) >> 4) & 7);
}

double sub_1BBAB48E0(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7 = *(void *)(a1 + 2376);
  int v8 = *(unsigned __int8 *)(*(void *)(a1 + 2384) + 2009);
  *(void *)(a1 + 2072) = v7;
  int v9 = v8 - a5;
  *(_DWORD *)(a1 + 2048) = v9;
  *(_DWORD *)(a1 + 2052) = a6;
  *(_DWORD *)(a1 + 2056) = a7;
  if (a6 == 1)
  {
    unsigned int v10 = *(unsigned __int8 *)(*(void *)(v7 + 1368) + 245);
    if (a7) {
      ++v10;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(v7 + 1368);
    unsigned int v12 = (v9 - *(unsigned __int8 *)(v11 + 2010)) & ~((v9 - *(unsigned __int8 *)(v11 + 2010)) >> 31);
    unsigned int v10 = *(unsigned __int8 *)(v11 + 244);
    if (v12 < v10) {
      unsigned int v10 = v12;
    }
  }
  *(_DWORD *)(a1 + 2060) = v10;
  *(void *)(a1 + 2216) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(void *)(a1 + 2400) = a2;
  *(_DWORD *)(a1 + 2424) = a3;
  *(_DWORD *)(a1 + 2428) = a4;
  *(_DWORD *)(a1 + 2432) = a5;
  *(void *)(a1 + 2408) = a2 + 984;
  *(unsigned char *)(a1 + 2416) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t sub_1BBAB4978(uint64_t a1, uint64_t a2, int a3)
{
  v22[3] = *MEMORY[0x1E4F143B8];
  if (a3 < 4) {
    return 0xFFFFFFFFLL;
  }
  LODWORD(v4) = 1 << a3;
  uint64_t v5 = 2 * a1;
  if (a3 == 31)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    int v9 = 0;
    LODWORD(v8) = 0;
    LODWORD(v7) = 0;
    LODWORD(v6) = 0;
    if ((int)v4 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v4;
    }
    uint64_t v11 = a2;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        int v13 = *(unsigned __int16 *)(v11 + 2 * i);
        uint64_t v6 = (v6 + i * v13);
        uint64_t v7 = (v7 + v9 * v13);
        uint64_t v8 = (v8 + v13);
      }
      ++v9;
      v11 += v5;
    }
    while (v9 != v10);
  }
  uint64_t v14 = 0;
  char v15 = (int *)((char *)&unk_1BBB83DCC + 36 * (a3 - 2) + 8);
  do
  {
    v22[v14++] = v6 * *(v15 - 2) + v7 * *(v15 - 1) + v8 * *v15;
    v15 += 3;
  }
  while (v14 != 3);
  if (a3 == 31)
  {
    unsigned int v16 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    unsigned int v16 = 0;
    unint64_t v18 = v22[2];
    if ((int)v4 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v4;
    }
    do
    {
      uint64_t v19 = 0;
      unint64_t v20 = v18;
      do
      {
        unsigned int v21 = *(unsigned __int16 *)(a2 + v19) - (v20 >> 24);
        v16 += v21 * v21;
        v19 += 2;
        v20 += v22[0];
      }
      while (2 * v4 != v19);
      ++v17;
      a2 += v5;
      v18 += v22[1];
    }
    while (v17 != v4);
  }
  return v16 >> (2 * a3);
}

uint64_t sub_1BBAB4AF8(uint64_t a1, uint64_t a2, int a3)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  if (a3 < 4) {
    return 0xFFFFFFFFLL;
  }
  LODWORD(v4) = 1 << a3;
  if (a3 == 31)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    int v8 = 0;
    LODWORD(v7) = 0;
    LODWORD(v6) = 0;
    LODWORD(v5) = 0;
    if ((int)v4 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v4;
    }
    uint64_t v10 = a2;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        int v12 = *(unsigned __int8 *)(v10 + i);
        uint64_t v5 = (v5 + i * v12);
        uint64_t v6 = (v6 + v8 * v12);
        uint64_t v7 = (v7 + v12);
      }
      v10 += a1;
      ++v8;
    }
    while (v8 != v9);
  }
  uint64_t v13 = 0;
  uint64_t v14 = (int *)((char *)&unk_1BBB83DCC + 36 * (a3 - 2) + 8);
  do
  {
    v21[v13++] = v5 * *(v14 - 2) + v6 * *(v14 - 1) + v7 * *v14;
    v14 += 3;
  }
  while (v13 != 3);
  if (a3 == 31)
  {
    unsigned int v15 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    unsigned int v15 = 0;
    unint64_t v17 = v21[2];
    if ((int)v4 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v4;
    }
    do
    {
      uint64_t v18 = 0;
      unint64_t v19 = v17;
      do
      {
        unsigned int v20 = *(unsigned __int8 *)(a2 + v18) - (v19 >> 24);
        v15 += v20 * v20;
        ++v18;
        v19 += v21[0];
      }
      while (v4 != v18);
      a2 += a1;
      ++v16;
      v17 += v21[1];
    }
    while (v16 != v4);
  }
  return v15 >> (2 * a3);
}

uint64_t sub_1BBAB4C70(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  uint64_t v10 = *(void *)(a1 + 2400);
  int v11 = a2 - *(_DWORD *)(v10 + 808);
  int v12 = a3 - *(_DWORD *)(v10 + 812);
  uint64_t v13 = (uint64_t)v12 >> 3;
  if (((*(unsigned __int16 *)(*(void *)(v10 + 856) + 2 * (*(void *)(v10 + 832) * v13 + (v11 >> 3))) >> 2) & 3) <= (int)a5)
  {
    int v42 = *(_DWORD *)(a1 + 2420);
    if (v42)
    {
      uint64_t result = *(unsigned __int8 *)(*(void *)(v10 + 896)
                                  + (*(uint64_t *)(v10 + 816) >> 2) * ((uint64_t)v12 >> 2)
                                  + (v11 >> 2)) != 0;
      if ((v42 & 2) == 0) {
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((v42 & 2) == 0) {
        return result;
      }
    }
    if (a6 == 3 || *(unsigned __int8 *)(*(void *)(a1 + 2384) + 2012) < a4)
    {
      uint64_t v43 = ((uint64_t)v11 >> 3) + (*(uint64_t *)(v10 + 824) >> 2) * v13;
      int v44 = *(unsigned __int8 *)(*(void *)(v10 + 904) + v43);
      int v45 = *(unsigned __int8 *)(*(void *)(v10 + 912) + v43);
      unsigned int v46 = ((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - a5))
          + byte_1BBB7CE20[a5]
          + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - a5) << a5);
      uint64_t v47 = a1 + 4 * (v46 >> 5);
      *(_DWORD *)(v47 + 2136) |= (v44 != 0) << (((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - a5))
                                              + byte_1BBB7CE20[a5]
                                              + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - a5) << a5));
      *(_DWORD *)(v47 + 2180) |= (v45 != 0) << v46;
      if (v44 | v45) {
        return 1;
      }
      else {
        return result;
      }
    }
  }
  else
  {
    uint64_t v14 = (a4 - 1);
    int v15 = 1 << (a4 - 1);
    uint64_t v16 = (v15 + a2);
    uint64_t v17 = (v15 + a3);
    uint64_t v18 = a5 + 1;
    int v19 = sub_1BBAB4C70(a1, a2, a3, v14, v18, 0);
    int v20 = v19 | sub_1BBAB4C70(a1, v16, a3, v14, a5 + 1, 1);
    int v21 = sub_1BBAB4C70(a1, a2, v17, v14, a5 + 1, 2);
    uint64_t result = v20 | v21 | sub_1BBAB4C70(a1, v16, v17, v14, a5 + 1, 3);
    if ((*(unsigned char *)(a1 + 2420) & 2) != 0)
    {
      int v23 = *(_DWORD *)(a1 + 2048);
      char v24 = v23 - v18;
      int v25 = byte_1BBB7CE20[v18];
      int v26 = (a3 & 0x3F) >> (v23 - v18) << v18;
      int v27 = ((a2 & 0x3F) >> (v23 - v18)) + v25;
      uint64_t v28 = (v27 + v26) >> 5;
      int v29 = 1;
      int v30 = 1 << (((a2 & 0x3F) >> (v23 - v18)) + v25 + v26);
      if ((v30 & *(_DWORD *)(a1 + 4 * v28 + 2136)) == 0)
      {
        int v31 = ((v16 & 0x3F) >> v24) + v25;
        if (((*(_DWORD *)(a1 + 4 * ((v31 + v26) >> 5) + 2136) >> (((v16 & 0x3F) >> v24)
                                                                                 + v25
                                                                                 + v26)) & 1) != 0
          || (int v32 = (v17 & 0x3F) >> v24 << v18,
              ((*(_DWORD *)(a1 + 4 * ((v27 + v32) >> 5) + 2136) >> (v27 + v32)) & 1) != 0))
        {
          int v29 = 1;
        }
        else
        {
          int v29 = (*(_DWORD *)(a1 + 4 * ((v31 + v32) >> 5) + 2136) >> (v31 + v32)) & 1;
        }
      }
      char v33 = v23 - a5;
      int v34 = (a2 & 0x3F) >> v33;
      int v35 = (a3 & 0x3F) >> v33 << a5;
      int v36 = v34 + byte_1BBB7CE20[a5];
      uint64_t v37 = a1 + 4 * ((v35 + v36) >> 5);
      *(_DWORD *)(v37 + 2136) |= v29 << (v35 + v34 + byte_1BBB7CE20[a5]);
      if ((v30 & *(_DWORD *)(a1 + 4 * v28 + 2180)) != 0
        || (int v38 = ((v16 & 0x3F) >> v24) + v25,
            ((*(_DWORD *)(a1 + 4 * ((v38 + v26) >> 5) + 2180) >> (v38 + v26)) & 1) != 0)
        || (int v39 = (v17 & 0x3F) >> v24 << v18,
            ((*(_DWORD *)(a1 + 4 * ((v27 + v39) >> 5) + 2180) >> (v27 + v39)) & 1) != 0))
      {
        int v40 = 1;
      }
      else
      {
        int v40 = (*(_DWORD *)(a1 + 4 * ((v38 + v39) >> 5) + 2180) >> (v38 + v39)) & 1;
      }
      uint64_t v41 = a1 + 4 * ((v36 + v35) >> 5);
      *(_DWORD *)(v41 + 2180) |= v40 << (v36 + v35);
    }
  }
  return result;
}

unint64_t *sub_1BBAB500C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v154 = a4;
  uint64_t v11 = (int)a5;
  uint64_t v164 = a5 << 32;
  char v138 = a5 - 1;
  int v12 = -(int)a5;
  uint64_t v150 = (a4 - 1);
  int v161 = a5;
  uint64_t v132 = 76 - a4;
  uint64_t v133 = (int)a5;
  uint64_t v13 = &byte_1BBB7CE20[(int)a5];
  int v158 = -(int)a5;
  uint64_t v156 = v13;
  while (1)
  {
    uint64_t v14 = (unsigned __int8 *)(v11 + v10);
    uint64_t v15 = v154 + v9;
    uint64_t v16 = *(void *)(a1 + 2400);
    uint64_t result = *(unint64_t **)(v16 + 944);
    int v18 = *(_DWORD *)(a1 + 2052);
    if (v18 == 3)
    {
      BOOL v20 = 0;
      if (v11 == v9 && *(_DWORD *)(a1 + 2056))
      {
        uint64_t v21 = *(void *)(a1 + 2384);
        if (!*(unsigned char *)(v21 + 244))
        {
          BOOL v22 = v15 > *(unsigned __int8 *)(v21 + 2010);
          goto LABEL_22;
        }
        BOOL v20 = 0;
      }
    }
    else if (v18 == 1)
    {
      BOOL v19 = v11 != v9 || *(_DWORD *)(a1 + 2056) == 0;
      BOOL v20 = !v19;
    }
    else
    {
      BOOL v20 = 0;
    }
    BOOL v22 = 1;
    if (!v20)
    {
      uint64_t v23 = *(void *)(a1 + 2384);
      if (v15 <= *(unsigned __int8 *)(v23 + 2011))
      {
        if (v15 <= *(unsigned __int8 *)(v23 + 2010) || (uint64_t)v14 >= *(int *)(a1 + 2060))
        {
          BOOL v22 = 0;
        }
        else
        {
          int64_t v24 = ((unint64_t)*(unsigned __int16 *)(*(void *)(v16 + 856)
                                                       + 2
                                                       * (*(void *)(v16 + 832)
                                                        * ((uint64_t)((int)a3 - *(_DWORD *)(v16 + 812)) >> 3)
                                                        + (((int)a2 - *(_DWORD *)(v16 + 808)) >> 3))) >> 2) & 3;
          BOOL v22 = (uint64_t)v14 < v24;
          if (*(unsigned char *)(a1 + 2420))
          {
            int v25 = a6;
            int v26 = result;
            sub_1BBA1CA34(result, (uint64_t)v14 < v24, (unsigned char *)result + v132 + v10);
            uint64_t v13 = v156;
            LOBYTE(v12) = v158;
            uint64_t result = v26;
            uint64_t v11 = v133;
            a6 = v25;
          }
        }
      }
    }
LABEL_22:
    int v27 = a4 + v9;
    if ((*(unsigned char *)(a1 + 2420) & 2) == 0) {
      goto LABEL_41;
    }
    if (v15 <= 2 && v11 != v9)
    {
      char v28 = v12 + v9 + *(_DWORD *)(a1 + 2048);
      int v29 = &v13[v10];
      int v30 = *(v29 - 1);
      int v31 = ((a2 & 0x3F) >> (v28 + 1))
          + v30
          + ((a3 & 0x3F) >> (v28 + 1) << (v138 + v10));
      LODWORD(v29) = *v29;
      int v32 = ((a3 & 0x3F) >> v28 << (v161 + v10)) + ((a2 & 0x3F) >> v28) + v29;
      *(_DWORD *)(a1 + 2136 + 4 * (v32 >> 5)) |= ((*(_DWORD *)(a1 + 2136 + 4 * (v31 >> 5)) >> v31) & 1) << v32;
      LOBYTE(v32) = v12 + v9 + *(_DWORD *)(a1 + 2048);
      int v33 = ((a2 & 0x3F) >> (v32 + 1))
          + v30
          + ((a3 & 0x3F) >> (v32 + 1) << (v138 + v10));
      int v34 = ((a2 & 0x3F) >> v32) + v29 + ((a3 & 0x3F) >> v32 << (v161 + v10));
      *(_DWORD *)(a1 + 2180 + 4 * (v34 >> 5)) |= ((*(_DWORD *)(a1 + 2180 + 4 * (v33 >> 5)) >> v33) & 1) << v34;
      goto LABEL_41;
    }
    int v35 = a2 & ~(1 << v27);
    int v36 = a3 & ~(1 << v27);
    int v37 = *(_DWORD *)(a1 + 2048);
    uint64_t v38 = v164 >> 32;
    unsigned int v140 = a3;
    unsigned int v142 = a2;
    int v145 = (int)v14;
    int v147 = a6;
    BOOL v139 = v22;
    if (v11 == v9
      || (int v39 = v13[v10 - 1],
          int v40 = ((v35 & 0x3F) >> (v12 + v9 + v37 + 1))
              + v39
              + ((v36 & 0x3F) >> (v12 + v9 + v37 + 1) << (v138 + v10)),
          int v41 = 1 << (((v35 & 0x3F) >> (v12 + v9 + v37 + 1))
                    + v39
                    + ((v36 & 0x3F) >> (v12 + v9 + v37 + 1) << (v138 + v10))),
          (v41 & *(_DWORD *)(a1 + 4 * (v40 >> 5) + 2136)) != 0))
    {
      int v135 = a2 & ~(1 << v27);
      int v136 = a3 & ~(1 << v27);
      unsigned int v134 = a2 & 0x3F;
      unsigned int v42 = a3 & 0x3F;
      int v43 = v13[v10];
      int v44 = (v134 >> (v12 + v9 + v37)) + v43 + (v42 >> (v12 + v9 + v37) << (v161 + v10));
      int v45 = *(_DWORD *)(a1 + 4 * (v44 >> 5) + 2136) >> v44;
      if (v15 <= 2) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = v164 >> 32;
      }
      uint64_t v137 = result;
      char v47 = v12;
      uint64_t v14 = v13;
      sub_1BBA1CA34(result, v45 & 1, (unsigned char *)result + v46 + 76);
      int v37 = *(_DWORD *)(a1 + 2048);
      if (v11 == v9)
      {
        char v48 = 0;
        uint64_t result = v137;
        uint64_t v11 = v133;
        unsigned int v49 = v134;
        goto LABEL_40;
      }
      uint64_t v13 = v14;
      uint64_t result = v137;
      int v50 = ((v135 & 0x3F) >> (v47 + v9 + v37 + 1))
          + v14[v10 - 1]
          + ((v136 & 0x3F) >> (v47 + v9 + v37 + 1) << (v138 + v10));
      uint64_t v51 = (uint64_t)v50 >> 5;
      int v41 = 1 << v50;
      a3 = v140;
      a2 = v142;
      int v27 = a4 + v9;
      LODWORD(v14) = v145;
      a6 = v147;
      uint64_t v11 = v133;
      uint64_t v38 = v164 >> 32;
      BOOL v22 = v139;
    }
    else
    {
      uint64_t v51 = (uint64_t)v40 >> 5;
    }
    if ((v41 & *(_DWORD *)(a1 + 4 * v51 + 2180)) == 0) {
      goto LABEL_41;
    }
    int v43 = v13[v10];
    unsigned int v49 = a2 & 0x3F;
    char v48 = v161 + v10;
    unsigned int v42 = a3 & 0x3F;
    uint64_t v46 = v15 <= 2 ? 0 : v38;
LABEL_40:
    int v52 = (*(_DWORD *)(a1 + 4 * ((int)((v49 >> (v37 - v48)) + v43 + (v42 >> (v37 - v48) << v48)) >> 5) + 2180) >> ((v49 >> (v37 - v48)) + v43 + (v42 >> (v37 - v48) << v48))) & 1;
    int v53 = result;
    sub_1BBA1CA34(result, v52, (unsigned char *)result + v46 + 76);
    uint64_t result = v53;
    a3 = v140;
    a2 = v142;
    int v27 = a4 + v9;
    LODWORD(v14) = v145;
    a6 = v147;
    BOOL v22 = v139;
LABEL_41:
    if (!v22) {
      break;
    }
    int v54 = 1 << (v150 + v9);
    uint64_t v55 = (v54 + a2);
    uint64_t v56 = (v54 + a3);
    uint64_t v57 = (v161 + v10 + 1);
    sub_1BBAB500C(a1, a2, a3, v150 + v9, v57, 0);
    sub_1BBAB500C(a1, v55, a3, v150 + v9, v57, 1);
    sub_1BBAB500C(a1, a2, v56, v150 + v9, v57, 2);
    uint64_t v13 = v156;
    LOBYTE(v12) = v158;
    ++v10;
    --v9;
    v164 += 0x100000000;
    a6 = 3;
    a2 = v55;
    a3 = v56;
  }
  uint64_t v58 = *(void *)(a1 + 2400);
  int v59 = *(_DWORD *)(v58 + 808);
  int v60 = a2 - v59;
  int v61 = *(_DWORD *)(v58 + 812);
  int v62 = a3 - v61;
  int v63 = *(unsigned __int8 *)(v58 + 804);
  int v64 = *(_DWORD *)(a1 + 2420);
  if ((v64 & 2) != 0)
  {
    int v66 = ((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14))
        + byte_1BBB7CE20[(int)v14]
        + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14) << (char)v14);
    BOOL v65 = 1;
    int v67 = 1 << (((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14))
              + byte_1BBB7CE20[(int)v14]
              + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14) << (char)v14));
    if ((v67 & *(_DWORD *)(a1 + 4 * (v66 >> 5) + 2136)) == 0) {
      BOOL v65 = (*(_DWORD *)(a1 + 4 * ((uint64_t)v66 >> 5) + 2180) & v67) != 0;
    }
  }
  else
  {
    BOOL v65 = 0;
  }
  int v68 = *(unsigned __int8 *)(*(void *)(v58 + 896) + (*(uint64_t *)(v58 + 816) >> 2) * ((uint64_t)v62 >> 2) + (v60 >> 2));
  if (v64)
  {
    BOOL v69 = v14 || *(_DWORD *)(a1 + 2052) == 1;
    int v70 = v69 || v65;
    if (v70 == 1)
    {
      if (v14) {
        int v71 = result;
      }
      else {
        int v71 = (unint64_t *)((char *)result + 1);
      }
      int v72 = a6;
      int v73 = v27;
      uint64_t result = sub_1BBA1CA34(result, v68 != 0, (unsigned char *)v71 + 74);
      int v27 = v73;
      a6 = v72;
      uint64_t v58 = *(void *)(a1 + 2400);
      int v59 = *(_DWORD *)(v58 + 808);
      int v61 = *(_DWORD *)(v58 + 812);
      int v63 = *(unsigned __int8 *)(v58 + 804);
      int v60 = a2 - v59;
      int v62 = a3 - v61;
    }
  }
  if (v60 < v63 && v62 < v63) {
    uint64_t v75 = *(void *)(v58 + 856) + 2 * (*(void *)(v58 + 832) * ((uint64_t)v62 >> 3) + (v60 >> 3));
  }
  else {
    uint64_t v75 = 0;
  }
  uint64_t v76 = 0;
  int16x4_t v77 = (unsigned __int8 *)(*(void *)(v58 + 864) + 16 * (*(void *)(v58 + 840) * ((uint64_t)v62 >> 2) + (v60 >> 2)));
  uint64_t v78 = *(void *)(v58 + 944);
  uint64_t v80 = *(void *)(v78 + 16);
  uint64_t v79 = *(void *)(v78 + 24);
  uint64_t v81 = *(void *)(v78 + 208);
  uint64_t v82 = *(void *)(v78 + 8);
  if (v27 <= 3 && *(_DWORD *)(a1 + 2052) == 1) {
    uint64_t v76 = byte_1BBB7CAA0[*v77];
  }
  int v83 = *(_DWORD *)(a1 + 2420);
  if ((v83 & 2) == 0)
  {
    BOOL v84 = 0;
    goto LABEL_72;
  }
  int v85 = ((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14))
      + byte_1BBB7CE20[(int)v14]
      + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14) << (char)v14);
  int v86 = 1 << (((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14))
            + byte_1BBB7CE20[(int)v14]
            + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14) << (char)v14));
  if ((v86 & *(_DWORD *)(a1 + 4 * (v85 >> 5) + 2136)) == 0)
  {
    BOOL v84 = (*(_DWORD *)(a1 + 4 * ((uint64_t)v85 >> 5) + 2180) & v86) != 0;
LABEL_72:
    if (!v68 && !v84) {
      goto LABEL_124;
    }
  }
  if (v83)
  {
    if (!*(unsigned char *)(a1 + 2064)) {
      goto LABEL_98;
    }
    int v155 = v77;
    uint64_t v157 = *(void *)(v78 + 208);
    uint64_t v159 = *(void *)(v78 + 16);
    uint64_t v162 = *(void *)(v78 + 24);
    uint64_t v165 = *(void *)(v78 + 8);
    int v144 = v27;
    int v146 = (int)v14;
    int v148 = a6;
    *(unsigned char *)(a1 + 2064) = 0;
    int v141 = a3;
    int v143 = a2;
    int v88 = a2;
    uint64_t v89 = (__int16 *)v75;
    int v90 = sub_1BBA9783C(v58, v88, a3, *(_DWORD *)(a1 + 2432), *(unsigned __int8 **)(v58 + 848), *(_DWORD *)(a1 + 2068), *(unsigned __int8 *)(v58 + 800));
    uint64_t v153 = v89;
    int v91 = *(void *)(a1 + 2424) - v59;
    int v92 = v90;
    uint64_t v93 = *(void *)(v58 + 832) * ((uint64_t)(int)(HIDWORD(*(void *)(a1 + 2424)) - v61) >> 3) + (v91 >> 3);
    int v151 = *v89 >> 9;
    int v94 = v151 - v90;
    *(_WORD *)(*(void *)(v58 + 856) + 2 * v93) = *v89 & 0xFE00 | *(_WORD *)(*(void *)(v58 + 856) + 2 * v93) & 0x1FF;
    if (v151 - v90 >= 0) {
      unsigned int v95 = v151 - v90;
    }
    else {
      unsigned int v95 = v90 - v151;
    }
    if (v95 >= 5) {
      int v96 = 5;
    }
    else {
      int v96 = v95;
    }
    uint64_t result = sub_1BBA1CA34((unint64_t *)v78, v96 != 0, (unsigned char *)(v78 + 49));
    if (v96)
    {
      if (v96 != 1)
      {
        int v97 = 1 - v96;
        do
        {
          sub_1BBA1CA34((unint64_t *)v78, 1, (unsigned char *)(v78 + 50));
          BOOL v98 = __CFADD__(v97++, 1);
        }
        while (!v98);
      }
      if (v95 <= 4)
      {
        uint64_t result = sub_1BBA1CA34((unint64_t *)v78, 0, (unsigned char *)(v78 + 50));
        goto LABEL_94;
      }
LABEL_93:
      sub_1BBA1CD88((unint64_t *)v78, v95 - 5, 0);
      LODWORD(a3) = v141;
      LODWORD(a2) = v143;
      goto LABEL_95;
    }
    if (v95 >= 5) {
      goto LABEL_93;
    }
LABEL_94:
    LODWORD(a3) = v141;
    LODWORD(a2) = v143;
    if (v151 != v92) {
LABEL_95:
    }
      uint64_t result = sub_1BBA1CB10((unint64_t *)v78, v94 < 1);
    int16x4_t v77 = v155;
    *(_DWORD *)(a1 + 2068) = *v153 >> 9;
    int v83 = *(_DWORD *)(a1 + 2420);
    int v27 = v144;
    LODWORD(v14) = v146;
    a6 = v148;
    LODWORD(v79) = v162;
    LODWORD(v82) = v165;
    LODWORD(v80) = v159;
    LODWORD(v81) = v157;
    if (v83)
    {
LABEL_98:
      if (v68 && !*(unsigned char *)(*(void *)(a1 + 2400) + 803))
      {
        int v102 = v27;
        uint64_t v103 = v76;
        int v149 = a6;
        int v104 = v82;
        int v105 = v79;
        int v106 = v80;
        int v107 = v81;
        unint64_t v108 = v77;
        uint64_t result = sub_1BBAB5BB4(a1, a2, a3, v27, v103, 0);
        int16x4_t v77 = v108;
        LODWORD(v81) = v107;
        LODWORD(v80) = v106;
        LODWORD(v79) = v105;
        LODWORD(v82) = v104;
        int v27 = v102;
        a6 = v149;
        if ((*(_DWORD *)(a1 + 2420) & 2) == 0) {
          goto LABEL_124;
        }
LABEL_100:
        uint64_t v99 = *(void *)(a1 + 2400);
        if (*(unsigned char *)(v99 + 803)) {
          goto LABEL_124;
        }
        if (*(unsigned __int8 *)(*(void *)(a1 + 2384) + 2012) >= v27)
        {
          if (a6 != 3) {
            goto LABEL_125;
          }
          int v100 = a2 - 2 * v27;
          int v101 = a3 - 2 * v27;
        }
        else
        {
          --v27;
          int v100 = a2;
          int v101 = a3;
        }
        if (*(_DWORD *)(a1 + 2052) != 1) {
          goto LABEL_118;
        }
        unsigned int v109 = v77[1];
        if (v109 == 35) {
          unsigned int v109 = *(unsigned __int8 *)(*(void *)(v99 + 864)
        }
                                    + 16
                                    * (*(void *)(v99 + 840)
                                     * ((uint64_t)(int)(HIDWORD(*(void *)(a1 + 2424)) - *(_DWORD *)(v99 + 812)) >> 2)
                                     + ((int)(*(void *)(a1 + 2424) - *(_DWORD *)(v99 + 808)) >> 2)));
        if ((v27 - 1) <= 1)
        {
          int v110 = 26 - v109;
          if (v109 >= 0x1A) {
            int v110 = v109 - 26;
          }
          BOOL v111 = v110 < 5;
          int v112 = 10 - v109;
          BOOL v98 = v109 >= 0xA;
          int v113 = v109 - 10;
          if (!v98) {
            int v113 = v112;
          }
          if (v113 >= 5) {
            uint64_t v114 = v111;
          }
          else {
            uint64_t v114 = 2;
          }
        }
        else
        {
LABEL_118:
          uint64_t v114 = 0;
        }
        unsigned int v115 = a2 & 0x3F;
        char v116 = *(_DWORD *)(a1 + 2048) - (_BYTE)v14;
        unsigned int v117 = a3 & 0x3F;
        char v118 = (char)v14;
        int v119 = byte_1BBB7CE20[(int)v14];
        int v120 = (v115 >> v116) + v119 + (v117 >> v116 << v118);
        int v121 = 1 << ((v115 >> v116) + v119 + (v117 >> v116 << v118));
        int v166 = v100;
        int v163 = v101;
        unsigned int v160 = v114;
        if ((v121 & *(_DWORD *)(a1 + 4 * (v120 >> 5) + 2136)) != 0)
        {
          int v122 = v27;
          int v123 = v82;
          int v124 = v79;
          int v125 = v80;
          int v126 = v81;
          uint64_t result = sub_1BBAB5BB4(a1, v100, v101, v27, v114, 1);
          LODWORD(v81) = v126;
          LODWORD(v80) = v125;
          LODWORD(v79) = v124;
          LODWORD(v82) = v123;
          int v27 = v122;
          uint64_t v127 = (uint64_t)(int)((v115 >> (*(_DWORD *)(a1 + 2048) - v118))
                              + v119
                              + (v117 >> (*(_DWORD *)(a1 + 2048) - v118) << v118)) >> 5;
          int v121 = 1 << ((v115 >> (*(_DWORD *)(a1 + 2048) - v118))
                     + v119
                     + (v117 >> (*(_DWORD *)(a1 + 2048) - v118) << v118));
        }
        else
        {
          uint64_t v127 = (uint64_t)v120 >> 5;
        }
        if ((v121 & *(_DWORD *)(a1 + 4 * v127 + 2180)) != 0)
        {
          int v128 = v82;
          int v129 = v79;
          int v130 = v80;
          int v131 = v81;
          uint64_t result = sub_1BBAB5BB4(a1, v166, v163, v27, v160, 2);
          LODWORD(v81) = v131;
          LODWORD(v80) = v130;
          LODWORD(v79) = v129;
          LODWORD(v82) = v128;
        }
        goto LABEL_124;
      }
    }
  }
  if ((v83 & 2) != 0) {
    goto LABEL_100;
  }
LABEL_124:
  uint64_t v99 = *(void *)(a1 + 2400);
LABEL_125:
  *(_DWORD *)(v99 + 212) += v82
                          - (*(_DWORD *)(*(void *)(v99 + 944) + 8)
                           + ((v80 + 8 * (v79 - v81)) << 8))
                          + ((*(_DWORD *)(*(void *)(v99 + 944) + 16)
                            + 8
                            * (*(_DWORD *)(*(void *)(v99 + 944) + 24) - *(_DWORD *)(*(void *)(v99 + 944) + 208))) << 8);
  return result;
}

unint64_t *sub_1BBAB5BB4(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  uint64_t v7 = a5;
  uint64_t v12 = *(void *)(a1 + 2400);
  uint64_t v13 = *(void *)(v12 + 8 * (a6 > 0) + 816);
  if (((a3 | a2) & 0x80000000) == 0
    && ((int v14 = a2 - *(_DWORD *)(v12 + 808),
         int v15 = a3 - *(_DWORD *)(v12 + 812),
         int v16 = *(unsigned __int8 *)(v12 + 804),
         v14 < v16)
      ? (BOOL v17 = v15 < v16)
      : (BOOL v17 = 0),
        v17))
  {
    int v18 = (char *)(*(void *)(v12 + 8 * a6 + 872) + 2 * (v13 * (v15 >> (a6 > 0)) + (v14 >> (a6 > 0))));
  }
  else
  {
    int v18 = 0;
  }
  if (a4 != 31)
  {
    unsigned int v24 = a5;
    uint64_t v19 = 0;
    size_t v20 = 2 << a4;
    if (1 << a4 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = (1 << a4);
    }
    uint64_t v22 = 2 * v13;
    do
    {
      memcpy((void *)(a1 + 2 * (int)(v19++ << a4)), v18, v20);
      v18 += v22;
    }
    while (v21 != v19);
    uint64_t v7 = v24;
  }

  return sub_1BBAB5CFC(a1, a1, a2, a3, a4, v7, a6);
}

unint64_t *sub_1BBAB5CFC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  unsigned int v7 = a6;
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v87 = a5 - 2;
  uint64_t result = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, _WORD *))(a1 + 8 * v87 + 2344))(a2, a6, v103, v102);
  if ((result & 0x80000000) == 0)
  {
    unsigned int v12 = result;
    int v13 = v103[0];
    int v14 = v103[1];
    uint64_t v15 = *(void *)(a1 + 2400);
    int v97 = *(unint64_t **)(v15 + 944);
    if (a5 == 2 && *(unsigned char *)(*(void *)(*(void *)(a1 + 2376) + 1384) + 11))
    {
      uint64_t v16 = v15 + 800;
      int v17 = a3 - *(_DWORD *)(v15 + 808);
      int v18 = a4 - *(_DWORD *)(v15 + 812);
      if (a7) {
        char v19 = 3;
      }
      else {
        char v19 = 2;
      }
      int v20 = *(unsigned __int8 *)(*(void *)(v16 + 8 * a7 + 120)
                               + (*(uint64_t *)(v16 + 8 * (a7 > 0) + 16) >> 2) * (v18 >> v19)
                               + (v17 >> v19));
      if (a7 <= 0) {
        uint64_t v21 = v97;
      }
      else {
        uint64_t v21 = (unint64_t *)((char *)v97 + 1);
      }
      sub_1BBA1CA34(v97, v20 != 0, (unsigned char *)v21 + 81);
    }
    if (v7 == 2) {
      int v22 = v13;
    }
    else {
      int v22 = v14;
    }
    if (v7 == 2) {
      int v23 = v14;
    }
    else {
      int v23 = v13;
    }
    sub_1BBAB646C(v97, v23, a5, a7, (uint64_t)v97 + 83);
    uint64_t result = sub_1BBAB646C(v97, v22, a5, a7, (uint64_t)v97 + 101);
    if ((unint64_t)(v23 - 4) <= 0x1B) {
      uint64_t result = sub_1BBA1CC5C(v97, v23 - byte_1BBB7CD80[byte_1BBB7CD60[v23]], (byte_1BBB7CD60[v23] - 2) >> 1);
    }
    if ((unint64_t)(v22 - 4) <= 0x1B) {
      uint64_t result = sub_1BBA1CC5C(v97, v22 - byte_1BBB7CD80[byte_1BBB7CD60[v22]], (byte_1BBB7CD60[v22] - 2) >> 1);
    }
    unint64_t v91 = 0;
    unsigned int v24 = v97 + 5;
    LODWORD(v25) = 4 * v7;
    int v86 = (1 << v87) - 1;
    if (v7) {
      int v26 = 15;
    }
    else {
      int v26 = 9;
    }
    if (a5 == 3) {
      uint64_t v25 = v25;
    }
    else {
      uint64_t v25 = 0;
    }
    if (a5 == 3) {
      int v27 = 9;
    }
    else {
      int v27 = 12;
    }
    int v89 = v27;
    if (a5 != 3) {
      int v26 = 21;
    }
    int v84 = v26;
    uint64_t v82 = (uint64_t)v24 + 2 * (a7 > 0) + 79;
    char v28 = &v24[2 * (a7 > 0)];
    uint64_t v79 = (uint64_t)v24 + 4 * (a7 > 0) + 151;
    int v85 = (char *)*(&off_1E6248580 + v87) + v25;
    uint64_t v29 = v12 >> 4;
    unsigned int v30 = v12 & 0xF;
    int v31 = v97;
    int v83 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 2376) + 1384) + 5);
    if (a7 <= 0) {
      int v32 = 0;
    }
    else {
      int v32 = 27;
    }
    int v95 = v32;
    int v33 = &byte_1BBB83EF0[64 * (unint64_t)v7 + 16 * a5];
    uint64_t v34 = v29;
    int v88 = 1;
    BOOL v98 = v33;
    uint64_t v99 = v29;
    uint64_t v80 = (uint64_t)v28 + 127;
    do
    {
      unsigned int v35 = v85[v34];
      int v36 = v35 >> v87;
      if ((int)(v86 & v35) >= v86) {
        int v37 = 0;
      }
      else {
        int v37 = (v91 >> v35) & 2;
      }
      uint64_t v38 = (v91 >> ((1 << v87) + v35)) & 1;
      if (v36 >= v86) {
        LODWORD(v38) = 0;
      }
      uint64_t v93 = v38 | v37;
      unsigned int v39 = (unsigned __int16)v102[v34];
      if (v34 != v29 && v34)
      {
        int v40 = (unsigned char *)(v93 ? v82 + 1 : v82);
        uint64_t result = sub_1BBA1CA34(v31, v39 != 0, v40);
        int v33 = v98;
        uint64_t v29 = v99;
        if (!v39) {
          goto LABEL_127;
        }
      }
      unsigned int v41 = 0;
      unsigned int v42 = 0;
      int v43 = 0;
      int v44 = v36 * (4 << a5) + 4 * (v35 & ~(-1 << v87));
      uint64_t v90 = 1 << v35;
      uint64_t v45 = v30;
      do
      {
        uint64_t v46 = v33[v45 - 32];
        uint64_t v47 = v46 + v44;
        if ((v34 < v29 || v45 < v30) && (!v34 || v45 || v43 >= 1))
        {
          if (a5 == 2)
          {
            int v48 = byte_1BBB7CE25[v47 + 64];
          }
          else if ((int)v47 < 1)
          {
            int v48 = 0;
          }
          else
          {
            int v49 = byte_1BBB7CE25[16 * v93 + (v46 & 3 | (4 * ((v47 >> a5) & 3)))];
            if (a7)
            {
              int v48 = v89 + v49;
            }
            else
            {
              if ((v47 >> a5 >> 2) + ((v47 & ~(-1 << a5)) >> 2)) {
                v49 += 3;
              }
              int v48 = v49 + v84;
            }
          }
          uint64_t result = sub_1BBA1CA34(v97, (v39 >> v45) & 1, (unsigned char *)v97 + (v48 + v95) + 123);
          int v33 = v98;
          uint64_t v29 = v99;
        }
        if ((v39 >> v45))
        {
          int v50 = *(__int16 *)(a2 + 2 * (int)v47);
          if (v50 >= 0) {
            unsigned int v51 = *(__int16 *)(a2 + 2 * (int)v47);
          }
          else {
            unsigned int v51 = -v50;
          }
          v101[v43] = v51;
          unsigned int v42 = __PAIR64__(v42, v50) >> 31;
          v41 += (v51 > 1) << v43++;
        }
        BOOL v52 = v45-- <= 0;
      }
      while (!v52);
      v91 |= v90;
      if (v39)
      {
        if (v34) {
          BOOL v52 = a7 <= 0;
        }
        else {
          BOOL v52 = 0;
        }
        if (v52) {
          int v53 = 2;
        }
        else {
          int v53 = 0;
        }
        if (v83) {
          int v54 = (int)((__clz(v39) ^ 0x1F) - __clz(__rbit32(v39))) > 3;
        }
        else {
          int v54 = 0;
        }
        int v55 = v42 >> v54;
        if (v43 < 1)
        {
          int v88 = 1;
        }
        else
        {
          int v94 = v54;
          if (v43 >= 8) {
            int v56 = 8;
          }
          else {
            int v56 = v43;
          }
          unsigned int v81 = v53 | (v88 == 0);
          int v57 = 1;
          unsigned int v58 = v41;
          do
          {
            int v59 = (unsigned char *)(v80 + (int)(v57 + 4 * v81));
            if ((v57 - 1) >= 2) {
              int v60 = v57;
            }
            else {
              int v60 = v57 + 1;
            }
            if (v58) {
              int v57 = 0;
            }
            else {
              int v57 = v60;
            }
            sub_1BBA1CA34(v97, v58 & 1, v59);
            v58 >>= 1;
            --v56;
          }
          while (v56);
          int v88 = v60;
          int v54 = v94;
          if (!v57)
          {
            BOOL v61 = (unsigned __int16)v101[__clz(__rbit32(v41))] > 2u;
            int v31 = v97;
            sub_1BBA1CA34(v97, v61, (unsigned char *)(v79 + v81));
            uint64_t result = sub_1BBA1CC5C(v97, v55, v43 - v94);
            int v88 = 0;
LABEL_97:
            int v33 = v98;
            uint64_t v29 = v99;
            unint64_t v62 = 0;
            int v63 = 0;
            if (v43 <= 1) {
              uint64_t v64 = 1;
            }
            else {
              uint64_t v64 = v43;
            }
            int v65 = 1;
            do
            {
              int v66 = v65 + 2;
              if (v62 >= 8) {
                int v66 = 1;
              }
              signed int v67 = (unsigned __int16)v101[v62];
              unsigned int v68 = v67 - v66;
              if (v67 >= v66)
              {
                int v69 = 3 << v63;
                int v70 = v68 - (3 << v63);
                if ((int)v68 >= 3 << v63)
                {
                  int v73 = 1 << v63;
                  int v74 = v63;
                  while (v70 >= v73)
                  {
                    ++v74;
                    v70 -= v73;
                    int v73 = 1 << v74;
                  }
                  sub_1BBA1CC5C(v97, (1 << (v74 - v63 + 4)) - 2, v74 - v63 + 4);
                  uint64_t v75 = v97;
                  int v76 = v70;
                  int v77 = v74;
                  int v31 = v97;
                }
                else
                {
                  if (v69 >= (int)(v68 >> v63)) {
                    int v71 = v68 >> v63;
                  }
                  else {
                    int v71 = 3 << v63;
                  }
                  int v72 = (int)(v68 >> v63) < v69;
                  if (v71 > 21) {
                    sub_1BBA1CD18(v31, v71, v72);
                  }
                  else {
                    sub_1BBA1CC5C(v31, ~v72, v71 + v72);
                  }
                  int v76 = v68 & ~(-1 << v63);
                  uint64_t v75 = v31;
                  int v77 = v63;
                }
                uint64_t result = sub_1BBA1CC5C(v75, v76, v77);
                if (v63 >= 3) {
                  int v78 = 3;
                }
                else {
                  int v78 = v63;
                }
                if (v69 < v67) {
                  int v63 = v78 + 1;
                }
                int v33 = v98;
                uint64_t v29 = v99;
              }
              if (v67 > 1) {
                int v65 = 0;
              }
              ++v62;
            }
            while (v62 != v64);
            unsigned int v30 = 15;
            goto LABEL_127;
          }
        }
        int v31 = v97;
        uint64_t result = sub_1BBA1CC5C(v97, v55, v43 - v54);
        if (v43 >= 9) {
          goto LABEL_97;
        }
        unsigned int v30 = 15;
        int v33 = v98;
        uint64_t v29 = v99;
      }
      else
      {
        unsigned int v30 = 15;
        int v31 = v97;
      }
LABEL_127:
      BOOL v52 = v34-- <= 0;
    }
    while (!v52);
  }
  return result;
}

unint64_t *sub_1BBAB646C(unint64_t *result, int a2, int a3, int a4, uint64_t a5)
{
  int v8 = result;
  unsigned int v9 = byte_1BBB7CD60[a2];
  if (a2)
  {
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = byte_1BBB7CD60[a2];
    }
    uint64_t v11 = &byte_1BBB7CE75[28 * (a4 > 0) - 2 + a3 + (a3 - 2) * a3];
    uint64_t v12 = v10;
    do
    {
      unsigned int v13 = *v11++;
      uint64_t result = sub_1BBA1CA34(v8, 1, (unsigned char *)(a5 + v13));
      --v12;
    }
    while (v12);
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (v9 < byte_1BBB7CD60[~(-1 << a3)])
  {
    int v14 = (unsigned char *)(a5 + byte_1BBB7CE75[28 * (a4 > 0) - 2 + (int)v10 + a3 + (a3 - 2) * a3]);
    return sub_1BBA1CA34(v8, 0, v14);
  }
  return result;
}

unint64_t *sub_1BBAB6590(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, unsigned char *a6, int a7)
{
  if (a7)
  {
    int v12 = *(_DWORD *)(a1 + 2056);
    BOOL v13 = v12 != 0;
    if (v12) {
      int v14 = -1;
    }
    else {
      int v14 = 0;
    }
    int v15 = v14 - a4 + *(unsigned __int8 *)(*(void *)(a1 + 2384) + 2009);
    int v16 = 1;
  }
  else
  {
    BOOL v13 = 0;
    *(void *)(a1 + 2216) = 0;
    *(_OWORD *)(a1 + 2184) = 0u;
    *(_OWORD *)(a1 + 2200) = 0u;
    *(_OWORD *)(a1 + 2152) = 0u;
    *(_OWORD *)(a1 + 2168) = 0u;
    *(_OWORD *)(a1 + 2136) = 0u;
    int v15 = *(unsigned __int8 *)(*(void *)(a1 + 2384) + 2009) - a4;
    int v16 = 2 * (*(unsigned char *)(a1 + 2416) == 0);
  }
  *(_DWORD *)(a1 + 2420) = v16;
  if (!*(unsigned char *)(*(void *)(a1 + 2400) + 801)) {
    sub_1BBAB4C70(a1, a2, a3, v15, v13, 0);
  }
  *(_DWORD *)(a1 + 2068) = *a5;
  *(unsigned char *)(a1 + 2064) = *a6;
  uint64_t result = sub_1BBAB500C(a1, a2, a3, v15, v13, 0);
  *a5 = *(_DWORD *)(a1 + 2068);
  *a6 = *(unsigned char *)(a1 + 2064);
  return result;
}

uint64_t *sub_1BBAB66A4(uint64_t *result, char a2, int a3, uint64_t a4, unsigned char *a5)
{
  unint64_t v5 = result[1];
  uint64_t v6 = a3 - 1;
  if (v5 < *(void *)(a4 + 24 * v6 + 8))
  {
    if (v5 >= *(void *)(a4 + 8))
    {
      unsigned int v12 = a3 - 2;
      if (a3 >= 2)
      {
        while (v5 < *(void *)(a4 + 24 * v12 + 8))
        {
          BOOL v9 = (int)v12-- <= 0;
          if (v9) {
            return result;
          }
        }
        uint64_t v13 = v12 + 1;
        if ((int)v6 > (int)v13)
        {
          do
          {
            uint64_t v14 = a4 + 24 * (v6 - 1);
            uint64_t v15 = a4 + 24 * v6;
            *(_DWORD *)(v15 + 16) = *(_DWORD *)(v14 + 16);
            *(_OWORD *)uint64_t v15 = *(_OWORD *)v14;
            a5[v6] = a5[(v6 - 1)];
            LODWORD(v6) = v6 - 1;
          }
          while ((int)v6 > (int)v13);
          unint64_t v5 = result[1];
        }
        uint64_t v16 = *result;
        uint64_t v17 = a4 + 24 * v13;
        *(_DWORD *)(v17 + 16) = *((_DWORD *)result + 4);
        *(void *)uint64_t v17 = v16;
        *(void *)(v17 + 8) = v5;
        a5[v13] = a2;
      }
    }
    else
    {
      if (a3 >= 2)
      {
        unint64_t v7 = v6;
        int v8 = (_DWORD *)(a4 + 24 * v6 + 16);
        do
        {
          BOOL v9 = v7 > 1;
          uint64_t v10 = a4 + 24 * (v7 - 1);
          *int v8 = *(_DWORD *)(v10 + 16);
          *((_OWORD *)v8 - 1) = *(_OWORD *)v10;
          v8 -= 6;
          a5[v7] = a5[(v7 - 1)];
          --v7;
        }
        while (v9);
        unint64_t v5 = result[1];
      }
      uint64_t v11 = *result;
      *(_DWORD *)(a4 + 16) = *((_DWORD *)result + 4);
      *(void *)a4 = v11;
      *(void *)(a4 + 8) = v5;
      *a5 = a2;
    }
  }
  return result;
}

void *sub_1BBAB67CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10, uint64_t a11)
{
  int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v14 = a2;
  uint64_t v16 = 0;
  uint64_t v17 = *(unsigned __int8 **)(a1 + 2384);
  int v18 = v17[245];
  int v19 = v17[2010];
  int v20 = v17[2011];
  int v21 = *(_DWORD *)(a1 + 2048) - (a8 == 3) - v18;
  if (v21 >= v20) {
    int v22 = v20;
  }
  else {
    int v22 = *(_DWORD *)(a1 + 2048) - (a8 == 3) - v18;
  }
  uint64_t v23 = a9;
  if (v21 <= v19) {
    int v24 = v19;
  }
  else {
    int v24 = v22;
  }
  BOOL v26 = v20 >= (int)a5 || v24 >= (int)a5;
  int v115 = 0;
  long long v114 = xmmword_1BBB6F8F0;
  __int16 v116 = 0;
  int v112 = 0;
  long long v111 = xmmword_1BBB6F8F0;
  __int16 v113 = 0;
  unsigned int v27 = a2 - *((_DWORD *)a4 + 1);
  if ((v27 & 0x80000000) == 0)
  {
    unsigned int v28 = a3 - *((_DWORD *)a4 + 2);
    if ((v28 & 0x80000000) == 0)
    {
      uint64_t v16 = 0;
      unint64_t v29 = *a4;
      if (v27 < v29 && v28 < v29) {
        uint64_t v16 = (__int16 *)(*((void *)a4 + 11)
      }
                        + 2 * ((v27 >> 3) + (v29 >> 3) * (unint64_t)(v28 >> 3)));
    }
  }
  uint64_t v30 = a10;
  int v31 = (unsigned __int8 *)*((void *)a4 + 18);
  unint64_t v99 = **((unsigned __int8 **)a4 + 17);
  int v95 = *(_DWORD *)(a1 + 2424);
  int v97 = *(_DWORD *)(a1 + 2428);
  uint64_t v98 = *((void *)v31 + 4);
  unint64_t v96 = *v31;
  unsigned __int8 v110 = 0;
  int v102 = a5;
  int v101 = a6;
  if (v20 < (int)a5)
  {
    int v94 = 0;
    unint64_t v92 = -1;
    uint64_t v93 = 0;
    if (v26) {
      goto LABEL_57;
    }
  }
  else
  {
    BOOL v107 = v26;
    if (a7 == 1)
    {
      BOOL v32 = 0;
    }
    else
    {
      int v33 = 10 - a7;
      if (a7 >= 10) {
        int v33 = a7 - 10;
      }
      int v34 = 26 - a7;
      if (a7 >= 26) {
        int v34 = a7 - 26;
      }
      if (v33 >= v34) {
        int v33 = v34;
      }
      BOOL v32 = v33 > byte_1BBB7CDED[(int)a5];
    }
    if (a6 >= 1)
    {
      uint64_t v35 = *(void *)(a1 + 2400);
      uint64_t v36 = *(unsigned int *)(a1 + 2432);
      int v37 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, void, void, uint64_t, void))(v35 + 8160);
      uint64_t v38 = *(void *)(v35 + 8168);
      unsigned int v39 = (void *)(v35 + (v38 >> 1));
      if (v38) {
        int v37 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, void, void, uint64_t, void))(*v39 + v37);
      }
      v37(v39, a2, a3, v36, v12, a8, a9, a5, *((void *)v12 + 19));
      if (v32) {
        (*(void (**)(void, void))(*(void *)(a1 + 2376) + 8 * v11 + 1416))(*((void *)v12 + 19), *((void *)v12 + 20));
      }
    }
    int v40 = (unsigned __int8 *)*((void *)v12 + 18);
    uint64_t v41 = **((unsigned __int8 **)v12 + 17);
    uint64_t v42 = (*(uint64_t (**)(void, uint64_t))(**((void **)v40 + 10) + 24))(*((void *)v40 + 10), *((void *)v40 + 11) - *(int *)(a1 + 2424) + (int)v14 + *v40 * ((int)a3 - (uint64_t)*(int *)(a1 + 2428)));
    int v43 = &v12[8 * v32];
    uint64_t v44 = v41;
    sub_1BBA26804(*(void *)(a1 + 2376) + 1424, a7, v11, *((void *)v43 + 19), v41, v42);
    if (a11)
    {
      uint64_t v45 = *(void *)(a1 + 2400);
      uint64_t v46 = *(unsigned __int8 **)(v45 + 376);
      uint64_t v104 = *v46;
      uint64_t v47 = (*(uint64_t (**)(void, void))(**((void **)v46 + 10) + 24))(*((void *)v46 + 10), *((void *)v46 + 11));
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 8144))((1 << v11), (1 << v11), v44, v42, v104, v47);
    }
    uint64_t v48 = **((unsigned __int8 **)v12 + 17);
    uint64_t v49 = *(void *)(*((void *)v12 + 18) + 56)
        + 2
        * (**((unsigned __int8 **)v12 + 18) * ((int)a3 - (uint64_t)*(int *)(a1 + 2428)) - *(int *)(a1 + 2424) + (int)v14);
    uint64_t v50 = *(void *)(a1 + 2400);
    *(_DWORD *)(v50 + 808) = v14;
    *(_DWORD *)(v50 + 812) = a3;
    uint64_t v51 = (v14 - *((_DWORD *)v12 + 1));
    if ((v51 & 0x80000000) != 0
      || (unsigned int v52 = a3 - *((_DWORD *)v12 + 2), (v52 & 0x80000000) != 0)
      || (unint64_t v53 = *v12, v51 >= v53)
      || v52 >= v53)
    {
      uint64_t v54 = v14;
      uint64_t v55 = v42;
      uint64_t v58 = 0;
      *(void *)(v50 + 864) = 0;
    }
    else
    {
      uint64_t v54 = v14;
      uint64_t v55 = v42;
      *(void *)(v50 + 864) = *((void *)v12 + 12)
                             + 16 * ((v51 >> 2) + (v53 >> 2) * (unint64_t)(v52 >> 2));
      uint64_t v56 = v48;
      uint64_t v57 = (*(uint64_t (**)(void, unint64_t))(**((void **)v12 + 3) + 24))(*((void *)v12 + 3), v51 + v12[1] * (unint64_t)v52 + *((void *)v12 + 4));
      uint64_t v48 = v56;
      uint64_t v58 = v57;
    }
    uint64_t v59 = v48;
    sub_1BBAB86E0(a1, v54, a3, v16, v58, v12[1], v55, v44, v55, v44, v49, v48, v102, &v110, 0);
    unsigned int v60 = sub_1BBABAEE4((void *)a1, v54, a3, v12, v55, v44, v49, v59, 1 << v102, &v115);
    int v94 = v115;
    unint64_t v92 = v114
        + v60
        + ((v115 * *(unsigned __int16 *)(*(void *)(a1 + 2408) + 2 * v116 + 8)) >> (8 * (v116 == 0)));
    uint64_t v93 = v114 + v60;
    if (a11)
    {
      BOOL v61 = *(unsigned __int8 **)(*(void *)(a1 + 2400) + 376);
      uint64_t v62 = *v61;
      uint64_t v63 = *((void *)v61 + 7);
      uint64_t v64 = (*(uint64_t (**)(void, void))(**((void **)v61 + 10) + 24))(*((void *)v61 + 10), *((void *)v61 + 11));
      uint64_t v65 = 0;
      char v109 = 0;
      uint64_t v66 = (v54 - *((_DWORD *)v12 + 1));
      LODWORD(v14) = v54;
      if ((v66 & 0x80000000) != 0)
      {
        int v11 = v102;
      }
      else
      {
        unsigned int v67 = a3 - *((_DWORD *)v12 + 2);
        int v11 = v102;
        if ((v67 & 0x80000000) == 0)
        {
          uint64_t v65 = 0;
          unsigned int v68 = *v12;
          if (v66 < v68 && v67 < v68) {
            uint64_t v65 = (*(uint64_t (**)(void, unint64_t))(**((void **)v12 + 3) + 24))(*((void *)v12 + 3), v66 + v12[1] * (unint64_t)v67 + *((void *)v12 + 4));
          }
        }
      }
      sub_1BBAB86E0(a1, v54, a3, v16, v65, v12[1], v64, v62, v64, v62, v63, v62, v11, &v109, 1);
      **(unsigned char **)(*(void *)(*(void *)(a1 + 2400) + 376) + 32) = v109;
      *(void *)a11 = sub_1BBABAEE4((void *)a1, v54, a3, v12, v64, v62, v63, v62, 1 << v102, (_DWORD *)(a11 + 16));
      uint64_t v30 = a10;
      uint64_t v23 = a9;
      a6 = v101;
      if (v107) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v30 = a10;
      uint64_t v23 = a9;
      a6 = v101;
      int v11 = v102;
      LODWORD(v14) = v54;
      if (v107) {
        goto LABEL_57;
      }
    }
  }
  unsigned int v69 = 0;
  int v70 = 1 << (v11 - 1);
  int v106 = v70 + v14;
  unint64_t v108 = v12;
  int v105 = v70 + a3;
  uint64_t v71 = (a6 + 1);
  do
  {
    uint64_t v72 = v23;
    int v73 = sub_1BBA8EDCC(v23, v69, v106 < *(_DWORD *)(*(void *)(a1 + 2400) + 16), v105 < *(_DWORD *)(*(void *)(a1 + 2400) + 20));
    uint64_t result = (void *)sub_1BBAB67CC(a1, ((v69 & 1) << (v11 - 1)) + (int)v14, (v69 >> 1 << (v11 - 1)) + a3, v108, (v11 - 1), v71, a7, a8, v73, &v111, 0);
    uint64_t v23 = v72;
    ++v69;
  }
  while (v69 != 4);
  int v75 = v112;
  uint64_t v76 = *(void *)(a1 + 2408);
  LOBYTE(v11) = v102;
  uint64_t v30 = a10;
  LOBYTE(a6) = v101;
  unsigned int v12 = v108;
  if ((unint64_t)v111
     + ((v112 * *(unsigned __int16 *)(v76 + 2 * v113 + 8)) >> (8 * (v113 == 0))) < v92)
  {
    uint64_t v77 = *(void *)a10 + v111;
    *(void *)a10 = v77;
    int v78 = *(_DWORD *)(a10 + 16) + v75;
    goto LABEL_65;
  }
LABEL_57:
  uint64_t v79 = (char *)(v98 + ((uint64_t)((int)v14 - v95) >> 2) + (int)(v96 >> 2) * (uint64_t)(((int)a3 - v97) >> 2));
  *uint64_t v16 = *v16 & 0xFFF3 | (4 * (a6 & 3));
  unint64_t v80 = *v12;
  if (v80 >> a6 >= 8)
  {
    uint64_t v81 = 0;
    unint64_t v82 = v80 >> 3;
    uint64_t v83 = v80 >> a6 >> 3;
    uint64_t v84 = 2 * v82;
    int v85 = v16;
    do
    {
      int v86 = v85;
      uint64_t v87 = v83;
      do
      {
        *v86++ = *v16;
        --v87;
      }
      while (v87);
      ++v81;
      int v85 = (__int16 *)((char *)v85 + v84);
    }
    while (v81 != v83);
  }
  int v88 = 1 << (v11 - 2);
  int v89 = v110;
  size_t v90 = v88;
  uint64_t v91 = v88;
  do
  {
    --v91;
    uint64_t result = memset(v79, v89, v90);
    v79 += v99 >> 2;
  }
  while (v91);
  uint64_t v76 = *(void *)(a1 + 2408);
  uint64_t v77 = *(void *)v30 + v93;
  *(void *)uint64_t v30 = v77;
  int v78 = *(_DWORD *)(v30 + 16) + v94;
LABEL_65:
  *(_DWORD *)(v30 + 16) = v78;
  *(void *)(v30 + 8) = v77
                       + ((v78 * *(unsigned __int16 *)(v76 + 2 * *(__int16 *)(v30 + 20) + 8)) >> (8 * (*(_WORD *)(v30 + 20) == 0)));
  return result;
}

__n128 sub_1BBAB7060(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, int *a7, int a8)
{
  int v8 = a8;
  int v9 = a6;
  uint64_t v10 = a5;
  int v11 = a4;
  uint64_t v12 = a3;
  uint64_t v15 = *(long long **)(*(void *)(a1 + 2400) + 944);
  long long v16 = v15[10];
  long long v17 = v15[11];
  long long v18 = v15[8];
  *(long long *)((char *)v15 + 360) = v15[9];
  *(long long *)((char *)v15 + 376) = v16;
  *(long long *)((char *)v15 + 392) = v17;
  long long v19 = v15[6];
  long long v20 = v15[7];
  long long v21 = v15[4];
  *(long long *)((char *)v15 + 296) = v15[5];
  *(long long *)((char *)v15 + 312) = v19;
  *(long long *)((char *)v15 + 328) = v20;
  *(long long *)((char *)v15 + 344) = v18;
  long long v22 = *v15;
  *(long long *)((char *)v15 + 232) = v15[1];
  long long v23 = v15[3];
  *(long long *)((char *)v15 + 248) = v15[2];
  *(long long *)((char *)v15 + 264) = v23;
  *(long long *)((char *)v15 + 280) = v21;
  char v48 = 0;
  *((void *)v15 + 51) = *((void *)v15 + 24);
  *(long long *)((char *)v15 + 216) = v22;
  uint64_t v24 = 8 * (*((_DWORD *)v15 + 52) - *((_DWORD *)v15 + 6));
  *((void *)v15 + 4) = 0;
  *((void *)v15 + 1) = 510;
  *((void *)v15 + 2) = v24;
  int v47 = *((_DWORD *)a5 + 5);
  int v25 = *a7;
  if (*a7 == a6) {
    goto LABEL_5;
  }
  int v26 = a7[1];
  if (v26 == a6)
  {
    int v45 = 0;
    int v46 = a8;
    unsigned int v27 = a5;
    uint64_t v28 = a3;
    int v29 = a4;
    goto LABEL_6;
  }
  int v30 = a7[2];
  if (v30 == a6)
  {
LABEL_5:
    int v46 = a8;
    unsigned int v27 = a5;
    uint64_t v28 = a3;
    int v29 = a4;
    int v45 = 1;
LABEL_6:
    sub_1BBA1CA34((unint64_t *)v15, 1, (unsigned char *)v15 + 56);
    sub_1BBA1CB10((unint64_t *)v15, v25 != v9);
    int v11 = v29;
    uint64_t v12 = v28;
    uint64_t v10 = v27;
    int v8 = v46;
    if (v25 != v9) {
      sub_1BBA1CB10((unint64_t *)v15, v45);
    }
    goto LABEL_19;
  }
  if (v25 <= v26)
  {
    int v31 = a7[1];
    int v26 = *a7;
  }
  else
  {
    *a7 = v26;
    a7[1] = v25;
    int v31 = v25;
  }
  if (v26 <= v30)
  {
    int v26 = v30;
  }
  else
  {
    *a7 = v30;
    a7[2] = v26;
  }
  if (v31 > v26)
  {
    a7[1] = v26;
    a7[2] = v31;
  }
  for (uint64_t i = 2; i != -1; --i)
    v9 -= v9 > a7[i];
  sub_1BBA1CA34((unint64_t *)v15, 0, (unsigned char *)v15 + 56);
  sub_1BBA1CC5C((unint64_t *)v15, v9, 5);
LABEL_19:
  int v33 = *(void **)(a1 + 2400);
  if (v8)
  {
    unint64_t v34 = 0;
    uint64_t v35 = (unsigned __int8 *)v33[47];
    v33[102] = *v35;
    v33[109] = *((void *)v35 + 7);
    *(void *)(*(void *)(a1 + 2400) + 896) = *(void *)(*(void *)(*(void *)(a1 + 2400) + 376) + 32);
    unsigned int v36 = a2 - *((_DWORD *)v10 + 1);
    if ((v36 & 0x80000000) == 0)
    {
      unsigned int v37 = v12 - *((_DWORD *)v10 + 2);
      if ((v37 & 0x80000000) == 0)
      {
        unint64_t v34 = 0;
        unsigned int v38 = *v10;
        if (v36 < v38 && v37 < v38) {
          unint64_t v34 = *(void *)(*((void *)v10 + 18) + 8)
        }
              + (v36 >> 2)
              + ((unint64_t)**((unsigned __int8 **)v10 + 18) >> 2) * (v37 >> 2);
      }
    }
    *(void *)(*(void *)(a1 + 2400) + 920) = v34;
  }
  else
  {
    sub_1BBA9595C((uint64_t)v33, a2, v12, v10, 1, 0, 0, 0, 1);
  }
  sub_1BBAB6590(a1, a2, v12, v11, &v47, &v48, 1);
  long long v39 = *(long long *)((char *)v15 + 392);
  v15[10] = *(long long *)((char *)v15 + 376);
  v15[11] = v39;
  *((void *)v15 + 24) = *((void *)v15 + 51);
  long long v40 = *(long long *)((char *)v15 + 328);
  v15[6] = *(long long *)((char *)v15 + 312);
  v15[7] = v40;
  long long v41 = *(long long *)((char *)v15 + 360);
  v15[8] = *(long long *)((char *)v15 + 344);
  v15[9] = v41;
  long long v42 = *(long long *)((char *)v15 + 264);
  v15[2] = *(long long *)((char *)v15 + 248);
  v15[3] = v42;
  long long v43 = *(long long *)((char *)v15 + 296);
  v15[4] = *(long long *)((char *)v15 + 280);
  v15[5] = v43;
  __n128 result = *(__n128 *)((char *)v15 + 232);
  *uint64_t v15 = *(long long *)((char *)v15 + 216);
  v15[1] = (__int128)result;
  return result;
}

unint64_t *sub_1BBAB7384(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  int v10 = a5;
  int v11 = a4;
  uint64_t v12 = a3;
  uint64_t v13 = a1;
  unint64_t v14 = 0;
  v199[2] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(unsigned __int8 **)(a1 + 2384);
  int v16 = v15[2011];
  int v17 = *(_DWORD *)(a1 + 2048) - v15[245];
  if (v17 >= v16) {
    int v18 = v15[2011];
  }
  else {
    int v18 = *(_DWORD *)(a1 + 2048) - v15[245];
  }
  if (v17 <= v15[2010]) {
    int v19 = v15[2010];
  }
  else {
    int v19 = v18;
  }
  int v167 = v19;
  LODWORD(v192) = 0;
  long long v191 = xmmword_1BBB6F8F0;
  WORD2(v192) = 0;
  int v189 = 0;
  long long v188 = xmmword_1BBB6F8F0;
  __int16 v190 = 0;
  unsigned int v20 = a2 - *((_DWORD *)a4 + 1);
  if ((v20 & 0x80000000) == 0)
  {
    unsigned int v21 = a3 - *((_DWORD *)a4 + 2);
    if ((v21 & 0x80000000) == 0)
    {
      unint64_t v14 = 0;
      unint64_t v22 = *a4;
      if (v20 < v22 && v21 < v22) {
        unint64_t v14 = *((void *)a4 + 11) + 2 * ((v20 >> 3) + (v22 >> 3) * (unint64_t)(v21 >> 3));
      }
    }
  }
  uint64_t v170 = (__int16 *)v14;
  uint64_t v23 = a9;
  uint64_t v24 = *(void **)(a1 + 2400);
  int v25 = (long long *)v24[118];
  uint64_t v26 = v15[2009];
  uint64_t v27 = (1 << a5);
  uint64_t v28 = *(void *)(a1 + 2392);
  if (*(unsigned char *)(v28 + 352))
  {
    int v29 = *(unsigned __int8 *)(v28 + 353);
    BOOL v31 = a5 == 2 && v29 == 0;
    BOOL v169 = v31;
  }
  else
  {
    BOOL v169 = 0;
  }
  uint64_t v168 = v26 - a5;
  unsigned int v179 = a3;
  unsigned int v177 = a2;
  uint64_t v171 = (1 << a5);
  int v155 = v16;
  if (v16 >= a5)
  {
    if (a7 == 1)
    {
      BOOL v32 = 0;
    }
    else
    {
      int v33 = 10 - a7;
      if ((int)a7 >= 10) {
        int v33 = a7 - 10;
      }
      int v34 = 26 - a7;
      if ((int)a7 >= 26) {
        int v34 = a7 - 26;
      }
      if (v33 >= v34) {
        int v33 = v34;
      }
      BOOL v32 = v33 > byte_1BBB7CDED[a5];
    }
    uint64_t v35 = (void (*)(void *))v24[1020];
    uint64_t v36 = v24[1021];
    unsigned int v37 = (void *)((char *)v24 + (v36 >> 1));
    uint64_t v156 = a7;
    if (v36) {
      uint64_t v35 = *(void (**)(void *))(*v37 + v35);
    }
    unsigned int v154 = a8;
    v35(v37);
    if (v32) {
      (*(void (**)(void, void))(*(void *)(v13 + 2376) + 8 * v10 + 1416))(*((void *)a4 + 19), *((void *)a4 + 20));
    }
    unsigned int v195 = 0;
    __c[0] = 0;
    v193[0] = &v191;
    v193[1] = &__c[1];
    long long v39 = *(unsigned __int8 **)(*(void *)(v13 + 2400) + 32 * v168 + 216);
    uint64_t v40 = *v39;
    uint64_t v198 = 0;
    v199[0] = v40;
    uint64_t v197 = (*(uint64_t (**)(void, void))(**((void **)v39 + 10) + 24))(*((void *)v39 + 10), *((void *)v39 + 11));
    long long v41 = *(unsigned __int8 **)(*(void *)(v13 + 2400) + 32 * v168 + 216);
    uint64_t v42 = *v41;
    v196[0] = v42;
    std::string __dst = (char *)*((void *)v41 + 7);
    uint64_t v163 = v197;
    uint64_t v194 = __dst;
    uint64_t v164 = v40;
    sub_1BBA26804(*(void *)(v13 + 2376) + 1424, v156, v10, *(void *)&a4[8 * v32 + 152], v40, v197);
    unint64_t v44 = 0;
    uint64_t v45 = *(void *)(v13 + 2400);
    a2 = v177;
    *(_DWORD *)(v45 + 808) = v177;
    *(_DWORD *)(v45 + 812) = v12;
    unsigned int v46 = v177 - *((_DWORD *)a4 + 1);
    int v11 = a4;
    if ((v46 & 0x80000000) == 0)
    {
      unsigned int v47 = v12 - *((_DWORD *)a4 + 2);
      if ((v47 & 0x80000000) == 0)
      {
        unint64_t v44 = 0;
        unint64_t v48 = *a4;
        if (v46 < v48 && v47 < v48) {
          unint64_t v44 = *((void *)a4 + 12) + 16 * ((v46 >> 2) + (v48 >> 2) * (unint64_t)(v47 >> 2));
        }
      }
    }
    *(void *)(v45 + 864) = v44;
    if (v169)
    {
      uint64_t v49 = *(unsigned __int8 **)(v45 + 376);
      uint64_t v50 = *v49;
      v196[1] = v50;
      __src = (char *)*((void *)v49 + 7);
      unsigned int v195 = __src;
      v199[1] = v50;
      uint64_t v198 = (*(uint64_t (**)(void, void))(**((void **)v49 + 10) + 24))(*((void *)v49 + 10), *((void *)v49 + 11));
      LODWORD(v187) = 0;
      *(_OWORD *)&__c[1] = xmmword_1BBB6F8F0;
      WORD2(v187) = 0;
      uint64_t v159 = v198;
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 2400) + 8144))((1 << v10), (1 << v10), v164, v163, v50);
      uint64_t v43 = v50;
      int v11 = a4;
      a2 = v177;
      uint64_t v45 = *(void *)(v13 + 2400);
    }
    else
    {
      uint64_t v159 = 0;
      __src = 0;
    }
    char v176 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = (uint64_t)v25 + 40;
    unint64_t v53 = *(unsigned __int8 **)(v45 + 32 * v168 + 216);
    unint64_t v54 = (unint64_t)*v53 >> 2;
    int v55 = 1;
    uint64_t v166 = a5 - 2;
    size_t v56 = 1 << v166;
    uint64_t v57 = (long long *)((char *)v25 + 216);
    if (!a6) {
      uint64_t v52 = (uint64_t)v25 + 41;
    }
    uint64_t v165 = (unsigned char *)(v52 + 34);
    uint64_t v161 = v43;
    uint64_t v183 = 2 * v43;
    uint64_t v184 = 2 * v42;
    uint64_t v158 = (int)v27;
    uint64_t __len = (uint64_t)(int)v27 >> 2;
    uint64_t __n = 2 * (int)v27;
    __b = (char *)*((void *)v53 + 4);
    while (1)
    {
      int v174 = v55;
      uint64_t v58 = 0;
      uint64_t v59 = (a2 - *((_DWORD *)v11 + 1));
      if ((v59 & 0x80000000) != 0)
      {
        uint64_t v60 = v12;
      }
      else
      {
        uint64_t v60 = v12;
        unsigned int v61 = v12 - *((_DWORD *)v11 + 2);
        if ((v61 & 0x80000000) == 0)
        {
          unsigned int v62 = *v11;
          if (v59 >= v62 || v61 >= v62)
          {
            uint64_t v58 = 0;
          }
          else
          {
            uint64_t v64 = (*(uint64_t (**)(void, unint64_t))(**((void **)v11 + 3) + 24))(*((void *)v11 + 3), v59 + v11[1] * (unint64_t)v61 + *((void *)v11 + 4));
            int v11 = a4;
            a2 = v177;
            uint64_t v58 = v64;
          }
        }
      }
      uint64_t v65 = *(&v197 + v51);
      uint64_t v66 = v199[v51];
      uint64_t v173 = (uint64_t)*(&v194 + v51);
      sub_1BBAB86E0(a1, a2, v60, v170, v58, v11[1], v65, v66, v65, v66, v173, v196[v51], a5, (unsigned char *)__c + v51, v176 & 1);
      if ((v176 & 1) != 0 && !*((unsigned char *)__c + v51)) {
        break;
      }
      uint64_t v67 = 0;
      uint64_t v68 = *(void *)(a1 + 2408);
      unsigned int v69 = a4;
      uint64_t v70 = v177 - *((_DWORD *)a4 + 1);
      if ((v70 & 0x80000000) == 0)
      {
        unsigned int v71 = v60 - *((_DWORD *)a4 + 2);
        if ((v71 & 0x80000000) == 0)
        {
          uint64_t v67 = 0;
          unsigned int v72 = *a4;
          if (v70 < v72 && v71 < v72)
          {
            uint64_t v73 = (*(uint64_t (**)(void, unint64_t, void))(**((void **)a4 + 3) + 24))(*((void *)a4 + 3), v70 + a4[1] * (unint64_t)v71 + *((void *)a4 + 4), 0);
            unsigned int v69 = a4;
            uint64_t v67 = v73;
          }
        }
      }
      unsigned int v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v68 + 8 * v166 + 24))(v171, v171, v67, v69[1], v65, v66);
      uint64_t v75 = v193[v51];
      *(void *)uint64_t v75 = v74;
      int v76 = *((unsigned __int8 *)__c + v51);
      uint64_t v77 = 1 << v166;
      int v78 = __b;
      do
      {
        --v77;
        memset(v78, v76, v56);
        v78 += v54;
      }
      while (v77);
      long long v79 = v25[11];
      *(long long *)((char *)v25 + 376) = v25[10];
      *(long long *)((char *)v25 + 392) = v79;
      *((void *)v25 + 51) = *((void *)v25 + 24);
      long long v80 = v25[7];
      *(long long *)((char *)v25 + 312) = v25[6];
      *(long long *)((char *)v25 + 328) = v80;
      long long v81 = v25[9];
      *(long long *)((char *)v25 + 344) = v25[8];
      *(long long *)((char *)v25 + 360) = v81;
      long long v82 = v25[3];
      *(long long *)((char *)v25 + 248) = v25[2];
      *(long long *)((char *)v25 + 264) = v82;
      long long v83 = v25[5];
      *(long long *)((char *)v25 + 280) = v25[4];
      *(long long *)((char *)v25 + 296) = v83;
      long long v84 = v25[1];
      *uint64_t v57 = *v25;
      *(long long *)((char *)v25 + 232) = v84;
      uint64_t v85 = 8 * (*((_DWORD *)v25 + 52) - *((_DWORD *)v25 + 6));
      *((void *)v25 + 4) = 0;
      *((void *)v25 + 1) = 510;
      *((void *)v25 + 2) = v85;
      if (v167 < a5) {
        sub_1BBA1CA34((unint64_t *)v25, 0, (unsigned char *)v25 - a5 + 76);
      }
      sub_1BBA1CA34((unint64_t *)v25, v76 != 0, v165);
      uint64_t v12 = v179;
      uint64_t v13 = a1;
      if (v76)
      {
        int v86 = a5;
        if (a5 > 3) {
          uint64_t v87 = 0;
        }
        else {
          uint64_t v87 = byte_1BBB7CAA0[(int)v156];
        }
        int v88 = v177;
        size_t v89 = __len;
        uint64_t v90 = *(void *)(a1 + 2400);
        if (*(unsigned char *)(*(void *)(a1 + 2392) + 352) && a5 >= 2)
        {
          uint64_t v91 = *(unsigned __int8 **)(v90 + 32 * v168 + 216);
          unint64_t v92 = (unint64_t)*v91 >> 2;
          uint64_t v93 = (char *)*((void *)v91 + 1);
          uint64_t v94 = __len;
          do
          {
            --v94;
            memset(v93, v51, v89);
            size_t v89 = __len;
            v93 += v92;
          }
          while (v94);
          uint64_t v13 = a1;
          uint64_t v90 = *(void *)(a1 + 2400);
          uint64_t v12 = v179;
          int v88 = v177;
          int v86 = a5;
        }
        *(void *)(v90 + 920) = *(void *)(*(void *)(v90 + 32 * v168 + 216) + 8);
        sub_1BBAB5CFC(v13, v173, v88, v12, v86, v87, 0);
      }
      *(_DWORD *)(v75 + 16) = ((*((_DWORD *)v25 + 4) + 8 * (*((_DWORD *)v25 + 6) - *((_DWORD *)v25 + 52))) << 8)
                            - *((_DWORD *)v25 + 2)
                            + 510;
      long long v95 = *(long long *)((char *)v25 + 264);
      v25[2] = *(long long *)((char *)v25 + 248);
      v25[3] = v95;
      long long v96 = *(long long *)((char *)v25 + 328);
      v25[6] = *(long long *)((char *)v25 + 312);
      v25[7] = v96;
      long long v97 = *(long long *)((char *)v25 + 296);
      v25[4] = *(long long *)((char *)v25 + 280);
      v25[5] = v97;
      *((void *)v25 + 24) = *((void *)v25 + 51);
      long long v98 = *(long long *)((char *)v25 + 392);
      v25[10] = *(long long *)((char *)v25 + 376);
      v25[11] = v98;
      long long v99 = *(long long *)((char *)v25 + 360);
      v25[8] = *(long long *)((char *)v25 + 344);
      v25[9] = v99;
      long long v100 = *(long long *)((char *)v25 + 232);
      *int v25 = *v57;
      v25[1] = v100;
      *(void *)(v75 + 8) = *(void *)v75
                           + ((*(_DWORD *)(v75 + 16)
                             * *(unsigned __int16 *)(*(void *)(v13 + 2408)
                                                                 + 2 * *(__int16 *)(v75 + 20)
                                                                 + 8)) >> (8 * (*(_WORD *)(v75 + 20) == 0)));
      if ((v176 & 1) == 0) {
        goto LABEL_87;
      }
      if (*((void *)&v191 + 1) <= *(void *)&__c[5]) {
        goto LABEL_82;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 2400) + 8144))(v171, v171, v161, v159, v164, v163);
      long long v191 = *(_OWORD *)&__c[1];
      uint64_t v192 = v187;
      uint64_t v101 = v158;
      int v102 = __dst;
      uint64_t v103 = __src;
      do
      {
        --v101;
        memcpy(v102, v103, __n);
        v102 += v184;
        v103 += v183;
      }
      while (v101);
LABEL_87:
      char v176 = 1;
      uint64_t v51 = 1;
      int v55 = 0;
      a2 = v177;
      int v11 = a4;
      if ((v174 & v169 & 1) == 0)
      {
        uint64_t v27 = v171;
        int v10 = a5;
        a8 = v154;
        a7 = v156;
        uint64_t v23 = a9;
        goto LABEL_89;
      }
    }
    *(void *)&__c[5] = -1;
    uint64_t v13 = a1;
LABEL_82:
    if (a5 >= 2)
    {
      uint64_t v104 = *(unsigned __int8 **)(*(void *)(v13 + 2400) + 32 * v168 + 216);
      unint64_t v105 = (unint64_t)*v104 >> 2;
      int v106 = (char *)*((void *)v104 + 1);
      uint64_t v107 = __len;
      do
      {
        --v107;
        bzero(v106, __len);
        v106 += v105;
      }
      while (v107);
    }
    int v108 = LOBYTE(__c[0]);
    uint64_t v109 = 1 << v166;
    unsigned __int8 v110 = __b;
    uint64_t v12 = v179;
    do
    {
      --v109;
      memset(v110, v108, v56);
      v110 += v54;
    }
    while (v109);
    goto LABEL_87;
  }
LABEL_89:
  if (v167 >= v10) {
    goto LABEL_96;
  }
  unsigned int v111 = 0;
  uint64_t v112 = (v10 - 1);
  int v113 = 1 << (v10 - 1);
  int v114 = v113 + a2;
  int v185 = v113 + v12;
  int v115 = a2;
  __int16 v116 = v11;
  uint64_t v117 = a8;
  uint64_t v118 = a7;
  do
  {
    int v119 = sub_1BBA8EDCC(v23, v111, v114 < *(_DWORD *)(*(void *)(a1 + 2400) + 16), v185 < *(_DWORD *)(*(void *)(a1 + 2400) + 20));
    uint64_t v13 = a1;
    LODWORD(v12) = v179;
    __n128 result = (unint64_t *)sub_1BBAB7384(a1, ((v111 & 1) << v112) + v115, (v111 >> 1 << v112) + v179, v116, v112, (a6 + 1), v118, v117, v119, &v188);
    uint64_t v23 = a9;
    ++v111;
  }
  while (v111 != 4);
  long long v121 = v25[10];
  long long v122 = v25[11];
  long long v123 = v25[8];
  *(long long *)((char *)v25 + 360) = v25[9];
  *(long long *)((char *)v25 + 376) = v121;
  *(long long *)((char *)v25 + 392) = v122;
  long long v124 = v25[6];
  long long v125 = v25[7];
  long long v126 = v25[4];
  *(long long *)((char *)v25 + 296) = v25[5];
  *(long long *)((char *)v25 + 312) = v124;
  *(long long *)((char *)v25 + 328) = v125;
  *(long long *)((char *)v25 + 344) = v123;
  long long v127 = *v25;
  *(long long *)((char *)v25 + 232) = v25[1];
  long long v128 = v25[3];
  *(long long *)((char *)v25 + 248) = v25[2];
  *(long long *)((char *)v25 + 264) = v128;
  *(long long *)((char *)v25 + 280) = v126;
  *((void *)v25 + 51) = *((void *)v25 + 24);
  *(long long *)((char *)v25 + 216) = v127;
  uint64_t v129 = *((void *)v25 + 26);
  uint64_t v130 = *((void *)v25 + 3);
  uint64_t v131 = 8 * ((int)v129 - (int)v130);
  *((void *)v25 + 4) = 0;
  int v132 = 510;
  *((void *)v25 + 1) = 510;
  *((void *)v25 + 2) = v131;
  if (v155 >= a5)
  {
    __n128 result = sub_1BBA1CA34((unint64_t *)v25, 1, (unsigned char *)v25 - a5 + 76);
    uint64_t v129 = *((void *)v25 + 26);
    uint64_t v131 = *((void *)v25 + 2);
    uint64_t v130 = *((void *)v25 + 3);
    int v132 = *((_DWORD *)v25 + 2);
  }
  int v11 = a4;
  uint64_t v27 = v171;
  int v133 = v189 - v132 + ((v131 + 8 * (v130 - v129)) << 8) + 510;
  long long v134 = *(long long *)((char *)v25 + 264);
  v25[2] = *(long long *)((char *)v25 + 248);
  v25[3] = v134;
  long long v135 = *(long long *)((char *)v25 + 328);
  v25[6] = *(long long *)((char *)v25 + 312);
  v25[7] = v135;
  long long v136 = *(long long *)((char *)v25 + 296);
  v25[4] = *(long long *)((char *)v25 + 280);
  v25[5] = v136;
  *((void *)v25 + 24) = *((void *)v25 + 51);
  long long v137 = *(long long *)((char *)v25 + 392);
  v25[10] = *(long long *)((char *)v25 + 376);
  v25[11] = v137;
  long long v138 = *(long long *)((char *)v25 + 360);
  v25[8] = *(long long *)((char *)v25 + 344);
  v25[9] = v138;
  long long v139 = *(long long *)((char *)v25 + 232);
  *int v25 = *(long long *)((char *)v25 + 216);
  v25[1] = v139;
  uint64_t v140 = *(void *)(a1 + 2408);
  if ((unint64_t)v188
     + ((v133 * *(unsigned __int16 *)(v140 + 2 * v190 + 8)) >> (8 * (v190 == 0))) >= *((void *)&v191 + 1))
  {
LABEL_96:
    *uint64_t v170 = *v170 & 0xFFF3 | (4 * (a6 & 3));
    unint64_t v143 = *v11;
    if (v143 >> a6 >= 8)
    {
      uint64_t v144 = 0;
      unint64_t v145 = v143 >> 3;
      uint64_t v146 = v143 >> a6 >> 3;
      uint64_t v147 = 2 * v145;
      int v148 = v170;
      do
      {
        int v149 = v148;
        uint64_t v150 = v146;
        do
        {
          *v149++ = *v170;
          --v150;
        }
        while (v150);
        ++v144;
        int v148 = (__int16 *)((char *)v148 + v147);
      }
      while (v144 != v146);
    }
    uint64_t v151 = *(void *)(v13 + 2408);
    uint64_t v152 = *(void *)a10 + v191;
    *(void *)a10 = v152;
    int v153 = *(_DWORD *)(a10 + 16) + v192;
    *(_DWORD *)(a10 + 16) = v153;
    *(void *)(a10 + 8) = v152
                         + ((v153 * *(unsigned __int16 *)(v151 + 2 * *(__int16 *)(a10 + 20) + 8)) >> (8 * (*(_WORD *)(a10 + 20) == 0)));
    return (unint64_t *)sub_1BBA8E4A4(*(void *)(v13 + 2400), *((unsigned __int8 **)v11 + 18), *(unsigned __int8 **)(*(void *)(v13 + 2400) + 32 * (int)v168 + 216), v177 - *(_DWORD *)(v13 + 2424), (int)v12 - *(_DWORD *)(v13 + 2428), 0, 0, v27);
  }
  else
  {
    uint64_t v141 = *(void *)a10 + v188;
    *(void *)a10 = v141;
    int v142 = *(_DWORD *)(a10 + 16) + v133;
    *(_DWORD *)(a10 + 16) = v142;
    *(void *)(a10 + 8) = v141
                         + ((v142 * *(unsigned __int16 *)(v140 + 2 * *(__int16 *)(a10 + 20) + 8)) >> (8 * (*(_WORD *)(a10 + 20) == 0)));
  }
  return result;
}

uint64_t sub_1BBAB8040(uint64_t result, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v10 = a8;
  int v11 = a4;
  uint64_t v14 = result;
  uint64_t v15 = 0;
  uint64_t v16 = a10;
  uint64_t v17 = a9;
  int v18 = *(unsigned __int8 **)(result + 2384);
  int v19 = v18[2010];
  int v20 = v18[2011];
  int v21 = *(_DWORD *)(result + 2048) - (a8 == 3) - v18[245];
  if (v21 >= v20) {
    int v22 = v18[2011];
  }
  else {
    int v22 = *(_DWORD *)(result + 2048) - (a8 == 3) - v18[245];
  }
  if (v21 <= v19) {
    int v23 = v19;
  }
  else {
    int v23 = v22;
  }
  uint64_t v24 = *(__int16 *)(a10 + 20);
  int v95 = 0;
  long long v94 = xmmword_1BBB6F8F0;
  uint64_t v81 = v24;
  __int16 v96 = v24;
  unsigned int v25 = a2 - *((_DWORD *)a4 + 1);
  if ((v25 & 0x80000000) == 0)
  {
    unsigned int v26 = a3 - *((_DWORD *)a4 + 2);
    if ((v26 & 0x80000000) == 0)
    {
      uint64_t v15 = 0;
      unint64_t v27 = *a4;
      if (v25 < v27 && v26 < v27) {
        uint64_t v15 = (__int16 *)(*((void *)a4 + 11)
      }
                        + 2 * ((v25 >> 3) + (v27 >> 3) * (unint64_t)(v26 >> 3)));
    }
  }
  unsigned __int8 v93 = 0;
  int v82 = v23;
  int v84 = a6;
  if (v23 >= a6)
  {
    int v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = -1;
  }
  else
  {
    int v77 = v20;
    unsigned int v28 = 0;
    uint64_t v29 = (a6 - 1);
    int v30 = 1 << (a6 - 1);
    int v89 = v30 + a2;
    signed int v87 = v30 + a3;
    unsigned int v91 = a8;
    BOOL v85 = a5 == 0;
    do
    {
      uint64_t v31 = v17;
      int v32 = sub_1BBA8EDCC(v17, v28, v89 < *(_DWORD *)(*(void *)(v14 + 2400) + 16), v87 < *(_DWORD *)(*(void *)(v14 + 2400) + 20));
      __n128 result = sub_1BBAB8040(v14, ((v28 & 1) << v29) + (int)a2, (v28 >> 1 << v29) + a3, a4, v85, v29, (a7 + 1), v91, v32, &v94);
      uint64_t v17 = v31;
      ++v28;
    }
    while (v28 != 4);
    a6 = v84;
    int v20 = v77;
    if (v77 < v84) {
      int v33 = v95;
    }
    else {
      int v33 = v95 + 1;
    }
    uint64_t v34 = v94;
    uint64_t v35 = v94
        + ((v33 * *(unsigned __int16 *)(*(void *)(v14 + 2408) + 2 * v96 + 8)) >> (8 * (v96 == 0)));
    int v11 = a4;
    uint64_t v10 = v91;
  }
  if (v20 < a6) {
    goto LABEL_60;
  }
  uint64_t v36 = (a2 - *((_DWORD *)v11 + 1));
  unsigned int v37 = a3 - *((_DWORD *)v11 + 2);
  int v90 = v33;
  unint64_t v86 = v35;
  uint64_t v88 = v34;
  if ((v36 & 0x80000000) != 0
    || (v37 & 0x80000000) != 0
    || (unint64_t v38 = *v11, v36 >= v38)
    || v37 >= v38)
  {
    long long v39 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = v11[1];
    unsigned int v40 = **((unsigned __int8 **)v11 + 17);
  }
  else
  {
    long long v39 = (unsigned __int8 *)(*((void *)v11 + 12)
                            + 16 * ((v36 >> 2) + (v38 >> 2) * (unint64_t)(v37 >> 2)));
    unsigned int v40 = **((unsigned __int8 **)v11 + 17);
    uint64_t v76 = v11[1];
    uint64_t v41 = v17;
    uint64_t v42 = (*(uint64_t (**)(void, uint64_t))(**((void **)v11 + 3) + 24))(*((void *)v11 + 3), v36 + v76 * v37 + *((void *)v11 + 4));
    uint64_t v17 = v41;
    a6 = v84;
    uint64_t v75 = v42;
    LODWORD(v36) = a2 - *((_DWORD *)v11 + 1);
    unsigned int v37 = a3 - *((_DWORD *)v11 + 2);
  }
  uint64_t v43 = 0;
  unsigned int v79 = a3;
  if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
  {
    uint64_t v43 = 0;
    unsigned int v44 = *v11;
    if (v36 < v44 && v37 < v44)
    {
      uint64_t v45 = *(unsigned __int8 **)&v11[8 * a5 + 136];
      uint64_t v46 = v17;
      uint64_t v43 = (*(uint64_t (**)(void, unint64_t))(**((void **)v45 + 10) + 24))(*((void *)v45 + 10), *((void *)v45 + 11) + v36 + *v45 * (unint64_t)v37);
      uint64_t v17 = v46;
      a6 = v84;
      LODWORD(v36) = a2 - *((_DWORD *)v11 + 1);
      unsigned int v37 = a3 - *((_DWORD *)v11 + 2);
    }
  }
  unint64_t v47 = 0;
  if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
  {
    unint64_t v47 = 0;
    unsigned int v48 = *v11;
    if (v36 < v48 && v37 < v48)
    {
      uint64_t v49 = *(unsigned __int8 **)&v11[8 * a5 + 136];
      unint64_t v47 = *((void *)v49 + 7) + 2 * (v36 + *v49 * (unint64_t)v37);
    }
  }
  uint64_t v50 = (1 << a6);
  uint64_t v51 = v40;
  unsigned int v52 = *v39;
  if (v52 == 1)
  {
    BOOL v53 = 0;
  }
  else
  {
    signed int v54 = 10 - v52;
    if (v52 >= 0xA) {
      signed int v54 = v52 - 10;
    }
    int v55 = 26 - v52;
    BOOL v56 = v52 >= 0x1A;
    int v57 = v52 - 26;
    if (!v56) {
      int v57 = v55;
    }
    if (v54 < v57) {
      int v57 = v54;
    }
    BOOL v53 = v57 > byte_1BBB7CDED[a6];
  }
  uint64_t v78 = v47;
  uint64_t v58 = v43;
  if (a7 >= 1)
  {
    uint64_t v59 = *(void *)(v14 + 2400);
    uint64_t v60 = *(void (**)(void *, uint64_t, void, void, unsigned __int8 *, uint64_t, uint64_t, void, void))(v59 + 8160);
    uint64_t v61 = *(void *)(v59 + 8168);
    unsigned int v62 = (void *)(v59 + (v61 >> 1));
    if (v61) {
      uint64_t v60 = *(void (**)(void *, uint64_t, void, void, unsigned __int8 *, uint64_t, uint64_t, void, void))(*v62 + v60);
    }
    v60(v62, a2, v79, *(unsigned int *)(v14 + 2432), v11, v10, v17, v84, *((void *)v11 + 19));
    a6 = v84;
    if (v53)
    {
      (*(void (**)(void, void))(*(void *)(v14 + 2376) + 8 * v84 + 1416))(*((void *)v11 + 19), *((void *)v11 + 20));
      a6 = v84;
    }
  }
  sub_1BBA26804(*(void *)(v14 + 2376) + 1424, *v39, a6, *(void *)&a4[8 * v53 + 152], v51, v58);
  unsigned int v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 2408)
                                                                                        + 8 * v84
                                                                                        + 88))(v50, v50, v75, v76, v58, v51);
  unsigned int v64 = v63;
  unsigned int v65 = *(unsigned __int16 *)(*(void *)(v14 + 2408) + 2 * v81 + 8);
  if (v82 >= v84) {
    unsigned int v65 = 0;
  }
  unint64_t v66 = (v65 >> (8 * (v81 == 0))) + (unint64_t)v63;
  __n128 result = sub_1BBAB86E0(v14, a2, v79, v15, v75, v76, v58, v51, v58, v51, v78, v51, v84, &v93, 0);
  uint64_t v34 = v88;
  BOOL v56 = v66 >= v86;
  int v11 = a4;
  int v33 = v90;
  uint64_t v16 = a10;
  if (v56)
  {
LABEL_60:
    *(int8x16_t *)(v11 + 136) = vextq_s8(*(int8x16_t *)(v11 + 136), *(int8x16_t *)(v11 + 136), 8uLL);
    uint64_t v72 = *(void *)(v14 + 2408);
    uint64_t v73 = *(void *)v16 + v34;
    *(void *)uint64_t v16 = v73;
    int v74 = *(_DWORD *)(v16 + 16) + v33;
  }
  else
  {
    *uint64_t v15 = *v15 & 0xFFF3 | (4 * (a7 & 3));
    if ((int)v50 >= 8)
    {
      uint64_t v67 = 0;
      unint64_t v68 = 2 * ((unint64_t)*a4 >> 3);
      unsigned int v69 = v15;
      do
      {
        uint64_t v70 = v69;
        uint64_t v71 = v50 >> 3;
        do
        {
          *v70++ = *v15;
          --v71;
        }
        while (v71);
        ++v67;
        unsigned int v69 = (__int16 *)((char *)v69 + v68);
      }
      while (v67 != v50 >> 3);
    }
    __n128 result = (uint64_t)sub_1BBAE40E4(a4, a2, v79, (int)v50 >> 2, 0, v93, a5);
    uint64_t v72 = *(void *)(v14 + 2408);
    uint64_t v73 = *(void *)a10 + v64;
    *(void *)a10 = v73;
    int v74 = *(_DWORD *)(a10 + 16) + (v82 < v84);
  }
  *(_DWORD *)(v16 + 16) = v74;
  *(void *)(v16 + 8) = v73
                       + ((v74 * *(unsigned __int16 *)(v72 + 2 * *(__int16 *)(v16 + 20) + 8)) >> (8 * (*(_WORD *)(v16 + 20) == 0)));
  return result;
}

uint64_t sub_1BBAB86E0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned char *a14, char a15)
{
  LODWORD(v20) = 1 << a13;
  BOOL v22 = a13 == 2 && *(_DWORD *)(a1 + 2052) == 1;
  BOOL v29 = v22;
  sub_1BBA20CF0(*(void *)(a1 + 2376) + 1840, a5, a6, a7, a8, a1, a13, v22, a15);
  __int16 v23 = *a4;
  if (*(unsigned char *)(*(void *)(a1 + 2392) + 128))
  {
    uint64_t v20 = (int)v20;
    uint64_t result = sub_1BBAB8904(a1, a2, a3, (v23 >> 9), a1, (int)v20, a11, a12, a13, *(unsigned __int8 *)(*(void *)(a1 + 2384) + 2009) - ((v23 & 3) + a13), 0);
    *a14 = result;
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t v20 = (int)v20;
    uint64_t result = sub_1BBABA04C(a1, a2, a3, (v23 >> 9), a1, (int)v20, a11, a12, a13, 0, 1);
    *a14 = result;
    if ((result & 1) == 0) {
      return result;
    }
  }
  sub_1BBABA4BC(a1, *a4, a11, a12, a1, v20, a13, 0);
  uint64_t v25 = *(void *)(a1 + 2376);
  if (a15)
  {
    uint64_t v26 = v25 + 8 * a13;
    (*(void (**)(uint64_t))(v25 + 1984))(a1);
    unint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 1976);
    return v27(a9, a10, a1);
  }
  else
  {
    if (v29) {
      unsigned int v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 1848);
    }
    else {
      unsigned int v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8 * a13 + 1840);
    }
    return v28(a9, a10, a1, 1024);
  }
}

BOOL sub_1BBAB8904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, BOOL a10, int a11)
{
  uint64_t v11 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v318 = v19;
  uint64_t v320 = v20;
  int v21 = v14;
  int v22 = a9;
  v365[2418] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = 1;
  int v361 = 0;
  if (((v13 | v12) & 0x80000000) == 0
    && ((uint64_t v24 = *(void *)(v11 + 2400),
         int v25 = v12 - *(_DWORD *)(v24 + 808),
         int v26 = v13 - *(_DWORD *)(v24 + 812),
         int v27 = *(unsigned __int8 *)(v24 + 804),
         v25 < v27)
      ? (BOOL v28 = v26 < v27)
      : (BOOL v28 = 0),
        v28))
  {
    BOOL v29 = (unsigned __int8 *)(*(void *)(v24 + 864) + 16 * (*(void *)(v24 + 840) * ((uint64_t)v26 >> 2) + (v25 >> 2)));
  }
  else
  {
    BOOL v29 = 0;
  }
  v363[0] = 0;
  int v362 = 0;
  uint64_t v347 = v11;
  sub_1BBABA59C(v11, v29, v14, a9, a11, (int *)v363 + 1, &v362, v363, &v361, 1);
  LODWORD(v30) = a9 - 2;
  if (a9 >= 2)
  {
    int v31 = 1 << a9;
    int v32 = 4 * v361;
    if (a9 != 3) {
      int v32 = 0;
    }
    int v33 = (char *)*(&off_1E6248580 + v30) + v32;
    uint64_t v34 = &byte_1BBB83EF0[64 * (uint64_t)v361 + 16 * v30];
    int v35 = v31 << a9;
    int v333 = v34;
    long long v312 = v33;
    if (v31 << a9 <= 15)
    {
      int v175 = 0;
      *(_DWORD *)long long v311 = 1 << v30;
      int v176 = -1;
      LODWORD(v29) = -1;
      uint64_t v52 = v320;
      uint64_t v53 = v347;
      goto LABEL_161;
    }
    int v296 = v29;
    int v299 = v21;
    uint64_t v300 = v18;
    uint64_t v301 = v16;
    LODWORD(v36) = 0;
    *(_DWORD *)&v311[8] = 0;
    uint64_t v37 = SHIDWORD(v363[0]) % 6;
    double v38 = dbl_1BBB7CBE0[24 * (SLODWORD(v363[0]) > 0) + 6 * v30 + v37];
    char v39 = v362;
    int v40 = 1 << (v362 - 1);
    int v298 = v31 << a9;
    uint64_t v41 = v35 >> 4;
    LODWORD(v29) = -1;
    int v309 = ~(-1 << v30);
    *(void *)long long v311 = (1 << v30);
    int v307 = *(_DWORD *)v311 - 1;
    int v308 = 4 << a9;
    int v42 = v31 - 1;
    int v297 = v361;
    if (v361) {
      int v43 = 15;
    }
    else {
      int v43 = 9;
    }
    if (a9 == 3) {
      int v44 = 9;
    }
    else {
      int v44 = 12;
    }
    int v304 = v44;
    int v303 = ~(-1 << a9);
    if (a9 != 3) {
      int v43 = 21;
    }
    int v302 = v43;
    if (a11 <= 0) {
      int v45 = 0;
    }
    else {
      int v45 = 27;
    }
    char v305 = v362 - 8;
    int v306 = v45;
    int v46 = word_1BBB7CEB4[v37];
    int v47 = v40 ^ 0x7FFFFFFF;
    double v48 = 0.0;
    int v332 = 1;
    double v49 = 0.0;
    LODWORD(v50) = -1;
    uint64_t v51 = v318;
    uint64_t v52 = v320;
    uint64_t v53 = v347;
    int v323 = 1 << (v362 - 1);
    int v324 = v31 - 1;
    char v343 = v362;
    int v321 = v40 ^ 0x7FFFFFFF;
    int v322 = v46;
LABEL_24:
    uint64_t v54 = 16 * v41 - 16;
    double v55 = v48;
LABEL_25:
    int v356 = 0;
    uint64_t v56 = 0;
    int v325 = v41;
    uint64_t v326 = 0;
    int v57 = 0;
    unsigned int v58 = v33[--v41];
    int v59 = v58 >> v30;
    if ((int)(v307 & v58) >= v307) {
      int v60 = 0;
    }
    else {
      int v60 = (*(void *)&v311[4] >> v58) & 2;
    }
    uint64_t v61 = (*(void *)&v311[4] >> (v311[0] + v58)) & 1;
    if (v59 >= v307) {
      LODWORD(v61) = 0;
    }
    if (v41) {
      BOOL v62 = a11 <= 0;
    }
    else {
      BOOL v62 = 0;
    }
    uint64_t v63 = v54 & 0xFFFFFFF0;
    char v310 = v33[v41];
    int v64 = v59 * v308 + 4 * (v58 & v309);
    int v313 = v36;
    uint64_t v314 = v60 | v61;
    if (v62) {
      int v65 = 2;
    }
    else {
      int v65 = 0;
    }
    unsigned int v350 = v65 | (v332 == 0);
    uint64_t v36 = (int)v36;
    double v66 = 0.0;
    int v67 = 1;
    uint64_t v68 = 15;
    double v69 = 0.0;
    double v70 = 0.0;
    int v332 = 1;
    uint64_t v330 = v41;
    int v329 = v64;
    uint64_t v327 = v54 & 0xFFFFFFF0;
    uint64_t v328 = v54;
    while (2)
    {
      int v353 = v67;
      int v331 = v57;
      uint64_t v71 = v68;
      uint64_t v340 = v36;
      while (1)
      {
        uint64_t v72 = v34[v71];
        uint64_t v73 = v72 + v64;
        int v74 = (unsigned __int8 *)(v63 + v71);
        int v75 = *(__int16 *)(v52 + 2 * (((int)v73 >> v22) * v51 + (int)(v73 & v42)));
        int v76 = v75 >= 0 ? *(__int16 *)(v52 + 2 * (((int)v73 >> v22) * v51 + (int)(v73 & v42))) : -v75;
        int v77 = v76 * v46;
        int v78 = v77 >= v47 ? v47 : v77;
        int v79 = v77 ? v78 : 0;
        int v80 = (v79 + v40) >> v39;
        int v81 = (__int16)v80;
        double v82 = v38 * ((double)v79 * (double)v79);
        double v49 = v49 + v82;
        *((_WORD *)&v363[1] + v73) = v80;
        BOOL v83 = (__int16)v80 > 0;
        BOOL v84 = (int)v29 < 0;
        uint64_t v50 = v83 && v84 ? v41 : v50;
        BOOL v29 = v83 && v84 ? (unsigned __int8 *)v74 : (unsigned __int8 *)v29;
        if ((v29 & 0x80000000) == 0) {
          break;
        }
        double v55 = v82 + v55;
        if (--v71 == -1)
        {
          if (!HIDWORD(v326))
          {
            v54 -= 16;
            LOBYTE(v30) = a9 - 2;
            int v33 = v312;
            if (v325 > 1) {
              goto LABEL_25;
            }
            goto LABEL_159;
          }
LABEL_137:
          LOBYTE(v30) = a9 - 2;
          int v33 = v312;
LABEL_138:
          BOOL v163 = (int)v29 >= 0;
          *(void *)&v311[4] |= 1 << v310;
          double v48 = v55;
          goto LABEL_139;
        }
      }
      if (v22 == 2)
      {
        int v85 = byte_1BBB7CE25[v73 + 64];
      }
      else if ((int)v73 < 1)
      {
        int v85 = 0;
      }
      else
      {
        int v86 = byte_1BBB7CE25[16 * v314 + (v72 & 3 | (4 * ((v73 >> v22) & 3)))];
        if (a11)
        {
          int v85 = v304 + v86;
        }
        else
        {
          if ((v73 >> v22 >> 2) + ((v73 & v303) >> 2)) {
            v86 += 3;
          }
          int v85 = v86 + v302;
        }
      }
      int v348 = (unsigned __int16)v75 >> 15;
      int v87 = v80 << 16;
      int v345 = v332 + 4 * v350;
      unsigned int v88 = v85 + v306;
      int v89 = &v360[v36];
      v89[1024] = v82;
      int v334 = (uint64_t *)(v89 + 2048);
      int v90 = *(long long **)(*(void *)(v53 + 2400) + 944);
      v89[2048] = 0.0;
      BOOL v91 = v80 << 16 > 0x20000 || v74 == v29;
      unsigned int v315 = v88;
      int v319 = v80 << 16;
      if (v91)
      {
        uint64_t v339 = 0;
        v360[v36] = 1.79769313e308;
        double v92 = 1.79769313e308;
      }
      else
      {
        unsigned int v336 = v56;
        long long v93 = v90[10];
        long long v94 = v90[11];
        long long v95 = v90[8];
        *(long long *)((char *)v90 + 360) = v90[9];
        *(long long *)((char *)v90 + 376) = v93;
        *(long long *)((char *)v90 + 392) = v94;
        long long v96 = v90[6];
        long long v97 = v90[7];
        long long v98 = v90[4];
        *(long long *)((char *)v90 + 296) = v90[5];
        *(long long *)((char *)v90 + 312) = v96;
        *(long long *)((char *)v90 + 328) = v97;
        *(long long *)((char *)v90 + 344) = v95;
        long long v99 = *v90;
        *(long long *)((char *)v90 + 232) = v90[1];
        long long v100 = v90[3];
        *(long long *)((char *)v90 + 248) = v90[2];
        *(long long *)((char *)v90 + 264) = v100;
        *(long long *)((char *)v90 + 280) = v98;
        int v101 = *((_DWORD *)v90 + 52) - *((_DWORD *)v90 + 6);
        *((void *)v90 + 51) = *((void *)v90 + 24);
        *(long long *)((char *)v90 + 216) = v99;
        *((void *)v90 + 4) = 0;
        *((void *)v90 + 1) = 510;
        *((void *)v90 + 2) = 8 * v101;
        sub_1BBA1CA34((unint64_t *)v90, 0, (unsigned char *)v90 + v88 + 123);
        uint64_t v53 = v347;
        uint64_t v102 = *(void *)(v347 + 2408);
        int v103 = ((*((_DWORD *)v90 + 4) + 8 * (*((_DWORD *)v90 + 6) - *((_DWORD *)v90 + 52))) << 8)
             - *((_DWORD *)v90 + 2)
             + 510;
        int v104 = *(unsigned __int16 *)(v102 + 8);
        if (a11) {
          unsigned int v105 = ((v104 * v103) << 15) / *(unsigned __int16 *)(v102 + 18);
        }
        else {
          unsigned int v105 = (v104 * v103) << 7;
        }
        char v39 = v343;
        uint64_t v106 = v340;
        uint64_t v56 = v336;
        int v87 = v319;
        uint64_t v339 = v105;
        *int v334 = v105;
        long long v107 = *(long long *)((char *)v90 + 392);
        v90[10] = *(long long *)((char *)v90 + 376);
        v90[11] = v107;
        *((void *)v90 + 24) = *((void *)v90 + 51);
        long long v108 = *(long long *)((char *)v90 + 328);
        v90[6] = *(long long *)((char *)v90 + 312);
        v90[7] = v108;
        long long v109 = *(long long *)((char *)v90 + 360);
        v90[8] = *(long long *)((char *)v90 + 344);
        v90[9] = v109;
        long long v110 = *(long long *)((char *)v90 + 264);
        v90[2] = *(long long *)((char *)v90 + 248);
        v90[3] = v110;
        long long v111 = *(long long *)((char *)v90 + 296);
        v90[4] = *(long long *)((char *)v90 + 280);
        v90[5] = v111;
        long long v112 = *(long long *)((char *)v90 + 232);
        *int v90 = *(long long *)((char *)v90 + 216);
        v90[1] = v112;
        double v92 = v82 + (double)v105;
        v360[v340] = v92;
        uint64_t v34 = v333;
        int v40 = v323;
        int v42 = v324;
        uint64_t v41 = v330;
        int v47 = v321;
        int v46 = v322;
        int v64 = v329;
        uint64_t v63 = v327;
        uint64_t v54 = v328;
        if (!v319)
        {
          __int16 v128 = 0;
          goto LABEL_94;
        }
        unsigned int v88 = v315;
      }
      if (v74 == v29)
      {
        double v316 = v70;
        uint64_t v113 = 0;
      }
      else
      {
        uint64_t v114 = v56;
        long long v115 = v90[10];
        long long v116 = v90[11];
        long long v117 = v90[8];
        *(long long *)((char *)v90 + 360) = v90[9];
        *(long long *)((char *)v90 + 376) = v115;
        *(long long *)((char *)v90 + 392) = v116;
        long long v118 = v90[6];
        long long v119 = v90[7];
        long long v120 = v90[4];
        *(long long *)((char *)v90 + 296) = v90[5];
        *(long long *)((char *)v90 + 312) = v118;
        *(long long *)((char *)v90 + 328) = v119;
        *(long long *)((char *)v90 + 344) = v117;
        long long v121 = *v90;
        *(long long *)((char *)v90 + 232) = v90[1];
        long long v122 = v90[3];
        *(long long *)((char *)v90 + 248) = v90[2];
        *(long long *)((char *)v90 + 264) = v122;
        *(long long *)((char *)v90 + 280) = v120;
        int v123 = *((_DWORD *)v90 + 52) - *((_DWORD *)v90 + 6);
        *((void *)v90 + 51) = *((void *)v90 + 24);
        *(long long *)((char *)v90 + 216) = v121;
        *((void *)v90 + 4) = 0;
        *((void *)v90 + 1) = 510;
        *((void *)v90 + 2) = 8 * v123;
        sub_1BBA1CA34((unint64_t *)v90, 1, (unsigned char *)v90 + v88 + 123);
        uint64_t v53 = v347;
        uint64_t v124 = *(void *)(v347 + 2408);
        int v125 = ((*((_DWORD *)v90 + 4) + 8 * (*((_DWORD *)v90 + 6) - *((_DWORD *)v90 + 52))) << 8)
             - *((_DWORD *)v90 + 2)
             + 510;
        int v126 = *(unsigned __int16 *)(v124 + 8);
        if (a11) {
          unsigned int v127 = ((v126 * v125) << 15) / *(unsigned __int16 *)(v124 + 18);
        }
        else {
          unsigned int v127 = (v126 * v125) << 7;
        }
        char v39 = v343;
        uint64_t v56 = v114;
        int v87 = v319;
        double v316 = v70;
        long long v129 = *(long long *)((char *)v90 + 392);
        uint64_t v113 = v127;
        v90[10] = *(long long *)((char *)v90 + 376);
        v90[11] = v129;
        *((void *)v90 + 24) = *((void *)v90 + 51);
        long long v130 = *(long long *)((char *)v90 + 328);
        v90[6] = *(long long *)((char *)v90 + 312);
        v90[7] = v130;
        long long v131 = *(long long *)((char *)v90 + 360);
        v90[8] = *(long long *)((char *)v90 + 344);
        v90[9] = v131;
        long long v132 = *(long long *)((char *)v90 + 264);
        v90[2] = *(long long *)((char *)v90 + 248);
        v90[3] = v132;
        long long v133 = *(long long *)((char *)v90 + 296);
        v90[4] = *(long long *)((char *)v90 + 280);
        v90[5] = v133;
        long long v134 = *(long long *)((char *)v90 + 232);
        *int v90 = *(long long *)((char *)v90 + 216);
        v90[1] = v134;
      }
      double v317 = v69;
      if (v87 <= 0x10000) {
        int v135 = 1;
      }
      else {
        int v135 = v81 - 1;
      }
      if (v135 <= v81)
      {
        __int16 v337 = 0;
        do
        {
          double v136 = (double)(v79 - (v81 << v39)) * (double)(v79 - (v81 << v39)) * v38;
          uint64_t v137 = v56;
          sub_1BBABA728(v53, (__int16)v81, v348, v345, v350, v356, v56, v353, a11);
          double v139 = v136 + (double)v138 + (double)v113;
          if (v139 < v92)
          {
            v360[v340] = v139;
            *int v334 = v113;
            uint64_t v339 = v113;
            double v92 = v136 + (double)v138 + (double)v113;
            __int16 v337 = v81;
          }
          BOOL v28 = v81-- <= v135;
          uint64_t v53 = v347;
          char v39 = v343;
          uint64_t v56 = v137;
        }
        while (!v28);
      }
      else
      {
        __int16 v337 = 0;
      }
      uint64_t v51 = v318;
      uint64_t v34 = v333;
      int v40 = v323;
      int v42 = v324;
      uint64_t v41 = v330;
      int v47 = v321;
      int v46 = v322;
      uint64_t v106 = v340;
      int v64 = v329;
      uint64_t v63 = v327;
      uint64_t v54 = v328;
      double v70 = v316;
      double v69 = v317;
      __int16 v128 = v337;
LABEL_94:
      int v140 = v128;
      *((_WORD *)&v363[1] + v73) = v128;
      int v22 = a9;
      if (*(unsigned char *)(*(void *)(v53 + 2392) + 129))
      {
        v365[v106 + 1330] = (v79 - (v128 << v39)) >> v305;
        if (v128)
        {
          uint64_t v141 = v53;
          unsigned int v338 = v56;
          sub_1BBABA728(v53, v128, v348, v345, v350, v356, v56, v353, a11);
          uint64_t v335 = v142;
          sub_1BBABA728(v141, (__int16)(v140 + 1), v348, v345, v350, v356, v338, v353, a11);
          v365[v340 + 306] = v143 - v335;
          uint64_t v144 = v340;
          sub_1BBABA728(v347, (__int16)(v140 - 1), v348, v345, v350, v356, v338, v353, a11);
          uint64_t v146 = v145 - v335;
          uint64_t v147 = v364;
        }
        else
        {
          uint64_t v144 = v106;
          unsigned int v338 = v56;
          sub_1BBABA728(v53, 1, v348, v345, v350, v356, v56, v353, a11);
          uint64_t v147 = v365;
        }
        *(void *)&v147[8 * v144 + 2448] = v146;
        uint64_t v106 = v144;
        if (v74 == v29)
        {
          uint64_t v148 = 0;
          uint64_t v34 = v333;
          uint64_t v53 = v347;
        }
        else
        {
          uint64_t v149 = v144;
          sub_1BBABAA28(*(long long **)(*(void *)(v347 + 2400) + 944), 1, v315);
          uint64_t v151 = v150;
          sub_1BBABAA28(*(long long **)(*(void *)(v347 + 2400) + 944), 0, v315);
          uint64_t v106 = v149;
          uint64_t v53 = v347;
          uint64_t v148 = v151 - v152;
          uint64_t v34 = v333;
        }
        int v40 = v323;
        int v42 = v324;
        char v39 = v343;
        uint64_t v41 = v330;
        int v47 = v321;
        int v46 = v322;
        int v64 = v329;
        uint64_t v63 = v327;
        uint64_t v54 = v328;
        uint64_t v56 = v338;
        v363[v106 + 257] = v148;
      }
      int v67 = v353;
      int v153 = v353 + 2;
      if ((int)v56 >= 8) {
        int v153 = 1;
      }
      int v154 = v356;
      if (v356 >= 3) {
        int v155 = 3;
      }
      else {
        int v155 = v356;
      }
      if (3 << v356 < v140 && v153 <= v140) {
        int v154 = v155 + 1;
      }
      int v356 = v154;
      if (v140 < 1)
      {
        int v57 = v331 + v339;
        BOOL v158 = v71 != 0;
        double v159 = (double)v339;
        double v161 = -0.0;
        if (!v71) {
          double v161 = (double)v339;
        }
        double v70 = v70 + v161;
        if (!v140)
        {
LABEL_128:
          uint64_t v52 = v320;
          uint64_t v36 = v106 + 1;
          double v55 = v92 + v55;
          uint64_t v68 = v71 - 1;
          if (v71) {
            continue;
          }
          v365[(int)v50 - (int)v41 + 2354] = 0;
          if (!v41) {
            goto LABEL_137;
          }
          uint64_t v162 = (int)v50 - (int)v41;
          if (HIDWORD(v326))
          {
            int v33 = v312;
            if ((int)v50 < v325)
            {
              uint64_t v52 = v320;
              LOBYTE(v30) = a9 - 2;
              goto LABEL_138;
            }
            int v341 = v36;
            int v166 = (int)((double)v57 - v70);
            double v167 = 0.0;
            if (!v326) {
              double v167 = v70;
            }
            double v168 = v55 - v167;
            if (v326) {
              int v166 = v57;
            }
            int v357 = v166;
            uint64_t v30 = v53;
            sub_1BBABAB24(v53, 1, v314, a11);
            uint64_t v170 = v169;
            sub_1BBABAB24(v30, 0, v314, a11);
            v365[v162 + 2354] = v170;
            double v55 = v168 + (double)v170;
            double v48 = v168 + v69 + (double)v171 - v66 - (double)v357;
            LOBYTE(v30) = a9 - 2;
            if (v48 >= v55)
            {
              uint64_t v52 = v320;
              uint64_t v34 = v333;
              uint64_t v53 = v347;
              int v40 = v323;
              int v42 = v324;
              char v39 = v343;
              uint64_t v41 = v330;
              int v47 = v321;
              int v46 = v322;
              LODWORD(v36) = v341;
              goto LABEL_138;
            }
            v365[v162 + 2354] = v171;
            uint64_t v172 = 15;
            uint64_t v34 = v333;
            uint64_t v53 = v347;
            int v40 = v323;
            int v42 = v324;
            char v39 = v343;
            uint64_t v41 = v330;
            int v47 = v321;
            int v46 = v322;
            LODWORD(v36) = v341;
            do
            {
              uint64_t v173 = v333[v172] + (uint64_t)v329;
              if (*((_WORD *)&v363[1] + v173))
              {
                *((_WORD *)&v363[1] + v173) = 0;
                int v174 = &v360[v313];
                *int v174 = v174[1024];
                v174[2048] = 0.0;
              }
              --v172;
              ++v313;
            }
            while (v172 != -1);
            BOOL v163 = 1;
            uint64_t v52 = v320;
          }
          else
          {
            int v164 = v36;
            sub_1BBABAB24(v53, 0, v314, a11);
            LODWORD(v36) = v164;
            uint64_t v41 = v330;
            int v40 = v323;
            int v42 = v324;
            char v39 = v343;
            uint64_t v53 = v347;
            uint64_t v34 = v333;
            double v48 = v55 + (double)(v165 - v57);
            v365[v162 + 2354] = v165;
            int v47 = v321;
            int v46 = v322;
            BOOL v163 = 1;
            uint64_t v52 = v320;
            LOBYTE(v30) = a9 - 2;
            int v33 = v312;
          }
LABEL_139:
          if (v325 >= 2) {
            goto LABEL_24;
          }
          if (!v163)
          {
LABEL_159:
            int v175 = 0;
            int v176 = -1;
            uint64_t v18 = v300;
            uint64_t v16 = v301;
            goto LABEL_160;
          }
          if (v296[10] != 1)
          {
            if (v296[11])
            {
              if (!__PAIR64__(a11, a10) && *(_DWORD *)(v53 + 2056)) {
                goto LABEL_250;
              }
            }
            else if (!__PAIR64__(a11, a10))
            {
LABEL_250:
              uint64_t v246 = v53;
              sub_1BBABAC6C(v53, 1);
              uint64_t v248 = v247;
              sub_1BBABAC6C(v246, 0);
LABEL_258:
              uint64_t v34 = v333;
              if ((v50 & 0x80000000) == 0)
              {
                int v255 = 0;
                double v256 = v49 + (double)v249;
                uint64_t v257 = (16 * v50);
                int v176 = -1;
                double v258 = v48 + (double)v248;
                uint64_t v259 = v50;
                uint64_t v53 = v347;
                do
                {
                  unsigned int v260 = v33[v259];
                  uint64_t v342 = v259;
                  double v258 = v258 - (double)(uint64_t)v365[v50 - v259 + 2354];
                  if ((*(void *)&v311[4] >> v260))
                  {
                    int v346 = (v260 >> v30) * v308 + 4 * (v260 & v309);
                    uint64_t v261 = 15;
                    uint64_t v344 = v257;
                    while (1)
                    {
                      int v262 = v257 + v261;
                      if ((int)v257 + (int)v261 <= (int)v29)
                      {
                        int v263 = v346 + v34[v261];
                        if (*((_WORD *)&v363[1] + v263))
                        {
                          int v349 = v255;
                          unint64_t v351 = &v360[v255];
                          int v355 = *((__int16 *)&v363[1] + v263);
                          int v359 = v176;
                          uint64_t v264 = *(long long **)(*(void *)(v53 + 2400) + 944);
                          long long v265 = v264[10];
                          long long v266 = v264[11];
                          long long v267 = v264[8];
                          *(long long *)((char *)v264 + 360) = v264[9];
                          *(long long *)((char *)v264 + 376) = v265;
                          *(long long *)((char *)v264 + 392) = v266;
                          long long v268 = v264[6];
                          long long v269 = v264[7];
                          long long v270 = v264[4];
                          *(long long *)((char *)v264 + 296) = v264[5];
                          *(long long *)((char *)v264 + 312) = v268;
                          *(long long *)((char *)v264 + 328) = v269;
                          *(long long *)((char *)v264 + 344) = v267;
                          long long v271 = *v264;
                          *(long long *)((char *)v264 + 232) = v264[1];
                          long long v272 = v264[3];
                          *(long long *)((char *)v264 + 248) = v264[2];
                          *(long long *)((char *)v264 + 264) = v272;
                          *(long long *)((char *)v264 + 280) = v270;
                          int v273 = v263 & v303;
                          int v274 = v263 >> a9;
                          if (v297 == 2) {
                            int v275 = v274;
                          }
                          else {
                            int v275 = v273;
                          }
                          if (v297 == 2) {
                            int v276 = v273;
                          }
                          else {
                            int v276 = v274;
                          }
                          *((void *)v264 + 51) = *((void *)v264 + 24);
                          *(long long *)((char *)v264 + 216) = v271;
                          uint64_t v277 = 8 * (*((_DWORD *)v264 + 52) - *((_DWORD *)v264 + 6));
                          *((void *)v264 + 4) = 0;
                          *((void *)v264 + 1) = 510;
                          *((void *)v264 + 2) = v277;
                          sub_1BBAB646C((unint64_t *)v264, v275, a9, a11, (uint64_t)v264 + 83);
                          sub_1BBAB646C((unint64_t *)v264, v276, a9, a11, (uint64_t)v264 + 101);
                          if ((unint64_t)(v275 - 4) <= 0x1B) {
                            sub_1BBA1CC5C((unint64_t *)v264, v275 - byte_1BBB7CD80[byte_1BBB7CD60[v275]], (byte_1BBB7CD60[v275] - 2) >> 1);
                          }
                          if ((unint64_t)(v276 - 4) <= 0x1B) {
                            sub_1BBA1CC5C((unint64_t *)v264, v276 - byte_1BBB7CD80[byte_1BBB7CD60[v276]], (byte_1BBB7CD60[v276] - 2) >> 1);
                          }
                          uint64_t v53 = v347;
                          uint64_t v278 = *(void *)(v347 + 2408);
                          int v279 = ((*((_DWORD *)v264 + 4) + 8 * (*((_DWORD *)v264 + 6) - *((_DWORD *)v264 + 52))) << 8)
                               - *((_DWORD *)v264 + 2)
                               + 510;
                          int v280 = *(unsigned __int16 *)(v278 + 8);
                          uint64_t v34 = v333;
                          int v176 = v359;
                          if (a11) {
                            unsigned int v281 = ((v280 * v279) << 15) / *(unsigned __int16 *)(v278 + 18);
                          }
                          else {
                            unsigned int v281 = (v280 * v279) << 7;
                          }
                          uint64_t v52 = v320;
                          long long v282 = *(long long *)((char *)v264 + 392);
                          v264[10] = *(long long *)((char *)v264 + 376);
                          v264[11] = v282;
                          *((void *)v264 + 24) = *((void *)v264 + 51);
                          long long v283 = *(long long *)((char *)v264 + 328);
                          v264[6] = *(long long *)((char *)v264 + 312);
                          v264[7] = v283;
                          long long v284 = *(long long *)((char *)v264 + 360);
                          v264[8] = *(long long *)((char *)v264 + 344);
                          v264[9] = v284;
                          long long v285 = *(long long *)((char *)v264 + 264);
                          v264[2] = *(long long *)((char *)v264 + 248);
                          v264[3] = v285;
                          long long v286 = *(long long *)((char *)v264 + 296);
                          v264[4] = *(long long *)((char *)v264 + 280);
                          v264[5] = v286;
                          long long v287 = *(long long *)((char *)v264 + 232);
                          *uint64_t v264 = *(long long *)((char *)v264 + 216);
                          v264[1] = v287;
                          double v288 = v258 + (double)v281 - (double)*((uint64_t *)v351 + 2048);
                          if (v288 < v256) {
                            int v176 = v262;
                          }
                          if (v355 > 1)
                          {
                            LOBYTE(v30) = a9 - 2;
                            int v33 = v312;
                            goto LABEL_291;
                          }
                          int v255 = v349;
                          if (v288 < v256) {
                            double v256 = v258 + (double)v281 - (double)*((uint64_t *)v351 + 2048);
                          }
                          double v258 = v258 - v360[v349] + v360[v349 + 1024];
                          LOBYTE(v30) = a9 - 2;
                          int v33 = v312;
                          uint64_t v257 = v344;
                        }
                        else
                        {
                          double v258 = v258 - (double)*(uint64_t *)&v360[v255 + 2048];
                          LOBYTE(v30) = a9 - 2;
                          int v33 = v312;
                        }
                        ++v255;
                      }
                      if (--v261 == -1) {
                        goto LABEL_288;
                      }
                    }
                  }
                  v255 += 16;
LABEL_288:
                  v257 -= 16;
                  uint64_t v259 = v342 - 1;
                }
                while (v342 > 0);
LABEL_291:
                int v35 = v298;
                int v21 = v299;
                int v31 = 1 << a9;
                int v175 = 0;
                if (v176 < 0)
                {
                  uint64_t v18 = v300;
                  uint64_t v16 = v301;
                  LOBYTE(v22) = a9;
                }
                else
                {
                  unsigned int v289 = 0;
                  LOBYTE(v22) = a9;
                  uint64_t v18 = v300;
                  uint64_t v16 = v301;
                  do
                  {
                    unsigned int v290 = v33[(unint64_t)v289 >> 4];
                    int v291 = v34[v289 & 0xF] + 4 * ((*(_DWORD *)v311 + 255) & v290) + (v290 >> v30) * (4 << a9);
                    uint64_t v292 = v291 >> a9;
                    uint64_t v293 = v292 * v318 + (v291 & v324);
                    uint64_t v294 = v292 * v301 + (v291 & v324);
                    int v295 = *((__int16 *)&v363[1] + v291);
                    v175 += v295;
                    if (*(__int16 *)(v52 + 2 * v293) < 0) {
                      int v295 = -v295;
                    }
                    *(_WORD *)(v300 + 2 * v294) = v295;
                    ++v289;
                  }
                  while (v176 + 1 != v289);
                }
LABEL_161:
                int v177 = v176 + 1;
                if (v176 + 1 < v35)
                {
                  do
                  {
                    if (v177 <= 0) {
                      int v178 = -(-v177 & 0xF);
                    }
                    else {
                      int v178 = v177 & 0xF;
                    }
                    int v179 = v34[v178]
                         + 4 * ((v311[0] - 1) & v33[v177 >> 4])
                         + (v33[v177 >> 4] >> v30) * (4 << v22);
                    *(_WORD *)(v18 + 2 * ((v179 >> v22) * v16 + (v179 & (v31 - 1)))) = 0;
                    ++v177;
                  }
                  while (v35 != v177);
                }
                if (*(unsigned char *)(*(void *)(v53 + 2392) + 129)) {
                  BOOL v180 = v175 < 2;
                }
                else {
                  BOOL v180 = 1;
                }
                if (v180) {
                  return v176 >= 0;
                }
                int v181 = *(unsigned __int8 *)(*(void *)(v53 + 2384) + 2001) + v21;
                uint64_t v182 = *(void *)(v53 + 2408);
                if (v181 >= 63) {
                  int v183 = 63;
                }
                else {
                  int v183 = *(unsigned __int8 *)(*(void *)(v53 + 2384) + 2001) + v21;
                }
                unsigned int v184 = v183 & ~(v183 >> 31);
                if (a11)
                {
                  unsigned int v185 = word_1BBB7BA38[512 * (unint64_t)*(unsigned __int8 *)(v182 + 23)
                                      + 64 * (unint64_t)*(unsigned __int8 *)(v182 + 22)
                                      + v184];
                  if (v176 < 0) {
                    return v176 >= 0;
                  }
                }
                else
                {
                  unsigned int v185 = dword_1BBB7B4C0[70 * *(unsigned __int8 *)(v182 + 22) + v184];
                  if (v176 < 0) {
                    return v176 >= 0;
                  }
                }
                int v186 = v181 / 6;
                int v187 = a39H[v181 % 6];
                double v188 = (float)((float)((v187 * v187) << (2 * v186)) / (float)v185) * 0.0625 + 0.5;
                uint64_t v189 = v176 >> 4;
                int v190 = v29 - v176;
                char v191 = ~(-1 << v30);
                int v192 = 4 << v22;
                int v193 = ~(-1 << v22);
                uint64_t v194 = (uint64_t)v188;
                uint64_t v195 = v189;
                int v358 = v176;
                int v354 = ~(-1 << v30);
                int v352 = 4 << v22;
                while (1)
                {
                  uint64_t v196 = 0;
                  int v197 = 0;
                  int v198 = (v33[v195] >> v30) * v192 + 4 * (v33[v195] & v191);
                  int v199 = 16;
                  unsigned int v200 = -1;
                  do
                  {
                    int v201 = *(unsigned __int16 *)(v18
                                               + 2
                                               * (((v198 + v34[v196]) & v193)
                                                + ((v198 + v34[v196]) >> v22) * v16));
                    if (v199 == 16 && v201 != 0) {
                      int v199 = v196;
                    }
                    int v203 = (__int16)v201;
                    if ((v201 & 0x8000u) != 0) {
                      int v203 = -(__int16)v201;
                    }
                    int v204 = v197 + v203;
                    if (*(_WORD *)(v18
                                  + 2 * (((v198 + v34[v196]) & v193) + ((v198 + v34[v196]) >> v22) * v16)))
                    {
                      unsigned int v200 = v196;
                      int v197 = v204;
                    }
                    ++v196;
                  }
                  while (v196 != 16);
                  if ((int)(v200 - v199) > 3)
                  {
                    int v205 = v198 + v34[v199];
                    unsigned int v206 = *(unsigned __int16 *)(v18 + 2 * ((v205 & v193) + (v205 >> v22) * v16));
                    if ((v197 & 1) != v206 >> 15) {
                      break;
                    }
                  }
                  if (v195 == v189) {
                    int v207 = v200 + 1;
                  }
                  else {
                    int v207 = 16;
                  }
                  v190 += v207;
LABEL_244:
                  BOOL v28 = v195-- <= 0;
                  if (v28) {
                    return v176 >= 0;
                  }
                }
                if (v195 == v189) {
                  uint64_t v208 = v200;
                }
                else {
                  uint64_t v208 = 15;
                }
                if ((v208 & 0x80000000) != 0)
                {
                  int v211 = 0;
                  int v219 = -1;
LABEL_234:
                  uint64_t v236 = v219 & v193;
                  uint64_t v237 = v219 >> v22;
                  uint64_t v238 = v236 + v237 * v16;
                  int v239 = *(__int16 *)(v18 + 2 * v238);
                  uint64_t v240 = v236 + v237 * v318;
                  if (v239 >= 0) {
                    LOWORD(v241) = *(_WORD *)(v18 + 2 * v238);
                  }
                  else {
                    int v241 = -v239;
                  }
                  int v242 = *(__int16 *)(v52 + 2 * v240);
                  if ((unsigned __int16)v241 == 0x7FFF) {
                    int v243 = -1;
                  }
                  else {
                    int v243 = v211;
                  }
                  if (v242 >= 0) {
                    LOWORD(v244) = v243;
                  }
                  else {
                    int v244 = -v243;
                  }
                  *(_WORD *)(v18 + 2 * v238) = v244 + v239;
                  goto LABEL_244;
                }
                uint64_t v209 = v16;
                uint64_t v210 = 0;
                int v211 = 0;
                uint64_t v212 = v199;
                unsigned int v213 = v206 >> 15;
                uint64_t v214 = &v363[v190 + 257];
                int v215 = &v365[v190 + 306];
                uint64_t v217 = v208 - v199;
                uint64_t v218 = 0x7FFFFFFFFFFFFFFFLL;
                int v219 = -1;
                uint64_t v220 = v208;
                uint64_t v221 = v208 - v200;
                while (1)
                {
                  int v222 = v198 + v34[v220];
                  uint64_t v223 = v222 & v193;
                  uint64_t v224 = v222 >> a9;
                  __int16 v225 = *(_WORD *)(v18 + 2 * (v223 + v224 * v209));
                  int v216 = &v365[v190 + 1330];
                  uint64_t v226 = v216[v210];
                  if (v225)
                  {
                    uint64_t v227 = v226 * v194;
                    uint64_t v228 = v227 + (*(void *)&v364[8 * v190 + 2448 + 8 * v210] << 7);
                    LOWORD(v229) = v225;
                    if (v225 < 0) {
                      int v229 = -v225;
                    }
                    if ((unsigned __int16)v229 == 1) {
                      uint64_t v228 = v228 - (v214[v210] << 7) - 0x8000;
                    }
                    uint64_t v230 = (v215[v210] << 7) - v227;
                    if ((unsigned __int16)v229 == 1 && v221 == v210 && v195 == v189) {
                      v228 -= 0x20000;
                    }
                    if (v230 >= v228)
                    {
                      if ((unsigned __int16)v229 == 1 && v217 == v210) {
                        uint64_t v230 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v230 = v228;
                      }
                      int v234 = -1;
                      goto LABEL_228;
                    }
                  }
                  else
                  {
                    if (v226 >= 0) {
                      uint64_t v235 = v216[v210];
                    }
                    else {
                      uint64_t v235 = -v226;
                    }
                    uint64_t v230 = (v215[v210] << 7) - v235 * v194 + (v214[v210] << 7);
                    if (v220 < v212 && v213 != *(unsigned __int16 *)(v320 + 2 * (v223 + v224 * v318)) >> 15) {
                      uint64_t v230 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                  }
                  int v234 = 1;
LABEL_228:
                  uint64_t v34 = v333;
                  if (v230 < v218)
                  {
                    uint64_t v218 = v230;
                    int v211 = v234;
                    int v219 = v222;
                  }
                  ++v210;
                  BOOL v28 = v220-- <= 0;
                  if (v28)
                  {
                    v190 += v208 + 1;
                    uint64_t v16 = v209;
                    uint64_t v52 = v320;
                    LOBYTE(v22) = a9;
                    LOBYTE(v30) = a9 - 2;
                    int v33 = v312;
                    int v176 = v358;
                    char v191 = v354;
                    int v192 = v352;
                    goto LABEL_234;
                  }
                }
              }
              int v175 = 0;
              int v176 = -1;
              uint64_t v18 = v300;
              uint64_t v16 = v301;
              uint64_t v53 = v347;
LABEL_160:
              int v35 = v298;
              int v21 = v299;
              int v31 = 1 << a9;
              goto LABEL_161;
            }
          }
          BOOL v250 = v22 > 2 && a10;
          if (a11) {
            BOOL v251 = v250;
          }
          else {
            BOOL v251 = !a10;
          }
          uint64_t v252 = v53;
          sub_1BBABADA0(v53, 1, v251, a11);
          uint64_t v248 = v253;
          int v254 = v251;
          uint64_t v52 = v320;
          sub_1BBABADA0(v252, 0, v254, a11);
          goto LABEL_258;
        }
      }
      else
      {
        uint64_t v56 = (v56 + 1);
        if ((v332 - 1) >= 2) {
          int v157 = v332;
        }
        else {
          int v157 = v332 + 1;
        }
        if (v140 != 1) {
          int v157 = 0;
        }
        int v332 = v157;
        if (v140 != 1) {
          int v67 = 0;
        }
        int v57 = v331 + v339;
        BOOL v158 = v71 != 0;
        double v159 = (double)v339;
        double v160 = -0.0;
        if (!v71) {
          double v160 = (double)v339;
        }
        double v70 = v70 + v160;
      }
      break;
    }
    double v69 = v69 + v82;
    double v66 = v66 + v92 - v159;
    LODWORD(v326) = v326 + v158;
    HIDWORD(v326) = 1;
    goto LABEL_128;
  }
  return v23;
}

uint64_t sub_1BBABA04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, char a11)
{
  uint64_t v11 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v23 = v11;
  v80[513] = *MEMORY[0x1E4F143B8];
  int v78 = 0;
  if (((v13 | v12) & 0x80000000) == 0
    && ((uint64_t v24 = *(void *)(v11 + 2400),
         int v25 = v12 - *(_DWORD *)(v24 + 808),
         int v26 = v13 - *(_DWORD *)(v24 + 812),
         int v27 = *(unsigned __int8 *)(v24 + 804),
         v25 < v27)
      ? (BOOL v28 = v26 < v27)
      : (BOOL v28 = 0),
        v28))
  {
    BOOL v29 = (unsigned __int8 *)(*(void *)(v24 + 864) + 16 * (*(void *)(v24 + 840) * ((uint64_t)v26 >> 2) + (v25 >> 2)));
  }
  else
  {
    BOOL v29 = 0;
  }
  v80[0] = 0;
  int v79 = 0;
  sub_1BBABA59C(v11, v29, v14, a9, a10, (int *)v80 + 1, &v79, v80, &v78, a11);
  if (*(unsigned char *)(*(void *)(v23 + 2376) + 10) == 2) {
    int v30 = 171;
  }
  else {
    int v30 = 85;
  }
  uint64_t v31 = a9 - 2;
  int v32 = 1 << a9;
  uint64_t result = (*(uint64_t (**)(void, void))(v23 + 8 * v31 + 2280))((1 << a9), (v30 << (v79 - 9)));
  if (a11 && *(unsigned char *)(*(void *)(v23 + 2392) + 129))
  {
    unsigned int v74 = result;
    uint64_t v77 = 0;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t *, char *))(v23 + 8 * (a9 > 2) + 2224))((1 << a9), v16, v18, &v77, (char *)&v77 + 4);
    if (HIDWORD(v77) >= 2)
    {
      int v34 = 4 * v78;
      if (a9 != 3) {
        int v34 = 0;
      }
      if (v32 << a9 >= 16)
      {
        int v35 = (char *)*(&off_1E6248580 + v31) + v34;
        uint64_t v36 = &byte_1BBB83EF0[64 * (uint64_t)v78 + 16 * v31];
        uint64_t v37 = (v32 << a9) >> 4;
        int v38 = ~(-1 << v31);
        int v39 = v32 - 1;
        int v40 = -1;
        int v76 = v35;
        char v75 = v38;
        do
        {
          uint64_t v41 = 0;
          int v42 = 0;
          uint64_t v43 = v37--;
          int v44 = (v35[v37] >> v31) * (4 << a9)
              + 4 * (v35[v37] & v38);
          LODWORD(v45) = 16;
          int v46 = -1;
          do
          {
            int v47 = *(unsigned __int16 *)(v18 + 2 * (((v44 + v36[v41]) >> a9) * v16 + ((v44 + v36[v41]) & v39)));
            if (v45 != 16 || v47 == 0) {
              uint64_t v45 = v45;
            }
            else {
              uint64_t v45 = v41;
            }
            int v49 = (__int16)v47;
            if ((v47 & 0x8000u) != 0) {
              int v49 = -(__int16)v47;
            }
            int v50 = v42 + v49;
            if (*(_WORD *)(v18 + 2 * (((v44 + v36[v41]) >> a9) * v16 + ((v44 + v36[v41]) & v39))))
            {
              int v46 = v41;
              int v42 = v50;
            }
            ++v41;
          }
          while (v41 != 16);
          if (v40 == -1 && v46 > -1) {
            int v40 = v37;
          }
          if (v46 - (int)v45 > 3)
          {
            int v52 = v44 + v36[(int)v45];
            unsigned int v53 = *(unsigned __int16 *)(v18 + 2 * ((v52 >> a9) * v16 + (v52 & v39)));
            if ((v42 & 1) != v53 >> 15)
            {
              int v54 = 0;
              if (v40 == v37) {
                uint64_t v55 = v46;
              }
              else {
                uint64_t v55 = 15;
              }
              if ((v55 & 0x80000000) == 0)
              {
                int v56 = 0;
                unsigned int v57 = v53 >> 15;
                signed int v58 = 0x80000000;
                int v59 = -1;
                while (1)
                {
                  int v60 = v44 + v36[v55];
                  uint64_t v61 = v60 >> a9;
                  LOWORD(v62) = *(_WORD *)(v18 + 2 * (v61 * v16 + (v60 & v39)));
                  int v63 = *((_DWORD *)&v80[16 * v61 + 1] + (v60 & v39));
                  if ((_WORD)v62)
                  {
                    if (v63 <= 0)
                    {
                      BOOL v64 = v45 == v55;
                      if ((v62 & 0x8000u) != 0) {
                        int v62 = -(__int16)v62;
                      }
                      BOOL v65 = (unsigned __int16)v62 == 1;
                      if (v64 && v65) {
                        int v63 = 0x80000000;
                      }
                      else {
                        int v63 = -v63;
                      }
                      if (!v64 || !v65) {
                        int v56 = -1;
                      }
                      goto LABEL_55;
                    }
                  }
                  else if (v55 < (int)v45 && v57 != *(unsigned __int16 *)(v22 + 2 * ((v60 & v39) + v61 * v20)) >> 15)
                  {
                    int v63 = 0x80000000;
                  }
                  int v56 = 1;
LABEL_55:
                  if (v63 > v58)
                  {
                    signed int v58 = v63;
                    int v54 = v56;
                    int v59 = v44 + v36[v55];
                  }
                  BOOL v28 = v55-- <= 0;
                  if (v28) {
                    goto LABEL_61;
                  }
                }
              }
              int v59 = -1;
LABEL_61:
              uint64_t v66 = v59 >> a9;
              uint64_t v67 = v66 * v16 + (v59 & v39);
              int v68 = *(__int16 *)(v18 + 2 * v67);
              uint64_t v69 = v66 * v20 + (v59 & v39);
              if (v68 >= 0) {
                LOWORD(v70) = *(_WORD *)(v18 + 2 * v67);
              }
              else {
                int v70 = -v68;
              }
              int v71 = *(__int16 *)(v22 + 2 * v69);
              if ((unsigned __int16)v70 == 0x7FFF) {
                int v72 = -1;
              }
              else {
                int v72 = v54;
              }
              if (v71 >= 0) {
                LOWORD(v73) = v72;
              }
              else {
                int v73 = -v72;
              }
              *(_WORD *)(v18 + 2 * v67) = v73 + v68;
              int v35 = v76;
              LOBYTE(v38) = v75;
            }
          }
        }
        while (v43 > 1);
      }
    }
    return v74;
  }
  return result;
}

uint64_t sub_1BBABA4BC(uint64_t result, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  uint64_t v8 = *(void *)(result + 2072);
  int v9 = a2 >> 9;
  if (a8)
  {
    int v10 = v9 + *(char *)(v8 + a8 + 624);
    uint64_t v11 = *(void *)(v8 + 1368);
    int v12 = *(unsigned __int8 *)(v11 + 2003);
    if (v10 >= 57) {
      int v13 = 57;
    }
    else {
      int v13 = v10;
    }
    if (v10 <= -v12) {
      int v9 = -v12;
    }
    else {
      int v9 = v13;
    }
    if (v9 >= 30) {
      int v9 = byte_1BBB83580[v9 - 30];
    }
    int v14 = (unsigned __int8 *)(v11 + 195);
  }
  else
  {
    uint64_t v15 = *(void *)(v8 + 1368);
    int v12 = *(unsigned __int8 *)(v15 + 2001);
    int v14 = (unsigned __int8 *)(v15 + 194);
  }
  int v16 = a7 + 3;
  if (v9 < 0)
  {
    v9 += v12;
    v16 += *v14;
  }
  if (!*(unsigned char *)(*(void *)(result + 2384) + 246)) {
    return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))(result
  }
                                                                                                 + 8 * a7
                                                                                                 + 2296))((1 << a7), (v16 - 4), a39H[v9 % 6] << (v9 / 6), a3, a4, a5, a6);
  return result;
}

uint64_t sub_1BBABA59C(uint64_t result, unsigned __int8 *a2, int a3, int a4, int a5, int *a6, _DWORD *a7, _DWORD *a8, int *a9, char a10)
{
  if (!a5)
  {
    *a6 = a3;
    uint64_t v23 = *(void *)(result + 2384);
    int v14 = *(unsigned __int8 *)(v23 + 2001);
    *a8 = *(unsigned __int8 *)(v23 + 194);
    if (!a10 || *(_DWORD *)(result + 2052) != 1) {
      goto LABEL_34;
    }
    if (a4 > 3) {
      int v22 = 0;
    }
    else {
      int v22 = byte_1BBB7CAA0[*a2];
    }
    goto LABEL_33;
  }
  uint64_t v10 = 544;
  if (a5 != 1) {
    uint64_t v10 = 545;
  }
  uint64_t v11 = 14;
  if (a5 != 1) {
    uint64_t v11 = 15;
  }
  int v12 = *(char *)(*(void *)(result + 2376) + v10)
      + a3
      + *(char *)(*(void *)(*(void *)(result + 2376) + 1384) + v11);
  uint64_t v13 = *(void *)(result + 2384);
  int v14 = *(unsigned __int8 *)(v13 + 2003);
  if (v12 >= 57) {
    int v15 = 57;
  }
  else {
    int v15 = v12;
  }
  if (v12 <= -v14) {
    int v16 = -v14;
  }
  else {
    int v16 = v15;
  }
  if (v16 >= 30) {
    int v16 = byte_1BBB83580[v16 - 30];
  }
  *a6 = v16;
  *a8 = *(unsigned __int8 *)(v13 + 195);
  if (a10 && *(_DWORD *)(result + 2052) == 1)
  {
    unsigned int v17 = a2[1];
    if (v17 == 35) {
      unsigned int v17 = **(unsigned __int8 **)(*(void *)(result + 2400) + 864);
    }
    if ((a4 - 1) <= 1)
    {
      int v18 = 26 - v17;
      if (v17 >= 0x1A) {
        int v18 = v17 - 26;
      }
      int v19 = 10 - v17;
      BOOL v20 = v17 >= 0xA;
      int v21 = v17 - 10;
      if (!v20) {
        int v21 = v19;
      }
      if (v18 < 5 || v21 <= 4)
      {
        if (v21 >= 5) {
          int v22 = 1;
        }
        else {
          int v22 = 2;
        }
LABEL_33:
        *a9 = v22;
      }
    }
  }
LABEL_34:
  unsigned int v24 = *a6;
  if (*a6 < 0)
  {
    int v26 = v24 + v14;
    *a6 = v26;
    int v25 = v26 / 6 - (*a8 + a4);
  }
  else
  {
    int v25 = v24 / 6 - a4;
  }
  *a7 = v25 + 21;
  return result;
}

__n128 sub_1BBABA728(uint64_t a1, int a2, int a3, int a4, unsigned int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v13 = *(long long **)(*(void *)(a1 + 2400) + 944);
  long long v14 = v13[10];
  long long v15 = v13[11];
  long long v16 = v13[8];
  *(long long *)((char *)v13 + 360) = v13[9];
  *(long long *)((char *)v13 + 376) = v14;
  *(long long *)((char *)v13 + 392) = v15;
  long long v17 = v13[6];
  long long v18 = v13[7];
  long long v19 = v13[4];
  *(long long *)((char *)v13 + 296) = v13[5];
  *(long long *)((char *)v13 + 312) = v17;
  *(long long *)((char *)v13 + 328) = v18;
  *(long long *)((char *)v13 + 344) = v16;
  long long v20 = *v13;
  *(long long *)((char *)v13 + 232) = v13[1];
  long long v21 = v13[3];
  *(long long *)((char *)v13 + 248) = v13[2];
  *(long long *)((char *)v13 + 264) = v21;
  *(long long *)((char *)v13 + 280) = v19;
  *((void *)v13 + 51) = *((void *)v13 + 24);
  *(long long *)((char *)v13 + 216) = v20;
  uint64_t v22 = 8 * (*((_DWORD *)v13 + 52) - *((_DWORD *)v13 + 6));
  *((void *)v13 + 4) = 0;
  *((void *)v13 + 1) = 510;
  *((void *)v13 + 2) = v22;
  sub_1BBA1CB10((unint64_t *)v13, a3 != 0);
  uint64_t v23 = (uint64_t)&v13[(a9 > 0) + 10] + 7;
  int v24 = a8 + 2;
  if (a7 >= 8) {
    int v24 = 1;
  }
  unsigned int v25 = a2 - v24;
  if (a2 >= v24)
  {
    int v27 = 3 << a6;
    int v28 = v25 - (3 << a6);
    if ((int)v25 >= 3 << a6)
    {
      int v31 = 1 << a6;
      int v32 = a6;
      while (v28 >= v31)
      {
        ++v32;
        v28 -= v31;
        int v31 = 1 << v32;
      }
      sub_1BBA1CC5C((unint64_t *)v13, (1 << (v32 - a6 + 4)) - 2, v32 - a6 + 4);
      int v33 = (unint64_t *)v13;
      int v34 = v28;
      int v35 = v32;
    }
    else
    {
      if (v27 >= (int)(v25 >> a6)) {
        int v29 = v25 >> a6;
      }
      else {
        int v29 = 3 << a6;
      }
      int v30 = (int)(v25 >> a6) < v27;
      if (v29 > 21) {
        sub_1BBA1CD18((unint64_t *)v13, v29, v30);
      }
      else {
        sub_1BBA1CC5C((unint64_t *)v13, ~v30, v29 + v30);
      }
      int v34 = v25 & ~(-1 << a6);
      int v33 = (unint64_t *)v13;
      int v35 = a6;
    }
    sub_1BBA1CC5C(v33, v34, v35);
    if (a7 <= 7)
    {
      sub_1BBA1CA34((unint64_t *)v13, 1, (unsigned char *)(v23 + a4));
      if (a8)
      {
        int v26 = (char *)v13 + 4 * (a9 > 0) + a5 + 191;
        uint64_t v36 = (unint64_t *)v13;
        int v37 = 1;
        goto LABEL_24;
      }
    }
  }
  else
  {
    if (a2 == 2)
    {
      sub_1BBA1CA34((unint64_t *)v13, 1, (unsigned char *)(v23 + a4));
      int v26 = (char *)v13 + 4 * (a9 > 0) + a5 + 191;
      goto LABEL_18;
    }
    if (a2 == 1)
    {
      int v26 = (unsigned char *)(v23 + a4);
LABEL_18:
      uint64_t v36 = (unint64_t *)v13;
      int v37 = 0;
LABEL_24:
      sub_1BBA1CA34(v36, v37, v26);
    }
  }
  long long v38 = *(long long *)((char *)v13 + 392);
  v13[10] = *(long long *)((char *)v13 + 376);
  v13[11] = v38;
  *((void *)v13 + 24) = *((void *)v13 + 51);
  long long v39 = *(long long *)((char *)v13 + 328);
  v13[6] = *(long long *)((char *)v13 + 312);
  v13[7] = v39;
  long long v40 = *(long long *)((char *)v13 + 360);
  v13[8] = *(long long *)((char *)v13 + 344);
  v13[9] = v40;
  long long v41 = *(long long *)((char *)v13 + 264);
  v13[2] = *(long long *)((char *)v13 + 248);
  v13[3] = v41;
  long long v42 = *(long long *)((char *)v13 + 296);
  v13[4] = *(long long *)((char *)v13 + 280);
  v13[5] = v42;
  __n128 result = *(__n128 *)((char *)v13 + 232);
  *uint64_t v13 = *(long long *)((char *)v13 + 216);
  v13[1] = (__int128)result;
  return result;
}

__n128 sub_1BBABAA28(long long *a1, int a2, unsigned int a3)
{
  long long v4 = a1[10];
  long long v5 = a1[11];
  uint64_t v6 = (long long *)((char *)a1 + 216);
  long long v7 = a1[8];
  *(long long *)((char *)a1 + 360) = a1[9];
  *(long long *)((char *)a1 + 376) = v4;
  *(long long *)((char *)a1 + 392) = v5;
  long long v8 = a1[6];
  long long v9 = a1[7];
  long long v10 = a1[4];
  *(long long *)((char *)a1 + 296) = a1[5];
  *(long long *)((char *)a1 + 312) = v8;
  *(long long *)((char *)a1 + 328) = v9;
  *(long long *)((char *)a1 + 344) = v7;
  long long v11 = *a1;
  *(long long *)((char *)a1 + 232) = a1[1];
  long long v12 = a1[3];
  *(long long *)((char *)a1 + 248) = a1[2];
  *(long long *)((char *)a1 + 264) = v12;
  *(long long *)((char *)a1 + 280) = v10;
  *((void *)a1 + 51) = *((void *)a1 + 24);
  int v13 = 8 * (*((_DWORD *)a1 + 52) - *((_DWORD *)a1 + 6));
  *(long long *)((char *)a1 + 216) = v11;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 1) = 510;
  *((void *)a1 + 2) = v13;
  sub_1BBA1CA34((unint64_t *)a1, a2 != 0, (unsigned char *)a1 + a3 + 123);
  long long v14 = v6[9];
  long long v15 = v6[11];
  a1[10] = v6[10];
  a1[11] = v15;
  *((void *)a1 + 24) = *((void *)a1 + 51);
  long long v16 = v6[5];
  long long v17 = v6[7];
  long long v18 = v6[8];
  a1[6] = v6[6];
  a1[7] = v17;
  a1[8] = v18;
  a1[9] = v14;
  long long v19 = v6[3];
  long long v20 = v6[4];
  a1[2] = *(long long *)((char *)a1 + 248);
  a1[3] = v19;
  __n128 result = *(__n128 *)((char *)a1 + 232);
  a1[4] = v20;
  a1[5] = v16;
  *a1 = *(long long *)((char *)a1 + 216);
  a1[1] = (__int128)result;
  return result;
}

__n128 sub_1BBABAB24(uint64_t a1, int a2, int a3, int a4)
{
  long long v4 = *(long long **)(*(void *)(a1 + 2400) + 944);
  long long v5 = v4[10];
  long long v6 = v4[11];
  long long v7 = v4[8];
  *(long long *)((char *)v4 + 360) = v4[9];
  *(long long *)((char *)v4 + 376) = v5;
  *(long long *)((char *)v4 + 392) = v6;
  long long v8 = v4[6];
  long long v9 = v4[7];
  long long v10 = v4[4];
  *(long long *)((char *)v4 + 296) = v4[5];
  *(long long *)((char *)v4 + 312) = v8;
  *(long long *)((char *)v4 + 328) = v9;
  *(long long *)((char *)v4 + 344) = v7;
  long long v11 = *v4;
  *(long long *)((char *)v4 + 232) = v4[1];
  long long v12 = v4[3];
  *(long long *)((char *)v4 + 248) = v4[2];
  *(long long *)((char *)v4 + 264) = v12;
  *(long long *)((char *)v4 + 280) = v10;
  *((void *)v4 + 51) = *((void *)v4 + 24);
  *(long long *)((char *)v4 + 216) = v11;
  uint64_t v13 = 8 * (*((_DWORD *)v4 + 52) - *((_DWORD *)v4 + 6));
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 1) = 510;
  *((void *)v4 + 2) = v13;
  uint64_t v14 = (uint64_t)v4 + 2 * (a4 > 0);
  if (a3 > 0) {
    ++v14;
  }
  sub_1BBA1CA34((unint64_t *)v4, a2 != 0, (unsigned char *)(v14 + 119));
  long long v15 = *(long long *)((char *)v4 + 392);
  v4[10] = *(long long *)((char *)v4 + 376);
  v4[11] = v15;
  *((void *)v4 + 24) = *((void *)v4 + 51);
  long long v16 = *(long long *)((char *)v4 + 328);
  v4[6] = *(long long *)((char *)v4 + 312);
  v4[7] = v16;
  long long v17 = *(long long *)((char *)v4 + 360);
  v4[8] = *(long long *)((char *)v4 + 344);
  v4[9] = v17;
  long long v18 = *(long long *)((char *)v4 + 264);
  v4[2] = *(long long *)((char *)v4 + 248);
  v4[3] = v18;
  long long v19 = *(long long *)((char *)v4 + 296);
  v4[4] = *(long long *)((char *)v4 + 280);
  v4[5] = v19;
  __n128 result = *(__n128 *)((char *)v4 + 232);
  long long *v4 = *(long long *)((char *)v4 + 216);
  v4[1] = (__int128)result;
  return result;
}

__n128 sub_1BBABAC6C(uint64_t a1, int a2)
{
  uint64_t v2 = *(long long **)(*(void *)(a1 + 2400) + 944);
  long long v3 = v2[10];
  long long v4 = v2[11];
  long long v5 = v2[8];
  *(long long *)((char *)v2 + 360) = v2[9];
  *(long long *)((char *)v2 + 376) = v3;
  *(long long *)((char *)v2 + 392) = v4;
  long long v6 = v2[6];
  long long v7 = v2[7];
  long long v8 = v2[4];
  *(long long *)((char *)v2 + 296) = v2[5];
  *(long long *)((char *)v2 + 312) = v6;
  *(long long *)((char *)v2 + 328) = v7;
  *(long long *)((char *)v2 + 344) = v5;
  long long v9 = *v2;
  *(long long *)((char *)v2 + 232) = v2[1];
  long long v10 = v2[3];
  *(long long *)((char *)v2 + 248) = v2[2];
  *(long long *)((char *)v2 + 264) = v10;
  *(long long *)((char *)v2 + 280) = v8;
  *((void *)v2 + 51) = *((void *)v2 + 24);
  *(long long *)((char *)v2 + 216) = v9;
  uint64_t v11 = 8 * (*((_DWORD *)v2 + 52) - *((_DWORD *)v2 + 6));
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 1) = 510;
  *((void *)v2 + 2) = v11;
  sub_1BBA1CA34((unint64_t *)v2, a2 != 0, (unsigned char *)v2 + 70);
  long long v12 = *(long long *)((char *)v2 + 392);
  v2[10] = *(long long *)((char *)v2 + 376);
  v2[11] = v12;
  *((void *)v2 + 24) = *((void *)v2 + 51);
  long long v13 = *(long long *)((char *)v2 + 328);
  v2[6] = *(long long *)((char *)v2 + 312);
  v2[7] = v13;
  long long v14 = *(long long *)((char *)v2 + 360);
  v2[8] = *(long long *)((char *)v2 + 344);
  v2[9] = v14;
  long long v15 = *(long long *)((char *)v2 + 264);
  v2[2] = *(long long *)((char *)v2 + 248);
  v2[3] = v15;
  long long v16 = *(long long *)((char *)v2 + 296);
  v2[4] = *(long long *)((char *)v2 + 280);
  v2[5] = v16;
  __n128 result = *(__n128 *)((char *)v2 + 232);
  *uint64_t v2 = *(long long *)((char *)v2 + 216);
  v2[1] = (__int128)result;
  return result;
}

__n128 sub_1BBABADA0(uint64_t a1, int a2, int a3, int a4)
{
  long long v4 = *(long long **)(*(void *)(a1 + 2400) + 944);
  long long v5 = v4[10];
  long long v6 = v4[11];
  long long v7 = v4[8];
  *(long long *)((char *)v4 + 360) = v4[9];
  *(long long *)((char *)v4 + 376) = v5;
  *(long long *)((char *)v4 + 392) = v6;
  long long v8 = v4[6];
  long long v9 = v4[7];
  long long v10 = v4[4];
  *(long long *)((char *)v4 + 296) = v4[5];
  *(long long *)((char *)v4 + 312) = v8;
  *(long long *)((char *)v4 + 328) = v9;
  *(long long *)((char *)v4 + 344) = v7;
  long long v11 = *v4;
  *(long long *)((char *)v4 + 232) = v4[1];
  long long v12 = v4[3];
  *(long long *)((char *)v4 + 248) = v4[2];
  *(long long *)((char *)v4 + 264) = v12;
  *(long long *)((char *)v4 + 280) = v10;
  *((void *)v4 + 51) = *((void *)v4 + 24);
  *(long long *)((char *)v4 + 216) = v11;
  uint64_t v13 = 8 * (*((_DWORD *)v4 + 52) - *((_DWORD *)v4 + 6));
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 1) = 510;
  *((void *)v4 + 2) = v13;
  uint64_t v14 = (uint64_t)v4 + 74;
  if (a4) {
    uint64_t v14 = (uint64_t)v4 + 76;
  }
  sub_1BBA1CA34((unint64_t *)v4, a2 != 0, (unsigned char *)(v14 + a3));
  long long v15 = *(long long *)((char *)v4 + 392);
  v4[10] = *(long long *)((char *)v4 + 376);
  v4[11] = v15;
  *((void *)v4 + 24) = *((void *)v4 + 51);
  long long v16 = *(long long *)((char *)v4 + 328);
  v4[6] = *(long long *)((char *)v4 + 312);
  v4[7] = v16;
  long long v17 = *(long long *)((char *)v4 + 360);
  v4[8] = *(long long *)((char *)v4 + 344);
  v4[9] = v17;
  long long v18 = *(long long *)((char *)v4 + 264);
  v4[2] = *(long long *)((char *)v4 + 248);
  v4[3] = v18;
  long long v19 = *(long long *)((char *)v4 + 296);
  v4[4] = *(long long *)((char *)v4 + 280);
  v4[5] = v19;
  __n128 result = *(__n128 *)((char *)v4 + 232);
  long long *v4 = *(long long *)((char *)v4 + 216);
  v4[1] = (__int128)result;
  return result;
}

uint64_t sub_1BBABAEE4(void *a1, int a2, int a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, _DWORD *a10)
{
  uint64_t v18 = 0;
  uint64_t v27 = 0;
  uint64_t v19 = a1[301];
  uint64_t v20 = (a2 - *((_DWORD *)a4 + 1));
  if ((v20 & 0x80000000) == 0)
  {
    unsigned int v21 = a3 - *((_DWORD *)a4 + 2);
    if ((v21 & 0x80000000) == 0)
    {
      unsigned int v22 = *a4;
      if (v20 >= v22 || v21 >= v22) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = (*(uint64_t (**)(void, unint64_t, void))(**((void **)a4 + 3) + 24))(*((void *)a4 + 3), v20 + a4[1] * (unint64_t)v21 + *((void *)a4 + 4), 0);
      }
    }
  }
  uint64_t v24 = (*(uint64_t (**)(void, void, uint64_t, void, uint64_t, uint64_t))(v19
                                                                                     + 8 * __clz(__rbit32(a9))
                                                                                     + 8))(a9, a9, v18, a4[1], a5, a6);
  if (!*(unsigned char *)(a1[300] + 188))
  {
    ((void (*)(void, uint64_t, uint64_t, char *, uint64_t *))a1[((a9 & 7) == 0) + 278])(a9, a8, a7, (char *)&v27 + 4, &v27);
    unsigned int v25 = (unsigned __int8 *)&unk_1BBB7C988
        + *(unsigned __int8 *)(*(void *)(a1[297] + 1368) + 2001)
        + (uint64_t)(*(__int16 *)(*((void *)a4 + 11)
                               + 2
                               * (((a2 - *((_DWORD *)a4 + 1)) >> 3)
                                + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
    *a10 = (HIDWORD(v27) * *v25 + v27 * v25[70] + *a10) << 8;
  }
  return v24;
}

unint64_t sub_1BBABB098(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned int a6, int a7, int a8, int a9, int a10, unsigned int a11)
{
  int v11 = a8;
  int v249 = a7;
  uint64_t v13 = a4;
  long long v15 = a2;
  unsigned int v17 = a2 - *((_DWORD *)a5 + 1);
  unsigned int v18 = a3 - *((_DWORD *)a5 + 2);
  unint64_t v19 = *a5;
  if (v17 >= v19 || v18 >= v19) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = (__int16 *)(*((void *)a5 + 11) + 2 * ((v17 >> 3) + (v19 >> 3) * (unint64_t)(v18 >> 3)));
  }
  if (a7 == 35) {
    int v249 = *(unsigned __int8 *)(*((void *)a5 + 12)
  }
                              + 16 * ((v17 >> 2) + (v19 >> 2) * (unint64_t)(v18 >> 2)));
  BOOL v22 = a9 > 0;
  uint64_t v252 = a1;
  if (*(unsigned __int8 *)(*(void *)(a1 + 2384) + 2012) >= a8)
  {
    if (a10) {
      return 0;
    }
    BOOL v22 = 0;
    *(_WORD *)double v258 = 0;
  }
  else
  {
    int v23 = ((unsigned __int16)*v21 >> 2) & 3;
    uint64_t v24 = (a8 - 1);
    *(_WORD *)double v258 = 0;
    if (v23 != a9)
    {
      unsigned int v27 = 0;
      LODWORD(v25) = 0;
      int v28 = a8 - 2;
      int v29 = a3;
      int v30 = (1 << (a8 - 1)) + a3;
      do
      {
        int v31 = a11;
        if (v28 >= *(unsigned __int8 *)(*(void *)(a1 + 2384) + 2012))
        {
          int v31 = sub_1BBA8EDCC(a11, v27, (1 << v24) + (int)v15 < *(_DWORD *)(*(void *)(a1 + 2400) + 16), v30 < *(_DWORD *)(*(void *)(a1 + 2400) + 20));
          a1 = v252;
        }
        int v32 = sub_1BBABB098(a1, ((v27 & 1) << v24) + (int)v15, (v27 >> 1 << v24) + v29, a4, a5, a6, v249, v24, __PAIR64__(v27, a9 + 1), v31);
        a1 = v252;
        unint64_t v25 = (v32 + v25);
        ++v27;
      }
      while (v27 != 4);
      return v25;
    }
    int v11 = a8 - 1;
  }
  uint64_t v245 = a4[1];
  uint64_t v33 = *(void *)(a1 + 2392);
  if (*(unsigned char *)(v33 + 352)) {
    BOOL v34 = v11 == 2;
  }
  else {
    BOOL v34 = 0;
  }
  BOOL v35 = v34;
  if (*(unsigned char *)(v33 + 353) && v35)
  {
    int v36 = 0;
    int v37 = 0;
    int v38 = 0;
    long long v39 = (unsigned __int8 *)*((void *)a5 + 17);
    uint64_t v40 = *((void *)v39 + 1);
    unint64_t v41 = (unint64_t)*v39 >> 2;
    do
    {
      v38 += *(unsigned __int8 *)(v40
                                + ((v17 + (v37 & 4)) >> 2)
                                + v41 * (unint64_t)((v18 + (v36 & 0x7FFFFFFC)) >> 2));
      v37 += 4;
      v36 += 2;
    }
    while (v37 != 16);
    BOOL v35 = v38 != 0;
  }
  uint64_t v42 = 0;
  uint64_t v43 = *(unsigned __int8 *)(*((void *)a4 + 18) + 1);
  uint64_t v44 = (a2 - *((_DWORD *)a4 + 1));
  unsigned int v45 = a3 - *((_DWORD *)a4 + 2);
  uint64_t v236 = v21;
  BOOL v241 = v35;
  if ((v44 & 0x80000000) == 0 && (v45 & 0x80000000) == 0)
  {
    uint64_t v42 = 0;
    unsigned int v46 = *a4;
    if (v44 < v46 && v45 < v46)
    {
      uint64_t v47 = (*(uint64_t (**)(void, unint64_t))(**((void **)a4 + 5) + 24))(*((void *)a4 + 5), v44 + a4[1] * (unint64_t)(v45 >> 1) + *((void *)a4 + 6));
      a1 = v252;
      uint64_t v42 = v47;
      LODWORD(v44) = v15 - *((_DWORD *)v13 + 1);
      unsigned int v45 = a3 - *((_DWORD *)v13 + 2);
    }
  }
  uint64_t v48 = 0;
  if ((v44 & 0x80000000) == 0 && (v45 & 0x80000000) == 0)
  {
    uint64_t v48 = 0;
    unsigned int v49 = *v13;
    if (v44 < v49 && v45 < v49)
    {
      uint64_t v50 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v13 + 18) + 96) + 24))(*(void *)(*((void *)v13 + 18) + 96), *(void *)(*((void *)v13 + 18) + 104)+ v44+ *(unsigned __int8 *)(*((void *)v13 + 18) + 1) * (unint64_t)(v45 & 0xFFFFFFFE));
      a1 = v252;
      uint64_t v48 = v50;
    }
  }
  uint64_t v243 = v42;
  uint64_t v51 = 2 * v43;
  uint64_t v52 = *(void *)(a1 + 2400);
  if (v22 || !*(unsigned char *)(v52 + 4699))
  {
    unsigned int v53 = *(void (**)(void *, unsigned __int8 *, uint64_t, void, unsigned __int8 *, uint64_t, void, void, int, void))(v52 + 8176);
    uint64_t v54 = *(void *)(v52 + 8184);
    uint64_t v55 = (void *)(v52 + (v54 >> 1));
    if (v54) {
      unsigned int v53 = *(void (**)(void *, unsigned __int8 *, uint64_t, void, unsigned __int8 *, uint64_t, void, void, int, void))(*v55 + v53);
    }
    v53(v55, v15, a3, *(unsigned int *)(a1 + 2432), v13, 1, a6, a11, v11, *((void *)v13 + 19));
    a1 = v252;
  }
  unsigned int v251 = a3;
  uint64_t v56 = a1;
  sub_1BBA26878(*(void *)(a1 + 2376) + 1424, v249, v11, *((void *)v13 + 19), 2 * v43, v48);
  if (v241)
  {
    uint64_t v57 = *(void *)(v56 + 2400);
    signed int v58 = *(unsigned __int8 **)(v57 + 376);
    uint64_t v59 = 2 * *v58;
    uint64_t v60 = (*(uint64_t (**)(void, void))(**((void **)v58 + 10) + 24))(*((void *)v58 + 10), *((void *)v58 + 11));
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 8144))((2 << v11), (1 << v11), v51, v48, v59, v60);
  }
  uint64_t v61 = *(void *)(v56 + 2408);
  uint64_t v62 = v11 - 2;
  uint64_t v238 = (1 << v11);
  uint64_t v248 = v48;
  unint64_t v25 = (*(unsigned __int16 *)(v61 + 18)
       * (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 8 * v62 + 248))(v238, v238, v42, v245, v48, v51)) >> 8;
  if (a9 >= 1)
  {
    uint64_t v63 = *((void *)v13 + 18);
    uint64_t v64 = *(unsigned __int8 *)(v63 + 1);
    unsigned int v65 = v15 - *((_DWORD *)v13 + 1);
    int v66 = v251;
    if ((v65 & 0x80000000) != 0 || (unsigned int v67 = v251 - *((_DWORD *)v13 + 2), (v67 & 0x80000000) != 0))
    {
      uint64_t v73 = 0;
      uint64_t v72 = 0;
      unint64_t v75 = 0;
      uint64_t v69 = (void *)v252;
    }
    else
    {
      unint64_t v68 = *v13;
      uint64_t v69 = (void *)v252;
      if (v65 < v68 && v67 < v68)
      {
        unint64_t v70 = (v65 >> 1) + *(unsigned __int8 *)(v63 + 1) * (unint64_t)(v67 >> 1);
        uint64_t v71 = *(void *)(v63 + 72);
        uint64_t v72 = *(void *)(v63 + 64) + 2 * v70;
        uint64_t v73 = v71 + 2 * v70;
        uint64_t v74 = *(void *)(v252 + 2400);
        *(_DWORD *)(v74 + 808) = v15;
        *(_DWORD *)(v74 + 812) = v251;
        unint64_t v75 = *((void *)v13 + 12) + 16 * ((v65 >> 2) + (v68 >> 2) * (unint64_t)(v67 >> 2));
        goto LABEL_57;
      }
      uint64_t v73 = 0;
      uint64_t v72 = 0;
      unint64_t v75 = 0;
    }
    uint64_t v74 = v69[300];
    *(_DWORD *)(v74 + 808) = v15;
    *(_DWORD *)(v74 + 812) = v251;
LABEL_57:
    *(void *)(v74 + 864) = v75;
    int v76 = v69;
    sub_1BBABC324(v69, v15, v251, v11, v236, v42, v245, v248, v51, v248, v51, v72, v73, v64, (BOOL *)&v258[1], v258, 0, 0);
    if (!v241)
    {
      int v96 = v258[1];
      int v97 = v258[0];
LABEL_165:
      sub_1BBAE40E4(v13, (int)v15, v66, 1 << v62, 1, v96, 1);
      sub_1BBAE40E4(v13, (int)v15, v66, 1 << v62, 2, v97, 1);
      return v25;
    }
    uint64_t v235 = v51;
    char v231 = v11 - 2;
    uint64_t v77 = *(unsigned __int8 **)(v76[300] + 376);
    uint64_t v78 = *v77;
    int v79 = v11;
    int v80 = (char *)*((void *)v77 + 7);
    int v81 = (char *)*((void *)v77 + 8);
    uint64_t v82 = 2 * v78;
    uint64_t v237 = (*(uint64_t (**)(void, void))(**((void **)v77 + 10) + 24))(*((void *)v77 + 10), *((void *)v77 + 11));
    unsigned int v239 = 0;
    __int16 v257 = 0;
    uint64_t v83 = v76[300];
    BOOL v84 = *(long long **)(v83 + 944);
    *(_DWORD *)(v83 + 808) = v15;
    *(_DWORD *)(v83 + 812) = v251;
    int v242 = v79;
    if ((v79 - 1) <= 1)
    {
      int v85 = 26 - v249;
      if (v249 >= 26) {
        int v85 = v249 - 26;
      }
      int v86 = v85 < 5;
      int v87 = 10 - v249;
      if (v249 >= 10) {
        int v87 = v249 - 10;
      }
      if (v87 < 5) {
        int v86 = 2;
      }
      unsigned int v239 = v86;
    }
    unsigned int v88 = 0;
    unsigned int v89 = v15 - *((_DWORD *)v13 + 1);
    if ((v89 & 0x80000000) == 0)
    {
      unsigned int v90 = v251 - *((_DWORD *)v13 + 2);
      if ((v90 & 0x80000000) == 0)
      {
        unsigned int v88 = 0;
        unint64_t v91 = *v13;
        if (v89 < v91 && v90 < v91) {
          unsigned int v88 = (__int16 *)(*((void *)v13 + 11)
        }
                          + 2 * ((v89 >> 3) + (v91 >> 3) * (unint64_t)(v90 >> 3)));
      }
    }
    sub_1BBABC324(v76, v15, v251, v79, v88, v243, v245, v237, 2 * v78, v237, 2 * v78, (uint64_t)v80, (uint64_t)v81, v78, (BOOL *)&v257 + 1, &v257, 1, 1);
    unsigned int v92 = v15 - *((_DWORD *)v13 + 1);
    unsigned int v93 = v251 - *((_DWORD *)v13 + 2);
    if ((v92 & 0x80000000) != 0 || (v93 & 0x80000000) != 0)
    {
      uint64_t v95 = v252;
    }
    else
    {
      unsigned int v94 = *v13;
      uint64_t v95 = v252;
      if (v92 < v94 && v93 < v94)
      {
        *(unsigned char *)(*(void *)(*((void *)v13 + 18) + 16)
                 + (v92 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((void *)v13 + 18) + 1) >> 2) * (v93 >> 3)) = 0;
        unsigned int v92 = v15 - *((_DWORD *)v13 + 1);
        unsigned int v93 = v251 - *((_DWORD *)v13 + 2);
      }
    }
    if ((v92 & 0x80000000) == 0 && (v93 & 0x80000000) == 0)
    {
      unsigned int v98 = *v13;
      if (v92 < v98 && v93 < v98) {
        *(unsigned char *)(*(void *)(*((void *)v13 + 18) + 24)
      }
                 + (v92 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((void *)v13 + 18) + 1) >> 2) * (v93 >> 3)) = 0;
    }
    *(void *)(*(void *)(v95 + 2400) + 824) = *(unsigned __int8 *)(*((void *)v13 + 17) + 1);
    unint64_t v255 = 0;
    unint64_t v256 = 0;
    uint64_t v99 = *(void *)(v95 + 2408);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v99 + 376))(v243, v245, v248, v235, v238, v238, &v256, &v255);
    uint64_t v100 = *(unsigned __int16 *)(v99 + 18);
    unint64_t v255 = (v255 * v100) >> 8;
    unint64_t v256 = (v256 * v100) >> 8;
    int __c = v258[1];
    if (!v258[1])
    {
      int v228 = 0;
      goto LABEL_94;
    }
    long long v101 = v84[2];
    long long v102 = v84[4];
    long long v103 = v84[5];
    *(long long *)((char *)v84 + 264) = v84[3];
    *(long long *)((char *)v84 + 280) = v102;
    *(long long *)((char *)v84 + 248) = v101;
    long long v104 = *v84;
    *(long long *)((char *)v84 + 232) = v84[1];
    long long v105 = v84[6];
    long long v106 = v84[8];
    long long v107 = v84[9];
    *(long long *)((char *)v84 + 328) = v84[7];
    *(long long *)((char *)v84 + 344) = v106;
    *(long long *)((char *)v84 + 296) = v103;
    *(long long *)((char *)v84 + 312) = v105;
    long long v108 = v84[11];
    *(long long *)((char *)v84 + 376) = v84[10];
    *(long long *)((char *)v84 + 392) = v108;
    *(long long *)((char *)v84 + 360) = v107;
    *((void *)v84 + 51) = *((void *)v84 + 24);
    *(long long *)((char *)v84 + 216) = v104;
    uint64_t v109 = 8 * (*((_DWORD *)v84 + 52) - *((_DWORD *)v84 + 6));
    *((void *)v84 + 4) = 0;
    *((void *)v84 + 1) = 510;
    *((void *)v84 + 2) = v109;
    unsigned int v110 = v15 - *((_DWORD *)v13 + 1);
    if ((v110 & 0x80000000) != 0 || (unsigned int v111 = v251 - *((_DWORD *)v13 + 2), (v111 & 0x80000000) != 0))
    {
      unint64_t v114 = 0;
      uint64_t v113 = v252;
    }
    else
    {
      unsigned int v112 = *v13;
      uint64_t v113 = v252;
      if (v110 < v112 && v111 < v112)
      {
        *(void *)(*(void *)(v252 + 2400) + 880) = *(void *)(*((void *)v13 + 18) + 64)
                                                      + 2
                                                      * ((v110 >> 1)
                                                       + *(unsigned __int8 *)(*((void *)v13 + 18) + 1)
                                                       * (unint64_t)(v111 >> 1));
        unint64_t v114 = *(void *)(*((void *)v13 + 18) + 16)
             + (v110 >> 3)
             + ((unint64_t)*(unsigned __int8 *)(*((void *)v13 + 18) + 1) >> 2) * (v111 >> 3);
LABEL_93:
        *(void *)(*(void *)(v113 + 2400) + 928) = v114;
        sub_1BBAB5BB4(v113, (int)v15, v251, v79, v239, 1);
        int v228 = ((*((_DWORD *)v84 + 4) + 8 * (*((_DWORD *)v84 + 6) - *((_DWORD *)v84 + 52))) << 8)
             - *((_DWORD *)v84 + 2)
             + 510;
        long long v115 = *(long long *)((char *)v84 + 392);
        v84[10] = *(long long *)((char *)v84 + 376);
        v84[11] = v115;
        *((void *)v84 + 24) = *((void *)v84 + 51);
        long long v116 = *(long long *)((char *)v84 + 328);
        v84[6] = *(long long *)((char *)v84 + 312);
        v84[7] = v116;
        long long v117 = *(long long *)((char *)v84 + 360);
        v84[8] = *(long long *)((char *)v84 + 344);
        v84[9] = v117;
        long long v118 = *(long long *)((char *)v84 + 264);
        v84[2] = *(long long *)((char *)v84 + 248);
        v84[3] = v118;
        long long v119 = *(long long *)((char *)v84 + 296);
        v84[4] = *(long long *)((char *)v84 + 280);
        v84[5] = v119;
        long long v120 = *(long long *)((char *)v84 + 232);
        *BOOL v84 = *(long long *)((char *)v84 + 216);
        v84[1] = v120;
LABEL_94:
        int v226 = v258[0];
        if (v258[0])
        {
          long long v121 = v84[2];
          long long v122 = v84[4];
          long long v123 = v84[5];
          *(long long *)((char *)v84 + 264) = v84[3];
          *(long long *)((char *)v84 + 280) = v122;
          *(long long *)((char *)v84 + 248) = v121;
          long long v124 = *v84;
          *(long long *)((char *)v84 + 232) = v84[1];
          long long v125 = v84[6];
          long long v126 = v84[8];
          long long v127 = v84[9];
          *(long long *)((char *)v84 + 328) = v84[7];
          *(long long *)((char *)v84 + 344) = v126;
          *(long long *)((char *)v84 + 296) = v123;
          *(long long *)((char *)v84 + 312) = v125;
          long long v128 = v84[11];
          *(long long *)((char *)v84 + 376) = v84[10];
          *(long long *)((char *)v84 + 392) = v128;
          *(long long *)((char *)v84 + 360) = v127;
          *((void *)v84 + 51) = *((void *)v84 + 24);
          *(long long *)((char *)v84 + 216) = v124;
          uint64_t v129 = 8 * (*((_DWORD *)v84 + 52) - *((_DWORD *)v84 + 6));
          *((void *)v84 + 4) = 0;
          *((void *)v84 + 1) = 510;
          *((void *)v84 + 2) = v129;
          unsigned int v130 = v15 - *((_DWORD *)v13 + 1);
          if ((v130 & 0x80000000) != 0
            || (unsigned int v131 = v251 - *((_DWORD *)v13 + 2), (v131 & 0x80000000) != 0)
            || (unsigned int v132 = *v13, v130 >= v132)
            || v131 >= v132)
          {
            unint64_t v133 = 0;
            *(void *)(*(void *)(v252 + 2400) + 888) = 0;
          }
          else
          {
            *(void *)(*(void *)(v252 + 2400) + 888) = *(void *)(*((void *)v13 + 18) + 72)
                                                          + 2
                                                          * ((v130 >> 1)
                                                           + *(unsigned __int8 *)(*((void *)v13 + 18) + 1)
                                                           * (unint64_t)(v131 >> 1));
            unint64_t v133 = *(void *)(*((void *)v13 + 18) + 24)
                 + (v130 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((void *)v13 + 18) + 1) >> 2) * (v131 >> 3);
          }
          *(void *)(*(void *)(v252 + 2400) + 936) = v133;
          sub_1BBAB5BB4(v252, (int)v15, v251, v79, v239, 2);
          uint64_t v134 = v252;
          int v230 = ((*((_DWORD *)v84 + 4) + 8 * (*((_DWORD *)v84 + 6) - *((_DWORD *)v84 + 52))) << 8)
               - *((_DWORD *)v84 + 2)
               + 510;
          long long v135 = *(long long *)((char *)v84 + 392);
          v84[10] = *(long long *)((char *)v84 + 376);
          v84[11] = v135;
          *((void *)v84 + 24) = *((void *)v84 + 51);
          long long v136 = *(long long *)((char *)v84 + 328);
          v84[6] = *(long long *)((char *)v84 + 312);
          v84[7] = v136;
          long long v137 = *(long long *)((char *)v84 + 360);
          v84[8] = *(long long *)((char *)v84 + 344);
          v84[9] = v137;
          long long v138 = *(long long *)((char *)v84 + 264);
          v84[2] = *(long long *)((char *)v84 + 248);
          v84[3] = v138;
          long long v139 = *(long long *)((char *)v84 + 296);
          v84[4] = *(long long *)((char *)v84 + 280);
          v84[5] = v139;
          long long v140 = *(long long *)((char *)v84 + 232);
          *BOOL v84 = *(long long *)((char *)v84 + 216);
          v84[1] = v140;
        }
        else
        {
          int v230 = 0;
          uint64_t v134 = v252;
        }
        uint64_t v141 = *(void *)(v134 + 2408);
        unint64_t v227 = v256;
        int v234 = *(unsigned __int16 *)(v141 + 8);
        unint64_t v229 = v255;
        unint64_t v253 = 0;
        unint64_t v254 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v141 + 376))(v243, v245, v237, 2 * v78, v238, v238, &v254, &v253);
        uint64_t v142 = *(unsigned __int16 *)(v141 + 18);
        unint64_t v253 = (v253 * v142) >> 8;
        unint64_t v254 = (v254 * v142) >> 8;
        uint64_t v143 = *(void *)(v252 + 2400);
        *(void *)(v143 + 824) = v78;
        **(unsigned char **)(*(void *)(v143 + 376) + 16) = 1;
        **(unsigned char **)(*(void *)(*(void *)(v252 + 2400) + 376) + 24) = 1;
        int v144 = HIBYTE(v257);
        if (HIBYTE(v257))
        {
          long long v145 = v84[2];
          long long v146 = v84[4];
          long long v147 = v84[5];
          *(long long *)((char *)v84 + 264) = v84[3];
          *(long long *)((char *)v84 + 280) = v146;
          *(long long *)((char *)v84 + 248) = v145;
          long long v148 = *v84;
          *(long long *)((char *)v84 + 232) = v84[1];
          long long v149 = v84[6];
          long long v150 = v84[8];
          long long v151 = v84[9];
          *(long long *)((char *)v84 + 328) = v84[7];
          *(long long *)((char *)v84 + 344) = v150;
          *(long long *)((char *)v84 + 296) = v147;
          *(long long *)((char *)v84 + 312) = v149;
          long long v152 = v84[11];
          *(long long *)((char *)v84 + 376) = v84[10];
          *(long long *)((char *)v84 + 392) = v152;
          *(long long *)((char *)v84 + 360) = v151;
          *((void *)v84 + 51) = *((void *)v84 + 24);
          *(long long *)((char *)v84 + 216) = v148;
          uint64_t v153 = 8 * (*((_DWORD *)v84 + 52) - *((_DWORD *)v84 + 6));
          *((void *)v84 + 4) = 0;
          *((void *)v84 + 1) = 510;
          *((void *)v84 + 2) = v153;
          *(void *)(*(void *)(v252 + 2400) + 880) = v80;
          *(void *)(*(void *)(v252 + 2400) + 928) = *(void *)(*(void *)(*(void *)(v252 + 2400) + 376)
                                                                    + 16);
          sub_1BBAB5BB4(v252, (int)v15, v251, v79, v239, 1);
          int v154 = ((*((_DWORD *)v84 + 4) + 8 * (*((_DWORD *)v84 + 6) - *((_DWORD *)v84 + 52))) << 8)
               - *((_DWORD *)v84 + 2)
               + 510;
          long long v155 = *(long long *)((char *)v84 + 360);
          long long v156 = *(long long *)((char *)v84 + 392);
          v84[10] = *(long long *)((char *)v84 + 376);
          v84[11] = v156;
          *((void *)v84 + 24) = *((void *)v84 + 51);
          long long v157 = *(long long *)((char *)v84 + 296);
          long long v158 = *(long long *)((char *)v84 + 328);
          long long v159 = *(long long *)((char *)v84 + 344);
          v84[6] = *(long long *)((char *)v84 + 312);
          v84[7] = v158;
          v84[8] = v159;
          v84[9] = v155;
          long long v160 = *(long long *)((char *)v84 + 264);
          long long v161 = *(long long *)((char *)v84 + 280);
          v84[2] = *(long long *)((char *)v84 + 248);
          v84[3] = v160;
          long long v162 = *(long long *)((char *)v84 + 232);
          v84[4] = v161;
          v84[5] = v157;
          *BOOL v84 = *(long long *)((char *)v84 + 216);
          v84[1] = v162;
        }
        else
        {
          int v154 = 0;
        }
        int v250 = (int)v15;
        int v246 = v257;
        if ((_BYTE)v257)
        {
          long long v163 = v84[2];
          long long v164 = v84[4];
          long long v165 = v84[5];
          *(long long *)((char *)v84 + 264) = v84[3];
          *(long long *)((char *)v84 + 280) = v164;
          *(long long *)((char *)v84 + 248) = v163;
          long long v166 = *v84;
          *(long long *)((char *)v84 + 232) = v84[1];
          long long v167 = v84[6];
          long long v168 = v84[8];
          long long v169 = v84[9];
          *(long long *)((char *)v84 + 328) = v84[7];
          *(long long *)((char *)v84 + 344) = v168;
          *(long long *)((char *)v84 + 296) = v165;
          *(long long *)((char *)v84 + 312) = v167;
          long long v170 = v84[11];
          *(long long *)((char *)v84 + 376) = v84[10];
          *(long long *)((char *)v84 + 392) = v170;
          *(long long *)((char *)v84 + 360) = v169;
          *((void *)v84 + 51) = *((void *)v84 + 24);
          *(long long *)((char *)v84 + 216) = v166;
          uint64_t v171 = 8 * (*((_DWORD *)v84 + 52) - *((_DWORD *)v84 + 6));
          *((void *)v84 + 4) = 0;
          *((void *)v84 + 1) = 510;
          *((void *)v84 + 2) = v171;
          uint64_t v172 = v252;
          *(void *)(*(void *)(v252 + 2400) + 888) = v81;
          *(void *)(*(void *)(v252 + 2400) + 936) = *(void *)(*(void *)(*(void *)(v252 + 2400) + 376)
                                                                    + 24);
          int v66 = v251;
          sub_1BBAB5BB4(v252, (int)v15, v251, v242, v239, 2);
          int v173 = ((*((_DWORD *)v84 + 4) + 8 * (*((_DWORD *)v84 + 6) - *((_DWORD *)v84 + 52))) << 8)
               - *((_DWORD *)v84 + 2)
               + 510;
          long long v174 = *(long long *)((char *)v84 + 360);
          long long v175 = *(long long *)((char *)v84 + 392);
          v84[10] = *(long long *)((char *)v84 + 376);
          v84[11] = v175;
          *((void *)v84 + 24) = *((void *)v84 + 51);
          long long v176 = *(long long *)((char *)v84 + 296);
          long long v177 = *(long long *)((char *)v84 + 328);
          long long v178 = *(long long *)((char *)v84 + 344);
          v84[6] = *(long long *)((char *)v84 + 312);
          v84[7] = v177;
          v84[8] = v178;
          v84[9] = v174;
          long long v179 = *(long long *)((char *)v84 + 264);
          long long v180 = *(long long *)((char *)v84 + 280);
          v84[2] = *(long long *)((char *)v84 + 248);
          v84[3] = v179;
          long long v181 = *(long long *)((char *)v84 + 232);
          v84[4] = v180;
          v84[5] = v176;
          *BOOL v84 = *(long long *)((char *)v84 + 216);
          v84[1] = v181;
        }
        else
        {
          int v173 = 0;
          uint64_t v172 = v252;
          int v66 = v251;
        }
        int v182 = *(unsigned __int16 *)(*(void *)(v172 + 2408) + 8);
        unint64_t v183 = v253;
        if (v144 && v227 + ((v228 * v234) >> 8) > v254 + ((v154 * v182) >> 8))
        {
          int v244 = v173;
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v172 + 2400) + 8152))((2 << v242), v238, v82, v237, v235, v248);
          unsigned int v184 = v250 - *((_DWORD *)v13 + 1);
          unint64_t v240 = v183;
          if ((v184 & 0x80000000) != 0 || (unsigned int v185 = v66 - *((_DWORD *)v13 + 2), (v185 & 0x80000000) != 0))
          {
            int v190 = v66;
            int v186 = 0;
            uint64_t v189 = v13;
            uint64_t v188 = *((void *)v13 + 18);
          }
          else
          {
            int v186 = 0;
            unsigned int v187 = *v13;
            uint64_t v188 = *((void *)v13 + 18);
            uint64_t v189 = v13;
            if (v184 >= v187)
            {
              int v190 = v251;
            }
            else
            {
              int v190 = v251;
              if (v185 < v187) {
                int v186 = (char *)(*(void *)(v188 + 64)
              }
                              + 2 * ((v184 >> 1) + *(unsigned __int8 *)(v188 + 1) * (unint64_t)(v185 >> 1)));
            }
          }
          uint64_t v196 = 2 * *(unsigned __int8 *)(v188 + 1);
          uint64_t v197 = (int)v238;
          do
          {
            --v197;
            memcpy(v186, v80, 2 * (int)v238);
            v186 += v196;
            v80 += v82;
          }
          while (v197);
          uint64_t v13 = v189;
          unsigned int v191 = v250 - *((_DWORD *)v189 + 1);
          int v192 = &v254;
          int v96 = 1;
          if ((v191 & 0x80000000) != 0)
          {
            int v66 = v190;
            uint64_t v172 = v252;
            int v173 = v244;
            unint64_t v183 = v240;
LABEL_134:
            unint64_t v200 = *v192;
            if (v246 && v229 + ((v230 * v234) >> 8) > v183 + ((v173 * v182) >> 8))
            {
              int __ca = v96;
              int v201 = v66;
              uint64_t v202 = *(void *)(v172 + 2400);
              int v203 = v13;
              uint64_t v204 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(v202 + 376) + 80) + 24))(*(void *)(*(void *)(v202 + 376) + 80), *(void *)(*(void *)(v202 + 376) + 88) + 1);
              uint64_t v205 = 0;
              unsigned int v206 = v250 - *((_DWORD *)v203 + 1) + 1;
              if ((v206 & 0x80000000) != 0)
              {
                uint64_t v208 = v238;
              }
              else
              {
                unsigned int v207 = v201 - *((_DWORD *)v203 + 2);
                uint64_t v208 = v238;
                if ((v207 & 0x80000000) == 0)
                {
                  uint64_t v205 = 0;
                  unsigned int v209 = *v203;
                  if (v206 < v209 && v207 < v209) {
                    uint64_t v205 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v203 + 18)
                  }
                                                                                             + 96)
                                                                               + 24))(*(void *)(*((void *)v203 + 18) + 96), *(void *)(*((void *)v203 + 18) + 104)+ v206+ *(unsigned __int8 *)(*((void *)v203 + 18) + 1) * (unint64_t)(v207 & 0xFFFFFFFE));
                }
              }
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v202 + 8152))((2 << v242), v208, v82, v204, v235, v205);
              unsigned int v213 = v250 - *((_DWORD *)v203 + 1);
              if ((v213 & 0x80000000) != 0 || (unsigned int v214 = v201 - *((_DWORD *)v203 + 2), (v214 & 0x80000000) != 0))
              {
                int v215 = 0;
                long long v15 = v203;
                uint64_t v217 = *((void *)v203 + 18);
              }
              else
              {
                int v215 = 0;
                unsigned int v216 = *v203;
                uint64_t v217 = *((void *)v203 + 18);
                long long v15 = v203;
                if (v213 < v216 && v214 < v216) {
                  int v215 = (char *)(*(void *)(v217 + 72)
                }
                                + 2 * ((v213 >> 1) + *(unsigned __int8 *)(v217 + 1) * (unint64_t)(v214 >> 1)));
              }
              uint64_t v218 = 2 * *(unsigned __int8 *)(v217 + 1);
              uint64_t v219 = (int)v208;
              do
              {
                --v219;
                memcpy(v215, v81, 2 * (int)v208);
                v215 += v218;
                v81 += v82;
              }
              while (v219);
              uint64_t v13 = v15;
              int v220 = *((_DWORD *)v15 + 1);
              LODWORD(v15) = v250;
              unsigned int v221 = v250 - v220;
              int v66 = v201;
              if ((v221 & 0x80000000) == 0)
              {
                unsigned int v222 = v201 - *((_DWORD *)v13 + 2);
                if ((v222 & 0x80000000) == 0)
                {
                  unsigned int v223 = *v13;
                  if (v221 < v223 && v222 < v223) {
                    *(unsigned char *)(*(void *)(*((void *)v13 + 18) + 24)
                  }
                             + (v221 >> 3)
                             + ((unint64_t)*(unsigned __int8 *)(*((void *)v13 + 18) + 1) >> 2) * (v222 >> 3)) = 1;
                }
              }
              unint64_t v25 = v253 + v200;
              int v97 = 1;
              int v96 = __ca;
            }
            else
            {
              LODWORD(v15) = v250;
              unsigned int v210 = v250 - *((_DWORD *)v13 + 1);
              if ((v210 & 0x80000000) == 0)
              {
                unsigned int v211 = v66 - *((_DWORD *)v13 + 2);
                if ((v211 & 0x80000000) == 0)
                {
                  unsigned int v212 = *v13;
                  if (v210 < v212 && v211 < v212) {
                    *(unsigned char *)(*(void *)(*((void *)v13 + 18) + 24)
                  }
                             + (v210 >> 3)
                             + ((unint64_t)*(unsigned __int8 *)(*((void *)v13 + 18) + 1) >> 2) * (v211 >> 3)) = 0;
                }
              }
              unint64_t v25 = v255 + v200;
              int v97 = v226;
            }
            LOBYTE(v62) = v231;
            goto LABEL_165;
          }
          int v66 = v190;
          unsigned int v193 = v190 - *((_DWORD *)v13 + 2);
          uint64_t v172 = v252;
          int v173 = v244;
          unint64_t v183 = v240;
          if ((v193 & 0x80000000) != 0) {
            goto LABEL_134;
          }
          unsigned int v198 = *v13;
          char v195 = 1;
          if (v191 >= v198 || v193 >= v198) {
            goto LABEL_134;
          }
        }
        else
        {
          unsigned int v191 = v250 - *((_DWORD *)v13 + 1);
          int v192 = &v256;
          if ((v191 & 0x80000000) != 0)
          {
            int v96 = __c;
            goto LABEL_134;
          }
          unsigned int v193 = v66 - *((_DWORD *)v13 + 2);
          int v96 = __c;
          if ((v193 & 0x80000000) != 0) {
            goto LABEL_134;
          }
          unsigned int v194 = *v13;
          if (v191 >= v194 || v193 >= v194) {
            goto LABEL_134;
          }
          char v195 = 0;
        }
        *(unsigned char *)(*(void *)(*((void *)v13 + 18) + 16)
                 + (v191 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((void *)v13 + 18) + 1) >> 2) * (v193 >> 3)) = v195;
        goto LABEL_134;
      }
      unint64_t v114 = 0;
    }
    *(void *)(*(void *)(v113 + 2400) + 880) = 0;
    goto LABEL_93;
  }
  return v25;
}

uint64_t sub_1BBABC324(void *a1, unsigned int a2, unsigned int a3, int a4, __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, BOOL *a15, unsigned char *a16, char a17, char a18)
{
  int v21 = 1 << a4;
  int v42 = 1 << a4 << a4;
  BOOL v22 = (char *)a1 + 2 * (1 << a4 << a4);
  uint64_t v23 = a1[297];
  uint64_t v45 = a4 - 2;
  uint64_t v24 = v23 + 8 * v45;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, char *))(v24 + 2080))(a6, a7, a8, a9, a1, v22);
  unint64_t v25 = (void (**)(void *))(v24 + 1928);
  int v26 = (void (**)(void *))(v23 + 1976);
  if (a17) {
    unsigned int v27 = v26;
  }
  else {
    unsigned int v27 = v25;
  }
  (*v27)(a1);
  if (a18) {
    int v28 = (void (**)(void *))v26;
  }
  else {
    int v28 = (void (**)(void *))v25;
  }
  (*v28)(v22);
  __int16 v29 = *a5;
  if (*(unsigned char *)(a1[299] + 128))
  {
    int v30 = *(unsigned __int8 *)(a1[298] + 2009) + ~((v29 & 3) + a4);
    *a15 = sub_1BBAB8904((uint64_t)a1, a2, a3, (v29 >> 9), (uint64_t)a1, v21, a12, a14, a4, v30, 1);
    uint64_t v31 = a13;
    char v32 = sub_1BBAB8904((uint64_t)a1, a2, a3, (*a5 >> 9), (uint64_t)v22, v21, a13, a14, a4, v30, 2);
    uint64_t v33 = a15;
    uint64_t v34 = a14;
  }
  else
  {
    uint64_t v34 = a14;
    *a15 = sub_1BBABA04C((uint64_t)a1, a2, a3, (v29 >> 9), (uint64_t)a1, v21, a12, a14, a4, 1, 1);
    uint64_t v31 = a13;
    char v32 = sub_1BBABA04C((uint64_t)a1, a2, a3, (*a5 >> 9), (uint64_t)v22, v21, a13, a14, a4, 2, 1);
    uint64_t v33 = a15;
  }
  *a16 = v32;
  if (*v33)
  {
    int v35 = 1 << a4;
    sub_1BBABA4BC((uint64_t)a1, *a5, a12, v34, (uint64_t)a1, 1 << a4, a4, 1u);
  }
  else
  {
    bzero(a1, 2 * v42);
    int v35 = 1 << a4;
  }
  if (*a16) {
    sub_1BBABA4BC((uint64_t)a1, *a5, v31, v34, (uint64_t)v22, v35, a4, 2u);
  }
  else {
    bzero(v22, 2 * v42);
  }
  if (a18) {
    unsigned int v36 = -1;
  }
  else {
    unsigned int v36 = 256;
  }
  if (*a16) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  if (a17) {
    unsigned int v38 = -1;
  }
  else {
    unsigned int v38 = 256;
  }
  if (*v33) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, void *, char *, uint64_t, uint64_t))(a1[297] + 8 * v45 + 1952);

  return v40(a10, a11, a1, v22, v39, v37);
}

unint64_t sub_1BBABC664(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, int a11, unsigned int a12, _DWORD *a13)
{
  int v274 = a8;
  uint64_t v14 = a4;
  long long v15 = a3;
  uint64_t v16 = a2;
  unsigned int v18 = 0;
  unsigned int v19 = a2 - *((_DWORD *)a5 + 1);
  unsigned int v20 = a3 - *((_DWORD *)a5 + 2);
  if ((v19 & 0x80000000) == 0 && (v20 & 0x80000000) == 0)
  {
    unint64_t v21 = *a5;
    if (v19 >= v21 || v20 >= v21) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = (unsigned __int16 *)(*((void *)a5 + 11)
    }
                               + 2 * ((v19 >> 3) + (v21 >> 3) * (unint64_t)(v20 >> 3)));
  }
  uint64_t v23 = *(unsigned __int8 *)(*((void *)a4 + 17) + 1);
  *(_WORD *)long long v284 = 0;
  if (a8 == 35) {
    int v274 = *(unsigned __int8 *)(*((void *)a5 + 12) + 16 * ((v19 >> 2) + ((unint64_t)*a5 >> 2) * (v20 >> 2)));
  }
  int v24 = a10;
  uint64_t v25 = *(void *)(a1 + 2384);
  uint64_t v277 = a1;
  if (*(unsigned __int8 *)(v25 + 2011) < a9)
  {
    int v265 = a9 - 1;
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(v25 + 2012) >= a9)
  {
    if (a11) {
      return 0;
    }
    int v265 = a9;
    goto LABEL_23;
  }
  int v265 = a9 - 1;
  if (((*v18 >> 2) & 3) == a10)
  {
LABEL_23:
    uint64_t v35 = 0;
    uint64_t v267 = a4[1];
    uint64_t v36 = (a2 - *((_DWORD *)a4 + 1));
    unsigned int v37 = a3 - *((_DWORD *)a4 + 2);
    if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
    {
      uint64_t v35 = 0;
      unsigned int v38 = *a4;
      if (v36 < v38 && v37 < v38)
      {
        uint64_t v39 = (*(uint64_t (**)(void, unint64_t))(**((void **)a4 + 5) + 24))(*((void *)a4 + 5), v36 + a4[1] * (unint64_t)(v37 >> 1) + *((void *)a4 + 6));
        a1 = v277;
        uint64_t v35 = v39;
        int v24 = a10;
        LODWORD(v36) = v16 - *((_DWORD *)v14 + 1);
        unsigned int v37 = v15 - *((_DWORD *)v14 + 2);
      }
    }
    uint64_t v40 = 0;
    if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
    {
      uint64_t v40 = 0;
      unsigned int v41 = *v14;
      if (v36 < v41 && v37 < v41)
      {
        uint64_t v42 = *(void *)&v14[8 * a6 + 136];
        int v43 = v24;
        uint64_t v44 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v42 + 96) + 24))(*(void *)(v42 + 96), *(void *)(v42 + 104)+ v36+ *(unsigned __int8 *)(v42 + 1) * (unint64_t)(v37 & 0xFFFFFFFE));
        a1 = v277;
        uint64_t v40 = v44;
        int v24 = v43;
      }
    }
    uint64_t v45 = *(void *)(a1 + 2392);
    if (*(unsigned char *)(v45 + 352)) {
      BOOL v46 = v265 == 2;
    }
    else {
      BOOL v46 = 0;
    }
    BOOL v47 = v46;
    if (*(unsigned char *)(v45 + 353) && v47)
    {
      int v48 = 0;
      int v49 = 0;
      int v50 = 0;
      uint64_t v51 = (unsigned __int8 *)*((void *)a5 + 17);
      uint64_t v52 = *((void *)v51 + 1);
      unint64_t v53 = (unint64_t)*v51 >> 2;
      do
      {
        v50 += *(unsigned __int8 *)(v52
                                  + (((v49 & 4) + v16 - *((_DWORD *)a5 + 1)) >> 2)
                                  + v53
                                  * (unint64_t)(((v48 & 0x7FFFFFFC) + v15 - *((_DWORD *)a5 + 2)) >> 2));
        v49 += 4;
        v48 += 2;
      }
      while (v49 != 16);
      BOOL v47 = v50 != 0;
    }
    BOOL v261 = v47;
    uint64_t v54 = 2 * v23;
    uint64_t v55 = (1 << v265);
    uint64_t v56 = *(void *)(a1 + 2400);
    if (v24 > 0 || !*(unsigned char *)(v56 + 4699))
    {
      uint64_t v57 = *(void (**)(void *, uint64_t, unsigned __int8 *, void, unsigned __int8 *, void, void, void, int, void))(v56 + 8176);
      uint64_t v58 = *(void *)(v56 + 8184);
      uint64_t v59 = (void *)(v56 + (v58 >> 1));
      if (v58) {
        uint64_t v57 = *(void (**)(void *, uint64_t, unsigned __int8 *, void, unsigned __int8 *, void, void, void, int, void))(*v59 + v57);
      }
      v57(v59, v16, v15, *(unsigned int *)(a1 + 2432), v14, a6, a7, a12, v265, *((void *)v14 + 19));
      a1 = v277;
    }
    uint64_t v60 = v40;
    uint64_t v61 = v40;
    uint64_t v62 = (void *)a1;
    sub_1BBA26878(*(void *)(a1 + 2376) + 1424, v274, v265, *((void *)v14 + 19), v54, v61);
    uint64_t v276 = (1 << v265);
    uint64_t v272 = v54;
    uint64_t v263 = v35;
    if (v261)
    {
      uint64_t v63 = v14;
      uint64_t v64 = v62[300];
      unsigned int v65 = *(unsigned __int8 **)(v64 + 376);
      uint64_t v66 = 2 * *v65;
      uint64_t v67 = (*(uint64_t (**)(void, void))(**((void **)v65 + 10) + 24))(*((void *)v65 + 10), *((void *)v65 + 11));
      unint64_t v68 = *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 8144);
      uint64_t v14 = v63;
      uint64_t v55 = (1 << v265);
      uint64_t v69 = v66;
      uint64_t v35 = v263;
      v68((2 << v265), v276, v54, v60, v69, v67);
    }
    uint64_t v70 = 0;
    uint64_t v71 = v62[300];
    *(_DWORD *)(v71 + 808) = v16;
    *(_DWORD *)(v71 + 812) = v15;
    uint64_t v72 = *((void *)v14 + 12);
    unint64_t v73 = ((v16 - *((_DWORD *)v14 + 1)) >> 2)
        + ((unint64_t)*v14 >> 2) * ((v15 - *((_DWORD *)v14 + 2)) >> 2);
    *(void *)(v71 + 864) = v72 + 16 * v73;
    *(unsigned char *)(v72 + 16 * v73) = *(unsigned char *)(*((void *)a5 + 12)
                                          + 16
                                          * (((v16 - *((_DWORD *)a5 + 1)) >> 2)
                                           + ((unint64_t)*a5 >> 2)
                                           * ((v15 - *((_DWORD *)a5 + 2)) >> 2)));
    unsigned int v74 = v16 - *((_DWORD *)v14 + 1);
    if ((v74 & 0x80000000) != 0) {
      goto LABEL_56;
    }
    unsigned int v75 = v15 - *((_DWORD *)v14 + 2);
    int v76 = 0;
    uint64_t v77 = 0;
    if ((v75 & 0x80000000) != 0) {
      goto LABEL_57;
    }
    uint64_t v70 = 0;
    unint64_t v78 = *v14;
    if (v74 >= v78)
    {
LABEL_56:
      int v76 = 0;
      uint64_t v77 = 0;
    }
    else
    {
      int v76 = 0;
      uint64_t v77 = 0;
      if (v75 < v78)
      {
        int v76 = (__int16 *)(*((void *)v14 + 11)
                        + 2 * ((v74 >> 3) + (v78 >> 3) * (unint64_t)(v75 >> 3)));
        uint64_t v79 = *(void *)&v14[8 * a6 + 136];
        unint64_t v80 = (v74 >> 1) + *(unsigned __int8 *)(v79 + 1) * (unint64_t)(v75 >> 1);
        uint64_t v81 = *(void *)(v79 + 72);
        uint64_t v70 = *(void *)(v79 + 64) + 2 * v80;
        uint64_t v77 = v81 + 2 * v80;
      }
    }
LABEL_57:
    sub_1BBABC324(v62, v16, v15, v265, v76, v35, v267, v60, v54, v60, v54, v70, v77, *(unsigned __int8 *)(*((void *)v14 + 17) + 1), (BOOL *)&v284[1], v284, 0, 0);
    uint64_t v82 = 188;
    if (!*(unsigned char *)(v277 + 2416)) {
      uint64_t v82 = 0;
    }
    if (!*(unsigned char *)(*(void *)(v277 + 2400) + v82))
    {
      unint64_t v28 = 0;
      goto LABEL_68;
    }
    uint64_t v83 = 0;
    unsigned int v84 = v16 - *((_DWORD *)v14 + 1);
    if ((v84 & 0x80000000) == 0)
    {
      unsigned int v85 = v15 - *((_DWORD *)v14 + 2);
      uint64_t v86 = 0;
      if ((v85 & 0x80000000) != 0)
      {
LABEL_67:
        unint64_t v28 = sub_1BBABDA80(v277, v16, (int)v15, v14, v60, v54, v83, v86, *(unsigned __int8 *)(*((void *)v14 + 17) + 1), v55, a13);
LABEL_68:
        if (!v261)
        {
          int v109 = v284[1];
          int v110 = v284[0];
LABEL_173:
          sub_1BBAE40E4(v14, v16, (int)v15, 1 << (v265 - 2), 1, v109, a6);
          sub_1BBAE40E4(v14, v16, (int)v15, 1 << (v265 - 2), 2, v110, a6);
          return v28;
        }
        uint64_t v258 = v60;
        unsigned int v90 = *(unsigned __int8 **)(*(void *)(v277 + 2400) + 376);
        unint64_t v91 = (char *)*((void *)v90 + 7);
        unsigned int v92 = (char *)*((void *)v90 + 8);
        uint64_t v259 = *v90;
        uint64_t v93 = 2 * v259;
        uint64_t v94 = (*(uint64_t (**)(void, void))(**((void **)v90 + 10) + 24))(*((void *)v90 + 10), *((void *)v90 + 11));
        uint64_t v262 = v94;
        unsigned int v269 = 0;
        __int16 v283 = 0;
        uint64_t v95 = *(void *)(v277 + 2400);
        int v96 = *(long long **)(v95 + 944);
        *(_DWORD *)(v95 + 808) = v16;
        *(_DWORD *)(v95 + 812) = v15;
        if ((v265 - 1) <= 1)
        {
          int v97 = 26 - v274;
          if (v274 >= 26) {
            int v97 = v274 - 26;
          }
          int v98 = v97 < 5;
          int v99 = 10 - v274;
          if (v274 >= 10) {
            int v99 = v274 - 10;
          }
          if (v99 < 5) {
            int v98 = 2;
          }
          unsigned int v269 = v98;
        }
        uint64_t v100 = 0;
        unsigned int v101 = v16 - *((_DWORD *)v14 + 1);
        if ((v101 & 0x80000000) == 0)
        {
          unsigned int v102 = v15 - *((_DWORD *)v14 + 2);
          if ((v102 & 0x80000000) == 0)
          {
            uint64_t v100 = 0;
            unint64_t v103 = *v14;
            if (v101 < v103 && v102 < v103) {
              uint64_t v100 = (__int16 *)(*((void *)v14 + 11)
            }
                               + 2 * ((v101 >> 3) + (v103 >> 3) * (unint64_t)(v102 >> 3)));
          }
        }
        sub_1BBABC324((void *)v277, v16, v15, v265, v100, v263, v267, v94, v93, v94, v93, (uint64_t)v91, (uint64_t)v92, v259, (BOOL *)&v283 + 1, &v283, 1, 1);
        unsigned int v104 = v16 - *((_DWORD *)v14 + 1);
        unsigned int v105 = v15 - *((_DWORD *)v14 + 2);
        if ((v104 & 0x80000000) != 0 || (v105 & 0x80000000) != 0)
        {
          uint64_t v107 = v277;
        }
        else
        {
          unsigned int v106 = *v14;
          uint64_t v107 = v277;
          if (v104 < v106 && v105 < v106)
          {
            uint64_t v108 = *(void *)&v14[8 * a6 + 136];
            *(unsigned char *)(*(void *)(v108 + 16)
                     + (v104 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(v108 + 1) >> 2) * (v105 >> 3)) = 0;
            unsigned int v104 = v16 - *((_DWORD *)v14 + 1);
            unsigned int v105 = v15 - *((_DWORD *)v14 + 2);
          }
        }
        if ((v104 & 0x80000000) == 0 && (v105 & 0x80000000) == 0)
        {
          unsigned int v111 = *v14;
          if (v104 < v111 && v105 < v111)
          {
            uint64_t v112 = *(void *)&v14[8 * a6 + 136];
            *(unsigned char *)(*(void *)(v112 + 24)
                     + (v104 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(v112 + 1) >> 2) * (v105 >> 3)) = 0;
          }
        }
        *(void *)(*(void *)(v107 + 2400) + 824) = *(unsigned __int8 *)(*((void *)v14 + 17) + 1);
        unint64_t v281 = 0;
        unint64_t v282 = 0;
        uint64_t v113 = *(void *)(v107 + 2408);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v113 + 376))(v263, v267, v258, v272, v55, v55, &v282, &v281);
        uint64_t v114 = *(unsigned __int16 *)(v113 + 18);
        unint64_t v281 = (v281 * v114) >> 8;
        unint64_t v282 = (v282 * v114) >> 8;
        int v256 = v284[1];
        if (!v284[1])
        {
          int v130 = 0;
          goto LABEL_105;
        }
        long long v115 = v96[2];
        long long v116 = v96[4];
        long long v117 = v96[5];
        *(long long *)((char *)v96 + 264) = v96[3];
        *(long long *)((char *)v96 + 280) = v116;
        *(long long *)((char *)v96 + 248) = v115;
        long long v118 = *v96;
        *(long long *)((char *)v96 + 232) = v96[1];
        long long v119 = v96[6];
        long long v120 = v96[8];
        long long v121 = v96[9];
        *(long long *)((char *)v96 + 328) = v96[7];
        *(long long *)((char *)v96 + 344) = v120;
        *(long long *)((char *)v96 + 296) = v117;
        *(long long *)((char *)v96 + 312) = v119;
        long long v122 = v96[11];
        *(long long *)((char *)v96 + 376) = v96[10];
        *(long long *)((char *)v96 + 392) = v122;
        *(long long *)((char *)v96 + 360) = v121;
        *((void *)v96 + 51) = *((void *)v96 + 24);
        *(long long *)((char *)v96 + 216) = v118;
        uint64_t v123 = 8 * (*((_DWORD *)v96 + 52) - *((_DWORD *)v96 + 6));
        *((void *)v96 + 4) = 0;
        *((void *)v96 + 1) = 510;
        *((void *)v96 + 2) = v123;
        unsigned int v124 = v16 - *((_DWORD *)v14 + 1);
        if ((v124 & 0x80000000) != 0 || (unsigned int v125 = v15 - *((_DWORD *)v14 + 2), (v125 & 0x80000000) != 0))
        {
          unint64_t v129 = 0;
          uint64_t v127 = v277;
        }
        else
        {
          unsigned int v126 = *v14;
          uint64_t v127 = v277;
          if (v124 < v126 && v125 < v126)
          {
            long long v128 = &v14[8 * a6];
            *(void *)(*(void *)(v277 + 2400) + 880) = *(void *)(*((void *)v128 + 17) + 64)
                                                          + 2
                                                          * ((v124 >> 1)
                                                           + *(unsigned __int8 *)(*((void *)v128 + 17) + 1)
                                                           * (unint64_t)(v125 >> 1));
            unint64_t v129 = *(void *)(*((void *)v128 + 17) + 16)
                 + (v124 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((void *)v128 + 17) + 1) >> 2) * (v125 >> 3);
LABEL_104:
            *(void *)(*(void *)(v127 + 2400) + 928) = v129;
            sub_1BBAB5BB4(v127, v16, (int)v15, v265, v269, 1);
            int v130 = ((*((_DWORD *)v96 + 4) + 8 * (*((_DWORD *)v96 + 6) - *((_DWORD *)v96 + 52))) << 8)
                 - *((_DWORD *)v96 + 2)
                 + 510;
            long long v131 = *(long long *)((char *)v96 + 392);
            v96[10] = *(long long *)((char *)v96 + 376);
            v96[11] = v131;
            *((void *)v96 + 24) = *((void *)v96 + 51);
            long long v132 = *(long long *)((char *)v96 + 328);
            v96[6] = *(long long *)((char *)v96 + 312);
            v96[7] = v132;
            long long v133 = *(long long *)((char *)v96 + 360);
            v96[8] = *(long long *)((char *)v96 + 344);
            v96[9] = v133;
            long long v134 = *(long long *)((char *)v96 + 264);
            v96[2] = *(long long *)((char *)v96 + 248);
            v96[3] = v134;
            long long v135 = *(long long *)((char *)v96 + 296);
            v96[4] = *(long long *)((char *)v96 + 280);
            v96[5] = v135;
            long long v136 = *(long long *)((char *)v96 + 232);
            *int v96 = *(long long *)((char *)v96 + 216);
            v96[1] = v136;
LABEL_105:
            int v250 = v284[0];
            int v252 = v130;
            if (v284[0])
            {
              long long v137 = v96[2];
              long long v138 = v96[4];
              long long v139 = v96[5];
              *(long long *)((char *)v96 + 264) = v96[3];
              *(long long *)((char *)v96 + 280) = v138;
              *(long long *)((char *)v96 + 248) = v137;
              long long v140 = *v96;
              *(long long *)((char *)v96 + 232) = v96[1];
              long long v141 = v96[6];
              long long v142 = v96[8];
              long long v143 = v96[9];
              *(long long *)((char *)v96 + 328) = v96[7];
              *(long long *)((char *)v96 + 344) = v142;
              *(long long *)((char *)v96 + 296) = v139;
              *(long long *)((char *)v96 + 312) = v141;
              long long v144 = v96[11];
              *(long long *)((char *)v96 + 376) = v96[10];
              *(long long *)((char *)v96 + 392) = v144;
              *(long long *)((char *)v96 + 360) = v143;
              *((void *)v96 + 51) = *((void *)v96 + 24);
              *(long long *)((char *)v96 + 216) = v140;
              uint64_t v145 = 8 * (*((_DWORD *)v96 + 52) - *((_DWORD *)v96 + 6));
              *((void *)v96 + 4) = 0;
              *((void *)v96 + 1) = 510;
              *((void *)v96 + 2) = v145;
              unsigned int v146 = v16 - *((_DWORD *)v14 + 1);
              if ((v146 & 0x80000000) != 0
                || (unsigned int v147 = v15 - *((_DWORD *)v14 + 2), (v147 & 0x80000000) != 0)
                || (unsigned int v148 = *v14, v146 >= v148)
                || v147 >= v148)
              {
                unint64_t v150 = 0;
                *(void *)(*(void *)(v277 + 2400) + 888) = 0;
              }
              else
              {
                long long v149 = &v14[8 * a6];
                *(void *)(*(void *)(v277 + 2400) + 888) = *(void *)(*((void *)v149 + 17) + 72)
                                                              + 2
                                                              * ((v146 >> 1)
                                                               + *(unsigned __int8 *)(*((void *)v149 + 17) + 1)
                                                               * (unint64_t)(v147 >> 1));
                unint64_t v150 = *(void *)(*((void *)v149 + 17) + 24)
                     + (v146 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((void *)v149 + 17) + 1) >> 2) * (v147 >> 3);
              }
              *(void *)(*(void *)(v277 + 2400) + 936) = v150;
              sub_1BBAB5BB4(v277, v16, (int)v15, v265, v269, 2);
              uint64_t v151 = v277;
              int v254 = ((*((_DWORD *)v96 + 4) + 8 * (*((_DWORD *)v96 + 6) - *((_DWORD *)v96 + 52))) << 8)
                   - *((_DWORD *)v96 + 2)
                   + 510;
              long long v152 = *(long long *)((char *)v96 + 392);
              v96[10] = *(long long *)((char *)v96 + 376);
              v96[11] = v152;
              *((void *)v96 + 24) = *((void *)v96 + 51);
              long long v153 = *(long long *)((char *)v96 + 328);
              v96[6] = *(long long *)((char *)v96 + 312);
              v96[7] = v153;
              long long v154 = *(long long *)((char *)v96 + 360);
              v96[8] = *(long long *)((char *)v96 + 344);
              v96[9] = v154;
              long long v155 = *(long long *)((char *)v96 + 264);
              v96[2] = *(long long *)((char *)v96 + 248);
              v96[3] = v155;
              long long v156 = *(long long *)((char *)v96 + 296);
              v96[4] = *(long long *)((char *)v96 + 280);
              v96[5] = v156;
              long long v157 = *(long long *)((char *)v96 + 232);
              *int v96 = *(long long *)((char *)v96 + 216);
              v96[1] = v157;
            }
            else
            {
              int v254 = 0;
              uint64_t v151 = v277;
            }
            int v275 = (int)v15;
            uint64_t v158 = *(void *)(v151 + 2408);
            unint64_t v251 = v282;
            int v255 = *(unsigned __int16 *)(v158 + 8);
            unint64_t v253 = v281;
            unint64_t v279 = 0;
            unint64_t v280 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v158 + 376))(v263, v267, v262, v93, v55, v55, &v280, &v279);
            uint64_t v159 = *(unsigned __int16 *)(v158 + 18);
            unint64_t v279 = (v279 * v159) >> 8;
            unint64_t v280 = (v280 * v159) >> 8;
            uint64_t v160 = *(void *)(v277 + 2400);
            *(void *)(v160 + 824) = v259;
            **(unsigned char **)(*(void *)(v160 + 376) + 16) = 1;
            **(unsigned char **)(*(void *)(*(void *)(v277 + 2400) + 376) + 24) = 1;
            int v161 = HIBYTE(v283);
            if (HIBYTE(v283))
            {
              long long v162 = v96[2];
              long long v163 = v96[4];
              long long v164 = v96[5];
              *(long long *)((char *)v96 + 264) = v96[3];
              *(long long *)((char *)v96 + 280) = v163;
              *(long long *)((char *)v96 + 248) = v162;
              long long v165 = *v96;
              *(long long *)((char *)v96 + 232) = v96[1];
              long long v166 = v96[6];
              long long v167 = v96[8];
              long long v168 = v96[9];
              *(long long *)((char *)v96 + 328) = v96[7];
              *(long long *)((char *)v96 + 344) = v167;
              *(long long *)((char *)v96 + 296) = v164;
              *(long long *)((char *)v96 + 312) = v166;
              long long v169 = v96[11];
              *(long long *)((char *)v96 + 376) = v96[10];
              *(long long *)((char *)v96 + 392) = v169;
              *(long long *)((char *)v96 + 360) = v168;
              *((void *)v96 + 51) = *((void *)v96 + 24);
              *(long long *)((char *)v96 + 216) = v165;
              uint64_t v170 = 8 * (*((_DWORD *)v96 + 52) - *((_DWORD *)v96 + 6));
              *((void *)v96 + 4) = 0;
              *((void *)v96 + 1) = 510;
              *((void *)v96 + 2) = v170;
              *(void *)(*(void *)(v277 + 2400) + 880) = v91;
              *(void *)(*(void *)(v277 + 2400) + 928) = *(void *)(*(void *)(*(void *)(v277 + 2400) + 376)
                                                                        + 16);
              sub_1BBAB5BB4(v277, v16, (int)v15, v265, v269, 1);
              int v171 = ((*((_DWORD *)v96 + 4) + 8 * (*((_DWORD *)v96 + 6) - *((_DWORD *)v96 + 52))) << 8)
                   - *((_DWORD *)v96 + 2)
                   + 510;
              long long v172 = *(long long *)((char *)v96 + 360);
              long long v173 = *(long long *)((char *)v96 + 392);
              v96[10] = *(long long *)((char *)v96 + 376);
              v96[11] = v173;
              *((void *)v96 + 24) = *((void *)v96 + 51);
              long long v174 = *(long long *)((char *)v96 + 296);
              long long v175 = *(long long *)((char *)v96 + 328);
              long long v176 = *(long long *)((char *)v96 + 344);
              v96[6] = *(long long *)((char *)v96 + 312);
              v96[7] = v175;
              v96[8] = v176;
              v96[9] = v172;
              long long v177 = *(long long *)((char *)v96 + 264);
              long long v178 = *(long long *)((char *)v96 + 280);
              v96[2] = *(long long *)((char *)v96 + 248);
              v96[3] = v177;
              long long v179 = *(long long *)((char *)v96 + 232);
              v96[4] = v178;
              v96[5] = v174;
              *int v96 = *(long long *)((char *)v96 + 216);
              v96[1] = v179;
            }
            else
            {
              int v171 = 0;
            }
            int v268 = v283;
            if ((_BYTE)v283)
            {
              long long v180 = v96[2];
              long long v181 = v96[4];
              long long v182 = v96[5];
              *(long long *)((char *)v96 + 264) = v96[3];
              *(long long *)((char *)v96 + 280) = v181;
              *(long long *)((char *)v96 + 248) = v180;
              long long v183 = *v96;
              *(long long *)((char *)v96 + 232) = v96[1];
              long long v184 = v96[6];
              long long v185 = v96[8];
              long long v186 = v96[9];
              *(long long *)((char *)v96 + 328) = v96[7];
              *(long long *)((char *)v96 + 344) = v185;
              *(long long *)((char *)v96 + 296) = v182;
              *(long long *)((char *)v96 + 312) = v184;
              long long v187 = v96[11];
              *(long long *)((char *)v96 + 376) = v96[10];
              *(long long *)((char *)v96 + 392) = v187;
              *(long long *)((char *)v96 + 360) = v186;
              *((void *)v96 + 51) = *((void *)v96 + 24);
              *(long long *)((char *)v96 + 216) = v183;
              uint64_t v188 = 8 * (*((_DWORD *)v96 + 52) - *((_DWORD *)v96 + 6));
              *((void *)v96 + 4) = 0;
              *((void *)v96 + 1) = 510;
              *((void *)v96 + 2) = v188;
              *(void *)(*(void *)(v277 + 2400) + 888) = v92;
              *(void *)(*(void *)(v277 + 2400) + 936) = *(void *)(*(void *)(*(void *)(v277 + 2400) + 376)
                                                                        + 24);
              int v189 = v171;
              sub_1BBAB5BB4(v277, v16, (int)v15, v265, v269, 2);
              int v171 = v189;
              uint64_t v190 = v277;
              uint64_t v55 = (1 << v265);
              int v191 = ((*((_DWORD *)v96 + 4) + 8 * (*((_DWORD *)v96 + 6) - *((_DWORD *)v96 + 52))) << 8)
                   - *((_DWORD *)v96 + 2)
                   + 510;
              long long v192 = *(long long *)((char *)v96 + 360);
              long long v193 = *(long long *)((char *)v96 + 392);
              v96[10] = *(long long *)((char *)v96 + 376);
              v96[11] = v193;
              *((void *)v96 + 24) = *((void *)v96 + 51);
              long long v194 = *(long long *)((char *)v96 + 296);
              long long v195 = *(long long *)((char *)v96 + 328);
              long long v196 = *(long long *)((char *)v96 + 344);
              v96[6] = *(long long *)((char *)v96 + 312);
              v96[7] = v195;
              v96[8] = v196;
              v96[9] = v192;
              long long v197 = *(long long *)((char *)v96 + 264);
              long long v198 = *(long long *)((char *)v96 + 280);
              v96[2] = *(long long *)((char *)v96 + 248);
              v96[3] = v197;
              long long v199 = *(long long *)((char *)v96 + 232);
              v96[4] = v198;
              v96[5] = v194;
              *int v96 = *(long long *)((char *)v96 + 216);
              v96[1] = v199;
            }
            else
            {
              int v191 = 0;
              uint64_t v190 = v277;
            }
            int v200 = *(unsigned __int16 *)(*(void *)(v190 + 2408) + 8);
            unint64_t v201 = v279;
            if (v161 && v251 + ((v252 * v255) >> 8) > v280 + ((v171 * v200) >> 8))
            {
              int v260 = *(unsigned __int16 *)(*(void *)(v190 + 2408) + 8);
              unint64_t v264 = v279;
              int v270 = v191;
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v190 + 2400)
                                                                                          + 8152))((2 << v265), v55, v93, v262, v272, v258);
              uint64_t v202 = 0;
              unsigned int v203 = v16 - *((_DWORD *)v14 + 1);
              if ((v203 & 0x80000000) == 0)
              {
                unsigned int v204 = v15 - *((_DWORD *)v14 + 2);
                if ((v204 & 0x80000000) == 0)
                {
                  uint64_t v202 = 0;
                  unsigned int v205 = *v14;
                  if (v203 < v205 && v204 < v205)
                  {
                    uint64_t v206 = *(void *)&v14[8 * a6 + 136];
                    uint64_t v202 = (char *)(*(void *)(v206 + 64)
                                  + 2 * ((v203 >> 1) + *(unsigned __int8 *)(v206 + 1) * (unint64_t)(v204 >> 1)));
                  }
                }
              }
              int v207 = v16;
              uint64_t v208 = v14;
              unsigned int v209 = &v14[8 * a6];
              uint64_t v211 = *((void *)v209 + 17);
              uint64_t v210 = (uint64_t)(v209 + 136);
              uint64_t v212 = 2 * *(unsigned __int8 *)(v211 + 1);
              uint64_t v213 = (int)v276;
              do
              {
                --v213;
                memcpy(v202, v91, 2 * (int)v276);
                v202 += v212;
                v91 += v93;
              }
              while (v213);
              uint64_t v14 = v208;
              unsigned int v214 = v207 - *((_DWORD *)v208 + 1);
              int v215 = &v280;
              int v109 = 1;
              if ((v214 & 0x80000000) != 0)
              {
                LODWORD(v15) = v275;
                LODWORD(v16) = v207;
                uint64_t v190 = v277;
                int v191 = v270;
                unint64_t v201 = v264;
                int v200 = v260;
                goto LABEL_145;
              }
              LODWORD(v15) = v275;
              unsigned int v216 = v275 - *((_DWORD *)v14 + 2);
              LODWORD(v16) = v207;
              uint64_t v190 = v277;
              int v191 = v270;
              unint64_t v201 = v264;
              int v200 = v260;
              if ((v216 & 0x80000000) == 0)
              {
                unsigned int v217 = *v14;
                char v218 = 1;
                if (v214 < v217 && v216 < v217) {
                  goto LABEL_142;
                }
              }
            }
            else
            {
              unsigned int v214 = v16 - *((_DWORD *)v14 + 1);
              int v215 = &v282;
              if ((v214 & 0x80000000) != 0)
              {
                int v109 = v256;
                goto LABEL_145;
              }
              unsigned int v216 = v15 - *((_DWORD *)v14 + 2);
              int v109 = v256;
              if ((v216 & 0x80000000) == 0)
              {
                unsigned int v220 = *v14;
                if (v214 < v220 && v216 < v220)
                {
                  char v218 = 0;
                  uint64_t v210 = (uint64_t)&v14[8 * a6 + 136];
                  int v215 = &v282;
LABEL_142:
                  *(unsigned char *)(*(void *)(*(void *)v210 + 16)
                           + (v214 >> 3)
                           + ((unint64_t)*(unsigned __int8 *)(*(void *)v210 + 1) >> 2) * (v216 >> 3)) = v218;
                }
              }
            }
LABEL_145:
            unint64_t v221 = *v215;
            if (v268 && v253 + ((v254 * v255) >> 8) > v201 + ((v191 * v200) >> 8))
            {
              unsigned int v278 = *v215;
              uint64_t v222 = *(void *)(v190 + 2400);
              uint64_t v223 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(v222 + 376) + 80) + 24))(*(void *)(*(void *)(v222 + 376) + 80), *(void *)(*(void *)(v222 + 376) + 88) + 1);
              uint64_t v224 = 0;
              unsigned int v225 = v16 - *((_DWORD *)v14 + 1) + 1;
              if ((v225 & 0x80000000) == 0)
              {
                unsigned int v226 = v15 - *((_DWORD *)v14 + 2);
                if ((v226 & 0x80000000) == 0)
                {
                  uint64_t v224 = 0;
                  unsigned int v227 = *v14;
                  if (v225 < v227 && v226 < v227)
                  {
                    uint64_t v228 = *(void *)&v14[8 * a6 + 136];
                    uint64_t v224 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v228 + 96) + 24))(*(void *)(v228 + 96), *(void *)(v228 + 104)+ v225+ *(unsigned __int8 *)(v228 + 1) * (unint64_t)(v226 & 0xFFFFFFFE));
                  }
                }
              }
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v222 + 8152))((2 << v265), v276, v93, v223, v272, v224);
              unint64_t v229 = 0;
              unsigned int v230 = v16 - *((_DWORD *)v14 + 1);
              if ((v230 & 0x80000000) == 0)
              {
                unsigned int v231 = v15 - *((_DWORD *)v14 + 2);
                if ((v231 & 0x80000000) == 0)
                {
                  unint64_t v229 = 0;
                  unsigned int v232 = *v14;
                  if (v230 < v232 && v231 < v232)
                  {
                    uint64_t v233 = *(void *)&v14[8 * a6 + 136];
                    unint64_t v229 = (char *)(*(void *)(v233 + 72)
                                  + 2 * ((v230 >> 1) + *(unsigned __int8 *)(v233 + 1) * (unint64_t)(v231 >> 1)));
                  }
                }
              }
              int v257 = v109;
              int v234 = v16;
              int v235 = (int)v15;
              long long v15 = v14;
              uint64_t v236 = &v14[8 * a6];
              uint64_t v238 = *((void *)v236 + 17);
              uint64_t v237 = v236 + 136;
              uint64_t v239 = 2 * *(unsigned __int8 *)(v238 + 1);
              uint64_t v240 = (int)v276;
              do
              {
                --v240;
                memcpy(v229, v92, 2 * (int)v276);
                v229 += v239;
                v92 += v93;
              }
              while (v240);
              uint64_t v14 = v15;
              unsigned int v241 = v234 - *((_DWORD *)v15 + 1);
              LODWORD(v15) = v235;
              if ((v241 & 0x80000000) == 0)
              {
                unsigned int v242 = v235 - *((_DWORD *)v14 + 2);
                if ((v242 & 0x80000000) == 0)
                {
                  unsigned int v243 = *v14;
                  if (v241 < v243 && v242 < v243) {
                    *(unsigned char *)(*(void *)(*(void *)v237 + 24)
                  }
                             + (v241 >> 3)
                             + ((unint64_t)*(unsigned __int8 *)(*(void *)v237 + 1) >> 2) * (v242 >> 3)) = 1;
                }
              }
              unint64_t v28 = v279 + v278;
              int v110 = 1;
              LODWORD(v16) = v234;
              int v109 = v257;
            }
            else
            {
              unsigned int v245 = v16 - *((_DWORD *)v14 + 1);
              if ((v245 & 0x80000000) == 0)
              {
                unsigned int v246 = v15 - *((_DWORD *)v14 + 2);
                if ((v246 & 0x80000000) == 0)
                {
                  unsigned int v247 = *v14;
                  if (v245 < v247 && v246 < v247)
                  {
                    uint64_t v248 = *(void *)&v14[8 * a6 + 136];
                    *(unsigned char *)(*(void *)(v248 + 24)
                             + (v245 >> 3)
                             + ((unint64_t)*(unsigned __int8 *)(v248 + 1) >> 2) * (v246 >> 3)) = 0;
                  }
                }
              }
              unint64_t v28 = v281 + v221;
              int v110 = v250;
            }
            goto LABEL_173;
          }
          unint64_t v129 = 0;
        }
        *(void *)(*(void *)(v127 + 2400) + 880) = 0;
        goto LABEL_104;
      }
      uint64_t v83 = 0;
      unsigned int v87 = *v14;
      if (v84 < v87)
      {
        uint64_t v86 = 0;
        if (v85 < v87)
        {
          uint64_t v88 = *(void *)&v14[8 * a6 + 136];
          unint64_t v89 = (v84 >> 1) + *(unsigned __int8 *)(v88 + 1) * (unint64_t)(v85 >> 1);
          uint64_t v83 = *(void *)(v88 + 64) + 2 * v89;
          uint64_t v86 = *(void *)(v88 + 72) + 2 * v89;
        }
        goto LABEL_67;
      }
    }
    uint64_t v86 = 0;
    goto LABEL_67;
  }
LABEL_15:
  unsigned int v27 = 0;
  LODWORD(v28) = 0;
  int v29 = a2;
  int v266 = (1 << v265) + a2;
  int v30 = (int)a3;
  int v31 = (1 << v265) + a3;
  do
  {
    uint64_t v32 = *(void *)(a1 + 2384);
    unsigned int v33 = a12;
    if (a9 - 2 >= *(unsigned __int8 *)(v32 + 2012))
    {
      unsigned int v33 = sub_1BBA8EDCC(a12, v27, v266 < *(_DWORD *)(v32 + 176), v31 < *(_DWORD *)(v32 + 180));
      a1 = v277;
    }
    int v34 = sub_1BBABC664(a1, ((v27 & 1) << v265) + v29, (v27 >> 1 << v265) + v30, a4, a5, a6, a7, v274, __PAIR64__(a10 + 1, v265), __PAIR64__(v33, v27), a13);
    a1 = v277;
    unint64_t v28 = (v34 + v28);
    ++v27;
  }
  while (v27 != 4);
  return v28;
}

unint64_t sub_1BBABDA80(uint64_t a1, int a2, int a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, _DWORD *a11)
{
  uint64_t v17 = 0;
  uint64_t v18 = *(void *)(a1 + 2408);
  uint64_t v19 = (a2 - *((_DWORD *)a4 + 1));
  if ((v19 & 0x80000000) == 0)
  {
    unsigned int v20 = a3 - *((_DWORD *)a4 + 2);
    if ((v20 & 0x80000000) == 0)
    {
      unsigned int v21 = *a4;
      if (v19 < v21 && v20 < v21)
      {
        uint64_t v17 = (*(uint64_t (**)(void, unint64_t, void))(**((void **)a4 + 5) + 24))(*((void *)a4 + 5), v19 + a4[1] * (unint64_t)(v20 >> 1) + *((void *)a4 + 6), 0);
        uint64_t v23 = *(void *)(a1 + 2408);
        goto LABEL_10;
      }
      uint64_t v17 = 0;
    }
  }
  uint64_t v23 = *(void *)(a1 + 2408);
LABEL_10:
  unint64_t v24 = (*(unsigned __int16 *)(v23 + 18)
       * (unint64_t)(*(unsigned int (**)(void, void, uint64_t, void, uint64_t, uint64_t))(v18 + 8 * __clz(__rbit32(a10)) + 168))(a10, a10, v17, a4[1], a5, a6)) >> 8;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v25 = a1 + 8 * ((a10 & 7) == 0);
  (*(void (**)(void, uint64_t, uint64_t, char *, char *))(v25 + 2224))(a10, a9, a7, (char *)&v41 + 4, (char *)&v40 + 4);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t *, uint64_t *))(v25 + 2224))(a10, a9, a8, &v41, &v40);
  uint64_t v26 = *(void *)(a1 + 2376);
  int v27 = *(unsigned __int8 *)(*(void *)(v26 + 1368) + 2003);
  int v28 = v27 + 57;
  uint64_t v29 = *(void *)(v26 + 1384);
  int v30 = v27
      + (*(__int16 *)(*((void *)a4 + 11)
                    + 2
                    * (((a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
  int v31 = v30 + *(char *)(v29 + 14) + *(char *)(v26 + 544);
  if (v31 >= v28) {
    int v32 = v28;
  }
  else {
    int v32 = v30 + *(char *)(v29 + 14) + *(char *)(v26 + 544);
  }
  if (v31 <= 0) {
    int v33 = 0;
  }
  else {
    int v33 = v32;
  }
  int v34 = v30 + *(char *)(v29 + 15) + *(char *)(v26 + 545);
  if (v34 >= v28) {
    int v35 = v28;
  }
  else {
    int v35 = v34;
  }
  if (v34 <= 0) {
    int v36 = 0;
  }
  else {
    int v36 = v35;
  }
  *a11 = (HIDWORD(v41) * byte_1BBB7C988[v33]
        + HIDWORD(v40) * byte_1BBB7C988[v33 + 70]
        + v41 * byte_1BBB7C988[v36]
        + v40 * byte_1BBB7C988[v36 + 70]) << 8;
  return v24;
}

uint64_t sub_1BBABDCB4(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int8 *a6)
{
  LODWORD(v7) = a5;
  LODWORD(v8) = a4;
  uint64_t v11 = result;
  while (1)
  {
    long long v12 = *(unsigned __int8 **)(v11 + 2384);
    int v13 = v12[244];
    if (*(_DWORD *)(v11 + 2056)) {
      BOOL v14 = (v8 | v13) == 0;
    }
    else {
      BOOL v14 = 0;
    }
    int v15 = v14;
    int v16 = *(_DWORD *)(v11 + 2048) - v13 - v15;
    if (v16 <= v12[2010]) {
      int v16 = v12[2010];
    }
    int v17 = v12[2011];
    if (v16 > v17) {
      int v16 = v17 - v15;
    }
    char v18 = v16 < (int)v7 ? v15 : 0;
    if ((v18 & 1) == 0 && (int)v7 <= v17) {
      break;
    }
    uint64_t v7 = (v7 - 1);
    uint64_t v8 = (v8 + 1);
    sub_1BBABDCB4(v11, a2, a3, v8, v7, a6);
    sub_1BBABDCB4(v11, ((1 << v7) + a2), a3, v8, v7, a6);
    __n128 result = sub_1BBABDCB4(v11, a2, ((1 << v7) + a3), v8, v7, a6);
    a2 = ((1 << v7) + a2);
    a3 = ((1 << v7) + a3);
  }
  if (a6)
  {
    uint64_t v19 = 0;
    unsigned int v20 = a2 - *((_DWORD *)a6 + 1);
    unint64_t v21 = *a6;
    if ((v20 & 0x80000000) == 0)
    {
      unsigned int v22 = a3 - *((_DWORD *)a6 + 2);
      if ((v22 & 0x80000000) == 0)
      {
        uint64_t v19 = 0;
        if (v20 < v21 && v22 < v21) {
          uint64_t v19 = (_WORD *)(*((void *)a6 + 11)
        }
                        + 2 * ((v20 >> 3) + (v21 >> 3) * (unint64_t)(v22 >> 3)));
      }
    }
    uint64_t v23 = v21 >> 3;
  }
  else
  {
    uint64_t v24 = *(void *)(*(void *)(v11 + 2376) + 1360);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v24 + 276) <= (int)a2
      || *(_DWORD *)(v24 + 280) <= (int)a3)
    {
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = (_WORD *)(*(void *)(v24 + 512) + 2 * (*(void *)(v24 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    uint64_t v23 = *(void *)(v24 + 488);
  }
  *uint64_t v19 = *v19 & 0xFFF3 | (4 * (v8 & 3));
  if (1 << v7 >= 8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 2 * v23;
    int v27 = v19;
    do
    {
      int v28 = v27;
      uint64_t v29 = (1 << v7) >> 3;
      do
      {
        *v28++ = *v19;
        --v29;
      }
      while (v29);
      ++v25;
      int v27 = (_WORD *)((char *)v27 + v26);
    }
    while (v25 != (1 << v7) >> 3);
  }
  return result;
}

uint64_t sub_1BBABDEDC(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, int a5, int a6, uint64_t *a7, int a8)
{
  int v8 = a5;
  if (a8)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 2376) + 1360);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v11 + 276) <= (int)a2
      || *(_DWORD *)(v11 + 280) <= a3)
    {
      long long v12 = 0;
    }
    else
    {
      long long v12 = (__int16 *)(*(void *)(v11 + 512) + 2 * (*(void *)(v11 + 488) * ((uint64_t)a3 >> 3) + ((int)a2 >> 3)));
    }
    uint64_t v17 = *(void *)(v11 + 488);
  }
  else
  {
    long long v12 = 0;
    unsigned int v13 = a2 - *((_DWORD *)a4 + 1);
    unint64_t v14 = *a4;
    if ((v13 & 0x80000000) == 0)
    {
      unsigned int v15 = a3 - *((_DWORD *)a4 + 2);
      if ((v15 & 0x80000000) == 0)
      {
        if (v13 >= v14 || v15 >= v14) {
          long long v12 = 0;
        }
        else {
          long long v12 = (__int16 *)(*((void *)a4 + 11)
        }
                          + 2 * ((v13 >> 3) + (v14 >> 3) * (unint64_t)(v15 >> 3)));
      }
    }
    uint64_t v17 = v14 >> 3;
  }
  uint64_t v89 = v17;
  char v18 = *(unsigned __int8 **)(a1 + 2384);
  int v19 = v18[244];
  if (*(_DWORD *)(a1 + 2056)) {
    BOOL v20 = v19 == 0;
  }
  else {
    BOOL v20 = 0;
  }
  BOOL v21 = v20 && a6 == 0;
  int v22 = *(_DWORD *)(a1 + 2048) - v19 - v21;
  if (v22 <= v18[2010]) {
    int v22 = v18[2010];
  }
  signed int v23 = v18[2011];
  if (v22 <= v23) {
    int v24 = v22;
  }
  else {
    int v24 = v23 - v21;
  }
  BOOL v25 = v24 < a5;
  if (v24 >= a5) {
    BOOL v21 = 0;
  }
  int v26 = !v21;
  if (v23 >= a5) {
    int v27 = v26;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = v23 > a5 && a6 == 0;
  BOOL v29 = v23 != a5 && !v28;
  uint64_t v94 = a7;
  int v93 = v27;
  if (!v29)
  {
    BOOL v92 = v24 < a5;
    uint64_t v30 = 0;
    uint64_t v31 = **((unsigned __int8 **)a4 + 17);
    uint64_t v32 = a4[1];
    uint64_t v33 = (a2 - *((_DWORD *)a4 + 1));
    int v34 = a3;
    unsigned int v35 = a3 - *((_DWORD *)a4 + 2);
    int v36 = a4;
    if ((v33 & 0x80000000) == 0 && (v35 & 0x80000000) == 0)
    {
      uint64_t v30 = 0;
      unsigned int v37 = *a4;
      if (v33 < v37 && v35 < v37)
      {
        int v39 = a6;
        uint64_t v40 = **((unsigned __int8 **)a4 + 17);
        uint64_t v41 = (*(uint64_t (**)(void, unint64_t))(**((void **)a4 + 3) + 24))(*((void *)a4 + 3), v33 + a4[1] * (unint64_t)v35 + *((void *)a4 + 4));
        uint64_t v31 = v40;
        a4 = v36;
        a6 = v39;
        int v8 = a5;
        uint64_t v30 = v41;
        LODWORD(v33) = a2 - *((_DWORD *)v36 + 1);
        unsigned int v35 = v34 - *((_DWORD *)v36 + 2);
      }
    }
    uint64_t v42 = 0;
    int v43 = a6;
    if ((v33 & 0x80000000) == 0 && (v35 & 0x80000000) == 0)
    {
      uint64_t v42 = 0;
      unsigned int v44 = *a4;
      if (v33 < v44 && v35 < v44)
      {
        uint64_t v90 = v31;
        uint64_t v45 = (*(uint64_t (**)(void, unint64_t, void))(**(void **)(*((void *)a4 + 17) + 80)
                                                                          + 24))(*(void *)(*((void *)a4 + 17) + 80), *(void *)(*((void *)a4 + 17) + 88)+ v33+ **((unsigned __int8 **)a4 + 17) * (unint64_t)v35, 0);
        uint64_t v31 = v90;
        uint64_t v42 = v45;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2408) + 8 * v8 + 288))(v30, v32, v42, v31, *(void *)(a1 + 2400) + 384);
    a6 = v43;
    a7 = v94;
    a3 = v34;
    int v27 = v93;
    BOOL v25 = v92;
  }
  if (v24 < v8) {
    int v46 = v27;
  }
  else {
    int v46 = 0;
  }
  if (v46 != 1)
  {
    BOOL v47 = (void *)(a1 + 2408);
    int v48 = *((unsigned __int16 *)a7 + 10);
    __int16 v95 = *((_WORD *)a7 + 10);
    if (!v27)
    {
      uint64_t result = 0;
      uint64_t v74 = 0;
      if (v24 >= v8) {
        goto LABEL_85;
      }
      uint64_t v86 = 0;
      BOOL v87 = 0;
      uint64_t v88 = (void *)(a1 + 2408);
      goto LABEL_77;
    }
    uint64_t v49 = *(void *)(a1 + 2400);
    int v50 = *(_DWORD *)(a1 + 2048);
    int v51 = v50 - *(unsigned __int8 *)(*(void *)(v49 + 1880) + 2011);
    int v52 = v51 & ~(v51 >> 31);
    unsigned int v53 = ((_BYTE)a2 - *(_DWORD *)(a1 + 2424)) & 0x1F;
    unsigned int v54 = (a3 - *(_DWORD *)(a1 + 2428)) & 0x1F;
    goto LABEL_79;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 2392) + 615) || a6 || !*(_DWORD *)(a1 + 2056))
  {
    int v55 = *v12 >> 9;
    int v50 = *(_DWORD *)(a1 + 2048);
    int v56 = v50 - *(unsigned __int8 *)(*(void *)(a1 + 2384) + 2011);
    int v57 = v56 & ~(v56 >> 31);
    if (v55 >= 40) {
      int v55 = 40;
    }
    if (v55 <= 20) {
      int v55 = 20;
    }
    unsigned int v58 = v55 - 20;
    int v59 = a6 + 1 - v57;
    uint64_t v49 = *(void *)(a1 + 2400);
    int v60 = v50 - *(unsigned __int8 *)(*(void *)(v49 + 1880) + 2011);
    int v52 = v60 & ~(v60 >> 31);
    unsigned int v53 = ((_BYTE)a2 - *(_DWORD *)(a1 + 2424)) & 0x1F;
    unsigned int v54 = ((_BYTE)a3 - *(_DWORD *)(a1 + 2428)) & 0x1F;
    uint64_t v61 = v49
        + 4
        * (byte_1BBB7CE20[a6 + 1 - v52]
         + (unint64_t)(v53 >> (v50 - (a6 + 1)))
         + qword_1BBB7CDF8[a6 + 1 - v52] * (v54 >> (v50 - (a6 + 1))));
    uint64_t v62 = v61 + 384;
    int v63 = *(_DWORD *)(v61 + 384);
    LODWORD(v61) = *(_DWORD *)(v61 + 388);
    uint64_t v64 = (_DWORD *)(v62 + 4 * qword_1BBB7CDF8[v59]);
    LODWORD(v62) = *v64;
    LODWORD(v64) = v64[1];
    int v65 = v64 + v62 + v61 + v63;
    int v66 = v61 + v63 - (v64 + v62);
    LODWORD(v61) = v63 - v61;
    int v67 = v61 - v62 + v64;
    int v68 = v62 + v61 - v64;
    if (v66 >= 0) {
      int v69 = v66;
    }
    else {
      int v69 = -v66;
    }
    if (v67 >= 0) {
      int v70 = v67;
    }
    else {
      int v70 = -v67;
    }
    int v71 = v69 + v70;
    if (v68 < 0) {
      int v68 = -v68;
    }
    unsigned int v72 = (v71 + v68) * dword_1BBB7C880[21 * a6 - 21 + 21 * *(_DWORD *)(a1 + 2432) + v58];
    BOOL v47 = (void *)(a1 + 2408);
    int v48 = *((unsigned __int16 *)a7 + 10);
    __int16 v95 = *((_WORD *)a7 + 10);
    if (v72 > v65 << 6)
    {
      uint64_t v88 = (void *)(a1 + 2408);
      uint64_t v86 = 0;
      BOOL v87 = 0;
      goto LABEL_77;
    }
    BOOL v25 = 0;
LABEL_79:
    uint64_t result = v24 < v8;
    uint64_t v74 = *(unsigned int *)(v49
                          + 4
                          * (byte_1BBB7CE20[a6 - v52]
                           + (unint64_t)(v53 >> (v50 - a6))
                           + qword_1BBB7CDF8[a6 - v52] * (v54 >> (v50 - a6)))
                          + 384);
    unsigned int v76 = *(unsigned __int16 *)(*v47 + 2 * (__int16)v48 + 8);
    if (v24 >= v8) {
      unsigned int v76 = 0;
    }
    if (!v25) {
      goto LABEL_85;
    }
    BOOL v87 = v24 < v8;
    uint64_t v88 = v47;
    uint64_t v86 = v74;
    uint64_t v75 = (v76 >> (8 * (v48 == 0))) + v74;
    goto LABEL_83;
  }
  uint64_t v86 = 0;
  BOOL v87 = 0;
  uint64_t v88 = (void *)(a1 + 2408);
  __int16 v95 = *((_WORD *)a7 + 10);
LABEL_77:
  uint64_t v75 = -1;
LABEL_83:
  unint64_t v85 = v75;
  uint64_t v77 = ((1 << (v8 - 1)) + a2);
  char v91 = a6;
  sub_1BBABDEDC(a1, a2);
  sub_1BBABDEDC(a1, v77);
  sub_1BBABDEDC(a1, a2);
  sub_1BBABDEDC(a1, v77);
  LOBYTE(a6) = v91;
  uint64_t v78 = *(void *)(a1 + 2408);
  a7 = v94;
  uint64_t v74 = v86;
  BOOL v47 = v88;
  uint64_t result = v87;
  if ((v93 * *(unsigned __int16 *)(v78 + 2 * v95 + 8)) >> (8 * (v95 == 0)) < v85)
  {
    uint64_t v79 = *v94;
    *uint64_t v94 = *v94;
    int v80 = *((_DWORD *)v94 + 4) + v93;
    goto LABEL_91;
  }
LABEL_85:
  *long long v12 = *v12 & 0xFFF3 | (4 * (a6 & 3));
  if (1 << v8 >= 8)
  {
    uint64_t v81 = 0;
    uint64_t v82 = v12;
    do
    {
      uint64_t v83 = v82;
      uint64_t v84 = (1 << v8) >> 3;
      do
      {
        *v83++ = *v12;
        --v84;
      }
      while (v84);
      ++v81;
      v82 += v89;
    }
    while (v81 != (1 << v8) >> 3);
  }
  uint64_t v78 = *v47;
  uint64_t v79 = *a7 + v74;
  *a7 = v79;
  int v80 = *((_DWORD *)a7 + 4) + result;
LABEL_91:
  *((_DWORD *)a7 + 4) = v80;
  a7[1] = v79
        + ((v80 * *(unsigned __int16 *)(v78 + 2 * *((__int16 *)a7 + 10) + 8)) >> (8
                                                                                                * (*((_WORD *)a7 + 10) == 0)));
  return result;
}

uint64_t sub_1BBABE604(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6, int a7, uint64_t a8, char a9)
{
  uint64_t v10 = a3;
  uint64_t v11 = a2;
  uint64_t v12 = (a5 - 1);
  unsigned int v13 = *(unsigned __int8 **)(result + 2384);
  if (a9)
  {
    uint64_t v14 = *(void *)(*(void *)(result + 2376) + 1360);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v14 + 276) <= (int)a2
      || *(_DWORD *)(v14 + 280) <= (int)a3)
    {
      unsigned int v15 = 0;
    }
    else
    {
      unsigned int v15 = (_WORD *)(*(void *)(v14 + 512) + 2 * (*(void *)(v14 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    uint64_t v20 = *(void *)(v14 + 488);
  }
  else
  {
    unsigned int v15 = 0;
    unsigned int v16 = a2 - *((_DWORD *)a4 + 1);
    unint64_t v17 = *a4;
    if ((v16 & 0x80000000) == 0)
    {
      unsigned int v18 = a3 - *((_DWORD *)a4 + 2);
      if ((v18 & 0x80000000) == 0)
      {
        if (v16 >= v17 || v18 >= v17) {
          unsigned int v15 = 0;
        }
        else {
          unsigned int v15 = (_WORD *)(*((void *)a4 + 11)
        }
                        + 2 * ((v16 >> 3) + (v17 >> 3) * (unint64_t)(v18 >> 3)));
      }
    }
    uint64_t v20 = v17 >> 3;
  }
  uint64_t v86 = v20;
  unsigned int v92 = 1 << a5;
  int v21 = *(_DWORD *)(result + 2056);
  int v22 = v13[244];
  if (v21) {
    BOOL v23 = (a6 | v22) == 0;
  }
  else {
    BOOL v23 = 0;
  }
  int v24 = v23;
  int v25 = *(_DWORD *)(result + 2048) - v22 - v24;
  if (v25 <= v13[2010]) {
    int v25 = v13[2010];
  }
  unsigned int v26 = v13[2011];
  if (v25 <= v26) {
    int v27 = v25;
  }
  else {
    int v27 = v26 - v24;
  }
  int v28 = ((v27 >= a5) | ~v24) & ((int)v26 >= a5);
  uint64_t v29 = *(__int16 *)(a8 + 20);
  int v96 = 0;
  long long v95 = xmmword_1BBB6F8F0;
  __int16 v97 = v29;
  uint64_t v93 = a8;
  uint64_t v94 = result;
  int v91 = v28;
  if (!*(unsigned char *)(*(void *)(result + 2392) + 615) || (v28 ? (BOOL v30 = v27 < a5) : (BOOL v30 = 0), !v30))
  {
    if (!v28)
    {
      BOOL v32 = 0;
      uint64_t v31 = 0;
      uint64_t v45 = -1;
      goto LABEL_69;
    }
LABEL_38:
    uint64_t v83 = v29;
    uint64_t v33 = 0;
    uint64_t v34 = **((unsigned __int8 **)a4 + 17);
    uint64_t v35 = a4[1];
    uint64_t v36 = (a2 - *((_DWORD *)a4 + 1));
    unsigned int v37 = a3 - *((_DWORD *)a4 + 2);
    uint64_t v90 = a4;
    if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
    {
      uint64_t v33 = 0;
      unsigned int v38 = *a4;
      if (v36 < v38 && v37 < v38)
      {
        int v39 = a6;
        uint64_t v40 = (*(uint64_t (**)(void, unint64_t))(**((void **)a4 + 3) + 24))(*((void *)a4 + 3), v36 + a4[1] * (unint64_t)v37 + *((void *)a4 + 4));
        a4 = v90;
        a6 = v39;
        uint64_t v33 = v40;
        a8 = v93;
        uint64_t result = v94;
        LODWORD(v36) = v11 - *((_DWORD *)v90 + 1);
        unsigned int v37 = v10 - *((_DWORD *)v90 + 2);
      }
    }
    uint64_t v84 = v10;
    uint64_t v41 = v11;
    uint64_t v42 = 0;
    int v43 = a6;
    if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
    {
      uint64_t v42 = 0;
      unsigned int v44 = *a4;
      if (v36 < v44 && v37 < v44)
      {
        uint64_t v42 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a4 + 17) + 80) + 24))(*(void *)(*((void *)a4 + 17) + 80), *(void *)(*((void *)a4 + 17) + 88)+ v36+ **((unsigned __int8 **)a4 + 17) * (unint64_t)v37);
        a8 = v93;
        uint64_t result = v94;
      }
    }
    uint64_t v31 = (*(unsigned int (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(result + 2408)
                                                                                             + 40
                                                                                             * *(__int16 *)(a8 + 20)
                                                                                             + 8 * a5
                                                                                             + 8))(v92, v92, v33, v35, v42, v34);
    uint64_t result = v94;
    if (*(unsigned char *)(v94 + 2416))
    {
      a6 = v43;
      uint64_t v11 = v41;
      a8 = v93;
    }
    else
    {
      int v46 = v12;
      a6 = v43;
      a8 = v93;
      if (*(unsigned __int8 *)(*(void *)(v94 + 2384) + 2012) < a5 || (int v46 = a5, !a7))
      {
        uint64_t v47 = 0;
        int v48 = v90;
        uint64_t v49 = 2 * *(unsigned __int8 *)(*((void *)v90 + 17) + 1);
        uint64_t v50 = v90[1];
        uint64_t v51 = (v41 - *((_DWORD *)v90 + 1));
        unsigned int v52 = v84 - *((_DWORD *)v90 + 2);
        uint64_t v87 = v31;
        if ((v51 & 0x80000000) == 0 && (v52 & 0x80000000) == 0)
        {
          uint64_t v47 = 0;
          unsigned int v53 = *v90;
          if (v51 < v53 && v52 < v53)
          {
            uint64_t v81 = 2 * *(unsigned __int8 *)(*((void *)v90 + 17) + 1);
            uint64_t v54 = (*(uint64_t (**)(void, unint64_t, void))(**((void **)v90 + 5) + 24))(*((void *)v90 + 5), v51 + v90[1] * (unint64_t)(v52 >> 1) + *((void *)v90 + 6), 0);
            uint64_t v49 = v81;
            int v48 = v90;
            a6 = v43;
            uint64_t v47 = v54;
            a8 = v93;
            uint64_t result = v94;
            LODWORD(v51) = v41 - *((_DWORD *)v90 + 1);
            unsigned int v52 = v84 - *((_DWORD *)v90 + 2);
          }
        }
        uint64_t v55 = 0;
        int v56 = a6;
        if ((v51 & 0x80000000) == 0 && (v52 & 0x80000000) == 0)
        {
          uint64_t v55 = 0;
          unsigned int v57 = *v48;
          if (v51 < v57 && v52 < v57)
          {
            uint64_t v58 = v49;
            uint64_t v82 = v50;
            uint64_t v59 = v47;
            uint64_t v60 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v48 + 17) + 96)
                                                                      + 24))(*(void *)(*((void *)v48 + 17) + 96), *(void *)(*((void *)v48 + 17) + 104)+ v51+ *(unsigned __int8 *)(*((void *)v48 + 17) + 1) * (unint64_t)(v52 & 0xFFFFFFFE));
            uint64_t v47 = v59;
            uint64_t v50 = v82;
            uint64_t v49 = v58;
            uint64_t v55 = v60;
            a8 = v93;
            uint64_t result = v94;
          }
        }
        uint64_t v61 = *(void *)(result + 2408);
        unsigned int v62 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v61
                                                                                            + 32
                                                                                            * *(__int16 *)(a8 + 20)
                                                                                            + 8 * v46
                                                                                            + 168))((1 << v46), (1 << v46), v47, v50, v55, v49);
        a4 = v90;
        unint64_t v63 = *(unsigned __int16 *)(v61 + 18) * (unint64_t)v62;
        a8 = v93;
        uint64_t result = v94;
        uint64_t v31 = v87 + (v63 >> 8);
        a6 = v56;
        uint64_t v11 = v41;
        goto LABEL_66;
      }
      uint64_t v11 = v41;
    }
    a4 = v90;
LABEL_66:
    uint64_t v10 = v84;
    BOOL v32 = v27 < a5;
    unsigned int v64 = *(unsigned __int16 *)(*(void *)(result + 2408) + 2 * v83 + 8);
    if (v27 >= a5) {
      unsigned int v64 = 0;
    }
    uint64_t v45 = v31 + (v64 >> (8 * (v83 == 0)));
LABEL_69:
    unint64_t v89 = v45;
    if (v27 >= a5) {
      goto LABEL_72;
    }
    goto LABEL_70;
  }
  if (a6 || !v21) {
    goto LABEL_38;
  }
  uint64_t v31 = 0;
  BOOL v32 = 0;
  unint64_t v89 = -1;
LABEL_70:
  uint64_t v88 = v31;
  char v85 = a6;
  uint64_t v65 = ((1 << v12) + v11);
  uint64_t v66 = ((1 << v12) + v10);
  uint64_t v67 = (a6 + 1);
  int v68 = a4;
  sub_1BBABE604(v94, v11, v10, a4, v12, v67, 0, &v95, a9);
  LOBYTE(v77) = a9;
  sub_1BBABE604(v94, v65, v10, v68, v12, v67, 1, &v95, v77);
  LOBYTE(v78) = a9;
  sub_1BBABE604(v94, v11, v66, v68, v12, v67, 2, &v95, v78);
  LOBYTE(v79) = a9;
  sub_1BBABE604(v94, v65, v66, v68, v12, v67, 3, &v95, v79);
  a8 = v93;
  uint64_t result = v94;
  LOBYTE(a6) = v85;
  v96 += v91;
  int v69 = v96;
  uint64_t v70 = *(void *)(v94 + 2408);
  *((void *)&v95 + 1) = v95 + ((v96 * *(unsigned __int16 *)(v70 + 2 * v97 + 8)) >> (8 * (v97 == 0)));
  uint64_t v31 = v88;
  if (*((void *)&v95 + 1) < v89)
  {
    uint64_t v71 = *(void *)v93 + v95;
    *(void *)uint64_t v93 = v71;
    int v72 = *(_DWORD *)(v93 + 16) + v69;
    goto LABEL_78;
  }
LABEL_72:
  *unsigned int v15 = *v15 & 0xFFF3 | (4 * (a6 & 3));
  if ((int)v92 >= 8)
  {
    uint64_t v73 = 0;
    uint64_t v74 = v15;
    do
    {
      uint64_t v75 = v74;
      uint64_t v76 = v92 >> 3;
      do
      {
        *v75++ = *v15;
        --v76;
      }
      while (v76);
      ++v73;
      v74 += v86;
    }
    while (v73 != v92 >> 3);
  }
  uint64_t v70 = *(void *)(result + 2408);
  uint64_t v71 = *(void *)a8 + v31;
  *(void *)a8 = v71;
  int v72 = *(_DWORD *)(a8 + 16) + v32;
LABEL_78:
  *(_DWORD *)(a8 + 16) = v72;
  *(void *)(a8 + 8) = v71
                      + ((v72 * *(unsigned __int16 *)(v70 + 2 * *(__int16 *)(a8 + 20) + 8)) >> (8 * (*(_WORD *)(a8 + 20) == 0)));
  return result;
}

uint64_t sub_1BBABECE8(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6)
{
  uint64_t v10 = (a6 - 1);
  if (*(unsigned __int8 *)(a1[298] + 2011) < a6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = (a4 + 1);
    do
    {
      uint64_t result = sub_1BBABECE8(a1, ((v11 & 1) << v10) + (int)a2, (v11 >> 1 << v10) + a3, v12, a5, v10);
      if (result) {
        BOOL v14 = v11 == 3;
      }
      else {
        BOOL v14 = 1;
      }
      ++v11;
    }
    while (!v14);
    return result;
  }
  uint64_t v16 = 0;
  unsigned int v17 = a2 - *((_DWORD *)a5 + 1);
  unsigned int v18 = a3 - *((_DWORD *)a5 + 2);
  unsigned int v19 = *a5;
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    if (v17 >= v19 || v18 >= v19)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 80) + 24))(*(void *)(*((void *)a5 + 17) + 80), *(void *)(*((void *)a5 + 17) + 88) + v17 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v18);
      unsigned int v19 = *a5;
      unsigned int v17 = a2 - *((_DWORD *)a5 + 1);
      unsigned int v18 = a3 - *((_DWORD *)a5 + 2);
    }
  }
  uint64_t v21 = 0;
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    if (v17 >= v19 || v18 >= v19)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96) + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v17+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v18 & 0xFFFFFFFE));
      unsigned int v19 = *a5;
      unsigned int v17 = a2 - *((_DWORD *)a5 + 1);
      unsigned int v18 = a3 - *((_DWORD *)a5 + 2);
    }
  }
  uint64_t v23 = 0;
  uint64_t v30 = v21;
  uint64_t v31 = **((unsigned __int8 **)a5 + 17);
  uint64_t v32 = a5[1];
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    uint64_t v23 = 0;
    if (v17 < v19 && v18 < v19)
    {
      uint64_t v23 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3), v17 + a5[1] * (unint64_t)v18 + *((void *)a5 + 4));
      unsigned int v19 = *a5;
      unsigned int v17 = a2 - *((_DWORD *)a5 + 1);
      unsigned int v18 = a3 - *((_DWORD *)a5 + 2);
    }
  }
  uint64_t v24 = 0;
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    uint64_t v24 = 0;
    if (v17 < v19 && v18 < v19)
    {
      uint64_t v24 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 5) + 24))(*((void *)a5 + 5), v17 + a5[1] * (unint64_t)(v18 >> 1) + *((void *)a5 + 6));
      unsigned int v19 = *a5;
      unsigned int v17 = a2 - *((_DWORD *)a5 + 1);
      unsigned int v18 = a3 - *((_DWORD *)a5 + 2);
    }
  }
  int v25 = *(unsigned __int8 *)(a1[299] + 605);
  uint64_t v26 = (*(__int16 *)(*((void *)a5 + 11) + 2 * ((v17 >> 3) + (v19 >> 3) * (unint64_t)(v18 >> 3))) >> 9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(a1[297] + 8 * a6 + 1880))(v23, v32, v16, v31, a1);
  uint64_t result = sub_1BBABA04C((uint64_t)a1, a2, a3, v26, (uint64_t)a1, 1 << a6, (uint64_t)a1, 1 << a6, a6, 0, 0) ^ 1;
  if (!v25 && (result & 1) == 0) {
    uint64_t result = sub_1BBABF144((uint64_t)a1, 1 << a6, a6);
  }
  if (a6 >= 3 && result)
  {
    if (v10 <= *(unsigned __int8 *)(a1[298] + 2012)) {
      LODWORD(v10) = *(unsigned __int8 *)(a1[298] + 2012);
    }
    int v27 = 1 << v10;
    uint64_t v28 = a1[297] + 8 * (int)v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))(v28 + 2064))(v24, v32, v30, v31, a1, (uint64_t)a1 + 2 * (1 << v10 << v10));
    (*(void (**)(void *))(v28 + 1912))(a1);
    (*(void (**)(uint64_t))(v28 + 1912))((uint64_t)a1 + 2 * (1 << v10 << v10));
    int v29 = sub_1BBABA04C((uint64_t)a1, a2, a3, v26, (uint64_t)a1, v27, (uint64_t)a1, v27, v10, 1, 0);
    if (v25 || !v29)
    {
      if ((v29 & 1) == 0) {
        goto LABEL_45;
      }
    }
    else if (sub_1BBABF144((uint64_t)a1, v27, v10))
    {
LABEL_45:
      uint64_t result = sub_1BBABA04C((uint64_t)a1, a2, a3, v26, (uint64_t)a1 + 2 * (v27 << v10), v27, (uint64_t)a1 + 2 * (v27 << v10), v27, v10, 2, 0) ^ 1;
      if (!v25 && (result & 1) == 0)
      {
        return sub_1BBABF144((uint64_t)a1 + 2 * (v27 << v10), v27, v10);
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1BBABF144(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = 0;
  uint64_t v4 = 0;
  int v5 = 0;
  int v6 = 0u;
  uint64_t v7 = a3 - 2;
  while (2)
  {
    for (uint64_t i = 0; i != 16; ++i)
    {
      LOWORD(v9) = *(_WORD *)(a1
                            + 2 * (*((unsigned __int8 *)*(&off_1E6248580 + v7) + v4) >> v7) * a2
                            + 2 * (*((unsigned __int8 *)*(&off_1E6248580 + v7) + v4) & ~(-1 << v7))
                            + 2 * byte_1BBB83EF0[16 * v7 + i]);
      if ((_WORD)v9)
      {
        if ((v9 & 0x8000u) != 0) {
          int v9 = -(__int16)v9;
        }
        BOOL v10 = (unsigned __int16)v9 <= 1u && (unint64_t)(v3 & 0xFFFFFFF0) + i >= byte_1BBB7030C[v7];
        if (!v10 || (v5 += byte_1BBB9586F[v6], v5 > 5))
        {
          unsigned int v11 = 0;
          goto LABEL_19;
        }
        int v6 = -1;
      }
      if (v6 >= 6) {
        int v6 = 6;
      }
      ++v6;
    }
    ++v4;
    v3 += 16;
    if (!(v4 >> (2 * a3 - 4))) {
      continue;
    }
    break;
  }
  unsigned int v11 = 1;
LABEL_19:
  if (v5 < 6) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t sub_1BBABF248(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5)
{
  uint64_t v10 = (a2 - *((_DWORD *)a5 + 1));
  unsigned int v11 = a3 - *((_DWORD *)a5 + 2);
  uint64_t v12 = *((void *)a5 + 11);
  unint64_t v13 = (v10 >> 3) + ((unint64_t)*a5 >> 3) * (v11 >> 3);
  __int16 v27 = *(_WORD *)(v12 + 2 * v13);
  uint64_t v14 = a5[1];
  uint64_t v15 = **((unsigned __int8 **)a5 + 17);
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3), v10 + v14 * v11 + *((void *)a5 + 4));
  uint64_t v17 = 0;
  unsigned int v18 = a2 - *((_DWORD *)a5 + 1);
  if ((v18 & 0x80000000) == 0)
  {
    unsigned int v19 = a3 - *((_DWORD *)a5 + 2);
    if ((v19 & 0x80000000) == 0)
    {
      uint64_t v17 = 0;
      unsigned int v20 = *a5;
      if (v18 < v20 && v19 < v20) {
        uint64_t v17 = (*(uint64_t (**)(void, unint64_t, void))(**(void **)(*((void *)a5 + 17) + 80)
      }
                                                                          + 24))(*(void *)(*((void *)a5 + 17) + 80), *(void *)(*((void *)a5 + 17) + 88) + v18 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v19, 0);
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2376) + 8 * a4 + 1880))(v16, v14, v17, v15, a1);
  uint64_t v21 = 3;
  if (*(unsigned char *)(*(void *)(a1 + 2392) + 234))
  {
    __int16 v22 = v27;
    int v23 = v27 >> 9;
    if (v23 >= 47) {
      LOWORD(v23) = 47;
    }
    __int16 v24 = ((_WORD)v23 << 9) + 2048;
    *(_WORD *)(v12 + 2 * v13) = v24 & 0xFE00 | *(_WORD *)(v12 + 2 * v13) & 0x1FF;
    int v25 = sub_1BBABA04C(a1, a2, a3, (v24 >> 9), a1, 1 << a4, a1, 1 << a4, a4, 0, 0);
    *(_WORD *)(v12 + 2 * v13) = v22 & 0xFE00 | *(_WORD *)(v12 + 2 * v13) & 0x1FF;
    if (v25) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return v21;
}

uint64_t sub_1BBABF424(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = a5;
  LOBYTE(v10) = a4;
  unsigned int v11 = 0;
  v460[1] = *MEMORY[0x1E4F143B8];
  int v12 = a2 - *((_DWORD *)a5 + 1);
  int v13 = a3 - *((_DWORD *)a5 + 2);
  if ((v12 & 0x80000000) == 0 && (v13 & 0x80000000) == 0)
  {
    unint64_t v14 = *a5;
    if (v12 >= v14 || v13 >= v14) {
      unsigned int v11 = 0;
    }
    else {
      unsigned int v11 = (__int16 *)(*((void *)a5 + 11)
    }
                      + 2
                      * ((v12 >> 3) + (v14 >> 3)
                                                  * (unint64_t)(v13 >> 3)));
  }
  uint64_t v16 = *(void *)(a1 + 2400);
  uint64_t v17 = *(long long **)(v16 + 944);
  uint64_t v18 = *(int *)(a1 + 2048);
  uint64_t v19 = v18 - a4;
  uint64_t v20 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 2376) + 1368) + 2009) - (uint64_t)(int)v19;
  uint64_t v21 = *(void *)(a1 + 2392);
  int v425 = *(unsigned __int8 *)(v21 + 227);
  int v409 = *(unsigned __int8 *)(a1 + 2416);
  if (*(unsigned char *)(v21 + 352)) {
    BOOL v22 = v19 == 2;
  }
  else {
    BOOL v22 = 0;
  }
  int v23 = v22;
  int v406 = v23;
  __len[0] = 0;
  unsigned __int8 v444 = 0;
  int v442 = 0;
  long long v24 = xmmword_1BBB6F8F0;
  long long v441 = xmmword_1BBB6F8F0;
  __int16 v443 = 0;
  int v439 = 0;
  long long v438 = xmmword_1BBB6F8F0;
  __int16 v440 = 0;
  int v436 = 0;
  long long v435 = xmmword_1BBB6F8F0;
  __int16 v437 = 0;
  int v25 = *(unsigned __int8 **)(a1 + 2384);
  int v26 = v25[244];
  if (*(_DWORD *)(a1 + 2056)) {
    BOOL v27 = v26 == 0;
  }
  else {
    BOOL v27 = 0;
  }
  int v29 = v27 && a4 == 0;
  int v30 = v18 - v26 - v29;
  if (v30 <= v25[2010]) {
    int v30 = v25[2010];
  }
  int v31 = v25[2011];
  int v32 = v31 - v29;
  if (v30 <= v31) {
    int v32 = v30;
  }
  if (v32 < (int)v19) {
    char v33 = v29;
  }
  else {
    char v33 = 0;
  }
  if ((int)v19 > v31) {
    char v34 = 1;
  }
  else {
    char v34 = v33;
  }
  int v413 = v25[2009] - v31;
  if ((int)v20 <= v413 || v20 == *(_DWORD *)(a1 + 2432))
  {
    uint64_t v35 = (unsigned __int8 **)(a5 + 136);
  }
  else
  {
    int v12 = 0;
    int v13 = 0;
    uint64_t v35 = (unsigned __int8 **)(v16 + 32 * v20 + 8 * a6 + 216);
  }
  int v414 = v20;
  uint64_t v429 = *v35;
  int v412 = v32;
  int v426 = v13;
  int v427 = v12;
  uint64_t v431 = v19;
  unsigned int v430 = a2;
  if (v32 >= (int)v19) {
    goto LABEL_48;
  }
  char v419 = v34;
  int v36 = sub_1BBABF424(a1);
  int v37 = v36 | sub_1BBABF424(a1);
  LOBYTE(v36) = sub_1BBABF424(a1);
  int v9 = a5;
  char v38 = sub_1BBABF424(a1);
  char v34 = v419;
  char v39 = v37 | v36 | v38;
  if ((v419 & 1) == 0)
  {
    unint64_t v40 = ((unsigned __int8 *)v17 - (int)v19)[76];
    if (v40) {
      unint64_t v41 = *((void *)v17 + 1) - byte_1BBB78C10[(*((void *)v17 + 1) & 0xC0) + (v40 >> 1)];
    }
    else {
      unint64_t v41 = byte_1BBB78C10[(*((void *)v17 + 1) & 0xC0) + (v40 >> 1)];
    }
    int v42 = __clz(v41);
    v436 += *((void *)v17 + 1) - (v41 << (v42 - 55)) + ((v42 - 55) << 8);
    *((void *)&v435 + 1) = v435
                           + ((v436 * *(unsigned __int16 *)(*(void *)(a1 + 2408) + 2 * v437 + 8)) >> (8 * (v437 == 0)));
  }
  int v12 = v427;
  LOBYTE(v10) = a4;
  a2 = v430;
  long long v24 = xmmword_1BBB6F8F0;
  if (v39)
  {
    int v43 = 1;
    goto LABEL_49;
  }
  uint64_t v44 = *(void *)(a1 + 2384);
  if (*(unsigned char *)(v44 + 244) && (int)v19 <= *(unsigned __int8 *)(v44 + 2011))
  {
    int v43 = 0;
    int v436 = 0;
    long long v435 = xmmword_1BBB6F8F0;
    __int16 v437 = 0;
  }
  else
  {
LABEL_48:
    int v43 = 0;
  }
LABEL_49:
  unsigned int v415 = v43;
  if (v34)
  {
    int v45 = 0;
    int v46 = 0;
    int v422 = 0;
    int v47 = 0;
    uint64_t v48 = 0;
    int v49 = 0;
    unint64_t v50 = -1;
    uint64_t v51 = a1;
    goto LABEL_266;
  }
  for (uint64_t i = 0; i != 72; i += 24)
  {
    unsigned int v53 = (char *)&v455 + i;
    *((_DWORD *)v53 + 4) = 0;
    *(_OWORD *)unsigned int v53 = v24;
    *((_WORD *)v53 + 10) = 0;
    uint64_t v54 = (char *)&v449 + i;
    *((_DWORD *)v54 + 4) = 0;
    *(_OWORD *)uint64_t v54 = v24;
    *((_WORD *)v54 + 10) = 0;
  }
  uint64_t v55 = 0;
  uint64_t v420 = (1 << v19);
  uint64_t v56 = v9[1];
  uint64_t v57 = *v429;
  uint64_t v58 = a2 - *((_DWORD *)v9 + 1);
  unsigned int v59 = a3 - *((_DWORD *)v9 + 2);
  if ((v58 & 0x80000000) == 0 && (v59 & 0x80000000) == 0)
  {
    unsigned int v60 = *v9;
    if (v58 >= v60 || v59 >= v60)
    {
      uint64_t v55 = 0;
    }
    else
    {
      uint64_t v55 = (*(uint64_t (**)(void, unint64_t))(**((void **)v9 + 3) + 24))(*((void *)v9 + 3), v58 + v9[1] * (unint64_t)v59 + *((void *)v9 + 4));
      LODWORD(v58) = v430 - *((_DWORD *)v9 + 1);
      unsigned int v59 = a3 - *((_DWORD *)v9 + 2);
    }
  }
  uint64_t v423 = 0;
  if ((v58 & 0x80000000) == 0 && (v59 & 0x80000000) == 0)
  {
    uint64_t v423 = 0;
    unsigned int v62 = *v9;
    if (v58 < v62 && v59 < v62) {
      uint64_t v423 = (*(uint64_t (**)(void, unint64_t))(**((void **)v9 + 7) + 24))(*((void *)v9 + 7), v58 + v9[1] * (unint64_t)v59 + *((void *)v9 + 8));
    }
  }
  uint64_t v63 = (*(uint64_t (**)(void, uint64_t))(**((void **)v429 + 10) + 24))(*((void *)v429 + 10), *((void *)v429 + 11) + v427 + *v429 * (uint64_t)v13);
  uint64_t v64 = *((void *)v429 + 7);
  int v65 = *v429;
  *(void *)int __c = v57;
  uint64_t v391 = v63;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2400) + 8144))(v420, v420, v56, v423, v57);
  int v401 = v13 >> 2;
  if (*(unsigned char *)(*(void *)(a1 + 2392) + 352) && v19 >= 2)
  {
    unint64_t v66 = (unint64_t)*v429 >> 2;
    uint64_t v67 = (char *)(*((void *)v429 + 1) + ((uint64_t)v427 >> 2) + (int)v66 * (uint64_t)v401);
    uint64_t v68 = (uint64_t)(int)v420 >> 2;
    do
    {
      --v68;
      bzero(v67, (uint64_t)(int)v420 >> 2);
      v67 += v66;
    }
    while (v68);
  }
  if (v425)
  {
    unsigned int v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2408)
                                                                                          + 8 * (int)v431
                                                                                          + 8))(v420, v420, v55, v56, v423, v56);
    LODWORD(v450) = 0;
    *(void *)&long long v449 = v69;
    *((void *)&v449 + 1) = v69;
  }
  uint64_t v394 = v56;
  uint64_t v397 = v55;
  unint64_t v70 = 0;
  uint64_t v71 = *(void *)(a1 + 2400);
  *(_DWORD *)(v71 + 808) = v430;
  *(_DWORD *)(v71 + 812) = a3;
  unsigned int v72 = v430 - *((_DWORD *)a5 + 1);
  if ((v72 & 0x80000000) != 0)
  {
    uint64_t v74 = *(void *)__c;
    uint64_t v75 = v391;
  }
  else
  {
    unsigned int v73 = a3 - *((_DWORD *)a5 + 2);
    uint64_t v74 = *(void *)__c;
    uint64_t v75 = v391;
    if ((v73 & 0x80000000) == 0)
    {
      unint64_t v70 = 0;
      unint64_t v76 = *a5;
      if (v72 < v76 && v73 < v76) {
        unint64_t v70 = *((void *)a5 + 12) + 16 * ((v72 >> 2) + (v76 >> 2) * (unint64_t)(v73 >> 2));
      }
    }
  }
  *(void *)(v71 + 864) = v70;
  uint64_t v388 = v64 + 2 * (v427 + v65 * (uint64_t)v426);
  sub_1BBAB86E0(a1, v430, a3, v11, v397, v56, v423, v56, v75, v74, v388, v74, v431, (unsigned char *)__len + 1, 0);
  uint64_t v385 = (int)v431 - 2;
  int v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2408)
                                                                                       + 8 * v385
                                                                                       + 24);
  uint64_t v78 = *(void *)(a1 + 2400);
  *(_DWORD *)(v78 + 808) = v430;
  *(_DWORD *)(v78 + 812) = a3;
  *(void *)(v78 + 816) = v74;
  if (!HIBYTE(__len[0]))
  {
    if (v425)
    {
      int v84 = 0;
      int v85 = 1;
      uint64_t v81 = v420;
      goto LABEL_94;
    }
    uint64_t v81 = v420;
    unsigned int v102 = v77(v420, v420, v397, v56, v391, v74);
    int v84 = 0;
    LODWORD(v450) = 0;
    *(void *)&long long v449 = v102;
    *((void *)&v449 + 1) = v102;
    uint64_t v456 = v450;
    long long v455 = v449;
    goto LABEL_93;
  }
  uint64_t v79 = v77(v420, v420, v397, v56, v75, v74);
  *(void *)&long long v455 = v79;
  if (*(unsigned char *)(*(void *)(a1 + 2392) + 251))
  {
    unsigned int v80 = 0;
    LODWORD(v447) = 0;
    *(_DWORD *)&__len[1] = 0;
    uint64_t v81 = v420;
    if (!*(unsigned char *)(*(void *)(a1 + 2400) + 188))
    {
      (*(void (**)(uint64_t, int *, uint64_t, unint64_t *, _WORD *))(a1
                                                                                   + 8 * (v431 > 2)
                                                                                   + 2224))(v420, *(int **)__c, v388, &v447, &__len[1]);
      uint64_t v82 = &byte_1BBB7CAC4[*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 2376) + 1368) + 2001)
                          + (uint64_t)(*(__int16 *)(*((void *)a5 + 11)
                                                 + 2
                                                 * (((v430 - *((_DWORD *)a5 + 1)) >> 3)
                                                  + ((unint64_t)*a5 >> 3) * ((a3 - *((_DWORD *)a5 + 2)) >> 3))) >> 9)];
      unsigned int v80 = (((v447 * *v82 + *(_DWORD *)&__len[1] * v82[70]) << 6) + 128) & 0xFFFFFF00;
    }
    uint64_t v83 = a1;
    LODWORD(v456) = v80;
  }
  else
  {
    long long v86 = v17[2];
    long long v87 = v17[4];
    long long v88 = v17[5];
    *(long long *)((char *)v17 + 264) = v17[3];
    *(long long *)((char *)v17 + 280) = v87;
    *(long long *)((char *)v17 + 248) = v86;
    long long v89 = *v17;
    *(long long *)((char *)v17 + 232) = v17[1];
    long long v90 = v17[6];
    long long v91 = v17[8];
    long long v92 = v17[9];
    *(long long *)((char *)v17 + 328) = v17[7];
    *(long long *)((char *)v17 + 344) = v91;
    *(long long *)((char *)v17 + 296) = v88;
    *(long long *)((char *)v17 + 312) = v90;
    long long v93 = v17[11];
    *(long long *)((char *)v17 + 376) = v17[10];
    *(long long *)((char *)v17 + 392) = v93;
    *(long long *)((char *)v17 + 360) = v92;
    *((void *)v17 + 51) = *((void *)v17 + 24);
    *(long long *)((char *)v17 + 216) = v89;
    uint64_t v94 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
    *((void *)v17 + 4) = 0;
    *((void *)v17 + 1) = 510;
    *((void *)v17 + 2) = v94;
    *(void *)(*(void *)(a1 + 2400) + 872) = v388;
    if (*(unsigned char *)(*(void *)(a1 + 2392) + 352)) {
      *(void *)(*(void *)(a1 + 2400) + 920) = *((void *)v429 + 1)
    }
                                                  + ((uint64_t)v427 >> 2)
                                                  + ((unint64_t)*v429 >> 2) * v401;
    sub_1BBAB5BB4(a1, v430, a3, v431, 0, 0);
    unsigned int v80 = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
        - *((_DWORD *)v17 + 2)
        + 510;
    uint64_t v83 = a1;
    LODWORD(v456) = v80;
    long long v95 = *(long long *)((char *)v17 + 392);
    v17[10] = *(long long *)((char *)v17 + 376);
    v17[11] = v95;
    *((void *)v17 + 24) = *((void *)v17 + 51);
    long long v96 = *(long long *)((char *)v17 + 328);
    v17[6] = *(long long *)((char *)v17 + 312);
    v17[7] = v96;
    long long v97 = *(long long *)((char *)v17 + 360);
    v17[8] = *(long long *)((char *)v17 + 344);
    v17[9] = v97;
    long long v98 = *(long long *)((char *)v17 + 264);
    v17[2] = *(long long *)((char *)v17 + 248);
    v17[3] = v98;
    long long v99 = *(long long *)((char *)v17 + 296);
    v17[4] = *(long long *)((char *)v17 + 280);
    v17[5] = v99;
    long long v100 = *(long long *)((char *)v17 + 232);
    *uint64_t v17 = *(long long *)((char *)v17 + 216);
    v17[1] = v100;
    uint64_t v81 = v420;
  }
  int v85 = 0;
  unint64_t v101 = v79
       + ((v80 * *(unsigned __int16 *)(*(void *)(v83 + 2408) + 2 * SWORD2(v456) + 8)) >> (8 * (WORD2(v456) == 0)));
  *((void *)&v455 + 1) = v101;
  int v84 = 1;
  if (v425 && *((void *)&v449 + 1) < v101)
  {
    HIBYTE(__len[0]) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)(a1 + 2400) + 8144))(v81, v81, v56, v423, *(int **)__c, v391);
    int v84 = 0;
LABEL_93:
    int v85 = 1;
  }
LABEL_94:
  if (!v406)
  {
    if (v85) {
      long long v133 = &v449;
    }
    else {
      long long v133 = &v455;
    }
    uint64_t v389 = *(void *)v133;
    long long v134 = &v456;
    if (v85) {
      long long v134 = &v450;
    }
    int v407 = *(_DWORD *)v134;
    int v12 = v427;
    uint64_t v132 = a1;
    goto LABEL_111;
  }
  unint64_t v103 = *(unsigned __int8 **)(*(void *)(a1 + 2400) + 376);
  uint64_t v104 = *v103;
  uint64_t v105 = (*(uint64_t (**)(void, void))(**((void **)v103 + 10) + 24))(*((void *)v103 + 10), *((void *)v103 + 11));
  uint64_t v106 = *(void *)(a1 + 2400);
  uint64_t v107 = *(void *)(*(void *)(v106 + 376) + 56);
  LOBYTE(v447) = 0;
  int v373 = v85;
  if (v85) {
    uint64_t v108 = &v449;
  }
  else {
    uint64_t v108 = &v455;
  }
  uint64_t v389 = *(void *)v108;
  int v109 = &v456;
  if (v85) {
    int v109 = &v450;
  }
  int v407 = *(_DWORD *)v109;
  unint64_t v110 = *((void *)&v455 + 1);
  unint64_t v371 = *((void *)&v449 + 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 8144))(v81, v81, v394, v423, v104, v105);
  uint64_t v375 = v107;
  uint64_t v380 = v105;
  sub_1BBAB86E0(a1, v430, a3, v11, v397, v394, v423, v394, v105, v104, v107, v104, 2, &v447, 1);
  if (!(_BYTE)v447)
  {
    int v12 = v427;
    uint64_t v136 = (uint64_t)v426 >> 2;
    uint64_t v121 = (uint64_t)v427 >> 2;
LABEL_114:
    uint64_t v132 = a1;
    long long v135 = v429;
    *(unsigned char *)(*((void *)v429 + 1) + v121 + (int)v136 * (uint64_t)((unint64_t)*v429 >> 2)) = 0;
    goto LABEL_115;
  }
  unint64_t v111 = v371;
  if (!v373) {
    unint64_t v111 = v110;
  }
  unint64_t v424 = v111;
  unsigned int v398 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2408)
                                                                                         + 8 * v385
                                                                                         + 24))(v420, v420, v397, v394, v105, v104);
  long long v112 = v17[10];
  long long v113 = v17[11];
  long long v114 = v17[8];
  *(long long *)((char *)v17 + 360) = v17[9];
  *(long long *)((char *)v17 + 376) = v112;
  *(long long *)((char *)v17 + 392) = v113;
  long long v115 = v17[6];
  long long v116 = v17[7];
  long long v117 = v17[4];
  *(long long *)((char *)v17 + 296) = v17[5];
  *(long long *)((char *)v17 + 312) = v115;
  *(long long *)((char *)v17 + 328) = v116;
  *(long long *)((char *)v17 + 344) = v114;
  long long v118 = *v17;
  *(long long *)((char *)v17 + 232) = v17[1];
  long long v119 = v17[3];
  *(long long *)((char *)v17 + 248) = v17[2];
  *(long long *)((char *)v17 + 264) = v119;
  *(long long *)((char *)v17 + 280) = v117;
  *(void *)&long long v455 = v398;
  *((void *)v17 + 51) = *((void *)v17 + 24);
  *(long long *)((char *)v17 + 216) = v118;
  uint64_t v120 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
  *((void *)v17 + 4) = 0;
  *((void *)v17 + 1) = 510;
  *((void *)v17 + 2) = v120;
  uint64_t v121 = (uint64_t)v427 >> 2;
  memset((void *)(*((void *)v429 + 1) + v121 + ((unint64_t)*v429 >> 2) * v401), 1, v420 >> 2);
  *(void *)(*(void *)(a1 + 2400) + 872) = v375;
  uint64_t v122 = *(void *)(a1 + 2400);
  *(void *)(v122 + 816) = v104;
  *(void *)(v122 + 920) = *((void *)v429 + 1) + v121 + ((unint64_t)*v429 >> 2) * v401;
  sub_1BBAB5BB4(a1, v430, a3, 2, 0, 0);
  LODWORD(v456) = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
                - *((_DWORD *)v17 + 2)
                + 510;
  int v123 = v456;
  long long v125 = *(long long *)((char *)v17 + 264);
  long long v124 = *(long long *)((char *)v17 + 280);
  v17[2] = *(long long *)((char *)v17 + 248);
  v17[3] = v125;
  long long v127 = *(long long *)((char *)v17 + 328);
  long long v126 = *(long long *)((char *)v17 + 344);
  long long v128 = *(long long *)((char *)v17 + 296);
  v17[6] = *(long long *)((char *)v17 + 312);
  v17[7] = v127;
  v17[4] = v124;
  v17[5] = v128;
  long long v129 = *(long long *)((char *)v17 + 392);
  long long v130 = *(long long *)((char *)v17 + 360);
  v17[10] = *(long long *)((char *)v17 + 376);
  v17[11] = v129;
  long long v131 = *(long long *)((char *)v17 + 232);
  *((void *)v17 + 24) = *((void *)v17 + 51);
  v17[8] = v126;
  v17[9] = v130;
  *uint64_t v17 = *(long long *)((char *)v17 + 216);
  v17[1] = v131;
  *((void *)&v455 + 1) = ((v123 * *(unsigned __int16 *)(*(void *)(a1 + 2408) + 2 * SWORD2(v456) + 8)) >> (8 * (WORD2(v456) == 0)))
                         + (unint64_t)v398;
  if (v424 <= *((void *)&v455 + 1))
  {
    int v12 = v427;
    uint64_t v136 = (uint64_t)v426 >> 2;
    goto LABEL_114;
  }
  HIBYTE(__len[0]) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)(a1 + 2400) + 8144))(v420, v420, v104, v380, *(int **)__c, v391);
  int v84 = 1;
  int v407 = v123;
  uint64_t v389 = v398;
  int v12 = v427;
  uint64_t v132 = a1;
LABEL_111:
  long long v135 = v429;
LABEL_115:
  unint64_t v137 = (unint64_t)*v135 >> 2;
  long long v138 = (char *)(*((void *)v135 + 4) + ((uint64_t)v12 >> 2) + (int)v137 * (uint64_t)v401);
  uint64_t v139 = 1 << v385;
  int v9 = a5;
  do
  {
    --v139;
    memset(v138, v84, 1 << v385);
    v138 += v137;
  }
  while (v139);
  LOBYTE(v140) = v409 != 0;
  int v422 = v84;
  if (!*(unsigned char *)(v132 + 2416))
  {
    int v10 = a4;
    if ((int)v431 <= *(unsigned __int8 *)(*(void *)(v132 + 2384) + 2012))
    {
      int v141 = 0;
      if (a6) {
        unsigned int v143 = 0;
      }
      else {
        unsigned int v143 = v431;
      }
      LOBYTE(v140) = 1;
      unsigned int v142 = v430;
      if (a6 || v409)
      {
        int v46 = 0;
        goto LABEL_246;
      }
    }
    else
    {
      unsigned int v142 = v430;
      if (v409)
      {
        int v141 = 0;
        int v46 = 0;
        LOBYTE(v140) = 1;
        goto LABEL_246;
      }
      unsigned int v143 = v431 - 1;
    }
    uint64_t v399 = 0;
    uint64_t v144 = (1 << v143);
    uint64_t v410 = a5[1];
    uint64_t v392 = v429[1];
    uint64_t v145 = v142 - *((_DWORD *)a5 + 1);
    unsigned int v146 = a3 - *((_DWORD *)a5 + 2);
    unsigned int v421 = v143;
    if ((v145 & 0x80000000) == 0 && (v146 & 0x80000000) == 0)
    {
      uint64_t v399 = 0;
      unsigned int v147 = *a5;
      if (v145 < v147 && v146 < v147)
      {
        uint64_t v399 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 5) + 24))(*((void *)a5 + 5), v145 + a5[1] * (unint64_t)(v146 >> 1) + *((void *)a5 + 6));
        LODWORD(v145) = v430 - *((_DWORD *)a5 + 1);
        unsigned int v146 = a3 - *((_DWORD *)a5 + 2);
      }
    }
    uint64_t v148 = 0;
    uint64_t v402 = 2 * v392;
    uint64_t v395 = v144;
    if ((v145 & 0x80000000) == 0 && (v146 & 0x80000000) == 0)
    {
      uint64_t v148 = 0;
      unsigned int v149 = *a5;
      if (v145 < v149 && v146 < v149) {
        uint64_t v148 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 9) + 24))(*((void *)a5 + 9), v145 + a5[1] * (unint64_t)(v146 >> 1) + *((void *)a5 + 10));
      }
    }
    int v376 = 2 * (v426 >> 1);
    uint64_t v384 = (*(uint64_t (**)(void, unint64_t))(**((void **)v429 + 12) + 24))(*((void *)v429 + 12), *((void *)v429 + 13) + v427 + v376 * (unint64_t)v429[1]);
    int v386 = v429[1];
    uint64_t v150 = (uint64_t)v12 >> 1;
    *(void *)int __ca = *((void *)v429 + 8);
    uint64_t v377 = *((void *)v429 + 9);
    unsigned int v381 = 2 << v421;
    (*(void (**)(void))(*(void *)(v132 + 2400) + 8144))();
    if (v425)
    {
      uint64_t v151 = *(void *)(v132 + 2408);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, long long *))(v151 + 376))(v399, v410, v148, v410, v144, v144, &v451, &v453);
      uint64_t v152 = *(unsigned __int16 *)(v151 + 18);
      *(void *)&long long v451 = (unint64_t)(v451 * v152) >> 8;
      *(void *)&long long v453 = (unint64_t)(v453 * v152) >> 8;
      LODWORD(v452) = 0;
      LODWORD(v454) = 0;
    }
    uint64_t v382 = v148;
    uint64_t v153 = v150 + v386 * (uint64_t)(v426 >> 1);
    int v387 = v426 >> 3;
    int v154 = v421;
    if (*(unsigned char *)(*(void *)(v132 + 2392) + 352) && v421 >= 2)
    {
      unint64_t v155 = (unint64_t)v429[1] >> 2;
      size_t v156 = (uint64_t)(int)v144 >> 2;
      uint64_t v157 = (uint64_t)v427 >> 3;
      uint64_t v158 = (char *)(*((void *)v429 + 2) + v157 + (int)v155 * (uint64_t)v387);
      size_t v159 = v156;
      do
      {
        --v159;
        bzero(v158, v156);
        v158 += v155;
      }
      while (v159);
      unint64_t v160 = (unint64_t)v429[1] >> 2;
      int v161 = (char *)(*((void *)v429 + 3) + v157 + (int)v160 * (uint64_t)(v426 >> 3));
      uint64_t v162 = (uint64_t)(int)v395 >> 2;
      int v154 = v421;
      do
      {
        --v162;
        bzero(v161, v156);
        v161 += v160;
      }
      while (v162);
    }
    unint64_t v163 = 0;
    uint64_t v164 = *(void *)__ca + 2 * v153;
    uint64_t v165 = v377 + 2 * v153;
    uint64_t v166 = *(void *)(v132 + 2400);
    *(_DWORD *)(v166 + 808) = v430;
    *(_DWORD *)(v166 + 812) = a3;
    unsigned int v167 = v430 - *((_DWORD *)a5 + 1);
    if ((v167 & 0x80000000) != 0)
    {
      uint64_t v169 = v399;
      uint64_t v170 = v382;
    }
    else
    {
      unsigned int v168 = a3 - *((_DWORD *)a5 + 2);
      uint64_t v169 = v399;
      uint64_t v170 = v382;
      if ((v168 & 0x80000000) == 0)
      {
        unint64_t v171 = *a5;
        if (v167 >= v171 || v168 >= v171) {
          unint64_t v163 = 0;
        }
        else {
          unint64_t v163 = *((void *)a5 + 12) + 16 * ((v167 >> 2) + (v171 >> 2) * (unint64_t)(v168 >> 2));
        }
      }
    }
    *(void *)(v166 + 864) = v163;
    uint64_t v378 = v165;
    sub_1BBABC324((void *)v132, v430, a3, v154, v11, v169, v410, v170, v410, v384, v402, v164, v165, v392, (BOOL *)__len, &v444, 0, 0);
    *(void *)(*(void *)(v132 + 2400) + 824) = v392;
    int v173 = LOBYTE(__len[0]);
    int v174 = v444;
    if (!LOBYTE(__len[0]) && !v444 && v425)
    {
      int v175 = 0;
      int __cb = 0;
      int v176 = 1;
      int v177 = v427;
      int v178 = v407;
LABEL_160:
      unsigned int v179 = v421;
      goto LABEL_203;
    }
    uint64_t v180 = *(void *)(v132 + 2408);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v180 + 376))(v169, v410, v384, v402, v395, v395, &v447, &v448);
    uint64_t v181 = *(unsigned __int16 *)(v180 + 18);
    unint64_t v182 = (v447 * v181) >> 8;
    unint64_t v447 = v182;
    unint64_t v183 = (v448 * v181) >> 8;
    unint64_t v448 = v183;
    if (v173)
    {
      *(void *)&long long v457 = v182;
      if (*(unsigned char *)(*(void *)(v132 + 2392) + 251))
      {
        uint64_t v184 = v164;
        uint64_t v185 = v395;
        int v186 = sub_1BBAC1A84(v132, v430, a3, a5, 0, v184, v392, v395);
        LODWORD(v458) = v186;
        int v177 = v427;
      }
      else
      {
        long long v190 = v17[2];
        long long v191 = v17[4];
        long long v192 = v17[5];
        *(long long *)((char *)v17 + 264) = v17[3];
        *(long long *)((char *)v17 + 280) = v191;
        *(long long *)((char *)v17 + 248) = v190;
        long long v193 = *v17;
        *(long long *)((char *)v17 + 232) = v17[1];
        long long v194 = v17[6];
        long long v195 = v17[8];
        long long v196 = v17[9];
        *(long long *)((char *)v17 + 328) = v17[7];
        *(long long *)((char *)v17 + 344) = v195;
        *(long long *)((char *)v17 + 296) = v192;
        *(long long *)((char *)v17 + 312) = v194;
        long long v197 = v17[11];
        *(long long *)((char *)v17 + 376) = v17[10];
        *(long long *)((char *)v17 + 392) = v197;
        *(long long *)((char *)v17 + 360) = v196;
        *((void *)v17 + 51) = *((void *)v17 + 24);
        *(long long *)((char *)v17 + 216) = v193;
        uint64_t v198 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
        *((void *)v17 + 4) = 0;
        *((void *)v17 + 1) = 510;
        *((void *)v17 + 2) = v198;
        *(void *)(*(void *)(v132 + 2400) + 880) = v164;
        int v177 = v427;
        if (*(unsigned char *)(*(void *)(v132 + 2392) + 352)) {
          *(void *)(*(void *)(v132 + 2400) + 928) = *((void *)v429 + 2)
        }
                                                        + ((uint64_t)v427 >> 3)
                                                        + ((unint64_t)v429[1] >> 2) * v387;
        sub_1BBAB5BB4(v132, v430, a3, v421, 0, 1);
        int v186 = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
             - *((_DWORD *)v17 + 2)
             + 510;
        LODWORD(v458) = v186;
        long long v199 = *(long long *)((char *)v17 + 392);
        v17[10] = *(long long *)((char *)v17 + 376);
        v17[11] = v199;
        *((void *)v17 + 24) = *((void *)v17 + 51);
        long long v200 = *(long long *)((char *)v17 + 328);
        v17[6] = *(long long *)((char *)v17 + 312);
        v17[7] = v200;
        long long v201 = *(long long *)((char *)v17 + 360);
        v17[8] = *(long long *)((char *)v17 + 344);
        v17[9] = v201;
        long long v202 = *(long long *)((char *)v17 + 264);
        v17[2] = *(long long *)((char *)v17 + 248);
        v17[3] = v202;
        long long v203 = *(long long *)((char *)v17 + 296);
        v17[4] = *(long long *)((char *)v17 + 280);
        v17[5] = v203;
        long long v204 = *(long long *)((char *)v17 + 232);
        *uint64_t v17 = *(long long *)((char *)v17 + 216);
        v17[1] = v204;
        uint64_t v185 = v395;
      }
      uint64_t v205 = *(void *)(v132 + 2408) + 8;
      unint64_t v206 = v182
           + ((v186 * *(unsigned __int16 *)(v205 + 2 * SWORD2(v458))) >> (8 * (WORD2(v458) == 0)));
      *((void *)&v457 + 1) = v206;
      unint64_t v207 = v451
           + ((v452 * *(unsigned __int16 *)(v205 + 2 * SWORD2(v452))) >> (8 * (WORD2(v452) == 0)));
      *((void *)&v451 + 1) = v207;
      int v208 = 1;
      int v178 = v407;
      if (v425)
      {
        long long v187 = a5;
        int v188 = a3;
        if (v207 < v206)
        {
          LOBYTE(__len[0]) = 0;
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v132 + 2400) + 8152))(v381, v185, v410, v382, v402, v384);
          int v178 = v407;
          int v208 = 0;
        }
      }
      else
      {
        long long v187 = a5;
        int v188 = a3;
      }
      int __cb = v208;
      int v189 = v430;
      if (v174)
      {
        unint64_t v183 = v448;
        goto LABEL_176;
      }
      unsigned int v179 = v421;
      if (v425)
      {
        int v175 = 0;
        int v176 = 1;
        goto LABEL_203;
      }
      unint64_t v183 = v448;
    }
    else
    {
      if (v425)
      {
        int v178 = v407;
        uint64_t v185 = v395;
        if (!v174)
        {
          int v176 = 1;
          int __cb = 0;
          int v177 = v427;
          unsigned int v179 = v421;
          int v175 = 0;
          goto LABEL_203;
        }
        int __cb = 0;
        long long v187 = a5;
        int v188 = a3;
        int v189 = v430;
        goto LABEL_176;
      }
      int __cb = 0;
      *(void *)&long long v451 = v182;
      LODWORD(v452) = 0;
      long long v457 = v451;
      uint64_t v458 = v452;
      long long v187 = a5;
      int v188 = a3;
      int v189 = v430;
      int v178 = v407;
      uint64_t v185 = v395;
      if (v174)
      {
LABEL_176:
        *(void *)&long long v459 = v183;
        if (*(unsigned char *)(*(void *)(v132 + 2392) + 251))
        {
          int v209 = sub_1BBAC1A84(v132, v189, v188, v187, 1, v378, v392, v185);
          LODWORD(v460[0]) = v209;
          unsigned int v179 = v421;
        }
        else
        {
          long long v210 = v17[2];
          long long v211 = v17[4];
          long long v212 = v17[5];
          *(long long *)((char *)v17 + 264) = v17[3];
          *(long long *)((char *)v17 + 280) = v211;
          *(long long *)((char *)v17 + 248) = v210;
          long long v213 = *v17;
          *(long long *)((char *)v17 + 232) = v17[1];
          long long v214 = v17[6];
          long long v215 = v17[8];
          long long v216 = v17[9];
          *(long long *)((char *)v17 + 328) = v17[7];
          *(long long *)((char *)v17 + 344) = v215;
          *(long long *)((char *)v17 + 296) = v212;
          *(long long *)((char *)v17 + 312) = v214;
          long long v217 = v17[11];
          *(long long *)((char *)v17 + 376) = v17[10];
          *(long long *)((char *)v17 + 392) = v217;
          *(long long *)((char *)v17 + 360) = v216;
          *((void *)v17 + 51) = *((void *)v17 + 24);
          *(long long *)((char *)v17 + 216) = v213;
          uint64_t v218 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
          *((void *)v17 + 4) = 0;
          *((void *)v17 + 1) = 510;
          *((void *)v17 + 2) = v218;
          *(void *)(*(void *)(v132 + 2400) + 888) = v378;
          unsigned int v179 = v421;
          if (*(unsigned char *)(*(void *)(v132 + 2392) + 352)) {
            *(void *)(*(void *)(v132 + 2400) + 936) = *((void *)v429 + 3)
          }
                                                          + ((uint64_t)v427 >> 3)
                                                          + ((unint64_t)v429[1] >> 2) * v387;
          sub_1BBAB5BB4(v132, v189, v188, v421, 0, 2);
          int v209 = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
               - *((_DWORD *)v17 + 2)
               + 510;
          LODWORD(v460[0]) = v209;
          long long v219 = *(long long *)((char *)v17 + 392);
          v17[10] = *(long long *)((char *)v17 + 376);
          v17[11] = v219;
          *((void *)v17 + 24) = *((void *)v17 + 51);
          long long v220 = *(long long *)((char *)v17 + 328);
          v17[6] = *(long long *)((char *)v17 + 312);
          v17[7] = v220;
          long long v221 = *(long long *)((char *)v17 + 360);
          v17[8] = *(long long *)((char *)v17 + 344);
          v17[9] = v221;
          long long v222 = *(long long *)((char *)v17 + 264);
          v17[2] = *(long long *)((char *)v17 + 248);
          v17[3] = v222;
          long long v223 = *(long long *)((char *)v17 + 296);
          v17[4] = *(long long *)((char *)v17 + 280);
          v17[5] = v223;
          long long v224 = *(long long *)((char *)v17 + 232);
          *uint64_t v17 = *(long long *)((char *)v17 + 216);
          v17[1] = v224;
        }
        int v176 = 0;
        uint64_t v225 = *(void *)(v132 + 2408) + 8;
        unint64_t v226 = v183
             + ((v209 * *(unsigned __int16 *)(v225 + 2 * SWORD2(v460[0]))) >> (8 * (WORD2(v460[0]) == 0)));
        *((void *)&v459 + 1) = v226;
        unint64_t v227 = v453
             + ((v454 * *(unsigned __int16 *)(v225 + 2 * SWORD2(v454))) >> (8 * (WORD2(v454) == 0)));
        *((void *)&v453 + 1) = v227;
        int v175 = 1;
        int v178 = v407;
        if (v425)
        {
          int v177 = v427;
          if (v227 < v226)
          {
            uint64_t v228 = 0;
            unsigned __int8 v444 = 0;
            uint64_t v229 = *(void *)(v132 + 2400);
            uint64_t v230 = v430 + 1 - *((_DWORD *)v187 + 1);
            unsigned int v231 = v188 - *((_DWORD *)v187 + 2);
            if ((v230 & 0x80000000) == 0 && (v231 & 0x80000000) == 0)
            {
              uint64_t v228 = 0;
              unsigned int v232 = *v187;
              if (v230 < v232 && v231 < v232)
              {
                uint64_t v228 = (*(uint64_t (**)(void, unint64_t))(**((void **)v187 + 9) + 24))(*((void *)v187 + 9), v230 + v187[1] * (unint64_t)(v231 >> 1) + *((void *)v187 + 10));
                LODWORD(v230) = v430 + 1 - *((_DWORD *)v187 + 1);
                unsigned int v231 = v188 - *((_DWORD *)v187 + 2);
              }
            }
            uint64_t v233 = 0;
            if ((v230 & 0x80000000) != 0)
            {
              unsigned int v179 = v421;
            }
            else
            {
              unsigned int v179 = v421;
              if ((v231 & 0x80000000) == 0)
              {
                uint64_t v233 = 0;
                unsigned int v234 = *v187;
                if (v230 < v234 && v231 < v234) {
                  uint64_t v233 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v187 + 17)
                }
                                                                                           + 96)
                                                                             + 24))(*(void *)(*((void *)v187 + 17) + 96), *(void *)(*((void *)v187 + 17) + 104)+ v230+ *(unsigned __int8 *)(*((void *)v187 + 17) + 1) * (unint64_t)(v231 & 0xFFFFFFFE));
              }
            }
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v229 + 8152))(v381, v395, v410, v228, v402, v233);
            int v175 = 0;
            int v176 = 1;
            int v178 = v407;
          }
        }
        else
        {
          int v177 = v427;
        }
LABEL_203:
        if (!*(unsigned char *)(*(void *)(v132 + 2392) + 352) || v179 != 2)
        {
          int v273 = &v457;
          if (!__cb) {
            int v273 = &v451;
          }
          uint64_t v274 = *(void *)v273 + v389;
          int v275 = &v458;
          if (!__cb) {
            int v275 = &v452;
          }
          int v276 = *(_DWORD *)v275 + v178;
          uint64_t v277 = &v459;
          if (v176) {
            uint64_t v277 = &v453;
          }
          uint64_t v389 = v274 + *(void *)v277;
          unsigned int v278 = v460;
          if (v176) {
            unsigned int v278 = &v454;
          }
          int v407 = v276 + *(_DWORD *)v278;
          goto LABEL_238;
        }
        int v393 = v176;
        int v396 = v175;
        int v235 = *(unsigned __int8 **)(*(void *)(v132 + 2400) + 376);
        uint64_t v236 = *v235;
        uint64_t v237 = (*(uint64_t (**)(void, void))(**((void **)v235 + 10) + 24))(*((void *)v235 + 10), *((void *)v235 + 11));
        uint64_t v238 = *(void *)(v132 + 2400);
        uint64_t v239 = *(void *)(v238 + 376);
        uint64_t v240 = *(void *)(v239 + 56);
        uint64_t v241 = *(void *)(v239 + 64);
        __int16 v434 = 0;
        unsigned int v242 = &v457;
        if (!__cb) {
          unsigned int v242 = &v451;
        }
        unint64_t v372 = *(void *)v242;
        unsigned int v243 = &v458;
        if (!__cb) {
          unsigned int v243 = &v452;
        }
        int v374 = *(_DWORD *)v243;
        int v244 = (char *)&v457 + 8;
        if (!__cb) {
          int v244 = (char *)&v451 + 8;
        }
        unint64_t v369 = *(void *)v244;
        (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v238 + 8144))(v381, 4, v410, v382, 2 * v236, v237);
        uint64_t v368 = v241;
        uint64_t v370 = v241;
        uint64_t v245 = v240;
        uint64_t v379 = 2 * v236;
        uint64_t v246 = v237;
        sub_1BBABC324((void *)v132, v430, a3, 2, v11, v399, v410, v382, v410, v237, 2 * v236, v240, v368, v236, (BOOL *)&v434 + 1, &v434, 1, 1);
        *(void *)(*(void *)(v132 + 2400) + 824) = v236;
        int v247 = HIBYTE(v434);
        int v248 = v434;
        int v249 = v429;
        if (!(HIBYTE(v434) | v434)) {
          goto LABEL_224;
        }
        uint64_t v250 = *(void *)(v132 + 2408);
        int v251 = v434;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *, unint64_t *))(v250 + 376))(v399, v410, v237, v379, 4, 4, &__len[1], &v446);
        int v248 = v251;
        uint64_t v252 = *(unsigned __int16 *)(v250 + 18);
        int v249 = v429;
        unint64_t v253 = (unint64_t)(*(void *)&__len[1] * v252) >> 8;
        *(void *)&__len[1] = v253;
        unint64_t v446 = (v446 * v252) >> 8;
        if (!v247) {
          goto LABEL_224;
        }
        long long v254 = v17[10];
        long long v255 = v17[11];
        long long v256 = v17[8];
        *(long long *)((char *)v17 + 360) = v17[9];
        *(long long *)((char *)v17 + 376) = v254;
        *(long long *)((char *)v17 + 392) = v255;
        long long v257 = v17[6];
        long long v258 = v17[7];
        long long v259 = v17[4];
        *(long long *)((char *)v17 + 296) = v17[5];
        *(long long *)((char *)v17 + 312) = v257;
        *(long long *)((char *)v17 + 328) = v258;
        *(long long *)((char *)v17 + 344) = v256;
        long long v260 = *v17;
        *(long long *)((char *)v17 + 232) = v17[1];
        long long v261 = v17[3];
        *(long long *)((char *)v17 + 248) = v17[2];
        *(long long *)((char *)v17 + 264) = v261;
        *(long long *)((char *)v17 + 280) = v259;
        *(void *)&long long v457 = v253;
        *((void *)v17 + 51) = *((void *)v17 + 24);
        *(long long *)((char *)v17 + 216) = v260;
        uint64_t v262 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
        *((void *)v17 + 4) = 0;
        *((void *)v17 + 1) = 510;
        *((void *)v17 + 2) = v262;
        uint64_t v263 = (uint64_t)v427 >> 3;
        *(unsigned char *)(*((void *)v429 + 2) + v263 + ((unint64_t)v429[1] >> 2) * v387) = 1;
        *(void *)(*(void *)(a1 + 2400) + 880) = v245;
        *(void *)(*(void *)(a1 + 2400) + 928) = *((void *)v429 + 2)
                                                    + v263
                                                    + ((unint64_t)v429[1] >> 2) * v387;
        sub_1BBAB5BB4(a1, v430, a3, 2, 0, 1);
        int v248 = v251;
        LODWORD(v458) = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
                      - *((_DWORD *)v17 + 2)
                      + 510;
        int v264 = v458;
        long long v266 = *(long long *)((char *)v17 + 264);
        long long v265 = *(long long *)((char *)v17 + 280);
        v17[2] = *(long long *)((char *)v17 + 248);
        v17[3] = v266;
        long long v268 = *(long long *)((char *)v17 + 328);
        long long v267 = *(long long *)((char *)v17 + 344);
        long long v269 = *(long long *)((char *)v17 + 296);
        v17[6] = *(long long *)((char *)v17 + 312);
        v17[7] = v268;
        v17[4] = v265;
        v17[5] = v269;
        long long v270 = *(long long *)((char *)v17 + 392);
        long long v271 = *(long long *)((char *)v17 + 360);
        v17[10] = *(long long *)((char *)v17 + 376);
        v17[11] = v270;
        long long v272 = *(long long *)((char *)v17 + 232);
        *((void *)v17 + 24) = *((void *)v17 + 51);
        v17[8] = v267;
        v17[9] = v271;
        *uint64_t v17 = *(long long *)((char *)v17 + 216);
        v17[1] = v272;
        *((void *)&v457 + 1) = v253
                               + ((v264
                                 * *(unsigned __int16 *)(*(void *)(a1 + 2408) + 2 * SWORD2(v458) + 8)) >> (8 * (WORD2(v458) == 0)));
        uint64_t v132 = a1;
        if (v369 > *((void *)&v457 + 1))
        {
          LOBYTE(__len[0]) = 1;
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2400) + 8152))(v381, 4, v379, v246, v402, v384);
          int v248 = v251;
          int __cb = 1;
          int v177 = v427;
        }
        else
        {
LABEL_224:
          int v177 = v427;
          *(unsigned char *)(*((void *)v249 + 2) + ((uint64_t)v427 >> 3) + ((unint64_t)v249[1] >> 2) * v387) = 0;
          unint64_t v253 = v372;
          int v264 = v374;
        }
        uint64_t v279 = v253 + v389;
        int v280 = v264 + v407;
        unint64_t v281 = &v459;
        if (v393) {
          unint64_t v281 = &v453;
        }
        unint64_t v282 = *(void *)v281;
        __int16 v283 = v460;
        if (v393) {
          __int16 v283 = &v454;
        }
        int v284 = *(_DWORD *)v283;
        int v175 = v396;
        if (v248)
        {
          int v390 = *(_DWORD *)v283;
          unint64_t v400 = v282;
          uint64_t v408 = v279;
          int v411 = v280;
          long long v285 = (char *)&v459 + 8;
          if (v393) {
            long long v285 = (char *)&v453 + 8;
          }
          unint64_t v286 = *(void *)v285;
          long long v287 = v17[10];
          long long v288 = v17[11];
          long long v289 = v17[8];
          *(long long *)((char *)v17 + 360) = v17[9];
          *(long long *)((char *)v17 + 376) = v287;
          *(long long *)((char *)v17 + 392) = v288;
          long long v290 = v17[6];
          long long v291 = v17[7];
          long long v292 = v17[4];
          *(long long *)((char *)v17 + 296) = v17[5];
          *(long long *)((char *)v17 + 312) = v290;
          *(long long *)((char *)v17 + 328) = v291;
          *(long long *)((char *)v17 + 344) = v289;
          long long v293 = *v17;
          *(long long *)((char *)v17 + 232) = v17[1];
          long long v294 = v17[3];
          *(long long *)((char *)v17 + 248) = v17[2];
          *(long long *)((char *)v17 + 264) = v294;
          *(long long *)((char *)v17 + 280) = v292;
          unint64_t v282 = v446;
          *(void *)&long long v459 = v446;
          *((void *)v17 + 51) = *((void *)v17 + 24);
          *(long long *)((char *)v17 + 216) = v293;
          uint64_t v295 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
          *((void *)v17 + 4) = 0;
          *((void *)v17 + 1) = 510;
          *((void *)v17 + 2) = v295;
          uint64_t v296 = (uint64_t)v177 >> 3;
          *(unsigned char *)(*((void *)v249 + 3) + v296 + ((unint64_t)v249[1] >> 2) * v387) = 1;
          *(void *)(*(void *)(v132 + 2400) + 888) = v370;
          *(void *)(*(void *)(v132 + 2400) + 936) = *((void *)v249 + 3)
                                                        + v296
                                                        + ((unint64_t)v249[1] >> 2) * v387;
          sub_1BBAB5BB4(v132, v430, a3, 2, 0, 2);
          int v297 = v177;
          LODWORD(v460[0]) = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
                           - *((_DWORD *)v17 + 2)
                           + 510;
          int v298 = v460[0];
          long long v300 = *(long long *)((char *)v17 + 264);
          long long v299 = *(long long *)((char *)v17 + 280);
          v17[2] = *(long long *)((char *)v17 + 248);
          v17[3] = v300;
          long long v302 = *(long long *)((char *)v17 + 328);
          long long v301 = *(long long *)((char *)v17 + 344);
          long long v303 = *(long long *)((char *)v17 + 296);
          v17[6] = *(long long *)((char *)v17 + 312);
          v17[7] = v302;
          v17[4] = v299;
          v17[5] = v303;
          long long v304 = *(long long *)((char *)v17 + 392);
          long long v305 = *(long long *)((char *)v17 + 360);
          v17[10] = *(long long *)((char *)v17 + 376);
          v17[11] = v304;
          long long v306 = *(long long *)((char *)v17 + 232);
          *((void *)v17 + 24) = *((void *)v17 + 51);
          v17[8] = v301;
          v17[9] = v305;
          *uint64_t v17 = *(long long *)((char *)v17 + 216);
          v17[1] = v306;
          *((void *)&v459 + 1) = v282
                                 + ((v298
                                   * *(unsigned __int16 *)(*(void *)(v132 + 2408)
                                                                       + 2 * SWORD2(v460[0])
                                                                       + 8)) >> (8 * (WORD2(v460[0]) == 0)));
          if (v286 > *((void *)&v459 + 1))
          {
            unsigned __int8 v444 = 1;
            int v307 = v249;
            uint64_t v308 = *(void *)(v132 + 2400);
            int v309 = v297;
            uint64_t v310 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(v308 + 376) + 80) + 24))(*(void *)(*(void *)(v308 + 376) + 80), *(void *)(*(void *)(v308 + 376) + 88) + 1);
            uint64_t v311 = (*(uint64_t (**)(void, unint64_t))(**((void **)v307 + 12) + 24))(*((void *)v307 + 12), *((void *)v307 + 13) + v309 + 1 + v376 * (unint64_t)v307[1]);
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v308 + 8152))(v381, 4, v379, v310, v402, v311);
            int v175 = 1;
            int v284 = v298;
            int v177 = v309;
            int v280 = v411;
            uint64_t v279 = v408;
LABEL_237:
            uint64_t v389 = v279 + v282;
            int v407 = v280 + v284;
            LOBYTE(v179) = v421;
LABEL_238:
            size_t v313 = (1 << (v179 - 2));
            unint64_t v314 = v429[1];
            if (v314 < 4) {
              uint64_t v315 = 1;
            }
            else {
              uint64_t v315 = v314 >> 2;
            }
            uint64_t v316 = (uint64_t)v177 >> 3;
            double v317 = (char *)(*((void *)v429 + 5) + v316 + (int)(v314 >> 2) * (uint64_t)v387);
            size_t v318 = v313;
            do
            {
              --v318;
              memset(v317, __cb, v313);
              v317 += v315;
            }
            while (v318);
            int v319 = (char *)(*((void *)v429 + 6) + v316 + ((unint64_t)v429[1] >> 2) * (v426 >> 3));
            size_t v140 = v313;
            uint64_t v132 = a1;
            do
            {
              --v140;
              memset(v319, v175, v313);
              v319 += v315;
            }
            while (v140);
            int v12 = v427;
            int v9 = a5;
            int v10 = a4;
            int v46 = __cb;
            int v141 = v175;
            goto LABEL_246;
          }
          uint64_t v312 = (uint64_t)v426 >> 3;
          int v177 = v297;
          int v280 = v411;
          uint64_t v279 = v408;
          unint64_t v282 = v400;
          int v284 = v390;
        }
        else
        {
          uint64_t v312 = (uint64_t)v426 >> 3;
          uint64_t v296 = (uint64_t)v177 >> 3;
        }
        *(unsigned char *)(*((void *)v249 + 3) + v296 + (int)v312 * (uint64_t)((unint64_t)v249[1] >> 2)) = 0;
        goto LABEL_237;
      }
    }
    int v175 = 0;
    *(void *)&long long v453 = v183;
    LODWORD(v454) = 0;
    long long v459 = v453;
    v460[0] = v454;
    int v176 = 1;
    int v177 = v427;
    goto LABEL_160;
  }
  int v141 = 0;
  int v46 = 0;
  int v10 = a4;
LABEL_246:
  long long v320 = v17[2];
  long long v321 = v17[4];
  long long v322 = v17[5];
  *(long long *)((char *)v17 + 264) = v17[3];
  *(long long *)((char *)v17 + 280) = v321;
  *(long long *)((char *)v17 + 248) = v320;
  long long v323 = *v17;
  *(long long *)((char *)v17 + 232) = v17[1];
  long long v324 = v17[6];
  long long v325 = v17[8];
  long long v326 = v17[9];
  *(long long *)((char *)v17 + 328) = v17[7];
  *(long long *)((char *)v17 + 344) = v325;
  *(long long *)((char *)v17 + 296) = v322;
  *(long long *)((char *)v17 + 312) = v324;
  long long v327 = v17[11];
  *(long long *)((char *)v17 + 376) = v17[10];
  *(long long *)((char *)v17 + 392) = v327;
  *(long long *)((char *)v17 + 360) = v326;
  *((void *)v17 + 51) = *((void *)v17 + 24);
  *(long long *)((char *)v17 + 216) = v323;
  uint64_t v328 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
  *((void *)v17 + 4) = 0;
  *((void *)v17 + 1) = 510;
  *((void *)v17 + 2) = v328;
  uint64_t v329 = v132;
  int v45 = v141;
  if (*(unsigned char *)(v132 + 2416)) {
    BOOL v330 = 1;
  }
  else {
    BOOL v330 = (v46 | v141) == 0;
  }
  int v331 = !v330;
  int v332 = v46;
  if (v10 || v331)
  {
    if (v10) {
      int v333 = v17;
    }
    else {
      int v333 = (long long *)((char *)v17 + 1);
    }
    sub_1BBA1CA34((unint64_t *)v17, v422, (unsigned char *)v333 + 74);
    int v46 = v332;
  }
  if ((v140 & 1) == 0)
  {
    if ((int)v431 <= 2) {
      int v334 = 0;
    }
    else {
      int v334 = v10;
    }
    uint64_t v335 = (char *)v17 + v334 + 76;
    sub_1BBA1CA34((unint64_t *)v17, v46, v335);
    sub_1BBA1CA34((unint64_t *)v17, v45, v335);
    int v46 = v332;
  }
  LODWORD(v19) = v431;
  if (v412 < (int)v431)
  {
    sub_1BBA1CA34((unint64_t *)v17, 0, (unsigned char *)v17 - v431 + 76);
    int v46 = v332;
  }
  int v47 = v407;
  int v49 = v407
      - *((_DWORD *)v17 + 2)
      + ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
      + 510;
  long long v336 = *(long long *)((char *)v17 + 264);
  v17[2] = *(long long *)((char *)v17 + 248);
  v17[3] = v336;
  long long v337 = *(long long *)((char *)v17 + 328);
  v17[6] = *(long long *)((char *)v17 + 312);
  v17[7] = v337;
  long long v338 = *(long long *)((char *)v17 + 296);
  v17[4] = *(long long *)((char *)v17 + 280);
  v17[5] = v338;
  *((void *)v17 + 24) = *((void *)v17 + 51);
  long long v339 = *(long long *)((char *)v17 + 392);
  v17[10] = *(long long *)((char *)v17 + 376);
  v17[11] = v339;
  long long v340 = *(long long *)((char *)v17 + 360);
  v17[8] = *(long long *)((char *)v17 + 344);
  v17[9] = v340;
  long long v341 = *(long long *)((char *)v17 + 232);
  *uint64_t v17 = *(long long *)((char *)v17 + 216);
  v17[1] = v341;
  uint64_t v51 = v329;
  uint64_t v48 = v389;
  unint64_t v50 = v389 + ((v49 * *(unsigned __int16 *)(*(void *)(v329 + 2408) + 8)) >> 8);
LABEL_266:
  if (v50 > *((void *)&v435 + 1))
  {
    if (v414 >= v413)
    {
      uint64_t v342 = *(void *)(v51 + 2400);
      char v343 = (void *)(v342 + 32 * v414);
      uint64_t v344 = (unsigned __int8 *)v343[31];
      int v345 = (unsigned __int8 *)v343[32];
      uint64_t v347 = (unsigned __int8 *)v343[33];
      int v346 = (unsigned __int8 *)v343[34];
      uint64_t v348 = (1 << (v19 - 1));
      sub_1BBA8E4A4(v342, v429, v344, v12, v426, 0, 0, v348);
      sub_1BBA8E4A4(*(void *)(v51 + 2400), v429, v345, v12 + v348, v426, 0, 0, v348);
      int v349 = v426 + v348;
      sub_1BBA8E4A4(*(void *)(v51 + 2400), v429, v347, v12, v426 + v348, 0, 0, v348);
      sub_1BBA8E4A4(*(void *)(v51 + 2400), v429, v346, v12 + v348, v426 + v348, 0, 0, v348);
      if (!*(unsigned char *)(v51 + 2416))
      {
        sub_1BBA8E71C(*(void *)(v51 + 2400), (uint64_t)v429, (uint64_t)v344, v12, v426, 0, 0, v344[1]);
        if ((int)v19 - 1 > *(unsigned __int8 *)(*(void *)(v51 + 2384) + 2012))
        {
          sub_1BBA8E71C(*(void *)(v51 + 2400), (uint64_t)v429, (uint64_t)v345, v12 + v348, v426, 0, 0, v345[1]);
          sub_1BBA8E71C(*(void *)(v51 + 2400), (uint64_t)v429, (uint64_t)v347, v12, v349, 0, 0, v347[1]);
          sub_1BBA8E71C(*(void *)(v51 + 2400), (uint64_t)v429, (uint64_t)v346, v12 + v348, v349, 0, 0, v346[1]);
        }
      }
    }
    uint64_t v350 = *(void *)(v51 + 2408);
    uint64_t v351 = *(void *)a7 + v435;
    *(void *)a7 = v351;
    int v352 = *(_DWORD *)(a7 + 16) + v436;
    *(_DWORD *)(a7 + 16) = v352;
    *(void *)(a7 + 8) = v351
                        + ((v352 * *(unsigned __int16 *)(v350 + 8 + 2 * *(__int16 *)(a7 + 20))) >> (8 * (*(_WORD *)(a7 + 20) == 0)));
    uint64_t v353 = *(void *)a9 + v438;
    *(void *)a9 = v353;
    int v354 = *(_DWORD *)(a9 + 16) + v439;
    *(_DWORD *)(a9 + 16) = v354;
    *(void *)(a9 + 8) = v353
                        + ((v354 * *(unsigned __int16 *)(v350 + 8 + 2 * *(__int16 *)(a9 + 20))) >> (8 * (*(_WORD *)(a9 + 20) == 0)));
    uint64_t v355 = a8;
    uint64_t v356 = *(void *)a8 + v441;
    *(void *)a8 = v356;
    int v357 = *(_DWORD *)(a8 + 16) + v442;
    *(_DWORD *)(a8 + 16) = v357;
    uint64_t result = v415;
LABEL_282:
    *(void *)(v355 + 8) = v356
                          + ((v357 * *(unsigned __int16 *)(v350 + 2 * *(__int16 *)(v355 + 20) + 8)) >> (8 * (*(_WORD *)(v355 + 20) == 0)));
    return result;
  }
  *unsigned int v11 = *v11 & 0xFFF3 | (4 * (v10 & 3));
  uint64_t result = (v422 | v46 | v45) != 0;
  if (1 << v19 >= 8)
  {
    uint64_t v359 = 0;
    unint64_t v360 = 2 * ((unint64_t)*v9 >> 3);
    int v361 = v11;
    do
    {
      int v362 = v361;
      uint64_t v363 = (1 << v19) >> 3;
      do
      {
        *v362++ = *v11;
        --v363;
      }
      while (v363);
      ++v359;
      int v361 = (__int16 *)((char *)v361 + v360);
    }
    while (v359 != (1 << v19) >> 3);
  }
  uint64_t v350 = *(void *)(v51 + 2408);
  uint64_t v364 = *(void *)a7 + v48;
  *(void *)a7 = v364;
  int v365 = *(_DWORD *)(a7 + 16) + v49;
  *(_DWORD *)(a7 + 16) = v365;
  *(void *)(a7 + 8) = v364
                      + ((v365 * *(unsigned __int16 *)(v350 + 8 + 2 * *(__int16 *)(a7 + 20))) >> (8 * (*(_WORD *)(a7 + 20) == 0)));
  uint64_t v366 = *(void *)a8 + v48;
  *(void *)a8 = v366;
  LODWORD(v364) = *(_DWORD *)(a8 + 16) + v47;
  *(_DWORD *)(a8 + 16) = v364;
  *(void *)(a8 + 8) = v366
                      + ((v364 * *(unsigned __int16 *)(v350 + 8 + 2 * *(__int16 *)(a8 + 20))) >> (8 * (*(_WORD *)(a8 + 20) == 0)));
  if (a9 && v425)
  {
    uint64_t v356 = *(void *)a9 + v449;
    *(void *)a9 = v356;
    int v357 = *(_DWORD *)(a9 + 16) + v450;
    *(_DWORD *)(a9 + 16) = v357;
    if (!*(unsigned char *)(v51 + 2416))
    {
      int v367 = v452;
      v356 += v453 + v451;
      *(void *)a9 = v356;
      v357 += v454 + v367;
      *(_DWORD *)(a9 + 16) = v357;
    }
    uint64_t v355 = a9;
    goto LABEL_282;
  }
  return result;
}

uint64_t sub_1BBAC1A84(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *))(a1 + 8 * ((a8 & 7) == 0) + 2224))(a8, a7, a6, (char *)&v20 + 4, &v20);
  uint64_t v13 = *(void *)(a1 + 2376);
  int v14 = *(unsigned __int8 *)(*(void *)(v13 + 1368) + 2003);
  uint64_t v15 = 544;
  uint64_t v16 = 14;
  if (a5)
  {
    uint64_t v16 = 15;
    uint64_t v15 = 545;
  }
  int v17 = *(char *)(v13 + v15)
      + *(char *)(*(void *)(v13 + 1384) + v16)
      + v14
      + (*(__int16 *)(*((void *)a4 + 11)
                    + 2
                    * (((a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
  if (v17 >= v14 + 57) {
    int v18 = v14 + 57;
  }
  else {
    int v18 = v17;
  }
  if (v17 <= 0) {
    int v18 = 0;
  }
  return (((HIDWORD(v20) * byte_1BBB7CAC4[v18 + 140] + v20 * byte_1BBB7CAC4[v18 + 210]) << 6) + 128) & 0xFFFFFF00;
}

uint64_t sub_1BBAC1B9C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v8 = a4;
  int v242 = 0;
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  int v11 = -a4;
  while (1)
  {
    int v12 = *(_DWORD *)(a1 + 2048);
    uint64_t v13 = (a2 - *((_DWORD *)a5 + 1));
    unsigned int v14 = a3 - *((_DWORD *)a5 + 2);
    uint64_t v15 = *((void *)a5 + 11);
    unint64_t v16 = (v13 >> 3) + ((unint64_t)*a5 >> 3) * (v14 >> 3);
    if (v8 >= ((*(unsigned __int16 *)(v15 + 2 * v16) >> 2) & 3)) {
      break;
    }
    int v17 = 1 << (--v11 + v12);
    uint64_t v18 = (v17 + a2);
    unsigned int v19 = v17 + a3;
    ++v8;
    uint64_t v20 = a2;
    int v21 = sub_1BBAC1B9C(a1, a2);
    int v22 = v21 | sub_1BBAC1B9C(a1, v18);
    v242 |= sub_1BBAC1B9C(a1, v20) | v22;
    a6 = 3;
    a2 = v18;
    a3 = v19;
  }
  unsigned int v240 = a3;
  int v23 = *(unsigned __int8 *)(*(void *)(a1 + 2392) + 227);
  __int16 v244 = 0;
  uint64_t v241 = (void *)a1;
  long long v24 = *(long long **)(*(void *)(a1 + 2400) + 944);
  int v248 = 0;
  long long v247 = xmmword_1BBB6F8F0;
  __int16 v249 = 0;
  int v251 = 0;
  long long v250 = xmmword_1BBB6F8F0;
  __int16 v252 = 0;
  uint64_t v25 = *(unsigned __int8 *)(*((void *)a5 + 17) + 1);
  uint64_t v26 = 2 * v25;
  uint64_t v233 = a5[1];
  uint64_t v234 = 2 * v25;
  if (v23) {
    uint64_t v26 = a5[1];
  }
  uint64_t v230 = v26;
  unsigned int v239 = a2;
  uint64_t v27 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 5) + 24))(*((void *)a5 + 5), v13 + a5[1] * (unint64_t)(v14 >> 1) + *((void *)a5 + 6));
  unsigned int v28 = v239;
  uint64_t v232 = v27;
  uint64_t v29 = 0;
  int v30 = *((_DWORD *)a5 + 1);
  int v31 = *((_DWORD *)a5 + 2);
  unsigned int v32 = v239 - v30;
  if (((v239 - v30) & 0x80000000) != 0)
  {
    unsigned int v33 = v240;
  }
  else
  {
    unsigned int v33 = v240;
    unsigned int v34 = v240 - v31;
    if (((v240 - v31) & 0x80000000) == 0)
    {
      uint64_t v29 = 0;
      unsigned int v35 = *a5;
      if (v32 < v35 && v34 < v35)
      {
        uint64_t v36 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96) + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v32+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v34 & 0xFFFFFFFE));
        unsigned int v28 = v239;
        unsigned int v33 = v240;
        uint64_t v29 = v36;
        int v30 = *((_DWORD *)a5 + 1);
        int v31 = *((_DWORD *)a5 + 2);
      }
    }
  }
  uint64_t v227 = v25;
  if (v23)
  {
    uint64_t v237 = 0;
    uint64_t v37 = v28 - v30;
    if ((v37 & 0x80000000) == 0)
    {
      unsigned int v38 = v33 - v31;
      if (((v33 - v31) & 0x80000000) == 0)
      {
        uint64_t v237 = 0;
        unsigned int v39 = *a5;
        if (v37 < v39 && v38 < v39)
        {
          uint64_t v40 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 9) + 24))(*((void *)a5 + 9), v37 + a5[1] * (unint64_t)(v38 >> 1) + *((void *)a5 + 10));
          unsigned int v28 = v239;
          unsigned int v33 = v240;
          uint64_t v237 = v40;
          int v30 = *((_DWORD *)a5 + 1);
          int v31 = *((_DWORD *)a5 + 2);
        }
      }
    }
  }
  else
  {
    uint64_t v237 = v29;
  }
  uint64_t v41 = 0;
  int v42 = v11 + v12;
  unsigned int v43 = v28 - v30;
  if ((v43 & 0x80000000) != 0) {
    goto LABEL_24;
  }
  unsigned int v44 = v33 - v31;
  uint64_t v45 = 0;
  if ((v44 & 0x80000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v41 = 0;
  unsigned int v46 = *a5;
  if (v43 >= v46)
  {
LABEL_24:
    uint64_t v45 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    if (v44 < v46)
    {
      uint64_t v47 = *((void *)a5 + 17);
      unint64_t v48 = (v43 >> 1) + *(unsigned __int8 *)(v47 + 1) * (unint64_t)(v44 >> 1);
      uint64_t v41 = *(void *)(v47 + 64) + 2 * v48;
      uint64_t v45 = *(void *)(v47 + 72) + 2 * v48;
    }
  }
LABEL_25:
  if (v42 <= *(unsigned __int8 *)(v241[298] + 2012))
  {
    if (a6)
    {
      BOOL v49 = 0;
      return (v242 | v49) & 1;
    }
  }
  else
  {
    --v42;
  }
  uint64_t v50 = (1 << v42);
  unsigned int v235 = v42;
  if (*(unsigned char *)(v241[299] + 352)) {
    BOOL v51 = v42 == 2;
  }
  else {
    BOOL v51 = 0;
  }
  char v52 = v51;
  char v223 = v52;
  int v225 = v23;
  if (v51)
  {
    uint64_t v53 = v241[300];
    uint64_t v54 = *(unsigned __int8 **)(v53 + 376);
    uint64_t v55 = 2 * *v54;
    uint64_t v56 = (*(uint64_t (**)(void, void))(**((void **)v54 + 10) + 24))(*((void *)v54 + 10), *((void *)v54 + 11));
    uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 8144);
    int v23 = v225;
    v57(8, 4, v230, v237, v55, v56);
  }
  uint64_t v229 = (__int16 *)(v15 + 2 * v16);
  if (v23)
  {
    uint64_t v58 = v241[301];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, long long *))(v58 + 376))(v232, v233, v237, v233, v50, v50, &v247, &v250);
    uint64_t v59 = *(unsigned __int16 *)(v58 + 18);
    *(void *)&long long v247 = (unint64_t)(v247 * v59) >> 8;
    *(void *)&long long v250 = (unint64_t)(v250 * v59) >> 8;
    uint64_t v60 = v241[301] + 8;
    *((void *)&v247 + 1) = ((v248 * *(unsigned __int16 *)(v60 + 2 * v249)) >> (8 * (v249 == 0)))
                           + (void)v247;
    *((void *)&v250 + 1) = ((v251 * *(unsigned __int16 *)(v60 + 2 * v252)) >> (8 * (v252 == 0)))
                           + (void)v250;
  }
  unint64_t v61 = 0;
  uint64_t v62 = v241[300];
  *(_DWORD *)(v62 + 808) = v239;
  *(_DWORD *)(v62 + 812) = v240;
  unsigned int v63 = v239 - *((_DWORD *)a5 + 1);
  if ((v63 & 0x80000000) == 0)
  {
    unsigned int v64 = v240 - *((_DWORD *)a5 + 2);
    if ((v64 & 0x80000000) == 0)
    {
      unint64_t v61 = 0;
      unint64_t v65 = *a5;
      if (v63 < v65 && v64 < v65) {
        unint64_t v61 = *((void *)a5 + 12) + 16 * ((v63 >> 2) + (v65 >> 2) * (unint64_t)(v64 >> 2));
      }
    }
  }
  *(void *)(v62 + 864) = v61;
  uint64_t v220 = v227;
  uint64_t v228 = v29;
  sub_1BBABC324(v241, v239, v240, v235, v229, v232, v233, v237, v230, v29, v234, v41, v45, v220, (BOOL *)&v244 + 1, &v244, 0, 0);
  sub_1BBA9595C(v241[300], v239, v240, a5, 1, 0, 0, 0, 0);
  if (*(unsigned char *)(v241[299] + 352))
  {
    LODWORD(v67) = (int)v50 >> 2;
    unsigned int v68 = v239 - *((_DWORD *)a5 + 1);
    unsigned int v69 = v240 - *((_DWORD *)a5 + 2);
    if ((v68 & 0x80000000) == 0 && (v69 & 0x80000000) == 0)
    {
      unsigned int v70 = *a5;
      if (v68 < v70 && v69 < v70 && v235 >= 2)
      {
        uint64_t v71 = *((void *)a5 + 17);
        unint64_t v72 = (unint64_t)*(unsigned __int8 *)(v71 + 1) >> 2;
        unsigned int v73 = (char *)(*(void *)(v71 + 16) + (v68 >> 3) + v72 * (unint64_t)(v69 >> 3));
        uint64_t v74 = (int)v67;
        do
        {
          --v74;
          bzero(v73, (int)v67);
          v73 += v72;
        }
        while (v74);
        unsigned int v68 = v239 - *((_DWORD *)a5 + 1);
        unsigned int v69 = v240 - *((_DWORD *)a5 + 2);
      }
    }
    if ((v68 & 0x80000000) == 0 && (v69 & 0x80000000) == 0)
    {
      unsigned int v75 = *a5;
      BOOL v76 = v68 >= v75 || v69 >= v75;
      if (!v76 && v235 >= 2)
      {
        uint64_t v77 = *((void *)a5 + 17);
        unint64_t v78 = (unint64_t)*(unsigned __int8 *)(v77 + 1) >> 2;
        size_t v79 = (int)v67;
        unsigned int v80 = (char *)(*(void *)(v77 + 24) + (v68 >> 3) + v78 * (unint64_t)(v69 >> 3));
        uint64_t v67 = (int)v67;
        do
        {
          --v67;
          bzero(v80, v79);
          v80 += v78;
        }
        while (v67);
      }
    }
  }
  int v81 = HIBYTE(v244);
  int v82 = v244;
  if (HIBYTE(v244)) {
    BOOL v83 = 0;
  }
  else {
    BOOL v83 = v244 == 0;
  }
  if (v83)
  {
    int v82 = 0;
    unint64_t v109 = -1;
    goto LABEL_81;
  }
  uint64_t v84 = (uint64_t)v241;
  uint64_t v85 = v241[301];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v85 + 376))(v232, v233, v29, v234, v50, v50, &v245, &v246);
  uint64_t v86 = *(unsigned __int16 *)(v85 + 18);
  unint64_t v87 = (v245 * v86) >> 8;
  unint64_t v245 = v87;
  unint64_t v246 = (v246 * v86) >> 8;
  if (!v81)
  {
    unint64_t v109 = -1;
    int v110 = v239;
    uint64_t v66 = v240;
    int v97 = v225;
    if (v82) {
      goto LABEL_107;
    }
LABEL_81:
    unint64_t v111 = -1;
    goto LABEL_82;
  }
  long long v88 = v24[2];
  long long v89 = v24[4];
  long long v90 = v24[5];
  *(long long *)((char *)v24 + 264) = v24[3];
  *(long long *)((char *)v24 + 280) = v89;
  *(long long *)((char *)v24 + 248) = v88;
  long long v91 = *v24;
  *(long long *)((char *)v24 + 232) = v24[1];
  long long v92 = v24[6];
  long long v93 = v24[8];
  long long v94 = v24[9];
  *(long long *)((char *)v24 + 328) = v24[7];
  *(long long *)((char *)v24 + 344) = v93;
  *(long long *)((char *)v24 + 296) = v90;
  *(long long *)((char *)v24 + 312) = v92;
  long long v95 = v24[11];
  *(long long *)((char *)v24 + 376) = v24[10];
  *(long long *)((char *)v24 + 392) = v95;
  *(long long *)((char *)v24 + 360) = v94;
  *((void *)v24 + 51) = *((void *)v24 + 24);
  *(long long *)((char *)v24 + 216) = v91;
  uint64_t v96 = 8 * (*((_DWORD *)v24 + 52) - *((_DWORD *)v24 + 6));
  *((void *)v24 + 4) = 0;
  *((void *)v24 + 1) = 510;
  *((void *)v24 + 2) = v96;
  int v97 = v225;
  if (*(unsigned char *)(v241[299] + 352))
  {
    unint64_t v98 = 0;
    unsigned int v99 = v239 - *((_DWORD *)a5 + 1);
    if ((v99 & 0x80000000) == 0)
    {
      unsigned int v100 = v240 - *((_DWORD *)a5 + 2);
      if ((v100 & 0x80000000) == 0)
      {
        unint64_t v98 = 0;
        unsigned int v101 = *a5;
        if (v99 < v101 && v100 < v101) {
          unint64_t v98 = *(void *)(*((void *)a5 + 17) + 16)
        }
              + (v99 >> 3)
              + ((unint64_t)*(unsigned __int8 *)(*((void *)a5 + 17) + 1) >> 2) * (v100 >> 3);
      }
    }
    uint64_t v84 = (uint64_t)v241;
    *(void *)(v241[300] + 928) = v98;
  }
  sub_1BBAB5BB4(v84, v239, v240, v235, 0, 1);
  int v102 = (*((_DWORD *)v24 + 4) << 8)
       - *((_DWORD *)v24 + 2)
       + ((*((_DWORD *)v24 + 6) - *((_DWORD *)v24 + 52)) << 11)
       + 510;
  long long v103 = *(long long *)((char *)v24 + 264);
  v24[2] = *(long long *)((char *)v24 + 248);
  v24[3] = v103;
  long long v104 = *(long long *)((char *)v24 + 328);
  v24[6] = *(long long *)((char *)v24 + 312);
  v24[7] = v104;
  long long v105 = *(long long *)((char *)v24 + 296);
  v24[4] = *(long long *)((char *)v24 + 280);
  v24[5] = v105;
  *((void *)v24 + 24) = *((void *)v24 + 51);
  long long v106 = *(long long *)((char *)v24 + 392);
  v24[10] = *(long long *)((char *)v24 + 376);
  v24[11] = v106;
  long long v107 = *(long long *)((char *)v24 + 360);
  v24[8] = *(long long *)((char *)v24 + 344);
  v24[9] = v107;
  long long v108 = *(long long *)((char *)v24 + 232);
  *long long v24 = *(long long *)((char *)v24 + 216);
  v24[1] = v108;
  unint64_t v109 = ((v102 * *(unsigned __int16 *)(*(void *)(v84 + 2408) + 8)) >> 8) + v87;
  if (v225 && *((void *)&v247 + 1) < v109)
  {
    HIBYTE(v244) = 0;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v241[300] + 8152))((2 << v235), v50, v230, v237, v234, v29);
    int v82 = v244;
  }
  int v110 = v239;
  uint64_t v66 = v240;
  if (!v82) {
    goto LABEL_81;
  }
LABEL_107:
  long long v155 = v24[2];
  long long v156 = v24[4];
  long long v157 = v24[5];
  *(long long *)((char *)v24 + 264) = v24[3];
  *(long long *)((char *)v24 + 280) = v156;
  *(long long *)((char *)v24 + 248) = v155;
  long long v158 = *v24;
  *(long long *)((char *)v24 + 232) = v24[1];
  long long v159 = v24[6];
  long long v160 = v24[8];
  long long v161 = v24[9];
  *(long long *)((char *)v24 + 328) = v24[7];
  *(long long *)((char *)v24 + 344) = v160;
  *(long long *)((char *)v24 + 296) = v157;
  *(long long *)((char *)v24 + 312) = v159;
  long long v162 = v24[11];
  *(long long *)((char *)v24 + 376) = v24[10];
  *(long long *)((char *)v24 + 392) = v162;
  *(long long *)((char *)v24 + 360) = v161;
  unint64_t v163 = v246;
  *((void *)v24 + 51) = *((void *)v24 + 24);
  *(long long *)((char *)v24 + 216) = v158;
  uint64_t v164 = 8 * (*((_DWORD *)v24 + 52) - *((_DWORD *)v24 + 6));
  *((void *)v24 + 4) = 0;
  *((void *)v24 + 1) = 510;
  *((void *)v24 + 2) = v164;
  uint64_t v165 = (uint64_t)v241;
  if (*(unsigned char *)(v241[299] + 352))
  {
    unint64_t v166 = 0;
    unsigned int v167 = v110 - *((_DWORD *)a5 + 1);
    if ((v167 & 0x80000000) == 0)
    {
      unsigned int v168 = v66 - *((_DWORD *)a5 + 2);
      if ((v168 & 0x80000000) == 0)
      {
        unint64_t v166 = 0;
        unsigned int v169 = *a5;
        if (v167 < v169 && v168 < v169) {
          unint64_t v166 = *(void *)(*((void *)a5 + 17) + 24)
        }
               + (v167 >> 3)
               + ((unint64_t)*(unsigned __int8 *)(*((void *)a5 + 17) + 1) >> 2) * (v168 >> 3);
      }
    }
    uint64_t v165 = (uint64_t)v241;
    *(void *)(v241[300] + 936) = v166;
  }
  sub_1BBAB5BB4(v165, v110, v66, v235, 0, 2);
  int v170 = (*((_DWORD *)v24 + 4) << 8)
       - *((_DWORD *)v24 + 2)
       + ((*((_DWORD *)v24 + 6) - *((_DWORD *)v24 + 52)) << 11)
       + 510;
  long long v171 = *(long long *)((char *)v24 + 264);
  v24[2] = *(long long *)((char *)v24 + 248);
  v24[3] = v171;
  long long v172 = *(long long *)((char *)v24 + 328);
  v24[6] = *(long long *)((char *)v24 + 312);
  v24[7] = v172;
  long long v173 = *(long long *)((char *)v24 + 296);
  v24[4] = *(long long *)((char *)v24 + 280);
  v24[5] = v173;
  *((void *)v24 + 24) = *((void *)v24 + 51);
  long long v174 = *(long long *)((char *)v24 + 392);
  v24[10] = *(long long *)((char *)v24 + 376);
  v24[11] = v174;
  long long v175 = *(long long *)((char *)v24 + 360);
  v24[8] = *(long long *)((char *)v24 + 344);
  v24[9] = v175;
  long long v176 = *(long long *)((char *)v24 + 232);
  *long long v24 = *(long long *)((char *)v24 + 216);
  v24[1] = v176;
  unint64_t v111 = ((v170 * *(unsigned __int16 *)(*(void *)(v165 + 2408) + 8)) >> 8) + v163;
  if (v97 && *((void *)&v250 + 1) < v111)
  {
    uint64_t v177 = 0;
    LOBYTE(v244) = 0;
    uint64_t v178 = v241[300];
    uint64_t v179 = v239 + 1 - *((_DWORD *)a5 + 1);
    unsigned int v180 = v240 - *((_DWORD *)a5 + 2);
    if ((v179 & 0x80000000) == 0 && (v180 & 0x80000000) == 0)
    {
      uint64_t v177 = 0;
      unsigned int v181 = *a5;
      if (v179 < v181 && v180 < v181)
      {
        uint64_t v177 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 9) + 24))(*((void *)a5 + 9), v179 + a5[1] * (unint64_t)(v180 >> 1) + *((void *)a5 + 10));
        LODWORD(v179) = v239 + 1 - *((_DWORD *)a5 + 1);
        unsigned int v180 = v240 - *((_DWORD *)a5 + 2);
      }
    }
    uint64_t v182 = 0;
    if ((v179 & 0x80000000) != 0)
    {
      char v112 = v223;
    }
    else
    {
      char v112 = v223;
      if ((v180 & 0x80000000) == 0)
      {
        uint64_t v182 = 0;
        unsigned int v183 = *a5;
        if (v179 < v183 && v180 < v183) {
          uint64_t v182 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96) + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v179+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v180 & 0xFFFFFFFE));
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v178 + 8152))((2 << v235), v50, v230, v177, v234, v182);
    int v82 = 0;
    goto LABEL_83;
  }
LABEL_82:
  char v112 = v223;
LABEL_83:
  char v113 = v235 - 2;
  if (v112)
  {
    unint64_t v231 = v111;
    char v236 = v235 - 2;
    int v238 = v82;
    long long v114 = *(unsigned __int8 **)(v241[300] + 376);
    uint64_t v115 = *v114;
    uint64_t v116 = (*(uint64_t (**)(void, void, uint64_t))(**((void **)v114 + 10) + 24))(*((void *)v114 + 10), *((void *)v114 + 11), v66);
    uint64_t v117 = v116;
    uint64_t v118 = *(void *)(v241[300] + 376);
    uint64_t v120 = *(void *)(v118 + 56);
    uint64_t v119 = *(void *)(v118 + 64);
    __int16 v243 = 0;
    unint64_t v121 = *((void *)&v247 + 1);
    int v224 = HIBYTE(v244);
    if (HIBYTE(v244)) {
      unint64_t v121 = v109;
    }
    unint64_t v221 = v121;
    uint64_t v222 = v119;
    uint64_t v226 = 2 * v115;
    sub_1BBABC324(v241, v239, v240, 2, v229, v232, v233, v116, 2 * v115, v116, 2 * v115, v120, v119, v115, (BOOL *)&v243 + 1, &v243, 1, 1);
    *(void *)(v241[300] + 824) = v115;
    int v122 = HIBYTE(v243);
    int v123 = v243;
    if (!(HIBYTE(v243) | v243)) {
      goto LABEL_101;
    }
    uint64_t v124 = v241[301];
    int v125 = v243;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v124 + 376))(v232, v233, v117, v226, 4, 4, &v245, &v246);
    int v123 = v125;
    uint64_t v126 = *(unsigned __int16 *)(v124 + 18);
    unint64_t v127 = (v245 * v126) >> 8;
    unint64_t v245 = v127;
    unint64_t v246 = (v246 * v126) >> 8;
    if (!v122) {
      goto LABEL_101;
    }
    long long v128 = v24[2];
    long long v129 = v24[4];
    long long v130 = v24[5];
    *(long long *)((char *)v24 + 264) = v24[3];
    *(long long *)((char *)v24 + 280) = v129;
    *(long long *)((char *)v24 + 248) = v128;
    long long v131 = *v24;
    *(long long *)((char *)v24 + 232) = v24[1];
    long long v132 = v24[6];
    long long v133 = v24[8];
    long long v134 = v24[9];
    *(long long *)((char *)v24 + 328) = v24[7];
    *(long long *)((char *)v24 + 344) = v133;
    *(long long *)((char *)v24 + 296) = v130;
    *(long long *)((char *)v24 + 312) = v132;
    long long v135 = v24[11];
    *(long long *)((char *)v24 + 376) = v24[10];
    *(long long *)((char *)v24 + 392) = v135;
    *(long long *)((char *)v24 + 360) = v134;
    *((void *)v24 + 51) = *((void *)v24 + 24);
    *(long long *)((char *)v24 + 216) = v131;
    uint64_t v136 = 8 * (*((_DWORD *)v24 + 52) - *((_DWORD *)v24 + 6));
    *((void *)v24 + 4) = 0;
    *((void *)v24 + 1) = 510;
    *((void *)v24 + 2) = v136;
    unsigned int v137 = v239 - *((_DWORD *)a5 + 1);
    unsigned int v138 = v240 - *((_DWORD *)a5 + 2);
    if ((v137 & 0x80000000) == 0 && (v138 & 0x80000000) == 0)
    {
      unsigned int v139 = *a5;
      if (v137 < v139 && v138 < v139)
      {
        *(unsigned char *)(*(void *)(*((void *)a5 + 17) + 16)
                 + (v137 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((void *)a5 + 17) + 1) >> 2) * (v138 >> 3)) = 1;
        unsigned int v137 = v239 - *((_DWORD *)a5 + 1);
        unsigned int v138 = v240 - *((_DWORD *)a5 + 2);
      }
    }
    unint64_t v140 = 0;
    *(void *)(v241[300] + 880) = v120;
    if ((v137 & 0x80000000) == 0 && (v138 & 0x80000000) == 0)
    {
      unint64_t v140 = 0;
      unsigned int v141 = *a5;
      if (v137 < v141 && v138 < v141) {
        unint64_t v140 = *(void *)(*((void *)a5 + 17) + 16)
      }
             + (v137 >> 3)
             + ((unint64_t)*(unsigned __int8 *)(*((void *)a5 + 17) + 1) >> 2) * (v138 >> 3);
    }
    *(void *)(v241[300] + 928) = v140;
    sub_1BBAB5BB4((uint64_t)v241, v239, v240, 2, 0, 1);
    int v142 = (*((_DWORD *)v24 + 4) << 8)
         - *((_DWORD *)v24 + 2)
         + ((*((_DWORD *)v24 + 6) - *((_DWORD *)v24 + 52)) << 11)
         + 510;
    long long v143 = *(long long *)((char *)v24 + 264);
    v24[2] = *(long long *)((char *)v24 + 248);
    v24[3] = v143;
    long long v144 = *(long long *)((char *)v24 + 328);
    v24[6] = *(long long *)((char *)v24 + 312);
    v24[7] = v144;
    long long v145 = *(long long *)((char *)v24 + 296);
    v24[4] = *(long long *)((char *)v24 + 280);
    v24[5] = v145;
    *((void *)v24 + 24) = *((void *)v24 + 51);
    long long v146 = *(long long *)((char *)v24 + 392);
    v24[10] = *(long long *)((char *)v24 + 376);
    v24[11] = v146;
    long long v147 = *(long long *)((char *)v24 + 360);
    v24[8] = *(long long *)((char *)v24 + 344);
    v24[9] = v147;
    long long v148 = *(long long *)((char *)v24 + 232);
    *long long v24 = *(long long *)((char *)v24 + 216);
    v24[1] = v148;
    int v123 = v125;
    if (v221 > ((v142 * *(unsigned __int16 *)(v241[301] + 8)) >> 8) + v127)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v241[300] + 8152))(8, 4, v226, v117, v234, v228);
      int v123 = v125;
      int v149 = 1;
      int v150 = v240;
      int v151 = v239;
      int v82 = v238;
    }
    else
    {
LABEL_101:
      unsigned int v152 = v239 - *((_DWORD *)a5 + 1);
      int v151 = v239;
      if ((v152 & 0x80000000) != 0)
      {
        int v150 = v240;
        int v82 = v238;
        int v149 = v224;
      }
      else
      {
        int v150 = v240;
        unsigned int v153 = v240 - *((_DWORD *)a5 + 2);
        int v82 = v238;
        int v149 = v224;
        if ((v153 & 0x80000000) == 0)
        {
          unsigned int v154 = *a5;
          if (v152 < v154 && v153 < v154) {
            *(unsigned char *)(*(void *)(*((void *)a5 + 17) + 16)
          }
                     + (v152 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((void *)a5 + 17) + 1) >> 2) * (v153 >> 3)) = 0;
        }
      }
    }
    if (v82) {
      unint64_t v184 = v231;
    }
    else {
      unint64_t v184 = *((void *)&v250 + 1);
    }
    if (!v123) {
      goto LABEL_148;
    }
    long long v185 = v24[2];
    long long v186 = v24[4];
    long long v187 = v24[5];
    *(long long *)((char *)v24 + 264) = v24[3];
    *(long long *)((char *)v24 + 280) = v186;
    *(long long *)((char *)v24 + 248) = v185;
    long long v188 = *v24;
    *(long long *)((char *)v24 + 232) = v24[1];
    long long v189 = v24[6];
    long long v190 = v24[8];
    long long v191 = v24[9];
    *(long long *)((char *)v24 + 328) = v24[7];
    *(long long *)((char *)v24 + 344) = v190;
    *(long long *)((char *)v24 + 296) = v187;
    *(long long *)((char *)v24 + 312) = v189;
    long long v192 = v24[11];
    *(long long *)((char *)v24 + 376) = v24[10];
    *(long long *)((char *)v24 + 392) = v192;
    *(long long *)((char *)v24 + 360) = v191;
    unint64_t v193 = v246;
    *((void *)v24 + 51) = *((void *)v24 + 24);
    *(long long *)((char *)v24 + 216) = v188;
    uint64_t v194 = 8 * (*((_DWORD *)v24 + 52) - *((_DWORD *)v24 + 6));
    *((void *)v24 + 4) = 0;
    *((void *)v24 + 1) = 510;
    *((void *)v24 + 2) = v194;
    unsigned int v195 = v151 - *((_DWORD *)a5 + 1);
    unsigned int v196 = v150 - *((_DWORD *)a5 + 2);
    if ((v195 & 0x80000000) == 0 && (v196 & 0x80000000) == 0)
    {
      unsigned int v197 = *a5;
      if (v195 < v197 && v196 < v197)
      {
        *(unsigned char *)(*(void *)(*((void *)a5 + 17) + 24)
                 + (v195 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((void *)a5 + 17) + 1) >> 2) * (v196 >> 3)) = 1;
        unsigned int v195 = v151 - *((_DWORD *)a5 + 1);
        unsigned int v196 = v150 - *((_DWORD *)a5 + 2);
      }
    }
    unint64_t v198 = 0;
    *(void *)(v241[300] + 888) = v222;
    if ((v195 & 0x80000000) == 0 && (v196 & 0x80000000) == 0)
    {
      unint64_t v198 = 0;
      unsigned int v199 = *a5;
      if (v195 < v199 && v196 < v199) {
        unint64_t v198 = *(void *)(*((void *)a5 + 17) + 24)
      }
             + (v195 >> 3)
             + ((unint64_t)*(unsigned __int8 *)(*((void *)a5 + 17) + 1) >> 2) * (v196 >> 3);
    }
    *(void *)(v241[300] + 936) = v198;
    sub_1BBAB5BB4((uint64_t)v241, v151, v150, 2, 0, 2);
    int v151 = v239;
    int v150 = v240;
    int v200 = (*((_DWORD *)v24 + 4) << 8)
         - *((_DWORD *)v24 + 2)
         + ((*((_DWORD *)v24 + 6) - *((_DWORD *)v24 + 52)) << 11)
         + 510;
    long long v201 = *(long long *)((char *)v24 + 264);
    v24[2] = *(long long *)((char *)v24 + 248);
    v24[3] = v201;
    long long v202 = *(long long *)((char *)v24 + 328);
    v24[6] = *(long long *)((char *)v24 + 312);
    v24[7] = v202;
    long long v203 = *(long long *)((char *)v24 + 296);
    v24[4] = *(long long *)((char *)v24 + 280);
    v24[5] = v203;
    *((void *)v24 + 24) = *((void *)v24 + 51);
    long long v204 = *(long long *)((char *)v24 + 392);
    v24[10] = *(long long *)((char *)v24 + 376);
    v24[11] = v204;
    long long v205 = *(long long *)((char *)v24 + 360);
    v24[8] = *(long long *)((char *)v24 + 344);
    v24[9] = v205;
    long long v206 = *(long long *)((char *)v24 + 232);
    *long long v24 = *(long long *)((char *)v24 + 216);
    v24[1] = v206;
    if (v184 > ((v200 * *(unsigned __int16 *)(v241[301] + 8)) >> 8) + v193)
    {
      uint64_t v207 = v241[300];
      uint64_t v208 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(v207 + 376) + 80) + 24))(*(void *)(*(void *)(v207 + 376) + 80), *(void *)(*(void *)(v207 + 376) + 88) + 1, v240);
      uint64_t v209 = 0;
      unsigned int v210 = v239 - *((_DWORD *)a5 + 1) + 1;
      if ((v210 & 0x80000000) == 0)
      {
        unsigned int v211 = v240 - *((_DWORD *)a5 + 2);
        if ((v211 & 0x80000000) == 0)
        {
          uint64_t v209 = 0;
          unsigned int v212 = *a5;
          if (v210 < v212 && v211 < v212) {
            uint64_t v209 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96)
          }
                                                                       + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v210+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v211 & 0xFFFFFFFE));
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v207 + 8152))(8, 4, v226, v208, v234, v209);
      int v82 = 1;
      int v151 = v239;
      int v150 = v240;
    }
    else
    {
LABEL_148:
      unsigned int v213 = v151 - *((_DWORD *)a5 + 1);
      if ((v213 & 0x80000000) == 0)
      {
        unsigned int v214 = v150 - *((_DWORD *)a5 + 2);
        if ((v214 & 0x80000000) == 0)
        {
          unsigned int v215 = *a5;
          if (v213 < v215 && v214 < v215) {
            *(unsigned char *)(*(void *)(*((void *)a5 + 17) + 24)
          }
                     + (v213 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((void *)a5 + 17) + 1) >> 2) * (v214 >> 3)) = 0;
        }
      }
    }
    char v113 = v236;
  }
  else
  {
    int v149 = HIBYTE(v244);
    int v151 = v239;
    int v150 = v240;
  }
  int v216 = 1 << v113;
  int v217 = v150;
  int v218 = v151;
  sub_1BBAE40E4(a5, v151, v150, 1 << v113, 1, v149, 0);
  sub_1BBAE40E4(a5, v218, v217, v216, 2, v82, 0);
  BOOL v49 = (v82 | v149) != 0;
  return (v242 | v49) & 1;
}

uint64_t sub_1BBAC2E18(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v10) = a4;
  uint64_t v13 = a1;
  int v222 = 0;
  v238[2] = *MEMORY[0x1E4F143B8];
  int v14 = -a4;
  while (1)
  {
    int v16 = *(_DWORD *)(v13 + 2048);
    uint64_t v17 = (a2 - *((_DWORD *)a5 + 1));
    unsigned int v18 = a3 - *((_DWORD *)a5 + 2);
    if ((int)v10 >= ((*(unsigned __int16 *)(*((void *)a5 + 11)
                                           + 2 * ((v17 >> 3) + ((unint64_t)*a5 >> 3) * (v18 >> 3))) >> 2) & 3))
      break;
    int v19 = 1 << (--v14 + v16);
    uint64_t v20 = (v19 + a2);
    uint64_t v21 = (v19 + a3);
    uint64_t v10 = (v10 + 1);
    int v22 = sub_1BBAC2E18(v13, a2, a3, v10, a5, 0, a7, a8);
    int v23 = v22 | sub_1BBAC2E18(a1, v20, a3, v10, a5, 1, a7, a8);
    uint64_t v13 = a1;
    v222 |= sub_1BBAC2E18(a1, a2, v21, v10, a5, 2, a7, a8) | v23;
    a6 = 3;
    a2 = v20;
    a3 = v21;
  }
  uint64_t v24 = 0;
  int v25 = *(unsigned __int8 *)(*(void *)(v13 + 2392) + 227);
  int v217 = v14 + v16;
  uint64_t v26 = *(long long **)(*(void *)(v13 + 2400) + 944);
  do
  {
    uint64_t v27 = (char *)&v233 + v24;
    *((_DWORD *)v27 + 4) = 0;
    *(_OWORD *)uint64_t v27 = xmmword_1BBB6F8F0;
    *((_WORD *)v27 + 10) = 0;
    unsigned int v28 = (char *)&v227 + v24;
    *((_DWORD *)v28 + 4) = 0;
    *(_OWORD *)unsigned int v28 = xmmword_1BBB6F8F0;
    v24 += 24;
    *((_WORD *)v28 + 10) = 0;
  }
  while (v24 != 72);
  uint64_t v29 = (unsigned __int8 *)*((void *)a5 + 17);
  int v30 = *(unsigned __int8 *)(*((void *)v29 + 4) + (v17 >> 2)
                                                  + ((unint64_t)*v29 >> 2) * (v18 >> 2));
  uint64_t v31 = a5[1];
  uint64_t v213 = *v29;
  if (v25) {
    uint64_t v32 = a5[1];
  }
  else {
    uint64_t v32 = *v29;
  }
  uint64_t v33 = (*(uint64_t (**)(void, unint64_t, __int128))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3), v17 + a5[1] * (unint64_t)v18 + *((void *)a5 + 4), xmmword_1BBB6F8F0);
  uint64_t v34 = 0;
  int v35 = *((_DWORD *)a5 + 1);
  int v36 = *((_DWORD *)a5 + 2);
  unsigned int v37 = a2 - v35;
  uint64_t v204 = v32;
  if (((a2 - v35) & 0x80000000) == 0)
  {
    unsigned int v38 = a3 - v36;
    if (((a3 - v36) & 0x80000000) == 0)
    {
      uint64_t v34 = 0;
      unsigned int v39 = *a5;
      if (v37 < v39 && v38 < v39)
      {
        uint64_t v40 = v33;
        uint64_t v41 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 80) + 24))(*(void *)(*((void *)a5 + 17) + 80), *(void *)(*((void *)a5 + 17) + 88) + v37 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v38);
        uint64_t v33 = v40;
        uint64_t v34 = v41;
        int v35 = *((_DWORD *)a5 + 1);
        int v36 = *((_DWORD *)a5 + 2);
      }
    }
  }
  int v219 = a2;
  if (v25)
  {
    uint64_t v42 = 0;
    uint64_t v43 = (a2 - v35);
    if ((v43 & 0x80000000) == 0)
    {
      unsigned int v44 = a3 - v36;
      if (((a3 - v36) & 0x80000000) == 0)
      {
        uint64_t v42 = 0;
        unsigned int v45 = *a5;
        if (v43 < v45 && v44 < v45)
        {
          int v46 = v30;
          int v47 = v25;
          uint64_t v48 = v34;
          uint64_t v49 = v33;
          uint64_t v50 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 7) + 24))(*((void *)a5 + 7), v43 + a5[1] * (unint64_t)v44 + *((void *)a5 + 8));
          uint64_t v33 = v49;
          uint64_t v34 = v48;
          int v25 = v47;
          int v30 = v46;
          uint64_t v42 = v50;
          int v35 = *((_DWORD *)a5 + 1);
          int v36 = *((_DWORD *)a5 + 2);
        }
      }
    }
  }
  else
  {
    uint64_t v42 = v34;
  }
  unint64_t v51 = 0;
  int v52 = v217;
  uint64_t v53 = (1 << v217);
  uint64_t v54 = (v219 - v35);
  if ((v54 & 0x80000000) == 0)
  {
    unsigned int v55 = a3 - v36;
    if ((v55 & 0x80000000) == 0)
    {
      unint64_t v51 = 0;
      unsigned int v56 = *a5;
      if (v54 < v56 && v55 < v56)
      {
        unint64_t v51 = *(void *)(*((void *)a5 + 17) + 56)
            + 2 * (v54 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v55);
        int v52 = v217;
      }
    }
  }
  uint64_t v209 = v34;
  unsigned int v207 = 1 << v217;
  if (!v25)
  {
    uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 2408)
                                                                                + 8 * (v52 - 2)
                                                                                + 24);
    uint64_t v65 = *(void *)(v13 + 2400);
    uint64_t v57 = (void *)(v13 + 2408);
    *(_DWORD *)(v65 + 808) = v219;
    *(_DWORD *)(v65 + 812) = a3;
    *(void *)(v65 + 816) = v213;
    if (v30)
    {
      uint64_t v202 = v42;
      int v215 = 0;
      unsigned int v211 = (void *)(v13 + 2408);
      unint64_t v63 = *((void *)&v227 + 1);
      char v64 = v52 - 2;
      goto LABEL_31;
    }
    unsigned int v88 = v60(v53, v53, v33, v31, v42);
    int v86 = 0;
    LODWORD(v228) = 0;
    *(void *)&long long v227 = v88;
    *((void *)&v227 + 1) = v88;
    uint64_t v234 = v228;
    long long v233 = v227;
LABEL_38:
    uint64_t v87 = a7;
    goto LABEL_39;
  }
  uint64_t v198 = v33;
  unint64_t v200 = v51;
  uint64_t v57 = (void *)(v13 + 2408);
  uint64_t v58 = v52 - 2;
  uint64_t v202 = v42;
  unsigned int v59 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v13 + 2408) + 8 * v58 + 24))(v53, (1 << v217));
  LODWORD(v228) = 0;
  *(void *)&long long v227 = v59;
  *((void *)&v227 + 1) = v59;
  uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 2408) + 8 * v58 + 24);
  uint64_t v61 = *(void *)(v13 + 2400);
  *(_DWORD *)(v61 + 808) = v219;
  *(_DWORD *)(v61 + 812) = a3;
  *(void *)(v61 + 816) = v213;
  if (!v30)
  {
    int v86 = 0;
    goto LABEL_38;
  }
  char v62 = v58;
  unint64_t v63 = v59;
  int v215 = v25;
  unsigned int v211 = (void *)(v13 + 2408);
  uint64_t v34 = v209;
  uint64_t v33 = v198;
  unint64_t v51 = v200;
  uint64_t v53 = v207;
  char v64 = v62;
LABEL_31:
  unsigned int v66 = v60(v53, v53, v33, v31, v34);
  long long v67 = v26[2];
  long long v68 = v26[4];
  long long v69 = v26[5];
  *(long long *)((char *)v26 + 264) = v26[3];
  *(long long *)((char *)v26 + 280) = v68;
  *(long long *)((char *)v26 + 248) = v67;
  long long v70 = *v26;
  *(long long *)((char *)v26 + 232) = v26[1];
  long long v71 = v26[6];
  long long v72 = v26[8];
  long long v73 = v26[9];
  *(long long *)((char *)v26 + 328) = v26[7];
  *(long long *)((char *)v26 + 344) = v72;
  *(long long *)((char *)v26 + 296) = v69;
  *(long long *)((char *)v26 + 312) = v71;
  long long v74 = v26[11];
  *(long long *)((char *)v26 + 376) = v26[10];
  *(long long *)((char *)v26 + 392) = v74;
  *(long long *)((char *)v26 + 360) = v73;
  *(void *)&long long v233 = v66;
  *((void *)v26 + 51) = *((void *)v26 + 24);
  *(long long *)((char *)v26 + 216) = v70;
  uint64_t v75 = 8 * (*((_DWORD *)v26 + 52) - *((_DWORD *)v26 + 6));
  *((void *)v26 + 4) = 0;
  *((void *)v26 + 1) = 510;
  *((void *)v26 + 2) = v75;
  *(void *)(*(void *)(v13 + 2400) + 872) = v51;
  sub_1BBAB5BB4(v13, v219, a3, v217, 0, 0);
  LODWORD(v234) = ((*((_DWORD *)v26 + 4) + 8 * (*((_DWORD *)v26 + 6) - *((_DWORD *)v26 + 52))) << 8)
                - *((_DWORD *)v26 + 2)
                + 510;
  int v76 = v234;
  long long v78 = *(long long *)((char *)v26 + 264);
  long long v77 = *(long long *)((char *)v26 + 280);
  v26[2] = *(long long *)((char *)v26 + 248);
  v26[3] = v78;
  long long v80 = *(long long *)((char *)v26 + 328);
  long long v79 = *(long long *)((char *)v26 + 344);
  long long v81 = *(long long *)((char *)v26 + 296);
  v26[6] = *(long long *)((char *)v26 + 312);
  v26[7] = v80;
  v26[4] = v77;
  v26[5] = v81;
  long long v82 = *(long long *)((char *)v26 + 392);
  long long v83 = *(long long *)((char *)v26 + 360);
  v26[10] = *(long long *)((char *)v26 + 376);
  v26[11] = v82;
  long long v84 = *(long long *)((char *)v26 + 232);
  *((void *)v26 + 24) = *((void *)v26 + 51);
  v26[8] = v79;
  v26[9] = v83;
  *uint64_t v26 = *(long long *)((char *)v26 + 216);
  v26[1] = v84;
  unint64_t v85 = ((v76 * *(unsigned __int16 *)(*(void *)(v13 + 2408) + 2 * SWORD2(v234) + 8)) >> (8 * (WORD2(v234) == 0)))
      + (unint64_t)v66;
  *((void *)&v233 + 1) = v85;
  int v86 = 1;
  if (v215)
  {
    uint64_t v87 = a7;
    if (v63 < v85)
    {
      sub_1BBAE40E4(a5, v219, a3, 1 << v64, 0, 0, 0);
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2400) + 8144))(v207, v207, v204, v202, v213, v209);
      int v86 = 0;
    }
  }
  else
  {
    uint64_t v87 = a7;
  }
  uint64_t v57 = v211;
  int v25 = v215;
LABEL_39:
  if (*(unsigned char *)(a1 + 2416))
  {
    int v89 = 0;
    int v90 = 0;
    goto LABEL_113;
  }
  int v91 = *(unsigned __int8 *)(*(void *)(a1 + 2384) + 2012);
  if (a6) {
    int v92 = 0;
  }
  else {
    int v92 = v217;
  }
  if (v217 > v91) {
    int v93 = v217 - 1;
  }
  else {
    int v93 = v92;
  }
  if (!a6 || (int v89 = 0, v90 = 0, v217 > v91))
  {
    int v216 = v25;
    int v208 = v86;
    uint64_t v94 = (v219 - *((_DWORD *)a5 + 1));
    unsigned int v95 = a3 - *((_DWORD *)a5 + 2);
    uint64_t v96 = *((void *)a5 + 17);
    unint64_t v205 = *(unsigned __int8 *)(v96 + 1);
    unint64_t v97 = (v94 >> 3) + (v205 >> 2) * (unint64_t)(v95 >> 3);
    int v98 = *(unsigned __int8 *)(*(void *)(v96 + 40) + v97);
    int v214 = *(unsigned __int8 *)(*(void *)(v96 + 48) + v97);
    uint64_t v99 = a5[1];
    uint64_t v100 = (*(uint64_t (**)(void, uint64_t))(**((void **)a5 + 5) + 24))(*((void *)a5 + 5), v94 + v99 * (v95 >> 1) + *((void *)a5 + 6));
    uint64_t v101 = 0;
    int v102 = *((_DWORD *)a5 + 1);
    int v103 = *((_DWORD *)a5 + 2);
    unsigned int v104 = v219 - v102;
    unsigned int v212 = v57;
    if (((v219 - v102) & 0x80000000) == 0)
    {
      unsigned int v105 = a3 - v103;
      if (((a3 - v103) & 0x80000000) == 0)
      {
        uint64_t v101 = 0;
        unsigned int v106 = *a5;
        if (v104 < v106 && v105 < v106)
        {
          uint64_t v107 = v100;
          uint64_t v101 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96) + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v104+ *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v105 & 0xFFFFFFFE));
          uint64_t v100 = v107;
          int v102 = *((_DWORD *)a5 + 1);
          int v103 = *((_DWORD *)a5 + 2);
        }
      }
    }
    uint64_t v201 = v101;
    if (v25)
    {
      uint64_t v108 = 0;
      uint64_t v109 = (v219 - v102);
      if ((v109 & 0x80000000) == 0)
      {
        unsigned int v110 = a3 - v103;
        if (((a3 - v103) & 0x80000000) == 0)
        {
          uint64_t v108 = 0;
          unsigned int v111 = *a5;
          if (v109 < v111 && v110 < v111)
          {
            uint64_t v112 = v100;
            uint64_t v113 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 9) + 24))(*((void *)a5 + 9), v109 + a5[1] * (unint64_t)(v110 >> 1) + *((void *)a5 + 10));
            uint64_t v100 = v112;
            uint64_t v108 = v113;
            int v102 = *((_DWORD *)a5 + 1);
            int v103 = *((_DWORD *)a5 + 2);
          }
        }
      }
    }
    else
    {
      uint64_t v108 = v101;
    }
    uint64_t v114 = 0;
    unsigned int v218 = 1 << v93;
    unsigned int v115 = v219 - v102;
    if ((v115 & 0x80000000) != 0) {
      goto LABEL_66;
    }
    unsigned int v116 = a3 - v103;
    uint64_t v117 = 0;
    if ((v116 & 0x80000000) != 0) {
      goto LABEL_67;
    }
    uint64_t v114 = 0;
    unsigned int v118 = *a5;
    if (v115 >= v118)
    {
LABEL_66:
      uint64_t v117 = 0;
    }
    else
    {
      uint64_t v117 = 0;
      if (v116 < v118)
      {
        uint64_t v119 = *((void *)a5 + 17);
        unint64_t v120 = (v115 >> 1) + *(unsigned __int8 *)(v119 + 1) * (unint64_t)(v116 >> 1);
        uint64_t v114 = *(void *)(v119 + 64) + 2 * v120;
        uint64_t v117 = *(void *)(v119 + 72) + 2 * v120;
      }
    }
LABEL_67:
    uint64_t v197 = v108;
    uint64_t v199 = v117;
    int v210 = v93;
    uint64_t v203 = v99;
    if (v25)
    {
      uint64_t v121 = *(void *)(a1 + 2408);
      uint64_t v122 = v99;
      uint64_t v123 = v100;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, long long *, long long *))(v121 + 376))(v100, v122, v108, v122, v218, v218, &v229, &v231);
      uint64_t v100 = v123;
      int v89 = 0;
      int v90 = 0;
      uint64_t v124 = *(unsigned __int16 *)(v121 + 18);
      *(void *)&long long v229 = (unint64_t)(v229 * v124) >> 8;
      *(void *)&long long v231 = (unint64_t)(v231 * v124) >> 8;
      *(void *)(*(void *)(a1 + 2400) + 824) = v205;
      unint64_t v125 = v205;
      LODWORD(v230) = 0;
      LODWORD(v232) = 0;
      if (!(v98 | v214)) {
        goto LABEL_102;
      }
    }
    else
    {
      unint64_t v125 = v205;
      *(void *)(*(void *)(a1 + 2400) + 824) = v205;
    }
    uint64_t v126 = *v212;
    uint64_t v206 = 2 * v125;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*v212 + 376))(v100, v203, v201);
    uint64_t v127 = *(unsigned __int16 *)(v126 + 18);
    unint64_t v128 = (unint64_t)(v224 * v127) >> 8;
    unint64_t v129 = (unint64_t)(v225 * v127) >> 8;
    unint64_t v226 = v129;
    if (v98)
    {
      long long v130 = v26[2];
      long long v131 = v26[4];
      long long v132 = v26[5];
      *(long long *)((char *)v26 + 264) = v26[3];
      *(long long *)((char *)v26 + 280) = v131;
      *(long long *)((char *)v26 + 248) = v130;
      long long v133 = *v26;
      *(long long *)((char *)v26 + 232) = v26[1];
      long long v134 = v26[6];
      long long v135 = v26[8];
      long long v136 = v26[9];
      *(long long *)((char *)v26 + 328) = v26[7];
      *(long long *)((char *)v26 + 344) = v135;
      *(long long *)((char *)v26 + 296) = v132;
      *(long long *)((char *)v26 + 312) = v134;
      long long v137 = v26[11];
      *(long long *)((char *)v26 + 376) = v26[10];
      *(long long *)((char *)v26 + 392) = v137;
      *(long long *)((char *)v26 + 360) = v136;
      *(void *)&long long v235 = (unint64_t)(v224 * v127) >> 8;
      *((void *)v26 + 51) = *((void *)v26 + 24);
      *(long long *)((char *)v26 + 216) = v133;
      uint64_t v138 = 8 * (*((_DWORD *)v26 + 52) - *((_DWORD *)v26 + 6));
      *((void *)v26 + 4) = 0;
      *((void *)v26 + 1) = 510;
      *((void *)v26 + 2) = v138;
      *(void *)(*(void *)(a1 + 2400) + 880) = v114;
      sub_1BBAB5BB4(a1, v219, a3, v210, 0, 1);
      LODWORD(v236) = ((*((_DWORD *)v26 + 4) + 8 * (*((_DWORD *)v26 + 6) - *((_DWORD *)v26 + 52))) << 8)
                    - *((_DWORD *)v26 + 2)
                    + 510;
      int v139 = v236;
      long long v141 = *(long long *)((char *)v26 + 264);
      long long v140 = *(long long *)((char *)v26 + 280);
      v26[2] = *(long long *)((char *)v26 + 248);
      v26[3] = v141;
      long long v143 = *(long long *)((char *)v26 + 328);
      long long v142 = *(long long *)((char *)v26 + 344);
      long long v144 = *(long long *)((char *)v26 + 296);
      v26[6] = *(long long *)((char *)v26 + 312);
      v26[7] = v143;
      v26[4] = v140;
      v26[5] = v144;
      long long v145 = *(long long *)((char *)v26 + 392);
      long long v146 = *(long long *)((char *)v26 + 360);
      v26[10] = *(long long *)((char *)v26 + 376);
      v26[11] = v145;
      long long v147 = *(long long *)((char *)v26 + 232);
      *((void *)v26 + 24) = *((void *)v26 + 51);
      v26[8] = v142;
      v26[9] = v146;
      *uint64_t v26 = *(long long *)((char *)v26 + 216);
      v26[1] = v147;
      uint64_t v148 = *(void *)(a1 + 2408) + 8;
      unint64_t v149 = v128
           + ((v139 * *(unsigned __int16 *)(v148 + 2 * SWORD2(v236))) >> (8 * (WORD2(v236) == 0)));
      *((void *)&v235 + 1) = v149;
      unint64_t v150 = v229
           + ((v230 * *(unsigned __int16 *)(v148 + 2 * SWORD2(v230))) >> (8 * (WORD2(v230) == 0)));
      *((void *)&v229 + 1) = v150;
      if (v216) {
        BOOL v151 = v150 >= v149;
      }
      else {
        BOOL v151 = 1;
      }
      int v152 = !v151;
      if (v152 == 1)
      {
        sub_1BBAE40E4(a5, v219, a3, 1 << (v210 - 2), 1, 0, 0);
        (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2400) + 8152))((2 << v210), v218, v203, v197, v206, v201);
      }
      int v89 = v152 ^ 1;
      uint64_t v87 = a7;
      if (v214)
      {
        unint64_t v129 = v226;
        goto LABEL_88;
      }
      if (v216)
      {
LABEL_101:
        int v90 = 0;
        goto LABEL_102;
      }
      unint64_t v129 = v226;
    }
    else
    {
      if (v216)
      {
        int v89 = 0;
        int v90 = 0;
        uint64_t v87 = a7;
        if (!v214) {
          goto LABEL_102;
        }
        goto LABEL_88;
      }
      int v89 = 0;
      *(void *)&long long v229 = (unint64_t)(v224 * v127) >> 8;
      LODWORD(v230) = 0;
      long long v235 = v229;
      uint64_t v236 = v230;
      uint64_t v87 = a7;
      if (v214)
      {
LABEL_88:
        long long v153 = v26[2];
        long long v154 = v26[4];
        long long v155 = v26[5];
        *(long long *)((char *)v26 + 264) = v26[3];
        *(long long *)((char *)v26 + 280) = v154;
        *(long long *)((char *)v26 + 248) = v153;
        long long v156 = *v26;
        *(long long *)((char *)v26 + 232) = v26[1];
        long long v157 = v26[6];
        long long v158 = v26[8];
        long long v159 = v26[9];
        *(long long *)((char *)v26 + 328) = v26[7];
        *(long long *)((char *)v26 + 344) = v158;
        *(long long *)((char *)v26 + 296) = v155;
        *(long long *)((char *)v26 + 312) = v157;
        long long v160 = v26[11];
        *(long long *)((char *)v26 + 376) = v26[10];
        *(long long *)((char *)v26 + 392) = v160;
        *(long long *)((char *)v26 + 360) = v159;
        *(void *)&long long v237 = v129;
        *((void *)v26 + 51) = *((void *)v26 + 24);
        *(long long *)((char *)v26 + 216) = v156;
        uint64_t v161 = 8 * (*((_DWORD *)v26 + 52) - *((_DWORD *)v26 + 6));
        *((void *)v26 + 4) = 0;
        *((void *)v26 + 1) = 510;
        *((void *)v26 + 2) = v161;
        *(void *)(*(void *)(a1 + 2400) + 888) = v199;
        unint64_t v162 = v129;
        sub_1BBAB5BB4(a1, v219, a3, v210, 0, 2);
        int v163 = ((*((_DWORD *)v26 + 4) + 8 * (*((_DWORD *)v26 + 6) - *((_DWORD *)v26 + 52))) << 8)
             - *((_DWORD *)v26 + 2)
             + 510;
        LODWORD(v238[0]) = v163;
        long long v165 = *(long long *)((char *)v26 + 264);
        long long v164 = *(long long *)((char *)v26 + 280);
        v26[2] = *(long long *)((char *)v26 + 248);
        v26[3] = v165;
        long long v167 = *(long long *)((char *)v26 + 328);
        long long v166 = *(long long *)((char *)v26 + 344);
        long long v168 = *(long long *)((char *)v26 + 296);
        v26[6] = *(long long *)((char *)v26 + 312);
        v26[7] = v167;
        v26[4] = v164;
        v26[5] = v168;
        long long v169 = *(long long *)((char *)v26 + 392);
        long long v170 = *(long long *)((char *)v26 + 360);
        v26[10] = *(long long *)((char *)v26 + 376);
        v26[11] = v169;
        long long v171 = *(long long *)((char *)v26 + 232);
        *((void *)v26 + 24) = *((void *)v26 + 51);
        v26[8] = v166;
        v26[9] = v170;
        *uint64_t v26 = *(long long *)((char *)v26 + 216);
        v26[1] = v171;
        uint64_t v172 = *(void *)(a1 + 2408) + 8;
        int v173 = *(unsigned __int16 *)(v172 + 2 * SWORD2(v238[0]));
        unint64_t v174 = v231
             + ((v232 * *(unsigned __int16 *)(v172 + 2 * SWORD2(v232))) >> (8 * (WORD2(v232) == 0)));
        *((void *)&v231 + 1) = v174;
        int v90 = 1;
        if (v216 && v174 < v162 + ((v163 * v173) >> (8 * (WORD2(v238[0]) == 0))))
        {
          sub_1BBAE40E4(a5, v219, a3, 1 << (v210 - 2), 2, 0, 0);
          uint64_t v175 = 0;
          uint64_t v176 = *(void *)(a1 + 2400);
          uint64_t v177 = (v219 + 1 - *((_DWORD *)a5 + 1));
          unsigned int v178 = a3 - *((_DWORD *)a5 + 2);
          if ((v177 & 0x80000000) == 0 && (v178 & 0x80000000) == 0)
          {
            uint64_t v175 = 0;
            unsigned int v179 = *a5;
            if (v177 < v179 && v178 < v179)
            {
              uint64_t v175 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 9) + 24))(*((void *)a5 + 9), v177 + a5[1] * (unint64_t)(v178 >> 1) + *((void *)a5 + 10));
              LODWORD(v177) = v219 + 1 - *((_DWORD *)a5 + 1);
              unsigned int v178 = a3 - *((_DWORD *)a5 + 2);
            }
          }
          uint64_t v180 = 0;
          if ((v177 & 0x80000000) == 0 && (v178 & 0x80000000) == 0)
          {
            uint64_t v180 = 0;
            unsigned int v181 = *a5;
            if (v177 < v181 && v178 < v181) {
              uint64_t v180 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)a5 + 17) + 96)
            }
                                                                         + 24))(*(void *)(*((void *)a5 + 17) + 96), *(void *)(*((void *)a5 + 17) + 104)+ v177+ 2 * *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (unint64_t)(v178 >> 1));
          }
          (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 8152))((2 << v210), v218, v203, v175, v206, v180);
          goto LABEL_101;
        }
LABEL_102:
        if (v87)
        {
LABEL_103:
          uint64_t v182 = &v235;
          if (!v89) {
            uint64_t v182 = &v229;
          }
          uint64_t v183 = *(void *)v87 + *(void *)v182;
          unint64_t v184 = &v236;
          if (!v89) {
            unint64_t v184 = &v230;
          }
          int v185 = *(_DWORD *)(v87 + 16) + *(_DWORD *)v184;
          long long v186 = &v237;
          if (!v90) {
            long long v186 = &v231;
          }
          *(void *)uint64_t v87 = *(void *)v186 + v183;
          long long v187 = v238;
          if (!v90) {
            long long v187 = &v232;
          }
          *(_DWORD *)(v87 + 16) = *(_DWORD *)v187 + v185;
        }
LABEL_112:
        uint64_t v57 = v212;
        int v86 = v208;
        int v25 = v216;
        goto LABEL_113;
      }
    }
    int v90 = 0;
    *(void *)&long long v231 = v129;
    LODWORD(v232) = 0;
    long long v237 = v231;
    v238[0] = v232;
    if (v87) {
      goto LABEL_103;
    }
    goto LABEL_112;
  }
LABEL_113:
  if (v87)
  {
    if (v86) {
      long long v188 = &v233;
    }
    else {
      long long v188 = &v227;
    }
    uint64_t v189 = *(void *)v87 + *(void *)v188;
    *(void *)uint64_t v87 = v189;
    long long v190 = &v228;
    if (v86) {
      long long v190 = &v234;
    }
    int v191 = *(_DWORD *)(v87 + 16) + *(_DWORD *)v190;
    *(_DWORD *)(v87 + 16) = v191;
    *(void *)(v87 + 8) = v189
                         + ((v191 * *(unsigned __int16 *)(*v57 + 2 * *(__int16 *)(v87 + 20) + 8)) >> (8 * (*(_WORD *)(v87 + 20) == 0)));
  }
  if (a8 && v25)
  {
    int v192 = *(_DWORD *)(a8 + 16) + v228;
    int v193 = v230;
    uint64_t v194 = v231 + v229 + *(void *)a8 + v227;
    *(void *)a8 = v194;
    int v195 = v232 + v193 + v192;
    *(_DWORD *)(a8 + 16) = v195;
    *(void *)(a8 + 8) = v194
                        + ((v195 * *(unsigned __int16 *)(*v57 + 2 * *(__int16 *)(a8 + 20) + 8)) >> (8 * (*(_WORD *)(a8 + 20) == 0)));
  }
  return (v222 | v86 | v89 | v90) & 1;
}

uint64_t sub_1BBAC3E50(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, unsigned __int8 *a8)
{
  uint64_t v10 = a6;
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  v210[32] = *MEMORY[0x1E4F143B8];
  int v15 = *(_DWORD *)(a1 + 2048) - a4;
  uint64_t v16 = *(void *)(a1 + 2376);
  uint64_t v17 = *(void *)(v16 + 1360);
  if (*(_DWORD *)(v17 + 276) <= (int)a2 || *(_DWORD *)(v17 + 280) <= (int)a3)
  {
    unsigned int v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    unsigned int v18 = (__int16 *)(*(void *)(v17 + 512) + 2 * (*(void *)(v17 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    uint64_t v19 = *(void *)(v17 + 576) + 16 * (*(void *)(v17 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  char v20 = v15 - 1;
  int v174 = *(_DWORD *)(a1 + 2048) - a4;
  if ((((unsigned __int16)*v18 >> 2) & 3) > a4)
  {
    uint64_t v22 = 1;
    uint64_t v23 = ((1 << v20) + a2);
    unsigned int v202 = (1 << v20) + a3;
    uint64_t v24 = (a4 + 1);
    int v194 = (a6 & 0xF0) != 0;
    if ((a6 & 0xF0) != 0) {
      int v25 = 15;
    }
    else {
      int v25 = 0;
    }
    int v26 = v25 | a6 & 0x1FF0;
    int v29 = (a6 & 0x1E00) != 0;
    if ((a6 & 0x1E00) != 0) {
      int v30 = 122880;
    }
    else {
      int v30 = 0;
    }
    char v198 = sub_1BBAC3E50(a1, a2, a3, (a4 + 1), 0, v26 | v30, a6, a8);
    char v31 = sub_1BBAC3E50(a1, v23, a3, v24, 1, v10 & 0x1FE00 | (v29 << 8) | 0xF0, v10, a8);
    char v32 = sub_1BBAC3E50(a1, v13, v202, v24, 2, v10 | (v194 << 8) | 0x1FE00u, v10, a8);
    uint64_t v33 = a1;
    char v34 = v32;
    char v35 = sub_1BBAC3E50(v33, v23, v202, v24, 3, 8176, v10, a8);
    if ((v198 & 1) == 0 && (v31 & 1) == 0 && (v34 & 1) == 0 && (v35 & 1) == 0)
    {
      if ((*v18 & 0xC) != 0
        && (uint64_t v36 = *(void *)(a1 + 2384), *(unsigned char *)(v36 + 244))
        && v174 <= *(unsigned __int8 *)(v36 + 2011)
        && (*unsigned int v18 = *v18 & 0xFFF3 | (*v18 + 12) & 0xC, 1 << v174 >= 8))
      {
        uint64_t v37 = 0;
        uint64_t v38 = 2 * *(void *)(*(void *)(*(void *)(a1 + 2376) + 1360) + 488);
        unsigned int v39 = v18;
        do
        {
          uint64_t v40 = v39;
          uint64_t v41 = (1 << v174) >> 3;
          do
          {
            *v40++ = *v18;
            --v41;
          }
          while (v41);
          uint64_t v22 = 0;
          ++v37;
          unsigned int v39 = (__int16 *)((char *)v39 + v38);
        }
        while (v37 != (1 << v174) >> 3);
      }
      else
      {
        return 0;
      }
    }
    return v22;
  }
  int v173 = (unsigned __int8 *)v19;
  unsigned int v169 = v15 - 1;
  *(_WORD *)&__c[1] = 0;
  __c[0] = 0;
  uint64_t v42 = *(void **)(*(void *)(v16 + 79216) + 592);
  uint64_t v191 = v42[14];
  uint64_t v43 = *(void *)(v17 + 112);
  uint64_t v167 = **((unsigned __int8 **)a8 + 17);
  uint64_t v189 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void))(*v42 + 16))(v42, a2, a3, 0);
  uint64_t v203 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(*(void *)(a1 + 2376) + 1360)
                                                                     + 16))(*(void *)(*(void *)(a1 + 2376) + 1360), v13, v12, 0);
  uint64_t v44 = 0;
  uint64_t v45 = (v13 - *((_DWORD *)a8 + 1));
  if ((v45 & 0x80000000) != 0)
  {
    int v47 = v174;
    uint64_t v48 = v173;
  }
  else
  {
    unsigned int v46 = v12 - *((_DWORD *)a8 + 2);
    int v47 = v174;
    uint64_t v48 = v173;
    if ((v46 & 0x80000000) == 0)
    {
      uint64_t v44 = 0;
      unsigned int v49 = *a8;
      if (v45 < v49 && v46 < v49) {
        uint64_t v44 = *(void *)(*((void *)a8 + 17) + 56)
      }
            + 2 * (v45 + **((unsigned __int8 **)a8 + 17) * (unint64_t)v46);
    }
  }
  int v168 = 1 << (v47 - 2);
  int v186 = v13;
  uint64_t v185 = v12;
  int v193 = a8;
  if (v48[10] != 1) {
    goto LABEL_155;
  }
  uint64_t v187 = v43;
  uint64_t v188 = *(int *)(a1 + 2048) - (uint64_t)a4;
  uint64_t v50 = *(void *)(*(void *)(a1 + 2376) + 1360);
  unsigned int v163 = a7;
  unsigned int v164 = v10;
  uint64_t v162 = v44;
  if (*(_DWORD *)(v50 + 276) <= (int)v13 || *(_DWORD *)(v50 + 280) <= (int)v12)
  {
    unint64_t v184 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v184 = (__int16 *)(*(void *)(v50 + 512) + 2
                                              * (*(void *)(v50 + 488) * ((uint64_t)(int)v12 >> 3) + ((int)v13 >> 3)));
    uint64_t v10 = *(void *)(v50 + 576) + 16 * (*(void *)(v50 + 552) * ((uint64_t)(int)v12 >> 2) + ((int)v13 >> 2));
  }
  (*(void (**)(uint64_t, uint64_t, void, BOOL, BOOL))(v50 + 1072))(v13, v12, (2 << v188), (v164 & 0xF) != 0, (v164 & 0x1E000) != 0);
  int v51 = v12;
  uint64_t v52 = *(void *)(a1 + 2392);
  if (*(_DWORD *)(v52 + 592) == 3)
  {
    uint64_t v53 = (void (**)(uint64_t, void, uint64_t, uint64_t, void *))(*(void *)(a1 + 2376) + 1424);
    uint64_t v54 = *(unsigned __int8 *)v10;
    (*v53)(v188, v164, v43, v203, v210);
    LODWORD(v10) = v164;
    if (v54 != 1)
    {
      int v55 = 10 - v54;
      if (v54 >= 0xA) {
        int v55 = v54 - 10;
      }
      int v56 = 26 - v54;
      if (v54 >= 0x1A) {
        int v56 = v54 - 26;
      }
      if (v55 >= v56) {
        int v55 = v56;
      }
      if (v55 > byte_1BBB7CDED[v188]) {
        ((void (*)(void *, void *))v53[(int)v188 - 1])(v210, v210);
      }
    }
    sub_1BBA26804((uint64_t)v53, v54, v188, (uint64_t)v210, v43, v203);
    uint64_t v12 = v185;
    uint64_t v44 = v162;
    int v47 = v174;
LABEL_154:
    uint64_t v48 = v173;
LABEL_155:
    uint64_t v110 = a1;
    uint64_t v122 = *(void *)(a1 + 2400);
    *(_DWORD *)(v122 + 808) = v13;
    *(_DWORD *)(v122 + 812) = v12;
    *(void *)(v122 + 864) = v48;
    int v111 = v47;
    sub_1BBAB86E0(a1, v13, v12, v18, v189, v191, v203, v43, v203, v43, v44, v167, v47, &__c[2], 0);
    goto LABEL_156;
  }
  int v57 = sub_1BBAA5CB4(*(void *)(a1 + 2400), v13, v51, v188);
  uint64_t v207 = 0;
  int v58 = *(char *)(v52 + 587);
  if (v58 >= 9) {
    int v58 = 9;
  }
  if (v58 <= -2) {
    LOBYTE(v58) = -2;
  }
  if (((*(unsigned __int8 *)(*(void *)(a1 + 2384) + 2013) - 1) & v51) != 0)
  {
    if ((((v51 - 1) | v13) & 0x80000000) != 0
      || (uint64_t v59 = *(void *)(*(void *)(a1 + 2376) + 1360), *(_DWORD *)(v59 + 276) <= (int)v13)
      || *(_DWORD *)(v59 + 280) < v51
      || (uint64_t v60 = *(void *)(v59 + 576)) == 0
      || (uint64_t v61 = (char *)(v60 + 16 * (*(void *)(v59 + 552) * ((uint64_t)(v51 - 1) >> 2) + ((int)v13 >> 2))), v61[10] != 1))
    {
      uint64_t v61 = &byte_1BBB7C97C;
    }
  }
  else
  {
    uint64_t v61 = &byte_1BBB7C97C;
  }
  if (((v13 - 1) | v51) < 0
    || (uint64_t v62 = *(void *)(*(void *)(a1 + 2376) + 1360), *(_DWORD *)(v62 + 276) < (int)v13)
    || *(_DWORD *)(v62 + 280) <= v51
    || (uint64_t v63 = *(void *)(v62 + 576)) == 0
    || (char v64 = (char *)(v63 + 16 * (*(void *)(v62 + 552) * ((uint64_t)v51 >> 2) + (((int)v13 - 1) >> 2))), v64[10] != 1))
  {
    char v64 = &byte_1BBB7C97C;
  }
  unsigned __int8 v65 = v58 + 2;
  unsigned int v66 = *v64;
  unsigned int v67 = *v61;
  if (v66 == v67)
  {
    uint64_t v68 = v203;
    if (v66 < 2)
    {
      unint64_t v208 = 0x100000000;
      int v69 = 26;
    }
    else
    {
      LODWORD(v208) = v66;
      HIDWORD(v208) = (((_BYTE)v66 + 29) & 0x1F) + 2;
      int v69 = (((_BYTE)v66 - 1) & 0x1F) + 2;
    }
  }
  else
  {
    unint64_t v208 = __PAIR64__(v67, v66);
    uint64_t v68 = v203;
    if (v66 && v67)
    {
      int v69 = 0;
    }
    else if (v67 + v66 > 1)
    {
      int v69 = 1;
    }
    else
    {
      int v69 = 26;
    }
  }
  unsigned int v70 = v65;
  int v209 = v69;
  uint64_t v71 = a1;
  (*(void (**)(void, void, uint64_t, uint64_t, void))(*(void *)(a1 + 2376) + 1424))(v188, v164, v187, v68, *((void *)a8 + 19));
  if ((v188 - 3) <= 2) {
    (*(void (**)(void, void))(*(void *)(a1 + 2376) + 8 * (v188 - 3) + 1440))(*((void *)a8 + 19), *((void *)a8 + 20));
  }
  uint64_t v72 = *(void *)(a1 + 2408);
  uint64_t v73 = (int)v188 - 2;
  if (v57 == 2) {
    uint64_t v74 = 2;
  }
  else {
    uint64_t v74 = v70;
  }
  uint64_t v75 = v68;
  uint64_t v175 = (int)v188 - 2;
  uint64_t v199 = v74;
  long long v165 = v18;
  if (v74)
  {
    uint64_t v76 = 0;
    int v182 = 0;
    int v171 = 0;
    int v195 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 8 * v73 + 144);
    unint64_t v77 = -1;
    long long v78 = &byte_1BBB7CD8A[11 * v57];
    unint64_t v79 = -1;
    uint64_t v80 = v188;
    do
    {
      int v81 = v78[v76];
      if (v81 == 1)
      {
        BOOL v82 = 0;
      }
      else
      {
        int v83 = 10 - v81;
        if (v81 >= 10) {
          int v83 = v81 - 10;
        }
        int v84 = 26 - v81;
        if (v81 >= 26) {
          int v84 = v81 - 26;
        }
        if (v83 >= v84) {
          int v83 = v84;
        }
        BOOL v82 = v83 > byte_1BBB7CDED[v80];
      }
      sub_1BBA26804(*(void *)(a1 + 2376) + 1424, v78[v76], v80, *(void *)&a8[8 * v82 + 152], v187, v75);
      unsigned int v85 = v195((1 << v188), (1 << v188), v189, v191, v75, v187);
      uint64_t v86 = 0;
      while (*((_DWORD *)&v208 + v86) != v81)
      {
        if (++v86 == 3)
        {
          uint64_t v87 = 6;
          goto LABEL_99;
        }
      }
      if (v86) {
        uint64_t v87 = 3;
      }
      else {
        uint64_t v87 = 2;
      }
LABEL_99:
      uint64_t v72 = *(void *)(a1 + 2408);
      unint64_t v88 = v85 + v87 * *(unsigned __int16 *)(v72 + 14);
      uint64_t v80 = v188;
      if (v88 >= v77)
      {
        uint64_t v89 = v79;
        unint64_t v79 = v77;
      }
      else if (v88 >= v79)
      {
        int v182 = v81;
        uint64_t v89 = v79;
        unint64_t v79 = v88;
      }
      else
      {
        int v182 = v171;
        int v171 = v81;
        uint64_t v89 = v85 + v87 * *(unsigned __int16 *)(v72 + 14);
      }
      ++v76;
      unint64_t v77 = v79;
      unint64_t v79 = v89;
    }
    while (v76 != v199);
    HIDWORD(v207) = v182;
    uint64_t v71 = a1;
    uint64_t v73 = (int)v188 - 2;
    LODWORD(v74) = v171;
  }
  else
  {
    LODWORD(v80) = v188;
  }
  int v172 = v74;
  LODWORD(v207) = v74;
  int v90 = (unsigned __int8 *)*((void *)a8 + 17);
  uint64_t v181 = *v90;
  uint64_t v183 = 0;
  uint64_t v91 = (v186 - *((_DWORD *)a8 + 1));
  if ((v91 & 0x80000000) == 0)
  {
    unsigned int v92 = v185 - *((_DWORD *)a8 + 2);
    if ((v92 & 0x80000000) == 0)
    {
      uint64_t v183 = 0;
      unsigned int v93 = *a8;
      if (v91 < v93 && v92 < v93) {
        uint64_t v183 = *((void *)v90 + 7) + 2 * (v91 + *v90 * (unint64_t)v92);
      }
    }
  }
  LODWORD(v94) = 0;
  uint64_t v95 = *(unsigned __int8 *)(*(void *)(*(void *)(v71 + 2376) + 1368) + 2001) + (uint64_t)(*v184 >> 9);
  *(void *)&__c[3] = 0;
  uint64_t v177 = *(unsigned int (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 8 * v73 + 24);
  unsigned int v178 = (void (**)(void, uint64_t, uint64_t, unsigned char *, unsigned char *))(v71 + 8 * (v80 > 2) + 2224);
  uint64_t v179 = v95;
  uint64_t v176 = &byte_1BBB7C988[v95 + 70];
  unint64_t v96 = -1;
  uint64_t v97 = 1;
  int v180 = 1 << v188;
  do
  {
    uint64_t v98 = *((unsigned int *)&v207 + v97);
    unsigned int v200 = v94;
    uint64_t v196 = v97;
    if (v98 == 1)
    {
      uint64_t v99 = a1;
      uint64_t v100 = v187;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 + 2376) + 8 * v175 + 1584))(1, *((void *)a8 + 19), v187, v75);
      uint64_t v101 = v75;
      int v102 = v188;
    }
    else
    {
      int v103 = 10 - v98;
      if ((int)v98 >= 10) {
        int v103 = v98 - 10;
      }
      int v104 = 26 - v98;
      if ((int)v98 >= 26) {
        int v104 = v98 - 26;
      }
      if (v103 >= v104) {
        int v103 = v104;
      }
      uint64_t v101 = v75;
      uint64_t v100 = v187;
      int v102 = v188;
      uint64_t v99 = a1;
      sub_1BBA26804(*(void *)(a1 + 2376) + 1424, v98, v188, *(void *)&a8[8 * (v103 > byte_1BBB7CDED[v188]) + 152], v187, v101);
    }
    *(unsigned char *)uint64_t v10 = v98;
    uint64_t v105 = *(void *)(v99 + 2400);
    *(_DWORD *)(v105 + 808) = v186;
    *(_DWORD *)(v105 + 812) = v185;
    *(void *)(v105 + 864) = v10;
    sub_1BBAB86E0(v99, v186, v185, v184, v189, v191, v203, v100, v101, v100, v183, v181, v102, &__c[2], 0);
    uint64_t v75 = v203;
    uint64_t v106 = v177(v180, v180, v189, v191, v203, v100);
    (*v178)(v180, v181, v183, &__c[7], &__c[3]);
    uint64_t v107 = 0;
    while (*((_DWORD *)&v208 + v107) != v98)
    {
      if (++v107 == 3)
      {
        int v108 = 6;
        goto LABEL_129;
      }
    }
    if (v107) {
      int v108 = 3;
    }
    else {
      int v108 = 2;
    }
LABEL_129:
    if ((unint64_t)(((*(_DWORD *)&__c[7] * byte_1BBB7C988[v179] + *(_DWORD *)&__c[3] * *v176 + v108)
                           * *(unsigned __int16 *)(*(void *)(a1 + 2408) + 8)) >> 8)
       + v106 >= v96)
    {
      uint64_t v94 = v200;
    }
    else
    {
      unint64_t v96 = (((*(_DWORD *)&__c[7] * byte_1BBB7C988[v179] + *(_DWORD *)&__c[3] * *v176 + v108)
            * *(unsigned __int16 *)(*(void *)(a1 + 2408) + 8)) >> 8)
          + v106;
      uint64_t v94 = v98;
    }
    uint64_t v97 = v196 - 1;
  }
  while (v196);
  *(unsigned char *)uint64_t v10 = v94;
  unsigned __int8 v109 = v94;
  uint64_t v110 = a1;
  uint64_t v13 = v186;
  uint64_t v12 = v185;
  int v111 = v174;
  a7 = v163;
  uint64_t v43 = v187;
  if (v180 >= 4)
  {
    uint64_t v112 = 0;
    LODWORD(v113) = v180 >> 2;
    if (v180 >> 2 <= 1) {
      uint64_t v113 = 1;
    }
    else {
      uint64_t v113 = v113;
    }
    uint64_t v114 = 16 * *(void *)(*(void *)(*(void *)(a1 + 2376) + 1360) + 552);
    unsigned int v115 = (void *)v10;
    do
    {
      unsigned int v116 = v115;
      uint64_t v117 = v113;
      do
      {
        uint64_t v118 = *(void *)v10;
        *(void *)((char *)v116 + 6) = *(void *)(v10 + 6);
        *unsigned int v116 = v118;
        v116 += 2;
        --v117;
      }
      while (v117);
      ++v112;
      unsigned int v115 = (void *)((char *)v115 + v114);
    }
    while (v112 != v180 >> 2);
    unsigned __int8 v109 = *(unsigned char *)v10;
  }
  if (v172 != v109)
  {
    LODWORD(v10) = v164;
    if (v94 == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 + 2376) + 8 * v175 + 1584))(1, *((void *)a8 + 19), v187, v203);
    }
    else
    {
      int v120 = 10 - v94;
      if ((int)v94 >= 10) {
        int v120 = v94 - 10;
      }
      int v121 = 26 - v94;
      if ((int)v94 >= 26) {
        int v121 = v94 - 26;
      }
      if (v120 >= v121) {
        int v120 = v121;
      }
      sub_1BBA26804(*(void *)(a1 + 2376) + 1424, v94, v188, *(void *)&a8[8 * (v120 > byte_1BBB7CDED[v188]) + 152], v187, v203);
    }
    unsigned int v18 = v165;
    uint64_t v44 = v162;
    int v47 = v174;
    goto LABEL_154;
  }
  uint64_t v119 = *(void *)(a1 + 2400);
  *(_DWORD *)(v119 + 808) = v186;
  *(_DWORD *)(v119 + 812) = v185;
  *(void *)(v119 + 864) = v173;
  unsigned int v18 = v165;
  LODWORD(v10) = v164;
LABEL_156:
  int v123 = __c[2];
  sub_1BBAE40E4(a8, v13, v12, v168, 0, __c[2], 0);
  int v124 = *(unsigned __int8 *)(*(void *)(v110 + 2384) + 2012);
  if (v111 <= v124) {
    unsigned int v125 = a7;
  }
  else {
    unsigned int v125 = v10;
  }
  if (v111 <= v124 && a5 == 0) {
    uint64_t v127 = v111;
  }
  else {
    uint64_t v127 = v169;
  }
  if (a5 && v111 <= v124)
  {
    int v128 = 0;
    BOOL v129 = 1;
  }
  else
  {
    unsigned int v190 = v125;
    int v130 = v123;
    long long v166 = v18;
    uint64_t v131 = *(void *)(v110 + 2376);
    long long v132 = *(void **)(*(void *)(v131 + 79216) + 592);
    uint64_t v133 = *(void *)(*(void *)(v131 + 1360) + 120);
    uint64_t v197 = *(unsigned __int8 *)(*((void *)a8 + 17) + 1);
    uint64_t v201 = v132[15];
    long long v134 = (void *)v110;
    uint64_t v135 = (v186 >> 1);
    int v136 = v12;
    uint64_t v192 = (*(uint64_t (**)(void *, uint64_t, void, uint64_t))(*v132 + 16))(v132, v135, ((int)v12 >> 1), 1);
    long long v137 = v134;
    uint64_t v204 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(v134[297] + 1360) + 16))(*(void *)(v134[297] + 1360), v135, ((int)v12 >> 1), 1);
    uint64_t v138 = 0;
    unsigned int v139 = v186 - *((_DWORD *)a8 + 1);
    if ((v139 & 0x80000000) != 0)
    {
      uint64_t v141 = 0;
      long long v142 = v173;
      uint64_t v143 = v133;
      int v123 = v130;
    }
    else
    {
      unsigned int v140 = v12 - *((_DWORD *)a8 + 2);
      uint64_t v141 = 0;
      long long v142 = v173;
      uint64_t v143 = v133;
      int v123 = v130;
      if ((v140 & 0x80000000) == 0)
      {
        uint64_t v138 = 0;
        unsigned int v144 = *a8;
        uint64_t v141 = 0;
        if (v139 < v144 && v140 < v144)
        {
          uint64_t v145 = *((void *)a8 + 17);
          unint64_t v146 = (v139 >> 1) + *(unsigned __int8 *)(v145 + 1) * (unint64_t)(v140 >> 1);
          uint64_t v138 = *(void *)(v145 + 64) + 2 * v146;
          uint64_t v141 = *(void *)(v145 + 72) + 2 * v146;
        }
      }
    }
    if (v142[10] == 1)
    {
      (*(void (**)(uint64_t, void, void, BOOL, BOOL))(*(void *)(v137[297] + 1360) + 1080))(v135, (v136 >> 1), (2 << v127), (v190 & 0xF) != 0, (v190 & 0x1E000) != 0);
      uint64_t v147 = v173[1];
      if (v147 == *v173)
      {
        v173[1] = 35;
        int v148 = 1 << v127;
        if (1 << v127 >= 4)
        {
          uint64_t v149 = 0;
          uint64_t v150 = v148 >> 2;
          LODWORD(v151) = v148 >> 2;
          if ((int)v151 <= 1) {
            uint64_t v151 = 1;
          }
          else {
            uint64_t v151 = v151;
          }
          uint64_t v152 = 16 * *(void *)(*(void *)(v137[297] + 1360) + 552);
          long long v153 = v173;
          do
          {
            long long v154 = v153;
            uint64_t v155 = v151;
            do
            {
              uint64_t v156 = *(void *)v173;
              *(void *)((char *)v154 + 6) = *(void *)(v173 + 6);
              *long long v154 = v156;
              v154 += 2;
              --v155;
            }
            while (v155);
            ++v149;
            long long v153 = (void *)((char *)v153 + v152);
          }
          while (v149 != v150);
        }
      }
      uint64_t v157 = v137[297];
      uint64_t v158 = v157 + 1424;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, void *))(v157 + 1432))(v127, v190, v143 >> 1, v204, v210);
      long long v137 = (void *)a1;
      sub_1BBA26878(v158, v147, v127, (uint64_t)v210, v143, v204);
      long long v142 = v173;
    }
    uint64_t v159 = v137[300];
    *(_DWORD *)(v159 + 808) = v186;
    *(_DWORD *)(v159 + 812) = v185;
    *(void *)(v159 + 864) = v142;
    sub_1BBABC324(v137, v186, v185, v127, v166, v192, v201, v204, v143, v204, v143, v138, v141, v197, &__c[1], __c, 0, 0);
    BOOL v129 = __c[1] == 0;
    sub_1BBAE40E4(v193, v186, v185, 1 << (v127 - 2), 1, __c[1], 0);
    int v128 = __c[0];
    sub_1BBAE40E4(v193, v186, v185, 1 << (v127 - 2), 2, __c[0], 0);
  }
  BOOL v160 = v128 != 0;
  if (!v129) {
    BOOL v160 = 1;
  }
  return v123 || v160;
}

BOOL sub_1BBAC4F90(uint64_t a1, int a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, unsigned __int8 a11)
{
  int v14 = (void *)a1;
  int v15 = a10;
  v454[1] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *(void *)(*(void *)(a1 + 2376) + 1360);
  uint64_t v17 = *(int *)(a1 + 2048) - (uint64_t)a4;
  if (a10)
  {
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v16 + 276) <= a2
      || *(_DWORD *)(v16 + 280) <= (int)a3)
    {
      unsigned int v18 = 0;
    }
    else
    {
      unsigned int v18 = (__int16 *)(*(void *)(v16 + 512) + 2 * (*(void *)(v16 + 488) * ((uint64_t)(int)a3 >> 3) + (a2 >> 3)));
    }
    uint64_t v22 = *(void *)(v16 + 488);
  }
  else
  {
    unsigned int v18 = 0;
    unsigned int v19 = a2 - *((_DWORD *)a5 + 1);
    unint64_t v20 = *a5;
    if ((v19 & 0x80000000) == 0)
    {
      unsigned int v21 = a3 - *((_DWORD *)a5 + 2);
      if ((v21 & 0x80000000) == 0)
      {
        unsigned int v18 = 0;
        if (v19 < v20 && v21 < v20) {
          unsigned int v18 = (__int16 *)(*((void *)a5 + 11)
        }
                          + 2 * ((v19 >> 3) + (v20 >> 3) * (unint64_t)(v21 >> 3)));
      }
    }
    uint64_t v22 = v20 >> 3;
  }
  int v427 = v18;
  int v430 = *(_DWORD *)(a1 + 2048) - a4;
  if ((((unsigned __int16)*v18 >> 2) & 3) > a4)
  {
    uint64_t v408 = v22;
    uint64_t v23 = 1;
    char v433 = sub_1BBAC4F90(a1);
    char v421 = sub_1BBAC4F90(v14);
    char v436 = sub_1BBAC4F90(v14);
    char v24 = sub_1BBAC4F90(v14);
    if ((v433 & 1) == 0 && (v421 & 1) == 0 && (v436 & 1) == 0 && (v24 & 1) == 0)
    {
      if ((*v427 & 0xC) != 0
        && (uint64_t v25 = *(void *)(a1 + 2384), *(unsigned char *)(v25 + 244))
        && (int)v17 <= *(unsigned __int8 *)(v25 + 2011)
        && (*int v427 = *v427 & 0xFFF3 | (*v427 + 12) & 0xC, 1 << v17 >= 8))
      {
        uint64_t v26 = 0;
        uint64_t v27 = v427;
        do
        {
          unsigned int v28 = v27;
          uint64_t v29 = (1 << v17) >> 3;
          do
          {
            *v28++ = *v427;
            --v29;
          }
          while (v29);
          uint64_t v23 = 0;
          ++v26;
          v27 += v408;
        }
        while (v26 != (1 << v17) >> 3);
      }
      else
      {
        return 0;
      }
    }
    return v23;
  }
  uint64_t v30 = 0;
  uint64_t v31 = *(void *)(a1 + 2392);
  int v434 = *(unsigned __int8 *)(v31 + 227);
  int v32 = 1 << *(unsigned char *)(v16 + 286);
  __int16 v440 = 0;
  unsigned __int8 v439 = 0;
  uint64_t v33 = *(long long **)(*(void *)(a1 + 2400) + 944);
  int v34 = *(unsigned __int8 *)(v31 + 352);
  __n128 v35 = (__n128)xmmword_1BBB6F8F0;
  do
  {
    uint64_t v36 = (char *)&v449 + v30;
    *((_DWORD *)v36 + 4) = 0;
    *(_OWORD *)uint64_t v36 = xmmword_1BBB6F8F0;
    *((_WORD *)v36 + 10) = 0;
    uint64_t v37 = (char *)&v443 + v30;
    *((_DWORD *)v37 + 4) = 0;
    *(_OWORD *)uint64_t v37 = xmmword_1BBB6F8F0;
    v30 += 24;
    *((_WORD *)v37 + 10) = 0;
  }
  while (v30 != 72);
  int v38 = (a10 | a11) ^ 1;
  if (v34) {
    BOOL v39 = v17 == 2;
  }
  else {
    BOOL v39 = 0;
  }
  char v40 = v39;
  if (!v39) {
    int v38 = 0;
  }
  int v409 = v38;
  uint64_t v41 = a5[1];
  if (a10)
  {
    uint64_t v42 = *(void *)(v16 + 112);
    uint64_t v391 = **((unsigned __int8 **)a5 + 17);
  }
  else
  {
    uint64_t v391 = **((unsigned __int8 **)a5 + 17);
    uint64_t v42 = v391;
  }
  uint64_t v417 = 0;
  uint64_t v397 = v42;
  if (v434) {
    uint64_t v43 = a5[1];
  }
  else {
    uint64_t v43 = v42;
  }
  uint64_t v405 = v43;
  uint64_t v44 = (a2 - *((_DWORD *)a5 + 1));
  if ((v44 & 0x80000000) == 0)
  {
    unsigned int v45 = a3 - *((_DWORD *)a5 + 2);
    if ((v45 & 0x80000000) == 0)
    {
      uint64_t v417 = 0;
      unsigned int v46 = *a5;
      if (v44 < v46 && v45 < v46)
      {
        uint64_t v47 = (*(uint64_t (**)(void, unint64_t, __int128))(**((void **)a5 + 3) + 24))(*((void *)a5 + 3), v44 + a5[1] * (unint64_t)v45 + *((void *)a5 + 4), xmmword_1BBB6F8F0);
        int v15 = a10;
        uint64_t v417 = v47;
      }
    }
  }
  if (v15)
  {
    uint64_t v48 = (*(uint64_t (**)(void, void, uint64_t, void, __n128))(**(void **)(v14[297] + 1360) + 16))(*(void *)(v14[297] + 1360), a2, a3, 0, v35);
LABEL_51:
    uint64_t v49 = v48;
    goto LABEL_52;
  }
  uint64_t v49 = 0;
  unsigned int v56 = a2 - *((_DWORD *)a5 + 1);
  if ((v56 & 0x80000000) == 0)
  {
    unsigned int v57 = a3 - *((_DWORD *)a5 + 2);
    if ((v57 & 0x80000000) == 0)
    {
      uint64_t v49 = 0;
      unsigned int v58 = *a5;
      if (v56 < v58 && v57 < v58)
      {
        uint64_t v48 = (*(uint64_t (**)(void, unint64_t, __n128))(**(void **)(*((void *)a5 + 17) + 80)
                                                                          + 24))(*(void *)(*((void *)a5 + 17) + 80), *(void *)(*((void *)a5 + 17) + 88) + v56 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v57, v35);
        goto LABEL_51;
      }
    }
  }
LABEL_52:
  uint64_t v393 = a7;
  int v51 = *((_DWORD *)a5 + 1);
  int v50 = *((_DWORD *)a5 + 2);
  uint64_t v403 = v49;
  int v381 = v32;
  if (v434)
  {
    uint64_t v422 = 0;
    uint64_t v52 = (a2 - v51);
    if ((v52 & 0x80000000) == 0)
    {
      unsigned int v53 = a3 - v50;
      if (((a3 - v50) & 0x80000000) == 0)
      {
        uint64_t v422 = 0;
        unsigned int v54 = *a5;
        if (v52 < v54 && v53 < v54)
        {
          uint64_t v55 = (*(uint64_t (**)(void, unint64_t))(**((void **)a5 + 7) + 24))(*((void *)a5 + 7), v52 + a5[1] * (unint64_t)v53 + *((void *)a5 + 8));
          uint64_t v49 = v403;
          uint64_t v422 = v55;
          int v51 = *((_DWORD *)a5 + 1);
          int v50 = *((_DWORD *)a5 + 2);
        }
      }
    }
  }
  else
  {
    uint64_t v422 = v49;
  }
  uint64_t v59 = 0;
  uint64_t v60 = (1 << v17);
  uint64_t v61 = (a2 - v51);
  if ((v61 & 0x80000000) == 0)
  {
    unsigned int v62 = a3 - v50;
    if ((v62 & 0x80000000) == 0)
    {
      uint64_t v59 = 0;
      unsigned int v63 = *a5;
      if (v61 < v63 && v62 < v63) {
        uint64_t v59 = (char *)(*(void *)(*((void *)a5 + 17) + 56)
      }
                     + 2 * (v61 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v62));
    }
  }
  if (v434)
  {
    unsigned int v64 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v14[301] + 8 * v17 + 8))((1 << v17), (1 << v17), v417, v41, v422, v41);
    uint64_t v49 = v403;
    LODWORD(v444) = 0;
    *(void *)&long long v443 = v64;
    *((void *)&v443 + 1) = v64;
  }
  uint64_t v65 = v14[300];
  uint64_t __c = v41;
  if (v409)
  {
    unsigned int v66 = *(unsigned __int8 **)(v65 + 376);
    uint64_t v67 = *v66;
    uint64_t v68 = (*(uint64_t (**)(void, void))(**((void **)v66 + 10) + 24))(*((void *)v66 + 10), *((void *)v66 + 11));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 8144))(v60, v60, v405, v422, v67, v68);
    uint64_t v49 = v403;
    uint64_t v65 = v14[300];
  }
  *(_DWORD *)(v65 + 808) = a2;
  *(_DWORD *)(v65 + 812) = a3;
  unsigned int v69 = a2 - *((_DWORD *)a5 + 1);
  uint64_t v416 = a5;
  uint64_t v399 = v60;
  if ((v69 & 0x80000000) != 0 || (unsigned int v70 = a3 - *((_DWORD *)a5 + 2), (v70 & 0x80000000) != 0))
  {
    uint64_t v73 = a3;
    char v384 = 0;
    int v74 = 0;
    *(void *)(v65 + 864) = 0;
  }
  else
  {
    unint64_t v71 = 0;
    unint64_t v72 = *a5;
    if (v69 < v72 && v70 < v72) {
      unint64_t v71 = *((void *)a5 + 12) + 16 * ((v69 >> 2) + (v72 >> 2) * (unint64_t)(v70 >> 2));
    }
    *(void *)(v65 + 864) = v71;
    uint64_t v73 = a3;
    if (v40 & a11)
    {
      int v74 = *(unsigned __int8 *)(*(void *)(*((void *)a5 + 17) + 8)
                               + (v69 >> 2)
                               + ((unint64_t)**((unsigned __int8 **)a5 + 17) >> 2) * (v70 >> 2));
      char v384 = 1;
    }
    else
    {
      char v384 = 0;
      int v74 = 0;
    }
  }
  int v75 = v430;
  uint64_t v76 = v49;
  sub_1BBAB86E0((uint64_t)v14, a2, v73, v427, v417, __c, v422, v405, v49, v397, (uint64_t)v59, v391, v430, (unsigned char *)&v440 + 1, v74 != 0);
  *(void *)uint64_t v394 = v430 - 2;
  unint64_t v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14[301]
                                                                                            + 8 * *(void *)v394
                                                                                            + 24);
  uint64_t v78 = v14[300];
  *(_DWORD *)(v78 + 808) = a2;
  uint64_t v79 = v73;
  *(_DWORD *)(v78 + 812) = v73;
  *(void *)(v78 + 816) = v391;
  if (HIBYTE(v440))
  {
    uint64_t v382 = v77(v399, v399, v417, __c, v76, v397);
    *(void *)&long long v449 = v382;
    long long v80 = v33[10];
    long long v81 = v33[11];
    long long v82 = v33[8];
    *(long long *)((char *)v33 + 360) = v33[9];
    *(long long *)((char *)v33 + 376) = v80;
    *(long long *)((char *)v33 + 392) = v81;
    long long v83 = v33[6];
    long long v84 = v33[7];
    long long v85 = v33[4];
    *(long long *)((char *)v33 + 296) = v33[5];
    *(long long *)((char *)v33 + 312) = v83;
    *(long long *)((char *)v33 + 328) = v84;
    *(long long *)((char *)v33 + 344) = v82;
    long long v86 = *v33;
    *(long long *)((char *)v33 + 232) = v33[1];
    long long v87 = v33[3];
    *(long long *)((char *)v33 + 248) = v33[2];
    *(long long *)((char *)v33 + 264) = v87;
    *(long long *)((char *)v33 + 280) = v85;
    *((void *)v33 + 51) = *((void *)v33 + 24);
    *(long long *)((char *)v33 + 216) = v86;
    uint64_t v88 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
    *((void *)v33 + 4) = 0;
    *((void *)v33 + 1) = 510;
    *((void *)v33 + 2) = v88;
    if ((v384 & 1) == 0)
    {
      if (*(unsigned char *)(*(void *)(a1 + 2392) + 352))
      {
        unsigned int v89 = a2 - *((_DWORD *)v416 + 1);
        if ((v89 & 0x80000000) == 0)
        {
          unsigned int v90 = v73 - *((_DWORD *)v416 + 2);
          if ((v90 & 0x80000000) == 0)
          {
            unsigned int v91 = *v416;
            if (v89 < v91 && v90 < v91 && v430 >= 2)
            {
              unsigned int v92 = (unsigned __int8 *)*((void *)v416 + 17);
              unint64_t v93 = (unint64_t)*v92 >> 2;
              uint64_t v94 = (char *)(*((void *)v92 + 1) + (v89 >> 2) + v93 * (unint64_t)(v90 >> 2));
              uint64_t v95 = (int)v399 >> 2;
              do
              {
                --v95;
                bzero(v94, (int)v399 >> 2);
                v94 += v93;
              }
              while (v95);
            }
          }
        }
      }
    }
    int v14 = (void *)a1;
    *(void *)(*(void *)(a1 + 2400) + 872) = v59;
    if (*(unsigned char *)(*(void *)(a1 + 2392) + 352))
    {
      unint64_t v96 = 0;
      unsigned int v97 = a2 - *((_DWORD *)v416 + 1);
      if ((v97 & 0x80000000) == 0)
      {
        unsigned int v98 = v73 - *((_DWORD *)v416 + 2);
        if ((v98 & 0x80000000) == 0)
        {
          unint64_t v96 = 0;
          unsigned int v99 = *v416;
          if (v97 < v99 && v98 < v99) {
            unint64_t v96 = *(void *)(*((void *)v416 + 17) + 8)
          }
                + (v97 >> 2)
                + ((unint64_t)**((unsigned __int8 **)v416 + 17) >> 2) * (v98 >> 2);
        }
      }
      *(void *)(*(void *)(a1 + 2400) + 920) = v96;
    }
    sub_1BBAB5BB4(a1, a2, v73, v430, 0, 0);
    int v100 = 0;
    LODWORD(v450) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                  - *((_DWORD *)v33 + 2)
                  + 510;
    int v101 = v450;
    long long v102 = *(long long *)((char *)v33 + 328);
    v33[6] = *(long long *)((char *)v33 + 312);
    v33[7] = v102;
    long long v103 = *(long long *)((char *)v33 + 296);
    v33[4] = *(long long *)((char *)v33 + 280);
    v33[5] = v103;
    *((void *)v33 + 24) = *((void *)v33 + 51);
    long long v104 = *(long long *)((char *)v33 + 392);
    v33[10] = *(long long *)((char *)v33 + 376);
    v33[11] = v104;
    long long v105 = *(long long *)((char *)v33 + 360);
    v33[8] = *(long long *)((char *)v33 + 344);
    v33[9] = v105;
    long long v106 = *(long long *)((char *)v33 + 264);
    v33[2] = *(long long *)((char *)v33 + 248);
    v33[3] = v106;
    long long v107 = *(long long *)((char *)v33 + 232);
    *uint64_t v33 = *(long long *)((char *)v33 + 216);
    v33[1] = v107;
    unint64_t v108 = v382
         + ((v101 * *(unsigned __int16 *)(*(void *)(a1 + 2408) + 2 * SWORD2(v450) + 8)) >> (8 * (WORD2(v450) == 0)));
    *((void *)&v449 + 1) = v108;
    int v109 = 1;
    if (v434)
    {
      int v75 = v430;
      uint64_t v110 = __c;
      if (*((void *)&v443 + 1) < v108)
      {
        HIBYTE(v440) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2400) + 8144))(v399, v399, v405, v422, v397, v403);
        int v109 = 0;
        int v100 = 1;
      }
    }
    else
    {
      int v75 = v430;
      uint64_t v110 = __c;
    }
  }
  else if (v434)
  {
    int v109 = 0;
    int v100 = 1;
    uint64_t v110 = __c;
  }
  else
  {
    uint64_t v110 = __c;
    unsigned int v111 = v77(v399, v399, v417, __c, v422, v397);
    int v109 = 0;
    LODWORD(v444) = 0;
    *(void *)&long long v443 = v111;
    *((void *)&v443 + 1) = v111;
    uint64_t v450 = v444;
    long long v449 = v443;
    int v100 = 1;
  }
  if (v409)
  {
    int __ca = v109;
    uint64_t v112 = *(unsigned __int8 **)(v14[300] + 376);
    uint64_t v113 = *v112;
    uint64_t v114 = (*(uint64_t (**)(void, void))(**((void **)v112 + 10) + 24))(*((void *)v112 + 10), *((void *)v112 + 11));
    uint64_t v115 = v114;
    unsigned int v116 = *(char **)(*(void *)(v14[300] + 376) + 56);
    LOBYTE(v441) = 0;
    if (v100) {
      uint64_t v117 = &v443;
    }
    else {
      uint64_t v117 = &v449;
    }
    uint64_t v410 = *(void *)v117;
    uint64_t v118 = &v450;
    if (v100) {
      uint64_t v118 = &v444;
    }
    int v406 = *(_DWORD *)v118;
    uint64_t v119 = (char *)&v449 + 8;
    if (v100) {
      uint64_t v119 = (char *)&v443 + 8;
    }
    unint64_t v423 = *(void *)v119;
    int v120 = v79;
    sub_1BBAB86E0((uint64_t)v14, a2, v79, v427, v417, v110, v114, v113, v114, v113, (uint64_t)v116, v113, 2, &v441, 1);
    if ((_BYTE)v441)
    {
      unsigned int v121 = (*(uint64_t (**)(void))(v14[301] + 8 * *(void *)v394 + 24))();
      long long v122 = v33[6];
      long long v123 = v33[8];
      long long v124 = v33[9];
      *(long long *)((char *)v33 + 328) = v33[7];
      *(long long *)((char *)v33 + 344) = v123;
      long long v125 = v33[4];
      *(long long *)((char *)v33 + 296) = v33[5];
      *(long long *)((char *)v33 + 312) = v122;
      long long v126 = v33[11];
      *(long long *)((char *)v33 + 376) = v33[10];
      *(long long *)((char *)v33 + 392) = v126;
      *(void *)&long long v449 = v121;
      *(long long *)((char *)v33 + 360) = v124;
      long long v127 = v33[2];
      *(long long *)((char *)v33 + 264) = v33[3];
      *(long long *)((char *)v33 + 280) = v125;
      *(long long *)((char *)v33 + 248) = v127;
      long long v128 = *v33;
      *(long long *)((char *)v33 + 232) = v33[1];
      *((void *)v33 + 51) = *((void *)v33 + 24);
      *(long long *)((char *)v33 + 216) = v128;
      uint64_t v129 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
      *((void *)v33 + 4) = 0;
      *((void *)v33 + 1) = 510;
      *((void *)v33 + 2) = v129;
      int v130 = v416;
      unsigned int v131 = a2 - *((_DWORD *)v416 + 1);
      unsigned int v132 = v120 - *((_DWORD *)v416 + 2);
      uint64_t v418 = v121;
      uint64_t v385 = v115;
      if ((v131 & 0x80000000) == 0 && (v132 & 0x80000000) == 0)
      {
        unsigned int v133 = *v416;
        if (v131 < v133 && v132 < v133)
        {
          memset((void *)(*(void *)(*((void *)v416 + 17) + 8)+ (v131 >> 2)+ ((unint64_t)**((unsigned __int8 **)v416 + 17) >> 2) * (v132 >> 2)), 1, v399 >> 2);
          unsigned int v131 = a2 - *((_DWORD *)v416 + 1);
          unsigned int v132 = v120 - *((_DWORD *)v416 + 2);
        }
      }
      unint64_t v134 = 0;
      *(void *)(*(void *)(a1 + 2400) + 872) = v116;
      uint64_t v135 = *(void *)(a1 + 2400);
      *(void *)(v135 + 816) = v113;
      if ((v131 & 0x80000000) == 0 && (v132 & 0x80000000) == 0)
      {
        unint64_t v134 = 0;
        unsigned int v136 = *v416;
        if (v131 < v136 && v132 < v136) {
          unint64_t v134 = *(void *)(*((void *)v416 + 17) + 8)
        }
               + (v131 >> 2)
               + ((unint64_t)**((unsigned __int8 **)v416 + 17) >> 2) * (v132 >> 2);
      }
      LODWORD(v137) = v399 >> 2;
      *(void *)(v135 + 920) = v134;
      sub_1BBAB5BB4(a1, a2, v120, 2, 0, 0);
      LODWORD(v450) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                    - *((_DWORD *)v33 + 2)
                    + 510;
      int v138 = v450;
      long long v139 = *(long long *)((char *)v33 + 328);
      v33[6] = *(long long *)((char *)v33 + 312);
      v33[7] = v139;
      long long v140 = *(long long *)((char *)v33 + 296);
      v33[4] = *(long long *)((char *)v33 + 280);
      v33[5] = v140;
      *((void *)v33 + 24) = *((void *)v33 + 51);
      long long v141 = *(long long *)((char *)v33 + 392);
      v33[10] = *(long long *)((char *)v33 + 376);
      v33[11] = v141;
      long long v142 = *(long long *)((char *)v33 + 360);
      v33[8] = *(long long *)((char *)v33 + 344);
      v33[9] = v142;
      long long v143 = *(long long *)((char *)v33 + 264);
      v33[2] = *(long long *)((char *)v33 + 248);
      v33[3] = v143;
      long long v144 = *(long long *)((char *)v33 + 232);
      int v14 = (void *)a1;
      *uint64_t v33 = *(long long *)((char *)v33 + 216);
      v33[1] = v144;
      *((void *)&v449 + 1) = v418
                             + ((v138
                               * *(unsigned __int16 *)(*(void *)(a1 + 2408) + 2 * SWORD2(v450) + 8)) >> (8 * (WORD2(v450) == 0)));
      if (v423 > *((void *)&v449 + 1))
      {
        HIBYTE(v440) = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2400) + 8144))(v399, v399, v113, v385, v397, v403);
        uint64_t v145 = (int)v399;
        do
        {
          --v145;
          memcpy(v59, v116, 2 * (int)v399);
          v59 += 2 * v391;
          v116 += 2 * v113;
        }
        while (v145);
        int v109 = 1;
        int v75 = v430;
        int v14 = (void *)a1;
LABEL_139:
        uint64_t v146 = v393;
        goto LABEL_140;
      }
    }
    else
    {
      LODWORD(v137) = 1;
      int v130 = v416;
    }
    unsigned int v147 = a2 - *((_DWORD *)v130 + 1);
    int v75 = v430;
    if ((v147 & 0x80000000) == 0)
    {
      unsigned int v148 = v120 - *((_DWORD *)v130 + 2);
      if ((v148 & 0x80000000) == 0)
      {
        unsigned int v149 = *v130;
        if (v147 < v149 && v148 < v149)
        {
          uint64_t v150 = (unsigned __int8 *)*((void *)v130 + 17);
          unint64_t v151 = (unint64_t)*v150 >> 2;
          size_t v152 = v137;
          long long v153 = (char *)(*((void *)v150 + 1) + (v147 >> 2) + v151 * (unint64_t)(v148 >> 2));
          uint64_t v137 = v137;
          do
          {
            --v137;
            bzero(v153, v152);
            v153 += v151;
          }
          while (v137);
        }
      }
    }
    LODWORD(v450) = v406;
    *(void *)&long long v449 = v410;
    *((void *)&v449 + 1) = v423;
    int v109 = __ca;
    goto LABEL_139;
  }
  uint64_t v146 = v393;
  int v120 = v79;
  int v130 = v416;
LABEL_140:
  sub_1BBAE40E4(v130, a2, v120, 1 << SLOBYTE(v394[0]), 0, v109, 0);
  if (a9)
  {
    int v154 = *(unsigned __int8 *)(v14[298] + 2012);
    int v155 = a6 ? 0 : v75;
    int v156 = v75 > v154 ? v75 - 1 : v155;
    if (!a6 || v75 > v154)
    {
      if (*(unsigned char *)(v14[299] + 352)) {
        BOOL v157 = v156 == 2;
      }
      else {
        BOOL v157 = 0;
      }
      char v158 = !v157;
      int v159 = a10 | a11;
      if (!v157) {
        int v159 = 1;
      }
      int v400 = v159;
      uint64_t v160 = v130[1];
      int v161 = a10;
      if (a10)
      {
        uint64_t v162 = *(void *)(*(void *)(v14[297] + 1360) + 120);
        uint64_t v398 = *(unsigned __int8 *)(*((void *)v130 + 17) + 1);
      }
      else
      {
        uint64_t v398 = *(unsigned __int8 *)(*((void *)v130 + 17) + 1);
        uint64_t v162 = 2 * v398;
      }
      uint64_t v163 = 0;
      uint64_t v404 = v162;
      if (v434) {
        uint64_t v164 = v130[1];
      }
      else {
        uint64_t v164 = v162;
      }
      uint64_t v165 = (a2 - *((_DWORD *)v130 + 1));
      if ((v165 & 0x80000000) == 0)
      {
        unsigned int v166 = v120 - *((_DWORD *)v130 + 2);
        if ((v166 & 0x80000000) == 0)
        {
          uint64_t v163 = 0;
          unsigned int v167 = *v130;
          if (v165 < v167 && v166 < v167)
          {
            uint64_t v163 = (*(uint64_t (**)(void, unint64_t))(**((void **)v130 + 5) + 24))(*((void *)v130 + 5), v165 + v130[1] * (unint64_t)(v166 >> 1) + *((void *)v130 + 6));
            int v161 = a10;
          }
        }
      }
      uint64_t v407 = v163;
      if (v161)
      {
        uint64_t v168 = (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(v14[297] + 1360) + 16))(*(void *)(v14[297] + 1360), (a2 >> 1), (v120 >> 1), 1);
      }
      else
      {
        uint64_t v411 = 0;
        unsigned int v174 = a2 - *((_DWORD *)v130 + 1);
        if ((v174 & 0x80000000) != 0) {
          goto LABEL_171;
        }
        unsigned int v175 = v120 - *((_DWORD *)v130 + 2);
        if ((v175 & 0x80000000) != 0) {
          goto LABEL_171;
        }
        uint64_t v411 = 0;
        unsigned int v176 = *v130;
        if (v174 >= v176 || v175 >= v176) {
          goto LABEL_171;
        }
        uint64_t v168 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v130 + 17) + 96) + 24))(*(void *)(*((void *)v130 + 17) + 96), *(void *)(*((void *)v130 + 17) + 104)+ v174+ *(unsigned __int8 *)(*((void *)v130 + 17) + 1) * (unint64_t)(v175 & 0xFFFFFFFE));
      }
      uint64_t v411 = v168;
LABEL_171:
      int v170 = *((_DWORD *)v130 + 1);
      int v169 = *((_DWORD *)v130 + 2);
      if (v434)
      {
        uint64_t v424 = 0;
        uint64_t v171 = (a2 - v170);
        if ((v171 & 0x80000000) == 0)
        {
          unsigned int v172 = v120 - v169;
          if (((v120 - v169) & 0x80000000) == 0)
          {
            uint64_t v424 = 0;
            unsigned int v173 = *v130;
            if (v171 < v173 && v172 < v173)
            {
              uint64_t v424 = (*(uint64_t (**)(void, unint64_t))(**((void **)v130 + 9) + 24))(*((void *)v130 + 9), v171 + v130[1] * (unint64_t)(v172 >> 1) + *((void *)v130 + 10));
              int v170 = *((_DWORD *)v130 + 1);
              int v169 = *((_DWORD *)v130 + 2);
            }
          }
        }
      }
      else
      {
        uint64_t v424 = v411;
      }
      uint64_t v419 = v160;
      uint64_t v177 = 0;
      uint64_t v431 = (1 << v156);
      unsigned int v178 = a2 - v170;
      if ((v178 & 0x80000000) != 0) {
        goto LABEL_188;
      }
      unsigned int v179 = v120 - v169;
      int v180 = 0;
      if ((v179 & 0x80000000) != 0) {
        goto LABEL_189;
      }
      uint64_t v177 = 0;
      unsigned int v181 = *v130;
      if (v178 >= v181)
      {
LABEL_188:
        int v180 = 0;
      }
      else
      {
        int v180 = 0;
        if (v179 < v181)
        {
          uint64_t v182 = *((void *)v130 + 17);
          unint64_t v183 = (v178 >> 1) + *(unsigned __int8 *)(v182 + 1) * (unint64_t)(v179 >> 1);
          uint64_t v177 = (char *)(*(void *)(v182 + 64) + 2 * v183);
          int v180 = (char *)(*(void *)(v182 + 72) + 2 * v183);
        }
      }
LABEL_189:
      unsigned int __cb = v156;
      if ((v400 & 1) == 0)
      {
        uint64_t v184 = *(void *)(a1 + 2400);
        uint64_t v185 = *(unsigned __int8 **)(v184 + 376);
        uint64_t v186 = 2 * *v185;
        uint64_t v187 = (*(uint64_t (**)(void, void))(**((void **)v185 + 10) + 24))(*((void *)v185 + 10), *((void *)v185 + 11));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 8144))(8, v431, v164, v424, v186, v187);
      }
      if (v434)
      {
        uint64_t v188 = *(void *)(a1 + 2408);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, long long *))(v188 + 376))(v407, v419, v424, v419, v431, v431, &v445, &v447);
        uint64_t v189 = *(unsigned __int16 *)(v188 + 18);
        *(void *)&long long v445 = (unint64_t)(v445 * v189) >> 8;
        *(void *)&long long v447 = (unint64_t)(v447 * v189) >> 8;
        LODWORD(v446) = 0;
        LODWORD(v448) = 0;
      }
      uint64_t v190 = *(void *)(a1 + 2400);
      *(_DWORD *)(v190 + 808) = a2;
      *(_DWORD *)(v190 + 812) = v120;
      unsigned int v191 = a2 - *((_DWORD *)v130 + 1);
      if ((v191 & 0x80000000) != 0 || (unsigned int v192 = v120 - *((_DWORD *)v130 + 2), (v192 & 0x80000000) != 0))
      {
        char v197 = 0;
        int v198 = 0;
        *(void *)(v190 + 864) = 0;
        int v199 = 1;
        int v195 = __cb;
      }
      else
      {
        unint64_t v193 = 0;
        unint64_t v194 = *v130;
        int v195 = __cb;
        if (v191 >= v194)
        {
          unsigned __int8 v196 = a11;
        }
        else
        {
          unsigned __int8 v196 = a11;
          if (v192 < v194) {
            unint64_t v193 = *((void *)v130 + 12)
          }
                 + 16 * ((v191 >> 2) + (v194 >> 2) * (unint64_t)(v192 >> 2));
        }
        char v197 = 0;
        *(void *)(v190 + 864) = v193;
        char v200 = v158 | v196 ^ 1;
        int v199 = 1;
        int v198 = 0;
        if ((v200 & 1) == 0 && (a10 & 1) == 0)
        {
          int v199 = 0;
          uint64_t v201 = *((void *)v130 + 17);
          unint64_t v202 = (v191 >> 3) + ((unint64_t)*(unsigned __int8 *)(v201 + 1) >> 2) * (v192 >> 3);
          uint64_t v203 = *(void *)(v201 + 24);
          char v197 = *(unsigned char *)(*(void *)(v201 + 16) + v202) != 0;
          int v198 = *(unsigned __int8 *)(v203 + v202);
        }
      }
      sub_1BBABC324((void *)a1, a2, v120, v195, v427, v407, v419, v424, v164, v411, v404, (uint64_t)v177, (uint64_t)v180, v398, (BOOL *)&v440, &v439, v197, v198 != 0);
      uint64_t v204 = *(void *)(a1 + 2408);
      *(void *)(*(void *)(a1 + 2400) + 824) = v398;
      int v205 = v440;
      int v206 = v439;
      if (!(_BYTE)v440 && !v439 && v434)
      {
LABEL_254:
        if (v400)
        {
          int v273 = v439;
          int v274 = v440;
          int v14 = (void *)a1;
          uint64_t v146 = v393;
          int v275 = a2;
LABEL_326:
          char v363 = __cb - 2;
          if (v146)
          {
            uint64_t v364 = &v451;
            if (!v274) {
              uint64_t v364 = &v445;
            }
            uint64_t v365 = *(void *)v146 + *(void *)v364;
            uint64_t v366 = &v452;
            if (!v274) {
              uint64_t v366 = &v446;
            }
            int v367 = *(_DWORD *)(v146 + 16) + *(_DWORD *)v366;
            uint64_t v368 = &v453;
            if (!v273) {
              uint64_t v368 = &v447;
            }
            *(void *)uint64_t v146 = *(void *)v368 + v365;
            unint64_t v369 = v454;
            if (!v273) {
              unint64_t v369 = &v448;
            }
            *(_DWORD *)(v146 + 16) = *(_DWORD *)v369 + v367;
          }
          int v370 = 1 << v363;
          sub_1BBAE40E4(v130, v275, v120, 1 << v363, 1, v274, 0);
          sub_1BBAE40E4(v130, v275, v120, v370, 2, v273, 0);
          goto LABEL_337;
        }
        int v276 = *(unsigned __int8 **)(*(void *)(a1 + 2400) + 376);
        uint64_t v277 = *v276;
        uint64_t v278 = (*(uint64_t (**)(void, void))(**((void **)v276 + 10) + 24))(*((void *)v276 + 10), *((void *)v276 + 11));
        uint64_t v279 = *(void *)(*(void *)(a1 + 2400) + 376);
        unint64_t v281 = *(char **)(v279 + 56);
        int v280 = *(char **)(v279 + 64);
        BOOL v438 = 0;
        unsigned __int8 v437 = 0;
        unint64_t v282 = &v451;
        int v396 = v440;
        if (!(_BYTE)v440) {
          unint64_t v282 = &v445;
        }
        *(void *)&long long v390 = *(void *)v282;
        __int16 v283 = &v452;
        if (!(_BYTE)v440) {
          __int16 v283 = &v446;
        }
        int v388 = *(_DWORD *)v283;
        int v284 = (char *)&v451 + 8;
        if (!(_BYTE)v440) {
          int v284 = (char *)&v445 + 8;
        }
        *((void *)&v390 + 1) = *(void *)v284;
        uint64_t v401 = 2 * v277;
        int v425 = v120;
        uint64_t v387 = v278;
        sub_1BBABC324((void *)a1, a2, v120, 2, v427, v407, v419, v278, 2 * v277, v278, 2 * v277, (uint64_t)v281, (uint64_t)v280, v277, &v438, &v437, 1, 1);
        *(void *)(*(void *)(a1 + 2400) + 824) = v277;
        BOOL v285 = v438;
        int v386 = (int)v431 >> 2;
        int v428 = v437;
        if (!(v438 | v437)) {
          goto LABEL_278;
        }
        uint64_t v286 = *(void *)(a1 + 2408);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v286 + 376))(v407, v419, v387, v401, v431, v431, &v441, &v442);
        uint64_t v287 = *(unsigned __int16 *)(v286 + 18);
        int v130 = v416;
        unint64_t v288 = (v441 * v287) >> 8;
        unint64_t v441 = v288;
        unint64_t v442 = (v442 * v287) >> 8;
        if (!v285) {
          goto LABEL_278;
        }
        long long v289 = v33[6];
        long long v290 = v33[8];
        long long v291 = v33[9];
        *(long long *)((char *)v33 + 328) = v33[7];
        *(long long *)((char *)v33 + 344) = v290;
        long long v292 = v33[4];
        *(long long *)((char *)v33 + 296) = v33[5];
        *(long long *)((char *)v33 + 312) = v289;
        long long v293 = v33[11];
        *(long long *)((char *)v33 + 376) = v33[10];
        *(long long *)((char *)v33 + 392) = v293;
        unint64_t v294 = v288;
        *(void *)&long long v451 = v288;
        *(long long *)((char *)v33 + 360) = v291;
        long long v295 = v33[2];
        *(long long *)((char *)v33 + 264) = v33[3];
        *(long long *)((char *)v33 + 280) = v292;
        *(long long *)((char *)v33 + 248) = v295;
        long long v296 = *v33;
        *(long long *)((char *)v33 + 232) = v33[1];
        *((void *)v33 + 51) = *((void *)v33 + 24);
        *(long long *)((char *)v33 + 216) = v296;
        uint64_t v297 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
        *((void *)v33 + 4) = 0;
        *((void *)v33 + 1) = 510;
        *((void *)v33 + 2) = v297;
        unsigned int v298 = a2 - *((_DWORD *)v416 + 1);
        unsigned int v299 = v120 - *((_DWORD *)v416 + 2);
        if ((v298 & 0x80000000) == 0 && (v299 & 0x80000000) == 0)
        {
          unsigned int v300 = *v416;
          if (v298 < v300 && v299 < v300)
          {
            memset((void *)(*(void *)(*((void *)v416 + 17) + 16)+ (v298 >> 3)+ ((unint64_t)*(unsigned __int8 *)(*((void *)v416 + 17) + 1) >> 2) * (v299 >> 3)), 1, v431 >> 2);
            unsigned int v298 = a2 - *((_DWORD *)v416 + 1);
            unsigned int v299 = v120 - *((_DWORD *)v416 + 2);
          }
        }
        unint64_t v301 = 0;
        *(void *)(*(void *)(a1 + 2400) + 880) = v281;
        if ((v298 & 0x80000000) == 0 && (v299 & 0x80000000) == 0)
        {
          unint64_t v301 = 0;
          unsigned int v302 = *v416;
          if (v298 < v302 && v299 < v302) {
            unint64_t v301 = *(void *)(*((void *)v416 + 17) + 16)
          }
                 + (v298 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((void *)v416 + 17) + 1) >> 2) * (v299 >> 3);
        }
        *(void *)(*(void *)(a1 + 2400) + 928) = v301;
        sub_1BBAB5BB4(a1, a2, v120, 2, 0, 1);
        LODWORD(v452) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                      - *((_DWORD *)v33 + 2)
                      + 510;
        int v303 = v452;
        long long v304 = *(long long *)((char *)v33 + 328);
        v33[6] = *(long long *)((char *)v33 + 312);
        v33[7] = v304;
        long long v305 = *(long long *)((char *)v33 + 296);
        v33[4] = *(long long *)((char *)v33 + 280);
        v33[5] = v305;
        *((void *)v33 + 24) = *((void *)v33 + 51);
        long long v306 = *(long long *)((char *)v33 + 392);
        v33[10] = *(long long *)((char *)v33 + 376);
        v33[11] = v306;
        long long v307 = *(long long *)((char *)v33 + 360);
        v33[8] = *(long long *)((char *)v33 + 344);
        v33[9] = v307;
        long long v308 = *(long long *)((char *)v33 + 264);
        v33[2] = *(long long *)((char *)v33 + 248);
        v33[3] = v308;
        long long v309 = *(long long *)((char *)v33 + 232);
        *uint64_t v33 = *(long long *)((char *)v33 + 216);
        v33[1] = v309;
        *((void *)&v451 + 1) = v294
                               + ((v303
                                 * *(unsigned __int16 *)(*(void *)(a1 + 2408) + 2 * SWORD2(v452) + 8)) >> (8 * (WORD2(v452) == 0)));
        int v130 = v416;
        if (*((void *)&v390 + 1) > *((void *)&v451 + 1))
        {
          LOBYTE(v440) = 1;
          uint64_t v310 = v401;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2400) + 8152))(8, v431, v401, v387, v404, v411);
          uint64_t v311 = (int)v431;
          do
          {
            --v311;
            memcpy(v177, v281, 2 * (int)v431);
            v177 += 2 * v398;
            v281 += v401;
          }
          while (v311);
          int v396 = 1;
          int v14 = (void *)a1;
        }
        else
        {
LABEL_278:
          unsigned int v312 = a2 - *((_DWORD *)v130 + 1);
          if ((v312 & 0x80000000) == 0)
          {
            unsigned int v313 = v120 - *((_DWORD *)v416 + 2);
            if ((v313 & 0x80000000) == 0)
            {
              unsigned int v314 = *v416;
              if (v312 < v314 && v313 < v314)
              {
                uint64_t v315 = *((void *)v416 + 17);
                unint64_t v316 = (unint64_t)*(unsigned __int8 *)(v315 + 1) >> 2;
                double v317 = (char *)(*(void *)(v315 + 16) + (v312 >> 3)
                                                       + v316 * (unint64_t)(v313 >> 3));
                uint64_t v318 = v386;
                do
                {
                  --v318;
                  bzero(v317, v386);
                  v317 += v316;
                }
                while (v318);
              }
            }
          }
          LODWORD(v452) = v388;
          long long v451 = v390;
          int v14 = (void *)a1;
          uint64_t v310 = v401;
        }
        int v273 = v439;
        int v319 = &v453;
        if (!v439) {
          int v319 = &v447;
        }
        uint64_t v420 = *(void *)v319;
        long long v320 = v454;
        if (!v439) {
          long long v320 = &v448;
        }
        int v412 = *(_DWORD *)v320;
        long long v321 = (char *)&v453 + 8;
        if (!v439) {
          long long v321 = (char *)&v447 + 8;
        }
        int v130 = v416;
        if (v428)
        {
          unint64_t v322 = *(void *)v321;
          long long v323 = v33[6];
          long long v324 = v33[8];
          long long v325 = v33[9];
          *(long long *)((char *)v33 + 328) = v33[7];
          *(long long *)((char *)v33 + 344) = v324;
          long long v326 = v33[4];
          *(long long *)((char *)v33 + 296) = v33[5];
          *(long long *)((char *)v33 + 312) = v323;
          long long v327 = v33[11];
          *(long long *)((char *)v33 + 376) = v33[10];
          *(long long *)((char *)v33 + 392) = v327;
          unint64_t v429 = v442;
          *(void *)&long long v453 = v442;
          *(long long *)((char *)v33 + 360) = v325;
          long long v328 = v33[2];
          *(long long *)((char *)v33 + 264) = v33[3];
          *(long long *)((char *)v33 + 280) = v326;
          *(long long *)((char *)v33 + 248) = v328;
          long long v329 = *v33;
          *(long long *)((char *)v33 + 232) = v33[1];
          *((void *)v33 + 51) = *((void *)v33 + 24);
          *(long long *)((char *)v33 + 216) = v329;
          uint64_t v330 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
          *((void *)v33 + 4) = 0;
          *((void *)v33 + 1) = 510;
          *((void *)v33 + 2) = v330;
          unsigned int v331 = a2 - *((_DWORD *)v416 + 1);
          unsigned int v332 = v120 - *((_DWORD *)v416 + 2);
          if ((v331 & 0x80000000) == 0 && (v332 & 0x80000000) == 0)
          {
            unsigned int v333 = *v416;
            if (v331 < v333 && v332 < v333)
            {
              unint64_t v402 = v322;
              uint64_t v334 = *((void *)v416 + 17);
              unint64_t v335 = (unint64_t)*(unsigned __int8 *)(v334 + 1) >> 2;
              long long v336 = (char *)(*(void *)(v334 + 24) + (v331 >> 3) + v335 * (unint64_t)(v332 >> 3));
              uint64_t v337 = v386;
              do
              {
                --v337;
                memset(v336, 1, v386);
                v336 += v335;
              }
              while (v337);
              int v130 = v416;
              unsigned int v331 = a2 - *((_DWORD *)v416 + 1);
              unsigned int v332 = v120 - *((_DWORD *)v416 + 2);
              int v14 = (void *)a1;
              unint64_t v322 = v402;
            }
          }
          unint64_t v338 = 0;
          *(void *)(v14[300] + 888) = v280;
          if ((v331 & 0x80000000) == 0 && (v332 & 0x80000000) == 0)
          {
            unsigned int v339 = *v130;
            if (v331 >= v339 || v332 >= v339) {
              unint64_t v338 = 0;
            }
            else {
              unint64_t v338 = *(void *)(*((void *)v130 + 17) + 24)
            }
                   + (v331 >> 3)
                   + ((unint64_t)*(unsigned __int8 *)(*((void *)v130 + 17) + 1) >> 2) * (v332 >> 3);
          }
          *(void *)(v14[300] + 936) = v338;
          int v341 = a2;
          sub_1BBAB5BB4((uint64_t)v14, a2, v425, 2, 0, 2);
          LODWORD(v454[0]) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                           - *((_DWORD *)v33 + 2)
                           + 510;
          int v342 = v454[0];
          long long v343 = *(long long *)((char *)v33 + 328);
          v33[6] = *(long long *)((char *)v33 + 312);
          v33[7] = v343;
          long long v344 = *(long long *)((char *)v33 + 296);
          v33[4] = *(long long *)((char *)v33 + 280);
          v33[5] = v344;
          *((void *)v33 + 24) = *((void *)v33 + 51);
          long long v345 = *(long long *)((char *)v33 + 392);
          v33[10] = *(long long *)((char *)v33 + 376);
          v33[11] = v345;
          long long v346 = *(long long *)((char *)v33 + 360);
          v33[8] = *(long long *)((char *)v33 + 344);
          v33[9] = v346;
          long long v347 = *(long long *)((char *)v33 + 264);
          v33[2] = *(long long *)((char *)v33 + 248);
          v33[3] = v347;
          long long v348 = *(long long *)((char *)v33 + 232);
          *uint64_t v33 = *(long long *)((char *)v33 + 216);
          v33[1] = v348;
          if (v322 > v429
                    + ((v342 * *(unsigned __int16 *)(v14[301] + 2 * SWORD2(v454[0]) + 8)) >> (8 * (WORD2(v454[0]) == 0))))
          {
            unsigned __int8 v439 = 1;
            uint64_t v349 = v14[300];
            uint64_t v350 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(v349 + 376) + 80) + 24))(*(void *)(*(void *)(v349 + 376) + 80), *(void *)(*(void *)(v349 + 376) + 88) + 1);
            uint64_t v351 = 0;
            unsigned int v352 = a2 - *((_DWORD *)v130 + 1) + 1;
            if ((v352 & 0x80000000) != 0)
            {
              int v120 = v425;
            }
            else
            {
              int v120 = v425;
              unsigned int v353 = v425 - *((_DWORD *)v130 + 2);
              if ((v353 & 0x80000000) == 0)
              {
                uint64_t v351 = 0;
                unsigned int v354 = *v130;
                if (v352 < v354 && v353 < v354) {
                  uint64_t v351 = (*(uint64_t (**)(void, unint64_t))(**(void **)(*((void *)v130 + 17)
                }
                                                                                           + 96)
                                                                             + 24))(*(void *)(*((void *)v130 + 17) + 96), *(void *)(*((void *)v130 + 17) + 104)+ v352+ *(unsigned __int8 *)(*((void *)v130 + 17) + 1) * (unint64_t)(v353 & 0xFFFFFFFE));
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v349 + 8152))(8, v431, v310, v350, v404, v351);
            uint64_t v362 = (int)v431;
            do
            {
              --v362;
              memcpy(v180, v280, 2 * (int)v431);
              v180 += 2 * v398;
              v280 += v310;
            }
            while (v362);
            int v273 = 1;
LABEL_325:
            uint64_t v146 = v393;
            int v275 = a2;
            int v274 = v396;
            goto LABEL_326;
          }
        }
        else
        {
          int v341 = a2;
        }
        unsigned int v355 = v341 - *((_DWORD *)v130 + 1);
        int v120 = v425;
        if ((v355 & 0x80000000) == 0)
        {
          unsigned int v356 = v425 - *((_DWORD *)v130 + 2);
          if ((v356 & 0x80000000) == 0)
          {
            unsigned int v357 = *v130;
            if (v355 < v357 && v356 < v357)
            {
              uint64_t v358 = *((void *)v130 + 17);
              unint64_t v359 = (unint64_t)*(unsigned __int8 *)(v358 + 1) >> 2;
              unint64_t v360 = (char *)(*(void *)(v358 + 24) + (v355 >> 3) + v359 * (unint64_t)(v356 >> 3));
              uint64_t v361 = v386;
              do
              {
                --v361;
                bzero(v360, v386);
                v360 += v359;
              }
              while (v361);
            }
          }
        }
        *(void *)&long long v453 = v420;
        LODWORD(v454[0]) = v412;
        goto LABEL_325;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v204 + 376))(v407, v419, v411, v404, v431, v431, &v441, &v442);
      uint64_t v207 = *(unsigned __int16 *)(v204 + 18);
      unint64_t v208 = (v441 * v207) >> 8;
      unint64_t v209 = (v442 * v207) >> 8;
      unint64_t v441 = v208;
      unint64_t v442 = v209;
      if (v205)
      {
        int v389 = v206;
        unint64_t v392 = v208;
        *(void *)&long long v451 = v208;
        long long v210 = v33[10];
        long long v211 = v33[11];
        long long v212 = v33[8];
        *(long long *)((char *)v33 + 360) = v33[9];
        *(long long *)((char *)v33 + 376) = v210;
        *(long long *)((char *)v33 + 392) = v211;
        long long v213 = v33[6];
        long long v214 = v33[7];
        long long v215 = v33[4];
        *(long long *)((char *)v33 + 296) = v33[5];
        *(long long *)((char *)v33 + 312) = v213;
        *(long long *)((char *)v33 + 328) = v214;
        *(long long *)((char *)v33 + 344) = v212;
        long long v216 = *v33;
        *(long long *)((char *)v33 + 232) = v33[1];
        long long v217 = v33[3];
        *(long long *)((char *)v33 + 248) = v33[2];
        *(long long *)((char *)v33 + 264) = v217;
        *(long long *)((char *)v33 + 280) = v215;
        *((void *)v33 + 51) = *((void *)v33 + 24);
        *(long long *)((char *)v33 + 216) = v216;
        uint64_t v218 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
        *((void *)v33 + 4) = 0;
        *((void *)v33 + 1) = 510;
        *((void *)v33 + 2) = v218;
        if (v199)
        {
          if (*(unsigned char *)(*(void *)(a1 + 2392) + 352))
          {
            unsigned int v219 = a2 - *((_DWORD *)v130 + 1);
            if ((v219 & 0x80000000) == 0)
            {
              unsigned int v220 = v120 - *((_DWORD *)v130 + 2);
              if ((v220 & 0x80000000) == 0)
              {
                unsigned int v221 = *v130;
                if (v219 < v221 && v220 < v221 && __cb >= 2)
                {
                  uint64_t v222 = *((void *)v130 + 17);
                  unint64_t v223 = (unint64_t)*(unsigned __int8 *)(v222 + 1) >> 2;
                  uint64_t v224 = (char *)(*(void *)(v222 + 16)
                                + (v219 >> 3)
                                + v223 * (unint64_t)(v220 >> 3));
                  uint64_t v225 = (int)v431 >> 2;
                  do
                  {
                    --v225;
                    bzero(v224, (int)v431 >> 2);
                    v224 += v223;
                  }
                  while (v225);
                }
              }
            }
          }
        }
        uint64_t v226 = a1;
        *(void *)(*(void *)(a1 + 2400) + 880) = v177;
        int v227 = v389;
        if (*(unsigned char *)(*(void *)(a1 + 2392) + 352))
        {
          unint64_t v228 = 0;
          unsigned int v229 = a2 - *((_DWORD *)v130 + 1);
          if ((v229 & 0x80000000) == 0)
          {
            unsigned int v230 = v120 - *((_DWORD *)v130 + 2);
            if ((v230 & 0x80000000) == 0)
            {
              unint64_t v228 = 0;
              unsigned int v231 = *v130;
              if (v229 < v231 && v230 < v231) {
                unint64_t v228 = *(void *)(*((void *)v130 + 17) + 16)
              }
                     + (v229 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((void *)v130 + 17) + 1) >> 2) * (v230 >> 3);
            }
          }
          uint64_t v226 = a1;
          *(void *)(*(void *)(a1 + 2400) + 928) = v228;
        }
        sub_1BBAB5BB4(v226, a2, v120, __cb, 0, 1);
        LODWORD(v452) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                      - *((_DWORD *)v33 + 2)
                      + 510;
        int v232 = v452;
        long long v233 = *(long long *)((char *)v33 + 328);
        v33[6] = *(long long *)((char *)v33 + 312);
        v33[7] = v233;
        long long v234 = *(long long *)((char *)v33 + 296);
        v33[4] = *(long long *)((char *)v33 + 280);
        v33[5] = v234;
        *((void *)v33 + 24) = *((void *)v33 + 51);
        long long v235 = *(long long *)((char *)v33 + 392);
        v33[10] = *(long long *)((char *)v33 + 376);
        v33[11] = v235;
        long long v236 = *(long long *)((char *)v33 + 360);
        v33[8] = *(long long *)((char *)v33 + 344);
        v33[9] = v236;
        long long v237 = *(long long *)((char *)v33 + 264);
        v33[2] = *(long long *)((char *)v33 + 248);
        v33[3] = v237;
        long long v238 = *(long long *)((char *)v33 + 232);
        *uint64_t v33 = *(long long *)((char *)v33 + 216);
        v33[1] = v238;
        uint64_t v239 = *(void *)(v226 + 2408) + 8;
        unint64_t v240 = v392
             + ((v232 * *(unsigned __int16 *)(v239 + 2 * SWORD2(v452))) >> (8 * (WORD2(v452) == 0)));
        *((void *)&v451 + 1) = v240;
        unint64_t v241 = v445
             + ((v446 * *(unsigned __int16 *)(v239 + 2 * SWORD2(v446))) >> (8 * (WORD2(v446) == 0)));
        *((void *)&v445 + 1) = v241;
        if (v434 && v241 < v240)
        {
          LOBYTE(v440) = 0;
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2400) + 8152))((2 << __cb), v431, v419, v424, v404, v411);
          int v227 = v439;
        }
        if (v227)
        {
          unint64_t v209 = v442;
          goto LABEL_231;
        }
        if (v434) {
          goto LABEL_254;
        }
        unint64_t v209 = v442;
      }
      else
      {
        if (v434)
        {
          if (!v206) {
            goto LABEL_254;
          }
          goto LABEL_231;
        }
        *(void *)&long long v445 = v208;
        LODWORD(v446) = 0;
        long long v451 = v445;
        uint64_t v452 = v446;
        if (v206)
        {
LABEL_231:
          *(void *)uint64_t v395 = v209;
          *(void *)&long long v453 = v209;
          long long v242 = v33[10];
          long long v243 = v33[11];
          long long v244 = v33[8];
          *(long long *)((char *)v33 + 360) = v33[9];
          *(long long *)((char *)v33 + 376) = v242;
          *(long long *)((char *)v33 + 392) = v243;
          long long v245 = v33[6];
          long long v246 = v33[7];
          long long v247 = v33[4];
          *(long long *)((char *)v33 + 296) = v33[5];
          *(long long *)((char *)v33 + 312) = v245;
          *(long long *)((char *)v33 + 328) = v246;
          *(long long *)((char *)v33 + 344) = v244;
          long long v248 = *v33;
          *(long long *)((char *)v33 + 232) = v33[1];
          long long v249 = v33[3];
          *(long long *)((char *)v33 + 248) = v33[2];
          *(long long *)((char *)v33 + 264) = v249;
          *(long long *)((char *)v33 + 280) = v247;
          *((void *)v33 + 51) = *((void *)v33 + 24);
          *(long long *)((char *)v33 + 216) = v248;
          uint64_t v250 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
          *((void *)v33 + 4) = 0;
          *((void *)v33 + 1) = 510;
          *((void *)v33 + 2) = v250;
          if (v199)
          {
            if (*(unsigned char *)(*(void *)(a1 + 2392) + 352))
            {
              unsigned int v251 = a2 - *((_DWORD *)v130 + 1);
              if ((v251 & 0x80000000) == 0)
              {
                unsigned int v252 = v120 - *((_DWORD *)v130 + 2);
                if ((v252 & 0x80000000) == 0)
                {
                  unsigned int v253 = *v130;
                  if (v251 < v253 && v252 < v253 && __cb >= 2)
                  {
                    uint64_t v254 = *((void *)v130 + 17);
                    unint64_t v255 = (unint64_t)*(unsigned __int8 *)(v254 + 1) >> 2;
                    long long v256 = (char *)(*(void *)(v254 + 24)
                                  + (v251 >> 3)
                                  + v255 * (unint64_t)(v252 >> 3));
                    uint64_t v257 = (int)v431 >> 2;
                    do
                    {
                      --v257;
                      bzero(v256, (int)v431 >> 2);
                      v256 += v255;
                    }
                    while (v257);
                  }
                }
              }
            }
          }
          uint64_t v258 = a1;
          *(void *)(*(void *)(a1 + 2400) + 888) = v180;
          if (*(unsigned char *)(*(void *)(a1 + 2392) + 352))
          {
            unint64_t v259 = 0;
            unsigned int v260 = a2 - *((_DWORD *)v130 + 1);
            if ((v260 & 0x80000000) == 0)
            {
              unsigned int v261 = v120 - *((_DWORD *)v130 + 2);
              if ((v261 & 0x80000000) == 0)
              {
                unint64_t v259 = 0;
                unsigned int v262 = *v130;
                if (v260 < v262 && v261 < v262) {
                  unint64_t v259 = *(void *)(*((void *)v130 + 17) + 24)
                }
                       + (v260 >> 3)
                       + ((unint64_t)*(unsigned __int8 *)(*((void *)v130 + 17) + 1) >> 2) * (v261 >> 3);
              }
            }
            uint64_t v258 = a1;
            *(void *)(*(void *)(a1 + 2400) + 936) = v259;
          }
          sub_1BBAB5BB4(v258, a2, v120, __cb, 0, 2);
          LODWORD(v454[0]) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                           - *((_DWORD *)v33 + 2)
                           + 510;
          int v263 = v454[0];
          long long v264 = *(long long *)((char *)v33 + 328);
          v33[6] = *(long long *)((char *)v33 + 312);
          v33[7] = v264;
          long long v265 = *(long long *)((char *)v33 + 296);
          v33[4] = *(long long *)((char *)v33 + 280);
          v33[5] = v265;
          *((void *)v33 + 24) = *((void *)v33 + 51);
          long long v266 = *(long long *)((char *)v33 + 392);
          v33[10] = *(long long *)((char *)v33 + 376);
          v33[11] = v266;
          long long v267 = *(long long *)((char *)v33 + 360);
          v33[8] = *(long long *)((char *)v33 + 344);
          v33[9] = v267;
          long long v268 = *(long long *)((char *)v33 + 264);
          v33[2] = *(long long *)((char *)v33 + 248);
          v33[3] = v268;
          long long v269 = *(long long *)((char *)v33 + 232);
          *uint64_t v33 = *(long long *)((char *)v33 + 216);
          v33[1] = v269;
          uint64_t v270 = *(void *)(v258 + 2408) + 8;
          unint64_t v271 = *(void *)v395
               + ((v263 * *(unsigned __int16 *)(v270 + 2 * SWORD2(v454[0]))) >> (8
                                                                                               * (WORD2(v454[0]) == 0)));
          *((void *)&v453 + 1) = v271;
          unint64_t v272 = v447
               + ((v448 * *(unsigned __int16 *)(v270 + 2 * SWORD2(v448))) >> (8 * (WORD2(v448) == 0)));
          *((void *)&v447 + 1) = v272;
          if (v434 && v272 < v271)
          {
            unsigned __int8 v439 = 0;
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 2400) + 8152))((2 << __cb), v431, v419, v424 + v381, v404, v411 + v381);
          }
          goto LABEL_254;
        }
      }
      *(void *)&long long v447 = v209;
      LODWORD(v448) = 0;
      long long v453 = v447;
      v454[0] = v448;
      goto LABEL_254;
    }
  }
LABEL_337:
  if (v146)
  {
    BOOL v371 = HIBYTE(v440) == 0;
    if (HIBYTE(v440)) {
      unint64_t v372 = &v449;
    }
    else {
      unint64_t v372 = &v443;
    }
    uint64_t v373 = *(void *)v146 + *(void *)v372;
    *(void *)uint64_t v146 = v373;
    int v374 = &v450;
    if (v371) {
      int v374 = &v444;
    }
    int v375 = *(_DWORD *)(v146 + 16) + *(_DWORD *)v374;
    *(_DWORD *)(v146 + 16) = v375;
    *(void *)(v146 + 8) = v373
                          + ((v375 * *(unsigned __int16 *)(v14[301] + 2 * *(__int16 *)(v146 + 20) + 8)) >> (8 * (*(_WORD *)(v146 + 20) == 0)));
  }
  if (a8 && v434)
  {
    int v376 = *(_DWORD *)(a8 + 16) + v444;
    int v377 = v446;
    uint64_t v378 = v447 + v445 + *(void *)a8 + v443;
    *(void *)a8 = v378;
    int v379 = v448 + v377 + v376;
    *(_DWORD *)(a8 + 16) = v379;
    *(void *)(a8 + 8) = v378
                        + ((v379 * *(unsigned __int16 *)(v14[301] + 2 * *(__int16 *)(a8 + 20) + 8)) >> (8 * (*(_WORD *)(a8 + 20) == 0)));
  }
  return HIBYTE(v440) | v440 || v439 != 0;
}

uint64_t sub_1BBAC7488(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 2400);
  uint64_t v5 = *(void *)(v4 + 856);
  uint64_t v6 = *(void *)(v4 + 832);
  int v7 = a2 - *(_DWORD *)(v4 + 808);
  int v8 = a3 - *(_DWORD *)(v4 + 812);
  if (((*(unsigned __int16 *)(v5 + 2 * (v6 * ((uint64_t)v8 >> 3) + (v7 >> 3))) >> 2) & 3) <= a4)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    LODWORD(v9) = a4;
    uint64_t v10 = a3;
    uint64_t v11 = a2;
    uint64_t v20 = *(void *)(a1 + 2400);
    int v12 = 0;
    int v13 = ~(*(_DWORD *)(a1 + 2432) + a4) + *(unsigned __int8 *)(*(void *)(a1 + 2384) + 2009);
    int v21 = *(_DWORD *)(v4 + 812);
    int v22 = *(_DWORD *)(v4 + 808);
    do
    {
      int v24 = v12;
      uint64_t v14 = ((1 << v13) + v11);
      uint64_t v15 = ((1 << v13) + v10);
      uint64_t v9 = (v9 + 1);
      int v16 = sub_1BBAC7488(a1, v11, v10, v9, 0);
      int v17 = v16 | sub_1BBAC7488(a1, v14, v10, v9, 1);
      int v18 = sub_1BBAC7488(a1, v11, v15, v9, 2);
      int v7 = v14 - v22;
      int v8 = v15 - v21;
      int v12 = v24 | v18 | v17;
      --v13;
      uint64_t v10 = v15;
      uint64_t v11 = v14;
    }
    while ((int)v9 < ((*(unsigned __int16 *)(v5 + 2 * (v6 * ((uint64_t)((int)v15 - v21) >> 3) + (((int)v14 - v22) >> 3))) >> 2) & 3));
    uint64_t v4 = v20;
  }
  return v12 & 1 | (*(unsigned char *)(*(void *)(v4 + 896)
                                           + (*(uint64_t *)(v4 + 816) >> 2) * ((uint64_t)v8 >> 2)
                                           + (v7 >> 2)) != 0);
}

uint64_t sub_1BBAC762C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a6)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        for (unint64_t i = 0; i < v7; i += 32)
        {
          uint16x8_t v10 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 16), 6uLL);
          uint16x8_t v11 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 32), 6uLL);
          uint16x8_t v12 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 48), 6uLL);
          int v13 = (uint16x8_t *)(result + v8);
          *int v13 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8), 6uLL);
          v13[1] = v10;
          v13[2] = v11;
          v13[3] = v12;
          v8 += 64;
        }
      }
      else
      {
        LODWORD(i) = 0;
      }
      unint64_t i = i;
      if (i < a5)
      {
        uint64_t v14 = 2 * i;
        do
        {
          *(uint16x8_t *)(result + v14) = vshrq_n_u16(*(uint16x8_t *)(a3 + v14), 6uLL);
          i += 8;
          v14 += 16;
        }
        while (i < a5);
      }
      ++v6;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1BBAC76D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a6)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        for (unint64_t i = 0; i < v7; i += 32)
        {
          int16x8_t v10 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 16), 6uLL);
          int16x8_t v11 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 32), 6uLL);
          int16x8_t v12 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 48), 6uLL);
          int v13 = (int16x8_t *)(result + v8);
          *int v13 = vshlq_n_s16(*(int16x8_t *)(a3 + v8), 6uLL);
          v13[1] = v10;
          v13[2] = v11;
          v13[3] = v12;
          v8 += 64;
        }
      }
      else
      {
        LODWORD(i) = 0;
      }
      unint64_t i = i;
      if (i < a5)
      {
        uint64_t v14 = 2 * i;
        do
        {
          *(int16x8_t *)(result + v14) = vshlq_n_s16(*(int16x8_t *)(a3 + v14), 6uLL);
          i += 8;
          v14 += 16;
        }
        while (i < a5);
      }
      ++v6;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v6 != a6);
  }
  return result;
}

float sub_1BBAC7774(unint64_t a1, unint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t *a6, unsigned int *a7)
{
  unsigned int v7 = *a7;
  int32x4_t v8 = 0uLL;
  if (a2 >= 2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = a2 >> 1;
    __int16 v11 = v7 + a2 * a1;
    v12.i64[0] = 0x43004300430043;
    v12.i64[1] = 0x43004300430043;
    v13.i64[0] = 0x200020002000200;
    v13.i64[1] = 0x200020002000200;
    v14.i64[0] = 0x3000300030003;
    v14.i64[1] = 0x3000300030003;
    unsigned int v15 = *a7;
    int v16 = *a7;
    do
    {
      unsigned int v15 = ((_WORD)v15 + (_WORD)a1) & 0xFFF;
      unsigned int v17 = v11 & 0xFFF;
      if (a1 == 7)
      {
        LODWORD(v19) = 0;
      }
      else
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        do
        {
          uint64_t v20 = (int16x8_t *)(*a4 + v18);
          int8x8_t v21 = vbsl_s8(vmovn_s16(vcgtq_s16(*v20, v12)), *(int8x8_t *)((char *)&unk_1BBB80EDC + v16), *(int8x8_t *)((char *)&unk_1BBB81EE3 + v16));
          int v16 = ((_WORD)v16 + 8) & 0xFFF;
          int8x8_t v22 = vqshrun_n_s16(vaddw_s8(*v20, v21), 2uLL);
          int8x8_t v23 = vqshrun_n_s16(vaddw_s8(*(int16x8_t *)((char *)v20 + 2 * *a3), vbsl_s8(vmovn_s16(vcgtq_s16(*(int16x8_t *)((char *)v20 + 2 * *a3), v12)), *(int8x8_t *)((char *)&unk_1BBB80EDC + v15), *(int8x8_t *)((char *)&unk_1BBB81EE3 + v15))), 2uLL);
          int8x8_t v24 = vqshrun_n_s16(vaddw_s8(*(int16x8_t *)(a4[1] + v18), vbsl_s8(vand_s8(vmovn_s16(vcgtq_s16(vabdq_s16(*(int16x8_t *)(a4[1] + v18), v13), v14)), (int8x8_t)vcgt_u8((uint8x8_t)v22, (uint8x8_t)0x1111111111111111)), *(int8x8_t *)((char *)&unk_1BBB80EDC + v17), *(int8x8_t *)((char *)&unk_1BBB81EE3 + v17))), 2uLL);
          *(int8x8_t *)(*a6 + v19) = v22;
          *(int8x8_t *)(*a6 + *a5 + v19) = v23;
          *(int8x8_t *)(a6[1] + v19) = v24;
          v19 += 8;
          int32x4_t v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, vpadal_u8(vpadal_u8(vpaddl_u8((uint8x8_t)vand_s8(v23, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v22, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v24, (int8x8_t)0x101010101010101)));
          unsigned int v15 = ((_WORD)v15 + 8) & 0xFFF;
          unsigned int v17 = ((_WORD)v17 + 8) & 0xFFF;
          v18 += 16;
        }
        while (a1 - 7 > v19);
      }
      unint64_t v19 = v19;
      if (v19 >= a1)
      {
        uint64_t v36 = *a5;
      }
      else
      {
        uint64_t v25 = *a6;
        do
        {
          unsigned int v26 = *(unsigned __int16 *)(*a4 + 2 * v19);
          if (v26 <= 0x43) {
            uint64_t v27 = (char *)&unk_1BBB81EE3;
          }
          else {
            uint64_t v27 = (char *)&unk_1BBB80EDC;
          }
          int v28 = (int)(v27[v16] + v26) >> 2;
          if (v28 >= 255) {
            int v28 = 255;
          }
          *(unsigned char *)(v25 + v19) = v28 & ~(v28 >> 31);
          unsigned int v29 = *(unsigned __int16 *)(*a4 + 2 * (v19 + *a3));
          if (v29 <= 0x43) {
            uint64_t v30 = (char *)&unk_1BBB81EE3;
          }
          else {
            uint64_t v30 = (char *)&unk_1BBB80EDC;
          }
          int v31 = (int)(v30[v15] + v29) >> 2;
          if (v31 >= 255) {
            int v31 = 255;
          }
          *(unsigned char *)(*a6 + *a5 + v19) = v31 & ~(v31 >> 31);
          unsigned int v32 = *(unsigned __int16 *)(a4[1] + 2 * v19);
          if (*(unsigned __int8 *)(*a6 + v19) < 0x12u) {
            goto LABEL_24;
          }
          int v33 = v32 - 512;
          if (v32 < 0x200) {
            int v33 = 512 - v32;
          }
          int v34 = (char *)&unk_1BBB80EDC;
          if (v33 <= 3) {
LABEL_24:
          }
            int v34 = (char *)&unk_1BBB81EE3;
          int v16 = ((_WORD)v16 + 1) & 0xFFF;
          unsigned int v15 = ((_WORD)v15 + 1) & 0xFFF;
          int v35 = (int)(v34[v17] + v32) >> 2;
          unsigned int v17 = ((_WORD)v17 + 1) & 0xFFF;
          if (v35 >= 255) {
            int v35 = 255;
          }
          *(unsigned char *)(a6[1] + v19) = v35 & ~(v35 >> 31);
          uint64_t v25 = *a6;
          uint64_t v36 = *a5;
          *a7 += (*(unsigned char *)(a6[1] + v19) & 1) + (*(unsigned char *)(*a6 + v19 + *a5) & 1) + (*(unsigned char *)(*a6 + v19) & 1);
          ++v19;
        }
        while (a1 != v19);
      }
      int v37 = dword_1BBB7CEC0[((_WORD)v7 + (_WORD)v9) & 0xFFF];
      LOWORD(v15) = v37 + v15;
      __int16 v11 = v37 + v17;
      uint64_t v38 = a4[1] + 2 * a3[1];
      int v16 = v15 & 0xFFF;
      ++v9;
      *a4 += 4 * *a3;
      a4[1] = v38;
      uint64_t v39 = *a6 + 2 * v36;
      uint64_t v40 = a6[1] + a5[1];
      *a6 = v39;
      a6[1] = v40;
    }
    while (v9 != v10);
    unsigned int v7 = *a7;
  }
  float result = COERCE_FLOAT(vaddvq_s32(v8));
  *a7 = LODWORD(result) + v7;
  return result;
}

uint64_t sub_1BBAC7A80(uint64_t a1, uint64_t a2, CMSampleBufferRef sbuf)
{
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (!SampleAttachmentsArray) {
    return 4294954394;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  if (!ValueAtIndex) {
    return 4294954394;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, @"MBStatistics");
  if (!Value) {
    return 4294954394;
  }
  CFDataRef v8 = Value;
  BytePtr = CFDataGetBytePtr(Value);
  int Length = CFDataGetLength(v8);
  uint64_t result = 4294954394;
  if (BytePtr && Length >= 1)
  {
    uint64_t v12 = Length == 320 * *(int *)(a1 + 108) ? 0 : 4294954394;
    if (Length == 320 * *(int *)(a1 + 108))
    {
      if (*(void *)(a2 + 400) && (uint64_t v13 = *(void *)(a2 + 392), *(void *)(v13 + 8))) {
        int16x8_t v14 = *(void **)v13;
      }
      else {
        int16x8_t v14 = 0;
      }
      int v15 = 0;
      do
      {
        (*(void (**)(const UInt8 *, void *))(a1 + 2560))(BytePtr, v14);
        BytePtr += 320;
        ++v15;
      }
      while (v15 < *(_DWORD *)(a1 + 108));
      sub_1BBA7E708(a1, a2, v14);
      return v12;
    }
  }
  return result;
}

void sub_1BBAC7B84(void *a1)
{
  *a1 = &unk_1F14EDE70;
  sub_1BBA7E50C((uint64_t)a1);

  JUMPOUT(0x1C18605E0);
}

uint64_t sub_1BBAC7BD8(uint64_t a1)
{
  *(void *)a1 = &unk_1F14EDE70;
  return sub_1BBA7E50C(a1);
}

__n128 sub_1BBAC7BF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  v34[4] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(unsigned int *)(a1 + 240);
  uint64_t v4 = (v3 >> 12);
  int v5 = v3 << 22;
  uint64_t v6 = *a2;
  uint64_t v7 = 16 * *a2 * v4 + ((int)(v3 << 22) >> 20);
  uint64_t v8 = 4 * *a2;
  do
  {
    v34[v2++] = v7;
    v7 += v8;
  }
  while (v2 != 4);
  uint64_t v9 = 0;
  int v10 = v5 >> 22;
  int v11 = v5 >> 21;
  uint64_t v12 = v6 * v4 + v10;
  uint64_t v13 = v6 * 4 * v4 + v11;
  *(unsigned char *)(a2[1] + v12) = *(unsigned char *)(a1 + 80) & 0x3F;
  *(unsigned char *)(a2[3] + v12) = (*(_DWORD *)(a1 + 80) & 0x400000) != 0;
  *(_WORD *)(a2[4] + 2 * v12) = *(_WORD *)(a1 + 102);
  uint64_t v14 = v6 * ((4 * v4) | 2u) + v11;
  *(unsigned char *)(a2[16] + v12) = *(unsigned char *)(a1 + 83) & 0x3F;
  *(_WORD *)(a2[18] + 2 * v12) = *(_WORD *)(a1 + 106);
  int8x16_t v15 = *(int8x16_t *)(a1 + 84);
  v16.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v16.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  int8x16_t v17 = vandq_s8(v15, v16);
  int8x16_t v18 = (int8x16_t)vshrq_n_u8((uint8x16_t)v15, 4uLL);
  int8x16_t v19 = vzip1q_s8(v17, v18);
  uint64_t v20 = v34[1];
  *(_DWORD *)(a2[14] + v34[0]) = v19.i32[0];
  *(_DWORD *)(a2[14] + v20) = v19.i32[1];
  uint64_t v21 = v34[3];
  *(_DWORD *)(a2[14] + v34[2]) = v19.i32[2];
  int8x16_t v22 = vzip2q_s8(v17, v18);
  *(_DWORD *)(a2[14] + v21) = v19.i32[3];
  *(_WORD *)(a2[13] + v13) = v22.i16[0];
  *(_WORD *)(a2[13] + v14) = v22.i16[1];
  v17.i64[0] = 0x303030303030303;
  v17.i64[1] = 0x303030303030303;
  int8x16_t v23 = vandq_s8(v22, v17);
  *(unsigned char *)(a2[12] + v12) = v23.i8[4];
  *(unsigned char *)(a2[15] + v12) = v23.i8[5];
  *(unsigned char *)(a2[40] + v13) = *(unsigned char *)(a1 + 96) & 0x1F;
  *(unsigned char *)(a2[40] + (v13 | 1)) = (*(_DWORD *)(a1 + 96) >> 5) & 0x1F;
  *(unsigned char *)(a2[40] + v14) = (*(_DWORD *)(a1 + 96) >> 10) & 0x1F;
  *(unsigned char *)(a2[40] + (v14 | 1)) = (*(_DWORD *)(a1 + 96) >> 15) & 0x1F;
  do
  {
    int16x8_t v24 = *(int16x8_t *)(a1 + 16 * v9 + 108);
    uint64_t v25 = v34[v9];
    *(int16x8_t *)(a2[20] + 4 * v25) = vtrn1q_s16(vshrq_n_s16(vshlq_n_s16(v24, 5uLL), 5uLL), (int16x8_t)vshrq_n_s32(vshlq_n_s32((int32x4_t)v24, 0xAuLL), 0x16uLL));
    *(_DWORD *)(a2[22] + v25) = vqtbl1q_s8(vshrq_n_s8(vshlq_n_s8((int8x16_t)v24, 5uLL), 5uLL), (int8x16_t)xmmword_1BBB6F630).u32[0];
    ++v9;
  }
  while (v9 != 4);
  uint64_t v26 = 4 * v12;
  *(_WORD *)(a2[24] + v26) = (__int16)(32 * *(_WORD *)a1) >> 5;
  *(_WORD *)(a2[24] + 4 * v12 + 2) = (__int16)(*(_DWORD *)a1 >> 6) >> 6;
  *(_WORD *)(a2[28] + 2 * v12) = *(_DWORD *)(a1 + 4);
  *(_WORD *)(a2[25] + v26) = (__int16)(32 * *(_WORD *)(a1 + 32)) >> 5;
  *(_WORD *)(a2[25] + 4 * v12 + 2) = (__int16)(*(_DWORD *)(a1 + 32) >> 6) >> 6;
  *(_WORD *)(a2[29] + 2 * v12) = *(_DWORD *)(a1 + 36);
  int16x8_t v27 = vtrn1q_s16(vshrq_n_s16(vshlq_n_s16(*(int16x8_t *)(a1 + 8), 5uLL), 5uLL), (int16x8_t)vshrq_n_s32(vshlq_n_s32(*(int32x4_t *)(a1 + 8), 0xAuLL), 0x16uLL));
  int16x8_t v28 = *(int16x8_t *)(a1 + 40);
  uint64_t v29 = 4 * v13;
  *(void *)(a2[32] + v29) = v27.i64[0];
  int16x8_t v30 = vtrn1q_s16(vshrq_n_s16(vshlq_n_s16(v28, 5uLL), 5uLL), (int16x8_t)vshrq_n_s32(vshlq_n_s32((int32x4_t)v28, 0xAuLL), 0x16uLL));
  *(void *)(a2[32] + 4 * v14) = v27.i64[1];
  *(void *)(a2[33] + v29) = v30.i64[0];
  *(void *)(a2[33] + 4 * v14) = v30.i64[1];
  v27.i64[0] = *(void *)(a1 + 24);
  v30.i64[0] = *(void *)(a1 + 56);
  uint64_t v31 = 2 * v13;
  *(_DWORD *)(a2[36] + v31) = v27.i32[0];
  *(_DWORD *)(a2[36] + 2 * v14) = v27.i32[1];
  *(_DWORD *)(a2[37] + v31) = v30.i32[0];
  *(_DWORD *)(a2[37] + 2 * v14) = v30.i32[1];
  __n128 result = *(__n128 *)(a1 + 244);
  long long v33 = *(_OWORD *)(a1 + 256);
  *(_WORD *)(a2[42] + 2 * v12) = result.n128_u16[0];
  *(_WORD *)(a2[43] + 2 * v12) = result.n128_u16[2];
  *(_WORD *)(a2[44] + 2 * v12) = result.n128_u16[4];
  *(_DWORD *)(a2[45] + 4 * v12) = v33 & 0xFFFFFF;
  *(_DWORD *)(a2[46] + 4 * v12) = DWORD1(v33) & 0xFFFFFF;
  *(_DWORD *)(a2[47] + 4 * v12) = DWORD2(v33) & 0xFFFFFF;
  return result;
}

uint64_t sub_1BBAC7F58(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = 0;
  v50[2] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(unsigned int *)(result + 240);
  uint64_t v4 = (v3 >> 12);
  int v5 = v3 << 22;
  int v6 = (int)(v3 << 22) >> 21;
  int v7 = (int)(v3 << 22) >> 20;
  uint64_t v8 = *a2;
  uint64_t v9 = *a2 * 4 * v4 + v6;
  uint64_t v10 = *a2 * ((4 * v4) | 2u) + v6;
  v50[0] = v9;
  v50[1] = v10;
  uint64_t v11 = 16 * v8 * v4 + v7;
  do
  {
    v47[v2++] = v11;
    v11 += 4 * v8;
  }
  while (v2 != 4);
  uint64_t v12 = v8 * v4 + (v5 >> 22);
  *(unsigned char *)(a2[1] + v12) = *(unsigned char *)(result + 80) & 0x3F;
  *(unsigned char *)(a2[16] + v12) = *(unsigned char *)(result + 83) & 0x3F;
  *(unsigned char *)(a2[3] + v12) = (*(_DWORD *)(result + 80) & 0x400000) != 0;
  *(_WORD *)(a2[4] + 2 * v12) = *(_WORD *)(result + 102);
  *(_WORD *)(a2[18] + 2 * v12) = *(_WORD *)(result + 106);
  *(unsigned char *)(a2[13] + v9) = *(unsigned char *)(result + 92) & 0xF;
  uint64_t v13 = v9 | 1;
  *(unsigned char *)(a2[13] + v13) = *(unsigned char *)(result + 92) >> 4;
  *(unsigned char *)(a2[13] + v10) = *(unsigned char *)(result + 93) & 0xF;
  uint64_t v14 = v10 | 1;
  *(unsigned char *)(a2[13] + v14) = (unsigned __int16)*(_DWORD *)(result + 92) >> 12;
  uint64_t v15 = v47[0];
  uint64_t v16 = v47[1];
  *(unsigned char *)(a2[14] + v47[0]) = *(unsigned char *)(result + 84) & 0xF;
  *(unsigned char *)(v15 + a2[14] + 1) = *(unsigned char *)(result + 84) >> 4;
  *(unsigned char *)(v15 + a2[14] + 2) = *(unsigned char *)(result + 85) & 0xF;
  *(unsigned char *)(v15 + a2[14] + 3) = (unsigned __int16)*(_DWORD *)(result + 84) >> 12;
  *(unsigned char *)(a2[14] + v16) = *(unsigned char *)(result + 86) & 0xF;
  *(unsigned char *)(v16 + a2[14] + 1) = (*(_DWORD *)(result + 84) >> 20) & 0xF;
  *(unsigned char *)(v16 + a2[14] + 2) = *(unsigned char *)(result + 87) & 0xF;
  *(unsigned char *)(v16 + a2[14] + 3) = *(_DWORD *)(result + 84) >> 28;
  uint64_t v17 = v48;
  uint64_t v18 = v49;
  *(unsigned char *)(a2[14] + v48) = *(unsigned char *)(result + 88) & 0xF;
  *(unsigned char *)(v17 + a2[14] + 1) = *(unsigned char *)(result + 88) >> 4;
  *(unsigned char *)(v17 + a2[14] + 2) = *(unsigned char *)(result + 89) & 0xF;
  *(unsigned char *)(v17 + a2[14] + 3) = (unsigned __int16)*(_DWORD *)(result + 88) >> 12;
  *(unsigned char *)(a2[14] + v18) = *(unsigned char *)(result + 90) & 0xF;
  *(unsigned char *)(v18 + a2[14] + 1) = (*(_DWORD *)(result + 88) >> 20) & 0xF;
  *(unsigned char *)(v18 + a2[14] + 2) = *(unsigned char *)(result + 91) & 0xF;
  *(unsigned char *)(v18 + a2[14] + 3) = *(_DWORD *)(result + 88) >> 28;
  *(unsigned char *)(a2[12] + v12) = *(unsigned char *)(result + 94) & 3;
  *(unsigned char *)(a2[15] + v12) = (*(_DWORD *)(result + 92) >> 20) & 3;
  *(unsigned char *)(a2[40] + v9) = *(unsigned char *)(result + 96) & 0x1F;
  *(unsigned char *)(a2[40] + v13) = (*(_DWORD *)(result + 96) >> 5) & 0x1F;
  *(unsigned char *)(a2[40] + v10) = (*(_DWORD *)(result + 96) >> 10) & 0x1F;
  *(unsigned char *)(a2[40] + v14) = (*(_DWORD *)(result + 96) >> 15) & 0x1F;
  if (*((int *)a2 + 272) >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = result + 108;
    do
    {
      uint64_t v21 = 0;
      int v22 = 0;
      int8x16_t v23 = &a2[v19];
      int16x8_t v24 = v23 + 20;
      uint64_t v25 = v23 + 22;
      do
      {
        uint64_t v26 = 0;
        uint64_t v27 = v47[v21];
        int v28 = v22;
        uint64_t v29 = v20 + 4 * v22;
        uint64_t v30 = 4 * v27;
        do
        {
          *(_WORD *)(*v24 + v30) = (__int16)(32 * *(_WORD *)(v29 + 4 * v26)) >> 5;
          *(_WORD *)(*v24 + v30 + 2) = (__int16)(*(_DWORD *)(v29 + 4 * v26) >> 6) >> 6;
          *(unsigned char *)(*v25 + v27 + v26) = (32 * *(_DWORD *)(v29 + 4 * v26)) >> 29;
          ++v26;
          v30 += 4;
        }
        while (v26 != 4);
        int v22 = v28 + 4;
        ++v21;
      }
      while (v21 != 4);
      ++v19;
      v20 += 64;
    }
    while (v19 < *((int *)a2 + 272));
  }
  uint64_t v31 = 0;
  int v32 = 0;
  uint64_t v33 = 4 * v12;
  *(_WORD *)(a2[24] + v33) = (__int16)(32 * *(_WORD *)result) >> 5;
  *(_WORD *)(a2[24] + 4 * v12 + 2) = (__int16)(*(_DWORD *)result >> 6) >> 6;
  *(_WORD *)(a2[28] + 2 * v12) = *(_DWORD *)(result + 4);
  *(_WORD *)(a2[25] + v33) = (__int16)(32 * *(_WORD *)(result + 32)) >> 5;
  *(_WORD *)(a2[25] + 4 * v12 + 2) = (__int16)(*(_DWORD *)(result + 32) >> 6) >> 6;
  *(_WORD *)(a2[29] + 2 * v12) = *(_DWORD *)(result + 36);
  char v34 = 1;
  do
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    char v37 = v34;
    uint64_t v38 = v50[v31];
    while (1)
    {
      uint64_t v39 = result + 4 * v32 + 4 * v35;
      uint64_t v40 = v38 + v36;
      uint64_t v41 = 4 * v40;
      *(_WORD *)(a2[32] + v41) = (__int16)(32 * *(_WORD *)(v39 + 8)) >> 5;
      *(_WORD *)(a2[32] + 4 * v40 + 2) = (__int16)(*(_DWORD *)(v39 + 8) >> 6) >> 6;
      *(_WORD *)(a2[33] + v41) = (__int16)(32 * *(_WORD *)(v39 + 40)) >> 5;
      *(_WORD *)(a2[33] + 4 * v40 + 2) = (__int16)(*(_DWORD *)(v39 + 40) >> 6) >> 6;
      uint64_t v42 = (uint64_t)(v32 + (int)v35) >> 1;
      int v43 = *(_DWORD *)(result + 4 * ((v32 + (int)v35) >> 1) + 24);
      if (v35 == 1) {
        break;
      }
      *(_WORD *)(a2[36] + 2 * v40) = v43;
      *(_WORD *)(a2[37] + 2 * v40) = *(_DWORD *)(result + 4 * v42 + 56);
      ++v35;
      uint64_t v36 = 1;
    }
    char v34 = 0;
    *(_WORD *)(a2[36] + 2 * v40) = HIWORD(v43);
    *(_WORD *)(a2[37] + 2 * v40) = *(_WORD *)(result + 4 * v42 + 58);
    v32 += 2;
    uint64_t v31 = 1;
  }
  while ((v37 & 1) != 0);
  uint64_t v44 = 0;
  uint64_t v45 = result + 256;
  unsigned int v46 = a2 + 42;
  do
  {
    *(_WORD *)(*v46 + 2 * v12) = *(_DWORD *)(v45 + v44 - 12);
    *(_DWORD *)(v46[3] + 4 * v12) = *(_DWORD *)(v45 + v44) & 0xFFFFFF;
    v44 += 4;
    ++v46;
  }
  while (v44 != 12);
  return result;
}

uint64_t sub_1BBAC8470(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1BBA7E404(a1, a2);
  *(void *)uint64_t v3 = &unk_1F14EDE70;
  *(_DWORD *)(v3 + 148) = 1;
  if (*(unsigned char *)(*(void *)(v3 + 88) + 581))
  {
    *(void *)(a1 + 2560) = sub_1BBAC7F58;
    if (qword_1EC027190 != -1) {
      dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
    }
    if (dword_1EC027188 >= 2) {
      *(void *)(a1 + 2560) = sub_1BBAC7BF8;
    }
  }
  return a1;
}

void sub_1BBAC852C(uint64_t a1)
{
  sub_1BBAC8564(a1);

  JUMPOUT(0x1C18605E0);
}

uint64_t sub_1BBAC8564(uint64_t a1)
{
  *(void *)a1 = &unk_1F14EE1A8;
  uint64_t v2 = *(NSObject **)(a1 + 120);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_sync(*(dispatch_queue_t *)(a1 + 112), &unk_1F14EF2C8);
    dispatch_release(*(dispatch_object_t *)(a1 + 120));
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v3 = *(NSObject **)(a1 + 112);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 112) = 0;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  sub_1BBA83C90(*(void **)(a1 + 32));
  return a1;
}

void sub_1BBAC85F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 48));
  uint64_t v2 = sub_1BBA3F618();
  uint64_t v3 = v2;
  uint64_t v4 = *(void (**)(void, double))(v1 + 8);
  if (v4) {
    v4(*(void *)(v1 + 16), (double)((v2 - *(void *)(v1 + 128)) * qword_1E9F81F24 / HIDWORD(qword_1E9F81F24)) / 1000000000.0);
  }
  int v5 = *(void **)(v1 + 24);
  if (v5 != (void *)(v1 + 32))
  {
    do
    {
      if (*((_DWORD *)v5 + 12) == 2) {
        v5[5] = 0;
      }
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      int v5 = v7;
    }
    while (v7 != (void *)(v1 + 32));
  }
  *(void *)(v1 + 128) = v3;

  std::mutex::unlock((std::mutex *)(v1 + 48));
}

void sub_1BBAC86DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBAC86F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F14EE1A8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = sub_1BBA3F618();
  uint64_t v4 = dispatch_queue_create("com.apple.videoprocessing.statsq", 0);
  *(void *)(a1 + 112) = v4;
  if (!v4)
  {
    int v5 = *(NSObject **)(a1 + 120);
    if (!v5) {
      return a1;
    }
    goto LABEL_3;
  }
  int v5 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v4);
  *(void *)(a1 + 120) = v5;
  if (v5)
  {
LABEL_3:
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = sub_1BBAC85F4;
    handler[3] = &unk_1E62485A8;
    handler[4] = a1;
    dispatch_source_set_event_handler(v5, handler);
    int v6 = *(NSObject **)(a1 + 120);
    dispatch_time_t v7 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v6, v7, 0x3B9ACA00uLL, 0x5F5E100uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 120));
  }
  return a1;
}

void sub_1BBAC884C(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v1);
  sub_1BBA83C90(*v2);
  _Unwind_Resume(a1);
}

void sub_1BBAC8868(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v9 = a2;
  int v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  dispatch_time_t v7 = sub_1BBAC8908((uint64_t **)(a1 + 24), (unint64_t)a2, &v9);
  int v8 = *((_DWORD *)v7 + 12);
  if (v8 == 2) {
    goto LABEL_4;
  }
  if (!v8)
  {
    *((_DWORD *)v7 + 12) = 2;
LABEL_4:
    *((double *)v7 + 5) = *((double *)v7 + 5) + a3;
  }
  std::mutex::unlock(v6);
}

void sub_1BBAC88F4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1BBAC8908(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  int v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        dispatch_time_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    dispatch_time_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    dispatch_time_t v7 = (uint64_t **)operator new(0x38uLL);
    uint64_t v10 = *a3;
    v7[5] = 0;
    v7[6] = 0;
    v7[4] = v10;
    *dispatch_time_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *int v6 = (uint64_t *)v7;
    uint64_t v11 = (uint64_t *)**a1;
    uint64_t v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = *v6;
    }
    sub_1BB9C8438(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1BBAC89D8(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v9 = a2;
  int v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  dispatch_time_t v7 = sub_1BBAC8908((uint64_t **)(a1 + 24), (unint64_t)a2, &v9);
  int v8 = *((_DWORD *)v7 + 12);
  if (v8 == 1) {
    goto LABEL_4;
  }
  if (!v8)
  {
    *((_DWORD *)v7 + 12) = 1;
LABEL_4:
    *((double *)v7 + 5) = a3;
  }
  std::mutex::unlock(v6);
}

void sub_1BBAC8A5C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBAC8A70(uint64_t result, void *a2, int a3, __int16 *a4, char a5)
{
  if (a3 >= 1)
  {
    for (uint64_t i = 0; i != a3; *(unsigned char *)(result + i++) = v6 & ~(v6 >> 31))
    {
      int v6 = ((1 << (a5 - 1))
          + *a4 * *(unsigned __int8 *)(*a2 + i)
          + a4[1] * *(unsigned __int8 *)(a2[1] + i)
          + a4[2] * *(unsigned __int8 *)(a2[2] + i)
          + a4[3] * *(unsigned __int8 *)(a2[3] + i)) >> a5;
      if (v6 >= 255) {
        int v6 = 255;
      }
    }
  }
  return result;
}

uint64_t sub_1BBAC8AEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t v7 = a1[2];
  if (*a1 == v7 || a1[1] == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v108 = v106;
  long long v107 = v106;
  uint64_t v8 = *((unsigned int *)a1 + 18);
  int v120 = *((_DWORD *)a1 + 19);
  uint64_t v9 = *((int *)a1 + 16);
  LODWORD(v111) = *((_DWORD *)a1 + 17);
  int v10 = 8 * (int)v8 / (int)v9;
  if (v10 >= 8) {
    int v10 = 8;
  }
  if (v10 <= 1) {
    int v10 = 1;
  }
  uint64_t v11 = a1[4];
  uint64_t v12 = (void (*)(char *, long long *))a1[6];
  unsigned int v121 = &a1[32 * (unint64_t)(v10 - 1)];
  uint64_t v13 = *((unsigned int *)a1 + 1060);
  uint64_t v114 = (void (*)(char *, long long *, uint64_t, uint64_t *))a1[14];
  uint64_t v115 = v12;
  int v109 = a1;
  uint64_t v113 = (void (*)(uint64_t, char *, uint64_t, uint64_t *, _WORD *, uint64_t, uint64_t))a1[16];
  long long v123 = 0u;
  long long v124 = 0u;
  MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v112 = (char *)v106 - ((v14 + 15) & 0x1FFFFFFF0);
  uint64_t v15 = (v8 + 16);
  if ((int)v8 < -16) {
    size_t v16 = -1;
  }
  else {
    size_t v16 = 2 * (int)v15;
  }
  uint64_t v17 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  uint64_t v18 = operator new[](v16, MEMORY[0x1E4FBA2D0]);
  uint64_t v19 = operator new[]((int)v15, v17);
  if ((int)v8 < 1)
  {
    unsigned int v32 = 0;
  }
  else
  {
    __int16 v25 = 0;
    int v26 = 0;
    uint64_t v27 = v19;
    int v28 = v18;
    uint64_t v29 = v8;
    do
    {
      int v30 = v26 >> 16;
      unsigned int v31 = v26 >> 8;
      v26 += (v9 << 16) / (int)v8;
      *v27++ = v31 & 0xF0;
      *v28++ = v30 - v25;
      __int16 v25 = v30;
      --v29;
    }
    while (v29);
    unsigned int v32 = v8;
  }
  uint64_t v117 = v9;
  char v34 = v121;
  long long v122 = v121 + 274;
  if ((int)v32 < (int)v15)
  {
    uint64_t v35 = (int)v8 - 1;
    uint64_t v36 = v15 - v32;
    char v37 = &v19[v32];
    uint64_t v38 = &v18[v32];
    do
    {
      *v38++ = v18[v35];
      *v37++ = v19[v35];
      --v36;
    }
    while (v36);
  }
  uint64_t v118 = v18;
  uint64_t v119 = (uint64_t)v19;
  uint64_t v116 = v8;
  unsigned int v121 = v34 + 18;
  if (v120 >= 1)
  {
    int v39 = 0;
    int v40 = 0;
    uint64_t v41 = (char *)((unint64_t)(v112 + 31) & 0xFFFFFFFFFFFFFFF0);
    int v42 = v111 << 16;
    LODWORD(v112) = v111 - 2;
    int v43 = v111 - 1;
    LODWORD(v111) = v111 - 3;
    uint64_t v110 = v117 - 1;
    int v44 = v42 / v120;
    do
    {
      int v45 = v39 >> 16;
      int v46 = (v39 >> 16) - 1;
      if (v39 < 0x10000) {
        int v46 = 0;
      }
      *(void *)&long long v123 = v6 + v11 * v46;
      *((void *)&v123 + 1) = v6 + v11 * ((uint64_t)v39 >> 16);
      if (v45 <= (int)v112) {
        int v47 = v45 + 1;
      }
      else {
        int v47 = v43;
      }
      uint64_t v48 = v6 + v11 * v47;
      BOOL v49 = v45 <= (int)v111;
      int v50 = v45 + 2;
      if (!v49) {
        int v50 = v43;
      }
      *(void *)&long long v124 = v48;
      *((void *)&v124 + 1) = v6 + v11 * v50;
      uint64_t v51 = v13;
      uint64_t v52 = v117;
      uint64_t v53 = v51;
      v114(v41, &v123, v117, &v121[2 * ((unsigned __int16)v39 >> 12)]);
      char v54 = *v41;
      char v55 = v41[v110];
      for (uint64_t i = -1; i != -5; --i)
      {
        v41[i] = v54;
        v41[v52++] = v55;
      }
      v39 += v44;
      uint64_t v13 = v53;
      v113(v7, v41, v116, v122, v118, v119, v53);
      v7 += (uint64_t)v115;
      ++v40;
    }
    while (v40 != v120);
  }
  if (v118) {
    MEMORY[0x1C18605A0](v118, 0x1000C80BDFB0063);
  }
  uint64_t v57 = v119;
  if (v119) {
    uint64_t v57 = MEMORY[0x1C18605A0](v119, 0x1000C8077774924);
  }
  long long v107 = v106;
  v106[1] = v106;
  uint64_t v58 = v109[1];
  uint64_t v59 = v109[5];
  uint64_t v60 = *((int *)v109 + 16);
  LODWORD(v112) = *((_DWORD *)v109 + 17);
  uint64_t v61 = v109[3];
  uint64_t v117 = v109[7];
  int v62 = *((_DWORD *)v109 + 18);
  LODWORD(v113) = *((_DWORD *)v109 + 19);
  int v120 = *((_DWORD *)v109 + 1060);
  unsigned int v63 = (void (*)(char *, long long *))v109[14];
  uint64_t v114 = (void (*)(char *, long long *, uint64_t, uint64_t *))v109[17];
  uint64_t v115 = v63;
  long long v123 = 0u;
  long long v124 = 0u;
  MEMORY[0x1F4188790](v57, v20, v21, v22, v23, v24);
  unsigned int v111 = (char *)v106 - ((v64 + 15) & 0x1FFFFFFF0);
  int v65 = v62 >> 1;
  uint64_t v66 = ((v62 >> 1) + 16);
  if (v62 < -32) {
    size_t v67 = -1;
  }
  else {
    size_t v67 = 2 * (int)v66;
  }
  uint64_t v68 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  unsigned int v69 = operator new[](v67, MEMORY[0x1E4FBA2D0]);
  unsigned int v70 = operator new[]((int)v66, v68);
  if (v62 < 2)
  {
    LODWORD(v73) = 0;
    uint64_t v77 = v60;
  }
  else
  {
    __int16 v71 = 0;
    int v72 = 0;
    if (v65 <= 1) {
      uint64_t v73 = 1;
    }
    else {
      uint64_t v73 = v65;
    }
    int v74 = v70;
    int v75 = v69;
    uint64_t v76 = v73;
    uint64_t v77 = v60;
    do
    {
      int v78 = v72 >> 15;
      unsigned int v79 = v72 >> 8;
      v72 += (v60 << 16) / v62;
      LOWORD(v78) = v78 & 0xFFFE;
      *v74++ = v79 & 0xF0;
      *v75++ = v78 - v71;
      __int16 v71 = v78;
      --v76;
    }
    while (v76);
  }
  LODWORD(v116) = v62;
  if ((int)v73 < (int)v66)
  {
    uint64_t v80 = v65 - 1;
    uint64_t v81 = v66 - v73;
    long long v82 = &v70[v73];
    long long v83 = &v69[v73];
    do
    {
      *v83++ = v69[v80];
      *v82++ = v70[v80];
      --v81;
    }
    while (v81);
  }
  uint64_t v118 = v69;
  uint64_t v119 = (uint64_t)v70;
  if ((int)v113 >= 2)
  {
    int v84 = 0;
    int v85 = 0;
    long long v86 = (char *)((unint64_t)(v111 + 31) & 0xFFFFFFFFFFFFFFF0);
    int v87 = (int)v113 >> 1;
    int v88 = (int)v112 >> 1 << 16;
    LODWORD(v113) = ((int)v112 >> 1) - 2;
    int v89 = ((int)v112 >> 1) - 1;
    LODWORD(v112) = ((int)v112 >> 1) - 3;
    if (v87 <= 1) {
      int v90 = 1;
    }
    else {
      int v90 = v87;
    }
    LODWORD(v111) = v90;
    int v109 = (uint64_t *)(v77 - 2);
    uint64_t v110 = v77 - 1;
    LODWORD(v108) = v88 / v87;
    unsigned int v91 = &v86[v77];
    do
    {
      int v92 = v84 >> 16;
      int v93 = (v84 >> 16) - 1;
      if (v84 < 0x10000) {
        int v93 = 0;
      }
      *(void *)&long long v123 = v58 + v59 * v93;
      *((void *)&v123 + 1) = v58 + v59 * ((uint64_t)v84 >> 16);
      if (v92 <= (int)v113) {
        int v94 = v92 + 1;
      }
      else {
        int v94 = v89;
      }
      uint64_t v95 = v58 + v59 * v94;
      BOOL v49 = v92 <= (int)v112;
      int v96 = v92 + 2;
      if (!v49) {
        int v96 = v89;
      }
      *(void *)&long long v124 = v95;
      *((void *)&v124 + 1) = v58 + v59 * v96;
      uint64_t v97 = v77;
      v115(v86, &v123);
      char v98 = *v86;
      char v99 = v86[1];
      uint64_t v100 = -2;
      uint64_t v101 = 1;
      char v102 = v86[v110];
      char v103 = *((unsigned char *)v109 + (void)v86);
      do
      {
        long long v104 = &v86[v100];
        char *v104 = v98;
        v104[1] = v99;
        v91[v101] = v102;
        v91[v101 - 1] = v103;
        unint64_t v105 = v101 - 1;
        v101 += 2;
        v100 -= 2;
      }
      while (v105 < 6);
      v84 += (int)v108;
      ((void (*)(uint64_t, char *, void, uint64_t *, _WORD *, uint64_t, void))v114)(v61, v86, v116, v122, v118, v119, v120);
      v61 += v117;
      ++v85;
      uint64_t v77 = v97;
    }
    while (v85 != v111);
  }
  if (v118) {
    MEMORY[0x1C18605A0](v118, 0x1000C80BDFB0063, v77);
  }
  if (v119) {
    MEMORY[0x1C18605A0](v119, 0x1000C8077774924, v77);
  }
  return 0;
}

int8x16_t sub_1BBAC91B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  int v4 = *((_DWORD *)a1 + 8);
  unsigned int v5 = *((_DWORD *)a1 + 12);
  BOOL v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v5) & 0x10);
  int16x8_t v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  int8x16_t v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 4))+ ((v5 >> 1) | 0xFFFFFFE)));
  int8x16_t v11 = (int8x16_t)vshlq_u64(v8, v10);
  int v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = v13 * v6;
  uint64_t v16 = a1[3];
  uint64_t v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 9)
  {
    int16x8_t v21 = 0uLL;
    int16x8_t v22 = 0uLL;
    int16x8_t v23 = 0uLL;
    int16x8_t v24 = 0uLL;
    int16x8_t v25 = 0uLL;
    int16x8_t v26 = 0uLL;
    int16x8_t v27 = 0uLL;
    if (v12 >= 1)
    {
      int v28 = v12;
      uint64_t v29 = v14;
      int v30 = v17;
      do
      {
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 + v13 * v6 - 2), v9);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v15), v9);
        uint8x16_t v33 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 * (v6 - 1) + 2), v9);
        uint8x16_t v34 = (uint8x16_t)vandq_s8(*v30, v9);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v32, v31);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v32, v33);
        int8x16_t v37 = (int8x16_t)vcgtq_u8(v31, v32);
        int8x16_t v38 = (int8x16_t)vcgtq_u8(v33, v32);
        int8x16_t v39 = vandq_s8(v38, v37);
        int8x16_t v40 = vandq_s8(v36, v35);
        int8x16_t v41 = veorq_s8(v36, v35);
        int8x16_t v42 = veorq_s8(v38, v37);
        int8x16_t v43 = vbicq_s8(v42, v41);
        int8x16_t v44 = vbicq_s8(v41, v42);
        int16x8_t v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v39);
        int16x8_t v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v43);
        int16x8_t v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v44);
        int16x8_t v7 = (int16x8_t)vsubq_s8((int8x16_t)v7, v40);
        int8x16_t v45 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8);
        int8x16_t v46 = (int8x16_t)vsubl_high_u8(v34, v32);
        int16x8_t v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v39)), v27), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        int16x8_t v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v43)), v26), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        int16x8_t v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v44)), v25), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v44.i8)));
        int16x8_t v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v40)), v24), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)));
        int v30 = (int8x16_t *)((char *)v30 + v16);
        v29 += v13;
        --v28;
      }
      while (v28);
    }
    int8x16_t v47 = (int8x16_t)vpaddq_s16(v23, v22);
    int8x16_t v48 = (int8x16_t)vpaddq_s16(v21, v7);
    int16x8_t v7 = (int16x8_t)vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v47, v48), vuzp2q_s8(v47, v48)));
    int32x4_t v20 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v27, v26), vuzp1q_s16(v25, v24)));
    int32x4_t v19 = vpaddlq_s16(vpaddq_s16(vuzp2q_s16(v27, v26), vuzp2q_s16(v25, v24)));
    unsigned int v18 = 8;
  }
  else
  {
    unsigned int v18 = 0;
    int8x16_t v11 = vandq_s8(v11, v9);
    int32x4_t v19 = 0uLL;
    int32x4_t v20 = 0uLL;
  }
  unint64_t v49 = (v4 - 8);
  if ((int)v18 < (int)v49)
  {
    unint64_t v50 = v18;
    uint64_t v51 = v13 * (v6 - 1) + 2 * v18 + v14 + 2;
    uint64_t v52 = v13 + v13 * v6 + 2 * v18 + v14 - 2;
    uint64_t v53 = v14 + v15 + 2 * v18;
    do
    {
      if (v12 < 1)
      {
        int16x8_t v61 = 0uLL;
        int16x8_t v64 = 0uLL;
        int16x8_t v63 = 0uLL;
        int16x8_t v62 = 0uLL;
        int16x8_t v55 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v59 = 0uLL;
        int16x8_t v56 = 0uLL;
      }
      else
      {
        uint64_t v54 = 0;
        int16x8_t v55 = 0uLL;
        int16x8_t v56 = 0uLL;
        uint64_t v57 = (uint8x8_t *)((char *)v17 + 2 * v50);
        int v58 = v12;
        int16x8_t v59 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v61 = 0uLL;
        int16x8_t v62 = 0uLL;
        int16x8_t v63 = 0uLL;
        int16x8_t v64 = 0uLL;
        do
        {
          uint8x16_t v65 = *(uint8x16_t *)(v53 + v54);
          uint8x16_t v66 = *(uint8x16_t *)(v52 + v54);
          uint8x16_t v67 = *(uint8x16_t *)(v51 + v54);
          int8x16_t v68 = (int8x16_t)vcgtq_u8(v65, v66);
          int8x16_t v69 = (int8x16_t)vcgtq_u8(v65, v67);
          int8x16_t v70 = (int8x16_t)vcgtq_u8(v66, v65);
          int8x16_t v71 = (int8x16_t)vcgtq_u8(v67, v65);
          int8x16_t v72 = vandq_s8(v71, v70);
          int8x16_t v73 = vandq_s8(v69, v68);
          int8x16_t v74 = veorq_s8(v69, v68);
          int8x16_t v75 = veorq_s8(v71, v70);
          int8x16_t v76 = vbicq_s8(v75, v74);
          int8x16_t v77 = vbicq_s8(v74, v75);
          int16x8_t v55 = (int16x8_t)vsubq_s8((int8x16_t)v55, v72);
          int16x8_t v62 = (int16x8_t)vsubq_s8((int8x16_t)v62, v76);
          int16x8_t v63 = (int16x8_t)vsubq_s8((int8x16_t)v63, v77);
          int16x8_t v64 = (int16x8_t)vsubq_s8((int8x16_t)v64, v73);
          int8x16_t v78 = (int8x16_t)vsubl_u8(*v57, *(uint8x8_t *)v65.i8);
          int8x16_t v79 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v57->i8, v65);
          int16x8_t v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v72)), v56), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          int16x8_t v59 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v76)), v59), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
          int16x8_t v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v77)), v60), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v77.i8)));
          int16x8_t v61 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v73)), v61), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v73.i8)));
          uint64_t v57 = (uint8x8_t *)((char *)v57 + v16);
          v54 += v13;
          --v58;
        }
        while (v58);
      }
      int8x16_t v80 = (int8x16_t)vpaddq_s16(v55, v62);
      int8x16_t v81 = (int8x16_t)vpaddq_s16(v63, v64);
      int16x8_t v7 = (int16x8_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v80, v81), vuzp2q_s8(v80, v81)));
      int32x4_t v20 = vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v56, v59), vuzp1q_s16(v60, v61)));
      v50 += 8;
      int32x4_t v19 = vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v56, v59), vuzp2q_s16(v60, v61)));
      v51 += 16;
      v52 += 16;
      v53 += 16;
    }
    while (v50 < v49);
    unsigned int v18 = v50;
  }
  if (v12 < 1)
  {
    int16x8_t v94 = 0uLL;
    int16x8_t v93 = 0uLL;
    int16x8_t v92 = 0uLL;
    int16x8_t v86 = 0uLL;
    int16x8_t v91 = 0uLL;
    int16x8_t v90 = 0uLL;
    int16x8_t v89 = 0uLL;
    int16x8_t v87 = 0uLL;
  }
  else
  {
    uint64_t v82 = 2 * v18;
    long long v83 = (int8x16_t *)((char *)v17 + v82);
    uint64_t v84 = v13 * (v6 - 1) + 2;
    uint64_t v85 = v14 + v82;
    int16x8_t v86 = 0uLL;
    int16x8_t v87 = 0uLL;
    uint64_t v88 = v13 + v13 * v6 - 2;
    int16x8_t v89 = 0uLL;
    int16x8_t v90 = 0uLL;
    int16x8_t v91 = 0uLL;
    int16x8_t v92 = 0uLL;
    int16x8_t v93 = 0uLL;
    int16x8_t v94 = 0uLL;
    do
    {
      uint8x16_t v95 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v88), v11);
      uint8x16_t v96 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v15), v11);
      uint8x16_t v97 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v84), v11);
      uint8x16_t v98 = (uint8x16_t)vandq_s8(*v83, v11);
      int8x16_t v99 = (int8x16_t)vcgtq_u8(v96, v95);
      int8x16_t v100 = (int8x16_t)vcgtq_u8(v96, v97);
      int8x16_t v101 = (int8x16_t)vcgtq_u8(v95, v96);
      int8x16_t v102 = (int8x16_t)vcgtq_u8(v97, v96);
      int8x16_t v103 = vandq_s8(v102, v101);
      int8x16_t v104 = vandq_s8(v100, v99);
      int8x16_t v105 = veorq_s8(v100, v99);
      int8x16_t v106 = veorq_s8(v102, v101);
      int8x16_t v107 = vbicq_s8(v106, v105);
      int8x16_t v108 = vbicq_s8(v105, v106);
      int16x8_t v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v103);
      int16x8_t v92 = (int16x8_t)vsubq_s8((int8x16_t)v92, v107);
      int16x8_t v93 = (int16x8_t)vsubq_s8((int8x16_t)v93, v108);
      int16x8_t v94 = (int16x8_t)vsubq_s8((int8x16_t)v94, v104);
      int8x16_t v109 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v98.i8, *(uint8x8_t *)v96.i8);
      int8x16_t v110 = (int8x16_t)vsubl_high_u8(v98, v96);
      int16x8_t v87 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v103)), v87), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v103.i8)));
      int16x8_t v89 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v107)), v89), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v107.i8)));
      int16x8_t v90 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v108)), v90), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v108.i8)));
      int16x8_t v91 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v104)), v91), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v104.i8)));
      long long v83 = (int8x16_t *)((char *)v83 + v16);
      v85 += v13;
      --v12;
    }
    while (v12);
  }
  int8x16_t v111 = (int8x16_t)vpaddq_s16(v86, v92);
  int8x16_t v112 = (int8x16_t)vpaddq_s16(v93, v94);
  int8x16_t v113 = (int8x16_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v111, v112), vuzp2q_s8(v111, v112)));
  int8x16_t v114 = (int8x16_t)vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v87, v89), vuzp1q_s16(v90, v91)));
  int8x16_t v115 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v87, v89), vuzp2q_s16(v90, v91)));
  *(_DWORD *)a2 = v113.i32[0];
  v111.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v111.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v111.i32[1];
  *(void *)a3 = v114.i64[0];
  int8x16_t result = vextq_s8(v114, v115, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(void *)(a3 + 32) = v115.i64[1];
  return result;
}

int8x16_t sub_1BBAC9704(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  int v4 = *((_DWORD *)a1 + 8);
  unsigned int v5 = *((_DWORD *)a1 + 12);
  BOOL v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v5) & 0x10);
  int16x8_t v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  int8x16_t v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 4))+ ((v5 >> 1) | 0xFFFFFFE)));
  int8x16_t v11 = (int8x16_t)vshlq_u64(v8, v10);
  int v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = v13 * v6;
  uint64_t v16 = a1[3];
  uint64_t v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 9)
  {
    int16x8_t v21 = 0uLL;
    int16x8_t v22 = 0uLL;
    int16x8_t v23 = 0uLL;
    int16x8_t v24 = 0uLL;
    int16x8_t v25 = 0uLL;
    int16x8_t v26 = 0uLL;
    int16x8_t v27 = 0uLL;
    if (v12 >= 1)
    {
      int v28 = v12;
      uint64_t v29 = v14;
      int v30 = v17;
      do
      {
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 * (v6 - 1) - 2), v9);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v15), v9);
        uint8x16_t v33 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 + v13 * v6 + 2), v9);
        uint8x16_t v34 = (uint8x16_t)vandq_s8(*v30, v9);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v32, v31);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v32, v33);
        int8x16_t v37 = (int8x16_t)vcgtq_u8(v31, v32);
        int8x16_t v38 = (int8x16_t)vcgtq_u8(v33, v32);
        int8x16_t v39 = vandq_s8(v38, v37);
        int8x16_t v40 = vandq_s8(v36, v35);
        int8x16_t v41 = veorq_s8(v36, v35);
        int8x16_t v42 = veorq_s8(v38, v37);
        int8x16_t v43 = vbicq_s8(v42, v41);
        int8x16_t v44 = vbicq_s8(v41, v42);
        int16x8_t v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v39);
        int16x8_t v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v43);
        int16x8_t v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v44);
        int16x8_t v7 = (int16x8_t)vsubq_s8((int8x16_t)v7, v40);
        int8x16_t v45 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8);
        int8x16_t v46 = (int8x16_t)vsubl_high_u8(v34, v32);
        int16x8_t v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v39)), v27), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        int16x8_t v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v43)), v26), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        int16x8_t v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v44)), v25), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v44.i8)));
        int16x8_t v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v40)), v24), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)));
        int v30 = (int8x16_t *)((char *)v30 + v16);
        v29 += v13;
        --v28;
      }
      while (v28);
    }
    int8x16_t v47 = (int8x16_t)vpaddq_s16(v23, v22);
    int8x16_t v48 = (int8x16_t)vpaddq_s16(v21, v7);
    int16x8_t v7 = (int16x8_t)vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v47, v48), vuzp2q_s8(v47, v48)));
    int32x4_t v20 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v27, v26), vuzp1q_s16(v25, v24)));
    int32x4_t v19 = vpaddlq_s16(vpaddq_s16(vuzp2q_s16(v27, v26), vuzp2q_s16(v25, v24)));
    unsigned int v18 = 8;
  }
  else
  {
    unsigned int v18 = 0;
    int8x16_t v11 = vandq_s8(v11, v9);
    int32x4_t v19 = 0uLL;
    int32x4_t v20 = 0uLL;
  }
  unint64_t v49 = (v4 - 8);
  if ((int)v18 < (int)v49)
  {
    unint64_t v50 = v18;
    uint64_t v51 = v13 + v13 * v6 + 2 * v18 + v14 + 2;
    uint64_t v52 = v13 * (v6 - 1) + 2 * v18 + v14 - 2;
    uint64_t v53 = v14 + v15 + 2 * v18;
    do
    {
      if (v12 < 1)
      {
        int16x8_t v61 = 0uLL;
        int16x8_t v64 = 0uLL;
        int16x8_t v63 = 0uLL;
        int16x8_t v62 = 0uLL;
        int16x8_t v55 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v59 = 0uLL;
        int16x8_t v56 = 0uLL;
      }
      else
      {
        uint64_t v54 = 0;
        int16x8_t v55 = 0uLL;
        int16x8_t v56 = 0uLL;
        uint64_t v57 = (uint8x8_t *)((char *)v17 + 2 * v50);
        int v58 = v12;
        int16x8_t v59 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v61 = 0uLL;
        int16x8_t v62 = 0uLL;
        int16x8_t v63 = 0uLL;
        int16x8_t v64 = 0uLL;
        do
        {
          uint8x16_t v65 = *(uint8x16_t *)(v53 + v54);
          uint8x16_t v66 = *(uint8x16_t *)(v52 + v54);
          uint8x16_t v67 = *(uint8x16_t *)(v51 + v54);
          int8x16_t v68 = (int8x16_t)vcgtq_u8(v65, v66);
          int8x16_t v69 = (int8x16_t)vcgtq_u8(v65, v67);
          int8x16_t v70 = (int8x16_t)vcgtq_u8(v66, v65);
          int8x16_t v71 = (int8x16_t)vcgtq_u8(v67, v65);
          int8x16_t v72 = vandq_s8(v71, v70);
          int8x16_t v73 = vandq_s8(v69, v68);
          int8x16_t v74 = veorq_s8(v69, v68);
          int8x16_t v75 = veorq_s8(v71, v70);
          int8x16_t v76 = vbicq_s8(v75, v74);
          int8x16_t v77 = vbicq_s8(v74, v75);
          int16x8_t v55 = (int16x8_t)vsubq_s8((int8x16_t)v55, v72);
          int16x8_t v62 = (int16x8_t)vsubq_s8((int8x16_t)v62, v76);
          int16x8_t v63 = (int16x8_t)vsubq_s8((int8x16_t)v63, v77);
          int16x8_t v64 = (int16x8_t)vsubq_s8((int8x16_t)v64, v73);
          int8x16_t v78 = (int8x16_t)vsubl_u8(*v57, *(uint8x8_t *)v65.i8);
          int8x16_t v79 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v57->i8, v65);
          int16x8_t v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v72)), v56), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          int16x8_t v59 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v76)), v59), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
          int16x8_t v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v77)), v60), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v77.i8)));
          int16x8_t v61 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v73)), v61), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v73.i8)));
          uint64_t v57 = (uint8x8_t *)((char *)v57 + v16);
          v54 += v13;
          --v58;
        }
        while (v58);
      }
      int8x16_t v80 = (int8x16_t)vpaddq_s16(v55, v62);
      int8x16_t v81 = (int8x16_t)vpaddq_s16(v63, v64);
      int16x8_t v7 = (int16x8_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v80, v81), vuzp2q_s8(v80, v81)));
      int32x4_t v20 = vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v56, v59), vuzp1q_s16(v60, v61)));
      v50 += 8;
      int32x4_t v19 = vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v56, v59), vuzp2q_s16(v60, v61)));
      v51 += 16;
      v52 += 16;
      v53 += 16;
    }
    while (v50 < v49);
    unsigned int v18 = v50;
  }
  if (v12 < 1)
  {
    int16x8_t v94 = 0uLL;
    int16x8_t v93 = 0uLL;
    int16x8_t v92 = 0uLL;
    int16x8_t v86 = 0uLL;
    int16x8_t v91 = 0uLL;
    int16x8_t v90 = 0uLL;
    int16x8_t v89 = 0uLL;
    int16x8_t v87 = 0uLL;
  }
  else
  {
    uint64_t v82 = 2 * v18;
    long long v83 = (int8x16_t *)((char *)v17 + v82);
    uint64_t v84 = v13 + v13 * v6 + 2;
    uint64_t v85 = v14 + v82;
    int16x8_t v86 = 0uLL;
    int16x8_t v87 = 0uLL;
    uint64_t v88 = v13 * (v6 - 1) - 2;
    int16x8_t v89 = 0uLL;
    int16x8_t v90 = 0uLL;
    int16x8_t v91 = 0uLL;
    int16x8_t v92 = 0uLL;
    int16x8_t v93 = 0uLL;
    int16x8_t v94 = 0uLL;
    do
    {
      uint8x16_t v95 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v88), v11);
      uint8x16_t v96 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v15), v11);
      uint8x16_t v97 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v84), v11);
      uint8x16_t v98 = (uint8x16_t)vandq_s8(*v83, v11);
      int8x16_t v99 = (int8x16_t)vcgtq_u8(v96, v95);
      int8x16_t v100 = (int8x16_t)vcgtq_u8(v96, v97);
      int8x16_t v101 = (int8x16_t)vcgtq_u8(v95, v96);
      int8x16_t v102 = (int8x16_t)vcgtq_u8(v97, v96);
      int8x16_t v103 = vandq_s8(v102, v101);
      int8x16_t v104 = vandq_s8(v100, v99);
      int8x16_t v105 = veorq_s8(v100, v99);
      int8x16_t v106 = veorq_s8(v102, v101);
      int8x16_t v107 = vbicq_s8(v106, v105);
      int8x16_t v108 = vbicq_s8(v105, v106);
      int16x8_t v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v103);
      int16x8_t v92 = (int16x8_t)vsubq_s8((int8x16_t)v92, v107);
      int16x8_t v93 = (int16x8_t)vsubq_s8((int8x16_t)v93, v108);
      int16x8_t v94 = (int16x8_t)vsubq_s8((int8x16_t)v94, v104);
      int8x16_t v109 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v98.i8, *(uint8x8_t *)v96.i8);
      int8x16_t v110 = (int8x16_t)vsubl_high_u8(v98, v96);
      int16x8_t v87 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v103)), v87), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v103.i8)));
      int16x8_t v89 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v107)), v89), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v107.i8)));
      int16x8_t v90 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v108)), v90), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v108.i8)));
      int16x8_t v91 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v104)), v91), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v104.i8)));
      long long v83 = (int8x16_t *)((char *)v83 + v16);
      v85 += v13;
      --v12;
    }
    while (v12);
  }
  int8x16_t v111 = (int8x16_t)vpaddq_s16(v86, v92);
  int8x16_t v112 = (int8x16_t)vpaddq_s16(v93, v94);
  int8x16_t v113 = (int8x16_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v111, v112), vuzp2q_s8(v111, v112)));
  int8x16_t v114 = (int8x16_t)vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v87, v89), vuzp1q_s16(v90, v91)));
  int8x16_t v115 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v87, v89), vuzp2q_s16(v90, v91)));
  *(_DWORD *)a2 = v113.i32[0];
  v111.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v111.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v111.i32[1];
  *(void *)a3 = v114.i64[0];
  int8x16_t result = vextq_s8(v114, v115, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(void *)(a3 + 32) = v115.i64[1];
  return result;
}

int8x16_t sub_1BBAC9C54(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 11);
  unsigned int v4 = *((_DWORD *)a1 + 12);
  uint64_t v5 = ~(v4 >> 2) & 1;
  unsigned int v6 = (v4 >> 3) | 0xFFFFFFFE;
  if (v3) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  int v8 = *((_DWORD *)a1 + 8);
  v9.i64[0] = 0;
  int v10 = v6 + *((_DWORD *)a1 + 9) + v7 - v3 - v5 + 1;
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = *a1 + v11 * v5;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[2] + v14 * v5;
  uint64_t v16 = v11 + v11 * v5;
  if (v8 <= 8)
  {
    uint64_t v52 = 0;
    uint64_t v18 = -v11;
    uint16x8_t v20 = 0uLL;
    int32x4_t v22 = 0uLL;
    int32x4_t v21 = 0uLL;
  }
  else
  {
    unint64_t v17 = 0;
    uint64_t v18 = -v11;
    int32x4_t v19 = (uint8x16_t *)(v12 + v16);
    uint16x8_t v20 = 0uLL;
    int32x4_t v21 = 0uLL;
    int32x4_t v22 = 0uLL;
    do
    {
      int16x8_t v23 = 0uLL;
      int16x8_t v24 = 0uLL;
      int16x8_t v25 = 0uLL;
      int16x8_t v26 = 0uLL;
      int16x8_t v27 = 0uLL;
      int16x8_t v28 = 0uLL;
      int16x8_t v29 = 0uLL;
      int16x8_t v30 = 0uLL;
      if (v10 >= 1)
      {
        int v31 = 0;
        uint8x16_t v32 = (uint8x16_t *)(v13 + 2 * v17);
        uint8x16_t v33 = *v32;
        uint8x16_t v34 = *(uint8x16_t *)((char *)v32 - v11);
        int8x16_t v35 = (uint8x8_t *)(v15 + 2 * v17);
        int8x16_t v36 = v19;
        do
        {
          uint8x16_t v37 = *v36;
          int8x16_t v38 = (int8x16_t)vcgtq_u8(v33, *v36);
          int8x16_t v39 = (int8x16_t)vcgtq_u8(v33, v34);
          int8x16_t v40 = (int8x16_t)vcgtq_u8(*v36, v33);
          int8x16_t v41 = (int8x16_t)vcgtq_u8(v34, v33);
          int8x16_t v42 = vandq_s8(v40, v41);
          int8x16_t v43 = vandq_s8(v38, v39);
          int8x16_t v44 = veorq_s8(v38, v39);
          int8x16_t v45 = veorq_s8(v40, v41);
          int8x16_t v46 = vbicq_s8(v45, v44);
          int8x16_t v47 = vbicq_s8(v44, v45);
          int16x8_t v26 = (int16x8_t)vsubq_s8((int8x16_t)v26, v42);
          int16x8_t v25 = (int16x8_t)vsubq_s8((int8x16_t)v25, v46);
          int16x8_t v24 = (int16x8_t)vsubq_s8((int8x16_t)v24, v47);
          int16x8_t v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v43);
          int8x16_t v48 = (int8x16_t)vsubl_u8(*v35, *(uint8x8_t *)v33.i8);
          int8x16_t v49 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v35->i8, v33);
          int16x8_t v30 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v42)), v30), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)));
          int16x8_t v29 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v46)), v29), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v46.i8)));
          int16x8_t v28 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v47)), v28), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v47.i8)));
          int8x16_t v35 = (uint8x8_t *)((char *)v35 + v14);
          ++v31;
          int16x8_t v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v43)), v27), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
          int8x16_t v36 = (uint8x16_t *)((char *)v36 + v11);
          uint8x16_t v34 = v33;
          uint8x16_t v33 = v37;
        }
        while (v31 < v10);
      }
      int8x16_t v50 = (int8x16_t)vpaddq_s16(v26, v25);
      int8x16_t v51 = (int8x16_t)vpaddq_s16(v24, v23);
      uint16x8_t v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v50, v51), vuzp2q_s8(v50, v51)));
      int32x4_t v21 = vpadalq_s16(v21, vpaddq_s16(vuzp1q_s16(v30, v29), vuzp1q_s16(v28, v27)));
      int32x4_t v22 = vpadalq_s16(v22, vpaddq_s16(vuzp2q_s16(v30, v29), vuzp2q_s16(v28, v27)));
      v17 += 8;
      ++v19;
    }
    while (v17 < (v8 - 8));
    uint64_t v52 = (2 * (v8 + 2147483639) + 16) & 0xFFFFFFF0;
  }
  if (v10 < 1)
  {
    int16x8_t v68 = 0uLL;
    int16x8_t v67 = 0uLL;
    int16x8_t v66 = 0uLL;
    int16x8_t v59 = 0uLL;
    int16x8_t v65 = 0uLL;
    int16x8_t v64 = 0uLL;
    int16x8_t v63 = 0uLL;
    int16x8_t v60 = 0uLL;
  }
  else
  {
    int v53 = 0;
    v9.u64[1] = (unint64_t)vdup_n_s32(-16 * ((a1[4] & 4u) + *((_DWORD *)a1 + 10)));
    v54.i64[0] = -1;
    v54.i64[1] = -1;
    int8x16_t v55 = (int8x16_t)vshlq_u64(v54, v9);
    int16x8_t v56 = (int8x16_t *)(v13 + v52);
    uint8x16_t v57 = (uint8x16_t)vandq_s8(*v56, v55);
    uint8x16_t v58 = (uint8x16_t)vandq_s8(*(int8x16_t *)((char *)v56 + v18), v55);
    int16x8_t v59 = 0uLL;
    int16x8_t v60 = 0uLL;
    int16x8_t v61 = (int8x16_t *)(v15 + v52);
    int16x8_t v62 = (int8x16_t *)(v12 + v52 + v16);
    int16x8_t v63 = 0uLL;
    int16x8_t v64 = 0uLL;
    int16x8_t v65 = 0uLL;
    int16x8_t v66 = 0uLL;
    int16x8_t v67 = 0uLL;
    int16x8_t v68 = 0uLL;
    do
    {
      uint8x16_t v69 = (uint8x16_t)vandq_s8(*v62, v55);
      uint8x16_t v70 = (uint8x16_t)vandq_s8(*v61, v55);
      int8x16_t v71 = (int8x16_t)vcgtq_u8(v57, v69);
      int8x16_t v72 = (int8x16_t)vcgtq_u8(v57, v58);
      int8x16_t v73 = (int8x16_t)vcgtq_u8(v69, v57);
      int8x16_t v74 = (int8x16_t)vcgtq_u8(v58, v57);
      int8x16_t v75 = vandq_s8(v73, v74);
      int8x16_t v76 = vandq_s8(v71, v72);
      int8x16_t v77 = veorq_s8(v71, v72);
      int8x16_t v78 = veorq_s8(v73, v74);
      int8x16_t v79 = vbicq_s8(v78, v77);
      int8x16_t v80 = vbicq_s8(v77, v78);
      int16x8_t v59 = (int16x8_t)vsubq_s8((int8x16_t)v59, v75);
      int16x8_t v66 = (int16x8_t)vsubq_s8((int8x16_t)v66, v79);
      int16x8_t v67 = (int16x8_t)vsubq_s8((int8x16_t)v67, v80);
      int16x8_t v68 = (int16x8_t)vsubq_s8((int8x16_t)v68, v76);
      int8x16_t v81 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v70.i8, *(uint8x8_t *)v57.i8);
      int8x16_t v82 = (int8x16_t)vsubl_high_u8(v70, v57);
      int16x8_t v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v75)), v60), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v75.i8)));
      int16x8_t v63 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v79)), v63), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v79.i8)));
      int16x8_t v64 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v80)), v64), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v80.i8)));
      int16x8_t v61 = (int8x16_t *)((char *)v61 + v14);
      ++v53;
      int16x8_t v65 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v76)), v65), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
      int16x8_t v62 = (int8x16_t *)((char *)v62 + v11);
      uint8x16_t v58 = v57;
      uint8x16_t v57 = v69;
    }
    while (v53 < v10);
  }
  int8x16_t v83 = (int8x16_t)vpaddq_s16(v59, v66);
  int8x16_t v84 = (int8x16_t)vpaddq_s16(v67, v68);
  int8x16_t v85 = (int8x16_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v83, v84), vuzp2q_s8(v83, v84)));
  int8x16_t v86 = (int8x16_t)vpadalq_s16(v21, vpaddq_s16(vuzp1q_s16(v60, v63), vuzp1q_s16(v64, v65)));
  int8x16_t v87 = (int8x16_t)vpadalq_s16(v22, vpaddq_s16(vuzp2q_s16(v60, v63), vuzp2q_s16(v64, v65)));
  *(_DWORD *)a2 = v85.i32[0];
  int8x8_t v88 = (int8x8_t)vextq_s8(v85, v85, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v85.i8, v88, 4uLL);
  *(_DWORD *)(a2 + 16) = v88.i32[1];
  *(void *)a3 = v86.i64[0];
  int8x16_t result = vextq_s8(v86, v87, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(void *)(a3 + 32) = v87.i64[1];
  return result;
}

int8x16_t sub_1BBACA010(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  int v6 = *((_DWORD *)a1 + 8);
  unsigned int v7 = *((_DWORD *)a1 + 12);
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v7) & 0x10);
  int16x8_t v8 = 0uLL;
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  int8x16_t v10 = (int8x16_t)vshlq_u64(v9, a4);
  v11.i64[0] = 0;
  v11.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v6 & 4))+ ((v7 >> 1) | 0xFFFFFFE)));
  int8x16_t v12 = (int8x16_t)vshlq_u64(v9, v11);
  int v13 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
  unint64_t v14 = (v6 - 8);
  if (v6 > 8)
  {
    uint64_t v16 = a1[1];
    int16x8_t v20 = 0uLL;
    uint64_t v17 = a1[3];
    int16x8_t v21 = 0uLL;
    int16x8_t v22 = 0uLL;
    int16x8_t v23 = 0uLL;
    int16x8_t v24 = 0uLL;
    int16x8_t v25 = 0uLL;
    int16x8_t v26 = 0uLL;
    if (v13 >= 1)
    {
      int v27 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
      uint64_t v28 = *a1;
      int16x8_t v29 = (int8x16_t *)a1[2];
      do
      {
        uint8x16_t v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v28 - 2), v10);
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)v28, v10);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v28 + 2), v10);
        uint8x16_t v33 = (uint8x16_t)vandq_s8(*v29, v10);
        int8x16_t v34 = (int8x16_t)vcgtq_u8(v31, v30);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v31, v32);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v30, v31);
        int8x16_t v37 = (int8x16_t)vcgtq_u8(v32, v31);
        int8x16_t v38 = vandq_s8(v37, v36);
        int8x16_t v39 = vandq_s8(v35, v34);
        int8x16_t v40 = veorq_s8(v35, v34);
        int8x16_t v41 = veorq_s8(v37, v36);
        int8x16_t v42 = vbicq_s8(v41, v40);
        int8x16_t v43 = vbicq_s8(v40, v41);
        int16x8_t v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v38);
        int16x8_t v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v42);
        int16x8_t v20 = (int16x8_t)vsubq_s8((int8x16_t)v20, v43);
        int16x8_t v8 = (int16x8_t)vsubq_s8((int8x16_t)v8, v39);
        int8x16_t v44 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v33.i8, *(uint8x8_t *)v31.i8);
        int8x16_t v45 = (int8x16_t)vsubl_high_u8(v33, v31);
        int16x8_t v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v38)), v26), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)));
        int16x8_t v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v42)), v25), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)));
        int16x8_t v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v43)), v24), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        int16x8_t v23 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v39)), v23), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        v28 += v16;
        int16x8_t v29 = (int8x16_t *)((char *)v29 + v17);
        --v27;
      }
      while (v27);
    }
    int8x16_t v46 = (int8x16_t)vpaddq_s16(v22, v21);
    int8x16_t v47 = (int8x16_t)vpaddq_s16(v20, v8);
    uint16x8_t v18 = vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v46, v47), vuzp2q_s8(v46, v47)));
    int16x8_t v48 = vuzp1q_s16(v24, v23);
    int16x8_t v49 = vpaddq_s16(vuzp2q_s16(v26, v25), vuzp2q_s16(v24, v23));
    int32x4_t v19 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v26, v25), v48));
    int16x8_t v8 = (int16x8_t)vpaddlq_s16(v49);
    LODWORD(v15) = 8;
  }
  else
  {
    LODWORD(v15) = 0;
    int8x16_t v12 = vandq_s8(v12, v10);
    uint64_t v16 = a1[1];
    uint64_t v17 = a1[3];
    uint16x8_t v18 = 0uLL;
    int32x4_t v19 = 0uLL;
  }
  if ((int)v15 < (int)v14)
  {
    unint64_t v15 = v15;
    do
    {
      if (v13 < 1)
      {
        int16x8_t v56 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v59 = 0uLL;
        int16x8_t v57 = 0uLL;
        int16x8_t v50 = 0uLL;
        int16x8_t v55 = 0uLL;
        int16x8_t v54 = 0uLL;
        int16x8_t v51 = 0uLL;
      }
      else
      {
        int16x8_t v50 = 0uLL;
        int16x8_t v51 = 0uLL;
        uint64_t v52 = (uint8x8_t *)(v5 + 2 * v15);
        int v53 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
        int16x8_t v54 = 0uLL;
        int16x8_t v55 = 0uLL;
        int16x8_t v56 = 0uLL;
        int16x8_t v57 = 0uLL;
        uint64_t v58 = v4 + 2 * v15;
        int16x8_t v59 = 0uLL;
        int16x8_t v60 = 0uLL;
        do
        {
          uint8x16_t v61 = *(uint8x16_t *)(v58 - 2);
          uint8x16_t v62 = *(uint8x16_t *)(v58 + 2);
          int8x16_t v63 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v58, v61);
          int8x16_t v64 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v58, v62);
          int8x16_t v65 = (int8x16_t)vcgtq_u8(v61, *(uint8x16_t *)v58);
          int8x16_t v66 = (int8x16_t)vcgtq_u8(v62, *(uint8x16_t *)v58);
          int8x16_t v67 = vandq_s8(v66, v65);
          int8x16_t v68 = vandq_s8(v64, v63);
          int8x16_t v69 = veorq_s8(v64, v63);
          int8x16_t v70 = veorq_s8(v66, v65);
          int8x16_t v71 = vbicq_s8(v70, v69);
          int8x16_t v72 = vbicq_s8(v69, v70);
          int16x8_t v50 = (int16x8_t)vsubq_s8((int8x16_t)v50, v67);
          int16x8_t v57 = (int16x8_t)vsubq_s8((int8x16_t)v57, v71);
          int16x8_t v59 = (int16x8_t)vsubq_s8((int8x16_t)v59, v72);
          int16x8_t v60 = (int16x8_t)vsubq_s8((int8x16_t)v60, v68);
          int8x16_t v73 = (int8x16_t)vsubl_u8(*v52, *(uint8x8_t *)v58);
          int8x16_t v74 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v52->i8, *(uint8x16_t *)v58);
          int16x8_t v51 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v67)), v51), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)));
          int16x8_t v54 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v71)), v54), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)));
          int16x8_t v55 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v72)), v55), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          int16x8_t v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v68)), v56), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v68.i8)));
          v58 += v16;
          uint64_t v52 = (uint8x8_t *)((char *)v52 + v17);
          --v53;
        }
        while (v53);
      }
      int8x16_t v75 = (int8x16_t)vpaddq_s16(v50, v57);
      int8x16_t v76 = (int8x16_t)vpaddq_s16(v59, v60);
      uint16x8_t v18 = vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v75, v76), vuzp2q_s8(v75, v76)));
      int32x4_t v19 = vpadalq_s16(v19, vpaddq_s16(vuzp1q_s16(v51, v54), vuzp1q_s16(v55, v56)));
      int16x8_t v8 = (int16x8_t)vpadalq_s16((int32x4_t)v8, vpaddq_s16(vuzp2q_s16(v51, v54), vuzp2q_s16(v55, v56)));
      v15 += 8;
    }
    while (v15 < v14);
  }
  if (v13 < 1)
  {
    int16x8_t v87 = 0uLL;
    int16x8_t v86 = 0uLL;
    int16x8_t v85 = 0uLL;
    int16x8_t v77 = 0uLL;
    int16x8_t v84 = 0uLL;
    int16x8_t v83 = 0uLL;
    int16x8_t v82 = 0uLL;
    int16x8_t v79 = 0uLL;
  }
  else
  {
    int16x8_t v77 = 0uLL;
    uint64_t v78 = (2 * v15);
    int16x8_t v79 = 0uLL;
    int8x16_t v80 = (int8x16_t *)(v5 + v78);
    uint64_t v81 = v4 + v78;
    int16x8_t v82 = 0uLL;
    int16x8_t v83 = 0uLL;
    int16x8_t v84 = 0uLL;
    int16x8_t v85 = 0uLL;
    int16x8_t v86 = 0uLL;
    int16x8_t v87 = 0uLL;
    do
    {
      uint8x16_t v88 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v81 - 2), v12);
      uint8x16_t v89 = (uint8x16_t)vandq_s8(*(int8x16_t *)v81, v12);
      uint8x16_t v90 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v81 + 2), v12);
      uint8x16_t v91 = (uint8x16_t)vandq_s8(*v80, v12);
      int8x16_t v92 = (int8x16_t)vcgtq_u8(v89, v88);
      int8x16_t v93 = (int8x16_t)vcgtq_u8(v89, v90);
      int8x16_t v94 = (int8x16_t)vcgtq_u8(v88, v89);
      int8x16_t v95 = (int8x16_t)vcgtq_u8(v90, v89);
      int8x16_t v96 = vandq_s8(v95, v94);
      int8x16_t v97 = vandq_s8(v93, v92);
      int8x16_t v98 = veorq_s8(v93, v92);
      int8x16_t v99 = veorq_s8(v95, v94);
      int8x16_t v100 = vbicq_s8(v99, v98);
      int8x16_t v101 = vbicq_s8(v98, v99);
      int16x8_t v77 = (int16x8_t)vsubq_s8((int8x16_t)v77, v96);
      int16x8_t v85 = (int16x8_t)vsubq_s8((int8x16_t)v85, v100);
      int16x8_t v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v101);
      int16x8_t v87 = (int16x8_t)vsubq_s8((int8x16_t)v87, v97);
      int8x16_t v102 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v91.i8, *(uint8x8_t *)v89.i8);
      int8x16_t v103 = (int8x16_t)vsubl_high_u8(v91, v89);
      int16x8_t v79 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v96)), v79), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)));
      int16x8_t v82 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v100)), v82), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v100.i8)));
      int16x8_t v83 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v101)), v83), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v101.i8)));
      int16x8_t v84 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v97)), v84), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)));
      v81 += v16;
      int8x16_t v80 = (int8x16_t *)((char *)v80 + v17);
      --v13;
    }
    while (v13);
  }
  int8x16_t v104 = (int8x16_t)vpaddq_s16(v77, v85);
  int8x16_t v105 = (int8x16_t)vpaddq_s16(v86, v87);
  int8x16_t v106 = (int8x16_t)vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v104, v105), vuzp2q_s8(v104, v105)));
  int8x16_t v107 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp1q_s16(v79, v82), vuzp1q_s16(v83, v84)));
  int8x16_t v108 = (int8x16_t)vpadalq_s16((int32x4_t)v8, vpaddq_s16(vuzp2q_s16(v79, v82), vuzp2q_s16(v83, v84)));
  *(_DWORD *)a2 = v106.i32[0];
  v104.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v106.i8, *(int8x8_t *)v104.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v104.i32[1];
  *(void *)a3 = v107.i64[0];
  int8x16_t result = vextq_s8(v107, v108, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(void *)(a3 + 32) = v108.i64[1];
  return result;
}

int32x4_t sub_1BBACA4D4(uint64_t *a1, _DWORD *a2, void *a3, uint64x2_t a4)
{
  int v4 = *((_DWORD *)a1 + 8);
  unsigned int v5 = *((_DWORD *)a1 + 12);
  BOOL v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v5) & 8);
  int32x4_t v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  int8x16_t v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 8))+ ((v5 >> 1) | 0x1FFFFFFE)));
  int8x16_t v11 = (int8x16_t)vshlq_u64(v8, v10);
  int v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = v13 * v6;
  uint64_t v16 = a1[3];
  uint64_t v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 17)
  {
    if (v12 < 1)
    {
      int8x16_t v28 = 0uLL;
      int8x16_t v27 = 0uLL;
      int8x16_t v26 = 0uLL;
      int8x16_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
    }
    else
    {
      int8x16_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      int v23 = v12;
      uint64_t v24 = v14;
      int16x8_t v25 = v17;
      int8x16_t v26 = 0uLL;
      int8x16_t v27 = 0uLL;
      int8x16_t v28 = 0uLL;
      do
      {
        uint8x16_t v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 + v13 * v6 - 1), v9);
        uint8x16_t v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v15), v9);
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 * (v6 - 1) + 1), v9);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*v25, v9);
        int8x16_t v33 = (int8x16_t)vcgtq_u8(v30, v29);
        int8x16_t v34 = (int8x16_t)vcgtq_u8(v30, v31);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v29, v30);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v31, v30);
        int8x16_t v37 = vandq_s8(v36, v35);
        int8x16_t v38 = vandq_s8(v34, v33);
        int8x16_t v39 = veorq_s8(v34, v33);
        int8x16_t v40 = veorq_s8(v36, v35);
        int8x16_t v41 = vbicq_s8(v40, v39);
        int8x16_t v42 = vbicq_s8(v39, v40);
        int8x16_t v21 = vsubq_s8(v21, v37);
        int8x16_t v26 = vsubq_s8(v26, v41);
        int8x16_t v27 = vsubq_s8(v27, v42);
        int8x16_t v28 = vsubq_s8(v28, v38);
        int8x16_t v43 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v30.i8);
        int8x16_t v44 = (int8x16_t)vsubl_high_u8(v32, v30);
        int32x4_t v22 = vpadalq_s16(v22, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v37))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v41)))));
        int32x4_t v7 = vpadalq_s16(v7, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v42))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v38)))));
        int16x8_t v25 = (int8x16_t *)((char *)v25 + v16);
        v24 += v13;
        --v23;
      }
      while (v23);
    }
    uint16x8_t v20 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v21, v26));
    uint16x8_t v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v27, v28));
    int32x4_t v7 = vpaddq_s32(v22, v7);
    unsigned int v18 = 16;
  }
  else
  {
    unsigned int v18 = 0;
    int8x16_t v11 = vandq_s8(v11, v9);
    uint16x8_t v19 = 0uLL;
    uint16x8_t v20 = 0uLL;
  }
  unint64_t v45 = (v4 - 16);
  if ((int)v18 < (int)v45)
  {
    unint64_t v46 = v18;
    uint64_t v47 = v13 * (v6 - 1) + v18 + v14 + 1;
    uint64_t v48 = v13 + v13 * v6 + v18 + v14 - 1;
    uint64_t v49 = v14 + v15 + v18;
    do
    {
      if (v12 < 1)
      {
        int32x4_t v55 = 0uLL;
        int8x16_t v58 = 0uLL;
        int8x16_t v57 = 0uLL;
        int8x16_t v56 = 0uLL;
        int8x16_t v52 = 0uLL;
        int32x4_t v53 = 0uLL;
      }
      else
      {
        uint64_t v50 = 0;
        int16x8_t v51 = (uint8x8_t *)&v17->i8[v46];
        int8x16_t v52 = 0uLL;
        int32x4_t v53 = 0uLL;
        int v54 = v12;
        int32x4_t v55 = 0uLL;
        int8x16_t v56 = 0uLL;
        int8x16_t v57 = 0uLL;
        int8x16_t v58 = 0uLL;
        do
        {
          uint8x16_t v59 = *(uint8x16_t *)(v49 + v50);
          uint8x16_t v60 = *(uint8x16_t *)(v48 + v50);
          uint8x16_t v61 = *(uint8x16_t *)(v47 + v50);
          int8x16_t v62 = (int8x16_t)vcgtq_u8(v59, v60);
          int8x16_t v63 = (int8x16_t)vcgtq_u8(v59, v61);
          int8x16_t v64 = (int8x16_t)vcgtq_u8(v60, v59);
          int8x16_t v65 = (int8x16_t)vcgtq_u8(v61, v59);
          int8x16_t v66 = vandq_s8(v65, v64);
          int8x16_t v67 = vandq_s8(v63, v62);
          int8x16_t v68 = veorq_s8(v63, v62);
          int8x16_t v69 = veorq_s8(v65, v64);
          int8x16_t v70 = vbicq_s8(v69, v68);
          int8x16_t v71 = vbicq_s8(v68, v69);
          int8x16_t v52 = vsubq_s8(v52, v66);
          int8x16_t v56 = vsubq_s8(v56, v70);
          int8x16_t v57 = vsubq_s8(v57, v71);
          int8x16_t v58 = vsubq_s8(v58, v67);
          int8x16_t v72 = (int8x16_t)vsubl_u8(*v51, *(uint8x8_t *)v59.i8);
          int8x16_t v73 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, v59);
          int32x4_t v53 = vpadalq_s16(v53, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
          int32x4_t v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
          int16x8_t v51 = (uint8x8_t *)((char *)v51 + v16);
          v50 += v13;
          --v54;
        }
        while (v54);
      }
      uint16x8_t v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v52, v56));
      uint16x8_t v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v57, v58));
      v46 += 16;
      int32x4_t v7 = vaddq_s32(vpaddq_s32(v53, v55), v7);
      v47 += 16;
      v48 += 16;
      v49 += 16;
    }
    while (v46 < v45);
    unsigned int v18 = v46;
  }
  if (v12 < 1)
  {
    int32x4_t v80 = 0uLL;
    int8x16_t v83 = 0uLL;
    int8x16_t v82 = 0uLL;
    int8x16_t v81 = 0uLL;
    int8x16_t v78 = 0uLL;
    int32x4_t v79 = 0uLL;
  }
  else
  {
    int8x16_t v74 = (int8x16_t *)((char *)v17 + v18);
    uint64_t v75 = v13 * (v6 - 1) + 1;
    uint64_t v76 = v14 + v18;
    uint64_t v77 = v13 + v13 * v6 - 1;
    int8x16_t v78 = 0uLL;
    int32x4_t v79 = 0uLL;
    int32x4_t v80 = 0uLL;
    int8x16_t v81 = 0uLL;
    int8x16_t v82 = 0uLL;
    int8x16_t v83 = 0uLL;
    do
    {
      uint8x16_t v84 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v77), v11);
      uint8x16_t v85 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v15), v11);
      uint8x16_t v86 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v75), v11);
      uint8x16_t v87 = (uint8x16_t)vandq_s8(*v74, v11);
      int8x16_t v88 = (int8x16_t)vcgtq_u8(v85, v84);
      int8x16_t v89 = (int8x16_t)vcgtq_u8(v85, v86);
      int8x16_t v90 = (int8x16_t)vcgtq_u8(v84, v85);
      int8x16_t v91 = (int8x16_t)vcgtq_u8(v86, v85);
      int8x16_t v92 = vandq_s8(v91, v90);
      int8x16_t v93 = vandq_s8(v89, v88);
      int8x16_t v94 = veorq_s8(v89, v88);
      int8x16_t v95 = veorq_s8(v91, v90);
      int8x16_t v96 = vbicq_s8(v95, v94);
      int8x16_t v97 = vbicq_s8(v94, v95);
      int8x16_t v78 = vsubq_s8(v78, v92);
      int8x16_t v81 = vsubq_s8(v81, v96);
      int8x16_t v82 = vsubq_s8(v82, v97);
      int8x16_t v83 = vsubq_s8(v83, v93);
      int8x16_t v98 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v85.i8);
      int8x16_t v99 = (int8x16_t)vsubl_high_u8(v87, v85);
      int32x4_t v79 = vpadalq_s16(v79, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v92.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v92))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v96)))));
      int32x4_t v80 = vpadalq_s16(v80, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v97))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v93.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v93)))));
      int8x16_t v74 = (int8x16_t *)((char *)v74 + v16);
      v76 += v13;
      --v12;
    }
    while (v12);
  }
  int32x4_t result = vaddq_s32(vpaddq_s32(v79, v80), v7);
  int16x8_t v101 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v78, v81)), (int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v82, v83)));
  v101.i64[0] = vpaddq_s16(v101, v101).u64[0];
  *a2 = v101.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v101.i32[1];
  *a3 = result.i64[0];
  *(void *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1BBACA9A0(uint64_t *a1, _DWORD *a2, void *a3, uint64x2_t a4)
{
  int v4 = *((_DWORD *)a1 + 8);
  unsigned int v5 = *((_DWORD *)a1 + 12);
  BOOL v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v5) & 8);
  int32x4_t v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  int8x16_t v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 8))+ ((v5 >> 1) | 0x1FFFFFFE)));
  int8x16_t v11 = (int8x16_t)vshlq_u64(v8, v10);
  int v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = v13 * v6;
  uint64_t v16 = a1[3];
  uint64_t v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 17)
  {
    if (v12 < 1)
    {
      int8x16_t v28 = 0uLL;
      int8x16_t v27 = 0uLL;
      int8x16_t v26 = 0uLL;
      int8x16_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
    }
    else
    {
      int8x16_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      int v23 = v12;
      uint64_t v24 = v14;
      int16x8_t v25 = v17;
      int8x16_t v26 = 0uLL;
      int8x16_t v27 = 0uLL;
      int8x16_t v28 = 0uLL;
      do
      {
        uint8x16_t v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 * (v6 - 1) - 1), v9);
        uint8x16_t v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v15), v9);
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 + v13 * v6 + 1), v9);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*v25, v9);
        int8x16_t v33 = (int8x16_t)vcgtq_u8(v30, v29);
        int8x16_t v34 = (int8x16_t)vcgtq_u8(v30, v31);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v29, v30);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v31, v30);
        int8x16_t v37 = vandq_s8(v36, v35);
        int8x16_t v38 = vandq_s8(v34, v33);
        int8x16_t v39 = veorq_s8(v34, v33);
        int8x16_t v40 = veorq_s8(v36, v35);
        int8x16_t v41 = vbicq_s8(v40, v39);
        int8x16_t v42 = vbicq_s8(v39, v40);
        int8x16_t v21 = vsubq_s8(v21, v37);
        int8x16_t v26 = vsubq_s8(v26, v41);
        int8x16_t v27 = vsubq_s8(v27, v42);
        int8x16_t v28 = vsubq_s8(v28, v38);
        int8x16_t v43 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v30.i8);
        int8x16_t v44 = (int8x16_t)vsubl_high_u8(v32, v30);
        int32x4_t v22 = vpadalq_s16(v22, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v37))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v41)))));
        int32x4_t v7 = vpadalq_s16(v7, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v42))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v38)))));
        int16x8_t v25 = (int8x16_t *)((char *)v25 + v16);
        v24 += v13;
        --v23;
      }
      while (v23);
    }
    uint16x8_t v20 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v21, v26));
    uint16x8_t v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v27, v28));
    int32x4_t v7 = vpaddq_s32(v22, v7);
    unsigned int v18 = 16;
  }
  else
  {
    unsigned int v18 = 0;
    int8x16_t v11 = vandq_s8(v11, v9);
    uint16x8_t v19 = 0uLL;
    uint16x8_t v20 = 0uLL;
  }
  unint64_t v45 = (v4 - 16);
  if ((int)v18 < (int)v45)
  {
    unint64_t v46 = v18;
    uint64_t v47 = v13 + v13 * v6 + v18 + v14 + 1;
    uint64_t v48 = v13 * (v6 - 1) + v18 + v14 - 1;
    uint64_t v49 = v14 + v15 + v18;
    do
    {
      if (v12 < 1)
      {
        int32x4_t v55 = 0uLL;
        int8x16_t v58 = 0uLL;
        int8x16_t v57 = 0uLL;
        int8x16_t v56 = 0uLL;
        int8x16_t v52 = 0uLL;
        int32x4_t v53 = 0uLL;
      }
      else
      {
        uint64_t v50 = 0;
        int16x8_t v51 = (uint8x8_t *)&v17->i8[v46];
        int8x16_t v52 = 0uLL;
        int32x4_t v53 = 0uLL;
        int v54 = v12;
        int32x4_t v55 = 0uLL;
        int8x16_t v56 = 0uLL;
        int8x16_t v57 = 0uLL;
        int8x16_t v58 = 0uLL;
        do
        {
          uint8x16_t v59 = *(uint8x16_t *)(v49 + v50);
          uint8x16_t v60 = *(uint8x16_t *)(v48 + v50);
          uint8x16_t v61 = *(uint8x16_t *)(v47 + v50);
          int8x16_t v62 = (int8x16_t)vcgtq_u8(v59, v60);
          int8x16_t v63 = (int8x16_t)vcgtq_u8(v59, v61);
          int8x16_t v64 = (int8x16_t)vcgtq_u8(v60, v59);
          int8x16_t v65 = (int8x16_t)vcgtq_u8(v61, v59);
          int8x16_t v66 = vandq_s8(v65, v64);
          int8x16_t v67 = vandq_s8(v63, v62);
          int8x16_t v68 = veorq_s8(v63, v62);
          int8x16_t v69 = veorq_s8(v65, v64);
          int8x16_t v70 = vbicq_s8(v69, v68);
          int8x16_t v71 = vbicq_s8(v68, v69);
          int8x16_t v52 = vsubq_s8(v52, v66);
          int8x16_t v56 = vsubq_s8(v56, v70);
          int8x16_t v57 = vsubq_s8(v57, v71);
          int8x16_t v58 = vsubq_s8(v58, v67);
          int8x16_t v72 = (int8x16_t)vsubl_u8(*v51, *(uint8x8_t *)v59.i8);
          int8x16_t v73 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, v59);
          int32x4_t v53 = vpadalq_s16(v53, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
          int32x4_t v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
          int16x8_t v51 = (uint8x8_t *)((char *)v51 + v16);
          v50 += v13;
          --v54;
        }
        while (v54);
      }
      uint16x8_t v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v52, v56));
      uint16x8_t v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v57, v58));
      v46 += 16;
      int32x4_t v7 = vaddq_s32(vpaddq_s32(v53, v55), v7);
      v47 += 16;
      v48 += 16;
      v49 += 16;
    }
    while (v46 < v45);
    unsigned int v18 = v46;
  }
  if (v12 < 1)
  {
    int32x4_t v80 = 0uLL;
    int8x16_t v83 = 0uLL;
    int8x16_t v82 = 0uLL;
    int8x16_t v81 = 0uLL;
    int8x16_t v78 = 0uLL;
    int32x4_t v79 = 0uLL;
  }
  else
  {
    int8x16_t v74 = (int8x16_t *)((char *)v17 + v18);
    uint64_t v75 = v13 + v13 * v6 + 1;
    uint64_t v76 = v14 + v18;
    uint64_t v77 = v13 * (v6 - 1) - 1;
    int8x16_t v78 = 0uLL;
    int32x4_t v79 = 0uLL;
    int32x4_t v80 = 0uLL;
    int8x16_t v81 = 0uLL;
    int8x16_t v82 = 0uLL;
    int8x16_t v83 = 0uLL;
    do
    {
      uint8x16_t v84 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v77), v11);
      uint8x16_t v85 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v15), v11);
      uint8x16_t v86 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v75), v11);
      uint8x16_t v87 = (uint8x16_t)vandq_s8(*v74, v11);
      int8x16_t v88 = (int8x16_t)vcgtq_u8(v85, v84);
      int8x16_t v89 = (int8x16_t)vcgtq_u8(v85, v86);
      int8x16_t v90 = (int8x16_t)vcgtq_u8(v84, v85);
      int8x16_t v91 = (int8x16_t)vcgtq_u8(v86, v85);
      int8x16_t v92 = vandq_s8(v91, v90);
      int8x16_t v93 = vandq_s8(v89, v88);
      int8x16_t v94 = veorq_s8(v89, v88);
      int8x16_t v95 = veorq_s8(v91, v90);
      int8x16_t v96 = vbicq_s8(v95, v94);
      int8x16_t v97 = vbicq_s8(v94, v95);
      int8x16_t v78 = vsubq_s8(v78, v92);
      int8x16_t v81 = vsubq_s8(v81, v96);
      int8x16_t v82 = vsubq_s8(v82, v97);
      int8x16_t v83 = vsubq_s8(v83, v93);
      int8x16_t v98 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v85.i8);
      int8x16_t v99 = (int8x16_t)vsubl_high_u8(v87, v85);
      int32x4_t v79 = vpadalq_s16(v79, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v92.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v92))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v96)))));
      int32x4_t v80 = vpadalq_s16(v80, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v97))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v93.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v93)))));
      int8x16_t v74 = (int8x16_t *)((char *)v74 + v16);
      v76 += v13;
      --v12;
    }
    while (v12);
  }
  int32x4_t result = vaddq_s32(vpaddq_s32(v79, v80), v7);
  int16x8_t v101 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v78, v81)), (int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v82, v83)));
  v101.i64[0] = vpaddq_s16(v101, v101).u64[0];
  *a2 = v101.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v101.i32[1];
  *a3 = result.i64[0];
  *(void *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1BBACAE6C(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 11);
  unsigned int v4 = *((_DWORD *)a1 + 12);
  uint64_t v5 = ~(v4 >> 2) & 1;
  unsigned int v6 = (v4 >> 3) | 0xFFFFFFFE;
  if (v3) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  int v8 = *((_DWORD *)a1 + 8);
  v9.i64[0] = 0;
  int v10 = v6 + *((_DWORD *)a1 + 9) + v7 - v3 - v5 + 1;
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = *a1 + v11 * v5;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[2] + v14 * v5;
  uint64_t v16 = v11 + v11 * v5;
  unint64_t v17 = 0;
  if (v8 <= 16)
  {
    int32x4_t v19 = 0uLL;
    uint16x8_t v21 = 0uLL;
    uint16x8_t v20 = 0uLL;
  }
  else
  {
    unsigned int v18 = (uint8x16_t *)(v12 + v16);
    int32x4_t v19 = 0uLL;
    uint16x8_t v20 = 0uLL;
    uint16x8_t v21 = 0uLL;
    do
    {
      int8x16_t v22 = 0uLL;
      int8x16_t v23 = 0uLL;
      int8x16_t v24 = 0uLL;
      int8x16_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      if (v10 >= 1)
      {
        int v28 = 0;
        uint8x16_t v29 = *(uint8x16_t *)(v13 + v17);
        uint8x16_t v30 = *(uint8x16_t *)(v13 + v17 - v11);
        uint8x16_t v31 = (uint8x8_t *)(v15 + v17);
        uint8x16_t v32 = v18;
        do
        {
          uint8x16_t v33 = *v32;
          int8x16_t v34 = (int8x16_t)vcgtq_u8(v29, v30);
          int8x16_t v35 = (int8x16_t)vcgtq_u8(v29, *v32);
          int8x16_t v36 = (int8x16_t)vcgtq_u8(v30, v29);
          int8x16_t v37 = (int8x16_t)vcgtq_u8(*v32, v29);
          int8x16_t v38 = vandq_s8(v37, v36);
          int8x16_t v39 = vandq_s8(v35, v34);
          int8x16_t v40 = veorq_s8(v35, v34);
          int8x16_t v41 = veorq_s8(v37, v36);
          int8x16_t v42 = vbicq_s8(v41, v40);
          int8x16_t v43 = vbicq_s8(v40, v41);
          int8x16_t v25 = vsubq_s8(v25, v38);
          int8x16_t v24 = vsubq_s8(v24, v42);
          int8x16_t v23 = vsubq_s8(v23, v43);
          int8x16_t v22 = vsubq_s8(v22, v39);
          int8x16_t v44 = (int8x16_t)vsubl_u8(*v31, *(uint8x8_t *)v29.i8);
          int8x16_t v45 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v31->i8, v29);
          int32x4_t v27 = vpadalq_s16(v27, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v38))), vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v42)))));
          uint8x16_t v31 = (uint8x8_t *)((char *)v31 + v14);
          ++v28;
          int32x4_t v26 = vpadalq_s16(v26, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v43))), vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v39)))));
          uint8x16_t v32 = (uint8x16_t *)((char *)v32 + v11);
          uint8x16_t v30 = v29;
          uint8x16_t v29 = v33;
        }
        while (v28 < v10);
      }
      uint16x8_t v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v25, v24));
      uint16x8_t v21 = vpadalq_u8(v21, (uint8x16_t)vpaddq_s8(v23, v22));
      int32x4_t v19 = vaddq_s32(vpaddq_s32(v27, v26), v19);
      v17 += 16;
      ++v18;
    }
    while (v17 < (v8 - 16));
    unint64_t v17 = (v8 - 1) & 0xFFFFFFF0;
  }
  if (v10 < 1)
  {
    int32x4_t v56 = 0uLL;
    int8x16_t v59 = 0uLL;
    int8x16_t v58 = 0uLL;
    int8x16_t v57 = 0uLL;
    int8x16_t v54 = 0uLL;
    int32x4_t v55 = 0uLL;
  }
  else
  {
    int v46 = 0;
    v9.u64[1] = (unint64_t)vdup_n_s32(-8 * ((a1[4] & 8u) + *((_DWORD *)a1 + 10)));
    v47.i64[0] = -1;
    v47.i64[1] = -1;
    int8x16_t v48 = (int8x16_t)vshlq_u64(v47, v9);
    uint64_t v49 = (int8x16_t *)(v13 + v17);
    uint8x16_t v50 = (uint8x16_t)vandq_s8(*v49, v48);
    uint8x16_t v51 = (uint8x16_t)vandq_s8(*(int8x16_t *)((char *)v49 - v11), v48);
    int8x16_t v52 = (int8x16_t *)(v15 + v17);
    int32x4_t v53 = (int8x16_t *)(v12 + v17 + v16);
    int8x16_t v54 = 0uLL;
    int32x4_t v55 = 0uLL;
    int32x4_t v56 = 0uLL;
    int8x16_t v57 = 0uLL;
    int8x16_t v58 = 0uLL;
    int8x16_t v59 = 0uLL;
    do
    {
      uint8x16_t v60 = (uint8x16_t)vandq_s8(*v53, v48);
      uint8x16_t v61 = (uint8x16_t)vandq_s8(*v52, v48);
      int8x16_t v62 = (int8x16_t)vcgtq_u8(v50, v51);
      int8x16_t v63 = (int8x16_t)vcgtq_u8(v50, v60);
      int8x16_t v64 = (int8x16_t)vcgtq_u8(v51, v50);
      int8x16_t v65 = (int8x16_t)vcgtq_u8(v60, v50);
      int8x16_t v66 = vandq_s8(v65, v64);
      int8x16_t v67 = vandq_s8(v63, v62);
      int8x16_t v68 = veorq_s8(v63, v62);
      int8x16_t v69 = veorq_s8(v65, v64);
      int8x16_t v70 = vbicq_s8(v69, v68);
      int8x16_t v71 = vbicq_s8(v68, v69);
      int8x16_t v54 = vsubq_s8(v54, v66);
      int8x16_t v57 = vsubq_s8(v57, v70);
      int8x16_t v58 = vsubq_s8(v58, v71);
      int8x16_t v59 = vsubq_s8(v59, v67);
      int8x16_t v72 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v61.i8, *(uint8x8_t *)v50.i8);
      int8x16_t v73 = (int8x16_t)vsubl_high_u8(v61, v50);
      int32x4_t v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
      int8x16_t v52 = (int8x16_t *)((char *)v52 + v14);
      ++v46;
      int32x4_t v56 = vpadalq_s16(v56, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
      int32x4_t v53 = (int8x16_t *)((char *)v53 + v11);
      uint8x16_t v51 = v50;
      uint8x16_t v50 = v60;
    }
    while (v46 < v10);
  }
  int32x4_t result = vaddq_s32(vpaddq_s32(v55, v56), v19);
  int16x8_t v75 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v54, v57)), (int16x8_t)vpadalq_u8(v21, (uint8x16_t)vpaddq_s8(v58, v59)));
  v75.i64[0] = vpaddq_s16(v75, v75).u64[0];
  *a2 = v75.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v75.i32[1];
  *a3 = result.i64[0];
  *(void *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1BBACB1A0(uint64_t *a1, _DWORD *a2, void *a3, uint64x2_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  int v6 = *((_DWORD *)a1 + 8);
  unsigned int v7 = *((_DWORD *)a1 + 12);
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v7) & 8);
  int32x4_t v8 = 0uLL;
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  int8x16_t v10 = (int8x16_t)vshlq_u64(v9, a4);
  v11.i64[0] = 0;
  v11.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v6 & 8))+ ((v7 >> 1) | 0x1FFFFFFE)));
  int8x16_t v12 = (int8x16_t)vshlq_u64(v9, v11);
  int v13 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
  unint64_t v14 = (v6 - 16);
  if (v6 > 16)
  {
    uint64_t v16 = a1[1];
    uint64_t v17 = a1[3];
    if (v13 < 1)
    {
      int8x16_t v27 = 0uLL;
      int8x16_t v26 = 0uLL;
      int8x16_t v25 = 0uLL;
      int8x16_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
    }
    else
    {
      int8x16_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
      int v22 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
      uint64_t v23 = *a1;
      int8x16_t v24 = (int8x16_t *)a1[2];
      int8x16_t v25 = 0uLL;
      int8x16_t v26 = 0uLL;
      int8x16_t v27 = 0uLL;
      do
      {
        uint8x16_t v28 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v23 - 1), v10);
        uint8x16_t v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)v23, v10);
        uint8x16_t v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v23 + 1), v10);
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*v24, v10);
        int8x16_t v32 = (int8x16_t)vcgtq_u8(v29, v28);
        int8x16_t v33 = (int8x16_t)vcgtq_u8(v29, v30);
        int8x16_t v34 = (int8x16_t)vcgtq_u8(v28, v29);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v30, v29);
        int8x16_t v36 = vandq_s8(v35, v34);
        int8x16_t v37 = vandq_s8(v33, v32);
        int8x16_t v38 = veorq_s8(v33, v32);
        int8x16_t v39 = veorq_s8(v35, v34);
        int8x16_t v40 = vbicq_s8(v39, v38);
        int8x16_t v41 = vbicq_s8(v38, v39);
        int8x16_t v20 = vsubq_s8(v20, v36);
        int8x16_t v25 = vsubq_s8(v25, v40);
        int8x16_t v26 = vsubq_s8(v26, v41);
        int8x16_t v27 = vsubq_s8(v27, v37);
        int8x16_t v42 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v29.i8);
        int8x16_t v43 = (int8x16_t)vsubl_high_u8(v31, v29);
        int32x4_t v21 = vpadalq_s16(v21, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v36.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v36))), vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v40)))));
        int32x4_t v8 = vpadalq_s16(v8, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v41))), vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v37)))));
        v23 += v16;
        int8x16_t v24 = (int8x16_t *)((char *)v24 + v17);
        --v22;
      }
      while (v22);
    }
    uint16x8_t v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v20, v25));
    uint16x8_t v18 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v26, v27));
    int32x4_t v8 = vpaddq_s32(v21, v8);
    LODWORD(v15) = 16;
  }
  else
  {
    LODWORD(v15) = 0;
    int8x16_t v12 = vandq_s8(v12, v10);
    uint64_t v16 = a1[1];
    uint64_t v17 = a1[3];
    uint16x8_t v18 = 0uLL;
    uint16x8_t v19 = 0uLL;
  }
  if ((int)v15 < (int)v14)
  {
    unint64_t v15 = v15;
    do
    {
      if (v13 < 1)
      {
        int32x4_t v49 = 0uLL;
        int8x16_t v52 = 0uLL;
        int8x16_t v51 = 0uLL;
        int8x16_t v50 = 0uLL;
        int8x16_t v46 = 0uLL;
        int32x4_t v47 = 0uLL;
      }
      else
      {
        int8x16_t v44 = (uint8x8_t *)(v5 + v15);
        uint64_t v45 = v4 + v15;
        int8x16_t v46 = 0uLL;
        int32x4_t v47 = 0uLL;
        int v48 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
        int32x4_t v49 = 0uLL;
        int8x16_t v50 = 0uLL;
        int8x16_t v51 = 0uLL;
        int8x16_t v52 = 0uLL;
        do
        {
          uint8x16_t v53 = *(uint8x16_t *)(v45 - 1);
          uint8x16_t v54 = *(uint8x16_t *)(v45 + 1);
          int8x16_t v55 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v45, v53);
          int8x16_t v56 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v45, v54);
          int8x16_t v57 = (int8x16_t)vcgtq_u8(v53, *(uint8x16_t *)v45);
          int8x16_t v58 = (int8x16_t)vcgtq_u8(v54, *(uint8x16_t *)v45);
          int8x16_t v59 = vandq_s8(v58, v57);
          int8x16_t v60 = vandq_s8(v56, v55);
          int8x16_t v61 = veorq_s8(v56, v55);
          int8x16_t v62 = veorq_s8(v58, v57);
          int8x16_t v63 = vbicq_s8(v62, v61);
          int8x16_t v64 = vbicq_s8(v61, v62);
          int8x16_t v46 = vsubq_s8(v46, v59);
          int8x16_t v50 = vsubq_s8(v50, v63);
          int8x16_t v51 = vsubq_s8(v51, v64);
          int8x16_t v52 = vsubq_s8(v52, v60);
          int8x16_t v65 = (int8x16_t)vsubl_u8(*v44, *(uint8x8_t *)v45);
          int8x16_t v66 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v44->i8, *(uint8x16_t *)v45);
          int32x4_t v47 = vpadalq_s16(v47, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v59.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v59))), vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v63.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v63)))));
          int32x4_t v49 = vpadalq_s16(v49, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v64.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v64))), vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v60.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v60)))));
          v45 += v16;
          int8x16_t v44 = (uint8x8_t *)((char *)v44 + v17);
          --v48;
        }
        while (v48);
      }
      uint16x8_t v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v46, v50));
      uint16x8_t v18 = vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(v51, v52));
      int32x4_t v8 = vaddq_s32(vpaddq_s32(v47, v49), v8);
      v15 += 16;
    }
    while (v15 < v14);
  }
  if (v13 < 1)
  {
    int32x4_t v70 = 0uLL;
    int8x16_t v73 = 0uLL;
    int8x16_t v72 = 0uLL;
    int8x16_t v71 = 0uLL;
    int8x16_t v68 = 0uLL;
    int32x4_t v69 = 0uLL;
  }
  else
  {
    int8x16_t v67 = (int8x16_t *)(v5 + v15);
    int8x16_t v68 = 0uLL;
    int32x4_t v69 = 0uLL;
    int32x4_t v70 = 0uLL;
    int8x16_t v71 = 0uLL;
    int8x16_t v72 = 0uLL;
    int8x16_t v73 = 0uLL;
    uint64_t v74 = v4 + v15;
    do
    {
      uint8x16_t v75 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v74 - 1), v12);
      uint8x16_t v76 = (uint8x16_t)vandq_s8(*(int8x16_t *)v74, v12);
      uint8x16_t v77 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v74 + 1), v12);
      uint8x16_t v78 = (uint8x16_t)vandq_s8(*v67, v12);
      int8x16_t v79 = (int8x16_t)vcgtq_u8(v76, v75);
      int8x16_t v80 = (int8x16_t)vcgtq_u8(v76, v77);
      int8x16_t v81 = (int8x16_t)vcgtq_u8(v75, v76);
      int8x16_t v82 = (int8x16_t)vcgtq_u8(v77, v76);
      int8x16_t v83 = vandq_s8(v82, v81);
      int8x16_t v84 = vandq_s8(v80, v79);
      int8x16_t v85 = veorq_s8(v80, v79);
      int8x16_t v86 = veorq_s8(v82, v81);
      int8x16_t v87 = vbicq_s8(v86, v85);
      int8x16_t v88 = vbicq_s8(v85, v86);
      int8x16_t v68 = vsubq_s8(v68, v83);
      int8x16_t v71 = vsubq_s8(v71, v87);
      int8x16_t v72 = vsubq_s8(v72, v88);
      int8x16_t v73 = vsubq_s8(v73, v84);
      int8x16_t v89 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v78.i8, *(uint8x8_t *)v76.i8);
      int8x16_t v90 = (int8x16_t)vsubl_high_u8(v78, v76);
      int32x4_t v69 = vpadalq_s16(v69, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v83.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v83))), vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v87.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v87)))));
      int32x4_t v70 = vpadalq_s16(v70, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v88.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v88))), vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v84.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v84)))));
      v74 += v16;
      int8x16_t v67 = (int8x16_t *)((char *)v67 + v17);
      --v13;
    }
    while (v13);
  }
  int32x4_t result = vaddq_s32(vpaddq_s32(v69, v70), v8);
  int16x8_t v92 = vpaddq_s16((int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v68, v71)), (int16x8_t)vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(v72, v73)));
  v92.i64[0] = vpaddq_s16(v92, v92).u64[0];
  *a2 = v92.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v92.i32[1];
  *a3 = result.i64[0];
  *(void *)((char *)a3 + 12) = result.i64[1];
  return result;
}

uint64_t sub_1BBACB5E0(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = 0;
  uint64_t v12 = result + 3544;
  uint64_t v13 = result + 3800;
  uint64_t v14 = result + 3800 + 16 * a4;
  int v15 = *(_DWORD *)(*(void *)v14 + 36);
  char v16 = 1;
  do
  {
    char v17 = v16;
    uint64_t v18 = *(void *)(a7 + 8 * v11);
    if (v18 && *(unsigned char *)(v18 + 10) == 1)
    {
      if (*(char *)(v18 + 13) == a4)
      {
        int8x16_t v26 = *(_DWORD **)(a9 + 8 * v11);
        uint64_t v27 = *(unsigned __int8 *)(a11 + 48);
        *(unsigned char *)(a11 + 48) = v27 + 1;
        *(_DWORD *)(a11 + 4 * v27) = *v26;
        goto LABEL_41;
      }
      uint64_t v19 = *(char *)(v18 + 12);
      if (v19 != -1 && *(_DWORD *)(*(void *)v14 + 680) == *(_DWORD *)(*(void *)(v12 + 16 * v19) + 680))
      {
        uint64_t v28 = *(unsigned __int8 *)(a11 + 48);
        *(unsigned char *)(a11 + 48) = v28 + 1;
        *(_DWORD *)(a11 + 4 * v28) = *(_DWORD *)(v18 + 4);
        goto LABEL_41;
      }
    }
    char v16 = 0;
    uint64_t v11 = 1;
  }
  while ((v17 & 1) != 0);
  uint64_t v20 = 0;
  char v21 = 1;
  while (1)
  {
    char v22 = v21;
    uint64_t v23 = *(void *)(a7 + 8 * v20);
    if (v23)
    {
      if (*(unsigned char *)(v23 + 10) == 1)
      {
        uint64_t v24 = *(char *)(v23 + 13);
        if (v24 != -1 && ((v15 ^ *(unsigned __int8 *)(*(void *)(v13 + 16 * v24) + 36)) & 2) == 0)
        {
          uint8x16_t v29 = *(_DWORD **)(a9 + 8 * v20);
          uint64_t v30 = *(unsigned __int8 *)(a11 + 48);
          *(unsigned char *)(a11 + 48) = v30 + 1;
          *(_DWORD *)(a11 + 4 * v30) = *v29;
          uint8x16_t v31 = (char *)(*(void *)(a7 + 8 * v20) + 13);
          if ((v15 & 2) != 0) {
            goto LABEL_41;
          }
          goto LABEL_22;
        }
        uint64_t v25 = *(char *)(v23 + 12);
        if (v25 != -1 && ((v15 ^ *(unsigned __int8 *)(*(void *)(v12 + 16 * v25) + 36)) & 2) == 0) {
          break;
        }
      }
    }
    char v21 = 0;
    uint64_t v20 = 1;
    if ((v22 & 1) == 0) {
      goto LABEL_41;
    }
  }
  uint64_t v32 = *(unsigned __int8 *)(a11 + 48);
  *(unsigned char *)(a11 + 48) = v32 + 1;
  *(_DWORD *)(a11 + 4 * v32) = *(_DWORD *)(v23 + 4);
  uint8x16_t v31 = (char *)(*(void *)(a7 + 8 * v20) + 12);
  uint64_t v13 = result + 3544;
  if ((v15 & 2) != 0) {
    goto LABEL_41;
  }
LABEL_22:
  int v33 = *(_DWORD *)(*(void *)(v13 + 16 * *v31) + 680);
  int v34 = *(_DWORD *)(result + 608);
  int v35 = v34 - v33;
  int v36 = v34 - *(_DWORD *)(*(void *)v14 + 680);
  if (v35 >= 127) {
    int v37 = 127;
  }
  else {
    int v37 = v35;
  }
  if (v37 <= -128) {
    int v37 = -128;
  }
  if (v37)
  {
    if (v37 >= 0) {
      unsigned int v38 = v37;
    }
    else {
      unsigned int v38 = -v37;
    }
    int v37 = (__int16)((__int16)((v38 >> 1) + 0x4000) / (__int16)v37);
  }
  if (v36 >= 127) {
    int v36 = 127;
  }
  if (v36 <= -128) {
    int v36 = -128;
  }
  signed int v39 = (v37 * v36 + 32) >> 6;
  if (v39 >= 4095) {
    signed int v39 = 4095;
  }
  if (v39 <= -4096) {
    signed int v39 = -4096;
  }
  int8x16_t v40 = (__int16 *)(a11 + 4 * (*(unsigned __int8 *)(a11 + 48) - 1));
  v41.i32[0] = *v40;
  v41.i32[1] = v40[1];
  int32x2_t v42 = vmul_s32(vdup_n_s32(v39), v41);
  int32x2_t v43 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v42), (int32x2_t)0x7F0000007FLL), 8uLL);
  int32x2_t v44 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v42), (int8x8_t)vneg_s32(v43), (int8x8_t)v43), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
  *int8x16_t v40 = v44.i16[0];
  v40[1] = v44.i16[2];
LABEL_41:
  uint64_t v45 = 0;
  while (1)
  {
    uint64_t v46 = *(void *)(a8 + 8 * v45);
    if (!v46 || *(unsigned char *)(v46 + 10) != 1) {
      goto LABEL_47;
    }
    if (*(char *)(v46 + 13) == a4) {
      break;
    }
    uint64_t v47 = *(char *)(v46 + 12);
    if (v47 != -1 && *(_DWORD *)(*(void *)v14 + 680) == *(_DWORD *)(*(void *)(v12 + 16 * v47) + 680))
    {
      unsigned int v48 = *(unsigned __int8 *)(a11 + 48);
      if (!*(unsigned char *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)v46)
      {
        int32x4_t v49 = (_DWORD *)(v46 + 4);
        goto LABEL_55;
      }
      return result;
    }
LABEL_47:
    if (++v45 == 3) {
      return result;
    }
  }
  unsigned int v48 = *(unsigned __int8 *)(a11 + 48);
  if (!*(unsigned char *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)(v46 + 4))
  {
    int32x4_t v49 = *(_DWORD **)(a10 + 8 * v45);
LABEL_55:
    *(unsigned char *)(a11 + 48) = v48 + 1;
    *(_DWORD *)(a11 + 4 * v48) = *v49;
  }
  return result;
}

uint64_t sub_1BBACB8E8(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = 0;
  uint64_t v12 = result + 3544;
  uint64_t v13 = result + 3800;
  uint64_t v14 = result + 3544 + 16 * a4;
  int v15 = *(_DWORD *)(*(void *)v14 + 36);
  char v16 = 1;
  do
  {
    char v17 = v16;
    uint64_t v18 = *(void *)(a7 + 8 * v11);
    if (v18 && *(unsigned char *)(v18 + 10) == 1)
    {
      if (*(char *)(v18 + 12) == a4)
      {
        uint64_t v26 = *(unsigned __int8 *)(a11 + 48);
        *(unsigned char *)(a11 + 48) = v26 + 1;
        *(_DWORD *)(a11 + 4 * v26) = *(_DWORD *)(v18 + 4);
        goto LABEL_41;
      }
      uint64_t v19 = *(char *)(v18 + 13);
      if (v19 != -1 && *(_DWORD *)(*(void *)v14 + 680) == *(_DWORD *)(*(void *)(v13 + 16 * v19) + 680))
      {
        uint64_t v27 = *(_DWORD **)(a9 + 8 * v11);
        uint64_t v28 = *(unsigned __int8 *)(a11 + 48);
        *(unsigned char *)(a11 + 48) = v28 + 1;
        *(_DWORD *)(a11 + 4 * v28) = *v27;
        goto LABEL_41;
      }
    }
    char v16 = 0;
    uint64_t v11 = 1;
  }
  while ((v17 & 1) != 0);
  uint64_t v20 = 0;
  char v21 = 1;
  while (1)
  {
    char v22 = v21;
    uint64_t v23 = *(void *)(a7 + 8 * v20);
    if (v23)
    {
      if (*(unsigned char *)(v23 + 10) == 1)
      {
        uint64_t v24 = *(char *)(v23 + 12);
        if (v24 != -1 && ((v15 ^ *(unsigned __int8 *)(*(void *)(v12 + 16 * v24) + 36)) & 2) == 0)
        {
          uint64_t v29 = *(unsigned __int8 *)(a11 + 48);
          *(unsigned char *)(a11 + 48) = v29 + 1;
          *(_DWORD *)(a11 + 4 * v29) = *(_DWORD *)(v23 + 4);
          uint64_t v30 = (char *)(*(void *)(a7 + 8 * v20) + 12);
          if ((v15 & 2) != 0) {
            goto LABEL_41;
          }
          goto LABEL_22;
        }
        uint64_t v25 = *(char *)(v23 + 13);
        if (v25 != -1 && ((v15 ^ *(unsigned __int8 *)(*(void *)(v13 + 16 * v25) + 36)) & 2) == 0) {
          break;
        }
      }
    }
    char v21 = 0;
    uint64_t v20 = 1;
    if ((v22 & 1) == 0) {
      goto LABEL_41;
    }
  }
  uint8x16_t v31 = *(_DWORD **)(a9 + 8 * v20);
  uint64_t v32 = *(unsigned __int8 *)(a11 + 48);
  *(unsigned char *)(a11 + 48) = v32 + 1;
  *(_DWORD *)(a11 + 4 * v32) = *v31;
  uint64_t v30 = (char *)(*(void *)(a7 + 8 * v20) + 13);
  uint64_t v12 = result + 3800;
  if ((v15 & 2) != 0) {
    goto LABEL_41;
  }
LABEL_22:
  int v33 = *(_DWORD *)(*(void *)(v12 + 16 * *v30) + 680);
  int v34 = *(_DWORD *)(result + 608);
  int v35 = v34 - v33;
  int v36 = v34 - *(_DWORD *)(*(void *)v14 + 680);
  if (v35 >= 127) {
    int v37 = 127;
  }
  else {
    int v37 = v35;
  }
  if (v37 <= -128) {
    int v37 = -128;
  }
  if (v37)
  {
    if (v37 >= 0) {
      unsigned int v38 = v37;
    }
    else {
      unsigned int v38 = -v37;
    }
    int v37 = (__int16)((__int16)((v38 >> 1) + 0x4000) / (__int16)v37);
  }
  if (v36 >= 127) {
    int v36 = 127;
  }
  if (v36 <= -128) {
    int v36 = -128;
  }
  signed int v39 = (v37 * v36 + 32) >> 6;
  if (v39 >= 4095) {
    signed int v39 = 4095;
  }
  if (v39 <= -4096) {
    signed int v39 = -4096;
  }
  int8x16_t v40 = (__int16 *)(a11 + 4 * (*(unsigned __int8 *)(a11 + 48) - 1));
  v41.i32[0] = *v40;
  v41.i32[1] = v40[1];
  int32x2_t v42 = vmul_s32(vdup_n_s32(v39), v41);
  int32x2_t v43 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v42), (int32x2_t)0x7F0000007FLL), 8uLL);
  int32x2_t v44 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v42), (int8x8_t)vneg_s32(v43), (int8x8_t)v43), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
  *int8x16_t v40 = v44.i16[0];
  v40[1] = v44.i16[2];
LABEL_41:
  uint64_t v45 = 0;
  while (1)
  {
    uint64_t v46 = *(void *)(a8 + 8 * v45);
    if (!v46 || *(unsigned char *)(v46 + 10) != 1) {
      goto LABEL_47;
    }
    if (*(char *)(v46 + 12) == a4) {
      break;
    }
    uint64_t v47 = *(char *)(v46 + 13);
    if (v47 != -1 && *(_DWORD *)(*(void *)v14 + 680) == *(_DWORD *)(*(void *)(v13 + 16 * v47) + 680))
    {
      unsigned int v48 = *(unsigned __int8 *)(a11 + 48);
      if (!*(unsigned char *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)(v46 + 4))
      {
        int32x4_t v49 = *(_DWORD **)(a10 + 8 * v45);
        goto LABEL_55;
      }
      return result;
    }
LABEL_47:
    if (++v45 == 3) {
      return result;
    }
  }
  unsigned int v48 = *(unsigned __int8 *)(a11 + 48);
  if (!*(unsigned char *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)v46)
  {
    int32x4_t v49 = (_DWORD *)(v46 + 4);
LABEL_55:
    *(unsigned char *)(a11 + 48) = v48 + 1;
    *(_DWORD *)(a11 + 4 * v48) = *v49;
  }
  return result;
}

BOOL sub_1BBACBBF0(uint64_t a1, __int16 *a2, __int16 *a3)
{
  if (*((unsigned __int8 *)a2 + 8) != *((unsigned __int8 *)a3 + 8)) {
    return 1;
  }
  int v3 = *a2 - *a3;
  if (v3 < 0) {
    int v3 = *a3 - *a2;
  }
  if (v3 > 3) {
    return 1;
  }
  int v5 = a2[1] - a3[1];
  if (v5 < 0) {
    int v5 = a3[1] - a2[1];
  }
  return v5 > 3;
}

void sub_1BBACBC3C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    unint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)a1 + v4;
        if (*(void *)v6)
        {
          free(*(void **)v6);
          *(void *)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          unint64_t v3 = *(void *)(a1 + 8);
        }
        v4 += 56;
      }
      uint64_t v2 = *(void **)a1;
    }
    free(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1BBACBCB4(char **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (a1[1])
    {
      unint64_t v3 = 0;
      uint64_t v4 = 4648;
      do
      {
        int v5 = *a1;
        uint64_t v6 = (uint64_t)&(*a1)[v4];
        uint64_t v7 = *(void *)(v6 + 208);
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        int8x16_t v10 = *(void **)(v6 + 184);
        uint64x2_t v9 = (void *)(v6 + 184);
        int32x4_t v8 = v10;
        if (v10)
        {
          free(v8);
          *uint64x2_t v9 = 0;
          v9[1] = 0;
        }
        uint64_t v11 = &v5[v4];
        uint64_t v12 = *(void **)&v5[v4 + 168];
        if (v12)
        {
          free(v12);
          *(void *)&v5[v4 + 168] = 0;
          *(void *)&v5[v4 + 176] = 0;
        }
        int v15 = (void *)*((void *)v11 + 19);
        uint64_t v14 = v11 + 152;
        uint64_t v13 = v15;
        if (v15)
        {
          free(v13);
          *uint64_t v14 = 0;
          v14[1] = 0;
        }
        char v16 = &v5[v4];
        sub_1BBA8A344((uint64_t)&v5[v4 + 136]);
        char v17 = *(void **)&v5[v4 + 120];
        if (v17)
        {
          free(v17);
          *(void *)&v5[v4 + 120] = 0;
          *((void *)v16 + 16) = 0;
        }
        uint64_t v20 = (void *)*((void *)v16 + 13);
        uint64_t v19 = v16 + 104;
        uint64_t v18 = v20;
        if (v20)
        {
          free(v18);
          *uint64_t v19 = 0;
          v19[1] = 0;
        }
        char v21 = &v5[v4];
        sub_1BBA8A3B4((uint64_t)(v21 + 88));
        if (*(void *)v21)
        {
          free(*(void **)v21);
          *(void *)char v21 = 0;
          *((void *)v21 + 1) = 0;
        }
        sub_1BBA7F130((uint64_t)(v21 - 3280));
        ++v3;
        v4 += 0x2000;
      }
      while (v3 < (unint64_t)a1[1]);
      uint64_t v2 = *a1;
    }
    free(v2);
    *a1 = 0;
    a1[1] = 0;
  }
}

uint64_t sub_1BBACBDDC(uint64_t a1, __n128 *a2, int a3, int a4, int a5)
{
  uint64_t v275 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 79088;
  unint64_t v272 = (unsigned char *)a2[36].n128_u64[1];
  int v9 = (char)v272[3288];
  unint64_t v10 = a2[2].n128_u64[1];
  char v11 = *(unsigned char *)(v10 + 196);
  int v267 = *(_DWORD *)(v10 + 2016);
  int v12 = *(_DWORD *)(v10 + 2020) * v267;
  int v13 = (v9 + 2 * v12) / (2 * v9);
  int v14 = v13 * a3;
  int v15 = v12 - v13 * a3;
  if (v9 - 1 <= a3) {
    int v16 = v15;
  }
  else {
    int v16 = v13;
  }
  *(void *)(a1 + 79216) = a2;
  *(void *)(a1 + 1360) = a2[38].n128_u64[0];
  unint64_t v17 = a2[3].n128_u64[0];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1368) = v10;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 1376);
  *(void *)(a1 + 1376) = v17;
  if (v18) {
    sub_1BB9C09B4(v18);
  }
  unint64_t v20 = a2[3].n128_u64[1];
  unint64_t v19 = a2[4].n128_u64[0];
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v271 = a1 + 1400;
  *(void *)(a1 + 1384) = v20;
  char v21 = *(std::__shared_weak_count **)(a1 + 1392);
  *(void *)(a1 + 1392) = v19;
  if (v21) {
    sub_1BB9C09B4(v21);
  }
  int v22 = 16 << v11;
  BOOL v23 = *(unsigned char *)(*(void *)(v8 + 128) + 640) == 0;
  *(unsigned char *)(a1 + 600) = v23;
  *(unsigned char *)(a1 + 601) = v23;
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(*(void *)(a1 + 1360) + 680);
  *(_DWORD *)(v8 + 220) = v14 + v16 - 1;
  *(unsigned char *)(a1 + 620) = 5;
  *(void *)(v8 + 224) = 0;
  *(void *)uint64_t v8 = v272 + 3184;
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 4064);
  *(_OWORD *)(a1 + 4056) = 0u;
  if (v24) {
    sub_1BB9C09B4(v24);
  }
  *(unsigned char *)(a1 + 627) = 1;
  *(_WORD *)(a1 + 500) = 0;
  unsigned int v25 = a2[40].n128_i8[0];
  uint64_t v26 = v272;
  if (v25 < 2)
  {
    LOBYTE(v33) = 0;
    unsigned int v32 = 2;
    *(unsigned char *)(a1 + 10) = 2;
  }
  else
  {
    if (v25 - 3 < 2)
    {
      *(unsigned char *)(a1 + 10) = 0;
      uint64_t v27 = *(void *)(v8 + 128);
      int v28 = *(_DWORD *)(v27 + 656);
      if (v28 >= **(_DWORD **)(v27 + 1096)) {
        LOBYTE(v28) = **(_DWORD **)(v27 + 1096);
      }
      *(unsigned char *)(a1 + 500) = v28;
      uint64_t v29 = *(int **)(v27 + 1096);
      int v30 = *(_DWORD *)(v27 + 656);
      int v31 = *v29;
      if (v30 >= v31) {
        LOBYTE(v30) = v31;
      }
      *(unsigned char *)(a1 + 501) = v30;
      goto LABEL_21;
    }
    if (v25 == 2)
    {
      unsigned int v32 = 1;
      *(unsigned char *)(a1 + 10) = 1;
      uint64_t v34 = *(void *)(v8 + 128);
      int v35 = *(int **)(v34 + 1096);
      int v33 = *(_DWORD *)(v34 + 656);
      int v36 = *v35;
      if (v33 >= v36) {
        LOBYTE(v33) = v36;
      }
      *(unsigned char *)(a1 + 500) = v33;
    }
    else
    {
      LOBYTE(v28) = 0;
      LOBYTE(v33) = 0;
      unsigned int v32 = *(unsigned __int8 *)(a1 + 10);
      if (!*(unsigned char *)(a1 + 10))
      {
LABEL_21:
        unsigned int v32 = 0;
        *(void *)(v8 + 80) = sub_1BBACE844;
        *(void *)(v8 + 88) = 0;
        LOBYTE(v33) = v28;
      }
    }
  }
  *(unsigned char *)a1 = a3 == 0;
  *(unsigned char *)(a1 + 2) = **(unsigned char **)(a1 + 1384);
  *(_DWORD *)(a1 + 4) = v14;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 601);
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v37 = *(void *)(a1 + 1360);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v37 + 680) & (v22 - 1);
  int v38 = v272[3496];
  *(unsigned char *)(a1 + 502) = v38;
  *(unsigned char *)(a1 + 519) = v272[3497];
  *(_WORD *)(a1 + 11) = 1;
  *(_WORD *)(a1 + 538) = 1;
  if (v32 >= 2)
  {
    char v41 = *(unsigned char *)(v8 + 72);
    goto LABEL_37;
  }
  signed int v39 = (unsigned int *)a2[68].n128_u64[1];
  if ((int)*v39 <= (char)v33) {
    uint64_t v40 = (char)v33;
  }
  else {
    uint64_t v40 = *v39;
  }
  if ((int)v40 > 16)
  {
    if (dword_1E9F80A90 >= 1)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Too many (%d) active refs!\n", v40);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v274 = v40;
        _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Too many (%d) active refs!\n", buf, 8u);
      }
    }
    goto LABEL_326;
  }
  if ((int)v40 >= 1)
  {
    uint64_t v262 = v37;
    uint64_t v265 = v8;
    int v51 = 0;
    uint64_t v52 = a1 + 3552;
    do
    {
      if ((int)v39[1] >= 1)
      {
        uint64_t v53 = v51;
        uint8x16_t v54 = (std::__shared_weak_count **)(v52 + 16 * v51);
        int8x16_t v55 = (std::__shared_weak_count **)(v39 + 8);
        uint64_t v56 = 1;
        do
        {
          int8x16_t v58 = *(v55 - 1);
          int8x16_t v57 = *v55;
          if (*v55) {
            atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int8x16_t v59 = *v54;
          *(v54 - 1) = v58;
          *uint8x16_t v54 = v57;
          if (v59) {
            sub_1BB9C09B4(v59);
          }
          int v60 = v56 + 1;
          v54 += 2;
          v55 += 2;
          BOOL v61 = v56 < (int)v39[1] && v53 + v56 < v40;
          ++v56;
        }
        while (v61);
        int v51 = v53 + v60 - 1;
      }
      if ((int)v39[2] >= 1 && v51 < (int)v40)
      {
        uint64_t v63 = v51;
        int8x16_t v64 = (std::__shared_weak_count **)(v52 + 16 * v51);
        int8x16_t v65 = (std::__shared_weak_count **)(v39 + 72);
        uint64_t v66 = 1;
        do
        {
          int8x16_t v68 = *(v65 - 1);
          int8x16_t v67 = *v65;
          if (*v65) {
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int32x4_t v69 = *v64;
          *(v64 - 1) = v68;
          *int8x16_t v64 = v67;
          if (v69) {
            sub_1BB9C09B4(v69);
          }
          int v70 = v66 + 1;
          v64 += 2;
          v65 += 2;
          BOOL v71 = v66 < (int)v39[2] && v63 + v66 < v40;
          ++v66;
        }
        while (v71);
        int v51 = v63 + v70 - 1;
      }
      if ((int)v39[3] >= 1 && v51 < (int)v40)
      {
        uint64_t v73 = v51;
        uint64_t v74 = (std::__shared_weak_count **)(v52 + 16 * v51);
        uint8x16_t v75 = (std::__shared_weak_count **)(v39 + 136);
        uint64_t v76 = 1;
        do
        {
          uint8x16_t v78 = *(v75 - 1);
          uint8x16_t v77 = *v75;
          if (*v75) {
            atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int8x16_t v79 = *v74;
          *(v74 - 1) = v78;
          *uint64_t v74 = v77;
          if (v79) {
            sub_1BB9C09B4(v79);
          }
          int v80 = v76 + 1;
          v74 += 2;
          v75 += 2;
          BOOL v81 = v76 < (int)v39[3] && v73 + v76 < v40;
          ++v76;
        }
        while (v81);
        int v51 = v73 + v80 - 1;
      }
    }
    while (v51 < (int)v40);
    int v38 = *(unsigned __int8 *)(a1 + 502);
    uint64_t v8 = v265;
    uint64_t v37 = v262;
  }
  if (v38) {
    sub_1BBA17BF8(a1 + 3544, *(char *)(a1 + 500) - 1, (unsigned __int8 *)(a1 + 503));
  }
  if (!*(unsigned char *)(a1 + 10))
  {
    LODWORD(v83) = *(char *)(a1 + 501);
    if ((int)*v39 <= (int)v83) {
      uint64_t v84 = v83;
    }
    else {
      uint64_t v84 = *v39;
    }
    if ((int)v84 >= 1)
    {
      uint64_t v263 = v37;
      uint64_t v266 = v8;
      int v85 = 0;
      uint64_t v86 = a1 + 3808;
      do
      {
        if ((int)v39[2] >= 1)
        {
          uint64_t v87 = v85;
          int8x16_t v88 = (std::__shared_weak_count **)(v86 + 16 * v85);
          int8x16_t v89 = (std::__shared_weak_count **)(v39 + 72);
          uint64_t v90 = 1;
          do
          {
            int16x8_t v92 = *(v89 - 1);
            int8x16_t v91 = *v89;
            if (*v89) {
              atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int8x16_t v93 = *v88;
            *(v88 - 1) = v92;
            *int8x16_t v88 = v91;
            if (v93) {
              sub_1BB9C09B4(v93);
            }
            int v94 = v90 + 1;
            v88 += 2;
            v89 += 2;
            BOOL v95 = v90 < (int)v39[2] && v87 + v90 < v84;
            ++v90;
          }
          while (v95);
          int v85 = v87 + v94 - 1;
        }
        if ((int)v39[1] >= 1 && v85 < (int)v84)
        {
          uint64_t v97 = v85;
          int8x16_t v98 = (std::__shared_weak_count **)(v86 + 16 * v85);
          int8x16_t v99 = (std::__shared_weak_count **)(v39 + 8);
          uint64_t v100 = 1;
          do
          {
            int8x16_t v102 = *(v99 - 1);
            int16x8_t v101 = *v99;
            if (*v99) {
              atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int8x16_t v103 = *v98;
            *(v98 - 1) = v102;
            unsigned __int8 *v98 = v101;
            if (v103) {
              sub_1BB9C09B4(v103);
            }
            int v104 = v100 + 1;
            v98 += 2;
            v99 += 2;
            BOOL v105 = v100 < (int)v39[1] && v97 + v100 < v84;
            ++v100;
          }
          while (v105);
          int v85 = v97 + v104 - 1;
        }
        if ((int)v39[3] >= 1 && v85 < (int)v84)
        {
          uint64_t v107 = v85;
          int8x16_t v108 = (std::__shared_weak_count **)(v86 + 16 * v85);
          int8x16_t v109 = (std::__shared_weak_count **)(v39 + 136);
          uint64_t v110 = 1;
          do
          {
            int8x16_t v112 = *(v109 - 1);
            int8x16_t v111 = *v109;
            if (*v109) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int8x16_t v113 = *v108;
            *(v108 - 1) = v112;
            *int8x16_t v108 = v111;
            if (v113) {
              sub_1BB9C09B4(v113);
            }
            int v114 = v110 + 1;
            v108 += 2;
            v109 += 2;
            BOOL v115 = v110 < (int)v39[3] && v107 + v110 < v84;
            ++v110;
          }
          while (v115);
          int v85 = v107 + v114 - 1;
        }
      }
      while (v85 < (int)v84);
      LOBYTE(v83) = *(unsigned char *)(a1 + 501);
      uint64_t v8 = v266;
      uint64_t v37 = v263;
    }
    if (*(unsigned char *)(a1 + 519))
    {
      sub_1BBA17BF8(a1 + 3800, (char)v83 - 1, (unsigned __int8 *)(a1 + 520));
      LOBYTE(v83) = *(unsigned char *)(a1 + 501);
    }
    LODWORD(v83) = *(char *)(a1 + 500) <= (char)v83 ? v83 : *(unsigned char *)(a1 + 500);
    if ((int)v83 >= 1)
    {
      uint64_t v83 = v83;
      uint64_t v194 = a1 + 3800;
      while (1)
      {
        uint64_t v195 = *(void *)(v194 - 256);
        if (v195)
        {
          if (*(_DWORD *)(v195 + 680) > *(_DWORD *)(a1 + 608)) {
            break;
          }
        }
        if (*(void *)v194 && *(_DWORD *)(*(void *)v194 + 680) > *(_DWORD *)(a1 + 608)) {
          break;
        }
        v194 += 16;
        if (!--v83) {
          goto LABEL_97;
        }
      }
      *(unsigned char *)(a1 + 627) = 0;
    }
  }
LABEL_97:
  uint64_t v26 = v272;
  if (*(unsigned char *)(*(void *)(a1 + 1368) + 322))
  {
    if (*(unsigned char *)(a1 + 10)) {
      uint64_t v82 = 0;
    }
    else {
      uint64_t v82 = *(unsigned __int8 *)(a1 + 538) ^ 1;
    }
    uint64_t v116 = *(unsigned __int8 *)(a1 + 539);
    uint64_t v117 = *(void *)(a1 + (v82 << 8) + 16 * v116 + 3544);
    if (!v117)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        int v138 = MEMORY[0x1E4F14500];
        long long v139 = "Temporal MVP enabled but pointing to invalid reference\n";
LABEL_325:
        _os_log_error_impl(&dword_1BB9B9000, v138, OS_LOG_TYPE_ERROR, v139, buf, 2u);
      }
LABEL_326:
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294954387;
      }
      *(_WORD *)buf = 0;
      int32x4_t v49 = MEMORY[0x1E4F14500];
      int8x16_t v50 = "InitReferenceLists failed\n";
      goto LABEL_329;
    }
    if (!*(unsigned char *)a1 && *(void *)(a1 + 4056) != v117)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        int v138 = MEMORY[0x1E4F14500];
        long long v139 = "Temporal reference changed between slices\n";
        goto LABEL_325;
      }
      goto LABEL_326;
    }
    uint64_t v118 = *(void *)(a1 + (v82 << 8) + 16 * v116 + 3552);
    if (v118) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v118 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 4056) = v117;
    uint64_t v119 = *(std::__shared_weak_count **)(a1 + 4064);
    *(void *)(a1 + 4064) = v118;
    if (v119) {
      sub_1BB9C09B4(v119);
    }
    uint64_t v120 = 0;
    uint64_t v121 = a1 + 3800;
    long long v122 = (BOOL *)(v37 + 820);
    do
    {
      uint64_t v123 = *(void *)(v121 + v120 - 256);
      if (v123)
      {
        *((_DWORD *)v122 - 33) = *(_DWORD *)(v123 + 680);
        *(v122 - 128) = (*(unsigned char *)(v123 + 36) & 2) != 0;
      }
      uint64_t v124 = *(void *)(v121 + v120);
      if (v124)
      {
        *((_DWORD *)v122 - 1) = *(_DWORD *)(v124 + 680);
        *long long v122 = (*(unsigned char *)(v124 + 36) & 2) != 0;
      }
      v120 += 16;
      v122 += 8;
    }
    while (v120 != 256);
  }
  uint64_t v125 = *(char *)(a1 + 500);
  uint64_t v126 = *(unsigned __int8 *)(a1 + 500);
  if ((int)v125 >= 1)
  {
    long long v127 = (void *)(a1 + 3544);
    uint64_t v128 = *(unsigned __int8 *)(a1 + 500);
    while (*v127)
    {
      v127 += 2;
      if (!--v128) {
        goto LABEL_165;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_326;
    }
    *(_WORD *)buf = 0;
    int v138 = MEMORY[0x1E4F14500];
    long long v139 = "L0 found too few reference frames\n";
    goto LABEL_325;
  }
LABEL_165:
  int v129 = *(unsigned __int8 *)(a1 + 10);
  if (!*(unsigned char *)(a1 + 10) && *(char *)(a1 + 501) >= 1)
  {
    uint64_t v140 = *(unsigned __int8 *)(a1 + 501);
    long long v141 = (void *)(a1 + 3800);
    while (*v141)
    {
      v141 += 2;
      if (!--v140) {
        goto LABEL_166;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_326;
    }
    *(_WORD *)buf = 0;
    int v138 = MEMORY[0x1E4F14500];
    long long v139 = "L1 found too few reference frames\n";
    goto LABEL_325;
  }
LABEL_166:
  if ((int)v125 < 1)
  {
    LOBYTE(v136) = 1;
    if (*(unsigned char *)(a1 + 10))
    {
LABEL_181:
      int v137 = 3;
      goto LABEL_289;
    }
  }
  else
  {
    uint64_t v130 = 0;
    uint64_t v131 = a1 + 4080;
    int v132 = 1;
    do
    {
      if (v130)
      {
        uint64_t v133 = 0;
        unint64_t v134 = (void *)(a1 + 3544);
        while (*(void *)(a1 + 3544 + 16 * v130) != *v134)
        {
          ++v133;
          v134 += 2;
          if (v130 == v133) {
            goto LABEL_172;
          }
        }
        int v135 = *(unsigned __int8 *)(v131 + v133);
      }
      else
      {
LABEL_172:
        int v135 = 0;
      }
      if (v135) {
        int v136 = v132;
      }
      else {
        int v136 = v132 + 1;
      }
      if (v135) {
        LOBYTE(v132) = v135;
      }
      *(unsigned char *)(v131 + v130++) = v132;
      int v132 = v136;
    }
    while (v130 != v125);
    if (v129) {
      goto LABEL_181;
    }
  }
  if (*(char *)(a1 + 501) < 1)
  {
    int v144 = 1;
  }
  else
  {
    uint64_t v142 = 0;
    uint64_t v143 = *(unsigned __int8 *)(a1 + 501);
    int v144 = 1;
    do
    {
      uint64_t v145 = *(void *)(a1 + 16 * v142 + 3800);
      if ((char)v126 < 1) {
        goto LABEL_200;
      }
      uint64_t v146 = 0;
      unsigned int v147 = (void *)(a1 + 3544);
      while (v145 != *v147)
      {
        ++v146;
        v147 += 2;
        if (v125 == v146) {
          goto LABEL_200;
        }
      }
      int v144 = 0;
      int v148 = *(unsigned __int8 *)(a1 + 4080 + v146);
      if (!v148)
      {
LABEL_200:
        if (v142)
        {
          uint64_t v149 = 0;
          uint64_t v150 = (void *)(a1 + 3800);
          while (v145 != *v150)
          {
            ++v149;
            v150 += 2;
            if (v142 == v149) {
              goto LABEL_204;
            }
          }
          int v148 = *(unsigned __int8 *)(a1 + v149 + 4096);
        }
        else
        {
LABEL_204:
          int v148 = 0;
        }
      }
      if (v148) {
        char v151 = v148;
      }
      else {
        char v151 = v136;
      }
      if (!v148) {
        LOBYTE(v136) = v136 + 1;
      }
      *(unsigned char *)(a1 + v142++ + 4096) = v151;
    }
    while (v142 != v143);
  }
  int v137 = (v144 << 31 >> 31) & 3;
LABEL_289:
  if (v125 == 1) {
    int v196 = 4;
  }
  else {
    int v196 = 1;
  }
  if (v129 != 1) {
    int v196 = v137;
  }
  if (!*(unsigned char *)a1)
  {
    if (*(_DWORD *)(a1 + 4352) == v196) {
      goto LABEL_298;
    }
    int v196 = 0;
  }
  *(_DWORD *)(a1 + 4352) = v196;
LABEL_298:
  *(void *)(a1 + 4360) = sub_1BBA17790;
  *(void *)(a1 + 4368) = 0;
  char v197 = sub_1BBA1735C;
  if (v196 == 4)
  {
LABEL_301:
    char v197 = sub_1BBA175E4;
    goto LABEL_302;
  }
  if (v196 != 3)
  {
    if (v196 != 1) {
      goto LABEL_303;
    }
    goto LABEL_301;
  }
LABEL_302:
  *(void *)(a1 + 4360) = v197;
LABEL_303:
  uint64_t v198 = *(void *)(a1 + 1384);
  int v199 = sub_1BBA16A1C;
  if (!*(unsigned char *)(v198 + 17) || v129 != 1)
  {
    BOOL v200 = v129 || *(unsigned char *)(v198 + 18) == 0;
    int v199 = sub_1BBA16FE8;
    if (!v200) {
      int v199 = sub_1BBA16A1C;
    }
  }
  *(void *)(a1 + 4376) = v199;
  *(void *)(a1 + 4384) = 0;
  uint64_t v201 = sub_1BBAD2C10;
  switch(v196)
  {
    case 4:
      uint64_t v201 = sub_1BBAD2E30;
      goto LABEL_315;
    case 3:
LABEL_315:
      *(void *)(a1 + 4360) = v201;
      *(void *)(a1 + 4368) = 0;
      break;
    case 1:
      uint64_t v201 = sub_1BBAD2FBC;
      goto LABEL_315;
  }
  if (v126 != *(unsigned __int8 *)(a1 + 501))
  {
LABEL_322:
    char v41 = 0;
    *(unsigned char *)(v8 + 72) = 0;
    goto LABEL_37;
  }
  char v41 = 1;
  *(unsigned char *)(v8 + 72) = 1;
  if ((char)v126 >= 1)
  {
    uint64_t v202 = a1 + 3800;
    while (*(_DWORD *)(*(void *)(v202 - 256) + 680) == *(_DWORD *)(*(void *)v202 + 680))
    {
      v202 += 16;
      char v41 = 1;
      if (!--v126) {
        goto LABEL_37;
      }
    }
    goto LABEL_322;
  }
LABEL_37:
  *(unsigned char *)(a1 + 536) = v41;
  *(void *)(a1 + 1416) = a2[2].n128_u64[0];
  __n128 v42 = a2[1];
  *(int8x16_t *)uint64_t v271 = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
  if (a4 && (**(unsigned int (***)(unint64_t, __n128))v42.n128_u64[0])(v42.n128_u64[0], v42))
  {
    uint64_t v264 = v8;
    uint64_t v43 = *(void *)(a1 + 1400);
    int v44 = *(_DWORD *)(v43 + 8);
    uint64_t v45 = *(void *)(a1 + 1360);
    if (v44 > *(_DWORD *)(v45 + 276)
      || ((int v46 = *(_DWORD *)(v43 + 12), v46 >= 17) ? (v47 = v44 < 17) : (v47 = 1),
          !v47 ? (BOOL v48 = v46 <= *(_DWORD *)(v45 + 280)) : (BOOL v48 = 0),
          !v48))
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294954387;
      }
      *(_WORD *)buf = 0;
      int32x4_t v49 = MEMORY[0x1E4F14500];
      int8x16_t v50 = "ScaleActiveReference failed\n";
LABEL_329:
      _os_log_error_impl(&dword_1BB9B9000, v49, OS_LOG_TYPE_ERROR, v50, buf, 2u);
      return 4294954387;
    }
    if (*(unsigned char *)(a1 + 10) != 2 && *(char *)(a1 + 500) >= 1)
    {
      uint64_t v152 = 0;
      uint64_t v270 = a1 + 3544;
      do
      {
        uint64_t v153 = *(void *)(v270 + 16 * v152);
        if (*(_DWORD *)(v153 + 248) == v44 && *(_DWORD *)(v153 + 252) == v46)
        {
          if ((*(uint64_t (**)(void, void))(*(void *)v153 + 32))(*(void *)(v270 + 16 * v152), 0) != *(void *)(v153 + 192)) {
            *(unsigned char *)(v153 + 272) = 1;
          }
          *(_OWORD *)(v153 + 88) = *(_OWORD *)(v153 + 192);
          *(_OWORD *)(v153 + 112) = *(_OWORD *)(v153 + 216);
        }
        else if (*(_DWORD *)(v153 + 240) == v44 && *(_DWORD *)(v153 + 244) == v46)
        {
          uint64_t v154 = (*(uint64_t (**)(void, void))(*(void *)v153 + 32))(*(void *)(v270 + 16 * v152), 0);
          if (v154 != (*(uint64_t (**)(uint64_t, void))(*(void *)v153 + 48))(v153, 0)) {
            *(unsigned char *)(v153 + 272) = 1;
          }
          uint64_t v155 = 0;
          char v156 = 1;
          do
          {
            char v157 = v156;
            uint64_t v158 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v153 + 48))(v153, v155);
            char v156 = 0;
            int v159 = (void *)(v153 + 8 * v155);
            v159[11] = v158;
            v159[14] = v159[21];
            uint64_t v155 = 1;
          }
          while ((v157 & 1) != 0);
        }
        else
        {
          uint64_t v160 = *(int *)(v153 + 280);
          if (v160)
          {
            uint64_t v161 = *(void *)(v153 + 216);
            size_t v162 = *(int *)(v153 + 276);
            uint64_t v163 = *(char **)(v153 + 192);
            do
            {
              --v160;
              memset(v163, 128, v162);
              v163 += v161;
            }
            while (v160);
            unsigned int v164 = *(_DWORD *)(v153 + 280);
            if (v164 >= 2)
            {
              size_t v165 = *(int *)(v153 + 276);
              uint64_t v166 = *(void *)(v153 + 224);
              uint64_t v167 = (uint64_t)(int)v164 >> 1;
              uint64_t v168 = *(char **)(v153 + 200);
              do
              {
                --v167;
                memset(v168, 128, v165);
                v168 += v166;
              }
              while (v167);
            }
          }
          uint64_t v169 = 0;
          char v170 = 1;
          do
          {
            char v171 = v170;
            uint64_t v172 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v153 + 48))(v153, v169);
            char v170 = 0;
            *(void *)(*(void *)(a1 + 1416) + 8 * v169) = v172;
            uint64_t v177 = (void *)(v153 + 8 * v169);
            *(void *)(*(void *)(a1 + 1416) + 8 * v169 + 16) = v177[24];
            uint64_t v178 = *(void *)(a1 + 1416);
            uint64_t v179 = v178 + 8 * v169;
            *(void *)(v179 + 32) = v177[21];
            *(void *)(v179 + 48) = v177[27];
            uint64_t v169 = 1;
          }
          while ((v171 & 1) != 0);
          *(void *)(v178 + 64) = *(void *)(v153 + 240);
          *(_DWORD *)(v178 + 72) = v44;
          *(_DWORD *)(v178 + 76) = v46;
          sub_1BBAA6500(v178, v173, v174, v175, v176);
          *(_OWORD *)(v153 + 88) = *(_OWORD *)(v153 + 192);
          *(_OWORD *)(v153 + 112) = *(_OWORD *)(v153 + 216);
          *(_DWORD *)(v153 + 248) = v44;
          *(_DWORD *)(v153 + 252) = v46;
          *(unsigned char *)(v153 + 272) = 1;
          uint64_t v26 = v272;
        }
        ++v152;
      }
      while (v152 < *(char *)(a1 + 500));
      uint64_t v45 = *(void *)(a1 + 1360);
    }
    *(_DWORD *)(v45 + 240) = v44;
    *(_DWORD *)(v45 + 244) = v46;
    *(void *)(v45 + 248) = 0;
    uint64_t v8 = v264;
  }
  if (!*(unsigned char *)(a1 + 600))
  {
    *(unsigned char *)(a1 + 20) = 0;
    uint64_t v182 = *(void *)(a1 + 1368);
    uint64_t v183 = *(unsigned int *)(v182 + 260);
    if (v183)
    {
      uint64_t v184 = 0;
      uint64_t v185 = *(unsigned __int8 **)(*(void *)(v8 + 128) + 1112);
      uint64_t v186 = *(unsigned __int8 **)(v182 + 264);
      while (!sub_1BBAE432C(v185, v186))
      {
        ++v184;
        v186 += 248;
        if (v183 == v184) {
          goto LABEL_241;
        }
      }
      *(_DWORD *)(a1 + 272) = v184;
      *(unsigned char *)(a1 + 20) = 1;
    }
  }
LABEL_241:
  int v180 = (char)v26[3334];
  *(_DWORD *)(a1 + 276) = v180;
  *(_DWORD *)(a1 + 280) = v180;
  *(unsigned char *)(a1 + 498) = v26[3430];
  *(unsigned char *)(a1 + 499) = 1;
  *(unsigned char *)(a1 + 537) = 0;
  *(unsigned char *)(a1 + 542) = 5 - *(unsigned char *)(a1 + 620);
  if (v26[3400])
  {
    int v181 = (int)(*(float *)(*(void *)(v8 + 128) + 2720) + 0.5)
         - *(unsigned __int8 *)(*(void *)(a1 + 1384) + 9)
         - 26;
LABEL_250:
    *(unsigned char *)(a1 + 543) = v181;
    goto LABEL_251;
  }
  *(unsigned char *)(a1 + 543) = 0;
  if (*(unsigned __int8 *)(a1 + 10) <= 1u)
  {
    int v181 = *(_DWORD *)(*(void *)(v8 + 128) + 652);
    goto LABEL_250;
  }
LABEL_251:
  *(_WORD *)(a1 + 544) = 0;
  sub_1BBA18C94(a1);
  *(unsigned char *)(a1 + 543) = *(unsigned char *)(a1 + 621) - *(unsigned char *)(*(void *)(a1 + 1384) + 9) - 26;
  *(unsigned char *)(a1 + 546) = 0;
  int v187 = *(unsigned __int8 *)(a2[3].n128_u64[1] + 31);
  *(unsigned char *)(a1 + 547) = v187;
  if (!v187 || *(unsigned char *)(*(void *)(a1 + 1408) + 33) && *(unsigned char *)(*(void *)v271 + 80))
  {
    uint64_t v188 = sub_1BBA425F0((uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 3320), a1, 1);
    if (v188)
    {
      uint64_t v189 = v188;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        uint64_t v190 = MEMORY[0x1E4F14500];
        unsigned int v191 = "Deblock initialize failed\n";
        goto LABEL_257;
      }
      return v189;
    }
    if (!v26[3532] && (char)v26[3770] < 1) {
      goto LABEL_334;
    }
    *(unsigned char *)(a1 + 546) = 0;
    *(_WORD *)(a1 + 548) = *(_WORD *)(*(void *)(a1 + 1384) + 32);
    if (!*(unsigned char *)(*(void *)v8 + 224) || (int v192 = *(char *)(*(void *)v8 + 586), v192 <= 0))
    {
      if (!(*(unsigned int (**)(void))(**(void **)v271 + 16))())
      {
LABEL_334:
        *(unsigned char *)(a1 + 628) = 2 * *(unsigned char *)(a1 + 548);
        *(unsigned char *)(a1 + 629) = 2 * *(unsigned char *)(a1 + 549);
        goto LABEL_335;
      }
      int v193 = *(_DWORD *)(*(void *)v271 + 12);
      if (*(_DWORD *)(*(void *)v271 + 8) > v193) {
        int v193 = *(_DWORD *)(*(void *)v271 + 8);
      }
      if (v193 >= 192)
      {
        if (v193 >= 0x100)
        {
          if (v193 > 0x13F)
          {
LABEL_333:
            *(unsigned char *)(a1 + 546) = 1;
            goto LABEL_334;
          }
          LOBYTE(v192) = 4;
        }
        else
        {
          LOBYTE(v192) = 6;
        }
      }
      else
      {
        LOBYTE(v192) = 3;
      }
    }
    *(unsigned char *)(a1 + 548) = v192;
    *(unsigned char *)(a1 + 549) = v192;
    goto LABEL_333;
  }
LABEL_335:
  *(unsigned char *)(a1 + 550) = 0;
  int v203 = v26[3418];
  *(unsigned char *)(a1 + 496) = (char)v26[3418] > 0;
  *(unsigned char *)(a1 + 497) = v203 == 2;
  uint64_t v204 = a1 + 79096;
  *(_OWORD *)(a1 + 79096) = 0u;
  *(_OWORD *)(a1 + 79112) = 0u;
  *(_OWORD *)(a1 + 79128) = 0u;
  *(_OWORD *)(a1 + 79144) = 0u;
  unint64_t v205 = a2[3].n128_u64[1];
  if (*(unsigned char *)(v205 + 17) || *(unsigned char *)(v205 + 18))
  {
    if (v26[3533])
    {
      if (*(unsigned char *)(a1 + 10) == 1)
      {
        LODWORD(v206) = *(char *)(a1 + 500);
        if ((int)v206 <= 0)
        {
          int v219 = 0;
          long long v211 = 0;
          double v216 = -1.79769313e308;
        }
        else
        {
          uint64_t v207 = 0;
          unint64_t v208 = 0;
          unint64_t v209 = (std::__shared_weak_count **)(a1 + 3552);
          do
          {
            uint64_t v210 = (uint64_t)*(v209 - 1);
            long long v211 = *v209;
            if (*v209) {
              atomic_fetch_add_explicit(&v211->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v208) {
              sub_1BB9C09B4(v208);
            }
            float v212 = *(float *)(v210 + 84);
            if (v212 == 0.0) {
              double v213 = 1.0;
            }
            else {
              double v213 = *(float *)(*(void *)(*(void *)(v8 + 128) + 592) + 84) / v212;
            }
            *(long double *)&buf[8 * v207++] = pow(v213, 0.454545455);
            uint64_t v206 = *(char *)(a1 + 500);
            v209 += 2;
            unint64_t v208 = v211;
          }
          while (v207 < v206);
          if ((int)v206 < 1)
          {
            int v219 = 0;
            double v216 = -1.79769313e308;
            uint64_t v26 = v272;
          }
          else
          {
            uint64_t v214 = v206;
            long long v215 = buf;
            double v216 = -1.79769313e308;
            uint64_t v26 = v272;
            do
            {
              double v217 = *(double *)v215;
              v215 += 8;
              double v218 = v217;
              if (v216 < v217) {
                double v216 = v218;
              }
              --v214;
            }
            while (v214);
            int v219 = 1;
          }
        }
        int v227 = 7;
        do
        {
          int v228 = 1 << v227;
          double v229 = (double)(1 << v227);
          BOOL v230 = v227-- != 0;
        }
        while (v230 && v216 * v229 > (double)(v228 + 127));
        if (v219)
        {
          uint64_t v231 = 0;
          char v232 = v227 + 1;
          int v233 = (v227 + 1);
          uint64_t v234 = *(void *)(a1 + 1368);
          int v235 = *(unsigned __int8 *)(v234 + 2000);
          int v236 = *(unsigned __int8 *)(v234 + 2002);
          uint64_t v237 = a1 + 640;
          do
          {
            uint64_t v238 = 0;
            double v239 = *(double *)&buf[8 * v231] * v229 + 0.5 - v229;
            if (v239 < 127.0) {
              double v240 = *(double *)&buf[8 * v231] * v229 + 0.5 - v229;
            }
            else {
              double v240 = 127.0;
            }
            if (v239 <= -128.0) {
              double v241 = -128.0;
            }
            else {
              double v241 = v240;
            }
            do
            {
              if (v238) {
                __int16 v242 = 0;
              }
              else {
                __int16 v242 = (int)v241;
              }
              long long v243 = (_WORD *)(v237 + v238);
              v243[48] = v242 + v228;
              *long long v243 = 0;
              v243[144] = v228;
              v243[96] = 0;
              v238 += 2;
            }
            while (v238 != 6);
            if ((int)v241) {
              *(_WORD *)(v204 + 2 * v231) = 1;
            }
            ++v231;
            v237 += 6;
          }
          while (v231 != v206);
          *(unsigned char *)(a1 + 540) = v232;
          *(unsigned char *)(a1 + 630) = v232;
          *(unsigned char *)(a1 + 541) = 0;
          *(_DWORD *)(a1 + 632) = v233 + 14 - v235;
          *(_DWORD *)(a1 + 636) = v233 + 14 - v236;
        }
        if (v211) {
          sub_1BB9C09B4(v211);
        }
      }
    }
    else if (v26[3534])
    {
      if (*(char *)(a1 + 500) >= 1)
      {
        int v220 = 0;
        do
          sub_1BBACD624((void *)a1, 0, v220++);
        while (v220 < *(char *)(a1 + 500));
      }
      uint64_t v221 = *(unsigned __int8 *)(a1 + 501);
      if (*(unsigned char *)(a1 + 79160))
      {
        if ((char)v221 >= 1)
        {
          uint64_t v222 = 0;
          uint64_t v223 = a1 + 640;
          do
          {
            for (uint64_t i = 0; i != 6; i += 2)
            {
              uint64_t v225 = v223 + i;
              *(_WORD *)(v225 + 288) = *(_WORD *)(v223 + i + 96);
              *(_WORD *)(v225 + 192) = *(_WORD *)(v223 + i);
            }
            *(_WORD *)(a1 + 2 * v222 + 79128) = *(_WORD *)(v204 + 2 * v222);
            ++v222;
            v223 += 6;
          }
          while (v222 != v221);
        }
      }
      else if ((char)v221 >= 1)
      {
        int v226 = 0;
        do
          sub_1BBACD624((void *)a1, 1u, v226++);
        while (v226 < *(char *)(a1 + 501));
      }
    }
  }
  if (!a5) {
    return 0;
  }
  long long v244 = *(void **)(a1 + 1360);
  if (v244[61] * v244[60])
  {
    unint64_t v245 = 0;
    __int16 v246 = *(unsigned __int8 *)(a1 + 621) << 9;
    do
    {
      *(_WORD *)(v244[64] + 2 * v245) = *(_WORD *)(v244[64] + 2 * v245) & 0x1FF | v246;
      ++v245;
    }
    while (v244[61] * v244[60] > v245);
  }
  if (*((_DWORD *)v26 + 840) == 4)
  {
    unint64_t v247 = ((~*(_DWORD *)(a1 + 4) + v267 + *(_DWORD *)(v8 + 220)) / v267 - 1);
    *(_DWORD *)(a1 + 552) = v247;
    uint64_t v189 = sub_1BBA39A24((void **)(a1 + 560), v247);
    if (v189) {
      return v189;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 552) = 0;
  }
  int v248 = *(char *)(a1 + 500);
  if (v248 >= 1)
  {
    uint64_t v249 = 0;
    uint64_t v250 = a1 + 3544;
    do
    {
      uint64_t v251 = *(void *)v250;
      if (*(unsigned char *)(*(void *)v250 + 272))
      {
        uint64_t v252 = sub_1BBA87D1C((void *)(v251 + 944), *(unsigned __int8 *)(a2[2].n128_u64[1] + 2013));
        if (v252) {
          return v252;
        }
        sub_1BBA88754((void *)(v251 + 944), *(unsigned int *)(v251 + 280));
        *(unsigned char *)(v251 + 272) = 0;
        LOBYTE(v248) = *(unsigned char *)(a1 + 500);
      }
      ++v249;
      v250 += 16;
    }
    while (v249 < (char)v248);
  }
  int v253 = *(char *)(a1 + 501);
  if (v253 >= 1)
  {
    uint64_t v254 = 0;
    uint64_t v255 = a1 + 3800;
    do
    {
      uint64_t v256 = *(void *)v255;
      if (*(unsigned char *)(*(void *)v255 + 272))
      {
        uint64_t v257 = sub_1BBA87D1C((void *)(v256 + 944), *(unsigned __int8 *)(a2[2].n128_u64[1] + 2013));
        if (v257)
        {
          uint64_t v189 = v257;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            uint64_t v190 = MEMORY[0x1E4F14500];
            unsigned int v191 = "Interpolation cache initialize failed\n";
            goto LABEL_257;
          }
          return v189;
        }
        sub_1BBA88754((void *)(v256 + 944), *(unsigned int *)(v256 + 280));
        *(unsigned char *)(v256 + 272) = 0;
        LOBYTE(v253) = *(unsigned char *)(a1 + 501);
      }
      ++v254;
      v255 += 16;
    }
    while (v254 < (char)v253);
  }
  uint64_t v258 = sub_1BBA20D9C((void *)(a1 + 1424), *(unsigned __int8 *)(*(void *)(a1 + 1368) + 2000), *(unsigned __int8 *)(a2[2].n128_u64[1] + 323), 0);
  if (v258)
  {
    uint64_t v189 = v258;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v190 = MEMORY[0x1E4F14500];
      unsigned int v191 = "Intra initialize failed\n";
      goto LABEL_257;
    }
    return v189;
  }
  uint64_t v259 = sub_1BBA1FD3C(a1 + 1840, *(unsigned __int8 *)(*(void *)(a1 + 1368) + 2000));
  if (v259)
  {
    uint64_t v189 = v259;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v190 = MEMORY[0x1E4F14500];
      unsigned int v191 = "Trans initialize failed\n";
      goto LABEL_257;
    }
    return v189;
  }
  uint64_t v260 = sub_1BBA26A04((void *)(a1 + 2104), *(unsigned __int8 *)(*(void *)(a1 + 1368) + 2000));
  if (!v260)
  {
    if (*(unsigned char *)(a1 + 496) || *(unsigned char *)(a1 + 497)) {
      sub_1BBAD10CC(a1 + 78120, *(char *)(a1 + 621), a1);
    }
    return 0;
  }
  uint64_t v189 = v260;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    uint64_t v190 = MEMORY[0x1E4F14500];
    unsigned int v191 = "Mocomp initialize failed\n";
LABEL_257:
    _os_log_error_impl(&dword_1BB9B9000, v190, OS_LOG_TYPE_ERROR, v191, buf, 2u);
  }
  return v189;
}

uint64_t sub_1BBACD624(void *a1, unsigned int a2, int a3)
{
  unint64_t v11 = a1[171];
  char v243 = *(unsigned char *)(v11 + 194);
  char v5 = *(unsigned char *)(v11 + 195);
  int v6 = *(unsigned __int8 *)(v11 + 2000);
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  unint64_t v9 = (unint64_t)&a1[32 * (unint64_t)a2 + 2 * a3];
  uint64_t v10 = a1[9902];
  LODWORD(v11) = *(_DWORD *)(*(void *)(v9 + 3544) + 8) - *(_DWORD *)(v10 + 644);
  if ((v11 & 0x80000000) == 0) {
    unint64_t v11 = v11;
  }
  else {
    unint64_t v11 = (*(_DWORD *)(v10 + 644) - *(_DWORD *)(*(void *)(v9 + 3544) + 8));
  }
  unint64_t v241 = v11;
  uint64_t v258 = (*(uint64_t (**)(void, void, void, void))(**(void **)(v10 + 592) + 16))(*(void *)(v10 + 592), 0, 0, 0);
  int v12 = *(void **)(a1[9902] + 592);
  uint64_t v263 = v12[14];
  uint64_t v13 = (*(uint64_t (**)(void *, void, void, uint64_t))(*v12 + 16))(v12, 0, 0, 1);
  uint64_t v14 = *(void *)(*(void *)(a1[9902] + 592) + 120);
  uint64_t v262 = (*(uint64_t (**)(void, void, void, void))(**(void **)(v9 + 3544) + 16))(*(void *)(v9 + 3544), 0, 0, 0);
  int v15 = *(void **)(v9 + 3544);
  uint64_t v16 = v15[14];
  uint64_t v17 = (*(uint64_t (**)(void *, void, void, uint64_t))(*v15 + 16))(v15, 0, 0, 1);
  uint64_t v20 = a1[170];
  int v21 = *(_DWORD *)(v20 + 280);
  unint64_t v22 = (v21 - 32);
  uint64_t v246 = v7;
  unint64_t v247 = a1;
  uint64_t v245 = v8;
  char v244 = v5;
  unsigned int v242 = a2;
  if (v21 >= 32)
  {
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v282 = 0;
    int v257 = 230 << v6;
    int v27 = 20 << v6;
    int v28 = 45 << v6;
    uint64_t v29 = *(void *)(*(void *)(v9 + 3544) + 120);
    uint64_t v298 = 0;
    v299[0] = 0;
    uint64_t v296 = 0;
    uint64_t v297 = 0;
    uint64_t v294 = 0;
    uint64_t v295 = 0;
    uint64_t v250 = v20;
    uint64_t v30 = *(int *)(v20 + 276);
    uint64_t v292 = 0;
    uint64_t v293 = 0;
    uint64_t v289 = v30 - 32;
    uint64_t v290 = 0;
    uint64_t v31 = 2 * v29;
    uint64_t v291 = 0;
    uint64_t v252 = v14 << 6;
    uint64_t v253 = v29 << 6;
    uint64_t v32 = 2 * v14;
    uint64_t v33 = v13;
    uint64_t v284 = v17;
    uint64_t v34 = v17;
    uint64_t v35 = v258;
    uint64_t v37 = v262;
    uint64_t v36 = v263;
    uint64_t v38 = v16;
    uint64_t v261 = v16;
    int v259 = 45 << v6;
    int v260 = 20 << v6;
    do
    {
      if ((int)v30 >= 33)
      {
        uint64_t v39 = 0;
        uint64_t v40 = v33;
        uint64_t v41 = v34;
        uint64_t v42 = v282;
        do
        {
          if (*(unsigned char *)(a1[171] + 2000) == 8)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = v17 + v29 * (v25 >> 1) + v39;
            uint64_t v46 = v13 + v14 * (v25 >> 1) + v39;
            do
            {
              uint64_t v47 = 0;
              int64x2_t v48 = 0uLL;
              int64x2_t v49 = (int64x2_t)(unint64_t)v44;
              int64x2_t v50 = 0uLL;
              int64x2_t v51 = 0uLL;
              int64x2_t v52 = 0uLL;
              int64x2_t v53 = 0uLL;
              int64x2_t v54 = 0uLL;
              int64x2_t v55 = 0uLL;
              do
              {
                uint8x16_t v56 = vabdq_u8(*(uint8x16_t *)(v46 + v47), *(uint8x16_t *)(v45 + v47));
                uint16x8_t v57 = vmovl_u8(*(uint8x8_t *)v56.i8);
                int64x2_t v18 = (int64x2_t)vmovl_u16(*(uint16x4_t *)v57.i8);
                uint32x4_t v58 = vmovl_high_u16(v57);
                uint16x8_t v59 = vmovl_high_u8(v56);
                uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)v59.i8);
                uint32x4_t v61 = vmovl_high_u16(v59);
                int64x2_t v53 = (int64x2_t)vaddw_high_u32((uint64x2_t)v53, v60);
                int64x2_t v51 = (int64x2_t)vaddw_high_u32((uint64x2_t)v51, v58);
                int64x2_t v54 = (int64x2_t)vaddw_u32((uint64x2_t)v54, *(uint32x2_t *)v61.i8);
                int64x2_t v52 = (int64x2_t)vaddw_u32((uint64x2_t)v52, *(uint32x2_t *)v60.i8);
                int64x2_t v50 = (int64x2_t)vaddw_u32((uint64x2_t)v50, *(uint32x2_t *)v58.i8);
                int64x2_t v48 = (int64x2_t)vaddw_high_u32((uint64x2_t)v48, (uint32x4_t)v18);
                int64x2_t v55 = (int64x2_t)vaddw_high_u32((uint64x2_t)v55, v61);
                int64x2_t v49 = (int64x2_t)vaddw_u32((uint64x2_t)v49, *(uint32x2_t *)v18.i8);
                v47 += 16;
              }
              while (v47 != 32);
              uint64_t v44 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v49, v52), vaddq_s64(v50, v54)), vaddq_s64(vaddq_s64(v48, v53), vaddq_s64(v51, v55))));
              v46 += v14;
              v45 += v29;
              ++v43;
            }
            while (v43 != 16);
          }
          else
          {
            int v62 = 0;
            uint64_t v44 = 0;
            uint64_t v63 = v40;
            uint64_t v64 = v41;
            do
            {
              uint64_t v65 = 0;
              int64x2_t v66 = 0uLL;
              int64x2_t v67 = (int64x2_t)(unint64_t)v44;
              int64x2_t v68 = 0uLL;
              int64x2_t v69 = 0uLL;
              do
              {
                uint16x8_t v70 = vabdq_u16(*(uint16x8_t *)(v63 + v65), *(uint16x8_t *)(v64 + v65));
                uint32x4_t v71 = vmovl_u16(*(uint16x4_t *)v70.i8);
                uint32x4_t v72 = vmovl_high_u16(v70);
                int64x2_t v69 = (int64x2_t)vaddw_high_u32((uint64x2_t)v69, v72);
                int64x2_t v68 = (int64x2_t)vaddw_u32((uint64x2_t)v68, *(uint32x2_t *)v72.i8);
                int64x2_t v66 = (int64x2_t)vaddw_high_u32((uint64x2_t)v66, v71);
                int64x2_t v67 = (int64x2_t)vaddw_u32((uint64x2_t)v67, *(uint32x2_t *)v71.i8);
                v65 += 16;
              }
              while (v65 != 64);
              uint64_t v44 = vaddvq_s64(vaddq_s64(vaddq_s64(v67, v68), vaddq_s64(v66, v69)));
              ++v62;
              v64 += v31;
              v63 += v32;
            }
            while (v62 != 16);
          }
          v42 += v44;
          v39 += 64;
          v41 += 128;
          v40 += 128;
        }
        while (v39 < v289);
        uint64_t v282 = v42;
        v26 += ((v30 - 33) >> 6) + 1;
        uint64_t v37 = v262;
        uint64_t v36 = v263;
        uint64_t v38 = v16;
        int v28 = 45 << v6;
        int v27 = 20 << v6;
      }
      v25 += 64;
      v34 += v253;
      v33 += v252;
    }
    while (v25 <= v22);
    uint64_t v281 = v13;
    if (v26 > 0) {
      uint64_t v282 = (uint64_t)(v282 + ((unint64_t)v26 >> 1)) / v26;
    }
    int v73 = 230 << v6;
    unint64_t v256 = 0;
    uint64_t v269 = 0;
    uint64_t v270 = 0;
    uint64_t v274 = 0;
    uint64_t v275 = 0;
    uint64_t v271 = 0;
    uint64_t v272 = 0;
    uint64_t v24 = 0;
    uint64_t v273 = 0;
    uint64_t v267 = 0;
    uint64_t v268 = 0;
    uint64_t v276 = 0;
    uint64_t v277 = 0;
    int v278 = 0;
    int v23 = 0;
    uint64_t v74 = 8000;
    if (v6 == 8) {
      uint64_t v74 = 2000;
    }
    uint64_t v280 = v74;
    uint64_t v75 = 4000;
    if (v6 == 8) {
      uint64_t v75 = 1000;
    }
    uint64_t v251 = v75;
    uint64_t v76 = 1600;
    if (v6 == 8) {
      uint64_t v76 = 100;
    }
    uint64_t v249 = v76;
    int v248 = *(_DWORD *)(v20 + 276);
    uint64_t v77 = 2 * v36;
    uint64_t v78 = 2 * v38;
    v79.i64[0] = 255;
    v79.i64[1] = 255;
    uint64_t v255 = v13;
    uint64_t v254 = v284;
    do
    {
      if (v248 >= 33)
      {
        uint64_t v80 = 0;
        uint64_t v286 = v38 * (int)v256;
        uint64_t v287 = v36 * (int)v256;
        unint64_t v279 = v256 >> 1;
        int v81 = *(unsigned __int8 *)(v247[171] + 2000);
        uint64_t v82 = v254;
        uint64_t v83 = v255;
        int v288 = v81;
        do
        {
          if (v81 == 8)
          {
            uint64_t v84 = 0;
            uint64_t v85 = 0;
            uint64_t v86 = 0;
            unint64_t v87 = 0;
            uint64_t v88 = 0;
            int v89 = 0;
            uint64_t v90 = v37 + v286 + (int)v80;
            uint64_t v91 = v35 + v287 + (int)v80;
            do
            {
              uint64_t v92 = 0;
              int64x2_t v93 = (int64x2_t)(unint64_t)v84;
              int64x2_t v94 = 0uLL;
              int64x2_t v95 = (int64x2_t)(unint64_t)v85;
              int64x2_t v96 = (int64x2_t)(unint64_t)v86;
              int64x2_t v97 = (int64x2_t)v87;
              int64x2_t v98 = (int64x2_t)(unint64_t)v88;
              int64x2_t v99 = 0uLL;
              int64x2_t v100 = 0uLL;
              int64x2_t v101 = 0uLL;
              int64x2_t v102 = 0uLL;
              do
              {
                v18.i32[0] = *(_DWORD *)(v91 + v92);
                uint16x4_t v103 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v18.i8).u64[0];
                uint32x4_t v104 = vmovl_u16(v103);
                v105.i64[0] = v104.u32[0];
                v105.i64[1] = v104.u32[1];
                int64x2_t v106 = (int64x2_t)vandq_s8(v105, v79);
                v105.i64[0] = v104.u32[2];
                v105.i64[1] = v104.u32[3];
                int64x2_t v107 = (int64x2_t)vandq_s8(v105, v79);
                int64x2_t v94 = vaddq_s64(v94, v107);
                int64x2_t v93 = vaddq_s64(v93, v106);
                v19.i32[0] = *(_DWORD *)(v90 + v92);
                v19.i64[0] = vmovl_u8(*(uint8x8_t *)v19.i8).u64[0];
                uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v19.i8);
                v105.i64[0] = v108.u32[0];
                v105.i64[1] = v108.u32[1];
                int64x2_t v109 = (int64x2_t)vandq_s8(v105, v79);
                v105.i64[0] = v108.u32[2];
                v105.i64[1] = v108.u32[3];
                int64x2_t v110 = (int64x2_t)vandq_s8(v105, v79);
                int64x2_t v99 = vaddq_s64(v99, v110);
                int64x2_t v95 = vaddq_s64(v95, v109);
                uint32x4_t v111 = vmull_u16(v103, v103);
                int64x2_t v100 = (int64x2_t)vaddw_high_u32((uint64x2_t)v100, v111);
                int64x2_t v96 = (int64x2_t)vaddw_u32((uint64x2_t)v96, *(uint32x2_t *)v111.i8);
                uint32x4_t v112 = vmull_u16(*(uint16x4_t *)v19.i8, *(uint16x4_t *)v19.i8);
                int64x2_t v101 = (int64x2_t)vaddw_high_u32((uint64x2_t)v101, v112);
                v106.i64[0] *= v109.i64[0];
                v106.i64[1] *= v109.i64[1];
                int64x2_t v97 = (int64x2_t)vaddw_u32((uint64x2_t)v97, *(uint32x2_t *)v112.i8);
                v18.i64[0] = v110.i64[0] * v107.i64[0];
                v18.i64[1] = v110.i64[1] * v107.i64[1];
                int64x2_t v102 = vaddq_s64(v18, v102);
                int64x2_t v98 = vaddq_s64(v106, v98);
                v92 += 4;
              }
              while (v92 != 32);
              uint64_t v113 = vaddvq_s64(vaddq_s64(v98, v102));
              uint64_t v88 = v113;
              uint64_t v114 = vaddvq_s64(vaddq_s64(v97, v101));
              unint64_t v87 = v114;
              uint64_t v115 = vaddvq_s64(vaddq_s64(v96, v100));
              uint64_t v86 = v115;
              uint64_t v116 = vaddvq_s64(vaddq_s64(v95, v99));
              uint64_t v85 = v116;
              uint64_t v117 = vaddvq_s64(vaddq_s64(v93, v94));
              uint64_t v84 = v117;
              v91 += v36;
              v90 += v38;
              ++v89;
            }
            while (v89 != 32);
            uint64_t v118 = (v115 << 10) - v117 * v117;
            uint64_t v119 = (v114 << 10) - v116 * v116;
            if (v118 < 1 || v119 < 1)
            {
              if (v119 <= 0 && v118 <= 0) {
                float v149 = 1.0;
              }
              else {
                float v149 = 0.0;
              }
            }
            else
            {
              float v149 = (float)((v113 << 10) - v116 * v117) / sqrtf((float)v118 * (float)v119);
            }
            int v81 = v288;
          }
          else
          {
            uint64_t v84 = 0;
            uint64_t v85 = 0;
            uint64_t v86 = 0;
            unint64_t v87 = 0;
            uint64_t v88 = 0;
            int v122 = 0;
            uint64_t v123 = v35 + 2 * (v287 + (int)v80);
            uint64_t v124 = v37 + 2 * (v286 + (int)v80);
            do
            {
              uint64_t v125 = 0;
              int64x2_t v126 = (int64x2_t)(unint64_t)v84;
              int64x2_t v127 = 0uLL;
              int64x2_t v128 = (int64x2_t)(unint64_t)v85;
              int64x2_t v129 = (int64x2_t)(unint64_t)v86;
              int64x2_t v130 = (int64x2_t)v87;
              int64x2_t v131 = (int64x2_t)(unint64_t)v88;
              int64x2_t v132 = 0uLL;
              int64x2_t v133 = 0uLL;
              int64x2_t v134 = 0uLL;
              int64x2_t v135 = 0uLL;
              do
              {
                uint16x4_t v136 = *(uint16x4_t *)(v123 + v125);
                uint32x4_t v137 = vmovl_u16(v136);
                int64x2_t v127 = (int64x2_t)vaddw_high_u32((uint64x2_t)v127, v137);
                int64x2_t v126 = (int64x2_t)vaddw_u32((uint64x2_t)v126, *(uint32x2_t *)v137.i8);
                uint16x4_t v138 = *(uint16x4_t *)(v124 + v125);
                uint32x4_t v19 = vmovl_u16(v138);
                int64x2_t v132 = (int64x2_t)vaddw_high_u32((uint64x2_t)v132, v19);
                int64x2_t v128 = (int64x2_t)vaddw_u32((uint64x2_t)v128, *(uint32x2_t *)v19.i8);
                uint32x4_t v139 = vmull_u16(v136, v136);
                int64x2_t v133 = (int64x2_t)vaddw_high_u32((uint64x2_t)v133, v139);
                int64x2_t v129 = (int64x2_t)vaddw_u32((uint64x2_t)v129, *(uint32x2_t *)v139.i8);
                int64x2_t v18 = (int64x2_t)vmull_u16(v138, v138);
                int64x2_t v134 = (int64x2_t)vaddw_high_u32((uint64x2_t)v134, (uint32x4_t)v18);
                int64x2_t v130 = (int64x2_t)vaddw_u32((uint64x2_t)v130, *(uint32x2_t *)v18.i8);
                int64x2_t v135 = (int64x2_t)vmlal_high_u32((uint64x2_t)v135, v19, v137);
                int64x2_t v131 = (int64x2_t)vmlal_u32((uint64x2_t)v131, *(uint32x2_t *)v19.i8, *(uint32x2_t *)v137.i8);
                v125 += 8;
              }
              while (v125 != 64);
              uint64_t v140 = vaddvq_s64(vaddq_s64(v131, v135));
              uint64_t v88 = v140;
              uint64_t v141 = vaddvq_s64(vaddq_s64(v130, v134));
              unint64_t v87 = v141;
              uint64_t v142 = vaddvq_s64(vaddq_s64(v129, v133));
              uint64_t v86 = v142;
              uint64_t v143 = vaddvq_s64(vaddq_s64(v128, v132));
              uint64_t v85 = v143;
              uint64_t v144 = vaddvq_s64(vaddq_s64(v126, v127));
              uint64_t v84 = v144;
              ++v122;
              v123 += v77;
              v124 += v78;
            }
            while (v122 != 32);
            uint64_t v145 = (v142 << 10) - v144 * v144;
            uint64_t v146 = (v141 << 10) - v143 * v143;
            if (v145 < 1 || v146 < 1)
            {
              if (v146 <= 0 && v145 <= 0) {
                float v149 = 1.0;
              }
              else {
                float v149 = 0.0;
              }
            }
            else
            {
              float v149 = (float)((v140 << 10) - v143 * v144) / sqrtf((float)v145 * (float)v146);
            }
          }
          unint64_t v150 = (v84 << 8) + 1535;
          if (v84 << 8 >= -512) {
            unint64_t v150 = (v84 << 8) + 512;
          }
          unint64_t v151 = v150 >> 10;
          unint64_t v152 = (v85 << 8) + 1535;
          if (v85 << 8 >= -512) {
            unint64_t v152 = (v85 << 8) + 512;
          }
          unint64_t v153 = v152 >> 10;
          if (v73 >= (int)v151 && v73 >= (int)v153 && v27 <= (int)v151 && v27 <= (int)v153)
          {
            int v157 = v151 - v153;
            if (v157 < 0) {
              int v157 = -v157;
            }
            if (v157 <= v28)
            {
              uint64_t v285 = v83;
              if (v81 == 8)
              {
                int v158 = 0;
                uint64_t v159 = 0;
                uint64_t v160 = v80;
                uint64_t v161 = v284 + v29 * (v256 >> 1) + v80;
                uint64_t v162 = v281 + v14 * (v256 >> 1) + v80;
                do
                {
                  uint64_t v163 = 0;
                  int64x2_t v164 = 0uLL;
                  int64x2_t v165 = (int64x2_t)(unint64_t)v159;
                  int64x2_t v166 = 0uLL;
                  int64x2_t v167 = 0uLL;
                  int64x2_t v168 = 0uLL;
                  int64x2_t v169 = 0uLL;
                  int64x2_t v170 = 0uLL;
                  int64x2_t v171 = 0uLL;
                  do
                  {
                    uint8x16_t v172 = vabdq_u8(*(uint8x16_t *)(v162 + v163), *(uint8x16_t *)(v161 + v163));
                    uint16x8_t v173 = vmovl_u8(*(uint8x8_t *)v172.i8);
                    uint32x4_t v174 = vmovl_u16(*(uint16x4_t *)v173.i8);
                    int64x2_t v18 = (int64x2_t)vmovl_high_u16(v173);
                    uint16x8_t v175 = vmovl_high_u8(v172);
                    uint32x4_t v176 = vmovl_u16(*(uint16x4_t *)v175.i8);
                    uint32x4_t v177 = vmovl_high_u16(v175);
                    int64x2_t v169 = (int64x2_t)vaddw_high_u32((uint64x2_t)v169, v176);
                    int64x2_t v167 = (int64x2_t)vaddw_high_u32((uint64x2_t)v167, (uint32x4_t)v18);
                    int64x2_t v170 = (int64x2_t)vaddw_u32((uint64x2_t)v170, *(uint32x2_t *)v177.i8);
                    int64x2_t v168 = (int64x2_t)vaddw_u32((uint64x2_t)v168, *(uint32x2_t *)v176.i8);
                    int64x2_t v166 = (int64x2_t)vaddw_u32((uint64x2_t)v166, *(uint32x2_t *)v18.i8);
                    int64x2_t v164 = (int64x2_t)vaddw_high_u32((uint64x2_t)v164, v174);
                    int64x2_t v171 = (int64x2_t)vaddw_high_u32((uint64x2_t)v171, v177);
                    int64x2_t v165 = (int64x2_t)vaddw_u32((uint64x2_t)v165, *(uint32x2_t *)v174.i8);
                    v163 += 16;
                  }
                  while (v163 != 32);
                  uint64_t v159 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v165, v168), vaddq_s64(v166, v170)), vaddq_s64(vaddq_s64(v164, v169), vaddq_s64(v167, v171))));
                  v162 += v14;
                  v161 += v29;
                  ++v158;
                }
                while (v158 != 16);
              }
              else
              {
                uint64_t v178 = v83;
                uint64_t v160 = v80;
                int v179 = 0;
                uint64_t v159 = 0;
                uint64_t v180 = v82;
                do
                {
                  uint64_t v181 = 0;
                  int64x2_t v182 = 0uLL;
                  int64x2_t v183 = (int64x2_t)(unint64_t)v159;
                  int64x2_t v184 = 0uLL;
                  int64x2_t v185 = 0uLL;
                  do
                  {
                    uint16x8_t v186 = vabdq_u16(*(uint16x8_t *)(v178 + v181), *(uint16x8_t *)(v180 + v181));
                    uint32x4_t v187 = vmovl_u16(*(uint16x4_t *)v186.i8);
                    uint32x4_t v188 = vmovl_high_u16(v186);
                    int64x2_t v185 = (int64x2_t)vaddw_high_u32((uint64x2_t)v185, v188);
                    int64x2_t v184 = (int64x2_t)vaddw_u32((uint64x2_t)v184, *(uint32x2_t *)v188.i8);
                    int64x2_t v182 = (int64x2_t)vaddw_high_u32((uint64x2_t)v182, v187);
                    int64x2_t v183 = (int64x2_t)vaddw_u32((uint64x2_t)v183, *(uint32x2_t *)v187.i8);
                    v181 += 16;
                  }
                  while (v181 != 64);
                  uint64_t v159 = vaddvq_s64(vaddq_s64(vaddq_s64(v183, v184), vaddq_s64(v182, v185)));
                  ++v179;
                  v180 += v31;
                  v178 += v32;
                }
                while (v179 != 16);
              }
              uint64_t v189 = (v86 << 10) - v84 * v84;
              uint64_t v190 = v189 + 0x80000;
              uint64_t v191 = v189 + 1572863;
              if (v190 < 0) {
                uint64_t v190 = v191;
              }
              unint64_t v192 = (v87 << 10) - v85 * v85;
              uint64_t v193 = v192 + 0x80000;
              uint64_t v194 = v192 + 1572863;
              if (v193 >= 0) {
                uint64_t v194 = v193;
              }
              BOOL v196 = v282 >= v280 || v159 < v280;
              if (v149 >= 0.9 && v196
                || (v282 >= v280 || v159 < v251)
                && ((uint64_t v198 = v194 >> 20, v190 >> 20 < v249) ? (v199 = v198 < v249) : (v199 = 0), v199 && v149 >= 0.4))
              {
                if (v149 < 0.9)
                {
                  unint64_t v87 = (unint64_t)(v85 * v85 + 512) >> 10;
                  uint64_t v197 = v85 * v84 + 1535;
                  if (v85 * v84 >= -512) {
                    uint64_t v197 = v85 * v84 + 512;
                  }
                  uint64_t v88 = v197 >> 10;
                }
                uint64_t v266 = v24;
                int v265 = v23;
                uint64_t v283 = v160;
                uint64_t v264 = v82;
                if (v81 == 8)
                {
                  sub_1BBACE6C4(v160, v279, v281, v14, v284, v29, v299, &v298, &v297, &v296, &v295, 0);
                  sub_1BBACE6C4(v283, v279, v281, v14, v284, v29, &v294, &v293, &v292, &v291, &v290, 1u);
                }
                else
                {
                  sub_1BBACE788(v160, v279, v281, v14, v284, v29, v299, &v298, &v297, &v296, &v295, 0);
                  sub_1BBACE788(v283, v279, v281, v14, v284, v29, &v294, &v293, &v292, &v291, &v290, 1u);
                }
                uint64_t v36 = v263;
                uint64_t v82 = v264;
                int v81 = v288;
                uint64_t v80 = v283;
                v79.i64[0] = 255;
                v79.i64[1] = 255;
                int v23 = v265;
                int v28 = v259;
                int v27 = v260;
                int v73 = v257;
                uint64_t v38 = v261;
                uint64_t v37 = v262;
                uint64_t v35 = v258;
                uint64_t v83 = v285;
                ++v278;
                v276 += v84;
                v277 += v85;
                v272 += v87;
                v267 += v88;
                v274 += v299[0];
                v273 += v296;
                uint64_t v24 = v295 + v266;
                v275 += v293;
                v268 += v298;
                v269 += v291;
                v270 += v290;
                v271 += v294;
              }
              else
              {
                uint64_t v80 = v160;
                uint64_t v83 = v285;
              }
            }
          }
          ++v23;
          v80 += 64;
          v82 += 128;
          v83 += 128;
        }
        while ((int)v289 > (int)v80);
      }
      v254 += v253;
      v255 += v252;
      v256 += 64;
    }
    while (*(_DWORD *)(v250 + 280) - 32 >= (int)v256);
  }
  else
  {
    int v23 = 0;
    int v278 = 0;
    uint64_t v276 = 0;
    uint64_t v277 = 0;
    uint64_t v272 = 0;
    uint64_t v273 = 0;
    uint64_t v267 = 0;
    uint64_t v268 = 0;
    uint64_t v274 = 0;
    uint64_t v275 = 0;
    uint64_t v24 = 0;
    uint64_t v270 = 0;
    uint64_t v271 = 0;
    uint64_t v269 = 0;
  }
  uint64_t v200 = v247[171];
  if (v23 >= 4 * v278)
  {
    LOWORD(v215) = 0;
    LOWORD(v216) = 0;
    __int16 v217 = 0;
    int v202 = *(unsigned __int8 *)(v200 + 2000);
    goto LABEL_134;
  }
  uint64_t v201 = v278 << 10;
  int v202 = *(unsigned __int8 *)(v200 + 2000);
  uint64_t v203 = (v201 << (v202 - 8)) * v241;
  uint64_t v204 = v203 + v277;
  uint64_t v205 = v277 - v203;
  if (v276 <= v204 && v276 >= v205)
  {
    LOWORD(v215) = 0;
    LOWORD(v216) = 0;
    __int16 v217 = 0;
LABEL_134:
    LOWORD(v209) = 64;
    LOWORD(v218) = 64;
    int v219 = 64;
    uint64_t v221 = v245;
    uint64_t v220 = v246;
    char v223 = v243;
    char v222 = v244;
    unsigned int v224 = v242;
    goto LABEL_170;
  }
  uint64_t v207 = ((int)v201 * (uint64_t)(int)v201) << (2 * v202 - 16);
  uint64_t v208 = v272 * v201 - v277 * v277;
  LODWORD(v209) = 64;
  if (v208 <= 16 * v207)
  {
    uint64_t v211 = v274;
    uint64_t v213 = v270;
    uint64_t v212 = v271;
    uint64_t v214 = v269;
  }
  else
  {
    uint64_t v210 = v267 * v201 - v277 * v276;
    uint64_t v211 = v274;
    uint64_t v213 = v270;
    uint64_t v212 = v271;
    uint64_t v214 = v269;
    if (v210 > 16 * v207) {
      uint64_t v209 = ((v210 << 6) + (v208 >> 1)) / v208;
    }
  }
  if ((int)v209 >= 127) {
    LODWORD(v209) = 127;
  }
  if ((int)v209 <= -128) {
    LODWORD(v209) = -128;
  }
  unint64_t v215 = (unint64_t)(((v201 >> 1) + (v276 << 6) - v277 * (int)v209) / v201 + 32) >> 6;
  if ((int)v215 >= 127) {
    LODWORD(v215) = 127;
  }
  if ((int)v215 <= -128) {
    LOWORD(v215) = -128;
  }
  uint64_t v225 = v201 >> 2;
  uint64_t v226 = v273 * (v201 >> 2) - v268 * v268;
  uint64_t v227 = 16 * (((int)v225 * (uint64_t)(int)v225) << (2 * v202 - 16));
  LODWORD(v218) = 64;
  if (v226 <= v227)
  {
    uint64_t v228 = v268;
    uint64_t v221 = v245;
    uint64_t v220 = v246;
    char v223 = v243;
    char v222 = v244;
    unsigned int v224 = v242;
  }
  else
  {
    uint64_t v228 = v268;
    uint64_t v229 = v24 * v225 - v268 * v211;
    uint64_t v221 = v245;
    uint64_t v220 = v246;
    char v223 = v243;
    char v222 = v244;
    unsigned int v224 = v242;
    if (v229 > v227) {
      uint64_t v218 = ((v229 << 6) + (v226 >> 1)) / v226;
    }
  }
  if ((int)v218 >= 127) {
    LODWORD(v218) = 127;
  }
  if ((int)v218 <= -128) {
    LODWORD(v218) = -128;
  }
  uint64_t v230 = v201 >> 3;
  unint64_t v216 = (unint64_t)(((v211 << 6) + (v201 >> 3) - v228 * (int)v218) / v225 + 32) >> 6;
  if ((int)v216 >= 127) {
    LODWORD(v216) = 127;
  }
  if ((int)v216 <= -128) {
    LOWORD(v216) = -128;
  }
  uint64_t v231 = v214 * v225 - v275 * v275;
  LODWORD(v232) = 64;
  if (v231 > v227)
  {
    uint64_t v233 = v213 * v225 - v275 * v212;
    if (v233 > v227) {
      uint64_t v232 = ((v233 << 6) + (v231 >> 1)) / v231;
    }
  }
  if ((int)v232 >= 127) {
    LODWORD(v232) = 127;
  }
  if ((int)v232 <= -128) {
    int v234 = -128;
  }
  else {
    int v234 = v232;
  }
  unint64_t v235 = (unint64_t)((v230 + (v212 << 6) - v275 * v234) / v225 + 32) >> 6;
  if ((int)v235 >= 127) {
    LODWORD(v235) = 127;
  }
  if ((int)v235 <= -128) {
    __int16 v217 = -128;
  }
  else {
    __int16 v217 = v235;
  }
  int v219 = (unsigned __int16)v234;
LABEL_170:
  *((_WORD *)v247 + 270) = 6;
  *((unsigned char *)v247 + 630) = 6;
  int v236 = (_WORD *)v247 + 3 * (int)v221;
  uint64_t v237 = v236 + 464;
  if (!v224) {
    uint64_t v237 = v236 + 368;
  }
  uint64_t v238 = v236 + 416;
  double v239 = v236 + 320;
  if (v224) {
    double v239 = v238;
  }
  _WORD *v237 = v209;
  uint64_t result = (-1 << v223);
  *double v239 = v215 & result;
  v237[1] = v218;
  v239[1] = v216 & (-1 << v222);
  v237[2] = v219;
  v239[2] = v217 & (-1 << v222);
  *((_DWORD *)v247 + 158) = 20 - v202;
  *((_DWORD *)v247 + 159) = 20 - *(unsigned __int8 *)(v200 + 2002);
  if (*v239 || *v237 != 64) {
    *((unsigned char *)&v247[4 * v220 + 9887] + 2 * v221) = 1;
  }
  if (v239[1] || v237[1] != 64 || ((unsigned __int16)v217 & (unsigned __int16)(-1 << v222)) != 0 || v219 != 64) {
    *((unsigned char *)&v247[4 * v220 + 9887] + 2 * v221 + 1) = 1;
  }
  return result;
}

uint64_t sub_1BBACE6C4(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, unsigned int a12)
{
  int v12 = 0;
  uint64_t v13 = a12 + (uint64_t)(int)result;
  uint64_t v14 = a5 + v13 + a2 * a6;
  *a7 = 0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  uint64_t v15 = a3 + v13 + a2 * a4;
  do
  {
    unint64_t v16 = 0;
    do
    {
      *a7 += *(unsigned __int8 *)(v15 + v16);
      *a8 += *(unsigned __int8 *)(v14 + v16);
      *a9 += *(unsigned __int8 *)(v15 + v16) * *(unsigned __int8 *)(v15 + v16);
      *a10 += *(unsigned __int8 *)(v14 + v16) * *(unsigned __int8 *)(v14 + v16);
      *a11 += *(unsigned __int8 *)(v14 + v16) * (unint64_t)*(unsigned __int8 *)(v15 + v16);
      BOOL v17 = v16 >= 0x1E;
      v16 += 2;
    }
    while (!v17);
    v15 += a4;
    v14 += a6;
    ++v12;
  }
  while (v12 != 16);
  return result;
}

uint64_t sub_1BBACE788(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, uint64_t *a11, unsigned int a12)
{
  int v12 = 0;
  uint64_t v13 = a12 + (uint64_t)a1;
  uint64_t v14 = a5 + 2 * (v13 + a2 * a6);
  *a7 = 0;
  *a8 = 0;
  uint64_t v15 = a3 + 2 * (v13 + a2 * a4);
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  do
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(unsigned __int16 *)(v15 + 2 * v16);
      uint64_t v18 = *(unsigned __int16 *)(v14 + 2 * v16);
      *a7 += v17;
      *a8 += v18;
      *a9 += (v17 * v17);
      *a10 += (v18 * v18);
      uint64_t result = *a11;
      *a11 += v18 * (unint64_t)v17;
      BOOL v20 = v16 >= 0x1E;
      v16 += 2;
    }
    while (!v20);
    ++v12;
    v14 += 2 * a6;
    v15 += 2 * a4;
  }
  while (v12 != 16);
  return result;
}

BOOL sub_1BBACE844(uint64_t a1, __int16 *a2, __int16 *a3)
{
  uint64_t v3 = *((char *)a2 + 8);
  if (v3 == -1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 16 * v3 + 3544);
  }
  uint64_t v5 = *((char *)a2 + 9);
  if (v5 == -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16 * v5 + 3800);
  }
  uint64_t v7 = *((char *)a3 + 8);
  if (v7 == -1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16 * v7 + 3544);
  }
  uint64_t v9 = *((char *)a3 + 9);
  if (v9 == -1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 16 * v9 + 3800);
  }
  if (v4 == v8 && v6 == v10)
  {
    if (v4 != v6)
    {
      int v11 = *a3 - *a2;
      if (v11 < 0) {
        int v11 = *a2 - *a3;
      }
      if (v11 <= 3)
      {
        int v12 = a3[1] - a2[1];
        if (v12 < 0) {
          int v12 = a2[1] - a3[1];
        }
        if (v12 <= 3)
        {
          int v13 = a3[2] - a2[2];
          if (v13 < 0) {
            int v13 = a2[2] - a3[2];
          }
          if (v13 <= 3)
          {
            uint64_t v14 = a3 + 3;
LABEL_62:
            int v28 = *v14 - a2[3];
            if (v28 < 0) {
              int v28 = -v28;
            }
            return v28 > 3;
          }
        }
      }
      return 1;
    }
    goto LABEL_39;
  }
  BOOL result = 1;
  if (v4 != v10 || v6 != v8) {
    return result;
  }
  if (v4 == v6)
  {
LABEL_39:
    int v19 = *a3;
    int v20 = *a2;
    unsigned int v21 = v19 - v20;
    if (v19 - v20 < 0) {
      unsigned int v21 = v20 - v19;
    }
    if (v21 <= 3)
    {
      int v22 = a3[1] - a2[1];
      if (v22 < 0) {
        int v22 = a2[1] - a3[1];
      }
      if (v22 <= 3)
      {
        int v23 = a3[2] - a2[2];
        if (v23 < 0) {
          int v23 = a2[2] - a3[2];
        }
        if (v23 <= 3)
        {
          int v24 = a3[3] - a2[3];
          if (v24 < 0) {
            int v24 = a2[3] - a3[3];
          }
          if (v24 < 4) {
            return 0;
          }
        }
      }
    }
    int v25 = a3[2] - v20;
    if (v25 < 0) {
      int v25 = -v25;
    }
    if (v25 > 3) {
      return 1;
    }
    int v26 = a3[3] - a2[1];
    if (v26 < 0) {
      int v26 = a2[1] - a3[3];
    }
    if (v26 > 3) {
      return 1;
    }
    int v27 = v19 - a2[2];
    if (v27 < 0) {
      int v27 = -v27;
    }
    if (v27 > 3) {
      return 1;
    }
LABEL_61:
    uint64_t v14 = a3 + 1;
    goto LABEL_62;
  }
  int v16 = a3[2] - *a2;
  if (v16 < 0) {
    int v16 = *a2 - a3[2];
  }
  if (v16 <= 3)
  {
    int v17 = a3[3] - a2[1];
    if (v17 < 0) {
      int v17 = a2[1] - a3[3];
    }
    if (v17 <= 3)
    {
      int v18 = *a3 - a2[2];
      if (v18 < 0) {
        int v18 = a2[2] - *a3;
      }
      if (v18 <= 3) {
        goto LABEL_61;
      }
    }
  }
  return result;
}

uint64_t sub_1BBACEA54(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 79216;
  unsigned int v5 = *(_DWORD *)(a1 + 4);
  unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 1368) + 2016);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(*(int *)(*(void *)(*(void *)(a1 + 79216) + 584) + 3404), 0);
  if (!*(void *)(v4 + 72))
  {
    dispatch_group_t v8 = dispatch_group_create();
    *(void *)(v4 + 72) = v8;
    if (!v8)
    {
LABEL_10:
      uint64_t v11 = 4294954392;
      goto LABEL_39;
    }
  }
  uint64_t v9 = (void **)(v4 + 56);
  uint64_t v10 = a2;
  if (*(void *)(v4 + 64) >= (unint64_t)a2) {
    goto LABEL_15;
  }
  if (a2 > 0x215555) {
    goto LABEL_50;
  }
  if (*v9)
  {
    free(*v9);
    *uint64_t v9 = 0;
    *(void *)(v4 + 64) = 0;
  }
  if (malloc_type_posix_memalign((void **)(v4 + 56), 0x10uLL, 48 * a2, 0x10200405C8DC180uLL) || !*v9)
  {
LABEL_50:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v46 = 0;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "SubstreamContext creation failed\n", v46, 2u);
    }
    goto LABEL_10;
  }
  uint64_t v12 = 16;
  uint64_t v13 = a2;
  do
  {
    uint64_t v14 = (char *)*v9 + v12;
    *uint64_t v14 = 0;
    v14[1] = 0;
    v12 += 48;
    --v13;
  }
  while (v13);
  *(void *)(v4 + 64) = a2;
LABEL_15:
  uint64_t v11 = sub_1BBACEE3C(v4 + 8, a2);
  if (!v11)
  {
    queue = global_queue;
    int v43 = a2;
    int v15 = a2 - 1;
    if (a2 < 1)
    {
LABEL_21:
      if (*(_DWORD *)(*(void *)(a1 + 1368) + 2016))
      {
        unint64_t v29 = 0;
        do
        {
          dispatch_semaphore_signal(*((dispatch_semaphore_t *)*v9 + 3));
          ++v29;
        }
        while (v29 < *(unsigned int *)(*(void *)(a1 + 1368) + 2016));
      }
      a2 = v43;
      if (!v43)
      {
        dispatch_group_wait(*(dispatch_group_t *)(v4 + 72), 0xFFFFFFFFFFFFFFFFLL);
        return 0;
      }
      uint64_t v30 = 0;
      do
      {
        dispatch_group_async_f(*(dispatch_group_t *)(v4 + 72), queue, (void *)(*(void *)(v4 + 56) + v30), (dispatch_function_t)sub_1BBACFE38);
        v30 += 48;
        --v10;
      }
      while (v10);
      dispatch_group_wait(*(dispatch_group_t *)(v4 + 72), 0xFFFFFFFFFFFFFFFFLL);
      if (v43 < 1)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v31 = *(void *)(v4 + 96);
        uint64_t v32 = v43;
        uint64_t v33 = (unsigned int *)(*(void *)(v4 + 56) + 44);
        do
        {
          unsigned int v34 = *v33;
          v33 += 12;
          v31 += v34;
          --v32;
        }
        while (v32);
        uint64_t v11 = 0;
        *(void *)(v4 + 96) = v31;
      }
    }
    else
    {
      unsigned int v16 = v5;
      uint64_t v17 = 0;
      unsigned int v18 = v6;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v21 = 0;
      int v22 = *(void **)(v4 + 56);
      int v42 = v16 / v18;
      while (1)
      {
        int v23 = &v22[v20];
        unsigned int v24 = *(_DWORD *)(*(void *)(a1 + 1368) + 2016) * (v42 + v21);
        uint64_t v25 = *(void *)(v4 + 24) + v17;
        *int v23 = a1;
        v23[1] = v25;
        uint64_t v26 = *(void *)(v4 + 8) + v19;
        v23[2] = v26;
        v23[5] = v24;
        uint64_t v27 = sub_1BBA88900(v26, a1);
        if (v27) {
          break;
        }
        dispatch_semaphore_t v28 = dispatch_semaphore_create(0);
        int v22 = *v9;
        *(void *)((char *)*v9 + v20 * 8 + 24) = v28;
        if (!v28)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t v44 = 0;
            _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Can't create semaphore\n", v44, 2u);
          }
          uint64_t v11 = 4294954392;
          goto LABEL_37;
        }
        ++v21;
        v20 += 6;
        v22[6 * (v15 % v43) + 4] = v28;
        v19 += 0x2000;
        v17 += 416;
        ++v15;
        if (6 * v43 == v20) {
          goto LABEL_21;
        }
      }
      uint64_t v11 = v27;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "LCUEnc init failed\n", buf, 2u);
      }
LABEL_37:
      a2 = v43;
    }
  }
LABEL_39:
  uint64_t v35 = *(void *)(v4 + 56);
  if (v35) {
    BOOL v36 = a2 == 0;
  }
  else {
    BOOL v36 = 1;
  }
  if (!v36)
  {
    uint64_t v37 = a2;
    uint64_t v38 = 24;
    do
    {
      uint64_t v39 = *(NSObject **)(v35 + v38);
      if (v39)
      {
        dispatch_release(v39);
        uint64_t v35 = *(void *)(v4 + 56);
        *(void *)(v35 + v38) = 0;
      }
      v38 += 48;
      --v37;
    }
    while (v37);
  }
  return v11;
}

uint64_t sub_1BBACEE3C(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) >= a2) {
    return 0;
  }
  if (a2 > 0x3200) {
    return 4294954392;
  }
  sub_1BBACBCB4((char **)a1);
  if (malloc_type_posix_memalign((void **)a1, 0x20uLL, a2 << 13, 0x10F0040FE6B764CuLL) || !*(void *)a1) {
    return 4294954392;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 4200;
  do
  {
    uint64_t v7 = *(void *)a1 + v6;
    dispatch_group_t v8 = (_OWORD *)(v7 - 2664);
    v8[1] = 0u;
    v8[2] = 0u;
    *dispatch_group_t v8 = 0u;
    bzero((void *)(v7 - 2280), 0x800uLL);
    *(void *)uint64_t v7 = sub_1BBAE36AC;
    *(void *)(v7 + 8) = sub_1BBAE35D8;
    *(void *)(v7 + 16) = sub_1BBAE34A4;
    *(void *)(v7 + 24) = sub_1BBAE33FC;
    *(void *)(v7 + 32) = sub_1BBAE3394;
    *(void *)(v7 + 40) = sub_1BBAE3314;
    *(void *)(v7 + 48) = sub_1BBAE32A4;
    *(void *)(v7 + 56) = sub_1BBAE31E0;
    *(void *)(v7 + 448) = 0;
    *(void *)(v7 + 456) = 0;
    uint64_t v9 = (void *)(v7 - 2328);
    *(_DWORD *)(v7 + 216) = 0;
    *(_DWORD *)(v7 + 228) = 0;
    *(_DWORD *)(v7 + 232) = 0;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *(_OWORD *)(v7 + 536) = 0u;
    *(_OWORD *)(v7 + 552) = 0u;
    *(_OWORD *)(v7 + 568) = 0u;
    *(_OWORD *)(v7 + 584) = 0u;
    *(_OWORD *)(v7 + 600) = 0u;
    *(_OWORD *)(v7 + 616) = 0u;
    *(_OWORD *)(v7 + 632) = 0u;
    *(_DWORD *)(v7 + 648) = 0;
    *(void *)(v7 + 720) = 0;
    *(_OWORD *)(v7 + 688) = 0u;
    *(_OWORD *)(v7 + 704) = 0u;
    *(_OWORD *)(v7 + 656) = 0u;
    *(_OWORD *)(v7 + 672) = 0u;
    *(unsigned char *)(v7 + 240) = 1;
    *(unsigned char *)(v7 + 250) = 0;
    *(_WORD *)(v7 + 248) = -1;
    *(unsigned char *)(v7 + 3920) = 0;
    ++v5;
    v6 += 0x2000;
  }
  while (a2 != v5);
  uint64_t result = 0;
  *(void *)(a1 + 8) = a2;
  return result;
}

uint64_t sub_1BBACEFEC(unsigned __int8 *a1)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 79216;
  uint64_t v3 = *((void *)a1 + 9902);
  uint64_t v4 = *(_DWORD **)(v3 + 608);
  int v5 = *(char *)(*(void *)(v3 + 584) + 3288);
  if (a1[600])
  {
    int v6 = 19;
  }
  else if ((int)v4[170] >= 0)
  {
    int v6 = 1;
  }
  else
  {
    int v6 = 7;
  }
  uint64_t v7 = sub_1BBA195B4((void **)a1 + 436, (2 * (v5 + v4[70] * v4[69]) - 2) / v5);
  if (v7)
  {
    uint64_t v8 = v7;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v83) = 0;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Bitstream initialization for SliceEnc failed\n", (uint8_t *)&v83, 2u);
    }
    return v8;
  }
  sub_1BBA19614((uint64_t)(a1 + 3488), 0, 1);
  sub_1BBA19614((uint64_t)(a1 + 3488), v6, 6);
  sub_1BBA19614((uint64_t)(a1 + 3488), 0, 6);
  sub_1BBA19614((uint64_t)(a1 + 3488), 1, 3);
  sub_1BBA19614((uint64_t)(a1 + 3488), *a1, 1);
  if (a1[601]) {
    sub_1BBA19614((uint64_t)(a1 + 3488), a1[1], 1);
  }
  unsigned int v9 = a1[2] + 1;
  unsigned int v10 = __clz(v9);
  sub_1BBA19614((uint64_t)(a1 + 3488), (v9 - (0x80000000 >> v10)) | (0x80000000 >> v10), (2 * v10) ^ 0x3F);
  if (!*a1)
  {
    if (*(unsigned char *)(*((void *)a1 + 173) + 2)) {
      sub_1BBA19614((uint64_t)(a1 + 3488), a1[8], 1);
    }
    unsigned int v11 = *((_DWORD *)a1 + 1) + 1;
    unsigned int v12 = __clz(v11);
    sub_1BBA19614((uint64_t)(a1 + 3488), (v11 - (0x80000000 >> v12)) | (0x80000000 >> v12), 63 - 2 * v12);
  }
  if (!a1[8])
  {
    unsigned int v13 = a1[10] + 1;
    unsigned int v14 = __clz(v13);
    sub_1BBA19614((uint64_t)(a1 + 3488), (v13 - (0x80000000 >> v14)) | (0x80000000 >> v14), (2 * v14) ^ 0x3F);
    if (*(unsigned char *)(*((void *)a1 + 173) + 3)) {
      sub_1BBA19614((uint64_t)(a1 + 3488), a1[11], 1);
    }
    uint64_t v15 = *((void *)a1 + 171);
    if (!a1[600])
    {
      sub_1BBA19614((uint64_t)(a1 + 3488), *((_DWORD *)a1 + 4), *(unsigned __int8 *)(v15 + 196) + 4);
      sub_1BBA19614((uint64_t)(a1 + 3488), a1[20], 1);
      if (a1[20])
      {
        unsigned int v16 = *(_DWORD *)(*((void *)a1 + 171) + 260);
        if (v16 >= 2)
        {
          unsigned int v17 = __clz(v16) ^ 0x1F;
          if ((v16 & (v16 - 1)) != 0) {
            int v18 = v17 + 1;
          }
          else {
            int v18 = v17;
          }
          sub_1BBA19614((uint64_t)(a1 + 3488), *((_DWORD *)a1 + 68), v18);
        }
      }
      else
      {
        uint64_t v8 = sub_1BBAE53A4(*(void *)(*(void *)v2 + 1112), (uint64_t)(a1 + 3488), *((void *)a1 + 171), *(_DWORD *)(*((void *)a1 + 171) + 260));
        if (v8) {
          return v8;
        }
      }
      uint64_t v15 = *((void *)a1 + 171);
      if (*(unsigned char *)(v15 + 280))
      {
        if (*(_DWORD *)(v15 + 284))
        {
          unsigned int v19 = *((_DWORD *)a1 + 69) + 1;
          unsigned int v20 = __clz(v19);
          sub_1BBA19614((uint64_t)(a1 + 3488), (v19 - (0x80000000 >> v20)) | (0x80000000 >> v20), 63 - 2 * v20);
        }
        unsigned int v21 = *((_DWORD *)a1 + 70) + 1;
        unsigned int v22 = __clz(v21);
        sub_1BBA19614((uint64_t)(a1 + 3488), (v21 - (0x80000000 >> v22)) | (0x80000000 >> v22), 63 - 2 * v22);
        LODWORD(v23) = *((_DWORD *)a1 + 69);
        if (v23)
        {
          unint64_t v24 = 0;
          uint64_t v25 = a1 + 284;
          do
          {
            unsigned int v26 = v25[v24] + 1;
            unsigned int v27 = __clz(v26);
            sub_1BBA19614((uint64_t)(a1 + 3488), (v26 - (0x80000000 >> v27)) | (0x80000000 >> v27), (2 * v27) ^ 0x3F);
            int v28 = (1 << v24) & *((unsigned __int16 *)a1 + 247);
            sub_1BBA19614((uint64_t)(a1 + 3488), v28 != 0, 1);
            if (v28)
            {
              unsigned int v29 = *(_DWORD *)&v25[4 * v24 + 80] + 1;
              unsigned int v30 = __clz(v29);
              sub_1BBA19614((uint64_t)(a1 + 3488), (v29 - (0x80000000 >> v30)) | (0x80000000 >> v30), 63 - 2 * v30);
            }
            ++v24;
            unint64_t v23 = *((unsigned int *)a1 + 69);
          }
          while (v24 < v23);
        }
        if (v23 < *((_DWORD *)a1 + 70) + (int)v23)
        {
          uint64_t v31 = (int)v23;
          uint64_t v32 = a1 + 300;
          do
          {
            unsigned int v33 = *(unsigned __int16 *)&v32[2 * v31] + 1;
            unsigned int v34 = __clz(v33);
            sub_1BBA19614((uint64_t)(a1 + 3488), (v33 - (0x80000000 >> v34)) | (0x80000000 >> v34), (2 * v34) ^ 0x3F);
            int v35 = (1 << v31) & *((unsigned __int16 *)a1 + 247);
            sub_1BBA19614((uint64_t)(a1 + 3488), (*((unsigned __int16 *)a1 + 246) >> v31) & 1, 1);
            sub_1BBA19614((uint64_t)(a1 + 3488), v35 != 0, 1);
            if (v35)
            {
              unsigned int v36 = *(_DWORD *)&v32[4 * v31 + 64] + 1;
              unsigned int v37 = __clz(v36);
              sub_1BBA19614((uint64_t)(a1 + 3488), (v36 - (0x80000000 >> v37)) | (0x80000000 >> v37), 63 - 2 * v37);
            }
            ++v31;
          }
          while (*((_DWORD *)a1 + 70) + *((_DWORD *)a1 + 69) > v31);
        }
        uint64_t v15 = *((void *)a1 + 171);
      }
      if (*(unsigned char *)(v15 + 322))
      {
        sub_1BBA19614((uint64_t)(a1 + 3488), a1[498], 1);
        uint64_t v15 = *((void *)a1 + 171);
      }
    }
    if (*(unsigned char *)(v15 + 249))
    {
      sub_1BBA19614((uint64_t)(a1 + 3488), a1[496], 1);
      sub_1BBA19614((uint64_t)(a1 + 3488), a1[497], 1);
    }
    if (a1[10] > 1u) {
      goto LABEL_86;
    }
    sub_1BBA19614((uint64_t)(a1 + 3488), a1[499], 1);
    if (a1[499])
    {
      unsigned int v38 = (char)a1[500];
      unsigned int v39 = __clz(v38);
      sub_1BBA19614((uint64_t)(a1 + 3488), (v38 - (0x80000000 >> v39)) | (0x80000000 >> v39), 63 - 2 * v39);
      if (!a1[10])
      {
        unsigned int v40 = (char)a1[501];
        unsigned int v41 = __clz(v40);
        sub_1BBA19614((uint64_t)(a1 + 3488), (v40 - (0x80000000 >> v41)) | (0x80000000 >> v41), 63 - 2 * v41);
      }
    }
    if (*(unsigned char *)(*((void *)a1 + 173) + 1595))
    {
      signed int v42 = **(_DWORD **)(*(void *)v2 + 1096);
      if (v42 >= 2)
      {
        sub_1BBA19614((uint64_t)(a1 + 3488), a1[502], 1);
        if (a1[502])
        {
          unsigned int v43 = __clz(v42) ^ 0x1F;
          int v44 = (v42 & (v42 - 1)) != 0 ? v43 + 1 : v43;
          if ((char)a1[500] >= 1)
          {
            uint64_t v45 = 0;
            while (1)
            {
              signed int v46 = a1[v45 + 503];
              if (v42 <= v46) {
                break;
              }
              sub_1BBA19614((uint64_t)(a1 + 3488), a1[v45++ + 503], v44);
              if (v45 >= (char)a1[500]) {
                goto LABEL_58;
              }
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              return 4294954394;
            }
            int v83 = 67109632;
            int v84 = v45;
            __int16 v85 = 1024;
            signed int v86 = v46;
            __int16 v87 = 1024;
            signed int v88 = v42;
            int v81 = MEMORY[0x1E4F14500];
            uint64_t v82 = "list_entry_l0_[%d] (%d) out of range [0, %d]\n";
            goto LABEL_127;
          }
        }
LABEL_58:
        if (a1[10])
        {
LABEL_69:
          if (*(unsigned char *)(*((void *)a1 + 173) + 6)) {
            sub_1BBA19614((uint64_t)(a1 + 3488), a1[537], 1);
          }
          if (!a1[498]) {
            goto LABEL_77;
          }
          if (!a1[10]) {
            sub_1BBA19614((uint64_t)(a1 + 3488), a1[538], 1);
          }
          if (a1[538])
          {
            if ((char)a1[500] <= 1)
            {
LABEL_77:
              uint64_t v53 = *((void *)a1 + 173);
              if (*(unsigned char *)(v53 + 17) && a1[10] == 1 || *(unsigned char *)(v53 + 18) && !a1[10])
              {
                unsigned int v54 = a1[540] + 1;
                unsigned int v55 = __clz(v54);
                sub_1BBA19614((uint64_t)(a1 + 3488), (v54 - (0x80000000 >> v55)) | (0x80000000 >> v55), (2 * v55) ^ 0x3F);
                if (*(unsigned char *)(*((void *)a1 + 171) + 173)) {
                  sub_1BBA199EC((uint64_t)(a1 + 3488), (char)a1[541]);
                }
                sub_1BBACFAC4((uint64_t)a1, 0);
                if (!a1[10]) {
                  sub_1BBACFAC4((uint64_t)a1, 1);
                }
              }
              unsigned int v56 = a1[542] + 1;
              unsigned int v57 = __clz(v56);
              sub_1BBA19614((uint64_t)(a1 + 3488), (v56 - (0x80000000 >> v57)) | (0x80000000 >> v57), (2 * v57) ^ 0x3F);
LABEL_86:
              int v58 = (char)a1[543];
              if (v58 <= 0) {
                int v59 = -2 * v58;
              }
              else {
                int v59 = 2 * v58 - 1;
              }
              unsigned int v60 = v59 + 1;
              unsigned int v61 = __clz(v60);
              sub_1BBA19614((uint64_t)(a1 + 3488), (v60 - (0x80000000 >> v61)) | (0x80000000 >> v61), 63 - 2 * v61);
              int v62 = (unsigned char *)*((void *)a1 + 173);
              if (v62[16])
              {
                int v63 = (char)a1[544];
                if (v63 <= 0) {
                  int v64 = -2 * v63;
                }
                else {
                  int v64 = 2 * v63 - 1;
                }
                unsigned int v65 = v64 + 1;
                unsigned int v66 = __clz(v65);
                sub_1BBA19614((uint64_t)(a1 + 3488), (v65 - (0x80000000 >> v66)) | (0x80000000 >> v66), 63 - 2 * v66);
                int v67 = (char)a1[545];
                if (v67 <= 0) {
                  int v68 = -2 * v67;
                }
                else {
                  int v68 = 2 * v67 - 1;
                }
                unsigned int v69 = v68 + 1;
                unsigned int v70 = __clz(v69);
                sub_1BBA19614((uint64_t)(a1 + 3488), (v69 - (0x80000000 >> v70)) | (0x80000000 >> v70), 63 - 2 * v70);
                int v62 = (unsigned char *)*((void *)a1 + 173);
              }
              if (v62[29])
              {
                if (v62[30]) {
                  sub_1BBA19614((uint64_t)(a1 + 3488), a1[546], 1);
                }
                if (a1[546])
                {
                  sub_1BBA19614((uint64_t)(a1 + 3488), a1[547], 1);
                  if (!a1[547])
                  {
                    sub_1BBA199EC((uint64_t)(a1 + 3488), (char)a1[548]);
                    sub_1BBA199EC((uint64_t)(a1 + 3488), (char)a1[549]);
                  }
                }
              }
              if (*(unsigned char *)(*((void *)a1 + 173) + 28) && (a1[496] || a1[497] || !a1[547])) {
                sub_1BBA19614((uint64_t)(a1 + 3488), a1[550], 1);
              }
              goto LABEL_107;
            }
          }
          else if ((char)a1[501] < 2)
          {
            goto LABEL_77;
          }
          unsigned int v51 = a1[539] + 1;
          unsigned int v52 = __clz(v51);
          sub_1BBA19614((uint64_t)(a1 + 3488), (v51 - (0x80000000 >> v52)) | (0x80000000 >> v52), (2 * v52) ^ 0x3F);
          goto LABEL_77;
        }
        sub_1BBA19614((uint64_t)(a1 + 3488), a1[519], 1);
        if (a1[519])
        {
          unsigned int v47 = __clz(v42) ^ 0x1F;
          int v48 = (v42 & (v42 - 1)) != 0 ? v47 + 1 : v47;
          if ((char)a1[501] >= 1)
          {
            uint64_t v49 = 0;
            while (1)
            {
              signed int v50 = a1[v49 + 520];
              if (v42 <= v50) {
                break;
              }
              sub_1BBA19614((uint64_t)(a1 + 3488), a1[v49++ + 520], v48);
              if (v49 >= (char)a1[501]) {
                goto LABEL_67;
              }
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              return 4294954394;
            }
            int v83 = 67109632;
            int v84 = v49;
            __int16 v85 = 1024;
            signed int v86 = v50;
            __int16 v87 = 1024;
            signed int v88 = v42;
            int v81 = MEMORY[0x1E4F14500];
            uint64_t v82 = "list_entry_l1_[%d] (%d) out of range [0, %d]\n";
LABEL_127:
            _os_log_error_impl(&dword_1BB9B9000, v81, OS_LOG_TYPE_ERROR, v82, (uint8_t *)&v83, 0x14u);
            return 4294954394;
          }
        }
      }
    }
LABEL_67:
    if (!a1[10]) {
      sub_1BBA19614((uint64_t)(a1 + 3488), a1[536], 1);
    }
    goto LABEL_69;
  }
LABEL_107:
  uint64_t v71 = *((void *)a1 + 173);
  if (*(unsigned char *)(v71 + 20) || *(unsigned char *)(v71 + 21))
  {
    unsigned int v72 = *((_DWORD *)a1 + 138) + 1;
    unsigned int v73 = __clz(v72);
    sub_1BBA19614((uint64_t)(a1 + 3488), (v72 - (0x80000000 >> v73)) | (0x80000000 >> v73), 63 - 2 * v73);
    if (*((_DWORD *)a1 + 138))
    {
      unsigned int v74 = a1[556] + 1;
      unsigned int v75 = __clz(v74);
      sub_1BBA19614((uint64_t)(a1 + 3488), (v74 - (0x80000000 >> v75)) | (0x80000000 >> v75), (2 * v75) ^ 0x3F);
      if (*((_DWORD *)a1 + 138))
      {
        unint64_t v76 = 0;
        do
          sub_1BBA19614((uint64_t)(a1 + 3488), *(_DWORD *)(*((void *)a1 + 70) + 4 * v76++), a1[556] + 1);
        while (v76 < *((unsigned int *)a1 + 138));
      }
    }
  }
  if (*(unsigned char *)(*((void *)a1 + 173) + 1598))
  {
    unsigned int v77 = *((unsigned __int16 *)a1 + 288) + 1;
    unsigned int v78 = __clz(v77);
    sub_1BBA19614((uint64_t)(a1 + 3488), (v77 - (0x80000000 >> v78)) | (0x80000000 >> v78), (2 * v78) ^ 0x3F);
    if (*((_WORD *)a1 + 288))
    {
      unint64_t v79 = 0;
      do
        sub_1BBA19614((uint64_t)(a1 + 3488), *(unsigned __int8 *)(*((void *)a1 + 73) + v79++), 8);
      while (v79 < *((unsigned __int16 *)a1 + 288));
    }
  }
  sub_1BBA19A20((uint64_t)(a1 + 3488));
  return 0;
}

uint64_t sub_1BBACFAC4(uint64_t result, int a2)
{
  v51[23] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (__int16 *)(result + 928);
  if (!a2) {
    uint64_t v2 = (__int16 *)(result + 736);
  }
  signed int v46 = v2;
  uint64_t v47 = result;
  if (a2) {
    uint64_t v3 = (_WORD *)(result + 832);
  }
  else {
    uint64_t v3 = (_WORD *)(result + 640);
  }
  if (*(unsigned char *)(result + 500))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = v2;
    uint64_t v7 = *(void *)(result + 1368);
    char v44 = *(unsigned char *)(v7 + 194);
    char v8 = *(unsigned char *)(result + 540);
    int v9 = -1 << v8;
    int v10 = 1 << (*(unsigned char *)(result + 541) + v8);
    uint64_t v11 = result + 3488;
    char v45 = *(unsigned char *)(v7 + 195);
    uint64_t v49 = *(char *)(result + 500);
    unsigned int v12 = v50;
    unsigned int v13 = v3;
    do
    {
      int v14 = *v6;
      v6 += 3;
      *unsigned int v12 = v9 + v14;
      if (v9 + v14 || *v13) {
        uint64_t v15 = v5 | (unsigned __int16)(1 << v4);
      }
      else {
        uint64_t v15 = v5;
      }
      uint64_t v5 = v15;
      uint64_t result = sub_1BBA19614(v11, (v15 >> v4++) & 1, 1);
      v13 += 3;
      v12 += 3;
    }
    while (v49 != v4);
    if (*(unsigned char *)(*(void *)(v47 + 1368) + 173))
    {
      uint64_t v16 = 0;
      unsigned int v17 = 0;
      int v18 = v46 + 2;
      unsigned int v19 = v3 + 2;
      unsigned int v20 = v51;
      do
      {
        int v21 = *v18;
        int v22 = *(v18 - 1) - v10;
        *(v20 - 1) = v22;
        *unsigned int v20 = v21 - v10;
        if (v22) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v21 == v10;
        }
        if (!v23 || *(v19 - 1) || *v19) {
          v17 |= (unsigned __int16)(1 << v16);
        }
        v18 += 3;
        uint64_t result = sub_1BBA19614(v11, (v17 >> v16++) & 1, 1);
        v19 += 3;
        v20 += 3;
      }
      while (v49 != v16);
    }
    else
    {
      unsigned int v17 = 0;
    }
    uint64_t v24 = 0;
    do
    {
      if (v5)
      {
        int v25 = v50[3 * v24];
        if (v25 <= 0) {
          int v26 = -2 * v25;
        }
        else {
          int v26 = 2 * v25 - 1;
        }
        unsigned int v27 = v26 + 1;
        unsigned int v28 = __clz(v27);
        sub_1BBA19614(v11, (v27 - (0x80000000 >> v28)) | (0x80000000 >> v28), 63 - 2 * v28);
        int v29 = (__int16)v3[3 * v24] >> v44;
        if (v29 <= 0) {
          int v30 = -2 * v29;
        }
        else {
          int v30 = 2 * v29 - 1;
        }
        unsigned int v31 = v30 + 1;
        unsigned int v32 = __clz(v31);
        uint64_t result = sub_1BBA19614(v11, (v31 - (0x80000000 >> v32)) | (0x80000000 >> v32), 63 - 2 * v32);
      }
      unsigned int v48 = v17;
      if (v17)
      {
        char v33 = 1;
        uint64_t v34 = 1;
        do
        {
          char v35 = v33;
          int v36 = v50[3 * v24 + v34];
          if (v36 <= 0) {
            int v37 = -2 * v36;
          }
          else {
            int v37 = 2 * v36 - 1;
          }
          unsigned int v38 = v37 + 1;
          unsigned int v39 = __clz(v38);
          sub_1BBA19614(v11, (v38 - (0x80000000 >> v39)) | (0x80000000 >> v39), 63 - 2 * v39);
          int v40 = ((v46[3 * v24 + v34] << 7 >> *(unsigned char *)(v47 + 630)) + (__int16)v3[3 * v24 + v34] - 128) >> v45;
          if (v40 <= 0) {
            int v41 = -2 * v40;
          }
          else {
            int v41 = 2 * v40 - 1;
          }
          unsigned int v42 = v41 + 1;
          unsigned int v43 = __clz(v42);
          uint64_t result = sub_1BBA19614(v11, (v42 - (0x80000000 >> v43)) | (0x80000000 >> v43), 63 - 2 * v43);
          char v33 = 0;
          uint64_t v34 = 2;
        }
        while ((v35 & 1) != 0);
      }
      ++v24;
      LODWORD(v5) = v5 >> 1;
      unsigned int v17 = v48 >> 1;
    }
    while (v24 != v49);
  }
  return result;
}

intptr_t sub_1BBACFE38(intptr_t result)
{
  intptr_t v1 = result;
  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(unint64_t **)(result + 8);
  uint64_t v4 = *(void *)result + 79088;
  uint64_t v5 = *(void *)(*(void *)result + 1368);
  int v6 = *(_DWORD *)(v5 + 2016);
  int v7 = *(_DWORD *)(v5 + 2020);
  int v8 = *(_DWORD *)(*(void *)v4 + 144);
  int v9 = *(_DWORD *)(result + 40);
  int v10 = v9 / v6;
  uint64_t v11 = *(void *)(*(void *)result + 79256);
  unint64_t v12 = v11 + 56 * (v9 / v6);
  unint64_t v13 = *(void *)(v12 + 24);
  unint64_t v14 = *(void *)(v12 + 32);
  if (*(_DWORD *)(v12 + 44)) {
    BOOL v15 = v13 >= v14;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15) {
    *(void *)(v12 + 24) = ++v13;
  }
  *(void *)(v11 + 56 * (v9 / v6) + 40) = 0;
  *(_OWORD *)uint64_t v2 = xmmword_1BBB6F660;
  v2[25] = v12;
  v2[26] = v13;
  v2[2] = -1;
  v2[3] = v13;
  v2[4] = v14;
  if (v9 <= *(_DWORD *)(v4 + 220))
  {
    if (v8 < v7) {
      int v7 = v8;
    }
    int v16 = (v7 - 1) * v6;
    do
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v1 + 24), 0xFFFFFFFFFFFFFFFFLL);
      int v20 = *(_DWORD *)(*(void *)(v3 + 1024) + 4 * v10);
      sub_1BBA8F34C(*(void *)(v1 + 16), v9, (uint64_t)v2);
      sub_1BBA8FA78(*(void *)(v1 + 16), &v20);
      uint64_t result = (intptr_t)sub_1BBAA5780(*(void *)(v1 + 16), (int *)(*(void *)(v3 + 1024) + 4 * v10));
      *(_DWORD *)(v1 + 44) += *(_DWORD *)(*(void *)(v1 + 16) + 212);
      if (++v9 % v6)
      {
        if (v9 % v6 >= 2) {
          uint64_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 32));
        }
      }
      else
      {
        sub_1BBA1CBA4(v2, 1);
        uint64_t result = (intptr_t)sub_1BBA1C980(v2);
        unsigned int v17 = *(_DWORD *)(*(void *)(v3 + 1368) + 2016);
        if (v17 >= 2) {
          unsigned int v17 = 2;
        }
        if (v17)
        {
          for (unsigned int i = 0; i < v19; ++i)
          {
            uint64_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 32));
            unsigned int v19 = *(_DWORD *)(*(void *)(v3 + 1368) + 2016);
            if (v19 >= 2) {
              unsigned int v19 = 2;
            }
          }
        }
        v9 += v16;
        int v10 = v9 / v6;
        if (v9 / v6 < (*(_DWORD *)(v3 + 552) + 1))
        {
          uint64_t result = sub_1BBA1C8B4(*(void *)(v1 + 8), *(void *)(v4 + 168) + 56 * v10, *(unsigned __int8 *)(v3 + 10), *(char *)(v3 + 621));
          uint64_t v2 = *(unint64_t **)(v1 + 8);
        }
      }
    }
    while (v9 <= *(_DWORD *)(v4 + 220));
  }
  return result;
}

uint64_t sub_1BBAD0030(uint64_t result, int a2, int a3, int a4, int a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(result + 1368);
  int v9 = *(unsigned __int8 *)(v8 + 2013);
  int v10 = a3 - 1;
  int v11 = (v9 - 1) & a2;
  unsigned int v12 = word_1BBBA39F0[(((v9 - 1) & (a3 - 1 + a5)) - v9 + 64) >> 2];
  int v13 = a2 - 1;
  int v14 = a5 + a3;
  if (((v12 >> (v11 >> 2)) & 1) != 0 && ((v14 | v13) & 0x80000000) == 0)
  {
    uint64_t v15 = *(void *)(result + 1360);
    if (*(_DWORD *)(v15 + 276) < a2 || *(_DWORD *)(v15 + 280) <= v14) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *(void *)(v15 + 576) + 16 * (*(void *)(v15 + 552) * ((uint64_t)v14 >> 2) + (v13 >> 2));
    }
  }
  char v16 = *(unsigned char *)(v8 + 2008);
  *a6 = v7;
  if (((v14 - 1) | v13) < 0
    || (uint64_t v17 = *(void *)(result + 1360), *(_DWORD *)(v17 + 276) < a2)
    || *(_DWORD *)(v17 + 280) < v14)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = *(void *)(v17 + 576) + 16 * (*(void *)(v17 + 552) * ((uint64_t)(v14 - 1) >> 2) + (v13 >> 2));
  }
  uint64_t v19 = 0;
  a6[1] = v18;
  int v20 = *(unsigned __int8 *)(*(void *)(result + 1368) + 2013);
  int v21 = (v20 - 1) & a3;
  int v22 = (((v20 - 1) & (v13 + a4)) - v20 + 64) >> 2;
  int v23 = a4 + a2;
  if (((word_1BBB82EEA[v21 >> 2] >> v22) & 1) != 0 && ((v23 | v10) & 0x80000000) == 0)
  {
    uint64_t v24 = *(void *)(result + 1360);
    if (*(_DWORD *)(v24 + 276) <= v23 || *(_DWORD *)(v24 + 280) <= v10) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *(void *)(v24 + 576) + 16 * (*(void *)(v24 + 552) * ((uint64_t)v10 >> 2) + (v23 >> 2));
    }
  }
  int v25 = 1 << (v16 - 1);
  *a7 = v19;
  int v26 = v23 - v25;
  if ((v26 | v10) < 0
    || (uint64_t v27 = *(void *)(result + 1360), *(_DWORD *)(v27 + 276) <= v26)
    || *(_DWORD *)(v27 + 280) <= v10)
  {
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = *(void *)(v27 + 576) + 16 * (*(void *)(v27 + 552) * ((uint64_t)v10 >> 2) + (v26 >> 2));
  }
  a7[1] = v28;
  int v29 = a2 - v25;
  if ((v29 | v10) < 0
    || (uint64_t v30 = *(void *)(result + 1360), *(_DWORD *)(v30 + 276) <= v29)
    || *(_DWORD *)(v30 + 280) <= v10)
  {
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = *(void *)(v30 + 576) + 16 * (*(void *)(v30 + 552) * ((uint64_t)v10 >> 2) + (v29 >> 2));
  }
  a7[2] = v31;
  return result;
}

void sub_1BBAD025C(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  v17[0] = 0;
  v17[1] = 0;
  memset(v16, 0, sizeof(v16));
  sub_1BBAD0030(a1, a2, a3, a6, a7, v17, v16);
  sub_1BBA180C8(a1, a2, a3, a4, a5, a6, a7, a8, v17, (uint64_t)v16);
}

void sub_1BBAD033C(unsigned char *a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  v13[0] = 0;
  v13[1] = 0;
  memset(v12, 0, sizeof(v12));
  sub_1BBAD0030((uint64_t)a1, a2, a3, a4, a5, v13, v12);
  sub_1BBA18690(a1, a2, a3, a4, a5, a6, v13, v12);
}

uint64_t sub_1BBAD03F0(uint64_t a1, unsigned int *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = *((char *)a2 + 9);
  if (v18 == -1)
  {
    int v20 = *(_DWORD **)(a1 + 16 * *((char *)a2 + 8) + 3544);
    unint64_t v22 = *a2;
    return sub_1BBAD072C(a1, v20, 0, v22, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  uint64_t v19 = *((char *)a2 + 8);
  if (v19 == -1) {
    return sub_1BBAD072C(a1, *(_DWORD **)(a1 + 16 * v18 + 3800), 1u, a2[1], (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  int v20 = *(_DWORD **)(a1 + 3544 + 16 * v19);
  uint64_t v21 = *(void *)(a1 + 3544 + 16 * v18 + 256);
  unint64_t v22 = *a2;
  uint64_t v23 = a2[1];
  if (v20 == (_DWORD *)v21 && v22 == v23) {
    return sub_1BBAD072C(a1, v20, 0, v22, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  uint64_t v30 = 0;
  v31[0] = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v26 = v20;
  uint64_t v27 = v22;
  sub_1BBA16DF0(v20, v22, a3, a4, a5, a6, &v30, &v28);
  uint64_t result = sub_1BBA16DF0((_DWORD *)v21, v23, a3, a4, a5, a6, v31, &v29);
  if (a8)
  {
    if (*(unsigned char *)(a1 + 2 * *((char *)a2 + 8) + 79096) || *(unsigned char *)(a1 + 2 * *((char *)a2 + 9) + 79128)) {
      uint64_t result = sub_1BBA2F5A0(a1 + 2104, a5, a6, *(unsigned int *)(a1 + 632), *(__int16 *)(a1 + 6 * *((char *)a2 + 8) + 736), *(__int16 *)(a1 + 6 * *((char *)a2 + 8) + 640), v27, *((void *)v26 + 14), v30, *(_WORD *)(a1 + 6 * *((char *)a2 + 9) + 928), *(_WORD *)(a1 + 6 * *((char *)a2 + 9) + 832), v23, *(void *)(v21 + 112), v31[0]);
    }
    else {
      uint64_t result = sub_1BBA2F098(a1 + 2104, a5, a6, v27, *((void *)v26 + 14), v30, v23, *(void *)(v21 + 112), v31[0], a7, a8);
    }
  }
  if (a10)
  {
    if (*(unsigned char *)(a1 + 2 * *((char *)a2 + 8) + 79097) || *(unsigned char *)(a1 + 2 * *((char *)a2 + 9) + 79129)) {
      return sub_1BBA2F760(a1 + 2104, ((int)a5 >> 1), ((int)a6 >> 1), *(unsigned int *)(a1 + 636), a1 + 6 * *((char *)a2 + 8) + 738, a1 + 6 * *((char *)a2 + 8) + 642, v27, *((void *)v26 + 15), v28, a1 + 6 * *((char *)a2 + 9) + 930, a1 + 6 * *((char *)a2 + 9) + 834, v23, *(void *)(v21 + 120), v29);
    }
    else {
      return sub_1BBA2F200(a1 + 2104, ((int)a5 >> 1), ((int)a6 >> 1), v27, *((void *)v26 + 15), v28, v23, *(void *)(v21 + 120), v29, a9, a10);
    }
  }
  return result;
}

uint64_t sub_1BBAD072C(uint64_t a1, _DWORD *a2, unsigned int a3, unint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v15 = -3 - a8;
  int v16 = a2[69];
  unsigned int v17 = v16 + 2;
  int v18 = a6 + ((__int16)a4 >> 2);
  if (v18 < v16 + 2) {
    unsigned int v17 = a6 + ((__int16)a4 >> 2);
  }
  if (v18 <= v15) {
    uint64_t v19 = v15;
  }
  else {
    uint64_t v19 = v17;
  }
  int v20 = -3 - a9;
  int v21 = a7 + ((int)a4 >> 18);
  int v22 = a2[70];
  int v23 = (a6 >> 1) + ((__int16)a4 >> 3);
  unsigned int v24 = v22 + 2;
  if (v21 < v22 + 2) {
    unsigned int v24 = a7 + ((int)a4 >> 18);
  }
  if (v21 <= v20) {
    uint64_t v25 = v20;
  }
  else {
    uint64_t v25 = v24;
  }
  unsigned int v26 = v16 >> 1;
  if (v23 < v16 >> 1) {
    unsigned int v26 = (a6 >> 1) + ((__int16)a4 >> 3);
  }
  if (v23 <= ~((int)a8 >> 1)) {
    uint64_t v27 = ~((int)a8 >> 1);
  }
  else {
    uint64_t v27 = v26;
  }
  unsigned int v28 = v22 >> 1;
  int v29 = (a7 >> 1) + ((int)a4 >> 19);
  if (v29 < v22 >> 1) {
    unsigned int v28 = (a7 >> 1) + ((int)a4 >> 19);
  }
  if (v29 <= ~(a9 >> 1)) {
    uint64_t v30 = ~(a9 >> 1);
  }
  else {
    uint64_t v30 = v28;
  }
  unsigned int v52 = a9 >> 1;
  unsigned int v46 = (int)a8 >> 1;
  uint64_t v53 = a5 + a3;
  if ((a4 & 0x10001) != 0
    || !*(unsigned char *)(*(void *)(a1 + 79088) + 244)
    || *(unsigned char *)(a1 + 32 * a3 + 2 * *(char *)(a5 + a3 + 8) + 79096))
  {
    unsigned int v31 = a3;
    uint64_t v32 = a5;
    LODWORD(v48) = (unsigned __int16)a4;
    HIDWORD(v48) = a4 & 0xFFFF0000;
    uint64_t v49 = *((void *)a2 + 14);
    uint64_t v47 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, v19, v25, 0);
  }
  else
  {
    unsigned int v31 = a3;
    uint64_t v32 = a5;
    int v37 = &a2[2 * ((a4 >> 16) & 2 | (a4 >> 1) & 1)];
    uint64_t v48 = 0;
    uint64_t v49 = *((void *)v37 + 125);
    uint64_t v47 = *((void *)v37 + 121) + ((v49 * (int)v25 + (int)v19) << *((unsigned char *)a2 + 1036));
  }
  uint64_t v51 = *((void *)a2 + 15);
  uint64_t v50 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v27, v30, 1);
  uint64_t result = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, _DWORD *))a2 + 136))(v19, v25, v27, v30, a8, a9, a2);
  if (a11)
  {
    if (*(unsigned char *)(a1 + 32 * v31 + 2 * *(char *)(v53 + 8) + 79096))
    {
      if (v31)
      {
        uint64_t v34 = a1 + 6 * *(char *)(v32 + 9);
        char v35 = (__int16 *)(v34 + 928);
        int v36 = (__int16 *)(v34 + 832);
      }
      else
      {
        uint64_t v38 = a1 + 6 * *(char *)(v32 + 8);
        char v35 = (__int16 *)(v38 + 736);
        int v36 = (__int16 *)(v38 + 640);
      }
      uint64_t result = sub_1BBA2F368(a1 + 2104, a8, a9, *(unsigned int *)(a1 + 632), *v35, *v36, HIDWORD(v48) | v48, v49, v47, a10, a11);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(a1
                                                 + (((unint64_t)(((HIDWORD(v48) | v48) & 3) != 0) << 6) | ((unint64_t)(((HIDWORD(v48) | v48) & 0x30000) != 0) << 7))
                                                 + 8 * byte_1BBB78AC5[((int)a8 >> 2) - 1]
                                                 + 2104))(a9);
    }
  }
  if (a13)
  {
    if (*(unsigned char *)(a1 + 32 * v31 + 2 * *(char *)(v53 + 8) + 79097))
    {
      if (v31)
      {
        uint64_t v39 = a1 + 6 * *(char *)(v32 + 9);
        uint64_t v40 = v39 + 930;
        uint64_t v41 = v39 + 834;
      }
      else
      {
        uint64_t v43 = a1 + 6 * *(char *)(v32 + 8);
        uint64_t v40 = v43 + 738;
        uint64_t v41 = v43 + 642;
      }
      uint64_t v44 = *(unsigned int *)(v32 + 4 * v31);
      uint64_t v45 = *(unsigned int *)(a1 + 636);
      return sub_1BBA2F48C(a1 + 2104, v46, v52, v45, v40, v41, v44, v51, v50, a12, a13);
    }
    else
    {
      unsigned int v42 = *(uint64_t (**)(void))(a1
                                             + (((unint64_t)((*(_DWORD *)(v32 + 4 * v31) & 7) != 0) << 6) | ((unint64_t)((*(_DWORD *)(v32 + 4 * v31) & 0x70000) != 0) << 7))
                                             + 8 * byte_1BBB78AC5[((int)a8 >> 2) - 1]
                                             + 2360);
      return v42(v52);
    }
  }
  return result;
}

int8x16_t *sub_1BBAD0B9C(int8x16_t *result, int8x16_t *a2, int a3, int a4)
{
  if (a4 == 2)
  {
    v7.val[0] = *a2;
    v7.val[1] = *(int8x16_t *)((char *)a2 + a3);
    v7.val[2] = *(int8x16_t *)((char *)a2 + 2 * a3);
    v7.val[3] = *(int8x16_t *)((char *)a2 + 3 * a3);
    *uint64_t result = vqtbl4q_s8(v7, (int8x16_t)xmmword_1E9F82040);
    result[1] = vqtbl4q_s8(v7, (int8x16_t)xmmword_1E9F82050);
    result[2] = vqtbl4q_s8(v7, (int8x16_t)xmmword_1E9F82060);
    int8x16_t v4 = vqtbl4q_s8(v7, (int8x16_t)xmmword_1E9F82070);
    uint64_t v5 = 3;
  }
  else
  {
    if (a4 != 1) {
      return result;
    }
    v6.val[0].i64[0] = a2->i64[0];
    v6.val[0].i64[1] = *(uint64_t *)((char *)a2->i64 + a3);
    v6.val[1].i64[0] = *(uint64_t *)((char *)a2->i64 + 2 * a3);
    v6.val[1].i64[1] = *(uint64_t *)((char *)a2->i64 + 3 * a3);
    *uint64_t result = vqtbl2q_s8(v6, (int8x16_t)xmmword_1BBB6FA00);
    int8x16_t v4 = vqtbl2q_s8(v6, (int8x16_t)xmmword_1BBB6FA10);
    uint64_t v5 = 1;
  }
  result[v5] = v4;
  return result;
}

int8x16_t sub_1BBAD0C4C(int8x16_t *a1, int a2, int8x16x4_t *a3, int a4)
{
  if (a4 == 2)
  {
    int8x16x4_t v7 = *a3;
    *a1 = vqtbl4q_s8(*a3, (int8x16_t)xmmword_1E9F82000);
    *(int8x16_t *)((char *)a1 + a2) = vqtbl4q_s8(v7, (int8x16_t)xmmword_1E9F82010);
    *(int8x16_t *)((char *)a1 + 2 * a2) = vqtbl4q_s8(v7, (int8x16_t)xmmword_1E9F82020);
    int8x16_t result = vqtbl4q_s8(v7, (int8x16_t)xmmword_1E9F82030);
    *(int8x16_t *)((char *)a1 + 3 * a2) = result;
  }
  else if (a4 == 1)
  {
    int8x16x2_t v6 = *(int8x16x2_t *)a3->val[0].i8;
    int8x16_t v4 = vqtbl2q_s8(*(int8x16x2_t *)a3->val[0].i8, (int8x16_t)xmmword_1BBB6F530);
    a1->i64[0] = v4.i64[0];
    *(uint64_t *)((char *)a1->i64 + a2) = vextq_s8(v4, v4, 8uLL).u64[0];
    int8x16_t result = vqtbl2q_s8(v6, (int8x16_t)xmmword_1BBB6F520);
    *(uint64_t *)((char *)a1->i64 + 2 * a2) = result.i64[0];
    result.i64[0] = vextq_s8(result, result, 8uLL).u64[0];
    *(uint64_t *)((char *)a1->i64 + 3 * a2) = result.i64[0];
  }
  return result;
}

void sub_1BBAD0CEC()
{
  uint64_t v0 = 0;
  intptr_t v1 = (char *)&xmmword_1E9F82040;
  uint64_t v2 = (char *)&xmmword_1E9F82000;
  v3.i64[0] = 0x101010101010101;
  v3.i64[1] = 0x101010101010101;
  do
  {
    v4.val[0] = vaddq_s8((int8x16_t)xmmword_1BBB833B0[v0], (int8x16_t)xmmword_1BBB833B0[v0]);
    v4.val[1] = vorrq_s8(v4.val[0], v3);
    vst2q_s8(v2, v4);
    v2 += 32;
    v4.val[0] = vaddq_s8((int8x16_t)xmmword_1BBB833D0[v0], (int8x16_t)xmmword_1BBB833D0[v0]);
    v4.val[1] = vorrq_s8(v4.val[0], v3);
    vst2q_s8(v1, v4);
    v1 += 32;
    ++v0;
  }
  while (v0 != 2);
}

void sub_1BBAD0D44(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int v6 = 6;
  if (!a6) {
    unsigned int v6 = 0;
  }
  if (a5 >= 1)
  {
    int v33 = 0;
    uint64_t v8 = (_DWORD *)((char *)&unk_1BBB82F60 + 44 * v6);
    int v9 = v8[1];
    int v10 = v8[2];
    uint64_t v26 = (int)v8[3];
    int v11 = (int)v26 / (v10 * v9);
    uint64_t v31 = 4 * a2;
    int v34 = v10;
    uint64_t v23 = v10 * a4;
    uint64_t v24 = v10 * (uint64_t)a2;
    uint64_t v12 = 8 * v11;
    uint64_t v13 = (int)v8[5];
    uint64_t v14 = v11 * v9;
    do
    {
      if (a4 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        do
        {
          int v17 = 0;
          uint64_t v18 = a1 + v15;
          uint64_t v29 = v16;
          uint64_t v30 = v15;
          uint64_t v19 = (int8x16x4_t *)(a3 + v16 * v26);
          uint64_t v20 = v12 + v15;
          do
          {
            int v35 = v17;
            if ((int)v14 >= 1)
            {
              uint64_t v21 = 0;
              do
              {
                sub_1BBAD0C4C((int8x16_t *)(v18 + v21), a2, v19, v11);
                uint64_t v19 = (int8x16x4_t *)((char *)v19 + v13);
                if (v21 + v12 >= v14) {
                  break;
                }
                uint64_t v22 = v20 + v21;
                v21 += v12;
              }
              while (v22 < a4);
            }
            int v17 = v35 + 4;
            if (v35 + 4 >= v34) {
              break;
            }
            v18 += v31;
          }
          while (v17 + v33 < a5);
          uint64_t v15 = v30 + v14;
          uint64_t v16 = v29 + 1;
        }
        while (v30 + v14 < a4);
      }
      a3 += v23;
      a1 += v24;
      v33 += v34;
    }
    while (v33 < a5);
  }
}

int8x16_t *sub_1BBAD0F08(int8x16_t *result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v27 = result;
  unsigned int v6 = 6;
  if (!a6) {
    unsigned int v6 = 0;
  }
  if (a5 >= 1)
  {
    int v33 = 0;
    uint64_t v8 = (_DWORD *)((char *)&unk_1BBB82F60 + 44 * v6);
    int v9 = v8[1];
    int v10 = v8[2];
    uint64_t v26 = (int)v8[3];
    int v11 = (int)v26 / (v10 * v9);
    uint64_t v31 = 4 * a3;
    int v34 = v10;
    uint64_t v23 = v10 * a4;
    uint64_t v24 = v10 * (uint64_t)a3;
    uint64_t v12 = 8 * v11;
    uint64_t v13 = (int)v8[5];
    uint64_t v14 = v11 * v9;
    do
    {
      if (a4 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        do
        {
          int v17 = 0;
          uint64_t v18 = a2 + v15;
          uint64_t v29 = v16;
          uint64_t v30 = v15;
          uint64_t v19 = (int8x16_t *)((char *)v27 + v16 * v26);
          uint64_t v20 = v12 + v15;
          do
          {
            int v35 = v17;
            if ((int)v14 >= 1)
            {
              uint64_t v21 = 0;
              do
              {
                int8x16_t result = sub_1BBAD0B9C(v19, (int8x16_t *)(v18 + v21), a3, v11);
                uint64_t v19 = (int8x16_t *)((char *)v19 + v13);
                if (v21 + v12 >= v14) {
                  break;
                }
                uint64_t v22 = v20 + v21;
                v21 += v12;
              }
              while (v22 < a4);
            }
            int v17 = v35 + 4;
            if (v35 + 4 >= v34) {
              break;
            }
            v18 += v31;
          }
          while (v17 + v33 < a5);
          uint64_t v15 = v30 + v14;
          uint64_t v16 = v29 + 1;
        }
        while (v30 + v14 < a4);
      }
      uint64_t v27 = (int8x16_t *)((char *)v27 + v23);
      a2 += v24;
      v33 += v34;
    }
    while (v33 < a5);
  }
  return result;
}

void sub_1BBAD10CC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 79216);
  uint64_t v6 = *(void *)(v5 + 584);
  *(_WORD *)(a1 + 912) = *(_WORD *)(a3 + 496);
  *(void *)a1 = *(void *)(v5 + 608);
  *(void *)(a1 + 944) = *(void *)(v5 + 592);
  uint64_t v7 = *(void *)(v5 + 40);
  int v8 = *(unsigned __int8 *)(v7 + 2009);
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = *(unsigned __int8 *)(v7 + 2013);
  *(void *)(a1 + 20) = *(void *)(v7 + 2016);
  *(_DWORD *)(a1 + 28) = *(unsigned __int8 *)(v7 + 2008);
  int v9 = *(char *)(v6 + 3498);
  if (v9 == 10)
  {
    sub_1BBAA6B7C(a1, a3);
    *(void *)(a1 + 832) = sub_1BBAD20EC;
    *(void *)(a1 + 840) = sub_1BBAD1FE4;
    *(void *)(a1 + 848) = sub_1BBAD1E98;
    *(void *)(a1 + 856) = sub_1BBAD1D4C;
    *(void *)(a1 + 864) = sub_1BBAD1CA0;
    *(void *)(a1 + 872) = sub_1BBAD1B3C;
    *(void *)(a1 + 880) = sub_1BBAD19C0;
    *(void *)(a1 + 888) = sub_1BBAD1800;
    *(void *)(a1 + 896) = sub_1BBAD1640;
    *(void *)(a1 + 904) = sub_1BBAD1520;
  }
  else
  {
    if (v9 != 8) {
      return;
    }
    sub_1BBAA6B7C(a1, a3);
    *(void *)(a1 + 864) = sub_1BBAD22F4;
    *(void *)(a1 + 904) = sub_1BBAD21DC;
    *(void *)(a1 + 832) = sub_1BBACB1A0;
    *(void *)(a1 + 840) = sub_1BBACAE6C;
    *(void *)(a1 + 848) = sub_1BBACA9A0;
    *(void *)(a1 + 856) = sub_1BBACA4D4;
    *(void *)(a1 + 872) = sub_1BBACA010;
    *(void *)(a1 + 880) = sub_1BBAC9C54;
    *(void *)(a1 + 888) = sub_1BBAC9704;
    *(void *)(a1 + 896) = sub_1BBAC91B4;
  }
  int v10 = *(char *)(v6 + 3419);
  *(_DWORD *)(a1 + 916) = v10;
  *(unsigned char *)(a1 + 920) = *(unsigned char *)(v6 + 3420);
  *(_DWORD *)(a1 + 824) = *(unsigned __int8 *)(*(void *)(v5 + 40) + 2001);
  if (v10 == 2)
  {
    *(_DWORD *)(a1 + 960) = 2;
    if (*(unsigned char *)(v6 + 3498) == 10) {
      return;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 960) = *(unsigned __int8 *)(a1 + 33);
  }
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  unint64_t v11 = ((*(_DWORD *)(*(void *)a1 + 276) << (*(unsigned __int8 *)(a1 + 32) > 8u)) + 31) & 0xFFFFFFFFFFFFFFE0;
  if (!sub_1BBA12730((void **)(a1 + 72), (int)((v11 >> 5 << 7) | 0x40), 0x20uLL))
  {
    uint64_t v12 = *(void *)(a1 + 72) + 32;
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v12 + (int)v11;
    *(void *)(a1 + 56) = v12 + 2 * v11;
    *(void *)(a1 + 64) = v12 + 3 * (int)v11;
    unint64_t v13 = *(int *)(a1 + 24) * (uint64_t)*(int *)(a1 + 20);
    if (*(void *)(a1 + 936) < v13)
    {
      if (v13 > 0x3200000) {
        return;
      }
      uint64_t v14 = (void *)(a1 + 928);
      uint64_t v15 = *(void **)(a1 + 928);
      if (v15)
      {
        free(v15);
        *uint64_t v14 = 0;
        *(void *)(a1 + 936) = 0;
      }
      if (malloc_type_posix_memalign((void **)(a1 + 928), 0x10uLL, 2 * v13, 0x1000040BDFB0063uLL) || !*v14) {
        return;
      }
      uint64_t v16 = 0;
      do
        *(_WORD *)(*v14 + 2 * v16++) = 0;
      while (v13 != v16);
      *(void *)(a1 + 936) = v13;
    }
    int v17 = sub_1BBAB1F58(a1 + 440, *(_DWORD *)(v6 + 3424), *(unsigned __int8 *)(*(void *)(v5 + 40) + 2000), *(_DWORD *)(v6 + 3248), *(char *)(v5 + 640));
    sub_1BBAB47F4(a1 + 440, a2, *(unsigned __int8 *)(*(void *)(v5 + 40) + 2001));
    if (v17)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v23 = 0;
        _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "RDCost init failed in SAOEnc\n", v23, 2u);
      }
    }
    else
    {
      if (a2 > 51)
      {
        int v20 = 0;
        int v21 = 0;
        int v22 = 0;
      }
      else
      {
        int v18 = *(_DWORD *)(a1 + 824) + a2;
        if (v18 >= 63) {
          int v18 = 63;
        }
        unsigned int v19 = v18 & ~(v18 >> 31);
        int v20 = dword_1BBB7B4C0[70 * *(unsigned __int8 *)(a1 + 462) + v19];
        int v21 = word_1BBB7BA38[512 * (unint64_t)*(unsigned __int8 *)(a1 + 463)
                           + 256 * (unint64_t)(*(_DWORD *)(a1 + 916) == 3)
                           + 64 * (unint64_t)*(unsigned __int8 *)(a1 + 462)
                           + v19];
        int v22 = (unsigned __int16)word_1BBB7C238[52 * (*(_DWORD *)(a1 + 916) == 3) + (a2 & ~(a2 >> 31))];
      }
      *(_DWORD *)(a1 + 424) = v20;
      *(_DWORD *)(a1 + 428) = v21;
      *(_DWORD *)(a1 + 432) = v22;
      *(void *)(a1 + 952) = *(void *)(v5 + 24);
      *(unsigned char *)(a1 + 436) = *(unsigned char *)(v6 + 3800);
    }
  }
}

uint64_t *sub_1BBAD1520(long long *a1, _OWORD *a2, _OWORD *a3)
{
  long long v5 = a1[1];
  long long v8 = *a1;
  long long v9 = v5;
  long long v10 = a1[2];
  uint64_t v11 = *((void *)a1 + 6);
  uint64_t v6 = *((void *)a1 + 2) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1BBAD1590((uint64_t *)a1, a2, a3);
  return sub_1BBAD1590((uint64_t *)&v8, a2 + 4, a3 + 8);
}

uint64_t *sub_1BBAD1590(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[2];
  int v5 = *((_DWORD *)result + 8);
  int v6 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    int v8 = 0;
    int v9 = v5 - v6;
    uint64_t v10 = 2 * result[3];
    uint64_t v11 = 2 * result[1];
    do
    {
      if (v9 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          unint64_t v13 = *(unsigned __int16 *)(v3 + 2 * v12);
          int8x16_t result = (uint64_t *)(v13 >> 5);
          *((_DWORD *)a3 + (void)result) = *((_DWORD *)a3 + (v13 >> 5)) - v13 + *(unsigned __int16 *)(v4 + 2 * v12);
          *((_WORD *)a2 + (void)result) = *((_WORD *)a2 + (v13 >> 5)) + 1;
          v12 += 2;
        }
        while (v12 < 2 * v9);
      }
      ++v8;
      v4 += v10;
      v3 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1BBAD1640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)a1;
  long long v9 = v5;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 16) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1BBAD16B0(a1, a2, a3);
  return sub_1BBAD16B0((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1BBAD16B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)result;
  int v6 = *(_DWORD *)(result + 32);
  int v8 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 44);
  int v9 = *(_DWORD *)(result + 36) - v7;
  int v10 = *(_DWORD *)(result + 48);
  BOOL v12 = (v10 & 8) == 0 || v7 != 0;
  int v13 = v9 - v12;
  uint64_t v14 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    uint64_t v15 = *(void *)(result + 24);
    BOOL v17 = (v10 & 2) == 0 || v8 != 0;
    int v18 = 2 * (v6 - v8 - v17);
    uint64_t v19 = ~(2 * (_BYTE)v10) & 2;
    uint64_t v20 = v18;
    uint64_t v21 = v4 + 2 * v15 * v14 + 2 * v19;
    uint64_t v22 = 2 * v15;
    uint64_t v23 = v3 * (2 * v14 + 2) + 2 * v19 + v5 - 4;
    uint64_t v24 = 2 * v3;
    uint64_t v25 = v3 * (2 * v14 - 2) + 2 * v19 + v5 + 4;
    int8x16_t result = 2 * v3 * v14 + 2 * v19;
    uint64_t v26 = v5 + result;
    do
    {
      if ((int)v19 < (int)v20)
      {
        int8x16_t result = 0;
        do
        {
          int v27 = *(unsigned __int16 *)(v26 + 2 * result);
          int v28 = *(unsigned __int16 *)(v25 + 2 * result);
          BOOL v29 = __OFSUB__(v27, v28);
          int v30 = v27 - v28;
          if ((v30 < 0) ^ v29 | (v30 == 0)) {
            int v31 = 0;
          }
          else {
            int v31 = 1;
          }
          int v32 = v31 | (v30 >> 31);
          int v33 = *(unsigned __int16 *)(v23 + 2 * result);
          BOOL v29 = __OFSUB__(v27, v33);
          int v34 = v27 - v33;
          if ((v34 < 0) ^ v29 | (v34 == 0)) {
            int v35 = 0;
          }
          else {
            int v35 = 1;
          }
          int v36 = v32 + (v35 | (v34 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v36) = *(_DWORD *)(a3 + 4 * v36) - v27 + *(unsigned __int16 *)(v21 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v36);
          result += 2;
        }
        while (v19 + result < v20);
      }
      LODWORD(v14) = v14 + 1;
      v21 += v22;
      v23 += v24;
      v25 += v24;
      v26 += v24;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_1BBAD1800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)a1;
  long long v9 = v5;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 16) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1BBAD1870(a1, a2, a3);
  return sub_1BBAD1870((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1BBAD1870(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)result;
  int v6 = *(_DWORD *)(result + 32);
  int v8 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 44);
  int v9 = *(_DWORD *)(result + 36) - v7;
  int v10 = *(_DWORD *)(result + 48);
  BOOL v12 = (v10 & 8) == 0 || v7 != 0;
  int v13 = v9 - v12;
  uint64_t v14 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    uint64_t v15 = *(void *)(result + 24);
    BOOL v17 = (v10 & 2) == 0 || v8 != 0;
    int v18 = 2 * (v6 - v8 - v17);
    uint64_t v19 = ~(2 * (_BYTE)v10) & 2;
    uint64_t v20 = v18;
    uint64_t v21 = v4 + 2 * v15 * v14 + 2 * v19;
    uint64_t v22 = 2 * v15;
    uint64_t v23 = v3 * (2 * v14 + 2) + 2 * v19 + v5 + 4;
    uint64_t v24 = 2 * v3;
    uint64_t v25 = v3 * (2 * v14 - 2) + 2 * v19 + v5 - 4;
    int8x16_t result = 2 * v3 * v14 + 2 * v19;
    uint64_t v26 = v5 + result;
    do
    {
      if ((int)v19 < (int)v20)
      {
        int8x16_t result = 0;
        do
        {
          int v27 = *(unsigned __int16 *)(v26 + 2 * result);
          int v28 = *(unsigned __int16 *)(v25 + 2 * result);
          BOOL v29 = __OFSUB__(v27, v28);
          int v30 = v27 - v28;
          if ((v30 < 0) ^ v29 | (v30 == 0)) {
            int v31 = 0;
          }
          else {
            int v31 = 1;
          }
          int v32 = v31 | (v30 >> 31);
          int v33 = *(unsigned __int16 *)(v23 + 2 * result);
          BOOL v29 = __OFSUB__(v27, v33);
          int v34 = v27 - v33;
          if ((v34 < 0) ^ v29 | (v34 == 0)) {
            int v35 = 0;
          }
          else {
            int v35 = 1;
          }
          int v36 = v32 + (v35 | (v34 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v36) = *(_DWORD *)(a3 + 4 * v36) - v27 + *(unsigned __int16 *)(v21 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v36);
          result += 2;
        }
        while (v19 + result < v20);
      }
      LODWORD(v14) = v14 + 1;
      v21 += v22;
      v23 += v24;
      v25 += v24;
      v26 += v24;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_1BBAD19C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)a1;
  long long v9 = v5;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 16) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1BBAD1A30(a1, a2, a3);
  return sub_1BBAD1A30((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1BBAD1A30(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)result;
  int v6 = *(_DWORD *)(result + 32);
  int v8 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 44);
  int v9 = *(_DWORD *)(result + 36) - v7;
  BOOL v11 = (*(_DWORD *)(result + 48) & 8) == 0 || v7 != 0;
  int v12 = v9 - v11;
  uint64_t v13 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v13 < v12)
  {
    uint64_t v14 = *(void *)(result + 24);
    int v15 = v6 - v8;
    uint64_t v16 = v4 + 2 * v14 * v13;
    uint64_t v17 = v5 + 2 * v3 * v13;
    uint64_t v18 = 2 * v14;
    uint64_t v19 = v5 + v3 * (2 * v13 + 2);
    uint64_t v20 = 2 * v3;
    int8x16_t result = 2 * v13 - 2;
    uint64_t v21 = v5 + v3 * result;
    do
    {
      if (v15 >= 1)
      {
        int8x16_t result = 0;
        do
        {
          int v22 = *(unsigned __int16 *)(v17 + 2 * result);
          int v23 = *(unsigned __int16 *)(v21 + 2 * result);
          BOOL v24 = __OFSUB__(v22, v23);
          int v25 = v22 - v23;
          if ((v25 < 0) ^ v24 | (v25 == 0)) {
            int v26 = 0;
          }
          else {
            int v26 = 1;
          }
          int v27 = v26 | (v25 >> 31);
          int v28 = *(unsigned __int16 *)(v19 + 2 * result);
          BOOL v24 = __OFSUB__(v22, v28);
          int v29 = v22 - v28;
          if ((v29 < 0) ^ v24 | (v29 == 0)) {
            int v30 = 0;
          }
          else {
            int v30 = 1;
          }
          int v31 = v27 + (v30 | (v29 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v31) = *(_DWORD *)(a3 + 4 * v31) - v22 + *(unsigned __int16 *)(v16 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v31);
          result += 2;
        }
        while (result < 2 * v15);
      }
      LODWORD(v13) = v13 + 1;
      v16 += v18;
      v19 += v20;
      v21 += v20;
      v17 += v20;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t sub_1BBAD1B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)a1;
  long long v9 = v5;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 16) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1BBAD1BAC(a1, a2, a3);
  return sub_1BBAD1BAC((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1BBAD1BAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 16);
  int v5 = *(_DWORD *)(result + 32);
  int v6 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 44);
  int v8 = *(_DWORD *)(result + 48);
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7 >= 1)
  {
    int v9 = 0;
    BOOL v10 = (v8 & 2) != 0 && v6 == 0;
    int v11 = v5 - v6;
    int v12 = !v10;
    uint64_t v13 = 2 * (v11 - v12);
    uint64_t v14 = ~(2 * (_BYTE)v8) & 2;
    uint64_t v15 = 2 * *(void *)(result + 24);
    uint64_t v16 = (unsigned __int16 *)(v3 + 2 * v14);
    uint64_t v17 = 2 * *(void *)(result + 8);
    do
    {
      uint64_t v18 = v16;
      uint64_t v19 = v14;
      if ((int)v14 < (int)v13)
      {
        do
        {
          int v20 = *v18;
          int v21 = *(v18 - 2);
          BOOL v22 = __OFSUB__(v20, v21);
          int v23 = v20 - v21;
          if ((v23 < 0) ^ v22 | (v23 == 0)) {
            int v24 = 0;
          }
          else {
            int v24 = 1;
          }
          int v25 = v18[2];
          v18 += 2;
          int v26 = (v24 | (v23 >> 31)) + ((v20 > v25) | ((v20 - v25) >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v26) = *(_DWORD *)(a3 + 4 * v26) - v20 + *(unsigned __int16 *)(v4 + 2 * v19);
          int8x16_t result = *(unsigned __int16 *)(a2 + 2 * v26);
          *(_WORD *)(a2 + 2 * v26) = result + 1;
          v19 += 2;
        }
        while (v19 < v13);
      }
      ++v9;
      v4 += v15;
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v17);
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t *sub_1BBAD1CA0(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[2];
  int v5 = *((_DWORD *)result + 8);
  int v6 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    int v8 = 0;
    int v9 = v5 - v6;
    uint64_t v10 = 2 * result[3];
    uint64_t v11 = 2 * result[1];
    do
    {
      if (v9 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          unint64_t v13 = *(unsigned __int16 *)(v3 + v12);
          int8x16_t result = (uint64_t *)(v13 >> 5);
          *((_DWORD *)a3 + (void)result) = *((_DWORD *)a3 + (v13 >> 5)) - v13 + *(unsigned __int16 *)(v4 + v12);
          *((_WORD *)a2 + (void)result) = *((_WORD *)a2 + (v13 >> 5)) + 1;
          v12 += 2;
        }
        while (2 * v9 != v12);
      }
      ++v8;
      v4 += v10;
      v3 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t *sub_1BBAD1D4C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = result[2];
  uint64_t v5 = *result;
  int v6 = *((_DWORD *)result + 8);
  int v8 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 11);
  int v9 = *((_DWORD *)result + 9) - v7;
  int v10 = *((_DWORD *)result + 12);
  BOOL v12 = (v10 & 8) == 0 || v7 != 0;
  int v13 = v9 - v12;
  uint64_t v14 = (result[6] & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    uint64_t v15 = result[3];
    BOOL v17 = (v10 & 2) == 0 || v8 != 0;
    uint64_t v18 = (v6 - v8 - v17);
    int v19 = !(v10 & 1);
    BOOL v20 = (v10 & 1) == 0;
    uint64_t v21 = v18 - v20;
    uint64_t v22 = v4 + 2 * v15 * v14 + 2 * v20;
    uint64_t v23 = 2 * v15;
    uint64_t v24 = v3 * (2 * v14 + 2) + 2 * v20 + v5 - 2;
    uint64_t v25 = 2 * v3;
    uint64_t v26 = v3 * (2 * v14 - 2) + 2 * v20 + v5 + 2;
    int8x16_t result = (uint64_t *)(v5 + 2 * v3 * v14 + 2 * v20);
    do
    {
      if (v19 < (int)v18)
      {
        uint64_t v27 = 0;
        do
        {
          int v28 = *((unsigned __int16 *)result + v27);
          int v29 = *(unsigned __int16 *)(v26 + 2 * v27);
          BOOL v30 = __OFSUB__(v28, v29);
          int v31 = v28 - v29;
          if ((v31 < 0) ^ v30 | (v31 == 0)) {
            int v32 = 0;
          }
          else {
            int v32 = 1;
          }
          int v33 = v32 | (v31 >> 31);
          int v34 = *(unsigned __int16 *)(v24 + 2 * v27);
          BOOL v30 = __OFSUB__(v28, v34);
          int v35 = v28 - v34;
          if ((v35 < 0) ^ v30 | (v35 == 0)) {
            int v36 = 0;
          }
          else {
            int v36 = 1;
          }
          int v37 = v33 + (v36 | (v35 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v37) = *(_DWORD *)(a3 + 4 * v37) - v28 + *(unsigned __int16 *)(v22 + 2 * v27);
          ++*(_WORD *)(a2 + 2 * v37);
          ++v27;
        }
        while (v21 != v27);
      }
      LODWORD(v14) = v14 + 1;
      v22 += v23;
      v24 += v25;
      v26 += v25;
      int8x16_t result = (uint64_t *)((char *)result + v25);
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t *sub_1BBAD1E98(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = result[2];
  uint64_t v5 = *result;
  int v6 = *((_DWORD *)result + 8);
  int v8 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 11);
  int v9 = *((_DWORD *)result + 9) - v7;
  int v10 = *((_DWORD *)result + 12);
  BOOL v12 = (v10 & 8) == 0 || v7 != 0;
  int v13 = v9 - v12;
  uint64_t v14 = (result[6] & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    uint64_t v15 = result[3];
    BOOL v17 = (v10 & 2) == 0 || v8 != 0;
    uint64_t v18 = (v6 - v8 - v17);
    int v19 = !(v10 & 1);
    BOOL v20 = (v10 & 1) == 0;
    uint64_t v21 = v18 - v20;
    uint64_t v22 = v4 + 2 * v15 * v14 + 2 * v20;
    uint64_t v23 = 2 * v15;
    uint64_t v24 = v3 * (2 * v14 + 2) + 2 * v20 + v5 + 2;
    uint64_t v25 = 2 * v3;
    uint64_t v26 = v3 * (2 * v14 - 2) + 2 * v20 + v5 - 2;
    int8x16_t result = (uint64_t *)(v5 + 2 * v3 * v14 + 2 * v20);
    do
    {
      if (v19 < (int)v18)
      {
        uint64_t v27 = 0;
        do
        {
          int v28 = *((unsigned __int16 *)result + v27);
          int v29 = *(unsigned __int16 *)(v26 + 2 * v27);
          BOOL v30 = __OFSUB__(v28, v29);
          int v31 = v28 - v29;
          if ((v31 < 0) ^ v30 | (v31 == 0)) {
            int v32 = 0;
          }
          else {
            int v32 = 1;
          }
          int v33 = v32 | (v31 >> 31);
          int v34 = *(unsigned __int16 *)(v24 + 2 * v27);
          BOOL v30 = __OFSUB__(v28, v34);
          int v35 = v28 - v34;
          if ((v35 < 0) ^ v30 | (v35 == 0)) {
            int v36 = 0;
          }
          else {
            int v36 = 1;
          }
          int v37 = v33 + (v36 | (v35 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v37) = *(_DWORD *)(a3 + 4 * v37) - v28 + *(unsigned __int16 *)(v22 + 2 * v27);
          ++*(_WORD *)(a2 + 2 * v37);
          ++v27;
        }
        while (v21 != v27);
      }
      LODWORD(v14) = v14 + 1;
      v22 += v23;
      v24 += v25;
      v26 += v25;
      int8x16_t result = (uint64_t *)((char *)result + v25);
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_1BBAD1FE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)result;
  int v6 = *(_DWORD *)(result + 32);
  int v8 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 44);
  int v9 = *(_DWORD *)(result + 36) - v7;
  BOOL v11 = (*(_DWORD *)(result + 48) & 8) == 0 || v7 != 0;
  int v12 = v9 - v11;
  uint64_t v13 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v13 < v12)
  {
    uint64_t v14 = *(void *)(result + 24);
    int v15 = v6 - v8;
    uint64_t v16 = v4 + 2 * v14 * v13;
    uint64_t v17 = v5 + 2 * v3 * v13;
    uint64_t v18 = 2 * v14;
    uint64_t v19 = v5 + v3 * (2 * v13 + 2);
    uint64_t v20 = 2 * v3;
    int8x16_t result = 2 * v13 - 2;
    uint64_t v21 = v5 + v3 * result;
    do
    {
      if (v15 >= 1)
      {
        int8x16_t result = 0;
        do
        {
          int v22 = *(unsigned __int16 *)(v17 + result);
          int v23 = *(unsigned __int16 *)(v21 + result);
          BOOL v24 = __OFSUB__(v22, v23);
          int v25 = v22 - v23;
          if ((v25 < 0) ^ v24 | (v25 == 0)) {
            int v26 = 0;
          }
          else {
            int v26 = 1;
          }
          int v27 = v26 | (v25 >> 31);
          int v28 = *(unsigned __int16 *)(v19 + result);
          BOOL v24 = __OFSUB__(v22, v28);
          int v29 = v22 - v28;
          if ((v29 < 0) ^ v24 | (v29 == 0)) {
            int v30 = 0;
          }
          else {
            int v30 = 1;
          }
          int v31 = v27 + (v30 | (v29 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v31) = *(_DWORD *)(a3 + 4 * v31) - v22 + *(unsigned __int16 *)(v16 + result);
          ++*(_WORD *)(a2 + 2 * v31);
          result += 2;
        }
        while (2 * v15 != result);
      }
      LODWORD(v13) = v13 + 1;
      v16 += v18;
      v19 += v20;
      v21 += v20;
      v17 += v20;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t *sub_1BBAD20EC(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[2];
  int v5 = *((_DWORD *)result + 8);
  int v6 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  int v8 = *((_DWORD *)result + 12);
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7 >= 1)
  {
    int v9 = 0;
    BOOL v10 = (v8 & 2) != 0 && v6 == 0;
    int v11 = !v10;
    uint64_t v12 = (v5 - v6 - v11);
    BOOL v10 = (v8 & 1) == 0;
    int v13 = !(v8 & 1);
    uint64_t v14 = 2 * result[3];
    uint64_t v15 = v10;
    uint64_t v16 = 2 * v15;
    uint64_t v17 = (uint64_t *)(v12 - v15);
    uint64_t v18 = 2 * result[1];
    do
    {
      int8x16_t result = v17;
      uint64_t v19 = v16;
      if (v13 < (int)v12)
      {
        do
        {
          int v20 = *(unsigned __int16 *)(v3 + v19);
          int v21 = *(unsigned __int16 *)(v3 + v19 - 2);
          BOOL v22 = __OFSUB__(v20, v21);
          int v23 = v20 - v21;
          if ((v23 < 0) ^ v22 | (v23 == 0)) {
            int v24 = 0;
          }
          else {
            int v24 = 1;
          }
          int v25 = v24 | (v23 >> 31);
          int v26 = *(unsigned __int16 *)(v3 + v19 + 2);
          BOOL v22 = __OFSUB__(v20, v26);
          int v27 = v20 - v26;
          if ((v27 < 0) ^ v22 | (v27 == 0)) {
            int v28 = 0;
          }
          else {
            int v28 = 1;
          }
          int v29 = v25 + (v28 | (v27 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v29) = *(_DWORD *)(a3 + 4 * v29) - v20 + *(unsigned __int16 *)(v4 + v19);
          ++*(_WORD *)(a2 + 2 * v29);
          v19 += 2;
          int8x16_t result = (uint64_t *)((char *)result - 1);
        }
        while (result);
      }
      ++v9;
      v4 += v14;
      v3 += v18;
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t *sub_1BBAD21DC(long long *a1, _OWORD *a2, _OWORD *a3)
{
  long long v5 = a1[1];
  long long v8 = *a1;
  long long v9 = v5;
  long long v10 = a1[2];
  uint64_t v11 = *((void *)a1 + 6);
  uint64_t v6 = *((void *)a1 + 2) + 1;
  *(void *)&long long v8 = *(void *)a1 + 1;
  *(void *)&long long v9 = v6;
  sub_1BBAD224C((uint64_t *)a1, a2, a3);
  return sub_1BBAD224C((uint64_t *)&v8, a2 + 4, a3 + 8);
}

uint64_t *sub_1BBAD224C(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[2];
  int v5 = *((_DWORD *)result + 8);
  int v6 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    int v8 = 0;
    int v9 = v5 - v6;
    uint64_t v10 = result[1];
    uint64_t v11 = result[3];
    do
    {
      if (v9 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          unint64_t v13 = *(unsigned __int8 *)(v3 + v12);
          int8x16_t result = (uint64_t *)(v13 >> 3);
          *((_DWORD *)a3 + (void)result) = *((_DWORD *)a3 + (v13 >> 3)) - v13 + *(unsigned __int8 *)(v4 + v12);
          *((_WORD *)a2 + (void)result) = *((_WORD *)a2 + (v13 >> 3)) + 1;
          v12 += 2;
        }
        while (v12 < 2 * v9);
      }
      v3 += v10;
      v4 += v11;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1BBAD22F4(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 16);
  int v5 = *(_DWORD *)(result + 32);
  int v6 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 44);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = (v5 - v6);
    uint64_t v10 = *(void *)(result + 8);
    uint64_t v11 = *(void *)(result + 24);
    do
    {
      if ((int)v9 >= 1)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          unint64_t v13 = *(unsigned __int8 *)(v3 + i);
          unint64_t v14 = v13 >> 3;
          int8x16_t result = *(unsigned __int8 *)(v4 + i);
          *((_DWORD *)a3 + v14) = *((_DWORD *)a3 + (v13 >> 3)) - v13 + result;
          *((_WORD *)a2 + v14) = *((_WORD *)a2 + (v13 >> 3)) + 1;
        }
      }
      v3 += v10;
      v4 += v11;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1BBAD2394(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char v9 = *((_DWORD *)a1 + 3) - a4;
  uint64_t v10 = (a2 << v9);
  uint64_t v11 = (a3 << v9);
  if (a4) {
    int v12 = 2;
  }
  else {
    int v12 = 4;
  }
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, v10, v11);
  uint64_t v14 = *a1;
  uint64_t v41 = v13;
  uint64_t v42 = *(void *)(v14 + 8 * a4 + 112);
  uint64_t v43 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)a1[118] + 16))(a1[118], v10, v11, a4);
  uint64_t v44 = *(void *)(a1[118] + 8 * a4 + 112);
  int v15 = 1 << (*((_DWORD *)a1 + 3) - a4);
  int v45 = v15;
  int v46 = v15;
  int v47 = v12;
  int v48 = v12;
  int v49 = 0;
  if (((*(uint64_t (**)(void))(*(void *)a1[119] + 16))(a1[119]) & 1) != 0
    || (uint64_t result = (*(uint64_t (**)(void))(*(void *)a1[119] + 32))(a1[119]), result))
  {
    uint64_t v17 = (_DWORD *)a1[119];
    int v18 = *((_DWORD *)a1 + 3);
    uint64_t result = sub_1BBAB1928(v17, v10, v11, 1 << v18);
    int v19 = v15;
    if (result == 1)
    {
      int v20 = 1 << (v18 - a4);
      int v21 = v17[10];
      int v22 = (int)v17[9] >> a4;
      if ((int)v10 <= v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = v10;
      }
      int v24 = v17[12];
      int v25 = (int)v17[11] >> a4;
      if ((int)v11 <= v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = v11;
      }
      int v27 = v21 >> a4;
      if (v27 >= (int)v10 + v20 - 1) {
        int v28 = v10 + v20 - 1;
      }
      else {
        int v28 = v27;
      }
      int v29 = v11 + v20 - 1;
      if (v24 >> a4 < v29) {
        int v29 = v24 >> a4;
      }
      int v39 = v29;
      uint64_t v41 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, v23, v26, a4);
      uint64_t v42 = *(void *)(*a1 + 8 * a4 + 112);
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)a1[118] + 16))(a1[118], v23, v26, a4);
      uint64_t v43 = result;
      uint64_t v44 = *(void *)(a1[118] + 8 * a4 + 112);
      int v19 = v28 - v23 + 1;
      int v15 = v39 - v26 + 1;
      int v45 = v19;
      int v46 = v15;
    }
  }
  else
  {
    int v19 = v15;
  }
  uint64_t v30 = *a1;
  uint64_t v31 = 240;
  if (!*(unsigned char *)(*a1 + 136)) {
    uint64_t v31 = 276;
  }
  uint64_t v32 = 244;
  if (!*(unsigned char *)(*a1 + 136)) {
    uint64_t v32 = 280;
  }
  int v33 = *(int *)(v30 + v31) >> a4;
  int v34 = *(int *)(v30 + v32) >> a4;
  if (v19 + (int)v10 > v33) {
    int v45 = v33 - v10;
  }
  if (v15 + (int)v11 > v34) {
    int v46 = v34 - v11;
  }
  int v35 = a2 != 0;
  if (a3) {
    v35 |= 4u;
  }
  if (a2 | a3) {
    int v49 = v35;
  }
  if (*((_DWORD *)a1 + 5) - 1 <= a2)
  {
    int v47 = 0;
  }
  else
  {
    v35 |= 2u;
    int v49 = v35;
  }
  if (*((_DWORD *)a1 + 6) - 1 <= a3) {
    int v48 = 0;
  }
  else {
    int v49 = v35 | 8;
  }
  if (!*((unsigned char *)a1 + 920) || (a4 & 1) == 0)
  {
    uint64_t v36 = 0;
    uint64_t v37 = a5 + 20 * a4;
    uint64_t v38 = a5 + 10 * a4 + 240;
    do
    {
      uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))a1[5 * a4 + 104 + v36++])(&v41, v38, v37);
      v37 += 60;
      v38 += 30;
    }
    while (v36 != 4);
    if (!*((unsigned char *)a1 + 920)) {
      return ((uint64_t (*)(uint64_t *, unint64_t, unint64_t))a1[5 * a4 + 108])(&v41, a5 + ((unint64_t)a4 << 6) + 744, a5 + ((unint64_t)a4 << 7) + 360);
    }
  }
  if (a4) {
    return ((uint64_t (*)(uint64_t *, unint64_t, unint64_t))a1[5 * a4 + 108])(&v41, a5 + ((unint64_t)a4 << 6) + 744, a5 + ((unint64_t)a4 << 7) + 360);
  }
  return result;
}

uint64_t sub_1BBAD27A4(uint64_t a1, int a2, int a3, int *a4, int *a5, int a6, int a7)
{
  int v8 = *a4;
  if (*a4)
  {
    if (v8 < 1) {
      int v9 = 1;
    }
    else {
      int v9 = -1;
    }
    if (v8 == v9)
    {
      int v10 = 0;
      int v11 = 0;
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = 0;
      int v11 = 0;
      int v10 = 0;
      int v16 = *(unsigned __int8 *)(a1 + 33);
      int v17 = v8 * a2 - 2 * a3;
      int v18 = v9 * a2;
      int v19 = 0x7FFFFFFF;
      do
      {
        int v20 = v8;
        BOOL v21 = a6 == 4;
        int v22 = v17 * v8;
        if (v20 >= 0) {
          int v23 = v20;
        }
        else {
          int v23 = -v20;
        }
        if (!v20) {
          BOOL v21 = 0;
        }
        if (v23 + 1 < v16) {
          int v24 = v23 + 1;
        }
        else {
          int v24 = v16;
        }
        uint64_t v25 = (v24 + v21);
        if (v22 + (int)v25 * a7 < v19)
        {
          int v10 = v20;
          int v11 = v22;
          uint64_t result = v25;
          int v19 = v22 + v25 * a7;
        }
        int v8 = v20 + v9;
        v17 += v18;
      }
      while (v20);
    }
    *a4 = v10;
    *a5 = v11;
  }
  else
  {
    *a5 = 0;
    int v13 = *a4;
    int v14 = *(unsigned __int8 *)(a1 + 33);
    BOOL v15 = a6 == 4;
    if (*a4 < 0) {
      int v13 = -v13;
    }
    if (!*a4) {
      BOOL v15 = 0;
    }
    if (v13 + 1 < v14) {
      int v14 = v13 + 1;
    }
    return (v14 + v15);
  }
  return result;
}

uint64_t sub_1BBAD2888(uint64_t result, uint64_t a2, int a3, char *a4, unsigned int a5, int *a6, int *a7, int a8)
{
  uint64_t v46 = a2 + 30 * a3 + 10 * a5 + 240;
  uint64_t v45 = a2 + 60 * a3 + 20 * a5;
  do
  {
    int v8 = *a4;
    int v9 = a4[1];
    BOOL v10 = v8 < v9;
    if (v8 <= v9) {
      int v11 = a4[1];
    }
    else {
      int v11 = *a4;
    }
    if (v8 > v9) {
      int v12 = a4[1];
    }
    else {
      int v12 = *a4;
    }
    int v13 = a4[2];
    int v14 = a4[3];
    if (v13 < v14) {
      uint64_t v15 = 3;
    }
    else {
      uint64_t v15 = 4;
    }
    if (v13 >= v14) {
      int v16 = a4[3];
    }
    else {
      int v16 = a4[2];
    }
    if (v13 < v14) {
      int v17 = a4[3];
    }
    else {
      int v17 = a4[2];
    }
    int v18 = v11 - v16;
    if (v11 - v16 < 5) {
      break;
    }
    int v19 = 0;
    int v20 = 0;
    int v21 = 0;
    char v22 = 0;
    int v23 = *(unsigned __int16 *)(v46 + 2 * v10);
    int v24 = *(unsigned __int16 *)(v46 + 2 * v15);
    int v49 = v18 - 4;
    int v25 = v18 - 3;
    int v26 = -2 * *(_DWORD *)(v45 + 4 * v15);
    int v27 = -2 * *(_DWORD *)(v45 + 4 * v10);
    int v28 = v16 + 4;
    int v29 = 0x7FFFFFFF;
    int v47 = v27;
    int v48 = v26;
LABEL_19:
    int v30 = 1 - (v16 + v19);
    int v31 = v26 + v24 * (v16 + v19);
    int v32 = v27 + v23 * (v28 + v19);
    do
    {
      if ((v16 - 1 + v19) >= 0xFFFFFFFB)
      {
        int v33 = v16 + v19;
        BOOL v34 = a3 == 4;
        int v35 = v16 + v19 + 4;
        int v36 = v31 * (v16 + v19) + v32 * v35;
        int v37 = *(unsigned __int8 *)(result + 33);
        int v38 = -4 - (v16 + v19);
        if (v35 >= 0) {
          int v38 = v16 + v19 + 4;
        }
        if (v38 + 1 < v37) {
          int v39 = v38 + 1;
        }
        else {
          int v39 = *(unsigned __int8 *)(result + 33);
        }
        BOOL v40 = v33 != -4 && a3 == 4;
        if (v30 < v37) {
          int v37 = v30;
        }
        if (!v33) {
          BOOL v34 = 0;
        }
        int v41 = v40 + v34 + v37 + v39;
        if (v36 + v41 * a8 < v29)
        {
          *a6 = v36;
          *a7 = v41;
          char v22 = 1;
          int v29 = v36 + v41 * a8;
          int v20 = v16 + v19;
          int v21 = v33 + 4;
          int v26 = v48;
          BOOL v42 = v19++ == v49;
          int v28 = v16 + 4;
          int v27 = v47;
          if (!v42) {
            goto LABEL_19;
          }
          goto LABEL_40;
        }
      }
      ++v19;
      --v30;
      v31 += v24;
      v32 += v23;
    }
    while (v25 != v19);
    int v35 = v21;
    int v33 = v20;
    if ((v22 & 1) == 0) {
      continue;
    }
LABEL_40:
    a4[byte_1BBB833F0[v15] - 1] = v33;
    a4[byte_1BBB833F0[v10] - 1] = v35;
    int v21 = v35;
    int v20 = v33;
  }
  while (v12 - v17 > 4 || v12 - v20 > 4 || v21 - v17 > 4);
  return result;
}

unint64_t *sub_1BBAD2AC4(int a1, unint64_t *a2, char *a3)
{
  int v6 = *a3;
  if (a1 >= v6) {
    int v7 = *a3;
  }
  else {
    int v7 = a1;
  }
  int v8 = v6 < a1;
  if (v7 > 21) {
    sub_1BBA1CD18(a2, v7, v8);
  }
  else {
    sub_1BBA1CC5C(a2, ~v8, v7 + v8);
  }
  int v9 = a3[1];
  if (a1 >= v9) {
    int v10 = a3[1];
  }
  else {
    int v10 = a1;
  }
  int v11 = v9 < a1;
  if (v10 > 21) {
    sub_1BBA1CD18(a2, v10, v11);
  }
  else {
    sub_1BBA1CC5C(a2, ~v11, v10 + v11);
  }
  int v12 = a3[2];
  if (a1 >= -v12) {
    int v13 = -v12;
  }
  else {
    int v13 = a1;
  }
  int v14 = -v12 < a1;
  if (v13 > 21) {
    sub_1BBA1CD18(a2, v13, v14);
  }
  else {
    sub_1BBA1CC5C(a2, ~v14, v13 + v14);
  }
  int v15 = a3[3];
  if (a1 >= -v15) {
    int v16 = -v15;
  }
  else {
    int v16 = a1;
  }
  int v17 = -v15 < a1;
  if (v16 > 21)
  {
    return sub_1BBA1CD18(a2, v16, v17);
  }
  else
  {
    int v18 = ~v17;
    int v19 = v16 + v17;
    return sub_1BBA1CC5C(a2, v18, v19);
  }
}

int8x16_t *sub_1BBAD2C10(int8x16_t *result, const double *a2, int a3, int a4, int a5, int a6)
{
  int8x16_t v6 = result[255];
  int8x16_t v7 = result[256];
  int v8 = a2;
  int16x8_t v9 = (int16x8_t)vld1q_dup_f64(v8++);
  int8x16_t v10 = (int8x16_t)vld1q_dup_s16((const __int16 *)v8);
  v54.val[0] = vqtbl1q_s8(v6, v10);
  v54.val[1] = vqtbl1q_s8(v7, v10);
  int8x16_t v11 = vqtbl2q_s8(v54, (int8x16_t)xmmword_1BBB6FA20);
  int v12 = (void *)result[85].i64[0];
  uint64_t v13 = v12[69];
  if (a4 && (a4 & 7) == 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v12[78] + v12[76] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    int8x16_t v16 = *(int8x16_t *)((char *)&unk_1BBB834F6 - (a5 >> 2) + 16);
    uint64_t v17 = (uint64_t)a2 - 12 * v13 + 24;
    v18.i64[0] = -1;
    v18.i64[1] = -1;
    v19.i64[0] = 0x3000300030003;
    v19.i64[1] = 0x3000300030003;
    v20.i64[0] = 0x101010101010101;
    v20.i64[1] = 0x101010101010101;
    do
    {
      int16x8_t v21 = *(int16x8_t *)(v17 - 24);
      int16x8_t v22 = *(int16x8_t *)(v17 - 12);
      int16x8_t v23 = *(int16x8_t *)(v17 + 12);
      int32x4_t v24 = (int32x4_t)vzip2q_s16(v21, v22);
      int16x8_t v25 = (int16x8_t)vzip1q_s64((int64x2_t)v21, (int64x2_t)v22);
      int16x8_t v26 = (int16x8_t)vzip1q_s64(*(int64x2_t *)v17, (int64x2_t)v23);
      int8x16_t v27 = (int8x16_t)vzip1q_s32(v24, (int32x4_t)vzip2q_s16(*(int16x8_t *)v17, v23));
      v55.val[0] = vqtbl1q_s8(v6, v27);
      v55.val[1] = vqtbl1q_s8(v7, v27);
      int8x16_t v28 = (int8x16_t)vceqq_s16((int16x8_t)vceqq_s8(vqtbl2q_s8(v55, (int8x16_t)xmmword_1BBB6FA20), v11), v18);
      uint8x16_t v29 = (uint8x16_t)vandq_s8(vaddq_s8(vandq_s8(vuzp1q_s8(v28, v28), vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v25, v9)), v19), (int8x16_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v26, v9)), v19))), (int8x16_t)xmmword_1BBB6FA30)), v20), v16);
      int v30 = (const float *)(v15 + v14);
      uint8x16_t v31 = (uint8x16_t)vld1q_dup_f32(v30);
      *(_DWORD *)(v15 + v14) = vmaxq_u8(v29, v31).u32[0];
      int8x16_t v16 = vextq_s8(v16, v16, 4uLL);
      v14 += 4;
      v17 += 48;
    }
    while (v14 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    uint64_t v32 = 0;
    uint64_t v33 = v12[80] + v12[77] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    int8x16_t v34 = *(int8x16_t *)((char *)&unk_1BBB834F6 - (a6 >> 2) + 16);
    int v35 = (int16x8_t *)((char *)a2 - 12);
    uint64_t v36 = 36 * v13;
    uint64_t v37 = 3 * v13;
    uint64_t v38 = 48 * v13;
    uint64_t v39 = 8 * v37;
    uint64_t v40 = 4 * v37;
    v41.i64[0] = -1;
    v41.i64[1] = -1;
    v42.i64[0] = 0x3000300030003;
    v42.i64[1] = 0x3000300030003;
    v43.i64[0] = 0x101010101010101;
    v43.i64[1] = 0x101010101010101;
    do
    {
      int16x8_t v44 = *(int16x8_t *)((char *)v35 + v40);
      int16x8_t v45 = *(int16x8_t *)((char *)v35 + v39);
      int16x8_t v46 = *(int16x8_t *)((char *)v35 + v36);
      int32x4_t v47 = (int32x4_t)vzip2q_s16(v45, v46);
      int16x8_t v48 = (int16x8_t)vzip1q_s64((int64x2_t)v45, (int64x2_t)v46);
      int8x16_t v49 = (int8x16_t)vzip1q_s32((int32x4_t)vzip2q_s16(*v35, v44), v47);
      v56.val[0] = vqtbl1q_s8(v6, v49);
      v56.val[1] = vqtbl1q_s8(v7, v49);
      int8x16_t v50 = (int8x16_t)vceqq_s16((int16x8_t)vceqq_s8(vqtbl2q_s8(v56, (int8x16_t)xmmword_1BBB6FA20), v11), v41);
      uint8x16_t v51 = (uint8x16_t)vandq_s8(vaddq_s8(vandq_s8(vuzp1q_s8(v50, v50), vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16((int16x8_t)vzip1q_s64(*(int64x2_t *)v35, (int64x2_t)v44), v9)), v42), (int8x16_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v48, v9)), v42))), (int8x16_t)xmmword_1BBB6FA30)), v43), v34);
      unsigned int v52 = (const float *)(v33 + v32);
      uint8x16_t v53 = (uint8x16_t)vld1q_dup_f32(v52);
      *(_DWORD *)(v33 + v32) = vmaxq_u8(v51, v53).u32[0];
      int8x16_t v34 = vextq_s8(v34, v34, 4uLL);
      v32 += 4;
      int v35 = (int16x8_t *)((char *)v35 + v38);
    }
    while (v32 < (uint64_t)a6 >> 2);
  }
  return result;
}

__int32 *sub_1BBAD2E30(__int32 *result, const float *a2, int a3, int a4, int a5, int a6)
{
  int16x8_t v6 = (int16x8_t)vld1q_dup_f32(a2);
  int8x16_t v7 = (void *)*((void *)result + 170);
  uint64_t v8 = v7[69];
  if (a4 && (a4 & 7) == 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v7[78] + v7[76] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    int8x16_t v11 = *(int8x16_t *)((char *)&unk_1BBB834F6 - (a5 >> 2) + 16);
    int v12 = (__int32 *)&a2[-3 * v8 + 6];
    v13.i64[0] = 0x3000300030003;
    v13.i64[1] = 0x3000300030003;
    v14.i64[0] = 0x101010101010101;
    v14.i64[1] = 0x101010101010101;
    do
    {
      uint64_t result = v12 + 3;
      v15.i32[0] = *(v12 - 6);
      v15.i32[1] = *(v12 - 3);
      v15.i32[2] = *v12;
      v15.i32[3] = v12[3];
      int8x16_t v16 = (const float *)(v10 + v9);
      uint8x16_t v17 = (uint8x16_t)vld1q_dup_f32(v16);
      *(_DWORD *)(v10 + v9) = vmaxq_u8((uint8x16_t)vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v15, v6)), v13)), (int8x16_t)xmmword_1BBB6FA30), v14), v11), v17).u32[0];
      int8x16_t v11 = vextq_s8(v11, v11, 4uLL);
      v9 += 4;
      v12 += 12;
    }
    while (v9 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    uint64_t v18 = 0;
    uint64_t v19 = v7[80] + v7[77] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    int8x16_t v20 = *(int8x16_t *)((char *)&unk_1BBB834F6 - (a6 >> 2) + 16);
    int16x8_t v21 = (__int32 *)(a2 - 3);
    uint64_t v22 = 9 * v8;
    uint64_t v23 = 3 * v8;
    uint64_t v24 = 48 * v8;
    uint64_t v25 = 2 * v23;
    uint64_t v26 = v23;
    v27.i64[0] = 0x3000300030003;
    v27.i64[1] = 0x3000300030003;
    v28.i64[0] = 0x101010101010101;
    v28.i64[1] = 0x101010101010101;
    do
    {
      uint64_t result = &v21[v22];
      v29.i32[0] = *v21;
      v29.i32[1] = v21[v26];
      v29.i32[2] = v21[v25];
      v29.i32[3] = v21[v22];
      int v30 = (const float *)(v19 + v18);
      uint8x16_t v31 = (uint8x16_t)vld1q_dup_f32(v30);
      *(_DWORD *)(v19 + v18) = vmaxq_u8((uint8x16_t)vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v29, v6)), v27)), (int8x16_t)xmmword_1BBB6FA30), v28), v20), v31).u32[0];
      int8x16_t v20 = vextq_s8(v20, v20, 4uLL);
      v18 += 4;
      int16x8_t v21 = (__int32 *)((char *)v21 + v24);
    }
    while (v18 < (uint64_t)a6 >> 2);
  }
  return result;
}

int8x16_t *sub_1BBAD2FBC(int8x16_t *result, const float *a2, int a3, int a4, int a5, int a6)
{
  int8x16_t v6 = result[255];
  int16x8_t v7 = (int16x8_t)vld1q_dup_f32(a2);
  uint64_t v8 = (const char *)(a2 + 2);
  int8x16_t v9 = vld1q_dup_s8(v8);
  int8x16_t v10 = vqtbl1q_s8(v6, v9);
  int8x16_t v11 = (void *)result[85].i64[0];
  uint64_t v12 = v11[69];
  if (a4 && (a4 & 7) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v11[78] + v11[76] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    int8x16_t v15 = *(int8x16_t *)((char *)&unk_1BBB834F6 - (a5 >> 2) + 16);
    uint64_t v16 = (uint64_t)&a2[-3 * v12 + 6];
    v17.i64[0] = 0x3000300030003;
    v17.i64[1] = 0x3000300030003;
    v18.i64[0] = 0x101010101010101;
    v18.i64[1] = 0x101010101010101;
    do
    {
      int32x4_t v19 = *(int32x4_t *)(v16 - 24);
      int32x4_t v20 = *(int32x4_t *)(v16 - 12);
      int32x4_t v21 = *(int32x4_t *)(v16 + 12);
      int16x8_t v22 = (int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32(v19, v20), (int64x2_t)vzip1q_s32(*(int32x4_t *)v16, v21));
      int8x16_t v23 = vceqq_s8(vqtbl1q_s8(v6, (int8x16_t)vzip1q_s16((int16x8_t)vzip2q_s8((int8x16_t)v19, (int8x16_t)v20), (int16x8_t)vzip2q_s8(*(int8x16_t *)v16, (int8x16_t)v21))), v10);
      uint64_t v24 = (const float *)(v14 + v13);
      uint8x16_t v25 = (uint8x16_t)vld1q_dup_f32(v24);
      *(_DWORD *)(v14 + v13) = vmaxq_u8((uint8x16_t)vandq_s8(vsubq_s8(vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v22, v7)), v17)), (int8x16_t)xmmword_1BBB6FA30), v18), v23), vmvnq_s8(v23)), v15), v25).u32[0];
      int8x16_t v15 = vextq_s8(v15, v15, 4uLL);
      v13 += 4;
      v16 += 48;
    }
    while (v13 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v11[80] + v11[77] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    int8x16_t v28 = *(int8x16_t *)((char *)&unk_1BBB834F6 - (a6 >> 2) + 16);
    int16x8_t v29 = (int8x16_t *)(a2 - 3);
    uint64_t v30 = 36 * v12;
    uint64_t v31 = 3 * v12;
    uint64_t v32 = 48 * v12;
    uint64_t v33 = 8 * v31;
    uint64_t v34 = 4 * v31;
    v35.i64[0] = 0x3000300030003;
    v35.i64[1] = 0x3000300030003;
    v36.i64[0] = 0x101010101010101;
    v36.i64[1] = 0x101010101010101;
    do
    {
      int32x4_t v37 = *(int32x4_t *)((char *)v29 + v34);
      int32x4_t v38 = *(int32x4_t *)((char *)v29 + v33);
      int32x4_t v39 = *(int32x4_t *)((char *)v29 + v30);
      int8x16_t v40 = vceqq_s8(vqtbl1q_s8(v6, (int8x16_t)vzip1q_s16((int16x8_t)vzip2q_s8(*v29, (int8x16_t)v37), (int16x8_t)vzip2q_s8((int8x16_t)v38, (int8x16_t)v39))), v10);
      uint8x16_t v41 = (uint8x16_t)vandq_s8(vsubq_s8(vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16((int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32(*(int32x4_t *)v29, v37), (int64x2_t)vzip1q_s32(v38, v39)), v7)), v35)), (int8x16_t)xmmword_1BBB6FA30), v36), v40), vmvnq_s8(v40)), v28);
      uint16x8_t v42 = (const float *)(v27 + v26);
      uint8x16_t v43 = (uint8x16_t)vld1q_dup_f32(v42);
      *(_DWORD *)(v27 + v26) = vmaxq_u8(v41, v43).u32[0];
      int8x16_t v28 = vextq_s8(v28, v28, 4uLL);
      v26 += 4;
      int16x8_t v29 = (int8x16_t *)((char *)v29 + v32);
    }
    while (v26 < (uint64_t)a6 >> 2);
  }
  return result;
}

uint64_t sub_1BBAD3198(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a5 >= 8)
  {
    unsigned int v5 = a5 >> 3;
    int16x8_t v6 = vdupq_n_s16(a3);
    int16x8_t v142 = vshrq_n_s16(v6, 3uLL);
    int8x16_t v143 = (int8x16_t)vdupq_n_s16(a4);
    int16x8_t v141 = vshrq_n_s16(vsraq_n_s16(v6, v6, 1uLL), 3uLL);
    int16x8_t v7 = (const char *)(result - 4 * a2);
    int8x16_t v8 = (int8x16_t)xmmword_1BBB6FA40;
    int16x8_t v136 = v6;
    while (1)
    {
      int8x16_t v9 = v7;
      int8x8x2_t v151 = vld2_s8(v9);
      int8x16_t v10 = &v9[a2];
      int8x8x2_t v154 = vld2_s8(v10);
      int8x16_t v11 = &v10[a2];
      int8x8x2_t v157 = vld2_s8(v11);
      uint64_t v12 = &v11[a2];
      int16x8_t v13 = (int16x8_t)vshll_n_u8((uint8x8_t)v157.val[0], 1uLL);
      int8x8x2_t v158 = vld2_s8(v12);
      uint64_t v14 = &v12[a2];
      int16x8_t v15 = (int16x8_t)vaddl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v154.val[0]);
      int16x8_t v16 = vabdq_s16(v15, v13);
      int8x8x2_t v156 = vld2_s8(v14);
      uint16x8_t v17 = &v14[a2];
      int8x8x2_t v155 = vld2_s8(v17);
      int8x16_t v18 = &v17[a2];
      int16x8_t v19 = (int16x8_t)vshll_n_u8((uint8x8_t)v155.val[0], 1uLL);
      int8x8x2_t v153 = vld2_s8(v18);
      int32x4_t v20 = &v18[a2];
      int16x8_t v21 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]);
      int8x8x2_t v152 = vld2_s8(v20);
      int16x8_t v22 = vabdq_s16(v21, v19);
      int16x8_t v23 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v16), v15, v13), v8);
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v22), v21, v19), v8);
      int8x16_t v25 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v24, v23));
      int16x8_t v26 = vrshrq_n_s16(v6, 3uLL);
      uint8x8_t v148 = (uint8x8_t)v151.val[1];
      uint8x8_t v146 = (uint8x8_t)v152.val[1];
      int16x8_t v144 = v26;
      if (!vaddlvq_u16((uint16x8_t)v25)) {
        break;
      }
      int16x8_t v27 = (int16x8_t)vmovl_u8((uint8x8_t)v157.val[0]);
      int16x8_t v28 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[0]);
      int16x8_t v29 = (int16x8_t)vmovl_u8((uint8x8_t)v155.val[0]);
      int16x8_t v30 = (int16x8_t)vmovl_u8((uint8x8_t)v156.val[0]);
      int16x8_t v31 = (int16x8_t)vandq_s8(v143, v25);
      int16x8_t v32 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v31, vshlq_n_s16(v31, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v156.val[0])), vandq_s8((int8x16_t)vcgtq_s16(v26, vaddq_s16(v22, v16)), (int8x16_t)vcgtq_s16(v142, (int16x8_t)vabal_u8(vabdl_u8((uint8x8_t)v152.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v151.val[0], (uint8x8_t)v158.val[0]))));
      int16x8_t v33 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v32), (int8x16_t)v32), v8);
      int8x16_t v34 = (int8x16_t)vcgtq_s16(v141, v23);
      int8x16_t v35 = (int8x16_t)vcgtq_s16(v141, v24);
      if (!vaddlvq_u16((uint16x8_t)v33))
      {
        int16x8_t v64 = (int16x8_t)vbicq_s8((int8x16_t)v31, (int8x16_t)v33);
        v65.i64[0] = 0x2000200020002;
        v65.i64[1] = 0x2000200020002;
        int16x8_t v66 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v156.val[0], (uint8x8_t)0x909090909090909), (uint8x8_t)v158.val[0], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v157.val[0]), v65), 4uLL);
        v65.i64[0] = 0xA000A000A000ALL;
        v65.i64[1] = 0xA000A000A000ALL;
        int8x16_t v67 = (int8x16_t)vcgtq_s16(vmulq_s16(v64, v65), vabsq_s16(v66));
        int16x8_t v68 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v66, v67), v64), vnegq_s16(v64));
        int16x8_t v69 = vsubq_s16(v30, v68);
        int16x8_t v70 = vshrq_n_s16(v64, 1uLL);
        int16x8_t v71 = vnegq_s16(v70);
        int16x8_t v72 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v158.val[0]), (uint8x8_t)v157.val[0]), v68), v70), v71), vandq_s8(v34, v67)), v27);
        int16x8_t v73 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v155.val[0]), v68), v70), v71), vandq_s8(v35, v67));
        int8x8_t v60 = vqmovun_s16(v72);
        int8x8_t v150 = vqmovun_s16(vaddq_s16(v68, v28));
        int8x8_t v61 = vqmovun_s16(v69);
        int8x8_t v62 = vqmovun_s16(vaddq_s16(v73, v29));
        int8x8_t v59 = v154.val[0];
        goto LABEL_8;
      }
      int8x8_t v36 = vmovn_s16(v31);
      uint8x8_t v37 = (uint8x8_t)vadd_s8(v36, v36);
      int16x8_t v38 = (int16x8_t)vaddl_u8((uint8x8_t)v154.val[0], (uint8x8_t)v151.val[0]);
      int16x8_t v39 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[0], (uint8x8_t)v154.val[0]);
      uint8x8_t v40 = (uint8x8_t)v152.val[0];
      int16x8_t v41 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v158.val[0]);
      int16x8_t v42 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[0], (uint8x8_t)v155.val[0]);
      int8x16_t v43 = v35;
      int8x8_t v149 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v41, v27), vhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v155.val[0])), 2uLL), vqadd_u8((uint8x8_t)v158.val[0], v37)), vqsub_u8((uint8x8_t)v158.val[0], v37));
      int8x8_t v44 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v41, v29), vhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v157.val[0])), 2uLL), vqadd_u8((uint8x8_t)v156.val[0], v37)), vqsub_u8((uint8x8_t)v156.val[0], v37));
      int8x8_t v45 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v41, v39), 2uLL), vqadd_u8((uint8x8_t)v157.val[0], v37)), vqsub_u8((uint8x8_t)v157.val[0], v37));
      int8x8_t v46 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v42, v41), 2uLL), vqadd_u8((uint8x8_t)v155.val[0], v37)), vqsub_u8((uint8x8_t)v155.val[0], v37));
      *(uint8x8_t *)v38.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v38, (int16x8_t)vhaddq_u16((uint16x8_t)v39, (uint16x8_t)v41)), 2uLL), vqadd_u8((uint8x8_t)v154.val[0], v37)), vqsub_u8((uint8x8_t)v154.val[0], v37));
      int8x8_t v47 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(v40, (uint8x8_t)v153.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v42, (uint16x8_t)v41)), 2uLL), vqadd_u8((uint8x8_t)v153.val[0], v37)), vqsub_u8((uint8x8_t)v153.val[0], v37));
      int16x8_t v48 = (int16x8_t)vbicq_s8((int8x16_t)v31, (int8x16_t)v33);
      v49.i64[0] = 0x9000900090009;
      v49.i64[1] = 0x9000900090009;
      int16x8_t v50 = vmulq_s16((int16x8_t)vsubl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v158.val[0]), v49);
      v49.i64[0] = 0x2000200020002;
      v49.i64[1] = 0x2000200020002;
      int16x8_t v51 = vrshrq_n_s16(vmlaq_s16(v50, (int16x8_t)vsubl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v157.val[0]), v49), 4uLL);
      v49.i64[0] = 0xA000A000A000ALL;
      v49.i64[1] = 0xA000A000A000ALL;
      int8x16_t v52 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v49), vabsq_s16(v51));
      int16x8_t v53 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v51, v52), v48), vnegq_s16(v48));
      int16x8_t v54 = vshrq_n_s16(v48, 1uLL);
      int16x8_t v55 = vnegq_s16(v54);
      int8x16_t v56 = (int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v158.val[0]), (uint8x8_t)v157.val[0]), v53), v54), v55);
      int16x8_t v57 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v155.val[0]), v53), v54), v55), vandq_s8(v43, v52)), v29);
      *(int8x8_t *)v55.i8 = vqmovun_s16(vsubq_s16(v30, v53));
      int8x8_t v58 = vqmovn_s16(v33);
      int8x8_t v59 = vbsl_s8(v58, *(int8x8_t *)v38.i8, v154.val[0]);
      int8x8_t v60 = vbsl_s8(v58, v45, vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8(v56, vandq_s8(v34, v52)), v27)));
      int8x8_t v150 = vbsl_s8(v58, v149, vqmovun_s16(vaddq_s16(v53, v28)));
      int8x8_t v61 = vbsl_s8(v58, v44, *(int8x8_t *)v55.i8);
      int8x16_t v8 = (int8x16_t)xmmword_1BBB6FA40;
      int16x8_t v6 = v136;
      int8x8_t v62 = vbsl_s8(v58, v46, vqmovun_s16(v57));
      int8x8_t v63 = vbsl_s8(v58, v47, v153.val[0]);
LABEL_9:
      int16x8_t v74 = (int16x8_t)vaddl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v154.val[1]);
      int16x8_t v75 = (int16x8_t)vshll_n_u8((uint8x8_t)v157.val[1], 1uLL);
      int16x8_t v76 = vabdq_s16(v74, v75);
      int16x8_t v77 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]);
      int16x8_t v78 = (int16x8_t)vshll_n_u8((uint8x8_t)v155.val[1], 1uLL);
      int16x8_t v79 = vabdq_s16(v77, v78);
      int16x8_t v80 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v76), v74, v75), v8);
      int16x8_t v81 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v79), v77, v78), v8);
      int8x16_t v82 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v81, v80));
      if (vaddlvq_u16((uint16x8_t)v82))
      {
        int16x8_t v138 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[1]);
        int16x8_t v139 = (int16x8_t)vmovl_u8((uint8x8_t)v157.val[1]);
        int16x8_t v140 = (int16x8_t)vmovl_u8((uint8x8_t)v155.val[1]);
        int16x8_t v137 = (int16x8_t)vmovl_u8((uint8x8_t)v156.val[1]);
        int16x8_t v83 = (int16x8_t)vandq_s8(v143, v82);
        int16x8_t v84 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v83, vshlq_n_s16(v83, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v156.val[1])), vandq_s8((int8x16_t)vcgtq_s16(v144, vaddq_s16(v79, v76)), (int8x16_t)vcgtq_s16(v142, (int16x8_t)vabal_u8(vabdl_u8(v146, (uint8x8_t)v156.val[1]), (uint8x8_t)v151.val[1], (uint8x8_t)v158.val[1]))));
        int16x8_t v85 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v84), (int8x16_t)v84), v8);
        int8x16_t v86 = (int8x16_t)vcgtq_s16(v141, v80);
        int8x16_t v87 = (int8x16_t)vcgtq_s16(v141, v81);
        if (vaddlvq_u16((uint16x8_t)v85))
        {
          int8x8_t v88 = vmovn_s16(v83);
          uint8x8_t v89 = (uint8x8_t)vadd_s8(v88, v88);
          int8x16_t v145 = v86;
          int16x8_t v90 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[1], (uint8x8_t)v154.val[1]);
          int16x8_t v91 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v158.val[1]);
          int16x8_t v92 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[1], (uint8x8_t)v155.val[1]);
          int8x16_t v93 = v87;
          int8x8_t v147 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v91, v139), vhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v155.val[1])), 2uLL), vqadd_u8((uint8x8_t)v158.val[1], v89)), vqsub_u8((uint8x8_t)v158.val[1], v89));
          int8x8_t v94 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v91, v140), vhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v157.val[1])), 2uLL), vqadd_u8((uint8x8_t)v156.val[1], v89)), vqsub_u8((uint8x8_t)v156.val[1], v89));
          int8x8_t v95 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v91, v90), 2uLL), vqadd_u8((uint8x8_t)v157.val[1], v89)), vqsub_u8((uint8x8_t)v157.val[1], v89));
          int8x8_t v96 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v92, v91), 2uLL), vqadd_u8((uint8x8_t)v155.val[1], v89)), vqsub_u8((uint8x8_t)v155.val[1], v89));
          *(uint8x8_t *)v90.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v154.val[1], v148), (int16x8_t)vhaddq_u16((uint16x8_t)v90, (uint16x8_t)v91)), 2uLL), vqadd_u8((uint8x8_t)v154.val[1], v89)), vqsub_u8((uint8x8_t)v154.val[1], v89));
          uint8x8_t v97 = vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(v146, (uint8x8_t)v153.val[1]), (int16x8_t)vhaddq_u16((uint16x8_t)v92, (uint16x8_t)v91)), 2uLL), vqadd_u8((uint8x8_t)v153.val[1], v89));
          int8x16_t v8 = (int8x16_t)xmmword_1BBB6FA40;
          int16x8_t v6 = v136;
          int8x8_t v98 = (int8x8_t)vmax_u8(v97, vqsub_u8((uint8x8_t)v153.val[1], v89));
          int16x8_t v99 = (int16x8_t)vsubl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v158.val[1]);
          int16x8_t v100 = (int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v158.val[1]), (uint8x8_t)v157.val[1]);
          int16x8_t v101 = (int16x8_t)vsubl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v157.val[1]);
          v102.i64[0] = 0x9000900090009;
          v102.i64[1] = 0x9000900090009;
          v103.i64[0] = 0x2000200020002;
          v103.i64[1] = 0x2000200020002;
          uint8x8_t v104 = vrhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]);
          int16x8_t v105 = (int16x8_t)vbicq_s8((int8x16_t)v83, (int8x16_t)v85);
          int16x8_t v106 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v99, v102), v101, v103), 4uLL);
          int16x8_t v107 = (int16x8_t)vsubl_u8(v104, (uint8x8_t)v155.val[1]);
          v108.i64[0] = 0xA000A000A000ALL;
          v108.i64[1] = 0xA000A000A000ALL;
          int8x16_t v109 = (int8x16_t)vcgtq_s16(vmulq_s16(v105, v108), vabsq_s16(v106));
          int16x8_t v110 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v106, v109), v105), vnegq_s16(v105));
          int16x8_t v111 = vshrq_n_s16(v105, 1uLL);
          int16x8_t v112 = vnegq_s16(v111);
          int16x8_t v113 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(v100, v110), v111), v112), vandq_s8(v145, v109)), v139);
          int16x8_t v114 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(v107, v110), v111), v112), vandq_s8(v93, v109)), v140);
          int8x8_t v115 = vqmovn_s16(v85);
          v154.val[1] = vbsl_s8(v115, *(int8x8_t *)v90.i8, v154.val[1]);
          v153.val[1] = vbsl_s8(v115, v98, v153.val[1]);
          v157.val[1] = vbsl_s8(v115, v95, vqmovun_s16(v113));
          v158.val[1] = vbsl_s8(v115, v147, vqmovun_s16(vaddq_s16(v110, v138)));
          v156.val[1] = vbsl_s8(v115, v94, vqmovun_s16(vsubq_s16(v137, v110)));
          v155.val[1] = vbsl_s8(v115, v96, vqmovun_s16(v114));
        }
        else
        {
          int16x8_t v116 = (int16x8_t)vbicq_s8((int8x16_t)v83, (int8x16_t)v85);
          v117.i64[0] = 0x2000200020002;
          v117.i64[1] = 0x2000200020002;
          int16x8_t v118 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v156.val[1], (uint8x8_t)0x909090909090909), (uint8x8_t)v158.val[1], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v157.val[1]), v117), 4uLL);
          v117.i64[0] = 0xA000A000A000ALL;
          v117.i64[1] = 0xA000A000A000ALL;
          int8x16_t v119 = (int8x16_t)vcgtq_s16(vmulq_s16(v116, v117), vabsq_s16(v118));
          int16x8_t v120 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v118, v119), v116), vnegq_s16(v116));
          int16x8_t v121 = vshrq_n_s16(v116, 1uLL);
          int16x8_t v122 = vnegq_s16(v121);
          int16x8_t v123 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v158.val[1]), (uint8x8_t)v157.val[1]), v120), v121), v122), vandq_s8(v86, v119)), v139);
          int16x8_t v124 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]), (uint8x8_t)v155.val[1]), v120), v121), v122), vandq_s8(v87, v119));
          v157.val[1] = vqmovun_s16(v123);
          v158.val[1] = vqmovun_s16(vaddq_s16(v120, v138));
          v156.val[1] = vqmovun_s16(vsubq_s16(v137, v120));
          v155.val[1] = vqmovun_s16(vaddq_s16(v124, v140));
        }
      }
      v159.val[0] = v150;
      uint64_t v125 = (char *)&v20[-6 * a2];
      int8x8_t v126 = v154.val[1];
      vst2_s8(v125, *(int8x8x2_t *)v59.i8);
      int64x2_t v127 = &v125[a2];
      int8x8_t v128 = v157.val[1];
      vst2_s8(v127, *(int8x8x2_t *)v60.i8);
      int64x2_t v129 = &v127[a2];
      v159.val[1] = v158.val[1];
      vst2_s8(v129, v159);
      int64x2_t v130 = &v129[a2];
      int8x8_t v131 = v156.val[1];
      vst2_s8(v130, *(int8x8x2_t *)v61.i8);
      int64x2_t v132 = &v130[a2];
      int8x8_t v133 = v155.val[1];
      vst2_s8(v132, *(int8x8x2_t *)v62.i8);
      int64x2_t v134 = &v132[a2];
      int8x8_t v135 = v153.val[1];
      vst2_s8(v134, *(int8x8x2_t *)v63.i8);
      v7 += 16;
      if (!--v5) {
        return result;
      }
    }
    int8x8_t v59 = v154.val[0];
    int8x8_t v60 = v157.val[0];
    int8x8_t v150 = v158.val[0];
    int8x8_t v61 = v156.val[0];
    int8x8_t v62 = v155.val[0];
LABEL_8:
    int8x8_t v63 = v153.val[0];
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1BBAD3928(uint64_t result, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4, int a5)
{
  if (a5 >= 8)
  {
    unsigned int v5 = a5 >> 3;
    int16x8_t v6 = vdupq_n_s16(a3);
    uint64_t v7 = a2;
    int16x8_t v110 = (int16x8_t)vshrq_n_u16((uint16x8_t)v6, 3uLL);
    int8x16_t v111 = vqtbl1q_s8((int8x16_t)vdupq_n_s16(a4 | (a4 << 8)), (int8x16_t)xmmword_1BBB6FA50);
    int16x8_t v109 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v6, (uint16x8_t)v6, 1uLL), 3uLL);
    int8x16_t v8 = (const __int16 *)(result - 8 * a2);
    int16x8_t v9 = 0uLL;
    v10.i64[0] = 0xFC00FC00FC00FC00;
    v10.i64[1] = 0xFC00FC00FC00FC00;
    int16x8_t v108 = v6;
    while (1)
    {
      int8x16_t v11 = v8;
      int16x8x2_t v126 = vld2q_s16(v11);
      uint64_t v12 = &v11[v7];
      int16x8x2_t v124 = vld2q_s16(v12);
      int16x8_t v13 = &v12[v7];
      int16x8x2_t v125 = vld2q_s16(v13);
      uint64_t v14 = &v13[v7];
      int16x8x2_t v122 = vld2q_s16(v14);
      int16x8_t v15 = &v14[v7];
      int16x8x2_t v119 = vld2q_s16(v15);
      int16x8_t v16 = &v15[v7];
      int16x8x2_t v121 = vld2q_s16(v16);
      uint16x8_t v17 = &v16[v7];
      int16x8x2_t v118 = vld2q_s16(v17);
      int8x16_t v18 = &v17[v7];
      int16x8x2_t v116 = vld2q_s16(v18);
      int16x8_t v19 = vabsq_s16(vsubq_s16(vaddq_s16(v122.val[0], v124.val[0]), vaddq_s16(v125.val[0], v125.val[0])));
      int16x8_t v20 = vabsq_s16(vsubq_s16(vaddq_s16(v118.val[0], v119.val[0]), vaddq_s16(v121.val[0], v121.val[0])));
      int16x8_t v21 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v19), v19), (int8x16_t)xmmword_1BBB6FA40);
      int16x8_t v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v20), v20), (int8x16_t)xmmword_1BBB6FA40);
      int8x16_t v23 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v22, v21));
      int16x8_t v24 = vrshrq_n_s16(v6, 3uLL);
      if (!vaddlvq_u16((uint16x8_t)v23)) {
        break;
      }
      int16x8_t v25 = (int16x8_t)vandq_s8(v23, v111);
      int16x8_t v26 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v25, vshlq_n_s16(v25, 2uLL)), vabdq_s16(v122.val[0], v119.val[0])), vandq_s8((int8x16_t)vcgtq_s16(v24, vaddq_s16(v20, v19)), (int8x16_t)vcgtq_s16(v110, vabaq_s16(vabdq_s16(v116.val[0], v119.val[0]), v126.val[0], v122.val[0]))));
      int8x16_t v27 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v26), (int8x16_t)v26), (int8x16_t)xmmword_1BBB6FA40);
      int8x16_t v28 = (int8x16_t)vcgtq_s16(v109, v21);
      int8x16_t v29 = (int8x16_t)vcgtq_s16(v109, v22);
      if (!vaddlvq_u16((uint16x8_t)v27))
      {
        v54.i64[0] = 0x9000900090009;
        v54.i64[1] = 0x9000900090009;
        int16x8_t v55 = vmulq_s16(vsubq_s16(v119.val[0], v122.val[0]), v54);
        v54.i64[0] = 0x2000200020002;
        v54.i64[1] = 0x2000200020002;
        int16x8_t v56 = vrshrq_n_s16(vmlaq_s16(v55, vsubq_s16(v121.val[0], v125.val[0]), v54), 4uLL);
        v54.i64[0] = 0xA000A000A000ALL;
        v54.i64[1] = 0xA000A000A000ALL;
        int8x16_t v57 = (int8x16_t)vcgtq_s16(vmulq_s16(v25, v54), vabsq_s16(v56));
        int16x8_t v58 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v56, v57), v25), vnegq_s16(v25));
        int16x8_t v59 = vshrq_n_s16(v25, 1uLL);
        int16x8_t v60 = vnegq_s16(v59);
        int16x8_t v49 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(vrhaddq_s16(v124.val[0], v122.val[0]), v125.val[0]), v58), v59), v60), vandq_s8(v28, v57)), v125.val[0]);
        int16x8_t v52 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(vrhaddq_s16(v118.val[0], v119.val[0]), v121.val[0]), v58), v59), v60), vandq_s8(v29, v57)), v121.val[0]);
        int16x8_t v50 = vaddq_s16(v58, v122.val[0]);
        int16x8_t v51 = vsubq_s16(v119.val[0], v58);
        goto LABEL_8;
      }
      int16x8_t v30 = vaddq_s16(v25, v25);
      int16x8_t v31 = vaddq_s16(v125.val[0], v124.val[0]);
      int16x8_t v32 = vaddq_s16(v119.val[0], v122.val[0]);
      int16x8_t v33 = vaddq_s16(v118.val[0], v121.val[0]);
      int8x16_t v106 = v29;
      int8x16_t v112 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v32, v125.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v124.val[0], (uint16x8_t)v121.val[0])), 2uLL), vaddq_s16(v30, v122.val[0])), vsubq_s16(v122.val[0], v30));
      int8x16_t v34 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v32, v121.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v118.val[0], (uint16x8_t)v125.val[0])), 2uLL), vaddq_s16(v30, v119.val[0])), vsubq_s16(v119.val[0], v30));
      int8x16_t v35 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v32, v31), 2uLL), vaddq_s16(v30, v125.val[0])), vsubq_s16(v125.val[0], v30));
      int8x16_t v36 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v33, v32), 2uLL), vaddq_s16(v30, v121.val[0])), vsubq_s16(v121.val[0], v30));
      int8x16_t v37 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v124.val[0], v126.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v31, (uint16x8_t)v32)), 2uLL), vaddq_s16(v30, v124.val[0])), vsubq_s16(v124.val[0], v30));
      int8x16_t v38 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v116.val[0], v118.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v33, (uint16x8_t)v32)), 2uLL), vaddq_s16(v30, v118.val[0])), vsubq_s16(v118.val[0], v30));
      int16x8_t v39 = (int16x8_t)vbicq_s8((int8x16_t)v25, v27);
      v40.i64[0] = 0x9000900090009;
      v40.i64[1] = 0x9000900090009;
      int16x8_t v41 = vmulq_s16(vsubq_s16(v119.val[0], v122.val[0]), v40);
      v40.i64[0] = 0x2000200020002;
      v40.i64[1] = 0x2000200020002;
      int16x8_t v42 = vrshrq_n_s16(vmlaq_s16(v41, vsubq_s16(v121.val[0], v125.val[0]), v40), 4uLL);
      v40.i64[0] = 0xA000A000A000ALL;
      v40.i64[1] = 0xA000A000A000ALL;
      int8x16_t v43 = (int8x16_t)vcgtq_s16(vmulq_s16(v39, v40), vabsq_s16(v42));
      int16x8_t v44 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v42, v43), v39), vnegq_s16(v39));
      int16x8_t v45 = vshrq_n_s16(v39, 1uLL);
      int16x8_t v46 = vnegq_s16(v45);
      int16x8_t v47 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(vrhaddq_s16(v124.val[0], v122.val[0]), v125.val[0]), v44), v45), v46), vandq_s8(v28, v43));
      int16x8_t v48 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(vrhaddq_s16(v118.val[0], v119.val[0]), v121.val[0]), v44), v45), v46), vandq_s8(v106, v43));
      int16x8_t v6 = v108;
      int16x8_t v49 = (int16x8_t)vbslq_s8(v27, v35, (int8x16_t)vaddq_s16(v47, v125.val[0]));
      int16x8_t v50 = (int16x8_t)vbslq_s8(v27, v112, (int8x16_t)vaddq_s16(v44, v122.val[0]));
      int16x8_t v51 = (int16x8_t)vbslq_s8(v27, v34, (int8x16_t)vsubq_s16(v119.val[0], v44));
      int16x8_t v52 = (int16x8_t)vbslq_s8(v27, v36, (int8x16_t)vaddq_s16(v48, v121.val[0]));
      int16x8_t v113 = (int16x8_t)vbslq_s8(v27, v37, (int8x16_t)v124.val[0]);
      int16x8_t v53 = (int16x8_t)vbslq_s8(v27, v38, (int8x16_t)v118.val[0]);
LABEL_9:
      int16x8_t v61 = vabsq_s16(vsubq_s16(vaddq_s16(v122.val[1], v124.val[1]), vaddq_s16(v125.val[1], v125.val[1])));
      int16x8_t v62 = vabsq_s16(vsubq_s16(vaddq_s16(v118.val[1], v119.val[1]), vaddq_s16(v121.val[1], v121.val[1])));
      int16x8_t v63 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v61), v61), (int8x16_t)xmmword_1BBB6FA40);
      int16x8_t v64 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v62), v62), (int8x16_t)xmmword_1BBB6FA40);
      int8x16_t v65 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v64, v63));
      if (vaddlvq_u16((uint16x8_t)v65))
      {
        int16x8_t v66 = (int16x8_t)vandq_s8(v65, v111);
        int16x8_t v67 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v66, vshlq_n_s16(v66, 2uLL)), vabdq_s16(v122.val[1], v119.val[1])), vandq_s8((int8x16_t)vcgtq_s16(v24, vaddq_s16(v62, v61)), (int8x16_t)vcgtq_s16(v110, vabaq_s16(vabdq_s16(v116.val[1], v119.val[1]), v126.val[1], v122.val[1]))));
        int8x16_t v68 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v67), (int8x16_t)v67), (int8x16_t)xmmword_1BBB6FA40);
        int8x16_t v69 = (int8x16_t)vcgtq_s16(v109, v63);
        int8x16_t v70 = (int8x16_t)vcgtq_s16(v109, v64);
        if (vaddlvq_u16((uint16x8_t)v68))
        {
          int16x8_t v71 = vaddq_s16(v66, v66);
          int16x8_t v72 = vaddq_s16(v124.val[1], v126.val[1]);
          int16x8_t v73 = vaddq_s16(v125.val[1], v124.val[1]);
          int16x8_t v74 = vaddq_s16(v119.val[1], v122.val[1]);
          int16x8_t v105 = v52;
          int16x8_t v107 = v53;
          int16x8_t v75 = vaddq_s16(v118.val[1], v121.val[1]);
          int16x8_t v76 = vaddq_s16(v116.val[1], v118.val[1]);
          int8x16_t v104 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v74, v125.val[1]), (int16x8_t)vhaddq_u16((uint16x8_t)v124.val[1], (uint16x8_t)v121.val[1])), 2uLL), vaddq_s16(v71, v122.val[1])), vsubq_s16(v122.val[1], v71));
          int8x16_t v77 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v74, v121.val[1]), (int16x8_t)vhaddq_u16((uint16x8_t)v118.val[1], (uint16x8_t)v125.val[1])), 2uLL), vaddq_s16(v71, v119.val[1])), vsubq_s16(v119.val[1], v71));
          int8x16_t v78 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v74, v73), 2uLL), vaddq_s16(v71, v125.val[1])), vsubq_s16(v125.val[1], v71));
          int8x16_t v79 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v75, v74), 2uLL), vaddq_s16(v71, v121.val[1])), vsubq_s16(v121.val[1], v71));
          int8x16_t v80 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v72, (int16x8_t)vhaddq_u16((uint16x8_t)v73, (uint16x8_t)v74)), 2uLL), vaddq_s16(v71, v124.val[1])), vsubq_s16(v124.val[1], v71));
          int8x16_t v81 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v76, (int16x8_t)vhaddq_u16((uint16x8_t)v75, (uint16x8_t)v74)), 2uLL), vaddq_s16(v71, v118.val[1])), vsubq_s16(v118.val[1], v71));
          int16x8_t v82 = (int16x8_t)vbicq_s8((int8x16_t)v66, v68);
          v76.i64[0] = 0x9000900090009;
          v76.i64[1] = 0x9000900090009;
          int16x8_t v83 = vmulq_s16(vsubq_s16(v119.val[1], v122.val[1]), v76);
          v76.i64[0] = 0x2000200020002;
          v76.i64[1] = 0x2000200020002;
          int16x8_t v84 = vrshrq_n_s16(vmlaq_s16(v83, vsubq_s16(v121.val[1], v125.val[1]), v76), 4uLL);
          v76.i64[0] = 0xA000A000A000ALL;
          v76.i64[1] = 0xA000A000A000ALL;
          int8x16_t v85 = (int8x16_t)vcgtq_s16(vmulq_s16(v82, v76), vabsq_s16(v84));
          int16x8_t v86 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v84, v85), v82), vnegq_s16(v82));
          int16x8_t v87 = vshrq_n_s16(v82, 1uLL);
          int16x8_t v88 = vnegq_s16(v87);
          int8x16_t v89 = (int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(vrhaddq_s16(v124.val[1], v122.val[1]), v125.val[1]), v86), v87), v88);
          int16x8_t v9 = 0uLL;
          int8x16_t v90 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(vrhaddq_s16(v118.val[1], v119.val[1]), v121.val[1]), v86), v87), v88), vandq_s8(v70, v85)), v121.val[1]);
          v124.val[1] = (int16x8_t)vbslq_s8(v68, v80, (int8x16_t)v124.val[1]);
          v125.val[1] = (int16x8_t)vbslq_s8(v68, v78, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v89, vandq_s8(v69, v85)), v125.val[1]));
          int16x8_t v52 = v105;
          int16x8_t v53 = v107;
          v122.val[1] = (int16x8_t)vbslq_s8(v68, v104, (int8x16_t)vaddq_s16(v86, v122.val[1]));
          v119.val[1] = (int16x8_t)vbslq_s8(v68, v77, (int8x16_t)vsubq_s16(v119.val[1], v86));
          v121.val[1] = (int16x8_t)vbslq_s8(v68, v79, v90);
          int16x8_t v6 = v108;
          v118.val[1] = (int16x8_t)vbslq_s8(v68, v81, (int8x16_t)v118.val[1]);
        }
        else
        {
          v91.i64[0] = 0x9000900090009;
          v91.i64[1] = 0x9000900090009;
          int16x8_t v92 = vmulq_s16(vsubq_s16(v119.val[1], v122.val[1]), v91);
          v91.i64[0] = 0x2000200020002;
          v91.i64[1] = 0x2000200020002;
          int16x8_t v93 = vrshrq_n_s16(vmlaq_s16(v92, vsubq_s16(v121.val[1], v125.val[1]), v91), 4uLL);
          v91.i64[0] = 0xA000A000A000ALL;
          v91.i64[1] = 0xA000A000A000ALL;
          int8x16_t v94 = (int8x16_t)vcgtq_s16(vmulq_s16(v66, v91), vabsq_s16(v93));
          int16x8_t v95 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v93, v94), v66), vnegq_s16(v66));
          int16x8_t v96 = vshrq_n_s16(v66, 1uLL);
          int16x8_t v97 = vnegq_s16(v96);
          v125.val[1] = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(vrhaddq_s16(v124.val[1], v122.val[1]), v125.val[1]), v95), v96), v97), vandq_s8(v69, v94)), v125.val[1]);
          v121.val[1] = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(vrhaddq_s16(v118.val[1], v119.val[1]), v121.val[1]), v95), v96), v97), vandq_s8(v70, v94)), v121.val[1]);
          v122.val[1] = vaddq_s16(v95, v122.val[1]);
          v119.val[1] = vsubq_s16(v119.val[1], v95);
        }
      }
      v114.val[0] = vminq_s16(vmaxq_s16(v113, v9), v10);
      v114.val[1] = vminq_s16(vmaxq_s16(v124.val[1], v9), v10);
      v115.val[0] = vminq_s16(vmaxq_s16(v49, v9), v10);
      v115.val[1] = vminq_s16(vmaxq_s16(v125.val[1], v9), v10);
      v117.val[0] = vminq_s16(vmaxq_s16(v50, v9), v10);
      v117.val[1] = vminq_s16(vmaxq_s16(v122.val[1], v9), v10);
      v123.val[0] = vminq_s16(vmaxq_s16(v51, v9), v10);
      v123.val[1] = vminq_s16(vmaxq_s16(v119.val[1], v9), v10);
      v120.val[0] = vminq_s16(vmaxq_s16(v52, v9), v10);
      v120.val[1] = vminq_s16(vmaxq_s16(v121.val[1], v9), v10);
      int8x8_t v98 = (__int16 *)&v18[-6 * a2];
      vst2q_s16(v98, v114);
      int16x8_t v99 = &v98[v7];
      vst2q_s16(v99, v115);
      int16x8_t v100 = &v99[v7];
      v114.val[0] = vminq_s16(vmaxq_s16(v53, v9), v10);
      vst2q_s16(v100, v117);
      int16x8_t v101 = &v100[v7];
      vst2q_s16(v101, v123);
      int16x8_t v102 = &v101[v7];
      v114.val[1] = vminq_s16(vmaxq_s16(v118.val[1], v9), v10);
      vst2q_s16(v102, v120);
      int16x8_t v103 = &v102[v7];
      vst2q_s16(v103, v114);
      v8 += 16;
      if (!--v5) {
        return result;
      }
    }
    int16x8_t v49 = v125.val[0];
    int16x8_t v50 = v122.val[0];
    int16x8_t v51 = v119.val[0];
    int16x8_t v52 = v121.val[0];
LABEL_8:
    int16x8_t v53 = v118.val[0];
    int16x8_t v113 = v124.val[0];
    goto LABEL_9;
  }
  return result;
}

int16x8_t *sub_1BBAD4050(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    unint64_t v4 = 0;
    unsigned int v5 = result + 1;
    uint64_t v6 = 2 * a2;
    v7.i64[0] = 0xFC00FC00FC00FC00;
    v7.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      uint64_t v8 = *(void *)(a3 + v4);
      if (v8)
      {
        int16x8_t v9 = (int16x8_t *)((char *)v5 - 2 * a2);
        int16x8_t v10 = v9[-1];
        int16x8_t v11 = v5[-1];
        uint64_t result = (int16x8_t *)((char *)v5 + v6);
        int16x8_t v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v8), (int8x16_t)xmmword_1BBB6FA60);
        int16x8_t v13 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v11, v10), vsubq_s16(*(int16x8_t *)((char *)v5 - 4 * a2 - 16), *(int16x8_t *)((char *)&v5[-1] + v6)), 2uLL), 1uLL), v12), vnegq_s16(v12));
        int16x8_t v14 = (int16x8_t)vsqaddq_u16((uint16x8_t)v10, v13);
        int16x8_t v15 = vsubq_s16(v11, v13);
        int16x8_t v16 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(HIDWORD(v8)), (int8x16_t)xmmword_1BBB6FA60);
        int16x8_t v17 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*v5, *v9), vsubq_s16(*(int16x8_t *)((char *)v5 - 4 * a2), *(int16x8_t *)((char *)v5 + 2 * a2)), 2uLL), 1uLL), v16), vnegq_s16(v16));
        int16x8_t v18 = (int16x8_t)vsqaddq_u16(*(uint16x8_t *)v9, v17);
        int16x8_t v19 = vmaxq_s16(vsubq_s16(*v5, v17), (int16x8_t)0);
        v9[-1] = vminq_s16(v14, v7);
        v5[-1] = vminq_s16(vmaxq_s16(v15, (int16x8_t)0), v7);
        *int16x8_t v9 = vminq_s16(v18, v7);
        int16x8_t *v5 = vminq_s16(v19, v7);
      }
      v4 += 8;
      v5 += 2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1BBAD413C(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    uint64_t v8 = 8 * a2;
    uint64_t v9 = 12 * a2;
    uint64_t v10 = 10 * a2;
    v11.i64[0] = 0xFC00FC00FC00FC00;
    v11.i64[1] = 0xFC00FC00FC00FC00;
    uint64_t v12 = 14 * a2;
    do
    {
      uint64_t v13 = *(void *)(a3 + v4);
      if (v13)
      {
        int32x4_t v14 = *(int32x4_t *)(result - 8);
        int32x4_t v15 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v16 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v17 = *(int32x4_t *)(result + v7 - 8);
        int32x4_t v18 = *(int32x4_t *)(result + v8 - 8);
        int32x4_t v19 = *(int32x4_t *)(result + v10 - 8);
        int32x4_t v20 = *(int32x4_t *)(result + v9 - 8);
        int32x4_t v21 = *(int32x4_t *)(result + v12 - 8);
        int64x2_t v22 = (int64x2_t)vtrn1q_s32(v14, v15);
        int64x2_t v23 = (int64x2_t)vtrn2q_s32(v14, v15);
        int64x2_t v24 = (int64x2_t)vtrn1q_s32(v16, v17);
        int64x2_t v25 = (int64x2_t)vtrn2q_s32(v16, v17);
        int16x8_t v26 = (int16x8_t)vzip1q_s64(v22, v24);
        int16x8_t v27 = (int16x8_t)vzip2q_s64(v22, v24);
        int16x8_t v28 = (int16x8_t)vzip1q_s64(v23, v25);
        int16x8_t v29 = (int16x8_t)vzip2q_s64(v23, v25);
        int64x2_t v30 = (int64x2_t)vtrn1q_s32(v18, v19);
        int64x2_t v31 = (int64x2_t)vtrn2q_s32(v18, v19);
        int64x2_t v32 = (int64x2_t)vtrn1q_s32(v20, v21);
        int64x2_t v33 = (int64x2_t)vtrn2q_s32(v20, v21);
        int16x8_t v34 = (int16x8_t)vzip1q_s64(v30, v32);
        int16x8_t v35 = (int16x8_t)vzip2q_s64(v30, v32);
        int16x8_t v36 = (int16x8_t)vzip1q_s64(v31, v33);
        int16x8_t v37 = (int16x8_t)vzip2q_s64(v31, v33);
        int16x8_t v38 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v13), (int8x16_t)xmmword_1BBB6FA60);
        int16x8_t v39 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v27, v28), vsubq_s16(v26, v29), 2uLL), 1uLL), v38), vnegq_s16(v38));
        int16x8_t v40 = (int16x8_t)vsqaddq_u16((uint16x8_t)v28, v39);
        int16x8_t v41 = vsubq_s16(v27, v39);
        int16x8_t v42 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(HIDWORD(v13)), (int8x16_t)xmmword_1BBB6FA60);
        int16x8_t v43 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v35, v36), vsubq_s16(v34, v37), 2uLL), 1uLL), v42), vnegq_s16(v42));
        int16x8_t v44 = (int16x8_t)vsqaddq_u16((uint16x8_t)v36, v43);
        int16x8_t v45 = vsubq_s16(v35, v43);
        int32x4_t v46 = (int32x4_t)vminq_s16(v40, v11);
        int32x4_t v47 = (int32x4_t)vminq_s16(v44, v11);
        int32x4_t v48 = (int32x4_t)vminq_s16(vmaxq_s16(v41, (int16x8_t)0), v11);
        int32x4_t v49 = vzip1q_s32(v46, v48);
        *(void *)(result - 4) = v49.i64[0];
        *(void *)(result + v5 - 4) = v49.i64[1];
        int32x4_t v50 = (int32x4_t)vminq_s16(vmaxq_s16(v45, (int16x8_t)0), v11);
        int32x4_t v51 = vzip2q_s32(v46, v48);
        int32x4_t v52 = vzip1q_s32(v47, v50);
        *(void *)(result + v6 - 4) = v51.i64[0];
        *(void *)(result + v7 - 4) = v51.i64[1];
        int32x4_t v53 = vzip2q_s32(v47, v50);
        *(void *)(result + v8 - 4) = v52.i64[0];
        *(void *)(result + v10 - 4) = v52.i64[1];
        *(void *)(result + v9 - 4) = v53.i64[0];
        *(void *)(result + v12 - 4) = v53.i64[1];
      }
      v4 += 8;
      result += 16 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1BBAD42E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = a5 >> 3;
    uint64_t v26 = result + 2 * a2;
    uint64_t v27 = result - 2 * a2;
    uint64_t v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    uint64_t v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xFC00FC00FC00FC00;
    v32.i64[1] = 0xFC00FC00FC00FC00;
    _X5 = result;
    uint64_t v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        int16x8_t v35 = *(int16x8_t *)(v30 + 16 * v24);
        int16x8_t v36 = *(int16x8_t *)(v28 + 16 * v24);
        int16x8_t v37 = *(int16x8_t *)(v27 + 16 * v24);
        int16x8_t v38 = *(int16x8_t *)(result + 16 * v24);
        int16x8_t v39 = *(int16x8_t *)(v26 + 16 * v24);
        int16x8_t v40 = *(int16x8_t *)(v34 + 16 * v24);
        int16x8_t v41 = vdupq_n_s16(*(unsigned __int8 *)(a3 + v24));
        int16x8_t v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        int16x8_t v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        int16x8_t v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1BBB6FA40);
        int16x8_t v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1BBB6FA40);
        int8x16_t v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          int16x8_t v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          int16x8_t v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          int16x8_t v49 = (int16x8_t)vandq_s8(v46, vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1BBB6FA50));
          int16x8_t v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          int8x16_t v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1BBB6FA40);
          int16x8_t v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          int8x16_t v53 = (int8x16_t)vcgtq_s16(v52, v44);
          int8x16_t v54 = (int8x16_t)vcgtq_s16(v52, v45);
          int16x8_t v55 = vsubq_s16(v38, v37);
          int16x8_t v56 = vsubq_s16(v39, v36);
          int16x8_t v57 = vrhaddq_s16(v35, v37);
          int16x8_t v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            int16x8_t v59 = vaddq_s16(v49, v49);
            int16x8_t v60 = vaddq_s16(v36, v35);
            int16x8_t v61 = vaddq_s16(v38, v37);
            int16x8_t v62 = vaddq_s16(v40, v39);
            int16x8_t v63 = vaddq_s16(v48, v40);
            int8x16_t v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            int8x16_t v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            int8x16_t v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            int8x16_t v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            int8x16_t v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            int8x16_t v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            int16x8_t v70 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v61.i64[0] = 0x9000900090009;
            v61.i64[1] = 0x9000900090009;
            int16x8_t v71 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v61), v56, v29), 4uLL);
            int8x16_t v72 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v31), vabsq_s16(v71));
            int16x8_t v73 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v71, v72), v70), vnegq_s16(v70));
            int16x8_t v74 = vshrq_n_s16(v70, 1uLL);
            int16x8_t v75 = vnegq_s16(v74);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v73), v74), v75), vandq_s8(v53, v72)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vaddq_s16(v73, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vsubq_s16(v38, v73)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v73), v74), v75), vandq_s8(v54, v72)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v69, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v76.i64[0] = 0x9000900090009;
            v76.i64[1] = 0x9000900090009;
            int16x8_t v77 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v76), v56, v29), 4uLL);
            int8x16_t v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v31), vabsq_s16(v77));
            int16x8_t v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v49), vnegq_s16(v49));
            int16x8_t v80 = vshrq_n_s16(v49, 1uLL);
            int16x8_t v81 = vnegq_s16(v80);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v79), v80), v81), vandq_s8(v53, v78)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v79, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v79), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v79), v80), v81), vandq_s8(v54, v78)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1BBAD4754(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  if (a5 >= 8)
  {
    uint64_t v5 = a5 >> 3;
    uint64_t v6 = 2 * a2;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = 6 * a2;
    uint64_t v9 = 8 * a2;
    uint64_t v10 = 12 * a2;
    uint64_t v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xFC00FC00FC00FC00;
    v15.i64[1] = 0xFC00FC00FC00FC00;
    uint64_t v16 = 14 * a2;
    do
    {
      unsigned int v18 = *a4++;
      unsigned int v17 = v18;
      if (v18)
      {
        int16x8_t v19 = *(int16x8_t *)(result - 8);
        int16x8_t v20 = *(int16x8_t *)(result + v6 - 8);
        int16x8_t v21 = *(int16x8_t *)(result + v7 - 8);
        int16x8_t v22 = *(int16x8_t *)(result + v8 - 8);
        int16x8_t v23 = *(int16x8_t *)(result + v9 - 8);
        int16x8_t v24 = *(int16x8_t *)(result + v11 - 8);
        int16x8_t v25 = *(int16x8_t *)(result + v10 - 8);
        int16x8_t v26 = *(int16x8_t *)(result + v16 - 8);
        int32x4_t v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        int32x4_t v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        int32x4_t v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        int32x4_t v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        int64x2_t v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        int64x2_t v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        int64x2_t v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        int64x2_t v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        int32x4_t v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        int32x4_t v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        int32x4_t v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        int32x4_t v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        int64x2_t v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        int64x2_t v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        int64x2_t v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        int64x2_t v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        int16x8_t v43 = (int16x8_t)vzip2q_s64(v31, v39);
        int16x8_t v44 = (int16x8_t)vzip1q_s64(v33, v41);
        int16x8_t v45 = (int16x8_t)vzip2q_s64(v33, v41);
        int16x8_t v46 = (int16x8_t)vzip1q_s64(v32, v40);
        int16x8_t v47 = (int16x8_t)vzip2q_s64(v32, v40);
        int16x8_t v48 = (int16x8_t)vzip1q_s64(v34, v42);
        int16x8_t v49 = vdupq_n_s16(*a3);
        int16x8_t v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        int16x8_t v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        int16x8_t v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1BBB6FA40);
        int16x8_t v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1BBB6FA40);
        int8x16_t v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          int16x8_t v55 = (int16x8_t)vzip1q_s64(v31, v39);
          int16x8_t v56 = (int16x8_t)vzip2q_s64(v34, v42);
          int16x8_t v57 = (int16x8_t)vandq_s8(v54, vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1BBB6FA50));
          int16x8_t v58 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v57, vshlq_n_s16(v57, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          int8x16_t v59 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v58), (int8x16_t)v58), (int8x16_t)xmmword_1BBB6FA40);
          int16x8_t v60 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          int8x16_t v61 = (int8x16_t)vcgtq_s16(v60, v52);
          int8x16_t v62 = (int8x16_t)vcgtq_s16(v60, v53);
          int16x8_t v63 = vsubq_s16(v43, v48);
          int16x8_t v64 = vsubq_s16(v45, v46);
          int16x8_t v65 = vrhaddq_s16(v44, v48);
          int16x8_t v66 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v59))
          {
            int16x8_t v67 = vaddq_s16(v57, v57);
            int16x8_t v68 = vaddq_s16(v44, v46);
            int16x8_t v69 = vaddq_s16(v48, v43);
            int16x8_t v70 = vaddq_s16(v45, v47);
            int8x16_t v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v67, v48)), vsubq_s16(v48, v67));
            int8x16_t v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v67, v43)), vsubq_s16(v43, v67));
            int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v68, v69), 2uLL), vaddq_s16(v67, v46)), vsubq_s16(v46, v67));
            int8x16_t v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v70, v69), 2uLL), vaddq_s16(v67, v45)), vsubq_s16(v45, v67));
            int8x16_t v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v68, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v44)), vsubq_s16(v44, v67));
            int8x16_t v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v70, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v47)), vsubq_s16(v47, v67));
            int16x8_t v77 = (int16x8_t)vbicq_s8((int8x16_t)v57, v59);
            int16x8_t v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            int8x16_t v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v77, v14), vabsq_s16(v78));
            int16x8_t v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v77), vnegq_s16(v77));
            int16x8_t v81 = vshrq_n_s16(v77, 1uLL);
            int16x8_t v82 = vnegq_s16(v81);
            int16x8_t v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v75, (int8x16_t)v44), (int16x8_t)0), v15);
            int16x8_t v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v80), v81), v82), vandq_s8(v61, v79)), v46)), (int16x8_t)0), v15);
            int16x8_t v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v71, (int8x16_t)vaddq_s16(v80, v48)), (int16x8_t)0), v15);
            int16x8_t v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v72, (int8x16_t)vsubq_s16(v43, v80)), (int16x8_t)0), v15);
            int16x8_t v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v80), v81), v82), vandq_s8(v62, v79)), v45)), (int16x8_t)0), v15);
            int16x8_t v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v76, (int8x16_t)v47), (int16x8_t)0), v15);
            int32x4_t v89 = (int32x4_t)vtrn1q_s16(v55, v83);
            int32x4_t v90 = (int32x4_t)vtrn2q_s16(v55, v83);
            int32x4_t v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            int32x4_t v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            int64x2_t v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            int64x2_t v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            int64x2_t v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            int64x2_t v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            int32x4_t v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            int32x4_t v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            int32x4_t v99 = (int32x4_t)vtrn1q_s16(v88, v56);
            int32x4_t v100 = (int32x4_t)vtrn2q_s16(v88, v56);
            int64x2_t v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            int64x2_t v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            int64x2_t v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            int64x2_t v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            int16x8_t v105 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            int8x16_t v106 = (int8x16_t)vcgtq_s16(vmulq_s16(v57, v14), vabsq_s16(v105));
            int16x8_t v107 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v105, v106), v57), vnegq_s16(v57));
            int16x8_t v108 = vshrq_n_s16(v57, 1uLL);
            int16x8_t v109 = vnegq_s16(v108);
            int16x8_t v110 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v107), v108), v109), vandq_s8(v61, v106)), v46), (int16x8_t)0), v15);
            int16x8_t v111 = vminq_s16(vmaxq_s16(vaddq_s16(v107, v48), (int16x8_t)0), v15);
            int16x8_t v112 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v107), (int16x8_t)0), v15);
            int16x8_t v113 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v107), v108), v109), vandq_s8(v62, v106)), v45), (int16x8_t)0), v15);
            int32x4_t v114 = (int32x4_t)vtrn1q_s16(v110, v111);
            int32x4_t v115 = (int32x4_t)vtrn2q_s16(v110, v111);
            int32x4_t v116 = (int32x4_t)vtrn1q_s16(v112, v113);
            int32x4_t v117 = (int32x4_t)vtrn2q_s16(v112, v113);
            int32x4_t v118 = vtrn1q_s32(v114, v116);
            int32x4_t v119 = vtrn2q_s32(v114, v116);
            int32x4_t v120 = vtrn1q_s32(v115, v117);
            int32x4_t v121 = vtrn2q_s32(v115, v117);
            *(void *)(result - 4) = v118.i64[0];
            *(void *)(result + v6 - 4) = v120.i64[0];
            *(void *)(result + v7 - 4) = v119.i64[0];
            *(void *)(result + v8 - 4) = v121.i64[0];
            *(void *)(result + v9 - 4) = v118.i64[1];
            *(void *)(result + v11 - 4) = v120.i64[1];
            *(void *)(result + v10 - 4) = v119.i64[1];
            *(void *)(result + v16 - 4) = v121.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1BBAD4C5C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a5 >= 8)
  {
    unsigned int v5 = a5 >> 3;
    int16x8_t v6 = vdupq_n_s16(a3);
    int16x8_t v170 = vshrq_n_s16(v6, 3uLL);
    int8x16_t v171 = (int8x16_t)vdupq_n_s16(a4);
    int16x8_t v169 = vshrq_n_s16(vsraq_n_s16(v6, v6, 1uLL), 3uLL);
    uint64_t v7 = (int8x16_t *)(result - 8);
    int8x16_t v8 = (int8x16_t)xmmword_1BBB6FA40;
    int16x8_t v166 = v6;
    do
    {
      int8x16_t v9 = *(int8x16_t *)((char *)v7 + a2);
      int8x16_t v10 = *(int8x16_t *)((char *)v7 + 2 * a2);
      int8x16_t v11 = *(int8x16_t *)((char *)v7 + 3 * a2);
      int8x16_t v12 = *(int8x16_t *)((char *)v7 + 4 * a2);
      int8x16_t v13 = *(int8x16_t *)((char *)v7 + 5 * a2);
      int8x16_t v14 = *(int8x16_t *)((char *)v7 + 6 * a2);
      int8x16_t v15 = *(int8x16_t *)((char *)v7 + 7 * a2);
      int16x8_t v16 = (int16x8_t)vtrn1q_s8(*v7, v9);
      int16x8_t v17 = (int16x8_t)vtrn1q_s8(v10, v11);
      int16x8_t v18 = (int16x8_t)vtrn1q_s8(v12, v13);
      int16x8_t v19 = (int16x8_t)vtrn1q_s8(v14, v15);
      int32x4_t v20 = (int32x4_t)vtrn1q_s16(v16, v17);
      int32x4_t v21 = (int32x4_t)vtrn2q_s16(v16, v17);
      int32x4_t v22 = (int32x4_t)vtrn1q_s16(v18, v19);
      int32x4_t v23 = (int32x4_t)vtrn2q_s16(v18, v19);
      int8x16_t v24 = (int8x16_t)vtrn1q_s32(v20, v22);
      int16x8_t v25 = (int16x8_t)vtrn2q_s32(v20, v22);
      int8x16_t v26 = (int8x16_t)vtrn1q_s32(v21, v23);
      int8x16_t v27 = (int8x16_t)vtrn2q_s32(v21, v23);
      uint8x8_t v28 = (uint8x8_t)vextq_s8(v24, v24, 8uLL).u64[0];
      uint8x8_t v29 = (uint8x8_t)vextq_s8(v26, v26, 8uLL).u64[0];
      int8x8_t v30 = (int8x8_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      uint8x8_t v31 = (uint8x8_t)vextq_s8(v27, v27, 8uLL).u64[0];
      int16x8_t v32 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8);
      int16x8_t v33 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v25.i8, 1uLL);
      int16x8_t v34 = vabdq_s16(v32, v33);
      int16x8_t v35 = (int16x8_t)vaddl_high_u8((uint8x16_t)v25, (uint8x16_t)v24);
      int16x8_t v36 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v26, 1uLL);
      int16x8_t v37 = vabdq_s16(v35, v36);
      int16x8_t v38 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v34), v32, v33), v8);
      int16x8_t v39 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v37), v35, v36), v8);
      int8x16_t v40 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v39, v38));
      int16x8_t v41 = vrshrq_n_s16(v6, 3uLL);
      uint8x8_t v172 = v31;
      if (vaddlvq_u16((uint16x8_t)v40))
      {
        int16x8_t v42 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v25.i8);
        uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)v27.i8);
        int16x8_t v44 = (int16x8_t)vmovl_u8(v29);
        int16x8_t v45 = (int16x8_t)vmovl_u8(v28);
        int16x8_t v46 = (int16x8_t)vandq_s8(v171, v40);
        int16x8_t v47 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v46, vshlq_n_s16(v46, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v27.i8, v28)), vandq_s8((int8x16_t)vcgtq_s16(v41, vaddq_s16(v37, v34)), (int8x16_t)vcgtq_s16(v170, (int16x8_t)vabal_u8(vabdl_u8(v31, v28), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v27.i8))));
        int16x8_t v48 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v47), (int8x16_t)v47), v8);
        int8x16_t v49 = (int8x16_t)vcgtq_s16(v169, v38);
        int8x16_t v50 = (int8x16_t)vcgtq_s16(v169, v39);
        if (vaddlvq_u16((uint16x8_t)v48))
        {
          int8x8_t v51 = vmovn_s16(v46);
          uint8x8_t v52 = (uint8x8_t)vadd_s8(v51, v51);
          int16x8_t v162 = (int16x8_t)v43;
          int16x8_t v53 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v25.i8);
          int16x8_t v54 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v27.i8, v28);
          int16x8_t v55 = (int16x8_t)vaddl_high_u8((uint8x16_t)v26, (uint8x16_t)v25);
          int16x8_t v167 = v41;
          int8x8_t v164 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v54, v42), vhadd_u8(*(uint8x8_t *)v26.i8, v29)), 2uLL), vqadd_u8(*(uint8x8_t *)v27.i8, v52)), vqsub_u8(*(uint8x8_t *)v27.i8, v52));
          int8x8_t v56 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v54, v44), vhadd_u8((uint8x8_t)v30, *(uint8x8_t *)v25.i8)), 2uLL), vqadd_u8(v28, v52)), vqsub_u8(v28, v52));
          int8x8_t v57 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v53, v54), 2uLL), vqadd_u8(*(uint8x8_t *)v25.i8, v52)), vqsub_u8(*(uint8x8_t *)v25.i8, v52));
          int8x8_t v58 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v55, v54), 2uLL), vqadd_u8(v29, v52)), vqsub_u8(v29, v52));
          int8x8_t v59 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v26.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v53, (uint16x8_t)v54)), 2uLL), vqadd_u8(*(uint8x8_t *)v26.i8, v52)), vqsub_u8(*(uint8x8_t *)v26.i8, v52));
          int8x8_t v60 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v25, (uint8x16_t)v27), (int16x8_t)vhaddq_u16((uint16x8_t)v55, (uint16x8_t)v54)), 2uLL), vqadd_u8((uint8x8_t)v30, v52)), vqsub_u8((uint8x8_t)v30, v52));
          int16x8_t v61 = (int16x8_t)vbicq_s8((int8x16_t)v46, (int8x16_t)v48);
          v62.i64[0] = 0x9000900090009;
          v62.i64[1] = 0x9000900090009;
          int16x8_t v63 = vmulq_s16((int16x8_t)vsubl_u8(v28, *(uint8x8_t *)v27.i8), v62);
          v62.i64[0] = 0x2000200020002;
          v62.i64[1] = 0x2000200020002;
          int16x8_t v64 = vrshrq_n_s16(vmlaq_s16(v63, (int16x8_t)vsubl_u8(v29, *(uint8x8_t *)v25.i8), v62), 4uLL);
          v62.i64[0] = 0xA000A000A000ALL;
          v62.i64[1] = 0xA000A000A000ALL;
          int8x16_t v65 = (int8x16_t)vcgtq_s16(vmulq_s16(v61, v62), vabsq_s16(v64));
          int16x8_t v66 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v64, v65), v61), vnegq_s16(v61));
          int16x8_t v67 = vshrq_n_s16(v61, 1uLL);
          int16x8_t v68 = vnegq_s16(v67);
          int16x8_t v25 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8), *(uint8x8_t *)v25.i8), v66), v67), v68), vandq_s8(v49, v65)), v42);
          int16x8_t v69 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v30, v28), v29), v66), v67), v68), vandq_s8(v50, v65)), v44);
          int8x16_t v8 = (int8x16_t)xmmword_1BBB6FA40;
          int8x8_t v70 = vqmovn_s16(v48);
          *(int8x8_t *)v26.i8 = vbsl_s8(v70, v59, *(int8x8_t *)v26.i8);
          *(int8x8_t *)v25.i8 = vbsl_s8(v70, v57, vqmovun_s16(v25));
          *(int8x8_t *)v27.i8 = vbsl_s8(v70, v164, vqmovun_s16(vaddq_s16(v66, v162)));
          uint8x8_t v28 = (uint8x8_t)vbsl_s8(v70, v56, vqmovun_s16(vsubq_s16(v45, v66)));
          int16x8_t v6 = v166;
          int16x8_t v41 = v167;
          uint8x8_t v29 = (uint8x8_t)vbsl_s8(v70, v58, vqmovun_s16(v69));
          int8x8_t v30 = vbsl_s8(v70, v60, v30);
        }
        else
        {
          int16x8_t v71 = (int16x8_t)vbicq_s8((int8x16_t)v46, (int8x16_t)v48);
          int16x8_t v72 = (int16x8_t)v43;
          v73.i64[0] = 0x2000200020002;
          v73.i64[1] = 0x2000200020002;
          int16x8_t v74 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v28, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v27.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v29, *(uint8x8_t *)v25.i8), v73), 4uLL);
          v73.i64[0] = 0xA000A000A000ALL;
          v73.i64[1] = 0xA000A000A000ALL;
          int8x16_t v75 = (int8x16_t)vcgtq_s16(vmulq_s16(v71, v73), vabsq_s16(v74));
          int16x8_t v76 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v74, v75), v71), vnegq_s16(v71));
          int16x8_t v77 = vaddq_s16(v76, v72);
          int16x8_t v78 = vshrq_n_s16(v71, 1uLL);
          int16x8_t v79 = vnegq_s16(v78);
          int16x8_t v80 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8), *(uint8x8_t *)v25.i8), v76), v78), v79), vandq_s8(v49, v75)), v42);
          int16x8_t v81 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v30, v28), v29), v76), v78), v79), vandq_s8(v50, v75)), v44);
          *(int8x8_t *)v25.i8 = vqmovun_s16(v80);
          *(int8x8_t *)v27.i8 = vqmovun_s16(v77);
          uint8x8_t v28 = (uint8x8_t)vqmovun_s16(vsubq_s16(v45, v76));
          uint8x8_t v29 = (uint8x8_t)vqmovun_s16(v81);
        }
      }
      int16x8_t v82 = (int16x8_t)vtrn2q_s8(*v7, v9);
      int16x8_t v83 = (int16x8_t)vtrn2q_s8(v10, v11);
      int16x8_t v84 = (int16x8_t)vtrn2q_s8(v12, v13);
      int16x8_t v85 = (int16x8_t)vtrn2q_s8(v14, v15);
      int32x4_t v86 = (int32x4_t)vtrn1q_s16(v82, v83);
      int32x4_t v87 = (int32x4_t)vtrn2q_s16(v82, v83);
      int32x4_t v88 = (int32x4_t)vtrn1q_s16(v84, v85);
      int32x4_t v89 = (int32x4_t)vtrn2q_s16(v84, v85);
      int8x16_t v90 = (int8x16_t)vtrn1q_s32(v86, v88);
      int8x16_t v91 = (int8x16_t)vtrn2q_s32(v86, v88);
      int8x16_t v92 = (int8x16_t)vtrn1q_s32(v87, v89);
      int8x16_t v93 = (int8x16_t)vtrn2q_s32(v87, v89);
      uint8x8_t v94 = (uint8x8_t)vextq_s8(v90, v90, 8uLL).u64[0];
      uint8x8_t v95 = (uint8x8_t)vextq_s8(v92, v92, 8uLL).u64[0];
      int8x8_t v96 = (int8x8_t)vextq_s8(v91, v91, 8uLL).u64[0];
      uint8x8_t v97 = (uint8x8_t)vextq_s8(v93, v93, 8uLL).u64[0];
      int16x8_t v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8);
      int16x8_t v99 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v91.i8, 1uLL);
      int16x8_t v100 = vabdq_s16(v98, v99);
      int16x8_t v101 = (int16x8_t)vaddl_high_u8((uint8x16_t)v91, (uint8x16_t)v90);
      int16x8_t v102 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v92, 1uLL);
      int16x8_t v103 = vabdq_s16(v101, v102);
      int16x8_t v104 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v100), v98, v99), v8);
      int16x8_t v105 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v103), v101, v102), v8);
      int8x16_t v106 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v105, v104));
      if (vaddlvq_u16((uint16x8_t)v106))
      {
        int8x8_t v168 = v30;
        int16x8_t v107 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v91.i8);
        int16x8_t v108 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v93.i8);
        int16x8_t v109 = (int16x8_t)vmovl_u8(v95);
        int16x8_t v110 = (int16x8_t)vmovl_u8(v94);
        int16x8_t v111 = (int16x8_t)vandq_s8(v171, v106);
        int16x8_t v112 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v111, vshlq_n_s16(v111, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v93.i8, v94)), vandq_s8((int8x16_t)vcgtq_s16(v41, vaddq_s16(v103, v100)), (int8x16_t)vcgtq_s16(v170, (int16x8_t)vabal_u8(vabdl_u8(v97, v94), *(uint8x8_t *)v90.i8, *(uint8x8_t *)v93.i8))));
        int16x8_t v113 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v112), (int8x16_t)v112), v8);
        int8x16_t v114 = (int8x16_t)vcgtq_s16(v169, v104);
        int8x16_t v115 = (int8x16_t)vcgtq_s16(v169, v105);
        if (vaddlvq_u16((uint16x8_t)v113))
        {
          int8x8_t v116 = vmovn_s16(v111);
          uint8x8_t v117 = (uint8x8_t)vadd_s8(v116, v116);
          int16x8_t v118 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v91.i8);
          int16x8_t v119 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v93.i8, v94);
          int16x8_t v120 = (int16x8_t)vaddl_high_u8((uint8x16_t)v92, (uint8x16_t)v91);
          int8x16_t v163 = v115;
          int8x8_t v165 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v119, v107), vhadd_u8(*(uint8x8_t *)v92.i8, v95)), 2uLL), vqadd_u8(*(uint8x8_t *)v93.i8, v117)), vqsub_u8(*(uint8x8_t *)v93.i8, v117));
          int8x8_t v121 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v119, v109), vhadd_u8((uint8x8_t)v96, *(uint8x8_t *)v91.i8)), 2uLL), vqadd_u8(v94, v117)), vqsub_u8(v94, v117));
          int8x8_t v122 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v118, v119), 2uLL), vqadd_u8(*(uint8x8_t *)v91.i8, v117)), vqsub_u8(*(uint8x8_t *)v91.i8, v117));
          int8x8_t v123 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v120, v119), 2uLL), vqadd_u8(v95, v117)), vqsub_u8(v95, v117));
          int8x8_t v124 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v90.i8, *(uint8x8_t *)v92.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v118, (uint16x8_t)v119)), 2uLL), vqadd_u8(*(uint8x8_t *)v92.i8, v117)), vqsub_u8(*(uint8x8_t *)v92.i8, v117));
          int8x8_t v125 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v91, (uint8x16_t)v93), (int16x8_t)vhaddq_u16((uint16x8_t)v120, (uint16x8_t)v119)), 2uLL), vqadd_u8((uint8x8_t)v96, v117)), vqsub_u8((uint8x8_t)v96, v117));
          int16x8_t v126 = (int16x8_t)vbicq_s8((int8x16_t)v111, (int8x16_t)v113);
          v127.i64[0] = 0x9000900090009;
          v127.i64[1] = 0x9000900090009;
          int16x8_t v128 = vmulq_s16((int16x8_t)vsubl_u8(v94, *(uint8x8_t *)v93.i8), v127);
          v127.i64[0] = 0x2000200020002;
          v127.i64[1] = 0x2000200020002;
          int16x8_t v129 = vrshrq_n_s16(vmlaq_s16(v128, (int16x8_t)vsubl_u8(v95, *(uint8x8_t *)v91.i8), v127), 4uLL);
          v127.i64[0] = 0xA000A000A000ALL;
          v127.i64[1] = 0xA000A000A000ALL;
          int8x16_t v130 = (int8x16_t)vcgtq_s16(vmulq_s16(v126, v127), vabsq_s16(v129));
          int16x8_t v131 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v129, v130), v126), vnegq_s16(v126));
          int16x8_t v132 = vshrq_n_s16(v126, 1uLL);
          int16x8_t v133 = vnegq_s16(v132);
          int16x8_t v134 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8), *(uint8x8_t *)v91.i8), v131), v132), v133), vandq_s8(v114, v130)), v107);
          int16x8_t v135 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v96, v94), v95), v131), v132), v133), vandq_s8(v163, v130)), v109);
          *(int8x8_t *)v127.i8 = vqmovn_s16(v113);
          *(int8x8_t *)v92.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v124, *(int8x8_t *)v92.i8);
          *(int8x8_t *)v91.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v122, vqmovun_s16(v134));
          int8x16_t v8 = (int8x16_t)xmmword_1BBB6FA40;
          int16x8_t v6 = v166;
          *(int8x8_t *)v93.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v165, vqmovun_s16(vaddq_s16(v131, v108)));
          uint8x8_t v94 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v127.i8, v121, vqmovun_s16(vsubq_s16(v110, v131)));
          uint8x8_t v95 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v127.i8, v123, vqmovun_s16(v135));
          int8x8_t v96 = vbsl_s8(*(int8x8_t *)v127.i8, v125, v96);
        }
        else
        {
          int16x8_t v137 = (int16x8_t)vbicq_s8((int8x16_t)v111, (int8x16_t)v113);
          v138.i64[0] = 0x2000200020002;
          v138.i64[1] = 0x2000200020002;
          int16x8_t v139 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v94, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v93.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v95, *(uint8x8_t *)v91.i8), v138), 4uLL);
          v138.i64[0] = 0xA000A000A000ALL;
          v138.i64[1] = 0xA000A000A000ALL;
          int8x16_t v140 = (int8x16_t)vcgtq_s16(vmulq_s16(v137, v138), vabsq_s16(v139));
          int16x8_t v141 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v139, v140), v137), vnegq_s16(v137));
          int16x8_t v142 = vshrq_n_s16(v137, 1uLL);
          int16x8_t v143 = vnegq_s16(v142);
          int16x8_t v144 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8), *(uint8x8_t *)v91.i8), v141), v142), v143), vandq_s8(v114, v140)), v107);
          int16x8_t v145 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v96, v94), v95), v141), v142), v143), vandq_s8(v115, v140)), v109);
          *(int8x8_t *)v91.i8 = vqmovun_s16(v144);
          *(int8x8_t *)v93.i8 = vqmovun_s16(vaddq_s16(v141, v108));
          uint8x8_t v94 = (uint8x8_t)vqmovun_s16(vsubq_s16(v110, v141));
          uint8x8_t v95 = (uint8x8_t)vqmovun_s16(v145);
        }
        uint64_t v136 = (uint64_t)v172;
        int8x8_t v30 = v168;
      }
      else
      {
        uint64_t v136 = (uint64_t)v172;
      }
      v24.u64[1] = (unint64_t)v28;
      v26.u64[1] = (unint64_t)v29;
      v25.u64[1] = (unint64_t)v30;
      v27.i64[1] = v136;
      v90.u64[1] = (unint64_t)v94;
      v92.u64[1] = (unint64_t)v95;
      v91.u64[1] = (unint64_t)v96;
      v93.u64[1] = (unint64_t)v97;
      int16x8_t v146 = (int16x8_t)vtrn1q_s8(v24, v90);
      int16x8_t v147 = (int16x8_t)vtrn2q_s8(v24, v90);
      int16x8_t v148 = (int16x8_t)vtrn1q_s8(v26, v92);
      int16x8_t v149 = (int16x8_t)vtrn2q_s8(v26, v92);
      int16x8_t v150 = (int16x8_t)vtrn1q_s8((int8x16_t)v25, v91);
      int16x8_t v151 = (int16x8_t)vtrn2q_s8((int8x16_t)v25, v91);
      int16x8_t v152 = (int16x8_t)vtrn1q_s8(v27, v93);
      int16x8_t v153 = (int16x8_t)vtrn2q_s8(v27, v93);
      int32x4_t v154 = (int32x4_t)vtrn1q_s16(v146, v148);
      int32x4_t v155 = (int32x4_t)vtrn2q_s16(v146, v148);
      int32x4_t v156 = (int32x4_t)vtrn1q_s16(v147, v149);
      int32x4_t v157 = (int32x4_t)vtrn2q_s16(v147, v149);
      int32x4_t v158 = (int32x4_t)vtrn1q_s16(v150, v152);
      int32x4_t v159 = (int32x4_t)vtrn2q_s16(v150, v152);
      int32x4_t v160 = (int32x4_t)vtrn1q_s16(v151, v153);
      int32x4_t v161 = (int32x4_t)vtrn2q_s16(v151, v153);
      *(int32x4_t *)uint64_t v7 = vtrn1q_s32(v154, v158);
      *(int32x4_t *)((char *)v7 + a2) = vtrn1q_s32(v156, v160);
      *(int32x4_t *)((char *)v7 + 2 * a2) = vtrn1q_s32(v155, v159);
      *(int32x4_t *)((char *)v7 + 3 * a2) = vtrn1q_s32(v157, v161);
      *(int32x4_t *)((char *)v7 + 4 * a2) = vtrn2q_s32(v154, v158);
      *(int32x4_t *)((char *)v7 + 5 * a2) = vtrn2q_s32(v156, v160);
      *(int32x4_t *)((char *)v7 + 6 * a2) = vtrn2q_s32(v155, v159);
      *(int32x4_t *)((char *)v7 + 7 * a2) = vtrn2q_s32(v157, v161);
      uint64_t v7 = (int8x16_t *)((char *)v7 + 8 * a2);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint8x16_t *sub_1BBAD5444(uint8x16_t *result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, int16x8_t a10)
{
  if (a4 >= 1)
  {
    unint64_t v10 = 0;
    v11.i64[0] = 0x101010101010101;
    v11.i64[1] = 0x101010101010101;
    do
    {
      if (*(void *)(a3 + v10))
      {
        int8x16_t v12 = *(int8x16_t *)((char *)result - a2);
        a10.i64[0] = *(void *)(a3 + v10);
        a10 = vzip1q_s16(a10, a10);
        int8x16_t v13 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8(*result, (uint8x16_t)v12), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(*(uint8x16_t *)((char *)result - 2 * a2), *(uint8x16_t *)((char *)result + a2)), 1uLL), vandq_s8(veorq_s8(*(int8x16_t *)result, v12), v11))), (int8x16_t)a10), vnegq_s8((int8x16_t)a10));
        uint8x16_t v14 = vsqaddq_u8(*result, vnegq_s8(v13));
        *(uint8x16_t *)((char *)result - a2) = vsqaddq_u8((uint8x16_t)v12, v13);
        *uint64_t result = v14;
      }
      v10 += 8;
      ++result;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t sub_1BBAD54D0(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 3 * a2;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = 5 * a2;
    uint64_t v9 = 6 * a2;
    uint64_t v10 = 7 * a2;
    v11.i64[0] = 0x101010101010101;
    v11.i64[1] = 0x101010101010101;
    do
    {
      if (*(void *)(a3 + v4))
      {
        v12.i64[0] = *(void *)(result - 4);
        v13.i64[0] = *(void *)(result + a2 - 4);
        v14.i64[0] = *(void *)(result + v5 - 4);
        v15.i64[0] = *(void *)(result + v6 - 4);
        v12.i64[1] = *(void *)(result + v7 - 4);
        v13.i64[1] = *(void *)(result + v8 - 4);
        v14.i64[1] = *(void *)(result + v9 - 4);
        v15.i64[1] = *(void *)(result + v10 - 4);
        int32x4_t v16 = (int32x4_t)vtrn1q_s16(v12, v13);
        int32x4_t v17 = (int32x4_t)vtrn2q_s16(v12, v13);
        int32x4_t v18 = (int32x4_t)vtrn1q_s16(v14, v15);
        int16x8_t v19 = vtrn2q_s16(v14, v15);
        uint8x16_t v20 = (uint8x16_t)vtrn1q_s32(v16, v18);
        int8x16_t v21 = (int8x16_t)vtrn2q_s32(v16, v18);
        int8x16_t v22 = (int8x16_t)vtrn1q_s32(v17, (int32x4_t)v19);
        uint8x16_t v23 = (uint8x16_t)vtrn2q_s32(v17, (int32x4_t)v19);
        v19.i64[0] = *(void *)(a3 + v4);
        int8x16_t v24 = (int8x16_t)vzip1q_s16(v19, v19);
        int8x16_t v25 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8((uint8x16_t)v21, (uint8x16_t)v22), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(v20, v23), 1uLL), vandq_s8(veorq_s8(v21, v22), v11))), v24), vnegq_s8(v24));
        int16x8_t v26 = (int16x8_t)vsqaddq_u8((uint8x16_t)v22, v25);
        int16x8_t v27 = (int16x8_t)vsqaddq_u8((uint8x16_t)v21, vnegq_s8(v25));
        int16x8_t v28 = vzip1q_s16(v26, v27);
        *(_DWORD *)(result - 2) = v28.i32[0];
        *(_DWORD *)(result + a2 - 2) = v28.i32[1];
        *(_DWORD *)(result + v5 - 2) = v28.i32[2];
        *(_DWORD *)(result + v6 - 2) = v28.i32[3];
        int16x8_t v29 = vzip2q_s16(v26, v27);
        *(_DWORD *)(result + v7 - 2) = v29.i32[0];
        *(_DWORD *)(result + v8 - 2) = v29.i32[1];
        *(_DWORD *)(result + v9 - 2) = v29.i32[2];
        *(_DWORD *)(result + v10 - 2) = v29.i32[3];
      }
      v4 += 8;
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1BBAD560C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 <= 7)
  {
    uint64_t v7 = -4 * a2;
    uint64_t v8 = 3 * a2;
    uint64_t v9 = -3 * a2;
    uint64_t v10 = 2 * a2;
    uint64_t v11 = -a2;
    uint64_t v12 = -2 * a2;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = a5 >> 3;
    uint64_t v7 = -4 * a2;
    uint64_t v8 = 3 * a2;
    uint64_t v9 = -3 * a2;
    uint64_t v10 = 2 * a2;
    uint64_t v11 = -a2;
    uint64_t v12 = -2 * a2;
    uint64_t v13 = result + a2;
    uint64_t v14 = result + 2 * a2;
    uint64_t v15 = result - a2;
    uint64_t v16 = result - 3 * a2;
    uint64_t v17 = result - 2 * a2;
    v18.i64[0] = 0xA000A000A000ALL;
    v18.i64[1] = 0xA000A000A000ALL;
    uint64_t v19 = result;
    do
    {
      if (*(_WORD *)(a4 + 2 * v5))
      {
        int8x8_t v20 = *(int8x8_t *)(v16 + 8 * v5);
        uint8x8_t v21 = *(uint8x8_t *)(v17 + 8 * v5);
        uint8x8_t v22 = *(uint8x8_t *)(v15 + 8 * v5);
        uint8x8_t v23 = *(uint8x8_t *)(result + 8 * v5);
        uint8x8_t v24 = *(uint8x8_t *)(v13 + 8 * v5);
        int8x8_t v25 = *(int8x8_t *)(v14 + 8 * v5);
        int16x8_t v26 = vdupq_n_s16(*(unsigned __int8 *)(a3 + v5));
        int16x8_t v27 = (int16x8_t)vaddl_u8(v22, (uint8x8_t)v20);
        int16x8_t v28 = (int16x8_t)vshll_n_u8(v21, 1uLL);
        int16x8_t v29 = vabdq_s16(v27, v28);
        int16x8_t v30 = (int16x8_t)vaddl_u8((uint8x8_t)v25, v23);
        int16x8_t v31 = (int16x8_t)vshll_n_u8(v24, 1uLL);
        int16x8_t v32 = vabdq_s16(v30, v31);
        int16x8_t v33 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v29), v27, v28), (int8x16_t)xmmword_1BBB6FA40);
        int16x8_t v34 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v32), v30, v31), (int8x16_t)xmmword_1BBB6FA40);
        int8x16_t v35 = (int8x16_t)vcgtq_s16(v26, vaddq_s16(v34, v33));
        if (vaddlvq_u16((uint16x8_t)v35))
        {
          uint8x8_t v36 = *(uint8x8_t *)(result - 4 * a2 + 8 * v5);
          uint8x8_t v37 = *(uint8x8_t *)(result + 3 * a2 + 8 * v5);
          int16x8_t v38 = (int16x8_t)vmovl_u8(v21);
          int16x8_t v39 = (int16x8_t)vmovl_u8(v22);
          int16x8_t v40 = (int16x8_t)vmovl_u8(v24);
          int16x8_t v41 = (int16x8_t)vmovl_u8(v23);
          int16x8_t v42 = (int16x8_t)vandq_s8(v35, vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v5)), (int8x16_t)xmmword_1BBB6FA50));
          int16x8_t v43 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v42, vshlq_n_s16(v42, 2uLL)), (int16x8_t)vabdl_u8(v22, v23)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v26, 3uLL), vaddq_s16(v32, v29)), (int8x16_t)vcgtq_u16(vshrq_n_u16((uint16x8_t)v26, 3uLL), vabal_u8(vabdl_u8(v37, v23), v36, v22))));
          int16x8_t v44 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v43), (int8x16_t)v43), (int8x16_t)xmmword_1BBB6FA40);
          int16x8_t v45 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v26, (uint16x8_t)v26, 1uLL), 3uLL);
          int8x16_t v46 = (int8x16_t)vcgtq_s16(v45, v33);
          int8x16_t v47 = (int8x16_t)vcgtq_s16(v45, v34);
          int16x8_t v48 = (int16x8_t)vbicq_s8((int8x16_t)v42, (int8x16_t)v44);
          int16x8_t v49 = (int16x8_t)vsubl_u8(v24, v21);
          uint8x8_t v50 = vrhadd_u8((uint8x8_t)v20, v22);
          uint8x8_t v51 = vrhadd_u8((uint8x8_t)v25, v23);
          if (vaddlvq_u16((uint16x8_t)v44))
          {
            int8x8_t v52 = vmovn_s16(v42);
            uint8x8_t v53 = (uint8x8_t)vadd_s8(v52, v52);
            int16x8_t v54 = (int16x8_t)vaddl_u8((uint8x8_t)v20, v36);
            int16x8_t v55 = (int16x8_t)vaddl_u8(v21, (uint8x8_t)v20);
            int16x8_t v56 = (int16x8_t)vaddl_u8(v23, v22);
            int16x8_t v57 = (int16x8_t)vaddl_u8((uint8x8_t)v25, v24);
            int16x8_t v58 = (int16x8_t)vaddl_u8(v37, (uint8x8_t)v25);
            int8x8_t v59 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v56, v38), vhadd_u8((uint8x8_t)v20, v24)), 2uLL), vqadd_u8(v22, v53)), vqsub_u8(v22, v53));
            int8x8_t v60 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v56, v40), vhadd_u8((uint8x8_t)v25, v21)), 2uLL), vqadd_u8(v23, v53)), vqsub_u8(v23, v53));
            int8x8_t v61 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v56, v55), 2uLL), vqadd_u8(v21, v53)), vqsub_u8(v21, v53));
            int8x8_t v62 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v57, v56), 2uLL), vqadd_u8(v24, v53)), vqsub_u8(v24, v53));
            int16x8_t v63 = (int16x8_t)vsubl_u8(v23, v22);
            v64.i64[0] = 0x9000900090009;
            v64.i64[1] = 0x9000900090009;
            int16x8_t v65 = vmulq_s16(v63, v64);
            v64.i64[0] = 0x2000200020002;
            v64.i64[1] = 0x2000200020002;
            int16x8_t v66 = vrshrq_n_s16(vmlaq_s16(v65, v49, v64), 4uLL);
            int8x16_t v67 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v18), vabsq_s16(v66));
            int16x8_t v68 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v66, v67), v48), vnegq_s16(v48));
            int16x8_t v69 = vshrq_n_s16(v48, 1uLL);
            int16x8_t v70 = vnegq_s16(v69);
            int16x8_t v71 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v51, v24), v68), v69), v70), vandq_s8(v47, v67)), v40);
            int8x8_t v72 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v50, v21), v68), v69), v70), vandq_s8(v46, v67)), v38));
            int8x8_t v73 = vqmovun_s16(vaddq_s16(v68, v39));
            int8x8_t v74 = vqmovun_s16(vsubq_s16(v41, v68));
            *(int8x8_t *)v68.i8 = vqmovn_s16(v44);
            *(int8x8_t *)(v16 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v54, (int16x8_t)vhaddq_u16((uint16x8_t)v55, (uint16x8_t)v56)), 2uLL), vqadd_u8((uint8x8_t)v20, v53)), vqsub_u8((uint8x8_t)v20, v53)), v20);
            *(int8x8_t *)(v17 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v61, v72);
            *(int8x8_t *)(v15 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v59, v73);
            *(int8x8_t *)(result + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v60, v74);
            *(int8x8_t *)(v13 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v62, vqmovun_s16(v71));
            *(int8x8_t *)(v14 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v58, (int16x8_t)vhaddq_u16((uint16x8_t)v57, (uint16x8_t)v56)), 2uLL), vqadd_u8((uint8x8_t)v25, v53)), vqsub_u8((uint8x8_t)v25, v53)), v25);
          }
          else
          {
            v75.i64[0] = 0x2000200020002;
            v75.i64[1] = 0x2000200020002;
            int16x8_t v76 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v23, (uint8x8_t)0x909090909090909), v22, (uint8x8_t)0x909090909090909), v49, v75), 4uLL);
            int8x16_t v77 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v18), vabsq_s16(v76));
            int16x8_t v78 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v76, v77), v48), vnegq_s16(v48));
            int16x8_t v79 = vaddq_s16(v78, v39);
            int16x8_t v80 = vsubq_s16(v41, v78);
            int16x8_t v81 = vshrq_n_s16(v48, 1uLL);
            int16x8_t v82 = vnegq_s16(v81);
            *(int8x8_t *)(v17 + 8 * v5) = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v50, v21), v78), v81), v82), vandq_s8(v46, v77)), v38));
            *(int8x8_t *)(v15 + 8 * v5) = vqmovun_s16(v79);
            *(int8x8_t *)(result + 8 * v5) = vqmovun_s16(v80);
            *(int8x8_t *)(v13 + 8 * v5) = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v51, v24), v78), v81), v82), vandq_s8(v47, v77)), v40));
          }
        }
      }
      ++v5;
      v19 += 8;
    }
    while (v6 != v5);
    uint64_t result = v19;
  }
  _X9 = result + 64 + v7;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v9;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v12;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v11;
  __asm
  {
    PRFM            #0x10, [X9]
    PRFM            #0x10, [X0,#0x40]
  }
  _X9 = result + 64 + a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v10;
  __asm { PRFM            #0x10, [X9] }
  _X8 = result + 64 + v8;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1BBAD5A3C(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  if (a5 >= 8)
  {
    uint64_t v5 = a5 >> 3;
    uint64_t v6 = 2 * a2;
    uint64_t v7 = 3 * a2;
    uint64_t v8 = 4 * a2;
    uint64_t v9 = 7 * a2;
    uint64_t v10 = 6 * a2;
    v11.i64[0] = 0x2000200020002;
    v11.i64[1] = 0x2000200020002;
    v12.i64[0] = 0xA000A000A000ALL;
    v12.i64[1] = 0xA000A000A000ALL;
    uint64_t v13 = 5 * a2;
    do
    {
      unsigned int v15 = *a4++;
      unsigned int v14 = v15;
      if (v15)
      {
        int8x8_t v16 = *(int8x8_t *)(result - 4);
        int8x8_t v17 = *(int8x8_t *)(result + a2 - 4);
        int8x8_t v18 = *(int8x8_t *)(result + v6 - 4);
        int8x8_t v19 = *(int8x8_t *)(result + v7 - 4);
        int8x8_t v20 = *(int8x8_t *)(result + v8 - 4);
        int8x8_t v21 = *(int8x8_t *)(result + v13 - 4);
        int8x8_t v22 = *(int8x8_t *)(result + v10 - 4);
        int8x8_t v23 = *(int8x8_t *)(result + v9 - 4);
        int16x4_t v24 = (int16x4_t)vtrn1_s8(v16, v17);
        int16x4_t v25 = (int16x4_t)vtrn2_s8(v16, v17);
        int16x4_t v26 = (int16x4_t)vtrn1_s8(v18, v19);
        int16x4_t v27 = (int16x4_t)vtrn2_s8(v18, v19);
        int16x4_t v28 = (int16x4_t)vtrn1_s8(v20, v21);
        int16x4_t v29 = (int16x4_t)vtrn2_s8(v20, v21);
        int16x4_t v30 = (int16x4_t)vtrn1_s8(v22, v23);
        int16x4_t v31 = (int16x4_t)vtrn2_s8(v22, v23);
        int32x2_t v32 = (int32x2_t)vtrn1_s16(v24, v26);
        int32x2_t v33 = (int32x2_t)vtrn2_s16(v24, v26);
        int32x2_t v34 = (int32x2_t)vtrn1_s16(v25, v27);
        int32x2_t v35 = (int32x2_t)vtrn2_s16(v25, v27);
        int32x2_t v36 = (int32x2_t)vtrn1_s16(v28, v30);
        int32x2_t v37 = (int32x2_t)vtrn2_s16(v28, v30);
        int32x2_t v38 = (int32x2_t)vtrn1_s16(v29, v31);
        int32x2_t v39 = (int32x2_t)vtrn2_s16(v29, v31);
        uint8x8_t v40 = (uint8x8_t)vzip2_s32(v32, v36);
        int8x8_t v41 = (int8x8_t)vzip1_s32(v34, v38);
        uint8x8_t v42 = (uint8x8_t)vzip2_s32(v34, v38);
        uint8x8_t v43 = (uint8x8_t)vzip1_s32(v33, v37);
        int8x8_t v44 = (int8x8_t)vzip2_s32(v33, v37);
        uint8x8_t v45 = (uint8x8_t)vzip1_s32(v35, v39);
        int16x8_t v46 = vdupq_n_s16(*a3);
        int16x8_t v47 = (int16x8_t)vaddl_u8((uint8x8_t)v41, v45);
        int16x8_t v48 = (int16x8_t)vshll_n_u8(v43, 1uLL);
        int16x8_t v49 = vabdq_s16(v47, v48);
        int16x8_t v50 = (int16x8_t)vaddl_u8((uint8x8_t)v44, v40);
        int16x8_t v51 = (int16x8_t)vshll_n_u8(v42, 1uLL);
        int16x8_t v52 = vabdq_s16(v50, v51);
        int8x16_t v53 = (int8x16_t)vabaq_s16(vrev64q_s16(v49), v47, v48);
        int8x16_t v54 = (int8x16_t)vabaq_s16(vrev64q_s16(v52), v50, v51);
        int16x8_t v55 = (int16x8_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1BBB6FA40);
        int16x8_t v56 = (int16x8_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1BBB6FA40);
        int8x16_t v57 = (int8x16_t)vcgtq_s16(v46, vaddq_s16(v56, v55));
        if (vaddlvq_u16((uint16x8_t)v57))
        {
          int8x8_t v58 = (int8x8_t)vzip1_s32(v32, v36);
          int8x8_t v59 = (int8x8_t)vzip2_s32(v35, v39);
          int16x8_t v60 = (int16x8_t)vmovl_u8(v43);
          int16x8_t v61 = (int16x8_t)vmovl_u8(v45);
          int16x8_t v62 = (int16x8_t)vmovl_u8(v42);
          int16x8_t v63 = (int16x8_t)vmovl_u8(v40);
          int16x8_t v64 = (int16x8_t)vandq_s8(v57, vqtbl1q_s8((int8x16_t)vdupq_n_s16(v14), (int8x16_t)xmmword_1BBB6FA50));
          int16x8_t v65 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v64, vshlq_n_s16(v64, 2uLL)), (int16x8_t)vabdl_u8(v45, v40)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v46, 3uLL), vaddq_s16(v52, v49)), (int8x16_t)vcgtq_u16(vshrq_n_u16((uint16x8_t)v46, 3uLL), vabal_u8(vabdl_u8((uint8x8_t)v59, v40), (uint8x8_t)v58, v45))));
          int16x8_t v66 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v65), (int8x16_t)v65), (int8x16_t)xmmword_1BBB6FA40);
          int16x8_t v67 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v46, (uint16x8_t)v46, 1uLL), 3uLL);
          int8x16_t v68 = (int8x16_t)vcgtq_s16(v67, v55);
          int8x16_t v69 = (int8x16_t)vcgtq_s16(v67, v56);
          int16x8_t v70 = (int16x8_t)vbicq_s8((int8x16_t)v64, (int8x16_t)v66);
          int16x8_t v71 = (int16x8_t)vsubl_u8(v42, v43);
          uint8x8_t v72 = vrhadd_u8((uint8x8_t)v41, v45);
          uint8x8_t v73 = vrhadd_u8((uint8x8_t)v44, v40);
          if (vaddlvq_u16((uint16x8_t)v66))
          {
            int8x8_t v74 = vmovn_s16(v64);
            uint8x8_t v75 = (uint8x8_t)vadd_s8(v74, v74);
            int16x8_t v76 = (int16x8_t)vaddl_u8((uint8x8_t)v41, v43);
            int16x8_t v77 = (int16x8_t)vaddl_u8(v45, v40);
            int16x8_t v78 = (int16x8_t)vaddl_u8(v42, (uint8x8_t)v44);
            int8x8_t v79 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v77, v60), vhadd_u8((uint8x8_t)v41, v42)), 2uLL), vqadd_u8(v45, v75)), vqsub_u8(v45, v75));
            int8x8_t v80 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v77, v62), vhadd_u8((uint8x8_t)v44, v43)), 2uLL), vqadd_u8(v40, v75)), vqsub_u8(v40, v75));
            int8x8_t v81 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v76, v77), 2uLL), vqadd_u8(v43, v75)), vqsub_u8(v43, v75));
            int8x8_t v82 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v78, v77), 2uLL), vqadd_u8(v42, v75)), vqsub_u8(v42, v75));
            int16x8_t v83 = (int16x8_t)vsubl_u8(v40, v45);
            v84.i64[0] = 0x9000900090009;
            v84.i64[1] = 0x9000900090009;
            int16x8_t v85 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v83, v84), v71, v11), 4uLL);
            int8x16_t v86 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v12), vabsq_s16(v85));
            int16x8_t v87 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v85, v86), v70), vnegq_s16(v70));
            int16x8_t v88 = vshrq_n_s16(v70, 1uLL);
            int16x8_t v89 = (int16x8_t)vsubl_u8(v72, v43);
            int16x8_t v90 = vnegq_s16(v88);
            int16x8_t v91 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v73, v42), v87), v88), v90), vandq_s8(v69, v86)), v62);
            int8x8_t v92 = vqmovn_s16(v66);
            int8x8_t v93 = vbsl_s8(v92, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v58, (uint8x8_t)v41), (int16x8_t)vhaddq_u16((uint16x8_t)v76, (uint16x8_t)v77)), 2uLL), vqadd_u8((uint8x8_t)v41, v75)), vqsub_u8((uint8x8_t)v41, v75)), v41);
            int8x8_t v94 = vbsl_s8(v92, v81, vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(v89, v87), v88), v90), vandq_s8(v68, v86)), v60)));
            *(int8x8_t *)v89.i8 = vbsl_s8(v92, v79, vqmovun_s16(vaddq_s16(v87, v61)));
            int8x8_t v95 = vbsl_s8(v92, v80, vqmovun_s16(vsubq_s16(v63, v87)));
            int8x8_t v96 = vbsl_s8(v92, v82, vqmovun_s16(v91));
            *(int8x8_t *)v91.i8 = vbsl_s8(v92, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v44, (uint8x8_t)v59), (int16x8_t)vhaddq_u16((uint16x8_t)v78, (uint16x8_t)v77)), 2uLL), vqadd_u8((uint8x8_t)v44, v75)), vqsub_u8((uint8x8_t)v44, v75)), v44);
            int16x4_t v97 = (int16x4_t)vtrn1_s8(v58, v93);
            int16x4_t v98 = (int16x4_t)vtrn2_s8(v58, v93);
            int16x4_t v99 = (int16x4_t)vtrn1_s8(v94, *(int8x8_t *)v89.i8);
            int16x4_t v100 = (int16x4_t)vtrn2_s8(v94, *(int8x8_t *)v89.i8);
            *(int8x8_t *)v89.i8 = vtrn1_s8(v95, v96);
            int16x4_t v101 = (int16x4_t)vtrn2_s8(v95, v96);
            int16x4_t v102 = (int16x4_t)vtrn1_s8(*(int8x8_t *)v91.i8, v59);
            *(int8x8_t *)v91.i8 = vtrn2_s8(*(int8x8_t *)v91.i8, v59);
            int32x2_t v103 = (int32x2_t)vtrn1_s16(v97, v99);
            int32x2_t v104 = (int32x2_t)vtrn2_s16(v97, v99);
            int32x2_t v105 = (int32x2_t)vtrn1_s16(v98, v100);
            int32x2_t v106 = (int32x2_t)vtrn2_s16(v98, v100);
            int32x2_t v107 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v89.i8, v102);
            *(int16x4_t *)v89.i8 = vtrn2_s16(*(int16x4_t *)v89.i8, v102);
            int32x2_t v108 = (int32x2_t)vtrn1_s16(v101, *(int16x4_t *)v91.i8);
            *(int32x2_t *)(result - 4) = vzip1_s32(v103, v107);
            *(int32x2_t *)(result + a2 - 4) = vzip1_s32(v105, v108);
            int32x2_t v109 = (int32x2_t)vtrn2_s16(v101, *(int16x4_t *)v91.i8);
            *(int32x2_t *)(result + v6 - 4) = vzip1_s32(v104, *(int32x2_t *)v89.i8);
            *(int32x2_t *)(result + v7 - 4) = vzip1_s32(v106, v109);
            *(int32x2_t *)(result + v8 - 4) = vzip2_s32(v103, v107);
            *(int32x2_t *)(result + v13 - 4) = vzip2_s32(v105, v108);
            *(int32x2_t *)(result + v10 - 4) = vzip2_s32(v104, *(int32x2_t *)v89.i8);
            *(int32x2_t *)(result + v9 - 4) = vzip2_s32(v106, v109);
          }
          else
          {
            int16x8_t v110 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v40, (uint8x8_t)0x909090909090909), v45, (uint8x8_t)0x909090909090909), v71, v11), 4uLL);
            int8x16_t v111 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v12), vabsq_s16(v110));
            int16x8_t v112 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v110, v111), v70), vnegq_s16(v70));
            int16x8_t v113 = vaddq_s16(v112, v61);
            int16x8_t v114 = vsubq_s16(v63, v112);
            int16x8_t v115 = vshrq_n_s16(v70, 1uLL);
            int16x8_t v116 = vnegq_s16(v115);
            int16x8_t v117 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v73, v42), v112), v115), v116), vandq_s8(v69, v111)), v62);
            *(int8x8_t *)v112.i8 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v72, v43), v112), v115), v116), vandq_s8(v68, v111)), v60));
            *(int8x8_t *)v113.i8 = vqmovun_s16(v113);
            int8x8_t v118 = vqmovun_s16(v114);
            *(int8x8_t *)v117.i8 = vqmovun_s16(v117);
            int16x4_t v119 = (int16x4_t)vtrn1_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v113.i8);
            *(int8x8_t *)v112.i8 = vtrn2_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v113.i8);
            *(int8x8_t *)v113.i8 = vtrn1_s8(v118, *(int8x8_t *)v117.i8);
            *(int8x8_t *)v117.i8 = vtrn2_s8(v118, *(int8x8_t *)v117.i8);
            int16x4_t v120 = vtrn1_s16(v119, *(int16x4_t *)v113.i8);
            *(int16x4_t *)v113.i8 = vtrn2_s16(v119, *(int16x4_t *)v113.i8);
            int16x4_t v121 = vtrn1_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v117.i8);
            *(int16x4_t *)v117.i8 = vtrn2_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v117.i8);
            *(_DWORD *)(result - 2) = v120.i32[0];
            *(_DWORD *)(result + a2 - 2) = v121.i32[0];
            *(_DWORD *)(result + v6 - 2) = v113.i32[0];
            *(_DWORD *)(result + v7 - 2) = v117.i32[0];
            *(_DWORD *)(result + v8 - 2) = v120.i32[1];
            *(_DWORD *)(result + v13 - 2) = v121.i32[1];
            *(_DWORD *)(result + v10 - 2) = v113.i32[1];
            *(_DWORD *)(result + v9 - 2) = v117.i32[1];
          }
        }
      }
      result += 8 * a2;
      ++a3;
      --v5;
    }
    while (v5);
  }
  return result;
}

void *sub_1BBAD5F1C(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, int16x8_t a7, int16x8_t a8)
{
  v112[9] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 1360);
  uint64_t v9 = (uint64_t)a3 >> 3;
  uint64_t v10 = *(void *)(v8 + 488);
  int16x8_t v11 = (uint16x8_t *)(*(void *)(v8 + 512) + 2 * (v10 * v9 + (a2 >> 3)));
  if (a3)
  {
    int16x8_t v12 = (uint16x8_t *)((char *)v11 - 2 * v10);
    a7 = (int16x8_t)(*(_OWORD *)&vshrq_n_u16(*v12, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80));
    a8 = (int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v12 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80));
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = (uint64_t)a2 >> 3;
  unsigned long long v16 = *(_OWORD *)&vshrq_n_u16(*v11, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  unsigned long long v17 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v11 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  int8x8_t v18 = (uint16x8_t *)((char *)v11 + 2 * v10);
  unsigned long long v19 = *(_OWORD *)&vshrq_n_u16(*v18, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  unsigned long long v20 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v18 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  int8x8_t v21 = (uint16x8_t *)((char *)v11 + 4 * v10);
  unsigned long long v22 = *(_OWORD *)&vshrq_n_u16(*v21, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  unsigned long long v23 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v21 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  int16x4_t v24 = (uint16x8_t *)((char *)v11 + 6 * v10);
  unsigned long long v25 = *(_OWORD *)&vshrq_n_u16(*v24, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  unsigned long long v26 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v24 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  int16x4_t v27 = (uint16x8_t *)((char *)v11 + 8 * v10);
  unsigned long long v28 = *(_OWORD *)&vshrq_n_u16(*v27, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  unsigned long long v29 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v27 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  int16x4_t v30 = (uint16x8_t *)((char *)v11 + 10 * v10);
  unsigned long long v31 = *(_OWORD *)&vshrq_n_u16(*v30, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  unsigned long long v32 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v30 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  int32x2_t v33 = (uint16x8_t *)((char *)v11 + 12 * v10);
  unsigned long long v34 = *(_OWORD *)&vshrq_n_u16(*v33, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  unsigned long long v35 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v33 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  int32x2_t v36 = (uint16x8_t *)((char *)v11 + 14 * v10);
  unsigned long long v37 = *(_OWORD *)&vshrq_n_u16(*v36, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  unsigned long long v38 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v36 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  int32x2_t v39 = (int8x16_t *)v112;
  v112[0] = vraddhn_s16(a7, (int16x8_t)v16);
  v112[1] = vraddhn_s16((int16x8_t)v16, (int16x8_t)v19);
  v112[2] = vraddhn_s16((int16x8_t)v19, (int16x8_t)v22);
  v112[3] = vraddhn_s16((int16x8_t)v22, (int16x8_t)v25);
  v112[4] = vraddhn_s16((int16x8_t)v25, (int16x8_t)v28);
  v112[5] = vraddhn_s16((int16x8_t)v28, (int16x8_t)v31);
  v112[6] = vraddhn_s16((int16x8_t)v31, (int16x8_t)v34);
  v112[7] = vraddhn_s16((int16x8_t)v34, (int16x8_t)v37);
  int16x8_t v40 = (int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32((int32x4_t)vzip1q_s16(a8, (int16x8_t)v17), (int32x4_t)vzip1q_s16((int16x8_t)v20, (int16x8_t)v23)), (int64x2_t)vzip1q_s32((int32x4_t)vzip1q_s16((int16x8_t)v26, (int16x8_t)v29), (int32x4_t)vzip1q_s16((int16x8_t)v32, (int16x8_t)v35)));
  v112[8] = vraddhn_s16(v40, (int16x8_t)vextq_s8((int8x16_t)v40, (int8x16_t)v38, 2uLL));
  int8x16_t v41 = vraddhn_high_s16(vraddhn_s16((int16x8_t)v16, (int16x8_t)v17), (int16x8_t)v28, (int16x8_t)v29);
  int8x16_t v42 = vraddhn_high_s16(vraddhn_s16((int16x8_t)v19, (int16x8_t)v20), (int16x8_t)v31, (int16x8_t)v32);
  int8x16_t v43 = vraddhn_high_s16(vraddhn_s16((int16x8_t)v22, (int16x8_t)v23), (int16x8_t)v34, (int16x8_t)v35);
  int8x16_t v44 = vraddhn_high_s16(vraddhn_s16((int16x8_t)v25, (int16x8_t)v26), (int16x8_t)v37, (int16x8_t)v38);
  int16x8_t v45 = (int16x8_t)vzip1q_s8(v41, v42);
  int16x8_t v46 = (int16x8_t)vzip2q_s8(v41, v42);
  int16x8_t v47 = (int16x8_t)vzip1q_s8(v43, v44);
  int16x8_t v48 = (int16x8_t)vzip2q_s8(v43, v44);
  float32x2x2_t v49 = (float32x2x2_t)vzip1q_s16(v45, v47);
  float32x2x2_t v50 = (float32x2x2_t)vzip2q_s16(v45, v47);
  int32x4_t v51 = (int32x4_t)vzip1q_s16(v46, v48);
  int32x4_t v52 = (int32x4_t)vzip2q_s16(v46, v48);
  int8x16_t v53 = (float *)&v109;
  vst2_f32(v53, v49);
  v53 += 4;
  *(int32x4_t *)int8x16_t v53 = vzip2q_s32((int32x4_t)v49, v51);
  int8x16_t v54 = (float *)v110;
  vst2_f32(v54, v50);
  v110[1] = vzip2q_s32((int32x4_t)v50, v52);
  int8x8_t v111 = vraddhn_s16(a7, a8);
  uint8x16_t v55 = (uint8x16_t)vdupq_n_s8(*(unsigned __int8 *)(v8 + 284) - 8);
  int8x16_t v56 = (int8x16_t)vshlq_u8((uint8x16_t)xmmword_1BBB6FA70, v55);
  uint8x16_t v57 = vshlq_u8((uint8x16_t)xmmword_1BBB6FA80, v55);
  uint8x16_t v58 = vshlq_u8((uint8x16_t)xmmword_1BBB6FA90, v55);
  uint8x16_t v59 = vshlq_u8((uint8x16_t)xmmword_1BBB6FAA0, v55);
  uint8x16_t v60 = vshlq_u8((uint8x16_t)xmmword_1BBB6FAB0, v55);
  int v61 = *(unsigned __int8 *)(a1 + 629);
  uint64_t v63 = *(void *)(v8 + 608);
  uint8x16_t v64 = vshlq_u8((uint8x16_t)xmmword_1BBB6FAC0, v55);
  int8x16_t v65 = vdupq_n_s8(*(unsigned __int8 *)(a1 + 628) - 16);
  int8x16_t v66 = vdupq_n_s8(v61 - 20);
  int8x16_t v67 = vdupq_n_s8(v61 - 16);
  int8x16_t v68 = (int8x16_t *)(*(void *)(v8 + 624) + v63 * v9 + (a2 >> 2));
  int8x16_t v69 = (_OWORD *)((char *)&unk_1BBB835A0 + ((64 - a4) >> 2));
  if (a4 + a2 < *(_DWORD *)(v8 + 276)) {
    int8x16_t v69 = (_OWORD *)((char *)v69 + 1);
  }
  int16x8_t v62 = (const __int16 *)(*(void *)(a1 + 1384) + 14);
  int8x16_t v70 = (int8x16_t)vld1q_dup_s16(v62);
  int16x8_t v71 = (char *)&unk_1BBB835A0 + ((64 - a5) >> 2);
  int v72 = a5 + a3;
  uint64_t v73 = 1;
  uint64_t v74 = 182;
  v75.i64[0] = 0x2323232323232323;
  v75.i64[1] = 0x2323232323232323;
  v76.i64[0] = 0x101010101010101;
  v76.i64[1] = 0x101010101010101;
  v77.i64[0] = 0x1E1E1E1E1E1E1E1ELL;
  v77.i64[1] = 0x1E1E1E1E1E1E1E1ELL;
  v78.i64[0] = 0xE2E2E2E2E2E2E2E2;
  v78.i64[1] = 0xE2E2E2E2E2E2E2E2;
  uint64_t result = &unk_1BBB6F000;
  do
  {
    uint64_t v80 = v73;
    int v81 = a5 >> 3;
    int8x16_t v82 = 0uLL;
    int8x16_t v83 = 0uLL;
    if (a5 >= 8)
    {
      uint64_t v84 = 0;
      int8x16_t v85 = *(int8x16_t *)v69;
      int8x16_t v86 = v39;
      uint64_t v87 = v13;
      uint64_t v88 = v74;
      uint64_t v89 = v14;
      do
      {
        int8x16_t v90 = *v86++;
        int8x16_t v91 = vqtbl3q_s8(*(int8x16x3_t *)v56.i8, vminq_s8(vaddq_s8(v90, v65), v75));
        *(void *)(a6 + v87 + 673) = v91.i64[0];
        *(void *)(a6 + v87 + 683) = v91.i64[1];
        int8x16_t v92 = vandq_s8(*v68, v85);
        int8x16_t v93 = vandq_s8(*(int8x16_t *)((char *)v68 + v63), v85);
        int8x16_t v83 = vextq_s8(v83, v56, 4uLL);
        v83.i16[6] = v68[-1].i16[7];
        v83.i16[7] = *(__int16 *)((char *)&v68->i16[-1] + v63);
        int8x16_t v94 = vaddq_s8(v90, v66);
        int8x8_t v95 = (int8x16_t *)(a6 + v88);
        *(int8x16_t *)((char *)v95 - 20) = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vaddq_s8(v92, v92), vzip1q_s8(v94, v94)), v75)), vceqzq_s8(v92));
        *int8x8_t v95 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vaddq_s8(v93, v93), vzip2q_s8(v94, v94)), v75)), vceqzq_s8(v93));
        int8x16_t v96 = vaddq_s8(vzip1q_s8(v90, v90), v70);
        v114.val[1] = (int8x16_t)xmmword_1BBB6FAD0;
        v114.val[0] = (int8x16_t)xmmword_1BBB6FAE0;
        int16x8_t v97 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vbslq_s8(vcgtq_s8(v77, v96), v96, vqtbl2q_s8(v114, vaddq_s8(v96, v78))), v67), v75));
        int8x16_t v98 = (int8x16_t)vcgtq_u8((uint8x16_t)v92, v76);
        v84 += 2;
        int8x16_t v68 = (int8x16_t *)((char *)v68 + 2 * v63);
        *(int8x16_t *)(a6 + v89 + 458) = vandq_s8((int8x16_t)vzip1q_s16(v97, v97), (int8x16_t)vmovl_s8(*(int8x8_t *)v98.i8));
        *(int8x16_t *)(a6 + v89 + 474) = vandq_s8((int8x16_t)vzip2q_s16(v97, v97), (int8x16_t)vmovl_high_s8(v98));
        v89 += 34;
        v88 += 40;
        v87 += 20;
      }
      while (v84 < v81);
    }
    int8x16_t v99 = 0uLL;
    if (a2)
    {
      *(int8x8_t *)v82.i8 = *(&v111 + 9 * v80);
      int8x8_t v100 = vqtbl3_s8(*(int8x16x3_t *)v56.i8, vmin_s8(vadd_s8(*(int8x8_t *)v82.i8, *(int8x8_t *)v65.i8), (int8x8_t)0x2323232323232323));
      int16x4_t v101 = (unsigned char *)(a6 + 80 * v80);
      v101[592] = v100.i8[0];
      v101[602] = v100.i8[1];
      v101[612] = v100.i8[2];
      v101[622] = v100.i8[3];
      v101[632] = v100.i8[4];
      v101[642] = v100.i8[5];
      v101[652] = v100.i8[6];
      v101[662] = v100.i8[7];
      if (a5 <= 63)
      {
        int v102 = v81 - 2;
        do
        {
          int8x16_t v83 = vextq_s8(v83, v83, 4uLL);
          v102 += 2;
        }
        while (v102 < 6);
      }
      int8x16_t v103 = vzip1q_s8(v82, v82);
      unsigned long long v104 = *(_OWORD *)&v83 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
      int8x16_t v99 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vaddq_s8(v103, v66), vaddq_s8((int8x16_t)v104, (int8x16_t)v104)), v75)), vceqzq_s8((int8x16_t)v104));
      int8x16_t v105 = vaddq_s8(v103, v70);
      v113.val[1] = (int8x16_t)xmmword_1BBB6FAD0;
      v113.val[0] = (int8x16_t)xmmword_1BBB6FAE0;
      int8x16_t v106 = (int8x16_t)vcgtq_u8((uint8x16_t)v104, v76);
      int8x16_t v82 = vandq_s8(vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vbslq_s8(vcgtq_s8(v77, v105), v105, vqtbl2q_s8(v113, vaddq_s8(v105, v78))), v67), v75)), vtrn2q_s8(v106, v106));
    }
    int32x2_t v107 = (_WORD *)(a6 + 160 * v80);
    *int32x2_t v107 = v99.i16[0];
    v107[10] = v99.i16[1];
    v107[20] = v99.i16[2];
    v107[30] = v99.i16[3];
    v107[40] = v99.i16[4];
    v107[50] = v99.i16[5];
    v107[60] = v99.i16[6];
    v107[70] = v99.i16[7];
    int32x2_t v108 = (_WORD *)(a6 + 136 * v80);
    v108[177] = v82.i16[2];
    v108[194] = v82.i16[4];
    v108[160] = v82.i16[0];
    v108[211] = v82.i16[6];
    uint64_t v63 = *(void *)(v8 + 616);
    int8x16_t v68 = (int8x16_t *)(*(void *)(v8 + 640) + ((uint64_t)a3 >> 2) + v63 * v15);
    if (v72 >= *(_DWORD *)(v8 + 280)) {
      int8x16_t v69 = v71;
    }
    else {
      int8x16_t v69 = v71 + 1;
    }
    uint64_t v73 = v80 - 1;
    v14 -= 136;
    v74 -= 160;
    v13 -= 80;
    int32x2_t v39 = (int8x16_t *)((char *)v39 - 72);
    a5 = a4;
    a2 = a3;
  }
  while (v80);
  return result;
}

unsigned __int8 *sub_1BBAD6560(uint64_t a1, int a2, int a3, int a4, int a5, int8x16_t *a6)
{
  uint64_t v6 = *(void *)(a1 + 1360);
  char v7 = *(unsigned char *)(v6 + 284);
  int v8 = *(char *)(a1 + 621);
  uint64_t v9 = *(void *)(a1 + 1384);
  int v10 = *(char *)(v9 + 14) + v8;
  int v11 = *(unsigned __int8 *)(*(void *)(a1 + 1368) + 2003);
  int v12 = -v11;
  if (v10 >= 57) {
    int v13 = 57;
  }
  else {
    int v13 = *(char *)(v9 + 14) + v8;
  }
  if (v10 <= v12) {
    int v14 = -v11;
  }
  else {
    int v14 = v13;
  }
  if (v14 >= 30) {
    int v14 = byte_1BBB83580[v14 - 30];
  }
  int v15 = *(char *)(a1 + 629);
  int v16 = *(char *)(a1 + 628);
  char v17 = v7 - 8;
  int v18 = *(char *)(v9 + 15) + v8;
  if (v18 >= 57) {
    int v19 = 57;
  }
  else {
    int v19 = v18;
  }
  if (v18 <= v12) {
    int v20 = v12;
  }
  else {
    int v20 = v19;
  }
  if (v20 >= 30) {
    int v20 = byte_1BBB83580[v20 - 30];
  }
  int v21 = v8 + v16;
  if (v8 + v16 >= 51) {
    int v21 = 51;
  }
  if (v21 <= 15) {
    int v21 = 15;
  }
  int8x16_t v22 = vdupq_n_s8(byte_1BBB83515[v21 - 15] << v17);
  int v23 = v8 + v15;
  if (v23 >= 53) {
    int v24 = 53;
  }
  else {
    int v24 = v23;
  }
  if (v24 <= 17) {
    int v24 = 17;
  }
  uint64_t result = byte_1BBB83546;
  int v26 = byte_1BBB83546[v24 - 17] << v7;
  if (v23 >= 51) {
    int v23 = 51;
  }
  if (v23 <= 15) {
    int v23 = 15;
  }
  int8x16_t v27 = (int8x16_t)vdupq_n_s32((byte_1BBB83546[v23 - 15] << (v7 + 8)) | v26);
  int v28 = v14 + v15;
  if (v28 >= 51) {
    int v28 = 51;
  }
  if (v28 <= 15) {
    int v28 = 15;
  }
  int v29 = byte_1BBB83546[v28 - 15];
  int v30 = v20 + v15;
  if (v30 >= 51) {
    int v30 = 51;
  }
  if (v30 <= 15) {
    int v30 = 15;
  }
  int8x16_t v31 = (int8x16_t)vdupq_n_s16((byte_1BBB83546[v30 - 15] << v7) | (v29 << v17));
  if (a5 >= 8)
  {
    unint64_t v32 = 0;
    uint64_t v33 = *(void *)(v6 + 608);
    uint64_t v34 = *(void *)(v6 + 624);
    uint64_t v35 = v33 * ((uint64_t)a3 >> 3);
    uint64_t v36 = (uint64_t)a2 >> 2;
    uint64_t v37 = 2 * v33;
    uint64_t v38 = v34 + v35;
    uint64_t v39 = v34 + v33 + v35;
    uint64_t v40 = 36;
    uint64_t v41 = 24;
    v42.i64[0] = 0x101010101010101;
    v42.i64[1] = 0x101010101010101;
    do
    {
      _X17 = v38 + v36 + 16;
      int8x16_t v44 = *(int8x16_t *)(v38 + v36);
      uint64_t result = (unsigned __int8 *)(v39 + v36 + 16);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
      }
      int8x16_t v51 = vqtbl1q_s8(v27, *(int8x16_t *)(v39 + v36));
      int32x4_t v52 = &a6[v32];
      v52[8] = vqtbl1q_s8(v27, v44);
      v52[9] = v51;
      int8x16_t v53 = (int8x16_t)vcgtq_u8((uint8x16_t)v44, v42);
      int8x16_t v54 = &a6[v41];
      *int8x16_t v54 = vandq_s8(v31, (int8x16_t)vmovl_s8(*(int8x8_t *)v53.i8));
      v54[1] = vandq_s8(v31, (int8x16_t)vmovl_high_s8(v53));
      a6[v40] = v22;
      v32 += 2;
      ++v40;
      v38 += v37;
      v41 += 2;
      v39 += v37;
    }
    while (v32 < a5 >> 3);
  }
  if (a4 >= 8)
  {
    unint64_t v55 = 0;
    uint64_t v56 = *(void *)(v6 + 616);
    uint64_t v57 = *(void *)(v6 + 640);
    uint64_t v58 = v56 * ((uint64_t)(a2 + 8) >> 3);
    uint64_t v59 = (uint64_t)a3 >> 2;
    uint64_t v60 = 2 * v56;
    int v61 = a6 + 16;
    int16x8_t v62 = a6 + 32;
    uint64_t v63 = v57 + v56;
    uint64_t v64 = v57 + v58;
    uint64_t v65 = v63 + v58;
    v66.i64[0] = 0x101010101010101;
    v66.i64[1] = 0x101010101010101;
    do
    {
      _X16 = v64 + v59 + 16;
      _X17 = v65 + v59 + 16;
      int8x16_t v69 = *(int8x16_t *)(v65 + v59);
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X17]
      }
      v61[-16] = vqtbl1q_s8(v27, *(int8x16_t *)(v64 + v59));
      v61[-15] = vqtbl1q_s8(v27, v69);
      int8x16_t v72 = (int8x16_t)vcgtq_u8((uint8x16_t)v69, v66);
      *int v61 = vandq_s8(v31, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8));
      v61[1] = vandq_s8(v31, (int8x16_t)vmovl_high_s8(v72));
      v61 += 2;
      *v62++ = v22;
      v55 += 2;
      v64 += v60;
      v65 += v60;
    }
    while (v55 < a4 >> 3);
  }
  return result;
}

unint64_t sub_1BBAD67F0(unint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(result + 1360);
  uint64_t v8 = (uint64_t)a3 >> 3;
  uint64_t v10 = *(void *)(v7 + 488);
  uint64_t v9 = *(void *)(v7 + 496);
  uint64_t v11 = *(void *)(v7 + 608);
  uint64_t v12 = *(void *)(v7 + 624);
  uint64_t v13 = *(void *)(v7 + 616);
  int v14 = (int32x4_t *)(*(void *)(v7 + 640) + v13 * ((uint64_t)(a2 + 8) >> 3) + (a3 >> 2));
  int v15 = *(unsigned __int8 *)(v7 + 284);
  int v16 = (const __int16 *)(*(void *)(result + 1384) + 14);
  int32x4_t v17 = *(int32x4_t *)((char *)v14 + v13);
  int32x4_t v18 = *(int32x4_t *)((char *)v14 + 2 * v13);
  int32x4_t v19 = *(int32x4_t *)((char *)v14 + 3 * v13);
  int32x4_t v20 = *(int32x4_t *)((char *)v14 + 4 * v13);
  int32x4_t v21 = *(int32x4_t *)((char *)v14 + 5 * v13);
  int32x4_t v22 = *(int32x4_t *)((char *)v14 + 6 * v13);
  int32x4_t v23 = *(int32x4_t *)((char *)v14 + 7 * v13);
  int64x2_t v24 = (int64x2_t)vtrn1q_s32(*v14, v17);
  int64x2_t v25 = (int64x2_t)vtrn2q_s32(*v14, v17);
  int64x2_t v26 = (int64x2_t)vtrn1q_s32(v18, v19);
  int64x2_t v27 = (int64x2_t)vtrn2q_s32(v18, v19);
  int64x2_t v28 = vzip1q_s64(v24, v26);
  int64x2_t v29 = vzip2q_s64(v24, v26);
  int64x2_t v30 = vzip1q_s64(v25, v27);
  int64x2_t v31 = vzip2q_s64(v25, v27);
  int64x2_t v32 = (int64x2_t)vtrn1q_s32(v20, v21);
  int64x2_t v33 = (int64x2_t)vtrn1q_s32(v22, v23);
  v130[0] = v28;
  v130[1] = vzip1q_s64(v32, v33);
  int8x16_t v34 = (int8x16_t)vld1q_dup_s16(v16);
  int v35 = *(unsigned __int8 *)(result + 628);
  int v36 = *(unsigned __int8 *)(result + 629);
  _X8 = v9 + 2 * (v10 * v8 + (a2 >> 3));
  int64x2_t v38 = (int64x2_t)vtrn2q_s32(v20, v21);
  int64x2_t v39 = (int64x2_t)vtrn2q_s32(v22, v23);
  v130[2] = v30;
  v130[3] = vzip1q_s64(v38, v39);
  v130[4] = v29;
  v130[5] = vzip2q_s64(v32, v33);
  v130[6] = v31;
  v130[7] = vzip2q_s64(v38, v39);
  _X14 = &v14->i8[8 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[9 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[10 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[11 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[12 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[13 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[14 * v13];
  __asm { PRFM            #0, [X14] }
  _X9 = (uint64_t)v14[v13].i64 - v13;
  __asm { PRFM            #0, [X9] }
  if (a3)
  {
    _X9 = (uint16x8_t *)(_X8 - 2 * v10);
    uint16x8_t v61 = *_X9;
    _X9 += 2;
    unsigned long long v62 = (unsigned __int128)vshrq_n_u16(v61, 2uLL);
    __asm { PRFM            #0, [X9] }
  }
  else
  {
    unsigned long long v62 = 0uLL;
  }
  if (a5 >= 8)
  {
    uint64_t v64 = 0;
    unint64_t v65 = 0;
    uint8x16_t v66 = (uint8x16_t)vdupq_n_s8(v15 - 8);
    uint64_t v67 = (uint64_t)a2 >> 2;
    uint8x16_t v68 = vshlq_u8((uint8x16_t)xmmword_1BBB6FA70, v66);
    uint8x16_t v69 = vshlq_u8((uint8x16_t)xmmword_1BBB6FA80, v66);
    uint8x16_t v70 = vshlq_u8((uint8x16_t)xmmword_1BBB6FA90, v66);
    uint8x16_t v71 = vshlq_u8((uint8x16_t)xmmword_1BBB6FAA0, v66);
    uint8x16_t v72 = vshlq_u8((uint8x16_t)xmmword_1BBB6FAB0, v66);
    int8x16_t v73 = vdupq_n_s8(v35 - 16);
    int8x16_t v74 = vdupq_n_s8(v36 - 20);
    uint8x16_t v75 = vshlq_u8((uint8x16_t)xmmword_1BBB6FAC0, v66);
    int8x16_t v76 = vdupq_n_s8(v36 - 16);
    unint64_t v77 = a5 >> 3;
    uint64_t v78 = 2 * v10;
    uint64_t v79 = 2 * v11;
    uint64_t v80 = v12 + v11 * v8;
    uint64_t v81 = v12 + v11 + v11 * v8;
    uint64_t v82 = 4 * v10;
    uint64_t result = 384;
    uint64_t v83 = 256;
    uint64_t v84 = 576;
    v85.i64[0] = 0x2323232323232323;
    v85.i64[1] = 0x2323232323232323;
    v86.i64[0] = 0x101010101010101;
    v86.i64[1] = 0x101010101010101;
    v87.i64[0] = 0x1E1E1E1E1E1E1E1ELL;
    v87.i64[1] = 0x1E1E1E1E1E1E1E1ELL;
    v88.i64[0] = 0xE2E2E2E2E2E2E2E2;
    v88.i64[1] = 0xE2E2E2E2E2E2E2E2;
    long long v89 = xmmword_1BBB6FAD0;
    long long v90 = xmmword_1BBB6FAE0;
    do
    {
      unsigned long long v91 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)_X8, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      unsigned long long v92 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)(_X8 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      _X6 = _X8 + v78;
      *(int8x8_t *)v6.i8 = vraddhn_s16((int16x8_t)v62, (int16x8_t)v91);
      unsigned long long v62 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)(_X8 + v78), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      int8x16_t v94 = vzip1q_s8(v6, v6);
      int8x16_t v95 = vraddhn_high_s16(*(int8x8_t *)v6.i8, (int16x8_t)v91, (int16x8_t)v62);
      *(int8x8_t *)&unsigned long long v91 = vraddhn_s16((int16x8_t)v91, (int16x8_t)v92);
      *(int8x8_t *)&unsigned long long v92 = vraddhn_s16((int16x8_t)v62, (int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)(_X8 + v78 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80)));
      int8x16_t v96 = vzip1q_s8((int8x16_t)v91, (int8x16_t)v92);
      __asm
      {
        PRFM            #0, [X8,#0x20]
        PRFM            #0, [X6,#0x20]
      }
      *(int8x16_t *)(a6 + v84) = vqtbl3q_s8(*(int8x16x3_t *)v68.i8, vminq_s8(vaddq_s8(v95, v73), v85));
      int8x16_t v99 = vqtbl3q_s8(*(int8x16x3_t *)v68.i8, vminq_s8(vaddq_s8(v96, v73), v85));
      *(_WORD *)(a6 + v65 + 520) = v99.i16[1];
      *(_WORD *)(a6 + v65 + 528) = v99.i16[2];
      *(_WORD *)(a6 + v65 + 536) = v99.i16[3];
      *(_WORD *)(a6 + v65 + 544) = v99.i16[4];
      *(_WORD *)(a6 + v65 + 552) = v99.i16[5];
      *(_WORD *)(a6 + v65 + 560) = v99.i16[6];
      *(_WORD *)(a6 + v65 + 568) = v99.i16[7];
      *(_WORD *)(a6 + v65 + 512) = v99.i16[0];
      int8x16_t v100 = vaddq_s8(v95, v74);
      int8x16_t v101 = vzip1q_s8(v100, v100);
      _X4 = v80 + v67 + 16;
      int8x16_t v103 = *(int8x16_t *)(v80 + v67);
      _X6 = v81 + v67 + 16;
      int8x16_t v105 = *(int8x16_t *)(v81 + v67);
      __asm
      {
        PRFM            #0, [X4]
        PRFM            #0, [X6]
      }
      int8x16_t v108 = vceqzq_s8(v105);
      int8x16_t v109 = vminq_s8(vaddq_s8(vaddq_s8(v105, v105), vzip2q_s8(v100, v100)), v85);
      int16x8_t v110 = (int8x16_t *)(a6 + 16 * v65);
      int32x4_t v111 = (int32x4_t)v130[result / 0x10 - 24];
      int32x4_t v112 = (int32x4_t)v130[result / 0x10 - 23];
      int8x16_t v113 = vaddq_s8(v96, v74);
      uint8x16_t v114 = (uint8x16_t)vuzp2q_s32(v111, v112);
      int8x16_t v115 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v111, (int8x16_t)v111), vzip1q_s8(v113, v113)), v85)), vceqzq_s8((int8x16_t)v111));
      int8x16_t v116 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v112, (int8x16_t)v112), vzip2q_s8(v113, v113)), v85)), vceqzq_s8((int8x16_t)v112));
      int16x8_t v117 = (_DWORD *)(a6 + v64);
      v110[8] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vaddq_s8(v103, v103), v101), v85)), vceqzq_s8(v103));
      v110[9] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v71.i8, v109), v108);
      *(_DWORD *)(a6 + v64 + 16) = v115.i32[1];
      *(_DWORD *)(a6 + v64 + 32) = v115.i32[2];
      int8x16_t v118 = vaddq_s8(vqtbl1q_s8(v96, (int8x16_t)xmmword_1BBB6FAF0), v34);
      *int16x8_t v117 = v115.i32[0];
      *(_DWORD *)(a6 + v64 + 48) = v115.i32[3];
      int16x8_t v119 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vbslq_s8(vcgtq_s8(v87, v118), v118, vqtbl2q_s8(*(int8x16x2_t *)&v90, vaddq_s8(v118, v88))), v76), v85));
      v117[16] = v116.i32[0];
      int8x16_t v120 = (int8x16_t)vcgtq_u8(v114, v86);
      int8x16_t v121 = vandq_s8((int8x16_t)vzip1q_s16(v119, v119), (int8x16_t)vmovl_s8(*(int8x8_t *)v120.i8));
      *(_DWORD *)(a6 + v64 + 80) = v116.i32[1];
      int8x16_t v122 = vandq_s8((int8x16_t)vzip2q_s16(v119, v119), (int8x16_t)vmovl_high_s8(v120));
      int8x8_t v123 = (void *)(a6 + v83);
      int8x8_t v124 = (void *)(a6 + v83 + 96);
      *(_DWORD *)(a6 + v64 + 96) = v116.i32[2];
      int8x16_t v125 = vaddq_s8(v94, v34);
      *(_DWORD *)(a6 + v64 + 112) = v116.i32[3];
      int16x8_t v126 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vbslq_s8(vcgtq_s8(v87, v125), v125, vqtbl2q_s8(*(int8x16x2_t *)&v90, vaddq_s8(v125, v88))), v76), v85));
      *int8x8_t v123 = v121.i64[0];
      int8x16_t v127 = (int8x16_t)vcgtq_u8((uint8x16_t)v103, v86);
      int8x16_t v128 = (int8x16_t)vmovl_s8(*(int8x8_t *)v127.i8);
      int8x16_t v6 = (int8x16_t)vmovl_high_s8(v127);
      *(void *)(a6 + v83 + 32) = v121.i64[1];
      int16x8_t v129 = (int8x16_t *)(a6 + result);
      v65 += 2;
      v80 += v79;
      v123[8] = v122.i64[0];
      result += 32;
      v81 += v79;
      v83 += 8;
      _X8 += v82;
      void *v124 = v122.i64[1];
      int8x16_t *v129 = vandq_s8((int8x16_t)vzip1q_s16(v126, v126), v128);
      v129[1] = vandq_s8((int8x16_t)vzip2q_s16(v126, v126), v6);
      v84 += 16;
      v64 += 4;
    }
    while (v65 < v77);
  }
  return result;
}

void *sub_1BBAD6CF4(void *result, int a2)
{
  if (a2 == 8)
  {
    result[3] = sub_1BBAD8C6C;
    result[4] = sub_1BBAD8C6C;
    result[5] = sub_1BBAD8C6C;
    result[6] = sub_1BBAD8C6C;
    result[7] = sub_1BBAD8C6C;
    result[8] = sub_1BBAD8EF0;
    result[9] = sub_1BBAD8E6C;
    result[10] = sub_1BBAD8B2C;
    result[11] = sub_1BBAD8B2C;
    result[12] = sub_1BBAD8B2C;
    result[23] = sub_1BBAD8C64;
    result[24] = sub_1BBAD8C64;
    result[25] = sub_1BBAD8C64;
    result[26] = sub_1BBAD8C64;
    result[27] = sub_1BBAD8BDC;
    result[28] = sub_1BBAD8B24;
    result[29] = sub_1BBAD8B24;
    result[30] = sub_1BBAD8B24;
    result[13] = sub_1BBAD87E8;
    result[14] = sub_1BBAD85C4;
    result[15] = sub_1BBAD83DC;
    result[16] = sub_1BBAD7FCC;
    result[31] = sub_1BBAD7D38;
    result[32] = sub_1BBAD79EC;
    result[33] = sub_1BBAD76EC;
    result[18] = sub_1BBAD87E8;
    result[19] = sub_1BBAD85C4;
    result[35] = sub_1BBAD7D38;
    result[36] = sub_1BBAD79EC;
    result[39] = sub_1BBAD74D8;
    result[40] = sub_1BBAD7314;
    result[41] = sub_1BBAD6E3C;
  }
  return result;
}

float sub_1BBAD6E3C(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v73;
  sub_1BBAD717C(a1, a2, a3, a4, 32, v73, 8u, (uint32x4_t *)(a5 + 84));
  sub_1BBAD717C(a1 + 2, a2, a3 + 2, a4, 32, v74, 8u, (uint32x4_t *)(a5 + 100));
  for (unsigned int i = 0; i != 4; ++i)
  {
    int32x4_t v12 = 0uLL;
    uint64_t v13 = 9;
    uint32x4_t v14 = 0uLL;
    do
    {
      int v15 = &v10[v13];
      int16x8_t v16 = v10[v13 - 9];
      int16x8_t v17 = v10[v13 - 8];
      int16x8_t v18 = v10[v13 - 1];
      int16x8_t v19 = v10[v13];
      int16x8_t v20 = v10[v13 + 7];
      int16x8_t v21 = v10[v13 + 8];
      int16x8_t v22 = vaddq_s16(v18, v16);
      int16x8_t v23 = vaddq_s16(v19, v17);
      int16x8_t v24 = v10[v13 + 15];
      int16x8_t v25 = v10[v13 + 16];
      int64x2_t v26 = (int64x2_t)vsubq_s16(v16, v18);
      int64x2_t v27 = (int64x2_t)vsubq_s16(v17, v19);
      int16x8_t v28 = vaddq_s16(v24, v20);
      int16x8_t v29 = vaddq_s16(v25, v21);
      int64x2_t v30 = (int64x2_t)vsubq_s16(v20, v24);
      int64x2_t v31 = (int64x2_t)vsubq_s16(v21, v25);
      int16x8_t v32 = (int16x8_t)vzip2q_s64((int64x2_t)v22, v26);
      int16x8_t v33 = (int16x8_t)vzip2q_s64((int64x2_t)v23, v27);
      int16x8_t v34 = (int16x8_t)vzip2q_s64((int64x2_t)v28, v30);
      int16x8_t v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
      v22.i64[1] = v26.i64[0];
      v23.i64[1] = v27.i64[0];
      int16x8_t v36 = vaddq_s16(v32, v22);
      int16x8_t v37 = vaddq_s16(v33, v23);
      int16x8_t v38 = vsubq_s16(v22, v32);
      int16x8_t v39 = vsubq_s16(v23, v33);
      v28.i64[1] = v30.i64[0];
      v29.i64[1] = v31.i64[0];
      int16x8_t v40 = vaddq_s16(v34, v28);
      int16x8_t v41 = vaddq_s16(v35, v29);
      int16x8_t v42 = vsubq_s16(v28, v34);
      int16x8_t v43 = vsubq_s16(v29, v35);
      uint32x4_t v14 = vpadalq_u16(v14, (uint16x8_t)vpaddq_s16(vpaddq_s16(vaddq_s16(vabsq_s16(v38), vabsq_s16(v36)), vaddq_s16(vabsq_s16(v39), vabsq_s16(v37))), vpaddq_s16(vaddq_s16(vabsq_s16(v42), vabsq_s16(v40)), vaddq_s16(vabsq_s16(v43), vabsq_s16(v41)))));
      int16x8_t v44 = vsubq_s16(v36, v40);
      int16x8_t v45 = vsubq_s16(v37, v41);
      int16x8_t v46 = vsubq_s16(v38, v42);
      int16x8_t v47 = vsubq_s16(v39, v43);
      int32x4_t v12 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v12, (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v44), (uint16x8_t)vabsq_s16(v45)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v40, v36)), (uint16x8_t)vabsq_s16(vaddq_s16(v41, v37))))), (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v46), (uint16x8_t)vabsq_s16(v47)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v42, v38)), (uint16x8_t)vabsq_s16(vaddq_s16(v43, v39)))));
      int16x8_t v48 = vrhaddq_s16(v36, v40);
      int16x8_t v49 = vrhaddq_s16(v37, v41);
      int16x8_t v50 = vrshrq_n_s16(v44, 1uLL);
      int16x8_t v51 = vrshrq_n_s16(v45, 1uLL);
      int16x8_t v52 = vrhaddq_s16(v38, v42);
      int16x8_t v53 = vrhaddq_s16(v39, v43);
      int16x8_t v54 = vrshrq_n_s16(v46, 1uLL);
      v15[-9] = vhaddq_s16(v48, v49);
      v15[-8] = vhaddq_s16(v50, v51);
      int16x8_t v55 = vrshrq_n_s16(v47, 1uLL);
      v15[-1] = vhaddq_s16(v52, v53);
      *int v15 = vhaddq_s16(v54, v55);
      v15[7] = vhsubq_s16(v48, v49);
      v15[8] = vhsubq_s16(v50, v51);
      v15[15] = vhsubq_s16(v52, v53);
      v15[16] = vhsubq_s16(v54, v55);
      v13 += 2;
    }
    while (v13 != 17);
    uint32x4_t v56 = vrshrq_n_u32(v14, 2uLL);
    int v57 = (i & 0x7FFFFFFE) + 8 * (i & 1);
    *(void *)(a5 + 4 * (v57 + 5)) = v56.i64[0];
    *(void *)(a5 + 4 * (v57 + 9)) = v56.i64[1];
    *(_DWORD *)(a5 + 4 * ((i >> 1) + 2 * (i & 1) + 1)) = (vaddvq_s32(v12) + 2) >> 2;
    v10 += 32;
  }
  uint64_t v58 = 0;
  int32x4_t v59 = 0uLL;
  do
  {
    int16x8_t v60 = v73[v58];
    int16x8_t v61 = v73[v58 + 1];
    int16x8_t v62 = v73[v58 + 64];
    int16x8_t v63 = v74[v58 + 1];
    int16x8_t v64 = v73[v58 + 32];
    int16x8_t v65 = v73[v58 + 33];
    int16x8_t v66 = v74[v58 + 32];
    int16x8_t v67 = v74[v58 + 33];
    int16x8_t v68 = vaddq_s16(v64, v60);
    int16x8_t v69 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v60, v64)), (uint16x8_t)vabsq_s16(vsubq_s16(v62, v66)));
    uint16x8_t v70 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v65, v61)), (uint16x8_t)vabsq_s16(vaddq_s16(v67, v63))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v68), (uint16x8_t)vabsq_s16(vaddq_s16(v66, v62))));
    uint16x8_t v71 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v61, v65)), (uint16x8_t)vabsq_s16(vsubq_s16(v63, v67))), v69);
    int32x4_t v59 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v59, v70), *(uint16x4_t *)v70.i8), v71), *(uint16x4_t *)v71.i8);
    v58 += 2;
  }
  while (v58 != 32);
  float result = COERCE_FLOAT(vaddvq_s32(v59));
  *(_DWORD *)a5 = (LODWORD(result) + 1) >> 1;
  return result;
}

uint8x8_t *sub_1BBAD717C(uint8x8_t *result, uint64_t a2, uint8x8_t *a3, uint64_t a4, int a5, int16x8_t *a6, unsigned int a7, uint32x4_t *a8)
{
  int v8 = a5 + 4;
  do
  {
    uint8x16_t v9 = *(uint8x16_t *)&result->i8[a2];
    uint64_t v10 = (uint8x16_t *)((char *)result + a2 + a2);
    uint8x16_t v11 = *v10;
    int32x4_t v12 = (uint8x8_t *)&v10->i8[a2];
    uint8x16_t v13 = *(uint8x16_t *)&a3->i8[a4];
    uint32x4_t v14 = (uint8x16_t *)((char *)a3 + a4 + a4);
    uint8x16_t v15 = *v14;
    int16x8_t v16 = (uint8x8_t *)&v14->i8[a4];
    int16x8_t v17 = (int16x8_t)vsubl_u8(*result, *a3);
    int16x8_t v18 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)result->i8, *(uint8x16_t *)a3->i8);
    int16x8_t v19 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v13.i8);
    int16x8_t v20 = (int16x8_t)vsubl_high_u8(v9, v13);
    int16x8_t v21 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v15.i8);
    int16x8_t v22 = (int16x8_t)vsubl_high_u8(v11, v15);
    int16x8_t v23 = (int16x8_t)vsubl_u8(*v12, *v16);
    int16x8_t v24 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v12->i8, *(uint8x16_t *)v16->i8);
    int16x8_t v25 = vaddq_s16(v19, v17);
    int16x8_t v26 = vaddq_s16(v20, v18);
    int16x8_t v27 = vsubq_s16(v17, v19);
    int16x8_t v28 = vsubq_s16(v18, v20);
    int16x8_t v29 = vaddq_s16(v23, v21);
    int16x8_t v30 = vaddq_s16(v24, v22);
    int16x8_t v31 = vsubq_s16(v21, v23);
    int16x8_t v32 = vsubq_s16(v22, v24);
    int16x8_t v33 = vtrn1q_s16(v25, v27);
    int16x8_t v34 = vtrn2q_s16(v25, v27);
    int16x8_t v35 = vtrn1q_s16(v26, v28);
    int16x8_t v36 = vtrn2q_s16(v26, v28);
    int16x8_t v37 = vtrn1q_s16(v29, v31);
    int16x8_t v38 = vtrn2q_s16(v29, v31);
    int16x8_t v39 = vtrn1q_s16(v30, v32);
    int16x8_t v40 = vtrn2q_s16(v30, v32);
    int16x8_t v41 = vaddq_s16(v34, v33);
    int16x8_t v42 = vaddq_s16(v36, v35);
    int16x8_t v43 = vsubq_s16(v33, v34);
    int16x8_t v44 = vsubq_s16(v35, v36);
    int16x8_t v45 = vaddq_s16(v38, v37);
    int16x8_t v46 = vaddq_s16(v40, v39);
    int16x8_t v47 = vsubq_s16(v37, v38);
    int16x8_t v48 = vsubq_s16(v39, v40);
    int32x4_t v49 = (int32x4_t)vaddq_s16(v45, v41);
    int32x4_t v50 = (int32x4_t)vaddq_s16(v46, v42);
    int32x4_t v51 = (int32x4_t)vsubq_s16(v41, v45);
    int32x4_t v52 = (int32x4_t)vsubq_s16(v42, v46);
    int32x4_t v53 = (int32x4_t)vaddq_s16(v47, v43);
    int32x4_t v54 = (int32x4_t)vaddq_s16(v48, v44);
    int32x4_t v55 = (int32x4_t)vsubq_s16(v43, v47);
    int32x4_t v56 = (int32x4_t)vsubq_s16(v44, v48);
    int16x8_t v57 = (int16x8_t)vtrn1q_s32(v49, v51);
    int16x8_t v58 = (int16x8_t)vtrn2q_s32(v49, v51);
    int16x8_t v59 = (int16x8_t)vtrn1q_s32(v50, v52);
    int16x8_t v60 = (int16x8_t)vtrn2q_s32(v50, v52);
    int16x8_t v61 = (int16x8_t)vtrn1q_s32(v53, v55);
    int16x8_t v62 = (int16x8_t)vtrn2q_s32(v53, v55);
    int16x8_t v63 = (int16x8_t)vtrn1q_s32(v54, v56);
    int16x8_t v64 = (int16x8_t)vtrn2q_s32(v54, v56);
    int16x8_t v65 = vaddq_s16(v58, v57);
    int16x8_t v66 = vaddq_s16(v60, v59);
    int16x8_t v67 = vsubq_s16(v57, v58);
    int16x8_t v68 = vsubq_s16(v59, v60);
    int16x8_t v69 = vaddq_s16(v62, v61);
    int16x8_t v70 = vaddq_s16(v64, v63);
    int16x8_t v71 = vsubq_s16(v61, v62);
    int16x8_t v72 = vsubq_s16(v63, v64);
    *a8 = vshrq_n_u32(vpaddlq_u16((uint16x8_t)vpaddq_s16(vaddq_s16(vaddq_s16(vabsq_s16(v69), vabsq_s16(v65)), vaddq_s16(vabsq_s16(v67), vabsq_s16(v71))), vaddq_s16(vaddq_s16(vabsq_s16(v70), vabsq_s16(v66)), vaddq_s16(vabsq_s16(v68), vabsq_s16(v72))))), 1uLL);
    *a6 = v65;
    a6[1] = v66;
    a6[2] = v69;
    a6[3] = v70;
    a6[4] = v67;
    a6[5] = v68;
    v8 -= 4;
    a8 = (uint32x4_t *)((char *)a8 + 4 * a7);
    a6[6] = v71;
    a6[7] = v72;
    float result = (uint8x8_t *)((char *)v12 + a2);
    a3 = (uint8x8_t *)((char *)v16 + a4);
    a6 += 8;
  }
  while (v8 > 4);
  return result;
}

float sub_1BBAD7314(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  sub_1BBAD717C(a1, a2, a3, a4, 16, v42, 4u, (uint32x4_t *)(a5 + 20));
  int32x4_t v6 = 0uLL;
  uint64_t v7 = 9;
  uint32x4_t v8 = 0uLL;
  do
  {
    int16x8_t v9 = v42[v7 - 9];
    int16x8_t v10 = v42[v7 - 8];
    int16x8_t v11 = v42[v7 - 1];
    int16x8_t v12 = v42[v7];
    int16x8_t v13 = v42[v7 + 7];
    int16x8_t v14 = v42[v7 + 8];
    int16x8_t v15 = v42[v7 + 15];
    int16x8_t v16 = v42[v7 + 16];
    int16x8_t v17 = vaddq_s16(v11, v9);
    int16x8_t v18 = vaddq_s16(v12, v10);
    int64x2_t v19 = (int64x2_t)vsubq_s16(v9, v11);
    int64x2_t v20 = (int64x2_t)vsubq_s16(v10, v12);
    int16x8_t v21 = vaddq_s16(v15, v13);
    int16x8_t v22 = vaddq_s16(v16, v14);
    int64x2_t v23 = (int64x2_t)vsubq_s16(v13, v15);
    int64x2_t v24 = (int64x2_t)vsubq_s16(v14, v16);
    int16x8_t v25 = (int16x8_t)vzip2q_s64((int64x2_t)v17, v19);
    int16x8_t v26 = (int16x8_t)vzip2q_s64((int64x2_t)v18, v20);
    int16x8_t v27 = (int16x8_t)vzip2q_s64((int64x2_t)v21, v23);
    int16x8_t v28 = (int16x8_t)vzip2q_s64((int64x2_t)v22, v24);
    v17.i64[1] = v19.i64[0];
    v18.i64[1] = v20.i64[0];
    int16x8_t v29 = vaddq_s16(v25, v17);
    int16x8_t v30 = vaddq_s16(v26, v18);
    int16x8_t v31 = vsubq_s16(v17, v25);
    v21.i64[1] = v23.i64[0];
    v22.i64[1] = v24.i64[0];
    int16x8_t v32 = vsubq_s16(v18, v26);
    int16x8_t v33 = vaddq_s16(v27, v21);
    int16x8_t v34 = vaddq_s16(v28, v22);
    int16x8_t v35 = vsubq_s16(v21, v27);
    int16x8_t v36 = vsubq_s16(v22, v28);
    int16x8_t v37 = vaddq_s16(vabsq_s16(v31), vabsq_s16(v29));
    int16x8_t v38 = vaddq_s16(vabsq_s16(v32), vabsq_s16(v30));
    uint16x8_t v39 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v29, v33)), (uint16x8_t)vabsq_s16(vsubq_s16(v30, v34))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v33, v29)), (uint16x8_t)vabsq_s16(vaddq_s16(v34, v30))));
    uint16x8_t v40 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v31, v35)), (uint16x8_t)vabsq_s16(vsubq_s16(v32, v36))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v35, v31)), (uint16x8_t)vabsq_s16(vaddq_s16(v36, v32))));
    uint32x4_t v8 = vpadalq_u16(v8, (uint16x8_t)vpaddq_s16(vpaddq_s16(v37, v38), vpaddq_s16(vaddq_s16(vabsq_s16(v35), vabsq_s16(v33)), vaddq_s16(vabsq_s16(v36), vabsq_s16(v34)))));
    int32x4_t v6 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v6, v39), *(uint16x4_t *)v39.i8), v40), *(uint16x4_t *)v40.i8);
    v7 += 2;
  }
  while (v7 != 17);
  *(uint32x4_t *)(a5 + 4) = vrshrq_n_u32(v8, 2uLL);
  float result = COERCE_FLOAT(vaddvq_s32(v6));
  *(_DWORD *)a5 = (LODWORD(result) + 2) >> 2;
  return result;
}

float sub_1BBAD74D8(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  int16x8_t v5 = (int16x8_t)vsubl_u8(*a1, *a3);
  int16x8_t v6 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4));
  int16x8_t v7 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2), *(uint8x8_t *)((char *)a3 + 2 * a4));
  int16x8_t v8 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 3 * a2), *(uint8x8_t *)((char *)a3 + 3 * a4));
  int16x8_t v9 = (uint8x8_t *)((char *)a1 + 4 * a2);
  int16x8_t v10 = (uint8x8_t *)((char *)a3 + 4 * a4);
  int16x8_t v11 = (int16x8_t)vsubl_u8(*v9, *v10);
  int16x8_t v12 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + a2), *(uint8x8_t *)((char *)v10 + a4));
  int16x8_t v13 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + 2 * a2), *(uint8x8_t *)((char *)v10 + 2 * a4));
  int16x8_t v14 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + 3 * a2), *(uint8x8_t *)((char *)v10 + 3 * a4));
  int16x8_t v15 = vaddq_s16(v6, v5);
  int16x8_t v16 = vsubq_s16(v5, v6);
  int16x8_t v17 = vaddq_s16(v8, v7);
  int16x8_t v18 = vsubq_s16(v7, v8);
  int16x8_t v19 = vtrn1q_s16(v15, v16);
  int16x8_t v20 = vtrn2q_s16(v15, v16);
  int16x8_t v21 = vtrn1q_s16(v17, v18);
  int16x8_t v22 = vtrn2q_s16(v17, v18);
  int16x8_t v23 = vaddq_s16(v20, v19);
  int16x8_t v24 = vsubq_s16(v19, v20);
  int16x8_t v25 = vaddq_s16(v22, v21);
  int16x8_t v26 = vsubq_s16(v21, v22);
  int32x4_t v27 = (int32x4_t)vaddq_s16(v25, v23);
  int32x4_t v28 = (int32x4_t)vsubq_s16(v23, v25);
  int32x4_t v29 = (int32x4_t)vaddq_s16(v26, v24);
  int32x4_t v30 = (int32x4_t)vsubq_s16(v24, v26);
  int16x8_t v31 = (int16x8_t)vtrn1q_s32(v27, v28);
  int16x8_t v32 = (int16x8_t)vtrn2q_s32(v27, v28);
  int16x8_t v33 = (int16x8_t)vtrn1q_s32(v29, v30);
  int16x8_t v34 = (int16x8_t)vtrn2q_s32(v29, v30);
  int16x8_t v35 = vaddq_s16(v32, v31);
  int16x8_t v36 = vsubq_s16(v31, v32);
  int16x8_t v37 = vaddq_s16(v34, v33);
  int16x8_t v38 = vsubq_s16(v33, v34);
  int16x8_t v39 = vaddq_s16(v12, v11);
  int16x8_t v40 = vsubq_s16(v11, v12);
  int16x8_t v41 = vaddq_s16(v14, v13);
  int16x8_t v42 = vsubq_s16(v13, v14);
  int16x8_t v43 = vtrn1q_s16(v39, v40);
  int16x8_t v44 = vtrn2q_s16(v39, v40);
  int16x8_t v45 = vtrn1q_s16(v41, v42);
  int16x8_t v46 = vtrn2q_s16(v41, v42);
  int16x8_t v47 = vaddq_s16(v44, v43);
  int16x8_t v48 = vsubq_s16(v43, v44);
  int16x8_t v49 = vaddq_s16(v46, v45);
  int16x8_t v50 = vsubq_s16(v45, v46);
  int32x4_t v51 = (int32x4_t)vaddq_s16(v49, v47);
  int32x4_t v52 = (int32x4_t)vsubq_s16(v47, v49);
  int32x4_t v53 = (int32x4_t)vaddq_s16(v50, v48);
  int32x4_t v54 = (int32x4_t)vsubq_s16(v48, v50);
  int16x8_t v55 = (int16x8_t)vtrn1q_s32(v51, v52);
  int16x8_t v56 = (int16x8_t)vtrn2q_s32(v51, v52);
  int16x8_t v57 = (int16x8_t)vtrn1q_s32(v53, v54);
  int16x8_t v58 = (int16x8_t)vtrn2q_s32(v53, v54);
  int16x8_t v59 = vaddq_s16(v56, v55);
  int16x8_t v60 = vsubq_s16(v55, v56);
  int16x8_t v61 = vaddq_s16(v58, v57);
  int16x8_t v62 = vsubq_s16(v57, v58);
  *(uint32x4_t *)(a5 + 4) = vshrq_n_u32(vpaddlq_u16((uint16x8_t)vpaddq_s16(vaddq_s16(vaddq_s16(vabsq_s16(v37), vabsq_s16(v35)), vaddq_s16(vabsq_s16(v36), vabsq_s16(v38))), vaddq_s16(vaddq_s16(vabsq_s16(v61), vabsq_s16(v59)), vaddq_s16(vabsq_s16(v60), vabsq_s16(v62))))), 1uLL);
  int16x8_t v63 = vaddq_s16(v59, v35);
  int64x2_t v64 = (int64x2_t)vsubq_s16(v35, v59);
  int16x8_t v65 = vaddq_s16(v61, v37);
  int64x2_t v66 = (int64x2_t)vsubq_s16(v37, v61);
  int16x8_t v67 = vaddq_s16(v60, v36);
  int64x2_t v68 = (int64x2_t)vsubq_s16(v36, v60);
  int16x8_t v69 = vaddq_s16(v62, v38);
  int64x2_t v70 = (int64x2_t)vsubq_s16(v38, v62);
  int16x8_t v71 = (int16x8_t)vzip2q_s64((int64x2_t)v63, v64);
  int16x8_t v72 = (int16x8_t)vzip2q_s64((int64x2_t)v65, v66);
  int16x8_t v73 = (int16x8_t)vzip2q_s64((int64x2_t)v67, v68);
  int16x8_t v74 = (int16x8_t)vzip2q_s64((int64x2_t)v69, v70);
  v63.i64[1] = v64.i64[0];
  v65.i64[1] = v66.i64[0];
  v67.i64[1] = v68.i64[0];
  v69.i64[1] = v70.i64[0];
  float result = COERCE_FLOAT(vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v65), (uint16x8_t)vabsq_s16(v72)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v63), (uint16x8_t)vabsq_s16(v71))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v67), (uint16x8_t)vabsq_s16(v73)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v69), (uint16x8_t)vabsq_s16(v74))))));
  *(_DWORD *)a5 = (LODWORD(result) + 1) >> 1;
  return result;
}

float sub_1BBAD76EC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  int32x2_t v6 = 0;
  do
  {
    if (a1 >= 1)
    {
      for (uint64_t i = 0; i < a1; i += 16)
      {
        unsigned int v8 = 0;
        uint64_t v9 = a3 + 2 * i;
        int16x8_t v10 = (int16x8_t *)v99;
        uint64_t v11 = a5 + 2 * i;
        do
        {
          uint64_t v12 = 0;
          char v13 = 1;
          do
          {
            int16x8_t v14 = (uint8x8_t *)(v9 + v12);
            int16x8_t v15 = (uint8x8_t *)(v11 + v12);
            uint8x16_t v16 = *(uint8x16_t *)&v14->i8[a4];
            uint8x16_t v17 = *(uint8x16_t *)&v14->i8[2 * a4];
            uint8x16_t v18 = *(uint8x16_t *)&v14->i8[3 * a4];
            uint8x16_t v19 = *(uint8x16_t *)&v15->i8[a6];
            uint8x16_t v20 = *(uint8x16_t *)&v15->i8[2 * a6];
            int16x8_t v21 = (int16x8_t)vsubl_u8(*v14, *v15);
            int16x8_t v22 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v14->i8, *(uint8x16_t *)v15->i8);
            int16x8_t v23 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v19.i8);
            int16x8_t v24 = (int16x8_t)vsubl_high_u8(v16, v19);
            int16x8_t v25 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v20.i8);
            int16x8_t v26 = (int16x8_t)vsubl_high_u8(v17, v20);
            uint8x16_t v27 = *(uint8x16_t *)&v15->i8[3 * a6];
            int16x8_t v28 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v27.i8);
            int16x8_t v29 = (int16x8_t)vsubl_high_u8(v18, v27);
            int16x8_t v30 = vaddq_s16(v23, v21);
            int16x8_t v31 = vsubq_s16(v21, v23);
            int16x8_t v32 = vaddq_s16(v28, v25);
            int16x8_t v33 = vsubq_s16(v25, v28);
            int16x8_t v34 = vzip1q_s16(v30, v31);
            int16x8_t v35 = vzip2q_s16(v30, v31);
            int16x8_t v36 = vzip1q_s16(v32, v33);
            int16x8_t v37 = vzip2q_s16(v32, v33);
            int32x4_t v38 = (int32x4_t)vaddq_s16(v36, v34);
            int32x4_t v39 = (int32x4_t)vsubq_s16(v34, v36);
            int32x4_t v40 = (int32x4_t)vaddq_s16(v37, v35);
            int32x4_t v41 = (int32x4_t)vsubq_s16(v35, v37);
            int16x8_t v42 = (int16x8_t)vzip1q_s32(v38, v39);
            int16x8_t v43 = (int16x8_t)vzip2q_s32(v38, v39);
            int16x8_t v44 = (int16x8_t)vzip1q_s32(v40, v41);
            int16x8_t v45 = (int16x8_t)vzip2q_s32(v40, v41);
            int16x8_t v46 = vaddq_s16(v43, v42);
            int16x8_t v47 = vsubq_s16(v42, v43);
            int16x8_t v48 = vaddq_s16(v45, v44);
            int16x8_t v49 = vsubq_s16(v44, v45);
            int16x8_t v50 = vaddq_s16(v46, v48);
            int16x8_t v51 = vsubq_s16(v46, v48);
            int16x8_t v52 = vaddq_s16(v49, v47);
            int16x8_t v53 = vsubq_s16(v47, v49);
            int16x8_t v54 = vaddq_s16(v24, v22);
            int16x8_t v55 = vsubq_s16(v22, v24);
            int16x8_t v56 = vaddq_s16(v29, v26);
            int16x8_t v57 = vsubq_s16(v26, v29);
            int16x8_t v58 = vzip1q_s16(v54, v55);
            int16x8_t v59 = vzip2q_s16(v54, v55);
            int16x8_t v60 = vzip1q_s16(v56, v57);
            int16x8_t v61 = vzip2q_s16(v56, v57);
            int32x4_t v62 = (int32x4_t)vaddq_s16(v60, v58);
            int32x4_t v63 = (int32x4_t)vsubq_s16(v58, v60);
            int32x4_t v64 = (int32x4_t)vaddq_s16(v61, v59);
            int32x4_t v65 = (int32x4_t)vsubq_s16(v59, v61);
            int16x8_t v66 = (int16x8_t)vzip1q_s32(v62, v63);
            int16x8_t v67 = (int16x8_t)vzip2q_s32(v62, v63);
            int16x8_t v68 = (int16x8_t)vzip1q_s32(v64, v65);
            int16x8_t v69 = (int16x8_t)vzip2q_s32(v64, v65);
            int16x8_t v70 = vaddq_s16(v67, v66);
            int16x8_t v71 = vsubq_s16(v66, v67);
            int16x8_t v72 = vaddq_s16(v69, v68);
            int16x8_t v73 = vsubq_s16(v68, v69);
            int16x8_t v74 = vaddq_s16(v70, v72);
            int16x8_t v75 = vsubq_s16(v70, v72);
            int16x8_t v76 = vaddq_s16(v73, v71);
            *int16x8_t v10 = vaddq_s16(v74, v50);
            v10[1] = vaddq_s16(v76, v52);
            LOBYTE(v14) = v13;
            int16x8_t v77 = vsubq_s16(v71, v73);
            void v10[2] = vaddq_s16(v75, v51);
            v10[3] = vaddq_s16(v77, v53);
            v10[4] = vsubq_s16(v50, v74);
            v10[5] = vsubq_s16(v52, v76);
            v10[6] = vsubq_s16(v51, v75);
            v10[7] = vsubq_s16(v53, v77);
            v10 += 8;
            uint64_t v12 = 16;
            char v13 = 0;
          }
          while ((v14 & 1) != 0);
          v9 += 4 * a4;
          v11 += 4 * a6;
          BOOL v78 = v8 >= 0xC;
          v8 += 4;
        }
        while (!v78);
        uint64_t v79 = 0;
        int32x4_t v80 = 0uLL;
        do
        {
          int16x8_t v81 = *(int16x8_t *)&v99[v79];
          int16x8_t v82 = *(int16x8_t *)&v99[v79 + 128];
          int16x8_t v83 = *(int16x8_t *)&v99[v79 + 256];
          int16x8_t v84 = *(int16x8_t *)&v99[v79 + 384];
          int16x8_t v85 = *(int16x8_t *)&v99[v79 + 512];
          int16x8_t v86 = *(int16x8_t *)&v99[v79 + 640];
          int16x8_t v87 = *(int16x8_t *)&v99[v79 + 768];
          int16x8_t v88 = *(int16x8_t *)&v99[v79 + 896];
          int16x8_t v89 = vaddq_s16(v83, v81);
          int16x8_t v90 = vaddq_s16(v84, v82);
          int16x8_t v91 = vsubq_s16(v81, v83);
          int16x8_t v92 = vsubq_s16(v82, v84);
          int16x8_t v93 = vaddq_s16(v87, v85);
          int16x8_t v94 = vaddq_s16(v88, v86);
          int16x8_t v95 = vsubq_s16(v85, v87);
          int16x8_t v96 = vsubq_s16(v86, v88);
          int32x4_t v80 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v80, (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v89, v93)), (uint16x8_t)vabsq_s16(vsubq_s16(v90, v94))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v93, v89)), (uint16x8_t)vabsq_s16(vaddq_s16(v94, v90))))), (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v91, v95)), (uint16x8_t)vabsq_s16(vsubq_s16(v92, v96))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v95, v91)), (uint16x8_t)vabsq_s16(vaddq_s16(v96, v92)))));
          v79 += 16;
        }
        while (v79 != 128);
        int32x2_t v6 = (int32x2_t)vrsra_n_u32((uint32x2_t)v6, (uint32x2_t)*(_OWORD *)&vpaddq_s32(v80, v80), 2uLL);
      }
    }
    a3 += 16 * a4;
    a5 += 16 * a6;
    BOOL v97 = __OFSUB__(a2, 16);
    a2 -= 16;
  }
  while (!((a2 < 0) ^ v97 | (a2 == 0)));
  LODWORD(result) = vpadd_s32(v6, v6).u32[0];
  return result;
}

float sub_1BBAD79EC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int32x2_t v6 = 0;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v7 = 0;
      for (uint64_t i = 0; i < a1; i += 8)
      {
        uint8x16_t v9 = *(uint8x16_t *)(a3 + v7);
        uint8x16_t v10 = *(uint8x16_t *)(a5 + v7);
        int16x8_t v11 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v10.i8);
        int16x8_t v12 = (int16x8_t)vsubl_high_u8(v9, v10);
        char v13 = (uint8x8_t *)(a3 + v7 + a4);
        int16x8_t v14 = (uint8x8_t *)(a5 + v7 + a6);
        int16x8_t v15 = (int16x8_t)vsubl_u8(*v13, *v14);
        int16x8_t v16 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v13->i8, *(uint8x16_t *)v14->i8);
        uint8x16_t v17 = (uint8x8_t *)((char *)v13 + a4);
        uint8x16_t v18 = (uint8x8_t *)((char *)v14 + a6);
        int16x8_t v19 = (int16x8_t)vsubl_u8(*v17, *v18);
        int16x8_t v20 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v17->i8, *(uint8x16_t *)v18->i8);
        int16x8_t v21 = (uint8x8_t *)((char *)v17 + a4);
        int16x8_t v22 = (uint8x8_t *)((char *)v18 + a6);
        int16x8_t v23 = (int16x8_t)vsubl_u8(*v21, *v22);
        int16x8_t v24 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v21->i8, *(uint8x16_t *)v22->i8);
        int16x8_t v25 = (uint8x8_t *)((char *)v21 + a4);
        int16x8_t v26 = (uint8x8_t *)((char *)v22 + a6);
        int16x8_t v27 = (int16x8_t)vsubl_u8(*v25, *v26);
        int16x8_t v28 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v25->i8, *(uint8x16_t *)v26->i8);
        int16x8_t v29 = (uint8x8_t *)((char *)v25 + a4);
        int16x8_t v30 = (uint8x8_t *)((char *)v26 + a6);
        int16x8_t v31 = (int16x8_t)vsubl_u8(*v29, *v30);
        int16x8_t v32 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v29->i8, *(uint8x16_t *)v30->i8);
        int16x8_t v33 = (uint8x8_t *)((char *)v29 + a4);
        int16x8_t v34 = (uint8x8_t *)((char *)v30 + a6);
        int16x8_t v35 = (int16x8_t)vsubl_u8(*v33, *v34);
        int16x8_t v36 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v33->i8, *(uint8x16_t *)v34->i8);
        uint8x16_t v37 = *(uint8x16_t *)&v33->i8[a4];
        uint8x16_t v38 = *(uint8x16_t *)&v34->i8[a6];
        int16x8_t v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v38.i8);
        int16x8_t v40 = (int16x8_t)vsubl_high_u8(v37, v38);
        int16x8_t v41 = vaddq_s16(v15, v11);
        int16x8_t v42 = vsubq_s16(v11, v15);
        int16x8_t v43 = vaddq_s16(v23, v19);
        int16x8_t v44 = vsubq_s16(v19, v23);
        int16x8_t v45 = vzip1q_s16(v41, v42);
        int16x8_t v46 = vzip2q_s16(v41, v42);
        int16x8_t v47 = vzip1q_s16(v43, v44);
        int16x8_t v48 = vzip2q_s16(v43, v44);
        int32x4_t v49 = (int32x4_t)vaddq_s16(v47, v45);
        int32x4_t v50 = (int32x4_t)vsubq_s16(v45, v47);
        int32x4_t v51 = (int32x4_t)vaddq_s16(v48, v46);
        int32x4_t v52 = (int32x4_t)vsubq_s16(v46, v48);
        int16x8_t v53 = (int16x8_t)vzip1q_s32(v49, v50);
        int16x8_t v54 = (int16x8_t)vzip2q_s32(v49, v50);
        int16x8_t v55 = (int16x8_t)vzip1q_s32(v51, v52);
        int16x8_t v56 = (int16x8_t)vzip2q_s32(v51, v52);
        int16x8_t v57 = vaddq_s16(v54, v53);
        int16x8_t v58 = vsubq_s16(v53, v54);
        int16x8_t v59 = vaddq_s16(v56, v55);
        int16x8_t v60 = vsubq_s16(v55, v56);
        int16x8_t v61 = vaddq_s16(v16, v12);
        int16x8_t v62 = vsubq_s16(v12, v16);
        int16x8_t v63 = vaddq_s16(v57, v59);
        int16x8_t v64 = vaddq_s16(v24, v20);
        int16x8_t v65 = vsubq_s16(v20, v24);
        int16x8_t v66 = vzip1q_s16(v61, v62);
        int16x8_t v67 = vzip2q_s16(v61, v62);
        int16x8_t v68 = vzip1q_s16(v64, v65);
        int16x8_t v69 = vsubq_s16(v57, v59);
        int16x8_t v70 = vzip2q_s16(v64, v65);
        int32x4_t v71 = (int32x4_t)vaddq_s16(v68, v66);
        int32x4_t v72 = (int32x4_t)vsubq_s16(v66, v68);
        int32x4_t v73 = (int32x4_t)vaddq_s16(v70, v67);
        int32x4_t v74 = (int32x4_t)vsubq_s16(v67, v70);
        int16x8_t v75 = vaddq_s16(v60, v58);
        int16x8_t v76 = (int16x8_t)vzip1q_s32(v71, v72);
        int16x8_t v77 = (int16x8_t)vzip2q_s32(v71, v72);
        int16x8_t v78 = (int16x8_t)vzip1q_s32(v73, v74);
        int16x8_t v79 = (int16x8_t)vzip2q_s32(v73, v74);
        int16x8_t v80 = vaddq_s16(v77, v76);
        int16x8_t v81 = vsubq_s16(v58, v60);
        int16x8_t v82 = vsubq_s16(v76, v77);
        int16x8_t v83 = vaddq_s16(v79, v78);
        int16x8_t v84 = vsubq_s16(v78, v79);
        int16x8_t v85 = vaddq_s16(v80, v83);
        int16x8_t v86 = vsubq_s16(v80, v83);
        int16x8_t v87 = vaddq_s16(v84, v82);
        int16x8_t v88 = vsubq_s16(v82, v84);
        int16x8_t v89 = vaddq_s16(v85, v63);
        int16x8_t v90 = vsubq_s16(v63, v85);
        int16x8_t v91 = vaddq_s16(v87, v75);
        int16x8_t v92 = vsubq_s16(v75, v87);
        int16x8_t v93 = vaddq_s16(v86, v69);
        int16x8_t v94 = vaddq_s16(v31, v27);
        int16x8_t v95 = vsubq_s16(v27, v31);
        int16x8_t v96 = vaddq_s16(v39, v35);
        int16x8_t v97 = vsubq_s16(v35, v39);
        int16x8_t v98 = vzip1q_s16(v94, v95);
        int16x8_t v99 = vsubq_s16(v69, v86);
        int16x8_t v100 = vzip2q_s16(v94, v95);
        int16x8_t v101 = vzip1q_s16(v96, v97);
        int16x8_t v102 = vzip2q_s16(v96, v97);
        int32x4_t v103 = (int32x4_t)vaddq_s16(v101, v98);
        int32x4_t v104 = (int32x4_t)vsubq_s16(v98, v101);
        int32x4_t v105 = (int32x4_t)vaddq_s16(v102, v100);
        int32x4_t v106 = (int32x4_t)vsubq_s16(v100, v102);
        int16x8_t v107 = (int16x8_t)vzip1q_s32(v103, v104);
        int16x8_t v108 = (int16x8_t)vzip2q_s32(v103, v104);
        int16x8_t v109 = (int16x8_t)vzip1q_s32(v105, v106);
        int16x8_t v110 = (int16x8_t)vzip2q_s32(v105, v106);
        int16x8_t v111 = vaddq_s16(v108, v107);
        int16x8_t v112 = vsubq_s16(v107, v108);
        int16x8_t v113 = vaddq_s16(v110, v109);
        int16x8_t v114 = vsubq_s16(v109, v110);
        int16x8_t v115 = vaddq_s16(v111, v113);
        int16x8_t v116 = vaddq_s16(v32, v28);
        int16x8_t v117 = vsubq_s16(v28, v32);
        int16x8_t v118 = vaddq_s16(v40, v36);
        int16x8_t v119 = vsubq_s16(v36, v40);
        int16x8_t v120 = vzip1q_s16(v116, v117);
        int16x8_t v121 = vsubq_s16(v111, v113);
        int16x8_t v122 = vzip2q_s16(v116, v117);
        int16x8_t v123 = vzip1q_s16(v118, v119);
        int16x8_t v124 = vzip2q_s16(v118, v119);
        int32x4_t v125 = (int32x4_t)vaddq_s16(v123, v120);
        int32x4_t v126 = (int32x4_t)vsubq_s16(v120, v123);
        int16x8_t v127 = vaddq_s16(v114, v112);
        int32x4_t v128 = (int32x4_t)vaddq_s16(v124, v122);
        int32x4_t v129 = (int32x4_t)vsubq_s16(v122, v124);
        int16x8_t v130 = (int16x8_t)vzip1q_s32(v125, v126);
        int16x8_t v131 = (int16x8_t)vzip2q_s32(v125, v126);
        int16x8_t v132 = (int16x8_t)vzip1q_s32(v128, v129);
        int16x8_t v133 = vsubq_s16(v112, v114);
        int16x8_t v134 = (int16x8_t)vzip2q_s32(v128, v129);
        int16x8_t v135 = vaddq_s16(v131, v130);
        int16x8_t v136 = vsubq_s16(v130, v131);
        int16x8_t v137 = vaddq_s16(v134, v132);
        int16x8_t v138 = vsubq_s16(v132, v134);
        int16x8_t v139 = vaddq_s16(v135, v137);
        int16x8_t v140 = vsubq_s16(v135, v137);
        int16x8_t v141 = vaddq_s16(v138, v136);
        int16x8_t v142 = vsubq_s16(v136, v138);
        int32x4_t v143 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v90), (uint16x8_t)vabsq_s16(vsubq_s16(v115, v139))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v89), (uint16x8_t)vabsq_s16(vaddq_s16(v139, v115)))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v91), (uint16x8_t)vabsq_s16(vaddq_s16(v141, v127))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v92), (uint16x8_t)vabsq_s16(vsubq_s16(v127, v141))))), vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16(
                                                                       (uint16x8_t)vabsq_s16(v93),
                                                                       (uint16x8_t)vabsq_s16(vaddq_s16(v140, v121))),
                                                          (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v99), (uint16x8_t)vabsq_s16(vsubq_s16(v121, v140)))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v88, v81)), (uint16x8_t)vabsq_s16(vaddq_s16(v142, v133))))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v81, v88)), (uint16x8_t)vabsq_s16(vsubq_s16(v133, v142)))));
        v7 += 16;
        int32x2_t v6 = (int32x2_t)vrsra_n_u32((uint32x2_t)v6, (uint32x2_t)*(_OWORD *)&vpaddq_s32(v143, v143), 1uLL);
      }
    }
    a3 += 8 * a4;
    a5 += 8 * a6;
    BOOL v144 = __OFSUB__(a2, 8);
    a2 -= 8;
  }
  while (!((a2 < 0) ^ v144 | (a2 == 0)));
  LODWORD(result) = vpadd_s32(v6, v6).u32[0];
  return result;
}

float sub_1BBAD7D38(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  if (a1 >= 8)
  {
    uint64_t v35 = 4 * a4;
    uint64_t v36 = 4 * a6;
    uint8x16_t v37 = (char *)a5 + 3 * a6;
    uint8x16_t v38 = (char *)a5 + 2 * a6;
    int16x8_t v39 = (char *)a5 + a6;
    int16x8_t v40 = (char *)a3 + 3 * a4;
    int16x8_t v41 = (char *)a3 + 2 * a4;
    int16x8_t v42 = (char *)a3 + a4;
    int32x4_t v43 = 0uLL;
    int32x4_t v44 = 0uLL;
    unint64_t v45 = a1;
    do
    {
      unint64_t v46 = 0;
      for (unint64_t i = 0; i < v45; i += 8)
      {
        uint8x16_t v48 = *(uint8x16_t *)a3[v46 / 8].i8;
        uint8x16_t v49 = *(uint8x16_t *)&v42[v46];
        uint8x16_t v50 = *(uint8x16_t *)&v41[v46];
        uint8x16_t v51 = *(uint8x16_t *)&v40[v46];
        uint8x16_t v52 = *(uint8x16_t *)a5[v46 / 8].i8;
        uint8x16_t v53 = *(uint8x16_t *)&v39[v46];
        uint8x16_t v54 = *(uint8x16_t *)&v38[v46];
        uint8x16_t v55 = *(uint8x16_t *)&v37[v46];
        int16x8_t v56 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v52.i8);
        int16x8_t v57 = (int16x8_t)vsubl_high_u8(v48, v52);
        int16x8_t v58 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v53.i8);
        int16x8_t v59 = (int16x8_t)vsubl_high_u8(v49, v53);
        int16x8_t v60 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v54.i8);
        int16x8_t v61 = (int16x8_t)vsubl_high_u8(v50, v54);
        int16x8_t v62 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v55.i8);
        int16x8_t v63 = (int16x8_t)vsubl_high_u8(v51, v55);
        int16x8_t v64 = vaddq_s16(v58, v56);
        int16x8_t v65 = vsubq_s16(v56, v58);
        int16x8_t v66 = vaddq_s16(v62, v60);
        int16x8_t v67 = vsubq_s16(v60, v62);
        int16x8_t v68 = vzip1q_s16(v64, v65);
        int16x8_t v69 = vzip2q_s16(v64, v65);
        int16x8_t v70 = vzip1q_s16(v66, v67);
        int16x8_t v71 = vzip2q_s16(v66, v67);
        int32x4_t v72 = (int32x4_t)vaddq_s16(v70, v68);
        int32x4_t v73 = (int32x4_t)vsubq_s16(v68, v70);
        int32x4_t v74 = (int32x4_t)vaddq_s16(v71, v69);
        int32x4_t v75 = (int32x4_t)vsubq_s16(v69, v71);
        int16x8_t v76 = (int16x8_t)vzip1q_s32(v72, v73);
        int16x8_t v77 = (int16x8_t)vzip2q_s32(v72, v73);
        int16x8_t v78 = (int16x8_t)vzip1q_s32(v74, v75);
        int16x8_t v79 = (int16x8_t)vzip2q_s32(v74, v75);
        int16x8_t v80 = vaddq_s16(v78, v76);
        int16x8_t v81 = vsubq_s16(v76, v78);
        int16x8_t v82 = vaddq_s16(v79, v77);
        int16x8_t v83 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v81), (uint16x8_t)vabsq_s16(vsubq_s16(v77, v79)));
        int16x8_t v84 = vaddq_s16(v59, v57);
        int16x8_t v85 = vsubq_s16(v57, v59);
        int16x8_t v86 = vaddq_s16(v63, v61);
        int16x8_t v87 = vsubq_s16(v61, v63);
        int16x8_t v88 = vzip1q_s16(v84, v85);
        int16x8_t v89 = vzip2q_s16(v84, v85);
        int16x8_t v90 = vzip1q_s16(v86, v87);
        int16x8_t v91 = vzip2q_s16(v86, v87);
        int32x4_t v92 = (int32x4_t)vaddq_s16(v90, v88);
        int32x4_t v93 = (int32x4_t)vsubq_s16(v88, v90);
        int32x4_t v94 = (int32x4_t)vaddq_s16(v91, v89);
        int32x4_t v95 = (int32x4_t)vsubq_s16(v89, v91);
        int16x8_t v96 = (int16x8_t)vzip1q_s32(v92, v93);
        int16x8_t v97 = (int16x8_t)vzip2q_s32(v92, v93);
        int16x8_t v98 = (int16x8_t)vzip1q_s32(v94, v95);
        int16x8_t v99 = (int16x8_t)vzip2q_s32(v94, v95);
        uint16x8_t v100 = (uint16x8_t)vaddq_s16(vaddq_s16(v83, (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v80), (uint16x8_t)vabsq_s16(v82))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v98, v96)), (uint16x8_t)vabsq_s16(vaddq_s16(v99, v97))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v96, v98)), (uint16x8_t)vabsq_s16(vsubq_s16(v97, v99)))));
        int32x4_t v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v100.i8);
        int32x4_t v43 = (int32x4_t)vaddw_high_u16((uint32x4_t)v43, v100);
        v46 += 16;
      }
      a3 = (uint8x8_t *)((char *)a3 + v35);
      a5 = (uint8x8_t *)((char *)a5 + v36);
      v37 += v36;
      v38 += v36;
      v39 += v36;
      v40 += v35;
      v41 += v35;
      v42 += v35;
      a2 -= 4;
    }
    while (a2);
    return COERCE_FLOAT(vaddvq_s32(vaddq_s32(v44, v43)));
  }
  else
  {
    int v6 = a2 + 4;
    int16x8_t v7 = 0uLL;
    do
    {
      unsigned int v8 = (uint8x8_t *)((char *)a3 + a4 + a4);
      uint8x8_t v9 = *v8;
      uint8x16_t v10 = (uint8x8_t *)((char *)v8 + a4);
      int16x8_t v11 = (uint8x8_t *)((char *)a5 + a6 + a6);
      uint8x8_t v12 = *v11;
      char v13 = (uint8x8_t *)((char *)v11 + a6);
      int16x8_t v14 = (int16x8_t)vsubl_u8(*a3, *a5);
      int16x8_t v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
      int16x8_t v16 = (int16x8_t)vsubl_u8(v9, v12);
      int16x8_t v17 = (int16x8_t)vsubl_u8(*v10, *v13);
      int16x8_t v18 = vaddq_s16(v15, v14);
      int16x8_t v19 = vsubq_s16(v14, v15);
      int16x8_t v20 = vaddq_s16(v17, v16);
      int16x8_t v21 = vsubq_s16(v16, v17);
      int16x8_t v22 = vzip1q_s16(v18, v19);
      int16x8_t v23 = vzip2q_s16(v18, v19);
      int16x8_t v24 = vzip1q_s16(v20, v21);
      int16x8_t v25 = vzip2q_s16(v20, v21);
      int32x4_t v26 = (int32x4_t)vaddq_s16(v24, v22);
      int32x4_t v27 = (int32x4_t)vsubq_s16(v22, v24);
      int32x4_t v28 = (int32x4_t)vaddq_s16(v25, v23);
      int32x4_t v29 = (int32x4_t)vsubq_s16(v23, v25);
      int16x8_t v30 = (int16x8_t)vzip1q_s32(v26, v27);
      int16x8_t v31 = (int16x8_t)vzip2q_s32(v26, v27);
      int16x8_t v32 = (int16x8_t)vzip1q_s32(v28, v29);
      int16x8_t v33 = (int16x8_t)vzip2q_s32(v28, v29);
      int16x8_t v7 = vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v32, v30)), (uint16x8_t)vabsq_s16(vaddq_s16(v33, v31))), v7), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v30, v32)), (uint16x8_t)vabsq_s16(vsubq_s16(v31, v33))));
      v6 -= 4;
      a3 = (uint8x8_t *)((char *)v10 + a4);
      a5 = (uint8x8_t *)((char *)v13 + a6);
    }
    while (v6 > 4);
    return COERCE_FLOAT(vaddlvq_u16((uint16x8_t)v7));
  }
}

uint64_t sub_1BBAD7FCC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = 0;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = 32 * a6;
  uint64_t v68 = 32 * a4;
  do
  {
    int v69 = a2;
    if (a1 >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        uint8x8_t v12 = v71;
        sub_1BBAD8294((uint8x8_t *)(a3 + v11), a4, (uint8x8_t *)(a5 + v11), a6, 32, v71);
        sub_1BBAD8294((uint8x8_t *)(a3 + v11 + 16), a4, (uint8x8_t *)(a5 + v11 + 16), a6, 32, v72);
        for (int i = 0; i != 4; ++i)
        {
          for (uint64_t j = 9; j != 17; j += 2)
          {
            int16x8_t v15 = &v12[j];
            int16x8_t v16 = v12[j - 9];
            int16x8_t v17 = v12[j - 8];
            int16x8_t v18 = v12[j - 1];
            int16x8_t v19 = v12[j];
            int16x8_t v20 = v12[j + 7];
            int16x8_t v21 = v12[j + 8];
            int16x8_t v22 = v12[j + 15];
            int16x8_t v23 = v12[j + 16];
            int16x8_t v24 = vaddq_s16(v18, v16);
            int16x8_t v25 = vaddq_s16(v19, v17);
            int64x2_t v26 = (int64x2_t)vsubq_s16(v16, v18);
            int64x2_t v27 = (int64x2_t)vsubq_s16(v17, v19);
            int16x8_t v28 = vaddq_s16(v22, v20);
            int16x8_t v29 = vaddq_s16(v23, v21);
            int64x2_t v30 = (int64x2_t)vsubq_s16(v20, v22);
            int64x2_t v31 = (int64x2_t)vsubq_s16(v21, v23);
            int16x8_t v32 = (int16x8_t)vzip2q_s64((int64x2_t)v24, v26);
            int16x8_t v33 = (int16x8_t)vzip2q_s64((int64x2_t)v25, v27);
            int16x8_t v34 = (int16x8_t)vzip2q_s64((int64x2_t)v28, v30);
            int16x8_t v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
            v24.i64[1] = v26.i64[0];
            v25.i64[1] = v27.i64[0];
            int16x8_t v36 = vaddq_s16(v32, v24);
            int16x8_t v37 = vaddq_s16(v33, v25);
            int16x8_t v38 = vsubq_s16(v24, v32);
            int16x8_t v39 = vsubq_s16(v25, v33);
            v28.i64[1] = v30.i64[0];
            v29.i64[1] = v31.i64[0];
            int16x8_t v40 = vaddq_s16(v34, v28);
            int16x8_t v41 = vaddq_s16(v35, v29);
            int16x8_t v42 = vsubq_s16(v28, v34);
            int16x8_t v43 = vsubq_s16(v29, v35);
            int16x8_t v44 = vrhaddq_s16(v36, v40);
            int16x8_t v45 = vrhaddq_s16(v37, v41);
            int16x8_t v46 = vrshrq_n_s16(vsubq_s16(v36, v40), 1uLL);
            int16x8_t v47 = vrshrq_n_s16(vsubq_s16(v37, v41), 1uLL);
            int16x8_t v48 = vrhaddq_s16(v38, v42);
            int16x8_t v49 = vrhaddq_s16(v39, v43);
            int16x8_t v50 = vrshrq_n_s16(vsubq_s16(v38, v42), 1uLL);
            v15[-9] = vhaddq_s16(v44, v45);
            v15[-8] = vhaddq_s16(v46, v47);
            int16x8_t v51 = vrshrq_n_s16(vsubq_s16(v39, v43), 1uLL);
            v15[-1] = vhaddq_s16(v48, v49);
            *int16x8_t v15 = vhaddq_s16(v50, v51);
            v15[7] = vhsubq_s16(v44, v45);
            v15[8] = vhsubq_s16(v46, v47);
            v15[15] = vhsubq_s16(v48, v49);
            v15[16] = vhsubq_s16(v50, v51);
          }
          v12 += 32;
        }
        uint64_t v52 = 0;
        int32x4_t v53 = 0uLL;
        do
        {
          int16x8_t v54 = v71[v52];
          int16x8_t v55 = v71[v52 + 1];
          int16x8_t v56 = v71[v52 + 64];
          int16x8_t v57 = v72[v52 + 1];
          int16x8_t v58 = v71[v52 + 32];
          int16x8_t v59 = v71[v52 + 33];
          int16x8_t v60 = v72[v52 + 32];
          int16x8_t v61 = v72[v52 + 33];
          int16x8_t v62 = vaddq_s16(v58, v54);
          int16x8_t v63 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v54, v58)), (uint16x8_t)vabsq_s16(vsubq_s16(v56, v60)));
          uint16x8_t v64 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v59, v55)), (uint16x8_t)vabsq_s16(vaddq_s16(v61, v57))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v62), (uint16x8_t)vabsq_s16(vaddq_s16(v60, v56))));
          uint16x8_t v65 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v55, v59)), (uint16x8_t)vabsq_s16(vsubq_s16(v57, v61))), v63);
          int32x4_t v53 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v53, v64), *(uint16x4_t *)v64.i8), v65), *(uint16x4_t *)v65.i8);
          v52 += 2;
        }
        while (v52 != 32);
        uint64_t v10 = v10 + ((vaddvq_s32(v53) + 1) >> 1);
        v11 += 32;
      }
      while ((int)v11 < a1);
    }
    a3 += v68;
    a5 += v67;
    a2 = v69 - 32;
  }
  while (v69 > 32);
  return v10;
}

uint8x8_t *sub_1BBAD8294(uint8x8_t *result, uint64_t a2, uint8x8_t *a3, uint64_t a4, int a5, int16x8_t *a6)
{
  int v6 = a5 + 4;
  do
  {
    uint8x16_t v7 = *(uint8x16_t *)&result->i8[a2];
    unsigned int v8 = (uint8x16_t *)((char *)result + a2 + a2);
    uint8x16_t v9 = *v8;
    uint64_t v10 = (uint8x8_t *)&v8->i8[a2];
    uint8x16_t v11 = *(uint8x16_t *)&a3->i8[a4];
    uint8x8_t v12 = (uint8x16_t *)((char *)a3 + a4 + a4);
    uint8x16_t v13 = *v12;
    int16x8_t v14 = (uint8x8_t *)&v12->i8[a4];
    int16x8_t v15 = (int16x8_t)vsubl_u8(*result, *a3);
    int16x8_t v16 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)result->i8, *(uint8x16_t *)a3->i8);
    int16x8_t v17 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v7.i8, *(uint8x8_t *)v11.i8);
    int16x8_t v18 = (int16x8_t)vsubl_high_u8(v7, v11);
    int16x8_t v19 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v13.i8);
    int16x8_t v20 = (int16x8_t)vsubl_high_u8(v9, v13);
    int16x8_t v21 = (int16x8_t)vsubl_u8(*v10, *v14);
    int16x8_t v22 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v10->i8, *(uint8x16_t *)v14->i8);
    int16x8_t v23 = vaddq_s16(v17, v15);
    int16x8_t v24 = vaddq_s16(v18, v16);
    int16x8_t v25 = vsubq_s16(v15, v17);
    int16x8_t v26 = vsubq_s16(v16, v18);
    int16x8_t v27 = vaddq_s16(v21, v19);
    int16x8_t v28 = vaddq_s16(v22, v20);
    int16x8_t v29 = vsubq_s16(v19, v21);
    int16x8_t v30 = vsubq_s16(v20, v22);
    int16x8_t v31 = vtrn1q_s16(v23, v25);
    int16x8_t v32 = vtrn2q_s16(v23, v25);
    int16x8_t v33 = vtrn1q_s16(v24, v26);
    int16x8_t v34 = vtrn2q_s16(v24, v26);
    int16x8_t v35 = vtrn1q_s16(v27, v29);
    int16x8_t v36 = vtrn2q_s16(v27, v29);
    int16x8_t v37 = vtrn1q_s16(v28, v30);
    int16x8_t v38 = vtrn2q_s16(v28, v30);
    int16x8_t v39 = vaddq_s16(v32, v31);
    int16x8_t v40 = vaddq_s16(v34, v33);
    int16x8_t v41 = vsubq_s16(v31, v32);
    int16x8_t v42 = vsubq_s16(v33, v34);
    int16x8_t v43 = vaddq_s16(v36, v35);
    int16x8_t v44 = vaddq_s16(v38, v37);
    int16x8_t v45 = vsubq_s16(v35, v36);
    int16x8_t v46 = vsubq_s16(v37, v38);
    int32x4_t v47 = (int32x4_t)vaddq_s16(v43, v39);
    int32x4_t v48 = (int32x4_t)vaddq_s16(v44, v40);
    int32x4_t v49 = (int32x4_t)vsubq_s16(v39, v43);
    int32x4_t v50 = (int32x4_t)vsubq_s16(v40, v44);
    int32x4_t v51 = (int32x4_t)vaddq_s16(v45, v41);
    int32x4_t v52 = (int32x4_t)vaddq_s16(v46, v42);
    int32x4_t v53 = (int32x4_t)vsubq_s16(v41, v45);
    int32x4_t v54 = (int32x4_t)vsubq_s16(v42, v46);
    int16x8_t v55 = (int16x8_t)vtrn1q_s32(v47, v49);
    int16x8_t v56 = (int16x8_t)vtrn2q_s32(v47, v49);
    int16x8_t v57 = (int16x8_t)vtrn1q_s32(v48, v50);
    int16x8_t v58 = (int16x8_t)vtrn2q_s32(v48, v50);
    int16x8_t v59 = (int16x8_t)vtrn1q_s32(v51, v53);
    int16x8_t v60 = (int16x8_t)vtrn2q_s32(v51, v53);
    int16x8_t v61 = (int16x8_t)vtrn1q_s32(v52, v54);
    *a6 = vaddq_s16(v56, v55);
    a6[1] = vaddq_s16(v58, v57);
    int16x8_t v62 = (int16x8_t)vtrn2q_s32(v52, v54);
    a6[2] = vaddq_s16(v60, v59);
    a6[3] = vaddq_s16(v62, v61);
    a6[4] = vsubq_s16(v55, v56);
    a6[5] = vsubq_s16(v57, v58);
    v6 -= 4;
    a6[6] = vsubq_s16(v59, v60);
    a6[7] = vsubq_s16(v61, v62);
    float result = (uint8x8_t *)((char *)v10 + a2);
    a3 = (uint8x8_t *)((char *)v14 + a4);
    a6 += 8;
  }
  while (v6 > 4);
  return result;
}

uint64_t sub_1BBAD83DC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = 0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v49 = 16 * a4;
  uint64_t v13 = 16 * a6;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v14 = 0;
      do
      {
        sub_1BBAD8294((uint8x8_t *)(a3 + v14), a4, (uint8x8_t *)(a5 + v14), a6, 16, v50);
        int32x4_t v15 = 0uLL;
        for (uint64_t i = 9; i != 17; i += 2)
        {
          int16x8_t v17 = v50[i - 9];
          int16x8_t v18 = v50[i - 8];
          int16x8_t v19 = v50[i - 1];
          int16x8_t v20 = v50[i];
          int16x8_t v21 = v50[i + 7];
          int16x8_t v22 = v50[i + 8];
          int16x8_t v23 = v50[i + 15];
          int16x8_t v24 = v50[i + 16];
          int16x8_t v25 = vaddq_s16(v19, v17);
          int16x8_t v26 = vaddq_s16(v20, v18);
          int64x2_t v27 = (int64x2_t)vsubq_s16(v17, v19);
          int64x2_t v28 = (int64x2_t)vsubq_s16(v18, v20);
          int16x8_t v29 = vaddq_s16(v23, v21);
          int16x8_t v30 = vaddq_s16(v24, v22);
          int64x2_t v31 = (int64x2_t)vsubq_s16(v21, v23);
          int64x2_t v32 = (int64x2_t)vsubq_s16(v22, v24);
          int16x8_t v33 = (int16x8_t)vzip2q_s64((int64x2_t)v25, v27);
          int16x8_t v34 = (int16x8_t)vzip2q_s64((int64x2_t)v26, v28);
          int16x8_t v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
          int16x8_t v36 = (int16x8_t)vzip2q_s64((int64x2_t)v30, v32);
          v25.i64[1] = v27.i64[0];
          v26.i64[1] = v28.i64[0];
          int16x8_t v37 = vaddq_s16(v33, v25);
          v29.i64[1] = v31.i64[0];
          int16x8_t v38 = vaddq_s16(v34, v26);
          int16x8_t v39 = vsubq_s16(v25, v33);
          v30.i64[1] = v32.i64[0];
          int16x8_t v40 = vaddq_s16(v35, v29);
          int16x8_t v41 = vaddq_s16(v36, v30);
          int16x8_t v42 = vsubq_s16(v26, v34);
          int16x8_t v43 = vsubq_s16(v29, v35);
          int16x8_t v44 = vsubq_s16(v30, v36);
          uint16x8_t v45 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v37, v40)), (uint16x8_t)vabsq_s16(vsubq_s16(v38, v41))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v40, v37)), (uint16x8_t)vabsq_s16(vaddq_s16(v41, v38))));
          uint16x8_t v46 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v39, v43)), (uint16x8_t)vabsq_s16(vsubq_s16(v42, v44))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v43, v39)), (uint16x8_t)vabsq_s16(vaddq_s16(v44, v42))));
          int32x4_t v15 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v15, v45), *(uint16x4_t *)v45.i8), v46), *(uint16x4_t *)v46.i8);
        }
        uint64_t v12 = v12 + ((vaddvq_s32(v15) + 2) >> 2);
        v14 += 16;
      }
      while ((int)v14 < a1);
    }
    a3 += v49;
    a5 += v13;
    BOOL v47 = __OFSUB__(a2, 16);
    a2 -= 16;
  }
  while (!((a2 < 0) ^ v47 | (a2 == 0)));
  return v12;
}

uint64_t sub_1BBAD85C4(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 0;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v8 = 0;
      do
      {
        uint8x16_t v9 = (uint8x8_t *)(a3 + v8 + a4);
        uint8x8_t v10 = *v9;
        uint8x16_t v11 = (uint8x8_t *)((char *)v9 + a4);
        uint8x8_t v12 = *v11;
        uint64_t v13 = (uint8x8_t *)((char *)v11 + a4);
        uint64_t v14 = (uint8x8_t *)(a5 + v8 + a6);
        uint8x8_t v15 = *v14;
        int16x8_t v16 = (uint8x8_t *)((char *)v14 + a6);
        uint8x8_t v17 = *v16;
        int16x8_t v18 = (uint8x8_t *)((char *)v16 + a6);
        uint8x8_t v19 = *v13;
        int16x8_t v20 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a3 + v8), *(uint8x8_t *)(a5 + v8));
        int16x8_t v21 = (int16x8_t)vsubl_u8(v10, v15);
        int16x8_t v22 = (uint8x8_t *)((char *)v13 + a4);
        uint8x8_t v23 = *v22;
        int16x8_t v24 = (int16x8_t)vsubl_u8(v12, v17);
        int16x8_t v25 = (uint8x8_t *)((char *)v22 + a4);
        uint8x8_t v26 = *v25;
        int64x2_t v27 = (uint8x8_t *)((char *)v25 + a4);
        uint8x8_t v28 = *(uint8x8_t *)((char *)v27 + a4);
        uint8x8_t v29 = *v27;
        int16x8_t v30 = (uint8x8_t *)((char *)v18 + a6 + a6);
        uint8x8_t v31 = *v30;
        int64x2_t v32 = (uint8x8_t *)((char *)v30 + a6);
        int16x8_t v33 = (int16x8_t)vsubl_u8(v19, *v18);
        int16x8_t v34 = (int16x8_t)vsubl_u8(v23, *(uint8x8_t *)((char *)v18 + a6));
        int16x8_t v35 = (int16x8_t)vsubl_u8(v26, v31);
        int16x8_t v36 = (int16x8_t)vsubl_u8(v29, *v32);
        int16x8_t v37 = (int16x8_t)vsubl_u8(v28, *(uint8x8_t *)((char *)v32 + a6));
        int16x8_t v38 = vaddq_s16(v21, v20);
        int16x8_t v39 = vsubq_s16(v20, v21);
        int16x8_t v40 = vaddq_s16(v33, v24);
        int16x8_t v41 = vsubq_s16(v24, v33);
        int16x8_t v42 = vtrn1q_s16(v38, v39);
        int16x8_t v43 = vtrn2q_s16(v38, v39);
        int16x8_t v44 = vtrn1q_s16(v40, v41);
        int16x8_t v45 = vtrn2q_s16(v40, v41);
        int16x8_t v46 = vaddq_s16(v43, v42);
        int16x8_t v47 = vsubq_s16(v42, v43);
        int16x8_t v48 = vaddq_s16(v45, v44);
        int16x8_t v49 = vsubq_s16(v44, v45);
        int32x4_t v50 = (int32x4_t)vaddq_s16(v48, v46);
        int32x4_t v51 = (int32x4_t)vsubq_s16(v46, v48);
        int32x4_t v52 = (int32x4_t)vaddq_s16(v49, v47);
        int32x4_t v53 = (int32x4_t)vsubq_s16(v47, v49);
        int16x8_t v54 = (int16x8_t)vtrn1q_s32(v50, v51);
        int16x8_t v55 = (int16x8_t)vtrn2q_s32(v50, v51);
        int16x8_t v56 = (int16x8_t)vtrn1q_s32(v52, v53);
        int16x8_t v57 = (int16x8_t)vtrn2q_s32(v52, v53);
        int16x8_t v58 = vaddq_s16(v55, v54);
        int16x8_t v59 = vaddq_s16(v35, v34);
        int16x8_t v60 = vsubq_s16(v54, v55);
        int16x8_t v61 = vsubq_s16(v34, v35);
        int16x8_t v62 = vaddq_s16(v37, v36);
        int16x8_t v63 = vsubq_s16(v36, v37);
        int16x8_t v64 = vtrn1q_s16(v59, v61);
        int16x8_t v65 = vtrn2q_s16(v59, v61);
        int16x8_t v66 = vaddq_s16(v57, v56);
        int16x8_t v67 = vtrn1q_s16(v62, v63);
        int16x8_t v68 = vtrn2q_s16(v62, v63);
        int16x8_t v69 = vaddq_s16(v65, v64);
        int16x8_t v70 = vsubq_s16(v64, v65);
        int16x8_t v71 = vaddq_s16(v68, v67);
        int16x8_t v72 = vsubq_s16(v56, v57);
        int16x8_t v73 = vsubq_s16(v67, v68);
        int32x4_t v74 = (int32x4_t)vaddq_s16(v71, v69);
        int32x4_t v75 = (int32x4_t)vsubq_s16(v69, v71);
        int32x4_t v76 = (int32x4_t)vaddq_s16(v73, v70);
        int32x4_t v77 = (int32x4_t)vsubq_s16(v70, v73);
        int16x8_t v78 = (int16x8_t)vtrn1q_s32(v74, v75);
        int16x8_t v79 = (int16x8_t)vtrn2q_s32(v74, v75);
        int16x8_t v80 = (int16x8_t)vtrn1q_s32(v76, v77);
        int16x8_t v81 = (int16x8_t)vtrn2q_s32(v76, v77);
        int16x8_t v82 = vaddq_s16(v79, v78);
        int16x8_t v83 = vsubq_s16(v78, v79);
        int16x8_t v84 = vaddq_s16(v81, v80);
        int16x8_t v85 = vsubq_s16(v80, v81);
        int16x8_t v86 = vaddq_s16(v82, v58);
        int64x2_t v87 = (int64x2_t)vsubq_s16(v58, v82);
        int16x8_t v88 = vaddq_s16(v84, v66);
        int64x2_t v89 = (int64x2_t)vsubq_s16(v66, v84);
        int16x8_t v90 = vaddq_s16(v83, v60);
        int64x2_t v91 = (int64x2_t)vsubq_s16(v60, v83);
        int16x8_t v92 = vaddq_s16(v85, v72);
        int64x2_t v93 = (int64x2_t)vsubq_s16(v72, v85);
        int16x8_t v94 = (int16x8_t)vzip2q_s64((int64x2_t)v86, v87);
        int16x8_t v95 = (int16x8_t)vzip2q_s64((int64x2_t)v88, v89);
        int16x8_t v96 = (int16x8_t)vzip2q_s64((int64x2_t)v90, v91);
        int16x8_t v97 = (int16x8_t)vzip2q_s64((int64x2_t)v92, v93);
        v86.i64[1] = v87.i64[0];
        v88.i64[1] = v89.i64[0];
        v90.i64[1] = v91.i64[0];
        v92.i64[1] = v93.i64[0];
        uint64_t result = result
               + ((vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v88), (uint16x8_t)vabsq_s16(v95)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v86), (uint16x8_t)vabsq_s16(v94))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v90), (uint16x8_t)vabsq_s16(v96)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v92), (uint16x8_t)vabsq_s16(v97)))))+ 1) >> 1);
        v8 += 8;
      }
      while (v8 < a1);
    }
    a3 += 8 * a4;
    a5 += 8 * a6;
    BOOL v98 = __OFSUB__(a2, 8);
    a2 -= 8;
  }
  while (!((a2 < 0) ^ v98 | (a2 == 0)));
  return result;
}

uint64_t sub_1BBAD87E8(unsigned int a1)
{
  return off_1F14ED890[__clz(__rbit32(a1)) - 2]();
}

uint64_t sub_1BBAD8804(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 4 * a4;
  uint64_t v7 = 4 * a6;
  uint64_t v8 = a5 + 3 * a6;
  uint64_t v9 = a5 + a6;
  uint64_t v10 = a3 + 3 * a4;
  int32x4_t v11 = 0uLL;
  int32x4_t v12 = 0uLL;
  uint64_t v13 = a3 + a4;
  uint64_t v14 = a5 + 2 * a6;
  uint64_t v15 = a3 + 2 * a4;
  do
  {
    if (a1 >= 1)
    {
      for (uint64_t i = 0; i < a1; i += 16)
      {
        uint8x16_t v17 = *(uint8x16_t *)(a3 + i);
        uint8x16_t v18 = *(uint8x16_t *)(v13 + i);
        uint8x16_t v19 = *(uint8x16_t *)(v15 + i);
        uint8x16_t v20 = *(uint8x16_t *)(v10 + i);
        uint8x16_t v21 = *(uint8x16_t *)(a5 + i);
        uint8x16_t v22 = *(uint8x16_t *)(v9 + i);
        uint8x16_t v23 = *(uint8x16_t *)(v14 + i);
        uint8x16_t v24 = *(uint8x16_t *)(v8 + i);
        int16x8_t v25 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v21.i8);
        int16x8_t v26 = (int16x8_t)vsubl_high_u8(v17, v21);
        int16x8_t v27 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v22.i8);
        int16x8_t v28 = (int16x8_t)vsubl_high_u8(v18, v22);
        int16x8_t v29 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v23.i8);
        int16x8_t v30 = (int16x8_t)vsubl_high_u8(v19, v23);
        int16x8_t v31 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v24.i8);
        int16x8_t v32 = (int16x8_t)vsubl_high_u8(v20, v24);
        int16x8_t v33 = vaddq_s16(v27, v25);
        int16x8_t v34 = vaddq_s16(v28, v26);
        int16x8_t v35 = vsubq_s16(v25, v27);
        int16x8_t v36 = vsubq_s16(v26, v28);
        int16x8_t v37 = vaddq_s16(v31, v29);
        int16x8_t v38 = vaddq_s16(v32, v30);
        int16x8_t v39 = vsubq_s16(v29, v31);
        int16x8_t v40 = vsubq_s16(v30, v32);
        int16x8_t v41 = vtrn1q_s16(v33, v35);
        int16x8_t v42 = vtrn2q_s16(v33, v35);
        int16x8_t v43 = vtrn1q_s16(v34, v36);
        int16x8_t v44 = vtrn2q_s16(v34, v36);
        int16x8_t v45 = vtrn1q_s16(v37, v39);
        int16x8_t v46 = vtrn2q_s16(v37, v39);
        int16x8_t v47 = vtrn1q_s16(v38, v40);
        int16x8_t v48 = vtrn2q_s16(v38, v40);
        int16x8_t v49 = vaddq_s16(v42, v41);
        int16x8_t v50 = vaddq_s16(v44, v43);
        int16x8_t v51 = vsubq_s16(v41, v42);
        int16x8_t v52 = vsubq_s16(v43, v44);
        int16x8_t v53 = vaddq_s16(v46, v45);
        int16x8_t v54 = vaddq_s16(v48, v47);
        int16x8_t v55 = vsubq_s16(v45, v46);
        int16x8_t v56 = vsubq_s16(v47, v48);
        int32x4_t v57 = (int32x4_t)vaddq_s16(v53, v49);
        int32x4_t v58 = (int32x4_t)vaddq_s16(v54, v50);
        int32x4_t v59 = (int32x4_t)vsubq_s16(v49, v53);
        int32x4_t v60 = (int32x4_t)vsubq_s16(v50, v54);
        int32x4_t v61 = (int32x4_t)vaddq_s16(v55, v51);
        int32x4_t v62 = (int32x4_t)vaddq_s16(v56, v52);
        int32x4_t v63 = (int32x4_t)vsubq_s16(v51, v55);
        int32x4_t v64 = (int32x4_t)vsubq_s16(v52, v56);
        uint16x8_t v65 = (uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v58, v60)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v58, v60))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v57, v59)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v57, v59)))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v61, v63)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v61, v63))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v62, v64)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v62, v64)))));
        int32x4_t v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v65.i8);
        int32x4_t v11 = (int32x4_t)vaddw_high_u16((uint32x4_t)v11, v65);
      }
    }
    a3 += v6;
    a5 += v7;
    v8 += v7;
    v14 += v7;
    v9 += v7;
    v10 += v6;
    v15 += v6;
    v13 += v6;
    a2 -= 4;
  }
  while (a2);
  return vaddvq_s32(vaddq_s32(v12, v11));
}

uint64_t sub_1BBAD89AC(uint64_t a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  int v6 = a2 + 4;
  int16x8_t v7 = 0uLL;
  do
  {
    uint64_t v8 = (uint8x8_t *)((char *)a3 + a4 + a4);
    uint8x8_t v9 = *v8;
    uint64_t v10 = (uint8x8_t *)((char *)v8 + a4);
    int32x4_t v11 = (uint8x8_t *)((char *)a5 + a6 + a6);
    uint8x8_t v12 = *v11;
    uint64_t v13 = (uint8x8_t *)((char *)v11 + a6);
    int16x8_t v14 = (int16x8_t)vsubl_u8(*a3, *a5);
    int16x8_t v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
    int16x8_t v16 = (int16x8_t)vsubl_u8(v9, v12);
    int16x8_t v17 = (int16x8_t)vsubl_u8(*v10, *v13);
    int16x8_t v18 = vaddq_s16(v15, v14);
    int16x8_t v19 = vsubq_s16(v14, v15);
    int16x8_t v20 = vaddq_s16(v17, v16);
    int16x8_t v21 = vsubq_s16(v16, v17);
    int16x8_t v22 = vtrn1q_s16(v18, v19);
    int16x8_t v23 = vtrn2q_s16(v18, v19);
    int16x8_t v24 = vtrn1q_s16(v20, v21);
    int16x8_t v25 = vtrn2q_s16(v20, v21);
    int16x8_t v26 = vaddq_s16(v23, v22);
    int16x8_t v27 = vsubq_s16(v22, v23);
    int16x8_t v28 = vaddq_s16(v25, v24);
    int16x8_t v29 = vsubq_s16(v24, v25);
    int32x4_t v30 = (int32x4_t)vaddq_s16(v28, v26);
    int32x4_t v31 = (int32x4_t)vsubq_s16(v26, v28);
    int32x4_t v32 = (int32x4_t)vaddq_s16(v29, v27);
    int32x4_t v33 = (int32x4_t)vsubq_s16(v27, v29);
    int16x8_t v7 = vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v30, v31)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v30, v31))), v7), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v32, v33)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v32, v33))));
    v6 -= 4;
    a3 = (uint8x8_t *)((char *)v10 + a4);
    a5 = (uint8x8_t *)((char *)v13 + a6);
  }
  while (v6 > 4);
  return vaddlvq_u16((uint16x8_t)v7);
}

uint64_t sub_1BBAD8A8C(uint64_t a1, int a2, __int32 *a3, uint64_t a4, __int32 *a5, uint64_t a6)
{
  int v6 = a2 + 4;
  int16x8_t v7 = 0uLL;
  do
  {
    uint64_t v8 = (__int32 *)((char *)a3 + a4);
    v9.i32[0] = *a3;
    uint64_t v10 = (__int32 *)((char *)a3 + a4 + a4);
    v9.i32[1] = *v10;
    int32x4_t v11 = (__int32 *)((char *)v10 + a4);
    v12.i32[0] = *v8;
    v12.i32[1] = *v11;
    a3 = (__int32 *)((char *)v11 + a4);
    uint64_t v13 = (__int32 *)((char *)a5 + a6);
    v14.i32[0] = *a5;
    int16x8_t v15 = (__int32 *)((char *)a5 + a6 + a6);
    v14.i32[1] = *v15;
    int16x8_t v16 = (__int32 *)((char *)v15 + a6);
    v17.i32[0] = *v13;
    v17.i32[1] = *v16;
    a5 = (__int32 *)((char *)v16 + a6);
    int16x8_t v18 = (int16x8_t)vsubl_u8(v9, v14);
    int16x8_t v19 = (int16x8_t)vsubl_u8(v12, v17);
    int16x8_t v20 = vaddq_s16(v19, v18);
    int16x8_t v21 = vsubq_s16(v18, v19);
    int16x8_t v22 = vtrn1q_s16(v20, v21);
    int16x8_t v23 = vtrn2q_s16(v20, v21);
    int16x8_t v24 = vaddq_s16(v23, v22);
    int64x2_t v25 = (int64x2_t)vsubq_s16(v22, v23);
    int16x8_t v26 = (int16x8_t)vzip2q_s64((int64x2_t)v24, v25);
    v24.i64[1] = v25.i64[0];
    int32x4_t v27 = (int32x4_t)vaddq_s16(v26, v24);
    int32x4_t v28 = (int32x4_t)vsubq_s16(v24, v26);
    int16x8_t v7 = vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v27, v28)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v27, v28))), v7);
    v6 -= 4;
  }
  while (v6 > 4);
  return vaddlvq_u16((uint16x8_t)v7);
}

uint64_t sub_1BBAD8B24(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1BBAD8B2C(2 * a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BBAD8B2C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 1)
  {
    uint16x8_t v20 = 0uLL;
    uint16x8_t v21 = 0uLL;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 2 * a4;
    uint64_t v8 = 2 * a6;
    uint64_t v9 = a5 + a6;
    int16x8_t v10 = 0uLL;
    int16x8_t v11 = 0uLL;
    uint64_t v12 = a3 + a4;
    int16x8_t v13 = 0uLL;
    int16x8_t v14 = 0uLL;
    do
    {
      if (a1 >= 1)
      {
        for (uint64_t i = 0; i < a1; i += 16)
        {
          uint8x16_t v16 = *(uint8x16_t *)(a3 + i);
          uint8x16_t v17 = *(uint8x16_t *)(a5 + i);
          uint8x16_t v18 = *(uint8x16_t *)(v12 + i);
          uint8x16_t v19 = *(uint8x16_t *)(v9 + i);
          int16x8_t v14 = (int16x8_t)vabal_u8((uint16x8_t)v14, *(uint8x8_t *)v16.i8, *(uint8x8_t *)v17.i8);
          int16x8_t v13 = (int16x8_t)vabal_high_u8((uint16x8_t)v13, v16, v17);
          int16x8_t v11 = (int16x8_t)vabal_u8((uint16x8_t)v11, *(uint8x8_t *)v18.i8, *(uint8x8_t *)v19.i8);
          int16x8_t v10 = (int16x8_t)vabal_high_u8((uint16x8_t)v10, v18, v19);
        }
      }
      v6 += 2;
      a3 += v7;
      a5 += v8;
      v9 += v8;
      v12 += v7;
    }
    while (v6 < a2);
    uint16x8_t v20 = (uint16x8_t)vaddq_s16(v13, v14);
    uint16x8_t v21 = (uint16x8_t)vaddq_s16(v10, v11);
  }
  return vaddlvq_u16(v21) + vaddlvq_u16(v20);
}

uint64_t sub_1BBAD8BDC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 1)
  {
    uint16x8_t v12 = 0uLL;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 2 * a4;
    uint64_t v8 = 2 * a6;
    uint64_t v9 = 2 * a1;
    uint64_t v10 = a5 + a6;
    uint64_t v11 = a3 + a4;
    uint16x8_t v12 = 0uLL;
    do
    {
      if ((int)v9 >= 1)
      {
        for (uint64_t i = 0; i < v9; i += 8)
          uint16x8_t v12 = vabal_u8(vabal_u8(v12, *(uint8x8_t *)(a3 + i), *(uint8x8_t *)(a5 + i)), *(uint8x8_t *)(v11 + i), *(uint8x8_t *)(v10 + i));
      }
      v6 += 2;
      a3 += v7;
      a5 += v8;
      v10 += v8;
      v11 += v7;
    }
    while (v6 < a2);
  }
  return vaddlvq_u16(v12);
}

uint64_t sub_1BBAD8C64(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  return sub_1BBAD8C6C(2 * a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BBAD8C6C(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  if (a1 == 4)
  {
    int v22 = a2 + 4;
    int32x4_t v23 = 0uLL;
    int32x4_t v24 = 0uLL;
    int32x4_t v25 = 0uLL;
    int32x4_t v26 = 0uLL;
    do
    {
      int32x4_t v27 = (__int32 *)((char *)a3 + a4);
      v28.i32[0] = a3->i32[0];
      int16x8_t v29 = (__int32 *)((char *)a3 + a4 + a4);
      v28.i32[1] = *v29;
      int32x4_t v30 = (__int32 *)((char *)v29 + a4);
      v31.i32[0] = *v27;
      v31.i32[1] = *v30;
      a3 = (uint8x8_t *)((char *)v30 + a4);
      int32x4_t v32 = (__int32 *)((char *)a5 + a6);
      v33.i32[0] = a5->i32[0];
      int16x8_t v34 = (__int32 *)((char *)a5 + a6 + a6);
      v33.i32[1] = *v34;
      int16x8_t v35 = (__int32 *)((char *)v34 + a6);
      v36.i32[0] = *v32;
      v36.i32[1] = *v35;
      a5 = (uint8x8_t *)((char *)v35 + a6);
      int16x8_t v37 = (int16x8_t)vsubl_u8(v28, v33);
      int16x8_t v38 = (int16x8_t)vsubl_u8(v31, v36);
      int32x4_t v23 = vmlal_s16(v23, *(int16x4_t *)v37.i8, *(int16x4_t *)v37.i8);
      int32x4_t v24 = vmlal_s16(v24, *(int16x4_t *)v38.i8, *(int16x4_t *)v38.i8);
      int32x4_t v25 = vmlal_high_s16(v25, v37, v37);
      int32x4_t v26 = vmlal_high_s16(v26, v38, v38);
      v22 -= 4;
    }
    while (v22 > 4);
    int8x16_t v21 = (int8x16_t)vaddq_s32(vaddq_s32(v24, v23), vaddq_s32(v25, v26));
    goto LABEL_9;
  }
  if (a1 == 8)
  {
    int v6 = a2 + 4;
    int32x4_t v7 = 0uLL;
    int32x4_t v8 = 0uLL;
    int32x4_t v9 = 0uLL;
    int32x4_t v10 = 0uLL;
    do
    {
      uint64_t v11 = (uint8x8_t *)((char *)a3 + a4 + a4);
      uint8x8_t v12 = *v11;
      int16x8_t v13 = (uint8x8_t *)((char *)v11 + a4);
      int16x8_t v14 = (uint8x8_t *)((char *)a5 + a6 + a6);
      uint8x8_t v15 = *v14;
      uint8x16_t v16 = (uint8x8_t *)((char *)v14 + a6);
      int16x8_t v17 = (int16x8_t)vsubl_u8(*a3, *a5);
      int16x8_t v18 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
      int16x8_t v19 = (int16x8_t)vsubl_u8(v12, v15);
      int16x8_t v20 = (int16x8_t)vsubl_u8(*v13, *v16);
      int32x4_t v7 = vmlal_high_s16(vmlal_s16(v7, *(int16x4_t *)v17.i8, *(int16x4_t *)v17.i8), v17, v17);
      int32x4_t v8 = vmlal_high_s16(vmlal_s16(v8, *(int16x4_t *)v18.i8, *(int16x4_t *)v18.i8), v18, v18);
      int32x4_t v9 = vmlal_high_s16(vmlal_s16(v9, *(int16x4_t *)v19.i8, *(int16x4_t *)v19.i8), v19, v19);
      int32x4_t v10 = vmlal_high_s16(vmlal_s16(v10, *(int16x4_t *)v20.i8, *(int16x4_t *)v20.i8), v20, v20);
      v6 -= 4;
      a3 = (uint8x8_t *)((char *)v13 + a4);
      a5 = (uint8x8_t *)((char *)v16 + a6);
    }
    while (v6 > 4);
    int8x16_t v21 = (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32(v8, v7), v9), v10);
LABEL_9:
    int32x2_t v39 = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    return vpadd_s32(v39, v39).u32[0];
  }
  LODWORD(v40) = 0;
  int16x8_t v41 = (char *)a5 + a6;
  int16x8_t v42 = (char *)a3 + a4;
  do
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int32x4_t v45 = 0uLL;
    int v46 = a2 + 2;
    int32x4_t v47 = 0uLL;
    int32x4_t v48 = 0uLL;
    int32x4_t v49 = 0uLL;
    do
    {
      uint8x16_t v50 = *(uint8x16_t *)&a3->i8[v43];
      uint8x16_t v51 = *(uint8x16_t *)&v42[v43];
      uint8x16_t v52 = *(uint8x16_t *)&a5->i8[v44];
      uint8x16_t v53 = *(uint8x16_t *)&v41[v44];
      int16x8_t v54 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v52.i8);
      int16x8_t v55 = (int16x8_t)vsubl_high_u8(v50, v52);
      int16x8_t v56 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v53.i8);
      int16x8_t v57 = (int16x8_t)vsubl_high_u8(v51, v53);
      int32x4_t v45 = vmlal_high_s16(vmlal_s16(v45, *(int16x4_t *)v54.i8, *(int16x4_t *)v54.i8), v54, v54);
      int32x4_t v47 = vmlal_high_s16(vmlal_s16(v47, *(int16x4_t *)v56.i8, *(int16x4_t *)v56.i8), v56, v56);
      int32x4_t v48 = vmlal_high_s16(vmlal_s16(v48, *(int16x4_t *)v55.i8, *(int16x4_t *)v55.i8), v55, v55);
      int32x4_t v49 = vmlal_high_s16(vmlal_s16(v49, *(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8), v57, v57);
      v44 += 2 * a6;
      v43 += 2 * a4;
      v46 -= 2;
    }
    while (v46 > 2);
    int8x16_t v58 = (int8x16_t)vaddq_s32(vaddq_s32(v47, v45), vaddq_s32(v48, v49));
    *(int32x2_t *)v58.i8 = vadd_s32(*(int32x2_t *)v58.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
    uint64_t v40 = vpadd_s32(*(int32x2_t *)v58.i8, *(int32x2_t *)v58.i8).u32[0] + v40;
    a3 += 2;
    a5 += 2;
    v41 += 16;
    v42 += 16;
    BOOL v59 = __OFSUB__(a1, 16);
    a1 -= 16;
  }
  while (!((a1 < 0) ^ v59 | (a1 == 0)));
  return v40;
}

uint64_t sub_1BBAD8E6C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 1)
  {
    uint16x8_t v10 = 0uLL;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 2 * a4;
    uint64_t v8 = 2 * a6;
    uint64_t v9 = a5 + a6;
    uint16x8_t v10 = 0uLL;
    uint64_t v11 = a3 + a4;
    do
    {
      if (a1 >= 1)
      {
        for (uint64_t i = 0; i < a1; i += 8)
          uint16x8_t v10 = vabal_u8(vabal_u8(v10, *(uint8x8_t *)(a3 + i), *(uint8x8_t *)(a5 + i)), *(uint8x8_t *)(v11 + i), *(uint8x8_t *)(v9 + i));
      }
      v6 += 2;
      a3 += v7;
      a5 += v8;
      v9 += v8;
      v11 += v7;
    }
    while (v6 < a2);
  }
  return vaddlvq_u16(v10);
}

uint64_t sub_1BBAD8EF0(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 1)
  {
    uint16x8_t v10 = 0uLL;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 2 * a4;
    uint64_t v8 = 2 * a6;
    uint64_t v9 = a5 + a6;
    uint16x8_t v10 = 0uLL;
    uint64_t v11 = a3 + a4;
    do
    {
      if (a1 >= 1)
      {
        for (uint64_t i = 0; i < a1; i += 4)
        {
          uint8x8_t v13 = *(uint8x8_t *)(a3 + i);
          uint8x8_t v14 = *(uint8x8_t *)(a5 + i);
          v13.i32[1] = *(_DWORD *)(v11 + i);
          v14.i32[1] = *(_DWORD *)(v9 + i);
          uint16x8_t v10 = vabal_u8(v10, v13, v14);
        }
      }
      v6 += 2;
      a3 += v7;
      a5 += v8;
      v9 += v8;
      v11 += v7;
    }
    while (v6 < a2);
  }
  return vaddlvq_u16(v10);
}

uint64_t sub_1BBAD8F78(_DWORD *a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t *a5, unint64_t a6)
{
  if (!a4) {
    return 4294954387;
  }
  *a4 = 0;
  uint64_t result = 4294954387;
  if (a2)
  {
    unint64_t v8 = a3 - a6;
    if (a3 > a6)
    {
      *a1 = -1;
      unint64_t v9 = v8 - 2;
      if (v8 >= 2)
      {
        uint64_t v10 = 0;
        int v11 = 0;
        uint64_t v12 = a2 + a6;
        while (1)
        {
          int v13 = *(unsigned __int8 *)(v12 + v10);
          if (v13 != 255) {
            break;
          }
          v11 += 255;
          if (v8 == ++v10) {
            return 4294954387;
          }
        }
        int v14 = v11 + v13;
        *a1 = v14;
        if (v10 + 1 < v8)
        {
          unsigned int v15 = *(unsigned __int8 *)(v12 + v10 + 1);
          if (v15 == 255)
          {
            uint64_t v16 = 0;
            while (v9 != v10)
            {
              v16 += 255;
              unsigned int v15 = *(unsigned __int8 *)(a6 + a2 + 2 + v10++);
              if (v15 != 255) {
                goto LABEL_16;
              }
            }
          }
          else
          {
            uint64_t v16 = 0;
LABEL_16:
            unint64_t v17 = v16 + v15;
            *a4 = v17;
            if (v14 != 5) {
              return 4294954386;
            }
            BOOL v18 = v17 >= 0x10;
            unint64_t v19 = v17 - 16;
            if (v18)
            {
              uint64_t v20 = 0;
              uint64_t v21 = v10 + v12 + 2;
              uint64_t v22 = v10 + a6 + 18;
              while (*(unsigned __int8 *)(v21 + v20) == *((unsigned __int8 *)&xmmword_1BBB835C0 + v20))
              {
                if (++v20 == 16)
                {
                  *a4 = v19;
                  uint64_t result = 0;
                  if (a5) {
                    *a5 = v22;
                  }
                  return result;
                }
              }
            }
            *a4 = 0;
          }
        }
        return 4294954387;
      }
    }
  }
  return result;
}

uint64_t sub_1BBAD9098(char *a1, size_t a2, char *a3, unint64_t a4, unint64_t *a5, int a6)
{
  uint64_t v8 = 4;
  if (a6) {
    uint64_t v8 = 5;
  }
  unint64_t v9 = a2 + 16 + (a2 + 16) / 0xFF;
  unint64_t v10 = v9 + v8;
  if (a5) {
    *a5 = v10;
  }
  if (!a3) {
    return 0;
  }
  if (v10 > a4) {
    return 4294954394;
  }
  size_t v12 = (a2 + 16) / 0xFF;
  char v13 = 5;
  if (a6)
  {
    int v14 = a3 + 3;
    a3[2] = 5;
    char v13 = 1;
    char v15 = 78;
  }
  else
  {
    int v14 = a3 + 2;
    char v15 = 6;
  }
  *a3 = v15;
  a3[1] = v13;
  memset(v14, 255, v12);
  uint64_t v16 = &v14[v12];
  *uint64_t v16 = v9;
  *(_OWORD *)(v16 + 1) = xmmword_1BBB835C0;
  unint64_t v17 = &v14[v12 + 17];
  if (v17 != a1) {
    memcpy(v17, a1, a2);
  }
  uint64_t result = 0;
  v17[a2] = 0x80;
  return result;
}

void *sub_1BBAD9194(void *result, int a2)
{
  if (a2 == 10)
  {
    result[6] = sub_1BBADEA34;
    result[7] = sub_1BBADE954;
    result[8] = sub_1BBADE8E0;
    result[9] = sub_1BBADE818;
    result[10] = sub_1BBADDEF0;
    result[11] = sub_1BBADDDD8;
    result[12] = sub_1BBADDBFC;
    result[13] = sub_1BBADD370;
    result[26] = sub_1BBADD318;
    result[27] = sub_1BBADD2A0;
    result[28] = sub_1BBADD248;
    result[29] = sub_1BBADD1F0;
    result[17] = sub_1BBADD1DC;
    result[18] = sub_1BBADD1C8;
    result[1] = sub_1BBADD094;
    uint64_t v2 = sub_1BBAD9594;
    uint64_t v3 = sub_1BBAD9658;
    unint64_t v4 = sub_1BBAD9720;
    int16x8_t v5 = sub_1BBAD980C;
    int v6 = sub_1BBAD98D4;
    uint64_t v7 = sub_1BBAD99B0;
    uint64_t v8 = sub_1BBAD9AB4;
    unint64_t v9 = sub_1BBAD9B58;
    unint64_t v10 = sub_1BBADB0BC;
    int v11 = sub_1BBADB748;
    size_t v12 = sub_1BBADBB04;
    char v13 = sub_1BBADC848;
    int v14 = sub_1BBADCB8C;
    char v15 = sub_1BBADCECC;
  }
  else
  {
    if (a2 != 8) {
      return result;
    }
    result[6] = sub_1BBADF480;
    result[7] = sub_1BBADF3AC;
    result[8] = sub_1BBADF2CC;
    result[9] = sub_1BBADF20C;
    result[10] = sub_1BBADF158;
    result[11] = sub_1BBADF0D0;
    result[12] = sub_1BBADF060;
    result[13] = sub_1BBADEFF0;
    result[26] = sub_1BBADEFA0;
    result[27] = sub_1BBADEF30;
    result[28] = sub_1BBADEEE0;
    result[29] = sub_1BBADEE98;
    result[30] = sub_1BBADEE2C;
    result[31] = sub_1BBADEDE0;
    result[32] = sub_1BBADEDA4;
    result[17] = sub_1BBADED90;
    result[18] = sub_1BBADED7C;
    result[1] = sub_1BBADEC4C;
    uint64_t v2 = sub_1BBAD9600;
    uint64_t v3 = sub_1BBAD96C0;
    unint64_t v4 = sub_1BBAD979C;
    int16x8_t v5 = sub_1BBAD9878;
    int v6 = sub_1BBAD994C;
    uint64_t v7 = sub_1BBAD9A38;
    uint64_t v8 = sub_1BBAD9B08;
    unint64_t v9 = sub_1BBADA874;
    unint64_t v10 = sub_1BBADB40C;
    int v11 = sub_1BBADB92C;
    size_t v12 = sub_1BBADC278;
    char v13 = sub_1BBADC9D4;
    int v14 = sub_1BBADCD3C;
    char v15 = sub_1BBADCFB4;
  }
  result[2] = v15;
  result[3] = v14;
  result[4] = v13;
  result[5] = v12;
  result[14] = v11;
  result[15] = v10;
  result[16] = v9;
  result[19] = v8;
  result[20] = v7;
  result[21] = v6;
  result[22] = v5;
  result[23] = v4;
  result[24] = v3;
  result[25] = v2;
  return result;
}

__int16 *sub_1BBAD9594(__int16 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  v6.i64[0] = 0xFC00FC00FC00FC00;
  v6.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    uint64_t v7 = (_OWORD *)(a3 + v4);
    uint64_t v8 = result;
    int16x8x2_t v14 = vld2q_s16(v8);
    v8 += 16;
    unint64_t v9 = (_OWORD *)(a4 + v4);
    int16x8x2_t v15 = vld2q_s16(v8);
    int16x8_t v10 = *(int16x8_t *)(a3 + v4);
    int16x8_t v11 = *(int16x8_t *)(a3 + v4 + 16);
    int16x8_t v12 = *(int16x8_t *)(a4 + v4);
    int16x8_t v13 = *(int16x8_t *)(a4 + v4 + 16);
    *uint64_t v7 = 0uLL;
    v7[1] = 0uLL;
    v16.val[0] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v14.val[0], v10), v6);
    v16.val[1] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v14.val[1], v12), v6);
    v14.val[0] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v15.val[0], v11), v6);
    *unint64_t v9 = 0uLL;
    v9[1] = 0uLL;
    vst2q_s16(result, v16);
    v14.val[1] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v15.val[1], v13), v6);
    vst2q_s16(result, v14);
    uint64_t v5 = 2 * a2;
    uint64_t result = (__int16 *)((char *)result + v5);
    v4 += 32;
  }
  while (v4 != 512);
  return result;
}

char *sub_1BBAD9600(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  do
  {
    int8x16x2_t v15 = vld2q_s8(result);
    uint64_t v5 = (_OWORD *)(a3 + v4);
    int16x8_t v6 = (_OWORD *)(a4 + v4);
    uint16x8_t v7 = *(uint16x8_t *)(a3 + v4);
    uint16x8_t v8 = *(uint16x8_t *)(a3 + v4 + 16);
    uint16x8_t v9 = *(uint16x8_t *)(a4 + v4);
    uint16x8_t v10 = *(uint16x8_t *)(a4 + v4 + 16);
    _OWORD *v5 = 0uLL;
    v5[1] = 0uLL;
    int16x8_t v11 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)v15.val[0].i8);
    int16x8_t v12 = (int16x8_t)vaddw_high_u8(v8, (uint8x16_t)v15.val[0]);
    int16x8_t v13 = (int16x8_t)vaddw_u8(v9, *(uint8x8_t *)v15.val[1].i8);
    v15.val[0] = (int8x16_t)vaddw_high_u8(v10, (uint8x16_t)v15.val[1]);
    v15.val[1] = vqmovun_high_s16(vqmovun_s16(v11), v12);
    int8x16_t v14 = vqmovun_high_s16(vqmovun_s16(v13), (int16x8_t)v15.val[0]);
    *int16x8_t v6 = 0uLL;
    v6[1] = 0uLL;
    vst2q_s8(result, *(int8x16x2_t *)((char *)&v15 + 16));
    result += a2;
    v4 += 32;
  }
  while (v4 != 512);
  return result;
}

__int16 *sub_1BBAD9658(__int16 *result, uint64_t a2, int16x8_t *a3, int16x8_t *a4)
{
  unsigned int v6 = -2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    uint16x8_t v8 = result;
    int16x8x2_t v14 = vld2q_s16(v8);
    uint64_t v4 = a2;
    uint16x8_t v9 = (__int16 *)&v8[v4];
    int16x8x2_t v15 = vld2q_s16(v9);
    int16x8_t v10 = *a3;
    int16x8_t v11 = a3[1];
    int16x8_t v12 = *a4;
    int16x8_t v13 = a4[1];
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3 += 2;
    v16.val[0] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v14.val[0], v10), v7);
    v16.val[1] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v14.val[1], v12), v7);
    v14.val[0] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v15.val[0], v11), v7);
    *a4 = 0uLL;
    a4[1] = 0uLL;
    a4 += 2;
    vst2q_s16(result, v16);
    uint64_t v5 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v5);
    v14.val[1] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v15.val[1], v13), v7);
    vst2q_s16(v9, v14);
    v6 += 2;
  }
  while (v6 < 6);
  return result;
}

char *sub_1BBAD96C0(char *result, uint64_t a2, uint16x8_t *a3, uint16x8_t *a4)
{
  unsigned int v5 = -2;
  do
  {
    unsigned int v6 = result;
    int16x8_t v14 = (int16x8_t)vld2_s8(v6);
    int16x8_t v7 = (char *)&v6[a2];
    uint16x8_t v8 = *a3;
    uint16x8_t v9 = a3[1];
    int8x8x2_t v15 = vld2_s8(v7);
    uint16x8_t v10 = *a4;
    uint16x8_t v11 = a4[1];
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3 += 2;
    int16x8_t v12 = (int16x8_t)vaddw_u8(v8, *(uint8x8_t *)v14.i8);
    int16x8_t v13 = (int16x8_t)vaddw_u8(v9, (uint8x8_t)v15.val[0]);
    int16x8_t v14 = (int16x8_t)vaddw_u8(v10, (uint8x8_t)v14.u64[1]);
    *(uint16x8_t *)((char *)&v14 + 8) = vaddw_u8(v11, (uint8x8_t)v15.val[1]);
    *(int8x8_t *)v12.i8 = vqmovun_s16(v12);
    v15.val[0] = vqmovun_s16(v14);
    v15.val[1] = vqmovun_s16(v13);
    *(int8x8_t *)v13.i8 = vqmovun_s16(*(int16x8_t *)((char *)&v14 + 8));
    *a4 = 0uLL;
    a4[1] = 0uLL;
    a4 += 2;
    vst2_s8(result, v15);
    uint64_t v4 = 2 * a2;
    result += v4;
    vst2_s8(v7, *(int8x8x2_t *)((char *)&v15 + 8));
    v5 += 2;
  }
  while (v5 < 6);
  return result;
}

int16x8_t sub_1BBAD9720(uint16x8_t *a1, uint64_t a2, int16x8_t *a3, int16x8_t *a4)
{
  uint16x8_t v4 = *(uint16x8_t *)((char *)a1 + 2 * a2);
  uint16x8_t v5 = *(uint16x8_t *)((char *)a1 + 4 * a2);
  uint16x8_t v6 = *(uint16x8_t *)((char *)a1 + 6 * a2);
  uint16x8_t v7 = *a1;
  int16x8_t v8 = *a3;
  int16x8_t v9 = a3[1];
  int16x8_t v10 = *a4;
  int16x8_t v11 = a4[1];
  *a3 = 0u;
  a3[1] = 0u;
  int16x8_t v12 = vzip1q_s16(v8, v10);
  int16x8_t v13 = vzip2q_s16(v8, v10);
  int16x8_t v14 = vzip1q_s16(v9, v11);
  int16x8_t v15 = vzip2q_s16(v9, v11);
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = 0u;
  a4[1] = 0u;
  *(int16x8_t *)a1 = vminq_s16((int16x8_t)vsqaddq_u16(v7, v12), v11);
  *(int16x8_t *)((char *)a1 + 2 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v4, v13), v11);
  int16x8_t result = vminq_s16((int16x8_t)vsqaddq_u16(v6, v15), v11);
  *(int16x8_t *)((char *)a1 + 4 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v5, v14), v11);
  *(int16x8_t *)((char *)a1 + 6 * a2) = result;
  return result;
}

int8x8_t sub_1BBAD979C(uint8x8_t *a1, uint64_t a2, int16x8_t *a3, int16x8_t *a4)
{
  uint8x8_t v4 = *a1;
  uint8x8_t v5 = *(uint8x8_t *)((char *)a1 + a2);
  uint8x8_t v6 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  uint8x8_t v7 = *(uint8x8_t *)((char *)a1 + 3 * a2);
  int16x8_t v8 = *a3;
  int16x8_t v9 = a3[1];
  int16x8_t v10 = *a4;
  int16x8_t v11 = a4[1];
  *a3 = 0u;
  a3[1] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  *a1 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v8, v10), v4));
  *(int8x8_t *)((char *)a1 + a2) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip2q_s16(v8, v10), v5));
  int8x8_t result = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v9, v11), v6));
  *(int8x8_t *)((char *)a1 + 2 * a2) = result;
  *(int8x8_t *)((char *)a1 + 3 * a2) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip2q_s16(v9, v11), v7));
  return result;
}

uint16x8_t *sub_1BBAD980C(uint16x8_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint8x8_t v4 = result + 2;
  v5.i64[0] = 0xFC00FC00FC00FC00;
  v5.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    uint8x8_t v6 = (_OWORD *)(a3 + v3);
    int16x8_t v7 = vminq_s16((int16x8_t)vsqaddq_u16(v4[-2], *(int16x8_t *)(a3 + v3)), v5);
    int16x8_t v8 = vminq_s16((int16x8_t)vsqaddq_u16(v4[-1], *(int16x8_t *)(a3 + v3 + 16)), v5);
    int16x8_t v9 = vminq_s16((int16x8_t)vsqaddq_u16(*v4, *(int16x8_t *)(a3 + v3 + 32)), v5);
    int16x8_t v10 = vminq_s16((int16x8_t)vsqaddq_u16(v4[1], *(int16x8_t *)(a3 + v3 + 48)), v5);
    *uint8x8_t v6 = 0uLL;
    v6[1] = 0uLL;
    v6[2] = 0uLL;
    v6[3] = 0uLL;
    v4[-2] = (uint16x8_t)v7;
    v4[-1] = (uint16x8_t)v8;
    uint16x8_t *v4 = (uint16x8_t)v9;
    v4[1] = (uint16x8_t)v10;
    v3 += 64;
    uint8x8_t v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
  }
  while (v3 != 2048);
  return result;
}

uint8x8_t *sub_1BBAD9878(uint8x8_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint8x8_t v4 = result + 2;
  do
  {
    int16x8_t v5 = (_OWORD *)(a3 + v3);
    int8x16_t v6 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)(a3 + v3), v4[-2])), (int16x8_t)vaddw_high_u8(*(uint16x8_t *)(a3 + v3 + 16), *(uint8x16_t *)v4[-2].i8));
    int8x16_t v7 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)(a3 + v3 + 32), *v4)), (int16x8_t)vaddw_high_u8(*(uint16x8_t *)(a3 + v3 + 48), *(uint8x16_t *)v4->i8));
    _OWORD *v5 = 0uLL;
    v5[1] = 0uLL;
    v5[2] = 0uLL;
    v5[3] = 0uLL;
    *(int8x16_t *)v4[-2].i8 = v6;
    *(int8x16_t *)v4->i8 = v7;
    v3 += 64;
    uint8x8_t v4 = (uint8x8_t *)((char *)v4 + a2);
  }
  while (v3 != 2048);
  return result;
}

uint16x8_t *sub_1BBAD98D4(uint16x8_t *result, uint64_t a2, int16x8_t *a3)
{
  uint64_t v3 = 2 * a2;
  unsigned int v4 = -2;
  v5.i64[0] = 0xFC00FC00FC00FC00;
  v5.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int8x16_t v6 = (int16x8_t *)&result->i8[v3];
    int16x8_t v7 = vminq_s16((int16x8_t)vsqaddq_u16(*result, *a3), v5);
    int16x8_t v8 = vminq_s16((int16x8_t)vsqaddq_u16(result[1], a3[1]), v5);
    int16x8_t v9 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 2 * a2), a3[2]), v5);
    int16x8_t v10 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)&result[1] + v3), a3[3]), v5);
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *int8x8_t result = (uint16x8_t)v7;
    *int8x16_t v6 = v9;
    result[1] = (uint16x8_t)v8;
    v6[1] = v10;
    int8x8_t result = (uint16x8_t *)((char *)result + 4 * a2);
    v4 += 2;
    a3 += 4;
  }
  while (v4 < 0xE);
  return result;
}

uint8x8_t *sub_1BBAD994C(uint8x8_t *result, uint64_t a2, uint16x8_t *a3)
{
  unsigned int v3 = -2;
  do
  {
    int8x16_t v4 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*a3, *result)), (int16x8_t)vaddw_high_u8(a3[1], *(uint8x16_t *)result->i8));
    int8x16_t v5 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(a3[2], *(uint8x8_t *)((char *)result + a2))), (int16x8_t)vaddw_high_u8(a3[3], *(uint8x16_t *)&result->i8[a2]));
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *(int8x16_t *)result->i8 = v4;
    *(int8x16_t *)&result->i8[a2] = v5;
    int8x8_t result = (uint8x8_t *)((char *)result + 2 * a2);
    v3 += 2;
    a3 += 4;
  }
  while (v3 < 0xE);
  return result;
}

uint16x8_t *sub_1BBAD99B0(uint16x8_t *result, uint64_t a2, int16x8_t *a3)
{
  char v3 = 1;
  v4.i64[0] = 0xFC00FC00FC00FC00;
  v4.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    char v5 = v3;
    int16x8_t v6 = vminq_s16((int16x8_t)vsqaddq_u16(*result, *a3), v4);
    int16x8_t v7 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 2 * a2), a3[1]), v4);
    int16x8_t v8 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 4 * a2), a3[2]), v4);
    int16x8_t v9 = (int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 6 * a2), a3[3]);
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *int8x8_t result = (uint16x8_t)v6;
    *(int16x8_t *)((char *)result + 2 * a2) = v7;
    *(int16x8_t *)((char *)result + 4 * a2) = v8;
    *(int16x8_t *)((char *)result + 6 * a2) = vminq_s16(v9, v4);
    int8x8_t result = (uint16x8_t *)((char *)result + 8 * a2);
    a3 += 4;
    char v3 = 0;
  }
  while ((v5 & 1) != 0);
  return result;
}

uint8x8_t *sub_1BBAD9A38(uint8x8_t *result, uint64_t a2, uint16x8_t *a3)
{
  char v3 = 1;
  do
  {
    char v4 = v3;
    int16x8_t v5 = (int16x8_t)vaddw_u8(a3[3], *(uint8x8_t *)((char *)result + 3 * a2));
    int8x8_t v6 = vqmovun_s16((int16x8_t)vaddw_u8(*a3, *result));
    int8x8_t v7 = vqmovun_s16((int16x8_t)vaddw_u8(a3[1], *(uint8x8_t *)((char *)result + a2)));
    int8x8_t v8 = vqmovun_s16((int16x8_t)vaddw_u8(a3[2], *(uint8x8_t *)((char *)result + 2 * a2)));
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *int8x8_t result = (uint8x8_t)v6;
    *(int8x8_t *)((char *)result + a2) = v7;
    *(int8x8_t *)((char *)result + 2 * a2) = v8;
    *(int8x8_t *)((char *)result + 3 * a2) = vqmovun_s16(v5);
    int8x8_t result = (uint8x8_t *)((char *)result + 4 * a2);
    a3 += 4;
    char v3 = 0;
  }
  while ((v4 & 1) != 0);
  return result;
}

int16x8_t sub_1BBAD9AB4(uint64_t *a1, uint64_t a2, int16x8_t *a3)
{
  char v3 = (uint64_t *)((char *)a1 + 2 * a2);
  v4.i64[0] = *a1;
  v4.i64[1] = *v3;
  int16x8_t v5 = (uint64_t *)((char *)a1 + 6 * a2);
  v6.i64[0] = *(uint64_t *)((char *)a1 + 4 * a2);
  v6.i64[1] = *v5;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t result = vminq_s16((int16x8_t)vsqaddq_u16(v4, *a3), v7);
  int16x8_t v9 = (int16x8_t)vsqaddq_u16(v6, a3[1]);
  *a3 = 0u;
  a3[1] = 0u;
  int16x8_t v10 = vminq_s16(v9, v7);
  *a1 = result.i64[0];
  uint64_t *v3 = result.i64[1];
  *(uint64_t *)((char *)a1 + 4 * a2) = v10.i64[0];
  uint64_t *v5 = v10.i64[1];
  return result;
}

int8x8_t sub_1BBAD9B08(__int32 *a1, uint64_t a2, uint16x8_t *a3)
{
  v3.i32[0] = *a1;
  v3.i32[1] = *(__int32 *)((char *)a1 + a2);
  uint16x8_t v4 = (__int32 *)((char *)a1 + 3 * a2);
  v5.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v5.i32[1] = *v4;
  int8x8_t result = vqmovun_s16((int16x8_t)vaddw_u8(*a3, v3));
  int8x8_t v7 = vqmovun_s16((int16x8_t)vaddw_u8(a3[1], v5));
  *a3 = 0u;
  a3[1] = 0u;
  *a1 = result.i32[0];
  *(__int32 *)((char *)a1 + a2) = result.i32[1];
  *(__int32 *)((char *)a1 + 2 * a2) = v7.i32[0];
  __int32 *v4 = v7.i32[1];
  return result;
}

int16x8_t *sub_1BBAD9B58(int16x8_t *result, uint64_t a2, int16x4_t *a3, int16x4_t *a4, int a5, int a6)
{
  int16x8_t v9 = result;
  if ((a6 | a5) > 1)
  {
    if (a5 >= 1) {
      sub_1BBAD9DBC(a3, a5);
    }
    if (a6 >= 1) {
      sub_1BBAD9DBC(a4, a6);
    }
    uint64_t v20 = 0;
    uint64_t v21 = 6 * a2 + 16;
    uint64_t v22 = 4 * a2 + 16;
    uint64_t v23 = 2 * a2 + 16;
    v24.i64[0] = 0xFC00FC00FC00FC00;
    v24.i64[1] = 0xFC00FC00FC00FC00;
    char v25 = 1;
    do
    {
      char v26 = v25;
      int32x4_t v27 = (uint16x8_t *)&v9[v20];
      uint8x8_t v28 = (int16x8_t *)&a3[v20];
      unsigned int v29 = -4;
      int32x4_t v30 = (int16x8_t *)&a4[v20];
      do
      {
        int8x8_t result = (int16x8_t *)&v27->i8[v23];
        uint16x8_t v31 = *(uint16x8_t *)((char *)v27 + 2 * a2);
        uint16x8_t v32 = *(uint16x8_t *)((char *)v27 + v23);
        uint8x8_t v33 = (int16x8_t *)&v27->i8[v22];
        uint16x8_t v34 = *(uint16x8_t *)((char *)v27 + 4 * a2);
        uint16x8_t v35 = *(uint16x8_t *)((char *)v27 + v22);
        uint8x8_t v36 = (int16x8_t *)&v27->i8[v21];
        uint16x8_t v38 = *(uint16x8_t *)((char *)v27 + 6 * a2);
        uint16x8_t v37 = *(uint16x8_t *)((char *)v27 + v21);
        uint16x8_t v39 = *v27;
        uint16x8_t v40 = v27[1];
        int16x8_t v41 = *v28;
        int16x8_t v42 = v28[2];
        int16x8_t v43 = v28[4];
        int16x8_t v44 = v28[6];
        int16x8_t v45 = *v30;
        int16x8_t v46 = v30[2];
        int16x8_t v47 = v30[4];
        int32x4_t v48 = (int32x4_t)vtrn1q_s16(*v28, v42);
        int16x8_t v49 = v30[6];
        *uint8x8_t v28 = 0uLL;
        v28[2] = 0uLL;
        v28[4] = 0uLL;
        v28[6] = 0uLL;
        *int32x4_t v30 = 0uLL;
        v30[2] = 0uLL;
        int32x4_t v50 = (int32x4_t)vtrn2q_s16(v41, v42);
        int32x4_t v51 = (int32x4_t)vtrn1q_s16(v43, v44);
        int32x4_t v52 = (int32x4_t)vtrn2q_s16(v43, v44);
        int16x8_t v53 = (int16x8_t)vtrn1q_s32(v48, v51);
        v30[4] = 0uLL;
        v30[6] = 0uLL;
        int16x8_t v54 = (int16x8_t)vtrn2q_s32(v48, v51);
        int16x8_t v55 = (int16x8_t)vtrn1q_s32(v50, v52);
        int16x8_t v56 = (int16x8_t)vtrn2q_s32(v50, v52);
        int32x4_t v57 = (int32x4_t)vtrn1q_s16(v45, v46);
        int32x4_t v58 = (int32x4_t)vtrn2q_s16(v45, v46);
        int32x4_t v59 = (int32x4_t)vtrn1q_s16(v47, v49);
        int32x4_t v60 = (int32x4_t)vtrn2q_s16(v47, v49);
        int16x8_t v61 = (int16x8_t)vtrn1q_s32(v57, v59);
        int16x8_t v62 = (int16x8_t)vtrn2q_s32(v57, v59);
        int16x8_t v63 = (int16x8_t)vtrn1q_s32(v58, v60);
        int16x8_t v64 = (int16x8_t)vtrn2q_s32(v58, v60);
        *(int16x8_t *)int32x4_t v27 = vminq_s16((int16x8_t)vsqaddq_u16(v39, vzip1q_s16(v53, v61)), v24);
        result[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v31, vzip1q_s16(v55, v63)), v24);
        v33[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v34, vzip1q_s16(v54, v62)), v24);
        v36[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v38, vzip1q_s16(v56, v64)), v24);
        v27[1] = (uint16x8_t)vminq_s16((int16x8_t)vsqaddq_u16(v40, vzip2q_s16(v53, v61)), v24);
        *int8x8_t result = vminq_s16((int16x8_t)vsqaddq_u16(v32, vzip2q_s16(v55, v63)), v24);
        v29 += 4;
        *uint8x8_t v33 = vminq_s16((int16x8_t)vsqaddq_u16(v35, vzip2q_s16(v54, v62)), v24);
        *uint8x8_t v36 = vminq_s16((int16x8_t)vsqaddq_u16(v37, vzip2q_s16(v56, v64)), v24);
        int32x4_t v27 = (uint16x8_t *)((char *)v27 + 8 * a2);
        v28 += 8;
        v30 += 8;
      }
      while (v29 < 0xC);
      char v25 = 0;
      uint64_t v20 = 2;
    }
    while ((v26 & 1) != 0);
  }
  else
  {
    int16x8_t v10 = vld1q_dup_s16((const __int16 *)a3);
    int16x8_t v11 = vld1q_dup_s16((const __int16 *)a4);
    int16x8_t v12 = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v10, v11), 1uLL), 4uLL);
    a3->i16[0] = 0;
    a4->i16[0] = 0;
    int16x8_t v13 = (uint16x8_t *)&result[2];
    int v14 = 16;
    v15.i64[0] = 0xFC00FC00FC00FC00;
    v15.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      int16x8_t v16 = vminq_s16((int16x8_t)vsqaddq_u16(v13[-1], v12), v15);
      int16x8_t v17 = vminq_s16((int16x8_t)vsqaddq_u16(*v13, v12), v15);
      int16x8_t v18 = vminq_s16((int16x8_t)vsqaddq_u16(v13[1], v12), v15);
      v13[-2] = (uint16x8_t)vminq_s16((int16x8_t)vsqaddq_u16(v13[-2], v12), v15);
      v13[-1] = (uint16x8_t)v16;
      *int16x8_t v13 = (uint16x8_t)v17;
      v13[1] = (uint16x8_t)v18;
      int16x8_t v13 = (uint16x8_t *)((char *)v13 + 2 * a2);
      --v14;
    }
    while (v14);
  }
  return result;
}

void sub_1BBAD9DBC(int16x4_t *a1, int a2)
{
  uint64_t v2 = a1;
  if (a2 == 1)
  {
    int16x8_t v3 = vdupq_n_s16((a1->i16[0] + 17) >> 5);
    unsigned int v4 = -32;
    do
    {
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v4 += 32;
      v2 += 8;
    }
    while (v4 < 0xE0);
    return;
  }
  if (a2 <= 16)
  {
    sub_1BBAD9F9C(a1, 0x10u, (uint64_t)&unk_1BBB83980);
LABEL_12:
    unint64_t v8 = -4;
    do
    {
      sub_1BBADA39C(v2, 0x10u, (uint64_t)&unk_1BBB83A60);
      v8 += 4;
      v2 += 16;
    }
    while (v8 < 0xC);
    return;
  }
  if (a2 >= 0x31)
  {
    unint64_t v6 = -4;
    int8x8_t v7 = a1;
    do
    {
      sub_1BBADA218(v7, 0x10u, (uint64_t)&unk_1BBB839D0, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v6 += 4;
      ++v7;
    }
    while (v6 < 0xC);
  }
  else
  {
    sub_1BBADA068(a1, 0x10u, (uint64_t)&unk_1BBB83980, (int16x4_t *)aZwpf);
    sub_1BBADA068(v2 + 1, 0x10u, (uint64_t)&unk_1BBB83980, (int16x4_t *)aZwpf);
  }
  if (a2 <= 32) {
    goto LABEL_12;
  }
  if (a2 >= 0x51)
  {
    unint64_t v10 = -4;
    do
    {
      sub_1BBADA610((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1BBB83A68, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v10 += 4;
      v2 += 16;
    }
    while (v10 < 0xC);
  }
  else
  {
    unint64_t v9 = -4;
    do
    {
      sub_1BBADA47C((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1BBB83A60, (int16x4_t *)aZwpf);
      v9 += 4;
      v2 += 16;
    }
    while (v9 < 0xC);
  }
}

int16x4_t *sub_1BBAD9F9C(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  LODWORD(v3) = a2 >> 2;
  int v4 = (a2 - 1) * (a2 >> 2);
  int16x4_t v5 = *(int16x4_t *)((char *)result + 2 * a2);
  int16x4_t v6 = *(int16x4_t *)((char *)result + 4 * a2);
  int8x8_t v7 = (int16x8_t *)((char *)&unk_1BBB83880 + 4 * a2);
  int16x4_t v8 = *(int16x4_t *)((char *)result + 6 * a2);
  int32x4_t v9 = vshll_n_s16(*result, 6uLL);
  if (a2 >> 2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v3;
  }
  unint64_t v10 = (unsigned __int8 *)(a3 + 1);
  do
  {
    int16x8_t v11 = *v7++;
    int32x4_t v12 = vmlal_laneq_s16(v9, v6, v11, 4);
    int32x4_t v13 = vmlsl_laneq_s16(v9, v6, v11, 4);
    int32x4_t v14 = vmlal_lane_s16(vmull_lane_s16(v8, *(int16x4_t *)v11.i8, 1), v5, *(int16x4_t *)v11.i8, 0);
    int32x4_t v15 = vmlal_lane_s16(vmull_lane_s16(v8, *(int16x4_t *)v11.i8, 3), v5, *(int16x4_t *)v11.i8, 2);
    int v16 = *(v10 - 1);
    v11.i32[0] = *v10;
    v10 += 2;
    result[v16] = vqrshrn_n_s32(vaddq_s32(v14, v12), 7uLL);
    result[v11.u32[0]] = vqrshrn_n_s32(vaddq_s32(v15, v13), 7uLL);
    result[v4 - v16] = vqrshrn_n_s32(vsubq_s32(v12, v14), 7uLL);
    result[v4 - v11.i32[0]] = vqrshrn_n_s32(vsubq_s32(v13, v15), 7uLL);
    --v3;
  }
  while (v3);
  return result;
}

int16x4_t *sub_1BBADA068(int16x4_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  int16x4_t v4 = *(int16x4_t *)((char *)result + 4 * a2);
  int v5 = (a2 - 1) * (a2 >> 2);
  int16x4_t v6 = result[a2];
  int16x4_t v7 = *(int16x4_t *)((char *)result + 12 * a2);
  int16x4_t v8 = *(int16x4_t *)((char *)result + 2 * a2);
  int16x4_t v9 = *(int16x4_t *)((char *)result + 6 * a2);
  int16x4_t v10 = *(int16x4_t *)((char *)result + 10 * a2);
  int16x4_t v11 = *(int16x4_t *)((char *)result + 14 * a2);
  int32x4_t v12 = vshll_n_s16(*result, 6uLL);
  uint64_t v13 = a2 >> 3;
  int32x4_t v14 = (unsigned __int8 *)(a3 + 3);
  int32x4_t v15 = (int16x8_t *)((char *)&unk_1BBB83880 + 2 * a2);
  do
  {
    int16x8_t v16 = *v15++;
    int32x4_t v17 = vmlal_laneq_s16(v12, v6, v16, 4);
    int32x4_t v18 = vmlsl_laneq_s16(v12, v6, v16, 4);
    int32x4_t v19 = vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v16.i8, 1), v4, *(int16x4_t *)v16.i8, 0);
    int32x4_t v20 = vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v16.i8, 3), v4, *(int16x4_t *)v16.i8, 2);
    int32x4_t v21 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, *a4, 1), v8, *a4, 0), v10, *a4, 2), v11, *a4, 3);
    int32x4_t v22 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, a4[1], 1), v8, a4[1], 0), v10, a4[1], 2), v11, a4[1], 3);
    int16x4_t v23 = a4[3];
    int32x4_t v24 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, a4[2], 1), v8, a4[2], 0), v10, a4[2], 2), v11, a4[2], 3);
    int32x4_t v25 = vaddq_s32(v19, v17);
    int32x4_t v26 = vsubq_s32(v17, v19);
    int v27 = *(v14 - 3);
    int v28 = *(v14 - 2);
    int v29 = *(v14 - 1);
    v16.i32[0] = *v14;
    v14 += 4;
    result[v27] = vqrshrn_n_s32(vaddq_s32(v21, v25), 7uLL);
    int32x4_t v30 = vaddq_s32(v20, v18);
    int32x4_t v31 = vsubq_s32(v18, v20);
    result[v28] = vqrshrn_n_s32(vaddq_s32(v22, v26), 7uLL);
    int32x4_t v32 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, v23, 1), v8, v23, 0), v10, v23, 2), v11, v23, 3);
    result[v29] = vqrshrn_n_s32(vaddq_s32(v24, v30), 7uLL);
    result[v16.u32[0]] = vqrshrn_n_s32(vaddq_s32(v32, v31), 7uLL);
    result[v5 - v27] = vqrshrn_n_s32(vsubq_s32(v25, v21), 7uLL);
    result[v5 - v28] = vqrshrn_n_s32(vsubq_s32(v26, v22), 7uLL);
    result[v5 - v29] = vqrshrn_n_s32(vsubq_s32(v30, v24), 7uLL);
    result[v5 - v16.i32[0]] = vqrshrn_n_s32(vsubq_s32(v31, v32), 7uLL);
    a4 += 4;
    --v13;
  }
  while (v13);
  return result;
}

uint64_t sub_1BBADA218(int16x4_t *a1, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v9 = (a2 - 1) * (a2 >> 2);
  unsigned int v10 = 2 * a2;
  uint64_t v30 = a2;
  uint64_t v11 = 4 * a2;
  uint64_t v12 = 12 * a2;
  unsigned int v13 = a2 >> 1;
  uint64_t result = sub_1BBADA798(a2 >> 1, a4, v31, *a1, *(int16x4_t *)((char *)a1 + v11), a1[v30], *(int16x4_t *)((char *)a1 + v12), a1[v10], *(int16x4_t *)((char *)&a1[v10] + v11), a1[v10 + v30], *(int16x4_t *)((char *)&a1[v10] + v12));
  uint64_t v15 = 0;
  int16x8_t v16 = (int16x4_t *)((char *)a1 + 2 * a2);
  int16x4_t v17 = *(int16x4_t *)((char *)v16 + v11);
  int16x4_t v18 = v16[v30];
  int16x4_t v19 = *(int16x4_t *)((char *)v16 + v12);
  int16x4_t v20 = *v16;
  int32x4_t v21 = &v16[v10];
  int16x4_t v22 = v21[v30];
  int16x4_t v23 = *(int16x4_t *)((char *)v21 + v11);
  int16x4_t v24 = *v21;
  int16x4_t v25 = *(int16x4_t *)((char *)v21 + v12);
  if (v13 <= 1) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = v13;
  }
  do
  {
    int32x4_t v27 = v31[v15];
    int32x4_t v28 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v17, *a5, 1), v20, *a5, 0), v18, *a5, 2), v19, *a5, 3), v24, *(int16x8_t *)a5->i8, 4), v23, *(int16x8_t *)a5->i8, 5), v22, *(int16x8_t *)a5->i8, 6), v25, *(int16x8_t *)a5->i8,
            7);
    int v29 = v9 - *(unsigned __int8 *)(a3 + v15);
    a1[*(unsigned __int8 *)(a3 + v15)] = vqrshrn_n_s32(vaddq_s32(v28, v27), 7uLL);
    a1[v29] = vqrshrn_n_s32(vsubq_s32(v27, v28), 7uLL);
    ++v15;
    a5 = (int16x4_t *)((char *)a5 + 2 * v13);
  }
  while (v26 != v15);
  return result;
}

int16x4_t *sub_1BBADA39C(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = a2 - 1;
  int16x4_t v4 = (int16x8_t *)((char *)&unk_1BBB83880 + 4 * a2);
  int16x4_t v5 = *(int16x4_t *)((char *)result + 2 * a2);
  int16x4_t v6 = *(int16x4_t *)((char *)result + 4 * a2);
  int16x4_t v7 = *(int16x4_t *)((char *)result + 6 * a2);
  int32x2_t v8 = (int32x2_t)vtrn1_s16(*result, v5);
  int32x2_t v9 = (int32x2_t)vtrn1_s16(v6, v7);
  int32x4_t v10 = vshll_n_s16((int16x4_t)vzip1_s32(v8, v9), 6uLL);
  uint64_t v11 = a2 >> 2;
  int32x2_t v12 = (int32x2_t)vtrn2_s16(*result, v5);
  int32x2_t v13 = (int32x2_t)vtrn2_s16(v6, v7);
  int16x4_t v14 = (int16x4_t)vzip2_s32(v8, v9);
  int16x4_t v15 = (int16x4_t)vzip1_s32(v12, v13);
  int16x4_t v16 = (int16x4_t)vzip2_s32(v12, v13);
  int16x4_t v17 = (unsigned __int8 *)(a3 + 1);
  do
  {
    int16x8_t v18 = *v4++;
    int32x4_t v19 = vmlal_laneq_s16(v10, v14, v18, 4);
    int32x4_t v20 = vmlsl_laneq_s16(v10, v14, v18, 4);
    int32x4_t v21 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 1), v15, *(int16x4_t *)v18.i8, 0);
    int32x4_t v22 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 3), v15, *(int16x4_t *)v18.i8, 2);
    int v23 = *(v17 - 1);
    v18.i32[0] = *v17;
    v17 += 2;
    result[v23] = vqrshrn_n_s32(vaddq_s32(v21, v19), 0xAuLL);
    result[v18.u32[0]] = vqrshrn_n_s32(vaddq_s32(v22, v20), 0xAuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v23))) = vqrshrn_n_s32(vsubq_s32(v19, v21), 0xAuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v18.i32[0]))) = vqrshrn_n_s32(vsubq_s32(v20, v22), 0xAuLL);
    --v11;
  }
  while (v11);
  return result;
}

int16x8_t *sub_1BBADA47C(int16x8_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  unsigned int v4 = a2 - 1;
  int16x4_t v5 = (int16x8_t *)((char *)&unk_1BBB83880 + 2 * a2);
  int16x8_t v6 = *(int16x8_t *)((char *)result + 4 * a2);
  int16x8_t v7 = *(int16x8_t *)((char *)result + 2 * a2);
  int16x8_t v8 = *(int16x8_t *)((char *)result + 6 * a2);
  int32x4_t v9 = (int32x4_t)vtrn1q_s16(*result, v7);
  int32x4_t v10 = (int32x4_t)vtrn2q_s16(*result, v7);
  int32x4_t v11 = (int32x4_t)vtrn1q_s16(v6, v8);
  int32x4_t v12 = (int32x4_t)vtrn2q_s16(v6, v8);
  int16x8_t v13 = (int16x8_t)vtrn1q_s32(v9, v11);
  int16x8_t v14 = (int16x8_t)vtrn2q_s32(v9, v11);
  int16x8_t v15 = (int16x8_t)vtrn1q_s32(v10, v12);
  int16x8_t v16 = (int16x8_t)vtrn2q_s32(v10, v12);
  int32x4_t v17 = vshll_n_s16(*(int16x4_t *)v13.i8, 6uLL);
  uint64_t v18 = a2 >> 3;
  int32x4_t v19 = (unsigned __int8 *)(a3 + 3);
  do
  {
    int16x8_t v20 = *v5++;
    int32x4_t v21 = vmlal_high_laneq_s16(v17, v13, v20, 4);
    int32x4_t v22 = vmlsl_high_laneq_s16(v17, v13, v20, 4);
    int32x4_t v23 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 0), v14, *(int16x4_t *)v20.i8, 1);
    int32x4_t v24 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 2), v14, *(int16x4_t *)v20.i8, 3);
    int32x4_t v25 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *a4, 1), *(int16x4_t *)v15.i8, *a4, 0), v15, *a4, 2), v16, *a4, 3);
    int32x4_t v26 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[1], 1), *(int16x4_t *)v15.i8, a4[1], 0), v15, a4[1], 2), v16, a4[1], 3);
    int16x4_t v27 = a4[3];
    int32x4_t v28 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[2], 1), *(int16x4_t *)v15.i8, a4[2], 0), v15, a4[2], 2), v16, a4[2], 3);
    int32x4_t v29 = vaddq_s32(v23, v21);
    int32x4_t v30 = vsubq_s32(v21, v23);
    int v31 = *(v19 - 3);
    int v32 = *(v19 - 2);
    int v33 = *(v19 - 1);
    v20.i32[0] = *v19;
    v19 += 4;
    *(int16x4_t *)&result->i8[8 * v31] = vqrshrn_n_s32(vaddq_s32(v25, v29), 0xAuLL);
    int32x4_t v34 = vaddq_s32(v24, v22);
    int32x4_t v35 = vsubq_s32(v22, v24);
    *(int16x4_t *)&result->i8[8 * v32] = vqrshrn_n_s32(vaddq_s32(v26, v30), 0xAuLL);
    int32x4_t v36 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, v27, 1), *(int16x4_t *)v15.i8, v27, 0), v15, v27, 2), v16, v27, 3);
    *(int16x4_t *)&result->i8[8 * v33] = vqrshrn_n_s32(vaddq_s32(v28, v34), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * v20.u32[0]] = vqrshrn_n_s32(vaddq_s32(v36, v35), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v31)] = vqrshrn_n_s32(vsubq_s32(v29, v25), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v32)] = vqrshrn_n_s32(vsubq_s32(v30, v26), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v33)] = vqrshrn_n_s32(vsubq_s32(v34, v28), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v20.i32[0])] = vqrshrn_n_s32(vsubq_s32(v35, v36), 0xAuLL);
    a4 += 4;
    --v18;
  }
  while (v18);
  return result;
}

int16x4_t sub_1BBADA610(int16x8_t *a1, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int32x4_t v9 = (int16x8_t *)((char *)a1 + 2 * a2);
  int32x4_t v10 = (int16x8_t *)((char *)a1 + 4 * a2);
  int32x4_t v11 = (int16x8_t *)((char *)a1 + 6 * a2);
  int16x8_t v12 = a1[1];
  int16x8_t v13 = v9[1];
  int16x8_t v14 = v10[1];
  int32x4_t v15 = (int32x4_t)vtrn1q_s16(*a1, *v9);
  int32x4_t v16 = (int32x4_t)vtrn2q_s16(*a1, *v9);
  int16x8_t v17 = v11[1];
  int32x4_t v18 = (int32x4_t)vtrn1q_s16(*v10, *v11);
  int32x4_t v19 = (int32x4_t)vtrn2q_s16(*v10, *v11);
  int8x16_t v20 = (int8x16_t)vtrn1q_s32(v15, v18);
  int8x16_t v21 = (int8x16_t)vtrn2q_s32(v15, v18);
  int16x8_t v37 = (int16x8_t)vtrn2q_s32(v16, v19);
  int16x8_t v38 = (int16x8_t)vtrn1q_s32(v16, v19);
  int32x4_t v22 = (int32x4_t)vtrn1q_s16(v12, v13);
  int32x4_t v23 = (int32x4_t)vtrn2q_s16(v12, v13);
  int32x4_t v24 = (int32x4_t)vtrn1q_s16(v14, v17);
  int32x4_t v25 = (int32x4_t)vtrn2q_s16(v14, v17);
  int8x16_t v26 = (int8x16_t)vtrn1q_s32(v22, v24);
  int8x16_t v27 = (int8x16_t)vtrn2q_s32(v22, v24);
  int16x8_t v35 = (int16x8_t)vtrn2q_s32(v23, v25);
  int16x8_t v36 = (int16x8_t)vtrn1q_s32(v23, v25);
  unsigned int v28 = a2 >> 1;
  sub_1BBADA798(a2 >> 1, a4, v39, *(int16x4_t *)v20.i8, *(int16x4_t *)v21.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(int16x4_t *)v26.i8, *(int16x4_t *)v27.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int16x4_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  uint64_t v29 = 0;
  if (v28 <= 1) {
    uint64_t v30 = 1;
  }
  else {
    uint64_t v30 = v28;
  }
  do
  {
    int32x4_t v31 = v39[v29];
    int32x4_t v32 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v37.i8, *a5, 1), *(int16x4_t *)v38.i8, *a5, 0), v38, *a5, 2), v37, *a5, 3), *(int16x4_t *)v36.i8, *(int16x8_t *)a5->i8, 4), *(int16x4_t *)v35.i8, *(int16x8_t *)a5->i8, 5), v36,
              *(int16x8_t *)a5->i8,
              6),
            v35,
            *(int16x8_t *)a5->i8,
            7);
    int16x4_t result = vqrshrn_n_s32(vaddq_s32(v32, v31), 0xAuLL);
    int v34 = 4 * (~*(unsigned __int8 *)(a3 + v29) + a2);
    *(int16x4_t *)&a1->i8[8 * *(unsigned __int8 *)(a3 + v29)] = result;
    *(int16x4_t *)&a1->i8[2 * v34] = vqrshrn_n_s32(vsubq_s32(v31, v32), 0xAuLL);
    ++v29;
    a5 = (int16x4_t *)((char *)a5 + 2 * v28);
  }
  while (v30 != v29);
  return result;
}

uint64_t sub_1BBADA798(uint64_t result, int16x4_t *a2, int32x4_t *a3, int16x4_t a4, int16x4_t a5, int16x4_t a6, int16x4_t a7, int16x4_t a8, int16x4_t a9, int16x4_t a10, int16x4_t a11)
{
  int32x4_t v11 = vshll_n_s16(a4, 6uLL);
  int16x8_t v12 = (int16x8_t *)((char *)&unk_1BBB83880 + 2 * result);
  uint64_t v13 = result >> 3;
  do
  {
    int16x8_t v14 = *v12++;
    int32x4_t v15 = vmlal_laneq_s16(v11, a8, v14, 4);
    int32x4_t v16 = vmlsl_laneq_s16(v11, a8, v14, 4);
    int32x4_t v17 = vmlal_lane_s16(vmull_lane_s16(a10, *(int16x4_t *)v14.i8, 1), a6, *(int16x4_t *)v14.i8, 0);
    int32x4_t v18 = vmlal_lane_s16(vmull_lane_s16(a10, *(int16x4_t *)v14.i8, 3), a6, *(int16x4_t *)v14.i8, 2);
    int32x4_t v19 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(a7, *a2, 1), a5, *a2, 0), a9, *a2, 2), a11, *a2, 3);
    int32x4_t v20 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(a7, a2[1], 1), a5, a2[1], 0), a9, a2[1], 2), a11, a2[1], 3);
    int16x4_t v21 = a2[3];
    int32x4_t v22 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(a7, a2[2], 1), a5, a2[2], 0), a9, a2[2], 2), a11, a2[2], 3);
    int32x4_t v23 = vaddq_s32(v17, v15);
    int32x4_t v24 = vsubq_s32(v15, v17);
    int32x4_t v25 = vaddq_s32(v18, v16);
    int32x4_t v26 = vsubq_s32(v16, v18);
    *a3 = vaddq_s32(v19, v23);
    a3[1] = vaddq_s32(v20, v24);
    int32x4_t v27 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(a7, v21, 1), a5, v21, 0), a9, v21, 2), a11, v21, 3);
    a3[2] = vaddq_s32(v22, v25);
    a3[3] = vaddq_s32(v27, v26);
    a3[4] = vsubq_s32(v23, v19);
    a3[5] = vsubq_s32(v24, v20);
    a3[6] = vsubq_s32(v25, v22);
    a3[7] = vsubq_s32(v26, v27);
    a2 += 4;
    a3 += 8;
    --v13;
  }
  while (v13);
  return result;
}

uint8x16_t *sub_1BBADA874(uint8x16_t *result, uint64_t a2, int16x4_t *a3, const __int16 *a4, int a5, int a6)
{
  int16x8_t v6 = (int16x4_t *)a4;
  int16x8_t v7 = a3;
  int32x4_t v9 = result;
  if ((a6 | a5) > 1)
  {
    if (a5 >= 1) {
      sub_1BBADAAE0(a3, a5);
    }
    if (a6 >= 1) {
      sub_1BBADAAE0(v6, a6);
    }
    unsigned int v22 = 0;
    do
    {
      uint64_t v23 = 0;
      int32x4_t v24 = &v9->i8[a2];
      int32x4_t v25 = &v9->i8[2 * a2];
      int32x4_t v26 = &v9->i8[3 * a2];
      int32x4_t v27 = v7 + 4;
      unsigned int v28 = v7 + 8;
      uint64_t v29 = v7 + 12;
      int16x4_t result = (uint8x16_t *)&v6[4];
      uint64_t v30 = v6 + 8;
      int32x4_t v31 = v6 + 12;
      char v32 = 1;
      do
      {
        char v33 = v32;
        uint64_t v34 = 2 * v23;
        uint8x16_t v35 = *(uint8x16_t *)((char *)v9 + v34);
        uint8x16_t v36 = *(uint8x16_t *)&v24[v34];
        uint8x16_t v37 = *(uint8x16_t *)&v25[v34];
        uint8x16_t v38 = *(uint8x16_t *)&v26[v34];
        int16x8_t v39 = *(int16x8_t *)&v7->i8[v34];
        int16x8_t v40 = *(int16x8_t *)&v27->i8[v34];
        int16x8_t v41 = *(int16x8_t *)&v28->i8[v34];
        int16x8_t v42 = *(int16x8_t *)&v29->i8[v34];
        int16x8_t v43 = *(int16x8_t *)&v6->i8[v34];
        int16x8_t v44 = *(int16x8_t *)((char *)result + v34);
        int16x8_t v45 = *(int16x8_t *)&v30->i8[v34];
        int16x8_t v46 = *(int16x8_t *)&v31->i8[v34];
        *(_OWORD *)&v7->i8[v34] = 0uLL;
        *(_OWORD *)&v27->i8[v34] = 0uLL;
        *(_OWORD *)&v28->i8[v34] = 0uLL;
        *(_OWORD *)&v29->i8[v34] = 0uLL;
        *(_OWORD *)&v6->i8[v34] = 0uLL;
        *(uint8x16_t *)((char *)result + v34) = 0uLL;
        *(_OWORD *)&v30->i8[v34] = 0uLL;
        *(_OWORD *)&v31->i8[v34] = 0uLL;
        int32x4_t v47 = (int32x4_t)vtrn1q_s16(v39, v40);
        int32x4_t v48 = (int32x4_t)vtrn2q_s16(v39, v40);
        int32x4_t v49 = (int32x4_t)vtrn1q_s16(v41, v42);
        int32x4_t v50 = (int32x4_t)vtrn2q_s16(v41, v42);
        int16x8_t v51 = (int16x8_t)vtrn1q_s32(v47, v49);
        int16x8_t v52 = (int16x8_t)vtrn2q_s32(v47, v49);
        int16x8_t v53 = (int16x8_t)vtrn1q_s32(v48, v50);
        int16x8_t v54 = (int16x8_t)vtrn2q_s32(v48, v50);
        int32x4_t v55 = (int32x4_t)vtrn1q_s16(v43, v44);
        int32x4_t v56 = (int32x4_t)vtrn2q_s16(v43, v44);
        int32x4_t v57 = (int32x4_t)vtrn1q_s16(v45, v46);
        int32x4_t v58 = (int32x4_t)vtrn2q_s16(v45, v46);
        int16x8_t v59 = (int16x8_t)vtrn1q_s32(v55, v57);
        int16x8_t v60 = (int16x8_t)vtrn2q_s32(v55, v57);
        int16x8_t v61 = (int16x8_t)vtrn1q_s32(v56, v58);
        int16x8_t v62 = (int16x8_t)vtrn2q_s32(v56, v58);
        *(int8x16_t *)((char *)v9 + v34) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v51, v59), *(uint8x8_t *)v35.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v51, v59), v35));
        *(int8x16_t *)&v24[v34] = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v53, v61), *(uint8x8_t *)v36.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v53, v61), v36));
        *(int8x16_t *)&v25[v34] = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v52, v60), *(uint8x8_t *)v37.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v52, v60), v37));
        *(int8x16_t *)&v26[v34] = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v54, v62), *(uint8x8_t *)v38.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v54, v62), v38));
        uint64_t v23 = 8;
        char v32 = 0;
      }
      while ((v33 & 1) != 0);
      int32x4_t v9 = (uint8x16_t *)((char *)v9 + 4 * a2);
      v7 += 16;
      v6 += 16;
      BOOL v63 = v22 >= 0xC;
      v22 += 4;
    }
    while (!v63);
  }
  else
  {
    int16x8_t v10 = vld1q_dup_s16((const __int16 *)a3);
    int16x8_t v11 = vld1q_dup_s16(a4);
    int16x8_t v12 = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v10, v11), 1uLL), 6uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    int16x8_t v13 = vnegq_s16(v12);
    uint8x16_t v14 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v12), v12);
    uint8x16_t v15 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v13), v13);
    unsigned int v16 = -2;
    do
    {
      int32x4_t v17 = (uint8x16_t *)((char *)v9 + a2);
      uint8x16_t v18 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v9 + a2), v14), v15);
      uint8x16_t v19 = vqsubq_u8(vqaddq_u8(v9[1], v14), v15);
      uint8x16_t v20 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)&v9[1] + a2), v14), v15);
      *int32x4_t v9 = vqsubq_u8(vqaddq_u8(*v9, v14), v15);
      *int32x4_t v17 = v18;
      v9[1] = v19;
      v17[1] = v20;
      int32x4_t v9 = (uint8x16_t *)((char *)v9 + 2 * a2);
      v16 += 2;
    }
    while (v16 < 0xE);
  }
  return result;
}

void sub_1BBADAAE0(int16x4_t *a1, int a2)
{
  uint64_t v2 = a1;
  if (a2 == 1)
  {
    int16x8_t v3 = vdupq_n_s16((a1->i16[0] + 65) >> 7);
    unsigned int v4 = -32;
    do
    {
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v4 += 32;
      v2 += 8;
    }
    while (v4 < 0xE0);
    return;
  }
  if (a2 <= 16)
  {
    sub_1BBAD9F9C(a1, 0x10u, (uint64_t)&unk_1BBB83980);
LABEL_12:
    unint64_t v8 = -4;
    do
    {
      sub_1BBADACC0(v2, 0x10u, (uint64_t)&unk_1BBB83A60);
      v8 += 4;
      v2 += 16;
    }
    while (v8 < 0xC);
    return;
  }
  if (a2 >= 0x31)
  {
    unint64_t v6 = -4;
    int16x8_t v7 = a1;
    do
    {
      sub_1BBADA218(v7, 0x10u, (uint64_t)&unk_1BBB839D0, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v6 += 4;
      ++v7;
    }
    while (v6 < 0xC);
  }
  else
  {
    sub_1BBADA068(a1, 0x10u, (uint64_t)&unk_1BBB83980, (int16x4_t *)aZwpf);
    sub_1BBADA068(v2 + 1, 0x10u, (uint64_t)&unk_1BBB83980, (int16x4_t *)aZwpf);
  }
  if (a2 <= 32) {
    goto LABEL_12;
  }
  if (a2 >= 0x51)
  {
    unint64_t v10 = -4;
    do
    {
      sub_1BBADAF34((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1BBB83A68, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v10 += 4;
      v2 += 16;
    }
    while (v10 < 0xC);
  }
  else
  {
    unint64_t v9 = -4;
    do
    {
      sub_1BBADADA0((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1BBB83A60, (int16x4_t *)aZwpf);
      v9 += 4;
      v2 += 16;
    }
    while (v9 < 0xC);
  }
}

int16x4_t *sub_1BBADACC0(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = a2 - 1;
  unsigned int v4 = (int16x8_t *)((char *)&unk_1BBB83880 + 4 * a2);
  int16x4_t v5 = *(int16x4_t *)((char *)result + 2 * a2);
  int16x4_t v6 = *(int16x4_t *)((char *)result + 4 * a2);
  int16x4_t v7 = *(int16x4_t *)((char *)result + 6 * a2);
  int32x2_t v8 = (int32x2_t)vtrn1_s16(*result, v5);
  int32x2_t v9 = (int32x2_t)vtrn1_s16(v6, v7);
  int32x4_t v10 = vshll_n_s16((int16x4_t)vzip1_s32(v8, v9), 6uLL);
  uint64_t v11 = a2 >> 2;
  int32x2_t v12 = (int32x2_t)vtrn2_s16(*result, v5);
  int32x2_t v13 = (int32x2_t)vtrn2_s16(v6, v7);
  int16x4_t v14 = (int16x4_t)vzip2_s32(v8, v9);
  int16x4_t v15 = (int16x4_t)vzip1_s32(v12, v13);
  int16x4_t v16 = (int16x4_t)vzip2_s32(v12, v13);
  int32x4_t v17 = (unsigned __int8 *)(a3 + 1);
  do
  {
    int16x8_t v18 = *v4++;
    int32x4_t v19 = vmlal_laneq_s16(v10, v14, v18, 4);
    int32x4_t v20 = vmlsl_laneq_s16(v10, v14, v18, 4);
    int32x4_t v21 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 1), v15, *(int16x4_t *)v18.i8, 0);
    int32x4_t v22 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 3), v15, *(int16x4_t *)v18.i8, 2);
    int v23 = *(v17 - 1);
    v18.i32[0] = *v17;
    v17 += 2;
    result[v23] = vqrshrn_n_s32(vaddq_s32(v21, v19), 0xCuLL);
    result[v18.u32[0]] = vqrshrn_n_s32(vaddq_s32(v22, v20), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v23))) = vqrshrn_n_s32(vsubq_s32(v19, v21), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v18.i32[0]))) = vqrshrn_n_s32(vsubq_s32(v20, v22), 0xCuLL);
    --v11;
  }
  while (v11);
  return result;
}

int16x8_t *sub_1BBADADA0(int16x8_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  unsigned int v4 = a2 - 1;
  int16x4_t v5 = (int16x8_t *)((char *)&unk_1BBB83880 + 2 * a2);
  int16x8_t v6 = *(int16x8_t *)((char *)result + 4 * a2);
  int16x8_t v7 = *(int16x8_t *)((char *)result + 2 * a2);
  int16x8_t v8 = *(int16x8_t *)((char *)result + 6 * a2);
  int32x4_t v9 = (int32x4_t)vtrn1q_s16(*result, v7);
  int32x4_t v10 = (int32x4_t)vtrn2q_s16(*result, v7);
  int32x4_t v11 = (int32x4_t)vtrn1q_s16(v6, v8);
  int32x4_t v12 = (int32x4_t)vtrn2q_s16(v6, v8);
  int16x8_t v13 = (int16x8_t)vtrn1q_s32(v9, v11);
  int16x8_t v14 = (int16x8_t)vtrn2q_s32(v9, v11);
  int16x8_t v15 = (int16x8_t)vtrn1q_s32(v10, v12);
  int16x8_t v16 = (int16x8_t)vtrn2q_s32(v10, v12);
  int32x4_t v17 = vshll_n_s16(*(int16x4_t *)v13.i8, 6uLL);
  uint64_t v18 = a2 >> 3;
  int32x4_t v19 = (unsigned __int8 *)(a3 + 3);
  do
  {
    int16x8_t v20 = *v5++;
    int32x4_t v21 = vmlal_high_laneq_s16(v17, v13, v20, 4);
    int32x4_t v22 = vmlsl_high_laneq_s16(v17, v13, v20, 4);
    int32x4_t v23 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 0), v14, *(int16x4_t *)v20.i8, 1);
    int32x4_t v24 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 2), v14, *(int16x4_t *)v20.i8, 3);
    int32x4_t v25 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *a4, 1), *(int16x4_t *)v15.i8, *a4, 0), v15, *a4, 2), v16, *a4, 3);
    int32x4_t v26 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[1], 1), *(int16x4_t *)v15.i8, a4[1], 0), v15, a4[1], 2), v16, a4[1], 3);
    int16x4_t v27 = a4[3];
    int32x4_t v28 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[2], 1), *(int16x4_t *)v15.i8, a4[2], 0), v15, a4[2], 2), v16, a4[2], 3);
    int32x4_t v29 = vaddq_s32(v23, v21);
    int32x4_t v30 = vsubq_s32(v21, v23);
    int v31 = *(v19 - 3);
    int v32 = *(v19 - 2);
    int v33 = *(v19 - 1);
    v20.i32[0] = *v19;
    v19 += 4;
    *(int16x4_t *)&result->i8[8 * v31] = vqrshrn_n_s32(vaddq_s32(v25, v29), 0xCuLL);
    int32x4_t v34 = vaddq_s32(v24, v22);
    int32x4_t v35 = vsubq_s32(v22, v24);
    *(int16x4_t *)&result->i8[8 * v32] = vqrshrn_n_s32(vaddq_s32(v26, v30), 0xCuLL);
    int32x4_t v36 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, v27, 1), *(int16x4_t *)v15.i8, v27, 0), v15, v27, 2), v16, v27, 3);
    *(int16x4_t *)&result->i8[8 * v33] = vqrshrn_n_s32(vaddq_s32(v28, v34), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * v20.u32[0]] = vqrshrn_n_s32(vaddq_s32(v36, v35), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v31)] = vqrshrn_n_s32(vsubq_s32(v29, v25), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v32)] = vqrshrn_n_s32(vsubq_s32(v30, v26), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v33)] = vqrshrn_n_s32(vsubq_s32(v34, v28), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v20.i32[0])] = vqrshrn_n_s32(vsubq_s32(v35, v36), 0xCuLL);
    a4 += 4;
    --v18;
  }
  while (v18);
  return result;
}

int16x4_t sub_1BBADAF34(int16x8_t *a1, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int32x4_t v9 = (int16x8_t *)((char *)a1 + 2 * a2);
  int32x4_t v10 = (int16x8_t *)((char *)a1 + 4 * a2);
  int32x4_t v11 = (int16x8_t *)((char *)a1 + 6 * a2);
  int16x8_t v12 = a1[1];
  int16x8_t v13 = v9[1];
  int16x8_t v14 = v10[1];
  int32x4_t v15 = (int32x4_t)vtrn1q_s16(*a1, *v9);
  int32x4_t v16 = (int32x4_t)vtrn2q_s16(*a1, *v9);
  int16x8_t v17 = v11[1];
  int32x4_t v18 = (int32x4_t)vtrn1q_s16(*v10, *v11);
  int32x4_t v19 = (int32x4_t)vtrn2q_s16(*v10, *v11);
  int8x16_t v20 = (int8x16_t)vtrn1q_s32(v15, v18);
  int8x16_t v21 = (int8x16_t)vtrn2q_s32(v15, v18);
  int16x8_t v37 = (int16x8_t)vtrn2q_s32(v16, v19);
  int16x8_t v38 = (int16x8_t)vtrn1q_s32(v16, v19);
  int32x4_t v22 = (int32x4_t)vtrn1q_s16(v12, v13);
  int32x4_t v23 = (int32x4_t)vtrn2q_s16(v12, v13);
  int32x4_t v24 = (int32x4_t)vtrn1q_s16(v14, v17);
  int32x4_t v25 = (int32x4_t)vtrn2q_s16(v14, v17);
  int8x16_t v26 = (int8x16_t)vtrn1q_s32(v22, v24);
  int8x16_t v27 = (int8x16_t)vtrn2q_s32(v22, v24);
  int16x8_t v35 = (int16x8_t)vtrn2q_s32(v23, v25);
  int16x8_t v36 = (int16x8_t)vtrn1q_s32(v23, v25);
  unsigned int v28 = a2 >> 1;
  sub_1BBADA798(a2 >> 1, a4, v39, *(int16x4_t *)v20.i8, *(int16x4_t *)v21.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(int16x4_t *)v26.i8, *(int16x4_t *)v27.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int16x4_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  uint64_t v29 = 0;
  if (v28 <= 1) {
    uint64_t v30 = 1;
  }
  else {
    uint64_t v30 = v28;
  }
  do
  {
    int32x4_t v31 = v39[v29];
    int32x4_t v32 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v37.i8, *a5, 1), *(int16x4_t *)v38.i8, *a5, 0), v38, *a5, 2), v37, *a5, 3), *(int16x4_t *)v36.i8, *(int16x8_t *)a5->i8, 4), *(int16x4_t *)v35.i8, *(int16x8_t *)a5->i8, 5), v36,
              *(int16x8_t *)a5->i8,
              6),
            v35,
            *(int16x8_t *)a5->i8,
            7);
    int16x4_t result = vqrshrn_n_s32(vaddq_s32(v32, v31), 0xCuLL);
    int v34 = 4 * (~*(unsigned __int8 *)(a3 + v29) + a2);
    *(int16x4_t *)&a1->i8[8 * *(unsigned __int8 *)(a3 + v29)] = result;
    *(int16x4_t *)&a1->i8[2 * v34] = vqrshrn_n_s32(vsubq_s32(v31, v32), 0xCuLL);
    ++v29;
    a5 = (int16x4_t *)((char *)a5 + 2 * v28);
  }
  while (v30 != v29);
  return result;
}

int16x4_t *sub_1BBADB0BC(int16x4_t *result, uint64_t a2, int16x4_t *a3, const __int16 *a4, int a5, int a6)
{
  int16x8_t v6 = (__int16 *)a4;
  int16x8_t v7 = (int16x8_t *)a3;
  int32x4_t v9 = (uint16x8_t *)result;
  if ((a6 | a5) > 1)
  {
    if (a5 >= 1) {
      int16x4_t result = sub_1BBADB2E0(a3, a5);
    }
    if (a6 >= 1) {
      int16x4_t result = sub_1BBADB2E0((int16x4_t *)v6, a6);
    }
    uint64_t v21 = 2 * a2;
    uint64_t v22 = 4 * a2;
    int32x4_t v23 = v9 + 1;
    uint64_t v24 = 6 * a2;
    char v25 = 1;
    v26.i64[0] = 0xFC00FC00FC00FC00;
    v26.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      char v27 = v25;
      uint16x8_t v28 = v23[-1];
      uint16x8_t v29 = *v23;
      uint64_t v30 = (int16x8_t *)&v23->i8[v21];
      uint16x8_t v31 = *(uint16x8_t *)((char *)&v23[-1] + v21);
      uint16x8_t v32 = *(uint16x8_t *)((char *)v23 + 2 * a2);
      int v33 = (int16x8_t *)&v23->i8[v22];
      uint16x8_t v34 = *(uint16x8_t *)((char *)&v23[-1] + v22);
      uint16x8_t v35 = *(uint16x8_t *)((char *)v23 + 4 * a2);
      int16x8_t v36 = (int16x8_t *)&v23->i8[v24];
      uint16x8_t v38 = *(uint16x8_t *)((char *)&v23[-1] + v24);
      uint16x8_t v37 = *(uint16x8_t *)((char *)v23 + 6 * a2);
      int16x8_t v39 = *v7;
      int16x8_t v40 = v7[1];
      int16x8_t v41 = v7[2];
      int16x8_t v42 = v7[3];
      int16x8_t v43 = *(int16x8_t *)v6;
      int16x8_t v44 = *((int16x8_t *)v6 + 1);
      int32x4_t v45 = (int32x4_t)vtrn1q_s16(*v7, v40);
      int16x8_t v46 = *((int16x8_t *)v6 + 2);
      int16x8_t v47 = *((int16x8_t *)v6 + 3);
      *int16x8_t v7 = 0uLL;
      v7[1] = 0uLL;
      v7[2] = 0uLL;
      v7[3] = 0uLL;
      int32x4_t v48 = (int32x4_t)vtrn2q_s16(v39, v40);
      int32x4_t v49 = (int32x4_t)vtrn1q_s16(v41, v42);
      int32x4_t v50 = (int32x4_t)vtrn2q_s16(v41, v42);
      int16x8_t v51 = (int16x8_t)vtrn1q_s32(v45, v49);
      int16x8_t v52 = (int16x8_t)vtrn2q_s32(v45, v49);
      int16x8_t v53 = (int16x8_t)vtrn1q_s32(v48, v50);
      int16x8_t v54 = (int16x8_t)vtrn2q_s32(v48, v50);
      int32x4_t v55 = (int32x4_t)vtrn1q_s16(v43, v44);
      int32x4_t v56 = (int32x4_t)vtrn2q_s16(v43, v44);
      int32x4_t v57 = (int32x4_t)vtrn1q_s16(v46, v47);
      int32x4_t v58 = (int32x4_t)vtrn2q_s16(v46, v47);
      int16x8_t v59 = (int16x8_t)vtrn1q_s32(v55, v57);
      int16x8_t v60 = (int16x8_t)vtrn2q_s32(v55, v57);
      int16x8_t v61 = (int16x8_t)vtrn1q_s32(v56, v58);
      int16x8_t v62 = (int16x8_t)vtrn2q_s32(v56, v58);
      *((_OWORD *)v6 + 2) = 0uLL;
      *((_OWORD *)v6 + 3) = 0uLL;
      *(_OWORD *)int16x8_t v6 = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      v6 += 32;
      v23[-1] = (uint16x8_t)vminq_s16((int16x8_t)vsqaddq_u16(v28, vzip1q_s16(v51, v59)), v26);
      v30[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v31, vzip1q_s16(v53, v61)), v26);
      v33[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v34, vzip1q_s16(v52, v60)), v26);
      v36[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v38, vzip1q_s16(v54, v62)), v26);
      *(int16x8_t *)int32x4_t v23 = vminq_s16((int16x8_t)vsqaddq_u16(v29, vzip2q_s16(v51, v59)), v26);
      *uint64_t v30 = vminq_s16((int16x8_t)vsqaddq_u16(v32, vzip2q_s16(v53, v61)), v26);
      *int v33 = vminq_s16((int16x8_t)vsqaddq_u16(v35, vzip2q_s16(v52, v60)), v26);
      *int16x8_t v36 = vminq_s16((int16x8_t)vsqaddq_u16(v37, vzip2q_s16(v54, v62)), v26);
      int32x4_t v23 = (uint16x8_t *)((char *)v23 + 8 * a2);
      v7 += 4;
      char v25 = 0;
    }
    while ((v27 & 1) != 0);
  }
  else
  {
    int16x8_t v10 = vld1q_dup_s16((const __int16 *)a3);
    int16x8_t v11 = vld1q_dup_s16(a4);
    int16x8_t v12 = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v10, v11), 1uLL), 4uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    uint64_t v13 = 2 * a2;
    unsigned int v14 = -2;
    v15.i64[0] = 0xFC00FC00FC00FC00;
    v15.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      int32x4_t v16 = (int16x8_t *)&v9->i8[v13];
      int16x8_t v17 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)v9 + 2 * a2), v12), v15);
      int16x8_t v18 = vminq_s16((int16x8_t)vsqaddq_u16(v9[1], v12), v15);
      int16x8_t v19 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)&v9[1] + v13), v12), v15);
      *(int16x8_t *)int32x4_t v9 = vminq_s16((int16x8_t)vsqaddq_u16(*v9, v12), v15);
      *int32x4_t v16 = v17;
      v9[1] = (uint16x8_t)v18;
      v16[1] = v19;
      int32x4_t v9 = (uint16x8_t *)((char *)v9 + 4 * a2);
      v14 += 2;
    }
    while (v14 < 6);
  }
  return result;
}

int16x4_t *sub_1BBADB2E0(int16x4_t *result, int a2)
{
  uint64_t v2 = result;
  if (a2 == 1)
  {
    int16x8_t v3 = vdupq_n_s16((result->i16[0] + 17) >> 5);
    char v4 = 1;
    do
    {
      char v5 = v4;
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v2 += 8;
      char v4 = 0;
    }
    while ((v5 & 1) != 0);
  }
  else if (a2 > 16)
  {
    sub_1BBADA068(result, 8u, (uint64_t)&unk_1BBB83850, (int16x4_t *)aYk2);
    sub_1BBADA068(v2 + 1, 8u, (uint64_t)&unk_1BBB83850, (int16x4_t *)aYk2);
    sub_1BBADA47C((int16x8_t *)v2, 8u, (uint64_t)&unk_1BBB83850, (int16x4_t *)aYk2);
    return (int16x4_t *)sub_1BBADA47C((int16x8_t *)&v2[8], 8u, (uint64_t)&unk_1BBB83850, (int16x4_t *)aYk2);
  }
  else
  {
    sub_1BBAD9F9C(result, 8u, (uint64_t)&unk_1BBB83850);
    sub_1BBADA39C(v2, 8u, (uint64_t)&unk_1BBB83850);
    return sub_1BBADA39C(v2 + 8, 8u, (uint64_t)&unk_1BBB83850);
  }
  return result;
}

int16x4_t *sub_1BBADB40C(int16x4_t *result, uint64_t a2, int16x4_t *a3, const __int16 *a4, int a5, int a6)
{
  int16x8_t v6 = (__int16 *)a4;
  int16x8_t v7 = (int16x8_t *)a3;
  int32x4_t v9 = (uint8x16_t *)result;
  if ((a6 | a5) > 1)
  {
    if (a5 >= 1) {
      int16x4_t result = sub_1BBADB61C(a3, a5);
    }
    if (a6 >= 1) {
      int16x4_t result = sub_1BBADB61C((int16x4_t *)v6, a6);
    }
    char v22 = 1;
    do
    {
      char v23 = v22;
      uint8x16_t v24 = *(uint8x16_t *)((char *)v9 + a2);
      uint8x16_t v25 = *v9;
      uint8x16_t v26 = *(uint8x16_t *)((char *)v9 + 2 * a2);
      uint8x16_t v27 = *(uint8x16_t *)((char *)v9 + 3 * a2);
      int16x8_t v28 = *v7;
      int16x8_t v29 = v7[1];
      int16x8_t v30 = v7[2];
      int16x8_t v31 = v7[3];
      int16x8_t v32 = *(int16x8_t *)v6;
      int16x8_t v33 = *((int16x8_t *)v6 + 1);
      int16x8_t v34 = *((int16x8_t *)v6 + 2);
      int16x8_t v35 = *((int16x8_t *)v6 + 3);
      *int16x8_t v7 = 0uLL;
      v7[1] = 0uLL;
      v7[2] = 0uLL;
      v7[3] = 0uLL;
      int32x4_t v36 = (int32x4_t)vtrn1q_s16(v28, v29);
      int32x4_t v37 = (int32x4_t)vtrn2q_s16(v28, v29);
      int32x4_t v38 = (int32x4_t)vtrn1q_s16(v30, v31);
      int32x4_t v39 = (int32x4_t)vtrn2q_s16(v30, v31);
      int16x8_t v40 = (int16x8_t)vtrn1q_s32(v36, v38);
      int16x8_t v41 = (int16x8_t)vtrn2q_s32(v36, v38);
      int16x8_t v42 = (int16x8_t)vtrn1q_s32(v37, v39);
      int16x8_t v43 = (int16x8_t)vtrn2q_s32(v37, v39);
      int32x4_t v44 = (int32x4_t)vtrn1q_s16(v32, v33);
      int32x4_t v45 = (int32x4_t)vtrn2q_s16(v32, v33);
      int32x4_t v46 = (int32x4_t)vtrn1q_s16(v34, v35);
      int32x4_t v47 = (int32x4_t)vtrn2q_s16(v34, v35);
      int16x8_t v48 = (int16x8_t)vtrn1q_s32(v44, v46);
      int16x8_t v49 = (int16x8_t)vtrn2q_s32(v44, v46);
      int16x8_t v50 = (int16x8_t)vtrn1q_s32(v45, v47);
      int16x8_t v51 = (int16x8_t)vtrn2q_s32(v45, v47);
      *((_OWORD *)v6 + 2) = 0uLL;
      *((_OWORD *)v6 + 3) = 0uLL;
      *(_OWORD *)int16x8_t v6 = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      v6 += 32;
      *(int8x16_t *)int32x4_t v9 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v40, v48), *(uint8x8_t *)v25.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v40, v48), v25));
      *(int8x16_t *)((char *)v9 + a2) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v42, v50), *(uint8x8_t *)v24.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v42, v50), v24));
      *(int8x16_t *)((char *)v9 + 2 * a2) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v41, v49), *(uint8x8_t *)v26.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v41, v49), v26));
      *(int8x16_t *)((char *)v9 + 3 * a2) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v43, v51), *(uint8x8_t *)v27.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v43, v51), v27));
      int32x4_t v9 = (uint8x16_t *)((char *)v9 + 4 * a2);
      v7 += 4;
      char v22 = 0;
    }
    while ((v23 & 1) != 0);
  }
  else
  {
    int16x8_t v10 = vld1q_dup_s16((const __int16 *)a3);
    int16x8_t v11 = vld1q_dup_s16(a4);
    int16x8_t v12 = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v10, v11), 1uLL), 6uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    int16x8_t v13 = vnegq_s16(v12);
    uint8x16_t v14 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v12), v12);
    uint8x16_t v15 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v13), v13);
    char v16 = 1;
    do
    {
      char v17 = v16;
      uint8x16_t v18 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v9 + a2), v14), v15);
      uint8x16_t v19 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v9 + 2 * a2), v14), v15);
      uint8x16_t v20 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v9 + 3 * a2), v14), v15);
      *int32x4_t v9 = vqsubq_u8(vqaddq_u8(*v9, v14), v15);
      *(uint8x16_t *)((char *)v9 + a2) = v18;
      *(uint8x16_t *)((char *)v9 + 2 * a2) = v19;
      *(uint8x16_t *)((char *)v9 + 3 * a2) = v20;
      int32x4_t v9 = (uint8x16_t *)((char *)v9 + 4 * a2);
      char v16 = 0;
    }
    while ((v17 & 1) != 0);
  }
  return result;
}

int16x4_t *sub_1BBADB61C(int16x4_t *result, int a2)
{
  uint64_t v2 = result;
  if (a2 == 1)
  {
    int16x8_t v3 = vdupq_n_s16((result->i16[0] + 65) >> 7);
    char v4 = 1;
    do
    {
      char v5 = v4;
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v2 += 8;
      char v4 = 0;
    }
    while ((v5 & 1) != 0);
  }
  else if (a2 > 16)
  {
    sub_1BBADA068(result, 8u, (uint64_t)&unk_1BBB83850, (int16x4_t *)aYk2);
    sub_1BBADA068(v2 + 1, 8u, (uint64_t)&unk_1BBB83850, (int16x4_t *)aYk2);
    sub_1BBADADA0((int16x8_t *)v2, 8u, (uint64_t)&unk_1BBB83850, (int16x4_t *)aYk2);
    return (int16x4_t *)sub_1BBADADA0((int16x8_t *)&v2[8], 8u, (uint64_t)&unk_1BBB83850, (int16x4_t *)aYk2);
  }
  else
  {
    sub_1BBAD9F9C(result, 8u, (uint64_t)&unk_1BBB83850);
    sub_1BBADACC0(v2, 8u, (uint64_t)&unk_1BBB83850);
    return sub_1BBADACC0(v2 + 8, 8u, (uint64_t)&unk_1BBB83850);
  }
  return result;
}

int16x8_t sub_1BBADB748(uint16x8_t *a1, uint64_t a2, uint64_t a3, int16x8_t *a4, int a5, int a6)
{
  if ((a5 & 0x80000000) == 0)
  {
    if (a5) {
      sub_1BBADB850((int32x4_t *)a3, a5);
    }
    if ((a6 & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    int16x8_t v12 = vrshrq_n_s16(a4[1], 3uLL);
    *a4 = vrshrq_n_s16(*a4, 3uLL);
    a4[1] = v12;
    goto LABEL_9;
  }
  int16x8_t v11 = vrshrq_n_s16(*(int16x8_t *)(a3 + 16), 3uLL);
  *(int16x8_t *)a3 = vrshrq_n_s16(*(int16x8_t *)a3, 3uLL);
  *(int16x8_t *)(a3 + 16) = v11;
  if (a6 < 0) {
    goto LABEL_8;
  }
LABEL_5:
  if (a6) {
    sub_1BBADB850((int32x4_t *)a4, a6);
  }
LABEL_9:
  uint16x8_t v13 = *(uint16x8_t *)((char *)a1 + 2 * a2);
  uint16x8_t v14 = *(uint16x8_t *)((char *)a1 + 4 * a2);
  uint16x8_t v15 = *(uint16x8_t *)((char *)a1 + 6 * a2);
  uint16x8_t v16 = *a1;
  int16x8_t v17 = *(int16x8_t *)a3;
  int16x8_t v18 = *(int16x8_t *)(a3 + 16);
  int16x8_t v19 = *a4;
  int16x8_t v20 = a4[1];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  int16x8_t v21 = vzip1q_s16(v17, v19);
  int16x8_t v22 = vzip2q_s16(v17, v19);
  int16x8_t v23 = vzip1q_s16(v18, v20);
  int16x8_t v24 = vzip2q_s16(v18, v20);
  v20.i64[0] = 0xFC00FC00FC00FC00;
  v20.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = 0u;
  a4[1] = 0u;
  *(int16x8_t *)a1 = vminq_s16((int16x8_t)vsqaddq_u16(v16, v21), v20);
  *(int16x8_t *)((char *)a1 + 2 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v13, v22), v20);
  int16x8_t result = vminq_s16((int16x8_t)vsqaddq_u16(v15, v24), v20);
  *(int16x8_t *)((char *)a1 + 4 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v14, v23), v20);
  *(int16x8_t *)((char *)a1 + 6 * a2) = result;
  return result;
}

int32x4_t sub_1BBADB850(int32x4_t *a1, int a2)
{
  if (a2 == 1)
  {
    int32x4_t result = (int32x4_t)vdupq_n_s16((a1->i16[0] + 17) >> 5);
    *a1 = result;
    a1[1] = result;
  }
  else
  {
    int16x8_t v3 = (int16x8_t)a1[1];
    int32x4_t v4 = vshlq_n_s32(vaddl_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)a1->i8), 6uLL);
    int32x4_t v5 = vshlq_n_s32(vsubl_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v3.i8), 6uLL);
    v6.i64[0] = 0x53005300530053;
    v6.i64[1] = 0x53005300530053;
    v7.i64[0] = 0x24002400240024;
    v7.i64[1] = 0x24002400240024;
    int32x4_t v8 = vmull_high_s16(*(int16x8_t *)a1, v7);
    int32x4_t v9 = vmlal_high_s16(vmull_high_s16(v3, v7), *(int16x8_t *)a1, v6);
    int32x4_t v10 = vmlsl_high_s16(v8, v3, v6);
    int16x4_t v11 = vqrshrn_n_s32(vaddq_s32(v9, v4), 7uLL);
    *(int16x4_t *)v3.i8 = vqrshrn_n_s32(vsubq_s32(v4, v9), 7uLL);
    *(int16x4_t *)v4.i8 = vqrshrn_n_s32(vaddq_s32(v10, v5), 7uLL);
    *(int16x4_t *)v5.i8 = vqrshrn_n_s32(vsubq_s32(v5, v10), 7uLL);
    *(int16x4_t *)v6.i8 = vtrn1_s16(v11, *(int16x4_t *)v4.i8);
    int32x2_t v12 = (int32x2_t)vtrn2_s16(v11, *(int16x4_t *)v4.i8);
    *(int16x4_t *)v4.i8 = vtrn1_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v3.i8);
    *(int16x4_t *)v3.i8 = vtrn2_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v3.i8);
    *(int32x2_t *)v5.i8 = vzip1_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v4.i8);
    *(int32x2_t *)v4.i8 = vzip2_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v4.i8);
    int32x4_t v13 = vaddl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
    int32x4_t v14 = vsubl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
    int32x4_t v15 = vshlq_n_s32(v13, 6uLL);
    int32x4_t v16 = vshlq_n_s32(v14, 6uLL);
    *(int32x2_t *)v13.i8 = vzip1_s32(v12, *(int32x2_t *)v3.i8);
    int16x4_t v17 = (int16x4_t)vzip2_s32(v12, *(int32x2_t *)v3.i8);
    int32x4_t v18 = vmlal_s16(vmull_s16(v17, (int16x4_t)0x24002400240024), *(int16x4_t *)v13.i8, (int16x4_t)0x53005300530053);
    int32x4_t v19 = vmlsl_s16(vmull_s16(*(int16x4_t *)v13.i8, (int16x4_t)0x24002400240024), v17, (int16x4_t)0x53005300530053);
    int32x4_t result = vaddq_s32(v15, v18);
    int16x4_t v20 = vqrshrn_n_s32(result, 0xAuLL);
    *(int16x4_t *)v10.i8 = vqrshrn_n_s32(vsubq_s32(v15, v18), 0xAuLL);
    *(int16x4_t *)v13.i8 = vqrshrn_n_s32(vaddq_s32(v16, v19), 0xAuLL);
    *(int16x4_t *)v19.i8 = vqrshrn_n_s32(vsubq_s32(v16, v19), 0xAuLL);
    vst4_s16(a1->i16, *(int16x4x4_t *)((char *)&v10 - 24));
  }
  return result;
}

int8x8_t sub_1BBADB92C(uint8x8_t *a1, uint64_t a2, uint64_t a3, int16x8_t *a4, int a5, int a6)
{
  if ((a5 & 0x80000000) == 0)
  {
    if (a5) {
      sub_1BBADBA28((int32x4_t *)a3, a5);
    }
    if ((a6 & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    int16x8_t v12 = vrshrq_n_s16(a4[1], 5uLL);
    *a4 = vrshrq_n_s16(*a4, 5uLL);
    a4[1] = v12;
    goto LABEL_9;
  }
  int16x8_t v11 = vrshrq_n_s16(*(int16x8_t *)(a3 + 16), 5uLL);
  *(int16x8_t *)a3 = vrshrq_n_s16(*(int16x8_t *)a3, 5uLL);
  *(int16x8_t *)(a3 + 16) = v11;
  if (a6 < 0) {
    goto LABEL_8;
  }
LABEL_5:
  if (a6) {
    sub_1BBADBA28((int32x4_t *)a4, a6);
  }
LABEL_9:
  uint8x8_t v13 = *a1;
  uint8x8_t v14 = *(uint8x8_t *)((char *)a1 + a2);
  uint8x8_t v15 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  uint8x8_t v16 = *(uint8x8_t *)((char *)a1 + 3 * a2);
  int16x8_t v17 = *(int16x8_t *)a3;
  int16x8_t v18 = *(int16x8_t *)(a3 + 16);
  int16x8_t v19 = *a4;
  int16x8_t v20 = a4[1];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  *a1 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v17, v19), v13));
  *(int8x8_t *)((char *)a1 + a2) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip2q_s16(v17, v19), v14));
  int8x8_t result = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v18, v20), v15));
  *(int8x8_t *)((char *)a1 + 2 * a2) = result;
  *(int8x8_t *)((char *)a1 + 3 * a2) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip2q_s16(v18, v20), v16));
  return result;
}

int32x4_t sub_1BBADBA28(int32x4_t *a1, int a2)
{
  if (a2 == 1)
  {
    int32x4_t result = (int32x4_t)vdupq_n_s16((a1->i16[0] + 65) >> 7);
    *a1 = result;
    a1[1] = result;
  }
  else
  {
    int16x8_t v3 = (int16x8_t)a1[1];
    int32x4_t v4 = vshlq_n_s32(vaddl_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)a1->i8), 6uLL);
    int32x4_t v5 = vshlq_n_s32(vsubl_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v3.i8), 6uLL);
    v6.i64[0] = 0x53005300530053;
    v6.i64[1] = 0x53005300530053;
    v7.i64[0] = 0x24002400240024;
    v7.i64[1] = 0x24002400240024;
    int32x4_t v8 = vmull_high_s16(*(int16x8_t *)a1, v7);
    int32x4_t v9 = vmlal_high_s16(vmull_high_s16(v3, v7), *(int16x8_t *)a1, v6);
    int32x4_t v10 = vmlsl_high_s16(v8, v3, v6);
    int16x4_t v11 = vqrshrn_n_s32(vaddq_s32(v9, v4), 7uLL);
    *(int16x4_t *)v3.i8 = vqrshrn_n_s32(vsubq_s32(v4, v9), 7uLL);
    *(int16x4_t *)v4.i8 = vqrshrn_n_s32(vaddq_s32(v10, v5), 7uLL);
    *(int16x4_t *)v5.i8 = vqrshrn_n_s32(vsubq_s32(v5, v10), 7uLL);
    *(int16x4_t *)v6.i8 = vtrn1_s16(v11, *(int16x4_t *)v4.i8);
    int32x2_t v12 = (int32x2_t)vtrn2_s16(v11, *(int16x4_t *)v4.i8);
    *(int16x4_t *)v4.i8 = vtrn1_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v3.i8);
    *(int16x4_t *)v3.i8 = vtrn2_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v3.i8);
    *(int32x2_t *)v5.i8 = vzip1_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v4.i8);
    *(int32x2_t *)v4.i8 = vzip2_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v4.i8);
    int32x4_t v13 = vaddl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
    int32x4_t v14 = vsubl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
    int32x4_t v15 = vshlq_n_s32(v13, 6uLL);
    int32x4_t v16 = vshlq_n_s32(v14, 6uLL);
    *(int32x2_t *)v13.i8 = vzip1_s32(v12, *(int32x2_t *)v3.i8);
    int16x4_t v17 = (int16x4_t)vzip2_s32(v12, *(int32x2_t *)v3.i8);
    int32x4_t v18 = vmlal_s16(vmull_s16(v17, (int16x4_t)0x24002400240024), *(int16x4_t *)v13.i8, (int16x4_t)0x53005300530053);
    int32x4_t v19 = vmlsl_s16(vmull_s16(*(int16x4_t *)v13.i8, (int16x4_t)0x24002400240024), v17, (int16x4_t)0x53005300530053);
    int32x4_t result = vaddq_s32(v15, v18);
    int16x4_t v20 = vqrshrn_n_s32(result, 0xCuLL);
    *(int16x4_t *)v10.i8 = vqrshrn_n_s32(vsubq_s32(v15, v18), 0xCuLL);
    *(int16x4_t *)v13.i8 = vqrshrn_n_s32(vaddq_s32(v16, v19), 0xCuLL);
    *(int16x4_t *)v19.i8 = vqrshrn_n_s32(vsubq_s32(v16, v19), 0xCuLL);
    vst4_s16(a1->i16, *(int16x4x4_t *)((char *)&v10 - 24));
  }
  return result;
}

void sub_1BBADBB04(uint16x8_t *a1, uint64_t a2, int16x4_t *a3, int a4)
{
  int16x8_t v6 = a1;
  if (a4 == 1)
  {
    int16x8_t v7 = vdupq_n_s16((a3->i16[0] + 17) >> 5);
    a3->i16[0] = 0;
    int32x4_t v8 = a1 + 2;
    int v9 = 32;
    v10.i64[0] = 0xFC00FC00FC00FC00;
    v10.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      int16x8_t v11 = vminq_s16((int16x8_t)vsqaddq_u16(v8[-1], v7), v10);
      int16x8_t v12 = vminq_s16((int16x8_t)vsqaddq_u16(*v8, v7), v10);
      int16x8_t v13 = vminq_s16((int16x8_t)vsqaddq_u16(v8[1], v7), v10);
      v8[-2] = (uint16x8_t)vminq_s16((int16x8_t)vsqaddq_u16(v8[-2], v7), v10);
      v8[-1] = (uint16x8_t)v11;
      *int32x4_t v8 = (uint16x8_t)v12;
      v8[1] = (uint16x8_t)v13;
      int32x4_t v8 = (uint16x8_t *)((char *)v8 + 2 * a2);
      --v9;
    }
    while (v9);
    return;
  }
  if (a4 <= 16)
  {
    sub_1BBAD9F9C(a3, 0x20u, (uint64_t)&unk_1BBB83A70);
LABEL_16:
    unint64_t v19 = -4;
    int16x4_t v20 = a3;
    do
    {
      sub_1BBADA39C(v20, 0x20u, (uint64_t)&unk_1BBB83A80);
      v19 += 4;
      v20 += 32;
    }
    while (v19 < 0x1C);
    goto LABEL_18;
  }
  if (a4 > 0x30)
  {
    if (a4 >= 0xA1)
    {
      unint64_t v17 = -4;
      int32x4_t v18 = a3;
      do
      {
        sub_1BBADBE60(v18);
        v17 += 4;
        ++v18;
      }
      while (v17 < 0x1C);
    }
    else
    {
      unint64_t v15 = -4;
      int32x4_t v16 = a3;
      do
      {
        sub_1BBADA218(v16, 0x20u, (uint64_t)&unk_1BBB83AB0, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v15 += 4;
        ++v16;
      }
      while (v15 < 0xC);
    }
  }
  else
  {
    sub_1BBADA068(a3, 0x20u, (uint64_t)&unk_1BBB83A90, (int16x4_t *)aZzxu);
    sub_1BBADA068(a3 + 1, 0x20u, (uint64_t)&unk_1BBB83A90, (int16x4_t *)aZzxu);
  }
  if (a4 <= 32) {
    goto LABEL_16;
  }
  if (a4 > 0x50)
  {
    if (a4 >= 0xE1)
    {
      unint64_t v43 = -4;
      uint64_t v44 = (uint64_t)a3;
      do
      {
        sub_1BBADC054(v44);
        v43 += 4;
        v44 += 256;
      }
      while (v43 < 0x1C);
    }
    else
    {
      unint64_t v41 = -4;
      int16x8_t v42 = (int16x8_t *)a3;
      do
      {
        sub_1BBADA610(v42, 0x20u, (uint64_t)&unk_1BBB83AC0, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v41 += 4;
        v42 += 16;
      }
      while (v41 < 0x1C);
    }
  }
  else
  {
    unint64_t v39 = -4;
    int16x8_t v40 = (int16x8_t *)a3;
    do
    {
      sub_1BBADA47C(v40, 0x20u, (uint64_t)&unk_1BBB83AA0, (int16x4_t *)aZzxu);
      v39 += 4;
      v40 += 16;
    }
    while (v39 < 0x1C);
  }
LABEL_18:
  unint64_t v21 = 0;
  v22.i64[0] = 0xFC00FC00FC00FC00;
  v22.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v23 = (int16x8_t *)&a3[v21];
    unsigned int v24 = -4;
    uint8x16_t v25 = v6;
    do
    {
      uint16x8_t v26 = *(uint16x8_t *)((char *)v25 + 2 * a2);
      uint16x8_t v27 = *(uint16x8_t *)((char *)v25 + 4 * a2);
      uint16x8_t v28 = *(uint16x8_t *)((char *)v25 + 6 * a2);
      uint16x8_t v29 = *v25;
      int16x8_t v30 = *v23;
      int16x8_t v31 = v23[4];
      int16x8_t v32 = v23[8];
      int16x8_t v33 = v23[12];
      *int16x8_t v23 = 0uLL;
      v23[4] = 0uLL;
      v23[8] = 0uLL;
      v23[12] = 0uLL;
      int32x4_t v34 = (int32x4_t)vtrn1q_s16(v30, v31);
      int32x4_t v35 = (int32x4_t)vtrn2q_s16(v30, v31);
      int32x4_t v36 = (int32x4_t)vtrn1q_s16(v32, v33);
      int32x4_t v37 = (int32x4_t)vtrn2q_s16(v32, v33);
      *(int16x8_t *)uint8x16_t v25 = vminq_s16((int16x8_t)vsqaddq_u16(v29, (int16x8_t)vtrn1q_s32(v34, v36)), v22);
      *(int16x8_t *)((char *)v25 + 2 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v26, (int16x8_t)vtrn1q_s32(v35, v37)), v22);
      *(int16x8_t *)((char *)v25 + 4 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v27, (int16x8_t)vtrn2q_s32(v34, v36)), v22);
      *(int16x8_t *)((char *)v25 + 6 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v28, (int16x8_t)vtrn2q_s32(v35, v37)), v22);
      uint8x16_t v25 = (uint16x8_t *)((char *)v25 + 8 * a2);
      v24 += 4;
      v23 += 16;
    }
    while (v24 < 0x1C);
    ++v6;
    BOOL v38 = v21 >= 6;
    v21 += 2;
  }
  while (!v38);
}

uint64_t sub_1BBADBE60(int16x4_t *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1BBADA798(8, (int16x4_t *)aYk2, v39, *a1, a1[32], a1[64], a1[96], a1[128], a1[160], a1[192], a1[224]);
  unint64_t v3 = 0;
  int16x4_t v4 = a1[16];
  int16x4_t v5 = a1[48];
  int16x4_t v6 = a1[80];
  int16x4_t v7 = a1[112];
  int16x4_t v8 = a1[144];
  int16x4_t v9 = a1[208];
  int16x4_t v10 = a1[176];
  int16x4_t v11 = a1[240];
  do
  {
    int16x8_t v12 = &v39[v3 / 8];
    int32x4_t v13 = v39[v3 / 8];
    int16x8_t v14 = *(int16x8_t *)&aZwpf9[v3];
    int32x4_t v15 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v5, *(int16x4_t *)v14.i8, 1), v4, *(int16x4_t *)v14.i8, 0), v6, *(int16x4_t *)v14.i8, 2), v7, *(int16x4_t *)v14.i8, 3), v8, v14, 4), v10, v14, 5), v9,
              v14,
              6),
            v11,
            v14,
            7);
    *int16x8_t v12 = vaddq_s32(v15, v13);
    v12[8] = vsubq_s32(v13, v15);
    v3 += 8;
  }
  while (v3 != 64);
  uint64_t v16 = 0;
  int16x4_t v17 = a1[8];
  int16x4_t v18 = a1[24];
  int16x4_t v19 = a1[40];
  int16x4_t v20 = a1[56];
  int16x4_t v21 = a1[72];
  int16x4_t v22 = a1[88];
  int16x4_t v23 = a1[104];
  int16x4_t v24 = a1[120];
  int16x4_t v25 = a1[136];
  int16x4_t v26 = a1[152];
  int16x4_t v27 = a1[168];
  int16x4_t v28 = a1[184];
  uint16x8_t v29 = aZzxurnic6;
  int16x4_t v30 = a1[200];
  int16x4_t v31 = a1[216];
  int16x4_t v32 = a1[232];
  int16x4_t v33 = a1[248];
  do
  {
    int16x8_t v34 = *(int16x8_t *)v29;
    int16x8_t v35 = *((int16x8_t *)v29 + 1);
    v29 += 16;
    int32x4_t v36 = v39[byte_1BBB83D50[v16]];
    int32x4_t v37 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v18, *(int16x4_t *)v34.i8, 1), v17, *(int16x4_t *)v34.i8, 0), v19,
                                      *(int16x4_t *)v34.i8,
                                      2),
                                    v20,
                                    *(int16x4_t *)v34.i8,
                                    3),
                                  v21,
                                  v34,
                                  4),
                                v22,
                                v34,
                                5),
                              v23,
                              v34,
                              6),
                            v24,
                            v34,
                            7),
                          v25,
                          *(int16x4_t *)v35.i8,
                          0),
                        v26,
                        *(int16x4_t *)v35.i8,
                        1),
                      v27,
                      *(int16x4_t *)v35.i8,
                      2),
                    v28,
                    *(int16x4_t *)v35.i8,
                    3),
                  v30,
                  v35,
                  4),
                v31,
                v35,
                5),
              v32,
              v35,
              6),
            v33,
            v35,
            7);
    int v38 = 992 - 4 * *((unsigned __int8 *)&unk_1BBB83A70 + v16 + 64);
    a1[*((unsigned __int8 *)&unk_1BBB83A70 + v16 + 64)] = vqrshrn_n_s32(vaddq_s32(v37, v36), 7uLL);
    *(int16x4_t *)((char *)a1 + 2 * v38) = vqrshrn_n_s32(vsubq_s32(v36, v37), 7uLL);
    ++v16;
  }
  while (v16 != 16);
  return result;
}

uint64_t sub_1BBADC054(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (int16x8_t *)(a1 + 128);
  unint64_t v3 = -8;
  do
  {
    int16x8_t v4 = v2[-8];
    int16x8_t v5 = v2[-4];
    int16x8_t v6 = v2[4];
    int32x4_t v7 = (int32x4_t)vtrn1q_s16(v4, v5);
    int32x4_t v8 = (int32x4_t)vtrn2q_s16(v4, v5);
    int32x4_t v9 = (int32x4_t)vtrn1q_s16(*v2, v6);
    int32x4_t v10 = (int32x4_t)vtrn2q_s16(*v2, v6);
    v2[-8] = (int16x8_t)vtrn1q_s32(v7, v9);
    v2[-4] = (int16x8_t)vtrn1q_s32(v8, v10);
    *(int32x4_t *)uint64_t v2 = vtrn2q_s32(v7, v9);
    v2[4] = (int16x8_t)vtrn2q_s32(v8, v10);
    v3 += 8;
    ++v2;
  }
  while (v3 < 0x18);
  uint64_t result = sub_1BBADA798(8, (int16x4_t *)aYk2, v44, *(int16x4_t *)a1, (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), *(int16x4_t *)(a1 + 16), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL), *(int16x4_t *)a1, *(int16x4_t *)(a1 + 8), *(int16x4_t *)(a1 + 16), *(int16x4_t *)(a1 + 24));
  unint64_t v12 = 0;
  int16x8_t v13 = *(int16x8_t *)(a1 + 128);
  int16x8_t v14 = *(int16x8_t *)(a1 + 144);
  int16x4_t v15 = *(int16x4_t *)(a1 + 136);
  int16x4_t v16 = *(int16x4_t *)(a1 + 152);
  do
  {
    int16x4_t v17 = &v44[v12 / 8];
    int32x4_t v18 = v44[v12 / 8];
    int16x8_t v19 = *(int16x8_t *)&aZwpf9[v12];
    int32x4_t v20 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v19.i8, 0), v13, *(int16x4_t *)v19.i8, 1), *(int16x4_t *)v14.i8, *(int16x4_t *)v19.i8, 2), v14, *(int16x4_t *)v19.i8, 3), *(int16x4_t *)v13.i8, v19, 4),
                v15,
                v19,
                5),
              *(int16x4_t *)v14.i8,
              v19,
              6),
            v16,
            v19,
            7);
    *int16x4_t v17 = vaddq_s32(v20, v18);
    v17[8] = vsubq_s32(v18, v20);
    v12 += 8;
  }
  while (v12 != 64);
  uint64_t v21 = 0;
  int16x4_t v22 = *(int16x4_t *)(a1 + 64);
  int16x4_t v23 = *(int16x4_t *)(a1 + 72);
  int16x4_t v24 = *(int16x4_t *)(a1 + 192);
  int16x4_t v25 = *(int16x4_t *)(a1 + 200);
  int16x4_t v26 = *(int16x4_t *)(a1 + 80);
  int16x4_t v27 = *(int16x4_t *)(a1 + 88);
  int16x4_t v28 = *(int16x4_t *)(a1 + 208);
  int16x4_t v29 = *(int16x4_t *)(a1 + 216);
  int16x4_t v30 = *(int16x4_t *)(a1 + 96);
  int16x4_t v31 = *(int16x4_t *)(a1 + 104);
  int16x4_t v32 = *(int16x4_t *)(a1 + 224);
  int16x4_t v33 = *(int16x4_t *)(a1 + 232);
  int16x8_t v34 = aZzxurnic6;
  int16x4_t v35 = *(int16x4_t *)(a1 + 112);
  int16x4_t v36 = *(int16x4_t *)(a1 + 120);
  int16x4_t v37 = *(int16x4_t *)(a1 + 240);
  int16x4_t v38 = *(int16x4_t *)(a1 + 248);
  do
  {
    int16x8_t v39 = *(int16x8_t *)v34;
    int16x8_t v40 = *((int16x8_t *)v34 + 1);
    v34 += 16;
    int32x4_t v41 = v44[byte_1BBB83D50[v21]];
    int32x4_t v42 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v24, *(int16x4_t *)v39.i8, 1), v22, *(int16x4_t *)v39.i8, 0), v23,
                                      *(int16x4_t *)v39.i8,
                                      2),
                                    v25,
                                    *(int16x4_t *)v39.i8,
                                    3),
                                  v26,
                                  v39,
                                  4),
                                v28,
                                v39,
                                5),
                              v27,
                              v39,
                              6),
                            v29,
                            v39,
                            7),
                          v30,
                          *(int16x4_t *)v40.i8,
                          0),
                        v32,
                        *(int16x4_t *)v40.i8,
                        1),
                      v31,
                      *(int16x4_t *)v40.i8,
                      2),
                    v33,
                    *(int16x4_t *)v40.i8,
                    3),
                  v35,
                  v40,
                  4),
                v37,
                v40,
                5),
              v36,
              v40,
              6),
            v38,
            v40,
            7);
    int v43 = 124 - 4 * *((unsigned __int8 *)&unk_1BBB83A70 + v21 + 80);
    *(int16x4_t *)(a1 + 8 * *((unsigned __int8 *)&unk_1BBB83A70 + v21 + 80)) = vqrshrn_n_s32(vaddq_s32(v42, v41), 0xAuLL);
    *(int16x4_t *)(a1 + 2 * v43) = vqrshrn_n_s32(vsubq_s32(v41, v42), 0xAuLL);
    ++v21;
  }
  while (v21 != 16);
  return result;
}

void sub_1BBADC278(uint8x16_t *a1, uint64_t a2, int16x4_t *a3, int a4)
{
  if (a4 == 1)
  {
    int16x8_t v7 = vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    int16x8_t v8 = vnegq_s16(v7);
    uint8x16_t v9 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v7), v7);
    uint8x16_t v10 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v8), v8);
    unsigned int v11 = -2;
    do
    {
      unint64_t v12 = (uint8x16_t *)((char *)a1 + a2);
      uint8x16_t v13 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + a2), v9), v10);
      uint8x16_t v14 = vqsubq_u8(vqaddq_u8(a1[1], v9), v10);
      uint8x16_t v15 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)&a1[1] + a2), v9), v10);
      *a1 = vqsubq_u8(vqaddq_u8(*a1, v9), v10);
      *unint64_t v12 = v13;
      a1[1] = v14;
      v12[1] = v15;
      a1 = (uint8x16_t *)((char *)a1 + 2 * a2);
      v11 += 2;
    }
    while (v11 < 0x1E);
    return;
  }
  if (a4 <= 16)
  {
    sub_1BBAD9F9C(a3, 0x20u, (uint64_t)&unk_1BBB83A70);
LABEL_16:
    unint64_t v21 = -4;
    int16x4_t v22 = a3;
    do
    {
      sub_1BBADACC0(v22, 0x20u, (uint64_t)&unk_1BBB83A80);
      v21 += 4;
      v22 += 32;
    }
    while (v21 < 0x1C);
    goto LABEL_18;
  }
  if (a4 > 0x30)
  {
    if (a4 >= 0xA1)
    {
      unint64_t v19 = -4;
      int32x4_t v20 = a3;
      do
      {
        sub_1BBADBE60(v20);
        v19 += 4;
        ++v20;
      }
      while (v19 < 0x1C);
    }
    else
    {
      unint64_t v17 = -4;
      int32x4_t v18 = a3;
      do
      {
        sub_1BBADA218(v18, 0x20u, (uint64_t)&unk_1BBB83AB0, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v17 += 4;
        ++v18;
      }
      while (v17 < 0xC);
    }
  }
  else
  {
    sub_1BBADA068(a3, 0x20u, (uint64_t)&unk_1BBB83A90, (int16x4_t *)aZzxu);
    sub_1BBADA068(a3 + 1, 0x20u, (uint64_t)&unk_1BBB83A90, (int16x4_t *)aZzxu);
  }
  if (a4 <= 32) {
    goto LABEL_16;
  }
  if (a4 > 0x50)
  {
    if (a4 >= 0xE1)
    {
      unint64_t v61 = -4;
      uint64_t v62 = (uint64_t)a3;
      do
      {
        sub_1BBADC624(v62);
        v61 += 4;
        v62 += 256;
      }
      while (v61 < 0x1C);
    }
    else
    {
      unint64_t v59 = -4;
      int16x8_t v60 = (int16x8_t *)a3;
      do
      {
        sub_1BBADAF34(v60, 0x20u, (uint64_t)&unk_1BBB83AC0, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v59 += 4;
        v60 += 16;
      }
      while (v59 < 0x1C);
    }
  }
  else
  {
    unint64_t v57 = -4;
    int32x4_t v58 = (int16x8_t *)a3;
    do
    {
      sub_1BBADADA0(v58, 0x20u, (uint64_t)&unk_1BBB83AA0, (int16x4_t *)aZzxu);
      v57 += 4;
      v58 += 16;
    }
    while (v57 < 0x1C);
  }
LABEL_18:
  uint64_t v23 = 0;
  char v24 = 1;
  do
  {
    char v25 = v24;
    int16x4_t v26 = (uint8x8_t *)&a1[(unint64_t)v23 / 4];
    unsigned int v27 = -4;
    int16x4_t v28 = (int16x8_t *)&a3[v23];
    do
    {
      uint8x16_t v29 = *(uint8x16_t *)&v26->i8[3 * a2];
      int16x8_t v30 = v28[1];
      int16x8_t v31 = v28[4];
      int16x8_t v32 = v28[5];
      int16x8_t v33 = v28[8];
      int16x8_t v34 = v28[9];
      int16x8_t v35 = v28[12];
      int16x8_t v36 = v28[13];
      int32x4_t v37 = (int32x4_t)vtrn1q_s16(*v28, v31);
      int32x4_t v38 = (int32x4_t)vtrn2q_s16(*v28, v31);
      int32x4_t v39 = (int32x4_t)vtrn1q_s16(v33, v35);
      int32x4_t v40 = (int32x4_t)vtrn2q_s16(v33, v35);
      uint16x8_t v41 = (uint16x8_t)vtrn1q_s32(v37, v39);
      uint16x8_t v42 = (uint16x8_t)vtrn2q_s32(v37, v39);
      uint16x8_t v43 = (uint16x8_t)vtrn1q_s32(v38, v40);
      uint16x8_t v44 = (uint16x8_t)vtrn2q_s32(v38, v40);
      int32x4_t v45 = (int32x4_t)vtrn1q_s16(v30, v32);
      int32x4_t v46 = (int32x4_t)vtrn2q_s16(v30, v32);
      int32x4_t v47 = (int32x4_t)vtrn1q_s16(v34, v36);
      int32x4_t v48 = (int32x4_t)vtrn2q_s16(v34, v36);
      uint16x8_t v49 = (uint16x8_t)vtrn1q_s32(v45, v47);
      uint16x8_t v50 = (uint16x8_t)vtrn2q_s32(v45, v47);
      uint16x8_t v51 = (uint16x8_t)vtrn1q_s32(v46, v48);
      int16x8_t v52 = (int16x8_t)vaddw_u8(v44, *(uint8x8_t *)v29.i8);
      int16x8_t v53 = (int16x8_t)vaddw_high_u8((uint16x8_t)vtrn2q_s32(v46, v48), v29);
      int8x16_t v54 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v41, *v26)), (int16x8_t)vaddw_high_u8(v49, *(uint8x16_t *)v26->i8));
      int8x16_t v55 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v43, *(uint8x8_t *)((char *)v26 + a2))), (int16x8_t)vaddw_high_u8(v51, *(uint8x16_t *)&v26->i8[a2]));
      int8x16_t v56 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v42, *(uint8x8_t *)((char *)v26 + 2 * a2))), (int16x8_t)vaddw_high_u8(v50, *(uint8x16_t *)&v26->i8[2 * a2]));
      *int16x4_t v28 = 0uLL;
      v28[1] = 0uLL;
      v28[4] = 0uLL;
      v28[5] = 0uLL;
      v28[8] = 0uLL;
      v28[9] = 0uLL;
      v28[12] = 0uLL;
      v28[13] = 0uLL;
      *(int8x16_t *)v26->i8 = v54;
      *(int8x16_t *)&v26->i8[a2] = v55;
      *(int8x16_t *)&v26->i8[2 * a2] = v56;
      *(int8x16_t *)&v26->i8[3 * a2] = vqmovun_high_s16(vqmovun_s16(v52), v53);
      int16x4_t v26 = (uint8x8_t *)((char *)v26 + 4 * a2);
      v27 += 4;
      v28 += 16;
    }
    while (v27 < 0x1C);
    char v24 = 0;
    uint64_t v23 = 4;
  }
  while ((v25 & 1) != 0);
}

uint64_t sub_1BBADC624(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (int16x8_t *)(a1 + 128);
  unint64_t v3 = -8;
  do
  {
    int16x8_t v4 = v2[-8];
    int16x8_t v5 = v2[-4];
    int16x8_t v6 = v2[4];
    int32x4_t v7 = (int32x4_t)vtrn1q_s16(v4, v5);
    int32x4_t v8 = (int32x4_t)vtrn2q_s16(v4, v5);
    int32x4_t v9 = (int32x4_t)vtrn1q_s16(*v2, v6);
    int32x4_t v10 = (int32x4_t)vtrn2q_s16(*v2, v6);
    v2[-8] = (int16x8_t)vtrn1q_s32(v7, v9);
    v2[-4] = (int16x8_t)vtrn1q_s32(v8, v10);
    *(int32x4_t *)uint64_t v2 = vtrn2q_s32(v7, v9);
    v2[4] = (int16x8_t)vtrn2q_s32(v8, v10);
    v3 += 8;
    ++v2;
  }
  while (v3 < 0x18);
  uint64_t result = sub_1BBADA798(8, (int16x4_t *)aYk2, v44, *(int16x4_t *)a1, (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), *(int16x4_t *)(a1 + 16), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL), *(int16x4_t *)a1, *(int16x4_t *)(a1 + 8), *(int16x4_t *)(a1 + 16), *(int16x4_t *)(a1 + 24));
  unint64_t v12 = 0;
  int16x8_t v13 = *(int16x8_t *)(a1 + 128);
  int16x8_t v14 = *(int16x8_t *)(a1 + 144);
  int16x4_t v15 = *(int16x4_t *)(a1 + 136);
  int16x4_t v16 = *(int16x4_t *)(a1 + 152);
  do
  {
    unint64_t v17 = &v44[v12 / 8];
    int32x4_t v18 = v44[v12 / 8];
    int16x8_t v19 = *(int16x8_t *)&aZwpf9[v12];
    int32x4_t v20 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v19.i8, 0), v13, *(int16x4_t *)v19.i8, 1), *(int16x4_t *)v14.i8, *(int16x4_t *)v19.i8, 2), v14, *(int16x4_t *)v19.i8, 3), *(int16x4_t *)v13.i8, v19, 4),
                v15,
                v19,
                5),
              *(int16x4_t *)v14.i8,
              v19,
              6),
            v16,
            v19,
            7);
    *unint64_t v17 = vaddq_s32(v20, v18);
    v17[8] = vsubq_s32(v18, v20);
    v12 += 8;
  }
  while (v12 != 64);
  uint64_t v21 = 0;
  int16x4_t v22 = *(int16x4_t *)(a1 + 64);
  int16x4_t v23 = *(int16x4_t *)(a1 + 72);
  int16x4_t v24 = *(int16x4_t *)(a1 + 192);
  int16x4_t v25 = *(int16x4_t *)(a1 + 200);
  int16x4_t v26 = *(int16x4_t *)(a1 + 80);
  int16x4_t v27 = *(int16x4_t *)(a1 + 88);
  int16x4_t v28 = *(int16x4_t *)(a1 + 208);
  int16x4_t v29 = *(int16x4_t *)(a1 + 216);
  int16x4_t v30 = *(int16x4_t *)(a1 + 96);
  int16x4_t v31 = *(int16x4_t *)(a1 + 104);
  int16x4_t v32 = *(int16x4_t *)(a1 + 224);
  int16x4_t v33 = *(int16x4_t *)(a1 + 232);
  int16x8_t v34 = aZzxurnic6;
  int16x4_t v35 = *(int16x4_t *)(a1 + 112);
  int16x4_t v36 = *(int16x4_t *)(a1 + 120);
  int16x4_t v37 = *(int16x4_t *)(a1 + 240);
  int16x4_t v38 = *(int16x4_t *)(a1 + 248);
  do
  {
    int16x8_t v39 = *(int16x8_t *)v34;
    int16x8_t v40 = *((int16x8_t *)v34 + 1);
    v34 += 16;
    int32x4_t v41 = v44[byte_1BBB83D50[v21]];
    int32x4_t v42 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v24, *(int16x4_t *)v39.i8, 1), v22, *(int16x4_t *)v39.i8, 0), v23,
                                      *(int16x4_t *)v39.i8,
                                      2),
                                    v25,
                                    *(int16x4_t *)v39.i8,
                                    3),
                                  v26,
                                  v39,
                                  4),
                                v28,
                                v39,
                                5),
                              v27,
                              v39,
                              6),
                            v29,
                            v39,
                            7),
                          v30,
                          *(int16x4_t *)v40.i8,
                          0),
                        v32,
                        *(int16x4_t *)v40.i8,
                        1),
                      v31,
                      *(int16x4_t *)v40.i8,
                      2),
                    v33,
                    *(int16x4_t *)v40.i8,
                    3),
                  v35,
                  v40,
                  4),
                v37,
                v40,
                5),
              v36,
              v40,
              6),
            v38,
            v40,
            7);
    int v43 = 124 - 4 * *((unsigned __int8 *)&unk_1BBB83A70 + v21 + 80);
    *(int16x4_t *)(a1 + 8 * *((unsigned __int8 *)&unk_1BBB83A70 + v21 + 80)) = vqrshrn_n_s32(vaddq_s32(v42, v41), 0xCuLL);
    *(int16x4_t *)(a1 + 2 * v43) = vqrshrn_n_s32(vsubq_s32(v41, v42), 0xCuLL);
    ++v21;
  }
  while (v21 != 16);
  return result;
}

void sub_1BBADC848(uint16x8_t *a1, uint64_t a2, int16x4_t *a3, int a4)
{
  if (a4 == 1)
  {
    int16x8_t v7 = vdupq_n_s16((a3->i16[0] + 17) >> 5);
    a3->i16[0] = 0;
    uint64_t v8 = 2 * a2;
    unsigned int v9 = -2;
    v10.i64[0] = 0xFC00FC00FC00FC00;
    v10.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      unsigned int v11 = (int16x8_t *)&a1->i8[v8];
      int16x8_t v12 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)a1 + 2 * a2), v7), v10);
      int16x8_t v13 = vminq_s16((int16x8_t)vsqaddq_u16(a1[1], v7), v10);
      int16x8_t v14 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)&a1[1] + v8), v7), v10);
      *(int16x8_t *)a1 = vminq_s16((int16x8_t)vsqaddq_u16(*a1, v7), v10);
      *unsigned int v11 = v12;
      a1[1] = (uint16x8_t)v13;
      v11[1] = v14;
      a1 = (uint16x8_t *)((char *)a1 + 4 * a2);
      v9 += 2;
    }
    while (v9 < 0xE);
  }
  else
  {
    sub_1BBAD9DBC(a3, a4);
    uint64_t v15 = 0;
    char v16 = 1;
    v17.i64[0] = 0xFC00FC00FC00FC00;
    v17.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      char v18 = v16;
      int16x8_t v19 = &a1[(unint64_t)v15 / 2];
      unsigned int v20 = -4;
      uint64_t v21 = (int16x8_t *)&a3[v15];
      do
      {
        uint16x8_t v22 = *(uint16x8_t *)((char *)v19 + 2 * a2);
        uint16x8_t v23 = *(uint16x8_t *)((char *)v19 + 4 * a2);
        uint16x8_t v24 = *(uint16x8_t *)((char *)v19 + 6 * a2);
        uint16x8_t v25 = *v19;
        int16x8_t v26 = *v21;
        int16x8_t v27 = v21[2];
        int16x8_t v28 = v21[4];
        int16x8_t v29 = v21[6];
        *uint64_t v21 = 0uLL;
        v21[2] = 0uLL;
        void v21[4] = 0uLL;
        v21[6] = 0uLL;
        int32x4_t v30 = (int32x4_t)vtrn1q_s16(v26, v27);
        int32x4_t v31 = (int32x4_t)vtrn2q_s16(v26, v27);
        int32x4_t v32 = (int32x4_t)vtrn1q_s16(v28, v29);
        int32x4_t v33 = (int32x4_t)vtrn2q_s16(v28, v29);
        *(int16x8_t *)int16x8_t v19 = vminq_s16((int16x8_t)vsqaddq_u16(v25, (int16x8_t)vtrn1q_s32(v30, v32)), v17);
        *(int16x8_t *)((char *)v19 + 2 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v22, (int16x8_t)vtrn1q_s32(v31, v33)), v17);
        *(int16x8_t *)((char *)v19 + 4 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v23, (int16x8_t)vtrn2q_s32(v30, v32)), v17);
        *(int16x8_t *)((char *)v19 + 6 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v24, (int16x8_t)vtrn2q_s32(v31, v33)), v17);
        int16x8_t v19 = (uint16x8_t *)((char *)v19 + 8 * a2);
        v20 += 4;
        v21 += 8;
      }
      while (v20 < 0xC);
      char v16 = 0;
      uint64_t v15 = 2;
    }
    while ((v18 & 1) != 0);
  }
}

void sub_1BBADC9D4(uint8x16_t *a1, uint64_t a2, int16x4_t *a3, int a4)
{
  int16x8_t v4 = (int16x8_t *)a3;
  if (a4 == 1)
  {
    int16x8_t v7 = vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    int16x8_t v8 = vnegq_s16(v7);
    uint8x16_t v9 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v7), v7);
    uint8x16_t v10 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v8), v8);
    unsigned int v11 = -4;
    do
    {
      uint8x16_t v12 = vqaddq_u8(*(uint8x16_t *)((char *)a1 + 3 * a2), v9);
      uint8x16_t v13 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + a2), v9), v10);
      uint8x16_t v14 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + 2 * a2), v9), v10);
      *a1 = vqsubq_u8(vqaddq_u8(*a1, v9), v10);
      *(uint8x16_t *)((char *)a1 + a2) = v13;
      *(uint8x16_t *)((char *)a1 + 2 * a2) = v14;
      *(uint8x16_t *)((char *)a1 + 3 * a2) = vqsubq_u8(v12, v10);
      a1 = (uint8x16_t *)((char *)a1 + 4 * a2);
      v11 += 4;
    }
    while (v11 < 0xC);
  }
  else
  {
    sub_1BBADAAE0(a3, a4);
    unsigned int v15 = -4;
    do
    {
      uint8x16_t v16 = *(uint8x16_t *)((char *)a1 + 3 * a2);
      int16x8_t v17 = v4[1];
      int16x8_t v18 = v4[2];
      int16x8_t v19 = v4[3];
      int16x8_t v20 = v4[4];
      int16x8_t v21 = v4[5];
      int16x8_t v22 = v4[6];
      int16x8_t v23 = v4[7];
      int32x4_t v24 = (int32x4_t)vtrn1q_s16(*v4, v18);
      int32x4_t v25 = (int32x4_t)vtrn2q_s16(*v4, v18);
      int32x4_t v26 = (int32x4_t)vtrn1q_s16(v20, v22);
      int32x4_t v27 = (int32x4_t)vtrn2q_s16(v20, v22);
      uint16x8_t v28 = (uint16x8_t)vtrn1q_s32(v24, v26);
      uint16x8_t v29 = (uint16x8_t)vtrn2q_s32(v24, v26);
      uint16x8_t v30 = (uint16x8_t)vtrn1q_s32(v25, v27);
      uint16x8_t v31 = (uint16x8_t)vtrn2q_s32(v25, v27);
      int32x4_t v32 = (int32x4_t)vtrn1q_s16(v17, v19);
      int32x4_t v33 = (int32x4_t)vtrn2q_s16(v17, v19);
      int32x4_t v34 = (int32x4_t)vtrn1q_s16(v21, v23);
      int32x4_t v35 = (int32x4_t)vtrn2q_s16(v21, v23);
      uint16x8_t v36 = (uint16x8_t)vtrn1q_s32(v32, v34);
      uint16x8_t v37 = (uint16x8_t)vtrn2q_s32(v32, v34);
      uint16x8_t v38 = (uint16x8_t)vtrn1q_s32(v33, v35);
      int16x8_t v39 = (int16x8_t)vaddw_u8(v31, *(uint8x8_t *)v16.i8);
      int16x8_t v40 = (int16x8_t)vaddw_high_u8((uint16x8_t)vtrn2q_s32(v33, v35), v16);
      int8x16_t v41 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v28, *(uint8x8_t *)a1->i8)), (int16x8_t)vaddw_high_u8(v36, *a1));
      int8x16_t v42 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v30, *(uint8x8_t *)&a1->i8[a2])), (int16x8_t)vaddw_high_u8(v38, *(uint8x16_t *)((char *)a1 + a2)));
      int8x16_t v43 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v29, *(uint8x8_t *)&a1->i8[2 * a2])), (int16x8_t)vaddw_high_u8(v37, *(uint8x16_t *)((char *)a1 + 2 * a2)));
      int16x8_t *v4 = 0uLL;
      v4[1] = 0uLL;
      v4[2] = 0uLL;
      v4[3] = 0uLL;
      v4[4] = 0uLL;
      v4[5] = 0uLL;
      v4[6] = 0uLL;
      v4[7] = 0uLL;
      *a1 = (uint8x16_t)v41;
      *(int8x16_t *)((char *)a1 + a2) = v42;
      *(int8x16_t *)((char *)a1 + 2 * a2) = v43;
      *(int8x16_t *)((char *)a1 + 3 * a2) = vqmovun_high_s16(vqmovun_s16(v39), v40);
      a1 = (uint8x16_t *)((char *)a1 + 4 * a2);
      v15 += 4;
      v4 += 8;
    }
    while (v15 < 0xC);
  }
}

uint16x8_t *sub_1BBADCB8C(uint16x8_t *result, uint64_t a2, int16x4_t *a3, int a4)
{
  int16x8_t v4 = (int16x8_t *)a3;
  int16x8_t v6 = result;
  if (a4 == 1)
  {
    int16x8_t v7 = vdupq_n_s16((a3->i16[0] + 17) >> 5);
    a3->i16[0] = 0;
    uint16x8_t v8 = *(uint16x8_t *)((char *)result + 14 * a2);
    v9.i64[0] = 0xFC00FC00FC00FC00;
    v9.i64[1] = 0xFC00FC00FC00FC00;
    int16x8_t v10 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 2 * a2), v7), v9);
    int16x8_t v11 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 4 * a2), v7), v9);
    int16x8_t v12 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 6 * a2), v7), v9);
    int16x8_t v13 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 8 * a2), v7), v9);
    int16x8_t v14 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 10 * a2), v7), v9);
    int16x8_t v15 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 12 * a2), v7), v9);
    *(int16x8_t *)uint64_t result = vminq_s16((int16x8_t)vsqaddq_u16(*result, v7), v9);
    *(int16x8_t *)((char *)result + 2 * a2) = v10;
    *(int16x8_t *)((char *)result + 4 * a2) = v11;
    *(int16x8_t *)((char *)result + 6 * a2) = v12;
    *(int16x8_t *)((char *)result + 8 * a2) = v13;
    *(int16x8_t *)((char *)result + 10 * a2) = v14;
    *(int16x8_t *)((char *)result + 12 * a2) = v15;
    *(int16x8_t *)((char *)result + 14 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v8, v7), v9);
  }
  else
  {
    uint64_t result = (uint16x8_t *)sub_1BBADB2E0(a3, a4);
    char v16 = 1;
    v17.i64[0] = 0xFC00FC00FC00FC00;
    v17.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      char v18 = v16;
      int16x8_t v19 = v4[1];
      int16x8_t v20 = v4[2];
      int16x8_t v21 = v4[3];
      int32x4_t v22 = (int32x4_t)vtrn1q_s16(*v4, v19);
      int32x4_t v23 = (int32x4_t)vtrn2q_s16(*v4, v19);
      int32x4_t v24 = (int32x4_t)vtrn1q_s16(v20, v21);
      int32x4_t v25 = (int32x4_t)vtrn2q_s16(v20, v21);
      int16x8_t v26 = vminq_s16((int16x8_t)vsqaddq_u16(*v6, (int16x8_t)vtrn1q_s32(v22, v24)), v17);
      int16x8_t v27 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)v6 + 2 * a2), (int16x8_t)vtrn1q_s32(v23, v25)), v17);
      int16x8_t v28 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)v6 + 4 * a2), (int16x8_t)vtrn2q_s32(v22, v24)), v17);
      int16x8_t v29 = (int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)v6 + 6 * a2), (int16x8_t)vtrn2q_s32(v23, v25));
      int16x8_t *v4 = 0uLL;
      v4[1] = 0uLL;
      v4[2] = 0uLL;
      v4[3] = 0uLL;
      *int16x8_t v6 = (uint16x8_t)v26;
      *(int16x8_t *)((char *)v6 + 2 * a2) = v27;
      *(int16x8_t *)((char *)v6 + 4 * a2) = v28;
      *(int16x8_t *)((char *)v6 + 6 * a2) = vminq_s16(v29, v17);
      int16x8_t v6 = (uint16x8_t *)((char *)v6 + 8 * a2);
      v4 += 4;
      char v16 = 0;
    }
    while ((v18 & 1) != 0);
  }
  return result;
}

int16x4_t *sub_1BBADCD3C(int16x4_t *result, uint64_t a2, int16x4_t *a3, int a4)
{
  int16x8_t v4 = (int16x8_t *)a3;
  int16x8_t v6 = (uint8x8_t *)result;
  if (a4 == 1)
  {
    uint16x8_t v7 = (uint16x8_t)vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    int16x8_t v8 = (int16x8_t)vaddw_u8(v7, (uint8x8_t)*result);
    int16x8_t v9 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + a2));
    int16x8_t v10 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 2 * a2));
    int16x8_t v11 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 3 * a2));
    int16x8_t v12 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 4 * a2));
    int16x8_t v13 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 5 * a2));
    int16x8_t v14 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 6 * a2));
    int16x8_t v15 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)&result[a2] - a2));
    *uint64_t result = (int16x4_t)vqmovun_s16(v8);
    *(int8x8_t *)((char *)result + a2) = vqmovun_s16(v9);
    *(int8x8_t *)((char *)result + 2 * a2) = vqmovun_s16(v10);
    *(int8x8_t *)((char *)result + 3 * a2) = vqmovun_s16(v11);
    *(int8x8_t *)((char *)result + 4 * a2) = vqmovun_s16(v12);
    *(int8x8_t *)((char *)result + 5 * a2) = vqmovun_s16(v13);
    *(int8x8_t *)((char *)result + 6 * a2) = vqmovun_s16(v14);
    *(int8x8_t *)((char *)&result[a2] - a2) = vqmovun_s16(v15);
  }
  else
  {
    uint64_t result = sub_1BBADB61C(a3, a4);
    char v16 = 1;
    do
    {
      char v17 = v16;
      int16x8_t v18 = v4[1];
      int16x8_t v19 = v4[2];
      int16x8_t v20 = v4[3];
      int32x4_t v21 = (int32x4_t)vtrn1q_s16(*v4, v18);
      int32x4_t v22 = (int32x4_t)vtrn2q_s16(*v4, v18);
      int32x4_t v23 = (int32x4_t)vtrn1q_s16(v19, v20);
      int32x4_t v24 = (int32x4_t)vtrn2q_s16(v19, v20);
      int16x8_t v25 = (int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s32(v22, v24), *(uint8x8_t *)((char *)v6 + 3 * a2));
      int8x8_t v26 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn1q_s32(v21, v23), *v6));
      int8x8_t v27 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn1q_s32(v22, v24), *(uint8x8_t *)((char *)v6 + a2)));
      int8x8_t v28 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s32(v21, v23), *(uint8x8_t *)((char *)v6 + 2 * a2)));
      int16x8_t *v4 = 0uLL;
      v4[1] = 0uLL;
      v4[2] = 0uLL;
      v4[3] = 0uLL;
      *int16x8_t v6 = (uint8x8_t)v26;
      *(int8x8_t *)((char *)v6 + a2) = v27;
      *(int8x8_t *)((char *)v6 + 2 * a2) = v28;
      *(int8x8_t *)((char *)v6 + 3 * a2) = vqmovun_s16(v25);
      int16x8_t v6 = (uint8x8_t *)((char *)v6 + 4 * a2);
      v4 += 4;
      char v16 = 0;
    }
    while ((v17 & 1) != 0);
  }
  return result;
}

void sub_1BBADCECC(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4)
{
  if (a4 == 1)
  {
    int16x8_t v7 = vdupq_n_s16((a3->i16[0] + 17) >> 5);
    a3->i16[0] = 0;
    int16x8_t v8 = (uint64_t *)((char *)a1 + 2 * a2);
    v9.i64[0] = *a1;
    v9.i64[1] = *v8;
    int16x8_t v10 = (uint16x8_t *)((char *)a1 + 4 * a2);
    v11.i64[0] = 0xFC00FC00FC00FC00;
    v11.i64[1] = 0xFC00FC00FC00FC00;
    int16x8_t v12 = vminq_s16((int16x8_t)vsqaddq_u16(v9, v7), v11);
    int16x8_t v13 = vminq_s16((int16x8_t)vsqaddq_u16(*v10, v7), v11);
    uint64_t v14 = v12.i64[0];
  }
  else
  {
    sub_1BBADB850(a3, a4);
    int16x8_t v8 = (uint64_t *)((char *)a1 + 2 * a2);
    v15.i64[0] = *a1;
    v15.i64[1] = *v8;
    int16x8_t v10 = (uint16x8_t *)((char *)a1 + 4 * a2);
    v16.i64[0] = 0xFC00FC00FC00FC00;
    v16.i64[1] = 0xFC00FC00FC00FC00;
    int16x8_t v12 = vminq_s16((int16x8_t)vsqaddq_u16(v15, *(int16x8_t *)a3), v16);
    int16x8_t v13 = vminq_s16((int16x8_t)vsqaddq_u16(*v10, (int16x8_t)a3[1]), v16);
    uint64_t v14 = v12.i64[0];
    *a3 = 0u;
    a3[1] = 0u;
  }
  *a1 = v14;
  *int16x8_t v8 = v12.i64[1];
  *int16x8_t v10 = (uint16x8_t)v13;
}

void sub_1BBADCFB4(__int32 *a1, uint64_t a2, int32x4_t *a3, int a4)
{
  if (a4 == 1)
  {
    uint16x8_t v7 = (uint16x8_t)vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    int16x8_t v8 = (__int32 *)((char *)a1 + a2);
    v9.i32[0] = *a1;
    v9.i32[1] = *(__int32 *)((char *)a1 + a2);
    int16x8_t v10 = (__int32 *)((char *)a1 + 2 * a2);
    int16x8_t v11 = (__int32 *)((char *)a1 + 3 * a2);
    v12.i32[0] = *v10;
    v12.i32[1] = *v11;
    int8x8_t v13 = vqmovun_s16((int16x8_t)vaddw_u8(v7, v9));
    int8x8_t v14 = vqmovun_s16((int16x8_t)vaddw_u8(v7, v12));
    __int32 v15 = v13.i32[0];
  }
  else
  {
    sub_1BBADBA28(a3, a4);
    int16x8_t v8 = (__int32 *)((char *)a1 + a2);
    v16.i32[0] = *a1;
    v16.i32[1] = *(__int32 *)((char *)a1 + a2);
    int16x8_t v10 = (__int32 *)((char *)a1 + 2 * a2);
    int16x8_t v11 = (__int32 *)((char *)a1 + 3 * a2);
    v17.i32[0] = *v10;
    v17.i32[1] = *v11;
    int16x8_t v18 = (int16x8_t)vaddw_u8((uint16x8_t)a3[1], v17);
    int8x8_t v13 = vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)a3, v16));
    int8x8_t v14 = vqmovun_s16(v18);
    __int32 v15 = v13.i32[0];
    *a3 = 0u;
    a3[1] = 0u;
  }
  *a1 = v15;
  *int16x8_t v8 = v13.i32[1];
  *int16x8_t v10 = v14.i32[0];
  *int16x8_t v11 = v14.i32[1];
}

int16x8_t sub_1BBADD094(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int16x8_t v3 = *(int16x8_t *)(a3 + 16);
  int32x4_t v4 = vaddl_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)a3);
  int32x4_t v5 = vaddw_high_s16(vmovl_s16(*(int16x4_t *)v3.i8), v3);
  int32x4_t v6 = vsubw_high_s16(vmovl_s16(*(int16x4_t *)a3), v3);
  v7.i64[0] = 0x4A004A004A004ALL;
  v7.i64[1] = 0x4A004A004A004ALL;
  v8.i64[0] = 0x1D0000001DLL;
  v8.i64[1] = 0x1D0000001DLL;
  v9.i64[0] = 0x3700000037;
  v9.i64[1] = 0x3700000037;
  int32x4_t v10 = vmlaq_s32(vmlal_high_s16(vmulq_s32(v5, v9), *(int16x8_t *)a3, v7), v4, v8);
  int32x4_t v11 = vmlaq_s32(vmlsl_high_s16(vmulq_s32(v6, v8), *(int16x8_t *)a3, v7), v4, v9);
  v4.i64[0] = 0x1C0000001CLL;
  v4.i64[1] = 0x1C0000001CLL;
  int32x4_t v12 = vmlaq_s32(vmlal_high_s16(vmulq_s32(v6, v9), *(int16x8_t *)a3, v7), v5, v4);
  int32x4_t v13 = vaddw_high_s16(vsubl_s16(*(int16x4_t *)a3, *(int16x4_t *)v3.i8), v3);
  v3.i64[0] = 0x4A0000004ALL;
  v3.i64[1] = 0x4A0000004ALL;
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v10, 7uLL);
  *(int16x4_t *)v12.i8 = vqrshrn_n_s32(v12, 7uLL);
  *(int16x4_t *)v13.i8 = vqrshrn_n_s32(vmulq_s32(v13, (int32x4_t)v3), 7uLL);
  *(int16x4_t *)v7.i8 = vqrshrn_n_s32(v11, 7uLL);
  *(int16x4_t *)v10.i8 = vtrn1_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v12.i8);
  *(int16x4_t *)v12.i8 = vtrn2_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v12.i8);
  *(int16x4_t *)v5.i8 = vtrn1_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v7.i8);
  *(int16x4_t *)v13.i8 = vtrn2_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v7.i8);
  *(int32x2_t *)v7.i8 = vzip1_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v5.i8);
  *(int32x2_t *)v5.i8 = vzip2_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v5.i8);
  int32x4_t v14 = vaddl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v5.i8);
  *(int32x2_t *)v11.i8 = vzip2_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
  int32x4_t v15 = vaddl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v11.i8);
  int32x4_t v16 = vsubl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v11.i8);
  *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
  int16x8_t v17 = (int16x8_t)vmlaq_s32(vmlal_s16(vmulq_s32(v15, v9), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v14, v8);
  int32x4_t v18 = vmlaq_s32(vmlsl_s16(vmulq_s32(v16, v8), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v14, v9);
  int32x4_t v19 = vmlaq_s32(vmlal_s16(vmulq_s32(v16, v9), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v15, v4);
  int32x4_t v20 = vmulq_s32(vaddw_s16(vsubl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v5.i8), *(int16x4_t *)v11.i8), (int32x4_t)v3);
  *(int16x4_t *)v3.i8 = vqrshrn_n_s32((int32x4_t)v17, 0xAuLL);
  *(int16x4_t *)v17.i8 = vqrshrn_n_s32(v19, 0xAuLL);
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v20, 0xAuLL);
  *(int16x4_t *)v4.i8 = vqrshrn_n_s32(v18, 0xAuLL);
  vst4_s16((__int16 *)a3, *(int16x4x4_t *)v3.i8);
  int32x4_t v21 = (uint64_t *)((char *)a1 + 2 * a2);
  v20.i64[0] = *a1;
  v20.i64[1] = *v21;
  int32x4_t v22 = (uint64_t *)((char *)a1 + 6 * a2);
  v3.i64[0] = *(uint64_t *)((char *)a1 + 4 * a2);
  v3.i64[1] = *v22;
  int16x8_t v23 = *(int16x8_t *)(a3 + 16);
  v17.i64[0] = 0xFC00FC00FC00FC00;
  v17.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v24 = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v20, *(int16x8_t *)a3), v17);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *a1 = v24.i64[0];
  *int32x4_t v21 = v24.i64[1];
  int16x8_t result = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v3, v23), v17);
  *(uint64_t *)((char *)a1 + 4 * a2) = result.i64[0];
  *int32x4_t v22 = result.i64[1];
  return result;
}

int16x8_t sub_1BBADD1C8(int16x8_t *a1)
{
  int16x8_t result = vrshrq_n_s16(*a1, 3uLL);
  int16x8_t v2 = vrshrq_n_s16(a1[1], 3uLL);
  *a1 = result;
  a1[1] = v2;
  return result;
}

int16x8_t sub_1BBADD1DC(int16x8_t *a1)
{
  int16x8_t result = vshlq_n_s16(*a1, 3uLL);
  int16x8_t v2 = vshlq_n_s16(a1[1], 3uLL);
  *a1 = result;
  a1[1] = v2;
  return result;
}

int16x8_t sub_1BBADD1F0(int16x8_t *a1, uint64_t a2, int16x8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  int32x4_t v6 = a3 + 2;
  int16x8_t v7 = a1 + 2;
  do
  {
    int16x8_t result = vsubq_s16(v7[-2], v6[-2]);
    int16x8_t v9 = vsubq_s16(v7[-1], v6[-1]);
    int16x8_t v10 = vsubq_s16(*v7, *v6);
    int32x4_t v11 = (int16x8_t *)(a5 + v5);
    int16x8_t v12 = vsubq_s16(v7[1], v6[1]);
    *int32x4_t v11 = result;
    v11[1] = v9;
    v11[2] = v10;
    v11[3] = v12;
    v5 += 64;
    int32x4_t v6 = (int16x8_t *)((char *)v6 + 2 * a4);
    int16x8_t v7 = (int16x8_t *)((char *)v7 + 2 * a2);
  }
  while (v5 != 2048);
  return result;
}

int16x8_t *sub_1BBADD248(int16x8_t *result, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x8_t *a5)
{
  uint64_t v5 = 2 * a2;
  uint64_t v6 = 2 * a4;
  unsigned int v7 = -2;
  do
  {
    int16x8_t v8 = vsubq_s16(result[1], a3[1]);
    int16x8_t v9 = vsubq_s16(*(int16x8_t *)((char *)result + 2 * a2), *(int16x8_t *)((char *)a3 + 2 * a4));
    int16x8_t v10 = vsubq_s16(*(int16x8_t *)((char *)&result[1] + v5), *(int16x8_t *)((char *)&a3[1] + v6));
    *a5 = vsubq_s16(*result, *a3);
    a5[1] = v8;
    v7 += 2;
    a5[2] = v9;
    a5[3] = v10;
    int16x8_t result = (int16x8_t *)((char *)result + v5 + v5);
    a3 = (int16x8_t *)((char *)a3 + v6 + v6);
    a5 += 4;
  }
  while (v7 < 0xE);
  return result;
}

int16x8_t *sub_1BBADD2A0(int16x8_t *result, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x8_t *a5)
{
  uint64_t v5 = 2 * a2;
  uint64_t v6 = 2 * a4;
  char v7 = 1;
  do
  {
    char v8 = v7;
    int16x8_t v9 = vsubq_s16(*(int16x8_t *)((char *)result + 2 * a2), *(int16x8_t *)((char *)a3 + 2 * a4));
    int16x8_t v10 = (int16x8_t *)((char *)result + v5 + v5);
    int32x4_t v11 = (int16x8_t *)((char *)a3 + v6 + v6);
    int16x8_t v12 = vsubq_s16(*v10, *v11);
    int32x4_t v13 = (int16x8_t *)((char *)v10 + v5);
    int32x4_t v14 = (int16x8_t *)((char *)v11 + v6);
    int16x8_t v15 = vsubq_s16(*v13, *v14);
    *a5 = vsubq_s16(*result, *a3);
    a5[1] = v9;
    a5[2] = v12;
    a5[3] = v15;
    int16x8_t result = (int16x8_t *)((char *)v13 + v5);
    a3 = (int16x8_t *)((char *)v14 + v6);
    a5 += 4;
    char v7 = 0;
  }
  while ((v8 & 1) != 0);
  return result;
}

int16x4_t sub_1BBADD318(int16x4_t *a1, uint64_t a2, int16x4_t *a3, uint64_t a4, int16x4_t *a5)
{
  int16x4_t v5 = vsub_s16(*(int16x4_t *)((char *)a1 + 2 * a2), *(int16x4_t *)((char *)a3 + 2 * a4));
  int16x4_t v6 = *(int16x4_t *)((char *)a1 + 6 * a2);
  int16x4_t v7 = *(int16x4_t *)((char *)a3 + 6 * a4);
  int16x4_t v8 = vsub_s16(*(int16x4_t *)((char *)a1 + 4 * a2), *(int16x4_t *)((char *)a3 + 4 * a4));
  *a5 = vsub_s16(*a1, *a3);
  a5[1] = v5;
  int16x4_t result = vsub_s16(v6, v7);
  a5[2] = v8;
  a5[3] = result;
  return result;
}

void sub_1BBADD370(int16x4_t *a1)
{
  v2[65] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  sub_1BBADD3E0(v2, a1, 5);
  sub_1BBADD530(a1, v2);
}

void sub_1BBADD3E0(int16x4_t *a1, int16x4_t *a2, int a3)
{
  v50[16] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  unsigned int v6 = -4;
  do
  {
    int16x4_t v7 = a2[1];
    int16x4_t v8 = a2[4];
    int16x4_t v9 = a2[5];
    int16x4_t v10 = a2[8];
    int16x4_t v11 = a2[9];
    int16x4_t v12 = a2[12];
    int16x4_t v13 = a2[13];
    int16x4_t v14 = a2[2];
    int16x4_t v15 = a2[3];
    int32x2_t v16 = (int32x2_t)vtrn1_s16(*a2, v8);
    int16x4_t v17 = a2[6];
    int16x4_t v18 = a2[7];
    int32x2_t v19 = (int32x2_t)vtrn2_s16(*a2, v8);
    int32x2_t v20 = (int32x2_t)vtrn1_s16(v10, v12);
    int32x2_t v21 = (int32x2_t)vtrn2_s16(v10, v12);
    int16x4_t v22 = a2[10];
    int16x4_t v23 = a2[11];
    int32x2_t v24 = vzip1_s32(v16, v20);
    int32x2_t v25 = vzip2_s32(v16, v20);
    int32x2_t v26 = vzip1_s32(v19, v21);
    int16x4_t v27 = a2[14];
    int16x4_t v28 = a2[15];
    int32x2_t v29 = vzip2_s32(v19, v21);
    int32x2_t v30 = (int32x2_t)vtrn1_s16(v7, v9);
    int32x2_t v31 = (int32x2_t)vtrn2_s16(v7, v9);
    int32x2_t v32 = (int32x2_t)vtrn1_s16(v11, v13);
    int32x2_t v33 = (int32x2_t)vtrn2_s16(v11, v13);
    int32x2_t v34 = vzip1_s32(v30, v32);
    int32x2_t v35 = vzip2_s32(v30, v32);
    int32x2_t v36 = vzip1_s32(v31, v33);
    int32x2_t v37 = vzip2_s32(v31, v33);
    int32x2_t v38 = (int32x2_t)vtrn1_s16(v14, v17);
    int32x2_t v39 = (int32x2_t)vtrn2_s16(v14, v17);
    int32x2_t v40 = (int32x2_t)vtrn1_s16(v22, v27);
    int32x2_t v41 = (int32x2_t)vtrn2_s16(v22, v27);
    int32x2_t v42 = vzip1_s32(v38, v40);
    int32x2_t v43 = vzip2_s32(v38, v40);
    int32x2_t v44 = vzip1_s32(v39, v41);
    int32x2_t v45 = vzip2_s32(v39, v41);
    int32x2_t v46 = (int32x2_t)vtrn1_s16(v15, v18);
    int32x2_t v47 = (int32x2_t)vtrn2_s16(v15, v18);
    int32x2_t v48 = (int32x2_t)vtrn1_s16(v23, v28);
    v50[0] = (int16x4_t)v24;
    v50[1] = (int16x4_t)v29;
    int32x2_t v49 = (int32x2_t)vtrn2_s16(v23, v28);
    _DWORD v50[2] = (int16x4_t)v26;
    void v50[3] = (int16x4_t)v25;
    v50[4] = (int16x4_t)v37;
    v50[5] = (int16x4_t)v34;
    v50[6] = (int16x4_t)v35;
    v50[7] = (int16x4_t)v36;
    v50[8] = (int16x4_t)vzip2_s32(v47, v49);
    v50[9] = (int16x4_t)vzip1_s32(v46, v48);
    v50[10] = (int16x4_t)vzip2_s32(v46, v48);
    v50[11] = (int16x4_t)vzip1_s32(v47, v49);
    v50[12] = (int16x4_t)v42;
    v50[13] = (int16x4_t)v45;
    v50[14] = (int16x4_t)v44;
    v50[15] = (int16x4_t)v43;
    sub_1BBADD9B0(a1++, 16, a3, v50);
    v6 += 4;
    a2 += 16;
  }
  while (v6 < 0xC);
}

void sub_1BBADD530(int16x4_t *a1, int16x4_t *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = -4;
  do
  {
    int16x4_t v5 = a2[1];
    int16x4_t v6 = a2[4];
    int16x4_t v7 = a2[5];
    int32x2_t v8 = (int32x2_t)vtrn1_s16(*a2, v6);
    int32x2_t v9 = (int32x2_t)vtrn2_s16(*a2, v6);
    int16x4_t v10 = a2[8];
    int16x4_t v11 = a2[9];
    int16x4_t v12 = a2[12];
    int16x4_t v13 = a2[13];
    int32x2_t v14 = (int32x2_t)vtrn1_s16(v10, v12);
    int32x2_t v15 = (int32x2_t)vtrn2_s16(v10, v12);
    int32x2_t v16 = (int32x2_t)vtrn1_s16(v5, v7);
    int32x2_t v17 = (int32x2_t)vtrn2_s16(v5, v7);
    int32x2_t v18 = (int32x2_t)vtrn1_s16(v11, v13);
    int32x2_t v19 = (int32x2_t)vtrn2_s16(v11, v13);
    int16x4_t v20 = a2[2];
    int16x4_t v21 = a2[3];
    int16x4_t v22 = a2[6];
    int16x4_t v23 = a2[7];
    int32x2_t v24 = (int32x2_t)vtrn1_s16(v20, v22);
    int32x2_t v25 = (int32x2_t)vtrn2_s16(v20, v22);
    int16x4_t v26 = a2[10];
    int16x4_t v27 = a2[11];
    int16x4_t v28 = a2[14];
    int16x4_t v29 = a2[15];
    int32x2_t v30 = (int32x2_t)vtrn1_s16(v26, v28);
    int32x2_t v31 = (int32x2_t)vtrn2_s16(v26, v28);
    int32x2_t v32 = (int32x2_t)vtrn1_s16(v21, v23);
    int32x2_t v33 = (int32x2_t)vtrn2_s16(v21, v23);
    int32x2_t v34 = (int32x2_t)vtrn1_s16(v27, v29);
    int32x2_t v35 = (int32x2_t)vtrn2_s16(v27, v29);
    v36[0] = vmovl_s16((int16x4_t)vzip1_s32(v8, v14));
    v36[1] = vmovl_s16((int16x4_t)vzip2_s32(v9, v15));
    v36[2] = vmovl_s16((int16x4_t)vzip1_s32(v9, v15));
    v36[3] = vmovl_s16((int16x4_t)vzip2_s32(v8, v14));
    v36[4] = vmovl_s16((int16x4_t)vzip2_s32(v17, v19));
    v36[5] = vmovl_s16((int16x4_t)vzip1_s32(v16, v18));
    v36[6] = vmovl_s16((int16x4_t)vzip2_s32(v16, v18));
    v36[7] = vmovl_s16((int16x4_t)vzip1_s32(v17, v19));
    v36[8] = vmovl_s16((int16x4_t)vzip2_s32(v33, v35));
    v36[9] = vmovl_s16((int16x4_t)vzip1_s32(v32, v34));
    v36[10] = vmovl_s16((int16x4_t)vzip2_s32(v32, v34));
    v36[11] = vmovl_s16((int16x4_t)vzip1_s32(v33, v35));
    v36[12] = vmovl_s16((int16x4_t)vzip1_s32(v24, v30));
    __int32 v36[13] = vmovl_s16((int16x4_t)vzip2_s32(v25, v31));
    v36[14] = vmovl_s16((int16x4_t)vzip1_s32(v25, v31));
    v36[15] = vmovl_s16((int16x4_t)vzip2_s32(v24, v30));
    sub_1BBADD6BC(a1++, 16, 10, v36);
    v4 += 4;
    a2 += 16;
  }
  while (v4 < 0xC);
}

int16x4_t sub_1BBADD6BC(int16x4_t *a1, uint64_t a2, int a3, int32x4_t *a4)
{
  unint64_t v5 = 0;
  int32x4_t v6 = a4[2];
  int32x4_t v7 = a4[3];
  int32x4_t v8 = a4[4];
  int32x4_t v9 = a4[5];
  int32x4_t v10 = a4[8];
  int32x4_t v11 = a4[9];
  int32x4_t v12 = a4[10];
  int32x4_t v13 = a4[11];
  int32x4_t v14 = a4[12];
  int32x4_t v15 = a4[13];
  int32x4_t v45 = a4[1];
  int32x4_t v46 = *a4;
  int32x4_t v16 = vsubq_s32(*a4, v10);
  int32x4_t v17 = vsubq_s32(v45, v11);
  int32x4_t v18 = vsubq_s32(v6, v12);
  int32x4_t v19 = vsubq_s32(v7, v13);
  int32x4_t v20 = vsubq_s32(v8, v14);
  int32x4_t v21 = vsubq_s32(v9, v15);
  int32x4_t v22 = a4[6];
  int32x4_t v23 = a4[7];
  int32x4_t v24 = a4[14];
  int32x4_t v25 = a4[15];
  int32x4_t v26 = vsubq_s32(v22, v24);
  int32x4_t v27 = vsubq_s32(v23, v25);
  uint64_t v28 = 6 * a2;
  uint64_t v29 = 8 * a2;
  uint64_t v30 = 2 * a2;
  int32x4_t v31 = vdupq_n_s32(-a3);
  int32x2_t v32 = a1;
  do
  {
    int32x2_t v33 = &aZfwp9[8 * v5];
    int16x8_t v34 = *((int16x8_t *)v33 + 1);
    *(int16x4_t *)((char *)v32 + v30) = vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vmovl_s16(vdup_lane_s16(*(int16x4_t *)v33, 1)), v17), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v33, 0)), v16), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v33, 2)), v18), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v33, 3)), v19), vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v33, 4)), v20), vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v33, 5)), v21),
                                                vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v33, 6)),
                                                v26),
                                              vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v33, 7)),
                                              v27),
                                            v31));
    *(int16x4_t *)((char *)v32 + v28) = vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vmovl_s16(vdup_lane_s16(*(int16x4_t *)v34.i8, 1)), v17), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v34.i8, 0)), v16), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v34.i8, 2)), v18), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v34.i8, 3)), v19), vmovl_s16(vdup_laneq_s16(v34, 4)), v20),
                                                  vmovl_s16(vdup_laneq_s16(v34, 5)),
                                                  v21),
                                                vmovl_s16(vdup_laneq_s16(v34, 6)),
                                                v26),
                                              vmovl_s16(vdup_laneq_s16(v34, 7)),
                                              v27),
                                            v31));
    int32x2_t v32 = (int16x4_t *)((char *)v32 + v29);
    BOOL v35 = v5 >= 6;
    v5 += 2;
  }
  while (!v35);
  int32x4_t v36 = vaddq_s32(v25, v23);
  int32x4_t v37 = vaddq_s32(v24, v22);
  int32x4_t v38 = vaddq_s32(v15, v9);
  int32x4_t v39 = vaddq_s32(v14, v8);
  int32x4_t v40 = vaddq_s32(v13, v7);
  int32x4_t v41 = vaddq_s32(v12, v6);
  int32x4_t v42 = vaddq_s32(v11, v45);
  int32x4_t v43 = vaddq_s32(v10, v46);
  return sub_1BBADD87C(a1, v30, a3, v43, v42, v41, v40, v39, v38, v37, v36);
}

int16x4_t sub_1BBADD87C(int16x4_t *a1, uint64_t a2, int a3, int32x4_t a4, int32x4_t a5, int32x4_t a6, int32x4_t a7, int32x4_t a8, int32x4_t a9, int32x4_t a10, int32x4_t a11)
{
  int32x4_t v11 = vaddq_s32(a8, a4);
  int32x4_t v12 = vsubq_s32(a4, a8);
  int32x4_t v13 = vaddq_s32(a9, a5);
  int32x4_t v14 = vsubq_s32(a5, a9);
  int32x4_t v15 = vaddq_s32(a10, a6);
  int32x4_t v16 = vsubq_s32(a6, a10);
  int32x4_t v17 = vaddq_s32(a11, a7);
  int32x4_t v18 = vsubq_s32(a7, a11);
  v19.i64[0] = 0x5900000059;
  v19.i64[1] = 0x5900000059;
  v20.i64[0] = 0x1200000012;
  v20.i64[1] = 0x1200000012;
  v21.i64[0] = 0x4B0000004BLL;
  v21.i64[1] = 0x4B0000004BLL;
  v22.i64[0] = 0x3200000032;
  v22.i64[1] = 0x3200000032;
  int32x4_t v23 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v12, v19), v14, v20), v16, v21), v18, v22);
  v24.i64[0] = 0x3100000031;
  v24.i64[1] = 0x3100000031;
  v25.i64[0] = 0x1100000011;
  v25.i64[1] = 0x1100000011;
  int32x4_t v26 = vmlaq_s32(vmlaq_s32(vmulq_s32(v12, v21), v14, v24), v16, v25);
  v25.i64[0] = 0x5800000058;
  v25.i64[1] = 0x5800000058;
  int32x4_t v27 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v12, v22), v14, v21), v16, v25), v18, v20);
  int32x4_t v28 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v12, v20), v14, v25), v16, v24), v18, v21);
  int32x4_t v29 = vdupq_n_s32(-a3);
  uint64_t v30 = (int16x4_t *)((char *)a1 + 2 * a2);
  *uint64_t v30 = vqmovn_s32(vrshlq_s32(v23, v29));
  uint64_t v31 = 4 * a2;
  *(int16x4_t *)((char *)v30 + v31) = vqmovn_s32(vrshlq_s32(vmlaq_s32(v26, v18, v25), v29));
  v30[a2] = vqmovn_s32(vrshlq_s32(v27, v29));
  uint64_t v32 = 12 * a2;
  *(int16x4_t *)((char *)v30 + v32) = vqmovn_s32(vrshlq_s32(v28, v29));
  int32x4_t v33 = vaddq_s32(v13, v11);
  int32x4_t v34 = vsubq_s32(v11, v13);
  int32x4_t v35 = vaddq_s32(v17, v15);
  int32x4_t v36 = vsubq_s32(v15, v17);
  v15.i64[0] = 0x5300000053;
  v15.i64[1] = 0x5300000053;
  int32x4_t v37 = vmulq_s32(v34, v15);
  v17.i64[0] = 0x2400000024;
  v17.i64[1] = 0x2400000024;
  int32x4_t v38 = vmulq_s32(v34, v17);
  int32x4_t v39 = vmlaq_s32(v37, v36, v17);
  v17.i64[0] = 0x5200000052;
  v17.i64[1] = 0x5200000052;
  int32x4_t v40 = vmlaq_s32(v38, v36, v17);
  int32x4_t v41 = vaddq_s32(v35, v33);
  int16x4_t result = vqmovn_s32(vrshlq_s32(vshlq_n_s32(vsubq_s32(v33, v35), 6uLL), v29));
  *a1 = vqmovn_s32(vrshlq_s32(vshlq_n_s32(v41, 6uLL), v29));
  *(int16x4_t *)((char *)a1 + v31) = vqmovn_s32(vrshlq_s32(v39, v29));
  a1[a2] = result;
  *(int16x4_t *)((char *)a1 + v32) = vqmovn_s32(vrshlq_s32(v40, v29));
  return result;
}

int16x4_t sub_1BBADD9B0(int16x4_t *a1, uint64_t a2, int a3, int16x4_t *a4)
{
  unint64_t v5 = 0;
  int16x4_t v6 = *a4;
  int16x4_t v7 = a4[1];
  int16x4_t v8 = a4[2];
  int16x4_t v9 = a4[3];
  int16x4_t v10 = a4[4];
  int16x4_t v11 = a4[5];
  int16x4_t v12 = a4[8];
  int16x4_t v13 = a4[9];
  int16x4_t v14 = a4[10];
  int16x4_t v15 = a4[11];
  int16x4_t v16 = a4[12];
  int16x4_t v17 = a4[13];
  int16x4_t v18 = vsub_s16(*a4, v12);
  int16x4_t v19 = vsub_s16(v7, v13);
  int16x4_t v20 = vsub_s16(v8, v14);
  int16x4_t v21 = vsub_s16(v9, v15);
  int16x4_t v22 = vsub_s16(v10, v16);
  int16x4_t v23 = vsub_s16(v11, v17);
  int16x4_t v24 = a4[6];
  int16x4_t v25 = a4[7];
  int16x4_t v26 = a4[14];
  int16x4_t v27 = a4[15];
  int16x4_t v28 = vsub_s16(v24, v26);
  int16x4_t v29 = vsub_s16(v25, v27);
  uint64_t v30 = 6 * a2;
  uint64_t v31 = 8 * a2;
  uint64_t v32 = 2 * a2;
  int32x4_t v33 = vdupq_n_s32(-a3);
  int32x4_t v34 = a1;
  do
  {
    int32x4_t v35 = &aZfwp9[8 * v5];
    int16x8_t v36 = *((int16x8_t *)v35 + 1);
    *(int16x4_t *)((char *)v34 + v32) = vqmovn_s32(vrshlq_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v19, *(int16x4_t *)v35, 1), v18, *(int16x4_t *)v35, 0), v20, *(int16x4_t *)v35, 2), v21, *(int16x4_t *)v35, 3), v22,
                                                    *(int16x8_t *)v35,
                                                    4),
                                                  v23,
                                                  *(int16x8_t *)v35,
                                                  5),
                                                v28,
                                                *(int16x8_t *)v35,
                                                6),
                                              v29,
                                              *(int16x8_t *)v35,
                                              7),
                                            v33));
    *(int16x4_t *)((char *)v34 + v30) = vqmovn_s32(vrshlq_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v19, *(int16x4_t *)v36.i8, 1), v18, *(int16x4_t *)v36.i8, 0), v20, *(int16x4_t *)v36.i8, 2), v21, *(int16x4_t *)v36.i8, 3), v22,
                                                    v36,
                                                    4),
                                                  v23,
                                                  v36,
                                                  5),
                                                v28,
                                                v36,
                                                6),
                                              v29,
                                              v36,
                                              7),
                                            v33));
    int32x4_t v34 = (int16x4_t *)((char *)v34 + v31);
    BOOL v37 = v5 >= 6;
    v5 += 2;
  }
  while (!v37);
  int16x4_t v38 = vadd_s16(v27, v25);
  int16x4_t v39 = vadd_s16(v26, v24);
  int16x4_t v40 = vadd_s16(v17, v11);
  int16x4_t v41 = vadd_s16(v16, v10);
  int16x4_t v42 = vadd_s16(v15, v9);
  int16x4_t v43 = vadd_s16(v14, v8);
  int16x4_t v44 = vadd_s16(v13, v7);
  int16x4_t v45 = vadd_s16(v12, v6);
  return sub_1BBADDACC(a1, v32, a3, v45, v44, v43, v42, v41, v40, v39, v38);
}

int16x4_t sub_1BBADDACC(int16x4_t *a1, uint64_t a2, int a3, int16x4_t a4, int16x4_t a5, int16x4_t a6, int16x4_t a7, int16x4_t a8, int16x4_t a9, int16x4_t a10, int16x4_t a11)
{
  int16x4_t v11 = vadd_s16(a8, a4);
  int16x4_t v12 = vsub_s16(a4, a8);
  int16x4_t v13 = vadd_s16(a9, a5);
  int16x4_t v14 = vsub_s16(a5, a9);
  int16x4_t v15 = vadd_s16(a10, a6);
  int16x4_t v16 = vsub_s16(a6, a10);
  int16x4_t v17 = vsub_s16(a7, a11);
  int32x4_t v18 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v14, (int16x4_t)0x12001200120012), v12, (int16x4_t)0x59005900590059), v16, (int16x4_t)0x4B004B004B004BLL), v17, (int16x4_t)0x32003200320032);
  int32x4_t v19 = vmlal_s16(vmlal_s16(vmull_s16(v14, (int16x4_t)0x31003100310031), v12, (int16x4_t)0x4B004B004B004BLL), v16, (int16x4_t)0x11001100110011);
  int32x4_t v20 = vmlal_s16(vmull_s16(v14, (int16x4_t)0x4B004B004B004BLL), v12, (int16x4_t)0x32003200320032);
  int32x4_t v21 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v14, (int16x4_t)0x58005800580058), v12, (int16x4_t)0x12001200120012), v16, (int16x4_t)0x31003100310031), v17, (int16x4_t)0x4B004B004B004BLL);
  int32x4_t v22 = vdupq_n_s32(-a3);
  int16x4_t v23 = (int16x4_t *)((char *)a1 + 2 * a2);
  *int16x4_t v23 = vqmovn_s32(vrshlq_s32(v18, v22));
  uint64_t v24 = 4 * a2;
  *(int16x4_t *)((char *)v23 + v24) = vqmovn_s32(vrshlq_s32(vmlal_s16(v19, v17, (int16x4_t)0x58005800580058), v22));
  v23[a2] = vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v20, v16, (int16x4_t)0x58005800580058), v17, (int16x4_t)0x12001200120012), v22));
  uint64_t v25 = 12 * a2;
  *(int16x4_t *)((char *)v23 + v25) = vqmovn_s32(vrshlq_s32(v21, v22));
  *(int16x4_t *)v21.i8 = vadd_s16(a11, a7);
  int16x4_t v26 = vadd_s16(v13, v11);
  int16x4_t v27 = vsub_s16(v11, v13);
  int16x4_t v28 = vadd_s16(*(int16x4_t *)v21.i8, v15);
  *(int16x4_t *)v21.i8 = vsub_s16(v15, *(int16x4_t *)v21.i8);
  int32x4_t v29 = vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, (int16x4_t)0x24002400240024), v27, (int16x4_t)0x53005300530053);
  int32x4_t v30 = vmlsl_s16(vmull_s16(v27, (int16x4_t)0x24002400240024), *(int16x4_t *)v21.i8, (int16x4_t)0x53005300530053);
  int32x4_t v31 = vaddl_s16(v28, v26);
  int16x4_t v32 = vqmovn_s32(vrshlq_s32(vshlq_n_s32(vsubl_s16(v26, v28), 6uLL), v22));
  *a1 = vqmovn_s32(vrshlq_s32(vshlq_n_s32(v31, 6uLL), v22));
  *(int16x4_t *)((char *)a1 + v24) = vqmovn_s32(vrshlq_s32(v29, v22));
  int16x4_t result = vqmovn_s32(vrshlq_s32(v30, v22));
  a1[a2] = v32;
  *(int16x4_t *)((char *)a1 + v25) = result;
  return result;
}

void sub_1BBADDBFC(int16x4_t *a1)
{
  v2[17] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  sub_1BBADDC6C(v2, a1, 4);
  sub_1BBADDD14(a1, v2);
}

void sub_1BBADDC6C(int16x4_t *a1, int16x4_t *a2, int a3)
{
  char v6 = 1;
  do
  {
    int16x4_t v7 = a2[1];
    int16x4_t v8 = a2[4];
    int16x4_t v9 = a2[5];
    int16x4_t v10 = a2[2];
    int16x4_t v11 = a2[3];
    int32x2_t v12 = (int32x2_t)vtrn1_s16(*a2, v10);
    int32x2_t v13 = (int32x2_t)vtrn2_s16(*a2, v10);
    int16x4_t v14 = a2[6];
    int16x4_t v15 = a2[7];
    int32x2_t v16 = (int32x2_t)vtrn1_s16(v8, v14);
    int32x2_t v17 = (int32x2_t)vtrn2_s16(v8, v14);
    int32x2_t v18 = (int32x2_t)vtrn1_s16(v7, v11);
    int32x2_t v19 = (int32x2_t)vtrn2_s16(v7, v11);
    int32x2_t v20 = (int32x2_t)vtrn1_s16(v9, v15);
    int32x2_t v21 = (int32x2_t)vtrn2_s16(v9, v15);
    char v22 = v6;
    sub_1BBADDACC(a1, 8, a3, (int16x4_t)vzip1_s32(v12, v16), (int16x4_t)vzip2_s32(v13, v17), (int16x4_t)vzip1_s32(v13, v17), (int16x4_t)vzip2_s32(v12, v16), (int16x4_t)vzip2_s32(v19, v21), (int16x4_t)vzip1_s32(v18, v20), (int16x4_t)vzip2_s32(v18, v20), (int16x4_t)vzip1_s32(v19, v21));
    char v6 = 0;
    ++a1;
    a2 += 8;
  }
  while ((v22 & 1) != 0);
}

void sub_1BBADDD14(int16x4_t *a1, int16x4_t *a2)
{
  char v4 = 1;
  do
  {
    int16x4_t v5 = a2[1];
    int16x4_t v6 = a2[4];
    int16x4_t v7 = a2[5];
    int16x4_t v8 = a2[2];
    int16x4_t v9 = a2[3];
    int32x2_t v10 = (int32x2_t)vtrn1_s16(*a2, v8);
    int32x2_t v11 = (int32x2_t)vtrn2_s16(*a2, v8);
    int16x4_t v12 = a2[6];
    int16x4_t v13 = a2[7];
    int32x2_t v14 = (int32x2_t)vtrn1_s16(v6, v12);
    int32x2_t v15 = (int32x2_t)vtrn2_s16(v6, v12);
    int32x2_t v16 = (int32x2_t)vtrn1_s16(v5, v9);
    int32x2_t v17 = (int32x2_t)vtrn2_s16(v5, v9);
    int32x2_t v18 = (int32x2_t)vtrn1_s16(v7, v13);
    int32x2_t v19 = (int32x2_t)vtrn2_s16(v7, v13);
    char v20 = v4;
    sub_1BBADD87C(a1, 8, 9, vmovl_s16((int16x4_t)vzip1_s32(v10, v14)), vmovl_s16((int16x4_t)vzip2_s32(v11, v15)), vmovl_s16((int16x4_t)vzip1_s32(v11, v15)), vmovl_s16((int16x4_t)vzip2_s32(v10, v14)), vmovl_s16((int16x4_t)vzip2_s32(v17, v19)), vmovl_s16((int16x4_t)vzip1_s32(v16, v18)), vmovl_s16((int16x4_t)vzip2_s32(v16, v18)), vmovl_s16((int16x4_t)vzip1_s32(v17, v19)));
    char v4 = 0;
    ++a1;
    a2 += 8;
  }
  while ((v20 & 1) != 0);
}

int16x4_t sub_1BBADDDD8(int8x16_t *a1)
{
  int8x16_t v1 = a1[1];
  int16x4_t v2 = (int16x4_t)vextq_s8(*a1, *a1, 8uLL).u64[0];
  int32x2_t v3 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a1->i8, v2);
  int32x2_t v4 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a1->i8, v2);
  int16x4_t v5 = (int16x4_t)vextq_s8(v1, v1, 8uLL).u64[0];
  int32x2_t v6 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v1.i8, v5);
  *(int16x4_t *)v1.i8 = vtrn2_s16(*(int16x4_t *)v1.i8, v5);
  int16x4_t v7 = (int16x4_t)vzip1_s32(v4, *(int32x2_t *)v1.i8);
  int16x4_t v8 = (int16x4_t)vzip2_s32(v3, v6);
  int16x4_t v9 = (int16x4_t)vzip2_s32(v4, *(int32x2_t *)v1.i8);
  *(int32x2_t *)v1.i8 = vzip1_s32(v3, v6);
  int16x4_t v10 = vadd_s16(v9, *(int16x4_t *)v1.i8);
  int16x4_t v11 = vsub_s16(*(int16x4_t *)v1.i8, v9);
  *(int16x4_t *)v1.i8 = vadd_s16(v8, v7);
  int16x4_t v12 = vsub_s16(v7, v8);
  return sub_1BBADDE60((int16x4_t *)a1, (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v1.i8, v10), 6uLL), 3uLL)), vrshrq_n_s32(vmlal_s16(vmull_s16(v12, (int16x4_t)0x24002400240024), v11, (int16x4_t)0x53005300530053), 3uLL)), (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubl_s16(v10, *(int16x4_t *)v1.i8), 6uLL), 3uLL)), vrshrq_n_s32(vmlsl_s16(vmull_s16(v11, (int16x4_t)0x24002400240024), v12, (int16x4_t)0x53005300530053), 3uLL)));
}

int16x4_t sub_1BBADDE60(int16x4_t *a1, int8x16_t a2, int8x16_t a3)
{
  int16x4_t v3 = (int16x4_t)vextq_s8(a2, a2, 8uLL).u64[0];
  int32x2_t v4 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a2.i8, v3);
  int32x2_t v5 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a2.i8, v3);
  int16x4_t v6 = (int16x4_t)vextq_s8(a3, a3, 8uLL).u64[0];
  int32x2_t v7 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a3.i8, v6);
  int32x2_t v8 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a3.i8, v6);
  int16x4_t v9 = (int16x4_t)vzip1_s32(v5, v8);
  int16x4_t v10 = (int16x4_t)vzip2_s32(v4, v7);
  int16x4_t v11 = (int16x4_t)vzip2_s32(v5, v8);
  int16x4_t v12 = (int16x4_t)vzip1_s32(v4, v7);
  int32x4_t v13 = vaddl_s16(v11, v12);
  int32x4_t v14 = vsubl_s16(v12, v11);
  int32x4_t v15 = vaddl_s16(v10, v9);
  int32x4_t v16 = vsubl_s16(v9, v10);
  v17.i64[0] = 0x5300000053;
  v17.i64[1] = 0x5300000053;
  v18.i64[0] = 0x2400000024;
  v18.i64[1] = 0x2400000024;
  int32x4_t v19 = vmulq_s32(v14, v18);
  int32x4_t v20 = vmlaq_s32(vmulq_s32(v16, v18), v14, v17);
  v14.i64[0] = 0x5200000052;
  v14.i64[1] = 0x5200000052;
  *a1 = vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddq_s32(v15, v13), 6uLL), 8uLL));
  a1[1] = vqmovn_s32(vrshrq_n_s32(v20, 8uLL));
  int16x4_t result = vqmovn_s32(vrshrq_n_s32(vmlaq_s32(v19, v16, v14), 8uLL));
  a1[2] = vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubq_s32(v13, v15), 6uLL), 8uLL));
  a1[3] = result;
  return result;
}

void sub_1BBADDEF0(int16x8_t *a1, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x4_t *a5)
{
  uint64_t v6 = 0;
  v13[257] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  int32x2_t v7 = a3 + 2;
  int32x2_t v8 = a1 + 2;
  do
  {
    int16x8_t v9 = vsubq_s16(v8[-1], v7[-1]);
    int16x8_t v10 = vsubq_s16(*v8, *v7);
    int16x4_t v11 = (int16x8_t *)&a5[v6];
    int16x8_t v12 = vsubq_s16(v8[1], v7[1]);
    *int16x4_t v11 = vsubq_s16(v8[-2], v7[-2]);
    v11[1] = v9;
    v11[2] = v10;
    v11[3] = v12;
    v6 += 8;
    int32x2_t v7 = (int16x8_t *)((char *)v7 + 2 * a4);
    int32x2_t v8 = (int16x8_t *)((char *)v8 + 2 * a2);
  }
  while ((v6 * 8) != 2048);
  sub_1BBADDFB4(v13, a5, 6);
  sub_1BBADE1EC(a5, v13);
}

void sub_1BBADDFB4(int16x4_t *a1, int16x4_t *a2, int a3)
{
  v98[32] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  unsigned int v6 = -4;
  do
  {
    int16x4_t v7 = a2[1];
    int16x4_t v8 = a2[8];
    int16x4_t v9 = a2[9];
    int16x4_t v10 = a2[16];
    int16x4_t v11 = a2[17];
    int16x4_t v12 = a2[24];
    int16x4_t v13 = a2[25];
    int16x4_t v14 = a2[2];
    int16x4_t v15 = a2[3];
    int16x4_t v16 = a2[10];
    int16x4_t v17 = a2[11];
    int16x4_t v18 = a2[18];
    int16x4_t v19 = a2[19];
    int16x4_t v20 = a2[26];
    int16x4_t v21 = a2[27];
    int16x4_t v22 = a2[4];
    int16x4_t v23 = a2[5];
    int16x4_t v24 = a2[12];
    int16x4_t v25 = a2[13];
    int16x4_t v26 = a2[20];
    int16x4_t v27 = a2[21];
    int32x2_t v28 = (int32x2_t)vtrn1_s16(*a2, v8);
    int32x2_t v29 = (int32x2_t)vtrn2_s16(*a2, v8);
    int32x2_t v30 = (int32x2_t)vtrn1_s16(v10, v12);
    int16x4_t v32 = a2[28];
    int16x4_t v31 = a2[29];
    int32x2_t v33 = (int32x2_t)vtrn2_s16(v10, v12);
    int32x2_t v34 = vzip1_s32(v28, v30);
    int32x2_t v35 = vzip2_s32(v28, v30);
    int16x4_t v37 = a2[6];
    int16x4_t v36 = a2[7];
    int32x2_t v38 = vzip1_s32(v29, v33);
    int32x2_t v39 = vzip2_s32(v29, v33);
    int32x2_t v40 = (int32x2_t)vtrn1_s16(v7, v9);
    int16x4_t v41 = a2[14];
    int16x4_t v42 = a2[15];
    int32x2_t v43 = (int32x2_t)vtrn2_s16(v7, v9);
    int32x2_t v44 = (int32x2_t)vtrn1_s16(v11, v13);
    int32x2_t v45 = (int32x2_t)vtrn2_s16(v11, v13);
    int16x4_t v46 = a2[22];
    int16x4_t v47 = a2[23];
    int32x2_t v48 = vzip1_s32(v40, v44);
    int32x2_t v49 = vzip2_s32(v40, v44);
    v98[0] = (int16x4_t)v34;
    int32x2_t v50 = vzip1_s32(v43, v45);
    int32x2_t v51 = vzip2_s32(v43, v45);
    int32x2_t v52 = (int32x2_t)vtrn1_s16(v14, v16);
    int32x2_t v53 = (int32x2_t)vtrn2_s16(v14, v16);
    int32x2_t v54 = (int32x2_t)vtrn1_s16(v18, v20);
    int32x2_t v55 = (int32x2_t)vtrn2_s16(v18, v20);
    int32x2_t v56 = vzip1_s32(v52, v54);
    int32x2_t v57 = vzip2_s32(v52, v54);
    int32x2_t v58 = vzip1_s32(v53, v55);
    int32x2_t v59 = vzip2_s32(v53, v55);
    int32x2_t v60 = (int32x2_t)vtrn1_s16(v15, v17);
    int32x2_t v61 = (int32x2_t)vtrn2_s16(v15, v17);
    int32x2_t v62 = (int32x2_t)vtrn1_s16(v19, v21);
    int32x2_t v63 = (int32x2_t)vtrn2_s16(v19, v21);
    int32x2_t v64 = vzip1_s32(v60, v62);
    int32x2_t v65 = vzip2_s32(v60, v62);
    int32x2_t v66 = vzip1_s32(v61, v63);
    int32x2_t v67 = vzip2_s32(v61, v63);
    int32x2_t v68 = (int32x2_t)vtrn1_s16(v22, v24);
    int32x2_t v69 = (int32x2_t)vtrn2_s16(v22, v24);
    int32x2_t v70 = (int32x2_t)vtrn1_s16(v26, v32);
    int32x2_t v71 = (int32x2_t)vtrn2_s16(v26, v32);
    int32x2_t v72 = vzip1_s32(v68, v70);
    int32x2_t v73 = vzip2_s32(v68, v70);
    int32x2_t v74 = vzip1_s32(v69, v71);
    int32x2_t v75 = vzip2_s32(v69, v71);
    int32x2_t v76 = (int32x2_t)vtrn1_s16(v23, v25);
    int32x2_t v77 = (int32x2_t)vtrn2_s16(v23, v25);
    int32x2_t v78 = (int32x2_t)vtrn1_s16(v27, v31);
    int32x2_t v79 = (int32x2_t)vtrn2_s16(v27, v31);
    int32x2_t v80 = vzip1_s32(v76, v78);
    int32x2_t v81 = vzip2_s32(v76, v78);
    int32x2_t v82 = vzip1_s32(v77, v79);
    int32x2_t v83 = vzip2_s32(v77, v79);
    int32x2_t v84 = (int32x2_t)vtrn1_s16(v37, v41);
    int32x2_t v85 = (int32x2_t)vtrn2_s16(v37, v41);
    int16x4_t v86 = a2[30];
    int16x4_t v87 = a2[31];
    v98[1] = (int16x4_t)v39;
    v98[2] = (int16x4_t)v38;
    int32x2_t v88 = (int32x2_t)vtrn1_s16(v46, v86);
    int32x2_t v89 = (int32x2_t)vtrn2_s16(v46, v86);
    int32x2_t v90 = vzip1_s32(v84, v88);
    int32x2_t v91 = vzip2_s32(v84, v88);
    v98[3] = (int16x4_t)v35;
    v98[4] = (int16x4_t)v51;
    int32x2_t v92 = vzip1_s32(v85, v89);
    int32x2_t v93 = vzip2_s32(v85, v89);
    v98[5] = (int16x4_t)v48;
    v98[6] = (int16x4_t)v49;
    int32x2_t v94 = (int32x2_t)vtrn1_s16(v36, v42);
    int32x2_t v95 = (int32x2_t)vtrn2_s16(v36, v42);
    int32x2_t v96 = (int32x2_t)vtrn1_s16(v47, v87);
    int32x2_t v97 = (int32x2_t)vtrn2_s16(v47, v87);
    v98[7] = (int16x4_t)v50;
    v98[8] = (int16x4_t)v67;
    v98[9] = (int16x4_t)v64;
    v98[10] = (int16x4_t)v65;
    v98[11] = (int16x4_t)v66;
    v98[12] = (int16x4_t)v56;
    v98[13] = (int16x4_t)v59;
    v98[14] = (int16x4_t)v58;
    v98[15] = (int16x4_t)v57;
    v98[16] = (int16x4_t)vzip2_s32(v95, v97);
    v98[17] = (int16x4_t)vzip1_s32(v94, v96);
    v98[18] = (int16x4_t)vzip2_s32(v94, v96);
    v98[19] = (int16x4_t)vzip1_s32(v95, v97);
    v98[20] = (int16x4_t)v90;
    v98[21] = (int16x4_t)v93;
    v98[22] = (int16x4_t)v92;
    v98[23] = (int16x4_t)v91;
    v98[24] = (int16x4_t)v72;
    v98[25] = (int16x4_t)v75;
    v98[26] = (int16x4_t)v74;
    v98[27] = (int16x4_t)v73;
    v98[28] = (int16x4_t)v83;
    v98[29] = (int16x4_t)v80;
    v98[30] = (int16x4_t)v81;
    v98[31] = (int16x4_t)v82;
    sub_1BBADE6A0(a1++, a3, v98);
    v6 += 4;
    a2 += 32;
  }
  while (v6 < 0x1C);
}

void sub_1BBADE1EC(int16x4_t *a1, int16x4_t *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = -4;
  do
  {
    int16x4_t v5 = a2[1];
    int16x4_t v6 = a2[8];
    int16x4_t v7 = a2[9];
    int32x2_t v8 = (int32x2_t)vtrn1_s16(*a2, v6);
    int32x2_t v9 = (int32x2_t)vtrn2_s16(*a2, v6);
    int16x4_t v10 = a2[16];
    int16x4_t v11 = a2[17];
    int16x4_t v12 = a2[24];
    int16x4_t v13 = a2[25];
    int32x2_t v14 = (int32x2_t)vtrn1_s16(v10, v12);
    int32x2_t v15 = (int32x2_t)vtrn2_s16(v10, v12);
    int32x2_t v16 = (int32x2_t)vtrn1_s16(v5, v7);
    int32x2_t v17 = (int32x2_t)vtrn2_s16(v5, v7);
    int32x2_t v18 = (int32x2_t)vtrn1_s16(v11, v13);
    int32x2_t v19 = (int32x2_t)vtrn2_s16(v11, v13);
    int16x4_t v20 = a2[2];
    int16x4_t v21 = a2[3];
    int16x4_t v22 = a2[10];
    int16x4_t v23 = a2[11];
    int32x2_t v24 = (int32x2_t)vtrn1_s16(v20, v22);
    int32x2_t v25 = (int32x2_t)vtrn2_s16(v20, v22);
    int16x4_t v26 = a2[18];
    int16x4_t v27 = a2[19];
    int16x4_t v28 = a2[26];
    int16x4_t v29 = a2[27];
    int32x2_t v30 = (int32x2_t)vtrn1_s16(v26, v28);
    int32x2_t v31 = (int32x2_t)vtrn2_s16(v26, v28);
    int32x2_t v32 = (int32x2_t)vtrn1_s16(v21, v23);
    int32x2_t v33 = (int32x2_t)vtrn2_s16(v21, v23);
    int32x2_t v34 = (int32x2_t)vtrn1_s16(v27, v29);
    int32x2_t v35 = (int32x2_t)vtrn2_s16(v27, v29);
    int16x4_t v36 = a2[4];
    int16x4_t v37 = a2[5];
    int16x4_t v38 = a2[12];
    int16x4_t v39 = a2[13];
    int32x2_t v40 = (int32x2_t)vtrn1_s16(v36, v38);
    int32x2_t v41 = (int32x2_t)vtrn2_s16(v36, v38);
    int16x4_t v42 = a2[20];
    int16x4_t v43 = a2[21];
    int16x4_t v44 = a2[28];
    int16x4_t v45 = a2[29];
    int32x2_t v46 = (int32x2_t)vtrn1_s16(v42, v44);
    int32x2_t v47 = (int32x2_t)vtrn2_s16(v42, v44);
    int32x2_t v67 = (int32x2_t)vtrn1_s16(v37, v39);
    int32x2_t v48 = (int32x2_t)vtrn2_s16(v37, v39);
    int32x2_t v49 = (int32x2_t)vtrn1_s16(v43, v45);
    int32x2_t v50 = (int32x2_t)vtrn2_s16(v43, v45);
    int16x4_t v51 = a2[6];
    int16x4_t v52 = a2[7];
    int16x4_t v53 = a2[14];
    int16x4_t v54 = a2[15];
    int32x2_t v55 = (int32x2_t)vtrn1_s16(v51, v53);
    int32x2_t v56 = (int32x2_t)vtrn2_s16(v51, v53);
    int16x4_t v57 = a2[22];
    int16x4_t v58 = a2[23];
    int16x4_t v60 = a2[30];
    int16x4_t v59 = a2[31];
    int32x2_t v61 = (int32x2_t)vtrn1_s16(v57, v60);
    int32x2_t v62 = (int32x2_t)vtrn2_s16(v57, v60);
    int32x2_t v63 = (int32x2_t)vtrn1_s16(v52, v54);
    int32x2_t v64 = (int32x2_t)vtrn2_s16(v52, v54);
    int32x2_t v65 = (int32x2_t)vtrn1_s16(v58, v59);
    int32x2_t v66 = (int32x2_t)vtrn2_s16(v58, v59);
    v68[0] = vmovl_s16((int16x4_t)vzip1_s32(v8, v14));
    v68[1] = vmovl_s16((int16x4_t)vzip2_s32(v9, v15));
    v68[2] = vmovl_s16((int16x4_t)vzip1_s32(v9, v15));
    v68[3] = vmovl_s16((int16x4_t)vzip2_s32(v8, v14));
    v68[4] = vmovl_s16((int16x4_t)vzip2_s32(v17, v19));
    v68[5] = vmovl_s16((int16x4_t)vzip1_s32(v16, v18));
    v68[6] = vmovl_s16((int16x4_t)vzip2_s32(v16, v18));
    v68[7] = vmovl_s16((int16x4_t)vzip1_s32(v17, v19));
    v68[8] = vmovl_s16((int16x4_t)vzip2_s32(v33, v35));
    v68[9] = vmovl_s16((int16x4_t)vzip1_s32(v32, v34));
    v68[10] = vmovl_s16((int16x4_t)vzip2_s32(v32, v34));
    v68[11] = vmovl_s16((int16x4_t)vzip1_s32(v33, v35));
    v68[12] = vmovl_s16((int16x4_t)vzip1_s32(v24, v30));
    v68[13] = vmovl_s16((int16x4_t)vzip2_s32(v25, v31));
    v68[14] = vmovl_s16((int16x4_t)vzip1_s32(v25, v31));
    v68[15] = vmovl_s16((int16x4_t)vzip2_s32(v24, v30));
    v68[16] = vmovl_s16((int16x4_t)vzip2_s32(v64, v66));
    v68[17] = vmovl_s16((int16x4_t)vzip1_s32(v63, v65));
    v68[18] = vmovl_s16((int16x4_t)vzip2_s32(v63, v65));
    v68[19] = vmovl_s16((int16x4_t)vzip1_s32(v64, v66));
    v68[20] = vmovl_s16((int16x4_t)vzip1_s32(v55, v61));
    v68[21] = vmovl_s16((int16x4_t)vzip2_s32(v56, v62));
    v68[22] = vmovl_s16((int16x4_t)vzip1_s32(v56, v62));
    v68[23] = vmovl_s16((int16x4_t)vzip2_s32(v55, v61));
    v68[24] = vmovl_s16((int16x4_t)vzip1_s32(v40, v46));
    v68[25] = vmovl_s16((int16x4_t)vzip2_s32(v41, v47));
    v68[26] = vmovl_s16((int16x4_t)vzip1_s32(v41, v47));
    v68[27] = vmovl_s16((int16x4_t)vzip2_s32(v40, v46));
    v68[28] = vmovl_s16((int16x4_t)vzip2_s32(v48, v50));
    v68[29] = vmovl_s16((int16x4_t)vzip1_s32(v67, v49));
    v68[30] = vmovl_s16((int16x4_t)vzip2_s32(v67, v49));
    v68[31] = vmovl_s16((int16x4_t)vzip1_s32(v48, v50));
    sub_1BBADE498(a1++, v68);
    v4 += 4;
    a2 += 32;
  }
  while (v4 < 0x1C);
}

int16x4_t sub_1BBADE498(int16x4_t *a1, int32x4_t *a2)
{
  int32x4_t v3 = a2[16];
  int32x4_t v4 = a2[17];
  int32x4_t v5 = a2[18];
  int32x4_t v6 = a2[19];
  int32x4_t v7 = a2[20];
  int32x4_t v8 = a2[21];
  int32x4_t v9 = a2[22];
  int32x4_t v10 = a2[23];
  int32x4_t v11 = a2[24];
  int32x4_t v12 = a2[25];
  int32x4_t v13 = a2[26];
  int32x4_t v14 = a2[27];
  int32x4_t v15 = a2[28];
  int32x4_t v16 = a2[29];
  int32x4_t v17 = a2[30];
  int32x4_t v18 = a2[31];
  int32x4_t v19 = a2[1];
  int32x4_t v20 = vaddq_s32(*a2, v3);
  int32x4_t v21 = vsubq_s32(*a2, v3);
  int32x4_t v22 = vaddq_s32(v19, v4);
  int32x4_t v23 = vsubq_s32(v19, v4);
  *a2 = v20;
  a2[1] = v22;
  int32x4_t v24 = a2[2];
  int32x4_t v25 = a2[3];
  int32x4_t v26 = vaddq_s32(v24, v5);
  int32x4_t v27 = vsubq_s32(v24, v5);
  int32x4_t v28 = vaddq_s32(v25, v6);
  int32x4_t v29 = vsubq_s32(v25, v6);
  a2[2] = v26;
  a2[3] = v28;
  int32x4_t v30 = a2[4];
  int32x4_t v31 = a2[5];
  int32x4_t v32 = vaddq_s32(v30, v7);
  int32x4_t v33 = vsubq_s32(v30, v7);
  int32x4_t v34 = vaddq_s32(v31, v8);
  int32x4_t v35 = vsubq_s32(v31, v8);
  a2[4] = v32;
  a2[5] = v34;
  int32x4_t v36 = a2[6];
  int32x4_t v37 = a2[7];
  int32x4_t v38 = vaddq_s32(v36, v9);
  int32x4_t v39 = vsubq_s32(v36, v9);
  int32x4_t v40 = vaddq_s32(v37, v10);
  int32x4_t v41 = vsubq_s32(v37, v10);
  a2[6] = v38;
  a2[7] = v40;
  int32x4_t v42 = a2[8];
  int32x4_t v43 = a2[9];
  int32x4_t v44 = vaddq_s32(v42, v11);
  int32x4_t v45 = vsubq_s32(v42, v11);
  int32x4_t v46 = vaddq_s32(v43, v12);
  int32x4_t v47 = vsubq_s32(v43, v12);
  a2[8] = v44;
  a2[9] = v46;
  int32x4_t v48 = a2[10];
  int32x4_t v49 = a2[11];
  int32x4_t v50 = vaddq_s32(v48, v13);
  int32x4_t v51 = vsubq_s32(v48, v13);
  int32x4_t v52 = vaddq_s32(v49, v14);
  int32x4_t v53 = vsubq_s32(v49, v14);
  a2[10] = v50;
  a2[11] = v52;
  int32x4_t v54 = a2[12];
  int32x4_t v55 = a2[13];
  int32x4_t v56 = vaddq_s32(v54, v15);
  int32x4_t v57 = vsubq_s32(v54, v15);
  int32x4_t v58 = vaddq_s32(v55, v16);
  int32x4_t v59 = vsubq_s32(v55, v16);
  a2[12] = v56;
  a2[13] = v58;
  int32x4_t v60 = a2[14];
  int32x4_t v61 = a2[15];
  int32x4_t v62 = vaddq_s32(v60, v17);
  int32x4_t v63 = vsubq_s32(v60, v17);
  int32x4_t v64 = vaddq_s32(v61, v18);
  int32x4_t v65 = vsubq_s32(v61, v18);
  int32x2_t v66 = (int16x4_t *)&unk_1BBB83660;
  uint64_t v67 = 8;
  a2[14] = v62;
  a2[15] = v64;
  do
  {
    int16x8_t v68 = *(int16x8_t *)v66[-2].i8;
    a1[v67] = vqmovn_s32(vrshrq_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vmovl_s16(vdup_lane_s16(*(int16x4_t *)v68.i8, 1)), v23), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v68.i8, 0)), v21),
                                              vmovl_s16(vdup_lane_s16(*(int16x4_t *)v68.i8, 2)),
                                              v27),
                                            vmovl_s16(vdup_lane_s16(*(int16x4_t *)v68.i8, 3)),
                                            v29),
                                          vmovl_s16(vdup_laneq_s16(v68, 4)),
                                          v33),
                                        vmovl_s16(vdup_laneq_s16(v68, 5)),
                                        v35),
                                      vmovl_s16(vdup_laneq_s16(v68, 6)),
                                      v39),
                                    vmovl_s16(vdup_laneq_s16(v68, 7)),
                                    v41),
                                  vmovl_s16(vdup_lane_s16(*v66, 1)),
                                  v47),
                                vmovl_s16(vdup_lane_s16(*v66, 0)),
                                v45),
                              vmovl_s16(vdup_lane_s16(*v66, 2)),
                              v51),
                            vmovl_s16(vdup_lane_s16(*v66, 3)),
                            v53),
                          vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v66->i8, 4)),
                          v57),
                        vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v66->i8, 5)),
                        v59),
                      vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v66->i8, 6)),
                      v63),
                    vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v66->i8, 7)),
                    v65),
                  0xBuLL));
    v67 += 16;
    v66 += 4;
  }
  while (v67 != 264);
  return sub_1BBADD6BC(a1, 64, 11, a2);
}

int16x4_t sub_1BBADE6A0(int16x4_t *a1, int a2, int16x4_t *a3)
{
  int16x4_t v4 = a3[16];
  int16x4_t v5 = a3[17];
  int16x4_t v6 = a3[18];
  int16x4_t v7 = a3[19];
  int16x4_t v8 = a3[20];
  int16x4_t v9 = a3[21];
  int16x4_t v10 = a3[22];
  int16x4_t v11 = a3[23];
  int16x4_t v12 = a3[24];
  int16x4_t v13 = a3[25];
  int16x4_t v14 = a3[26];
  int16x4_t v15 = a3[27];
  int16x4_t v16 = a3[28];
  int16x4_t v17 = a3[29];
  int16x4_t v19 = a3[30];
  int16x4_t v18 = a3[31];
  int16x4_t v20 = a3[1];
  int16x4_t v21 = vadd_s16(*a3, v4);
  int16x4_t v22 = vsub_s16(*a3, v4);
  int16x4_t v23 = vadd_s16(v20, v5);
  int16x4_t v24 = vsub_s16(v20, v5);
  *a3 = v21;
  a3[1] = v23;
  int16x4_t v25 = a3[2];
  int16x4_t v26 = a3[3];
  int16x4_t v27 = vadd_s16(v25, v6);
  int16x4_t v28 = vsub_s16(v25, v6);
  int16x4_t v29 = vadd_s16(v26, v7);
  int16x4_t v30 = vsub_s16(v26, v7);
  a3[2] = v27;
  a3[3] = v29;
  int16x4_t v31 = a3[4];
  int16x4_t v32 = a3[5];
  int16x4_t v33 = vadd_s16(v31, v8);
  int16x4_t v34 = vsub_s16(v31, v8);
  int16x4_t v35 = vadd_s16(v32, v9);
  int16x4_t v36 = vsub_s16(v32, v9);
  a3[4] = v33;
  a3[5] = v35;
  int16x4_t v37 = a3[6];
  int16x4_t v38 = a3[7];
  int16x4_t v39 = vadd_s16(v37, v10);
  int16x4_t v40 = vsub_s16(v37, v10);
  int16x4_t v41 = vadd_s16(v38, v11);
  int16x4_t v42 = vsub_s16(v38, v11);
  a3[6] = v39;
  a3[7] = v41;
  int16x4_t v43 = a3[8];
  int16x4_t v44 = a3[9];
  int16x4_t v45 = vadd_s16(v43, v12);
  int16x4_t v46 = vsub_s16(v43, v12);
  int16x4_t v47 = vadd_s16(v44, v13);
  int16x4_t v48 = vsub_s16(v44, v13);
  a3[8] = v45;
  a3[9] = v47;
  int16x4_t v49 = a3[10];
  int16x4_t v50 = a3[11];
  int16x4_t v51 = vadd_s16(v49, v14);
  int16x4_t v52 = vsub_s16(v49, v14);
  int16x4_t v53 = vadd_s16(v50, v15);
  int16x4_t v54 = vsub_s16(v50, v15);
  a3[10] = v51;
  a3[11] = v53;
  int16x4_t v55 = a3[12];
  int16x4_t v56 = a3[13];
  int16x4_t v57 = vadd_s16(v55, v16);
  int16x4_t v58 = vsub_s16(v55, v16);
  int16x4_t v59 = vadd_s16(v56, v17);
  int16x4_t v60 = vsub_s16(v56, v17);
  a3[12] = v57;
  a3[13] = v59;
  int16x4_t v61 = a3[14];
  int16x4_t v62 = a3[15];
  int16x4_t v63 = vadd_s16(v61, v19);
  int16x4_t v64 = vsub_s16(v61, v19);
  int16x4_t v65 = vadd_s16(v62, v18);
  int32x4_t v66 = vdupq_n_s32(-a2);
  int16x4_t v67 = vsub_s16(v62, v18);
  int16x8_t v68 = (int16x4_t *)&unk_1BBB83660;
  uint64_t v69 = 8;
  a3[14] = v63;
  a3[15] = v65;
  do
  {
    int16x8_t v70 = *(int16x8_t *)v68[-2].i8;
    a1[v69] = vqmovn_s32(vrshlq_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v24, *(int16x4_t *)v70.i8, 1), v22, *(int16x4_t *)v70.i8,
                                                0),
                                              v28,
                                              *(int16x4_t *)v70.i8,
                                              2),
                                            v30,
                                            *(int16x4_t *)v70.i8,
                                            3),
                                          v34,
                                          v70,
                                          4),
                                        v36,
                                        v70,
                                        5),
                                      v40,
                                      v70,
                                      6),
                                    v42,
                                    v70,
                                    7),
                                  v46,
                                  *v68,
                                  0),
                                v48,
                                *v68,
                                1),
                              v52,
                              *v68,
                              2),
                            v54,
                            *v68,
                            3),
                          v58,
                          *(int16x8_t *)v68->i8,
                          4),
                        v60,
                        *(int16x8_t *)v68->i8,
                        5),
                      v64,
                      *(int16x8_t *)v68->i8,
                      6),
                    v67,
                    *(int16x8_t *)v68->i8,
                    7),
                  v66));
    v69 += 16;
    v68 += 4;
  }
  while (v69 != 264);
  return sub_1BBADD9B0(a1, 64, a2, a3);
}

void sub_1BBADE818(int16x8_t *a1, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x4_t *a5)
{
  v13[65] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  uint64_t v6 = 2 * a2;
  uint64_t v7 = 2 * a4;
  unsigned int v8 = -2;
  int16x4_t v9 = (int16x8_t *)a5;
  do
  {
    int16x8_t v10 = vsubq_s16(a1[1], a3[1]);
    int16x8_t v11 = vsubq_s16(*(int16x8_t *)((char *)a1 + 2 * a2), *(int16x8_t *)((char *)a3 + 2 * a4));
    int16x8_t v12 = vsubq_s16(*(int16x8_t *)((char *)&a1[1] + v6), *(int16x8_t *)((char *)&a3[1] + v7));
    *int16x4_t v9 = vsubq_s16(*a1, *a3);
    v9[1] = v10;
    v8 += 2;
    v9[2] = v11;
    v9[3] = v12;
    a1 = (int16x8_t *)((char *)a1 + v6 + v6);
    a3 = (int16x8_t *)((char *)a3 + v7 + v7);
    v9 += 4;
  }
  while (v8 < 0xE);
  sub_1BBADD3E0(v13, a5, 5);
  sub_1BBADD530(a5, v13);
}

void sub_1BBADE8E0(int16x8_t *a1, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x8_t *a5)
{
  v6[17] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  sub_1BBADD2A0(a1, a2, a3, a4, a5);
  sub_1BBADDC6C(v6, (int16x4_t *)a5, 4);
  sub_1BBADDD14((int16x4_t *)a5, v6);
}

int16x4_t sub_1BBADE954(int16x4_t *a1, uint64_t a2, int16x4_t *a3, uint64_t a4, int8x16_t *a5)
{
  int16x4_t v5 = vsub_s16(*(int16x4_t *)((char *)a1 + 2 * a2), *(int16x4_t *)((char *)a3 + 2 * a4));
  int16x4_t v6 = vsub_s16(*(int16x4_t *)((char *)a1 + 4 * a2), *(int16x4_t *)((char *)a3 + 4 * a4));
  int16x4_t v7 = vsub_s16(*(int16x4_t *)((char *)a1 + 6 * a2), *(int16x4_t *)((char *)a3 + 6 * a4));
  *(int16x4_t *)a5->i8 = vsub_s16(*a1, *a3);
  a5->u64[1] = (unint64_t)v5;
  *(int16x4_t *)a5[1].i8 = v6;
  a5[1].u64[1] = (unint64_t)v7;
  int8x16_t v8 = a5[1];
  int16x4_t v9 = (int16x4_t)vextq_s8(*a5, *a5, 8uLL).u64[0];
  int32x2_t v10 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a5->i8, v9);
  int32x2_t v11 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a5->i8, v9);
  int16x4_t v12 = (int16x4_t)vextq_s8(v8, v8, 8uLL).u64[0];
  int32x2_t v13 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v8.i8, v12);
  *(int16x4_t *)v8.i8 = vtrn2_s16(*(int16x4_t *)v8.i8, v12);
  int16x4_t v14 = (int16x4_t)vzip1_s32(v11, *(int32x2_t *)v8.i8);
  int16x4_t v15 = (int16x4_t)vzip2_s32(v10, v13);
  int16x4_t v16 = (int16x4_t)vzip2_s32(v11, *(int32x2_t *)v8.i8);
  *(int32x2_t *)v8.i8 = vzip1_s32(v10, v13);
  int16x4_t v17 = vadd_s16(v16, *(int16x4_t *)v8.i8);
  int16x4_t v18 = vsub_s16(*(int16x4_t *)v8.i8, v16);
  *(int16x4_t *)v8.i8 = vadd_s16(v15, v14);
  int16x4_t v19 = vsub_s16(v14, v15);
  return sub_1BBADDE60((int16x4_t *)a5, (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v8.i8, v17), 6uLL), 3uLL)), vrshrq_n_s32(vmlal_s16(vmull_s16(v19, (int16x4_t)0x24002400240024), v18, (int16x4_t)0x53005300530053), 3uLL)), (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubl_s16(v17, *(int16x4_t *)v8.i8), 6uLL), 3uLL)), vrshrq_n_s32(vmlsl_s16(vmull_s16(v18, (int16x4_t)0x24002400240024), v19, (int16x4_t)0x53005300530053), 3uLL)));
}

int16x4_t sub_1BBADEA34(int16x4_t *a1, uint64_t a2, int16x4_t *a3, uint64_t a4, int8x16_t *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int16x4_t v6 = vsub_s16(*(int16x4_t *)((char *)a1 + 2 * a2), *(int16x4_t *)((char *)a3 + 2 * a4));
  int16x4_t v7 = vsub_s16(*(int16x4_t *)((char *)a1 + 4 * a2), *(int16x4_t *)((char *)a3 + 4 * a4));
  int16x4_t v8 = vsub_s16(*(int16x4_t *)((char *)a1 + 6 * a2), *(int16x4_t *)((char *)a3 + 6 * a4));
  *(int16x4_t *)a5->i8 = vsub_s16(*a1, *a3);
  a5->u64[1] = (unint64_t)v6;
  *(int16x4_t *)a5[1].i8 = v7;
  a5[1].u64[1] = (unint64_t)v8;
  sub_1BBADEB04((int16x4_t *)v12, 3, *a5, a5[1]);
  int8x16_t v9 = (int8x16_t)v12[0];
  int8x16_t v10 = (int8x16_t)v12[1];

  return sub_1BBADEBA8((int16x4_t *)a5, v9, v10);
}

int16x4_t sub_1BBADEB04(int16x4_t *a1, int a2, int8x16_t a3, int8x16_t a4)
{
  int16x4_t v4 = (int16x4_t)vextq_s8(a3, a3, 8uLL).u64[0];
  int32x2_t v5 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a3.i8, v4);
  int32x2_t v6 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a3.i8, v4);
  int16x4_t v7 = (int16x4_t)vextq_s8(a4, a4, 8uLL).u64[0];
  int32x2_t v8 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a4.i8, v7);
  int32x2_t v9 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a4.i8, v7);
  int16x4_t v10 = (int16x4_t)vzip1_s32(v5, v8);
  int16x4_t v11 = (int16x4_t)vzip2_s32(v6, v9);
  int16x4_t v12 = vadd_s16(v10, v11);
  int16x4_t v13 = (int16x4_t)vzip1_s32(v6, v9);
  int16x4_t v14 = vadd_s16(v13, v11);
  int16x4_t v15 = vsub_s16(v10, v13);
  int16x4_t v16 = (int16x4_t)vzip2_s32(v5, v8);
  int32x4_t v17 = vmlal_s16(vmlal_s16(vmull_s16(v12, (int16x4_t)0x1D001D001D001DLL), v16, (int16x4_t)0x4A004A004A004ALL), v14, (int16x4_t)0x37003700370037);
  int32x4_t v18 = vmlal_s16(vmlsl_s16(vmull_s16(v12, (int16x4_t)0x37003700370037), v16, (int16x4_t)0x4A004A004A004ALL), v15, (int16x4_t)0x1D001D001D001DLL);
  int32x4_t v19 = vmlsl_s16(vmlal_s16(vmull_s16(v15, (int16x4_t)0x37003700370037), v16, (int16x4_t)0x4A004A004A004ALL), v14, (int16x4_t)0x1D001D001D001DLL);
  int32x4_t v20 = vdupq_n_s32(-a2);
  *a1 = vqmovn_s32(vrshlq_s32(v17, v20));
  a1[1] = vqmovn_s32(vrshlq_s32(vmull_s16(vsub_s16(vadd_s16(v10, v13), v11), (int16x4_t)0x4A004A004A004ALL), v20));
  int16x4_t result = vqmovn_s32(vrshlq_s32(v19, v20));
  a1[2] = vqmovn_s32(vrshlq_s32(v18, v20));
  a1[3] = result;
  return result;
}

int16x4_t sub_1BBADEBA8(int16x4_t *a1, int8x16_t a2, int8x16_t a3)
{
  int16x4_t v3 = (int16x4_t)vextq_s8(a2, a2, 8uLL).u64[0];
  int32x2_t v4 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a2.i8, v3);
  int32x2_t v5 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a2.i8, v3);
  int16x4_t v6 = (int16x4_t)vextq_s8(a3, a3, 8uLL).u64[0];
  int32x2_t v7 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a3.i8, v6);
  int32x2_t v8 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a3.i8, v6);
  int16x4_t v9 = (int16x4_t)vzip1_s32(v4, v7);
  int16x4_t v10 = (int16x4_t)vzip1_s32(v5, v8);
  int16x4_t v11 = (int16x4_t)vzip2_s32(v4, v7);
  int16x4_t v12 = (int16x4_t)vzip2_s32(v5, v8);
  int32x4_t v13 = vaddl_s16(v9, v12);
  int32x4_t v14 = vaddl_s16(v10, v12);
  int32x4_t v15 = vsubl_s16(v9, v10);
  v16.i64[0] = 0x4A0000004ALL;
  v16.i64[1] = 0x4A0000004ALL;
  v17.i64[0] = 0x1D0000001DLL;
  v17.i64[1] = 0x1D0000001DLL;
  v18.i64[0] = 0x3700000037;
  v18.i64[1] = 0x3700000037;
  int32x4_t v19 = vmlaq_s32(vmlal_s16(vmulq_s32(v14, v18), v11, (int16x4_t)0x4A004A004A004ALL), v13, v17);
  int32x4_t v20 = vmlaq_s32(vmlsl_s16(vmulq_s32(v15, v17), v11, (int16x4_t)0x4A004A004A004ALL), v13, v18);
  int32x4_t v21 = vmulq_s32(v15, v18);
  v15.i64[0] = 0x1C0000001CLL;
  v15.i64[1] = 0x1C0000001CLL;
  *a1 = vqmovn_s32(vrshrq_n_s32(v19, 8uLL));
  a1[1] = vqmovn_s32(vrshrq_n_s32(vmulq_s32(vsubw_s16(vaddl_s16(v9, v10), v12), v16), 8uLL));
  int16x4_t result = vqmovn_s32(vrshrq_n_s32(vmlaq_s32(vmlal_s16(v21, v11, (int16x4_t)0x4A004A004A004ALL), v14, v15), 8uLL));
  a1[2] = vqmovn_s32(vrshrq_n_s32(v20, 8uLL));
  a1[3] = result;
  return result;
}

int8x8_t sub_1BBADEC4C(__int32 *a1, uint64_t a2, uint64_t a3)
{
  int16x8_t v3 = *(int16x8_t *)(a3 + 16);
  int32x4_t v4 = vaddl_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)a3);
  int32x4_t v5 = vaddw_high_s16(vmovl_s16(*(int16x4_t *)v3.i8), v3);
  int32x4_t v6 = vsubw_high_s16(vmovl_s16(*(int16x4_t *)a3), v3);
  v7.i64[0] = 0x4A004A004A004ALL;
  v7.i64[1] = 0x4A004A004A004ALL;
  v8.i64[0] = 0x1D0000001DLL;
  v8.i64[1] = 0x1D0000001DLL;
  v9.i64[0] = 0x3700000037;
  v9.i64[1] = 0x3700000037;
  int32x4_t v10 = vmlaq_s32(vmlal_high_s16(vmulq_s32(v5, v9), *(int16x8_t *)a3, v7), v4, v8);
  int32x4_t v11 = vmlaq_s32(vmlsl_high_s16(vmulq_s32(v6, v8), *(int16x8_t *)a3, v7), v4, v9);
  v4.i64[0] = 0x1C0000001CLL;
  v4.i64[1] = 0x1C0000001CLL;
  int32x4_t v12 = vmlaq_s32(vmlal_high_s16(vmulq_s32(v6, v9), *(int16x8_t *)a3, v7), v5, v4);
  int32x4_t v13 = vaddw_high_s16(vsubl_s16(*(int16x4_t *)a3, *(int16x4_t *)v3.i8), v3);
  v3.i64[0] = 0x4A0000004ALL;
  v3.i64[1] = 0x4A0000004ALL;
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v10, 7uLL);
  *(int16x4_t *)v12.i8 = vqrshrn_n_s32(v12, 7uLL);
  *(int16x4_t *)v13.i8 = vqrshrn_n_s32(vmulq_s32(v13, (int32x4_t)v3), 7uLL);
  *(int16x4_t *)v7.i8 = vqrshrn_n_s32(v11, 7uLL);
  *(int16x4_t *)v10.i8 = vtrn1_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v12.i8);
  *(int16x4_t *)v12.i8 = vtrn2_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v12.i8);
  *(int16x4_t *)v5.i8 = vtrn1_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v7.i8);
  *(int16x4_t *)v13.i8 = vtrn2_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v7.i8);
  *(int32x2_t *)v7.i8 = vzip1_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v5.i8);
  *(int32x2_t *)v5.i8 = vzip2_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v5.i8);
  int32x4_t v14 = vaddl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v5.i8);
  *(int32x2_t *)v11.i8 = vzip2_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
  int32x4_t v15 = vaddl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v11.i8);
  int32x4_t v16 = vsubl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v11.i8);
  *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
  int32x4_t v17 = vmlaq_s32(vmlal_s16(vmulq_s32(v15, v9), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v14, v8);
  int32x4_t v18 = vmlaq_s32(vmlsl_s16(vmulq_s32(v16, v8), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v14, v9);
  int32x4_t v19 = vmlaq_s32(vmlal_s16(vmulq_s32(v16, v9), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v15, v4);
  int32x4_t v20 = vmulq_s32(vaddw_s16(vsubl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v5.i8), *(int16x4_t *)v11.i8), (int32x4_t)v3);
  *(int16x4_t *)v3.i8 = vqrshrn_n_s32(v17, 0xCuLL);
  *(int16x4_t *)v17.i8 = vqrshrn_n_s32(v19, 0xCuLL);
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v20, 0xCuLL);
  *(int16x4_t *)v4.i8 = vqrshrn_n_s32(v18, 0xCuLL);
  vst4_s16((__int16 *)a3, *(int16x4x4_t *)v3.i8);
  v20.i32[0] = *a1;
  v20.i32[1] = *(__int32 *)((char *)a1 + a2);
  int32x4_t v21 = (__int32 *)((char *)a1 + 3 * a2);
  v3.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v3.i32[1] = *v21;
  uint16x8_t v22 = *(uint16x8_t *)(a3 + 16);
  *(int8x8_t *)v20.i8 = vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)a3, *(uint8x8_t *)v20.i8));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *a1 = v20.i32[0];
  *(__int32 *)((char *)a1 + a2) = v20.i32[1];
  int8x8_t result = vqmovun_s16((int16x8_t)vaddw_u8(v22, *(uint8x8_t *)v3.i8));
  *(__int32 *)((char *)a1 + 2 * a2) = result.i32[0];
  *int32x4_t v21 = result.i32[1];
  return result;
}

int16x8_t sub_1BBADED7C(int16x8_t *a1)
{
  int16x8_t result = vrshrq_n_s16(*a1, 5uLL);
  int16x8_t v2 = vrshrq_n_s16(a1[1], 5uLL);
  *a1 = result;
  a1[1] = v2;
  return result;
}

int16x8_t sub_1BBADED90(int16x8_t *a1)
{
  int16x8_t result = vshlq_n_s16(*a1, 5uLL);
  int16x8_t v2 = vshlq_n_s16(a1[1], 5uLL);
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint16x8_t sub_1BBADEDA4(const char *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  do
  {
    int8x16x2_t v12 = vld2q_s8(a1);
    a1 += a2;
    int8x16x2_t v13 = vld2q_s8(a3);
    a3 += a4;
    int16x8_t v7 = (uint16x8_t *)(a5 + v6);
    int32x4_t v8 = (uint16x8_t *)(a6 + v6);
    uint16x8_t v9 = vsubl_u8(*(uint8x8_t *)v12.val[0].i8, *(uint8x8_t *)v13.val[0].i8);
    uint16x8_t v10 = vsubl_high_u8((uint8x16_t)v12.val[0], (uint8x16_t)v13.val[0]);
    uint16x8_t result = vsubl_high_u8((uint8x16_t)v12.val[1], (uint8x16_t)v13.val[1]);
    *int16x8_t v7 = v9;
    v7[1] = v10;
    *int32x4_t v8 = vsubl_u8(*(uint8x8_t *)v12.val[1].i8, *(uint8x8_t *)v13.val[1].i8);
    v8[1] = result;
    v6 += 32;
  }
  while (v6 != 512);
  return result;
}

uint16x8_t sub_1BBADEDE0(const char *a1, uint64_t a2, const char *a3, uint64_t a4, uint16x8_t *a5, uint16x8_t *a6)
{
  unsigned int v8 = -2;
  do
  {
    uint16x8_t v9 = &a1[a2];
    int8x8x2_t v13 = vld2_s8(a1);
    uint64_t v6 = 2 * a2;
    a1 += v6;
    int8x8x2_t v14 = vld2_s8(v9);
    uint16x8_t v10 = &a3[a4];
    int8x8x2_t v15 = vld2_s8(a3);
    uint64_t v7 = 2 * a4;
    a3 += v7;
    int8x8x2_t v16 = vld2_s8(v10);
    uint16x8_t v11 = vsubl_u8((uint8x8_t)v13.val[0], (uint8x8_t)v15.val[0]);
    uint16x8_t result = vsubl_u8((uint8x8_t)v13.val[1], (uint8x8_t)v15.val[1]);
    *a5 = v11;
    a5[1] = vsubl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v16.val[0]);
    a5 += 2;
    *a6 = result;
    a6[1] = vsubl_u8((uint8x8_t)v14.val[1], (uint8x8_t)v16.val[1]);
    a6 += 2;
    v8 += 2;
  }
  while (v8 < 6);
  return result;
}

uint16x8_t sub_1BBADEE2C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint16x8_t *a5, uint16x8_t *a6)
{
  v6.i64[0] = *(uint64_t *)((char *)a1 + 2 * a2);
  v7.i64[0] = *a1;
  v8.i64[0] = *(uint64_t *)((char *)a3 + 2 * a4);
  v9.i64[0] = *a3;
  v7.i64[1] = *(uint64_t *)((char *)a1 + a2);
  v6.i64[1] = *(uint64_t *)((char *)a1 + 3 * a2);
  v9.i64[1] = *(uint64_t *)((char *)a3 + a4);
  v8.i64[1] = *(uint64_t *)((char *)a3 + 3 * a4);
  uint8x16_t v10 = (uint8x16_t)vuzp1q_s8(v7, v6);
  uint8x16_t v11 = (uint8x16_t)vuzp2q_s8(v7, v6);
  uint8x16_t v12 = (uint8x16_t)vuzp1q_s8(v9, v8);
  uint8x16_t v13 = (uint8x16_t)vuzp2q_s8(v9, v8);
  *a5 = vsubl_u8(*(uint8x8_t *)v10.i8, *(uint8x8_t *)v12.i8);
  a5[1] = vsubl_high_u8(v10, v12);
  uint16x8_t result = vsubl_high_u8(v11, v13);
  *a6 = vsubl_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v13.i8);
  a6[1] = result;
  return result;
}

uint16x8_t sub_1BBADEE98(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  int8x16_t v6 = a1 + 2;
  int8x16_t v7 = a3 + 2;
  do
  {
    int8x16_t v8 = (uint16x8_t *)(a5 + v5);
    uint8x16_t v9 = *(uint8x16_t *)v6[-2].i8;
    uint8x16_t v10 = *(uint8x16_t *)v7[-2].i8;
    uint16x8_t v11 = vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v10.i8);
    uint16x8_t result = vsubl_high_u8(v9, v10);
    uint16x8_t v13 = vsubl_u8(*v6, *v7);
    uint16x8_t v14 = vsubl_high_u8(*(uint8x16_t *)v6->i8, *(uint8x16_t *)v7->i8);
    *int8x16_t v8 = v11;
    v8[1] = result;
    v8[2] = v13;
    v8[3] = v14;
    v5 += 64;
    int8x16_t v6 = (uint8x8_t *)((char *)v6 + a2);
    int8x16_t v7 = (uint8x8_t *)((char *)v7 + a4);
  }
  while (v5 != 2048);
  return result;
}

uint8x16_t *sub_1BBADEEE0(uint8x16_t *result, uint64_t a2, uint8x16_t *a3, uint64_t a4, uint16x8_t *a5)
{
  unsigned int v5 = -2;
  do
  {
    uint8x16_t v6 = *(uint8x16_t *)((char *)result + a2);
    uint8x16_t v7 = *(uint8x16_t *)((char *)a3 + a4);
    uint16x8_t v8 = vsubl_high_u8(*result, *a3);
    *a5 = vsubl_u8(*(uint8x8_t *)result->i8, *(uint8x8_t *)a3->i8);
    a5[1] = v8;
    a5[2] = vsubl_u8(*(uint8x8_t *)v6.i8, *(uint8x8_t *)v7.i8);
    a5[3] = vsubl_high_u8(v6, v7);
    uint16x8_t result = (uint8x16_t *)((char *)result + 2 * a2);
    a3 = (uint8x16_t *)((char *)a3 + 2 * a4);
    v5 += 2;
    a5 += 4;
  }
  while (v5 < 0xE);
  return result;
}

uint8x8_t *sub_1BBADEF30(uint8x8_t *result, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint16x8_t *a5)
{
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint8x16_t v7 = (uint8x8_t *)((char *)result + a2 + a2);
    uint8x8_t v8 = *v7;
    uint8x16_t v9 = (uint8x8_t *)((char *)v7 + a2);
    uint8x16_t v10 = (uint8x8_t *)((char *)a3 + a4 + a4);
    uint8x8_t v11 = *v10;
    uint8x16_t v12 = (uint8x8_t *)((char *)v10 + a4);
    uint16x8_t v13 = vsubl_u8(*(uint8x8_t *)((char *)result + a2), *(uint8x8_t *)((char *)a3 + a4));
    uint16x8_t v14 = vsubl_u8(*v9, *v12);
    *a5 = vsubl_u8(*result, *a3);
    a5[1] = v13;
    a5[2] = vsubl_u8(v8, v11);
    a5[3] = v14;
    uint16x8_t result = (uint8x8_t *)((char *)v9 + a2);
    a3 = (uint8x8_t *)((char *)v12 + a4);
    a5 += 4;
    char v5 = 0;
  }
  while ((v6 & 1) != 0);
  return result;
}

uint16x8_t sub_1BBADEFA0(__int32 *a1, uint64_t a2, __int32 *a3, uint64_t a4, uint16x8_t *a5)
{
  v5.i32[0] = *a1;
  v5.i32[1] = *(__int32 *)((char *)a1 + a2);
  v6.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v6.i32[1] = *(__int32 *)((char *)a1 + 3 * a2);
  v7.i32[0] = *a3;
  v7.i32[1] = *(__int32 *)((char *)a3 + a4);
  v8.i32[0] = *(__int32 *)((char *)a3 + 2 * a4);
  v8.i32[1] = *(__int32 *)((char *)a3 + 3 * a4);
  uint16x8_t result = vsubl_u8(v5, v7);
  *a5 = result;
  a5[1] = vsubl_u8(v6, v8);
  return result;
}

void sub_1BBADEFF0(int16x4_t *a1)
{
  v2[65] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  sub_1BBADD3E0(v2, a1, 3);
  sub_1BBADD530(a1, v2);
}

void sub_1BBADF060(int16x4_t *a1)
{
  v2[17] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  sub_1BBADDC6C(v2, a1, 2);
  sub_1BBADDD14(a1, v2);
}

int16x4_t sub_1BBADF0D0(int8x16_t *a1)
{
  int8x16_t v1 = a1[1];
  int16x4_t v2 = (int16x4_t)vextq_s8(*a1, *a1, 8uLL).u64[0];
  int32x2_t v3 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a1->i8, v2);
  int32x2_t v4 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a1->i8, v2);
  int16x4_t v5 = (int16x4_t)vextq_s8(v1, v1, 8uLL).u64[0];
  int32x2_t v6 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v1.i8, v5);
  *(int16x4_t *)v1.i8 = vtrn2_s16(*(int16x4_t *)v1.i8, v5);
  int16x4_t v7 = (int16x4_t)vzip1_s32(v4, *(int32x2_t *)v1.i8);
  int16x4_t v8 = (int16x4_t)vzip2_s32(v3, v6);
  int16x4_t v9 = (int16x4_t)vzip2_s32(v4, *(int32x2_t *)v1.i8);
  *(int32x2_t *)v1.i8 = vzip1_s32(v3, v6);
  int16x4_t v10 = vadd_s16(v9, *(int16x4_t *)v1.i8);
  int16x4_t v11 = vsub_s16(*(int16x4_t *)v1.i8, v9);
  *(int16x4_t *)v1.i8 = vadd_s16(v8, v7);
  int16x4_t v12 = vsub_s16(v7, v8);
  return sub_1BBADDE60((int16x4_t *)a1, (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v1.i8, v10), 6uLL), 1uLL)), vrshrq_n_s32(vmlal_s16(vmull_s16(v12, (int16x4_t)0x24002400240024), v11, (int16x4_t)0x53005300530053), 1uLL)), (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubl_s16(v10, *(int16x4_t *)v1.i8), 6uLL), 1uLL)), vrshrq_n_s32(vmlsl_s16(vmull_s16(v11, (int16x4_t)0x24002400240024), v12, (int16x4_t)0x53005300530053), 1uLL)));
}

void sub_1BBADF158(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, int16x4_t *a5)
{
  uint64_t v6 = 0;
  v16[257] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  int16x4_t v7 = a1 + 2;
  int16x4_t v8 = a3 + 2;
  do
  {
    int16x4_t v9 = (uint16x8_t *)&a5[v6];
    uint8x16_t v10 = *(uint8x16_t *)v7[-2].i8;
    uint8x16_t v11 = *(uint8x16_t *)v8[-2].i8;
    uint16x8_t v12 = vsubl_u8(*(uint8x8_t *)v10.i8, *(uint8x8_t *)v11.i8);
    uint16x8_t v13 = vsubl_high_u8(v10, v11);
    uint16x8_t v14 = vsubl_u8(*v7, *v8);
    uint16x8_t v15 = vsubl_high_u8(*(uint8x16_t *)v7->i8, *(uint8x16_t *)v8->i8);
    *int16x4_t v9 = v12;
    v9[1] = v13;
    v9[2] = v14;
    v9[3] = v15;
    v6 += 8;
    int16x4_t v7 = (uint8x8_t *)((char *)v7 + a2);
    int16x4_t v8 = (uint8x8_t *)((char *)v8 + a4);
  }
  while ((v6 * 8) != 2048);
  sub_1BBADDFB4(v16, a5, 4);
  sub_1BBADE1EC(a5, v16);
}

void sub_1BBADF20C(uint8x16_t *a1, uint64_t a2, uint8x16_t *a3, uint64_t a4, int16x4_t *a5)
{
  v11[65] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  unsigned int v6 = -2;
  int16x4_t v7 = (uint16x8_t *)a5;
  do
  {
    uint8x16_t v8 = *(uint8x16_t *)((char *)a1 + a2);
    uint8x16_t v9 = *(uint8x16_t *)((char *)a3 + a4);
    uint16x8_t v10 = vsubl_high_u8(*a1, *a3);
    *int16x4_t v7 = vsubl_u8(*(uint8x8_t *)a1->i8, *(uint8x8_t *)a3->i8);
    v7[1] = v10;
    v7[2] = vsubl_u8(*(uint8x8_t *)v8.i8, *(uint8x8_t *)v9.i8);
    v7[3] = vsubl_high_u8(v8, v9);
    a1 = (uint8x16_t *)((char *)a1 + 2 * a2);
    a3 = (uint8x16_t *)((char *)a3 + 2 * a4);
    v6 += 2;
    v7 += 4;
  }
  while (v6 < 0xE);
  sub_1BBADD3E0(v11, a5, 3);
  sub_1BBADD530(a5, v11);
}

void sub_1BBADF2CC(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, int16x4_t *a5)
{
  v17[17] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  char v6 = 1;
  int16x4_t v7 = (uint16x8_t *)a5;
  do
  {
    char v8 = v6;
    uint8x16_t v9 = (uint8x8_t *)((char *)a1 + a2 + a2);
    uint8x8_t v10 = *v9;
    uint8x16_t v11 = (uint8x8_t *)((char *)v9 + a2);
    uint16x8_t v12 = (uint8x8_t *)((char *)a3 + a4 + a4);
    uint8x8_t v13 = *v12;
    uint16x8_t v14 = (uint8x8_t *)((char *)v12 + a4);
    uint16x8_t v15 = vsubl_u8(*(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4));
    uint16x8_t v16 = vsubl_u8(*v11, *v14);
    *int16x4_t v7 = vsubl_u8(*a1, *a3);
    v7[1] = v15;
    v7[2] = vsubl_u8(v10, v13);
    v7[3] = v16;
    a1 = (uint8x8_t *)((char *)v11 + a2);
    a3 = (uint8x8_t *)((char *)v14 + a4);
    v7 += 4;
    char v6 = 0;
  }
  while ((v8 & 1) != 0);
  sub_1BBADDC6C(v17, a5, 2);
  sub_1BBADDD14(a5, v17);
}

int16x4_t sub_1BBADF3AC(__int32 *a1, uint64_t a2, __int32 *a3, uint64_t a4, uint64_t a5)
{
  v5.i32[0] = *a1;
  v5.i32[1] = *(__int32 *)((char *)a1 + a2);
  v6.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v6.i32[1] = *(__int32 *)((char *)a1 + 3 * a2);
  v7.i32[0] = *a3;
  v7.i32[1] = *(__int32 *)((char *)a3 + a4);
  v8.i32[0] = *(__int32 *)((char *)a3 + 2 * a4);
  v8.i32[1] = *(__int32 *)((char *)a3 + 3 * a4);
  int8x16_t v9 = (int8x16_t)vsubl_u8(v5, v7);
  int8x16_t v10 = (int8x16_t)vsubl_u8(v6, v8);
  *(int8x16_t *)a5 = v9;
  *(int8x16_t *)(a5 + 16) = v10;
  int16x4_t v11 = (int16x4_t)vextq_s8(v9, v9, 8uLL).u64[0];
  int32x2_t v12 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v9.i8, v11);
  *(int16x4_t *)v9.i8 = vtrn2_s16(*(int16x4_t *)v9.i8, v11);
  int16x4_t v13 = (int16x4_t)vextq_s8(v10, v10, 8uLL).u64[0];
  int32x2_t v14 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v10.i8, v13);
  *(int16x4_t *)v10.i8 = vtrn2_s16(*(int16x4_t *)v10.i8, v13);
  int16x4_t v15 = (int16x4_t)vzip1_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v10.i8);
  int16x4_t v16 = (int16x4_t)vzip2_s32(v12, v14);
  *(int32x2_t *)v9.i8 = vzip2_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v10.i8);
  *(int32x2_t *)v10.i8 = vzip1_s32(v12, v14);
  int16x4_t v17 = vadd_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v10.i8);
  *(int16x4_t *)v9.i8 = vsub_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
  *(int16x4_t *)v10.i8 = vadd_s16(v16, v15);
  int16x4_t v18 = vsub_s16(v15, v16);
  return sub_1BBADDE60((int16x4_t *)a5, (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v10.i8, v17), 6uLL), 1uLL)), vrshrq_n_s32(vmlal_s16(vmull_s16(v18, (int16x4_t)0x24002400240024), *(int16x4_t *)v9.i8, (int16x4_t)0x53005300530053), 1uLL)), (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubl_s16(v17, *(int16x4_t *)v10.i8), 6uLL), 1uLL)), vrshrq_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v9.i8, (int16x4_t)0x24002400240024), v18, (int16x4_t)0x53005300530053), 1uLL)));
}

int16x4_t sub_1BBADF480(__int32 *a1, uint64_t a2, __int32 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v6.i32[0] = *a1;
  v6.i32[1] = *(__int32 *)((char *)a1 + a2);
  v7.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v7.i32[1] = *(__int32 *)((char *)a1 + 3 * a2);
  v8.i32[0] = *a3;
  v8.i32[1] = *(__int32 *)((char *)a3 + a4);
  v9.i32[0] = *(__int32 *)((char *)a3 + 2 * a4);
  v9.i32[1] = *(__int32 *)((char *)a3 + 3 * a4);
  int8x16_t v10 = (int8x16_t)vsubl_u8(v6, v8);
  int8x16_t v11 = (int8x16_t)vsubl_u8(v7, v9);
  *(int8x16_t *)a5 = v10;
  *(int8x16_t *)(a5 + 16) = v11;
  sub_1BBADEB04((int16x4_t *)v15, 1, v10, v11);
  int8x16_t v12 = (int8x16_t)v15[0];
  int8x16_t v13 = (int8x16_t)v15[1];

  return sub_1BBADEBA8((int16x4_t *)a5, v12, v13);
}

void sub_1BBADF544(uint64_t *a1, int *a2, uint64_t *a3, int *a4, signed int a5, int a6, int a7, int a8, int a9, signed int a10)
{
  uint64_t v243 = *MEMORY[0x1E4F143B8];
  int v204 = (a9 + 31) >> 5;
  int v199 = a8 + 31;
  int v195 = a8 + 7;
  int v11 = (a8 + 7) >> 5;
  int v12 = (a9 + 7) >> 5;
  uint64_t v202 = *a4;
  int v200 = 4 * v202;
  uint64_t v235 = *a2;
  int v201 = 4 * v235;
  uint64_t v236 = a2[1];
  int v203 = 2 * v236;
  uint64_t v209 = a2[2];
  int v224 = a6 >> 5;
  uint64_t v197 = 2 * (a6 >> 5);
  uint64_t v198 = 4 * (a6 >> 5);
  int v208 = a7 >> 5;
  int v212 = v11;
  int v210 = v12;
  if (a7 >> 5 < v12)
  {
    int v13 = a7 >> 5;
    uint64_t v223 = (int)v198 + v201 * v208;
    uint64_t v222 = (int)v197 + v203 * v208;
    uint64_t v221 = v224 + (int)v209 * v208;
    uint64_t v14 = 4 * ((int)v198 + v200 * v208);
    uint64_t v219 = 12 * v202 + v14;
    uint64_t v220 = v14;
    uint64_t v207 = 4 * v200;
    uint64_t v218 = 8 * v202 + v14;
    uint64_t v217 = 4 * v202 + v14;
    uint64_t v216 = 3 * v235 + v223;
    uint64_t v215 = 2 * v235 + v223;
    uint64_t v214 = v235 + v223;
    int v15 = v11 - v224;
    uint64_t v213 = v236 + v222;
    do
    {
      int v211 = v13;
      if (v11 > v224)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a1[1];
        uint64_t v234 = *a3 + v219;
        uint64_t v233 = *a3 + v218;
        uint64_t v231 = *a3 + v217;
        uint64_t v229 = *a3 + v220;
        uint64_t v227 = *a1 + v216;
        uint64_t v225 = *a1 + v215;
        uint64_t v18 = *a1 + v214;
        uint64_t v19 = *a1 + v223;
        uint64_t v20 = v17 + v213;
        uint64_t v21 = v17 + v222;
        uint64_t v22 = a1[2] + v221;
        do
        {
          int32x4_t v23 = *(int32x4_t *)(v229 + 16 * v16);
          int32x4_t v24 = *(int32x4_t *)(v231 + 16 * v16);
          int32x4_t v25 = *(int32x4_t *)(v233 + 16 * v16);
          int32x4_t v26 = *(int32x4_t *)(v234 + 16 * v16);
          int32x4_t v237 = vaddq_s32(v26, v25);
          int32x4_t v238 = vaddq_s32(v24, v23);
          double v27 = sub_1BBAE0354(a5, a10, (uint16x8_t)vuzp1q_s16((int16x8_t)v23, (int16x8_t)v24), (uint16x8_t)vuzp1q_s16((int16x8_t)v25, (int16x8_t)v26));
          *(_DWORD *)(v19 + 4 * v16) = LODWORD(v27);
          *(_DWORD *)(v18 + 4 * v16) = HIDWORD(v27);
          *(_DWORD *)(v225 + 4 * v16) = v28;
          *(_DWORD *)(v227 + 4 * v16) = v29;
          int32x4_t v30 = vpaddq_s32(v238, v237);
          unsigned int v31 = (vaddvq_s32(v30) + 8) >> 4;
          *(int16x4_t *)v30.i8 = vmovn_s32((int32x4_t)vrshrq_n_u32((uint32x4_t)v30, 2uLL));
          v30.u64[1] = (unint64_t)vdup_n_s16(v31);
          int8x8_t v32 = sub_1BBAE05F0(a5, a10, (uint16x8_t)v30);
          *(_WORD *)(v21 + 2 * v16) = v32.i16[0];
          *(_WORD *)(v20 + 2 * v16) = v32.i16[1];
          *(unsigned char *)(v22 + v16++) = v32.i8[4];
        }
        while (v15 != v16);
      }
      v223 += v201;
      v222 += v203;
      v221 += v209;
      int v13 = v211 + 1;
      v219 += v207;
      v218 += v207;
      v217 += v207;
      v220 += v207;
      v216 += v201;
      v215 += v201;
      v214 += v201;
      int v11 = v212;
      v213 += v203;
      int v12 = v210;
    }
    while (v211 + 1 != v210);
  }
  int v232 = (a9 + 15) >> 4;
  int v230 = (a9 + 7) >> 3;
  if (v12 != v204 && v11 > v224)
  {
    int16x4_t v33 = (unsigned char *)(a1[2] + (int)v209 * (uint64_t)v210 + ((uint64_t)a6 >> 5));
    uint64_t v34 = a1[1] + v203 * (uint64_t)v210 + v197;
    uint64_t v35 = *a3 + 4 * v200 * v210 + 4 * v198;
    int v36 = v230 - 4 * v210;
    uint64_t v37 = (v232 - 2 * v210);
    uint64_t v38 = *a1 + v201 * (uint64_t)v210 + v198;
    signed int v39 = a10 << 8;
    int v40 = -a10;
    *(void *)&long long v41 = -1;
    *((void *)&v41 + 1) = -1;
    do
    {
      long long v241 = v41;
      long long v242 = v41;
      long long v239 = v41;
      long long v240 = v41;
      if (v36 < 1)
      {
        int v43 = 0;
      }
      else
      {
        int v42 = 0;
        int v43 = 0;
        int16x4_t v44 = &v239;
        uint64_t v45 = v35;
        uint64_t v46 = v38;
        do
        {
          for (uint64_t i = 0; i != 4; ++i)
          {
            unsigned int v48 = *(_DWORD *)(v45 + 4 * i);
            *((_DWORD *)v44 + i) = v48;
            unsigned int v49 = v48;
            if (v48 >= 2)
            {
              unsigned int v50 = __clz(v48);
              if (v50) {
                unsigned int v51 = ((byte_1BBB8A634[(unint64_t)(v48 << (v50 + 1)) >> 24] << 12) | 0x200000u) >> ((v50 + 1) >> 1);
              }
              else {
                unsigned int v51 = (11585
              }
                     * (((byte_1BBB8A634[(unint64_t)(v48 << (v50 + 1)) >> 24] << 12) | 0x200000u) >> ((v50 + 1) >> 1))) >> 14;
              unsigned int v49 = (v51 + 16) >> 5;
            }
            int v52 = (int)((v49 - a5) * v39) / a5;
            int v53 = (v52 > 0) | (v52 >> 31);
            if (v52 < 0) {
              int v52 = -v52;
            }
            signed int v54 = v53 * ((v52 + 128) >> 8);
            if (v54 >= a10) {
              signed int v54 = a10;
            }
            if (v54 <= v40) {
              LOBYTE(v54) = -(char)a10;
            }
            *(unsigned char *)(v46 + i) = v54;
            v43 += v48;
          }
          ++v42;
          v46 += v235;
          ++v44;
          v45 += 4 * v202;
        }
        while (v42 != v36);
      }
      unsigned int v55 = (v43 + 2 * v36) / (4 * v36);
      if (v55 >= 2)
      {
        unsigned int v56 = __clz(v55);
        unsigned int v57 = ((byte_1BBB8A634[(unint64_t)(v55 << (v56 + 1)) >> 24] << 12) | 0x200000u) >> ((v56 + 1) >> 1);
        if ((v56 & 1) == 0) {
          unsigned int v57 = (11585 * v57) >> 14;
        }
        unsigned int v55 = (v57 + 16) >> 5;
      }
      int v58 = (int)((v55 - a5) * v39) / a5;
      int v59 = (v58 > 0) | (v58 >> 31);
      if (v58 < 0) {
        int v58 = -v58;
      }
      signed int v60 = v59 * ((v58 + 128) >> 8);
      if (v60 >= a10) {
        signed int v60 = a10;
      }
      if (v60 <= v40) {
        LOBYTE(v60) = -(char)a10;
      }
      *int16x4_t v33 = v60;
      if ((int)v37 >= 1)
      {
        for (uint64_t j = 0; j != v37; ++j)
        {
          uint64_t v62 = 0;
          char v63 = 1;
          do
          {
            uint64_t v64 = 0;
            int v65 = 0;
            int v66 = 0;
            char v67 = v63;
            char v68 = 1;
            do
            {
              uint64_t v69 = 0;
              char v70 = v68;
              uint64_t v71 = v64 | (8 * j) | (2 * v62);
              char v72 = 1;
              do
              {
                char v73 = v72;
                int v74 = *((_DWORD *)&v239 + (v69 | v71));
                BOOL v75 = v74 == -1;
                if (v74 == -1) {
                  int v74 = 0;
                }
                v66 += v74;
                if (!v75) {
                  ++v65;
                }
                uint64_t v69 = 1;
                char v72 = 0;
              }
              while ((v73 & 1) != 0);
              char v68 = 0;
              uint64_t v64 = 4;
            }
            while ((v70 & 1) != 0);
            unsigned int v76 = (v66 + (v65 >> 1)) / v65;
            if (v76 >= 2)
            {
              unsigned int v77 = __clz(v76);
              unsigned int v78 = ((byte_1BBB8A634[(unint64_t)(v76 << (v77 + 1)) >> 24] << 12) | 0x200000u) >> ((v77 + 1) >> 1);
              if ((v77 & 1) == 0) {
                unsigned int v78 = (11585 * v78) >> 14;
              }
              unsigned int v76 = (v78 + 16) >> 5;
            }
            char v63 = 0;
            int v79 = (int)((v76 - a5) * v39) / a5;
            int v80 = (v79 > 0) | (v79 >> 31);
            if (v79 < 0) {
              int v79 = -v79;
            }
            signed int v81 = v80 * ((v79 + 128) >> 8);
            if (v81 >= a10) {
              signed int v81 = a10;
            }
            if (v81 <= v40) {
              LOBYTE(v81) = -(char)a10;
            }
            *(unsigned char *)(v34 + j * v236 + v62) = v81;
            uint64_t v62 = 1;
          }
          while ((v67 & 1) != 0);
        }
      }
      v35 += 16;
      v38 += 4;
      v34 += 2;
      ++v33;
      int v11 = v212;
      ++v224;
    }
    while (v224 != v212);
  }
  int v82 = v210;
  if (v11 != v199 >> 5)
  {
    int v226 = (a8 + 15) >> 4;
    int v228 = v195 >> 3;
    signed int v83 = a10 << 8;
    if (v208 < v210)
    {
      int32x2_t v84 = (unsigned char *)(a1[2] + v212);
      uint64_t v85 = a1[1] + 2 * v212;
      int v86 = v228 - 4 * v212;
      uint64_t v87 = (v226 - 2 * v212);
      int v88 = -a10;
      *(void *)&long long v89 = -1;
      *((void *)&v89 + 1) = -1;
      uint64_t v90 = *a1 + 4 * v212;
      uint64_t v91 = *a3 + 16 * v212;
      do
      {
        int v92 = 0;
        int v93 = 0;
        long long v241 = v89;
        long long v242 = v89;
        int32x2_t v94 = (unsigned int *)&v239;
        int32x2_t v95 = (unsigned int *)v91;
        int32x2_t v96 = (unsigned char *)v90;
        long long v239 = v89;
        long long v240 = v89;
        do
        {
          int32x2_t v97 = v95;
          BOOL v98 = v94;
          int16x8_t v99 = v96;
          uint64_t v100 = (v228 - 4 * v212);
          if (v86 >= 1)
          {
            do
            {
              unsigned int v102 = *v97++;
              unsigned int v101 = v102;
              unsigned int *v98 = v102;
              unsigned int v103 = v102;
              if (v102 >= 2)
              {
                unsigned int v104 = __clz(v101);
                if (v104) {
                  unsigned int v105 = ((byte_1BBB8A634[(unint64_t)(v101 << (v104 + 1)) >> 24] << 12) | 0x200000u) >> ((v104 + 1) >> 1);
                }
                else {
                  unsigned int v105 = (11585
                }
                        * (((byte_1BBB8A634[(unint64_t)(v101 << (v104 + 1)) >> 24] << 12) | 0x200000u) >> ((v104 + 1) >> 1))) >> 14;
                unsigned int v103 = (v105 + 16) >> 5;
              }
              int v106 = (int)((v103 - a5) * v83) / a5;
              int v107 = (v106 > 0) | (v106 >> 31);
              if (v106 < 0) {
                int v106 = -v106;
              }
              signed int v108 = v107 * ((v106 + 128) >> 8);
              if (v108 >= a10) {
                signed int v108 = a10;
              }
              if (v108 <= v88) {
                LOBYTE(v108) = -(char)a10;
              }
              *v99++ = v108;
              v93 += v101;
              ++v98;
              --v100;
            }
            while (v100);
          }
          ++v92;
          v96 += v235;
          v94 += 4;
          v95 += v202;
        }
        while (v92 != 4);
        unsigned int v109 = (v93 + 2 * v86) / (4 * v86);
        if (v109 >= 2)
        {
          unsigned int v110 = __clz(v109);
          unsigned int v111 = ((byte_1BBB8A634[(unint64_t)(v109 << (v110 + 1)) >> 24] << 12) | 0x200000u) >> ((v110 + 1) >> 1);
          if (v110) {
            unsigned int v112 = v111;
          }
          else {
            unsigned int v112 = (11585 * v111) >> 14;
          }
          unsigned int v109 = (v112 + 16) >> 5;
        }
        uint64_t v113 = 0;
        int v114 = (int)((v109 - a5) * v83) / a5;
        int v115 = (v114 > 0) | (v114 >> 31);
        if (v114 < 0) {
          int v114 = -v114;
        }
        signed int v116 = v115 * ((v114 + 128) >> 8);
        if (v116 >= a10) {
          signed int v116 = a10;
        }
        if (v116 <= v88) {
          LOBYTE(v116) = -(char)a10;
        }
        *int32x2_t v84 = v116;
        char v117 = 1;
        do
        {
          char v118 = v117;
          if ((int)v87 >= 1)
          {
            uint64_t v119 = 0;
            uint64_t v120 = 8 * v113;
            uint64_t v121 = v85 + v113 * v236;
            do
            {
              uint64_t v122 = 0;
              int v123 = 0;
              int v124 = 0;
              char v125 = 1;
              do
              {
                uint64_t v126 = 0;
                char v127 = v125;
                uint64_t v128 = v120 + 2 * v119 + v122;
                char v129 = 1;
                do
                {
                  char v130 = v129;
                  int v131 = *((_DWORD *)&v239 + (v126 | v128));
                  BOOL v132 = v131 == -1;
                  if (v131 == -1) {
                    int v131 = 0;
                  }
                  v124 += v131;
                  if (!v132) {
                    ++v123;
                  }
                  uint64_t v126 = 1;
                  char v129 = 0;
                }
                while ((v130 & 1) != 0);
                char v125 = 0;
                uint64_t v122 = 4;
              }
              while ((v127 & 1) != 0);
              unsigned int v133 = (v124 + (v123 >> 1)) / v123;
              if (v133 >= 2)
              {
                unsigned int v134 = __clz(v133);
                unsigned int v135 = ((byte_1BBB8A634[(unint64_t)(v133 << (v134 + 1)) >> 24] << 12) | 0x200000u) >> ((v134 + 1) >> 1);
                if ((v134 & 1) == 0) {
                  unsigned int v135 = (11585 * v135) >> 14;
                }
                unsigned int v133 = (v135 + 16) >> 5;
              }
              int v136 = (int)((v133 - a5) * v83) / a5;
              int v137 = (v136 > 0) | (v136 >> 31);
              if (v136 < 0) {
                int v136 = -v136;
              }
              signed int v138 = v137 * ((v136 + 128) >> 8);
              if (v138 >= a10) {
                signed int v138 = a10;
              }
              if (v138 <= v88) {
                LOBYTE(v138) = -(char)a10;
              }
              *(unsigned char *)(v121 + v119++) = v138;
            }
            while (v119 != v87);
          }
          char v117 = 0;
          uint64_t v113 = 1;
        }
        while ((v118 & 1) != 0);
        v90 += v201;
        v85 += v203;
        v84 += v209;
        v91 += 4 * v200;
        int v82 = v210;
        ++v208;
      }
      while (v208 != v210);
    }
    if (v82 != v204)
    {
      uint64_t v139 = *a3;
      uint64_t v140 = *a1;
      uint64_t v141 = a1[1];
      uint64_t v142 = a1[2];
      int v143 = v230 - 4 * v82;
      *(void *)&long long v144 = -1;
      *((void *)&v144 + 1) = -1;
      long long v241 = v144;
      long long v242 = v144;
      long long v239 = v144;
      long long v240 = v144;
      uint64_t v145 = v142 + (int)v209 * (uint64_t)v82;
      int v146 = v228 - 4 * v212;
      int v147 = v143 * v146;
      if (v143 < 1)
      {
        int v149 = 0;
      }
      else
      {
        int v148 = 0;
        int v149 = 0;
        uint64_t v150 = v139 + 4 * v200 * v82 + 16 * v212;
        uint64_t v151 = v140 + v201 * (uint64_t)v82 + 4 * v212;
        int16x8_t v152 = (unsigned int *)&v239;
        do
        {
          int16x8_t v153 = (unsigned int *)v150;
          int32x4_t v154 = v152;
          int32x4_t v155 = (unsigned char *)v151;
          uint64_t v156 = (v228 - 4 * v212);
          if (v146 >= 1)
          {
            do
            {
              unsigned int v158 = *v153++;
              unsigned int v157 = v158;
              *int32x4_t v154 = v158;
              unsigned int v159 = v158;
              if (v158 >= 2)
              {
                unsigned int v160 = __clz(v157);
                if (v160) {
                  unsigned int v161 = ((byte_1BBB8A634[(unint64_t)(v157 << (v160 + 1)) >> 24] << 12) | 0x200000u) >> ((v160 + 1) >> 1);
                }
                else {
                  unsigned int v161 = (11585
                }
                        * (((byte_1BBB8A634[(unint64_t)(v157 << (v160 + 1)) >> 24] << 12) | 0x200000u) >> ((v160 + 1) >> 1))) >> 14;
                unsigned int v159 = (v161 + 16) >> 5;
              }
              int v162 = (int)(v83 * (v159 - a5)) / a5;
              int v163 = (v162 > 0) | (v162 >> 31);
              if (v162 < 0) {
                int v162 = -v162;
              }
              signed int v164 = v163 * ((v162 + 128) >> 8);
              if (v164 >= a10) {
                signed int v164 = a10;
              }
              if (v164 <= -a10) {
                LOBYTE(v164) = -(char)a10;
              }
              *v155++ = v164;
              v149 += v157;
              ++v154;
              --v156;
            }
            while (v156);
          }
          ++v148;
          v151 += v235;
          v152 += 4;
          v150 += 4 * v202;
        }
        while (v148 != v143);
      }
      uint64_t v165 = (v232 - 2 * v210);
      unsigned int v166 = (v149 + (v147 >> 1)) / v147;
      if (v166 >= 2)
      {
        unsigned int v167 = __clz(v166);
        unsigned int v168 = ((byte_1BBB8A634[(unint64_t)(v166 << (v167 + 1)) >> 24] << 12) | 0x200000u) >> ((v167 + 1) >> 1);
        if ((v167 & 1) == 0) {
          unsigned int v168 = (11585 * v168) >> 14;
        }
        unsigned int v166 = (v168 + 16) >> 5;
      }
      int v169 = (int)((v166 - a5) * v83) / a5;
      int v170 = (v169 > 0) | (v169 >> 31);
      if (v169 < 0) {
        int v169 = -v169;
      }
      signed int v171 = v170 * ((v169 + 128) >> 8);
      int v172 = -a10;
      if (v171 >= a10) {
        signed int v171 = a10;
      }
      if (v171 <= v172) {
        signed int v171 = -a10;
      }
      *(unsigned char *)(v145 + v212) = v171;
      if ((int)v165 >= 1)
      {
        uint64_t v173 = 0;
        uint64_t v174 = v141 + v203 * (uint64_t)v210 + 2 * v212;
        uint64_t v175 = (v226 - 2 * v212);
        do
        {
          if ((int)v175 >= 1)
          {
            for (uint64_t k = 0; k != v175; ++k)
            {
              uint64_t v177 = 0;
              int v178 = 0;
              int v179 = 0;
              char v180 = 1;
              do
              {
                uint64_t v181 = 0;
                char v182 = v180;
                uint64_t v183 = ((v173 << 35) + (k << 33) + v177) >> 32;
                char v184 = 1;
                do
                {
                  char v185 = v184;
                  int v186 = *((_DWORD *)&v239 + (v181 | v183));
                  BOOL v187 = v186 == -1;
                  if (v186 == -1) {
                    int v186 = 0;
                  }
                  v179 += v186;
                  if (!v187) {
                    ++v178;
                  }
                  uint64_t v181 = 1;
                  char v184 = 0;
                }
                while ((v185 & 1) != 0);
                char v180 = 0;
                uint64_t v177 = 0x400000000;
              }
              while ((v182 & 1) != 0);
              unsigned int v188 = (v179 + (v178 >> 1)) / v178;
              if (v188 >= 2)
              {
                unsigned int v189 = __clz(v188);
                unsigned int v190 = ((byte_1BBB8A634[(unint64_t)(v188 << (v189 + 1)) >> 24] << 12) | 0x200000u) >> ((v189 + 1) >> 1);
                if ((v189 & 1) == 0) {
                  unsigned int v190 = (11585 * v190) >> 14;
                }
                unsigned int v188 = (v190 + 16) >> 5;
              }
              int v191 = (int)((v188 - a5) * v83) / a5;
              int v192 = (v191 > 0) | (v191 >> 31);
              if (v191 < 0) {
                int v191 = -v191;
              }
              signed int v193 = v192 * ((v191 + 128) >> 8);
              if (v193 >= a10) {
                signed int v193 = a10;
              }
              if (v193 <= v172) {
                LOBYTE(v193) = -(char)a10;
              }
              *(unsigned char *)(v174 + v173 * v236 + k) = v193;
            }
          }
          ++v173;
        }
        while (v173 != v165);
      }
    }
  }
}

double sub_1BBAE0354(unsigned int a1, unsigned int a2, uint16x8_t a3, uint16x8_t a4)
{
  v4.i64[0] = 0x1000100010001;
  v4.i64[1] = 0x1000100010001;
  int8x16_t v5 = (int8x16_t)vcgtq_u16(a3, v4);
  int8x16_t v6 = (int8x16_t)vcgtq_u16(a4, v4);
  int16x8_t v7 = vclzq_s16((int16x8_t)a3);
  int16x8_t v8 = vclzq_s16((int16x8_t)a4);
  v9.i64[0] = 0x4040404040404040;
  v9.i64[1] = 0x4040404040404040;
  v41.val[3] = (int8x16_t)xmmword_1BBB6FBC0;
  v41.val[2] = (int8x16_t)xmmword_1BBB6FBD0;
  v41.val[1] = (int8x16_t)xmmword_1BBB6FBE0;
  v41.val[0] = (int8x16_t)xmmword_1BBB6FBF0;
  uint8x16_t v10 = (uint8x16_t)vqtbx4q_s8(v41, vaddq_s8(vuzp1q_s8((int8x16_t)vshrq_n_u16(vshlq_u16(a3, (uint16x8_t)vaddq_s16(v7, (int16x8_t)v4)), 8uLL), (int8x16_t)vshrq_n_u16(vshlq_u16(a4, (uint16x8_t)vaddq_s16(v8, (int16x8_t)v4)), 8uLL)), v9));
  unsigned long long v11 = *(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8) | __PAIR128__(0x200020002000200, 0x200020002000200);
  unsigned long long v12 = *(_OWORD *)&vmovl_high_u8(v10) | __PAIR128__(0x200020002000200, 0x200020002000200);
  uint16x8_t v13 = vmovl_u8(vhadd_u8((uint8x8_t)vmovn_s16(v7), (uint8x8_t)0x1111111111111111));
  uint16x8_t v14 = vmovl_u8(vhadd_u8((uint8x8_t)vmovn_s16(v8), (uint8x8_t)0x1111111111111111));
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v41.val[0] = (int8x16_t)vdupq_n_s16(0x2D41u);
  uint16x8_t v15 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s16((int16x8_t)(*(_OWORD *)&v7 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), (int16x8_t)v9), v41.val[0]), (int8x16_t)vshlq_n_s16((int16x8_t)(*(_OWORD *)&v7 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), 0xEuLL));
  uint16x8_t v16 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s16((int16x8_t)(*(_OWORD *)&v8 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), (int16x8_t)v9), v41.val[0]), (int8x16_t)vshlq_n_s16((int16x8_t)(*(_OWORD *)&v8 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), 0xEuLL));
  int16x8_t v17 = (int16x8_t)vbslq_s8(v5, (int8x16_t)vuzp1q_s16((int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_n_u16(*(uint16x4_t *)&v11, 0xCuLL), (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v13.i8))), (int32x4_t)vmovl_u16(*(uint16x4_t *)v15.i8)), 0xEuLL), 5uLL), (int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_high_n_u16((uint16x8_t)v11, 0xCuLL), vsubw_high_u16((uint32x4_t)0, v13)), (int32x4_t)vmovl_high_u16(v15)), 0xEuLL),
                                               5uLL)),
                     (int8x16_t)a3);
  int16x8_t v18 = vdupq_n_s16(a1);
  int16x8_t v19 = vsubq_s16(v17, v18);
  int16x8_t v20 = vsubq_s16((int16x8_t)vbslq_s8(v6, (int8x16_t)vuzp1q_s16((int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_n_u16(*(uint16x4_t *)&v12, 0xCuLL), (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v14.i8))), (int32x4_t)vmovl_u16(*(uint16x4_t *)v16.i8)), 0xEuLL), 5uLL), (int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_high_n_u16((uint16x8_t)v12, 0xCuLL), vsubw_high_u16((uint32x4_t)0, v14)), (int32x4_t)vmovl_high_u16(v16)),
                                                   0xEuLL),
                                                 5uLL)),
                       (int8x16_t)a4),
          v18);
  uint16x8_t v21 = (uint16x8_t)vabsq_s16(v19);
  uint16x8_t v22 = (uint16x8_t)vabsq_s16(v20);
  uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(a2 << 8);
  uint32x4_t v24 = vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v23.i8);
  uint32x4_t v25 = vmull_high_u16(v21, v23);
  uint32x4_t v26 = vmull_u16(*(uint16x4_t *)v22.i8, *(uint16x4_t *)v23.i8);
  uint32x4_t v27 = vmull_high_u16(v22, v23);
  int32x4_t v28 = vdupq_n_s32(a1);
  int8x16_t v29 = (int8x16_t)vceqzq_s32(v28);
  float32x4_t v30 = vcvtq_f32_u32((uint32x4_t)v28);
  float32x4_t v31 = vrecpeq_f32(v30);
  float32x4_t v32 = vmulq_f32(v31, vrecpsq_f32(v30, v31));
  float32x4_t v33 = vmulq_f32(vrecpsq_f32(v30, v32), v32);
  int16x8_t v34 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v33, vcvtq_f32_u32(v24))), v29), (int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v33, vcvtq_f32_u32(v25))), v29)), 8uLL);
  int16x8_t v35 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v33, vcvtq_f32_u32(v26))), v29), (int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v33, vcvtq_f32_u32(v27))), v29)), 8uLL);
  int16x8_t v36 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v19), (int8x16_t)vnegq_s16(v34), (int8x16_t)v34);
  int16x8_t v37 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v20), (int8x16_t)vnegq_s16(v35), (int8x16_t)v35);
  int16x8_t v38 = vdupq_n_s16(a2);
  int16x8_t v39 = vdupq_n_s16(-a2);
  *(void *)&double result = vuzp1q_s8((int8x16_t)vmaxq_s16(vminq_s16(v36, v38), v39), (int8x16_t)vmaxq_s16(vminq_s16(v37, v38), v39)).u64[0];
  return result;
}

int8x8_t sub_1BBAE05F0(unsigned int a1, unsigned int a2, uint16x8_t a3)
{
  v3.i64[0] = 0x1000100010001;
  v3.i64[1] = 0x1000100010001;
  int8x16_t v4 = (int8x16_t)vcgtq_u16(a3, v3);
  int16x8_t v5 = vclzq_s16((int16x8_t)a3);
  v23.val[3] = (int8x16_t)xmmword_1BBB6FBC0;
  v23.val[2] = (int8x16_t)xmmword_1BBB6FBD0;
  v23.val[1] = (int8x16_t)xmmword_1BBB6FBE0;
  v23.val[0] = (int8x16_t)xmmword_1BBB6FBF0;
  unsigned long long v6 = *(_OWORD *)&vmovl_u8((uint8x8_t)vqtbx4_s8(v23, vadd_s8(vshrn_n_s16((int16x8_t)vshlq_u16(a3, (uint16x8_t)vaddq_s16(v5, (int16x8_t)v3)), 8uLL), (int8x8_t)0x4040404040404040))) | __PAIR128__(0x200020002000200, 0x200020002000200);
  uint16x8_t v7 = vmovl_u8(vhadd_u8((uint8x8_t)vmovn_s16(v5), (uint8x8_t)0x1111111111111111));
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  uint16x8_t v9 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s16((int16x8_t)(*(_OWORD *)&v5 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), v8), (int8x16_t)vdupq_n_s16(0x2D41u)), (int8x16_t)vshlq_n_s16((int16x8_t)(*(_OWORD *)&v5 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), 0xEuLL));
  int16x8_t v10 = vsubq_s16((int16x8_t)vbslq_s8(v4, (int8x16_t)vuzp1q_s16((int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_n_u16(*(uint16x4_t *)&v6, 0xCuLL), (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v7.i8))), (int32x4_t)vmovl_u16(*(uint16x4_t *)v9.i8)), 0xEuLL), 5uLL), (int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_high_n_u16((uint16x8_t)v6, 0xCuLL), vsubw_high_u16((uint32x4_t)0, v7)), (int32x4_t)vmovl_high_u16(v9)),
                                                   0xEuLL),
                                                 5uLL)),
                       (int8x16_t)a3),
          vdupq_n_s16(a1));
  uint16x8_t v11 = (uint16x8_t)vabsq_s16(v10);
  uint16x8_t v12 = (uint16x8_t)vdupq_n_s16(a2 << 8);
  uint32x4_t v13 = vmull_u16(*(uint16x4_t *)v11.i8, *(uint16x4_t *)v12.i8);
  int32x4_t v14 = vdupq_n_s32(a1);
  uint32x4_t v15 = vmull_high_u16(v11, v12);
  int8x16_t v16 = (int8x16_t)vceqzq_s32(v14);
  float32x4_t v17 = vcvtq_f32_u32((uint32x4_t)v14);
  float32x4_t v18 = vrecpeq_f32(v17);
  float32x4_t v19 = vmulq_f32(v18, vrecpsq_f32(v17, v18));
  float32x4_t v20 = vmulq_f32(vrecpsq_f32(v17, v19), v19);
  int16x8_t v21 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v20, vcvtq_f32_u32(v13))), v16), (int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v20, vcvtq_f32_u32(v15))), v16)), 8uLL);
  return vmovn_s16(vmaxq_s16(vminq_s16((int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v10), (int8x16_t)vnegq_s16(v21), (int8x16_t)v21), vdupq_n_s16(a2)), vdupq_n_s16(-a2)));
}

uint64_t sub_1BBAE07BC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 296);
  float v3 = *(float *)(v2 + 2720);
  uint64_t v4 = (int)(v3 + 0.5);
  if (*(unsigned __int8 *)(result + 84) >= 0x33u) {
    signed int v5 = 51;
  }
  else {
    signed int v5 = *(unsigned __int8 *)(result + 84);
  }
  signed int v6 = *(_DWORD *)(result + 88);
  uint64_t v7 = *(void *)(v2 + 592);
  if (*(unsigned char *)(v7 + 136))
  {
    int v9 = *(_DWORD *)(v7 + 248);
    int16x8_t v8 = (int *)(v7 + 248);
    if (v9 <= 0) {
      int16x8_t v10 = v8 - 2;
    }
    else {
      int16x8_t v10 = v8;
    }
    uint16x8_t v11 = v8 - 1;
    int v13 = v8[1];
    uint16x8_t v12 = v8 + 1;
    if (v13 <= 0) {
      uint16x8_t v12 = v11;
    }
  }
  else
  {
    int16x8_t v10 = (int *)(v7 + 276);
    uint16x8_t v12 = (int *)(v7 + 280);
  }
  uint64_t v14 = 0;
  int v98 = *v10;
  int v99 = *v12;
  float v15 = (float)(int)v4;
  int16x8_t v85 = vdupq_n_s16(v4);
  int8x16_t v16 = vdupq_n_s8(v5);
  int8x16_t v17 = vdupq_n_s8(v6);
  if (*(_DWORD *)(result + 24) == 10) {
    uint64_t v18 = 12;
  }
  else {
    uint64_t v18 = 0;
  }
  int8x16_t v19 = vdupq_n_s8(v18);
  int8x16_t v20 = vdupq_n_s8(v4);
  int v21 = v18 + v4;
  uint64_t v22 = v18 | 0x33;
  int8x16_t v23 = (int8x16_t)xmmword_1BBB6F620;
  uint64_t v97 = result;
  int8x16_t v93 = v17;
  int8x16_t v94 = v16;
  int8x16_t v92 = v19;
  int8x16_t v88 = v20;
  unsigned int __c = v18 | 0x33;
  int v95 = v18 + v4;
  signed int v103 = v5;
  signed int v104 = *(_DWORD *)(result + 88);
  do
  {
    uint64_t v24 = v1 + 8 * v14;
    uint32x4_t v25 = *(unsigned char **)(v24 + 1488);
    if (!v25) {
      goto LABEL_50;
    }
    uint64_t v26 = *(int *)(v1 + 4 * v14 + 1520);
    int v27 = *(_DWORD *)(v1 + 20);
    char v28 = v14 + 3;
    int v29 = (*(_DWORD *)(v1 + 16) + (4 << v14)) >> (v14 + 3);
    uint64_t v30 = (((4 << v14) + v98) >> (v14 + 3));
    uint64_t v31 = (((4 << v14) + v99) >> (v14 + 3));
    int v32 = *(_DWORD *)(*(void *)(v1 + 296) + 444);
    if (v32 == 6 && v3 < v15 && (int)v31 >= 1)
    {
      uint64_t v35 = 0;
      uint64_t v36 = (int)(v29 & 0xFFFFFFF0);
      uint64_t v37 = *(void *)(v24 + 1488);
      do
      {
        uint64_t v38 = v35 + 1;
        if ((int)v36 < 1)
        {
          uint64_t v43 = 0;
        }
        else
        {
          uint64_t v39 = 0;
          int8x8_t v40 = vdup_n_s8((v35 & 1) - 1);
          int8x8_t v41 = vdup_n_s8((v38 & 1) - 1);
          do
          {
            int v42 = (char *)(v37 + v39);
            vst2_s8(v42, *(int8x8x2_t *)v40.i8);
            v39 += 16;
          }
          while (v39 < v36);
          uint64_t v43 = v39;
        }
        if ((int)v43 < (int)v30)
        {
          unint64_t v44 = 0;
          unint64_t v45 = (v30 - v43 + 1) & 0xFFFFFFFFFFFFFFFELL;
          uint64x2_t v46 = (uint64x2_t)vdupq_n_s64(v30 - v43 - 1);
          char v47 = v35 + v43;
          uint64_t v48 = v37 + v43;
          do
          {
            int32x2_t v49 = vmovn_s64((int64x2_t)vcgeq_u64(v46, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v44), v23)));
            if (v49.i8[0]) {
              *(unsigned char *)(v48 + v44) = (v47 & 1) - 1;
            }
            if (v49.i8[4])
            {
              double result = v48 + v44;
              *(unsigned char *)(v48 + v44 + 1) = ((v47 + v44 + 1) & 1) - 1;
            }
            v44 += 2;
          }
          while (v45 != v44);
        }
        v37 += v26;
        uint64_t v35 = v38;
      }
      while (v38 != v31);
      int v32 = *(_DWORD *)(*(void *)(v1 + 296) + 444);
    }
    long long v89 = (void *)(v24 + 1488);
    int v101 = ((4 << v14) + v99) >> (v14 + 3);
    uint64_t v102 = v26;
    unsigned int v100 = v14 + 3;
    int v96 = ((4 << v14) + v98) >> (v14 + 3);
    int v90 = v27;
    int v91 = 4 << v14;
    if (v32 && *(_DWORD *)(v1 + 88) != v4)
    {
      uint64_t v87 = v14;
      int v86 = v29;
      if (!*(unsigned char *)(v1 + 13))
      {
        uint64_t v72 = (v29 * v31);
        unint64_t v73 = v72 & 0xFFFFFFF0;
        if ((int)v73 < 1)
        {
          uint64_t v75 = 0;
        }
        else
        {
          for (unint64_t i = 0; i < v73; i += 16)
            *(int8x16_t *)&v25[i] = vaddq_s8(vmaxq_s8(vminq_s8(vqaddq_s8(*(int8x16_t *)&v25[i], v20), v16), v17), v19);
          uint64_t v75 = i;
        }
        if ((int)v75 < (int)v72)
        {
          uint64_t v81 = v72 - v75;
          int v82 = &v25[v75];
          do
          {
            int v83 = *v82 + v4;
            if (v83 >= v5) {
              int v83 = v5;
            }
            if (v83 <= v6) {
              LOBYTE(v83) = v6;
            }
            *v82++ = v83 + v18;
            --v81;
          }
          while (v81);
        }
        goto LABEL_44;
      }
      if (v14)
      {
        if (v99 >= 1)
        {
          signed int v58 = 0;
          int v59 = 8 << v87;
          int v60 = v98;
          if (v98 <= 8 << v87) {
            int v60 = 8 << v87;
          }
          uint64_t v61 = ((v60 - 1) >> v28) + 1;
          do
          {
            uint64_t v62 = v4;
            uint64_t v63 = v18;
            uint64_t v64 = v100;
            if (v98 >= 1)
            {
              uint64_t v65 = 0;
              signed int v66 = 0;
              do
              {
                uint64_t v67 = v64;
                uint64_t v68 = v61;
                uint64_t v69 = v25;
                uint64_t v70 = v62;
                double result = sub_1BBA824A0(v97, v66, v58, v64);
                uint64_t v64 = v67;
                uint64_t v62 = v70;
                uint32x4_t v25 = v69;
                signed int v71 = result + v62 + (char)v69[v65];
                uint64_t v61 = v68;
                signed int v5 = v103;
                signed int v6 = v104;
                if (v71 >= v103) {
                  signed int v71 = v103;
                }
                if (v71 <= v104) {
                  LOBYTE(v71) = v104;
                }
                v69[v65] = v71 + v63;
                v66 += v59;
                ++v65;
              }
              while (v61 != v65);
            }
            LODWORD(v26) = v102;
            v25 += v102;
            v58 += v59;
            uint64_t v4 = v62;
            uint64_t v18 = v63;
            int v21 = v95;
          }
          while (v58 < v99);
        }
        goto LABEL_44;
      }
      uint64_t v50 = __c;
      if ((int)v31 >= 1)
      {
        int v76 = 0;
        uint64_t v77 = *(void *)(v97 + 1720);
        uint64_t v78 = (int)(v30 & 0xFFFFFFF0);
        do
        {
          if ((int)v78 < 1)
          {
            uint64_t j = 0;
          }
          else
          {
            for (uint64_t j = 0; j < v78; j += 16)
              *(int8x16_t *)&v25[j] = vaddq_s8(vmaxq_s8(vminq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vaddw_s8(v85, *(int8x8_t *)&v25[j]), *(int8x8_t *)(v77 + j))), vaddw_high_s8(vaddw_high_s8(v85, *(int8x16_t *)&v25[j]), *(int8x16_t *)(v77 + j))), v94), v93), v92);
            uint64_t j = j;
          }
          if ((int)j < (int)v30)
          {
            do
            {
              int v80 = (char)v25[j] + v4 + *(char *)(v77 + j);
              if (v80 >= v5) {
                int v80 = v5;
              }
              if (v80 <= v6) {
                LOBYTE(v80) = v6;
              }
              v25[j++] = v80 + v18;
            }
            while (v30 != j);
          }
          v25 += v26;
          v77 += (int)v30;
          ++v76;
        }
        while (v76 != v31);
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v50 = v22;
      if ((int)v31 >= 1)
      {
        int v86 = v29;
        uint64_t v87 = v14;
        size_t v51 = (int)v30;
        int v52 = ((4 << v14) + v99) >> (v14 + 3);
        do
        {
          double result = (uint64_t)memset(v25, v21, v51);
          LODWORD(v26) = v102;
          v25 += v102;
          --v52;
        }
        while (v52);
LABEL_44:
        uint64_t v14 = v87;
        uint64_t v50 = __c;
        if (v86 > v96 && v101 >= 1)
        {
          int v53 = (char *)(*v89 + v96);
          int v54 = v101;
          do
          {
            double result = (uint64_t)memset(v53, __c, v86 - v96);
            LODWORD(v26) = v102;
            v53 += v102;
            --v54;
          }
          while (v54);
        }
      }
    }
    int v55 = (v90 + v91) >> v100;
    BOOL v56 = __OFSUB__(v55, v101);
    int v57 = v55 - v101;
    int8x16_t v17 = v93;
    int8x16_t v16 = v94;
    int8x16_t v19 = v92;
    int8x16_t v23 = (int8x16_t)xmmword_1BBB6F620;
    int8x16_t v20 = v88;
    uint64_t v22 = v50;
    uint64_t v1 = v97;
    if (!((v57 < 0) ^ v56 | (v57 == 0)))
    {
      double result = (uint64_t)memset((void *)(*v89 + (int)v26 * v101), v22, v57 * (int)v26);
      int8x16_t v23 = (int8x16_t)xmmword_1BBB6F620;
      int8x16_t v20 = v88;
      int8x16_t v19 = v92;
      int8x16_t v17 = v93;
      int8x16_t v16 = v94;
    }
LABEL_50:
    ++v14;
  }
  while (v14 != 4);
  return result;
}

uint64_t sub_1BBAE0DB4(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int16x4_t *a7, uint64_t a8, int *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    int v10 = 0;
    uint64_t v11 = (int)(a3 & 0xFFFFFFE0);
    uint64_t v12 = 16 * a2;
    uint64_t v13 = result + 8 * a2;
    do
    {
      if ((int)v11 >= 1)
      {
        uint64_t v14 = 0;
        for (uint64_t i = 0; i < v11; i += 32)
        {
          int8x16_t v16 = (const __int16 *)(v13 + v14);
          int8x16_t v17 = (const __int16 *)(result + v14);
          unsigned long long v18 = (unsigned __int128)vld4q_s16(v16);
          unsigned long long v19 = (unsigned __int128)vld4q_s16(v17);
          uint16x8_t v20 = vrshrq_n_u16((uint16x8_t)v19, 6uLL);
          uint16x8_t v21 = vrshrq_n_u16((uint16x8_t)v18, 6uLL);
          int32x4_t v22 = vshlq_n_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v21), v20), 4uLL);
          unsigned int v23 = vaddvq_s32(v22);
          uint16x8_t v24 = (uint16x8_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u32((uint32x4_t)v22, 6uLL), (int8x16_t)xmmword_1BBB6FC00);
          int32x4_t v25 = vshlq_n_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v21, v24), v20, v24)), 4uLL);
          *a10 += v23;
          *a7++ = vmovn_s32(v25);
          v25.i32[0] = vaddvq_s32(v25);
          int v26 = *a9 + v25.i32[0];
          if (__CFADD__(*a9, v25.i32[0])) {
            int v26 = -1;
          }
          *a9 = v26;
          v14 += 64;
        }
      }
      if ((int)v11 < a3)
      {
        uint64_t v27 = *a10;
        uint64_t v28 = 2 * v11;
        uint64_t v29 = (int)(a3 & 0xFFFFFFE0);
        do
        {
          v30.i16[0] = *(_WORD *)(result + v28);
          v30.i16[1] = *(_WORD *)(result + v28 + 8);
          v30.i16[2] = *(_WORD *)(v13 + v28);
          v30.i16[3] = *(_WORD *)(v13 + v28 + 8);
          v30.i16[4] = *(_WORD *)(result + v28 + 16);
          v30.i16[5] = *(_WORD *)(result + v28 + 24);
          v30.i16[6] = *(_WORD *)(v13 + v28 + 16);
          v30.i16[7] = *(_WORD *)(v13 + v28 + 24);
          uint16x8_t v31 = vrshrq_n_u16(v30, 6uLL);
          int64x2_t v32 = vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(v31)), 4uLL);
          int16x8_t v33 = (int16x8_t)vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vabdq_u16(v31, (uint16x8_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u64((uint64x2_t)v32, 6uLL), (int8x16_t)xmmword_1BBB6FA40)))), 4uLL);
          a7->i32[0] = v33.i16[0] & 0xFFF0 | (v33.u16[4] << 16);
          a7 = (int16x4_t *)((char *)a7 + 4);
          v33.i16[0] = vaddvq_s16(v33);
          v27 += vaddvq_s64(v32);
          int v34 = *a9 + v33.u16[0];
          if (__CFADD__(*a9, v33.u16[0])) {
            int v34 = -1;
          }
          *a9 = v34;
          v29 += 16;
          v28 += 32;
        }
        while (v29 < a3);
        *a10 = v27;
      }
      v10 += 8;
      v13 += v12;
      result += v12;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t sub_1BBAE0F64(uint64_t result, uint64_t a2, int a3, int a4, void *a5, uint64_t a6, int32x2_t *a7, uint64_t a8, int *a9, void *a10)
{
  if (a4 >= 1)
  {
    int v10 = 0;
    uint64_t v11 = result + 12 * a2;
    uint64_t v12 = 16 * a2;
    uint64_t v13 = result + 8 * a2;
    uint64_t v14 = result + 4 * a2;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v15 = 0;
        for (uint64_t i = 0; i < a3; i += 16)
        {
          int8x16_t v17 = (const __int16 *)(v14 + v15);
          unsigned long long v18 = (unsigned __int128)vld2q_s16(v17);
          unsigned long long v19 = (const __int16 *)(result + v15);
          unsigned long long v20 = (unsigned __int128)vld2q_s16(v19);
          uint16x8_t v21 = (const __int16 *)(v13 + v15);
          unsigned long long v22 = (unsigned __int128)vld2q_s16(v21);
          unsigned int v23 = (const __int16 *)(v11 + v15);
          unsigned long long v24 = (unsigned __int128)vld2q_s16(v23);
          uint16x8_t v25 = vrshrq_n_u16((uint16x8_t)v20, 6uLL);
          uint16x8_t v26 = vrshrq_n_u16((uint16x8_t)v18, 6uLL);
          uint16x8_t v27 = vrshrq_n_u16((uint16x8_t)v22, 6uLL);
          uint16x8_t v28 = vrshrq_n_u16((uint16x8_t)v24, 6uLL);
          int32x4_t v29 = (int32x4_t)vpadalq_u16(vpaddlq_u16(v26), v25);
          int32x4_t v30 = (int32x4_t)vpadalq_u16(vpaddlq_u16(v28), v27);
          int32x4_t v31 = vaddq_s32(v30, v29);
          uint16x8_t v32 = (uint16x8_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u32((uint32x4_t)v29, 2uLL), (int8x16_t)xmmword_1BBB6FC00);
          uint16x8_t v33 = (uint16x8_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u32((uint32x4_t)v30, 2uLL), (int8x16_t)xmmword_1BBB6FC00);
          *a10 += vaddvq_s32(vshlq_n_s32(v31, 2uLL));
          int32x4_t v34 = vshlq_n_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v32.i8), *(uint16x4_t *)v25.i8, *(uint16x4_t *)v32.i8), *(uint16x4_t *)v27.i8, *(uint16x4_t *)v33.i8), *(uint16x4_t *)v28.i8, *(uint16x4_t *)v33.i8), 2uLL);
          int32x4_t v35 = (int32x4_t)vabal_high_u16(vabal_high_u16(vabal_high_u16(vabdl_high_u16(v26, v32), v25, v32), v27, v33), v28, v33);
          v27.i32[0] = vaddvq_s32(v34);
          int32x4_t v36 = vshlq_n_s32(v35, 2uLL);
          v25.i32[0] = vaddvq_s32(v36);
          *a5++ = vshlq_n_s32(vpaddq_s32(v31, v31), 2uLL).u64[0];
          *a7++ = vzip1_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v25.i8);
          v36.i32[0] = vaddvq_s32(vaddq_s32(v36, v34));
          int v37 = *a9 + v36.i32[0];
          if (__CFADD__(*a9, v36.i32[0])) {
            int v37 = -1;
          }
          *a9 = v37;
          v15 += 32;
        }
      }
      v10 += 8;
      v11 += v12;
      v13 += v12;
      v14 += v12;
      result += v12;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t sub_1BBAE10A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v12 = sub_1BBAE115C(a1, a2, a3, a4, a5, a6);
  int v13 = sub_1BBAE115C(a1 + 16, a2 + 16, a3, a4, a5, a6) + v12;
  uint64_t v14 = a1 + 16 * a3;
  uint64_t v15 = a2 + 16 * a3;
  int v16 = v13 + sub_1BBAE115C(v14, v15, a3, a4, a5, a6);
  return v16 + sub_1BBAE115C(v14 + 16, v15 + 16, a3, a4, a5, a6);
}

uint64_t sub_1BBAE115C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = a5 * a3;
  uint64_t v7 = a5 * a4;
  int v8 = a6 + a5;
  if (a6 + a5 > 15)
  {
    unsigned long long v20 = (uint8x8_t *)(a1 + v6);
    uint16x8_t v21 = (uint8x8_t *)(a2 + v7);
    int16x8_t v15 = 0uLL;
    int16x8_t v14 = 0uLL;
    int16x8_t v13 = 0uLL;
    int16x8_t v12 = 0uLL;
  }
  else
  {
    uint64_t v9 = a6 + (uint64_t)a5;
    uint64_t v10 = a3 * v9;
    uint64_t v11 = a4 * v9;
    int16x8_t v12 = 0uLL;
    int16x8_t v13 = 0uLL;
    int16x8_t v14 = 0uLL;
    int16x8_t v15 = 0uLL;
    do
    {
      uint8x16_t v16 = *(uint8x16_t *)(a1 + v6);
      uint8x16_t v17 = *(uint8x16_t *)(a1 + v10);
      uint8x16_t v18 = *(uint8x16_t *)(a2 + v7);
      uint8x16_t v19 = *(uint8x16_t *)(a2 + v11);
      int16x8_t v12 = (int16x8_t)vabal_u8((uint16x8_t)v12, *(uint8x8_t *)v16.i8, *(uint8x8_t *)v18.i8);
      int16x8_t v13 = (int16x8_t)vabal_u8((uint16x8_t)v13, *(uint8x8_t *)v17.i8, *(uint8x8_t *)v19.i8);
      int16x8_t v14 = (int16x8_t)vabal_high_u8((uint16x8_t)v14, v16, v18);
      int16x8_t v15 = (int16x8_t)vabal_high_u8((uint16x8_t)v15, v17, v19);
      v8 += 2 * a6;
      a1 += 2 * a6 * a3;
      a2 += 2 * a6 * a4;
    }
    while (v8 < 16);
    unsigned long long v20 = (uint8x8_t *)(a1 + v6);
    uint16x8_t v21 = (uint8x8_t *)(a2 + v7);
  }
  if (v8 - a6 <= 15)
  {
    int16x8_t v12 = (int16x8_t)vabal_u8((uint16x8_t)v12, *v20, *v21);
    int16x8_t v14 = (int16x8_t)vabal_high_u8((uint16x8_t)v14, *(uint8x16_t *)v20->i8, *(uint8x16_t *)v21->i8);
  }
  return vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(v13, v15), vaddq_s16(v14, v12)));
}

unint64_t sub_1BBAE1234(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  if (a4 < 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = (uint64_t)a3 >> 3;
    uint64_t v10 = 16 * a2;
    uint64_t v11 = 8 * v9;
    uint64_t v12 = a1 + 15 * a2;
    uint64_t v13 = a1 + 14 * a2;
    uint64_t v14 = a1 + 13 * a2;
    uint64_t v15 = a1 + 12 * a2;
    uint64_t v16 = a1 + 11 * a2;
    uint64_t v17 = a1 + 10 * a2;
    uint64_t v18 = a1 + 9 * a2;
    uint64_t v19 = a5 + 4 * v9;
    uint64_t v20 = a1 + 8 * a2;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        int v23 = a3;
        do
        {
          int32x2_t v24 = 0;
          int32x4_t v25 = 0uLL;
          int32x4_t v26 = 0uLL;
          if (a4 - v8 >= 16)
          {
            uint8x16_t v27 = *(uint8x16_t *)(v20 + v22);
            uint8x16_t v28 = *(uint8x16_t *)(v18 + v22);
            uint8x16_t v29 = *(uint8x16_t *)(v17 + v22);
            uint8x16_t v30 = *(uint8x16_t *)(v16 + v22);
            uint8x16_t v31 = *(uint8x16_t *)(v15 + v22);
            uint8x16_t v32 = *(uint8x16_t *)(v14 + v22);
            uint8x16_t v33 = *(uint8x16_t *)(v13 + v22);
            uint8x16_t v34 = *(uint8x16_t *)(v12 + v22);
            int32x4_t v25 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v28.i8)), vmull_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v27.i8)), vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v29.i8)), vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v30.i8)), vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v31.i8)), vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v32.i8)), vmull_u8(*(uint8x8_t *)v33.i8, *(uint8x8_t *)v33.i8)), vmull_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v34.i8));
            int32x4_t v26 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_high_u8(v28, v28)), vmull_high_u8(v27, v27)), vmull_high_u8(v29, v29)), vmull_high_u8(v30, v30)), vmull_high_u8(v31, v31)), vmull_high_u8(v32, v32)), vmull_high_u8(v33, v33)), vmull_high_u8(v34, v34));
            int32x2_t v24 = *(int32x2_t *)(v19 + v21);
          }
          uint8x16_t v35 = *(uint8x16_t *)(a1 + v22);
          int32x4_t v36 = (uint8x16_t *)(a1 + v22 + a2);
          uint8x16_t v37 = *v36;
          uint64_t v38 = (uint8x16_t *)((char *)v36 + a2);
          uint8x16_t v39 = *v38;
          int8x8_t v40 = (uint8x16_t *)((char *)v38 + a2);
          uint8x16_t v41 = *v40;
          int v42 = (uint8x16_t *)((char *)v40 + a2);
          uint8x16_t v43 = *v42;
          unint64_t v44 = (uint8x16_t *)((char *)v42 + a2);
          uint8x16_t v45 = *v44;
          uint64x2_t v46 = (uint8x16_t *)((char *)v44 + a2);
          uint8x16_t v47 = *v46;
          uint8x16_t v48 = *(uint8x16_t *)((char *)v46 + a2);
          int32x2_t v49 = *(int32x2_t *)(a5 + v21);
          if (v23 > 15)
          {
            int32x4_t v50 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_high_u8(v37, v37)), vmull_high_u8(v35, v35)), vmull_high_u8(v39, v39)), vmull_high_u8(v41, v41)), vmull_high_u8(v43, v43)), vmull_high_u8(v45, v45)), vmull_high_u8(v47, v47)), vmull_high_u8(v48, v48));
          }
          else
          {
            v49.i32[1] = 0;
            v24.i32[1] = 0;
            int32x4_t v26 = 0uLL;
            int32x4_t v50 = 0uLL;
          }
          uint32x4_t v51 = (uint32x4_t)vaddq_s32(vaddq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v37.i8)), vmull_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v35.i8)), vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v39.i8)), vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v41.i8)), vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v43.i8)), vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v45.i8)), vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v47.i8)), vmull_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v48.i8)), v25), vaddq_s32(v26, v50));
          int32x2_t v52 = vadd_s32(v49, v24);
          v52.i32[0] = vpadd_s32(v52, v52).u32[0];
          *a6++ = v52.i32[0];
          v51.i64[0] = vaddlvq_u32(v51);
          *(void *)(a7 + v21) = v51.i64[0];
          v7 += (v51.i64[0] - (unint64_t)((v52.i32[0] * v52.i32[0]) >> 8) + 128) >> 8;
          v22 += 16;
          v23 -= 16;
          v21 += 8;
        }
        while (v22 < a3);
        a7 += v21;
      }
      a1 += v10;
      v8 += 16;
      v19 += v11;
      a5 += v11;
      v12 += v10;
      v13 += v10;
      v14 += v10;
      v15 += v10;
      v16 += v10;
      v17 += v10;
      v18 += v10;
      v20 += v10;
    }
    while (v8 < a4);
  }
  return (v7 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

unint64_t sub_1BBAE1518(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5, uint64_t *a6, int64x2_t *a7)
{
  if (a4 < 1)
  {
    uint64x2_t v8 = 0uLL;
  }
  else
  {
    int v7 = 0;
    uint64x2_t v8 = 0uLL;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v9 = 0;
        int v10 = a3;
        do
        {
          uint8x16_t v11 = *(uint8x16_t *)(a1 + v9);
          uint64_t v12 = (uint8x16_t *)(a1 + v9 + a2);
          uint8x16_t v13 = *v12;
          uint64_t v14 = (uint8x16_t *)((char *)v12 + a2);
          uint8x16_t v15 = *v14;
          uint64_t v16 = (uint8x16_t *)((char *)v14 + a2);
          uint8x16_t v17 = *v16;
          uint64_t v18 = (uint8x16_t *)((char *)v16 + a2);
          uint8x16_t v19 = *v18;
          uint64_t v20 = (uint8x16_t *)((char *)v18 + a2);
          uint8x16_t v21 = *v20;
          uint64_t v22 = (uint8x16_t *)((char *)v20 + a2);
          uint8x16_t v23 = *(uint8x16_t *)((char *)v22 + a2);
          uint8x16_t v24 = *v22;
          uint32x4_t v25 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_u8(*(uint8x8_t *)v13.i8, *(uint8x8_t *)v13.i8)), vmull_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v11.i8)), vmull_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v15.i8)), vmull_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v17.i8));
          int32x4_t v26 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_high_u8(v13, v13)), vmull_high_u8(v11, v11)), vmull_high_u8(v15, v15)), vmull_high_u8(v17, v17)), vmull_high_u8(v19, v19)), vmull_high_u8(v21, v21)), vmull_high_u8(v24, v24)), vmull_high_u8(v23, v23));
          v11.i64[0] = *a5;
          *a6 = *a5;
          int64x2_t v27 = (int64x2_t)vpaddlq_u32((uint32x4_t)vpaddq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v25, vmull_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v19.i8)), vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v21.i8)), vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v24.i8)), vmull_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v23.i8)), v26));
          uint64x2_t v28 = (uint64x2_t)vsubq_s64(v27, (int64x2_t)vshrq_n_u64(vmull_u32(*(uint32x2_t *)v11.i8, *(uint32x2_t *)v11.i8), 6uLL));
          if (v10 <= 15) {
            uint64_t v29 = 1;
          }
          else {
            uint64_t v29 = 2;
          }
          a6 = (uint64_t *)((char *)a6 + 4 * v29);
          *a7 = v27;
          uint64x2_t v8 = vrsraq_n_u64(v8, v28, 6uLL);
          a5 = (uint64_t *)((char *)a5 + 4 * v29);
          a7 = (int64x2_t *)((char *)a7 + 8 * v29);
          v9 += 16;
          v10 -= 16;
        }
        while (v9 < a3);
      }
      a1 += 8 * a2;
      v7 += 8;
    }
    while (v7 < a4);
  }
  return (v8.i64[1] + ((a4 * a3) >> 7) + v8.i64[0]) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

uint64_t sub_1BBAE1684(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  if (a4 >= 1)
  {
    for (unint64_t i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        uint64_t v10 = 0;
        uint8x16_t v11 = (_DWORD *)(a7 + 4 * (i >> 3) * a8);
        uint64_t v12 = (void *)(a5 + 4 * (i >> 3) * a6);
        do
        {
          uint8x16_t v13 = *(uint8x16_t *)(result + v10);
          uint64_t v14 = (uint8x16_t *)(result + v10 + a2);
          uint8x16_t v15 = *v14;
          uint64_t v16 = (uint8x16_t *)((char *)v14 + a2);
          uint8x16_t v17 = *v16;
          uint64_t v18 = (uint8x16_t *)((char *)v16 + a2);
          uint8x16_t v19 = *v18;
          uint64_t v20 = (uint8x16_t *)((char *)v18 + a2);
          uint8x16_t v21 = *v20;
          uint64_t v22 = (uint8x16_t *)((char *)v20 + a2);
          uint8x16_t v23 = *(uint8x16_t *)((char *)v22 + a2 + a2);
          uint8x16_t v24 = *v22;
          uint8x16_t v25 = *(uint8x16_t *)((char *)v22 + a2);
          int16x8_t v26 = (int16x8_t)vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(v15), v13), v17), v19), v21), *v22), v25), v23);
          uint32x4_t v27 = vpaddlq_u16((uint16x8_t)vpaddq_s16(v26, v26));
          *v12++ = v27.i64[0];
          uint8x16_t v28 = (uint8x16_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u32(v27, 6uLL), (int8x16_t)xmmword_1BBB6FC10);
          uint16x8_t v29 = vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v13.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v17.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v28.i8);
          uint16x8_t v30 = vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabdl_high_u8(v15, v28), v13, v28), v17, v28), v19, v28), v21, v28), v24, v28), v25, v28), v23, v28);
          v13.i32[0] = vaddlvq_u16(vabal_u8(v29, *(uint8x8_t *)v23.i8, *(uint8x8_t *)v28.i8));
          *uint8x16_t v11 = v13.i32[0];
          v11[1] = vaddlvq_u16(v30);
          LODWORD(v22) = *a9 + v13.i32[0];
          *a9 = v22;
          *a9 = v11[1] + v22;
          v10 += 16;
          v11 += 2;
        }
        while (v10 < a3);
      }
      result += 8 * a2;
    }
  }
  return result;
}

uint64_t sub_1BBAE17C8(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  if (a4 >= 1)
  {
    for (unint64_t i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        uint64_t v10 = 0;
        uint8x16_t v11 = (_DWORD *)(a7 + 4 * (i >> 3) * a8);
        uint64_t v12 = (void *)(a5 + 4 * (i >> 3) * a6);
        do
        {
          uint8x16_t v13 = *(uint8x16_t *)(result + v10);
          uint64_t v14 = (uint8x16_t *)(result + v10 + a2);
          uint8x16_t v15 = *v14;
          uint64_t v16 = (uint8x16_t *)((char *)v14 + a2);
          uint8x16_t v17 = *v16;
          uint64_t v18 = (uint8x16_t *)((char *)v16 + a2);
          uint8x16_t v19 = *(uint8x16_t *)((char *)v18 + a2);
          uint64_t v20 = (uint8x16_t *)((char *)v18 + a2 + a2);
          uint8x16_t v21 = *v20;
          uint8x16_t v22 = *v18;
          uint8x16_t v23 = *(uint8x16_t *)((char *)v20 + a2);
          uint8x16_t v24 = *(uint8x16_t *)((char *)v20 + a2 + a2);
          int16x8_t v25 = (int16x8_t)vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(v15), v13), v17), *v18);
          int16x8_t v26 = (int16x8_t)vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(*v20), v19), v23), v24);
          int32x4_t v27 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(v26, v25));
          *v12++ = vpaddq_s32(v27, v27).u64[0];
          int8x16_t v28 = (int8x16_t)vrshrq_n_u16((uint16x8_t)vpaddq_s16(v25, v26), 4uLL);
          uint8x16_t v29 = (uint8x16_t)vqtbl1q_s8(v28, (int8x16_t)xmmword_1BBB6FC20);
          uint8x16_t v30 = (uint8x16_t)vqtbl1q_s8(v28, (int8x16_t)xmmword_1BBB6FC30);
          uint16x8_t v31 = vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v13.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v17.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v23.i8, *(uint8x8_t *)v30.i8);
          uint16x8_t v32 = vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabdl_high_u8(v15, v29), v13, v29), v17, v29), v22, v29), v19, v30), v21, v30), v23, v30), v24, v30);
          v13.i32[0] = vaddlvq_u16(vabal_u8(v31, *(uint8x8_t *)v24.i8, *(uint8x8_t *)v30.i8));
          *uint8x16_t v11 = v13.i32[0];
          v11[1] = vaddlvq_u16(v32);
          LODWORD(v18) = *a9 + v13.i32[0];
          *a9 = v18;
          *a9 = v11[1] + v18;
          v10 += 16;
          v11 += 2;
        }
        while (v10 < a3);
      }
      result += 8 * a2;
    }
  }
  return result;
}

void sub_1BBAE1920(uint64_t *a1, int *a2, uint64_t *a3, int *a4, signed int a5, int a6, int a7, int a8, int a9, signed int a10)
{
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  int v202 = (a9 + 31) >> 5;
  int v197 = a8 + 31;
  int v193 = a8 + 7;
  int v11 = (a8 + 7) >> 5;
  int v12 = (a9 + 7) >> 5;
  uint64_t v200 = *a4;
  int v198 = 4 * v200;
  uint64_t v233 = *a2;
  int v199 = 4 * v233;
  uint64_t v234 = a2[1];
  int v201 = 2 * v234;
  uint64_t v207 = a2[2];
  int v222 = a6 >> 5;
  uint64_t v195 = 2 * (a6 >> 5);
  uint64_t v196 = 4 * (a6 >> 5);
  int v206 = a7 >> 5;
  int v210 = v11;
  int v208 = v12;
  if (a7 >> 5 < v12)
  {
    int v13 = a7 >> 5;
    uint64_t v221 = (int)v196 + v199 * v206;
    uint64_t v220 = (int)v195 + v201 * v206;
    uint64_t v219 = v222 + (int)v207 * v206;
    uint64_t v14 = 2 * ((int)v196 + v198 * v206);
    uint64_t v217 = 6 * v200 + v14;
    uint64_t v218 = v14;
    uint64_t v205 = 2 * v198;
    uint64_t v216 = 4 * v200 + v14;
    uint64_t v215 = 2 * v200 + v14;
    uint64_t v214 = 3 * v233 + v221;
    uint64_t v213 = 2 * v233 + v221;
    uint64_t v212 = v233 + v221;
    int v15 = v11 - v222;
    uint64_t v211 = v234 + v220;
    do
    {
      int v209 = v13;
      if (v11 > v222)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a1[1];
        uint64_t v232 = *a3 + v217;
        uint64_t v231 = *a3 + v216;
        uint64_t v229 = *a3 + v215;
        uint64_t v227 = *a3 + v218;
        uint64_t v225 = *a1 + v214;
        uint64_t v223 = *a1 + v213;
        uint64_t v18 = *a1 + v212;
        uint64_t v19 = *a1 + v221;
        uint64_t v20 = v17 + v211;
        uint64_t v21 = v17 + v220;
        uint64_t v22 = a1[2] + v219;
        do
        {
          v23.i64[0] = *(void *)(v227 + 8 * v16);
          v23.i64[1] = *(void *)(v229 + 8 * v16);
          int32x4_t v235 = (int32x4_t)vaddl_u16(*(uint16x4_t *)(v232 + 8 * v16), *(uint16x4_t *)(v231 + 8 * v16));
          int32x4_t v236 = (int32x4_t)vaddl_u16((uint16x4_t)v23.u64[1], *(uint16x4_t *)v23.i8);
          v24.i64[0] = *(void *)(v231 + 8 * v16);
          v24.i64[1] = *(void *)(v232 + 8 * v16);
          double v25 = sub_1BBAE0354(a5, a10, v23, v24);
          *(_DWORD *)(v19 + 4 * v16) = LODWORD(v25);
          *(_DWORD *)(v18 + 4 * v16) = HIDWORD(v25);
          *(_DWORD *)(v223 + 4 * v16) = v26;
          *(_DWORD *)(v225 + 4 * v16) = v27;
          int32x4_t v28 = vpaddq_s32(v236, v235);
          unsigned int v29 = (vaddvq_s32(v28) + 8) >> 4;
          *(int16x4_t *)v28.i8 = vmovn_s32((int32x4_t)vrshrq_n_u32((uint32x4_t)v28, 2uLL));
          v28.u64[1] = (unint64_t)vdup_n_s16(v29);
          int8x8_t v30 = sub_1BBAE05F0(a5, a10, (uint16x8_t)v28);
          *(_WORD *)(v21 + 2 * v16) = v30.i16[0];
          *(_WORD *)(v20 + 2 * v16) = v30.i16[1];
          *(unsigned char *)(v22 + v16++) = v30.i8[4];
        }
        while (v15 != v16);
      }
      v221 += v199;
      v220 += v201;
      v219 += v207;
      int v13 = v209 + 1;
      v217 += v205;
      v216 += v205;
      v215 += v205;
      v218 += v205;
      v214 += v199;
      v213 += v199;
      v212 += v199;
      int v11 = v210;
      v211 += v201;
      int v12 = v208;
    }
    while (v209 + 1 != v208);
  }
  int v230 = (a9 + 15) >> 4;
  int v228 = (a9 + 7) >> 3;
  if (v12 != v202 && v11 > v222)
  {
    uint16x8_t v31 = (unsigned char *)(a1[2] + (int)v207 * (uint64_t)v208 + ((uint64_t)a6 >> 5));
    uint64_t v32 = a1[1] + v201 * (uint64_t)v208 + v195;
    uint64_t v33 = *a3 + 2 * v198 * v208 + 2 * v196;
    int v34 = v228 - 4 * v208;
    uint64_t v35 = (v230 - 2 * v208);
    uint64_t v36 = *a1 + v199 * (uint64_t)v208 + v196;
    signed int v37 = a10 << 8;
    int v38 = -a10;
    *(void *)&long long v39 = -1;
    *((void *)&v39 + 1) = -1;
    do
    {
      long long v239 = v39;
      long long v240 = v39;
      long long v237 = v39;
      long long v238 = v39;
      if (v34 < 1)
      {
        int v41 = 0;
      }
      else
      {
        int v40 = 0;
        int v41 = 0;
        int v42 = &v237;
        uint64_t v43 = v33;
        uint64_t v44 = v36;
        do
        {
          for (uint64_t i = 0; i != 4; ++i)
          {
            unsigned int v46 = *(unsigned __int16 *)(v43 + 2 * i);
            *((_DWORD *)v42 + i) = v46;
            unsigned int v47 = v46;
            if (v46 >= 2)
            {
              unsigned int v48 = __clz(v46);
              if (v48) {
                unsigned int v49 = ((byte_1BBB8A634[(unint64_t)(v46 << (v48 + 1)) >> 24] << 12) | 0x200000u) >> ((v48 + 1) >> 1);
              }
              else {
                unsigned int v49 = (11585
              }
                     * (((byte_1BBB8A634[(unint64_t)(v46 << (v48 + 1)) >> 24] << 12) | 0x200000u) >> ((v48 + 1) >> 1))) >> 14;
              unsigned int v47 = (v49 + 16) >> 5;
            }
            int v50 = (int)(v37 * (v47 - a5)) / a5;
            int v51 = (v50 > 0) | (v50 >> 31);
            if (v50 < 0) {
              int v50 = -v50;
            }
            signed int v52 = v51 * ((v50 + 128) >> 8);
            if (v52 >= a10) {
              signed int v52 = a10;
            }
            if (v52 <= v38) {
              LOBYTE(v52) = -(char)a10;
            }
            *(unsigned char *)(v44 + i) = v52;
            v41 += v46;
          }
          ++v40;
          v44 += v233;
          ++v42;
          v43 += 2 * v200;
        }
        while (v40 != v34);
      }
      unsigned int v53 = (v41 + 2 * v34) / (4 * v34);
      if (v53 >= 2)
      {
        unsigned int v54 = __clz(v53);
        unsigned int v55 = ((byte_1BBB8A634[(unint64_t)(v53 << (v54 + 1)) >> 24] << 12) | 0x200000u) >> ((v54 + 1) >> 1);
        if ((v54 & 1) == 0) {
          unsigned int v55 = (11585 * v55) >> 14;
        }
        unsigned int v53 = (v55 + 16) >> 5;
      }
      int v56 = (int)((v53 - a5) * v37) / a5;
      int v57 = (v56 > 0) | (v56 >> 31);
      if (v56 < 0) {
        int v56 = -v56;
      }
      signed int v58 = v57 * ((v56 + 128) >> 8);
      if (v58 >= a10) {
        signed int v58 = a10;
      }
      if (v58 <= v38) {
        LOBYTE(v58) = -(char)a10;
      }
      *uint16x8_t v31 = v58;
      if ((int)v35 >= 1)
      {
        for (uint64_t j = 0; j != v35; ++j)
        {
          uint64_t v60 = 0;
          char v61 = 1;
          do
          {
            uint64_t v62 = 0;
            int v63 = 0;
            int v64 = 0;
            char v65 = v61;
            char v66 = 1;
            do
            {
              uint64_t v67 = 0;
              char v68 = v66;
              uint64_t v69 = (8 * j) | (2 * v60) | v62;
              char v70 = 1;
              do
              {
                char v71 = v70;
                int v72 = *((_DWORD *)&v237 + (v69 | v67));
                BOOL v73 = v72 == -1;
                if (v72 == -1) {
                  int v72 = 0;
                }
                v64 += v72;
                if (!v73) {
                  ++v63;
                }
                uint64_t v67 = 1;
                char v70 = 0;
              }
              while ((v71 & 1) != 0);
              char v66 = 0;
              uint64_t v62 = 4;
            }
            while ((v68 & 1) != 0);
            unsigned int v74 = (v64 + (v63 >> 1)) / v63;
            if (v74 >= 2)
            {
              unsigned int v75 = __clz(v74);
              unsigned int v76 = ((byte_1BBB8A634[(unint64_t)(v74 << (v75 + 1)) >> 24] << 12) | 0x200000u) >> ((v75 + 1) >> 1);
              if ((v75 & 1) == 0) {
                unsigned int v76 = (11585 * v76) >> 14;
              }
              unsigned int v74 = (v76 + 16) >> 5;
            }
            char v61 = 0;
            int v77 = (int)((v74 - a5) * v37) / a5;
            int v78 = (v77 > 0) | (v77 >> 31);
            if (v77 < 0) {
              int v77 = -v77;
            }
            signed int v79 = v78 * ((v77 + 128) >> 8);
            if (v79 >= a10) {
              signed int v79 = a10;
            }
            if (v79 <= v38) {
              LOBYTE(v79) = -(char)a10;
            }
            *(unsigned char *)(v32 + j * v234 + v60) = v79;
            uint64_t v60 = 1;
          }
          while ((v65 & 1) != 0);
        }
      }
      v33 += 8;
      v36 += 4;
      v32 += 2;
      ++v31;
      int v11 = v210;
      ++v222;
    }
    while (v222 != v210);
  }
  int v80 = v208;
  if (v11 != v197 >> 5)
  {
    int v224 = (a8 + 15) >> 4;
    int v226 = v193 >> 3;
    signed int v81 = a10 << 8;
    if (v206 < v208)
    {
      int v82 = (unsigned char *)(a1[2] + v210);
      uint64_t v83 = a1[1] + 2 * v210;
      int v84 = v226 - 4 * v210;
      uint64_t v85 = (v224 - 2 * v210);
      int v86 = -a10;
      *(void *)&long long v87 = -1;
      *((void *)&v87 + 1) = -1;
      uint64_t v88 = *a1 + 4 * v210;
      uint64_t v89 = *a3 + 8 * v210;
      do
      {
        int v90 = 0;
        int v91 = 0;
        long long v239 = v87;
        long long v240 = v87;
        int8x16_t v92 = (unsigned int *)&v237;
        int8x16_t v93 = (unsigned __int16 *)v89;
        int8x16_t v94 = (unsigned char *)v88;
        long long v237 = v87;
        long long v238 = v87;
        do
        {
          int v95 = v93;
          int v96 = v92;
          uint64_t v97 = v94;
          uint64_t v98 = (v226 - 4 * v210);
          if (v84 >= 1)
          {
            do
            {
              unsigned int v100 = *v95++;
              unsigned int v99 = v100;
              *int v96 = v100;
              unsigned int v101 = v100;
              if (v100 >= 2)
              {
                unsigned int v102 = __clz(v99);
                if (v102) {
                  unsigned int v103 = ((byte_1BBB8A634[(unint64_t)(v99 << (v102 + 1)) >> 24] << 12) | 0x200000u) >> ((v102 + 1) >> 1);
                }
                else {
                  unsigned int v103 = (11585
                }
                        * (((byte_1BBB8A634[(unint64_t)(v99 << (v102 + 1)) >> 24] << 12) | 0x200000u) >> ((v102 + 1) >> 1))) >> 14;
                unsigned int v101 = (v103 + 16) >> 5;
              }
              int v104 = (int)(v81 * (v101 - a5)) / a5;
              int v105 = (v104 > 0) | (v104 >> 31);
              if (v104 < 0) {
                int v104 = -v104;
              }
              signed int v106 = v105 * ((v104 + 128) >> 8);
              if (v106 >= a10) {
                signed int v106 = a10;
              }
              if (v106 <= v86) {
                LOBYTE(v106) = -(char)a10;
              }
              *v97++ = v106;
              v91 += v99;
              ++v96;
              --v98;
            }
            while (v98);
          }
          ++v90;
          v94 += v233;
          v92 += 4;
          v93 += v200;
        }
        while (v90 != 4);
        unsigned int v107 = (v91 + 2 * v84) / (4 * v84);
        if (v107 >= 2)
        {
          unsigned int v108 = __clz(v107);
          unsigned int v109 = ((byte_1BBB8A634[(unint64_t)(v107 << (v108 + 1)) >> 24] << 12) | 0x200000u) >> ((v108 + 1) >> 1);
          if (v108) {
            unsigned int v110 = v109;
          }
          else {
            unsigned int v110 = (11585 * v109) >> 14;
          }
          unsigned int v107 = (v110 + 16) >> 5;
        }
        uint64_t v111 = 0;
        int v112 = (int)((v107 - a5) * v81) / a5;
        int v113 = (v112 > 0) | (v112 >> 31);
        if (v112 < 0) {
          int v112 = -v112;
        }
        signed int v114 = v113 * ((v112 + 128) >> 8);
        if (v114 >= a10) {
          signed int v114 = a10;
        }
        if (v114 <= v86) {
          LOBYTE(v114) = -(char)a10;
        }
        unsigned char *v82 = v114;
        char v115 = 1;
        do
        {
          char v116 = v115;
          if ((int)v85 >= 1)
          {
            uint64_t v117 = 0;
            uint64_t v118 = 8 * v111;
            uint64_t v119 = v83 + v111 * v234;
            do
            {
              uint64_t v120 = 0;
              int v121 = 0;
              int v122 = 0;
              char v123 = 1;
              do
              {
                uint64_t v124 = 0;
                char v125 = v123;
                uint64_t v126 = v118 + 2 * v117 + v120;
                char v127 = 1;
                do
                {
                  char v128 = v127;
                  int v129 = *((_DWORD *)&v237 + (v126 | v124));
                  BOOL v130 = v129 == -1;
                  if (v129 == -1) {
                    int v129 = 0;
                  }
                  v122 += v129;
                  if (!v130) {
                    ++v121;
                  }
                  uint64_t v124 = 1;
                  char v127 = 0;
                }
                while ((v128 & 1) != 0);
                char v123 = 0;
                uint64_t v120 = 4;
              }
              while ((v125 & 1) != 0);
              unsigned int v131 = (v122 + (v121 >> 1)) / v121;
              if (v131 >= 2)
              {
                unsigned int v132 = __clz(v131);
                unsigned int v133 = ((byte_1BBB8A634[(unint64_t)(v131 << (v132 + 1)) >> 24] << 12) | 0x200000u) >> ((v132 + 1) >> 1);
                if ((v132 & 1) == 0) {
                  unsigned int v133 = (11585 * v133) >> 14;
                }
                unsigned int v131 = (v133 + 16) >> 5;
              }
              int v134 = (int)((v131 - a5) * v81) / a5;
              int v135 = (v134 > 0) | (v134 >> 31);
              if (v134 < 0) {
                int v134 = -v134;
              }
              signed int v136 = v135 * ((v134 + 128) >> 8);
              if (v136 >= a10) {
                signed int v136 = a10;
              }
              if (v136 <= v86) {
                LOBYTE(v136) = -(char)a10;
              }
              *(unsigned char *)(v119 + v117++) = v136;
            }
            while (v117 != v85);
          }
          char v115 = 0;
          uint64_t v111 = 1;
        }
        while ((v116 & 1) != 0);
        v88 += v199;
        v83 += v201;
        v82 += v207;
        v89 += 2 * v198;
        int v80 = v208;
        ++v206;
      }
      while (v206 != v208);
    }
    if (v80 != v202)
    {
      uint64_t v137 = *a3;
      uint64_t v138 = *a1;
      uint64_t v139 = a1[1];
      uint64_t v140 = a1[2];
      int v141 = v228 - 4 * v80;
      *(void *)&long long v142 = -1;
      *((void *)&v142 + 1) = -1;
      long long v239 = v142;
      long long v240 = v142;
      long long v237 = v142;
      long long v238 = v142;
      uint64_t v143 = v140 + (int)v207 * (uint64_t)v80;
      int v144 = v226 - 4 * v210;
      int v145 = v141 * v144;
      if (v141 < 1)
      {
        int v147 = 0;
      }
      else
      {
        int v146 = 0;
        int v147 = 0;
        uint64_t v148 = v137 + 2 * v198 * v80 + 8 * v210;
        uint64_t v149 = v138 + v199 * (uint64_t)v80 + 4 * v210;
        uint64_t v150 = (unsigned int *)&v237;
        do
        {
          uint64_t v151 = (unsigned __int16 *)v148;
          int16x8_t v152 = v150;
          int16x8_t v153 = (unsigned char *)v149;
          uint64_t v154 = (v226 - 4 * v210);
          if (v144 >= 1)
          {
            do
            {
              unsigned int v156 = *v151++;
              unsigned int v155 = v156;
              *int16x8_t v152 = v156;
              unsigned int v157 = v156;
              if (v156 >= 2)
              {
                unsigned int v158 = __clz(v155);
                if (v158) {
                  unsigned int v159 = ((byte_1BBB8A634[(unint64_t)(v155 << (v158 + 1)) >> 24] << 12) | 0x200000u) >> ((v158 + 1) >> 1);
                }
                else {
                  unsigned int v159 = (11585
                }
                        * (((byte_1BBB8A634[(unint64_t)(v155 << (v158 + 1)) >> 24] << 12) | 0x200000u) >> ((v158 + 1) >> 1))) >> 14;
                unsigned int v157 = (v159 + 16) >> 5;
              }
              int v160 = (int)(v81 * (v157 - a5)) / a5;
              int v161 = (v160 > 0) | (v160 >> 31);
              if (v160 < 0) {
                int v160 = -v160;
              }
              signed int v162 = v161 * ((v160 + 128) >> 8);
              if (v162 >= a10) {
                signed int v162 = a10;
              }
              if (v162 <= -a10) {
                LOBYTE(v162) = -(char)a10;
              }
              *v153++ = v162;
              v147 += v155;
              ++v152;
              --v154;
            }
            while (v154);
          }
          ++v146;
          v149 += v233;
          v150 += 4;
          v148 += 2 * v200;
        }
        while (v146 != v141);
      }
      uint64_t v163 = (v230 - 2 * v208);
      unsigned int v164 = (v147 + (v145 >> 1)) / v145;
      if (v164 >= 2)
      {
        unsigned int v165 = __clz(v164);
        unsigned int v166 = ((byte_1BBB8A634[(unint64_t)(v164 << (v165 + 1)) >> 24] << 12) | 0x200000u) >> ((v165 + 1) >> 1);
        if ((v165 & 1) == 0) {
          unsigned int v166 = (11585 * v166) >> 14;
        }
        unsigned int v164 = (v166 + 16) >> 5;
      }
      int v167 = (int)((v164 - a5) * v81) / a5;
      int v168 = (v167 > 0) | (v167 >> 31);
      if (v167 < 0) {
        int v167 = -v167;
      }
      signed int v169 = v168 * ((v167 + 128) >> 8);
      int v170 = -a10;
      if (v169 >= a10) {
        signed int v169 = a10;
      }
      if (v169 <= v170) {
        signed int v169 = -a10;
      }
      *(unsigned char *)(v143 + v210) = v169;
      if ((int)v163 >= 1)
      {
        uint64_t v171 = 0;
        uint64_t v172 = v139 + v201 * (uint64_t)v208 + 2 * v210;
        uint64_t v173 = (v224 - 2 * v210);
        do
        {
          if ((int)v173 >= 1)
          {
            for (uint64_t k = 0; k != v173; ++k)
            {
              uint64_t v175 = 0;
              int v176 = 0;
              int v177 = 0;
              char v178 = 1;
              do
              {
                uint64_t v179 = 0;
                char v180 = v178;
                uint64_t v181 = (v175 + (v171 << 35) + (k << 33)) >> 32;
                char v182 = 1;
                do
                {
                  char v183 = v182;
                  int v184 = *((_DWORD *)&v237 + (v181 | v179));
                  BOOL v185 = v184 == -1;
                  if (v184 == -1) {
                    int v184 = 0;
                  }
                  v177 += v184;
                  if (!v185) {
                    ++v176;
                  }
                  uint64_t v179 = 1;
                  char v182 = 0;
                }
                while ((v183 & 1) != 0);
                char v178 = 0;
                uint64_t v175 = 0x400000000;
              }
              while ((v180 & 1) != 0);
              unsigned int v186 = (v177 + (v176 >> 1)) / v176;
              if (v186 >= 2)
              {
                unsigned int v187 = __clz(v186);
                unsigned int v188 = ((byte_1BBB8A634[(unint64_t)(v186 << (v187 + 1)) >> 24] << 12) | 0x200000u) >> ((v187 + 1) >> 1);
                if ((v187 & 1) == 0) {
                  unsigned int v188 = (11585 * v188) >> 14;
                }
                unsigned int v186 = (v188 + 16) >> 5;
              }
              int v189 = (int)((v186 - a5) * v81) / a5;
              int v190 = (v189 > 0) | (v189 >> 31);
              if (v189 < 0) {
                int v189 = -v189;
              }
              signed int v191 = v190 * ((v189 + 128) >> 8);
              if (v191 >= a10) {
                signed int v191 = a10;
              }
              if (v191 <= v170) {
                LOBYTE(v191) = -(char)a10;
              }
              *(unsigned char *)(v172 + v171 * v234 + k) = v191;
            }
          }
          ++v171;
        }
        while (v171 != v163);
      }
    }
  }
}

uint64_t sub_1BBAE2734(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, _DWORD *a9)
{
  if (a4 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 8 * a2;
    uint64_t v11 = (int)(a3 & 0xFFFFFFC0);
    unint64_t v12 = a4;
    uint64_t v13 = result + 4 * a2;
    do
    {
      uint64_t v14 = (int8x16_t *)(a7 + 4 * ((a8 >> 1) & 0x3FFFFFFFFFFFFFFFLL) * (v9 >> 3));
      if ((int)v11 >= 1)
      {
        for (uint64_t i = 0; i < v11; i += 64)
        {
          uint64_t v16 = (const char *)(v13 + i);
          uint64_t v17 = (const char *)(result + i);
          unsigned long long v18 = (unsigned __int128)vld4q_s8(v16);
          unsigned long long v19 = (unsigned __int128)vld4q_s8(v17);
          uint8x16_t v20 = (uint8x16_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u16((uint16x8_t)vshlq_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v18), (uint8x16_t)v19), 4uLL), 6uLL), (int8x16_t)xmmword_1BBB6FC40);
          int8x16_t v21 = (int8x16_t)vshlq_n_s16(vpaddq_s16((int16x8_t)vabal_u8(vabdl_u8(*(uint8x8_t *)&v18, *(uint8x8_t *)v20.i8), *(uint8x8_t *)&v19, *(uint8x8_t *)v20.i8), (int16x8_t)vabal_high_u8(vabdl_high_u8((uint8x16_t)v18, v20), (uint8x16_t)v19, v20)), 4uLL);
          *v14++ = v21;
          *a9 += (unsigned __int16)vaddv_s16(*(int16x4_t *)v21.i8)
               + (unsigned __int16)vaddv_s16((int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
        }
      }
      uint64_t v22 = (int)(a3 & 0xFFFFFFC0);
      if ((int)v11 < a3)
      {
        do
        {
          v23.i8[0] = *(unsigned char *)(result + v22);
          v23.i8[1] = *(unsigned char *)(result + v22 + 4);
          v23.i8[2] = *(unsigned char *)(v13 + v22);
          v23.i8[3] = *(unsigned char *)(v13 + v22 + 4);
          v23.i8[4] = *(unsigned char *)(result + v22 + 8);
          v23.i8[5] = *(unsigned char *)(result + v22 + 12);
          v23.i8[6] = *(unsigned char *)(v13 + v22 + 8);
          v23.i8[7] = *(unsigned char *)(v13 + v22 + 12);
          *(uint32x2_t *)v24.i8 = vrshr_n_u32((uint32x2_t)vshl_n_s32((int32x2_t)vpaddl_u16(vpaddl_u8(v23)), 4uLL), 6uLL);
          v24.i64[1] = v24.i64[0];
          int32x2_t v25 = vshl_n_s32((int32x2_t)vpaddl_u16(vpaddl_u8(vabd_u8(v23, (uint8x8_t)vqtbl1_s8(v24, (int8x8_t)0x404040400000000)))), 4uLL);
          v14->i32[0] = v25.i16[0] & 0xFFF0 | (v25.u16[2] << 16);
          uint64_t v14 = (int8x16_t *)((char *)v14 + 4);
          *a9 += vpadd_s32(v25, v25).u32[0];
          v22 += 16;
        }
        while (v22 < a3);
      }
      result += v10;
      v9 += 8;
      v13 += v10;
    }
    while (v9 < v12);
  }
  return result;
}

uint64_t sub_1BBAE28B8(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  if (a4 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 2 * a2;
    uint64_t v11 = 4 * a2;
    uint64_t v12 = 6 * a2;
    uint64_t v13 = (int)(a3 & 0xFFFFFFE0);
    uint64_t v14 = 8 * a2;
    unint64_t v15 = a4;
    uint64_t v16 = result + 6 * a2;
    uint64_t v17 = result + 4 * a2;
    uint64_t v18 = result + 2 * a2;
    do
    {
      unsigned long long v19 = (int32x4_t *)(a5 + 4 * (v9 >> 3) * a6);
      uint8x16_t v20 = (int32x4_t *)(a7 + 4 * (v9 >> 3) * a8);
      if ((int)v13 >= 1)
      {
        for (uint64_t i = 0; i < v13; i += 32)
        {
          uint64_t v22 = (const char *)(v18 + i);
          unsigned long long v23 = (unsigned __int128)vld2q_s8(v22);
          int8x16_t v24 = (const char *)(result + i);
          unsigned long long v25 = (unsigned __int128)vld2q_s8(v24);
          int v26 = (const char *)(v17 + i);
          int v27 = (const char *)(v16 + i);
          unsigned long long v28 = (unsigned __int128)vld2q_s8(v26);
          unsigned long long v29 = (unsigned __int128)vld2q_s8(v27);
          int16x8_t v30 = (int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v23), (uint8x16_t)v25);
          int16x8_t v31 = (int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v29), (uint8x16_t)v28);
          int32x4_t v32 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(v31, v30));
          uint8x16_t v33 = (uint8x16_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u16((uint16x8_t)v30, 2uLL), (int8x16_t)xmmword_1BBB6FC40);
          uint8x16_t v34 = (uint8x16_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u16((uint16x8_t)v31, 2uLL), (int8x16_t)xmmword_1BBB6FC40);
          *v19++ = vshlq_n_s32(v32, 2uLL);
          int32x4_t v35 = (int32x4_t)vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(*(uint8x8_t *)&v23, *(uint8x8_t *)v33.i8), *(uint8x8_t *)&v25, *(uint8x8_t *)v33.i8), *(uint8x8_t *)&v28, *(uint8x8_t *)v34.i8), *(uint8x8_t *)&v29, *(uint8x8_t *)v34.i8))), 2uLL);
          int32x4_t v36 = (int32x4_t)vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabdl_high_u8((uint8x16_t)v23, v33), (uint8x16_t)v25, v33), (uint8x16_t)v28, v34), (uint8x16_t)v29, v34))), 2uLL);
          *v20++ = vuzp1q_s32(v35, v36);
          *a9 += vaddvq_s64(vaddq_s64((int64x2_t)v36, (int64x2_t)v35));
        }
      }
      if ((int)v13 < a3)
      {
        signed int v37 = (const char *)(result + v13);
        int v38 = (const char *)(result + v13 + v10);
        long long v39 = (const char *)(result + v13 + v11);
        uint8x8_t v41 = (uint8x8_t)*(_OWORD *)vld2_s8(v37).val;
        int v40 = &v37[v12];
        uint8x8_t v42 = (uint8x8_t)*(_OWORD *)vld2_s8(v38).val;
        uint8x8_t v43 = (uint8x8_t)*(_OWORD *)vld2_s8(v39).val;
        uint8x8_t v44 = (uint8x8_t)*(_OWORD *)vld2_s8(v40).val;
        int16x4_t v45 = (int16x4_t)vpadal_u8(vpaddl_u8(v42), v41);
        int16x4_t v46 = (int16x4_t)vpadal_u8(vpaddl_u8(v44), v43);
        *(int32x2_t *)v19->i8 = vshl_n_s32((int32x2_t)vpaddl_u16((uint16x4_t)vadd_s16(v46, v45)), 2uLL);
        int8x8_t v47 = (int8x8_t)vrshr_n_u16((uint16x4_t)v45, 2uLL);
        uint8x8_t v48 = (uint8x8_t)vtrn1_s8(v47, v47);
        int8x8_t v49 = (int8x8_t)vrshr_n_u16((uint16x4_t)v46, 2uLL);
        uint8x8_t v50 = (uint8x8_t)vtrn1_s8(v49, v49);
        int64x2_t v51 = vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(v42, v48), v41, v48), v43, v50), v44, v50))), 2uLL);
        *(int32x2_t *)v20->i8 = vmovn_s64(v51);
        *a9 += vaddvq_s64(v51);
      }
      result += v14;
      v9 += 8;
      v16 += v14;
      v17 += v14;
      v18 += v14;
    }
    while (v9 < v15);
  }
  return result;
}

int8x8_t *sub_1BBAE2A8C(int8x8_t *result, int a2, int a3, _DWORD *a4, signed int a5, int a6)
{
  if (a3 >= 1)
  {
    int v6 = 0;
    float v7 = (float)(int)a4[3];
    int v8 = (int)v7;
    int v9 = a4[1] - (int)(float)((float)(v7 * 0.0) * 0.5);
    unsigned int v10 = v9 & ~(v9 >> 31);
    float v11 = (float)(int)a4[2];
    unsigned int v12 = (int)v11;
    int v13 = a2 + 14;
    if (a2 >= -7) {
      int v13 = a2 + 7;
    }
    uint64_t v14 = (uint64_t)v13 >> 3;
    int16x8_t v15 = vdupq_n_s16((*a4 - (int)(float)((float)(v11 * 0.0) * 0.5)) & ~((*a4
                                                                                      - (int)(float)((float)(v11 * 0.0) * 0.5)) >> 31));
    int16x8_t v16 = vdupq_n_s16(v12);
    float v17 = (float)a6;
    float v18 = (float)a5;
    int8x16_t v19 = (int8x16_t)vdupq_n_s32(a5);
    __asm { FMOV            V6.4S, #16.0 }
    float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    __asm { FMOV            V17.4S, #1.0 }
    do
    {
      int v27 = v6 | 4;
      if ((int)((v6 | 4) - v10) >= 0) {
        unsigned int v28 = (v6 | 4) - v10;
      }
      else {
        unsigned int v28 = v10 - (v6 | 4);
      }
      int v29 = (v6 | 4) - v10 - v8;
      if (v29 < 0) {
        int v29 = v8 - ((v6 | 4) - v10);
      }
      if (v29 >= v28) {
        int v29 = v28;
      }
      if (v27 < (int)(v10 + v8) && v27 > v10) {
        int v29 = 0;
      }
      if (a2 >= 1)
      {
        signed int v31 = 0;
        int32x4_t v32 = vdupq_n_s32(v29 * v29);
        uint8x16_t v33 = result;
        do
        {
          int16x8_t v34 = vsubq_s16((int16x8_t)vorrq_s8((int8x16_t)vdupq_n_s16(v31), (int8x16_t)xmmword_1BBB6FC50), v15);
          int16x8_t v35 = vsubq_s16(v34, v16);
          int16x8_t v36 = (int16x8_t)vandq_s8((int8x16_t)vcgezq_s16((int16x8_t)veorq_s8((int8x16_t)v35, (int8x16_t)v34)), (int8x16_t)vminq_s16(vabsq_s16(v34), vabsq_s16(v35)));
          int32x4_t v37 = vmlal_s16(v32, *(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8);
          int32x4_t v38 = vmlal_high_s16(v32, v36, v36);
          float32x4_t v39 = vmulq_f32(vmaxq_f32(vsubq_f32(_Q6, vsqrtq_f32(vcvtq_f32_s32(v37))), (float32x4_t)0), v25);
          float32x4_t v40 = vmlaq_n_f32(vmulq_n_f32(vsubq_f32(_Q17, v39), v17), v39, v18);
          int8x16_t v41 = (int8x16_t)vceqzq_s32(v37);
          float32x4_t v42 = vmulq_f32(vmaxq_f32(vsubq_f32(_Q6, vsqrtq_f32(vcvtq_f32_s32(v38))), (float32x4_t)0), v25);
          *v33++ = vqmovn_s16(vqmovn_high_s32(vqmovn_s32((int32x4_t)vbslq_s8(v41, v19, (int8x16_t)vcvtq_s32_f32(v40))), (int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v38), v19, (int8x16_t)vcvtq_s32_f32(vmlaq_n_f32(vmulq_n_f32(vsubq_f32(_Q17, v42), v17), v42, v18)))));
          v31 += 64;
        }
        while (v31 < a2);
      }
      double result = (int8x8_t *)((char *)result + v14);
      v6 += 8;
    }
    while (v6 < a3);
  }
  return result;
}

uint64_t sub_1BBAE2C24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = 4 * a2;
  uint64_t v8 = a7 + 3 * a6;
  uint64_t v9 = a7 + 2 * a6;
  uint64_t v10 = 4 * a4;
  uint64_t v11 = 4 * a6;
  uint64_t v12 = a7 + a6;
  uint64_t v13 = a5 + 3 * a4;
  uint64_t v14 = a5 + a4;
  uint64_t v15 = a3 + 3 * a2;
  uint64_t v16 = a3 + a2;
  uint64_t v17 = a5 + 2 * a4;
  uint64_t v18 = a3 + 2 * a2;
  do
  {
    unint64_t v19 = -8;
    do
    {
      int8x8_t v20 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v16 + v19 + 8), 1uLL), *(uint8x8_t *)(v14 + v19 + 8)));
      int8x8_t v21 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v18 + v19 + 8), 1uLL), *(uint8x8_t *)(v17 + v19 + 8)));
      int8x8_t v22 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v15 + v19 + 8), 1uLL), *(uint8x8_t *)(v13 + v19 + 8)));
      *(int8x8_t *)(a7 + v19 + 8) = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(a3 + v19 + 8), 1uLL), *(uint8x8_t *)(a5 + v19 + 8)));
      *(int8x8_t *)(v12 + v19 + 8) = v20;
      *(int8x8_t *)(v9 + v19 + 8) = v21;
      *(int8x8_t *)(v8 + v19 + 8) = v22;
      v19 += 8;
    }
    while (v19 < 0x38);
    a3 += v7;
    a5 += v10;
    a7 += v11;
    v8 += v11;
    v9 += v11;
    v12 += v11;
    v13 += v10;
    v17 += v10;
    v14 += v10;
    v15 += v7;
    v18 += v7;
    v16 += v7;
    BOOL v23 = __OFSUB__(result, 4);
    double result = (result - 4);
  }
  while (!(((int)result < 0) ^ v23 | (result == 0)));
  return result;
}

uint64_t sub_1BBAE2D44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = 4 * a2;
  uint64_t v8 = a7 + 3 * a6;
  uint64_t v9 = a7 + 2 * a6;
  uint64_t v10 = 4 * a4;
  uint64_t v11 = 4 * a6;
  uint64_t v12 = a7 + a6;
  uint64_t v13 = a5 + 3 * a4;
  uint64_t v14 = a5 + a4;
  uint64_t v15 = a3 + 3 * a2;
  uint64_t v16 = a3 + a2;
  uint64_t v17 = a5 + 2 * a4;
  uint64_t v18 = a3 + 2 * a2;
  do
  {
    unint64_t v19 = -8;
    do
    {
      int8x8_t v20 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v16 + v19 + 8), 1uLL), *(uint8x8_t *)(v14 + v19 + 8)));
      int8x8_t v21 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v18 + v19 + 8), 1uLL), *(uint8x8_t *)(v17 + v19 + 8)));
      int8x8_t v22 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v15 + v19 + 8), 1uLL), *(uint8x8_t *)(v13 + v19 + 8)));
      *(int8x8_t *)(a7 + v19 + 8) = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(a3 + v19 + 8), 1uLL), *(uint8x8_t *)(a5 + v19 + 8)));
      *(int8x8_t *)(v12 + v19 + 8) = v20;
      *(int8x8_t *)(v9 + v19 + 8) = v21;
      *(int8x8_t *)(v8 + v19 + 8) = v22;
      v19 += 8;
    }
    while (v19 < 0x18);
    a3 += v7;
    a5 += v10;
    a7 += v11;
    v8 += v11;
    v9 += v11;
    v12 += v11;
    v13 += v10;
    v17 += v10;
    v14 += v10;
    v15 += v7;
    v18 += v7;
    v16 += v7;
    BOOL v23 = __OFSUB__(result, 4);
    double result = (result - 4);
  }
  while (!(((int)result < 0) ^ v23 | (result == 0)));
  return result;
}

uint64_t sub_1BBAE2E64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  do
  {
    uint64_t v7 = 0;
    char v8 = 1;
    do
    {
      char v9 = v8;
      uint64_t v10 = (uint8x8_t *)(a3 + v7);
      uint64_t v11 = (uint8x8_t *)(a5 + v7);
      uint64_t v12 = (int8x8_t *)(a7 + v7);
      int8x8_t v13 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)((char *)v10 + a2), 1uLL), *(uint8x8_t *)((char *)v11 + a4)));
      int8x8_t v14 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)((char *)v10 + 2 * a2), 1uLL), *(uint8x8_t *)((char *)v11 + 2 * a4)));
      int8x8_t v15 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)((char *)v10 + 3 * a2), 1uLL), *(uint8x8_t *)((char *)v11 + 3 * a4)));
      *uint64_t v12 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*v10, 1uLL), *v11));
      *(int8x8_t *)((char *)v12 + a6) = v13;
      *(int8x8_t *)((char *)v12 + 2 * a6) = v14;
      *(int8x8_t *)((char *)v12 + 3 * a6) = v15;
      uint64_t v7 = 8;
      char v8 = 0;
    }
    while ((v9 & 1) != 0);
    a3 += 4 * a2;
    a5 += 4 * a4;
    a7 += 4 * a6;
    BOOL v16 = __OFSUB__(result, 4);
    double result = (result - 4);
  }
  while (!(((int)result < 0) ^ v16 | (result == 0)));
  return result;
}

int8x8_t sub_1BBAE2F2C(int a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, int8x8_t *a7)
{
  int v7 = a1 + 4;
  do
  {
    char v8 = (uint8x8_t *)((char *)a3 + a2 + a2);
    uint8x8_t v9 = *v8;
    uint64_t v10 = (uint8x8_t *)((char *)v8 + a2);
    uint64_t v11 = (uint8x8_t *)((char *)a5 + a4 + a4);
    uint8x8_t v12 = *v11;
    int8x8_t v13 = (uint8x8_t *)((char *)v11 + a4);
    int16x8_t v14 = (int16x8_t)vsubw_u8(vshll_n_u8(*v10, 1uLL), *v13);
    int8x8_t v15 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)((char *)a3 + a2), 1uLL), *(uint8x8_t *)((char *)a5 + a4)));
    *a7 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*a3, 1uLL), *a5));
    *(int8x8_t *)((char *)a7 + a6) = v15;
    BOOL v16 = (int8x8_t *)((char *)a7 + a6 + a6);
    *BOOL v16 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(v9, 1uLL), v12));
    uint64_t v17 = (int8x8_t *)((char *)v16 + a6);
    v7 -= 4;
    int8x8_t result = vqmovun_s16(v14);
    *uint64_t v17 = result;
    a3 = (uint8x8_t *)((char *)v10 + a2);
    a5 = (uint8x8_t *)((char *)v13 + a4);
    a7 = (int8x8_t *)((char *)v17 + a6);
  }
  while (v7 > 4);
  return result;
}

uint8x16_t sub_1BBAE2FD0(int a1, uint64_t a2, uint8x16_t *a3, uint64_t a4, uint8x16_t *a5, uint64_t a6, uint8x16_t *a7)
{
  int v7 = a1 + 1;
  char v8 = a3 + 2;
  uint8x8_t v9 = a5 + 2;
  uint64_t v10 = a7 + 2;
  do
  {
    uint8x16_t result = vrhaddq_u8(v8[-2], v9[-2]);
    uint8x16_t v12 = vrhaddq_u8(v8[-1], v9[-1]);
    uint8x16_t v13 = vrhaddq_u8(*v8, *v9);
    uint8x16_t v14 = vrhaddq_u8(v8[1], v9[1]);
    v10[-2] = result;
    v10[-1] = v12;
    --v7;
    *uint64_t v10 = v13;
    v10[1] = v14;
    char v8 = (uint8x16_t *)((char *)v8 + a2);
    uint8x8_t v9 = (uint8x16_t *)((char *)v9 + a4);
    uint64_t v10 = (uint8x16_t *)((char *)v10 + a6);
  }
  while (v7 > 1);
  return result;
}

uint8x16_t sub_1BBAE3024(int a1, uint64_t a2, uint8x16_t *a3, uint64_t a4, uint8x16_t *a5, uint64_t a6, uint8x16_t *a7)
{
  int v7 = a1 + 2;
  do
  {
    uint8x16_t result = vrhaddq_u8(*a3, *a5);
    uint8x16_t v9 = vrhaddq_u8(a3[1], a5[1]);
    uint8x16_t v10 = vrhaddq_u8(*(uint8x16_t *)((char *)a3 + a2), *(uint8x16_t *)((char *)a5 + a4));
    uint8x16_t v11 = vrhaddq_u8(*(uint8x16_t *)((char *)&a3[1] + a2), *(uint8x16_t *)((char *)&a5[1] + a4));
    *a7 = result;
    a7[1] = v9;
    uint8x16_t v12 = (uint8x16_t *)((char *)a7 + a6);
    v7 -= 2;
    *uint8x16_t v12 = v10;
    v12[1] = v11;
    a3 = (uint8x16_t *)((char *)a3 + a2 + a2);
    a5 = (uint8x16_t *)((char *)a5 + a4 + a4);
    a7 = (uint8x16_t *)((char *)a7 + a6 + a6);
  }
  while (v7 > 2);
  return result;
}

uint8x16_t sub_1BBAE3078(int a1, uint64_t a2, uint8x16_t *a3, uint64_t a4, uint8x16_t *a5, uint64_t a6, uint8x16_t *a7)
{
  int v7 = a1 + 4;
  do
  {
    char v8 = (uint8x16_t *)((char *)a3 + a2 + a2);
    uint8x16_t v9 = *v8;
    uint8x16_t v10 = (uint8x16_t *)((char *)v8 + a2);
    uint8x16_t v11 = *v10;
    uint8x16_t v12 = (uint8x16_t *)((char *)a5 + a4 + a4);
    uint8x16_t v13 = *v12;
    uint8x16_t v14 = (uint8x16_t *)((char *)v12 + a4);
    uint8x16_t v15 = *v14;
    uint8x16_t v16 = vrhaddq_u8(*(uint8x16_t *)((char *)a3 + a2), *(uint8x16_t *)((char *)a5 + a4));
    *a7 = vrhaddq_u8(*a3, *a5);
    *(uint8x16_t *)((char *)a7 + a6) = v16;
    uint64_t v17 = (uint8x16_t *)((char *)a7 + a6 + a6);
    *uint64_t v17 = vrhaddq_u8(v9, v13);
    uint64_t v18 = (uint8x16_t *)((char *)v17 + a6);
    v7 -= 4;
    uint8x16_t result = vrhaddq_u8(v11, v15);
    *uint64_t v18 = result;
    a3 = (uint8x16_t *)((char *)v10 + a2);
    a5 = (uint8x16_t *)((char *)v14 + a4);
    a7 = (uint8x16_t *)((char *)v18 + a6);
  }
  while (v7 > 4);
  return result;
}

uint8x8_t sub_1BBAE30FC(int a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, uint8x8_t *a7)
{
  int v7 = a1 + 4;
  do
  {
    uint8x8_t v8 = *(uint8x8_t *)((char *)a3 + a2);
    uint8x16_t v9 = (uint8x8_t *)((char *)a3 + a2 + a2);
    uint8x8_t v10 = *v9;
    uint8x16_t v11 = (uint8x8_t *)((char *)v9 + a2);
    uint8x8_t v12 = *v11;
    uint8x8_t v13 = *(uint8x8_t *)((char *)a5 + a4);
    uint8x16_t v14 = (uint8x8_t *)((char *)a5 + a4 + a4);
    uint8x8_t v15 = *v14;
    uint8x16_t v16 = (uint8x8_t *)((char *)v14 + a4);
    uint8x8_t v17 = *v16;
    *a7 = vrhadd_u8(*a3, *a5);
    *(uint8x8_t *)((char *)a7 + a6) = vrhadd_u8(v8, v13);
    uint64_t v18 = (uint8x8_t *)((char *)a7 + a6 + a6);
    *uint64_t v18 = vrhadd_u8(v10, v15);
    unint64_t v19 = (uint8x8_t *)((char *)v18 + a6);
    v7 -= 4;
    uint8x8_t result = vrhadd_u8(v12, v17);
    *unint64_t v19 = result;
    a3 = (uint8x8_t *)((char *)v11 + a2);
    a5 = (uint8x8_t *)((char *)v16 + a4);
    a7 = (uint8x8_t *)((char *)v19 + a6);
  }
  while (v7 > 4);
  return result;
}

uint8x16_t sub_1BBAE3180(int a1, uint64_t a2, __int32 *a3, uint64_t a4, __int32 *a5, uint64_t a6, _DWORD *a7)
{
  int v7 = a1 + 4;
  do
  {
    v8.i32[0] = *a3;
    uint8x16_t v9 = (__int32 *)((char *)a3 + a2);
    v8.i32[1] = *v9;
    uint8x8_t v10 = (__int32 *)((char *)v9 + a2);
    v8.i32[2] = *v10;
    uint8x16_t v11 = (__int32 *)((char *)v10 + a2);
    v8.i32[3] = *v11;
    a3 = (__int32 *)((char *)v11 + a2);
    v12.i32[0] = *a5;
    uint8x8_t v13 = (__int32 *)((char *)a5 + a4);
    v12.i32[1] = *v13;
    uint8x16_t v14 = (__int32 *)((char *)v13 + a4);
    v12.i32[2] = *v14;
    uint8x8_t v15 = (__int32 *)((char *)v14 + a4);
    v12.i32[3] = *v15;
    a5 = (__int32 *)((char *)v15 + a4);
    uint8x16_t result = vrhaddq_u8(v8, v12);
    *a7 = result.i32[0];
    *(_DWORD *)((char *)a7 + a6) = result.i32[1];
    uint8x8_t v17 = (_DWORD *)((char *)a7 + a6 + a6);
    *uint8x8_t v17 = result.i32[2];
    uint64_t v18 = (_DWORD *)((char *)v17 + a6);
    v7 -= 4;
    *uint64_t v18 = result.i32[3];
    a7 = (_DWORD *)((char *)v18 + a6);
  }
  while (v7 > 4);
  return result;
}

uint64_t sub_1BBAE31E0(uint64_t result, int a2, __int32 a3, int16x4_t *a4, uint64_t a5, int16x8_t *a6, uint64_t a7, int16x4_t a8)
{
  if ((int)result >= 1)
  {
    a8.i32[0] = a3;
    uint8x16_t v8 = a4 + 2;
    int32x4_t v9 = vdupq_n_s32(-a2);
    uint64_t v10 = 2 * a5;
    uint8x16_t v11 = a6 + 1;
    uint64_t v12 = 2 * a7;
    int v13 = result;
    do
    {
      int16x8_t v14 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*v8, a8, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v8->i8, a8, 0), v9));
      v11[-1] = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(v8[-2], a8, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v8[-2].i8, a8, 0), v9));
      *uint8x16_t v11 = v14;
      uint8x16_t v8 = (int16x4_t *)((char *)v8 + v10);
      uint8x16_t v11 = (int16x8_t *)((char *)v11 + v12);
      --v13;
    }
    while (v13);
    uint8x8_t v15 = a4 + 6;
    uint8x16_t v16 = a6 + 3;
    do
    {
      int16x8_t v17 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*v15, a8, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v15->i8, a8, 0), v9));
      v16[-1] = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(v15[-2], a8, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v15[-2].i8, a8, 0), v9));
      *uint8x16_t v16 = v17;
      uint8x8_t v15 = (int16x4_t *)((char *)v15 + v10);
      uint8x16_t v16 = (int16x8_t *)((char *)v16 + v12);
      uint8x16_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

uint64_t sub_1BBAE32A4(uint64_t result, int a2, __int32 a3, int16x4_t *a4, uint64_t a5, int16x8_t *a6, uint64_t a7, double a8, int16x4_t a9)
{
  if ((int)result >= 1)
  {
    int32x4_t v9 = vdupq_n_s32(-a2);
    a9.i32[0] = a3;
    uint64_t v10 = a4 + 2;
    uint8x16_t v11 = a6 + 1;
    do
    {
      int16x8_t v12 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*v10, a9, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v10->i8, a9, 0), v9));
      v11[-1] = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(v10[-2], a9, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v10[-2].i8, a9, 0), v9));
      *uint8x16_t v11 = v12;
      uint64_t v10 = (int16x4_t *)((char *)v10 + 2 * a5);
      uint8x16_t v11 = (int16x8_t *)((char *)v11 + 2 * a7);
      uint8x16_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

uint64_t sub_1BBAE3314(uint64_t result, int a2, __int32 a3, int16x4_t *a4, uint64_t a5, int16x8_t *a6, uint64_t a7, double a8, int16x4_t a9)
{
  if ((int)result >= 1)
  {
    int v9 = 0;
    int32x4_t v10 = vdupq_n_s32(-a2);
    a9.i32[0] = a3;
    do
    {
      int16x8_t v11 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)((char *)a4 + 2 * a5), a9, 0), v10)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)&a4->i8[2 * a5], a9, 0), v10));
      *a6 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*a4, a9, 0), v10)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)a4->i8, a9, 0), v10));
      *(int16x8_t *)((char *)a6 + 2 * a7) = v11;
      v9 += 2;
      a4 = (int16x4_t *)((char *)a4 + 4 * a5);
      a6 = (int16x8_t *)((char *)a6 + 4 * a7);
    }
    while (v9 < (int)result);
  }
  return result;
}

uint64_t sub_1BBAE3394(uint64_t result, int a2, __int32 a3, int16x4_t *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, double a8, int16x4_t a9)
{
  if ((int)result >= 1)
  {
    int v9 = 0;
    int32x4_t v10 = vdupq_n_s32(-a2);
    a9.i32[0] = a3;
    do
    {
      int16x4_t v11 = vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)((char *)a4 + 2 * a5), a9, 0), v10));
      *a6 = vqmovn_s32(vrshlq_s32(vmull_lane_s16(*a4, a9, 0), v10));
      *(int16x4_t *)((char *)a6 + 2 * a7) = v11;
      v9 += 2;
      a4 = (int16x4_t *)((char *)a4 + 4 * a5);
      a6 = (int16x4_t *)((char *)a6 + 4 * a7);
    }
    while (v9 < (int)result);
  }
  return result;
}

uint64_t sub_1BBAE33FC(int a1, unsigned int a2, unsigned int a3, __int32 a4, int16x8_t *a5, uint64_t a6, int8x16_t *a7, uint64_t a8, double a9, double a10, double a11, uint16x4_t a12, int32x4_t *a13, uint64_t a14)
{
  BOOL v27 = sub_1BBAE34A4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return v27 | sub_1BBAE34A4(a1, a2, a3, a4, a5 + 2, a6, a7 + 2, a8, v22, v23, v24, v25, a13 + 4, a14);
}

BOOL sub_1BBAE34A4(int a1, unsigned int a2, unsigned int a3, __int32 a4, int16x8_t *a5, uint64_t a6, int8x16_t *a7, uint64_t a8, double a9, double a10, double a11, uint16x4_t a12, int32x4_t *a13, uint64_t a14)
{
  if (a1 < 1)
  {
    int8x16_t v21 = 0uLL;
  }
  else
  {
    uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(a2);
    int32x4_t v15 = vdupq_n_s32(-a3);
    int32x4_t v16 = vdupq_n_s32(a3);
    a12.i32[0] = a4;
    int32x4_t v17 = vdupq_n_s32(8 - a3);
    uint64_t v18 = a5 + 1;
    unint64_t v19 = a13 + 2;
    int8x8_t v20 = a7 + 1;
    int8x16_t v21 = 0uLL;
    do
    {
      int16x8_t v22 = v18[-1];
      int16x8_t v23 = vcltzq_s16(v22);
      int16x8_t v24 = vcltzq_s16(*v18);
      uint16x8_t v25 = (uint16x8_t)vabsq_s16(v22);
      uint16x8_t v26 = (uint16x8_t)vabsq_s16(*v18);
      int32x4_t v27 = (int32x4_t)vmull_lane_u16(*(uint16x4_t *)v25.i8, a12, 0);
      int32x4_t v28 = (int32x4_t)vmlal_lane_u16(v14, *(uint16x4_t *)v25.i8, a12, 0);
      int32x4_t v29 = (int32x4_t)vmull_high_lane_u16(v25, a12, 0);
      int32x4_t v30 = (int32x4_t)vmlal_high_lane_u16(v14, v25, a12, 0);
      int32x4_t v31 = (int32x4_t)vmull_lane_u16(*(uint16x4_t *)v26.i8, a12, 0);
      int32x4_t v32 = (int32x4_t)vmlal_lane_u16(v14, *(uint16x4_t *)v26.i8, a12, 0);
      int32x4_t v33 = (int32x4_t)vmull_high_lane_u16(v26, a12, 0);
      int32x4_t v34 = (int32x4_t)vmlal_high_lane_u16(v14, v26, a12, 0);
      int32x4_t v35 = vshlq_s32(v28, v15);
      int32x4_t v36 = vshlq_s32(v30, v15);
      int32x4_t v37 = vshlq_s32(v32, v15);
      int32x4_t v38 = vshlq_s32(v34, v15);
      int8x16_t v39 = (int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(v35), v36), (int8x16_t)v23), v23);
      int8x16_t v40 = (int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(v37), v38), (int8x16_t)v24), v24);
      v20[-1] = v39;
      *int8x8_t v20 = v40;
      v19[-2] = vshlq_s32(vsubq_s32(v27, vshlq_s32(v35, v16)), v17);
      v19[-1] = vshlq_s32(vsubq_s32(v29, vshlq_s32(v36, v16)), v17);
      *unint64_t v19 = vshlq_s32(vsubq_s32(v31, vshlq_s32(v37, v16)), v17);
      v19[1] = vshlq_s32(vsubq_s32(v33, vshlq_s32(v38, v16)), v17);
      int8x16_t v21 = vorrq_s8(vorrq_s8(v39, v21), v40);
      uint64_t v18 = (int16x8_t *)((char *)v18 + 2 * a6);
      unint64_t v19 = (int32x4_t *)((char *)v19 + 4 * a14);
      int8x8_t v20 = (int8x16_t *)((char *)v20 + 2 * a8);
      --a1;
    }
    while (a1);
  }
  return vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)) != 0;
}

BOOL sub_1BBAE35D8(int a1, unsigned int a2, unsigned int a3, __int32 a4, int16x8_t *a5, uint64_t a6, int8x16_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, uint16x4_t a14, int32x4_t *a15, uint64_t a16)
{
  if (a1 < 1)
  {
    int8x16_t v21 = 0uLL;
  }
  else
  {
    uint32x4_t v16 = (uint32x4_t)vdupq_n_s32(a2);
    int32x4_t v17 = vdupq_n_s32(-a3);
    int32x4_t v18 = vdupq_n_s32(a3);
    int32x4_t v19 = vdupq_n_s32(8 - a3);
    a14.i32[0] = a4;
    int8x8_t v20 = a15 + 1;
    int8x16_t v21 = 0uLL;
    do
    {
      int16x8_t v22 = vcltzq_s16(*a5);
      uint16x8_t v23 = (uint16x8_t)vabsq_s16(*a5);
      int32x4_t v24 = (int32x4_t)vmull_lane_u16(*(uint16x4_t *)v23.i8, a14, 0);
      int32x4_t v25 = (int32x4_t)vmull_high_lane_u16(v23, a14, 0);
      int32x4_t v26 = (int32x4_t)vmlal_high_lane_u16(v16, v23, a14, 0);
      int32x4_t v27 = vshlq_s32((int32x4_t)vmlal_lane_u16(v16, *(uint16x4_t *)v23.i8, a14, 0), v17);
      int32x4_t v28 = vshlq_s32(v26, v17);
      int8x16_t v29 = (int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(v27), v28), (int8x16_t)v22), v22);
      *a7 = v29;
      v20[-1] = vshlq_s32(vsubq_s32(v24, vshlq_s32(v27, v18)), v19);
      *int8x8_t v20 = vshlq_s32(vsubq_s32(v25, vshlq_s32(v28, v18)), v19);
      int8x16_t v21 = vorrq_s8(v29, v21);
      a5 = (int16x8_t *)((char *)a5 + 2 * a6);
      a7 = (int8x16_t *)((char *)a7 + 2 * a8);
      int8x8_t v20 = (int32x4_t *)((char *)v20 + 4 * a16);
      --a1;
    }
    while (a1);
  }
  return vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)) != 0;
}

BOOL sub_1BBAE36AC(int a1, unsigned int a2, unsigned int a3, __int32 a4, int16x4_t *a5, uint64_t a6, void *a7, uint64_t a8, double a9, double a10, double a11, uint16x4_t a12, int32x4_t *a13, uint64_t a14)
{
  if (a1 < 1)
  {
    int8x8_t v19 = 0;
  }
  else
  {
    uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(a2);
    int32x4_t v15 = vdupq_n_s32(-a3);
    a12.i32[0] = a4;
    int32x4_t v17 = vdupq_n_s32(a3);
    int32x4_t v18 = vdupq_n_s32(8 - a3);
    int8x8_t v19 = 0;
    do
    {
      int16x4_t v20 = vcltz_s16(*a5);
      uint16x4_t v21 = (uint16x4_t)vabs_s16(*a5);
      int32x4_t v22 = (int32x4_t)vmull_lane_u16(v21, a12, 0);
      int32x4_t v23 = vshlq_s32((int32x4_t)vmlal_lane_u16(v14, v21, a12, 0), v15);
      int32x4_t v24 = vshlq_s32(vsubq_s32(v22, vshlq_s32(v23, v17)), v18);
      *(int16x4_t *)v23.i8 = vsub_s16((int16x4_t)veor_s8((int8x8_t)vqmovn_s32(v23), (int8x8_t)v20), v20);
      *a7 = v23.i64[0];
      *a13 = v24;
      int8x8_t v19 = vorr_s8(*(int8x8_t *)v23.i8, v19);
      a5 = (int16x4_t *)((char *)a5 + 2 * a6);
      a7 = (void *)((char *)a7 + 2 * a8);
      a13 = (int32x4_t *)((char *)a13 + 4 * a14);
      --a1;
    }
    while (a1);
  }
  return *(void *)&v19 != 0;
}

uint64_t sub_1BBAE3754(uint64_t a1, uint64_t a2, int a3)
{
  v55[2] = *MEMORY[0x1E4F143B8];
  if (a3 < 4) {
    return 0xFFFFFFFFLL;
  }
  int v4 = 1 << a3;
  if (a3 == 31)
  {
    int32x4_t v5 = 0uLL;
    uint16x8_t v6 = 0uLL;
    uint16x8_t v7 = 0uLL;
    int32x4_t v8 = 0uLL;
  }
  else
  {
    int v9 = 0;
    if (v4 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = 1 << a3;
    }
    int8x16_t v11 = 0uLL;
    uint16x8_t v7 = 0uLL;
    int32x4_t v12 = 0uLL;
    v13.i64[0] = 0x1010101010101010;
    v13.i64[1] = 0x1010101010101010;
    v14.i64[0] = 0x101010101010101;
    v14.i64[1] = 0x101010101010101;
    int32x4_t v15 = 0uLL;
    int32x4_t v16 = 0uLL;
    int32x4_t v17 = 0uLL;
    uint64_t v18 = a2;
    uint16x8_t v6 = 0uLL;
    do
    {
      uint64_t v19 = 0;
      uint16x8_t v20 = 0uLL;
      uint16x8_t v21 = 0uLL;
      uint16x8_t v22 = 0uLL;
      int8x16_t v23 = (int8x16_t)xmmword_1BBB6FB30;
      uint16x8_t v24 = 0uLL;
      do
      {
        uint8x16_t v25 = *(uint8x16_t *)(v18 + v19);
        uint16x8_t v21 = vmlal_u8(v21, *(uint8x8_t *)v25.i8, *(uint8x8_t *)v23.i8);
        uint16x8_t v24 = vmlal_u8(v24, *(uint8x8_t *)v25.i8, *(uint8x8_t *)v11.i8);
        uint16x8_t v6 = vaddw_u8(v6, *(uint8x8_t *)v25.i8);
        uint16x8_t v20 = vmlal_high_u8(v20, v25, (uint8x16_t)v23);
        uint16x8_t v22 = vmlal_high_u8(v22, v25, (uint8x16_t)v11);
        uint16x8_t v7 = vaddw_high_u8(v7, v25);
        int8x16_t v23 = vaddq_s8(v23, v13);
        v19 += 16;
      }
      while (v19 < v4);
      int32x4_t v15 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v21.i8), v21);
      int32x4_t v12 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v20.i8), v20);
      int32x4_t v17 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v24.i8), v24);
      int32x4_t v16 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v22.i8), v22);
      int8x16_t v11 = vaddq_s8(v11, v14);
      v18 += a1;
      ++v9;
    }
    while (v9 != v10);
    int32x4_t v5 = vaddq_s32(v12, v15);
    int32x4_t v8 = vaddq_s32(v16, v17);
  }
  uint64_t v26 = 0;
  uint64_t v27 = vaddvq_s32(v5);
  unsigned int v28 = vaddvq_s32(v8);
  unsigned int v29 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16(vpaddlq_u16(v6), *(uint16x4_t *)v7.i8), v7));
  int32x4_t v30 = (int *)((char *)&unk_1BBB83DCC + 36 * (a3 - 2) + 8);
  do
  {
    v55[v26++ - 1] = *(v30 - 2) * v27 + *(v30 - 1) * (unint64_t)v28 + *v30 * (unint64_t)v29;
    v30 += 3;
  }
  while (v26 != 3);
  int32x4_t v31 = 0uLL;
  if (a3 != 31)
  {
    int v32 = 0;
    int64x2_t v33 = vdupq_n_s64(v54);
    int64x2_t v34 = vaddq_s64(v33, v33);
    int64x2_t v35 = vshlq_n_s64(v33, 2uLL);
    int64x2_t v36 = vshlq_n_s64(v33, 3uLL);
    int64x2_t v37 = vdupq_lane_s64(v55[1], 0);
    int32x4_t v38 = 0uLL;
    v39.i64[0] = 0;
    v39.i64[1] = v54;
    int8x16_t v40 = (const double *)v55;
    int64x2_t v41 = (int64x2_t)vld1q_dup_f64(v40);
    uint64_t v42 = v4;
    if (v4 <= 1) {
      int v4 = 1;
    }
    int32x4_t v43 = 0uLL;
    do
    {
      uint64_t v44 = 0;
      int64x2_t v45 = vaddq_s64(v37, v39);
      do
      {
        int64x2_t v46 = vaddq_s64(v45, v34);
        int64x2_t v47 = vaddq_s64(v46, v35);
        int64x2_t v48 = vaddq_s64(v45, v36);
        int64x2_t v49 = vaddq_s64(v46, v36);
        int16x8_t v50 = vuzp1q_s16((int16x8_t)vshrn_high_n_s64(vshrn_n_s64(v45, 0x18uLL), v46, 0x18uLL), (int16x8_t)vshrn_high_n_s64(vshrn_n_s64(vaddq_s64(v45, v35), 0x18uLL), v47, 0x18uLL));
        uint8x16_t v51 = *(uint8x16_t *)(a2 + v44);
        int16x8_t v52 = vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v51.i8), v50);
        int16x8_t v53 = vsubq_s16((int16x8_t)vmovl_high_u8(v51), vuzp1q_s16((int16x8_t)vshrn_high_n_s64(vshrn_n_s64(v48, 0x18uLL), v49, 0x18uLL), (int16x8_t)vshrn_high_n_s64(vshrn_n_s64(vaddq_s64(v48, v35), 0x18uLL), vaddq_s64(v47, v36), 0x18uLL)));
        int32x4_t v38 = vmlal_high_s16(vmlal_s16(v38, *(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8), v52, v52);
        int32x4_t v43 = vmlal_high_s16(vmlal_s16(v43, *(int16x4_t *)v53.i8, *(int16x4_t *)v53.i8), v53, v53);
        v44 += 16;
        int64x2_t v45 = vaddq_s64(v48, v36);
      }
      while (v44 < v42);
      int64x2_t v37 = vaddq_s64(v41, v37);
      a2 += a1;
      ++v32;
    }
    while (v32 != v4);
    int32x4_t v31 = vaddq_s32(v38, v43);
  }
  return vaddvq_s32(v31) >> (2 * a3);
}

uint64_t sub_1BBAE39FC(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  LODWORD(v4) = 0;
  int32x4_t v5 = (int8x16_t *)((char *)&unk_1BBB83D60 + 32 * a2);
  int8x16_t v6 = *v5;
  int8x16_t v7 = v5[1];
  do
  {
    uint64_t v8 = 0;
    uint64_t v4 = (int)v4;
    char v9 = 1;
    do
    {
      uint64_t v10 = v4;
      int8x16_t v11 = (int64x2_t *)(a1 + 2 * v8);
      int16x8_t v12 = vpaddq_s16(vpaddq_s16((int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(v11[8], v11[12]))), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(*v11, v11[4])))), (int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(v11[8], v11[12]))), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(*v11, v11[4]))))), vpaddq_s16((int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(v11[9], v11[13]))), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(v11[1], v11[5])))), (int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(v11[9], v11[13]))), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(v11[1], v11[5]))))));
      v12.i64[0] = vpaddq_s16(v12, v12).u64[0];
      uint64_t v13 = byte_1BBB83FE0[v10 + 1];
      uint64_t v14 = byte_1BBB83FE0[v10 + 2];
      uint64_t v15 = byte_1BBB83FE0[v10 + 3];
      *(_WORD *)(a4 + 2 * byte_1BBB83FE0[v10]) = v12.i16[0];
      char v16 = v9;
      *(_WORD *)(a4 + 2 * v13) = v12.i16[1];
      *(_WORD *)(a4 + 2 * v14) = v12.i16[2];
      *(_WORD *)(a4 + 2 * v15) = v12.i16[3];
      uint64_t v4 = v10 + 4;
      uint64_t v8 = 16;
      char v9 = 0;
    }
    while ((v16 & 1) != 0);
    a1 += 256;
  }
  while ((int)v10 < 60);
  unsigned int v17 = 15;
  while (1)
  {
    unint64_t v18 = *(void *)(a4 + 8 * v17);
    if (v18) {
      break;
    }
    if (--v17 == -1)
    {
      uint64_t result = 0;
      goto LABEL_10;
    }
  }
  uint64_t result = ((v17 << 6) | 0x3F) - __clz(v18);
LABEL_10:
  unsigned int v20 = byte_1BBB83EA4[(int)result >> 4];
  unsigned int v21 = byte_1BBB83EF0[result & 0xF];
  *a3 = v21 & 3 | (4 * (v20 & 7));
  a3[1] = ((v20 >> 1) & 0x7C) + (v21 >> 2);
  return result;
}

uint64_t sub_1BBAE3B7C(int64x2_t *a1, int a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4 = 0;
  int32x4_t v5 = (int8x16_t *)((char *)&unk_1BBB83D60 + 32 * a2);
  int8x16_t v6 = *v5;
  int8x16_t v7 = v5[1];
  do
  {
    i64 = (const double *)a1[4].i64;
    float64x2x4_t v17 = vld4q_f64(i64);
    v17.val[0] = (float64x2_t)vpaddq_s16(vpaddq_s16((int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)v17.val[0])), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(*a1, a1[2])))), (int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)v17.val[1])), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(*a1, a1[2]))))), vpaddq_s16((int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)v17.val[2])), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(a1[1], a1[3])))), (int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)v17.val[3])), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(a1[1], a1[3]))))));
    *(void *)&v17.val[0].f64[0] = vpaddq_s16((int16x8_t)v17.val[0], (int16x8_t)v17.val[0]).u64[0];
    uint64_t v9 = byte_1BBB83FB0[v4 + 1];
    uint64_t v10 = byte_1BBB83FB0[v4 + 2];
    uint64_t v11 = byte_1BBB83FB0[v4 + 3];
    *(_WORD *)(a4 + 2 * byte_1BBB83FB0[v4]) = LOWORD(v17.val[0].f64[0]);
    *(_WORD *)(a4 + 2 * v9) = WORD1(v17.val[0].f64[0]);
    *(_WORD *)(a4 + 2 * v10) = WORD2(v17.val[0].f64[0]);
    *(_WORD *)(a4 + 2 * v11) = HIWORD(v17.val[0].f64[0]);
    a1 += 8;
    BOOL v12 = v4 >= 0xC;
    v4 += 4;
  }
  while (!v12);
  unsigned int v13 = 3;
  while (1)
  {
    unint64_t v14 = *(void *)(a4 + 8 * v13);
    if (v14) {
      break;
    }
    if (--v13 == -1)
    {
      uint64_t result = 0;
      goto LABEL_9;
    }
  }
  uint64_t result = ((v13 << 6) | 0x3F) - __clz(v14);
LABEL_9:
  unsigned int v16 = byte_1BBB83F10[result & 0xF] + 4 * byte_1BBB83F10[(int)result >> 4];
  *a3 = v16 & 0xF;
  a3[1] = v16 >> 4;
  return result;
}

uint64_t sub_1BBAE3CBC(uint64_t a1, int a2, unsigned int *a3, void *a4)
{
  unint64_t v4 = (const double *)(a1 + 32);
  float64x2x2_t v19 = vld2q_f64(v4);
  int32x4_t v5 = (const double *)(a1 + 64);
  float64x2x2_t v20 = vld2q_f64(v5);
  int8x16_t v6 = (const double *)(a1 + 96);
  float64x2x2_t v21 = vld2q_f64(v6);
  int64x2_t v7 = *(int64x2_t *)(a1 + 16);
  uint64_t v8 = (int8x16_t *)((char *)&unk_1BBB83D60 + 32 * a2);
  int8x16_t v9 = v8[1];
  int16x8_t v10 = (int16x8_t)vorrq_s8(vbicq_s8(v9, (int8x16_t)vceqzq_s16((int16x8_t)v19.val[0])), vbicq_s8(*v8, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(*(int64x2_t *)a1, v7))));
  int16x8_t v11 = (int16x8_t)vorrq_s8(vbicq_s8(v9, (int8x16_t)vceqzq_s16((int16x8_t)v19.val[1])), vbicq_s8(*v8, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(*(int64x2_t *)a1, v7))));
  int16x8_t v12 = (int16x8_t)vorrq_s8(vbicq_s8(v9, (int8x16_t)vceqzq_s16((int16x8_t)v21.val[0])), vbicq_s8(*v8, (int8x16_t)vceqzq_s16((int16x8_t)v20.val[0])));
  int16x8_t v13 = (int16x8_t)vorrq_s8(vbicq_s8(v9, (int8x16_t)vceqzq_s16((int16x8_t)v21.val[1])), vbicq_s8(*v8, (int8x16_t)vceqzq_s16((int16x8_t)v20.val[1])));
  if (a2 == 1)
  {
    int16x8_t v14 = vpaddq_s16(v10, v11);
    int16x8_t v15 = vpaddq_s16(v12, v13);
  }
  else
  {
    int16x8_t v14 = vpaddq_s16(v10, v12);
    int16x8_t v15 = vpaddq_s16(v11, v13);
  }
  int16x8_t v16 = vpaddq_s16(v14, v15);
  v16.i64[0] = vpaddq_s16(v16, v16).u64[0];
  *a4 = v16.i64[0];
  uint64_t result = 63 - __clz(v16.u64[0]);
  unsigned int v18 = byte_1BBB83EF0[64 * (uint64_t)a2 + 16 + (result & 0xF)] + byte_1BBB83DC0[4 * a2 + ((int)result >> 4)];
  *a3 = v18 & 7;
  a3[1] = v18 >> 3;
  return result;
}

uint64_t sub_1BBAE3DBC(int16x8_t *a1, int a2, int *a3, _WORD *a4)
{
  unsigned int v4 = vaddlvq_u16((uint16x8_t)vorrq_s8(vbicq_s8(xmmword_1BBB83D60[2 * a2 + 1], (int8x16_t)vceqzq_s16(a1[1])), vbicq_s8(xmmword_1BBB83D60[2 * a2], (int8x16_t)vceqzq_s16(*a1))));
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  *a4 = v4;
  uint64_t result = __clz(v4) ^ 0x1FLL;
  unsigned int v6 = byte_1BBB83EF0[64 * (uint64_t)a2 + result];
  *a3 = v6 & 3;
  a3[1] = v6 >> 2;
  return result;
}

uint64_t sub_1BBAE3E28(int16x8_t *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 2;
  int8x16_t v3 = 0uLL;
  int v4 = 32;
  do
  {
    int8x16_t v3 = vaddq_s8(vaddq_s8(v3, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v2[-2]), v2[-1]))), vceqzq_s8(vqmovn_high_s16(vqmovn_s16(*v2), v2[1])));
    uint64_t v2 = (int16x8_t *)((char *)v2 + 2 * a2);
    --v4;
  }
  while (v4);
  return (vaddlvq_s8(v3) + 1024);
}

uint64_t sub_1BBAE3E80(int16x8_t *a1, uint64_t a2)
{
  int8x16_t v2 = 0uLL;
  unsigned int v3 = -2;
  do
  {
    int8x16_t v2 = vaddq_s8(vaddq_s8(v2, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(*a1), a1[1]))), vceqzq_s8(vqmovn_high_s16(vqmovn_s16(*(int16x8_t *)((char *)a1 + 2 * a2)), *(int16x8_t *)((char *)a1 + 2 * a2 + 16))));
    v3 += 2;
    a1 = (int16x8_t *)((char *)a1 + 2 * a2 + 2 * a2);
  }
  while (v3 < 0xE);
  return (vaddlvq_s8(v2) + 256);
}

uint64_t sub_1BBAE3EDC(int16x8_t *a1, uint64_t a2)
{
  uint64_t v2 = 2 * a2;
  char v3 = 1;
  int8x16_t v4 = 0uLL;
  do
  {
    char v5 = v3;
    unsigned int v6 = (int16x8_t *)((char *)a1 + v2 + v2);
    int16x8_t v7 = *v6;
    uint64_t v8 = (int16x8_t *)((char *)v6 + v2);
    int8x16_t v4 = vaddq_s8(vaddq_s8(v4, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(*a1), *(int16x8_t *)((char *)a1 + 2 * a2)))), vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v7), *v8)));
    a1 = (int16x8_t *)((char *)v8 + v2);
    char v3 = 0;
  }
  while ((v5 & 1) != 0);
  return (vaddvq_s8(v4) + 64);
}

uint64_t sub_1BBAE3F44(uint64_t *a1, uint64_t a2)
{
  v2.i64[0] = *a1;
  v2.i64[1] = *(uint64_t *)((char *)a1 + 2 * a2);
  v3.i64[0] = *(uint64_t *)((char *)a1 + 4 * a2);
  v3.i64[1] = *(uint64_t *)((char *)a1 + 6 * a2);
  return (vaddvq_s8(vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v2), v3))) + 16);
}

float sub_1BBAE3F80(int a1, uint64_t a2, uint64_t a3, _DWORD *a4, float *a5)
{
  if (a1 < 1)
  {
    int8x16_t v8 = 0uLL;
    int32x4_t v7 = 0uLL;
  }
  else
  {
    int v5 = 0;
    uint64_t v6 = 4 * a2;
    int32x4_t v7 = 0uLL;
    int8x16_t v8 = 0uLL;
    uint64_t v9 = a3 + 2 * a2;
    do
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < a1; i += 8)
      {
        int16x8_t v12 = vabsq_s16(*(int16x8_t *)(a3 + v10));
        int16x8_t v13 = vabsq_s16(*(int16x8_t *)(v9 + v10));
        int8x16_t v8 = vaddq_s8(v8, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v12), v13)));
        int32x4_t v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, (uint16x8_t)v12), (uint16x8_t)v13);
        v10 += 16;
      }
      v5 += 2;
      v9 += v6;
      a3 += v6;
    }
    while (v5 < a1);
  }
  *a4 = a1 * a1 + vaddlvq_s8(v8);
  float result = COERCE_FLOAT(vaddvq_s32(v7));
  *a5 = result;
  return result;
}

float sub_1BBAE4020(int a1, uint64_t a2, uint64_t a3, _DWORD *a4, float *a5)
{
  if (a1 < 1)
  {
    int8x16_t v10 = 0uLL;
    int32x4_t v9 = 0uLL;
  }
  else
  {
    int v5 = 0;
    uint64_t v6 = 8 * a2;
    uint64_t v7 = a3 + 6 * a2;
    uint64_t v8 = a3 + 4 * a2;
    int32x4_t v9 = 0uLL;
    int8x16_t v10 = 0uLL;
    uint64_t v11 = a3 + 2 * a2;
    do
    {
      uint64_t v12 = 0;
      for (unint64_t i = 0; i < a1; i += 4)
      {
        v14.i64[0] = *(void *)(a3 + v12);
        v14.i64[1] = *(void *)(v11 + v12);
        v15.i64[0] = *(void *)(v8 + v12);
        v15.i64[1] = *(void *)(v7 + v12);
        int16x8_t v16 = vabsq_s16(v14);
        int16x8_t v17 = vabsq_s16(v15);
        int8x16_t v10 = vaddq_s8(v10, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v16), v17)));
        int32x4_t v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, (uint16x8_t)v16), (uint16x8_t)v17);
        v12 += 8;
      }
      v5 += 4;
      v7 += v6;
      v8 += v6;
      v11 += v6;
      a3 += v6;
    }
    while (v5 < a1);
  }
  *a4 = a1 * a1 + vaddvq_s8(v10);
  float result = COERCE_FLOAT(vaddvq_s32(v9));
  *a5 = result;
  return result;
}

unsigned __int8 *sub_1BBAE40E4(unsigned __int8 *result, int a2, int a3, int a4, int a5, int __c, int a7)
{
  if (((a3 | a2) & 0x80000000) == 0)
  {
    int v7 = a2 - *((_DWORD *)result + 1);
    int v8 = a3 - *((_DWORD *)result + 2);
    int v9 = *result;
    if (v7 <= v9 && v8 <= v9)
    {
      uint64_t v11 = *(void *)&result[8 * a7 + 136];
      uint64_t v12 = a5 <= 0 ? *(unsigned __int8 **)&result[8 * a7 + 136] : (unsigned __int8 *)(v11 + 1);
      if (a4)
      {
        unint64_t v14 = (unint64_t)*v12 >> 2;
        size_t v15 = a4;
        uint64_t v16 = *(void *)(v11 + 8 * a5 + 32);
        if (a5) {
          char v17 = 3;
        }
        else {
          char v17 = 2;
        }
        unsigned int v18 = (char *)(v16 + (v7 >> v17) + (int)v14 * (uint64_t)(v8 >> v17));
        uint64_t v19 = a4;
        do
        {
          --v19;
          float result = (unsigned __int8 *)memset(v18, __c, v15);
          v18 += v14;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t sub_1BBAE41A4(uint64_t result, int a2, int a3)
{
  if (!*(unsigned char *)(result + 163))
  {
    if (a2 < 0)
    {
      if (*(unsigned char *)(result + 176))
      {
        int v8 = (__int16 *)(result + 178);
        uint64_t v9 = *(unsigned __int8 *)(result + 176);
        do
        {
          __int16 v10 = *v8++;
          LOWORD(a2) = a2 + v10 + 1;
          --v9;
        }
        while (v9);
        unsigned int v11 = *(unsigned __int8 *)(result + 176);
      }
      else
      {
        unsigned int v11 = 0;
      }
      ++*(unsigned char *)(result + 176);
      result += 176;
      *(_WORD *)(result + 2 * v11 + 2) = ~(_WORD)a2;
      int v16 = 1 << v11;
      __int16 v17 = *(_WORD *)(result + 66);
      __int16 v18 = v17 & ~(_WORD)v16;
      __int16 v19 = v17 | v16;
      if (!a3) {
        __int16 v19 = v18;
      }
      *(_WORD *)(result + 66) = v19;
    }
    else
    {
      char v3 = *(unsigned char *)(result + 177);
      if (v3)
      {
        int8x16_t v4 = (__int16 *)(result + 210);
        uint64_t v5 = *(unsigned __int8 *)(result + 177);
        do
        {
          __int16 v6 = *v4++;
          LOWORD(a2) = a2 + ~v6;
          --v5;
        }
        while (v5);
        unsigned int v7 = *(unsigned __int8 *)(result + 177);
      }
      else
      {
        unsigned int v7 = 0;
      }
      *(_WORD *)(result + 2 * v7 + 210) = a2 - 1;
      int v12 = 1 << v7;
      __int16 v13 = *(_WORD *)(result + 244);
      __int16 v14 = v13 & ~(_WORD)v12;
      __int16 v15 = v13 | v12;
      if (!a3) {
        __int16 v15 = v14;
      }
      *(_WORD *)(result + 244) = v15;
      *(unsigned char *)(result + 177) = v3 + 1;
    }
  }
  return result;
}

uint64_t sub_1BBAE4284(uint64_t result, int a2)
{
  if (!*(unsigned char *)(result + 163))
  {
    if (a2 < 0)
    {
      uint64_t v4 = *(unsigned __int8 *)(result + 176);
      if (*(unsigned char *)(result + 176))
      {
        uint64_t v5 = 0;
        do
        {
          if (!a2 || (int v6 = a2 + *(unsigned __int16 *)(result + 178 + 2 * v5), a2 = v6 + 1, v6 == -1))
          {
            a2 = 0;
            *(_WORD *)(result + 242) &= ~(1 << v5);
          }
          ++v5;
        }
        while (v4 != v5);
      }
    }
    else
    {
      uint64_t v2 = *(unsigned __int8 *)(result + 177);
      if (*(unsigned char *)(result + 177))
      {
        uint64_t v3 = 0;
        do
        {
          if (!a2 || (a2 += ~*(unsigned __int16 *)(result + 210 + 2 * v3)) == 0)
          {
            a2 = 0;
            *(_WORD *)(result + 244) &= ~(1 << v3);
          }
          ++v3;
        }
        while (v2 != v3);
      }
    }
  }
  return result;
}

BOOL sub_1BBAE432C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[162];
  if (v2 != a1[162]) {
    return 0;
  }
  uint64_t v3 = a2[160];
  if (v3 != a1[160]) {
    return 0;
  }
  uint64_t v4 = a2[161];
  if (v4 != a1[161]) {
    return 0;
  }
  if (a2[162])
  {
    uint64_t v5 = (unsigned __int16 *)(a1 + 128);
    int v6 = (unsigned __int16 *)(a2 + 128);
    do
    {
      int v8 = *v6++;
      int v7 = v8;
      int v9 = *v5++;
      if (v7 != v9) {
        return 0;
      }
    }
    while (--v2);
  }
  if (a2[160])
  {
    __int16 v10 = a1 + 2;
    unsigned int v11 = a2 + 2;
    do
    {
      int v13 = *v11;
      v11 += 4;
      int v12 = v13;
      int v14 = *v10;
      v10 += 4;
      if (v12 != v14) {
        return 0;
      }
    }
    while (--v3);
  }
  if (!a2[161]) {
    return 1;
  }
  uint64_t v15 = v4 - 1;
  int v16 = a1 + 66;
  __int16 v17 = a2 + 66;
  do
  {
    int v19 = *v17;
    v17 += 4;
    int v18 = v19;
    int v21 = *v16;
    v16 += 4;
    int v20 = v21;
    BOOL v23 = v15-- != 0;
    BOOL result = v18 == v20;
  }
  while (v18 == v20 && v23);
  return result;
}

void sub_1BBAE43E8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 163))
  {
    int v3 = 0;
    int v4 = 0;
    int v5 = *(unsigned __int16 *)(a1 + 170)
       + 1
       - 2 * *(unsigned __int8 *)(a1 + 168) * (*(unsigned __int16 *)(a1 + 170) + 1);
    unsigned int v6 = *(unsigned __int16 *)(a1 + 172);
    unsigned int v7 = *(unsigned __int16 *)(a1 + 174);
    uint64_t v8 = *(unsigned __int8 *)(a2 + 162) + 1;
    int v9 = (__int16 *)(a2 + 128);
    do
    {
      if ((v6 | v7))
      {
        char v10 = v6 & 1;
        int v11 = v5 + *v9;
        if (v11 < 0)
        {
          uint64_t v13 = a1 + 4 * v4;
          *(_WORD *)uint64_t v13 = v11;
          *(unsigned char *)(v13 + 2) = v10;
          ++v4;
        }
        else
        {
          uint64_t v12 = a1 + 4 * v3;
          *(_WORD *)(v12 + 64) = v11;
          *(unsigned char *)(v12 + 66) = v10;
          ++v3;
        }
      }
      v6 >>= 1;
      v7 >>= 1;
      ++v9;
      --v8;
    }
    while (v8);
    *(unsigned char *)(a1 + 160) = v4;
    *(unsigned char *)(a1 + 161) = v3;
    unint64_t v14 = v4;
    int64x2_t v45 = sub_1BBAE50EC;
    if (v4 < 0x81u)
    {
      uint64_t v15 = 0;
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v15 = (int *)sub_1BBAE46CC(v4);
      uint64_t v17 = v16;
    }
    sub_1BBAE4730(a1, (int *)(a1 + 4 * v14), (uint64_t (**)(int *, int *))&v45, v14, v15, v17);
    if (v15) {
      operator delete(v15);
    }
    unint64_t v34 = *(unsigned __int8 *)(a1 + 161);
    int64x2_t v45 = sub_1BBAE49A8;
    if (v34 < 0x81)
    {
      int64x2_t v35 = 0;
      uint64_t v37 = 0;
    }
    else
    {
      int64x2_t v35 = (int *)sub_1BBAE46CC(v34);
      uint64_t v37 = v36;
    }
    sub_1BBAE4730(a1 + 64, (int *)(a1 + 64 + 4 * v34), (uint64_t (**)(int *, int *))&v45, v34, v35, v37);
    if (v35) {
      operator delete(v35);
    }
    LODWORD(v20) = *(unsigned __int8 *)(a1 + 160);
    if (*(unsigned char *)(a1 + 160))
    {
LABEL_27:
      uint64_t v38 = 0;
      do
      {
        *(_WORD *)(a1 + v38 + 128) = *(_WORD *)(a1 + 2 * v38);
        v38 += 2;
      }
      while (2 * v20 != v38);
    }
  }
  else
  {
    unsigned int v18 = *(unsigned __int16 *)(a1 + 242);
    int v19 = ~*(unsigned __int16 *)(a1 + 178);
    *(_WORD *)a1 = ~*(_WORD *)(a1 + 178);
    *(unsigned char *)(a1 + 2) = v18 & 1;
    unint64_t v20 = *(unsigned __int8 *)(a1 + 176);
    if (v20 >= 2)
    {
      unint64_t v21 = v20 - 1;
      uint16x8_t v22 = (unsigned char *)(a1 + 6);
      BOOL v23 = (unsigned __int16 *)(a1 + 180);
      do
      {
        int v24 = (v18 >> 1) & 1;
        unsigned int v18 = (unsigned __int16)v18 >> 1;
        int v25 = *v23++;
        v19 += ~v25;
        *((_WORD *)v22 - 1) = v19;
        *uint16x8_t v22 = v24;
        v22 += 4;
        --v21;
      }
      while (v21);
    }
    unsigned int v26 = *(unsigned __int16 *)(a1 + 244);
    int v27 = *(unsigned __int16 *)(a1 + 210) + 1;
    *(_WORD *)(a1 + 64) = *(_WORD *)(a1 + 210) + 1;
    *(unsigned char *)(a1 + 66) = v26 & 1;
    unint64_t v28 = *(unsigned __int8 *)(a1 + 177);
    if (v28 >= 2)
    {
      unint64_t v29 = v28 - 1;
      int32x4_t v30 = (unsigned char *)(a1 + 70);
      int32x4_t v31 = (unsigned __int16 *)(a1 + 212);
      do
      {
        int v32 = (v26 >> 1) & 1;
        unsigned int v26 = (unsigned __int16)v26 >> 1;
        int v33 = *v31++;
        v27 += v33 + 1;
        *((_WORD *)v30 - 1) = v27;
        *int32x4_t v30 = v32;
        v30 += 4;
        --v29;
      }
      while (v29);
    }
    *(unsigned char *)(a1 + 160) = v20;
    *(unsigned char *)(a1 + 161) = v28;
    if (v20) {
      goto LABEL_27;
    }
  }
  char v39 = *(unsigned char *)(a1 + 161);
  if (v39)
  {
    int8x16_t v40 = (_WORD *)(a1 + 2 * v20 + 128);
    int64x2_t v41 = (__int16 *)(a1 + 64);
    uint64_t v42 = *(unsigned __int8 *)(a1 + 161);
    do
    {
      __int16 v43 = *v41;
      v41 += 2;
      *v40++ = v43;
      --v42;
    }
    while (v42);
  }
  unsigned __int8 v44 = v39 + v20;
  *(unsigned char *)(a1 + 162) = v44;
  if (v44 <= 0xFu) {
    bzero((void *)(a1 + 2 * v44 + 128), ((30 - 2 * v44) & 0x1FFFFFFFELL) + 2);
  }
}

void sub_1BBAE46B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1BBAE46CC(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x1FFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    BOOL result = operator new(4 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1BBAE4730(uint64_t result, int *a2, uint64_t (**a3)(int *, int *), unint64_t a4, int *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = (int *)result;
    if (a4 == 2)
    {
      int v9 = a2 - 1;
      BOOL result = (*a3)(a2 - 1, (int *)result);
      if (result)
      {
        int v10 = *v8;
        *uint64_t v8 = *v9;
        *int v9 = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      int v19 = (char *)a5;
      unint64_t v20 = a4 >> 1;
      unint64_t v21 = (int *)(result + 4 * (a4 >> 1));
      unint64_t v22 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1BBAE49BC((int *)result, v21, a3, v22, a5);
        BOOL v23 = (int *)&v19[4 * v20];
        BOOL result = (uint64_t)sub_1BBAE49BC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23);
        int v24 = &v19[4 * a4];
        int v25 = v23;
        while (v25 != (int *)v24)
        {
          BOOL result = (*a3)(v25, (int *)v19);
          if (result) {
            unsigned int v26 = (char *)v25;
          }
          else {
            unsigned int v26 = v19;
          }
          v19 += 4 * (result ^ 1);
          v25 += result;
          *v8++ = *(_DWORD *)v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (int *)v24)
            {
              uint64_t v27 = 0;
              do
              {
                v8[v27] = v25[v27];
                ++v27;
              }
              while (&v25[v27] != (int *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          uint64_t v28 = 0;
          do
          {
            v8[v28] = *(_DWORD *)&v19[v28 * 4];
            ++v28;
          }
          while (&v19[v28 * 4] != (char *)v23);
        }
      }
      else
      {
        sub_1BBAE4730(result, v21, a3, v22, a5, a6);
        sub_1BBAE4730(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v19, a6);
        return sub_1BBAE4BBC((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, (uint64_t (**)(char *, char *))a3, a4 >> 1, a4 - (a4 >> 1), v19, a6);
      }
    }
    else if ((int *)result != a2)
    {
      uint64_t v12 = (int *)(result + 4);
      if ((int *)(result + 4) != a2)
      {
        uint64_t v13 = 0;
        unint64_t v14 = (int *)result;
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = v12;
          BOOL result = (*a3)(v12, v15);
          if (result)
          {
            int v29 = *v14;
            uint64_t v16 = v13;
            while (1)
            {
              *(int *)((char *)v8 + v16 + 4) = *(int *)((char *)v8 + v16);
              if (!v16) {
                break;
              }
              v16 -= 4;
              BOOL result = (*a3)(&v29, (int *)((char *)v8 + v16));
              if ((result & 1) == 0)
              {
                uint64_t v17 = (int *)((char *)v8 + v16 + 4);
                goto LABEL_15;
              }
            }
            uint64_t v17 = v8;
LABEL_15:
            *uint64_t v17 = v29;
          }
          uint64_t v12 = v14 + 1;
          v13 += 4;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

BOOL sub_1BBAE49A8(__int16 *a1, __int16 *a2)
{
  return *a1 < *a2;
}

int *sub_1BBAE49BC(int *result, int *a2, uint64_t (**a3)(int *, int *), unint64_t a4, int *a5)
{
  int v5 = a5;
  uint64_t v8 = result;
  if (a4 == 2)
  {
    int v9 = a2 - 1;
    BOOL result = (int *)(*a3)(a2 - 1, result);
    if (result) {
      int v10 = v9;
    }
    else {
      int v10 = v8;
    }
    if (result) {
      int v11 = v8;
    }
    else {
      int v11 = v9;
    }
    int *v5 = *v10;
    v5[1] = *v11;
  }
  else if ((uint64_t)a4 > 8)
  {
    unint64_t v20 = &result[a4 >> 1];
    sub_1BBAE4730(result, v20, a3, a4 >> 1, a5, a4 >> 1);
    BOOL result = (int *)sub_1BBAE4730(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
    unint64_t v21 = &v8[a4 >> 1];
    while (v21 != a2)
    {
      BOOL result = (int *)(*a3)(v21, v8);
      if (result) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = v8;
      }
      v21 += result;
      v8 += result ^ 1;
      *v5++ = *v22;
      if (v8 == v20)
      {
        if (v21 != a2)
        {
          uint64_t v23 = 0;
          do
          {
            v5[v23] = v21[v23];
            ++v23;
          }
          while (&v21[v23] != a2);
        }
        return result;
      }
    }
    if (v8 != v20)
    {
      uint64_t v24 = 0;
      do
      {
        v5[v24] = v8[v24];
        ++v24;
      }
      while (&v8[v24] != v20);
    }
  }
  else if (result != a2)
  {
    uint64_t v13 = result + 1;
    *a5 = *result;
    if (result + 1 != a2)
    {
      uint64_t v14 = 0;
      uint64_t v15 = a5;
      do
      {
        uint64_t v16 = v15++;
        BOOL result = (int *)(*a3)(v13, v16);
        uint64_t v17 = v15;
        if (result)
        {
          v16[1] = *v16;
          uint64_t v17 = v5;
          if (v16 != v5)
          {
            uint64_t v18 = v14;
            while (1)
            {
              uint64_t v17 = (int *)((char *)v5 + v18);
              BOOL result = (int *)(*a3)(v13, (int *)((char *)v5 + v18 - 4));
              if (!result) {
                break;
              }
              *(int *)((char *)v5 + v18) = *(int *)((char *)v5 + v18 - 4);
              v18 -= 4;
              if (!v18)
              {
                uint64_t v17 = v5;
                break;
              }
            }
          }
        }
        int v19 = *v13++;
        *uint64_t v17 = v19;
        v14 += 4;
      }
      while (v13 != a2);
    }
  }
  return result;
}

uint64_t sub_1BBAE4BBC(uint64_t result, char *a2, char *a3, uint64_t (**a4)(char *, char *), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    uint64_t v15 = (char *)result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      while (1)
      {
        BOOL result = (*a4)(a2, v15);
        if (result) {
          break;
        }
        v15 += 4;
        if (!--a5) {
          return result;
        }
      }
      unint64_t v54 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          int v46 = *(_DWORD *)v15;
          *(_DWORD *)uint64_t v15 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v46;
          return result;
        }
        if (a5 >= 0) {
          uint64_t v22 = a5;
        }
        else {
          uint64_t v22 = a5 + 1;
        }
        uint64_t v23 = v22 >> 1;
        unint64_t v20 = &v15[4 * (v22 >> 1)];
        if (a3 == a2)
        {
          uint64_t v18 = a3;
          uint64_t v28 = a3;
        }
        else
        {
          uint64_t v49 = v22 >> 1;
          uint64_t v51 = v10;
          uint64_t v52 = a8;
          int16x8_t v53 = a7;
          uint64_t v24 = *a4;
          unint64_t v25 = (a3 - a2) >> 2;
          uint64_t v18 = a2;
          do
          {
            unsigned int v26 = &v18[4 * (v25 >> 1)];
            int v27 = v24(v26, v20);
            if (v27) {
              v25 += ~(v25 >> 1);
            }
            else {
              v25 >>= 1;
            }
            if (v27) {
              uint64_t v18 = v26 + 4;
            }
          }
          while (v25);
          uint64_t v28 = a2;
          a8 = v52;
          a7 = v53;
          uint64_t v23 = v49;
          uint64_t v10 = v51;
        }
        uint64_t v17 = (v18 - v28) >> 2;
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = v10 + 1;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = &a2[4 * (v16 >> 1)];
        if (a2 == v15)
        {
          unint64_t v20 = a2;
          unint64_t v21 = a2;
        }
        else
        {
          uint64_t v48 = v16 >> 1;
          uint64_t v50 = v10;
          unint64_t v19 = (a2 - v15) >> 2;
          unint64_t v20 = v15;
          do
          {
            if ((*a4)(v18, &v20[4 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v20 += 4 * (v19 >> 1) + 4;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          unint64_t v21 = v15;
          uint64_t v17 = v48;
          uint64_t v10 = v50;
        }
        uint64_t v23 = (v20 - v21) >> 2;
      }
      a5 -= v23;
      v10 -= v17;
      int v29 = a2;
      uint64_t v30 = v23;
      uint64_t v31 = v17;
      int v32 = sub_1BBAE4F88(v20, v29, v18);
      uint64_t v33 = v31;
      uint64_t v34 = v30;
      int64x2_t v35 = v32;
      if (v34 + v31 >= a5 + v10)
      {
        uint64_t v36 = v34;
        uint64_t v37 = a5;
        uint64_t v38 = v33;
        BOOL result = sub_1BBAE4BBC(v32, v18, v54, a4, v37, v10, a7, a8);
        uint64_t v18 = v20;
        uint64_t v10 = v38;
        a5 = v36;
        a3 = v35;
      }
      else
      {
        BOOL result = sub_1BBAE4BBC(v15, v20, v32, a4, v34, v31, a7, a8);
        uint64_t v15 = v35;
        a3 = v54;
      }
      a2 = v18;
      if (!v10) {
        return result;
      }
    }
    if (a5 <= v10)
    {
      if (v15 != a2)
      {
        uint64_t v43 = 0;
        do
        {
          *(_DWORD *)&a7[v43] = *(_DWORD *)&v15[v43];
          v43 += 4;
        }
        while (&v15[v43] != a2);
        unsigned __int8 v44 = &a7[v43];
        if (&a7[v43] != a7)
        {
          while (a2 != a3)
          {
            BOOL result = (*a4)(a2, a7);
            if (result) {
              int64x2_t v45 = a2;
            }
            else {
              int64x2_t v45 = a7;
            }
            a7 += 4 * (result ^ 1);
            a2 += 4 * result;
            *(_DWORD *)uint64_t v15 = *(_DWORD *)v45;
            v15 += 4;
            if (a7 == v44) {
              return result;
            }
          }
          return (uint64_t)memmove(v15, a7, v44 - a7);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v39 = 0;
      do
      {
        *(_DWORD *)&a7[v39] = *(_DWORD *)&a2[v39];
        v39 += 4;
      }
      while (&a2[v39] != a3);
      int8x16_t v40 = &a7[v39];
      if (&a7[v39] != a7)
      {
        int64x2_t v41 = a3 - 4;
        while (a2 != v15)
        {
          BOOL result = (*a4)(v40 - 4, a2 - 4);
          if (result) {
            uint64_t v42 = a2;
          }
          else {
            uint64_t v42 = v40;
          }
          if (result) {
            a2 -= 4;
          }
          else {
            v40 -= 4;
          }
          *(_DWORD *)int64x2_t v41 = *((_DWORD *)v42 - 1);
          v41 -= 4;
          if (v40 == a7) {
            return result;
          }
        }
        uint64_t v47 = 0;
        do
        {
          *(_DWORD *)&v41[v47] = *(_DWORD *)&v40[v47 - 4];
          v47 -= 4;
        }
        while (&v40[v47] != a7);
      }
    }
  }
  return result;
}

char *sub_1BBAE4F88(char *__src, char *a2, char *a3)
{
  int v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 4 == a2)
    {
      int v11 = *(_DWORD *)__src;
      int64_t v12 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      int v3 = &__src[v12];
      *(_DWORD *)int v3 = v11;
    }
    else if (a2 + 4 == a3)
    {
      uint64_t v13 = a3 - 4;
      int v14 = *((_DWORD *)a3 - 1);
      int v3 = __src + 4;
      size_t v15 = a3 - 4 - __src;
      if (v13 != __src) {
        memmove(__src + 4, __src, v15);
      }
      *(_DWORD *)__src = v14;
    }
    else
    {
      uint64_t v5 = (a2 - __src) >> 2;
      if (v5 == (a3 - a2) >> 2)
      {
        uint64_t v6 = 0;
        do
        {
          int v7 = *(_DWORD *)&__src[v6];
          *(_DWORD *)&__src[v6] = *(_DWORD *)&a2[v6];
          uint64_t v8 = &__src[v6 + 4];
          *(_DWORD *)&a2[v6] = v7;
          uint64_t v9 = (uint64_t)&a2[v6 + 4];
          v6 += 4;
        }
        while (v8 != a2 && v9 != (void)a3);
        return a2;
      }
      else
      {
        uint64_t v16 = (a3 - a2) >> 2;
        uint64_t v17 = (a2 - __src) >> 2;
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = v16;
          uint64_t v16 = v18 % v16;
        }
        while (v16);
        if (v17)
        {
          unint64_t v19 = &__src[4 * v17];
          do
          {
            int v21 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            int v20 = v21;
            uint64_t v22 = &v19[4 * v5];
            uint64_t v23 = v19;
            do
            {
              uint64_t v24 = v23;
              uint64_t v23 = v22;
              *(_DWORD *)uint64_t v24 = *(_DWORD *)v22;
              BOOL v25 = __OFSUB__(v5, (a3 - v22) >> 2);
              uint64_t v27 = v5 - ((a3 - v22) >> 2);
              char v26 = (v27 < 0) ^ v25;
              uint64_t v22 = &__src[4 * v27];
              if (v26) {
                uint64_t v22 = &v23[4 * v5];
              }
            }
            while (v22 != v19);
            *(_DWORD *)uint64_t v23 = v20;
          }
          while (v19 != __src);
        }
        return &__src[4 * ((a3 - a2) >> 2)];
      }
    }
  }
  return v3;
}

BOOL sub_1BBAE50EC(__int16 *a1, __int16 *a2)
{
  return *a1 > *a2;
}

uint64_t sub_1BBAE5100(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 > 64) {
    return 4294954387;
  }
  if (a4 < 1)
  {
    *(unsigned char *)(a1 + 163) = 0;
    goto LABEL_8;
  }
  int v9 = sub_1BBA196DC(a2, 1);
  *(unsigned char *)(a1 + 163) = v9 != 0;
  if (!v9)
  {
LABEL_8:
    *(unsigned char *)(a1 + 176) = sub_1BBA1979C(a2);
    unsigned __int8 v11 = sub_1BBA1979C(a2);
    *(unsigned char *)(a1 + 177) = v11;
    int v12 = *(unsigned __int8 *)(a1 + 176);
    if (v12 + v11 > *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(a3 + 1) + 198)) {
      return 4294954387;
    }
    *(_WORD *)(a1 + 242) = 0;
    if (v12)
    {
      unint64_t v13 = 0;
      do
      {
        *(_WORD *)(a1 + 178 + 2 * v13) = sub_1BBA19824(a2);
        *(_WORD *)(a1 + 242) |= (sub_1BBA196DC(a2, 1) != 0) << v13++;
      }
      while (v13 < *(unsigned __int8 *)(a1 + 176));
      int v14 = *(unsigned __int8 *)(a1 + 177);
    }
    else
    {
      int v14 = v11;
    }
    *(_WORD *)(a1 + 244) = 0;
    if (v14)
    {
      unint64_t v20 = 0;
      do
      {
        *(_WORD *)(a1 + 210 + 2 * v20) = sub_1BBA19824(a2);
        *(_WORD *)(a1 + 244) |= (sub_1BBA196DC(a2, 1) != 0) << v20++;
      }
      while (v20 < *(unsigned __int8 *)(a1 + 177));
    }
    uint64_t v19 = 0;
LABEL_27:
    sub_1BBAE43E8(a1, v19);
    if (*(unsigned char *)(a1 + 163)) {
      return 0;
    }
    uint64_t v21 = *(unsigned __int8 *)(a1 + 176);
    if (*(unsigned char *)(a1 + 176))
    {
      uint64_t v22 = (__int16 *)(a1 + 178);
      while (1)
      {
        int v23 = *v22++;
        if (v23 < 0) {
          break;
        }
        if (!--v21) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_34:
      if (!*(unsigned char *)(a1 + 177)) {
        return 0;
      }
      uint64_t v24 = *(unsigned __int8 *)(a1 + 177) - 1;
      BOOL v25 = (__int16 *)(a1 + 210);
      do
      {
        __int16 v27 = *v25++;
        __int16 v26 = v27;
        BOOL v29 = v24-- != 0;
      }
      while ((v26 & 0x8000) == 0 && v29);
      if ((v26 & 0x80000000) == 0) {
        return 0;
      }
    }
    return 4294954387;
  }
  if (*(_DWORD *)(a3 + 260) == a4) {
    int v10 = sub_1BBA1979C(a2);
  }
  else {
    int v10 = 0;
  }
  *(_DWORD *)(a1 + 164) = v10;
  *(unsigned char *)(a1 + 168) = sub_1BBA196DC(a2, 1) != 0;
  *(_WORD *)(a1 + 170) = sub_1BBA19824(a2);
  uint64_t result = 4294954387;
  int v15 = ~*(_DWORD *)(a1 + 164) + a4;
  if (v15 >= 0 && v15 < a4)
  {
    uint64_t v16 = *(void *)(a3 + 264);
    *(_DWORD *)(a1 + 172) = 0;
    unsigned int v17 = -1;
    do
    {
      ++v17;
      int v18 = sub_1BBA196DC(a2, 1);
      *(_WORD *)(a1 + 172) |= (v18 != 0) << v17;
      if (!v18) {
        *(_WORD *)(a1 + 174) |= (sub_1BBA196DC(a2, 1) != 0) << v17;
      }
    }
    while (v17 < *(unsigned __int8 *)(v16 + 248 * v15 + 162));
    uint64_t v19 = v16 + 248 * v15;
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_1BBAE53A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1) {
    sub_1BBA19614(a2, *(unsigned __int8 *)(a1 + 163), 1);
  }
  if (!*(unsigned char *)(a1 + 163))
  {
    unsigned int v19 = *(unsigned __int8 *)(a1 + 176) + 1;
    unsigned int v20 = __clz(v19);
    sub_1BBA19614(a2, (v19 - (0x80000000 >> v20)) | (0x80000000 >> v20), (2 * v20) ^ 0x3F);
    unsigned int v21 = *(unsigned __int8 *)(a1 + 177) + 1;
    unsigned int v22 = __clz(v21);
    sub_1BBA19614(a2, (v21 - (0x80000000 >> v22)) | (0x80000000 >> v22), (2 * v22) ^ 0x3F);
    if (*(unsigned char *)(a1 + 176))
    {
      unint64_t v23 = 0;
      unsigned __int16 v24 = *(_WORD *)(a1 + 242);
      do
      {
        unsigned int v25 = *(unsigned __int16 *)(a1 + 178 + 2 * v23) + 1;
        unsigned int v26 = __clz(v25);
        sub_1BBA19614(a2, (v25 - (0x80000000 >> v26)) | (0x80000000 >> v26), (2 * v26) ^ 0x3F);
        sub_1BBA19614(a2, v24 & 1, 1);
        ++v23;
        v24 >>= 1;
      }
      while (v23 < *(unsigned __int8 *)(a1 + 176));
    }
    if (*(unsigned char *)(a1 + 177))
    {
      unint64_t v27 = 0;
      unsigned __int16 v28 = *(_WORD *)(a1 + 244);
      do
      {
        unsigned int v29 = *(unsigned __int16 *)(a1 + 210 + 2 * v27) + 1;
        unsigned int v30 = __clz(v29);
        sub_1BBA19614(a2, (v29 - (0x80000000 >> v30)) | (0x80000000 >> v30), (2 * v30) ^ 0x3F);
        sub_1BBA19614(a2, v28 & 1, 1);
        ++v27;
        v28 >>= 1;
      }
      while (v27 < *(unsigned __int8 *)(a1 + 177));
    }
    return 0;
  }
  if (*(_DWORD *)(a3 + 260) == a4)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 164) + 1;
    unsigned int v9 = __clz(v8);
    sub_1BBA19614(a2, (v8 - (0x80000000 >> v9)) | (0x80000000 >> v9), 63 - 2 * v9);
  }
  sub_1BBA19614(a2, *(unsigned __int8 *)(a1 + 168), 1);
  unsigned int v10 = *(unsigned __int16 *)(a1 + 170) + 1;
  unsigned int v11 = __clz(v10);
  sub_1BBA19614(a2, (v10 - (0x80000000 >> v11)) | (0x80000000 >> v11), (2 * v11) ^ 0x3F);
  uint64_t result = 4294954387;
  int v13 = ~*(_DWORD *)(a1 + 164) + a4;
  if (v13 >= 0 && v13 < a4)
  {
    uint64_t v14 = *(void *)(a3 + 264);
    unsigned int v15 = *(unsigned __int16 *)(a1 + 172);
    unsigned int v16 = *(unsigned __int16 *)(a1 + 174);
    unsigned int v17 = (unsigned __int8 *)(v14 + 248 * v13 + 162);
    unsigned int v18 = -1;
    do
    {
      sub_1BBA19614(a2, v15 & 1, 1);
      if ((v15 & 1) == 0) {
        sub_1BBA19614(a2, v16 & 1, 1);
      }
      v15 >>= 1;
      v16 >>= 1;
      ++v18;
    }
    while (v18 < *v17);
    return 0;
  }
  return result;
}

void sub_1BBAE5608(uint64_t a1, uint64_t a2, __int32 *a3, int a4, int a5)
{
  *(unsigned char *)(a1 + 163) = 0;
  *(_DWORD *)(a1 + 242) = 0;
  *(_WORD *)(a1 + 176) = 0;
  if (a4 <= 0)
  {
    unint64_t v11 = a4;
LABEL_14:
    sub_1BBAE57F4(a3, &a3[v11], v11, 0, 0);
    goto LABEL_15;
  }
  unint64_t v10 = 0;
  unint64_t v11 = a4;
  uint64_t v12 = 4 * a4;
  do
  {
    int v13 = SLOWORD(a3[v10 / 4]) + a5;
    if (v13 >= 0)
    {
      if (*(void *)sub_1BBA1D644(a2, v13))
      {
        if (SLOWORD(a3[v10 / 4]) < 0) {
          ++*(unsigned char *)(a1 + 176);
        }
        else {
          ++*(unsigned char *)(a1 + 177);
        }
      }
      else
      {
        LOWORD(a3[v10 / 4]) = 0x7FFF;
      }
    }
    v10 += 4;
  }
  while (v12 != v10);
  if (a4 <= 128) {
    goto LABEL_14;
  }
  uint64_t v14 = (__int32 *)sub_1BBAE46CC(a4);
  sub_1BBAE57F4(a3, &a3[v11], v11, v14, v15);
  if (v14) {
    operator delete(v14);
  }
LABEL_15:
  uint64_t v16 = *(unsigned __int8 *)(a1 + 176);
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = 0;
    unsigned int v20 = (__int16 *)a3;
    do
    {
      unsigned int v21 = v18 + (__int16)~*v20;
      if (v21 >> 15)
      {
        ++v19;
      }
      else
      {
        *(_WORD *)(a1 + 178 - 2 * v19 + 2 * v17) = v21;
        *(_WORD *)(a1 + 242) |= *((unsigned __int8 *)v20 + 2) << (v17 - v19);
        int v18 = v20[-2 * v19];
      }
      ++v17;
      v20 += 2;
    }
    while (v16 != v17);
  }
  else
  {
    LOBYTE(v19) = 0;
  }
  *(unsigned char *)(a1 + 176) = v16 - v19;
  uint64_t v22 = *(unsigned __int8 *)(a1 + 177);
  if (*(unsigned char *)(a1 + 177))
  {
    uint64_t v23 = 0;
    __int16 v24 = 0;
    do
    {
      *(_WORD *)(a1 + 210 + 2 * v23) = *(_WORD *)a3 + ~v24;
      *(_WORD *)(a1 + 244) |= *((unsigned __int8 *)a3 + 2) << v23;
      __int16 v25 = *(_WORD *)a3++;
      __int16 v24 = v25;
      ++v23;
    }
    while (v22 != v23);
  }
}

__int32 *sub_1BBAE57F4(__int32 *result, __int32 *a2, unint64_t a3, __int32 *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (char *)result;
    if (a3 == 2)
    {
      __int32 v7 = *result;
      v8.i32[0] = *(a2 - 1);
      v8.i32[1] = *result;
      int32x2_t v9 = vabs_s32(vshr_n_s32(vshl_n_s32(v8, 0x10uLL), 0x10uLL));
      if (vcgt_u32((uint32x2_t)vdup_lane_s32(v9, 1), (uint32x2_t)v9).u32[0])
      {
        *uint64_t result = *(a2 - 1);
        *(a2 - 1) = v7;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v22 = a4;
      unint64_t v23 = a3 >> 1;
      __int16 v24 = &result[a3 >> 1];
      unint64_t v25 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1BBAE5A6C(result, v24, v25, a4);
        unsigned int v26 = &v22[v23];
        uint64_t result = sub_1BBAE5A6C((__int32 *)&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v26);
        unint64_t v27 = &v22[a3];
        unsigned __int16 v28 = v26;
        while (v28 != v27)
        {
          __int32 v29 = *v28;
          v30.i32[0] = *v28;
          v30.i32[1] = *v22;
          int32x2_t v31 = vabs_s32(vshr_n_s32(vshl_n_s32(v30, 0x10uLL), 0x10uLL));
          unsigned __int8 v32 = vcge_u32((uint32x2_t)v31, (uint32x2_t)vdup_lane_s32(v31, 1)).u8[0];
          if (v32) {
            __int32 v29 = *v22;
          }
          v22 += v32 & 1;
          v28 += (v32 & 1) == 0;
          *(_DWORD *)uint64_t v6 = v29;
          v6 += 4;
          if (v22 == v26)
          {
            if (v28 != v27)
            {
              uint64_t v33 = 0;
              do
              {
                *(_DWORD *)&v6[v33 * 4] = v28[v33];
                ++v33;
              }
              while (&v28[v33] != v27);
            }
            return result;
          }
        }
        if (v22 != v26)
        {
          uint64_t v34 = 0;
          do
          {
            *(_DWORD *)&v6[v34 * 4] = v22[v34];
            ++v34;
          }
          while (&v22[v34] != v26);
        }
      }
      else
      {
        sub_1BBAE57F4(result, v24, v25, a4, a5);
        sub_1BBAE57F4(&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22, a5);
        return (__int32 *)sub_1BBAE5CB4(v6, &v6[4 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v22, a5);
      }
    }
    else if (result != a2)
    {
      unint64_t v11 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v12 = 4;
        int v13 = result;
        do
        {
          int32x2_t v14 = *(int32x2_t *)v13;
          int v13 = v11;
          int32x2_t v15 = vabs_s32(vshr_n_s32(vshl_n_s32(v14, 0x10uLL), 0x10uLL));
          if (v15.i32[1] < (unsigned __int32)v15.i32[0])
          {
            __int32 v16 = v14.i32[0];
            uint64_t v17 = v12;
            while (1)
            {
              *(__int32 *)((char *)result + v17) = v16;
              uint64_t v18 = v17 - 4;
              if (v17 == 4) {
                break;
              }
              __int32 v16 = *(__int32 *)((char *)result + v17 - 8);
              if ((v16 & 0x8000u) == 0) {
                unsigned int v19 = (__int16)v16;
              }
              else {
                unsigned int v19 = -(__int16)v16;
              }
              v17 -= 4;
              if (v15.i32[1] >= v19)
              {
                unsigned int v20 = (__int32 *)((char *)result + v18);
                goto LABEL_18;
              }
            }
            unsigned int v20 = result;
LABEL_18:
            *unsigned int v20 = v14.i32[1];
          }
          unint64_t v11 = v13 + 1;
          v12 += 4;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

__int32 *sub_1BBAE5A6C(__int32 *result, __int32 *a2, unint64_t a3, __int32 *a4)
{
  if (a3)
  {
    BOOL v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      __int32 *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      __int32 v8 = *(a2 - 1);
      v9.i32[0] = v8;
      v9.i32[1] = *result;
      int32x2_t v10 = vabs_s32(vshr_n_s32(vshl_n_s32(v9, 0x10uLL), 0x10uLL));
      unsigned __int8 v11 = vcgt_u32((uint32x2_t)vdup_lane_s32(v10, 1), (uint32x2_t)v10).u8[0];
      if ((v11 & 1) == 0) {
        __int32 v8 = *result;
      }
      *a4 = v8;
      BOOL v4 = a4 + 1;
      if ((v11 & 1) == 0) {
        uint64_t v6 = a2 - 1;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      __int16 v24 = &result[a3 >> 1];
      sub_1BBAE57F4(result, v24, a3 >> 1, a4, a3 >> 1);
      uint64_t result = (__int32 *)sub_1BBAE57F4(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v25 = &v6[a3 >> 1];
      while (v25 != a2)
      {
        __int32 v26 = *v25;
        v27.i32[0] = *v25;
        v27.i32[1] = *v6;
        int32x2_t v28 = vabs_s32(vshr_n_s32(vshl_n_s32(v27, 0x10uLL), 0x10uLL));
        unsigned __int8 v29 = vcgt_u32((uint32x2_t)vdup_lane_s32(v28, 1), (uint32x2_t)v28).u8[0];
        if ((v29 & 1) == 0) {
          __int32 v26 = *v6;
        }
        v25 += v29 & 1;
        v6 += (v29 & 1) == 0;
        *v4++ = v26;
        if (v6 == v24)
        {
          if (v25 != a2)
          {
            uint64_t v30 = 0;
            do
            {
              v4[v30] = v25[v30];
              ++v30;
            }
            while (&v25[v30] != a2);
          }
          return result;
        }
      }
      if (v6 != v24)
      {
        uint64_t v31 = 0;
        do
        {
          v4[v31] = v6[v31];
          ++v31;
        }
        while (&v6[v31] != v24);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        int32x2_t v14 = a4;
        int32x2_t v15 = a4;
        do
        {
          __int32 v17 = *v15++;
          __int32 v16 = v17;
          v18.i32[0] = *v12;
          v18.i32[1] = v17;
          int32x2_t v19 = vabs_s32(vshr_n_s32(vshl_n_s32(v18, 0x10uLL), 0x10uLL));
          if (vcgt_u32((uint32x2_t)vdup_lane_s32(v19, 1), (uint32x2_t)v19).u32[0])
          {
            v14[1] = v16;
            unsigned int v20 = a4;
            if (v14 != a4)
            {
              uint64_t v21 = v13;
              while (1)
              {
                unsigned int v20 = (__int32 *)((char *)a4 + v21);
                v22.i32[0] = *v12;
                v22.i32[1] = *(__int32 *)((char *)a4 + v21 - 4);
                int32x2_t v23 = vabs_s32(vshr_n_s32(vshl_n_s32(v22, 0x10uLL), 0x10uLL));
                if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v23, 1), (uint32x2_t)v23).u32[0] & 1) == 0) {
                  break;
                }
                *unsigned int v20 = *(__int32 *)((char *)a4 + v21 - 4);
                v21 -= 4;
                if (!v21)
                {
                  unsigned int v20 = a4;
                  break;
                }
              }
            }
            *unsigned int v20 = *v12;
          }
          else
          {
            *int32x2_t v15 = *v12;
          }
          ++v12;
          v13 += 4;
          int32x2_t v14 = v15;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_1BBAE5CB4(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, __int32 *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    unsigned __int8 v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      int v12 = (__int16)*(_DWORD *)a2;
      if (v12 < 0) {
        int v12 = -v12;
      }
      while (1)
      {
        int v13 = *(_DWORD *)v11;
        int v14 = (__int16)*(_DWORD *)v11;
        if (v14 < 0) {
          int v14 = -v14;
        }
        if (v12 < v14) {
          break;
        }
        v11 += 4;
        if (!--a4) {
          return result;
        }
      }
      uint64_t v51 = a3;
      __src = a6;
      if (a4 >= v9)
      {
        if (a4 == 1)
        {
          *(_DWORD *)unsigned __int8 v11 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v13;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v27 = a4;
        }
        else {
          uint64_t v27 = a4 + 1;
        }
        uint64_t v26 = v27 >> 1;
        int32x2_t v18 = &v11[4 * (v27 >> 1)];
        __int32 v17 = a3;
        if (a3 != a2)
        {
          unint64_t v28 = (a3 - a2) >> 2;
          int v29 = *(__int16 *)v18;
          if (v29 < 0) {
            int v29 = -v29;
          }
          __int32 v17 = a2;
          do
          {
            unint64_t v30 = v28 >> 1;
            uint64_t v31 = &v17[4 * (v28 >> 1)];
            int v34 = *(__int16 *)v31;
            unsigned __int8 v32 = v31 + 4;
            unsigned int v33 = v34;
            if (v34 < 0) {
              unsigned int v33 = -v33;
            }
            v28 += ~(v28 >> 1);
            if (v33 < v29) {
              __int32 v17 = v32;
            }
            else {
              unint64_t v28 = v30;
            }
          }
          while (v28);
        }
        uint64_t v16 = (v17 - a2) >> 2;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v15 = v9;
        }
        else {
          uint64_t v15 = v9 + 1;
        }
        uint64_t v16 = v15 >> 1;
        __int32 v17 = &a2[4 * (v15 >> 1)];
        int32x2_t v18 = a2;
        if (a2 != v11)
        {
          unint64_t v19 = (a2 - v11) >> 2;
          int v20 = *(__int16 *)v17;
          if (v20 < 0) {
            int v20 = -v20;
          }
          int32x2_t v18 = v11;
          do
          {
            unint64_t v21 = v19 >> 1;
            int32x2_t v22 = &v18[4 * (v19 >> 1)];
            int v25 = *(__int16 *)v22;
            int32x2_t v23 = v22 + 4;
            unsigned int v24 = v25;
            if (v25 < 0) {
              unsigned int v24 = -v24;
            }
            v19 += ~(v19 >> 1);
            if (v20 < v24) {
              unint64_t v19 = v21;
            }
            else {
              int32x2_t v18 = v23;
            }
          }
          while (v19);
        }
        uint64_t v26 = (v18 - v11) >> 2;
      }
      a4 -= v26;
      v9 -= v16;
      int64x2_t v35 = sub_1BBAE4F88(v18, a2, v17);
      uint64_t v36 = v35;
      if (v16 + v26 >= v9 + a4)
      {
        uint64_t result = (char *)sub_1BBAE5CB4(v35, v17, v51, a4, v9, __src, a7);
        __int32 v17 = v18;
        a6 = __src;
        uint64_t v9 = v16;
        a4 = v26;
        a3 = v36;
      }
      else
      {
        uint64_t v37 = v18;
        a6 = __src;
        uint64_t result = (char *)sub_1BBAE5CB4(v11, v37, v35, v26, v16, __src, a7);
        unsigned __int8 v11 = v36;
        a3 = v51;
      }
      a2 = v17;
      if (!v9) {
        return result;
      }
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        uint64_t v44 = 0;
        do
        {
          a6[v44] = *(_DWORD *)&v11[v44 * 4];
          ++v44;
        }
        while (&v11[v44 * 4] != a2);
        int64x2_t v45 = &a6[v44];
        if (v45 != a6)
        {
          while (a2 != a3)
          {
            __int32 v46 = *(_DWORD *)a2;
            v47.i32[0] = *(_DWORD *)a2;
            v47.i32[1] = *a6;
            int32x2_t v48 = vabs_s32(vshr_n_s32(vshl_n_s32(v47, 0x10uLL), 0x10uLL));
            unsigned __int8 v49 = vcge_u32((uint32x2_t)v48, (uint32x2_t)vdup_lane_s32(v48, 1)).u8[0];
            if (v49) {
              __int32 v46 = *a6;
            }
            a6 += v49 & 1;
            a2 += 4 * ((v49 & 1) == 0);
            *(_DWORD *)unsigned __int8 v11 = v46;
            v11 += 4;
            if (a6 == v45) {
              return result;
            }
          }
          return (char *)memmove(v11, a6, (char *)v45 - (char *)a6);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v38 = 0;
      do
      {
        a6[v38] = *(_DWORD *)&a2[v38 * 4];
        ++v38;
      }
      while (&a2[v38 * 4] != a3);
      uint64_t v39 = &a6[v38];
      if (v39 != a6)
      {
        int8x16_t v40 = (__int32 *)(a3 - 4);
        while (a2 != v11)
        {
          __int32 v41 = *(v39 - 1);
          v42.i32[0] = v41;
          v42.i32[1] = *((_DWORD *)a2 - 1);
          int32x2_t v43 = vabs_s32(vshr_n_s32(vshl_n_s32(v42, 0x10uLL), 0x10uLL));
          if (vcgt_u32((uint32x2_t)vdup_lane_s32(v43, 1), (uint32x2_t)v43).u32[0])
          {
            __int32 v41 = *((_DWORD *)a2 - 1);
            a2 -= 4;
          }
          else
          {
            --v39;
          }
          *v40-- = v41;
          if (v39 == a6) {
            return result;
          }
        }
        uint64_t v50 = 0;
        do
        {
          v40[v50] = v39[v50 - 1];
          --v50;
        }
        while (&v39[v50] != a6);
      }
    }
  }
  return result;
}

void sub_1BBAE6060(__int16 *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v2 = dword_1E9F80A90;
  if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)a1 + 163);
    *(_DWORD *)buf = 67109120;
    int v20 = v3;
    _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "inter_ref_pic_set_prediction_flag: %d\n", buf, 8u);
    int v2 = dword_1E9F80A90;
  }
  if (*((unsigned char *)a1 + 163))
  {
    if (v2 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "No supported!\n", buf, 2u);
    }
  }
  else
  {
    if (v2 >= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
        || (int v4 = *((unsigned __int8 *)a1 + 176),
            *(_DWORD *)buf = 67109120,
            int v20 = v4,
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "num_negative_pics: %d\n", buf, 8u),
            int v2 = dword_1E9F80A90,
            dword_1E9F80A90 >= 3))
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
          || (int v5 = *((unsigned __int8 *)a1 + 177),
              *(_DWORD *)buf = 67109120,
              int v20 = v5,
              _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "num_positive_pics: %d\n", buf, 8u), int v2 = dword_1E9F80A90, dword_1E9F80A90 >= 3))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Delta poc s0:\n", buf, 2u);
            int v2 = dword_1E9F80A90;
          }
        }
      }
    }
    unsigned int v6 = *((unsigned __int8 *)a1 + 176);
    if (*((unsigned char *)a1 + 176))
    {
      unint64_t v7 = 0;
      __int32 v8 = MEMORY[0x1E4F14500];
      uint64_t v9 = a1;
      do
      {
        if (v2 >= 3 && os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = *v9;
          int v11 = ((unsigned __int16)a1[121] >> v7) & 1;
          *(_DWORD *)buf = 67109376;
          int v20 = v10;
          __int16 v21 = 1024;
          int v22 = v11;
          _os_log_impl(&dword_1BB9B9000, v8, OS_LOG_TYPE_DEFAULT, "\tdelta poc: %d, used: %d\n", buf, 0xEu);
          int v2 = dword_1E9F80A90;
          unsigned int v6 = *((unsigned __int8 *)a1 + 176);
        }
        ++v7;
        v9 += 2;
      }
      while (v7 < v6);
    }
    if (v2 > 2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Delta poc s1:\n", buf, 2u);
    }
    unsigned int v12 = *((unsigned __int8 *)a1 + 177);
    if (*((unsigned char *)a1 + 177))
    {
      unint64_t v13 = 0;
      int v14 = dword_1E9F80A90;
      uint64_t v15 = a1 + 32;
      uint64_t v16 = MEMORY[0x1E4F14500];
      do
      {
        if (v14 >= 3 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = *v15;
          int v18 = ((unsigned __int16)a1[122] >> v13) & 1;
          *(_DWORD *)buf = 67109376;
          int v20 = v17;
          __int16 v21 = 1024;
          int v22 = v18;
          _os_log_impl(&dword_1BB9B9000, v16, OS_LOG_TYPE_DEFAULT, "\tdelta poc: %d, used: %d\n", buf, 0xEu);
          int v14 = dword_1E9F80A90;
          unsigned int v12 = *((unsigned __int8 *)a1 + 177);
        }
        ++v13;
        v15 += 2;
      }
      while (v13 < v12);
    }
  }
}

uint64_t sub_1BBAE642C(uint64_t result, int a2, char a3)
{
  uint64_t v3 = *(unsigned int *)(result + 4);
  if (v3)
  {
    uint64_t v4 = 0;
    while ((a2 & ~(-1 << a3)) != *(unsigned __int16 *)(result + 24 + 2 * v4))
    {
      if (v3 == ++v4) {
        return result;
      }
    }
    *(_WORD *)(result + 216) &= ~(1 << v4);
  }
  return result;
}

uint64_t sub_1BBAE647C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 284)) {
    unsigned int v8 = sub_1BBA1979C(a4);
  }
  else {
    unsigned int v8 = 0;
  }
  *a1 = v8;
  unsigned int v9 = sub_1BBA1979C(a4);
  a1[1] = v9;
  unsigned int v10 = *(_DWORD *)(a2 + 284);
  if (*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(a2 + 1) + 198)
     - (*(unsigned __int8 *)(a3 + 160)
      + *(unsigned __int8 *)(a3 + 161)) < v10)
    unsigned int v10 = *(unsigned __int8 *)(a2 + *(unsigned __int8 *)(a2 + 1) + 198)
        - (*(unsigned __int8 *)(a3 + 160)
         + *(unsigned __int8 *)(a3 + 161));
  LODWORD(v11) = *a1;
  if (*a1 > v10 || *a1 + v9 > 0x10) {
    return 4294954387;
  }
  a1[54] = 0;
  if (v11)
  {
    unint64_t v14 = 0;
    while (1)
    {
      unsigned int v15 = __clz(v11) ^ 0x1F;
      int v16 = (v11 & (v11 - 1)) != 0 ? v15 + 1 : v15;
      unsigned __int8 v17 = sub_1BBA196DC(a4, v16);
      *((unsigned char *)a1 + v14 + 8) = v17;
      if (v17 >= *a1) {
        return 4294954387;
      }
      *((_WORD *)a1 + v14 + 12) = *(_WORD *)(a2 + 2 * v17 + 288);
      *((_WORD *)a1 + 108) |= ((*(unsigned __int16 *)(a2 + 320) >> v17) & 1) << v14;
      int v18 = sub_1BBA196DC(a4, 1);
      *((_WORD *)a1 + 109) |= (v18 != 0) << v14;
      if (v18) {
        a1[v14 + 22] = sub_1BBA1979C(a4);
      }
      ++v14;
      unint64_t v11 = *a1;
      if (v14 >= v11)
      {
        unsigned int v9 = a1[1];
        break;
      }
    }
  }
  unsigned int v19 = v9 + v11;
  if (v11 < v9 + v11)
  {
    int v20 = *(unsigned __int8 *)(a2 + 196) + 4;
    uint64_t v21 = (int)v11;
    do
    {
      *((_WORD *)a1 + v21 + 12) = sub_1BBA196DC(a4, v20);
      *((_WORD *)a1 + 108) |= (sub_1BBA196DC(a4, 1) != 0) << v21;
      int v22 = sub_1BBA196DC(a4, 1);
      *((_WORD *)a1 + 109) |= (v22 != 0) << v21;
      if (v22) {
        a1[v21 + 22] = sub_1BBA1979C(a4);
      }
      ++v21;
      LODWORD(v11) = *a1;
      unsigned int v19 = a1[1] + *a1;
    }
    while (v19 > v21);
  }
  if (v19)
  {
    uint64_t v23 = 0;
    int v24 = 0;
    unsigned int v25 = *((unsigned __int16 *)a1 + 109);
    uint64_t v26 = (unsigned __int16 *)(a1 + 6);
    uint64_t v27 = (int *)(a1 + 22);
    do
    {
      if ((v25 >> v23))
      {
        if (v23 && v11 != v23 && *(v26 - 1) == *v26) {
          v24 += *v27;
        }
        else {
          int v24 = *v27;
        }
        v27[16] = v24;
      }
      ++v23;
      ++v26;
      ++v27;
    }
    while (v19 != v23);
  }
  return 0;
}

void sub_1BBAE66E0(unsigned int *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (dword_1E9F80A90 >= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
      || (unsigned int v2 = *a1,
          *(_DWORD *)buf = 67109120,
          unsigned int v27 = v2,
          _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "num_long_term_sps: %d\n", buf, 8u),
          dword_1E9F80A90 >= 3))
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
        || (unsigned int v3 = a1[1],
            *(_DWORD *)buf = 67109120,
            unsigned int v27 = v3,
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "num_long_term_pics: %d\n", buf, 8u), dword_1E9F80A90 >= 3))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Long-term sps:\n", buf, 2u);
        }
      }
    }
  }
  if (*a1)
  {
    unint64_t v4 = 0;
    int v5 = MEMORY[0x1E4F14500];
    while (1)
    {
      if ((*((unsigned __int16 *)a1 + 109) >> v4))
      {
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        unsigned int v6 = *((unsigned __int8 *)a1 + v4 + 8);
        unsigned int v7 = a1[v4 + 38];
        *(_DWORD *)buf = 67109632;
        unsigned int v27 = v6;
        __int16 v28 = 1024;
        int v29 = 1;
        __int16 v30 = 1024;
        unsigned int v31 = v7;
        unsigned int v8 = v5;
        unsigned int v9 = "\tidx: %d, delta_poc_msb_flag: %d, delta_poc_cycle: %d\n";
        uint32_t v10 = 20;
      }
      else
      {
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        unsigned int v11 = *((unsigned __int8 *)a1 + v4 + 8);
        *(_DWORD *)buf = 67109376;
        unsigned int v27 = v11;
        __int16 v28 = 1024;
        int v29 = 0;
        unsigned int v8 = v5;
        unsigned int v9 = "\tidx: %d, delta_poc_msb_flag: %d\n";
        uint32_t v10 = 14;
      }
      _os_log_impl(&dword_1BB9B9000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
LABEL_18:
      ++v4;
      unint64_t v12 = *a1;
      if (v4 >= v12) {
        goto LABEL_21;
      }
    }
  }
  LODWORD(v12) = 0;
LABEL_21:
  if (dword_1E9F80A90 > 2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Long-term poc lsb:\n", buf, 2u);
    LODWORD(v12) = *a1;
  }
  if (v12 < a1[1] + v12)
  {
    unint64_t v13 = (unsigned __int16 *)a1 + (int)v12 + 28;
    unint64_t v14 = MEMORY[0x1E4F14500];
    uint64_t v15 = 4 * (int)v12 + 152;
    do
    {
      if ((*((unsigned __int16 *)a1 + 109) >> v12))
      {
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        unsigned int v16 = *(v13 - 16);
        int v17 = (*((unsigned __int16 *)a1 + 108) >> v12) & 1;
        unsigned int v18 = *v13;
        int v19 = *(unsigned int *)((char *)a1 + v15);
        *(_DWORD *)buf = 67110144;
        unsigned int v27 = v16;
        __int16 v28 = 1024;
        int v29 = v17;
        __int16 v30 = 1024;
        unsigned int v31 = v18;
        __int16 v32 = 1024;
        int v33 = 1;
        __int16 v34 = 1024;
        int v35 = v19;
        int v20 = v14;
        uint64_t v21 = "\tpoc_lsb: %d, used: %d, poc: %d, delta_poc_msb_flag: %d, delta_poc_cycle: %d\n";
        uint32_t v22 = 32;
      }
      else
      {
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        unsigned int v23 = *(v13 - 16);
        int v24 = (*((unsigned __int16 *)a1 + 108) >> v12) & 1;
        unsigned int v25 = *v13;
        *(_DWORD *)buf = 67109888;
        unsigned int v27 = v23;
        __int16 v28 = 1024;
        int v29 = v24;
        __int16 v30 = 1024;
        unsigned int v31 = v25;
        __int16 v32 = 1024;
        int v33 = 0;
        int v20 = v14;
        uint64_t v21 = "\tpoc_lsb: %d, used: %d, poc: %d, delta_poc_msb_flag: %d\n";
        uint32_t v22 = 26;
      }
      _os_log_impl(&dword_1BB9B9000, v20, OS_LOG_TYPE_DEFAULT, v21, buf, v22);
LABEL_34:
      LODWORD(v12) = v12 + 1;
      ++v13;
      v15 += 4;
    }
    while (a1[1] + *a1 > v12);
  }
}

uint64_t sub_1BBAE6B30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 11) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_WORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_WORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 186) = 0u;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 265) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  uint64_t v4 = 336;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_DWORD *)(a1 + 332) = 0;
  *(unsigned char *)(a1 + 174) = 0;
  do
  {
    unint64_t v5 = 0;
    if (v3) {
      size_t v6 = 65;
    }
    else {
      size_t v6 = 17;
    }
    if (v3 == 3) {
      uint64_t v7 = 3;
    }
    else {
      uint64_t v7 = 1;
    }
    uint64_t v8 = v4;
    do
    {
      if (v3) {
        unsigned int v9 = (char *)&unk_1BBB784D9 + ((v5 > 2) | ((unint64_t)(v5 > 2) << 6));
      }
      else {
        unsigned int v9 = (char *)&unk_1BBB784C8;
      }
      memcpy((void *)(a1 + v8), v9, v6);
      v5 += v7;
      v8 += 65 * v7;
    }
    while (v5 < 6);
    ++v3;
    v4 += 390;
  }
  while (v3 != 4);
  *(void *)(a1 + 1944) = 0;
  *(void *)(a1 + 1949) = 0;
  *(_DWORD *)(a1 + 1896) = 0;
  *(_WORD *)(a1 + 1900) = 0;
  *(_DWORD *)(a1 + 1902) = 33685509;
  *(unsigned char *)(a1 + 1906) = 2;
  *(_DWORD *)(a1 + 1936) = 0;
  *(unsigned char *)(a1 + 1940) = 0;
  *(void *)(a1 + 1907) = 0;
  *(void *)(a1 + 1913) = 0;
  *(unsigned char *)(a1 + 1932) = 0;
  *(void *)(a1 + 1924) = 0;
  *(_WORD *)(a1 + 2024) = 0;
  *(void *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2028) = 0u;
  *(unsigned char *)(a1 + 2064) = 0;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(void *)(a1 + 2006) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(void *)(a1 + 2072) = a2;
  return a1;
}

void *sub_1BBAE6CE4(void *a1)
{
  unsigned int v2 = (void *)a1[256];
  if (v2)
  {
    free(v2);
    a1[256] = 0;
    a1[257] = 0;
  }
  sub_1BBA5623C((uint64_t)(a1 + 245));
  uint64_t v3 = (void *)a1[33];
  if (v3)
  {
    free(v3);
    a1[33] = 0;
    a1[34] = 0;
  }
  return a1;
}

uint64_t sub_1BBAE6D38(uint64_t result, uint64_t a2, unsigned int a3, BOOL *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = 0;
  int v8 = 8;
  int v9 = 8;
  uint64_t v10 = a3;
  do
  {
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t result = sub_1BBA1979C(v6);
    int v11 = (result + 1) & 1;
    unsigned int v12 = (-v11 ^ ((result + 1) >> 1)) + v11 + v9 + 256;
    int v13 = ((-(char)v11 ^ ((result + 1) >> 1)) + v11 + v9);
    int v14 = -v12;
    int v8 = v14 >= 0 ? -v14 : v13;
    *a4 = (v8 | v7) == 0;
    unsigned __int8 v15 = v8;
    if (!v8)
    {
LABEL_7:
      int v8 = 0;
      unsigned __int8 v15 = v9;
    }
    *(unsigned char *)(a2 + v7) = v15;
    int v9 = v15;
    ++v7;
  }
  while (v10 != v7);
  return result;
}

uint64_t sub_1BBAE6DEC(uint64_t a1, int a2, int a3, int a4, int a5, int a6, signed int a7, int a8)
{
  int v10 = a6;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v13 = a5 * a4;
  int v14 = a5 * a4 * a2;
  if (a6 > 109)
  {
    if (a6 == 110)
    {
      int v15 = 3000;
      goto LABEL_13;
    }
    if (a6 == 122 || a6 == 144)
    {
      int v15 = 4000;
      goto LABEL_13;
    }
  }
  else
  {
    int v15 = 1000;
    if ((a6 - 66) < 2) {
      goto LABEL_13;
    }
    if ((a6 - 100) < 2) {
      goto LABEL_12;
    }
    if (a6 == 77) {
      goto LABEL_13;
    }
  }
  int v10 = 100;
LABEL_12:
  int v15 = 1250;
LABEL_13:
  if (v13 <= 36864) {
    int v16 = 51;
  }
  else {
    int v16 = 52;
  }
  if (v13 < 22081) {
    int v16 = 50;
  }
  if (v13 < 8705) {
    int v16 = 42;
  }
  if (v13 <= 0x2000) {
    int v16 = 40;
  }
  if (v13 < 5121) {
    int v16 = 32;
  }
  if (v13 < 3601) {
    int v16 = 31;
  }
  if (v13 < 1621) {
    int v16 = 22;
  }
  if (v13 < 793) {
    int v16 = 21;
  }
  if (v13 >= 397) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = 11;
  }
  if (v13 < 100) {
    unsigned int v17 = 10;
  }
  if (v14 < 983041) {
    int v18 = 51;
  }
  else {
    int v18 = 52;
  }
  if (v14 <= 589824) {
    int v18 = 50;
  }
  if (v14 >= 522241) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 42;
  }
  if (v14 <= 245760) {
    unsigned int v19 = 40;
  }
  if (v14 < 216001) {
    unsigned int v19 = 32;
  }
  if (v14 < 108001) {
    unsigned int v19 = 31;
  }
  if (v14 < 40501) {
    unsigned int v19 = 30;
  }
  if (v14 < 20251) {
    unsigned int v19 = 22;
  }
  if (v14 < 19801) {
    unsigned int v19 = 21;
  }
  if (v14 < 11881) {
    unsigned int v19 = 13;
  }
  if (v14 < 6001) {
    unsigned int v19 = 12;
  }
  if (v14 < 3001) {
    unsigned int v19 = 11;
  }
  if (v14 < 1486) {
    unsigned int v19 = 10;
  }
  if (v17 > v19) {
    unsigned int v19 = v17;
  }
  if (192000 * v15 >= a3) {
    int v20 = 51;
  }
  else {
    int v20 = 52;
  }
  if (108000 * v15 >= a3) {
    int v20 = 50;
  }
  if (50000 * v15 >= a3) {
    int v20 = 41;
  }
  if (20000 * v15 >= a3) {
    int v20 = 32;
  }
  if (14000 * v15 >= a3) {
    int v20 = 31;
  }
  if (10000 * v15 >= a3) {
    int v20 = 30;
  }
  if (4000 * v15 >= a3) {
    int v20 = 21;
  }
  if (2000 * v15 >= a3) {
    int v20 = 20;
  }
  if (768 * v15 >= a3) {
    int v20 = 13;
  }
  if (384 * v15 >= a3) {
    int v20 = 12;
  }
  if (192 * v15 >= a3) {
    int v21 = 11;
  }
  else {
    int v21 = v20;
  }
  if (a3 <= v15 << 7) {
    int v21 = 1;
  }
  if (a3 <= v15 << 6) {
    unsigned int v22 = 10;
  }
  else {
    unsigned int v22 = v21;
  }
  if (v19 <= v22) {
    signed int v23 = v22;
  }
  else {
    signed int v23 = v19;
  }
  if (a7)
  {
    if (v23 > a7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67110400;
        int v30 = a7;
        __int16 v31 = 1024;
        int v32 = v23;
        __int16 v33 = 1024;
        int v34 = v10;
        __int16 v35 = 1024;
        int v36 = v13;
        __int16 v37 = 1024;
        int v38 = v14;
        __int16 v39 = 1024;
        int v40 = a3;
        _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Proposed level idc (%d) is not supported; Minimal level idc %d should be used based on profile %d, num_mb_f %d"
          ", num_mb_s %d, bps %d.\n",
          buf,
          0x26u);
      }
      return 4294954386;
    }
    signed int v23 = a7;
  }
  if (v10 == 101)
  {
    *(_DWORD *)a1 = 100;
    *(_WORD *)(a1 + 12) = 257;
  }
  else if (v10 == 67)
  {
    *(_DWORD *)a1 = 66;
    *(_WORD *)(a1 + 8) = 257;
    *(unsigned char *)(a1 + 10) = 1;
  }
  else
  {
    *(_DWORD *)a1 = v10;
  }
  *(_DWORD *)(a1 + 4) = v23;
  switch(v23)
  {
    case 10:
LABEL_115:
      int v25 = 396;
      goto LABEL_126;
    case 11:
      int v25 = 900;
      goto LABEL_126;
    case 12:
    case 13:
    case 20:
      int v25 = 2376;
      goto LABEL_126;
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
LABEL_116:
      if (dword_1E9F80A90 > 1)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Cannot set max_dpb_size with level %d -> default to 1\n", v23);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v30 = v23;
          _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Cannot set max_dpb_size with level %d -> default to 1\n", buf, 8u);
        }
      }
      int v26 = 1;
      goto LABEL_129;
    case 21:
      int v25 = 4752;
      goto LABEL_126;
    case 22:
    case 30:
      int v25 = 8100;
      goto LABEL_126;
    case 31:
      int v25 = 18000;
      goto LABEL_126;
    case 32:
      int v25 = 20480;
LABEL_126:
      int v27 = v25 / v13;
      if (v27 >= 16) {
        int v26 = 16;
      }
      else {
        int v26 = v27;
      }
LABEL_129:
      if (a8 < 1) {
        goto LABEL_138;
      }
      if (v26 <= a8)
      {
        if (v26 < a8 && dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          int v30 = v23;
          __int16 v31 = 1024;
          int v32 = v26;
          _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "level idc %d can only support reference buffer count %d", buf, 0xEu);
        }
LABEL_138:
        a8 = v26;
      }
      else if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        int v30 = a8;
        __int16 v31 = 1024;
        int v32 = v26;
        _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Use requested reference buffer count %d instead of %d\n", buf, 0xEu);
      }
      uint64_t result = 0;
      if (a8 >= 15) {
        int v28 = 15;
      }
      else {
        int v28 = a8;
      }
      *(_DWORD *)(a1 + 1320) = v28;
      break;
    default:
      switch(v23)
      {
        case '(':
        case ')':
          int v25 = 0x8000;
          goto LABEL_126;
        case '*':
          int v25 = 34816;
          goto LABEL_126;
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case '0':
        case '1':
          goto LABEL_116;
        case '2':
          int v25 = 110400;
          goto LABEL_126;
        case '3':
        case '4':
          int v25 = 184320;
          goto LABEL_126;
        default:
          if (v23 == 1) {
            goto LABEL_115;
          }
          goto LABEL_116;
      }
  }
  return result;
}

uint64_t sub_1BBAE748C(unsigned __int8 **a1, unint64_t **a2, unsigned __int8 *a3, void *a4, size_t *a5)
{
  __src = 0;
  uint64_t v136 = 0;
  v182[0] = &unk_1F14EEAA8;
  v182[1] = 2;
  v182[2] = 0;
  __int16 v183 = -192;
  uint64_t v184 = 0;
  BOOL v185 = sub_1BB9FD104;
  uint64_t v186 = 0;
  v177[0] = &unk_1F14EEAA8;
  v177[1] = 2;
  v177[2] = 0;
  __int16 v178 = -192;
  uint64_t v179 = 0;
  char v180 = sub_1BB9FD104;
  uint64_t v181 = 0;
  v172[0] = &unk_1F14EEAA8;
  v172[1] = 2;
  v172[2] = 0;
  __int16 v173 = -192;
  uint64_t v174 = 0;
  uint64_t v175 = sub_1BB9FD104;
  uint64_t v176 = 0;
  v167[0] = &unk_1F14EEAA8;
  v167[1] = 2;
  v167[2] = 0;
  __int16 v168 = -192;
  uint64_t v169 = 0;
  int v170 = sub_1BB9FD104;
  uint64_t v171 = 0;
  v162[0] = &unk_1F14EEAA8;
  v162[1] = 2;
  v162[2] = 0;
  __int16 v163 = -192;
  uint64_t v164 = 0;
  unsigned int v165 = sub_1BB9FD104;
  uint64_t v166 = 0;
  off_1EC59CAB8 = (uint64_t (*)(void, void, void, void, void))sub_1BB9FD21C;
  v156[1] = 0;
  v156[0] = 0;
  unint64_t v160 = 0;
  unsigned int v158 = 0;
  std::string __dst = 0;
  bzero(v152, 0x630uLL);
  unsigned __int8 v150 = 0;
  size_t __n = 0;
  if (!(a3[1] * *a3 * a3[2]) || !(*a2[1] * **a2 * *a2[2]) || !*a1 || !a1[1] || !a1[2])
  {
    uint64_t v16 = 4294954394;
    goto LABEL_30;
  }
  int v10 = 0;
  uint64_t v11 = 0;
  size_t v12 = 23;
  do
  {
    uint64_t v13 = a3[v11];
    if (a3[v11])
    {
      unsigned __int8 v150 = ++v10;
      v12 += 3;
      int v14 = a2[v11];
      do
      {
        uint64_t v15 = *v14++;
        v12 += v15 + 2;
        --v13;
      }
      while (v13);
    }
    ++v11;
  }
  while (v11 != 5);
  uint64_t v16 = sub_1BBA12730(&__src, v12, 0x10uLL);
  if (!v16)
  {
    uint64_t v16 = sub_1BBA065AC((uint64_t)v182, *a1, **a2);
    if (!v16)
    {
      uint64_t v16 = sub_1BBA065AC((uint64_t)v177, a1[1], *a2[1]);
      if (!v16)
      {
        uint64_t v16 = sub_1BBA065AC((uint64_t)v172, a1[2], *a2[2]);
        if (!v16)
        {
          if (!a3[3]
            || (unsigned int v17 = a1[3]) == 0
            || (unint64_t v18 = *a2[3]) == 0
            || (uint64_t v16 = sub_1BBA065AC((uint64_t)v167, v17, v18), !v16))
          {
            if (!a3[4]
              || (unsigned int v19 = a1[4]) == 0
              || (unint64_t v20 = *a2[4]) == 0
              || (uint64_t v16 = sub_1BBA065AC((uint64_t)v162, v19, v20), !v16))
            {
              v151[0] = v183;
              v151[1] = v178;
              v151[2] = v173;
              v151[3] = v168;
              v151[4] = v163;
              uint64_t v16 = sub_1BBA03DE8((uint64_t)v152, (uint64_t)v182);
              if (!v16)
              {
                uint64_t v16 = sub_1BBA03DE8((uint64_t)v152, (uint64_t)v177);
                if (!v16)
                {
                  uint64_t v21 = 0;
                  while (1)
                  {
                    unsigned int v22 = *(char **)&v152[v21];
                    if (v22) {
                      break;
                    }
                    v21 += 16;
                    if (v21 == 256) {
                      goto LABEL_60;
                    }
                  }
                  for (uint64_t i = 0; i != 256; i += 16)
                  {
                    __int16 v31 = *(unsigned char **)&v152[i + 256];
                    if (v31)
                    {
                      uint64_t v32 = (8 * (v22[44] & 1)) | (4 * (v22[45] & 1)) | (2 * (v22[46] & 1)) | v22[47] & 1u;
                      char v138 = 1;
                      char v33 = *v22;
                      unsigned __int8 v139 = v139 & 0xFC | *v22 & 3;
                      char v34 = 4 * (v22[7] & 1);
                      unsigned __int8 v139 = v34 | v139 & 0xFB;
                      unsigned __int8 v139 = v34 & 0xFC | (8 * v22[8]) | v33 & 3;
                      unsigned int v140 = *((_DWORD *)v22 + 4);
                      uint64_t v141 = v32 << 44;
                      unsigned __int8 v142 = v22[57];
                      unsigned __int16 v143 = 0;
                      unsigned __int8 v144 = 0;
                      unsigned __int8 v145 = v31[173];
                      unsigned __int8 v146 = v31[194];
                      unsigned __int8 v147 = v31[195];
                      unsigned __int16 v148 = 0;
                      unsigned __int8 v149 = (4 * v22[169] + 4) & 0x1C | (32 * v22[170]) | 0xC0;
                      uint64_t v16 = 4294954387;
                      if (!__src || !v136) {
                        goto LABEL_30;
                      }
                      unsigned int v157 = __src;
                      unsigned int v158 = __src;
                      std::string __dst = (char *)__src + v136;
                      char v161 = 0;
                      unint64_t v160 = 0x1000000;
                      *(_DWORD *)__src = 1;
                      unint64_t v35 = SHIDWORD(v160) + 8;
                      int v36 = v160 << (v35 & 0xF8);
                      __int16 v37 = (_DWORD *)((char *)v158 + (v35 >> 3));
                      unsigned int v158 = v37;
                      char v38 = BYTE4(v160) & 7;
                      HIDWORD(v160) = BYTE4(v160) & 7;
                      if (v37 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        __int16 v37 = __dst;
                      }
                      LODWORD(v160) = ((v139 & 3) << (30 - v38)) | v36;
                      *__int16 v37 = bswap32(v160);
                      unint64_t v39 = SHIDWORD(v160) + 2;
                      int v40 = v160 << (v39 & 0xF8);
                      uint64_t v41 = (_DWORD *)((char *)v158 + (v39 >> 3));
                      unsigned int v158 = v41;
                      int v42 = v39 & 7;
                      HIDWORD(v160) = v42;
                      if (v41 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        uint64_t v41 = __dst;
                      }
                      LODWORD(v160) = (((v139 >> 2) & 1) << (v42 ^ 0x1F)) | v40;
                      *uint64_t v41 = bswap32(v160);
                      unint64_t v43 = SHIDWORD(v160) + 1;
                      int v44 = v160 << (v43 & 0xF8);
                      int64x2_t v45 = (_DWORD *)((char *)v158 + (v43 >> 3));
                      unsigned int v158 = v45;
                      int v46 = v43 & 7;
                      HIDWORD(v160) = v46;
                      if (v45 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        int64x2_t v45 = __dst;
                      }
                      LODWORD(v160) = (v139 >> 3 << (27 - v46)) | v44;
                      _DWORD *v45 = bswap32(v160);
                      unint64_t v47 = SHIDWORD(v160) + 5;
                      unsigned int v158 = (_DWORD *)((char *)v158 + (v47 >> 3));
                      LODWORD(v160) = v160 << (v47 & 0xF8);
                      HIDWORD(v160) = v47 & 7;
                      if (v158 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                      }
                      sub_1BBA19678((uint64_t)v156, v140, 32);
                      LODWORD(v160) = (HIDWORD(v141) << (16 - BYTE4(v160))) | v160;
                      *unsigned int v158 = bswap32(v160);
                      unint64_t v48 = SHIDWORD(v160) + 16;
                      unsigned int v158 = (_DWORD *)((char *)v158 + (v48 >> 3));
                      unint64_t v160 = __PAIR64__(HIDWORD(v160), v160 << (v48 & 0xF8)) & 0x7FFFFFFFFLL;
                      if (v158 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                      }
                      sub_1BBA19678((uint64_t)v156, v141, 32);
                      LODWORD(v160) = (v142 << (24 - BYTE4(v160))) | v160;
                      *unsigned int v158 = bswap32(v160);
                      unint64_t v49 = SHIDWORD(v160) + 8;
                      int v50 = v160 << (v49 & 0xF8);
                      uint64_t v51 = (_DWORD *)((char *)v158 + (v49 >> 3));
                      unsigned int v158 = v51;
                      char v52 = BYTE4(v160) & 7;
                      HIDWORD(v160) = BYTE4(v160) & 7;
                      if (v51 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        uint64_t v51 = __dst;
                      }
                      LODWORD(v160) = (15 << (28 - v52)) | v50;
                      *uint64_t v51 = bswap32(v160);
                      unint64_t v53 = SHIDWORD(v160) + 4;
                      int v54 = v160 << (v53 & 0xF8);
                      unsigned int v55 = (_DWORD *)((char *)v158 + (v53 >> 3));
                      unsigned int v158 = v55;
                      int v56 = v53 & 7;
                      HIDWORD(v160) = v56;
                      if (v55 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        unsigned int v55 = __dst;
                      }
                      LODWORD(v160) = (v143 << (20 - v56)) | v54;
                      *unsigned int v55 = bswap32(v160);
                      unint64_t v57 = SHIDWORD(v160) + 12;
                      int v58 = v160 << (v57 & 0xF8);
                      int v59 = (_DWORD *)((char *)v158 + (v57 >> 3));
                      unsigned int v158 = v59;
                      int v60 = v57 & 7;
                      HIDWORD(v160) = v60;
                      if (v59 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        int v59 = __dst;
                      }
                      LODWORD(v160) = (63 << (26 - v60)) | v58;
                      *int v59 = bswap32(v160);
                      unint64_t v61 = SHIDWORD(v160) + 6;
                      int v62 = v160 << (v61 & 0xF8);
                      int v63 = (_DWORD *)((char *)v158 + (v61 >> 3));
                      unsigned int v158 = v63;
                      int v64 = v61 & 7;
                      HIDWORD(v160) = v64;
                      if (v63 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        int v63 = __dst;
                      }
                      LODWORD(v160) = (v144 << (30 - v64)) | v62;
                      *int v63 = bswap32(v160);
                      unint64_t v65 = SHIDWORD(v160) + 2;
                      int v66 = v160 << (v65 & 0xF8);
                      uint64_t v67 = (_DWORD *)((char *)v158 + (v65 >> 3));
                      unsigned int v158 = v67;
                      int v68 = v65 & 7;
                      HIDWORD(v160) = v68;
                      if (v67 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        uint64_t v67 = __dst;
                      }
                      LODWORD(v160) = (63 << (26 - v68)) | v66;
                      *uint64_t v67 = bswap32(v160);
                      unint64_t v69 = SHIDWORD(v160) + 6;
                      int v70 = v160 << (v69 & 0xF8);
                      char v71 = (_DWORD *)((char *)v158 + (v69 >> 3));
                      unsigned int v158 = v71;
                      int v72 = v69 & 7;
                      HIDWORD(v160) = v72;
                      if (v71 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        char v71 = __dst;
                      }
                      LODWORD(v160) = (v145 << (30 - v72)) | v70;
                      *char v71 = bswap32(v160);
                      unint64_t v73 = SHIDWORD(v160) + 2;
                      int v74 = v160 << (v73 & 0xF8);
                      unsigned int v75 = (_DWORD *)((char *)v158 + (v73 >> 3));
                      unsigned int v158 = v75;
                      int v76 = v73 & 7;
                      HIDWORD(v160) = v76;
                      if (v75 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        unsigned int v75 = __dst;
                      }
                      LODWORD(v160) = (31 << (27 - v76)) | v74;
                      *unsigned int v75 = bswap32(v160);
                      unint64_t v77 = SHIDWORD(v160) + 5;
                      int v78 = v160 << (v77 & 0xF8);
                      signed int v79 = (_DWORD *)((char *)v158 + (v77 >> 3));
                      unsigned int v158 = v79;
                      int v80 = v77 & 7;
                      HIDWORD(v160) = v80;
                      if (v79 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        signed int v79 = __dst;
                      }
                      LODWORD(v160) = (v146 << (29 - v80)) | v78;
                      *signed int v79 = bswap32(v160);
                      unint64_t v81 = SHIDWORD(v160) + 3;
                      int v82 = v160 << (v81 & 0xF8);
                      uint64_t v83 = (_DWORD *)((char *)v158 + (v81 >> 3));
                      unsigned int v158 = v83;
                      int v84 = v81 & 7;
                      HIDWORD(v160) = v84;
                      if (v83 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        uint64_t v83 = __dst;
                      }
                      LODWORD(v160) = (31 << (27 - v84)) | v82;
                      *uint64_t v83 = bswap32(v160);
                      unint64_t v85 = SHIDWORD(v160) + 5;
                      int v86 = v160 << (v85 & 0xF8);
                      long long v87 = (_DWORD *)((char *)v158 + (v85 >> 3));
                      unsigned int v158 = v87;
                      int v88 = v85 & 7;
                      HIDWORD(v160) = v88;
                      if (v87 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        long long v87 = __dst;
                      }
                      LODWORD(v160) = (v147 << (29 - v88)) | v86;
                      *long long v87 = bswap32(v160);
                      unint64_t v89 = SHIDWORD(v160) + 3;
                      int v90 = v160 << (v89 & 0xF8);
                      int v91 = (_DWORD *)((char *)v158 + (v89 >> 3));
                      unsigned int v158 = v91;
                      int v92 = v89 & 7;
                      HIDWORD(v160) = v92;
                      if (v91 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        int v91 = __dst;
                      }
                      LODWORD(v160) = (v148 << (16 - v92)) | v90;
                      *int v91 = bswap32(v160);
                      unint64_t v93 = SHIDWORD(v160) + 16;
                      int v94 = v160 << (v93 & 0xF8);
                      int v95 = (_DWORD *)((char *)v158 + (v93 >> 3));
                      unsigned int v158 = v95;
                      char v96 = BYTE4(v160) & 7;
                      HIDWORD(v160) = BYTE4(v160) & 7;
                      if (v95 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        int v95 = __dst;
                      }
                      LODWORD(v160) = ((v149 & 3) << (30 - v96)) | v94;
                      *int v95 = bswap32(v160);
                      unint64_t v97 = SHIDWORD(v160) + 2;
                      int v98 = v160 << (v97 & 0xF8);
                      unsigned int v99 = (_DWORD *)((char *)v158 + (v97 >> 3));
                      unsigned int v158 = v99;
                      int v100 = v97 & 7;
                      HIDWORD(v160) = v100;
                      if (v99 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        unsigned int v99 = __dst;
                      }
                      LODWORD(v160) = (((v149 >> 2) & 7) << (29 - v100)) | v98;
                      *unsigned int v99 = bswap32(v160);
                      unint64_t v101 = SHIDWORD(v160) + 3;
                      int v102 = v160 << (v101 & 0xF8);
                      unsigned int v103 = (_DWORD *)((char *)v158 + (v101 >> 3));
                      unsigned int v158 = v103;
                      int v104 = v101 & 7;
                      HIDWORD(v160) = v104;
                      if (v103 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        unsigned int v103 = __dst;
                      }
                      LODWORD(v160) = (((v149 >> 5) & 1) << (v104 ^ 0x1F)) | v102;
                      *unsigned int v103 = bswap32(v160);
                      unint64_t v105 = SHIDWORD(v160) + 1;
                      int v106 = v160 << (v105 & 0xF8);
                      unsigned int v107 = (_DWORD *)((char *)v158 + (v105 >> 3));
                      unsigned int v158 = v107;
                      int v108 = v105 & 7;
                      HIDWORD(v160) = v108;
                      if (v107 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        unsigned int v107 = __dst;
                      }
                      LODWORD(v160) = (v149 >> 6 << (30 - v108)) | v106;
                      *unsigned int v107 = bswap32(v160);
                      unint64_t v109 = SHIDWORD(v160) + 2;
                      int v110 = v160 << (v109 & 0xF8);
                      uint64_t v111 = (_DWORD *)((char *)v158 + (v109 >> 3));
                      unsigned int v158 = v111;
                      int v112 = v109 & 7;
                      HIDWORD(v160) = v112;
                      if (v111 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        uint64_t v111 = __dst;
                      }
                      LODWORD(v160) = (v150 << (24 - v112)) | v110;
                      *uint64_t v111 = bswap32(v160);
                      unint64_t v113 = SHIDWORD(v160) + 8;
                      unsigned int v114 = v160 << (v113 & 0xF8);
                      char v115 = (_DWORD *)((char *)v158 + (v113 >> 3));
                      unsigned int v158 = v115;
                      char v116 = BYTE4(v160) & 7;
                      unint64_t v160 = __PAIR64__(HIDWORD(v160), v114) & 0x7FFFFFFFFLL;
                      if (v115 >= __dst)
                      {
                        char v161 = 1;
                        unsigned int v158 = __dst;
                        char v115 = __dst;
                      }
                      uint64_t v117 = 0;
                      while (1)
                      {
                        if (a3[v117])
                        {
                          LODWORD(v160) = (0x80000000 >> v116) | v114;
                          *char v115 = bswap32(v160);
                          unint64_t v118 = SHIDWORD(v160) + 1;
                          unsigned int v119 = v160 << (v118 & 0xF8);
                          uint64_t v120 = (_DWORD *)((char *)v158 + (v118 >> 3));
                          LODWORD(v160) = v119;
                          HIDWORD(v160) = v118 & 7;
                          unsigned int v158 = v120;
                          if (v120 >= __dst)
                          {
                            char v161 = 1;
                            unsigned int v158 = __dst;
                            uint64_t v120 = __dst;
                          }
                          *uint64_t v120 = bswap32(v119);
                          unint64_t v121 = SHIDWORD(v160) + 1;
                          int v122 = (_DWORD *)((char *)v158 + (v121 >> 3));
                          unsigned int v158 = v122;
                          HIDWORD(v160) = v121 & 7;
                          if (v122 >= __dst)
                          {
                            char v161 = 1;
                            unsigned int v158 = __dst;
                            int v122 = __dst;
                          }
                          LODWORD(v160) = (v151[v117] << (26 - (v121 & 7))) | (v160 << (v121 & 0xF8));
                          *int v122 = bswap32(v160);
                          unint64_t v123 = SHIDWORD(v160) + 6;
                          uint64_t v124 = (_DWORD *)((char *)v158 + (v123 >> 3));
                          unsigned int v158 = v124;
                          HIDWORD(v160) = v123 & 7;
                          if (v124 >= __dst)
                          {
                            char v161 = 1;
                            unsigned int v158 = __dst;
                            uint64_t v124 = __dst;
                          }
                          uint64_t v125 = a3[v117];
                          LODWORD(v160) = (v125 << (16 - (v123 & 7))) | (v160 << (v123 & 0xF8));
                          _DWORD *v124 = bswap32(v160);
                          unint64_t v126 = SHIDWORD(v160) + 16;
                          unsigned int v127 = v160 << (v126 & 0xF8);
                          char v115 = (_DWORD *)((char *)v158 + (v126 >> 3));
                          unsigned int v158 = v115;
                          char v116 = BYTE4(v160) & 7;
                          unint64_t v160 = __PAIR64__(HIDWORD(v160), v127) & 0x7FFFFFFFFLL;
                          if (v115 >= __dst)
                          {
                            char v161 = 1;
                            unsigned int v158 = __dst;
                            char v115 = __dst;
                          }
                          if (v125)
                          {
                            unint64_t v128 = 0;
                            int v129 = a1[v117];
                            uint64_t v130 = 8 * v125;
                            while (1)
                            {
                              unint64_t v131 = a2[v117][v128 / 8];
                              LODWORD(v160) = (v131 << (16 - v116)) | v127;
                              *char v115 = bswap32(v160);
                              unint64_t v132 = SHIDWORD(v160) + 16;
                              unsigned int v133 = (_DWORD *)((char *)v158 + (v132 >> 3));
                              unsigned int v158 = v133;
                              LODWORD(v160) = v160 << (v132 & 0xF8);
                              HIDWORD(v160) = BYTE4(v160) & 7;
                              if (v133 >= __dst)
                              {
                                char v161 = 1;
                                unsigned int v158 = __dst;
                                unsigned int v133 = __dst;
                              }
                              uint64_t v134 = (int)v131;
                              if ((int)v131 > (unint64_t)((unsigned char *)__dst - (unsigned char *)v133)) {
                                break;
                              }
                              memcpy(v133, v129, (int)v131);
                              char v116 = BYTE4(v160);
                              char v115 = (_DWORD *)((char *)v158 + v134 + (SHIDWORD(v160) >> 3));
                              unsigned int v158 = v115;
                              if (v115 >= __dst)
                              {
                                char v161 = 1;
                                unsigned int v158 = __dst;
                                char v115 = __dst;
                              }
                              unsigned int v127 = 0;
                              unsigned int v114 = 0;
                              LODWORD(v160) = 0;
                              v129 += v134;
                              v128 += 8;
                              if (v130 == v128) {
                                goto LABEL_127;
                              }
                            }
                            uint64_t v16 = 4294940770;
                            goto LABEL_30;
                          }
                          unsigned int v114 = v127;
                        }
LABEL_127:
                        if (++v117 == 5)
                        {
                          uint64_t v16 = 0;
                          size_t __n = (char *)v115 - v157;
                          goto LABEL_30;
                        }
                      }
                    }
                  }
LABEL_60:
                  uint64_t v16 = 4294954387;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_30:
  if (v155) {
    sub_1BB9C09B4(v155);
  }
  if (v154) {
    sub_1BB9C09B4(v154);
  }
  if (v153) {
    sub_1BB9C09B4(v153);
  }
  for (uint64_t j = 1528; j != 504; j -= 16)
  {
    int v24 = *(std::__shared_weak_count **)&v152[j];
    if (v24) {
      sub_1BB9C09B4(v24);
    }
  }
  do
  {
    int v25 = *(std::__shared_weak_count **)&v152[j];
    if (v25) {
      sub_1BB9C09B4(v25);
    }
    j -= 16;
  }
  while (j != 248);
  do
  {
    int v26 = *(std::__shared_weak_count **)&v152[j];
    if (v26) {
      sub_1BB9C09B4(v26);
    }
    j -= 16;
  }
  while (j != -8);
  if (v156[0]) {
    free(v156[0]);
  }
  if (v16)
  {
    int v27 = __src;
    if (!__src) {
      return v16;
    }
    goto LABEL_55;
  }
  size_t v28 = __n;
  int v27 = __src;
  if (*a5 < __n)
  {
    uint64_t v16 = 4294954394;
    if (!__src) {
      return v16;
    }
    goto LABEL_55;
  }
  memcpy(a4, __src, __n);
  uint64_t v16 = 0;
  *a5 = v28;
  if (v27) {
LABEL_55:
  }
    free(v27);
  return v16;
}

void sub_1BBAE8568(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1BBA19D2C(va);
  if (STACK[0x678]) {
    free((void *)STACK[0x678]);
  }
  if (a3) {
    free(a3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1BBAE859C(const void *a1, size_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  __dst[1] = 0;
  __dst[0] = 0;
  size_t v28 = 0;
  if (!sub_1BBA12730(__dst, a2, 0x10uLL))
  {
    memcpy(__dst[0], a1, a2);
    size_t v28 = a2;
    unint64_t v20 = &unk_1F14EEAA8;
    uint64_t v21 = 2;
    uint64_t v22 = 0;
    __int16 v23 = -192;
    uint64_t v24 = 0;
    int v25 = sub_1BB9FD104;
    uint64_t v26 = 0;
    uint64_t v13 = &unk_1F14EEAA8;
    uint64_t v14 = 2;
    uint64_t v15 = 0;
    __int16 v16 = -192;
    uint64_t v17 = 0;
    unint64_t v18 = sub_1BB9FD104;
    uint64_t v19 = 0;
    uint64_t v6 = &unk_1F14EEAA8;
    uint64_t v7 = 2;
    uint64_t v8 = 0;
    __int16 v9 = -192;
    uint64_t v10 = 0;
    uint64_t v11 = sub_1BB9FD104;
    uint64_t v12 = 0;
    off_1EC59CAB8 = (uint64_t (*)(void, void, void, void, void))sub_1BB9FD21C;
    bzero(v5, 0x630uLL);
    operator new[]();
  }
  if (__dst[0]) {
    free(__dst[0]);
  }
  return 4294954392;
}

void sub_1BBAE8AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1BBA19D2C(va);
  if (STACK[0x6E8]) {
    free((void *)STACK[0x6E8]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1BBAE8AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  size_t v12 = v11;
  uint64_t v13 = (const void *)v6;
  memptr[0] = 0;
  memptr[1] = 0;
  size_t v64 = 0;
  if (sub_1BBA12730(memptr, v11, 0x10uLL))
  {
    uint64_t v14 = 4294954392;
  }
  else
  {
    memcpy(memptr[0], v13, v12);
    size_t v64 = v12;
    int v60 = 0;
    unint64_t v61 = 0;
    unint64_t v62 = 0;
    *(void *)int v58 = 0;
    uint64_t v57 = 0;
    unint64_t v59 = 0;
    bzero(v54, 0x1220uLL);
    if (v8) {
      uint64_t v15 = v8;
    }
    else {
      uint64_t v15 = v54;
    }
    uint64_t v14 = 4294954394;
    if (!memptr[0] || !v12) {
      goto LABEL_97;
    }
    unint64_t v61 = 0;
    *(void *)int v58 = 0;
    *(void *)buf = 0;
    uint64_t v68 = 0;
    unint64_t v69 = memptr[0];
    int v70 = (char *)memptr[0];
    char v71 = (unsigned int *)((char *)memptr[0] + v12);
    uint64_t v72 = bswap32(*(_DWORD *)memptr[0]);
    char v73 = 0;
    uint64_t v14 = sub_1BBA1A16C(memptr, (uint64_t)buf);
    if (!v14)
    {
      unint64_t v16 = SHIDWORD(v72) + 5;
      int v17 = v16 & 7;
      HIDWORD(v72) = v17;
      unint64_t v18 = (unint64_t)v71;
      uint64_t v19 = (unsigned int *)&v70[v16 >> 3];
      int v70 = (char *)v19;
      if (v19 >= v71)
      {
        if (v19 > v71)
        {
          int v70 = (char *)v71;
          uint64_t v19 = v71;
        }
        unsigned int v20 = v72;
      }
      else
      {
        unsigned int v20 = bswap32(*v19);
      }
      unsigned int v21 = v72 >> 27;
      unsigned int v22 = v20 << v17;
      LODWORD(v72) = v20 << v17;
      if (v21)
      {
        do
        {
          __int16 v23 = (unsigned int *)((char *)v19 + 2);
          if ((unint64_t)v19 + 2 >= v18)
          {
            if ((unint64_t)v19 + 2 > v18) {
              __int16 v23 = (unsigned int *)v18;
            }
            unsigned int v24 = v22;
          }
          else
          {
            unsigned int v24 = bswap32(*v23);
          }
          size_t v25 = HIWORD(v22);
          sub_1BBA1A278(&v65, v25);
          memcpy(v65, v23, v25);
          uint64_t v26 = v61;
          if ((unint64_t)v61 >= v62)
          {
            uint64_t v27 = sub_1BBA1A368((uint64_t *)&v60, (uint64_t)&v65);
          }
          else
          {
            *unint64_t v61 = 0;
            v26[1] = 0;
            v26[2] = 0;
            sub_1BBA1A2EC(v26, v65, (uint64_t)v66, v66 - (unsigned char *)v65);
            uint64_t v27 = (uint64_t)(v26 + 3);
          }
          unint64_t v61 = (void *)v27;
          if (v65)
          {
            int v66 = v65;
            operator delete(v65);
          }
          uint64_t v19 = (unsigned int *)((char *)v23 + v25);
          if ((unint64_t)v23 + v25 >= v18)
          {
            unsigned int v22 = v24 << v17;
            if ((unint64_t)v23 + v25 > v18) {
              uint64_t v19 = (unsigned int *)v18;
            }
          }
          else
          {
            unsigned int v22 = bswap32(*v19);
          }
          --v21;
        }
        while (v21);
        LODWORD(v72) = v22;
      }
      HIDWORD(v72) = v17;
      size_t v28 = (unsigned int *)((char *)v19 + 1);
      int v70 = (char *)v28;
      if ((unint64_t)v28 >= v18)
      {
        unsigned int v29 = v22;
        if ((unint64_t)v28 > v18)
        {
          int v70 = (char *)v18;
          size_t v28 = (unsigned int *)v18;
          unsigned int v29 = v22;
        }
      }
      else
      {
        unsigned int v29 = bswap32(*v28);
      }
      unsigned int v30 = HIBYTE(v22);
      unsigned int v31 = v29 << v17;
      for (LODWORD(v72) = v29 << v17; v30; --v30)
      {
        uint64_t v32 = (unsigned int *)((char *)v28 + 2);
        if ((unint64_t)v28 + 2 >= v18)
        {
          if ((unint64_t)v28 + 2 > v18) {
            uint64_t v32 = (unsigned int *)v18;
          }
          unsigned int v33 = v31;
        }
        else
        {
          unsigned int v33 = bswap32(*v32);
        }
        size_t v34 = HIWORD(v31);
        sub_1BBA1A278(&v65, v34);
        memcpy(v65, v32, v34);
        unint64_t v35 = *(void **)v58;
        if (*(void *)v58 >= v59)
        {
          uint64_t v36 = sub_1BBA1A368(&v57, (uint64_t)&v65);
        }
        else
        {
          **(void **)int v58 = 0;
          v35[1] = 0;
          v35[2] = 0;
          sub_1BBA1A2EC(v35, v65, (uint64_t)v66, v66 - (unsigned char *)v65);
          uint64_t v36 = (uint64_t)(v35 + 3);
        }
        *(void *)int v58 = v36;
        if (v65)
        {
          int v66 = v65;
          operator delete(v65);
        }
        size_t v28 = (unsigned int *)((char *)v32 + v34);
        if ((unint64_t)v32 + v34 >= v18)
        {
          unsigned int v31 = v33 << v17;
          if ((unint64_t)v32 + v34 > v18) {
            size_t v28 = (unsigned int *)v18;
          }
        }
        else
        {
          unsigned int v31 = bswap32(*v28);
        }
      }
      uint64_t v14 = 0;
    }
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    if (!v14)
    {
      if (v61 != v60)
      {
        *(void *)buf = 0;
        uint64_t v68 = 0;
        char v71 = 0;
        uint64_t v72 = 0;
        int v70 = 0;
        int v42 = operator new(0x758uLL, MEMORY[0x1E4FBA2D0]);
        if (v42) {
          bzero(v42, 0x758uLL);
        }
        operator new();
      }
      if (*(void *)v58 != v57)
      {
        *(void *)buf = 0;
        uint64_t v68 = 0;
        uint64_t v72 = 0;
        unint64_t v43 = operator new(0x150uLL, MEMORY[0x1E4FBA2D0]);
        if (v43)
        {
          v43[19] = 0u;
          v43[20] = 0u;
          v43[17] = 0u;
          v43[18] = 0u;
          v43[15] = 0u;
          v43[16] = 0u;
          v43[13] = 0u;
          v43[14] = 0u;
          v43[11] = 0u;
          v43[12] = 0u;
          v43[9] = 0u;
          v43[10] = 0u;
          v43[7] = 0u;
          v43[8] = 0u;
          v43[5] = 0u;
          v43[6] = 0u;
          v43[3] = 0u;
          v43[4] = 0u;
          v43[1] = 0u;
          v43[2] = 0u;
          *unint64_t v43 = 0u;
        }
        operator new();
      }
      if (v10)
      {
        uint64_t v44 = 0;
        int64x2_t v45 = v15;
        uint64_t v14 = 4294954387;
        while (1)
        {
          int v46 = (int32x2_t *)*v45;
          if (*v45) {
            break;
          }
          __int16 v37 = 0;
          ++v44;
          v45 += 2;
          if (v44 == 32) {
            goto LABEL_58;
          }
        }
        __int16 v37 = (std::__shared_weak_count *)v15[2 * v44 + 1];
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int32x2_t v47 = vadd_s32(vshl_n_s32(v46[166], 4uLL), (int32x2_t)0x1000000010);
        int v48 = v46[167].u8[3];
        if (v46[167].i8[3])
        {
          int v48 = 2 * v46[167].i32[1];
          int v49 = 2 * v46[168].i32[1];
          v50.i32[0] = v46[168].i32[0];
          v50.i32[1] = v46[169].i32[0];
          v51.i32[0] = v46[167].i32[1];
          v51.i32[1] = v46[168].i32[1];
          int32x2_t v52 = vadd_s32(v50, v51);
          int32x2_t v53 = vsub_s32(v47, vadd_s32(v52, v52));
        }
        else
        {
          int v49 = 0;
          int32x2_t v53 = v47;
        }
        uint64_t v14 = 0;
        *uint64_t v10 = v47;
        v10[1].i32[0] = v48;
        v10[1].i32[1] = v49;
        void v10[2] = v53;
      }
      else
      {
        __int16 v37 = 0;
        uint64_t v14 = 0;
      }
    }
    else
    {
LABEL_97:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "LRPConfigInfo_avcc: extract parameter sets from configuration record failed", buf, 2u);
      }
      __int16 v37 = 0;
    }
LABEL_58:
    if (v56) {
      sub_1BB9C09B4(v56);
    }
    if (v55) {
      sub_1BB9C09B4(v55);
    }
    for (uint64_t i = 575; i != 63; i -= 2)
    {
      unint64_t v39 = (std::__shared_weak_count *)v54[i];
      if (v39) {
        sub_1BB9C09B4(v39);
      }
    }
    do
    {
      int v40 = (std::__shared_weak_count *)v54[i];
      if (v40) {
        sub_1BB9C09B4(v40);
      }
      i -= 2;
    }
    while (i != -1);
    if (v37) {
      sub_1BB9C09B4(v37);
    }
    v54[0] = (void **)&v57;
    sub_1BBAE9EB4(v54);
    v54[0] = (void **)&v60;
    sub_1BBAE9EB4(v54);
  }
  if (memptr[0]) {
    free(memptr[0]);
  }
  return v14;
}

void sub_1BBAE9DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  if (v12) {
    MEMORY[0x1C18605E0](v12, 0x1010C403B1A94AALL);
  }
  uint64_t v15 = *(void **)(v13 - 160);
  if (v15) {
    free(v15);
  }
  sub_1BB9E791C((uint64_t)&a12);
  a12 = (void **)&STACK[0x1238];
  sub_1BBAE9EB4(&a12);
  a12 = (void **)(v13 - 240);
  sub_1BBAE9EB4(&a12);
  unint64_t v16 = *(void **)(v13 - 216);
  if (v16) {
    free(v16);
  }
  _Unwind_Resume(a1);
}

void sub_1BBAE9EB4(void ***a1)
{
  unsigned int v2 = *a1;
  if (*v2)
  {
    sub_1BBA1A220((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t H264VideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, void *a3)
{
  VTVideoEncoderGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  CFLog();
  *a3 = 0;
  return v4;
}

uint64_t sub_1BBAEA080(uint64_t a1, CFTypeRef *a2)
{
  pthread_once(&stru_1E9F80A98, sub_1BBAEA114);
  if (a2 && qword_1E9F820D0)
  {
    *a2 = CFRetain((CFTypeRef)qword_1E9F820D0);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void sub_1BBAEA114()
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    uint64_t v3 = (void *)*MEMORY[0x1E4F447E8];
    keys[0] = *(void **)MEMORY[0x1E4F44B68];
    keys[1] = v3;
    values[0] = v1;
    values[1] = v1;
    uint64_t v4 = (void *)*MEMORY[0x1E4F449C8];
    keys[2] = *(void **)MEMORY[0x1E4F447D0];
    keys[3] = v4;
    values[2] = v1;
    values[3] = v1;
    unint64_t v5 = (void *)*MEMORY[0x1E4F44810];
    keys[4] = *(void **)MEMORY[0x1E4F449D0];
    keys[5] = v5;
    values[4] = v1;
    values[5] = v1;
    uint64_t v6 = (void *)*MEMORY[0x1E4F44870];
    keys[6] = @"ThermalLevel";
    keys[7] = v6;
    values[6] = v1;
    values[7] = v1;
    keys[8] = @"FECPercentage";
    keys[9] = @"AverageBitRateIntraLayer";
    values[8] = v1;
    values[9] = v1;
    uint64_t v7 = (void *)*MEMORY[0x1E4F44898];
    keys[10] = *(void **)MEMORY[0x1E4F449F0];
    keys[11] = v7;
    values[10] = v1;
    values[11] = v1;
    uint64_t v8 = (void *)*MEMORY[0x1E4F448A0];
    keys[12] = *(void **)MEMORY[0x1E4F448F0];
    keys[13] = v8;
    values[12] = v1;
    values[13] = v1;
    __int16 v9 = (void *)*MEMORY[0x1E4F44B18];
    keys[14] = *(void **)MEMORY[0x1E4F44AA0];
    keys[15] = v9;
    values[14] = v1;
    values[15] = v1;
    uint64_t v10 = (void *)*MEMORY[0x1E4F44868];
    keys[16] = *(void **)MEMORY[0x1E4F44A60];
    keys[17] = v10;
    values[16] = v1;
    values[17] = v1;
    size_t v11 = (void *)*MEMORY[0x1E4F44BB0];
    keys[18] = *(void **)MEMORY[0x1E4F44B58];
    keys[19] = v11;
    values[18] = v1;
    values[19] = v1;
    uint64_t v12 = (void *)*MEMORY[0x1E4F44A98];
    keys[20] = @"NegotiationDetails";
    keys[21] = v12;
    values[20] = v1;
    values[21] = v1;
    keys[22] = @"UsingCellular";
    keys[23] = @"CommandLineParametersExtraOptions";
    values[22] = v1;
    values[23] = v1;
    uint64_t v13 = (void *)*MEMORY[0x1E4F448E0];
    keys[24] = *(void **)MEMORY[0x1E4F45640];
    keys[25] = v13;
    values[24] = v1;
    values[25] = v1;
    keys[26] = @"FaceRect";
    values[26] = v1;
    qword_1E9F820D0 = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 27, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!qword_1E9F820D0) {
      FigSignalErrorAt();
    }
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t sub_1BBAEA430()
{
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v35 = 0;
  int v34 = 0;
  if (!*(void *)(DerivedStorage + 16)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = DerivedStorage + 5184;
  if (!*(unsigned char *)(DerivedStorage + 5184))
  {
    if (*(unsigned char *)(DerivedStorage + 6296)) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = DerivedStorage + 24;
    }
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt64Type, (const void *)(DerivedStorage + 5160));
    if (*(unsigned char *)(v2 + 1112)) {
      goto LABEL_26;
    }
    uint64_t v7 = *(void *)(v1 + 16);
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(*(void *)(v7 + 5176) + 208120) + 88), 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v8 = *(void *)(*(void *)(v7 + 5176) + 205800);
    uint64_t v9 = *(void *)(v8 + 22824);
    if (v9 && (uint64_t v10 = *(unsigned int *)(v9 + 12), v10))
    {
      uint64_t v11 = v9 + 216;
      while (*(unsigned char *)(*(void *)v11 + 1399))
      {
        v11 += 8;
        if (!--v10) {
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      uint64_t v12 = *(void *)(v8 + 22816);
      if (!v12 || (uint64_t v13 = *(unsigned int *)(v12 + 12), !v13))
      {
LABEL_21:
        uint64_t v15 = *(void *)(v7 + 5168);
        int v16 = *(_DWORD *)(v15 + 40);
        uint64_t v17 = *(void *)(v15 + 232);
        if (v17) {
          v16 += *(unsigned __int8 *)(v17 + 9);
        }
        BOOL v18 = v16 != 0;
        goto LABEL_25;
      }
      uint64_t v14 = v12 + 216;
      while (*(unsigned char *)(*(void *)v14 + 1399))
      {
        v14 += 8;
        if (!--v13) {
          goto LABEL_21;
        }
      }
    }
    BOOL v18 = 1;
LABEL_25:
    *(unsigned char *)(v2 + 1129) = v18;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(v7 + 5176) + 208120) + 88));
LABEL_26:
    unsigned int v19 = *(_DWORD *)(v1 + 5048);
    BOOL v20 = v19 > 0x27;
    uint64_t v21 = (1 << v19) & 0xC000100002;
    if (v20 || v21 == 0)
    {
      if (*(unsigned char *)(v2 + 1129))
      {
        long long v23 = (unsigned char *)(v2 + 1129);
        while (1)
        {
          char v33 = 0;
          uint64_t v24 = *(void *)(v1 + 16);
          uint64_t v25 = *(void *)(v24 + 5184);
          int v26 = v25 ? *(char *)(v25 + 532) : 0;
          uint64_t v27 = *(char **)(v24 + 10576);
          size_t v28 = (unsigned int *)(v24 + 10584);
          uint64_t v29 = *(void *)(v24 + 10592);
          unsigned int v30 = (_DWORD *)(v24 + 10600);
          uint64_t v31 = sub_1BBB4A864(v24, v5, 0, *(unsigned int *)(v1 + 5004), (_DWORD *)(v24 + 10584), v27, (_DWORD *)(v24 + 10600), v29, &v35, &v34, v23, &v33);
          if (v31) {
            break;
          }
          uint64_t v32 = *(void *)(v1 + 16);
          *(_DWORD *)(*(void *)(v32 + 5176) + 112) = *(_DWORD *)(*(void *)(v32 + 5176) + 116) == 0;
          uint64_t v31 = sub_1BBAEA744(v1, *(void *)(*(void *)(v32 + 5176) + 8 * *(int *)(*(void *)(v32 + 5176) + 112) + 96), v6, v26, v27, v28, v29, v30);
          if (v31) {
            break;
          }
          if (!*v23) {
            goto LABEL_42;
          }
        }
        uint64_t v4 = v31;
        CFLog();
      }
      else
      {
LABEL_42:
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v4 = 0;
      *(unsigned char *)(v2 + 1129) = 0;
    }
    if (v6) {
      CFRelease(v6);
    }
    return v4;
  }

  return FigSignalErrorAt();
}

uint64_t sub_1BBAEA744(uint64_t a1, uint64_t a2, void *key, int a4, const void *a5, unsigned int *a6, uint64_t a7, _DWORD *a8)
{
  if (!*(unsigned char *)(a1 + 6296))
  {
    if (!a2 || !**(_DWORD **)(*(void *)(*(void *)(a1 + 16) + 5176) + 128)) {
      return 0;
    }
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 5200), key))
    {
LABEL_9:
      --*(void *)(a1 + 5152);
      VTEncoderSessionDequeueDecodeTimeStamp();
      VTEncoderSessionEmitEncodedFrame();
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5200), key);
      return 0;
    }
LABEL_11:
    uint64_t valuePtr = 0;
    CFNumberGetValue((CFNumberRef)key, kCFNumberSInt64Type, &valuePtr);
    CFLog();
    return 4294967246;
  }
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 5200), key)) {
    goto LABEL_11;
  }
  uint64_t v15 = *(_DWORD **)(*(void *)(*(void *)(a1 + 16) + 5176) + 128);
  if (*v15 || v15[2]) {
    goto LABEL_9;
  }
  if (a4 || !*a8)
  {
    uint64_t v16 = 4294958327;
    CFLog();
  }
  else
  {
    uint64_t v16 = sub_1BBAEA930(a1, a5, *a6, a7, key);
    if (v16) {
      CFLog();
    }
  }
  return v16;
}

uint64_t sub_1BBAEA930(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4, void *key)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 5184))
  {
    return FigSignalErrorAt();
  }
  CFTypeRef cf = 0;
  CMBlockBufferRef dataBuffer = 0;
  CFDataRef Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 5200), key);
  if (Value)
  {
    memset(&values, 0, sizeof(values));
    *(double *)&dataPointerOut = 0.0;
    if (a2)
    {
      uint64_t v12 = 0;
      size_t v13 = a3;
    }
    else
    {
      uint64_t v12 = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 5176)
                                                                         + 208120)
                                                             + 152));
      size_t v13 = CMBlockBufferGetDataLength(v12);
    }
    dataint Length = v13;
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v16 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v13, *(CFAllocatorRef *)(a1 + 5192), 0, 0, v13, 1u, &dataBuffer);
    if (v16)
    {
      uint64_t v14 = v16;
      CFLog();
      goto LABEL_17;
    }
    values.duration.epoch = *((void *)Value + 7);
    *(_OWORD *)&values.duration.value = *(_OWORD *)(Value + 40);
    CMTimeEpoch v17 = *((void *)Value + 4);
    *(_OWORD *)&values.presentationTimeStamp.value = *((_OWORD *)Value + 1);
    values.presentationTimeStamp.epoch = v17;
    VTEncoderSessionDequeueDecodeTimeStamp();
    uint64_t v18 = CMSampleBufferCreate(v15, dataBuffer, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 8), 1, 1, &values, 1, &dataLength, (CMSampleBufferRef *)&cf);
    if (v18)
    {
      uint64_t v14 = v18;
LABEL_16:
      CFLog();
      goto LABEL_17;
    }
    uint64_t DataPointer = CMBlockBufferGetDataPointer(dataBuffer, 0, 0, 0, &dataPointerOut);
    if (DataPointer)
    {
      uint64_t v14 = DataPointer;
      goto LABEL_16;
    }
    if (a2)
    {
      memcpy(dataPointerOut, a2, a3);
    }
    else
    {
      if (!v12)
      {
        uint64_t v14 = 4294958327;
        goto LABEL_16;
      }
      uint64_t v26 = CMBlockBufferCopyDataBytes(v12, 0, dataLength, dataPointerOut);
      if (v26)
      {
        uint64_t v14 = v26;
        goto LABEL_16;
      }
    }
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)cf, 1u);
    CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    long long v22 = ValueAtIndex;
    if (a4)
    {
      int v23 = *(unsigned __int8 *)(a4 + 3);
      int v71 = *(unsigned __int8 *)(a4 + 4);
      BOOL v72 = *(unsigned char *)(a4 + 5) == 0;
      int v24 = *(unsigned __int8 *)(a4 + 6);
      int v25 = *(unsigned __int8 *)(a4 + 2);
    }
    else
    {
      int v71 = 0;
      BOOL v72 = 0;
      int v24 = 0;
      int v25 = 0;
      int v23 = 0;
    }
    int v27 = *(_DWORD *)(a1 + 5048);
    size_t v28 = (const void **)MEMORY[0x1E4F1CFD0];
    uint64_t v29 = (const void **)MEMORY[0x1E4F1CFC8];
    switch(v27)
    {
      case 39:
LABEL_33:
        int v69 = v25;
        int v70 = v24;
        int v76 = -1;
        int valuePtr = 0;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        float v82 = 0.0;
        dataint Length = 0;
        *(double *)&dataPointerOut = -1.0;
        int v68 = v23;
        if (a4)
        {
          int v30 = *(_DWORD *)(a4 + 92);
          int v31 = *(unsigned __int8 *)(a4 + 7);
          int v32 = *(unsigned __int8 *)(a4 + 8);
          int v76 = *(char *)(a4 + 9);
          int valuePtr = v30;
          int v33 = *(unsigned __int8 *)(a4 + 10);
          int v34 = *(unsigned __int8 *)(a4 + 11);
          LODWORD(v75) = *(unsigned __int8 *)(a4 + 96);
          HIDWORD(v75) = v33;
          int v35 = *(_DWORD *)(a4 + 100);
          LODWORD(v74) = *(_DWORD *)(a4 + 104);
          HIDWORD(v74) = v35;
          int v67 = v74;
          float v37 = *(float *)(a4 + 64);
          float v36 = *(float *)(a4 + 68);
          dataint Length = __PAIR64__(LODWORD(v36), LODWORD(v37));
          float v38 = *(float *)(a4 + 72);
          float v82 = v38;
          *(double *)&dataPointerOut = *(float *)(a4 + 12);
        }
        else
        {
          int v67 = 0;
          int v35 = 0;
          int v31 = 0;
          int v32 = 0;
          int v34 = 0;
          float v38 = 0.0;
          float v36 = 0.0;
          float v37 = 0.0;
        }
        CFNumberRef v40 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v40)
        {
          CFNumberRef v41 = v40;
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F453A0], v40);
          CFRelease(v41);
        }
        if (v31) {
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F453B8], key);
        }
        if (v32) {
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F453B0], (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        CFNumberRef v42 = CFNumberCreate(0, kCFNumberDoubleType, &dataPointerOut);
        if (v42)
        {
          CFNumberRef v43 = v42;
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F45370], v42);
          CFRelease(v43);
        }
        size_t v28 = (const void **)MEMORY[0x1E4F1CFD0];
        if (v76 != -1 && SHIDWORD(v75) >= 1)
        {
          CFNumberRef v44 = CFNumberCreate(v15, kCFNumberSInt32Type, &v76);
          if (v44)
          {
            CFNumberRef v45 = v44;
            CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F45380], v44);
            CFRelease(v45);
          }
          int v46 = (const void **)MEMORY[0x1E4F1CFC8];
          if (v34 == 1) {
            int v46 = v28;
          }
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F45388], *v46);
          CFNumberRef v47 = CFNumberCreate(v15, kCFNumberSInt32Type, (char *)&v75 + 4);
          if (v47)
          {
            CFNumberRef v48 = v47;
            CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F45390], v47);
            CFRelease(v48);
          }
        }
        CFNumberRef v49 = CFNumberCreate(v15, kCFNumberSInt32Type, &v75);
        if (v49)
        {
          CFNumberRef v50 = v49;
          CFDictionarySetValue(v22, @"InLowFrameRateMode", v49);
          CFRelease(v50);
        }
        BOOL v73 = *(unsigned char *)(a1 + 48) == 0;
        CFNumberRef v51 = CFNumberCreate(0, kCFNumberSInt32Type, &v73);
        int v25 = v69;
        if (v51)
        {
          CFNumberRef v52 = v51;
          CFDictionarySetValue(v22, @"EncoderMode", v51);
          CFRelease(v52);
        }
        if (*(unsigned char *)(a1 + 742)) {
          CFDictionarySetValue(v22, @"RequireFrameQueueFlush", *v28);
        }
        if (*(unsigned char *)(a1 + 741)) {
          CFDictionarySetValue(v22, @"IsIdleEncodedEnough", *v28);
        }
        BOOL v53 = v35 < 1;
        uint64_t v29 = (const void **)MEMORY[0x1E4F1CFC8];
        if (v53 || v67 < 1) {
          goto LABEL_76;
        }
        CFNumberRef v54 = CFNumberCreate(v15, kCFNumberSInt32Type, (char *)&v74 + 4);
        CFNumberRef v55 = CFNumberCreate(v15, kCFNumberSInt32Type, &v74);
        CFNumberRef v56 = v55;
        if (v54 && v55)
        {
          CFDictionarySetValue(v22, @"VRAWidth", v54);
          CFDictionarySetValue(v22, @"VRAHeight", v56);
        }
        else if (!v54)
        {
          goto LABEL_74;
        }
        CFRelease(v54);
LABEL_74:
        if (v56) {
          CFRelease(v56);
        }
LABEL_76:
        if (v37 > 0.0 || v36 > 0.0 || v38 > 0.0)
        {
          CFNumberRef v57 = CFNumberCreate(0, kCFNumberFloat32Type, &dataLength);
          values.duration.value = (CMTimeValue)v57;
          CFNumberRef v58 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)&dataLength + 4);
          *(void *)&values.duration.timescale = v58;
          CFNumberRef v59 = CFNumberCreate(0, kCFNumberFloat32Type, &v82);
          values.duration.epoch = (CMTimeEpoch)v59;
          if (v57 && v58 && v59)
          {
            CFArrayRef v60 = CFArrayCreate(v15, (const void **)&values, 3, MEMORY[0x1E4F1D510]);
            if (v60)
            {
              CFArrayRef v61 = v60;
              CFDictionarySetValue(v22, @"PSNRArray", v60);
              CFRelease(v61);
            }
            CFRelease((CFTypeRef)values.duration.value);
            CFRelease(*(CFTypeRef *)&values.duration.timescale);
            CFRelease((CFTypeRef)values.duration.epoch);
          }
          uint64_t v29 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        int v24 = v70;
        int v23 = v68;
        break;
      case 20:
        if (a4) {
          goto LABEL_39;
        }
        break;
      case 1:
        goto LABEL_33;
      default:
        if (a4 && v27 == 38)
        {
LABEL_39:
          if (*(unsigned char *)(a4 + 7))
          {
            int v39 = v23;
            CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F453B8], key);
            int v23 = v39;
          }
        }
        break;
    }
    if (!v23)
    {
      unint64_t v62 = *v28;
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F1F200], *v28);
      if (v71) {
        CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F1F208], v62);
      }
    }
    if (v72) {
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F1F1F8], *v29);
    }
    int v63 = (const void *)*MEMORY[0x1E4F1F1A8];
    if (v25)
    {
      size_t v64 = *v29;
      CFDictionarySetValue(v22, v63, *v29);
      unint64_t v65 = *v28;
    }
    else
    {
      unint64_t v65 = *v28;
      CFDictionarySetValue(v22, v63, *v28);
      size_t v64 = *v29;
    }
    if (v24) {
      int v66 = v65;
    }
    else {
      int v66 = v64;
    }
    CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F1F1C0], v66);
    uint64_t v14 = 0;
    ++*(void *)(a1 + 5168);
    goto LABEL_17;
  }
  CFLog();
  uint64_t v14 = 4294967246;
LABEL_17:
  VTEncoderSessionEmitEncodedFrame();
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5200), key);
  if (dataBuffer) {
    CFRelease(dataBuffer);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t sub_1BBAEB208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v7 = v6;
  CFDictionaryRef v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  CFAllocatorRef v15 = v14;
  uint64_t v17 = v16;
  uint64_t v591 = *MEMORY[0x1E4F143B8];
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v19 = DerivedStorage + 5124;
  if (*(unsigned char *)(DerivedStorage + 5184))
  {
    return FigSignalErrorAt();
  }
  uint64_t v21 = DerivedStorage;
  uint64_t v381 = v13;
  long long v22 = (__int16 **)(DerivedStorage + 16);
  CFDictionaryRef theDict = v9;
  if (!*(void *)(DerivedStorage + 16))
  {
    int v375 = (__int16 **)(DerivedStorage + 16);
    CVPixelBufferRef pixelBuffer = v15;
    *(_OWORD *)uint64_t v408 = 0u;
    memset(v407, 0, sizeof(v407));
    long long v406 = 0u;
    long long v404 = 0u;
    memset(v405, 0, sizeof(v405));
    long long v402 = 0u;
    long long v403 = 0u;
    long long v400 = 0u;
    long long v401 = 0u;
    memset(v399, 0, sizeof(v399));
    long long v397 = 0u;
    long long v398 = 0u;
    long long v395 = 0u;
    long long v396 = 0u;
    long long v393 = 0u;
    long long v394 = 0u;
    uint64_t v379 = DerivedStorage + 5124;
    *(unsigned char *)(DerivedStorage + 6296) = 1;
    bzero((void *)(DerivedStorage + 24), 0x2D8uLL);
    *(void *)(v21 + 32) = 0x186A0000280A0;
    *(_DWORD *)(v21 + 52) = 1106247680;
    *(_DWORD *)(v21 + 152) = 0;
    *(_DWORD *)(v21 + 392) = 0;
    *(_DWORD *)(v21 + 176) = 1;
    *(_DWORD *)(v21 + 192) = 0;
    *(_OWORD *)(v21 + 336) = 0u;
    *(_DWORD *)(v21 + 352) = 0;
    *(_OWORD *)(v21 + 360) = 0u;
    *(_OWORD *)(v21 + 376) = 0u;
    *(_OWORD *)(v21 + 96) = 0u;
    *(_OWORD *)(v21 + 564) = 0u;
    *(void *)(v21 + 580) = 0xFFFFFFFF00000000;
    *(unsigned char *)(v21 + 743) = 1;
    *(_OWORD *)(v21 + 548) = 0u;
    *(_OWORD *)(v21 + 520) = 0u;
    *(_OWORD *)(v21 + 536) = 0u;
    *(_OWORD *)(v21 + 488) = 0u;
    *(_OWORD *)(v21 + 504) = 0u;
    *(_OWORD *)(v21 + 456) = 0u;
    *(_OWORD *)(v21 + 472) = 0u;
    *(_OWORD *)(v21 + 424) = 0u;
    *(_OWORD *)(v21 + 440) = 0u;
    *(_DWORD *)(v21 + 76) = 0;
    *(_OWORD *)(v21 + 60) = 0u;
    *(void *)(v21 + 592) = 0x3FF0000000000000;
    *(void *)(v21 + 616) = 0;
    uint64_t v366 = (int *)(v21 + 24);
    *(_OWORD *)(v21 + 600) = 0u;
    *(_OWORD *)(v21 + 700) = 0u;
    *(_OWORD *)(v21 + 716) = 0u;
    bzero(&v449, 0x1430uLL);
    char v555 = 1;
    LOWORD(v449.value) = 352;
    WORD2(v449.value) = 288;
    LOBYTE(v449.epoch) = 77;
    uint64_t v453 = 0x7FFFFFFF00000005;
    int v454 = 1;
    int v455 = 200000;
    unsigned int v471 = 0;
    int v474 = 0;
    float v457 = 30.0;
    int v459 = 1;
    char v475 = 1;
    uint64_t v476 = 0x3FC0000000000003;
    int v520 = 0;
    uint64_t v527 = -1;
    uint64_t v528 = -1;
    __int16 v481 = 257;
    char v482 = 1;
    uint64_t v486 = 0x200000010;
    char v487 = 6;
    char v489 = 0;
    char v484 = 1;
    char v488 = 0;
    uint64_t v495 = 0x80000000800000;
    uint64_t v496 = 0x47C3500047C35000;
    int v490 = 16843009;
    __int16 v491 = -255;
    int v492 = 0;
    char v493 = 0;
    __int16 v494 = -1;
    int v508 = 0;
    int v497 = 0;
    char v498 = 0;
    memset(v500, 0, 15);
    int v478 = 437918234;
    __int16 v509 = 0;
    __int16 v510 = -1;
    char v502 = sub_1BBAF9E6C();
    char v503 = 1;
    char v512 = 0;
    __int16 v505 = 0;
    __int16 v452 = 0;
    uint64_t v515 = 0;
    int v504 = 0;
    long long v513 = 0u;
    __int16 v516 = 1;
    int v506 = 0;
    char v507 = 0;
    char v532 = 0;
    v538[4116] = -1;
    __int16 v518 = 767;
    uint64_t v461 = 0;
    int v462 = 10;
    uint64_t v472 = 0;
    char v473 = 0;
    char v464 = 0;
    uint64_t v463 = 0;
    *(_OWORD *)uint64_t v511 = xmmword_1BBB6FC90;
    *(_OWORD *)&v511[16] = xmmword_1BBB6FCA0;
    *(void *)&v511[32] = 0x500000000;
    long long v517 = 0uLL;
    int v519 = 0;
    char v451 = 0;
    HIDWORD(v449.epoch) = 0;
    int v450 = 8269;
    BYTE2(v449.epoch) = 1;
    long long v466 = 0u;
    long long v467 = 0u;
    long long v468 = 0u;
    long long v469 = 0u;
    int v523 = 150;
    uint64_t v465 = 150995458;
    __int16 v524 = 258;
    char v525 = 8;
    char v533 = 0;
    char v501 = 0;
    uint64_t v521 = 0;
    uint64_t v526 = 0;
    int v529 = 0;
    char v530 = 0;
    __int16 v479 = 0;
    char v480 = 0;
    uint64_t v531 = 0x1007800000001;
    char v536 = 30;
    int v535 = 0x10000;
    __int16 v485 = 0;
    char v522 = 0;
    char v499 = 0;
    memset(&v538[2001], 0, 7);
    v538[4128] = 0;
    int v537 = -67108864;
    int v539 = 0;
    uint64_t v540 = 30;
    int v543 = 0;
    uint64_t v514 = 0;
    __int16 v541 = 0;
    long long v549 = 0u;
    int v550 = 3;
    int v551 = 0;
    BOOL v553 = 0;
    char v548 = 0;
    int v542 = 0x10000;
    int v544 = 0;
    long long v546 = 0u;
    uint64_t v547 = 0;
    uint64_t v545 = 0x200000001;
    v538[3815] = 0;
    uint64_t v552 = *(void *)(v21 + 6304);
    int v554 = *(_DWORD *)(v21 + 6236);
    __strlcpy_chk();
    unsigned int v25 = *(_DWORD *)(v21 + 5048);
    if (v25 > 0x27 || ((1 << v25) & 0xC0001001D2) == 0) {
      *(_DWORD *)(v21 + 5048) = 7;
    }
    bzero(&v393, 0x1430uLL);
    char v448 = 1;
    LOWORD(v393) = 352;
    WORD2(v393) = 288;
    LOBYTE(v394) = 77;
    *(void *)((char *)&v395 + 4) = 0x7FFFFFFF00000005;
    HIDWORD(v395) = 1;
    DWORD1(v396) = 200000;
    LODWORD(v400) = 0;
    *(_DWORD *)((char *)&v401 + 1) = 0;
    HIDWORD(v396) = 1106247680;
    HIDWORD(v397) = 1;
    BYTE5(v401) = 1;
    *((void *)&v401 + 1) = 0x3FC0000000000003;
    int v416 = 0;
    uint64_t v423 = -1;
    uint64_t v424 = -1;
    WORD6(v402) = 257;
    BYTE14(v402) = 1;
    *(void *)((char *)&v403 + 4) = 0x200000010;
    WORD2(v404) = 6;
    BYTE8(v404) = 0;
    BYTE1(v403) = 1;
    *(void *)((char *)&v405[1] + 12) = 0x80000000800000;
    *(void *)((char *)&v405[2] + 4) = 0x47C3500047C35000;
    *(_DWORD *)((char *)v405 + 6) = 16843009;
    *(_WORD *)((char *)v405 + 11) = -255;
    *(_DWORD *)((char *)v405 + 13) = 0;
    BYTE1(v405[1]) = 0;
    WORD3(v405[1]) = -1;
    DWORD1(v407[1]) = 0;
    HIDWORD(v405[2]) = 0;
    LOBYTE(v405[3]) = 0;
    *(void *)((char *)&v405[3] + 2) = 0;
    *(void *)((char *)&v405[3] + 9) = 0;
    DWORD1(v402) = 437918234;
    WORD4(v407[1]) = 0;
    LOWORD(v407[2]) = -1;
    BYTE8(v406) = sub_1BBAF9E6C();
    BYTE9(v406) = 1;
    BYTE12(v407[4]) = 0;
    WORD4(v407[0]) = 0;
    LOWORD(v395) = 0;
    uint64_t v410 = 0;
    *(_DWORD *)((char *)&v406 + 10) = 0;
    *(_OWORD *)&v408[8] = 0u;
    __int16 v411 = 1;
    *(_DWORD *)((char *)v407 + 14) = 0;
    BYTE2(v407[1]) = 0;
    char v428 = 0;
    v433[2115] = -1;
    __int16 v414 = 767;
    *((void *)&v398 + 1) = 0;
    LODWORD(v399[0]) = 10;
    *(void *)((char *)&v400 + 4) = 0;
    LOBYTE(v401) = 0;
    BYTE12(v399[0]) = 0;
    *(void *)((char *)v399 + 4) = 0;
    *(_OWORD *)((char *)&v407[2] + 4) = xmmword_1BBB6FC90;
    *(_OWORD *)((char *)&v407[3] + 4) = xmmword_1BBB6FCA0;
    *(void *)((char *)&v407[4] + 4) = 0x500000000;
    uint64_t v412 = 0;
    uint64_t v413 = 0;
    int v415 = 0;
    BYTE12(v394) = 0;
    *(void *)((char *)&v394 + 4) = 0x204D00000000;
    BYTE2(v394) = 1;
    memset((char *)&v399[1] + 8, 0, 64);
    int v419 = 150;
    *(void *)((char *)v399 + 13) = 150995458;
    __int16 v420 = 258;
    char v421 = 8;
    char v429 = 0;
    LOBYTE(v406) = 0;
    uint64_t v417 = 0x1000000;
    uint64_t v422 = 0;
    int v425 = 0;
    char v426 = 0;
    WORD4(v402) = 0;
    BYTE10(v402) = 0;
    uint64_t v427 = 0x1007800000001;
    char v431 = 30;
    int v430 = 0x10000;
    WORD1(v403) = 0;
    char v418 = 0;
    BYTE1(v405[3]) = 0;
    memset(v433, 0, 7);
    v433[2127] = 0;
    int v432 = -67108864;
    int v434 = 0;
    uint64_t v435 = 30;
    int v438 = 0;
    uint64_t v409 = 0;
    __int16 v436 = 0;
    long long v444 = 0u;
    int v445 = 3;
    int v446 = 0;
    char v447 = 0;
    char v443 = 0;
    int v437 = 0x10000;
    long long v441 = 0u;
    int v439 = 0;
    uint64_t v442 = 0;
    uint64_t v440 = 0x200000001;
    v433[1814] = 0;
    uint64_t v19 = v379;
    if (*(_DWORD *)(v21 + 5088))
    {
      LODWORD(v461) = *(_DWORD *)(v21 + 5088);
      *(_OWORD *)&v511[8] = *(_OWORD *)(v21 + 5104);
      *(_OWORD *)&v511[24] = *(_OWORD *)v379;
    }
    HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
    unsigned int v26 = *(_DWORD *)(v21 + 5048);
    long long v22 = v375;
    switch(v26)
    {
      case 0u:
        sub_1BBAEE678((_DWORD *)v21, v366, (uint64_t)&v449);
        if (*(_DWORD *)(v21 + 5052)) {
          sub_1BBAEE678((_DWORD *)v21, v366, (uint64_t)&v393);
        }
        goto LABEL_205;
      case 1u:
        int v74 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v74;
        int v75 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v75;
        WORD1(v449.value) = v75;
        LOBYTE(v524) = 0;
        char v534 = 0;
        int v76 = sub_1BBAEE78C((__int16)v74, (__int16)v75);
        if ((v75 * v74) <= 0x2B200 && *(_DWORD *)(v21 + 6232))
        {
          int v77 = 2;
          char v78 = 1;
        }
        else
        {
          char v78 = 0;
          int v77 = 3;
        }
        v538[4129] = v78;
        unint64_t v105 = "-20 800000  ";
        if (v76 == 10) {
          unint64_t v105 = "-20 1500000  ";
        }
        if (v76 == 5) {
          unint64_t v105 = "-20 1500000 ";
        }
        snprintf((char *)&v589, 0x1000uLL, " %d %d -74 -220 -101 i %s -258 -264 %d -100004 0 ", v74, v75, v105, v77);
        size_t v106 = strlen((const char *)&v589);
        sub_1BBAEE88C((uint64_t)&v589, v106, (uint64_t)&v449, v107, v108, v109);
        *(_DWORD *)(v21 + 24) = v455;
        *(float *)(v21 + 52) = v457;
        *(_DWORD *)(v21 + 28) = v456;
        double v110 = *(double *)(v21 + 752);
        if (v110 > 0.0)
        {
          float v111 = v110;
          float v457 = v111;
          *(float *)(v21 + 52) = v111;
        }
        int v112 = *(_DWORD *)(v21 + 760);
        CFAllocatorRef v15 = pixelBuffer;
        if (v112 >= 1)
        {
          int v455 = *(_DWORD *)(v21 + 760);
          *uint64_t v366 = v112;
        }
        int v113 = *(_DWORD *)(v21 + 764);
        if (v113 >= 1) {
          *(_DWORD *)(v21 + 28) = v113;
        }
        LODWORD(v517) = 1;
        *(void *)((char *)&v517 + 4) = 0x100000001;
        unint64_t v114 = *(int *)(v21 + 900);
        if (v114)
        {
          uint64_t v115 = 0;
          long long v588 = 0u;
          long long v587 = 0u;
          long long v586 = 0u;
          long long v585 = 0u;
          long long v584 = 0u;
          long long v583 = 0u;
          long long v582 = 0u;
          long long v581 = 0u;
          long long v580 = 0u;
          long long v579 = 0u;
          long long v578 = 0u;
          long long v577 = 0u;
          long long v576 = 0u;
          long long v575 = 0u;
          long long v574 = 0u;
          long long v573 = 0u;
          long long v572 = 0u;
          long long v571 = 0u;
          long long v570 = 0u;
          long long v569 = 0u;
          long long v568 = 0u;
          long long v567 = 0u;
          long long v566 = 0u;
          long long v565 = 0u;
          long long v564 = 0u;
          long long v563 = 0u;
          long long v562 = 0u;
          long long v561 = 0u;
          long long v560 = 0u;
          long long v559 = 0u;
          long long v558 = 0u;
          *(_OWORD *)number = 0u;
          CFNumberRef v116 = (const __CFNumber *)&v589;
          LODWORD(extraRowsOnBottom) = 0;
          do
          {
            number[v115++] = v116;
            CFNumberRef v116 = (const __CFNumber *)((char *)v116 + 300);
          }
          while (v115 != 64);
          sub_1BBAEE980(v21 + 904, v114, &extraRowsOnBottom, (uint64_t)number);
          sub_1BBB47BDC(extraRowsOnBottom, (uint64_t)number, (__int16 *)&v449);
        }
        if (strnlen(v538, 0x7D1uLL) <= 0x7D0) {
          __strlcpy_chk();
        }
        goto LABEL_205;
      case 2u:
        int v79 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v79;
        int v80 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v80;
        WORD1(v449.value) = v80;
        int v81 = sub_1BBAEE78C((__int16)v79, (__int16)v80);
        snprintf((char *)&v589, 0x1000uLL, " %d %d -68 -101 b %s", v79, v80, off_1E6248B20[v81 - 1]);
        size_t v82 = strlen((const char *)&v589);
        sub_1BBAEE88C((uint64_t)&v589, v82, (uint64_t)&v449, v83, v84, v85);
        if (*(_DWORD *)(v21 + 5068))
        {
          HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
          v500[2] = 0;
        }
        sub_1BBAEEAF4(v21, v366, (uint64_t)&v449);
        int v477 = 1;
        CFAllocatorRef v15 = pixelBuffer;
        if (HIDWORD(v495) == 1)
        {
          int v460 = 1;
          uint64_t v86 = 0x3FC0000000000001;
        }
        else
        {
          if (HIDWORD(v495) <= 5)
          {
            int v460 = (int)(float)((float)((float)HIDWORD(v495) * 0.5) + 1.0);
            LODWORD(v476) = v460;
            goto LABEL_204;
          }
          if (HIDWORD(v495) > 0x1F)
          {
            int v460 = 31;
            uint64_t v151 = 31;
          }
          else
          {
            int v460 = HIDWORD(v495);
            uint64_t v151 = 5;
          }
          uint64_t v86 = v151 & 0xFFFFFFFFFFFFLL | 0x3FA0000000000000;
        }
        uint64_t v476 = v86;
        goto LABEL_205;
      case 3u:
      case 5u:
        goto LABEL_210;
      case 4u:
        int v87 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v87;
        int v88 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v88;
        WORD1(v449.value) = v88;
        snprintf((char *)&v589, 0x1000uLL, " %d %d -68 -101 c -23 0 %s", v87, v88, "-20 0  ");
        size_t v89 = strlen((const char *)&v589);
        sub_1BBAEE88C((uint64_t)&v589, v89, (uint64_t)&v449, v90, v91, v92);
        *(_DWORD *)(v21 + 5208) = 516;
        BYTE2(v474) = 0;
        __int16 v518 = 516;
        int v478 = 16843009 * sub_1BBB474A0(516, 12);
        if (*(_DWORD *)(v21 + 5068))
        {
          HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
          v500[2] = 0;
        }
        goto LABEL_205;
      case 6u:
        int v93 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v93;
        int v94 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v94;
        WORD1(v449.value) = v94;
        uint64_t v95 = sub_1BBAEE78C((__int16)v93, (__int16)v94);
        if (v94 * v93 < 76801)
        {
          snprintf((char *)&v589, 0x1000uLL, " %d %d -116");
LABEL_182:
          size_t v147 = strlen((const char *)&v589);
          sub_1BBAEE88C((uint64_t)&v589, v147, (uint64_t)&v449, v148, v149, v150);
          goto LABEL_186;
        }
        if ((v94 * v93) <= 0x4B000)
        {
          snprintf((char *)&v589, 0x1000uLL, " %d %d -129");
          goto LABEL_182;
        }
        sub_1BBAEEB90(*(unsigned int *)(v21 + 5140), *(unsigned int *)(v21 + 5144), (uint64_t)&v449, v95, v96, v97);
LABEL_186:
        HIDWORD(v463) = 7;
        BYTE1(v474) = 0;
        LODWORD(v463) = v471 >> 13;
        HIDWORD(v461) = ((int)(v470 * (double)v471 + 0.5) >> (v462 + 4)) & ~((int)(v470 * (double)v471 + 0.5) >> (v462 + 4) >> 31);
        int v152 = *(_DWORD *)(v21 + 5084);
        CFAllocatorRef v15 = pixelBuffer;
        if (v152)
        {
          HIDWORD(v453) = *(_DWORD *)(v21 + 5084);
          int v460 = v152;
        }
        if (*(_DWORD *)(v21 + 5068))
        {
          HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
          v500[2] = 0;
        }
LABEL_190:
        LOBYTE(v103) = v481;
LABEL_191:
        HIBYTE(v481) = v103;
        sub_1BBAEEAF4(v21, v366, (uint64_t)&v449);
        int v153 = HIDWORD(v495);
        if (HIDWORD(v495) == 1)
        {
          int v154 = 1;
        }
        else
        {
          int v154 = v495;
          if (v495 == 1)
          {
            int v153 = 1;
          }
          else if (HIDWORD(v495) == 0x800000)
          {
            int v154 = 30;
            int v153 = 31;
          }
          else
          {
            if (v495 < HIDWORD(v495) && v495 > 1) {
              int v153 = v495;
            }
            int v154 = 30;
          }
        }
        int v460 = v153;
        LODWORD(v476) = v154;
LABEL_204:
        HIDWORD(v476) = 1069547520;
LABEL_205:
        *(unsigned char *)(v379 + 1172) = BYTE2(v542);
        *(void *)(v21 + 5040) = 0;
        BYTE6(v540) = 1;
        BYTE2(v449.epoch) = 1;
        if (!*(void *)(v21 + 5032)) {
          goto LABEL_530;
        }
        uint64_t v156 = 0;
        unsigned int v157 = (CFTypeRef *)MEMORY[0x1E4F45190];
        unsigned int v158 = &qword_1E62488D0;
        while (!CFEqual(*(CFTypeRef *)(v21 + 5032), *v157))
        {
          ++v156;
          unsigned int v159 = (CFTypeRef *)*v158;
          v158 += 2;
          unsigned int v157 = v159;
          if (v156 == 33) {
            goto LABEL_209;
          }
        }
        unint64_t v160 = (char *)&unk_1E62488C0 + 16 * v156;
        int v162 = *((_DWORD *)v160 + 2);
        int v161 = *((_DWORD *)v160 + 3);
        if (v162 <= 76)
        {
          if (!v162)
          {
LABEL_209:
            CFStringGetCStringPtr(*(CFStringRef *)(v21 + 5032), 0x8000100u);
LABEL_210:
            CFLog();
            uint64_t v50 = 4294967246;
            goto LABEL_532;
          }
          if (v162 == 66)
          {
            LOBYTE(v449.epoch) = 66;
            LOWORD(v529) = 0;
            char v483 = 0;
          }
        }
        else if (v162 == 77 || v162 == 100)
        {
          LOBYTE(v449.epoch) = v162;
        }
        else if (v162 == 101)
        {
          LOBYTE(v449.epoch) = 101;
          LOBYTE(v506) = 0;
        }
        if (((0x380200C00uLL >> v156) & 1) == 0)
        {
          uint64_t v163 = 0;
          *(_WORD *)((char *)&v449.epoch + 1) = v161;
          do
          {
            if (byte_1BBB8D62C[v163] == v161) {
              break;
            }
            ++v163;
          }
          while (v163 != 17);
          if (v471) {
            unsigned int v164 = v471;
          }
          else {
            unsigned int v164 = v455;
          }
          if ((v449.epoch & 0xFE) == 0x64) {
            int v165 = 5000;
          }
          else {
            int v165 = 4000;
          }
          if (v164 > (v165 * dword_1BBB8D5E8[v163]) >> 2) {
            goto LABEL_210;
          }
          double v166 = v470 * (double)v164;
          uint64_t v167 = v163;
          if (1000 * dword_1BBB8D5A4[v163] < v166) {
            goto LABEL_210;
          }
          unsigned int v168 = ((-SLOWORD(v449.value) & 0xF) + SLOWORD(v449.value))
               * ((-SWORD2(v449.value) & 0xF) + SWORD2(v449.value))
               / 256;
          if (v168 > word_1BBB8D360[v167]) {
            goto LABEL_210;
          }
          float v169 = v458;
          float v170 = v457;
          if (v457 == 0.0) {
            float v170 = 30.0;
          }
          if (v458 <= 0.0) {
            float v169 = v170;
          }
          if (dword_1BBB8D31C[v167] < ((float)(v169 * (float)v168) + 0.5)) {
            goto LABEL_210;
          }
          unsigned int v347 = dword_1BBB8D384[v167];
          if (v168 * v482 > v347)
          {
            unsigned int v348 = v347 / v168 - 1;
            if (v348 >= HIBYTE(v521)) {
              unsigned int v348 = HIBYTE(v521);
            }
            HIBYTE(v521) = v348;
            if ((int)(v348 + 1) < v482) {
              char v349 = v348 + 1;
            }
            else {
              char v349 = v482;
            }
            char v482 = v349;
          }
        }
LABEL_530:
        uint64_t v350 = *(unsigned int *)(v21 + 5084);
        MachThreadPriorityCFDataRef Value = FigThreadGetMachThreadPriorityValue();
        __int16 v352 = sub_1BBB3BEBC(v350, &v449, v22, MachThreadPriorityValue);
        if (v352)
        {
          __int16 v353 = v352;
          CFLog();
          uint64_t v50 = v353;
        }
        else
        {
          *(_DWORD *)(v21 + 5040) = LOBYTE(v449.epoch);
          *(_DWORD *)(v21 + 5044) = BYTE1(v449.epoch);
          uint64_t v357 = *(void *)(v21 + 16);
          uint64_t v358 = *(void *)(v357 + 5176);
          if (*(unsigned char *)(v379 + 1172) || *(void *)(v358 + 208120) && !*(void *)(v357 + 5184))
          {
            *(void *)(v358 + 160) = sub_1BBAF1280;
            *(void *)(*(void *)(v357 + 5176) + 168) = v21;
            CFLog();
            break;
          }
          CFLog();
          CFLog();
          uint64_t v50 = 4294966630;
        }
LABEL_532:
        CFLog();
        CFNumberRef v31 = 0;
        BOOL v49 = 0;
        char v48 = 0;
        int v33 = 0;
        value = 0;
        goto LABEL_533;
      case 7u:
        LOWORD(v449.value) = *(_DWORD *)(v21 + 5140);
        WORD2(v449.value) = *(_DWORD *)(v21 + 5144);
        WORD1(v449.value) = WORD2(v449.value);
        snprintf((char *)&v589, 0x1000uLL, " %d %d -221");
        goto LABEL_91;
      case 8u:
        LOWORD(v449.value) = *(_DWORD *)(v21 + 5140);
        WORD2(v449.value) = *(_DWORD *)(v21 + 5144);
        WORD1(v449.value) = WORD2(v449.value);
        snprintf((char *)&v589, 0x1000uLL, " %d %d -141");
LABEL_91:
        size_t v98 = strlen((const char *)&v589);
        sub_1BBAEE88C((uint64_t)&v589, v98, (uint64_t)&v449, v99, v100, v101);
        HIDWORD(v463) = 7;
        BYTE1(v474) = 0;
        LODWORD(v463) = v471 >> 13;
        HIDWORD(v461) = ((int)(v470 * (double)v471 + 0.5) >> (v462 + 4)) & ~((int)(v470 * (double)v471 + 0.5) >> (v462 + 4) >> 31);
        int v102 = *(_DWORD *)(v21 + 5084);
        if (v102)
        {
          HIDWORD(v453) = *(_DWORD *)(v21 + 5084);
          int v460 = v102;
        }
        if (*(_DWORD *)(v21 + 5068))
        {
          HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
          v500[2] = 0;
        }
        int v103 = *(_DWORD *)(v21 + 5060);
        if (v103) {
          goto LABEL_190;
        }
        LOBYTE(v481) = 0;
        goto LABEL_191;
      default:
        long long v22 = v375;
        if (v26 > 0x27 || ((1 << v26) & 0xC000100000) == 0) {
          goto LABEL_210;
        }
        int v27 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v27;
        int v28 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v28;
        WORD1(v449.value) = v28;
        LOBYTE(v524) = 0;
        char v534 = 0;
        char v522 = 1;
        double v29 = *(double *)(v21 + 752);
        if (v29 > 0.0 && !v556)
        {
          float v30 = v29;
          float v457 = v30;
          *(float *)(v21 + 52) = v30;
          char v556 = 1;
        }
        switch(v26)
        {
          case 0x27u:
            snprintf((char *)&v589, 0x1000uLL, " %d %d -74 -220 -101 i %s -258 -264 %d -64 %d -200 0 -201 0 ", v27, v28, "-20 4000000 -100004 3 ", 3, 1);
            break;
          case 0x26u:
            snprintf((char *)&v589, 0x1000uLL, " %d %d -74 -220 -101 i %s -258 -264 %d -64 %d -200 0 -201 0 ", v27, v28, "-20 10000000 -100004 1 ", 3, 0);
            break;
          case 0x14u:
            snprintf((char *)&v589, 0x1000uLL, " %d %d -74 -220 -101 i %s -258 -264 %d -64 %d -200 0 -201 0 ", v27, v28, "-20 10000000 -100004 2 ", 3, 1);
            break;
          default:
            CFLog();
            CFLog();
            goto LABEL_210;
        }
        size_t v117 = strlen((const char *)&v589);
        sub_1BBAEE88C((uint64_t)&v589, v117, (uint64_t)&v449, v118, v119, v120);
        uint64_t v121 = 0;
        *(_DWORD *)(v21 + 24) = v455;
        *(float *)(v21 + 52) = v457;
        *(_DWORD *)(v21 + 28) = v456;
        int v122 = 0x7FFFFFFF;
        do
        {
          double v123 = *(double *)(v21 + v121 + 768);
          if (v123 != 0.0)
          {
            double v124 = *(double *)(v21 + v121 + 832);
            if (v124 != 0.0 && v122 >= (int)(v123 * 8.0 / v124)) {
              int v122 = (int)(v123 * 8.0 / v124);
            }
          }
          v121 += 8;
        }
        while (v121 != 64);
        if (*(int *)(v21 + 760) <= 0) {
          int v125 = 0x7FFFFFFF;
        }
        else {
          int v125 = *(_DWORD *)(v21 + 760);
        }
        if (v125 != 0x7FFFFFFF || v122 != 0x7FFFFFFF)
        {
          if (v125 >= v122) {
            uint64_t v126 = v122;
          }
          else {
            uint64_t v126 = v125;
          }
          if (*(_DWORD *)(v21 + 5048) == 38) {
            LODWORD(v126) = sub_1BBAEEA4C(v126, *(_DWORD *)(v21 + 5040), *(_DWORD *)(v21 + 5140), *(_DWORD *)(v21 + 5144), *(double *)(v21 + 752));
          }
          int v455 = v126;
          *uint64_t v366 = v126;
        }
        *(unsigned char *)(v21 + 896) = 0;
        LODWORD(v517) = 1;
        *(void *)((char *)&v517 + 4) = 0x100000001;
        unint64_t v127 = *(int *)(v21 + 900);
        if (v127)
        {
          uint64_t v128 = 0;
          long long v588 = 0u;
          long long v587 = 0u;
          long long v586 = 0u;
          long long v585 = 0u;
          long long v584 = 0u;
          long long v583 = 0u;
          long long v582 = 0u;
          long long v581 = 0u;
          long long v580 = 0u;
          long long v579 = 0u;
          long long v578 = 0u;
          long long v577 = 0u;
          long long v576 = 0u;
          long long v575 = 0u;
          long long v574 = 0u;
          long long v573 = 0u;
          long long v572 = 0u;
          long long v571 = 0u;
          long long v570 = 0u;
          long long v569 = 0u;
          long long v568 = 0u;
          long long v567 = 0u;
          long long v566 = 0u;
          long long v565 = 0u;
          long long v564 = 0u;
          long long v563 = 0u;
          long long v562 = 0u;
          long long v561 = 0u;
          long long v560 = 0u;
          long long v559 = 0u;
          long long v558 = 0u;
          *(_OWORD *)number = 0u;
          CFNumberRef v129 = (const __CFNumber *)&v589;
          LODWORD(extraRowsOnBottom) = 0;
          do
          {
            number[v128++] = v129;
            CFNumberRef v129 = (const __CFNumber *)((char *)v129 + 300);
          }
          while (v128 != 64);
          sub_1BBAEE980(v21 + 904, v127, &extraRowsOnBottom, (uint64_t)number);
          sub_1BBB47BDC(extraRowsOnBottom, (uint64_t)number, (__int16 *)&v449);
        }
        if (strnlen(v538, 0x7D1uLL) <= 0x7D0) {
          __strlcpy_chk();
        }
        int v130 = *(_DWORD *)(v21 + 5048);
        if (v130 == 38 || v130 == 20) {
          int v550 = *(_DWORD *)(v21 + 5120);
        }
        BOOL v553 = *(unsigned char *)(v379 + 1188) != 0;
        if (*(int *)(v21 + 6300) >= 7)
        {
          unint64_t v131 = (id *)(v21 + 6288);
          if (!sub_1BBA12890((void *)(v21 + 6288)))
          {
            unint64_t v132 = dispatch_semaphore_create(0);
            *(void *)(v21 + 6280) = v132;
            dispatch_semaphore_signal(v132);
            if (!*(void *)(v21 + 6280))
            {
              if (*v131)
              {
                [*v131 invalidate];
                CFRelease(*v131);
              }
            }
          }
        }
        goto LABEL_205;
    }
  }
  if (*(_DWORD *)(v21 + 5048) == 20 && *(void *)(v21 + 6288))
  {
    if (*(int *)(v21 + 24) > 5000000)
    {
      *(_DWORD *)(v21 + 6276) = 0;
    }
    else
    {
      uint64_t v23 = *(void *)(v21 + 5152);
      if (v23 >= 1 && (v23 & 0x7F) == 0 && !dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v21 + 6280), 0))
      {
        int v24 = *(void **)(v21 + 6288);
        *(void *)&v589.origin.CGFloat x = MEMORY[0x1E4F143A8];
        *(void *)&v589.origin.float y = 0x40000000;
        *(void *)&v589.size.width = sub_1BBAEEC58;
        *(void *)&v589.size.height = &unk_1E6248AE0;
        uint64_t v590 = v21;
        sub_1BBA12900(v24, (uint64_t)v15, 1u, 0, &v589);
      }
    }
  }
  CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt64Type, (const void *)(v21 + 5160));
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(0, 72);
  int v33 = Mutable;
  if (Mutable)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    if (MutableBytePtr)
    {
      *(void *)MutableBytePtr = v17;
      *((void *)MutableBytePtr + 1) = v15;
      CGPoint v35 = *(CGPoint *)v381;
      *((void *)MutableBytePtr + 4) = *(void *)(v381 + 16);
      *((CGPoint *)MutableBytePtr + 1) = v35;
      long long v36 = *(_OWORD *)v11;
      *((void *)MutableBytePtr + 7) = v11[2];
      *(_OWORD *)(MutableBytePtr + 40) = v36;
      int v37 = *v7;
      *((_DWORD *)MutableBytePtr + 16) = *v7;
      if (!*(unsigned char *)(v19 + 1172)) {
        *((_DWORD *)MutableBytePtr + 16) = v37 | 1;
      }
      CFTypeRef cf = v33;
      v589.origin = *(CGPoint *)v381;
      v589.size.width = *(CGFloat *)(v381 + 16);
      value = (__CVBuffer **)MutableBytePtr;
      VTEncoderSessionEnqueuePresentationTimeStamp();
      float v38 = value;
      int v39 = value[1];
      BOOL v373 = v39 != 0;
      if (v39)
      {
        CVPixelBufferLockBaseAddress(v39, 1uLL);
        float v38 = value;
      }
      CFNumberRef v372 = v31;
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v21 + 5200), v31, v38);
      CMTimeValue v40 = *(void *)v381;
      CMTimeScale v41 = *(_DWORD *)(v381 + 8);
      *(void *)&long long v393 = *(void *)(v381 + 12);
      DWORD2(v393) = *(_DWORD *)(v381 + 20);
      CMTimeValue v42 = *v11;
      CMTimeValue v43 = v11[1];
      CMTimeEpoch v44 = v11[2];
      __int16 v387 = 0;
      uint64_t v45 = *(void *)(v21 + 16);
      *(_DWORD *)(*(void *)(v45 + 5176) + 112) = *(_DWORD *)(*(void *)(v45 + 5176) + 116) == 0;
      uint64_t v46 = *(void *)(*(void *)(v45 + 5176) + 8 * *(int *)(*(void *)(v45 + 5176) + 112) + 96);
      int v386 = 0;
      uint64_t v382 = *(void **)(v21 + 16);
      uint64_t v47 = v382[648];
      if (v47) {
        int v367 = *(char *)(v47 + 532);
      }
      else {
        int v367 = 0;
      }
      unint64_t v369 = (char *)v382[1322];
      uint64_t v370 = v382[1324];
      if (*(_DWORD *)(v21 + 5048) == 20 && *(unsigned __int8 *)(v21 + 6300) >= 7u)
      {
        int v51 = *(_DWORD *)(v21 + 6276);
        if ((unsigned __int16)v51 <= 2u) {
          *(_WORD *)(v382[647] + 5426) = v51;
        }
      }
      *(void *)(v46 + 224) = 0;
      *(_OWORD *)(v46 + 192) = 0u;
      *(_OWORD *)(v46 + 208) = 0u;
      *(_OWORD *)(v46 + 160) = 0u;
      *(_OWORD *)(v46 + 176) = 0u;
      *(_OWORD *)(v46 + 128) = 0u;
      *(_OWORD *)(v46 + 144) = 0u;
      *(_OWORD *)(v46 + 96) = 0u;
      *(_OWORD *)(v46 + 112) = 0u;
      *(_OWORD *)(v46 + 64) = 0u;
      *(_OWORD *)(v46 + 80) = 0u;
      *(_OWORD *)(v46 + 32) = 0u;
      *(_OWORD *)(v46 + 48) = 0u;
      *(_OWORD *)uint64_t v46 = 0u;
      *(_OWORD *)(v46 + 16) = 0u;
      v449.value = v40;
      *(void *)&v449.flags = v393;
      v449.timescale = v41;
      HIDWORD(v449.epoch) = DWORD2(v393);
      CMTimeConvertScale((CMTime *)&v589, &v449, 10000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      CGFloat x = v589.origin.x;
      int y_low = LODWORD(v589.origin.y);
      v449.value = v42;
      *(void *)&v449.timescale = v43;
      v449.epoch = v44;
      CMTimeConvertScale((CMTime *)&v589, &v449, 10000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      CGFloat v52 = v589.origin.x;
      if ((BYTE4(v589.origin.y) & 0x1D) == 1 && *(void *)&v589.origin.x) {
        *(float *)(v21 + 52) = (float)(SLODWORD(v589.origin.y) / *(uint64_t *)&v589.origin.x);
      }
      BOOL v53 = (_DWORD *)(v21 + 24);
      *(void *)(v21 + 744) = theDict;
      if (!v15) {
        goto LABEL_493;
      }
      uint64_t v380 = v19;
      v589.origin.CGFloat x = 0.0;
      v449.value = 0;
      number[0] = 0;
      size_t extraRowsOnBottom = 0;
      CGFloat v54 = x;
      if (*(void *)(v21 + 5152)) {
        CGFloat v54 = *(double *)(v21 + 5216);
      }
      *(CGFloat *)(v21 + 5216) = v54;
      CVPixelBufferGetExtendedPixels(v15, (size_t *)&v589, (size_t *)&v449, (size_t *)number, &extraRowsOnBottom);
      BaseAddress = CVPixelBufferGetBaseAddress(v15);
      int64_t BytesPerRow = CVPixelBufferGetBytesPerRow(v15);
      size_t Width = CVPixelBufferGetWidth(v15);
      CFNumberRef v58 = v15;
      uint64_t v59 = Width;
      pixelBuffera = v58;
      int64_t Height = CVPixelBufferGetHeight(v58);
      if (v59 > 0x7FFFFFFF || Height > 0x7FFFFFFF || BytesPerRow > 0x7FFFFFFF)
      {
        uint64_t v50 = 4294958327;
        CFLog();
        CFLog();
        uint64_t v19 = v380;
LABEL_510:
        CFNumberRef v31 = v372;
        int v33 = cf;
LABEL_511:
        CFLog();
        char v48 = 1;
        BOOL v49 = v373;
        goto LABEL_534;
      }
      int v376 = v22;
      *(void *)uint64_t v46 = BaseAddress;
      int v61 = (Height + 15) & 0xFFFFFFF0;
      *(_DWORD *)(v46 + 32) = v61;
      *(_DWORD *)(v46 + 36) = v61;
      *(_DWORD *)(v46 + 24) = (v59 + 15) & 0xFFFFFFF0;
      *(_DWORD *)(v46 + 28) = v59;
      *(_DWORD *)(v46 + 40) = Height;
      *(_DWORD *)(v46 + 44) = 0;
      *(_DWORD *)(v46 + 48) = v59;
      *(_DWORD *)(v46 + 52) = 0;
      *(_DWORD *)(v46 + 56) = Height;
      *(_DWORD *)(v46 + 16) = BytesPerRow;
      *(_DWORD *)(v46 + 20) = CVPixelBufferGetPixelFormatType(pixelBuffera);
      *(unsigned char *)(v46 + 156) = 0;
      *(_DWORD *)(v46 + 60) = 0;
      *(_DWORD *)(v46 + 84) = LODWORD(v52);
      *(_DWORD *)(v46 + 88) = LODWORD(x) - LODWORD(v54);
      *(_DWORD *)(v46 + 100) = 10000;
      *(_DWORD *)(v46 + 104) = *(void *)(v21 + 5152);
      *(void *)(v46 + 112) = *(void *)(v21 + 5160);
      *(void *)(v46 + 176) = pixelBuffera;
      if (CVPixelBufferIsPlanar(pixelBuffera))
      {
        Planeint Count = CVPixelBufferGetPlaneCount(pixelBuffera);
        uint64_t v63 = PlaneCount >= 2 ? 2 : PlaneCount;
        if (v63)
        {
          size_t v64 = 0;
          unint64_t v65 = (_DWORD *)(v46 + 200);
          do
          {
            *((void *)v65 - 2) = CVPixelBufferGetBaseAddressOfPlane(pixelBuffera, v64);
            *(v65 - 2) = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffera, v64);
            *(v65 - 1) = CVPixelBufferGetWidthOfPlane(pixelBuffera, v64);
            *unint64_t v65 = CVPixelBufferGetHeightOfPlane(pixelBuffera, v64);
            v65 += 6;
            ++v64;
          }
          while (v63 != v64);
        }
      }
      if (*(_DWORD *)(v46 + 20) == 32)
      {
        int v66 = *(_DWORD *)(v46 + 24);
        int v67 = *(_DWORD *)(v46 + 32);
        if (!*(void *)(v21 + 5008))
        {
          sub_1BBB169D0((void ***)(v21 + 5008));
          sub_1BBB16C64(*(__int16 *)(v21 + 5176), *(void *)(*(void *)(v21 + 5008) + 104), *(void *)(*(void *)(v21 + 5008) + 112));
        }
        int v68 = *(void **)(v21 + 5024);
        int v69 = 2 * v66;
        if (!v68)
        {
          int v68 = malloc_type_malloc(v69 * v67, 0x35CA8629uLL);
          *(void *)(v21 + 5024) = v68;
        }
        int v70 = v67 * v66 + 3;
        if (v67 * v66 >= 0) {
          int v70 = v67 * v66;
        }
        sub_1BBB16674(BaseAddress, (uint64_t)v68, (uint64_t)v68 + v67 * v66, (uint64_t)v68 + ((uint64_t)v70 >> 2) + v67 * v66, v66, v67, v66, v67, *(_DWORD *)(v46 + 16), *(void **)(v21 + 5008));
        int v71 = *(char **)(v21 + 5016);
        if (!v71)
        {
          int v71 = (char *)malloc_type_malloc(v67 * v69, 0x59CE2A44uLL);
          *(void *)(v21 + 5016) = v71;
        }
        sub_1BBB15968(*(char **)(v21 + 5024), v66, v67, v71, (2 * v66));
        *(void *)uint64_t v46 = *(void *)(v21 + 5016);
        *(_DWORD *)(v46 + 16) = v69;
        *(_DWORD *)(v46 + 20) = 846624121;
        long long v22 = v376;
      }
      if (!*(void *)(v21 + 5152))
      {
        *(CGFloat *)(v21 + 96) = x;
        *(void *)(v21 + 104) = 0;
      }
      if (theDict)
      {
        BOOL v72 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44ED8]);
        if (v72) {
          BOOL v73 = CFEqual(v72, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
        }
        else {
          BOOL v73 = 0;
        }
        if (*(_DWORD *)(v21 + 5056)) {
          int v104 = v73;
        }
        else {
          int v104 = 1;
        }
      }
      else
      {
        int v104 = 0;
      }
      *(_DWORD *)(v46 + 64) = 0;
      unsigned int v133 = (unsigned __int8 *)*((void *)*v22 + 647);
      if (v133)
      {
        v133 += 207941;
        int v134 = *v133;
        LODWORD(v133) = v133[1];
      }
      else
      {
        int v134 = 0;
      }
      *(_DWORD *)(v21 + 112) = 0;
      *(_DWORD *)(v21 + 132) = 0;
      *(_DWORD *)(v21 + 152) = 0;
      *(_WORD *)(v21 + 172) = 0;
      if (*(unsigned char *)(v380 + 1172))
      {
        if (v134) {
          BOOL v135 = v104 == 0;
        }
        else {
          BOOL v135 = 0;
        }
        char v137 = v135 && v133 != 0;
      }
      else
      {
        char v137 = 0;
      }
      *(unsigned char *)(v21 + 92) = v137;
      *(_DWORD *)(v21 + 192) = 0;
      *(_DWORD *)(v21 + 328) = 0;
      *(void *)(v21 + 336) = 0;
      *(void *)(v21 + 344) = 0;
      *(_DWORD *)(v21 + 352) = 0;
      *(void *)(v21 + 360) = 0;
      *(void *)(v21 + 368) = 0;
      *(void *)(v21 + 400) = -1;
      *(_DWORD *)(v21 + 408) = -1;
      *(_DWORD *)(v21 + 640) = *(_DWORD *)(v21 + 6228);
      *(_DWORD *)(v21 + 624) = 0;
      *(_WORD *)(v21 + 741) = 0;
      *(unsigned char *)(v21 + 732) = 0;
      *(void *)(v21 + 184) = 0;
      *(unsigned char *)(v21 + 743) = *(unsigned char *)(v380 + 1148);
      unsigned int v138 = *(_DWORD *)(v21 + 5048);
      if (v138 > 0x27
        || ((1 << v138) & 0xC000100002) == 0
        || (*(void *)(v21 + 744) = theDict, *(_WORD *)(v21 + 172) = 2, !theDict))
      {
        int v145 = v104;
        unsigned __int8 v146 = pixelBuffera;
        uint64_t v19 = v380;
        goto LABEL_351;
      }
      LODWORD(number[0]) = 2;
      CFDataRef v139 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EC8]);
      if (v139)
      {
        CFDataRef v140 = v139;
        CFTypeID TypeID = CFDataGetTypeID();
        if (TypeID == CFGetTypeID(v140))
        {
          BytePtr = CFDataGetBytePtr(v140);
          unint64_t Length = CFDataGetLength(v140);
          if (Length >> 1 >= 8) {
            uint64_t v144 = 8;
          }
          else {
            uint64_t v144 = Length >> 1;
          }
          memcpy((void *)(v21 + 116), BytePtr, 2 * v144);
          *(_DWORD *)(v21 + 112) = v144;
          if (v134) {
            *(unsigned char *)(v21 + 92) = 1;
          }
          else {
            int v104 = 1;
          }
        }
      }
      CFDataRef v171 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44ED0]);
      if (v171)
      {
        CFDataRef v172 = v171;
        CFTypeID v173 = CFDataGetTypeID();
        if (v173 == CFGetTypeID(v172))
        {
          uint64_t v174 = CFDataGetBytePtr(v172);
          unint64_t v175 = CFDataGetLength(v172);
          if (v175 >> 1 >= 8) {
            uint64_t v176 = 8;
          }
          else {
            uint64_t v176 = v175 >> 1;
          }
          memcpy((void *)(v21 + 136), v174, 2 * v176);
          *(_DWORD *)(v21 + 132) = v176;
        }
      }
      CFDataRef v177 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EC0]);
      if (v177)
      {
        CFDataRef v178 = v177;
        CFTypeID v179 = CFDataGetTypeID();
        if (v179 == CFGetTypeID(v178))
        {
          char v180 = CFDataGetBytePtr(v178);
          unint64_t v181 = CFDataGetLength(v178);
          if (v181 >> 1 >= 8) {
            uint64_t v182 = 8;
          }
          else {
            uint64_t v182 = v181 >> 1;
          }
          memcpy((void *)(v21 + 156), v180, 2 * v182);
          *(_DWORD *)(v21 + 152) = v182;
        }
      }
      __int16 v183 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EE8]);
      if (v183)
      {
        uint64_t v184 = v183;
        CFTypeID v185 = CFBooleanGetTypeID();
        CFTypeID v186 = CFGetTypeID(v184);
        if (v185 == v186) {
          int v187 = 1;
        }
        else {
          int v187 = v104;
        }
        if (v185 == v186)
        {
          CFDictionaryRef v188 = theDict;
          if (v134)
          {
            *(unsigned char *)(v21 + 92) = 1;
            int v187 = v104;
          }
          goto LABEL_261;
        }
      }
      else
      {
        int v187 = v104;
      }
      CFDictionaryRef v188 = theDict;
LABEL_261:
      int v364 = v187;
      CFNumberRef v189 = (const __CFNumber *)CFDictionaryGetValue(v188, (const void *)*MEMORY[0x1E4F44EF8]);
      if (v189)
      {
        CFNumberRef v190 = v189;
        CFTypeID v191 = CFNumberGetTypeID();
        if (v191 == CFGetTypeID(v190))
        {
          CFNumberGetValue(v190, kCFNumberSInt32Type, number);
          *(_WORD *)(v21 + 172) = number[0];
        }
      }
      int v192 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F40]);
      uint64_t v19 = v380;
      if (v192
        && (int v193 = v192, v194 = CFBooleanGetTypeID(), v194 == CFGetTypeID(v193))
        && (int v195 = CFBooleanGetValue((CFBooleanRef)v193), *(unsigned char *)(v21 + 732) = v195 != 0, v195))
      {
        ++*(_DWORD *)(v21 + 736);
      }
      else
      {
        *(_DWORD *)(v21 + 736) = 0;
      }
      CFArrayRef v196 = (const __CFArray *)CFDictionaryGetValue(theDict, @"frameQueueInfo");
      if (v196)
      {
        CFArrayRef v197 = v196;
        CFTypeID v198 = CFArrayGetTypeID();
        if (v198 == CFGetTypeID(v197))
        {
          v589.origin.CGFloat x = 0.0;
          v449.value = 0;
          int Count = CFArrayGetCount(v197);
          if (Count >= 1)
          {
            CFIndex v200 = 0;
            uint64_t v201 = Count;
            do
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v197, v200);
              sub_1BBAEECC8(ValueAtIndex, @"bufferSize", kCFNumberSInt64Type, &v589);
              sub_1BBAEECC8(ValueAtIndex, @"timeStamp", kCFNumberSInt64Type, &v449);
              *(void *)(v21 + 184) += *(void *)&v589.origin.x;
              ++v200;
            }
            while (v201 != v200);
          }
          long long v22 = v376;
          uint64_t v19 = v380;
        }
      }
      CFArrayRef v203 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44DC0]);
      if (v203)
      {
        CFArrayRef v204 = v203;
        CFTypeID v205 = CFArrayGetTypeID();
        if (v205 == CFGetTypeID(v204))
        {
          unsigned int v206 = CFArrayGetCount(v204);
          int v207 = v206 >= 0x10 ? 16 : v206;
          *(_DWORD *)(v21 + 192) = v207;
          if (v207)
          {
            unint64_t v208 = 0;
            int v209 = (char *)(v21 + 200);
            do
            {
              CFNumberRef v210 = (const __CFNumber *)CFArrayGetValueAtIndex(v204, v208);
              CFNumberGetValue(v210, kCFNumberSInt64Type, v209);
              ++v208;
              v209 += 8;
            }
            while (v208 < *(unsigned int *)(v21 + 192));
          }
        }
      }
      CFDictionaryRef v211 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F90]);
      if (v211)
      {
        CFDictionaryRef v212 = v211;
        CFNumberRef v213 = (const __CFNumber *)CFDictionaryGetValue(v211, (const void *)*MEMORY[0x1E4F24A88]);
        unsigned __int8 v146 = pixelBuffera;
        if (v213) {
          CFNumberGetValue(v213, kCFNumberSInt32Type, (void *)(v21 + 380));
        }
        CFNumberRef v214 = (const __CFNumber *)CFDictionaryGetValue(v212, (const void *)*MEMORY[0x1E4F24A68]);
        if (v214) {
          CFNumberGetValue(v214, kCFNumberSInt32Type, (void *)(v21 + 384));
        }
        CFNumberRef v215 = (const __CFNumber *)CFDictionaryGetValue(v212, (const void *)*MEMORY[0x1E4F24A70]);
        if (v215) {
          CFNumberGetValue(v215, kCFNumberSInt32Type, (void *)(v21 + 388));
        }
        CFNumberRef v216 = (const __CFNumber *)CFDictionaryGetValue(v212, (const void *)*MEMORY[0x1E4F24A80]);
        if (v216) {
          CFNumberGetValue(v216, kCFNumberSInt32Type, (void *)(v21 + 392));
        }
      }
      else
      {
        *(void *)(v21 + 388) = 0;
        *(void *)(v21 + 380) = 0;
        unsigned __int8 v146 = pixelBuffera;
      }
      CFDictionaryRef v217 = theDict;
      CFNumberRef v218 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PadFrameToMinimumSize");
      if (v218) {
        CFNumberGetValue(v218, kCFNumberSInt32Type, (void *)(v21 + 376));
      }
      CFNumberRef v219 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F50]);
      if (v219) {
        CFNumberGetValue(v219, kCFNumberSInt32Type, (void *)(v21 + 328));
      }
      *(_DWORD *)(v21 + 396) = 0;
      CFNumberRef v220 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"queuelength");
      if (v220)
      {
        *(_DWORD *)(v21 + 396) = 1;
        CFNumberGetValue(v220, kCFNumberSInt32Type, (void *)(v21 + 400));
      }
      CFNumberRef v221 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"avgOutgoingRate");
      if (v221)
      {
        CFNumberGetValue(v221, kCFNumberSInt32Type, (void *)(v21 + 404));
        *(_DWORD *)(v21 + 404) &= ~(*(int *)(v21 + 404) >> 31);
        CFDictionaryRef v217 = theDict;
      }
      CFNumberRef v222 = (const __CFNumber *)CFDictionaryGetValue(v217, @"instantOutgoingRate");
      if (v222)
      {
        CFNumberGetValue(v222, kCFNumberSInt32Type, (void *)(v21 + 408));
        *(_DWORD *)(v21 + 408) &= ~(*(int *)(v21 + 408) >> 31);
        CFDictionaryRef v217 = theDict;
      }
      CFNumberRef v223 = (const __CFNumber *)CFDictionaryGetValue(v217, @"Use2GNetwork");
      if (v223) {
        CFNumberGetValue(v223, kCFNumberSInt32Type, (void *)(v21 + 412));
      }
      CFNumberRef v224 = (const __CFNumber *)CFDictionaryGetValue(v217, @"RemoteDisplayWidth");
      if (v224) {
        CFNumberGetValue(v224, kCFNumberSInt32Type, (void *)(v21 + 416));
      }
      CFNumberRef v225 = (const __CFNumber *)CFDictionaryGetValue(v217, @"RemoteDisplayHeight");
      if (v225) {
        CFNumberGetValue(v225, kCFNumberSInt32Type, (void *)(v21 + 420));
      }
      CFNumberRef v226 = (const __CFNumber *)CFDictionaryGetValue(v217, (const void *)*MEMORY[0x1E4F44F08]);
      if (v226) {
        CFNumberGetValue(v226, kCFNumberDoubleType, (void *)(v21 + 336));
      }
      CFNumberRef v227 = (const __CFNumber *)CFDictionaryGetValue(v217, (const void *)*MEMORY[0x1E4F44DD8]);
      if (v227) {
        CFNumberGetValue(v227, kCFNumberSInt32Type, (void *)(v21 + 344));
      }
      CFNumberRef v228 = (const __CFNumber *)CFDictionaryGetValue(v217, (const void *)*MEMORY[0x1E4F44EB0]);
      if (v228)
      {
        CFNumberRef v229 = v228;
        CFTypeID v230 = CFNumberGetTypeID();
        if (v230 == CFGetTypeID(v229))
        {
          CFNumberGetValue(v229, kCFNumberSInt32Type, (void *)(v21 + 348));
          *(_DWORD *)(v21 + 348) &= ~(*(int *)(v21 + 348) >> 31);
        }
      }
      CFDictionaryRef v231 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"FECPercentage");
      if (v231)
      {
        CFDictionaryRef v232 = v231;
        sub_1BBAEECC8(v231, @"FECPercentageIFrame", kCFNumberFloat64Type, (void *)(v21 + 360));
        sub_1BBAEECC8(v232, @"FECPercentagePFrame", kCFNumberFloat64Type, (void *)(v21 + 368));
      }
      CFNumberRef v233 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F10]);
      if (v233)
      {
        CFNumberRef v234 = v233;
        CFTypeID v235 = CFNumberGetTypeID();
        if (v235 == CFGetTypeID(v234))
        {
          CFNumberGetValue(v234, kCFNumberSInt32Type, (void *)(v21 + 352));
          *(_DWORD *)(v21 + 352) &= ~(*(int *)(v21 + 352) >> 31);
        }
      }
      CFNumberRef v236 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CameraFacingType");
      if (v236)
      {
        CFNumberRef v237 = v236;
        CFTypeID v238 = CFNumberGetTypeID();
        if (v238 == CFGetTypeID(v237)) {
          CFNumberGetValue(v237, kCFNumberSInt32Type, (void *)(v21 + 624));
        }
      }
      LODWORD(v589.origin.x) = 1;
      CFNumberRef v239 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"AutoExposureState");
      if (v239)
      {
        CFNumberRef v240 = v239;
        CFTypeID v241 = CFNumberGetTypeID();
        if (v241 == CFGetTypeID(v240))
        {
          CFNumberGetValue(v240, kCFNumberSInt32Type, &v589);
          *(_DWORD *)(v21 + 176) = LODWORD(v589.origin.x);
        }
      }
      CFNumberRef v242 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CaptureFrameDrop");
      if (v242)
      {
        CFNumberRef v243 = v242;
        CFTypeID v244 = CFNumberGetTypeID();
        if (v244 == CFGetTypeID(v243)) {
          CFNumberGetValue(v243, kCFNumberSInt32Type, (void *)(v21 + 700));
        }
      }
      CFNumberRef v245 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LocalPIPStatus");
      if (v245)
      {
        CFNumberRef v246 = v245;
        CFTypeID v247 = CFNumberGetTypeID();
        if (v247 == CFGetTypeID(v246)) {
          CFNumberGetValue(v246, kCFNumberSInt32Type, (void *)(v21 + 704));
        }
      }
      CFNumberRef v248 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LocalPIPWidth");
      if (v248)
      {
        CFNumberRef v249 = v248;
        CFTypeID v250 = CFNumberGetTypeID();
        if (v250 == CFGetTypeID(v249)) {
          CFNumberGetValue(v249, kCFNumberSInt32Type, (void *)(v21 + 708));
        }
      }
      CFNumberRef v251 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LocalPIPHeight");
      if (v251)
      {
        CFNumberRef v252 = v251;
        CFTypeID v253 = CFNumberGetTypeID();
        if (v253 == CFGetTypeID(v252)) {
          CFNumberGetValue(v252, kCFNumberSInt32Type, (void *)(v21 + 712));
        }
      }
      CFNumberRef v254 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RemotePIPStatus");
      if (v254)
      {
        CFNumberRef v255 = v254;
        CFTypeID v256 = CFNumberGetTypeID();
        if (v256 == CFGetTypeID(v255)) {
          CFNumberGetValue(v255, kCFNumberSInt32Type, (void *)(v21 + 720));
        }
      }
      CFNumberRef v257 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RemotePIPWidth");
      if (v257)
      {
        CFNumberRef v258 = v257;
        CFTypeID v259 = CFNumberGetTypeID();
        if (v259 == CFGetTypeID(v258)) {
          CFNumberGetValue(v258, kCFNumberSInt32Type, (void *)(v21 + 724));
        }
      }
      CFNumberRef v260 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RemotePIPHeight");
      if (v260)
      {
        CFNumberRef v261 = v260;
        CFTypeID v262 = CFNumberGetTypeID();
        if (v262 == CFGetTypeID(v261)) {
          CFNumberGetValue(v261, kCFNumberSInt32Type, (void *)(v21 + 728));
        }
      }
      if (*(_DWORD *)(v21 + 5048) == 38)
      {
        *(void *)(v21 + 388) = 0;
        *(void *)(v21 + 380) = 0;
      }
      int v145 = v364;
LABEL_351:
      *(unsigned char *)(v21 + 93) = v145;
      v449.value = 0;
      *(_DWORD *)(v21 + 572) = 0;
      *(void *)(v21 + 576) = 0;
      *(_OWORD *)(v21 + 424) = 0u;
      *(_OWORD *)(v21 + 440) = 0u;
      *(_OWORD *)(v21 + 456) = 0u;
      *(_OWORD *)(v21 + 472) = 0u;
      *(_OWORD *)(v21 + 488) = 0u;
      *(_OWORD *)(v21 + 504) = 0u;
      *(_OWORD *)(v21 + 520) = 0u;
      *(_OWORD *)(v21 + 536) = 0u;
      *(_OWORD *)(v21 + 552) = 0u;
      *(_DWORD *)(v21 + 584) = -1;
      *(void *)(v21 + 600) = 0;
      *(void *)(v21 + 616) = 0;
      *(void *)(v21 + 608) = 0;
      *(void *)(v21 + 592) = 0x3FF0000000000000;
      CFNumberRef v263 = (const __CFNumber *)CVBufferCopyAttachment(v146, @"FrameIndex", 0);
      number[0] = v263;
      if (v263)
      {
        CFNumberRef v264 = v263;
        CFNumberGetValue(v263, kCFNumberIntType, (void *)(v21 + 584));
        CFRelease(v264);
        number[0] = 0;
      }
      uint64_t v265 = *(void *)&v52 + *(void *)&x;
      memset(&v589, 0, sizeof(v589));
      CFDictionaryRef v266 = CVBufferCopyAttachments(v146, kCVAttachmentMode_ShouldPropagate);
      if (v266)
      {
        CFDictionaryRef v267 = v266;
        uint64_t v365 = v265;
        uint64_t v268 = (const void *)*MEMORY[0x1E4F51480];
        if (CFDictionaryContainsKey(v266, (const void *)*MEMORY[0x1E4F51480])
          && (CFDictionaryRef v269 = (const __CFDictionary *)CFDictionaryGetValue(v267, v268)) != 0)
        {
          CFDictionaryRef v361 = v267;
          int v270 = v145;
          CFDictionaryRef theDicta = v269;
          uint64_t v271 = CFDictionaryGetValue(v269, (const void *)*MEMORY[0x1E4F52700]);
          if (v271) {
            goto LABEL_357;
          }
          if (qword_1E9F820C0 != -1) {
            dispatch_once(&qword_1E9F820C0, &unk_1F14EF2F0);
          }
          if ((byte_1E9F820C8 & 1) == 0)
          {
            CFDictionaryRef v288 = (const __CFDictionary *)CFDictionaryGetValue(theDicta, @"MetadataCVA");
            if (v288)
            {
              uint64_t v271 = CFDictionaryGetValue(v288, (const void *)*MEMORY[0x1E4F4D730]);
              if (v271)
              {
LABEL_357:
                CFTypeID v272 = CFGetTypeID(v271);
                if (v272 == CFArrayGetTypeID())
                {
                  unsigned int v273 = CFArrayGetCount((CFArrayRef)v271);
                  int v274 = v273 >= 5 ? 5 : v273;
                  *(_DWORD *)(v21 + 564) = v274;
                  if (v274)
                  {
                    unint64_t v275 = 0;
                    kefloat y = (void *)*MEMORY[0x1E4F52708];
                    unint64_t v360 = (void *)*MEMORY[0x1E4F52718];
                    uint64_t v362 = (void *)*MEMORY[0x1E4F52710];
                    unint64_t v359 = (void *)*MEMORY[0x1E4F52720];
                    uint64_t v276 = (float *)(v21 + 424);
                    do
                    {
                      CFDictionaryRef v277 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v271, v275);
                      if (v277)
                      {
                        CFDictionaryRef v278 = v277;
                        unint64_t v279 = v22;
                        CFTypeID v280 = CFGetTypeID(v277);
                        BOOL v135 = v280 == CFDictionaryGetTypeID();
                        long long v22 = v279;
                        if (v135)
                        {
                          if (CFDictionaryGetValueIfPresent(v278, key, (const void **)number)) {
                            CFNumberGetValue(number[0], kCFNumberSInt32Type, v276);
                          }
                          if (!v275)
                          {
                            if (CFDictionaryGetValueIfPresent(v278, v360, (const void **)number)) {
                              CFNumberGetValue(number[0], kCFNumberSInt32Type, (void *)(v21 + 444));
                            }
                            if (CFDictionaryGetValueIfPresent(v278, v359, (const void **)number)) {
                              CFNumberGetValue(number[0], kCFNumberSInt32Type, (void *)(v21 + 448));
                            }
                          }
                          if (CFDictionaryGetValueIfPresent(v278, v362, (const void **)number)
                            && CGRectMakeWithDictionaryRepresentation(number[0], &v589))
                          {
                            float v281 = v589.origin.x;
                            v276[1] = v281;
                            float y = v589.origin.y;
                            v276[2] = y;
                            float v283 = v589.size.width;
                            v276[3] = v283;
                            float v284 = v589.size.height;
                            v276[4] = v284;
                            if (v281 < 0.0
                              || ((float v285 = v281 + v283, y >= 0.0) ? (v286 = v285 <= 1.0) : (v286 = 0),
                                  !v286 || v283 < 0.0 || v284 < 0.0 || (float)(y + v284) > 1.0))
                            {
                              *(void *)(v276 + 1) = 0;
                              *(void *)(v276 + 3) = 0;
                              *(_DWORD *)(v21 + 564) = 0;
                            }
                          }
                        }
                      }
                      ++v275;
                      v276 += 7;
                    }
                    while (v275 < *(unsigned int *)(v21 + 564));
                  }
                }
              }
            }
          }
          uint64_t v391 = 0;
          size_t extraRowsOnBottom = 0;
          uint64_t v389 = 0;
          uint64_t v390 = 0;
          uint64_t v388 = 0;
          *(unsigned char *)(v21 + 696) = 0;
          CFDictionaryRef v289 = theDicta;
          if (CFDictionaryGetValueIfPresent(theDicta, (const void *)*MEMORY[0x1E4F523A8], (const void **)&extraRowsOnBottom))
          {
            CFTypeID v290 = CFNumberGetTypeID();
            BOOL v135 = v290 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            CFDictionaryRef v289 = theDicta;
            if (v135) {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberDoubleType, &v449);
            }
          }
          int v145 = v270;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E4F52338], (const void **)&extraRowsOnBottom))
          {
            CFTypeID v291 = CFNumberGetTypeID();
            BOOL v135 = v291 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            CFDictionaryRef v289 = theDicta;
            if (v135) {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, (char *)&v391 + 4);
            }
          }
          CFDictionaryRef v267 = v361;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E4F52450], (const void **)&extraRowsOnBottom))
          {
            CFTypeID v292 = CFNumberGetTypeID();
            BOOL v135 = v292 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            CFDictionaryRef v289 = theDicta;
            if (v135) {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, &v391);
            }
          }
          unsigned __int8 v146 = pixelBuffera;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E4F52328], (const void **)&extraRowsOnBottom))
          {
            CFTypeID v293 = CFNumberGetTypeID();
            BOOL v135 = v293 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            CFDictionaryRef v289 = theDicta;
            if (v135) {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, (char *)&v390 + 4);
            }
          }
          uint64_t v19 = v380;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E4F52350], (const void **)&extraRowsOnBottom))
          {
            CFTypeID v294 = CFNumberGetTypeID();
            BOOL v135 = v294 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            CFDictionaryRef v289 = theDicta;
            if (v135) {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, &v390);
            }
          }
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E4F52348], (const void **)&extraRowsOnBottom))
          {
            CFTypeID v295 = CFNumberGetTypeID();
            BOOL v135 = v295 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            CFDictionaryRef v289 = theDicta;
            if (v135) {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, (char *)&v389 + 4);
            }
          }
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E4F52340], (const void **)&extraRowsOnBottom))
          {
            CFTypeID v296 = CFNumberGetTypeID();
            BOOL v135 = v296 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            CFDictionaryRef v289 = theDicta;
            if (v135) {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, &v389);
            }
          }
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E4F52448], (const void **)&extraRowsOnBottom))
          {
            CFTypeID v297 = CFNumberGetTypeID();
            BOOL v135 = v297 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            CFDictionaryRef v289 = theDicta;
            if (v135) {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, (char *)&v388 + 4);
            }
          }
          double v298 = 0.0;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E4F523E8], (const void **)&extraRowsOnBottom))
          {
            CFTypeID v299 = CFNumberGetTypeID();
            BOOL v135 = v299 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            uint64_t v287 = (uint64_t *)(v21 + 5160);
            if (v135)
            {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberFloatType, &v388);
              *(unsigned char *)(v21 + 696) = 1;
              double v298 = *(float *)&v388;
            }
          }
          else
          {
            uint64_t v287 = (uint64_t *)(v21 + 5160);
          }
          *(double *)(v21 + 688) = v298;
          double v300 = *(double *)&v449.value;
          *(void *)(v21 + 648) = v449.value;
          *(_DWORD *)(v21 + 656) = HIDWORD(v391);
          *(_DWORD *)(v21 + 660) = v391;
          *(_DWORD *)(v21 + 664) = HIDWORD(v388);
          *(_DWORD *)(v21 + 672) = v390;
          *(_DWORD *)(v21 + 676) = HIDWORD(v389);
          *(_DWORD *)(v21 + 680) = v389;
          *(double *)(v21 + 632) = (double)v365 / (double)y_low + v300 * -0.5;
        }
        else
        {
          *(double *)(v21 + 632) = (double)v365 / (double)y_low;
          uint64_t v287 = (uint64_t *)(v21 + 5160);
        }
        CFRelease(v267);
      }
      else
      {
        *(double *)(v21 + 632) = (double)v265 / (double)y_low;
        uint64_t v287 = (uint64_t *)(v21 + 5160);
      }
      float v301 = 0.0;
      BOOL v53 = (_DWORD *)(v21 + 24);
      if (*(int *)(v46 + 84) <= 0 && !*(_DWORD *)(v46 + 104)) {
        float v301 = *(double *)(v21 + 752);
      }
      int v302 = *(_DWORD *)(v21 + 760);
      if (v302 >= 1) {
        *(_DWORD *)(v21 + 24) = v302;
      }
      int v303 = *(_DWORD *)(v21 + 764);
      if (v303 >= 1) {
        *(_DWORD *)(v21 + 28) = v303;
      }
      int v304 = *(_DWORD *)(v21 + 5048);
      if (v304 == 38 || v304 == 20)
      {
        uint64_t v305 = 0;
        int v306 = 0x7FFFFFFF;
        do
        {
          double v307 = *(double *)(v21 + v305 + 768);
          if (v307 != 0.0)
          {
            double v308 = *(double *)(v21 + v305 + 832);
            if (v308 != 0.0 && v306 >= (int)(v307 * 8.0 / v308)) {
              int v306 = (int)(v307 * 8.0 / v308);
            }
          }
          v305 += 8;
        }
        while (v305 != 64);
        if (v302 <= 0) {
          int v302 = 0x7FFFFFFF;
        }
        if (v302 != 0x7FFFFFFF || v306 != 0x7FFFFFFF)
        {
          if (v302 >= v306) {
            uint64_t v309 = v306;
          }
          else {
            uint64_t v309 = v302;
          }
          if (v304 == 38)
          {
            LODWORD(v309) = sub_1BBAEEA4C(v309, *(_DWORD *)(v21 + 5040), *(_DWORD *)(v21 + 5140), *(_DWORD *)(v21 + 5144), *(double *)(v21 + 752));
            BOOL v53 = (_DWORD *)(v21 + 24);
          }
          _DWORD *v53 = v309;
        }
        *(unsigned char *)(v21 + 896) = 0;
      }
      *(float *)(v21 + 52) = v301;
      *(_DWORD *)(v21 + 80) = (*(_DWORD *)(v21 + 84) | v145) != 0;
      *(_DWORD *)(v21 + 88) = 0;
      double v310 = *(double *)(v21 + 5072);
      int v311 = *(_DWORD *)(v21 + 5068);
      if (v310 > 0.0 || v311 != 0)
      {
        int v313 = (int)(*(float *)(v21 + 56) * v310 + 0.5);
        if (v313 <= 0) {
          int v313 = 0x7FFFFFFF;
        }
        if (v311 >= v313) {
          int v314 = v313;
        }
        else {
          int v314 = *(_DWORD *)(v21 + 5068);
        }
        if (v311 <= 0) {
          int v315 = v313;
        }
        else {
          int v315 = v314;
        }
        *(_DWORD *)(*(void *)(v21 + 16) + 304) = v315;
        double v310 = *(double *)(v21 + 5072);
      }
      if (v310 > 2.22044605e-16 && (double)(uint64_t)(*(void *)&x - *(void *)(v21 + 96)) / (double)y_low >= v310)
      {
        uint64_t v317 = *v287;
      }
      else
      {
        unint64_t v316 = *(unsigned int *)(v21 + 5068);
        if (!v316 || (uint64_t v317 = *(void *)(v21 + 5160), v317 - *(void *)(v21 + 104) < v316))
        {
LABEL_479:
          unsigned int v318 = *(_DWORD *)(v21 + 5048);
          if (v318 > 0x27 || ((1 << v318) & 0xC000100000) == 0) {
            goto LABEL_493;
          }
          int v319 = *v22;
          if (*(unsigned char *)(v19 + 1172))
          {
            uint64_t v320 = *((void *)v319 + 647);
            if (*(unsigned char *)(v320 + 5425) && *(void *)(v320 + 5392)) {
              *(void *)(*(void *)(v320 + 5416) + 144) = v146;
            }
          }
          else
          {
            sub_1BBB443CC(v319, (uint64_t)v146);
            BOOL v53 = (_DWORD *)(v21 + 24);
          }
          if (*(void *)(v21 + 5152))
          {
            if (*(_DWORD *)(v46 + 84)) {
              goto LABEL_493;
            }
            int v321 = *(_DWORD *)(v46 + 100);
            int v322 = *(_DWORD *)(v46 + 88) - *(_DWORD *)(v21 + 6240);
            int v323 = v322 & ~(v322 >> 31);
            if (*(int *)(v21 + 736) > 3 || (int v324 = v323, v323 > v321)) {
              int v324 = *(_DWORD *)(v21 + 6244);
            }
            *(_DWORD *)(v46 + 84) = v324;
            *(unsigned char *)(v21 + 740) = (float)((float)((float)v323 * (float)*(int *)(v21 + 24)) / (float)v321) > 5000000.0;
          }
          *(_DWORD *)(v21 + 6240) = *(_DWORD *)(v46 + 88);
          *(_DWORD *)(v21 + 6244) = *(_DWORD *)(v46 + 84);
LABEL_493:
          long long v325 = (unsigned int *)(v382 + 1323);
          long long v326 = v382 + 1325;
          long long v327 = *v22;
          uint64_t v328 = *((void *)*v22 + 648);
          if (v328 && *(unsigned char *)(v328 + 504))
          {
            int v329 = *(_DWORD *)(v328 + 528);
            signed int v330 = *(_DWORD *)(v328 + 12);
            uint64_t v331 = (v329 + 1);
            if (v330 <= (int)v331) {
              int v332 = v329 + 1;
            }
            else {
              int v332 = *(_DWORD *)(v328 + 12);
            }
            uint64_t v333 = (8 * v331) | 7;
            int v334 = *(_DWORD *)(v328 + 528);
            while (1)
            {
              if ((int)v331 >= v330)
              {
                int v334 = v332;
                goto LABEL_507;
              }
              if (v330 <= v331) {
                break;
              }
              if (v329 < -1) {
                break;
              }
              uint64_t v335 = *(void *)(v328 + 24);
              if (!v335) {
                break;
              }
              int v336 = *(unsigned __int8 *)(v335 + v333);
              LODWORD(v331) = v331 + 1;
              v333 += 8;
              ++v334;
              if (!v336) {
                goto LABEL_507;
              }
            }
            int v334 = v331;
LABEL_507:
            *(_DWORD *)(v21 + 5180) = v334;
          }
          uint64_t v337 = sub_1BBB4A864((uint64_t)v327, (uint64_t)v53, v46, *(unsigned int *)(v21 + 5004), v325, v369, v326, v370, &v387, &v386, (unsigned char *)(v21 + 6313), (unsigned char *)&v387 + 1);
          if (v337)
          {
            uint64_t v343 = v337;
            CFLog();
            uint64_t v50 = v343;
            goto LABEL_510;
          }
          if (!*(_DWORD *)(*((void *)*v22 + 647) + 208128)
            && *(unsigned char *)(v19 + 1172)
            && (uint64_t v345 = sub_1BBAEED40(v21, v338, v339, v340, v341, v342), v345))
          {
            uint64_t v346 = v345;
            CFLog();
            uint64_t v50 = v346;
            CFNumberRef v31 = v372;
          }
          else
          {
            uint64_t v344 = v46;
            CFNumberRef v31 = v372;
            uint64_t v50 = sub_1BBAEA744(v21, v344, v372, v367, v369, v325, v370, v326);
          }
          int v33 = cf;
          if (v50)
          {
            CFLog();
            goto LABEL_511;
          }
          char v48 = 1;
          BOOL v49 = v373;
LABEL_533:
          if (!v21) {
            goto LABEL_541;
          }
          goto LABEL_534;
        }
      }
      *(_DWORD *)(v21 + 80) = 1;
      *(CGFloat *)(v21 + 96) = x;
      *(void *)(v21 + 104) = v317;
      goto LABEL_479;
    }
  }
  CFLog();
  value = 0;
  char v48 = 0;
  BOOL v49 = 0;
  uint64_t v50 = 4294943590;
LABEL_534:
  if (*v22)
  {
    unsigned int v354 = *(_DWORD *)(v21 + 5048);
    if (v354 <= 0x27 && ((1 << v354) & 0xC000100000) != 0)
    {
      if (*(unsigned char *)(v19 + 1172))
      {
        uint64_t v355 = *((void *)*v22 + 647);
        if (*(unsigned char *)(v355 + 5425))
        {
          if (*(void *)(v355 + 5392)) {
            *(void *)(*(void *)(v355 + 5416) + 144) = 0;
          }
        }
      }
    }
  }
LABEL_541:
  if (v48)
  {
    if (!v49) {
      goto LABEL_546;
    }
    goto LABEL_545;
  }
  BOOL v356 = v49;
  VTEncoderSessionDequeueDecodeTimeStamp();
  VTEncoderSessionEmitEncodedFrame();
  if (v356) {
LABEL_545:
  }
    CVPixelBufferUnlockBaseAddress(value[1], 1uLL);
LABEL_546:
  if (v31) {
    CFRelease(v31);
  }
  if (v33) {
    CFRelease(v33);
  }
  *(int64x2_t *)(v21 + 5152) = vaddq_s64(*(int64x2_t *)(v21 + 5152), vdupq_n_s64(1uLL));
  return v50;
}

uint64_t sub_1BBAEE678(_DWORD *a1, int *a2, uint64_t a3)
{
  int v6 = a1[1285];
  *(_WORD *)a3 = v6;
  int v7 = a1[1286];
  *(_WORD *)(a3 + 4) = v7;
  *(_WORD *)(a3 + 2) = a1[1286];
  *(unsigned char *)(a3 + 624) = 0;
  *(unsigned char *)(a3 + 671) = 0;
  uint64_t v8 = sub_1BBAEE78C((__int16)v6, (__int16)v7);
  sub_1BBAEEB90(a1[1285], a1[1286], a3, v8, v9, v10);
  int v11 = a1[1271];
  if (v11)
  {
    *(_DWORD *)(a3 + 40) = v11;
    *(_DWORD *)(a3 + 84) = a1[1271];
  }
  int v12 = a1[1267];
  if (v12)
  {
    *(_DWORD *)(a3 + 304) = v12;
    *(_WORD *)(a3 + 326) = 0;
  }
  int v13 = a1[1265];
  if (v13) {
    LOBYTE(v13) = *(unsigned char *)(a3 + 236);
  }
  else {
    *(unsigned char *)(a3 + 236) = 0;
  }
  *(unsigned char *)(a3 + 237) = v13;
  uint64_t result = sub_1BBAEEAF4((uint64_t)a1, a2, a3);
  unsigned int v15 = *(_DWORD *)(a3 + 304);
  if (v15 == 1)
  {
    int v16 = 1;
  }
  else
  {
    unsigned int v17 = *(_DWORD *)(a3 + 300);
    if (v17 < v15 && v17 > 1) {
      unsigned int v19 = *(_DWORD *)(a3 + 300);
    }
    else {
      unsigned int v19 = *(_DWORD *)(a3 + 304);
    }
    if (v15 == 0x800000) {
      unsigned int v15 = 31;
    }
    else {
      unsigned int v15 = v19;
    }
    if (v17 == 1)
    {
      unsigned int v15 = 1;
      int v16 = 1;
    }
    else
    {
      int v16 = 30;
    }
  }
  *(_DWORD *)(a3 + 84) = v15;
  *(_DWORD *)(a3 + 216) = v16;
  *(_DWORD *)(a3 + 220) = 1069547520;
  return result;
}

uint64_t sub_1BBAEE78C(int a1, int a2)
{
  unsigned int v2 = a2 * a1;
  if (a2 * a1 >= 4801)
  {
    if (v2 >= 0x6301)
    {
      if (v2 < 0xE1001) {
        int v4 = 6;
      }
      else {
        int v4 = 7;
      }
      if (v2 <= 0x4B000) {
        int v4 = 5;
      }
      if (v2 >= 0x2B201) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = 4;
      }
      if (v2 >= 0x18C01) {
        uint64_t v3 = v5;
      }
      else {
        uint64_t v3 = 3;
      }
    }
    else
    {
      uint64_t v3 = 2;
    }
  }
  else
  {
    uint64_t v3 = 1;
  }
  if (a2 > a1)
  {
    BOOL v7 = a2 == 256 || (a2 & 0xFFFFFFBF) == 128;
    if (a1 == 80 && v7)
    {
      return 8;
    }
    else
    {
      BOOL v10 = a2 == 384 || a2 == 512 || a2 == 256;
      if (a1 == 160 && v10)
      {
        return 9;
      }
      else if ((a2 == 720 || a2 == 480 || a2 == 960) && a1 == 320)
      {
        return 10;
      }
      else
      {
        return v3;
      }
    }
  }
  return v3;
}

uint64_t sub_1BBAEE88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v9 = v8;
  uint64_t v10 = 0;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v11 = &v15;
  memset(v14, 0, sizeof(v14));
  do
  {
    *(void *)((char *)v14 + v10) = v11;
    v10 += 8;
    v11 += 300;
  }
  while (v10 != 512);
  int v13 = 0;
  sub_1BBAEE980(v6, v7, &v13, (uint64_t)v14);
  return sub_1BBB47BDC(v13, (uint64_t)v14, v9);
}

uint64_t sub_1BBAEE980(uint64_t result, unint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int v5 = 0;
  do
  {
    unint64_t v6 = v5;
    v5 += 299;
    uint64_t v7 = (v6 << 32) - 0x100000000;
    do
    {
      unint64_t v8 = v6;
      int v9 = *(unsigned __int8 *)(result + v6++);
      ++v5;
      v7 += 0x100000000;
    }
    while (v9 == 32 && v8 < a2);
    if (v8 >= a2) {
      break;
    }
    if (v4 == 63)
    {
      LODWORD(v4) = 64;
      break;
    }
    unint64_t v11 = v7 >> 32;
    int v12 = *(unsigned __int8 *)(result + v11);
    if (v12 == 32 || v11 >= a2)
    {
      v5 -= 300;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a4 + 8 * v4);
      while (1)
      {
        *(unsigned char *)(v15 + v14) = v12;
        if (v14 == 299) {
          break;
        }
        int v16 = v14 + 1;
        *(unsigned char *)(v15 + v14 + 1) = 0;
        int v12 = *(unsigned __int8 *)(result + v6 + v14);
        if (v12 == 32 || v6 + v14++ >= a2)
        {
          int v5 = v6 + v16 - 1;
          break;
        }
      }
      unint64_t v11 = v5;
    }
    ++v4;
  }
  while (v11 < a2);
  *a3 = v4;
  return result;
}

uint64_t sub_1BBAEEA4C(uint64_t result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 0;
  unint64_t v6 = a4 * (unint64_t)a3;
  uint64_t v7 = &qword_1E6248618;
  while (v6 > *((unsigned int *)v7 - 3) || *v7 < v6 * a5)
  {
    ++v5;
    v7 += 4;
    if (v5 == 16)
    {
      unint64_t v8 = 0;
      goto LABEL_7;
    }
  }
  unint64_t v8 = &(&off_1E6248600)[4 * v5];
LABEL_7:
  uint64_t v9 = 0;
  uint64_t v10 = &dword_1E6248808;
  while (1)
  {
    int v11 = *v10;
    v10 += 6;
    if (v11 == a2) {
      break;
    }
    if (++v9 == 8) {
      return result;
    }
  }
  if (v8)
  {
    int v12 = *((_DWORD *)v8 + 4) * *((_DWORD *)&off_1E6248600 + 6 * v9 + 131);
    if (v12 >= (int)result) {
      return result;
    }
    else {
      return v12;
    }
  }
  return result;
}

uint64_t sub_1BBAEEAF4(uint64_t result, int *a2, uint64_t a3)
{
  *a2 = *(_DWORD *)(a3 + 52);
  a2[7] = *(_DWORD *)(a3 + 60);
  double v3 = *(double *)(result + 752);
  if (v3 > 0.0)
  {
    float v4 = v3;
    *(float *)(a3 + 60) = v4;
    float v5 = *(double *)(result + 752);
    *((float *)a2 + 7) = v5;
  }
  int v6 = *(_DWORD *)(result + 760);
  if (v6 < 1)
  {
    int v7 = *a2;
  }
  else
  {
    *(_DWORD *)(a3 + 52) = v6;
    int v7 = *(_DWORD *)(result + 760);
    *a2 = v7;
  }
  if (v7 < 1 || *((float *)a2 + 7) <= 0.0)
  {
    char v8 = 0;
    goto LABEL_12;
  }
  if (*(_DWORD *)(result + 5048) != 7 || *(unsigned char *)(a3 + 211) != 2)
  {
    char v8 = 32;
LABEL_12:
    *(unsigned char *)(a3 + 211) = v8;
  }
  *(_DWORD *)(a3 + 228) = 437918234;
  return result;
}

uint64_t sub_1BBAEEB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v10 = v9;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((v8 - 1) > 8) {
    int v11 = "-20 1500000 ";
  }
  else {
    int v11 = off_1E6248B70[v8 - 1];
  }
  snprintf(__str, 0x1000uLL, " %d %d -133 1 -30 2 -74 -22 15 -111 2 -101 s %s", v6, v7, v11);
  size_t v12 = strlen(__str);
  return sub_1BBAEE88C((uint64_t)__str, v12, v10, v13, v14, v15);
}

intptr_t sub_1BBAEEC58(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  if (a2)
  {
    *(_DWORD *)(*(void *)(a1 + 32) + 6276) = 0;
  }
  else
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F74510]);
    CFNumberGetValue(Value, kCFNumberSInt32Type, (void *)(*(void *)(a1 + 32) + 6276));
  }
  float v5 = *(NSObject **)(*(void *)(a1 + 32) + 6280);

  return dispatch_semaphore_signal(v5);
}

CFNumberRef sub_1BBAEECC8(const __CFDictionary *a1, const void *a2, CFNumberType a3, void *a4)
{
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberRef v7 = result;
    CFTypeID v8 = CFGetTypeID(result);
    CFNumberRef result = (const __CFNumber *)CFNumberGetTypeID();
    if ((const __CFNumber *)v8 == result)
    {
      return (const __CFNumber *)CFNumberGetValue(v7, a3, a4);
    }
  }
  return result;
}

uint64_t sub_1BBAEED40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v534 = *MEMORY[0x1E4F143B8];
  bzero(v532, 0x2580uLL);
  bzero(v531, 0x5DCuLL);
  bzero(v530, 0xBB8uLL);
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(void *)(v7 + 5176);
  uint64_t v9 = (unsigned __int8 *)(v8 + 119152);
  unsigned int v10 = *(unsigned __int8 *)(v8 + 119152);
  uint64_t v11 = v8 + 1880 * *(unsigned __int8 *)(v8 + 119152) + 57108;
  int v12 = *(unsigned __int8 *)(v7 + 24);
  *(_DWORD *)uint64_t v11 = v12;
  *(_DWORD *)(v11 + 4) = *(unsigned __int8 *)(v7 + 25);
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v7 + 26);
  *(unsigned char *)(v11 + 9) = *(unsigned char *)(v7 + 27);
  *(unsigned char *)(v11 + 10) = *(unsigned char *)(v7 + 28);
  *(unsigned char *)(v11 + 11) = *(unsigned char *)(v7 + 29);
  *(unsigned char *)(v11 + 12) = *(unsigned char *)(v7 + 30);
  *(unsigned char *)(v11 + 13) = *(unsigned char *)(v7 + 31);
  *(unsigned char *)(v11 + 1338) = *(unsigned char *)(v7 + 282);
  *(unsigned char *)(v11 + 1336) = *(unsigned char *)(v7 + 398) == 0;
  *(unsigned char *)(v11 + 18) = *(unsigned char *)(v7 + 399) != 1;
  if (!*(unsigned char *)(v7 + 4814) && !*(unsigned char *)(v7 + 4815)) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(v8 + 208120);
  uint64_t v14 = *(unsigned int *)(v13 + 200);
  if (!v14) {
    goto LABEL_17;
  }
  uint64_t v15 = *(unsigned int **)(v13 + 192);
  std::string __dst = v15;
  uint64_t v526 = v15;
  unsigned int v528 = bswap32(*v15);
  char v529 = 0;
  uint64_t v527 = (char *)v15 + v14;
  int v524 = v14;
  int v525 = v14;
  if (!*((unsigned char *)v15 + v14 - 1))
  {
    int v16 = (unsigned __int8 *)v15 + v14 - 2;
    do
    {
      if (!v14) {
        break;
      }
      LODWORD(v14) = v14 - 1;
    }
    while (!*v16--);
    int v525 = v14;
  }
  int v18 = sub_1BBB21838((uint64_t)&__dst, (char *)v11);
  __int16 VideoFormatDescription = v18;
  int v20 = *(_DWORD *)(v7 + 4852);
  if (v20 == 2) {
    goto LABEL_12;
  }
  if (v20 == 1)
  {
    uint64_t v21 = v8 + 1880 * v10;
    *(_WORD *)(v21 + 58537) = 257;
    *(_OWORD *)(v21 + 58540) = xmmword_1BBB6FCB0;
    *(_DWORD *)(v21 + 58556) = 0;
LABEL_12:
    *(_DWORD *)(v8 + 1880 * v10 + 58560) = 4;
  }
  if (v18)
  {
    if ((_WORD)v18) {
      return VideoFormatDescription;
    }
    __int16 v22 = 0;
    goto LABEL_158;
  }
  int v12 = *(_DWORD *)v11;
LABEL_17:
  if (v12 == 66 && *(unsigned char *)(v11 + 8) == 1 && *(unsigned char *)(v11 + 9) == 1 && *(unsigned char *)(v11 + 10) == 1)
  {
    uint64_t v23 = v8 + 1880 * v10;
    int v24 = (_DWORD *)(v23 + 57108);
    *(unsigned char *)(v23 + 58464) = 1;
    v23 += 58468;
    *(_WORD *)(v23 + 69) = 257;
    *(_OWORD *)(v23 + 72) = xmmword_1BBB6FCC0;
    v24[362] = 0;
    v24[363] = v24[330];
  }
  unsigned int v25 = *v9;
  uint64_t v26 = v8 + 1880 * *v9 + 57108;
  p_dst = &__dst;
  int v520 = &__dst;
  unsigned int v521 = 0;
  unsigned __int8 v522 = 0;
  LODWORD(__dst) = 39;
  if (*(_DWORD *)v26 == 101) {
    int v27 = 100;
  }
  else {
    int v27 = *(_DWORD *)v26;
  }
  *(_DWORD *)((char *)&__dst + 1) = v27;
  int v28 = *(unsigned __int8 *)(v26 + 8);
  *(_DWORD *)((char *)&__dst + 2) = (v28 & 1) << 7;
  unsigned int v29 = (v28 << 31) | (*(unsigned __int8 *)(v26 + 9) << 30);
  *(_DWORD *)((char *)&__dst + 2) = HIBYTE(v29);
  unsigned int v30 = v29 | (*(unsigned __int8 *)(v26 + 10) << 29);
  *(_DWORD *)((char *)&__dst + 2) = HIBYTE(v30);
  unsigned int v31 = v30 | (*(unsigned __int8 *)(v26 + 11) << 28);
  *(_DWORD *)((char *)&__dst + 2) = HIBYTE(v31);
  unsigned int v32 = v31 | (*(unsigned __int8 *)(v26 + 12) << 27);
  *(_DWORD *)((char *)&__dst + 2) = HIBYTE(v32);
  *(_DWORD *)((char *)&__dst + 2) = (v32 | (*(unsigned __int8 *)(v26 + 13) << 26)) >> 24;
  *(_DWORD *)((char *)&__dst + 3) = *(unsigned __int8 *)(v26 + 4);
  unsigned int v33 = *(unsigned __int8 *)(v26 + 17) + 1;
  unsigned int v34 = __clz(v33);
  unsigned int v35 = (v33 - (0x80000000 >> v34)) | (0x80000000 >> v34);
  v34 *= 2;
  unsigned int v36 = v35 << (v34 - 31);
  HIDWORD(__dst) = bswap32(v36);
  v34 ^= 0x3Fu;
  unsigned int v37 = v34 & 7;
  float v38 = (_DWORD *)((char *)&__dst + (v34 >> 3) + 4);
  unsigned int v39 = v36 << (v34 & 0x38);
  unsigned int v40 = *(_DWORD *)v26 - 100;
  if (v40 <= 0x2C && ((1 << v40) & 0x100000400403) != 0)
  {
    uint64_t v41 = v8 + 1880 * v25;
    unsigned int v42 = *(unsigned __int8 *)(v41 + 57126) + 1;
    unsigned int v43 = __clz(v42);
    unsigned int v44 = (((v42 - (0x80000000 >> v43)) | (0x80000000 >> v43)) << (2 * v43 - v37 - 31)) | v39;
    *float v38 = bswap32(v44);
    unsigned int v45 = v37 - 2 * v43 + 63;
    int v46 = v45 & 6;
    uint64_t v47 = (_DWORD *)((char *)v38 + (v45 >> 3));
    unsigned int v48 = v44 << (v45 & 0xF8);
    if (*(unsigned char *)(v41 + 57126) == 3)
    {
      v48 |= *(unsigned __int8 *)(v8 + 1880 * v25 + 57127) << (v46 ^ 0x1F);
      _DWORD *v47 = bswap32(v48);
      v46 |= 1u;
    }
    unsigned int v49 = *(unsigned __int8 *)(v8 + 1880 * v25 + 57128) + 1;
    unsigned int v50 = __clz(v49);
    unsigned int v51 = (((v49 - (0x80000000 >> v50)) | (0x80000000 >> v50)) << (2 * v50 - v46 - 31)) | v48;
    _DWORD *v47 = bswap32(v51);
    unint64_t v52 = v46 - 2 * v50 + 63;
    int v53 = v52 & 7;
    CGFloat v54 = (_DWORD *)((char *)v47 + (v52 >> 3));
    LODWORD(v52) = v51 << (v52 & 0xF8);
    unsigned int v55 = *(unsigned __int8 *)(v8 + 1880 * v25 + 57129) + 1;
    unsigned int v56 = __clz(v55);
    LODWORD(v52) = v52 | (((v55 - (0x80000000 >> v56)) | (0x80000000 >> v56)) << (2 * v56 - v53 - 31));
    *CGFloat v54 = bswap32(v52);
    CFNumberRef v57 = (_DWORD *)((char *)v54 + ((unint64_t)(v53 - 2 * v56 + 63) >> 3));
    LODWORD(v52) = (*(unsigned __int8 *)(v8 + 1880 * v25 + 57130) << ((v53 - 2 * v56 + 63) & 7 ^ 0x1F)) | (v52 << ((v53 - 2 * v56 + 63) & 0xF8));
    *CFNumberRef v57 = bswap32(v52);
    unint64_t v58 = (((_BYTE)v53 - 2 * (_BYTE)v56 + 63) & 7u) + 1;
    uint64_t v59 = (_DWORD *)((char *)v57 + (v58 >> 3));
    LODWORD(v58) = (v52 << (v58 & 8)) | (*(unsigned __int8 *)(v8 + 1880 * v25 + 57131) << (v58 & 7 ^ 0x1F));
    *uint64_t v59 = bswap32(v58);
    unsigned int v60 = (((((_BYTE)v53 - 2 * (_BYTE)v56 + 63) & 7) + 1) & 7) + 1;
    unsigned int v37 = v60 & 7;
    float v38 = (_DWORD *)((char *)v59 + (v60 >> 3));
    unsigned int v39 = v58 << (v60 & 8);
    if (*(unsigned char *)(v8 + 1880 * v25 + 57131))
    {
      unint64_t v61 = 0;
      unsigned int v62 = -6;
      do
      {
        unint64_t v63 = v8 + 1880 * v25 + v61;
        unsigned int v64 = (*(unsigned __int8 *)(v63 + 57132) << ~(_BYTE)v37) | v39;
        *float v38 = bswap32(v64);
        char v65 = v37 + 1;
        uint64_t v66 = (v37 + 1) >> 3;
        BOOL v67 = v37 >= 0x1F;
        unsigned int v37 = (v37 + 1) & 7;
        float v38 = (_DWORD *)((char *)v38 + v66);
        unsigned int v39 = v64 << (v65 & 0xF8);
        if (v67) {
          unsigned int v39 = 0;
        }
        if (*(unsigned char *)(v63 + 57132))
        {
          if (v61 > 5)
          {
            uint64_t v70 = 0;
            int v520 = (unsigned int **)v38;
            unsigned int v521 = v39;
            unsigned __int8 v522 = v37;
            do
            {
              *((unsigned char *)v533 + (unsigned __int16)word_1BBB93E20[v70]) = *(unsigned char *)(v8
                                                                                  + 1880 * v25
                                                                                  + 57244
                                                                                  + ((unint64_t)v62 << 6)
                                                                                  + v70);
              ++v70;
            }
            while (v70 != 64);
            int v68 = v533;
            unsigned int v69 = 64;
          }
          else
          {
            int v520 = (unsigned int **)v38;
            unsigned int v521 = v39;
            unsigned __int8 v522 = v37;
            int v68 = (unsigned char *)(v8 + 1880 * v25 + 16 * v61 + 57148);
            unsigned int v69 = 16;
          }
          sub_1BBB14540((uint64_t)&p_dst, v68, v69);
          float v38 = v520;
          unsigned int v39 = v521;
          unsigned int v37 = v522;
        }
        ++v61;
        ++v62;
      }
      while (v61 != 8);
    }
  }
  unsigned int v71 = *(_DWORD *)(v8 + 1880 * v25 + 57380) + 1;
  unsigned int v72 = __clz(v71);
  unsigned int v73 = (((v71 - (0x80000000 >> v72)) | (0x80000000 >> v72)) << (2 * v72 - v37 - 31)) | v39;
  *float v38 = bswap32(v73);
  unint64_t v74 = v37 - 2 * v72 + 63;
  int v75 = v74 & 7;
  int v76 = (_DWORD *)((char *)v38 + (v74 >> 3));
  unsigned int v77 = v73 << (v74 & 0xF8);
  if (v74 >= 0x20) {
    unsigned int v78 = 0;
  }
  else {
    unsigned int v78 = v77;
  }
  unsigned int v79 = *(unsigned __int8 *)(v8 + 1880 * v25 + 57384) + 1;
  unsigned int v80 = __clz(v79);
  unsigned int v81 = v78 | (((v79 - (0x80000000 >> v80)) | (0x80000000 >> v80)) << (2 * v80 - v75 - 31));
  *int v76 = bswap32(v81);
  unsigned int v82 = v75 - 2 * v80 + 63;
  int v83 = v82 & 7;
  uint64_t v84 = (_DWORD *)((char *)v76 + (v82 >> 3));
  unsigned int v85 = v81 << (v82 & 0xF8);
  if (*(unsigned char *)(v8 + 1880 * v25 + 57384) == 1)
  {
    unsigned int v91 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 57392) << (v83 ^ 0x1F)) | v85;
    *uint64_t v84 = bswap32(v91);
    unint64_t v92 = (v83 + 1);
    int v93 = v92 & 7;
    int v94 = (_DWORD *)((char *)v84 + (v92 >> 3));
    unsigned int v95 = v91 << (v92 & 8);
    int v96 = *(_DWORD *)(v8 + 1880 * v25 + 57396);
    unsigned int v97 = 2 * v96;
    if (v96 <= 0) {
      unsigned int v97 = 1 - 2 * v96;
    }
    unsigned int v98 = __clz(v97);
    unsigned int v99 = (((v97 - (0x80000000 >> v98)) | (0x80000000 >> v98)) << (2 * v98 - v93 - 31)) | v95;
    *int v94 = bswap32(v99);
    unint64_t v100 = v93 - 2 * v98 + 63;
    int v101 = v100 & 7;
    int v102 = (_DWORD *)((char *)v94 + (v100 >> 3));
    unsigned int v103 = v99 << (v100 & 0xF8);
    if (v100 >= 0x20) {
      unsigned int v103 = 0;
    }
    int v104 = *(_DWORD *)(v8 + 1880 * v25 + 57400);
    if (v104 <= 0) {
      unsigned int v105 = 1 - 2 * v104;
    }
    else {
      unsigned int v105 = 2 * v104;
    }
    unsigned int v106 = __clz(v105);
    unsigned int v107 = v103 | (((v105 - (0x80000000 >> v106)) | (0x80000000 >> v106)) << (2 * v106 - v101 - 31));
    *int v102 = bswap32(v107);
    unint64_t v108 = v101 - 2 * v106 + 63;
    int v109 = ((_BYTE)v101 - 2 * (_BYTE)v106 + 63) & 7;
    double v110 = (_DWORD *)((char *)v102 + (v108 >> 3));
    unsigned int v111 = v107 << (v108 & 0xF8);
    if (v108 >= 0x20) {
      unsigned int v111 = 0;
    }
    unsigned int v112 = *(_DWORD *)(v8 + 1880 * v25 + 57404) + 1;
    unsigned int v113 = __clz(v112);
    unsigned int v114 = v111 | (((v112 - (0x80000000 >> v113)) | (0x80000000 >> v113)) << (2 * v113 - v109 - 31));
    *double v110 = bswap32(v114);
    unsigned int v115 = v109 - 2 * v113 + 63;
    uint64_t v84 = (_DWORD *)((char *)v110 + (v115 >> 3));
    unsigned int v116 = v114 << (v115 & 0xF8);
    if (v115 >= 0x20) {
      unsigned int v85 = 0;
    }
    else {
      unsigned int v85 = v116;
    }
    int v83 = v115 & 7;
    if (*(_DWORD *)(v8 + 1880 * v25 + 57404))
    {
      unint64_t v117 = 0;
      do
      {
        int v118 = *(_DWORD *)(v8 + 1880 * v25 + 57408 + 4 * v117);
        if (v118 <= 0) {
          int v119 = -2 * v118;
        }
        else {
          int v119 = 2 * v118 - 1;
        }
        unsigned int v120 = v119 + 1;
        unsigned int v121 = __clz(v120);
        unsigned int v122 = (((v120 - (0x80000000 >> v121)) | (0x80000000 >> v121)) << (2 * v121 - v83 - 31)) | v85;
        *uint64_t v84 = bswap32(v122);
        unsigned int v123 = v83 - 2 * v121 + 63;
        uint64_t v84 = (_DWORD *)((char *)v84 + (v123 >> 3));
        unsigned int v85 = v122 << (v123 & 0xF8);
        if (v123 >= 0x20) {
          unsigned int v85 = 0;
        }
        ++v117;
        int v83 = v123 & 7;
      }
      while (v117 < *(unsigned int *)(v8 + 1880 * v25 + 57404));
    }
  }
  else if (!*(unsigned char *)(v8 + 1880 * v25 + 57384))
  {
    unsigned int v86 = *(_DWORD *)(v8 + 1880 * v25 + 57388) + 1;
    unsigned int v87 = __clz(v86);
    unsigned int v88 = (((v86 - (0x80000000 >> v87)) | (0x80000000 >> v87)) << (2 * v87 - v83 - 31)) | v85;
    *uint64_t v84 = bswap32(v88);
    unsigned int v89 = v83 - 2 * v87 + 63;
    int v83 = v89 & 7;
    uint64_t v84 = (_DWORD *)((char *)v84 + (v89 >> 3));
    unsigned int v90 = v88 << (v89 & 0xF8);
    if (v89 >= 0x20) {
      unsigned int v85 = 0;
    }
    else {
      unsigned int v85 = v90;
    }
  }
  unsigned int v124 = *(_DWORD *)(v8 + 1880 * v25 + 58428) + 1;
  unsigned int v125 = __clz(v124);
  unsigned int v126 = (((v124 - (0x80000000 >> v125)) | (0x80000000 >> v125)) << (2 * v125 - v83 - 31)) | v85;
  *uint64_t v84 = bswap32(v126);
  unint64_t v127 = v83 - 2 * v125 + 63;
  int v128 = v127 & 7;
  CFNumberRef v129 = (_DWORD *)((char *)v84 + (v127 >> 3));
  unsigned int v130 = v126 << (v127 & 0xF8);
  if (v127 >= 0x20) {
    unsigned int v131 = 0;
  }
  else {
    unsigned int v131 = v130;
  }
  unsigned int v132 = v131 | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58432) << (v128 ^ 0x1F));
  _DWORD *v129 = bswap32(v132);
  unint64_t v133 = (v128 + 1);
  int v134 = ((_BYTE)v128 + 1) & 7;
  BOOL v135 = (_DWORD *)((char *)v129 + (v133 >> 3));
  unsigned int v136 = v132 << (v133 & 8);
  LODWORD(v133) = *(_DWORD *)(v8 + 1880 * v25 + 58436) + 1;
  unsigned int v137 = __clz(v133);
  unsigned int v138 = v136 | (((v133 - (0x80000000 >> v137)) | (0x80000000 >> v137)) << (2 * v137 - v134 - 31));
  _DWORD *v135 = bswap32(v138);
  unint64_t v139 = v134 - 2 * v137 + 63;
  int v140 = ((_BYTE)v134 - 2 * (_BYTE)v137 + 63) & 7;
  uint64_t v141 = (_DWORD *)((char *)v135 + (v139 >> 3));
  unsigned int v142 = v138 << (v139 & 0xF8);
  if (v139 >= 0x20) {
    unsigned int v142 = 0;
  }
  unsigned int v143 = *(_DWORD *)(v8 + 1880 * v25 + 58440) + 1;
  unsigned int v144 = __clz(v143);
  unsigned int v145 = v142 | (((v143 - (0x80000000 >> v144)) | (0x80000000 >> v144)) << (2 * v144 - v140 - 31));
  *uint64_t v141 = bswap32(v145);
  unint64_t v146 = v140 - 2 * v144 + 63;
  int v147 = ((_BYTE)v140 - 2 * (_BYTE)v144 + 63) & 7;
  uint64_t v148 = (_DWORD *)((char *)v141 + (v146 >> 3));
  unsigned int v149 = v145 << (v146 & 0xF8);
  if (v146 >= 0x20) {
    unsigned int v149 = 0;
  }
  unsigned int v150 = v149 | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58444) << (v147 ^ 0x1F));
  *uint64_t v148 = bswap32(v150);
  unsigned int v151 = v147 + 1;
  int v152 = v151 & 7;
  int v153 = (_DWORD *)((char *)v148 + (v151 >> 3));
  unsigned int v154 = v150 << (v151 & 8);
  if (!*(unsigned char *)(v8 + 1880 * v25 + 58444))
  {
    unsigned int v155 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58445) << (v152 ^ 0x1F)) | v154;
    *int v153 = bswap32(v155);
    char v156 = v152 + 1;
    uint64_t v157 = (v152 + 1) >> 3;
    int v152 = (v152 + 1) & 7;
    int v153 = (_DWORD *)((char *)v153 + v157);
    unsigned int v154 = v155 << (v156 & 8);
  }
  unsigned int v158 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58446) << (v152 ^ 0x1F)) | v154;
  *int v153 = bswap32(v158);
  unint64_t v159 = (v152 + 1);
  unsigned int v160 = v159 & 7;
  int v161 = (_DWORD *)((char *)v153 + (v159 >> 3));
  LODWORD(v159) = (v158 << (v159 & 8)) | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58447) << (v159 & 7 ^ 0x1F));
  *int v161 = bswap32(v159);
  int v162 = ++v160 & 7;
  uint64_t v163 = (_DWORD *)((char *)v161 + (v160 >> 3));
  unsigned int v164 = v159 << (v160 & 8);
  if (*(unsigned char *)(v8 + 1880 * v25 + 58447))
  {
    unsigned int v165 = *(_DWORD *)(v8 + 1880 * v25 + 58448) + 1;
    unsigned int v166 = __clz(v165);
    unsigned int v167 = (((v165 - (0x80000000 >> v166)) | (0x80000000 >> v166)) << (2 * v166 - v162 - 31)) | v164;
    *uint64_t v163 = bswap32(v167);
    unint64_t v168 = v162 - 2 * v166 + 63;
    int v169 = v168 & 7;
    float v170 = (_DWORD *)((char *)v163 + (v168 >> 3));
    unsigned int v171 = v167 << (v168 & 0xF8);
    if (v168 >= 0x20) {
      unsigned int v172 = 0;
    }
    else {
      unsigned int v172 = v171;
    }
    unsigned int v173 = *(_DWORD *)(v8 + 1880 * v25 + 58452) + 1;
    unsigned int v174 = __clz(v173);
    unsigned int v175 = v172 | (((v173 - (0x80000000 >> v174)) | (0x80000000 >> v174)) << (2 * v174 - v169 - 31));
    *float v170 = bswap32(v175);
    unint64_t v176 = v169 - 2 * v174 + 63;
    int v177 = ((_BYTE)v169 - 2 * (_BYTE)v174 + 63) & 7;
    CFDataRef v178 = (_DWORD *)((char *)v170 + (v176 >> 3));
    unsigned int v179 = v175 << (v176 & 0xF8);
    if (v176 >= 0x20) {
      unsigned int v179 = 0;
    }
    unsigned int v180 = *(_DWORD *)(v8 + 1880 * v25 + 58456) + 1;
    unsigned int v181 = __clz(v180);
    unsigned int v182 = v179 | (((v180 - (0x80000000 >> v181)) | (0x80000000 >> v181)) << (2 * v181 - v177 - 31));
    *CFDataRef v178 = bswap32(v182);
    unint64_t v183 = v177 - 2 * v181 + 63;
    int v184 = ((_BYTE)v177 - 2 * (_BYTE)v181 + 63) & 7;
    CFTypeID v185 = (_DWORD *)((char *)v178 + (v183 >> 3));
    unsigned int v186 = v182 << (v183 & 0xF8);
    if (v183 >= 0x20) {
      unsigned int v186 = 0;
    }
    unsigned int v187 = *(_DWORD *)(v8 + 1880 * v25 + 58460) + 1;
    unsigned int v188 = __clz(v187);
    unsigned int v189 = v186 | (((v187 - (0x80000000 >> v188)) | (0x80000000 >> v188)) << (2 * v188 - v184 - 31));
    *CFTypeID v185 = bswap32(v189);
    unsigned int v190 = v184 - 2 * v188 + 63;
    int v162 = v190 & 7;
    uint64_t v163 = (_DWORD *)((char *)v185 + (v190 >> 3));
    unsigned int v191 = v189 << (v190 & 0xF8);
    if (v190 >= 0x20) {
      unsigned int v164 = 0;
    }
    else {
      unsigned int v164 = v191;
    }
  }
  uint64_t v192 = v8 + 1880 * v25;
  unsigned int v193 = (*(unsigned __int8 *)(v192 + 58464) << (v162 ^ 0x1F)) | v164;
  *uint64_t v163 = bswap32(v193);
  unsigned int v194 = v162 + 1;
  int v195 = v194 & 7;
  CFArrayRef v196 = (_DWORD *)((char *)v163 + (v194 >> 3));
  unsigned int v197 = v193 << (v194 & 8);
  if (*(unsigned char *)(v192 + 58464))
  {
    int v520 = (unsigned int **)v196;
    unsigned int v521 = v197;
    uint64_t v198 = v8 + 1880 * v25;
    unsigned int v199 = (*(unsigned __int8 *)(v198 + 58468) << (v195 ^ 0x1F)) | v197;
    *CFArrayRef v196 = bswap32(v199);
    unsigned int v200 = v195 + 1;
    int v201 = v200 & 7;
    int v202 = (_DWORD *)((char *)v196 + (v200 >> 3));
    unsigned int v203 = v199 << (v200 & 8);
    if (*(unsigned char *)(v198 + 58468))
    {
      uint64_t v204 = v8 + 1880 * v25;
      unsigned int v205 = (*(_DWORD *)(v204 + 58472) << (24 - v201)) | v203;
      *int v202 = bswap32(v205);
      unsigned int v203 = v205 << 8;
      if (*(_DWORD *)(v204 + 58472) == 255)
      {
        unsigned int v206 = (*(_DWORD *)(v8 + 1880 * v25 + 58476) << (16 - v201)) | v203;
        *(_DWORD *)((char *)v202 + 1) = bswap32(v206);
        int v207 = *(_DWORD *)(v8 + 1880 * v25 + 58480) << (16 - v201);
        *(_DWORD *)((char *)v202 + 3) = bswap32(v207 | (v206 << 16));
        int v202 = (_DWORD *)((char *)v202 + 5);
        unsigned int v203 = v207 << 16;
      }
      else
      {
        int v202 = (_DWORD *)((char *)v202 + 1);
      }
    }
    uint64_t v208 = v8 + 1880 * v25;
    unsigned int v209 = (*(unsigned __int8 *)(v208 + 58484) << (v201 ^ 0x1F)) | v203;
    *int v202 = bswap32(v209);
    if (*(unsigned char *)(v208 + 58484)) {
      return -666;
    }
    unint64_t v210 = (v201 + 1);
    unsigned int v211 = v209 << (v210 & 8);
    CFDictionaryRef v212 = (_DWORD *)((char *)v202 + (v210 >> 3));
    LODWORD(v210) = v210 & 7;
    uint64_t v213 = v8 + 1880 * v25;
    unsigned int v214 = (*(unsigned __int8 *)(v213 + 58486) << (v210 ^ 0x1F)) | v211;
    *CFDictionaryRef v212 = bswap32(v214);
    char v215 = v210 + 1;
    int v216 = (v210 + 1) & 7;
    CFDictionaryRef v217 = (_DWORD *)((char *)v212 + ((v210 + 1) >> 3));
    unsigned int v218 = v214 << (v215 & 8);
    if (*(unsigned char *)(v213 + 58486))
    {
      unsigned int v219 = (*(_DWORD *)(v8 + 1880 * v25 + 58488) << (29 - v216)) | v218;
      *CFDictionaryRef v217 = bswap32(v219);
      unint64_t v220 = (v216 + 3);
      int v221 = v220 & 7;
      CFNumberRef v222 = (_DWORD *)((char *)v217 + (v220 >> 3));
      LODWORD(v220) = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58492) << (v220 & 7 ^ 0x1F)) | (v219 << (v220 & 8));
      *CFNumberRef v222 = bswap32(v220);
      CFNumberRef v223 = (_DWORD *)((char *)v222 + ((unint64_t)(v221 + 1) >> 3));
      unsigned int v224 = (v220 << ((v221 + 1) & 8)) | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58493) << ((v221 + 1) & 7 ^ 0x1F));
      *CFNumberRef v223 = bswap32(v224);
      unsigned int v225 = (((_BYTE)v221 + 1) & 7) + 1;
      int v216 = v225 & 7;
      CFDictionaryRef v217 = (_DWORD *)((char *)v223 + (v225 >> 3));
      unsigned int v218 = v224 << (v225 & 8);
      if (*(unsigned char *)(v8 + 1880 * v25 + 58493))
      {
        unsigned int v226 = (*(_DWORD *)(v8 + 1880 * v25 + 58496) << (24 - v216)) | v218;
        *CFDictionaryRef v217 = bswap32(v226);
        unsigned int v227 = (*(_DWORD *)(v8 + 1880 * v25 + 58500) << (24 - v216)) | (v226 << 8);
        *(_DWORD *)((char *)v217 + 1) = bswap32(v227);
        unsigned int v228 = (*(_DWORD *)(v8 + 1880 * v25 + 58504) << (24 - v216)) | (v227 << 8);
        *(_DWORD *)((char *)v217 + 2) = bswap32(v228);
        CFDictionaryRef v217 = (_DWORD *)((char *)v217 + 3);
        unsigned int v218 = v228 << 8;
      }
    }
    uint64_t v229 = v8 + 1880 * v25;
    unsigned int v230 = (*(unsigned __int8 *)(v229 + 58508) << (v216 ^ 0x1F)) | v218;
    *CFDictionaryRef v217 = bswap32(v230);
    char v231 = v216 + 1;
    uint64_t v232 = (v216 + 1) >> 3;
    int v233 = (v216 + 1) & 7;
    CFNumberRef v234 = (_DWORD *)((char *)v217 + v232);
    unsigned int v235 = v230 << (v231 & 8);
    if (*(unsigned char *)(v229 + 58508))
    {
      unsigned int v236 = *(_DWORD *)(v8 + 1880 * v25 + 58512) + 1;
      unsigned int v237 = __clz(v236);
      unsigned int v238 = (((v236 - (0x80000000 >> v237)) | (0x80000000 >> v237)) << (2 * v237 - v233 - 31)) | v235;
      *CFNumberRef v234 = bswap32(v238);
      unint64_t v239 = v233 - 2 * v237 + 63;
      int v240 = v239 & 7;
      CFTypeID v241 = (_DWORD *)((char *)v234 + (v239 >> 3));
      unsigned int v242 = v238 << (v239 & 0xF8);
      unsigned int v243 = v239 >= 0x20 ? 0 : v242;
      unsigned int v244 = *(_DWORD *)(v8 + 1880 * v25 + 58516) + 1;
      unsigned int v245 = __clz(v244);
      unsigned int v246 = v243 | (((v244 - (0x80000000 >> v245)) | (0x80000000 >> v245)) << (2 * v245 - v240 - 31));
      _DWORD *v241 = bswap32(v246);
      unsigned int v247 = v240 - 2 * v245 + 63;
      int v233 = v247 & 7;
      CFNumberRef v234 = (_DWORD *)((char *)v241 + (v247 >> 3));
      unsigned int v235 = v246 << (v247 & 0xF8);
      if (v247 >= 0x20) {
        unsigned int v235 = 0;
      }
    }
    uint64_t v248 = v8 + 1880 * v25;
    unsigned int v249 = (*(unsigned __int8 *)(v248 + 58520) << (v233 ^ 0x1F)) | v235;
    *CFNumberRef v234 = bswap32(v249);
    if (*(unsigned char *)(v248 + 58520)) {
      return -666;
    }
    unint64_t v250 = (v233 + 1);
    unsigned int v251 = v249 << (v250 & 8);
    CFNumberRef v252 = (_DWORD *)((char *)v234 + (v250 >> 3));
    LODWORD(v250) = v250 & 7;
    CFTypeID v253 = (unsigned char *)(v8 + 1880 * v25 + 58533);
    unsigned int v254 = (*v253 << (v250 ^ 0x1F)) | v251;
    *CFNumberRef v252 = bswap32(v254);
    char v255 = v250 + 1;
    int v256 = (v250 + 1) & 7;
    CFNumberRef v257 = (_DWORD *)((char *)v252 + ((v250 + 1) >> 3));
    unsigned int v258 = v254 << (v255 & 8);
    if (*v253)
    {
      unsigned int v259 = *(_DWORD *)(v8 + 1880 * v25 + 58564) + 1;
      unsigned int v260 = __clz(v259);
      unsigned int v261 = (((v259 - (0x80000000 >> v260)) | (0x80000000 >> v260)) << (2 * v260 - v256 - 31)) | v258;
      *CFNumberRef v257 = bswap32(v261);
      unint64_t v262 = v256 - 2 * v260 + 63;
      int v263 = v262 & 7;
      CFNumberRef v264 = (_DWORD *)((char *)v257 + (v262 >> 3));
      unsigned int v265 = v261 << (v262 & 0xF8);
      if (v262 >= 0x20) {
        unsigned int v266 = 0;
      }
      else {
        unsigned int v266 = v265;
      }
      unsigned int v267 = v266 | (*(_DWORD *)(v8 + 1880 * v25 + 58568) << (28 - v263));
      *CFNumberRef v264 = bswap32(v267);
      unint64_t v268 = (v263 + 4);
      int v269 = v268 & 7;
      int v270 = (_DWORD *)((char *)v264 + (v268 >> 3));
      unsigned int v271 = (v267 << (v268 & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58572) << (28 - (v268 & 7)));
      *int v270 = bswap32(v271);
      if (*(_DWORD *)(v8 + 1880 * v25 + 58564)) {
        return -666;
      }
      char v272 = v269 + 4;
      uint64_t v273 = (v269 + 4) >> 3;
      int v274 = (v269 + 4) & 7;
      unint64_t v275 = (_DWORD *)((char *)v270 + v273);
      unsigned int v276 = v271 << (v272 & 8);
      int v277 = *(_DWORD *)(v8 + 1880 * v25 + 58576);
      unsigned int v278 = v277 + 1;
      if (v277 == -1)
      {
        unsigned int v279 = 0;
        unsigned int v280 = bswap32(v276);
        *unint64_t v275 = v280;
        *(unsigned int *)((char *)v275 + 2) = HIWORD(v280);
        unsigned int v281 = (1 << (v274 ^ 0x1F)) >> 24;
        v275[1] = v281;
        unint64_t v282 = (v274 + 1);
        unsigned int v283 = v281 >> (v282 & 8);
        float v284 = (unsigned int *)((char *)v275 + (v282 >> 3) + 4);
        int v285 = v282 & 7;
        *float v284 = v283;
        *(unsigned int *)((char *)v284 + 2) = 0;
        BOOL v286 = v284 + 1;
      }
      else
      {
        unsigned int v287 = __clz(v278);
        unsigned int v288 = v287 ^ 0x1F;
        unsigned int v289 = (v287 ^ 0x1F) >> 1;
        if ((v287 ^ 0x1F) >= 2)
        {
          *unint64_t v275 = bswap32(v276);
          char v290 = v289 + v274;
          uint64_t v291 = (v289 + v274) >> 3;
          int v274 = (v289 + v274) & 7;
          unint64_t v275 = (unsigned int *)((char *)v275 + v291);
          v276 <<= v290 & 0x18;
        }
        unsigned int v292 = v288 - (v288 >> 1);
        if (v288 != v289)
        {
          *unint64_t v275 = bswap32(v276);
          unsigned int v293 = v274 + v292;
          int v274 = (v274 + v292) & 7;
          unint64_t v275 = (unsigned int *)((char *)v275 + (v293 >> 3));
          v276 <<= v293 & 0xF8;
          if (v293 >= 0x20) {
            unsigned int v276 = 0;
          }
        }
        unsigned int v294 = v276 | (0x80000000 >> v274);
        *unint64_t v275 = bswap32(v294);
        char v295 = v274 + 1;
        uint64_t v296 = (v274 + 1) >> 3;
        int v285 = (v274 + 1) & 7;
        BOOL v286 = (unsigned int *)((char *)v275 + v296);
        unsigned int v279 = v294 << (v295 & 8);
        unsigned int v297 = v278 - (0x80000000 >> v287);
        if (v288 >= 2)
        {
          unsigned int v298 = v285 + v289;
          unsigned int v299 = (v297 >> v292 << -(char)(v285 + v289)) | v279;
          *BOOL v286 = bswap32(v299);
          int v285 = (v285 + v289) & 7;
          BOOL v286 = (unsigned int *)((char *)v286 + (v298 >> 3));
          unsigned int v279 = v299 << (v298 & 0x18);
        }
        if (v288 != v289)
        {
          unsigned int v300 = v285 + v292;
          unsigned int v301 = (v297 << -(char)(v285 + v292)) | v279;
          *BOOL v286 = bswap32(v301);
          int v285 = (v285 + v292) & 7;
          BOOL v286 = (unsigned int *)((char *)v286 + (v300 >> 3));
          unsigned int v279 = v301 << (v300 & 0xF8);
          if (v300 >= 0x20) {
            unsigned int v279 = 0;
          }
        }
      }
      int v302 = *(_DWORD *)(v8 + 1880 * v25 + 58704);
      unsigned int v303 = v302 + 1;
      if (v302 == -1)
      {
        unsigned int v304 = 0;
        unsigned int v305 = bswap32(v279);
        *BOOL v286 = v305;
        *(unsigned int *)((char *)v286 + 2) = HIWORD(v305);
        unsigned int v306 = bswap32(1 << (v285 ^ 0x1F));
        v286[1] = v306;
        unint64_t v307 = (v285 + 1);
        unsigned int v308 = v306 >> (v307 & 8);
        uint64_t v309 = (unsigned int *)((char *)v286 + (v307 >> 3) + 4);
        int v310 = v307 & 7;
        *uint64_t v309 = v308;
        *(unsigned int *)((char *)v309 + 2) = 0;
        int v311 = v309 + 1;
      }
      else
      {
        unsigned int v312 = __clz(v303);
        unsigned int v313 = v312 ^ 0x1F;
        unsigned int v314 = (v312 ^ 0x1F) >> 1;
        if ((v312 ^ 0x1F) >= 2)
        {
          *BOOL v286 = bswap32(v279);
          char v315 = v314 + v285;
          uint64_t v316 = (v314 + v285) >> 3;
          int v285 = (v314 + v285) & 7;
          BOOL v286 = (unsigned int *)((char *)v286 + v316);
          v279 <<= v315 & 0x38;
        }
        unsigned int v317 = v313 - (v313 >> 1);
        if (v313 != v314)
        {
          *BOOL v286 = bswap32(v279);
          unsigned int v318 = v285 + v317;
          int v285 = (v285 + v317) & 7;
          BOOL v286 = (unsigned int *)((char *)v286 + (v318 >> 3));
          v279 <<= v318 & 0xF8;
          if (v318 >= 0x20) {
            unsigned int v279 = 0;
          }
        }
        unsigned int v319 = v279 | (0x80000000 >> v285);
        *BOOL v286 = bswap32(v319);
        char v320 = v285 + 1;
        uint64_t v321 = (v285 + 1) >> 3;
        int v310 = (v285 + 1) & 7;
        int v311 = (unsigned int *)((char *)v286 + v321);
        unsigned int v304 = v319 << (v320 & 8);
        unsigned int v322 = v303 - (0x80000000 >> v312);
        if (v313 >= 2)
        {
          unsigned int v323 = v310 + v314;
          unsigned int v324 = (v322 >> v317 << -(char)(v310 + v314)) | v304;
          *int v311 = bswap32(v324);
          int v310 = (v310 + v314) & 7;
          int v311 = (_DWORD *)((char *)v311 + (v323 >> 3));
          unsigned int v304 = v324 << (v323 & 0x18);
        }
        if (v313 != v314)
        {
          unsigned int v325 = v310 + v317;
          unsigned int v326 = (v322 << -(char)(v310 + v317)) | v304;
          *int v311 = bswap32(v326);
          int v310 = (v310 + v317) & 7;
          int v311 = (_DWORD *)((char *)v311 + (v325 >> 3));
          unsigned int v327 = v326 << (v325 & 0xF8);
          if (v325 >= 0x20) {
            unsigned int v304 = 0;
          }
          else {
            unsigned int v304 = v327;
          }
        }
      }
      unsigned int v328 = (*(_DWORD *)(v8 + 1880 * v25 + 58832) << (v310 ^ 0x1F)) | v304;
      *int v311 = bswap32(v328);
      unint64_t v329 = (v310 + 1);
      int v330 = v329 & 7;
      uint64_t v331 = (_DWORD *)((char *)v311 + (v329 >> 3));
      LODWORD(v329) = (v328 << (v329 & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58960) << (27 - (v329 & 7)));
      _DWORD *v331 = bswap32(v329);
      int v332 = (_DWORD *)((char *)v331 + ((unint64_t)(v330 + 5) >> 3));
      LODWORD(v329) = (v329 << ((v330 + 5) & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58964) << (27 - ((v330 + 5) & 7)));
      *int v332 = bswap32(v329);
      unint64_t v333 = (((_BYTE)v330 + 5) & 7u) + 5;
      int v334 = (_DWORD *)((char *)v332 + (v333 >> 3));
      LODWORD(v329) = (v329 << (v333 & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58968) << (27 - (v333 & 7)));
      *int v334 = bswap32(v329);
      uint64_t v335 = (_DWORD *)((char *)v334 + ((unint64_t)((((((_BYTE)v330 + 5) & 7) + 5) & 7u) + 5) >> 3));
      unsigned int v336 = (v329 << ((((((v330 + 5) & 7) + 5) & 7) + 5) & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58972) << (27 - ((((((v330 + 5) & 7) + 5) & 7) + 5) & 7)));
      *uint64_t v335 = bswap32(v336);
      LODWORD(v333) = (((((((_BYTE)v330 + 5) & 7) + 5) & 7) + 5) & 7) + 5;
      int v256 = v333 & 7;
      CFNumberRef v257 = (_DWORD *)((char *)v335 + (v333 >> 3));
      unsigned int v258 = v336 << (v333 & 8);
    }
    uint64_t v337 = v8 + 1880 * v25;
    unsigned int v338 = (*(unsigned __int8 *)(v337 + 58534) << (v256 ^ 0x1F)) | v258;
    *CFNumberRef v257 = bswap32(v338);
    if (*(unsigned char *)(v337 + 58534)) {
      return -666;
    }
    char v339 = v256 + 1;
    uint64_t v340 = (v256 + 1) >> 3;
    int v341 = (v256 + 1) & 7;
    uint64_t v342 = (_DWORD *)((char *)v257 + v340);
    unsigned int v343 = v338 << (v339 & 8);
    if (*v253)
    {
      unsigned int v344 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58535) << (v341 ^ 0x1F)) | v343;
      *uint64_t v342 = bswap32(v344);
      char v345 = v341 + 1;
      uint64_t v346 = (v341 + 1) >> 3;
      int v341 = (v341 + 1) & 7;
      uint64_t v342 = (_DWORD *)((char *)v342 + v346);
      unsigned int v343 = v344 << (v345 & 8);
    }
    unsigned int v347 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58536) << (v341 ^ 0x1F)) | v343;
    *uint64_t v342 = bswap32(v347);
    unint64_t v348 = (v341 + 1);
    char v349 = (_DWORD *)((char *)v342 + (v348 >> 3));
    unsigned int v350 = (v347 << (v348 & 8)) | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58537) << (v348 & 7 ^ 0x1F));
    _DWORD *v349 = bswap32(v350);
    unsigned int v351 = (v348 & 7) + 1;
    int v195 = v351 & 7;
    CFArrayRef v196 = (_DWORD *)((char *)v349 + (v351 >> 3));
    unsigned int v197 = v350 << (v351 & 8);
    if (*(unsigned char *)(v8 + 1880 * v25 + 58537))
    {
      unsigned int v352 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58538) << (v195 ^ 0x1F)) | v197;
      *CFArrayRef v196 = bswap32(v352);
      unint64_t v353 = (v195 + 1);
      int v354 = v353 & 7;
      uint64_t v355 = (_DWORD *)((char *)v196 + (v353 >> 3));
      LODWORD(v353) = v352 << (v353 & 8);
      unsigned int v356 = *(_DWORD *)(v8 + 1880 * v25 + 58540) + 1;
      unsigned int v357 = __clz(v356);
      LODWORD(v353) = (((v356 - (0x80000000 >> v357)) | (0x80000000 >> v357)) << (2 * v357 - v354 - 31)) | v353;
      *uint64_t v355 = bswap32(v353);
      unint64_t v358 = v354 - 2 * v357 + 63;
      int v359 = ((_BYTE)v354 - 2 * (_BYTE)v357 + 63) & 7;
      unint64_t v360 = (_DWORD *)((char *)v355 + (v358 >> 3));
      int v361 = v353 << (v358 & 0xF8);
      if (v358 >= 0x20) {
        int v361 = 0;
      }
      unsigned int v362 = *(_DWORD *)(v8 + 1880 * v25 + 58544) + 1;
      unsigned int v363 = __clz(v362);
      unsigned int v364 = v361 | (((v362 - (0x80000000 >> v363)) | (0x80000000 >> v363)) << (2 * v363 - v359 - 31));
      _DWORD *v360 = bswap32(v364);
      unint64_t v365 = v359 - 2 * v363 + 63;
      int v366 = ((_BYTE)v359 - 2 * (_BYTE)v363 + 63) & 7;
      int v367 = (_DWORD *)((char *)v360 + (v365 >> 3));
      unsigned int v368 = v364 << (v365 & 0xF8);
      if (v365 >= 0x20) {
        unsigned int v368 = 0;
      }
      unsigned int v369 = *(_DWORD *)(v8 + 1880 * v25 + 58548) + 1;
      unsigned int v370 = __clz(v369);
      unsigned int v371 = v368 | (((v369 - (0x80000000 >> v370)) | (0x80000000 >> v370)) << (2 * v370 - v366 - 31));
      *int v367 = bswap32(v371);
      unint64_t v372 = v366 - 2 * v370 + 63;
      int v373 = ((_BYTE)v366 - 2 * (_BYTE)v370 + 63) & 7;
      int v374 = (_DWORD *)((char *)v367 + (v372 >> 3));
      unsigned int v375 = v371 << (v372 & 0xF8);
      if (v372 >= 0x20) {
        unsigned int v375 = 0;
      }
      unsigned int v376 = *(_DWORD *)(v8 + 1880 * v25 + 58552) + 1;
      unsigned int v377 = __clz(v376);
      unsigned int v378 = v375 | (((v376 - (0x80000000 >> v377)) | (0x80000000 >> v377)) << (2 * v377 - v373 - 31));
      _DWORD *v374 = bswap32(v378);
      unint64_t v379 = v373 - 2 * v377 + 63;
      int v380 = ((_BYTE)v373 - 2 * (_BYTE)v377 + 63) & 7;
      uint64_t v381 = (_DWORD *)((char *)v374 + (v379 >> 3));
      unsigned int v382 = v378 << (v379 & 0xF8);
      if (v379 >= 0x20) {
        unsigned int v382 = 0;
      }
      unsigned int v383 = *(_DWORD *)(v8 + 1880 * v25 + 58556) + 1;
      unsigned int v384 = __clz(v383);
      unsigned int v385 = v382 | (((v383 - (0x80000000 >> v384)) | (0x80000000 >> v384)) << (2 * v384 - v380 - 31));
      *uint64_t v381 = bswap32(v385);
      unint64_t v386 = v380 - 2 * v384 + 63;
      int v387 = ((_BYTE)v380 - 2 * (_BYTE)v384 + 63) & 7;
      uint64_t v388 = (_DWORD *)((char *)v381 + (v386 >> 3));
      unsigned int v389 = v385 << (v386 & 0xF8);
      if (v386 >= 0x20) {
        unsigned int v389 = 0;
      }
      unsigned int v390 = *(_DWORD *)(v8 + 1880 * v25 + 58560) + 1;
      unsigned int v391 = __clz(v390);
      unsigned int v392 = v389 | (((v390 - (0x80000000 >> v391)) | (0x80000000 >> v391)) << (2 * v391 - v387 - 31));
      *uint64_t v388 = bswap32(v392);
      unsigned int v393 = v387 - 2 * v391 + 63;
      int v195 = v393 & 7;
      CFArrayRef v196 = (_DWORD *)((char *)v388 + (v393 >> 3));
      unsigned int v394 = v392 << (v393 & 0xF8);
      if (v393 >= 0x20) {
        unsigned int v197 = 0;
      }
      else {
        unsigned int v197 = v394;
      }
    }
    int v520 = (unsigned int **)v196;
    unsigned int v521 = v197;
    unsigned __int8 v522 = v195;
  }
  *CFArrayRef v196 = bswap32(v197 | (0x80000000 >> v195));
  unsigned int v395 = v195 + 1;
  long long v396 = (char *)v196 + (v395 >> 3);
  if ((v395 & 7) != 0)
  {
    *v396 &= byte_1BBB8A4AC[v395 & 7];
    LODWORD(v396) = v396 + 1;
  }
  int v397 = sub_1BBB4ACBC(&__dst, (int)v396 - (int)p_dst, (uint64_t)v531);
  __int16 v22 = v397;
  *(_DWORD *)(v8 + 208128) = v397;
LABEL_158:
  uint64_t v398 = *(void *)(v6 + 16);
  uint64_t v399 = *(void *)(v398 + 5176);
  if (*(unsigned char *)(v399 + 205935) != 1 && (*(unsigned char *)(v399 + 205935) || *(unsigned char *)(v399 + 205933)))
  {
    __int16 v400 = 0;
    goto LABEL_202;
  }
  *(unsigned char *)(v399 + 119519) = *(unsigned char *)(v398 + 400);
  uint64_t v401 = *(void *)(v398 + 5176);
  unsigned int v402 = *(unsigned __int8 *)(v401 + 205792);
  uint64_t v403 = v401 + 336 * *(unsigned __int8 *)(v401 + 205792) + 119432;
  int v404 = *(_DWORD *)(v401 + 1880 * *(unsigned __int8 *)(v401 + 119152) + 57108);
  LODWORD(__dst) = 40;
  unsigned int v405 = *(_DWORD *)v403 + 1;
  unsigned int v406 = __clz(v405);
  unsigned int v407 = ((v405 - (0x80000000 >> v406)) | (0x80000000 >> v406)) << (2 * v406 - 31);
  *(_DWORD *)((char *)&__dst + 1) = bswap32(v407);
  unint64_t v408 = 63 - 2 * v406;
  int v409 = v408 & 7;
  uint64_t v410 = (_DWORD *)((char *)&__dst + (v408 >> 3) + 1);
  unsigned int v411 = v407 << (v408 & 0xF8);
  if (v408 >= 0x20) {
    unsigned int v411 = 0;
  }
  unsigned int v412 = *(_DWORD *)(v403 + 4) + 1;
  unsigned int v413 = __clz(v412);
  unsigned int v414 = v411 | (((v412 - (0x80000000 >> v413)) | (0x80000000 >> v413)) << (2 * v413 - v409 - 31));
  *uint64_t v410 = bswap32(v414);
  unint64_t v415 = v409 - 2 * v413 + 63;
  int v416 = ((_BYTE)v409 - 2 * (_BYTE)v413 + 63) & 6;
  uint64_t v417 = (_DWORD *)((char *)v410 + (v415 >> 3));
  unsigned int v418 = v414 << (v415 & 0xF8);
  if (v415 >= 0x20) {
    unsigned int v418 = 0;
  }
  unsigned int v419 = v418 | (*(unsigned __int8 *)(v403 + 8) << (v416 ^ 0x1F)) | (*(unsigned __int8 *)(v403 + 9) << (v416 ^ 0x1E));
  _DWORD *v417 = bswap32(v419);
  unint64_t v420 = (v416 + 2);
  int v421 = v420 & 6;
  uint64_t v422 = (_DWORD *)((char *)v417 + (v420 >> 3));
  unsigned int v423 = v419 << (v420 & 8);
  LODWORD(v420) = *(_DWORD *)(v403 + 12);
  unsigned int v424 = __clz(v420 + 1);
  unsigned int v425 = v423 | (((v420 + 1 - (0x80000000 >> v424)) | (0x80000000 >> v424)) << (2 * v424 - v421 - 31));
  _DWORD *v422 = bswap32(v425);
  if (v420) {
    return -666;
  }
  unint64_t v426 = v421 - 2 * v424 + 63;
  unsigned int v427 = v425 << ((v421 - 2 * v424 + 63) & 0xF8);
  if (v426 >= 0x20) {
    unsigned int v427 = 0;
  }
  char v428 = (_DWORD *)((char *)v422 + (v426 >> 3));
  int v429 = v426 & 7;
  unsigned int v430 = *(_DWORD *)(v401 + 336 * v402 + 119488) + 1;
  unsigned int v431 = __clz(v430);
  unsigned int v432 = (((v430 - (0x80000000 >> v431)) | (0x80000000 >> v431)) << (2 * v431 - v429 - 31)) | v427;
  *char v428 = bswap32(v432);
  unint64_t v433 = v429 - 2 * v431 + 63;
  int v434 = v433 & 7;
  uint64_t v435 = (_DWORD *)((char *)v428 + (v433 >> 3));
  unsigned int v436 = v432 << (v433 & 0xF8);
  if (v433 >= 0x20) {
    unsigned int v437 = 0;
  }
  else {
    unsigned int v437 = v436;
  }
  unsigned int v438 = *(_DWORD *)(v401 + 336 * v402 + 119492) + 1;
  unsigned int v439 = __clz(v438);
  unsigned int v440 = v437 | (((v438 - (0x80000000 >> v439)) | (0x80000000 >> v439)) << (2 * v439 - v434 - 31));
  *uint64_t v435 = bswap32(v440);
  unint64_t v441 = v434 - 2 * v439 + 63;
  int v442 = ((_BYTE)v434 - 2 * (_BYTE)v439 + 63) & 7;
  char v443 = (_DWORD *)((char *)v435 + (v441 >> 3));
  unsigned int v444 = v440 << (v441 & 0xF8);
  if (v441 >= 0x20) {
    unsigned int v444 = 0;
  }
  unsigned int v445 = v444 | (*(unsigned __int8 *)(v401 + 336 * v402 + 119496) << (v442 ^ 0x1F));
  *char v443 = bswap32(v445);
  int v446 = (_DWORD *)((char *)v443 + ((unint64_t)(v442 + 1) >> 3));
  unsigned int v447 = (v445 << ((v442 + 1) & 8)) | (*(_DWORD *)(v401 + 336 * v402 + 119500) << (30 - ((v442 + 1) & 7)));
  _DWORD *v446 = bswap32(v447);
  unint64_t v448 = (((_BYTE)v442 + 1) & 7u) + 2;
  int v449 = ((((_BYTE)v442 + 1) & 7) + 2) & 7;
  int v450 = (_DWORD *)((char *)v446 + (v448 >> 3));
  unsigned int v451 = v447 << (v448 & 8);
  int v452 = *(_DWORD *)(v401 + 336 * v402 + 119504);
  if (v452 <= 0) {
    unsigned int v453 = 1 - 2 * v452;
  }
  else {
    unsigned int v453 = 2 * v452;
  }
  unsigned int v454 = __clz(v453);
  unsigned int v455 = v451 | (((v453 - (0x80000000 >> v454)) | (0x80000000 >> v454)) << (2 * v454 - v449 - 31));
  *int v450 = bswap32(v455);
  unint64_t v456 = v449 - 2 * v454 + 63;
  int v457 = v456 & 7;
  float v458 = (_DWORD *)((char *)v450 + (v456 >> 3));
  unsigned int v459 = v455 << (v456 & 0xF8);
  if (v456 >= 0x20) {
    unsigned int v459 = 0;
  }
  int v460 = *(_DWORD *)(v401 + 336 * v402 + 119508);
  if (v460 <= 0) {
    unsigned int v461 = 1 - 2 * v460;
  }
  else {
    unsigned int v461 = 2 * v460;
  }
  unsigned int v462 = __clz(v461);
  unsigned int v463 = v459 | (((v461 - (0x80000000 >> v462)) | (0x80000000 >> v462)) << (2 * v462 - v457 - 31));
  *float v458 = bswap32(v463);
  unint64_t v464 = v457 - 2 * v462 + 63;
  int v465 = ((_BYTE)v457 - 2 * (_BYTE)v462 + 63) & 7;
  long long v466 = (_DWORD *)((char *)v458 + (v464 >> 3));
  unsigned int v467 = v463 << (v464 & 0xF8);
  if (v464 >= 0x20) {
    unsigned int v467 = 0;
  }
  int v468 = *(_DWORD *)(v401 + 336 * v402 + 119512);
  if (v468 <= 0) {
    unsigned int v469 = 1 - 2 * v468;
  }
  else {
    unsigned int v469 = 2 * v468;
  }
  unsigned int v470 = __clz(v469);
  unsigned int v471 = v467 | (((v469 - (0x80000000 >> v470)) | (0x80000000 >> v470)) << (2 * v470 - v465 - 31));
  _DWORD *v466 = bswap32(v471);
  unint64_t v472 = v465 - 2 * v470 + 63;
  int v473 = ((_BYTE)v465 - 2 * (_BYTE)v470 + 63) & 7;
  int v474 = (_DWORD *)((char *)v466 + (v472 >> 3));
  unsigned int v475 = v471 << ((v465 - 2 * v470 + 63) & 0xF8);
  if (v472 >= 0x20) {
    unsigned int v475 = 0;
  }
  unsigned int v476 = v475 | (*(unsigned __int8 *)(v401 + 336 * v402 + 119516) << (v473 ^ 0x1F));
  *int v474 = bswap32(v476);
  int v477 = (_DWORD *)((char *)v474 + ((unint64_t)(v473 + 1) >> 3));
  unsigned int v478 = (v476 << ((v473 + 1) & 8)) | (*(unsigned __int8 *)(v401 + 336 * v402 + 119517) << ((v473 + 1) & 7 ^ 0x1F));
  *int v477 = bswap32(v478);
  unint64_t v479 = (((_BYTE)v473 + 1) & 7u) + 1;
  char v480 = (_DWORD *)((char *)v477 + (v479 >> 3));
  LODWORD(v479) = (v478 << (v479 & 8)) | (*(unsigned __int8 *)(v401 + 336 * v402 + 119518) << (v479 & 7 ^ 0x1F));
  *char v480 = bswap32(v479);
  unsigned int v481 = (((((_BYTE)v473 + 1) & 7) + 1) & 7) + 1;
  int v482 = v481 & 7;
  char v483 = (_DWORD *)((char *)v480 + (v481 >> 3));
  unsigned int v484 = v479 << (v481 & 8);
  unsigned int v485 = v404 - 100;
  if (v485 <= 0x2C && ((1 << v485) & 0x100000400403) != 0)
  {
    unsigned int v486 = (*(unsigned __int8 *)(v401 + 336 * v402 + 119519) << (v482 ^ 0x1F)) | v484;
    *char v483 = bswap32(v486);
    char v487 = (_DWORD *)((char *)v483 + ((unint64_t)(v482 + 1) >> 3));
    unsigned int v488 = (v486 << ((v482 + 1) & 8)) | (*(unsigned __int8 *)(v401 + 336 * v402 + 119520) << ((v482 + 1) & 7 ^ 0x1F));
    *char v487 = bswap32(v488);
    if (*(unsigned char *)(v401 + 336 * v402 + 119520)) {
      exit(1);
    }
    unsigned int v489 = v488 << ((((v482 + 1) & 7) + 1) & 8);
    int v490 = (_DWORD *)((char *)v487 + ((unint64_t)((((_BYTE)v482 + 1) & 7u) + 1) >> 3));
    int v491 = ((((_BYTE)v482 + 1) & 7) + 1) & 7;
    int v492 = *(char *)(v401 + 336 * v402 + 119529);
    if (v492 <= 0) {
      unsigned int v493 = 1 - 2 * v492;
    }
    else {
      unsigned int v493 = 2 * v492;
    }
    unsigned int v494 = __clz(v493);
    unsigned int v495 = (((v493 - (0x80000000 >> v494)) | (0x80000000 >> v494)) << (2 * v494 - v491 - 31)) | v489;
    *int v490 = bswap32(v495);
    unsigned int v496 = v491 - 2 * v494 + 63;
    int v482 = v496 & 7;
    char v483 = (_DWORD *)((char *)v490 + (v496 >> 3));
    unsigned int v497 = v495 << (v496 & 0xF8);
    if (v496 >= 0x20) {
      unsigned int v484 = 0;
    }
    else {
      unsigned int v484 = v497;
    }
  }
  *char v483 = bswap32((1 << (v482 ^ 0x1F)) | v484);
  char v498 = (char *)v483 + ((v482 + 1) >> 3);
  uint64_t v499 = (v482 + 1) & 7;
  if (v499)
  {
    *v498 &= byte_1BBB8A4AC[v499];
    LODWORD(v498) = v498 + 1;
  }
  __int16 v400 = sub_1BBB4ACBC(&__dst, v498 - &__dst, (uint64_t)v530);
  uint64_t v399 = *(void *)(*(void *)(v6 + 16) + 5176);
LABEL_202:
  uint64_t v500 = *(void *)(v399 + 208120);
  if (v500 && (int v501 = *(_DWORD *)(v500 + 216), (v501 - 1) <= 0xBB6))
  {
    char v502 = (unsigned char *)(v399 + 205935);
    memcpy(&__dst, *(const void **)(v500 + 208), *(unsigned int *)(v500 + 216));
    v533[0] = 0;
    uint64_t v503 = *(unsigned int *)(v6 + 5004);
    if (*v502)
    {
      __int16 v504 = sub_1BBAF0FE8((uint64_t)v531, v22, (uint64_t)v530, v400, (uint64_t)&__dst, (__int16)v501, v503, (uint64_t)v532, v533);
      goto LABEL_208;
    }
    uint64_t v505 = v22;
    uint64_t v506 = (__int16)v501;
    char v507 = &__dst;
  }
  else
  {
    v533[0] = 0;
    uint64_t v503 = *(unsigned int *)(v6 + 5004);
    uint64_t v505 = v22;
    uint64_t v506 = v400;
    char v507 = (unsigned int **)v530;
  }
  __int16 v504 = sub_1BBAF0FE8((uint64_t)v531, v505, (uint64_t)v507, v506, 0, 0, v503, (uint64_t)v532, v533);
LABEL_208:
  __int16 VideoFormatDescription = v504;
  if (!v504)
  {
    CFAllocatorRef v508 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDataRef v509 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v532, v533[0]);
    if (!v509) {
      return (__int16)FigSignalErrorAt();
    }
    CFDataRef v510 = v509;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v508, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      __int16 VideoFormatDescription = FigSignalErrorAt();
      long long v517 = v510;
      goto LABEL_222;
    }
    char v512 = Mutable;
    long long v513 = CFDictionaryCreateMutable(v508, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v513)
    {
      if (*(_DWORD *)(v6 + 5144) * *(_DWORD *)(v6 + 5140) > 307200
        || (int v514 = *(_DWORD *)(v6 + 5048), v514 != 8) && v514 != 6)
      {
        CFDataRef v516 = 0;
        goto LABEL_218;
      }
      CFDataRef v515 = CFDataCreate(v508, byte_1BBB84020, 20);
      if (v515)
      {
        CFDataRef v516 = v515;
        CFDictionaryAddValue(v512, @"uuid", v515);
LABEL_218:
        CFDictionaryAddValue(v512, @"avcC", v510);
        CFDictionaryAddValue(v513, (const void *)*MEMORY[0x1E4F1EE20], v512);
        CFDictionaryAddValue(v513, (const void *)*MEMORY[0x1E4F1EDA8], @"H.264");
        __int16 VideoFormatDescription = VTEncoderSessionCreateVideoFormatDescription();
        CFRelease(v510);
        if (v516) {
          CFRelease(v516);
        }
        CFRelease(v512);
LABEL_221:
        long long v517 = v513;
LABEL_222:
        CFRelease(v517);
        return VideoFormatDescription;
      }
    }
    __int16 VideoFormatDescription = FigSignalErrorAt();
    CFRelease(v510);
    CFRelease(v512);
    if (!v513) {
      return VideoFormatDescription;
    }
    goto LABEL_221;
  }
  return VideoFormatDescription;
}

uint64_t sub_1BBAF0FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  int v15 = v9;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (v11) {
    char v16 = 2;
  }
  else {
    char v16 = 1;
  }
  if ((unsigned __int16)(v9 - 1501) < 0xFA28u) {
    return 4294958325;
  }
  uint64_t v17 = v14;
  int v18 = v13;
  int v19 = v12;
  uint64_t v20 = v11;
  int v21 = v10;
  __memcpy_chk();
  if ((unsigned __int16)(v21 - 3001) < 0xF44Cu) {
    return 4294958325;
  }
  __memcpy_chk();
  if (v20)
  {
    if ((unsigned __int16)(v19 - 3001) < 0xF44Cu) {
      return 4294958325;
    }
    __memcpy_chk();
    unsigned int v22 = v19 - 4;
  }
  else
  {
    unsigned int v22 = 65532;
  }
  if ((v18 - 3) > 2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v23 = v15 - 4;
  *(unsigned char *)uint64_t v17 = 1;
  int v24 = BYTE1(v32);
  *(unsigned char *)(v17 + 1) = BYTE1(v32);
  *(_WORD *)(v17 + 2) = WORD1(v32);
  *(unsigned char *)(v17 + 4) = 0xFFFDFCu >> (8 * (v18 - 3));
  *(unsigned char *)(v17 + 5) = -31;
  *(_WORD *)(v17 + 6) = bswap32(v23) >> 16;
  memcpy((void *)(v17 + 8), &v32, (unsigned __int16)v23);
  uint64_t v25 = v17 + (unsigned __int16)v23;
  *(unsigned char *)(v25 + 8) = v16;
  *(_WORD *)(v25 + 9) = bswap32(v21 - 4) >> 16;
  uint64_t v26 = (unsigned __int16)v23 + 11;
  uint64_t v27 = v26 + (unsigned __int16)(v21 - 4);
  memcpy((void *)(v17 + v26), &v31, (unsigned __int16)(v21 - 4));
  if (v20)
  {
    *(_WORD *)(v17 + v27) = bswap32(v22) >> 16;
    if ((unsigned __int16)v22 > 0xBB8u) {
      return 4294958325;
    }
    uint64_t v29 = (v27 + 2);
    LODWORD(v27) = v29 + (unsigned __int16)v22;
    memcpy((void *)(v17 + v29), &v30, (unsigned __int16)v22);
  }
  if ((v24 - 100) <= 0x2C && ((1 << (v24 - 100)) & 0x100000400401) != 0)
  {
    *(_DWORD *)(v17 + v27) = 2;
    LODWORD(v27) = v27 + 4;
  }
  uint64_t result = 0;
  *a9 = v27;
  return result;
}

void sub_1BBAF124C()
{
  if (!*MEMORY[0x1E4F4D730]) {
    byte_1E9F820C8 = 1;
  }
}

void sub_1BBAF1280(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(const void **)(v5 + 10576);
  uint64_t v7 = *(void *)(v5 + 10592);
  int v8 = *(_DWORD *)(*(void *)(*(void *)(v5 + 5176) + 128) + 8);
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 5200), v9)) {
    goto LABEL_4;
  }
  if (a2
    || !*(unsigned char *)(a1 + 6296)
    && !*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 5176) + 208128)
    && sub_1BBAEED40(a1, v10, v11, v12, v13, v14))
  {
    goto LABEL_3;
  }
  if (v8)
  {
    --*(void *)(a1 + 5152);
    VTEncoderSessionDequeueDecodeTimeStamp();
    VTEncoderSessionEmitEncodedFrame();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5200), v9);
    goto LABEL_9;
  }
  if (!*(_DWORD *)(v5 + 10600))
  {
LABEL_3:
    CFLog();
    VTEncoderSessionDequeueDecodeTimeStamp();
    VTEncoderSessionEmitEncodedFrame();
    goto LABEL_9;
  }
  if (sub_1BBAEA930(a1, v6, *(_DWORD *)(v5 + 10584), v7, v9)) {
LABEL_4:
  }
    CFLog();
LABEL_9:
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t sub_1BBAF1440(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4)
{
  int v5 = a3;
  v42[1] = *MEMORY[0x1E4F143B8];
  unint64_t v7 = HIDWORD(a3);
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42[0] = 0x3432306634323076;
  *(_DWORD *)(DerivedStorage + 5088) = 1;
  *(void *)uint64_t DerivedStorage = a2;
  *(_DWORD *)(DerivedStorage + 5140) = v5;
  *(_DWORD *)(DerivedStorage + 5144) = v7;
  CFNumberRef v9 = *(const void **)(DerivedStorage + 5192);
  if (v9) {
    CFRelease(v9);
  }
  *(void *)(DerivedStorage + 5192) = a4;
  if (a4) {
    CFRetain(a4);
  }
  FigFormatDescriptionRelease();
  *(void *)(DerivedStorage + 8) = 0;
  int v40 = v7;
  int valuePtr = v5;
  int v10 = -v5 & 0xF;
  int v11 = -(int)v7;
  int v12 = -(int)v7 & 0xF;
  int v38 = v11 & 0xF;
  int v39 = v10;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
LABEL_27:
    uint64_t v35 = 4294967188;
    CFLog();
    *(_DWORD *)(DerivedStorage + 6228) = 0;
    return v35;
  }
  uint64_t v14 = Mutable;
  CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v15)
  {
    CFMutableDictionaryRef v16 = v15;
    uint64_t v17 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v17)
    {
      int v18 = v17;
      sub_1BBAF1884(v17, 1024);
      sub_1BBAF1884(v18, 0);
      sub_1BBAF1884(v18, 256);
      sub_1BBAF1884(v18, 512);
      sub_1BBAF1884(v18, 768);
      sub_1BBAF1884(v18, 1280);
      CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E4F24CB0], v18);
      sub_1BBAF18DC(v14, (const void *)*MEMORY[0x1E4F24D78], 64);
      sub_1BBAF18DC(v14, (const void *)*MEMORY[0x1E4F24C98], 16);
      CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E4F24D20], v16);
      CFRelease(v16);
      CFMutableDictionaryRef v16 = v18;
    }
    CFRelease(v16);
  }
  CFMutableArrayRef v19 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!v19) {
    goto LABEL_24;
  }
  uint64_t v20 = v19;
  uint64_t v21 = 0;
  char v22 = 1;
  do
  {
    char v23 = v22;
    CFNumberRef v24 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v42 + 4 * v21);
    if (!v24)
    {
      CFRelease(v14);
      goto LABEL_26;
    }
    CFNumberRef v25 = v24;
    CFArrayAppendValue(v20, v24);
    CFRelease(v25);
    char v22 = 0;
    uint64_t v21 = 1;
  }
  while ((v23 & 1) != 0);
  CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E4F24D70], v20);
  CFRelease(v20);
  CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (!v26
    || (CFNumberRef v27 = v26,
        CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E4F24E10], v26),
        CFRelease(v27),
        (CFNumberRef v28 = CFNumberCreate(0, kCFNumberSInt32Type, &v40)) == 0))
  {
LABEL_24:
    uint64_t v20 = v14;
LABEL_26:
    CFRelease(v20);
    goto LABEL_27;
  }
  CFNumberRef v29 = v28;
  CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E4F24D08], v28);
  CFRelease(v29);
  if (v10)
  {
    CFNumberRef v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
    if (!v30) {
      goto LABEL_24;
    }
    CFNumberRef v31 = v30;
    CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E4F24CE8], v30);
    CFRelease(v31);
  }
  if (v12)
  {
    CFNumberRef v32 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
    if (!v32) {
      goto LABEL_24;
    }
    CFNumberRef v33 = v32;
    CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E4F24CD0], v32);
    CFRelease(v33);
  }
  VTEncoderSessionSetPixelBufferAttributes();
  valueCallBacks.version = 0;
  valueCallBacks.retain = (CFDictionaryRetainCallBack)sub_1BBAF1948;
  valueCallBacks.copyDescription = 0;
  valueCallBacks.equal = 0;
  valueCallBacks.release = (CFDictionaryReleaseCallBack)j__CFAllocatorDeallocate;
  CFMutableDictionaryRef v34 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], &valueCallBacks);
  *(void *)(DerivedStorage + 5200) = v34;
  if (v34) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = FigSignalErrorAt();
  }
  *(_DWORD *)(DerivedStorage + 6228) = 0;
  CFRelease(v14);
  return v35;
}

void sub_1BBAF1884(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFArrayAppendValue(a1, v3);
    CFRelease(v4);
  }
}

void sub_1BBAF18DC(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(a1, a2, v5);
    CFRelease(v6);
  }
}

__n128 sub_1BBAF1948(const __CFAllocator *a1, __n128 *a2)
{
  CFNumberRef v3 = (__n128 *)CFAllocatorAllocate(a1, 72, 0);
  __n128 *v3 = *a2;
  __n128 v5 = a2[2];
  __n128 result = a2[3];
  __n128 v6 = a2[1];
  v3[4].n128_u64[0] = a2[4].n128_u64[0];
  v3[2] = v5;
  v3[3] = result;
  v3[1] = v6;
  return result;
}

char *sub_1BBAF1994(uint64_t a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B68]))
  {
    if (a3)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        uint64_t v7 = 5048;
LABEL_5:
        int v8 = (void *)(DerivedStorage + v7);
        CFNumberRef v9 = (const __CFNumber *)a3;
        CFNumberType v10 = kCFNumberSInt32Type;
LABEL_6:
        CFNumberGetValue(v9, v10, v8);
        return 0;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F447E8]))
  {
    if (a3)
    {
      CFTypeID v12 = CFBooleanGetTypeID();
      if (v12 == CFGetTypeID(a3))
      {
        int Value = CFBooleanGetValue((CFBooleanRef)a3);
        __n128 result = 0;
        *(_DWORD *)(DerivedStorage + 5056) = Value;
        return result;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F447D0]))
  {
    if (a3)
    {
      CFTypeID v14 = CFBooleanGetTypeID();
      if (v14 == CFGetTypeID(a3))
      {
        int v15 = CFBooleanGetValue((CFBooleanRef)a3);
        __n128 result = 0;
        *(_DWORD *)(DerivedStorage + 5060) = v15;
        return result;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449C8]))
  {
    if (a3)
    {
      CFTypeID v16 = CFNumberGetTypeID();
      if (v16 == CFGetTypeID(a3))
      {
        uint64_t v7 = 5068;
        goto LABEL_5;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449D0]))
  {
    if (a3)
    {
      CFTypeID v17 = CFNumberGetTypeID();
      if (v17 == CFGetTypeID(a3))
      {
        int v8 = (void *)(DerivedStorage + 5072);
LABEL_25:
        CFNumberRef v9 = (const __CFNumber *)a3;
        CFNumberType v10 = kCFNumberDoubleType;
        goto LABEL_6;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44810]))
  {
    if (a3)
    {
      CFTypeID v18 = CFNumberGetTypeID();
      if (v18 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        __n128 result = 0;
        *(_DWORD *)(DerivedStorage + 760) = valuePtr;
        return result;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, @"ThermalLevel"))
  {
    if (a3)
    {
      CFTypeID v19 = CFNumberGetTypeID();
      if (v19 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        __n128 result = 0;
        *(_DWORD *)(DerivedStorage + 6228) = valuePtr;
        return result;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44870]))
  {
    if (a3)
    {
      CFTypeID v20 = CFNumberGetTypeID();
      if (v20 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        __n128 result = 0;
        *(_DWORD *)(DerivedStorage + 6236) = valuePtr;
        return result;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, @"AverageBitRateIntraLayer"))
  {
    if (a3)
    {
      CFTypeID v21 = CFNumberGetTypeID();
      if (v21 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        __n128 result = 0;
        *(_DWORD *)(DerivedStorage + 764) = valuePtr;
        return result;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449F0]))
  {
    if (a3)
    {
      CFTypeID v22 = CFNumberGetTypeID();
      if (v22 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        __n128 result = 0;
        *(_DWORD *)(DerivedStorage + 5120) = valuePtr;
        return result;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44898]))
  {
    if (!a3) {
      goto LABEL_190;
    }
    CFTypeID v23 = CFArrayGetTypeID();
    if (v23 != CFGetTypeID(a3)) {
      goto LABEL_190;
    }
    CFIndex Count = CFArrayGetCount((CFArrayRef)a3);
    if (Count < 2)
    {
LABEL_74:
      __n128 result = 0;
      *(unsigned char *)(DerivedStorage + 896) = 1;
      return result;
    }
    CFIndex v25 = 0;
    uint64_t v26 = (unint64_t)Count >> 1;
    if ((unint64_t)Count >> 1 >= 8) {
      uint64_t v26 = 8;
    }
    uint64_t v27 = 2 * v26;
    CFNumberRef v28 = (double *)(DerivedStorage + 832);
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a3, v25);
      if (!ValueAtIndex) {
        FigSignalErrorAt();
      }
      CFTypeID v30 = CFNumberGetTypeID();
      if (v30 != CFGetTypeID(ValueAtIndex)) {
        FigSignalErrorAt();
      }
      CFNumberType Type = CFNumberGetType((CFNumberRef)ValueAtIndex);
      if (Type == kCFNumberSInt64Type) {
        break;
      }
      if (Type == kCFNumberFloat64Type)
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberFloat64Type, &valuePtr);
        double v32 = *(double *)&valuePtr;
LABEL_61:
        *(v28 - 8) = v32;
        goto LABEL_63;
      }
      FigSignalErrorAt();
LABEL_63:
      CFNumberRef v33 = CFArrayGetValueAtIndex((CFArrayRef)a3, v25 + 1);
      if (!v33) {
        FigSignalErrorAt();
      }
      CFTypeID v34 = CFNumberGetTypeID();
      if (v34 != CFGetTypeID(v33)) {
        FigSignalErrorAt();
      }
      CFNumberType v35 = CFNumberGetType((CFNumberRef)v33);
      if (v35 == kCFNumberSInt64Type)
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v33, kCFNumberSInt64Type, &valuePtr);
        double v36 = (double)valuePtr;
      }
      else
      {
        if (v35 != kCFNumberFloat64Type)
        {
          FigSignalErrorAt();
          goto LABEL_73;
        }
        uint64_t valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v33, kCFNumberFloat64Type, &valuePtr);
        double v36 = *(double *)&valuePtr;
      }
      *CFNumberRef v28 = v36;
LABEL_73:
      v25 += 2;
      ++v28;
      if (v27 == v25) {
        goto LABEL_74;
      }
    }
    uint64_t valuePtr = 0;
    CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
    double v32 = (double)valuePtr;
    goto LABEL_61;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F448F0]))
  {
    if (a3)
    {
      CFTypeID v37 = CFNumberGetTypeID();
      if (v37 == CFGetTypeID(a3))
      {
        int v8 = (void *)(DerivedStorage + 752);
        goto LABEL_25;
      }
    }
LABEL_190:
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F448A0]))
  {
    if (a3)
    {
      CFNumberGetTypeID();
      CFGetTypeID(a3);
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AA0]))
  {
    if (!a3) {
      goto LABEL_190;
    }
    CFTypeID v38 = CFStringGetTypeID();
    if (v38 != CFGetTypeID(a3)) {
      goto LABEL_190;
    }
    int v39 = *(const void **)(DerivedStorage + 5032);
    if (v39) {
      CFRelease(v39);
    }
    CFTypeRef v40 = CFRetain(a3);
    __n128 result = 0;
    *(void *)(DerivedStorage + 5032) = v40;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B18]))
  {
    if (a3)
    {
      CFTypeID v41 = CFNumberGetTypeID();
      if (v41 == CFGetTypeID(a3))
      {
        uint64_t v7 = 5084;
        goto LABEL_5;
      }
    }
    goto LABEL_190;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A60]))
  {
    if (a3)
    {
      CFTypeID v42 = CFDictionaryGetTypeID();
      if (v42 != CFGetTypeID(a3)) {
        goto LABEL_190;
      }
      unsigned int v43 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24B90]);
      unsigned int v44 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24BA0]);
      if (!v43) {
        goto LABEL_190;
      }
      unsigned int v45 = v44;
      CFTypeID v46 = CFNumberGetTypeID();
      if (v46 != CFGetTypeID(v43)) {
        goto LABEL_190;
      }
      if (!v45) {
        goto LABEL_190;
      }
      CFTypeID v47 = CFNumberGetTypeID();
      if (v47 != CFGetTypeID(v45)) {
        goto LABEL_190;
      }
      int v69 = 0;
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)v43, kCFNumberIntType, &valuePtr);
      CFNumberGetValue((CFNumberRef)v45, kCFNumberIntType, &v69);
      if ((int)valuePtr <= 0) {
        return (char *)FigSignalErrorAt();
      }
      int v48 = v69;
      if (v69 < 1) {
        return (char *)FigSignalErrorAt();
      }
      unsigned int v49 = valuePtr;
      unsigned int v50 = v69;
      do
      {
        if ((int)v49 <= (int)v50) {
          v50 %= v49;
        }
        else {
          v49 %= v50;
        }
      }
      while (v49 && v50);
      if (!v49) {
        unsigned int v49 = v50;
      }
      unsigned int v51 = valuePtr / v49;
      *(_DWORD *)(DerivedStorage + 5128) = valuePtr / v49;
      int v52 = v48 / (int)v49;
      *(_DWORD *)(DerivedStorage + 5132) = v52;
      if (v51 != 1 || v52 != 1)
      {
        if (v52 == 33)
        {
          switch(v51)
          {
            case 'P':
              __n128 result = 0;
              int v54 = 9;
              goto LABEL_119;
            case '@':
              __n128 result = 0;
              int v54 = 12;
              goto LABEL_119;
            case '(':
              __n128 result = 0;
              int v54 = 5;
              goto LABEL_119;
          }
        }
        else
        {
          if (v52 == 11)
          {
            switch(v51)
            {
              case 0xAu:
                __n128 result = 0;
                int v54 = 3;
                break;
              case 0xBu:
              case 0xDu:
              case 0xEu:
              case 0x11u:
              case 0x13u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
                goto LABEL_172;
              case 0xCu:
                __n128 result = 0;
                int v54 = 2;
                break;
              case 0xFu:
                __n128 result = 0;
                int v54 = 11;
                break;
              case 0x10u:
                __n128 result = 0;
                int v54 = 4;
                break;
              case 0x12u:
                __n128 result = 0;
                int v54 = 10;
                break;
              case 0x14u:
                __n128 result = 0;
                int v54 = 7;
                break;
              case 0x18u:
                __n128 result = 0;
                int v54 = 6;
                break;
              default:
                if (v51 != 32) {
                  goto LABEL_172;
                }
                __n128 result = 0;
                int v54 = 8;
                break;
            }
            goto LABEL_119;
          }
          if (v51 == 160 && v52 == 99)
          {
            __n128 result = 0;
            int v54 = 13;
            goto LABEL_119;
          }
        }
LABEL_172:
        __n128 result = 0;
        int v54 = 255;
        goto LABEL_119;
      }
      __n128 result = 0;
    }
    else
    {
      __n128 result = 0;
      *(void *)(DerivedStorage + 5128) = 0x100000001;
    }
    int v54 = 1;
LABEL_119:
    *(_DWORD *)(DerivedStorage + 5124) = v54;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44868]))
  {
    if (a3)
    {
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F24AB0]))
      {
        __n128 result = 0;
        int v53 = 1;
      }
      else if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F24AA0]))
      {
        __n128 result = 0;
        int v53 = 5;
      }
      else
      {
        if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F24AC8])) {
          goto LABEL_190;
        }
        __n128 result = 0;
        int v53 = 6;
      }
    }
    else
    {
      __n128 result = 0;
      int v53 = 2;
    }
    *(_DWORD *)(DerivedStorage + 5108) = v53;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B58]))
  {
    if (a3 && !CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F24C08]))
    {
      int IntegerCodePointForString = CVTransferFunctionGetIntegerCodePointForString(a3);
      __n128 result = 0;
    }
    else
    {
      __n128 result = 0;
      int IntegerCodePointForString = 2;
    }
    *(_DWORD *)(DerivedStorage + 5112) = IntegerCodePointForString;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44BB0]))
  {
    if (a3)
    {
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F24C48]))
      {
        __n128 result = 0;
        int v56 = 1;
      }
      else if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F24C40]))
      {
        __n128 result = 0;
        int v56 = 6;
      }
      else
      {
        if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F24C60])) {
          goto LABEL_190;
        }
        __n128 result = 0;
        int v56 = 7;
      }
    }
    else
    {
      __n128 result = 0;
      int v56 = 2;
    }
    *(_DWORD *)(DerivedStorage + 5116) = v56;
    return result;
  }
  CFNumberRef v57 = (char *)(DerivedStorage + 5224);
  if (CFEqual(a2, @"NegotiationDetails"))
  {
    *CFNumberRef v57 = 0;
    if (!a3) {
      return 0;
    }
    CFTypeID v58 = CFStringGetTypeID();
    if (v58 != CFGetTypeID(a3)) {
      return 0;
    }
    CFStringRef v59 = a3;
    unsigned int v60 = v57;
    CFIndex v61 = 1001;
    goto LABEL_140;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A98])) {
    return 0;
  }
  if (CFEqual(a2, @"UsingCellular"))
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
    __n128 result = 0;
    *(_DWORD *)(DerivedStorage + 6232) = valuePtr;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F45640]))
  {
    __n128 result = 0;
    *(void *)(DerivedStorage + 6304) = a3;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F448E0]))
  {
    if (!a3) {
      return 0;
    }
    CFTypeID v62 = CFBooleanGetTypeID();
    if (v62 != CFGetTypeID(a3)) {
      return 0;
    }
    Boolean v63 = CFBooleanGetValue((CFBooleanRef)a3);
    __n128 result = 0;
    v57[1088] = v63;
    return result;
  }
  if (CFEqual(a2, @"FaceRect"))
  {
    if (!a3) {
      return 0;
    }
    CFTypeID v64 = CFBooleanGetTypeID();
    if (v64 != CFGetTypeID(a3)) {
      return 0;
    }
    int v65 = CFBooleanGetValue((CFBooleanRef)a3);
    __n128 result = 0;
    v57[1048] = v65 != 0;
    return result;
  }
  if (!CFEqual(a2, @"CommandLineParametersExtraOptions")) {
    goto LABEL_190;
  }
  if (!a3) {
    goto LABEL_190;
  }
  CFTypeID v66 = CFStringGetTypeID();
  if (v66 != CFGetTypeID(a3)) {
    goto LABEL_190;
  }
  size_t v67 = CFStringGetLength(a3) + 1;
  int v68 = *(void **)(DerivedStorage + 6320);
  if (v68) {
    free(v68);
  }
  __n128 result = (char *)malloc_type_malloc(v67, 0xD3650EC0uLL);
  *(void *)(DerivedStorage + 6320) = result;
  if (result)
  {
    unsigned int v60 = result;
    CFStringRef v59 = a3;
    CFIndex v61 = v67;
LABEL_140:
    CFStringGetCString(v59, v60, v61, 0);
    return 0;
  }
  return result;
}

uint64_t sub_1BBAF26C4(uint64_t a1, const void *a2, uint64_t a3, CFDictionaryRef *a4)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B68]))
  {
    uint64_t v7 = 5048;
LABEL_3:
    int v8 = (void **)(DerivedStorage + v7);
LABEL_4:
    CFNumberType v9 = kCFNumberSInt32Type;
LABEL_5:
    CFDictionaryRef StringForIntegerCodePoint = CFNumberCreate(0, v9, v8);
LABEL_14:
    *a4 = StringForIntegerCodePoint;
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F447E8]))
  {
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
    int v12 = *(_DWORD *)(DerivedStorage + 5056);
    goto LABEL_10;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F447D0]))
  {
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
    int v12 = *(_DWORD *)(DerivedStorage + 5060);
LABEL_10:
    if (!v12) {
      int v11 = (const void **)MEMORY[0x1E4F1CFC8];
    }
LABEL_12:
    uint64_t v13 = *v11;
LABEL_13:
    CFDictionaryRef StringForIntegerCodePoint = (const __CFDictionary *)CFRetain(v13);
    goto LABEL_14;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449C8]))
  {
    uint64_t v7 = 5068;
    goto LABEL_3;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F449D0]))
  {
    int v8 = (void **)(DerivedStorage + 5072);
LABEL_20:
    CFNumberType v9 = kCFNumberDoubleType;
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44870]))
  {
    int v15 = *(_DWORD *)(DerivedStorage + 6236);
LABEL_29:
    LODWORD(keys[0]) = v15;
    int v8 = keys;
    goto LABEL_4;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44810]))
  {
    int v15 = *(_DWORD *)(DerivedStorage + 760);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"ThermalLevel"))
  {
    int v15 = *(_DWORD *)(DerivedStorage + 6228);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"AverageBitRateIntraLayer"))
  {
    int v15 = *(_DWORD *)(DerivedStorage + 764);
    goto LABEL_29;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44898]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F448F0]))
    {
      int v8 = (void **)(DerivedStorage + 752);
      goto LABEL_20;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F448A0]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AA0]))
      {
        uint64_t v13 = *(const void **)(DerivedStorage + 5032);
        if (!v13) {
          return 0;
        }
        goto LABEL_13;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B18]))
      {
        uint64_t v7 = 5084;
        goto LABEL_3;
      }
      if (CFEqual(a2, @"FaceRect"))
      {
        if (*(unsigned char *)(DerivedStorage + 6272)) {
          int v11 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          int v11 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        goto LABEL_12;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A60]))
      {
        if (*(_DWORD *)(DerivedStorage + 5128) != 1 || *(_DWORD *)(DerivedStorage + 5132) != 1)
        {
          CFTypeID v16 = (void *)*MEMORY[0x1E4F24BA0];
          keys[0] = *(void **)MEMORY[0x1E4F24B90];
          keys[1] = v16;
          CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CMSampleTimingInfo values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(DerivedStorage + 5128));
          CFTypeRef cf = CFNumberCreate(v17, kCFNumberSInt32Type, (const void *)(DerivedStorage + 5132));
          *a4 = CFDictionaryCreate(v17, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFRelease(values);
          CFRelease(cf);
          return 0;
        }
LABEL_65:
        *a4 = 0;
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44868]))
      {
        int v18 = *(_DWORD *)(DerivedStorage + 5108);
        switch(v18)
        {
          case 6:
            CFTypeID v19 = (CFDictionaryRef *)MEMORY[0x1E4F24AC8];
            break;
          case 5:
            CFTypeID v19 = (CFDictionaryRef *)MEMORY[0x1E4F24AA0];
            break;
          case 1:
            CFTypeID v19 = (CFDictionaryRef *)MEMORY[0x1E4F24AB0];
            break;
          default:
            goto LABEL_65;
        }
LABEL_59:
        *a4 = *v19;
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44B58]))
      {
        CFDictionaryRef StringForIntegerCodePoint = (const __CFDictionary *)CVTransferFunctionGetStringForIntegerCodePoint(*(_DWORD *)(DerivedStorage + 5112));
        goto LABEL_14;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44BB0]))
      {
        int v20 = *(_DWORD *)(DerivedStorage + 5116);
        switch(v20)
        {
          case 7:
            CFTypeID v19 = (CFDictionaryRef *)MEMORY[0x1E4F24C60];
            break;
          case 6:
            CFTypeID v19 = (CFDictionaryRef *)MEMORY[0x1E4F24C40];
            break;
          case 1:
            CFTypeID v19 = (CFDictionaryRef *)MEMORY[0x1E4F24C48];
            break;
          default:
            goto LABEL_65;
        }
        goto LABEL_59;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F45640]))
      {
        uint64_t v13 = *(const void **)(DerivedStorage + 6304);
        goto LABEL_13;
      }
    }
  }

  return FigSignalErrorAt();
}

__CFString *sub_1BBAF2B84(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<H264VideoEncoder %p>", a1);
  return Mutable;
}

uint64_t sub_1BBAF2BDC()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result && !*(unsigned char *)(result + 5184))
  {
    return sub_1BBAF2C30();
  }
  return result;
}

uint64_t sub_1BBAF2C30()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 5184))
    {
      *(unsigned char *)(DerivedStorage + 5184) = 1;
      uint64_t v2 = *(void *)(DerivedStorage + 16);
      if (v2)
      {
        CFNumberRef v3 = (void **)(v2 + 5208);
        uint64_t v4 = *(void *)(v2 + 5176);
        if (v4)
        {
          __n128 v5 = *(void **)(v4 + 208120);
          if (v5)
          {
            __n128 v6 = (void *)v5[22];
            if (v6)
            {
              free(v6);
              v5[22] = 0;
              uint64_t v4 = *(void *)(v2 + 5176);
              __n128 v5 = *(void **)(v4 + 208120);
            }
            uint64_t v7 = (void *)v5[439];
            if (v7)
            {
              free(v7);
              v5[439] = 0;
              uint64_t v4 = *(void *)(v2 + 5176);
              __n128 v5 = *(void **)(v4 + 208120);
            }
            int v8 = (void *)v5[426];
            if (v8)
            {
              free(v8);
              v5[426] = 0;
              uint64_t v4 = *(void *)(v2 + 5176);
              __n128 v5 = *(void **)(v4 + 208120);
            }
            CFNumberType v9 = (void *)v5[24];
            if (v9)
            {
              free(v9);
              v5[24] = 0;
              uint64_t v4 = *(void *)(v2 + 5176);
              __n128 v5 = *(void **)(v4 + 208120);
            }
            CFNumberType v10 = (void *)v5[26];
            if (v10)
            {
              free(v10);
              v5[26] = 0;
              uint64_t v4 = *(void *)(v2 + 5176);
            }
            sub_1BBB06B10((CFTypeRef **)(v4 + 208120));
          }
        }
        sub_1BBB23D48(v2 + 5208);
        if (*v3) {
          free(*v3);
        }
        *(void *)(v2 + 5208) = 0;
        uint64_t v11 = *(void *)(v2 + 5184);
        if (v11)
        {
          sub_1BBB4F5C8(v11);
          free(*(void **)(v2 + 5184));
          *(void *)(v2 + 5184) = 0;
          *(void *)(*(void *)(v2 + 5176) + 205968) = 0;
        }
        uint64_t v12 = *(void *)(v2 + 5176);
        if (v12)
        {
          uint64_t v13 = *(void *)(v12 + 205968);
          if (v13)
          {
            sub_1BBB20EEC(v13);
            *(void *)(*(void *)(v2 + 5176) + 205968) = 0;
          }
        }
        CFTypeID v14 = *(void **)(v2 + 10576);
        if (v14)
        {
          free(v14);
          *(void *)(v2 + 10576) = 0;
        }
        int v15 = *(void **)(v2 + 10592);
        if (v15)
        {
          free(v15);
          *(void *)(v2 + 10592) = 0;
        }
        if (*(_DWORD *)(v2 + 10612) == 1)
        {
          if (*(int *)(v2 + 10608) >= 1)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 256;
            do
            {
              uint64_t v18 = *(void *)(v2 + 10624);
              uint64_t v19 = v18 + v17;
              *(_DWORD *)(v18 + v17 - 252) = 1;
              int v20 = *(unsigned int **)(v18 + v17 - 240);
              if (v20) {
                MEMORY[0x1C1861060](*v20);
              }
              uint64_t v22 = v19 - 248;
              CFTypeID v21 = *(pthread_t **)(v19 - 248);
              CFTypeRef v40 = 0;
              if (v21) {
                pthread_join(*v21, &v40);
              }
              sub_1BBAF9E24(*(semaphore_t **)(v19 - 240));
              uint64_t v23 = v18 + v17;
              sub_1BBAF9E24(*(semaphore_t **)(v18 + v17 - 232));
              if (*(void *)v22) {
                free(*(void **)v22);
              }
              uint64_t v26 = *(pthread_mutex_t **)(v23 - 8);
              CFIndex v25 = (void *)(v23 - 8);
              CFNumberRef v24 = v26;
              if (v26) {
                pthread_mutex_destroy(v24);
              }
              free(v24);
              uint64_t v27 = *(void **)(v18 + v17);
              if (v27) {
                pthread_cond_destroy(*(pthread_cond_t **)(v18 + v17));
              }
              free(v27);
              *(void *)uint64_t v22 = 0;
              *(void *)(v22 + 8) = 0;
              *(void *)(v22 + 16) = 0;
              *CFIndex v25 = 0;
              v25[1] = 0;
              if (v17 != 256)
              {
                sub_1BBB37FC0(*(void *)(*(void *)(v2 + 10624) + v17 - 224), 0);
                *(void *)(*(void *)(v2 + 10624) + v17 - 224) = 0;
              }
              CFNumberRef v28 = (void **)(*(void *)(v2 + 10624) + v17 - 200);
              sub_1BBB23D48((uint64_t)v28);
              if (*v28) {
                free(*v28);
              }
              *CFNumberRef v28 = 0;
              ++v16;
              v17 += 320;
            }
            while (v16 < *(int *)(v2 + 10608));
          }
          free(*(void **)(v2 + 10624));
        }
        CFNumberRef v29 = *(void **)(v2 + 5168);
        if (v29)
        {
          sub_1BBAF3DD0(*(void *)(v2 + 5168));
          free(v29);
        }
        *(void *)(v2 + 5168) = 0;
        uint64_t v30 = *(void *)(v2 + 5176);
        if (v30) {
          sub_1BBB37FC0(v30, 1);
        }
        free((void *)v2);
        *(void *)(v1 + 16) = 0;
      }
      CFNumberRef v31 = *(void **)(v1 + 5016);
      if (v31)
      {
        free(v31);
        *(void *)(v1 + 5016) = 0;
      }
      double v32 = *(void **)(v1 + 5024);
      if (v32)
      {
        free(v32);
        *(void *)(v1 + 5024) = 0;
      }
      *(void *)uint64_t v1 = 0;
      CFNumberRef v33 = *(const void **)(v1 + 5192);
      if (v33)
      {
        CFRelease(v33);
        *(void *)(v1 + 5192) = 0;
      }
      FigFormatDescriptionRelease();
      *(void *)(v1 + 8) = 0;
      CFTypeID v34 = *(const void **)(v1 + 5200);
      if (v34)
      {
        CFRelease(v34);
        *(void *)(v1 + 5200) = 0;
      }
      CFNumberType v35 = *(const void **)(v1 + 5032);
      if (v35)
      {
        CFRelease(v35);
        *(void *)(v1 + 5032) = 0;
      }
      double v36 = *(void **)(v1 + 6288);
      if (v36)
      {
        [v36 invalidate];
        CFRelease(*(CFTypeRef *)(v1 + 6288));
      }
      CFTypeID v37 = *(NSObject **)(v1 + 6280);
      if (v37)
      {
        dispatch_semaphore_wait(v37, 0xFFFFFFFFFFFFFFFFLL);
        dispatch_release(*(dispatch_object_t *)(v1 + 6280));
        *(void *)(v1 + 6280) = 0;
      }
      CFTypeID v38 = *(void **)(v1 + 6320);
      if (v38)
      {
        free(v38);
        *(void *)(v1 + 6320) = 0;
      }
    }
  }
  return 0;
}

double sub_1BBAF2FE8(uint64_t a1, int a2, uint64_t a3, int a4, int a5, double a6, double a7)
{
  *(double *)a1 = a6;
  *(double *)(a1 + 16) = a7;
  *(_DWORD *)(a1 + 36) = a2;
  if (*(_DWORD *)(a1 + 64) == 2)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (a3 - v7 < 20 * a4) {
      a5 = 1;
    }
    double v9 = a6 / a7;
    if (a3 >= 1 && a4 >= 1 && v7 >= 1 && a5) {
      double v9 = (double)(a3 - v7) * a6 / (double)a4;
    }
    int v10 = (*(_DWORD *)(a1 + 28) - (int)v9) & ~((*(_DWORD *)(a1 + 28) - (int)v9) >> 31);
    *(_DWORD *)(a1 + 28) = v10;
  }
  else
  {
    int v10 = *(_DWORD *)(a1 + 28);
  }
  *(void *)(a1 + 56) = a3;
  double result = (double)a2 * a6 / 1000.0;
  *(_DWORD *)(a1 + 32) = ((int)result - v10) & ~(((int)result - v10) >> 31);
  return result;
}

uint64_t sub_1BBAF3090(uint64_t result, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 176) + 272) + 16 * a6;
  if (a3 == 6)
  {
    *(_DWORD *)uint64_t v6 = *a2;
    *(_DWORD *)(v6 + 4) = a2[1];
    *(unsigned char *)(v6 + 8) = a4;
    *(unsigned char *)(v6 + 9) = a5;
    int v11 = *(unsigned __int8 *)(result + 31);
    BOOL v12 = v11 == 2;
    if (v11 == 2) {
      unsigned int v13 = a4 >> (a4 != 32);
    }
    else {
      unsigned int v13 = a4;
    }
    if (v12) {
      unsigned int v14 = a5 >> (a5 != 32);
    }
    else {
      unsigned int v14 = a5;
    }
    uint64_t v15 = *(void *)(result + 256);
    char v10 = *(unsigned char *)(v15 + v13);
    uint64_t v16 = v15 + v14;
    goto LABEL_25;
  }
  if (a3 == 5)
  {
    char v10 = 0;
    int v17 = a2[1];
    *(_DWORD *)uint64_t v6 = 0;
    *(_DWORD *)(v6 + 4) = v17;
    *(unsigned char *)(v6 + 8) = 32;
    *(unsigned char *)(v6 + 9) = a5;
    char v19 = a5 != 32 && *(unsigned char *)(result + 31) == 2;
    uint64_t v16 = *(void *)(result + 256) + (a5 >> v19);
LABEL_25:
    char v7 = *(unsigned char *)(v16 + 33);
    goto LABEL_26;
  }
  if (a3 != 4) {
    return result;
  }
  char v7 = 0;
  *(_DWORD *)uint64_t v6 = *a2;
  *(_DWORD *)(v6 + 4) = 0;
  *(unsigned char *)(v6 + 8) = a4;
  *(unsigned char *)(v6 + 9) = 32;
  char v9 = a4 != 32 && *(unsigned char *)(result + 31) == 2;
  char v10 = *(unsigned char *)(*(void *)(result + 256) + ((unint64_t)a4 >> v9));
LABEL_26:
  *(unsigned char *)(v6 + 12) = v10;
  *(unsigned char *)(v6 + 13) = v7;
  return result;
}

void sub_1BBAF3184(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  HIDWORD(v130) = *(unsigned __int8 *)(a1 + 25);
  LODWORD(v130) = *(unsigned __int8 *)(a1 + 31);
  int v4 = *(unsigned __int8 *)(a1 + 26);
  int v129 = *(unsigned __int8 *)(a1 + 27);
  int v131 = *(unsigned __int8 *)(a1 + 32);
  unsigned int v122 = *(unsigned __int16 *)(a1 + 28);
  unsigned int v123 = (unsigned __int8 *)(*(void *)a1 + 19136);
  uint64_t v124 = *(void *)(a1 + 48);
  int v125 = *(unsigned __int8 *)(a1 + 56);
  unsigned int v136 = *v123;
  unsigned int v135 = *(unsigned __int8 *)(*(void *)a1 + 19137);
  unsigned int v137 = *(unsigned __int8 *)(*(void *)a1 + 19138);
  unsigned int v142 = *(unsigned __int8 *)(*(void *)a1 + 19139);
  if (*(void *)a1 && !*(unsigned char *)(a1 + 24))
  {
    int v126 = *(unsigned __int8 *)(a1 + 26);
    uint64_t v128 = *(void *)(a1 + 8);
    uint64_t v120 = *(void *)(a1 + 16);
    int v121 = *(unsigned __int8 *)(a1 + 33);
    uint64_t v5 = *(void *)(v3 + 128);
    int v139 = *(unsigned __int8 *)(a1 + 44);
    unsigned int v6 = *(unsigned __int16 *)(v3 + 4560);
    uint64_t v132 = v5;
    if (*(_WORD *)(v3 + 4560))
    {
      int v143 = 0;
      unsigned int v7 = 0;
      uint64_t v141 = 0;
      int v140 = 0;
      uint64_t v138 = 0;
      int v8 = 0;
      uint64_t v9 = *(int *)(v3 + 232);
      unsigned int v10 = *(unsigned __int16 *)(v3 + 4562);
      while (1)
      {
        if (!v10) {
          goto LABEL_29;
        }
        unsigned int v11 = 0;
        int v134 = v143 - 1;
        unsigned int v12 = 4 * v143;
        uint64_t v133 = v5;
        do
        {
          uint64_t v13 = v143 + v11;
          uint64_t v14 = off_1E9F83240(v5, v9);
          int v15 = v14;
          unsigned int v16 = (HIDWORD(v14) + 8) >> 4;
          float v17 = sub_1BBB4E9DC(sqrt((double)(int)v14));
          off_1E9F83238(v5, v9, *(void *)(v3 + 4736) + v12, *(void *)(v3 + 4744) + 4 * v12);
          *(_WORD *)(*(void *)(v3 + 4696) + 2 * v13) = (int)v17;
          *(_WORD *)(*(void *)(v3 + 4624) + 2 * v13) = v15;
          *(unsigned char *)(*(void *)(v3 + 4656) + v13) = v16;
          if (v7 <= v142 && v7 >= v137 && v11 >= v136 && v11 <= v135)
          {
            unsigned int v18 = sub_1BBB4E9DC(50.0 / (v17 + 1.0)) + 1;
            LODWORD(v141) = v141 + v15;
            v140 += v18 * v15;
            LODWORD(v138) = v16 + v138;
            HIDWORD(v141) += v18;
            ++HIDWORD(v138);
          }
          if (!v139)
          {
            if (v11)
            {
              uint64_t v19 = *(void *)(v3 + 4656);
              v20.i32[1] = 128;
              v20.i32[0] = *(unsigned __int8 *)(v19 + v134 + v11);
              if (v7)
              {
                unsigned int v21 = *(unsigned __int16 *)(v3 + 4562);
                uint64_t v22 = (unsigned __int8 *)(v19 + v143 + v11 - v21);
                v20.i32[1] = *(unsigned __int8 *)(v19 + v134 + v11 - v21);
                goto LABEL_18;
              }
LABEL_21:
              int v23 = 128;
              goto LABEL_22;
            }
            if (!v7)
            {
              int32x2_t v20 = (int32x2_t)0x8000000080;
              goto LABEL_21;
            }
            uint64_t v19 = *(void *)(v3 + 4656);
            unsigned int v21 = *(unsigned __int16 *)(v3 + 4562);
            uint64_t v22 = (unsigned __int8 *)(v19 + v143 - v21);
            int32x2_t v20 = (int32x2_t)0x8000000080;
LABEL_18:
            int v23 = *v22;
            if (v11 + 1 >= v21) {
LABEL_22:
            }
              int v24 = 128;
            else {
              int v24 = *(unsigned __int8 *)(v19 + v143 + v11 - v21 + 1);
            }
            int32x2_t v25 = vdup_n_s32(v16);
            int32x2_t v26 = vaba_s32(vmin_s32(vsub_s32((int32x2_t)vabd_u32((uint32x2_t)v25, (uint32x2_t)__PAIR64__(v24, v23)), vabd_s32(v20, v25)), 0), v20, v25);
            if ((int)(((v20.i32[0] + v23 + v24 + v20.i32[1] + 2) >> 2) - v16) >= 0) {
              unsigned int v27 = ((v20.i32[0] + v23 + v24 + v20.i32[1] + 2) >> 2) - v16;
            }
            else {
              unsigned int v27 = v16 - ((v20.i32[0] + v23 + v24 + v20.i32[1] + 2) >> 2);
            }
            int v28 = v26.i32[0] - v26.i32[1] + ((v27 - v26.i32[0]) & ((int)(v27 - v26.i32[0]) >> 31));
            int v29 = (v28 & (v28 >> 31)) + v26.i32[1];
            *(unsigned char *)(*(void *)(v3 + 4680) + v13) = v29;
            v8 += v29;
          }
          ++v11;
          v5 += 16;
          unsigned int v10 = *(unsigned __int16 *)(v3 + 4562);
          v12 += 4;
        }
        while (v11 < v10);
        v143 += v11;
        unsigned int v6 = *(unsigned __int16 *)(v3 + 4560);
        uint64_t v5 = v133;
LABEL_29:
        v5 += 16 * v9;
        if (++v7 >= v6)
        {
          unsigned int v30 = (v6 + 15) >> 4;
          int v31 = v138;
          int v32 = HIDWORD(v138);
          goto LABEL_32;
        }
      }
    }
    int v32 = 0;
    int v8 = 0;
    uint64_t v141 = 0;
    int v31 = 0;
    int v140 = 0;
    unsigned int v30 = 0;
LABEL_32:
    unsigned int v33 = (v31 + (v32 >> 1)) / v32;
    *(_DWORD *)(v3 + 4664) = v33;
    int v144 = v32 >> 1;
    if (v139)
    {
      unsigned int v34 = *(unsigned __int16 *)(v3 + 4562);
      if ((v34 + 15) >> 4 < v30) {
        unsigned int v30 = (v34 + 15) >> 4;
      }
      if (v6)
      {
        unsigned int v35 = 0;
        unsigned int v36 = 0;
        int v37 = -v30;
        do
        {
          if (v34)
          {
            unsigned int v38 = 0;
            int v39 = v36 + v30;
            int v40 = -v30;
            unsigned int v41 = v30;
            do
            {
              uint64_t v42 = *(void *)(v3 + 4656);
              if (v39 >= *(unsigned __int16 *)(v3 + 4560)) {
                uint64_t v43 = *(unsigned __int16 *)(v3 + 4560);
              }
              else {
                uint64_t v43 = v39;
              }
              if (((v36 - v30) & ~((int)(v36 - v30) >> 31)) >= v43)
              {
                int v45 = 0;
                int v44 = 0;
              }
              else
              {
                int v44 = 0;
                int v45 = 0;
                uint64_t v46 = v40 & ~(v40 >> 31);
                unsigned int v47 = v38 + v30;
                if ((int)(v38 + v30) >= (int)v34) {
                  unsigned int v47 = v34;
                }
                unsigned int v48 = (v38 - v30) & ~((int)(v38 - v30) >> 31);
                uint64_t v49 = v34;
                if ((int)v34 >= (int)v41) {
                  uint64_t v50 = v41;
                }
                else {
                  uint64_t v50 = v34;
                }
                uint64_t v51 = v50 - v46;
                int v52 = (unsigned __int8 *)(v42 + v46 + (v37 & ~(v37 >> 31)) * (unint64_t)v34);
                uint64_t v53 = (v36 - v30) & ~((int)(v36 - v30) >> 31);
                do
                {
                  if (v47 > v48)
                  {
                    int v54 = v52;
                    uint64_t v55 = v51;
                    do
                    {
                      int v56 = *v54++;
                      v45 += v56;
                      --v55;
                    }
                    while (v55);
                    v44 += v47 - v48;
                  }
                  ++v53;
                  v52 += v49;
                }
                while (v53 != v43);
              }
              int v57 = (v45 + (v44 >> 1)) / v44;
              int v58 = *(unsigned __int8 *)(v42 + v35);
              BOOL v59 = __OFSUB__(v58, v57);
              int v60 = v58 - v57;
              if (!((v60 < 0) ^ v59 | (v60 == 0))) {
                ++v8;
              }
              if (v60 < 0) {
                int v60 = -v60;
              }
              *(unsigned char *)(*(void *)(v3 + 4680) + v35) = v60;
              ++v38;
              ++v35;
              unsigned int v34 = *(unsigned __int16 *)(v3 + 4562);
              ++v41;
              ++v40;
            }
            while (v38 < v34);
            unsigned int v6 = *(unsigned __int16 *)(v3 + 4560);
          }
          ++v36;
          ++v37;
        }
        while (v36 < v6);
      }
    }
    unsigned int v61 = ((int)v141 + v144) / v32;
    *(_DWORD *)(v3 + 4632) = v61;
    *(_DWORD *)(v3 + 4636) = v141;
    *(_DWORD *)(v3 + 4664) = v33;
    double v62 = sub_1BBB4E9DC(sqrt((double)((v144 + (v8 << 8)) / v32)));
    *(_DWORD *)(v3 + 4676) = v62;
    *(_WORD *)(v3 + 4724) = (int)sub_1BBB4E9DC(sqrt((double)((v140 + (HIDWORD(v141) >> 1)) / HIDWORD(v141)))* (double)v62);
    *(_WORD *)(v3 + 4722) = sub_1BBB4E9DC(sqrt((double)v61));
    uint64_t v1 = a1;
    uint64_t v2 = v128;
    int v4 = v126;
    if (v131 != 1)
    {
      uint64_t v63 = *(int *)(v3 + 232);
      uint64_t v64 = *(void *)(v3 + 136);
      uint64_t v65 = *(int *)(v3 + 248);
      bzero(*(void **)(v3 + 1480), *(unsigned int *)(v3 + 1468));
      unsigned int v66 = *(unsigned __int16 *)(v3 + 1466);
      if (*(_WORD *)(v3 + 1466))
      {
        int v67 = 0;
        int v68 = 0;
        unint64_t v69 = 0;
        int v70 = 0;
        LODWORD(v71) = *(unsigned __int16 *)(v3 + 1464);
        do
        {
          if (v71)
          {
            unint64_t v72 = 0;
            uint64_t v73 = v132 + v67;
            uint64_t v74 = v64 + v68;
            int v75 = 4 * v70;
            do
            {
              uint64_t v76 = 0;
              uint64_t v77 = 4 * v75;
              char v78 = 1;
              do
              {
                int v79 = 0;
                uint64_t v80 = 0;
                char v81 = v78;
                unsigned int v82 = (_DWORD *)(v74 + 8 * v76);
                uint64_t v83 = 72 * v76;
                do
                {
                  uint64_t v84 = &v146[v83 - 4 * (v79 & 1)];
                  *uint64_t v84 = *v82;
                  v80 += 4;
                  v84[2] = v82[1];
                  unsigned int v82 = (_DWORD *)((char *)v82 + v65);
                  v83 += 8;
                  ++v79;
                }
                while (v80 != 32);
                char v78 = 0;
                uint64_t v76 = 1;
              }
              while ((v81 & 1) != 0);
              uint64_t v85 = 0;
              char v86 = 1;
              do
              {
                uint64_t v87 = 0;
                int v88 = 0;
                int v89 = 0;
                char v90 = v86;
                do
                {
                  v89 += *(_DWORD *)(v3
                                   + 1488
                                   + 4
                                   * (((v146[72 * v85 + v87]
                                                    - v146[72 * v85 + 2 + v87]) >> 1)
                                                  + 255));
                  v88 += *(_DWORD *)(v3
                                   + 1488
                                   + 4
                                   * (((v146[72 * v85 + 1 + v87]
                                                    - v146[72 * v85 + 3 + v87]) >> 1)
                                                  + 255));
                  v87 += 2;
                }
                while (v87 != 62);
                char v86 = 0;
                *(_DWORD *)((char *)v145 + ((8 * v85) | 4)) = v88;
                v145[2 * v85] = v89;
                uint64_t v85 = 1;
              }
              while ((v90 & 1) != 0);
              if ((v145[2] + v145[0]) > 0x7F || (v145[3] + v145[1]) > 0x7F)
              {
                for (uint64_t i = 0; i != 16; i += 4)
                  *(_DWORD *)(*(void *)(v3 + 1472) + v77 + i) = 210;
              }
              else
              {
                uint64_t v91 = 0;
                unsigned int v92 = 0;
                for (uint64_t j = 0; j != 4; ++j)
                {
                  int v94 = 0;
                  uint64_t v95 = 0;
                  int v96 = (_DWORD *)(v73 + 8 * (j & 1) + (int)(8 * v63 * (v92 >> 3)));
                  uint64_t v97 = v91;
                  do
                  {
                    unsigned int v98 = &v146[v97 - 4 * (v94 & 1)];
                    _DWORD *v98 = *v96;
                    v95 += 4;
                    v98[2] = v96[1];
                    int v96 = (_DWORD *)((char *)v96 + v63);
                    v97 += 8;
                    ++v94;
                  }
                  while (v95 != 32);
                  v92 += 4;
                  v91 += 72;
                }
                uint64_t v99 = 0;
                unint64_t v100 = v146;
                do
                {
                  uint64_t v101 = 0;
                  int v102 = 0;
                  do
                  {
                    v102 += *(_DWORD *)(v3
                                      + 4
                                      * (v100[v101] - (unint64_t)v100[v101 + 2])
                                      + 2508);
                    v101 += 2;
                  }
                  while (v101 != 62);
                  v145[v99++] = v102;
                  v100 += 72;
                }
                while (v99 != 4);
                for (uint64_t k = 0; k != 4; ++k)
                  *(_DWORD *)(*(void *)(v3 + 1472) + v77 + k * 4) = v145[k];
              }
              ++v72;
              ++v70;
              unint64_t v71 = *(unsigned __int16 *)(v3 + 1464);
              v74 += 16;
              v73 += 16;
              v75 += 4;
            }
            while (v72 < v71);
            unsigned int v66 = *(unsigned __int16 *)(v3 + 1466);
          }
          ++v69;
          v68 += 8 * v65;
          v67 += 16 * v63;
        }
        while (v69 < v66);
      }
      sub_1BBB5CBF0(v3, v120, 0, (unsigned int *)(v3 + 4800), v121, 0, 0, 0xFFu, 0xFFu, 0, 0, 0);
      uint64_t v1 = a1;
      uint64_t v2 = v128;
      int v4 = v126;
    }
  }
  if (!v4)
  {
    if (v2)
    {
      if (*(unsigned char *)(v1 + 34))
      {
        uint64_t v105 = v2;
        uint64_t v106 = v1;
        sub_1BBB5FD50(*(void *)(v3 + 128), *(void *)(v2 + 128), *(unsigned int *)(v3 + 224), *(_DWORD *)(v3 + 192), *(unsigned int *)(v3 + 232), 0, 0, 0, 0, 0);
        uint64_t v1 = v106;
        uint64_t v2 = v105;
        float v108 = fabsf(v107);
      }
      else
      {
        float v108 = 0.0;
      }
      *(float *)(v3 + 5012) = v108;
      if (v130 && v129)
      {
        if (v125)
        {
          int v109 = v135 - v136 + 1 + (v135 - v136 + 1) * (v142 - v137);
          *(_DWORD *)(v3 + 4828) = v124;
          uint64_t v110 = (v124 + (v109 >> 1)) / v109;
          *(_WORD *)(v3 + 4832) = v110;
          *(_WORD *)(v3 + 4834) = v110;
          int v111 = *(_DWORD *)(v3 + 4632);
          sub_1BBB15BF8(v3 + 4800, v2 + 4800, v111);
        }
        else
        {
          uint64_t v112 = v2;
          uint64_t v113 = v1;
          if (!sub_1BBB12008(*(unsigned __int8 **)(v2 + 488)))
          {
            uint64_t v114 = v113;
            uint64_t v115 = v112;
            *(_DWORD *)(*(void *)(v112 + 488) + 164) = 1;
            uint64_t v116 = *(void *)(v112 + 488);
            if (*(_DWORD *)(v116 + 152))
            {
              sub_1BBB1228C(v116);
              uint64_t v114 = v113;
              uint64_t v115 = v112;
            }
            int v117 = *(unsigned __int8 *)(v114 + 30);
            uint64_t v118 = v115;
            sub_1BBB5E8A0(v122, v115, 0, 0, *(_DWORD *)(v3 + 4808), 0, v117, v3, (unsigned int *)(v3 + 4800));
            sub_1BBB15D18(v3 + 4800, v117, v136, v135, v137, v142, *(void *)(v3 + 4624), *(void *)(v3 + 4680), v123[28], v3 + 19168, (float *)(v3 + 19312));
            if (v131 == 1) {
              sub_1BBB15BF8(v3 + 4800, v118 + 4800, *(_DWORD *)(v3 + 4632));
            }
            *(_WORD *)(v3 + 4838) = *(_WORD *)(v3 + 4832);
            uint64_t v119 = *(void *)(v118 + 488);
            *(_DWORD *)(v119 + 64) = 1;
            *(void *)(v119 + 56) = 0x100000001;
            *(_OWORD *)(v119 + 152) = xmmword_1BBB6FCD0;
            *(_DWORD *)(*(void *)(v118 + 488) + 164) = 0;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 5012) = 0;
      if (v130 && v129) {
        *(_WORD *)(v3 + 4838) = *(_WORD *)(v3 + 4724);
      }
    }
  }
}

uint64_t *sub_1BBAF3C7C(uint64_t *result)
{
  if (*((_DWORD *)result + 2))
  {
    uint64_t v1 = 0;
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *result;
      uint64_t v4 = *(void *)(*result + v1);
      if (v4)
      {
        *(unsigned char *)(v4 + 1) = 0;
        uint64_t v3 = *result;
      }
      uint64_t v5 = (void *)(v3 + v1);
      void *v5 = 0;
      v5[1] = 0;
      ++v2;
      v1 += 16;
    }
    while (v2 < *((unsigned int *)result + 2));
  }
  *((_DWORD *)result + 7) = 0;
  result[5] = 0;
  *((_DWORD *)result + 12) = *((_DWORD *)result + 8);
  return result;
}

uint64_t sub_1BBAF3CD0(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (_DWORD *)(result + 48);
  int v3 = *(_DWORD *)(result + 48);
  if (a2)
  {
    uint64_t v4 = (v3 - 1);
    if (v3 >= 1)
    {
      uint64_t v5 = *(void *)result + 16 * v4;
      *(void *)(*(void *)result + 16 * (v3 - 1)) = a2;
      *(_DWORD *)(v5 + 8) = 0;
      unsigned int v6 = (_DWORD *)(v5 + 8);
      --v3;
LABEL_10:
      if (*(unsigned char *)(a2 + 1395)) {
        *unsigned int v6 = 4;
      }
      goto LABEL_12;
    }
  }
  LODWORD(v7) = *(_DWORD *)(result + 8);
  uint64_t v8 = *(void *)(*(void *)result + 16 * (v7 - 1));
  if (v8)
  {
    *(unsigned char *)(v8 + 1) = 0;
    LODWORD(v7) = *(_DWORD *)(result + 8);
  }
  uint64_t v4 = v3;
  if ((int)v7 >= 2)
  {
    unint64_t v7 = v7;
    do
      *(_OWORD *)(*(void *)result + 16 * (v7 - 1)) = *(_OWORD *)(*(void *)result
                                                                                 + 16 * (v7 - 2));
    while (v7-- > 2);
  }
  uint64_t v10 = *(void *)result + 16 * v3;
  *(void *)uint64_t v10 = a2;
  *(_DWORD *)(v10 + 8) = 0;
  unsigned int v6 = (_DWORD *)(v10 + 8);
  if (a2) {
    goto LABEL_10;
  }
LABEL_12:
  *(_DWORD *)(result + 48) = v3;
  if (**(void **)(result + 16)) {
    ++*(_DWORD *)(result + 28);
  }
  if (a2)
  {
    unint64_t v2 = (_DWORD *)(result + 40);
  }
  else
  {
    *(_DWORD *)(*(void *)result + 16 * v4 + 8) |= 2u;
    if (v3 >= *(_DWORD *)(result + 32)) {
      return result;
    }
  }
  ++*v2;
  return result;
}

uint64_t sub_1BBAF3DD0(uint64_t a1)
{
  free(*(void **)(a1 + 168));
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  free(*(void **)(a1 + 184));
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  free(*(void **)(a1 + 200));
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_1BBAF3C7C((uint64_t *)a1);
  free(*(void **)a1);
  free(*(void **)(a1 + 112));
  *(void *)(a1 + 112) = 0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    sub_1BBB15BB8(v2);
    free(*(void **)(a1 + 72));
    *(void *)(a1 + 72) = 0;
  }
  int v3 = *(void ***)(a1 + 232);
  if (v3)
  {
    free(*v3);
    free(v3[6]);
    free(v3[7]);
    free(v3[8]);
    MEMORY[0x1C18605E0](v3, 0x1020C40699F9AC8);
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_1BBAF3EB8(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6 = a5;
  uint64_t v7 = a4;
  uint64_t v8 = (uint64_t)a3;
  uint64_t v9 = a1;
  uint64_t v722 = *MEMORY[0x1E4F143B8];
  v651 = (unsigned __int16 *)(a5 + 19112);
  uint64_t v10 = a5 + 5024;
  uint64_t v11 = a4 + 205800;
  v645 = a3 + 4813;
  if (!a5)
  {
    BOOL v12 = 0;
    if (a2) {
      goto LABEL_13;
    }
LABEL_11:
    int v15 = -1;
    goto LABEL_14;
  }
  *(unsigned char *)(a5 + 1) = 1;
  if (!a2)
  {
    BOOL v12 = 0;
    goto LABEL_11;
  }
  if (!a3[402]) {
    goto LABEL_12;
  }
  BOOL v12 = 0;
  uint64_t v13 = *(unsigned int *)(a5 + 1276);
  if ((v13 & 0x80000000) != 0) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (!v14) {
    goto LABEL_13;
  }
  if (*(_DWORD *)(a2 + 12) > v13) {
    BOOL v12 = *(unsigned __int8 *)(v14 + 8 * v13 + 7) != 0;
  }
  else {
LABEL_12:
  }
    BOOL v12 = 0;
LABEL_13:
  int v15 = *(unsigned __int8 *)(a2 + 532) != 1;
LABEL_14:
  uint64_t v681 = a4 + 1400;
  BOOL v661 = (v15 + 1) < 2;
  uint64_t v16 = a5;
  uint64_t v652 = a4 + 205800;
  uint64_t v653 = a5 + 5024;
  if (!a4) {
    goto LABEL_420;
  }
  uint64_t v17 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 48);
  uint64_t v659 = *(void *)v17;
  int v635 = *(_DWORD *)(v17 + 8);
  if (*(unsigned char *)(a4 + 208087))
  {
    if (a5)
    {
      uint64_t v18 = *(void *)(a4 + 205808);
      if (v18)
      {
        uint64_t v9 = a1;
        uint64_t v659 = sub_1BBB0AA4C(v18, a5);
      }
    }
  }
  uint64_t v19 = *(void *)(v11 + 2320);
  if (!v19 || *(unsigned char *)(v19 + 3462) != 1)
  {
LABEL_63:
    if (!v6) {
      goto LABEL_351;
    }
    goto LABEL_64;
  }
  uint64_t v20 = v7;
  uint64_t v21 = *(void *)(v11 + 8);
  BOOL v656 = v12;
  if (*(unsigned char *)(v11 + 134))
  {
    long long v718 = 0uLL;
    long long v719 = 0uLL;
    long long v716 = 0uLL;
    long long v717 = 0uLL;
    long long v714 = 0uLL;
    long long v715 = 0uLL;
    long long v712 = 0uLL;
    long long v713 = 0uLL;
    uint64_t v22 = v6;
    int v23 = *(_DWORD *)(v19 + 3452);
    int v24 = *(_DWORD *)(v19 + 3456);
    unsigned int v25 = sub_1BBB0A818(v21, &v712, 1, 0);
    uint64_t v26 = sub_1BBB0AA4C(v21, v22);
    if (v25)
    {
      uint64_t v27 = v25;
      int v28 = (uint64_t *)&v712;
      do
      {
        uint64_t v29 = *v28++;
        *(unsigned char *)(v29 + 32) = 1;
        --v27;
      }
      while (v27);
    }
    if (v26) {
      *(unsigned char *)(v26 + 32) = 1;
    }
    uint64_t v9 = a1;
    BOOL v12 = v656;
    if (!v25) {
      goto LABEL_62;
    }
    uint64_t v30 = 0;
    int v31 = 0;
    do
    {
      if (*(unsigned char *)(*(void *)((char *)&v712 + v30) + 1356)) {
        ++v31;
      }
      v30 += 8;
    }
    while (8 * v25 != v30);
    uint64_t v32 = 0;
    unsigned int v33 = (char *)&v712 + 8;
    uint64_t v34 = 1;
    do
    {
      uint64_t v35 = v32 + 1;
      if (v32 + 1 < (unint64_t)v25)
      {
        unsigned int v36 = v33;
        uint64_t v37 = v25;
        do
        {
          uint64_t v38 = *((void *)&v712 + v32);
          if (*(_DWORD *)(v38 + 1276) < *(_DWORD *)(*(void *)v36 + 1276))
          {
            *((void *)&v712 + v32) = *(void *)v36;
            *(void *)unsigned int v36 = v38;
          }
          --v37;
          v36 += 8;
        }
        while (v34 != v37);
      }
      ++v34;
      v33 += 8;
      ++v32;
    }
    while (v35 != v25);
    if (v31)
    {
      uint64_t v39 = v25 - 1;
      if ((int)v39 >= 1)
      {
        unsigned int v40 = v25 - 1;
        do
        {
          uint64_t v41 = *((void *)&v712 + v39);
          if (*(unsigned char *)(v41 + 1356) && (v40 & 0x80000000) == 0)
          {
            *((void *)&v712 + v39) = *((void *)&v712 + v40);
            *((void *)&v712 + v40--) = v41;
          }
          BOOL v149 = v39-- <= 0;
        }
        while (!v149);
      }
    }
    for (uint64_t i = 0; i != v25; ++i)
      *((_DWORD *)&v703 + i) = *(_DWORD *)(*((void *)&v712 + i) + 60);
    uint64_t v43 = 0;
    int v44 = (char *)&v703 + 4;
    uint64_t v45 = 1;
    do
    {
      uint64_t v46 = v43 + 1;
      if (v43 + 1 < (unint64_t)v25)
      {
        unsigned int v47 = (unsigned int *)v44;
        uint64_t v48 = v25;
        do
        {
          unsigned int v49 = *((_DWORD *)&v703 + v43);
          if (v49 < *v47)
          {
            *((_DWORD *)&v703 + v43) = *v47;
            unsigned int *v47 = v49;
          }
          --v48;
          ++v47;
        }
        while (v45 != v48);
      }
      ++v45;
      v44 += 4;
      ++v43;
    }
    while (v46 != v25);
    for (uint64_t j = 0; j != v25; ++j)
      *(_DWORD *)(*((void *)&v712 + j) + 60) = *((_DWORD *)&v703 + j);
    int v51 = v31 + 1;
    BOOL v52 = v25 >= *(_DWORD *)(v19 + 2980) - 1 && v25 == v51;
    if (!v52)
    {
LABEL_62:
      uint64_t v11 = v652;
      *(unsigned char *)(*(void *)(v652 + 2320) + 3462) = 0;
      uint64_t v6 = a5;
      goto LABEL_63;
    }
    uint64_t v98 = 0;
    int v99 = 0;
    uint64_t v100 = v19 + 224;
    uint64_t v101 = (int *)(v19 + 3260);
    uint64_t v102 = v19 + 224;
    do
    {
      uint64_t v103 = *((void *)&v712 + v98);
      *(_DWORD *)uint64_t v102 = *(_DWORD *)(v103 + 60);
      *(_DWORD *)(v102 + 4) = *(_DWORD *)(v103 + 1276);
      if (*(unsigned char *)(v103 + 1356))
      {
        *(_DWORD *)(v102 + 8) = 2;
        *(_DWORD *)(v102 + 4) = *(_DWORD *)(v103 + 1308);
        ++v99;
      }
      else
      {
        *(_DWORD *)(v102 + 8) = 1;
      }
      int v104 = (unsigned __int16 *)(v103 + 19112);
      *(void *)(v102 + 16) = *(int *)(v103 + 1332);
      *(_DWORD *)(v102 + 24) = *(_DWORD *)(v103 + 1336);
      *(_DWORD *)(v102 + 44) = *(unsigned __int8 *)(v103 + 25);
      int v105 = *(unsigned __int8 *)(v103 + 19129);
      BOOL v106 = v105 == 0;
      if (v105) {
        float v107 = v104 + 4;
      }
      else {
        float v107 = v104;
      }
      if (v106) {
        uint64_t v108 = 1;
      }
      else {
        uint64_t v108 = 5;
      }
      *(_DWORD *)(v102 + 28) = *v107;
      int v109 = v104[v108];
      *(_DWORD *)(v102 + 32) = 0;
      *(_DWORD *)(v102 + 36) = v109;
      *(_DWORD *)(v102 + 40) = 0;
      *(_DWORD *)(v102 + 68) = *(v101 - 1);
      int v110 = *v101;
      v101 += 2;
      *(_DWORD *)(v102 + 72) = v110;
      ++v98;
      v102 += 80;
    }
    while (v25 != v98);
    uint64_t v111 = 0;
    *(_DWORD *)(v19 + 1584) = v23;
    *(_DWORD *)(v19 + 1588) = v99;
    *(_DWORD *)(v19 + 1596) = v24;
    *(_DWORD *)(v19 + 1592) = v25;
    uint64_t v112 = v19 + 8 * v25;
    uint64_t v113 = v100 + 80 * v25;
    *(_DWORD *)(v113 + 68) = *(_DWORD *)(v112 + 3256);
    *(_DWORD *)(v113 + 72) = *(_DWORD *)(v112 + 3260);
    while (1)
    {
      uint64_t v114 = 0;
      uint64_t v11 = v652;
      while (1)
      {
        uint64_t v115 = *((void *)&v712 + v114);
        if (*(_DWORD *)(v115 + 60) == *(_DWORD *)(v100 + 80 * v111)) {
          break;
        }
        if (v25 == ++v114) {
          goto LABEL_150;
        }
      }
      uint64_t v116 = *(unsigned char *)(v115 + 19129) ? 160 : 128;
      uint64_t v117 = *(unsigned char *)(v115 + 19129) ? 168 : 136;
      if (v25 == v114 || *(_DWORD *)(*((void *)&v712 + v114) + 60) == -1) {
        break;
      }
      uint64_t v647 = v20;
      uint64_t v118 = *(void *)(v115 + v117);
      uint64_t v119 = *(void *)(v115 + v116);
      int v120 = *(_DWORD *)(v115 + 232);
      int v688 = *(_DWORD *)(v115 + 228);
      int v694 = *(_DWORD *)(v115 + 196);
      int v121 = IOSurfaceLookup(*(_DWORD *)(v100 + 80 * v111 + 68));
      if (v121)
      {
        unsigned int v122 = v121;
        long long v703 = 0uLL;
        long long v701 = 0uLL;
        IOSurfaceLock(v121, 0, 0);
        long long v703 = 0uLL;
        long long v701 = 0uLL;
        BaseAddress = (char *)IOSurfaceGetBaseAddress(v122);
        uint64_t v124 = &BaseAddress[*(int *)(v19 + 3568)];
        *(void *)&long long v703 = BaseAddress;
        *((void *)&v703 + 1) = v124;
        *(void *)&long long v701 = v119;
        *((void *)&v701 + 1) = v118;
        HIDWORD(v711) = v120;
        LODWORD(v711) = v120;
        if (v119) {
          BOOL v125 = BaseAddress == 0;
        }
        else {
          BOOL v125 = 1;
        }
        if (!v125)
        {
          if (*(unsigned char *)(v19 + 3544)) {
            uint64_t v126 = (v694 + 15) & 0xFFFFFFF0;
          }
          else {
            uint64_t v126 = (v694 + 31) & 0xFFFFFFE0;
          }
          off_1E9F82E28(&v703, &v701, &v711, (v688 + 15) & 0xFFFFFFF0, v126);
        }
        IOSurfaceUnlock(v122, 0, 0);
        CFRelease(v122);
      }
      ++v111;
      uint64_t v9 = a1;
      uint64_t v20 = v647;
      BOOL v12 = v656;
      if (v111 == v25)
      {
        uint64_t v8 = (uint64_t)a3;
        uint64_t v11 = v652;
        uint64_t v6 = a5;
        uint64_t v7 = v647;
        goto LABEL_111;
      }
    }
LABEL_150:
    uint64_t v8 = (uint64_t)a3;
    uint64_t v6 = a5;
    uint64_t v7 = v20;
LABEL_151:
    *(unsigned char *)(*(void *)(v11 + 2320) + 3462) = 0;
    *(unsigned char *)(v11 + 135) = 0;
  }
  else
  {
    long long v718 = 0uLL;
    long long v719 = 0uLL;
    long long v716 = 0uLL;
    long long v717 = 0uLL;
    long long v714 = 0uLL;
    long long v715 = 0uLL;
    long long v712 = 0uLL;
    long long v713 = 0uLL;
    unsigned int v73 = sub_1BBB0A818(v21, &v712, 1, 0);
    uint64_t v74 = sub_1BBB0AA4C(v21, v6);
    if (v73)
    {
      uint64_t v75 = v73;
      uint64_t v76 = (uint64_t *)&v712;
      do
      {
        uint64_t v77 = *v76++;
        *(unsigned char *)(v77 + 32) = 1;
        --v75;
      }
      while (v75);
    }
    uint64_t v646 = v7;
    if (v74) {
      *(unsigned char *)(v74 + 32) = 1;
    }
    uint64_t v9 = a1;
    if (v73)
    {
      uint64_t v78 = 0;
      uint64_t v79 = v19 + 224;
      a6.n128_u32[0] = 1;
      uint64_t v80 = v73;
      do
      {
        uint64_t v81 = 0;
        while (1)
        {
          uint64_t v82 = *((void *)&v712 + v81);
          if (*(_DWORD *)(v82 + 60) == *(_DWORD *)(v79 + 80 * v78)) {
            break;
          }
          if (v80 == ++v81) {
            goto LABEL_112;
          }
        }
        uint64_t v83 = *((void *)&v712 + v81);
        if (*(_DWORD *)(v83 + 60) == -1) {
          goto LABEL_112;
        }
        int v676 = *(_DWORD *)(v82 + 232);
        int v693 = *(_DWORD *)(v82 + 228);
        int v84 = *(_DWORD *)(v82 + 196);
        uint64_t v687 = v79;
        uint64_t v85 = v79 + 80 * v78;
        char v86 = IOSurfaceLookup(*(_DWORD *)(v85 + 68));
        __int16 v87 = *(_WORD *)(v85 + 28);
        *(_WORD *)(v83 + 19112) = v87;
        __int16 v88 = *(_WORD *)(v85 + 36);
        *(_WORD *)(v83 + 19114) = v88;
        *(unsigned char *)(v83 + 25) = *(_DWORD *)(v85 + 44);
        *(unsigned char *)(v83 + 19129) = 0;
        *(_WORD *)(v83 + 19120) = v87;
        *(_WORD *)(v83 + 19122) = v88;
        if (v86)
        {
          int v89 = v86;
          long long v703 = 0uLL;
          long long v701 = 0uLL;
          IOSurfaceLock(v86, 0, 0);
          long long v703 = 0uLL;
          long long v701 = 0uLL;
          char v90 = (char *)IOSurfaceGetBaseAddress(v89);
          uint64_t v91 = &v90[*(int *)(v19 + 3568)];
          *(void *)&long long v703 = v90;
          *((void *)&v703 + 1) = v91;
          long long v701 = *(_OWORD *)(v82 + 128);
          HIDWORD(v711) = v676;
          LODWORD(v711) = v676;
          if ((void)v701 && v90)
          {
            if (*(unsigned char *)(v19 + 3544)) {
              uint64_t v92 = (v84 + 15) & 0xFFFFFFF0;
            }
            else {
              uint64_t v92 = (v84 + 31) & 0xFFFFFFE0;
            }
            off_1E9F82E30(&v701, &v711, &v703, (v693 + 15) & 0xFFFFFFF0, v92);
          }
          IOSurfaceUnlock(v89, 0, 0);
          CFRelease(v89);
        }
        uint64_t v93 = *(void *)(v82 + 488);
        if (v93)
        {
          *(_DWORD *)(v93 + 64) = 1;
          *(void *)(v93 + 56) = 0x100000001;
          *(_OWORD *)(v93 + 152) = xmmword_1BBB6FCD0;
          int v94 = *(unsigned __int8 **)(v82 + 488);
        }
        else
        {
          int v94 = 0;
        }
        uint64_t v8 = (uint64_t)a3;
        uint64_t v6 = a5;
        uint64_t v9 = a1;
        if (sub_1BBB12008(v94))
        {
LABEL_112:
          uint64_t v11 = v652;
          uint64_t v7 = v646;
          BOOL v12 = v656;
          goto LABEL_151;
        }
        int v96 = v84 / 16;
        uint64_t v95 = *(void **)(v82 + 488);
        sub_1BBB5523C(*(void *)(v95[2] + 32) - (32 * *(_DWORD *)(v95[2] + 136)) - 32, v95[10], v95[11], v95[12], *(_DWORD *)(v95[2] + 136), v693 / 16, v96, 0, v96);
        uint64_t v97 = *(void *)(v82 + 488);
        if (byte_1E9F82E60) {
          sub_1BBB55548(v97);
        }
        else {
          MEMORY[0](v97);
        }
        sub_1BBB5663C((void *)(v82 + 96), 1);
        sub_1BBB55804(*(void *)(*(void *)(v82 + 488) + 16), 0, v96);
        uint64_t v79 = v687;
        uint64_t v9 = a1;
        ++v78;
      }
      while (v78 != v80);
    }
    uint64_t v11 = v652;
    uint64_t v7 = v646;
    BOOL v12 = v656;
LABEL_111:
    *(unsigned char *)(v11 + 133) = *(unsigned char *)(v11 + 134);
  }
  uint64_t v10 = v653;
  if (!v6) {
    goto LABEL_351;
  }
LABEL_64:
  if (*(unsigned char *)(v7 + 1057) == 1)
  {
    BOOL v657 = v12;
    uint64_t v53 = v7;
    unsigned int v54 = *(unsigned __int8 *)(v8 + 679);
    int v55 = *(unsigned __int8 *)(v8 + 615);
    int v56 = *(unsigned __int8 *)(v8 + 321);
    uint64_t v57 = *(void *)(v11 + 8);
    long long v718 = 0u;
    long long v719 = 0u;
    long long v716 = 0u;
    long long v717 = 0u;
    long long v714 = 0u;
    long long v715 = 0u;
    long long v712 = 0u;
    long long v713 = 0u;
    long long v709 = 0u;
    long long v710 = 0u;
    long long v707 = 0u;
    long long v708 = 0u;
    long long v705 = 0u;
    long long v706 = 0u;
    long long v703 = 0u;
    long long v704 = 0u;
    uint64_t v58 = *(unsigned int *)(v53 + 1580);
    int v59 = *(_DWORD *)(v53 + 1580);
    uint64_t v60 = v53;
    uint64_t v61 = *(int *)(v53 + 1576);
    int v673 = v59;
    if (v55)
    {
      LODWORD(v62) = sub_1BBB0AB04(v57, &v712, v6, v56 != 0, 0);
      if (v62)
      {
        unsigned int v63 = 0;
        uint64_t v64 = 0;
        uint64_t v65 = v62;
        unsigned int v66 = &v712;
        uint64_t v67 = v62;
        do
        {
          unsigned int v68 = *(_DWORD *)(*(void *)v66 + 1276);
          if (v68 >= v63 && v68 < *(_DWORD *)(v6 + 1276))
          {
            uint64_t v64 = *(void *)v66;
            unsigned int v63 = *(_DWORD *)(*(void *)v66 + 1276);
          }
          unsigned int v66 = (long long *)((char *)v66 + 8);
          --v67;
        }
        while (v67);
        if (v54 == 1 && *(unsigned char *)(v6 + 24) && v64)
        {
          int v69 = *(unsigned __int8 *)(v64 + 25);
          if (*(unsigned char *)(v64 + 25))
          {
            unsigned int v54 = 1;
            goto LABEL_160;
          }
          unint64_t v127 = (uint64_t *)&v712;
          do
          {
            uint64_t v128 = *v127++;
            v69 += *(unsigned __int8 *)(v128 + 25);
            --v65;
          }
          while (v65);
          if (v69) {
            unsigned int v54 = 2;
          }
          else {
            unsigned int v54 = 1;
          }
        }
        if (v64)
        {
LABEL_160:
          *(void *)&long long v703 = v64;
          if (v62)
          {
            uint64_t v129 = 0;
            uint64_t v9 = a1;
            while (*((void *)&v712 + v129) != v64)
            {
              if (v62 == ++v129)
              {
                LODWORD(v129) = v62;
                break;
              }
            }
            uint64_t v62 = (v62 - 1);
            if (v129 < v62) {
              *((void *)&v712 + v129) = *((void *)&v712 + v62);
            }
            *((void *)&v712 + v62) = 0;
          }
          else
          {
            uint64_t v9 = a1;
          }
          goto LABEL_171;
        }
      }
    }
    else
    {
      LODWORD(v62) = sub_1BBB0A818(v57, &v712, 1, 0);
      uint64_t v64 = sub_1BBB0AA4C(v57, v6);
      if (v62)
      {
        uint64_t v70 = v62;
        unint64_t v71 = (uint64_t *)&v712;
        do
        {
          uint64_t v72 = *v71++;
          *(unsigned char *)(v72 + 32) = 1;
          --v70;
        }
        while (v70);
      }
      if (v64)
      {
        *(unsigned char *)(v64 + 32) = 1;
        int v59 = v58;
        goto LABEL_160;
      }
      int v59 = v58;
    }
    uint64_t v64 = sub_1BBB0AA4C(v57, v6);
    *(void *)&long long v703 = v64;
    uint64_t v9 = a1;
    if (!v64)
    {
      unsigned int v130 = 0;
      unsigned int v131 = 0;
      goto LABEL_178;
    }
LABEL_171:
    if (v61 == *(unsigned __int16 *)(v64 + 19112) && v59 == *(unsigned __int16 *)(v64 + 19114))
    {
      unsigned int v131 = 0;
    }
    else
    {
      if (v61 != *(unsigned __int16 *)(v64 + 19120))
      {
        unsigned int v130 = 1;
        unsigned int v131 = 1;
        goto LABEL_178;
      }
      unsigned int v131 = v59 != *(unsigned __int16 *)(v64 + 19122);
    }
    unsigned int v130 = 1;
LABEL_178:
    if (v131 < v54)
    {
      uint64_t v62 = v62;
      do
      {
        if (!v62) {
          break;
        }
        uint64_t v132 = 0;
        int v133 = 0;
        unsigned int v134 = 0;
        char v135 = 0;
        do
        {
          uint64_t v136 = *((void *)&v712 + v132);
          if (*(unsigned char *)(v136 + 25) && *(unsigned char *)(v136 + 1356))
          {
            unsigned int v137 = *(_DWORD *)(v136 + 1276);
            if ((v135 & (v137 <= v134)) != 0)
            {
              char v135 = 1;
            }
            else
            {
              *((void *)&v703 + v130) = v136;
              char v135 = 1;
              unsigned int v134 = v137;
              int v133 = v132;
            }
          }
          ++v132;
        }
        while (v62 != v132);
        if ((v135 & 1) == 0) {
          break;
        }
        *((void *)&v712 + v133) = *((void *)&v712 + --v62);
        *((void *)&v712 + v62) = 0;
        int v138 = (v61 != *(unsigned __int16 *)(*((void *)&v703 + v130) + 19112)
             || v58 != *(unsigned __int16 *)(*((void *)&v703 + v130) + 19114))
            && (v61 != *(unsigned __int16 *)(*((void *)&v703 + v130) + 19120)
             || v59 != *(unsigned __int16 *)(*((void *)&v703 + v130) + 19122));
        v131 += v138;
        ++v130;
      }
      while (v131 < v54);
    }
    if (v131 >= v54)
    {
LABEL_211:
      if (v62)
      {
        uint64_t v146 = v62;
        uint64_t v147 = (uint64_t *)&v712;
        do
        {
          uint64_t v148 = *v147++;
          *(unsigned char *)(v148 + 32) = 0;
          --v146;
        }
        while (v146);
      }
    }
    else
    {
      uint64_t v62 = v62;
      while (v62)
      {
        uint64_t v139 = 0;
        int v140 = 0;
        unsigned int v141 = 0;
        char v142 = 1;
        do
        {
          uint64_t v143 = *((void *)&v712 + v139);
          unsigned int v144 = *(_DWORD *)(v143 + 1276);
          if ((v142 & 1) != 0 || v144 > v141)
          {
            *((void *)&v703 + v130) = v143;
            unsigned int v141 = v144;
            int v140 = v139;
          }
          char v142 = 0;
          ++v139;
        }
        while (v62 != v139);
        *((void *)&v712 + v140) = *((void *)&v712 + --v62);
        *((void *)&v712 + v62) = 0;
        if (v61 == *(unsigned __int16 *)(*((void *)&v703 + v130) + 19112)
          && v58 == *(unsigned __int16 *)(*((void *)&v703 + v130) + 19114))
        {
          int v145 = 0;
        }
        else
        {
          int v145 = v61 != *(unsigned __int16 *)(*((void *)&v703 + v130) + 19120)
              || v59 != *(unsigned __int16 *)(*((void *)&v703 + v130) + 19122);
        }
        v131 += v145;
        ++v130;
        if (v131 >= v54) {
          goto LABEL_211;
        }
      }
    }
    *(unsigned char *)(v681 + 3677) = 0;
    uint64_t v671 = v58;
    uint64_t v648 = v60;
    uint64_t v664 = v57;
    if (*(unsigned char *)(v60 + 180)
      || ((v669 = *(_DWORD *)(v6 + 224), int v667 = *(_DWORD *)(v6 + 192), (int)v61 <= v669)
        ? (BOOL v149 = (int)v58 <= *(_DWORD *)(v6 + 192))
        : (BOOL v149 = 0),
          v149))
    {
      int v669 = 0;
      int v667 = 0;
    }
    if (v130)
    {
      uint64_t v150 = 0;
      v643 = (unsigned int *)(v648 + 57100);
      BOOL v151 = v669 > 0;
      BOOL v152 = v667 > 0;
      BOOL v153 = !v151 || !v152;
      if (v151 && v152) {
        int v154 = v669;
      }
      else {
        int v154 = v61;
      }
      if (v153) {
        uint64_t v155 = v673;
      }
      else {
        uint64_t v155 = v667;
      }
      v627 = (int8x8_t *)(v648 + 1328);
      v626 = (uint64_t *)(v648 + 1072);
      if ((int)v155 >= 0) {
        int v156 = v155;
      }
      else {
        int v156 = v155 + 1;
      }
      int v625 = v156 >> 1;
      int v684 = v154;
      uint64_t v622 = v154;
      int v157 = (int)v155 >> 1;
      if ((int)v155 >> 1 <= 1) {
        uint64_t v158 = 1;
      }
      else {
        uint64_t v158 = v157;
      }
      uint64_t v618 = v158;
      int v619 = v155;
      uint64_t v624 = (uint64_t)(int)v155 >> 1;
      if ((int)v58 >= 0) {
        int v159 = v58;
      }
      else {
        int v159 = v58 + 1;
      }
      uint64_t v160 = (v159 >> 1);
      uint64_t v623 = (uint64_t)v159 >> 1;
      int v641 = (int)v61 / 16;
      int v639 = (int)v58 / 16;
      unsigned int v637 = (int)v58 / 16 + 2;
      uint64_t v161 = v130;
      uint64_t v689 = v155;
      uint64_t v617 = -(uint64_t)(int)v155;
      uint64_t v616 = -(uint64_t)v157;
      uint64_t v620 = -(uint64_t)(int)v58;
      uint64_t v621 = v160;
      uint64_t v615 = -(uint64_t)(int)v160;
      a6.n128_u32[0] = 1;
      uint64_t v677 = v130;
      while (1)
      {
        uint64_t v162 = *((void *)&v703 + v150);
        size_t v163 = *(int *)(v162 + 228);
        if (!*(unsigned char *)(v11 + 133)) {
          break;
        }
        if (!*(unsigned char *)(v11 + 136))
        {
          int v164 = sub_1BBB0A818(v664, &v701, 1, 0);
          uint64_t v165 = sub_1BBB075A0(*(void *)(v11 + 2320), v61, v671, v162, v164, v163, v669, v667, &v711);
          if (v165)
          {
            uint64_t v260 = v165;
LABEL_409:
            CFLog();
            CFLog();
            return v260;
          }
LABEL_345:
          uint64_t v9 = a1;
          uint64_t v161 = v677;
        }
LABEL_346:
        if (++v150 == v161) {
          goto LABEL_350;
        }
      }
      unsigned int v166 = (_WORD *)(v162 + 19112);
      unsigned int v167 = *(unsigned __int16 *)(v162 + 19112);
      unsigned int v168 = *(unsigned __int16 *)(v162 + 19114);
      if (v684 == v167 && v689 == v168) {
        goto LABEL_346;
      }
      uint64_t v170 = *(int *)(v162 + 196);
      int v171 = *(_DWORD *)(v162 + 232);
      uint64_t v172 = v171;
      int v173 = *(_DWORD *)(v162 + 244);
      int v174 = *(_DWORD *)(v162 + 248);
      uint64_t v695 = v174;
      signed int v175 = *(_DWORD *)(v162 + 212);
      if (*(unsigned char *)(v162 + 19129) == 1)
      {
        unint64_t v176 = *(const void **)(v162 + 160);
        if (v176)
        {
          if (*(void *)(v162 + 168))
          {
            int v177 = *(void **)(v162 + 128);
            if (v177)
            {
              if (*(void *)(v162 + 136))
              {
                int v628 = *(_DWORD *)(v162 + 244);
                signed int v630 = *(_DWORD *)(v162 + 212);
                uint64_t v632 = *(int *)(v162 + 196);
                int v613 = *(_DWORD *)(v162 + 232);
                if (*(unsigned char *)(v648 + 1724))
                {
                  memcpy(v177, v176, v171 * (int)v170);
                  memcpy(*(void **)(v162 + 136), *(const void **)(v162 + 168), v630 * v174);
                }
                else
                {
                  memcpy(v177, v176, v171 * (unint64_t)*(unsigned __int16 *)(v162 + 19122));
                  memcpy(*(void **)(v162 + 136), *(const void **)(v162 + 168), v174 * (*(unsigned __int16 *)(v162 + 19122) >> 1));
                  int v178 = (unsigned __int16)*v166;
                  if (v178 > *(unsigned __int16 *)(v162 + 19120))
                  {
                    LODWORD(v179) = *(unsigned __int16 *)(v162 + 19114);
                    LODWORD(v180) = *(unsigned __int16 *)(v162 + 19122);
                    if (v179 > v180
                      && (int)v163 >= v178
                      && v628 >= v178
                      && (int)v632 >= (int)v179
                      && (int)(v179 >> 1) <= v630)
                    {
                      if (*(_WORD *)(v162 + 19122))
                      {
                        uint64_t v181 = 0;
                        unint64_t v182 = 0;
                        do
                        {
                          memset((void *)(*(void *)(v162 + 128) + *(unsigned __int16 *)(v162 + 19120) + v181), 128, (unsigned __int16)*v166 - (unint64_t)*(unsigned __int16 *)(v162 + 19120));
                          ++v182;
                          unint64_t v180 = *(unsigned __int16 *)(v162 + 19122);
                          v181 += v172;
                        }
                        while (v182 < v180);
                        LODWORD(v179) = *(unsigned __int16 *)(v162 + 19114);
                      }
                      if (v179 > v180)
                      {
                        unint64_t v183 = v180;
                        uint64_t v184 = (int)v172 * (uint64_t)(int)v180;
                        do
                        {
                          memset((void *)(*(void *)(v162 + 128) + v184), 128, (unsigned __int16)*v166);
                          ++v183;
                          unint64_t v179 = *(unsigned __int16 *)(v162 + 19114);
                          v184 += v172;
                        }
                        while (v183 < v179);
                        LODWORD(v180) = *(unsigned __int16 *)(v162 + 19122);
                      }
                      if (v180 >= 2)
                      {
                        uint64_t v185 = 0;
                        unint64_t v186 = 0;
                        do
                        {
                          memset((void *)(*(void *)(v162 + 136) + *(unsigned __int16 *)(v162 + 19120) + v185), 128, (unsigned __int16)*v166 - (unint64_t)*(unsigned __int16 *)(v162 + 19120));
                          ++v186;
                          unint64_t v179 = *(unsigned __int16 *)(v162 + 19122);
                          v185 += v174;
                        }
                        while (v186 < v179 >> 1);
                        unint64_t v180 = v179 >> 1;
                        LODWORD(v179) = *(unsigned __int16 *)(v162 + 19114);
                      }
                      else
                      {
                        LODWORD(v180) = v180 >> 1;
                      }
                      if (v180 < v179 >> 1)
                      {
                        unint64_t v187 = v180;
                        uint64_t v188 = v174 * (uint64_t)(int)v180;
                        do
                        {
                          memset((void *)(*(void *)(v162 + 136) + v188), 128, (unsigned __int16)*v166);
                          ++v187;
                          v188 += v174;
                        }
                        while (v187 < (unint64_t)*(unsigned __int16 *)(v162 + 19114) >> 1);
                      }
                    }
                  }
                }
                unsigned int v167 = *(unsigned __int16 *)(v162 + 19120);
                _WORD *v166 = v167;
                unsigned int v168 = *(unsigned __int16 *)(v162 + 19122);
                *(_WORD *)(v162 + 19114) = v168;
                uint64_t v170 = v632;
                int v173 = v628;
                signed int v175 = v630;
                int v171 = v613;
              }
            }
          }
        }
      }
      if (v167 != v61 || v168 != v673)
      {
        unsigned int v190 = *(const void **)(v162 + 128);
        if (v190)
        {
          if (*(void *)(v162 + 136))
          {
            uint64_t v633 = v170;
            int v629 = v173;
            int v631 = v175;
            if (!*(unsigned char *)(v162 + 19129))
            {
              unsigned int v193 = *(void **)(v162 + 160);
              if (v193)
              {
                if (*(void *)(v162 + 168)
                  && v167 == *(unsigned __int16 *)(v162 + 19120)
                  && v168 == *(unsigned __int16 *)(v162 + 19122))
                {
                  int v614 = v171;
                  if (*(unsigned char *)(v648 + 1724))
                  {
                    memcpy(v193, v190, v171 * (int)v170);
                    unsigned int v194 = *(const void **)(v162 + 136);
                    int v195 = *(void **)(v162 + 168);
                    int v196 = v631 * v174;
                  }
                  else
                  {
                    memcpy(v193, v190, (int)(v168 * v171));
                    unsigned int v194 = *(const void **)(v162 + 136);
                    int v195 = *(void **)(v162 + 168);
                    int v196 = v174 * (*(unsigned __int16 *)(v162 + 19122) >> 1);
                  }
                  memcpy(v195, v194, v196);
                  *(unsigned char *)(v162 + 19129) = 1;
                  unsigned int v190 = *(const void **)(v162 + 128);
                  int v171 = v614;
                }
              }
            }
            *(void *)(v648 + 1328) = v190;
            *(void *)(v648 + 1336) = *(void *)(v162 + 136);
            *(void *)(v648 + 1344) = *(void *)(v162 + 128);
            *(void *)(v648 + 1352) = *(void *)(v162 + 136);
            *(_DWORD *)(v648 + 1368) = 1;
            if (*(unsigned char *)(v648 + 1625))
            {
              BOOL v191 = 0;
              int v192 = 8;
            }
            else
            {
              BOOL v191 = *(unsigned char *)(v648 + 1626) != 0;
              if (*(unsigned char *)(v648 + 1626)) {
                int v192 = 4;
              }
              else {
                int v192 = 5;
              }
            }
            *(_DWORD *)(v648 + 1376) = v192;
            *(_OWORD *)uint64_t v681 = xmmword_1BBB6FCE0;
            *(_DWORD *)(v648 + 1420) = 0;
            *(void *)(v648 + 1424) = 0;
            *(_DWORD *)(v648 + 1436) = 0;
            *(_DWORD *)(v648 + 1468) = 0;
            *(void *)(v648 + 1472) = 0;
            *(_DWORD *)(v648 + 1480) = v167;
            *(_DWORD *)(v648 + 1484) = v684;
            *(_DWORD *)(v648 + 1488) = v168;
            *(_DWORD *)(v648 + 1492) = v689;
            *(_DWORD *)(v648 + 1496) = v171;
            *(_DWORD *)(v648 + 1500) = v171;
            *(_DWORD *)(v648 + 1504) = v174;
            *(_DWORD *)(v648 + 1508) = v174;
            *(void *)(v648 + 1512) = 0;
            *(void *)(v648 + 1520) = 0;
            *(unsigned char *)(v648 + 1568) = v191;
            *(unsigned char *)(v648 + 1569) = 0;
            uint64_t v197 = *(void *)(v648 + 1072);
            if (!v197)
            {
              if (sub_1BBB4EE18(v626, (uint64_t)v627)) {
                goto LABEL_408;
              }
              uint64_t v197 = *v626;
            }
            if (sub_1BBB4EFD8(v197, v627))
            {
LABEL_408:
              uint64_t v260 = 4294958327;
              goto LABEL_409;
            }
            if (*(unsigned char *)(v648 + 1724))
            {
              if ((int)v163 >= v684 && v684 <= v629 && (int)v689 <= (int)v633 && v625 <= v631)
              {
                if ((int)v689 >= 1)
                {
                  uint64_t v198 = v622;
                  uint64_t v199 = v689;
                  do
                  {
                    memset((void *)(*(void *)(v162 + 128) + v198), 128, (int)v163 - v684);
                    v198 += v172;
                    --v199;
                  }
                  while (v199);
                }
                if ((int)v689 < (int)v633)
                {
                  uint64_t v200 = v617 + v633;
                  uint64_t v201 = v619 * (uint64_t)(int)v172;
                  do
                  {
                    memset((void *)(*(void *)(v162 + 128) + v201), 128, v163);
                    v201 += v172;
                    --v200;
                  }
                  while (v200);
                }
                if ((int)v689 >= 2)
                {
                  uint64_t v202 = v622;
                  uint64_t v203 = v618;
                  do
                  {
                    memset((void *)(*(void *)(v162 + 136) + v202), 128, (int)v163 - v684);
                    v202 += v695;
                    --v203;
                  }
                  while (v203);
                }
                if ((int)v624 < (int)v633 >> 1)
                {
                  uint64_t v204 = v616 + ((int)v633 >> 1);
                  uint64_t v205 = (int)v624 * (uint64_t)(int)v695;
                  do
                  {
                    memset((void *)(*(void *)(v162 + 136) + v205), 128, v163);
                    v205 += v695;
                    --v204;
                  }
                  while (v204);
                }
              }
            }
            else if ((int)v167 > (int)v61 {
                   && (int)v168 > (int)v671
            }
                   && (int)v163 >= (int)v61
                   && v629 >= (int)v61
                   && (int)v633 >= v673
                   && (int)v623 <= v631)
            {
              if ((int)v671 > 0)
              {
                uint64_t v206 = v61;
                uint64_t v207 = v671;
                do
                {
                  memset((void *)(*(void *)(v162 + 128) + v206), 128, (int)(v167 - v61));
                  v206 += v172;
                  --v207;
                }
                while (v207);
              }
              size_t v208 = v167;
              uint64_t v209 = v673 * (uint64_t)(int)v172;
              uint64_t v210 = v620 + v168;
              do
              {
                memset((void *)(*(void *)(v162 + 128) + v209), 128, v167);
                v209 += v172;
                --v210;
              }
              while (v210);
              if ((int)v671 >= 2)
              {
                size_t v211 = (int)(v167 - v61);
                uint64_t v212 = v61;
                uint64_t v213 = v621;
                do
                {
                  memset((void *)(*(void *)(v162 + 136) + v212), 128, v211);
                  v212 += v695;
                  --v213;
                }
                while (v213);
              }
              uint64_t v6 = a5;
              if ((int)v621 < (int)(v168 >> 1))
              {
                uint64_t v214 = v615 + (v168 >> 1);
                uint64_t v215 = (int)v623 * (uint64_t)(int)v695;
                do
                {
                  memset((void *)(*(void *)(v162 + 136) + v215), 128, v208);
                  v215 += v695;
                  --v214;
                }
                while (v214);
              }
            }
            _WORD *v166 = v61;
            *(_WORD *)(v162 + 19114) = v673;
            *(unsigned char *)(v681 + 3677) = 1;
          }
        }
      }
      uint64_t v216 = *(void *)(v162 + 488);
      if (v216)
      {
        *(_DWORD *)(v216 + 64) = 1;
        *(void *)(v216 + 56) = 0x100000001;
        *(_OWORD *)(v216 + 152) = xmmword_1BBB6FCD0;
        CFDictionaryRef v217 = *(unsigned __int8 **)(v162 + 488);
      }
      else
      {
        CFDictionaryRef v217 = 0;
      }
      uint64_t v8 = (uint64_t)a3;
      uint64_t v11 = v652;
      uint64_t v218 = sub_1BBB12008(v217);
      if (v218)
      {
        uint64_t v260 = v218;
        goto LABEL_409;
      }
      *(_DWORD *)(v652 + 2292) = v641;
      if (v637 >= *v643) {
        unsigned int v219 = *v643;
      }
      else {
        unsigned int v219 = v637;
      }
      *(_DWORD *)(v652 + 2296) = v219;
      unint64_t v220 = *(void **)(v162 + 488);
      sub_1BBB5523C(*(void *)(v220[2] + 32) - (32 * *(_DWORD *)(v220[2] + 136)) - 32, v220[10], v220[11], v220[12], *(_DWORD *)(v220[2] + 136), v641, v219, 0, v219);
      uint64_t v221 = *(void *)(v162 + 488);
      if (byte_1E9F82E60) {
        sub_1BBB55548(v221);
      }
      else {
        MEMORY[0](v221);
      }
      sub_1BBB55804(*(void *)(*(void *)(v162 + 488) + 16), 0, v639);
      goto LABEL_345;
    }
LABEL_350:
    uint64_t v7 = v648;
    uint64_t v10 = v653;
    BOOL v12 = v657;
  }
LABEL_351:
  if (*(unsigned char *)(v11 + 2314))
  {
    uint64_t v222 = *(void *)(v11 + 8);
    long long v718 = 0u;
    long long v719 = 0u;
    long long v716 = 0u;
    long long v717 = 0u;
    long long v714 = 0u;
    long long v715 = 0u;
    long long v712 = 0u;
    long long v713 = 0u;
    if (*(unsigned char *)(v7 + 1057) == 1) {
      unsigned int v223 = sub_1BBB0A89C(v222, &v712, 0);
    }
    else {
      unsigned int v223 = sub_1BBB0AB04(v222, &v712, v6, 0, 0);
    }
    *(_DWORD *)(v10 + 13956) = 0;
    uint64_t v9 = a1;
    if (v223)
    {
      unsigned int v224 = 0;
      unsigned int v225 = (uint64_t *)&v712;
      uint64_t v226 = v223;
      do
      {
        uint64_t v227 = *v225;
        if (*v225 && !*(unsigned char *)(v227 + 14))
        {
          a6.n128_f64[0] = sub_1BBB158E8(v227 + 19320, a5 + 19320);
          double v231 = v229 + v229;
          double v232 = v228 * (v228 + v228);
          double v233 = 1.0 - v229 * (v229 + v229);
          if (vabdd_f64(v233, v232) >= 0.00000001)
          {
            double v234 = v233 - v232;
            double v235 = v230 + v230;
            double v236 = (v229 * v235 - a6.n128_f64[0] * (v228 + v228)) / v234;
            double v237 = (v228 * v235 + a6.n128_f64[0] * v231) / v234;
            double v238 = -v236;
            if (*((_DWORD *)v651 + 60)) {
              double v238 = v236;
            }
            a6.n128_f64[0] = v237 * 342.0 * 4.0;
            *(_DWORD *)(a5 + 4 * v224 + 18852) = *(_DWORD *)(v227 + 1276);
            *(_DWORD *)(a5 + 18724 + 4 * *(unsigned int *)(v653 + 13956)) = (unsigned __int16)llround(v238 * 435.0 * 4.0) | ((unsigned __int16)llround(a6.n128_f64[0]) << 16);
            unsigned int v224 = *(_DWORD *)(v653 + 13956) + 1;
            *(_DWORD *)(v653 + 13956) = v224;
          }
          uint64_t v9 = a1;
        }
        ++v225;
        --v226;
      }
      while (v226);
    }
    uint64_t v8 = (uint64_t)a3;
    uint64_t v11 = v652;
    uint64_t v10 = v653;
    uint64_t v6 = a5;
  }
  uint64_t v16 = v6;
  if (!*(unsigned char *)(v11 + 136))
  {
    uint64_t v239 = v7;
    int v240 = *(uint64_t **)(v9 + 232);
    if (*((unsigned char *)v240 + 8))
    {
      char v241 = *(unsigned char *)(v8 + 381);
      *(_WORD *)(*v240 + 44) = 0;
      *(_WORD *)(*v240 + 46) = 0;
      *(void *)uint64_t *v240 = v6;
      *(void *)(*v240 + 16) = *(void *)(v11 + 8);
      *(unsigned char *)(*v240 + 33) = v12;
      *(unsigned char *)(*v240 + 32) = 0;
      *(unsigned char *)(*v240 + 34) = v661;
      *(unsigned char *)(*v240 + 36) = *(unsigned char *)(v8 + 322);
      *(_WORD *)(*v240 + 38) = *(_DWORD *)(v8 + 244);
      *(unsigned char *)(*v240 + 48) = *(unsigned char *)(v8 + 673);
      if (*((unsigned char *)v240 + 9)) {
        uint64_t v659 = v240[2];
      }
      *(void *)(*v240 + 8) = v659;
      uint64_t v242 = *v240;
      if (*((_DWORD *)v240 + 8) && *(void *)(v242 + 8)) {
        unsigned int v243 = v240 + 3;
      }
      else {
        unsigned int v243 = (void *)(v242 + 8);
      }
      char v244 = v241 | v635 & 2;
      *(void *)(v242 + 24) = *v243;
      if (v6)
      {
        v240[2] = v6;
        if (v12)
        {
          *((_DWORD *)v240 + 8) = 1;
        }
        else
        {
          *((_DWORD *)v240 + 8) = 0;
          v240[3] = v6;
          *(_WORD *)(*v240 + 44) = *v651;
          *(_WORD *)(*v240 + 46) = v651[1];
        }
        if (*((unsigned __int8 *)v240 + 8) > 1u) {
          char v244 = 0;
        }
        *(unsigned char *)(*v240 + 35) = v244;
        ++*((unsigned char *)v240 + 9);
      }
      else
      {
        *((_DWORD *)v240 + 8) = 1;
        if (*((unsigned __int8 *)v240 + 8) > 1u) {
          char v244 = 0;
        }
        *(unsigned char *)(*v240 + 35) = v244;
      }
      unsigned int v245 = *((unsigned __int8 *)v240 + 8);
      unsigned int v246 = (uint64_t *)(*v240 + 56 * (int)(v245 - 1));
      uint64_t v16 = *v246;
      if (*v246)
      {
        if (*(unsigned char *)(*v240 + 56 * (int)(v245 - 1) + 32)) {
          goto LABEL_413;
        }
        if (*((unsigned char *)v240 + 8))
        {
          uint64_t v247 = 0;
          uint64_t v248 = 0;
          unsigned int v249 = 0;
          int v250 = -1;
          do
          {
            uint64_t v251 = *v240;
            unsigned int v252 = v245 + v250;
            CFTypeID v253 = (void *)(*v240 + 56 * (v245 + v250));
            if (!*v253) {
              break;
            }
            uint64_t v254 = v251 + 56 * v252;
            int v256 = *(unsigned __int8 *)(v254 + 32);
            char v255 = (unsigned char *)(v254 + 32);
            if (v256) {
              break;
            }
            uint64_t v257 = v251 + 56 * v252;
            *(_DWORD *)(v240[8] + v247 + 36) = *(unsigned __int16 *)(v257 + 44);
            *(_DWORD *)(v240[8] + v247 + 40) = *(unsigned __int16 *)(v257 + 46);
            *(void *)(v240[8] + v247) = *v253;
            *(unsigned char *)(v240[8] + v247 + 24) = *(unsigned char *)(v257 + 33);
            *(unsigned char *)(v240[8] + v247 + 25) = *(unsigned char *)(v257 + 34);
            *(unsigned char *)(v240[8] + v247 + 31) = *(unsigned char *)(v257 + 48);
            *(unsigned char *)(v240[8] + v247 + 27) = *(unsigned char *)(v257 + 36);
            *(_WORD *)(v240[8] + v247 + 28) = *(_WORD *)(v257 + 38);
            *(void *)(v240[8] + v247 + 8) = *(void *)(v257 + 8);
            *(void *)(v240[8] + v247 + 16) = *(void *)(v257 + 24);
            *(unsigned char *)(v240[8] + v247 + 30) = *(unsigned char *)(v8 + 379);
            *(unsigned char *)(v240[8] + v247 + 32) = *(unsigned char *)(v8 + 577);
            if (*(unsigned char *)(v11 + 133))
            {
              *(void *)(v240[8] + v247 + 48) = *(void *)(*(void *)(v11 + 2320) + 3400);
              if (v645[12] || *(int *)(v8 + 4820) >= 7 && *v645 == 2)
              {
                char v258 = 0;
              }
              else
              {
                char v258 = *(unsigned char *)(v11 + 133);
                if (v258) {
                  char v258 = v645[2] == 0;
                }
              }
              *(unsigned char *)(v240[8] + v247 + 56) = v258;
            }
            char v259 = *(unsigned char *)(v8 + 577) == 1 ? *(unsigned char *)(v8 + 653) : 0;
            *(unsigned char *)(v240[8] + v247 + 33) = v259;
            *(unsigned char *)(v240[8] + v247 + 34) = *(unsigned char *)(v8 + 674);
            *(unsigned char *)(v240[8] + v247 + 44) = *(unsigned char *)(v8 + 2697);
            *(unsigned char *)(v240[8] + v247 + 45) = *(unsigned char *)(v8 + 656);
            *(void *)(v240[7] + v248) = sub_1BBAF3184;
            ++v249;
            *(void *)(v240[7] + v248 + 8) = v240[8] + v247;
            *char v255 = 1;
            unsigned int v245 = *((unsigned __int8 *)v240 + 8);
            v248 += 16;
            v247 += 64;
            --v250;
          }
          while (v249 < v245);
          if (v249)
          {
            if (v249 == 1) {
              sub_1BBAF3184(v240[8]);
            }
            else {
              sub_1BBB2175C(v240[5], v240[7], v249);
            }
            uint64_t v9 = a1;
          }
        }
        uint64_t v16 = *v246;
        if (*v246) {
LABEL_413:
        }
          --*((unsigned char *)v240 + 9);
      }
      unint64_t v261 = *((unsigned __int8 *)v240 + 8);
      if (v261 >= 2)
      {
        unint64_t v262 = v261 + 1;
        uint64_t v263 = 56 * v261;
        do
        {
          uint64_t v264 = *v240 + v263;
          long long v265 = *(_OWORD *)(v264 - 96);
          *(_OWORD *)(v264 - 56) = *(_OWORD *)(v264 - 112);
          *(_OWORD *)(v264 - 40) = v265;
          a6 = *(__n128 *)(v264 - 80);
          *(__n128 *)(v264 - 24) = a6;
          *(void *)(v264 - 8) = *(void *)(v264 - 64);
          --v262;
          v263 -= 56;
        }
        while (v262 > 2);
      }
      uint64_t v266 = *v240;
      if (*v240)
      {
        *(_WORD *)(v266 + 32) = 0;
        *(unsigned char *)(v266 + 34) = 0;
        *(void *)uint64_t v266 = 0;
        *(void *)(v266 + 8) = 0;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v7 = v239;
  }
LABEL_420:
  if (*(unsigned char *)(*(void *)(v7 + 136) + 4850))
  {
    sub_1BBAF3CD0(v9, v16);
    uint64_t v9 = a1;
  }
  uint64_t v267 = *(void *)(v7 + 5392);
  if (v267 && (a6.n128_u64[0] = *(void *)(v267 + 136), a6.n128_f64[0] > 10.2))
  {
    int v268 = 0;
    if (!v6)
    {
LABEL_425:
      BOOL v269 = 1;
      goto LABEL_428;
    }
  }
  else
  {
    int v268 = 1;
    if (!v6) {
      goto LABEL_425;
    }
  }
  BOOL v269 = *(unsigned __int16 *)(v6 + 4834) > 0x2BBu;
LABEL_428:
  if (*(unsigned char *)(v11 + 2305) && *(unsigned char *)(v11 + 2304))
  {
    if (*(unsigned char *)(v681 + 3677)) {
      int v268 = 0;
    }
    if (v6 && (v269 & v268) != 0)
    {
      uint64_t v270 = v7;
      uint64_t v271 = *(void *)(v11 + 8);
      uint64_t v272 = (*(_DWORD *)(v271 + 48) - 1);
      if ((int)v272 >= 0)
      {
        while (1)
        {
          uint64_t v273 = *(void *)(*(void *)(v271 + 40) + 8 * v272);
          if (v273)
          {
            if (*(unsigned char *)(v273 + 1356) && *(unsigned char *)(v273 + 2) && *(unsigned char *)(v273 + 14) && !*(unsigned char *)(v273 + 15)) {
              break;
            }
          }
          BOOL v149 = v272-- <= 0;
          if (v149) {
            goto LABEL_442;
          }
        }
        long long v718 = 0u;
        long long v719 = 0u;
        long long v716 = 0u;
        long long v717 = 0u;
        long long v714 = 0u;
        long long v715 = 0u;
        long long v712 = 0u;
        long long v713 = 0u;
        unsigned int v563 = *(unsigned char *)(v270 + 1057) == 1 ? sub_1BBB0A89C(v271, &v712, 0) : sub_1BBB0AB04(v271, &v712, a5, 0, 0);
        uint64_t v9 = a1;
        if (v563)
        {
          uint64_t v564 = 0;
          uint64_t v565 = 0;
          unsigned int v566 = 0;
          do
          {
            uint64_t v567 = *(void *)((char *)&v712 + v564);
            unsigned int v568 = *(_DWORD *)(v567 + 1276);
            if (v568 >= v566 && v568 < *(_DWORD *)(a5 + 1276) && !*(unsigned char *)(v567 + 14))
            {
              unsigned int v566 = *(_DWORD *)(v567 + 1276);
              uint64_t v565 = *(void *)((char *)&v712 + v564);
            }
            v564 += 8;
          }
          while (8 * v563 != v564);
          if (v565)
          {
            *((_DWORD *)v651 + 61) = *(_DWORD *)(v565 + 1276);
            *((_DWORD *)v651 + 62) = *(_DWORD *)(v273 + 1276);
            int v569 = *((_DWORD *)v651 + 60);
            BOOL v52 = v569 == *(_DWORD *)(v565 + 19352);
            *((unsigned char *)v651 + 266) = v52;
            if (v52)
            {
              v680 = (__int16 *)(v565 + 19112);
              uint64_t v650 = v270;
              uint64_t v570 = *(unsigned __int16 *)(v565 + 19112);
              uint64_t v571 = *(unsigned __int16 *)(v565 + 19114);
              size_t v572 = *(int *)(v565 + 228);
              int v686 = *(_DWORD *)(v565 + 232);
              int v573 = *(_DWORD *)(v565 + 248);
              uint64_t v574 = v573;
              uint64_t v692 = *(unsigned int *)(v565 + 196);
              double v575 = sub_1BBB158E8(v565 + 19320, a5 + 19320);
              uint64_t v578 = 0;
              double v580 = v579 * (v576 + v576) - v575 * (v577 + v577);
              double v581 = -v580;
              if (v569 != 1) {
                double v581 = v580;
              }
              double v582 = 1.0 - v576 * (v576 + v576) - v577 * (v577 + v577);
              double v583 = sqrt(v580 * v580 + v582 * v582);
              double v584 = v582 / v583;
              double v585 = -v581 / v583;
              double v586 = v581 / v583;
              double v587 = -v585;
              double v588 = -(v585 * (double)v570) * 0.5;
              unsigned int v698 = v571;
              double v589 = v585 * (double)v571 * 0.5;
              double v590 = v584 * v584 - v585 * v586;
              *(double *)&long long v703 = v584 / v590;
              *((double *)&v703 + 1) = v587 / v590;
              *((double *)&v704 + 1) = -v586 / v590;
              *(double *)&long long v704 = -(v587 / v590 * v589) - v584 / v590 * v588;
              *(double *)&long long v705 = v584 / v590;
              *((double *)&v705 + 1) = -(v584 / v590 * v589) - *((double *)&v704 + 1) * v588;
              do
              {
                a6.n128_f64[0] = *((double *)&v703 + v578) * 1024.0;
                *((_DWORD *)&v701 + v578++) = llround(a6.n128_f64[0]);
              }
              while (v578 != 6);
              uint64_t v591 = 0;
              uint64_t v6 = a5;
              do
              {
                *(_WORD *)(a5 + 19364 + 2 * v591) = *((_DWORD *)&v701 + v591);
                ++v591;
              }
              while (v591 != 6);
              unsigned int v592 = DWORD1(v701);
              if (SDWORD1(v701) < 0) {
                unsigned int v592 = -DWORD1(v701);
              }
              uint64_t v9 = a1;
              if (v592 >= *(_DWORD *)(v652 + 2308))
              {
                if (*((unsigned char *)v651 + 266))
                {
                  v593 = (int8x8_t *)(v650 + 1328);
                  *(void *)(v650 + 1328) = *(void *)(v565 + 128);
                  *(void *)(v650 + 1336) = *(void *)(v565 + 136);
                  *(void *)(v650 + 1344) = *(void *)(v273 + 128);
                  *(void *)(v650 + 1352) = *(void *)(v273 + 136);
                  *(void *)(v650 + 1400) = 0x400000008;
                  *(_DWORD *)(v650 + 1436) = 0;
                  *(_DWORD *)(v650 + 1468) = 0;
                  *(void *)(v650 + 1472) = 0;
                  *(void *)(v650 + 1424) = 0;
                  *(void *)(v650 + 1416) = 0;
                  *(void *)(v650 + 1520) = 0;
                  *(void *)(v650 + 1512) = 0;
                  *(_DWORD *)(v650 + 1480) = v570;
                  *(_DWORD *)(v650 + 1484) = v570;
                  *(_DWORD *)(v650 + 1488) = v571;
                  *(_DWORD *)(v650 + 1492) = v571;
                  *(_DWORD *)(v650 + 1368) = 1;
                  *(_DWORD *)(v650 + 1496) = v686;
                  *(_DWORD *)(v650 + 1500) = v686;
                  *(_DWORD *)(v650 + 1504) = v573;
                  *(_DWORD *)(v650 + 1508) = v573;
                  *(void *)(v650 + 1376) = 0x60000000ALL;
                  *(_WORD *)(v650 + 1568) = 0;
                  *(void *)(v650 + 1556) = v702;
                  *(_OWORD *)(v650 + 1540) = v701;
                  uint64_t v594 = *(void *)(v650 + 1072);
                  if (!v594)
                  {
                    sub_1BBB4EE18((uint64_t *)(v650 + 1072), (uint64_t)v593);
                    uint64_t v594 = *(void *)(v650 + 1072);
                  }
                  sub_1BBB4EFD8(v594, v593);
                  if ((int)v572 > (int)v570 || (int)v692 > (int)v571)
                  {
                    if (v571)
                    {
                      uint64_t v595 = v570;
                      uint64_t v596 = v571;
                      do
                      {
                        memset((void *)(*(void *)(v273 + 128) + v595), 128, (int)v572 - (int)v570);
                        v595 += v686;
                        --v596;
                      }
                      while (v596);
                    }
                    if ((int)v692 > (int)v571)
                    {
                      uint64_t v597 = v692 - v571;
                      uint64_t v598 = v686 * (uint64_t)(int)v571;
                      do
                      {
                        memset((void *)(*(void *)(v273 + 128) + v598), 128, v572);
                        v598 += v686;
                        --v597;
                      }
                      while (v597);
                    }
                    unsigned int v599 = v698 >> 1;
                    if (v698 >= 2)
                    {
                      size_t v600 = (int)v572 - (int)v570;
                      if (v599 <= 1) {
                        uint64_t v601 = 1;
                      }
                      else {
                        uint64_t v601 = v599;
                      }
                      do
                      {
                        memset((void *)(*(void *)(v273 + 136) + v570), 128, v600);
                        v570 += v574;
                        --v601;
                      }
                      while (v601);
                    }
                    if ((int)v599 < (int)v692 >> 1)
                    {
                      uint64_t v602 = v698 >> 1;
                      uint64_t v603 = ((int)v692 >> 1) - v602;
                      uint64_t v604 = (int)v602 * (uint64_t)(int)v574;
                      do
                      {
                        memset((void *)(*(void *)(v273 + 136) + v604), 128, v572);
                        v604 += v574;
                        --v603;
                      }
                      while (v603);
                    }
                  }
                  uint64_t v605 = *(void *)(v273 + 488);
                  if (v605)
                  {
                    *(_DWORD *)(v605 + 64) = 1;
                    *(void *)(v605 + 56) = 0x100000001;
                    *(_OWORD *)(v605 + 152) = xmmword_1BBB6FCD0;
                    v606 = *(unsigned __int8 **)(v273 + 488);
                  }
                  else
                  {
                    v606 = 0;
                  }
                  uint64_t v6 = a5;
                  uint64_t v609 = sub_1BBB12008(v606);
                  if (v609)
                  {
                    uint64_t v260 = v609;
                    CFLog();
                    return v260;
                  }
                  sub_1BBB551EC(*(void **)(v273 + 488), *(_DWORD *)(v652 + 2292), *(_DWORD *)(v652 + 2296));
                  uint64_t v610 = *(void *)(v273 + 488);
                  if (byte_1E9F82E60) {
                    sub_1BBB55548(v610);
                  }
                  else {
                    MEMORY[0](v610);
                  }
                  sub_1BBB5663C((void *)(v273 + 96), 1);
                  sub_1BBB55804(*(void *)(*(void *)(v273 + 488) + 16), 0, *(unsigned __int16 *)(v565 + 19122) >> 4);
                  *(unsigned char *)(v273 + 32) = 1;
                  *(_DWORD *)(v273 + 19352) = *(_DWORD *)(v565 + 19352);
                  __int16 v611 = *v680;
                  *(_WORD *)(v273 + 19120) = *v680;
                  *(_WORD *)(v273 + 19112) = v611;
                  *(_WORD *)(v273 + 19116) = v611;
                  __int16 v612 = *(_WORD *)(v565 + 19114);
                  *(_WORD *)(v273 + 19122) = v612;
                  *(_WORD *)(v273 + 19114) = v612;
                  *(_WORD *)(v273 + 19118) = v612;
                  a6.n128_u64[0] = *(void *)(v565 + 48);
                  *(void *)(v273 + 48) = a6.n128_u64[0];
                  uint64_t v9 = a1;
                }
              }
              else
              {
                *((unsigned char *)v651 + 266) = 0;
              }
              uint64_t v8 = (uint64_t)a3;
              uint64_t v11 = v652;
              uint64_t v10 = v653;
              uint64_t v7 = v650;
              if (!v650) {
                goto LABEL_552;
              }
              goto LABEL_444;
            }
          }
        }
      }
LABEL_442:
      uint64_t v6 = a5;
      uint64_t v7 = v270;
    }
  }
  if (!v7) {
    goto LABEL_552;
  }
LABEL_444:
  if (!v6) {
    goto LABEL_552;
  }
  if (!*(unsigned char *)(v11 + 2287) || !*(unsigned char *)(v8 + 653) || !*(unsigned char *)(v16 + 1369)) {
    goto LABEL_553;
  }
  int v274 = *(unsigned __int8 *)(v8 + 657);
  long long v718 = 0u;
  long long v719 = 0u;
  long long v716 = 0u;
  long long v717 = 0u;
  long long v714 = 0u;
  long long v715 = 0u;
  long long v712 = 0u;
  long long v713 = 0u;
  int v275 = sub_1BBB0A818(*(void *)(v11 + 8), &v712, 1, 0);
  a6.n128_u64[0] = -1;
  a6.n128_u64[1] = -1;
  *(__n128 *)(v6 + 18468) = a6;
  *(__n128 *)(v6 + 18484) = a6;
  *(__n128 *)(v6 + 18500) = a6;
  *(__n128 *)(v6 + 18516) = a6;
  *(__n128 *)(v6 + 18532) = a6;
  *(__n128 *)(v6 + 18548) = a6;
  *(__n128 *)(v6 + 18564) = a6;
  *(__n128 *)(v6 + 18580) = a6;
  if (v275 < 1) {
    goto LABEL_551;
  }
  uint64_t v276 = 0;
  uint64_t v644 = v6 + 5024;
  BOOL v277 = 1;
  uint64_t v278 = v275;
  uint64_t v649 = v7;
  int v636 = v274;
  uint64_t v634 = v275;
  do
  {
    while (1)
    {
      uint64_t v658 = v276;
      if (v274)
      {
        if (v274 == 1)
        {
          uint64_t v279 = v7;
          uint64_t v280 = v8;
          BOOL v281 = v277;
          a6.n128_u64[0] = *(void *)(v6 + 48);
          uint64_t v282 = *((void *)&v712 + v276);
          if (a6.n128_f64[0] <= 0.0 || (double v283 = *(double *)(v282 + 48), v283 <= 0.0))
          {
            uint64_t v307 = v6 + 5024 + 4 * (char)v276;
            *(_DWORD *)(v307 + 13444) = -1;
            *(unsigned char *)uint64_t v10 = 6;
            *(unsigned char *)(v6 + 5024 + 3 * (char)v276 + 2) = 0;
            uint64_t v308 = v6 + 5024 + 6 * (char)v276;
            *(_WORD *)(v308 + 386) = 64;
            *(_WORD *)(v308 + 770) = 0;
            *(_DWORD *)(v307 + 13444) = *(_DWORD *)(v282 + 1276);
          }
          else
          {
            char v284 = v276;
            a6.n128_f64[0] = pow(a6.n128_f64[0] / v283, 0.454545455) * 64.0 + 0.5;
            *(_DWORD *)(v6 + 5024 + 4 * v284 + 13444) = *(_DWORD *)(v282 + 1276);
            *(unsigned char *)uint64_t v10 = 6;
            *(unsigned char *)(v6 + 5024 + 3 * v284 + 2) = (int)a6.n128_f64[0] != 64;
            int v285 = (__int16)(int)a6.n128_f64[0];
            if ((__int16)v285 >= 127) {
              int v285 = 127;
            }
            if (v285 <= -128) {
              LOWORD(v285) = -128;
            }
            uint64_t v286 = v6 + 5024 + 6 * v284;
            *(_WORD *)(v286 + 386) = v285;
            *(_WORD *)(v286 + 770) = 0;
          }
          BOOL v277 = v281;
          uint64_t v8 = v280;
          uint64_t v7 = v279;
        }
        else
        {
          uint64_t v304 = v6 + 5024 + 4 * (char)v276;
          *(_DWORD *)(v304 + 13444) = -1;
          uint64_t v305 = *((void *)&v712 + v276);
          *(unsigned char *)uint64_t v10 = 6;
          *(unsigned char *)(v6 + 5024 + 3 * (char)v276 + 2) = 0;
          uint64_t v306 = v6 + 5024 + 6 * (char)v276;
          *(_WORD *)(v306 + 386) = 64;
          *(_WORD *)(v306 + 770) = 0;
          *(_DWORD *)(v304 + 13444) = *(_DWORD *)(v305 + 1276);
        }
        goto LABEL_542;
      }
      uint64_t v287 = *((void *)&v712 + v276);
      unsigned int v690 = *(_DWORD *)(v6 + 232);
      int v288 = *v651;
      unsigned int v289 = *(unsigned __int16 *)(v287 + 19120);
      char v290 = v276;
      if (*((_DWORD *)v651 + 7) <= ((*(_DWORD *)(v287 + 19140) * v288 / v289 + 15) & 0xFFFFFFF0)) {
        unsigned int v291 = (*(_DWORD *)(v287 + 19140) * v288 / v289 + 15) & 0xFFFFFFF0;
      }
      else {
        unsigned int v291 = *((_DWORD *)v651 + 7);
      }
      unsigned int v292 = (((v288 + v288 * *(_DWORD *)(v287 + 19144)) / v289) & 0xFFFFFFF0) - 1;
      if (*((_DWORD *)v651 + 8) < v292) {
        unsigned int v292 = *((_DWORD *)v651 + 8);
      }
      int v293 = v651[1];
      unsigned int v294 = *(unsigned __int16 *)(v287 + 19122);
      int v295 = *(_DWORD *)(v287 + 19152);
      unsigned int v296 = *((_DWORD *)v651 + 10);
      if (*((_DWORD *)v651 + 9) <= ((*(_DWORD *)(v287 + 19148) * v293 / v294 + 15) & 0xFFFFFFF0)) {
        unsigned int v297 = (*(_DWORD *)(v287 + 19148) * v293 / v294 + 15) & 0xFFFFFFF0;
      }
      else {
        unsigned int v297 = *((_DWORD *)v651 + 9);
      }
      unsigned int v662 = v291;
      unsigned int v298 = v292 - v291 - 63;
      uint64_t v299 = 3 * v290;
      *(unsigned char *)(v644 + v299 + 2) = 0;
      uint64_t v300 = v644 + v299 + 2;
      uint64_t v301 = v644 + 6 * v290;
      *(_WORD *)(v301 + 386) = 64;
      *(_WORD *)(v301 + 770) = 0;
      *(_DWORD *)(v644 + 4 * v290 + 13444) = *(_DWORD *)(v287 + 1276);
      if (v298 <= 0xFFFFFFBF)
      {
        BOOL v642 = v277;
        unsigned int v302 = (((v293 + v293 * v295) / v294) & 0xFFFFFFF0) - 1;
        if (v296 < v302) {
          unsigned int v302 = v296;
        }
        unsigned int v660 = v302 - 31;
        uint64_t v638 = v644 + 6 * v290;
        v640 = (BOOL *)v300;
        if (v297 <= v302 - 31)
        {
          uint64_t v309 = v287;
          unsigned int v310 = v297;
          uint64_t v670 = 0;
          uint64_t v672 = 0;
          unint64_t v678 = 0;
          unint64_t v682 = 0;
          uint64_t v674 = 0;
          int v685 = 0;
          int v303 = 0;
          unsigned int v696 = v292 - 31;
          do
          {
            unsigned int v311 = v662;
            unsigned int v665 = v310;
            if (v662 <= v696)
            {
              int v312 = v310 * v690;
              unsigned int v668 = v310 >> 1;
              do
              {
                *(void *)&long long v703 = 0;
                unint64_t v700 = 0;
                *(void *)&long long v701 = 0;
                uint64_t v711 = 0;
                unint64_t v699 = 0;
                sub_1BBB5FD50(*(void *)(v6 + 128) + v311 + v312, *(void *)(v309 + 128) + v311 + v312, 32, 32, v690, &v703, &v711, &v701, &v700, &v699);
                unint64_t v313 = (unint64_t)(((void)v703 << 8) + 512) >> 10;
                unint64_t v314 = (unint64_t)((v711 << 8) + 512) >> 10;
                BOOL v316 = (v313 - 58881) >= 0xFFFF2DFF
                    && v314 <= 0xE600
                    && v314 >> 10 >= 5;
                if (v316)
                {
                  int v317 = v313 - v314;
                  if (v317 < 0) {
                    int v317 = -v317;
                  }
                  if (v317 <= 0x2D00)
                  {
                    float v318 = a6.n128_f32[0];
                    uint64_t v319 = 0;
                    unsigned int v320 = 0;
                    uint64_t v321 = *(void *)(v6 + 136) + (v311 & 0xFFFFFFFE) + *(unsigned __int16 *)(v6 + 248) * v668;
                    char v322 = 1;
                    do
                    {
                      char v323 = v322;
                      int v324 = off_1E9F83198(v321 + v319);
                      char v322 = 0;
                      v320 += v324;
                      uint64_t v319 = 16;
                    }
                    while ((v323 & 1) != 0);
                    unint64_t v325 = ((void)v701 << 10) - v703 * v703 + 0x80000;
                    uint64_t v326 = v711 * v711;
                    unint64_t v327 = v325 >> 22;
                    if ((v318 < 0.9 || v320 >= 0x7D0)
                      && (v320 <= 0x3E7 ? (BOOL v328 = v327 > 0x18) : (BOOL v328 = 1),
                          !v328 ? (BOOL v329 = ((v700 << 10) - v326 + 0x80000) >> 22 > 0x18) : (BOOL v329 = 1),
                          v329))
                    {
                      uint64_t v6 = a5;
                    }
                    else
                    {
                      unint64_t v330 = (116 - (v325 >> 20)) >> 5;
                      if (v327 < 0x19) {
                        uint64_t v331 = v330 + 1;
                      }
                      else {
                        uint64_t v331 = 1;
                      }
                      if (v318 >= 0.9)
                      {
                        unint64_t v333 = v699;
                        unint64_t v332 = v700;
                      }
                      else
                      {
                        unint64_t v332 = (unint64_t)(v326 + 512) >> 10;
                        unint64_t v333 = (unint64_t)(v711 * v703 + 512) >> 10;
                      }
                      ++v685;
                      v674 += v331;
                      v678 += v331 * v703;
                      v682 += v331 * v711;
                      v670 += v333 * v331;
                      v672 += v332 * v331;
                      uint64_t v6 = a5;
                    }
                  }
                }
                v311 += 64;
                ++v303;
              }
              while (v311 <= v696);
            }
            unsigned int v310 = v665 + 64;
          }
          while (v665 + 64 <= v660);
        }
        else
        {
          int v303 = 0;
          int v685 = 0;
          uint64_t v674 = 0;
          unint64_t v678 = 0;
          unint64_t v682 = 0;
          uint64_t v670 = 0;
          uint64_t v672 = 0;
        }
        if (v303 >= 4 * v685)
        {
          LODWORD(v341) = 0;
          LODWORD(v339) = 64;
          uint64_t v8 = (uint64_t)a3;
          uint64_t v7 = v649;
          uint64_t v10 = v653;
          int v274 = v636;
          uint64_t v278 = v634;
          BOOL v277 = v642;
          uint64_t v335 = v638;
          int v334 = v640;
        }
        else
        {
          uint64_t v8 = (uint64_t)a3;
          uint64_t v7 = v649;
          uint64_t v10 = v653;
          int v274 = v636;
          uint64_t v278 = v634;
          BOOL v277 = v642;
          uint64_t v335 = v638;
          int v334 = v640;
          if (v678 <= v682 + (v674 << 10) && v678 >= v682 - (v674 << 10)) {
            goto LABEL_525;
          }
          uint64_t v336 = v674 << 10;
          unint64_t v337 = v672 * (v674 << 10) - v682 * v682;
          uint64_t v338 = v674 * (v674 << 10);
          LODWORD(v339) = 64;
          if (v337 > v338 << 14)
          {
            uint64_t v340 = v670 * v336 - v682 * v678;
            if (v340 > v338 << 14) {
              unint64_t v339 = ((v340 << 6) + (v337 >> 1)) / v337;
            }
          }
          if ((int)v339 >= 127) {
            LODWORD(v339) = 127;
          }
          unint64_t v341 = (unint64_t)((uint64_t)(((unint64_t)v336 >> 1) + (v678 << 6) - v682 * (int)v339) / v336 + 32) >> 6;
          if (((int)v339 >= 64 || (int)v341 <= 0) && ((int)v339 <= 64 || (v341 & 0x80000000) == 0)) {
            goto LABEL_527;
          }
          unint64_t v339 = ((v678 << 6) + (v682 >> 1)) / v682;
          if (v339 == 65 || v339 == 63)
          {
LABEL_525:
            LODWORD(v341) = 0;
            LODWORD(v339) = 64;
          }
          else
          {
            LODWORD(v341) = 0;
          }
        }
LABEL_527:
        *(unsigned char *)uint64_t v10 = 6;
        BOOL v343 = v339 != 64 || v341 != 0;
        *int v334 = v343;
        LODWORD(v339) = (__int16)v339;
        if ((__int16)v339 >= 127) {
          LODWORD(v339) = 127;
        }
        if ((int)v339 <= -128) {
          LOWORD(v339) = -128;
        }
        *(_WORD *)(v335 + 386) = v339;
        int v344 = (__int16)v341;
        if ((__int16)v341 >= 127) {
          int v344 = 127;
        }
        if (v344 <= -128) {
          LOWORD(v344) = -128;
        }
        *(_WORD *)(v335 + 770) = v344;
      }
LABEL_542:
      if (v277) {
        break;
      }
      BOOL v277 = 0;
      uint64_t v276 = v658 + 1;
      if (v658 + 1 == v278) {
        goto LABEL_551;
      }
    }
    BOOL v277 = *(unsigned char *)(v6 + 3 * (char)v658 + 5026) == 0;
    uint64_t v276 = v658 + 1;
  }
  while (v658 + 1 != v278);
  if (!*(unsigned char *)(v6 + 3 * (char)v658 + 5026))
  {
    uint64_t v345 = 0;
    uint64_t v346 = (uint64_t *)&v712;
    uint64_t v347 = v6 + 5024;
    do
    {
      uint64_t v348 = *v346++;
      *(unsigned char *)uint64_t v10 = 0;
      *(unsigned char *)(v347 + (v345 >> 55) + (v345 >> 56) + 2) = 0;
      uint64_t v349 = v347 + 6 * (v345 >> 56);
      *(_WORD *)(v349 + 386) = 1;
      *(_WORD *)(v349 + 770) = 0;
      *(_DWORD *)(v347 + (v345 >> 54) + 13444) = *(_DWORD *)(v348 + 1276);
      v345 += 0x100000000000000;
      --v278;
    }
    while (v278);
  }
LABEL_551:
  uint64_t v9 = a1;
  uint64_t v11 = v652;
LABEL_552:
  if (!v7)
  {
LABEL_557:
    uint64_t v357 = a2;
    if (*(unsigned char *)(v8 + 381)) {
      goto LABEL_558;
    }
    if (a2) {
      int v359 = *(unsigned __int8 *)(a2 + 532) != 1;
    }
    else {
      int v359 = -1;
    }
    uint64_t v400 = *(void *)v9;
    uint64_t v401 = *(unsigned int *)(v9 + 48);
    unsigned int v402 = v401 + 1;
    unsigned int v403 = *(_DWORD *)(v9 + 36) + *(_DWORD *)(v9 + 32) + *(_DWORD *)(v9 + 24);
    uint64_t v404 = *(void *)v9 + 16 * (v401 + 1);
    if ((int)v401 + 1 >= v403) {
      uint64_t v404 = 0;
    }
    if (!v400
      || (v405 = v400 + 16 * v401, int v406 = *(_DWORD *)(v405 + 8), (v406 & 0xA) != 0)
      || (uint64_t v407 = *(void *)v405, *(_DWORD *)(v405 + 8) = v406 | 8, !v407)
      || (v359 + 1) > 1
      || !*(unsigned char *)(v8 + 322)
      || v402 >= v403
      || (*(unsigned char *)(v404 + 8) & 2) != 0
      || *(unsigned char *)(v8 + 325) != 1
      || (uint64_t v408 = *(void *)v404) == 0)
    {
LABEL_558:
      if (a2) {
        int v358 = *(unsigned __int8 *)(a2 + 532) != 1;
      }
      else {
        int v358 = -1;
      }
      uint64_t v675 = *(void *)(v11 + 8);
      uint64_t v360 = *(void *)(v9 + 16);
      int v361 = *(_DWORD *)(v9 + 32);
      if (v361 < 1)
      {
        uint64_t v364 = 0;
        uint64_t v365 = 0;
        uint64_t v366 = 0;
        int v362 = *(_DWORD *)(v9 + 36);
        int v363 = *(_DWORD *)(v9 + 24);
        if (v361 < -1) {
          goto LABEL_572;
        }
      }
      else
      {
        int v362 = *(_DWORD *)(v9 + 36);
        int v363 = *(_DWORD *)(v9 + 24);
        if ((v363 + v362) <= 0x80000000) {
          uint64_t v364 = v360 - 16;
        }
        else {
          uint64_t v364 = 0;
        }
      }
      if (v362 + v363 - 1 >= 1) {
        uint64_t v366 = v360 + 16;
      }
      else {
        uint64_t v366 = 0;
      }
      uint64_t v365 = v364;
LABEL_572:
      uint64_t v367 = *(void *)v9;
      uint64_t v368 = *(unsigned int *)(v9 + 48);
      if ((int)v368 + 1 >= (v362 + v363 + v361)) {
        uint64_t v369 = 0;
      }
      else {
        uint64_t v369 = *(void *)v9 + 16 * (v368 + 1);
      }
      if (!v360 || (*(unsigned char *)(v360 + 8) & 2) != 0)
      {
        uint64_t v370 = 0;
        if (!v365) {
          goto LABEL_582;
        }
      }
      else
      {
        uint64_t v370 = *(void *)v360;
        if (!v365) {
          goto LABEL_582;
        }
      }
      if ((*(unsigned char *)(v365 + 8) & 2) == 0)
      {
        uint64_t v371 = *(void *)v365;
LABEL_583:
        uint64_t v372 = v367 + 16 * v368;
        if (!v366 || (*(unsigned char *)(v366 + 8) & 2) != 0)
        {
          uint64_t v373 = 0;
          if (!v367) {
            goto LABEL_589;
          }
        }
        else
        {
          uint64_t v373 = *(void *)v366;
          if (!v367) {
            goto LABEL_589;
          }
        }
        if ((*(unsigned char *)(v372 + 8) & 0x12) == 0)
        {
          uint64_t v697 = *(void *)v372;
          if (!v369) {
            goto LABEL_594;
          }
          goto LABEL_592;
        }
LABEL_589:
        uint64_t v697 = 0;
        if (!v369) {
          goto LABEL_594;
        }
LABEL_592:
        if ((*(unsigned char *)(v369 + 8) & 2) == 0)
        {
          uint64_t v691 = *(void *)v369;
LABEL_595:
          *(_DWORD *)(v372 + 8) |= 0x10u;
          int v374 = v358 << 24;
          uint64_t v375 = a2;
          if (v358 << 24 && v374 != -16777216)
          {
            if (v358 != 1) {
              goto LABEL_671;
            }
            if (!v697) {
              goto LABEL_671;
            }
            unsigned int v385 = *(_DWORD *)(v697 + 1276);
            if (!v385) {
              goto LABEL_671;
            }
            unsigned int v386 = *(_DWORD *)(a2 + 192);
            if (v386 <= v385) {
              unsigned int v385 = v386 - 1;
            }
            int v387 = *(unsigned __int8 *)(*(void *)(a2 + 368) + v385);
          }
          else
          {
            a6.n128_u32[0] = 0;
            long long v720 = 0u;
            long long v721 = 0u;
            long long v718 = 0u;
            long long v719 = 0u;
            long long v716 = 0u;
            long long v717 = 0u;
            long long v714 = 0u;
            long long v715 = 0u;
            long long v712 = 0u;
            long long v713 = 0u;
            unsigned int v376 = *(unsigned __int8 *)(v8 + 318);
            if (v376 >= 0x14) {
              uint64_t v377 = 20;
            }
            else {
              uint64_t v377 = *(unsigned __int8 *)(v8 + 318);
            }
            if (!v377) {
              goto LABEL_608;
            }
            unsigned int v378 = *(_DWORD *)(v9 + 48);
            unsigned int v379 = *(_DWORD *)(v9 + 36) + *(_DWORD *)(v9 + 32) + *(_DWORD *)(v9 + 24);
            int v380 = &v712;
            uint64_t v381 = v377;
            do
            {
              if (v378 >= v379)
              {
                uint64_t v382 = 0;
              }
              else
              {
                uint64_t v382 = *(void *)v9;
                if (*(void *)v9) {
                  uint64_t v382 = *(void *)(v382 + 16 * v378);
                }
              }
              *(void *)int v380 = v382;
              int v380 = (long long *)((char *)v380 + 8);
              ++v378;
              --v381;
            }
            while (v381);
            if (v376 <= 0x13)
            {
LABEL_608:
              uint64_t v383 = v371;
              bzero((char *)&v712 + (8 * v377), 8 * (19 - v377) + 8);
              uint64_t v371 = v383;
              uint64_t v357 = a2;
              uint64_t v9 = a1;
            }
            if (!v697) {
              goto LABEL_671;
            }
            if (*((void *)&v712 + 1))
            {
              uint64_t v384 = v371;
              (*(void (**)(void, long long *))(**(void **)(v9 + 56) + 16))(*(void *)(v9 + 56), &v712);
              uint64_t v371 = v384;
              uint64_t v357 = a2;
              uint64_t v9 = a1;
LABEL_671:
              if (!v370) {
                goto LABEL_837;
              }
              uint64_t v679 = v373;
              uint64_t v683 = v371;
              *(void *)&long long v715 = 0;
              long long v713 = 0u;
              long long v714 = 0u;
              long long v712 = 0u;
              int v410 = *(unsigned __int8 *)(v8 + 673);
              if (!*(unsigned char *)(v8 + 673)) {
                goto LABEL_691;
              }
              if (*(unsigned char *)(v8 + 322) && *(unsigned char *)(v8 + 323) && *(unsigned char *)(v9 + 216))
              {
                uint64_t v411 = 0;
                unsigned int v412 = *(void **)(v9 + 16);
                do
                {
                  if (!*v412) {
                    break;
                  }
                  *((void *)&v712 + v411) = *v412 + 4800;
                  v412 -= 2;
                  ++v411;
                }
                while (v411 != 7);
              }
              else
              {
                LODWORD(v411) = 0;
              }
              int v413 = 1;
              if (v358 == 1 && v410 == 2)
              {
                unsigned int v414 = *(_DWORD *)(v370 + 1276);
                unsigned int v415 = *(_DWORD *)(a2 + 192);
                if (v415 <= v414) {
                  unsigned int v414 = v415 - 1;
                }
                int v413 = *(unsigned __int8 *)(*(void *)(a2 + 368) + v414);
              }
              if (v411 >= 2)
              {
                unsigned int v416 = *(_DWORD *)(v370 + 224) / 0x64u * (*(_DWORD *)(v370 + 224) / 0x64u)
                     + *(_DWORD *)(v370 + 192) / 0x64u * (*(_DWORD *)(v370 + 192) / 0x64u);
                if (v416)
                {
                  uint64_t v417 = v697;
                  unsigned int v418 = __clz(v416);
                  unsigned int v419 = ((byte_1BBB8A634[(unint64_t)(v416 << (v418 + 1)) >> 24] << 12) | 0x200000u) >> ((v418 + 1) >> 1);
                  if ((v418 & 1) == 0) {
                    unsigned int v419 = (11585 * v419) >> 14;
                  }
                  unsigned int v420 = (v419 + 16) >> 5;
                }
                else
                {
                  uint64_t v417 = v697;
                  unsigned int v420 = 0;
                }
                uint64_t v697 = v417;
                unsigned int v421 = 4 * v420;
                bzero(*(void **)(v370 + 4704), 2 * *(unsigned int *)(v370 + 4564));
                int v422 = 12 * v420;
                unsigned int v423 = 16 * v420;
                uint64_t v424 = 1;
                LODWORD(v425) = *(_DWORD *)(v370 + 4564);
                int v426 = v425;
                uint64_t v9 = a1;
                uint64_t v375 = a2;
                do
                {
                  if (v426)
                  {
                    uint64_t v427 = 0;
                    unint64_t v428 = 0;
                    uint64_t v429 = *((void *)&v712 + v424);
                    do
                    {
                      unsigned int v430 = (int *)(*(void *)(v429 + 16) + v427);
                      unsigned int v431 = (*v430 >> 16) * (*v430 >> 16) + (__int16)*v430 * (__int16)*v430;
                      if (v431)
                      {
                        unsigned int v432 = __clz(v431);
                        unsigned int v433 = ((byte_1BBB8A634[(unint64_t)(v431 << (v432 + 1)) >> 24] << 12) | 0x200000u) >> ((v432 + 1) >> 1);
                        if ((v432 & 1) == 0) {
                          unsigned int v433 = (11585 * v433) >> 14;
                        }
                        unsigned int v434 = (v433 + 16) >> 5;
                      }
                      else
                      {
                        unsigned int v434 = 0;
                      }
                      uint64_t v435 = *(void *)(v370 + 4704);
                      int v436 = *(__int16 *)(v435 + 2 * v428);
                      __int16 v437 = *(_WORD *)(*(void *)(v370 + 4696) + 2 * v428);
                      unsigned __int16 v438 = v437 * v437;
                      __int16 v439 = 0x8000;
                      if ((v436 & 0x80000000) == 0 && v421 >= v434)
                      {
                        unsigned int v440 = (v434 + v422) * (unsigned __int16)v430[3] / v423;
                        __int16 v439 = (unsigned __int16)v440 >= v438 ? 0x8000 : 0;
                        if ((unsigned __int16)v440 < v438) {
                          unsigned __int16 v438 = v440;
                        }
                      }
                      *(_WORD *)(v435 + 2 * v428++) = (v438 + v436) | v439;
                      unint64_t v425 = *(unsigned int *)(v370 + 4564);
                      v427 += 36;
                    }
                    while (v428 < v425);
                    int v426 = *(_DWORD *)(v370 + 4564);
                  }
                  ++v424;
                }
                while (v424 != v411);
                if (v425)
                {
                  uint64_t v441 = 0;
                  unint64_t v442 = 0;
                  unsigned int v443 = v411 - 1;
                  uint64_t v444 = v712;
                  do
                  {
                    uint64_t v445 = *(void *)(v370 + 4704);
                    unsigned int v446 = *(_WORD *)(v445 + 2 * v442) & 0x7FFF;
                    if (v443 <= v446)
                    {
                      unsigned int v448 = v446 / v443;
                      unsigned int v449 = __clz(v448);
                      unsigned int v450 = ((byte_1BBB8A634[(unint64_t)(v448 << (v449 + 1)) >> 24] << 12) | 0x200000u) >> ((v449 + 1) >> 1);
                      if ((v449 & 1) == 0) {
                        unsigned int v450 = (11585 * v450) >> 14;
                      }
                      unsigned int v447 = (v450 + 16) >> 5;
                    }
                    else
                    {
                      unsigned int v447 = 0;
                    }
                    unsigned int v451 = *(unsigned __int16 *)(*(void *)(v370 + 4696) + 2 * v442);
                    if (!v413)
                    {
                      int v452 = (int *)(*(void *)(v444 + 16) + v441);
                      unsigned int v453 = (*v452 >> 16) * (*v452 >> 16) + (__int16)*v452 * (__int16)*v452;
                      if (v453)
                      {
                        unsigned int v454 = __clz(v453);
                        unsigned int v455 = ((byte_1BBB8A634[(unint64_t)(v453 << (v454 + 1)) >> 24] << 12) | 0x200000u) >> ((v454 + 1) >> 1);
                        if ((v454 & 1) == 0) {
                          unsigned int v455 = (11585 * v455) >> 14;
                        }
                        unsigned int v453 = (v455 + 16) >> 5;
                      }
                      if (v447 < v451 && (v421 <= v453 || (unsigned __int16)v452[3] > 2 * v447)) {
                        v447 >>= 1;
                      }
                    }
                    unsigned int v456 = (unsigned __int16)v447 + 1;
                    *(_WORD *)(v445 + 2 * v442) = v456;
                    if (v451 > v456)
                    {
                      int v457 = v456 * v451;
                      unsigned int v458 = __clz(v456 * v451);
                      unsigned int v459 = ((byte_1BBB8A634[(unint64_t)(v457 << (v458 + 1)) >> 24] << 12) | 0x200000u) >> ((v458 + 1) >> 1);
                      if ((v458 & 1) == 0) {
                        unsigned int v459 = (11585 * v459) >> 14;
                      }
                      LOWORD(v451) = (v459 + 16) >> 5;
                    }
                    *(_WORD *)(*(void *)(v370 + 4712) + 2 * v442++) = v451;
                    v441 += 36;
                  }
                  while (v442 < *(unsigned int *)(v370 + 4564));
                }
              }
              else
              {
LABEL_691:
                memcpy(*(void **)(v370 + 4712), *(const void **)(v370 + 4696), 2 * *(unsigned int *)(v370 + 4564));
                uint64_t v9 = a1;
              }
              *(_WORD *)(v370 + 4720) = *(_WORD *)(v370 + 4722);
              uint64_t v8 = (uint64_t)a3;
              uint64_t v373 = v679;
              uint64_t v371 = v683;
              uint64_t v357 = v375;
              if (v374 != -16777216)
              {
                if (v374 == 0x1000000)
                {
                  unsigned int v475 = *(_DWORD *)(v370 + 1276);
                  unsigned int v476 = *(_DWORD *)(v375 + 192);
                  if (v476 <= v475) {
                    unsigned int v475 = v476 - 1;
                  }
                  *(_WORD *)(v370 + 4728) = *(_WORD *)(*(void *)(v375 + 376) + 2 * v475);
                  goto LABEL_837;
                }
                if (v374)
                {
LABEL_837:
                  *(void *)&long long v703 = 0;
                  WORD4(v703) = 1;
                  BYTE1(v704) = 0;
                  *(unsigned char *)(v9 + 80) = *(unsigned char *)(v360 + 8) & 4;
                  *(unsigned char *)(v9 + 81) = *(unsigned char *)(v372 + 8) & 4;
                  sub_1BBB10E0C(v9 + 64, v8, v357, (uint64_t)&v703, v373, v370, v371, v691, a6.n128_f32[0], v697, v358);
                  int v520 = *(unsigned char **)(a1 + 16);
                  if (!*(void *)v520 || *(unsigned char *)(*(void *)v520 + 1392) || (v520[8] & 4) != 0)
                  {
                    int v521 = *(_DWORD *)(a1 + 24);
                    if (v521 >= 1)
                    {
                      uint64_t v522 = 0;
                      uint64_t v523 = -16;
                      uint64_t v524 = 1;
                      do
                      {
                        uint64_t v525 = *(void *)(a1 + 16);
                        uint64_t v526 = (uint64_t *)(v525 + 16 * v522);
                        uint64_t v527 = *v526;
                        if (*v526)
                        {
                          if ((v526[1] & 2) == 0)
                          {
                            int v528 = *(unsigned __int8 *)(v527 + 1397);
                            if (*(unsigned char *)(v527 + 1397))
                            {
                              char v529 = (uint64_t *)(v525 + v523);
                              uint64_t v530 = v524;
                              while (--v530 >= 1)
                              {
                                uint64_t v531 = *v529;
                                if (!*v529 || *(unsigned char *)(v531 + 1392)) {
                                  break;
                                }
                                v529 -= 2;
                                v528 -= *(unsigned __int8 *)(v531 + 1394) != 0;
                                if (!v528) {
                                  goto LABEL_863;
                                }
                              }
                              *(void *)&long long v712 = 0;
                              WORD4(v712) = 1;
                              BYTE1(v713) = 0;
                              BOOL v532 = v522 == 1;
                              BOOL v533 = v521 > 2;
                              if (v532 && v533) {
                                int v534 = 5;
                              }
                              else {
                                int v534 = 7;
                              }
                              if (v532 && v533) {
                                unsigned __int8 v535 = 0;
                              }
                              else {
                                unsigned __int8 v535 = *(unsigned char *)(v527 + 1404) & 0xF;
                              }
                              sub_1BBB123A0((uint64_t)&v712, v534, v535, *(unsigned char *)(v527 + 1404) >> 4);
                              char v536 = 0;
                              *(_WORD *)(v527 + 1359) = WORD4(v712);
                              *(unsigned char *)(v527 + 1368) = v712;
                              *(unsigned char *)(v527 + 1393) = BYTE4(v712);
                              *(unsigned char *)(v527 + 1392) = BYTE5(v712);
                              *(unsigned char *)(v527 + 1394) = BYTE6(v712);
                              *(unsigned char *)(v527 + 1396) = BYTE10(v712);
                              unsigned int v537 = HIDWORD(v712) - 6;
                              *(unsigned char *)(v527 + 1356) = 0;
                              if (v537 <= 0xF) {
                                char v536 = byte_1BBB70240[v537];
                              }
                              *(unsigned char *)(v527 + 1397) = v536;
                              *(unsigned char *)(v527 + 1404) = v713;
                              *(unsigned char *)(v527 + 1403) = BYTE1(v713);
                              if (a2)
                              {
                                uint64_t v538 = *(unsigned int *)(v527 + 1276);
                                if (*(_DWORD *)(a2 + 192) > v538) {
                                  *(unsigned char *)(*(void *)(a2 + 360) + v538) = v534;
                                }
                              }
                              int v521 = *(_DWORD *)(a1 + 24);
                            }
                          }
                        }
LABEL_863:
                        ++v522;
                        ++v524;
                        v523 += 16;
                      }
                      while (v522 < v521);
                    }
                  }
                  if (v370 && a3[577] == 1)
                  {
                    if (*(unsigned char *)(v652 + 133))
                    {
                      sub_1BBB08EE8(*(void *)(v652 + 8), v370, *(void *)v652);
                    }
                    else if (a3[615])
                    {
                      int v551 = *(unsigned __int8 *)(v370 + 1368);
                      if (v551 != 1 && v551 != 6)
                      {
                        sub_1BBB5CBF0(v370, 0, v675, (unsigned int *)(v370 + 4800), a3[653], 1, 1, a3[678], a3[680], a3[321], *(_WORD *)(v645 + 23), HIBYTE(*(_WORD *)(v645 + 23)));
                        if (a3[668])
                        {
                          if (a3[653])
                          {
                            long long v718 = 0u;
                            long long v719 = 0u;
                            long long v716 = 0u;
                            long long v717 = 0u;
                            long long v714 = 0u;
                            long long v715 = 0u;
                            long long v712 = 0u;
                            long long v713 = 0u;
                            int v552 = sub_1BBB0A89C(v675, &v712, 1);
                            if (v552)
                            {
                              int v553 = v552;
                              int v554 = sub_1BBB0A7C0(v675);
                              uint64_t v555 = 0;
                              if ((char)v554 <= 1) {
                                uint64_t v556 = 1;
                              }
                              else {
                                uint64_t v556 = (char)v554;
                              }
                              do
                              {
                                uint64_t v557 = *((void *)&v712 + v555);
                                if (*(unsigned __int8 *)(v557 + 23) >= a3[658]
                                  && v554 << 24 >= 1)
                                {
                                  int v558 = *(_DWORD *)(v557 + 1276);
                                  long long v559 = (int *)(v370 + 18468);
                                  uint64_t v560 = v556;
                                  long long v561 = (unsigned char *)(v370 + 5026);
                                  do
                                  {
                                    int v562 = *v559++;
                                    if (v562 == v558) {
                                      *long long v561 = 0;
                                    }
                                    v561 += 3;
                                    --v560;
                                  }
                                  while (v560);
                                }
                                ++v555;
                              }
                              while (v555 != v553);
                            }
                          }
                        }
                      }
                    }
                  }
                  if (**(_DWORD **)(a1 + 240) == 2 && a3[322])
                  {
                    uint64_t v539 = 0;
                    uint64_t v540 = 0;
                    unint64_t v541 = -1;
                    do
                    {
                      uint64_t v542 = *(void *)(*(void *)(a1 + 16) + v540);
                      if (!v542) {
                        break;
                      }
                      int v543 = *(_DWORD *)(v542 + 19156);
                      unsigned int v544 = *(_DWORD *)(v542 + 4564);
                      unsigned int v545 = v544 >> 1;
                      if (a3[663])
                      {
                        unsigned int v546 = *(_DWORD *)(v542 + 1276);
                        uint64_t v547 = *(void *)(a1 + 240) + 1768;
                        sub_1BBAF8334(v547, (v545 + v543 * *(unsigned __int16 *)(v542 + 4834)) / v544, (v545 + *(_DWORD *)(v542 + 4632) * v543) / v544, (v545 + v543 * *(unsigned __int16 *)(v542 + 4832)) / v544, v546);
                        sub_1BBAF83AC(v547, v546, 0, 1, 1);
                        *(_DWORD *)(v542 + 1264) = (v548 + 0.5);
                      }
                      else
                      {
                        int v549 = *(_DWORD *)(v542 + 1276);
                        if (v549 > *(_DWORD *)(a1 + 248))
                        {
                          *(_DWORD *)(a1 + 248) = v549;
                          sub_1BBAF8334(*(void *)(a1 + 240) + 1768, (v545 + v543 * *(unsigned __int16 *)(v542 + 4834)) / v544, (v545 + *(_DWORD *)(v542 + 4632) * v543) / v544, (v545 + v543 * *(unsigned __int16 *)(v542 + 4832)) / v544, *(_DWORD *)(v542 + 1276));
                        }
                      }
                      ++v541;
                      v540 -= 16;
                      --v539;
                    }
                    while (v541 < *(unsigned __int8 *)(a1 + 216));
                  }
                  return 0;
                }
              }
              LODWORD(v460) = a3[322];
              if (a3[322]
                && (LODWORD(v460) = a3[323], a3[323])
                && (LODWORD(v460) = *(unsigned __int8 *)(a1 + 216), *(unsigned char *)(a1 + 216)))
              {
                LODWORD(v460) = *(unsigned __int8 *)(a1 + 217);
                if (!*(unsigned char *)(a1 + 217)) {
                  goto LABEL_743;
                }
                uint64_t v461 = 0;
                uint64_t v462 = 0;
                unint64_t v460 = 0;
                do
                {
                  uint64_t v463 = *(void *)(*(void *)(a1 + 16) + v462);
                  if (!v463) {
                    break;
                  }
                  ++v460;
                  *(_WORD *)(*(void *)(a1 + 176) + 2 * v461) = *(_WORD *)(v463 + 4838);
                  *(_WORD *)(*(void *)(a1 + 192) + 2 * v461) = *(_WORD *)(v463 + 4834);
                  *(unsigned char *)(*(void *)(a1 + 208) + v461) = *(_DWORD *)(v463 + 5004);
                  v462 += 16;
                  --v461;
                }
                while (v460 < *(unsigned __int8 *)(a1 + 217));
                unsigned int v464 = *(unsigned __int8 *)(a1 + 216);
                if (*(unsigned char *)(a1 + 216))
                {
LABEL_743:
                  uint64_t v465 = -16;
                  uint64_t v466 = -1;
                  unint64_t v467 = 1;
                  while (1)
                  {
                    uint64_t v468 = *(void *)(*(void *)(a1 + 16) + v465);
                    if (!v468) {
                      break;
                    }
                    *(_WORD *)(*(void *)(a1 + 176) + 2 * v467) = *(_WORD *)(v468 + 4838);
                    *(_WORD *)(*(void *)(a1 + 192) + 2 * v467) = *(_WORD *)(v468 + 4834);
                    *(unsigned char *)(*(void *)(a1 + 208) + v467) = *(_DWORD *)(v468 + 5004);
                    int v469 = v467 + 1;
                    v465 -= 16;
                    --v466;
                    BOOL v316 = v467++ >= *(unsigned __int8 *)(a1 + 216);
                    if (v316)
                    {
                      unsigned int v464 = v469 - 1;
                      goto LABEL_749;
                    }
                  }
                  unsigned int v464 = v467 - 1;
                }
              }
              else
              {
                unsigned int v464 = 0;
              }
LABEL_749:
              uint64_t v470 = *(void *)(a1 + 176);
              if (v460 >= 7) {
                unint64_t v460 = 7;
              }
              else {
                unint64_t v460 = v460;
              }
              if (v464 >= 6) {
                uint64_t v471 = 6;
              }
              else {
                uint64_t v471 = v464;
              }
              if (v460)
              {
                uint64_t v472 = 0;
                int v473 = *(unsigned __int8 **)(a1 + 208);
                while (!*v473--)
                {
                  if (v460 == ++v472) {
                    goto LABEL_764;
                  }
                }
                LODWORD(v460) = v472;
              }
LABEL_764:
              if (v471)
              {
                uint64_t v477 = 0;
                while (1)
                {
                  uint64_t v478 = v477 + 1;
                  if (*(unsigned char *)(*(void *)(a1 + 208) + 1 + v477)) {
                    break;
                  }
                  ++v477;
                  if (v471 == v478) {
                    goto LABEL_770;
                  }
                }
                LODWORD(v471) = v477 + 1;
              }
LABEL_770:
              if (*(_WORD *)(v370 + 4724))
              {
                unsigned int v479 = *(unsigned __int16 *)(v370 + 4724) << 8;
                unsigned int v480 = __clz(v479);
                unsigned int v481 = ((byte_1BBB8A634[(unint64_t)(v479 << (v480 + 1)) >> 24] << 12) | 0x200000u) >> ((v480 + 1) >> 1);
                if ((v480 & 1) == 0) {
                  unsigned int v481 = (11585 * v481) >> 14;
                }
                unsigned int v482 = (v481 + 16) >> 5;
                if (v470)
                {
                  if (!v460) {
                    goto LABEL_781;
                  }
LABEL_774:
                  unsigned int v483 = 0;
                  int v484 = 0;
                  unsigned int v485 = *(unsigned __int16 **)(a1 + 176);
                  uint64_t v486 = v460;
                  do
                  {
                    v483 += v486;
                    int v487 = *v485--;
                    v484 += v486-- * v487;
                  }
                  while (v486);
                  if (v483)
                  {
                    unsigned int v488 = (v484 + (v483 >> 1)) / v483;
                    if (!v464) {
                      goto LABEL_779;
                    }
                  }
                  else
                  {
LABEL_781:
                    unsigned int v488 = 0;
                    if (!v464)
                    {
LABEL_779:
                      int v489 = 0;
                      unsigned int v490 = v488;
                      unsigned int v491 = v488;
                      if (!v460) {
                        goto LABEL_796;
                      }
                      goto LABEL_795;
                    }
                  }
                  unsigned int v492 = 0;
                  unsigned int v493 = 0;
                  int v494 = 0;
                  int v489 = 0;
                  int v495 = 0;
                  unint64_t v496 = v471;
                  if (v464 + 1 > 2) {
                    uint64_t v497 = v464 + 1;
                  }
                  else {
                    uint64_t v497 = 2;
                  }
                  unint64_t v498 = 1;
                  do
                  {
                    int v499 = *(unsigned __int16 *)(v470 + 2 * v498);
                    if (v498 <= v496) {
                      int v500 = v471;
                    }
                    else {
                      int v500 = 0;
                    }
                    v495 += v464 * v499;
                    v494 += v500 * v499;
                    v493 += v500;
                    v492 += v464;
                    if (v498 == 1) {
                      int v489 = *(unsigned __int16 *)(v470 + 2);
                    }
                    ++v498;
                    LODWORD(v471) = v471 - 1;
                    --v464;
                  }
                  while (v497 != v498);
                  if (v493)
                  {
                    unsigned int v491 = (v494 + (v493 >> 1)) / v493;
                    if (v492) {
                      goto LABEL_794;
                    }
                  }
                  else
                  {
                    unsigned int v491 = 0;
                    if (v492)
                    {
LABEL_794:
                      unsigned int v490 = (v495 + (v492 >> 1)) / v492;
                      if (!v460)
                      {
LABEL_796:
                        unsigned int v501 = v491 << 8;
                        if (v491 << 8)
                        {
                          unsigned int v502 = __clz(v501);
                          unsigned int v503 = ((byte_1BBB8A634[(unint64_t)(v501 << (v502 + 1)) >> 24] << 12) | 0x200000u) >> ((v502 + 1) >> 1);
                          if ((v502 & 1) == 0) {
                            unsigned int v503 = (11585 * v503) >> 14;
                          }
                          unsigned int v501 = (v503 + 16) >> 5;
                        }
                        int v504 = ((v501 - 2 * v482) & ((int)(v501 - 2 * v482) >> 31)) + 2 * v482;
                        if (v482 <= 16 * v504) {
                          unsigned __int16 v505 = v504;
                        }
                        else {
                          unsigned __int16 v505 = v482 >> 4;
                        }
                        *(_WORD *)(v370 + 4726) = v505;
                        unsigned int v506 = v505 * v482;
                        if (v482 > v505)
                        {
                          if (v505)
                          {
                            unsigned int v507 = __clz(v506);
                            unsigned int v508 = ((byte_1BBB8A634[(unint64_t)(v506 << (v507 + 1)) >> 24] << 12) | 0x200000u) >> ((v507 + 1) >> 1);
                            if (v507) {
                              unsigned int v509 = v508;
                            }
                            else {
                              unsigned int v509 = (11585 * v508) >> 14;
                            }
                            unsigned int v510 = (v509 + 16) >> 5;
                          }
                          else
                          {
                            unsigned int v510 = 0;
                          }
                          unsigned int v506 = v510 * v505;
                        }
                        if (v506)
                        {
                          unsigned int v511 = __clz(v506);
                          if (v511) {
                            unsigned int v512 = ((byte_1BBB8A634[(unint64_t)(v506 << (v511 + 1)) >> 24] << 12) | 0x200000u) >> ((v511 + 1) >> 1);
                          }
                          else {
                            unsigned int v512 = (11585
                          }
                                  * (((byte_1BBB8A634[(unint64_t)(v506 << (v511 + 1)) >> 24] << 12) | 0x200000u) >> ((v511 + 1) >> 1))) >> 14;
                          unsigned int v482 = (v512 + 16) >> 5;
                        }
                        else
                        {
                          LOWORD(v482) = 0;
                        }
                        goto LABEL_822;
                      }
LABEL_795:
                      unsigned int v491 = (((9 * v488 - 8 * v491) & ((int)(9 * v488 - 8 * v491) >> 31)) + 8 * v491) >> 3;
                      goto LABEL_796;
                    }
                  }
                  unsigned int v490 = 0;
                  if (!v460) {
                    goto LABEL_796;
                  }
                  goto LABEL_795;
                }
              }
              else
              {
                unsigned int v482 = 0;
                if (v470) {
                  goto LABEL_774;
                }
              }
              unsigned int v490 = 0;
              int v489 = 0;
LABEL_822:
              *(_WORD *)(v370 + 4728) = v482 + 1;
              *(_DWORD *)(v370 + 4752) = v490;
              *(_DWORD *)(v370 + 4756) = v489;
              if (!v358)
              {
                uint64_t v513 = *(unsigned int *)(v370 + 1276);
                if (*(_DWORD *)(v375 + 192) > v513)
                {
                  unsigned int v514 = (unsigned __int16)(v482 + 1);
                  if (v514 >= 0x7FFE) {
                    LOWORD(v514) = 32766;
                  }
                  *(_WORD *)(*(void *)(v375 + 376) + 2 * v513) = v514;
                }
                if (a3[316] == 1)
                {
                  uint64_t v515 = *(unsigned int *)(v370 + 1276);
                  uint64_t v516 = *(void *)(v375 + 384);
                  unsigned int v517 = *(_DWORD *)(v375 + 192);
                  if (v516 && v517 > v515)
                  {
                    unsigned int v518 = *(unsigned __int16 *)(v370 + 4838);
                    if (v518 >= 0x7FFE) {
                      LOWORD(v518) = 32766;
                    }
                    *(_WORD *)(v516 + 2 * v515) = v518;
                    LODWORD(v515) = *(_DWORD *)(v370 + 1276);
                    unsigned int v517 = *(_DWORD *)(v375 + 192);
                  }
                  if (v517 > v515)
                  {
                    unsigned int v519 = *(unsigned __int16 *)(v370 + 4724);
                    if (v519 >= 0x7FFE) {
                      LOWORD(v519) = 32766;
                    }
                    *(_WORD *)(*(void *)(v375 + 392) + 2 * v515) = v519;
                  }
                }
              }
              goto LABEL_837;
            }
            if (*(_DWORD *)(v697 + 1276))
            {
              *(_DWORD *)(v697 + 5004) = 0;
              goto LABEL_671;
            }
            int v387 = 1;
          }
          *(_DWORD *)(v697 + 5004) = v387;
          goto LABEL_671;
        }
LABEL_594:
        uint64_t v691 = 0;
        goto LABEL_595;
      }
LABEL_582:
      uint64_t v371 = 0;
      goto LABEL_583;
    }
    if ((_BYTE)v359)
    {
      int v409 = *(unsigned __int8 *)(v408 + 1394);
    }
    else
    {
      unsigned int v607 = *(unsigned __int8 *)(*(void *)(a2 + 360) + *(unsigned int *)(v408 + 1276));
      if (v607 < 0x17 && ((0x48066Fu >> v607) & 1) != 0) {
        goto LABEL_945;
      }
      int v409 = v607 == 23;
    }
    if (!v409)
    {
      uint64_t v408 = *(void *)(v9 + 64);
LABEL_947:
      sub_1BBB5EC1C(*(void *)(v9 + 224), v408, v407, *(void *)(v9 + 72), *(unsigned __int8 *)(v8 + 379));
      uint64_t v9 = a1;
      uint64_t v608 = *(void *)(*(void *)(a1 + 64) + 488);
      if (v608)
      {
        *(_DWORD *)(v608 + 64) = 1;
        *(void *)(v608 + 56) = 0x100000001;
        a6.n128_u32[0] = 1;
        *(_OWORD *)(v608 + 152) = xmmword_1BBB6FCD0;
      }
      goto LABEL_558;
    }
LABEL_945:
    *(void *)(v9 + 64) = v408;
    goto LABEL_947;
  }
LABEL_553:
  if (!*(unsigned char *)(v11 + 136)) {
    goto LABEL_557;
  }
  uint64_t v350 = *(void *)(v9 + 16);
  uint64_t v351 = *(void *)v350;
  if (*(void *)v350)
  {
    int v352 = *(_DWORD *)(v9 + 32);
    int v353 = *(_DWORD *)(v9 + 36);
    int v354 = *(_DWORD *)(v9 + 24);
    int v355 = v353 + v354 - 1;
    *(void *)&long long v712 = 0;
    WORD4(v712) = 1;
    BYTE1(v713) = 0;
    if (a2) {
      char v356 = *(unsigned char *)(a2 + 532) != 1;
    }
    else {
      char v356 = -1;
    }
    uint64_t v388 = 0;
    if (v352) {
      BOOL v389 = (v354 + v353) > 0x80000000;
    }
    else {
      BOOL v389 = 1;
    }
    int v390 = v389;
    if (v390) {
      uint64_t v391 = 0;
    }
    else {
      uint64_t v391 = v350 - 16;
    }
    uint64_t v392 = v350 + 16;
    if (v355 < 1) {
      uint64_t v392 = 0;
    }
    int v393 = v353 + v352;
    unsigned int v394 = *(_DWORD *)(v9 + 48) + 1;
    if (v394 < v393 + v354) {
      uint64_t v388 = *(void *)v9 + 16 * v394;
    }
    if (v645[37])
    {
      if ((*(unsigned char *)(v350 + 8) & 2) != 0) {
        uint64_t v395 = 0;
      }
      else {
        uint64_t v395 = v351;
      }
      if (v390)
      {
LABEL_641:
        uint64_t v396 = 0;
        goto LABEL_642;
      }
    }
    else
    {
      uint64_t v395 = *(void *)(v11 + 40);
      if (v390) {
        goto LABEL_641;
      }
    }
    if ((*(unsigned char *)(v391 + 8) & 2) != 0) {
      goto LABEL_641;
    }
    uint64_t v396 = *(void *)v391;
LABEL_642:
    if (v355 < 1 || (*(unsigned char *)(v392 + 8) & 2) != 0)
    {
      uint64_t v397 = 0;
      if (!v388) {
        goto LABEL_649;
      }
    }
    else
    {
      uint64_t v397 = *(void *)v392;
      if (!v388)
      {
LABEL_649:
        uint64_t v398 = 0;
        goto LABEL_650;
      }
    }
    if ((*(unsigned char *)(v388 + 8) & 2) != 0) {
      goto LABEL_649;
    }
    uint64_t v398 = *(void *)v388;
LABEL_650:
    sub_1BBB10E0C(v9 + 64, v8, a2, (uint64_t)&v712, v397, v395, v396, v398, a6.n128_f32[0], 0, v356);
    uint64_t v399 = *(void *)(v9 + 240);
    if (*(_DWORD *)v399 == 2) {
      *(_DWORD *)(v351 + 1264) = *(double *)(v399 + 1840);
    }
    sub_1BBB08EE8(*(void *)(v11 + 8), v395, *(void *)v11);
  }
  return 0;
}

int32x2_t *sub_1BBAF7CE4(int32x2_t *result, uint64_t a2, unsigned __int8 a3, _DWORD *a4)
{
  unsigned __int32 v4 = result[3].u32[0];
  if (v4)
  {
    signed __int32 v5 = v4 - 1;
    uint64_t v6 = *(void *)&result[2] + 16 * (int)(v4 - 1);
    if (*(void *)v6)
    {
      if ((*(unsigned char *)(v6 + 8) & 2) == 0)
      {
        unint64_t v7 = 0;
        int v8 = 0;
        while (2)
        {
          int32x2_t v9 = result[2];
          unint64_t v10 = v4;
          uint64_t v11 = (_DWORD *)(*(void *)&v9 + 16 * v7);
          while (1)
          {
            int v12 = v11[2];
            if ((v12 & 2) != 0 || !*(void *)v11) {
              break;
            }
            if ((*(unsigned char *)(*(void *)v11 + 1404) & 0xF) == 0 || v8 != 0)
            {
              if (v12)
              {
                int v8 = 1;
              }
              else
              {
                ++result[5].i32[1];
                --result[3].i32[1];
                v11[2] |= 1u;
                unint64_t v10 = result[3].u32[0];
                int v8 = 1;
                unsigned __int32 v4 = result[3].u32[0];
              }
              break;
            }
            int v8 = 0;
            ++v7;
            v11 += 4;
            if (v7 >= v4) {
              goto LABEL_21;
            }
          }
          if (++v7 < v10) {
            continue;
          }
          break;
        }
        if (!v8)
        {
          int32x2_t v9 = result[2];
LABEL_21:
          uint64_t v14 = (_DWORD *)(*(void *)&v9 + 16 * v5);
          if (*(unsigned char *)(*(void *)v14 + 1396))
          {
            ++result[5].i32[1];
            --result[3].i32[1];
            v14[2] |= 1u;
          }
        }
      }
    }
  }
  if (result[5].i32[1])
  {
    LODWORD(v15) = 0;
    uint64_t v16 = (result[3].i32[0] - 1);
    if ((int)v16 >= 0 && a3)
    {
      unint64_t v15 = 0;
      uint64_t v17 = 16 * (result[3].i32[0] - 1);
      do
      {
        uint64_t v18 = *(void *)&result[2] + v17;
        uint64_t v19 = *(void *)v18;
        int v20 = *(_DWORD *)(v18 + 8);
        if (*(void *)v18) {
          BOOL v21 = (*(_DWORD *)(v18 + 8) & 1) == 0;
        }
        else {
          BOOL v21 = 1;
        }
        if (!v21 && (*(_DWORD *)(v18 + 8) & 2) == 0)
        {
          int v23 = *(_DWORD *)(v18 + 12);
          *(void *)(a2 + 8 * v15) = v19;
          uint64_t v24 = *(void *)&result[2] + v17;
          *(void *)uint64_t v24 = v19;
          *(_DWORD *)(v24 + 8) = v20 | 2;
          *(_DWORD *)(v24 + 12) = v23;
          result[5] = vadd_s32(result[5], (int32x2_t)-1);
          ++v15;
        }
        if (v16-- < 1) {
          break;
        }
        v17 -= 16;
      }
      while (v15 < a3);
    }
  }
  else
  {
    LODWORD(v15) = 0;
  }
  *a4 = v15;
  return result;
}

double sub_1BBAF7E88(uint64_t a1, int a2, int a3, double a4, double a5, double a6)
{
  if (*(_DWORD *)(a1 + 88))
  {
    if (a6 <= 0.0)
    {
      double v6 = *(double *)(a1 + 16);
      double v7 = *(double *)(a1 + 24);
      double v8 = 1.0;
      *(double *)(a1 + 40) = a6;
      if (a3) {
        return v8 * a4;
      }
    }
    else
    {
      double v6 = *(double *)(a1 + 16);
      double v7 = *(double *)(a1 + 24);
      *(double *)(a1 + 40) = a6;
      if (a3)
      {
        double v8 = v7 / a6;
        return v8 * a4;
      }
      double v8 = v6 / a6;
    }
    double v14 = v7 / v6;
    if (a2) {
      return v8 * a4;
    }
    uint64_t v15 = *(int *)(a1 + 52);
    if ((int)v15 > 6 * *(_DWORD *)(a1 + 96))
    {
      uint64_t v16 = *(void *)(a1 + 80);
      BOOL v17 = a5 > 0.04 && v16 <= v15;
      if (v17 || v16 >= 1 && (double)(int)v15 * a5 / ((double)v16 + 0.01) > 0.04)
      {
        BOOL v17 = v16 <= v15;
        uint64_t v18 = v16 - v15;
        if (v17) {
          double v19 = (a5 + -0.04) * a6;
        }
        else {
          double v19 = (a5 + -0.04) * a6 * fmax(fmin((double)(int)v15 / (double)v18, 2.0), 0.5);
        }
        double v20 = 1.0;
        if (v6 > 0.0) {
          double v20 = (v7 * 0.7 + v6 * 0.3) / v6;
        }
        if (v19 < a6)
        {
          double v25 = a6 / (a6 - v19);
          if (v20 < v25)
          {
            if (v20 <= 1.0) {
              double v20 = v25 - (1.0 - v20);
            }
            else {
              double v20 = v25;
            }
          }
        }
        goto LABEL_52;
      }
    }
    if (v14 >= 0.8)
    {
      double v20 = 1.0;
      if (v14 <= 1.3)
      {
LABEL_52:
        double v24 = fmax(fmin(v20, 2.0), 0.5);
        goto LABEL_53;
      }
    }
    else
    {
      double v20 = 1.0;
    }
    if (v6 > 0.0) {
      double v20 = (v7 * 0.7 + v6 * 0.3) / v6;
    }
    goto LABEL_52;
  }
  double v9 = *(double *)(a1 + 16);
  if (a5 > 0.01 && *(double *)(a1 + 24) > v9 * 1.5) {
    ++*(_DWORD *)(a1 + 68);
  }
  double v8 = v9 / a6;
  BOOL v10 = a5 > 0.04 && a2 == 0;
  if (v10 && *(int *)(a1 + 60) >= 5)
  {
    uint64_t v11 = *(void *)(a1 + 80);
    uint64_t v12 = *(int *)(a1 + 52);
    if (v11 <= v12)
    {
      double v13 = (a5 + -0.04) * *(double *)(a1 + 40);
    }
    else
    {
      if ((double)(int)v12 * a5 / (double)v11 <= 0.04) {
        return v8 * a4;
      }
      double v13 = (a5 + -0.04) * *(double *)(a1 + 40) * (double)(int)v12 / (double)(v11 - v12);
    }
    double v21 = *(double *)(a1 + 24);
    double v22 = 1.0;
    if (v21 > v9)
    {
      if (*(double *)(a1 + 72) <= 0.03) {
        double v22 = (v9 + v21) * 0.5 / v9;
      }
      else {
        double v22 = v21 / v9;
      }
    }
    if ((v23 = a6 / (a6 - v13), v22 < v23) && (v24 = 2.0, double v22 = v23, v23 > 2.0) || (v24 = v22, v22 > 1.0)) {
LABEL_53:
    }
      double v8 = v8 * v24;
  }
  return v8 * a4;
}

uint64_t sub_1BBAF8164(uint64_t result, int a2, double a3, double a4)
{
  int v4 = *(_DWORD *)(result + 52);
  *(_DWORD *)(result + 52) = v4 + 1;
  int v5 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = v5 + 1;
  double v6 = (double)a2;
  if (v4) {
    double v7 = v6 * a3 * 0.5 + *(double *)(result + 424) * 0.5;
  }
  else {
    double v7 = v6 * a3;
  }
  *(double *)(result + 424) = v7;
  if (a4 >= 10.0)
  {
    double v8 = (double)a2 * a3 / a4;
    double v9 = v8 + *(double *)result;
    *(double *)uint64_t result = v9;
    int v10 = *(_DWORD *)(result + 56);
    if (v4 >= v10) {
      *(double *)(result + 16) = v9 / (double)(v4 + 1 - v10);
    }
    if (*(_DWORD *)(result + 88) == 1)
    {
      uint64_t v11 = result + 32 * (*(_DWORD *)(result + 32) % *(_DWORD *)(result + 96));
      *(double *)(v11 + 120) = a3;
      *(_DWORD *)(v11 + 112) = a2;
      *(double *)(v11 + 104) = a4;
      *(_DWORD *)(v11 + 128) = a2 - (int)*(double *)(result + 40);
      uint64_t v12 = *(unsigned int *)(result + 96);
      if ((int)v12 <= 0)
      {
        *(_DWORD *)(result + 48) = 0;
        int v16 = *(_DWORD *)(result + 32);
      }
      else
      {
        uint64_t v13 = 0;
        int v14 = 0;
        int v15 = 0;
        int v16 = *(_DWORD *)(result + 32);
        double v17 = 0.0;
        uint64_t v18 = (double *)&qword_1BBB85248;
        double v19 = 0.0;
        do
        {
          if (*(int *)(result + 32) + v13 >= 0)
          {
            uint64_t v20 = result + 32 * ((v16 + (int)v13) % (int)v12);
            double v21 = *(double *)(v20 + 104);
            if (v21 >= 10.0)
            {
              double v19 = v19 + *(double *)(v20 + 120) * (double)*(int *)(v20 + 112) / v21 * *v18;
              double v17 = v17 + *v18;
              v15 += *(_DWORD *)(v20 + 128);
              ++v14;
            }
          }
          --v13;
          ++v18;
        }
        while (v12 + v13);
        *(_DWORD *)(result + 48) = v15 / v14;
        if (v17 > 0.0) {
          *(double *)(result + 24) = v19 / v17;
        }
      }
      *(_DWORD *)(result + 32) = v16 + 1;
    }
    else if ((v5 & 0x80000000) == 0)
    {
      double v22 = v8 + *(double *)(result + 8);
      *(double *)(result + 8) = v22;
      *(double *)(result + 24) = v22 / (double)(v5 + 1 - *(_DWORD *)(result + 64));
    }
  }
  else
  {
    ++*(_DWORD *)(result + 56);
    ++*(_DWORD *)(result + 64);
  }
  return result;
}

uint64_t sub_1BBAF8334(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  *(double *)(*(void *)(result + 40) + 8 * (a5 % *(_DWORD *)(result + 64))) = (double)a2;
  uint64_t v5 = *(void *)(result + 56);
  if (v5)
  {
    double v6 = fabs(sqrt((double)a4));
    *(double *)(v5 + 8 * (a5 % *(_DWORD *)(result + 64))) = v6;
    *(double *)uint64_t result = v6;
  }
  uint64_t v7 = *(void *)(result + 48);
  if (v7) {
    *(double *)(v7 + 8 * (a5 % *(_DWORD *)(result + 64))) = fabs(sqrt((double)a3));
  }
  if (*(_DWORD *)(result + 100) < a5) {
    *(_DWORD *)(result + 100) = a5;
  }
  return result;
}

uint64_t sub_1BBAF83AC(uint64_t result, unsigned int a2, int a3, int a4, int a5)
{
  if (*(_DWORD *)(result + 104) == a2) {
    return result;
  }
  int v5 = *(_DWORD *)(result + 100);
  BOOL v6 = __OFSUB__(v5, a2);
  int v7 = v5 - a2;
  if (v7 < 0 != v6) {
    return result;
  }
  *(_DWORD *)(result + 104) = a2;
  if (!*(_DWORD *)(result + 108))
  {
    if (v7 >= 6) {
      LODWORD(v17) = 6;
    }
    else {
      LODWORD(v17) = v7;
    }
    if (a2)
    {
      uint64_t v18 = 0;
      unsigned int v19 = a2 - 1;
      double v20 = 0.0;
      double v21 = 0.0;
      do
      {
        if ((v19 & 0x80000000) == 0)
        {
          double v22 = *(double *)&qword_1BBB85298[v18];
          double v20 = v20 + v22 * *(double *)(*(void *)(result + 40) + 8 * (v19 % *(_DWORD *)(result + 64)));
          double v21 = v21 + v22;
        }
        ++v18;
        --v19;
      }
      while (v18 != 6);
    }
    else
    {
      double v21 = 0.0;
      double v20 = 0.0;
    }
    if (v7 <= 0)
    {
      uint64_t v23 = *(void *)(result + 40);
      unsigned int v24 = *(_DWORD *)(result + 64);
      double v28 = 0.0;
      double v26 = 0.0;
    }
    else
    {
      uint64_t v23 = *(void *)(result + 40);
      unsigned int v24 = *(_DWORD *)(result + 64);
      if ((int)v17 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v17;
      }
      unsigned int v25 = a2 + 1;
      double v26 = 0.0;
      uint64_t v27 = (double *)qword_1BBB85298;
      double v28 = 0.0;
      do
      {
        double v29 = *v27++;
        double v26 = v26 + v29 * *(double *)(v23 + 8 * (v25 % v24));
        double v28 = v28 + v29;
        ++v25;
        --v17;
      }
      while (v17);
    }
    double v30 = v26 / v28;
    if (v28 <= 0.0) {
      double v30 = 0.0;
    }
    uint64_t v31 = a2 % v24;
    if (v21 <= 0.0) {
      double v32 = 0.0;
    }
    else {
      double v32 = v20 / v21;
    }
    double v33 = *(double *)(v23 + 8 * v31);
    if (v21 > 0.0 || (double v34 = *(double *)(v23 + 8 * v31), v28 > 0.0)) {
      double v34 = (v20 + v26 + v33) / (v21 + v28 + 1.0);
    }
    *(_WORD *)(result + 96) = 0;
    uint64_t v35 = *(void *)(result + 48);
    if (v35
      && a4
      && (uint64_t v36 = *(void *)(result + 56)) != 0
      && ((double v37 = *(double *)(v35 + 8 * v31), v37 > 10.0)
        ? (BOOL v38 = *(double *)(v36 + 8 * v31) <= v37 * 3.162278)
        : (BOOL v38 = 1),
          !v38))
    {
      *(unsigned char *)(result + 96) = 1;
    }
    else if (!a3)
    {
      if (v30 > 0.0)
      {
        double v39 = v30 - v32;
        if (v30 - v32 < 0.0) {
          double v39 = -(v30 - v32);
        }
        if (v39 / v34 > 0.15)
        {
          double v40 = v30 - v34;
          if (v30 - v34 < 0.0) {
            double v40 = -(v30 - v34);
          }
          double v41 = v32 - v34;
          if (v41 < 0.0) {
            double v41 = -v41;
          }
          if (v40 >= v41) {
            double v42 = v32 + v33;
          }
          else {
            double v42 = v30 + v33;
          }
          double v34 = v42 * 0.5;
        }
      }
      goto LABEL_79;
    }
    if (v30 > 0.0)
    {
      *(double *)(result + 80) = v30;
      double v34 = v30;
      goto LABEL_80;
    }
LABEL_79:
    *(double *)(result + 80) = v34;
    goto LABEL_80;
  }
  uint64_t v8 = a2 % *(_DWORD *)(result + 64);
  double v9 = *(double *)(*(void *)(result + 40) + 8 * v8);
  double v10 = fabs(sqrt(v9));
  if (v9 == -INFINITY) {
    double v10 = INFINITY;
  }
  *(_WORD *)(result + 96) = 0;
  if (a4)
  {
    uint64_t v11 = *(void *)(result + 48);
    if (v11)
    {
      uint64_t v12 = *(void *)(result + 56);
      if (v12)
      {
        double v13 = *(double *)(v11 + 8 * v8);
        if (a3 || (v13 > 10.0 ? (BOOL v14 = *(double *)(v12 + 8 * v8) <= v13 * 3.162278) : (BOOL v14 = 1), !v14))
        {
          *(unsigned char *)(result + 96) = 1;
          double v10 = v13;
        }
      }
    }
    double v10 = fmax(v10, 10.0);
    double v15 = *(double *)(result + 88);
    if (v15 <= 0.0)
    {
      *(double *)(result + 80) = v10;
      double v16 = v10;
    }
    else if (v15 - v10 <= v15 * 0.15)
    {
      double v16 = (v10 + v15 * 7.0) * 0.125;
      *(double *)(result + 80) = v16;
    }
    else
    {
      double v16 = (v15 + v10) * 0.5;
      *(double *)(result + 80) = v16;
      *(unsigned char *)(result + 97) = 1;
    }
    *(double *)(result + 88) = v16;
  }
  double v43 = v10;
  if (!*(unsigned char *)(result + 98)) {
    double v43 = *(double *)(result + 80);
  }
  *(double *)(result + 72) = v43;
  if (a5)
  {
    double v44 = *(double *)(result + 80);
    if (v10 < v44 * 0.75)
    {
      *(double *)(result + 72) = v44 * 0.75;
      return result;
    }
    if (v10 > v44 * 1.25)
    {
      double v34 = (v10 + v44 * 1.25) * 0.5;
LABEL_80:
      *(double *)(result + 72) = v34;
    }
  }
  return result;
}

uint64_t sub_1BBAF8710(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(_DWORD *)(result + 204) = 0;
  int v4 = *(unsigned __int8 *)(result + 200);
  BOOL v6 = a3 < 2 && v4 != 0;
  *(unsigned char *)(result + 208) = v6;
  *(unsigned char *)(result + 209) = 0;
  if (!*(unsigned char *)(a2 + 5424))
  {
    if ((*(_DWORD *)(result + 376) - 0x400000) >= 0xFFC00001
      && *(unsigned char *)(*(void *)(a2 + 205840) + 1393))
    {
      int v8 = 2;
    }
    else
    {
      if (!v4 || !a4) {
        return result;
      }
      int v8 = 1;
    }
    *(_DWORD *)(result + 204) = v8;
    return result;
  }
  int v7 = *(unsigned char **)(a2 + 5416);
  if (v4 && (v7[104] || v7[107])) {
    *(_DWORD *)(result + 204) = 1;
  }
  *(unsigned char *)(result + 209) = v7[110];
  return result;
}

void sub_1BBAF87A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, int a6, int a7)
{
  unsigned int v9 = *(unsigned __int8 *)(a2 + 1368);
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 19112);
  *(_WORD *)(a1 + 258) = *(_WORD *)(a2 + 19114);
  int v10 = *(_DWORD *)(a1 + 420);
  if (a7 && !v10 && v9 <= 9)
  {
    if (((1 << v9) & 0x129) != 0)
    {
      *(unsigned char *)(a2 + 19) = 1;
      return;
    }
    if (((1 << v9) & 0x294) != 0)
    {
      *(unsigned char *)(a2 + 19) = 1;
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 19))
  {
    if (!v10)
    {
LABEL_18:
      *(unsigned char *)(a1 + 413) = *(unsigned char *)(a2 + 1368);
      *(unsigned char *)(a1 + 410) = 1;
      goto LABEL_19;
    }
    uint64_t v11 = *a3;
    uint64_t v12 = *a4;
    if (*a3 && (unsigned int v13 = *(unsigned __int8 *)(a2 + 1368), v13 <= 8) && ((1 << v13) & 0x16B) != 0)
    {
      *(_DWORD *)(a1 + 424) = *(_DWORD *)(v11 + 1364);
      int v14 = *(_DWORD *)(a2 + 1276) - *(_DWORD *)(v11 + 1276);
      if (v14 < 0) {
        int v14 = *(_DWORD *)(v11 + 1276) - *(_DWORD *)(a2 + 1276);
      }
      *(unsigned char *)(a1 + 432) = v14;
      char v15 = *(unsigned char *)(v11 + 1368);
    }
    else
    {
      *(_DWORD *)(a1 + 424) = 0;
      *(unsigned char *)(a1 + 432) = 0;
      char v15 = 11;
    }
    *(unsigned char *)(a1 + 434) = v15;
    if (v12 && ((int v16 = *(unsigned __int8 *)(a2 + 1368), v16 == 6) || v16 == 1))
    {
      *(_DWORD *)(a1 + 428) = *(_DWORD *)(v12 + 1364);
      int v17 = *(_DWORD *)(a2 + 1276) - *(_DWORD *)(v12 + 1276);
      if (v17 < 0) {
        int v17 = *(_DWORD *)(v12 + 1276) - *(_DWORD *)(a2 + 1276);
      }
      *(unsigned char *)(a1 + 433) = v17;
      char v18 = *(unsigned char *)(v12 + 1368);
    }
    else
    {
      *(_DWORD *)(a1 + 428) = 0;
      *(unsigned char *)(a1 + 433) = 0;
      char v18 = 11;
    }
    *(unsigned char *)(a1 + 435) = v18;
    if (v9 != 1 && v9 != 6 && !*(unsigned char *)(a2 + 1394)) {
      unsigned int v9 = 1;
    }
    if (*(unsigned char *)(a1 + 416)) {
      *(void *)(*(void *)(a1 + 2016) + 16 * ((*(_DWORD *)(a2 + 1276) + 1) % *(_DWORD *)(a1 + 1880)) + 8) = *(void *)(*(void *)(a1 + 2016) + 16 * (*(_DWORD *)(a2 + 1276) % *(_DWORD *)(a1 + 1880)) + 8) + ((600 * (unint64_t)(float)(1000000.0 / *(float *)(a2 + 4940)) * (unsigned __int128)0x10C6F7A0B5EEuLL) >> 64);
    }
    *(unsigned char *)(a1 + 413) = v9;
    int v19 = *(_DWORD *)(a2 + 5004) | a6;
    *(unsigned char *)(a1 + 414) = *(unsigned char *)(a2 + 5004) | a6;
    int v20 = *(_DWORD *)(a1 + 468);
    if (v20 == 1)
    {
      char v21 = v19 | a5;
      int v19 = (v19 | a5);
      *(unsigned char *)(a1 + 414) = v21;
    }
    else
    {
      int v19 = v19;
    }
    if (v9 <= 9)
    {
      BOOL v22 = 1;
      if (((1 << v9) & 0x129) != 0)
      {
        BOOL v22 = v19 != 0;
LABEL_42:
        int v23 = *(_DWORD *)(a1 + 420);
        double v24 = *(double *)(a1 + 304);
        uint64_t v25 = *(void *)(a1 + 400);
        int v26 = *(_DWORD *)(a2 + 1276);
        *(unsigned char *)(a1 + 410) = v22;
        int v27 = *(_DWORD *)(a1 + 204);
        if (v27 == 2)
        {
          uint64_t v28 = *(void *)(a1 + 1816);
          if (!v28)
          {
            double v30 = 0.0;
            if (v22) {
              goto LABEL_47;
            }
            goto LABEL_49;
          }
          double v29 = (double *)(v28 + 8 * (*(_DWORD *)(a1 + 1872) % *(_DWORD *)(a1 + 1832)));
        }
        else
        {
          double v29 = (double *)(a1 + 1840);
        }
        double v30 = *v29;
        if (v22)
        {
LABEL_47:
          BOOL v31 = 1;
          goto LABEL_50;
        }
LABEL_49:
        BOOL v31 = *(unsigned char *)(a1 + 1864) != 0;
LABEL_50:
        BOOL v32 = v20 == 1;
        if (v20 == 1) {
          BOOL v31 = 0;
        }
        *(unsigned char *)(a1 + 410) = v31;
        if (*(unsigned char *)(a1 + 416))
        {
          int v33 = *(_DWORD *)(a1 + 2024);
          *(_DWORD *)(a1 + 2024) = v33 + 1;
          uint64_t v34 = *(unsigned int *)(a1 + 2008);
          if ((int)v34 >= 1)
          {
            unint64_t v35 = 0;
            while (1)
            {
              uint64_t v36 = *(void *)(a1 + 8 * v35 + 1888);
              int v37 = 0;
              if (v36 >= 1 && v26 >= 1)
              {
                uint64_t v39 = *(void *)(a1 + 2016);
                int v40 = *(_DWORD *)(a1 + 1880);
                int v41 = v26 - 1;
                do
                {
                  uint64_t v42 = v39 + 16 * (v41 % v40);
                  v37 += *(_DWORD *)v42;
                  if (*(void *)(v39 + 16 * (v26 % v40) + 8) - *(void *)(v42 + 8) >= v36) {
                    break;
                  }
                  --v41;
                }
                while ((v41 & 0x80000000) == 0);
              }
              if (v35 <= 0x63)
              {
                int v43 = *(_DWORD *)(a1 + 4 * v35 + 1968);
                BOOL v44 = __OFSUB__(v37, v43);
                int v45 = v37 - v43;
                if (!((v45 < 0) ^ v44 | (v45 == 0)) && (v33 > 4 || (uint64_t)v35 <= *(char *)(a1 + 2028))) {
                  break;
                }
              }
              if (++v35 == v34) {
                goto LABEL_72;
              }
            }
            if (v35 <= 1) {
              goto LABEL_77;
            }
            LODWORD(v35) = v35 - 5 * v45 / v43;
            if ((int)v35 <= 1) {
              LODWORD(v35) = 1;
            }
            if (v35 != 100)
            {
LABEL_77:
              *(_DWORD *)(a1 + 2024) = 0;
              *(unsigned char *)(a1 + 2028) = v35;
              unsigned int v47 = (int *)(a1 + 2044);
              uint64_t v48 = (unsigned char *)(a1 + 2029);
              int v46 = v35;
              *(_DWORD *)(a1 + 2044) = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          LOBYTE(v35) = *(unsigned char *)(a1 + 2028);
          if ((int)v34 - 1 > (char)v35 && v33 >= 2)
          {
            LOBYTE(v35) = v35 + 1;
            *(unsigned char *)(a1 + 2028) = v35;
          }
          *(_DWORD *)(a1 + 2044) = 0;
          int v46 = 100;
          *(unsigned char *)(a1 + 2029) = 100;
          if (v33 <= 7)
          {
            unsigned int v47 = (int *)(a1 + 2044);
            uint64_t v48 = (unsigned char *)(a1 + 2029);
LABEL_78:
            *uint64_t v48 = v35 - 1;
            if (!v46 || (char)v35 <= 1)
            {
              if (v46) {
                int v49 = 1;
              }
              else {
                int v49 = 2;
              }
              int *v47 = v49;
            }
          }
        }
        if (v9 <= 9 && ((1 << v9) & 0x3BD) != 0)
        {
          double v50 = v24 * (double)(v23 + 1);
          if (v20 != 1) {
            double v24 = v50 / (double)v23;
          }
          double v51 = (double)v25;
          if (*(unsigned char *)(a1 + 415))
          {
            double v52 = *(double *)(a1 + 328);
            double v53 = 10.0;
            if (v24 > v52) {
              double v53 = v24 - v52;
            }
          }
          else
          {
            double v53 = v24;
          }
          double v54 = v51 / v50;
          if (v20)
          {
            if (*(unsigned char *)(a1 + 1864)) {
              BOOL v55 = 1;
            }
            else {
              BOOL v55 = *(unsigned char *)(a1 + 1865) != 0;
            }
            int v59 = *(_DWORD *)(a1 + 436);
            if (v59 >= 1)
            {
              double v60 = (double)(v59 / 0xAu);
              if (v53 * 0.25 <= v60) {
                double v60 = v53 * 0.25;
              }
              double v53 = v53 - v60;
            }
            int v61 = *(_DWORD *)(a1 + 440);
            if (v53 > (double)v61) {
              double v53 = (double)v61;
            }
            if (!*(unsigned char *)(a1 + 409) || ((1 << v9) & 0x294) != 0)
            {
              if (*(_DWORD *)(a1 + 376) && v27 == 2)
              {
                if (*(double *)(a1 + 280) <= 0.0)
                {
                  double v58 = exp2((*(double *)(a1 + 360) + -12.0) / 6.0) * 0.85;
LABEL_128:
                  BOOL v57 = (*(_DWORD *)(a1 + 204) & 0xFFFFFFFD) == 0;
                  if (!v55) {
                    goto LABEL_130;
                  }
LABEL_129:
                  if (*(unsigned char *)(a1 + 200)) {
                    goto LABEL_130;
                  }
                  *(void *)(a1 + 480) = 0;
                  *(void *)(a1 + 496) = 0;
                  int v64 = *(_DWORD *)(a1 + 532);
                  if (v64 < 1)
                  {
LABEL_126:
                    *(_DWORD *)(a1 + 540) = 0;
                    *(void *)(a1 + 532) = 0xFFFFFFFFLL;
                    goto LABEL_130;
                  }
LABEL_125:
                  *(double *)(a1 + 544) = (double)*(int *)(a1 + 540) / (double)v64;
                  goto LABEL_126;
                }
                if (v53 >= -((double)*(int *)(a1 + 464) - (double)v61 * 0.9) / (*(double *)(a1 + 456) + 1.0)) {
                  double v53 = -((double)*(int *)(a1 + 464) - (double)v61 * 0.9) / (*(double *)(a1 + 456) + 1.0);
                }
                uint64_t v62 = a1 + 1336;
              }
              else
              {
                uint64_t v62 = a1 + 432 * v27 + 472;
              }
              double v58 = sub_1BBAF7E88(v62, v55, v32, v30, v54, v53);
              goto LABEL_128;
            }
            long double v86 = exp2((*(double *)(a1 + 360) + 2.0 + -12.0) / 6.0);
            BOOL v57 = 0;
            double v58 = v86 * 0.85;
            if (v55) {
              goto LABEL_129;
            }
LABEL_130:
            uint64_t v65 = *(int *)(a1 + 216);
            if (v58 <= flt_1BBB85234[v65]) {
              double v66 = flt_1BBB85234[v65];
            }
            else {
              double v66 = v58;
            }
            int v20 = *(_DWORD *)(a1 + 468);
            double v67 = 1.0;
            if (!v20)
            {
              int v68 = *(_DWORD *)(a1 + 420);
              double v69 = (double)*(uint64_t *)(a1 + 400)
                  / ((*(double *)(a1 + 264) + *(double *)(a1 + 264))
                   * fmax(sqrt((double)(v68 / 25)), 1.0))
                  + 1.0;
              double v70 = 2.0;
              if (v69 <= 2.0) {
                double v70 = v69;
              }
              if (v69 >= 0.5) {
                double v71 = v70;
              }
              else {
                double v71 = 0.5;
              }
              if (v68 >= 5) {
                double v67 = v71;
              }
              else {
                double v67 = 1.0;
              }
              double v66 = v66 * v67;
            }
            if (!v57) {
              goto LABEL_160;
            }
            double v72 = *(double *)(a1 + 360);
            int v73 = *(_DWORD *)(a1 + 204);
            if (v73 != 2 && *(unsigned char *)(a1 + 409) != 0) {
              double v72 = v72 + 2.912561;
            }
            double v75 = exp2((v72 + -12.0) / 6.0) * 0.85;
            if (v73 == 2)
            {
              double v76 = 2.5198421;
              double v77 = v75 * 2.5198421;
            }
            else
            {
              double v76 = 1.514528;
              double v77 = v75 * 1.514528;
              double v75 = v75 / 1.514528;
              if (v67 > 1.05)
              {
                double v77 = v77 * 1.514528;
                goto LABEL_155;
              }
              if (v67 >= 0.95) {
                goto LABEL_155;
              }
            }
            double v75 = v75 / v76;
LABEL_155:
            if (v77 >= v66) {
              double v77 = v66;
            }
            if (v75 <= v66) {
              double v66 = v77;
            }
            else {
              double v66 = v75;
            }
LABEL_160:
            double v78 = log(v66 / 0.85) * 6.0 / 0.693147181 + 12.0;
            goto LABEL_161;
          }
          if (v31)
          {
            double v56 = sub_1BBAF7E88(a1 + 472, 1, 0, v30, v54, v53);
            BOOL v57 = *(unsigned char *)(a1 + 411) == 0;
            if (*(_DWORD *)(a1 + 376) <= 1u) {
              double v58 = v56;
            }
            else {
              double v58 = v56 / 1.4;
            }
          }
          else
          {
            BOOL v57 = 0;
            double v58 = 0.0;
            if (v9 > 8 || ((1 << v9) & 0x129) == 0) {
              goto LABEL_130;
            }
            BOOL v63 = 1;
            if (!*(unsigned char *)(a1 + 1864)) {
              BOOL v63 = *(unsigned char *)(a1 + 1865) != 0;
            }
            *(unsigned char *)(a1 + 411) = 1;
            if (*(unsigned char *)(a1 + 409) && (v9 > 7 || ((1 << v9) & 0x94) == 0))
            {
              long double v88 = exp2((*(double *)(a1 + 360) + 2.0 + -12.0) / 6.0);
              BOOL v57 = 0;
              double v58 = v88 * 0.85;
              if (!v63) {
                goto LABEL_130;
              }
            }
            else
            {
              double v58 = sub_1BBAF7E88(a1 + 472, v63, v32, v30, v54, v53);
              BOOL v57 = 1;
              if (!v63) {
                goto LABEL_130;
              }
            }
          }
          *(void *)(a1 + 480) = 0;
          *(void *)(a1 + 496) = 0;
          int v64 = *(_DWORD *)(a1 + 532);
          if (v64 <= 0) {
            goto LABEL_126;
          }
          goto LABEL_125;
        }
        unsigned int v83 = *(unsigned __int8 *)(a1 + 434);
        if (v83 <= 9 && ((1 << v83) & 0x294) != 0)
        {
          unsigned int v84 = *(unsigned __int8 *)(a1 + 435);
          if (v84 <= 9 && ((1 << v84) & 0x294) != 0)
          {
            double v85 = (float)(*(float *)(a1 + 424) + *(float *)(a1 + 428)) * 0.5 + 2.912561;
LABEL_192:
            double v78 = v85 + 2.27107;
            double v66 = 0.0;
LABEL_161:
            if (v20 == 1)
            {
              double v79 = *(double *)(a1 + 384);
              if (v78 < v79)
              {
                double v80 = v79 + -6.0;
                if (v78 <= v80) {
                  double v78 = v80;
                }
                if (v78 <= (double)dword_1BBB85334[*(int *)(a1 + 216)]) {
                  double v78 = (double)dword_1BBB85334[*(int *)(a1 + 216)];
                }
              }
            }
            *(double *)(a1 + 392) = v66;
            double v81 = 51.0;
            if (v78 <= 51.0) {
              double v81 = v78;
            }
            if (v78 >= (double)dword_1BBB8BE20[*(int *)(a1 + 216)]) {
              double v82 = v81;
            }
            else {
              double v82 = (double)dword_1BBB8BE20[*(int *)(a1 + 216)];
            }
            *(double *)(a1 + 352) = v82;
            goto LABEL_173;
          }
          if (((1 << v83) & 0x294) != 0)
          {
LABEL_190:
            float v87 = *(float *)(a1 + 424);
            goto LABEL_191;
          }
        }
        else
        {
          unsigned int v84 = *(unsigned __int8 *)(a1 + 435);
        }
        if (v84 > 9 || ((1 << v84) & 0x294) == 0)
        {
          int v89 = *(char *)(a1 + 432);
          int v90 = *(unsigned __int8 *)(a1 + 433);
          if (v89 >= 1)
          {
            if ((char)v90 >= 1)
            {
              float v87 = (float)((float)(*(float *)(a1 + 428) * (float)v89) + (float)(*(float *)(a1 + 424) * (float)(char)v90))
                  / (float)(v90 + v89);
              goto LABEL_191;
            }
            goto LABEL_190;
          }
          if ((char)v90 < 1)
          {
            double v85 = 0.0;
            goto LABEL_192;
          }
        }
        float v87 = *(float *)(a1 + 428);
LABEL_191:
        double v85 = v87;
        goto LABEL_192;
      }
      if (((1 << v9) & 0x294) != 0) {
        goto LABEL_42;
      }
    }
    BOOL v22 = 0;
    goto LABEL_42;
  }
  if (!v10) {
    goto LABEL_18;
  }
LABEL_19:
  *(long double *)(a1 + 392) = exp2((*(double *)(a1 + 352) + -12.0) / 6.0) * 0.85;
LABEL_173:
  *(unsigned char *)(a2 + 19) = 1;
}

float sub_1BBAF9238(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float result = *(float *)(a3 + 205864);
  uint64_t v5 = *(void *)(a3 + 5392);
  float v6 = *(float *)(v5 + 16);
  int v7 = *(unsigned __int8 *)(v5 + 777);
  if (!*(unsigned char *)(a2 + 104))
  {
    if (*(_DWORD *)(a2 + 340) == 3)
    {
      float v13 = *(float *)(a2 + 40) + -1.0;
      if (result >= v13) {
        float result = *(float *)(a2 + 40) + -1.0;
      }
      if (*(unsigned char *)(a2 + 348)
        && !*(unsigned char *)(v5 + 777)
        && *(int *)(a2 + 332) >= 3
        && (int)(float)(v13 - result) <= 1
        && result > (float)dword_1BBB8BDF8[*(int *)(a1 + 216)])
      {
        float result = result + -1.0;
      }
      goto LABEL_30;
    }
    uint64_t v14 = *(unsigned int *)(a2 + 312);
    if (v14 <= 1)
    {
      if (*(unsigned char *)(a2 + 45) || *(unsigned char *)(a2 + 46))
      {
        float v15 = *(float *)(a2 + 40);
        goto LABEL_28;
      }
      if (*(unsigned char *)(a2 + 77) || *(unsigned char *)(a2 + 78))
      {
        float v15 = *(float *)(a2 + 72);
LABEL_28:
        float v16 = v15 - (float)*((int *)&unk_1BBB85304 + v14);
        if (result <= v16) {
          float result = v16;
        }
      }
    }
LABEL_30:
    if (result > v6) {
      float v6 = result;
    }
    BOOL v12 = a4 == 0;
    goto LABEL_33;
  }
  if (*(int *)(v5 + 796) >= 2)
  {
    float v8 = (float)(v6 - result) * 0.5;
    if (v8 < 0.0) {
      float v8 = 0.0;
    }
    float result = result + v8;
  }
  if (*(unsigned char *)(a2 + 109))
  {
    float v9 = *(float *)(v5 + 20);
    double v10 = *(double *)(*(void *)(a3 + 152) + 264);
    if (v10 <= 6000000.0 && result < v9) {
      float result = result + (float)((int)(float)(v9 - result) >> (int)(v10 / 2000001.0));
    }
    if (v10 <= 10000000.0)
    {
      float v6 = fmaxf(result, 28.0);
      BOOL v12 = *(unsigned char *)(a2 + 111) == 0;
LABEL_33:
      if (!v12) {
        float result = v6;
      }
    }
  }
  BOOL v18 = (*(_DWORD *)(*(void *)(a3 + 136) + 4852) - 3) <= 1
     && v7 != 0
     && (*(unsigned __int8 *)(a2 + 104) | *(unsigned __int8 *)(*(void *)(a3 + 144) + 708)) == 0;
  if (v18 && (float)(*(float *)(a2 + 40) - *(float *)(a2 + 96)) < 4.0 && !*(unsigned char *)(a1 + 211))
  {
    int v28 = *(_DWORD *)(a1 + 204);
    int v29 = *(_DWORD *)(a1 + 432 * v28 + 568);
    if (v29 >= 7) {
      int v30 = 7;
    }
    else {
      int v30 = *(_DWORD *)(a1 + 432 * v28 + 568);
    }
    if (v30 < 3)
    {
      int v37 = 0;
    }
    else
    {
      int v31 = 0;
      int v32 = 0;
      int v33 = *(_DWORD *)(a1 + 432 * v28 + 504);
      int v34 = -v30;
      int v35 = -2;
      do
      {
        if (v33 + v35 >= 0)
        {
          uint64_t v36 = ((v33 + v35) % v29);
          if (*(double *)(a1 + 432 * v28 + 32 * v36 + 576) >= 10.0)
          {
            v32 += *(_DWORD *)(a1 + 432 * v28 + 32 * v36 + 584);
            ++v31;
          }
        }
        --v35;
      }
      while (v34 != v35);
      int v37 = 0;
      if (v31 && v33 > 0) {
        int v37 = *(_DWORD *)(a1 + 432 * v28 + 32 * ((v33 - 1) % v29) + 584) * v31 > (10 * v32);
      }
    }
    *(_DWORD *)(a2 + 376) += v37;
  }
  int v19 = *(_DWORD *)(a2 + 376);
  if (v19 >= 4) {
    int v20 = 4;
  }
  else {
    int v20 = *(_DWORD *)(a2 + 376);
  }
  float v21 = 28.0;
  if (v19 >= 11)
  {
    int v22 = v19 >> 3;
    if (v19 >> 3 >= 2) {
      int v22 = 2;
    }
    float v21 = (float)(v22 | 0x1C);
  }
  if (*(_DWORD *)(a2 + 332)
    || *(_DWORD *)(a2 + 236)
    || ((float v23 = *(float *)(a2 + 40), result < v23) ? (v24 = v23 > v21) : (v24 = 1),
        v24
     || (uint64_t v25 = (_DWORD *)((char *)&unk_1BBB8530C + 8 * (v20 & ~(v20 >> 31))),
         *(_DWORD *)(a2 + 36) * *v25 >= (*(_DWORD *)(a2 + 32) * v25[1]))))
  {
    if (v19 >= 4 && *(int *)(a2 + 372) <= 1 && result > *(float *)(a2 + 40)) {
      return *(float *)(a2 + 40);
    }
  }
  else
  {
    double v26 = v23 + -0.5;
    if (v26 > result) {
      return v26;
    }
  }
  return result;
}

void sub_1BBAF95A4(uint64_t a1, int a2, int a3, signed int a4, unsigned int a5, uint64_t a6, int a7, int a8, float a9)
{
  BOOL v18 = (long long *)(a1 + 1768);
  unint64_t v19 = *(unsigned __int8 *)(a1 + 413);
  if (v19 > 9) {
    int v20 = 0;
  }
  else {
    int v20 = dword_1BBB85348[v19];
  }
  sub_1BBAF83AC(a1 + 1768, a4, *(unsigned __int8 *)(a1 + 410), v20, *(_DWORD *)(a1 + 468) == 1);
  double v22 = v21;
  double v23 = a9;
  double v24 = exp2((a9 + -12.0) / 6.0);
  if (*(_DWORD *)(a1 + 204) == 2)
  {
    uint64_t v25 = *(void *)(a1 + 1816);
    if (v25) {
      double v22 = *(double *)(v25 + 8 * (*(_DWORD *)(a1 + 1872) % *(_DWORD *)(a1 + 1832)));
    }
    else {
      double v22 = 0.0;
    }
  }
  if (*(unsigned char *)(a1 + 213))
  {
    int v26 = *(_DWORD *)(a1 + 420);
    if (v26 >= 2) {
      int v27 = 2;
    }
    else {
      int v27 = *(_DWORD *)(a1 + 420);
    }
    *(double *)(a1 + 384) = (v23 + *(double *)(a1 + 384) * (double)v27) / (double)(v27 + 1);
    int v28 = v26 + 1;
  }
  else
  {
    int v29 = *(_DWORD *)(a1 + 420);
    double v30 = v23 + *(double *)(a1 + 384) * (double)v29;
    int v28 = v29 + 1;
    *(double *)(a1 + 384) = v30 / (double)v28;
  }
  *(void *)(a1 + 400) += a2 - (int)*(double *)(a1 + 304);
  *(_DWORD *)(a1 + 420) = v28;
  if (!a7)
  {
    if (*(unsigned char *)(a1 + 224)) {
      *(_DWORD *)(a1 + 248) = (*(_DWORD *)(a1 + 248) - a8) & ~((*(_DWORD *)(a1 + 248) - a8) >> 31);
    }
    *(_DWORD *)(a1 + 220) += a2;
    unsigned int v31 = *(unsigned __int8 *)(a1 + 413);
    if (v31 > 9 || ((1 << v31) & 0x294) == 0)
    {
      long long v32 = *v18;
      *(_OWORD *)(a1 + 1792) = v18[1];
      *(_OWORD *)(a1 + 1776) = v32;
    }
  }
  int v33 = a2;
  if (*(unsigned char *)(a1 + 415))
  {
    double v34 = *(double *)(a1 + 312) * 0.95 + 1.0;
    double v35 = *(double *)(a1 + 320) * 0.95 + (double)(a2 - a3);
    *(double *)(a1 + 312) = v34;
    *(double *)(a1 + 320) = v35;
    *(double *)(a1 + 328) = v35 / v34;
    int v33 = a3;
  }
  if (*(unsigned char *)(a1 + 416)) {
    *(_DWORD *)(*(void *)(a1 + 2016) + 16 * (a4 % *(_DWORD *)(a1 + 1880))) = a2;
  }
  double v36 = v24 * 0.85;
  if (a5 <= 9 && ((1 << a5) & 0x3BD) != 0)
  {
    unsigned int v37 = *(unsigned __int8 *)(a1 + 413);
    if (v37 <= 9)
    {
      BOOL v38 = 1;
      if (((1 << v37) & 0x129) != 0)
      {
        BOOL v38 = *(unsigned char *)(a1 + 414) != 0;
LABEL_31:
        *(unsigned char *)(a1 + 409) = v38;
        *(double *)(a1 + 352) = v23;
        *(double *)(a1 + 360) = v23;
        if (a6) {
          goto LABEL_32;
        }
        goto LABEL_40;
      }
      if (((1 << v37) & 0x294) != 0) {
        goto LABEL_31;
      }
    }
    BOOL v38 = 0;
    goto LABEL_31;
  }
  double v36 = v36 / 1.3;
  if (a6)
  {
LABEL_32:
    unsigned int v39 = *(unsigned __int8 *)(a1 + 413);
    if (v39 <= 9 && ((1 << v39) & 0x3BD) != 0) {
      double v40 = exp2((*(float *)(a6 + 8) + -12.0) / 6.0) * 0.85;
    }
    else {
      double v40 = exp2((*(float *)(a6 + 8) + -12.0) / 6.0) * 0.85 / 1.3;
    }
    uint64_t v41 = a1 + 472;
    double v42 = (v36 + v40) * 0.5;
    unsigned int v43 = (*(_DWORD *)(a6 + 4 * (*(unsigned char *)(a1 + 415) != 0)) + v33) >> 1;
    double v44 = v22;
    goto LABEL_36;
  }
LABEL_40:
  if (*(unsigned char *)(a1 + 209)) {
    return;
  }
  sub_1BBAF8164(a1 + 432 * *(int *)(a1 + 204) + 472, v33, v36, v22);
  if (!*(unsigned char *)(a1 + 208) || *(_DWORD *)(a1 + 204) == 1) {
    return;
  }
  uint64_t v41 = a1 + 904;
  double v42 = v36;
  double v44 = v22;
  unsigned int v43 = v33;
LABEL_36:

  sub_1BBAF8164(v41, v43, v42, v44);
}

double sub_1BBAF997C(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  LODWORD(a4) = *(_DWORD *)a2;
  double v4 = (double)*(unint64_t *)&a4;
  *(double *)(a1 + 264) = (double)*(unint64_t *)&a4;
  double v5 = *(float *)(a2 + 12);
  *(double *)(a1 + 272) = v5;
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 28);
  double result = (double)*(unint64_t *)&a4 / v5;
  *(double *)(a1 + 304) = result;
  if (*(_DWORD *)(a1 + 376))
  {
    if (a3 <= 9 && ((1 << a3) & 0x294) != 0)
    {
      double result = *(double *)(a1 + 280) / *(double *)(a1 + 288);
LABEL_5:
      *(double *)(a1 + 304) = result;
      goto LABEL_6;
    }
    double v11 = *(double *)(a1 + 280);
    if (v11 < v4)
    {
      double result = (v4 - v11) / (v5 - *(double *)(a1 + 288));
      if (result < 0.0) {
        double result = 0.0;
      }
      goto LABEL_5;
    }
  }
LABEL_6:
  if (*(_DWORD *)(a1 + 468) == 1)
  {
    int v7 = *(_DWORD *)(a1 + 248);
    if (v7 < 1) {
      double v8 = 0.0;
    }
    else {
      double v8 = (double)*(int *)(a2 + 56) / (double)v7;
    }
    double v9 = *(double *)(a1 + 456);
    if (v8 > v9) {
      double v9 = v8;
    }
    *(double *)(a1 + 456) = v9;
    int v10 = *(_DWORD *)(a2 + 60);
    if (v10 >= (int)(result * 0.5 / (v8 + 1.0 + 0.5))) {
      int v10 = (int)(result * 0.5 / (v8 + 1.0 + 0.5));
    }
    *(_DWORD *)(a1 + 464) = v10;
    double result = (result - (double)v10) / (v9 + 1.0);
    *(double *)(a1 + 304) = result;
  }
  return result;
}

uint64_t sub_1BBAF9A9C(uint64_t result, uint64_t a2, double a3, double a4)
{
  LODWORD(a4) = *(_DWORD *)(result + 376);
  double v4 = *(float *)(a2 + 12) / (double)*(unint64_t *)&a4;
  *(double *)(result + 288) = v4;
  unsigned int v5 = *(_DWORD *)(a2 + 4);
  if (v5)
  {
    double v6 = (double)v5;
  }
  else
  {
    double v7 = *(double *)(result + 1760);
    double v8 = *(double *)(result + 896);
    BOOL v9 = v7 < 0.00000011920929;
    if (v8 < 0.00000011920929) {
      BOOL v9 = 1;
    }
    if (v9)
    {
      double v8 = 1.0;
      double v7 = 1.0;
    }
    *(double *)&unint64_t v10 = v4 * v7;
    double v11 = *(double *)&v10 / ((*(double *)(result + 272) - v4) * v8 + *(double *)&v10);
    LODWORD(v10) = *(_DWORD *)a2;
    double v6 = v11 * (double)v10;
  }
  *(double *)(result + 280) = v6;
  return result;
}

uint64_t sub_1BBAF9B20(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, char *a8, int a9)
{
  if (a5 - a4 >= 2)
  {
    unsigned int v9 = (a5 - a4) >> 1;
    unint64_t v10 = (char *)(a2 + (a4 >> 1) * a7);
    double v11 = (char *)(result + a6 * a4);
    BOOL v12 = &v11[a6];
    uint64_t v13 = 2 * a6 - a3;
    double result = a7 - a3;
    do
    {
      if (a3 >= 2)
      {
        unsigned int v14 = a3 >> 1;
        do
        {
          char v15 = *v11;
          char v16 = v11[1];
          char v17 = *v12;
          char v18 = v12[1];
          char v19 = *v10;
          char v20 = v10[1];
          *a8 = *v10;
          a8[1] = v15;
          a8[2] = v20;
          a8[3] = v16;
          v11 += 2;
          v12 += 2;
          v10 += 2;
          a8[a9] = v19;
          a8[a9 + 1] = v17;
          a8[a9 + 2] = v20;
          a8[a9 + 3] = v18;
          a8 += 4;
          --v14;
        }
        while (v14);
      }
      v11 += v13;
      v12 += v13;
      v10 += result;
      a8 += 2 * (a9 - a3);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1BBAF9BF8(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, char *a8, int a9, uint64_t a10)
{
  if (a5 - a4 >= 2)
  {
    unsigned int v10 = (a5 - a4) >> 1;
    double v11 = (char *)(a2 + (a4 >> 1) * a7);
    BOOL v12 = (unsigned __int8 *)(result + a6 * a4);
    uint64_t v13 = &v12[a6];
    double result = 2 * a6 - a3;
    uint64_t v14 = a7 - a3;
    do
    {
      if (a3 >= 2)
      {
        unsigned int v15 = a3 >> 1;
        do
        {
          uint64_t v16 = *v12;
          uint64_t v17 = v12[1];
          uint64_t v18 = *v13;
          uint64_t v19 = v13[1];
          char v20 = *v11;
          char v21 = v11[1];
          *a8 = *v11;
          a8[1] = *(unsigned char *)(a10 + v16);
          a8[2] = v21;
          a8[3] = *(unsigned char *)(a10 + v17);
          a8[a9] = v20;
          a8[a9 + 1] = *(unsigned char *)(a10 + v18);
          a8[a9 + 2] = v21;
          a8[a9 + 3] = *(unsigned char *)(a10 + v19);
          v12 += 2;
          v13 += 2;
          v11 += 2;
          a8 += 4;
          --v15;
        }
        while (v15);
      }
      v12 += result;
      v13 += result;
      v11 += v14;
      a8 += 2 * (a9 - a3);
      --v10;
    }
    while (v10);
  }
  return result;
}

pthread_mutex_t *sub_1BBAF9CE4()
{
  CFAllocatorRef v0 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  uint64_t v1 = v0;
  if (v0 && pthread_mutex_init(v0, 0))
  {
    pthread_mutex_destroy(v1);
    free(v1);
    return 0;
  }
  return v1;
}

pthread_cond_t *sub_1BBAF9D48()
{
  CFAllocatorRef v0 = (pthread_cond_t *)malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
  uint64_t v1 = v0;
  if (v0 && pthread_cond_init(v0, 0))
  {
    pthread_cond_destroy(v1);
    free(v1);
    return 0;
  }
  return v1;
}

semaphore_t *sub_1BBAF9DAC()
{
  CFAllocatorRef v0 = (semaphore_t *)malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  if (v0)
  {
    task_t v1 = *MEMORY[0x1E4F14960];
    v0[1] = *MEMORY[0x1E4F14960];
    if (semaphore_create(v1, v0, 0, 0))
    {
      semaphore_destroy(v0[1], *v0);
      free(v0);
      return 0;
    }
  }
  return v0;
}

void sub_1BBAF9E24(semaphore_t *a1)
{
  if (a1)
  {
    semaphore_destroy(a1[1], *a1);
    free(a1);
  }
}

uint64_t sub_1BBAF9E6C()
{
  if ((byte_1E9F82B20 & 1) == 0)
  {
    size_t v1 = 4;
    if (sysctlbyname("hw.physicalcpu", &dword_1E9F80AA8, &v1, 0, 0)) {
      dword_1E9F80AA8 = 1;
    }
    byte_1E9F82B20 = 1;
  }
  return dword_1E9F80AA8;
}

BOOL sub_1BBAF9EE0()
{
  int v0 = dword_1E9F80AAC;
  if (dword_1E9F80AAC == -1)
  {
    int v4 = 0;
    size_t v3 = 4;
    int v1 = sysctlbyname("hw.cpu64bit_capable", &v4, &v3, 0, 0);
    int v0 = v4;
    if (v1 < 0) {
      int v0 = 0;
    }
    dword_1E9F80AAC = v0;
  }
  return v0 != 0;
}

uint64_t sub_1BBAF9F54(uint64_t result, int a2, unsigned char *a3)
{
  int v3 = *(_DWORD *)(result + 20);
  unsigned int v4 = byte_1BBB85370[((2 * *a3) & 0x1FC) + (v3 >> 6)];
  int v5 = *(_DWORD *)(result + 24);
  unsigned int v6 = v3 - v4;
  unsigned int v7 = *a3 & 1 ^ a2;
  if (v7) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = 0;
  }
  unsigned int v9 = v8 + *(_DWORD *)(result + 16);
  if (v7) {
    unsigned int v6 = v4;
  }
  *a3 = byte_1E9F82B25[2 * *a3 + v7];
  unsigned int v10 = __clz(v6) - 23;
  unsigned int v11 = v6 << v10;
  unsigned int v12 = v9 << v10;
  int v13 = v10 + v5;
  *(_DWORD *)(result + 20) = v11;
  int v14 = v13 - 8;
  if (v13 < 8)
  {
    int v14 = v13;
  }
  else
  {
    unsigned int v15 = *(unsigned char **)result;
    unsigned int v16 = v12 >> (v13 + 2);
    ++*(void *)result;
    *unsigned int v15 = v16;
    v12 &= ~(-4 << v13);
    if ((v16 & 0x100) != 0)
    {
      uint64_t v17 = v15 - 1;
      do
      {
        if ((unint64_t)v17 < *(void *)(result + 8)) {
          break;
        }
        __int16 v18 = (*v17--)++ + 1;
      }
      while ((v18 & 0x100) != 0);
    }
  }
  *(_DWORD *)(result + 16) = v12;
  *(_DWORD *)(result + 24) = v14;
  return result;
}

uint64_t sub_1BBAFA028(uint64_t result, int a2)
{
  unsigned int v2 = 2 * *(_DWORD *)(result + 16);
  if (a2) {
    v2 += *(_DWORD *)(result + 20);
  }
  int v3 = *(_DWORD *)(result + 24);
  int v4 = v3 + 1;
  int v5 = v3 - 7;
  if (v3 >= 7)
  {
    unsigned int v6 = *(unsigned char **)result;
    unsigned int v7 = v2 >> (v3 + 3);
    ++*(void *)result;
    *unsigned int v6 = v7;
    v2 &= ~(-4 << v4);
    if ((v7 & 0x100) != 0)
    {
      unsigned int v8 = v6 - 1;
      do
      {
        if ((unint64_t)v8 < *(void *)(result + 8)) {
          break;
        }
        __int16 v9 = (*v8--)++ + 1;
      }
      while ((v9 & 0x100) != 0);
    }
    int v4 = v5;
  }
  *(_DWORD *)(result + 16) = v2;
  *(_DWORD *)(result + 24) = v4;
  return result;
}

uint64_t sub_1BBAFA0A4(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 20) - 2;
  int v3 = 1 - (v2 >> 8);
  if (a2) {
    int v4 = 2;
  }
  else {
    int v4 = *(_DWORD *)(result + 20) - 2;
  }
  if (!a2) {
    unsigned int v2 = 0;
  }
  unsigned int v5 = v2 + *(_DWORD *)(result + 16);
  if (a2) {
    int v6 = 7;
  }
  else {
    int v6 = v3;
  }
  unsigned int v7 = v5 << v6;
  int v8 = v6 + *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 20) = v4 << v6;
  int v9 = v8 - 8;
  if (v8 < 8)
  {
    int v9 = v8;
  }
  else
  {
    unsigned int v10 = *(unsigned char **)result;
    unsigned int v11 = v7 >> (v8 + 2);
    ++*(void *)result;
    *unsigned int v10 = v11;
    v7 &= ~(-4 << v8);
    if ((v11 & 0x100) != 0)
    {
      unsigned int v12 = v10 - 1;
      do
      {
        if ((unint64_t)v12 < *(void *)(result + 8)) {
          break;
        }
        __int16 v13 = (*v12--)++ + 1;
      }
      while ((v13 & 0x100) != 0);
    }
  }
  *(_DWORD *)(result + 16) = v7;
  *(_DWORD *)(result + 24) = v9;
  return result;
}

double sub_1BBAFA148(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) = a1 + 4;
  *(void *)(a2 + 48) = a1 + 64;
  *(void *)(a2 + 176) = a1 + 26560;
  *(void *)(a2 + 56) = a1 + 28432;
  double result = *(double *)(a1 + 26544);
  *(double *)(a2 + 312) = result;
  *(void *)(a2 + 2624) = a1 + 27120;
  *(void *)(a2 + 2632) = *(void *)(a1 + 29248);
  *(void *)(a2 + 2560) = *(void *)(a1 + 27104);
  *(void *)(a2 + 2568) = *(void *)(a1 + 27112);
  *(void *)(a2 + 2544) = a1 + 29664;
  *(void *)(a2 + 2552) = a1 + 30176;
  *(void *)(a2 + 2528) = a1 + 29280;
  *(void *)(a2 + 2536) = a1 + 29536;
  return result;
}

void sub_1BBAFA1CC(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = *(void **)(a1 + 14096);
    if (v2)
    {
      free(v2);
      *(void *)(a1 + 14096) = 0;
    }
    int v3 = *(void **)(a1 + 104);
    if (v3)
    {
      free(v3);
      *(void *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 100) = 0;
    }
  }
}

uint64_t sub_1BBAFA218(uint64_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  uint64_t v8 = *(void *)(a2 + 13032);
  uint64_t v9 = *(void *)(a2 + 13040);
  int v10 = *(unsigned __int8 *)(a1 + 188);
  unsigned int v11 = *(_DWORD **)(a1 + 192);
  BOOL v12 = *(unsigned char *)(a1 + 29) == 0;
  if (a3)
  {
    uint64_t result = sub_1BBB03524(a1, *(void *)(a2 + 13032), *(unsigned char *)(a1 + 29) == 0, &v18, &v17);
    if (!v10) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 188))
    {
      sub_1BBB034B0(*(void *)(a2 + 13032), a4);
      uint64_t result = sub_1BBB03524(a1, v8, v12, &v18, &v17);
LABEL_8:
      uint64_t v16 = *(void *)(v9 + 16);
      int v15 = *(unsigned __int8 *)(v8 + 36) + 8 * (*(_DWORD *)(v8 + 16) - v16) - *(unsigned __int8 *)(v9 + 36);
      *(void *)(v8 + 16) = v16;
      *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 + 32);
      *(unsigned char *)(v8 + 36) = *(unsigned char *)(v9 + 36);
      goto LABEL_9;
    }
    sub_1BBB4F6E8(*(void *)(a1 + 192), (uint64_t *)(a2 + 14064), *(unsigned __int8 *)(a1 + 28), 0);
    sub_1BBB03524(a1, v8, v12, &v18, &v17);
  }
  int v14 = v11[10] + v11[6] + 8 * (*v11 - v11[2]);
  int v15 = (v14 & ~(v14 >> 31)) - *(_DWORD *)(a2 + 14088);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 + 32);
  *(unsigned char *)(v8 + 36) = *(unsigned char *)(v9 + 36);
  uint64_t result = (uint64_t)memcpy(v11, (const void *)(a2 + 13088), 0x3D0uLL);
LABEL_9:
  *a5 = v15;
  return result;
}

uint64_t sub_1BBAFA384(int32x2_t *a1, unsigned __int8 *a2)
{
  unsigned int v2 = a1;
  v40[2] = *MEMORY[0x1E4F143B8];
  int v3 = (char *)&a1[1761] + 4;
  uint64_t v4 = a2[282];
  int v5 = a2[399];
  a1[1].i8[2] = a1->i8[7] == 0;
  if (a1[1].i8[3]) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = a2[283] != 0;
  }
  a1[1].i8[6] = v6;
  a1[4].i32[1] = 99999;
  int32x2_t v7 = a1[15];
  if (a1[1].i8[1])
  {
    unsigned __int8 v8 = v5 != 1;
    char v9 = *v3;
    *(_WORD *)(*(void *)&v7 + 5) = 4;
    *(unsigned char *)(*(void *)&v7 + 7) = v9;
    *(void *)(*(void *)&v7 + 26832) = *(void *)&v7 + 26848;
    sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v7 + 4), (unsigned __int8 *)(*(void *)&v7 + 64));
    v2[4].i32[1] = 0;
    *(_OWORD *)(*(void *)&v7 + 27104) = 0u;
    *(void *)&v7 += 30432;
    int v10 = 1;
  }
  else
  {
    int v10 = 0;
    unsigned __int8 v8 = v5 != 1;
  }
  char v11 = *v3;
  *(_WORD *)(*(void *)&v7 + 5) = 2;
  *(unsigned char *)(*(void *)&v7 + 7) = v11;
  *(void *)(*(void *)&v7 + 26832) = *(void *)&v7 + 26848;
  sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v7 + 4), (unsigned __int8 *)(*(void *)&v7 + 64));
  *(_OWORD *)(*(void *)&v7 + 27104) = 0u;
  v2[9].i32[1] = v10;
  uint64_t v12 = *(void *)&v7 + 30432;
  int v13 = v10 + 1;
  unsigned int v39 = v2;
  if (v3[13])
  {
    if (v2[1].i8[2])
    {
      char v14 = *v3;
      *(_WORD *)(*(void *)&v7 + 30437) = 770;
      *(unsigned char *)(*(void *)&v7 + 30439) = v14;
      *(void *)(*(void *)&v7 + 57264) = *(void *)&v7 + 57280;
      sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v7 + 30436), (unsigned __int8 *)(*(void *)&v7 + 30496));
      v2[6].i32[1] = v13;
      uint64_t v12 = *(void *)&v7 + 60864;
      int v13 = v10 | 2;
      *(_OWORD *)(*(void *)&v7 + 57536) = 0u;
      if (v2[4].i8[0] == 4 && !v2[1].i8[7])
      {
        *(_WORD *)(*(void *)&v7 + 60869) = 770;
        *(unsigned char *)(*(void *)&v7 + 60871) = v14;
        *(void *)(*(void *)&v7 + 87696) = *(void *)&v7 + 87712;
        sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v7 + 60868), (unsigned __int8 *)(*(void *)&v7 + 60928));
        *(_OWORD *)(*(void *)&v7 + 60872) = 0u;
        v2[8].i32[0] = v13;
        uint64_t v12 = *(void *)&v7 + 91296;
        int v13 = v10 + 3;
        *(_OWORD *)(*(void *)&v7 + 87968) = 0u;
      }
    }
  }
  if (!v2->i8[7])
  {
    for (int i = 1; i != 3; ++i)
    {
      uint64_t v16 = v12;
      char v17 = *v3;
      *(unsigned char *)(v12 + 5) = 2;
      *(unsigned char *)(v12 + 6) = i;
      *(unsigned char *)(v12 + 7) = v17;
      *(void *)(v12 + 26832) = v12 + 26848;
      sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(v12 + 4), (unsigned __int8 *)(v12 + 64));
      v12 += 30432;
      *(_OWORD *)(v16 + 27104) = 0u;
    }
    v13 += 2;
    unsigned int v2 = v39;
  }
  if (v2[1].i8[2] && !v3[13])
  {
    char v18 = *v3;
    *(_WORD *)(v12 + 5) = 770;
    *(unsigned char *)(v12 + 7) = v18;
    *(void *)(v12 + 26832) = v12 + 26848;
    sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(v12 + 4), (unsigned __int8 *)(v12 + 64));
    v2[6].i32[1] = v13;
    *(_OWORD *)(v12 + 27104) = 0u;
    if (v2[4].i8[0] == 4 && !v2[1].i8[7])
    {
      v40[0] = 0;
      v40[1] = 0;
      char v36 = *v3;
      *(_WORD *)(v12 + 30437) = 770;
      *(unsigned char *)(v12 + 30439) = v36;
      *(void *)(v12 + 57264) = v12 + 57280;
      sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(v12 + 30436), (unsigned __int8 *)(v12 + 30496));
      for (uint64_t j = 0; j != 16; j += 4)
        *(_DWORD *)(v12 + 30440 + j) = *(_DWORD *)((char *)v40 + j);
      v2[8].i32[0] = v13 + 1;
      v13 += 2;
      *(_OWORD *)(v12 + 57536) = 0u;
    }
    else
    {
      ++v13;
    }
  }
  v2[11].i32[1] = v13;
  v2[5] = vdup_n_s32(0x1869Fu);
  int32x2_t v19 = v2[16];
  if (v2[1].i8[5])
  {
    if (*v3) {
      BOOL v20 = v4 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    char v21 = !v20;
    *(_WORD *)(*(void *)&v19 + 5) = 3;
    *(unsigned char *)(*(void *)&v19 + 7) = v21;
    *(void *)(*(void *)&v19 + 26832) = *(void *)&v19 + 26848;
    sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v19 + 4), (unsigned __int8 *)(*(void *)&v19 + 64));
    v2[5].i32[1] = 0;
    *(_OWORD *)(*(void *)&v19 + 27104) = 0u;
    *(void *)&v19 += 30432;
    int v22 = 1;
  }
  else
  {
    int v22 = 0;
  }
  if (v2[1].i8[4])
  {
    char v23 = *v3;
    *(_WORD *)(*(void *)&v19 + 5) = 5;
    *(unsigned char *)(*(void *)&v19 + 7) = v23;
    *(void *)(*(void *)&v19 + 26832) = *(void *)&v19 + 26848;
    sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v19 + 4), (unsigned __int8 *)(*(void *)&v19 + 64));
    v2[5].i32[0] = v22;
    *(_OWORD *)(*(void *)&v19 + 27104) = 0u;
    *(void *)&v19 += 30432;
    ++v22;
  }
  uint64_t v24 = 0;
  v2[10].i32[0] = v22;
  char v25 = *v3;
  do
  {
    char v26 = dword_1BBB85570[v24];
    int32x2_t v27 = v19;
    *(unsigned char *)(*(void *)&v19 + 5) = 3;
    *(unsigned char *)(*(void *)&v19 + 6) = v26;
    *(unsigned char *)(*(void *)&v19 + 7) = v25;
    *(void *)(*(void *)&v19 + 26832) = *(void *)&v19 + 26848;
    uint64_t result = sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v19 + 4), (unsigned __int8 *)(*(void *)&v19 + 64));
    *(void *)&v19 += 30432;
    *(_OWORD *)(*(void *)&v27 + 27104) = 0u;
    ++v24;
  }
  while (v24 != 3);
  int v29 = v22 + 3;
  double v30 = v39;
  if (v39[1].i8[6])
  {
    *(_WORD *)(*(void *)&v27 + 30437) = 5635;
    *(unsigned char *)(*(void *)&v27 + 30439) = v25;
    *(void *)(*(void *)&v27 + 57264) = *(void *)&v27 + 57280;
    uint64_t result = sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v27 + 30436), (unsigned __int8 *)(*(void *)&v27 + 30496));
    v39[7].i32[0] = v29;
    int32x2_t v19 = (int32x2_t)(*(void *)&v27 + 60864);
    int v29 = v22 | 4;
    *(_OWORD *)(*(void *)&v27 + 57536) = 0u;
    if (v39[4].i8[0] == 4 && !v39[2].i8[0])
    {
      *(_WORD *)(*(void *)&v27 + 60869) = 5635;
      *(unsigned char *)(*(void *)&v27 + 60871) = v25;
      *(void *)(*(void *)&v27 + 87696) = *(void *)&v27 + 87712;
      uint64_t result = sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v27 + 60868), (unsigned __int8 *)(*(void *)&v27 + 60928));
      v39[8].i32[1] = v29;
      int32x2_t v19 = (int32x2_t)(*(void *)&v27 + 91296);
      int v29 = v22 + 5;
      *(_OWORD *)(*(void *)&v27 + 87968) = 0u;
      double v30 = v39;
    }
  }
  if (!v30[1].i8[3] && v30[1].i8[6])
  {
    int v38 = v29;
    uint64_t v31 = 0;
    uint64_t v32 = 4u;
    uint64_t v33 = 26848;
    do
    {
      char v34 = dword_1BBB85570[v32];
      uint64_t v35 = *(void *)&v19 + v31;
      *(unsigned char *)(v35 + 5) = 3;
      *(unsigned char *)(v35 + 6) = v34;
      *(unsigned char *)(v35 + 7) = v25;
      *(void *)(v35 + 26832) = *(void *)&v19 + v33;
      uint64_t result = sub_1BBB10BA8(v4, v8, (unsigned __int8 *)(*(void *)&v19 + v31 + 4), (unsigned __int8 *)(*(void *)&v19 + v31 + 64));
      *(_OWORD *)(v35 + 27104) = 0u;
      ++v32;
      v31 += 30432;
      v33 += 30432;
    }
    while (v32 != 22);
    int v29 = v38 + 18;
    double v30 = v39;
  }
  v30[12].i32[0] = v29;
  return result;
}

uint64_t sub_1BBAFA9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unsigned int v23 = 0;
  if (*(unsigned char *)(a2 + 188))
  {
    unsigned __int8 v8 = *(uint64_t **)(a2 + 192);
    uint64_t v9 = *v8;
    *((_DWORD *)v8 + 10) = 8 * (*v8 - *((_DWORD *)v8 + 2));
    v8[1] = v9;
  }
  *(void *)(a2 + 40) = a1 + 4;
  *(void *)(a2 + 48) = a1 + 64;
  *(void *)(a2 + 176) = a1 + 26560;
  *(void *)(a2 + 56) = a1 + 28432;
  *(void *)(a2 + 312) = *(void *)(a1 + 26544);
  *(void *)(a2 + 2624) = a1 + 27120;
  *(void *)(a2 + 2632) = *(void *)(a1 + 29248);
  *(void *)(a2 + 2560) = *(void *)(a1 + 27104);
  *(void *)(a2 + 2568) = *(void *)(a1 + 27112);
  *(void *)(a2 + 2544) = a1 + 29664;
  *(void *)(a2 + 2552) = a1 + 30176;
  int v10 = (unsigned char *)(a1 + 29280);
  *(void *)(a2 + 2528) = a1 + 29280;
  char v11 = (char *)(a1 + 29536);
  *(void *)(a2 + 2536) = a1 + 29536;
  if (*(unsigned __int8 *)(a1 + 5) > 1u)
  {
    sub_1BBB5F58C(a2, 1);
  }
  else
  {
    sub_1BBB5F0A4(a2);
    int v10 = v25;
    char v11 = &v24;
    off_1E9F83248(v25, *(void *)(*(void *)(a2 + 216) + 128)+ (16 * *(_DWORD *)a2)+ (16 * *(_DWORD *)(a2 + 4) * *(_DWORD *)(*(void *)(a2 + 216) + 232)));
  }
  unsigned int v12 = *(_DWORD *)(a3 + 14184);
  if (v12 > 7 || (BOOL v13 = 1, ((1 << v12) & 0x94) == 0)) {
    BOOL v13 = v12 == 9;
  }
  sub_1BBAFA218(a2, a3, v13, *(_DWORD *)(a3 + 50624), (int *)&v23);
  uint64_t v14 = a3 + 12640;
  uint64_t v15 = a3 + 12896;
  double v16 = *(double *)(a1 + 26544);
  unsigned int v17 = v23;
  int v18 = sub_1BBB5B524(v14, (uint64_t)v10, 0x10u);
  int v19 = sub_1BBB5B524(v15, (uint64_t)v11, 8u);
  *(_DWORD *)a4 = v17;
  *(_DWORD *)(a4 + 4) = v19 + v18;
  *(_DWORD *)(a4 + 8) = v19 + v18 + (v16 * (double)v17);
  *(double *)(a4 + 16) = v16;
  BOOL v20 = *(_OWORD **)(a2 + 176);
  *BOOL v20 = 0u;
  v20[1] = 0u;
  v20[2] = 0u;
  v20[3] = 0u;
  v20[4] = 0u;
  v20[5] = 0u;
  v20[6] = 0u;
  v20[7] = 0u;
  v20[8] = 0u;
  v20[9] = 0u;
  v20[10] = 0u;
  v20[11] = 0u;
  v20[12] = 0u;
  uint64_t v21 = *(void *)(a2 + 176);
  *(_OWORD *)(v21 + 240) = 0u;
  *(_OWORD *)(v21 + 256) = 0u;
  return sub_1BBB5B784(a2, v14, v15);
}

void sub_1BBAFAC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  int v16 = v15;
  uint64_t v17 = v11;
  uint64_t v18 = (uint64_t)v10;
  uint64_t v371 = *MEMORY[0x1E4F143B8];
  int v19 = (_DWORD *)(v9 + 205840);
  BOOL v20 = v10 + 10560;
  long long v307 = xmmword_1BBB855C8;
  uint64_t v308 = 0;
  uint64_t v283 = v21;
  int v22 = *(_DWORD *)(v21 + 14184);
  BOOL v24 = v22 == 1 || v22 == 6;
  if (v10[14112]) {
    BOOL v27 = (v22 == 2 || v22 == 7) && v10[14092] != 0;
  }
  else {
    BOOL v27 = 0;
  }
  unsigned int v28 = *(unsigned __int16 *)(*(void *)(*(void *)v19 + 4696) + 2 * *(unsigned int *)(v11 + 16));
  int v306 = 0;
  BOOL v29 = v10[33] == 0;
  *unsigned int v12 = 0;
  unsigned int v30 = 0x40000000;
  if (v20[3557] == 2) {
    unsigned int v31 = 0x40000000;
  }
  else {
    unsigned int v31 = a9;
  }
  uint64_t v300 = v11;
  int v301 = v15;
  unsigned int v294 = v20;
  if (*(unsigned char *)(v18 + 5) || (*(unsigned char *)(v18 + 6) ? (char v32 = 1) : (char v32 = v27), (v32 & 1) != 0))
  {
    uint64_t v33 = 0;
    BOOL v34 = 1;
    goto LABEL_27;
  }
  unsigned int v298 = v28;
  unsigned int v302 = (_DWORD *)(v9 + 205840);
  uint64_t v58 = *(void *)(v11 + 216);
  uint64_t v59 = *(unsigned int *)(v58 + 232);
  uint64_t v60 = *(void *)(v58 + 128) + (16 * *(_DWORD *)v11) + (16 * *(_DWORD *)(v11 + 4) * v59);
  int v61 = *(unsigned char **)(v11 + 128);
  uint64_t v62 = *(void *)(v11 + 136);
  BOOL v63 = v62 != 0;
  BOOL v273 = v24;
  if (v20[1872])
  {
    if (v61)
    {
      if (v61[224] == 34)
      {
        BOOL v64 = v61[208] != 34 && v61 != 0;
        if (!v62) {
          goto LABEL_74;
        }
LABEL_77:
        if (*(unsigned char *)(v62 + 224) == 34)
        {
          if (*(unsigned char *)(v62 + 208) == 34) {
            BOOL v63 = 0;
          }
        }
        else
        {
          BOOL v63 = 1;
        }
        goto LABEL_84;
      }
      BOOL v64 = 1;
      if (v62) {
        goto LABEL_77;
      }
    }
    else
    {
      BOOL v64 = 0;
      if (v62) {
        goto LABEL_77;
      }
    }
LABEL_74:
    BOOL v63 = 0;
LABEL_84:
    if ((*(unsigned char *)(v11 + 185) & (v61 != 0)) != 0 && *(unsigned char *)(v11 + 31) == 1 && v61[200] == 1 && v64)
    {
      uint64_t v65 = *(void *)(v11 + 168);
      BOOL v64 = *(unsigned char *)(v65 + 224) != 34 || *(unsigned __int8 *)(v65 + 208) != 34;
    }
    goto LABEL_347;
  }
  BOOL v64 = v61 != 0;
LABEL_347:
  uint64_t v305 = v9;
  BOOL v266 = v29;
  int v268 = v14;
  unsigned int v270 = v31;
  BOOL v272 = v27;
  unint64_t v261 = v12;
  uint64_t v264 = v13;
  int v242 = 0;
  uint64_t v243 = 0;
  uint64_t v244 = v64 | (2 * v63);
  unsigned int v245 = 0x40000000;
  unsigned int v297 = *(_DWORD **)(v18 + 112);
  unsigned int v246 = v297;
  do
  {
    if (*v246)
    {
      ((void (*)(uint64_t, uint64_t, _DWORD *, uint64_t))qword_1E9F832F8[v243])(v60, v59, v246 + 6788, v244);
      int v16 = v301;
      unsigned int v247 = off_1E9F831F0(v246 + 6788, 16, v60, v59) + byte_1BBB93ED8[v243] * v301;
      if (v245 > v247) {
        int v242 = v243;
      }
      if (v245 >= v247) {
        unsigned int v245 = v247;
      }
    }
    ++v243;
    v246 += 7608;
  }
  while (v243 != 4);
  off_1E9F83388(v60, v59, &v297[7608 * v242 + 6788], 16, &v297[7608 * v242 + 6852], 16);
  BOOL v24 = v273;
  if (v273) {
    int v248 = 9;
  }
  else {
    int v248 = 0;
  }
  unsigned int v30 = v245 + v248 * v16;
  DWORD2(v307) = v30;
  uint64_t v249 = *(void *)(v18 + 112);
  uint64_t v33 = v249 + 30432 * v242;
  uint64_t v17 = v300;
  if (v20[3557] == 2)
  {
    uint64_t v250 = v249 + 30432 * v242;
    sub_1BBAFC88C(*(char *)(v250 + 59), v18, v300, *(_DWORD *)(v283 + 14184), v301, &v306);
    *(unsigned char *)(v250 + 353) = v306;
    *(void *)(v250 + 29248) = v18 + 928 * *v20 + 10576;
    *(unsigned char *)(v250 + 27120) = sub_1BBB596C4(v250 + 27408, ((32 * (*(unsigned char *)(v250 + 59) % 6u)) | (*(unsigned char *)(v250 + 59) / 6u) & 0x1F), v250 + 27920, (__int16 *)(v250 + 28432), (__int16 *)(v250 + 28464), *(unsigned __int8 *)(v300 + 336), *(unsigned __int8 *)(v300 + 29));
    int v16 = v301;
    sub_1BBAFA9D0(v33, v300, v283, (uint64_t)&v307);
  }
  unsigned int v31 = v270;
  int v14 = v268;
  BOOL v29 = v266;
  if ((v268 & (v30 > 2 * v270)) != 0) {
    BOOL v29 = 0;
  }
  BOOL v34 = !(v268 & (v30 > 2 * v270));
  unsigned int v12 = v261;
  uint64_t v13 = v264;
  BOOL v27 = v272;
  int v19 = v302;
  uint64_t v9 = v305;
  unsigned int v28 = v298;
LABEL_27:
  if (*(unsigned char *)(v18 + 4)) {
    goto LABEL_28;
  }
  int v39 = v34 && *(unsigned char *)(v18 + 30) != 0;
  if (v29)
  {
    if (*(unsigned char *)(v18 + 30))
    {
      BOOL v29 = v28 > 0x28;
      if (*(unsigned char *)(v9 + 1057))
      {
        if (v19[563] < 0x14u) {
          BOOL v29 = 1;
        }
      }
    }
  }
  BOOL v40 = v34;
  *(unsigned char *)(v17 + 2648) = 1;
  if (*(unsigned char *)(*(void *)(v9 + 136) + 663)) {
    char v41 = 6;
  }
  else {
    char v41 = 4;
  }
  *(unsigned char *)(v17 + 2649) = v41;
  if (v39) {
    BOOL v40 = v28 > 0xF;
  }
  if (v20[3532] && v40 && !*(unsigned char *)(v18 + 6))
  {
    double v42 = *(void **)(v18 + 112);
    int v293 = v42 + 18873;
    unsigned int v252 = (char *)v42 + 121787;
    uint64_t v254 = (uint64_t)(v42 + 15216);
    int v256 = v42 + 18534;
    if (v24) {
      int v43 = 15;
    }
    else {
      int v43 = 6;
    }
    unsigned int v44 = v43 * v16;
    if (v30 >= v31) {
      unsigned int v45 = v31;
    }
    else {
      unsigned int v45 = v30;
    }
    if (v20[3557] == 2) {
      int v46 = 0x40000000;
    }
    else {
      int v46 = v45;
    }
    unsigned int v291 = v46;
    uint64_t v47 = *(void *)(v17 + 216);
    uint64_t v48 = *(unsigned int *)(v47 + 232);
    int v49 = (_OWORD *)(*(void *)(v47 + 128)
                   + (16 * *(_DWORD *)v17)
                   + (16 * *(_DWORD *)(v17 + 4) * v48));
    uint64_t v50 = *(void *)(v17 + 128);
    uint64_t v51 = *(void *)(v17 + 136);
    uint64_t v53 = *(void *)(v17 + 144);
    uint64_t v52 = *(void *)(v17 + 152);
    BOOL v54 = v50 != 0;
    int v55 = v51 != 0;
    BOOL v56 = v53 != 0;
    BOOL v57 = v52 != 0;
    int v267 = v14;
    BOOL v265 = v29;
    if (v20[1872])
    {
      if (v50)
      {
        if (*(unsigned char *)(v50 + 224) == 34)
        {
          if (*(unsigned char *)(v50 + 208) == 34) {
            BOOL v54 = 0;
          }
        }
        else
        {
          BOOL v54 = 1;
        }
      }
      else
      {
        BOOL v54 = 0;
      }
      if (v51)
      {
        if (*(unsigned char *)(v51 + 224) == 34)
        {
          if (*(unsigned char *)(v51 + 208) == 34) {
            int v55 = 0;
          }
        }
        else
        {
          int v55 = 1;
        }
      }
      else
      {
        int v55 = 0;
      }
      if (v53)
      {
        if (*(unsigned char *)(v53 + 224) == 34)
        {
          if (*(unsigned char *)(v53 + 208) == 34) {
            BOOL v56 = 0;
          }
        }
        else
        {
          BOOL v56 = 1;
        }
      }
      else
      {
        BOOL v56 = 0;
      }
      if (v52) {
        BOOL v57 = *(unsigned char *)(v52 + 224) != 34 || *(unsigned __int8 *)(v52 + 208) != 34;
      }
      else {
        BOOL v57 = 0;
      }
    }
    uint64_t v66 = 0;
    int v67 = 4 * v55;
    int v68 = 2 * v56;
    uint64_t v69 = *v256;
    *(void *)(v17 + 40) = (char *)v42 + 121732;
    *(void *)(v17 + 48) = v42 + 15224;
    *(void *)(v17 + 176) = v42 + 18536;
    *(void *)(v17 + 56) = v42 + 18770;
    *(void *)(v17 + 312) = *v256;
    unsigned int v289 = v42 + 18606;
    *(void *)(v17 + 2624) = v42 + 18606;
    *(void *)(v17 + 2632) = v42[18872];
    *(void *)(v17 + 2560) = v42[18604];
    *(void *)(v17 + 2568) = v42[18605];
    *(void *)(v17 + 2544) = v42 + 18924;
    *(void *)(v17 + 2552) = v42 + 18988;
    *(void *)(v17 + 2528) = v42 + 18876;
    *(void *)(v17 + 2536) = v42 + 18908;
    int v70 = v48 & -v55;
    int v71 = -v70;
    char v72 = *((unsigned char *)v49 - v70 - v57);
    int v73 = (int *)((char *)v49 + 16 * v56 - v70);
    int v75 = *v73;
    int v74 = v73[1];
    char v354 = v72;
    long long v355 = *(_OWORD *)((char *)v49 + v71);
    int v356 = v75;
    int v357 = v74;
    do
    {
      double v76 = &v353[v66 + 4];
      *((unsigned char *)v76 + 47) = *((unsigned char *)v49 - v54);
      *((_OWORD *)v76 + 3) = *v49;
      int v49 = (_OWORD *)((char *)v49 + v48);
      v66 += 4;
    }
    while ((v66 * 8) != 512);
    uint64_t v362 = 0;
    uint64_t v361 = 0;
    uint64_t v363 = 0;
    uint64_t v78 = *(void *)(v17 + 128);
    uint64_t v77 = *(void *)(v17 + 136);
    uint64_t v79 = *(void *)(v17 + 176);
    uint64_t v360 = v79 + 224;
    *(unsigned char *)(v79 + 284) = 1;
    if (v78)
    {
      int v80 = *(unsigned __int8 *)(v78 + 284);
      uint64_t v81 = v78 + 224;
      uint64_t v82 = v78 + 208;
      if (v80) {
        uint64_t v82 = v81;
      }
      uint64_t v361 = v82;
    }
    int v83 = v67 | (8 * v54);
    uint64_t v262 = v13;
    char v259 = v12;
    BOOL v274 = v24;
    BOOL v271 = v27;
    unsigned int v269 = v31;
    if (v77)
    {
      if (*(unsigned char *)(v77 + 284)) {
        uint64_t v84 = v77 + 224;
      }
      else {
        uint64_t v84 = v77 + 208;
      }
      uint64_t v362 = v84;
    }
    else
    {
      uint64_t v362 = 0;
    }
    uint64_t v85 = 0;
    int v286 = v83 | v68 | v57;
    uint64_t v275 = v17 + 434;
    char v284 = v42 + 18642;
    uint64_t v280 = v42 + 18706;
    uint64_t v282 = v42 + 18610;
    uint64_t v278 = v42 + 18774;
    while (1)
    {
      unsigned int v295 = v44;
      long double v86 = &v358[32 * byte_1BBB94408[v85] + byte_1BBB9440C[v85]];
      unsigned int v87 = dword_1BBB94410[v286 | (16 * v85)];
      unsigned int v364 = bswap32(v87);
      char v365 = 1;
      BOOL v366 = (~v87 & 0x1010001) == 0;
      unsigned __int8 v88 = sub_1BBB5B3A4(v85, v20[1872], (uint64_t)&v360);
      v367[0] = xmmword_1BBB6F6C0;
      v367[1] = xmmword_1BBB6FCF0;
      int v368 = 8;
      off_1EC59CA68((uint64_t)v86, 32, v370, &v364);
      uint64_t v89 = 0;
      char v90 = *(unsigned char *)(v300 + 2648);
      char v91 = *(unsigned char *)(v300 + 2649);
      unsigned int v92 = 0x40000000;
      unsigned int v93 = 2;
      do
      {
        uint64_t v94 = *((unsigned __int8 *)v367 + v89);
        if (v94 != 66)
        {
          if (*((unsigned char *)&v364 + dword_1BBB94810[v94]))
          {
            ((void (*)(unsigned char *, uint64_t, unsigned char *, unsigned int *))off_1EC59CA20[v94])(v312, 8, v370, &v364);
            int v95 = off_1E9F83208(v86, 32, v312, 8);
            if (v94 == v88) {
              char v96 = v90;
            }
            else {
              char v96 = v91;
            }
            unsigned int v97 = v95 + v96 * v301;
            BOOL v98 = v92 > v97;
            if (v92 >= v97) {
              unsigned int v92 = v97;
            }
            if (v98) {
              unsigned int v93 = v94;
            }
          }
          else
          {
            *(_DWORD *)((char *)v367 + v89) = 66;
          }
        }
        v89 += 4;
      }
      while (v89 != 36);
      ((void (*)(unsigned char *, uint64_t, unsigned char *, unsigned int *))off_1EC59CA20[v93])(v312, 8, v370, &v364);
      off_1E9F83390(v86, 32, v312, 8, v314, 8);
      unsigned int v99 = 171 * *(unsigned __int8 *)(*(void *)(v300 + 40) + 55);
      unsigned int v100 = *(unsigned __int8 *)(v300 + 28);
      int v101 = *(unsigned __int8 *)(v300 + 336);
      unint64_t v102 = ((32 * (*(unsigned char *)(*(void *)(v300 + 40) + 55) % 6u)) | (*(unsigned char *)(*(void *)(v300 + 40) + 55)
                                                                                        / 6u) & 0x1F);
      LODWORD(v349[0]) = 0;
      off_1E9F832C8(v314, v339);
      if (v101)
      {
        sub_1BBB582F0((uint64_t)v339, v102, v275, 0, (uint64_t)v337, v349, (uint64_t)&v341);
        int v104 = v349[0];
        unsigned int v105 = v295;
      }
      else
      {
        if (v100 <= 9 && ((1 << v100) & 0x294) != 0) {
          int v107 = 1431655766;
        }
        else {
          int v107 = 715827883;
        }
        unint64_t v108 = v102 >> 5;
        int v106 = 1 << (((v99 >> 10) & 0x1F) + 15);
        int v104 = off_1E9F832D8(v351, v339, (char *)&unk_1BBB93190 + 128 * (v102 >> 5), (((unint64_t)(v106 * (uint64_t)v107) >> 32)+ (((unint64_t)(v106 * (uint64_t)v107) >> 32) >> 31)), ((v99 >> 10) & 0x1F) + 15, v103);
        unsigned int v105 = v295;
        if (v104)
        {
          for (uint64_t i = 0; i != 64; ++i)
            v337[(unsigned __int16)word_1BBB93E20[i]] = *(_WORD *)&v351[i * 2];
          off_1E9F832E0(&v341, v351, (char *)&unk_1BBB93490 + 128 * v108, (v99 >> 10) & 0x1F);
        }
        else
        {
          memset(v337, 0, 128);
          int32x4_t v341 = 0u;
          int32x4_t v342 = 0u;
          long long v343 = 0u;
          long long v344 = 0u;
          long long v345 = 0u;
          long long v346 = 0u;
          long long v347 = 0u;
          long long v348 = 0u;
        }
      }
      unsigned int v110 = v92 + v105;
      off_1E9F832D0(&v341, &v318);
      int v111 = 1 << v85;
      if (!v104) {
        int v111 = 0;
      }
      int v338 = v111;
      *(_DWORD *)(*(void *)(v300 + 176) + 4 * v85 + 224) = vdup_n_s8(v93).u32[0];
      int v112 = (v85 << 6) & 0xFFFFFF80 | (8 * (v85 & 1));
      uint64_t v113 = (uint64_t)v282 + v112;
      uint64_t v114 = (uint64_t)v280 + 2 * v112;
      uint64_t v115 = (uint64_t)v278 + 2 * v112;
      off_1E9F83250((char *)v284 + 2 * v112, 32, v314, 8);
      off_1E9F83250(v114, 32, &v318, 8);
      off_1E9F83258(v113, 16, v312, 8);
      unsigned int v44 = v92 + v105;
      off_1E9F83250(v115, 32, v337, 8);
      *((unsigned char *)v289 + v85) = v338;
      *int v293 = 0;
      *((_DWORD *)v293 + 2) = 0;
      v293[2] = v69;
      if (v110 > v291) {
        break;
      }
      off_1E9F83398(v86, 32, v312, &v318);
      ++v85;
      BOOL v20 = v294;
      if (v85 == 4) {
        goto LABEL_154;
      }
    }
    unsigned int v44 = 0x40000000;
    BOOL v20 = v294;
    *((_DWORD *)v293 + 2) = 0x40000000;
LABEL_154:
    uint64_t v17 = v300;
    if (*(unsigned char *)(v300 + 188))
    {
      uint64_t v116 = *(void *)(v300 + 176);
      *(unsigned char *)(v116 + 176) = 0;
      *(_DWORD *)(v116 + 177) = -1;
      *(unsigned char *)(v116 + 181) = -1;
      *(unsigned char *)(v116 + 199) = 0;
      *(void *)&long long v117 = 0x2020202020202020;
      *((void *)&v117 + 1) = 0x2020202020202020;
      *(_OWORD *)(v116 + 128) = v117;
      *(_OWORD *)(v116 + 144) = v117;
      *(_OWORD *)uint64_t v116 = 0u;
      *(_OWORD *)(v116 + 16) = 0u;
      *(_OWORD *)(v116 + 32) = 0u;
      *(_OWORD *)(v116 + 48) = 0u;
      *(_OWORD *)(v116 + 64) = 0u;
      *(_OWORD *)(v116 + 80) = 0u;
      *(_OWORD *)(v116 + 96) = 0u;
      *(_OWORD *)(v116 + 112) = 0u;
      *(void *)(v116 + 160) = *(void *)(v116 + 272);
      *(void *)(v116 + 168) = 0;
    }
    int v16 = v301;
    BOOL v24 = v274;
    if (v20[3557] == 2)
    {
      sub_1BBAFC88C(*v252, v18, v300, *(_DWORD *)(v283 + 14184), v301, &v306);
      v252[294] = v306;
      v256[338] = v18 + 928 * *v20 + 10576;
      sub_1BBAFA9D0(v254, v300, v283, (uint64_t)v312);
      unsigned int v44 = v313;
    }
    unsigned int v118 = DWORD2(v307);
    BOOL v119 = DWORD2(v307) > v44;
    if (DWORD2(v307) >= v44) {
      unsigned int v118 = v44;
    }
    DWORD2(v307) = v118;
    unsigned int v12 = v259;
    if (v119) {
      uint64_t v33 = v254;
    }
    uint64_t v13 = v262;
    BOOL v27 = v271;
    unsigned int v31 = v269;
    BOOL v29 = v265;
    if (v267 && (double)v269 * 1.25 < (double)v118) {
      BOOL v29 = 0;
    }
  }
  if (!v29) {
    goto LABEL_28;
  }
  char v120 = *(unsigned char *)(v18 + 5) || v27;
  if (v120) {
    goto LABEL_28;
  }
  uint64_t v121 = *(void *)(v18 + 112);
  uint64_t v281 = v121 + 181416;
  unsigned int v122 = (void *)(v121 + 178704);
  uint64_t v251 = (char *)(v121 + 152219);
  uint64_t v257 = v121 + 152160;
  if (v24) {
    int v123 = 33;
  }
  else {
    int v123 = 24;
  }
  unsigned int v124 = v123 * v16;
  unsigned int v125 = DWORD2(v307);
  unsigned int v255 = DWORD2(v307);
  if (DWORD2(v307) >= v31) {
    unsigned int v125 = v31;
  }
  if (v20[3557] == 2) {
    int v126 = 0x40000000;
  }
  else {
    int v126 = v125;
  }
  unsigned int v279 = v126;
  uint64_t v127 = *(void *)(v17 + 216);
  uint64_t v128 = *(void *)(v127 + 128) + (16 * *(_DWORD *)v17);
  uint64_t v129 = *(unsigned int *)(v127 + 232);
  unsigned int v130 = (_OWORD *)(v128 + (16 * *(_DWORD *)(v17 + 4) * v129));
  uint64_t v131 = *(void *)(v17 + 128);
  uint64_t v132 = *(void *)(v17 + 136);
  uint64_t v134 = *(void *)(v17 + 144);
  uint64_t v133 = *(void *)(v17 + 152);
  BOOL v135 = v131 != 0;
  int v136 = v132 != 0;
  BOOL v137 = v134 != 0;
  BOOL v138 = v133 != 0;
  uint64_t v258 = v33;
  if (!v20[1872]) {
    goto LABEL_205;
  }
  if (!v131)
  {
    BOOL v135 = 0;
    if (!v132) {
      goto LABEL_184;
    }
    goto LABEL_191;
  }
  if (*(unsigned char *)(v131 + 224) != 34)
  {
    BOOL v135 = 1;
    if (!v132) {
      goto LABEL_184;
    }
LABEL_191:
    if (*(unsigned char *)(v132 + 224) == 34)
    {
      if (*(unsigned char *)(v132 + 208) == 34) {
        int v136 = 0;
      }
      if (v134) {
        goto LABEL_185;
      }
    }
    else
    {
      int v136 = 1;
      if (v134) {
        goto LABEL_185;
      }
    }
LABEL_195:
    BOOL v137 = 0;
    if (v133) {
      goto LABEL_196;
    }
    goto LABEL_189;
  }
  if (*(unsigned char *)(v131 + 208) == 34) {
    BOOL v135 = 0;
  }
  if (v132) {
    goto LABEL_191;
  }
LABEL_184:
  int v136 = 0;
  if (!v134) {
    goto LABEL_195;
  }
LABEL_185:
  if (*(unsigned char *)(v134 + 224) == 34)
  {
    if (*(unsigned char *)(v134 + 208) == 34) {
      BOOL v137 = 0;
    }
    if (!v133) {
      goto LABEL_189;
    }
LABEL_196:
    BOOL v138 = *(unsigned char *)(v133 + 224) != 34 || *(unsigned __int8 *)(v133 + 208) != 34;
    goto LABEL_205;
  }
  BOOL v137 = 1;
  if (v133) {
    goto LABEL_196;
  }
LABEL_189:
  BOOL v138 = 0;
LABEL_205:
  uint64_t v260 = v12;
  uint64_t v263 = v13;
  uint64_t v139 = 0;
  int v140 = 4 * v136;
  int v141 = 2 * v137;
  uint64_t v142 = *v122;
  uint64_t v143 = v121 + 152160;
  *(void *)(v17 + 40) = v143 + 4;
  *(void *)(v17 + 48) = v143 + 64;
  *(void *)(v17 + 176) = v143 + 26560;
  *(void *)(v17 + 56) = v143 + 28432;
  *(void *)(v17 + 312) = *v122;
  uint64_t v277 = v143 + 27120;
  *(void *)(v17 + 2624) = v143 + 27120;
  *(void *)(v17 + 2632) = v122[338];
  *(void *)(v17 + 2560) = v122[70];
  CFTypeID v253 = v122;
  *(void *)(v17 + 2568) = v122[71];
  *(void *)(v17 + 2544) = v143 + 29664;
  *(void *)(v17 + 2552) = v143 + 30176;
  *(void *)(v17 + 2528) = v143 + 29280;
  *(void *)(v17 + 2536) = v143 + 29536;
  int v144 = v129 & -v136;
  int v145 = *(_DWORD *)((char *)v130 + 16 * v137 - v144);
  char v354 = *((unsigned char *)v130 - v144 - v138);
  long long v355 = *(_OWORD *)((char *)v130 - v144);
  int v356 = v145;
  do
  {
    uint64_t v146 = &v353[v139 + 4];
    *((unsigned char *)v146 + 47) = *((unsigned char *)v130 - v135);
    *((_OWORD *)v146 + 3) = *v130;
    unsigned int v130 = (_OWORD *)((char *)v130 + v129);
    v139 += 4;
  }
  while ((v139 * 8) != 512);
  int v276 = v140 | (8 * v135) | v141 | v138;
  v353[3] = 0;
  uint64_t v147 = *(void *)(v17 + 128);
  uint64_t v148 = *(void *)(v17 + 136);
  if (v147) {
    uint64_t v149 = v147 + 208;
  }
  else {
    uint64_t v149 = 0;
  }
  if (v148) {
    uint64_t v150 = v148 + 208;
  }
  else {
    uint64_t v150 = 0;
  }
  v353[0] = *(void *)(v17 + 176) + 208;
  v353[1] = v149;
  v353[2] = v150;
  off_1E9F83268(v351, v358, 32);
  off_1E9F83268(v352, &v359, 32);
  uint64_t v151 = 0;
  int v152 = 0;
  long long v299 = 0u;
  while (1)
  {
    int v290 = v152;
    BOOL v153 = &v358[32 * byte_1BBB93FE7[v151] + byte_1BBB93FD7[v151]];
    uint64_t v296 = v151;
    if (v151 == 8)
    {
      off_1E9F83268(v351, v153, 32);
      uint64_t v151 = 8;
      off_1E9F83268(v352, v153 + 128, 32);
    }
    uint64_t v304 = v153;
    unsigned int v154 = dword_1BBB93FF8[v276 | (16 * v151)];
    unsigned int v309 = bswap32(v154);
    char v310 = 1;
    BOOL v311 = (~v154 & 0x1010001) == 0;
    unsigned __int8 v155 = sub_1BBB5B420(v151, v20[1872], (uint64_t)v353);
    uint64_t v156 = 0;
    int v157 = 0;
    v349[0] = xmmword_1BBB6F6C0;
    v349[1] = xmmword_1BBB6FCF0;
    int v350 = 8;
    uint64_t v158 = byte_1BBB943F8[v151];
    double v159 = *(double *)(v17 + 312) * 65536.0;
    uint64_t v287 = *(unsigned __int8 *)(v17 + 28);
    char v285 = *(unsigned char *)(*(void *)(v17 + 40) + 55);
    v339[2] = 999999;
    do
    {
      signed int v160 = *(_DWORD *)((char *)v349 + v156);
      if (v160 != 66)
      {
        if (*((unsigned char *)&v309 + dword_1BBB94810[v160])) {
          *(&v364 + v157++) = v160;
        }
        else {
          *(_DWORD *)((char *)v349 + v156) = 66;
        }
      }
      v156 += 4;
    }
    while (v156 != 36);
    unsigned int v292 = v124;
    double v161 = sub_1BBB4E9DC(v159);
    *(&v364 + v157) = 66;
    if (v157 < 1)
    {
      unsigned int v163 = 0;
      int v166 = 0x40000000;
    }
    else
    {
      uint64_t v162 = 0;
      unsigned int v163 = 0;
      int v164 = *(char *)(v17 + 2648);
      int v165 = *(char *)(v17 + 2649);
      int v166 = 0x40000000;
      int v303 = &v351[2 * v158];
      do
      {
        v341.i32[0] = 0;
        v369[0] = 0;
        unsigned int v167 = &v364 + v162;
        unsigned int v168 = *v167;
        unsigned int v169 = v167[1];
        off_1E9F832F0(v304, 32, v303, &v360, &v309, *v167, v169);
        off_1E9F831E0(&v360, &v341, v369);
        if (v168 == v155) {
          int v170 = v164;
        }
        else {
          int v170 = v165;
        }
        __int32 v171 = v341.i32[0] + v170 * v301;
        if (v169 == v155) {
          int v172 = v164;
        }
        else {
          int v172 = v165;
        }
        int v173 = v369[0] + v172 * v301;
        if (v169 == 66) {
          int v173 = 0x40000000;
        }
        BOOL v174 = v166 <= v171;
        if (v166 < v171) {
          __int32 v171 = v166;
        }
        if (v174) {
          unsigned int v175 = v163;
        }
        else {
          unsigned int v175 = v168;
        }
        if (v171 >= v173) {
          int v166 = v173;
        }
        else {
          int v166 = v171;
        }
        if (v171 <= v173) {
          unsigned int v163 = v175;
        }
        else {
          unsigned int v163 = v169;
        }
        v162 += 2;
      }
      while (v157 > (int)v162);
    }
    int v176 = v166;
    int v288 = v155;
    unsigned int v335 = v163;
    off_1E9F832E8(v304, 32, &v315, v316, &v309, v163);
    uint64_t v17 = v300;
    int v177 = *(unsigned __int8 *)(v300 + 29);
    int v178 = v335;
    unint64_t v179 = (v285 / 6uLL) & 0x1F;
    unint64_t v180 = 1431655766 * (0x8000 << (v285 / 6u));
    int32x4_t v181 = vdupq_n_s32((int)(HIDWORD(v180) + (v180 >> 63)) >> ((byte_1BBB93790[v287] & 0x20) == 0));
    int32x4_t v341 = vdupq_n_s32((int)v179 + 15);
    int32x4_t v342 = v181;
    long long v343 = xmmword_1E9F80EE0[(v285 % 6u) & 7];
    LOWORD(v367[0]) = 0;
    sub_1BBB56834(v316, v316, v369);
    sub_1BBB56BD4((uint64_t)v369, &v341, (uint64_t)&v319, (uint64_t)&v319, (BOOL *)v367, v177);
    int v182 = LOWORD(v367[0]);
    if (LOWORD(v367[0]))
    {
      __n128 v183 = sub_1BBB56FC4(&v319, &v319, v179 | (32 * (v285 % 6u)), (uint64_t)&v317, &v317, v177);
    }
    else
    {
      __n128 v183 = 0uLL;
      long long v317 = 0u;
      long long v318 = 0u;
    }
    int v184 = 1;
    int v185 = 1 << (v296 >> 2);
    if (!v182) {
      int v185 = 0;
    }
    int v336 = v185;
    int v186 = off_1E9F83260(v316, &v317, v183);
    if (v319)
    {
      int v184 = 0;
      v369[0] = v319;
      v341.i32[1] = v319 * v319;
      LODWORD(v367[0]) = 0;
      unsigned int v187 = 1;
    }
    else
    {
      unsigned int v187 = 0;
    }
    BOOL v20 = v294;
    int v188 = v320;
    if (v320)
    {
      v369[v187] = v320;
      v341.i32[v187 + 1] = v188 * v188;
      *((_DWORD *)v367 + v187++) = v184;
      int v188 = v184;
      int v184 = -1;
    }
    int v189 = v321;
    int v190 = v184 + 1;
    if (v321)
    {
      v369[v187] = v321;
      v341.i32[v187 + 1] = v189 * v189;
      *((_DWORD *)v367 + v187) = v190;
      v188 += v190;
      ++v187;
      int v190 = -1;
    }
    int v191 = v322;
    int v192 = v190 + 1;
    if (v322)
    {
      v369[v187] = v322;
      v341.i32[v187 + 1] = v191 * v191;
      *((_DWORD *)v367 + v187) = v192;
      v188 += v192;
      ++v187;
      int v192 = -1;
    }
    int v193 = v323;
    int v194 = v192 + 1;
    if (v323)
    {
      v369[v187] = v323;
      v341.i32[v187 + 1] = v193 * v193;
      *((_DWORD *)v367 + v187) = v194;
      v188 += v194;
      ++v187;
      int v194 = -1;
    }
    int v195 = v324;
    int v196 = v194 + 1;
    if (v324)
    {
      v369[v187] = v324;
      v341.i32[v187 + 1] = v195 * v195;
      *((_DWORD *)v367 + v187) = v196;
      v188 += v196;
      ++v187;
      int v196 = -1;
    }
    int v197 = v325;
    int v198 = v196 + 1;
    if (v325)
    {
      v369[v187] = v325;
      v341.i32[v187 + 1] = v197 * v197;
      *((_DWORD *)v367 + v187) = v198;
      v188 += v198;
      ++v187;
      int v198 = -1;
    }
    int v199 = v326;
    int v200 = v198 + 1;
    if (v326)
    {
      v369[v187] = v326;
      v341.i32[v187 + 1] = v199 * v199;
      *((_DWORD *)v367 + v187) = v200;
      v188 += v200;
      ++v187;
      int v200 = -1;
    }
    int v201 = v327;
    int v202 = v200 + 1;
    if (v327)
    {
      v369[v187] = v327;
      v341.i32[v187 + 1] = v201 * v201;
      *((_DWORD *)v367 + v187) = v202;
      v188 += v202;
      ++v187;
      int v202 = -1;
    }
    int v203 = v328;
    int v204 = v202 + 1;
    if (v328)
    {
      v369[v187] = v328;
      v341.i32[v187 + 1] = v203 * v203;
      *((_DWORD *)v367 + v187) = v204;
      v188 += v204;
      ++v187;
      int v204 = -1;
    }
    int v205 = v329;
    int v206 = v204 + 1;
    if (v329)
    {
      v369[v187] = v329;
      v341.i32[v187 + 1] = v205 * v205;
      *((_DWORD *)v367 + v187) = v206;
      v188 += v206;
      ++v187;
      int v206 = -1;
    }
    int v207 = v330;
    int v208 = v206 + 1;
    if (v330)
    {
      v369[v187] = v330;
      v341.i32[v187 + 1] = v207 * v207;
      *((_DWORD *)v367 + v187) = v208;
      v188 += v208;
      ++v187;
      int v208 = -1;
    }
    int v209 = v331;
    int v210 = v208 + 1;
    if (v331)
    {
      v369[v187] = v331;
      v341.i32[v187 + 1] = v209 * v209;
      *((_DWORD *)v367 + v187) = v210;
      v188 += v210;
      ++v187;
      int v210 = -1;
    }
    int v211 = v332;
    int v212 = v210 + 1;
    if (v332)
    {
      v369[v187] = v332;
      v341.i32[v187 + 1] = v211 * v211;
      *((_DWORD *)v367 + v187) = v212;
      v188 += v212;
      ++v187;
      int v212 = -1;
    }
    int v213 = v333;
    int v214 = v212 + 1;
    if (v333)
    {
      v369[v187] = v333;
      v341.i32[v187 + 1] = v213 * v213;
      *((_DWORD *)v367 + v187) = v214;
      v188 += v214;
      ++v187;
      int v214 = -1;
    }
    int v215 = v334;
    if (v334)
    {
      int v216 = v214 + 1;
      v369[v187] = v334;
      v341.i32[v187 + 1] = v215 * v215;
      *((_DWORD *)v367 + v187) = v216;
      v188 += v216;
      ++v187;
    }
    else if (!v187)
    {
      int v220 = 1;
      goto LABEL_336;
    }
    int v217 = 0;
    v341.i32[0] = 0;
    unsigned int v218 = v187 - 1;
    unsigned int v219 = &v341.i32[v187];
    if (*v219 == 1)
    {
      if (*(v219 - 1) == 1)
      {
        if (*(v219 - 2) == 1) {
          int v217 = 3;
        }
        else {
          int v217 = 2;
        }
      }
      else
      {
        int v217 = 1;
      }
    }
    int v220 = byte_1BBB8575C[32 * v217 + v187];
    int v221 = v187 + ~v217;
    if (v221 >= 0)
    {
      uint64_t v222 = 0;
      int v224 = v187 > 0xA && v217 != 3;
      int v225 = v187 - v217;
      uint64_t v226 = &v341.i8[4 * v221 + 4];
      uint64_t v227 = &v369[v221];
      do
      {
        int v228 = v227[v222];
        if (v228 <= 0) {
          int v229 = ~(2 * v228);
        }
        else {
          int v229 = 2 * v228 - 2;
        }
        if (v222 * 4) {
          BOOL v230 = 1;
        }
        else {
          BOOL v230 = v217 == 3;
        }
        if (!v230) {
          v229 -= 2;
        }
        if (v229 >> v224 <= 14) {
          int v231 = v224 + (v229 >> v224) + 1;
        }
        else {
          int v231 = 28;
        }
        if (v229 >= 30) {
          int v232 = 28;
        }
        else {
          int v232 = 19;
        }
        if (v229 < 14) {
          int v233 = v229 + 1;
        }
        else {
          int v233 = v232;
        }
        if (v224) {
          int v233 = v231;
        }
        else {
          int v224 = 1;
        }
        v220 += v233;
        if (v224 >= 5) {
          int v234 = 5;
        }
        else {
          int v234 = v224;
        }
        if (*(_DWORD *)&v226[v222 * 4] > dword_1BBB857DC[v224]) {
          int v224 = v234 + 1;
        }
        --v222;
        BOOL v235 = __OFSUB__(v225--, 1);
      }
      while (!((v225 < 0) ^ v235 | (v225 == 0)));
    }
    if ((int)v187 <= 15)
    {
      v220 += byte_1BBB857F4[16 * v187 + v188];
      if (v188)
      {
        if (v187 != 1)
        {
          do
          {
            uint64_t v236 = *((int *)v367 + v218);
            v220 += byte_1BBB858F4[16 * v188 + v236];
            v188 -= v236;
            if (v188) {
              BOOL v237 = v218 == 1;
            }
            else {
              BOOL v237 = 1;
            }
            --v218;
          }
          while (!v237);
        }
      }
    }
LABEL_336:
    unsigned int v124 = v176 + v292;
    int v238 = v220 + 4;
    if (v178 == v288) {
      int v238 = v220 + 1;
    }
    v339[6] = v238;
    v339[7] = v186;
    unsigned int v340 = v186 + ((v238 * (v161 + 0.5)) >> 16);
    uint64_t v239 = (int32x2_t *)&v339[6 * (v340 < 0xF423F)];
    int v240 = &v312[128 * (unint64_t)(v340 < 0xF423F)];
    int v152 = v239[1].i32[0] + v290;
    *((void *)&v241 + 1) = *((void *)&v299 + 1);
    *(int32x2_t *)&long long v241 = vadd_s32(*v239, *(int32x2_t *)&v299);
    long long v299 = v241;
    *(unsigned char *)(*(void *)(v300 + 176) + v296 + 208) = *((_DWORD *)v240 + 28);
    sub_1BBB5B6A0(v296, (uint64_t)v240, v277);
    *(void *)uint64_t v281 = v299;
    *(_DWORD *)(v281 + 8) = v152;
    *(void *)(v281 + 16) = v142;
    if (v124 > v279) {
      break;
    }
    off_1E9F83270(v304, 32, v240, v240 + 48);
    uint64_t v151 = v296 + 1;
    if (v296 == 15) {
      goto LABEL_342;
    }
  }
  unsigned int v124 = 0x40000000;
  *(_DWORD *)(v281 + 8) = 0x40000000;
LABEL_342:
  int v16 = v301;
  if (v294[3557] == 2)
  {
    sub_1BBAFC88C(*v251, v18, v300, *(_DWORD *)(v283 + 14184), v301, &v306);
    v251[294] = v306;
    v253[338] = v18 + 928 * *v294 + 10576;
    sub_1BBAFA9D0(v257, v300, v283, (uint64_t)v312);
    unsigned int v124 = v313;
  }
  uint64_t v13 = v263;
  uint64_t v33 = v258;
  unsigned int v12 = v260;
  if (v255 > v124)
  {
    DWORD2(v307) = v124;
    uint64_t v33 = v257;
  }
LABEL_28:
  *unsigned int v12 = v33;
  *(_OWORD *)uint64_t v13 = v307;
  *(void *)(v13 + 16) = v308;
  if (v20[3557] == 1)
  {
    uint64_t v35 = v13;
    *(void *)(v18 + 136) = v33;
    sub_1BBAFC88C(*(char *)(v33 + 59), v18, v17, *(_DWORD *)(v283 + 14184), v16, &v306);
    uint64_t v36 = v33;
    *(unsigned char *)(v33 + 353) = v306;
    *(void *)(v33 + 29248) = v18 + 928 * *v20 + 10576;
    if (*(unsigned char *)(v33 + 6))
    {
      char v37 = sub_1BBB596C4(v33 + 27408, ((32 * (*(unsigned char *)(v33 + 59) % 6u)) | (*(unsigned char *)(v33 + 59) / 6u) & 0x1F), v33 + 27920, (__int16 *)(v33 + 28432), (__int16 *)(v33 + 28464), *(unsigned __int8 *)(v17 + 336), *(unsigned __int8 *)(v17 + 29));
      uint64_t v36 = v33;
      *(unsigned char *)(v33 + 27120) = v37;
    }
    sub_1BBAFA9D0(v36, v17, v283, v35);
  }
}