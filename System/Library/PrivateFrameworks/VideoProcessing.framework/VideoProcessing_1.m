double sub_1BBA31C44(int a1, unsigned int a2, uint64_t a3, uint8x16_t *a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v11;
  double result;
  uint64_t vars8;

  v11 = a2;
  sub_1BBA31CB8(a1, a2, a3, a4, a5, a6);

  *(void *)&result = sub_1BBA31CB8(a1, v11, a3, a4 + 2, a5, a6 + 4).u64[0];
  return result;
}

uint8x16_t sub_1BBA31CB8(int a1, unint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  _X8 = &_X3->i8[-a3];
  uint8x16_t v9 = *(uint8x16_t *)((char *)_X3 - a3);
  uint8x16_t v8 = *(uint8x16_t *)((char *)_X3 - a3 + 16);
  __asm { PRFUM           #0, [X8,#0x3F] }
  _X8 = (uint64_t)_X3->i64 + 4 * a3 - a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  uint8x16_t v19 = *_X3;
  uint8x16_t result = _X3[1];
  __asm { PRFUM           #0, [X3,#0x3F] }
  _X8 = &_X3->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  _X8 = &_X3->i8[a3];
  uint8x16_t v26 = *(uint8x16_t *)((char *)_X3 + a3);
  uint8x16_t v25 = *(uint8x16_t *)((char *)&_X3[1] + a3);
  __asm { PRFUM           #0, [X8,#0x3F] }
  _X8 = (uint64_t)_X3->i64 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  int v31 = a1 + 2;
  uint64_t v32 = 2 * a3;
  uint64_t v33 = 2 * a5;
  uint8x16_t v34 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  uint8x16_t v35 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  uint8x16_t v36 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  uint8x16_t v37 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    _X14 = &_X3->i8[v32];
    uint8x16_t v39 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    uint8x16_t v40 = *(uint8x16_t *)((char *)&_X3[1] + v32);
    __asm { PRFUM           #0, [X14,#0x3F] }
    _X14 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x1F]
    }
    _X15 = (uint8x16_t *)((char *)_X3 + 3 * a3);
    _X14 = &_X3->i8[7 * a3];
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    uint16x8_t v47 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v26.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v34.i8);
    uint16x8_t v48 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v19, v35), v26, v36), v9, v34);
    uint16x8_t v49 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)result.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v34.i8);
    uint16x8_t v50 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(result, v35), v25, v36), v8, v34);
    uint16x8_t v51 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v39.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v34.i8);
    uint16x8_t v52 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v26, v35), v39, v36), v19, v34);
    uint16x8_t v53 = vmull_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v35.i8);
    uint16x8_t v54 = vmull_high_u8(v25, v35);
    uint8x16_t v9 = v26;
    uint8x16_t v8 = v25;
    uint8x16_t v26 = *_X15;
    uint8x16_t v25 = _X15[1];
    __asm
    {
      PRFUM           #0, [X15,#0x3F]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x1F]
    }
    uint16x8_t v58 = vmlsl_u8(v51, *(uint8x8_t *)_X15->i8, *(uint8x8_t *)v37.i8);
    uint16x8_t v59 = vmlsl_high_u8(v52, *_X15, v37);
    *a6 = vmlsl_u8(v47, *(uint8x8_t *)v39.i8, *(uint8x8_t *)v37.i8);
    a6[1] = vmlsl_high_u8(v48, v39, v37);
    a6[2] = vmlsl_u8(v49, *(uint8x8_t *)v40.i8, *(uint8x8_t *)v37.i8);
    a6[3] = vmlsl_high_u8(v50, v40, v37);
    v60 = (uint16x8_t *)((char *)a6 + v33);
    uint16x8_t *v60 = v58;
    v60[1] = v59;
    v31 -= 2;
    a6 = (uint16x8_t *)((char *)a6 + v33 + v33);
    v60[2] = vmlsl_u8(vmlsl_u8(vmlal_u8(v53, *(uint8x8_t *)v40.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v37.i8);
    v60[3] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v54, v40, v36), result, v34), v25, v37);
    uint8x16_t v19 = v39;
    uint8x16_t result = v40;
  }
  while (v31 > 2);
  return result;
}

void sub_1BBA31E2C(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    sub_1BBA31EAC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x38);
}

int16x8_t sub_1BBA31EAC(int a1, unint64_t a2, uint64_t a3, int16x8_t *_X3, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6 = qword_1BBB78BA0[2 * ((a2 >> 16) & 7) - 2];
  _X8 = &_X3->i8[-2 * a3];
  int16x8_t v8 = *(int16x8_t *)_X8;
  _X8 += 30;
  int16x8_t result = v8;
  __asm { PRFM            #0, [X8] }
  int16x8_t v15 = *_X3;
  __asm { PRFUM           #0, [X3,#0x1E] }
  _X8 = &_X3->i8[2 * a3];
  int16x8_t v18 = *(int16x8_t *)_X8;
  _X8 += 30;
  int16x8_t v19 = v18;
  __asm { PRFM            #0, [X8] }
  int16x8_t v21 = vdupq_lane_s16(v6, 0);
  int16x8_t v22 = vdupq_lane_s16(v6, 3);
  int16x8_t v23 = vdupq_lane_s16(v6, 1);
  int16x8_t v24 = vdupq_lane_s16(v6, 2);
  int v25 = a1 + 2;
  do
  {
    _X15 = &_X3->i8[6 * a3];
    _X16 = &_X3->i8[14 * a3];
    _X0 = &_X3[a3];
    _X3 = (int16x8_t *)((char *)_X3 + 4 * a3);
    uint16x8_t v29 = (uint16x8_t)vmulq_s16(v15, v23);
    _X17 = &_X3[1].i8[14];
    int16x8_t v31 = *_X3;
    __asm { PRFM            #0, [X17] }
    int16x8_t v33 = vmulq_s16(result, v21);
    int16x8_t result = v19;
    uint16x8_t v34 = (uint16x8_t)vmulq_s16(v19, v24);
    uint16x8_t v35 = (uint16x8_t)vmulq_s16(v19, v23);
    int16x8_t v36 = *(int16x8_t *)_X15;
    _X15 += 30;
    int16x8_t v19 = v36;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X16]
      PRFM            #0, [X0]
      PRFUM           #0, [X16,#0xE]
      PRFUM           #0, [X0,#0xE]
    }
    int16x8_t v42 = vmlaq_s16(v33, *_X3, v22);
    int32x4_t v43 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v34.i8);
    int32x4_t v44 = (int32x4_t)vaddl_high_u16(v29, v34);
    int32x4_t v45 = vaddw_s16(v43, *(int16x4_t *)v42.i8);
    int32x4_t v46 = vaddw_high_s16(v44, v42);
    int16x8_t v47 = vmlaq_s16(vmulq_s16(v15, v21), v36, v22);
    uint16x8_t v48 = (uint16x8_t)vmulq_s16(*_X3, v24);
    int32x4_t v49 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v35.i8);
    int32x4_t v50 = (int32x4_t)vaddl_high_u16(v48, v35);
    int32x4_t v51 = vaddw_s16(v49, *(int16x4_t *)v47.i8);
    int32x4_t v52 = vaddw_high_s16(v50, v47);
    *(int16x4_t *)v50.i8 = vadd_s16(vshrn_n_s32(v45, 2uLL), (int16x4_t)0xE000E000E000E000);
    v50.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v46, 2uLL), (int16x4_t)0xE000E000E000E000);
    *a6 = v50;
    *(int16x4_t *)v46.i8 = vadd_s16(vshrn_n_s32(v51, 2uLL), (int16x4_t)0xE000E000E000E000);
    v46.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v52, 2uLL), (int16x4_t)0xE000E000E000E000);
    *(int32x4_t *)((char *)a6 + 2 * a5) = v46;
    a6 = (int32x4_t *)((char *)a6 + 4 * a5);
    v25 -= 2;
    int16x8_t v15 = v31;
  }
  while (v25 > 2);
  return result;
}

void sub_1BBA31FD4(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    sub_1BBA31EAC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x18);
}

uint8x16_t sub_1BBA32054(int a1, unint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3->i64 + 4 * a3 - a3;
  _X8 = (uint64_t)&_X3[1].i64[1] - a3 + 7;
  uint8x16_t v9 = *(uint8x16_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  uint8x16_t result = *_X3;
  __asm { PRFUM           #0, [X3,#0x1F] }
  _X8 = &_X3->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = (uint64_t)_X3->i64 + 4 * a3 + a3;
  _X8 = (uint64_t)&_X3[1].i64[1] + a3 + 7;
  uint8x16_t v24 = *(uint8x16_t *)((char *)_X3 + a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  int v28 = a1 + 2;
  uint64_t v29 = 2 * a5;
  uint8x16_t v30 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  uint8x16_t v31 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  uint8x16_t v32 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  uint8x16_t v33 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    _X14 = (uint64_t)&_X3[1].i64[1] + 2 * a3 + 7;
    uint8x16_t v35 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = &_X3->i8[3 * a3];
    _X16 = &_X3->i8[7 * a3];
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    uint16x8_t v42 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)result.i8, *(uint8x8_t *)v31.i8), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v32.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v30.i8);
    uint16x8_t v43 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(result, v31), v24, v32), v9, v30);
    uint16x8_t v44 = vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v31.i8);
    uint16x8_t v45 = vmull_high_u8(v24, v31);
    uint8x16_t v9 = v24;
    uint8x16_t v46 = *(uint8x16_t *)_X14;
    _X14 += 31;
    uint8x16_t v24 = v46;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0xF]
    }
    *a6 = vmlsl_u8(v42, *(uint8x8_t *)v35.i8, *(uint8x8_t *)v33.i8);
    a6[1] = vmlsl_high_u8(v43, v35, v33);
    int32x4_t v50 = (uint16x8_t *)((char *)a6 + v29);
    v28 -= 2;
    *int32x4_t v50 = vmlsl_u8(vmlsl_u8(vmlal_u8(v44, *(uint8x8_t *)v35.i8, *(uint8x8_t *)v32.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v46.i8, *(uint8x8_t *)v33.i8);
    v50[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v45, v35, v32), result, v30), v46, v33);
    a6 = (uint16x8_t *)((char *)a6 + v29 + v29);
    uint8x16_t result = v35;
  }
  while (v28 > 2);
  return result;
}

double sub_1BBA32178(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA31EAC(a1, a2, a3, a4, a5, a6);

  *(void *)&double result = sub_1BBA31EAC(a1, v11, a3, a4 + 1, a5, a6 + 1).u64[0];
  return result;
}

double sub_1BBA321EC(int a1, unint64_t a2, uint64_t a3, double *_X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3 + 4 * a3 - a3;
  _X8 = (uint64_t)_X3 - a3 + 15;
  uint8x8_t v9 = *(uint8x8_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  double result = *_X3;
  __asm { PRFUM           #0, [X3,#0xF] }
  _X8 = (char *)_X3 + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (uint64_t)_X3 + 4 * a3 + a3;
  _X8 = (uint64_t)_X3 + a3 + 15;
  uint8x8_t v24 = *(uint8x8_t *)((char *)_X3 + a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  int v28 = a1 + 2;
  uint8x8_t v29 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v30 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v31 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v32 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X15 = (uint64_t)_X3 + 2 * a3 + 15;
    double v34 = *(double *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X15] }
    _X15 = (char *)_X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    uint16x8_t v39 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)&result, v29), v24, v31), v9, v30);
    uint16x8_t v40 = vmull_u8(v24, v29);
    uint8x8_t v9 = v24;
    _X15 = (uint64_t)_X3 + 3 * a3 + 15;
    uint8x8_t v24 = *(uint8x8_t *)((char *)_X3 + 3 * a3);
    __asm { PRFM            #0, [X15] }
    _X15 = (char *)_X3 + 7 * a3;
    __asm
    {
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    *a6 = vmlsl_u8(v39, *(uint8x8_t *)&v34, v32);
    *(uint16x8_t *)((char *)a6 + 2 * a5) = vmlsl_u8(vmlsl_u8(vmlal_u8(v40, *(uint8x8_t *)&v34, v31), *(uint8x8_t *)&result, v30), v24, v32);
    _X3 = (double *)((char *)_X3 + a3 + a3);
    a6 = (uint16x8_t *)((char *)a6 + 4 * a5);
    v28 -= 2;
    double result = v34;
  }
  while (v28 > 2);
  return result;
}

uint8x8_t sub_1BBA322F0(int a1, unint64_t a2, uint64_t a3, uint8x8_t *_X3, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3 + 4 * a3 - a3;
  _X8 = (uint64_t)&_X3[1] - a3 + 7;
  uint8x8_t v9 = *(uint8x8_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  uint8x8_t v17 = *_X3;
  __asm { PRFUM           #0, [X3,#0xF] }
  _X8 = (char *)_X3 + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (uint64_t)_X3 + 4 * a3 + a3;
  _X8 = (uint64_t)&_X3[1] + a3 + 7;
  uint8x8_t result = *(uint8x8_t *)((char *)_X3 + a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  int v28 = a1 + 2;
  uint8x8_t v29 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v30 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v31 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v32 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X16 = (uint64_t)&_X3[1] + 2 * a3 + 7;
    uint8x8_t v34 = *(uint8x8_t *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X16] }
    _X16 = (char *)_X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#7]
    }
    uint16x8_t v39 = vmull_u8(v9, v30);
    uint16x8_t v40 = vmull_u8(result, v29);
    int16x4_t v41 = (int16x4_t)vmlal_u8(vmull_u8(v17, v29), result, v31).u64[0];
    uint8x8_t v9 = result;
    _X16 = (uint64_t)&_X3[1] + 3 * a3 + 7;
    uint8x8_t result = *(uint8x8_t *)((char *)_X3 + 3 * a3);
    _X17 = (char *)_X3 + 7 * a3;
    _X3 = (uint8x8_t *)((char *)_X3 + a3 + a3);
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#7]
    }
    *a6 = vsub_s16(v41, (int16x4_t)*(_OWORD *)&vmlal_u8(v39, v34, v32));
    *(int16x4_t *)((char *)a6 + 2 * a5) = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v40, v34, v31), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v17, v30), result, v32));
    a6 = (int16x4_t *)((char *)a6 + 4 * a5);
    v28 -= 2;
    uint8x8_t v17 = v34;
  }
  while (v28 > 2);
  return result;
}

int16x4_t *sub_1BBA323FC(int a1, unint64_t a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, int16x4_t *a6)
{
  _X9 = (int16x4_t *)((char *)_X3 - 2 * a3);
  int16x4_t v7 = qword_1BBB78BA0[2 * ((a2 >> 16) & 7) - 2];
  _X11 = (int16x4_t *)((char *)_X3 + 2 * a3);
  int16x4_t v9 = *_X9;
  _X9 = (int16x4_t *)((char *)_X9 + 14);
  int16x4_t v10 = v9;
  __asm { PRFM            #0, [X9] }
  int16x4_t v16 = *_X3;
  __asm { PRFUM           #0, [X3,#0xE] }
  int16x4_t v18 = *_X11;
  _X11 = (int16x4_t *)((char *)_X11 + 14);
  int16x4_t v19 = v18;
  __asm { PRFM            #0, [X11] }
  int v21 = a1 + 2;
  do
  {
    int32x4_t v22 = vmlal_lane_s16(vmull_lane_s16(v16, v7, 1), v10, v7, 0);
    _X16 = (int16x4_t *)((char *)_X3 + 6 * a3);
    _X17 = (char *)_X3 + 14 * a3;
    uint8x8_t result = &_X3[2 * a3];
    _X3 = (int16x4_t *)((char *)_X3 + 4 * a3);
    int32x4_t v26 = vmlal_lane_s16(vmull_lane_s16(v19, v7, 1), v16, v7, 0);
    _X15 = (char *)&_X3[1] + 6;
    int16x4_t v16 = *_X3;
    __asm { PRFM            #0, [X15] }
    int32x4_t v29 = vmlal_lane_s16(v22, v19, v7, 2);
    int16x4_t v10 = v19;
    int16x4_t v30 = *_X16;
    _X16 = (int16x4_t *)((char *)_X16 + 14);
    int16x4_t v19 = v30;
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFM            #0, [X0]
      PRFUM           #0, [X17,#6]
      PRFUM           #0, [X0,#6]
    }
    int32x4_t v36 = vmlal_lane_s16(vmlal_lane_s16(v26, *_X3, v7, 2), v30, v7, 3);
    *a6 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v29, *_X3, v7, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
    *(int16x4_t *)((char *)a6 + 2 * a5) = vadd_s16(vshrn_n_s32(v36, 2uLL), (int16x4_t)0xE000E000E000E000);
    a6 = (int16x4_t *)((char *)a6 + 4 * a5);
    v21 -= 2;
  }
  while (v21 > 2);
  return result;
}

uint64_t sub_1BBA324D8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  sub_1BBA3254C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);

  return sub_1BBA3254C(a1, a2, a3, a4 + 32, a5, a6 + 4, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_1BBA3254C(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  int8x8_t v13 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  int v14 = result + 1;
  int16x8_t v15 = (int8x16_t *)(a4 + 14);
  int16x4_t v16 = a6 + 2;
  uint8x16_t v17 = (uint8x16_t)vdupq_lane_s8(v13, 0);
  uint8x8_t v18 = (uint8x8_t)vdup_lane_s8(v13, 1);
  uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(v13, 2);
  uint8x8_t v20 = (uint8x8_t)vdup_lane_s8(v13, 3);
  do
  {
    int8x16_t v21 = v15[-1];
    a13.i64[0] = v15[1].i64[0];
    uint16x8_t v22 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), v19), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 6uLL), v20);
    uint16x8_t v23 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, *v15, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, *v15, 0xCuLL), v19), (uint8x16_t)v21, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, *v15, 0xEuLL), v20);
    uint16x8_t v24 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v15, *v15, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(*v15, *v15, 4uLL), v19), *(uint8x8_t *)v15->i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(*v15, *v15, 6uLL), v20);
    uint8x8_t v25 = (uint8x8_t)vextq_s8(*v15, a13, 0xAuLL).u64[0];
    uint8x8_t v26 = (uint8x8_t)vextq_s8(*v15, a13, 0xCuLL).u64[0];
    a13 = vextq_s8(*v15, a13, 0xEuLL);
    uint16x8_t v27 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v25, v18), v26, v19), *(uint8x16_t *)v15, v17), *(uint8x8_t *)a13.i8, v20);
    v16[-2] = v22;
    v16[-1] = v23;
    *int16x4_t v16 = v24;
    v16[1] = v27;
    --v14;
    int16x8_t v15 = (int8x16_t *)((char *)v15 + a3);
    int16x4_t v16 = (uint16x8_t *)((char *)v16 + 2 * a5);
  }
  while (v14 > 1);
  return result;
}

uint64_t sub_1BBA32618(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA32698(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1BBA32698(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6 = qword_1BBB78BA0[2 * (a2 & 7) - 2];
  int16x8_t v7 = vdupq_lane_s16(v6, 0);
  int16x8_t v8 = vdupq_lane_s16(v6, 3);
  int16x8_t v9 = vdupq_lane_s16(v6, 1);
  int16x8_t v10 = vdupq_lane_s16(v6, 2);
  _X8 = (int8x16_t *)(a4 - 4);
  int v12 = result + 1;
  do
  {
    int8x16_t v13 = _X8[1];
    __asm { PRFUM           #0, [X8,#0x3E] }
    _X13 = &_X8->i8[8 * a3];
    __asm { PRFM            #0, [X13] }
    int16x8_t v21 = (int16x8_t)vextq_s8(*_X8, v13, 8uLL);
    int16x8_t v22 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X8, v7), (int16x8_t)vextq_s8(*_X8, v13, 0xCuLL), v8);
    uint16x8_t v23 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X8, v13, 4uLL), v9);
    uint16x8_t v24 = (uint16x8_t)vmulq_s16(v21, v10);
    int32x4_t v25 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v23.i8);
    int32x4_t v26 = (int32x4_t)vaddl_high_u16(v23, v24);
    int32x4_t v27 = vaddw_s16(v25, *(int16x4_t *)v22.i8);
    int32x4_t v28 = vaddw_high_s16(v26, v22);
    *(int16x4_t *)v26.i8 = vadd_s16(vshrn_n_s32(v27, 2uLL), (int16x4_t)0xE000E000E000E000);
    v26.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v28, 2uLL), (int16x4_t)0xE000E000E000E000);
    __asm { PRFUM           #0, [X13,#0x1E] }
    *a6 = v26;
    --v12;
    _X8 = (int8x16_t *)((char *)_X8 + 2 * a3);
    a6 = (int32x4_t *)((char *)a6 + 2 * a5);
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1BBA32744(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA32698(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1BBA327C4(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12, double a13, int8x16_t a14)
{
  int8x8_t v14 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  int16x8_t v15 = (int8x16_t *)(a4 - 2);
  int v16 = result + 2;
  uint64_t v17 = 2 * a5;
  uint8x16_t v18 = (uint8x16_t)vdupq_lane_s8(v14, 0);
  uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(v14, 1);
  uint8x8_t v20 = (uint8x8_t)vdup_lane_s8(v14, 2);
  uint8x8_t v21 = (uint8x8_t)vdup_lane_s8(v14, 3);
  do
  {
    int8x16_t v22 = *v15;
    a12.i64[0] = v15[1].i64[0];
    uint16x8_t v23 = (int8x16_t *)((char *)v15 + a3);
    a14.i64[0] = v23[1].i64[0];
    uint16x8_t v24 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 4uLL), v20), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 6uLL), v21);
    uint16x8_t v25 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v22, a12, 0xAuLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, a12, 0xCuLL), v20), (uint8x16_t)v22, v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, a12, 0xEuLL), v21);
    uint16x8_t v26 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v23, *v23, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(*v23, *v23, 4uLL), v20), *(uint8x8_t *)v23->i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(*v23, *v23, 6uLL), v21);
    uint8x8_t v27 = (uint8x8_t)vextq_s8(*v23, a14, 0xAuLL).u64[0];
    uint8x8_t v28 = (uint8x8_t)vextq_s8(*v23, a14, 0xCuLL).u64[0];
    a14 = vextq_s8(*v23, a14, 0xEuLL);
    a12 = (int8x16_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v27, v19), v28, v20), *(uint8x16_t *)v23, v18), *(uint8x8_t *)a14.i8, v21);
    *a6 = v24;
    a6[1] = v25;
    int32x4_t v29 = (int8x16_t *)&a6->i8[v17];
    *int32x4_t v29 = (int8x16_t)v26;
    v29[1] = a12;
    v16 -= 2;
    int16x8_t v15 = (int8x16_t *)((char *)v23 + a3);
    a6 = (uint16x8_t *)((char *)a6 + v17 + v17);
  }
  while (v16 > 2);
  return result;
}

uint64_t sub_1BBA3289C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  sub_1BBA32698(a1, a2, a3, a4, a5, a6);

  return sub_1BBA32698(a1, a2, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1BBA32910(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  int v7 = result + 2;
  uint64_t v8 = 4 * a3 - 2;
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    int8x16_t v13 = *(int8x16_t *)(_X3 - 2);
    __asm { PRFUM           #0, [X3,#0x1D] }
    _X14 = _X3 + v8;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = _X3 + a3;
    int8x16_t v23 = *(int8x16_t *)(_X3 + a3 - 2);
    __asm { PRFUM           #0, [X14,#0x1D] }
    _X14 = _X3 + v8 + a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    *a6 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), v11), *(uint8x8_t *)v13.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 6uLL), v12);
    *(uint16x8_t *)((char *)a6 + 2 * a5) = vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v11), *(uint8x8_t *)v23.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v12);
    a6 = (uint16x8_t *)((char *)a6 + 4 * a5);
    v7 -= 2;
    _X3 += 2 * a3;
  }
  while (v7 > 2);
  return result;
}

uint64_t sub_1BBA329D4(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  int v7 = result + 2;
  uint64_t v8 = 4 * a3 - 2;
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    int8x16_t v13 = *(int8x16_t *)(_X3 - 2);
    __asm { PRFUM           #0, [X3,#0x1D] }
    _X14 = _X3 + v8;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = _X3 + a3;
    int8x16_t v23 = *(int8x16_t *)(_X3 + a3 - 2);
    __asm { PRFUM           #0, [X14,#0x1D] }
    _X14 = _X3 + v8 + a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    *a6 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), v11), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(*(uint8x8_t *)v13.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 6uLL), v12));
    *(int16x4_t *)((char *)a6 + 2 * a5) = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v11), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(*(uint8x8_t *)v23.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v12));
    a6 = (int16x4_t *)((char *)a6 + 4 * a5);
    v7 -= 2;
    _X3 += 2 * a3;
  }
  while (v7 > 2);
  return result;
}

uint64_t sub_1BBA32AA0(uint64_t result, char a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, int16x4_t *a6)
{
  int16x4_t v6 = qword_1BBB78BA0[2 * (a2 & 7) - 2];
  int v7 = result + 1;
  do
  {
    __asm { PRFUM           #0, [X3,#0x1E] }
    _X12 = (char *)&_X3[a3 - 1] + 4;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0x12]
    }
    *a6 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X3, v6, 1), *(int16x4_t *)((char *)_X3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X3->i8, *(int8x16_t *)_X3->i8, 4uLL), v6, 2), *(int16x8_t *)_X3->i8, v6, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
    --v7;
    _X3 = (int16x4_t *)((char *)_X3 + 2 * a3);
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1BBA32B1C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    v12 += 8;
    uint64_t result = sub_1BBA32B98(a1, v11, a3, v12 + a4, a5, a6++);
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1BBA32B98(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[(a2 & 3) - 1];
  uint8x8_t v7 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v8 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 3);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 4);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 5);
  uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v6, 6);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v6, 7);
  int16x8_t v15 = (int16x8_t)vmovl_u8(qword_1BBB78B10[((a2 >> 16) & 3) - 1]);
  _X8 = -3 * a3 + a4;
  int8x16_t v17 = *(int8x16_t *)(_X8 - 3);
  _X8 -= 3;
  int8x16_t v18 = v17;
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = _X8 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(_X8 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X8 + a3);
  int8x16_t v30 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  int8x16_t v31 = v30;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  int8x16_t v37 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  int8x16_t v38 = v37;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X9 + a3);
  int8x16_t v44 = *(int8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  int8x16_t v45 = v44;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X10 + a3);
  int8x16_t v51 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  int8x16_t v52 = v51;
  uint64_t v53 = 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X11 + a3);
  int16x8_t v59 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 1uLL), v8), *(uint8x8_t *)v18.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 7uLL),
                     v14);
  int8x16_t v60 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  int8x16_t v61 = v60;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  int16x8_t v66 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 1uLL), v8), *(uint8x8_t *)v31.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 7uLL),
                     v14);
  int8x16_t v67 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  int16x8_t v71 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 1uLL), v8), *(uint8x8_t *)v38.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 7uLL),
                     v14);
  int16x8_t v72 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 1uLL), v8), *(uint8x8_t *)v45.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 7uLL),
                     v14);
  uint16x8_t v73 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 1uLL), v8), *(uint8x8_t *)v52.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 5uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 7uLL), v14);
  int16x8_t v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 1uLL), v8), *(uint8x8_t *)v61.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 7uLL),
                     v14);
  int16x8_t v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 1uLL), v8), *(uint8x8_t *)v67.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 7uLL),
                     v14);
  int v76 = result + 2;
  uint64_t v77 = 8 * a3 - 3;
  uint64_t v78 = 5 * a3;
  uint8x8_t v79 = v7;
  uint8x8_t v80 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v81 = v9;
  uint8x8_t v82 = v10;
  uint8x8_t v83 = (uint8x8_t)vdup_lane_s8(v6, 4);
  uint8x8_t v84 = (uint8x8_t)vdup_lane_s8(v6, 5);
  do
  {
    int32x4_t v85 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v15.i8, 1), *(int16x4_t *)v59.i8, *(int16x4_t *)v15.i8, 0);
    int32x4_t v86 = vmlsl_high_lane_s16(vmull_high_lane_s16(v66, *(int16x4_t *)v15.i8, 1), v59, *(int16x4_t *)v15.i8, 0);
    int16x8_t v59 = v71;
    int32x4_t v87 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 1), *(int16x4_t *)v66.i8, *(int16x4_t *)v15.i8, 0);
    int32x4_t v88 = vmlsl_high_lane_s16(vmull_high_lane_s16(v71, *(int16x4_t *)v15.i8, 1), v66, *(int16x4_t *)v15.i8, 0);
    int16x8_t v66 = v72;
    int32x4_t v89 = vmlal_lane_s16(vmlsl_lane_s16(v85, *(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 2), *(int16x4_t *)v72.i8, *(int16x4_t *)v15.i8, 3);
    int32x4_t v90 = vmlal_high_lane_s16(vmlsl_high_lane_s16(v86, v71, *(int16x4_t *)v15.i8, 2), v72, *(int16x4_t *)v15.i8, 3);
    int32x4_t v91 = vmlsl_lane_s16(v87, *(int16x4_t *)v72.i8, *(int16x4_t *)v15.i8, 2);
    int32x4_t v92 = vmlsl_high_lane_s16(v88, v72, *(int16x4_t *)v15.i8, 2);
    int16x8_t v72 = v74;
    int16x8_t v71 = (int16x8_t)v73;
    _X16 = a4 + v53;
    int8x16_t v94 = *(int8x16_t *)(a4 + v53 - 3);
    __asm { PRFUM           #0, [X16,#0x1C] }
    _X16 = a4 + v77;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0xF]
    }
    _X16 = a4 + v78;
    int8x16_t v100 = *(int8x16_t *)(a4 + v78 - 3);
    __asm { PRFUM           #0, [X16,#0x1C] }
    _X16 = a4 + v77 + a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0xF]
    }
    uint8x8_t v105 = (uint8x8_t)vdup_lane_s8(v6, 6);
    uint8x8_t v106 = (uint8x8_t)vdup_lane_s8(v6, 7);
    int16x8_t v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 1uLL), v80), *(uint8x8_t *)v94.i8, v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 3uLL), v82), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 4uLL), v83), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 6uLL), v105), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 5uLL), v84),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 7uLL),
                       v106);
    int32x4_t v107 = vmlal_laneq_s16(vmlal_laneq_s16(v89, *(int16x4_t *)v71.i8, v15, 4), *(int16x4_t *)v75.i8, v15, 6);
    int32x4_t v108 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(v90, v71, v15, 4), v75, v15, 6);
    int32x4_t v109 = vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v91, *(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 3), *(int16x4_t *)v72.i8, v15, 4), *(int16x4_t *)v74.i8, v15, 6), *(int16x4_t *)v75.i8, v15, 5);
    int32x4_t v110 = vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v92, v71, *(int16x4_t *)v15.i8, 3), v72, v15, 4), v74, v15, 6), v75, v15, 5);
    uint16x8_t v73 = (uint16x8_t)v75;
    int16x8_t v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 1uLL), v80), *(uint8x8_t *)v100.i8, v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 3uLL), v82), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 4uLL), v83), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 6uLL), v105), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 5uLL), v84),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 7uLL),
                       v106);
    *a6 = vshrn_high_n_s32(vshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(v107, *(int16x4_t *)v72.i8, v15, 5), *(int16x4_t *)v74.i8, v15, 7), 6uLL), vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(v108, v72, v15, 5), v74, v15, 7), 6uLL);
    *(int16x8_t *)((char *)a6 + 2 * a5) = vshrn_high_n_s32(vshrn_n_s32(vmlsl_laneq_s16(v109, *(int16x4_t *)v75.i8, v15, 7), 6uLL), vmlsl_high_laneq_s16(v110, v75, v15, 7), 6uLL);
    a6 = (int16x8_t *)((char *)a6 + 4 * a5);
    v76 -= 2;
    a4 += 2 * a3;
  }
  while (v76 > 2);
  return result;
}

uint64_t sub_1BBA32FEC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA3306C(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1BBA3306C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[(a2 & 3) - 1];
  _X8 = (int8x16_t *)(a4 - 6 * a3);
  int16x8_t v8 = *(int16x8_t *)((char *)&_X8[-1] + 10);
  _X8 = (int8x16_t *)((char *)_X8 - 6);
  int8x16_t v9 = _X8[1];
  int16x8_t v10 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 2uLL);
  int16x8_t v11 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 4uLL);
  int16x8_t v12 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 6uLL);
  int16x8_t v13 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 8uLL);
  int16x8_t v14 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xAuLL);
  int16x8_t v15 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xCuLL);
  int16x8_t v16 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  int16x8_t v17 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xEuLL);
  int16x8_t v18 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  int16x8_t v19 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  int16x8_t v20 = vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v8, v6.i16[0]), v10, *(int16x4_t *)v6.i8, 1), v11, *(int16x4_t *)v6.i8, 2);
  int16x8_t v21 = vdupq_laneq_s16(v6, 5);
  int16x8_t v22 = vdupq_laneq_s16(v6, 6);
  int16x8_t v23 = vmlaq_laneq_s16(vmlaq_laneq_s16(v20, v14, v6, 5), v15, v6, 6);
  int16x8_t v24 = vdupq_laneq_s16(v6, 7);
  int16x8_t v25 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  int16x8_t v26 = vmlaq_laneq_s16(v23, v17, v6, 7);
  int16x8_t v27 = xmmword_1BBB78B70[((a2 >> 16) & 3) - 1];
  __asm { PRFUM           #0, [X8,#0x2E] }
  _X9 = &_X8->i8[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  uint16x8_t v36 = (uint16x8_t)vmulq_lane_s16(v12, *(int16x4_t *)v6.i8, 3);
  int16x8_t v37 = vdupq_laneq_s16(v6, 4);
  uint16x8_t v38 = (uint16x8_t)vmulq_laneq_s16(v13, v6, 4);
  _X9 = (int8x16_t *)((char *)_X8 + 2 * a3);
  int16x8_t v40 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v36.i8), *(int16x4_t *)v26.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v36, v38), v26), 2uLL);
  int16x8_t v41 = *(int16x8_t *)_X9;
  int8x16_t v42 = _X9[1];
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9->i8[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  int16x8_t v47 = (int16x8_t)vextq_s8(*_X9, v42, 2uLL);
  int16x8_t v48 = (int16x8_t)vextq_s8(*_X9, v42, 4uLL);
  int16x8_t v49 = (int16x8_t)vextq_s8(*_X9, v42, 6uLL);
  _X9 = &_X9->i8[2 * a3];
  int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v41, v42, 8uLL);
  int16x8_t v52 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v41, v6.i16[0]), v47, *(int16x4_t *)v6.i8, 1), v48, *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v41, v42, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v41, v42, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v41, v42, 0xEuLL), v6, 7);
  uint16x8_t v53 = (uint16x8_t)vmulq_lane_s16(v49, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v54 = (uint16x8_t)vmulq_laneq_s16(v51, v6, 4);
  int16x8_t v55 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v54.i8, *(uint16x4_t *)v53.i8), *(int16x4_t *)v52.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v53, v54), v52), 2uLL);
  int16x8_t v56 = *(int16x8_t *)_X9;
  int8x16_t v57 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 6uLL);
  int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 8uLL);
  int16x8_t v65 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v56, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xEuLL), v6,
          7);
  uint16x8_t v66 = (uint16x8_t)vmulq_lane_s16(v63, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v67 = (uint16x8_t)vmulq_laneq_s16(v64, v6, 4);
  int16x8_t v68 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v67.i8, *(uint16x4_t *)v66.i8), *(int16x4_t *)v65.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v66, v67), v65), 2uLL);
  int16x8_t v69 = *(int16x8_t *)_X9;
  int8x16_t v70 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 6uLL);
  int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 8uLL);
  int16x8_t v78 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v69, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xEuLL), v6,
          7);
  uint16x8_t v79 = (uint16x8_t)vmulq_lane_s16(v76, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v80 = (uint16x8_t)vmulq_laneq_s16(v77, v6, 4);
  int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v80.i8, *(uint16x4_t *)v79.i8), *(int16x4_t *)v78.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v79, v80), v78), 2uLL);
  int16x8_t v82 = *(int16x8_t *)_X9;
  int8x16_t v83 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
  int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
  int16x8_t v91 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v82, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL), v6,
          7);
  uint16x8_t v92 = (uint16x8_t)vmulq_lane_s16(v89, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v93 = (uint16x8_t)vmulq_laneq_s16(v90, v6, 4);
  int16x8_t v94 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v93.i8, *(uint16x4_t *)v92.i8), *(int16x4_t *)v91.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v92, v93), v91), 2uLL);
  int16x8_t v95 = *(int16x8_t *)_X9;
  int8x16_t v96 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  int16x8_t v102 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 6uLL);
  int16x8_t v103 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 8uLL);
  int16x8_t v104 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v95, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xEuLL), v6,
           7);
  uint16x8_t v105 = (uint16x8_t)vmulq_lane_s16(v102, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v106 = (uint16x8_t)vmulq_laneq_s16(v103, v6, 4);
  int16x8_t v107 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v105.i8), *(int16x4_t *)v104.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v105, v106), v104), 2uLL);
  int16x8_t v108 = *(int16x8_t *)_X9;
  int8x16_t v109 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X9 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  int16x8_t v114 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 6uLL);
  int16x8_t v115 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 8uLL);
  int16x8_t v116 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v108, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xEuLL), v6,
           7);
  uint16x8_t v117 = (uint16x8_t)vmulq_lane_s16(v114, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v118 = (uint16x8_t)vmulq_laneq_s16(v115, v6, 4);
  int v119 = result + 1;
  uint64_t v120 = 8 * a3;
  int16x8_t v121 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v118.i8, *(uint16x4_t *)v117.i8), *(int16x4_t *)v116.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v117, v118), v116), 2uLL);
  do
  {
    _X13 = a4 + v120;
    int16x8_t v123 = *(int16x8_t *)(a4 + v120 - 6);
    int8x16_t v124 = *(int8x16_t *)(a4 + v120 + 10);
    int16x8_t v125 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 2uLL);
    int16x8_t v126 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 4uLL);
    int16x8_t v127 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 6uLL);
    int16x8_t v128 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 8uLL);
    int16x8_t v129 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 0xAuLL);
    int16x8_t v130 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 0xCuLL);
    int16x8_t v131 = (int16x8_t)vextq_s8((int8x16_t)v123, v124, 0xEuLL);
    int16x8_t v132 = vmlaq_s16(vmulq_s16(v123, v16), v125, v18);
    v125.i64[0] = 0x38000000380000;
    v125.i64[1] = 0x38000000380000;
    v133.i64[0] = 0x38000000380000;
    v133.i64[1] = 0x38000000380000;
    int32x4_t v134 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v125, *(int16x4_t *)v40.i8, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v55.i8, *(int16x4_t *)v27.i8, 1);
    int32x4_t v135 = vmlal_high_lane_s16(vmlal_high_lane_s16(v133, v40, *(int16x4_t *)v27.i8, 0), v55, *(int16x4_t *)v27.i8, 1);
    int16x8_t v40 = v55;
    int16x8_t v55 = v68;
    int16x8_t v68 = v81;
    int16x8_t v81 = v94;
    int16x8_t v94 = v107;
    int16x8_t v107 = v121;
    __asm { PRFM            #0, [X13,#0x28] }
    _X13 = a4 + 16 * a3 - 6;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    int16x8_t v140 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v132, v126, v19), v129, v21), v130, v22), v131, v24);
    uint16x8_t v141 = (uint16x8_t)vmulq_s16(v127, v25);
    uint16x8_t v142 = (uint16x8_t)vmulq_s16(v128, v37);
    int32x4_t v143 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v142.i8, *(uint16x4_t *)v141.i8);
    int32x4_t v144 = (int32x4_t)vaddl_high_u16(v141, v142);
    int32x4_t v145 = vaddw_s16(v143, *(int16x4_t *)v140.i8);
    int32x4_t v146 = vaddw_high_s16(v144, v140);
    *(int16x4_t *)v144.i8 = vshrn_n_s32(v145, 2uLL);
    int32x4_t v147 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v134, *(int16x4_t *)v55.i8, *(int16x4_t *)v27.i8, 2), *(int16x4_t *)v68.i8, *(int16x4_t *)v27.i8, 3), *(int16x4_t *)v81.i8, v27, 4), *(int16x4_t *)v94.i8, v27, 5), *(int16x4_t *)v107.i8, v27, 6), *(int16x4_t *)v144.i8, v27,
             7);
    int16x8_t v121 = vshrn_high_n_s32(*(int16x4_t *)v144.i8, v146, 2uLL);
    *a6 = vshrn_high_n_s32(vshrn_n_s32(v147, 6uLL), vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v135, v55, *(int16x4_t *)v27.i8, 2), v68, *(int16x4_t *)v27.i8, 3), v81, v27, 4), v94, v27, 5), v107, v27, 6),
              vshrn_n_s32(v146, 2uLL),
              v27,
              7),
            6uLL);
    --v119;
    a4 += 2 * a3;
    a6 = (int16x8_t *)((char *)a6 + 2 * a5);
  }
  while (v119 > 1);
  return result;
}

uint64_t sub_1BBA334C0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    v12 += 8;
    uint64_t result = sub_1BBA32B98(a1, v11, a3, v12 + a4, a5, a6++);
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1BBA3353C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA3306C(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1BBA335BC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA32B98(a1, a2, a3, a4, a5, a6);

  return sub_1BBA32B98(a1, v11, a3, a4 + 8, a5, a6 + 1);
}

uint64_t sub_1BBA33630(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA3306C(a1, a2, a3, a4, a5, a6);

  return sub_1BBA3306C(a1, v11, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1BBA336A4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[((a2 >> 16) & 3) - 1];
  _X8 = -3 * a3 + a4;
  uint8x16_t v8 = *(uint8x16_t *)(_X8 - 3);
  _X8 -= 3;
  uint8x16_t v9 = v8;
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = _X8 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(_X8 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X8 + a3);
  int8x16_t v21 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  int8x16_t v22 = v21;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  int16x8_t v27 = (int8x16_t *)((char *)_X10 + a3);
  int8x16_t v28 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  int8x16_t v29 = v28;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &v27->i8[4 * a3];
  _X10 = &v27[1].i8[15];
  int8x16_t v35 = *v27;
  _X9 = &v27->i8[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &_X9[4 * a3];
  _X10 = &_X9[a3];
  uint8x16_t v42 = *(uint8x16_t *)_X9;
  _X9 += 31;
  uint8x16_t v43 = v42;
  __asm { PRFM            #0, [X9] }
  int16x8_t v45 = (int16x8_t)vmovl_u8(qword_1BBB78B10[(a2 & 3) - 1]);
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = &_X10[4 * a3];
  _X11 = &_X10[a3];
  int8x16_t v50 = *(int8x16_t *)_X10;
  _X10 += 31;
  int8x16_t v51 = v50;
  __asm { PRFM            #0, [X10] }
  uint64_t v53 = 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X12 = &_X11[4 * a3];
  int8x16_t v57 = *(int8x16_t *)_X11;
  _X11 += 31;
  int8x16_t v58 = v57;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X12]
  }
  int v61 = result + 1;
  uint8x16_t v62 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  int8x16_t v63 = vdupq_lane_s8(v6, 2);
  uint8x8_t v64 = (uint8x8_t)vextq_s8(v63, v63, 8uLL).u64[0];
  int8x16_t v65 = vdupq_lane_s8(v6, 3);
  uint8x8_t v66 = (uint8x8_t)vextq_s8(v65, v65, 8uLL).u64[0];
  int8x16_t v67 = vdupq_lane_s8(v6, 4);
  __asm { PRFUM           #0, [X12,#0xF] }
  uint8x8_t v69 = (uint8x8_t)vextq_s8(v67, v67, 8uLL).u64[0];
  uint8x16_t v70 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  int8x16_t v71 = vdupq_lane_s8(v6, 6);
  uint8x8_t v72 = (uint8x8_t)vextq_s8(v71, v71, 8uLL).u64[0];
  int8x16_t v73 = vdupq_lane_s8(v6, 7);
  uint8x8_t v74 = (uint8x8_t)vextq_s8(v73, v73, 8uLL).u64[0];
  uint8x16_t v75 = (uint8x16_t)vdupq_lane_s8(v6, 5);
  do
  {
    uint16x8_t v76 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v70.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v62.i8);
    uint16x8_t v77 = vmull_high_u8((uint8x16_t)v22, v70);
    uint16x8_t v78 = vmull_high_u8(v9, v62);
    uint8x16_t v9 = (uint8x16_t)v22;
    int8x16_t v22 = v29;
    int8x16_t v29 = v35;
    int8x16_t v35 = (int8x16_t)v43;
    uint8x16_t v43 = (uint8x16_t)v51;
    int8x16_t v51 = v58;
    _X12 = a4 + v53;
    int8x16_t v58 = *(int8x16_t *)(a4 + v53 - 3);
    __asm { PRFUM           #0, [X12,#0x1C] }
    _X12 = a4 + 8 * a3 - 3;
    __asm { PRFM            #0, [X12] }
    int16x8_t v83 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(v76, *(uint8x8_t *)v22.i8, *(uint8x8_t *)v63.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)v35.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v51.i8, *(uint8x8_t *)v71.i8), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v75.i8), *(uint8x8_t *)v58.i8, *(uint8x8_t *)v73.i8);
    *(int16x4_t *)v77.i8 = vsub_s16(*(int16x4_t *)v77.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v78, (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v64));
    int8x16_t v84 = (int8x16_t)vmlal_u8(vmlal_u8(vmlal_u8(v77, (uint8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), v66), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), v69), (uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), v72);
    *(int16x4_t *)v84.i8 = vsub_s16(*(int16x4_t *)v84.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v43, v75), (uint8x8_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), v74));
    __asm { PRFUM           #0, [X12,#0xF] }
    *a6 = vshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_lane_s16(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 2uLL), *(int16x4_t *)v45.i8, 1), *(int16x4_t *)v83.i8, *(int16x4_t *)v45.i8, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL), *(int16x4_t *)v45.i8, 2), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 6uLL), *(int16x4_t *)v45.i8,
                      3),
                    v83,
                    v45,
                    4),
                  (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xCuLL),
                  v45,
                  6),
                (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xAuLL),
                v45,
                5),
              (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xEuLL),
              v45,
              7),
            6uLL);
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
    --v61;
    a4 += a3;
  }
  while (v61 > 1);
  return result;
}

uint64_t sub_1BBA338BC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x4_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[(a2 & 3) - 1];
  int16x8_t v7 = xmmword_1BBB78B70[((a2 >> 16) & 3) - 1];
  _X8 = (int8x8_t *)(a4 - 6 * a3);
  int16x4_t v9 = *(int16x4_t *)((char *)&_X8[-1] + 2);
  _X8 = (int8x8_t *)((char *)_X8 - 6);
  int16x4_t v10 = (int16x4_t)_X8[1];
  __asm { PRFUM           #0, [X8,#0x1E] }
  _X9 = &_X8[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X8 + 2 * a3);
  int16x4_t v20 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 2uLL), *(int16x4_t *)v6.i8, 1), v9, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 6uLL), *(int16x4_t *)v6.i8, 3), v10, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v21 = *_X9;
  int16x4_t v22 = _X9[1];
  int8x8_t v23 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v29 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 2uLL), *(int16x4_t *)v6.i8, 1), v21, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 6uLL), *(int16x4_t *)v6.i8, 3), v22, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v22, v23, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v22, v23, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v22, v23, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v30 = *_X9;
  int16x4_t v31 = _X9[1];
  int8x8_t v32 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v38 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 2uLL), *(int16x4_t *)v6.i8, 1), v30, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 6uLL), *(int16x4_t *)v6.i8, 3), v31, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v31, v32, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v31, v32, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v31, v32, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v39 = *_X9;
  int16x4_t v40 = _X9[1];
  int8x8_t v41 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v47 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v6.i8, 1), v39, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL), *(int16x4_t *)v6.i8, 3), v40, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v40, v41, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v40, v41, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v40, v41, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v48 = *_X9;
  int16x4_t v49 = _X9[1];
  int8x8_t v50 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v56 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 2uLL), *(int16x4_t *)v6.i8, 1), v48, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 6uLL), *(int16x4_t *)v6.i8, 3), v49, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v49, v50, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v49, v50, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v49, v50, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v57 = *_X9;
  int16x4_t v58 = _X9[1];
  int8x8_t v59 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v65 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 2uLL), *(int16x4_t *)v6.i8, 1), v57, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 6uLL), *(int16x4_t *)v6.i8, 3), v58, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v58, v59, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v58, v59, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v58, v59, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v66 = *_X9;
  int16x4_t v67 = _X9[1];
  int8x8_t v68 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X9 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x16]
  }
  int16x4_t v73 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 2uLL), *(int16x4_t *)v6.i8, 1), v66, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 6uLL), *(int16x4_t *)v6.i8, 3), v67, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v67, v68, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v67, v68, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v67, v68, 6uLL),
            v6,
            7),
          2uLL);
  int v74 = result + 1;
  uint64_t v75 = 8 * a3;
  do
  {
    v76.i64[0] = 0x38000000380000;
    v76.i64[1] = 0x38000000380000;
    int32x4_t v77 = vmlal_lane_s16(vmlal_lane_s16(v76, v20, *(int16x4_t *)v7.i8, 0), v29, *(int16x4_t *)v7.i8, 1);
    int16x4_t v20 = v29;
    int16x4_t v29 = v38;
    int16x4_t v38 = v47;
    int16x4_t v47 = v56;
    int16x4_t v56 = v65;
    _X13 = a4 + v75;
    int16x4_t v79 = *(int16x4_t *)(a4 + v75 + 2);
    __asm { PRFM            #0, [X13,#0x18] }
    int16x4_t v65 = v73;
    _X13 = a4 + 16 * a3 - 6;
    __asm { PRFM            #0, [X13] }
    int16x4_t v73 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v79, 2uLL), *(int16x4_t *)v6.i8, 1), *(int16x4_t *)(a4 + v75 - 6), *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v79, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v79, 6uLL), *(int16x4_t *)v6.i8,
                      3),
                    v79,
                    v6,
                    4),
                  (int16x4_t)vext_s8((int8x8_t)v79, *(int8x8_t *)(a4 + v75 + 10), 2uLL),
                  v6,
                  5),
                (int16x4_t)vext_s8((int8x8_t)v79, *(int8x8_t *)(a4 + v75 + 10), 4uLL),
                v6,
                6),
              (int16x4_t)vext_s8((int8x8_t)v79, *(int8x8_t *)(a4 + v75 + 10), 6uLL),
              v6,
              7),
            2uLL);
    __asm { PRFUM           #0, [X13,#0x16] }
    *a6 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v77, v29, *(int16x4_t *)v7.i8, 2), v38, *(int16x4_t *)v7.i8, 3), v47, v7, 4), v56, v7, 5), v65, v7, 6), v73, v7, 7), 6uLL);
    --v74;
    a4 += 2 * a3;
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v74 > 1);
  return result;
}

double sub_1BBA33C18(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA33CC4(a1, a2, a3, a4, a5, a6);
  sub_1BBA33CC4(a1, v11, a3, a4 + 16, a5, a6 + 2);
  sub_1BBA33CC4(a1, v11, a3, a4 + 32, a5, a6 + 4);

  *(void *)&double result = sub_1BBA33CC4(a1, v11, a3, a4 + 48, a5, a6 + 6).u64[0];
  return result;
}

uint8x16_t sub_1BBA33CC4(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[((a2 >> 16) & 3) - 1];
  _X8 = (_OWORD *)(a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  int16x4_t v9 = (uint8x16_t *)((char *)_X8 + a3);
  uint8x16_t v10 = *(uint8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  uint8x16_t v11 = v10;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = &v9->i8[4 * a3];
  _X9 = &v9[1].i8[15];
  uint8x16_t v21 = *v9;
  _X10 = &v9->i8[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &_X10[4 * a3];
  _X9 = &_X10[a3];
  uint8x16_t v28 = *(uint8x16_t *)_X10;
  _X10 += 31;
  uint8x16_t v29 = v28;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &_X9[4 * a3];
  uint8x8_t v34 = (uint8x16_t *)&_X9[a3];
  uint8x16_t v35 = *(uint8x16_t *)_X9;
  _X9 += 31;
  uint8x16_t v36 = v35;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = &v34->i8[4 * a3];
  _X9 = &v34[1].i8[15];
  uint8x16_t result = *v34;
  _X10 = &v34->i8[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = &_X10[4 * a3];
  _X11 = &_X10[a3];
  uint8x16_t v49 = *(uint8x16_t *)_X10;
  _X10 += 31;
  uint8x16_t v50 = v49;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = &_X11[4 * a3];
  uint8x16_t v55 = *(uint8x16_t *)_X11;
  _X11 += 31;
  uint8x16_t v56 = v55;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  int v60 = a1 + 2;
  uint64_t v61 = 2 * a5;
  uint8x16_t v62 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  uint8x16_t v63 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  uint8x16_t v64 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  uint8x16_t v65 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  uint8x16_t v66 = (uint8x16_t)vdupq_lane_s8(v6, 4);
  uint8x16_t v67 = (uint8x16_t)vdupq_lane_s8(v6, 5);
  uint8x16_t v68 = (uint8x16_t)vdupq_lane_s8(v6, 6);
  uint8x16_t v69 = (uint8x16_t)vdupq_lane_s8(v6, 7);
  do
  {
    uint16x8_t v70 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v63.i8), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v62.i8);
    uint16x8_t v71 = vmlsl_high_u8(vmull_high_u8(v29, v63), v21, v62);
    uint16x8_t v72 = vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v63.i8), *(uint8x8_t *)v11.i8, *(uint8x8_t *)v62.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v64.i8);
    uint16x8_t v73 = vmlsl_high_u8(vmlsl_high_u8(vmull_high_u8(v21, v63), v11, v62), v29, v64);
    uint8x16_t v11 = v29;
    uint8x16_t v29 = result;
    uint16x8_t v74 = vmlal_u8(v72, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v65.i8);
    uint16x8_t v75 = vmlal_high_u8(v73, v36, v65);
    uint16x8_t v76 = vmlsl_u8(v70, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v64.i8);
    uint16x8_t v77 = vmlsl_high_u8(v71, v36, v64);
    uint8x16_t v21 = v36;
    uint8x16_t v36 = v50;
    uint8x16_t result = v56;
    _X15 = a4 + 4 * a3 + 31;
    uint8x16_t v50 = *(uint8x16_t *)(a4 + 4 * a3);
    __asm { PRFM            #0, [X15] }
    _X15 = a4 + 8 * a3;
    __asm
    {
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#0xF]
    }
    _X15 = a4 + 5 * a3 + 31;
    uint8x16_t v56 = *(uint8x16_t *)(a4 + 5 * a3);
    __asm { PRFM            #0, [X15] }
    _X15 = a4 + 9 * a3;
    __asm
    {
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#0xF]
    }
    *a6 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v74, *(uint8x8_t *)v29.i8, *(uint8x8_t *)v66.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v68.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v69.i8);
    a6[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v75, v29, v66), result, v68), v36, v67), v50, v69);
    int32x4_t v88 = (uint16x8_t *)((char *)a6 + v61);
    *int32x4_t v88 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(v76, *(uint8x8_t *)v29.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v66.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v68.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v56.i8, *(uint8x8_t *)v69.i8);
    v88[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(vmlal_high_u8(v77, v29, v65), v36, v66), v50, v68), result, v67), v56, v69);
    v60 -= 2;
    a4 += 2 * a3;
    a6 = (uint16x8_t *)((char *)a6 + v61 + v61);
  }
  while (v60 > 2);
  return result;
}

void sub_1BBA33EB0(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    sub_1BBA33F30(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x38);
}

int16x8_t sub_1BBA33F30(int a1, unint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[((a2 >> 16) & 3) - 1];
  _X8 = &a4->i8[-6 * a3];
  int16x8_t v8 = *(int16x8_t *)_X8;
  _X8 += 30;
  int16x8_t v9 = v8;
  _X10 = &a4->i8[-4 * a3];
  int16x8_t v11 = *(int16x8_t *)_X10;
  _X10 += 30;
  int16x8_t v12 = v11;
  _X11 = &a4->i8[-2 * a3];
  int16x8_t v14 = *(int16x8_t *)_X11;
  _X11 += 30;
  int16x8_t result = v14;
  _X12 = &a4[1].i8[14];
  int16x8_t v17 = *a4;
  _X13 = &a4->i8[2 * a3];
  int16x8_t v19 = *(int16x8_t *)_X13;
  _X13 += 30;
  int16x8_t v20 = v19;
  _X14 = &a4->i8[4 * a3];
  int16x8_t v22 = *(int16x8_t *)_X14;
  _X14 += 30;
  int16x8_t v23 = v22;
  _X15 = &a4->i8[6 * a3];
  int16x8_t v25 = *(int16x8_t *)_X15;
  _X15 += 30;
  int16x8_t v26 = v25;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X10]
    PRFM            #0, [X11]
    PRFM            #0, [X12]
    PRFM            #0, [X13]
  }
  int16x8_t v36 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  int16x8_t v37 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  int16x8_t v38 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  int16x8_t v39 = vdupq_laneq_s16(v6, 5);
  int16x8_t v40 = vdupq_laneq_s16(v6, 6);
  __asm { PRFM            #0, [X14] }
  int16x8_t v42 = vdupq_laneq_s16(v6, 7);
  int v43 = a1 + 2;
  __asm { PRFM            #0, [X15] }
  int16x8_t v45 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  int16x8_t v46 = vdupq_laneq_s16(v6, 4);
  do
  {
    int16x8_t v47 = result;
    int16x8_t v48 = v17;
    int16x8_t result = v20;
    int16x8_t v17 = v23;
    int16x8_t v20 = v26;
    _X16 = (uint64_t)&a4[1].i64[a3 + 1] + 6;
    int16x8_t v23 = *(int16x8_t *)((char *)a4 + 8 * a3);
    __asm { PRFM            #0, [X16] }
    _X17 = (uint64_t)&a4[1].i64[1] + 10 * a3 + 6;
    int16x8_t v26 = *(int16x8_t *)((char *)a4 + 10 * a3);
    __asm { PRFM            #0, [X17] }
    _X16 = &a4->i8[18 * a3];
    _X17 = &a4->i8[20 * a3];
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X16,#0xE]
      PRFUM           #0, [X17,#0xE]
    }
    int16x8_t v59 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v40), v17, v39), v47, v38), v12, v37), v9, v36);
    uint16x8_t v60 = (uint16x8_t)vmulq_s16(v48, v45);
    uint16x8_t v61 = (uint16x8_t)vmulq_s16(result, v46);
    int32x4_t v62 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v60.i8, *(uint16x4_t *)v61.i8);
    int16x8_t v63 = vmlaq_s16(v59, v23, v42);
    int32x4_t v64 = (int32x4_t)vaddl_high_u16(v60, v61);
    int16x8_t v65 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v39), v48, v38), v47, v37), v12, v36);
    int32x4_t v66 = vaddw_s16(v62, *(int16x4_t *)v63.i8);
    int16x8_t v67 = vmlaq_s16(vmlaq_s16(v65, v23, v40), v26, v42);
    uint16x8_t v68 = (uint16x8_t)vmulq_s16(result, v45);
    uint16x8_t v69 = (uint16x8_t)vmulq_s16(v17, v46);
    *(int16x4_t *)v66.i8 = vadd_s16(vshrn_n_s32(v66, 2uLL), (int16x4_t)0xE000E000E000E000);
    v66.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16(v64, v63), 2uLL), (int16x4_t)0xE000E000E000E000);
    *a6 = v66;
    *(int16x4_t *)v66.i8 = vadd_s16(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v68.i8, *(uint16x4_t *)v69.i8), *(int16x4_t *)v67.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
    v66.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16((int32x4_t)vaddl_high_u16(v68, v69), v67), 2uLL), (int16x4_t)0xE000E000E000E000);
    *(int32x4_t *)((char *)a6 + 2 * a5) = v66;
    a6 = (int32x4_t *)((char *)a6 + 4 * a5);
    v43 -= 2;
    a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    int16x8_t v12 = v48;
    int16x8_t v9 = v47;
  }
  while (v43 > 2);
  return result;
}

double sub_1BBA340DC(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA33CC4(a1, a2, a3, a4, a5, a6);

  *(void *)&double result = sub_1BBA33CC4(a1, v11, a3, a4 + 16, a5, a6 + 2).u64[0];
  return result;
}

void sub_1BBA34150(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    sub_1BBA33F30(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x18);
}

double sub_1BBA341D0(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA33F30(a1, a2, a3, a4, a5, a6);

  *(void *)&double result = sub_1BBA33F30(a1, v11, a3, a4 + 1, a5, a6 + 1).u64[0];
  return result;
}

uint16x8_t *sub_1BBA34244(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[((a2 >> 16) & 3) - 1];
  _X8 = (void *)(a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (void *)((char *)_X8 + a3);
  uint8x8_t v10 = *(uint8x8_t *)_X8;
  _X8 = (void *)((char *)_X8 + 15);
  uint8x8_t v11 = v10;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (void *)((char *)_X10 + a3);
  uint8x8_t v21 = *(uint8x8_t *)_X10;
  _X10 = (void *)((char *)_X10 + 15);
  uint8x8_t v22 = v21;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (void *)((char *)_X9 + a3);
  uint8x8_t v28 = *(uint8x8_t *)_X9;
  _X9 = (void *)((char *)_X9 + 15);
  uint8x8_t v29 = v28;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (void *)((char *)_X10 + a3);
  uint8x8_t v35 = *(uint8x8_t *)_X10;
  _X10 = (void *)((char *)_X10 + 15);
  uint8x8_t v36 = v35;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (void *)((char *)_X9 + a3);
  uint8x8_t v42 = *(uint8x8_t *)_X9;
  _X9 = (void *)((char *)_X9 + 15);
  uint8x8_t v43 = v42;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (void *)((char *)_X10 + a3);
  uint8x8_t v49 = *(uint8x8_t *)_X10;
  _X10 = (void *)((char *)_X10 + 15);
  uint8x8_t v50 = v49;
  uint64_t v51 = 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X13 = (char *)_X11 + 4 * a3;
  uint8x8_t v56 = *(uint8x8_t *)_X11;
  _X11 = (void *)((char *)_X11 + 15);
  uint8x8_t v57 = v56;
  __asm { PRFM            #0, [X11] }
  int v59 = a1 + 4;
  uint64_t v60 = 11 * a3;
  uint64_t v61 = 8 * a3;
  uint64_t v62 = 7 * a3;
  __asm
  {
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  uint64_t v65 = 5 * a3;
  uint64_t v66 = 10 * a3;
  uint8x8_t v67 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint64_t v68 = 6 * a3;
  uint64_t v69 = 2 * a5;
  uint8x8_t v70 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint64_t v71 = 9 * a3;
  uint8x8_t v72 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v73 = (uint8x8_t)vdup_lane_s8(v6, 3);
  uint8x8_t v74 = (uint8x8_t)vdup_lane_s8(v6, 4);
  uint8x8_t v75 = (uint8x8_t)vdup_lane_s8(v6, 5);
  uint8x8_t v76 = (uint8x8_t)vdup_lane_s8(v6, 6);
  uint8x8_t v77 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    uint16x8_t v78 = vmlsl_u8(vmull_u8(v22, v67), v11, v70);
    uint8x8_t v11 = v43;
    _X1 = a4 + v51 + 15;
    uint8x8_t v80 = *(uint8x8_t *)(a4 + v51);
    __asm { PRFM            #0, [X1] }
    _X1 = a4 + v61;
    __asm
    {
      PRFM            #0, [X1]
      PRFUM           #0, [X1,#7]
    }
    uint16x8_t v85 = vmlal_u8(vmlal_u8(vmlsl_u8(v78, v29, v72), v36, v73), v43, v74);
    uint16x8_t v86 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v29, v67), v22, v70), v36, v72), v43, v73);
    uint16x8_t v87 = vmlsl_u8(vmlsl_u8(vmull_u8(v36, v67), v29, v70), v43, v72);
    uint16x8_t v88 = vmull_u8(v43, v67);
    _X1 = a4 + v65 + 15;
    uint8x8_t v43 = *(uint8x8_t *)(a4 + v65);
    _X2 = a4 + v71;
    _X4 = (void *)(a4 + v68);
    _X6 = a4 + v66;
    _X7 = (void *)(a4 + v62);
    _X19 = a4 + v60;
    a4 += v51;
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X2]
      PRFUM           #0, [X2,#7]
    }
    uint16x8_t v98 = vmlsl_u8(vmlal_u8(v85, v57, v76), v50, v75);
    uint16x8_t v99 = vmlal_u8(v86, v50, v74);
    uint16x8_t v100 = vmlal_u8(v87, v50, v73);
    uint16x8_t v101 = vmlsl_u8(vmlsl_u8(v88, v36, v70), v50, v72);
    uint8x8_t v22 = v50;
    uint8x8_t v102 = *(uint8x8_t *)_X4;
    _X4 = (void *)((char *)_X4 + 15);
    uint8x8_t v50 = v102;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X6]
      PRFUM           #0, [X6,#7]
    }
    uint16x8_t v106 = vmlsl_u8(vmlal_u8(v99, v80, v76), v57, v75);
    uint16x8_t v107 = vmlal_u8(v100, v57, v74);
    uint16x8_t v108 = vmlal_u8(v101, v57, v73);
    uint8x8_t v29 = v57;
    uint8x8_t v109 = *(uint8x8_t *)_X7;
    _X7 = (void *)((char *)_X7 + 15);
    uint8x8_t v57 = v109;
    __asm
    {
      PRFM            #0, [X7]
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#7]
    }
    *a6 = vmlsl_u8(v98, v80, v77);
    *(uint16x8_t *)((char *)a6 + v69) = vmlsl_u8(v106, v43, v77);
    v113 = (uint16x8_t *)((char *)a6 + v69 + v69);
    uint16x8_t *v113 = vmlsl_u8(vmlsl_u8(vmlal_u8(v107, v43, v76), v80, v75), v50, v77);
    double result = (uint16x8_t *)((char *)v113 + v69);
    *double result = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v108, v80, v74), v50, v76), v43, v75), v109, v77);
    v59 -= 4;
    a6 = (uint16x8_t *)((char *)result + v69);
    uint8x8_t v36 = v80;
  }
  while (v59 > 4);
  return result;
}

int16x4_t *sub_1BBA34484(int a1, unint64_t a2, uint64_t a3, uint8x8_t *a4, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v7 = (int8x8_t)qword_1BBB78B10[((a2 >> 16) & 3) - 1];
  _X8 = (uint8x8_t *)((char *)a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X8 + a3);
  uint8x8_t v11 = *_X8;
  _X8 = (uint8x8_t *)((char *)_X8 + 15);
  uint8x8_t v12 = v11;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  uint8x8_t v22 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  uint8x8_t v23 = v22;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X9 + a3);
  uint8x8_t v29 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  uint8x8_t v30 = v29;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  uint8x8_t v36 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  uint8x8_t v37 = v36;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X9 + a3);
  uint8x8_t v43 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  uint8x8_t v44 = v43;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (uint8x8_t *)((char *)_X10 + a3);
  uint8x8_t v50 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  uint8x8_t v51 = v50;
  uint64_t v52 = 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X13 = (char *)_X11 + 4 * a3;
  uint8x8_t v57 = *_X11;
  _X11 = (uint8x8_t *)((char *)_X11 + 15);
  uint8x8_t v58 = v57;
  __asm { PRFM            #0, [X11] }
  int v60 = a1 + 4;
  uint64_t v61 = 11 * a3;
  uint64_t v62 = a3;
  uint64_t v63 = 7 * a3;
  __asm
  {
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  uint64_t v66 = 5 * a3;
  uint64_t v67 = 10 * a3;
  uint8x8_t v68 = (uint8x8_t)vdup_lane_s8(v7, 1);
  uint64_t v69 = 6 * a3;
  uint64_t v70 = 2 * a5;
  uint8x8_t v71 = (uint8x8_t)vdup_lane_s8(v7, 0);
  uint64_t v72 = 9 * a3;
  uint8x8_t v73 = (uint8x8_t)vdup_lane_s8(v7, 2);
  uint8x8_t v74 = (uint8x8_t)vdup_lane_s8(v7, 3);
  uint8x8_t v75 = (uint8x8_t)vdup_lane_s8(v7, 4);
  uint8x8_t v76 = (uint8x8_t)vdup_lane_s8(v7, 5);
  uint8x8_t v77 = (uint8x8_t)vdup_lane_s8(v7, 6);
  uint8x8_t v78 = (uint8x8_t)vdup_lane_s8(v7, 7);
  do
  {
    _X2 = &a4[v62];
    _X0 = (uint8x8_t *)((char *)a4 + v66);
    _X4 = (char *)a4 + v72;
    _X1 = (uint8x8_t *)((char *)a4 + v69);
    _X7 = (char *)a4 + v67;
    _X6 = (uint8x8_t *)((char *)a4 + v63);
    _X20 = (char *)a4 + v61;
    a4 = (uint8x8_t *)((char *)a4 + v52);
    uint16x8_t v86 = vmull_u8(v23, v68);
    uint16x8_t v87 = vmull_u8(v37, v68);
    uint16x8_t v88 = vmull_u8(v37, v71);
    *(int16x4_t *)v86.i8 = vsub_s16(*(int16x4_t *)v86.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v12, v71), v30, v73));
    uint16x8_t v89 = vmlal_u8(v86, v37, v74);
    int16x4_t v90 = (int16x4_t)vmlal_u8(vmull_u8(v23, v71), v37, v73).u64[0];
    _X19 = (char *)&a4[1] + 7;
    uint8x8_t v37 = *a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFM            #0, [X2]
      PRFUM           #0, [X2,#7]
    }
    int16x4_t v95 = (int16x4_t)vmull_u8(v44, v68).u64[0];
    uint16x8_t v96 = vmlal_u8(v89, v44, v75);
    *(int16x4_t *)v6.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmull_u8(v30, v68), v90);
    uint16x8_t v97 = vmlal_u8(v6, v44, v74);
    int16x4_t v98 = (int16x4_t)vmlal_u8(vmull_u8(v30, v71), v44, v73).u64[0];
    uint8x8_t v99 = *_X0;
    _X0 = (uint8x8_t *)((char *)_X0 + 15);
    uint8x8_t v100 = v99;
    uint8x8_t v12 = v44;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X4]
      PRFUM           #0, [X4,#7]
    }
    uint16x8_t v104 = vmull_u8(v51, v76);
    uint16x8_t v105 = vmlal_u8(v97, v51, v75);
    *(int16x4_t *)v87.i8 = vsub_s16(*(int16x4_t *)v87.i8, v98);
    uint16x8_t v106 = vmlal_u8(v87, v51, v74);
    uint16x8_t v107 = vmlal_u8(v88, v51, v73);
    uint8x8_t v23 = v51;
    uint8x8_t v108 = *_X1;
    _X1 = (uint8x8_t *)((char *)_X1 + 15);
    uint8x8_t v51 = v108;
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#7]
    }
    uint16x8_t v112 = vmull_u8(v58, v76);
    v96.i64[0] = vmlal_u8(v96, v58, v77).u64[0];
    uint16x8_t v113 = vmlal_u8(v106, v58, v75);
    *(int16x4_t *)v107.i8 = vsub_s16(v95, *(int16x4_t *)v107.i8);
    uint16x8_t v114 = vmlal_u8(v107, v58, v74);
    uint8x8_t v30 = v58;
    uint8x8_t v115 = *_X6;
    _X6 = (uint8x8_t *)((char *)_X6 + 15);
    uint8x8_t v58 = v115;
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#7]
    }
    uint16x8_t v119 = vmull_u8(*a4, v76);
    *a6 = vsub_s16(*(int16x4_t *)v96.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v104, *a4, v78));
    uint16x8_t v6 = vmlal_u8(v105, v37, v77);
    *(int16x4_t *)((char *)a6 + v70) = vsub_s16(*(int16x4_t *)v6.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v112, v100, v78));
    uint64_t v120 = (int16x4_t *)((char *)a6 + v70 + v70);
    *uint64_t v120 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v113, v100, v77), (int16x4_t)*(_OWORD *)&vmlal_u8(v119, v51, v78));
    double result = (int16x4_t *)((char *)v120 + v70);
    v60 -= 4;
    a6 = (int16x4_t *)((char *)result + v70);
    *double result = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmlal_u8(v114, v37, v75), v51, v77), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v100, v76), v115, v78));
    uint8x8_t v44 = v100;
  }
  while (v60 > 4);
  return result;
}

char *sub_1BBA346E0(int a1, unint64_t a2, uint64_t a3, int16x4_t *a4, uint64_t a5, int16x4_t *a6)
{
  _X9 = (int16x4_t *)((char *)a4 - 6 * a3);
  int16x8_t v7 = xmmword_1BBB78B70[((a2 >> 16) & 3) - 1];
  _X8 = (int16x4_t *)((char *)a4 - 4 * a3);
  int16x4_t v9 = *_X9;
  _X9 = (int16x4_t *)((char *)_X9 + 14);
  int16x4_t v10 = v9;
  int16x4_t v11 = *_X8;
  _X8 = (int16x4_t *)((char *)_X8 + 14);
  int16x4_t v12 = v11;
  _X10 = (int16x4_t *)((char *)a4 - 2 * a3);
  int16x4_t v14 = *_X10;
  _X10 = (int16x4_t *)((char *)_X10 + 14);
  int16x4_t v15 = v14;
  _X13 = (int16x4_t *)((char *)a4 + 2 * a3);
  _X11 = (char *)&a4[1] + 6;
  int16x4_t v18 = *a4;
  int16x4_t v19 = *_X13;
  _X13 = (int16x4_t *)((char *)_X13 + 14);
  int16x4_t v20 = v19;
  _X14 = (int16x4_t *)((char *)a4 + 4 * a3);
  int16x4_t v22 = *_X14;
  _X14 = (int16x4_t *)((char *)_X14 + 14);
  int16x4_t v23 = v22;
  _X15 = (int16x4_t *)((char *)a4 + 6 * a3);
  int16x4_t v25 = *_X15;
  _X15 = (int16x4_t *)((char *)_X15 + 14);
  int16x4_t v26 = v25;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFM            #0, [X10]
    PRFM            #0, [X11]
    PRFM            #0, [X13]
    PRFM            #0, [X14]
    PRFM            #0, [X15]
  }
  int v38 = a1 + 4;
  uint64_t v39 = 3 * a3;
  uint64_t v40 = 8 * a3;
  uint64_t v41 = 22 * a3;
  uint64_t v42 = 12 * a3;
  uint64_t v43 = 10 * a3;
  uint64_t v44 = 2 * a5;
  uint64_t v45 = 14 * a3;
  do
  {
    _X2 = (int16x4_t *)((char *)a4 + v43);
    _X1 = (int16x4_t *)((char *)a4 + v42);
    int16x8_t v48 = (int16x4_t *)((char *)a4 + v45);
    _X16 = (char *)a4 + v41;
    _X17 = &a4[v39];
    a4 = (int16x4_t *)((char *)a4 + v40);
    int32x4_t v51 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v7.i8, 1), v10, *(int16x4_t *)v7.i8, 0), v15, *(int16x4_t *)v7.i8, 2), v18, *(int16x4_t *)v7.i8, 3);
    int32x4_t v52 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v15, *(int16x4_t *)v7.i8, 1), v12, *(int16x4_t *)v7.i8, 0), v18, *(int16x4_t *)v7.i8, 2);
    int32x4_t v53 = vmull_lane_s16(v18, *(int16x4_t *)v7.i8, 1);
    int32x4_t v54 = vmlal_lane_s16(vmull_lane_s16(v20, *(int16x4_t *)v7.i8, 1), v18, *(int16x4_t *)v7.i8, 0);
    _X4 = (char *)&a4[1] + 6;
    int16x4_t v18 = *a4;
    __asm { PRFM            #0, [X4] }
    int32x4_t v57 = vmlal_laneq_s16(v51, v20, v7, 4);
    int32x4_t v58 = vmlal_lane_s16(v52, v20, *(int16x4_t *)v7.i8, 3);
    int32x4_t v59 = vmlal_lane_s16(vmlal_lane_s16(v53, v15, *(int16x4_t *)v7.i8, 0), v20, *(int16x4_t *)v7.i8, 2);
    int16x4_t v10 = v20;
    int16x4_t v60 = *_X2;
    _X2 = (int16x4_t *)((char *)_X2 + 14);
    int16x4_t v20 = v60;
    __asm { PRFM            #0, [X2] }
    int32x4_t v62 = vmlal_laneq_s16(v57, v23, v7, 5);
    int32x4_t v63 = vmlal_laneq_s16(v58, v23, v7, 4);
    int32x4_t v64 = vmlal_lane_s16(v59, v23, *(int16x4_t *)v7.i8, 3);
    int32x4_t v65 = vmlal_lane_s16(v54, v23, *(int16x4_t *)v7.i8, 2);
    int16x4_t v12 = v23;
    int16x4_t v66 = *_X1;
    _X1 = (int16x4_t *)((char *)_X1 + 14);
    int16x4_t v23 = v66;
    __asm { PRFM            #0, [X1] }
    int32x4_t v68 = vmlal_laneq_s16(v62, v26, v7, 6);
    int32x4_t v69 = vmlal_laneq_s16(v63, v26, v7, 5);
    int32x4_t v70 = vmlal_laneq_s16(v64, v26, v7, 4);
    int32x4_t v71 = vmlal_lane_s16(v65, v26, *(int16x4_t *)v7.i8, 3);
    int16x4_t v15 = v26;
    int16x4_t v73 = *v48;
    double result = (char *)&v48[1] + 6;
    int16x4_t v26 = v73;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X16,#6]
      PRFUM           #0, [X17,#6]
    }
    int32x4_t v79 = vmlal_laneq_s16(vmlal_laneq_s16(v69, *a4, v7, 6), v20, v7, 7);
    int32x4_t v80 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v70, *a4, v7, 5), v20, v7, 6), v23, v7, 7);
    int32x4_t v81 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v71, *a4, v7, 4), v20, v7, 5), v23, v7, 6), v73, v7, 7);
    *a6 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v68, *a4, v7, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
    *(int16x4_t *)((char *)a6 + v44) = vadd_s16(vshrn_n_s32(v79, 2uLL), (int16x4_t)0xE000E000E000E000);
    int16x8_t v82 = (int16x4_t *)((char *)a6 + v44 + v44);
    *int16x8_t v82 = vadd_s16(vshrn_n_s32(v80, 2uLL), (int16x4_t)0xE000E000E000E000);
    int16x8_t v83 = (int16x4_t *)((char *)v82 + v44);
    *int16x8_t v83 = vadd_s16(vshrn_n_s32(v81, 2uLL), (int16x4_t)0xE000E000E000E000);
    v38 -= 4;
    a6 = (int16x4_t *)((char *)v83 + v44);
  }
  while (v38 > 4);
  return result;
}

uint64_t sub_1BBA348A4(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  return sub_1BBA348C8(64, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BBA348C8(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x8_t *a7)
{
  int8x8_t v7 = (int8x8_t)qword_1BBB78B10[(a3 & 3) - 1];
  int16x8_t v8 = (int8x8_t *)(a5 - 3);
  uint64_t v9 = a5 + 5;
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v7, 0);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v7, 1);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v7, 2);
  uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v7, 3);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v7, 4);
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v7, 5);
  uint8x8_t v16 = (uint8x8_t)vdup_lane_s8(v7, 6);
  uint8x8_t v17 = (uint8x8_t)vdup_lane_s8(v7, 7);
  do
  {
    unint64_t v18 = 0;
    int8x8_t v19 = *v8;
    do
    {
      int8x16_t v20 = *(int8x16_t *)(v9 + v18);
      uint16x8_t v21 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 1uLL), v11), (uint8x8_t)v19, v10), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 2uLL), v12), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 3uLL), v13), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 4uLL), v14), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 6uLL), v16), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 5uLL), v15), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 7uLL), v17);
      int8x8_t v19 = (int8x8_t)vextq_s8(v20, v20, 8uLL).u64[0];
      *a7 = v21;
      a7[1] = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 1uLL), v11), *(uint8x8_t *)v20.i8, v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 2uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 3uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 4uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 6uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 5uLL), v15),
                (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 7uLL),
                v17);
      a7 += 2;
      v18 += 16;
    }
    while (v18 < result);
    int16x8_t v8 = (int8x8_t *)((char *)v8 + a4);
    a7 = (uint16x8_t *)((char *)a7 + 2 * (a6 - result));
    v9 += a4;
    BOOL v22 = __OFSUB__(a2--, 1);
  }
  while (!((a2 < 0) ^ v22 | (a2 == 0)));
  return result;
}

uint64_t sub_1BBA349BC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA34A3C(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1BBA34A3C(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[(a2 & 3) - 1];
  int16x8_t v7 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  int16x8_t v9 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  int16x8_t v10 = vdupq_laneq_s16(v6, 5);
  int16x8_t v11 = vdupq_laneq_s16(v6, 6);
  int16x8_t v12 = vdupq_laneq_s16(v6, 7);
  int16x8_t v13 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  int16x8_t v14 = vdupq_laneq_s16(v6, 4);
  _X8 = (int8x16_t *)(a4 - 6);
  int v16 = result + 1;
  do
  {
    int8x16_t v17 = _X8[1];
    __asm { PRFUM           #0, [X8,#0x2E] }
    _X13 = &_X8->i8[8 * a3];
    int16x8_t v24 = (int16x8_t)vextq_s8(*_X8, v17, 8uLL);
    int16x8_t v25 = (int16x8_t)vextq_s8(*_X8, v17, 0xEuLL);
    int16x8_t v26 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(*(int16x8_t *)_X8, v7), (int16x8_t)vextq_s8(*_X8, v17, 2uLL), v8), (int16x8_t)vextq_s8(*_X8, v17, 4uLL), v9), (int16x8_t)vextq_s8(*_X8, v17, 0xAuLL), v10), (int16x8_t)vextq_s8(*_X8, v17, 0xCuLL), v11);
    uint16x8_t v27 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X8, v17, 6uLL), v13);
    int16x8_t v28 = vmlaq_s16(v26, v25, v12);
    uint16x8_t v29 = (uint16x8_t)vmulq_s16(v24, v14);
    int32x4_t v30 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v27.i8);
    int32x4_t v31 = (int32x4_t)vaddl_high_u16(v27, v29);
    *(int16x4_t *)v27.i8 = vadd_s16(vshrn_n_s32(vaddw_s16(v30, *(int16x4_t *)v28.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
    v27.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16(v31, v28), 2uLL), (int16x4_t)0xE000E000E000E000);
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    *a6 = v27;
    --v16;
    _X8 = (int8x16_t *)((char *)_X8 + 2 * a3);
    a6 = (uint16x8_t *)((char *)a6 + 2 * a5);
  }
  while (v16 > 1);
  return result;
}

uint64_t sub_1BBA34B18(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  return sub_1BBA348C8(32, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BBA34B3C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA34A3C(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1BBA34BBC(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  return sub_1BBA348C8(16, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BBA34BE0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  sub_1BBA34A3C(a1, a2, a3, a4, a5, a6);

  return sub_1BBA34A3C(a1, a2, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1BBA34C54(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, uint16x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[(a2 & 3) - 1];
  int v7 = result + 1;
  uint8x8_t v8 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 3);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 4);
  uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v6, 5);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v6, 6);
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    int8x16_t v16 = *(int8x16_t *)(_X3 - 3);
    __asm { PRFUM           #0, [X3,#0x1C] }
    _X11 = _X3 + 4 * a3;
    __asm
    {
      PRFUM           #0, [X11,#-3]
      PRFUM           #0, [X11,#0xC]
    }
    *a6 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 1uLL), v9), *(uint8x8_t *)v16.i8, v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 3uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 6uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 5uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 7uLL), v15);
    a6 = (uint16x8_t *)((char *)a6 + 2 * a5);
    _X3 += a3;
    --v7;
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1BBA34D00(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, int16x4_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[(a2 & 3) - 1];
  int v7 = result + 1;
  uint8x8_t v8 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 3);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 4);
  uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v6, 5);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v6, 6);
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    int8x16_t v16 = *(int8x16_t *)(_X3 - 3);
    __asm { PRFUM           #0, [X3,#0x1C] }
    _X11 = _X3 + 4 * a3;
    __asm
    {
      PRFUM           #0, [X11,#-3]
      PRFUM           #0, [X11,#0xC]
    }
    uint8x8_t v25 = (uint8x8_t)vextq_s8(v16, v16, 3uLL).u64[0];
    uint8x8_t v26 = (uint8x8_t)vextq_s8(v16, v16, 4uLL).u64[0];
    uint8x8_t v27 = (uint8x8_t)vextq_s8(v16, v16, 5uLL).u64[0];
    uint8x8_t v28 = (uint8x8_t)vextq_s8(v16, v16, 6uLL).u64[0];
    uint8x8_t v29 = (uint8x8_t)vextq_s8(v16, v16, 7uLL).u64[0];
    int16x4_t v30 = (int16x4_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 1uLL), v9).u64[0];
    uint16x8_t v31 = vmlal_u8(vmull_u8(*(uint8x8_t *)v16.i8, v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 2uLL), v10);
    *(int16x4_t *)v31.i8 = vsub_s16(v30, *(int16x4_t *)v31.i8);
    *a6 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmlal_u8(vmlal_u8(v31, v25, v11), v26, v12), v28, v14), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v27, v13), v29, v15));
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
    _X3 += a3;
    --v7;
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1BBA34DB4(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x4_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[(a2 & 3) - 1];
  _X8 = (int8x8_t *)(a4 - 6);
  int v8 = result + 1;
  do
  {
    int16x4_t v9 = (int16x4_t)_X8[1];
    __asm { PRFUM           #0, [X8,#0x1E] }
    _X13 = &_X8[a3];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    *a6 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x4_t)*_X8, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 6uLL), *(int16x4_t *)v6.i8, 3), v9,
                      v6,
                      4),
                    (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 2uLL),
                    v6,
                    5),
                  (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 4uLL),
                  v6,
                  6),
                (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 6uLL),
                v6,
                7),
              2uLL),
            (int16x4_t)0xE000E000E000E000);
    --v8;
    _X8 = (int8x8_t *)((char *)_X8 + 2 * a3);
    a6 = (int16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v8 > 1);
  return result;
}

uint16x8_t sub_1BBA34E54(int a1, uint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, uint16x8_t *a6)
{
  int v6 = a1 + 2;
  uint64_t v7 = 2 * a5;
  do
  {
    uint8x16_t v8 = *_X3;
    uint8x16_t v9 = _X3[1];
    uint8x16_t v10 = _X3[2];
    uint8x16_t v11 = _X3[3];
    __asm { PRFUM           #0, [X3,#0x7F] }
    _X12 = &_X3->i8[4 * a3];
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0x3F]
    }
    _X12 = &_X3->i8[a3];
    uint8x16_t v21 = *(uint8x16_t *)((char *)_X3 + a3);
    uint8x16_t v22 = *(uint8x16_t *)((char *)&_X3[1] + a3);
    uint8x16_t v23 = *(uint8x16_t *)((char *)&_X3[2] + a3);
    uint8x16_t v24 = *(uint8x16_t *)((char *)&_X3[3] + a3);
    __asm { PRFUM           #0, [X12,#0x7F] }
    _X13 = &_X3->i8[5 * a3];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x3F]
    }
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    *a6 = vshll_n_u8(*(uint8x8_t *)v8.i8, 6uLL);
    a6[1] = vshll_high_n_u8(v8, 6uLL);
    a6[2] = vshll_n_u8(*(uint8x8_t *)v9.i8, 6uLL);
    a6[3] = vshll_high_n_u8(v9, 6uLL);
    a6[4] = vshll_n_u8(*(uint8x8_t *)v10.i8, 6uLL);
    a6[5] = vshll_high_n_u8(v10, 6uLL);
    a6[6] = vshll_n_u8(*(uint8x8_t *)v11.i8, 6uLL);
    a6[7] = vshll_high_n_u8(v11, 6uLL);
    uint8x8_t v29 = (uint16x8_t *)((char *)a6 + v7);
    *uint8x8_t v29 = vshll_n_u8(*(uint8x8_t *)v21.i8, 6uLL);
    v29[1] = vshll_high_n_u8(v21, 6uLL);
    v29[2] = vshll_n_u8(*(uint8x8_t *)v22.i8, 6uLL);
    v29[3] = vshll_high_n_u8(v22, 6uLL);
    uint16x8_t result = vshll_n_u8(*(uint8x8_t *)v23.i8, 6uLL);
    v29[4] = result;
    v29[5] = vshll_high_n_u8(v23, 6uLL);
    v6 -= 2;
    a6 = (uint16x8_t *)((char *)a6 + v7 + v7);
    v29[6] = vshll_n_u8(*(uint8x8_t *)v24.i8, 6uLL);
    v29[7] = vshll_high_n_u8(v24, 6uLL);
  }
  while (v6 > 2);
  return result;
}

uint64_t sub_1BBA34F14(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v6 = 0;
  v7.i64[0] = 0xE000E000E000E000;
  v7.i64[1] = 0xE000E000E000E000;
  do
  {
    int v8 = result + 2;
    uint8x16_t v9 = a4;
    uint8x16_t v10 = a6;
    do
    {
      int16x8_t v11 = *(int16x8_t *)((char *)v9 + 2 * a3);
      *uint8x16_t v10 = vaddq_s16(vshlq_n_s16(*v9, 4uLL), v7);
      *(int16x8_t *)((char *)v10 + 2 * a5) = vaddq_s16(vshlq_n_s16(v11, 4uLL), v7);
      uint8x16_t v10 = (int16x8_t *)((char *)v10 + 4 * a5);
      uint8x16_t v9 = (int16x8_t *)((char *)v9 + 4 * a3);
      v8 -= 2;
    }
    while (v8 > 2);
    ++a6;
    ++a4;
    BOOL v12 = v6 >= 0x38;
    v6 += 8;
  }
  while (!v12);
  return result;
}

uint64_t sub_1BBA34F8C(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int16x8_t *a6)
{
  v6.i64[0] = 0xE000E000E000E000;
  v6.i64[1] = 0xE000E000E000E000;
  int v7 = result + 2;
  do
  {
    int16x8_t v8 = *(int16x8_t *)((char *)a4 + 2 * a3);
    *a6 = vaddq_s16(vshlq_n_s16(*a4, 4uLL), v6);
    *(int16x8_t *)((char *)a6 + 2 * a5) = vaddq_s16(vshlq_n_s16(v8, 4uLL), v6);
    a6 = (int16x8_t *)((char *)a6 + 4 * a5);
    a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    v7 -= 2;
  }
  while (v7 > 2);
  return result;
}

uint16x8_t sub_1BBA34FDC(int a1, uint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, uint16x8_t *a6)
{
  uint64_t v6 = 3 * a3;
  int v7 = a1 + 4;
  uint64_t v8 = 2 * a3;
  uint64_t v9 = 2 * a5;
  do
  {
    uint8x16_t v10 = *_X3;
    uint8x16_t v11 = _X3[1];
    __asm { PRFUM           #0, [X3,#0x3F] }
    _X16 = &_X3[1].i8[4 * a3 + 15];
    __asm
    {
      PRFUM           #0, [X16,#-0x1F]
      PRFM            #0, [X16]
    }
    _X16 = &_X3->i8[a3];
    uint8x16_t v21 = *(uint8x16_t *)((char *)_X3 + a3);
    uint8x16_t v22 = *(uint8x16_t *)((char *)&_X3[1] + a3);
    __asm { PRFUM           #0, [X16,#0x3F] }
    _X17 = &_X3->i8[5 * a3];
    __asm
    {
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#0x1F]
    }
    _X17 = &_X3->i8[v8];
    uint8x16_t v28 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    uint8x16_t v29 = *(uint8x16_t *)((char *)&_X3[1] + v8);
    __asm { PRFUM           #0, [X17,#0x3F] }
    _X17 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#0x1F]
    }
    _X17 = &_X3->i8[v6];
    uint8x16_t v35 = *(uint8x16_t *)((char *)_X3 + 3 * a3);
    uint8x16_t v36 = *(uint8x16_t *)((char *)&_X3[1] + v6);
    __asm { PRFUM           #0, [X17,#0x3F] }
    _X17 = &_X3->i8[7 * a3];
    __asm
    {
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#0x1F]
    }
    _X3 = (uint8x16_t *)((char *)_X3 + 2 * a3 + a3 + a3);
    *a6 = vshll_n_u8(*(uint8x8_t *)v10.i8, 6uLL);
    a6[1] = vshll_high_n_u8(v10, 6uLL);
    a6[2] = vshll_n_u8(*(uint8x8_t *)v11.i8, 6uLL);
    a6[3] = vshll_high_n_u8(v11, 6uLL);
    uint64_t v41 = (uint16x8_t *)((char *)a6 + v9);
    *uint64_t v41 = vshll_n_u8(*(uint8x8_t *)v21.i8, 6uLL);
    v41[1] = vshll_high_n_u8(v21, 6uLL);
    v41[2] = vshll_n_u8(*(uint8x8_t *)v22.i8, 6uLL);
    v41[3] = vshll_high_n_u8(v22, 6uLL);
    uint64_t v42 = (uint16x8_t *)((char *)a6 + v9 + v9);
    *uint64_t v42 = vshll_n_u8(*(uint8x8_t *)v28.i8, 6uLL);
    v42[1] = vshll_high_n_u8(v28, 6uLL);
    v42[2] = vshll_n_u8(*(uint8x8_t *)v29.i8, 6uLL);
    v42[3] = vshll_high_n_u8(v29, 6uLL);
    uint16x8_t result = vshll_n_u8(*(uint8x8_t *)v35.i8, 6uLL);
    uint64_t v44 = (uint16x8_t *)((char *)v42 + v9);
    *uint64_t v44 = result;
    v44[1] = vshll_high_n_u8(v35, 6uLL);
    v7 -= 4;
    a6 = (uint16x8_t *)((char *)v44 + v9);
    v44[2] = vshll_n_u8(*(uint8x8_t *)v36.i8, 6uLL);
    v44[3] = vshll_high_n_u8(v36, 6uLL);
  }
  while (v7 > 4);
  return result;
}

uint64_t sub_1BBA350EC(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int16x8_t *a6)
{
  unint64_t v6 = 0;
  v7.i64[0] = 0xE000E000E000E000;
  v7.i64[1] = 0xE000E000E000E000;
  do
  {
    int v8 = result + 2;
    uint64_t v9 = a4;
    uint8x16_t v10 = a6;
    do
    {
      int16x8_t v11 = *(int16x8_t *)((char *)v9 + 2 * a3);
      *uint8x16_t v10 = vaddq_s16(vshlq_n_s16(*v9, 4uLL), v7);
      *(int16x8_t *)((char *)v10 + 2 * a5) = vaddq_s16(vshlq_n_s16(v11, 4uLL), v7);
      uint8x16_t v10 = (int16x8_t *)((char *)v10 + 4 * a5);
      uint64_t v9 = (int16x8_t *)((char *)v9 + 4 * a3);
      v8 -= 2;
    }
    while (v8 > 2);
    ++a6;
    ++a4;
    BOOL v12 = v6 >= 0x18;
    v6 += 8;
  }
  while (!v12);
  return result;
}

uint16x8_t sub_1BBA35164(int a1, uint64_t a2, uint64_t a3, uint8x16_t *a4, uint64_t a5, uint16x8_t *a6)
{
  int v6 = a1 + 4;
  uint64_t v7 = 2 * a5;
  do
  {
    _X16 = &a4->i8[4 * a3];
    _X17 = &a4->i8[a3];
    _X0 = &a4->i8[5 * a3];
    _X1 = &a4->i8[2 * a3];
    _X4 = &a4->i8[6 * a3];
    _X6 = &a4->i8[3 * a3];
    _X7 = &a4->i8[7 * a3];
    uint8x16_t v16 = *a4;
    _X3 = &a4[1].i8[15];
    uint8x16_t v17 = v16;
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0xF]
    }
    uint8x8_t v25 = &_X17[2 * a3];
    uint8x16_t v26 = *(uint8x16_t *)_X17;
    _X17 += 31;
    uint8x16_t v27 = v26;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X0]
      PRFUM           #0, [X0,#0xF]
    }
    uint8x16_t v31 = *(uint8x16_t *)_X1;
    _X1 += 31;
    uint8x16_t v32 = v31;
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X4]
      PRFUM           #0, [X4,#0xF]
    }
    uint8x16_t v36 = *(uint8x16_t *)_X6;
    _X6 += 31;
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0xF]
    }
    a4 = (uint8x16_t *)&v25[a3];
    *a6 = vshll_n_u8(*(uint8x8_t *)v17.i8, 6uLL);
    a6[1] = vshll_high_n_u8(v17, 6uLL);
    uint64_t v40 = (uint16x8_t *)((char *)a6 + v7);
    *uint64_t v40 = vshll_n_u8(*(uint8x8_t *)v27.i8, 6uLL);
    v40[1] = vshll_high_n_u8(v27, 6uLL);
    uint64_t v41 = (uint16x8_t *)((char *)a6 + v7 + v7);
    *uint64_t v41 = vshll_n_u8(*(uint8x8_t *)v32.i8, 6uLL);
    v41[1] = vshll_high_n_u8(v32, 6uLL);
    uint16x8_t result = vshll_n_u8(*(uint8x8_t *)v36.i8, 6uLL);
    uint64_t v43 = (uint16x8_t *)((char *)v41 + v7);
    v6 -= 4;
    a6 = (uint16x8_t *)((char *)v43 + v7);
    *uint64_t v43 = result;
    v43[1] = vshll_high_n_u8(v36, 6uLL);
  }
  while (v6 > 4);
  return result;
}

uint64_t sub_1BBA35240(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  v7.i64[0] = 0xE000E000E000E000;
  v7.i64[1] = 0xE000E000E000E000;
  char v8 = 1;
  do
  {
    char v9 = v8;
    uint8x16_t v10 = (int16x8_t *)(a4 + 2 * v6);
    int v11 = result + 2;
    BOOL v12 = (int16x8_t *)(a6 + 2 * v6);
    do
    {
      int16x8_t v13 = *(int16x8_t *)((char *)v10 + 2 * a3);
      *BOOL v12 = vaddq_s16(vshlq_n_s16(*v10, 4uLL), v7);
      *(int16x8_t *)((char *)v12 + 2 * a5) = vaddq_s16(vshlq_n_s16(v13, 4uLL), v7);
      BOOL v12 = (int16x8_t *)((char *)v12 + 4 * a5);
      uint8x16_t v10 = (int16x8_t *)((char *)v10 + 4 * a3);
      v11 -= 2;
    }
    while (v11 > 2);
    char v8 = 0;
    uint64_t v6 = 8;
  }
  while ((v9 & 1) != 0);
  return result;
}

uint16x8_t sub_1BBA352B4(int a1, uint64_t a2, uint64_t a3, uint8x8_t *a4, uint64_t a5, uint16x8_t *a6)
{
  int v6 = a1 + 2;
  do
  {
    _X13 = (char *)a4 + 4 * a3;
    char v8 = (uint8x8_t *)((char *)a4 + a3);
    _X15 = (char *)a4 + 5 * a3;
    uint8x8_t v11 = *a4;
    _X3 = (char *)&a4[1] + 7;
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)&v8[1] + 7;
    uint8x8_t v20 = *v8;
    a4 = (uint8x8_t *)((char *)v8 + a3);
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    *a6 = vshll_n_u8(v11, 6uLL);
    uint16x8_t result = vshll_n_u8(v20, 6uLL);
    *(uint16x8_t *)((char *)a6 + 2 * a5) = result;
    v6 -= 2;
    a6 = (uint16x8_t *)((char *)a6 + 4 * a5);
  }
  while (v6 > 2);
  return result;
}

uint8x8_t sub_1BBA35320(int a1, uint8x8_t result, uint8x8_t a3, uint64_t a4, uint64_t a5, __int32 *a6, uint64_t a7, double *a8)
{
  int v8 = a1 + 2;
  do
  {
    result.i32[0] = *(__int32 *)((char *)a6 + a5);
    a3.i32[0] = *a6;
    a3 = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a3), 6uLL);
    *a8 = *(double *)&a3;
    uint16x8_t result = (uint8x8_t)vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(result), 6uLL);
    *(double *)((char *)a8 + 2 * a7) = *(double *)&result;
    a6 = (__int32 *)((char *)a6 + 2 * a5);
    a8 = (double *)((char *)a8 + 4 * a7);
    v8 -= 2;
  }
  while (v8 > 2);
  return result;
}

uint64_t sub_1BBA35368(uint64_t result, uint64_t a2, uint64_t a3, int16x4_t *a4, uint64_t a5, int16x4_t *a6)
{
  int v6 = result + 2;
  do
  {
    int16x4_t v7 = *(int16x4_t *)((char *)a4 + 2 * a3);
    *a6 = vadd_s16(vshl_n_s16(*a4, 4uLL), (int16x4_t)0xE000E000E000E000);
    *(int16x4_t *)((char *)a6 + 2 * a5) = vadd_s16(vshl_n_s16(v7, 4uLL), (int16x4_t)0xE000E000E000E000);
    a6 = (int16x4_t *)((char *)a6 + 4 * a5);
    a4 = (int16x4_t *)((char *)a4 + 4 * a3);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

double sub_1BBA353B8(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA3542C(a1, a2, a3, a4, a5, a6);

  *(void *)&double result = sub_1BBA3542C(a1, v11, a3, a4 + 32, a5, a6 + 2).u64[0];
  return result;
}

uint8x16_t sub_1BBA3542C(int a1, unint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, int8x16_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  _X8 = _X3 - a3;
  uint8x16_t v8 = *(uint8x16_t *)(_X3 - a3 - 2);
  uint8x16_t v9 = *(uint8x16_t *)(_X3 - a3 + 14);
  __asm
  {
    PRFUM           #0, [X8,#0x3D]
    PRFUM           #0, [X8,#0x7E]
    PRFUM           #0, [X8,#0x9D]
  }
  _X8 = (uint8x8_t *)(_X3 - a3 + 30);
  uint8x8_t v18 = *_X8;
  __asm { PRFUM           #0, [X8,#0xF] }
  _X8 = (char *)&_X8[-16] + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  uint8x16_t result = *(uint8x16_t *)(_X3 - 2);
  uint8x16_t v24 = *(uint8x16_t *)(_X3 + 14);
  __asm
  {
    PRFUM           #0, [X3,#0x3D]
    PRFUM           #0, [X3,#0x7E]
    PRFUM           #0, [X3,#0x9D]
  }
  _X8 = _X3 + 30;
  uint8x8_t v29 = *(uint8x8_t *)(_X3 + 30);
  __asm { PRFUM           #0, [X8,#0xF] }
  _X10 = _X3 + 30 + 4 * (a3 - 32);
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#7]
  }
  _X10 = (uint8x16_t *)(_X3 + 30 + a3 - 32);
  uint8x16_t v35 = *_X10;
  uint8x16_t v36 = _X10[1];
  __asm
  {
    PRFUM           #0, [X10,#0x3F]
    PRFM            #0, [X10,#0x80]
    PRFUM           #0, [X10,#0x9F]
  }
  _X8 = (void *)(_X3 + 30 + a3);
  _X9 = (char *)_X8 + 4 * a3 - 128;
  uint8x8_t v42 = *(uint8x8_t *)_X8;
  _X8 = (void *)((char *)_X8 + 15);
  uint8x8_t v43 = v42;
  int16x4_t v44 = (int16x4_t)vmovl_u8(qword_1BBB78B30[(a2 & 7) - 1]).u64[0];
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  int v48 = a1 + 1;
  uint8x8_t v49 = a6 + 1;
  uint64_t v50 = 2 * a3;
  uint8x16_t v51 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  uint8x16_t v52 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  uint8x16_t v53 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  uint8x16_t v54 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    uint8x16_t v55 = v24;
    uint8x16_t v56 = result;
    uint8x16_t v24 = v36;
    uint8x16_t result = v35;
    uint8x8_t v57 = v29;
    uint8x8_t v29 = v43;
    _X12 = _X3 + v50;
    uint8x16_t v35 = *(uint8x16_t *)(_X3 + v50 - 2);
    uint8x16_t v36 = *(uint8x16_t *)(_X3 + v50 + 14);
    __asm
    {
      PRFUM           #0, [X12,#0x3D]
      PRFUM           #0, [X12,#0x7E]
      PRFUM           #0, [X12,#0x9D]
    }
    uint8x8_t v43 = *(uint8x8_t *)(_X3 + v50 + 30);
    _X13 = _X3 + 6 * a3 - 98;
    __asm
    {
      PRFUM           #0, [X12,#0x2D]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    int16x8_t v66 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v56.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v53.i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v51.i8), *(uint8x8_t *)v35.i8, *(uint8x8_t *)v54.i8);
    int16x8_t v67 = (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v56, v52), result, v53), v8, v51), v35, v54);
    int16x8_t v68 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v55.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v53.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v51.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v54.i8);
    int16x4_t v69 = (int16x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v67, 0xCuLL).u64[0];
    int16x4_t v70 = (int16x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL).u64[0];
    int32x4_t v71 = vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL), v44, 1), v66, v44, 2), *(int16x4_t *)v66.i8, v44, 0), v69, v44, 3);
    int32x4_t v72 = vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(v69, v44, 1), *(int16x4_t *)v67.i8, v44, 2), v66, v44, 0), v70, v44, 3);
    v66.i64[0] = vextq_s8((int8x16_t)v67, (int8x16_t)v68, 0xCuLL).u64[0];
    int32x4_t v73 = vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(v70, v44, 1), v67, v44, 2), *(int16x4_t *)v67.i8, v44, 0), *(int16x4_t *)v66.i8, v44, 3);
    int16x4_t v74 = (int16x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL).u64[0];
    int32x4_t v75 = vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v66.i8, v44, 1), *(int16x4_t *)v68.i8, v44, 2), v67, v44, 0), v74, v44, 3);
    int16x8_t v76 = (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v55, v52), v24, v53), v9, v51), v36, v54);
    int8x16_t v77 = (int8x16_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(v57, *(uint8x8_t *)v52.i8), v29, *(uint8x8_t *)v53.i8), v18, *(uint8x8_t *)v51.i8), v43, *(uint8x8_t *)v54.i8);
    int16x4_t v78 = (int16x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v76, 0xCuLL).u64[0];
    int32x4_t v79 = vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(v74, v44, 1), v68, v44, 2), *(int16x4_t *)v68.i8, v44, 0), v78, v44, 3);
    int16x4_t v80 = (int16x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL).u64[0];
    int32x4_t v81 = vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(v78, v44, 1), *(int16x4_t *)v76.i8, v44, 2), v68, v44, 0), v80, v44, 3);
    v68.i64[0] = vextq_s8((int8x16_t)v76, v77, 0xCuLL).u64[0];
    v49[-1] = vqrshrun_high_n_s16(vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(v71, 6uLL), v72, 6uLL), 6uLL), vshrn_high_n_s32(vshrn_n_s32(v73, 6uLL), v75, 6uLL), 6uLL);
    *uint8x8_t v49 = vqrshrun_high_n_s16(vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(v79, 6uLL), v81, 6uLL), 6uLL), vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(v80, v44, 1), v76, v44, 2), *(int16x4_t *)v76.i8, v44, 0), *(int16x4_t *)v68.i8, v44, 3), 6uLL), vmlsl_lane_s16(vmlsl_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v68.i8, v44, 1), *(int16x4_t *)v77.i8, v44, 2), v76, v44, 0),
                 (int16x4_t)*(_OWORD *)&vextq_s8(v77, v77, 4uLL),
                 v44,
                 3),
               6uLL),
             6uLL);
    --v48;
    uint8x8_t v49 = (int8x16_t *)((char *)v49 + a5);
    _X3 += a3;
    uint8x8_t v18 = v57;
    uint8x16_t v8 = v56;
    uint8x16_t v9 = v55;
  }
  while (v48 > 1);
  return result;
}

uint64_t sub_1BBA35690(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA35710(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1BBA35710(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6 = qword_1BBB78BA0[2 * (a2 & 7) - 2];
  int16x4_t v7 = qword_1BBB78BA0[2 * ((a2 >> 16) & 7) - 2];
  _X9 = (_OWORD *)(a4 + 2 * (-2 - a3));
  int16x8_t v10 = *(int16x8_t *)_X9;
  int8x16_t v9 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x3E] }
  uint64_t v16 = 4 * a3;
  _X9 = (char *)_X9 + 8 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  int16x8_t v20 = (int16x8_t)vextq_s8((int8x16_t)v10, v9, 4uLL);
  int16x8_t v21 = (int16x8_t)vextq_s8((int8x16_t)v10, v9, 8uLL);
  int16x8_t v22 = (int16x8_t)vextq_s8((int8x16_t)v10, v9, 0xCuLL);
  int16x8_t v23 = vdupq_lane_s16(v6, 0);
  int16x8_t v24 = vmulq_n_s16(v10, v6.i16[0]);
  int16x8_t v25 = vdupq_lane_s16(v6, 3);
  int16x8_t v26 = vmlaq_lane_s16(v24, v22, v6, 3);
  int16x8_t v27 = vdupq_lane_s16(v6, 1);
  uint16x8_t v28 = (uint16x8_t)vmulq_lane_s16(v20, v6, 1);
  int16x8_t v29 = vdupq_lane_s16(v6, 2);
  uint16x8_t v30 = (uint16x8_t)vmulq_lane_s16(v21, v6, 2);
  int16x8_t v31 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v28.i8), *(int16x4_t *)v26.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v28, v30), v26), 2uLL);
  _X9 = a4 - 4;
  int16x8_t v33 = *(int16x8_t *)(a4 - 4);
  int8x16_t v34 = *(int8x16_t *)(a4 + 12);
  __asm { PRFUM           #0, [X9,#0x3E] }
  _X10 = a4 - 4 + 8 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X10 = (_OWORD *)(a4 - 4 + 2 * a3);
  int16x8_t v40 = (int16x8_t)vextq_s8((int8x16_t)v33, v34, 4uLL);
  int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v33, v34, 8uLL);
  int16x8_t v42 = vmlaq_lane_s16(vmulq_n_s16(v33, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v33, v34, 0xCuLL), v6, 3);
  uint16x8_t v43 = (uint16x8_t)vmulq_lane_s16(v40, v6, 1);
  uint16x8_t v44 = (uint16x8_t)vmulq_lane_s16(v41, v6, 2);
  int16x8_t v45 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v43.i8), *(int16x4_t *)v42.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v43, v44), v42), 2uLL);
  int16x8_t v46 = *(int16x8_t *)_X10;
  int8x16_t v47 = *((int8x16_t *)_X10 + 1);
  __asm { PRFUM           #0, [X10,#0x3E] }
  _X10 = (char *)_X10 + 8 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  int16x8_t v52 = (int16x8_t)vextq_s8((int8x16_t)v46, v47, 4uLL);
  int16x8_t v53 = (int16x8_t)vextq_s8((int8x16_t)v46, v47, 8uLL);
  int16x8_t v54 = vmlaq_lane_s16(vmulq_n_s16(v46, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v46, v47, 0xCuLL), v6, 3);
  uint16x8_t v55 = (uint16x8_t)vmulq_lane_s16(v52, v6, 1);
  uint16x8_t v56 = (uint16x8_t)vmulq_lane_s16(v53, v6, 2);
  int16x8_t v57 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v56.i8, *(uint16x4_t *)v55.i8), *(int16x4_t *)v54.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v55, v56), v54), 2uLL);
  int v58 = result + 1;
  do
  {
    int32x4_t v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v45.i8, v7, 1), *(int16x4_t *)v31.i8, v7, 0);
    int32x4_t v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v45, v7, 1), v31, v7, 0);
    int16x8_t v31 = v45;
    int16x8_t v45 = v57;
    _X13 = a4 + v16;
    int16x8_t v62 = *(int16x8_t *)(a4 + v16 - 4);
    int8x16_t v63 = *(int8x16_t *)(a4 + v16 + 12);
    __asm { PRFUM           #0, [X13,#0x3A] }
    _X13 = a4 + 12 * a3 - 4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    int16x8_t v68 = (int16x8_t)vextq_s8((int8x16_t)v62, v63, 4uLL);
    int16x8_t v69 = (int16x8_t)vextq_s8((int8x16_t)v62, v63, 8uLL);
    int16x8_t v70 = vmlaq_s16(vmulq_s16(v62, v23), (int16x8_t)vextq_s8((int8x16_t)v62, v63, 0xCuLL), v25);
    uint16x8_t v71 = (uint16x8_t)vmulq_s16(v68, v27);
    uint16x8_t v72 = (uint16x8_t)vmulq_s16(v69, v29);
    int32x4_t v73 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v71.i8);
    int32x4_t v74 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v71, v72), v70);
    *(int16x4_t *)v70.i8 = vshrn_n_s32(vaddw_s16(v73, *(int16x4_t *)v70.i8), 2uLL);
    *(uint16x4_t *)v59.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v59, *(int16x4_t *)v45.i8, v7, 2), *(int16x4_t *)v70.i8, v7, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v59.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v60, v45, v7, 2), vshrn_n_s32(v74, 2uLL), v7, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
    int16x8_t v57 = vshrn_high_n_s32(*(int16x4_t *)v70.i8, v74, 2uLL);
    *a6 = v59;
    --v58;
    a4 += 2 * a3;
    a6 = (int32x4_t *)((char *)a6 + 2 * a5);
  }
  while (v58 > 1);
  return result;
}

uint64_t sub_1BBA358FC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA35710(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1BBA3597C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, int8x16_t *a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  int8x8_t v12 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  uint8x16_t v13 = (uint8x16_t)vdupq_lane_s8(v12, 0);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v12, 1);
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v12, 2);
  uint8x8_t v16 = (uint8x8_t)vdup_lane_s8(v12, 3);
  int16x4_t v17 = (int16x4_t)vmovl_u8(qword_1BBB78B30[((a2 >> 16) & 7) - 1]).u64[0];
  _X8 = _X3 - a3;
  int8x16_t v19 = *(int8x16_t *)(_X3 - a3 - 2);
  __asm
  {
    PRFUM           #0, [X8,#0x1D]
    PRFUM           #0, [X8,#0x3E]
    PRFUM           #0, [X8,#0x4D]
  }
  a10.i64[0] = *(void *)(_X3 - a3 + 14);
  __asm { PRFUM           #0, [X8,#0x1D] }
  _X8 = _X3 - a3 + 14 + 4 * (a3 - 16);
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  int8x16_t v31 = *(int8x16_t *)(_X3 - 2);
  __asm
  {
    PRFUM           #0, [X3,#0x1D]
    PRFUM           #0, [X3,#0x3E]
    PRFUM           #0, [X3,#0x4D]
  }
  a11.i64[0] = *(void *)(_X3 + 14);
  __asm { PRFUM           #0, [X3,#0x1D] }
  _X10 = _X3 + 14 + 4 * (a3 - 16);
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#7]
  }
  _X10 = (int8x16_t *)(_X3 + 14 + a3 - 16);
  _X11 = &_X10[4].i8[15];
  int8x16_t v41 = *_X10;
  __asm
  {
    PRFUM           #0, [X10,#0x1F]
    PRFM            #0, [X10,#0x40]
    PRFM            #0, [X11]
  }
  _X8 = (uint64_t *)(_X3 + 14 + a3);
  _X9 = (char *)_X8 + 4 * a3 - 64;
  uint64_t v47 = *_X8;
  _X8 = (uint64_t *)((char *)_X8 + 15);
  v11.i64[0] = v47;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  int16x8_t v51 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 2uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 4uLL), v15), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 6uLL), v16);
  int16x8_t v52 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, a10, 0xAuLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, a10, 0xCuLL), v15), (uint8x16_t)v19, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, a10, 0xEuLL), v16);
  int16x8_t v53 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 2uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL), v15), *(uint8x8_t *)v31.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 6uLL), v16);
  int16x8_t v54 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v31, a11, 0xAuLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, a11, 0xCuLL), v15), (uint8x16_t)v31, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, a11, 0xEuLL), v16);
  int16x8_t v55 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 2uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 4uLL), v15), *(uint8x8_t *)v41.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 6uLL), v16);
  int32x4_t v56 = (int32x4_t)vextq_s8(*_X10, v11, 0xAuLL);
  int16x8_t v57 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v56.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v11, 0xCuLL), v15), (uint8x16_t)v41, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v11, 0xEuLL), v16);
  int v58 = result + 1;
  uint64_t v59 = 2 * a3;
  uint8x8_t v60 = (uint8x8_t)vdup_lane_s8(v12, 1);
  uint8x8_t v61 = (uint8x8_t)vdup_lane_s8(v12, 3);
  do
  {
    int16x8_t v62 = v53;
    int16x8_t v53 = v55;
    _X11 = _X3 + v59;
    int8x16_t v64 = *(int8x16_t *)(_X3 + v59 - 2);
    __asm
    {
      PRFUM           #0, [X11,#0x1D]
      PRFUM           #0, [X11,#0x3E]
      PRFUM           #0, [X11,#0x4D]
    }
    v56.i64[0] = *(void *)(_X3 + v59 + 14);
    int16x8_t v55 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 2uLL), v60), (uint8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 4uLL), v15), *(uint8x8_t *)v64.i8, *(uint8x8_t *)v13.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 6uLL), v61);
    int32x4_t v68 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v54.i8, v17, 1), *(int16x4_t *)v57.i8, v17, 2), *(int16x4_t *)v52.i8, v17, 0);
    int32x4_t v69 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v54, v17, 1), v57, v17, 2), v52, v17, 0);
    int16x8_t v52 = v54;
    int16x8_t v54 = v57;
    __asm { PRFUM           #0, [X11,#0x1D] }
    _X11 = _X3 + 6 * a3 - 50;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    int16x8_t v57 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v64, (int8x16_t)v56, 0xAuLL), v60), (uint8x8_t)*(_OWORD *)&vextq_s8(v64, (int8x16_t)v56, 0xCuLL), v15), (uint8x16_t)v64, v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v64, (int8x16_t)v56, 0xEuLL), v61);
    int32x4_t v56 = vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v62, v17, 1), v53, v17, 2), v51, v17, 0), v55, v17, 3);
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v62.i8, v17, 1), *(int16x4_t *)v53.i8, v17, 2), *(int16x4_t *)v51.i8, v17, 0), *(int16x4_t *)v55.i8, v17, 3), 6uLL), v56, 6uLL), 6uLL), vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(v68, *(int16x4_t *)v57.i8, v17, 3), 6uLL), vmlsl_high_lane_s16(v69, v57, v17, 3),
              6uLL),
            6uLL);
    a6 = (int8x16_t *)((char *)a6 + a5);
    --v58;
    _X3 += a3;
    int16x8_t v51 = v62;
  }
  while (v58 > 1);
  return result;
}

uint64_t sub_1BBA35BEC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA35710(a1, a2, a3, a4, a5, a6);

  return sub_1BBA35710(a1, v11, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1BBA35C60(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  uint8x8_t v7 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v8 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 3);
  _X8 = (int8x16_t *)(a4 - a3 - 2);
  int8x16_t v12 = *_X8;
  int16x4_t v13 = (int16x4_t)vmovl_u8(qword_1BBB78B30[((a2 >> 16) & 7) - 1]).u64[0];
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X8 = &_X8->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = a4 - 2;
  int8x16_t v23 = *(int8x16_t *)(a4 - 2);
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = a4 - 2 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(a4 - 2 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  int8x16_t v30 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  int16x8_t v34 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 2uLL), v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 4uLL), v9), *(uint8x8_t *)v12.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 6uLL), v10);
  int16x8_t v35 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v9), *(uint8x8_t *)v23.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v10);
  int16x8_t v36 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 2uLL), v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 4uLL), v9), *(uint8x8_t *)v30.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 6uLL), v10);
  int v37 = result + 1;
  uint64_t v38 = 2 * a3;
  uint8x8_t v39 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v40 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X11 = a4 + v38;
    int8x16_t v42 = *(int8x16_t *)(a4 + v38 - 2);
    __asm { PRFUM           #0, [X11,#0x1D] }
    _X11 = a4 + 6 * a3 - 2;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    int32x4_t v47 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v13, 1), *(int16x4_t *)v36.i8, v13, 2), *(int16x4_t *)v34.i8, v13, 0);
    int32x4_t v48 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v35, v13, 1), v36, v13, 2), v34, v13, 0);
    int16x8_t v34 = v35;
    int16x8_t v35 = v36;
    int16x8_t v36 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 2uLL), v39), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 4uLL), v9), *(uint8x8_t *)v42.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 6uLL), v40);
    *a6 = vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(vmlsl_lane_s16(v47, *(int16x4_t *)v36.i8, v13, 3), 6uLL), vmlsl_high_lane_s16(v48, v36, v13, 3), 6uLL), 6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5);
    --v37;
    a4 += a3;
  }
  while (v37 > 1);
  return result;
}

uint64_t sub_1BBA35DD8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  int16x4_t v7 = (int16x4_t)vmovl_u8(qword_1BBB78B30[(a2 & 7) - 1]).u64[0];
  _X8 = (uint8x16_t *)(a4 - a3 - 2);
  uint8x16_t v9 = *_X8;
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X8 = &_X8->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = a4 - 2;
  int8x16_t v19 = *(int8x16_t *)(a4 - 2);
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = a4 - 2 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(a4 - 2 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  int8x16_t v26 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  int8x16_t v27 = v26;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  int v31 = result + 1;
  uint64_t v32 = 2 * a3;
  uint8x16_t v33 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  uint8x16_t v34 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  int8x16_t v35 = vdupq_lane_s8(v6, 2);
  uint8x8_t v36 = (uint8x8_t)vextq_s8(v35, v35, 8uLL).u64[0];
  int8x16_t v37 = vdupq_lane_s8(v6, 3);
  uint8x8_t v38 = (uint8x8_t)vextq_s8(v37, v37, 8uLL).u64[0];
  do
  {
    uint8x16_t v39 = (uint8x16_t)v19;
    int8x16_t v19 = v27;
    _X11 = a4 + v32;
    int8x16_t v27 = *(int8x16_t *)(a4 + v32 - 2);
    __asm { PRFUM           #0, [X11,#0x1D] }
    _X11 = a4 + 6 * a3 - 2;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    int16x8_t v45 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v33.i8), *(uint8x8_t *)v27.i8, *(uint8x8_t *)v37.i8);
    int8x16_t v46 = (int8x16_t)vmlal_u8(vmull_high_u8(v9, v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), v38);
    *(int16x4_t *)v46.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v39, v34), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), v36), *(int16x4_t *)v46.i8);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v45, v46, 0xCuLL);
    *(int16x4_t *)v47.i8 = vshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), v7, 1), v45, v7, 2), *(int16x4_t *)v45.i8, v7, 0), *(int16x4_t *)v47.i8, v7, 3), 6uLL);
    *a6 = vqrshrun_n_s16(v47, 6uLL).u32[0];
    a6 = (_DWORD *)((char *)a6 + a5);
    --v31;
    a4 += a3;
    uint8x16_t v9 = v39;
  }
  while (v31 > 1);
  return result;
}

uint64_t sub_1BBA35EFC(uint64_t result, unint64_t a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, uint16x4_t *a6)
{
  int16x4_t v6 = qword_1BBB78BA0[2 * (a2 & 7) - 2];
  int16x4_t v7 = qword_1BBB78BA0[2 * ((a2 >> 16) & 7) - 2];
  _X9 = (char *)_X3 + 2 * (-2 - a3);
  int16x4_t v9 = *(int16x4_t *)_X9;
  int16x8_t v10 = *(int16x8_t *)(_X9 + 4);
  __asm { PRFUM           #0, [X9,#0x22] }
  _X9 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x12]
  }
  int16x4_t v19 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v10.i8, v6, 1), v9, v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL), v6, 2), v10, v6, 3), 2uLL);
  __asm { PRFUM           #0, [X3,#0x1E] }
  _X10 = (uint64_t)&_X3[a3 - 1] + 4;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x12]
  }
  _X10 = (uint64_t *)((char *)&_X3[-1] + 2 * a3 + 4);
  int16x4_t v25 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X3, v6, 1), *(int16x4_t *)((char *)_X3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X3->i8, *(int8x16_t *)_X3->i8, 4uLL), v6, 2), *(int16x8_t *)_X3->i8, v6, 3), 2uLL);
  v10.i64[0] = *_X10;
  __asm { PRFUM           #0, [X10,#0x22] }
  _X10 = &_X10[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x12]
  }
  int16x4_t v30 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)((char *)_X3 + 2 * a3), v6, 1), *(int16x4_t *)v10.i8, v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&_X3->i8[2 * a3], *(int8x16_t *)&_X3->i8[2 * a3], 4uLL), v6, 2), *(int16x8_t *)&_X3->i8[2 * a3], v6, 3), 2uLL);
  int v31 = result + 1;
  do
  {
    int32x4_t v32 = vmlal_lane_s16(vmull_lane_s16(v25, v7, 1), v19, v7, 0);
    int16x4_t v19 = v25;
    int16x4_t v25 = v30;
    _X13 = (char *)_X3 + 4 * a3;
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = (char *)_X3 + 12 * a3 - 4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v30 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)((char *)_X3 + 4 * a3), v6, 1), *(int16x4_t *)((char *)_X3 + 4 * a3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&_X3->i8[4 * a3], *(int8x16_t *)&_X3->i8[4 * a3], 4uLL), v6, 2), *(int16x8_t *)&_X3->i8[4 * a3], v6, 3), 2uLL);
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v32, v25, v7, 2), v30, v7, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
    --v31;
    _X3 = (int16x4_t *)((char *)_X3 + 2 * a3);
    a6 = (uint16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v31 > 1);
  return result;
}

double sub_1BBA36050(int a1, unsigned int a2, uint64_t a3, uint8x16_t *a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA360C4(a1, a2, a3, a4, a5, a6);

  *(void *)&double result = sub_1BBA360C4(a1, v11, a3, a4 + 2, a5, a6 + 2).u64[0];
  return result;
}

uint8x16_t sub_1BBA360C4(int a1, unint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, int8x16_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  _X8 = &_X3->i8[-a3];
  uint8x16_t v9 = *(uint8x16_t *)((char *)_X3 - a3);
  uint8x16_t v8 = *(uint8x16_t *)((char *)_X3 - a3 + 16);
  __asm { PRFUM           #0, [X8,#0x3F] }
  _X8 = (uint64_t)_X3->i64 + 4 * a3 - a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  uint8x16_t v19 = *_X3;
  uint8x16_t result = _X3[1];
  __asm { PRFUM           #0, [X3,#0x3F] }
  _X8 = &_X3->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  _X8 = &_X3->i8[a3];
  uint8x16_t v26 = *(uint8x16_t *)((char *)_X3 + a3);
  uint8x16_t v25 = *(uint8x16_t *)((char *)&_X3[1] + a3);
  __asm { PRFUM           #0, [X8,#0x3F] }
  _X8 = (uint64_t)_X3->i64 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0x1F]
  }
  int v31 = a1 + 2;
  uint64_t v32 = 2 * a3;
  uint8x16_t v33 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  uint8x16_t v34 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  uint8x16_t v35 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  uint8x16_t v36 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    _X13 = &_X3->i8[v32];
    uint8x16_t v38 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    uint8x16_t v39 = *(uint8x16_t *)((char *)&_X3[1] + v32);
    __asm { PRFUM           #0, [X13,#0x3F] }
    _X13 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1F]
    }
    _X13 = (uint8x16_t *)((char *)_X3 + 3 * a3);
    _X14 = &_X3->i8[7 * a3];
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    uint16x8_t v46 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v26.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v33.i8);
    uint16x8_t v47 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v19, v34), v26, v35), v9, v33);
    uint16x8_t v48 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)result.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v33.i8);
    uint16x8_t v49 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(result, v34), v25, v35), v8, v33);
    uint16x8_t v50 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v34.i8), *(uint8x8_t *)v38.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v33.i8);
    uint16x8_t v51 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v26, v34), v38, v35), v19, v33);
    uint16x8_t v52 = vmull_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v34.i8);
    uint16x8_t v53 = vmull_high_u8(v25, v34);
    uint8x16_t v9 = v26;
    uint8x16_t v8 = v25;
    uint8x16_t v26 = *_X13;
    uint8x16_t v25 = _X13[1];
    __asm
    {
      PRFUM           #0, [X13,#0x3F]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x1F]
    }
    int16x8_t v57 = (int16x8_t)vmlsl_u8(v50, *(uint8x8_t *)_X13->i8, *(uint8x8_t *)v36.i8);
    int16x8_t v58 = (int16x8_t)vmlsl_high_u8(v51, *_X13, v36);
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(v46, *(uint8x8_t *)v38.i8, *(uint8x8_t *)v36.i8), 6uLL), (int16x8_t)vmlsl_high_u8(v47, v38, v36), 6uLL);
    a6[1] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(v48, *(uint8x8_t *)v39.i8, *(uint8x8_t *)v36.i8), 6uLL), (int16x8_t)vmlsl_high_u8(v49, v39, v36), 6uLL);
    uint64_t v59 = (int8x16_t *)((char *)a6 + a5);
    v31 -= 2;
    a6 = (int8x16_t *)((char *)a6 + a5 + a5);
    *uint64_t v59 = vqrshrun_high_n_s16(vqrshrun_n_s16(v57, 6uLL), v58, 6uLL);
    v59[1] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v52, *(uint8x8_t *)v39.i8, *(uint8x8_t *)v35.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v33.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v36.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v53, v39, v35), result, v33), v25, v36), 6uLL);
    uint8x16_t v19 = v38;
    uint8x16_t result = v39;
  }
  while (v31 > 2);
  return result;
}

void sub_1BBA3624C(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    sub_1BBA362CC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x38);
}

int16x8_t sub_1BBA362CC(int a1, unint64_t a2, uint64_t a3, int16x8_t *_X3, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6 = qword_1BBB78BA0[2 * ((a2 >> 16) & 7) - 2];
  _X8 = &_X3->i8[-2 * a3];
  int16x8_t v8 = *(int16x8_t *)_X8;
  _X8 += 30;
  int16x8_t result = v8;
  __asm { PRFM            #0, [X8] }
  int16x8_t v15 = *_X3;
  __asm { PRFUM           #0, [X3,#0x1E] }
  _X8 = &_X3->i8[2 * a3];
  int16x8_t v18 = *(int16x8_t *)_X8;
  _X8 += 30;
  int16x8_t v19 = v18;
  __asm { PRFM            #0, [X8] }
  int16x8_t v21 = vdupq_lane_s16(v6, 0);
  int16x8_t v22 = vdupq_lane_s16(v6, 3);
  int16x8_t v23 = vdupq_lane_s16(v6, 1);
  int16x8_t v24 = vdupq_lane_s16(v6, 2);
  int v25 = a1 + 2;
  do
  {
    _X15 = &_X3->i8[6 * a3];
    _X16 = &_X3->i8[14 * a3];
    _X0 = &_X3[a3];
    _X3 = (int16x8_t *)((char *)_X3 + 4 * a3);
    uint16x8_t v29 = (uint16x8_t)vmulq_s16(v15, v23);
    _X17 = &_X3[1].i8[14];
    int16x8_t v31 = *_X3;
    __asm { PRFM            #0, [X17] }
    int16x8_t v33 = vmulq_s16(result, v21);
    int16x8_t result = v19;
    uint16x8_t v34 = (uint16x8_t)vmulq_s16(v19, v24);
    uint16x8_t v35 = (uint16x8_t)vmulq_s16(v19, v23);
    int16x8_t v36 = *(int16x8_t *)_X15;
    _X15 += 30;
    int16x8_t v19 = v36;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X16]
      PRFM            #0, [X0]
      PRFUM           #0, [X16,#0xE]
      PRFUM           #0, [X0,#0xE]
    }
    int16x8_t v42 = vmlaq_s16(v33, *_X3, v22);
    int32x4_t v43 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v34.i8);
    int32x4_t v44 = (int32x4_t)vaddl_high_u16(v29, v34);
    int32x4_t v45 = vaddw_s16(v43, *(int16x4_t *)v42.i8);
    int32x4_t v46 = vaddw_high_s16(v44, v42);
    int16x8_t v47 = vmlaq_s16(vmulq_s16(v15, v21), v36, v22);
    uint16x8_t v48 = (uint16x8_t)vmulq_s16(*_X3, v24);
    int32x4_t v49 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v35.i8);
    int32x4_t v50 = (int32x4_t)vaddl_high_u16(v48, v35);
    int32x4_t v51 = vaddw_s16(v49, *(int16x4_t *)v47.i8);
    int32x4_t v52 = vaddw_high_s16(v50, v47);
    *(uint16x4_t *)v50.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v45, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v50.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v46, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *a6 = v50;
    *(uint16x4_t *)v46.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v51, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v46.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v52, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *(int32x4_t *)((char *)a6 + 2 * a5) = v46;
    a6 = (int32x4_t *)((char *)a6 + 4 * a5);
    v25 -= 2;
    int16x8_t v15 = v31;
  }
  while (v25 > 2);
  return result;
}

void sub_1BBA363F4(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    sub_1BBA362CC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x18);
}

uint8x16_t sub_1BBA36474(int a1, unint64_t a2, uint64_t a3, uint8x16_t *_X3, uint64_t a5, int8x16_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3->i64 + 4 * a3 - a3;
  _X8 = (uint64_t)&_X3[1].i64[1] - a3 + 7;
  uint8x16_t v9 = *(uint8x16_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  uint8x16_t result = *_X3;
  __asm { PRFUM           #0, [X3,#0x1F] }
  _X8 = &_X3->i8[4 * a3];
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = (uint64_t)&_X3[1].i64[1] + a3 + 7;
  uint8x16_t v23 = *(uint8x16_t *)((char *)_X3 + a3);
  _X8 = (uint64_t)_X3->i64 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  int v28 = a1 + 2;
  uint8x16_t v29 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  uint8x16_t v30 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  uint8x16_t v31 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  uint8x16_t v32 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  do
  {
    _X14 = (uint64_t)&_X3[1].i64[1] + 2 * a3 + 7;
    uint8x16_t v34 = *(uint8x16_t *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = &_X3->i8[6 * a3];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    uint16x8_t v39 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)result.i8, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v23.i8, *(uint8x8_t *)v31.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v29.i8);
    uint16x8_t v40 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(result, v30), v23, v31), v9, v29);
    uint16x8_t v41 = vmull_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v30.i8);
    uint16x8_t v42 = vmull_high_u8(v23, v30);
    uint8x16_t v9 = v23;
    _X14 = (uint64_t)&_X3[1].i64[1] + 3 * a3 + 7;
    uint8x16_t v23 = *(uint8x16_t *)((char *)_X3 + 3 * a3);
    _X15 = &_X3->i8[7 * a3];
    _X3 = (uint8x16_t *)((char *)_X3 + a3 + a3);
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#0xF]
    }
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(v39, *(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8), 6uLL), (int16x8_t)vmlsl_high_u8(v40, v34, v32), 6uLL);
    *(int8x16_t *)((char *)a6 + a5) = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v41, *(uint8x8_t *)v34.i8, *(uint8x8_t *)v31.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v23.i8, *(uint8x8_t *)v32.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v42, v34, v31), result, v29), v23, v32), 6uLL);
    a6 = (int8x16_t *)((char *)a6 + a5 + a5);
    v28 -= 2;
    uint8x16_t result = v34;
  }
  while (v28 > 2);
  return result;
}

double sub_1BBA365A8(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA362CC(a1, a2, a3, a4, a5, a6);

  *(void *)&double result = sub_1BBA362CC(a1, v11, a3, a4 + 1, a5, a6 + 1).u64[0];
  return result;
}

double sub_1BBA3661C(int a1, unint64_t a2, uint64_t a3, double *_X3, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3 + 4 * a3 - a3;
  _X8 = (uint64_t)_X3 - a3 + 15;
  uint8x8_t v9 = *(uint8x8_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  double result = *_X3;
  __asm { PRFUM           #0, [X3,#0xF] }
  _X8 = (char *)_X3 + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (uint64_t)_X3 + a3 + 15;
  uint8x8_t v23 = *(uint8x8_t *)((char *)_X3 + a3);
  _X8 = (uint64_t)_X3 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  int v28 = a1 + 2;
  uint8x8_t v29 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v30 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v31 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v32 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X14 = (uint64_t)_X3 + 2 * a3 + 15;
    double v34 = *(double *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = (char *)_X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    uint16x8_t v39 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)&result, v29), v23, v31), v9, v30);
    uint16x8_t v40 = vmull_u8(v23, v29);
    uint8x8_t v9 = v23;
    _X14 = (uint64_t)_X3 + 3 * a3 + 15;
    uint8x8_t v23 = *(uint8x8_t *)((char *)_X3 + 3 * a3);
    _X15 = (char *)_X3 + 7 * a3;
    _X3 = (double *)((char *)_X3 + a3 + a3);
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v39, *(uint8x8_t *)&v34, v32), 6uLL);
    *(int8x8_t *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v40, *(uint8x8_t *)&v34, v31), *(uint8x8_t *)&result, v30), v23, v32), 6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5 + a5);
    v28 -= 2;
    double result = v34;
  }
  while (v28 > 2);
  return result;
}

double sub_1BBA36728(int a1, unint64_t a2, uint64_t a3, double *_X3, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[((a2 >> 16) & 7) - 1];
  _X9 = (uint64_t)_X3 + 4 * a3 - a3;
  _X8 = (uint64_t)_X3 - a3 + 15;
  uint8x8_t v9 = *(uint8x8_t *)((char *)_X3 - a3);
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  double result = *_X3;
  __asm { PRFUM           #0, [X3,#0xF] }
  _X8 = (char *)_X3 + 4 * a3;
  __asm
  {
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X9 = (uint64_t)_X3 + a3 + 15;
  uint8x8_t v23 = *(uint8x8_t *)((char *)_X3 + a3);
  _X8 = (uint64_t)_X3 + 4 * a3 + a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  int v28 = a1 + 2;
  uint8x8_t v29 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v30 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v31 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v32 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    _X14 = (uint64_t)_X3 + 2 * a3 + 15;
    double v34 = *(double *)((char *)_X3 + 2 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = (char *)_X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    _X14 = (void *)((char *)_X3 + 3 * a3);
    _X15 = (char *)_X3 + 7 * a3;
    _X3 = (double *)((char *)_X3 + a3 + a3);
    uint16x8_t v41 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)&result, v29), v23, v31), v9, v30);
    uint16x8_t v42 = vmull_u8(v23, v29);
    uint8x8_t v9 = v23;
    uint8x8_t v43 = *(uint8x8_t *)_X14;
    _X14 = (void *)((char *)_X14 + 15);
    uint8x8_t v23 = v43;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v41, *(uint8x8_t *)&v34, v32), 6uLL).u32[0];
    int16x8_t v47 = (_DWORD *)((char *)a6 + a5);
    a6 = (_DWORD *)((char *)a6 + a5 + a5);
    v28 -= 2;
    *int16x8_t v47 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v42, *(uint8x8_t *)&v34, v31), *(uint8x8_t *)&result, v30), v43, v32), 6uLL).u32[0];
    double result = v34;
  }
  while (v28 > 2);
  return result;
}

int16x4_t *sub_1BBA36834(int a1, unint64_t a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, uint16x4_t *a6)
{
  _X9 = (int16x4_t *)((char *)_X3 - 2 * a3);
  int16x4_t v7 = qword_1BBB78BA0[2 * ((a2 >> 16) & 7) - 2];
  _X11 = (int16x4_t *)((char *)_X3 + 2 * a3);
  int16x4_t v9 = *_X9;
  _X9 = (int16x4_t *)((char *)_X9 + 14);
  int16x4_t v10 = v9;
  __asm { PRFM            #0, [X9] }
  int16x4_t v16 = *_X3;
  __asm { PRFUM           #0, [X3,#0xE] }
  int16x4_t v18 = *_X11;
  _X11 = (int16x4_t *)((char *)_X11 + 14);
  int16x4_t v19 = v18;
  __asm { PRFM            #0, [X11] }
  int v21 = a1 + 2;
  do
  {
    int32x4_t v22 = vmlal_lane_s16(vmull_lane_s16(v16, v7, 1), v10, v7, 0);
    _X16 = (int16x4_t *)((char *)_X3 + 6 * a3);
    _X17 = (char *)_X3 + 14 * a3;
    double result = &_X3[2 * a3];
    _X3 = (int16x4_t *)((char *)_X3 + 4 * a3);
    int32x4_t v26 = vmlal_lane_s16(vmull_lane_s16(v19, v7, 1), v16, v7, 0);
    _X15 = (char *)&_X3[1] + 6;
    int16x4_t v16 = *_X3;
    __asm { PRFM            #0, [X15] }
    int32x4_t v29 = vmlal_lane_s16(v22, v19, v7, 2);
    int16x4_t v10 = v19;
    int16x4_t v30 = *_X16;
    _X16 = (int16x4_t *)((char *)_X16 + 14);
    int16x4_t v19 = v30;
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFM            #0, [X0]
      PRFUM           #0, [X17,#6]
      PRFUM           #0, [X0,#6]
    }
    int32x4_t v36 = vmlal_lane_s16(vmlal_lane_s16(v26, *_X3, v7, 2), v30, v7, 3);
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v29, *_X3, v7, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *(uint16x4_t *)((char *)a6 + 2 * a5) = vmin_u16((uint16x4_t)vqrshrun_n_s32(v36, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    a6 = (uint16x4_t *)((char *)a6 + 4 * a5);
    v21 -= 2;
  }
  while (v21 > 2);
  return result;
}

uint64_t sub_1BBA36910(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  sub_1BBA36984(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);

  return sub_1BBA36984(a1, a2, a3, a4 + 32, a5, a6 + 2, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_1BBA36984(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  int8x8_t v13 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  uint8x8_t v14 = a6 + 1;
  int16x8_t v15 = (unint64_t *)(a4 + 30);
  int v16 = result + 1;
  uint8x16_t v17 = (uint8x16_t)vdupq_lane_s8(v13, 0);
  uint8x8_t v18 = (uint8x8_t)vdup_lane_s8(v13, 1);
  uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(v13, 2);
  uint8x8_t v20 = (uint8x8_t)vdup_lane_s8(v13, 3);
  do
  {
    int8x16_t v21 = *((int8x16_t *)v15 - 2);
    int8x16_t v22 = *((int8x16_t *)v15 - 1);
    a13.i64[0] = *v15;
    uint8x8_t v23 = (uint8x8_t)vextq_s8(v22, a13, 0xAuLL).u64[0];
    uint8x8_t v24 = (uint8x8_t)vextq_s8(v22, a13, 0xCuLL).u64[0];
    a13 = vextq_s8(v22, a13, 0xEuLL);
    v14[-1] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), v19), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 6uLL), v20), 6uLL), (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v22, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v22, 0xCuLL), v19), (uint8x16_t)v21,
                               v17),
                             (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v22, 0xEuLL),
                             v20),
                6uLL);
    *uint8x8_t v14 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 4uLL), v19), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 6uLL), v20), 6uLL), (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v23, v18), v24, v19), (uint8x16_t)v22, v17), *(uint8x8_t *)a13.i8, v20), 6uLL);
    uint8x8_t v14 = (int8x16_t *)((char *)v14 + a5);
    int16x8_t v15 = (unint64_t *)((char *)v15 + a3);
    --v16;
  }
  while (v16 > 1);
  return result;
}

uint64_t sub_1BBA36A58(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA36AD8(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1BBA36AD8(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  int16x4_t v6 = qword_1BBB78BA0[2 * (a2 & 7) - 2];
  int16x8_t v7 = vdupq_lane_s16(v6, 0);
  int16x8_t v8 = vdupq_lane_s16(v6, 3);
  int16x8_t v9 = vdupq_lane_s16(v6, 1);
  int16x8_t v10 = vdupq_lane_s16(v6, 2);
  _X8 = (int8x16_t *)(a4 - 4);
  int v12 = result + 1;
  do
  {
    int8x16_t v13 = _X8[1];
    __asm { PRFUM           #0, [X8,#0x3E] }
    _X13 = &_X8->i8[8 * a3];
    __asm { PRFM            #0, [X13] }
    int16x8_t v21 = (int16x8_t)vextq_s8(*_X8, v13, 8uLL);
    int16x8_t v22 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X8, v7), (int16x8_t)vextq_s8(*_X8, v13, 0xCuLL), v8);
    uint16x8_t v23 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X8, v13, 4uLL), v9);
    uint16x8_t v24 = (uint16x8_t)vmulq_s16(v21, v10);
    int32x4_t v25 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v23.i8);
    int32x4_t v26 = (int32x4_t)vaddl_high_u16(v23, v24);
    int32x4_t v27 = vaddw_s16(v25, *(int16x4_t *)v22.i8);
    int32x4_t v28 = vaddw_high_s16(v26, v22);
    *(uint16x4_t *)v26.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v26.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v28, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    __asm { PRFUM           #0, [X13,#0x1E] }
    *a6 = v26;
    --v12;
    _X8 = (int8x16_t *)((char *)_X8 + 2 * a3);
    a6 = (int32x4_t *)((char *)a6 + 2 * a5);
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1BBA36B84(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA36AD8(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1BBA36C04(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, double a7, double a8, double a9, double a10, double a11, uint16x8_t a12, double a13, int8x16_t a14)
{
  int8x8_t v14 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  int16x8_t v15 = (int8x16_t *)(a4 - 2);
  int v16 = result + 2;
  uint8x16_t v17 = (uint8x16_t)vdupq_lane_s8(v14, 0);
  uint8x8_t v18 = (uint8x8_t)vdup_lane_s8(v14, 1);
  uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(v14, 2);
  uint8x8_t v20 = (uint8x8_t)vdup_lane_s8(v14, 3);
  do
  {
    int8x16_t v21 = *v15;
    a12.i64[0] = v15[1].i64[0];
    int16x8_t v22 = (int8x16_t *)((char *)v15 + a3);
    a14.i64[0] = v22[1].i64[0];
    int16x8_t v23 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), v19), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 6uLL), v20);
    int16x8_t v24 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, (int8x16_t)a12, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, (int8x16_t)a12, 0xCuLL), v19), (uint8x16_t)v21, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, (int8x16_t)a12, 0xEuLL), v20);
    int16x8_t v25 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v22, *v22, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(*v22, *v22, 4uLL), v19), *(uint8x8_t *)v22->i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(*v22, *v22, 6uLL), v20);
    uint8x8_t v26 = (uint8x8_t)vextq_s8(*v22, a14, 0xAuLL).u64[0];
    uint8x8_t v27 = (uint8x8_t)vextq_s8(*v22, a14, 0xCuLL).u64[0];
    a14 = vextq_s8(*v22, a14, 0xEuLL);
    a12 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v26, v18), v27, v19), *(uint8x16_t *)v22, v17), *(uint8x8_t *)a14.i8, v20);
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16(v23, 6uLL), v24, 6uLL);
    *(int8x16_t *)((char *)a6 + a5) = vqrshrun_high_n_s16(vqrshrun_n_s16(v25, 6uLL), (int16x8_t)a12, 6uLL);
    a6 = (int8x16_t *)((char *)a6 + a5 + a5);
    v16 -= 2;
    int16x8_t v15 = (int8x16_t *)((char *)v22 + a3);
  }
  while (v16 > 2);
  return result;
}

uint64_t sub_1BBA36CE8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  sub_1BBA36AD8(a1, a2, a3, a4, a5, a6);

  return sub_1BBA36AD8(a1, a2, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1BBA36D5C(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  int v7 = result + 2;
  uint64_t v8 = 4 * a3 - 2;
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    int8x16_t v13 = *(int8x16_t *)(_X3 - 2);
    __asm { PRFUM           #0, [X3,#0x1D] }
    _X12 = _X3 + v8;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X12 = _X3 + a3;
    int8x16_t v23 = *(int8x16_t *)(_X3 + a3 - 2);
    __asm { PRFUM           #0, [X12,#0x1D] }
    _X12 = _X3 + v8 + a3;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), v11), *(uint8x8_t *)v13.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 6uLL), v12), 6uLL);
    *(int8x8_t *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v11), *(uint8x8_t *)v23.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v12), 6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5 + a5);
    v7 -= 2;
    _X3 += 2 * a3;
  }
  while (v7 > 2);
  return result;
}

uint64_t sub_1BBA36E24(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B30[(a2 & 7) - 1];
  int v7 = result + 2;
  uint64_t v8 = 4 * a3 - 2;
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 3);
  do
  {
    int8x16_t v13 = *(int8x16_t *)(_X3 - 2);
    __asm { PRFUM           #0, [X3,#0x1D] }
    _X12 = _X3 + v8;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X12 = _X3 + a3;
    int8x16_t v23 = *(int8x16_t *)(_X3 + a3 - 2);
    __asm { PRFUM           #0, [X12,#0x1D] }
    _X12 = _X3 + v8 + a3;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), v11), *(uint8x8_t *)v13.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 6uLL), v12), 6uLL).u32[0];
    *(_DWORD *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v11), *(uint8x8_t *)v23.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v12), 6uLL).u32[0];
    a6 = (_DWORD *)((char *)a6 + a5 + a5);
    v7 -= 2;
    _X3 += 2 * a3;
  }
  while (v7 > 2);
  return result;
}

uint64_t sub_1BBA36EEC(uint64_t result, char a2, uint64_t a3, int16x4_t *_X3, uint64_t a5, uint16x4_t *a6)
{
  int16x4_t v6 = qword_1BBB78BA0[2 * (a2 & 7) - 2];
  int v7 = result + 1;
  do
  {
    __asm { PRFUM           #0, [X3,#0x1E] }
    _X12 = (char *)&_X3[a3 - 1] + 4;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0x12]
    }
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X3, v6, 1), *(int16x4_t *)((char *)_X3 - 4), v6, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X3->i8, *(int8x16_t *)_X3->i8, 4uLL), v6, 2), *(int16x8_t *)_X3->i8, v6, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    --v7;
    _X3 = (int16x4_t *)((char *)_X3 + 2 * a3);
    a6 = (uint16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1BBA36F68(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11 = 0;
  unint64_t v12 = a2;
  do
  {
    uint64_t result = sub_1BBA36FE4(a1, v12, a3, a4 + v11, a5, (int8x8_t *)(a6 + v11));
    BOOL v14 = v11 >= 0x38;
    v11 += 8;
  }
  while (!v14);
  return result;
}

uint64_t sub_1BBA36FE4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[(a2 & 3) - 1];
  uint8x8_t v7 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v8 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 3);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 4);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 5);
  uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v6, 6);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v6, 7);
  int16x8_t v15 = (int16x8_t)vmovl_u8(qword_1BBB78B10[((a2 >> 16) & 3) - 1]);
  _X9 = -3 * a3 + a4;
  int8x16_t v17 = *(int8x16_t *)(_X9 - 3);
  _X9 -= 3;
  int8x16_t v18 = v17;
  __asm { PRFUM           #0, [X9,#0x1F] }
  uint64_t v24 = 4 * a3;
  _X10 = _X9 + 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0xF]
  }
  _X9 = (_OWORD *)(_X9 + a3);
  _X10 = (char *)_X9 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X9 + a3);
  int8x16_t v31 = *(int8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  int8x16_t v32 = v31;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X11 + a3);
  int8x16_t v38 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  int8x16_t v39 = v38;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X10 + a3);
  int8x16_t v45 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  int8x16_t v46 = v45;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X11 + a3);
  int8x16_t v52 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  int8x16_t v53 = v52;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X10 + a3);
  int16x8_t v59 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 1uLL), v8), *(uint8x8_t *)v18.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 7uLL),
                     v14);
  int8x16_t v60 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  int8x16_t v61 = v60;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  int16x8_t v66 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 1uLL), v8), *(uint8x8_t *)v32.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 7uLL),
                     v14);
  int8x16_t v67 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  int16x8_t v71 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 1uLL), v8), *(uint8x8_t *)v39.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 7uLL),
                     v14);
  int16x8_t v72 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 1uLL), v8), *(uint8x8_t *)v46.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 7uLL),
                     v14);
  uint16x8_t v73 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 1uLL), v8), *(uint8x8_t *)v53.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 5uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 7uLL), v14);
  int16x8_t v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 1uLL), v8), *(uint8x8_t *)v61.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 7uLL),
                     v14);
  int16x8_t v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 1uLL), v8), *(uint8x8_t *)v67.i8, v7), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 2uLL), v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 3uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 4uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 6uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 5uLL), v12),
                     (uint8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 7uLL),
                     v14);
  int v76 = result + 2;
  uint64_t v77 = 8 * a3 - 3;
  uint64_t v78 = 5 * a3;
  uint8x8_t v79 = v7;
  uint8x8_t v80 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v81 = v9;
  uint8x8_t v82 = v10;
  uint8x8_t v83 = (uint8x8_t)vdup_lane_s8(v6, 4);
  uint8x8_t v84 = (uint8x8_t)vdup_lane_s8(v6, 5);
  do
  {
    int32x4_t v85 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v15.i8, 1), *(int16x4_t *)v59.i8, *(int16x4_t *)v15.i8, 0);
    int32x4_t v86 = vmlsl_high_lane_s16(vmull_high_lane_s16(v66, *(int16x4_t *)v15.i8, 1), v59, *(int16x4_t *)v15.i8, 0);
    int16x8_t v59 = v71;
    int32x4_t v87 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 1), *(int16x4_t *)v66.i8, *(int16x4_t *)v15.i8, 0);
    int32x4_t v88 = vmlsl_high_lane_s16(vmull_high_lane_s16(v71, *(int16x4_t *)v15.i8, 1), v66, *(int16x4_t *)v15.i8, 0);
    int16x8_t v66 = v72;
    int32x4_t v89 = vmlal_lane_s16(vmlsl_lane_s16(v85, *(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 2), *(int16x4_t *)v72.i8, *(int16x4_t *)v15.i8, 3);
    int32x4_t v90 = vmlal_high_lane_s16(vmlsl_high_lane_s16(v86, v71, *(int16x4_t *)v15.i8, 2), v72, *(int16x4_t *)v15.i8, 3);
    int32x4_t v91 = vmlsl_lane_s16(v87, *(int16x4_t *)v72.i8, *(int16x4_t *)v15.i8, 2);
    int32x4_t v92 = vmlsl_high_lane_s16(v88, v72, *(int16x4_t *)v15.i8, 2);
    int16x8_t v72 = v74;
    int16x8_t v71 = (int16x8_t)v73;
    _X14 = a4 + v24;
    int8x16_t v94 = *(int8x16_t *)(a4 + v24 - 3);
    __asm { PRFUM           #0, [X14,#0x1C] }
    _X14 = a4 + v77;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = a4 + v78;
    int8x16_t v100 = *(int8x16_t *)(a4 + v78 - 3);
    __asm { PRFUM           #0, [X14,#0x1C] }
    _X14 = a4 + v77 + a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    uint8x8_t v105 = (uint8x8_t)vdup_lane_s8(v6, 6);
    uint8x8_t v106 = (uint8x8_t)vdup_lane_s8(v6, 7);
    int16x8_t v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 1uLL), v80), *(uint8x8_t *)v94.i8, v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 3uLL), v82), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 4uLL), v83), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 6uLL), v105), (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 5uLL), v84),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 7uLL),
                       v106);
    int32x4_t v107 = vmlal_laneq_s16(vmlal_laneq_s16(v89, *(int16x4_t *)v71.i8, v15, 4), *(int16x4_t *)v75.i8, v15, 6);
    int32x4_t v108 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(v90, v71, v15, 4), v75, v15, 6);
    int32x4_t v109 = vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v91, *(int16x4_t *)v71.i8, *(int16x4_t *)v15.i8, 3), *(int16x4_t *)v72.i8, v15, 4), *(int16x4_t *)v74.i8, v15, 6), *(int16x4_t *)v75.i8, v15, 5);
    int32x4_t v110 = vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v92, v71, *(int16x4_t *)v15.i8, 3), v72, v15, 4), v74, v15, 6), v75, v15, 5);
    uint16x8_t v73 = (uint16x8_t)v75;
    int16x8_t v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 1uLL), v80), *(uint8x8_t *)v100.i8, v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 3uLL), v82), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 4uLL), v83), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 6uLL), v105), (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 5uLL), v84),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 7uLL),
                       v106);
    *a6 = vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(v107, *(int16x4_t *)v72.i8, v15, 5), *(int16x4_t *)v74.i8, v15, 7), 6uLL), vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(v108, v72, v15, 5), v74, v15, 7), 6uLL), 6uLL);
    *(int8x8_t *)((char *)a6 + a5) = vqrshrun_n_s16(vshrn_high_n_s32(vshrn_n_s32(vmlsl_laneq_s16(v109, *(int16x4_t *)v75.i8, v15, 7), 6uLL), vmlsl_high_laneq_s16(v110, v75, v15, 7), 6uLL), 6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5 + a5);
    v76 -= 2;
    a4 += 2 * a3;
  }
  while (v76 > 2);
  return result;
}

uint64_t sub_1BBA3743C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA374BC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1BBA374BC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[(a2 & 3) - 1];
  _X8 = (int8x16_t *)(a4 - 6 * a3);
  int16x8_t v8 = *(int16x8_t *)((char *)&_X8[-1] + 10);
  _X8 = (int8x16_t *)((char *)_X8 - 6);
  int8x16_t v9 = _X8[1];
  int16x8_t v10 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 2uLL);
  int16x8_t v11 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 4uLL);
  int16x8_t v12 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 6uLL);
  int16x8_t v13 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 8uLL);
  int16x8_t v14 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xAuLL);
  int16x8_t v15 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xCuLL);
  int16x8_t v16 = (int16x8_t)vextq_s8((int8x16_t)v8, v9, 0xEuLL);
  int16x8_t v17 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  int16x8_t v18 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  int16x8_t v19 = vmlaq_lane_s16(vmulq_n_s16(v8, v6.i16[0]), v10, *(int16x4_t *)v6.i8, 1);
  int16x8_t v20 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  int16x8_t v21 = vmlaq_lane_s16(v19, v11, *(int16x4_t *)v6.i8, 2);
  int16x8_t v22 = vdupq_laneq_s16(v6, 5);
  int16x8_t v23 = vmlaq_laneq_s16(v21, v14, v6, 5);
  int16x8_t v24 = vdupq_laneq_s16(v6, 6);
  int16x8_t v25 = vmlaq_laneq_s16(v23, v15, v6, 6);
  int16x8_t v26 = vdupq_laneq_s16(v6, 7);
  int16x8_t v27 = vmlaq_laneq_s16(v25, v16, v6, 7);
  int16x8_t v28 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  uint16x8_t v29 = (uint16x8_t)vmulq_lane_s16(v12, *(int16x4_t *)v6.i8, 3);
  int16x8_t v30 = xmmword_1BBB78B70[((a2 >> 16) & 3) - 1];
  __asm { PRFUM           #0, [X8,#0x2E] }
  _X9 = &_X8->i8[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  int16x8_t v39 = vdupq_laneq_s16(v6, 4);
  uint16x8_t v40 = (uint16x8_t)vmulq_laneq_s16(v13, v6, 4);
  _X9 = (int8x16_t *)((char *)_X8 + 2 * a3);
  int16x8_t v42 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v40.i8, *(uint16x4_t *)v29.i8), *(int16x4_t *)v27.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v29, v40), v27), 2uLL);
  int16x8_t v43 = *(int16x8_t *)_X9;
  int8x16_t v44 = _X9[1];
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9->i8[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  int16x8_t v49 = (int16x8_t)vextq_s8(*_X9, v44, 2uLL);
  int16x8_t v50 = (int16x8_t)vextq_s8(*_X9, v44, 4uLL);
  int16x8_t v51 = (int16x8_t)vextq_s8(*_X9, v44, 6uLL);
  int16x8_t v52 = (int16x8_t)vextq_s8(*_X9, v44, 8uLL);
  _X9 = &_X9->i8[2 * a3];
  int16x8_t v54 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v43, v6.i16[0]), v49, *(int16x4_t *)v6.i8, 1), v50, *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xEuLL), v6, 7);
  uint16x8_t v55 = (uint16x8_t)vmulq_lane_s16(v51, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v56 = (uint16x8_t)vmulq_laneq_s16(v52, v6, 4);
  int16x8_t v57 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v56.i8, *(uint16x4_t *)v55.i8), *(int16x4_t *)v54.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v55, v56), v54), 2uLL);
  int16x8_t v58 = *(int16x8_t *)_X9;
  int8x16_t v59 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  int16x8_t v65 = (int16x8_t)vextq_s8((int8x16_t)v58, v59, 6uLL);
  int16x8_t v66 = (int16x8_t)vextq_s8((int8x16_t)v58, v59, 8uLL);
  int16x8_t v67 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v58, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v58, v59, 0xEuLL), v6,
          7);
  uint16x8_t v68 = (uint16x8_t)vmulq_lane_s16(v65, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v69 = (uint16x8_t)vmulq_laneq_s16(v66, v6, 4);
  int16x8_t v70 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v69.i8, *(uint16x4_t *)v68.i8), *(int16x4_t *)v67.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v68, v69), v67), 2uLL);
  int16x8_t v71 = *(int16x8_t *)_X9;
  int8x16_t v72 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  int16x8_t v78 = (int16x8_t)vextq_s8((int8x16_t)v71, v72, 6uLL);
  int16x8_t v79 = (int16x8_t)vextq_s8((int8x16_t)v71, v72, 8uLL);
  int16x8_t v80 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v71, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v71, v72, 0xEuLL), v6,
          7);
  uint16x8_t v81 = (uint16x8_t)vmulq_lane_s16(v78, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v82 = (uint16x8_t)vmulq_laneq_s16(v79, v6, 4);
  int16x8_t v83 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v82.i8, *(uint16x4_t *)v81.i8), *(int16x4_t *)v80.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v81, v82), v80), 2uLL);
  int16x8_t v84 = *(int16x8_t *)_X9;
  int8x16_t v85 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  int16x8_t v91 = (int16x8_t)vextq_s8((int8x16_t)v84, v85, 6uLL);
  int16x8_t v92 = (int16x8_t)vextq_s8((int8x16_t)v84, v85, 8uLL);
  int16x8_t v93 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v84, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v84, v85, 0xEuLL), v6,
          7);
  uint16x8_t v94 = (uint16x8_t)vmulq_lane_s16(v91, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v95 = (uint16x8_t)vmulq_laneq_s16(v92, v6, 4);
  int16x8_t v96 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v95.i8, *(uint16x4_t *)v94.i8), *(int16x4_t *)v93.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v94, v95), v93), 2uLL);
  int16x8_t v97 = *(int16x8_t *)_X9;
  int8x16_t v98 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X10 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x1E]
  }
  _X9 = &_X9[2 * a3];
  int16x8_t v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
  int16x8_t v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
  int16x8_t v106 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v97, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL), v6,
           7);
  uint16x8_t v107 = (uint16x8_t)vmulq_lane_s16(v104, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v108 = (uint16x8_t)vmulq_laneq_s16(v105, v6, 4);
  int16x8_t v109 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v108.i8, *(uint16x4_t *)v107.i8), *(int16x4_t *)v106.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v107, v108), v106), 2uLL);
  int16x8_t v110 = *(int16x8_t *)_X9;
  int8x16_t v111 = *((int8x16_t *)_X9 + 1);
  __asm { PRFUM           #0, [X9,#0x2E] }
  _X9 = &_X9[8 * a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x1E]
  }
  int16x8_t v116 = (int16x8_t)vextq_s8((int8x16_t)v110, v111, 6uLL);
  int16x8_t v117 = (int16x8_t)vextq_s8((int8x16_t)v110, v111, 8uLL);
  int16x8_t v118 = vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16(v110, v6.i16[0]), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 0xAuLL), v6, 5), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 0xCuLL), v6, 6), (int16x8_t)vextq_s8((int8x16_t)v110, v111, 0xEuLL), v6,
           7);
  uint16x8_t v119 = (uint16x8_t)vmulq_lane_s16(v116, *(int16x4_t *)v6.i8, 3);
  uint16x8_t v120 = (uint16x8_t)vmulq_laneq_s16(v117, v6, 4);
  int v121 = result + 1;
  uint64_t v122 = 8 * a3;
  int16x8_t v123 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v120.i8, *(uint16x4_t *)v119.i8), *(int16x4_t *)v118.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v119, v120), v118), 2uLL);
  do
  {
    _X13 = a4 + v122;
    int16x8_t v125 = *(int16x8_t *)(a4 + v122 - 6);
    int8x16_t v126 = *(int8x16_t *)(a4 + v122 + 10);
    int16x8_t v127 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 2uLL);
    int16x8_t v128 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 4uLL);
    int16x8_t v129 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 6uLL);
    int16x8_t v130 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 8uLL);
    int16x8_t v131 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 0xAuLL);
    int16x8_t v132 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 0xCuLL);
    int16x8_t v133 = (int16x8_t)vextq_s8((int8x16_t)v125, v126, 0xEuLL);
    int16x8_t v134 = vmlaq_s16(vmulq_s16(v125, v17), v127, v18);
    int32x4_t v135 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v30.i8, 1), *(int16x4_t *)v42.i8, *(int16x4_t *)v30.i8, 0);
    int32x4_t v136 = vmlal_high_lane_s16(vmull_high_lane_s16(v57, *(int16x4_t *)v30.i8, 1), v42, *(int16x4_t *)v30.i8, 0);
    int16x8_t v42 = v57;
    int16x8_t v57 = v70;
    int16x8_t v70 = v83;
    int16x8_t v83 = v96;
    int16x8_t v96 = v109;
    int16x8_t v109 = v123;
    __asm { PRFM            #0, [X13,#0x28] }
    _X13 = a4 + 16 * a3 - 6;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    int16x8_t v141 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v134, v128, v20), v131, v22), v132, v24), v133, v26);
    uint16x8_t v142 = (uint16x8_t)vmulq_s16(v129, v28);
    uint16x8_t v143 = (uint16x8_t)vmulq_s16(v130, v39);
    int32x4_t v144 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v143.i8, *(uint16x4_t *)v142.i8);
    int32x4_t v145 = (int32x4_t)vaddl_high_u16(v142, v143);
    int32x4_t v146 = vaddw_s16(v144, *(int16x4_t *)v141.i8);
    int32x4_t v147 = vaddw_high_s16(v145, v141);
    *(int16x4_t *)v145.i8 = vshrn_n_s32(v146, 2uLL);
    *(uint16x4_t *)v146.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v135, *(int16x4_t *)v57.i8, *(int16x4_t *)v30.i8, 2), *(int16x4_t *)v70.i8, *(int16x4_t *)v30.i8, 3), *(int16x4_t *)v83.i8, v30, 4), *(int16x4_t *)v96.i8, v30,
                                                   5),
                                                 *(int16x4_t *)v109.i8,
                                                 v30,
                                                 6),
                                               *(int16x4_t *)v145.i8,
                                               v30,
                                               7),
                                             0xAuLL),
                               (uint16x4_t)0xFC00FC00FC00FC00);
    v146.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v136, v57, *(int16x4_t *)v30.i8, 2), v70, *(int16x4_t *)v30.i8, 3), v83, v30, 4), v96, v30, 5), v109, v30, 6),
                                                      vshrn_n_s32(v147, 2uLL),
                                                      v30,
                                                      7),
                                                    0xAuLL),
                                      (uint16x4_t)0xFC00FC00FC00FC00);
    int16x8_t v123 = vshrn_high_n_s32(*(int16x4_t *)v145.i8, v147, 2uLL);
    *a6 = v146;
    --v121;
    a4 += 2 * a3;
    a6 = (int32x4_t *)((char *)a6 + 2 * a5);
  }
  while (v121 > 1);
  return result;
}

uint64_t sub_1BBA37918(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11 = 0;
  unint64_t v12 = a2;
  do
  {
    uint64_t result = sub_1BBA36FE4(a1, v12, a3, a4 + v11, a5, (int8x8_t *)(a6 + v11));
    BOOL v14 = v11 >= 0x18;
    v11 += 8;
  }
  while (!v14);
  return result;
}

uint64_t sub_1BBA37994(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA374BC(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1BBA37A14(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x8_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA36FE4(a1, a2, a3, a4, a5, a6);

  return sub_1BBA36FE4(a1, v11, a3, a4 + 8, a5, a6 + 1);
}

uint64_t sub_1BBA37A88(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA374BC(a1, a2, a3, a4, a5, a6);

  return sub_1BBA374BC(a1, v11, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1BBA37AFC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[((a2 >> 16) & 3) - 1];
  _X8 = -3 * a3 + a4;
  uint8x16_t v8 = *(uint8x16_t *)(_X8 - 3);
  _X8 -= 3;
  uint8x16_t v9 = v8;
  __asm { PRFUM           #0, [X8,#0x1F] }
  _X9 = _X8 + 4 * a3;
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (_OWORD *)(_X8 + a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X8 + a3);
  int8x16_t v21 = *(int8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  int8x16_t v22 = v21;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  int8x16_t v28 = *(int8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  int8x16_t v29 = v28;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X9 + a3);
  int8x16_t v35 = *(int8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  int8x16_t v36 = v35;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  uint8x16_t v42 = *(uint8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  uint8x16_t v43 = v42;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X10 = (char *)_X9 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X9 + a3);
  int8x16_t v49 = *(int8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  int8x16_t v50 = v49;
  int16x8_t v51 = (int16x8_t)vmovl_u8(qword_1BBB78B10[(a2 & 3) - 1]);
  __asm { PRFM            #0, [X9] }
  uint64_t v53 = 4 * a3;
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0xF]
  }
  _X12 = (char *)_X11 + 4 * a3;
  int8x16_t v57 = *(int8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  int8x16_t v58 = v57;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X12]
  }
  int v61 = result + 1;
  uint8x16_t v62 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  int8x16_t v63 = vdupq_lane_s8(v6, 2);
  uint8x8_t v64 = (uint8x8_t)vextq_s8(v63, v63, 8uLL).u64[0];
  int8x16_t v65 = vdupq_lane_s8(v6, 3);
  uint8x8_t v66 = (uint8x8_t)vextq_s8(v65, v65, 8uLL).u64[0];
  int8x16_t v67 = vdupq_lane_s8(v6, 4);
  __asm { PRFUM           #0, [X12,#0xF] }
  uint8x8_t v69 = (uint8x8_t)vextq_s8(v67, v67, 8uLL).u64[0];
  uint8x16_t v70 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  int8x16_t v71 = vdupq_lane_s8(v6, 6);
  uint8x8_t v72 = (uint8x8_t)vextq_s8(v71, v71, 8uLL).u64[0];
  int8x16_t v73 = vdupq_lane_s8(v6, 7);
  uint8x8_t v74 = (uint8x8_t)vextq_s8(v73, v73, 8uLL).u64[0];
  uint8x16_t v75 = (uint8x16_t)vdupq_lane_s8(v6, 5);
  do
  {
    uint16x8_t v76 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v70.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v62.i8);
    uint16x8_t v77 = vmull_high_u8((uint8x16_t)v22, v70);
    uint16x8_t v78 = vmull_high_u8(v9, v62);
    uint8x16_t v9 = (uint8x16_t)v22;
    int8x16_t v22 = v29;
    int8x16_t v29 = v36;
    int8x16_t v36 = (int8x16_t)v43;
    uint8x16_t v43 = (uint8x16_t)v50;
    int8x16_t v50 = v58;
    _X11 = a4 + v53;
    int8x16_t v58 = *(int8x16_t *)(a4 + v53 - 3);
    _X12 = a4 + 8 * a3 - 3;
    __asm
    {
      PRFUM           #0, [X11,#0x1C]
      PRFM            #0, [X12]
    }
    int16x8_t v83 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(v76, *(uint8x8_t *)v22.i8, *(uint8x8_t *)v63.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v71.i8), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v75.i8), *(uint8x8_t *)v58.i8, *(uint8x8_t *)v73.i8);
    *(int16x4_t *)v77.i8 = vsub_s16(*(int16x4_t *)v77.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v78, (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v64));
    int8x16_t v84 = (int8x16_t)vmlal_u8(vmlal_u8(vmlal_u8(v77, (uint8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), v66), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), v69), (uint8x8_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), v72);
    *(int16x4_t *)v84.i8 = vsub_s16(*(int16x4_t *)v84.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v43, v75), (uint8x8_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), v74));
    *(int16x4_t *)v83.i8 = vshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_lane_s16(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 2uLL), *(int16x4_t *)v51.i8, 1), *(int16x4_t *)v83.i8, *(int16x4_t *)v51.i8, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL), *(int16x4_t *)v51.i8, 2), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 6uLL), *(int16x4_t *)v51.i8,
                                       3),
                                     v83,
                                     v51,
                                     4),
                                   (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xCuLL),
                                   v51,
                                   6),
                                 (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xAuLL),
                                 v51,
                                 5),
                               (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, v84, 0xEuLL),
                               v51,
                               7),
                             6uLL);
    __asm { PRFUM           #0, [X12,#0xF] }
    *a6 = vqrshrun_n_s16(v83, 6uLL).u32[0];
    a6 = (_DWORD *)((char *)a6 + a5);
    --v61;
    a4 += a3;
  }
  while (v61 > 1);
  return result;
}

uint64_t sub_1BBA37D10(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x4_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[(a2 & 3) - 1];
  int16x8_t v7 = xmmword_1BBB78B70[((a2 >> 16) & 3) - 1];
  _X8 = (int8x8_t *)(a4 - 6 * a3);
  int16x4_t v9 = *(int16x4_t *)((char *)&_X8[-1] + 2);
  _X8 = (int8x8_t *)((char *)_X8 - 6);
  int16x4_t v10 = (int16x4_t)_X8[1];
  __asm { PRFUM           #0, [X8,#0x1E] }
  _X9 = &_X8[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X8 + 2 * a3);
  int16x4_t v20 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 2uLL), *(int16x4_t *)v6.i8, 1), v9, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v9, (int8x8_t)v10, 6uLL), *(int16x4_t *)v6.i8, 3), v10, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v10, _X8[2], 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v21 = *_X9;
  int16x4_t v22 = _X9[1];
  int8x8_t v23 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v29 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 2uLL), *(int16x4_t *)v6.i8, 1), v21, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v21, (int8x8_t)v22, 6uLL), *(int16x4_t *)v6.i8, 3), v22, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v22, v23, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v22, v23, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v22, v23, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v30 = *_X9;
  int16x4_t v31 = _X9[1];
  int8x8_t v32 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v38 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 2uLL), *(int16x4_t *)v6.i8, 1), v30, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v30, (int8x8_t)v31, 6uLL), *(int16x4_t *)v6.i8, 3), v31, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v31, v32, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v31, v32, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v31, v32, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v39 = *_X9;
  int16x4_t v40 = _X9[1];
  int8x8_t v41 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v47 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v6.i8, 1), v39, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL), *(int16x4_t *)v6.i8, 3), v40, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v40, v41, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v40, v41, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v40, v41, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v48 = *_X9;
  int16x4_t v49 = _X9[1];
  int8x8_t v50 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v56 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 2uLL), *(int16x4_t *)v6.i8, 1), v48, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v48, (int8x8_t)v49, 6uLL), *(int16x4_t *)v6.i8, 3), v49, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v49, v50, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v49, v50, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v49, v50, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v57 = *_X9;
  int16x4_t v58 = _X9[1];
  int8x8_t v59 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X10 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X10]
    PRFUM           #0, [X10,#0x16]
  }
  _X9 = (int16x4_t *)((char *)_X9 + 2 * a3);
  int16x4_t v65 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 2uLL), *(int16x4_t *)v6.i8, 1), v57, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v57, (int8x8_t)v58, 6uLL), *(int16x4_t *)v6.i8, 3), v58, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v58, v59, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v58, v59, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v58, v59, 6uLL),
            v6,
            7),
          2uLL);
  int16x4_t v66 = *_X9;
  int16x4_t v67 = _X9[1];
  int8x8_t v68 = (int8x8_t)_X9[2];
  __asm { PRFUM           #0, [X9,#0x1E] }
  _X9 = &_X9[a3];
  __asm
  {
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0x16]
  }
  int16x4_t v73 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 2uLL), *(int16x4_t *)v6.i8, 1), v66, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8((int8x8_t)v66, (int8x8_t)v67, 6uLL), *(int16x4_t *)v6.i8, 3), v67, v6,
                  4),
                (int16x4_t)vext_s8((int8x8_t)v67, v68, 2uLL),
                v6,
                5),
              (int16x4_t)vext_s8((int8x8_t)v67, v68, 4uLL),
              v6,
              6),
            (int16x4_t)vext_s8((int8x8_t)v67, v68, 6uLL),
            v6,
            7),
          2uLL);
  int v74 = result + 1;
  uint64_t v75 = 8 * a3;
  do
  {
    int32x4_t v76 = vmlal_lane_s16(vmull_lane_s16(v29, *(int16x4_t *)v7.i8, 1), v20, *(int16x4_t *)v7.i8, 0);
    int16x4_t v20 = v29;
    int16x4_t v29 = v38;
    int16x4_t v38 = v47;
    int16x4_t v47 = v56;
    _X13 = a4 + v75;
    int16x4_t v56 = v65;
    int16x4_t v78 = *(int16x4_t *)(a4 + v75 + 2);
    __asm { PRFM            #0, [X13,#0x18] }
    _X13 = a4 + 16 * a3 - 6;
    int16x4_t v65 = v73;
    __asm { PRFM            #0, [X13] }
    int16x4_t v73 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v78, 2uLL), *(int16x4_t *)v6.i8, 1), *(int16x4_t *)(a4 + v75 - 6), *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v78, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8(*(int8x8_t *)(a4 + v75 - 6), (int8x8_t)v78, 6uLL), *(int16x4_t *)v6.i8,
                      3),
                    v78,
                    v6,
                    4),
                  (int16x4_t)vext_s8((int8x8_t)v78, *(int8x8_t *)(a4 + v75 + 10), 2uLL),
                  v6,
                  5),
                (int16x4_t)vext_s8((int8x8_t)v78, *(int8x8_t *)(a4 + v75 + 10), 4uLL),
                v6,
                6),
              (int16x4_t)vext_s8((int8x8_t)v78, *(int8x8_t *)(a4 + v75 + 10), 6uLL),
              v6,
              7),
            2uLL);
    __asm { PRFUM           #0, [X13,#0x16] }
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v76, v29, *(int16x4_t *)v7.i8, 2), v38, *(int16x4_t *)v7.i8, 3), v47, v7, 4), v56, v7, 5), v65, v7, 6),
                            v73,
                            v7,
                            7),
                          0xAuLL),
            (uint16x4_t)0xFC00FC00FC00FC00);
    --v74;
    a4 += 2 * a3;
    a6 = (uint16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v74 > 1);
  return result;
}

double sub_1BBA38070(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA3811C(a1, a2, a3, a4, a5, a6);
  sub_1BBA3811C(a1, v11, a3, a4 + 16, a5, a6 + 1);
  sub_1BBA3811C(a1, v11, a3, a4 + 32, a5, a6 + 2);

  *(void *)&double result = sub_1BBA3811C(a1, v11, a3, a4 + 48, a5, a6 + 3).u64[0];
  return result;
}

uint8x16_t sub_1BBA3811C(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[((a2 >> 16) & 3) - 1];
  _X8 = (_OWORD *)(a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X8 + a3);
  uint8x16_t v10 = *(uint8x16_t *)_X8;
  _X8 = (_OWORD *)((char *)_X8 + 31);
  uint8x16_t v11 = v10;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  uint8x16_t v21 = *(uint8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  uint8x16_t v22 = v21;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X9 + a3);
  uint8x16_t v28 = *(uint8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  uint8x16_t v29 = v28;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (_OWORD *)((char *)_X10 + a3);
  uint8x16_t v35 = *(uint8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  uint8x16_t v36 = v35;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (_OWORD *)((char *)_X9 + a3);
  uint8x16_t v42 = *(uint8x16_t *)_X9;
  _X9 = (_OWORD *)((char *)_X9 + 31);
  uint8x16_t result = v42;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#0xF]
  }
  _X9 = (char *)_X10 + 4 * a3;
  _X11 = (_OWORD *)((char *)_X10 + a3);
  uint8x16_t v49 = *(uint8x16_t *)_X10;
  _X10 = (_OWORD *)((char *)_X10 + 31);
  uint8x16_t v50 = v49;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  _X9 = (char *)_X11 + 4 * a3;
  uint8x16_t v55 = *(uint8x16_t *)_X11;
  _X11 = (_OWORD *)((char *)_X11 + 31);
  uint8x16_t v56 = v55;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#0xF]
  }
  int v60 = a1 + 2;
  uint8x16_t v61 = (uint8x16_t)vdupq_lane_s8(v6, 0);
  uint8x16_t v62 = (uint8x16_t)vdupq_lane_s8(v6, 1);
  uint8x16_t v63 = (uint8x16_t)vdupq_lane_s8(v6, 2);
  uint8x16_t v64 = (uint8x16_t)vdupq_lane_s8(v6, 3);
  uint8x16_t v65 = (uint8x16_t)vdupq_lane_s8(v6, 4);
  uint8x16_t v66 = (uint8x16_t)vdupq_lane_s8(v6, 5);
  uint8x16_t v67 = (uint8x16_t)vdupq_lane_s8(v6, 6);
  uint8x16_t v68 = (uint8x16_t)vdupq_lane_s8(v6, 7);
  do
  {
    uint16x8_t v69 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v62.i8), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v61.i8);
    uint16x8_t v70 = vmlsl_high_u8(vmull_high_u8(v29, v62), v22, v61);
    uint16x8_t v71 = vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v62.i8), *(uint8x8_t *)v11.i8, *(uint8x8_t *)v61.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v63.i8);
    uint16x8_t v72 = vmlsl_high_u8(vmlsl_high_u8(vmull_high_u8(v22, v62), v11, v61), v29, v63);
    uint8x16_t v11 = v29;
    uint8x16_t v29 = result;
    uint8x16_t result = v56;
    uint16x8_t v73 = vmlal_u8(v71, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v64.i8);
    uint16x8_t v74 = vmlal_high_u8(v72, v36, v64);
    uint16x8_t v75 = vmlsl_u8(v69, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v63.i8);
    uint16x8_t v76 = vmlsl_high_u8(v70, v36, v63);
    uint8x16_t v22 = v36;
    uint8x16_t v36 = v50;
    _X14 = a4 + 4 * a3 + 31;
    uint8x16_t v50 = *(uint8x16_t *)(a4 + 4 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = a4 + 8 * a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    _X14 = a4 + 5 * a3 + 31;
    uint8x16_t v56 = *(uint8x16_t *)(a4 + 5 * a3);
    __asm { PRFM            #0, [X14] }
    _X14 = a4 + 9 * a3;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0xF]
    }
    *a6 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v73, *(uint8x8_t *)v29.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v66.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v68.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v74, v29, v65), result, v67), v36, v66), v50, v68), 6uLL);
    *(int8x16_t *)((char *)a6 + a5) = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(v75, *(uint8x8_t *)v29.i8, *(uint8x8_t *)v64.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v65.i8), *(uint8x8_t *)v50.i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v66.i8), *(uint8x8_t *)v56.i8, *(uint8x8_t *)v68.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(vmlal_high_u8(v76, v29, v64), v36, v65),
                                                         v50,
                                                         v67),
                                                       result,
                                                       v66),
                                                     v56,
                                                     v68),
                                        6uLL);
    a6 = (int8x16_t *)((char *)a6 + a5 + a5);
    v60 -= 2;
    a4 += 2 * a3;
  }
  while (v60 > 2);
  return result;
}

void sub_1BBA3830C(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    sub_1BBA3838C(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x38);
}

int16x8_t sub_1BBA3838C(int a1, unint64_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[((a2 >> 16) & 3) - 1];
  _X8 = &a4->i8[-6 * a3];
  int16x8_t v8 = *(int16x8_t *)_X8;
  _X8 += 30;
  int16x8_t v9 = v8;
  _X10 = &a4->i8[-4 * a3];
  int16x8_t v11 = *(int16x8_t *)_X10;
  _X10 += 30;
  int16x8_t v12 = v11;
  _X11 = &a4->i8[-2 * a3];
  int16x8_t v14 = *(int16x8_t *)_X11;
  _X11 += 30;
  int16x8_t result = v14;
  _X12 = &a4[1].i8[14];
  int16x8_t v17 = *a4;
  _X13 = &a4->i8[2 * a3];
  int16x8_t v19 = *(int16x8_t *)_X13;
  _X13 += 30;
  int16x8_t v20 = v19;
  _X14 = &a4->i8[4 * a3];
  int16x8_t v22 = *(int16x8_t *)_X14;
  _X14 += 30;
  int16x8_t v23 = v22;
  _X15 = &a4->i8[6 * a3];
  int16x8_t v25 = *(int16x8_t *)_X15;
  _X15 += 30;
  int16x8_t v26 = v25;
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X10]
    PRFM            #0, [X11]
    PRFM            #0, [X12]
    PRFM            #0, [X13]
  }
  int16x8_t v36 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  int16x8_t v37 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  int16x8_t v38 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  int16x8_t v39 = vdupq_laneq_s16(v6, 5);
  int16x8_t v40 = vdupq_laneq_s16(v6, 6);
  __asm { PRFM            #0, [X14] }
  int16x8_t v42 = vdupq_laneq_s16(v6, 7);
  int v43 = a1 + 2;
  __asm { PRFM            #0, [X15] }
  int16x8_t v45 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  int16x8_t v46 = vdupq_laneq_s16(v6, 4);
  do
  {
    int16x8_t v47 = result;
    int16x8_t v48 = v17;
    int16x8_t result = v20;
    int16x8_t v17 = v23;
    int16x8_t v20 = v26;
    _X16 = (uint64_t)&a4[1].i64[a3 + 1] + 6;
    int16x8_t v23 = *(int16x8_t *)((char *)a4 + 8 * a3);
    __asm { PRFM            #0, [X16] }
    _X17 = (uint64_t)&a4[1].i64[1] + 10 * a3 + 6;
    int16x8_t v26 = *(int16x8_t *)((char *)a4 + 10 * a3);
    __asm { PRFM            #0, [X17] }
    _X16 = &a4->i8[18 * a3];
    _X17 = &a4->i8[20 * a3];
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X16,#0xE]
      PRFUM           #0, [X17,#0xE]
    }
    int16x8_t v59 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v40), v17, v39), v47, v38), v12, v37), v9, v36);
    uint16x8_t v60 = (uint16x8_t)vmulq_s16(v48, v45);
    uint16x8_t v61 = (uint16x8_t)vmulq_s16(result, v46);
    int32x4_t v62 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v60.i8, *(uint16x4_t *)v61.i8);
    int16x8_t v63 = vmlaq_s16(v59, v23, v42);
    int32x4_t v64 = (int32x4_t)vaddl_high_u16(v60, v61);
    int16x8_t v65 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v39), v48, v38), v47, v37), v12, v36);
    int32x4_t v66 = vaddw_s16(v62, *(int16x4_t *)v63.i8);
    int16x8_t v67 = vmlaq_s16(vmlaq_s16(v65, v23, v40), v26, v42);
    uint16x8_t v68 = (uint16x8_t)vmulq_s16(result, v45);
    uint16x8_t v69 = (uint16x8_t)vmulq_s16(v17, v46);
    *(uint16x4_t *)v66.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v66, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v66.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16(v64, v63), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *a6 = v66;
    *(uint16x4_t *)v66.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v68.i8, *(uint16x4_t *)v69.i8), *(int16x4_t *)v67.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v66.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16((int32x4_t)vaddl_high_u16(v68, v69), v67), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *(int32x4_t *)((char *)a6 + 2 * a5) = v66;
    a6 = (int32x4_t *)((char *)a6 + 4 * a5);
    v43 -= 2;
    a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    int16x8_t v12 = v48;
    int16x8_t v9 = v47;
  }
  while (v43 > 2);
  return result;
}

double sub_1BBA38538(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA3811C(a1, a2, a3, a4, a5, a6);

  *(void *)&double result = sub_1BBA3811C(a1, v11, a3, a4 + 16, a5, a6 + 1).u64[0];
  return result;
}

void sub_1BBA385AC(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  unint64_t v12 = -8;
  do
  {
    sub_1BBA3838C(a1, v11, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    ++a4;
  }
  while (v12 < 0x18);
}

double sub_1BBA3862C(int a1, unsigned int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int32x4_t *a6)
{
  unint64_t v11 = a2;
  sub_1BBA3838C(a1, a2, a3, a4, a5, a6);

  *(void *)&double result = sub_1BBA3838C(a1, v11, a3, a4 + 1, a5, a6 + 1).u64[0];
  return result;
}

char *sub_1BBA386A0(int a1, unint64_t a2, uint64_t a3, uint8x8_t *a4, uint64_t a5, int8x8_t *a6)
{
  _X8 = (uint8x8_t *)((char *)a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X8 + a3);
  uint8x8_t v9 = *_X8;
  _X8 = (uint8x8_t *)((char *)_X8 + 15);
  uint8x8_t v10 = v9;
  int8x8_t v11 = (int8x8_t)qword_1BBB78B10[((a2 >> 16) & 3) - 1];
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  uint8x8_t v21 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  uint8x8_t v22 = v21;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  int16x8_t v27 = (uint8x8_t *)((char *)_X9 + a3);
  uint8x8_t v28 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  uint8x8_t v29 = v28;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)v27 + 4 * a3;
  _X9 = (char *)&v27[1] + 7;
  uint8x8_t v35 = *v27;
  _X10 = (uint8x8_t *)((char *)v27 + a3);
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  uint8x8_t v42 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  uint8x8_t v43 = v42;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X9 + a3);
  uint8x8_t v49 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  uint8x8_t v50 = v49;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X11 = (char *)_X10 + 4 * a3;
  uint8x8_t v55 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  uint8x8_t v56 = v55;
  uint64_t v57 = 4 * a3;
  __asm { PRFM            #0, [X10] }
  int v59 = a1 + 4;
  uint64_t v60 = 11 * a3;
  __asm
  {
    PRFM            #0, [X11]
    PRFUM           #0, [X11,#7]
  }
  uint64_t v63 = a3;
  uint64_t v64 = 7 * a3;
  uint64_t v65 = 5 * a3;
  uint64_t v66 = 10 * a3;
  uint8x8_t v67 = (uint8x8_t)vdup_lane_s8(v11, 1);
  uint64_t v68 = 6 * a3;
  uint8x8_t v69 = (uint8x8_t)vdup_lane_s8(v11, 0);
  uint64_t v70 = 9 * a3;
  uint8x8_t v71 = (uint8x8_t)vdup_lane_s8(v11, 2);
  uint8x8_t v72 = (uint8x8_t)vdup_lane_s8(v11, 3);
  uint8x8_t v73 = (uint8x8_t)vdup_lane_s8(v11, 4);
  uint8x8_t v74 = (uint8x8_t)vdup_lane_s8(v11, 5);
  uint8x8_t v75 = (uint8x8_t)vdup_lane_s8(v11, 6);
  uint8x8_t v76 = (uint8x8_t)vdup_lane_s8(v11, 7);
  do
  {
    _X19 = &a4[v63];
    _X7 = (uint8x8_t *)((char *)a4 + v65);
    _X6 = (char *)a4 + v70;
    _X2 = (uint8x8_t *)((char *)a4 + v68);
    _X1 = (char *)a4 + v66;
    uint16x8_t v82 = (uint8x8_t *)((char *)a4 + v64);
    _X17 = (char *)a4 + v60;
    a4 = (uint8x8_t *)((char *)a4 + v57);
    uint16x8_t v84 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v22, v67), v10, v69), v29, v71), v35, v72);
    uint16x8_t v85 = vmlsl_u8(vmlsl_u8(vmull_u8(v29, v67), v22, v69), v35, v71);
    uint16x8_t v86 = vmull_u8(v35, v67);
    uint16x8_t v87 = vmlsl_u8(vmull_u8(v43, v67), v35, v69);
    _X20 = (char *)&a4[1] + 7;
    uint8x8_t v35 = *a4;
    __asm
    {
      PRFM            #0, [X20]
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#7]
    }
    uint16x8_t v92 = vmlal_u8(v84, v43, v73);
    uint16x8_t v93 = vmlal_u8(v85, v43, v72);
    uint16x8_t v94 = vmlsl_u8(vmlsl_u8(v86, v29, v69), v43, v71);
    uint8x8_t v10 = v43;
    uint8x8_t v95 = *_X7;
    _X7 = (uint8x8_t *)((char *)_X7 + 15);
    uint8x8_t v43 = v95;
    __asm
    {
      PRFM            #0, [X7]
      PRFM            #0, [X6]
      PRFUM           #0, [X6,#7]
    }
    uint16x8_t v99 = vmlsl_u8(vmlal_u8(v92, v56, v75), v50, v74);
    uint16x8_t v100 = vmlal_u8(v93, v50, v73);
    uint16x8_t v101 = vmlal_u8(v94, v50, v72);
    uint16x8_t v102 = vmlsl_u8(v87, v50, v71);
    uint8x8_t v22 = v50;
    uint8x8_t v103 = *_X2;
    _X2 = (uint8x8_t *)((char *)_X2 + 15);
    uint8x8_t v50 = v103;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X1]
      PRFUM           #0, [X1,#7]
    }
    uint16x8_t v107 = vmlsl_u8(vmlal_u8(v100, *a4, v75), v56, v74);
    uint16x8_t v108 = vmlal_u8(v101, v56, v73);
    uint16x8_t v109 = vmlal_u8(v102, v56, v72);
    uint8x8_t v29 = v56;
    uint8x8_t v111 = *v82;
    double result = (char *)&v82[1] + 7;
    uint8x8_t v56 = v111;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#7]
    }
    *(int8x8_t *)v108.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v108, v43, v75), *a4, v74), v50, v76), 6uLL);
    *(int8x8_t *)v109.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v109, *a4, v73), v50, v75), v43, v74), v111, v76), 6uLL);
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v99, *a4, v76), 6uLL);
    *(int8x8_t *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v107, v43, v76), 6uLL);
    uint8x8_t v115 = (int8x8_t *)((char *)a6 + a5 + a5);
    *uint8x8_t v115 = *(int8x8_t *)v108.i8;
    int16x8_t v116 = (int8x8_t *)((char *)v115 + a5);
    *int16x8_t v116 = *(int8x8_t *)v109.i8;
    a6 = (int8x8_t *)((char *)v116 + a5);
    v59 -= 4;
  }
  while (v59 > 4);
  return result;
}

uint8x8_t sub_1BBA388E8(int a1, unint64_t a2, uint64_t a3, uint8x8_t *a4, uint64_t a5, _DWORD *a6)
{
  _X8 = (uint8x8_t *)((char *)a4 - 3 * a3);
  _X9 = (char *)_X8 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X8 + a3);
  double v9 = *(double *)_X8;
  _X8 = (uint8x8_t *)((char *)_X8 + 15);
  *(double *)&uint8x8_t result = v9;
  int8x8_t v11 = (int8x8_t)qword_1BBB78B10[((a2 >> 16) & 3) - 1];
  __asm
  {
    PRFM            #0, [X8]
    PRFM            #0, [X9]
    PRFUM           #0, [X9,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  uint8x8_t v21 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  uint8x8_t v22 = v21;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  int16x8_t v27 = (uint8x8_t *)((char *)_X9 + a3);
  uint8x8_t v28 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  uint8x8_t v29 = v28;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)v27 + 4 * a3;
  _X9 = (char *)&v27[1] + 7;
  uint8x8_t v35 = *v27;
  _X10 = (uint8x8_t *)((char *)v27 + a3);
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X10 + 4 * a3;
  _X9 = (uint8x8_t *)((char *)_X10 + a3);
  double v42 = *(double *)_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  double v43 = v42;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X8 = (char *)_X9 + 4 * a3;
  _X10 = (uint8x8_t *)((char *)_X9 + a3);
  uint8x8_t v49 = *_X9;
  _X9 = (uint8x8_t *)((char *)_X9 + 15);
  uint8x8_t v50 = v49;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFUM           #0, [X8,#7]
  }
  _X11 = (char *)_X10 + 4 * a3;
  uint8x8_t v55 = *_X10;
  _X10 = (uint8x8_t *)((char *)_X10 + 15);
  uint8x8_t v56 = v55;
  uint64_t v57 = 4 * a3;
  __asm { PRFM            #0, [X10] }
  int v59 = a1 + 4;
  uint64_t v60 = 11 * a3;
  __asm
  {
    PRFM            #0, [X11]
    PRFUM           #0, [X11,#7]
  }
  uint64_t v63 = a3;
  uint64_t v64 = 7 * a3;
  uint64_t v65 = 5 * a3;
  uint64_t v66 = 10 * a3;
  uint8x8_t v67 = (uint8x8_t)vdup_lane_s8(v11, 1);
  uint64_t v68 = 6 * a3;
  uint8x8_t v69 = (uint8x8_t)vdup_lane_s8(v11, 0);
  uint64_t v70 = 9 * a3;
  uint8x8_t v71 = (uint8x8_t)vdup_lane_s8(v11, 2);
  uint8x8_t v72 = (uint8x8_t)vdup_lane_s8(v11, 3);
  uint8x8_t v73 = (uint8x8_t)vdup_lane_s8(v11, 4);
  uint8x8_t v74 = (uint8x8_t)vdup_lane_s8(v11, 5);
  uint8x8_t v75 = (uint8x8_t)vdup_lane_s8(v11, 6);
  uint8x8_t v76 = (uint8x8_t)vdup_lane_s8(v11, 7);
  do
  {
    _X0 = &a4[v63];
    _X17 = (uint8x8_t *)((char *)a4 + v65);
    _X2 = (char *)a4 + v70;
    _X1 = (uint8x8_t *)((char *)a4 + v68);
    _X19 = (char *)a4 + v66;
    _X7 = (uint8x8_t *)((char *)a4 + v64);
    _X20 = (char *)a4 + v60;
    a4 = (uint8x8_t *)((char *)a4 + v57);
    uint16x8_t v84 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v22, v67), result, v69), v29, v71), v35, v72);
    uint16x8_t v85 = vmlsl_u8(vmlsl_u8(vmull_u8(v29, v67), v22, v69), v35, v71);
    uint16x8_t v86 = vmull_u8(v35, v67);
    uint16x8_t v87 = vmlsl_u8(vmull_u8(*(uint8x8_t *)&v43, v67), v35, v69);
    _X6 = (char *)&a4[1] + 7;
    uint8x8_t v35 = *a4;
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X0]
      PRFUM           #0, [X0,#7]
    }
    uint16x8_t v92 = vmlal_u8(v84, *(uint8x8_t *)&v43, v73);
    uint16x8_t v93 = vmlal_u8(v85, *(uint8x8_t *)&v43, v72);
    uint16x8_t v94 = vmlsl_u8(vmlsl_u8(v86, v29, v69), *(uint8x8_t *)&v43, v71);
    *(double *)&uint8x8_t result = v43;
    double v95 = *(double *)_X17;
    _X17 = (uint8x8_t *)((char *)_X17 + 15);
    double v43 = v95;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X2]
      PRFUM           #0, [X2,#7]
    }
    uint16x8_t v99 = vmlsl_u8(vmlal_u8(v92, v56, v75), v50, v74);
    uint16x8_t v100 = vmlal_u8(v93, v50, v73);
    uint16x8_t v101 = vmlal_u8(v94, v50, v72);
    uint16x8_t v102 = vmlsl_u8(v87, v50, v71);
    uint8x8_t v22 = v50;
    uint8x8_t v103 = *_X1;
    _X1 = (uint8x8_t *)((char *)_X1 + 15);
    uint8x8_t v50 = v103;
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#7]
    }
    uint16x8_t v107 = vmlsl_u8(vmlal_u8(v100, *a4, v75), v56, v74);
    uint16x8_t v108 = vmlal_u8(v101, v56, v73);
    uint16x8_t v109 = vmlal_u8(v102, v56, v72);
    uint8x8_t v29 = v56;
    uint8x8_t v110 = *_X7;
    _X7 = (uint8x8_t *)((char *)_X7 + 15);
    uint8x8_t v56 = v110;
    __asm
    {
      PRFM            #0, [X7]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#7]
    }
    int16x8_t v114 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v108, *(uint8x8_t *)&v43, v75), *a4, v74), v50, v76);
    int16x8_t v115 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v109, *a4, v73), v50, v75), *(uint8x8_t *)&v43, v74), v110, v76);
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v99, *a4, v76), 6uLL).u32[0];
    *(_DWORD *)((char *)a6 + a5) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v107, *(uint8x8_t *)&v43, v76), 6uLL).u32[0];
    int16x8_t v116 = (_DWORD *)((char *)a6 + a5 + a5);
    *int16x8_t v116 = vqrshrun_n_s16(v114, 6uLL).u32[0];
    int16x8_t v117 = (_DWORD *)((char *)v116 + a5);
    a6 = (_DWORD *)((char *)v117 + a5);
    v59 -= 4;
    *int16x8_t v117 = vqrshrun_n_s16(v115, 6uLL).u32[0];
  }
  while (v59 > 4);
  return result;
}

char *sub_1BBA38B30(int a1, unint64_t a2, uint64_t a3, int16x4_t *a4, uint64_t a5, uint16x4_t *a6)
{
  _X9 = (int16x4_t *)((char *)a4 - 6 * a3);
  int16x8_t v7 = xmmword_1BBB78B70[((a2 >> 16) & 3) - 1];
  _X8 = (int16x4_t *)((char *)a4 - 4 * a3);
  int16x4_t v9 = *_X9;
  _X9 = (int16x4_t *)((char *)_X9 + 14);
  int16x4_t v10 = v9;
  int16x4_t v11 = *_X8;
  _X8 = (int16x4_t *)((char *)_X8 + 14);
  int16x4_t v12 = v11;
  _X10 = (int16x4_t *)((char *)a4 - 2 * a3);
  int16x4_t v14 = *_X10;
  _X10 = (int16x4_t *)((char *)_X10 + 14);
  int16x4_t v15 = v14;
  _X13 = (int16x4_t *)((char *)a4 + 2 * a3);
  _X11 = (char *)&a4[1] + 6;
  int16x4_t v18 = *a4;
  int16x4_t v19 = *_X13;
  _X13 = (int16x4_t *)((char *)_X13 + 14);
  int16x4_t v20 = v19;
  _X14 = (int16x4_t *)((char *)a4 + 4 * a3);
  int16x4_t v22 = *_X14;
  _X14 = (int16x4_t *)((char *)_X14 + 14);
  int16x4_t v23 = v22;
  _X15 = (int16x4_t *)((char *)a4 + 6 * a3);
  int16x4_t v25 = *_X15;
  _X15 = (int16x4_t *)((char *)_X15 + 14);
  int16x4_t v26 = v25;
  __asm
  {
    PRFM            #0, [X9]
    PRFM            #0, [X8]
    PRFM            #0, [X10]
    PRFM            #0, [X11]
    PRFM            #0, [X13]
    PRFM            #0, [X14]
    PRFM            #0, [X15]
  }
  int v38 = a1 + 4;
  uint64_t v39 = 3 * a3;
  uint64_t v40 = 8 * a3;
  uint64_t v41 = 22 * a3;
  uint64_t v42 = 12 * a3;
  uint64_t v43 = 10 * a3;
  uint64_t v44 = 2 * a5;
  uint64_t v45 = 14 * a3;
  do
  {
    _X2 = (int16x4_t *)((char *)a4 + v43);
    _X1 = (int16x4_t *)((char *)a4 + v42);
    int16x8_t v48 = (int16x4_t *)((char *)a4 + v45);
    _X16 = (char *)a4 + v41;
    _X17 = &a4[v39];
    a4 = (int16x4_t *)((char *)a4 + v40);
    int32x4_t v51 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v7.i8, 1), v10, *(int16x4_t *)v7.i8, 0), v15, *(int16x4_t *)v7.i8, 2), v18, *(int16x4_t *)v7.i8, 3);
    int32x4_t v52 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v15, *(int16x4_t *)v7.i8, 1), v12, *(int16x4_t *)v7.i8, 0), v18, *(int16x4_t *)v7.i8, 2);
    int32x4_t v53 = vmull_lane_s16(v18, *(int16x4_t *)v7.i8, 1);
    int32x4_t v54 = vmlal_lane_s16(vmull_lane_s16(v20, *(int16x4_t *)v7.i8, 1), v18, *(int16x4_t *)v7.i8, 0);
    _X4 = (char *)&a4[1] + 6;
    int16x4_t v18 = *a4;
    __asm { PRFM            #0, [X4] }
    int32x4_t v57 = vmlal_laneq_s16(v51, v20, v7, 4);
    int32x4_t v58 = vmlal_lane_s16(v52, v20, *(int16x4_t *)v7.i8, 3);
    int32x4_t v59 = vmlal_lane_s16(vmlal_lane_s16(v53, v15, *(int16x4_t *)v7.i8, 0), v20, *(int16x4_t *)v7.i8, 2);
    int16x4_t v10 = v20;
    int16x4_t v60 = *_X2;
    _X2 = (int16x4_t *)((char *)_X2 + 14);
    int16x4_t v20 = v60;
    __asm { PRFM            #0, [X2] }
    int32x4_t v62 = vmlal_laneq_s16(v57, v23, v7, 5);
    int32x4_t v63 = vmlal_laneq_s16(v58, v23, v7, 4);
    int32x4_t v64 = vmlal_lane_s16(v59, v23, *(int16x4_t *)v7.i8, 3);
    int32x4_t v65 = vmlal_lane_s16(v54, v23, *(int16x4_t *)v7.i8, 2);
    int16x4_t v12 = v23;
    int16x4_t v66 = *_X1;
    _X1 = (int16x4_t *)((char *)_X1 + 14);
    int16x4_t v23 = v66;
    __asm { PRFM            #0, [X1] }
    int32x4_t v68 = vmlal_laneq_s16(v62, v26, v7, 6);
    int32x4_t v69 = vmlal_laneq_s16(v63, v26, v7, 5);
    int32x4_t v70 = vmlal_laneq_s16(v64, v26, v7, 4);
    int32x4_t v71 = vmlal_lane_s16(v65, v26, *(int16x4_t *)v7.i8, 3);
    int16x4_t v15 = v26;
    int16x4_t v73 = *v48;
    uint8x8_t result = (char *)&v48[1] + 6;
    int16x4_t v26 = v73;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X16,#6]
      PRFUM           #0, [X17,#6]
    }
    int32x4_t v79 = vmlal_laneq_s16(vmlal_laneq_s16(v69, *a4, v7, 6), v20, v7, 7);
    int32x4_t v80 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v70, *a4, v7, 5), v20, v7, 6), v23, v7, 7);
    int32x4_t v81 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v71, *a4, v7, 4), v20, v7, 5), v23, v7, 6), v73, v7, 7);
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v68, *a4, v7, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    *(uint16x4_t *)((char *)a6 + v44) = vmin_u16((uint16x4_t)vqrshrun_n_s32(v79, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    uint16x8_t v82 = (uint16x4_t *)((char *)a6 + v44 + v44);
    *uint16x8_t v82 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v80, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    int16x8_t v83 = (uint16x4_t *)((char *)v82 + v44);
    *int16x8_t v83 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v81, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v38 -= 4;
    a6 = (uint16x4_t *)((char *)v83 + v44);
  }
  while (v38 > 4);
  return result;
}

uint64_t sub_1BBA38CF4(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1BBA38D18(64, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BBA38D18(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int8x8_t v7 = (int8x8_t)qword_1BBB78B10[(a3 & 3) - 1];
  int16x8_t v8 = (int8x8_t *)(a5 - 3);
  uint64_t v9 = a5 + 5;
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v7, 0);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v7, 1);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v7, 2);
  uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v7, 3);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v7, 4);
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v7, 5);
  uint8x8_t v16 = (uint8x8_t)vdup_lane_s8(v7, 6);
  uint8x8_t v17 = (uint8x8_t)vdup_lane_s8(v7, 7);
  do
  {
    unint64_t v18 = 0;
    int8x8_t v19 = *v8;
    do
    {
      int8x16_t v20 = *(int8x16_t *)(v9 + v18);
      int16x8_t v21 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 1uLL), v11), (uint8x8_t)v19, v10), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 2uLL), v12), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 3uLL), v13), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 4uLL), v14), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 6uLL), v16), (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 5uLL), v15),
                         (uint8x8_t)vext_s8(v19, *(int8x8_t *)v20.i8, 7uLL),
                         v17);
      int8x8_t v19 = (int8x8_t)vextq_s8(v20, v20, 8uLL).u64[0];
      *(int8x16_t *)(a7 + v18) = vqrshrun_high_n_s16(vqrshrun_n_s16(v21, 6uLL), (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 1uLL), v11), *(uint8x8_t *)v20.i8, v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 2uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 3uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 4uLL), v14),
                                                    (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 6uLL),
                                                    v16),
                                                  (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 5uLL),
                                                  v15),
                                                (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 7uLL),
                                                v17),
                                   6uLL);
      v18 += 16;
    }
    while (v18 < result);
    int16x8_t v8 = (int8x8_t *)((char *)v8 + a4);
    a7 += v18 + a6 - result;
    v9 += a4;
    BOOL v22 = __OFSUB__(a2--, 1);
  }
  while (!((a2 < 0) ^ v22 | (a2 == 0)));
  return result;
}

uint64_t sub_1BBA38E18(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA38E98(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x38);
  return result;
}

uint64_t sub_1BBA38E98(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[(a2 & 3) - 1];
  int16x8_t v7 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  int16x8_t v9 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  int16x8_t v10 = vdupq_laneq_s16(v6, 5);
  int16x8_t v11 = vdupq_laneq_s16(v6, 6);
  int16x8_t v12 = vdupq_laneq_s16(v6, 7);
  int16x8_t v13 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  int16x8_t v14 = vdupq_laneq_s16(v6, 4);
  _X8 = (int8x16_t *)(a4 - 6);
  int v16 = result + 1;
  do
  {
    int8x16_t v17 = _X8[1];
    __asm { PRFUM           #0, [X8,#0x2E] }
    _X13 = &_X8->i8[8 * a3];
    int16x8_t v24 = (int16x8_t)vextq_s8(*_X8, v17, 8uLL);
    int16x8_t v25 = (int16x8_t)vextq_s8(*_X8, v17, 0xEuLL);
    int16x8_t v26 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(*(int16x8_t *)_X8, v7), (int16x8_t)vextq_s8(*_X8, v17, 2uLL), v8), (int16x8_t)vextq_s8(*_X8, v17, 4uLL), v9), (int16x8_t)vextq_s8(*_X8, v17, 0xAuLL), v10), (int16x8_t)vextq_s8(*_X8, v17, 0xCuLL), v11);
    uint16x8_t v27 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X8, v17, 6uLL), v13);
    int16x8_t v28 = vmlaq_s16(v26, v25, v12);
    uint16x8_t v29 = (uint16x8_t)vmulq_s16(v24, v14);
    int32x4_t v30 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v27.i8);
    int32x4_t v31 = (int32x4_t)vaddl_high_u16(v27, v29);
    *(uint16x4_t *)v27.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16(v30, *(int16x4_t *)v28.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    v27.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16(v31, v28), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x1E]
    }
    *a6 = v27;
    --v16;
    _X8 = (int8x16_t *)((char *)_X8 + 2 * a3);
    a6 = (uint16x8_t *)((char *)a6 + 2 * a5);
  }
  while (v16 > 1);
  return result;
}

uint64_t sub_1BBA38F74(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1BBA38D18(32, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BBA38F98(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  unint64_t v12 = -8;
  do
  {
    uint64_t result = sub_1BBA38E98(a1, a2, a3, a4, a5, a6);
    v12 += 8;
    ++a6;
    a4 += 16;
  }
  while (v12 < 0x18);
  return result;
}

uint64_t sub_1BBA39018(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1BBA38D18(16, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BBA3903C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x8_t *a6)
{
  sub_1BBA38E98(a1, a2, a3, a4, a5, a6);

  return sub_1BBA38E98(a1, a2, a3, a4 + 16, a5, a6 + 1);
}

uint64_t sub_1BBA390B0(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, int8x8_t *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[(a2 & 3) - 1];
  int v7 = result + 1;
  uint8x8_t v8 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 3);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 4);
  uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v6, 5);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v6, 6);
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    int8x16_t v16 = *(int8x16_t *)(_X3 - 3);
    __asm { PRFUM           #0, [X3,#0x1C] }
    _X10 = _X3 + 4 * a3;
    __asm
    {
      PRFUM           #0, [X10,#-3]
      PRFUM           #0, [X10,#0xC]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 1uLL), v9), *(uint8x8_t *)v16.i8, v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 3uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 6uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 5uLL),
                           v13),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 7uLL),
                         v15),
            6uLL);
    a6 = (int8x8_t *)((char *)a6 + a5);
    _X3 += a3;
    --v7;
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1BBA3915C(uint64_t result, char a2, uint64_t a3, uint64_t _X3, uint64_t a5, _DWORD *a6)
{
  int8x8_t v6 = (int8x8_t)qword_1BBB78B10[(a2 & 3) - 1];
  int v7 = result + 1;
  uint8x8_t v8 = (uint8x8_t)vdup_lane_s8(v6, 0);
  uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v6, 1);
  uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v6, 2);
  uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v6, 3);
  uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v6, 4);
  uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v6, 5);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v6, 6);
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v6, 7);
  do
  {
    int8x16_t v16 = *(int8x16_t *)(_X3 - 3);
    __asm { PRFUM           #0, [X3,#0x1C] }
    _X10 = _X3 + 4 * a3;
    __asm
    {
      PRFUM           #0, [X10,#-3]
      PRFUM           #0, [X10,#0xC]
    }
    *a6 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 1uLL), v9), *(uint8x8_t *)v16.i8, v8), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 2uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 3uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 6uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 5uLL),
                           v13),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 7uLL),
                         v15),
            6uLL).u32[0];
    a6 = (_DWORD *)((char *)a6 + a5);
    _X3 += a3;
    --v7;
  }
  while (v7 > 1);
  return result;
}

uint64_t sub_1BBA39208(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint16x4_t *a6)
{
  int16x8_t v6 = xmmword_1BBB78B70[(a2 & 3) - 1];
  _X8 = (int8x8_t *)(a4 - 6);
  int v8 = result + 1;
  do
  {
    int16x4_t v9 = (int16x4_t)_X8[1];
    __asm { PRFUM           #0, [X8,#0x1E] }
    _X13 = &_X8[a3];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    *a6 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 2uLL), *(int16x4_t *)v6.i8, 1), (int16x4_t)*_X8, *(int16x4_t *)v6.i8, 0), (int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 4uLL), *(int16x4_t *)v6.i8, 2), (int16x4_t)vext_s8(*_X8, (int8x8_t)v9, 6uLL),
                                    *(int16x4_t *)v6.i8,
                                    3),
                                  v9,
                                  v6,
                                  4),
                                (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 2uLL),
                                v6,
                                5),
                              (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 4uLL),
                              v6,
                              6),
                            (int16x4_t)vext_s8((int8x8_t)v9, _X8[2], 6uLL),
                            v6,
                            7),
                          6uLL),
            (uint16x4_t)0xFC00FC00FC00FC00);
    --v8;
    _X8 = (int8x8_t *)((char *)_X8 + 2 * a3);
    a6 = (uint16x4_t *)((char *)a6 + 2 * a5);
  }
  while (v8 > 1);
  return result;
}

__n128 sub_1BBA392A8(int a1, uint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, uint64_t a6)
{
  int v6 = a1 + 2;
  do
  {
    __n128 result = *(__n128 *)_X3;
    long long v8 = *(_OWORD *)(_X3 + 16);
    long long v9 = *(_OWORD *)(_X3 + 32);
    long long v10 = *(_OWORD *)(_X3 + 48);
    __asm { PRFUM           #0, [X3,#0x7F] }
    _X11 = _X3 + 4 * a3;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0x3F]
    }
    _X11 = _X3 + a3;
    long long v20 = *(_OWORD *)(_X3 + a3);
    long long v21 = *(_OWORD *)(_X3 + a3 + 16);
    long long v22 = *(_OWORD *)(_X3 + a3 + 32);
    long long v23 = *(_OWORD *)(_X3 + a3 + 48);
    __asm { PRFUM           #0, [X11,#0x7F] }
    _X12 = _X3 + 5 * a3;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0x3F]
    }
    _X3 += a3 + a3;
    *(__n128 *)a6 = result;
    *(_OWORD *)(a6 + 16) = v8;
    *(_OWORD *)(a6 + 32) = v9;
    *(_OWORD *)(a6 + 48) = v10;
    int16x8_t v28 = (_OWORD *)(a6 + a5);
    *int16x8_t v28 = v20;
    v28[1] = v21;
    a6 += a5 + a5;
    v6 -= 2;
    v28[2] = v22;
    v28[3] = v23;
  }
  while (v6 > 2);
  return result;
}

uint64_t sub_1BBA39314(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  unint64_t v6 = 0;
  do
  {
    int v7 = result + 2;
    long long v8 = a4;
    long long v9 = a6;
    do
    {
      long long v10 = *(_OWORD *)((char *)v8 + 2 * a3);
      *long long v9 = *v8;
      *(_OWORD *)((char *)v9 + 2 * a5) = v10;
      long long v9 = (_OWORD *)((char *)v9 + 4 * a5);
      long long v8 = (_OWORD *)((char *)v8 + 4 * a3);
      v7 -= 2;
    }
    while (v7 > 2);
    ++a6;
    ++a4;
    BOOL v11 = v6 >= 0x38;
    v6 += 8;
  }
  while (!v11);
  return result;
}

__n128 sub_1BBA39378(int a1, uint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  int v6 = a1 + 2;
  do
  {
    __n128 result = *a4;
    __n128 v8 = *(__n128 *)((char *)a4 + 2 * a3);
    *a6 = *a4;
    *(__n128 *)((char *)a6 + 2 * a5) = v8;
    a6 = (__n128 *)((char *)a6 + 4 * a5);
    a4 = (__n128 *)((char *)a4 + 4 * a3);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

__n128 sub_1BBA393B4(int a1, uint64_t a2, uint64_t a3, uint64_t _X3, uint64_t a5, char *a6)
{
  uint64_t v6 = 3 * a3;
  int v7 = a1 + 4;
  uint64_t v8 = 2 * a3;
  do
  {
    __n128 result = *(__n128 *)_X3;
    long long v10 = *(_OWORD *)(_X3 + 16);
    __asm { PRFUM           #0, [X3,#0x3F] }
    _X15 = _X3 + 4 * a3 + 31;
    __asm
    {
      PRFUM           #0, [X15,#-0x1F]
      PRFM            #0, [X15]
    }
    _X15 = _X3 + a3;
    long long v20 = *(_OWORD *)(_X3 + a3);
    long long v21 = *(_OWORD *)(_X3 + a3 + 16);
    __asm { PRFUM           #0, [X15,#0x3F] }
    _X16 = _X3 + 5 * a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0x1F]
    }
    _X16 = _X3 + v8;
    long long v27 = *(_OWORD *)(_X3 + 2 * a3);
    long long v28 = *(_OWORD *)(_X3 + v8 + 16);
    __asm { PRFUM           #0, [X16,#0x3F] }
    _X16 = _X3 + 6 * a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0x1F]
    }
    _X16 = _X3 + v6;
    long long v34 = *(_OWORD *)(_X3 + 3 * a3);
    long long v35 = *(_OWORD *)(_X3 + v6 + 16);
    __asm { PRFUM           #0, [X16,#0x3F] }
    _X16 = _X3 + 7 * a3;
    __asm
    {
      PRFM            #0, [X16]
      PRFUM           #0, [X16,#0x1F]
    }
    _X3 += a3 + 2 * a3 + a3;
    *(__n128 *)a6 = result;
    *((_OWORD *)a6 + 1) = v10;
    uint64_t v40 = &a6[a5];
    *(_OWORD *)uint64_t v40 = v20;
    *((_OWORD *)v40 + 1) = v21;
    uint64_t v41 = &a6[a5 + a5];
    *(_OWORD *)uint64_t v41 = v27;
    *((_OWORD *)v41 + 1) = v28;
    uint64_t v42 = &v41[a5];
    a6 = &v42[a5];
    v7 -= 4;
    *(_OWORD *)uint64_t v42 = v34;
    *((_OWORD *)v42 + 1) = v35;
  }
  while (v7 > 4);
  return result;
}

uint64_t sub_1BBA39470(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  unint64_t v6 = 0;
  do
  {
    int v7 = result + 2;
    uint64_t v8 = a4;
    long long v9 = a6;
    do
    {
      long long v10 = *(_OWORD *)((char *)v8 + 2 * a3);
      *long long v9 = *v8;
      *(_OWORD *)((char *)v9 + 2 * a5) = v10;
      long long v9 = (_OWORD *)((char *)v9 + 4 * a5);
      uint64_t v8 = (_OWORD *)((char *)v8 + 4 * a3);
      v7 -= 2;
    }
    while (v7 > 2);
    ++a6;
    ++a4;
    BOOL v11 = v6 >= 0x18;
    v6 += 8;
  }
  while (!v11);
  return result;
}

char *sub_1BBA394D4(int a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, _OWORD *a6)
{
  int v6 = a1 + 4;
  do
  {
    _X15 = &a4[4 * a3];
    _X16 = &a4[a3];
    _X17 = &a4[5 * a3];
    long long v10 = &a4[2 * a3];
    _X1 = &a4[6 * a3];
    _X6 = &a4[3 * a3];
    _X7 = &a4[7 * a3];
    long long v15 = *(_OWORD *)a4;
    _X3 = a4 + 31;
    long long v16 = v15;
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#0xF]
    }
    int16x8_t v24 = &_X16[2 * a3];
    long long v25 = *(_OWORD *)_X16;
    _X16 += 31;
    long long v26 = v25;
    __asm
    {
      PRFM            #0, [X16]
      PRFM            #0, [X17]
      PRFUM           #0, [X17,#0xF]
    }
    long long v31 = *(_OWORD *)v10;
    __n128 result = v10 + 31;
    long long v32 = v31;
    __asm
    {
      PRFM            #0, [X0]
      PRFM            #0, [X1]
      PRFUM           #0, [X1,#0xF]
    }
    long long v36 = *(_OWORD *)_X6;
    _X6 += 31;
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0xF]
    }
    a4 = &v24[a3];
    *a6 = v16;
    *(_OWORD *)((char *)a6 + a5) = v26;
    uint64_t v40 = (_OWORD *)((char *)a6 + a5 + a5);
    *uint64_t v40 = v32;
    a6 = (_OWORD *)((char *)v40 + a5 + a5);
    v6 -= 4;
    *(_OWORD *)((char *)v40 + a5) = v36;
  }
  while (v6 > 4);
  return result;
}

uint64_t sub_1BBA3958C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    long long v9 = (_OWORD *)(a4 + 2 * v6);
    int v10 = result + 2;
    BOOL v11 = (_OWORD *)(a6 + 2 * v6);
    do
    {
      long long v12 = *(_OWORD *)((char *)v9 + 2 * a3);
      *BOOL v11 = *v9;
      *(_OWORD *)((char *)v11 + 2 * a5) = v12;
      BOOL v11 = (_OWORD *)((char *)v11 + 4 * a5);
      long long v9 = (_OWORD *)((char *)v9 + 4 * a3);
      v10 -= 2;
    }
    while (v10 > 2);
    char v7 = 0;
    uint64_t v6 = 8;
  }
  while ((v8 & 1) != 0);
  return result;
}

double sub_1BBA395EC(int a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  int v6 = a1 + 2;
  do
  {
    _X11 = (char *)a4 + 4 * a3;
    _X12 = (uint64_t *)((char *)a4 + a3);
    _X13 = (char *)a4 + 5 * a3;
    double v11 = *a4;
    _X3 = (char *)a4 + 15;
    double result = v11;
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    a4 = (double *)((char *)_X12 + a3);
    uint64_t v20 = *_X12;
    _X12 = (uint64_t *)((char *)_X12 + 15);
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    *a6 = result;
    *(void *)((char *)a6 + a5) = v20;
    a6 = (double *)((char *)a6 + a5 + a5);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

uint64_t sub_1BBA39648(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  int v6 = result + 2;
  do
  {
    int v7 = *(_DWORD *)((char *)a4 + a3);
    *a6 = *a4;
    *(_DWORD *)((char *)a6 + a5) = v7;
    a6 = (_DWORD *)((char *)a6 + a5 + a5);
    a4 = (_DWORD *)((char *)a4 + 2 * a3);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

double sub_1BBA3967C(int a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, void *a6)
{
  int v6 = a1 + 2;
  do
  {
    double result = *a4;
    uint64_t v8 = *(void *)((char *)a4 + 2 * a3);
    *a6 = *(void *)a4;
    *(void *)((char *)a6 + 2 * a5) = v8;
    a6 = (void *)((char *)a6 + 4 * a5);
    a4 = (double *)((char *)a4 + 4 * a3);
    v6 -= 2;
  }
  while (v6 > 2);
  return result;
}

BOOL sub_1BBA396B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) - 7 < 2;
}

uint64_t sub_1BBA396CC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 24) < 0xEuLL) & (0x21C0u >> *(unsigned char *)(a1 + 24));
}

uint64_t sub_1BBA396E8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 24) < 0x14uLL) & (0x8003Eu >> *(unsigned char *)(a1 + 24));
}

uint64_t sub_1BBA39708(uint64_t a1, char *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 24) = 64;
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 > a3) {
    return 4294954387;
  }
  uint64_t result = 4294954387;
  if ((*a2 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 56) = *a2 >> 5;
    char v6 = *a2;
    *(unsigned char *)(a1 + 24) = *a2 & 0x1F;
    if ((v6 & 0x1E) != 0xA && v3 >= a3) {
      return 4294954387;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_1BBA39768()
{
}

uint64_t sub_1BBA39780(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = 35;
  do
  {
    unint64_t v5 = 0;
    if (v3) {
      size_t v6 = 65;
    }
    else {
      size_t v6 = 17;
    }
    if (v3 == 3) {
      uint64_t v7 = 3;
    }
    else {
      uint64_t v7 = 1;
    }
    uint64_t v8 = v4;
    do
    {
      if (v3) {
        long long v9 = (char *)&unk_1BBB784D9 + ((v5 > 2) | ((unint64_t)(v5 > 2) << 6));
      }
      else {
        long long v9 = (char *)&unk_1BBB784C8;
      }
      memcpy((void *)(a1 + v8), v9, v6);
      v5 += v7;
      v8 += 65 * v7;
    }
    while (v5 < 6);
    ++v3;
    v4 += 390;
  }
  while (v3 != 4);
  *(unsigned char *)(a1 + 1704) = 0;
  *(_OWORD *)(a1 + 1595) = 0u;
  *(_OWORD *)(a1 + 1611) = 0u;
  *(_OWORD *)(a1 + 1627) = 0u;
  *(_OWORD *)(a1 + 1643) = 0u;
  *(_OWORD *)(a1 + 1659) = 0u;
  *(_OWORD *)(a1 + 1675) = 0u;
  *(void *)(a1 + 1689) = 0;
  *(void *)(a1 + 1712) = a2;
  return a1;
}

uint64_t sub_1BBA39880(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 2696);
    uint64_t v8 = (void *)(*(void *)(a1 + 24) + 8);
    do
    {
      *((_DWORD *)v8 - 1) = v6;
      *uint64_t v8 = -1;
      v8 += 2;
      *(_DWORD *)(v7 + 4 * v6++) = -1;
    }
    while (v5 != v6);
  }
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 2688) = *(void *)(a2 + 32);
  if (*(unsigned char *)(*(void *)a1 + 600))
  {
    sub_1BBA26A04((void *)(a1 + 40), *(unsigned __int8 *)(*(void *)(a2 + 40) + 2000));
    bzero((void *)(a1 + 1512), 0x300uLL);
    unint64_t v9 = 0;
    do
    {
      unsigned int v10 = 0;
      a2 = *(void *)(a1 + 8);
      for (uint64_t i = 16; i != 288; i += 16)
      {
        if (*(void *)(*(void *)(a2 + 744) + i)) {
          ++v10;
        }
      }
      if (v9 >= v10)
      {
        *(_DWORD *)(a1 + 2300) = 0;
        goto LABEL_15;
      }
      uint64_t v12 = sub_1BBA39A24((void **)(a1 + 16 * v9++ + 1256), a3);
    }
    while (!v12);
    uint64_t v13 = v12;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v13;
    }
    __int16 v19 = 0;
    uint8x8_t v14 = MEMORY[0x1E4F14500];
    long long v15 = "8x8 collocated sad array creation failed\n";
    long long v16 = (uint8_t *)&v19;
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v13 = sub_1BBAB1F58(a1 + 2304, *(_DWORD *)(*(void *)(a2 + 584) + 3424), *(unsigned __int8 *)(*(void *)(a2 + 40) + 2000), *(_DWORD *)(*(void *)(a2 + 584) + 3248), *(char *)(a2 + 640));
  if (v13 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    __int16 v18 = 0;
    uint8x8_t v14 = MEMORY[0x1E4F14500];
    long long v15 = "Initialize rdcost_ failed\n";
    long long v16 = (uint8_t *)&v18;
LABEL_19:
    _os_log_error_impl(&dword_1BB9B9000, v14, OS_LOG_TYPE_ERROR, v15, v16, 2u);
  }
  return v13;
}

uint64_t sub_1BBA39A24(void **memptr, unint64_t a2)
{
  if ((unint64_t)memptr[1] >= a2) {
    return 0;
  }
  if (a2 > 0x1900000) {
    return 4294954392;
  }
  uint64_t v4 = *memptr;
  if (v4)
  {
    free(v4);
    *memptr = 0;
    memptr[1] = 0;
  }
  if (malloc_type_posix_memalign(memptr, 0x10uLL, 4 * a2, 0x100004052888210uLL) || !*memptr) {
    return 4294954392;
  }
  bzero(*memptr, 4 * a2);
  uint64_t result = 0;
  memptr[1] = (void *)a2;
  return result;
}

void *sub_1BBA39AC8(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v1 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v1 = a1;
  }
  v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(48 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

__n128 sub_1BBA39B34(__n128 *a1, __n128 *a2, unsigned int (**a3)(__n128 *, __n128 *), unint64_t a4, __n128 *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v9 = (uint64_t)a1;
    if (a4 == 2)
    {
      unsigned int v10 = a2 - 3;
      if ((*a3)(a2 - 3, a1))
      {
        uint64_t result = *(__n128 *)v9;
        __n128 v11 = *(__n128 *)(v9 + 16);
        __n128 v12 = *(__n128 *)(v9 + 32);
        __n128 v14 = a2[-2];
        __n128 v13 = a2[-1];
        *(__n128 *)uint64_t v9 = *v10;
        *(__n128 *)(v9 + 16) = v14;
        *(__n128 *)(v9 + 32) = v13;
        a2[-2] = v11;
        a2[-1] = v12;
        *unsigned int v10 = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      long long v27 = a5;
      unint64_t v28 = a4 >> 1;
      uint16x8_t v29 = &a1[3 * (a4 >> 1)];
      unint64_t v30 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        __n128 v31 = sub_1BBA39E14(a1, v29, a3, v30, a5, result);
        long long v32 = &v27[3 * v28];
        uint64_t result = sub_1BBA39E14((__n128 *)(v9 + 48 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), v32, v31);
        int16x8_t v33 = &v27[3 * a4];
        long long v34 = v32;
        while (v34 != v33)
        {
          if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a3)(v34, v27, result))
          {
            uint64_t result = *v34;
            __n128 v35 = v34[2];
            *(__n128 *)(v9 + 16) = v34[1];
            *(__n128 *)(v9 + 32) = v35;
            *(__n128 *)uint64_t v9 = result;
            v34 += 3;
          }
          else
          {
            uint64_t result = *v27;
            __n128 v36 = v27[2];
            *(__n128 *)(v9 + 16) = v27[1];
            *(__n128 *)(v9 + 32) = v36;
            *(__n128 *)uint64_t v9 = result;
            v27 += 3;
          }
          v9 += 48;
          if (v27 == v32)
          {
            if (v34 != v33)
            {
              uint64_t v37 = 0;
              do
              {
                uint64_t v38 = v9 + v37 * 16;
                uint64_t result = v34[v37];
                __n128 v39 = v34[v37 + 2];
                *(__n128 *)(v38 + 16) = v34[v37 + 1];
                *(__n128 *)(v38 + 32) = v39;
                *(__n128 *)uint64_t v38 = result;
                v37 += 3;
              }
              while (&v34[v37] != v33);
            }
            return result;
          }
        }
        if (v27 != v32)
        {
          uint64_t v40 = 0;
          do
          {
            uint64_t v41 = v9 + v40 * 16;
            uint64_t result = v27[v40];
            __n128 v42 = v27[v40 + 2];
            *(__n128 *)(v41 + 16) = v27[v40 + 1];
            *(__n128 *)(v41 + 32) = v42;
            *(__n128 *)uint64_t v41 = result;
            v40 += 3;
          }
          while (&v27[v40] != v32);
        }
      }
      else
      {
        sub_1BBA39B34(a1, v29, a3, v30, a5, a6);
        sub_1BBA39B34(v9 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v27, a6);
        sub_1BBA3A0C0(v9, (_OWORD *)(v9 + 48 * (a4 >> 1)), a2, (uint64_t (**)(void, void))a3, a4 >> 1, a4 - (a4 >> 1), (char *)v27, a6);
      }
    }
    else if (a1 != a2)
    {
      long long v16 = a1 + 3;
      if (&a1[3] != a2)
      {
        uint64_t v17 = 0;
        __int16 v18 = a1;
        do
        {
          __int16 v19 = v18;
          __int16 v18 = v16;
          if ((*a3)(v16, v19))
          {
            __n128 v20 = v18[1];
            __n128 v43 = *v18;
            __n128 v44 = v20;
            __n128 v45 = v18[2];
            uint64_t v21 = v17;
            while (1)
            {
              long long v22 = (_OWORD *)(v9 + v21);
              long long v23 = *(_OWORD *)(v9 + v21 + 16);
              v22[3] = *(_OWORD *)(v9 + v21);
              v22[4] = v23;
              v22[5] = *(_OWORD *)(v9 + v21 + 32);
              if (!v21) {
                break;
              }
              v21 -= 48;
              if ((((uint64_t (*)(__n128 *, uint64_t))*a3)(&v43, v21 + v9) & 1) == 0)
              {
                int16x8_t v24 = (_OWORD *)(v9 + v21 + 48);
                goto LABEL_15;
              }
            }
            int16x8_t v24 = (_OWORD *)v9;
LABEL_15:
            __n128 v25 = v44;
            *int16x8_t v24 = v43;
            v24[1] = v25;
            uint64_t result = v45;
            v24[2] = v45;
          }
          long long v16 = v18 + 3;
          v17 += 48;
        }
        while (&v18[3] != a2);
      }
    }
  }
  return result;
}

__n128 sub_1BBA39E14(__n128 *a1, __n128 *a2, unsigned int (**a3)(__n128 *, __n128 *), unint64_t a4, __n128 *a5, __n128 result)
{
  if (a4)
  {
    uint64_t v6 = a5;
    unsigned int v10 = a1;
    if (a4 == 2)
    {
      __n128 v12 = a2 - 3;
      if ((*a3)(a2 - 3, a1))
      {
        __n128 v13 = *v12;
        __n128 v14 = v12[2];
        v6[1] = v12[1];
        v6[2] = v14;
        *uint64_t v6 = v13;
        uint64_t result = *v10;
        __n128 v15 = v10[1];
        __n128 v16 = v10[2];
      }
      else
      {
        __n128 v27 = *v10;
        __n128 v28 = v10[2];
        v6[1] = v10[1];
        v6[2] = v28;
        *uint64_t v6 = v27;
        uint64_t result = *v12;
        __n128 v15 = v12[1];
        __n128 v16 = v12[2];
      }
      v6[4] = v15;
      v6[5] = v16;
      v6[3] = result;
    }
    else if (a4 == 1)
    {
      uint64_t result = *a1;
      __n128 v11 = a1[2];
      a5[1] = a1[1];
      a5[2] = v11;
      *a5 = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      uint16x8_t v29 = &a1[3 * (a4 >> 1)];
      sub_1BBA39B34(a1, v29, a3, a4 >> 1, a5, a4 >> 1);
      sub_1BBA39B34(&v10[3 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), &v6[3 * (a4 >> 1)], a4 - (a4 >> 1));
      unint64_t v30 = &v10[3 * (a4 >> 1)];
      while (v30 != a2)
      {
        if ((*a3)(v30, v10))
        {
          uint64_t result = *v30;
          __n128 v31 = v30[2];
          v6[1] = v30[1];
          v6[2] = v31;
          *uint64_t v6 = result;
          v30 += 3;
        }
        else
        {
          uint64_t result = *v10;
          __n128 v32 = v10[2];
          v6[1] = v10[1];
          v6[2] = v32;
          *uint64_t v6 = result;
          v10 += 3;
        }
        v6 += 3;
        if (v10 == v29)
        {
          if (v30 != a2)
          {
            unint64_t v33 = 0;
            do
            {
              long long v34 = &v6[v33];
              uint64_t result = v30[v33];
              __n128 v35 = v30[v33 + 2];
              v34[1] = v30[v33 + 1];
              v34[2] = v35;
              *long long v34 = result;
              v33 += 3;
            }
            while (&v30[v33] != a2);
          }
          return result;
        }
      }
      if (v10 != v29)
      {
        unint64_t v36 = 0;
        do
        {
          uint64_t v37 = &v6[v36];
          uint64_t result = v10[v36];
          __n128 v38 = v10[v36 + 2];
          v37[1] = v10[v36 + 1];
          v37[2] = v38;
          *uint64_t v37 = result;
          v36 += 3;
        }
        while (&v10[v36] != v29);
      }
    }
    else if (a1 != a2)
    {
      uint64_t result = *a1;
      __n128 v17 = a1[2];
      a5[1] = a1[1];
      a5[2] = v17;
      *a5 = result;
      __int16 v18 = a1 + 3;
      if (&a1[3] != a2)
      {
        uint64_t v19 = 0;
        __n128 v20 = a5;
        do
        {
          uint64_t v21 = v20;
          v20 += 3;
          long long v22 = v20;
          if ((*a3)(v18, v21))
          {
            __n128 v23 = v21[1];
            *__n128 v20 = *v21;
            v20[1] = v23;
            v20[2] = v21[2];
            long long v22 = v6;
            if (v21 != v6)
            {
              uint64_t v24 = v19;
              while (1)
              {
                long long v22 = (__n128 *)((char *)v6 + v24);
                if (!(*a3)(v18, (__n128 *)((char *)v6 + v24 - 48))) {
                  break;
                }
                __n128 v25 = *(__n128 *)((char *)v6 + v24 - 32);
                *long long v22 = *(__n128 *)((char *)v6 + v24 - 48);
                v22[1] = v25;
                v22[2] = *(__n128 *)((char *)v6 + v24 - 16);
                v24 -= 48;
                if (!v24)
                {
                  long long v22 = v6;
                  break;
                }
              }
            }
          }
          uint64_t result = *v18;
          __n128 v26 = v18[2];
          v22[1] = v18[1];
          v22[2] = v26;
          *long long v22 = result;
          v18 += 3;
          v19 += 48;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1BBA3A0C0(uint64_t result, _OWORD *a2, _OWORD *a3, uint64_t (**a4)(void, void), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    __n128 v15 = (_OWORD *)result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      while (1)
      {
        uint64_t result = (*a4)(a2, v15);
        if (result) {
          break;
        }
        v15 += 3;
        if (!--a5) {
          return result;
        }
      }
      int32x4_t v89 = a4;
      int32x4_t v90 = a7;
      uint64_t v87 = v10;
      int32x4_t v88 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          long long v99 = v15[1];
          long long v104 = v15[2];
          long long v95 = *v15;
          long long v78 = *a2;
          long long v79 = a2[2];
          v15[1] = a2[1];
          v15[2] = v79;
          *__n128 v15 = v78;
          a2[1] = v99;
          a2[2] = v104;
          *a2 = v95;
          return result;
        }
        if (a5 >= 0) {
          uint64_t v23 = a5;
        }
        else {
          uint64_t v23 = a5 + 1;
        }
        uint64_t v24 = v23 >> 1;
        uint64_t v21 = &v15[3 * (v23 >> 1)];
        if (a3 == a2)
        {
          __int16 v18 = a3;
          uint16x8_t v29 = a3;
        }
        else
        {
          uint64_t v85 = v23 >> 1;
          uint64_t v86 = a8;
          __n128 v25 = *v89;
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
          __int16 v18 = a2;
          do
          {
            __n128 v27 = &v18[3 * (v26 >> 1)];
            int v28 = v25(v27, v21);
            if (v28) {
              v26 += ~(v26 >> 1);
            }
            else {
              v26 >>= 1;
            }
            if (v28) {
              __int16 v18 = v27 + 3;
            }
          }
          while (v26);
          uint16x8_t v29 = a2;
          uint64_t v24 = v85;
          a8 = v86;
        }
        uint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v18 - v29);
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = v10 + 1;
        }
        uint64_t v17 = v16 >> 1;
        __int16 v18 = &a2[3 * (v16 >> 1)];
        if (a2 == v15)
        {
          uint64_t v21 = a2;
          long long v22 = a2;
        }
        else
        {
          uint64_t v84 = v16 >> 1;
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (a2 - v15);
          __n128 v20 = (unsigned int (**)(_OWORD *, uint64_t))a4;
          uint64_t v21 = v15;
          do
          {
            if ((*v20)(v18, (uint64_t)&v21[3 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v21 += 3 * (v19 >> 1) + 3;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          long long v22 = v15;
          uint64_t v17 = v84;
        }
        uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v21 - v22);
      }
      a3 = v18;
      if (v21 != a2)
      {
        a3 = v21;
        if (a2 != v18)
        {
          if (v21 + 3 == a2)
          {
            long long v97 = v21[1];
            long long v101 = v21[2];
            long long v92 = *v21;
            int64_t v36 = (char *)v18 - (char *)a2;
            uint64_t v37 = a2;
            size_t v38 = (char *)v18 - (char *)a2;
            uint64_t v39 = v17;
            memmove(v21, v37, v38);
            uint64_t v17 = v39;
            a3 = (_OWORD *)((char *)v21 + v36);
            *a3 = v92;
            a3[1] = v97;
            a3[2] = v101;
          }
          else if (a2 + 3 == v18)
          {
            a3 = v21 + 3;
            long long v98 = *(v18 - 2);
            long long v102 = *(v18 - 1);
            long long v93 = *(v18 - 3);
            if (v18 - 3 != v21)
            {
              uint64_t v40 = v17;
              memmove(v21 + 3, v21, (char *)(v18 - 3) - (char *)v21);
              uint64_t v17 = v40;
            }
            v21[1] = v98;
            v21[2] = v102;
            *uint64_t v21 = v93;
          }
          else
          {
            unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (a2 - v21);
            if (v30 == 0xAAAAAAAAAAAAAAABLL * (v18 - a2))
            {
              uint64_t v31 = 0;
              do
              {
                __n128 v32 = &a2[v31];
                unint64_t v33 = &v21[v31];
                long long v96 = v21[v31 + 1];
                long long v100 = v21[v31 + 2];
                long long v91 = v21[v31];
                long long v34 = a2[v31];
                long long v35 = a2[v31 + 2];
                v33[1] = a2[v31 + 1];
                v33[2] = v35;
                *unint64_t v33 = v34;
                v32[1] = v96;
                v32[2] = v100;
                *__n128 v32 = v91;
                if (&v21[v31 + 3] == a2) {
                  break;
                }
                v31 += 3;
              }
              while (v32 + 3 != v18);
              a3 = a2;
            }
            else
            {
              uint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (v18 - a2);
              unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (a2 - v21);
              do
              {
                uint64_t v43 = v42;
                unint64_t v42 = v41;
                uint64_t v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                __n128 v44 = &v21[3 * v42];
                do
                {
                  long long v45 = *(v44 - 3);
                  long long v46 = *(v44 - 2);
                  long long v47 = *(v44 - 1);
                  v44 -= 3;
                  long long v103 = v47;
                  long long v94 = v45;
                  int16x8_t v48 = &v44[a2 - v21];
                  uint8x8_t v49 = v44;
                  do
                  {
                    uint8x8_t v50 = v49;
                    uint8x8_t v49 = v48;
                    long long v51 = *v48;
                    long long v52 = v48[2];
                    v50[1] = v48[1];
                    v50[2] = v52;
                    *uint8x8_t v50 = v51;
                    unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (v18 - v48);
                    BOOL v54 = __OFSUB__(v30, v53);
                    uint64_t v56 = v30 - v53;
                    char v55 = (v56 < 0) ^ v54;
                    int16x8_t v48 = &v21[3 * v56];
                    if (v55) {
                      int16x8_t v48 = &v49[a2 - v21];
                    }
                  }
                  while (v48 != v44);
                  v49[1] = v46;
                  v49[2] = v103;
                  *uint8x8_t v49 = v94;
                }
                while (v44 != v21);
              }
              a3 = &v21[v18 - a2];
            }
          }
        }
      }
      a5 -= v24;
      uint64_t v10 = v87 - v17;
      if (v24 + v17 >= a5 + v87 - v17)
      {
        uint64_t v58 = a5;
        uint64_t v59 = v17;
        uint64_t result = sub_1BBA3A0C0(a3, v18, v88, v89, v58, v87 - v17, v90, a8);
        __int16 v18 = v21;
        a4 = v89;
        uint64_t v10 = v59;
        a5 = v24;
      }
      else
      {
        int32x4_t v57 = v21;
        a4 = v89;
        uint64_t result = sub_1BBA3A0C0(v15, v57, a3, v89, v24, v17, v90, a8);
        __n128 v15 = a3;
        a3 = v88;
      }
      a2 = v18;
      a7 = v90;
      if (!v10) {
        return result;
      }
    }
    if (a5 <= v10)
    {
      if (v15 != a2)
      {
        uint64_t v69 = 0;
        do
        {
          int32x4_t v70 = &a7[v69 * 16];
          long long v71 = v15[v69];
          long long v72 = v15[v69 + 2];
          *((_OWORD *)v70 + 1) = v15[v69 + 1];
          *((_OWORD *)v70 + 2) = v72;
          *(_OWORD *)int32x4_t v70 = v71;
          v69 += 3;
        }
        while (&v15[v69] != a2);
        int16x4_t v73 = &a7[v69 * 16];
        if (&a7[v69 * 16] != a7)
        {
          while (a2 != a3)
          {
            uint64_t result = (*a4)(a2, a7);
            if (result)
            {
              long long v74 = *a2;
              long long v75 = a2[2];
              v15[1] = a2[1];
              v15[2] = v75;
              *__n128 v15 = v74;
              a2 += 3;
            }
            else
            {
              long long v76 = *(_OWORD *)a7;
              long long v77 = *((_OWORD *)a7 + 2);
              v15[1] = *((_OWORD *)a7 + 1);
              v15[2] = v77;
              *__n128 v15 = v76;
              a7 += 48;
            }
            v15 += 3;
            if (a7 == v73) {
              return result;
            }
          }
          return (uint64_t)memmove(v15, a7, v73 - a7);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v60 = 0;
      do
      {
        uint16x8_t v61 = &a7[v60 * 16];
        long long v62 = a2[v60];
        long long v63 = a2[v60 + 2];
        *((_OWORD *)v61 + 1) = a2[v60 + 1];
        *((_OWORD *)v61 + 2) = v63;
        *(_OWORD *)uint16x8_t v61 = v62;
        v60 += 3;
      }
      while (&a2[v60] != a3);
      int32x4_t v64 = &a7[v60 * 16];
      if (&a7[v60 * 16] != a7)
      {
        int32x4_t v65 = a3 - 3;
        while (a2 != v15)
        {
          uint64_t result = (*a4)(v64 - 48, a2 - 3);
          if (result) {
            int16x4_t v66 = (char *)(a2 - 3);
          }
          else {
            int16x4_t v66 = v64 - 48;
          }
          if (result) {
            a2 -= 3;
          }
          else {
            v64 -= 48;
          }
          long long v68 = *((_OWORD *)v66 + 1);
          long long v67 = *((_OWORD *)v66 + 2);
          *int32x4_t v65 = *(_OWORD *)v66;
          v65[1] = v68;
          v65[2] = v67;
          v65 -= 3;
          if (v64 == a7) {
            return result;
          }
        }
        unint64_t v80 = 0;
        do
        {
          int32x4_t v81 = &v65[v80 / 0x10];
          long long v82 = *(_OWORD *)&v64[v80 - 48];
          long long v83 = *(_OWORD *)&v64[v80 - 16];
          v81[1] = *(_OWORD *)&v64[v80 - 32];
          v81[2] = v83;
          *int32x4_t v81 = v82;
          v80 -= 48;
        }
        while (&v64[v80] != a7);
      }
    }
  }
  return result;
}

BOOL sub_1BBA3A6E4(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2 < 0) {
    int v2 = -v2;
  }
  int v3 = *(_DWORD *)(a2 + 36);
  if (v3 < 0) {
    int v3 = -v3;
  }
  return v2 < v3;
}

BOOL sub_1BBA3A708(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 28) > *(_DWORD *)(a2 + 28);
}

BOOL sub_1BBA3A71C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) > *(_DWORD *)(a2 + 24);
}

void *sub_1BBA3A730(void *a1)
{
  int v2 = (void **)(a1 + 9826);
  int v3 = (void **)(a1 + 9769);
  BOOL v4 = a1[9828];
  if (v4) {
    dispatch_release(v4);
  }
  if (*v2)
  {
    free(*v2);
    const std::nothrow_t *v2 = 0;
    v2[1] = 0;
  }
  uint64_t v5 = v3[11];
  if (v5)
  {
    free(v5);
    v3[11] = 0;
    v3[12] = 0;
  }
  if (*v3)
  {
    free(*v3);
    *int v3 = 0;
    v3[1] = 0;
  }

  return sub_1BBA17AC0(a1);
}

uint64_t sub_1BBA3A7BC(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(int *)(a1 + 4);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 1368);
    if (v2 <= (*(_DWORD *)(v3 + 2020) * *(_DWORD *)(v3 + 2016) - 1))
    {
      if (*(unsigned char *)(a1 + 8)) {
        return 1;
      }
      if (!*(unsigned char *)(v3 + 174) || *(unsigned __int8 *)(a1 + 12) <= 2u)
      {
        uint64_t v1 = *(unsigned __int8 *)(a1 + 600);
        if (!*(unsigned char *)(a1 + 600))
        {
          int v5 = *(_DWORD *)(a1 + 16);
          if (v5 < 0) {
            return v1;
          }
          if (v5 >= *(_DWORD *)(v3 + 2004)) {
            return v1;
          }
          if (*(unsigned char *)(a1 + 20))
          {
            uint64_t v1 = 0;
            uint64_t v6 = *(int *)(a1 + 272);
            if ((v6 & 0x80000000) != 0 || v6 > (*(_DWORD *)(v3 + 260) - 1)) {
              return v1;
            }
          }
        }
        if (*(unsigned __int8 *)(a1 + 10) > 1u
          || (!*(unsigned char *)(a1 + 498)
           || (!*(unsigned char *)(a1 + 538) ? (uint64_t v4 = *(char *)(a1 + 501)) : (uint64_t v4 = *(char *)(a1 + 500)),
               v4 > *(unsigned __int8 *)(a1 + 539)))
          && *(unsigned __int8 *)(a1 + 542) <= 4u)
        {
          uint64_t v7 = *(char **)(a1 + 1384);
          uint64_t v8 = v7[9] + (uint64_t)*(char *)(a1 + 543) + 26;
          uint64_t v9 = -(uint64_t)*(unsigned __int8 *)(v3 + 2001);
          BOOL v10 = v8 > 51 || v8 < v9;
          if (!v10
            && (!v7[16]
             || (unint64_t)(v7[14] + (uint64_t)*(char *)(a1 + 544) + 12) <= 0x18
             && (unint64_t)(v7[15] + (uint64_t)*(char *)(a1 + 545) + 12) <= 0x18)
            && (!v7[29]
             || (*(unsigned char *)(a1 + 548) + 6) <= 0xCu
             && (*(unsigned char *)(a1 + 549) + 6) <= 0xCu))
          {
            return 1;
          }
        }
      }
      return 0;
    }
  }
  return v1;
}

uint64_t sub_1BBA3A928(BOOL *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (uint64_t)(a1 + 3488);
  *a1 = sub_1BBA196DC((uint64_t)(a1 + 3488), 1) != 0;
  BOOL v7 = a1[601];
  if (v7) {
    BOOL v7 = sub_1BBA196DC(v6, 1) != 0;
  }
  a1[1] = v7;
  unsigned __int8 v8 = sub_1BBA1979C(v6);
  a1[2] = v8;
  uint64_t v9 = v8;
  if (v8 > 0x3Fu) {
    return 4294954387;
  }
  *(unsigned char *)(a2 + 352) = v8;
  if (!a3) {
    return 0;
  }
  if (*a1)
  {
    *(_DWORD *)(a2 + 344) = 0;
  }
  else
  {
    unint64_t v12 = *(unsigned __int8 *)(a2 + v8 + 150);
    if (v12 > 0xF) {
      return 4294954387;
    }
    char v13 = *(unsigned char *)(a2 + v12 + 132);
    if ((v13 - 7) < 0xFDu) {
      return 4294954387;
    }
    if (*(unsigned char *)(a2 + v8 + 214))
    {
      BOOL v14 = sub_1BBA196DC(v6, 1) == 0;
      char v13 = *(unsigned char *)(a2 + v12 + 132);
    }
    else
    {
      BOOL v14 = 1;
    }
    unsigned int v15 = ((*(_DWORD *)(a2 + 4 * v12 + 4) + ~(-1 << v13)) >> v13)
        * ((*(_DWORD *)(a2 + 4 * v12 + 68) + ~(-1 << v13)) >> v13);
    unsigned int v16 = 31 - __clz(v15);
    if (!v15) {
      unsigned int v16 = 0;
    }
    if ((v15 & (v15 - 1)) != 0) {
      int v17 = v16 + 1;
    }
    else {
      int v17 = v16;
    }
    *(_DWORD *)(a2 + 344) = sub_1BBA19734(v6, v17);
    if (!v14) {
      return 4294954386;
    }
  }
  if (*(unsigned char *)(a2 + v9 + 278)) {
    sub_1BBA196DC(v6, *(unsigned __int8 *)(a2 + v9 + 278));
  }
  unsigned int v11 = sub_1BBA1979C(v6);
  *(_DWORD *)(a2 + 348) = v11;
  if (v11 <= 2) {
    return 0;
  }
  else {
    return 4294954387;
  }
}

uint64_t sub_1BBA3AAC0(BOOL *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 3488);
  int v9 = sub_1BBA196DC((uint64_t)(a1 + 3488), 1);
  if (v9)
  {
    *(_WORD *)(a1 + 1) = 0;
    *((_DWORD *)a1 + 1) = 0;
    a1[8] = 0;
    *((_WORD *)a1 + 5) = 258;
    a1[12] = 0;
    *((_DWORD *)a1 + 4) = 0;
    a1[20] = 0;
    *((_DWORD *)a1 + 68) = 0;
    *((_OWORD *)a1 + 31) = 0u;
    *((_OWORD *)a1 + 32) = 0u;
    *((_OWORD *)a1 + 33) = 0u;
    *(void *)(a1 + 542) = 0;
    a1[550] = 1;
    *((_DWORD *)a1 + 138) = 0;
    a1[556] = 0;
    *((_WORD *)a1 + 288) = 0;
  }
  *a1 = v9 != 0;
  unsigned __int8 v10 = a1[601];
  if (v10) {
    unsigned __int8 v10 = sub_1BBA196DC(v8, 1) != 0;
  }
  a1[1] = v10;
  unsigned __int8 v11 = sub_1BBA1979C(v8);
  a1[2] = v11;
  if (!a4 && *a1 != a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294954387;
    }
    LOWORD(v189) = 0;
    int32x4_t v57 = MEMORY[0x1E4F14500];
    uint64_t v58 = "first_slice_in_pic_flag mismatch\n";
LABEL_74:
    _os_log_error_impl(&dword_1BB9B9000, v57, OS_LOG_TYPE_ERROR, v58, (uint8_t *)&v189, 2u);
    return 4294954387;
  }
  if (!a4 && !*a1)
  {
    BOOL v14 = (unsigned __int8 *)*((void *)a1 + 173);
    if (!v14 || (uint64_t v15 = *((void *)a1 + 171)) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v189) = 0;
        _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Missing SPS or PPS for secondary slice\n", (uint8_t *)&v189, 2u);
      }
      return 4294954385;
    }
    if (*v14 != v11 || *(unsigned __int8 *)(v15 + 172) != v14[1])
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294954387;
      }
      LOWORD(v189) = 0;
      int32x4_t v57 = MEMORY[0x1E4F14500];
      uint64_t v58 = "Secondary slice points to different SPS/PPS\n";
      goto LABEL_74;
    }
    goto LABEL_16;
  }
  __n128 v25 = (uint64_t *)(a2 + 16 * v11 + 512);
  if ((v11 & 0xC0) != 0) {
    __n128 v25 = (uint64_t *)(a2 + 1568);
  }
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)a1 + 173) = v27;
  int v28 = (std::__shared_weak_count *)*((void *)a1 + 174);
  *((void *)a1 + 174) = v26;
  if (v28)
  {
    sub_1BB9C09B4(v28);
    uint64_t v27 = *((void *)a1 + 173);
  }
  if (!v27) {
    return 4294954387;
  }
  uint64_t v29 = *(void *)(v27 + 1712);
  uint64_t v30 = *(unsigned __int8 *)(v27 + 1);
  uint64_t v31 = v29 + 1552;
  uint64_t v32 = v29 + 16 * v30 + 256;
  unint64_t v33 = (unsigned __int8 **)(v30 <= 0xF ? v32 : v31);
  long long v34 = *v33;
  if (!*v33) {
    return 4294954387;
  }
  uint64_t v35 = *((void *)v34 + 259);
  uint64_t v36 = *v34;
  uint64_t v37 = (uint64_t *)(v35 + 1536);
  size_t v38 = (uint64_t *)(v35 + 16 * v36);
  if (v36 <= 0xF) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = v37;
  }
  uint64_t v41 = *v39;
  uint64_t v40 = (std::__shared_weak_count *)v39[1];
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v41)
  {
    uint64_t v42 = v34[1];
    uint64_t v43 = v42 + 1;
    __n128 v44 = (unsigned __int8 *)(v41 + 172);
    long long v45 = v34 + 198;
    do
    {
      unsigned int v47 = *v45++;
      unsigned int v46 = v47;
      unsigned int v48 = *v44++;
      if (v46 > v48) {
        goto LABEL_149;
      }
      --v43;
    }
    while (v43);
    if (*(unsigned char *)(v41 + 240) && !v34[1920])
    {
      *(void *)(v34 + 1924) = *(void *)(v41 + 244);
      v34[1932] = *(unsigned char *)(v41 + 252);
    }
    BOOL v49 = 0;
    uint64_t v12 = 4294954387;
    if (v42 > 6 || v42 > *(unsigned __int8 *)(v41 + 169)) {
      goto LABEL_150;
    }
    unint64_t v50 = v34[173];
    if (v50 > 3) {
      goto LABEL_67;
    }
    BOOL v49 = 0;
    int v51 = *((_DWORD *)v34 + 44);
    if (v51 < 1) {
      goto LABEL_150;
    }
    int v52 = v34[156] - 1;
    uint64_t v53 = v34[163];
    uint64_t v54 = word_1BBB79F5C[3 * v52 + v53];
    if (v51 > v54) {
      goto LABEL_150;
    }
    BOOL v49 = 0;
    int v55 = *((_DWORD *)v34 + 45);
    if (v55 < 1 || v55 > v54) {
      goto LABEL_150;
    }
    if ((v55 * v51) > dword_1BBB79F14[3 * v52 + v53]
      || (unsigned int v56 = v34[2008], ((v51 | v55) & ~(-1 << v56)) != 0)
      || v34[184]
      && (*((unsigned __int16 *)v34 + 93) > (uint64_t)(v51 / byte_1BBB83E80[2 * v50] + ~*((unsigned __int16 *)v34 + 94))
       || *((unsigned __int16 *)v34 + 95) > (uint64_t)(v55 / byte_1BBB83E80[2 * v50 + 1]
                                                    + ~*((unsigned __int16 *)v34 + 96)))
      || v34[194] > 6u
      || v34[195] > 6u
      || (unsigned int v65 = v34[196], v65 > 0xC))
    {
LABEL_67:
      BOOL v49 = 0;
      goto LABEL_150;
    }
    uint64_t v66 = 0;
    uint64_t v67 = v42 + 1;
    long long v68 = v34 + 198;
    while (1)
    {
      unsigned int v69 = v68[v66 + 7];
      unsigned int v70 = v68[v66];
      if (v69 > v70) {
        break;
      }
      unsigned int v71 = *(_DWORD *)&v34[4 * v66 + 212];
      if (v71 > 0xFFFFFFFD) {
        break;
      }
      if (v66)
      {
        long long v72 = &v34[(v66 - 1)];
        unsigned int v73 = v72[198];
        unsigned int v74 = v72[205];
      }
      else
      {
        unsigned int v73 = 0;
        unsigned int v74 = 0;
      }
      if (v70 < v73 || v70 > *(unsigned __int8 *)(v41 + v66 + 172)) {
        break;
      }
      BOOL v49 = 0;
      if (v69 < v74 || v69 > *(unsigned __int8 *)(v41 + v66 + 179)) {
        goto LABEL_150;
      }
      if (*(_DWORD *)(v41 + 188 + 4 * v66) - 1 < v71 - 1) {
        break;
      }
      if (v67 == ++v66)
      {
        if (v34[280])
        {
          uint64_t v76 = *((unsigned int *)v34 + 71);
          if (v76)
          {
            unsigned int v77 = v65 + 4;
            long long v78 = (unsigned __int16 *)(v34 + 288);
            do
            {
              unsigned int v79 = *v78++;
              if (v77 < v79) {
                goto LABEL_149;
              }
            }
            while (--v76);
          }
        }
        if (v56 - 3 > 3) {
          break;
        }
        unsigned int v80 = v34[2009];
        if ((v80 - 3) > 3u) {
          break;
        }
        BOOL v49 = 0;
        unsigned int v81 = v34[2011];
        if (v80 >= 5) {
          unsigned int v80 = 5;
        }
        uint64_t v12 = 4294954387;
        if (v81 <= v80 && v81 >= 2)
        {
          BOOL v49 = 0;
          unsigned int v82 = v34[2010];
          if (v82 <= v81 && v82 >= 2)
          {
            if (v34[250])
            {
              if (v56 >= 5) {
                unsigned int v56 = 5;
              }
              if (v34[251] >= v34[2000] || v34[252] >= v34[2002]) {
                goto LABEL_67;
              }
              BOOL v49 = 0;
              unsigned int v83 = v34[258];
              if (v83 > v80) {
                goto LABEL_150;
              }
              if (v56 > v83) {
                goto LABEL_150;
              }
              BOOL v49 = 0;
              unsigned int v84 = v34[259];
              if (v84 > v80 || v56 > v84) {
                goto LABEL_150;
              }
            }
            if (!v34[327] && !v34[328] && !v34[329] && !v34[330] && !v34[331] && !v34[332] && !v34[333] && !v34[334])
            {
              int v85 = v34[335];
              BOOL v49 = v85 == 0;
              if (v85) {
                uint64_t v12 = 4294954387;
              }
              else {
                uint64_t v12 = 0;
              }
              goto LABEL_150;
            }
            goto LABEL_67;
          }
        }
        goto LABEL_150;
      }
    }
  }
LABEL_149:
  BOOL v49 = 0;
  uint64_t v12 = 4294954387;
LABEL_150:
  if (v40) {
    sub_1BB9C09B4(v40);
  }
  if (v49)
  {
    uint64_t v86 = *v33;
    int v87 = *((_DWORD *)*v33 + 504);
    *(_DWORD *)(v27 + 1688) = v87;
    int v88 = *((_DWORD *)v86 + 505);
    *(_DWORD *)(v27 + 1692) = v88;
    if (*(unsigned char *)(v27 + 1696))
    {
      if (*(unsigned char *)(v27 + 26))
      {
        LODWORD(v89) = *(unsigned __int16 *)(v27 + 22);
        if (*(_WORD *)(v27 + 22))
        {
          int v90 = 0;
          unint64_t v91 = 0;
          uint64_t v92 = *(void *)(v27 + 1624);
          do
          {
            int v93 = v89 + 1;
            int v94 = v90 / v93;
            v90 += v87;
            *(_WORD *)(v92 + 2 * v91) = ~(_WORD)v94 + v90 / v93;
            unint64_t v89 = *(unsigned __int16 *)(v27 + 22);
            ++v91;
          }
          while (v91 < v89);
        }
        LODWORD(v95) = *(unsigned __int16 *)(v27 + 24);
        if (*(_WORD *)(v27 + 24))
        {
          int v96 = 0;
          unint64_t v97 = 0;
          uint64_t v98 = *(void *)(v27 + 1640);
          do
          {
            int v99 = v95 + 1;
            int v100 = v96 / v99;
            v96 += v88;
            *(_WORD *)(v98 + 2 * v97) = ~(_WORD)v100 + v96 / v99;
            unint64_t v95 = *(unsigned __int16 *)(v27 + 24);
            ++v97;
          }
          while (v97 < v95);
        }
      }
      if (*(_WORD *)(v27 + 22))
      {
        long long v101 = *(unsigned __int16 **)(v27 + 1624);
        uint64_t v102 = *(unsigned __int16 *)(v27 + 22);
        int v103 = v87;
        do
        {
          int v104 = *v101++;
          v103 += ~v104;
          --v102;
        }
        while (v102);
      }
      else
      {
        int v103 = v87;
      }
      uint64_t v105 = *(unsigned __int16 *)(v27 + 24);
      if (*(_WORD *)(v27 + 24))
      {
        int16x8_t v106 = *(unsigned __int16 **)(v27 + 1640);
        do
        {
          int v107 = *v106++;
          v88 += ~v107;
          --v105;
        }
        while (v105);
      }
      uint64_t v12 = 4294954387;
      BOOL v108 = __OFSUB__(v103, 1);
      int v109 = v103 - 1;
      if (v109 < 0 != v108) {
        return v12;
      }
      BOOL v108 = __OFSUB__(v88, 1);
      int v110 = v88 - 1;
      if (v110 < 0 != v108) {
        return v12;
      }
      *(_WORD *)(*(void *)(v27 + 1624) + 2 * *(unsigned __int16 *)(v27 + 22)) = v109;
      *(_WORD *)(*(void *)(v27 + 1640) + 2 * *(unsigned __int16 *)(v27 + 24)) = v110;
      uint64_t v12 = sub_1BBA19348((void **)(v27 + 1656), v87);
      if (v12) {
        return v12;
      }
      uint64_t v12 = sub_1BBA19348((void **)(v27 + 1672), *(int *)(v27 + 1692));
      if (v12) {
        return v12;
      }
      uint64_t v12 = sub_1BBA19404(*(_DWORD *)(v27 + 1688), *(unsigned __int16 *)(v27 + 22) + 1, *(void *)(v27 + 1624), *(void *)(v27 + 1656));
      if (v12) {
        return v12;
      }
      uint64_t v12 = sub_1BBA19404(*(_DWORD *)(v27 + 1692), *(unsigned __int16 *)(v27 + 24) + 1, *(void *)(v27 + 1640), *(void *)(v27 + 1672));
      if (v12) {
        return v12;
      }
      uint64_t v86 = *v33;
    }
    if (!*(unsigned char *)(v27 + 34))
    {
      memcpy((void *)(v27 + 35), v86 + 336, 0x618uLL);
      uint64_t v86 = *v33;
    }
    int v111 = v86[2009];
    unsigned int v112 = *(unsigned __int8 *)(v27 + 13);
    *(_DWORD *)(v27 + 1620) = v111 - v112;
    uint64_t v113 = *(void *)(v27 + 1712);
    uint64_t v114 = *(unsigned __int8 *)(v27 + 1);
    int16x8_t v115 = (uint64_t *)(v113 + 1552);
    int16x8_t v116 = (uint64_t *)(v113 + 16 * v114 + 256);
    if (v114 > 0xF) {
      int16x8_t v116 = v115;
    }
    uint64_t v117 = *v116;
    if (!v117) {
      goto LABEL_208;
    }
    if (*(unsigned __int8 *)(v27 + 7) > 0xEu || *(unsigned __int8 *)(v27 + 8) > 0xEu) {
      return 4294954387;
    }
    uint64_t v118 = *(char *)(v27 + 9);
    uint64_t v12 = 4294954387;
    if (v118 <= 25 && -26 - *(unsigned __int8 *)(v117 + 2001) <= v118)
    {
      unsigned int v119 = *(unsigned __int8 *)(v117 + 241);
      if (v112 <= v119
        && (*(unsigned char *)(v27 + 14) + 12) <= 0x18u
        && (*(unsigned char *)(v27 + 15) + 12) <= 0x18u
        && (!*(unsigned char *)(v27 + 20)
         || *(_DWORD *)(v117 + 2016) - 1 >= *(unsigned __int16 *)(v27 + 22)
         && *(_DWORD *)(v117 + 2020) - 1 >= *(unsigned __int16 *)(v27 + 24))
        && (!*(unsigned char *)(v27 + 29)
         || *(unsigned char *)(v27 + 31)
         || (*(unsigned char *)(v27 + 32) + 6) <= 0xCu && (*(unsigned char *)(v27 + 33) + 6) <= 0xCu)
        && *(unsigned __int8 *)(v117 + 2009) - 2 >= *(unsigned __int16 *)(v27 + 1596)
        && (!*(unsigned char *)(v27 + 20) || !*(unsigned char *)(v27 + 21)))
      {
        if (!*(unsigned char *)(v27 + 1600)) {
          goto LABEL_208;
        }
        if (*(unsigned __int8 *)(v117 + 2011) - 2 >= *(unsigned __int8 *)(v27 + 1601)
          && *(unsigned __int8 *)(v27 + 1604) <= v119)
        {
          unsigned int v120 = *(unsigned __int8 *)(v117 + 2000);
          if (v120 <= 0xA) {
            unsigned int v120 = 10;
          }
          if (v120 - 10 >= *(unsigned __int8 *)(v27 + 1618))
          {
            int v121 = *(unsigned __int8 *)(v117 + 2002);
            if (v121 <= 10) {
              int v121 = 10;
            }
            if (!*(unsigned char *)(v27 + 1601)
              && v121 - 10 >= *(unsigned __int8 *)(v27 + 1619)
              && !*(unsigned char *)(v27 + 1602)
              && !*(unsigned char *)(v27 + 1603))
            {
LABEL_208:
              uint64_t v122 = *(unsigned __int8 *)(*((void *)a1 + 173) + 1);
              int16x8_t v123 = (uint64_t *)(a2 + 1552);
              if (v122 <= 0xF) {
                int16x8_t v123 = (uint64_t *)(a2 + 16 * v122 + 256);
              }
              uint64_t v15 = *v123;
              uint64_t v124 = v123[1];
              if (v124) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 8), 1uLL, memory_order_relaxed);
              }
              *((void *)a1 + 171) = v15;
              int16x8_t v125 = (std::__shared_weak_count *)*((void *)a1 + 172);
              *((void *)a1 + 172) = v124;
              if (v125)
              {
                sub_1BB9C09B4(v125);
                uint64_t v15 = *((void *)a1 + 171);
              }
              if (!v15) {
                return 4294954387;
              }
              if (*a1)
              {
                int v20 = 0;
                a1[8] = 0;
                *((_DWORD *)a1 + 1) = 0;
                goto LABEL_217;
              }
              BOOL v14 = (unsigned __int8 *)*((void *)a1 + 173);
LABEL_16:
              int v16 = v14[2];
              if (v16)
              {
                LOBYTE(v16) = sub_1BBA196DC(v8, 1) != 0;
                uint64_t v15 = *((void *)a1 + 171);
              }
              a1[8] = v16;
              unsigned int v17 = *(_DWORD *)(v15 + 2020) * *(_DWORD *)(v15 + 2016);
              unsigned int v18 = 31 - __clz(v17);
              if (!v17) {
                unsigned int v18 = 0;
              }
              if ((v17 & (v17 - 1)) != 0) {
                int v19 = v18 + 1;
              }
              else {
                int v19 = v18;
              }
              int v20 = sub_1BBA19734(v8, v19);
              *((_DWORD *)a1 + 1) = v20;
              if (a1[8]) {
                goto LABEL_24;
              }
LABEL_217:
              *((_DWORD *)a1 + 154) = v20;
              a1[1197] = 0;
              uint64_t v126 = *((void *)a1 + 173);
              if (*(unsigned char *)(v126 + 4)) {
                a1[9] = sub_1BBA196DC(v8, *(unsigned __int8 *)(v126 + 4));
              }
              unsigned __int8 v127 = sub_1BBA1979C(v8);
              a1[10] = v127;
              if (v127 > 2u) {
                return 4294954387;
              }
              if (*(unsigned char *)(*((void *)a1 + 173) + 3)) {
                BOOL v128 = sub_1BBA196DC(v8, 1) != 0;
              }
              else {
                BOOL v128 = 1;
              }
              a1[11] = v128;
              if (*(unsigned char *)(*((void *)a1 + 171) + 174)) {
                a1[12] = sub_1BBA196DC(v8, 2);
              }
              if (a1[600])
              {
                if (a1[10] != 2)
                {
                  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                    return 4294954387;
                  }
                  LOWORD(v189) = 0;
                  int32x4_t v57 = MEMORY[0x1E4F14500];
                  uint64_t v58 = "IDR nalu must have only I slices\n";
                  goto LABEL_74;
                }
              }
              else
              {
                *((_DWORD *)a1 + 4) = sub_1BBA196DC(v8, *(unsigned __int8 *)(*((void *)a1 + 171) + 196) + 4);
                int v129 = sub_1BBA196DC(v8, 1);
                a1[20] = v129 != 0;
                if (v129)
                {
                  uint64_t v130 = *((void *)a1 + 171);
                  unsigned int v131 = *(_DWORD *)(v130 + 260);
                  int v132 = 31 - __clz(v131);
                  if (!v131) {
                    int v132 = 0;
                  }
                  if ((v131 & (v131 - 1)) != 0) {
                    ++v132;
                  }
                  if (v132)
                  {
                    unsigned int v133 = sub_1BBA196DC(v8, v132);
                    uint64_t v130 = *((void *)a1 + 171);
                    unsigned int v131 = *(_DWORD *)(v130 + 260);
                  }
                  else
                  {
                    unsigned int v133 = 0;
                  }
                  *((_DWORD *)a1 + 68) = v133;
                  if (v133 >= v131) {
                    return 4294954387;
                  }
                }
                else
                {
                  uint64_t v12 = sub_1BBAE5100((uint64_t)(a1 + 24), v8, *((void *)a1 + 171), *(_DWORD *)(*((void *)a1 + 171) + 260));
                  if (v12) {
                    return v12;
                  }
                  uint64_t v130 = *((void *)a1 + 171);
                }
                if (*(unsigned char *)(v130 + 280))
                {
                  uint64_t v12 = sub_1BBAE647C((unsigned int *)a1 + 69, v130, (uint64_t)(a1 + 24), v8);
                  if (v12) {
                    return v12;
                  }
                  uint64_t v130 = *((void *)a1 + 171);
                }
                unsigned __int8 v134 = *(unsigned char *)(v130 + 322);
                if (v134) {
                  unsigned __int8 v134 = sub_1BBA196DC(v8, 1) != 0;
                }
                a1[498] = v134;
              }
              *((_WORD *)a1 + 248) = 0;
              if (*(unsigned char *)(*((void *)a1 + 171) + 249))
              {
                a1[496] = sub_1BBA196DC(v8, 1) != 0;
                if (*(unsigned char *)(*((void *)a1 + 171) + 173)) {
                  a1[497] = sub_1BBA196DC(v8, 1) != 0;
                }
              }
              *((_WORD *)a1 + 250) = 0;
              if (a1[10] > 1u) {
                goto LABEL_303;
              }
              int v135 = sub_1BBA196DC(v8, 1);
              a1[499] = v135 != 0;
              if (v135)
              {
                unsigned __int8 v137 = sub_1BBA1979C(v8);
                a1[500] = v137 + 1;
                if (v137 > 0xEu) {
                  return 4294954387;
                }
                if (!a1[10])
                {
                  unsigned __int8 v138 = sub_1BBA1979C(v8);
                  a1[501] = v138 + 1;
                  if (v138 >= 0xFu) {
                    return 4294954387;
                  }
                }
              }
              else
              {
                uint64_t v139 = *((void *)a1 + 173);
                a1[500] = *(unsigned char *)(v139 + 7) + 1;
                if (!a1[10]) {
                  a1[501] = *(unsigned char *)(v139 + 8) + 1;
                }
              }
              if (a1[20]) {
                uint64_t v140 = *(void *)(*((void *)a1 + 171) + 264) + 248 * *((int *)a1 + 68);
              }
              else {
                uint64_t v140 = (uint64_t)(a1 + 24);
              }
              uint64_t v141 = *(unsigned __int8 *)(v140 + 160);
              if (*(unsigned char *)(v140 + 160))
              {
                unsigned int v142 = 0;
                uint16x8_t v143 = (unsigned __int8 *)(v140 + 2);
                do
                {
                  int v144 = *v143;
                  v143 += 4;
                  v142 += v144;
                  --v141;
                }
                while (v141);
              }
              else
              {
                unsigned int v142 = 0;
              }
              uint64_t v145 = *(unsigned __int8 *)(v140 + 161);
              if (*(unsigned char *)(v140 + 161))
              {
                int32x4_t v146 = (unsigned __int8 *)(v140 + 66);
                do
                {
                  int v147 = *v146;
                  v146 += 4;
                  v142 += v147;
                  --v145;
                }
                while (v145);
              }
              int v148 = *((_DWORD *)a1 + 70) + *((_DWORD *)a1 + 69);
              int v149 = v148 - 1;
              if (v148 >= 1)
              {
                unsigned int v150 = (v148 + 3) & 0xFFFFFFFC;
                v136.i32[0] = v149;
                int32x4_t v151 = (int32x4_t)v142;
                int32x4_t v152 = (int32x4_t)xmmword_1BBB6F6C0;
                uint32x4_t v153 = (uint32x4_t)vdupq_n_s32(*((unsigned __int16 *)a1 + 246));
                v154.i64[0] = 0xFF000000FFLL;
                v154.i64[1] = 0xFF000000FFLL;
                v155.i64[0] = 0x100000001;
                v155.i64[1] = 0x100000001;
                v156.i64[0] = 0x400000004;
                v156.i64[1] = 0x400000004;
                do
                {
                  int8x16_t v157 = (int8x16_t)v151;
                  uint32x4_t v158 = (uint32x4_t)v152;
                  int32x4_t v151 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v153, (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)v152, v154))), v155), v151);
                  int32x4_t v152 = vaddq_s32(v152, v156);
                  v150 -= 4;
                }
                while (v150);
                unsigned int v142 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v158, (uint32x4_t)vdupq_lane_s32(v136, 0)), v157, (int8x16_t)v151));
              }
              if (v142 > *(unsigned __int8 *)(*((void *)a1 + 171)
                                             + *(unsigned __int8 *)(*((void *)a1 + 171) + 1)
                                             + 198))
                return 4294954387;
              if (*(unsigned char *)(*((void *)a1 + 173) + 1595)) {
                BOOL v159 = v142 >= 2;
              }
              else {
                BOOL v159 = 0;
              }
              if (v159)
              {
                unsigned int v160 = __clz(v142) ^ 0x1F;
                if ((v142 & (v142 - 1)) != 0) {
                  int v161 = v160 + 1;
                }
                else {
                  int v161 = v160;
                }
                int v162 = sub_1BBA196DC(v8, 1);
                a1[502] = v162 != 0;
                if (v162 && a1[500] >= 1)
                {
                  uint64_t v163 = 0;
                  do
                  {
                    unsigned __int8 v164 = sub_1BBA196DC(v8, v161);
                    a1[v163 + 503] = v164;
                    if (v142 <= v164) {
                      return 4294954387;
                    }
                  }
                  while (++v163 < a1[500]);
                }
                if (a1[10])
                {
                  a1[519] = 0;
                  goto LABEL_291;
                }
                int v183 = sub_1BBA196DC(v8, 1);
                a1[519] = v183 != 0;
                if (v183 && a1[501] >= 1)
                {
                  uint64_t v184 = 0;
                  do
                  {
                    unsigned __int8 v185 = sub_1BBA196DC(v8, v161);
                    a1[v184 + 520] = v185;
                    if (v142 <= v185) {
                      return 4294954387;
                    }
                  }
                  while (++v184 < a1[501]);
                }
              }
              else
              {
                a1[502] = 0;
                a1[519] = 0;
              }
              if (!a1[10]) {
                a1[536] = sub_1BBA196DC(v8, 1) != 0;
              }
LABEL_291:
              unsigned __int8 v165 = *(unsigned char *)(*((void *)a1 + 173) + 6);
              if (v165) {
                unsigned __int8 v165 = sub_1BBA196DC(v8, 1) != 0;
              }
              a1[537] = v165;
              *((_WORD *)a1 + 269) = 1;
              if (a1[498])
              {
                if (a1[10] || (int v166 = sub_1BBA196DC(v8, 1), a1[538] = v166 != 0, v166))
                {
                  if (a1[500] <= 1) {
                    goto LABEL_298;
                  }
                  goto LABEL_297;
                }
                if (a1[501] >= 2) {
LABEL_297:
                }
                  a1[539] = sub_1BBA1979C(v8);
              }
LABEL_298:
              uint64_t v167 = *((void *)a1 + 173);
              if (*(unsigned char *)(v167 + 17) && a1[10] || *(unsigned char *)(v167 + 18) && !a1[10])
              {
                unsigned __int8 v180 = sub_1BBA1979C(v8);
                a1[540] = v180;
                if ((v180 & 0xF8) != 0) {
                  return 4294954387;
                }
                if (*(unsigned char *)(*((void *)a1 + 171) + 173))
                {
                  int v181 = sub_1BBA1979C(v8);
                  unsigned int v182 = (-((v181 + 1) & 1) ^ ((v181 + 1) >> 1)) + ((v181 + 1) & 1);
                  a1[541] = (-((v181 + 1) & 1) ^ ((v181 + 1) >> 1)) + ((v181 + 1) & 1);
                  unsigned __int8 v180 = a1[540];
                }
                else
                {
                  LOBYTE(v182) = a1[541];
                }
                unsigned __int8 v186 = v182 + v180;
                unsigned int v187 = (v182 + v180);
                a1[630] = v186;
                if (v187 > 7) {
                  return 4294954387;
                }
                uint64_t v188 = *((void *)a1 + 171);
                *((_DWORD *)a1 + 158) = v180 - *(unsigned __int8 *)(v188 + 2000) + 14;
                *((_DWORD *)a1 + 159) = v187 - *(unsigned __int8 *)(v188 + 2002) + 14;
                uint64_t v12 = sub_1BBA3BF34((uint64_t)a1, a1[500], (uint64_t)(a1 + 736), (uint64_t)(a1 + 640));
                if (v12) {
                  return v12;
                }
                if (!a1[10])
                {
                  uint64_t v12 = sub_1BBA3BF34((uint64_t)a1, a1[501], (uint64_t)(a1 + 928), (uint64_t)(a1 + 832));
                  if (v12) {
                    return v12;
                  }
                }
              }
              a1[542] = sub_1BBA1979C(v8);
LABEL_303:
              int v168 = sub_1BBA1979C(v8);
              a1[543] = (-((v168 + 1) & 1) ^ ((v168 + 1) >> 1)) + ((v168 + 1) & 1);
              BOOL v169 = a1[548];
              BOOL v170 = a1[549];
              uint64_t v171 = *((void *)a1 + 173);
              LOBYTE(v172) = *(unsigned char *)(v171 + 16);
              if ((_BYTE)v172)
              {
                int v173 = sub_1BBA1979C(v8);
                a1[544] = (-((v173 + 1) & 1) ^ ((v173 + 1) >> 1)) + ((v173 + 1) & 1);
                int v174 = sub_1BBA1979C(v8);
                unsigned int v172 = (-((v174 + 1) & 1) ^ ((v174 + 1) >> 1)) + ((v174 + 1) & 1);
                uint64_t v171 = *((void *)a1 + 173);
              }
              else
              {
                a1[544] = 0;
              }
              a1[545] = v172;
              if (!*(unsigned char *)(v171 + 29)) {
                goto LABEL_315;
              }
              if (*(unsigned char *)(v171 + 30))
              {
                int v175 = sub_1BBA196DC(v8, 1);
                a1[546] = v175 != 0;
                if (v175)
                {
                  int v176 = sub_1BBA196DC(v8, 1);
                  a1[547] = v176 != 0;
                  if (v176)
                  {
LABEL_315:
                    BOOL v179 = v169 != a1[548] || v170 != a1[549];
                    if (!*a1 && v179) {
                      *((void *)a1 + 421) = sub_1BBA41EFC;
                    }
                    a1[550] = *(unsigned char *)(*((void *)a1 + 173) + 28)
                           && (a1[496] || a1[497] || !a1[547])
                           && sub_1BBA196DC(v8, 1) != 0;
LABEL_24:
                    uint64_t v21 = *((void *)a1 + 173);
                    if (*(unsigned char *)(v21 + 20) || *(unsigned char *)(v21 + 21))
                    {
                      unsigned int v22 = sub_1BBA1979C(v8);
                      *((_DWORD *)a1 + 138) = v22;
                      if (v22)
                      {
                        if (*(unsigned char *)(*((void *)a1 + 173) + 21)
                          && v22 > *(_DWORD *)(*((void *)a1 + 171) + 2020))
                        {
                          return 4294954387;
                        }
                        unsigned __int8 v23 = sub_1BBA1979C(v8);
                        a1[556] = v23;
                        if ((v23 & 0xE0) != 0) {
                          return 4294954387;
                        }
                        uint64_t v12 = sub_1BBA39A24((void **)a1 + 70, *((unsigned int *)a1 + 138));
                        if (v12) {
                          return v12;
                        }
                        if (*((_DWORD *)a1 + 138))
                        {
                          unint64_t v24 = 0;
                          do
                            *(_DWORD *)(*((void *)a1 + 70) + 4 * v24++) = sub_1BBA19734(v8, a1[556] + 1);
                          while (v24 < *((unsigned int *)a1 + 138));
                        }
                      }
                    }
                    else
                    {
                      *((_DWORD *)a1 + 138) = 0;
                    }
                    if (*(unsigned char *)(*((void *)a1 + 173) + 1598))
                    {
                      unsigned __int16 v59 = sub_1BBA1979C(v8);
                      *((_WORD *)a1 + 288) = v59;
                      if (v59 > 0x100u) {
                        return 4294954387;
                      }
                      uint64_t v12 = sub_1BBA12730((void **)a1 + 73, v59, 0x10uLL);
                      if (v12) {
                        return v12;
                      }
                      if (*((_WORD *)a1 + 288))
                      {
                        unint64_t v60 = 0;
                        do
                          *(unsigned char *)(*((void *)a1 + 73) + v60++) = sub_1BBA196DC(v8, 8);
                        while (v60 < *((unsigned __int16 *)a1 + 288));
                      }
                    }
                    unint64_t v61 = *((void *)a1 + 439) + 1;
                    *((void *)a1 + 439) = v61;
                    *((_DWORD *)a1 + 883) = 0;
                    unint64_t v62 = *((void *)a1 + 440);
                    if (v61 > v62) {
                      *((void *)a1 + 439) = v62;
                    }
                    if (!sub_1BBA3A7BC((uint64_t)a1)) {
                      return 4294954387;
                    }
                    a1[620] = 5 - a1[542];
                    *((_DWORD *)a1 + 19651) = *((_DWORD *)a1 + 138) + 1;
                    uint64_t v63 = *((void *)a1 + 9824);
                    if (v63) {
                      LOBYTE(v63) = *(unsigned char *)(v63 + 87);
                    }
                    a1[78600] = v63;
                    a1[628] = 2 * a1[548];
                    a1[629] = 2 * a1[549];
                    sub_1BBA18C94((uint64_t)a1);
                    if (*a1)
                    {
                      sub_1BBA20D9C((void *)a1 + 178, *(unsigned __int8 *)(*((void *)a1 + 171) + 2000), *(unsigned __int8 *)(*((void *)a1 + 171) + 323), *(unsigned __int8 *)(*((void *)a1 + 173) + 10));
                      sub_1BBA1FD3C((uint64_t)(a1 + 1840), *(unsigned __int8 *)(*((void *)a1 + 171) + 2000));
                      sub_1BBA26A04((void *)a1 + 263, *(unsigned __int8 *)(*((void *)a1 + 171) + 2000));
                      sub_1BBA425F0((uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1+ 415, (uint64_t)a1, 0);
                      *((_WORD *)a1 + 1728) = 0;
                      *((void *)a1 + 434) = *((void *)a1 + 433);
                    }
                    int v64 = *((_DWORD *)a1 + 1);
                    LODWORD(v189) = *((_DWORD *)a1 + 154);
                    DWORD1(v189) = v64;
                    DWORD2(v189) = *((_DWORD *)a1 + 138);
                    WORD6(v189) = *((_WORD *)a1 + 314);
                    sub_1BBA3C1FC((char **)a1 + 433, &v189);
                    if (a1[496] || a1[497]) {
                      a1[3456] = 1;
                    }
                    if (!a1[547]) {
                      a1[3457] = 1;
                    }
                    uint64_t v12 = 0;
                    if (a4)
                    {
                      *(unsigned char *)(a4 + 352) = a1[2];
                      *(_DWORD *)(a4 + 344) = *((_DWORD *)a1 + 1);
                      *(_DWORD *)(a4 + 348) = a1[10];
                      *(unsigned char *)(a4 + 353) = a1[543] + 26;
                    }
                    return v12;
                  }
                  int v177 = sub_1BBA1979C(v8);
                  a1[548] = (-((v177 + 1) & 1) ^ ((v177 + 1) >> 1)) + ((v177 + 1) & 1);
                  int v178 = sub_1BBA1979C(v8);
                  LODWORD(v171) = (-((v178 + 1) & 1) ^ ((v178 + 1) >> 1)) + ((v178 + 1) & 1);
LABEL_314:
                  a1[549] = v171;
                  goto LABEL_315;
                }
                uint64_t v171 = *((void *)a1 + 173);
              }
              else
              {
                a1[546] = 0;
              }
              *(_WORD *)(a1 + 547) = *(_WORD *)(v171 + 31);
              LOBYTE(v171) = *(unsigned char *)(v171 + 33);
              goto LABEL_314;
            }
          }
        }
      }
    }
  }
  return v12;
}

uint64_t sub_1BBA3BF34(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = a1 + 3488;
  do
    v11 |= (unsigned __int16)(sub_1BBA196DC(v12, 1) << v10++);
  while (a2 != v10);
  if (*(unsigned char *)(*(void *)(a1 + 1368) + 173))
  {
    int v13 = 0;
    unsigned int v14 = 0;
    do
      v14 |= (unsigned __int16)(sub_1BBA196DC(v12, 1) << v13++);
    while (a2 != v13);
  }
  else
  {
    unsigned int v14 = 0;
  }
  uint64_t v16 = 0;
  uint64_t v35 = a3;
  uint64_t v36 = a2;
  while (1)
  {
    int v17 = 1 << *(unsigned char *)(a1 + 540);
    if (v11)
    {
      int v19 = sub_1BBA1979C(v12);
      uint64_t v20 = (-((v19 + 1) & 1) ^ ((v19 + 1) >> 1)) + ((v19 + 1) & 1);
      int v21 = sub_1BBA1979C(v12);
      uint64_t result = 4294954387;
      if ((unint64_t)((v20 << 48) + 0x80FFFFFFFFFFFFLL) > 0x100FFFFFFFFFFFELL) {
        return result;
      }
      unsigned int v22 = (-((v21 + 1) & 1) ^ ((v21 + 1) >> 1)) + ((v21 + 1) & 1);
      if ((unsigned __int16)(v22 + 128) > 0xFFu) {
        return result;
      }
      LOWORD(v17) = v20 + v17;
      unsigned int v18 = v22 << *(unsigned char *)(*(void *)(a1 + 1368) + 194);
    }
    else
    {
      LOWORD(v18) = 0;
    }
    *(_WORD *)(a4 + 6 * v16) = v18;
    *(_WORD *)(a3 + 6 * v16) = v17;
    int v23 = 1 << *(unsigned char *)(a1 + 630);
    __int16 v37 = v23;
    __int16 v38 = v23;
    if (v14) {
      break;
    }
    *(_DWORD *)(a4 + 6 * v16 + 2) = 0;
    __int16 v24 = v23;
LABEL_29:
    uint64_t v34 = a3 + 6 * v16;
    *(_WORD *)(v34 + 2) = v24;
    *(_WORD *)(v34 + 4) = v23;
    ++v16;
    v11 >>= 1;
    v14 >>= 1;
    if (v16 == v36) {
      return 0;
    }
  }
  uint64_t v25 = 0;
  char v26 = 1;
  while (1)
  {
    char v27 = v26;
    int v28 = sub_1BBA1979C(v12);
    uint64_t v29 = (-((v28 + 1) & 1) ^ ((v28 + 1) >> 1)) + ((v28 + 1) & 1);
    int v30 = sub_1BBA1979C(v12);
    if ((unint64_t)((v29 << 48) + 0x80FFFFFFFFFFFFLL) > 0x100FFFFFFFFFFFELL
      || ((unint64_t)((-((v30 + 1) & 1) ^ ((v30 + 1) >> 1)) + ((v30 + 1) & 1)) << 48)
       + 0x200FFFFFFFFFFFFLL > 0x400FFFFFFFFFFFELL)
    {
      return 4294954387;
    }
    char v26 = 0;
    __int16 v32 = *(&v37 + v25) + v29;
    *(&v37 + v25) = v32;
    int v33 = (__int16)((-((v30 + 1) & 1) ^ ((v30 + 1) >> 1))
                  + ((v30 + 1) & 1)
                  - (v32 << 7 >> *(unsigned char *)(a1 + 630))
                  + 128);
    if (v33 >= 127) {
      int v33 = 127;
    }
    if (v33 <= -128) {
      int v33 = -128;
    }
    *(_WORD *)(a4 + 6 * v16 + 2 * v25 + 2) = v33 << *(unsigned char *)(*(void *)(a1 + 1368) + 195);
    uint64_t v25 = 1;
    if ((v27 & 1) == 0)
    {
      __int16 v24 = v37;
      LOWORD(v23) = v38;
      a3 = v35;
      goto LABEL_29;
    }
  }
}

void sub_1BBA3C1FC(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    BOOL v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_1BB9C185C();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_1BB9C18AC();
      }
      uint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v13 = &v12[16 * v8];
    *(_OWORD *)int v13 = *a2;
    uint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 2);
        v5 -= 16;
        uint64_t v15 = *(void *)(v5 + 6);
        *((void *)v13 - 2) = v14;
        v13 -= 16;
        *(void *)(v13 + 6) = v15;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *a2;
    uint64_t v6 = v5 + 16;
  }
  a1[1] = v6;
}

BOOL sub_1BBA3C2F8(uint64_t a1)
{
  unint64_t v1 = 0;
  BOOL v2 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(a1 + 96) + v1) == 49 && ((0x1B80uLL >> v1) & 1) == 0) {
      break;
    }
    BOOL v2 = v1++ < 0xD;
  }
  while (v1 != 14);
  return v2;
}

uint64_t sub_1BBA3C33C(uint64_t a1, char *a2, int a3, int a4, int a5)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a5;
  *(_DWORD *)(a1 + 40) = 1;
  memset(&__p, 0, sizeof(__p));
  if (!a2) {
    return 0;
  }
  sub_1BB9D08B8(&__str, a2);
  if (!strncmp(a2, "FLBN;", 5uLL))
  {
    int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = (char *)p_str + size;
    if (size >= 5)
    {
      uint64_t v20 = p_str;
      do
      {
        if (size == 4) {
          break;
        }
        int v13 = (char *)memchr(v20, 70, size - 4);
        if (!v13) {
          break;
        }
        if (*(_DWORD *)v13 == 1312967750 && v13[4] == 59) {
          goto LABEL_14;
        }
        uint64_t v20 = (std::string *)(v13 + 1);
        int64_t size = v12 - (char *)v20;
      }
      while (v12 - (char *)v20 > 4);
    }
    int v13 = v12;
LABEL_14:
    if (v13 == v12) {
      std::string::size_type v14 = -1;
    }
    else {
      std::string::size_type v14 = v13 - (char *)p_str;
    }
    std::string::basic_string(&v92, &__str, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v90);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v92;
  }
  else if (!strncmp(a2, "FLBA;", 5uLL))
  {
    int64_t v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &__str;
    }
    else {
      uint64_t v16 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v15 = __str.__r_.__value_.__l.__size_;
    }
    int v17 = (char *)v16 + v15;
    if (v15 >= 5)
    {
      int v23 = v16;
      do
      {
        if (v15 == 4) {
          break;
        }
        unsigned int v18 = (char *)memchr(v23, 70, v15 - 4);
        if (!v18) {
          break;
        }
        if (*(_DWORD *)v18 == 1094863942 && v18[4] == 59) {
          goto LABEL_27;
        }
        int v23 = (std::string *)(v18 + 1);
        int64_t v15 = v17 - (char *)v23;
      }
      while (v17 - (char *)v23 > 4);
    }
    unsigned int v18 = v17;
LABEL_27:
    if (v18 == v17) {
      std::string::size_type v19 = 4;
    }
    else {
      std::string::size_type v19 = v18 - (char *)v16 + 5;
    }
    std::string::basic_string(&v83, &__str, v19, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v92);
    if ((*((unsigned char *)&v83.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!v83.__r_.__value_.__l.__size_ || (v83.__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        operator delete(v83.__r_.__value_.__l.__data_);
        goto LABEL_122;
      }
      sub_1BBA3CD68(__dst, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((unsigned char *)&v83.__r_.__value_.__s + 23) || (*((unsigned char *)&v83.__r_.__value_.__s + 23) & 1) != 0) {
        goto LABEL_122;
      }
      *(std::string *)__dst = v83;
    }
    memset(&__dst[32], 0, 24);
    int v93 = 0;
    sub_1BBA3D4C4(&v93, a4);
    sub_1BB9D08B8(&v92, v93);
    int64_t v25 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v26 = &v92;
    }
    else {
      char v26 = (std::string *)v92.__r_.__value_.__r.__words[0];
    }
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v25 = v92.__r_.__value_.__l.__size_;
    }
    char v27 = (char *)v26 + v25;
    if (v25 >= 5)
    {
      __int16 v32 = v26;
      do
      {
        if (v25 == 4) {
          break;
        }
        int v28 = (char *)memchr(v32, 70, v25 - 4);
        if (!v28) {
          break;
        }
        if (*(_DWORD *)v28 == 1094863942 && v28[4] == 59) {
          goto LABEL_67;
        }
        __int16 v32 = (std::string *)(v28 + 1);
        int64_t v25 = v27 - (char *)v32;
      }
      while (v27 - (char *)v32 > 4);
    }
    int v28 = v27;
LABEL_67:
    if (v28 == v27) {
      std::string::size_type v29 = 4;
    }
    else {
      std::string::size_type v29 = v28 - (char *)v26 + 5;
    }
    std::string::basic_string(&v90, &v92, v29, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v87);
    int v30 = (void *)v90.__r_.__value_.__r.__words[0];
    v91[0] = v90.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v91 + 3) = *(_DWORD *)((char *)&v90.__r_.__value_.__r.__words[2] + 3);
    int v31 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1BBA3CD68(&v87, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v87 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
      *(_DWORD *)int v88 = v91[0];
      *(_DWORD *)&v88[3] = *(_DWORD *)((char *)v91 + 3);
      char v89 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    }
    int v34 = __dst[23];
    if ((__dst[23] & 0x80000000) != 0) {
      sub_1BBA3CD68(&v86, *(void **)__dst, *(unint64_t *)&__dst[8]);
    }
    else {
      std::string v86 = *(std::string *)__dst;
    }
    sub_1BBA3D698(&v90, (uint64_t)&v87, &v86);
    *(std::string *)&__dst[32] = v90;
    *((unsigned char *)&v90.__r_.__value_.__s + 23) = 0;
    v90.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (v89 < 0) {
      operator delete((void *)v87);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (v34 < 0) {
      operator delete(*(void **)__dst);
    }
    std::operator+<char>();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v92;
    if ((__dst[55] & 0x80000000) != 0) {
      operator delete(*(void **)&__dst[32]);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v22 = (void *)v83.__r_.__value_.__r.__words[0];
      goto LABEL_102;
    }
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      sub_1BBA3CD68(&v81, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string v81 = __str;
    }
    sub_1BBA3CE04((std::string::size_type *)&v92, &v81);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v92;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v22 = (void *)v81.__r_.__value_.__r.__words[0];
LABEL_102:
      operator delete(v22);
    }
  }
  std::string::size_type v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
  }
  *(void *)(a1 + 24) = v35 + 1;
  uint64_t v9 = sub_1BBA3D41C((void **)(a1 + 8), v35 + 1);
  if (v9) {
    goto LABEL_207;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  memcpy(*(void **)(a1 + 8), p_p, *(void *)(a1 + 24));
  *(unsigned char *)(a1 + 32) = 1;
  int64_t v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v38 = &__p;
  }
  else {
    __int16 v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t v37 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v39 = (char *)v38 + v37;
  if (v37 >= 5)
  {
    __n128 v44 = v38;
    do
    {
      if (v37 == 4) {
        break;
      }
      uint64_t v40 = (char *)memchr(v44, 70, v37 - 4);
      if (!v40) {
        break;
      }
      if (*(_DWORD *)v40 == 1312967750 && v40[4] == 59) {
        goto LABEL_116;
      }
      __n128 v44 = (std::string *)(v40 + 1);
      int64_t v37 = v39 - (char *)v44;
    }
    while (v39 - (char *)v44 > 4);
  }
  uint64_t v40 = v39;
LABEL_116:
  if (v40 == v39) {
    std::string::size_type v41 = 4;
  }
  else {
    std::string::size_type v41 = v40 - (char *)v38 + 5;
  }
  std::string::basic_string(&v92, &__p, v41, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v90);
  std::string::size_type v42 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  if ((*((unsigned char *)&v92.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::size_type v43 = v92.__r_.__value_.__l.__size_;
    if (v92.__r_.__value_.__s.__data_[8])
    {
      uint64_t v9 = 4294954394;
      goto LABEL_206;
    }
    goto LABEL_133;
  }
  if (*((unsigned char *)&v92.__r_.__value_.__s + 23))
  {
LABEL_122:
    uint64_t v9 = 4294954394;
    goto LABEL_207;
  }
  std::string::size_type v43 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
LABEL_133:
  if (v43)
  {
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v42 = v92.__r_.__value_.__l.__size_;
    }
    if (a3) {
      std::string::basic_string(&v90, &v92, 0, v42 >> 1, (std::allocator<char> *)&v87);
    }
    else {
      std::string::basic_string(&v90, &v92, v42 >> 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v87);
    }
    std::string::size_type v46 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v46 = v90.__r_.__value_.__l.__size_;
    }
    if (v46 <= 0xE) {
      size_t v47 = 14;
    }
    else {
      size_t v47 = v46;
    }
    unsigned int v48 = (void *)(a1 + 96);
    uint64_t v9 = sub_1BBA3D41C((void **)(a1 + 96), v47);
    if (!v9)
    {
      memset(*(void **)(a1 + 96), 48, v47);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v49 = &v90;
      }
      else {
        BOOL v49 = (std::string *)v90.__r_.__value_.__r.__words[0];
      }
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v50 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v50 = v90.__r_.__value_.__l.__size_;
      }
      memcpy(*(void **)(a1 + 96), v49, v50);
      uint64_t v51 = 0;
      int v52 = 0;
      do
      {
        *(unsigned char *)(a1 + v51 + 112) = -1;
        if (dword_1BBB78E10[5 * v51 + 2] != *(_DWORD *)(a1 + 36) && (v51 == 4 || v51 == 1)) {
          *(unsigned char *)(*v48 + v51) = 48;
        }
        if (*(unsigned char *)(*v48 + v51) == 49)
        {
          if (v51 == 12)
          {
            uint64_t v54 = *(char **)(a1 + 80);
            unint64_t v53 = *(void *)(a1 + 88);
            if ((unint64_t)v54 >= v53)
            {
              unsigned __int16 v59 = *(char **)(a1 + 72);
              uint64_t v60 = (v54 - v59) >> 2;
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62) {
                goto LABEL_212;
              }
              uint64_t v62 = v53 - (void)v59;
              if (v62 >> 1 > v61) {
                unint64_t v61 = v62 >> 1;
              }
              BOOL v63 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v63) {
                unint64_t v64 = v61;
              }
              if (v64)
              {
                unint64_t v64 = (unint64_t)sub_1BB9C1874(v64);
                unsigned __int16 v59 = *(char **)(a1 + 72);
                uint64_t v54 = *(char **)(a1 + 80);
              }
              else
              {
                uint64_t v65 = 0;
              }
              long long v72 = (_DWORD *)(v64 + 4 * v60);
              *long long v72 = 12;
              int v55 = v72 + 1;
              while (v54 != v59)
              {
                int v73 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *--long long v72 = v73;
              }
              *(void *)(a1 + 72) = v72;
              *(void *)(a1 + 80) = v55;
              *(void *)(a1 + 88) = v64 + 4 * v65;
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v54 = 12;
              int v55 = v54 + 4;
            }
            *(void *)(a1 + 80) = v55;
          }
          else
          {
            int32x4_t v57 = *(char **)(a1 + 56);
            unint64_t v56 = *(void *)(a1 + 64);
            if ((unint64_t)v57 >= v56)
            {
              uint64_t v66 = *(char **)(a1 + 48);
              uint64_t v67 = (v57 - v66) >> 2;
              unint64_t v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 62) {
LABEL_212:
              }
                sub_1BB9C185C();
              uint64_t v69 = v56 - (void)v66;
              if (v69 >> 1 > v68) {
                unint64_t v68 = v69 >> 1;
              }
              BOOL v63 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v63) {
                unint64_t v70 = v68;
              }
              if (v70)
              {
                unint64_t v70 = (unint64_t)sub_1BB9C1874(v70);
                uint64_t v66 = *(char **)(a1 + 48);
                int32x4_t v57 = *(char **)(a1 + 56);
              }
              else
              {
                uint64_t v71 = 0;
              }
              unsigned int v74 = (_DWORD *)(v70 + 4 * v67);
              *unsigned int v74 = v51;
              uint64_t v58 = v74 + 1;
              while (v57 != v66)
              {
                int v75 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *--unsigned int v74 = v75;
              }
              *(void *)(a1 + 48) = v74;
              *(void *)(a1 + 56) = v58;
              *(void *)(a1 + 64) = v70 + 4 * v71;
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              *(_DWORD *)int32x4_t v57 = v51;
              uint64_t v58 = v57 + 4;
            }
            *(void *)(a1 + 56) = v58;
            *(unsigned char *)(a1 + v51 + 112) = v52++;
          }
        }
        ++v51;
      }
      while (v51 != 14);
      if (*(unsigned char *)*v48 == 49)
      {
        BOOL v76 = 1;
      }
      else
      {
        uint64_t v77 = 1;
        unint64_t v78 = 13;
        while (v77 != 14)
        {
          uint64_t v79 = v77++;
          if (v79 != 12 && *(unsigned char *)(*v48 + v79) == 49)
          {
            unint64_t v78 = v77 - 2;
            break;
          }
        }
        BOOL v76 = v78 < 0xD;
      }
      uint64_t v9 = 0;
      *(unsigned char *)(a1 + 33) = v76;
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    if ((*((unsigned char *)&v92.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_207;
    }
    goto LABEL_206;
  }
  uint64_t v9 = 4294954394;
  if ((*((unsigned char *)&v92.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_206:
  }
    operator delete(v92.__r_.__value_.__l.__data_);
LABEL_207:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_1BBA3CC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v56 - 161) < 0) {
    operator delete(*(void **)(v56 - 184));
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  if (*(char *)(v56 - 105) < 0) {
    operator delete(*(void **)(v56 - 128));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1BBA3CD68(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1BB9D0968();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_1BBA3CE04(std::string::size_type *a1, const std::string *a2)
{
  std::string::size_type v2 = (std::string::size_type)a2;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = std::string::basic_string(&v60, a2, 0, 5uLL, (std::allocator<char> *)&v58);
  int v5 = std::string::compare(v4, "FLS2;");
  int v6 = v5;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v60.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      if (dword_1E9F80A90 >= 1)
      {
        std::string::size_type v7 = v2;
        if (*(char *)(v2 + 23) < 0) {
          std::string::size_type v7 = *(void *)v2;
        }
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "invalid FLS2 prefix: %{public}s\n", v7);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(v2 + 23) < 0) {
            std::string::size_type v2 = *(void *)v2;
          }
          LODWORD(v60.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = v2;
          _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "invalid FLS2 prefix: %{public}s\n", (uint8_t *)&v60, 0xCu);
        }
      }
      return;
    }
  }
  else if (v5)
  {
    goto LABEL_3;
  }
  if (*(char *)(v2 + 23) < 0)
  {
    std::string::size_type v9 = *(void *)v2;
    int64_t v8 = *(void *)(v2 + 8);
  }
  else
  {
    int64_t v8 = *(unsigned __int8 *)(v2 + 23);
    std::string::size_type v9 = v2;
  }
  uint64_t v10 = (unsigned char *)(v9 + v8);
  if (v8 >= 1)
  {
    unint64_t v11 = (void *)v9;
    do
    {
      uint64_t v12 = memchr(v11, 124, v8);
      if (!v12) {
        break;
      }
      if (*v12 == 124) {
        goto LABEL_20;
      }
      unint64_t v11 = v12 + 1;
      int64_t v8 = v10 - (unsigned char *)v11;
    }
    while (v10 - (unsigned char *)v11 > 0);
  }
  uint64_t v12 = v10;
LABEL_20:
  if (v12 == v10) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = (uint64_t)&v12[-v9];
  }
  std::string::basic_string(&v60, (const std::string *)v2, 5uLL, v13 - 5, (std::allocator<char> *)&v58);
  size_t v50 = a1;
  std::string::basic_string(&v58, (const std::string *)v2, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__str);
  uint64_t v14 = 0;
  std::string::size_type v51 = 0;
  memset(&__str, 0, sizeof(__str));
  do
  {
    int64_t v15 = off_1E6247CF0[v14];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v60;
    }
    else {
      uint64_t v16 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    int64_t v17 = strlen(off_1E6247CF0[v14]);
    if (v17)
    {
      int64_t v18 = v17;
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t size = v60.__r_.__value_.__l.__size_;
      }
      if (size >= v17)
      {
        uint64_t v20 = (char *)v16 + size;
        int v21 = *v15;
        unsigned int v22 = v16;
        do
        {
          int64_t v23 = size - v18;
          if (v23 == -1) {
            break;
          }
          __int16 v24 = (char *)memchr(v22, v21, v23 + 1);
          if (!v24) {
            break;
          }
          int64_t v25 = v24;
          if (!memcmp(v24, v15, v18))
          {
            if (v25 == v20 || v25 - (char *)v16 == -1) {
              break;
            }
            goto LABEL_41;
          }
          unsigned int v22 = (std::string *)(v25 + 1);
          int64_t size = v20 - (v25 + 1);
        }
        while (size >= v18);
      }
      std::string::append(&__str, "0");
    }
    else
    {
LABEL_41:
      std::string::append(&__str, "1");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v26 = __str.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v51 = v26;
    }
    ++v14;
  }
  while (v14 != 14);
  uint64_t v27 = 0;
  std::string::size_type v28 = 0;
  memset(&v56, 0, sizeof(v56));
  do
  {
    std::string::size_type v29 = off_1E6247CF0[v27];
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v30 = &v58;
    }
    else {
      int v30 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    int64_t v31 = strlen(off_1E6247CF0[v27]);
    if (v31)
    {
      int64_t v32 = v31;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v33 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v33 = v58.__r_.__value_.__l.__size_;
      }
      if (v33 >= v31)
      {
        int v34 = (char *)v30 + v33;
        int v35 = *v29;
        uint64_t v36 = v30;
        do
        {
          int64_t v37 = v33 - v32;
          if (v37 == -1) {
            break;
          }
          __int16 v38 = (char *)memchr(v36, v35, v37 + 1);
          if (!v38) {
            break;
          }
          uint64_t v39 = v38;
          if (!memcmp(v38, v29, v32))
          {
            if (v39 == v34 || v39 - (char *)v30 == -1) {
              break;
            }
            goto LABEL_64;
          }
          uint64_t v36 = (std::string *)(v39 + 1);
          int64_t v33 = v34 - (v39 + 1);
        }
        while (v33 >= v32);
      }
      std::string::append(&v56, "0");
    }
    else
    {
LABEL_64:
      std::string::append(&v56, "1");
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v28 = v56.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v28 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      }
    }
    ++v27;
  }
  while (v27 != 14);
  *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = 0uLL;
  if (v51 > v28) {
    std::string::size_type v28 = v51;
  }
  *((unsigned char *)&v54.__r_.__value_.__s + 23) = 5;
  v54.__r_.__value_.__r.__words[0] = 0x3B4E424C46;
  std::string::basic_string(&v53, &__str, 0, v28, (std::allocator<char> *)&v52);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v40 = &v53;
  }
  else {
    uint64_t v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v53.__r_.__value_.__l.__size_;
  }
  std::string::size_type v42 = std::string::append(&v54, (const std::string::value_type *)v40, v41);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string(&v52, &v56, 0, v28, (std::allocator<char> *)&v59);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __n128 v44 = &v52;
  }
  else {
    __n128 v44 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v52.__r_.__value_.__l.__size_;
  }
  std::string::size_type v46 = std::string::append(&v55, (const std::string::value_type *)v44, v45);
  std::string::size_type v47 = v46->__r_.__value_.__r.__words[0];
  v50[1] = v46->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v50 + 15) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1]
                                                                            + 7);
  char v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  int v49 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
  *size_t v50 = v47;
  *((unsigned char *)v50 + 23) = v48;
  if (v49 < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
}

void sub_1BBA3D358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (*(char *)(v48 - 137) < 0) {
    operator delete(*(void **)(v48 - 160));
  }
  if (*(char *)(v48 - 105) < 0) {
    operator delete(*(void **)(v48 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BBA3D41C(void **memptr, size_t size)
{
  if ((unint64_t)memptr[1] >= size) {
    return 0;
  }
  if (size > 0x6400000) {
    return 4294954392;
  }
  unint64_t v4 = *memptr;
  if (v4)
  {
    free(v4);
    *memptr = 0;
    memptr[1] = 0;
  }
  if (malloc_type_posix_memalign(memptr, 0x10uLL, size, 0x100004077774924uLL) || !*memptr) {
    return 4294954392;
  }
  uint64_t v6 = 0;
  do
    *((unsigned char *)*memptr + v6++) = 0;
  while (size != v6);
  uint64_t result = 0;
  memptr[1] = (void *)size;
  return result;
}

size_t sub_1BBA3D4C4(void *a1, int a2)
{
  strncpy(byte_1E9F81DC0, "FLBA;", 0x96uLL);
  if (a2 == 42)
  {
    dword_1E9F81EBA = 0;
    unint64_t v4 = (long long *)"0000001111";
  }
  else if (a2 == 20)
  {
    dword_1E9F81EBA = 0;
    unint64_t v4 = (long long *)"010000000001";
  }
  else
  {
    dword_1E9F81EBA = 0;
    if (a2 == 1) {
      unint64_t v4 = (long long *)"101111";
    }
    else {
      unint64_t v4 = &xmmword_1BBB78F28;
    }
  }
  long long v5 = v4[3];
  xmmword_1E9F81E7A = v4[2];
  unk_1E9F81E8A = v5;
  long long v6 = v4[5];
  xmmword_1E9F81E9A = v4[4];
  unk_1E9F81EAA = v6;
  long long v7 = v4[1];
  xmmword_1E9F81E5A = *v4;
  unk_1E9F81E6A = v7;
  if (sub_1BBA401B4())
  {
    dword_1E9F81F1E = 0;
    int64_t v8 = (long long *)"1111111111111";
  }
  else
  {
    dword_1E9F81F1E = 0;
    int64_t v8 = (long long *)"1111111111110";
  }
  long long v9 = v8[3];
  xmmword_1E9F81EDE = v8[2];
  unk_1E9F81EEE = v9;
  long long v10 = v8[5];
  xmmword_1E9F81EFE = v8[4];
  unk_1E9F81F0E = v10;
  long long v11 = v8[1];
  xmmword_1E9F81EBE = *v8;
  unk_1E9F81ECE = v11;
  if ((_BYTE)xmmword_1E9F81E5A) {
    size_t v12 = strnlen((const char *)&xmmword_1E9F81E5A, 0x96uLL);
  }
  else {
    size_t v12 = 0;
  }
  size_t v13 = strnlen((const char *)&xmmword_1E9F81EBE, 0x96uLL);
  size_t v14 = v13;
  if ((v12 + 7) >> 3 <= (v13 + 7) >> 3) {
    unint64_t v15 = (v13 + 7) >> 3;
  }
  else {
    unint64_t v15 = (v12 + 7) >> 3;
  }
  unint64_t v16 = 8 * v15;
  strcat(byte_1E9F81DC0, (const char *)&xmmword_1E9F81E5A);
  if (v12 < 8 * v15)
  {
    size_t v17 = v12 - v16;
    do
    {
      *(_WORD *)&byte_1E9F81DC0[strlen(byte_1E9F81DC0)] = 48;
      BOOL v18 = __CFADD__(v17++, 1);
    }
    while (!v18);
  }
  size_t result = (size_t)strcat(byte_1E9F81DC0, (const char *)&xmmword_1E9F81EBE);
  BOOL v18 = v14 >= v16;
  for (size_t i = v14 - v16; !v18; ++i)
  {
    size_t result = strlen(byte_1E9F81DC0);
    *(_WORD *)&byte_1E9F81DC0[result] = 48;
    BOOL v18 = __CFADD__(i, 1);
  }
  *a1 = byte_1E9F81DC0;
  return result;
}

void sub_1BBA3D698(std::string *a1, uint64_t a2, std::string *__str)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  std::string::basic_string(&v23, __str, size >> 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&buf);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v7 = __str->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  std::string::basic_string(&v22, __str, 0, v7 >> 1, (std::allocator<char> *)&buf);
  if (*(char *)(a2 + 23) < 0) {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  std::string::basic_string(&v21, (const std::string *)a2, v8 >> 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&buf);
  if (*(char *)(a2 + 23) < 0) {
    unint64_t v9 = *(void *)(a2 + 8);
  }
  else {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  std::string::basic_string(&__p, (const std::string *)a2, 0, v9 >> 1, (std::allocator<char> *)&buf);
  sub_1BBA3DA64(&buf, (uint64_t)&__p, (uint64_t)&v23);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = buf.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_buf, v11);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    size_t v13 = &v23;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v14 = a1;
    }
    else {
      size_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
    int64_t v25 = v14;
    _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "SetupNDU Encoder: localFLB %{public}s  remoteFLB %{public}s  finalFLB %{public}s", (uint8_t *)&buf, 0x20u);
  }
  sub_1BBA3DA64(&buf, (uint64_t)&v22, (uint64_t)&v21);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v15 = &buf;
  }
  else {
    unint64_t v15 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = buf.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    size_t v17 = &v21;
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    BOOL v18 = &v22;
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = a1;
    }
    else {
      std::string::size_type v19 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
    int64_t v25 = v19;
    _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "SetupNDU Decoder: localFLB %{public}s  remoteFLB %{public}s  finalFLB %{public}s", (uint8_t *)&buf, 0x20u);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1BBA3D9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v32 + 23) < 0) {
    operator delete(*(void **)v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BBA3DA64(std::string *this, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (!a2 || !a3) {
    return;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::size_type v5 = *(void *)(a2 + 8);
  }
  else {
    std::string::size_type v5 = *(unsigned __int8 *)(a2 + 23);
  }
  int v6 = *(char *)(a3 + 23);
  if (v6 < 0) {
    std::string::size_type v7 = *(void *)(a3 + 8);
  }
  else {
    std::string::size_type v7 = *(unsigned __int8 *)(a3 + 23);
  }
  if (v5 <= v7) {
    std::string::size_type v8 = v7;
  }
  else {
    std::string::size_type v8 = v5;
  }
  if ((*(unsigned char *)(a2 + 23) & 0x80) != 0)
  {
    sub_1BBA3CD68(&__dst, *(void **)a2, *(void *)(a2 + 8));
    if ((*(unsigned char *)(a3 + 23) & 0x80) == 0) {
      goto LABEL_14;
    }
LABEL_16:
    sub_1BBA3CD68(&__p, *(void **)a3, *(void *)(a3 + 8));
    goto LABEL_17;
  }
  std::string __dst = *(std::string *)a2;
  if ((v6 & 0x80) != 0) {
    goto LABEL_16;
  }
LABEL_14:
  std::string __p = *(std::string *)a3;
  while (1)
  {
LABEL_17:
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (size >= v8) {
      break;
    }
    std::string::append(&__dst, "0");
  }
  while (1)
  {
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    if (v10 >= v8) {
      break;
    }
    std::string::append(&__p, "0");
  }
  if (v8)
  {
    uint64_t v12 = 0;
    while (1)
    {
      size_t v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v12 == 12) {
        break;
      }
      if (v13->__r_.__value_.__s.__data_[v12] == 49)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        int v14 = p_dst->__r_.__value_.__s.__data_[v12];
        goto LABEL_37;
      }
      std::string::value_type v16 = 48;
LABEL_41:
      std::string::push_back(this, v16);
      if (v8 == ++v12)
      {
        char v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        goto LABEL_43;
      }
    }
    int v14 = v13->__r_.__value_.__s.__data_[12];
LABEL_37:
    if (v14 == 49) {
      std::string::value_type v16 = 49;
    }
    else {
      std::string::value_type v16 = 48;
    }
    goto LABEL_41;
  }
LABEL_43:
  if (v11 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1BBA3DC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BBA3DC90(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 96) + 4) = 48;
  return result;
}

uint64_t sub_1BBA3DCA0(uint64_t result)
{
  **(unsigned char **)(result + 96) = 48;
  *(unsigned char *)(*(void *)(result + 96) + 1) = 48;
  return result;
}

CFStringRef sub_1BBA3DCB8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  sub_1BB9D08B8(&v12, "FLS;");
  std::string::size_type v2 = *(int **)(a1 + 48);
  for (size_t i = *(int **)(a1 + 56); v2 != i; ++v2)
  {
    uint64_t v4 = *v2;
    std::string::append(&v12, off_1E6247CF0[v4]);
    std::string::append(&v12, ":");
    std::to_string(&v13, *(char *)(a1 + v4 + 112));
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v5 = &v13;
    }
    else {
      std::string::size_type v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    std::string::append(&v12, (const std::string::value_type *)v5, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    std::string::append(&v12, ";");
  }
  std::string::size_type v7 = *(int **)(a1 + 72);
  for (j = *(int **)(a1 + 80); v7 != j; ++v7)
  {
    std::string::append(&v12, off_1E6247CF0[*v7]);
    std::string::append(&v12, ";");
  }
  if (*(_DWORD *)(a1 + 36) == 1) {
    std::string::append(&v12, "CABAC;");
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v9 = &v12;
  }
  else {
    unint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  strncpy((char *)&v13, (const char *)v9, 0x96uLL);
  CFStringRef v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)&v13, 0);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1BBA3DE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BBA3DED4(void *a1)
{
  sub_1BBA3DF0C(a1);

  JUMPOUT(0x1C18605E0);
}

void *sub_1BBA3DF0C(void *a1)
{
  *a1 = &unk_1F14EE3D0;
  uint64_t v3 = a1 + 12;
  std::string::size_type v2 = (void *)a1[12];
  if (v2)
  {
    free(v2);
    *uint64_t v3 = 0;
    v3[1] = 0;
  }

  return sub_1BBA3DF70(a1);
}

void *sub_1BBA3DF70(void *a1)
{
  *a1 = &unk_1F14EE560;
  std::string::size_type v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
    free(v4);
    a1[1] = 0;
    a1[2] = 0;
  }
  return a1;
}

uint64_t sub_1BBA3DFF0(uint64_t a1)
{
  return *(char *)(a1 + 124);
}

uint64_t sub_1BBA3DFF8(uint64_t a1)
{
  return *(char *)(a1 + 123);
}

uint64_t sub_1BBA3E000(uint64_t a1)
{
  return *(char *)(a1 + 122);
}

uint64_t sub_1BBA3E008(uint64_t a1)
{
  return *(char *)(a1 + 121);
}

uint64_t sub_1BBA3E010(uint64_t a1)
{
  return *(char *)(a1 + 120);
}

uint64_t sub_1BBA3E018(uint64_t a1)
{
  return *(char *)(a1 + 119);
}

uint64_t sub_1BBA3E020()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1BBA3E028(uint64_t a1)
{
  return *(char *)(a1 + 125);
}

uint64_t sub_1BBA3E030(uint64_t a1)
{
  return *(char *)(a1 + 118);
}

uint64_t sub_1BBA3E038(uint64_t a1)
{
  return *(char *)(a1 + 117);
}

uint64_t sub_1BBA3E040(uint64_t a1)
{
  return *(char *)(a1 + 116);
}

uint64_t sub_1BBA3E048(uint64_t a1)
{
  return *(char *)(a1 + 115);
}

uint64_t sub_1BBA3E050(uint64_t a1)
{
  return *(char *)(a1 + 114);
}

uint64_t sub_1BBA3E058()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1BBA3E060(uint64_t a1)
{
  return *(char *)(a1 + 113);
}

uint64_t sub_1BBA3E068(uint64_t a1)
{
  return *(char *)(a1 + 112);
}

BOOL sub_1BBA3E070(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 12) == 49;
}

BOOL sub_1BBA3E084(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 11) == 49;
}

BOOL sub_1BBA3E098(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 10) == 49;
}

BOOL sub_1BBA3E0AC(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 9) == 49;
}

BOOL sub_1BBA3E0C0(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 8) == 49;
}

BOOL sub_1BBA3E0D4(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 7) == 49;
}

uint64_t sub_1BBA3E0E8()
{
  return 0;
}

BOOL sub_1BBA3E0F0(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 13) == 49;
}

BOOL sub_1BBA3E104(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 6) == 49;
}

BOOL sub_1BBA3E118(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 5) == 49;
}

BOOL sub_1BBA3E12C(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 4) == 49;
}

BOOL sub_1BBA3E140(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 3) == 49;
}

BOOL sub_1BBA3E154(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 2) == 49;
}

uint64_t sub_1BBA3E168()
{
  return 0;
}

BOOL sub_1BBA3E170(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 96) + 1) == 49;
}

BOOL sub_1BBA3E184(uint64_t a1)
{
  return **(unsigned char **)(a1 + 96) == 49;
}

uint64_t sub_1BBA3E198(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1)) {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 16);

  return v3(a1);
}

uint64_t sub_1BBA3E224(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 186) = a2;
  uint64_t v4 = (void *)(a1 + 192);
  if (*(unsigned char *)(a3 + 32)) {
    BOOL v5 = v4 == (void *)(a3 + 48);
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    int v6 = *(char **)(a3 + 48);
    std::string::size_type v7 = *(unsigned char **)(a3 + 56);
    size_t v8 = v7 - v6;
    unint64_t v9 = (v7 - v6) >> 2;
    uint64_t v10 = *(void *)(a1 + 208);
    char v11 = *(char **)(a1 + 192);
    if (v9 <= (v10 - (uint64_t)v11) >> 2)
    {
      uint64_t v14 = (void **)(a1 + 200);
      std::string::value_type v16 = *(unsigned char **)(a1 + 200);
      unint64_t v17 = (v16 - v11) >> 2;
      if (v17 < v9)
      {
        BOOL v18 = &v6[4 * v17];
        if (v16 != v11)
        {
          memmove(*(void **)(a1 + 192), v6, v16 - v11);
          char v11 = (char *)*v14;
        }
        size_t v8 = v7 - v18;
        if (v7 == v18) {
          goto LABEL_24;
        }
        std::string::size_type v19 = v11;
        uint64_t v20 = v18;
        goto LABEL_23;
      }
    }
    else
    {
      if (v11)
      {
        *(void *)(a1 + 200) = v11;
        operator delete(v11);
        uint64_t v10 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      if ((v8 & 0x8000000000000000) != 0) {
        goto LABEL_38;
      }
      uint64_t v12 = v10 >> 1;
      if (v10 >> 1 <= v9) {
        uint64_t v12 = (v7 - v6) >> 2;
      }
      unint64_t v13 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v12;
      if (v13 >> 62) {
LABEL_38:
      }
        sub_1BB9C185C();
      char v11 = (char *)sub_1BB9C1874(v13);
      *(void *)(a1 + 200) = v11;
      uint64_t v14 = (void **)(a1 + 200);
      *(void *)(a1 + 192) = v11;
      *(void *)(a1 + 208) = &v11[4 * v15];
    }
    if (v7 == v6)
    {
LABEL_24:
      *uint64_t v14 = &v11[v8];
      goto LABEL_25;
    }
    std::string::size_type v19 = v11;
    uint64_t v20 = v6;
LABEL_23:
    memmove(v19, v20, v8);
    goto LABEL_24;
  }
LABEL_25:
  *(void *)(a1 + 272) = -1;
  *(void *)(a1 + 278) = -1;
  unint64_t v21 = (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 2;
  if (*(void *)(a1 + 200) == *(void *)(a1 + 192))
  {
    *(_DWORD *)(a1 + 216) = 0;
  }
  else
  {
    uint64_t v22 = 0;
    if (v21 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 2;
    }
    do
    {
      *(unsigned char *)(a1 + *(int *)(*(void *)(a1 + 192) + 4 * v22) + 272) = v22;
      ++v22;
    }
    while (v23 != v22);
    uint64_t v24 = 0;
    *(_DWORD *)(a1 + 216) = 0;
    unsigned int v25 = *(unsigned __int8 *)(a1 + 186);
    do
    {
      if ((v25 >> v24)) {
        int v26 = dword_1BBB78E10[5 * *(int *)(*(void *)(a1 + 192) + 4 * v24) + 4];
      }
      else {
        int v26 = 0;
      }
      *(_DWORD *)(a1 + 4 * v24 + 220) = *(_DWORD *)(a1 + 4 * v24 + 216) + v26;
      ++v24;
    }
    while (v23 != v24);
  }
  return *(unsigned int *)(a1 + 4 * v21 + 216);
}

uint64_t sub_1BBA3E418(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 44) & 7) != 0) {
    return 0;
  }
  uint64_t result = sub_1BBA3E488(a1, *(void *)(a2 + 24), 0);
  unint64_t v4 = *(void *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 24) + result + (*(int *)(a2 + 44) >> 3);
  *(void *)(a2 + 24) = v5;
  if (v5 >= v4)
  {
    *(unsigned char *)(a2 + 48) = 1;
    *(void *)(a2 + 24) = v4;
  }
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BBA3E488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  unint64_t v6 = (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 2;
  if (*(void *)(a1 + 200) != *(void *)(a1 + 192))
  {
    uint64_t v7 = 0;
    int v8 = 0;
    if (v6 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 2;
    }
    do
    {
      switch(*(_DWORD *)(*(void *)(a1 + 192) + 4 * v7))
      {
        case 0:
          if ((*(unsigned __int8 *)(a1 + 186) >> v7))
          {
            uint64_t v10 = (unsigned char *)(a2 + v8);
            *uint64_t v10 = *(_DWORD *)(a1 + 8) >> 3;
            int v11 = *(_DWORD *)(a1 + 12) >> 3;
            goto LABEL_12;
          }
          break;
        case 1:
          if ((*(unsigned __int8 *)(a1 + 186) >> v7))
          {
            unsigned int v12 = *(unsigned __int16 *)(a1 + 12);
            unint64_t v13 = (_WORD *)(a2 + v8);
            *unint64_t v13 = bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16;
            v13[1] = bswap32(v12) >> 16;
            goto LABEL_36;
          }
          break;
        case 2:
          if ((*(unsigned __int8 *)(a1 + 186) >> v7))
          {
            uint64_t v10 = (unsigned char *)(a2 + v8);
            *uint64_t v10 = *(unsigned char *)(a1 + 17);
            LOBYTE(v11) = *(unsigned char *)(a1 + 16);
LABEL_12:
            v10[1] = v11;
            v8 += 2;
          }
          break;
        case 3:
          if ((*(unsigned __int8 *)(a1 + 186) >> v7))
          {
            uint64_t v14 = (unsigned char *)(a2 + v8);
            *uint64_t v14 = *(_DWORD *)(a1 + 20) >> 4;
            v14[1] = *(_DWORD *)(a1 + 24) >> 4;
            v14[2] = *(_DWORD *)(a1 + 28) >> 4;
            int v15 = *(_DWORD *)(a1 + 32) >> 4;
            goto LABEL_26;
          }
          break;
        case 4:
          int v16 = *(unsigned __int8 *)(a1 + 80);
          char v17 = *(unsigned char *)(a1 + 276);
          goto LABEL_32;
        case 5:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) == 0) {
            break;
          }
          int v18 = (int)(float)((float)(*(float *)(a1 + 52) * 255.0) + 0.5);
          if (v18 >= 255) {
            int v18 = 255;
          }
          uint64_t v14 = (unsigned char *)(a2 + v8);
          *uint64_t v14 = v18 & ~(v18 >> 31);
          int v19 = (int)(float)((float)(*(float *)(a1 + 56) * 255.0) + 0.5);
          if (v19 >= 255) {
            int v19 = 255;
          }
          v14[1] = v19 & ~(v19 >> 31);
          int v20 = (int)(float)((float)(*(float *)(a1 + 60) * 255.0) + 0.5);
          if (v20 >= 255) {
            int v20 = 255;
          }
          v14[2] = v20 & ~(v20 >> 31);
          int v21 = (int)(float)((float)(*(float *)(a1 + 64) * 255.0) + 0.5);
          if (v21 >= 255) {
            int v21 = 255;
          }
          int v15 = v21 & ~(v21 >> 31);
LABEL_26:
          v14[3] = v15;
          goto LABEL_36;
        case 6:
          if ((*(unsigned __int8 *)(a1 + 186) >> v7))
          {
            uint64_t v22 = (unsigned char *)(a2 + v8);
            *uint64_t v22 = *(_DWORD *)(a1 + 68) >> 4;
            v22[1] = *(_DWORD *)(a1 + 72) >> 4;
            v22[2] = *(_DWORD *)(a1 + 76);
            v8 += 3;
          }
          break;
        case 7:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) == 0) {
            break;
          }
          *(void *)(a2 + v8) = bswap64(*(void *)(a1 + 88));
          goto LABEL_41;
        case 8:
          int v16 = *(unsigned __int8 *)(a1 + 96);
          char v17 = *(unsigned char *)(a1 + 280);
LABEL_32:
          int v23 = 1 << v17;
          char v24 = *(unsigned char *)(a1 + 186);
          if (v16) {
            char v25 = v24 | v23;
          }
          else {
            char v25 = v24 & ~(_BYTE)v23;
          }
          *(unsigned char *)(a1 + 186) = v25;
          break;
        case 9:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) == 0) {
            break;
          }
          int v26 = (_WORD *)(a2 + v8);
          *int v26 = bswap32(*(unsigned __int16 *)(a1 + 98)) >> 16;
          v26[1] = bswap32(*(unsigned __int16 *)(a1 + 100)) >> 16;
LABEL_36:
          v8 += 4;
          break;
        case 0xA:
          if ((*(unsigned __int8 *)(a1 + 186) >> v7)) {
            *(unsigned char *)(a2 + v8++) = *(unsigned char *)(a1 + 102);
          }
          break;
        case 0xB:
          if (((*(unsigned __int8 *)(a1 + 186) >> v7) & 1) == 0) {
            break;
          }
          uint64_t v27 = (_WORD *)(a2 + v8);
          *uint64_t v27 = bswap32(*(unsigned __int16 *)(a1 + 104)) >> 16;
          v27[1] = bswap32(*(unsigned __int16 *)(a1 + 106)) >> 16;
          v27[2] = bswap32(*(unsigned __int16 *)(a1 + 108)) >> 16;
          v27[3] = bswap32(*(unsigned __int16 *)(a1 + 110)) >> 16;
LABEL_41:
          v8 += 8;
          break;
        case 0xD:
          if ((*(unsigned __int8 *)(a1 + 186) >> v7))
          {
            unsigned int v28 = *(unsigned __int16 *)(a1 + 72);
            unsigned int v29 = *(unsigned __int16 *)(a1 + 76);
            int v30 = (_WORD *)(a2 + v8);
            *int v30 = bswap32(*(unsigned __int16 *)(a1 + 68)) >> 16;
            v30[1] = bswap32(v28) >> 16;
            v30[2] = bswap32(v29) >> 16;
            v8 += 6;
          }
          break;
        default:
          break;
      }
      ++v7;
    }
    while (v9 != v7);
  }
  uint64_t v31 = *(int *)(a1 + 4 * v6 + 216);
  uint64_t v32 = ~v31 + a3;
  if (v32 <= 0)
  {
    char v33 = *(unsigned char *)(a1 + 186);
    int v3 = v31 + 1;
  }
  else
  {
    *(unsigned char *)(a2 + v31) = 0;
    memset((void *)(a2 + v31 + 1), 128, v32 - 1);
    char v33 = *(unsigned char *)(a1 + 186) | 0x80;
    *(unsigned char *)(a1 + 186) = v33;
    uint64_t v31 = v3 - 1;
  }
  *(unsigned char *)(a2 + v31) = v33;
  return v3;
}

uint64_t sub_1BBA3E874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, a4);

  return sub_1BBA3E488(a1, a2 + a5, a6 - a5);
}

uint64_t sub_1BBA3E8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a3 - 1;
  *(unsigned char *)(a1 + 186) = *(unsigned char *)(a2 + a3 - 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v12 = *(void *)(a1 + 200);
  unint64_t v13 = (v12 - v11) >> 2;
  unsigned int v14 = *(unsigned __int8 *)(a1 + 186);
  if ((v14 & 0x80) != 0)
  {
    uint64_t v9 = v9 != 0;
    uint64_t v15 = a3;
    while (1)
    {
      uint64_t v16 = v15 - 1;
      if ((unint64_t)(v15 - 1) < 2) {
        break;
      }
      int v17 = *(char *)(a2 - 2 + v15--);
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v9 = v16 - 1;
        break;
      }
    }
  }
  uint64_t v18 = v9 - *(int *)(a1 + 4 * v13 + 216);
  if (v12 != v11)
  {
    uint64_t v19 = 0;
    int v20 = 0;
    uint64_t v21 = a2 + v18;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    do
    {
      switch(*(_DWORD *)(v11 + 4 * v19))
      {
        case 0:
          if ((v14 >> v19))
          {
            uint64_t v22 = (unsigned __int8 *)(v21 + v20);
            *(_DWORD *)(a1 + 8) = 8 * *v22;
            *(_DWORD *)(a1 + 12) = 8 * v22[1];
            goto LABEL_16;
          }
          break;
        case 1:
          if ((v14 >> v19))
          {
            int v23 = (unsigned __int16 *)(v21 + v20);
            unsigned int v24 = bswap32(*v23) >> 16;
            LODWORD(v23) = bswap32(v23[1]) >> 16;
            *(_DWORD *)(a1 + 8) = v24;
            *(_DWORD *)(a1 + 12) = v23;
            goto LABEL_22;
          }
          break;
        case 2:
          if ((v14 >> v19))
          {
            char v25 = (unsigned __int8 *)(v21 + v20);
            __int16 v26 = *v25;
            *(_WORD *)(a1 + 16) = v26 << 8;
            *(_WORD *)(a1 + 16) = v25[1] | (unsigned __int16)(v26 << 8);
LABEL_16:
            v20 += 2;
          }
          break;
        case 3:
          if ((v14 >> v19))
          {
            uint64_t v27 = (unsigned __int8 *)(v21 + v20);
            *(_DWORD *)(a1 + 20) = 16 * *v27;
            *(_DWORD *)(a1 + 24) = 16 * v27[1];
            *(_DWORD *)(a1 + 28) = 16 * (char)v27[2];
            *(_DWORD *)(a1 + 32) = 16 * (char)v27[3];
            goto LABEL_22;
          }
          break;
        case 4:
          *(unsigned char *)(a1 + 80) = (v14 >> *(unsigned char *)(a1 + 276)) & 1;
          break;
        case 5:
          if ((v14 >> v19))
          {
            unsigned int v28 = (unsigned char *)(v21 + v20);
            LOBYTE(v10) = *v28;
            *(float *)&unsigned int v29 = (float)LODWORD(v10) / 255.0;
            *(float *)(a1 + 52) = *(float *)&v29;
            LOBYTE(v29) = v28[1];
            *(float *)&unsigned int v30 = (float)v29 / 255.0;
            *(float *)(a1 + 56) = *(float *)&v30;
            LOBYTE(v30) = v28[2];
            *(float *)&unsigned int v31 = (float)v30 / 255.0;
            *(float *)(a1 + 60) = *(float *)&v31;
            LOBYTE(v31) = v28[3];
            float v10 = (float)v31 / 255.0;
            *(float *)(a1 + 64) = v10;
LABEL_22:
            v20 += 4;
          }
          break;
        case 6:
          if ((v14 >> v19))
          {
            uint64_t v32 = (unsigned __int8 *)(v21 + v20);
            *(_DWORD *)(a1 + 68) = 16 * *v32;
            *(_DWORD *)(a1 + 72) = 16 * v32[1];
            *(_DWORD *)(a1 + 76) = v32[2];
            goto LABEL_30;
          }
          break;
        case 7:
          if ((v14 >> v19))
          {
            *(void *)(a1 + 88) = bswap64(*(void *)(v21 + v20));
            goto LABEL_35;
          }
          break;
        case 8:
          *(unsigned char *)(a1 + 96) = (v14 >> *(unsigned char *)(a1 + 280)) & 1;
          break;
        case 9:
          if ((v14 >> v19))
          {
            char v33 = (unsigned __int16 *)(v21 + v20);
            *(_WORD *)(a1 + 98) = bswap32(*v33) >> 16;
            *(_WORD *)(a1 + 100) = bswap32(v33[1]) >> 16;
LABEL_30:
            v20 += 3;
          }
          break;
        case 0xA:
          if ((v14 >> v19)) {
            *(unsigned char *)(a1 + 102) = *(unsigned char *)(v21 + v20++);
          }
          break;
        case 0xB:
          if ((v14 >> v19))
          {
            int v34 = (unsigned __int16 *)(v21 + v20);
            *(_WORD *)(a1 + 104) = bswap32(*v34) >> 16;
            *(_WORD *)(a1 + 106) = bswap32(v34[1]) >> 16;
            *(_WORD *)(a1 + 108) = bswap32(v34[2]) >> 16;
            *(_WORD *)(a1 + 110) = bswap32(v34[3]) >> 16;
LABEL_35:
            v20 += 8;
          }
          break;
        case 0xD:
          if ((v14 >> v19))
          {
            int v35 = (unsigned __int16 *)(v21 + v20);
            unsigned int v36 = bswap32(v35[1]) >> 16;
            *(_DWORD *)(a1 + 68) = bswap32(*v35) >> 16;
            *(_DWORD *)(a1 + 72) = v36;
            *(_DWORD *)(a1 + 76) = bswap32(v35[2]) >> 16;
            v20 += 6;
          }
          break;
        default:
          break;
      }
      ++v19;
    }
    while (v13 != v19);
  }
  *a5 = a3 - v18;
  return 0;
}

void *sub_1BBA3ECA8(void *result, int a2)
{
  if ((a2 & 0x80000000) == 0)
  {
    char v2 = a2;
    int v3 = result;
    unint64_t v5 = (char *)result[25];
    unint64_t v4 = result[26];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v7 = (char *)result[24];
      uint64_t v8 = (v5 - v7) >> 2;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 62) {
        sub_1BB9C185C();
      }
      uint64_t v10 = v4 - (void)v7;
      if (v10 >> 1 > v9) {
        unint64_t v9 = v10 >> 1;
      }
      BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v11) {
        unint64_t v12 = v9;
      }
      if (v12)
      {
        unint64_t v12 = (unint64_t)sub_1BB9C1874(v12);
        uint64_t v7 = (char *)v3[24];
        unint64_t v5 = (char *)v3[25];
      }
      else
      {
        uint64_t v13 = 0;
      }
      unsigned int v14 = (_DWORD *)(v12 + 4 * v8);
      unint64_t v15 = v12 + 4 * v13;
      *unsigned int v14 = 0;
      unint64_t v6 = v14 + 1;
      while (v5 != v7)
      {
        int v16 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *--unsigned int v14 = v16;
      }
      v3[24] = v14;
      v3[25] = v6;
      v3[26] = v15;
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v5 = 0;
      unint64_t v6 = v5 + 4;
    }
    v3[25] = v6;
    uint64_t result = (void *)std::__sort<std::__less<int,int> &,int *>();
    *((unsigned char *)v3 + 272) = v2;
    *((unsigned char *)v3 + 186) |= 1 << v2;
  }
  return result;
}

uint64_t sub_1BBA3EDB0(uint64_t a1)
{
  int v1 = *(char *)(a1 + 283);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EDD4(uint64_t a1)
{
  int v1 = *(char *)(a1 + 282);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EDF8(uint64_t a1)
{
  int v1 = *(char *)(a1 + 281);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EE1C(uint64_t a1)
{
  int v1 = *(char *)(a1 + 280);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EE40(uint64_t a1)
{
  int v1 = *(char *)(a1 + 279);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EE64()
{
  return 0;
}

uint64_t sub_1BBA3EE6C(uint64_t a1)
{
  int v1 = *(char *)(a1 + 285);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EE90(uint64_t a1)
{
  int v1 = *(char *)(a1 + 278);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EEB4(uint64_t a1)
{
  int v1 = *(char *)(a1 + 277);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EED8()
{
  return 0;
}

uint64_t sub_1BBA3EEE0()
{
  return 0;
}

uint64_t sub_1BBA3EEE8(uint64_t a1)
{
  int v1 = *(char *)(a1 + 275);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EF0C(uint64_t a1)
{
  int v1 = *(char *)(a1 + 274);
  if (v1 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v1) & 1;
  }
}

uint64_t sub_1BBA3EF30(uint64_t a1)
{
  int v1 = *(char *)(a1 + 272);
  if (v1 & 0x80000000) == 0 && ((*(unsigned __int8 *)(a1 + 186) >> v1)) {
    return 1;
  }
  int v3 = *(char *)(a1 + 273);
  if (v3 < 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 186) >> v3) & 1;
  }
}

void sub_1BBA3EF74(void *a1)
{
  *a1 = &unk_1F14EE310;
  char v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C18605E0);
}

void *sub_1BBA3EFE4(void *a1)
{
  *a1 = &unk_1F14EE310;
  char v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1BBA3F034(uint64_t a1, const std::string *a2)
{
  std::string::size_type v2 = (std::string::size_type)a2;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  memset(&__str, 0, sizeof(__str));
  unint64_t v4 = std::string::basic_string(&v41, a2, 0, 5uLL, (std::allocator<char> *)&v39);
  int v5 = std::string::compare(v4, "FLBA;");
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (v5)
  {
    unint64_t v6 = std::string::basic_string(&v41, (const std::string *)v2, 0, 5uLL, (std::allocator<char> *)&v39);
    int v7 = std::string::compare(v6, "FLBN;");
    int v8 = v7;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v41.__r_.__value_.__l.__data_);
      if (v8) {
        goto LABEL_6;
      }
    }
    else if (v7)
    {
LABEL_6:
      if (dword_1E9F80A90 >= 1)
      {
        std::string::size_type v9 = v2;
        if (*(char *)(v2 + 23) < 0) {
          std::string::size_type v9 = *(void *)v2;
        }
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "invalid FLB prefix: %{public}s\n", v9);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(v2 + 23) < 0) {
            std::string::size_type v2 = *(void *)v2;
          }
          LODWORD(v41.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = v2;
          uint64_t v10 = MEMORY[0x1E4F14500];
          BOOL v11 = "invalid FLB prefix: %{public}s\n";
          uint32_t v12 = 12;
LABEL_74:
          _os_log_impl(&dword_1BB9B9000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v41, v12);
          goto LABEL_75;
        }
      }
      goto LABEL_75;
    }
  }
  std::string::basic_string(&v41, (const std::string *)v2, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v39);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v41;
  std::string::size_type v13 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__s.__data_[8] & 1) == 0) {
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)&v41.__r_.__value_.__s + 23) & 1) == 0)
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_21:
    std::string::basic_string(&v41, &__str, 0, size >> 1, (std::allocator<char> *)&v39);
    std::string::size_type v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v15 = __str.__r_.__value_.__l.__size_;
    }
    std::string::basic_string(&v39, &__str, v15 >> 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v38);
    uint64_t v16 = 0;
    memset(&v38, 0, sizeof(v38));
    do
    {
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v17 = &v41;
      }
      else {
        int v17 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if (v17->__r_.__value_.__s.__data_[v16] == 49)
      {
        std::string::append(&v38, off_1E6247CF0[v16]);
        std::string::append(&v38, ";");
      }
      ++v16;
    }
    while (v16 != 14);
    uint64_t v18 = 0;
    memset(&v37, 0, sizeof(v37));
    do
    {
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = &v39;
      }
      else {
        uint64_t v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if (v19->__r_.__value_.__s.__data_[v18] == 49)
      {
        std::string::append(&v37, off_1E6247CF0[v18]);
        std::string::append(&v37, ";");
      }
      ++v18;
    }
    while (v18 != 14);
    HIDWORD(v34.__r_.__value_.__r.__words[1]) = 0;
    v34.__r_.__value_.__r.__words[2] = 0x500000000000000;
    *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = 59;
    LODWORD(v34.__r_.__value_.__l.__data_) = 844319814;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v20 = &v38;
    }
    else {
      int v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v38.__r_.__value_.__l.__size_;
    }
    uint64_t v22 = std::string::append(&v34, (const std::string::value_type *)v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    unsigned int v24 = std::string::append(&v35, "|");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v26 = &v37;
    }
    else {
      __int16 v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v37.__r_.__value_.__l.__size_;
    }
    unsigned int v28 = std::string::append(&v36, (const std::string::value_type *)v26, v27);
    std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
    *(void *)(a1 + 8) = v28->__r_.__value_.__l.__size_;
    *(void *)(a1 + 15) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
    char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    int v31 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
    *(void *)a1 = v29;
    *(unsigned char *)(a1 + 23) = v30;
    if (v31 < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    goto LABEL_75;
  }
  if (dword_1E9F80A90 >= 1)
  {
    std::string::size_type v32 = v2;
    if (*(char *)(v2 + 23) < 0) {
      std::string::size_type v32 = *(void *)v2;
    }
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v13 = __str.__r_.__value_.__l.__size_;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "FLB %{public}s its size %lu is not even\n", v32, v13);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v2 + 23) < 0) {
        std::string::size_type v2 = *(void *)v2;
      }
      std::string::size_type v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v33 = __str.__r_.__value_.__l.__size_;
      }
      LODWORD(v41.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = v2;
      WORD2(v41.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 6) = v33;
      uint64_t v10 = MEMORY[0x1E4F14500];
      BOOL v11 = "FLB %{public}s its size %lu is not even\n";
      uint32_t v12 = 22;
      goto LABEL_74;
    }
  }
LABEL_75:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1BBA3F54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BBA3F618()
{
  if (qword_1E9F81F24 || !mach_timebase_info((mach_timebase_info_t)&qword_1E9F81F24))
  {
    return mach_absolute_time();
  }
  else
  {
    fwrite("Failed to initialize time!", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    return 0;
  }
}

uint64_t sub_1BBA3F68C(uint64_t result)
{
  if (!*(unsigned char *)(result + 32))
  {
    uint64_t v1 = result;
    int v3 = *(_DWORD *)(result + 16);
    std::string::size_type v2 = (mach_timebase_info *)(result + 16);
    if (v3 || *(_DWORD *)(v1 + 20) || (uint64_t result = mach_timebase_info(v2), !result))
    {
      *(unsigned char *)(v1 + 32) = 1;
      uint64_t result = mach_absolute_time();
      *(void *)(v1 + 24) = result;
    }
  }
  return result;
}

double sub_1BBA3F6DC(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v4 = *(unsigned int *)(a1 + 20);
    uint64_t v5 = (v2 - *(void *)(a1 + 24)) * *(unsigned int *)(a1 + 16);
    *(unsigned char *)(a1 + 32) = 0;
    double result = (double)(v5 / v4) / 1000000000.0;
    *(double *)a1 = *(double *)a1 + result;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_1BBA3F73C()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  dword_1EC027188 |= 2u;
  uint64_t v12 = 0;
  size_t v13 = 8;
  sysctlbyname("hw.cachelinesize", &v12, &v13, 0, 0);
  size_t v13 = 4;
  if (!sysctlbyname("hw.physicalcpu", &v14, &v13, 0, 0) && v13 == 4) {
    dword_1EC027100 = v14;
  }
  size_t v13 = 4;
  sysctlbyname("hw.logicalcpu", &v14, &v13, 0, 0);
  size_t v15 = 100;
  if (sysctlbyname("hw.machine", __s1, &v15, 0, 0))
  {
    int v0 = 0;
  }
  else if (strstr(__s1, "iPhone"))
  {
    int v0 = 1;
  }
  else if (strstr(__s1, "iPad"))
  {
    int v0 = 2;
  }
  else if (strstr(__s1, "x86_64"))
  {
    int v0 = 3;
  }
  else if (strstr(__s1, "arm64"))
  {
    int v0 = 4;
  }
  else if (strstr(__s1, "AppleTV"))
  {
    int v0 = 5;
  }
  else
  {
    int v0 = 0;
  }
  dword_1EC0271A4 = v0;
  if (sub_1BBA3FE00()) {
    int v1 = 13;
  }
  else {
    int v1 = 0;
  }
  io_registry_entry_t v2 = IORegistryEntryFromPath(*MEMORY[0x1E4F2EF00], "IODeviceTree:/arm-io");
  if (v2)
  {
    io_object_t v3 = v2;
    CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v2, @"compatible", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (!CFProperty)
    {
      IOObjectRelease(v3);
      goto LABEL_118;
    }
    CFDataRef v5 = CFProperty;
    CFTypeID v6 = CFGetTypeID(CFProperty);
    if (v6 != CFDataGetTypeID()) {
      goto LABEL_117;
    }
    unint64_t Length = CFDataGetLength(v5);
    BytePtr = CFDataGetBytePtr(v5);
    if ((uint64_t)Length >= 11)
    {
      if (*BytePtr == 97 && BytePtr[1] == 114 && BytePtr[2] == 109)
      {
        if (BytePtr[3] == 45)
        {
          if (BytePtr[4] == 105 && BytePtr[5] == 111 && BytePtr[6] == 44)
          {
            if (BytePtr[7] == 116 && BytePtr[8] == 55 && BytePtr[9] == 48 && BytePtr[10] == 48)
            {
              int v1 = 7;
LABEL_117:
              IOObjectRelease(v3);
              CFRelease(v5);
              goto LABEL_118;
            }
            if (BytePtr[6] == 44 && BytePtr[7] == 115 && BytePtr[8] == 56 && BytePtr[9] == 48 && BytePtr[10] == 48)
            {
              int v1 = 8;
              goto LABEL_117;
            }
          }
          if (Length <= 0xB)
          {
LABEL_114:
            if (sub_1BBA3FE00()) {
              int v1 = 13;
            }
            else {
              int v1 = 254;
            }
            goto LABEL_117;
          }
          if (BytePtr[4] == 105 && BytePtr[5] == 111 && BytePtr[6] == 44)
          {
            if (BytePtr[7] == 116
              && BytePtr[8] == 56
              && BytePtr[9] == 48
              && BytePtr[10] == 49
              && BytePtr[11] - 48 < 3)
            {
              int v1 = 9;
              goto LABEL_117;
            }
            if (BytePtr[6] == 44)
            {
              if (BytePtr[7] == 116 && BytePtr[8] == 56 && BytePtr[9] == 48 && BytePtr[10] == 49 && BytePtr[11] == 53)
              {
                int v1 = 10;
                goto LABEL_117;
              }
              if (BytePtr[6] == 44)
              {
                if (BytePtr[7] == 116 && BytePtr[8] == 56 && BytePtr[9] == 48 && BytePtr[10] == 50)
                {
                  int v9 = BytePtr[11];
                  int v1 = 11;
                  if (v9 == 48 || v9 == 55) {
                    goto LABEL_117;
                  }
                }
                if (BytePtr[6] == 44)
                {
                  if (BytePtr[7] == 116
                    && BytePtr[8] == 56
                    && BytePtr[9] == 48
                    && BytePtr[10] == 51
                    && BytePtr[11] == 48)
                  {
                    int v1 = 12;
                    goto LABEL_117;
                  }
                  if (BytePtr[6] == 44)
                  {
                    if (BytePtr[7] == 116
                      && BytePtr[8] == 56
                      && BytePtr[9] == 49
                      && BytePtr[10] == 48
                      && (BytePtr[11] | 2) == 0x33)
                    {
                      int v1 = 13;
                      goto LABEL_117;
                    }
                    if (BytePtr[6] == 44)
                    {
                      if (BytePtr[7] == 116
                        && BytePtr[8] == 56
                        && BytePtr[9] == 49
                        && BytePtr[10] == 49
                        && (BytePtr[11] | 2) == 0x32)
                      {
                        int v1 = 14;
                        goto LABEL_117;
                      }
                      if (BytePtr[6] == 44)
                      {
                        if (BytePtr[7] == 116
                          && BytePtr[8] == 56
                          && BytePtr[9] == 49
                          && BytePtr[10] == 50
                          && BytePtr[11] == 48)
                        {
                          int v1 = 15;
                          goto LABEL_117;
                        }
                        if (BytePtr[6] == 44)
                        {
                          if (BytePtr[7] == 116
                            && BytePtr[8] == 56
                            && BytePtr[9] == 49
                            && BytePtr[10] == 51
                            && BytePtr[11] == 48)
                          {
                            int v1 = 16;
                            goto LABEL_117;
                          }
                          if (BytePtr[6] == 44
                            && BytePtr[7] == 116
                            && BytePtr[8] == 56
                            && BytePtr[9] == 49
                            && BytePtr[10] == 52
                            && BytePtr[11] == 48)
                          {
                            int v1 = 17;
                            goto LABEL_117;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_112;
        }
        if (Length < 0xC) {
          goto LABEL_114;
        }
      }
      if (Length <= 0xD) {
        goto LABEL_114;
      }
      goto LABEL_113;
    }
LABEL_112:
    if (Length < 0xE) {
      goto LABEL_114;
    }
LABEL_113:
    if (!strncmp((const char *)BytePtr, "arm-io,vmapple", 0xEuLL))
    {
      int v1 = 255;
      goto LABEL_117;
    }
    goto LABEL_114;
  }
LABEL_118:
  dword_1EC02719C = v1;
  if (dword_1EC0271A4 == 2)
  {
    CFBooleanRef v10 = (const __CFBoolean *)MGCopyAnswer();
    BOOL v11 = CFBooleanGetValue(v10) != 0;
  }
  else
  {
    BOOL v11 = 0;
  }
  byte_1E9F81480 = v11;
}

uint64_t sub_1BBA3FE00()
{
  uint64_t result = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (result)
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x1E4F24EE0]);
    if (result)
    {
      CFArrayRef v1 = (const __CFArray *)result;
      CFTypeID v2 = CFGetTypeID((CFTypeRef)result);
      if (v2 != CFArrayGetTypeID()) {
        return 0;
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, 0);
      if (!ValueAtIndex) {
        return 0;
      }
      CFDictionaryRef v4 = ValueAtIndex;
      CFTypeID v5 = CFGetTypeID(ValueAtIndex);
      if (v5 != CFDictionaryGetTypeID()) {
        return 0;
      }
      CFTypeID v6 = (const void *)*MEMORY[0x1E4F24E88];
      int valuePtr = 0;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, v6);
      if (Value
        && (CFNumberRef v8 = Value, v9 = CFGetTypeID(Value), v9 == CFNumberGetTypeID())
        && (CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr), valuePtr == 3))
      {
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1BBA3FEE4()
{
  byte_1E9F81398 = espresso_create_context() != 0;

  return espresso_context_destroy();
}

void sub_1BBA3FF24()
{
  CFArrayRef listOfVideoEncodersOut = 0;
  if (VTCopyVideoEncoderList(0, &listOfVideoEncodersOut)) {
    goto LABEL_27;
  }
  CFIndex Count = CFArrayGetCount(listOfVideoEncodersOut);
  if (Count < 1) {
    goto LABEL_27;
  }
  CFIndex v1 = Count;
  CFIndex v2 = 0;
  io_object_t v3 = (const void *)*MEMORY[0x1E4F45620];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(listOfVideoEncodersOut, v2);
    if (ValueAtIndex)
    {
      CFDictionaryRef v5 = ValueAtIndex;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v5))
      {
        CFNumberRef Value = CFDictionaryGetValue(v5, v3);
        if (Value)
        {
          CFNumberRef v8 = Value;
          if (CFEqual(Value, @"com.apple.videotoolbox.videoencoder.h264.gva")
            || CFEqual(v8, @"com.apple.videotoolbox.videoencoder.hevc.gva"))
          {
            break;
          }
        }
      }
    }
    if (v1 == ++v2) {
      goto LABEL_27;
    }
  }
  io_registry_entry_t v9 = IORegistryEntryFromPath(*MEMORY[0x1E4F2EEF0], "IOService:/");
  if (!v9) {
    goto LABEL_25;
  }
  io_object_t v10 = v9;
  CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(v9, @"board-id", 0, 0);
  IOObjectRelease(v10);
  if (!CFProperty) {
    goto LABEL_25;
  }
  CFTypeID v12 = CFGetTypeID(CFProperty);
  if (v12 == CFDataGetTypeID())
  {
    CFStringRef v13 = CFStringCreateFromExternalRepresentation(0, (CFDataRef)CFProperty, 0);
    CFRelease(CFProperty);
    CFStringRef CFProperty = v13;
    if (!v13) {
      goto LABEL_25;
    }
LABEL_17:
    CFComparisonResult v15 = CFStringCompare(CFProperty, @"Mac-F60DEB81FF30ACF6", 0);
    CFComparisonResult v16 = CFStringCompare(CFProperty, @"Mac-7BA5B2D9E42DDD94", 0);
    CFComparisonResult v17 = CFStringCompare(CFProperty, @"Mac-27AD2F918AE68F61", 0);
    CFRelease(CFProperty);
    if (v15)
    {
      if (v16) {
        BOOL v18 = v17 == kCFCompareEqualTo;
      }
      else {
        BOOL v18 = 1;
      }
      char v19 = !v18;
    }
    else
    {
      char v19 = 0;
    }
    goto LABEL_26;
  }
  CFTypeID v14 = CFGetTypeID(CFProperty);
  if (v14 == CFStringGetTypeID()) {
    goto LABEL_17;
  }
  CFRelease(CFProperty);
LABEL_25:
  char v19 = 1;
LABEL_26:
  byte_1E9F81F38 = v19;
LABEL_27:
  if (listOfVideoEncodersOut) {
    CFRelease(listOfVideoEncodersOut);
  }
}

uint64_t sub_1BBA4013C()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1E9F81F50, memory_order_acquire) != -1)
  {
    io_object_t v3 = &v1;
    CFIndex v2 = &v3;
    std::__call_once(&qword_1E9F81F50, &v2, (void (__cdecl *)(void *))sub_1BBA401A4);
  }
  return byte_1E9F81F48;
}

void sub_1BBA401A4()
{
  byte_1E9F81F48 = 1;
}

BOOL sub_1BBA401B4()
{
  if (qword_1E9F813A0 != -1) {
    dispatch_once(&qword_1E9F813A0, &unk_1F14EF280);
  }
  if (!byte_1E9F81398) {
    return 0;
  }
  if (qword_1EC027190 != -1) {
    dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
  }
  return byte_1E9F81480 || dword_1EC0271A4 == 4 || dword_1EC0271A4 == 5;
}

void sub_1BBA40268(void *a1)
{
  *a1 = &unk_1F14EDE48;
  char v1 = (void *)a1[1];
  if (v1)
  {
    do
    {
      CFIndex v2 = (void *)v1[1];
      (*(void (**)(void *))(*v1 + 16))(v1);
      char v1 = v2;
    }
    while (v2);
  }

  JUMPOUT(0x1C18605E0);
}

void *sub_1BBA402FC(void *a1)
{
  *a1 = &unk_1F14EDE48;
  CFIndex v2 = (void *)a1[1];
  if (v2)
  {
    do
    {
      io_object_t v3 = (void *)v2[1];
      (*(void (**)(void *))(*v2 + 16))(v2);
      CFIndex v2 = v3;
    }
    while (v3);
  }
  return a1;
}

void sub_1BBA40370()
{
}

uint64_t sub_1BBA40388(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (*(_DWORD *)(a1 + 24) == a3) {
    return (*(uint64_t (**)(void, void, uint64_t))(a1 + 40))(*(void *)(a1 + 32), *(void *)(a1 + 16), a2);
  }
  else {
    return 0;
  }
}

void sub_1BBA403BC()
{
}

uint64_t sub_1BBA403D4(uint64_t a1, unsigned char *a2, int a3, unsigned char *a4)
{
  if (a2)
  {
    unint64_t v4 = 0xCBF29CE484222325;
    char v5 = *a2;
    if (*a2)
    {
      CFTypeID v6 = a2 + 1;
      do
      {
        unint64_t v4 = 0x100000001B3 * (v4 ^ v5);
        int v7 = *v6++;
        char v5 = v7;
      }
      while (v7);
    }
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  *a4 = 1;
  if (*(_DWORD *)(a1 + 24) != a3) {
    return 0;
  }
  CFNumberRef v8 = *(uint64_t **)(a1 + 32);
  uint64_t v9 = *v8;
  if (*v8)
  {
    while (!v4 || v9 != v4)
    {
      uint64_t v10 = v8[2];
      v8 += 2;
      uint64_t v9 = v10;
      if (!v10) {
        goto LABEL_14;
      }
    }
    goto LABEL_17;
  }
LABEL_14:
  if (!v4)
  {
LABEL_17:
    uint64_t v11 = 0;
    **(_DWORD **)(a1 + 40) = *((_DWORD *)v8 + 2);
    return v11;
  }
  return 4294954394;
}

void sub_1BBA40480(uint64_t a1)
{
  *(void *)a1 = &unk_1F14EDCC0;
  free(**(void ***)(a1 + 32));
  **(void **)(a1 + 32) = 0;

  JUMPOUT(0x1C18605E0);
}

uint64_t sub_1BBA404F4(uint64_t a1)
{
  *(void *)a1 = &unk_1F14EDCC0;
  free(**(void ***)(a1 + 32));
  **(void **)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_1BBA40548(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (*(_DWORD *)(a1 + 24) == a3
    && (free(**(void ***)(a1 + 32)), **(void **)(a1 + 32) = 0, a2)
    && (**(void **)(a1 + 32) = strdup(a2)) == 0)
  {
    return 4294954392;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1BBA405C0(uint64_t a1, char *__s1, int a3, unsigned char *a4)
{
  *a4 = 0;
  if (__s1)
  {
    if (!strcmp(__s1, "0") || !strcmp(__s1, "false"))
    {
      char v9 = 0;
    }
    else if (!strcmp(__s1, "1"))
    {
      char v9 = 1;
    }
    else
    {
      int v8 = strcmp(__s1, "true");
      char v9 = 1;
      if (v8) {
        goto LABEL_11;
      }
    }
    *a4 = 1;
  }
  else
  {
    char v9 = 1;
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 24) == a3) {
    **(unsigned char **)(a1 + 32) = v9;
  }
  return 0;
}

void *sub_1BBA40688(void *result, uint64_t a2, _DWORD *a3, void *a4, uint64_t a5)
{
  CFTypeID v6 = a4;
  char v9 = result;
  uint64_t v10 = *a4;
  if (!*a4)
  {
LABEL_7:
    uint64_t result = operator new(0x30uLL, MEMORY[0x1E4FBA2D0]);
    if (!result) {
      return result;
    }
    result[1] = v9[1];
    result[2] = a2;
    *((_DWORD *)result + 6) = 0;
    *uint64_t result = &unk_1F14EE150;
    result[4] = v6;
    result[5] = a3;
    if (v10)
    {
      while (!a5 || v10 != a5)
      {
        uint64_t v16 = v6[2];
        v6 += 2;
        uint64_t v10 = v16;
        if (!v16) {
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      if (a5)
      {
LABEL_14:
        v9[1] = result;
        return result;
      }
    }
    *a3 = *((_DWORD *)v6 + 2);
    goto LABEL_14;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *a4;
  while (1)
  {
    uint64_t v13 = v11;
    CFTypeID v14 = a4;
    if (v11) {
      break;
    }
LABEL_6:
    ++v11;
    uint64_t v12 = a4[2 * v11];
    if (!v12) {
      goto LABEL_7;
    }
  }
  while (1)
  {
    uint64_t v15 = *v14;
    v14 += 2;
    if (v12 == v15) {
      return result;
    }
    if (!--v13) {
      goto LABEL_6;
    }
  }
}

void *sub_1BBA40770(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, void), int a4)
{
  a3(a1, a2, 0);
  uint64_t result = operator new(0x30uLL, MEMORY[0x1E4FBA2D0]);
  if (result)
  {
    result[1] = *(void *)(a1 + 8);
    result[2] = a2;
    *uint64_t result = &unk_1F14EE178;
    result[4] = a1;
    result[5] = a3;
    *((_DWORD *)result + 6) = a4;
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9 <= a4) {
      int v9 = a4;
    }
    *(_DWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1BBA40800(uint64_t a1, int a2, char *__filename)
{
  uint64_t v3 = (uint64_t)__filename;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (__filename)
  {
    if (*(unsigned char *)(a1 + 20))
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294954394;
      }
      LOWORD(v22) = 0;
      uint64_t v13 = MEMORY[0x1E4F14500];
      CFTypeID v14 = "Config file within a config file not supported!\n";
      uint32_t v15 = 2;
LABEL_23:
      _os_log_error_impl(&dword_1BB9B9000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v22, v15);
      return 4294954394;
    }
    *(unsigned char *)(a1 + 20) = 1;
    char v5 = fopen(__filename, "r");
    if (!v5)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294954394;
      }
      int v22 = 136315138;
      size_t v23 = v3;
      uint64_t v13 = MEMORY[0x1E4F14500];
      CFTypeID v14 = "Unable to open config file '%s'\n";
      uint32_t v15 = 12;
      goto LABEL_23;
    }
    CFTypeID v6 = v5;
    int v7 = fseek(v5, 0, 2);
    unint64_t v8 = MEMORY[0x1C1860AB0](v6);
    if (v7 || (size_t v9 = v8) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v22) = 0;
        uint64_t v10 = MEMORY[0x1E4F14500];
        uint64_t v11 = "Unable to determine filesize\n";
        uint32_t v12 = 2;
        goto LABEL_26;
      }
LABEL_14:
      uint64_t v3 = 4294954386;
LABEL_15:
      fclose(v6);
      return v3;
    }
    if (v8 > 0x4000)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v22 = 134217984;
        size_t v23 = v9;
        uint64_t v10 = MEMORY[0x1E4F14500];
        uint64_t v11 = "Config file unreasonably large (%zu)\n";
        uint32_t v12 = 12;
LABEL_26:
        _os_log_error_impl(&dword_1BB9B9000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v22, v12);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
    CFComparisonResult v17 = operator new[](v8 + 1, MEMORY[0x1E4FBA2D0]);
    if (!v17)
    {
      uint64_t v3 = 4294954392;
      goto LABEL_15;
    }
    BOOL v18 = v17;
    fseek(v6, 0, 0);
    fread(v18, 1uLL, v9, v6);
    *((unsigned char *)v18 + v9) = 0;
    if (*(unsigned char *)v3)
    {
      int v20 = (unsigned __int8 *)(v3 + 1);
      while (*v20++)
        ;
    }
    uint64_t v3 = sub_1BBA40A88(a1, v19, (char *)v18);
    fclose(v6);
    MEMORY[0x1C18605A0](v18, 0x1000C8077774924);
  }
  return v3;
}

uint64_t sub_1BBA40A88(uint64_t a1, int a2, char *__s1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!__s1)
  {
    uint64_t v34 = 0;
    uint64_t v3 = 0;
    goto LABEL_66;
  }
  uint64_t v3 = strdup(__s1);
  if (!v3)
  {
    uint64_t v34 = 4294954392;
    goto LABEL_66;
  }
  int v4 = 0;
  __stringp = v3;
  __s = 0;
  uint64_t v40 = v3;
  while (1)
  {
    char v5 = strsep(&__stringp, "\r\n");
    __s = v5;
    if (!v5)
    {
      uint64_t v34 = 0;
      goto LABEL_65;
    }
    while (1)
    {
      int v6 = *v5;
      if (v6 != 32 && v6 != 9) {
        break;
      }
      __s = ++v5;
    }
    sub_1BBA40F48(v5);
    unint64_t v8 = __s;
    int v9 = *__s;
    if (!*__s || v9 == 35) {
      goto LABEL_58;
    }
    if (v9 == 45) {
      break;
    }
    buf[0] = 0;
    uint64_t v24 = strsep(&__s, ":");
    long long v25 = v24;
    if (!v24)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_64;
      }
      LODWORD(v50[0]) = 136315394;
      *(void *)((char *)v50 + 4) = 0;
      WORD6(v50[0]) = 1024;
      *(_DWORD *)((char *)v50 + 14) = v4;
      std::string v35 = MEMORY[0x1E4F14500];
      std::string v36 = "%s:%d: Parse error (expected <option> : <argument>)\n";
      std::string v37 = (uint8_t *)v50;
      uint32_t v38 = 18;
      goto LABEL_68;
    }
    sub_1BBA40F48(v24);
    for (size_t i = __s; ; __s = i)
    {
      int v27 = *i;
      if (v27 != 32 && v27 != 9) {
        break;
      }
      ++i;
    }
    char v29 = *v25;
    unint64_t v30 = 0xCBF29CE484222325;
    if (*v25)
    {
      int v31 = (unsigned __int8 *)(v25 + 1);
      do
      {
        unint64_t v30 = 0x100000001B3 * (v30 ^ v29);
        int v32 = *v31++;
        char v29 = v32;
      }
      while (v32);
    }
    if (v30 <= 1) {
      uint64_t v33 = 1;
    }
    else {
      uint64_t v33 = v30;
    }
    uint64_t v34 = sub_1BBA40F94(*(void *)(a1 + 8), v33, i, 0, (uint64_t)buf);
    if (v34) {
      goto LABEL_65;
    }
LABEL_58:
    ++v4;
  }
  uint64_t v10 = 1;
  memset(v50, 0, 512);
  do
  {
    unint64_t v11 = v10;
    while (1)
    {
      int v12 = *v8++;
      if (v12 != 32 && v12 != 9) {
        break;
      }
      __s = v8;
    }
    *((void *)v50 + v11) = strsep(&__s, " \t");
    uint64_t v10 = v11 + 1;
    unint64_t v8 = __s;
  }
  while (v11 <= 0x7E && __s);
  if (!__s)
  {
    int v41 = v4;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    unint64_t v49 = 0;
    if ((int)v10 >= 2)
    {
      uint64_t v14 = 0;
      do
      {
        sub_1BB9D08B8(__p, *((char **)v50 + v14 + 1));
        uint32_t v15 = v48;
        if ((unint64_t)v48 >= v49)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v48[-v47] >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1BB9C185C();
          }
          if (0x5555555555555556 * ((uint64_t)(v49 - v47) >> 3) > v18) {
            unint64_t v18 = 0x5555555555555556 * ((uint64_t)(v49 - v47) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v47) >> 3) >= 0x555555555555555) {
            unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v19 = v18;
          }
          std::string v53 = &v49;
          if (v19) {
            unint64_t v19 = (unint64_t)sub_1BBA41324(v19);
          }
          else {
            uint64_t v20 = 0;
          }
          unint64_t v21 = v19 + 24 * v17;
          *(void *)std::string buf = v19;
          *(void *)&buf[8] = v21;
          unint64_t v52 = v19 + 24 * v20;
          long long v22 = *(_OWORD *)__p;
          *(void *)(v21 + 16) = v46;
          *(_OWORD *)unint64_t v21 = v22;
          __p[1] = 0;
          uint64_t v46 = 0;
          __p[0] = 0;
          *(void *)&buf[16] = v21 + 24;
          sub_1BBA4136C(&v47, buf);
          size_t v23 = v48;
          sub_1BBA413F0((uint64_t)buf);
          uint64_t v48 = v23;
          if (SHIBYTE(v46) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v16 = *(_OWORD *)__p;
          *((void *)v48 + 2) = v46;
          *uint32_t v15 = v16;
          uint64_t v48 = (char *)v15 + 24;
        }
        ++v14;
      }
      while (v11 != v14);
    }
    uint64_t v34 = sub_1BBA41094(a1, &v47);
    *(void *)std::string buf = &v47;
    sub_1BBA41454((void ***)buf);
    int v4 = v41;
    if (v34) {
      goto LABEL_65;
    }
    goto LABEL_58;
  }
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    goto LABEL_64;
  }
  *(_DWORD *)std::string buf = 136315650;
  *(void *)&buf[4] = 0;
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v4;
  *(_WORD *)&buf[18] = 1024;
  *(_DWORD *)&buf[20] = 128;
  std::string v35 = MEMORY[0x1E4F14500];
  std::string v36 = "%s:%d: Too many options (max %d)\n";
  std::string v37 = buf;
  uint32_t v38 = 24;
LABEL_68:
  _os_log_error_impl(&dword_1BB9B9000, v35, OS_LOG_TYPE_ERROR, v36, v37, v38);
LABEL_64:
  uint64_t v34 = 4294954394;
LABEL_65:
  uint64_t v3 = v40;
LABEL_66:
  free(v3);
  return v34;
}

void sub_1BBA40F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::string __p = &a21;
  sub_1BBA41454((void ***)&__p);
  _Unwind_Resume(a1);
}

size_t sub_1BBA40F48(const char *a1)
{
  size_t result = strlen(a1);
  for (size_t i = &a1[result - 1]; i > a1; --i)
  {
    int v4 = *(unsigned __int8 *)i;
    if (v4 != 32 && v4 != 9) {
      break;
    }
    *size_t i = 0;
  }
  return result;
}

uint64_t sub_1BBA40F94(uint64_t a1, uint64_t a2, char *__s, uint64_t a4, uint64_t a5)
{
  if (!a2
    && strlen(__s) >= 3
    && ((*__s << 16) | (__s[1] << 8) | __s[2]) == 0xE28094)
  {
    return 4294954394;
  }
  while (1)
  {
    if (!a1) {
      return 0;
    }
    uint64_t v11 = *(void *)(a1 + 16);
    if (a2) {
      break;
    }
    if (!v11) {
      goto LABEL_16;
    }
LABEL_14:
    a1 = *(void *)(a1 + 8);
  }
  if (v11) {
    BOOL v12 = v11 == a2;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v13 = **(uint64_t (***)(uint64_t, char *, uint64_t, uint64_t))a1;

  return v13(a1, __s, a4, a5);
}

uint64_t sub_1BBA41094(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  while (1)
  {
    uint64_t v6 = v4 - v5;
    if (v6) {
      break;
    }
    uint64_t v4 = v5;
LABEL_43:
    BOOL v27 = (int)v2 <= 0;
    uint64_t v2 = (v2 - 1);
    if (v27) {
      return 0;
    }
  }
  uint64_t v7 = 0;
  int v8 = 0;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  while (1)
  {
    char v29 = 0;
    uint64_t v10 = (unsigned char *)(v5 + 24 * v7);
    if ((char)v10[23] < 0) {
      uint64_t v10 = *(unsigned char **)v10;
    }
    size_t v11 = strlen(v10);
    if (v11) {
      break;
    }
LABEL_40:
    uint64_t v7 = ++v8;
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
    if (v9 <= v8) {
      goto LABEL_43;
    }
  }
  if (*v10 != 45)
  {
    uint64_t result = sub_1BBA40F94(*(void *)(a1 + 8), 0, v10, v2, (uint64_t)&v29);
    if (result) {
      return result;
    }
    goto LABEL_40;
  }
  BOOL v12 = &v10[v11];
  size_t v13 = v11 - 1;
  do
  {
    if (!v13)
    {
      unint64_t v17 = strchr(v12, 61);
      if (!v17) {
        goto LABEL_40;
      }
LABEL_17:
      if ((unint64_t)(v17 - v12) > 0x3FE) {
        goto LABEL_40;
      }
      uint64_t v10 = __dst;
      memcpy(__dst, v12, v17 - v12);
      __dst[v17 - v12] = 0;
      LOBYTE(v14) = __dst[0];
      if (!__dst[0]) {
        goto LABEL_40;
      }
      unint64_t v19 = v17 + 1;
      int v20 = 1;
      goto LABEL_26;
    }
    int v15 = *++v10;
    int v14 = v15;
    --v13;
  }
  while (v15 == 45);
  long long v16 = strchr(v10, 61);
  if (v16)
  {
    unint64_t v17 = v16;
    BOOL v12 = v10;
    goto LABEL_17;
  }
  if (v9 <= v8 + 1)
  {
    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v19 = (char *)(v5 + 24 * (v8 + 1));
    if (v19[23] < 0) {
      unint64_t v19 = *(char **)v19;
    }
  }
  int v20 = 0;
  unint64_t v21 = 0xCBF29CE484222325;
  if (v14)
  {
LABEL_26:
    long long v22 = v10 + 1;
    unint64_t v21 = 0xCBF29CE484222325;
    do
    {
      unint64_t v21 = 0x100000001B3 * (v21 ^ (char)v14);
      int v23 = *v22++;
      LOBYTE(v14) = v23;
    }
    while (v23);
  }
  if (v21 <= 1) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = v21;
  }
  uint64_t result = sub_1BBA40F94(*(void *)(a1 + 8), v24, v19, v2, (uint64_t)&v29);
  if (!result)
  {
    if (v29) {
      int v25 = v20;
    }
    else {
      int v25 = 1;
    }
    if (v29) {
      char v26 = 0;
    }
    else {
      char v26 = v20;
    }
    if ((v26 & 1) == 0)
    {
      v8 += v25 ^ 1;
      goto LABEL_40;
    }
    return 4294954394;
  }
  return result;
}

void *sub_1BBA41324(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1BB9C18AC();
  }
  return operator new(24 * a1);
}

uint64_t *sub_1BBA4136C(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 24;
      long long v6 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v6;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v4 -= 24;
      v3 -= 24;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *uint64_t result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1BBA413F0(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1BBA41454(void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_1BBA414E0(void *result, uint64_t a2, _DWORD *a3, int a4)
{
  long long v6 = result;
  *a3 = a4;
  uint64_t v7 = result[1];
  if (v7)
  {
    uint64_t v8 = result[1];
    while (*(void *)(v8 + 16) != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *uint64_t result = &unk_1F14EDD98;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

void sub_1BBA41574()
{
}

uint64_t sub_1BBA4158C(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 24) != a3) {
    return 0;
  }
  __endptr = 0;
  *__error() = 0;
  uint64_t v6 = strtoll(a2, &__endptr, 10);
  if (*__error()) {
    return 4294954394;
  }
  BOOL v7 = *__endptr || v6 < (uint64_t)0xFFFFFFFF80000000;
  if (v7 || v6 >= 0x80000000) {
    return 4294954394;
  }
  uint64_t result = 0;
  **(_DWORD **)(a1 + 32) = v6;
  return result;
}

void *sub_1BBA41638(void *result, uint64_t a2, _WORD *a3, __int16 a4)
{
  uint64_t v6 = result;
  *a3 = a4;
  uint64_t v7 = result[1];
  if (v7)
  {
    uint64_t v8 = result[1];
    while (*(void *)(v8 + 16) != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *uint64_t result = &unk_1F14EDDF0;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

void sub_1BBA416CC()
{
}

uint64_t sub_1BBA416E4(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 24) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    uint64_t v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && v6 >= -32768 && v6 < 0x8000)
    {
      uint64_t result = 0;
      **(_WORD **)(a1 + 32) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void *sub_1BBA4178C(void *result, uint64_t a2, unsigned char *a3, char a4)
{
  uint64_t v6 = result;
  *a3 = a4;
  uint64_t v7 = result[1];
  if (v7)
  {
    uint64_t v8 = result[1];
    while (*(void *)(v8 + 16) != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *uint64_t result = &unk_1F14EDCE8;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

void sub_1BBA41820()
{
}

uint64_t sub_1BBA41838(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 24) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    uint64_t v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && v6 >= -128 && v6 < 128)
    {
      uint64_t result = 0;
      **(unsigned char **)(a1 + 32) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void *sub_1BBA418E0(void *result, uint64_t a2, unsigned char *a3, char a4)
{
  uint64_t v6 = result;
  *a3 = a4;
  uint64_t v7 = result[1];
  if (v7)
  {
    uint64_t v8 = result[1];
    while (*(void *)(v8 + 16) != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *uint64_t result = &unk_1F14EDD10;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

void sub_1BBA41974()
{
}

void *sub_1BBA4198C(void *result, uint64_t a2, void *a3)
{
  uint64_t v5 = result;
  *a3 = 0;
  uint64_t v6 = result[1];
  if (v6)
  {
    uint64_t v7 = result[1];
    while (*(void *)(v7 + 16) != a2)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      if (!v7) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (result)
    {
      result[1] = v6;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *uint64_t result = &unk_1F14EDCC0;
      result[4] = a3;
      v5[1] = result;
    }
  }
  return result;
}

void *sub_1BBA41A20(void *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = result;
  *a3 = 0;
  uint64_t v6 = result[1];
  if (v6)
  {
    uint64_t v7 = result[1];
    while (*(void *)(v7 + 16) != a2)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      if (!v7) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (result)
    {
      result[1] = v6;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *uint64_t result = &unk_1F14EDDC8;
      result[4] = a3;
      v5[1] = result;
    }
  }
  return result;
}

void sub_1BBA41AB4()
{
}

uint64_t sub_1BBA41ACC(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 24) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    unint64_t v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && (v6 & 0x8000000000000000) == 0 && !HIDWORD(v6))
    {
      uint64_t result = 0;
      **(_DWORD **)(a1 + 32) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void sub_1BBA41B70()
{
}

uint64_t sub_1BBA41B88(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 24) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    unint64_t v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && (v6 & 0x8000000000000000) == 0 && v6 < 0x10000)
    {
      uint64_t result = 0;
      **(_WORD **)(a1 + 32) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void *sub_1BBA41C2C(void *result, uint64_t a2, float *a3, float a4)
{
  unint64_t v6 = result;
  *a3 = a4;
  uint64_t v7 = result[1];
  if (v7)
  {
    uint64_t v8 = result[1];
    while (*(void *)(v8 + 16) != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *uint64_t result = &unk_1F14EDD68;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

void sub_1BBA41CC0()
{
}

uint64_t sub_1BBA41CD8(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 24) != a3) {
    return 0;
  }
  uint64_t v9 = 0;
  *__error() = 0;
  double v6 = strtod(a2, &v9);
  if (*__error() || *v9 || v6 < -3.40282347e38 || v6 > 3.40282347e38) {
    return 4294954394;
  }
  uint64_t result = 0;
  float v8 = v6;
  **(float **)(a1 + 32) = v8;
  return result;
}

void *sub_1BBA41D98(void *result, uint64_t a2, double *a3, double a4)
{
  double v6 = result;
  *a3 = a4;
  uint64_t v7 = result[1];
  if (v7)
  {
    uint64_t v8 = result[1];
    while (*(void *)(v8 + 16) != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (result)
    {
      result[1] = v7;
      result[2] = a2;
      *((_DWORD *)result + 6) = 0;
      *uint64_t result = &unk_1F14EDD40;
      result[4] = a3;
      v6[1] = result;
    }
  }
  return result;
}

void sub_1BBA41E2C()
{
}

uint64_t sub_1BBA41E44(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 24) != a3) {
    return 0;
  }
  uint64_t v10 = 0;
  *__error() = 0;
  double v6 = strtod(a2, &v10);
  if (*__error()) {
    return 4294954394;
  }
  BOOL v7 = *v10 || v6 < -1.79769313e308;
  if (v7 || v6 > 1.79769313e308) {
    return 4294954394;
  }
  uint64_t result = 0;
  **(double **)(a1 + 32) = v6;
  return result;
}

void sub_1BBA41EFC(void *a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1[170];
  char v90 = *(unsigned char *)(v9 + 284) - 8;
  bzero(a6, 0x280uLL);
  uint64_t v87 = *(void *)(v9 + 488);
  uint64_t v10 = a1[173];
  int v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  v95[0] = v11;
  v95[1] = v10;
  memset(v94, 0, sizeof(v94));
  memset(v93, 0, sizeof(v93));
  memset(v92, 0, sizeof(v92));
  uint64_t v83 = (a5 >> 3);
  int v85 = a4;
  int v80 = a5;
  int v81 = a4 >> 3;
  memset(v91, 0, sizeof(v91));
  if (a5 >= 8)
  {
    uint64_t v12 = 0;
    if (v81 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v81;
    }
    if ((int)v83 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v83;
    }
    uint64_t v82 = v14;
    do
    {
      if (v85 >= 8)
      {
        uint64_t v15 = 0;
        int v16 = a3 + 8 * v12;
        uint64_t v17 = *(void *)(v9 + 496) + 2 * (((uint64_t)a2 >> 3) + *(void *)(v9 + 488) * ((uint64_t)v16 >> 3));
        do
        {
          uint64_t v18 = sub_1BBA191B4(a1, (a2 + 8 + 8 * (int)v15) >> *(unsigned char *)(a1[171] + 2009), v16 >> *(unsigned char *)(a1[171] + 2009));
          int v19 = *(char *)(v18 + 12);
          char v20 = *(unsigned char *)(v18 + 13);
          uint64_t v21 = v15 + 1;
          int v22 = (*(__int16 *)(v17 + 2 * v15) >> 9) + (*(__int16 *)(v17 + 2 * (v15 + 1)) >> 9) + 1;
          *((unsigned char *)v94 + 8 * v15 + v12) = v20 + (v22 >> 1) - 2;
          int v23 = v19 + (v22 >> 1);
          if (v23 >= 51) {
            int v23 = 51;
          }
          if (v23 <= 15) {
            int v23 = 15;
          }
          a6[8 * v15 + 512 + v12] = byte_1BBB83515[v23 - 15] << v90;
          if (v15)
          {
            uint64_t v24 = 0;
            int v25 = -*(unsigned __int8 *)(a1[171] + 2003);
            char v26 = v20 + 2;
            char v27 = 1;
            do
            {
              char v28 = v27;
              int v29 = (v22 + 2 * v95[v24]) >> 1;
              if (v29 >= 57) {
                int v30 = 57;
              }
              else {
                int v30 = (v22 + 2 * v95[v24]) >> 1;
              }
              if (v29 <= v25) {
                int v30 = v25;
              }
              if (v30 >= 30) {
                LOBYTE(v30) = byte_1BBB83580[v30 - 30];
              }
              char v27 = 0;
              *((unsigned char *)&v93[4 * v24] + 8 * (v15 >> 1) + v12) = v26 + v30;
              uint64_t v24 = 1;
            }
            while ((v28 & 1) != 0);
          }
          ++v15;
        }
        while (v21 != v13);
      }
      ++v12;
    }
    while (v12 != v82);
  }
  uint64_t v32 = v83;
  int v31 = a3;
  int v33 = a3 == 0;
  if ((int)v83 <= v33)
  {
    int v51 = v80;
  }
  else
  {
    uint64_t v34 = a3 == 0;
    if (v81 <= 1) {
      uint64_t v35 = 1;
    }
    else {
      uint64_t v35 = v81;
    }
    uint64_t v86 = v35;
    do
    {
      if (v85 >= 8)
      {
        uint64_t v36 = 0;
        int v37 = a3 + 8 * v34;
        uint64_t v38 = *(void *)(v9 + 496) + 2 * (((uint64_t)a2 >> 3) + *(void *)(v9 + 488) * ((uint64_t)v37 >> 3));
        do
        {
          uint64_t v39 = sub_1BBA191B4(a1, (a2 + 8 * (int)v36) >> *(unsigned char *)(a1[171] + 2009), v37 >> *(unsigned char *)(a1[171] + 2009));
          int v40 = *(char *)(v39 + 12);
          char v41 = *(unsigned char *)(v39 + 13);
          int v42 = (*(__int16 *)(v38 + 2 * (v36 - v87)) >> 9) + (*(__int16 *)(v38 + 2 * v36) >> 9) + 1;
          *((unsigned char *)v92 + 8 * v34 + v36) = v41 + (v42 >> 1) - 2;
          int v43 = v40 + (v42 >> 1);
          if (v43 >= 51) {
            int v43 = 51;
          }
          if (v43 <= 15) {
            int v43 = 15;
          }
          a6[8 * v34 + 576 + v36] = byte_1BBB83515[v43 - 15] << v90;
          if ((v34 & 1) == 0)
          {
            uint64_t v44 = 0;
            int v45 = -*(unsigned __int8 *)(a1[171] + 2003);
            char v46 = v41 + 2;
            char v47 = 1;
            do
            {
              char v48 = v47;
              int v49 = (v42 + 2 * v95[v44]) >> 1;
              if (v49 >= 57) {
                int v50 = 57;
              }
              else {
                int v50 = (v42 + 2 * v95[v44]) >> 1;
              }
              if (v49 <= v45) {
                int v50 = v45;
              }
              if (v50 >= 30) {
                LOBYTE(v50) = byte_1BBB83580[v50 - 30];
              }
              char v47 = 0;
              *((unsigned char *)&v91[4 * v44] + 8 * (v34 >> 1) + v36) = v46 + v50;
              uint64_t v44 = 1;
            }
            while ((v48 & 1) != 0);
          }
          ++v36;
        }
        while (v36 != v86);
      }
      ++v34;
      uint64_t v32 = v83;
    }
    while (v34 != v83);
    int v31 = a3;
    int v51 = v80;
  }
  if (v85 >= 8)
  {
    unint64_t v52 = 0;
    std::string v53 = a6;
    LODWORD(v54) = v51 >> 2;
    if (v51 >> 2 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = v54;
    }
    if (v81 <= 1) {
      uint64_t v55 = 1;
    }
    else {
      uint64_t v55 = v81;
    }
    do
    {
      if (v51 >= 4)
      {
        uint64_t v56 = 0;
        int32x4_t v57 = &a6[32 * (v52 >> 1) + 257];
        uint64_t v58 = *(void *)(v9 + 640)
            + ((uint64_t)v31 >> 2)
            + *(void *)(v9 + 616) * ((uint64_t)(a2 + 8 + 8 * (int)v52) >> 3);
        do
        {
          if (*(unsigned char *)(v58 + v56))
          {
            int v59 = *((char *)v94 + 8 * v52 + (v56 >> 1)) + 2 * *(unsigned __int8 *)(v58 + v56);
            if (v59 >= 53) {
              int v59 = 53;
            }
            if (v59 <= 17) {
              int v59 = 17;
            }
            v53[v56] = byte_1BBB83546[v59 - 17] << v90;
          }
          ++v56;
        }
        while (v54 != v56);
        if (v52)
        {
          uint64_t v60 = 0;
          do
          {
            if (*(unsigned __int8 *)(v58 + v60) >= 2u)
            {
              uint64_t v61 = (char *)v93 + 8 * (v52 >> 1) + (v60 >> 1);
              int v62 = *v61;
              if (v62 >= 53) {
                int v62 = 53;
              }
              if (v62 <= 17) {
                int v62 = 17;
              }
              int v63 = byte_1BBB83546[v62 - 17];
              int v64 = v61[64];
              if (v64 >= 53) {
                int v64 = 53;
              }
              if (v64 <= 17) {
                int v64 = 17;
              }
              int v65 = byte_1BBB83546[v64 - 17];
              *(v57 - 1) = v63 << v90;
              *int32x4_t v57 = v65 << v90;
            }
            ++v60;
            v57 += 2;
          }
          while (v54 != v60);
        }
      }
      ++v52;
      v53 += 16;
    }
    while (v52 != v55);
  }
  if ((int)v32 > v33)
  {
    uint64_t v66 = v31 == 0;
    LODWORD(v67) = v85 >> 2;
    if (v85 >> 2 <= 1) {
      uint64_t v67 = 1;
    }
    else {
      uint64_t v67 = v67;
    }
    unint64_t v68 = &a6[16 * (v31 == 0) + 128];
    do
    {
      if (v85 >= 4)
      {
        uint64_t v69 = 0;
        uint64_t v70 = v66 >> 1;
        uint64_t v71 = &a6[32 * v70 + 385];
        uint64_t v72 = *(void *)(v9 + 624) + ((uint64_t)a2 >> 2) + *(void *)(v9 + 608) * ((uint64_t)(v31 + 8 * (int)v66) >> 3);
        do
        {
          if (*(unsigned char *)(v72 + v69))
          {
            int v73 = *((char *)v92 + 8 * v66 + (v69 >> 1)) + 2 * *(unsigned __int8 *)(v72 + v69);
            if (v73 >= 53) {
              int v73 = 53;
            }
            if (v73 <= 17) {
              int v73 = 17;
            }
            v68[v69] = byte_1BBB83546[v73 - 17] << v90;
          }
          ++v69;
        }
        while (v67 != v69);
        if ((v66 & 1) == 0)
        {
          uint64_t v74 = 0;
          do
          {
            if (*(unsigned __int8 *)(v72 + v74) >= 2u)
            {
              int v75 = (char *)v91 + 8 * v70 + (v74 >> 1);
              int v76 = *v75;
              if (v76 >= 53) {
                int v76 = 53;
              }
              if (v76 <= 17) {
                int v76 = 17;
              }
              int v77 = byte_1BBB83546[v76 - 17];
              int v78 = v75[64];
              if (v78 >= 53) {
                int v78 = 53;
              }
              if (v78 <= 17) {
                int v78 = 17;
              }
              int v79 = byte_1BBB83546[v78 - 17];
              *(v71 - 1) = v77 << v90;
              *uint64_t v71 = v79 << v90;
            }
            ++v74;
            v71 += 2;
          }
          while (v67 != v74);
        }
      }
      ++v66;
      v68 += 16;
    }
    while (v66 != v32);
  }
}

uint64_t sub_1BBA425F0(uint64_t (**a1)(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50, uint64_t a51, uint64_t a52, uint64_t a53, uint64_t a54, uint64_t a55, uint64_t a56, uint64_t a57, uint64_t a58, uint64_t a59, uint64_t a60, uint64_t a61, uint64_t a62, uint64_t a63), uint64_t a2, int a3)
{
  a1[4] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA4967C;
  a1[5] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA41EFC;
  a1[7] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA49298;
  a1[8] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA48B28;
  uint64_t v3 = *(unsigned __int8 **)(a2 + 1368);
  unsigned int v4 = v3[2000];
  if (v4 > 0xA) {
    return 4294954386;
  }
  unsigned int v9 = v3[173];
  if (v9 < 2)
  {
    BOOL v10 = v9 == 0;
    if (v3[173]) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v4 == 8;
    }
    if (v11)
    {
      a1[10] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47DA4;
      a1[11] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47D2C;
      a1[12] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47C24;
      a1[13] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47B04;
      a1[14] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47A68;
      a1[15] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47528;
      int v16 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA48300;
      if (!*(unsigned char *)(*(void *)(a2 + 1384) + 19))
      {
        int v16 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA487B0;
        if (v3[255]) {
          int v16 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA48300;
        }
      }
      BOOL v12 = 0;
      *a1 = v16;
      a1[1] = 0;
      uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47E2C;
      if (a3) {
        uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA48120;
      }
      BOOL v10 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_1E9F81F58, memory_order_acquire) != -1)
    {
      uint64_t v38 = &v36;
      int v37 = &v38;
      std::__call_once(&qword_1E9F81F58, &v37, (void (__cdecl *)(void *))nullsub_21);
    }
    BOOL v10 = 0;
    uint64_t v3 = *(unsigned __int8 **)(a2 + 1368);
    unsigned int v4 = v3[2000];
    unsigned int v9 = 1;
  }
  BOOL v12 = v9 == 1;
  if (v12 && v4 == 8)
  {
    a1[10] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47DA4;
    a1[11] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47D2C;
    a1[12] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47C24;
    a1[13] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47B04;
    a1[14] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47A68;
    a1[15] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA47528;
    uint64_t v14 = sub_1BBA468F0;
    if (!*(unsigned char *)(*(void *)(a2 + 1384) + 19))
    {
      uint64_t v14 = sub_1BBA47028;
      if (v3[255]) {
        uint64_t v14 = sub_1BBA468F0;
      }
    }
    *a1 = v14;
    a1[1] = 0;
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA46170;
    if (a3) {
      uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA465B4;
    }
    BOOL v12 = 1;
LABEL_28:
    a1[2] = v15;
    a1[3] = 0;
  }
  uint64_t v17 = *(void *)(a2 + 1368);
  int v18 = *(unsigned __int8 *)(v17 + 2000);
  if (v10 && v18 == 9)
  {
    a1[10] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA460E8;
    a1[11] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA4606C;
    a1[12] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA45F60;
    a1[13] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA45E3C;
    a1[14] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA45DA0;
    a1[15] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA45824;
    char v20 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44FF4;
    if (!*(unsigned char *)(*(void *)(a2 + 1384) + 19))
    {
      char v20 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA454B0;
      if (*(unsigned char *)(v17 + 255)) {
        char v20 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44FF4;
      }
    }
    *a1 = v20;
    a1[1] = 0;
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44B20;
    if (a3) {
      uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44E14;
    }
    a1[2] = v21;
    a1[3] = 0;
    uint64_t v17 = *(void *)(a2 + 1368);
    int v18 = *(unsigned __int8 *)(v17 + 2000);
  }
  char v22 = !v12;
  if (v18 != 9) {
    char v22 = 1;
  }
  if ((v22 & 1) == 0)
  {
    a1[10] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA460E8;
    a1[11] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA4606C;
    a1[12] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA45F60;
    a1[13] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA45E3C;
    a1[14] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA45DA0;
    a1[15] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA45824;
    int v23 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA43560;
    if (!*(unsigned char *)(*(void *)(a2 + 1384) + 19))
    {
      int v23 = sub_1BBA43CB0;
      if (*(unsigned char *)(v17 + 255)) {
        int v23 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA43560;
      }
    }
    *a1 = v23;
    a1[1] = 0;
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA42DE0;
    if (a3) {
      uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA43224;
    }
    a1[2] = v24;
    a1[3] = 0;
    uint64_t v17 = *(void *)(a2 + 1368);
    int v18 = *(unsigned __int8 *)(v17 + 2000);
  }
  char v25 = !v10;
  if (v18 != 10) {
    char v25 = 1;
  }
  if ((v25 & 1) == 0)
  {
    a1[10] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44A98;
    a1[11] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44A1C;
    a1[12] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44910;
    a1[13] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA447EC;
    a1[14] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44750;
    a1[15] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA441D4;
    char v26 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44FF4;
    if (!*(unsigned char *)(*(void *)(a2 + 1384) + 19))
    {
      char v26 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA454B0;
      if (*(unsigned char *)(v17 + 255)) {
        char v26 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44FF4;
      }
    }
    *a1 = v26;
    a1[1] = 0;
    char v27 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44B20;
    if (a3) {
      char v27 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44E14;
    }
    a1[2] = v27;
    a1[3] = 0;
    uint64_t v17 = *(void *)(a2 + 1368);
    int v18 = *(unsigned __int8 *)(v17 + 2000);
  }
  char v28 = !v12;
  if (v18 != 10) {
    char v28 = 1;
  }
  if ((v28 & 1) == 0)
  {
    a1[10] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44A98;
    a1[11] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44A1C;
    a1[12] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44910;
    a1[13] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA447EC;
    a1[14] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA44750;
    a1[15] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA441D4;
    int v29 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA43560;
    if (!*(unsigned char *)(*(void *)(a2 + 1384) + 19))
    {
      int v29 = sub_1BBA43CB0;
      if (*(unsigned char *)(v17 + 255)) {
        int v29 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA43560;
      }
    }
    *a1 = v29;
    a1[1] = 0;
    int v30 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA42DE0;
    if (a3) {
      int v30 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBA43224;
    }
    a1[2] = v30;
    a1[3] = 0;
    uint64_t v17 = *(void *)(a2 + 1368);
  }
  a1[5] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD67F0;
  a1[4] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD6560;
  a1[8] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD5F1C;
  int v31 = *(unsigned __int8 *)(v17 + 2000);
  if (v31 == 10)
  {
    a1[10] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD4754;
    a1[11] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD42E0;
    a1[12] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD413C;
    a1[13] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD4050;
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD3928;
    goto LABEL_71;
  }
  if (v31 == 8)
  {
    a1[10] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD5A3C;
    a1[11] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD560C;
    a1[12] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD54D0;
    a1[13] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD5444;
    a1[14] = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD4C5C;
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BBAD3198;
LABEL_71:
    a1[15] = v32;
  }
  uint64_t result = 0;
  uint64_t v33 = 5;
  if (!*(unsigned char *)(*(void *)(a2 + 1384) + 12)) {
    uint64_t v33 = 4;
  }
  uint64_t v34 = 8;
  if (!*(unsigned char *)(*(void *)(a2 + 1384) + 12)) {
    uint64_t v34 = 7;
  }
  uint64_t v35 = a1[v34];
  a1[6] = a1[v33];
  a1[9] = v35;
  a1[16] = 0;
  return result;
}

uint64_t sub_1BBA42DE0(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61 = result;
  uint64_t v62 = *(void *)(a2 + 1360);
  int v63 = *(_DWORD *)(v62 + 276);
  int v64 = *(_DWORD *)(v62 + 280);
  uint64_t v65 = *(void *)(v62 + 112);
  uint64_t v66 = *(void *)(v62 + 120);
  uint64_t v129 = v62;
  uint64_t v67 = *(void *)(a2 + 1368);
  int v68 = *(unsigned __int8 *)(v67 + 2013);
  char v69 = *(unsigned char *)(v67 + 2009);
  int v70 = a3 << v69;
  int v71 = a4 << v69;
  int v72 = (a4 << v69) - 16;
  if (*(_DWORD *)(v67 + 2016) - 1 == a3)
  {
    BOOL v73 = v71 < 16;
    if (v71 >= 16) {
      int v74 = v72;
    }
    else {
      int v74 = 0;
    }
    if (!v73) {
      int v72 = 0;
    }
    int v75 = v72 + v68;
    if (v70 <= 63) {
      unsigned int v76 = 0;
    }
    else {
      unsigned int v76 = (v70 - 1) & 0xFFFFFFC0;
    }
    unsigned int v119 = v76;
    int v77 = v63 - v76;
    *(_DWORD *)(result + 128) = v74 + v75 - 8;
    int v108 = v74;
    if (*(_DWORD *)(v67 + 2020) - 1 == a4)
    {
      int v75 = v64 - v74;
      *(_DWORD *)(result + 128) = v64;
    }
  }
  else
  {
    if (!a3 || (v70 & 0x3F) != 0) {
      return result;
    }
    BOOL v78 = v71 < 16;
    if (v71 >= 16) {
      int v79 = v72;
    }
    else {
      int v79 = 0;
    }
    if (!v78) {
      int v72 = 0;
    }
    int v80 = v72 + v68;
    if (v70 >= 64) {
      int v81 = v70 - 64;
    }
    else {
      int v81 = 0;
    }
    unsigned int v119 = v81;
    if (v70 >= 64) {
      int v77 = 64;
    }
    else {
      int v77 = v70;
    }
    int v108 = v79;
    int v82 = v64 - v79;
    if (*(_DWORD *)(v67 + 2020) - 1 == a4) {
      int v75 = v82;
    }
    else {
      int v75 = v80;
    }
  }
  if (v75 >= 1)
  {
    int v83 = 0;
    vars0 = &STACK[0x680];
    uint64_t v124 = 16 * v65;
    uint64_t v84 = 16 * v66;
    int v117 = v77;
    int v118 = v63;
    int v109 = v75;
    do
    {
      int v110 = v83;
      if (v75 - v83 >= 64) {
        uint64_t v85 = 64;
      }
      else {
        uint64_t v85 = (v75 - v83);
      }
      if (v77 >= 1)
      {
        int v86 = 0;
        BOOL v87 = v83 + v108 == 0;
        unsigned int v123 = v110 + v108;
        uint64_t v122 = ((int)v85 >> 3);
        uint64_t v116 = v122 - v87;
        uint64_t v121 = (((int)v85 + 8) >> 4);
        uint64_t v114 = v121 - v87;
        uint64_t v115 = v124 * v87;
        uint64_t v113 = v84 * v87;
        int v130 = v110 + v108 == 0;
        uint64_t vars8 = &STACK[0x600] + 4 * v87;
        do
        {
          if (v77 - v86 >= 64) {
            uint64_t v88 = 64;
          }
          else {
            uint64_t v88 = (v77 - v86);
          }
          int v128 = v86;
          uint64_t v89 = v86 + v119;
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))(v61 + 48))(a2, v89, v123, v88, v85, &a29);
          int v126 = v89;
          uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v129 + 16))(v129, v89, v123, 0);
          uint64_t v91 = v90;
          BOOL v125 = (int)v88 + (int)v89 < v63;
          LODWORD(v92) = (int)v88 >> 3;
          if ((int)v88 + (int)v89 >= v63) {
            uint64_t v92 = v92;
          }
          else {
            uint64_t v92 = (v92 + 1);
          }
          if ((int)v92 >= 2)
          {
            uint64_t v93 = v92 - 1;
            uint64_t v94 = v90 + 16;
            unint64_t v95 = &a29;
            uint64_t v96 = &STACK[0x680];
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 80))(v94, v65, v96, v95, v85);
              v95 += 16;
              ++v96;
              v94 += 16;
              --v93;
            }
            while (v93);
          }
          if ((int)v122 > v130)
          {
            uint64_t v97 = v116;
            uint64_t v98 = v91 + v115;
            int v99 = &STACK[0x6C0] + (v110 + v108 == 0);
            int v100 = &a45 + 2 * (v110 + v108 == 0);
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 88))(v98, v65, v99, v100, v88);
              v100 += 2;
              ++v99;
              v98 += v124;
              --v97;
            }
            while (v97);
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v129 + 16))(v129, (v126 >> 1), ((v110 + v108) >> 1), 1);
          uint64_t v127 = result;
          uint64_t v101 = (v125 + (((int)v88 + 8) >> 4));
          uint64_t v84 = 16 * v66;
          if ((int)v101 >= 2)
          {
            uint64_t v102 = v101 - 1;
            uint64_t v103 = result + 32;
            int v104 = &a61;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v61 + 96))(v103, v66, v104, ((int)v85 >> 1));
              v104 += 4;
              v103 += 32;
              --v102;
            }
            while (v102);
          }
          if ((int)v121 > v130)
          {
            uint64_t v105 = v127 + v113;
            int16x8_t v106 = vars8;
            uint64_t v107 = v114;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, void))(v61 + 104))(v105, v66, v106, ((int)v88 >> 1));
              v106 += 4;
              v105 += 16 * v66;
              --v107;
            }
            while (v107);
          }
          int v86 = v128 + 64;
          int v77 = v117;
          int v63 = v118;
        }
        while (v128 + 64 < v117);
      }
      int v75 = v109;
      int v83 = v110 + 64;
    }
    while (v110 + 64 < v109);
  }
  return result;
}

uint64_t sub_1BBA43224(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = *(_DWORD **)(a2 + 1360);
  int v6 = v5[69];
  int v7 = v5[70];
  uint64_t v8 = *(void *)(a2 + 1368);
  unsigned int v9 = *(unsigned __int8 *)(v8 + 2013);
  LOBYTE(v8) = *(unsigned char *)(v8 + 2009);
  uint64_t v10 = (a3 << v8);
  uint64_t v11 = (a4 << v8);
  unsigned int v12 = v9 >> 1;
  if ((int)(v10 + v9) >= v6) {
    uint64_t v13 = (v6 - v10);
  }
  else {
    uint64_t v13 = v9;
  }
  if ((int)(v10 + v9) >= v6) {
    uint64_t v14 = (((v6 - (int)v10) >> 1) + 2);
  }
  else {
    uint64_t v14 = v12;
  }
  if ((int)(v11 + v9) >= v7) {
    int v15 = v7 - v11;
  }
  else {
    int v15 = v9;
  }
  if ((int)(v11 + v9) >= v7) {
    uint64_t v16 = (((v7 - (int)v11) >> 1) + 2);
  }
  else {
    uint64_t v16 = v12;
  }
  int v50 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 72))(a2, v10, v11, v13);
  uint64_t v44 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, v10, v11, 0);
  char v47 = v5;
  uint64_t v17 = *((void *)v5 + 14);
  int v49 = v10;
  int v45 = v13;
  int v46 = v10 == 0;
  uint64_t v18 = ((int)v13 >> 3);
  if ((int)v18 > v46)
  {
    uint64_t v19 = v18 - (v10 == 0);
    char v20 = &v51[10 * (v49 == 0)];
    uint64_t v21 = &v51[5 * (v49 == 0) + 296];
    uint64_t v22 = v44 - 16 * v17 + 16 * (v49 == 0);
    do
    {
      (*(void (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 80))(v22, v17, v21, v20, (v50 + 8));
      v20 += 10;
      v21 += 5;
      v22 += 16;
      --v19;
    }
    while (v19);
  }
  int v23 = v11 == 0;
  uint64_t v24 = (v50 >> 3);
  int v48 = v11;
  if ((int)v24 <= v23)
  {
    LODWORD(v26) = v45 + 8;
  }
  else
  {
    BOOL v25 = v11 == 0;
    uint64_t v26 = (v45 + 8);
    uint64_t v27 = v24 - v25;
    char v28 = &v51[10 * v25 + 80];
    int v29 = &v51[5 * v25 + 336];
    uint64_t v30 = v44 + 16 * v17 * v25 - 16;
    do
    {
      (*(void (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 88))(v30, v17, v29, v28, v26);
      v28 += 10;
      v29 += 5;
      v30 += 16 * v17;
      --v27;
    }
    while (v27);
    int v23 = v11 == 0;
  }
  uint64_t result = (*(uint64_t (**)(void *, void, void, uint64_t))(*v47 + 16))(v47, (v49 >> 1), ((int)v11 >> 1), 1);
  uint64_t v32 = result;
  uint64_t v33 = v47[15];
  uint64_t v34 = ((int)v26 >> 4);
  if ((int)v34 > v46)
  {
    BOOL v35 = v49 == 0;
    uint64_t v36 = v34 - v35;
    int v37 = &v51[17 * v35 + 160];
    uint64_t v38 = result - 4 * v33 + 32 * v35;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 96))(v38, v33, v37, v16);
      v37 += 17;
      v38 += 32;
      --v36;
    }
    while (v36);
  }
  uint64_t v39 = ((v50 + 8) >> 4);
  if ((int)v39 > v23)
  {
    BOOL v40 = v48 == 0;
    uint64_t v41 = v39 - v40;
    int v42 = &v51[17 * v40 + 228];
    uint64_t v43 = v32 + 16 * v33 * v40 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 104))(v43, v33, v42, v14);
      v42 += 17;
      v43 += 16 * v33;
      --v41;
    }
    while (v41);
  }
  return result;
}

uint64_t sub_1BBA43560(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char v69 = a3;
  uint64_t v70 = result;
  uint64_t v71 = *(void *)(a2 + 1360);
  int v136 = *(_DWORD *)(v71 + 276);
  uint64_t v72 = *(void *)(v71 + 112);
  uint64_t v73 = *(void *)(v71 + 120);
  int v74 = *a3;
  unsigned __int8 v137 = (_DWORD *)v71;
  if (*a3 < *(_DWORD *)(v71 + 280))
  {
    v74 &= 0xFFFFFFF0;
    *a3 = v74;
  }
  int v75 = *(_DWORD *)(result + 128);
  if (v75 < v74)
  {
    signed int v144 = (v136 - 1) & 0xFFFFFFC0;
    uint64_t v139 = (_OWORD *)(a2 + 4392);
    uint64_t vars0 = v73;
    uint64_t v143 = 16 * v72;
    uint64_t vars8 = &a53;
    uint64_t v142 = 16 * v73;
    int v135 = v69;
    uint64_t v145 = v72;
    do
    {
      uint64_t v76 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v137 + 16))(v137, 0);
      uint64_t result = (*(uint64_t (**)(_DWORD *, void, void, uint64_t))(*(void *)v137 + 16))(v137, 0, (*(int *)(v70 + 128) >> 1), 1);
      uint64_t v77 = *(unsigned int *)(v70 + 128);
      int v78 = *v69 - v77;
      if (v78 >= 64) {
        uint64_t v79 = 64;
      }
      else {
        uint64_t v79 = v78;
      }
      if (v77) {
        uint64_t v80 = (v77 - 8);
      }
      else {
        uint64_t v80 = 0;
      }
      int v81 = v79 + 8;
      if (v77) {
        uint64_t v82 = v81;
      }
      else {
        uint64_t v82 = v79;
      }
      uint64_t v155 = v82;
      unsigned int v149 = v80;
      int v146 = v79;
      uint64_t v147 = ((int)v79 >> 3);
      uint64_t v148 = (v81 >> 4);
      uint64_t v83 = 0;
      if (v144 < 1)
      {
        uint64_t v112 = a2;
      }
      else
      {
        uint64_t v84 = ((int)v79 >> 1);
        uint64_t v85 = a2;
        uint64_t v86 = v82;
        do
        {
          uint64_t v151 = result;
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))(v70 + 48))(v85, v83, *(unsigned int *)(v70 + 128), 64, v79, &a21);
          int v153 = v83;
          BOOL v87 = (_OWORD *)(*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v85 + 1360) + 16))(*(void *)(v85 + 1360), v83, v80, 0);
          if ((int)v86 >= 1)
          {
            uint64_t v88 = 2 * *(void *)(*(void *)(v85 + 1360) + 112);
            uint64_t v89 = v139;
            do
            {
              *uint64_t v89 = *v87;
              long long v90 = v87[1];
              long long v91 = v87[2];
              long long v92 = v87[4];
              v89[3] = v87[3];
              v89[4] = v92;
              v89[1] = v90;
              v89[2] = v91;
              long long v93 = v87[5];
              long long v94 = v87[6];
              long long v95 = v87[8];
              v89[7] = v87[7];
              v89[8] = v95;
              v89[5] = v93;
              v89[6] = v94;
              BOOL v87 = (_OWORD *)((char *)v87 + v88);
              v89 += 9;
              --v86;
            }
            while (v86);
          }
          uint64_t v96 = v85;
          uint64_t v97 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v70 + 80))(v76 + i, v145, (char *)&STACK[0x600] + v97, (char *)&STACK[0x600] + i - 528, v79);
            v97 += 8;
          }
          sub_1BBA19044(v96, v153, v149, 72, v155, 0);
          int v99 = *(_DWORD *)(v70 + 128);
          if ((int)v147 > (v99 == 0))
          {
            BOOL v100 = v99 == 0;
            uint64_t v101 = v147 - v100;
            uint64_t v102 = &a37 + 2 * v100;
            uint64_t v103 = &STACK[0x640] + v100;
            uint64_t v104 = v76 + v143 * v100;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v70 + 88))(v104, v145, v103, v102, 64);
              v102 += 2;
              ++v103;
              v104 += v143;
              --v101;
            }
            while (v101);
          }
          sub_1BBA19044(a2, v153, v149, 72, v155, 0);
          sub_1BBA18E28(a2, v153, v149, 72, v155, 1);
          uint64_t v105 = 0;
          uint64_t v73 = vars0;
          do
          {
            uint64_t v106 = v105 + 32;
            (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(v70 + 96))(v105 + 32 + v151, vars0, (char *)&a53 + v105, v84);
            uint64_t v105 = v106;
          }
          while (v106 != 128);
          sub_1BBA19044(a2, v153, v149, 72, v155, 1);
          int v107 = *(_DWORD *)(v70 + 128);
          if ((int)v148 > (v107 == 0))
          {
            BOOL v108 = v107 == 0;
            uint64_t v109 = v148 - v108;
            int v110 = &a69 + 4 * v108;
            uint64_t v111 = v151 + v142 * v108;
            do
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v70 + 104))(v111, vars0, v110, 32);
              v110 += 4;
              v111 += v142;
              --v109;
            }
            while (v109);
          }
          uint64_t v85 = a2;
          uint64_t v80 = v149;
          uint64_t v86 = v155;
          sub_1BBA19044(a2, v153, v149, 72, v155, 1);
          v76 += 128;
          uint64_t result = v151 + 128;
          uint64_t v83 = (v153 + 64);
          uint64_t v79 = v146;
        }
        while ((int)v83 < v144);
        uint64_t v112 = a2;
        uint64_t v77 = *(unsigned int *)(v70 + 128);
        uint64_t v72 = v145;
      }
      int v113 = v136 - v83;
      if (v136 != v83)
      {
        uint64_t v152 = result;
        uint64_t v114 = v112;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, char *))(v70 + 48))(v112, v83, v77, (v136 - v83), v79, &a21);
        int v154 = v83;
        sub_1BBA18E28(v114, v83, v80, v113, v155, 0);
        int v138 = v136 - v83;
        if (v113 >= 16)
        {
          uint64_t v115 = v79;
          uint64_t v116 = v76 + 16;
          uint64_t v117 = (v138 >> 3) - 1;
          int v118 = &a21;
          unsigned int v119 = &STACK[0x600];
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v70 + 80))(v116, v72, v119, v118, v115);
            v118 += 16;
            ++v119;
            v116 += 16;
            --v117;
          }
          while (v117);
        }
        sub_1BBA19044(a2, v154, v149, v138, v155, 0);
        int v120 = *(_DWORD *)(v70 + 128);
        if ((int)v147 > (v120 == 0))
        {
          BOOL v121 = v120 == 0;
          uint64_t v122 = v147 - v121;
          unsigned int v123 = &a37 + 2 * v121;
          uint64_t v124 = &STACK[0x640] + v121;
          uint64_t v125 = v76 + v143 * v121;
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))(v70 + 88))(v125, v72, v124, v123, v138);
            v123 += 2;
            ++v124;
            v125 += v143;
            --v122;
          }
          while (v122);
        }
        sub_1BBA19044(a2, v154, v149, v138, v155, 0);
        sub_1BBA18E28(a2, v154, v149, v138, v155, 1);
        LODWORD(v79) = v146;
        if (v138 >= 24)
        {
          uint64_t v126 = v152 + 32;
          uint64_t v127 = ((v138 + 8) >> 4) - 1;
          int v128 = &a53;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, void))(v70 + 96))(v126, v73, v128, (v146 >> 1));
            v128 += 4;
            v126 += 32;
            --v127;
          }
          while (v127);
        }
        sub_1BBA19044(a2, v154, v149, v138, v155, 1);
        int v129 = *(_DWORD *)(v70 + 128);
        uint64_t v72 = v145;
        if ((int)v148 > (v129 == 0))
        {
          BOOL v130 = v129 == 0;
          uint64_t v131 = v148 - v130;
          int v132 = &a69 + 4 * v130;
          uint64_t v133 = v152 + v142 * v130;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, void))(v70 + 104))(v133, v73, v132, (v138 >> 1));
            v132 += 4;
            v133 += v142;
            --v131;
          }
          while (v131);
        }
        uint64_t result = sub_1BBA19044(a2, v154, v149, v138, v155, 1);
        LODWORD(v77) = *(_DWORD *)(v70 + 128);
      }
      char v69 = v135;
      int v75 = v77 + v79;
      *(_DWORD *)(v70 + 128) = v75;
    }
    while (v75 < *v135);
  }
  int v134 = v137[70];
  if (v134 >= v75) {
    int v134 = v75;
  }
  *char v69 = v134;
  if (*(_DWORD *)(v70 + 128) < v137[70])
  {
    if (v134 <= 4) {
      int v134 = 4;
    }
    *char v69 = v134 - 4;
  }
  return result;
}

uint64_t sub_1BBA43CB0(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v65 = a3;
  uint64_t v66 = result;
  uint64_t v67 = *(void *)(a2 + 1360);
  int v117 = *(_DWORD *)(v67 + 276);
  uint64_t v69 = *(void *)(v67 + 112);
  uint64_t v68 = *(void *)(v67 + 120);
  int v70 = *a3;
  int v118 = (_DWORD *)v67;
  if (*a3 < *(_DWORD *)(v67 + 280))
  {
    v70 &= 0xFFFFFFF0;
    *a3 = v70;
  }
  int v71 = *(_DWORD *)(result + 128);
  if (v71 < v70)
  {
    signed int v124 = (v117 - 1) & 0xFFFFFFC0;
    uint64_t vars8 = &a49;
    uint64_t v121 = 16 * v69;
    uint64_t v72 = 16 * v68;
    uint64_t v116 = v65;
    uint64_t v122 = v68;
    uint64_t vars0 = 16 * v68;
    do
    {
      uint64_t v73 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v118 + 16))(v118, 0);
      uint64_t result = (*(uint64_t (**)(_DWORD *, void, void, uint64_t))(*(void *)v118 + 16))(v118, 0, (*(int *)(v66 + 128) >> 1), 1);
      uint64_t v130 = result;
      int v74 = *(_DWORD *)(v66 + 128);
      int v75 = *v65 - v74;
      if (v75 >= 64) {
        uint64_t v76 = 64;
      }
      else {
        uint64_t v76 = v75;
      }
      uint64_t v126 = ((int)v76 >> 3);
      uint64_t v127 = (((int)v76 + 8) >> 4);
      int v125 = v76;
      int v77 = 0;
      if (v124 >= 1)
      {
        uint64_t v78 = ((int)v76 >> 1);
        do
        {
          int v128 = v77;
          (*(void (**)(uint64_t))(v66 + 48))(a2);
          uint64_t v79 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v66 + 80))(v73 + i, v69, (char *)&STACK[0x5C0] + v79, (char *)&STACK[0x5C0] + i - 528, v76);
            v79 += 8;
          }
          int v81 = *(_DWORD *)(v66 + 128);
          uint64_t v82 = v69;
          if ((int)v126 > (v81 == 0))
          {
            BOOL v83 = v81 == 0;
            uint64_t v84 = v126 - v83;
            uint64_t v85 = &a33 + 2 * v83;
            uint64_t v86 = &STACK[0x600] + v83;
            uint64_t v87 = v73 + v121 * v83;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v66 + 88))(v87, v82, v86, v85, 64);
              v85 += 2;
              ++v86;
              v87 += v121;
              --v84;
            }
            while (v84);
          }
          uint64_t v69 = v82;
          uint64_t v88 = 0;
          do
          {
            uint64_t v89 = v88 + 32;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v66 + 96))(v88 + 32 + v130, v122, (char *)&a49 + v88, v78);
            uint64_t v88 = v89;
          }
          while (v89 != 128);
          int v90 = *(_DWORD *)(v66 + 128);
          uint64_t v72 = vars0;
          if ((int)v127 > (v90 == 0))
          {
            BOOL v91 = v90 == 0;
            uint64_t v92 = v127 - v91;
            long long v93 = &a65 + 4 * v91;
            uint64_t v94 = v130 + vars0 * v91;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v66 + 104))(v94, v122, v93, 32);
              v93 += 4;
              v94 += vars0;
              --v92;
            }
            while (v92);
          }
          v73 += 128;
          v130 += 128;
          int v77 = v128 + 64;
          uint64_t v76 = v125;
        }
        while (v128 + 64 < v124);
        int v74 = *(_DWORD *)(v66 + 128);
      }
      int v95 = v117 - v77;
      if (v117 != v77)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v66 + 48))(a2);
        int v129 = v95;
        uint64_t v96 = v69;
        if (v95 >= 16)
        {
          uint64_t v97 = v76;
          uint64_t v98 = v73 + 16;
          uint64_t v99 = (v129 >> 3) - 1;
          BOOL v100 = &a17;
          uint64_t v101 = &STACK[0x5C0];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v66 + 80))(v98, v96, v101, v100, v97);
            v100 += 16;
            ++v101;
            v98 += 16;
            --v99;
          }
          while (v99);
        }
        int v102 = *(_DWORD *)(v66 + 128);
        uint64_t v69 = v96;
        if ((int)v126 > (v102 == 0))
        {
          BOOL v103 = v102 == 0;
          uint64_t v104 = v126 - v103;
          uint64_t v105 = &a33 + 2 * v103;
          uint64_t v106 = &STACK[0x600] + v103;
          uint64_t v107 = v73 + v121 * v103;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))(v66 + 88))(v107, v96, v106, v105, v129);
            v105 += 2;
            ++v106;
            v107 += v121;
            --v104;
          }
          while (v104);
        }
        if (v129 >= 24)
        {
          uint64_t v108 = v130 + 32;
          uint64_t v109 = ((v129 + 8) >> 4) - 1;
          int v110 = &a49;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v66 + 96))(v108, v122, v110, (v125 >> 1));
            v110 += 4;
            v108 += 32;
            --v109;
          }
          while (v109);
        }
        int v74 = *(_DWORD *)(v66 + 128);
        LODWORD(v76) = v125;
        if ((int)v127 > (v74 == 0))
        {
          BOOL v111 = v74 == 0;
          uint64_t v112 = v127 - v111;
          int v113 = &a65 + 4 * v111;
          uint64_t v114 = v130 + v72 * v111;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v66 + 104))(v114, v122, v113, (v129 >> 1));
            v113 += 4;
            v114 += v72;
            --v112;
          }
          while (v112);
          int v74 = *(_DWORD *)(v66 + 128);
          LODWORD(v76) = v125;
        }
      }
      int v71 = v74 + v76;
      *(_DWORD *)(v66 + 128) = v71;
      uint64_t v65 = v116;
    }
    while (v71 < *v116);
  }
  int v115 = v118[70];
  if (v115 >= v71) {
    int v115 = v71;
  }
  *uint64_t v65 = v115;
  if (*(_DWORD *)(v66 + 128) < v118[70])
  {
    if (v115 <= 4) {
      int v115 = 4;
    }
    *uint64_t v65 = v115 - 4;
  }
  return result;
}

_WORD *sub_1BBA441D4(_WORD *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  if (a5 >= 1)
  {
    int v7 = result;
    int v8 = 0;
    unsigned int v9 = a3;
    int v10 = a4;
    do
    {
      sub_1BBA44264(v7, 2, a2, v9, v10);
      uint64_t result = sub_1BBA44264(v7 + 1, 2, a2, v9, v10);
      v8 += 4;
      v7 += 8;
    }
    while (v8 < a5);
  }
  return result;
}

_WORD *sub_1BBA44264(_WORD *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    int v11 = (unsigned __int16)*result;
    int v6 = (unsigned __int16)result[-a3];
    int v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0) {
      int v8 = v12;
    }
    else {
      int v8 = -v12;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      int v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0) {
        int v13 = -v13;
      }
      uint64_t v14 = &result[3 * a2];
      int v15 = v14[-2 * a3];
      char v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    int v6 = (unsigned __int16)result[-a3];
    int v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = -v7;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    int v11 = (unsigned __int16)*result;
  }
  int v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0) {
    int v13 = -v13;
  }
  uint64_t v14 = &result[3 * a2];
  int v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    int v16 = v14[-a3];
    int v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0) {
      int v17 = -v17;
    }
    int v18 = v14[v9];
    int v19 = *v14;
    goto LABEL_24;
  }
  char v20 = 0;
LABEL_20:
  int v19 = *v14;
  int v16 = v14[-a3];
  int v17 = v19 + v15 - 2 * v16;
  if (v17 < 0) {
    int v17 = -v17;
  }
  int v18 = v14[v9];
  if (v20)
  {
    int v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  int v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0) {
    int v21 = -v21;
  }
  if (v21 + v17 + v13 + v8 < a4)
  {
    if (a4 >> 2 <= 2 * (v13 + v8)) {
      goto LABEL_37;
    }
    int v22 = (unsigned __int16)result[-4 * a3] - v6;
    if (v22 < 0) {
      int v22 = v6 - (unsigned __int16)result[-4 * a3];
    }
    int v23 = (unsigned __int16)result[3 * a3] - v11;
    if (v23 < 0) {
      int v23 = v11 - (unsigned __int16)result[3 * a3];
    }
    if (v22 + v23 >= a4 >> 3)
    {
LABEL_37:
      BOOL v25 = 1;
    }
    else
    {
      int v24 = v6 - v11;
      if (v24 < 0) {
        int v24 = -v24;
      }
      BOOL v25 = v24 >= (5 * a5 + 1) >> 1;
    }
    if (a4 >> 2 <= 2 * (v21 + v17)) {
      goto LABEL_49;
    }
    int v26 = v14[3 * a3];
    int v27 = v14[-4 * a3] - v16;
    if (v27 < 0) {
      int v27 = -v27;
    }
    int v28 = v26 - v19;
    if (v28 < 0) {
      int v28 = -v28;
    }
    if (v27 + v28 >= a4 >> 3) {
      goto LABEL_49;
    }
    int v29 = v16 - v19;
    if (v16 - v19 < 0) {
      int v29 = v19 - v16;
    }
    if (v29 >= (5 * a5 + 1) >> 1) {
      BOOL v25 = 1;
    }
    if (v25)
    {
LABEL_49:
      unsigned int v30 = v17 + v8;
      unsigned int v31 = (a4 + (a4 >> 1)) >> 3;
      int v32 = a5 >> 1;
      int v33 = -(a5 >> 1);
      uint64_t v34 = 4;
      do
      {
        int v35 = (unsigned __int16)result[-2 * a3];
        int v36 = (unsigned __int16)result[-a3];
        int v37 = (unsigned __int16)*result;
        int v38 = (unsigned __int16)result[a3];
        int v39 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        if (v39 >= 0) {
          int v40 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        }
        else {
          int v40 = -v39;
        }
        if (v40 < 10 * a5)
        {
          if (v39 >= a5) {
            int v42 = a5;
          }
          else {
            int v42 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
          }
          if (v39 <= -a5) {
            int v43 = -a5;
          }
          else {
            int v43 = v42;
          }
          int v44 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 >= v32) {
            int v45 = a5 >> 1;
          }
          else {
            int v45 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          }
          if (v44 <= v33) {
            int v46 = -(a5 >> 1);
          }
          else {
            int v46 = v45;
          }
          int v47 = v46 + v35;
          if (v47 >= 1023) {
            int v47 = 1023;
          }
          int v48 = v47 & ~(v47 >> 31);
          if (v30 < v31) {
            LOWORD(v35) = v48;
          }
          int v41 = (unsigned __int16)result[v9];
          int v49 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 >= v32) {
            int v50 = a5 >> 1;
          }
          else {
            int v50 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          }
          if (v49 <= v33) {
            int v51 = -(a5 >> 1);
          }
          else {
            int v51 = v50;
          }
          int v52 = v51 + v38;
          if (v52 >= 1023) {
            int v52 = 1023;
          }
          int v53 = v52 & ~(v52 >> 31);
          if (v21 + v13 < v31) {
            LOWORD(v38) = v53;
          }
          int v54 = v43 + v36;
          if (v54 >= 1023) {
            int v54 = 1023;
          }
          int v55 = v54 & ~(v54 >> 31);
          int v56 = v37 - v43;
          if (v56 >= 1023) {
            int v56 = 1023;
          }
          result[-2 * a3] = v35;
          result[-a3] = v55;
          *uint64_t result = v56 & ~(unsigned __int16)(v56 >> 31);
          result[a3] = v38;
        }
        result += a2;
        --v34;
      }
      while (v34);
    }
    else
    {
      int v57 = 2 * a5;
      uint64_t v58 = 2 * a2;
      uint64_t v59 = 4;
      do
      {
        int v60 = (unsigned __int16)result[-3 * a3];
        int v61 = (unsigned __int16)result[-2 * a3];
        int v62 = (unsigned __int16)result[-a3];
        int v63 = (unsigned __int16)result[a3];
        int v64 = (unsigned __int16)result[v9];
        int v65 = (unsigned __int16)result[3 * a3];
        LOWORD(v66) = v57 + v60;
        int v67 = (unsigned __int16)*result;
        int v68 = v67 + v62;
        int v69 = v61 + 4;
        signed int v70 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        if (v70 < v57 + v60) {
          unsigned int v66 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        }
        if (v70 <= v60 - v57) {
          __int16 v71 = v60 - v57;
        }
        else {
          __int16 v71 = v66;
        }
        result[-3 * a3] = v71;
        signed int v72 = v61 - v57;
        LOWORD(v73) = v57 + v61;
        signed int v74 = (v68 + v61 + v60 + 2) >> 2;
        if (v74 < v57 + v61) {
          unsigned int v73 = (v68 + v61 + v60 + 2) >> 2;
        }
        if (v74 > v72) {
          LOWORD(v72) = v73;
        }
        result[-2 * a3] = v72;
        signed int v75 = v62 - v57;
        signed int v76 = (v60 + 2 * v62 + 2 * v61 + 2 * v67 + v63 + 4) >> 3;
        if (v76 >= v57 + v62) {
          __int16 v77 = v57 + v62;
        }
        else {
          __int16 v77 = v76;
        }
        if (v76 > v75) {
          LOWORD(v75) = v77;
        }
        result[-a3] = v75;
        signed int v78 = v67 - v57;
        LOWORD(v79) = v57 + v67;
        signed int v80 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        if (v80 < v57 + v67) {
          unsigned int v79 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        }
        if (v80 > v78) {
          LOWORD(v78) = v79;
        }
        *uint64_t result = v78;
        signed int v81 = v63 - v57;
        LOWORD(v82) = v57 + v63;
        int v83 = v64 + v63 + v68;
        signed int v84 = (v83 + 2) >> 2;
        if (v84 < v57 + v63) {
          unsigned int v82 = (v83 + 2) >> 2;
        }
        if (v84 > v81) {
          LOWORD(v81) = v82;
        }
        result[a3] = v81;
        signed int v85 = v64 - v57;
        signed int v86 = v57 + v64;
        signed int v87 = (v83 + 2 * v64 + 2 * v65 + 4) >> 3;
        if (v87 >= v86) {
          __int16 v88 = v86;
        }
        else {
          __int16 v88 = v87;
        }
        if (v87 <= v85) {
          __int16 v89 = v85;
        }
        else {
          __int16 v89 = v88;
        }
        result[v9] = v89;
        uint64_t result = (_WORD *)((char *)result + v58);
        --v59;
      }
      while (v59);
    }
  }
  return result;
}

_WORD *sub_1BBA44750(_WORD *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  if (a5 >= 1)
  {
    int v7 = result;
    int v8 = 0;
    uint64_t v9 = 8 * a2;
    unsigned int v10 = a3;
    int v11 = a4;
    do
    {
      sub_1BBA44264(v7, a2, 2, v10, v11);
      uint64_t result = sub_1BBA44264(v7 + 1, a2, 2, v10, v11);
      v8 += 4;
      int v7 = (_WORD *)((char *)v7 + v9);
    }
    while (v8 < a5);
  }
  return result;
}

unint64_t sub_1BBA447EC(unint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = -1 * a2;
    int v6 = (_WORD *)(result + 2);
    uint64_t v7 = a4;
    uint64_t v8 = a2;
    uint64_t v9 = -2 * a2;
    do
    {
      int v10 = *(unsigned __int8 *)(a3 + (v4 & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (v4 & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        int v11 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        uint64_t result = (unint64_t)&v6[v5];
        int v12 = (unsigned __int16)v6[v5 - 1];
        int v13 = (unsigned __int16)*(v6 - 1);
        int v14 = ((unsigned __int16)v6[v9 - 1] - (unsigned __int16)v6[v8 - 1] + 4 * (v13 - v12) + 4) >> 3;
        if (v14 >= v11) {
          int v15 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        }
        else {
          int v15 = ((unsigned __int16)v6[v9 - 1] - (unsigned __int16)v6[v8 - 1] + 4 * (v13 - v12) + 4) >> 3;
        }
        if (v14 <= -v11) {
          int v16 = -v11;
        }
        else {
          int v16 = v15;
        }
        int v17 = v16 + v12;
        if (v16 + v12 >= 1023) {
          int v17 = 1023;
        }
        *(_WORD *)(result - 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        int v18 = v13 - v16;
        if (v18 >= 1023) {
          int v18 = 1023;
        }
        *(v6 - 1) = v18 & ~(unsigned __int16)(v18 >> 31);
      }
      if ((v10 & 0x80) == 0)
      {
        int v19 = (unsigned __int16)v6[v5];
        uint64_t result = (unsigned __int16)*v6;
        int v20 = ((unsigned __int16)v6[v9] - (unsigned __int16)v6[v8] + 4 * ((int)result - v19) + 4) >> 3;
        if (v20 >= v10) {
          int v21 = v10;
        }
        else {
          int v21 = ((unsigned __int16)v6[v9] - (unsigned __int16)v6[v8] + 4 * ((int)result - v19) + 4) >> 3;
        }
        if (v20 <= -v10) {
          int v22 = -v10;
        }
        else {
          int v22 = v21;
        }
        int v23 = v22 + v19;
        if (v22 + v19 >= 1023) {
          int v23 = 1023;
        }
        v6[v5] = v23 & ~(unsigned __int16)(v23 >> 31);
        int v24 = result - v22;
        if (v24 >= 1023) {
          int v24 = 1023;
        }
        *int v6 = v24 & ~(unsigned __int16)(v24 >> 31);
      }
      ++v4;
      v6 += 2;
    }
    while (v7 != v4);
  }
  return result;
}

unsigned __int16 *sub_1BBA44910(unsigned __int16 *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      int v5 = *(unsigned __int8 *)(a3 + (i & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (i & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        int v6 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        int v7 = *(result - 2);
        int v8 = *result;
        int v9 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        if (v9 >= v6) {
          int v10 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        }
        else {
          int v10 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        }
        if (v9 <= -v6) {
          int v11 = -v6;
        }
        else {
          int v11 = v10;
        }
        int v12 = v11 + v7;
        if (v11 + v7 >= 1023) {
          int v12 = 1023;
        }
        *(result - 2) = v12 & ~(unsigned __int16)(v12 >> 31);
        int v13 = v8 - v11;
        if (v13 >= 1023) {
          int v13 = 1023;
        }
        *uint64_t result = v13 & ~(unsigned __int16)(v13 >> 31);
      }
      if ((v5 & 0x80) == 0)
      {
        int v14 = *(result - 1);
        int v15 = result[1];
        int v16 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        if (v16 >= v5) {
          int v17 = v5;
        }
        else {
          int v17 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        }
        if (v16 <= -v5) {
          int v18 = -v5;
        }
        else {
          int v18 = v17;
        }
        int v19 = v18 + v14;
        if (v18 + v14 >= 1023) {
          int v19 = 1023;
        }
        *(result - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
        int v20 = v15 - v18;
        if (v20 >= 1023) {
          int v20 = 1023;
        }
        result[1] = v20 & ~(unsigned __int16)(v20 >> 31);
      }
      result += a2;
    }
  }
  return result;
}

_WORD *sub_1BBA44A1C(_WORD *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  if (a5 >= 1)
  {
    int v9 = result;
    for (int i = 0; i < a5; i += 4)
    {
      int v11 = *a4++;
      uint64_t result = sub_1BBA44264(v9, 1, a2, *(unsigned __int8 *)(a3 + (i >> 3)), v11);
      v9 += 4;
    }
  }
  return result;
}

_WORD *sub_1BBA44A98(_WORD *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  if (a5 >= 1)
  {
    int v9 = result;
    int v10 = 0;
    uint64_t v11 = 8 * a2;
    do
    {
      int v12 = *a4++;
      uint64_t result = sub_1BBA44264(v9, a2, 1, *(unsigned __int8 *)(a3 + (v10 >> 3)), v12);
      v10 += 4;
      int v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

uint64_t sub_1BBA44B20(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33 = result;
  uint64_t v34 = *(void *)(a2 + 1360);
  int v35 = *(_DWORD *)(v34 + 276);
  int v36 = *(_DWORD *)(v34 + 280);
  uint64_t v78 = v34;
  uint64_t v37 = *(void *)(v34 + 112);
  uint64_t v38 = *(void *)(a2 + 1368);
  int v39 = *(unsigned __int8 *)(v38 + 2013);
  char v40 = *(unsigned char *)(v38 + 2009);
  int v41 = a3 << v40;
  int v42 = a4 << v40;
  int v43 = (a4 << v40) - 16;
  if (*(_DWORD *)(v38 + 2016) - 1 == a3)
  {
    BOOL v44 = v42 < 16;
    if (v42 >= 16) {
      int v45 = v43;
    }
    else {
      int v45 = 0;
    }
    if (!v44) {
      int v43 = 0;
    }
    int v46 = v43 + v39;
    if (v41 <= 63) {
      unsigned int v47 = 0;
    }
    else {
      unsigned int v47 = (v41 - 1) & 0xFFFFFFC0;
    }
    unsigned int v77 = v47;
    int v48 = v35 - v47;
    *(_DWORD *)(result + 128) = v45 + v46 - 8;
    int v70 = v45;
    if (*(_DWORD *)(v38 + 2020) - 1 == a4)
    {
      int v46 = v36 - v45;
      *(_DWORD *)(result + 128) = v36;
    }
  }
  else
  {
    if (!a3 || (v41 & 0x3F) != 0) {
      return result;
    }
    BOOL v49 = v42 < 16;
    if (v42 >= 16) {
      int v50 = v43;
    }
    else {
      int v50 = 0;
    }
    if (!v49) {
      int v43 = 0;
    }
    int v51 = v43 + v39;
    if (v41 >= 64) {
      int v52 = v41 - 64;
    }
    else {
      int v52 = 0;
    }
    unsigned int v77 = v52;
    if (v41 >= 64) {
      int v48 = 64;
    }
    else {
      int v48 = v41;
    }
    int v70 = v50;
    int v53 = v36 - v50;
    if (*(_DWORD *)(v38 + 2020) - 1 == a4) {
      int v46 = v53;
    }
    else {
      int v46 = v51;
    }
  }
  if (v46 >= 1)
  {
    int v54 = 0;
    uint64_t v55 = 16 * v37;
    int v75 = v48;
    int v76 = v35;
    int v71 = v46;
    do
    {
      int v72 = v54;
      if (v46 - v54 >= 64) {
        uint64_t v56 = 64;
      }
      else {
        uint64_t v56 = (v46 - v54);
      }
      if (v48 >= 1)
      {
        int v57 = 0;
        unsigned int v81 = v54 + v70;
        BOOL v58 = v54 + v70 == 0;
        uint64_t v80 = ((int)v56 >> 3);
        uint64_t vars8 = v80 - v58;
        uint64_t v73 = v55 * v58;
        do
        {
          if (v48 - v57 >= 64) {
            uint64_t v59 = 64;
          }
          else {
            uint64_t v59 = (v48 - v57);
          }
          uint64_t v60 = v57 + v77;
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))(v33 + 48))(a2, v60, v81, v59, v56, &a17);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v78 + 16))(v78, v60, v81, 0);
          uint64_t v82 = result;
          LODWORD(v61) = (int)v59 >> 3;
          if ((int)v59 + (int)v60 >= v35) {
            uint64_t v61 = v61;
          }
          else {
            uint64_t v61 = (v61 + 1);
          }
          if ((int)v61 >= 2)
          {
            uint64_t v62 = v61 - 1;
            uint64_t v63 = result + 16;
            int v64 = &a17;
            int v65 = &STACK[0x5C0];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v33 + 80))(v63, v37, v65, v64, v56);
              v64 += 16;
              ++v65;
              v63 += 16;
              --v62;
            }
            while (v62);
          }
          if ((int)v80 > (v72 + v70 == 0))
          {
            unsigned int v66 = &STACK[0x600] + (v72 + v70 == 0);
            uint64_t v67 = v82 + v73;
            int v68 = &a33 + 2 * (v72 + v70 == 0);
            uint64_t v69 = vars8;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v33 + 88))(v67, v37, v66, v68, v59);
              v68 += 2;
              ++v66;
              v67 += v55;
              --v69;
            }
            while (v69);
          }
          v57 += 64;
          int v48 = v75;
          int v35 = v76;
        }
        while (v57 < v75);
      }
      int v46 = v71;
      int v54 = v72 + 64;
    }
    while (v72 + 64 < v71);
  }
  return result;
}

uint64_t sub_1BBA44E14(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = *(void *)(a2 + 1360);
  int v6 = *(_DWORD *)(v5 + 276);
  int v7 = *(_DWORD *)(v5 + 280);
  uint64_t v8 = *(void *)(a2 + 1368);
  unsigned int v9 = *(unsigned __int8 *)(v8 + 2013);
  LOBYTE(v8) = *(unsigned char *)(v8 + 2009);
  uint64_t v10 = (a3 << v8);
  uint64_t v11 = (a4 << v8);
  if ((int)(v10 + v9) >= v6) {
    uint64_t v12 = (v6 - v10);
  }
  else {
    uint64_t v12 = v9;
  }
  if ((int)(v11 + v9) >= v7) {
    uint64_t v13 = (v7 - v11);
  }
  else {
    uint64_t v13 = v9;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 72))(a2, v10, v11, v12, v13, v29);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, v10, v11, 0);
  uint64_t v28 = result;
  uint64_t v15 = *(void *)(v5 + 112);
  uint64_t v16 = ((int)v12 >> 3);
  if ((int)v16 > (v10 == 0))
  {
    uint64_t v17 = v16 - (v10 == 0);
    int v18 = &v29[10 * (v10 == 0)];
    int v19 = &v29[5 * (v10 == 0) + 296];
    uint64_t v20 = result - 16 * v15 + 16 * (v10 == 0);
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 80))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 16;
      --v17;
    }
    while (v17);
  }
  uint64_t v21 = ((int)v13 >> 3);
  if ((int)v21 > (v11 == 0))
  {
    BOOL v22 = v11 == 0;
    uint64_t v23 = (v12 + 8);
    uint64_t v24 = v21 - v22;
    BOOL v25 = &v29[10 * v22 + 80];
    int v26 = &v29[5 * v22 + 336];
    uint64_t v27 = v28 + 16 * v15 * v22 - 16;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 88))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 16 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1BBA44FF4(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int v29 = a3;
  uint64_t v30 = a2;
  uint64_t v31 = result;
  uint64_t v32 = *(void *)(a2 + 1360);
  int v73 = *(_DWORD *)(v32 + 276);
  uint64_t v33 = *(void *)(v32 + 112);
  int v34 = *a3;
  signed int v74 = (_DWORD *)v32;
  if (*a3 < *(_DWORD *)(v32 + 280))
  {
    v34 &= 0xFFFFFFF0;
    *a3 = v34;
  }
  int v35 = *(_DWORD *)(result + 128);
  if (v35 < v34)
  {
    signed int v78 = (v73 - 1) & 0xFFFFFFC0;
    uint64_t vars0 = (_OWORD *)(a2 + 4392);
    uint64_t v36 = 16 * v33;
    int v72 = v29;
    do
    {
      uint64_t v37 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v74 + 16))(v74, 0);
      uint64_t result = (*(uint64_t (**)(_DWORD *, void, void, uint64_t))(*(void *)v74 + 16))(v74, 0, (*(int *)(v31 + 128) >> 1), 1);
      uint64_t v38 = *(unsigned int *)(v31 + 128);
      int v39 = *v29 - v38;
      if (v39 >= 64) {
        uint64_t v40 = 64;
      }
      else {
        uint64_t v40 = v39;
      }
      if (v38) {
        uint64_t v41 = (v38 - 8);
      }
      else {
        uint64_t v41 = 0;
      }
      if (v38) {
        uint64_t v42 = (v40 + 8);
      }
      else {
        uint64_t v42 = v40;
      }
      uint64_t v80 = ((int)v40 >> 3);
      uint64_t v81 = v42;
      unsigned int v79 = v41;
      uint64_t v43 = 0;
      if (v78 >= 1)
      {
        do
        {
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))(v31 + 48))(v30, v43, *(unsigned int *)(v31 + 128), 64, v40, &a13);
          int v82 = v43;
          BOOL v44 = (_OWORD *)(*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v30 + 1360) + 16))(*(void *)(v30 + 1360), v43, v41, 0);
          if ((int)v42 >= 1)
          {
            uint64_t v45 = 2 * *(void *)(*(void *)(v30 + 1360) + 112);
            int v46 = vars0;
            do
            {
              *int v46 = *v44;
              long long v47 = v44[1];
              long long v48 = v44[2];
              long long v49 = v44[4];
              v46[3] = v44[3];
              v46[4] = v49;
              v46[1] = v47;
              v46[2] = v48;
              long long v50 = v44[5];
              long long v51 = v44[6];
              long long v52 = v44[8];
              v46[7] = v44[7];
              v46[8] = v52;
              v46[5] = v50;
              v46[6] = v51;
              BOOL v44 = (_OWORD *)((char *)v44 + v45);
              v46 += 9;
              --v42;
            }
            while (v42);
          }
          uint64_t v53 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v31 + 80))(v37 + i, v33, (char *)&STACK[0x580] + v53, (char *)&STACK[0x580] + i - 528, v40);
            v53 += 8;
          }
          sub_1BBA19044(v30, v82, v41, 72, v81, 0);
          int v55 = *(_DWORD *)(v31 + 128);
          if ((int)v80 > (v55 == 0))
          {
            BOOL v56 = v55 == 0;
            uint64_t v57 = v80 - v56;
            BOOL v58 = &a29 + 2 * v56;
            uint64_t v59 = &STACK[0x5C0] + v56;
            uint64_t v60 = v37 + v36 * v56;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v31 + 88))(v60, v33, v59, v58, 64);
              v58 += 2;
              ++v59;
              v60 += v36;
              --v57;
            }
            while (v57);
          }
          uint64_t v30 = a2;
          uint64_t v41 = v79;
          uint64_t v42 = v81;
          uint64_t result = sub_1BBA19044(a2, v82, v79, 72, v81, 0);
          v37 += 128;
          uint64_t v43 = (v82 + 64);
        }
        while ((int)v43 < v78);
        uint64_t v38 = *(unsigned int *)(v31 + 128);
      }
      if (v73 != v43)
      {
        unsigned int v75 = v73 - v43;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, v43, v38);
        int v83 = v43;
        sub_1BBA18E28(v30, v43, v41, v73 - v43, v42, 0);
        if (v73 - (int)v43 >= 16)
        {
          uint64_t v61 = v37 + 16;
          uint64_t v62 = (v75 >> 3) - 1;
          uint64_t v63 = &a13;
          int v64 = &STACK[0x580];
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v31 + 80))(v61, v33, v64, v63, v40);
            v63 += 16;
            ++v64;
            v61 += 16;
            --v62;
          }
          while (v62);
        }
        sub_1BBA19044(a2, v83, v79, v75, v81, 0);
        int v65 = *(_DWORD *)(v31 + 128);
        if ((int)v80 > (v65 == 0))
        {
          BOOL v66 = v65 == 0;
          uint64_t v67 = v80 - v66;
          int v68 = &a29 + 2 * v66;
          uint64_t v69 = &STACK[0x5C0] + v66;
          uint64_t v70 = v37 + v36 * v66;
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))(v31 + 88))(v70, v33, v69, v68, v75);
            v68 += 2;
            ++v69;
            v70 += v36;
            --v67;
          }
          while (v67);
        }
        uint64_t v30 = a2;
        uint64_t result = sub_1BBA19044(a2, v83, v79, v75, v81, 0);
        LODWORD(v38) = *(_DWORD *)(v31 + 128);
      }
      int v35 = v38 + v40;
      *(_DWORD *)(v31 + 128) = v35;
      int v29 = v72;
    }
    while (v35 < *v72);
  }
  int v71 = v74[70];
  if (v71 >= v35) {
    int v71 = v35;
  }
  *int v29 = v71;
  if (*(_DWORD *)(v31 + 128) < v74[70])
  {
    if (v71 <= 4) {
      int v71 = 4;
    }
    *int v29 = v71 - 4;
  }
  return result;
}

uint64_t sub_1BBA454B0(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  BOOL v25 = a3;
  uint64_t v26 = result;
  uint64_t v27 = *(void *)(a2 + 1360);
  int v57 = *(_DWORD *)(v27 + 276);
  uint64_t v28 = *(void *)(v27 + 112);
  int v29 = *a3;
  BOOL v58 = (_DWORD *)v27;
  if (*a3 < *(_DWORD *)(v27 + 280))
  {
    v29 &= 0xFFFFFFF0;
    *a3 = v29;
  }
  int v30 = *(_DWORD *)(result + 128);
  if (v30 < v29)
  {
    signed int v61 = (v57 - 1) & 0xFFFFFFC0;
    uint64_t v59 = 16 * v28;
    BOOL v56 = v25;
    do
    {
      uint64_t v31 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v58 + 16))(v58, 0);
      uint64_t result = (*(uint64_t (**)(_DWORD *, void, void, uint64_t))(*(void *)v58 + 16))(v58, 0, (*(int *)(v26 + 128) >> 1), 1);
      int v32 = *(_DWORD *)(v26 + 128);
      int v33 = *v25 - v32;
      if (v33 >= 64) {
        uint64_t v34 = 64;
      }
      else {
        uint64_t v34 = v33;
      }
      int v35 = (int)v34 >> 3;
      uint64_t vars0 = ((int)v34 >> 3);
      int v36 = 0;
      if (v61 >= 1)
      {
        do
        {
          int vars8_4 = v36;
          (*(void (**)(uint64_t))(v26 + 48))(a2);
          uint64_t v37 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v26 + 80))(v31 + i, v28, (char *)&STACK[0x540] + v37, (char *)&STACK[0x540] + i - 528, v34);
            v37 += 8;
          }
          unsigned int v39 = *(_DWORD *)(v26 + 128);
          if (__SPAIR64__(v35, v39) >= 1 && v35 != (v39 == 0))
          {
            BOOL v40 = v39 == 0;
            uint64_t v41 = vars0 - v40;
            uint64_t v42 = &a25 + 2 * v40;
            uint64_t v43 = &STACK[0x580] + v40;
            uint64_t v44 = v31 + v59 * v40;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 88))(v44, v28, v43, v42, 64);
              v42 += 2;
              ++v43;
              v44 += v59;
              --v41;
            }
            while (v41);
          }
          v31 += 128;
          int v36 = vars8_4 + 64;
          int v35 = (int)v34 >> 3;
        }
        while (vars8_4 + 64 < v61);
        int v32 = *(_DWORD *)(v26 + 128);
      }
      uint64_t v45 = (v57 - v36);
      if (v57 != v36)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v26 + 48))(a2);
        if ((int)v45 >= 16)
        {
          uint64_t v46 = v31 + 16;
          uint64_t v47 = (v45 >> 3) - 1;
          long long v48 = &a9;
          long long v49 = &STACK[0x540];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v26 + 80))(v46, v28, v49, v48, v34);
            v48 += 16;
            ++v49;
            v46 += 16;
            --v47;
          }
          while (v47);
        }
        int v32 = *(_DWORD *)(v26 + 128);
        if ((int)vars0 > (v32 == 0))
        {
          BOOL v50 = v32 == 0;
          uint64_t v51 = vars0 - v50;
          long long v52 = &a25 + 2 * v50;
          uint64_t v53 = &STACK[0x580] + v50;
          uint64_t v54 = v31 + v59 * v50;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 88))(v54, v28, v53, v52, v45);
            v52 += 2;
            ++v53;
            v54 += v59;
            --v51;
          }
          while (v51);
          int v32 = *(_DWORD *)(v26 + 128);
        }
      }
      int v30 = v32 + v34;
      *(_DWORD *)(v26 + 128) = v30;
      BOOL v25 = v56;
    }
    while (v30 < *v56);
  }
  int v55 = v58[70];
  if (v55 >= v30) {
    int v55 = v30;
  }
  *BOOL v25 = v55;
  if (*(_DWORD *)(v26 + 128) < v58[70])
  {
    if (v55 <= 4) {
      int v55 = 4;
    }
    *BOOL v25 = v55 - 4;
  }
  return result;
}

_WORD *sub_1BBA45824(_WORD *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  if (a5 >= 1)
  {
    int v7 = result;
    int v8 = 0;
    unsigned int v9 = a3;
    int v10 = a4;
    do
    {
      sub_1BBA458B4(v7, 2, a2, v9, v10);
      uint64_t result = sub_1BBA458B4(v7 + 1, 2, a2, v9, v10);
      v8 += 4;
      v7 += 8;
    }
    while (v8 < a5);
  }
  return result;
}

_WORD *sub_1BBA458B4(_WORD *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    int v11 = (unsigned __int16)*result;
    int v6 = (unsigned __int16)result[-a3];
    int v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0) {
      int v8 = v12;
    }
    else {
      int v8 = -v12;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      int v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0) {
        int v13 = -v13;
      }
      int v14 = &result[3 * a2];
      int v15 = v14[-2 * a3];
      char v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    int v6 = (unsigned __int16)result[-a3];
    int v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = -v7;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    int v11 = (unsigned __int16)*result;
  }
  int v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0) {
    int v13 = -v13;
  }
  int v14 = &result[3 * a2];
  int v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    int v16 = v14[-a3];
    int v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0) {
      int v17 = -v17;
    }
    int v18 = v14[v9];
    int v19 = *v14;
    goto LABEL_24;
  }
  char v20 = 0;
LABEL_20:
  int v19 = *v14;
  int v16 = v14[-a3];
  int v17 = v19 + v15 - 2 * v16;
  if (v17 < 0) {
    int v17 = -v17;
  }
  int v18 = v14[v9];
  if (v20)
  {
    int v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  int v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0) {
    int v21 = -v21;
  }
  if (v21 + v17 + v13 + v8 < a4)
  {
    if (a4 >> 2 <= 2 * (v13 + v8)) {
      goto LABEL_37;
    }
    int v22 = (unsigned __int16)result[-4 * a3] - v6;
    if (v22 < 0) {
      int v22 = v6 - (unsigned __int16)result[-4 * a3];
    }
    int v23 = (unsigned __int16)result[3 * a3] - v11;
    if (v23 < 0) {
      int v23 = v11 - (unsigned __int16)result[3 * a3];
    }
    if (v22 + v23 >= a4 >> 3)
    {
LABEL_37:
      BOOL v25 = 1;
    }
    else
    {
      int v24 = v6 - v11;
      if (v24 < 0) {
        int v24 = -v24;
      }
      BOOL v25 = v24 >= (5 * a5 + 1) >> 1;
    }
    if (a4 >> 2 <= 2 * (v21 + v17)) {
      goto LABEL_49;
    }
    int v26 = v14[3 * a3];
    int v27 = v14[-4 * a3] - v16;
    if (v27 < 0) {
      int v27 = -v27;
    }
    int v28 = v26 - v19;
    if (v28 < 0) {
      int v28 = -v28;
    }
    if (v27 + v28 >= a4 >> 3) {
      goto LABEL_49;
    }
    int v29 = v16 - v19;
    if (v16 - v19 < 0) {
      int v29 = v19 - v16;
    }
    if (v29 >= (5 * a5 + 1) >> 1) {
      BOOL v25 = 1;
    }
    if (v25)
    {
LABEL_49:
      unsigned int v30 = v17 + v8;
      unsigned int v31 = (a4 + (a4 >> 1)) >> 3;
      int v32 = a5 >> 1;
      int v33 = -(a5 >> 1);
      uint64_t v34 = 4;
      do
      {
        int v35 = (unsigned __int16)result[-2 * a3];
        int v36 = (unsigned __int16)result[-a3];
        int v37 = (unsigned __int16)*result;
        int v38 = (unsigned __int16)result[a3];
        int v39 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        if (v39 >= 0) {
          int v40 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        }
        else {
          int v40 = -v39;
        }
        if (v40 < 10 * a5)
        {
          if (v39 >= a5) {
            int v42 = a5;
          }
          else {
            int v42 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
          }
          if (v39 <= -a5) {
            int v43 = -a5;
          }
          else {
            int v43 = v42;
          }
          int v44 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 >= v32) {
            int v45 = a5 >> 1;
          }
          else {
            int v45 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          }
          if (v44 <= v33) {
            int v46 = -(a5 >> 1);
          }
          else {
            int v46 = v45;
          }
          int v47 = v46 + v35;
          if (v47 >= 511) {
            int v47 = 511;
          }
          int v48 = v47 & ~(v47 >> 31);
          if (v30 < v31) {
            LOWORD(v35) = v48;
          }
          int v41 = (unsigned __int16)result[v9];
          int v49 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 >= v32) {
            int v50 = a5 >> 1;
          }
          else {
            int v50 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          }
          if (v49 <= v33) {
            int v51 = -(a5 >> 1);
          }
          else {
            int v51 = v50;
          }
          int v52 = v51 + v38;
          if (v52 >= 511) {
            int v52 = 511;
          }
          int v53 = v52 & ~(v52 >> 31);
          if (v21 + v13 < v31) {
            LOWORD(v38) = v53;
          }
          int v54 = v43 + v36;
          if (v54 >= 511) {
            int v54 = 511;
          }
          int v55 = v54 & ~(v54 >> 31);
          int v56 = v37 - v43;
          if (v56 >= 511) {
            int v56 = 511;
          }
          result[-2 * a3] = v35;
          result[-a3] = v55;
          *uint64_t result = v56 & ~(unsigned __int16)(v56 >> 31);
          result[a3] = v38;
        }
        result += a2;
        --v34;
      }
      while (v34);
    }
    else
    {
      int v57 = 2 * a5;
      uint64_t v58 = 2 * a2;
      uint64_t v59 = 4;
      do
      {
        int v60 = (unsigned __int16)result[-3 * a3];
        int v61 = (unsigned __int16)result[-2 * a3];
        int v62 = (unsigned __int16)result[-a3];
        int v63 = (unsigned __int16)result[a3];
        int v64 = (unsigned __int16)result[v9];
        int v65 = (unsigned __int16)result[3 * a3];
        LOWORD(v66) = v57 + v60;
        int v67 = (unsigned __int16)*result;
        int v68 = v67 + v62;
        int v69 = v61 + 4;
        signed int v70 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        if (v70 < v57 + v60) {
          unsigned int v66 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        }
        if (v70 <= v60 - v57) {
          __int16 v71 = v60 - v57;
        }
        else {
          __int16 v71 = v66;
        }
        result[-3 * a3] = v71;
        signed int v72 = v61 - v57;
        LOWORD(v73) = v57 + v61;
        signed int v74 = (v68 + v61 + v60 + 2) >> 2;
        if (v74 < v57 + v61) {
          unsigned int v73 = (v68 + v61 + v60 + 2) >> 2;
        }
        if (v74 > v72) {
          LOWORD(v72) = v73;
        }
        result[-2 * a3] = v72;
        signed int v75 = v62 - v57;
        signed int v76 = (v60 + 2 * v62 + 2 * v61 + 2 * v67 + v63 + 4) >> 3;
        if (v76 >= v57 + v62) {
          __int16 v77 = v57 + v62;
        }
        else {
          __int16 v77 = v76;
        }
        if (v76 > v75) {
          LOWORD(v75) = v77;
        }
        result[-a3] = v75;
        signed int v78 = v67 - v57;
        LOWORD(v79) = v57 + v67;
        signed int v80 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        if (v80 < v57 + v67) {
          unsigned int v79 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        }
        if (v80 > v78) {
          LOWORD(v78) = v79;
        }
        *uint64_t result = v78;
        signed int v81 = v63 - v57;
        LOWORD(v82) = v57 + v63;
        int v83 = v64 + v63 + v68;
        signed int v84 = (v83 + 2) >> 2;
        if (v84 < v57 + v63) {
          unsigned int v82 = (v83 + 2) >> 2;
        }
        if (v84 > v81) {
          LOWORD(v81) = v82;
        }
        result[a3] = v81;
        signed int v85 = v64 - v57;
        signed int v86 = v57 + v64;
        signed int v87 = (v83 + 2 * v64 + 2 * v65 + 4) >> 3;
        if (v87 >= v86) {
          __int16 v88 = v86;
        }
        else {
          __int16 v88 = v87;
        }
        if (v87 <= v85) {
          __int16 v89 = v85;
        }
        else {
          __int16 v89 = v88;
        }
        result[v9] = v89;
        uint64_t result = (_WORD *)((char *)result + v58);
        --v59;
      }
      while (v59);
    }
  }
  return result;
}

_WORD *sub_1BBA45DA0(_WORD *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  if (a5 >= 1)
  {
    int v7 = result;
    int v8 = 0;
    uint64_t v9 = 8 * a2;
    unsigned int v10 = a3;
    int v11 = a4;
    do
    {
      sub_1BBA458B4(v7, a2, 2, v10, v11);
      uint64_t result = sub_1BBA458B4(v7 + 1, a2, 2, v10, v11);
      v8 += 4;
      int v7 = (_WORD *)((char *)v7 + v9);
    }
    while (v8 < a5);
  }
  return result;
}

unint64_t sub_1BBA45E3C(unint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = -1 * a2;
    int v6 = (_WORD *)(result + 2);
    uint64_t v7 = a4;
    uint64_t v8 = a2;
    uint64_t v9 = -2 * a2;
    do
    {
      int v10 = *(unsigned __int8 *)(a3 + (v4 & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (v4 & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        int v11 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        uint64_t result = (unint64_t)&v6[v5];
        int v12 = (unsigned __int16)v6[v5 - 1];
        int v13 = (unsigned __int16)*(v6 - 1);
        int v14 = ((unsigned __int16)v6[v9 - 1] - (unsigned __int16)v6[v8 - 1] + 4 * (v13 - v12) + 4) >> 3;
        if (v14 >= v11) {
          int v15 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        }
        else {
          int v15 = ((unsigned __int16)v6[v9 - 1] - (unsigned __int16)v6[v8 - 1] + 4 * (v13 - v12) + 4) >> 3;
        }
        if (v14 <= -v11) {
          int v16 = -v11;
        }
        else {
          int v16 = v15;
        }
        int v17 = v16 + v12;
        if (v16 + v12 >= 511) {
          int v17 = 511;
        }
        *(_WORD *)(result - 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        int v18 = v13 - v16;
        if (v18 >= 511) {
          int v18 = 511;
        }
        *(v6 - 1) = v18 & ~(unsigned __int16)(v18 >> 31);
      }
      if ((v10 & 0x80) == 0)
      {
        int v19 = (unsigned __int16)v6[v5];
        uint64_t result = (unsigned __int16)*v6;
        int v20 = ((unsigned __int16)v6[v9] - (unsigned __int16)v6[v8] + 4 * ((int)result - v19) + 4) >> 3;
        if (v20 >= v10) {
          int v21 = v10;
        }
        else {
          int v21 = ((unsigned __int16)v6[v9] - (unsigned __int16)v6[v8] + 4 * ((int)result - v19) + 4) >> 3;
        }
        if (v20 <= -v10) {
          int v22 = -v10;
        }
        else {
          int v22 = v21;
        }
        int v23 = v22 + v19;
        if (v22 + v19 >= 511) {
          int v23 = 511;
        }
        v6[v5] = v23 & ~(unsigned __int16)(v23 >> 31);
        int v24 = result - v22;
        if (v24 >= 511) {
          int v24 = 511;
        }
        *int v6 = v24 & ~(unsigned __int16)(v24 >> 31);
      }
      ++v4;
      v6 += 2;
    }
    while (v7 != v4);
  }
  return result;
}

unsigned __int16 *sub_1BBA45F60(unsigned __int16 *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      int v5 = *(unsigned __int8 *)(a3 + (i & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (i & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        int v6 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        int v7 = *(result - 2);
        int v8 = *result;
        int v9 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        if (v9 >= v6) {
          int v10 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        }
        else {
          int v10 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        }
        if (v9 <= -v6) {
          int v11 = -v6;
        }
        else {
          int v11 = v10;
        }
        int v12 = v11 + v7;
        if (v11 + v7 >= 511) {
          int v12 = 511;
        }
        *(result - 2) = v12 & ~(unsigned __int16)(v12 >> 31);
        int v13 = v8 - v11;
        if (v13 >= 511) {
          int v13 = 511;
        }
        *uint64_t result = v13 & ~(unsigned __int16)(v13 >> 31);
      }
      if ((v5 & 0x80) == 0)
      {
        int v14 = *(result - 1);
        int v15 = result[1];
        int v16 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        if (v16 >= v5) {
          int v17 = v5;
        }
        else {
          int v17 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        }
        if (v16 <= -v5) {
          int v18 = -v5;
        }
        else {
          int v18 = v17;
        }
        int v19 = v18 + v14;
        if (v18 + v14 >= 511) {
          int v19 = 511;
        }
        *(result - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
        int v20 = v15 - v18;
        if (v20 >= 511) {
          int v20 = 511;
        }
        result[1] = v20 & ~(unsigned __int16)(v20 >> 31);
      }
      result += a2;
    }
  }
  return result;
}

_WORD *sub_1BBA4606C(_WORD *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  if (a5 >= 1)
  {
    int v9 = result;
    for (int i = 0; i < a5; i += 4)
    {
      int v11 = *a4++;
      uint64_t result = sub_1BBA458B4(v9, 1, a2, *(unsigned __int8 *)(a3 + (i >> 3)), v11);
      v9 += 4;
    }
  }
  return result;
}

_WORD *sub_1BBA460E8(_WORD *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  if (a5 >= 1)
  {
    int v9 = result;
    int v10 = 0;
    uint64_t v11 = 8 * a2;
    do
    {
      int v12 = *a4++;
      uint64_t result = sub_1BBA458B4(v9, a2, 1, *(unsigned __int8 *)(a3 + (v10 >> 3)), v12);
      v10 += 4;
      int v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

uint64_t sub_1BBA46170(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61 = result;
  uint64_t v62 = *(void *)(a2 + 1360);
  int v63 = *(_DWORD *)(v62 + 276);
  int v64 = *(_DWORD *)(v62 + 280);
  uint64_t v65 = *(void *)(v62 + 112);
  uint64_t v66 = *(void *)(v62 + 120);
  uint64_t v129 = v62;
  uint64_t v67 = *(void *)(a2 + 1368);
  int v68 = *(unsigned __int8 *)(v67 + 2013);
  char v69 = *(unsigned char *)(v67 + 2009);
  int v70 = a3 << v69;
  int v71 = a4 << v69;
  int v72 = (a4 << v69) - 16;
  if (*(_DWORD *)(v67 + 2016) - 1 == a3)
  {
    BOOL v73 = v71 < 16;
    if (v71 >= 16) {
      int v74 = v72;
    }
    else {
      int v74 = 0;
    }
    if (!v73) {
      int v72 = 0;
    }
    int v75 = v72 + v68;
    if (v70 <= 63) {
      unsigned int v76 = 0;
    }
    else {
      unsigned int v76 = (v70 - 1) & 0xFFFFFFC0;
    }
    unsigned int v119 = v76;
    int v77 = v63 - v76;
    *(_DWORD *)(result + 128) = v74 + v75 - 8;
    int v108 = v74;
    if (*(_DWORD *)(v67 + 2020) - 1 == a4)
    {
      int v75 = v64 - v74;
      *(_DWORD *)(result + 128) = v64;
    }
  }
  else
  {
    if (!a3 || (v70 & 0x3F) != 0) {
      return result;
    }
    BOOL v78 = v71 < 16;
    if (v71 >= 16) {
      int v79 = v72;
    }
    else {
      int v79 = 0;
    }
    if (!v78) {
      int v72 = 0;
    }
    int v80 = v72 + v68;
    if (v70 >= 64) {
      int v81 = v70 - 64;
    }
    else {
      int v81 = 0;
    }
    unsigned int v119 = v81;
    if (v70 >= 64) {
      int v77 = 64;
    }
    else {
      int v77 = v70;
    }
    int v108 = v79;
    int v82 = v64 - v79;
    if (*(_DWORD *)(v67 + 2020) - 1 == a4) {
      int v75 = v82;
    }
    else {
      int v75 = v80;
    }
  }
  if (v75 >= 1)
  {
    int v83 = 0;
    uint64_t vars0 = &STACK[0x680];
    uint64_t v124 = 8 * v65;
    uint64_t v84 = 8 * v66;
    int v117 = v77;
    int v118 = v63;
    int v109 = v75;
    do
    {
      int v110 = v83;
      if (v75 - v83 >= 64) {
        uint64_t v85 = 64;
      }
      else {
        uint64_t v85 = (v75 - v83);
      }
      if (v77 >= 1)
      {
        int v86 = 0;
        BOOL v87 = v83 + v108 == 0;
        unsigned int v123 = v110 + v108;
        uint64_t v122 = ((int)v85 >> 3);
        uint64_t v116 = v122 - v87;
        uint64_t v121 = (((int)v85 + 8) >> 4);
        uint64_t v114 = v121 - v87;
        uint64_t v115 = v124 * v87;
        uint64_t v113 = v84 * v87;
        int v130 = v110 + v108 == 0;
        uint64_t vars8 = &STACK[0x600] + 4 * v87;
        do
        {
          if (v77 - v86 >= 64) {
            uint64_t v88 = 64;
          }
          else {
            uint64_t v88 = (v77 - v86);
          }
          int v128 = v86;
          uint64_t v89 = v86 + v119;
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))(v61 + 48))(a2, v89, v123, v88, v85, &a29);
          int v126 = v89;
          uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v129 + 16))(v129, v89, v123, 0);
          uint64_t v91 = v90;
          BOOL v125 = (int)v88 + (int)v89 < v63;
          LODWORD(v92) = (int)v88 >> 3;
          if ((int)v88 + (int)v89 >= v63) {
            uint64_t v92 = v92;
          }
          else {
            uint64_t v92 = (v92 + 1);
          }
          if ((int)v92 >= 2)
          {
            uint64_t v93 = v92 - 1;
            uint64_t v94 = v90 + 8;
            int v95 = &a29;
            uint64_t v96 = &STACK[0x680];
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 80))(v94, v65, v96, v95, v85);
              v95 += 16;
              ++v96;
              v94 += 8;
              --v93;
            }
            while (v93);
          }
          if ((int)v122 > v130)
          {
            uint64_t v97 = v116;
            uint64_t v98 = v91 + v115;
            uint64_t v99 = &STACK[0x6C0] + (v110 + v108 == 0);
            BOOL v100 = &a45 + 2 * (v110 + v108 == 0);
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 88))(v98, v65, v99, v100, v88);
              v100 += 2;
              ++v99;
              v98 += v124;
              --v97;
            }
            while (v97);
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v129 + 16))(v129, (v126 >> 1), ((v110 + v108) >> 1), 1);
          uint64_t v127 = result;
          uint64_t v101 = (v125 + (((int)v88 + 8) >> 4));
          uint64_t v84 = 8 * v66;
          if ((int)v101 >= 2)
          {
            uint64_t v102 = v101 - 1;
            uint64_t v103 = result + 16;
            uint64_t v104 = &a61;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v61 + 96))(v103, v66, v104, ((int)v85 >> 1));
              v104 += 4;
              v103 += 16;
              --v102;
            }
            while (v102);
          }
          if ((int)v121 > v130)
          {
            uint64_t v105 = v127 + v113;
            uint64_t v106 = vars8;
            uint64_t v107 = v114;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, void))(v61 + 104))(v105, v66, v106, ((int)v88 >> 1));
              v106 += 4;
              v105 += 8 * v66;
              --v107;
            }
            while (v107);
          }
          int v86 = v128 + 64;
          int v77 = v117;
          int v63 = v118;
        }
        while (v128 + 64 < v117);
      }
      int v75 = v109;
      int v83 = v110 + 64;
    }
    while (v110 + 64 < v109);
  }
  return result;
}

uint64_t sub_1BBA465B4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v5 = *(_DWORD **)(a2 + 1360);
  int v6 = v5[69];
  int v7 = v5[70];
  uint64_t v8 = *(void *)(a2 + 1368);
  unsigned int v9 = *(unsigned __int8 *)(v8 + 2013);
  LOBYTE(v8) = *(unsigned char *)(v8 + 2009);
  uint64_t v10 = (a3 << v8);
  uint64_t v11 = (a4 << v8);
  unsigned int v12 = v9 >> 1;
  if ((int)(v10 + v9) >= v6) {
    uint64_t v13 = (v6 - v10);
  }
  else {
    uint64_t v13 = v9;
  }
  if ((int)(v10 + v9) >= v6) {
    uint64_t v14 = (((v6 - (int)v10) >> 1) + 2);
  }
  else {
    uint64_t v14 = v12;
  }
  if ((int)(v11 + v9) >= v7) {
    int v15 = v7 - v11;
  }
  else {
    int v15 = v9;
  }
  if ((int)(v11 + v9) >= v7) {
    uint64_t v16 = (((v7 - (int)v11) >> 1) + 2);
  }
  else {
    uint64_t v16 = v12;
  }
  int v49 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 72))(a2, v10, v11, v13);
  uint64_t v43 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, v10, v11, 0);
  int v46 = v5;
  uint64_t v17 = *((void *)v5 + 14);
  int v48 = v10;
  int v44 = v13;
  int v45 = v10 == 0;
  uint64_t v18 = ((int)v13 >> 3);
  if ((int)v18 > v45)
  {
    uint64_t v19 = v18 - (v10 == 0);
    int v20 = &v50[10 * (v48 == 0)];
    int v21 = &v50[5 * (v48 == 0) + 296];
    uint64_t v22 = v43 - 8 * v17 + 8 * (v48 == 0);
    do
    {
      (*(void (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 80))(v22, v17, v21, v20, (v49 + 8));
      v20 += 10;
      v21 += 5;
      v22 += 8;
      --v19;
    }
    while (v19);
  }
  int v23 = v11 == 0;
  uint64_t v24 = (v49 >> 3);
  int v47 = v11;
  if ((int)v24 <= v23)
  {
    LODWORD(v26) = v44 + 8;
  }
  else
  {
    BOOL v25 = v11 == 0;
    uint64_t v26 = (v44 + 8);
    uint64_t v27 = v24 - v25;
    int v28 = &v50[10 * v25 + 80];
    int v29 = &v50[5 * v25 + 336];
    uint64_t v30 = v43 + 8 * v17 * v25 - 8;
    do
    {
      (*(void (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 88))(v30, v17, v29, v28, v26);
      v28 += 10;
      v29 += 5;
      v30 += 8 * v17;
      --v27;
    }
    while (v27);
    int v23 = v11 == 0;
  }
  uint64_t result = (*(uint64_t (**)(void *, void, void, uint64_t))(*v46 + 16))(v46, (v48 >> 1), ((int)v11 >> 1), 1);
  uint64_t v32 = result;
  uint64_t v33 = v46[15];
  uint64_t v34 = ((int)v26 >> 4);
  if ((int)v34 > v45)
  {
    uint64_t v35 = v34 - (v48 == 0);
    int v36 = &v50[17 * (v48 == 0) + 160];
    uint64_t v37 = result - 2 * v33 + 16 * (v48 == 0);
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 96))(v37, v33, v36, v16);
      v36 += 17;
      v37 += 16;
      --v35;
    }
    while (v35);
  }
  uint64_t v38 = ((v49 + 8) >> 4);
  if ((int)v38 > v23)
  {
    BOOL v39 = v47 == 0;
    uint64_t v40 = v38 - v39;
    int v41 = &v50[17 * v39 + 228];
    uint64_t v42 = v32 + 8 * v33 * v39 - 4;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 104))(v42, v33, v41, v14);
      v41 += 17;
      v42 += 8 * v33;
      --v40;
    }
    while (v40);
  }
  return result;
}

uint64_t sub_1BBA468F0(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v65 = a3;
  uint64_t v66 = result;
  uint64_t v67 = *(void *)(a2 + 1360);
  int v128 = *(_DWORD *)(v67 + 276);
  uint64_t v68 = *(void *)(v67 + 112);
  uint64_t v69 = *(void *)(v67 + 120);
  int v70 = *a3;
  uint64_t v129 = (_DWORD *)v67;
  if (*a3 < *(_DWORD *)(v67 + 280))
  {
    v70 &= 0xFFFFFFF0;
    *a3 = v70;
  }
  int v71 = *(_DWORD *)(result + 128);
  if (v71 < v70)
  {
    signed int v134 = (v128 - 1) & 0xFFFFFFC0;
    uint64_t v130 = a2 + 4392;
    uint64_t v127 = v65;
    uint64_t vars8 = v68;
    uint64_t v131 = 8 * v69;
    uint64_t vars0 = 8 * v68;
    do
    {
      uint64_t v72 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v129 + 16))(v129, 0);
      uint64_t result = (*(uint64_t (**)(_DWORD *, void, void, uint64_t))(*(void *)v129 + 16))(v129, 0, (*(int *)(v66 + 128) >> 1), 1);
      uint64_t v73 = *(unsigned int *)(v66 + 128);
      if (*v65 - (int)v73 >= 64) {
        int v74 = 64;
      }
      else {
        int v74 = *v65 - v73;
      }
      if (v73) {
        uint64_t v75 = (v73 - 8);
      }
      else {
        uint64_t v75 = 0;
      }
      int v76 = v74 + 8;
      if (v73) {
        uint64_t v77 = v76;
      }
      else {
        uint64_t v77 = v74;
      }
      uint64_t v143 = v77;
      uint64_t v137 = (v74 >> 3);
      unsigned int v135 = v74;
      unsigned int v142 = v75;
      uint64_t v138 = (v76 >> 4);
      uint64_t v139 = result;
      if (v134 < 1)
      {
        uint64_t v105 = a2;
        uint64_t v79 = 0;
      }
      else
      {
        uint64_t v78 = a2;
        uint64_t v79 = 0;
        uint64_t v80 = (v74 >> 1);
        uint64_t v81 = v77;
        do
        {
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, char *))(v66 + 48))(v78, v79, *(unsigned int *)(v66 + 128), 64, v135, &a17);
          int v140 = v79;
          uint64_t v82 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v78 + 1360) + 16))(*(void *)(v78 + 1360), v79, v75, 0);
          uint64_t v83 = v78;
          if ((int)v81 >= 1)
          {
            uint64_t v84 = *(void *)(*(void *)(v78 + 1360) + 112);
            uint64_t v85 = v130;
            do
            {
              *(_OWORD *)uint64_t v85 = *(_OWORD *)v82;
              long long v86 = *(_OWORD *)(v82 + 16);
              long long v87 = *(_OWORD *)(v82 + 32);
              long long v88 = *(_OWORD *)(v82 + 48);
              *(void *)(v85 + 64) = *(void *)(v82 + 64);
              *(_OWORD *)(v85 + 32) = v87;
              *(_OWORD *)(v85 + 48) = v88;
              *(_OWORD *)(v85 + 16) = v86;
              v82 += v84;
              v85 += 72;
              --v81;
            }
            while (v81);
          }
          uint64_t v89 = 0;
          uint64_t v90 = &a17;
          do
          {
            uint64_t v91 = v89 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, void))(v66 + 80))(v89 + 8 + v72, vars8, (char *)&STACK[0x5C0] + v89, v90, v135);
            v90 += 16;
            uint64_t v89 = v91;
          }
          while (v91 != 64);
          sub_1BBA18EE4(v83, v140, v142, 72, v143, 0);
          int v92 = *(_DWORD *)(v66 + 128);
          if ((int)v137 > (v92 == 0))
          {
            BOOL v93 = v92 == 0;
            uint64_t v94 = v137 - v93;
            int v95 = &a33 + 2 * v93;
            uint64_t v96 = &STACK[0x600] + v93;
            uint64_t v97 = v72 + vars0 * v93;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v66 + 88))(v97, vars8, v96, v95, 64);
              v95 += 2;
              ++v96;
              v97 += vars0;
              --v94;
            }
            while (v94);
          }
          sub_1BBA18EE4(a2, v140, v142, 72, v143, 0);
          sub_1BBA18D70(a2, v140, v142, 72, v143, 1);
          uint64_t v98 = &a49;
          for (uint64_t i = 16; i != 80; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v66 + 96))(v139 + i, v69, v98, v80);
            v98 += 4;
          }
          sub_1BBA18EE4(a2, v140, v142, 72, v143, 1);
          int v100 = *(_DWORD *)(v66 + 128);
          if ((int)v138 > (v100 == 0))
          {
            BOOL v101 = v100 == 0;
            uint64_t v102 = v138 - v101;
            uint64_t v103 = &a65 + 4 * v101;
            uint64_t v104 = v139 + v131 * v101;
            do
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v66 + 104))(v104, v69, v103, 32);
              v103 += 4;
              v104 += v131;
              --v102;
            }
            while (v102);
          }
          uint64_t v78 = a2;
          uint64_t v75 = v142;
          uint64_t v81 = v143;
          uint64_t result = sub_1BBA18EE4(a2, v140, v142, 72, v143, 1);
          v72 += 64;
          v139 += 64;
          uint64_t v79 = (v140 + 64);
        }
        while ((int)v79 < v134);
        uint64_t v105 = a2;
        uint64_t v73 = *(unsigned int *)(v66 + 128);
        uint64_t v68 = vars8;
      }
      uint64_t v106 = (v128 - v79);
      if (v128 == v79)
      {
        uint64_t v65 = v127;
      }
      else
      {
        uint64_t v107 = v105;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, char *))(v66 + 48))(v105, v79, v73, (v128 - v79), v135, &a17);
        int v141 = v79;
        sub_1BBA18D70(v107, v79, v75, v106, v143, 0);
        if ((int)v106 >= 16)
        {
          uint64_t v108 = v72 + 8;
          uint64_t v109 = (v106 >> 3) - 1;
          int v110 = &a17;
          BOOL v111 = &STACK[0x5C0];
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, void))(v66 + 80))(v108, v68, v111, v110, v135);
            v110 += 16;
            ++v111;
            v108 += 8;
            --v109;
          }
          while (v109);
        }
        sub_1BBA18EE4(a2, v141, v142, v106, v143, 0);
        int v112 = *(_DWORD *)(v66 + 128);
        if ((int)v137 > (v112 == 0))
        {
          BOOL v113 = v112 == 0;
          uint64_t v114 = v137 - v113;
          uint64_t v115 = &a33 + 2 * v113;
          uint64_t v116 = &STACK[0x600] + v113;
          uint64_t v117 = v72 + vars0 * v113;
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v66 + 88))(v117, v68, v116, v115, v106);
            v115 += 2;
            ++v116;
            v117 += vars0;
            --v114;
          }
          while (v114);
        }
        sub_1BBA18EE4(a2, v141, v142, v106, v143, 0);
        sub_1BBA18D70(a2, v141, v142, v106, v143, 1);
        if ((int)v106 >= 24)
        {
          uint64_t v118 = v139 + 16;
          uint64_t v119 = ((v106 + 8) >> 4) - 1;
          int v120 = &a49;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, void))(v66 + 96))(v118, v69, v120, ((int)v135 >> 1));
            v120 += 4;
            v118 += 16;
            --v119;
          }
          while (v119);
        }
        sub_1BBA18EE4(a2, v141, v142, v106, v143, 1);
        int v121 = *(_DWORD *)(v66 + 128);
        if ((int)v138 > (v121 == 0))
        {
          BOOL v122 = v121 == 0;
          uint64_t v123 = v138 - v122;
          uint64_t v124 = &a65 + 4 * v122;
          uint64_t v125 = v139 + v131 * v122;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, void))(v66 + 104))(v125, v69, v124, ((int)v106 >> 1));
            v124 += 4;
            v125 += v131;
            --v123;
          }
          while (v123);
        }
        uint64_t result = sub_1BBA18EE4(a2, v141, v142, v106, v143, 1);
        LODWORD(v73) = *(_DWORD *)(v66 + 128);
        uint64_t v65 = v127;
      }
      int v71 = v73 + v135;
      *(_DWORD *)(v66 + 128) = v71;
    }
    while (v71 < *v65);
  }
  int v126 = v129[70];
  if (v126 >= v71) {
    int v126 = v71;
  }
  *uint64_t v65 = v126;
  if (*(_DWORD *)(v66 + 128) < v129[70])
  {
    if (v126 <= 4) {
      int v126 = 4;
    }
    *uint64_t v65 = v126 - 4;
  }
  return result;
}

uint64_t sub_1BBA47028(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v65 = a3;
  uint64_t v66 = result;
  uint64_t v67 = *(void *)(a2 + 1360);
  int v116 = *(_DWORD *)(v67 + 276);
  uint64_t v68 = *(void *)(v67 + 112);
  uint64_t v69 = *(void *)(v67 + 120);
  int v70 = *a3;
  uint64_t v117 = (_DWORD *)v67;
  if (*a3 < *(_DWORD *)(v67 + 280))
  {
    v70 &= 0xFFFFFFF0;
    *a3 = v70;
  }
  int v71 = *(_DWORD *)(result + 128);
  if (v71 < v70)
  {
    signed int v122 = (v116 - 1) & 0xFFFFFFC0;
    uint64_t v120 = 8 * v68;
    uint64_t vars0 = v69;
    uint64_t vars8 = 8 * v69;
    uint64_t v115 = v65;
    do
    {
      uint64_t v72 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v117 + 16))(v117, 0);
      uint64_t result = (*(uint64_t (**)(_DWORD *, void, void, uint64_t))(*(void *)v117 + 16))(v117, 0, (*(int *)(v66 + 128) >> 1), 1);
      uint64_t v73 = result;
      int v74 = *(_DWORD *)(v66 + 128);
      int v75 = *v65 - v74;
      if (v75 >= 64) {
        uint64_t v76 = 64;
      }
      else {
        uint64_t v76 = v75;
      }
      uint64_t v124 = ((int)v76 >> 3);
      uint64_t v125 = (((int)v76 + 8) >> 4);
      int v123 = v76;
      int v77 = 0;
      if (v122 >= 1)
      {
        uint64_t v78 = ((int)v76 >> 1);
        do
        {
          uint64_t v79 = &a17;
          int v126 = v77;
          (*(void (**)(uint64_t))(v66 + 48))(a2);
          uint64_t v80 = 0;
          do
          {
            uint64_t v81 = v80 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v66 + 80))(v80 + 8 + v72, v68, (char *)&STACK[0x5C0] + v80, v79, v76);
            v79 += 16;
            uint64_t v80 = v81;
          }
          while (v81 != 64);
          int v82 = *(_DWORD *)(v66 + 128);
          if ((int)v124 > (v82 == 0))
          {
            BOOL v83 = v82 == 0;
            uint64_t v84 = v124 - v83;
            uint64_t v85 = &a33 + 2 * v83;
            long long v86 = &STACK[0x600] + v83;
            uint64_t v87 = v72 + v120 * v83;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v66 + 88))(v87, v68, v86, v85, 64);
              v85 += 2;
              ++v86;
              v87 += v120;
              --v84;
            }
            while (v84);
          }
          long long v88 = &a49;
          uint64_t v89 = 16;
          uint64_t v69 = vars0;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v66 + 96))(v73 + v89, vars0, v88, v78);
            v89 += 16;
            v88 += 4;
          }
          while (v89 != 80);
          int v90 = *(_DWORD *)(v66 + 128);
          if ((int)v125 > (v90 == 0))
          {
            BOOL v91 = v90 == 0;
            uint64_t v92 = v125 - v91;
            BOOL v93 = &a65 + 4 * v91;
            uint64_t v94 = v73 + vars8 * v91;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v66 + 104))(v94, vars0, v93, 32);
              v93 += 4;
              v94 += vars8;
              --v92;
            }
            while (v92);
          }
          v72 += 64;
          v73 += 64;
          int v77 = v126 + 64;
          uint64_t v76 = v123;
        }
        while (v126 + 64 < v122);
        int v74 = *(_DWORD *)(v66 + 128);
      }
      int v95 = v116 - v77;
      if (v116 != v77)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v66 + 48))(a2);
        int v127 = v95;
        if (v95 >= 16)
        {
          uint64_t v96 = v76;
          uint64_t v97 = v72 + 8;
          uint64_t v98 = (v127 >> 3) - 1;
          uint64_t v99 = &a17;
          int v100 = &STACK[0x5C0];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v66 + 80))(v97, v68, v100, v99, v96);
            v99 += 16;
            ++v100;
            v97 += 8;
            --v98;
          }
          while (v98);
        }
        int v101 = *(_DWORD *)(v66 + 128);
        if ((int)v124 > (v101 == 0))
        {
          BOOL v102 = v101 == 0;
          uint64_t v103 = v124 - v102;
          uint64_t v104 = &a33 + 2 * v102;
          uint64_t v105 = &STACK[0x600] + v102;
          uint64_t v106 = v72 + v120 * v102;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))(v66 + 88))(v106, v68, v105, v104, v127);
            v104 += 2;
            ++v105;
            v106 += v120;
            --v103;
          }
          while (v103);
        }
        if (v127 >= 24)
        {
          uint64_t v107 = v73 + 16;
          uint64_t v108 = ((v127 + 8) >> 4) - 1;
          uint64_t v109 = &a49;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v66 + 96))(v107, v69, v109, (v123 >> 1));
            v109 += 4;
            v107 += 16;
            --v108;
          }
          while (v108);
        }
        int v74 = *(_DWORD *)(v66 + 128);
        LODWORD(v76) = v123;
        if ((int)v125 > (v74 == 0))
        {
          BOOL v110 = v74 == 0;
          uint64_t v111 = v125 - v110;
          int v112 = &a65 + 4 * v110;
          uint64_t v113 = v73 + vars8 * v110;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v66 + 104))(v113, v69, v112, (v127 >> 1));
            v112 += 4;
            v113 += vars8;
            --v111;
          }
          while (v111);
          int v74 = *(_DWORD *)(v66 + 128);
          LODWORD(v76) = v123;
        }
      }
      int v71 = v74 + v76;
      *(_DWORD *)(v66 + 128) = v71;
      uint64_t v65 = v115;
    }
    while (v71 < *v115);
  }
  int v114 = v117[70];
  if (v114 >= v71) {
    int v114 = v71;
  }
  *uint64_t v65 = v114;
  if (*(_DWORD *)(v66 + 128) < v117[70])
  {
    if (v114 <= 4) {
      int v114 = 4;
    }
    *uint64_t v65 = v114 - 4;
  }
  return result;
}

unsigned char *sub_1BBA47528(unsigned char *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  if (a5 >= 1)
  {
    int v7 = result;
    int v8 = 0;
    unsigned int v9 = a3;
    int v10 = a4;
    do
    {
      sub_1BBA475B8(v7, 2, a2, v9, v10);
      uint64_t result = sub_1BBA475B8(v7 + 1, 2, a2, v9, v10);
      v8 += 4;
      v7 += 8;
    }
    while (v8 < a5);
  }
  return result;
}

unsigned char *sub_1BBA475B8(unsigned char *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5 = result[-2 * a3];
  if (a3 < 1)
  {
    int v11 = *result;
    int v6 = result[-a3];
    int v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0) {
      int v8 = v12;
    }
    else {
      int v8 = -v12;
    }
    uint64_t v9 = 2 * a3;
    int v10 = result[2 * a3];
    if (a3 < 0)
    {
      int v13 = result[a3] - 2 * v10 + result[3 * a3];
      if (v13 < 0) {
        int v13 = -v13;
      }
      uint64_t v14 = &result[3 * a2];
      int v15 = v14[-2 * a3];
      char v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    int v6 = result[-a3];
    int v7 = v6 - 2 * v5 + result[-3 * a3];
    if (v7 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = -v7;
    }
    uint64_t v9 = 2 * a3;
    int v10 = result[2 * a3];
    int v11 = *result;
  }
  int v13 = v11 + v10 - 2 * result[a3];
  if (v13 < 0) {
    int v13 = -v13;
  }
  uint64_t v14 = &result[3 * a2];
  int v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    int v16 = v14[-a3];
    int v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0) {
      int v17 = -v17;
    }
    int v18 = v14[v9];
    int v19 = *v14;
    goto LABEL_24;
  }
  char v20 = 0;
LABEL_20:
  int v19 = *v14;
  int v16 = v14[-a3];
  int v17 = v19 + v15 - 2 * v16;
  if (v17 < 0) {
    int v17 = -v17;
  }
  int v18 = v14[v9];
  if (v20)
  {
    int v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  int v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0) {
    int v21 = -v21;
  }
  if (v21 + v17 + v13 + v8 < a4)
  {
    if (a4 >> 2 <= 2 * (v13 + v8)) {
      goto LABEL_37;
    }
    int v22 = result[-4 * a3] - v6;
    if (v22 < 0) {
      int v22 = v6 - result[-4 * a3];
    }
    int v23 = result[3 * a3] - v11;
    if (v23 < 0) {
      int v23 = v11 - result[3 * a3];
    }
    if (v22 + v23 >= a4 >> 3)
    {
LABEL_37:
      BOOL v25 = 1;
    }
    else
    {
      int v24 = v6 - v11;
      if (v24 < 0) {
        int v24 = -v24;
      }
      BOOL v25 = v24 >= (5 * a5 + 1) >> 1;
    }
    if (a4 >> 2 <= 2 * (v21 + v17)) {
      goto LABEL_49;
    }
    int v26 = v14[3 * a3];
    int v27 = v14[-4 * a3] - v16;
    if (v27 < 0) {
      int v27 = -v27;
    }
    int v28 = v26 - v19;
    if (v28 < 0) {
      int v28 = -v28;
    }
    if (v27 + v28 >= a4 >> 3) {
      goto LABEL_49;
    }
    int v29 = v16 - v19;
    if (v16 - v19 < 0) {
      int v29 = v19 - v16;
    }
    if (v29 >= (5 * a5 + 1) >> 1) {
      BOOL v25 = 1;
    }
    if (v25)
    {
LABEL_49:
      unsigned int v30 = v17 + v8;
      unsigned int v31 = (a4 + (a4 >> 1)) >> 3;
      int v32 = a5 >> 1;
      uint64_t v33 = 4;
      int v34 = -(a5 >> 1);
      do
      {
        int v35 = result[-2 * a3];
        int v36 = result[-a3];
        int v37 = *result;
        int v38 = result[a3];
        int v39 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        if (v39 >= 0) {
          int v40 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        }
        else {
          int v40 = -v39;
        }
        if (v40 < 10 * a5)
        {
          if (v39 >= a5) {
            int v42 = a5;
          }
          else {
            int v42 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
          }
          if (v39 <= -a5) {
            int v43 = -a5;
          }
          else {
            int v43 = v42;
          }
          int v44 = (int)(v43 - v35 + ((result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 >= v32) {
            int v45 = a5 >> 1;
          }
          else {
            int v45 = (int)(v43 - v35 + ((result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          }
          if (v44 <= v34) {
            int v46 = -(a5 >> 1);
          }
          else {
            int v46 = v45;
          }
          int v47 = v46 + v35;
          if (v47 >= 255) {
            int v47 = 255;
          }
          int v48 = v47 & ~(v47 >> 31);
          if (v30 < v31) {
            LOBYTE(v35) = v48;
          }
          int v41 = result[v9];
          int v49 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 >= v32) {
            int v50 = a5 >> 1;
          }
          else {
            int v50 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          }
          if (v49 <= v34) {
            int v51 = -(a5 >> 1);
          }
          else {
            int v51 = v50;
          }
          int v52 = v51 + v38;
          if (v52 >= 255) {
            int v52 = 255;
          }
          int v53 = v52 & ~(v52 >> 31);
          if (v21 + v13 < v31) {
            LOBYTE(v38) = v53;
          }
          int v54 = v43 + v36;
          if (v54 >= 255) {
            int v54 = 255;
          }
          int v55 = v54 & ~(v54 >> 31);
          int v56 = v37 - v43;
          if (v56 >= 255) {
            int v56 = 255;
          }
          result[-2 * a3] = v35;
          result[-a3] = v55;
          *uint64_t result = v56 & ~(v56 >> 31);
          result[a3] = v38;
        }
        result += a2;
        --v33;
      }
      while (v33);
    }
    else
    {
      int v57 = 2 * a5;
      uint64_t v58 = 4;
      do
      {
        int v59 = result[-3 * a3];
        int v60 = result[-2 * a3];
        int v61 = result[-a3];
        int v62 = result[a3];
        int v63 = result[v9];
        int v64 = result[3 * a3];
        LOBYTE(v65) = v57 + v59;
        int v66 = *result;
        int v67 = v66 + v61;
        int v68 = v60 + 4;
        signed int v69 = (v60 + 4 + 2 * result[-4 * a3] + 3 * v59 + v66 + v61) >> 3;
        if (v69 < v57 + v59) {
          unsigned int v65 = (v60 + 4 + 2 * result[-4 * a3] + 3 * v59 + v66 + v61) >> 3;
        }
        if (v69 <= v59 - v57) {
          char v70 = v59 - v57;
        }
        else {
          char v70 = v65;
        }
        result[-3 * a3] = v70;
        signed int v71 = v60 - v57;
        LOBYTE(v72) = v57 + v60;
        signed int v73 = (v67 + v60 + v59 + 2) >> 2;
        if (v73 < v57 + v60) {
          unsigned int v72 = (v67 + v60 + v59 + 2) >> 2;
        }
        if (v73 > v71) {
          LOBYTE(v71) = v72;
        }
        result[-2 * a3] = v71;
        signed int v74 = v61 - v57;
        signed int v75 = (v59 + 2 * v61 + 2 * v60 + 2 * v66 + v62 + 4) >> 3;
        if (v75 >= v57 + v61) {
          char v76 = v57 + v61;
        }
        else {
          char v76 = v75;
        }
        if (v75 > v74) {
          LOBYTE(v74) = v76;
        }
        result[-a3] = v74;
        signed int v77 = v66 - v57;
        LOBYTE(v78) = v57 + v66;
        signed int v79 = (v68 + 2 * v61 + 2 * v66 + 2 * v62 + v63) >> 3;
        if (v79 < v57 + v66) {
          unsigned int v78 = (v68 + 2 * v61 + 2 * v66 + 2 * v62 + v63) >> 3;
        }
        if (v79 > v77) {
          LOBYTE(v77) = v78;
        }
        *uint64_t result = v77;
        signed int v80 = v62 - v57;
        LOBYTE(v81) = v57 + v62;
        int v82 = v63 + v62 + v67;
        signed int v83 = (v82 + 2) >> 2;
        if (v83 < v57 + v62) {
          unsigned int v81 = (v82 + 2) >> 2;
        }
        if (v83 > v80) {
          LOBYTE(v80) = v81;
        }
        result[a3] = v80;
        signed int v84 = v63 - v57;
        signed int v85 = v57 + v63;
        signed int v86 = (v82 + 2 * v63 + 2 * v64 + 4) >> 3;
        if (v86 >= v85) {
          char v87 = v85;
        }
        else {
          char v87 = v86;
        }
        if (v86 <= v84) {
          char v88 = v84;
        }
        else {
          char v88 = v87;
        }
        result[v9] = v88;
        result += a2;
        --v58;
      }
      while (v58);
    }
  }
  return result;
}

unsigned char *sub_1BBA47A68(unsigned char *result, uint64_t a2, unsigned __int8 a3, char a4, int a5)
{
  if (a5 >= 1)
  {
    int v7 = result;
    int v8 = 0;
    uint64_t v9 = 4 * a2;
    unsigned int v10 = a3;
    int v11 = a4;
    do
    {
      sub_1BBA475B8(v7, a2, 2, v10, v11);
      uint64_t result = sub_1BBA475B8(v7 + 1, a2, 2, v10, v11);
      v8 += 4;
      v7 += v9;
    }
    while (v8 < a5);
  }
  return result;
}

uint64_t sub_1BBA47B04(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    int v5 = (unsigned char *)(result + 1);
    uint64_t v6 = a4;
    do
    {
      int v7 = *(unsigned __int8 *)(a3 + (v4 & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (v4 & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        int v8 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        uint64_t result = v5[-a2 - 1];
        int v9 = *(v5 - 1);
        int v10 = (v5[-2 * a2 - 1] - v5[a2 - 1] + 4 * (v9 - (int)result) + 4) >> 3;
        if (v10 >= v8) {
          int v11 = *(unsigned __int8 *)(a3 + (v4 & 0x7FFFFFFE));
        }
        else {
          int v11 = (v5[-2 * a2 - 1] - v5[a2 - 1] + 4 * (v9 - (int)result) + 4) >> 3;
        }
        if (v10 <= -v8) {
          int v12 = -v8;
        }
        else {
          int v12 = v11;
        }
        int v13 = v12 + result;
        if (v12 + (int)result >= 255) {
          int v13 = 255;
        }
        v5[-a2 - 1] = v13 & ~(v13 >> 31);
        int v14 = v9 - v12;
        if (v14 >= 255) {
          int v14 = 255;
        }
        *(v5 - 1) = v14 & ~(v14 >> 31);
      }
      if ((v7 & 0x80) == 0)
      {
        int v15 = v5[-a2];
        int v16 = *v5;
        int v17 = (v5[-2 * a2] - v5[a2] + 4 * (v16 - v15) + 4) >> 3;
        if (v17 >= v7) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = v17;
        }
        if (v17 <= -v7) {
          int v18 = -v7;
        }
        else {
          int v18 = result;
        }
        int v19 = v18 + v15;
        if (v18 + v15 >= 255) {
          int v19 = 255;
        }
        v5[-a2] = v19 & ~(v19 >> 31);
        int v20 = v16 - v18;
        if (v20 >= 255) {
          int v20 = 255;
        }
        *int v5 = v20 & ~(v20 >> 31);
      }
      ++v4;
      v5 += 2;
    }
    while (v6 != v4);
  }
  return result;
}

unsigned __int8 *sub_1BBA47C24(unsigned __int8 *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      int v5 = *(unsigned __int8 *)(a3 + (i & 0xFFFFFFFE) + 1);
      if ((*(char *)(a3 + (i & 0x7FFFFFFE)) & 0x80000000) == 0)
      {
        int v6 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        int v7 = *(result - 2);
        int v8 = *result;
        int v9 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        if (v9 >= v6) {
          int v10 = *(unsigned __int8 *)(a3 + (i & 0x7FFFFFFE));
        }
        else {
          int v10 = (*(result - 4) - result[2] + 4 * (v8 - v7) + 4) >> 3;
        }
        if (v9 <= -v6) {
          int v11 = -v6;
        }
        else {
          int v11 = v10;
        }
        int v12 = v11 + v7;
        if (v11 + v7 >= 255) {
          int v12 = 255;
        }
        *(result - 2) = v12 & ~(v12 >> 31);
        int v13 = v8 - v11;
        if (v13 >= 255) {
          int v13 = 255;
        }
        *uint64_t result = v13 & ~(v13 >> 31);
      }
      if ((v5 & 0x80) == 0)
      {
        int v14 = *(result - 1);
        int v15 = result[1];
        int v16 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        if (v16 >= v5) {
          int v17 = v5;
        }
        else {
          int v17 = (*(result - 3) - result[3] + 4 * (v15 - v14) + 4) >> 3;
        }
        if (v16 <= -v5) {
          int v18 = -v5;
        }
        else {
          int v18 = v17;
        }
        int v19 = v18 + v14;
        if (v18 + v14 >= 255) {
          int v19 = 255;
        }
        *(result - 1) = v19 & ~(v19 >> 31);
        int v20 = v15 - v18;
        if (v20 >= 255) {
          int v20 = 255;
        }
        result[1] = v20 & ~(v20 >> 31);
      }
      result += a2;
    }
  }
  return result;
}

unsigned char *sub_1BBA47D2C(unsigned char *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  if (a5 >= 1)
  {
    int v9 = result;
    uint64_t v10 = 0;
    do
    {
      int v11 = *a4++;
      uint64_t result = sub_1BBA475B8(&v9[v10], 1, a2, *(unsigned __int8 *)(a3 + (v10 >> 3)), v11);
      v10 += 4;
    }
    while ((int)v10 < a5);
  }
  return result;
}

unsigned char *sub_1BBA47DA4(unsigned char *result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  if (a5 >= 1)
  {
    int v9 = result;
    int v10 = 0;
    uint64_t v11 = 4 * a2;
    do
    {
      int v12 = *a4++;
      uint64_t result = sub_1BBA475B8(v9, a2, 1, *(unsigned __int8 *)(a3 + (v10 >> 3)), v12);
      v10 += 4;
      v9 += v11;
    }
    while (v10 < a5);
  }
  return result;
}

uint64_t sub_1BBA47E2C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33 = result;
  uint64_t v34 = *(void *)(a2 + 1360);
  int v35 = *(_DWORD *)(v34 + 276);
  int v36 = *(_DWORD *)(v34 + 280);
  uint64_t v78 = v34;
  uint64_t v37 = *(void *)(v34 + 112);
  uint64_t v38 = *(void *)(a2 + 1368);
  int v39 = *(unsigned __int8 *)(v38 + 2013);
  char v40 = *(unsigned char *)(v38 + 2009);
  int v41 = a3 << v40;
  int v42 = a4 << v40;
  int v43 = (a4 << v40) - 16;
  if (*(_DWORD *)(v38 + 2016) - 1 == a3)
  {
    BOOL v44 = v42 < 16;
    if (v42 >= 16) {
      int v45 = v43;
    }
    else {
      int v45 = 0;
    }
    if (!v44) {
      int v43 = 0;
    }
    int v46 = v43 + v39;
    if (v41 <= 63) {
      unsigned int v47 = 0;
    }
    else {
      unsigned int v47 = (v41 - 1) & 0xFFFFFFC0;
    }
    unsigned int v77 = v47;
    int v48 = v35 - v47;
    *(_DWORD *)(result + 128) = v45 + v46 - 8;
    int v70 = v45;
    if (*(_DWORD *)(v38 + 2020) - 1 == a4)
    {
      int v46 = v36 - v45;
      *(_DWORD *)(result + 128) = v36;
    }
  }
  else
  {
    if (!a3 || (v41 & 0x3F) != 0) {
      return result;
    }
    BOOL v49 = v42 < 16;
    if (v42 >= 16) {
      int v50 = v43;
    }
    else {
      int v50 = 0;
    }
    if (!v49) {
      int v43 = 0;
    }
    int v51 = v43 + v39;
    if (v41 >= 64) {
      int v52 = v41 - 64;
    }
    else {
      int v52 = 0;
    }
    unsigned int v77 = v52;
    if (v41 >= 64) {
      int v48 = 64;
    }
    else {
      int v48 = v41;
    }
    int v70 = v50;
    int v53 = v36 - v50;
    if (*(_DWORD *)(v38 + 2020) - 1 == a4) {
      int v46 = v53;
    }
    else {
      int v46 = v51;
    }
  }
  if (v46 >= 1)
  {
    int v54 = 0;
    uint64_t v55 = 8 * v37;
    int v75 = v48;
    int v76 = v35;
    int v71 = v46;
    do
    {
      int v72 = v54;
      if (v46 - v54 >= 64) {
        uint64_t v56 = 64;
      }
      else {
        uint64_t v56 = (v46 - v54);
      }
      if (v48 >= 1)
      {
        int v57 = 0;
        unsigned int v81 = v54 + v70;
        BOOL v58 = v54 + v70 == 0;
        uint64_t v80 = ((int)v56 >> 3);
        uint64_t vars8 = v80 - v58;
        uint64_t v73 = v55 * v58;
        do
        {
          if (v48 - v57 >= 64) {
            uint64_t v59 = 64;
          }
          else {
            uint64_t v59 = (v48 - v57);
          }
          uint64_t v60 = v57 + v77;
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))(v33 + 48))(a2, v60, v81, v59, v56, &a17);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v78 + 16))(v78, v60, v81, 0);
          uint64_t v82 = result;
          LODWORD(v61) = (int)v59 >> 3;
          if ((int)v59 + (int)v60 >= v35) {
            uint64_t v61 = v61;
          }
          else {
            uint64_t v61 = (v61 + 1);
          }
          if ((int)v61 >= 2)
          {
            uint64_t v62 = v61 - 1;
            uint64_t v63 = result + 8;
            int v64 = &a17;
            unsigned int v65 = &STACK[0x5C0];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v33 + 80))(v63, v37, v65, v64, v56);
              v64 += 16;
              ++v65;
              v63 += 8;
              --v62;
            }
            while (v62);
          }
          if ((int)v80 > (v72 + v70 == 0))
          {
            int v66 = &STACK[0x600] + (v72 + v70 == 0);
            uint64_t v67 = v82 + v73;
            int v68 = &a33 + 2 * (v72 + v70 == 0);
            uint64_t v69 = vars8;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v33 + 88))(v67, v37, v66, v68, v59);
              v68 += 2;
              ++v66;
              v67 += v55;
              --v69;
            }
            while (v69);
          }
          v57 += 64;
          int v48 = v75;
          int v35 = v76;
        }
        while (v57 < v75);
      }
      int v46 = v71;
      int v54 = v72 + 64;
    }
    while (v72 + 64 < v71);
  }
  return result;
}

uint64_t sub_1BBA48120(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = *(void *)(a2 + 1360);
  int v6 = *(_DWORD *)(v5 + 276);
  int v7 = *(_DWORD *)(v5 + 280);
  uint64_t v8 = *(void *)(a2 + 1368);
  unsigned int v9 = *(unsigned __int8 *)(v8 + 2013);
  LOBYTE(v8) = *(unsigned char *)(v8 + 2009);
  uint64_t v10 = (a3 << v8);
  uint64_t v11 = (a4 << v8);
  if ((int)(v10 + v9) >= v6) {
    uint64_t v12 = (v6 - v10);
  }
  else {
    uint64_t v12 = v9;
  }
  if ((int)(v11 + v9) >= v7) {
    uint64_t v13 = (v7 - v11);
  }
  else {
    uint64_t v13 = v9;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 72))(a2, v10, v11, v12, v13, v29);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, v10, v11, 0);
  uint64_t v28 = result;
  uint64_t v15 = *(void *)(v5 + 112);
  uint64_t v16 = ((int)v12 >> 3);
  if ((int)v16 > (v10 == 0))
  {
    uint64_t v17 = v16 - (v10 == 0);
    int v18 = &v29[10 * (v10 == 0)];
    int v19 = &v29[5 * (v10 == 0) + 296];
    uint64_t v20 = result - 8 * v15 + 8 * (v10 == 0);
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 80))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 8;
      --v17;
    }
    while (v17);
  }
  uint64_t v21 = ((int)v13 >> 3);
  if ((int)v21 > (v11 == 0))
  {
    BOOL v22 = v11 == 0;
    uint64_t v23 = (v12 + 8);
    uint64_t v24 = v21 - v22;
    BOOL v25 = &v29[10 * v22 + 80];
    int v26 = &v29[5 * v22 + 336];
    uint64_t v27 = v28 + 8 * v15 * v22 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 88))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 8 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1BBA48300(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int v29 = a3;
  uint64_t v30 = a2;
  uint64_t v31 = result;
  uint64_t v32 = *(void *)(a2 + 1360);
  int v71 = *(_DWORD *)(v32 + 276);
  uint64_t v33 = *(void *)(v32 + 112);
  int v34 = *a3;
  int v72 = (_DWORD *)v32;
  if (*a3 < *(_DWORD *)(v32 + 280))
  {
    v34 &= 0xFFFFFFF0;
    *a3 = v34;
  }
  int v35 = *(_DWORD *)(result + 128);
  if (v35 < v34)
  {
    signed int v76 = (v71 - 1) & 0xFFFFFFC0;
    uint64_t vars0 = a2 + 4392;
    uint64_t v36 = 8 * v33;
    int v70 = v29;
    do
    {
      uint64_t v37 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v72 + 16))(v72, 0);
      uint64_t result = (*(uint64_t (**)(_DWORD *, void, void, uint64_t))(*(void *)v72 + 16))(v72, 0, (*(int *)(v31 + 128) >> 1), 1);
      uint64_t v38 = *(unsigned int *)(v31 + 128);
      int v39 = *v29 - v38;
      if (v39 >= 64) {
        uint64_t v40 = 64;
      }
      else {
        uint64_t v40 = v39;
      }
      if (v38) {
        uint64_t v41 = (v38 - 8);
      }
      else {
        uint64_t v41 = 0;
      }
      if (v38) {
        uint64_t v42 = (v40 + 8);
      }
      else {
        uint64_t v42 = v40;
      }
      uint64_t v78 = ((int)v40 >> 3);
      uint64_t v79 = v42;
      unsigned int v77 = v41;
      uint64_t v43 = 0;
      if (v76 >= 1)
      {
        do
        {
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))(v31 + 48))(v30, v43, *(unsigned int *)(v31 + 128), 64, v40, &a13);
          int v80 = v43;
          uint64_t v44 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v30 + 1360) + 16))(*(void *)(v30 + 1360), v43, v41, 0);
          if ((int)v42 >= 1)
          {
            uint64_t v45 = *(void *)(*(void *)(v30 + 1360) + 112);
            uint64_t v46 = vars0;
            do
            {
              *(_OWORD *)uint64_t v46 = *(_OWORD *)v44;
              long long v47 = *(_OWORD *)(v44 + 16);
              long long v48 = *(_OWORD *)(v44 + 32);
              long long v49 = *(_OWORD *)(v44 + 48);
              *(void *)(v46 + 64) = *(void *)(v44 + 64);
              *(_OWORD *)(v46 + 32) = v48;
              *(_OWORD *)(v46 + 48) = v49;
              *(_OWORD *)(v46 + 16) = v47;
              v44 += v45;
              v46 += 72;
              --v42;
            }
            while (v42);
          }
          uint64_t v50 = 0;
          int v51 = &a13;
          do
          {
            uint64_t v52 = v50 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v31 + 80))(v50 + 8 + v37, v33, (char *)&STACK[0x580] + v50, v51, v40);
            v51 += 16;
            uint64_t v50 = v52;
          }
          while (v52 != 64);
          sub_1BBA18EE4(v30, v80, v41, 72, v79, 0);
          int v53 = *(_DWORD *)(v31 + 128);
          if ((int)v78 > (v53 == 0))
          {
            BOOL v54 = v53 == 0;
            uint64_t v55 = v78 - v54;
            uint64_t v56 = &a29 + 2 * v54;
            int v57 = &STACK[0x5C0] + v54;
            uint64_t v58 = v37 + v36 * v54;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v31 + 88))(v58, v33, v57, v56, 64);
              v56 += 2;
              ++v57;
              v58 += v36;
              --v55;
            }
            while (v55);
          }
          uint64_t v30 = a2;
          uint64_t v41 = v77;
          uint64_t v42 = v79;
          uint64_t result = sub_1BBA18EE4(a2, v80, v77, 72, v79, 0);
          v37 += 64;
          uint64_t v43 = (v80 + 64);
        }
        while ((int)v43 < v76);
        uint64_t v38 = *(unsigned int *)(v31 + 128);
      }
      if (v71 != v43)
      {
        unsigned int v73 = v71 - v43;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, v43, v38);
        int v81 = v43;
        sub_1BBA18D70(v30, v43, v41, v71 - v43, v42, 0);
        if (v71 - (int)v43 >= 16)
        {
          uint64_t v59 = v37 + 8;
          uint64_t v60 = (v73 >> 3) - 1;
          uint64_t v61 = &a13;
          uint64_t v62 = &STACK[0x580];
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v31 + 80))(v59, v33, v62, v61, v40);
            v61 += 16;
            ++v62;
            v59 += 8;
            --v60;
          }
          while (v60);
        }
        sub_1BBA18EE4(a2, v81, v77, v73, v79, 0);
        int v63 = *(_DWORD *)(v31 + 128);
        if ((int)v78 > (v63 == 0))
        {
          BOOL v64 = v63 == 0;
          uint64_t v65 = v78 - v64;
          int v66 = &a29 + 2 * v64;
          uint64_t v67 = &STACK[0x5C0] + v64;
          uint64_t v68 = v37 + v36 * v64;
          do
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))(v31 + 88))(v68, v33, v67, v66, v73);
            v66 += 2;
            ++v67;
            v68 += v36;
            --v65;
          }
          while (v65);
        }
        uint64_t v30 = a2;
        uint64_t result = sub_1BBA18EE4(a2, v81, v77, v73, v79, 0);
        LODWORD(v38) = *(_DWORD *)(v31 + 128);
      }
      int v35 = v38 + v40;
      *(_DWORD *)(v31 + 128) = v35;
      int v29 = v70;
    }
    while (v35 < *v70);
  }
  int v69 = v72[70];
  if (v69 >= v35) {
    int v69 = v35;
  }
  *int v29 = v69;
  if (*(_DWORD *)(v31 + 128) < v72[70])
  {
    if (v69 <= 4) {
      int v69 = 4;
    }
    *int v29 = v69 - 4;
  }
  return result;
}

uint64_t sub_1BBA487B0(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  BOOL v25 = a3;
  uint64_t v26 = result;
  uint64_t v27 = *(void *)(a2 + 1360);
  int v58 = *(_DWORD *)(v27 + 276);
  uint64_t v28 = *(void *)(v27 + 112);
  int v29 = *a3;
  uint64_t v59 = (_DWORD *)v27;
  if (*a3 < *(_DWORD *)(v27 + 280))
  {
    v29 &= 0xFFFFFFF0;
    *a3 = v29;
  }
  int v30 = *(_DWORD *)(result + 128);
  if (v30 < v29)
  {
    signed int v62 = (v58 - 1) & 0xFFFFFFC0;
    uint64_t v60 = 8 * v28;
    int v57 = v25;
    do
    {
      uint64_t v31 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v59 + 16))(v59, 0);
      uint64_t result = (*(uint64_t (**)(_DWORD *, void, void, uint64_t))(*(void *)v59 + 16))(v59, 0, (*(int *)(v26 + 128) >> 1), 1);
      int v32 = *(_DWORD *)(v26 + 128);
      int v33 = *v25 - v32;
      if (v33 >= 64) {
        uint64_t v34 = 64;
      }
      else {
        uint64_t v34 = v33;
      }
      int v35 = (int)v34 >> 3;
      uint64_t vars0 = ((int)v34 >> 3);
      int v36 = 0;
      if (v62 >= 1)
      {
        do
        {
          uint64_t v37 = &a9;
          int vars8_4 = v36;
          (*(void (**)(uint64_t))(v26 + 48))(a2);
          uint64_t v38 = 0;
          do
          {
            uint64_t v39 = v38 + 8;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v26 + 80))(v38 + 8 + v31, v28, (char *)&STACK[0x540] + v38, v37, v34);
            v37 += 16;
            uint64_t v38 = v39;
          }
          while (v39 != 64);
          int v40 = *(_DWORD *)(v26 + 128);
          if (v35 > (v40 == 0))
          {
            BOOL v41 = v40 == 0;
            uint64_t v42 = vars0 - v41;
            uint64_t v43 = &a25 + 2 * v41;
            uint64_t v44 = &STACK[0x580] + v41;
            uint64_t v45 = v31 + v60 * v41;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 88))(v45, v28, v44, v43, 64);
              v43 += 2;
              ++v44;
              v45 += v60;
              --v42;
            }
            while (v42);
          }
          v31 += 64;
          int v36 = vars8_4 + 64;
          int v35 = (int)v34 >> 3;
        }
        while (vars8_4 + 64 < v62);
        int v32 = *(_DWORD *)(v26 + 128);
      }
      uint64_t v46 = (v58 - v36);
      if (v58 != v36)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v26 + 48))(a2);
        if ((int)v46 >= 16)
        {
          uint64_t v47 = v31 + 8;
          uint64_t v48 = (v46 >> 3) - 1;
          long long v49 = &a9;
          uint64_t v50 = &STACK[0x540];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v26 + 80))(v47, v28, v50, v49, v34);
            v49 += 16;
            ++v50;
            v47 += 8;
            --v48;
          }
          while (v48);
        }
        int v32 = *(_DWORD *)(v26 + 128);
        if ((int)vars0 > (v32 == 0))
        {
          BOOL v51 = v32 == 0;
          uint64_t v52 = vars0 - v51;
          int v53 = &a25 + 2 * v51;
          BOOL v54 = &STACK[0x580] + v51;
          uint64_t v55 = v31 + v60 * v51;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 88))(v55, v28, v54, v53, v46);
            v53 += 2;
            ++v54;
            v55 += v60;
            --v52;
          }
          while (v52);
          int v32 = *(_DWORD *)(v26 + 128);
        }
      }
      int v30 = v32 + v34;
      *(_DWORD *)(v26 + 128) = v30;
      BOOL v25 = v57;
    }
    while (v30 < *v57);
  }
  int v56 = v59[70];
  if (v56 >= v30) {
    int v56 = v30;
  }
  *BOOL v25 = v56;
  if (*(_DWORD *)(v26 + 128) < v59[70])
  {
    if (v56 <= 4) {
      int v56 = 4;
    }
    *BOOL v25 = v56 - 4;
  }
  return result;
}

void sub_1BBA48B28(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a1 + 1360);
  char v99 = *(unsigned char *)(a1 + 629);
  char v12 = v99 + 2;
  int v13 = *(char *)(a1 + 628);
  char v14 = *(unsigned char *)(v11 + 284) - 8;
  bzero(a6, 0x2F0uLL);
  uint64_t v15 = *(void *)(v11 + 488);
  uint64_t v16 = *(void *)(a1 + 1384);
  int v17 = *(char *)(v16 + 14);
  if (a2) {
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v18 = 0;
  }
  int v104 = v18;
  int v105 = a3;
  if (a3) {
    uint64_t v19 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v19 = 0;
  }
  int v106 = a2;
  int v97 = a5;
  BOOL v98 = a4 + a2 < *(_DWORD *)(v11 + 276);
  uint64_t v103 = (void *)v11;
  int v20 = *(_DWORD *)(v11 + 280);
  int v21 = *(char *)(v16 + 15);
  v112[0] = v17;
  v112[1] = v21;
  BOOL v96 = a5 + a3 < v20;
  int v101 = a4;
  uint64_t v22 = (a4 >> 3);
  int v108 = v19;
  uint64_t v109 = (a5 >> 3);
  if ((int)v109 > (int)v19)
  {
    BOOL v107 = a2 == 0;
    uint64_t v102 = (uint64_t)a2 >> 3;
    uint64_t v23 = v19 << 63 >> 63;
    do
    {
      uint64_t v24 = v23 + 1;
      if ((int)v22 > v107)
      {
        uint64_t v25 = v103[64] + 2 * (v102 + v103[61] * ((uint64_t)(a3 + 8 * (int)v23) >> 3));
        uint64_t v26 = v107;
        do
        {
          int v27 = (*(__int16 *)(v25 + 2 * v26 - 2) >> 9) + (*(__int16 *)(v25 + 2 * v26) >> 9) + 1;
          v111[9 * v26 + 360 + v24] = v99 - 2 + (v27 >> 1);
          int v28 = v13 + (v27 >> 1);
          if (v28 >= 51) {
            int v28 = 51;
          }
          if (v28 <= 15) {
            int v28 = 15;
          }
          a6[10 * v26 + 592 + v24] = byte_1BBB83515[v28 - 15] << v14;
          if ((v26 & 1) == 0)
          {
            uint64_t v29 = 0;
            int v30 = -*(unsigned __int8 *)(*(void *)(a1 + 1368) + 2003);
            char v31 = 1;
            do
            {
              char v32 = v31;
              int v33 = (v27 + 2 * v112[v29]) >> 1;
              if (v33 >= 57) {
                int v34 = 57;
              }
              else {
                int v34 = (v27 + 2 * v112[v29]) >> 1;
              }
              if (v33 <= v30) {
                int v34 = v30;
              }
              if (v34 >= 30) {
                LOBYTE(v34) = byte_1BBB83580[v34 - 30];
              }
              char v31 = 0;
              v111[72 * v29 + 144 + 9 * (v26 >> 1) + v24] = v34 + v12;
              uint64_t v29 = 1;
            }
            while ((v32 & 1) != 0);
          }
          ++v26;
        }
        while (v26 != v22);
      }
      uint64_t v23 = v24;
    }
    while (v24 != v109);
  }
  int v35 = a3;
  int v100 = a3 == 0;
  if ((int)v109 > v100)
  {
    uint64_t v36 = a3 == 0;
    do
    {
      if ((int)v22 > (int)v18)
      {
        uint64_t v37 = v18 << 63 >> 63;
        uint64_t v38 = v103[64] + 2 * (((uint64_t)v106 >> 3) + v103[61] * ((uint64_t)(v105 + 8 * (int)v36) >> 3));
        do
        {
          int v39 = (*(__int16 *)(v38 + 2 * (v37 - v15)) >> 9) + (*(__int16 *)(v38 + 2 * v37) >> 9) + 1;
          ++v37;
          v111[9 * v36 + 288 + v37] = v99 - 2 + (v39 >> 1);
          int v40 = v13 + (v39 >> 1);
          if (v40 >= 51) {
            int v40 = 51;
          }
          if (v40 <= 15) {
            int v40 = 15;
          }
          a6[10 * v36 + 672 + v37] = byte_1BBB83515[v40 - 15] << v14;
          if ((v36 & 1) == 0)
          {
            uint64_t v41 = 0;
            int v42 = -*(unsigned __int8 *)(*(void *)(a1 + 1368) + 2003);
            char v43 = 1;
            do
            {
              char v44 = v43;
              int v45 = (v39 + 2 * v112[v41]) >> 1;
              if (v45 >= 57) {
                int v46 = 57;
              }
              else {
                int v46 = (v39 + 2 * v112[v41]) >> 1;
              }
              if (v45 <= v42) {
                int v46 = v42;
              }
              if (v46 >= 30) {
                LOBYTE(v46) = byte_1BBB83580[v46 - 30];
              }
              char v43 = 0;
              v111[72 * v41 + 9 * (v36 >> 1) + v37] = v46 + v12;
              uint64_t v41 = 1;
            }
            while ((v44 & 1) != 0);
          }
        }
        while (v37 != (uint64_t)v101 >> 3);
      }
      ++v36;
    }
    while (v36 != v109);
    int v35 = v105;
  }
  if ((int)v22 > (v106 == 0))
  {
    int v47 = (v97 >> 2) - v96;
    uint64_t v48 = v106 == 0;
    long long v49 = &a6[20 * v48];
    uint64_t v50 = ((uint64_t)v35 >> 2) - (v108 & 1);
    do
    {
      uint64_t v51 = v103[77] * ((uint64_t)(v106 + 8 * (int)v48) >> 3);
      uint64_t v52 = v103[80];
      if (v47 > v108)
      {
        int v53 = (unsigned __int8 *)(v52 + v50 + v51);
        uint64_t v54 = 2 - (v108 & 1);
        uint64_t v55 = (v108 & 1) + (uint64_t)v47;
        do
        {
          int v57 = *v53++;
          int v56 = v57;
          if (v57)
          {
            int v58 = (char)v111[9 * v48 + 360 + ((int)v54 >> 1)] + 2 * v56;
            if (v58 >= 53) {
              int v58 = 53;
            }
            if (v58 <= 17) {
              int v58 = 17;
            }
            v49[v54] = byte_1BBB83546[v58 - 17] << v14;
          }
          ++v54;
          --v55;
        }
        while (v55);
      }
      if ((v48 & 1) == 0 && v47 > v108)
      {
        uint64_t v59 = v48 >> 1;
        uint64_t v60 = (unsigned __int8 *)(v52 + v50 + v51);
        int v61 = v108 + 2;
        int v62 = 2 * v108 + 3;
        uint64_t v63 = (v108 & 1) + (uint64_t)v47;
        do
        {
          unsigned int v64 = *v60++;
          if (v64 >= 2)
          {
            uint64_t v65 = &v111[9 * v59 + 144 + (v61 >> 1)];
            int v66 = *v65;
            if (v66 >= 53) {
              int v66 = 53;
            }
            if (v66 <= 17) {
              int v66 = 17;
            }
            int v67 = byte_1BBB83546[v66 - 17];
            int v68 = v65[72];
            if (v68 >= 53) {
              int v68 = 53;
            }
            if (v68 <= 17) {
              int v68 = 17;
            }
            int v69 = byte_1BBB83546[v68 - 17];
            int v70 = &a6[34 * v59 + 320];
            v70[v62 - 1] = v67 << v14;
            v70[v62] = v69 << v14;
          }
          v62 += 2;
          ++v61;
          --v63;
        }
        while (v63);
      }
      ++v48;
      v49 += 20;
    }
    while (v48 != v22);
  }
  if ((int)v109 > v100)
  {
    int v71 = (v101 >> 2) - v98;
    uint64_t v72 = v35 == 0;
    unsigned int v73 = &a6[20 * v72 - (v104 & 1) + 162];
    uint64_t v74 = ((uint64_t)v106 >> 2) - (v104 & 1);
    do
    {
      uint64_t v75 = v103[76] * ((uint64_t)(v35 + 8 * (int)v72) >> 3);
      uint64_t v76 = v103[78];
      if (v71 > v104)
      {
        unsigned int v77 = (unsigned __int8 *)(v76 + v74 + v75);
        int v78 = v104 + 2;
        uint64_t v79 = v73;
        uint64_t v80 = (v104 & 1) + (uint64_t)v71;
        do
        {
          int v82 = *v77++;
          int v81 = v82;
          if (v82)
          {
            int v83 = (char)v111[9 * v72 + 288 + (v78 >> 1)] + 2 * v81;
            if (v83 >= 53) {
              int v83 = 53;
            }
            if (v83 <= 17) {
              int v83 = 17;
            }
            *uint64_t v79 = byte_1BBB83546[v83 - 17] << v14;
          }
          ++v79;
          ++v78;
          --v80;
        }
        while (v80);
      }
      if ((v72 & 1) == 0 && v71 > v104)
      {
        uint64_t v84 = v72 >> 1;
        signed int v85 = (unsigned __int8 *)(v76 + v74 + v75);
        int v86 = v104 + 2;
        int v87 = 2 * v104 + 3;
        uint64_t v88 = (v104 & 1) + (uint64_t)v71;
        do
        {
          unsigned int v89 = *v85++;
          if (v89 >= 2)
          {
            int v90 = &v111[9 * v84 + (v86 >> 1)];
            int v91 = *v90;
            if (v91 >= 53) {
              int v91 = 53;
            }
            if (v91 <= 17) {
              int v91 = 17;
            }
            int v92 = byte_1BBB83546[v91 - 17];
            int v93 = v90[72];
            if (v93 >= 53) {
              int v93 = 53;
            }
            if (v93 <= 17) {
              int v93 = 17;
            }
            int v94 = byte_1BBB83546[v93 - 17];
            int v95 = &a6[34 * v84 + 456];
            v95[v87 - 1] = v92 << v14;
            v95[v87] = v94 << v14;
          }
          v87 += 2;
          ++v86;
          --v88;
        }
        while (v88);
      }
      ++v72;
      v73 += 20;
    }
    while (v72 != v109);
  }
}

void sub_1BBA49298(uint64_t a1, int a2, int a3, int a4, int a5, int8x16_t *a6)
{
  uint64_t v12 = *(void *)(a1 + 1360);
  int v13 = *(char *)(a1 + 629);
  int v14 = *(char *)(a1 + 628);
  char v15 = *(unsigned char *)(v12 + 284);
  bzero(a6, 0x2F0uLL);
  int v16 = *(char *)(a1 + 621);
  uint64_t v17 = *(void *)(a1 + 1384);
  int v18 = *(char *)(v17 + 14) + v16;
  int v19 = *(unsigned __int8 *)(*(void *)(a1 + 1368) + 2003);
  int v20 = -v19;
  if (v18 >= 57) {
    int v21 = 57;
  }
  else {
    int v21 = *(char *)(v17 + 14) + v16;
  }
  if (v18 <= v20) {
    int v22 = -v19;
  }
  else {
    int v22 = v21;
  }
  if (v22 >= 30) {
    int v22 = byte_1BBB83580[v22 - 30];
  }
  char v23 = v15 - 8;
  int v24 = *(char *)(v17 + 15) + v16;
  if (v24 >= 57) {
    int v25 = 57;
  }
  else {
    int v25 = v24;
  }
  if (v24 <= v20) {
    int v26 = v20;
  }
  else {
    int v26 = v25;
  }
  if (v26 >= 30) {
    int v26 = byte_1BBB83580[v26 - 30];
  }
  int v27 = v16 + v14;
  if (v16 + v14 >= 51) {
    int v27 = 51;
  }
  if (v27 <= 15) {
    int v27 = 15;
  }
  int8x16_t v28 = vdupq_n_s8(byte_1BBB83515[v27 - 15] << v23);
  a6[45] = v28;
  a6[46] = v28;
  a6[43] = v28;
  a6[44] = v28;
  a6[39] = v28;
  a6[40] = v28;
  a6[37] = v28;
  a6[38] = v28;
  int v29 = v22 + v13;
  if (v29 >= 51) {
    int v29 = 51;
  }
  if (v29 <= 15) {
    int v29 = 15;
  }
  int v30 = byte_1BBB83546[v29 - 15];
  a6[41] = v28;
  a6[42] = v28;
  int v31 = v30 << v23;
  int v32 = v26 + v13;
  if (v32 >= 51) {
    int v32 = 51;
  }
  if (v32 <= 15) {
    int v32 = 15;
  }
  int v33 = byte_1BBB83546[v32 - 15] << v23;
  v77[0] = 0;
  int v34 = v16 + v13;
  if (v34 >= 53) {
    int v35 = 53;
  }
  else {
    int v35 = v34;
  }
  if (v35 <= 17) {
    int v35 = 17;
  }
  int v36 = byte_1BBB83546[v35 - 17] << v23;
  if (v34 >= 51) {
    int v34 = 51;
  }
  if (v34 <= 15) {
    int v34 = 15;
  }
  int v37 = byte_1BBB83546[v34 - 15];
  v77[1] = v36;
  v77[2] = v37 << v23;
  if (a2) {
    int v38 = -1;
  }
  else {
    int v38 = 0;
  }
  BOOL v39 = a4 + a2 < *(_DWORD *)(v12 + 276);
  uint64_t v40 = (a4 >> 3);
  if ((int)v40 > (a2 == 0))
  {
    uint64_t v41 = a2 == 0;
    BOOL v42 = a5 + a3 < *(_DWORD *)(v12 + 280);
    int v43 = (a5 >> 2) - v42;
    BOOL v44 = a3 != 0;
    if (a3) {
      int v45 = -1;
    }
    else {
      int v45 = 0;
    }
    if (a3) {
      uint64_t v46 = -1;
    }
    else {
      uint64_t v46 = 0;
    }
    uint64_t v47 = ((uint64_t)a5 >> 2) - v42 - v46;
    uint64_t v48 = &a6->i8[20 * (a2 == 0) - v44 + 2];
    uint64_t v49 = ((uint64_t)a3 >> 2) - v44;
    do
    {
      uint64_t v50 = *(void *)(v12 + 616) * ((uint64_t)(a2 + 8 * (int)v41) >> 3);
      uint64_t v51 = *(void *)(v12 + 640);
      if (v43 > v45)
      {
        uint64_t v52 = (unsigned __int8 *)(v51 + v49 + v50);
        int v53 = v48;
        uint64_t v54 = v47;
        do
        {
          int v55 = *v52++;
          *v53++ = v77[v55];
          --v54;
        }
        while (v54);
      }
      if ((v41 & 1) == 0 && v43 > v45)
      {
        int v56 = (unsigned __int8 *)(v51 + v49 + v50);
        int v57 = 2 * v45 + 3;
        uint64_t v58 = v47;
        do
        {
          unsigned int v59 = *v56++;
          if (v59 >= 2)
          {
            uint64_t v60 = &a6[20].i8[34 * (v41 >> 1)];
            v60[v57 - 1] = v31;
            v60[v57] = v33;
          }
          v57 += 2;
          --v58;
        }
        while (v58);
      }
      ++v41;
      v48 += 20;
    }
    while (v41 != v40);
  }
  uint64_t v61 = (a5 >> 3);
  if ((int)v61 > (a3 == 0))
  {
    int v62 = (a4 >> 2) - v39;
    uint64_t v63 = a3 == 0;
    unsigned int v64 = &a6[10].i8[20 * v63 - (v38 & 1) + 2];
    uint64_t v65 = ((uint64_t)a2 >> 2) - (v38 & 1);
    do
    {
      uint64_t v66 = *(void *)(v12 + 608) * ((uint64_t)(a3 + 8 * (int)v63) >> 3);
      uint64_t v67 = *(void *)(v12 + 624);
      if (v62 > v38)
      {
        int v68 = (unsigned __int8 *)(v67 + v65 + v66);
        int v69 = v64;
        uint64_t v70 = (v38 & 1) + (uint64_t)v62;
        do
        {
          int v71 = *v68++;
          *v69++ = v77[v71];
          --v70;
        }
        while (v70);
      }
      if ((v63 & 1) == 0 && v62 > v38)
      {
        uint64_t v72 = (unsigned __int8 *)(v67 + v65 + v66);
        int v73 = 2 * v38 + 3;
        uint64_t v74 = (v38 & 1) + (uint64_t)v62;
        do
        {
          unsigned int v75 = *v72++;
          if (v75 >= 2)
          {
            uint64_t v76 = &a6[28].i8[34 * (v63 >> 1) + 8];
            v76[v73 - 1] = v31;
            v76[v73] = v33;
          }
          v73 += 2;
          --v74;
        }
        while (v74);
      }
      ++v63;
      v64 += 20;
    }
    while (v63 != v61);
  }
}

void sub_1BBA4967C(uint64_t a1, int a2, int a3, int a4, int a5, int8x16_t *a6)
{
  uint64_t v12 = *(void *)(a1 + 1360);
  int v13 = *(char *)(a1 + 629);
  int v14 = *(char *)(a1 + 628);
  char v15 = *(unsigned char *)(v12 + 284);
  bzero(a6, 0x280uLL);
  int v16 = *(char *)(a1 + 621);
  uint64_t v17 = *(void *)(a1 + 1384);
  int v18 = *(char *)(v17 + 14) + v16;
  int v19 = *(unsigned __int8 *)(*(void *)(a1 + 1368) + 2003);
  int v20 = -v19;
  if (v18 >= 57) {
    int v21 = 57;
  }
  else {
    int v21 = *(char *)(v17 + 14) + v16;
  }
  if (v18 <= v20) {
    int v22 = -v19;
  }
  else {
    int v22 = v21;
  }
  if (v22 >= 30) {
    int v22 = byte_1BBB83580[v22 - 30];
  }
  char v23 = v15 - 8;
  int v24 = *(char *)(v17 + 15) + v16;
  if (v24 >= 57) {
    int v25 = 57;
  }
  else {
    int v25 = v24;
  }
  if (v24 <= v20) {
    int v26 = v20;
  }
  else {
    int v26 = v25;
  }
  if (v26 >= 30) {
    int v26 = byte_1BBB83580[v26 - 30];
  }
  int v27 = v16 + v14;
  if (v16 + v14 >= 51) {
    int v27 = 51;
  }
  if (v27 <= 15) {
    int v27 = 15;
  }
  unsigned int v28 = byte_1BBB83515[v27 - 15] << v23;
  int v29 = v22 + v13;
  if (v29 >= 51) {
    int v29 = 51;
  }
  if (v29 <= 15) {
    int v29 = 15;
  }
  int8x16_t v30 = vdupq_n_s8(v28);
  a6[38] = v30;
  a6[39] = v30;
  a6[36] = v30;
  a6[37] = v30;
  a6[34] = v30;
  a6[35] = v30;
  a6[32] = v30;
  a6[33] = v30;
  int v31 = byte_1BBB83546[v29 - 15] << v23;
  int v32 = v26 + v13;
  if (v32 >= 51) {
    int v32 = 51;
  }
  if (v32 <= 15) {
    int v32 = 15;
  }
  int v33 = byte_1BBB83546[v32 - 15] << v23;
  v59[0] = 0;
  int v34 = v16 + v13;
  if (v34 >= 53) {
    int v35 = 53;
  }
  else {
    int v35 = v34;
  }
  if (v35 <= 17) {
    int v35 = 17;
  }
  v59[1] = byte_1BBB83546[v35 - 17] << v23;
  if (v34 >= 51) {
    int v34 = 51;
  }
  if (v34 <= 15) {
    int v34 = 15;
  }
  v59[2] = byte_1BBB83546[v34 - 15] << v23;
  if (a4 >= 8)
  {
    unint64_t v36 = 0;
    LODWORD(v37) = a5 >> 2;
    if (a5 >> 2 <= 1) {
      uint64_t v37 = 1;
    }
    else {
      uint64_t v37 = v37;
    }
    int v38 = a6;
    do
    {
      if (a5 >= 4)
      {
        BOOL v39 = &a6[2 * (v36 >> 1) + 16].i8[1];
        uint64_t v40 = (unsigned __int8 *)(*(void *)(v12 + 640)
                                + ((uint64_t)a3 >> 2)
                                + *(void *)(v12 + 616) * ((uint64_t)(a2 + 8 + 8 * (int)v36) >> 3));
        uint64_t v41 = v40;
        BOOL v42 = v38;
        uint64_t v43 = v37;
        do
        {
          int v44 = *v41++;
          v42->i8[0] = v59[v44];
          BOOL v42 = (int8x16_t *)((char *)v42 + 1);
          --v43;
        }
        while (v43);
        uint64_t v45 = v37;
        if (v36)
        {
          do
          {
            unsigned int v46 = *v40++;
            if (v46 >= 2)
            {
              *(v39 - 1) = v31;
              *BOOL v39 = v33;
            }
            v39 += 2;
            --v45;
          }
          while (v45);
        }
      }
      ++v36;
      ++v38;
    }
    while (v36 != a4 >> 3);
  }
  uint64_t v47 = (a5 >> 3);
  if ((int)v47 > (a3 == 0))
  {
    uint64_t v48 = a3 == 0;
    LODWORD(v49) = a4 >> 2;
    if (a4 >> 2 <= 1) {
      uint64_t v49 = 1;
    }
    else {
      uint64_t v49 = v49;
    }
    i8 = a6[(a3 == 0) + 8].i8;
    do
    {
      if (a4 >= 4)
      {
        uint64_t v51 = &a6[2 * (v48 >> 1) + 24].i8[1];
        uint64_t v52 = (unsigned __int8 *)(*(void *)(v12 + 624)
                                + ((uint64_t)a2 >> 2)
                                + *(void *)(v12 + 608) * ((uint64_t)(a3 + 8 * (int)v48) >> 3));
        int v53 = v52;
        uint64_t v54 = i8;
        uint64_t v55 = v49;
        do
        {
          int v56 = *v53++;
          *v54++ = v59[v56];
          --v55;
        }
        while (v55);
        uint64_t v57 = v49;
        if ((v48 & 1) == 0)
        {
          do
          {
            unsigned int v58 = *v52++;
            if (v58 >= 2)
            {
              *(v51 - 1) = v31;
              *uint64_t v51 = v33;
            }
            v51 += 2;
            --v57;
          }
          while (v57);
        }
      }
      ++v48;
      i8 += 16;
    }
    while (v48 != v47);
  }
}

uint64_t sub_1BBA499A8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  if (*(unsigned __int8 *)(a2 + 284) <= 8u)
  {
    uint64_t v4 = result;
    int v5 = *(_DWORD *)(a2 + 276);
    int v6 = *(_DWORD *)(a2 + 280);
    int v7 = v6 >> 1;
    uint64_t v8 = *(void *)(a2 + 120);
    int v9 = *a4;
    if (v6 >> 1 >= *a4 >> 1) {
      int v7 = *a4 >> 1;
    }
    signed int v10 = 2 * (v7 & 0xFFFFFFF8);
    if (v10 <= 4) {
      signed int v10 = 4;
    }
    int v11 = v10 - 4;
    BOOL v12 = v9 < v6;
    if (v9 < v6) {
      int v13 = v11;
    }
    else {
      int v13 = 2 * v7;
    }
    if (v12) {
      unsigned int v14 = v7 & 0xFFFFFFF8;
    }
    else {
      unsigned int v14 = v7;
    }
    *a4 = v13;
    if (a3 >= 51) {
      int v15 = 51;
    }
    else {
      int v15 = a3;
    }
    if (v15 <= 15) {
      int v15 = 15;
    }
    unsigned int v16 = v15 - 15;
    uint64_t v17 = byte_1BBB83515[v16];
    uint64_t v18 = byte_1BBB83546[v16];
    unsigned int v28 = *(_DWORD *)(result + 132);
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a2 + 16))(a2, 0, v28, 1);
    uint64_t v29 = result;
    *(_DWORD *)(v4 + 132) = v14;
    if (v18) {
      BOOL v19 = v5 < 2;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = v14 - v28;
      uint64_t v22 = v5 >> 1;
      uint64_t v23 = result + 4 * v8;
      uint64_t v27 = v22;
      do
      {
        if ((v20 | 4) < v22) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 112))(v29 + 2 * (v20 | 4), v8, v17, v18, v21);
        }
        uint64_t v24 = v20 + 8;
        if (v20 + 8 < v22) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 112))(v29 + 2 * v24, v8, v17, v18, v21);
        }
        if (v28) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 120))(v29 + 2 * v20, v8, v17, v18, 8);
        }
        if ((int)v21 >= 5)
        {
          int v25 = 4;
          uint64_t v26 = v23;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 120))(v26, v8, v17, v18, 8);
            v25 += 4;
            v26 += 4 * v8;
          }
          while ((int)v21 > v25);
        }
        v23 += 16;
        uint64_t v20 = v24;
        uint64_t v22 = v27;
      }
      while (v24 < v27);
    }
  }
  return result;
}

float32x4_t sub_1BBA49BC0(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4 = 0;
  int v5 = a4 + 4;
  do
  {
    int v6 = (const float *)(a2 + v4);
    float32x4_t result = vld1q_dup_f32(v6);
    v5[-4] = result;
    v5[-3] = result;
    v5[-2] = result;
    v5[-1] = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = result;
    v5[3] = result;
    v4 += 4;
    int v5 = (float32x4_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 128);
  return result;
}

float32x4_t sub_1BBA49BF8(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4 = 0;
  int v5 = a4 + 2;
  do
  {
    int v6 = (const float *)(a2 + v4);
    float32x4_t result = vld1q_dup_f32(v6);
    v5[-2] = result;
    v5[-1] = result;
    *int v5 = result;
    v5[1] = result;
    v4 += 4;
    int v5 = (float32x4_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 64);
  return result;
}

float32x4_t sub_1BBA49C28(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4 = (const float *)(a2 + 4);
  unint64_t v5 = -2;
  do
  {
    int v6 = v4 - 1;
    float32x4_t result = vld1q_dup_f32(v6);
    float32x4_t v8 = vld1q_dup_f32(v4);
    *a4 = result;
    a4[1] = result;
    int v9 = (float32x4_t *)((char *)a4 + 2 * a3);
    *int v9 = v8;
    v9[1] = v8;
    v5 += 2;
    v4 += 2;
    a4 = (float32x4_t *)((char *)a4 + 4 * a3);
  }
  while (v5 < 6);
  return result;
}

float32x4_t sub_1BBA49C68(uint64_t a1, const float *a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4 = a2 + 2;
  unint64_t v5 = a2;
  float32x4_t v6 = vld1q_dup_f32(v5++);
  *a4 = v6;
  float32x4_t v7 = vld1q_dup_f32(v5);
  *(float32x4_t *)((char *)a4 + 2 * a3) = v7;
  float32x4_t v8 = a2 + 3;
  float32x4_t v9 = vld1q_dup_f32(v4);
  *(float32x4_t *)((char *)a4 + 4 * a3) = v9;
  float32x4_t result = vld1q_dup_f32(v8);
  *(float32x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1BBA49CA8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[16];
  long long v5 = a2[17];
  long long v6 = a2[18];
  long long v7 = a2[19];
  long long v8 = a2[20];
  long long v9 = a2[21];
  signed int v10 = (_OWORD *)(a4 + 64);
  uint64_t v11 = 32;
  long long v12 = a2[22];
  long long v13 = a2[23];
  do
  {
    *(v10 - 4) = v4;
    *(v10 - 3) = v5;
    *(v10 - 2) = v6;
    *(v10 - 1) = v7;
    *signed int v10 = v8;
    v10[1] = v9;
    v10[2] = v12;
    v10[3] = v13;
    signed int v10 = (_OWORD *)((char *)v10 + 2 * a3);
    --v11;
  }
  while (v11);
}

void sub_1BBA49CE4(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[8];
  long long v5 = a2[9];
  long long v6 = a2[10];
  long long v7 = a2[11];
  long long v8 = (_OWORD *)(a4 + 32);
  uint64_t v9 = 16;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *long long v8 = v6;
    v8[1] = v7;
    long long v8 = (_OWORD *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1BBA49D10(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  unint64_t v6 = -2;
  do
  {
    *a4 = v4;
    a4[1] = v5;
    long long v7 = (_OWORD *)((char *)a4 + 2 * a3);
    *long long v7 = v4;
    v7[1] = v5;
    v6 += 2;
    a4 = (_OWORD *)((char *)a4 + 4 * a3);
  }
  while (v6 < 6);
}

__n128 sub_1BBA49D40(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 result = a2[2];
  *a4 = result;
  *(__n128 *)((char *)a4 + 2 * a3) = result;
  *(__n128 *)((char *)a4 + 4 * a3) = result;
  *(__n128 *)((char *)a4 + 6 * a3) = result;
  return result;
}

uint64_t sub_1BBA49D68(uint64_t result, uint64_t a2, uint64_t a3, int64x2_t *a4)
{
  v78[33] = *MEMORY[0x1E4F143B8];
  long long v4 = v78;
  int v5 = byte_1BBB795E8[(int)result];
  if ((int)result <= 17) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a2 + 256;
  }
  if ((int)result <= 17) {
    uint64_t v7 = a2 + 256;
  }
  else {
    uint64_t v7 = a2;
  }
  if (v5 < 0)
  {
    int v9 = word_1BBB79710[(int)result - 11];
    uint64_t v10 = byte_1BBB795E8[(int)result];
    int v11 = v5 * v9 + 128;
    unint64_t v8 = 32;
    do
    {
      v77[v10] = *(_DWORD *)(v7 + 4 * ((v11 >> 8) - 1));
      v11 += v9;
      BOOL v12 = __CFADD__(v10++, 1);
    }
    while (!v12);
  }
  else
  {
    unint64_t v8 = 64;
  }
  uint64_t v13 = 0;
  for (unint64_t i = 0; i < v8; i += 16)
  {
    int v15 = &v76[v13];
    long long v16 = *(_OWORD *)(v6 + v13 + 16);
    v15[9] = *(_OWORD *)(v6 + v13);
    v15[10] = v16;
    long long v17 = *(_OWORD *)(v6 + v13 + 48);
    v15[11] = *(_OWORD *)(v6 + v13 + 32);
    v15[12] = v17;
    v13 += 64;
  }
  v77[0] = *(_DWORD *)(a2 - 4);
  if ((v5 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      unint64_t v38 = 0;
      int v39 = 2 * v5;
      uint64_t v40 = 6 * a3;
      uint64_t v41 = 8 * a3;
      uint64_t v42 = 4 * a3;
      uint64_t v43 = 2 * a3;
      v44.i64[0] = 0x20002000200020;
      v44.i64[1] = 0x20002000200020;
      int v45 = v5;
      __n128 result = (3 * v5);
      do
      {
        int16x8_t v46 = vdupq_n_s16(v45 & 0x1F);
        int16x8_t v47 = vsubq_s16(v44, v46);
        int16x8_t v48 = vdupq_n_s16((v45 + v5) & 0x1F);
        int16x8_t v49 = vsubq_s16(v44, v48);
        int16x8_t v50 = vdupq_n_s16((v45 + v39) & 0x1F);
        uint64_t v51 = (int16x8_t *)((char *)v78 + 4 * (v45 >> 5) + 4);
        int16x8_t v52 = vdupq_n_s16((v45 + result) & 0x1F);
        int v53 = (int16x8_t *)((char *)v78 + 4 * ((v45 + (int)result) >> 5) + 4);
        int16x8_t v54 = vsubq_s16(v44, v50);
        int16x8_t v55 = vsubq_s16(v44, v52);
        int v56 = (int16x8_t *)((char *)v78 + 4 * ((v45 + v5) >> 5) + 4);
        uint64_t v57 = (int16x8_t *)((char *)v78 + 4 * ((v45 + v39) >> 5) + 4);
        unint64_t v58 = -4;
        unsigned int v59 = a4;
        do
        {
          int16x8_t v60 = *(int16x8_t *)((char *)v51 - 4);
          int16x8_t v61 = *v51++;
          int32x4_t v62 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v60, v47), v61, v46), 5uLL);
          int16x8_t v63 = *(int16x8_t *)((char *)v56 - 4);
          int16x8_t v64 = *v56++;
          int32x4_t v65 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v63, v49), v64, v48), 5uLL);
          int16x8_t v66 = *(int16x8_t *)((char *)v57 - 4);
          int16x8_t v67 = *v57++;
          int32x4_t v68 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v66, v54), v67, v50), 5uLL);
          int16x8_t v69 = *(int16x8_t *)((char *)v53 - 4);
          int16x8_t v70 = *v53++;
          int32x4_t v71 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v69, v55), v70, v52), 5uLL);
          int64x2_t v72 = (int64x2_t)vtrn1q_s32(v62, v65);
          int64x2_t v73 = (int64x2_t)vtrn2q_s32(v62, v65);
          int64x2_t v74 = (int64x2_t)vtrn1q_s32(v68, v71);
          int64x2_t v75 = (int64x2_t)vtrn2q_s32(v68, v71);
          *unsigned int v59 = vzip1q_s64(v72, v74);
          *(int64x2_t *)((char *)v59 + v43) = vzip1q_s64(v73, v75);
          *(int64x2_t *)((char *)v59 + v42) = vzip2q_s64(v72, v74);
          *(int64x2_t *)((char *)v59 + v40) = vzip2q_s64(v73, v75);
          v58 += 4;
          unsigned int v59 = (int64x2_t *)((char *)v59 + v41);
        }
        while (v58 < 0x1C);
        v45 += 4 * v5;
        ++a4;
        BOOL v12 = v38 >= 0x1C;
        v38 += 4;
      }
      while (!v12);
    }
    else
    {
      uint64_t v18 = 0;
      v19.i64[0] = 0x20002000200020;
      v19.i64[1] = 0x20002000200020;
      int v20 = v5;
      do
      {
        uint64_t v21 = 0;
        int16x8_t v22 = vdupq_n_s16(v20 & 0x1F);
        int16x8_t v23 = vsubq_s16(v19, v22);
        uint64_t v24 = (uint64_t)a4->i64 + 2 * v18 * a3;
        char v25 = 1;
        do
        {
          char v26 = v25;
          uint64_t v27 = &v78[v21];
          uint64_t v28 = 2 * v21;
          uint64_t v29 = (char *)v27 + 4 * ((uint64_t)v20 >> 5);
          *(uint16x8_t *)(v24 + v28) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v29, v23), *(int16x8_t *)(v29 + 4), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x10)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 1), v23), *(int16x8_t *)(v29 + 20), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x20)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 2), v23), *(int16x8_t *)(v29 + 36), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x30)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 3), v23), *(int16x8_t *)(v29 + 52), v22), 5uLL);
          uint64_t v21 = 8;
          char v25 = 0;
        }
        while ((v26 & 1) != 0);
        ++v18;
        v20 += v5;
      }
      while (v18 != 32);
    }
  }
  else
  {
    int v30 = 0;
    uint64_t v31 = (uint64_t)v5 >> 5;
    do
    {
      uint64_t v32 = 0;
      long long v4 = (void *)((char *)v4 + 4 * v31);
      char v33 = 1;
      do
      {
        int v34 = (int64x2_t *)&v4[v32];
        uint64_t v35 = 2 * v32;
        int64x2_t v36 = v34[1];
        *(int64x2_t *)((char *)a4 + v35) = *v34;
        *(int64x2_t *)((char *)a4 + (v35 | 0x10)) = v36;
        int64x2_t v37 = v34[3];
        *(int64x2_t *)((char *)a4 + (v35 | 0x20)) = v34[2];
        LOBYTE(v34) = v33;
        *(int64x2_t *)((char *)a4 + (v35 | 0x30)) = v37;
        uint64_t v32 = 8;
        char v33 = 0;
      }
      while ((v34 & 1) != 0);
      a4 = (int64x2_t *)((char *)a4 + 2 * a3);
      ++v30;
    }
    while (v30 != 32);
  }
  return result;
}

unint64_t sub_1BBA4A0E0(unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  v77[17] = *MEMORY[0x1E4F143B8];
  int v4 = byte_1BBB795E8[(int)result];
  int v5 = a2 + 8;
  if ((int)result <= 17) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a2 + 8;
  }
  if (v4 < 0)
  {
    uint64_t v8 = 0;
    if ((int)result > 17) {
      int v5 = a2;
    }
    long long v9 = a2[8 * (unint64_t)((int)result < 18)];
    long long v10 = v5[1];
    long long v11 = v5[2];
    long long v12 = v5[3];
    if ((int)result >= 18) {
      int v13 = result - 18;
    }
    else {
      int v13 = 18 - result;
    }
    unsigned int v14 = (char *)&unk_1BBB79C10 + 64 * (uint64_t)v13;
    unint64_t v7 = 16;
    do
    {
      *(int8x16_t *)&v75[v8 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, *(int8x16_t *)&v14[v8]);
      v8 += 16;
    }
    while (v8 != 64);
  }
  else
  {
    unint64_t v7 = 32;
  }
  uint64_t v15 = 0;
  for (unint64_t i = 0; i < v7; i += 16)
  {
    long long v17 = &v75[v15 * 16];
    long long v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    long long v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    v17[8] = v19;
    v15 += 4;
  }
  int v76 = *((_DWORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      unint64_t v36 = 0;
      int v37 = 2 * v4;
      uint64_t v38 = 6 * a3;
      uint64_t v39 = 8 * a3;
      uint64_t v40 = 4 * a3;
      uint64_t v41 = 2 * a3;
      v42.i64[0] = 0x20002000200020;
      v42.i64[1] = 0x20002000200020;
      int v43 = v4;
      __n128 result = (3 * v4);
      do
      {
        int16x8_t v44 = vdupq_n_s16(v43 & 0x1F);
        int16x8_t v45 = vsubq_s16(v42, v44);
        int16x8_t v46 = vdupq_n_s16((v43 + v4) & 0x1F);
        int16x8_t v47 = vsubq_s16(v42, v46);
        int16x8_t v48 = vdupq_n_s16((v43 + v37) & 0x1F);
        int16x8_t v49 = (int16x8_t *)((char *)v77 + 4 * (v43 >> 5) + 4);
        int16x8_t v50 = vdupq_n_s16((v43 + result) & 0x1F);
        uint64_t v51 = (int16x8_t *)((char *)v77 + 4 * ((v43 + (int)result) >> 5) + 4);
        int16x8_t v52 = vsubq_s16(v42, v48);
        int16x8_t v53 = vsubq_s16(v42, v50);
        int16x8_t v54 = (int16x8_t *)((char *)v77 + 4 * ((v43 + v4) >> 5) + 4);
        int16x8_t v55 = (int16x8_t *)((char *)v77 + 4 * ((v43 + v37) >> 5) + 4);
        unint64_t v56 = -4;
        uint64_t v57 = (int64x2_t *)a4;
        do
        {
          int16x8_t v58 = *(int16x8_t *)((char *)v49 - 4);
          int16x8_t v59 = *v49++;
          int32x4_t v60 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v58, v45), v59, v44), 5uLL);
          int16x8_t v61 = *(int16x8_t *)((char *)v54 - 4);
          int16x8_t v62 = *v54++;
          int32x4_t v63 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v61, v47), v62, v46), 5uLL);
          int16x8_t v64 = *(int16x8_t *)((char *)v55 - 4);
          int16x8_t v65 = *v55++;
          int32x4_t v66 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v64, v52), v65, v48), 5uLL);
          int16x8_t v67 = *(int16x8_t *)((char *)v51 - 4);
          int16x8_t v68 = *v51++;
          int32x4_t v69 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v67, v53), v68, v50), 5uLL);
          int64x2_t v70 = (int64x2_t)vtrn1q_s32(v60, v63);
          int64x2_t v71 = (int64x2_t)vtrn2q_s32(v60, v63);
          int64x2_t v72 = (int64x2_t)vtrn1q_s32(v66, v69);
          int64x2_t v73 = (int64x2_t)vtrn2q_s32(v66, v69);
          *uint64_t v57 = vzip1q_s64(v70, v72);
          *(int64x2_t *)((char *)v57 + v41) = vzip1q_s64(v71, v73);
          *(int64x2_t *)((char *)v57 + v40) = vzip2q_s64(v70, v72);
          *(int64x2_t *)((char *)v57 + v38) = vzip2q_s64(v71, v73);
          v56 += 4;
          uint64_t v57 = (int64x2_t *)((char *)v57 + v39);
        }
        while (v56 < 0xC);
        v43 += 4 * v4;
        a4 += 16;
        BOOL v74 = v36 >= 0xC;
        v36 += 4;
      }
      while (!v74);
    }
    else
    {
      int v20 = (uint16x8_t *)(a4 + 32);
      uint64_t v21 = 16;
      v22.i64[0] = 0x20002000200020;
      v22.i64[1] = 0x20002000200020;
      int v23 = v4;
      do
      {
        int16x8_t v24 = vdupq_n_s16(v23 & 0x1F);
        int16x8_t v25 = vsubq_s16(v22, v24);
        uint16x8_t v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v77[2] + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)&v77[2] + 4 * (v23 >> 5) + 4), v24), 5uLL);
        v20[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v77 + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)v77 + 4 * (v23 >> 5) + 4), v24), 5uLL);
        v20[-1] = v26;
        __n128 result = (unint64_t)&v77[4] + 4 * (v23 >> 5);
        uint16x8_t v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)result, v25), *(int16x8_t *)(result + 4), v24), 5uLL);
        uint16x8_t v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v77[6] + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)&v77[6] + 4 * (v23 >> 5) + 4), v24), 5uLL);
        *int v20 = v27;
        v20[1] = v28;
        v23 += v4;
        int v20 = (uint16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    int v29 = v4 >> 5;
    int v30 = (_OWORD *)(a4 + 32);
    uint64_t v31 = 4 * v29;
    uint64_t v32 = (long long *)((char *)&v77[6] + v31);
    int v33 = 16;
    do
    {
      long long v34 = *(v32 - 2);
      *(v30 - 2) = *(v32 - 3);
      *(v30 - 1) = v34;
      long long v35 = *v32;
      *int v30 = *(v32 - 1);
      v30[1] = v35;
      int v30 = (_OWORD *)((char *)v30 + 2 * a3);
      uint64_t v32 = (long long *)((char *)v32 + v31);
      --v33;
    }
    while (v33);
  }
  return result;
}

uint64_t sub_1BBA4A430(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1BBB795E8[(int)result];
  int v5 = a2 + 4;
  if (v4 < 0)
  {
    if ((int)result <= 17) {
      uint64_t v6 = a2 + 4;
    }
    else {
      uint64_t v6 = a2;
    }
    long long v7 = a2[4 * (unint64_t)((int)result < 18)];
    long long v8 = v6[1];
    if ((int)result >= 18) {
      int v9 = result - 18;
    }
    else {
      int v9 = 18 - result;
    }
    long long v10 = (int8x16_t *)((char *)&unk_1BBB79C10 + 64 * (uint64_t)v9);
    int8x16_t v11 = vqtbl2q_s8(*(int8x16x2_t *)&v7, v10[2]);
    int8x16_t v12 = vqtbl2q_s8(*(int8x16x2_t *)&v7, v10[3]);
    v65[1] = v11;
    int8x16_t v66 = v12;
  }
  if ((int)result <= 17) {
    int v5 = a2;
  }
  long long v13 = v5[1];
  long long v14 = v5[2];
  long long v67 = a2[4 * (unint64_t)((int)result > 17)];
  v68[0] = v13;
  long long v15 = v5[3];
  v68[1] = v14;
  v68[2] = v15;
  v66.i32[3] = *((_DWORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      uint64_t v35 = 0;
      int v36 = 2 * v4;
      char v37 = 1;
      v38.i64[0] = 0x20002000200020;
      v38.i64[1] = 0x20002000200020;
      int v39 = v4;
      int v40 = 3 * v4;
      do
      {
        unint64_t v41 = 0;
        char v42 = v37;
        int16x8_t v43 = vdupq_n_s16(v39 & 0x1F);
        int16x8_t v44 = vsubq_s16(v38, v43);
        int16x8_t v45 = vdupq_n_s16((v39 + v4) & 0x1F);
        int16x8_t v46 = vsubq_s16(v38, v45);
        __n128 result = (uint64_t)(v39 + v36) >> 5;
        int16x8_t v47 = vdupq_n_s16((v39 + v36) & 0x1F);
        int16x8_t v48 = vsubq_s16(v38, v47);
        int16x8_t v49 = vdupq_n_s16((v39 + v40) & 0x1F);
        int16x8_t v50 = vsubq_s16(v38, v49);
        uint64_t v51 = &a4[v35];
        char v52 = 1;
        do
        {
          char v53 = v52;
          int16x8_t v54 = &v68[v41 / 4 - 1];
          int32x4_t v55 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v54 + 4 * ((uint64_t)v39 >> 5)), v44), *(int16x8_t *)((char *)v54 + 4 * ((uint64_t)v39 >> 5) + 4), v43), 5uLL);
          unint64_t v56 = (char *)v54 + 4 * ((uint64_t)(v39 + v4) >> 5);
          int32x4_t v57 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v56, v46), *(int16x8_t *)(v56 + 4), v45), 5uLL);
          int32x4_t v58 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v54 + 4 * result), v48), *(int16x8_t *)((char *)v54 + 4 * result + 4), v47), 5uLL);
          int16x8_t v59 = (char *)v54 + 4 * ((uint64_t)(v39 + v40) >> 5);
          int32x4_t v60 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v59, v50), *(int16x8_t *)(v59 + 4), v49), 5uLL);
          int64x2_t v61 = (int64x2_t)vtrn1q_s32(v55, v57);
          int64x2_t v62 = (int64x2_t)vtrn2q_s32(v55, v57);
          int64x2_t v63 = (int64x2_t)vtrn1q_s32(v58, v60);
          int64x2_t v64 = (int64x2_t)vtrn2q_s32(v58, v60);
          *(int64x2_t *)((char *)v51 + 2 * v41 * a3) = vzip1q_s64(v61, v63);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 1) * a3) = vzip1q_s64(v62, v64);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 2) * a3) = vzip2q_s64(v61, v63);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 3) * a3) = vzip2q_s64(v62, v64);
          unint64_t v41 = 4;
          char v52 = 0;
        }
        while ((v53 & 1) != 0);
        char v37 = 0;
        v39 += 4 * v4;
        uint64_t v35 = 1;
      }
      while ((v42 & 1) != 0);
    }
    else
    {
      long long v16 = a4 + 1;
      uint64_t v17 = 8;
      v18.i64[0] = 0x20002000200020;
      v18.i64[1] = 0x20002000200020;
      int v19 = v4;
      do
      {
        int16x8_t v20 = vdupq_n_s16(v19 & 0x1F);
        int16x8_t v21 = vsubq_s16(v18, v20);
        uint16x8_t v22 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v68[-1] + 4 * (v19 >> 5)), v21), *(int16x8_t *)((char *)&v68[-1] + 4 * (v19 >> 5) + 4), v20), 5uLL);
        uint16x8_t v23 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v68 + 4 * (v19 >> 5)), v21), *(int16x8_t *)((char *)v68 + 4 * (v19 >> 5) + 4), v20), 5uLL);
        v16[-1] = v22;
        *long long v16 = v23;
        v19 += v4;
        long long v16 = (uint16x8_t *)((char *)v16 + 2 * a3);
        --v17;
      }
      while (v17);
    }
  }
  else
  {
    int v24 = v4 >> 5;
    int v25 = v4 >> 4;
    uint64_t v26 = 2 * a3;
    uint64_t v27 = 4 * v25;
    uint64_t v28 = v27 + 64;
    uint64_t v29 = 4 * v24 + 48;
    unsigned int v30 = -2;
    uint64_t v31 = v65;
    do
    {
      uint16x8_t v32 = *(uint16x8_t *)((char *)v31 + v29 + 16);
      *a4 = *(uint16x8_t *)((char *)v31 + v29);
      a4[1] = v32;
      long long v33 = *(_OWORD *)((char *)v31 + v28);
      long long v34 = &a4->i8[v26];
      *(_OWORD *)long long v34 = *(_OWORD *)((char *)v31 + v28 - 16);
      *((_OWORD *)v34 + 1) = v33;
      v30 += 2;
      uint64_t v31 = (_OWORD *)((char *)v31 + v27);
      a4 = (uint16x8_t *)((char *)a4 + v26 + v26);
    }
    while (v30 < 6);
  }
  return result;
}

uint64_t sub_1BBA4A738(uint64_t result, int8x16_t *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1BBB795E8[(int)result];
  int v5 = a2 + 2;
  if (v4 < 0)
  {
    int v6 = 18 - result;
    if ((int)result >= 18) {
      int v6 = result - 18;
    }
    int8x16_t v27 = vqtbl1q_s8(a2[2 * ((int)result < 18)], xmmword_1BBB79C10[4 * (uint64_t)v6 + 3]);
  }
  if ((int)result <= 17) {
    int v5 = a2;
  }
  int8x16_t v7 = a2[2 * ((int)result > 17)];
  int8x16_t v8 = v5[1];
  v28[0] = v7;
  v28[1] = v8;
  v27.i32[3] = a2[-1].i32[3];
  if ((v4 & 0x1F) != 0)
  {
    v9.i64[0] = 0x20002000200020;
    v9.i64[1] = 0x20002000200020;
    int16x8_t v10 = vdupq_n_s16((2 * v4) & 0x1E);
    int16x8_t v11 = vdupq_n_s16((3 * v4) & 0x1F);
    int v12 = v4 >> 3;
    int16x8_t v13 = vdupq_n_s16(4 * (v4 & 7u));
    int16x8_t v14 = vsubq_s16(v9, v13);
    int32x4_t v15 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * (v4 >> 5)), vsubq_s16(v9, vdupq_n_s16(v4 & 0x1F))), *(int16x8_t *)((char *)v28 + 4 * (v4 >> 5) + 4), (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v4 & 0x1F))), 5uLL);
    int32x4_t v16 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * (v4 >> 4)), vsubq_s16(v9, v10)), *(int16x8_t *)((char *)v28 + 4 * (v4 >> 4) + 4), v10), 5uLL);
    uint64_t v17 = (char *)v28 + 4 * ((3 * v4) >> 5);
    int32x4_t v18 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v17, vsubq_s16(v9, v11)), *(int16x8_t *)(v17 + 4), v11), 5uLL);
    int32x4_t v19 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * v12), v14), *(int16x8_t *)((char *)v28 + 4 * v12 + 4), v13), 5uLL);
    if ((int)result < 18)
    {
      int64x2_t v20 = (int64x2_t)vtrn1q_s32(v15, v16);
      int64x2_t v21 = (int64x2_t)vtrn2q_s32(v15, v16);
      int64x2_t v22 = (int64x2_t)vtrn1q_s32(v18, v19);
      int64x2_t v23 = (int64x2_t)vtrn2q_s32(v18, v19);
      int32x4_t v15 = (int32x4_t)vzip1q_s64(v20, v22);
      int32x4_t v18 = (int32x4_t)vzip2q_s64(v20, v22);
      int32x4_t v16 = (int32x4_t)vzip1q_s64(v21, v23);
      int32x4_t v19 = (int32x4_t)vzip2q_s64(v21, v23);
    }
    *a4 = v15;
    *(int32x4_t *)((char *)a4 + 2 * a3) = v16;
    *(int32x4_t *)((char *)a4 + 4 * a3) = v18;
    *(int32x4_t *)((char *)a4 + 6 * a3) = v19;
  }
  else
  {
    if (v4 < 0)
    {
      int8x16_t v8 = v27;
      int8x16_t v24 = vextq_s8(v27, v7, 0xCuLL);
      int8x16_t v25 = vextq_s8(v27, v7, 8uLL);
      int8x16_t v26 = vextq_s8(v27, v7, 4uLL);
    }
    else
    {
      int8x16_t v24 = vextq_s8(v7, v8, 4uLL);
      int8x16_t v25 = vextq_s8(v7, v8, 8uLL);
      int8x16_t v26 = vextq_s8(v7, v8, 0xCuLL);
    }
    *a4 = v24;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v25;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v26;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v8;
  }
  return result;
}

void sub_1BBA4A944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v5 = (const float *)(a2 + 64);
  int v6 = (const float *)(a2 + 192);
  int16x8_t v7 = (int16x8_t)vld1q_dup_f32(v6);
  v17[0] = vmulq_s16(v7, (int16x8_t)xmmword_1BBB6F6D0);
  v17[1] = vmulq_s16(v7, (int16x8_t)xmmword_1BBB6F6E0);
  int16x8_t v8 = vmulq_s16(v7, (int16x8_t)xmmword_1BBB6F6F0);
  int16x8_t v9 = vmulq_s16(v7, (int16x8_t)xmmword_1BBB6F700);
  int16x8_t v10 = (int16x8_t)vld1q_dup_f32(v5);
  v17[2] = v8;
  v17[3] = v9;
  int16x8_t v11 = v10;
  do
  {
    uint64_t v12 = 0;
    int16x8_t v13 = (const float *)((char *)&unk_1BBB79B10 + 4 * v4 + 64);
    int16x8_t v14 = (int16x8_t)vld1q_dup_f32(v13);
    int32x4_t v15 = (const float *)(a2 + 4 * v4);
    int16x8_t v16 = (int16x8_t)vld1q_dup_f32(v15);
    do
    {
      *(uint16x8_t *)(a4 + v12 * 16) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16(v11, *(int16x8_t *)((char *)&unk_1BBB79B10 + v12 * 16 + 64), v16), (int16x8_t)v17[v12]), *(int16x8_t *)(a2 + 128 + v12 * 16), v14), 5uLL);
      ++v12;
    }
    while (v12 != 4);
    int16x8_t v11 = vaddq_s16(v11, v10);
    ++v4;
    a4 += 2 * a3;
  }
  while (v4 != 16);
}

void sub_1BBA4AA50(uint64_t a1, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = 0;
  int v5 = (const float *)(a2 + 4);
  int16x8_t v6 = (int16x8_t)vld1q_dup_f32(v5);
  int16x8_t v7 = (const float *)(a2 + 12);
  int16x8_t v8 = (int16x8_t)vld1q_dup_f32(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F6D0);
  int16x8_t v10 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F6E0);
  int16x8_t v11 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F6F0);
  int16x8_t v12 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F700);
  int16x8_t v13 = *((int16x8_t *)a2 + 8);
  int16x8_t v14 = *((int16x8_t *)a2 + 9);
  int16x8_t v15 = *((int16x8_t *)a2 + 10);
  int16x8_t v16 = *((int16x8_t *)a2 + 11);
  int16x8_t v17 = vshlq_n_s16(v13, 4uLL);
  int16x8_t v18 = vshlq_n_s16(v14, 4uLL);
  int16x8_t v19 = vshlq_n_s16(v15, 4uLL);
  int16x8_t v20 = vshlq_n_s16(v16, 4uLL);
  int64x2_t v21 = a4 + 2;
  int16x8_t v22 = v6;
  do
  {
    int64x2_t v23 = (const float *)((char *)a2 + v4);
    int16x8_t v24 = (int16x8_t)vld1q_dup_f32(v23);
    int16x8_t v17 = vsubq_s16(v17, v13);
    int16x8_t v18 = vsubq_s16(v18, v14);
    v21[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v17, v9), v22), v24, (int16x8_t)xmmword_1BBB6F710), 5uLL);
    v21[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v18, v10), v22), v24, (int16x8_t)xmmword_1BBB6F720), 5uLL);
    int16x8_t v19 = vsubq_s16(v19, v15);
    int16x8_t v20 = vsubq_s16(v20, v16);
    *int64x2_t v21 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v19, v11), v22), v24, (int16x8_t)xmmword_1BBB6F730), 5uLL);
    v21[1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v20, v12), v22), v24, (int16x8_t)xmmword_1BBB6F740), 5uLL);
    int16x8_t v22 = vaddq_s16(v22, v6);
    v4 += 4;
    int64x2_t v21 = (uint16x8_t *)((char *)v21 + 2 * a3);
  }
  while (v4 != 64);
}

void sub_1BBA4AB50(uint64_t a1, uint64_t a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = 0;
  int v5 = (const float *)(a2 + 32);
  int16x8_t v6 = (int16x8_t)vld1q_dup_f32(v5);
  int16x8_t v7 = (const float *)(a2 + 96);
  int16x8_t v8 = (int16x8_t)vld1q_dup_f32(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F6D0);
  int16x8_t v10 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F6E0);
  int16x8_t v11 = *(int16x8_t *)(a2 + 64);
  int16x8_t v12 = *(int16x8_t *)(a2 + 80);
  int16x8_t v13 = vshlq_n_s16(v11, 3uLL);
  int16x8_t v14 = vshlq_n_s16(v12, 3uLL);
  int16x8_t v15 = a4 + 1;
  int16x8_t v16 = v6;
  do
  {
    int16x8_t v17 = (const float *)(a2 + v4);
    int16x8_t v18 = (int16x8_t)vld1q_dup_f32(v17);
    int16x8_t v13 = vsubq_s16(v13, v11);
    int16x8_t v14 = vsubq_s16(v14, v12);
    v15[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v13, v9), v16), v18, (int16x8_t)xmmword_1BBB6F730), 4uLL);
    *int16x8_t v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v14, v10), v16), v18, (int16x8_t)xmmword_1BBB6F740), 4uLL);
    int16x8_t v16 = vaddq_s16(v16, v6);
    v4 += 4;
    int16x8_t v15 = (uint16x8_t *)((char *)v15 + 2 * a3);
  }
  while (v4 != 32);
}

uint16x8_t sub_1BBA4ABF0(uint64_t a1, uint64_t a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = (const float *)(a2 + 48);
  int16x8_t v5 = (int16x8_t)vld1q_dup_f32(v4);
  int16x8_t v6 = vmulq_s16(v5, (int16x8_t)xmmword_1BBB6F6D0);
  int32x4_t v7 = *(int32x4_t *)a2;
  int16x8_t v8 = *(int16x8_t *)(a2 + 32);
  v9.i64[0] = 0x3000300030003;
  v9.i64[1] = 0x3000300030003;
  int16x8_t v10 = (const float *)(a2 + 16);
  int16x8_t v11 = (int16x8_t)vld1q_dup_f32(v10);
  *a4 = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(vmlaq_s16(v6, v8, v9), (int16x8_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), (int16x8_t)xmmword_1BBB6F740), v11), 3uLL);
  *(uint16x8_t *)((char *)a4 + 2 * a3) = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16(v8, v8), v6), (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v7.i8, 1), (int16x8_t)xmmword_1BBB6F740), vaddq_s16(v11, v11)), 3uLL);
  *(uint16x8_t *)((char *)a4 + 4 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmlaq_s16(vaddq_s16(v6, v8), (int16x8_t)vdupq_laneq_s32(v7, 2), (int16x8_t)xmmword_1BBB6F740), v11, v9), 3uLL);
  uint16x8_t result = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(v6, (int16x8_t)vdupq_laneq_s32(v7, 3), (int16x8_t)xmmword_1BBB6F740), vshlq_n_s16(v11, 2uLL)), 3uLL);
  *(uint16x8_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1BBA4ACA0(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[16], *a2), vaddq_s16(a2[1], a2[17])), vaddq_s16(vaddq_s16(a2[2], a2[18]), a2[3])), vaddq_s16(vaddq_s16(vaddq_s16(a2[19], a2[4]), a2[20]), a2[5])), vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[21], a2[6]), a2[22]), a2[7]), a2[23]));
  int32x4_t v5 = vpaddq_s32(v4, v4);
  uint16x8_t v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 6uLL);
  int32x4_t v7 = a4 + 2;
  uint64_t v8 = 32;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *int32x4_t v7 = v6;
    v7[1] = v6;
    int32x4_t v7 = (uint16x8_t *)((char *)v7 + 2 * a3);
    --v8;
  }
  while (v8);
}

void sub_1BBA4AD2C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[8], *a2), vaddq_s16(a2[1], a2[9])), vaddq_s16(vaddq_s16(a2[2], a2[10]), a2[3])), a2[11]);
  int32x4_t v5 = vpaddq_s32(v4, v4);
  uint16x8_t v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 5uLL);
  int32x4_t v7 = a4 + 2;
  uint64_t v8 = 16;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *int32x4_t v7 = v6;
    v7[1] = v6;
    int32x4_t v7 = (uint16x8_t *)((char *)v7 + 2 * a3);
    --v8;
  }
  while (v8);
}

void sub_1BBA4AD88(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vaddq_s16(vaddq_s16(a2[4], *a2), vaddq_s16(a2[1], a2[5]));
  int32x4_t v5 = vpaddq_s32(v4, v4);
  uint16x8_t v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 4uLL);
  unint64_t v7 = -2;
  do
  {
    *a4 = v6;
    a4[1] = v6;
    uint64_t v8 = (uint16x8_t *)((char *)a4 + 2 * a3);
    *uint64_t v8 = v6;
    v8[1] = v6;
    v7 += 2;
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
  }
  while (v7 < 6);
}

uint16x8_t sub_1BBA4ADD4(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vaddq_s16(a2[2], *a2);
  int32x4_t v5 = vpaddq_s32(v4, v4);
  uint16x8_t result = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 3uLL);
  *a4 = result;
  *(uint16x8_t *)((char *)a4 + 2 * a3) = result;
  *(uint16x8_t *)((char *)a4 + 4 * a3) = result;
  *(uint16x8_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

int16x8_t sub_1BBA4AE10(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = a4 + 4;
  do
  {
    uint16x8_t v6 = (const __int16 *)(a2 + v4);
    int16x8_t result = vld1q_dup_s16(v6);
    v5[-4] = result;
    v5[-3] = result;
    v5[-2] = result;
    v5[-1] = result;
    *int32x4_t v5 = result;
    v5[1] = result;
    v5[2] = result;
    v5[3] = result;
    v4 += 2;
    int32x4_t v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 128);
  return result;
}

int16x8_t sub_1BBA4AE48(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = a4 + 2;
  do
  {
    uint16x8_t v6 = (const __int16 *)(a2 + v4);
    int16x8_t result = vld1q_dup_s16(v6);
    v5[-2] = result;
    v5[-1] = result;
    *int32x4_t v5 = result;
    v5[1] = result;
    v4 += 2;
    int32x4_t v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 64);
  return result;
}

int16x8_t sub_1BBA4AE78(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = vld1q_dup_s16(a2->i16);
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0), v7);
  int16x8_t v9 = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v7);
  *a4 = v8;
  a4[1] = v9;
  int16x8_t v10 = &a2->i16[2];
  unint64_t v11 = -1;
  do
  {
    int16x8_t v12 = v10 - 1;
    int16x8_t result = vld1q_dup_s16(v12);
    int16x8_t v14 = vld1q_dup_s16(v10);
    int16x8_t v15 = (int16x8_t *)((char *)a4 + 2 * a3);
    *int16x8_t v15 = result;
    v15[1] = result;
    a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    *a4 = v14;
    a4[1] = v14;
    v11 += 2;
    v10 += 2;
  }
  while (v11 < 0xE);
  return result;
}

int16x8_t sub_1BBA4AEF8(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = *a2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  int16x8_t result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x4_t sub_1BBA4AF90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x4_t v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  int16x4_t result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1BBA4AFEC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[16];
  long long v5 = a2[17];
  long long v6 = a2[18];
  long long v7 = a2[19];
  long long v8 = a2[20];
  long long v9 = a2[21];
  int16x8_t v10 = (_OWORD *)(a4 + 64);
  uint64_t v11 = 64;
  long long v12 = a2[22];
  long long v13 = a2[23];
  do
  {
    *(v10 - 4) = v4;
    *(v10 - 3) = v5;
    *(v10 - 2) = v6;
    *(v10 - 1) = v7;
    *int16x8_t v10 = v8;
    v10[1] = v9;
    v10[2] = v12;
    v10[3] = v13;
    int16x8_t v10 = (_OWORD *)((char *)v10 + 2 * a3);
    --v11;
  }
  while (v11);
}

void sub_1BBA4B028(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[8];
  long long v5 = a2[9];
  long long v6 = a2[10];
  long long v7 = a2[11];
  long long v8 = (_OWORD *)(a4 + 32);
  uint64_t v9 = 32;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *long long v8 = v6;
    v8[1] = v7;
    long long v8 = (_OWORD *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1BBA4B054(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xFC00FC00FC00FC00;
  v9.i64[1] = 0xFC00FC00FC00FC00;
  int8x16_t v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  int8x16_t v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  long long v12 = v6;
  LOWORD(v12) = v10.i16[0];
  long long v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  uint64_t v14 = 7;
  do
  {
    int8x16_t v10 = vextq_s8(v10, v10, 2uLL);
    long long v15 = v6;
    LOWORD(v15) = v10.i16[0];
    int8x16_t v11 = vextq_s8(v11, v11, 2uLL);
    long long v16 = v6;
    LOWORD(v16) = v11.i16[0];
    int16x8_t v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *int16x8_t v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

double sub_1BBA4B104(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  long long v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  long long v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  long long v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  long long v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  long long v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  long long v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  long long v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(void *)&double result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

int8x16_t sub_1BBA4B1D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xFC00FC00FC00FC00;
  v6.i64[1] = 0xFC00FC00FC00FC00;
  int8x16_t v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  int8x16_t v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1BBB6F750);
  int8x16_t result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1BBB6F760);
  *a4 = v8.i64[0];
  *(void *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(void *)((char *)a4 + 4 * a3) = result.i64[0];
  *(void *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

int16x8_t *sub_1BBA4B240(int16x8_t *result, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  long long v4 = v78;
  int v5 = byte_1BBB795E8[(int)result];
  if ((int)result <= 17) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a2 + 256;
  }
  if ((int)result <= 17) {
    uint64_t v7 = a2 + 256;
  }
  else {
    uint64_t v7 = a2;
  }
  if (v5 < 0)
  {
    uint64_t v9 = 2 * byte_1BBB795E8[(int)result];
    int v10 = word_1BBB79710[(int)result - 11];
    int v11 = 2 * v5 * v10 + 128;
    unint64_t v8 = 64;
    do
    {
      v78[v9 - 1] = *(_WORD *)(v7 + 2 * ((v11 >> 8) - 1));
      v11 += v10;
      BOOL v12 = __CFADD__(v9++, 1);
    }
    while (!v12);
  }
  else
  {
    unint64_t v8 = 128;
  }
  uint64_t v13 = 0;
  for (unint64_t i = 0; i < v8; i += 32)
  {
    long long v15 = &v76[v13];
    long long v16 = *(_OWORD *)(v6 + v13 + 16);
    v15[9] = *(_OWORD *)(v6 + v13);
    v15[10] = v16;
    long long v17 = *(_OWORD *)(v6 + v13 + 48);
    v15[11] = *(_OWORD *)(v6 + v13 + 32);
    v15[12] = v17;
    v13 += 64;
  }
  __int16 v77 = *(_WORD *)(a2 - 2);
  if ((v5 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      unint64_t v39 = 0;
      v40.i64[0] = 0x20002000200020;
      v40.i64[1] = 0x20002000200020;
      int8x16_t result = a4;
      int v41 = v5;
      do
      {
        uint64_t v42 = 0;
        int16x8_t v43 = &a4[v39];
        do
        {
          uint64_t v44 = 0;
          int16x8_t v45 = vdupq_n_s16(v41 & 0x1F);
          int16x8_t v46 = vsubq_s16(v40, v45);
          char v47 = 1;
          do
          {
            char v48 = v47;
            int16x8_t v49 = &v78[v44 + ((uint64_t)v41 >> 5)];
            uint64_t v50 = v44 + v42;
            *(uint16x8_t *)((char *)v43 + 2 * v50 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v49, v46), *(int16x8_t *)(v49 + 1), v45), 5uLL);
            *(uint16x8_t *)((char *)v43 + 2 * (v50 + 8) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v49 + 1), v46), *(int16x8_t *)(v49 + 9), v45), 5uLL);
            *(uint16x8_t *)((char *)v43 + 2 * (v50 + 16) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v49 + 2), v46), *(int16x8_t *)(v49 + 17), v45), 5uLL);
            *(uint16x8_t *)((char *)v43 + 2 * (v50 + 24) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v49 + 3), v46), *(int16x8_t *)(v49 + 25), v45), 5uLL);
            uint64_t v44 = 32;
            char v47 = 0;
          }
          while ((v48 & 1) != 0);
          ++v42;
          v41 += v5;
        }
        while (v42 != 8);
        unint64_t v51 = -8;
        char v52 = result;
        do
        {
          int16x8_t v53 = *(int16x8_t *)((char *)v52 + 2 * a3);
          int16x8_t v54 = *(int16x8_t *)((char *)v52 + 4 * a3);
          int16x8_t v55 = *(int16x8_t *)((char *)v52 + 6 * a3);
          int16x8_t v56 = *(int16x8_t *)((char *)v52 + 8 * a3);
          int16x8_t v57 = *(int16x8_t *)((char *)v52 + 10 * a3);
          int16x8_t v58 = *(int16x8_t *)((char *)v52 + 12 * a3);
          int32x4_t v59 = (int32x4_t)vtrn1q_s16(*v52, v53);
          int32x4_t v60 = (int32x4_t)vtrn2q_s16(*v52, v53);
          int32x4_t v61 = (int32x4_t)vtrn1q_s16(v54, v55);
          int16x8_t v62 = *(int16x8_t *)((char *)v52 + 14 * a3);
          int32x4_t v63 = (int32x4_t)vtrn2q_s16(v54, v55);
          int64x2_t v64 = (int64x2_t)vtrn1q_s32(v59, v61);
          int64x2_t v65 = (int64x2_t)vtrn2q_s32(v59, v61);
          int64x2_t v66 = (int64x2_t)vtrn1q_s32(v60, v63);
          int64x2_t v67 = (int64x2_t)vtrn2q_s32(v60, v63);
          int32x4_t v68 = (int32x4_t)vtrn1q_s16(v56, v57);
          int32x4_t v69 = (int32x4_t)vtrn2q_s16(v56, v57);
          int32x4_t v70 = (int32x4_t)vtrn1q_s16(v58, v62);
          int32x4_t v71 = (int32x4_t)vtrn2q_s16(v58, v62);
          int64x2_t v72 = (int64x2_t)vtrn1q_s32(v68, v70);
          int64x2_t v73 = (int64x2_t)vtrn2q_s32(v68, v70);
          int64x2_t v74 = (int64x2_t)vtrn1q_s32(v69, v71);
          int64x2_t v75 = (int64x2_t)vtrn2q_s32(v69, v71);
          *(int64x2_t *)char v52 = vzip1q_s64(v64, v72);
          *(int64x2_t *)((char *)v52 + 2 * a3) = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v52 + 4 * a3) = vzip1q_s64(v65, v73);
          *(int64x2_t *)((char *)v52 + 6 * a3) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v52 + 8 * a3) = vzip2q_s64(v64, v72);
          *(int64x2_t *)((char *)v52 + 10 * a3) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v52 + 12 * a3) = vzip2q_s64(v65, v73);
          *(int64x2_t *)((char *)v52 + 14 * a3) = vzip2q_s64(v67, v75);
          v51 += 8;
          v52 += a3;
        }
        while (v51 < 0x38);
        ++result;
        BOOL v12 = v39++ >= 7;
      }
      while (!v12);
    }
    else
    {
      uint64_t v18 = 0;
      v19.i64[0] = 0x20002000200020;
      v19.i64[1] = 0x20002000200020;
      int v20 = v5;
      do
      {
        uint64_t v21 = 0;
        int16x8_t v22 = vdupq_n_s16(v20 & 0x1F);
        int16x8_t v23 = vsubq_s16(v19, v22);
        char v24 = 1;
        do
        {
          int8x16_t v25 = &v78[v21 * 8 + ((uint64_t)v20 >> 5)];
          uint64_t v26 = (uint64_t)a4[v21].i64 + 2 * v18 * a3;
          uint16x8_t v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v25 + 1), v23), *(int16x8_t *)(v25 + 9), v22), 5uLL);
          *(uint16x8_t *)uint64_t v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v25, v23), *(int16x8_t *)(v25 + 1), v22), 5uLL);
          *(uint16x8_t *)(v26 + 16) = v27;
          uint16x8_t v28 = (uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v25 + 2), v23), *(int16x8_t *)(v25 + 17), v22);
          uint16x8_t v29 = (uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v25 + 3), v23), *(int16x8_t *)(v25 + 25), v22);
          LOBYTE(v25) = v24;
          *(uint16x8_t *)(v26 + 32) = vrshrq_n_u16(v28, 5uLL);
          *(uint16x8_t *)(v26 + 48) = vrshrq_n_u16(v29, 5uLL);
          uint64_t v21 = 4;
          char v24 = 0;
        }
        while ((v25 & 1) != 0);
        ++v18;
        v20 += v5;
      }
      while (v18 != 64);
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (uint64_t)v5 >> 5;
    do
    {
      uint64_t v32 = 0;
      char v33 = 1;
      v4 += v31;
      do
      {
        long long v34 = &v4[v32 * 8];
        long long v35 = v34[1];
        long long v36 = v34[2];
        long long v37 = v34[3];
        int16x8_t v38 = &a4[v32].i8[2 * v30 * a3];
        *(_OWORD *)int16x8_t v38 = *v34;
        *((_OWORD *)v38 + 1) = v35;
        LOBYTE(v34) = v33;
        *((_OWORD *)v38 + 2) = v36;
        *((_OWORD *)v38 + 3) = v37;
        uint64_t v32 = 4;
        char v33 = 0;
      }
      while ((v34 & 1) != 0);
      ++v30;
    }
    while (v30 != 64);
  }
  return result;
}

uint64_t sub_1BBA4B648(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1BBB795E8[(int)result];
  int v5 = a2 + 8;
  if ((int)result <= 17) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a2 + 8;
  }
  if (v4 < 0)
  {
    uint64_t v8 = 0;
    if ((int)result > 17) {
      int v5 = a2;
    }
    long long v9 = a2[8 * (unint64_t)((int)result < 18)];
    long long v10 = v5[1];
    long long v11 = v5[2];
    long long v12 = v5[3];
    if ((int)result >= 18) {
      int v13 = result - 18;
    }
    else {
      int v13 = 18 - result;
    }
    long long v14 = (char *)&unk_1BBB798A0 + 64 * (uint64_t)v13;
    unint64_t v7 = 32;
    do
    {
      *(int8x16_t *)&v79[v8 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, *(int8x16_t *)&v14[v8]);
      v8 += 16;
    }
    while (v8 != 64);
  }
  else
  {
    unint64_t v7 = 64;
  }
  uint64_t v15 = 0;
  for (unint64_t i = 0; i < v7; i += 32)
  {
    long long v17 = &v79[v15 * 16];
    long long v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    long long v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    _OWORD v17[8] = v19;
    v15 += 4;
  }
  __int16 v80 = *((_WORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      unint64_t v37 = 0;
      uint64_t v38 = 4 * a3;
      uint64_t v39 = 6 * a3;
      uint64_t v40 = 3 * a3;
      uint64_t v41 = 2 * a3;
      int8x16_t result = 32 * a3;
      uint64_t v42 = a3;
      uint64_t v43 = 12 * a3;
      uint64_t v44 = 10 * a3;
      uint64_t v45 = 8 * a3;
      v46.i64[0] = 0x20002000200020;
      v46.i64[1] = 0x20002000200020;
      int v47 = v4;
      uint64_t v48 = 14 * a3;
      do
      {
        int16x8_t v49 = a4;
        uint64_t v50 = 8;
        do
        {
          int16x8_t v51 = vdupq_n_s16(v47 & 0x1F);
          int16x8_t v52 = vsubq_s16(v46, v51);
          *int16x8_t v49 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[v47 >> 5], v52), *(int16x8_t *)&v81[(v47 >> 5) + 1], v51), 5uLL);
          v49[v42] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 8], v52), *(int16x8_t *)&v81[(v47 >> 5) + 9], v51), 5uLL);
          *(uint16x8_t *)((char *)v49 + result) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 16], v52), *(int16x8_t *)&v81[(v47 >> 5) + 17], v51), 5uLL);
          v49[v40] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 24], v52), *(int16x8_t *)&v81[(v47 >> 5) + 25], v51), 5uLL);
          v47 += v4;
          int16x8_t v49 = (uint16x8_t *)((char *)v49 + v41);
          --v50;
        }
        while (v50);
        unint64_t v53 = -8;
        int16x8_t v54 = (int16x8_t *)a4;
        do
        {
          int16x8_t v55 = *(int16x8_t *)((char *)v54 + v41);
          int16x8_t v56 = *(int16x8_t *)((char *)v54 + v38);
          int16x8_t v57 = *(int16x8_t *)((char *)v54 + v39);
          int16x8_t v58 = *(int16x8_t *)((char *)v54 + v45);
          int16x8_t v59 = *(int16x8_t *)((char *)v54 + v44);
          int16x8_t v60 = *(int16x8_t *)((char *)v54 + v43);
          int32x4_t v61 = (int32x4_t)vtrn1q_s16(*v54, v55);
          int32x4_t v62 = (int32x4_t)vtrn2q_s16(*v54, v55);
          int32x4_t v63 = (int32x4_t)vtrn1q_s16(v56, v57);
          int16x8_t v64 = *(int16x8_t *)((char *)v54 + v48);
          int32x4_t v65 = (int32x4_t)vtrn2q_s16(v56, v57);
          int64x2_t v66 = (int64x2_t)vtrn1q_s32(v61, v63);
          int64x2_t v67 = (int64x2_t)vtrn2q_s32(v61, v63);
          int64x2_t v68 = (int64x2_t)vtrn1q_s32(v62, v65);
          int64x2_t v69 = (int64x2_t)vtrn2q_s32(v62, v65);
          int32x4_t v70 = (int32x4_t)vtrn1q_s16(v58, v59);
          int32x4_t v71 = (int32x4_t)vtrn2q_s16(v58, v59);
          int32x4_t v72 = (int32x4_t)vtrn1q_s16(v60, v64);
          int32x4_t v73 = (int32x4_t)vtrn2q_s16(v60, v64);
          int64x2_t v74 = (int64x2_t)vtrn1q_s32(v70, v72);
          int64x2_t v75 = (int64x2_t)vtrn2q_s32(v70, v72);
          int64x2_t v76 = (int64x2_t)vtrn1q_s32(v71, v73);
          int64x2_t v77 = (int64x2_t)vtrn2q_s32(v71, v73);
          *(int64x2_t *)int16x8_t v54 = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v54 + v41) = vzip1q_s64(v68, v76);
          *(int64x2_t *)((char *)v54 + v38) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v54 + v39) = vzip1q_s64(v69, v77);
          *(int64x2_t *)((char *)v54 + v45) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v54 + v44) = vzip2q_s64(v68, v76);
          *(int64x2_t *)((char *)v54 + v43) = vzip2q_s64(v67, v75);
          *(int64x2_t *)((char *)v54 + v48) = vzip2q_s64(v69, v77);
          v53 += 8;
          int16x8_t v54 = (int16x8_t *)((char *)v54 + v42 * 16);
        }
        while (v53 < 0x18);
        ++a4;
        BOOL v78 = v37 >= 0x18;
        v37 += 8;
      }
      while (!v78);
    }
    else
    {
      int v20 = a4 + 2;
      uint64_t v21 = 32;
      v22.i64[0] = 0x20002000200020;
      v22.i64[1] = 0x20002000200020;
      int v23 = v4;
      do
      {
        int16x8_t v24 = vdupq_n_s16(v23 & 0x1F);
        int16x8_t v25 = vsubq_s16(v22, v24);
        uint16x8_t v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v23 >> 5) + 8], v25), *(int16x8_t *)&v81[(v23 >> 5) + 9], v24), 5uLL);
        v20[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[v23 >> 5], v25), *(int16x8_t *)&v81[(v23 >> 5) + 1], v24), 5uLL);
        v20[-1] = v26;
        int8x16_t result = (uint64_t)&v81[(v23 >> 5) + 16];
        uint16x8_t v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)result, v25), *(int16x8_t *)(result + 2), v24), 5uLL);
        uint16x8_t v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v23 >> 5) + 24], v25), *(int16x8_t *)&v81[(v23 >> 5) + 25], v24), 5uLL);
        *int v20 = v27;
        v20[1] = v28;
        v23 += v4;
        int v20 = (uint16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    int v29 = v4 >> 5;
    uint64_t v30 = a4 + 2;
    uint64_t v31 = v29;
    uint64_t v32 = (uint16x8_t *)&v81[v31 + 24];
    uint64_t v33 = 32;
    do
    {
      uint16x8_t v34 = v32[-2];
      uint16x8_t v35 = v32[-1];
      uint16x8_t v36 = *v32;
      v30[-2] = v32[-3];
      v30[-1] = v34;
      *uint64_t v30 = v35;
      v30[1] = v36;
      uint64_t v32 = (uint16x8_t *)((char *)v32 + v31 * 2);
      uint64_t v30 = (uint16x8_t *)((char *)v30 + 2 * a3);
      --v33;
    }
    while (v33);
  }
  return result;
}

uint64_t sub_1BBA4BA20(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1BBB795E8[(int)result];
  int v5 = a2 + 4;
  if ((int)result <= 17) {
    int v5 = a2;
  }
  long long v6 = v5[1];
  long long v7 = v5[2];
  long long v65 = a2[4 * (unint64_t)((int)result > 17)];
  v66[0] = v6;
  long long v8 = v5[3];
  v66[1] = v7;
  v66[2] = v8;
  if ((v4 & 0x1F) != 0)
  {
    if ((int)result < 18)
    {
      uint64_t v28 = 0;
      char v29 = 1;
      v30.i64[0] = 0x20002000200020;
      v30.i64[1] = 0x20002000200020;
      int v31 = v4;
      int8x16_t result = 14 * a3;
      do
      {
        char v32 = v29;
        uint64_t v33 = &a4[v28];
        uint16x8_t v34 = v33;
        uint64_t v35 = 8;
        do
        {
          int16x8_t v36 = vdupq_n_s16(v31 & 0x1F);
          int16x8_t v37 = vsubq_s16(v30, v36);
          *uint16x8_t v34 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v66[-1] + 2 * (v31 >> 5)), v37), *(int16x8_t *)((char *)&v66[-1] + 2 * (v31 >> 5) + 2), v36), 5uLL);
          v34[a3] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v66 + 2 * (v31 >> 5)), v37), *(int16x8_t *)((char *)v66 + 2 * (v31 >> 5) + 2), v36), 5uLL);
          v31 += v4;
          uint16x8_t v34 = (uint16x8_t *)((char *)v34 + 2 * a3);
          --v35;
        }
        while (v35);
        uint64_t v38 = 0;
        char v39 = 1;
        do
        {
          char v40 = v39;
          uint64_t v41 = (int16x8_t *)((char *)v33 + 2 * v38 * a3);
          int16x8_t v42 = *(int16x8_t *)((char *)v41 + 2 * a3);
          int16x8_t v43 = *(int16x8_t *)((char *)v41 + 4 * a3);
          int16x8_t v44 = *(int16x8_t *)((char *)v41 + 6 * a3);
          int16x8_t v45 = *(int16x8_t *)((char *)v41 + 8 * a3);
          int16x8_t v46 = *(int16x8_t *)((char *)v41 + 10 * a3);
          int16x8_t v47 = *(int16x8_t *)((char *)v41 + 12 * a3);
          int32x4_t v48 = (int32x4_t)vtrn1q_s16(*v41, v42);
          int32x4_t v49 = (int32x4_t)vtrn2q_s16(*v41, v42);
          int32x4_t v50 = (int32x4_t)vtrn1q_s16(v43, v44);
          int16x8_t v51 = *(int16x8_t *)((char *)v41 + 14 * a3);
          int32x4_t v52 = (int32x4_t)vtrn2q_s16(v43, v44);
          int64x2_t v53 = (int64x2_t)vtrn1q_s32(v48, v50);
          int64x2_t v54 = (int64x2_t)vtrn2q_s32(v48, v50);
          int64x2_t v55 = (int64x2_t)vtrn1q_s32(v49, v52);
          int64x2_t v56 = (int64x2_t)vtrn2q_s32(v49, v52);
          int32x4_t v57 = (int32x4_t)vtrn1q_s16(v45, v46);
          int32x4_t v58 = (int32x4_t)vtrn2q_s16(v45, v46);
          int32x4_t v59 = (int32x4_t)vtrn1q_s16(v47, v51);
          int32x4_t v60 = (int32x4_t)vtrn2q_s16(v47, v51);
          int64x2_t v61 = (int64x2_t)vtrn1q_s32(v57, v59);
          int64x2_t v62 = (int64x2_t)vtrn2q_s32(v57, v59);
          int64x2_t v63 = (int64x2_t)vtrn1q_s32(v58, v60);
          int64x2_t v64 = (int64x2_t)vtrn2q_s32(v58, v60);
          *(int64x2_t *)uint64_t v41 = vzip1q_s64(v53, v61);
          *(int64x2_t *)((char *)v41 + 2 * a3) = vzip1q_s64(v55, v63);
          *(int64x2_t *)((char *)v41 + 4 * a3) = vzip1q_s64(v54, v62);
          *(int64x2_t *)((char *)v41 + 6 * a3) = vzip1q_s64(v56, v64);
          *(int64x2_t *)((char *)v41 + 8 * a3) = vzip2q_s64(v53, v61);
          *(int64x2_t *)((char *)v41 + 10 * a3) = vzip2q_s64(v55, v63);
          *(int64x2_t *)((char *)v41 + 12 * a3) = vzip2q_s64(v54, v62);
          *(int64x2_t *)((char *)v41 + 14 * a3) = vzip2q_s64(v56, v64);
          uint64_t v38 = 8;
          char v39 = 0;
        }
        while ((v40 & 1) != 0);
        char v29 = 0;
        uint64_t v28 = 1;
      }
      while ((v32 & 1) != 0);
    }
    else
    {
      long long v9 = a4 + 1;
      uint64_t v10 = 16;
      v11.i64[0] = 0x20002000200020;
      v11.i64[1] = 0x20002000200020;
      int v12 = v4;
      do
      {
        int16x8_t v13 = vdupq_n_s16(v12 & 0x1F);
        int16x8_t v14 = vsubq_s16(v11, v13);
        uint16x8_t v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v66[-1] + 2 * (v12 >> 5)), v14), *(int16x8_t *)((char *)&v66[-1] + 2 * (v12 >> 5) + 2), v13), 5uLL);
        uint16x8_t v16 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v66 + 2 * (v12 >> 5)), v14), *(int16x8_t *)((char *)v66 + 2 * (v12 >> 5) + 2), v13), 5uLL);
        v9[-1] = v15;
        *long long v9 = v16;
        v12 += v4;
        long long v9 = (uint16x8_t *)((char *)v9 + 2 * a3);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    int v17 = v4 >> 5;
    int v18 = 2 * v17;
    uint64_t v19 = 2 * v17;
    int v20 = v66;
    uint64_t v21 = 2 * v18;
    unint64_t v22 = -2;
    do
    {
      uint16x8_t v23 = *(uint16x8_t *)((char *)v20 + v19 - 16);
      uint16x8_t v24 = *(uint16x8_t *)((char *)v20 + v19);
      int v20 = (long long *)((char *)v20 + v21);
      long long v25 = *(v20 - 1);
      long long v26 = *v20;
      *a4 = v23;
      a4[1] = v24;
      uint16x8_t v27 = &a4->i8[2 * a3];
      *(_OWORD *)uint16x8_t v27 = v25;
      *((_OWORD *)v27 + 1) = v26;
      v22 += 2;
      a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
    }
    while (v22 < 0xE);
  }
  return result;
}

uint64_t sub_1BBA4BD48(uint64_t result, int8x16_t *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1BBB795E8[(int)result];
  int v5 = a2 + 2;
  if (v4 < 0)
  {
    int v6 = 18 - result;
    if ((int)result >= 18) {
      int v6 = result - 18;
    }
    int8x16_t v44 = vqtbl1q_s8(a2[2 * ((int)result < 18)], xmmword_1BBB798A0[4 * (uint64_t)v6 + 3]);
  }
  if ((int)result <= 17) {
    int v5 = a2;
  }
  int8x16_t v7 = a2[2 * ((int)result > 17)];
  int8x16_t v8 = v5[1];
  v45[0] = v7;
  v45[1] = v8;
  v44.i16[7] = a2[-1].i16[7];
  if ((v4 & 0x1F) != 0)
  {
    uint64_t v9 = 8;
    v10.i64[0] = 0x20002000200020;
    v10.i64[1] = 0x20002000200020;
    int16x8_t v11 = (uint16x8_t *)a4;
    int v12 = v4;
    do
    {
      int16x8_t v13 = vdupq_n_s16(v12 & 0x1F);
      *int16x8_t v11 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v45 + 2 * (v12 >> 5)), vsubq_s16(v10, v13)), *(int16x8_t *)((char *)v45 + 2 * (v12 >> 5) + 2), v13), 5uLL);
      v12 += v4;
      int16x8_t v11 = (uint16x8_t *)((char *)v11 + 2 * a3);
      --v9;
    }
    while (v9);
    if ((int)result < 18)
    {
      int16x8_t v14 = *(int16x8_t *)((char *)a4 + 2 * a3);
      int16x8_t v15 = *(int16x8_t *)((char *)a4 + 4 * a3);
      int16x8_t v16 = *(int16x8_t *)((char *)a4 + 6 * a3);
      int16x8_t v17 = *(int16x8_t *)((char *)a4 + 8 * a3);
      int16x8_t v18 = *(int16x8_t *)((char *)a4 + 10 * a3);
      int16x8_t v19 = *(int16x8_t *)((char *)a4 + 12 * a3);
      int32x4_t v20 = (int32x4_t)vtrn1q_s16(*a4, v14);
      int32x4_t v21 = (int32x4_t)vtrn2q_s16(*a4, v14);
      int32x4_t v22 = (int32x4_t)vtrn1q_s16(v15, v16);
      int16x8_t v23 = *(int16x8_t *)((char *)a4 + 14 * a3);
      int32x4_t v24 = (int32x4_t)vtrn2q_s16(v15, v16);
      int64x2_t v25 = (int64x2_t)vtrn1q_s32(v20, v22);
      int64x2_t v26 = (int64x2_t)vtrn2q_s32(v20, v22);
      int64x2_t v27 = (int64x2_t)vtrn1q_s32(v21, v24);
      int64x2_t v28 = (int64x2_t)vtrn2q_s32(v21, v24);
      int32x4_t v29 = (int32x4_t)vtrn1q_s16(v17, v18);
      int32x4_t v30 = (int32x4_t)vtrn2q_s16(v17, v18);
      int32x4_t v31 = (int32x4_t)vtrn1q_s16(v19, v23);
      int32x4_t v32 = (int32x4_t)vtrn2q_s16(v19, v23);
      int64x2_t v33 = (int64x2_t)vtrn1q_s32(v29, v31);
      int64x2_t v34 = (int64x2_t)vtrn2q_s32(v29, v31);
      int64x2_t v35 = (int64x2_t)vtrn1q_s32(v30, v32);
      int64x2_t v36 = (int64x2_t)vtrn2q_s32(v30, v32);
      *(int64x2_t *)a4 = vzip1q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 2 * a3) = vzip1q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 4 * a3) = vzip1q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 6 * a3) = vzip1q_s64(v28, v36);
      *(int64x2_t *)((char *)a4 + 8 * a3) = vzip2q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 10 * a3) = vzip2q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 12 * a3) = vzip2q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 14 * a3) = vzip2q_s64(v28, v36);
    }
  }
  else
  {
    if (v4 < 0)
    {
      int8x16_t v8 = v44;
      int8x16_t v37 = vextq_s8(v44, v7, 0xEuLL);
      int8x16_t v38 = vextq_s8(v44, v7, 0xCuLL);
      int8x16_t v39 = vextq_s8(v44, v7, 0xAuLL);
      int8x16_t v40 = vextq_s8(v44, v7, 8uLL);
      int8x16_t v41 = vextq_s8(v44, v7, 6uLL);
      int8x16_t v42 = vextq_s8(v44, v7, 4uLL);
      int8x16_t v43 = vextq_s8(v44, v7, 2uLL);
    }
    else
    {
      int8x16_t v37 = vextq_s8(v7, v8, 2uLL);
      int8x16_t v38 = vextq_s8(v7, v8, 4uLL);
      int8x16_t v39 = vextq_s8(v7, v8, 6uLL);
      int8x16_t v40 = vextq_s8(v7, v8, 8uLL);
      int8x16_t v41 = vextq_s8(v7, v8, 0xAuLL);
      int8x16_t v42 = vextq_s8(v7, v8, 0xCuLL);
      int8x16_t v43 = vextq_s8(v7, v8, 0xEuLL);
    }
    *a4 = (int16x8_t)v37;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v38;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v39;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v40;
    *(int8x16_t *)((char *)a4 + 8 * a3) = v41;
    *(int8x16_t *)((char *)a4 + 10 * a3) = v42;
    *(int8x16_t *)((char *)a4 + 12 * a3) = v43;
    *(int8x16_t *)((char *)a4 + 14 * a3) = v8;
  }
  return result;
}

uint64_t sub_1BBA4BFC4(uint64_t result, int8x16_t *a2, uint64_t a3, unint64_t *a4)
{
  signed int v4 = byte_1BBB795E8[(int)result];
  int v5 = 18 - result;
  if ((int)result >= 18) {
    int v5 = result - 18;
  }
  int16x8_t v6 = (int16x8_t)a2[(int)result > 17];
  if ((v4 & 0x1F) != 0)
  {
    if (v4 < 0)
    {
      int8x16_t v12 = a2[(int)result < 18];
      v12.i64[1] = *(uint64_t *)((char *)&a2[-1].i64[1] + 6);
      int16x8_t v6 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(v12, *(int8x16_t *)((char *)&xmmword_1BBB798A0[4 * (uint64_t)v5 + 3] + 8)), (int64x2_t)v6);
      unsigned int v7 = ~(v4 >> 4);
    }
    else
    {
      unsigned int v7 = (v4 >> 4) + 6;
    }
    int8x16_t v13 = *(int8x16_t *)((char *)&unk_1BBB79AA0 + 8 * v7);
    int8x16_t v14 = *(int8x16_t *)((char *)&unk_1BBB79AA0 + 8 * byte_1BBB79AF8[v5 - 1]);
    v15.i64[0] = 0x202020202020202;
    v15.i64[1] = 0x202020202020202;
    int16x8_t v16 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v13, v15));
    int16x8_t v17 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v14, v15));
    int16x8_t v18 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, v13);
    int16x8_t v19 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, v14);
    v20.i64[0] = 0x1F001F001F001FLL;
    v20.i64[1] = 0x1F001F001F001FLL;
    int32x4_t v21 = (int32x4_t)vandq_s8((int8x16_t)vmull_s8(vdup_n_s8(v4), (int8x8_t)0x404030302020101), v20);
    int16x8_t v22 = (int16x8_t)vzip2q_s32(v21, v21);
    int16x8_t v23 = (int16x8_t)vzip1q_s32(v21, v21);
    v24.i64[0] = 0x20002000200020;
    v24.i64[1] = 0x20002000200020;
    int16x8_t v25 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v23, v16), vsubq_s16(v24, v23), v18), 5uLL);
    int16x8_t v6 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v22, v17), vsubq_s16(v24, v22), v19), 5uLL);
    if ((int)result <= 17)
    {
      int16x8_t v26 = vzip1q_s16(v25, v6);
      int16x8_t v27 = vzip2q_s16(v25, v6);
      int16x8_t v25 = vzip1q_s16(v26, v27);
      int16x8_t v6 = vzip2q_s16(v26, v27);
    }
    *a4 = v25.i64[0];
    *(unint64_t *)((char *)a4 + 2 * a3) = v25.u64[1];
    *(unint64_t *)((char *)a4 + 4 * a3) = v6.i64[0];
  }
  else
  {
    if (result == 18)
    {
      int8x16_t v8 = a2[1];
      int16x8_t v6 = (int16x8_t)vqtbl1q_s8(*(int8x16_t *)((char *)a2 - 2), (int8x16_t)xmmword_1BBB6F770);
      unint64_t v9 = vextq_s8((int8x16_t)v6, v8, 0xEuLL).u64[0];
      unint64_t v10 = vextq_s8((int8x16_t)v6, v8, 0xCuLL).u64[0];
      unint64_t v11 = vextq_s8((int8x16_t)v6, v8, 0xAuLL).u64[0];
    }
    else
    {
      unint64_t v9 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 2uLL).u64[0];
      unint64_t v10 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL).u64[0];
      unint64_t v11 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 6uLL).u64[0];
    }
    *a4 = v9;
    *(unint64_t *)((char *)a4 + 2 * a3) = v10;
    *(unint64_t *)((char *)a4 + 4 * a3) = v11;
  }
  *(unint64_t *)((char *)a4 + 6 * a3) = v6.u64[1];
  return result;
}

void sub_1BBA4C150(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = 0;
  i16 = a2[4].i16;
  int16x8_t v6 = vld1q_dup_s16(i16);
  unsigned int v7 = a2[12].i16;
  int16x8_t v8 = vld1q_dup_s16(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F780);
  int16x8_t v10 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F790);
  int16x8_t v11 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F7A0);
  int16x8_t v12 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F7B0);
  int16x8_t v13 = a2[8];
  int16x8_t v14 = a2[9];
  int16x8_t v15 = a2[10];
  int16x8_t v16 = a2[11];
  int16x8_t v17 = vshlq_n_s16(v13, 5uLL);
  int16x8_t v18 = vshlq_n_s16(v14, 5uLL);
  int16x8_t v19 = vshlq_n_s16(v15, 5uLL);
  int16x8_t v20 = vshlq_n_s16(v16, 5uLL);
  int32x4_t v21 = a4 + 2;
  int16x8_t v22 = v6;
  do
  {
    int16x8_t v23 = &a2->i16[v4];
    int16x8_t v24 = vld1q_dup_s16(v23);
    int16x8_t v17 = vsubq_s16(v17, v13);
    int16x8_t v18 = vsubq_s16(v18, v14);
    v21[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v17, v9), v22), v24, (int16x8_t)xmmword_1BBB6F7C0), 6uLL);
    v21[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v18, v10), v22), v24, (int16x8_t)xmmword_1BBB6F7D0), 6uLL);
    int16x8_t v19 = vsubq_s16(v19, v15);
    int16x8_t v20 = vsubq_s16(v20, v16);
    *int32x4_t v21 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v19, v11), v22), v24, (int16x8_t)xmmword_1BBB6F7E0), 6uLL);
    v21[1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v20, v12), v22), v24, (int16x8_t)xmmword_1BBB6F7F0), 6uLL);
    int16x8_t v22 = vaddq_s16(v22, v6);
    ++v4;
    int32x4_t v21 = (uint16x8_t *)((char *)v21 + 2 * a3);
  }
  while (v4 != 32);
}

void sub_1BBA4C250(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = 0;
  i16 = a2[2].i16;
  int16x8_t v6 = vld1q_dup_s16(i16);
  unsigned int v7 = a2[6].i16;
  int16x8_t v8 = vld1q_dup_s16(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F780);
  int16x8_t v10 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F790);
  int16x8_t v11 = a2[4];
  int16x8_t v12 = a2[5];
  int16x8_t v13 = vshlq_n_s16(v11, 4uLL);
  int16x8_t v14 = vshlq_n_s16(v12, 4uLL);
  int16x8_t v15 = a4 + 1;
  int16x8_t v16 = v6;
  do
  {
    int16x8_t v17 = &a2->i16[v4];
    int16x8_t v18 = vld1q_dup_s16(v17);
    int16x8_t v13 = vsubq_s16(v13, v11);
    int16x8_t v14 = vsubq_s16(v14, v12);
    v15[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v13, v9), v16), v18, (int16x8_t)xmmword_1BBB6F7E0), 5uLL);
    *int16x8_t v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v14, v10), v16), v18, (int16x8_t)xmmword_1BBB6F7F0), 5uLL);
    int16x8_t v16 = vaddq_s16(v16, v6);
    ++v4;
    int16x8_t v15 = (uint16x8_t *)((char *)v15 + 2 * a3);
  }
  while (v4 != 16);
}

void sub_1BBA4C2F0(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  unint64_t v4 = 0;
  i16 = a2[1].i16;
  int16x8_t v6 = vld1q_dup_s16(i16);
  unsigned int v7 = a2[3].i16;
  int16x8_t v8 = vld1q_dup_s16(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F780);
  int16x8_t v10 = a2[2];
  int16x8_t v11 = vshlq_n_s16(v10, 3uLL);
  int16x8_t v12 = v6;
  do
  {
    int16x8_t v13 = &a2->i16[v4];
    int16x8_t v14 = vld1q_dup_s16(v13++);
    int16x8_t v15 = vsubq_s16(v11, v10);
    *a4 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v15, v9), v12), v14, (int16x8_t)xmmword_1BBB6F7F0), 4uLL);
    int16x8_t v16 = vaddq_s16(v12, v6);
    int16x8_t v17 = vld1q_dup_s16(v13);
    int16x8_t v11 = vsubq_s16(v15, v10);
    *(uint16x8_t *)((char *)a4 + 2 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v11, v9), v16), v17, (int16x8_t)xmmword_1BBB6F7F0), 4uLL);
    int16x8_t v12 = vaddq_s16(v16, v6);
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
    BOOL v18 = v4 >= 6;
    v4 += 2;
  }
  while (!v18);
}

uint16x8_t sub_1BBA4C388(uint64_t a1, int8x16x2_t *a2, uint64_t a3, void *a4)
{
  int8x16x2_t v9 = *a2;
  int64x2_t v4 = (int64x2_t)vmulq_s16((int16x8_t)vqtbl2q_s8(*a2, (int8x16_t)xmmword_1BBB6F800), (int16x8_t)xmmword_1BBB6F810);
  int16x8_t v5 = (int16x8_t)vdupq_laneq_s64(v4, 1);
  int16x8_t v6 = (int16x8_t)vdupq_lane_s64(v9.val[1].i64[0], 0);
  uint16x8_t v7 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1BBB6F820), (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_1BBB6F840, (int8x16_t)xmmword_1BBB6F820), v6), v5), (int16x8_t)vqtbl1q_s8(a2->val[0], (int8x16_t)xmmword_1BBB6F820), (int16x8_t)xmmword_1BBB6F840), 3uLL);
  uint16x8_t result = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1BBB6F830), (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_1BBB6F840, (int8x16_t)xmmword_1BBB6F830), v6), v5), (int16x8_t)vqtbl1q_s8(a2->val[0], (int8x16_t)xmmword_1BBB6F830), (int16x8_t)xmmword_1BBB6F840), 3uLL);
  *a4 = v7.i64[0];
  *(void *)((char *)a4 + 2 * a3) = v7.i64[1];
  *(void *)((char *)a4 + 4 * a3) = result.i64[0];
  *(void *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

void sub_1BBA4C420(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[16], *a2), vaddq_s16(a2[1], a2[17])), vaddq_s16(vaddq_s16(a2[2], a2[18]), a2[3])), vaddq_s16(vaddq_s16(vaddq_s16(a2[19], a2[4]), a2[20]), a2[5])), vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[21], a2[6]), a2[22]), a2[7]), a2[23])));
  int32x4_t v5 = vpaddq_s32(v4, v4);
  int16x8_t v6 = (int16x8_t)vrshrq_n_u32((uint32x4_t)vpaddq_s32(v5, v5), 7uLL);
  int16x8_t v7 = vtrn1q_s16(v6, v6);
  int16x8_t v8 = a4 + 4;
  uint64_t v9 = 64;
  do
  {
    v8[-4] = v7;
    v8[-3] = v7;
    v8[-2] = v7;
    v8[-1] = v7;
    *int16x8_t v8 = v7;
    v8[1] = v7;
    v8[2] = v7;
    v8[3] = v7;
    int16x8_t v8 = (int16x8_t *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1BBA4C4BC(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int16x8_t v4 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[8], *a2), vaddq_s16(a2[1], a2[9])), vaddq_s16(vaddq_s16(a2[2], a2[10]), a2[3])), a2[11]);
  int16x8_t v5 = vpaddq_s16(v4, v4);
  int16x8_t v6 = vpaddq_s16(v5, v5);
  uint16x8_t v7 = vrshrq_n_u16((uint16x8_t)vpaddq_s16(v6, v6), 6uLL);
  int16x8_t v8 = a4 + 2;
  uint64_t v9 = 32;
  do
  {
    v8[-2] = v7;
    v8[-1] = v7;
    *int16x8_t v8 = v7;
    v8[1] = v7;
    int16x8_t v8 = (uint16x8_t *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1BBA4C51C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  unint64_t v4 = 0;
  int16x8_t v5 = vaddq_s16(vaddq_s16(a2[4], *a2), vaddq_s16(a2[1], a2[5]));
  int16x8_t v6 = vpaddq_s16(v5, v5);
  int16x8_t v7 = vpaddq_s16(v6, v6);
  int16x8_t v8 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vpaddq_s16(v7, v7), 5uLL);
  uint64_t v9 = a4 + 1;
  *(int16x8_t *)((char *)v9 + 2 * a3) = v8;
  *(int16x8_t *)((char *)v9 + 4 * a3) = v8;
  *(int16x8_t *)((char *)v9 + 6 * a3) = v8;
  do
  {
    *(int16x8_t *)((char *)v9 + 8 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 10 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 12 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 14 * a3) = v8;
    v4 += 4;
    uint64_t v9 = (uint16x8_t *)((char *)v9 + 8 * a3);
  }
  while (v4 < 0xC);
  uint64_t v10 = 0;
  int16x8_t v11 = vaddq_s16(v8, v8);
  int16x8_t v12 = vaddq_s16(*a2, v8);
  uint16x8_t v13 = (uint16x8_t)vaddq_s16(v12, v11);
  v11.i16[0] = v12.i16[0];
  int8x16_t v14 = (int8x16_t)vrshrq_n_u16(v13, 2uLL);
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  int16x8_t v15 = vmulq_s16(v8, v12);
  uint16x8_t v16 = (uint16x8_t)vaddq_s16(v15, a2[5]);
  int8x16_t v17 = (int8x16_t)vrshrq_n_u16((uint16x8_t)vaddq_s16(v15, a2[1]), 2uLL);
  int16x8_t v18 = v8;
  v18.i16[0] = v17.i16[0];
  *a4 = vrshrq_n_u16((uint16x8_t)vaddq_s16(vaddq_s16(a2[4], v8), v11), 2uLL);
  a4[1] = vrshrq_n_u16(v16, 2uLL);
  *(int8x16_t *)((char *)a4 + 14 * a3) = vextq_s8(v14, (int8x16_t)v8, 0xEuLL);
  a4[a3] = (uint16x8_t)v18;
  *(int8x16_t *)((char *)a4 + 30 * a3) = vextq_s8(v17, (int8x16_t)v8, 0xEuLL);
  int8x16_t v19 = vextq_s8(v14, (int8x16_t)v8, 2uLL);
  int8x16_t v20 = vextq_s8(v17, (int8x16_t)v8, 2uLL);
  do
  {
    int32x4_t v21 = (int8x16_t *)((char *)&unk_1BBB79830 + 16 * v10);
    int8x16_t v22 = *v21;
    *(int8x16_t *)((char *)a4 + 2 * a3) = vqtbl1q_s8(v19, *v21);
    *(int8x16_t *)((char *)a4 + 18 * a3) = vqtbl1q_s8(v20, v22);
    int8x16_t v23 = v21[1];
    *(int8x16_t *)((char *)a4 + 4 * a3) = vqtbl1q_s8(v19, v23);
    *(int8x16_t *)((char *)a4 + 20 * a3) = vqtbl1q_s8(v20, v23);
    unint64_t v24 = v10 + 1;
    v10 += 2;
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
  }
  while (v24 < 5);
}

int8x16_t sub_1BBA4C680(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int16x8_t v4 = a2[2];
  int16x8_t v5 = vaddq_s16(v4, *a2);
  int16x8_t v6 = vpaddq_s16(v5, v5);
  int16x8_t v7 = vpaddq_s16(v6, v6);
  uint16x8_t v8 = (uint16x8_t)vpaddq_s16(v7, v7);
  int16x8_t v9 = (int16x8_t)vrshrq_n_u16(v8, 4uLL);
  int16x8_t v10 = vaddq_s16(v9, v9);
  int16x8_t v11 = (int16x8_t)vrsraq_n_u16((uint16x8_t)v4, v8, 4uLL);
  int16x8_t v12 = (int16x8_t)vrsraq_n_u16(*(uint16x8_t *)a2, v8, 4uLL);
  uint16x8_t v13 = (uint16x8_t)vaddq_s16(v12, v10);
  v10.i16[0] = v12.i16[0];
  uint16x8_t v14 = vrshrq_n_u16((uint16x8_t)vaddq_s16(v11, v10), 2uLL);
  int8x16_t v15 = (int8x16_t)vrshrq_n_u16(v13, 2uLL);
  int8x16_t v16 = vextq_s8(v15, (int8x16_t)v9, 2uLL);
  *a4 = v14;
  *(int8x16_t *)((char *)a4 + 2 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1BBB6F850);
  *(int8x16_t *)((char *)a4 + 4 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1BBB6F860);
  *(int8x16_t *)((char *)a4 + 6 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1BBB6F870);
  *(int8x16_t *)((char *)a4 + 8 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1BBB6F880);
  *(int8x16_t *)((char *)a4 + 10 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1BBB6F890);
  int8x16_t result = vextq_s8(v15, (int8x16_t)v9, 0xEuLL);
  *(int8x16_t *)((char *)a4 + 12 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1BBB6F8A0);
  *(int8x16_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

uint16x8_t sub_1BBA4C75C(uint64_t a1, int16x8_t *a2, uint64_t a3, void *a4)
{
  int16x8_t v4 = a2[1];
  int16x8_t v5 = (int16x8_t)vdupq_lane_s64(vaddq_s16(v4, *a2).i64[0], 0);
  int16x8_t v6 = vpaddq_s16(v5, v5);
  uint16x8_t v7 = (uint16x8_t)vpaddq_s16(v6, v6);
  int16x8_t v8 = (int16x8_t)vrshrq_n_u16(v7, 3uLL);
  int16x8_t v9 = vaddq_s16(v8, v8);
  *(int16x4_t *)v4.i8 = vadd_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v4.i8);
  v4.i64[1] = v9.i64[0];
  int8x16_t v10 = (int8x16_t)vzip1q_s64((int64x2_t)vrsraq_n_u16(*(uint16x8_t *)a2, v7, 3uLL), (int64x2_t)v9);
  int16x8_t v11 = (int16x8_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_1BBB6F760);
  uint16x8_t result = vrshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_1BBB6F750), v4), 2uLL);
  uint16x8_t v13 = vrshrq_n_u16((uint16x8_t)vaddq_s16(v9, v11), 2uLL);
  *a4 = result.i64[0];
  *(void *)((char *)a4 + 2 * a3) = result.i64[1];
  *(void *)((char *)a4 + 4 * a3) = v13.i64[0];
  *(void *)((char *)a4 + 6 * a3) = v13.i64[1];
  return result;
}

uint16x8_t sub_1BBA4C7D4(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int8x16_t v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[8].u16[0] + 2) >> 2;
  __int16 v4 = a1[7].i16[7];
  __int16 v5 = a1[15].i16[7];
  int8x16_t v6 = *a1;
  int8x16_t v7 = a1[8];
  int16x8_t v8 = a2 + 8;
  int16x8_t v9 = a1 + 9;
  unint64_t v10 = -8;
  int8x16_t v11 = v3;
  do
  {
    int8x16_t v12 = v7;
    int8x16_t v13 = v6;
    int8x16_t v6 = v9[-8];
    int8x16_t v14 = *v9++;
    int8x16_t v7 = v14;
    v8[-8] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v13, 0xEuLL), (uint16x8_t)vextq_s8(v13, v6, 2uLL)), (uint16x8_t)v13);
    v10 += 8;
    *v8++ = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v11, v12, 0xEuLL), (uint16x8_t)vextq_s8(v12, v14, 2uLL)), (uint16x8_t)v12);
    int8x16_t v3 = v13;
    int8x16_t v11 = v12;
  }
  while (v10 < 0x30);
  a2[7] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v13, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v6, 2uLL)), (uint16x8_t)v6);
  uint16x8_t result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v12, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[15] = result;
  a2[7].i16[7] = v4;
  a2[15].i16[7] = v5;
  return result;
}

void sub_1BBA4C898(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int v3 = a1[7].u16[7];
  int v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0) {
    int v4 = 2 * a1[3].u16[7] - (v3 + v2);
  }
  if (v4 > 0x1F) {
    goto LABEL_7;
  }
  int v5 = a1[15].u16[7];
  int v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0) {
    int v6 = 2 * a1[11].u16[7] - (v5 + v2);
  }
  if (v6 < 0x20)
  {
    int16x8_t v7 = vdupq_n_s16(v2);
    int16x8_t v8 = vdupq_n_s16(v5 - v2);
    a2[-1].i16[7] = v2;
    int16x8_t v9 = vdupq_n_s16(v3 - v2);
    int16x8_t v10 = vmulq_s16(v8, (int16x8_t)xmmword_1BBB6F780);
    int16x8_t v11 = vmulq_s16(v9, (int16x8_t)xmmword_1BBB6F780);
    int16x8_t v12 = vshlq_n_s16(v8, 3uLL);
    int16x8_t v13 = vshlq_n_s16(v9, 3uLL);
    int8x16_t v14 = (int16x8_t *)&a2[8];
    unint64_t v15 = -8;
    do
    {
      *int8x16_t v14 = vrsraq_n_s16(v7, v10, 6uLL);
      v14[-8] = vrsraq_n_s16(v7, v11, 6uLL);
      int16x8_t v10 = vaddq_s16(v10, v12);
      int16x8_t v11 = vaddq_s16(v11, v13);
      v15 += 8;
      ++v14;
    }
    while (v15 < 0x38);
  }
  else
  {
LABEL_7:
    sub_1BBA4C7D4(a1, a2);
  }
}

uint16x8_t sub_1BBA4C94C(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int8x16_t v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[4].u16[0] + 2) >> 2;
  __int16 v4 = a1[3].i16[7];
  __int16 v5 = a1[7].i16[7];
  int8x16_t v6 = *a1;
  int8x16_t v7 = a1[4];
  int16x8_t v8 = a2 + 4;
  int16x8_t v9 = a1 + 5;
  unint64_t v10 = -8;
  int8x16_t v11 = v3;
  do
  {
    int8x16_t v12 = v7;
    int8x16_t v13 = v6;
    int8x16_t v6 = v9[-4];
    int8x16_t v14 = *v9++;
    int8x16_t v7 = v14;
    v8[-4] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v13, 0xEuLL), (uint16x8_t)vextq_s8(v13, v6, 2uLL)), (uint16x8_t)v13);
    v10 += 8;
    *v8++ = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v11, v12, 0xEuLL), (uint16x8_t)vextq_s8(v12, v14, 2uLL)), (uint16x8_t)v12);
    int8x16_t v3 = v13;
    int8x16_t v11 = v12;
  }
  while (v10 < 0x10);
  a2[3] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v13, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v6, 2uLL)), (uint16x8_t)v6);
  uint16x8_t result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v12, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[7] = result;
  a2[3].i16[7] = v4;
  a2[7].i16[7] = v5;
  return result;
}

uint16x8_t sub_1BBA4CA10(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int8x16_t v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[2].u16[0] + 2) >> 2;
  LOWORD(v2) = a1[1].i16[7];
  unsigned __int16 v4 = a1[3].u16[7];
  int8x16_t v5 = a1[1];
  int8x16_t v6 = a1[2];
  int8x16_t v7 = a1[3];
  uint16x8_t v8 = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, *a1, 0xEuLL), (uint16x8_t)vextq_s8(*a1, v5, 2uLL)), *(uint16x8_t *)a1);
  uint16x8_t result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v7, 2uLL)), (uint16x8_t)v6);
  uint16x8_t v10 = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(*a1, v5, 0xEuLL), (uint16x8_t)vextq_s8(v5, v5, 2uLL)), (uint16x8_t)v5);
  *a2 = v8;
  a2[1] = v10;
  a2[2] = result;
  a2[3] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v6, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[1].i16[7] = v2;
  a2[3].i16[7] = v4;
  return result;
}

uint64_t sub_1BBA4CA98(int a1, __n128 *a2, uint64_t a3, double *a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  int v9 = byte_1BBB795E8[a1];
  int v10 = byte_1BBB795E8[a1];
  if (a1 >= 18)
  {
    if ((v9 & 0x80000000) == 0)
    {
      int16x8_t v18 = a2 + 8;
      uint64_t v11 = 15;
      uint64_t v12 = 14;
      uint64_t v13 = 13;
      uint64_t v14 = 12;
      uint64_t v15 = 11;
      uint64_t v16 = 10;
      uint64_t v17 = 9;
      goto LABEL_6;
    }
    if (v10 != 255)
    {
      int v29 = word_1BBB79710[a1 - 11];
      int v30 = v29 + v29 * v9 + 128;
      uint64_t v31 = byte_1BBB795E8[a1];
      do
      {
        v90[v31] = a2->n128_u16[(v30 >> 8) - 1];
        v30 += v29;
        ++v31;
      }
      while (v31 != -1);
      a7 = v86;
      a6 = v87;
      a5 = v88;
    }
    v89.n128_u16[7] = a2[-1].n128_u16[7];
    __n128 v91 = a7;
    __n128 v92 = a6;
    __n128 v93 = a5;
    __n128 v94 = v89;
    __n128 v32 = a2[8];
    __n128 v33 = a2[9];
    __n128 v34 = a2[10];
    __n128 v35 = a2[11];
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v11 = 7;
      uint64_t v12 = 6;
      uint64_t v13 = 5;
      uint64_t v14 = 4;
      uint64_t v15 = 3;
      uint64_t v16 = 2;
      uint64_t v17 = 1;
      int16x8_t v18 = a2;
LABEL_6:
      __n128 v19 = a2[v15];
      __n128 v20 = a2[v16];
      __n128 v21 = a2[v17];
      __n128 v22 = a2[v14];
      __n128 v91 = *v18;
      __n128 v92 = v21;
      __n128 v23 = a2[v13];
      __n128 v24 = a2[v12];
      __n128 v93 = v20;
      __n128 v94 = v19;
      __n128 v25 = a2[v11];
      __n128 v95 = v22;
      __n128 v96 = v23;
      __n128 v97 = v24;
      __n128 v98 = v25;
      int v9 = v10;
      v86.n128_u64[0] = 4 * a3;
      v86.n128_u64[1] = 8;
      goto LABEL_18;
    }
    if (v9 != -1)
    {
      int v26 = word_1BBB79710[a1 - 11];
      int v27 = v26 + v26 * v9 + 128;
      uint64_t v28 = byte_1BBB795E8[a1];
      do
      {
        v90[v28] = a2[7].n128_u16[(v27 >> 8) + 7];
        v27 += v26;
        ++v28;
      }
      while (v28 != -1);
      a7 = v86;
      a6 = v87;
      a5 = v88;
    }
    v89.n128_u16[7] = a2[-1].n128_u16[7];
    __n128 v91 = a7;
    __n128 v92 = a6;
    __n128 v93 = a5;
    __n128 v94 = v89;
    __n128 v32 = *a2;
    __n128 v33 = a2[1];
    __n128 v34 = a2[2];
    __n128 v35 = a2[3];
  }
  __n128 v95 = v32;
  __n128 v96 = v33;
  __n128 v97 = v34;
  __n128 v98 = v35;
  v86.n128_u64[0] = 4 * a3;
  v86.n128_u64[1] = 8;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_18:
    unint64_t v36 = v86.n128_u64[a1 > 17];
    uint64_t v37 = v86.n128_u64[a1 < 18] - 7 * v36;
    int v38 = 8;
    int v39 = v9;
    do
    {
      uint64_t v40 = v39 & 0x7F;
      uint64_t v41 = (uint64_t)v39 >> 7;
      int8x16_t v42 = (int8x8_t *)&v91.n128_u64[v39 >> 7];
      int8x8_t v43 = *v42;
      int8x8_t v44 = v42[1];
      int8x8_t v46 = v42[2];
      int8x8_t v45 = v42[3];
      int8x8_t v48 = v42[4];
      int8x8_t v47 = v42[5];
      int8x8_t v50 = v42[6];
      int8x8_t v49 = v42[7];
      int8x8_t v51 = v42[8];
      if (v40 >= 0x40)
      {
        int8x8_t v43 = vext_s8(v43, v44, 4uLL);
        int8x8_t v44 = vext_s8(v44, v46, 4uLL);
        int8x8_t v46 = vext_s8(v46, v45, 4uLL);
        int8x8_t v45 = vext_s8(v45, v48, 4uLL);
        int8x8_t v48 = vext_s8(v48, v47, 4uLL);
        int8x8_t v47 = vext_s8(v47, v50, 4uLL);
        int8x8_t v50 = vext_s8(v50, v49, 4uLL);
        int8x8_t v49 = vext_s8(v49, v51, 4uLL);
        int8x8_t v51 = vext_s8(v51, *(int8x8_t *)&v95.n128_i8[8 * v41 + 8], 4uLL);
        uint64_t v40 = (v40 - 64);
      }
      if (v40 >= 0x20)
      {
        int8x8_t v43 = vext_s8(v43, v44, 2uLL);
        int8x8_t v44 = vext_s8(v44, v46, 2uLL);
        int8x8_t v46 = vext_s8(v46, v45, 2uLL);
        int8x8_t v45 = vext_s8(v45, v48, 2uLL);
        int8x8_t v48 = vext_s8(v48, v47, 2uLL);
        int8x8_t v47 = vext_s8(v47, v50, 2uLL);
        int8x8_t v50 = vext_s8(v50, v49, 2uLL);
        int8x8_t v49 = vext_s8(v49, v51, 2uLL);
        int8x8_t v51 = vext_s8(v51, *(int8x8_t *)&v95.n128_i8[8 * v41 + 8], 2uLL);
        uint64_t v40 = (v40 - 32);
      }
      BOOL v52 = a1 < 18;
      sub_1BBA4D2B0(v40, v9, v52, a3, a4, v43, v44);
      int64x2_t v53 = (double *)((char *)a4 + v36);
      sub_1BBA4D2B0(v40, v9, v52, a3, v53, v44, v46);
      int64x2_t v54 = (double *)((char *)v53 + v36);
      sub_1BBA4D2B0(v40, v9, v52, a3, v54, v46, v45);
      int64x2_t v55 = (double *)((char *)v54 + v36);
      sub_1BBA4D2B0(v40, v9, v52, a3, v55, v45, v48);
      int64x2_t v56 = (double *)((char *)v55 + v36);
      sub_1BBA4D2B0(v40, v9, v52, a3, v56, v48, v47);
      int32x4_t v57 = (double *)((char *)v56 + v36);
      sub_1BBA4D2B0(v40, v9, v52, a3, v57, v47, v50);
      int32x4_t v58 = (double *)((char *)v57 + v36);
      sub_1BBA4D2B0(v40, v9, v52, a3, v58, v50, v49);
      int32x4_t v59 = (double *)((char *)v58 + v36);
      uint64_t result = sub_1BBA4D2B0(v40, v9, v52, a3, v59, v49, v51);
      v39 += 4 * v9;
      a4 = (double *)((char *)v59 + v37);
      --v38;
    }
    while (v38);
    return result;
  }
  unint64_t v61 = v86.n128_u64[a1 > 17];
  uint64_t v62 = v86.n128_u64[a1 < 18] - 7 * v61;
  int v63 = 8;
  int v64 = v9;
  do
  {
    long long v65 = &v94.n128_u64[(v64 >> 7) + 1];
    int8x8_t v67 = (int8x8_t)v65[8];
    int8x8_t v66 = (int8x8_t)v65[9];
    uint64_t v68 = (uint64_t)v64 >> 7;
    uint64_t v69 = v64 | 0xFFFFFF80;
    int8x8_t v71 = (int8x8_t)v65[6];
    int8x8_t v70 = (int8x8_t)v65[7];
    int8x8_t v73 = (int8x8_t)v65[4];
    int8x8_t v72 = (int8x8_t)v65[5];
    int8x8_t v75 = (int8x8_t)v65[2];
    int8x8_t v74 = (int8x8_t)v65[3];
    int8x8_t v76 = (int8x8_t)v65[1];
    if (v69 <= 0xFFFFFFBF)
    {
      int8x8_t v66 = vext_s8(v67, v66, 4uLL);
      int8x8_t v67 = vext_s8(v70, v67, 4uLL);
      int8x8_t v70 = vext_s8(v71, v70, 4uLL);
      int8x8_t v71 = vext_s8(v72, v71, 4uLL);
      int8x8_t v72 = vext_s8(v73, v72, 4uLL);
      int8x8_t v73 = vext_s8(v74, v73, 4uLL);
      int8x8_t v74 = vext_s8(v75, v74, 4uLL);
      int8x8_t v75 = vext_s8(v76, v75, 4uLL);
      int8x8_t v76 = vext_s8(*(int8x8_t *)&v94.n128_i8[8 * v68 + 8], v76, 4uLL);
      uint64_t v69 = (v69 + 64);
    }
    if (v69 <= 0xFFFFFFDF)
    {
      int8x8_t v66 = vext_s8(v67, v66, 6uLL);
      int8x8_t v67 = vext_s8(v70, v67, 6uLL);
      int8x8_t v70 = vext_s8(v71, v70, 6uLL);
      int8x8_t v71 = vext_s8(v72, v71, 6uLL);
      int8x8_t v72 = vext_s8(v73, v72, 6uLL);
      int8x8_t v73 = vext_s8(v74, v73, 6uLL);
      int8x8_t v74 = vext_s8(v75, v74, 6uLL);
      int8x8_t v75 = vext_s8(v76, v75, 6uLL);
      int8x8_t v76 = vext_s8(*(int8x8_t *)&v94.n128_i8[8 * v68 + 8], v76, 6uLL);
      uint64_t v69 = (v69 + 32);
    }
    BOOL v77 = a1 < 18;
    sub_1BBA4D120(v69, v9, v77, a3, a4, v76, v75);
    BOOL v78 = (double *)((char *)a4 + v61);
    sub_1BBA4D120(v69, v9, v77, a3, v78, v75, v74);
    uint64_t v79 = (double *)((char *)v78 + v61);
    sub_1BBA4D120(v69, v9, v77, a3, v79, v74, v73);
    __int16 v80 = (double *)((char *)v79 + v61);
    sub_1BBA4D120(v69, v9, v77, a3, v80, v73, v72);
    int v81 = (double *)((char *)v80 + v61);
    sub_1BBA4D120(v69, v9, v77, a3, v81, v72, v71);
    uint64_t v82 = (double *)((char *)v81 + v61);
    sub_1BBA4D120(v69, v9, v77, a3, v82, v71, v70);
    int v83 = (double *)((char *)v82 + v61);
    sub_1BBA4D120(v69, v9, v77, a3, v83, v70, v67);
    uint64_t v84 = (double *)((char *)v83 + v61);
    uint64_t result = sub_1BBA4D120(v69, v9, v77, a3, v84, v67, v66);
    v64 += 4 * v9;
    a4 = (double *)((char *)v84 + v62);
    --v63;
  }
  while (v63);
  return result;
}

uint64_t sub_1BBA4D120(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  v30[5] = *MEMORY[0x1E4F143B8];
  v30[0] = a7;
  v30[1] = vext_s8(a6, a7, 6uLL);
  v30[2] = vext_s8(a6, a7, 4uLL);
  v30[3] = vext_s8(a6, a7, 2uLL);
  v30[4] = a6;
  int v7 = (int)result >> 5;
  if ((int)result >> 5 < 0) {
    int v7 = -v7;
  }
  int16x8_t v8 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v7 - 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v30[v7], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F)));
  int v9 = a2 + result;
  int v10 = (a2 + (int)result) >> 5;
  if (v10 < 0) {
    int v10 = -v10;
  }
  double v11 = COERCE_DOUBLE(vrshrn_n_s16(v8, 5uLL));
  int16x8_t v12 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v10 - 1], (uint8x8_t)vdup_n_s8(v9 & 0x1F)), (uint8x8_t)v30[v10], (uint8x8_t)vdup_n_s8(32 - (v9 & 0x1Fu)));
  int v13 = v9 + a2;
  int v14 = v13 >> 5;
  if (v13 >> 5 < 0) {
    int v14 = -v14;
  }
  double v15 = COERCE_DOUBLE(vrshrn_n_s16(v12, 5uLL));
  int16x8_t v16 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v14 - 1], (uint8x8_t)vdup_n_s8(v13 & 0x1F)), (uint8x8_t)v30[v14], (uint8x8_t)vdup_n_s8(32 - (v13 & 0x1Fu)));
  int v17 = v13 + a2;
  int v18 = v17 >> 5;
  if (v17 >> 5 < 0) {
    int v18 = -v18;
  }
  double v19 = COERCE_DOUBLE(vrshrn_n_s16(v16, 5uLL));
  double v20 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v18 - 1], (uint8x8_t)vdup_n_s8(v17 & 0x1F)), (uint8x8_t)v30[v18], (uint8x8_t)vdup_n_s8(32 - (v17 & 0x1Fu))), 5uLL));
  int32x2_t v21 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v15);
  int32x2_t v22 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v15);
  int32x2_t v23 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v20);
  int32x2_t v24 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v20);
  double v25 = COERCE_DOUBLE(vzip1_s32(v21, v23));
  double v26 = COERCE_DOUBLE(vzip2_s32(v21, v23));
  double v27 = COERCE_DOUBLE(vzip1_s32(v22, v24));
  double v28 = COERCE_DOUBLE(vzip2_s32(v22, v24));
  if (a3)
  {
    double v20 = v28;
    double v19 = v26;
    double v15 = v27;
    double v11 = v25;
  }
  *a5 = v11;
  *(double *)((char *)a5 + a4) = v15;
  int v29 = (double *)((char *)a5 + a4 + a4);
  *int v29 = v19;
  *(double *)((char *)v29 + a4) = v20;
  return result;
}

uint64_t sub_1BBA4D2B0(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  v21[5] = *MEMORY[0x1E4F143B8];
  v21[0] = a6;
  v21[1] = vext_s8(a6, a7, 2uLL);
  v21[2] = vext_s8(a6, a7, 4uLL);
  v21[3] = vext_s8(a6, a7, 6uLL);
  v21[4] = a7;
  double v7 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v21[(result >> 5) + 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v21[result >> 5], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F))), 5uLL));
  unsigned int v8 = a2 + result + a2;
  double v9 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v21[((a2 + result) >> 5) + 1], (uint8x8_t)vdup_n_s8((a2 + result) & 0x1F)), (uint8x8_t)v21[(a2 + result) >> 5], (uint8x8_t)vdup_n_s8(32 - ((a2 + result) & 0x1F))), 5uLL));
  double v10 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v21[(v8 >> 5) + 1], (uint8x8_t)vdup_n_s8(v8 & 0x1F)), (uint8x8_t)v21[v8 >> 5], (uint8x8_t)vdup_n_s8(32 - (v8 & 0x1F))), 5uLL));
  double v11 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v21[((v8 + a2) >> 5) + 1], (uint8x8_t)vdup_n_s8((v8 + a2) & 0x1F)), (uint8x8_t)v21[(v8 + a2) >> 5], (uint8x8_t)vdup_n_s8(32 - ((v8 + a2) & 0x1F))), 5uLL));
  int32x2_t v12 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v7, *(int16x4_t *)&v9);
  int32x2_t v13 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v7, *(int16x4_t *)&v9);
  int32x2_t v14 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v10, *(int16x4_t *)&v11);
  int32x2_t v15 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v10, *(int16x4_t *)&v11);
  double v16 = COERCE_DOUBLE(vzip1_s32(v12, v14));
  double v17 = COERCE_DOUBLE(vzip2_s32(v12, v14));
  double v18 = COERCE_DOUBLE(vzip1_s32(v13, v15));
  double v19 = COERCE_DOUBLE(vzip2_s32(v13, v15));
  if (a3)
  {
    double v11 = v19;
    double v10 = v17;
    double v9 = v18;
    double v7 = v16;
  }
  *a5 = v7;
  *(double *)((char *)a5 + a4) = v9;
  double v20 = (double *)((char *)a5 + a4 + a4);
  *double v20 = v10;
  *(double *)((char *)v20 + a4) = v11;
  return result;
}

uint64_t sub_1BBA4D420(int a1, int8x16x2_t *a2, uint64_t a3, double *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v6 = byte_1BBB795E8[a1];
  int v7 = (char)v6;
  if (a1 >= 18)
  {
    if ((v6 & 0x80) == 0)
    {
      val = a2[2].val;
      uint64_t v8 = 7;
      uint64_t v9 = 3;
      uint64_t v10 = 5;
LABEL_6:
      int8x16_t v12 = a2->val[v8];
      int8x16_t v13 = a2[v9].val[0];
      int8x16_t v14 = a2->val[v10];
      int8x16_t v51 = *val;
      int8x16_t v52 = v14;
      uint64_t v49 = 4 * a3;
      uint64_t v50 = 8;
      uint64_t v15 = *(&v49 + (a1 > 17));
      uint64_t v46 = *(&v49 + (a1 < 18));
      int8x16_t v53 = v13;
      int8x16_t v54 = v12;
      int v16 = 4;
      unsigned int v17 = v6;
      do
      {
        uint64_t v18 = v17 & 0x7F;
        int8x8_t v19 = *(int8x8_t *)&v51.i8[8 * (v17 >> 7)];
        int8x8_t v20 = (int8x8_t)v51.u64[(v17 >> 7) + 1];
        int8x8_t v21 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 16);
        int8x8_t v22 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 24);
        int8x8_t v23 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 32);
        if (v18 >= 0x40)
        {
          int8x8_t v19 = vext_s8(v19, v20, 4uLL);
          int8x8_t v20 = vext_s8(v20, v21, 4uLL);
          int8x8_t v21 = vext_s8(v21, v22, 4uLL);
          int8x8_t v22 = vext_s8(v22, v23, 4uLL);
          int8x8_t v23 = vext_s8(v23, *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 40), 4uLL);
          uint64_t v18 = (v18 - 64);
        }
        BOOL v24 = a1 < 18;
        sub_1BBA4D2B0(v18, v6, v24, a3, a4, v19, v20);
        sub_1BBA4D2B0(v18, v6, v24, a3, (double *)((char *)a4 + v15), v20, v21);
        sub_1BBA4D2B0(v18, v6, v24, a3, (double *)((char *)a4 + 2 * v15), v21, v22);
        uint64_t result = sub_1BBA4D2B0(v18, v6, v24, a3, (double *)((char *)a4 + 3 * v15), v22, v23);
        a4 = (double *)((char *)a4 + v46);
        v17 += 4 * v6;
        --v16;
      }
      while (v16);
      return result;
    }
    uint64_t v31 = (int8x16_t *)((char *)&unk_1BBB79730 + 32 * (a1 - 18));
    int8x16_t v32 = vqtbl2q_s8(*a2, v31[1]);
    int8x16_t v51 = vqtbl2q_s8(*a2, *v31);
    int8x16_t v33 = vextq_s8(v32, v32, 8uLL);
    v33.i16[3] = a2[-1].val[1].i16[7];
    v52.i64[0] = v32.i64[0];
    v52.i64[1] = v33.i64[0];
    int v30 = a2 + 2;
    uint64_t v29 = 5;
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      uint64_t v8 = 3;
      uint64_t v9 = 1;
      uint64_t v10 = 1;
      val = (int8x16_t *)a2;
      goto LABEL_6;
    }
    double v26 = (int8x16_t *)((char *)&unk_1BBB79730 + 32 * (18 - a1));
    int8x16x2_t v56 = a2[2];
    int8x16_t v27 = vqtbl2q_s8(v56, v26[1]);
    int8x16_t v51 = vqtbl2q_s8(v56, *v26);
    int8x16_t v28 = vextq_s8(v27, v27, 8uLL);
    v28.i16[3] = a2[-1].val[1].i16[7];
    v52.i64[0] = v27.i64[0];
    v52.i64[1] = v28.i64[0];
    uint64_t v29 = 1;
    int v30 = a2;
  }
  int8x16_t v34 = a2->val[v29];
  int8x16_t v53 = v30->val[0];
  int8x16_t v54 = v34;
  uint64_t v49 = 4 * a3;
  uint64_t v50 = 8;
  uint64_t v35 = *(&v49 + (a1 > 17));
  uint64_t v47 = *(&v49 + (a1 < 18));
  int v36 = 4 * (char)v6;
  int v37 = 4;
  int v6 = (char)v6;
  do
  {
    uint64_t v38 = v6 | 0xFFFFFF80;
    int v39 = &v52.i64[(v6 >> 7) + 1];
    int8x8_t v41 = (int8x8_t)v39[4];
    int8x8_t v40 = (int8x8_t)v39[5];
    int8x8_t v43 = (int8x8_t)v39[2];
    int8x8_t v42 = (int8x8_t)v39[3];
    int8x8_t v44 = (int8x8_t)v39[1];
    if (v38 <= 0xFFFFFFBF)
    {
      int8x8_t v40 = vext_s8(v41, v40, 4uLL);
      int8x8_t v41 = vext_s8(v42, v41, 4uLL);
      int8x8_t v42 = vext_s8(v43, v42, 4uLL);
      int8x8_t v43 = vext_s8(v44, v43, 4uLL);
      int8x8_t v44 = vext_s8((int8x8_t)v52.u64[((uint64_t)v6 >> 7) + 1], v44, 4uLL);
      uint64_t v38 = (v38 + 64);
    }
    BOOL v45 = a1 < 18;
    sub_1BBA4D120(v38, v7, v45, a3, a4, v44, v43);
    sub_1BBA4D120(v38, v7, v45, a3, (double *)((char *)a4 + v35), v43, v42);
    sub_1BBA4D120(v38, v7, v45, a3, (double *)((char *)a4 + 2 * v35), v42, v41);
    uint64_t result = sub_1BBA4D120(v38, v7, v45, a3, (double *)((char *)a4 + 3 * v35), v41, v40);
    a4 = (double *)((char *)a4 + v47);
    v6 += v36;
    --v37;
  }
  while (v37);
  return result;
}

uint64_t sub_1BBA4D804(int a1, int8x16_t *a2, uint64_t a3, double *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = byte_1BBB795E8[a1];
  uint64_t v8 = byte_1BBB795E8[a1];
  if (a1 >= 18)
  {
    if ((v7 & 0x80000000) == 0)
    {
      int8x16_t v9 = a2[2];
      int8x16_t v10 = a2[3];
      goto LABEL_6;
    }
    int8x16_t v26 = vqtbl1q_s8(*a2, xmmword_1BBB79730[2 * (a1 - 18) + 1]);
    int8x16_t v24 = vextq_s8(v26, v26, 8uLL);
    v24.i16[3] = a2[-1].i16[7];
    v43.i64[0] = v26.i64[0];
    v43.i64[1] = v24.i64[0];
    int8x16_t v25 = a2[2];
  }
  else
  {
    if ((v8 & 0x80) == 0)
    {
      int8x16_t v9 = *a2;
      int8x16_t v10 = a2[1];
LABEL_6:
      int8x16_t v43 = v9;
      v44.i64[0] = v10.i64[0];
      int8x8_t v37 = (int8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
      int8x8_t v39 = *(int8x8_t *)v10.i8;
      uint64_t v11 = v7;
      BOOL v12 = a1 > 17;
      BOOL v13 = a1 < 18;
      v44.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
      uint64_t v41 = 4 * a3;
      uint64_t v42 = 8;
      sub_1BBA4D2B0(v8, v8, v13, a3, a4, *(int8x8_t *)v9.i8, v37);
      uint64_t v14 = *(&v41 + v12);
      sub_1BBA4D2B0(v8, v8, a1 < 18, a3, (double *)((char *)a4 + v14), v37, v39);
      uint64_t v15 = (double *)((char *)a4 + *(&v41 + v13));
      unint64_t v16 = (unint64_t)(5 * v11) >> 7;
      uint64_t v17 = (5 * v11) & 0x7F;
      int8x8_t v18 = *(int8x8_t *)&v43.i8[8 * v16];
      int8x8_t v19 = *(int8x8_t *)&v43.i8[8 * (v16 + 1)];
      int8x8_t v20 = *(int8x8_t *)&v43.i8[8 * (v16 + 2)];
      if (v17 >= 0x40)
      {
        int8x8_t v18 = vext_s8(v18, v19, 4uLL);
        int8x8_t v19 = vext_s8(v19, v20, 4uLL);
        int8x8_t v20 = vext_s8(v20, *(int8x8_t *)&v43.i8[8 * (v16 + 3)], 4uLL);
        uint64_t v17 = (v17 - 64);
      }
      BOOL v21 = a1 < 18;
      sub_1BBA4D2B0(v17, v8, v21, a3, v15, v18, v19);
      return sub_1BBA4D2B0(v17, v8, v21, a3, (double *)((char *)v15 + v14), v19, v20);
    }
    int8x16_t v23 = vqtbl1q_s8(a2[2], xmmword_1BBB79730[2 * (18 - a1) + 1]);
    int8x16_t v24 = vextq_s8(v23, v23, 8uLL);
    v24.i16[3] = a2[-1].i16[7];
    v43.i64[0] = v23.i64[0];
    v43.i64[1] = v24.i64[0];
    int8x16_t v25 = *a2;
  }
  int8x16_t v44 = v25;
  int8x8_t v38 = (int8x8_t)vextq_s8(v25, v25, 8uLL).u64[0];
  int8x8_t v40 = *(int8x8_t *)v25.i8;
  BOOL v27 = a1 > 17;
  BOOL v28 = a1 < 18;
  uint64_t v41 = 4 * a3;
  uint64_t v42 = 8;
  sub_1BBA4D120(v7, v7, v28, a3, a4, *(int8x8_t *)v24.i8, *(int8x8_t *)v25.i8);
  uint64_t v29 = *(&v41 + v27);
  sub_1BBA4D120(v7, v7, a1 < 18, a3, (double *)((char *)a4 + v29), v40, v38);
  int v30 = (double *)((char *)a4 + *(&v41 + v28));
  uint64_t v31 = (5 * v7) | 0xFFFFFF80;
  int8x16_t v32 = &v43.i64[((5 * (int)v7) >> 7) + 1];
  int8x8_t v34 = (int8x8_t)v32[2];
  int8x8_t v33 = (int8x8_t)v32[3];
  int8x8_t v35 = (int8x8_t)v32[1];
  if (v31 <= 0xFFFFFFBF)
  {
    int8x8_t v33 = vext_s8(v34, v33, 4uLL);
    int8x8_t v34 = vext_s8(v35, v34, 4uLL);
    int8x8_t v35 = vext_s8((int8x8_t)v43.u64[((uint64_t)(5 * (int)v7) >> 7) + 1], v35, 4uLL);
    uint64_t v31 = (v31 + 64);
  }
  BOOL v36 = a1 < 18;
  sub_1BBA4D120(v31, v7, v36, a3, v30, v35, v34);

  return sub_1BBA4D120(v31, v7, v36, a3, (double *)((char *)v30 + v29), v34, v33);
}

uint64_t sub_1BBA4DB54(int a1, int8x8_t *a2, uint64_t a3, double *a4, int8x16_t a5)
{
  int v5 = byte_1BBB795E8[a1];
  int v6 = byte_1BBB795E8[a1];
  if (a1 >= 18)
  {
    if (v5 < 0)
    {
      *(int8x8_t *)a5.i8 = *a2;
      *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, (int8x8_t)xmmword_1BBB79730[2 * (a1 - 18) + 1].u64[1]);
      a5.i16[3] = a2[-1].i16[3];
      a2 += 2;
      return sub_1BBA4D120(byte_1BBB795E8[a1], v5, a1 < 18, a3, a4, *(int8x8_t *)a5.i8, *a2);
    }
    a2 += 2;
    return sub_1BBA4D2B0(byte_1BBB795E8[a1], v6, a1 < 18, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
  }
  if ((v6 & 0x80) == 0) {
    return sub_1BBA4D2B0(byte_1BBB795E8[a1], v6, a1 < 18, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
  }
  *(int8x8_t *)a5.i8 = a2[2];
  *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, (int8x8_t)xmmword_1BBB79730[2 * (18 - a1) + 1].u64[1]);
  a5.i16[3] = a2[-1].i16[3];
  return sub_1BBA4D120(byte_1BBB795E8[a1], v5, a1 < 18, a3, a4, *(int8x8_t *)a5.i8, *a2);
}

void sub_1BBA4DC04(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  unsigned __int16 v4 = a2 + 16;
  int8x16x2_t v11 = vld2q_s8(a2);
  int8x16x2_t v12 = vld2q_s8(v4);
  int v5 = a2 + 128;
  int8x16x2_t v13 = vld2q_s8(v5);
  int v6 = a2 + 144;
  int8x16x2_t v14 = vld2q_s8(v6);
  int8x16_t v7 = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v11.val[0].i8), (uint8x16_t)v11.val[0]), (uint8x16_t)v12.val[0]), *(uint8x8_t *)v12.val[0].i8), (uint8x16_t)v13.val[0]), *(uint8x8_t *)v13.val[0].i8), (uint8x16_t)v14.val[0]), *(uint8x8_t *)v14.val[0].i8);
  v11.val[0] = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v11.val[1].i8), (uint8x16_t)v11.val[1]), (uint8x16_t)v12.val[1]), *(uint8x8_t *)v12.val[1].i8), (uint8x16_t)v13.val[1]), *(uint8x8_t *)v13.val[1].i8), (uint8x16_t)v14.val[1]), *(uint8x8_t *)v14.val[1].i8);
  *(int16x4_t *)v11.val[0].i8 = vpadd_s16(vadd_s16(*(int16x4_t *)v7.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), vadd_s16(*(int16x4_t *)v11.val[0].i8, (int16x4_t)*(_OWORD *)&vextq_s8(v11.val[0], v11.val[0], 8uLL)));
  *(int16x4_t *)v11.val[1].i8 = vpadd_s16(*(int16x4_t *)v11.val[0].i8, *(int16x4_t *)v11.val[0].i8);
  v11.val[1].i64[1] = v11.val[1].i64[0];
  uint8x16_t v8 = vqrshrn_high_n_u16(vqrshrn_n_u16((uint16x8_t)v11.val[1], 6uLL), (uint16x8_t)v11.val[1], 6uLL);
  int8x16_t v9 = a4 + 2;
  int v10 = 32;
  do
  {
    v9[-2] = v8;
    v9[-1] = v8;
    *int8x16_t v9 = v8;
    v9[1] = v8;
    int8x16_t v9 = (uint8x16_t *)((char *)v9 + a3);
    --v10;
  }
  while (v10);
}

void sub_1BBA4DCA4(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  unsigned __int16 v4 = a2 + 64;
  int8x16x2_t v9 = vld2q_s8(a2);
  int8x16x2_t v10 = vld2q_s8(v4);
  int8x16_t v5 = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v9.val[0].i8), (uint8x16_t)v9.val[0]), (uint8x16_t)v10.val[0]), *(uint8x8_t *)v10.val[0].i8);
  v9.val[0] = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v9.val[1].i8), (uint8x16_t)v9.val[1]), (uint8x16_t)v10.val[1]), *(uint8x8_t *)v10.val[1].i8);
  *(int16x4_t *)v9.val[0].i8 = vpadd_s16(vadd_s16(*(int16x4_t *)v5.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)), vadd_s16(*(int16x4_t *)v9.val[0].i8, (int16x4_t)*(_OWORD *)&vextq_s8(v9.val[0], v9.val[0], 8uLL)));
  *(int16x4_t *)v9.val[1].i8 = vpadd_s16(*(int16x4_t *)v9.val[0].i8, *(int16x4_t *)v9.val[0].i8);
  v9.val[1].i64[1] = v9.val[1].i64[0];
  uint8x16_t v6 = vqrshrn_high_n_u16(vqrshrn_n_u16((uint16x8_t)v9.val[1], 5uLL), (uint16x8_t)v9.val[1], 5uLL);
  int8x16_t v7 = a4 + 1;
  int v8 = 16;
  do
  {
    v7[-1] = v6;
    *int8x16_t v7 = v6;
    int8x16_t v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

void sub_1BBA4DD10(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  int8x8x2_t v8 = vld2_s8(a2);
  unsigned __int16 v4 = a2 + 32;
  int8x8x2_t v9 = vld2_s8(v4);
  v8.val[0] = (int8x8_t)vpadd_s16((int16x4_t)vpadal_u8(vpaddl_u8((uint8x8_t)v9.val[0]), (uint8x8_t)v8.val[0]), (int16x4_t)vpadal_u8(vpaddl_u8((uint8x8_t)v9.val[1]), (uint8x8_t)v8.val[1]));
  v8.val[1] = (int8x8_t)vpadd_s16((int16x4_t)v8.val[0], (int16x4_t)v8.val[0]);
  int8x8_t v5 = v8.val[1];
  uint8x16_t v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(*(uint16x8_t *)((char *)&v8 + 8), 4uLL), *(uint16x8_t *)((char *)&v8 + 8), 4uLL);
  int v7 = 8;
  do
  {
    *a4 = v6;
    a4 = (uint8x16_t *)((char *)a4 + a3);
    --v7;
  }
  while (v7);
}

uint8x8_t sub_1BBA4DD58(uint64_t a1, int8x8_t *a2, uint64_t a3, uint8x8_t *a4)
{
  int16x4_t v4 = vpadd_s16((int16x4_t)vpaddl_u8((uint8x8_t)vuzp1_s8(*a2, a2[2])), (int16x4_t)vpaddl_u8((uint8x8_t)vuzp2_s8(*a2, a2[2])));
  *(int16x4_t *)v5.i8 = vpadd_s16(v4, v4);
  v5.i64[1] = v5.i64[0];
  uint8x8_t result = vqrshrn_n_u16(v5, 3uLL);
  *a4 = result;
  *(uint8x8_t *)((char *)a4 + a3) = result;
  int v7 = (uint8x8_t *)((char *)a4 + a3 + a3);
  *int v7 = result;
  *(uint8x8_t *)((char *)v7 + a3) = result;
  return result;
}

int16x8_t sub_1BBA4DD9C(uint64_t a1, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  v23[0] = *a2;
  v23[1] = v5;
  long long v6 = a2[3];
  v23[2] = a2[2];
  v23[3] = v6;
  do
  {
    int16x8_t v7 = (int16x8_t)v23[v4];
    int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 0);
    int16x8_t v9 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 1);
    int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 2);
    int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 3);
    int16x8_t v12 = vdupq_laneq_s16(v7, 4);
    int16x8_t v13 = vdupq_laneq_s16(v7, 5);
    int16x8_t v14 = vdupq_laneq_s16(v7, 6);
    int16x8_t result = vdupq_laneq_s16(v7, 7);
    *a4 = v8;
    a4[1] = v8;
    a4[2] = v8;
    a4[3] = v8;
    unint64_t v16 = (int16x8_t *)((char *)a4 + a3);
    *unint64_t v16 = v9;
    v16[1] = v9;
    v16[2] = v9;
    v16[3] = v9;
    uint64_t v17 = (int16x8_t *)((char *)a4 + a3 + a3);
    *uint64_t v17 = v10;
    v17[1] = v10;
    v17[2] = v10;
    v17[3] = v10;
    int8x8_t v18 = (int16x8_t *)((char *)v17 + a3);
    *int8x8_t v18 = v11;
    v18[1] = v11;
    v18[2] = v11;
    v18[3] = v11;
    int8x8_t v19 = (int16x8_t *)((char *)v18 + a3);
    *int8x8_t v19 = v12;
    v19[1] = v12;
    v19[2] = v12;
    v19[3] = v12;
    int8x8_t v20 = (int16x8_t *)((char *)v19 + a3);
    *int8x8_t v20 = v13;
    v20[1] = v13;
    v20[2] = v13;
    v20[3] = v13;
    BOOL v21 = (int16x8_t *)((char *)v20 + a3);
    *BOOL v21 = v14;
    v21[1] = v14;
    v21[2] = v14;
    v21[3] = v14;
    int8x8_t v22 = (int16x8_t *)((char *)v21 + a3);
    *int8x8_t v22 = result;
    v22[1] = result;
    v22[2] = result;
    v22[3] = result;
    a4 = (int16x8_t *)((char *)v22 + a3);
    ++v4;
  }
  while (v4 != 4);
  return result;
}

int16x8_t sub_1BBA4DE8C(uint64_t a1, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  v24[0] = *a2;
  v24[1] = v5;
  char v6 = 1;
  do
  {
    int16x8_t v7 = (int16x8_t)v24[v4];
    char v8 = v6;
    int16x8_t v9 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 0);
    int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 1);
    int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 2);
    int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 3);
    int16x8_t v13 = vdupq_laneq_s16(v7, 4);
    int16x8_t v14 = vdupq_laneq_s16(v7, 5);
    int16x8_t v15 = vdupq_laneq_s16(v7, 6);
    int16x8_t result = vdupq_laneq_s16(v7, 7);
    *a4 = v9;
    a4[1] = v9;
    uint64_t v17 = (int16x8_t *)((char *)a4 + a3);
    *uint64_t v17 = v10;
    v17[1] = v10;
    int8x8_t v18 = (int16x8_t *)((char *)a4 + a3 + a3);
    *int8x8_t v18 = v11;
    v18[1] = v11;
    int8x8_t v19 = (int16x8_t *)((char *)v18 + a3);
    *int8x8_t v19 = v12;
    v19[1] = v12;
    int8x8_t v20 = (int16x8_t *)((char *)v19 + a3);
    *int8x8_t v20 = v13;
    v20[1] = v13;
    BOOL v21 = (int16x8_t *)((char *)v20 + a3);
    *BOOL v21 = v14;
    v21[1] = v14;
    int8x8_t v22 = (int16x8_t *)((char *)v21 + a3);
    *int8x8_t v22 = v15;
    v22[1] = v15;
    int8x16_t v23 = (int16x8_t *)((char *)v22 + a3);
    *int8x16_t v23 = result;
    v23[1] = result;
    a4 = (int16x8_t *)((char *)v23 + a3);
    uint64_t v4 = 1;
    char v6 = 0;
  }
  while ((v8 & 1) != 0);
  return result;
}

int16x8_t sub_1BBA4DF5C(uint64_t a1, int16x4_t *a2, uint64_t a3, int16x8_t *a4)
{
  int16x8_t v4 = vdupq_lane_s16(*a2, 1);
  int16x8_t v5 = vdupq_lane_s16(*a2, 2);
  int16x8_t v6 = vdupq_lane_s16(*a2, 3);
  int16x8_t v7 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 4);
  int16x8_t v8 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 5);
  int16x8_t v9 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 6);
  int16x8_t result = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 7);
  *a4 = vdupq_lane_s16(*a2, 0);
  *(int16x8_t *)((char *)a4 + a3) = v4;
  int16x8_t v11 = (int16x8_t *)((char *)a4 + a3 + a3);
  *int16x8_t v11 = v5;
  int16x8_t v12 = (int16x8_t *)((char *)v11 + a3);
  *int16x8_t v12 = v6;
  int16x8_t v13 = (int16x8_t *)((char *)v12 + a3);
  *int16x8_t v13 = v7;
  int16x8_t v14 = (int16x8_t *)((char *)v13 + a3);
  *int16x8_t v14 = v8;
  int16x8_t v15 = (int16x8_t *)((char *)v14 + a3);
  *int16x8_t v15 = v9;
  *(int16x8_t *)((char *)v15 + a3) = result;
  return result;
}

int16x4_t sub_1BBA4DFBC(uint64_t a1, int16x4_t *a2, uint64_t a3, int16x4_t *a4)
{
  int16x4_t v4 = vdup_lane_s16(*a2, 1);
  int16x4_t v5 = vdup_lane_s16(*a2, 2);
  int16x4_t result = vdup_lane_s16(*a2, 3);
  *a4 = vdup_lane_s16(*a2, 0);
  *(int16x4_t *)((char *)a4 + a3) = v4;
  int16x8_t v7 = (int16x4_t *)((char *)a4 + a3 + a3);
  *int16x8_t v7 = v5;
  *(int16x4_t *)((char *)v7 + a3) = result;
  return result;
}

void sub_1BBA4DFEC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[8];
  long long v5 = a2[9];
  long long v6 = a2[10];
  long long v7 = a2[11];
  int16x8_t v8 = (_OWORD *)(a4 + 32);
  int v9 = 32;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *int16x8_t v8 = v6;
    v8[1] = v7;
    int16x8_t v8 = (_OWORD *)((char *)v8 + a3);
    --v9;
  }
  while (v9);
}

void sub_1BBA4E014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = (_OWORD *)(a4 + 16);
  int v7 = 16;
  do
  {
    *(v6 - 1) = v4;
    *long long v6 = v5;
    long long v6 = (_OWORD *)((char *)v6 + a3);
    --v7;
  }
  while (v7);
}

void sub_1BBA4E034(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = *(_OWORD *)(a2 + 32);
  int v5 = 8;
  do
  {
    *a4 = v4;
    a4 = (_OWORD *)((char *)a4 + a3);
    --v5;
  }
  while (v5);
}

double sub_1BBA4E050(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  double result = *(double *)(a2 + 16);
  *a4 = result;
  *(double *)((char *)a4 + a3) = result;
  int v5 = (double *)((char *)a4 + a3 + a3);
  *int v5 = result;
  *(double *)((char *)v5 + a3) = result;
  return result;
}

int8x16_t *sub_1BBA4E070(uint64_t a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  v50[8] = *MEMORY[0x1E4F143B8];
  v50[0] = 0x1C1C1D1D1E1E1F1FLL;
  v50[1] = 0x181819191A1A1B1BLL;
  v50[2] = 0x1414151516161717;
  v50[3] = 0x1010111112121313;
  v50[4] = 0xC0C0D0D0E0E0F0FLL;
  v50[5] = 0x80809090A0A0B0BLL;
  int8x16_t v5 = a2[1];
  int8x16_t v6 = a2[2];
  int8x16_t v7 = a2[3];
  int8x16_t v8 = a2[8];
  int8x16_t v9 = a2[9];
  int8x16_t v10 = a2[10];
  int8x16_t v11 = a2[11];
  v48[0] = *a2;
  v48[1] = v5;
  v48[2] = v6;
  v48[3] = v7;
  i16 = a2[4].i16;
  uint8x8_t v13 = (uint8x8_t)vld1_dup_s16(i16);
  uint8x8_t v49 = v13;
  uint8x8_t v46 = *(uint8x8_t *)v9.i8;
  uint8x8_t v45 = (uint8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
  uint8x8_t v44 = (uint8x8_t)vextq_s8(v10, v10, 8uLL).u64[0];
  uint8x8_t v43 = (uint8x8_t)vextq_s8(v11, v11, 8uLL).u64[0];
  int16x8_t v14 = a2[12].i16;
  v47[0] = vmull_u8((uint8x8_t)0x404030302020101, v13);
  v47[1] = vmull_u8((uint8x8_t)0x808070706060505, v13);
  v47[2] = vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v13);
  v47[3] = vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v13);
  v47[4] = vmull_u8((uint8x8_t)0x1414131312121111, v13);
  v47[5] = vmull_u8((uint8x8_t)0x1818171716161515, v13);
  uint8x8_t v15 = (uint8x8_t)vld1_dup_s16(v14);
  int16x8_t v16 = (int16x8_t)vmull_u8((uint8x8_t)0x404030302020101, v15);
  int16x8_t v17 = (int16x8_t)vmull_u8((uint8x8_t)0x808070706060505, v15);
  v50[6] = 0x404050506060707;
  v50[7] = 0x10102020303;
  int16x8_t v41 = (int16x8_t)vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v15);
  int16x8_t v42 = (int16x8_t)vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v15);
  int16x8_t v18 = (int16x8_t)vmull_u8((uint8x8_t)0x1414131312121111, v15);
  int16x8_t v19 = (int16x8_t)vmull_u8((uint8x8_t)0x1818171716161515, v15);
  int16x8_t v20 = (int16x8_t)vmull_u8((uint8x8_t)0x1C1C1B1B1A1A1919, v15);
  int16x8_t v21 = (int16x8_t)vmull_u8((uint8x8_t)0x20201F1F1E1E1D1DLL, v15);
  v47[6] = vmull_u8((uint8x8_t)0x1C1C1B1B1A1A1919, v13);
  v47[7] = vmull_u8((uint8x8_t)0x20201F1F1E1E1D1DLL, v13);
  int8x8_t v22 = a4 + 2;
  uint8x8_t v23 = (uint8x8_t)vextq_s8(v8, v8, 8uLL).u64[0];
  do
  {
    int32x4_t v24 = (int32x4_t)v47[v4];
    int16x8_t v25 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
    int16x8_t v26 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
    int16x8_t v27 = (int16x8_t)vdupq_laneq_s32(v24, 2);
    int16x8_t v28 = (int16x8_t)vdupq_laneq_s32(v24, 3);
    int16x4_t v29 = *(int16x4_t *)((char *)v48 + 8 * v4);
    uint8x8_t v30 = (uint8x8_t)vdup_lane_s16(v29, 0);
    uint8x8_t v31 = (uint8x8_t)vdup_lane_s16(v29, 1);
    uint8x8_t v32 = (uint8x8_t)vdup_lane_s16(v29, 2);
    int16x4_t v33 = (int16x4_t)v50[v4];
    uint8x8_t v34 = (uint8x8_t)vdup_lane_s16(v33, 0);
    *(int16x4_t *)v24.i8 = vdup_lane_s16(v33, 1);
    uint8x8_t v35 = (uint8x8_t)vdup_lane_s16(v33, 2);
    uint8x8_t v36 = (uint8x8_t)vdup_lane_s16(v29, 3);
    uint8x8_t v37 = (uint8x8_t)vdup_lane_s16(v33, 3);
    v22[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v30), v25), *(uint8x8_t *)v8.i8, v34), 6uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v17, (uint8x8_t)0x181819191A1A1B1BLL, v30), v25), v23, v34), 6uLL);
    int8x8_t v38 = (int8x16_t *)((char *)v22 + a3);
    v38[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v31), v26), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v26), (uint8x8_t)0x181819191A1A1B1BLL, v31), v23, *(uint8x8_t *)v24.i8), 6uLL);
    int8x8_t v39 = (int8x16_t *)((char *)v22 + 2 * a3);
    v39[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v27), (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v32), *(uint8x8_t *)v8.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v27), (uint8x8_t)0x181819191A1A1B1BLL, v32), v23, v35), 6uLL);
    double result = (int8x16_t *)((char *)v22 + 3 * a3);
    result[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v28), (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v36), *(uint8x8_t *)v8.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v28), (uint8x8_t)0x181819191A1A1B1BLL, v36), v23, v37), 6uLL);
    v22[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v25), (uint8x8_t)0x1414151516161717, v30), v46, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v25), (uint8x8_t)0x1010111112121313, v30), v45, v34), 6uLL);
    v38[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v26), (uint8x8_t)0x1414151516161717, v31), v46, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v26), (uint8x8_t)0x1010111112121313, v31), v45, *(uint8x8_t *)v24.i8), 6uLL);
    v39[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v27), (uint8x8_t)0x1414151516161717, v32), v46, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v27), (uint8x8_t)0x1010111112121313, v32), v45, v35), 6uLL);
    result[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v28), (uint8x8_t)0x1414151516161717, v36), v46, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v28), (uint8x8_t)0x1010111112121313, v36), v45, v37), 6uLL);
    *int8x8_t v22 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v25), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v30), *(uint8x8_t *)v10.i8, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v25), (uint8x8_t)0x80809090A0A0B0BLL, v30), v44, v34), 6uLL);
    *int8x8_t v38 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v26), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v31), *(uint8x8_t *)v10.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v26), (uint8x8_t)0x80809090A0A0B0BLL, v31), v44, *(uint8x8_t *)v24.i8), 6uLL);
    *int8x8_t v39 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v27), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v32), *(uint8x8_t *)v10.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v27), (uint8x8_t)0x80809090A0A0B0BLL, v32), v44, v35), 6uLL);
    *double result = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v28), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v36), *(uint8x8_t *)v10.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v28), (uint8x8_t)0x80809090A0A0B0BLL, v36), v44, v37), 6uLL);
    v22[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v25), (uint8x8_t)0x404050506060707, v30), *(uint8x8_t *)v11.i8, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v25), (uint8x8_t)0x10102020303, v30), v43, v34), 6uLL);
    v38[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v26), (uint8x8_t)0x404050506060707, v31), *(uint8x8_t *)v11.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v26), (uint8x8_t)0x10102020303, v31), v43, *(uint8x8_t *)v24.i8), 6uLL);
    v39[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v27), (uint8x8_t)0x404050506060707, v32), *(uint8x8_t *)v11.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v27), (uint8x8_t)0x10102020303, v32), v43, v35), 6uLL);
    result[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v28), (uint8x8_t)0x404050506060707, v36), *(uint8x8_t *)v11.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v28), (uint8x8_t)0x10102020303, v36), v43, v37), 6uLL);
    ++v4;
    int8x8_t v22 = (int8x16_t *)((char *)v22 + 4 * a3);
  }
  while (v4 != 8);
  return result;
}

void sub_1BBA4E520(uint64_t a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  v38[4] = *MEMORY[0x1E4F143B8];
  v38[0] = 0xC0C0D0D0E0E0F0FLL;
  v38[1] = 0x80809090A0A0B0BLL;
  v38[2] = 0x404050506060707;
  v38[3] = 0x10102020303;
  int8x16_t v5 = a2[1];
  int8x16_t v6 = a2[4];
  int8x16_t v7 = a2[5];
  v36[0] = *a2;
  v36[1] = v5;
  i16 = a2[2].i16;
  uint8x8_t v9 = (uint8x8_t)vld1_dup_s16(i16);
  uint8x8_t v37 = v9;
  uint8x8_t v10 = (uint8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
  uint8x8_t v11 = (uint8x8_t)vextq_s8(v7, v7, 8uLL).u64[0];
  int16x8_t v12 = a2[6].i16;
  uint8x8_t v13 = (uint8x8_t)vld1_dup_s16(v12);
  v35[0] = vmull_u8((uint8x8_t)0x404030302020101, v9);
  v35[1] = vmull_u8((uint8x8_t)0x808070706060505, v9);
  v35[2] = vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v9);
  v35[3] = vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v9);
  int16x8_t v14 = (int16x8_t)vmull_u8((uint8x8_t)0x404030302020101, v13);
  int16x8_t v15 = (int16x8_t)vmull_u8((uint8x8_t)0x808070706060505, v13);
  int16x8_t v16 = (int16x8_t)vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v13);
  int16x8_t v17 = (int16x8_t)vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v13);
  do
  {
    int16x4_t v18 = *(int16x4_t *)((char *)v36 + 8 * v4);
    int32x4_t v19 = (int32x4_t)v35[v4];
    int16x8_t v20 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
    int16x8_t v21 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1);
    int16x8_t v22 = (int16x8_t)vdupq_laneq_s32(v19, 2);
    int16x8_t v23 = (int16x8_t)vdupq_laneq_s32(v19, 3);
    uint8x8_t v24 = (uint8x8_t)vdup_lane_s16(v18, 0);
    uint8x8_t v25 = (uint8x8_t)vdup_lane_s16(v18, 1);
    *(int16x4_t *)v19.i8 = vdup_lane_s16(v18, 2);
    uint8x8_t v26 = (uint8x8_t)vdup_lane_s16(v18, 3);
    int16x4_t v27 = (int16x4_t)v38[v4];
    uint8x8_t v28 = (uint8x8_t)vdup_lane_s16(v27, 0);
    uint8x8_t v29 = (uint8x8_t)vdup_lane_s16(v27, 1);
    uint8x8_t v30 = (uint8x8_t)vdup_lane_s16(v27, 2);
    uint8x8_t v31 = (uint8x8_t)vdup_lane_s16(v27, 3);
    *a4 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v24), v20), *(uint8x8_t *)v6.i8, v28), 5uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v15, (uint8x8_t)0x80809090A0A0B0BLL, v24), v20), v10, v28), 5uLL);
    uint8x8_t v32 = (int8x16_t *)((char *)a4 + a3);
    *uint8x8_t v32 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v25), v21), *(uint8x8_t *)v6.i8, v29), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v21), (uint8x8_t)0x80809090A0A0B0BLL, v25), v10, v29), 5uLL);
    int16x4_t v33 = (int8x16_t *)((char *)a4 + 2 * a3);
    *int16x4_t v33 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v14, v22), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v6.i8, v30), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v22), (uint8x8_t)0x80809090A0A0B0BLL, *(uint8x8_t *)v19.i8), v10, v30), 5uLL);
    uint8x8_t v34 = (int8x16_t *)((char *)a4 + 3 * a3);
    *uint8x8_t v34 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v14, v23), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v26), *(uint8x8_t *)v6.i8, v31), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v23), (uint8x8_t)0x80809090A0A0B0BLL, v26), v10, v31), 5uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v20), (uint8x8_t)0x404050506060707, v24), *(uint8x8_t *)v7.i8, v28), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v20), (uint8x8_t)0x10102020303, v24), v11, v28), 5uLL);
    v32[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v21), (uint8x8_t)0x404050506060707, v25), *(uint8x8_t *)v7.i8, v29), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v21), (uint8x8_t)0x10102020303, v25), v11, v29), 5uLL);
    v33[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v22), (uint8x8_t)0x404050506060707, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v7.i8, v30), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v22), (uint8x8_t)0x10102020303, *(uint8x8_t *)v19.i8), v11, v30), 5uLL);
    v34[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v23), (uint8x8_t)0x404050506060707, v26), *(uint8x8_t *)v7.i8, v31), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v23), (uint8x8_t)0x10102020303, v26), v11, v31), 5uLL);
    ++v4;
    a4 = (int8x16_t *)((char *)a4 + 4 * a3);
  }
  while (v4 != 4);
}

int8x16_t sub_1BBA4E7C0(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = (const __int16 *)(a2 + 16);
  uint8x8_t v5 = (uint8x8_t)vld1_dup_s16(v4);
  int8x16_t v6 = (const __int16 *)(a2 + 48);
  uint8x8_t v7 = (uint8x8_t)vld1_dup_s16(v6);
  int32x4_t v8 = (int32x4_t)vmull_u8((uint8x8_t)0x404030302020101, v5);
  int32x4_t v9 = (int32x4_t)vmull_u8((uint8x8_t)0x808070706060505, v5);
  uint16x8_t v10 = vmull_u8((uint8x8_t)0x404030302020101, v7);
  uint16x8_t v11 = vmull_u8((uint8x8_t)0x808070706060505, v7);
  uint16x8_t v12 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 0);
  uint16x8_t v13 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
  uint16x8_t v14 = (uint16x8_t)vdupq_laneq_s32(v8, 2);
  int16x8_t v15 = *(int16x8_t *)a2;
  uint8x16_t v16 = *(uint8x16_t *)(a2 + 32);
  uint16x8_t v17 = (uint16x8_t)vdupq_laneq_s32(v8, 3);
  uint8x8_t v18 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 0);
  uint16x8_t v19 = vmlal_u8(vmlal_u8(v12, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v18);
  uint16x8_t v20 = vmlal_u8(vmlal_u8(v12, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v18);
  uint8x8_t v21 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 1);
  uint16x8_t v22 = vmlal_u8(vmlal_u8(v13, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v21);
  uint16x8_t v23 = vmlal_u8(vmlal_u8(v13, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v21);
  uint8x8_t v24 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 2);
  uint16x8_t v25 = vmlal_u8(vmlal_u8(v14, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v24);
  uint16x8_t v26 = vmlal_u8(vmlal_u8(v14, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v24);
  uint8x8_t v27 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 3);
  uint16x8_t v28 = vmlal_u8(vmlal_u8(v17, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v27);
  uint16x8_t v29 = vmlal_u8(vmlal_u8(v17, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v27);
  v30.i64[0] = 0x707070707070707;
  v30.i64[1] = 0x707070707070707;
  int16x8_t v31 = (int16x8_t)vmlal_high_u8(v20, v16, v30);
  v30.i64[0] = 0x606060606060606;
  v30.i64[1] = 0x606060606060606;
  int16x8_t v32 = (int16x8_t)vmlal_high_u8(v23, v16, v30);
  v30.i64[0] = 0x505050505050505;
  v30.i64[1] = 0x505050505050505;
  int16x8_t v33 = (int16x8_t)vmlal_high_u8(v26, v16, v30);
  v30.i64[0] = 0x404040404040404;
  v30.i64[1] = 0x404040404040404;
  *a4 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v19, *(uint8x8_t *)v16.i8, (uint8x8_t)0x707070707070707), 4uLL), v31, 4uLL);
  *(int8x16_t *)((char *)a4 + a3) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v22, *(uint8x8_t *)v16.i8, (uint8x8_t)0x606060606060606), 4uLL), v32, 4uLL);
  uint8x8_t v34 = (int8x16_t *)((char *)a4 + a3 + a3);
  *uint8x8_t v34 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v25, *(uint8x8_t *)v16.i8, (uint8x8_t)0x505050505050505), 4uLL), v33, 4uLL);
  *(int8x16_t *)((char *)v34 + a3) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v28, *(uint8x8_t *)v16.i8, (uint8x8_t)0x404040404040404), 4uLL), (int16x8_t)vmlal_high_u8(v29, v16, v30), 4uLL);
  uint8x8_t v35 = (int8x16_t *)((char *)a4 + 4 * a3);
  uint16x8_t v36 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
  uint16x8_t v37 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 1);
  uint16x8_t v38 = vmlal_u8(v37, (uint8x8_t)0x404030302020101, v7);
  uint16x8_t v39 = vmlal_u8(v37, (uint8x8_t)0x808070706060505, v7);
  int16x8_t v40 = (int16x8_t)vdupq_laneq_s32(v9, 2);
  uint16x8_t v41 = (uint16x8_t)vdupq_laneq_s32(v9, 3);
  uint16x8_t v42 = vmlal_u8(v41, (uint8x8_t)0x404030302020101, v7);
  uint8x8_t v43 = (uint8x8_t)vdup_laneq_s16(v15, 4);
  uint16x8_t v44 = vmlal_u8(v41, (uint8x8_t)0x808070706060505, v7);
  uint16x8_t v45 = vmlal_u8(vmlal_u8(v36, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v43);
  uint16x8_t v46 = vmlal_u8(vmlal_u8(v36, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v43);
  uint8x8_t v47 = (uint8x8_t)vdup_laneq_s16(v15, 5);
  uint16x8_t v48 = vmlal_u8(v38, (uint8x8_t)0x404050506060707, v47);
  uint16x8_t v49 = vmlal_u8(v39, (uint8x8_t)0x10102020303, v47);
  uint8x8_t v50 = (uint8x8_t)vdup_laneq_s16(v15, 6);
  uint8x8_t v51 = (uint8x8_t)vdup_laneq_s16(v15, 7);
  int16x8_t v52 = (int16x8_t)vmlal_u8(v42, (uint8x8_t)0x404050506060707, v51);
  int16x8_t v53 = (int16x8_t)vmlal_u8(v44, (uint8x8_t)0x10102020303, v51);
  v54.i64[0] = 0x303030303030303;
  v54.i64[1] = 0x303030303030303;
  int16x8_t v55 = (int16x8_t)vmlal_high_u8(v46, v16, v54);
  v54.i64[0] = 0x202020202020202;
  v54.i64[1] = 0x202020202020202;
  int8x16_t v56 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vaddw_u8(v10, *(uint8x8_t *)v16.i8), v40), (uint8x8_t)0x404050506060707, v50), 4uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vaddw_high_u8(v11, v16), v40), (uint8x8_t)0x10102020303, v50), 4uLL);
  int8x16_t result = vrshrn_high_n_s16(vrshrn_n_s16(v52, 4uLL), v53, 4uLL);
  *uint8x8_t v35 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v45, *(uint8x8_t *)v16.i8, (uint8x8_t)0x303030303030303), 4uLL), v55, 4uLL);
  int32x4_t v58 = (int8x16_t *)((char *)v35 + a3);
  *int32x4_t v58 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v48, *(uint8x8_t *)v16.i8, (uint8x8_t)0x202020202020202), 4uLL), (int16x8_t)vmlal_high_u8(v49, v16, v54), 4uLL);
  int32x4_t v59 = (int8x16_t *)((char *)v58 + a3);
  *int32x4_t v59 = v56;
  *(int8x16_t *)((char *)v59 + a3) = result;
  return result;
}

int8x8_t sub_1BBA4E9C4(uint64_t a1, int16x4_t *a2, uint64_t a3, int8x8_t *a4)
{
  uint64_t v4 = (const __int16 *)&a2[1];
  uint8x8_t v5 = (uint8x8_t)vld1_dup_s16(v4);
  uint8x8_t v6 = (uint8x8_t)a2[2];
  uint8x8_t v7 = (const __int16 *)&a2[3];
  uint8x8_t v8 = (uint8x8_t)vld1_dup_s16(v7);
  uint16x8_t v9 = vmull_u8((uint8x8_t)0x404030302020101, v8);
  int32x4_t v10 = (int32x4_t)vmull_u8((uint8x8_t)0x404030302020101, v5);
  int16x8_t v11 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
  int16x8_t v12 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1);
  int16x8_t v13 = (int16x8_t)vdupq_laneq_s32(v10, 2);
  int16x8_t v14 = (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vdupq_laneq_s32(v10, 3), (uint8x8_t)0x404030302020101, v8), (uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 3));
  int16x8_t v15 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 0)), (uint8x8_t)0x404030302020101, v8), v11), v6, (uint8x8_t)0x303030303030303);
  int16x8_t v16 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 1)), (uint8x8_t)0x404030302020101, v8), v12), v6, (uint8x8_t)0x202020202020202);
  int8x8_t result = vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(v9, v6), (uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 2)), v13), 3uLL);
  *a4 = vrshrn_n_s16(v15, 3uLL);
  *(int8x8_t *)((char *)a4 + a3) = vrshrn_n_s16(v16, 3uLL);
  uint8x8_t v18 = (int8x8_t *)((char *)a4 + a3 + a3);
  *uint8x8_t v18 = result;
  *(int8x8_t *)((char *)v18 + a3) = vrshrn_n_s16(v14, 3uLL);
  return result;
}

uint64_t sub_1BBA4EA7C(uint64_t result, _OWORD *a2, uint64_t a3, double *a4)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  int v6 = byte_1BBB795E8[(int)result];
  int v7 = (char)v6;
  uint64_t v146 = result;
  if ((int)result >= 18)
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      int16x8_t v15 = a2 + 8;
      uint64_t v8 = 15;
      uint64_t v9 = 14;
      uint64_t v10 = 13;
      uint64_t v11 = 12;
      uint64_t v12 = 11;
      uint64_t v13 = 10;
      uint64_t v14 = 9;
      goto LABEL_6;
    }
    int v29 = word_1BBB79710[(result - 11)];
    uint64_t v30 = 2 * (char)v6;
    int v31 = ((2 * (char)v6) | 1) * v29 + 128;
    do
    {
      v151[v30++] = *((unsigned char *)a2 + (v31 >> 8) - 1);
      v31 += v29;
    }
    while (v30 != -1);
    HIBYTE(v150) = *((unsigned char *)a2 - 1);
    long long v152 = v147;
    long long v153 = v148;
    long long v154 = v149;
    long long v155 = v150;
    long long v25 = a2[8];
    long long v26 = a2[9];
    long long v27 = a2[10];
    long long v28 = a2[11];
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      uint64_t v8 = 7;
      uint64_t v9 = 6;
      uint64_t v10 = 5;
      uint64_t v11 = 4;
      uint64_t v12 = 3;
      uint64_t v13 = 2;
      uint64_t v14 = 1;
      int16x8_t v15 = a2;
LABEL_6:
      long long v16 = a2[v12];
      long long v17 = a2[v13];
      long long v18 = a2[v14];
      long long v152 = *v15;
      long long v153 = v18;
      long long v154 = v17;
      long long v155 = v16;
      long long v19 = a2[v10];
      long long v20 = a2[v9];
      long long v21 = a2[v8];
      long long v156 = a2[v11];
      long long v157 = v19;
      long long v158 = v20;
      long long v159 = v21;
      *(void *)&long long v147 = 8 * a3;
      *((void *)&v147 + 1) = 8;
      goto LABEL_15;
    }
    int v22 = word_1BBB79710[(int)result - 11];
    uint64_t v23 = 2 * (char)v6;
    int v24 = ((2 * (char)v6) | 1) * v22 + 128;
    do
    {
      v151[v23++] = *((unsigned char *)a2 + (v24 >> 8) + 127);
      v24 += v22;
    }
    while (v23 != -1);
    HIBYTE(v150) = *((unsigned char *)a2 - 1);
    long long v152 = v147;
    long long v153 = v148;
    long long v154 = v149;
    long long v155 = v150;
    long long v25 = *a2;
    long long v26 = a2[1];
    long long v27 = a2[2];
    long long v28 = a2[3];
  }
  long long v156 = v25;
  long long v157 = v26;
  long long v158 = v27;
  long long v159 = v28;
  *(void *)&long long v147 = 8 * a3;
  *((void *)&v147 + 1) = 8;
  if ((v6 & 0x80) == 0)
  {
    int v6 = (char)v6;
LABEL_15:
    uint64_t v32 = *((void *)&v147 + ((int)result > 17));
    uint64_t v33 = *((void *)&v147 + ((int)result < 18)) - 7 * v32;
    int v34 = 8;
    int v35 = v6;
    do
    {
      uint16x8_t v36 = (char *)&v152 + 8 * (v35 >> 8);
      double v37 = *(double *)v36;
      double v38 = *((double *)v36 + 1);
      double v39 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)v36, *(int8x8_t *)&v38, 4uLL));
      double v40 = *((double *)v36 + 2);
      double v41 = *((double *)v36 + 3);
      double v42 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v38, *(int8x8_t *)&v40, 4uLL));
      double v43 = *((double *)v36 + 4);
      double v44 = *((double *)v36 + 5);
      double v45 = *((double *)v36 + 6);
      double v46 = *((double *)v36 + 7);
      double v47 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v40, *(int8x8_t *)&v41, 4uLL));
      double v48 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v41, *(int8x8_t *)&v43, 4uLL));
      double v49 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v43, *(int8x8_t *)&v44, 4uLL));
      double v50 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v44, *(int8x8_t *)&v45, 4uLL));
      double v51 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v46, 4uLL));
      double v52 = *((double *)v36 + 8);
      unint64_t v53 = *((unint64_t *)v36 + 9);
      double v54 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v52, 4uLL));
      double v55 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v52, (int8x8_t)v53, 4uLL));
      double v56 = COERCE_DOUBLE(vshrd_n_u64(v53, 0x20uLL));
      unsigned int v57 = v35;
      if (v35 < 0x80u)
      {
        int8x8_t v58 = (int8x8_t)v53;
      }
      else
      {
        double v52 = v55;
        double v46 = v54;
        double v45 = v51;
        double v44 = v50;
        double v43 = v49;
        double v41 = v48;
        double v40 = v47;
        double v38 = v42;
        double v37 = v39;
        *(double *)&int8x8_t v58 = v56;
      }
      if (v35 >= 0x80u) {
        unsigned int v57 = v35 - 128;
      }
      double v59 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v37, *(int8x8_t *)&v38, 2uLL));
      double v60 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v38, *(int8x8_t *)&v40, 2uLL));
      double v61 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v40, *(int8x8_t *)&v41, 2uLL));
      double v62 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v41, *(int8x8_t *)&v43, 2uLL));
      double v63 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v43, *(int8x8_t *)&v44, 2uLL));
      double v64 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v44, *(int8x8_t *)&v45, 2uLL));
      double v65 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v46, 2uLL));
      double v66 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v52, 2uLL));
      double v67 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v52, v58, 2uLL));
      if (v57 >= 0x40) {
        *(double *)&int8x8_t v68 = v67;
      }
      else {
        *(double *)&int8x8_t v68 = v52;
      }
      if (v57 >= 0x40) {
        *(double *)&int8x8_t v69 = v66;
      }
      else {
        *(double *)&int8x8_t v69 = v46;
      }
      if (v57 >= 0x40) {
        *(double *)&int8x8_t v70 = v65;
      }
      else {
        *(double *)&int8x8_t v70 = v45;
      }
      if (v57 >= 0x40) {
        *(double *)&int8x8_t v71 = v64;
      }
      else {
        *(double *)&int8x8_t v71 = v44;
      }
      if (v57 >= 0x40) {
        *(double *)&int8x8_t v72 = v63;
      }
      else {
        *(double *)&int8x8_t v72 = v43;
      }
      if (v57 >= 0x40) {
        *(double *)&int8x8_t v73 = v62;
      }
      else {
        *(double *)&int8x8_t v73 = v41;
      }
      if (v57 >= 0x40) {
        *(double *)&int8x8_t v74 = v61;
      }
      else {
        *(double *)&int8x8_t v74 = v40;
      }
      if (v57 >= 0x40) {
        *(double *)&int8x8_t v75 = v60;
      }
      else {
        *(double *)&int8x8_t v75 = v38;
      }
      if (v57 < 0x40)
      {
        uint64_t v76 = v57;
      }
      else
      {
        double v37 = v59;
        uint64_t v76 = v57 - 64;
      }
      BOOL v77 = (int)result < 18;
      sub_1BBA4F450(v76, v6, v77, a3, a4, *(int8x8_t *)&v37, v75);
      BOOL v78 = (double *)((char *)a4 + v32);
      sub_1BBA4F450(v76, v6, v77, a3, v78, v75, v74);
      uint64_t v79 = (double *)((char *)v78 + v32);
      sub_1BBA4F450(v76, v6, v77, a3, v79, v74, v73);
      __int16 v80 = (double *)((char *)v79 + v32);
      sub_1BBA4F450(v76, v6, v77, a3, v80, v73, v72);
      int v81 = (double *)((char *)v80 + v32);
      sub_1BBA4F450(v76, v6, v77, a3, v81, v72, v71);
      uint64_t v82 = (double *)((char *)v81 + v32);
      sub_1BBA4F450(v76, v6, v77, a3, v82, v71, v70);
      int v83 = (double *)((char *)v82 + v32);
      sub_1BBA4F450(v76, v6, v77, a3, v83, v70, v69);
      uint64_t v84 = (double *)((char *)v83 + v32);
      sub_1BBA4F450(v76, v6, v77, a3, v84, v69, v68);
      int8x8_t result = v146;
      v35 += 8 * v6;
      a4 = (double *)((char *)v84 + v33);
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v85 = *((void *)&v147 + ((int)result > 17));
  int v86 = 8 * (char)v6;
  uint64_t v87 = *((void *)&v147 + ((int)result < 18)) - 7 * v85;
  int v88 = 8;
  int v6 = (char)v6;
  do
  {
    __n128 v89 = (double *)&v155 + (v6 >> 8) + 1;
    double v91 = v89[8];
    double v90 = v89[9];
    double v92 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v91, *(int8x8_t *)&v90, 4uLL));
    double v94 = v89[6];
    double v93 = v89[7];
    double v95 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v93, *(int8x8_t *)&v91, 4uLL));
    double v97 = v89[4];
    double v96 = v89[5];
    double v99 = v89[2];
    double v98 = v89[3];
    double v100 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v94, *(int8x8_t *)&v93, 4uLL));
    double v101 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v96, *(int8x8_t *)&v94, 4uLL));
    double v102 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v97, *(int8x8_t *)&v96, 4uLL));
    double v103 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v98, *(int8x8_t *)&v97, 4uLL));
    double v104 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v99, *(int8x8_t *)&v98, 4uLL));
    double v106 = *v89;
    double v105 = v89[1];
    double v107 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v105, *(int8x8_t *)&v99, 4uLL));
    double v108 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)v89, *(int8x8_t *)&v105, 4uLL));
    double v109 = COERCE_DOUBLE(vshld_n_s64(*(void *)v89, 0x20uLL));
    unsigned int v110 = v6 | 0xFFFFFF00;
    if ((v6 | 0xFFFFFF00) <= 0xFFFFFF7F) {
      double v90 = v92;
    }
    if (v110 > 0xFFFFFF7F)
    {
      *(double *)&int8x8_t v111 = v93;
    }
    else
    {
      double v91 = v95;
      *(double *)&int8x8_t v111 = v100;
    }
    if (v110 <= 0xFFFFFF7F) {
      *(double *)&int8x8_t v112 = v101;
    }
    else {
      *(double *)&int8x8_t v112 = v94;
    }
    if (v110 <= 0xFFFFFF7F) {
      *(double *)&int8x8_t v113 = v102;
    }
    else {
      *(double *)&int8x8_t v113 = v96;
    }
    if (v110 <= 0xFFFFFF7F) {
      *(double *)&int8x8_t v114 = v103;
    }
    else {
      *(double *)&int8x8_t v114 = v97;
    }
    if (v110 <= 0xFFFFFF7F) {
      *(double *)&int8x8_t v115 = v104;
    }
    else {
      *(double *)&int8x8_t v115 = v98;
    }
    if (v110 <= 0xFFFFFF7F) {
      *(double *)&int8x8_t v116 = v107;
    }
    else {
      *(double *)&int8x8_t v116 = v99;
    }
    if (v110 <= 0xFFFFFF7F) {
      *(double *)&int8x8_t v117 = v108;
    }
    else {
      *(double *)&int8x8_t v117 = v105;
    }
    if (v110 <= 0xFFFFFF7F) {
      *(double *)&int8x8_t v118 = v109;
    }
    else {
      *(double *)&int8x8_t v118 = v106;
    }
    if (v110 <= 0xFFFFFF7F) {
      v110 += 128;
    }
    double v119 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v91, *(int8x8_t *)&v90, 6uLL));
    double v120 = COERCE_DOUBLE(vext_s8(v111, *(int8x8_t *)&v91, 6uLL));
    double v121 = COERCE_DOUBLE(vext_s8(v112, v111, 6uLL));
    double v122 = COERCE_DOUBLE(vext_s8(v113, v112, 6uLL));
    double v123 = COERCE_DOUBLE(vext_s8(v114, v113, 6uLL));
    double v124 = COERCE_DOUBLE(vext_s8(v115, v114, 6uLL));
    double v125 = COERCE_DOUBLE(vext_s8(v116, v115, 6uLL));
    double v126 = COERCE_DOUBLE(vext_s8(v117, v116, 6uLL));
    double v127 = COERCE_DOUBLE(vext_s8(v118, v117, 6uLL));
    if (v110 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v128 = v119;
    }
    else {
      *(double *)&int8x8_t v128 = v90;
    }
    if (v110 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v129 = v120;
    }
    else {
      *(double *)&int8x8_t v129 = v91;
    }
    if (v110 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v130 = v121;
    }
    else {
      int8x8_t v130 = v111;
    }
    if (v110 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v131 = v122;
    }
    else {
      int8x8_t v131 = v112;
    }
    if (v110 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v132 = v123;
    }
    else {
      int8x8_t v132 = v113;
    }
    if (v110 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v133 = v124;
    }
    else {
      int8x8_t v133 = v114;
    }
    if (v110 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v134 = v125;
    }
    else {
      int8x8_t v134 = v115;
    }
    if (v110 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v135 = v126;
    }
    else {
      int8x8_t v135 = v116;
    }
    if (v110 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v136 = v127;
    }
    else {
      int8x8_t v136 = v117;
    }
    if (v110 <= 0xFFFFFFBF) {
      uint64_t v137 = v110 + 64;
    }
    else {
      uint64_t v137 = v110;
    }
    BOOL v138 = (int)result < 18;
    sub_1BBA4F154(v137, v7, v138, a3, a4, v136, v135);
    uint64_t v139 = (double *)((char *)a4 + v85);
    sub_1BBA4F154(v137, v7, v138, a3, v139, v135, v134);
    int v140 = (double *)((char *)v139 + v85);
    sub_1BBA4F154(v137, v7, v138, a3, v140, v134, v133);
    int v141 = (double *)((char *)v140 + v85);
    sub_1BBA4F154(v137, v7, v138, a3, v141, v133, v132);
    unsigned int v142 = (double *)((char *)v141 + v85);
    sub_1BBA4F154(v137, v7, v138, a3, v142, v132, v131);
    uint64_t v143 = (double *)((char *)v142 + v85);
    sub_1BBA4F154(v137, v7, v138, a3, v143, v131, v130);
    signed int v144 = (double *)((char *)v143 + v85);
    sub_1BBA4F154(v137, v7, v138, a3, v144, v130, v129);
    uint64_t v145 = (double *)((char *)v144 + v85);
    sub_1BBA4F154(v137, v7, v138, a3, v145, v129, v128);
    int8x8_t result = v146;
    v6 += v86;
    a4 = (double *)((char *)v145 + v87);
    --v88;
  }
  while (v88);
  return result;
}

uint64_t sub_1BBA4F154(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  v59[9] = *MEMORY[0x1E4F143B8];
  v59[0] = a7;
  v59[1] = vext_s8(a6, a7, 7uLL);
  v59[2] = vext_s8(a6, a7, 6uLL);
  unsigned char v59[3] = vext_s8(a6, a7, 5uLL);
  v59[4] = vext_s8(a6, a7, 4uLL);
  v59[5] = vext_s8(a6, a7, 3uLL);
  v59[6] = vext_s8(a6, a7, 2uLL);
  v59[7] = vext_s8(a6, a7, 1uLL);
  v59[8] = a6;
  if ((int)result >> 5 >= 0) {
    int v7 = (int)result >> 5;
  }
  else {
    int v7 = -((int)result >> 5);
  }
  double v8 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v7 - 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v59[v7], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F))), 5uLL));
  int v9 = a2 + result;
  int v10 = (a2 + (int)result) >> 5;
  if (v10 < 0) {
    int v10 = -v10;
  }
  double v11 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v10 - 1], (uint8x8_t)vdup_n_s8(v9 & 0x1F)), (uint8x8_t)v59[v10], (uint8x8_t)vdup_n_s8(32 - (v9 & 0x1Fu))), 5uLL));
  int v12 = v9 + a2;
  int v13 = v12 >> 5;
  if (v12 >> 5 < 0) {
    int v13 = -v13;
  }
  double v14 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v13 - 1], (uint8x8_t)vdup_n_s8(v12 & 0x1F)), (uint8x8_t)v59[v13], (uint8x8_t)vdup_n_s8(32 - (v12 & 0x1Fu))), 5uLL));
  int v15 = v12 + a2;
  int v16 = v15 >> 5;
  if (v15 >> 5 < 0) {
    int v16 = -v16;
  }
  double v17 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v16 - 1], (uint8x8_t)vdup_n_s8(v15 & 0x1F)), (uint8x8_t)v59[v16], (uint8x8_t)vdup_n_s8(32 - (v15 & 0x1Fu))), 5uLL));
  int v18 = v15 + a2;
  int v19 = v18 >> 5;
  if (v18 >> 5 < 0) {
    int v19 = -v19;
  }
  double v20 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v19 - 1], (uint8x8_t)vdup_n_s8(v18 & 0x1F)), (uint8x8_t)v59[v19], (uint8x8_t)vdup_n_s8(32 - (v18 & 0x1Fu))), 5uLL));
  int v21 = v18 + a2;
  int v22 = v21 >> 5;
  if (v21 >> 5 < 0) {
    int v22 = -v22;
  }
  double v23 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v22 - 1], (uint8x8_t)vdup_n_s8(v21 & 0x1F)), (uint8x8_t)v59[v22], (uint8x8_t)vdup_n_s8(32 - (v21 & 0x1Fu))), 5uLL));
  int v24 = v21 + a2;
  int v25 = v24 >> 5;
  if (v24 >> 5 < 0) {
    int v25 = -v25;
  }
  double v26 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v25 - 1], (uint8x8_t)vdup_n_s8(v24 & 0x1F)), (uint8x8_t)v59[v25], (uint8x8_t)vdup_n_s8(32 - (v24 & 0x1Fu))), 5uLL));
  int v27 = v24 + a2;
  int v28 = v27 >> 5;
  if (v27 >> 5 < 0) {
    int v28 = -v28;
  }
  double v29 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v28 - 1], (uint8x8_t)vdup_n_s8(v27 & 0x1F)), (uint8x8_t)v59[v28], (uint8x8_t)vdup_n_s8(32 - (v27 & 0x1Fu))), 5uLL));
  int16x4_t v30 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v8, *(int8x8_t *)&v11);
  int16x4_t v31 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v8, *(int8x8_t *)&v11);
  int16x4_t v32 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v17);
  int16x4_t v33 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v17);
  int16x4_t v34 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v23);
  int16x4_t v35 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v23);
  int16x4_t v36 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v26, *(int8x8_t *)&v29);
  int16x4_t v37 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v26, *(int8x8_t *)&v29);
  int32x2_t v38 = (int32x2_t)vtrn1_s16(v30, v32);
  int32x2_t v39 = (int32x2_t)vtrn2_s16(v30, v32);
  int32x2_t v40 = (int32x2_t)vtrn1_s16(v31, v33);
  int32x2_t v41 = (int32x2_t)vtrn2_s16(v31, v33);
  int32x2_t v42 = (int32x2_t)vtrn1_s16(v34, v36);
  int32x2_t v43 = (int32x2_t)vtrn2_s16(v34, v36);
  int32x2_t v44 = (int32x2_t)vtrn1_s16(v35, v37);
  int32x2_t v45 = (int32x2_t)vtrn2_s16(v35, v37);
  double v46 = COERCE_DOUBLE(vzip1_s32(v38, v42));
  double v47 = COERCE_DOUBLE(vzip2_s32(v38, v42));
  double v48 = COERCE_DOUBLE(vzip1_s32(v40, v44));
  double v49 = COERCE_DOUBLE(vzip2_s32(v40, v44));
  double v50 = COERCE_DOUBLE(vzip1_s32(v39, v43));
  double v51 = COERCE_DOUBLE(vzip2_s32(v39, v43));
  double v52 = COERCE_DOUBLE(vzip1_s32(v41, v45));
  double v53 = COERCE_DOUBLE(vzip2_s32(v41, v45));
  if (a3)
  {
    double v29 = v53;
    double v26 = v51;
    double v23 = v49;
    double v20 = v47;
    double v17 = v52;
    double v14 = v50;
    double v11 = v48;
    double v8 = v46;
  }
  *a5 = v8;
  *(double *)((char *)a5 + a4) = v11;
  double v54 = (double *)((char *)a5 + a4 + a4);
  *double v54 = v14;
  double v55 = (double *)((char *)v54 + a4);
  *double v55 = v17;
  double v56 = (double *)((char *)v55 + a4);
  *double v56 = v20;
  unsigned int v57 = (double *)((char *)v56 + a4);
  *unsigned int v57 = v23;
  int8x8_t v58 = (double *)((char *)v57 + a4);
  *int8x8_t v58 = v26;
  *(double *)((char *)v58 + a4) = v29;
  return result;
}

uint64_t sub_1BBA4F450(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  v56[9] = *MEMORY[0x1E4F143B8];
  v56[0] = a6;
  v56[1] = vext_s8(a6, a7, 1uLL);
  v56[2] = vext_s8(a6, a7, 2uLL);
  v56[3] = vext_s8(a6, a7, 3uLL);
  v56[4] = vext_s8(a6, a7, 4uLL);
  v56[5] = vext_s8(a6, a7, 5uLL);
  v56[6] = vext_s8(a6, a7, 6uLL);
  v56[7] = vext_s8(a6, a7, 7uLL);
  v56[8] = a7;
  double v7 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[(result >> 5) + 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v56[result >> 5], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F))), 5uLL));
  unsigned int v8 = a2 + result + a2;
  uint8x8_t v9 = (uint8x8_t)v56[v8 >> 5];
  uint8x8_t v10 = (uint8x8_t)vdup_n_s8(32 - (v8 & 0x1F));
  double v11 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[((a2 + result) >> 5) + 1], (uint8x8_t)vdup_n_s8((a2 + result) & 0x1F)), (uint8x8_t)v56[(a2 + result) >> 5], (uint8x8_t)vdup_n_s8(32 - ((a2 + result) & 0x1F))), 5uLL));
  uint16x8_t v12 = vmull_u8((uint8x8_t)v56[(v8 >> 5) + 1], (uint8x8_t)vdup_n_s8(v8 & 0x1F));
  unsigned int v13 = v8 + a2;
  double v14 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(v12, v9, v10), 5uLL));
  double v15 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[(v13 >> 5) + 1], (uint8x8_t)vdup_n_s8(v13 & 0x1F)), (uint8x8_t)v56[v13 >> 5], (uint8x8_t)vdup_n_s8(32 - (v13 & 0x1F))), 5uLL));
  unsigned int v16 = v13 + a2;
  int16x8_t v17 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[(v16 >> 5) + 1], (uint8x8_t)vdup_n_s8(v16 & 0x1F)), (uint8x8_t)v56[v16 >> 5], (uint8x8_t)vdup_n_s8(32 - (v16 & 0x1F)));
  unsigned int v18 = v16 + a2;
  uint8x8_t v19 = (uint8x8_t)v56[v18 >> 5];
  uint8x8_t v20 = (uint8x8_t)vdup_n_s8(32 - (v18 & 0x1F));
  double v21 = COERCE_DOUBLE(vrshrn_n_s16(v17, 5uLL));
  uint16x8_t v22 = vmull_u8((uint8x8_t)v56[(v18 >> 5) + 1], (uint8x8_t)vdup_n_s8(v18 & 0x1F));
  unsigned int v23 = v18 + a2;
  double v24 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(v22, v19, v20), 5uLL));
  double v25 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[(v23 >> 5) + 1], (uint8x8_t)vdup_n_s8(v23 & 0x1F)), (uint8x8_t)v56[v23 >> 5], (uint8x8_t)vdup_n_s8(32 - (v23 & 0x1F))), 5uLL));
  double v26 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v56[((v23 + a2) >> 5) + 1], (uint8x8_t)vdup_n_s8((v23 + a2) & 0x1F)), (uint8x8_t)v56[(v23 + a2) >> 5], (uint8x8_t)vdup_n_s8(32 - ((v23 + a2) & 0x1F))), 5uLL));
  int16x4_t v27 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v7, *(int8x8_t *)&v11);
  int16x4_t v28 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v7, *(int8x8_t *)&v11);
  int16x4_t v29 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v15);
  int16x4_t v30 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v15);
  int16x4_t v31 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v24);
  int16x4_t v32 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v24);
  int16x4_t v33 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v25, *(int8x8_t *)&v26);
  int16x4_t v34 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v25, *(int8x8_t *)&v26);
  int32x2_t v35 = (int32x2_t)vtrn1_s16(v27, v29);
  int32x2_t v36 = (int32x2_t)vtrn2_s16(v27, v29);
  int32x2_t v37 = (int32x2_t)vtrn1_s16(v28, v30);
  int32x2_t v38 = (int32x2_t)vtrn2_s16(v28, v30);
  int32x2_t v39 = (int32x2_t)vtrn1_s16(v31, v33);
  int32x2_t v40 = (int32x2_t)vtrn2_s16(v31, v33);
  int32x2_t v41 = (int32x2_t)vtrn1_s16(v32, v34);
  int32x2_t v42 = (int32x2_t)vtrn2_s16(v32, v34);
  double v43 = COERCE_DOUBLE(vzip1_s32(v35, v39));
  double v44 = COERCE_DOUBLE(vzip2_s32(v35, v39));
  double v45 = COERCE_DOUBLE(vzip1_s32(v37, v41));
  double v46 = COERCE_DOUBLE(vzip2_s32(v37, v41));
  double v47 = COERCE_DOUBLE(vzip1_s32(v36, v40));
  double v48 = COERCE_DOUBLE(vzip2_s32(v36, v40));
  double v49 = COERCE_DOUBLE(vzip1_s32(v38, v42));
  double v50 = COERCE_DOUBLE(vzip2_s32(v38, v42));
  if (a3)
  {
    double v26 = v50;
    double v25 = v48;
    double v24 = v46;
    double v21 = v44;
    double v15 = v49;
    double v14 = v47;
    double v11 = v45;
    double v7 = v43;
  }
  *a5 = v7;
  *(double *)((char *)a5 + a4) = v11;
  double v51 = (double *)((char *)a5 + a4 + a4);
  *double v51 = v14;
  double v52 = (double *)((char *)v51 + a4);
  *double v52 = v15;
  double v53 = (double *)((char *)v52 + a4);
  *double v53 = v21;
  double v54 = (double *)((char *)v53 + a4);
  *double v54 = v24;
  double v55 = (double *)((char *)v54 + a4);
  *double v55 = v25;
  *(double *)((char *)v55 + a4) = v26;
  return result;
}

uint64_t sub_1BBA4F70C(uint64_t result, int8x16x2_t *a2, uint64_t a3, double *a4)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v6 = byte_1BBB795E8[(int)result];
  int v7 = (char)v6;
  unsigned int v82 = result;
  if ((int)result >= 18)
  {
    if ((v6 & 0x80) == 0)
    {
      val = a2[2].val;
      uint64_t v8 = 7;
      uint64_t v9 = 3;
      uint64_t v10 = 5;
LABEL_6:
      int8x16_t v12 = a2->val[v8];
      int8x16_t v13 = a2[v9].val[0];
      int8x16_t v14 = a2->val[v10];
      int8x16_t v85 = *val;
      int8x16_t v86 = v14;
      uint64_t v83 = 8 * a3;
      uint64_t v84 = 8;
      uint64_t v15 = *(&v83 + ((int)result > 17));
      uint64_t v81 = *(&v83 + ((int)result < 18));
      int8x16_t v87 = v13;
      int8x16_t v88 = v12;
      int v16 = 4;
      unsigned int v17 = v6;
      do
      {
        double v18 = *(double *)&v85.i64[v17 >> 8];
        double v19 = *(double *)&v85.i64[(v17 >> 8) + 1];
        double v20 = *((double *)&v85 + (v17 >> 8) + 2);
        double v21 = *((double *)&v85 + (v17 >> 8) + 3);
        double v22 = *((double *)&v85 + (v17 >> 8) + 4);
        unint64_t v23 = *((unint64_t *)&v85 + (v17 >> 8) + 5);
        double v24 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 4uLL));
        double v25 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, *(int8x8_t *)&v20, 4uLL));
        double v26 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v21, 4uLL));
        double v27 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v22, 4uLL));
        double v28 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v22, (int8x8_t)v23, 4uLL));
        double v29 = COERCE_DOUBLE(vshrd_n_u64(v23, 0x20uLL));
        unsigned int v30 = v17 - 128;
        if (v17 < 0x80u)
        {
          unsigned int v30 = v17;
        }
        else
        {
          double v22 = v28;
          double v21 = v27;
          double v20 = v26;
          double v19 = v25;
          double v18 = v24;
          *(double *)&unint64_t v23 = v29;
        }
        double v31 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 2uLL));
        double v32 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, *(int8x8_t *)&v20, 2uLL));
        double v33 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v21, 2uLL));
        double v34 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v22, 2uLL));
        double v35 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v22, (int8x8_t)v23, 2uLL));
        if (v30 >= 0x40) {
          *(double *)&int8x8_t v36 = v35;
        }
        else {
          *(double *)&int8x8_t v36 = v22;
        }
        if (v30 >= 0x40) {
          *(double *)&int8x8_t v37 = v34;
        }
        else {
          *(double *)&int8x8_t v37 = v21;
        }
        if (v30 >= 0x40) {
          *(double *)&int8x8_t v38 = v33;
        }
        else {
          *(double *)&int8x8_t v38 = v20;
        }
        if (v30 >= 0x40) {
          *(double *)&int8x8_t v39 = v32;
        }
        else {
          *(double *)&int8x8_t v39 = v19;
        }
        if (v30 < 0x40)
        {
          uint64_t v40 = v30;
        }
        else
        {
          double v18 = v31;
          uint64_t v40 = v30 - 64;
        }
        BOOL v41 = (int)result < 18;
        sub_1BBA4F450(v40, v6, v41, a3, a4, *(int8x8_t *)&v18, v39);
        sub_1BBA4F450(v40, v6, v41, a3, (double *)((char *)a4 + v15), v39, v38);
        sub_1BBA4F450(v40, v6, v41, a3, (double *)((char *)a4 + 2 * v15), v38, v37);
        sub_1BBA4F450(v40, v6, v41, a3, (double *)((char *)a4 + 3 * v15), v37, v36);
        int8x8_t result = v82;
        a4 = (double *)((char *)a4 + v81);
        v17 += 8 * v6;
        --v16;
      }
      while (v16);
      return result;
    }
    double v47 = (int8x16_t *)&qword_1BBB79610[4 * (result - 18)];
    int8x16_t v48 = vqtbl2q_s8(*a2, v47[1]);
    int8x16_t v85 = vqtbl2q_s8(*a2, *v47);
    int8x16_t v49 = vextq_s8(v48, v48, 8uLL);
    v49.i8[7] = a2[-1].val[1].i8[15];
    v86.i64[0] = v48.i64[0];
    v86.i64[1] = v49.i64[0];
    double v46 = a2 + 2;
    uint64_t v45 = 5;
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      uint64_t v8 = 3;
      uint64_t v9 = 1;
      uint64_t v10 = 1;
      val = (int8x16_t *)a2;
      goto LABEL_6;
    }
    int32x2_t v42 = (int8x16_t *)&qword_1BBB79610[4 * (18 - result)];
    int8x16x2_t v90 = a2[2];
    int8x16_t v43 = vqtbl2q_s8(v90, v42[1]);
    int8x16_t v85 = vqtbl2q_s8(v90, *v42);
    int8x16_t v44 = vextq_s8(v43, v43, 8uLL);
    v44.i8[7] = a2[-1].val[1].i8[15];
    v86.i64[0] = v43.i64[0];
    v86.i64[1] = v44.i64[0];
    uint64_t v45 = 1;
    double v46 = a2;
  }
  int8x16_t v50 = a2->val[v45];
  int8x16_t v87 = v46->val[0];
  int8x16_t v88 = v50;
  uint64_t v83 = 8 * a3;
  uint64_t v84 = 8;
  uint64_t v51 = *(&v83 + ((int)result > 17));
  uint64_t v52 = *(&v83 + ((int)result < 18));
  int v53 = 4;
  int v54 = v7;
  do
  {
    double v55 = (double *)&v86.i64[(v54 >> 8) + 1];
    double v57 = v55[4];
    double v56 = v55[5];
    double v59 = v55[2];
    double v58 = v55[3];
    double v61 = *v55;
    double v60 = v55[1];
    double v62 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v57, *(int8x8_t *)&v56, 4uLL));
    double v63 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v58, *(int8x8_t *)&v57, 4uLL));
    double v64 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v59, *(int8x8_t *)&v58, 4uLL));
    double v65 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v60, *(int8x8_t *)&v59, 4uLL));
    double v66 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)v55, *(int8x8_t *)&v60, 4uLL));
    double v67 = COERCE_DOUBLE(vshld_n_s64(*(void *)v55, 0x20uLL));
    unsigned int v68 = (v54 | 0xFFFFFF00) + 128;
    if ((v54 | 0xFFFFFF00) > 0xFFFFFF7F)
    {
      unsigned int v68 = v54 | 0xFFFFFF00;
    }
    else
    {
      double v56 = v62;
      double v57 = v63;
      double v58 = v64;
      double v59 = v65;
      double v60 = v66;
      double v61 = v67;
    }
    double v69 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v57, *(int8x8_t *)&v56, 6uLL));
    double v70 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v58, *(int8x8_t *)&v57, 6uLL));
    double v71 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v59, *(int8x8_t *)&v58, 6uLL));
    double v72 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v60, *(int8x8_t *)&v59, 6uLL));
    double v73 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v61, *(int8x8_t *)&v60, 6uLL));
    if (v68 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v74 = v69;
    }
    else {
      *(double *)&int8x8_t v74 = v56;
    }
    if (v68 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v75 = v70;
    }
    else {
      *(double *)&int8x8_t v75 = v57;
    }
    if (v68 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v76 = v71;
    }
    else {
      *(double *)&int8x8_t v76 = v58;
    }
    if (v68 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v77 = v72;
    }
    else {
      *(double *)&int8x8_t v77 = v59;
    }
    if (v68 <= 0xFFFFFFBF) {
      *(double *)&int8x8_t v78 = v73;
    }
    else {
      *(double *)&int8x8_t v78 = v60;
    }
    if (v68 <= 0xFFFFFFBF) {
      uint64_t v79 = v68 + 64;
    }
    else {
      uint64_t v79 = v68;
    }
    BOOL v80 = (int)result < 18;
    sub_1BBA4F154(v79, v7, v80, a3, a4, v78, v77);
    sub_1BBA4F154(v79, v7, v80, a3, (double *)((char *)a4 + v51), v77, v76);
    sub_1BBA4F154(v79, v7, v80, a3, (double *)((char *)a4 + 2 * v51), v76, v75);
    sub_1BBA4F154(v79, v7, v80, a3, (double *)((char *)a4 + 3 * v51), v75, v74);
    int8x8_t result = v82;
    a4 = (double *)((char *)a4 + v52);
    v54 += 8 * v7;
    --v53;
  }
  while (v53);
  return result;
}

uint64_t sub_1BBA4FB80(int a1, int8x16_t *a2, uint64_t a3, double *a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = byte_1BBB795E8[a1];
  uint64_t v8 = byte_1BBB795E8[a1];
  if (a1 >= 18)
  {
    if ((v7 & 0x80000000) == 0)
    {
      int8x16_t v9 = a2[2];
      int8x16_t v10 = a2[3];
      goto LABEL_6;
    }
    int8x16_t v37 = vqtbl1q_s8(*a2, *(int8x16_t *)qword_1BBB79610[4 * (a1 - 18) + 2].i8);
    int8x16_t v35 = vextq_s8(v37, v37, 8uLL);
    v35.i8[7] = a2[-1].i8[15];
    v66.i64[0] = v37.i64[0];
    v66.i64[1] = v35.i64[0];
    int8x16_t v36 = a2[2];
  }
  else
  {
    if ((v8 & 0x80) == 0)
    {
      int8x16_t v9 = *a2;
      int8x16_t v10 = a2[1];
LABEL_6:
      int8x16_t v66 = v9;
      v67.i64[0] = v10.i64[0];
      int8x8_t v60 = (int8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
      int8x8_t v62 = *(int8x8_t *)v10.i8;
      uint64_t v11 = v7;
      BOOL v12 = a1 > 17;
      BOOL v13 = a1 < 18;
      v67.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
      uint64_t v64 = 8 * a3;
      uint64_t v65 = 8;
      sub_1BBA4F450(v8, v8, v13, a3, a4, *(int8x8_t *)v9.i8, v60);
      uint64_t v14 = *(&v64 + v12);
      sub_1BBA4F450(v8, v8, a1 < 18, a3, (double *)((char *)a4 + v14), v60, v62);
      uint64_t v15 = (double *)((char *)a4 + *(&v64 + v13));
      unint64_t v16 = (unint64_t)(9 * v11) >> 8;
      double v17 = *(double *)&v66.i64[v16];
      double v18 = *(double *)&v66.i64[(v16 + 1)];
      double v19 = *(double *)&v66.i64[(v16 + 2)];
      unsigned int v20 = (9 * v11);
      unint64_t v21 = v66.u64[(v16 + 3)];
      double v22 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v17, *(int8x8_t *)&v18, 4uLL));
      double v23 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 4uLL));
      double v24 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, (int8x8_t)v21, 4uLL));
      double v25 = COERCE_DOUBLE(vshrd_n_u64(v21, 0x20uLL));
      if (v20 >= 0x80)
      {
        double v19 = v24;
        double v18 = v23;
        double v17 = v22;
        *(double *)&unint64_t v21 = v25;
        v20 -= 128;
      }
      double v26 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v17, *(int8x8_t *)&v18, 2uLL));
      double v27 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 2uLL));
      double v28 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, (int8x8_t)v21, 2uLL));
      if (v20 >= 0x40) {
        *(double *)&int8x8_t v29 = v28;
      }
      else {
        *(double *)&int8x8_t v29 = v19;
      }
      if (v20 >= 0x40) {
        *(double *)&int8x8_t v30 = v27;
      }
      else {
        *(double *)&int8x8_t v30 = v18;
      }
      if (v20 < 0x40)
      {
        uint64_t v31 = v20;
      }
      else
      {
        double v17 = v26;
        uint64_t v31 = v20 - 64;
      }
      BOOL v32 = a1 < 18;
      sub_1BBA4F450(v31, v8, v32, a3, v15, *(int8x8_t *)&v17, v30);
      return sub_1BBA4F450(v31, v8, v32, a3, (double *)((char *)v15 + v14), v30, v29);
    }
    int8x16_t v34 = vqtbl1q_s8(a2[2], *(int8x16_t *)qword_1BBB79610[4 * (18 - a1) + 2].i8);
    int8x16_t v35 = vextq_s8(v34, v34, 8uLL);
    v35.i8[7] = a2[-1].i8[15];
    v66.i64[0] = v34.i64[0];
    v66.i64[1] = v35.i64[0];
    int8x16_t v36 = *a2;
  }
  int8x16_t v67 = v36;
  int8x8_t v61 = (int8x8_t)vextq_s8(v36, v36, 8uLL).u64[0];
  int8x8_t v63 = *(int8x8_t *)v36.i8;
  BOOL v38 = a1 > 17;
  BOOL v39 = a1 < 18;
  uint64_t v64 = 8 * a3;
  uint64_t v65 = 8;
  uint64_t v40 = (double *)&v66.i64[(9 * (int)v7) >> 8];
  sub_1BBA4F154(v7, v7, v39, a3, a4, *(int8x8_t *)v35.i8, *(int8x8_t *)v36.i8);
  uint64_t v41 = *(&v64 + v38);
  sub_1BBA4F154(v7, v7, a1 < 18, a3, (double *)((char *)a4 + v41), v63, v61);
  int32x2_t v42 = (double *)((char *)a4 + *(&v64 + v39));
  unsigned int v43 = (9 * v7) | 0xFFFFFF00;
  double v45 = v40[3];
  double v44 = v40[4];
  uint64_t v47 = *((uint64_t *)v40 + 1);
  double v46 = v40[2];
  double v48 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v44, 4uLL));
  double v49 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v45, 4uLL));
  double v50 = COERCE_DOUBLE(vext_s8((int8x8_t)v47, *(int8x8_t *)&v46, 4uLL));
  double v51 = COERCE_DOUBLE(vshld_n_s64(v47, 0x20uLL));
  if (v43 <= 0xFFFFFF7F)
  {
    double v44 = v48;
    double v45 = v49;
    double v46 = v50;
    *(double *)&uint64_t v47 = v51;
    v43 += 128;
  }
  double v52 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v44, 6uLL));
  double v53 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v45, 6uLL));
  double v54 = COERCE_DOUBLE(vext_s8((int8x8_t)v47, *(int8x8_t *)&v46, 6uLL));
  if (v43 <= 0xFFFFFFBF) {
    *(double *)&int8x8_t v55 = v52;
  }
  else {
    *(double *)&int8x8_t v55 = v44;
  }
  if (v43 <= 0xFFFFFFBF) {
    *(double *)&int8x8_t v56 = v53;
  }
  else {
    *(double *)&int8x8_t v56 = v45;
  }
  if (v43 <= 0xFFFFFFBF) {
    *(double *)&int8x8_t v57 = v54;
  }
  else {
    *(double *)&int8x8_t v57 = v46;
  }
  if (v43 <= 0xFFFFFFBF) {
    uint64_t v58 = v43 + 64;
  }
  else {
    uint64_t v58 = v43;
  }
  BOOL v59 = a1 < 18;
  sub_1BBA4F154(v58, v7, v59, a3, v42, v57, v56);

  return sub_1BBA4F154(v58, v7, v59, a3, (double *)((char *)v42 + v41), v56, v55);
}

uint64_t sub_1BBA4FF38(int a1, int8x8_t *a2, uint64_t a3, double *a4, int8x16_t a5)
{
  int v5 = byte_1BBB795E8[a1];
  int v6 = byte_1BBB795E8[a1];
  if (a1 < 18)
  {
    if ((v6 & 0x80) == 0) {
      return sub_1BBA4F450(byte_1BBB795E8[a1], v6, a1 < 18, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
    }
    *(int8x8_t *)a5.i8 = a2[2];
    *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1BBB79610[4 * (18 - a1) + 3]);
    a5.i8[7] = a2[-1].i8[7];
  }
  else
  {
    if ((v5 & 0x80000000) == 0)
    {
      a2 += 2;
      return sub_1BBA4F450(byte_1BBB795E8[a1], v6, a1 < 18, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
    }
    *(int8x8_t *)a5.i8 = *a2;
    *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1BBB79610[4 * (a1 - 18) + 3]);
    a5.i8[7] = a2[-1].i8[7];
    a2 += 2;
  }
  return sub_1BBA4F154(byte_1BBB795E8[a1], v5, a1 < 18, a3, a4, *(int8x8_t *)a5.i8, *a2);
}

uint64_t sub_1BBA4FFEC(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, double a5, int8x16_t a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v6 = byte_1BBB795E8[(int)result];
  unint64_t v7 = byte_1BBB795E8[(int)result];
  unsigned int v8 = result - 18;
  if ((int)result < 18)
  {
    if ((v6 & 0x80) == 0) {
      goto LABEL_5;
    }
    double v19 = a2 + 1;
    unsigned int v8 = 18 - result;
    int8x16_t v9 = (int8x8_t *)a2;
  }
  else
  {
    int8x16_t v9 = (int8x8_t *)(a2 + 1);
    if ((v6 & 0x80000000) == 0)
    {
      ++a2;
LABEL_5:
      unint64_t v10 = vshrd_n_u64(*a2, 8uLL);
      unint64_t v28 = *a2;
      unint64_t v29 = v10;
      unint64_t v30 = vshrd_n_u64(v28, 0x10uLL);
      unint64_t v31 = vshrd_n_u64(v28, 0x18uLL);
      unint64_t v32 = vshrd_n_u64(v28, 0x20uLL);
      unsigned __int32 v11 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + (v7 >> 5) + 1), (uint8x8_t)vdup_n_s8(v7 & 0x1F)), (uint8x8_t)*(&v28 + (v7 >> 5)), (uint8x8_t)vdup_n_s8(32 - (v7 & 0x1F))), 5uLL).u32[0];
      unsigned __int32 v12 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + (v7 >> 4) + 1), (uint8x8_t)vdup_n_s8(2 * (v7 & 0xF))), (uint8x8_t)*(&v28 + (v7 >> 4)), (uint8x8_t)vdup_n_s8(32 - 2 * (v7 & 0xF))), 5uLL).u32[0];
      int16x8_t v13 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + ((3 * v7) >> 5) + 1), (uint8x8_t)vdup_n_s8((3 * v7) & 0x1F)), (uint8x8_t)*(&v28 + ((3 * v7) >> 5)), (uint8x8_t)vdup_n_s8(32 - ((3 * v7) & 0x1F)));
      unint64_t v14 = v7 >> 3;
      uint8x8_t v15 = (uint8x8_t)*(&v28 + (v7 >> 3));
      unsigned int v16 = 4 * (v7 & 7);
      uint8x8_t v17 = (uint8x8_t)vdup_n_s8(32 - v16);
      uint8x8_t v18 = (uint8x8_t)*(&v28 + (v14 + 1));
      goto LABEL_9;
    }
    double v19 = a2;
  }
  a6.i64[0] = *v19;
  unint64_t v20 = (unint64_t)vext_s8(vqtbl1_s8(a6, qword_1BBB79610[4 * v8 + 3]), *v9, 4uLL);
  unint64_t v21 = vshrd_n_u64(v20, 0x20uLL);
  BYTE3(v20) = *((unsigned char *)a2 - 1);
  unint64_t v28 = v21;
  unint64_t v29 = vshrd_n_u64(v20, 0x18uLL);
  unint64_t v30 = vshrd_n_u64(v20, 0x10uLL);
  unint64_t v31 = vshrd_n_u64(v20, 8uLL);
  unint64_t v32 = v20;
  unsigned __int32 v11 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + ~(v6 >> 5)), (uint8x8_t)vdup_n_s8(v7 & 0x1F)), (uint8x8_t)*(&v28 + -(v6 >> 5)), (uint8x8_t)vdup_n_s8(32 - (v7 & 0x1F))), 5uLL).u32[0];
  unsigned __int32 v12 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + ~(v6 >> 4)), (uint8x8_t)vdup_n_s8(2 * (v7 & 0xF))), (uint8x8_t)*(&v28 + -(v6 >> 4)), (uint8x8_t)vdup_n_s8(32 - 2 * (v7 & 0xF))), 5uLL).u32[0];
  int16x8_t v13 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v28 + ~((3 * v6) >> 5)), (uint8x8_t)vdup_n_s8((3 * v6) & 0x1F)), (uint8x8_t)*(&v28 + -((3 * v6) >> 5)), (uint8x8_t)vdup_n_s8(32 - ((3 * v6) & 0x1Fu)));
  uint8x8_t v15 = (uint8x8_t)*(&v28 + -(v6 >> 3));
  unsigned int v16 = 4 * (v7 & 7);
  uint8x8_t v17 = (uint8x8_t)vdup_n_s8(32 - v16);
  uint8x8_t v18 = (uint8x8_t)*(&v28 + ~(v6 >> 3));
LABEL_9:
  unsigned __int32 v22 = vrshrn_n_s16(v13, 5uLL).u32[0];
  unsigned __int32 v23 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v18, (uint8x8_t)vdup_n_s8(v16)), v15, v17), 5uLL).u32[0];
  if ((int)result > 17)
  {
    *(_DWORD *)a4 = v11;
    *(_DWORD *)(a4 + a3) = v12;
    double v27 = (unsigned __int32 *)(a4 + a3 + a3);
    *double v27 = v22;
    *(unsigned __int32 *)((char *)v27 + a3) = v23;
  }
  else
  {
    *(unsigned char *)a4 = v11;
    *(unsigned char *)(a4 + 1) = v12;
    *(unsigned char *)(a4 + 2) = v22;
    *(unsigned char *)(a4 + 3) = v23;
    double v24 = (unsigned char *)(a4 + a3);
    *double v24 = BYTE1(v11);
    v24[1] = BYTE1(v12);
    _OWORD v24[2] = BYTE1(v22);
    v24[3] = BYTE1(v23);
    double v25 = &v24[a3];
    *double v25 = BYTE2(v11);
    v25[1] = BYTE2(v12);
    v25[2] = BYTE2(v22);
    v25[3] = BYTE2(v23);
    double v26 = &v25[a3];
    *double v26 = HIBYTE(v11);
    v26[1] = HIBYTE(v12);
    v26[2] = HIBYTE(v22);
    v26[3] = HIBYTE(v23);
  }
  return result;
}

void sub_1BBA50284(uint64_t a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2), *(uint8x16_t *)a2), *(uint8x16_t *)(a2 + 16)), *(uint8x8_t *)(a2 + 16)), *(uint8x16_t *)(a2 + 32)), *(uint8x8_t *)(a2 + 32)), *(uint8x16_t *)(a2 + 48)),
                                    *(uint8x8_t *)(a2 + 48)),
                                  *(uint8x16_t *)(a2 + 128)),
                                *(uint8x8_t *)(a2 + 128)),
                              *(uint8x16_t *)(a2 + 144)),
                            *(uint8x8_t *)(a2 + 144)),
                          *(uint8x16_t *)(a2 + 160)),
                        *(uint8x8_t *)(a2 + 160)),
                      *(uint8x16_t *)(a2 + 176)),
                    *(uint8x8_t *)(a2 + 176));
  v4.i64[0] = vpaddq_s16(v4, v4).u64[0];
  *(int16x4_t *)v4.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  v5.i64[1] = v5.i64[0];
  uint8x16_t v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(v5, 7uLL), v5, 7uLL);
  unint64_t v7 = a4 + 2;
  int v8 = 64;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *unint64_t v7 = v6;
    v7[1] = v6;
    unint64_t v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

void sub_1BBA5030C(uint64_t a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2), *(uint8x16_t *)a2), *(uint8x16_t *)(a2 + 16)), *(uint8x8_t *)(a2 + 16)), *(uint8x16_t *)(a2 + 64)), *(uint8x8_t *)(a2 + 64)), *(uint8x16_t *)(a2 + 80)), *(uint8x8_t *)(a2 + 80));
  v4.i64[0] = vpaddq_s16(v4, v4).u64[0];
  *(int16x4_t *)v4.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  v5.i64[1] = v5.i64[0];
  uint8x16_t v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(v5, 6uLL), v5, 6uLL);
  unint64_t v7 = a4 + 1;
  int v8 = 32;
  do
  {
    v7[-1] = v6;
    *unint64_t v7 = v6;
    unint64_t v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

void sub_1BBA50368(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint8x16_t v4 = a2[2];
  int16x8_t v5 = (int16x8_t)vmovl_high_u8(*a2);
  int16x8_t v6 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2->i8), *a2), v4), *(uint8x8_t *)v4.i8);
  v6.i64[0] = vpaddq_s16(v6, v6).u64[0];
  *(int16x4_t *)v6.i8 = vpadd_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  *(int16x4_t *)v6.i8 = vpadd_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  v6.i64[1] = v6.i64[0];
  int8x8_t v7 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v6, 5uLL);
  uint16x8_t v8 = vmull_u8((uint8x8_t)v7, (uint8x8_t)0x303030303030302);
  int16x8_t v9 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  uint64_t v10 = (uint64_t)vrshrn_n_s16((int16x8_t)vaddw_u8(v8, *(uint8x8_t *)a2->i8), 2uLL);
  int8x8_t v11 = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)a2->u8[0], *(uint8x8_t *)v4.i8), (uint8x8_t)v7, (uint8x8_t)0x303030303030302), 2uLL);
  int8x8_t v20 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v7, 7uLL);
  int8x8_t v21 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v7, 7uLL);
  int8x8_t v22 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v7, 7uLL);
  int8x8_t v23 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v7, 7uLL);
  int8x8_t v24 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v7, 7uLL);
  int8x8_t v25 = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v7, 7uLL);
  int8x8_t v26 = vext_s8((int8x8_t)v10, v7, 7uLL);
  *a4 = vrshrn_high_n_s16(v11, (int16x8_t)vaddw_high_u8((uint16x8_t)v9, v4), 2uLL);
  unsigned __int32 v12 = &a4->i8[a3];
  for (uint64_t i = 8; i != 64; i += 8)
  {
    *(int8x8_t *)&long long v14 = *(int8x8_t *)((char *)&v19 + i);
    *((int8x8_t *)&v14 + 1) = v7;
    *(_OWORD *)unsigned __int32 v12 = v14;
    v12 += a3;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = (uint64_t)vrshrn_n_s16(vaddq_s16(v9, v5), 2uLL);
  int8x8_t v19 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x38uLL), v7, 7uLL);
  int8x8_t v20 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x30uLL), v7, 7uLL);
  int8x8_t v21 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x28uLL), v7, 7uLL);
  int8x8_t v22 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x20uLL), v7, 7uLL);
  int8x8_t v23 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x18uLL), v7, 7uLL);
  int8x8_t v24 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x10uLL), v7, 7uLL);
  int8x8_t v25 = vext_s8((int8x8_t)vshld_n_s64(v17, 8uLL), v7, 7uLL);
  int8x8_t v26 = vext_s8((int8x8_t)v17, v7, 7uLL);
  do
  {
    *(int8x8_t *)&long long v18 = *(int8x8_t *)((char *)&v19 + v16);
    *((int8x8_t *)&v18 + 1) = v7;
    *(_OWORD *)&v12[v15] = v18;
    v16 += 8;
    v15 += a3;
  }
  while (v16 != 64);
}

int8x8_t sub_1BBA50500(uint64_t a1, uint8x8_t *a2, uint64_t a3, int8x8_t *a4)
{
  uint8x8_t v4 = a2[2];
  int16x4_t v5 = vpadd_s16((int16x4_t)vpaddl_u8(v4), (int16x4_t)vpaddl_u8(*a2));
  int16x4_t v6 = vpadd_s16(v5, v5);
  *(int16x4_t *)v7.i8 = vpadd_s16(v6, v6);
  v7.i64[1] = v7.i64[0];
  *(uint8x8_t *)v7.i8 = vqrshrn_n_u16(v7, 4uLL);
  uint64_t v8 = (uint64_t)vrshrn_n_s16((int16x8_t)vaddw_u8(vmull_u8(*(uint8x8_t *)v7.i8, (uint8x8_t)0x303030303030302), *a2), 2uLL);
  int8x8_t result = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)a2->u8[0], v4), *(uint8x8_t *)v7.i8, (uint8x8_t)0x303030303030302), 2uLL);
  *a4 = result;
  *(int8x8_t *)((char *)a4 + a3) = vext_s8((int8x8_t)vshld_n_s64(v8, 0x30uLL), *(int8x8_t *)v7.i8, 7uLL);
  uint64_t v10 = (int8x8_t *)((char *)a4 + a3 + a3);
  *uint64_t v10 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x28uLL), *(int8x8_t *)v7.i8, 7uLL);
  int8x8_t v11 = (int8x8_t *)((char *)v10 + a3);
  *int8x8_t v11 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x20uLL), *(int8x8_t *)v7.i8, 7uLL);
  unsigned __int32 v12 = (int8x8_t *)((char *)v11 + a3);
  *unsigned __int32 v12 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x18uLL), *(int8x8_t *)v7.i8, 7uLL);
  int16x8_t v13 = (int8x8_t *)((char *)v12 + a3);
  *int16x8_t v13 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x10uLL), *(int8x8_t *)v7.i8, 7uLL);
  long long v14 = (int8x8_t *)((char *)v13 + a3);
  *long long v14 = vext_s8((int8x8_t)vshld_n_s64(v8, 8uLL), *(int8x8_t *)v7.i8, 7uLL);
  *(int8x8_t *)((char *)v14 + a3) = vext_s8((int8x8_t)v8, *(int8x8_t *)v7.i8, 7uLL);
  return result;
}

int16x8_t sub_1BBA505BC(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  int8x8_t v4 = (int8x8_t)a2[1];
  int16x4_t v5 = (int16x4_t)vpaddl_u8((uint8x8_t)vext_s8((int8x8_t)vshld_n_s64(*a2, 0x20uLL), v4, 4uLL));
  int16x4_t v6 = vpadd_s16(v5, v5);
  *(int16x4_t *)v7.i8 = vpadd_s16(v6, v6);
  v7.i64[1] = v7.i64[0];
  uint8x8_t v8 = vqrshrn_n_u16(v7, 3uLL);
  int16x8_t result = (int16x8_t)vaddw_u8(vmull_u8(v8, (uint8x8_t)0x303030303030302), *(uint8x8_t *)a2);
  *(int8x8_t *)v7.i8 = vrshrn_n_s16(result, 2uLL);
  *a4 = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)*a2, (uint8x8_t)v4), v8, (uint8x8_t)0x303030303030302), 2uLL).u32[0];
  uint64_t v10 = (char *)a4 + a3;
  *uint64_t v10 = v7.i8[1];
  v10[1] = v8.i8[1];
  v10[2] = v8.i8[1];
  v10[3] = v8.i8[1];
  int8x8_t v11 = (char *)a4 + a3 + a3;
  *int8x8_t v11 = v7.i8[2];
  v11[1] = v8.i8[2];
  v11[2] = v8.i8[2];
  v11[3] = v8.i8[2];
  unsigned __int32 v12 = &v11[a3];
  *unsigned __int32 v12 = v7.i8[3];
  v12[1] = v8.i8[3];
  v12[2] = v8.i8[3];
  v12[3] = v8.i8[3];
  return result;
}

int8x16_t sub_1BBA50624(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  long long v6 = a2[2];
  long long v7 = a2[3];
  v24[0] = *a2;
  v24[1] = v5;
  _OWORD v24[2] = v6;
  v24[3] = v7;
  do
  {
    int8x8_t v8 = *(int8x8_t *)((char *)v24 + v4);
    int8x16_t v9 = vdupq_lane_s8(v8, 0);
    int8x16_t v10 = vdupq_lane_s8(v8, 1);
    int8x16_t v11 = vdupq_lane_s8(v8, 2);
    int8x16_t v12 = vdupq_lane_s8(v8, 3);
    int8x16_t v13 = vdupq_lane_s8(v8, 4);
    int8x16_t v14 = vdupq_lane_s8(v8, 5);
    int8x16_t v15 = vdupq_lane_s8(v8, 6);
    int8x16_t result = vdupq_lane_s8(v8, 7);
    *a4 = v9;
    a4[1] = v9;
    a4[2] = v9;
    a4[3] = v9;
    uint64_t v17 = (int8x16_t *)((char *)a4 + a3);
    *uint64_t v17 = v10;
    v17[1] = v10;
    v17[2] = v10;
    v17[3] = v10;
    long long v18 = (int8x16_t *)((char *)a4 + a3 + a3);
    *long long v18 = v11;
    v18[1] = v11;
    v18[2] = v11;
    v18[3] = v11;
    int8x8_t v19 = (int8x16_t *)((char *)v18 + a3);
    *int8x8_t v19 = v12;
    v19[1] = v12;
    v19[2] = v12;
    v19[3] = v12;
    int8x8_t v20 = (int8x16_t *)((char *)v19 + a3);
    *int8x8_t v20 = v13;
    v20[1] = v13;
    v20[2] = v13;
    v20[3] = v13;
    int8x8_t v21 = (int8x16_t *)((char *)v20 + a3);
    *int8x8_t v21 = v14;
    v21[1] = v14;
    v21[2] = v14;
    v21[3] = v14;
    int8x8_t v22 = (int8x16_t *)((char *)v21 + a3);
    *int8x8_t v22 = v15;
    v22[1] = v15;
    v22[2] = v15;
    v22[3] = v15;
    int8x8_t v23 = (int8x16_t *)((char *)v22 + a3);
    *int8x8_t v23 = result;
    v23[1] = result;
    v23[2] = result;
    v23[3] = result;
    a4 = (int8x16_t *)((char *)v23 + a3);
    v4 += 8;
  }
  while (v4 != 64);
  return result;
}

int8x16_t sub_1BBA5071C(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  v22[0] = *a2;
  v22[1] = v5;
  do
  {
    int8x8_t v6 = *(int8x8_t *)((char *)v22 + v4);
    int8x16_t v7 = vdupq_lane_s8(v6, 0);
    int8x16_t v8 = vdupq_lane_s8(v6, 1);
    int8x16_t v9 = vdupq_lane_s8(v6, 2);
    int8x16_t v10 = vdupq_lane_s8(v6, 3);
    int8x16_t v11 = vdupq_lane_s8(v6, 4);
    int8x16_t v12 = vdupq_lane_s8(v6, 5);
    int8x16_t v13 = vdupq_lane_s8(v6, 6);
    int8x16_t result = vdupq_lane_s8(v6, 7);
    *a4 = v7;
    a4[1] = v7;
    int8x16_t v15 = (int8x16_t *)((char *)a4 + a3);
    *int8x16_t v15 = v8;
    v15[1] = v8;
    uint64_t v16 = (int8x16_t *)((char *)a4 + a3 + a3);
    *uint64_t v16 = v9;
    v16[1] = v9;
    uint64_t v17 = (int8x16_t *)((char *)v16 + a3);
    *uint64_t v17 = v10;
    v17[1] = v10;
    long long v18 = (int8x16_t *)((char *)v17 + a3);
    *long long v18 = v11;
    v18[1] = v11;
    int8x8_t v19 = (int8x16_t *)((char *)v18 + a3);
    *int8x8_t v19 = v12;
    v19[1] = v12;
    int8x8_t v20 = (int8x16_t *)((char *)v19 + a3);
    *int8x8_t v20 = v13;
    v20[1] = v13;
    int8x8_t v21 = (int8x16_t *)((char *)v20 + a3);
    *int8x8_t v21 = result;
    v21[1] = result;
    a4 = (int8x16_t *)((char *)v21 + a3);
    v4 += 8;
  }
  while (v4 != 32);
  return result;
}

int8x16_t sub_1BBA507E8(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  int8x16_t v4 = *(int8x16_t *)a2;
  int16x8_t v5 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0));
  *a4 = vqmovun_high_s16(vqmovun_s16(vsraq_n_s16(v5, (int16x8_t)vsubl_u8(*(uint8x8_t *)(a2 + 32), (uint8x8_t)vdup_n_s8(*(unsigned __int8 *)(a2 - 1))), 1uLL)), vsraq_n_s16(v5, (int16x8_t)vsubl_high_u8(*(uint8x16_t *)(a2 + 32), (uint8x16_t)vdupq_n_s8(*(unsigned __int8 *)(a2 - 1))), 1uLL));
  *(int8x16_t *)((char *)a4 + a3) = vdupq_lane_s8(*(int8x8_t *)v4.i8, 1);
  int8x8_t v6 = (int8x16_t *)((char *)a4 + a3 + a3);
  *int8x8_t v6 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 2);
  int8x16_t v7 = (int8x16_t *)((char *)v6 + a3);
  *int8x16_t v7 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 3);
  int8x16_t v8 = (int8x16_t *)((char *)v7 + a3);
  *int8x16_t v8 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 4);
  int8x16_t v9 = (int8x16_t *)((char *)v8 + a3);
  *int8x16_t v9 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 5);
  int8x16_t v10 = (int8x16_t *)((char *)v9 + a3);
  *int8x16_t v10 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 6);
  int8x16_t v11 = (int8x16_t *)((char *)v10 + a3);
  *int8x16_t v11 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 7);
  int8x16_t result = vdupq_laneq_s8(v4, 8);
  int8x16_t v13 = (int8x16_t *)((char *)v11 + a3);
  *int8x16_t v13 = result;
  int8x16_t v14 = (int8x16_t *)((char *)v13 + a3);
  *int8x16_t v14 = vdupq_laneq_s8(v4, 9);
  int8x16_t v15 = (int8x16_t *)((char *)v14 + a3);
  *int8x16_t v15 = vdupq_laneq_s8(v4, 10);
  uint64_t v16 = (int8x16_t *)((char *)v15 + a3);
  *uint64_t v16 = vdupq_laneq_s8(v4, 11);
  uint64_t v17 = (int8x16_t *)((char *)v16 + a3);
  *uint64_t v17 = vdupq_laneq_s8(v4, 12);
  long long v18 = (int8x16_t *)((char *)v17 + a3);
  *long long v18 = vdupq_laneq_s8(v4, 13);
  int8x8_t v19 = (int8x16_t *)((char *)v18 + a3);
  *int8x8_t v19 = vdupq_laneq_s8(v4, 14);
  *(int8x16_t *)((char *)v19 + a3) = vdupq_laneq_s8(v4, 15);
  return result;
}

int8x8_t sub_1BBA508D8(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  int8x8_t v4 = *(int8x8_t *)a2;
  int16x8_t v5 = (const char *)(a2 - 1);
  uint8x8_t v6 = (uint8x8_t)vld1_dup_s8(v5);
  *a4 = vqmovun_s16(vsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0)), (int16x8_t)vsubl_u8(*(uint8x8_t *)(a2 + 16), v6), 1uLL));
  int8x8_t v7 = vdup_lane_s8(v4, 1);
  int8x8_t v8 = vdup_lane_s8(v4, 2);
  int8x8_t v9 = vdup_lane_s8(v4, 3);
  int8x8_t v10 = vdup_lane_s8(v4, 4);
  int8x8_t v11 = vdup_lane_s8(v4, 5);
  int8x8_t v12 = vdup_lane_s8(v4, 6);
  int8x8_t result = vdup_lane_s8(v4, 7);
  *(int8x8_t *)((char *)a4 + a3) = v7;
  int8x16_t v14 = (int8x8_t *)((char *)a4 + a3 + a3);
  *int8x16_t v14 = v8;
  int8x16_t v15 = (int8x8_t *)((char *)v14 + a3);
  *int8x16_t v15 = v9;
  uint64_t v16 = (int8x8_t *)((char *)v15 + a3);
  *uint64_t v16 = v10;
  uint64_t v17 = (int8x8_t *)((char *)v16 + a3);
  *uint64_t v17 = v11;
  long long v18 = (int8x8_t *)((char *)v17 + a3);
  *long long v18 = v12;
  *(int8x8_t *)((char *)v18 + a3) = result;
  return result;
}

int8x8_t sub_1BBA50954(uint16x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int8x8_t v5 = *(int8x8_t *)a3;
  *(int16x4_t *)a1.i8 = vshr_n_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(a3 + 8)), vdup_n_s16(*(unsigned __int8 *)(a3 - 1))), 1uLL);
  *a5 = vqmovun_s16((int16x8_t)vaddw_u8(a1, (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a3, 0))).u32[0];
  *(_DWORD *)((char *)a5 + a4) = vdup_lane_s8(v5, 1).u32[0];
  uint8x8_t v6 = (_DWORD *)((char *)a5 + a4 + a4);
  *uint8x8_t v6 = vdup_lane_s8(v5, 2).u32[0];
  int8x8_t result = vdup_lane_s8(v5, 3);
  *(_DWORD *)((char *)v6 + a4) = result.i32[0];
  return result;
}

void sub_1BBA509A0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[8];
  long long v5 = a2[9];
  long long v6 = a2[10];
  long long v7 = a2[11];
  int8x8_t v8 = (_OWORD *)(a4 + 32);
  int v9 = 64;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *int8x8_t v8 = v6;
    v8[1] = v7;
    int8x8_t v8 = (_OWORD *)((char *)v8 + a3);
    --v9;
  }
  while (v9);
}

void sub_1BBA509C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = (_OWORD *)(a4 + 16);
  int v7 = 32;
  do
  {
    *(v6 - 1) = v4;
    *long long v6 = v5;
    long long v6 = (_OWORD *)((char *)v6 + a3);
    --v7;
  }
  while (v7);
}

void sub_1BBA509E8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(unsigned __int8 *)(a2 - 1);
  int8x16_t v6 = *(int8x16_t *)(a2 + 32);
  unint64_t v7 = vextq_s8(v6, v6, 8uLL).u64[0];
  int16x8_t v8 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)v6.i8, 0));
  int8x8_t v9 = (int8x8_t)vshrd_n_u64(v6.u64[0], 8uLL);
  uint64_t v10 = (uint64_t)vqmovun_s16(vsraq_n_s16(v8, (int16x8_t)vsubl_u8(*(uint8x8_t *)a2, (uint8x8_t)vdup_n_s8(v5)), 1uLL));
  int16x8_t v11 = vshrq_n_s16((int16x8_t)vsubl_high_u8(*(uint8x16_t *)a2, (uint8x16_t)vdupq_n_s8(v5)), 1uLL);
  int8x8_t v16 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x38uLL), v9, 7uLL);
  int8x8_t v17 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v9, 7uLL);
  int8x8_t v18 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v9, 7uLL);
  int8x8_t v19 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v9, 7uLL);
  int8x8_t v20 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v9, 7uLL);
  int8x8_t v21 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v9, 7uLL);
  int8x8_t v22 = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v9, 7uLL);
  int8x8_t v23 = vext_s8((int8x8_t)v10, v9, 7uLL);
  do
  {
    *(int8x8_t *)&long long v12 = *(int8x8_t *)((char *)&v16 + v4);
    *((void *)&v12 + 1) = v7;
    *a4 = v12;
    a4 = (_OWORD *)((char *)a4 + a3);
    v4 += 8;
  }
  while (v4 != 64);
  uint64_t v13 = 0;
  uint64_t v14 = (uint64_t)vqmovun_s16(vaddq_s16(v11, v8));
  int8x8_t v16 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x38uLL), v9, 7uLL);
  int8x8_t v17 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x30uLL), v9, 7uLL);
  int8x8_t v18 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x28uLL), v9, 7uLL);
  int8x8_t v19 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x20uLL), v9, 7uLL);
  int8x8_t v20 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x18uLL), v9, 7uLL);
  int8x8_t v21 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x10uLL), v9, 7uLL);
  int8x8_t v22 = vext_s8((int8x8_t)vshld_n_s64(v14, 8uLL), v9, 7uLL);
  int8x8_t v23 = vext_s8((int8x8_t)v14, v9, 7uLL);
  do
  {
    *(int8x8_t *)&long long v15 = *(int8x8_t *)((char *)&v16 + v13);
    *((void *)&v15 + 1) = v7;
    *a4 = v15;
    a4 = (_OWORD *)((char *)a4 + a3);
    v13 += 8;
  }
  while (v13 != 64);
}

double sub_1BBA50B54(uint64_t a1, uint8x8_t *a2, uint64_t a3, double *a4)
{
  uint64_t v4 = 0;
  v12[8] = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (char *)&a2[-1] + 7;
  uint8x8_t v6 = (uint8x8_t)vld1_dup_s8(v5);
  unint64_t v7 = (unint64_t)a2[2];
  int16x8_t v8 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8((int8x8_t)v7, 0));
  int8x8_t v9 = (int8x8_t)vshrd_n_u64(v7, 8uLL);
  uint64_t v10 = (uint64_t)vqmovun_s16(vsraq_n_s16(v8, (int16x8_t)vsubl_u8(*a2, v6), 1uLL));
  v12[0] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x38uLL), v9, 7uLL);
  v12[1] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v9, 7uLL);
  v12[2] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v9, 7uLL);
  v12[3] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v9, 7uLL);
  v12[4] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v9, 7uLL);
  v12[5] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v9, 7uLL);
  v12[6] = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v9, 7uLL);
  v12[7] = vext_s8((int8x8_t)v10, v9, 7uLL);
  do
  {
    double result = *(double *)&v12[v4];
    *a4 = result;
    a4 = (double *)((char *)a4 + a3);
    ++v4;
  }
  while (v4 != 8);
  return result;
}

int16x8_t sub_1BBA50C30(uint16x8_t a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, unsigned char *a5)
{
  int8x8_t v5 = (int8x8_t)a3[1];
  *(int16x4_t *)a1.i8 = vshr_n_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*a3), vdup_n_s16(a3[-1].u8[7])), 1uLL);
  result.i64[0] = vaddw_u8(a1, (uint8x8_t)vdup_lane_s8(v5, 0)).u64[0];
  result.i64[1] = result.i64[0];
  unsigned __int32 v7 = vqmovun_s16(result).u32[0];
  unsigned __int32 v8 = vdup_lane_s8(v5, 1).u32[0];
  unsigned __int32 v9 = vdup_lane_s8(v5, 2).u32[0];
  unsigned __int32 v10 = vdup_lane_s8(v5, 3).u32[0];
  *a5 = v7;
  a5[1] = v8;
  a5[2] = v9;
  a5[3] = v10;
  int16x8_t v11 = &a5[a4];
  *int16x8_t v11 = BYTE1(v7);
  v11[1] = BYTE1(v8);
  v11[2] = BYTE1(v9);
  v11[3] = BYTE1(v10);
  long long v12 = &v11[a4];
  *long long v12 = BYTE2(v7);
  v12[1] = BYTE2(v8);
  v12[2] = BYTE2(v9);
  v12[3] = BYTE2(v10);
  uint64_t v13 = &v12[a4];
  *uint64_t v13 = HIBYTE(v7);
  v13[1] = HIBYTE(v8);
  v13[2] = HIBYTE(v9);
  v13[3] = HIBYTE(v10);
  return result;
}

_OWORD *sub_1BBA50C78(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  v81[0] = xmmword_1BBB6F8B0;
  v81[1] = xmmword_1BBB6F8C0;
  v81[2] = xmmword_1BBB6F8D0;
  v81[3] = xmmword_1BBB6F8E0;
  v81[4] = xmmword_1BBB6F7C0;
  v81[5] = xmmword_1BBB6F7D0;
  v81[6] = xmmword_1BBB6F7E0;
  v81[7] = xmmword_1BBB6F7F0;
  uint8x16_t v5 = a2[1];
  uint8x16_t v6 = a2[2];
  uint8x16_t v7 = a2[3];
  uint8x16_t v8 = a2[8];
  uint8x16_t v9 = a2[9];
  uint8x16_t v10 = a2[10];
  uint8x16_t v11 = a2[11];
  v80[0] = *a2;
  v80[1] = v5;
  v80[2] = v6;
  v80[3] = v7;
  int16x8_t v72 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8);
  i8 = a2[12].i8;
  uint8x8_t v13 = (uint8x8_t)vld1_dup_s8(i8);
  uint64_t v14 = a2[4].i8;
  *(int8x8_t *)v5.i8 = vld1_dup_s8(v14);
  int16x8_t v77 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v13);
  int16x8_t v78 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v13);
  int16x8_t v76 = (int16x8_t)vmull_u8((uint8x8_t)0x1817161514131211, v13);
  int16x8_t v75 = (int16x8_t)vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v13);
  int16x8_t v74 = (int16x8_t)vmull_u8((uint8x8_t)0x2827262524232221, v13);
  int16x8_t v73 = (int16x8_t)vmull_u8((uint8x8_t)0x302F2E2D2C2B2A29, v13);
  int16x8_t v71 = (int16x8_t)vmull_u8((uint8x8_t)0x403F3E3D3C3B3A39, v13);
  v79[0] = vmull_u8((uint8x8_t)0x807060504030201, *(uint8x8_t *)v5.i8);
  v79[1] = vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, *(uint8x8_t *)v5.i8);
  v79[2] = vmull_u8((uint8x8_t)0x1817161514131211, *(uint8x8_t *)v5.i8);
  v79[3] = vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, *(uint8x8_t *)v5.i8);
  v79[4] = vmull_u8((uint8x8_t)0x2827262524232221, *(uint8x8_t *)v5.i8);
  v79[5] = vmull_u8((uint8x8_t)0x302F2E2D2C2B2A29, *(uint8x8_t *)v5.i8);
  v79[6] = vmull_u8((uint8x8_t)0x3837363534333231, *(uint8x8_t *)v5.i8);
  v79[7] = vmull_u8((uint8x8_t)0x403F3E3D3C3B3A39, *(uint8x8_t *)v5.i8);
  uint64_t v15 = 4 * a3;
  uint64_t v16 = a3 + 48;
  uint64_t v17 = 2 * a3 + 48;
  uint64_t v18 = v17 + a3;
  uint64_t v19 = 5 * a3;
  uint64_t v20 = 6 * a3;
  uint64_t v21 = 7 * a3;
  int16x8_t result = v79;
  int16x8_t v23 = (int16x8_t)vmovl_high_u8(v8);
  int16x8_t v24 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v8.i8);
  int16x8_t v25 = (int16x8_t)vmovl_high_u8(v9);
  int16x8_t v26 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
  int16x8_t v27 = (int16x8_t)vmovl_high_u8(v10);
  int16x8_t v28 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
  int16x8_t v30 = (int16x8_t)vmull_u8((uint8x8_t)0x3837363534333231, v13);
  int16x8_t v29 = (int16x8_t)vmovl_high_u8(v11);
  do
  {
    int16x8_t v31 = (int16x8_t)v79[v4];
    int16x8_t v32 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 0);
    int16x8_t v33 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 1);
    int16x8_t v34 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 2);
    int16x8_t v35 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 3);
    int16x8_t v36 = (int16x8_t)v81[v4];
    uint8x8_t v37 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)((char *)v80 + 8 * v4), 0);
    int8x8_t v38 = *(int8x8_t *)((char *)v80 + 8 * v4);
    int8x16_t v39 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v32, v77), v37, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 0), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v32, v78), v37, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 0), 7uLL);
    uint8x8_t v40 = (uint8x8_t)vdup_lane_s8(v38, 1);
    int16x8_t v41 = (int16x8_t)vmovl_u8(v37);
    int16x8_t v42 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v33, v77), v40, (uint8x8_t)0x38393A3B3C3D3E3FLL);
    int16x8_t v43 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v33, v78), v40, (uint8x8_t)0x3031323334353637);
    int16x8_t v44 = (int16x8_t)vmovl_u8(v40);
    int8x16_t v45 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(v42, v24, *(int16x4_t *)v36.i8, 1), 7uLL), vmlaq_lane_s16(v43, v23, *(int16x4_t *)v36.i8, 1), 7uLL);
    uint8x8_t v46 = (uint8x8_t)vdup_lane_s8(v38, 2);
    int8x16_t v47 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v34, v77), v46, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 2), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v34, v78), v46, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 2), 7uLL);
    uint8x8_t v48 = (uint8x8_t)vdup_lane_s8(v38, 3);
    int16x8_t v49 = (int16x8_t)vmovl_u8(v46);
    int16x8_t v50 = (int16x8_t)vmovl_u8(v48);
    *a4 = v39;
    double v51 = (int8x16_t *)((char *)a4 + v16);
    v51[-3] = v45;
    double v52 = (int8x16_t *)((char *)a4 + v17);
    v52[-3] = v47;
    double v53 = (int8x16_t *)((char *)a4 + v18);
    v53[-3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v35, v77), v48, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 3), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v35, v78), v48, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 3), 7uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v76), v26, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1BBB6F8D0, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v75), v25, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1BBB6F8E0, v41), 7uLL);
    v51[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v76), v26, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1BBB6F8D0, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v75), v25, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1BBB6F8E0, v44), 7uLL);
    v52[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v76), v26, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1BBB6F8D0, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v75), v25, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1BBB6F8E0, v49), 7uLL);
    v53[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v76), v26, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1BBB6F8D0, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v75), v25, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1BBB6F8E0, v50), 7uLL);
    a4[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v74), v28, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1BBB6F7C0, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v73), v27, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1BBB6F7D0, v41), 7uLL);
    v51[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v74), v28, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1BBB6F7C0, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v73), v27, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1BBB6F7D0, v44), 7uLL);
    v52[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v74), v28, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1BBB6F7C0, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v73), v27, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1BBB6F7D0, v49), 7uLL);
    v53[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v74), v28, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1BBB6F7C0, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v73), v27, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1BBB6F7D0, v50), 7uLL);
    a4[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v30), v72, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1BBB6F7E0, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v71), v29, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1BBB6F7F0, v41), 7uLL);
    *double v51 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v30), v72, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1BBB6F7E0, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v71), v29, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1BBB6F7F0, v44), 7uLL);
    *double v52 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v30), v72, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1BBB6F7E0, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v71), v29, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1BBB6F7F0, v49), 7uLL);
    *double v53 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v30), v72, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1BBB6F7E0, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v71), v29, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1BBB6F7F0, v50), 7uLL);
    double v54 = (int8x16_t *)((char *)a4 + v15);
    int16x8_t v55 = vdupq_laneq_s16(v31, 4);
    int16x8_t v56 = vdupq_laneq_s16(v31, 5);
    int16x8_t v57 = vdupq_laneq_s16(v31, 6);
    int16x8_t v58 = vdupq_laneq_s16(v31, 7);
    uint8x8_t v59 = (uint8x8_t)vdup_lane_s8(v38, 4);
    uint8x8_t v60 = (uint8x8_t)vdup_lane_s8(v38, 5);
    int8x16_t v61 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v55, v77), v59, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 4), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v55, v78), v59, (uint8x8_t)0x3031323334353637), v23, v36, 4), 7uLL);
    *(int8x8_t *)v44.i8 = vdup_lane_s8(v38, 6);
    int8x16_t v62 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v57, v77), *(uint8x8_t *)v44.i8, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 6), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v57, v78), *(uint8x8_t *)v44.i8, (uint8x8_t)0x3031323334353637), v23, v36, 6), 7uLL);
    int16x8_t v63 = (int16x8_t)vmovl_u8(v59);
    int16x8_t v64 = (int16x8_t)vmovl_u8(v60);
    uint8x8_t v65 = (uint8x8_t)vdup_lane_s8(v38, 7);
    int16x8_t v66 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v44.i8);
    int16x8_t v67 = (int16x8_t)vmovl_u8(v65);
    *double v54 = v61;
    uint64_t v68 = (int8x16_t *)((char *)a4 + v19);
    *uint64_t v68 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v56, v77), v60, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 5), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v56, v78), v60, (uint8x8_t)0x3031323334353637), v23, v36, 5), 7uLL);
    double v69 = (int8x16_t *)((char *)a4 + v20);
    *double v69 = v62;
    double v70 = (int8x16_t *)((char *)a4 + v21);
    *double v70 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v58, v77), v65, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 7), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v58, v78), v65, (uint8x8_t)0x3031323334353637), v23, v36, 7), 7uLL);
    v54[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v76), v26, v36, 4), (int16x8_t)xmmword_1BBB6F8D0, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v75), v25, v36, 4), (int16x8_t)xmmword_1BBB6F8E0, v63), 7uLL);
    v68[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v76), v26, v36, 5), (int16x8_t)xmmword_1BBB6F8D0, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v75), v25, v36, 5), (int16x8_t)xmmword_1BBB6F8E0, v64), 7uLL);
    v69[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v76), v26, v36, 6), (int16x8_t)xmmword_1BBB6F8D0, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v75), v25, v36, 6), (int16x8_t)xmmword_1BBB6F8E0, v66), 7uLL);
    v70[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v76), v26, v36, 7), (int16x8_t)xmmword_1BBB6F8D0, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v75), v25, v36, 7), (int16x8_t)xmmword_1BBB6F8E0, v67), 7uLL);
    v54[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v74), v28, v36, 4), (int16x8_t)xmmword_1BBB6F7C0, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v73), v27, v36, 4), (int16x8_t)xmmword_1BBB6F7D0, v63), 7uLL);
    v68[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v74), v28, v36, 5), (int16x8_t)xmmword_1BBB6F7C0, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v73), v27, v36, 5), (int16x8_t)xmmword_1BBB6F7D0, v64), 7uLL);
    v69[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v74), v28, v36, 6), (int16x8_t)xmmword_1BBB6F7C0, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v73), v27, v36, 6), (int16x8_t)xmmword_1BBB6F7D0, v66), 7uLL);
    v70[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v74), v28, v36, 7), (int16x8_t)xmmword_1BBB6F7C0, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v73), v27, v36, 7), (int16x8_t)xmmword_1BBB6F7D0, v67), 7uLL);
    v54[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v30), v72, v36, 4), (int16x8_t)xmmword_1BBB6F7E0, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v71), v29, v36, 4), (int16x8_t)xmmword_1BBB6F7F0, v63), 7uLL);
    _OWORD v68[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v30), v72, v36, 5), (int16x8_t)xmmword_1BBB6F7E0, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v71), v29, v36, 5), (int16x8_t)xmmword_1BBB6F7F0, v64), 7uLL);
    v69[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v30), v72, v36, 6), (int16x8_t)xmmword_1BBB6F7E0, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v71), v29, v36, 6), (int16x8_t)xmmword_1BBB6F7F0, v66), 7uLL);
    v70[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v30), v72, v36, 7), (int16x8_t)xmmword_1BBB6F7E0, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v71), v29, v36, 7), (int16x8_t)xmmword_1BBB6F7F0, v67), 7uLL);
    ++v4;
    a4 = (int8x16_t *)((char *)a4 + v15 + v15);
  }
  while (v4 != 8);
  return result;
}

_OWORD *sub_1BBA51458(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  v49[0] = xmmword_1BBB6F7C0;
  v49[1] = xmmword_1BBB6F7D0;
  v49[2] = xmmword_1BBB6F7E0;
  v49[3] = xmmword_1BBB6F7F0;
  uint8x16_t v5 = a2[1];
  uint8x16_t v6 = a2[4];
  uint8x16_t v7 = a2[5];
  uint16x8_t v8 = vmovl_high_u8(*a2);
  v48[0] = vmovl_u8(*(uint8x8_t *)a2->i8);
  v48[1] = v8;
  v48[2] = vmovl_u8(*(uint8x8_t *)v5.i8);
  v48[3] = vmovl_high_u8(v5);
  int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v6.i8);
  int16x8_t v10 = (int16x8_t)vmovl_high_u8(v6);
  int16x8_t v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v7.i8);
  int16x8_t v12 = (int16x8_t)vmovl_high_u8(v7);
  i8 = a2[6].i8;
  uint8x8_t v14 = (uint8x8_t)vld1_dup_s8(i8);
  uint64_t v15 = a2[2].i8;
  uint8x8_t v16 = (uint8x8_t)vld1_dup_s8(v15);
  int16x8_t v17 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v14);
  int16x8_t v18 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v14);
  int16x8_t v19 = (int16x8_t)vmull_u8((uint8x8_t)0x1817161514131211, v14);
  int16x8_t v20 = (int16x8_t)vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v14);
  v47[0] = vmull_u8((uint8x8_t)0x807060504030201, v16);
  v47[1] = vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v16);
  uint64_t v21 = 4 * a3;
  uint64_t v22 = 7 * a3;
  uint64_t v23 = 6 * a3;
  uint64_t v24 = 5 * a3;
  uint64_t v25 = 3 * a3 + 16;
  uint64_t v26 = 2 * a3 + 16;
  v47[2] = vmull_u8((uint8x8_t)0x1817161514131211, v16);
  v47[3] = vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v16);
  uint64_t v27 = a3 + 16;
  int16x8_t result = v47;
  do
  {
    int16x8_t v29 = (int16x8_t)v47[v4];
    int16x8_t v30 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 0);
    int16x8_t v31 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 1);
    int16x8_t v32 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 2);
    int16x8_t v33 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 3);
    int16x8_t v34 = (int16x8_t)v48[v4];
    int16x8_t v35 = (int16x8_t)v49[v4];
    *a4 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1BBB6F7C0, *(int16x4_t *)v34.i8, 0), v30), v9, *(int16x4_t *)v35.i8, 0), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1BBB6F7D0, *(int16x4_t *)v34.i8, 0), v30), v10, *(int16x4_t *)v35.i8, 0), 6uLL);
    int16x8_t v36 = (int8x16_t *)((char *)a4 + v27);
    v36[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1BBB6F7C0, *(int16x4_t *)v34.i8, 1), v31), v9, *(int16x4_t *)v35.i8, 1), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1BBB6F7D0, *(int16x4_t *)v34.i8, 1), v31), v10, *(int16x4_t *)v35.i8, 1), 6uLL);
    uint8x8_t v37 = (int8x16_t *)((char *)a4 + v26);
    v37[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1BBB6F7C0, *(int16x4_t *)v34.i8, 2), v32), v9, *(int16x4_t *)v35.i8, 2), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1BBB6F7D0, *(int16x4_t *)v34.i8, 2), v32), v10, *(int16x4_t *)v35.i8, 2), 6uLL);
    int8x8_t v38 = (int8x16_t *)((char *)a4 + v25);
    v38[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1BBB6F7C0, *(int16x4_t *)v34.i8, 3), v33), v9, *(int16x4_t *)v35.i8, 3), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1BBB6F7D0, *(int16x4_t *)v34.i8, 3), v33), v10, *(int16x4_t *)v35.i8, 3), 6uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v30, v19), v11, *(int16x4_t *)v35.i8, 0), (int16x8_t)xmmword_1BBB6F7E0, *(int16x4_t *)v34.i8, 0), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v30, v20), v12, *(int16x4_t *)v35.i8, 0), (int16x8_t)xmmword_1BBB6F7F0, *(int16x4_t *)v34.i8, 0), 6uLL);
    *int16x8_t v36 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v31, v19), v11, *(int16x4_t *)v35.i8, 1), (int16x8_t)xmmword_1BBB6F7E0, *(int16x4_t *)v34.i8, 1), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v31, v20), v12, *(int16x4_t *)v35.i8, 1), (int16x8_t)xmmword_1BBB6F7F0, *(int16x4_t *)v34.i8, 1), 6uLL);
    *uint8x8_t v37 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v32, v19), v11, *(int16x4_t *)v35.i8, 2), (int16x8_t)xmmword_1BBB6F7E0, *(int16x4_t *)v34.i8, 2), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v32, v20), v12, *(int16x4_t *)v35.i8, 2), (int16x8_t)xmmword_1BBB6F7F0, *(int16x4_t *)v34.i8, 2), 6uLL);
    *int8x8_t v38 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v33, v19), v11, *(int16x4_t *)v35.i8, 3), (int16x8_t)xmmword_1BBB6F7E0, *(int16x4_t *)v34.i8, 3), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v33, v20), v12, *(int16x4_t *)v35.i8, 3), (int16x8_t)xmmword_1BBB6F7F0, *(int16x4_t *)v34.i8, 3), 6uLL);
    int8x16_t v39 = (int8x16_t *)((char *)a4 + v21);
    int16x8_t v40 = vdupq_laneq_s16(v29, 4);
    int16x8_t v41 = vdupq_laneq_s16(v29, 5);
    int16x8_t v42 = vdupq_laneq_s16(v29, 6);
    int16x8_t v43 = vdupq_laneq_s16(v29, 7);
    *int8x16_t v39 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1BBB6F7C0, v34, 4), v40), v9, v35, 4), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1BBB6F7D0, v34, 4), v40), v10, v35, 4), 6uLL);
    int16x8_t v44 = (int8x16_t *)((char *)a4 + v24);
    *int16x8_t v44 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1BBB6F7C0, v34, 5), v41), v9, v35, 5), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1BBB6F7D0, v34, 5), v41), v10, v35, 5), 6uLL);
    int8x16_t v45 = (int8x16_t *)((char *)a4 + v23);
    *int8x16_t v45 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1BBB6F7C0, v34, 6), v42), v9, v35, 6), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1BBB6F7D0, v34, 6), v42), v10, v35, 6), 6uLL);
    uint8x8_t v46 = (int8x16_t *)((char *)a4 + v22);
    *uint8x8_t v46 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1BBB6F7C0, v34, 7), v43), v9, v35, 7), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1BBB6F7D0, v34, 7), v43), v10, v35, 7), 6uLL);
    v39[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v40, v19), v11, v35, 4), (int16x8_t)xmmword_1BBB6F7E0, v34, 4), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v40, v20), v12, v35, 4), (int16x8_t)xmmword_1BBB6F7F0, v34, 4), 6uLL);
    v44[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v41, v19), v11, v35, 5), (int16x8_t)xmmword_1BBB6F7E0, v34, 5), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v41, v20), v12, v35, 5), (int16x8_t)xmmword_1BBB6F7F0, v34, 5), 6uLL);
    v45[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v42, v19), v11, v35, 6), (int16x8_t)xmmword_1BBB6F7E0, v34, 6), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v42, v20), v12, v35, 6), (int16x8_t)xmmword_1BBB6F7F0, v34, 6), 6uLL);
    v46[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v43, v19), v11, v35, 7), (int16x8_t)xmmword_1BBB6F7E0, v34, 7), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v43, v20), v12, v35, 7), (int16x8_t)xmmword_1BBB6F7F0, v34, 7), 6uLL);
    a4 = (int8x16_t *)((char *)v39 + v21);
    ++v4;
  }
  while (v4 != 4);
  return result;
}

int8x16_t sub_1BBA51878(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = (const char *)(a2 + 48);
  uint8x8_t v5 = (uint8x8_t)vld1_dup_s8(v4);
  uint8x16_t v6 = (const char *)(a2 + 16);
  uint8x8_t v7 = (uint8x8_t)vld1_dup_s8(v6);
  int16x8_t v8 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v7);
  int16x8_t v9 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v7);
  int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  int16x8_t v13 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  int8x16_t v14 = *(int8x16_t *)a2;
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0);
  uint16x8_t v16 = vmull_u8(v15, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  uint8x8_t v17 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 1);
  uint16x8_t v18 = vmull_u8(v15, (uint8x8_t)0x1020304050607);
  uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 2);
  uint16x8_t v20 = vmull_u8(v19, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  uint16x8_t v21 = vmull_u8(v19, (uint8x8_t)0x1020304050607);
  uint8x8_t v22 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 3);
  uint16x8_t v23 = vmull_u8(v22, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  uint16x8_t v24 = vmull_u8(v22, (uint8x8_t)0x1020304050607);
  v25.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v25.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  uint8x16_t v26 = *(uint8x16_t *)(a2 + 32);
  int16x8_t v27 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v16, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xF0F0F0F0F0F0F0FLL), v10);
  int16x8_t v28 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v18, v26, v25), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v10);
  v18.i64[0] = 0xE0E0E0E0E0E0E0ELL;
  v18.i64[1] = 0xE0E0E0E0E0E0E0ELL;
  int16x8_t v29 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(v17, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xE0E0E0E0E0E0E0ELL), v11);
  int16x8_t v30 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(v17, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v18), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v11);
  v31.i64[0] = 0xD0D0D0D0D0D0D0DLL;
  v31.i64[1] = 0xD0D0D0D0D0D0D0DLL;
  int16x8_t v32 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v20, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xD0D0D0D0D0D0D0DLL), v12);
  int16x8_t v33 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v21, v26, v31), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v12);
  v31.i64[0] = 0xC0C0C0C0C0C0C0CLL;
  v31.i64[1] = 0xC0C0C0C0C0C0C0CLL;
  *a4 = vrshrn_high_n_s16(vrshrn_n_s16(v27, 5uLL), v28, 5uLL);
  *(int8x16_t *)((char *)a4 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v29, 5uLL), v30, 5uLL);
  int16x8_t v34 = (int8x16_t *)((char *)a4 + a3 + a3);
  *int16x8_t v34 = vrshrn_high_n_s16(vrshrn_n_s16(v32, 5uLL), v33, 5uLL);
  *(int8x16_t *)((char *)v34 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v23, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xC0C0C0C0C0C0C0CLL), v13), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v24, v26, v31), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v13), 5uLL);
  int16x8_t v35 = (int8x16_t *)((char *)a4 + 4 * a3);
  int16x8_t v36 = vdupq_laneq_s16(v8, 4);
  int16x8_t v37 = vdupq_laneq_s16(v8, 5);
  int16x8_t v38 = vdupq_laneq_s16(v8, 6);
  int16x8_t v39 = vdupq_laneq_s16(v8, 7);
  *(int8x8_t *)v8.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 4);
  *(int8x8_t *)v31.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 5);
  *(int8x8_t *)v29.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 6);
  *(int8x8_t *)v21.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 7);
  v24.i64[0] = 0xB0B0B0B0B0B0B0BLL;
  v24.i64[1] = 0xB0B0B0B0B0B0B0BLL;
  int16x8_t v40 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v8.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xB0B0B0B0B0B0B0BLL), v36);
  int16x8_t v41 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v8.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v24), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v36);
  v8.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v8.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  int16x8_t v42 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xA0A0A0A0A0A0A0ALL), v37);
  int16x8_t v43 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v31.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v37);
  v8.i64[0] = 0x909090909090909;
  v8.i64[1] = 0x909090909090909;
  int16x8_t v44 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x909090909090909), v38);
  int16x8_t v45 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v38);
  v8.i64[0] = 0x303030303030303;
  v8.i64[1] = 0x303030303030303;
  *int16x8_t v35 = vrshrn_high_n_s16(vrshrn_n_s16(v40, 5uLL), v41, 5uLL);
  *(int8x16_t *)((char *)v35 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v42, 5uLL), v43, 5uLL);
  uint8x8_t v46 = (int8x16_t *)((char *)v35 + a3 + a3);
  *uint8x8_t v46 = vrshrn_high_n_s16(vrshrn_n_s16(v44, 5uLL), v45, 5uLL);
  *(int8x16_t *)((char *)v46 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 3uLL)), v39), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 3uLL), *(uint8x8_t *)v21.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v39),
                                       5uLL);
  int16x8_t v47 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
  int16x8_t v48 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  int16x8_t v49 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  uint64_t v50 = (int8x16_t *)((char *)v35 + 4 * a3);
  int16x8_t v51 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 3);
  *(int8x8_t *)v44.i8 = vdup_laneq_s8(v14, 8);
  *(int8x8_t *)v29.i8 = vdup_laneq_s8(v14, 9);
  *(int8x8_t *)v21.i8 = vdup_laneq_s8(v14, 10);
  *(int8x8_t *)v41.i8 = vdup_laneq_s8(v14, 11);
  v52.i64[0] = 0x707070707070707;
  v52.i64[1] = 0x707070707070707;
  int16x8_t v53 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v44.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x707070707070707), v47);
  int16x8_t v54 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v44.i8, (uint8x8_t)0x1020304050607), v26, v52), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v47);
  v44.i64[0] = 0x606060606060606;
  v44.i64[1] = 0x606060606060606;
  int16x8_t v55 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x606060606060606), v48);
  int16x8_t v56 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v44), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v48);
  v29.i64[0] = 0x505050505050505;
  v29.i64[1] = 0x505050505050505;
  *uint64_t v50 = vrshrn_high_n_s16(vrshrn_n_s16(v53, 5uLL), v54, 5uLL);
  *(int8x16_t *)((char *)v50 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v55, 5uLL), v56, 5uLL);
  int16x8_t v57 = (int8x16_t *)((char *)v50 + a3 + a3);
  *int16x8_t v57 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x505050505050505), v49), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v29), (uint8x8_t)0x100F0E0D0C0B0A09, v5),
             v49),
           5uLL);
  *(int8x16_t *)((char *)v57 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v41.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 2uLL)), v51), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 2uLL), *(uint8x8_t *)v41.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v51),
                                       5uLL);
  int16x8_t v58 = (int8x16_t *)((char *)v50 + 4 * a3);
  int16x8_t v59 = vdupq_laneq_s16(v9, 4);
  int16x8_t v60 = vdupq_laneq_s16(v9, 5);
  int16x8_t v61 = vdupq_laneq_s16(v9, 6);
  int16x8_t v62 = vdupq_laneq_s16(v9, 7);
  *(int8x8_t *)v51.i8 = vdup_laneq_s8(v14, 12);
  *(int8x8_t *)v53.i8 = vdup_laneq_s8(v14, 13);
  *(int8x8_t *)v55.i8 = vdup_laneq_s8(v14, 14);
  *(int8x8_t *)v14.i8 = vdup_laneq_s8(v14, 15);
  *int16x8_t v58 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v51.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x303030303030303), v59), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v51.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5),
             v59),
           5uLL);
  int16x8_t v63 = (int8x16_t *)((char *)v58 + a3);
  *int16x8_t v63 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v53.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 1uLL)), v60), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 1uLL), *(uint8x8_t *)v53.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v60), 5uLL);
  int16x8_t v64 = (int8x16_t *)((char *)v63 + a3);
  *int16x8_t v64 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(vmull_u8((uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8), *(uint8x8_t *)v55.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), v61), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vaddw_high_u8(vmull_u8(*(uint8x8_t *)v55.i8, (uint8x8_t)0x1020304050607), v26), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v61), 5uLL);
  int8x16_t result = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v14.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), v62), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v5), *(uint8x8_t *)v14.i8, (uint8x8_t)0x1020304050607), v62), 5uLL);
  *(int8x16_t *)((char *)v64 + a3) = result;
  return result;
}

int8x8_t sub_1BBA51C8C(uint64_t a1, int8x8_t *a2, uint64_t a3, int8x8_t *a4)
{
  uint8x8_t v4 = (uint8x8_t)a2[2];
  uint8x8_t v5 = (const char *)&a2[3];
  uint8x8_t v6 = (uint8x8_t)vld1_dup_s8(v5);
  uint8x8_t v7 = (const char *)&a2[1];
  uint8x8_t v8 = (uint8x8_t)vld1_dup_s8(v7);
  int16x8_t v9 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v8);
  int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 3);
  int16x8_t v13 = vdupq_laneq_s16(v9, 4);
  int16x8_t v14 = vdupq_laneq_s16(v9, 5);
  int16x8_t v15 = vdupq_laneq_s16(v9, 6);
  uint16x8_t v16 = vmull_u8((uint8x8_t)0x807060504030201, v6);
  int16x8_t v17 = vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 7), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), vdupq_laneq_s16(v9, 7));
  int16x8_t v18 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 0), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x707070707070707), vdupq_lane_s16(*(int16x4_t *)v9.i8, 0));
  int16x8_t v19 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 1), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x606060606060606), v10);
  int16x8_t v20 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 2), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x505050505050505), v11);
  int16x8_t v21 = vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 3), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), (int16x8_t)vshll_n_u8(v4, 2uLL)), v12);
  int16x8_t v22 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 4), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x303030303030303), v13);
  int16x8_t v23 = vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 5), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), (int16x8_t)vshll_n_u8(v4, 1uLL)), v14);
  int8x8_t result = vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(v16, v4), (uint8x8_t)vdup_lane_s8(*a2, 6), (uint8x8_t)0x1020304050607), v15), 4uLL);
  *a4 = vrshrn_n_s16(v18, 4uLL);
  *(int8x8_t *)((char *)a4 + a3) = vrshrn_n_s16(v19, 4uLL);
  uint8x16_t v25 = (int8x8_t *)((char *)a4 + a3 + a3);
  *uint8x16_t v25 = vrshrn_n_s16(v20, 4uLL);
  uint8x16_t v26 = (int8x8_t *)((char *)v25 + a3);
  *uint8x16_t v26 = vrshrn_n_s16(v21, 4uLL);
  int16x8_t v27 = (int8x8_t *)((char *)v26 + a3);
  *int16x8_t v27 = vrshrn_n_s16(v22, 4uLL);
  int16x8_t v28 = (int8x8_t *)((char *)v27 + a3);
  *int16x8_t v28 = vrshrn_n_s16(v23, 4uLL);
  int16x8_t v29 = (int8x8_t *)((char *)v28 + a3);
  *int16x8_t v29 = result;
  *(int8x8_t *)((char *)v29 + a3) = vrshrn_n_s16(v17, 4uLL);
  return result;
}

int8x8_t sub_1BBA51DE8(uint64_t a1, int8x8_t *a2, uint64_t a3, _DWORD *a4)
{
  int8x8_t v7 = a2[1];
  uint8x8_t v8 = (uint8x8_t)vdup_lane_s8(v7, 4);
  int16x4_t v9 = (int16x4_t)vmull_u8((uint8x8_t)0x807060504030201, (uint8x8_t)vdup_lane_s8(*a2, 4)).u64[0];
  int16x4_t v10 = (int16x4_t)vmovl_u8((uint8x8_t)v7).u64[0];
  uint16x8_t v11 = vmovl_u8((uint8x8_t)*a2);
  *(int16x4_t *)v4.i8 = vmul_n_s16((int16x4_t)0x100020003, v11.i16[0]);
  *(int16x4_t *)v5.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 1);
  *(int16x4_t *)v6.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 2);
  *(int16x4_t *)v11.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 3);
  *(int16x4_t *)v12.i8 = vmla_s16(vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v4, (uint8x8_t)0x807060504030201, v8), vdup_lane_s16(v9, 0)), v10, (int16x4_t)0x3000300030003);
  *(int16x4_t *)v13.i8 = vadd_s16((int16x4_t)*(_OWORD *)&vaddw_u8(vmlal_u8(v6, (uint8x8_t)0x807060504030201, v8), (uint8x8_t)v7), vdup_lane_s16(v9, 2));
  v12.u64[1] = (unint64_t)vadd_s16(vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v5, (uint8x8_t)0x807060504030201, v8), vadd_s16(v10, v10)), vdup_lane_s16(v9, 1));
  v13.u64[1] = (unint64_t)vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v11, (uint8x8_t)0x807060504030201, v8), vdup_lane_s16(v9, 3));
  *(int8x8_t *)v11.i8 = vrshrn_n_s16(v12, 3uLL);
  *a4 = v11.i32[0];
  *(_DWORD *)((char *)a4 + a3) = v11.i32[1];
  int8x8_t result = vrshrn_n_s16(v13, 3uLL);
  int16x8_t v15 = (_DWORD *)((char *)a4 + a3 + a3);
  *int16x8_t v15 = result.i32[0];
  *(_DWORD *)((char *)v15 + a3) = result.i32[1];
  return result;
}

__n128 sub_1BBA51E94(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2 = a1[-1].u8[15];
  int8x8_t v3 = vdup_n_s8(v2);
  *(unsigned char *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[4].u8[0] + 2) >> 2;
  int8x16_t v4 = *a1;
  int8x16_t v5 = a1[1];
  int8x16_t v7 = a1[2];
  int8x16_t v6 = a1[3];
  uint8x8_t v8 = (uint8x8_t)vextq_s8(v4, v4, 8uLL).u64[0];
  uint8x8_t v9 = (uint8x8_t)vextq_s8(v5, v5, 8uLL).u64[0];
  uint8x8_t v10 = (uint8x8_t)vextq_s8(v7, v7, 8uLL).u64[0];
  int8x16_t v11 = vextq_s8(v6, v6, 8uLL);
  uint8x8_t v12 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 9uLL));
  uint8x8_t v13 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 9uLL));
  uint8x8_t v14 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 1uLL));
  uint8x8_t v15 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v6, 9uLL));
  uint8x8_t v16 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v6, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 1uLL));
  *(uint8x8_t *)v4.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)a1->i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), *(uint8x8_t *)a1->i8);
  *(uint8x8_t *)v5.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 1uLL)), *(uint8x8_t *)v5.i8);
  *(uint8x8_t *)v7.i8 = vrhadd_u8(v14, *(uint8x8_t *)v7.i8);
  *(uint8x8_t *)&long long v17 = vrhadd_u8(v16, *(uint8x8_t *)v6.i8);
  v4.u64[1] = (unint64_t)vrhadd_u8(v12, v8);
  v5.u64[1] = (unint64_t)vrhadd_u8(v13, v9);
  *(int8x16_t *)a2 = v4;
  *(int8x16_t *)(a2 + 16) = v5;
  v7.u64[1] = (unint64_t)vrhadd_u8(v15, v10);
  *((uint8x8_t *)&v17 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v6, v11, 9uLL)), *(uint8x8_t *)v11.i8);
  *(int8x16_t *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v17;
  *(unsigned char *)(a2 + 63) = v6.i8[15];
  int8x16_t v18 = a1[4];
  int8x16_t v19 = a1[5];
  int8x16_t v21 = a1[6];
  int8x16_t v20 = a1[7];
  uint8x8_t v22 = (uint8x8_t)vextq_s8(v19, v19, 8uLL).u64[0];
  uint8x8_t v23 = (uint8x8_t)vextq_s8(v21, v21, 8uLL).u64[0];
  int8x16_t v24 = vextq_s8(v20, v20, 8uLL);
  uint8x8_t v25 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v19, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 1uLL));
  uint8x8_t v26 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v21, 9uLL));
  uint8x8_t v27 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v21, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 1uLL));
  uint8x8_t v28 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v20, 9uLL));
  uint8x8_t v29 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v20, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 1uLL));
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v18.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 1uLL)), *(uint8x8_t *)v18.i8);
  *(uint8x8_t *)v18.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v19, 9uLL)), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  *(uint8x8_t *)v19.i8 = vrhadd_u8(v25, *(uint8x8_t *)v19.i8);
  uint8x8_t v30 = vrhadd_u8(v26, v22);
  *(uint8x8_t *)v21.i8 = vrhadd_u8(v27, *(uint8x8_t *)v21.i8);
  uint8x8_t v31 = vrhadd_u8(v28, v23);
  *(uint8x8_t *)&long long v32 = vrhadd_u8(v29, *(uint8x8_t *)v20.i8);
  result.n128_u64[1] = v18.i64[0];
  v19.u64[1] = (unint64_t)v30;
  v21.u64[1] = (unint64_t)v31;
  *((uint8x8_t *)&v32 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v24, 9uLL)), *(uint8x8_t *)v24.i8);
  *(__n128 *)(a2 + 64) = result;
  *(int8x16_t *)(a2 + 80) = v19;
  *(int8x16_t *)(a2 + 96) = v21;
  *(_OWORD *)(a2 + 112) = v32;
  *(unsigned char *)(a2 + 127) = v20.i8[15];
  return result;
}

void sub_1BBA5202C(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2 = a1[-1].u8[15];
  unsigned int v3 = a1[3].u8[15];
  int v4 = v3 + v2 - 2 * a1[1].u8[15];
  if (v4 < 0) {
    int v4 = 2 * a1[1].u8[15] - (v3 + v2);
  }
  if (v4 > 7) {
    goto LABEL_7;
  }
  unsigned int v5 = a1[7].u8[15];
  int v6 = v5 + v2 - 2 * a1[5].u8[15];
  if (v6 < 0) {
    int v6 = 2 * a1[5].u8[15] - (v5 + v2);
  }
  if (v6 < 8)
  {
    unint64_t v7 = 0;
    uint8x8_t v8 = (uint8x8_t)vdup_n_s8(v2);
    *(unsigned char *)(a2 - 1) = v2;
    int16x8_t v9 = (int16x8_t)vmovl_u8(v8);
    int16x8_t v10 = (int16x8_t)vsubl_u8((uint8x8_t)vdup_n_s8(v5), v8);
    int16x8_t v11 = (int16x8_t)vsubl_u8((uint8x8_t)vdup_n_s8(v3), v8);
    int16x8_t v12 = vmulq_s16(v10, (int16x8_t)xmmword_1BBB6F780);
    int16x8_t v13 = vmulq_s16(v11, (int16x8_t)xmmword_1BBB6F780);
    int16x8_t v14 = vshlq_n_s16(v10, 3uLL);
    int16x8_t v15 = vshlq_n_s16(v11, 3uLL);
    do
    {
      uint8x8_t v16 = (int8x8_t *)(a2 + v7);
      v16[8] = vqmovun_s16(vrsraq_n_s16(v9, v12, 6uLL));
      *uint8x8_t v16 = vqmovun_s16(vrsraq_n_s16(v9, v13, 6uLL));
      int16x8_t v12 = vaddq_s16(v12, v14);
      int16x8_t v13 = vaddq_s16(v13, v15);
      BOOL v17 = v7 >= 0x38;
      v7 += 8;
    }
    while (!v17);
  }
  else
  {
LABEL_7:
    sub_1BBA51E94(a1, a2);
  }
}

__n128 sub_1BBA520EC(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2 = a1[-1].u8[15];
  int8x8_t v3 = vdup_n_s8(v2);
  *(unsigned char *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[2].u8[0] + 2) >> 2;
  int8x16_t v4 = *a1;
  int8x16_t v5 = a1[1];
  uint8x8_t v6 = (uint8x8_t)vextq_s8(v4, v4, 8uLL).u64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  uint8x8_t v8 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 9uLL));
  *(uint8x8_t *)v4.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)a1->i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), *(uint8x8_t *)a1->i8);
  *(uint8x8_t *)&long long v9 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 1uLL)), *(uint8x8_t *)v5.i8);
  v4.u64[1] = (unint64_t)vrhadd_u8(v8, v6);
  *((uint8x8_t *)&v9 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 9uLL)), *(uint8x8_t *)v7.i8);
  *(int8x16_t *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 31) = v5.i8[15];
  int8x16_t v10 = a1[2];
  int8x16_t v11 = a1[3];
  int8x16_t v12 = vextq_s8(v11, v11, 8uLL);
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v10.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 1uLL)), *(uint8x8_t *)v10.i8);
  *(uint8x8_t *)&long long v13 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v10, v11, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 1uLL)), *(uint8x8_t *)v11.i8);
  *(uint8x8_t *)&result.n128_i8[8] = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v11, 9uLL)), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  *((uint8x8_t *)&v13 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v12, 9uLL)), *(uint8x8_t *)v12.i8);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v13;
  *(unsigned char *)(a2 + 63) = v11.i8[15];
  return result;
}

__n128 sub_1BBA521D4(int8x8_t *a1, uint64_t a2)
{
  unsigned int v2 = a1[-1].u8[7];
  int8x8_t v3 = vdup_n_s8(v2);
  *(unsigned char *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[2].u8[0] + 2) >> 2;
  int8x16_t v4 = *(int8x16_t *)a1->i8;
  int8x16_t v5 = vextq_s8(v4, v4, 8uLL);
  *(uint8x8_t *)&long long v6 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *a1, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), (uint8x8_t)*a1);
  *((uint8x8_t *)&v6 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1->i8, v5, 9uLL)), *(uint8x8_t *)v5.i8);
  *(_OWORD *)a2 = v6;
  *(unsigned char *)(a2 + 15) = v4.i8[15];
  int8x16_t v7 = *(int8x16_t *)a1[2].i8;
  int8x16_t v8 = vextq_s8(v7, v7, 8uLL);
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v7.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 1uLL)), *(uint8x8_t *)v7.i8);
  *(uint8x8_t *)&result.n128_i8[8] = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v8, 9uLL)), *(uint8x8_t *)v8.i8);
  *(__n128 *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 31) = v7.i8[15];
  return result;
}

uint64_t sub_1BBA5226C(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, char a8)
{
  uint64_t v8 = result;
  *(_WORD *)(result + 18) = 0;
  *(void *)(result + 20) = -1;
  *(void *)(result + 28) = -1;
  *(void *)(result + 36) = 0x4000000040;
  *(_DWORD *)(result + 44) = a4;
  *(_DWORD *)(result + 48) = a5;
  *(void *)(result + 52) = 0x40FFC00040FFC0;
  *(unsigned char *)(result + 146) = a6;
  *(unsigned char *)(result + 145) = a7;
  *(unsigned char *)(result + 144) = a8;
  *(_DWORD *)(result + 148) = 5;
  *(void *)__n128 result = result + 64;
  *(void *)(result + 8) = result + 104;
  *(void *)(result + 152) = 0;
  *(void *)(result + 160) = 0;
  *(void *)(result + 216) = a2;
  *(void *)(result + 224) = a3;
  long long v9 = sub_1BBA54284;
  *(void *)(result + 344) = sub_1BBA54284;
  *(void *)(result + 352) = 0;
  if (*(unsigned char *)(*(void *)(a2 + 79088) + 244)) {
    int8x16_t v10 = sub_1BBA53FA0;
  }
  else {
    int8x16_t v10 = sub_1BBA54284;
  }
  *(void *)(result + 328) = v10;
  *(void *)(result + 336) = 0;
  if (*(unsigned char *)(*(void *)(a2 + 79088) + 245)) {
    long long v9 = sub_1BBA53D68;
  }
  *(void *)(result + 312) = v9;
  *(void *)(result + 320) = 0;
  BOOL v11 = *(unsigned char *)(*(void *)(a2 + 79088) + 54) == 0;
  int8x16_t v12 = sub_1BBA5344C;
  if (!*(unsigned char *)(*(void *)(a2 + 79088) + 54)) {
    int8x16_t v12 = sub_1BBA53718;
  }
  *(void *)(result + 440) = v12;
  *(void *)(result + 448) = 0;
  long long v13 = sub_1BBA524B8;
  if (v11) {
    long long v13 = sub_1BBA52CE8;
  }
  *(void *)(result + 456) = v13;
  *(void *)(result + 464) = 0;
  *(unsigned char *)(result + 16) = 0;
  uint64_t v14 = *(void *)(a2 + 1368);
  int v15 = *(char *)(v14 + 2000);
  *(unsigned char *)(result + 17) = *(unsigned char *)(v14 + 2000);
  int v16 = *(unsigned __int8 *)(v14 + 2013);
  if (v15 == 8)
  {
    BOOL v17 = (void **)(result + 168);
    size_t v18 = (v16 * v16);
  }
  else
  {
    if (v15 > 15)
    {
LABEL_17:
      if (*(unsigned char *)(v8 + 17) == 8)
      {
        *(void *)(v8 + 232) = sub_1BBAE3180;
        *(void *)(v8 + 240) = sub_1BBAE30FC;
        *(void *)(v8 + 248) = sub_1BBAE3078;
        *(void *)(v8 + 256) = sub_1BBAE3024;
        *(void *)(v8 + 264) = sub_1BBAE2FD0;
        *(void *)(v8 + 472) = sub_1BBAE2F2C;
        *(void *)(v8 + 480) = sub_1BBAE2E64;
        *(void *)(v8 + 488) = sub_1BBAE2D44;
        *(void *)(v8 + 496) = sub_1BBAE2C24;
      }
      return result;
    }
    BOOL v17 = (void **)(result + 168);
    size_t v18 = (2 * v16 * v16);
  }
  __n128 result = sub_1BBA12730(v17, v18, 0x10uLL);
  if (!result)
  {
    __n128 result = sub_1BBA12730((void **)(v8 + 184), v18, 0x10uLL);
    if (!result)
    {
      __n128 result = sub_1BBA12730((void **)(v8 + 200), v18, 0x10uLL);
      if (!result) {
        goto LABEL_17;
      }
    }
  }
  return result;
}

uint64_t sub_1BBA524B8(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, signed int a7, uint64_t a8, int32x4_t a9, int32x4_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v16 = a1[28];
  uint64_t v17 = a1[19];
  uint64_t v18 = a1[20];
  v66[0] = a4;
  v66[1] = a5;
  uint64_t v61 = v18;
  uint64_t v62 = v17;
  uint64_t v67 = v17;
  uint64_t v68 = v18;
  uint64_t v69 = a8;
  uint64_t v19 = v16 + 8 * __clz(__rbit32(a4));
  int8x16_t v20 = *(uint64_t (**)(void, void, void, void, void, void))(v19 + 48);
  double v70 = v20;
  uint64_t v71 = *(void *)(v19 + 320);
  uint64_t v21 = (int)a6;
  sub_1BBA52880((uint64_t)a1, a2, a3, a4, a5, a6, *(_DWORD *)(a1[1] + 4 * (int)a6 + 4), a12, a9, a10);
  uint64_t v22 = a1[1];
  *(_DWORD *)(v22 + 32) = 0;
  *(_OWORD *)(v22 + 16) = xmmword_1BBB6F8F0;
  *(_WORD *)(v22 + 36) = 1;
  int v23 = *((__int16 *)a1 + 28);
  if (v23 <= *((__int16 *)a1 + 29))
  {
    do
    {
      int v60 = v23;
      *(_WORD *)(a1[1] + 4 * v21 + 6) = v23;
      for (int i = *((__int16 *)a1 + 26); i <= *((__int16 *)a1 + 27); i += 4)
      {
        *(_WORD *)(a1[1] + 4 * v21 + 4) = i;
        uint64_t v25 = a1[1];
        *(_DWORD *)(v25 + 32) = 0;
        *(_OWORD *)(v25 + 16) = xmmword_1BBB6F8F0;
        *(_WORD *)(v25 + 36) = 1;
        uint8x8_t v26 = (void (*)(void *))a1[43];
        uint64_t v27 = a1[44];
        uint8x8_t v28 = (uint64_t *)((char *)a1 + (v27 >> 1));
        if (v27) {
          uint8x8_t v26 = *(void (**)(void *))(*v28 + v26);
        }
        v26(v28);
        unsigned int v29 = v20(a4, a5, v62, v61, a11, a8);
        uint64_t v30 = a1[1];
        *(void *)(v30 + 16) = v29;
        uint64_t v31 = v30 + 4 * v21;
        int v33 = *(__int16 *)(v31 + 4);
        uint64_t v32 = v31 + 4;
        int v34 = v33 - (__int16)a7;
        if ((v34 + 64) >= 0x80)
        {
          if (v34 >= 0) {
            int v36 = v34;
          }
          else {
            int v36 = -v34;
          }
          unsigned int v35 = 63 - 2 * __clz((v34 < 1) | (2 * v36));
        }
        else
        {
          unsigned int v35 = byte_1BBB7B41C[v34 + 64];
        }
        int v37 = *(__int16 *)(v32 + 2) - (a7 >> 16);
        if ((v37 + 64) >= 0x80)
        {
          if (v37 >= 0) {
            int v39 = *(__int16 *)(v32 + 2) - (a7 >> 16);
          }
          else {
            int v39 = (a7 >> 16) - *(__int16 *)(v32 + 2);
          }
          unsigned int v38 = 63 - 2 * __clz((v37 < 1) | (2 * v39));
        }
        else
        {
          unsigned int v38 = byte_1BBB7B41C[v37 + 64];
        }
        unsigned int v40 = v38 + v35;
        *(_DWORD *)(v30 + 32) = v40;
        unint64_t v41 = ((v40 * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(v30 + 36) + 8)) >> (8
                                                                                          * (*(_WORD *)(v30 + 36) == 0)))
            + (unint64_t)v29;
        *(void *)(v30 + 24) = v41;
        uint64_t v42 = *a1;
        if (v41 < *(void *)(*a1 + 24))
        {
          int16x8_t v43 = (unsigned char *)(v42 + v21);
          *int16x8_t v43 = *(unsigned char *)(v30 + v21);
          *(_DWORD *)(v42 + 4 * v21 + 4) = *(_DWORD *)v32;
          v43[12] = *(unsigned char *)(v30 + v21 + 12);
          *(_DWORD *)(v42 + 32) = *(_DWORD *)(v30 + 32);
          *(_OWORD *)(v42 + 16) = *(_OWORD *)(v30 + 16);
        }
      }
      int v23 = v60 + 4;
    }
    while (v60 + 4 <= *((__int16 *)a1 + 29));
  }
  BOOL v44 = 0;
  uint64_t v45 = *a1 + 4 * v21;
  __int16 v46 = *(_WORD *)(v45 + 4);
  int v47 = *((_DWORD *)a1 + 13);
  int v48 = v47 >> 16;
  if (v47 >> 16 >= (__int16)(v46 + 3))
  {
    int v49 = (__int16)v47;
    if ((__int16)v47 <= (__int16)(v46 + 3))
    {
      BOOL v44 = 0;
      __int16 v50 = *(_WORD *)(v45 + 6);
      int v51 = *((_DWORD *)a1 + 14);
      int v52 = (__int16)v51;
      if ((__int16)v51 <= (__int16)(v50 + 3))
      {
        int v53 = v51 >> 16;
        if (v53 >= (__int16)(v50 + 3))
        {
          BOOL v44 = 0;
          __int16 v54 = v46 - 3;
          if (v48 >= v54 && v49 <= v54) {
            BOOL v44 = v52 <= (__int16)(v50 - 3) && v53 >= (__int16)(v50 - 3);
          }
        }
      }
    }
  }
  *((unsigned char *)a1 + 16) = v44;
  uint64_t result = sub_1BBA52970(a1, a2, a3, a4, a5, a6, a7, a8, a11, v66, a12);
  if (a12)
  {
    uint64_t v57 = *a1;
    unint64_t v58 = *(void *)(*a1 + 16) + 1;
    *(void *)(v57 + 16) = v58 >> 1;
    *(void *)(v57 + 24) = ((*(_DWORD *)(v57 + 32)
                            * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(v57 + 36) + 8)) >> (8 * (*(_WORD *)(v57 + 36) == 0)))
                          + (v58 >> 1);
  }
  return result;
}

int16x4_t sub_1BBA52880(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, int32x4_t a9, int32x4_t a10)
{
  unsigned int v10 = (__int16)a7 >> 2;
  if (a7 << 16 <= -65536) {
    unsigned int v10 = -(-(__int16)a7 >> 2);
  }
  if (a7 < 0) {
    unsigned int v11 = -(-(a7 >> 16) >> 2);
  }
  else {
    unsigned int v11 = (a7 >> 16) >> 2;
  }
  uint64_t v12 = 36;
  if (a8) {
    uint64_t v12 = 44;
  }
  long long v13 = (unsigned __int32 *)(a1 + v12);
  uint64_t v14 = 40;
  if (a8) {
    uint64_t v14 = 48;
  }
  *(int32x2_t *)a9.i8 = vsub_s32((int32x2_t)0x200000002, (int32x2_t)__PAIR64__(a5, a4));
  int32x4_t v15 = vzip1q_s32(a9, a9);
  uint64_t v16 = a1 + 4 * a6;
  a10.i32[0] = v10 + a2;
  a10.i32[1] = *v13;
  a10.i32[2] = v11 + a3;
  int32x4_t v17 = a10;
  v17.i32[3] = *(_DWORD *)(a1 + v14);
  int32x4_t v18 = vrev64q_s32(v17);
  int32x4_t v19 = vaddq_s32(v17, v18);
  int32x4_t v20 = vtrn2q_s32(vrev64q_s32(vsubq_s32(a10, v18)), v19);
  v19.i32[0] = *(_DWORD *)(v16 + 20);
  v19.i32[1] = *(_DWORD *)(v16 + 28);
  *(int32x2_t *)v19.i8 = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x200000002);
  int32x4_t v21 = vzip1q_s32(v19, v19);
  int32x4_t v22 = vshrq_n_s32(vshlq_n_s32(v20, 0x10uLL), 0x10uLL);
  int8x16_t v23 = (int8x16_t)vcgtq_s32(v22, v15);
  int8x16_t v24 = (int8x16_t)vminq_s32(v22, v21);
  v21.i64[0] = __PAIR64__(a3, a2);
  int16x4_t result = vshl_n_s16(vmovn_s32(vsubq_s32((int32x4_t)vbslq_s8(v23, v24, (int8x16_t)v15), vzip1q_s32(v21, v21))), 2uLL);
  *(int16x4_t *)(a1 + 52) = result;
  return result;
}

uint64_t sub_1BBA52970(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, unsigned int *a10, char a11)
{
  uint64_t v16 = a1[28];
  int v17 = *(unsigned __int8 *)(*(void *)(a1[27] + 79088) + 229);
  uint64_t v18 = a1[19];
  uint64_t v19 = a1[20];
  *a10 = a4;
  a10[1] = a5;
  *((void *)a10 + 1) = v18;
  *((void *)a10 + 2) = v19;
  *((void *)a10 + 3) = a8;
  if ((int)a5 >= (int)a4) {
    unsigned int v20 = a4;
  }
  else {
    unsigned int v20 = a5;
  }
  uint64_t v21 = v16 + 24;
  if ((int)a5 >= 9 && (int)a4 >= 9 && v17 == 1)
  {
    unsigned int v56 = a6;
    uint64_t v22 = __clz(__rbit32(v20)) - 2;
    *((void *)a10 + 4) = *(void *)(v21 + 8 * v22 + 120);
    uint64_t v55 = v22;
    *((void *)a10 + 5) = *(void *)(v16 + 8 * v22 + 336);
    uint64_t v23 = *a1;
    *(_DWORD *)(v23 + 32) = 0;
    *(_OWORD *)(v23 + 16) = xmmword_1BBB6F8F0;
    *(_WORD *)(v23 + 36) = 3;
    int8x16_t v24 = (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, unsigned int *, char))a1[55];
    uint64_t v25 = a1[56];
    uint8x8_t v26 = (uint64_t *)((char *)a1 + (v25 >> 1));
    if (v25) {
      int8x16_t v24 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, unsigned int *, char))(*v26 + v24);
    }
    uint64_t v32 = a7;
    v24(v26, a2, a3, a4, a5, a6, a7, 1, a8, a9, a10, a11);
    unsigned int v35 = (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, unsigned int *, int))a1[55];
    uint64_t v36 = a1[56];
    int v37 = (uint64_t *)((char *)a1 + (v36 >> 1));
    if (v36) {
      unsigned int v35 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, unsigned int *, int))(*v37 + v35);
    }
    LOBYTE(v53) = a11;
    v35(v37, a2, a3, a4, a5, v56, v32, 0, a8, a9, a10, v53);
    uint64_t v44 = a1[28];
    uint64_t v45 = a1[19];
    uint64_t v46 = a1[20];
    *a10 = a4;
    a10[1] = a5;
    *((void *)a10 + 1) = v45;
    *((void *)a10 + 2) = v46;
    uint64_t v47 = v44 + 8 * v55;
    uint64_t v48 = *(void *)(v47 + 104);
    *((void *)a10 + 3) = a8;
    *((void *)a10 + 4) = v48;
    *((void *)a10 + 5) = *(void *)(v47 + 336);
    uint64_t v49 = *a1;
    *(_WORD *)(v49 + 36) = 2;
    sub_1BBA52CA0((uint64_t)a1, v49, a2, a3, a4, a5, a8, a9, v56);
    uint64_t result = (*((uint64_t (**)(void, void, void, void, uint64_t, void))a10 + 4))(*a10, a10[1], *((void *)a10 + 1), *((void *)a10 + 2), a9, *((void *)a10 + 3));
    uint64_t v51 = *a1;
    unint64_t v52 = ((*(_DWORD *)(*a1 + 32) * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(*a1 + 36) + 8)) >> (8 * (*(_WORD *)(*a1 + 36) == 0)))
        + (unint64_t)result;
    *(void *)(v51 + 16) = result;
    *(void *)(v51 + 24) = v52;
  }
  else
  {
    uint64_t v27 = 8 * __clz(__rbit32(v20)) - 16;
    *((void *)a10 + 4) = *(void *)(v21 + v27 + 80);
    *((void *)a10 + 5) = *(void *)(v16 + v27 + 336);
    uint64_t v28 = *a1;
    *(_DWORD *)(v28 + 32) = 0;
    *(_OWORD *)(v28 + 16) = xmmword_1BBB6F8F0;
    *(_WORD *)(v28 + 36) = 2;
    unsigned int v29 = (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, unsigned int *, char))a1[55];
    uint64_t v30 = a1[56];
    uint64_t v31 = (uint64_t *)((char *)a1 + (v30 >> 1));
    if (v30) {
      unsigned int v29 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, unsigned int *, char))(*v31 + v29);
    }
    uint64_t v38 = a7;
    v29(v31, a2, a3, a4, a5, a6, a7, 1, a8, a9, a10, a11);
    unint64_t v41 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int))a1[55];
    uint64_t v42 = a1[56];
    int16x8_t v43 = (uint64_t *)((char *)a1 + (v42 >> 1));
    if (v42) {
      unint64_t v41 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int))(*v43 + v41);
    }
    LOBYTE(v54) = a11;
    return v41(v43, a2, a3, a4, a5, a6, v38, 0, a8, a9, a10, v54);
  }
  return result;
}

uint64_t sub_1BBA52CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9 = a1 + 16 * (((*(_WORD *)(a2 + 4 * a9 + 6) | *(_WORD *)(a2 + 4 * a9 + 4)) & 1) == 0);
  unsigned int v10 = *(uint64_t (**)(void *))(v9 + 312);
  uint64_t v11 = *(void *)(v9 + 320);
  uint64_t v12 = (void *)(a1 + (v11 >> 1));
  if (v11) {
    unsigned int v10 = *(uint64_t (**)(void *))(*v12 + v10);
  }
  return v10(v12);
}

uint64_t sub_1BBA52CE8(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, int a7, uint64_t a8, int32x4_t a9, int32x4_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v15 = a1[28];
  uint64_t v16 = a1[19];
  uint64_t v17 = a1[20];
  v129[0] = a4;
  v129[1] = a5;
  uint64_t v121 = v17;
  uint64_t v122 = v16;
  uint64_t v130 = v16;
  uint64_t v131 = v17;
  uint64_t v132 = a8;
  uint64_t v18 = v15 + 8 * __clz(__rbit32(a4));
  double v120 = *(uint64_t (**)(void, void, void, void, void, void))(v18 + 48);
  int8x8_t v133 = v120;
  uint64_t v134 = *(void *)(v18 + 320);
  sub_1BBA52880((uint64_t)a1, a2, a3, a4, a5, a6, *(_DWORD *)(*a1 + 4 * (int)a6 + 4), a12, a9, a10);
  uint64_t v19 = a1[1];
  uint64_t v128 = a6;
  uint64_t v20 = v19 + 4 * (int)a6;
  __int16 v21 = *(_WORD *)(v20 + 6);
  __int16 v22 = *(_WORD *)(v20 + 4);
  int v23 = *((_DWORD *)a1 + 13);
  int v24 = (__int16)v23;
  int v25 = v23 >> 16;
  BOOL v26 = v25 >= (__int16)(v22 + 8) && v24 <= (__int16)(v22 + 8);
  if (!v26
    || ((v27 = *((_DWORD *)a1 + 14), v28 = (__int16)v27, int v29 = v27 >> 16, v28 <= (__int16)(v21 + 8))
      ? (BOOL v30 = v29 < (__int16)(v21 + 8))
      : (BOOL v30 = 1),
        v30))
  {
    BOOL v31 = 0;
  }
  else
  {
    BOOL v33 = v28 <= (__int16)(v21 - 8) && v29 >= (__int16)(v21 - 8);
    BOOL v31 = v25 >= (__int16)(v22 - 8) && v24 <= (__int16)(v22 - 8) && v33;
  }
  int v114 = 0;
  *(_DWORD *)(v19 + 32) = 0;
  *(_OWORD *)(v19 + 16) = xmmword_1BBB6F8F0;
  *(_WORD *)(v19 + 36) = 1;
  int v119 = a7 >> 16;
  uint64_t v35 = -6;
  uint64_t v36 = &byte_1BBB79E49;
  __int16 v117 = v21;
  do
  {
    *(_WORD *)(a1[1] + 4 * (int)a6 + 4) = v22 + *(v36 - 1);
    *(_WORD *)(a1[1] + 4 * (int)a6 + 6) = v21 + *v36;
    uint64_t v37 = a1[1];
    if (v31
      || ((v38 = *(_DWORD *)(v37 + 4 * (int)a6 + 4), int v39 = *((_DWORD *)a1 + 13), (__int16)v38 <= v39 >> 16)
        ? (BOOL v40 = (__int16)v38 < (__int16)v39)
        : (BOOL v40 = 1),
          !v40
       && ((v41 = *((_DWORD *)a1 + 14), int v42 = v38 >> 16, v42 >= (__int16)v41) ? (v43 = v42 <= v41 >> 16) : (v43 = 0), v43)))
    {
      *(_DWORD *)(v37 + 32) = 0;
      *(_OWORD *)(v37 + 16) = xmmword_1BBB6F8F0;
      *(_WORD *)(v37 + 36) = 1;
      uint64_t v44 = (void (*)(void *))a1[43];
      uint64_t v45 = a1[44];
      uint64_t v46 = (void *)((char *)a1 + (v45 >> 1));
      if (v45) {
        uint64_t v44 = *(void (**)(void *))(*v46 + v44);
      }
      v44(v46);
      unsigned int v47 = v120(a4, a5, v122, v121, a11, a8);
      uint64_t v48 = a1[1];
      *(void *)(v48 + 16) = v47;
      uint64_t v49 = v48 + 4 * (int)a6;
      int v51 = *(__int16 *)(v49 + 4);
      uint64_t v50 = v49 + 4;
      int v52 = v51 - (__int16)a7;
      if ((v52 + 64) >= 0x80)
      {
        if (v52 >= 0) {
          int v54 = v52;
        }
        else {
          int v54 = -v52;
        }
        unsigned int v53 = 63 - 2 * __clz((v52 < 1) | (2 * v54));
      }
      else
      {
        unsigned int v53 = byte_1BBB7B41C[v52 + 64];
      }
      __int16 v21 = v117;
      int v55 = *(__int16 *)(v50 + 2) - v119;
      if ((v55 + 64) >= 0x80)
      {
        if (v55 >= 0) {
          int v57 = *(__int16 *)(v50 + 2) - v119;
        }
        else {
          int v57 = v119 - *(__int16 *)(v50 + 2);
        }
        unsigned int v56 = 63 - 2 * __clz((v55 < 1) | (2 * v57));
      }
      else
      {
        unsigned int v56 = byte_1BBB7B41C[v55 + 64];
      }
      unsigned int v58 = v56 + v53;
      *(_DWORD *)(v48 + 32) = v58;
      unint64_t v59 = ((v58 * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(v48 + 36) + 8)) >> (8 * (*(_WORD *)(v48 + 36) == 0)))
          + (unint64_t)v47;
      *(void *)(v48 + 24) = v59;
      uint64_t v60 = *a1;
      if (v59 < *(void *)(*a1 + 24))
      {
        uint64_t v61 = (unsigned char *)(v60 + (int)a6);
        *uint64_t v61 = *(unsigned char *)(v48 + (int)a6);
        *(_DWORD *)(v60 + 4 * (int)a6 + 4) = *(_DWORD *)v50;
        v61[12] = *(unsigned char *)(v48 + (int)a6 + 12);
        *(_DWORD *)(v60 + 32) = *(_DWORD *)(v48 + 32);
        *(_OWORD *)(v60 + 16) = *(_OWORD *)(v48 + 16);
        int v114 = v35 + 7;
      }
    }
    v36 += 2;
  }
  while (!__CFADD__(v35++, 1));
  int v63 = v114;
  if (v114 && *((unsigned char *)a1 + 146))
  {
    unsigned int v116 = 0;
    do
    {
      uint64_t v64 = 0;
      uint64_t v65 = *a1 + 4 * (int)v128;
      __int16 v66 = *(_WORD *)(v65 + 6);
      __int16 v67 = *(_WORD *)(v65 + 4);
      uint64_t v115 = v63;
      uint64_t v68 = &byte_1BBB79E54[3 * v63];
      int v118 = -1;
      do
      {
        uint64_t v69 = (char *)&unk_1BBB79E46 + 2 * v68[v64];
        *(_WORD *)(a1[1] + 4 * (int)v128 + 4) = v67 + *v69;
        *(_WORD *)(a1[1] + 4 * (int)v128 + 6) = v66 + v69[1];
        uint64_t v70 = a1[1];
        int v71 = *(_DWORD *)(v70 + 4 * (int)v128 + 4);
        int v72 = *((_DWORD *)a1 + 13);
        if ((__int16)v71 <= v72 >> 16 && (__int16)v71 >= (__int16)v72)
        {
          int v74 = *((_DWORD *)a1 + 14);
          int v75 = v71 >> 16;
          if (v75 >= (__int16)v74 && v75 <= v74 >> 16)
          {
            *(_DWORD *)(v70 + 32) = 0;
            *(_OWORD *)(v70 + 16) = xmmword_1BBB6F8F0;
            *(_WORD *)(v70 + 36) = 1;
            int16x8_t v77 = (void (*)(void *))a1[43];
            uint64_t v78 = a1[44];
            uint64_t v79 = (void *)((char *)a1 + (v78 >> 1));
            if (v78) {
              int16x8_t v77 = *(void (**)(void *))(*v79 + v77);
            }
            v77(v79);
            unsigned int v80 = v120(a4, a5, v122, v121, a11, a8);
            uint64_t v81 = a1[1];
            *(void *)(v81 + 16) = v80;
            uint64_t v82 = v81 + 4 * (int)v128;
            int v84 = *(__int16 *)(v82 + 4);
            uint64_t v83 = v82 + 4;
            int v85 = v84 - (__int16)a7;
            if ((v85 + 64) >= 0x80)
            {
              if (v85 >= 0) {
                int v87 = v85;
              }
              else {
                int v87 = -v85;
              }
              unsigned int v86 = 63 - 2 * __clz((v85 < 1) | (2 * v87));
            }
            else
            {
              unsigned int v86 = byte_1BBB7B41C[v85 + 64];
            }
            int v88 = *(__int16 *)(v83 + 2) - v119;
            if ((v88 + 64) >= 0x80)
            {
              if (v88 >= 0) {
                int v90 = *(__int16 *)(v83 + 2) - v119;
              }
              else {
                int v90 = v119 - *(__int16 *)(v83 + 2);
              }
              unsigned int v89 = 63 - 2 * __clz((v88 < 1) | (2 * v90));
            }
            else
            {
              unsigned int v89 = byte_1BBB7B41C[v88 + 64];
            }
            unsigned int v91 = v89 + v86;
            *(_DWORD *)(v81 + 32) = v91;
            unint64_t v92 = ((v91 * *(unsigned __int16 *)(a1[28] + 2 * *(__int16 *)(v81 + 36) + 8)) >> (8
                                                                                              * (*(_WORD *)(v81 + 36) == 0)))
                + (unint64_t)v80;
            *(void *)(v81 + 24) = v92;
            uint64_t v93 = *a1;
            if (v92 < *(void *)(*a1 + 24))
            {
              double v94 = (unsigned char *)(v93 + (int)v128);
              *double v94 = *(unsigned char *)(v81 + (int)v128);
              *(_DWORD *)(v93 + 4 * (int)v128 + 4) = *(_DWORD *)v83;
              v94[12] = *(unsigned char *)(v81 + (int)v128 + 12);
              *(_DWORD *)(v93 + 32) = *(_DWORD *)(v81 + 32);
              *(_OWORD *)(v93 + 16) = *(_OWORD *)(v81 + 16);
              int v118 = v64;
            }
          }
        }
        ++v64;
      }
      while (v64 != 3);
      if (v118 == -1) {
        break;
      }
      int v63 = byte_1BBB79E54[3 * v115 + v118];
      ++v116;
    }
    while (v116 < *((unsigned __int8 *)a1 + 146));
  }
  __int16 v95 = *((unsigned __int8 *)a1 + 144) + 2 * *((unsigned __int8 *)a1 + 145) + 7;
  uint64_t v96 = *a1 + 4 * (int)v128;
  __int16 v97 = *(_WORD *)(v96 + 4);
  int v98 = *((_DWORD *)a1 + 13);
  int v99 = (__int16)v98;
  int v100 = v98 >> 16;
  BOOL v101 = v98 >> 16 >= (__int16)(v95 + v97)
      && (__int16)v98 <= (__int16)(*((unsigned __int8 *)a1 + 144) + 2 * *((unsigned __int8 *)a1 + 145) + 7 + v97);
  if (!v101
    || ((__int16 v102 = *(_WORD *)(v96 + 6),
         int v103 = *((_DWORD *)a1 + 14),
         int v104 = (__int16)v103,
         int v105 = v103 >> 16,
         (__int16)v103 <= (__int16)(v102 + v95))
      ? (BOOL v106 = v105 < (__int16)(v102 + v95))
      : (BOOL v106 = 1),
        v106))
  {
    BOOL v107 = 0;
LABEL_96:
    int v108 = a7;
    goto LABEL_97;
  }
  BOOL v107 = 0;
  __int16 v111 = v97 - v95;
  if (v100 < v111) {
    goto LABEL_96;
  }
  BOOL v26 = v99 <= v111;
  int v108 = a7;
  if (v26)
  {
    int v112 = (__int16)(v102 - v95);
    BOOL v107 = v104 <= v112 && v105 >= v112;
  }
LABEL_97:
  *((unsigned char *)a1 + 16) = v107;
  unsigned int v109 = v108;
  sub_1BBA5344C(a1, a2, a3, a4, a5, v128, v108, 2, a8, a11, v129);
  return sub_1BBA52970(a1, a2, a3, a4, a5, v128, v109, a8, a11, v129, a12);
}

void *sub_1BBA5344C(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  uint64_t v11 = result;
  uint64_t v12 = a6;
  uint64_t v13 = result[1];
  uint64_t v14 = *result + 4 * a6;
  __int16 v15 = *(_WORD *)(v14 + 4);
  __int16 v16 = *(_WORD *)(v14 + 6);
  *(_DWORD *)(v13 + 32) = 0;
  *(_OWORD *)(v13 + 16) = xmmword_1BBB6F8F0;
  if (a8 == 2) {
    __int16 v17 = 1;
  }
  else {
    __int16 v17 = 2;
  }
  *(_WORD *)(v13 + 36) = v17;
  uint64_t v18 = &result[2 * a8];
  unsigned int v47 = v18 + 40;
  uint64_t v48 = (void (**)(void *))(v18 + 39);
  int v46 = (__int16)a7;
  int v19 = a7 >> 16;
  uint64_t v20 = 2 * (a8 != 1);
  __int16 v21 = (char *)&unk_1BBB79E10 + 18 * a8;
  do
  {
    *(_WORD *)(v11[1] + 4 * v12 + 4) = v15 + v21[v20];
    *(_WORD *)(v11[1] + 4 * v12 + 6) = v16 + v21[v20 + 1];
    uint64_t v22 = v11[1];
    if (*((unsigned char *)v11 + 16)
      || ((int v25 = *(_DWORD *)(v22 + 4 * v12 + 4), v26 = *((_DWORD *)v11 + 13), (__int16)v25 <= v26 >> 16)
        ? (BOOL v27 = (__int16)v25 < (__int16)v26)
        : (BOOL v27 = 1),
          !v27
       && ((v28 = *((_DWORD *)v11 + 14), int v29 = v25 >> 16, v29 >= (__int16)v28) ? (v30 = v29 <= v28 >> 16) : (v30 = 0),
           v30)))
    {
      *(_DWORD *)(v22 + 32) = 0;
      *(_OWORD *)(v22 + 16) = xmmword_1BBB6F8F0;
      *(_WORD *)(v22 + 36) = v17;
      int v23 = *v48;
      int v24 = (void *)((char *)v11 + (*v47 >> 1));
      if (*v47) {
        int v23 = *(void (**)(void *))(*v24 + v23);
      }
      v23(v24);
      uint64_t result = (void *)(*((uint64_t (**)(void, void, void, void, uint64_t, void))a11 + 4))(*a11, a11[1], *((void *)a11 + 1), *((void *)a11 + 2), a10, *((void *)a11 + 3));
      uint64_t v31 = v11[1];
      *(void *)(v31 + 16) = result;
      uint64_t v32 = v31 + 4 * v12;
      int v34 = *(__int16 *)(v32 + 4);
      uint64_t v33 = v32 + 4;
      int v35 = v34 - v46;
      unsigned int v36 = v34 - v46 + 64;
      if (v36 >= 0x80)
      {
        if (v35 >= 0) {
          int v38 = v35;
        }
        else {
          int v38 = -v35;
        }
        unsigned int v37 = 63 - 2 * __clz((v35 < 1) | (2 * v38));
      }
      else
      {
        unsigned int v37 = byte_1BBB7B41C[v36];
      }
      int v39 = *(__int16 *)(v33 + 2) - v19;
      if ((v39 + 64) >= 0x80)
      {
        if (v39 >= 0) {
          int v41 = *(__int16 *)(v33 + 2) - v19;
        }
        else {
          int v41 = v19 - *(__int16 *)(v33 + 2);
        }
        unsigned int v40 = 63 - 2 * __clz((v39 < 1) | (2 * v41));
      }
      else
      {
        unsigned int v40 = byte_1BBB7B41C[v39 + 64];
      }
      unsigned int v42 = v40 + v37;
      *(_DWORD *)(v31 + 32) = v42;
      unint64_t v43 = ((v42 * *(unsigned __int16 *)(v11[28] + 2 * *(__int16 *)(v31 + 36) + 8)) >> (8
                                                                                         * (*(_WORD *)(v31 + 36) == 0)))
          + (unint64_t)result;
      *(void *)(v31 + 24) = v43;
      uint64_t v44 = *v11;
      if (v43 < *(void *)(*v11 + 24))
      {
        uint64_t v45 = (unsigned char *)(v44 + v12);
        *uint64_t v45 = *(unsigned char *)(v31 + v12);
        *(_DWORD *)(v44 + 4 * v12 + 4) = *(_DWORD *)v33;
        v45[12] = *(unsigned char *)(v31 + v12 + 12);
        *(_DWORD *)(v44 + 32) = *(_DWORD *)(v31 + 32);
        *(_OWORD *)(v44 + 16) = *(_OWORD *)(v31 + 16);
      }
    }
    v20 += 2;
  }
  while (v20 != 18);
  return result;
}

void *sub_1BBA53718(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  uint64_t v11 = result;
  int v12 = 0;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a6;
  uint64_t v14 = *result + 4 * a6;
  __int16 v15 = *(_WORD *)(v14 + 4);
  __int16 v16 = *(_WORD *)(v14 + 6);
  uint64_t v17 = a8 != 1;
  int v82 = *((unsigned __int8 *)result + a8 + 144);
  __int16 v18 = *(_WORD *)(*result + 36);
  *(unsigned char *)(result[1] + a6) = *(unsigned char *)(*result + a6);
  uint64_t v19 = result[1];
  *(_DWORD *)(v19 + 32) = 0;
  *(_OWORD *)(v19 + 16) = xmmword_1BBB6F8F0;
  __int16 v91 = v18;
  *(_WORD *)(v19 + 36) = v18;
  uint64_t v20 = &result[2 * a8];
  unsigned int v89 = v20 + 40;
  int v90 = (void (**)(void))(v20 + 39);
  int v87 = a7 >> 16;
  int v88 = (__int16)a7;
  __int16 v21 = (char *)&unk_1BBB79E69 + 10 * a8 + 2 * v17 + 1;
  do
  {
    *(_WORD *)(v11[1] + 4 * v13 + 4) = v15 + *(v21 - 1);
    *(_WORD *)(v11[1] + 4 * v13 + 6) = v16 + *v21;
    uint64_t v22 = v11[1];
    if (!v17
      || *((unsigned char *)v11 + 16)
      || ((int v23 = *(_DWORD *)(v22 + 4 * v13 + 4), v24 = *((_DWORD *)v11 + 13), (__int16)v23 <= v24 >> 16)
        ? (BOOL v25 = (__int16)v23 < (__int16)v24)
        : (BOOL v25 = 1),
          !v25
       && ((int v26 = *((_DWORD *)v11 + 14), v27 = v23 >> 16, v27 >= (__int16)v26) ? (v28 = v27 <= v26 >> 16) : (v28 = 0),
           v28)))
    {
      *(_DWORD *)(v22 + 32) = 0;
      *(_OWORD *)(v22 + 16) = xmmword_1BBB6F8F0;
      *(_WORD *)(v22 + 36) = v91;
      int v29 = *v90;
      BOOL v30 = (void *)((char *)v11 + (*v89 >> 1));
      if (*v89) {
        int v29 = *(void (**)(void))(*v30 + v29);
      }
      v29(v30);
      uint64_t result = (void *)(*((uint64_t (**)(void, void, void, void, uint64_t, void))a11 + 4))(*a11, a11[1], *((void *)a11 + 1), *((void *)a11 + 2), a10, *((void *)a11 + 3));
      uint64_t v31 = v11[1];
      *(void *)(v31 + 16) = result;
      uint64_t v32 = v31 + 4 * v13;
      int v34 = *(__int16 *)(v32 + 4);
      uint64_t v33 = v32 + 4;
      int v35 = v34 - v88;
      unsigned int v36 = v34 - v88 + 64;
      if (v36 >= 0x80)
      {
        if (v35 >= 0) {
          int v38 = v35;
        }
        else {
          int v38 = -v35;
        }
        unsigned int v37 = 63 - 2 * __clz((v35 < 1) | (2 * v38));
      }
      else
      {
        unsigned int v37 = byte_1BBB7B41C[v36];
      }
      int v39 = *(__int16 *)(v33 + 2) - v87;
      if ((v39 + 64) >= 0x80)
      {
        if (v39 >= 0) {
          int v41 = *(__int16 *)(v33 + 2) - v87;
        }
        else {
          int v41 = v87 - *(__int16 *)(v33 + 2);
        }
        unsigned int v40 = 63 - 2 * __clz((v39 < 1) | (2 * v41));
      }
      else
      {
        unsigned int v40 = byte_1BBB7B41C[v39 + 64];
      }
      unsigned int v42 = v40 + v37;
      *(_DWORD *)(v31 + 32) = v42;
      unint64_t v43 = ((v42 * *(unsigned __int16 *)(v11[28] + 2 * *(__int16 *)(v31 + 36) + 8)) >> (8
                                                                                         * (*(_WORD *)(v31 + 36) == 0)))
          + (unint64_t)result;
      *(void *)(v31 + 24) = v43;
      uint64_t v44 = *v11;
      if (v43 < *(void *)(*v11 + 24))
      {
        uint64_t v45 = (unsigned char *)(v44 + v13);
        *uint64_t v45 = *(unsigned char *)(v31 + v13);
        *(_DWORD *)(v44 + 4 * v13 + 4) = *(_DWORD *)v33;
        v45[12] = *(unsigned char *)(v31 + v13 + 12);
        *(_DWORD *)(v44 + 32) = *(_DWORD *)(v31 + 32);
        *(_OWORD *)(v44 + 16) = *(_OWORD *)(v31 + 16);
        int v12 = v17;
      }
    }
    v21 += 2;
    ++v17;
  }
  while (v17 != 5);
  if (v12)
  {
    uint64_t v46 = 0;
    uint64_t v47 = *v11 + 4 * v13;
    __int16 v48 = *(_WORD *)(v47 + 4);
    __int16 v49 = *(_WORD *)(v47 + 6);
    do
    {
      *(&v92 + v46) = byte_1BBB79E7D[3 * v12 + v46];
      ++v46;
    }
    while (v46 != 3);
    uint64_t v50 = v11[1];
    *(_DWORD *)(v50 + 32) = 0;
    *(_OWORD *)(v50 + 16) = xmmword_1BBB6F8F0;
    *(_WORD *)(v50 + 36) = v91;
    if (v82)
    {
      int v84 = 0;
      uint64_t v51 = 3;
      int v52 = (char *)&unk_1BBB79E69 + 10 * a8;
      do
      {
        uint64_t v53 = 0;
        __int32 v83 = v12;
        uint64_t v54 = 4 * v51;
        int v86 = -1;
        do
        {
          uint64_t v55 = *(int *)((char *)&v92 + v53);
          unsigned int v56 = &v52[2 * v55];
          *(_WORD *)(v11[1] + 4 * v13 + 4) = v48 + *v56;
          *(_WORD *)(v11[1] + 4 * v13 + 6) = v49 + v56[1];
          uint64_t v57 = v11[1];
          if (*((unsigned char *)v11 + 16)
            || ((int v60 = *(_DWORD *)(v57 + 4 * v13 + 4), v61 = *((_DWORD *)v11 + 13), (__int16)v60 <= v61 >> 16)
              ? (BOOL v62 = (__int16)v60 < (__int16)v61)
              : (BOOL v62 = 1),
                !v62
             && ((int v63 = *((_DWORD *)v11 + 14), v64 = v60 >> 16, v64 >= (__int16)v63)
               ? (BOOL v65 = v64 <= v63 >> 16)
               : (BOOL v65 = 0),
                 v65)))
          {
            *(_DWORD *)(v57 + 32) = 0;
            *(_OWORD *)(v57 + 16) = xmmword_1BBB6F8F0;
            *(_WORD *)(v57 + 36) = v91;
            unsigned int v58 = *v90;
            unint64_t v59 = (void *)((char *)v11 + (*v89 >> 1));
            if (*v89) {
              unsigned int v58 = *(void (**)(void))(*v59 + v58);
            }
            v58(v59);
            uint64_t result = (void *)(*((uint64_t (**)(void, void, void, void, uint64_t, void))a11 + 4))(*a11, a11[1], *((void *)a11 + 1), *((void *)a11 + 2), a10, *((void *)a11 + 3));
            uint64_t v66 = v11[1];
            *(void *)(v66 + 16) = result;
            uint64_t v67 = v66 + 4 * v13;
            int v69 = *(__int16 *)(v67 + 4);
            uint64_t v68 = v67 + 4;
            int v70 = v69 - v88;
            unsigned int v71 = v69 - v88 + 64;
            if (v71 >= 0x80)
            {
              if (v70 >= 0) {
                int v73 = v70;
              }
              else {
                int v73 = -v70;
              }
              unsigned int v72 = 63 - 2 * __clz((v70 < 1) | (2 * v73));
            }
            else
            {
              unsigned int v72 = byte_1BBB7B41C[v71];
            }
            int v74 = *(__int16 *)(v68 + 2) - v87;
            if ((v74 + 64) >= 0x80)
            {
              if (v74 >= 0) {
                int v76 = *(__int16 *)(v68 + 2) - v87;
              }
              else {
                int v76 = v87 - *(__int16 *)(v68 + 2);
              }
              unsigned int v75 = 63 - 2 * __clz((v74 < 1) | (2 * v76));
            }
            else
            {
              unsigned int v75 = byte_1BBB7B41C[v74 + 64];
            }
            unsigned int v77 = v75 + v72;
            *(_DWORD *)(v66 + 32) = v77;
            unint64_t v78 = ((v77 * *(unsigned __int16 *)(v11[28] + 2 * *(__int16 *)(v66 + 36) + 8)) >> (8
                                                                                               * (*(_WORD *)(v66 + 36) == 0)))
                + (unint64_t)result;
            *(void *)(v66 + 24) = v78;
            uint64_t v79 = *v11;
            if (v78 < *(void *)(*v11 + 24))
            {
              unsigned int v80 = (unsigned char *)(v79 + v13);
              *unsigned int v80 = *(unsigned char *)(v66 + v13);
              *(_DWORD *)(v79 + 4 * v13 + 4) = *(_DWORD *)v68;
              v80[12] = *(unsigned char *)(v66 + v13 + 12);
              *(_DWORD *)(v79 + 32) = *(_DWORD *)(v66 + 32);
              *(_OWORD *)(v79 + 16) = *(_OWORD *)(v66 + 16);
              int v86 = v55;
            }
          }
          v53 += 4;
        }
        while (v54 != v53);
        int v12 = v86;
        if (v86 == -1) {
          break;
        }
        int v92 = v86;
        if (((v86 - 1) ^ (v83 - 1)) > 1)
        {
          v93.i32[0] = v83;
          uint64_t v51 = 2;
        }
        else
        {
          int32x2_t v93 = vsub_s32((int32x2_t)0x400000003, vdup_n_s32((v86 - 1) & 0xFFFFFFFE));
          uint64_t v51 = 3;
        }
        uint64_t v81 = *v11 + 4 * v13;
        __int16 v48 = *(_WORD *)(v81 + 4);
        __int16 v49 = *(_WORD *)(v81 + 6);
        ++v84;
      }
      while (v84 != v82);
    }
  }
  return result;
}

uint64_t sub_1BBA53D68(uint64_t a1, char *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9 = &a2[4 * a9];
  int v10 = *((unsigned __int16 *)v9 + 2);
  int v11 = *((unsigned __int16 *)v9 + 3);
  if ((v10 | v11))
  {
    uint64_t v13 = *(void *)(a1 + 216);
    int v14 = v10 & 3;
    int v15 = v11 & 3;
    uint64_t v16 = a2[a9];
    uint64_t v17 = *(void *)(v13 + ((uint64_t)a9 << 8) + 16 * v16 + 3544);
    int v18 = a3 + ((__int16)v10 >> 2);
    int v19 = a4 + ((__int16)v11 >> 2);
    int v20 = *(_DWORD *)(v17 + 276) + 2;
    if (v19 >= *(_DWORD *)(v17 + 280) + 2) {
      int v21 = *(_DWORD *)(v17 + 280) + 2;
    }
    else {
      int v21 = v19;
    }
    if (v19 <= -3 - (int)a6) {
      int v21 = -3 - a6;
    }
    if (v14 == 3) {
      ++v18;
    }
    if (v18 < v20) {
      int v20 = v18;
    }
    if (v18 <= -3 - (int)a5) {
      int v22 = -3 - a5;
    }
    else {
      int v22 = v20;
    }
    uint64_t v23 = byte_1BBB79EAC[2 * (v15 | (4 * v14))];
    uint64_t v24 = *(void *)(v17 + 1000 + 8 * v23);
    uint64_t v25 = *(void *)(v17 + 968 + 8 * v23) + ((v24 * v21 + v22) << *(unsigned char *)(v17 + 1036));
    unsigned int v26 = __clz(__rbit32(a5));
    if (*(unsigned char *)(v13 + 32 * a9 + 2 * v16 + 79096))
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * v26 + 256))(a6, v24, v25);
    }
    else
    {
      int v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * v26 + 216);
      return v27(a6, v24, v25);
    }
  }
  else
  {
    return sub_1BBA53FA0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1BBA53FA0(uint64_t a1, char *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9 = *(void *)(a1 + 216);
  uint64_t v10 = a2[a9];
  uint64_t v11 = *(void *)(v9 + ((uint64_t)a9 << 8) + 16 * v10 + 3544);
  int v12 = -3 - a5;
  int v13 = *(_DWORD *)(v11 + 276) + 2;
  int v14 = &a2[4 * a9];
  int v15 = a3 + (*((__int16 *)v14 + 2) >> 2);
  if (v15 < v13) {
    int v13 = a3 + (*((__int16 *)v14 + 2) >> 2);
  }
  if (v15 > v12) {
    int v12 = v13;
  }
  int v16 = -3 - a6;
  int v17 = *(_DWORD *)(v11 + 280) + 2;
  int v18 = *((__int16 *)v14 + 3);
  int v19 = a4 + (v18 >> 2);
  if (v19 < v17) {
    int v17 = a4 + (v18 >> 2);
  }
  if (v19 > v16) {
    int v16 = v17;
  }
  unsigned int v20 = *((_DWORD *)v14 + 1);
  uint64_t v21 = v11 + 8 * (HIWORD(v20) & 2 | (v20 >> 1) & 1);
  uint64_t v22 = v16;
  uint64_t v23 = *(void *)(v21 + 1000);
  uint64_t v24 = *(void *)(v21 + 968) + ((v23 * v22 + v12) << *(unsigned char *)(v11 + 1036));
  unint64_t v25 = 2 * (v20 & 3);
  unsigned int v26 = 2 * (v18 & 3);
  if (*(unsigned char *)(v9 + 32 * a9 + 2 * v10 + 79096))
  {
    uint64_t v27 = *(unsigned int *)(v9 + 632);
    uint64_t v28 = v9 + 6 * a2[1];
    uint64_t v29 = v9 + 6 * *a2;
    BOOL v30 = (__int16 *)(v29 + 736);
    if (a9) {
      BOOL v30 = (__int16 *)(v28 + 928);
    }
    uint64_t v31 = *v30;
    uint64_t v32 = (__int16 *)(v28 + 832);
    if (!a9) {
      uint64_t v32 = (__int16 *)(v29 + 640);
    }
    return sub_1BBA5413C(a1, a5, a6, v27, v31, *v32, v25 | ((unint64_t)v26 << 16), v23, v24, a7, a8);
  }
  else
  {
    int v34 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9
                                                                                                  + ((v26 & 2 | (v25 >> 1) & 1) << 6)
                                                                                                  + 8 * byte_1BBB78AC5[((int)a5 >> 2) - 1]
                                                                                                  + 2104);
    return v34(a6, v25 | ((unint64_t)(v18 & 3) << 17), v23, v24, a7, a8);
  }
}

uint64_t sub_1BBA5413C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = MEMORY[0x1F4188790]();
  int v13 = v12;
  int v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  unsigned int v21 = v20;
  uint64_t v22 = v11;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t, void, unsigned char *))(*(void *)(v11 + 216)
                                                                             + (((unint64_t)((v23 & 3) != 0) << 6) | ((unint64_t)((*(void *)&v23 & 0x30000) != 0) << 7))
                                                                             + 8 * byte_1BBB78AC5[(v20 >> 2) - 1]
                                                                             + 2104))(v18, v23, v24, a9, v20, v29);
  v28[0] = v15;
  v28[1] = v15;
  v27[0] = v13;
  v27[1] = v13;
  signed int v25 = __clz(__rbit32(v21)) - 2;
  if (!v21) {
    signed int v25 = -2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, _DWORD *, unsigned char *, uint64_t, uint64_t))(v22 + 8 * v25 + 360))(v19, v17, v28, v27, v29, a10, a11);
}

uint64_t sub_1BBA54284(uint64_t a1, char *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v15 = *(void *)(*(void *)(a1 + 216) + ((uint64_t)a9 << 8) + 16 * a2[a9] + 3544);
  uint64_t v16 = *(void *)(v15 + 112);
  int v17 = -3 - a5;
  int v18 = *(_DWORD *)(v15 + 276) + 2;
  uint64_t v19 = &a2[4 * a9];
  int v21 = *((__int16 *)v19 + 2);
  int v20 = (unsigned int *)(v19 + 4);
  int v22 = a3 + (v21 >> 2);
  if (v22 < v18) {
    int v18 = v22;
  }
  if (v22 <= v17) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v18;
  }
  int v24 = -3 - a6;
  int v25 = *(_DWORD *)(v15 + 280) + 2;
  int v26 = a4 + (*((__int16 *)v20 + 1) >> 2);
  if (v26 < v25) {
    int v25 = a4 + (*((__int16 *)v20 + 1) >> 2);
  }
  if (v26 <= v24) {
    uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = v25;
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v15 + 24))(v15, v23, v27, 0);
  uint64_t v29 = *(void *)(a1 + 216);
  if (*(unsigned char *)(v29 + 32 * a9 + 2 * a2[a9] + 79096))
  {
    uint64_t v30 = *(unsigned int *)(v29 + 632);
    uint64_t v31 = v29 + 6 * a2[1];
    uint64_t v32 = v29 + 6 * *a2;
    uint64_t v33 = (__int16 *)(v32 + 736);
    if (a9) {
      uint64_t v33 = (__int16 *)(v31 + 928);
    }
    int v34 = (__int16 *)(v31 + 832);
    int v35 = (__int16 *)(v32 + 640);
    if (a9) {
      int v35 = v34;
    }
    return sub_1BBA5413C(a1, a5, a6, v30, *v33, *v35, *v20, v16, v28, a7, a8);
  }
  else
  {
    unsigned int v37 = *(uint64_t (**)(uint64_t))(v29
                                            + (((unint64_t)((*v20 & 3) != 0) << 6) | ((unint64_t)((*v20 & 0x30000) != 0) << 7))
                                            + 8 * byte_1BBB78AC5[((int)a5 >> 2) - 1]
                                            + 2104);
    return v37(a6);
  }
}

uint64_t sub_1BBA54474(uint64_t result, int a2, int a3, int a4, int a5, unsigned int a6, __int16 *a7)
{
  int v7 = -12 - 4 * a5;
  uint64_t v8 = result + 4 * a6;
  int v9 = 4 * *(_DWORD *)(v8 + 28) + 8;
  int v10 = a7[1] + 4 * a3;
  if (v10 < v9) {
    LOWORD(v9) = a7[1] + 4 * a3;
  }
  if (v10 > v7) {
    LOWORD(v7) = v9;
  }
  a7[1] = v7 - 4 * a3;
  int v11 = -12 - 4 * a4;
  int v12 = 4 * *(_DWORD *)(v8 + 20) + 8;
  int v13 = *a7 + 4 * a2;
  if (v13 < v12) {
    LOWORD(v12) = *a7 + 4 * a2;
  }
  if (v13 > v11) {
    LOWORD(v11) = v12;
  }
  *a7 = v11 - 4 * a2;
  return result;
}

uint64_t *sub_1BBA544E0(uint64_t *result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = *result;
  uint64_t v12 = result[1];
  uint64_t v26 = result[19];
  uint64_t v34 = (uint64_t)result;
  uint64_t v25 = result[20];
  if ((int)a5 >= (int)a4) {
    unsigned int v13 = a4;
  }
  else {
    unsigned int v13 = a5;
  }
  if ((a9 & 0xFFFFFFFE) == 2) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = a4;
  }
  int v24 = *(unsigned int (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(result[28]
                                                                                          + 40 * a9
                                                                                          + 8 * __clz(__rbit32(v14))
                                                                                          + 8);
  *(_DWORD *)(v11 + 32) = 0;
  *(_OWORD *)(v11 + 16) = xmmword_1BBB6F8F0;
  uint64_t v33 = v11;
  *(_WORD *)(v11 + 36) = a9;
  *(_DWORD *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 16) = xmmword_1BBB6F8F0;
  *(_WORD *)(v12 + 36) = a9;
  if (*(unsigned char *)(a7 + 48))
  {
    unint64_t v16 = 0;
    uint64_t v31 = (unsigned char *)(v12 + a6 + 12);
    uint64_t v32 = (__int16 *)(v12 + 4 * a6 + 4);
    int v20 = (unsigned char *)(v11 + a6 + 12);
    int v21 = (_DWORD *)(v11 + 4 * a6 + 4);
    uint64_t v19 = a6;
    uint64_t v22 = a7;
    do
    {
      *(_DWORD *)uint64_t v32 = *(_DWORD *)(a7 + 4 * v16);
      int v17 = *(_DWORD *)(a7 + 4 * v16);
      sub_1BBA54474(v34, a2, a3, a4, a5, a6, v32);
      sub_1BBA52CA0(v34, v12, a2, a3, a4, a5, a10, a11, a6);
      *(void *)(v12 + 16) = v24(a4, a5, v26, v25, a11, a10);
      *(_DWORD *)uint64_t v32 = v17;
      if (a8)
      {
        *(_DWORD *)(v12 + 32) = 0;
        uint64_t result = (uint64_t *)sub_1BBA54764(a8, v12, a6);
      }
      else
      {
        *(_DWORD *)(v12 + 32) = 1;
        uint64_t result = (uint64_t *)v16;
      }
      a7 = v22;
      *uint64_t v31 = (_BYTE)result;
      unint64_t v18 = *(void *)(v12 + 16)
          + ((*(_DWORD *)(v12 + 32)
            * *(unsigned __int16 *)(*(void *)(v34 + 224) + 2 * *(__int16 *)(v12 + 36) + 8)) >> (8 * (*(_WORD *)(v12 + 36) == 0)));
      *(void *)(v12 + 24) = v18;
      if (v18 < *(void *)(v33 + 24))
      {
        *(unsigned char *)(v33 + v19) = *(unsigned char *)(v12 + v19);
        *int v21 = *(_DWORD *)v32;
        *int v20 = *v31;
        *(_DWORD *)(v33 + 32) = *(_DWORD *)(v12 + 32);
        *(_OWORD *)(v33 + 16) = *(_OWORD *)(v12 + 16);
      }
      ++v16;
    }
    while (v16 < *(unsigned __int8 *)(v22 + 48));
  }
  return result;
}

uint64_t sub_1BBA54764(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned __int8 *)(result + 48);
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    LODWORD(result) = 0;
    int v6 = *(_DWORD *)(a2 + 4 * a3 + 4);
    int v7 = (__int16)v6;
    int v8 = v6 >> 16;
    unsigned int v9 = -1;
    do
    {
      int v10 = *(_DWORD *)(v4 + 4 * v5);
      int v11 = v7 - (__int16)v10;
      if ((v11 + 64) >= 0x80)
      {
        if (v11 >= 0) {
          int v13 = v7 - (__int16)v10;
        }
        else {
          int v13 = (__int16)v10 - v7;
        }
        unsigned int v12 = 63 - 2 * __clz((v11 < 1) | (2 * v13));
      }
      else
      {
        unsigned int v12 = byte_1BBB7B41C[v11 + 64];
      }
      int v14 = v8 - (v10 >> 16);
      if ((v14 + 64) >= 0x80)
      {
        if (v14 >= 0) {
          int v16 = v14;
        }
        else {
          int v16 = -v14;
        }
        unsigned int v15 = 63 - 2 * __clz((v14 < 1) | (2 * v16));
      }
      else
      {
        unsigned int v15 = byte_1BBB7B41C[v14 + 64];
      }
      unsigned int v17 = v12 + v15;
      if (v17 + 1 >= v9) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v5;
      }
      if (v17 + 1 < v9) {
        unsigned int v9 = v17 + 1;
      }
      ++v5;
    }
    while (v3 != v5);
  }
  else
  {
    uint64_t result = 0;
    unsigned int v9 = -1;
  }
  *(_DWORD *)(a2 + 32) += v9;
  return result;
}

uint64_t sub_1BBA54840(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a4 + 4 * a3 + 4);
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v6 = *(__int16 *)(a4 + 36);
  BOOL v7 = *(_WORD *)(a4 + 36) == 0;
  uint64_t v8 = a4 + a3;
  int v11 = *(char *)(v8 + 12);
  unsigned int v9 = (unsigned char *)(v8 + 12);
  int v10 = v11;
  int v12 = *(_DWORD *)(a4 + 32) + 1;
  *(_DWORD *)(a4 + 32) = v12;
  char v13 = 8 * v7;
  *(void *)(a4 + 24) = v5
                       + ((v12 * *(unsigned __int16 *)(*(void *)(result + 224) + 2 * v6 + 8)) >> v13);
  unsigned int v14 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned char *)(a2 + 48))
  {
    unint64_t v15 = 0;
    int v16 = (__int16)v4;
    int v17 = v4 >> 16;
    do
    {
      if (v10 != v15)
      {
        int v18 = *(_DWORD *)(a2 + 4 * v15);
        int v19 = v16 - (__int16)v18;
        if ((v19 + 64) >= 0x80)
        {
          if (v19 >= 0) {
            int v21 = v16 - (__int16)v18;
          }
          else {
            int v21 = (__int16)v18 - v16;
          }
          unsigned int v20 = 63 - 2 * __clz((v19 < 1) | (2 * v21));
        }
        else
        {
          unsigned int v20 = byte_1BBB7B41C[v19 + 64];
        }
        int v22 = v17 - (v18 >> 16);
        if ((v22 + 64) >= 0x80)
        {
          if (v22 >= 0) {
            int v24 = v22;
          }
          else {
            int v24 = -v22;
          }
          unsigned int v23 = 63 - 2 * __clz((v22 < 1) | (2 * v24));
        }
        else
        {
          unsigned int v23 = byte_1BBB7B41C[v22 + 64];
        }
        int v25 = v20 + v23 + 1;
        unint64_t v26 = v5 + ((v25 * *(unsigned __int16 *)(*(void *)(result + 224) + 2 * v6 + 8)) >> v13);
        if (v26 < *(void *)(a4 + 24))
        {
          *(_DWORD *)(a4 + 32) = v25;
          *(void *)(a4 + 24) = v26;
          *unsigned int v9 = v15;
          unsigned int v14 = *(unsigned __int8 *)(a2 + 48);
        }
      }
      ++v15;
    }
    while (v15 < v14);
  }
  return result;
}

unint64_t sub_1BBA54970(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  if (((a3 | a2) & 0x80000000) != 0
    || (uint64_t v11 = *(void *)(*(void *)(a1 + 216) + 1360), *(_DWORD *)(v11 + 276) <= (int)a2)
    || *(_DWORD *)(v11 + 280) <= (int)a3)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 576) + 16 * (*(void *)(v11 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  unsigned __int8 v47 = 0;
  uint64_t v13 = *(unsigned __int8 *)(a6 + 60);
  if (*(unsigned char *)(a6 + 60))
  {
    unsigned __int8 v14 = 0;
    uint64_t v15 = 0;
    do
    {
      if (!*(unsigned char *)(a6 + 12 * v15))
      {
        v46[v14] = *(_DWORD *)(a6 + 12 * v15 + 4) & 0xFFFEFFFE;
        unsigned __int8 v14 = v47;
        if (v47)
        {
          int v16 = v46;
          uint64_t v17 = v47;
          while (1)
          {
            int v18 = *v16++;
            if (v18 == v46[v47]) {
              break;
            }
            if (!--v17) {
              goto LABEL_13;
            }
          }
        }
        else
        {
LABEL_13:
          unsigned __int8 v14 = ++v47;
        }
      }
      ++v15;
    }
    while (v15 != v13);
  }
  else
  {
    unsigned __int8 v14 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 152);
  uint64_t v20 = *(void *)(a1 + 160);
  int v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 224)
                                                                                       + 8 * __clz(__rbit32(a4))
                                                                                       + 48);
  uint64_t v22 = *(void *)(a1 + 8);
  *(_DWORD *)(v22 + 32) = 0;
  *(_OWORD *)(v22 + 16) = xmmword_1BBB6F8F0;
  *(_WORD *)(v22 + 36) = 1;
  *(unsigned char *)uint64_t v22 = 0;
  if (v14)
  {
    uint64_t v40 = v12;
    uint64_t v41 = v20;
    int v23 = 0;
    uint64_t v24 = v14;
    uint64_t v25 = *(void *)(a1 + 8);
    unint64_t v26 = -1;
    uint64_t v27 = v46;
    uint64_t v42 = v19;
    unint64_t v43 = v21;
    uint64_t v28 = a4;
    uint64_t v29 = a5;
    do
    {
      int v32 = *v27++;
      int v44 = v32;
      int v45 = v23;
      *(_DWORD *)(v25 + 4) = v32;
      uint64_t v33 = *(char **)(a1 + 8);
      uint64_t v34 = *v33;
      uint64_t v35 = *(void *)(*(void *)(a1 + 216) + 16 * v34 + 3544);
      *(unsigned char *)(a1 + 18) = v34;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(v35 + 276);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(v35 + 280);
      v33[1] = -1;
      uint64_t v36 = v8;
      sub_1BBA54BE4((void *)a1, *(char **)(a1 + 8), a2, v8, v28, v29, a7, a8);
      unsigned int v37 = v43(v28, v29, v42, v41, a8, a7);
      uint64_t v8 = v36;
      uint64_t v25 = *(void *)(a1 + 8);
      *(void *)(v25 + 16) = v37;
      BOOL v38 = v26 > v37;
      if (v26 >= v37) {
        unint64_t v26 = v37;
      }
      int v23 = v45;
      if (v38) {
        int v23 = v44;
      }
      --v24;
    }
    while (v24);
    unint64_t result = (29 * v26) >> 5;
    uint64_t v12 = v40;
  }
  else
  {
    int v23 = 0;
    unint64_t result = 0x7FFFFFFFFFFFFFFLL;
  }
  *(unsigned char *)(v12 + 11) &= 0xAEu;
  *(unsigned char *)(v12 + 8) = 0;
  *(_DWORD *)uint64_t v12 = v23;
  *(_DWORD *)(v12 + 4) = 0;
  *(_WORD *)(v12 + 9) = 1023;
  return result;
}

uint64_t sub_1BBA54BE4(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = a2[1];
  if (v16 == -1) {
    return sub_1BBA52CA0((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 0);
  }
  uint64_t v17 = *a2;
  if (v17 == -1) {
    return sub_1BBA52CA0((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 1);
  }
  if (*(_DWORD *)(*(void *)(a1[27] + 3544 + 16 * v17) + 680) == *(_DWORD *)(*(void *)(a1[27]
                                                                                             + 3544
                                                                                             + 16 * v16
                                                                                             + 256)
                                                                                 + 680)
    && *((_DWORD *)a2 + 1) == *((_DWORD *)a2 + 2))
  {
    return sub_1BBA52CA0((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 0);
  }
  unsigned int v24 = __clz(__rbit32(a5)) - 2;
  uint64_t v23 = a1[25];
  uint64_t v19 = a1[23];
  sub_1BBA52CA0((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, (int)a5, v19, 0);
  sub_1BBA52CA0((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, (int)a5, v23, 1);
  if (a5) {
    int v20 = v24;
  }
  else {
    int v20 = -2;
  }
  int v21 = (uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t))a1[v20 + 29];

  return v21(a6, (int)a5, v19, (int)a5, v23, a7, a8);
}

uint64_t sub_1BBA54DA0(unsigned char **a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (((a3 | a2) & 0x80000000) != 0
    || (uint64_t v11 = *((void *)a1[27] + 170), *(_DWORD *)(v11 + 276) <= (int)a2)
    || *(_DWORD *)(v11 + 280) <= (int)a3)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 576) + 16 * (*(void *)(v11 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  int v52 = a1[20];
  uint64_t v53 = a1[19];
  uint64_t v51 = *(uint64_t (**)(void, void, unsigned char *, unsigned char *, uint64_t, uint64_t))&a1[28][8 * __clz(__rbit32(a4))
                                                                                            + 48];
  uint64_t v13 = (uint64_t)*a1;
  *(_DWORD *)(v13 + 32) = 0;
  *(_OWORD *)(v13 + 16) = xmmword_1BBB6F8F0;
  *(_WORD *)(v13 + 36) = 1;
  unsigned __int8 v14 = a1[1];
  *((_DWORD *)v14 + 8) = 0;
  *((_OWORD *)v14 + 1) = xmmword_1BBB6F8F0;
  *((_WORD *)v14 + 18) = 1;
  *(unsigned char *)uint64_t v13 = 0;
  (*a1)[1] = -1;
  *a1[1] = 0;
  a1[1][1] = -1;
  sub_1BBA544E0((uint64_t *)a1, a2, a3, a4, a5, 0, a6, 0, 1, a7, a8);
  uint64_t v15 = (uint64_t)*a1;
  char v16 = (*a1)[12];
  if (*((void *)*a1 + 3) >= 0x4B1uLL)
  {
    int v17 = *((_DWORD *)a1 + 37);
  }
  else
  {
    int v17 = 3;
    *((_DWORD *)a1 + 37) = 3;
  }
  int v18 = 4 * *((_DWORD *)a1 + 9);
  while (1)
  {
    int v19 = *(__int16 *)(v15 + 4);
    int v20 = v19 >= 0 ? *(__int16 *)(v15 + 4) : -v19;
    if ((1 << v17) + v20 <= v18) {
      break;
    }
    if (v17 < 3) {
      goto LABEL_22;
    }
LABEL_20:
    *((_DWORD *)a1 + 37) = --v17;
  }
  int v21 = *(__int16 *)(v15 + 6);
  if (v21 < 0) {
    int v21 = -v21;
  }
  int v22 = (1 << v17) + v21;
  int v23 = 4 * *((_DWORD *)a1 + 10);
  if (v17 >= 3 && v22 > v23) {
    goto LABEL_20;
  }
  if (v22 <= v23)
  {
    int v25 = 0;
    unsigned int v50 = v9;
    uint64_t v49 = v12;
    char v48 = v16;
LABEL_24:
    uint64_t v26 = 0;
    int v60 = *(_DWORD *)(v15 + 4);
    if (v17 <= 2) {
      uint64_t v27 = (char *)&unk_1BBB79E9C;
    }
    else {
      uint64_t v27 = (char *)&unk_1BBB79E8C;
    }
    uint64_t v28 = (char *)&unk_1BBB79EA4;
    if (v17 > 2) {
      uint64_t v28 = (char *)&unk_1BBB79E94;
    }
    unsigned int v58 = v28;
    unint64_t v59 = v27;
    do
    {
      *((_WORD *)a1[1] + 2) = (v59[v26] << v17) + v60;
      *((_WORD *)a1[1] + 3) = (v58[v26] << v17) + HIWORD(v60);
      uint64_t v29 = a1[1];
      if (v25 <= 0)
      {
        int v32 = *((_DWORD *)v29 + 1);
LABEL_39:
        v61[v25++ & 0x3F] = v32;
        uint64_t v34 = *v29;
        uint64_t v35 = *(void *)&a1[27][16 * v34 + 3544];
        *((unsigned char *)a1 + 18) = v34;
        *((_DWORD *)a1 + 5) = *(_DWORD *)(v35 + 276);
        *((_DWORD *)a1 + 7) = *(_DWORD *)(v35 + 280);
        v29[1] = -1;
        sub_1BBA52CA0((uint64_t)a1, (uint64_t)a1[1], v9, a3, a4, a5, a7, a8, 0);
        unsigned int v36 = v51(a4, a5, v53, v52, a8, a7);
        unsigned int v37 = a1[1];
        *((void *)v37 + 2) = v36;
        unint64_t v38 = ((*((_DWORD *)v37 + 8) * *(unsigned __int16 *)&a1[28][2 * *((__int16 *)v37 + 18) + 8]) >> (8 * (*((_WORD *)v37 + 18) == 0)))
            + (unint64_t)v36;
        *((void *)v37 + 3) = v38;
        uint64_t v39 = (uint64_t)*a1;
        if (v38 < *((void *)*a1 + 3))
        {
          long long v40 = *(_OWORD *)v37;
          long long v41 = *((_OWORD *)v37 + 1);
          *(void *)(v39 + 32) = *((void *)v37 + 4);
          *(_OWORD *)uint64_t v39 = v40;
          *(_OWORD *)(v39 + 16) = v41;
        }
        uint64_t v9 = v50;
      }
      else
      {
        int v30 = 0;
        if (v25 >= 64) {
          int v31 = 64;
        }
        else {
          int v31 = v25;
        }
        int v32 = *((_DWORD *)v29 + 1);
        int v33 = -v31;
        while (v32 != v61[((_BYTE)v25 + (_BYTE)v30 - 1) & 0x3F])
        {
          if (v33 == --v30) {
            goto LABEL_39;
          }
        }
      }
      ++v26;
    }
    while (v26 != 8);
    uint64_t v15 = (uint64_t)*a1;
    int v17 = *((_DWORD *)a1 + 37);
    uint64_t v12 = v49;
    char v16 = v48;
    if (v60 == *((_DWORD *)*a1 + 1))
    {
      if (v17 == 2) {
        goto LABEL_22;
      }
      *((_DWORD *)a1 + 37) = --v17;
    }
    int v42 = 4 * *((_DWORD *)a1 + 9);
    while (1)
    {
      int v43 = *(__int16 *)(v15 + 4);
      if (v43 >= 0) {
        int v44 = *(__int16 *)(v15 + 4);
      }
      else {
        int v44 = -v43;
      }
      if ((1 << v17) + v44 <= v42)
      {
        int v45 = *(__int16 *)(v15 + 6);
        if (v45 < 0) {
          int v45 = -v45;
        }
        int v46 = (1 << v17) + v45;
        int v47 = 4 * *((_DWORD *)a1 + 10);
        if (v17 < 3 || v46 <= v47)
        {
          if (v46 > v47) {
            break;
          }
          goto LABEL_24;
        }
      }
      else if (v17 < 3)
      {
        break;
      }
      *((_DWORD *)a1 + 37) = --v17;
    }
  }
LABEL_22:
  *(unsigned char *)(v12 + 10) = 3;
  *(unsigned char *)(v12 + 11) = *(unsigned char *)(v12 + 11) & 0xAE | (16 * (v16 & 1));
  *(unsigned char *)(v12 + 8) = **a1;
  *(_DWORD *)uint64_t v12 = *((_DWORD *)*a1 + 1);
  *(_DWORD *)(v12 + 4) = 0;
  *(unsigned char *)(v12 + 9) = -1;
  return *((void *)*a1 + 3);
}

uint64_t sub_1BBA55260(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(char *)(a2 + 314);
  if (v4 <= *(char *)(a2 + 315)) {
    int v4 = *(char *)(a2 + 315);
  }
  if (v4 <= 10)
  {
    int v5 = *(char *)(a2 + 150) + *(char *)(a2 + 149);
    *(unsigned char *)(result + 8) = 0;
    if (v4 == 8)
    {
      if (*(_DWORD *)(a2 + 320)) {
        char v6 = 1;
      }
      else {
        char v6 = 20;
      }
      BOOL v7 = v5 == 0;
      char v8 = 3;
    }
    else
    {
      BOOL v7 = *(_DWORD *)(a2 + 320) == 0;
      char v6 = 2;
      char v8 = -124;
    }
    if (v7) {
      char v6 = v8;
    }
    *(unsigned char *)(result + 8) = v6;
    uint64_t v36 = 0;
    unint64_t result = sub_1BBA61468(a2, (int *)&v36 + 1, (int *)&v36);
    unsigned int v9 = SHIDWORD(v36) <= (int)v36 ? v36 : HIDWORD(v36);
    double v10 = *(double *)(a2 + 96);
    if (v10 != 0.0)
    {
      unsigned int v11 = v36 * HIDWORD(v36);
      unsigned int v12 = (v10 * (double)(v36 * HIDWORD(v36)));
      uint64_t v13 = &unk_1BBB79FB0;
      unsigned __int8 v14 = &unk_1BBB79ED8;
      uint64_t v15 = (unsigned __int16 *)&unk_1BBB79F62;
      char v16 = &unk_1BBB79F20;
      uint64_t v17 = 1;
      unsigned int v18 = *(_DWORD *)(a2 + 180);
      *(unsigned char *)(v3 + 152) = 0;
      unint64_t result = 12;
      do
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          unsigned int v20 = v16[i];
          if (v11 <= (3 * v20) >> 2) {
            int v21 = 8;
          }
          else {
            int v21 = 6;
          }
          if (v11 <= v20 >> 1) {
            int v21 = 12;
          }
          if (v11 <= v20 >> 2) {
            int v21 = 16;
          }
          if (v20) {
            BOOL v22 = v20 >= v11;
          }
          else {
            BOOL v22 = 0;
          }
          if (v22 && v15[i] && v9 <= v15[i])
          {
            unsigned int v24 = v14[i];
            if (v24)
            {
              if (v24 >= v12)
              {
                unsigned int v25 = v13[i];
                if (1000 * v25 >= v18 && v21 > v5)
                {
                  *(unsigned char *)(v3 + 7) |= v25 < v18;
                  *(unsigned char *)(v3 + 152) = v17 + 1;
                  *(unsigned char *)(v3 + 159) = i;
                  goto LABEL_43;
                }
              }
            }
          }
        }
        ++v17;
        v13 += 3;
        v14 += 3;
        v15 += 3;
        v16 += 3;
      }
      while (v17 != 6);
    }
  }
LABEL_43:
  int v27 = *(unsigned __int8 *)(v3 + 8);
  if ((v27 - 1) >= 3) {
    int v28 = 1 << v27;
  }
  else {
    int v28 = dword_1BBB7A040[(v27 - 1)];
  }
  *(_DWORD *)(v3 + 16) = v28;
  uint64_t v29 = *(unsigned __int8 *)(v3 + 152) - 1;
  uint64_t v30 = *(unsigned __int8 *)(v3 + 159);
  __int16 v31 = word_1BBB79F80[3 * (int)v29 + v30];
  *(unsigned char *)(v3 + 57) = v31;
  if ((_BYTE)v31 == 0xFF)
  {
    *(void *)(v3 + 68) = 0x8000000080000000;
    LOBYTE(v32) = 16;
  }
  else
  {
    uint64_t v33 = 3 * v29;
    unsigned int v34 = dword_1BBB79F14[v33 + v30];
    *(_DWORD *)(v3 + 68) = v34;
    *(_DWORD *)(v3 + 72) = *((_DWORD *)&unk_1BBB79FA4 + 18 * (*(unsigned char *)(v3 + 7) & 1) + v33 + v30);
    uint64_t v36 = 0;
    unint64_t result = sub_1BBA61468(a2, (int *)&v36 + 1, (int *)&v36);
    unsigned int v35 = v36 * HIDWORD(v36);
    if ((int)v36 * HIDWORD(v36) <= v34 >> 2)
    {
      unsigned int v32 = 16;
    }
    else if (v35 <= v34 >> 1)
    {
      unsigned int v32 = 12;
    }
    else if (v35 <= (3 * v34) >> 2)
    {
      unsigned int v32 = 8;
    }
    else
    {
      unsigned int v32 = 6;
    }
    if (v32 >= *(char *)(a2 + 148)) {
      LOBYTE(v32) = *(unsigned char *)(a2 + 148);
    }
  }
  *(unsigned char *)(v3 + 76) = v32;
  *(unsigned char *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 44) |= 1u;
  *(unsigned char *)(v3 + 46) |= 1u;
  *(unsigned char *)(v3 + 47) |= 1u;
  *(unsigned char *)(v3 + 56) |= 1u;
  return result;
}

uint64_t sub_1BBA55568(unsigned char *a1, int a2, uint64_t a3)
{
  char v6 = &a1[a2];
  *char v6 = sub_1BBA196DC(a3, 2);
  a1[7] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
  int v7 = 0;
  v6[8] = sub_1BBA196DC(a3, 5);
  char v8 = v6 + 8;
  unsigned int v9 = &a1[4 * a2 + 16];
  do
    *v9 |= (sub_1BBA196DC(a3, 1) != 0) << v7++;
  while (v7 != 32);
  a1[44] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
  a1[45] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
  a1[46] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
  a1[47] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
  if (*v8 > 3u || (*(unsigned char *)v9 & 0x10) != 0)
  {
    a1[48] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
    a1[49] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
    a1[50] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
    a1[51] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
    a1[52] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
    a1[53] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
    a1[54] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
    a1[55] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
    a1[56] |= (sub_1BBA196DC(a3, 1) != 0) << a2;
    int v10 = 13;
  }
  else
  {
    a1[48] |= 1 << a2;
    a1[49] |= 1 << a2;
    a1[51] |= 1 << a2;
    a1[52] |= 1 << a2;
    if (*v8 == 3) {
      a1[54] |= 1 << a2;
    }
    int v10 = 22;
  }
  sub_1BBA196DC(a3, v10);

  return sub_1BBA196DC(a3, 22);
}

uint64_t sub_1BBA55888(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 > 6) {
    return 4294954387;
  }
  sub_1BBA55568((unsigned char *)a1, 0, a3);
  *(unsigned char *)(a1 + 57) = sub_1BBA196DC(a3, 8);
  if (a2 >= 1)
  {
    int v7 = 0;
    do
    {
      *(unsigned char *)(a1 + 64) |= (sub_1BBA196DC(a3, 1) != 0) << ++v7;
      *(unsigned char *)(a1 + 65) |= (sub_1BBA196DC(a3, 1) != 0) << v7;
    }
    while (a2 != v7);
    int v8 = a2 - 8;
    do
      sub_1BBA196DC(a3, 2);
    while (!__CFADD__(v8++, 1));
    uint64_t v10 = 0;
    do
    {
      unsigned int v11 = v10 + 1;
      int v12 = 1 << (v10 + 1);
      if ((v12 & *(unsigned char *)(a1 + 64)) != 0)
      {
        sub_1BBA55568((unsigned char *)a1, v11, a3);
      }
      else
      {
        uint64_t v13 = a1 + v10;
        *(unsigned char *)(v13 + 1) = *(unsigned char *)a1;
        *(unsigned char *)(a1 + 7) |= (*(unsigned char *)(a1 + 7) & 1) << v11;
        *(unsigned char *)(v13 + 9) = *(unsigned char *)(a1 + 8);
        *(_DWORD *)(a1 + 4 * v10 + 20) = *(_DWORD *)(a1 + 16);
        int8x8_t v14 = *(int8x8_t *)(a1 + 44);
        uint16x8_t v15 = vmovl_u8((uint8x8_t)vand_s8(v14, (int8x8_t)0x101010101010101));
        uint32x4_t v16 = (uint32x4_t)vdupq_n_s32(v11);
        uint8x8_t v17 = (uint8x8_t)vorr_s8(v14, vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v15.i8), v16), (int16x8_t)vshlq_u32(vmovl_high_u16(v15), v16))));
        *(uint8x8_t *)(a1 + 44) = v17;
        v17.i32[0] = *(_DWORD *)(a1 + 52);
        int16x8_t v18 = (int16x8_t)vmovl_u8(v17);
        *(int8x8_t *)v18.i8 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)vmovn_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)(v18.i64[0] & 0xFF01FF01FF01FF01)), v16)));
        *(_DWORD *)(a1 + 52) = vmovn_s16(v18).u32[0];
        *(unsigned char *)(a1 + 56) |= (*(unsigned char *)(a1 + 56) & 1) << v11;
      }
      if ((v12 & *(unsigned char *)(a1 + 65)) != 0) {
        char v19 = sub_1BBA196DC(a3, 8);
      }
      else {
        char v19 = *(unsigned char *)(a1 + 57);
      }
      *(unsigned char *)(a1 + v10++ + 58) = v19;
    }
    while ((a2 + 1) - 1 != v10);
  }
  if (a2 < 0) {
    return 0;
  }
  uint64_t v20 = 0;
  while (1)
  {
    uint64_t v21 = a1 + v20;
    unsigned __int8 v22 = *(unsigned char *)(a1 + v20 + 57);
    *(unsigned char *)(a1 + v20 + 159) = v22 % 0x1Eu / 3;
    *(unsigned char *)(a1 + v20 + 152) = v22 / 0x1Eu;
    if ((v22 + 46) < 0x4Cu || !*(unsigned char *)(v21 + 8))
    {
      *(unsigned char *)(a1 + v20 + 152) = 4;
      *(unsigned char *)(a1 + v20 + 159) = 0;
      *(unsigned char *)(a1 + v20 + 57) = 120;
      *(unsigned char *)(v21 + 8) = 1;
      *(_DWORD *)(a1 + 4 * v20 + 16) = 6;
    }
    if (*(unsigned char *)(a1 + (int)v20)) {
      break;
    }
    uint64_t v23 = a1 + (int)v20;
    uint64_t v24 = *(unsigned __int8 *)(v23 + 152);
    if ((v24 - 1) > 5 || *(unsigned __int8 *)(v23 + 159) > byte_1BBB7A034[v24 - 1]) {
      break;
    }
    uint64_t v25 = 0;
    while (1)
    {
      int v26 = byte_1BBB7A03A[v25];
      if (*(unsigned __int8 *)(a1 + (int)v20 + 8) == v26 || ((*(_DWORD *)(a1 + 4 * (int)v20 + 16) >> v26) & 1) != 0) {
        break;
      }
      if (++v25 == 4) {
        return 4294954387;
      }
    }
    uint64_t result = 0;
    if (++v20 == a2 + 1) {
      return result;
    }
  }
  return 4294954387;
}

uint64_t sub_1BBA55BB0(unsigned __int8 *a1, int a2, uint64_t a3)
{
  char v6 = &a1[a2];
  sub_1BBA19614(a3, *v6, 2);
  sub_1BBA19614(a3, (a1[7] >> a2) & 1, 1);
  sub_1BBA19614(a3, v6[8], 5);
  for (int i = 0; i != 32; ++i)
    sub_1BBA19614(a3, (*(_DWORD *)&a1[4 * a2 + 16] >> i) & 1, 1);
  sub_1BBA19614(a3, (a1[44] >> a2) & 1, 1);
  sub_1BBA19614(a3, (a1[45] >> a2) & 1, 1);
  sub_1BBA19614(a3, (a1[46] >> a2) & 1, 1);
  sub_1BBA19614(a3, (a1[47] >> a2) & 1, 1);
  sub_1BBA19614(a3, 0, 22);

  return sub_1BBA19614(a3, 0, 22);
}

uint64_t sub_1BBA55CE0(unsigned __int8 *a1, int a2, uint64_t a3)
{
  sub_1BBA55BB0(a1, 0, a3);
  uint64_t result = sub_1BBA19614(a3, a1[57], 8);
  if (a2 >= 1)
  {
    int v7 = 0;
    do
    {
      sub_1BBA19614(a3, (a1[64] >> ++v7) & 1, 1);
      uint64_t result = sub_1BBA19614(a3, (a1[65] >> v7) & 1, 1);
    }
    while (a2 != v7);
    if (a2 <= 7)
    {
      int v8 = a2 - 8;
      do
        uint64_t result = sub_1BBA19614(a3, 0, 2);
      while (!__CFADD__(v8++, 1));
    }
    uint64_t v10 = 0;
    uint64_t v11 = (a2 + 1) - 1;
    do
    {
      int v12 = 1 << (v10 + 1);
      if ((v12 & a1[64]) != 0) {
        uint64_t result = sub_1BBA55BB0(a1, (int)v10 + 2, a3);
      }
      if ((v12 & a1[65]) != 0) {
        uint64_t result = sub_1BBA19614(a3, a1[v10 + 58], 8);
      }
      ++v10;
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t sub_1BBA55DFC(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  if (!a3) {
    return 4294954386;
  }
  *(unsigned char *)a1 = sub_1BBA196DC(a2, 1) != 0;
  int v7 = sub_1BBA196DC(a2, 1);
  *(unsigned char *)(a1 + 1) = v7 != 0;
  if (*(unsigned char *)a1) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    int v9 = sub_1BBA196DC(a2, 1);
    *(unsigned char *)(a1 + 2) = v9 != 0;
    if (v9)
    {
      *(unsigned char *)(a1 + 3) = sub_1BBA196DC(a2, 8);
      *(unsigned char *)(a1 + 4) = sub_1BBA196DC(a2, 5);
      *(unsigned char *)(a1 + 5) = sub_1BBA196DC(a2, 1) != 0;
      *(unsigned char *)(a1 + 6) = sub_1BBA196DC(a2, 5);
    }
    *(unsigned char *)(a1 + 7) = sub_1BBA196DC(a2, 4);
    *(unsigned char *)(a1 + 8) = sub_1BBA196DC(a2, 4);
    if (*(unsigned char *)(a1 + 2)) {
      *(unsigned char *)(a1 + 9) = sub_1BBA196DC(a2, 4);
    }
    *(unsigned char *)(a1 + 10) = sub_1BBA196DC(a2, 5);
    *(unsigned char *)(a1 + 11) = sub_1BBA196DC(a2, 5);
    *(unsigned char *)(a1 + 12) = sub_1BBA196DC(a2, 5);
  }
  uint64_t v10 = (uint64_t *)(a1 + 16);
  uint64_t v11 = a4;
  if (*(void *)(a1 + 24) < (unint64_t)a4)
  {
    sub_1BBA5623C(a1 + 16);
    if (malloc_type_posix_memalign((void **)(a1 + 16), 0x10uLL, 40 * a4, 0x10200405D4A7992uLL) || !*v10) {
      return 4294954392;
    }
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *v10 + v13;
      *(unsigned char *)(v14 + 4) = 0;
      *(_DWORD *)uint64_t v14 = 0;
      *(_OWORD *)(v14 + 6) = 0uLL;
      *(_OWORD *)(v14 + 22) = 0uLL;
      *(_WORD *)(v14 + 38) = 0;
      v13 += 40;
    }
    while (40 * a4 != v13);
    *(void *)(a1 + 24) = a4;
  }
  uint64_t v15 = 0;
  do
  {
    uint64_t v16 = *v10;
    uint64_t v17 = *v10 + v15;
    *(unsigned char *)(v17 + 1) = 1;
    *(unsigned char *)(v17 + 4) = 0;
    *(_WORD *)(v17 + 6) = 0;
    int v18 = sub_1BBA196DC(a2, 1);
    *(unsigned char *)uint64_t v17 = v18 != 0;
    if (v18)
    {
      int v19 = *(unsigned __int8 *)(v17 + 1);
    }
    else
    {
      int v19 = sub_1BBA196DC(a2, 1) != 0;
      *(unsigned char *)(v17 + 1) = v19;
    }
    if (v19)
    {
      *(_WORD *)(v16 + v15 + 2) = sub_1BBA1979C(a2);
      if (*(unsigned char *)(v17 + 4)) {
        goto LABEL_26;
      }
LABEL_25:
      *(_WORD *)(v17 + 6) = sub_1BBA1979C(a2);
      goto LABEL_26;
    }
    BOOL v20 = sub_1BBA196DC(a2, 1) != 0;
    *(unsigned char *)(v17 + 4) = v20;
    if (!v20) {
      goto LABEL_25;
    }
LABEL_26:
    if (*(unsigned char *)a1)
    {
      uint64_t result = sub_1BBA560E0(v17, a2, a1, (void **)(v16 + v15 + 8));
      if (result) {
        return result;
      }
    }
    if (*(unsigned char *)(a1 + 1))
    {
      uint64_t result = sub_1BBA560E0(v17, a2, a1, (void **)(v16 + v15 + 24));
      if (result) {
        return result;
      }
    }
    v15 += 40;
    --v11;
  }
  while (v11);
  return 0;
}

uint64_t sub_1BBA560E0(uint64_t a1, uint64_t a2, uint64_t a3, void **memptr)
{
  unint64_t v8 = *(unsigned __int16 *)(a1 + 6);
  if ((unint64_t)memptr[1] <= v8)
  {
    int v9 = (void *)(v8 + 1);
    if (*memptr)
    {
      free(*memptr);
      *memptr = 0;
      memptr[1] = 0;
    }
    if (malloc_type_posix_memalign(memptr, 0x10uLL, 20 * (void)v9, 0x1000040C46099A0uLL) || !*memptr) {
      return 4294954392;
    }
    uint64_t v11 = 0;
    do
    {
      int v12 = (char *)*memptr + v11;
      *(void *)int v12 = 0;
      *((void *)v12 + 1) = 0;
      *((_DWORD *)v12 + 4) = 0;
      v11 += 20;
    }
    while (20 * v8 + 20 != v11);
    memptr[1] = v9;
  }
  uint64_t v13 = 0;
  unint64_t v14 = -1;
  do
  {
    *(_DWORD *)((char *)*memptr + v13) = sub_1BBA19824(a2);
    *(_DWORD *)((char *)*memptr + v13 + 4) = sub_1BBA19824(a2);
    if (*(unsigned char *)(a3 + 2))
    {
      *(_DWORD *)((char *)*memptr + v13 + 8) = sub_1BBA19824(a2);
      *(_DWORD *)((char *)*memptr + v13 + 12) = sub_1BBA19824(a2);
    }
    *((unsigned char *)*memptr + v13 + 16) = sub_1BBA196DC(a2, 1) != 0;
    ++v14;
    v13 += 20;
  }
  while (v14 < *(unsigned __int16 *)(a1 + 6));
  return 0;
}

void sub_1BBA5623C(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  if (v2)
  {
    if (*(void *)(a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        int v5 = (void *)(*(void *)a1 + v3);
        char v6 = (void *)v5[3];
        if (v6)
        {
          free(v6);
          v5[3] = 0;
          v5[4] = 0;
        }
        int v9 = (void *)v5[1];
        unint64_t v8 = v5 + 1;
        int v7 = v9;
        if (v9)
        {
          free(v7);
          *unint64_t v8 = 0;
          v8[1] = 0;
        }
        ++v4;
        v3 += 40;
      }
      while (v4 < *(void *)(a1 + 8));
      unsigned int v2 = *(void **)a1;
    }
    free(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1BBA562D0(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  if (v2)
  {
    if (*(void *)(a1 + 8))
    {
      unint64_t v3 = 0;
      uint64_t v4 = 16;
      do
      {
        sub_1BBA5623C(*(void *)a1 + v4);
        ++v3;
        v4 += 32;
      }
      while (v3 < *(void *)(a1 + 8));
      unsigned int v2 = *(void **)a1;
    }
    free(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t sub_1BBA5633C(uint64_t a1)
{
  sub_1BBA562D0(a1 + 264);
  unsigned int v2 = *(void **)(a1 + 224);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
  }
  return a1;
}

uint64_t sub_1BBA5637C(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) >= a2) {
    return 0;
  }
  sub_1BBA562D0(a1);
  if (malloc_type_posix_memalign((void **)a1, 0x10uLL, 32 * a2, 0x1020040F16FCCE1uLL) || !*(void *)a1) {
    return 4294954392;
  }
  uint64_t v5 = 0;
  unint64_t v6 = a2;
  do
  {
    int v7 = (void *)(*(void *)a1 + v5);
    v7[2] = 0;
    v7[3] = 0;
    *int v7 = 0;
    *(void *)((char *)v7 + 5) = 0;
    v5 += 32;
    --v6;
  }
  while (v6);
  uint64_t result = 0;
  *(void *)(a1 + 8) = a2;
  return result;
}

BOOL sub_1BBA5641C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 168) <= 0xFu)
  {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 169);
    if (v1 <= 6)
    {
      if (*(unsigned char *)(a1 + 171)) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = *(unsigned __int8 *)(a1 + 169);
      }
      uint64_t v3 = a1 + 172;
      uint64_t v4 = v1 + 1;
      while (1)
      {
        unsigned int v5 = *(unsigned __int8 *)(v3 + v2);
        if (v5 > 0xF || *(unsigned __int8 *)(v3 + v2 + 7) > v5 || *(_DWORD *)(v3 + 4 * v2 + 16) >= 0xFFFFFFFE) {
          break;
        }
        if (v4 == ++v2) {
          return *(unsigned __int16 *)(a1 + 218) <= 0x3FFu
        }
              && (!*(unsigned char *)(a1 + 240) || *(unsigned __int16 *)(a1 + 260) <= 0x400u);
      }
    }
  }
  return 0;
}

uint64_t sub_1BBA564B0(int a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  if (a1 != 1684632424 && a1 != 1752589105 && a1 != 1718908520)
  {
    uint64_t v16 = 0;
    if (a3) {
      int v17 = a3;
    }
    else {
      int v17 = 100;
    }
    int v18 = &dword_1E6248430;
    while (1)
    {
      int v19 = *v18;
      v18 += 8;
      if (v19 == v17) {
        break;
      }
      if (++v16 == 9)
      {
        int v12 = 0;
        goto LABEL_32;
      }
    }
    int v12 = &(&off_1E62480F8)[4 * v16 + 102];
LABEL_32:
    uint64_t v13 = 0;
    unint64_t v21 = a5 * (unint64_t)a4;
    unsigned __int8 v22 = &qword_1E6248118;
    while (v21 > *((unsigned int *)v22 - 4) || *v22 < v21 * a6)
    {
      ++v13;
      v22 += 6;
      if (v13 == 17) {
        goto LABEL_36;
      }
    }
    if (v12)
    {
      BOOL v20 = &off_1E62480F8;
      goto LABEL_39;
    }
LABEL_36:
    int v23 = 0x7FFFFFFF;
    goto LABEL_40;
  }
  uint64_t v8 = 0;
  if (a3 <= 1) {
    int v9 = 1;
  }
  else {
    int v9 = a3;
  }
  uint64_t v10 = &dword_1E6248000;
  while (1)
  {
    int v11 = *v10;
    v10 += 8;
    if (v11 == v9) {
      break;
    }
    if (++v8 == 8)
    {
      int v12 = 0;
      goto LABEL_17;
    }
  }
  int v12 = &(&off_1E6247D88)[4 * v8 + 78];
LABEL_17:
  uint64_t v13 = 0;
  unint64_t v14 = a5 * (unint64_t)a4;
  uint64_t v15 = &qword_1E6247DA8;
  while (v14 > *((unsigned int *)v15 - 4) || *v15 < v14 * a6)
  {
    ++v13;
    v15 += 6;
    if (v13 == 13) {
      goto LABEL_36;
    }
  }
  if (!v12) {
    goto LABEL_36;
  }
  BOOL v20 = &off_1E6247D88;
LABEL_39:
  int v23 = HIDWORD(v20[6 * v13 + 2]) * *((_DWORD *)v12 + 5);
LABEL_40:
  if (v23 >= a2) {
    return a2;
  }
  else {
    return v23;
  }
}

void sub_1BBA56634(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unsigned int v5 = (uint64_t *)v3[1];
        unint64_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          sub_1BB9C09B4(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_1BBA566AC(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 6) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void *sub_1BBA5670C(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  result[6] = a3;
  unsigned int v5 = (void *)result[15];
  if (v5)
  {
    if (!*v5)
    {
LABEL_6:
      unint64_t v6 = operator new(8uLL, MEMORY[0x1E4FBA2D0]);
      if (v6)
      {
        *unint64_t v6 = v5;
        operator new();
      }
      operator new();
    }
    if (!v5[8])
    {
      uint64_t result = dispatch_semaphore_create(1);
      v5[8] = result;
    }
    v4[5] = 0;
    *(_OWORD *)(v4 + 3) = 0u;
    *(_OWORD *)(v4 + 1) = 0u;
    *uint64_t v4 = a2;
  }
  else
  {
    uint64_t result = operator new(0x48uLL, MEMORY[0x1E4FBA2D0]);
    if (result)
    {
      unsigned int v5 = result;
      result[8] = 0;
      *((_OWORD *)result + 2) = 0u;
      *((_OWORD *)result + 3) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      v4[15] = result;
      goto LABEL_6;
    }
    v4[15] = 0;
  }
  return result;
}

void sub_1BBA5686C(_Unwind_Exception *a1)
{
  MEMORY[0x1C18605E0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA56894(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1C18605E0);
  }
  return result;
}

void sub_1BBA568B4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C18605E0);
}

uint64_t sub_1BBA568F0(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  uint64_t v3 = *(unint64_t **)(a1 + 120);
  dispatch_semaphore_wait((dispatch_semaphore_t)v3[8], 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v4 = v3[7];
  if (v4)
  {
    v3[7] = v4 - 1;
    sub_1BBA566AC(v3 + 2);
    goto LABEL_5;
  }
  unsigned int v5 = operator new(0x138uLL, MEMORY[0x1E4FBA2D0]);
  if (v5)
  {
    v5[15] = -1;
    *((_OWORD *)v5 + 13) = 0u;
    *((_OWORD *)v5 + 14) = 0u;
    *((_OWORD *)v5 + 15) = 0u;
    v5[32] = 0;
    *((_OWORD *)v5 + 18) = xmmword_1BBB7A050;
    v5[38] = 0xBFF0000000000000;
LABEL_5:
    dispatch_semaphore_signal((dispatch_semaphore_t)v3[8]);
    unint64_t v6 = *v3;
    unint64_t v7 = v3[1];
    if (v7)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
      *(void *)&long long v9 = v6;
      *((void *)&v9 + 1) = v7;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v9 = v6;
    }
    operator new();
  }
  dispatch_semaphore_signal((dispatch_semaphore_t)v3[8]);
  std::mutex::unlock(v2);
  return 4294954392;
}

void sub_1BBA56F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  sub_1BB9C09B4(v11);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1BBA56FE4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = *v2;
  *(void *)(v3 + 8) = v2[1];
  *(void *)v2[1] = v3;
  *(void *)(a1 + 16) = v1 - 1;
  unint64_t v4 = (std::__shared_weak_count *)v2[3];
  if (v4) {
    sub_1BB9C09B4(v4);
  }

  operator delete(v2);
}

void *sub_1BBA5703C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v7 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void sub_1BBA570A4(uint64_t **a1, uint64_t a2)
{
  unint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    unsigned int v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      unint64_t v6 = *a1;
      if (*a1)
      {
        uint64_t v7 = *v6;
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*v6 + 64), 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v8 = *(char **)(v7 + 32);
        long long v9 = *(char **)(v7 + 24);
        uint64_t v10 = v8 - v9;
        if (v8 == v9) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = ((v8 - v9) << 6) - 1;
        }
        unint64_t v13 = *(void *)(v7 + 48);
        uint64_t v12 = *(void *)(v7 + 56);
        unint64_t v14 = v12 + v13;
        if (v11 != v12 + v13) {
          goto LABEL_93;
        }
        if (v13 < 0x200)
        {
          uint64_t v29 = v10 >> 3;
          uint64_t v30 = *(char **)(v7 + 40);
          __int16 v31 = *(char **)(v7 + 16);
          uint64_t v32 = v30 - v31;
          if (v10 >> 3 >= (unint64_t)((v30 - v31) >> 3))
          {
            if (v30 == v31) {
              unint64_t v33 = 1;
            }
            else {
              unint64_t v33 = v32 >> 2;
            }
            unsigned int v34 = (char *)sub_1BB9C91CC(v33);
            uint64_t v36 = v35;
            unsigned int v37 = &v34[8 * v29];
            *(void *)&long long v38 = v34;
            *((void *)&v38 + 1) = v37;
            long long v120 = v38;
            uint64_t v39 = operator new(0x1000uLL);
            *(void *)&long long v40 = v37;
            *((void *)&v40 + 1) = &v34[8 * v36];
            if (v29 == v36)
            {
              uint64_t v41 = 8 * v29;
              *(void *)&long long v42 = v120;
              if (v10 < 1)
              {
                uint64_t v81 = v39;
                uint64_t v82 = v41 >> 2;
                if (v8 == v9) {
                  unint64_t v83 = 1;
                }
                else {
                  unint64_t v83 = v82;
                }
                int v84 = (char *)sub_1BB9C91CC(v83);
                unsigned int v37 = &v84[8 * (v83 >> 2)];
                *(void *)&long long v42 = v84;
                *((void *)&v42 + 1) = v37;
                *(void *)&long long v40 = v37;
                *((void *)&v40 + 1) = &v84[8 * v85];
                if (v34)
                {
                  long long v117 = v40;
                  long long v121 = v42;
                  operator delete(v34);
                  long long v40 = v117;
                  long long v42 = v121;
                }
                uint64_t v39 = v81;
              }
              else
              {
                uint64_t v43 = v41 >> 3;
                if (v43 >= -1) {
                  unint64_t v44 = v43 + 1;
                }
                else {
                  unint64_t v44 = v43 + 2;
                }
                v37 -= 8 * (v44 >> 1);
                *(void *)&long long v40 = v37;
                *((void *)&v42 + 1) = v37;
              }
            }
            else
            {
              long long v42 = v120;
            }
            *(void *)unsigned int v37 = v39;
            *(void *)&long long v40 = v40 + 8;
            for (uint64_t i = *(void *)(v7 + 32); i != *(void *)(v7 + 24); i -= 8)
            {
              int v87 = (void *)*((void *)&v42 + 1);
              if (*((void *)&v42 + 1) == (void)v42)
              {
                unsigned int v89 = (unsigned char *)v40;
                if ((unint64_t)v40 >= *((void *)&v40 + 1))
                {
                  if (*((void *)&v40 + 1) == *((void *)&v42 + 1)) {
                    unint64_t v94 = 1;
                  }
                  else {
                    unint64_t v94 = (uint64_t)(*((void *)&v40 + 1) - *((void *)&v42 + 1)) >> 2;
                  }
                  __int16 v95 = (char *)sub_1BB9C91CC(v94);
                  int v88 = &v95[(2 * v94 + 6) & 0xFFFFFFFFFFFFFFF8];
                  __int16 v97 = v88;
                  uint64_t v98 = v89 - (unsigned char *)v87;
                  if (v89 != (unsigned char *)v87)
                  {
                    __int16 v97 = &v88[v98 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v99 = 8 * (v98 >> 3);
                    int v100 = v88;
                    BOOL v101 = v87;
                    do
                    {
                      uint64_t v102 = *v101++;
                      *(void *)int v100 = v102;
                      v100 += 8;
                      v99 -= 8;
                    }
                    while (v99);
                  }
                  *(void *)&long long v42 = v95;
                  *((void *)&v42 + 1) = v88;
                  *(void *)&long long v40 = v97;
                  *((void *)&v40 + 1) = &v95[8 * v96];
                  if (v87)
                  {
                    long long v118 = v40;
                    long long v123 = v42;
                    operator delete(v87);
                    long long v40 = v118;
                    long long v42 = v123;
                  }
                }
                else
                {
                  uint64_t v90 = (uint64_t)(*((void *)&v40 + 1) - v40) >> 3;
                  if (v90 >= -1) {
                    uint64_t v91 = v90 + 1;
                  }
                  else {
                    uint64_t v91 = v90 + 2;
                  }
                  uint64_t v92 = v91 >> 1;
                  uint64_t v93 = v40 + 8 * (v91 >> 1);
                  int v88 = (char *)(v93 - (v40 - *((void *)&v42 + 1)));
                  if ((void)v40 == *((void *)&v42 + 1))
                  {
                    unsigned int v89 = (unsigned char *)*((void *)&v42 + 1);
                  }
                  else
                  {
                    uint64_t v119 = *((void *)&v40 + 1);
                    uint64_t v122 = v42;
                    memmove((void *)(v93 - (v40 - *((void *)&v42 + 1))), *((const void **)&v42 + 1), v40 - *((void *)&v42 + 1));
                    *((void *)&v40 + 1) = v119;
                    *(void *)&long long v42 = v122;
                  }
                  *((void *)&v42 + 1) = v88;
                  *(void *)&long long v40 = &v89[8 * v92];
                }
              }
              else
              {
                int v88 = (char *)*((void *)&v42 + 1);
              }
              uint64_t v103 = *(void *)(i - 8);
              *((void *)v88 - 1) = v103;
              *((void *)&v42 + 1) -= 8;
            }
            int v104 = *(void **)(v7 + 16);
            *(_OWORD *)(v7 + 16) = v42;
            *(_OWORD *)(v7 + 32) = v40;
            if (v104) {
              operator delete(v104);
            }
            goto LABEL_92;
          }
          if (v30 == v8)
          {
            unsigned int v58 = operator new(0x1000uLL);
            if (v31 == v9)
            {
              if (v8 == v9) {
                unint64_t v59 = 1;
              }
              else {
                unint64_t v59 = v32 >> 2;
              }
              int v60 = (char *)sub_1BB9C91CC(v59);
              long long v9 = &v60[(2 * v59 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v62 = *(uint64_t **)(v7 + 24);
              int v63 = v9;
              uint64_t v64 = *(void *)(v7 + 32) - (void)v62;
              if (v64)
              {
                int v63 = &v9[v64 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v65 = 8 * (v64 >> 3);
                uint64_t v66 = v9;
                do
                {
                  uint64_t v67 = *v62++;
                  *(void *)uint64_t v66 = v67;
                  v66 += 8;
                  v65 -= 8;
                }
                while (v65);
              }
              uint64_t v68 = *(void **)(v7 + 16);
              *(void *)(v7 + 16) = v60;
              *(void *)(v7 + 24) = v9;
              *(void *)(v7 + 32) = v63;
              *(void *)(v7 + 40) = &v60[8 * v61];
              if (v68)
              {
                operator delete(v68);
                long long v9 = *(char **)(v7 + 24);
              }
            }
            *((void *)v9 - 1) = v58;
            int v69 = *(char **)(v7 + 24);
            int v70 = *(char **)(v7 + 32);
            *(void *)(v7 + 24) = v69 - 8;
            uint64_t v71 = *((void *)v69 - 1);
            *(void *)(v7 + 24) = v69;
            if (v70 == *(char **)(v7 + 40))
            {
              unint64_t v72 = *(void *)(v7 + 16);
              uint64_t v73 = (uint64_t)&v69[-v72];
              if ((unint64_t)v69 <= v72)
              {
                uint64_t v105 = (uint64_t)&v70[-v72];
                BOOL v45 = v105 == 0;
                uint64_t v106 = v105 >> 2;
                if (v45) {
                  unint64_t v107 = 1;
                }
                else {
                  unint64_t v107 = v106;
                }
                int v108 = (char *)sub_1BB9C91CC(v107);
                unsigned int v110 = &v108[8 * (v107 >> 2)];
                __int16 v111 = *(uint64_t **)(v7 + 24);
                int v70 = v110;
                uint64_t v112 = *(void *)(v7 + 32) - (void)v111;
                if (v112)
                {
                  int v70 = &v110[v112 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v113 = 8 * (v112 >> 3);
                  int v114 = &v108[8 * (v107 >> 2)];
                  do
                  {
                    uint64_t v115 = *v111++;
                    *(void *)int v114 = v115;
                    v114 += 8;
                    v113 -= 8;
                  }
                  while (v113);
                }
                unsigned int v116 = *(void **)(v7 + 16);
                *(void *)(v7 + 16) = v108;
                *(void *)(v7 + 24) = v110;
                *(void *)(v7 + 32) = v70;
                *(void *)(v7 + 40) = &v108[8 * v109];
                if (v116)
                {
                  operator delete(v116);
                  int v70 = *(char **)(v7 + 32);
                }
              }
              else
              {
                uint64_t v74 = v73 >> 3;
                BOOL v21 = v73 >> 3 < -1;
                uint64_t v75 = (v73 >> 3) + 2;
                if (v21) {
                  uint64_t v76 = v75;
                }
                else {
                  uint64_t v76 = v74 + 1;
                }
                uint64_t v77 = -(v76 >> 1);
                uint64_t v78 = v76 >> 1;
                uint64_t v79 = &v69[-8 * v78];
                int64_t v80 = v70 - v69;
                if (v70 != v69)
                {
                  memmove(&v69[-8 * v78], v69, v70 - v69);
                  int v69 = *(char **)(v7 + 24);
                }
                int v70 = &v79[v80];
                *(void *)(v7 + 24) = &v69[8 * v77];
                *(void *)(v7 + 32) = &v79[v80];
              }
            }
            *(void *)int v70 = v71;
          }
          else
          {
            *(void *)uint64_t v8 = operator new(0x1000uLL);
          }
        }
        else
        {
          *(void *)(v7 + 48) = v13 - 512;
          uint64_t v17 = *(void *)v9;
          uint64_t v15 = v9 + 8;
          uint64_t v16 = v17;
          *(void *)(v7 + 24) = v15;
          if (*(char **)(v7 + 40) == v8)
          {
            unint64_t v18 = *(void *)(v7 + 16);
            uint64_t v19 = (uint64_t)&v15[-v18];
            if ((unint64_t)v15 <= v18)
            {
              uint64_t v46 = (uint64_t)&v8[-v18];
              BOOL v45 = v46 == 0;
              uint64_t v47 = v46 >> 2;
              if (v45) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = v47;
              }
              uint64_t v49 = (char *)sub_1BB9C91CC(v48);
              uint64_t v51 = &v49[8 * (v48 >> 2)];
              int v52 = *(uint64_t **)(v7 + 24);
              uint64_t v8 = v51;
              uint64_t v53 = *(void *)(v7 + 32) - (void)v52;
              if (v53)
              {
                uint64_t v8 = &v51[v53 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v54 = 8 * (v53 >> 3);
                uint64_t v55 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v56 = *v52++;
                  *(void *)uint64_t v55 = v56;
                  v55 += 8;
                  v54 -= 8;
                }
                while (v54);
              }
              uint64_t v57 = *(void **)(v7 + 16);
              *(void *)(v7 + 16) = v49;
              *(void *)(v7 + 24) = v51;
              *(void *)(v7 + 32) = v8;
              *(void *)(v7 + 40) = &v49[8 * v50];
              if (v57)
              {
                operator delete(v57);
                uint64_t v8 = *(char **)(v7 + 32);
              }
            }
            else
            {
              uint64_t v20 = v19 >> 3;
              BOOL v21 = v19 >> 3 < -1;
              uint64_t v22 = (v19 >> 3) + 2;
              if (v21) {
                uint64_t v23 = v22;
              }
              else {
                uint64_t v23 = v20 + 1;
              }
              uint64_t v24 = -(v23 >> 1);
              uint64_t v25 = v23 >> 1;
              int v26 = &v15[-8 * v25];
              int64_t v27 = v8 - v15;
              if (v8 == v15)
              {
                int v28 = v8;
              }
              else
              {
                memmove(&v15[-8 * v25], v15, v8 - v15);
                int v28 = *(char **)(v7 + 24);
              }
              uint64_t v8 = &v26[v27];
              *(void *)(v7 + 24) = &v28[8 * v24];
              *(void *)(v7 + 32) = &v26[v27];
            }
          }
          *(void *)uint64_t v8 = v16;
        }
        *(void *)(v7 + 32) += 8;
LABEL_92:
        long long v9 = *(char **)(v7 + 24);
        uint64_t v12 = *(void *)(v7 + 56);
        unint64_t v14 = *(void *)(v7 + 48) + v12;
LABEL_93:
        *(void *)(*(void *)&v9[(v14 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v14 & 0x1FF)) = a2;
        *(void *)(v7 + 56) = v12 + 1;
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v7 + 64));
LABEL_94:
        sub_1BB9C09B4(v5);
        return;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  if (a2) {
    MEMORY[0x1C18605E0](a2, 0x1000C40DFA26CF1);
  }
  if (v5) {
    goto LABEL_94;
  }
}

void sub_1BBA57694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v12);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  sub_1BB9C09B4(v11);
  _Unwind_Resume(a1);
}

void sub_1BBA576D8(uint64_t a1)
{
  sub_1BBA570A4((uint64_t **)(a1 + 32), *(void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BBA5772C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEC50;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);

  JUMPOUT(0x1C18605E0);
}

void sub_1BBA5779C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEC50;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1BBA577F8(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v2 = a1 + 24;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  bzero((void *)(a1 + 120), 0x37CuLL);
  *(_DWORD *)(v2 + 988) = -1;
  *(void *)(v2 + 1000) = v2 + 1000;
  *(void *)(v2 + 1008) = v2 + 1000;
  *(_OWORD *)(v2 + 1016) = xmmword_1BBB6F900;
  *(_OWORD *)(v2 + 1032) = 0u;
  *(_OWORD *)(v2 + 1048) = 0u;
  *(_OWORD *)(v2 + 1064) = 0u;
  *(void *)(v2 + 1080) = 0;
  *(_DWORD *)(v2 + 1124) = 0;
  *(void *)(v2 + 1096) = 0;
  *(_OWORD *)(v2 + 1104) = 0u;
  *(unsigned char *)(v2 + 1120) = 0;
  *(_OWORD *)(v2 + 1144) = 0u;
  *(void *)(v2 + 3160) = &unk_1F14EDE48;
  *(void *)(v2 + 3168) = 0;
  *(_DWORD *)(v2 + 3176) = 0;
  *(unsigned char *)(v2 + 3180) = 0;
  sub_1BBA40688((void *)(v2 + 3160), 0xAAB8A388324B35B9, &dword_1E9F80A90, qword_1BBB79578, 0xF5D6A8C57AB94F05);
  sub_1BBA40770(v2 + 3160, 0x78039475C6A50527, (void (*)(uint64_t, uint64_t, void))sub_1BBA40800, 1);
  *(void *)(a1 + 3184) = &unk_1F14EDFE8;
  *(void *)(a1 + 3280) = 0x403E000000000000;
  *(void *)(v2 + 3316) = 0;
  *(_DWORD *)(a1 + 3348) = 0;
  *(_DWORD *)(a1 + 3448) = 0;
  *(_DWORD *)(v2 + 3474) = 2056;
  *(_DWORD *)(a1 + 3504) = 1;
  *(unsigned char *)(a1 + 3802) = 0;
  *(unsigned char *)(a1 + 3808) = 0;
  *(_OWORD *)(a1 + 10732) = 0u;
  *(_OWORD *)(a1 + 10748) = 0u;
  *(_OWORD *)(a1 + 10764) = 0u;
  *(_OWORD *)(a1 + 10780) = 0u;
  *(_OWORD *)(a1 + 10796) = 0u;
  *(_OWORD *)(a1 + 10812) = 0u;
  *(_OWORD *)(a1 + 10828) = 0u;
  *(_OWORD *)(a1 + 10844) = 0u;
  *(_OWORD *)(a1 + 10860) = 0u;
  *(_OWORD *)(a1 + 10876) = 0u;
  *(_OWORD *)(a1 + 10892) = 0u;
  *(_OWORD *)(a1 + 10908) = 0u;
  *(_OWORD *)(a1 + 10924) = 0u;
  *(_OWORD *)(a1 + 10940) = 0u;
  *(_OWORD *)(a1 + 10956) = 0u;
  *(_OWORD *)(a1 + 10972) = 0u;
  sub_1BBA418E0((void *)(v2 + 3160), 0xAF63E54C8601FBD7, (unsigned char *)(a1 + 3235), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xA9918CC5FA26ABALL, (unsigned char *)(a1 + 3235), 0);
  sub_1BBA4198C((void *)(v2 + 3160), 0, (void *)(a1 + 3208));
  sub_1BBA4198C((void *)(v2 + 3160), 0xAF63E24C8601F6BELL, (void *)(a1 + 3216));
  sub_1BBA4198C((void *)(v2 + 3160), 0xAF63EF4C86020CD5, (void *)(a1 + 3224));
  sub_1BBA418E0((void *)(v2 + 3160), 0x21EA93E0E5D89562, (unsigned char *)(a1 + 3708), 1);
  sub_1BBA4198C((void *)(v2 + 3160), 0x75909A2E7B7A5950, (void *)(a1 + 3512));
  sub_1BBA418E0((void *)(v2 + 3160), 0x81988191775D1F3, (unsigned char *)(a1 + 3232), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x7E8D690E31D04174, (unsigned char *)(a1 + 3233), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x4B67B014335F38D7, (unsigned char *)(a1 + 3234), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x35CA209DCAF9161DLL, (unsigned char *)(a1 + 3236), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x6C8B4995CC5E527ELL, (unsigned char *)(a1 + 3237), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x93BBF08EAB474DB2, (unsigned char *)(a1 + 3238), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xB03C2E5AF042E3A5, (unsigned char *)(a1 + 3240), 1);
  sub_1BBA418E0((void *)(v2 + 3160), 0x8435706FD97519EDLL, (unsigned char *)(a1 + 3241), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xDA7CA283D396F91BLL, (unsigned char *)(a1 + 3242), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x57F5EBD3E10F05D9, (unsigned char *)(a1 + 3243), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xDFF2FE5D542EA31BLL, (unsigned char *)(a1 + 3244), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x74FC82D498616DDCLL, (unsigned char *)(a1 + 3421), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xBDE6380775DA187BLL, (unsigned char *)(a1 + 3432), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x8914E07B53BA1E3, (unsigned char *)(a1 + 3408), 1);
  sub_1BBA4178C((void *)(v2 + 3160), 0xAF63EE4C86020B22, (unsigned char *)(a1 + 3288), 1);
  sub_1BBA4178C((void *)(v2 + 3160), 0x8B74307B55C5E6FLL, (unsigned char *)(a1 + 3289), 26);
  sub_1BBA4178C((void *)(v2 + 3160), 0x8D55707B5757DFALL, (unsigned char *)(a1 + 3290), 29);
  sub_1BBA4178C((void *)(v2 + 3160), 0xDFDAC24BD409847CLL, (unsigned char *)(a1 + 3291), -1);
  sub_1BBA4178C((void *)(v2 + 3160), 0x6645A215890A31C2, (unsigned char *)(a1 + 3292), -1);
  sub_1BBA418E0((void *)(v2 + 3160), 0xE86133FFF2272F7BLL, (unsigned char *)(a1 + 11057), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x6FBB85DC095D7E1, (unsigned char *)(a1 + 3293), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0xD44840630403593ELL, (unsigned char *)(a1 + 3294), -6);
  sub_1BBA4178C((void *)(v2 + 3160), 0xD75F16AF99FA6E18, (unsigned char *)(a1 + 3295), 3);
  sub_1BBA4178C((void *)(v2 + 3160), 0xB570E51110F5B8FDLL, (unsigned char *)(a1 + 3296), 40);
  sub_1BBA4178C((void *)(v2 + 3160), 0xA0619F0E9B9B103, (unsigned char *)(a1 + 3297), 30);
  sub_1BBA4178C((void *)(v2 + 3160), 0xFD595764CD149455, (unsigned char *)(a1 + 3298), -1);
  sub_1BBA4178C((void *)(v2 + 3160), 0x98769542C7EBC5D8, (unsigned char *)(a1 + 3299), -1);
  sub_1BBA418E0((void *)(v2 + 3160), 0x322E22E255B64146, (unsigned char *)(a1 + 3300), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0x1FEC452F271EF6EALL, (_DWORD *)(a1 + 3304), 11);
  sub_1BBA4178C((void *)(v2 + 3160), 0x70A12C1952D5628BLL, (unsigned char *)(a1 + 3308), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x3740EA07C0973081, (unsigned char *)(a1 + 3309), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x3740DD07C0971A6ALL, (unsigned char *)(a1 + 3310), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0xF8B0C066E05FB132, (unsigned char *)(a1 + 3311), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x53F78B1FC36A960FLL, (unsigned char *)(a1 + 3312), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x822379195CCD6478, (unsigned char *)(a1 + 3313), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0xAF63DB4C8601EAD9, (_DWORD *)(a1 + 3316), 0x7FFFFFFF);
  if (qword_1EC027190 != -1) {
    dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
  }
  sub_1BBA414E0((void *)(v2 + 3160), 0xC0AB56BF45863635, (_DWORD *)(a1 + 3328), dword_1EC027100);
  sub_1BBA41A20((void *)(v2 + 3160), 0x72351913690D14, (_DWORD *)(a1 + 3364));
  sub_1BBA41A20((void *)(v2 + 3160), 0xA6C1456D3CBB586CLL, (_DWORD *)(a1 + 3368));
  sub_1BBA4178C((void *)(v2 + 3160), 0x8DC5507B57B9942, (unsigned char *)(a1 + 3400), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x1E5485EF2E9F9384, (unsigned char *)(a1 + 3415), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x832846984DBFE0D9, (unsigned char *)(a1 + 3416), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x54EB290A497D21C7, (unsigned char *)(a1 + 3417), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x822DA0195CD5FB42, (unsigned char *)(a1 + 3418), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x9823E18BF99D7A9, (unsigned char *)(a1 + 3419), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x9BFA121F99ACE953, (unsigned char *)(a1 + 3239), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x8D26507B5735FEDLL, (unsigned char *)(a1 + 3409), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x8A25007B54A187CLL, (unsigned char *)(a1 + 3410), 3);
  sub_1BBA418E0((void *)(v2 + 3160), 0x8A24D07B54A1363, (unsigned char *)(a1 + 3411), 1);
  sub_1BBA418E0((void *)(v2 + 3160), 0xCDE5ECAD70CF6CD5, (unsigned char *)(a1 + 3797), 1);
  sub_1BBA418E0((void *)(v2 + 3160), 0xDC9E8F18FEC9589BLL, (unsigned char *)(a1 + 3794), 1);
  sub_1BBA4178C((void *)(v2 + 3160), 0x8AD3B07B553FC52, (unsigned char *)(a1 + 3412), 1);
  sub_1BBA4178C((void *)(v2 + 3160), 0x570AB51944740F8ALL, (unsigned char *)(a1 + 3413), 1);
  sub_1BBA414E0((void *)(v2 + 3160), 0x615A99E879F1FBEDLL, (_DWORD *)(a1 + 3424), 32);
  sub_1BBA418E0((void *)(v2 + 3160), 0x5334C45223677F91, (unsigned char *)(a1 + 3428), 1);
  sub_1BBA418E0((void *)(v2 + 3160), 0x5F76FE45FB19FE48, (unsigned char *)(a1 + 3429), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0x8984D07B541BEDELL, (_DWORD *)(a1 + 3320), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x41B440525D697FF7, (unsigned char *)(a1 + 3753), -1);
  sub_1BBA4178C((void *)(v2 + 3160), 0xF43418886590D867, (unsigned char *)(a1 + 3754), 1);
  sub_1BBA4178C((void *)(v2 + 3160), 0xB85BFD9F3C15B21BLL, (unsigned char *)(a1 + 3755), 2);
  sub_1BBA4178C((void *)(v2 + 3160), 0x5A76D5720CA84BE6, (unsigned char *)(a1 + 3756), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x42362CEF434B870CLL, (unsigned char *)(a1 + 3430), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x40F0DD8F37FC4C2ELL, (unsigned char *)(a1 + 3431), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x9532CFA66877DD95, (unsigned char *)(a1 + 3433), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xE31989A769C63238, (unsigned char *)(a1 + 3434), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x2B9CFF192BD29267, (unsigned char *)(a1 + 3440), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x7EF6AFD0BC2C3AFBLL, (unsigned char *)(a1 + 3435), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0xAF38EF220F97347CLL, (unsigned char *)(a1 + 3436), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xAEC568C75E5A789BLL, (unsigned char *)(a1 + 3441), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0xEDFFBC8BA94277D2, (unsigned char *)(a1 + 3442), 1);
  sub_1BBA4178C((void *)(v2 + 3160), 0x4A6099A424EFF8D8, (unsigned char *)(a1 + 3443), 4);
  sub_1BBA418E0((void *)(v2 + 3160), 0xD92EDD40EE009C75, (unsigned char *)(a1 + 3444), 1);
  sub_1BBA418E0((void *)(v2 + 3160), 0xDC91E78F7946A89BLL, (unsigned char *)(a1 + 3445), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0x32468D84F55FB2A7, (_DWORD *)(a1 + 3452), 1);
  sub_1BBA414E0((void *)(v2 + 3160), 0x9163BFEE0B8BBC39, (_DWORD *)(a1 + 3492), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x6FB4ED4D665CFB53, (unsigned char *)(a1 + 3496), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x672CC44D6190BB64, (unsigned char *)(a1 + 3497), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xF177F127AFD546AFLL, (unsigned char *)(a1 + 3437), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xA8CCC6E13F002CB5, (unsigned char *)(a1 + 3438), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0x4CF9EDAEEADD3E2DLL, (_DWORD *)(a1 + 3324), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xE71AB9033F0EDA46, (unsigned char *)(a1 + 3533), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x25CA010D7C67FE5, (unsigned char *)(a1 + 3534), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0x362F2028C00751E9, (_DWORD *)(a1 + 3528), -1);
  sub_1BBA414E0((void *)(v2 + 3160), 0x4E05C1AA5BF3BB95, (_DWORD *)(a1 + 3524), -1);
  sub_1BBA418E0((void *)(v2 + 3160), 0x694C40428BDBDE55, (unsigned char *)(a1 + 3532), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0xE0B2E769BCA75729, (unsigned char *)(a1 + 3770), -1);
  sub_1BBA418E0((void *)(v2 + 3160), 0x56ADD197B188AB49, (unsigned char *)(a1 + 3536), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x47AA463E24919B8ALL, (unsigned char *)(a1 + 3537), 0);
  sub_1BBA4198C((void *)(v2 + 3160), 0x8860D9D1EF04328, (void *)(a1 + 3544));
  sub_1BBA4198C((void *)(v2 + 3160), 0x6F04801F48EBD537, (void *)(a1 + 3552));
  sub_1BBA418E0((void *)(v2 + 3160), 0xF0F0537A8BB752CELL, (unsigned char *)(a1 + 3535), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xDF7FDAC19F2075E3, (unsigned char *)(a1 + 3560), 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0xBE27DAD503ACC303, (unsigned char *)(a1 + 3784), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xBC874B605A9708BLL, (unsigned char *)(a1 + 3785), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xD6C905BD7D301F5FLL, (unsigned char *)(a1 + 3420), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0x41DFFDF7511DD97, (_DWORD *)(a1 + 3780), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0xD2B0E97E2F02AF60, (_DWORD *)(a1 + 3584), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xE7F531AB6DDD32A0, (unsigned char *)(a1 + 3676), 0);
  sub_1BBA41D98((void *)(v2 + 3160), 0x32B8DD2503E0688BLL, (double *)(a1 + 3680), 0.75);
  sub_1BBA418E0((void *)(v2 + 3160), 0x8B99A01909551539, (unsigned char *)(a1 + 3704), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xE6E3C883B6C15A05, (unsigned char *)(a1 + 3705), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x3C401D6A027DD916, (unsigned char *)(a1 + 3706), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x4024333BFF24B792, (unsigned char *)(a1 + 3707), 1);
  sub_1BBA414E0((void *)(v2 + 3160), 0x24DC7CA1D440D709, (_DWORD *)(a1 + 3580), 0);
  sub_1BBA4198C((void *)(v2 + 3160), 0xFE98FF5FC68FF9F7, (void *)(a1 + 3568));
  sub_1BBA41638((void *)(v2 + 3160), 0xEADA4767E797268BLL, (_WORD *)(a1 + 3598), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x3BEB44829B7A4FABLL, (unsigned char *)(a1 + 3596), 0);
  sub_1BBA41638((void *)(v2 + 3160), 0x9FFE593DC10E7CC4, (_WORD *)(a1 + 3600), 2);
  sub_1BBA41638((void *)(v2 + 3160), 0x2660BA38B42FDFB5, (_WORD *)(a1 + 3602), 2);
  sub_1BBA41638((void *)(v2 + 3160), 0xE961BACE8A163BCBLL, (_WORD *)(a1 + 3604), 2);
  sub_1BBA414E0((void *)(v2 + 3160), 0x8BA0F8536CDD1EE8, (_DWORD *)(a1 + 3592), -1);
  sub_1BBA414E0((void *)(v2 + 3160), 0xD542D0AE8E599D7FLL, (_DWORD *)(a1 + 3656), -1);
  sub_1BBA41C2C((void *)(v2 + 3160), 0x78C38F81E9A32BBBLL, (float *)(a1 + 3660), -1.0);
  sub_1BBA4178C((void *)(v2 + 3160), 0xDAFCA2DBC70FE273, (unsigned char *)(a1 + 3709), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0xD7F2EB7B92415B9, (_DWORD *)(a1 + 3720), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0x36894A690496A6B6, (_DWORD *)(a1 + 3724), 1);
  sub_1BBA41D98((void *)(v2 + 3160), 0x525D42260F851786, (double *)(a1 + 3728), -1.0);
  sub_1BBA41D98((void *)(v2 + 3160), 0x25204DD656F00F60, (double *)(a1 + 3736), 0.6);
  sub_1BBA418E0((void *)(v2 + 3160), 0x8516C6F81EB0D7AALL, (unsigned char *)(a1 + 3786), 1);
  sub_1BBA414E0((void *)(v2 + 3160), 0xE8A2053B823E7F7ELL, (_DWORD *)(a1 + 3588), 3);
  sub_1BBA414E0((void *)(v2 + 3160), 0x3B036542BE80F4D6, (_DWORD *)(a1 + 3744), 1);
  sub_1BBA414E0((void *)(v2 + 3160), 0xDE9D01B25B989E98, (_DWORD *)(a1 + 3748), 1);
  sub_1BBA418E0((void *)(v2 + 3160), 0x4B9E18DDB3822E21, (unsigned char *)(a1 + 3752), 1);
  sub_1BBA40770(v2 + 3160, 0x4179B3C137C3CEB0, (void (*)(uint64_t, uint64_t, void))sub_1BBA6E228, 0);
  sub_1BBA40688((void *)(v2 + 3160), 0x3E7BE8C2CD695C2FLL, (_DWORD *)(a1 + 11076), qword_1BBB7A150, 0x7E0471917459E39);
  sub_1BBA418E0((void *)(v2 + 3160), 0xCF983D241CBF8355, (unsigned char *)(a1 + 3576), 1);
  sub_1BBA414E0((void *)(v2 + 3160), 0xA059F5697B7486A5, (_DWORD *)(a1 + 3616), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0xD09ADAD723F60060, (_DWORD *)(a1 + 3652), 0);
  sub_1BBA40688((void *)(v2 + 3160), 0xCAB54518F478F595, (_DWORD *)(a1 + 3776), qword_1BBB7A190, 0x3C0D17BAD169557BLL);
  sub_1BBA40688((void *)(v2 + 3160), 0x2FFB828DFAE55635, (_DWORD *)(a1 + 3688), qword_1BBB7A1E0, 0x129882191DED2351);
  sub_1BBA40688((void *)(v2 + 3160), 0xD45FA9B580EC2502, (_DWORD *)(a1 + 3692), qword_1BBB7A210, 0x3C0D17BAD169557BLL);
  sub_1BBA414E0((void *)(v2 + 3160), 0x5898835E4AFAC0A9, (_DWORD *)(a1 + 3696), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0xBDC9443F1ECE4AAFLL, (_DWORD *)(a1 + 3700), 1);
  sub_1BBA40688((void *)(v2 + 3160), 0xFE31B357AB72A0FLL, (_DWORD *)(a1 + 3360), qword_1BBB7A090, 0x3C0D17BAD169557BLL);
  sub_1BBA40688((void *)(v2 + 3160), 0xF5B6EA8C35AC1E89, (_DWORD *)(a1 + 3404), qword_1BBB7A100, 0xC76A095E1FFA22B6);
  sub_1BBA40770(v2 + 3160, 0xAF63E84C860200F0, (void (*)(uint64_t, uint64_t, void))sub_1BBA6D91C, 1);
  sub_1BBA41A20((void *)(v2 + 3160), 0x8ADD349E618BA10ELL, (_DWORD *)(a1 + 3268));
  *(_WORD *)(a1 + 3272) = 0;
  uint64_t v3 = *(void *)(a1 + 3192);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 3192);
    while (*(void *)(v4 + 16) != 0xE8DDC90A9D7C709DLL)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    unsigned int v5 = operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
    if (v5)
    {
      v5[1] = v3;
      v5[2] = 0xE8DDC90A9D7C709DLL;
      *((_DWORD *)v5 + 6) = 0;
      *unsigned int v5 = &unk_1F14EDE20;
      v5[4] = a1 + 3272;
      *(void *)(a1 + 3192) = v5;
    }
  }
  sub_1BBA418E0((void *)(v2 + 3160), 0x456BDD095F7DB261, (unsigned char *)(a1 + 3260), 0);
  sub_1BBA414E0((void *)(v2 + 3160), 0x9A91BC7C819464BDLL, (_DWORD *)(a1 + 3264), 0);
  sub_1BBA41A20((void *)(v2 + 3160), 0xF890AF2C24C4A032, (_DWORD *)(a1 + 3256));
  sub_1BBA40770(v2 + 3160, 0xAF63D94C8601E773, (void (*)(uint64_t, uint64_t, void))sub_1BBA6D820, 0);
  sub_1BBA40770(v2 + 3160, 0x8984E07B541C091, (void (*)(uint64_t, uint64_t, void))sub_1BBA6D700, 0);
  sub_1BBA4178C((void *)(v2 + 3160), 0x38D9AFB7AB26693ALL, (unsigned char *)(a1 + 3332), 16);
  sub_1BBA40770(v2 + 3160, 0x89E9C01960F4C582, (void (*)(uint64_t, uint64_t, void))sub_1BBA6D60C, 0);
  sub_1BBA40770(v2 + 3160, 0x144BEF24C3493907, (void (*)(uint64_t, uint64_t, void))sub_1BBA6D540, 0);
  sub_1BBA40770(v2 + 3160, 0x8A24307B54A0265, (void (*)(uint64_t, uint64_t, void))sub_1BBA6E228, 0);
  sub_1BBA40770(v2 + 3160, 0x8C84307B56AD1A2, (void (*)(uint64_t, uint64_t, void))sub_1BBA6E228, 0);
  sub_1BBA40770(v2 + 3160, 0x571BB01944827A3ELL, (void (*)(uint64_t, uint64_t, void))sub_1BBA6E228, 0);
  sub_1BBA40770(v2 + 3160, 0x8C49EF6ED9F28EA0, (void (*)(uint64_t, uint64_t, void))sub_1BBA6D368, 0);
  sub_1BBA40770(v2 + 3160, 0x81C3B0CF315BC925, (void (*)(uint64_t, uint64_t, void))sub_1BBA6D368, 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x8AC625BB85ED202BLL, (unsigned char *)(a1 + 11000), 0);
  sub_1BBA40688((void *)(v2 + 3160), 0xDA3A876E9663D9D3, (_DWORD *)(a1 + 11004), qword_1BBB7A250, 0xF558F5F15591240FLL);
  sub_1BBA40770(v2 + 3160, 0x61AE097211DF6CF1, (void (*)(uint64_t, uint64_t, void))sub_1BBA40A88, 0);
  sub_1BBA40770(v2 + 3160, 0xA72E681EA6EA2FFDLL, (void (*)(uint64_t, uint64_t, void))sub_1BBA6D254, 0);
  sub_1BBA40770(v2 + 3160, 0x6CF5678DCDBE0466, (void (*)(uint64_t, uint64_t, void))sub_1BBA6D1BC, 0);
  sub_1BBA40770(v2 + 3160, 0x50F6C19BB163CD98, (void (*)(uint64_t, uint64_t, void))sub_1BBA6C798, 0);
  sub_1BBA40770(v2 + 3160, 0x3DC4253E192FDEDLL, (void (*)(uint64_t, uint64_t, void))sub_1BBA6E228, 0);
  sub_1BBA40770(v2 + 3160, 0x90898E7CB0F4FE00, (void (*)(uint64_t, uint64_t, void))sub_1BBA6C6F4, 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xBE39025BC18BBD08, (unsigned char *)(a1 + 3787), 0);
  sub_1BBA40770(v2 + 3160, 0x52E68AA04356963, (void (*)(uint64_t, uint64_t, void))sub_1BBA6C628, 0);
  sub_1BBA40770(v2 + 3160, 0xA0BC688F59BD24B8, (void (*)(uint64_t, uint64_t, void))sub_1BBA6C554, 0);
  sub_1BBA40770(v2 + 3160, 0x242E7F5AFD2DD5D8, (void (*)(uint64_t, uint64_t, void))sub_1BBA6C3E8, 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0xC86457BBA942E4AALL, (unsigned char *)(a1 + 11058), 0);
  sub_1BBA41C2C((void *)(v2 + 3160), 0xDE0ED602D6B626A9, (float *)(a1 + 11060), 0.0);
  sub_1BBA41C2C((void *)(v2 + 3160), 0xDDF3C802D69F4727, (float *)(a1 + 11064), 16.0);
  sub_1BBA414E0((void *)(v2 + 3160), 0x9D4699E02AD040AELL, (_DWORD *)(a1 + 3504), 1);
  sub_1BBA40688((void *)(v2 + 3160), 0x5A91365701952647, (_DWORD *)(a1 + 11068), qword_1BBB7A280, 0x5DC77784260A7236);
  sub_1BBA418E0((void *)(v2 + 3160), 0x98DBF09461943FA1, (unsigned char *)(a1 + 11072), 0);
  sub_1BBA418E0((void *)(v2 + 3160), 0x8626767786270290, (unsigned char *)(a1 + 3252), 0);
  *(_OWORD *)(a1 + 12776) = 0u;
  *(_OWORD *)(a1 + 12792) = 0u;
  *(_OWORD *)(a1 + 12760) = 0u;
  bzero((void *)(a1 + 11088), 0x660uLL);
  *(void *)(a1 + 12808) = 850045863;
  *(_OWORD *)(a1 + 12816) = 0u;
  *(_OWORD *)(a1 + 12832) = 0u;
  *(_OWORD *)(a1 + 12848) = 0u;
  *(void *)(a1 + 12864) = 0;
  *(_DWORD *)(a1 + 13236) = 0;
  *(void *)(a1 + 13240) = 0;
  *(_OWORD *)(a1 + 12880) = 0u;
  *(_OWORD *)(a1 + 12896) = 0u;
  *(_OWORD *)(a1 + 12912) = 0u;
  *(_OWORD *)(a1 + 12928) = 0u;
  *(_OWORD *)(a1 + 12944) = 0u;
  *(_OWORD *)(a1 + 12960) = 0u;
  *(_OWORD *)(a1 + 12976) = 0u;
  *(_OWORD *)(a1 + 12992) = 0u;
  *(_OWORD *)(a1 + 13008) = 0u;
  *(_OWORD *)(a1 + 13024) = 0u;
  *(_OWORD *)(a1 + 13040) = 0u;
  *(_OWORD *)(a1 + 13056) = 0u;
  *(_OWORD *)(a1 + 13072) = 0u;
  *(_OWORD *)(a1 + 13088) = 0u;
  *(_OWORD *)(a1 + 13104) = 0u;
  *(_OWORD *)(a1 + 13120) = 0u;
  *(_OWORD *)(a1 + 13136) = 0u;
  *(_OWORD *)(a1 + 13152) = 0u;
  *(_OWORD *)(a1 + 12728) = 0u;
  *(_OWORD *)(a1 + 12744) = 0u;
  *(void *)(a1 + 13256) = 0;
  *(void *)(a1 + 13272) = 0;
  *(void *)(a1 + 13264) = 0;
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  if (v6) {
    sub_1BB9C09B4(v6);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v7 = *MEMORY[0x1E4F143D8];
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = v7;
  *(_DWORD *)(a1 + 11080) = 0;
  *(void *)(a1 + 1112) = 0;
  *(void *)(a1 + 13288) = 0;
  *(unsigned char *)(a1 + 1016) = 0;
  *(_DWORD *)(a1 + 1020) = 0;
  return a1;
}

void sub_1BBA592E4(_Unwind_Exception *a1)
{
  std::mutex::~mutex((std::mutex *)(v3 + 1024));
  sub_1BBA56634(v2);
  unsigned int v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    sub_1BB9C09B4(v5);
  }
  unint64_t v6 = *(std::__shared_weak_count **)(v1 + 64);
  if (v6) {
    sub_1BB9C09B4(v6);
  }
  if (*(void *)v3)
  {
    free(*(void **)v3);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA59368(uint64_t a1)
{
  if (!*(void *)(a1 + 12800) || (uint64_t result = sub_1BBA59420(a1), !result))
  {
    uint64_t v3 = *(void *)(a1 + 13272);
    if (!v3) {
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3);
    if (!result) {
      return 0;
    }
  }
  return result;
}

const void **sub_1BBA593D0(const void ***a1, const void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1BB9C607C(result);
    JUMPOUT(0x1C18605E0);
  }
  return result;
}

uint64_t sub_1BBA59420(uint64_t a1)
{
  uint64_t v64 = &v64;
  uint64_t v65 = (uint64_t *)&v64;
  uint64_t v66 = 0;
  int v2 = *(_DWORD *)(a1 + 12876);
  if (v2 < 1)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    uint64_t v4 = (int *)(a1 + 3456);
    uint64_t v5 = *(unsigned int *)(a1 + 12876);
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v3 = v6 + (int)v3;
      --v5;
    }
    while (v5);
  }
  if (*(int *)(a1 + 4 * v2 + 3456) < 1)
  {
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    long long v62 = 0u;
    do
    {
      unint64_t v9 = *(unsigned __int8 *)(a1 + 108 * (v8 + v3) + 3814);
      if (*(void *)(a1 + 12800) >= v9)
      {
        long long v10 = *(_OWORD *)(*(void *)(*(void *)(a1 + 12768)
                                    + (((v9 + *(void *)(a1 + 12792) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (v9 + *(unsigned char *)(a1 + 12792) - 1));
        long long v62 = v10;
        uint64_t v11 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a1 + 12768)
                                                       + (((v9 + *(void *)(a1 + 12792) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (v9 + *(unsigned char *)(a1 + 12792) - 1)
                                           + 8);
        if (*((void *)&v10 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (v7) {
          sub_1BB9C09B4(v7);
        }
        if (*(unsigned char *)(a1 + 12872))
        {
          *(unsigned char *)(v62 + 640) = 2;
          *(_OWORD *)(v62 + 652) = xmmword_1BBB6F910;
          *(unsigned char *)(v62 + 736) = 1;
          *(float *)(v62 + 2720) = (float)(*(char *)(*(void *)(v62 + 584) + 3289) + 3);
        }
        else if (!*(unsigned char *)(v62 + 417))
        {
          uint64_t v12 = *(unsigned int *)(a1 + 12876);
          *(_DWORD *)(v62 + 648) = v8 + v3;
          uint64_t v13 = *(void *)(v62 + 584);
          int v14 = *(_DWORD *)(v13 + 10728);
          *(_DWORD *)(v62 + 728) = v14;
          if ((int)v12 >= 1)
          {
            uint64_t v15 = (int *)(v13 + 10732);
            uint64_t v16 = v12;
            do
            {
              int v17 = *v15++;
              v14 += v17;
              *(_DWORD *)(v62 + 728) = v14;
              --v16;
            }
            while (v16);
          }
          *(_DWORD *)(v62 + 732) = *(_DWORD *)(v13 + 4 * (int)v12 + 10732) + v14;
        }
        unint64_t v18 = operator new(0x20uLL);
        v18[1] = v62;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = (uint64_t)v64;
        *(void *)unint64_t v18 = v64;
        *((void *)v18 + 1) = &v64;
        *(void *)(v19 + 8) = v18;
        uint64_t v64 = v18;
        ++v66;
        int v2 = *(_DWORD *)(a1 + 12876);
        uint64_t v7 = v11;
      }
      ++v8;
      uint64_t v20 = *(int *)(a1 + 4 * v2 + 3456);
    }
    while (v8 < v20);
    if ((int)v20 >= 1)
    {
      int v21 = 0;
      do
      {
        uint64_t v22 = *(void *)(a1 + 12800);
        if (!v22) {
          break;
        }
        unint64_t v23 = *(void *)(a1 + 12792);
        uint64_t v24 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a1 + 12768) + ((v23 >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * v23
                                           + 8);
        if (v24)
        {
          sub_1BB9C09B4(v24);
          unint64_t v23 = *(void *)(a1 + 12792);
          uint64_t v22 = *(void *)(a1 + 12800);
        }
        *(void *)(a1 + 12800) = v22 - 1;
        *(void *)(a1 + 12792) = v23 + 1;
        if (v23 + 1 >= 0x200)
        {
          operator delete(**(void ***)(a1 + 12768));
          *(void *)(a1 + 12768) += 8;
          *(void *)(a1 + 12792) -= 256;
        }
        ++v21;
      }
      while (v21 < *(_DWORD *)(a1 + 4 * *(int *)(a1 + 12876) + 3456));
    }
    uint64_t v25 = (std::__shared_weak_count *)*((void *)&v62 + 1);
  }
  int v26 = v65;
  if (v65 == (uint64_t *)&v64)
  {
    uint64_t v56 = 0;
    *((void *)&v63 + 1) = v25;
    goto LABEL_112;
  }
  while (1)
  {
    long long v27 = *((_OWORD *)v26 + 1);
    long long v63 = v27;
    uint64_t v28 = v26[3];
    if (*((void *)&v27 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (v25) {
      sub_1BB9C09B4(v25);
    }
    if (!(void)v63) {
      break;
    }
    std::mutex::lock((std::mutex *)(a1 + 12808));
    uint64_t v29 = operator new(0x20uLL);
    v29[1] = v63;
    if (v28) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = *(void *)(a1 + 1024);
    *(void *)uint64_t v29 = v30;
    *((void *)v29 + 1) = a1 + 1024;
    *(void *)(v30 + 8) = v29;
    *(void *)(a1 + 1024) = v29;
    ++*(void *)(a1 + 1040);
    std::mutex::unlock((std::mutex *)(a1 + 12808));
    uint64_t v31 = *(void *)(a1 + 13256);
    if (!v31) {
      goto LABEL_89;
    }
    if (!*(_DWORD *)(v63 + 644) || *(unsigned char *)(v63 + 3025) && !*(_DWORD *)(v31 + 424))
    {
      uint64_t v32 = *(void *)(v31 + 840);
      int v33 = *(_DWORD *)(v32 + 152);
      *(_DWORD *)(v31 + 948) = 28;
      *(_DWORD *)(v31 + 16) = 0;
      if (*(double *)(v32 + 128) <= 0.0) {
        double v34 = 30.0;
      }
      else {
        double v34 = *(double *)(v32 + 128);
      }
      *(double *)(v31 + 952) = v34;
      uint64_t v35 = *(void *)(v31 + 392);
      int v36 = *(char *)(v35 + 336);
      if (v36 != -1)
      {
        *(_DWORD *)(v31 + 16) = v36;
        goto LABEL_84;
      }
      if (*(_DWORD *)(v35 + 64) == 43)
      {
        int v37 = *(char *)(v35 + 115);
        if (v37 >= 1)
        {
          int v38 = v37;
          goto LABEL_83;
        }
        *(_DWORD *)(v31 + 16) = 0;
        if (((***(uint64_t (****)(void))v32)() & 1) != 0 || *(unsigned char *)(*(void *)(v31 + 392) + 58))
        {
          if (v33 >= 360000) {
            int v57 = 360000;
          }
          else {
            int v57 = v33;
          }
          int v58 = (int)(log2(360000.0 / (double)v57) * 6.0 + 0.5) + 24;
          if (*(_DWORD *)(v31 + 284) < v58) {
            int v58 = *(_DWORD *)(v31 + 284);
          }
          *(_DWORD *)(v31 + 948) = v58;
          if (v33 < 90000) {
            *(_DWORD *)(v31 + 16) += (int)((double)(90000 - v33) * 10.0 / 90000.0);
          }
          goto LABEL_84;
        }
        if (v33 >= 360000) {
          int v59 = 360000;
        }
        else {
          int v59 = v33;
        }
        int v60 = (int)(log2(360000.0 / (double)v59) * 6.0 + 0.5);
        if (v60 >= 11) {
          int v60 = 11;
        }
        int v38 = v60 + 24;
      }
      else
      {
        uint64_t v39 = 0;
        while (dword_1BBB7B2EC[v39] > v33)
        {
          if (++v39 == 9) {
            goto LABEL_60;
          }
        }
        if (v39)
        {
          double v40 = (double)dword_1BBB7B310[v39]
              + (double)(v33 - dword_1BBB7B2EC[v39])
              / (double)(dword_1BBB7B2EC[(v39 - 1)] - dword_1BBB7B2EC[v39])
              * (double)(dword_1BBB7B310[(v39 - 1)] - dword_1BBB7B310[v39]);
          goto LABEL_61;
        }
LABEL_60:
        double v40 = (double)(v33 + 25567) / 0.04;
LABEL_61:
        int v41 = *(__int16 *)(v35 + 90);
        int v42 = *(__int16 *)(v35 + 92);
        if (((***(uint64_t (****)(void))v32)() & 1) != 0 || *(unsigned char *)(*(void *)(v31 + 392) + 58))
        {
          uint64_t v43 = (__int16 *)(v31 + 26);
          int v44 = -1;
          do
          {
            int v45 = *v43 * *(v43 - 1);
            float v46 = *(float *)(v43 - 3);
            ++v44;
            v43 += 4;
          }
          while (v40 < (float)(v46 * (float)v45));
          *(_DWORD *)(v31 + 16) = v44;
          double v47 = v46;
          if (v34 <= v47) {
            double v47 = v34;
          }
        }
        else
        {
          int v45 = v42 * v41;
          double v47 = v40 / (double)(v42 * v41);
          if (v34 < v47) {
            double v47 = v34;
          }
        }
        *(double *)(v31 + 952) = v47;
        unint64_t v48 = *(int **)(v31 + 840);
        if (v48[936] < 2)
        {
          double v49 = v47;
        }
        else
        {
          do
          {
            double v49 = v34;
            double v34 = v34 * 0.5;
          }
          while (v34 > v47);
        }
        uint64_t v50 = 0;
        int v51 = (int)(v49 * (double)v45);
        while (dword_1BBB7B310[v50] > v51)
        {
          if (++v50 == 9) {
            goto LABEL_77;
          }
        }
        if (v50)
        {
          double v52 = (double)dword_1BBB7B2EC[v50]
              + (double)(v51 - dword_1BBB7B310[v50])
              / (double)(dword_1BBB7B310[(v50 - 1)] - dword_1BBB7B310[v50])
              * (double)(dword_1BBB7B2EC[(v50 - 1)] - dword_1BBB7B2EC[v50]);
          goto LABEL_78;
        }
LABEL_77:
        double v52 = (double)v51 * 0.04 + 25567.0;
LABEL_78:
        *(_DWORD *)(v31 + 948) = (int)(log2(v52 / (double)v48[38]) * 6.0 + 35.0 + 0.5);
        if (!(*(unsigned int (**)(void))(**(void **)v48 + 16))())
        {
LABEL_84:
          int v54 = *(_DWORD *)(v31 + 16);
          if (v54 >= 31) {
            int v54 = 31;
          }
          *(_DWORD *)(v31 + 16) = v54;
          uint64_t v31 = *(void *)(a1 + 13256);
          if (!v31) {
            goto LABEL_89;
          }
          goto LABEL_87;
        }
        int v38 = *(_DWORD *)(v31 + 316);
        int v53 = *(_DWORD *)(v31 + 948);
        if (v53 < v38) {
          int v38 = *(_DWORD *)(v31 + 948);
        }
        if (v53 <= 30) {
          int v38 = 30;
        }
      }
LABEL_83:
      *(_DWORD *)(v31 + 948) = v38;
      goto LABEL_84;
    }
LABEL_87:
    if (!*(_DWORD *)(a1 + 3696)) {
      sub_1BBAAD6AC(v31, v63);
    }
LABEL_89:
    sub_1BBA59C4C(a1, v63);
    uint64_t v56 = v55;
    if (v55) {
      goto LABEL_112;
    }
    int v26 = (uint64_t *)v26[1];
    uint64_t v25 = (std::__shared_weak_count *)*((void *)&v63 + 1);
    if (v26 == (uint64_t *)&v64)
    {
      uint64_t v56 = 0;
      goto LABEL_112;
    }
  }
  uint64_t v56 = 4294954385;
LABEL_112:
  sub_1BBA56634((uint64_t *)&v64);
  if (*((void *)&v63 + 1)) {
    sub_1BB9C09B4(*((std::__shared_weak_count **)&v63 + 1));
  }
  return v56;
}

void sub_1BBA59C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1BBA56634((uint64_t *)va);
  if (a5) {
    sub_1BB9C09B4(a5);
  }
  _Unwind_Resume(a1);
}

void sub_1BBA59C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v554 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 592);
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 600);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v542, 0, sizeof(v542));
  CMTimeMake(&v542, *(void *)(v3 + 16), *(_DWORD *)(v3 + 32));
  CMTime time = v542;
  CMTimeGetSeconds(&time);
  kdebug_trace();
  uint64_t v5 = a2;
  if (*(unsigned char *)a2)
  {
    uint64_t v6 = *(void *)(a1 + 13272);
    if (!v6
      || *(_DWORD *)(a1 + 3696) != 1
      || (unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6)) == 0)
    {
      CMTime v540 = v542;
      sub_1BBA5D8AC(a1, (uint64_t)&v540);
      goto LABEL_606;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_455;
    }
    LOWORD(time.value) = 0;
    uint64_t v8 = MEMORY[0x1E4F14500];
    goto LABEL_65;
  }
  unint64_t v9 = *(unsigned char **)(a2 + 16);
  if (v9[33])
  {
    if ((*(unsigned int (**)(unsigned char *))(*(void *)v9 + 8))(v9))
    {
      uint64_t v10 = *(void *)(a2 + 2712) + 8 * *(int *)(*(void *)(a2 + 2712) + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      *(_DWORD *)(v11 + 8) = *(__int16 *)(v10 + 24);
      *(_DWORD *)(v11 + 12) = *(__int16 *)(v10 + 26);
      int v12 = 1 << (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 136))(*(void *)(a2 + 16));
    }
    else
    {
      int v12 = 0;
    }
    if ((*(unsigned int (**)(void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16)))
    {
      uint64_t v13 = *(void *)(a2 + 2712) + 8 * *(int *)(*(void *)(a2 + 2712) + 16);
      uint64_t v14 = *(void *)(a2 + 24);
      *(_DWORD *)(v14 + 8) = *(__int16 *)(v13 + 24);
      *(_DWORD *)(v14 + 12) = *(__int16 *)(v13 + 26);
      v12 |= 1 << (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 144))(*(void *)(a2 + 16));
    }
    if ((*(unsigned int (**)(void))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16))) {
      v12 |= 1 << (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 160))(*(void *)(a2 + 16));
    }
    if ((*(unsigned int (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16))) {
      v12 |= 1 << (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 168))(*(void *)(a2 + 16));
    }
    if ((*(unsigned int (**)(void))(**(void **)(a2 + 16) + 56))(*(void *)(a2 + 16)))
    {
      uint64_t v15 = a2;
      if (!*(unsigned char *)(*(void *)(a2 + 584) + 952)
        || (float v16 = *(float *)(a2 + 3084), v16 == 0.0)
        || (float v17 = *(float *)(a2 + 3088), v17 == 0.0))
      {
LABEL_26:
        if (((*(uint64_t (**)(void))(**(void **)(v15 + 16) + 64))(*(void *)(v15 + 16)) & 1) == 0
          && !(*(unsigned int (**)(void))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16)))
        {
          goto LABEL_33;
        }
        uint64_t v24 = *(void *)(a2 + 608);
        uint64_t v25 = *(void *)(a2 + 24);
        *(void *)(v25 + 68) = *(void *)(v24 + 260);
        *(_DWORD *)(v25 + 76) = *(_DWORD *)(v24 + 268);
        int v26 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16));
        uint64_t v27 = **(void **)(a2 + 16);
        if (v26)
        {
          char v28 = (*(uint64_t (**)(void))(v27 + 200))();
        }
        else
        {
          if (!(*(unsigned int (**)(void))(v27 + 64))())
          {
LABEL_33:
            (*(void (**)(void, void, void))(**(void **)(a2 + 24) + 160))(*(void *)(a2 + 24), v12, *(void *)(a2 + 16));
            uint64_t v29 = *(_DWORD **)(a2 + 24);
            uint64_t v30 = *(void *)(a2 + 592);
            int v31 = *(_DWORD *)(v30 + 276);
            int v32 = *(_DWORD *)(v30 + 280);
            v29[9] = 0;
            v29[11] = 0;
            if ((*(unsigned int (**)(_DWORD *))(*(void *)v29 + 16))(v29)) {
              int v31 = v29[2];
            }
            v29[10] = v31 - 1;
            if ((*(unsigned int (**)(_DWORD *))(*(void *)v29 + 16))(v29)) {
              int v32 = v29[3];
            }
            v29[12] = v32 - 1;
            uint64_t v5 = a2;
            goto LABEL_38;
          }
          char v28 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 192))(*(void *)(a2 + 16));
        }
        v12 |= 1 << v28;
        goto LABEL_33;
      }
      uint64_t v18 = *(void *)(a2 + 24);
      __asm { FMOV            V4.2D, #-0.5 }
      *(float32x2_t *)(v18 + 52) = vcvt_f32_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 3076)), vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v17), LODWORD(v16))), _Q4)));
      *(float *)(v18 + 60) = v16;
      *(float *)(v18 + 64) = v17;
      v12 |= 1 << (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 184))(*(void *)(a2 + 16));
    }
    uint64_t v15 = a2;
    goto LABEL_26;
  }
LABEL_38:
  uint64_t v33 = *(void *)(v5 + 584);
  if (!*(unsigned char *)(v33 + 3244)) {
    goto LABEL_56;
  }
  int v34 = (***(uint64_t (****)(void))(v5 + 16))(*(void *)(v5 + 16));
  uint64_t v5 = a2;
  if (!v34) {
    goto LABEL_56;
  }
  uint64_t v35 = *(void *)(a2 + 2712);
  if (!v35) {
    goto LABEL_56;
  }
  uint64_t v36 = v35 + 8 * *(int *)(v35 + 16);
  int v37 = *(__int16 *)(v36 + 24);
  uint64_t v38 = *(void *)(a2 + 592);
  *(_DWORD *)(v38 + 248) = v37;
  int v39 = *(__int16 *)(v36 + 26);
  *(_DWORD *)(v38 + 252) = v39;
  if (v37 >= 1)
  {
    uint64_t v40 = *(void *)(a2 + 608);
    *(_DWORD *)(v40 + 240) = v37;
    *(_DWORD *)(v40 + 244) = v39;
  }
  uint64_t v41 = *(void *)(a2 + 760);
  *(_DWORD *)(*(void *)(v41 + 24) + 80) = *(_DWORD *)(v33 + 11076);
  int v42 = *(std::__shared_weak_count **)(a2 + 600);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v504 = v4;
  if (!*(unsigned char *)(v38 + 136)
    || (int v43 = *(_DWORD *)(v38 + 248)) == 0
    || (int v44 = *(_DWORD *)(v38 + 252)) == 0
    || v43 == *(_DWORD *)(v38 + 240) && v44 == *(_DWORD *)(v38 + 244))
  {
    unsigned int v7 = 0;
    *(void *)(v38 + 248) = 0;
    goto LABEL_51;
  }
  int v54 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 104))(v38);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v54);
  if (!CVIsCompressedPixelFormatAvailable(PixelFormatType))
  {
    uint64_t v84 = *(int *)(v38 + 280);
    if (v84)
    {
      uint64_t v85 = *(void *)(v38 + 216);
      size_t v86 = *(int *)(v38 + 276);
      int v87 = *(char **)(v38 + 192);
      do
      {
        --v84;
        memset(v87, 128, v86);
        v87 += v85;
      }
      while (v84);
      unsigned int v88 = *(_DWORD *)(v38 + 280);
      if (v88 >= 2)
      {
        size_t v89 = *(int *)(v38 + 276);
        uint64_t v90 = *(void *)(v38 + 224);
        uint64_t v91 = (uint64_t)(int)v88 >> 1;
        uint64_t v92 = *(char **)(v38 + 200);
        do
        {
          --v91;
          memset(v92, 128, v89);
          v92 += v90;
        }
        while (v91);
      }
    }
  }
  uint64_t v56 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 88))(v38);
  int Width = CVPixelBufferGetWidth(v56);
  int v58 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 88))(v38);
  int Height = CVPixelBufferGetHeight(v58);
  int v60 = *(_DWORD *)(v38 + 240);
  if (v60 >= Width) {
    int v60 = Width;
  }
  int v536 = v60;
  if (*(_DWORD *)(v38 + 244) >= Height) {
    int v61 = Height;
  }
  else {
    int v61 = *(_DWORD *)(v38 + 244);
  }
  int v533 = v61;
  uint64_t v62 = *(void *)(v41 + 24);
  int v64 = *(_DWORD *)(v38 + 248);
  int v63 = *(_DWORD *)(v38 + 252);
  uint64_t v65 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 88))(v38);
  uint64_t v66 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 104))(v38);
  unsigned int v7 = sub_1BBAA6374((_DWORD *)v62, v536, v533, v64, v63, v65, v66);
  if (!v7)
  {
    int v67 = *(_DWORD *)(v62 + 80);
    if (v67 == 2)
    {
      uint64_t v134 = *(void ***)(v62 + 4256);
      if (v134)
      {
        uint64_t v135 = *(void *)(v62 + 4248);
        uint64_t v137 = *(void *)(v62 + 64);
        uint64_t v136 = *(void *)(v62 + 72);
        BOOL v138 = (void *)MEMORY[0x1C1860C30]();
        uint64_t v139 = *v134;
        *(void *)&long long v140 = v135;
        *((void *)&v140 + 1) = HIDWORD(v135);
        *(_OWORD *)&time.CMTimeValue value = v140;
        *(void *)&long long v140 = v137;
        *((void *)&v140 + 1) = HIDWORD(v137);
        long long v551 = v140;
        time.epoch = 0;
        uint64_t v552 = 1;
        *(void *)&long long v140 = v136;
        *((void *)&v140 + 1) = HIDWORD(v136);
        extraRowsOnBottom.__m_ = 0;
        *(void *)&extraRowsOnBottom.__owns_ = 0;
        long long v548 = v140;
        uint64_t v547 = 0;
        uint64_t v549 = 1;
        unsigned int v7 = [v139 scaleFrame:v65 dstFrame:v66 srcRegion:&time dstRegion:&extraRowsOnBottom scaleMethod:1];
        goto LABEL_350;
      }
    }
    else
    {
      if (v67 != 1)
      {
        if (v67)
        {
          unsigned int v7 = -12910;
          if (dword_1E9F80A90 >= -12910)
          {
            fwrite("Unknown vra source scaling method\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(time.value) = 0;
              _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unknown vra source scaling method\n", (uint8_t *)&time, 2u);
            }
          }
        }
        else
        {
          v555.size.height = (double)*(int *)(v62 + 68);
          v555.size.width = (double)*(int *)(v62 + 64);
          v555.origin.x = (double)*(int *)(v62 + 4248);
          v555.origin.y = (double)*(int *)(v62 + 4252);
          int v69 = *(_DWORD *)(v62 + 72);
          int v68 = *(_DWORD *)(v62 + 76);
          propertyCFNumberRef Value = CGRectCreateDictionaryRepresentation(v555);
          v556.size.width = (double)v69;
          v556.size.height = (double)v68;
          v556.origin.x = 0.0;
          v556.origin.y = 0.0;
          CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v556);
          uint64_t v71 = *(const void **)(v62 + 4264);
          if (v71)
          {
            unsigned int v7 = VTSessionSetProperty(v71, (CFStringRef)*MEMORY[0x1E4F45170], propertyValue);
            if (!v7)
            {
              unsigned int v7 = VTSessionSetProperty(*(VTSessionRef *)(v62 + 4264), (CFStringRef)*MEMORY[0x1E4F450F0], DictionaryRepresentation);
              if (!v7) {
                unsigned int v7 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(v62 + 4264), v65, v66);
              }
            }
          }
          else
          {
            unsigned int v7 = -12902;
          }
          if (propertyValue) {
            CFRelease(propertyValue);
          }
          if (DictionaryRepresentation) {
            CFRelease(DictionaryRepresentation);
          }
        }
        goto LABEL_350;
      }
      double v127 = *(void ***)(v62 + 4256);
      if (v127)
      {
        uint64_t v128 = *(void *)(v62 + 4248);
        uint64_t v130 = *(void *)(v62 + 64);
        uint64_t v129 = *(void *)(v62 + 72);
        uint64_t v131 = (void *)MEMORY[0x1C1860C30]();
        uint64_t v132 = *v127;
        *(void *)&long long v133 = v128;
        *((void *)&v133 + 1) = HIDWORD(v128);
        *(_OWORD *)&time.CMTimeValue value = v133;
        *(void *)&long long v133 = v130;
        *((void *)&v133 + 1) = HIDWORD(v130);
        long long v551 = v133;
        time.epoch = 0;
        uint64_t v552 = 1;
        *(void *)&long long v133 = v129;
        *((void *)&v133 + 1) = HIDWORD(v129);
        extraRowsOnBottom.__m_ = 0;
        *(void *)&extraRowsOnBottom.__owns_ = 0;
        long long v548 = v133;
        uint64_t v547 = 0;
        uint64_t v549 = 1;
        unsigned int v7 = [v132 scaleFrameBilinear:v65 dstFrame:v66 srcRegion:&time dstRegion:&extraRowsOnBottom];
        goto LABEL_350;
      }
    }
    unsigned int v7 = -12911;
LABEL_350:
    CVBufferPropagateAttachments(v65, v66);
    if (!v7)
    {
      v216 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 104))(v38);
      OSType v217 = CVPixelBufferGetPixelFormatType(v216);
      if (CVIsCompressedPixelFormatAvailable(v217))
      {
        int v218 = *(_DWORD *)(v38 + 252);
        int v219 = v536 - *(_DWORD *)(v38 + 248);
        LODWORD(time.value) = 0;
        HIDWORD(time.value) = v219;
        time.timescale = 0;
        time.flags = v533 - v218;
        *(_DWORD *)&extraRowsOnBottom.__owns_ = 128;
        extraRowsOnBottom.__m_ = (std::unique_lock<std::mutex>::mutex_type *)0x8000000080;
        v220 = *(id **)(v41 + 32);
        uint64_t v221 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 104))(v38);
        v222 = (void *)MEMORY[0x1C1860C30]();
        [*v220 FillBoundary:v221 padSize:&time fillValues:&extraRowsOnBottom];
      }
      unsigned int v7 = 0;
      *(_OWORD *)(v38 + 88) = *(_OWORD *)(v38 + 192);
      *(_OWORD *)(v38 + 112) = *(_OWORD *)(v38 + 216);
    }
  }
LABEL_51:
  if (v42) {
    sub_1BB9C09B4(v42);
  }
  uint64_t v4 = v504;
  uint64_t v5 = a2;
  if (v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v45 = *(_DWORD *)(a2 + 644);
      LODWORD(time.value) = 67109120;
      HIDWORD(time.value) = v45;
      float v46 = MEMORY[0x1E4F14500];
      double v47 = "Frame %d: Preprocess failed\n";
      goto LABEL_461;
    }
LABEL_456:
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_790;
    }
    LODWORD(time.value) = 67109120;
    HIDWORD(time.value) = v7;
    v266 = MEMORY[0x1E4F14500];
    v267 = "Compress() receives an error: %d\n";
    goto LABEL_458;
  }
LABEL_56:
  unint64_t v48 = *(int **)(v5 + 592);
  if (v48[69] < 193 || v48[70] <= 96)
  {
    double v49 = (__CVBuffer *)(*(uint64_t (**)(int *))(*(void *)v48 + 88))(v48);
    time.CMTimeValue value = 0;
    extraRowsOnBottom.__m_ = 0;
    CVPixelBufferGetExtendedPixels(v49, 0, (size_t *)&time, 0, (size_t *)&extraRowsOnBottom);
    if (time.value | (CMTimeValue)extraRowsOnBottom.__m_) {
      CVPixelBufferFillExtendedPixels(v49);
    }
  }
  uint64_t v50 = *(void *)(a1 + 13272);
  if (v50)
  {
    if (*(_DWORD *)(a1 + 3696) == 1)
    {
      unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 64))(v50);
      if (v7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
LABEL_455:
          uint64_t v5 = a2;
          goto LABEL_456;
        }
        LOWORD(time.value) = 0;
        uint64_t v8 = MEMORY[0x1E4F14500];
LABEL_65:
        _os_log_error_impl(&dword_1BB9B9000, v8, OS_LOG_TYPE_ERROR, "FinishPendingFrames failed\n", (uint8_t *)&time, 2u);
        goto LABEL_455;
      }
    }
  }
  CMTime v541 = v542;
  sub_1BBA5D8AC(a1, (uint64_t)&v541);
  uint64_t v51 = *(void *)(a1 + 13256);
  if (v51 && *(int *)(a1 + 3696) >= 1) {
    sub_1BBAAD6AC(v51, a2);
  }
  if (*(unsigned char *)a2) {
    goto LABEL_606;
  }
  uint64_t v52 = a2;
  if (!*(unsigned char *)(a2 + 417))
  {
    unsigned int v7 = sub_1BBA65B30(a2, 0);
    if (v7)
    {
      uint64_t v5 = a2;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v53 = *(_DWORD *)(a2 + 644);
        LODWORD(time.value) = 67109120;
        HIDWORD(time.value) = v53;
        float v46 = MEMORY[0x1E4F14500];
        double v47 = "Frame %d: Precompress failed\n";
        goto LABEL_461;
      }
      goto LABEL_456;
    }
    uint64_t v52 = a2;
    sub_1BBA5DBE8((void *)(a1 + 72), *(void *)(a2 + 592), *(void *)(a2 + 600));
  }
  if (*(unsigned char *)(a1 + 3768) && *(unsigned char *)(v52 + 640))
  {
    std::mutex::lock((std::mutex *)(*(void *)(v52 + 584) + 1048));
    operator new();
  }
  uint64_t v72 = *(void *)(a1 + 13256);
  if (!v72) {
    goto LABEL_594;
  }
  int v73 = *(_DWORD *)(*(void *)(v52 + 608) + 680);
  uint64_t v74 = *(void *)(v52 + 584);
  int v75 = *(_DWORD *)(v74 + 3780);
  int v76 = *(_DWORD *)(v74 + 3776);
  *(_WORD *)(v52 + 408) = 0;
  *(unsigned char *)(v52 + 410) = 1;
  if (v76)
  {
    if (v76 == 1)
    {
      uint64_t v77 = *(void *)(v52 + 1072);
      if (*(__int16 *)(v77 + 8 * *(int *)(v77 + 16) + 24) < 321 || *(unsigned char *)(v77 + 276) && *(int *)(v77 + 12) < 3) {
        goto LABEL_119;
      }
      unsigned int v78 = *(unsigned __int16 *)(v77 + 8 * *(int *)(v77 + 16) + 24);
      if (v78 == 480)
      {
        double v79 = *(double *)(v52 + 2440);
        double v80 = 13.0;
      }
      else
      {
        if (v78 < 0x190) {
          goto LABEL_120;
        }
        double v79 = *(double *)(v52 + 2440);
        double v80 = 12.0;
      }
      if (v79 > v80)
      {
LABEL_119:
        BOOL v93 = 0;
LABEL_121:
        *(unsigned char *)(v52 + 408) = v93;
        *(unsigned char *)(v52 + 409) = v93;
        goto LABEL_122;
      }
LABEL_120:
      BOOL v93 = *(_DWORD *)(*(void *)(v52 + 1064) + 412) < 8;
      goto LABEL_121;
    }
    if (v75 < 0)
    {
      BOOL v83 = 1;
    }
    else
    {
      if (!v75)
      {
        double v81 = *(double *)(*(void *)(v52 + 2712) + 416);
        if (v81 < 12.0) {
          goto LABEL_122;
        }
        int v82 = 15 - (int)(v81 + 0.5);
        if (v82 >= 3) {
          int v82 = 3;
        }
        int v75 = dword_1BBB7A080[v82 & ~(v82 >> 31)];
      }
      BOOL v83 = v73 % (v75 + 1) == 0;
    }
    *(unsigned char *)(v52 + 408) = v83;
  }
LABEL_122:
  unint64_t v94 = (std::mutex *)(*(void *)(v72 + 840) + 1048);
  std::mutex::lock(v94);
  int v525 = *(_DWORD *)(a2 + 644);
  unsigned int v534 = *(unsigned __int8 *)(a2 + 640);
  uint64_t v95 = *(void *)(v72 + 840);
  uint64_t v96 = *(void *)(a2 + 3008);
  *(void *)&long long v553 = -1;
  *((void *)&v553 + 1) = -1;
  v505 = v4;
  propertyValuea = v94;
  sub_1BBA61EF4(&time, *(void *)(v95 + 48), 0);
  __int16 v97 = *(std::__shared_weak_count **)(v72 + 376);
  *(_OWORD *)(v72 + 368) = *(_OWORD *)&time.value;
  if (v97) {
    sub_1BB9C09B4(v97);
  }
  uint64_t v98 = *(void *)(v72 + 392);
  int v99 = *(_DWORD *)(v98 + 64);
  uint64_t v527 = v96;
  if (v99 == 38 || v99 == 20)
  {
    char v100 = *(unsigned char *)(v98 + 58);
    if (v100) {
      char v100 = *(_DWORD *)(a2 + 440) == 1;
    }
  }
  else
  {
    char v100 = 0;
  }
  *(unsigned char *)(v72 + 324) = v100;
  uint64_t v101 = *(void *)(a2 + 3008);
  uint64_t v102 = 72;
  if (!*(_DWORD *)(v72 + 916)) {
    uint64_t v102 = 76;
  }
  unsigned int v103 = *(_DWORD *)(v101 + v102);
  uint64_t v104 = v101 + 136 + 120 * v103;
  if (v103 >= 7) {
    uint64_t v104 = 0;
  }
  if (v103 == 9) {
    uint64_t v104 = v101 + 976;
  }
  *(void *)v537 = v104;
  if (*(void *)(v72 + 344))
  {
    uint64_t v105 = *(void *)(v72 + 368);
    sub_1BBA61EF4(&time, *(void *)(*(void *)(v72 + 840) + 48), 1u);
    CMTimeValue value = time.value;
    if (*(void *)&time.timescale) {
      sub_1BB9C09B4(*(std::__shared_weak_count **)&time.timescale);
    }
    int v107 = 0;
    uint64_t v108 = *(void *)(v72 + 344);
    uint64_t v109 = *(void *)(a2 + 2176);
    if (v109)
    {
      LODWORD(v110) = 0;
      LODWORD(v111) = 0;
      unsigned int v112 = 0;
      if (*(int *)(v108 + 60) <= 0)
      {
        int v113 = *(_DWORD *)(v108 + 12);
        int v114 = *(_DWORD *)v108 & -v113;
        int v115 = *(_DWORD *)(v108 + 4) & -v113;
        if (v115 < 1)
        {
          int v120 = 0;
          uint64_t v119 = 0;
          uint64_t v118 = 0;
        }
        else
        {
          LODWORD(v116) = 0;
          int v117 = 0;
          uint64_t v118 = 0;
          uint64_t v119 = 0;
          int v120 = 0;
          do
          {
            if (v114 >= 1)
            {
              int v121 = 0;
              uint64_t v116 = (int)v116;
              do
              {
                uint64_t v122 = *(unsigned int *)(v109 + 4 * v116++);
                v119 += v122;
                if (v122 <= *(_DWORD *)(v108 + 8)) {
                  uint64_t v122 = 0;
                }
                else {
                  ++v120;
                }
                v118 += v122;
                v121 += v113;
              }
              while (v121 < v114);
            }
            v117 += v113;
          }
          while (v117 < v115);
        }
        uint64_t v123 = *(int *)(v108 + 16);
        int v124 = v115 * v114;
        int v125 = v113 * v113;
        unint64_t v111 = (v119 * v123 + (v124 >> 1)) / (unint64_t)v124;
        if (v120 <= 0) {
          LODWORD(v110) = 0;
        }
        else {
          unint64_t v110 = (v118 * v123 + ((v120 * v125) >> 1)) / (unint64_t)(v120 * v125);
        }
        int v107 = (v120 + ((v124 / v125) >> 7)) / ((v124 / v125) >> 6);
        unsigned int v112 = ((int)v110 > 10) | (2 * (v107 > 8));
      }
    }
    else
    {
      LODWORD(v110) = 0;
      LODWORD(v111) = 0;
      unsigned int v112 = 0;
    }
    if (!v105
      || !(v111 | v107 | v110) && !*(unsigned char *)(v105 + 141) && !*(unsigned char *)(v105 + 142))
    {
      int v126 = 0;
      goto LABEL_189;
    }
    if (v107 > 1 || (int)v110 >= 2)
    {
      if (v107 > 1 || (int)v110 >= 3)
      {
        if (v107 > 3 || (int)v110 >= 5)
        {
          if (v107 >= 24)
          {
            int v126 = 200;
            if (v112 == 3)
            {
              BOOL v141 = *(_DWORD *)(v105 + 136) > 1u;
              if (v107 <= *(_DWORD *)(v108 + 76)) {
                int v126 = 200;
              }
              else {
                int v126 = 100;
              }
              goto LABEL_190;
            }
          }
          else
          {
            int v126 = 4;
          }
        }
        else
        {
          int v126 = 3;
        }
      }
      else
      {
        int v126 = 2;
      }
    }
    else
    {
      int v126 = 1;
    }
    unsigned int v142 = *(_DWORD *)(v105 + 136);
    BOOL v141 = v142 > 1 || v112 < 2;
    if (v112 < 2)
    {
      if (*(unsigned char *)(v105 + 142) || v142 >= 2)
      {
        if (value) {
          BOOL v146 = *(unsigned char *)(value + 142) == 0;
        }
        else {
          BOOL v146 = 1;
        }
        if (*(unsigned char *)(v105 + 142)) {
          char v143 = v146;
        }
        else {
          char v143 = 1;
        }
        goto LABEL_201;
      }
LABEL_189:
      char v143 = 0;
LABEL_201:
      BOOL v141 = 0;
      char v144 = 0;
      *(void *)(v108 + 52) = (*(_DWORD *)(v108 + 52) + 1);
LABEL_202:
      *(unsigned char *)(v101 + 108) = v144;
      *(unsigned char *)(v101 + 109) = v141;
      *(unsigned char *)(v101 + 110) = v143;
      *(unsigned char *)(v101 + 111) = v141 | v144;
      *(_DWORD *)(v101 + 112) = v111;
      *(_DWORD *)(v101 + 116) = v110;
      *(_DWORD *)(v101 + 120) = v107;
      *(_DWORD *)(v101 + 124) = v112;
      *(_DWORD *)(v101 + 128) = v126;
      uint64_t v98 = *(void *)(v72 + 392);
      goto LABEL_203;
    }
LABEL_190:
    char v143 = 0;
    char v144 = !v141;
    int v145 = *(_DWORD *)(v108 + 56);
    if (v145 < 3) {
      char v144 = 1;
    }
    if (v145 <= 1) {
      BOOL v141 = 0;
    }
    *(_DWORD *)(v108 + 52) = 0;
    *(_DWORD *)(v108 + 56) = v145 + 1;
    goto LABEL_202;
  }
LABEL_203:
  if (*(int *)(v98 + 560) >= 1)
  {
    uint64_t v147 = 0;
    uint64_t v148 = v72 + 848;
    do
    {
      sub_1BBAAA5F4(*(void *)(v148 + 8 * v147), v101);
      uint64_t v149 = *(void *)(v148 + 8 * v147);
      uint64_t v150 = *(void *)(a2 + 3008);
      unsigned int v151 = *(_DWORD *)(v149 + 356);
      uint64_t v152 = v150 + 976;
      uint64_t v153 = v150 + 120 * v151 + 136;
      if (v151 >= 7) {
        uint64_t v153 = 0;
      }
      if (v151 == 9) {
        uint64_t v153 = v152;
      }
      uint64_t v154 = *(void *)(v149 + 8);
      int v155 = *(_DWORD *)(a2 + 448);
      uint64_t v156 = *(void *)(a2 + 592);
      uint64_t v157 = *(void *)(v156 + 16);
      unint64_t v158 = *(unsigned int *)(v156 + 32);
      double v159 = *(double *)(v153 + 8);
      if (v155 <= 0) {
        int v155 = *(_DWORD *)(v154 + 32);
      }
      else {
        *(_DWORD *)(v154 + 32) = v155;
      }
      int v160 = *(_DWORD *)(v154 + 28);
      if (v160 > v155)
      {
        uint64_t v161 = *(void *)(v154 + 16);
        unint64_t v162 = v157 - v161;
        BOOL v163 = v157 < 1 || (int)v158 < 1;
        BOOL v164 = v163 || v161 < 1;
        BOOL v165 = v164 || (uint64_t)v162 < 1;
        if (v165 || v162 >= 20 * v158) {
          LODWORD(v166) = (int)(1000.0 / v159);
        }
        else {
          unint64_t v166 = 1000 * v162 / v158;
        }
        int v167 = v160 - v166;
        if (v167 > v155) {
          int v155 = v167;
        }
      }
      *(_DWORD *)(v154 + 28) = v155;
      *(void *)(v154 + 16) = v157;
      if (v155 <= (int)(3000.0 / v159)) {
        int v155 = (int)(3000.0 / v159);
      }
      *(_DWORD *)(v153 + 16) = v155;
      sub_1BBAAA24C(v149, (void *)a2);
      ++v147;
    }
    while (v147 < *(int *)(*(void *)(v72 + 392) + 560));
  }
  signed int v168 = v103;
  unsigned int v169 = *(_DWORD *)(v95 + 284);
  float v170 = *(float *)(v95 + 288);
  if ((int)v169 <= 0) {
    unsigned int v169 = -1;
  }
  if (v170 <= 0.0)
  {
    double v172 = *(double *)(v72 + 416);
  }
  else
  {
    double v171 = v170;
    double v172 = *(double *)(v72 + 416);
    if (v169 >= (v171 * v172 + 0.5)) {
      unsigned int v169 = (v171 * v172 + 0.5);
    }
    if (v169 <= 1) {
      unsigned int v169 = 1;
    }
  }
  if (v169 == -1) {
    unsigned int v169 = 0;
  }
  if ((double)v169 / v172 > 60.0) {
    unsigned int v169 = 0;
  }
  *(_DWORD *)(v72 + 424) = v169;
  if (!v103 && v169)
  {
    sub_1BBAAA5F4(*(void *)(v72 + 904), v101);
    LODWORD(v173) = *(_DWORD *)(v72 + 424);
    double v174 = *(double *)(v72 + 416) / (double)v173;
    *(double *)(v101 + 984) = v174;
    if (*(double *)(v101 + 976) <= 0.0)
    {
      double v175 = *(double *)(v101 + 1016);
      double v176 = *(double *)(v101 + 176);
      BOOL v177 = v176 < 0.00000011920929;
      if (v175 < 0.00000011920929) {
        BOOL v177 = 1;
      }
      if (v177)
      {
        double v175 = 1.0;
        double v176 = 1.0;
      }
      *(double *)(v101 + 976) = **(double **)v537
                              * (v174
                               * v175
                               / (v174 * v175 + (*(double *)(*(void *)v537 + 8) - v174) * v176));
    }
    if (!v534)
    {
      uint64_t v178 = *(void *)(v72 + 904);
      if (*(void *)(v178 + 8))
      {
        int v179 = (int)(1000.0 / v174);
        if (*(_DWORD *)(v101 + 152) > v179) {
          int v179 = *(_DWORD *)(v101 + 152);
        }
        *(_DWORD *)(v101 + 992) = v179;
        sub_1BBAAA24C(v178, (void *)a2);
      }
    }
  }
  if (*(unsigned char *)(v72 + 824))
  {
    if (*(_DWORD *)(*(void *)v537 + 116)) {
      int v180 = 0;
    }
    else {
      int v180 = *(_DWORD *)(v72 + 464) + 1;
    }
    *(_DWORD *)(v72 + 464) = v180;
    int v181 = *(_DWORD *)(v72 + 308);
    if (v181 == 0x80000000)
    {
      if (*(_DWORD *)(*(void *)(a2 + 592) + 280) * *(_DWORD *)(*(void *)(a2 + 592) + 276) > 5595136)
      {
        double v182 = **(double **)v537;
        uint64_t v183 = *(void *)(*(void *)(v72 + 8 * (int)v103 + 848) + 8);
        if (v183) {
          int v184 = *(_DWORD *)(v183 + 28);
        }
        else {
          int v184 = -1;
        }
        double v186 = (40000000.0 - v182) / 3333333.33;
        if (v182 >= 40000000.0) {
          double v186 = 0.0;
        }
        BOOL v163 = v182 > 20000000.0;
        double v187 = 6.0;
        if (v163) {
          double v187 = v186;
        }
        if (v184 >= 675) {
          int v184 = 675;
        }
        if (v184 <= 75) {
          int v184 = 75;
        }
        double v188 = v187 + (double)(int)dword_1BBB7A4B8[*(unsigned int *)(v72 + 320)] + (double)(v184 - 75) / -100.0;
        double v189 = 51.0;
        if (v188 < 51.0) {
          double v189 = v188;
        }
        if (v188 <= 0.0) {
          double v190 = 0.0;
        }
        else {
          double v190 = v189;
        }
        *(double *)(v72 + 816) = v190;
        *(double *)(v72 + 808) = v190 + -5.0;
      }
      goto LABEL_284;
    }
LABEL_268:
    char v185 = 0;
    *(double *)(v72 + 816) = (double)v181;
    goto LABEL_285;
  }
  int v181 = *(_DWORD *)(v72 + 308);
  if (v181 != 0x80000000) {
    goto LABEL_268;
  }
LABEL_284:
  char v185 = 1;
LABEL_285:
  int v191 = *(_DWORD *)(v72 + 312);
  if (v191 == 0x80000000)
  {
    if (*(_DWORD *)(v72 + 320) != 4) {
      goto LABEL_291;
    }
    double v192 = 12.0;
    if (**(double **)v537 <= 399999.0) {
      goto LABEL_291;
    }
  }
  else
  {
    double v192 = (double)v191;
  }
  *(double *)(v72 + 832) = v192;
LABEL_291:
  double v193 = *(double *)(v72 + 832);
  double v194 = *(double *)(v72 + 816);
  if (v193 > v194)
  {
    if (v185)
    {
      if (v191 != 0x80000000) {
        *(double *)(v72 + 816) = v193;
      }
    }
    else
    {
      *(double *)(v72 + 832) = v194;
    }
  }
  uint64_t v195 = 448;
  if (v534 < 2) {
    uint64_t v195 = 440;
  }
  *(void *)(v101 + 24) = *(void *)(v95 + v195);
  sub_1BBAAC0AC(v72, v101, v534);
  int v196 = *(char *)(a2 + 640);
  double v197 = *(double *)(v72 + 448);
  sub_1BBA61E04(&v543, *(void *)(*(void *)(v72 + 840) + 48));
  BOOL v199 = v543
      && (uint64_t v198 = *(void *)(v72 + 392), *(int *)(v198 + 512) <= 1)
      && *(int *)(v198 + 560) >= 2
      && *((unsigned char *)v543 + 130)
      && *((unsigned __int8 *)v543 + 111) != 0;
  uint64_t v200 = *(void *)(a2 + 3008);
  float v201 = 0.0;
  if (!v200) {
    goto LABEL_422;
  }
  uint64_t v202 = 72;
  if (!*(_DWORD *)(v72 + 916)) {
    uint64_t v202 = 76;
  }
  unsigned int v203 = *(_DWORD *)(v200 + v202);
  uint64_t v204 = v200 + 120 * v203 + 136;
  if (v203 >= 7) {
    uint64_t v204 = 0;
  }
  uint64_t v205 = v203 == 9 ? v200 + 976 : v204;
  if (!v205)
  {
LABEL_422:
    char v254 = 0;
    unsigned int v7 = -12902;
    goto LABEL_439;
  }
  double v206 = ceil(v197);
  int v207 = *(_DWORD *)(a2 + 644);
  if (*(unsigned char *)(a2 + 2704))
  {
    if (v207)
    {
      int v208 = 28;
LABEL_363:
      double v210 = (double)v208;
      goto LABEL_364;
    }
LABEL_362:
    int v208 = *(_DWORD *)(v72 + 948);
    goto LABEL_363;
  }
  if (!v207) {
    goto LABEL_362;
  }
  if (v199)
  {
    sub_1BBA61E04((int **)&time, *(void *)(*(void *)(v72 + 840) + 48));
    sub_1BBA61EF4(&extraRowsOnBottom, *(void *)(*(void *)(v72 + 840) + 48), 1u);
    if (time.value
      && extraRowsOnBottom.__m_
      && (float v209 = *(float *)(time.value + 116), *(float *)&extraRowsOnBottom.__m_[1].__m_.__opaque[44] > v209)
      && *(float *)(time.value + 88) < 0.2)
    {
      double v210 = v209 + 0.5;
      *(unsigned char *)(v200 + 84) = 1;
    }
    else
    {
      double v211 = *(double *)(v200 + 56);
      if (v211 <= 0.0)
      {
        double v214 = v206 + 4.0;
      }
      else
      {
        double v212 = (double)(unint64_t)(8 * *(void *)(time.value + 40)) / v211;
        long double v213 = exp2((*(float *)(time.value + 116) + -12.0) / 6.0);
        double v214 = log(v212 * (v213 * 0.850000024) / 0.850000024) * 6.0 / 0.693147181 + 12.0;
      }
      int v215 = (int)(v214 + 0.5);
      if (v206 + 2.0 >= (double)v215) {
        double v210 = v206 + 2.0;
      }
      else {
        double v210 = (double)v215;
      }
    }
    if (*(void *)&extraRowsOnBottom.__owns_) {
      sub_1BB9C09B4(*(std::__shared_weak_count **)&extraRowsOnBottom.__owns_);
    }
    if (*(void *)&time.timescale) {
      sub_1BB9C09B4(*(std::__shared_weak_count **)&time.timescale);
    }
    goto LABEL_364;
  }
  if (*(unsigned char *)(v72 + 824))
  {
    if (*(unsigned char *)(a2 + 3024))
    {
      if (*(int *)(*(void *)(v72 + 392) + 560) <= 1
        && !(*(unsigned int (**)(void))(***(void ***)(v72 + 840) + 16))(**(void **)(v72 + 840)))
      {
        double v210 = *(double *)(v72 + 808);
        goto LABEL_364;
      }
      int v208 = *(_DWORD *)(v72 + 316);
      goto LABEL_363;
    }
    if (*(_DWORD *)(v72 + 456) > *(_DWORD *)(v72 + 776) && *(unsigned char *)(a2 + 2))
    {
      double v210 = v206;
      if (*(int *)(v205 + 116) >= 1)
      {
        if (v206 - *(double *)(v72 + 784) >= *(double *)(v72 + 832)) {
          double v210 = v206 - *(double *)(v72 + 784);
        }
        else {
          double v210 = *(double *)(v72 + 832);
        }
      }
      goto LABEL_364;
    }
    unsigned int v223 = *(_DWORD *)(v72 + 464);
    if (v223 > *(_DWORD *)(v72 + 780) && !*(unsigned char *)(a2 + 2))
    {
      double v210 = v206 + (double)v223 * *(double *)(v72 + 800);
      double v227 = *(double *)(v72 + 816);
      if (v227 >= v210) {
        goto LABEL_364;
      }
      goto LABEL_361;
    }
  }
  if (*(unsigned char *)(a2 + 3025) && !*(_DWORD *)(v72 + 424)) {
    goto LABEL_362;
  }
  sub_1BBAAC710(v72, v196, a2);
  double v210 = (double)(int)(v224 + 0.5);
  if ((*(_DWORD *)(v72 + 320) | 2) == 3 && *(void *)(v72 + 344))
  {
    double v225 = *(double *)v205;
    uint64_t v226 = *(void *)(a2 + 3008);
    CMTimeMake(&time, *(void *)(*(void *)(a2 + 592) + 16), *(_DWORD *)(*(void *)(a2 + 592) + 32));
    double v227 = sub_1BBAACBEC(v72, v226 + 108, &time, v210, v225);
LABEL_361:
    double v210 = v227;
  }
LABEL_364:
  if (*(unsigned char *)(v72 + 824))
  {
    int v228 = *(_DWORD *)(v72 + 468);
    if (v228)
    {
      if (!*(unsigned char *)(*(void *)(v72 + 392) + 68))
      {
        uint64_t v229 = *(void *)(v200 + 96);
        if (v229)
        {
          *(void *)(v200 + 96) = 0;
          extraRowsOnBottom.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v229 + 24);
          extraRowsOnBottom.__owns_ = 1;
          std::mutex::lock((std::mutex *)(v229 + 24));
          std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v229, &extraRowsOnBottom);
          uint64_t v230 = *(void *)(v229 + 16);
          v545.__ptr_ = 0;
          std::exception_ptr::~exception_ptr(&v545);
          if (v230)
          {
            std::exception_ptr::exception_ptr(&v545, (const std::exception_ptr *)(v229 + 16));
            v499.__ptr_ = &v545;
            std::rethrow_exception(v499);
            __break(1u);
            return;
          }
          float v231 = *(float *)(v229 + 140);
          uint64_t v4 = v505;
          if (extraRowsOnBottom.__owns_) {
            std::mutex::unlock(extraRowsOnBottom.__m_);
          }
          if (!atomic_fetch_add((atomic_ullong *volatile)(v229 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            (*(void (**)(uint64_t))(*(void *)v229 + 16))(v229);
          }
          double v232 = 0.0;
          if (v231 >= 0.05)
          {
            double v233 = *(double *)(v72 + 808) - v210;
            float v234 = v233 * (float)(logf(v231) + 2.9957) / 2.99573231;
            double v232 = v234;
          }
          double v210 = (double)(int)(v210 + v232);
          int v228 = *(_DWORD *)(v72 + 468);
        }
        else if (*(void *)(v72 + 472) == *(void *)(*(void *)(a2 + 592) + 16))
        {
          double v210 = *(double *)(v72 + 808);
        }
        *(_DWORD *)(v72 + 468) = v228 - 1;
      }
    }
  }
  if (*(int *)(*(void *)(v72 + 392) + 560) >= 2
    && (*(unsigned int (**)(void))(***(void ***)(v72 + 840) + 16))(**(void **)(v72 + 840))
    && !*(unsigned char *)(a2 + 3025)
    && !v199)
  {
    uint64_t v236 = *(void *)(a2 + 592);
    if (*(unsigned char *)(v236 + 136))
    {
      v237 = *(unsigned int **)(a2 + 1096);
      uint64_t v238 = v237[1];
      if ((int)v238 >= 1)
      {
        v239 = (uint64_t *)(v237 + 6);
        do
        {
          uint64_t v240 = *v239;
          if (!*v239) {
            goto LABEL_422;
          }
          int v241 = *(_DWORD *)(v236 + 248);
          if (v241 <= 0) {
            int v241 = *(_DWORD *)(v236 + 240);
          }
          if (*(_DWORD *)(v240 + 240) < v241) {
            goto LABEL_423;
          }
          int v242 = *(_DWORD *)(v236 + 252);
          if (v242 <= 0) {
            int v242 = *(_DWORD *)(v236 + 244);
          }
          if (*(_DWORD *)(v240 + 244) < v242)
          {
LABEL_423:
            double v253 = (double)*(int *)(v72 + 284);
            goto LABEL_424;
          }
          v239 += 2;
        }
        while (--v238);
      }
      uint64_t v243 = v237[2];
      if ((int)v243 >= 1)
      {
        v244 = (uint64_t *)(v237 + 70);
        do
        {
          uint64_t v245 = *v244;
          if (!*v244) {
            goto LABEL_422;
          }
          int v246 = *(_DWORD *)(v236 + 248);
          if (v246 <= 0) {
            int v246 = *(_DWORD *)(v236 + 240);
          }
          if (*(_DWORD *)(v245 + 240) < v246) {
            goto LABEL_423;
          }
          int v247 = *(_DWORD *)(v236 + 252);
          if (v247 <= 0) {
            int v247 = *(_DWORD *)(v236 + 244);
          }
          if (*(_DWORD *)(v245 + 244) < v247) {
            goto LABEL_423;
          }
          v244 += 2;
        }
        while (--v243);
      }
      uint64_t v248 = v237[3];
      if ((int)v248 >= 1)
      {
        v249 = (uint64_t *)(v237 + 134);
        do
        {
          uint64_t v250 = *v249;
          if (!*v249) {
            goto LABEL_422;
          }
          int v251 = *(_DWORD *)(v236 + 248);
          if (v251 <= 0) {
            int v251 = *(_DWORD *)(v236 + 240);
          }
          if (*(_DWORD *)(v250 + 240) < v251) {
            goto LABEL_423;
          }
          int v252 = *(_DWORD *)(v236 + 252);
          if (v252 <= 0) {
            int v252 = *(_DWORD *)(v236 + 244);
          }
          if (*(_DWORD *)(v250 + 244) < v252) {
            goto LABEL_423;
          }
          v249 += 2;
        }
        while (--v248);
      }
    }
    if (v206 >= v210) {
      double v253 = v210;
    }
    else {
      double v253 = v206;
    }
    if (!*(unsigned char *)(a2 + 2)) {
      double v253 = v210;
    }
LABEL_424:
    int v255 = *(_DWORD *)(v72 + 4 * *(int *)(v200 + 76) + 920);
    if (v255 == 6) {
      goto LABEL_429;
    }
    int v256 = *(char *)(*(void *)(v72 + 392) + 109);
    if ((double)*(int *)(v72 + 284) + (double)v256 < v253) {
      double v253 = (double)*(int *)(v72 + 284) + (double)v256;
    }
    if (v255 || *(_DWORD *)(v72 + 16))
    {
LABEL_429:
      int v257 = *(_DWORD *)(v72 + 280);
      if (v253 < (double)v257) {
        double v253 = (double)v257;
      }
    }
    if (v206 + -1.0 >= v253) {
      double v210 = v206 + -1.0;
    }
    else {
      double v210 = v253;
    }
  }
  unsigned int v7 = 0;
  double v258 = *(double *)(v72 + 832);
  if (v210 >= v258) {
    double v258 = v210;
  }
  if (*(double *)(v72 + 816) < v258) {
    double v258 = *(double *)(v72 + 816);
  }
  char v254 = 1;
  *(unsigned char *)(a2 + 2704) = 1;
  float v201 = v258;
  *(double *)(v72 + 448) = v201;
LABEL_439:
  if (v544) {
    sub_1BB9C09B4(v544);
  }
  if ((v254 & 1) == 0)
  {
    std::mutex::unlock(propertyValuea);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_455;
    }
    uint64_t v5 = a2;
    int v269 = *(_DWORD *)(a2 + 644);
    LODWORD(time.value) = 67109120;
    HIDWORD(time.value) = v269;
    float v46 = MEMORY[0x1E4F14500];
    double v47 = "Frame %d: RateControlBeforeEncoding failed\n";
LABEL_461:
    _os_log_error_impl(&dword_1BB9B9000, v46, OS_LOG_TYPE_ERROR, v47, (uint8_t *)&time, 8u);
    goto LABEL_456;
  }
  uint64_t v259 = *(void *)(v72 + 392);
  if (!*(unsigned char *)(v259 + 58) || *(_DWORD *)(v259 + 560) != 1)
  {
    *(void *)(v72 + 416) = *(void *)v101;
    goto LABEL_514;
  }
  if (!*(unsigned char *)(a2 + 3025))
  {
    float v260 = *(double *)v101;
    uint64_t v261 = *(void *)(a2 + 3008);
    double v262 = v260;
    if (vabdd_f64(*(double *)(v72 + 736), v260) > 0.5) {
      *(double *)(v72 + 736) = v262;
    }
    float v263 = (float)*(int *)(v72 + 284);
    float v264 = v201;
    if (v201 >= v263)
    {
      float v264 = v201;
      if (*(int *)(v72 + 16) <= 30)
      {
        *(unsigned char *)(v261 + 48) = roundf(v201) > v263;
        float v264 = v263;
      }
    }
    *(unsigned char *)(v72 + 276) = 0;
    sub_1BBA61E04((int **)&time, *(void *)(*(void *)(a2 + 584) + 48));
    if (v525 < 1) {
      goto LABEL_504;
    }
    char v265 = *(unsigned char *)(v72 + 324);
    if (v265) {
      char v265 = *(_DWORD *)(v72 + 340) == 5 && *(_DWORD *)(v72 + 336) > 3;
    }
    if ((*(_DWORD *)(v72 + 320) | 2) == 3)
    {
      if (*(unsigned char *)(v261 + 108)) {
        char v270 = 1;
      }
      else {
        char v270 = v265;
      }
    }
    else
    {
      char v270 = 0;
    }
    int v271 = *(_DWORD *)(v72 + 16);
    if ((*(char *)(v72 + 761) & 0x80000000) == 0)
    {
      int v272 = *(char *)(v72 + 762);
      if ((v272 & 0x80000000) == 0)
      {
        if (v271 >= v272)
        {
          if (v271 <= v272) {
            goto LABEL_503;
          }
          sub_1BBAAC03C((void *)v72, v271 - *(char *)(v72 + 763));
          int v273 = *(char *)(v72 + 762);
          if (*(_DWORD *)(v72 + 16) > v273) {
            goto LABEL_503;
          }
        }
        else
        {
          sub_1BBAAC03C((void *)v72, v271 + *(char *)(v72 + 763));
          int v273 = *(char *)(v72 + 762);
          if (*(_DWORD *)(v72 + 16) < v273) {
            goto LABEL_503;
          }
        }
        char v278 = *(unsigned char *)(v72 + 761);
        *(unsigned char *)(v72 + 761) = v273;
        *(unsigned char *)(v72 + 762) = v278;
LABEL_503:
        *(_DWORD *)(a2 + 424) = *(_DWORD *)(v72 + 16) - v271;
LABEL_504:
        float v201 = v264;
        uint64_t v285 = *(void *)(v72 + 392);
        unsigned int v286 = *(_DWORD *)(v285 + 340);
        if ((v286 & 0x80000000) != 0)
        {
          int v289 = sub_1BBAAC684(v72, *(_DWORD *)(v72 + 16));
        }
        else
        {
          v287 = (int *)(v285 + 340);
          if (v286 <= 0x17) {
            v288 = v287;
          }
          else {
            v288 = (int *)&unk_1BBB7A6D4;
          }
          int v289 = *v288 & ~(*v288 >> 31);
        }
        *(_DWORD *)(v72 + 728) = v289;
        v290 = &word_1BBB7A4E0[46 * *(unsigned int *)(v72 + 320) + 2 * v289];
        *(double *)(v72 + 416) = v262 * (double)*v290 / (double)v290[1];
        if (*(void *)&time.timescale) {
          sub_1BB9C09B4(*(std::__shared_weak_count **)&time.timescale);
        }
        goto LABEL_512;
      }
    }
    uint64_t v274 = *(void *)(v72 + 368);
    if (v274) {
      BOOL v275 = *(unsigned char *)(v274 + 128) != 0;
    }
    else {
      BOOL v275 = 0;
    }
    if (!time.value || *(double *)(time.value + 208) == *(double *)(v261 + 136))
    {
      uint64_t v276 = *(void *)(*(void *)(v72 + 664) + 8);
      if (v276 == v72 + 656)
      {
        int v277 = 0;
      }
      else
      {
        int v277 = 0;
        do
        {
          v277 += *(unsigned __int8 *)(v276 + 16);
          uint64_t v276 = *(void *)(v276 + 8);
        }
        while (v276 != v72 + 656);
      }
      float v201 = (float)(v201 + (float)v277) / (float)*(unint64_t *)(v72 + 672);
    }
    else
    {
      sub_1BB9C83D4((void *)(v72 + 656));
      sub_1BB9C83D4((void *)(v72 + 680));
    }
    if (*(__int16 *)(v72 + 752) >= 2)
    {
      uint64_t v279 = *(int *)(v72 + 16);
      int v280 = sub_1BBA87C98(a2 + 768, *(__int16 *)(v72 + 8 * v279 + 24));
      if (*(_DWORD *)(v72 + 464)) {
        int v281 = 2;
      }
      else {
        int v281 = v280;
      }
      sub_1BBAAC03C((void *)v72, v281 + v279);
      if ((*(_DWORD *)(v72 + 320) | 2) == 3) {
        *(_WORD *)(v72 + 752) = 0;
      }
      goto LABEL_502;
    }
    if ((v270 & 1) == 0)
    {
      char v282 = !v275;
      if (*(int *)(v72 + 12) < 2) {
        char v282 = 1;
      }
      if ((v282 & 1) == 0)
      {
        uint64_t v283 = *(void *)(v72 + 368);
        if (v283)
        {
          if (*(unsigned char *)(v283 + 129))
          {
            int v284 = *(_DWORD *)(v72 + 284);
            if (v201 >= (float)(v284 - 1))
            {
              uint64_t v494 = *(int *)(v72 + 16);
              int v495 = sub_1BBA87C98(a2 + 768, *(__int16 *)(v72 + 8 * v494 + 24));
              if (*(_DWORD *)(v72 + 464)) {
                int v496 = 2;
              }
              else {
                int v496 = v495;
              }
              sub_1BBAAC03C((void *)v72, v494 + v496);
              float v264 = (float)v284;
              goto LABEL_502;
            }
          }
        }
      }
    }
    if (v201 > (float)((float)*(int *)(v72 + 280) + 0.4999))
    {
LABEL_502:
      uint64_t v4 = v505;
      goto LABEL_503;
    }
    uint64_t v492 = *(unsigned int *)(v72 + 16);
    uint64_t v4 = v505;
    if ((int)v492 < 1 || *(int *)(v72 + 12) < 2) {
      goto LABEL_503;
    }
    unsigned int v493 = v492 - 1;
    if (*(_DWORD *)(*(void *)(v72 + 392) + 508) != 2)
    {
      if (*(__int16 *)(v72 + 8 * v493 + 24) >= 321)
      {
        double v497 = *(double *)(a2 + 2440);
        unsigned int v498 = dword_1BBB7A378[*(__int16 *)(v72 + 8 * v492 + 24) > 400];
        if (v497 > (double)(int)v498
          || v498 < vaddvq_s32(vmlaq_s32((int32x4_t)vcvtd_n_u64_f64(v497, 2uLL), *(int32x4_t *)(a2 + 2448), (int32x4_t)xmmword_1BBB6F920)) >> 4)
        {
          goto LABEL_502;
        }
      }
      uint64_t v4 = v505;
      if (!sub_1BBAAC5E8(v72, *(double *)(*(void *)(a2 + 3008) + 56))) {
        goto LABEL_503;
      }
    }
    sub_1BBAAC03C((void *)v72, v493);
    goto LABEL_503;
  }
LABEL_512:
  uint64_t v291 = v101 + 120 * v168;
  double v293 = *(double *)(v291 + 144);
  v292 = (double *)(v291 + 144);
  double v294 = *(double *)(v72 + 416);
  if (v293 != v294)
  {
    double *v292 = v294;
    sub_1BBAAC0AC(v72, v101, v534);
  }
LABEL_514:
  int v295 = *(_DWORD *)(v72 + 304);
  if (v295 == 0x80000000) {
    float v296 = v201;
  }
  else {
    float v296 = (float)v295;
  }
  int v297 = *(_DWORD *)(v72 + 768);
  if (v297 != -1)
  {
    float v298 = (float)v297;
    uint64_t v299 = a2;
    *(float *)(a2 + 2720) = (float)v297;
    float v300 = (float)v297;
    if (!*(unsigned char *)(v72 + 624)) {
      goto LABEL_547;
    }
    goto LABEL_546;
  }
  uint64_t v299 = a2;
  *(float *)(a2 + 2720) = v296;
  float v298 = v296;
  if (*(unsigned char *)(v72 + 624))
  {
    float v298 = v296;
    float v300 = v296;
    if (*(_DWORD *)(v72 + 632) != 1)
    {
LABEL_546:
      *(float *)(v299 + 2724) = v300;
      goto LABEL_547;
    }
    uint64_t v301 = *(void *)(v72 + 488);
    double v302 = 0.0;
    double v303 = 0.0;
    if (*(void *)(v72 + 496) != v301)
    {
      unint64_t v304 = *(void *)(v72 + 512);
      v305 = (char **)(v301 + 8 * (v304 >> 10));
      v306 = *v305;
      v307 = &(*v305)[4 * (v304 & 0x3FF)];
      uint64_t v308 = *(void *)(v301 + (((*(void *)(v72 + 520) + v304) >> 7) & 0x1FFFFFFFFFFFFF8))
           + 4 * ((*(void *)(v72 + 520) + v304) & 0x3FF);
      if (v307 != (char *)v308)
      {
        int v309 = 0;
        do
        {
          int v311 = *(_DWORD *)v307;
          v307 += 4;
          int v310 = v311;
          if (v307 - v306 == 4096)
          {
            v312 = v305[1];
            ++v305;
            v306 = v312;
            v307 = v312;
          }
          v309 += v310;
        }
        while (v307 != (char *)v308);
        double v303 = (double)v309;
      }
    }
    uint64_t v313 = *(void *)(v72 + 584);
    if (*(void *)(v72 + 592) != v313)
    {
      unint64_t v314 = *(void *)(v72 + 608);
      v315 = (char **)(v313 + 8 * (v314 >> 10));
      v316 = *v315;
      v317 = &(*v315)[4 * (v314 & 0x3FF)];
      uint64_t v318 = *(void *)(v313 + (((*(void *)(v72 + 616) + v314) >> 7) & 0x1FFFFFFFFFFFFF8))
           + 4 * ((*(void *)(v72 + 616) + v314) & 0x3FF);
      if (v317 != (char *)v318)
      {
        int v319 = 0;
        do
        {
          int v321 = *(_DWORD *)v317;
          v317 += 4;
          int v320 = v321;
          if (v317 - v316 == 4096)
          {
            v322 = v315[1];
            ++v315;
            v316 = v322;
            v317 = v322;
          }
          v319 += v320;
        }
        while (v317 != (char *)v318);
        double v302 = (double)v319 * 100.0;
      }
    }
    float v323 = v302 / v303;
    int v324 = *(_DWORD *)(v72 + 636);
    if (v323 <= (float)(v324 + 5))
    {
      float v326 = (float)(v324 - 5);
      int v325 = *(_DWORD *)(v72 + 628);
      if (v323 >= v326)
      {
LABEL_541:
        double v327 = *(double *)(v72 + 832);
        double v328 = *(double *)(v72 + 816);
        double v329 = (float)(v296 + (float)v325);
        if (v328 > v329) {
          double v328 = (float)(v296 + (float)v325);
        }
        if (v327 < v329) {
          double v327 = v328;
        }
        float v300 = v327;
        float v298 = v296;
        goto LABEL_546;
      }
      --v325;
    }
    else
    {
      int v325 = *(_DWORD *)(v72 + 628) + 1;
    }
    *(_DWORD *)(v72 + 628) = v325;
    goto LABEL_541;
  }
LABEL_547:
  uint64_t v330 = *(void *)(v72 + 392);
  double v331 = v296 + 0.5;
  int v332 = (int)v331;
  if (*(char *)(v330 + 104) < 2) {
    goto LABEL_562;
  }
  uint64_t v333 = 0;
  v334 = (int *)(v330 + 7856);
  uint64_t v335 = 4 * *(unsigned __int8 *)(v330 + 104);
  do
  {
    v336 = (int *)((char *)&v553 + v333);
    *(_DWORD *)((char *)&v553 + v333) = v332;
    int v337 = *(v334 - 8);
    if (v337 != -1) {
      goto LABEL_559;
    }
    int v338 = *(v334 - 4);
    int v339 = (int)v331;
    if (v338 != -13)
    {
      int v340 = v338 + v332;
      if (v338 + v332 >= 51) {
        int v340 = 51;
      }
      int v339 = v340 & ~(v340 >> 31);
      int *v336 = v339;
    }
    if (*v334 != -1)
    {
      if (*v334 >= v339) {
        v341 = (int *)((char *)&v553 + v333);
      }
      else {
        v341 = v334;
      }
      int v337 = *v341;
LABEL_559:
      int *v336 = v337;
    }
    ++v334;
    v333 += 4;
  }
  while (v335 != v333);
  *(_OWORD *)(v299 + 2728) = v553;
LABEL_562:
  *(unsigned char *)(*(void *)(v299 + 24) + 102) = v332;
  if (*(unsigned char *)(v72 + 824))
  {
    if (*(double *)(v72 + 808) >= (double)(int)(v298 + 0.5))
    {
      unsigned int v342 = *(_DWORD *)(v72 + 456);
      if (v342 >= 3)
      {
        if (*(unsigned char *)(v299 + 2))
        {
          ++*(_DWORD *)(v72 + 460);
          goto LABEL_569;
        }
      }
    }
    *(_DWORD *)(v72 + 460) = 0;
    if (*(unsigned char *)(v299 + 2))
    {
      unsigned int v342 = *(_DWORD *)(v72 + 456);
LABEL_569:
      *(_DWORD *)(v72 + 456) = v342 + 1;
    }
    else
    {
      *(_DWORD *)(v72 + 456) = 0;
    }
  }
  unsigned int v343 = *(_DWORD *)(v330 + 64);
  if (v343 <= 0x2B && ((1 << v343) & 0xCC000100002) != 0)
  {
    if ((*(_DWORD *)(v72 + 320) | 2) == 3 && *(void *)(v72 + 344) && !*(unsigned char *)(v527 + 109))
    {
      double v344 = 5.0;
    }
    else
    {
      double v344 = 3.0;
      if (v343 == 20)
      {
        if (*(int *)(v330 + 560) <= 1) {
          double v344 = 3.0;
        }
        else {
          double v344 = 10.0;
        }
      }
    }
    uint64_t v345 = *(void *)(*(void *)(v72 + 840) + 48);
    v346 = (std::mutex *)(v345 + 56);
    std::mutex::lock((std::mutex *)(v345 + 56));
    int v347 = *(_DWORD *)(v345 + 40);
    std::mutex::unlock(v346);
    unsigned int v348 = *(_DWORD *)(v101 + 76);
    uint64_t v349 = v101 + 136 + 120 * v348;
    if (v348 >= 7) {
      uint64_t v349 = 0;
    }
    _ZF = v348 == 9;
    v350 = (double *)(v101 + 976);
    if (!_ZF) {
      v350 = (double *)v349;
    }
    int v351 = (int)(v344 * (*v350 / v350[1]));
    *(_DWORD *)(v101 + 64) = v351;
    if (*(_DWORD *)(*(void *)v537 + 116) < v351) {
      int v351 = *(_DWORD *)(*(void *)v537 + 116);
    }
    *(_DWORD *)(v101 + 68) = v351;
    if (v296 >= (float)*(int *)(v72 + 284) || *(_DWORD *)(*(void *)v537 + 112)) {
      *(_DWORD *)(v101 + 68) = v351 + v347;
    }
  }
  uint64_t v352 = *(void *)(v72 + 384);
  if (v352 && *(int *)(*(void *)(v72 + 392) + 512) >= 2)
  {
    v353 = (const void *)(*(uint64_t (**)(void))(**(void **)(a2 + 592) + 88))(*(void *)(a2 + 592));
    sub_1BBAAC5AC(v352, v353);
  }
  std::mutex::unlock(propertyValuea);
  uint64_t v52 = a2;
LABEL_594:
  sub_1BBA65A48(v52);
  v354 = (void *)(a2 + 768);
  if (*(unsigned char *)(a2 + 781)) {
    sub_1BBA87ADC(a2 + 768);
  }
  CMTime time = v542;
  CMTimeGetSeconds(&time);
  kdebug_trace();
  if (*(unsigned char *)(a2 + 779))
  {
    if (*(unsigned char *)(a1 + 11056))
    {
      sub_1BBA87730(v354, *(char *)(a1 + 3288));
      goto LABEL_605;
    }
    uint64_t v355 = a2;
    if (*(_DWORD *)(a2 + 444) == 6)
    {
      if (*(float *)(a2 + 2720) < (float)(int)(*(float *)(a2 + 2720) + 0.5))
      {
        uint64_t v355 = a2;
        goto LABEL_602;
      }
    }
    else
    {
LABEL_602:
      v356 = *(void (**)(void *))(v355 + 944);
      uint64_t v357 = *(void *)(v355 + 952);
      v358 = (void *)((char *)v354 + (v357 >> 1));
      if (v357) {
        v356 = *(void (**)(void *))(*v358 + v356);
      }
      v356(v358);
    }
  }
LABEL_605:
  CMTime time = v542;
  CMTimeGetSeconds(&time);
  kdebug_trace();
LABEL_606:
  v359 = *(_DWORD **)(a2 + 3008);
  *(unsigned char *)(a1 + 1152) = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 1156) = v359[4];
  *(_DWORD *)(a1 + 1160) = v359[8];
  *(_DWORD *)(a1 + 1164) = v359[10];
  CMTime time = v542;
  CMTimeGetSeconds(&time);
  kdebug_trace();
  uint64_t v5 = a2;
  if (*(unsigned char *)a2)
  {
    unsigned int v7 = 0;
    goto LABEL_790;
  }
  uint64_t v360 = *(void *)(a2 + 584);
  int v361 = *(unsigned __int8 *)(v360 + 3766);
  unint64_t v362 = *(char *)(v360 + 3288);
  uint64_t v512 = *(void *)(v360 + 13272);
  *(_DWORD *)(a2 + 420) = (int)*(double *)(v360 + 3280);
  v528 = (void *)(a2 + 2688);
  unsigned int v518 = v362;
  unsigned int v7 = sub_1BBA69FB4(a2 + 2688, v362);
  if (v7)
  {
    uint64_t v5 = a2;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_790;
    }
    LOWORD(time.value) = 0;
    v266 = MEMORY[0x1E4F14500];
    v267 = "SliceEnc array creation failed\n";
    goto LABEL_788;
  }
  uint64_t v5 = a2;
  int v363 = v518;
  uint64_t v364 = v518;
  uint64_t v500 = v360;
  while (2)
  {
    if (v363 >= 1)
    {
      uint64_t v365 = 0;
      uint64_t v366 = 0;
      while (1)
      {
        unsigned int v7 = sub_1BBACBDDC(*(void *)(v5 + 2688) + v365, (__n128 *)v5, v366, 0, v361 == 0);
        if (v7) {
          break;
        }
        ++v366;
        v365 += 79360;
        if (v364 == v366) {
          goto LABEL_616;
        }
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_790;
      }
      LOWORD(time.value) = 0;
      v266 = MEMORY[0x1E4F14500];
      v267 = "Slice initialization failed\n";
LABEL_788:
      uint32_t v268 = 2;
LABEL_789:
      _os_log_error_impl(&dword_1BB9B9000, v266, OS_LOG_TYPE_ERROR, v267, (uint8_t *)&time, v268);
      goto LABEL_790;
    }
LABEL_616:
    if (v512)
    {
      v367 = (unsigned char *)v500;
      unsigned int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v512 + 24))(v512, v5);
      if (!v7)
      {
        if (!*(_DWORD *)(v500 + 3696) || !*(unsigned char *)(v5 + 640))
        {
          unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v512 + 64))(v512);
          if (v7)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_790;
            }
            LOWORD(time.value) = 0;
            v266 = MEMORY[0x1E4F14500];
            v267 = "FinishPendingFrames failed\n";
            goto LABEL_788;
          }
        }
        int v363 = v518;
        if (!v361)
        {
LABEL_624:
          if (!*(unsigned char *)(v5 + 4))
          {
            if ((char)v367[3239] >= 2)
            {
              sub_1BBA87854((int *)(a2 + 768));
              int v363 = v518;
            }
            if (v367[3784])
            {
              v368 = *(int32x2_t **)(v5 + 1048);
              v369 = *(int32x2_t **)(*(void *)&v368[1] + 608);
              v368[287].i32[0] = v369[153].i32[0];
              int32x2_t v370 = v369[152];
              int v363 = v518;
              v368[286] = v370;
              v368[285] = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmul_s32(v368[285], (int32x2_t)0xA0000000DLL), v370, (int32x2_t)0x600000003), (int32x2_t)0x800000008), 4uLL);
            }
          }
          goto LABEL_629;
        }
LABEL_780:
        unsigned int v7 = 0;
        if (!*(unsigned char *)(v5 + 3)) {
          goto LABEL_790;
        }
        continue;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_790;
      }
      int v491 = *(_DWORD *)(v5 + 644);
      LODWORD(time.value) = 67109120;
      HIDWORD(time.value) = v491;
      v266 = MEMORY[0x1E4F14500];
      v267 = "Frame %d: PreEncode failed\n";
LABEL_458:
      uint32_t v268 = 8;
      goto LABEL_789;
    }
    break;
  }
  v367 = (unsigned char *)v500;
  int v363 = v518;
  if (!v361) {
    goto LABEL_624;
  }
LABEL_629:
  if (!v367[3237] && v367[3794])
  {
    bzero(*(void **)(*(void *)(v5 + 584) + 24), 32 * *(unsigned int *)(*(void *)(v5 + 584) + 44));
    int v363 = v518;
  }
  if (v363 < 1)
  {
    uint64_t v479 = *(void *)(v5 + 2712);
    if (v479)
    {
      uint64_t v480 = 0;
      uint64_t v481 = 0;
      float v482 = *(float *)(v5 + 2720);
LABEL_769:
      *(void *)(v5 + 2904) = v480;
      *(void *)(v5 + 2928) = v481;
      char v485 = sub_1BBAAD484(*(void *)(v479 + 392), v5);
      *(unsigned char *)(v5 + 3) = v485;
      int v363 = v518;
      if (v485)
      {
        *(void *)(v5 + 2936) = *(void *)(v5 + 2904);
        *(void *)(v5 + 2944) = *(void *)(v5 + 2928);
        *(unsigned char *)(v5 + 2952) = (int)v482;
        v486 = *(void **)(v5 + 608);
        v487 = (void *)v486[78];
        if (v487)
        {
          bzero(v487, v486[76] * v486[60]);
          int v363 = v518;
        }
        v488 = (void *)v486[80];
        if (v488)
        {
          bzero(v488, v486[77] * v486[59]);
          int v363 = v518;
        }
        v489 = (void *)v486[64];
        if (v489)
        {
          bzero(v489, 2 * v486[60] * v486[61]);
          int v363 = v518;
        }
        v490 = (void *)v486[72];
        if (v490)
        {
          bzero(v490, 16 * v486[68] * v486[69]);
          int v363 = v518;
        }
      }
    }
LABEL_778:
    if (!*(unsigned char *)(v500 + 3766)) {
      ++*(unsigned char *)(v5 + 4);
    }
    goto LABEL_780;
  }
  v506 = v4;
  uint64_t v371 = 0;
  uint64_t v372 = 0;
  int v524 = v361;
  while (2)
  {
    v373 = (void *)*v528;
    uint64_t v374 = *v528 + 79360 * v372;
    uint64_t v375 = v374 + 79216;
    uint64_t v376 = *(void *)(v374 + 79216);
    uint64_t v377 = *(void *)(v376 + 584);
    unsigned int v378 = *(_DWORD *)(v374 + 552);
    uint64_t v379 = v378 + 1;
    if (*(_DWORD *)(v377 + 3328) >= (int)v379) {
      signed int v380 = v378 + 1;
    }
    else {
      signed int v380 = *(_DWORD *)(v377 + 3328);
    }
    if (*(unsigned char *)(*(void *)(v374 + 1408) + 33)) {
      BOOL v381 = *(unsigned char *)(*(void *)(v374 + 1400) + 80) != 0;
    }
    else {
      BOOL v381 = 0;
    }
    uint64_t v382 = *(void *)(v376 + 608);
    int v383 = *(_DWORD *)(v382 + 276);
    int v384 = *(_DWORD *)(v382 + 280);
    int v385 = *(_DWORD *)(v377 + 3360);
    int v526 = *(char *)(v374 + 621);
    int v386 = *(char *)(v377 + 3288);
    int v387 = *(_DWORD *)(v374 + 4);
    int v388 = *(_DWORD *)(v374 + 79308);
    LODWORD(extraRowsOnBottom.__m_) = 0;
    unint64_t v389 = (int)v379;
    *(void *)v535 = v372;
    v538 = (void **)&v373[9920 * v372 + 9907];
    v390 = &v373[9920 * v372 + 9908];
    uint64_t v529 = v371;
    propertyValueb = v373;
    if (*v390 < (int)v379)
    {
      if (v379 <= 0x1C9249)
      {
        int v508 = v386;
        int v510 = v383;
        int v521 = v385;
        signed int v519 = v380;
        int v516 = v388;
        unsigned int v391 = v378;
        uint64_t v392 = v378 + 1;
        sub_1BBACBC3C((uint64_t)v538);
        if (!malloc_type_posix_memalign(v538, 0x10uLL, 56 * v389, 0x1010040CAC54F0AuLL))
        {
          if (*v538)
          {
            uint64_t v393 = 0;
            unint64_t v394 = v389;
            uint64_t v379 = v392;
            do
            {
              v395 = (char *)*v538 + v393;
              void *v395 = 0;
              v395[1] = 0;
              v395[4] = 0;
              v395[5] = 0;
              v395[3] = 0;
              v393 += 56;
              --v394;
            }
            while (v394);
            unint64_t *v390 = v389;
            v373 = propertyValueb;
            uint64_t v372 = *(void *)v535;
            unsigned int v378 = v391;
            int v388 = v516;
            signed int v380 = v519;
            int v385 = v521;
            int v386 = v508;
            int v383 = v510;
            uint64_t v375 = v374 + 79216;
            goto LABEL_647;
          }
        }
      }
LABEL_652:
      unsigned int v7 = -12904;
      goto LABEL_658;
    }
LABEL_647:
    BOOL v514 = v381;
    uint64_t v396 = (uint64_t)&v373[9920 * v372 + 9905];
    v397 = &v373[9920 * v372 + 9906];
    if (*v397 < (unint64_t)v380)
    {
      if (v380 > 0x3D89D) {
        goto LABEL_652;
      }
      uint64_t v507 = v375;
      int v509 = v386;
      int v511 = v383;
      int v522 = v385;
      int v398 = v388;
      int v513 = v384;
      unsigned int v399 = v378;
      uint64_t v400 = v379;
      if (*(void *)v396)
      {
        signed int v401 = v380;
        free(*(void **)v396);
        signed int v380 = v401;
        *(void *)uint64_t v396 = 0;
        *(void *)(v396 + 8) = 0;
      }
      signed int v402 = v380;
      uint64_t v403 = v380;
      if (malloc_type_posix_memalign((void **)v396, 0x10uLL, 416 * v380, 0x1030040A036308BuLL) || !*(void *)v396) {
        goto LABEL_652;
      }
      uint64_t v404 = 0;
      uint64_t v405 = v403;
      int v388 = v398;
      do
      {
        v406 = (void *)(*(void *)v396 + v404);
        v406[3] = 0;
        v406[4] = 0;
        v406[26] = 0;
        v406[30] = 0;
        v406[31] = 0;
        v404 += 416;
        --v405;
      }
      while (v405);
      void *v397 = v403;
      uint64_t v379 = v400;
      unsigned int v378 = v399;
      int v384 = v513;
      signed int v380 = v402;
      int v385 = v522;
      int v386 = v509;
      int v383 = v511;
      uint64_t v375 = v507;
    }
    uint64_t v407 = v375;
    v501 = (uint64_t *)v396;
    uint64_t v502 = v379;
    int v408 = v386;
    int v409 = v383;
    int v523 = v385;
    int v520 = v380;
    int v515 = v387;
    int v517 = v388;
    unsigned int v503 = v378;
    v410 = (int **)(v374 + 1024);
    unsigned int v7 = sub_1BBA39A24((void **)(v374 + 1024), v389);
    if (!v7)
    {
      uint64_t v418 = propertyValueb[9920 * *(void *)v535 + 9886];
      if (!*(unsigned char *)(v418 + 53) && *(unsigned char *)(v418 + 610))
      {
        uint64_t v419 = *(void *)(*(void *)v407 + 584);
        int v420 = *(_DWORD *)(v419 + 40);
        v421 = (char *)&propertyValueb[9920 * *(void *)v535];
        *((_DWORD *)v421 + 19826) = v420;
        *((void *)v421 + 9912) = *(void *)(v419 + 24) + 32 * (v420 * v515);
      }
      if (*(unsigned char *)(v374 + 10))
      {
        if (*(unsigned char *)(v374 + 10) == 1) {
          unsigned int v422 = *(unsigned char *)(v374 + 537) == 0;
        }
        else {
          unsigned int v422 = 2;
        }
      }
      else
      {
        unsigned int v422 = *(unsigned __int8 *)(v374 + 537);
      }
      if (v503 <= 0x7FFFFFFE)
      {
        uint64_t v423 = 0;
        uint64_t v424 = 0;
        while (1)
        {
          *(_DWORD *)(*(void *)(v374 + 1024) + v424) = *(char *)(v374 + 621);
          unsigned int v7 = sub_1BBA195B4((void **)((char *)*v538 + v423), 2 * v409 * v384 / v408 / v502);
          if (v7) {
            break;
          }
          v424 += 4;
          v423 += 56;
          if (4 * v502 == v424) {
            goto LABEL_683;
          }
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_658;
        }
        LOWORD(time.value) = 0;
        v447 = MEMORY[0x1E4F14500];
        v448 = "Substream bitstream initialization failed\n";
LABEL_745:
        _os_log_error_impl(&dword_1BB9B9000, v447, OS_LOG_TYPE_ERROR, v448, (uint8_t *)&time, 2u);
        goto LABEL_658;
      }
LABEL_683:
      if (v520 >= 1)
      {
        uint64_t v425 = 0;
        uint64_t v426 = 0;
        do
        {
          sub_1BBA1C8B4(*v501 + v426, (uint64_t)*v538 + v425, v422, v526);
          v426 += 416;
          v425 += 56;
        }
        while (416 * v520 != v426);
      }
      unint64_t v427 = *(void *)(v374 + 3464);
      *(void *)(v374 + 3472) = v427;
      int v428 = *(_DWORD *)(v374 + 616);
      int v429 = *(_DWORD *)(v374 + 4);
      int v430 = *(_DWORD *)(v374 + 552);
      char v431 = *(unsigned char *)(v374 + 628);
      char v432 = *(unsigned char *)(v374 + 629);
      unint64_t v433 = *(void *)(v374 + 3480);
      if (v427 >= v433)
      {
        uint64_t v436 = v433 - v427;
        uint64_t v437 = v436 >> 3;
        if ((unint64_t)(v436 >> 3) <= 1) {
          uint64_t v437 = 1;
        }
        if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v438 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v438 = v437;
        }
        if (v438 >> 60) {
          sub_1BB9C18AC();
        }
        v439 = operator new(16 * v438);
        _DWORD *v439 = v428;
        v439[1] = v429;
        v439[2] = v430;
        *((unsigned char *)v439 + 12) = v431;
        *((unsigned char *)v439 + 13) = v432;
        uint64_t v440 = *(void *)(v374 + 3472);
        uint64_t v441 = *(void *)(v374 + 3464);
        v442 = v439;
        if (v440 != v441)
        {
          do
          {
            uint64_t v443 = *(void *)(v440 - 16);
            v440 -= 16;
            uint64_t v444 = *(void *)(v440 + 6);
            *((void *)v442 - 2) = v443;
            v442 -= 4;
            *(void *)((char *)v442 + 6) = v444;
          }
          while (v440 != v441);
          uint64_t v440 = *(void *)(v374 + 3464);
        }
        uint64_t v435 = *(void *)v535;
        v445 = (char *)&v439[4 * v438];
        *(void *)(v374 + 3464) = v442;
        v434 = (char *)(v439 + 4);
        *(void *)(v374 + 3472) = v439 + 4;
        *(void *)(v374 + 3480) = v445;
        if (v440) {
          operator delete((void *)v440);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v427 = v428;
        *(_DWORD *)(v427 + 4) = v429;
        *(_DWORD *)(v427 + 8) = v430;
        *(unsigned char *)(v427 + 12) = v431;
        v434 = (char *)(v427 + 16);
        *(unsigned char *)(v427 + 13) = v432;
        uint64_t v435 = *(void *)v535;
      }
      *(void *)(v374 + 3472) = v434;
      if (v523 == 4)
      {
        unsigned int v7 = sub_1BBACEA54(v374, v520);
        if (v7) {
          goto LABEL_658;
        }
      }
      else
      {
        v446 = &propertyValueb[9920 * v435 + 9903];
        unsigned int v7 = sub_1BBACEE3C((uint64_t)v446, 1uLL);
        if (v7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_658;
          }
          LOWORD(time.value) = 0;
          v447 = MEMORY[0x1E4F14500];
          v448 = "LCUEnc creation failed\n";
          goto LABEL_745;
        }
        unsigned int v7 = sub_1BBA88900(*v446, v374);
        if (v7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_658;
          }
          LOWORD(time.value) = 0;
          v447 = MEMORY[0x1E4F14500];
          v448 = "LCUEnc init failed\n";
          goto LABEL_745;
        }
        int v449 = v515;
        if (v515 <= v517)
        {
          uint64_t v450 = *v446;
          do
          {
            LODWORD(time.value) = **v410;
            sub_1BBA8F34C(v450, v449, *v501);
            sub_1BBA8FA78(*v446, (int *)&time);
            sub_1BBAA5780(*v446, *v410);
            uint64_t v450 = *v446;
            propertyValueb[9920 * *(void *)v535 + 9914] += *(unsigned int *)(*v446 + 212);
            ++v449;
          }
          while (v517 + 1 != v449);
        }
        sub_1BBA1CBA4((unint64_t *)*v501, 1);
        sub_1BBA1C980((void *)*v501);
      }
      LODWORD(extraRowsOnBottom.__m_) = v384;
      if (*(unsigned char *)(v374 + 496) || *(unsigned char *)(v374 + 497)) {
        sub_1BBAA990C((unsigned int *)&propertyValueb[9920 * *(void *)v535 + 9765], v374, (int *)&extraRowsOnBottom);
      }
      if (v514) {
        sub_1BBA499A8(v374 + 3320, *(void *)(v374 + 1360), *(char *)(v374 + 621), (int *)&extraRowsOnBottom);
      }
      if ((int)v502 >= 2)
      {
        if (!*(_DWORD *)(v374 + 552)) {
          goto LABEL_740;
        }
        unint64_t v451 = 0;
        unsigned int v452 = 0;
        v453 = *v538;
        do
        {
          sub_1BBA19A20((uint64_t)v453 + 56 * v451);
          v453 = *v538;
          uint64_t v454 = (uint64_t)*v538 + 56 * v451;
          v455 = *(unsigned __int8 **)(v454 + 16);
          unint64_t v456 = *(void *)(v454 + 24);
          if ((unint64_t)v455 >= v456)
          {
            int v458 = 0;
          }
          else
          {
            int v457 = 0;
            int v458 = 0;
            unint64_t v459 = v456 - (void)v455;
            v460 = v455;
            do
            {
              unsigned int v462 = *v460++;
              unsigned int v461 = v462;
              BOOL v463 = v457 == 2;
              int v464 = 2 * (v462 > 3);
              if (v457 == 2) {
                int v457 = v464;
              }
              int v465 = v461 < 4 && v463;
              v458 += v465;
              if (v461) {
                int v457 = 0;
              }
              else {
                ++v457;
              }
              --v459;
            }
            while (v459);
          }
          unsigned int v466 = v458 - v455 + v456 - 1;
          *(_DWORD *)(*(void *)(v374 + 560) + 4 * v451) = v466;
          if (v452 <= v466) {
            unsigned int v452 = v466;
          }
          ++v451;
        }
        while (v451 < *(unsigned int *)(v374 + 552));
        if (v452) {
          unsigned int v467 = 31 - __clz(v452);
        }
        else {
LABEL_740:
        }
          LOBYTE(v467) = 0;
        *(unsigned char *)(v374 + 556) = v467;
      }
      unsigned int v7 = sub_1BBACEFEC((unsigned __int8 *)v374);
      if (v7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_658;
        }
        LOWORD(time.value) = 0;
        v447 = MEMORY[0x1E4F14500];
        v448 = "Slice header encoding failed\n";
        goto LABEL_745;
      }
      uint64_t v468 = v502;
      v469 = v538;
      if (v503 > 0x7FFFFFFE)
      {
LABEL_757:
        sub_1BBA19A20(v374 + 3488);
        if (!*(unsigned char *)(v374 + 3536))
        {
          unsigned int v7 = 0;
          goto LABEL_658;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_762;
        }
      }
      else
      {
        uint64_t v470 = 0;
        while (!*((unsigned char *)*v469 + 56 * v470 + 48))
        {
          uint64_t v471 = (uint64_t)*v469 + 56 * v470;
          v472 = *(unsigned int **)(v471 + 16);
          unint64_t v473 = *(int *)(v471 + 44) + 8 * (*(void *)(v471 + 24) - (void)v472);
          if (v473)
          {
            if (v473 < 0x21)
            {
              LODWORD(v474) = 0;
              char v478 = 32;
            }
            else
            {
              uint64_t v474 = 0;
              do
              {
                uint64_t v475 = v474;
                unsigned int v476 = *v472++;
                unsigned int v477 = bswap32(v476);
                sub_1BBA19614(v374 + 3488, HIWORD(v477), 16);
                sub_1BBA19614(v374 + 3488, (unsigned __int16)v477, 16);
                uint64_t v474 = v475 + 32;
              }
              while (v475 + 64 < v473);
              char v478 = v475 + 64;
              uint64_t v468 = v502;
              v469 = v538;
            }
            sub_1BBA19678(v374 + 3488, bswap32(*v472) >> (v478 - v473), v473 - v474);
          }
          if (++v470 == v468) {
            goto LABEL_757;
          }
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_762;
        }
      }
      LOWORD(time.value) = 0;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Ran out of allocated bufferspace\n", (uint8_t *)&time, 2u);
LABEL_762:
      unsigned int v7 = -26526;
    }
LABEL_658:
    uint64_t v411 = *(void *)(v374 + 1360);
    time.CMTimeValue value = v411 + 1104;
    LOBYTE(time.timescale) = 1;
    std::mutex::lock((std::mutex *)(v411 + 1104));
    atomic_store(0x7FFFFFFFu, (unsigned int *)(v411 + 1100));
    sub_1BB9D9FD4((uint64_t)&time);
    std::condition_variable::notify_all((std::condition_variable *)(v411 + 1168));
    int v361 = v524;
    uint64_t v364 = v518;
    if (LOBYTE(time.timescale)) {
      std::mutex::unlock((std::mutex *)time.value);
    }
    uint64_t v412 = 0;
    v413 = (char *)propertyValueb + v529;
    do
    {
      v414 = &v413[v412];
      v415 = *(std::__shared_weak_count **)&v413[v412 + 3552];
      *(_OWORD *)&v413[v412 + 3544] = 0u;
      if (v415) {
        sub_1BB9C09B4(v415);
      }
      v416 = (std::__shared_weak_count *)*((void *)v414 + 476);
      *(_OWORD *)(v414 + 3800) = 0u;
      if (v416) {
        sub_1BB9C09B4(v416);
      }
      v412 += 16;
    }
    while (v412 != 256);
    v417 = *(std::__shared_weak_count **)(v374 + 4064);
    *(_OWORD *)(v374 + 4056) = 0u;
    if (v417) {
      sub_1BB9C09B4(v417);
    }
    *(void *)(v374 + 1360) = 0;
    propertyValueb[9920 * *(void *)v535 + 9912] = 0;
    if (!v7)
    {
      uint64_t v372 = *(void *)v535 + 1;
      uint64_t v371 = v529 + 79360;
      if (*(void *)v535 + 1 == v518)
      {
        uint64_t v5 = a2;
        uint64_t v479 = *(void *)(a2 + 2712);
        uint64_t v4 = v506;
        int v363 = v518;
        if (!v479) {
          goto LABEL_778;
        }
        uint64_t v481 = 0;
        uint64_t v480 = 0;
        float v482 = *(float *)(a2 + 2720);
        *(void *)(a2 + 2904) = 0;
        *(void *)(a2 + 2928) = 0;
        uint64_t v483 = v518;
        v484 = *(void **)(a2 + 2688);
        do
        {
          v480 += 8 * (v484[439] - v484[438]);
          v481 += v484[9914] >> 8;
          v484 += 9920;
          --v483;
        }
        while (v483);
        goto LABEL_769;
      }
      continue;
    }
    break;
  }
  uint64_t v4 = v506;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LOWORD(time.value) = 0;
    _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Slice encode failed\n", (uint8_t *)&time, 2u);
  }
  uint64_t v5 = a2;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LOWORD(time.value) = 0;
    v266 = MEMORY[0x1E4F14500];
    v267 = "EncodeSlice failed\n";
    goto LABEL_788;
  }
LABEL_790:
  if (!*(unsigned char *)(v5 + 418)) {
    sub_1BBA6A130(a2, v7);
  }
  if (v4) {
    sub_1BB9C09B4(v4);
  }
}

void sub_1BBA5D770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::mutex *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,std::exception_ptr a44,std::mutex *a45,char a46)
{
  std::exception_ptr::~exception_ptr(&a44);
  if (a46) {
    std::mutex::unlock(a45);
  }
  if (!atomic_fetch_add(v46 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(atomic_ullong *))(*v46 + 16))(v46);
  }
  if (a43) {
    sub_1BB9C09B4(a43);
  }
  std::mutex::unlock(a27);
  if (a14) {
    sub_1BB9C09B4(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA5D8AC(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 336);
  if (v2 < 0x11)
  {
    uint64_t v3 = (unsigned int *)(result + 13280);
    if (!v2) {
      goto LABEL_19;
    }
  }
  else
  {
    *(_DWORD *)(result + 336) = 16;
    uint64_t v3 = (unsigned int *)(result + 13280);
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 12896;
  uint64_t v6 = &unk_1E9F81000;
  double v7 = 1000.0;
  double v8 = 0.125;
  double v9 = 0.875;
  do
  {
    int v10 = *(_DWORD *)(result + 4 * v4 + 340);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F81D70, memory_order_acquire) & 1) == 0)
    {
      uint64_t v35 = a2;
      uint64_t v37 = result;
      uint64_t v33 = v3;
      unint64_t v29 = v4;
      uint64_t v30 = v5;
      double v31 = v7;
      int v32 = v10;
      int v15 = __cxa_guard_acquire(&qword_1E9F81D70);
      int v10 = v32;
      double v9 = 0.875;
      double v8 = 0.125;
      double v7 = v31;
      uint64_t v6 = (void *)&unk_1E9F81000;
      unint64_t v4 = v29;
      uint64_t v5 = v30;
      uint64_t v3 = v33;
      a2 = v35;
      int v16 = v15;
      uint64_t result = v37;
      if (v16)
      {
        __cxa_atexit((void (*)(void *))sub_1BBA1D9D4, &qword_1E9F81D60, &dword_1BB9B9000);
        __cxa_guard_release(&qword_1E9F81D70);
        int v10 = v32;
        double v9 = 0.875;
        double v8 = 0.125;
        double v7 = v31;
        uint64_t v6 = (void *)&unk_1E9F81000;
        unint64_t v4 = v29;
        uint64_t v5 = v30;
        uint64_t v3 = v33;
        a2 = v35;
        uint64_t result = v37;
      }
    }
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *(void *)(v5 + v11);
      if (v12)
      {
        if (*(_DWORD *)(v12 + 8) == v10) {
          break;
        }
      }
      v11 += 16;
      if (v11 == 272)
      {
        uint64_t v12 = v6[428];
        if (!v12) {
          goto LABEL_15;
        }
        break;
      }
    }
    if ((*(_DWORD *)(v12 + 40) | 2) == 3)
    {
      *(_DWORD *)(v12 + 40) = 2;
      double v13 = (double)*(uint64_t *)a2 * v7 / (double)*(int *)(a2 + 8)
          - (double)*(uint64_t *)(v12 + 16) * v7 / (double)*(int *)(v12 + 32);
      double v14 = *(double *)(result + 408);
      if (v14 > 0.0) {
        double v13 = v13 * v8 + v14 * v9;
      }
      *(double *)(result + 408) = v13;
    }
LABEL_15:
    ++v4;
  }
  while (v4 < *(unsigned int *)(result + 336));
LABEL_19:
  int v17 = *(_DWORD *)(result + 404);
  if (v17 < 0x10000)
  {
    double v19 = *(double *)(result + 408);
    if (v19 > 0.0) {
      unsigned int v18 = v19;
    }
    else {
      unsigned int v18 = 2000;
    }
  }
  else
  {
    unsigned int v18 = HIWORD(v17);
  }
  *uint64_t v3 = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F81DA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v36 = a2;
    uint64_t v38 = result;
    int v34 = v3;
    int v27 = __cxa_guard_acquire(&qword_1E9F81DA0);
    uint64_t v3 = v34;
    a2 = v36;
    int v28 = v27;
    uint64_t result = v38;
    if (v28)
    {
      __cxa_atexit((void (*)(void *))sub_1BBA1D9D4, &unk_1E9F81D90, &dword_1BB9B9000);
      __cxa_guard_release(&qword_1E9F81DA0);
      uint64_t v3 = v34;
      a2 = v36;
      uint64_t result = v38;
    }
  }
  uint64_t v20 = 0;
  int v21 = (uint64_t *)(result + 12896);
  int v22 = 0x7FFFFFFF;
  int v23 = 0x7FFFFFFF;
  do
  {
    uint64_t v24 = *v21;
    if (*v21 && *(_DWORD *)(v24 + 680) < v23 && *(_DWORD *)(v24 + 40) == 1)
    {
      int v23 = *(_DWORD *)(v24 + 680);
      int v22 = v20;
    }
    ++v20;
    v21 += 2;
  }
  while (v20 != 17);
  if (v22 == 0x7FFFFFFF) {
    uint64_t v25 = (uint64_t *)&unk_1E9F81D90;
  }
  else {
    uint64_t v25 = (uint64_t *)(result + 16 * v22 + 12896);
  }
  uint64_t v26 = *v25;
  if (v26)
  {
    if ((int)(float)((float)((float)((float)*(uint64_t *)a2 * 1000.0) / (float)*(int *)(a2 + 8))
                    - (float)((float)((float)*(uint64_t *)(v26 + 16) * 1000.0) / (float)*(int *)(v26 + 32))) > (int)(2 * *v3))
      *(_DWORD *)(v26 + 40) = 3;
  }
  return result;
}

void *sub_1BBA5DBE8(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v4) {
    sub_1BB9C09B4(v4);
  }
  return a1;
}

void *sub_1BBA5DC2C(void *a1)
{
  sub_1BBA59368((uint64_t)a1);
  uint64_t v2 = a1[1591];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[1591] = 0;
  uint64_t v3 = a1[1592];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  a1[1592] = 0;
  if (*((unsigned char *)a1 + 1016))
  {
    uint64_t v4 = a1[1593];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    a1[1593] = 0;
  }
  uint64_t v5 = (void *)a1[1594];
  if (v5)
  {
    uint64_t v6 = (void **)(v5 + 2);
    while (1)
    {
      uint64_t v7 = v5[7];
      if (!v7) {
        break;
      }
      uint64_t v8 = v7 - 1;
      uint64_t v9 = *(void *)(*(void *)(v5[3] + (((unint64_t)(v8 + v5[6]) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v8 + v5[6]) & 0x1FF));
      if (v9)
      {
        uint64_t v10 = sub_1BBA6557C(v9);
        MEMORY[0x1C18605E0](v10, 0x10F2C404913AAE3);
        uint64_t v8 = v5[7] - 1;
      }
      v5[7] = v8;
      sub_1BBA566AC(v5 + 2);
    }
    uint64_t v11 = v5[8];
    if (v11) {
      dispatch_release(v11);
    }
    uint64_t v12 = (void **)v5[3];
    double v13 = (void **)v5[4];
    v5[7] = 0;
    unint64_t v14 = (char *)v13 - (char *)v12;
    if ((unint64_t)((char *)v13 - (char *)v12) >= 0x11)
    {
      do
      {
        operator delete(*v12);
        double v13 = (void **)v5[4];
        uint64_t v12 = (void **)(v5[3] + 8);
        v5[3] = v12;
        unint64_t v14 = (char *)v13 - (char *)v12;
      }
      while ((unint64_t)((char *)v13 - (char *)v12) > 0x10);
    }
    unint64_t v15 = v14 >> 3;
    if (v15 == 1)
    {
      uint64_t v16 = 256;
    }
    else
    {
      if (v15 != 2) {
        goto LABEL_24;
      }
      uint64_t v16 = 512;
    }
    v5[6] = v16;
LABEL_24:
    if (v12 != v13)
    {
      do
      {
        int v17 = *v12++;
        operator delete(v17);
      }
      while (v12 != v13);
      uint64_t v19 = v5[3];
      uint64_t v18 = v5[4];
      if (v18 != v19) {
        v5[4] = v18 + ((v19 - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    if (*v6) {
      operator delete(*v6);
    }
    uint64_t v20 = (std::__shared_weak_count *)v5[1];
    if (v20) {
      sub_1BB9C09B4(v20);
    }
    MEMORY[0x1C18605E0](v5, 0x10A0C409208CD08);
    a1[1594] = 0;
  }
  int v21 = (void *)a1[1657];
  if (v21)
  {
    uint64_t v22 = v21[49];
    if (*(int *)(v22 + 560) >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = v21 + 106;
      do
      {
        uint64_t v25 = v24[v23];
        if (v25)
        {
          uint64_t v26 = sub_1BBAAA07C(v25);
          MEMORY[0x1C18605E0](v26, 0x1060C4062CB64C1);
          uint64_t v22 = v21[49];
        }
        v24[v23++] = 0;
      }
      while (v23 < *(int *)(v22 + 560));
    }
    uint64_t v27 = v21[113];
    if (v27)
    {
      uint64_t v28 = sub_1BBAAA07C(v27);
      MEMORY[0x1C18605E0](v28, 0x1060C4062CB64C1);
    }
    v21[113] = 0;
    uint64_t v29 = v21[43];
    if (v29)
    {
      MEMORY[0x1C18605E0](v29, 0x1000C40A5C9D646);
      v21[43] = 0;
    }
    uint64_t v30 = v21[48];
    if (v30)
    {
      uint64_t v31 = sub_1BBAAA944(v30);
      MEMORY[0x1C18605E0](v31, 0xA0C409BE6959DLL);
      v21[48] = 0;
    }
    if (v21[90])
    {
      int v32 = (uint64_t *)v21[89];
      uint64_t v33 = v21[88];
      uint64_t v34 = *v32;
      *(void *)(v34 + 8) = *(void *)(v33 + 8);
      **(void **)(v33 + 8) = v34;
      v21[90] = 0;
      if (v32 != v21 + 88)
      {
        do
        {
          uint64_t v35 = (uint64_t *)v32[1];
          operator delete(v32);
          int v32 = v35;
        }
        while (v35 != v21 + 88);
      }
    }
    sub_1BB9C83D4(v21 + 85);
    sub_1BB9C83D4(v21 + 82);
    sub_1BB9D54F8((uint64_t)(v21 + 72));
    sub_1BB9D54F8((uint64_t)(v21 + 66));
    sub_1BB9D54F8((uint64_t)(v21 + 60));
    uint64_t v36 = (std::__shared_weak_count *)v21[47];
    if (v36) {
      sub_1BB9C09B4(v36);
    }
    MEMORY[0x1C18605E0](v21, 0x10E0C40F3C4BCA6);
    a1[1657] = 0;
  }
  uint64_t v37 = a1[6];
  if (v37)
  {
    sub_1BBA56634((uint64_t *)(v37 + 128));
    sub_1BBA56634((uint64_t *)(v37 + 176));
    sub_1BBA56634((uint64_t *)(v37 + 200));
    uint64_t v38 = *(void **)(v37 + 120);
    if (!v38)
    {
LABEL_76:
      sub_1BBA56634((uint64_t *)(v37 + 200));
      sub_1BBA56634((uint64_t *)(v37 + 176));
      sub_1BBA56634((uint64_t *)(v37 + 152));
      sub_1BBA56634((uint64_t *)(v37 + 128));
      std::mutex::~mutex((std::mutex *)(v37 + 56));
      MEMORY[0x1C18605E0](v37, 0x1060C4065670AC2);
      a1[6] = 0;
      goto LABEL_77;
    }
    int v39 = (void **)(v38 + 2);
    while (1)
    {
      uint64_t v40 = v38[7];
      if (!v40) {
        break;
      }
      uint64_t v41 = v40 - 1;
      uint64_t v42 = *(void *)(*(void *)(v38[3] + (((unint64_t)(v41 + v38[6]) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v41 + v38[6]) & 0x1FF));
      if (v42)
      {
        MEMORY[0x1C18605E0](v42, 0x1000C40DFA26CF1);
        uint64_t v41 = v38[7] - 1;
      }
      v38[7] = v41;
      sub_1BBA566AC(v38 + 2);
    }
    int v43 = v38[8];
    if (v43) {
      dispatch_release(v43);
    }
    int v44 = (void **)v38[3];
    int v45 = (void **)v38[4];
    v38[7] = 0;
    unint64_t v46 = (char *)v45 - (char *)v44;
    if ((unint64_t)((char *)v45 - (char *)v44) >= 0x11)
    {
      do
      {
        operator delete(*v44);
        int v45 = (void **)v38[4];
        int v44 = (void **)(v38[3] + 8);
        v38[3] = v44;
        unint64_t v46 = (char *)v45 - (char *)v44;
      }
      while ((unint64_t)((char *)v45 - (char *)v44) > 0x10);
    }
    unint64_t v47 = v46 >> 3;
    if (v47 == 1)
    {
      uint64_t v48 = 256;
    }
    else
    {
      if (v47 != 2) {
        goto LABEL_67;
      }
      uint64_t v48 = 512;
    }
    v38[6] = v48;
LABEL_67:
    if (v44 != v45)
    {
      do
      {
        double v49 = *v44++;
        operator delete(v49);
      }
      while (v44 != v45);
      uint64_t v51 = v38[3];
      uint64_t v50 = v38[4];
      if (v50 != v51) {
        v38[4] = v50 + ((v51 - v50 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    if (*v39) {
      operator delete(*v39);
    }
    uint64_t v52 = (std::__shared_weak_count *)v38[1];
    if (v52) {
      sub_1BB9C09B4(v52);
    }
    MEMORY[0x1C18605E0](v38, 0x10A0C409208CD08);
    *(void *)(v37 + 120) = 0;
    goto LABEL_76;
  }
LABEL_77:
  uint64_t v53 = a1[1];
  if (v53)
  {
    int v54 = *(const void **)(v53 + 4264);
    if (v54)
    {
      CFRelease(v54);
      *(void *)(v53 + 4264) = 0;
    }
    sub_1BBA593D0((const void ***)(v53 + 4256), 0);
    MEMORY[0x1C18605E0](v53, 0x10B0C4096840F05);
  }
  if (*a1) {
    (*(void (**)(void))(*(void *)*a1 + 272))(*a1);
  }
  uint64_t v55 = (FILE *)a1[2];
  if (v55) {
    fclose(v55);
  }
  uint64_t v56 = a1[1658];
  if (v56)
  {
    sub_1BBA593D0((const void ***)(v56 + 32), 0);
    MEMORY[0x1C18605E0](v56, 0x10A0C40B25BD57ELL);
  }
  uint64_t v57 = a1[1659];
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  a1[1659] = 0;
  int v58 = (FILE *)a1[12];
  if (v58)
  {
    int v59 = (void *)MEMORY[0x1E4F143D8];
    if (v58 != (FILE *)*MEMORY[0x1E4F143D8])
    {
      fclose(v58);
      a1[12] = *v59;
    }
  }
  int v60 = (FILE *)a1[11];
  if (v60) {
    fclose(v60);
  }
  int v61 = (FILE *)a1[14];
  if (v61) {
    fclose(v61);
  }
  uint64_t v62 = (FILE *)a1[13];
  if (v62) {
    fclose(v62);
  }
  int v63 = (const void *)a1[139];
  if (v63) {
    CFRelease(v63);
  }
  uint64_t v64 = a1[146];
  if (v64)
  {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
    a1[146] = 0;
  }
  for (uint64_t i = 0; i != -34; i -= 2)
  {
    uint64_t v66 = (std::__shared_weak_count *)a1[i + 1645];
    if (v66) {
      sub_1BB9C09B4(v66);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1601));
  int v67 = (void **)a1[1596];
  int v68 = (void **)a1[1597];
  if (v68 == v67)
  {
    int v73 = a1 + 1600;
    int v68 = (void **)a1[1596];
  }
  else
  {
    unint64_t v69 = a1[1599];
    int v70 = &v67[v69 >> 8];
    uint64_t v71 = (uint64_t)*v70;
    uint64_t v72 = (uint64_t)*v70 + 16 * v69;
    int v73 = a1 + 1600;
    uint64_t v74 = *(uint64_t *)((char *)v67 + (((a1[1600] + v69) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a1 + 12800) + v69);
    if (v72 != v74)
    {
      do
      {
        int v75 = *(std::__shared_weak_count **)(v72 + 8);
        if (v75)
        {
          sub_1BB9C09B4(v75);
          uint64_t v71 = (uint64_t)*v70;
        }
        v72 += 16;
        if (v72 - v71 == 4096)
        {
          uint64_t v76 = (uint64_t)v70[1];
          ++v70;
          uint64_t v71 = v76;
          uint64_t v72 = v76;
        }
      }
      while (v72 != v74);
      int v68 = (void **)a1[1597];
      int v67 = (void **)a1[1596];
    }
  }
  *int v73 = 0;
  unint64_t v77 = (char *)v68 - (char *)v67;
  if ((unint64_t)((char *)v68 - (char *)v67) >= 0x11)
  {
    do
    {
      operator delete(*v67);
      int v67 = (void **)(a1[1596] + 8);
      a1[1596] = v67;
      int v68 = (void **)a1[1597];
      unint64_t v77 = (char *)v68 - (char *)v67;
    }
    while ((unint64_t)((char *)v68 - (char *)v67) > 0x10);
  }
  unint64_t v78 = v77 >> 3;
  if (v78 == 1)
  {
    uint64_t v79 = 128;
    goto LABEL_121;
  }
  if (v78 == 2)
  {
    uint64_t v79 = 256;
LABEL_121:
    a1[1599] = v79;
  }
  if (v67 != v68)
  {
    do
    {
      double v80 = *v67++;
      operator delete(v80);
    }
    while (v67 != v68);
    uint64_t v81 = a1[1596];
    uint64_t v82 = a1[1597];
    if (v82 != v81) {
      a1[1597] = v82 + ((v81 - v82 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  BOOL v83 = (void *)a1[1595];
  if (v83) {
    operator delete(v83);
  }
  uint64_t v84 = (std::__shared_weak_count *)a1[1589];
  if (v84) {
    sub_1BB9C09B4(v84);
  }
  uint64_t v85 = (std::__shared_weak_count *)a1[1587];
  if (v85) {
    sub_1BB9C09B4(v85);
  }
  size_t v86 = (std::__shared_weak_count *)a1[1585];
  if (v86) {
    sub_1BB9C09B4(v86);
  }
  int v87 = (std::__shared_weak_count *)a1[1583];
  if (v87) {
    sub_1BB9C09B4(v87);
  }
  unsigned int v88 = (std::__shared_weak_count *)a1[1581];
  if (v88) {
    sub_1BB9C09B4(v88);
  }
  size_t v89 = (std::__shared_weak_count *)a1[1579];
  if (v89) {
    sub_1BB9C09B4(v89);
  }
  for (uint64_t j = 0; j != -128; j -= 2)
  {
    uint64_t v91 = (std::__shared_weak_count *)a1[j + 1577];
    if (v91) {
      sub_1BB9C09B4(v91);
    }
  }
  for (uint64_t k = 0; k != -32; k -= 2)
  {
    BOOL v93 = (std::__shared_weak_count *)a1[k + 1449];
    if (v93) {
      sub_1BB9C09B4(v93);
    }
  }
  for (uint64_t m = 0; m != -32; m -= 2)
  {
    uint64_t v95 = (std::__shared_weak_count *)a1[m + 1417];
    if (v95) {
      sub_1BB9C09B4(v95);
    }
  }
  a1[398] = &unk_1F14EDE48;
  uint64_t v96 = (void *)a1[399];
  if (v96)
  {
    do
    {
      __int16 v97 = (void *)v96[1];
      (*(void (**)(void *))(*v96 + 16))(v96);
      uint64_t v96 = v97;
    }
    while (v97);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 131));
  sub_1BBA56634(a1 + 128);
  uint64_t v98 = (std::__shared_weak_count *)a1[10];
  if (v98) {
    sub_1BB9C09B4(v98);
  }
  int v99 = (std::__shared_weak_count *)a1[8];
  if (v99) {
    sub_1BB9C09B4(v99);
  }
  char v100 = (void *)a1[3];
  if (v100)
  {
    free(v100);
    a1[3] = 0;
    a1[4] = 0;
  }
  return a1;
}

void sub_1BBA5E54C(uint64_t a1, CFStringRef theString)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    uint64_t v9 = (char *)v48 - ((MEMORY[0x1F4188790](Length, v5, Length + 1, v6, v7, v8) + 16) & 0xFFFFFFFFFFFFFFF0);
    CFStringGetCString(theString, v9, v10, 0);
    sub_1BB9D08B8(&v49, v9);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      sub_1BBA3CD68(&__str, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = v49;
    }
    sub_1BB9D08B8(&v54, " ");
    v48[1] = v48;
    v48[0] = a1 + 3184;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unint64_t v53 = 0;
    while (1)
    {
      int64_t v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      int v12 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
      double v13 = (void *)__str.__r_.__value_.__r.__words[0];
      unint64_t v14 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      unint64_t v15 = (v56 & 0x80u) == 0 ? (void **)&v54 : v54;
      int64_t v16 = (v56 & 0x80u) == 0 ? v56 : v55;
      if (v16) {
        break;
      }
      std::string::size_type v24 = 0;
LABEL_28:
      std::string::basic_string(&v50, &__str, 0, v24, (std::allocator<char> *)&v58);
      uint64_t v25 = v52;
      if ((unint64_t)v52 >= v53)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v52[-v51] >> 3);
        unint64_t v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1BB9C185C();
        }
        if (0x5555555555555556 * ((uint64_t)(v53 - v51) >> 3) > v28) {
          unint64_t v28 = 0x5555555555555556 * ((uint64_t)(v53 - v51) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v51) >> 3) >= 0x555555555555555) {
          unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v29 = v28;
        }
        uint64_t v62 = &v53;
        if (v29) {
          unint64_t v29 = (unint64_t)sub_1BBA41324(v29);
        }
        else {
          uint64_t v30 = 0;
        }
        unint64_t v31 = v29 + 24 * v27;
        int v58 = (void **)v29;
        unint64_t v59 = v31;
        int v61 = (void **)(v29 + 24 * v30);
        long long v32 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
        *(void *)(v31 + 16) = *((void *)&v50.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v31 = v32;
        memset(&v50, 0, sizeof(v50));
        int v60 = (void **)(v31 + 24);
        sub_1BBA4136C(&v51, &v58);
        uint64_t v33 = v52;
        sub_1BBA413F0((uint64_t)&v58);
        uint64_t v52 = v33;
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v26 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
        *((void *)v52 + 2) = *((void *)&v50.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v25 = v26;
        uint64_t v52 = v25 + 24;
      }
      uint64_t v34 = v56;
      if ((v56 & 0x80u) != 0) {
        uint64_t v34 = v55;
      }
      std::string::erase(&__str, 0, v34 + v24);
    }
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v11 = __str.__r_.__value_.__l.__size_;
    }
    if (v11 >= v16)
    {
      uint64_t v18 = (char *)v14 + v11;
      int v19 = *(char *)v15;
      uint64_t v20 = v14;
      do
      {
        int64_t v21 = v11 - v16;
        if (v21 == -1) {
          break;
        }
        uint64_t v22 = (char *)memchr(v20, v19, v21 + 1);
        if (!v22) {
          break;
        }
        uint64_t v23 = v22;
        if (!memcmp(v22, v15, v16))
        {
          if (v23 == v18) {
            break;
          }
          std::string::size_type v24 = v23 - (char *)v14;
          if (v23 - (char *)v14 == -1) {
            break;
          }
          goto LABEL_28;
        }
        uint64_t v20 = (std::string *)(v23 + 1);
        int64_t v11 = v18 - (v23 + 1);
      }
      while (v11 >= v16);
    }
    uint64_t v35 = v52;
    if ((unint64_t)v52 >= v53)
    {
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v52[-v51] >> 3);
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1BB9C185C();
      }
      unint64_t v38 = 0x5555555555555556 * ((uint64_t)(v53 - v51) >> 3);
      if (v38 <= v37 + 1) {
        unint64_t v38 = v37 + 1;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v51) >> 3) >= 0x555555555555555) {
        unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v39 = v38;
      }
      uint64_t v62 = &v53;
      if (v39)
      {
        uint64_t v40 = (void **)sub_1BBA41324(v39);
        uint64_t v42 = v48[0];
        int v43 = v40;
        LOBYTE(v12) = *((unsigned char *)&__str.__r_.__value_.__s + 23);
      }
      else
      {
        int v43 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = v48[0];
      }
      int v45 = &v43[3 * v37];
      int v58 = v43;
      unint64_t v59 = (unint64_t)v45;
      int v60 = v45;
      int v61 = &v43[3 * v41];
      if ((v12 & 0x80) != 0)
      {
        sub_1BBA3CD68(v45, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        int v45 = v60;
      }
      else
      {
        long long v46 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        _OWORD v45[2] = (void *)__str.__r_.__value_.__r.__words[2];
        *(_OWORD *)int v45 = v46;
      }
      int v60 = v45 + 3;
      sub_1BBA4136C(&v51, &v58);
      int v44 = v52;
      sub_1BBA413F0((uint64_t)&v58);
    }
    else
    {
      if (v12 < 0)
      {
        sub_1BBA3CD68(v52, v13, size);
      }
      else
      {
        long long v36 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *((void *)v52 + 2) = *((void *)&__str.__r_.__value_.__l + 2);
        *uint64_t v35 = v36;
      }
      uint64_t v42 = v48[0];
      int v44 = (char *)v35 + 24;
    }
    uint64_t v52 = v44;
    int v47 = sub_1BBA41094(v42, &v51);
    int v58 = (void **)&v51;
    sub_1BBA41454(&v58);
    if ((char)v56 < 0) {
      operator delete(v54);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v47) {
        goto LABEL_69;
      }
    }
    else if (v47)
    {
      goto LABEL_69;
    }
    sub_1BBA6E620(v42);
LABEL_69:
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BBA5EA14(_Unwind_Exception *a1)
{
  sub_1BBA413F0(v1 - 136);
  *(void *)(v1 - 232) = v1 - 208;
  sub_1BBA41454((void ***)(v1 - 232));
  if (*(char *)(v1 - 161) < 0) {
    operator delete(*(void **)(v1 - 184));
  }
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 233) < 0) {
    operator delete(*(void **)(v1 - 256));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA5EABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 11056);
  uint64_t v5 = a1 + 3184;
  int v6 = *(char *)(a2 + 12);
  *(_DWORD *)(a1 + 3248) = v6;
  *(unsigned char *)(a1 + 3252) = *(unsigned char *)(a2 + 1120);
  *(_DWORD *)(a1 + 3692) = *(_DWORD *)(a2 + 40);
  if (v6 > 41)
  {
    if (v6 == 42)
    {
      sub_1BBA6DCA0(a1 + 3184);
    }
    else if (v6 == 43)
    {
      sub_1BBA6E0F4(a1 + 3184);
    }
  }
  else if (v6 == 1)
  {
    sub_1BBA6DB50(a1 + 3184);
  }
  else if (v6 == 39)
  {
    sub_1BBA6DEC4(a1 + 3184);
  }
  int v7 = *(_DWORD *)(a1 + 3248);
  if (v7 == 38)
  {
    sub_1BBA6DFD8(v5);
  }
  else if (v7 == 20)
  {
    sub_1BBA6DDB4(v5);
  }
  *(unsigned char *)(a1 + 3786) = *(_DWORD *)(a2 + 40) == 2;
  *(_DWORD *)(a1 + 3364) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 3280) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 3274) = *(_DWORD *)(a2 + 14);
  *(_DWORD *)(a1 + 3688) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 3432) = *(unsigned char *)(a2 + 44);
  *(void *)(a1 + 3776) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 3360) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 3340) = *(void *)a2;
  *(_DWORD *)(a1 + 3348) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 3724) = *(_DWORD *)(a2 + 1064);
  *(void *)(a1 + 11016) = -1;
  *(void *)(a1 + 11008) = -1;
  memset_pattern16((void *)(a1 + 11024), &unk_1BBB701A0, 0x10uLL);
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(_OWORD *)(a1 + 11040) = v8;
  *uint64_t v4 = 0;
  LODWORD(v9) = *(_DWORD *)(a2 + 1068);
  if ((int)v9 >= 2)
  {
    *(unsigned char *)(a1 + 3288) = v9;
    if ((int)(v9 << 24) >= 1)
    {
      uint64_t v10 = 0;
      if (v9 <= 1u) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v9;
      }
      char v11 = 1;
LABEL_20:
      int v12 = (int *)(a2 + 1104 + 4 * v10);
      double v13 = (int *)(a1 + 11040 + 4 * v10);
      do
      {
        int v14 = *(v12 - 8);
        *(v13 - 8) = v14;
        int v15 = *(v12 - 4);
        *(v13 - 4) = v15;
        int v16 = *v12;
        *double v13 = *v12;
        if (v14 != -1 || v15 != -13 || v16 != -1)
        {
          char v11 = 0;
          *uint64_t v4 = 1;
          if (++v10 != v9) {
            goto LABEL_20;
          }
          goto LABEL_34;
        }
        ++v12;
        ++v10;
        ++v13;
      }
      while (v9 != v10);
      if (v11) {
        goto LABEL_35;
      }
LABEL_34:
      *(unsigned char *)(a1 + 3308) = 1;
    }
  }
LABEL_35:
  char v20 = 0;
  uint64_t result = sub_1BBA40F94(*(void *)(a1 + 3192), 0x75909A2E7B7A5950, (char *)(a2 + 60), 0, (uint64_t)&v20);
  if (!result)
  {
    return sub_1BBA6E620(v5);
  }
  return result;
}

uint64_t sub_1BBA5ED34(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x10uLL, "%d", a3);
  char v6 = 0;
  return sub_1BBA40F94(*(void *)(a1 + 3192), a2, __str, 0, (uint64_t)&v6);
}

uint64_t sub_1BBA5EDC0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x10uLL, "%u", a3);
  char v6 = 0;
  return sub_1BBA40F94(*(void *)(a1 + 3192), a2, __str, 0, (uint64_t)&v6);
}

uint64_t sub_1BBA5EE4C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x10uLL, "%f", a3);
  char v6 = 0;
  return sub_1BBA40F94(*(void *)(a1 + 3192), a2, __str, 0, (uint64_t)&v6);
}

uint64_t sub_1BBA5EED8(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1BBAB06D8((char *)a1[439], 1, *((unsigned int *)a1 + 812), *((unsigned int *)a1 + 922));
  *a1 = v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string __str = 0;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Negotiation details unit creation failed.", (uint8_t *)__str, 2u);
    }
    return 4294954392;
  }
  int v3 = *((_DWORD *)a1 + 812);
  if (v3 == 39)
  {
    if ((*(unsigned int (**)(void *))*v2)(v2)) {
      (*(void (**)(void))(*(void *)*a1 + 288))(*a1);
    }
    int v3 = *((_DWORD *)a1 + 812);
  }
  if (v3 == 43 && (**(unsigned int (***)(void))*a1)())
  {
    snprintf(__str, 0x10uLL, "%d", 1);
    LOBYTE(v9) = 0;
    sub_1BBA40F94(a1[399], 0xDA7CA283D396F91BLL, __str, 0, (uint64_t)&v9);
    snprintf(__str, 0x10uLL, "%d", 1);
    LOBYTE(v9) = 0;
    sub_1BBA40F94(a1[399], 0xAF63EE4C86020B22, __str, 0, (uint64_t)&v9);
  }
  if (*((int *)a1 + 936) >= 2)
  {
    snprintf(__str, 0x10uLL, "%d", 0);
    LOBYTE(v9) = 0;
    sub_1BBA40F94(a1[399], 0xDA7CA283D396F91BLL, __str, 0, (uint64_t)&v9);
    if (*((_DWORD *)a1 + 812) == 43) {
      goto LABEL_16;
    }
    snprintf(__str, 0x10uLL, "%d", 2);
    LOBYTE(v9) = 0;
    sub_1BBA40F94(a1[399], 0x6FBB85DC095D7E1, __str, 0, (uint64_t)&v9);
  }
  if (*((_DWORD *)a1 + 812) == 20 && (*((int *)a1 + 936) > 1 || (*(unsigned int (**)(void))(*(void *)*a1 + 16))()))
  {
    snprintf(__str, 0x10uLL, "%d", 1);
    LOBYTE(v9) = 0;
    sub_1BBA40F94(a1[399], 0xDA7CA283D396F91BLL, __str, 0, (uint64_t)&v9);
    snprintf(__str, 0x10uLL, "%d", 6);
    LOBYTE(v9) = 0;
    sub_1BBA40F94(a1[399], 0x70A12C1952D5628BLL, __str, 0, (uint64_t)&v9);
  }
LABEL_16:
  if (*((unsigned char *)a1 + 1016) || !sub_1BBA13EC4(*((_DWORD *)a1 + 250)))
  {
    (*(void (**)(void))(*(void *)*a1 + 288))(*a1);
    (*(void (**)(void))(*(void *)*a1 + 296))(*a1);
    snprintf(__str, 0x10uLL, "%d", 0);
    LOBYTE(v9) = 0;
    sub_1BBA40F94(a1[399], 0x70A12C1952D5628BLL, __str, 0, (uint64_t)&v9);
  }
  if (!(**(unsigned int (***)(void))*a1)() || *((unsigned char *)a1 + 3242) || *((_DWORD *)a1 + 936) != 1)
  {
    uint64_t v5 = operator new(0x48uLL, MEMORY[0x1E4FBA2D0]);
    if (v5)
    {
      char v6 = v5;
      v5[8] = 0;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)uint64_t v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
      a1[1594] = v5;
      int v7 = operator new(8uLL, MEMORY[0x1E4FBA2D0]);
      if (v7)
      {
        *int v7 = v6;
        operator new();
      }
      operator new();
    }
    a1[1594] = 0;
    return 4294954392;
  }
  return 4294954394;
}

void sub_1BBA5FD90(_Unwind_Exception *a1)
{
  MEMORY[0x1C18605C0](v1, MEMORY[0x1E4FBA2D0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA5FDF8(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(a2 + 168) = a3;
  *(_WORD *)(a2 + 169) = 256;
  sub_1BBA55260(a2, a1 + 3184);
  LOBYTE(v5) = 0;
  *(_WORD *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 171) = 0;
  uint64_t v6 = *(unsigned __int8 *)(a2 + 169);
  if (*(int *)(a1 + 3488) >= 2) {
    int v5 = *(_DWORD *)(a1 + 3492);
  }
  unsigned int v7 = *(unsigned __int8 *)(a2 + 12 * *(unsigned __int8 *)(a2 + 169) + 76);
  if (*(char *)(a1 + 3333) + *(char *)(a1 + 3334) + 1 > v7) {
    return 4294954387;
  }
  uint64_t result = 0;
  uint64_t v9 = a2 + v6;
  *(unsigned char *)(v9 + 172) = v7 - 1;
  *(unsigned char *)(v9 + 179) = v5;
  *(_DWORD *)(a2 + 4 * v6 + 188) = 0;
  *(unsigned char *)(a2 + 216) = 0;
  *(_WORD *)(a2 + 218) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(unsigned char *)(a2 + 262) = 0;
  return result;
}

uint64_t sub_1BBA5FEAC(uint64_t a1, uint64_t a2, int a3, char a4)
{
  *(unsigned char *)a2 = a4;
  *(_WORD *)(a2 + 1) = 256;
  sub_1BBA55260(a2 + 4, a1 + 3184);
  *(_WORD *)(a2 + 68) = 0;
  *(unsigned char *)(a2 + 172) = a3;
  int v7 = *(_DWORD *)(a1 + 1000);
  char v8 = 3;
  if (v7 > 1278226487)
  {
    if (v7 <= 1751411058)
    {
      if (v7 == 1278226488)
      {
LABEL_16:
        char v8 = 0;
        goto LABEL_18;
      }
      int v9 = 1278226736;
    }
    else
    {
      if (v7 == 2019963956 || v7 == 2016687156) {
        goto LABEL_18;
      }
      int v9 = 1751411059;
    }
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  if (v7 > 875836517)
  {
    if (v7 == 875836518) {
      goto LABEL_18;
    }
    int v10 = 875836534;
  }
  else
  {
    if (v7 == 645424692) {
      goto LABEL_18;
    }
    int v10 = 645428788;
  }
  if (v7 != v10) {
LABEL_17:
  }
    char v8 = 1;
LABEL_18:
  *(unsigned char *)(a2 + 173) = v8;
  *(unsigned char *)(a2 + 174) = 0;
  *(unsigned char *)(a2 + 194) = *(unsigned char *)(a1 + 3498) - 8;
  *(unsigned char *)(a2 + 195) = *(unsigned char *)(a1 + 3499) - 8;
  if (*(char *)(a1 + 3334) <= 0) {
    char v11 = 6;
  }
  else {
    char v11 = 12;
  }
  *(unsigned char *)(a2 + 196) = v11;
  *(unsigned char *)(a2 + 197) = 0;
  uint64_t v12 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v13 = a2 + v12;
  *(unsigned char *)(v13 + 198) = *(unsigned char *)(*(void *)(a1 + 12672) + v12 + 172);
  *(unsigned char *)(v13 + 205) = *(unsigned char *)(*(void *)(a1 + 12672) + v12 + 179);
  *(_DWORD *)(a2 + 4 * v12 + 212) = 0;
  LOBYTE(v12) = *(unsigned char *)(a1 + 3352);
  *(unsigned char *)(a2 + 240) = v12 - 3;
  *(unsigned char *)(a2 + 241) = *(unsigned char *)(a1 + 3353) - v12;
  LOBYTE(v12) = *(unsigned char *)(a1 + 3354);
  *(unsigned char *)(a2 + 242) = v12 - 2;
  *(unsigned char *)(a2 + 243) = *(unsigned char *)(a1 + 3355) - v12;
  *(unsigned char *)(a2 + 244) = *(unsigned char *)(a1 + 3357);
  *(unsigned char *)(a2 + 245) = *(unsigned char *)(a1 + 3356);
  *(unsigned char *)(a2 + 246) = 0;
  *(unsigned char *)(a2 + 248) = 0;
  *(unsigned char *)(a2 + 249) = *(unsigned char *)(a1 + 3418) != 0;
  *(unsigned char *)(a2 + 250) = 0;
  *(_DWORD *)(a2 + 260) = *(_DWORD *)(a1 + 10724) + *(_DWORD *)(a1 + 10728);
  *(unsigned char *)(a2 + 280) = *(char *)(a1 + 3334) > 0;
  *(unsigned char *)(a2 + 322) = *(unsigned char *)(a1 + 3430);
  *(unsigned char *)(a2 + 323) = 0;
  int v14 = *(_DWORD *)(a1 + 3608);
  *(_WORD *)(a2 + 1896) = v14;
  int v15 = *(_DWORD *)(a1 + 3612);
  *(_WORD *)(a2 + 1898) = v15;
  int v16 = *(unsigned __int8 *)(a1 + 3596);
  *(unsigned char *)(a2 + 1903) = v16;
  __int16 v17 = *(_WORD *)(a1 + 3600);
  *(unsigned char *)(a2 + 1904) = v17;
  __int16 v18 = *(_WORD *)(a1 + 3602);
  *(unsigned char *)(a2 + 1905) = v18;
  __int16 v19 = *(_WORD *)(a1 + 3604);
  *(unsigned char *)(a2 + 1906) = v19;
  __int16 v20 = *(_WORD *)(a1 + 3598);
  *(unsigned char *)(a2 + 1907) = v20;
  *(unsigned char *)(a2 + 1908) = v20;
  unsigned int v21 = *(_DWORD *)(a1 + 1000);
  int32x4_t v22 = vdupq_n_s32(v21);
  int16x8_t v23 = (int16x8_t)vceqq_s32(v22, (int32x4_t)xmmword_1BBB6F940);
  v22.i32[3] = v21 & 0xFFBFFFFB;
  if (vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16(v23, (int16x8_t)vceqq_s32(v22, (int32x4_t)xmmword_1BBB6F930)))))
  {
    int v16 = 1;
    *(unsigned char *)(a2 + 1903) = 1;
  }
  if ((unsigned __int16)v14 | (unsigned __int16)v15 || *(unsigned char *)(a2 + 1900) || *(unsigned char *)(a2 + 1901)) {
    goto LABEL_26;
  }
  BOOL v24 = 1;
  if (*(unsigned char *)(a2 + 1902) == 5
    && !v16
    && v17 == 2
    && v18 == 2
    && v19 == 2
    && !(_BYTE)v20)
  {
    if (*(unsigned char *)(a2 + 1909)
      || *(unsigned char *)(a2 + 1910)
      || *(unsigned char *)(a2 + 1911)
      || *(_WORD *)(a2 + 1912)
      || *(_WORD *)(a2 + 1914)
      || *(_WORD *)(a2 + 1916)
      || *(_WORD *)(a2 + 1918)
      || *(unsigned char *)(a2 + 1920)
      || *(_DWORD *)(a2 + 1924)
      || *(_DWORD *)(a2 + 1928)
      || *(unsigned char *)(a2 + 1932)
      || *(_DWORD *)(a2 + 1936)
      || *(unsigned char *)(a2 + 1940)
      || *(unsigned char *)(a2 + 1976)
      || *(unsigned char *)(a2 + 1977)
      || *(unsigned char *)(a2 + 1978)
      || *(unsigned char *)(a2 + 1979)
      || *(_DWORD *)(a2 + 1980)
      || *(_DWORD *)(a2 + 1984)
      || *(_DWORD *)(a2 + 1988)
      || *(_DWORD *)(a2 + 1992))
    {
LABEL_26:
      BOOL v24 = 1;
      goto LABEL_27;
    }
    BOOL v24 = *(_DWORD *)(a2 + 1996) != 0;
  }
LABEL_27:
  *(unsigned char *)(a2 + 324) = v24;
  *(unsigned char *)(a2 + 325) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  *(void *)(a2 + 186) = 0;
  sub_1BBA61468(a1 + 3184, (int *)(a2 + 176), (int *)(a2 + 180));
  int v25 = *(_DWORD *)(a2 + 176);
  int v26 = *(__int16 *)(a1 + 3274);
  int v27 = *(unsigned __int8 *)(a2 + 173);
  BOOL v28 = __OFSUB__(v25, v26);
  int v29 = v25 - v26;
  if (!((v29 < 0) ^ v28 | (v29 == 0)))
  {
    if ((v27 - 1) >= 2) {
      int v30 = 1;
    }
    else {
      int v30 = 2;
    }
    *(_WORD *)(a2 + 188) = v29 / v30;
    *(_DWORD *)(a2 + 2032) = v29;
    *(unsigned char *)(a2 + 184) = 1;
  }
  int v31 = *(_DWORD *)(a2 + 180);
  int v32 = *(__int16 *)(a1 + 3276);
  BOOL v28 = __OFSUB__(v31, v32);
  int v33 = v31 - v32;
  if (!((v33 < 0) ^ v28 | (v33 == 0)))
  {
    if (v27 == 1) {
      int v34 = 2;
    }
    else {
      int v34 = 1;
    }
    *(_WORD *)(a2 + 192) = v33 / v34;
    *(_DWORD *)(a2 + 2040) = v33;
    *(unsigned char *)(a2 + 184) = 1;
  }
  char v35 = *(unsigned char *)(a2 + 194);
  *(unsigned char *)(a2 + 2000) = v35 + 8;
  *(unsigned char *)(a2 + 2001) = 6 * v35;
  char v36 = *(unsigned char *)(a2 + 195);
  *(unsigned char *)(a2 + 2002) = v36 + 8;
  *(unsigned char *)(a2 + 2003) = 6 * v36;
  *(_DWORD *)(a2 + 2004) = 16 << *(unsigned char *)(a2 + 196);
  char v37 = *(unsigned char *)(a2 + 240) + 3;
  *(unsigned char *)(a2 + 2008) = v37;
  char v38 = *(unsigned char *)(a2 + 241) + v37;
  *(unsigned char *)(a2 + 2009) = v38;
  int v39 = 1 << v38;
  *(unsigned char *)(a2 + 2013) = 1 << v38;
  unsigned __int8 v40 = *(unsigned char *)(a2 + 242) + 2;
  *(unsigned char *)(a2 + 2010) = v40;
  *(unsigned char *)(a2 + 2011) = *(unsigned char *)(a2 + 243) + v40;
  unsigned int v41 = v27 - 1;
  char v42 = v40;
  if (v40 <= 3u) {
    char v42 = 3;
  }
  unsigned __int8 v43 = v42 - 1;
  if (v41 >= 2) {
    unsigned __int8 v44 = v40;
  }
  else {
    unsigned __int8 v44 = v43;
  }
  *(unsigned char *)(a2 + 2012) = v44;
  *(_DWORD *)(a2 + 2016) = (v25 + v39 - 1) >> v38;
  *(_DWORD *)(a2 + 2020) = (v31 + v39 - 1) >> v38;
  if (*(unsigned char *)(a2 + 250))
  {
    *(unsigned char *)(a2 + 256) = *(unsigned char *)(a2 + 251) + 1;
    *(unsigned char *)(a2 + 257) = *(unsigned char *)(a2 + 252) + 1;
    char v45 = *(unsigned char *)(a2 + 253) + 3;
    *(unsigned char *)(a2 + 258) = v45;
    *(unsigned char *)(a2 + 259) = *(unsigned char *)(a2 + 254) + v45;
  }
  unint64_t v46 = *(unsigned int *)(a2 + 260);
  if (v46)
  {
    int v47 = (uint64_t *)(a2 + 264);
    uint64_t result = sub_1BBA61568((void **)(a2 + 264), v46);
    if (result) {
      return result;
    }
    if (*(_DWORD *)(a2 + 260))
    {
      unint64_t v49 = 0;
      uint64_t v50 = a1 + 3820;
      do
      {
        uint64_t v51 = *v47;
        uint64_t v52 = *v47 + 248 * v49;
        memset(v106, 0, 41);
        memset(v105, 0, sizeof(v105));
        *(_OWORD *)((char *)&v106[2] + 10) = 0u;
        *(_OWORD *)((char *)&v106[3] + 10) = 0u;
        *(_OWORD *)((char *)&v106[4] + 10) = 0u;
        memset((char *)&v106[5] + 10, 0, 28);
        int v53 = *(unsigned __int8 *)(a1 + 108 * (int)v49 + 3900);
        *(unsigned char *)(v52 + 163) = v53;
        if (v53)
        {
          uint64_t v54 = v51 + 248 * v49;
          *(_DWORD *)(v54 + 172) = 0;
          uint64_t v55 = (_WORD *)(v54 + 172);
          *((_DWORD *)v55 - 2) = 0;
          uint64_t v56 = a1 + 108 * (int)v49;
          int v57 = *(char *)(v56 + 3901);
          *((unsigned char *)v55 - 4) = v57 < 1;
          if (v57 < 0) {
            int v57 = -v57;
          }
          *(v55 - 1) = v57 - 1;
          uint64_t v58 = *(unsigned __int8 *)(v56 + 3902);
          BYTE2(v106[2]) = v58;
          if (v58)
          {
            int v59 = 0;
            uint64_t v60 = 0;
            int v61 = 0;
            uint64_t v62 = a1 + 3903 + 108 * (int)v49;
            do
            {
              char v63 = *(unsigned char *)(v62 + v60);
              v61 |= (v63 & 1) << v60;
              *uint64_t v55 = v61;
              if ((v63 & 1) == 0)
              {
                v59 |= ((*(unsigned __int8 *)(v62 + v60) >> 1) & 1) << v60;
                v55[1] = v59;
              }
              if (v58 - 1 == v60) {
                LOWORD(v64) = 0;
              }
              else {
                int v64 = *(_DWORD *)(v50 + 108 * (int)(((v49 << 32) - 0x100000000) >> 32) + 4 * v60);
              }
              *((_WORD *)v106 + v60++) = v64;
            }
            while (v58 != v60);
          }
        }
        else
        {
          uint64_t v65 = v51 + 248 * v49;
          *(_WORD *)(v65 + 176) = 0;
          uint64_t v66 = v65 + 176;
          *(_DWORD *)(v66 + 66) = 0;
          int v67 = (_WORD *)(v66 + 66);
          uint64_t v68 = *(unsigned __int8 *)(a1 + 108 * (int)v49 + 3816);
          if (*(unsigned char *)(a1 + 108 * (int)v49 + 3816))
          {
            unsigned __int8 v69 = 0;
            unsigned __int8 v70 = 0;
            uint64_t v71 = (int *)(v50 + 108 * (int)v49);
            uint64_t v72 = (_WORD *)(v66 + 68);
            uint64_t v73 = *(unsigned __int8 *)(a1 + 108 * (int)v49 + 3816);
            uint64_t v74 = v71;
            do
            {
              int v75 = *v74++;
              if (v75 < 0) {
                *(unsigned char *)uint64_t v66 = ++v69;
              }
              else {
                *(unsigned char *)(v66 + 1) = ++v70;
              }
              --v73;
            }
            while (v73);
            if (v69)
            {
              uint64_t v76 = 0;
              int v77 = 0;
              __int16 v78 = 0;
              do
              {
                uint64_t v79 = 0;
                int v80 = 0x7FFFFFFF;
                int v81 = -1;
                do
                {
                  int v82 = v71[v79];
                  if (v82 < 0 && v77 < -v82 && v80 > -v82)
                  {
                    int v80 = -v82;
                    int v81 = v79;
                  }
                  ++v79;
                }
                while (v68 != v79);
                uint64_t v83 = a1 + 108 * (int)v49 + 3812;
                int v84 = *(_DWORD *)(v83 + 4 * v81 + 8);
                *(_WORD *)(v51 + 248 * v49 + 2 * v76 + 178) = v78 + ~(_WORD)v84;
                *v67 |= *(unsigned __int8 *)(v83 + v81 + 72) << v76;
                int v77 = -v84;
                ++v76;
                __int16 v78 = v84;
              }
              while (v76 != v69);
            }
            if (v70)
            {
              uint64_t v85 = 0;
              int v86 = 0;
              do
              {
                uint64_t v87 = 0;
                int v88 = 0x7FFFFFFF;
                int v89 = -1;
                do
                {
                  int v90 = v71[v87];
                  BOOL v91 = v90 > v86;
                  BOOL v92 = v90 < v88;
                  BOOL v93 = !v91 || !v92;
                  if (v91 && v92) {
                    int v94 = v71[v87];
                  }
                  else {
                    int v94 = v88;
                  }
                  if (v93) {
                    int v95 = v89;
                  }
                  else {
                    int v95 = v87;
                  }
                  if (v90 >= 1)
                  {
                    int v88 = v94;
                    int v89 = v95;
                  }
                  ++v87;
                }
                while (v68 != v87);
                uint64_t v96 = a1 + 108 * (int)v49 + 3812;
                int v97 = *(_DWORD *)(v96 + 4 * v89 + 8);
                *(_WORD *)(v51 + 248 * v49 + 2 * v85 + 210) = v97 + ~(_WORD)v86;
                *v72 |= *(unsigned __int8 *)(v96 + v89 + 72) << v85++;
                int v86 = v97;
              }
              while (v85 != v70);
            }
          }
        }
        sub_1BBAE43E8(v52, (uint64_t)v105);
        ++v49;
      }
      while (v49 < *(unsigned int *)(a2 + 260));
    }
  }
  if (*(_DWORD *)(a1 + 3688) != 1 && *(_DWORD *)(a1 + 3692) != 1) {
    return 0;
  }
  uint64_t v98 = (void **)(a2 + 2048);
  if (!*(void *)(a2 + 2056))
  {
    if (*v98)
    {
      free(*v98);
      *uint64_t v98 = 0;
      *(void *)(a2 + 2056) = 0;
    }
    if (malloc_type_posix_memalign((void **)(a2 + 2048), 0x10uLL, 0x758uLL, 0x1000040EF885EF6uLL) || !*v98) {
      return 4294954392;
    }
    bzero(*v98, 0x758uLL);
    *(void *)(a2 + 2056) = 1;
  }
  int v99 = (char *)*v98;
  LODWORD(v105[0]) = *(__int16 *)(a1 + 3274);
  v107[0] = *(__int16 *)(a1 + 3276);
  sub_1BBA61468(a1 + 3184, (int *)v105, v107);
  int v100 = SLODWORD(v105[0]) >> 4;
  int v101 = v107[0] >> 4;
  int v102 = *(char *)(a1 + 3333);
  int v103 = *(char *)(a1 + 3334);
  if ((v102 & v103) < 0 != v28) {
    int v104 = -1;
  }
  else {
    int v104 = v103 + v102;
  }
  bzero(v99, 0x758uLL);
  uint64_t result = sub_1BBAE6DEC((uint64_t)v99, (int)*(double *)(a1 + 3280), *(_DWORD *)(a1 + 3364), v100, v101, *(_DWORD *)(a1 + 3268), *(unsigned __int16 *)(a1 + 3272), v104);
  if (!result)
  {
    v99[17] = a3 & ~(a3 >> 31);
    v99[18] = 1;
    v99[276] = 0;
    *((_DWORD *)v99 + 68) = 8;
    *((_DWORD *)v99 + 70) = 9;
    *((_DWORD *)v99 + 332) = v100 - 1;
    *((_DWORD *)v99 + 333) = v101 - 1;
    v99[1339] = 0;
    v99[1356] = 0;
    *(void *)(v99 + 1868) = 0x200000001000;
    *((_DWORD *)v99 + 469) = v101 * v100 - 1;
    v99[23] = 0;
  }
  return result;
}

uint64_t sub_1BBA60870(uint64_t a1, uint64_t a2, char a3, unsigned __int8 a4)
{
  *(unsigned char *)a2 = a3;
  *(unsigned char *)(a2 + 1) = a4;
  uint64_t v4 = *(void *)(a1 + 12688);
  if (*(unsigned __int8 *)(v4 + 172) != a4) {
    return 4294954387;
  }
  *(_WORD *)(a2 + 2) = 0;
  *(unsigned char *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(a1 + 3313) != 0;
  *(unsigned char *)(a2 + 6) = 0;
  char v5 = *(unsigned char *)(a1 + 3335) - 1;
  *(unsigned char *)(a2 + 7) = v5;
  *(unsigned char *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 9) = *(unsigned char *)(a1 + 3289) - 26;
  *(unsigned char *)(a2 + 10) = 0;
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a1 + 3536);
  int v6 = *(char *)(a1 + 3308);
  *(unsigned char *)(a2 + 12) = v6 > 0;
  if (v6 < 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(unsigned __int8 *)(a1 + 3311);
  }
  *(unsigned char *)(a2 + 13) = v7;
  *(_WORD *)(a2 + 14) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  int v9 = *(unsigned __int8 *)(a1 + 3534);
  *(unsigned char *)(a2 + 17) = *(unsigned char *)(a1 + 3533) | v9;
  if (v9) {
    BOOL v10 = *(unsigned char *)(a1 + 3441) != 0;
  }
  else {
    BOOL v10 = 0;
  }
  *(unsigned char *)(a2 + 18) = v10;
  int v11 = *(_DWORD *)(a1 + 3360);
  *(_WORD *)(a2 + 19) = 0;
  *(unsigned char *)(a2 + 21) = v11 == 4;
  *(_WORD *)(a2 + 28) = 256;
  *(unsigned char *)(a2 + 30) = *(unsigned char *)(a1 + 3532);
  int v12 = *(unsigned __int8 *)(a1 + 3408);
  *(unsigned char *)(a2 + 31) = *(unsigned char *)(a1 + 3408) == 0;
  if (v12) {
    *(_WORD *)(a2 + 32) = 0;
  }
  if (*(unsigned char *)(a1 + 3496)) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = *(unsigned char *)(a1 + 3497) != 0;
  }
  uint64_t result = 0;
  *(unsigned char *)(a2 + 1595) = v13;
  *(unsigned char *)(a2 + 34) = 0;
  *(_DWORD *)(a2 + 1596) = 0;
  *(_DWORD *)(a2 + 1620) = *(unsigned __int8 *)(v4 + 2009) - v7;
  return result;
}

void sub_1BBA609A8(uint64_t a1, uint64_t a2)
{
  bzero((void *)a1, 0x370uLL);
  int v4 = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 400);
  *(void *)(a1 + 68) = 0x186A0000280A0;
  int v5 = *(_DWORD *)(a2 + 560);
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i < v5; ++i)
    {
      int v7 = *(_DWORD *)(a2 + 188 + 4 * i);
      if (v7 >= 1)
      {
        *(_DWORD *)(a1 + 36 + 4 * i) = v7;
        int v5 = *(_DWORD *)(a2 + 560);
      }
    }
  }
  double v8 = *(double *)(a2 + 96);
  float v9 = v8;
  *(float *)(a1 + 88) = v9;
  *(float *)(a1 + 92) = v9;
  *(double *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 472);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 476);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 544);
  *(unsigned char *)(a1 + 874) = *(unsigned char *)(a2 + 7873);
  *(void *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 800) = 1;
  *(_DWORD *)(a1 + 712) = 0;
  *(unsigned char *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 348) = 0;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 692) = 0;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 676) = 0u;
  *(_OWORD *)(a1 + 644) = 0u;
  *(unsigned char *)(a1 + 832) = 1;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = *(unsigned __int8 *)(a2 + 603);
  *(_DWORD *)(a1 + 860) = -1;
  *(void *)(a1 + 864) = -1;
  *(unsigned char *)(a1 + 872) = *(unsigned char *)(a2 + 124) != 0;
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 760) = 0;
}

uint64_t sub_1BBA60B04(uint64_t a1)
{
  int v2 = 0;
  uint64_t v3 = *(void *)(a1 + 12688);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 241) + 1;
  int v5 = &byte_1BBB7A04C;
  do
  {
    int v6 = *v5++;
    v2 += v6;
    --v4;
  }
  while (v4);
  unint64_t v7 = (*(_DWORD *)(v3 + 2016) * v2 * *(_DWORD *)(v3 + 2020));
  *(_DWORD *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 44) = v7;
  if (*(void *)(a1 + 32) >= v7) {
    return 0;
  }
  if (v7 > 0x320000) {
    return 4294954392;
  }
  double v8 = (void *)(a1 + 24);
  float v9 = *(void **)(a1 + 24);
  if (v9)
  {
    free(v9);
    *double v8 = 0;
    *(void *)(a1 + 32) = 0;
  }
  if (malloc_type_posix_memalign((void **)(a1 + 24), 0x10uLL, 32 * v7, 0x1000040CAC56904uLL) || !*v8) {
    return 4294954392;
  }
  uint64_t v11 = 0;
  unint64_t v12 = v7;
  do
  {
    BOOL v13 = (_OWORD *)(*v8 + v11);
    *BOOL v13 = 0uLL;
    v13[1] = 0uLL;
    v11 += 32;
    --v12;
  }
  while (v12);
  uint64_t result = 0;
  *(void *)(a1 + 32) = v7;
  return result;
}

void sub_1BBA60BF8(uint64_t a1, double a2)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  if (a2 > 0.0)
  {
    if (a1)
    {
      uint64_t v4 = *(void *)(a1 + 1168);
      unint64_t v7 = *(void **)(v4 + 32);
      int v5 = (double *)(v4 + 32);
      int v6 = v7;
      double v8 = 0.0;
      double v9 = 0.0;
      if (!v7) {
        goto LABEL_170;
      }
      BOOL v10 = v5;
      uint64_t v11 = v6;
      do
      {
        unint64_t v12 = v11[4];
        BOOL v13 = v12 >= (unint64_t)"input_frames";
        if (v12 >= (unint64_t)"input_frames") {
          int v14 = v11;
        }
        else {
          int v14 = v11 + 1;
        }
        if (v13) {
          BOOL v10 = (double *)v11;
        }
        uint64_t v11 = (void *)*v14;
      }
      while (*v14);
      double v9 = 0.0;
      if (v10 != v5 && *((void *)v10 + 4) <= (unint64_t)"input_frames") {
        double v9 = v10[5];
      }
      if (v6)
      {
        int v15 = v5;
        int v16 = v6;
        do
        {
          unint64_t v17 = v16[4];
          BOOL v18 = v17 >= (unint64_t)"encoded_frames";
          if (v17 >= (unint64_t)"encoded_frames") {
            __int16 v19 = v16;
          }
          else {
            __int16 v19 = v16 + 1;
          }
          if (v18) {
            int v15 = (double *)v16;
          }
          int v16 = (void *)*v19;
        }
        while (*v19);
        double v20 = 0.0;
        if (v15 != v5 && *((void *)v15 + 4) <= (unint64_t)"encoded_frames") {
          double v20 = v15[5];
        }
        unsigned int v21 = v5;
        int32x4_t v22 = v6;
        do
        {
          unint64_t v23 = v22[4];
          BOOL v24 = v23 >= (unint64_t)"transmit_frames";
          if (v23 >= (unint64_t)"transmit_frames") {
            int v25 = v22;
          }
          else {
            int v25 = v22 + 1;
          }
          if (v24) {
            unsigned int v21 = (double *)v22;
          }
          int32x4_t v22 = (void *)*v25;
        }
        while (*v25);
        double v26 = 0.0;
        if (v21 != v5 && *((void *)v21 + 4) <= (unint64_t)"transmit_frames") {
          double v26 = v21[5];
        }
        int v27 = v5;
        BOOL v28 = v6;
        do
        {
          unint64_t v29 = v28[4];
          BOOL v30 = v29 >= (unint64_t)"dropped_frames";
          if (v29 >= (unint64_t)"dropped_frames") {
            int v31 = v28;
          }
          else {
            int v31 = v28 + 1;
          }
          if (v30) {
            int v27 = (double *)v28;
          }
          BOOL v28 = (void *)*v31;
        }
        while (*v31);
        double v32 = 0.0;
        if (v27 != v5 && *((void *)v27 + 4) <= (unint64_t)"dropped_frames") {
          double v32 = v27[5];
        }
        int v33 = v5;
        int v34 = v6;
        do
        {
          unint64_t v35 = v34[4];
          BOOL v36 = v35 >= (unint64_t)"idr_frames";
          if (v35 >= (unint64_t)"idr_frames") {
            char v37 = v34;
          }
          else {
            char v37 = v34 + 1;
          }
          if (v36) {
            int v33 = (double *)v34;
          }
          int v34 = (void *)*v37;
        }
        while (*v37);
        double v38 = 0.0;
        if (v33 != v5 && *((void *)v33 + 4) <= (unint64_t)"idr_frames") {
          double v38 = v33[5];
        }
        int v39 = v5;
        unsigned __int8 v40 = v6;
        do
        {
          unint64_t v41 = v40[4];
          BOOL v42 = v41 >= (unint64_t)"repeated_frames";
          if (v41 >= (unint64_t)"repeated_frames") {
            unsigned __int8 v43 = v40;
          }
          else {
            unsigned __int8 v43 = v40 + 1;
          }
          if (v42) {
            int v39 = (double *)v40;
          }
          unsigned __int8 v40 = (void *)*v43;
        }
        while (*v43);
        double v44 = 0.0;
        if (v39 != v5 && *((void *)v39 + 4) <= (unint64_t)"repeated_frames") {
          double v44 = v39[5];
        }
        char v45 = v5;
        unint64_t v46 = v6;
        do
        {
          unint64_t v47 = v46[4];
          BOOL v48 = v47 >= (unint64_t)"refresh_frames";
          if (v47 >= (unint64_t)"refresh_frames") {
            unint64_t v49 = v46;
          }
          else {
            unint64_t v49 = v46 + 1;
          }
          if (v48) {
            char v45 = (double *)v46;
          }
          unint64_t v46 = (void *)*v49;
        }
        while (*v49);
        double v50 = 0.0;
        if (v45 != v5 && *((void *)v45 + 4) <= (unint64_t)"refresh_frames") {
          double v50 = v45[5];
        }
        uint64_t v51 = v5;
        uint64_t v52 = v6;
        do
        {
          unint64_t v53 = v52[4];
          BOOL v54 = v53 >= (unint64_t)"frame_qp";
          if (v53 >= (unint64_t)"frame_qp") {
            uint64_t v55 = v52;
          }
          else {
            uint64_t v55 = v52 + 1;
          }
          if (v54) {
            uint64_t v51 = (double *)v52;
          }
          uint64_t v52 = (void *)*v55;
        }
        while (*v55);
        double v56 = 0.0;
        if (v51 != v5 && *((void *)v51 + 4) <= (unint64_t)"frame_qp") {
          double v56 = v51[5];
        }
        int v57 = v5;
        uint64_t v58 = v6;
        do
        {
          unint64_t v59 = v58[4];
          BOOL v60 = v59 >= (unint64_t)"target_bitrate";
          if (v59 >= (unint64_t)"target_bitrate") {
            int v61 = v58;
          }
          else {
            int v61 = v58 + 1;
          }
          if (v60) {
            int v57 = (double *)v58;
          }
          uint64_t v58 = (void *)*v61;
        }
        while (*v61);
        uint64_t v62 = 0;
        if (v57 != v5 && *((void *)v57 + 4) <= (unint64_t)"target_bitrate") {
          uint64_t v62 = *((void *)v57 + 5);
        }
        char v63 = v5;
        int v64 = v6;
        do
        {
          unint64_t v65 = v64[4];
          BOOL v66 = v65 >= (unint64_t)"encoded_bits";
          if (v65 >= (unint64_t)"encoded_bits") {
            int v67 = v64;
          }
          else {
            int v67 = v64 + 1;
          }
          if (v66) {
            char v63 = (double *)v64;
          }
          int v64 = (void *)*v67;
        }
        while (*v67);
        double v68 = 0.0;
        if (v63 != v5 && *((void *)v63 + 4) <= (unint64_t)"encoded_bits") {
          double v68 = v63[5];
        }
        unsigned __int8 v69 = v5;
        unsigned __int8 v70 = v6;
        do
        {
          unint64_t v71 = v70[4];
          BOOL v72 = v71 >= (unint64_t)"header_bits";
          if (v71 >= (unint64_t)"header_bits") {
            uint64_t v73 = v70;
          }
          else {
            uint64_t v73 = v70 + 1;
          }
          if (v72) {
            unsigned __int8 v69 = (double *)v70;
          }
          unsigned __int8 v70 = (void *)*v73;
        }
        while (*v73);
        double v74 = 0.0;
        if (v69 != v5 && *((void *)v69 + 4) <= (unint64_t)"header_bits") {
          double v74 = v69[5];
        }
        int v75 = v5;
        uint64_t v76 = v6;
        do
        {
          unint64_t v77 = v76[4];
          BOOL v78 = v77 >= (unint64_t)"fec_bits";
          if (v77 >= (unint64_t)"fec_bits") {
            uint64_t v79 = v76;
          }
          else {
            uint64_t v79 = v76 + 1;
          }
          if (v78) {
            int v75 = (double *)v76;
          }
          uint64_t v76 = (void *)*v79;
        }
        while (*v79);
        double v80 = 0.0;
        if (v75 != v5 && *((void *)v75 + 4) <= (unint64_t)"fec_bits") {
          double v80 = v75[5];
        }
        int v81 = v5;
        int v82 = v6;
        do
        {
          unint64_t v83 = v82[4];
          BOOL v84 = v83 >= (unint64_t)"rtx_bits";
          if (v83 >= (unint64_t)"rtx_bits") {
            uint64_t v85 = v82;
          }
          else {
            uint64_t v85 = v82 + 1;
          }
          if (v84) {
            int v81 = (double *)v82;
          }
          int v82 = (void *)*v85;
        }
        while (*v85);
        double v86 = 0.0;
        if (v81 != v5 && *((void *)v81 + 4) <= (unint64_t)"rtx_bits") {
          double v86 = v81[5];
        }
        uint64_t v87 = v5;
        int v88 = v6;
        do
        {
          unint64_t v89 = v88[4];
          BOOL v90 = v89 >= (unint64_t)"min_frame_size";
          if (v89 >= (unint64_t)"min_frame_size") {
            BOOL v91 = v88;
          }
          else {
            BOOL v91 = v88 + 1;
          }
          if (v90) {
            uint64_t v87 = (double *)v88;
          }
          int v88 = (void *)*v91;
        }
        while (*v91);
        double v92 = 0.0;
        double v93 = 0.0;
        if (v87 != v5 && *((void *)v87 + 4) <= (unint64_t)"min_frame_size") {
          double v93 = v87[5];
        }
        int v94 = v5;
        do
        {
          unint64_t v95 = v6[4];
          BOOL v96 = v95 >= (unint64_t)"encoding_time";
          if (v95 >= (unint64_t)"encoding_time") {
            int v97 = v6;
          }
          else {
            int v97 = v6 + 1;
          }
          if (v96) {
            int v94 = (double *)v6;
          }
          int v6 = (void *)*v97;
        }
        while (*v97);
        if (v94 != v5 && *((void *)v94 + 4) <= (unint64_t)"encoding_time") {
          double v92 = v94[5];
        }
        double v106 = v86;
        double v107 = v80;
        double v108 = v44;
        uint64_t v109 = v62;
        double v110 = v50;
        double v111 = v32;
        double v101 = 0.0;
        double v8 = 0.0;
        if (v20 > 0.0) {
          double v8 = v92 / v20;
        }
        double v105 = v9 / a2;
        double v100 = v20 / a2;
        BOOL v98 = v26 > 0.000001;
        double v99 = v26 / a2;
        if (v26 > 0.000001) {
          double v101 = v56 / v26;
        }
      }
      else
      {
LABEL_170:
        BOOL v98 = 0;
        double v99 = 0.0 / a2;
        double v93 = 0.0;
        double v107 = 0.0;
        double v108 = 0.0;
        double v68 = 0.0;
        double v110 = 0.0;
        double v111 = 0.0;
        double v26 = 0.0;
        double v100 = 0.0 / a2;
        double v38 = 0.0;
        uint64_t v109 = 0;
        double v74 = 0.0;
        double v105 = v9 / a2;
        double v106 = 0.0;
        double v101 = 0.0;
      }
      __int16 v149 = 0;
      long long v147 = 0u;
      long long v148 = 0u;
      *(_OWORD *)std::string __str = 0u;
      if (v98 && v93 / v26 > 2.22044605e-16) {
        snprintf(__str, 0x32uLL, "Min_frame_size=%.0f bytes, ", v93 / v26);
      }
      if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136319234;
        uint64_t v113 = a1 + 1184;
        __int16 v114 = 2048;
        double v115 = v105;
        __int16 v116 = 2048;
        double v117 = v100;
        __int16 v118 = 2048;
        double v119 = v111 / a2;
        __int16 v120 = 2048;
        double v121 = v108 / a2;
        __int16 v122 = 2048;
        double v123 = v38 / a2;
        __int16 v124 = 2048;
        double v125 = v110 / a2;
        __int16 v126 = 2048;
        double v127 = v99;
        __int16 v128 = 2048;
        double v129 = v101;
        __int16 v130 = 2048;
        double v131 = v106 / a2 + v74 / a2 + v68 / a2 + v107 / a2;
        __int16 v132 = 2048;
        uint64_t v133 = v109;
        __int16 v134 = 2048;
        double v135 = v68 / a2;
        __int16 v136 = 2048;
        double v137 = v107 / a2;
        __int16 v138 = 2048;
        double v139 = v74 / a2;
        __int16 v140 = 2048;
        double v141 = v106 / a2;
        __int16 v142 = 2080;
        char v143 = __str;
        __int16 v144 = 2048;
        double v145 = v8;
        int v102 = MEMORY[0x1E4F14500];
        int v103 = "[LRPEncStatsMonitor] %s: Input_fps=%.2f, Enc_fps=%.2f, drop_fps=%.2f, repeat_fps=%.2f, idr_fps=%.2f, refr"
               "esh_fps=%.2f, Tx_fps=%.2f, Avg_QP=%.2f, Bit_rate (Total/Target/Video/FEC/Header/RTX)=%.0f/%.0f/%.0f/%.0f/"
               "%.0f/%.0f, %sEnc_time=%.2f ms\n";
        uint32_t v104 = 172;
        goto LABEL_184;
      }
    }
    else if (dword_1E9F80A90 >= 1)
    {
      fwrite("Empty callback refcon in LRPEncStatsMonitorCallback()\n", 0x36uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        int v102 = MEMORY[0x1E4F14500];
        int v103 = "Empty callback refcon in LRPEncStatsMonitorCallback()\n";
        uint32_t v104 = 2;
LABEL_184:
        _os_log_impl(&dword_1BB9B9000, v102, OS_LOG_TYPE_DEFAULT, v103, buf, v104);
      }
    }
  }
}

uint64_t sub_1BBA61468(uint64_t result, int *a2, int *a3)
{
  *a2 = *(__int16 *)(result + 90);
  *a3 = *(__int16 *)(result + 92);
  if (*(_DWORD *)(result + 508) == 2)
  {
    *a2 = (*a2 + 15) & 0xFFFFFFF0;
    *a3 = (*a3 + 15) & 0xFFFFFFF0;
  }
  int v5 = *(_DWORD *)(result + 504);
  if (v5)
  {
    if (v5 != 1) {
      return result;
    }
    uint64_t result = sub_1BBA4013C();
    if (!result) {
      return result;
    }
    int v6 = *a2;
    if (*a2 <= 192) {
      int v6 = 192;
    }
    *a2 = v6;
    int v7 = *a3;
    BOOL v8 = *a3 <= 96;
    int v9 = 96;
  }
  else
  {
    int v10 = 1 << *(unsigned char *)(result + 168);
    int v11 = v10 - 1;
    int v12 = -v10;
    *a2 = (v11 + *a2) & v12;
    *a3 = (v11 + *a3) & v12;
    uint64_t result = sub_1BBA4013C();
    if (!result) {
      return result;
    }
    int v13 = *a2;
    if (*a2 <= 160) {
      int v13 = 160;
    }
    *a2 = v13;
    int v7 = *a3;
    BOOL v8 = *a3 <= 64;
    int v9 = 64;
  }
  if (v8) {
    int v7 = v9;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_1BBA61568(void **memptr, unint64_t a2)
{
  if ((unint64_t)memptr[1] >= a2) {
    return 0;
  }
  if (a2 > 0x6739C) {
    return 4294954392;
  }
  uint64_t v4 = *memptr;
  if (v4)
  {
    free(v4);
    *memptr = 0;
    memptr[1] = 0;
  }
  if (malloc_type_posix_memalign(memptr, 0x10uLL, 248 * a2, 0x1000040403E4F83uLL) || !*memptr) {
    return 4294954392;
  }
  uint64_t v6 = 0;
  unint64_t v7 = a2;
  do
  {
    BOOL v8 = (char *)*memptr + v6;
    *(_OWORD *)((char *)v8 + 153) = 0uLL;
    v8[8] = 0uLL;
    v8[9] = 0uLL;
    v8[6] = 0uLL;
    v8[7] = 0uLL;
    v8[4] = 0uLL;
    v8[5] = 0uLL;
    v8[2] = 0uLL;
    v8[3] = 0uLL;
    *BOOL v8 = 0uLL;
    v8[1] = 0uLL;
    *(_OWORD *)((char *)v8 + 170) = 0uLL;
    *(_OWORD *)((char *)v8 + 186) = 0uLL;
    *(_OWORD *)((char *)v8 + 202) = 0uLL;
    *(_OWORD *)((char *)v8 + 218) = 0uLL;
    v6 += 248;
    *(_OWORD *)((char *)v8 + 230) = 0uLL;
    --v7;
  }
  while (v7);
  uint64_t result = 0;
  memptr[1] = (void *)a2;
  return result;
}

uint64_t sub_1BBA61650(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1C18605E0);
  }
  return result;
}

void sub_1BBA61670(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C18605E0);
}

void sub_1BBA616AC(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    int v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *a1;
      if (*a1)
      {
        uint64_t v7 = *v6;
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*v6 + 64), 0xFFFFFFFFFFFFFFFFLL);
        BOOL v8 = *(char **)(v7 + 32);
        int v9 = *(char **)(v7 + 24);
        uint64_t v10 = v8 - v9;
        if (v8 == v9) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = ((v8 - v9) << 6) - 1;
        }
        unint64_t v13 = *(void *)(v7 + 48);
        uint64_t v12 = *(void *)(v7 + 56);
        unint64_t v14 = v12 + v13;
        if (v11 != v12 + v13) {
          goto LABEL_93;
        }
        if (v13 < 0x200)
        {
          uint64_t v30 = v10 >> 3;
          int v31 = *(char **)(v7 + 40);
          double v32 = *(char **)(v7 + 16);
          uint64_t v33 = v31 - v32;
          if (v10 >> 3 >= (unint64_t)((v31 - v32) >> 3))
          {
            if (v31 == v32) {
              unint64_t v34 = 1;
            }
            else {
              unint64_t v34 = v33 >> 2;
            }
            unint64_t v35 = (char *)sub_1BB9C91CC(v34);
            uint64_t v37 = v36;
            double v38 = &v35[8 * v30];
            *(void *)&long long v39 = v35;
            *((void *)&v39 + 1) = v38;
            long long v121 = v39;
            unsigned __int8 v40 = operator new(0x1000uLL);
            *(void *)&long long v41 = v38;
            *((void *)&v41 + 1) = &v35[8 * v37];
            if (v30 == v37)
            {
              uint64_t v42 = 8 * v30;
              *(void *)&long long v43 = v121;
              if (v10 < 1)
              {
                int v82 = v40;
                uint64_t v83 = v42 >> 2;
                if (v8 == v9) {
                  unint64_t v84 = 1;
                }
                else {
                  unint64_t v84 = v83;
                }
                uint64_t v85 = (char *)sub_1BB9C91CC(v84);
                double v38 = &v85[8 * (v84 >> 2)];
                *(void *)&long long v43 = v85;
                *((void *)&v43 + 1) = v38;
                *(void *)&long long v41 = v38;
                *((void *)&v41 + 1) = &v85[8 * v86];
                if (v35)
                {
                  long long v118 = v41;
                  long long v122 = v43;
                  operator delete(v35);
                  long long v41 = v118;
                  long long v43 = v122;
                }
                unsigned __int8 v40 = v82;
              }
              else
              {
                uint64_t v44 = v42 >> 3;
                if (v44 >= -1) {
                  unint64_t v45 = v44 + 1;
                }
                else {
                  unint64_t v45 = v44 + 2;
                }
                v38 -= 8 * (v45 >> 1);
                *(void *)&long long v41 = v38;
                *((void *)&v43 + 1) = v38;
              }
            }
            else
            {
              long long v43 = v121;
            }
            *(void *)double v38 = v40;
            *(void *)&long long v41 = v41 + 8;
            for (uint64_t i = *(void *)(v7 + 32); i != *(void *)(v7 + 24); i -= 8)
            {
              int v88 = (void *)*((void *)&v43 + 1);
              if (*((void *)&v43 + 1) == (void)v43)
              {
                BOOL v90 = (unsigned char *)v41;
                if ((unint64_t)v41 >= *((void *)&v41 + 1))
                {
                  if (*((void *)&v41 + 1) == *((void *)&v43 + 1)) {
                    unint64_t v95 = 1;
                  }
                  else {
                    unint64_t v95 = (uint64_t)(*((void *)&v41 + 1) - *((void *)&v43 + 1)) >> 2;
                  }
                  BOOL v96 = (char *)sub_1BB9C91CC(v95);
                  unint64_t v89 = &v96[(2 * v95 + 6) & 0xFFFFFFFFFFFFFFF8];
                  BOOL v98 = v89;
                  uint64_t v99 = v90 - (unsigned char *)v88;
                  if (v90 != (unsigned char *)v88)
                  {
                    BOOL v98 = &v89[v99 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v100 = 8 * (v99 >> 3);
                    double v101 = v89;
                    int v102 = v88;
                    do
                    {
                      uint64_t v103 = *v102++;
                      *(void *)double v101 = v103;
                      v101 += 8;
                      v100 -= 8;
                    }
                    while (v100);
                  }
                  *(void *)&long long v43 = v96;
                  *((void *)&v43 + 1) = v89;
                  *(void *)&long long v41 = v98;
                  *((void *)&v41 + 1) = &v96[8 * v97];
                  if (v88)
                  {
                    long long v119 = v41;
                    long long v124 = v43;
                    operator delete(v88);
                    long long v41 = v119;
                    long long v43 = v124;
                  }
                }
                else
                {
                  uint64_t v91 = (uint64_t)(*((void *)&v41 + 1) - v41) >> 3;
                  if (v91 >= -1) {
                    uint64_t v92 = v91 + 1;
                  }
                  else {
                    uint64_t v92 = v91 + 2;
                  }
                  uint64_t v93 = v92 >> 1;
                  uint64_t v94 = v41 + 8 * (v92 >> 1);
                  unint64_t v89 = (char *)(v94 - (v41 - *((void *)&v43 + 1)));
                  if ((void)v41 == *((void *)&v43 + 1))
                  {
                    BOOL v90 = (unsigned char *)*((void *)&v43 + 1);
                  }
                  else
                  {
                    uint64_t v120 = *((void *)&v41 + 1);
                    uint64_t v123 = v43;
                    memmove((void *)(v94 - (v41 - *((void *)&v43 + 1))), *((const void **)&v43 + 1), v41 - *((void *)&v43 + 1));
                    *((void *)&v41 + 1) = v120;
                    *(void *)&long long v43 = v123;
                  }
                  *((void *)&v43 + 1) = v89;
                  *(void *)&long long v41 = &v90[8 * v93];
                }
              }
              else
              {
                unint64_t v89 = (char *)*((void *)&v43 + 1);
              }
              uint64_t v104 = *(void *)(i - 8);
              *((void *)v89 - 1) = v104;
              *((void *)&v43 + 1) -= 8;
            }
            double v105 = *(void **)(v7 + 16);
            *(_OWORD *)(v7 + 16) = v43;
            *(_OWORD *)(v7 + 32) = v41;
            if (v105) {
              operator delete(v105);
            }
            goto LABEL_92;
          }
          if (v31 == v8)
          {
            unint64_t v59 = operator new(0x1000uLL);
            if (v32 == v9)
            {
              if (v8 == v9) {
                unint64_t v60 = 1;
              }
              else {
                unint64_t v60 = v33 >> 2;
              }
              int v61 = (char *)sub_1BB9C91CC(v60);
              int v9 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
              char v63 = *(uint64_t **)(v7 + 24);
              int v64 = v9;
              uint64_t v65 = *(void *)(v7 + 32) - (void)v63;
              if (v65)
              {
                int v64 = &v9[v65 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v66 = 8 * (v65 >> 3);
                int v67 = v9;
                do
                {
                  uint64_t v68 = *v63++;
                  *(void *)int v67 = v68;
                  v67 += 8;
                  v66 -= 8;
                }
                while (v66);
              }
              unsigned __int8 v69 = *(void **)(v7 + 16);
              *(void *)(v7 + 16) = v61;
              *(void *)(v7 + 24) = v9;
              *(void *)(v7 + 32) = v64;
              *(void *)(v7 + 40) = &v61[8 * v62];
              if (v69)
              {
                operator delete(v69);
                int v9 = *(char **)(v7 + 24);
              }
            }
            *((void *)v9 - 1) = v59;
            unsigned __int8 v70 = *(char **)(v7 + 24);
            unint64_t v71 = *(char **)(v7 + 32);
            *(void *)(v7 + 24) = v70 - 8;
            uint64_t v72 = *((void *)v70 - 1);
            *(void *)(v7 + 24) = v70;
            if (v71 == *(char **)(v7 + 40))
            {
              unint64_t v73 = *(void *)(v7 + 16);
              uint64_t v74 = (uint64_t)&v70[-v73];
              if ((unint64_t)v70 <= v73)
              {
                uint64_t v106 = (uint64_t)&v71[-v73];
                BOOL v46 = v106 == 0;
                uint64_t v107 = v106 >> 2;
                if (v46) {
                  unint64_t v108 = 1;
                }
                else {
                  unint64_t v108 = v107;
                }
                uint64_t v109 = (char *)sub_1BB9C91CC(v108);
                double v111 = &v109[8 * (v108 >> 2)];
                unsigned int v112 = *(uint64_t **)(v7 + 24);
                unint64_t v71 = v111;
                uint64_t v113 = *(void *)(v7 + 32) - (void)v112;
                if (v113)
                {
                  unint64_t v71 = &v111[v113 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v114 = 8 * (v113 >> 3);
                  double v115 = &v109[8 * (v108 >> 2)];
                  do
                  {
                    uint64_t v116 = *v112++;
                    *(void *)double v115 = v116;
                    v115 += 8;
                    v114 -= 8;
                  }
                  while (v114);
                }
                double v117 = *(void **)(v7 + 16);
                *(void *)(v7 + 16) = v109;
                *(void *)(v7 + 24) = v111;
                *(void *)(v7 + 32) = v71;
                *(void *)(v7 + 40) = &v109[8 * v110];
                if (v117)
                {
                  operator delete(v117);
                  unint64_t v71 = *(char **)(v7 + 32);
                }
              }
              else
              {
                uint64_t v75 = v74 >> 3;
                BOOL v21 = v74 >> 3 < -1;
                uint64_t v76 = (v74 >> 3) + 2;
                if (v21) {
                  uint64_t v77 = v76;
                }
                else {
                  uint64_t v77 = v75 + 1;
                }
                uint64_t v78 = -(v77 >> 1);
                uint64_t v79 = v77 >> 1;
                double v80 = &v70[-8 * v79];
                int64_t v81 = v71 - v70;
                if (v71 != v70)
                {
                  memmove(&v70[-8 * v79], v70, v71 - v70);
                  unsigned __int8 v70 = *(char **)(v7 + 24);
                }
                unint64_t v71 = &v80[v81];
                *(void *)(v7 + 24) = &v70[8 * v78];
                *(void *)(v7 + 32) = &v80[v81];
              }
            }
            *(void *)unint64_t v71 = v72;
          }
          else
          {
            *(void *)BOOL v8 = operator new(0x1000uLL);
          }
        }
        else
        {
          *(void *)(v7 + 48) = v13 - 512;
          uint64_t v17 = *(void *)v9;
          int v15 = v9 + 8;
          uint64_t v16 = v17;
          *(void *)(v7 + 24) = v15;
          if (*(char **)(v7 + 40) == v8)
          {
            unint64_t v18 = *(void *)(v7 + 16);
            uint64_t v19 = (uint64_t)&v15[-v18];
            if ((unint64_t)v15 <= v18)
            {
              uint64_t v47 = (uint64_t)&v8[-v18];
              BOOL v46 = v47 == 0;
              uint64_t v48 = v47 >> 2;
              if (v46) {
                unint64_t v49 = 1;
              }
              else {
                unint64_t v49 = v48;
              }
              double v50 = (char *)sub_1BB9C91CC(v49);
              uint64_t v52 = &v50[8 * (v49 >> 2)];
              unint64_t v53 = *(uint64_t **)(v7 + 24);
              BOOL v8 = v52;
              uint64_t v54 = *(void *)(v7 + 32) - (void)v53;
              if (v54)
              {
                BOOL v8 = &v52[v54 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v55 = 8 * (v54 >> 3);
                double v56 = &v50[8 * (v49 >> 2)];
                do
                {
                  uint64_t v57 = *v53++;
                  *(void *)double v56 = v57;
                  v56 += 8;
                  v55 -= 8;
                }
                while (v55);
              }
              uint64_t v58 = *(void **)(v7 + 16);
              *(void *)(v7 + 16) = v50;
              *(void *)(v7 + 24) = v52;
              *(void *)(v7 + 32) = v8;
              *(void *)(v7 + 40) = &v50[8 * v51];
              if (v58)
              {
                operator delete(v58);
                BOOL v8 = *(char **)(v7 + 32);
              }
            }
            else
            {
              uint64_t v20 = v19 >> 3;
              BOOL v21 = v19 >> 3 < -1;
              uint64_t v22 = (v19 >> 3) + 2;
              if (v21) {
                uint64_t v23 = v22;
              }
              else {
                uint64_t v23 = v20 + 1;
              }
              uint64_t v24 = -(v23 >> 1);
              uint64_t v25 = v23 >> 1;
              double v26 = &v15[-8 * v25];
              int64_t v27 = v8 - v15;
              if (v8 == v15)
              {
                BOOL v28 = v8;
              }
              else
              {
                memmove(&v15[-8 * v25], v15, v8 - v15);
                BOOL v28 = *(char **)(v7 + 24);
              }
              BOOL v8 = &v26[v27];
              *(void *)(v7 + 24) = &v28[8 * v24];
              *(void *)(v7 + 32) = &v26[v27];
            }
          }
          *(void *)BOOL v8 = v16;
        }
        *(void *)(v7 + 32) += 8;
LABEL_92:
        int v9 = *(char **)(v7 + 24);
        uint64_t v12 = *(void *)(v7 + 56);
        unint64_t v14 = *(void *)(v7 + 48) + v12;
LABEL_93:
        *(void *)(*(void *)&v9[(v14 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v14 & 0x1FF)) = a2;
        *(void *)(v7 + 56) = v12 + 1;
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v7 + 64));
LABEL_94:
        sub_1BB9C09B4(v5);
        return;
      }
    }
  }
  else
  {
    int v5 = 0;
  }
  if (a2)
  {
    uint64_t v29 = sub_1BBA6557C(a2);
    MEMORY[0x1C18605E0](v29, 0x10F2C404913AAE3);
  }
  if (v5) {
    goto LABEL_94;
  }
}

void sub_1BBA61CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v12);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  sub_1BB9C09B4(v11);
  _Unwind_Resume(a1);
}

void sub_1BBA61CE4(uint64_t a1)
{
  sub_1BBA616AC((uint64_t **)(a1 + 32), *(void *)(a1 + 24));
  int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BBA61D38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEDF0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);

  JUMPOUT(0x1C18605E0);
}

void sub_1BBA61DA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEDF0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BBA61E04(int **a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a2 + 56);
  std::mutex::lock((std::mutex *)(a2 + 56));
  int v5 = *(int **)(a2 + 144);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 128);
    int v5 = *(int **)(v6 + 16);
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 24);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  BOOL v8 = *(int **)(a2 + 192);
  if (!v8)
  {
    uint64_t v10 = 0;
    if (v5) {
      goto LABEL_9;
    }
LABEL_12:
    int v11 = -1;
    if (v8) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(a2 + 176);
  BOOL v8 = *(int **)(v9 + 16);
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 24);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5) {
    goto LABEL_12;
  }
LABEL_9:
  int v11 = *v5;
  if (v8)
  {
LABEL_10:
    int v12 = *v8;
    goto LABEL_14;
  }
LABEL_13:
  int v12 = -1;
LABEL_14:
  if (v11 <= v12)
  {
    unint64_t v13 = v10;
  }
  else
  {
    BOOL v8 = v5;
    unint64_t v13 = v7;
  }
  *a1 = v8;
  a1[1] = (int *)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10) {
    sub_1BB9C09B4(v10);
  }
  if (v7) {
    sub_1BB9C09B4(v7);
  }

  std::mutex::unlock(v4);
}

void sub_1BBA61EF4(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = (std::mutex *)(a2 + 56);
  std::mutex::lock((std::mutex *)(a2 + 56));
  unint64_t v7 = *(void *)(a2 + 144);
  if (v7 <= a3)
  {
LABEL_9:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_10;
  }
  BOOL v8 = (void *)(a2 + 128);
  if (a3)
  {
    for (uint64_t i = *(void **)(a2 + 136); i != v8; uint64_t i = (void *)i[1])
    {
      uint64_t v10 = (std::__shared_weak_count *)i[3];
      *a1 = i[2];
      a1[1] = v10;
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        if (--v7 == a3) {
          goto LABEL_10;
        }
        sub_1BB9C09B4(v10);
      }
      else if (--v7 == a3)
      {
        goto LABEL_10;
      }
    }
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(*v8 + 24);
  *a1 = *(void *)(*v8 + 16);
  a1[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_10:

  std::mutex::unlock(v6);
}

void sub_1BBA61FE0(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (std::mutex *)(a2 + 56);
  std::mutex::lock((std::mutex *)(a2 + 56));
  if (*(void *)(a2 + 144))
  {
    unint64_t v7 = (void *)(a2 + 128);
    while (v7 != *(void **)(a2 + 136))
    {
      unint64_t v7 = (void *)*v7;
      uint64_t v8 = v7[2];
      if (*(_DWORD *)(v8 + 148) == a3)
      {
        uint64_t v9 = v7[3];
        *a1 = v8;
        a1[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
LABEL_8:

  std::mutex::unlock(v6);
}

uint64_t sub_1BBA6207C(uint64_t a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 12872) = 0;
  if (!a2 || *(int *)(a1 + 3452) < 2 || *(void *)(a1 + 12800) != *(_DWORD *)(a1 + 3488)) {
    return 0;
  }
  int v3 = 0;
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 12768) + ((*(void *)(a1 + 12792) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * *(void *)(a1 + 12792));
  while (1)
  {
    uint64_t v6 = a1 + 4 * v4;
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 12768)
                               + (((unint64_t)(*(int *)(v6 + 3456) + *(void *)(a1 + 12792) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (*(_DWORD *)(v6 + 3456) + *(unsigned char *)(a1 + 12792) - 1));
    *(_DWORD *)(v7 + 648) = v5;
    uint64_t v8 = *(void *)(v7 + 584);
    int v9 = *(_DWORD *)(v8 + 10728);
    *(_DWORD *)(v7 + 728) = v9;
    if ((int)v4 >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        v9 += *(_DWORD *)(v8 + 10732 + 4 * v10);
        *(_DWORD *)(v7 + 728) = v9;
        ++v10;
      }
      while (v4 != v10);
    }
    uint64_t v11 = v4 << 32;
    *(_DWORD *)(v7 + 732) = *(_DWORD *)(v8 + 4 * (int)v4 + 10732) + v9;
    uint64_t result = sub_1BBA65B30(v7, 1);
    v26[0] = xmmword_1BBB6F950;
    v26[1] = xmmword_1BBB6F960;
    v26[2] = xmmword_1BBB6F970;
    int v13 = *(_DWORD *)(v7 + 2404);
    if (v13 <= 0) {
      break;
    }
    int v14 = *(unsigned __int8 *)(*(void *)(*(void *)(v7 + 1064) + 40) + 2000) - 8;
    int v15 = v14 >> 1;
    int v16 = v13 << (2 * *(unsigned char *)(v7 + 2392) - 6);
    int v17 = (*(_DWORD *)(v7 + 2400) + (v16 >> 1)) / v16;
    if (v4)
    {
      int v18 = *(_DWORD *)(v7 + 2412) << (2 * *(unsigned char *)(v7 + 2392) - 6);
      *(_DWORD *)(v7 + 2412) = v18;
      if ((double)v17 / (double)v3 < *(double *)((char *)v26 + 24 * v15 + ((v11 - 0x100000000) >> 29))
        && (v18 < (int)(dbl_1BBB7A360[(v11 - 0x100000000) >> 32]
                      * (double)((*(_DWORD *)(v7 + 788) * *(_DWORD *)(v7 + 784)) >> 6))
         || *(_DWORD *)(v7 + 2048) < 0xCu))
      {
        break;
      }
    }
    else
    {
      unsigned int v19 = *(_DWORD *)(v7 + 2048) >> v15;
      if (v19 >= 0x18) {
        unsigned int v19 = 24;
      }
      if (v19 <= 8) {
        unsigned int v19 = 8;
      }
      int v3 = v17;
      if (v17 >= dword_1BBB7A318[v19 - 8] << (v14 & 0xFE))
      {
        LODWORD(v4) = 0;
        break;
      }
    }
    v5 += *(_DWORD *)(v6 + 3456);
    if (++v4 >= *(int *)(a1 + 3452))
    {
      LODWORD(v4) = 0;
      uint64_t v7 = v25;
      break;
    }
  }
  *(_DWORD *)(a1 + 12876) = v4;
  if (*(_DWORD *)(a1 + 4 * v4 + 3456) == 8)
  {
    int v20 = *(_DWORD *)(v7 + 2404);
    if (v20 < 1) {
      goto LABEL_28;
    }
    int v21 = v20 << (2 * *(unsigned char *)(v7 + 2392) - 6);
    int v22 = (*(_DWORD *)(v7 + 2400) + (v21 >> 1)) / v21;
    unsigned int v23 = (*(_DWORD *)(v7 + 2416) + (v21 >> 1)) / v21;
    *(_DWORD *)(v7 + 2416) = v23;
    float v24 = 2.0;
    if (*(unsigned char *)(*(void *)(*(void *)(v7 + 1064) + 40) + 2000) == 8) {
      float v24 = 4.0;
    }
    if (v22 < (int)(float)((float)(*(_DWORD *)(v7 + 2048) * v23) / v24))
    {
LABEL_28:
      *(float *)(v7 + 2720) = (float)*(char *)(*(void *)(v7 + 584) + 3289);
      *(_DWORD *)(v7 + 652) = 0;
    }
  }
  *(unsigned char *)(v7 + 417) = 1;
  return result;
}

uint64_t sub_1BBA623E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v15 = 0uLL;
  if (!*(void *)a2)
  {
    uint64_t v9 = 4294954385;
LABEL_20:
    memset(buf, 0, sizeof(buf));
    sub_1BBA642D8(a1, v9, 0, 0, 0, 0, 0, a3, (uint64_t)buf);
    if (*(void *)&buf[8]) {
      sub_1BB9C09B4(*(std::__shared_weak_count **)&buf[8]);
    }
    goto LABEL_22;
  }
  *(void *)(*(void *)a2 + 288) = a3;
  int v5 = *(_DWORD *)(a1 + 3404);
  if (*(_DWORD *)(a1 + 11080) != v5)
  {
    int v6 = *(_DWORD *)(a1 + 3404);
    if (v5)
    {
      if (v5 != -2)
      {
LABEL_7:
        *(_DWORD *)(a1 + 11080) = v5;
        goto LABEL_8;
      }
      int v6 = 4096;
    }
    setpriority(3, 0, v6);
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v7 = *(uint64_t **)(a1 + 12752);
  dispatch_semaphore_wait((dispatch_semaphore_t)v7[8], 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v8 = v7[7];
  if (v8)
  {
    v7[7] = v8 - 1;
    sub_1BBA566AC(v7 + 2);
    goto LABEL_13;
  }
  uint64_t v10 = (char *)operator new(0xC18uLL, MEMORY[0x1E4FBA2D0]);
  if (v10)
  {
    *((void *)v10 + 3) = 0;
    *(_DWORD *)uint64_t v10 = 0;
    v10[4] = 0;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((_OWORD *)v10 + 22) = xmmword_1BBB7A050;
    *((void *)v10 + 46) = 0xBFF0000000000000;
    v10[417] = 0;
    *(_OWORD *)(v10 + 376) = 0u;
    *(_OWORD *)(v10 + 392) = 0u;
    v10[568] = 0;
    *((void *)v10 + 67) = 0;
    *((_OWORD *)v10 + 34) = 0u;
    *((_DWORD *)v10 + 144) = 0;
    *((_DWORD *)v10 + 161) = 0;
    *(_OWORD *)(v10 + 744) = 0u;
    *((void *)v10 + 79) = 0;
    *(_OWORD *)(v10 + 600) = 0u;
    *(_OWORD *)(v10 + 616) = 0u;
    *(_OWORD *)(v10 + 584) = 0u;
    *((_DWORD *)v10 + 215) = -1;
    *((_DWORD *)v10 + 243) = 1;
    long long v11 = *(_OWORD *)&off_1F14EF2B0;
    *(_OWORD *)(v10 + 1016) = xmmword_1F14EF2A0;
    *(_OWORD *)(v10 + 1032) = v11;
    *((_OWORD *)v10 + 106) = 0u;
    *((_OWORD *)v10 + 107) = 0u;
    *((_OWORD *)v10 + 108) = 0u;
    *((void *)v10 + 258) = 0;
    *(_OWORD *)(v10 + 2344) = 0u;
    *(_OWORD *)(v10 + 2360) = 0u;
    *(_OWORD *)(v10 + 2376) = 0u;
    *(_OWORD *)(v10 + 2488) = 0u;
    *(_OWORD *)(v10 + 1112) = 0u;
    *(_OWORD *)(v10 + 1128) = 0u;
    *(_OWORD *)(v10 + 1080) = 0u;
    *(_OWORD *)(v10 + 1096) = 0u;
    *((_OWORD *)v10 + 140) = 0u;
    *((_OWORD *)v10 + 139) = 0u;
    *((_OWORD *)v10 + 138) = 0u;
    *((_OWORD *)v10 + 137) = 0u;
    *((_OWORD *)v10 + 136) = 0u;
    *((_OWORD *)v10 + 135) = 0u;
    *((_OWORD *)v10 + 134) = 0u;
    *((_OWORD *)v10 + 133) = 0u;
    *((_OWORD *)v10 + 132) = 0u;
    *((_OWORD *)v10 + 131) = 0u;
    *((_OWORD *)v10 + 130) = 0u;
    *((_OWORD *)v10 + 168) = 0u;
    *((_OWORD *)v10 + 188) = 0u;
    *((_OWORD *)v10 + 190) = 0u;
    *((_WORD *)v10 + 1536) = 0;
LABEL_13:
    dispatch_semaphore_signal((dispatch_semaphore_t)v7[8]);
    uint64_t v12 = *v7;
    uint64_t v13 = v7[1];
    if (v13)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
      *(void *)std::string buf = v12;
      *(void *)&buf[8] = v13;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
    }
    else
    {
      *(void *)std::string buf = v12;
      *(void *)&buf[8] = 0;
    }
    operator new();
  }
  dispatch_semaphore_signal((dispatch_semaphore_t)v7[8]);
  long long v15 = 0u;
  uint64_t v9 = 4294954392;
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    goto LABEL_20;
  }
  *(_WORD *)std::string buf = 0;
  _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Unable to allocate frame_enc\n", buf, 2u);
  if (!(void)v15 || !*(unsigned char *)(v15 + 3073)) {
    goto LABEL_20;
  }
LABEL_22:
  if (*((void *)&v15 + 1)) {
    sub_1BB9C09B4(*((std::__shared_weak_count **)&v15 + 1));
  }
  return v9;
}

void sub_1BBA63C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,std::__shared_weak_count *a26)
{
  BOOL v28 = sub_1BB9C607C(v26);
  MEMORY[0x1C18605E0](v28, 0xC0C40B8AA526DLL);
  if (a19) {
    sub_1BB9C09B4(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1BBA63D3C(void *a1, long long *a2)
{
  uint64_t v4 = (char *)a1[2];
  int v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 32 * (v4 - v5) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x100)
    {
      a1[4] = v9 - 256;
      uint64_t v13 = *(void *)v5;
      long long v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          long long v43 = (char *)sub_1BB9C91CC(v42);
          unint64_t v45 = &v43[8 * (v42 >> 2)];
          BOOL v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            unint64_t v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)unint64_t v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          uint64_t v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          int v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            unsigned int v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            unsigned int v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      int v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = v8 + a1[4];
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    uint64_t v25 = (char *)a1[3];
    double v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      BOOL v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          uint64_t v54 = (char *)sub_1BB9C91CC(v52);
          int v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          double v56 = (uint64_t *)a1[1];
          uint64_t v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            uint64_t v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            unint64_t v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)unint64_t v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          uint64_t v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            int v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        char v63 = (char *)a1[1];
        int v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v64[-*a1] >> 2;
            }
            uint64_t v99 = (char *)sub_1BB9C91CC(v98);
            double v101 = &v99[8 * (v98 >> 2)];
            int v102 = (uint64_t *)a1[1];
            int v64 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              int v64 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              double v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)double v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            uint64_t v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v64;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              int v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            uint64_t v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              char v63 = (char *)a1[1];
            }
            int v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)int v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    int v31 = (char *)sub_1BB9C91CC(v30);
    uint64_t v33 = v32;
    unint64_t v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v111 = v35;
    uint64_t v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v111;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      uint64_t v76 = (char *)sub_1BB9C91CC(v75);
      unint64_t v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v108 = v37;
      long long v111 = v39;
      operator delete(v31);
      long long v37 = v108;
    }
    long long v39 = v111;
LABEL_56:
    *(void *)unint64_t v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        int64_t v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          uint64_t v87 = (char *)sub_1BB9C91CC(v86);
          double v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            unint64_t v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            uint64_t v92 = v80;
            uint64_t v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)uint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v109 = v37;
            long long v113 = v39;
            operator delete(v79);
            long long v37 = v109;
            long long v39 = v113;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          double v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            int64_t v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v37 + 1);
            uint64_t v112 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v110;
            *(void *)&long long v39 = v112;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        double v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    BOOL v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  long long v97 = *a2;
  *(_OWORD *)(*(void *)&v5[(v10 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v10) = *a2;
  if (*((void *)&v97 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = a1[5];
  }
  a1[5] = v8 + 1;
}

void sub_1BBA642A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void sub_1BBA642D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(a1 + 13288);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 13296);
    uint64_t v11 = a6;
    uint64_t v12 = a7;
    if (a7) {
      atomic_fetch_add_explicit(&a7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v9(v10, a8, a2, a3, a4, a5, &v11, a9);
    if (v12) {
      sub_1BB9C09B4(v12);
    }
  }
}

void sub_1BBA64350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1BB9C09B4(a10);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_1BBA64368(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD **)(a2 + 1096);
  uint64_t v5 = a1 + 12880;
  if (*(unsigned char *)(a2 + 640))
  {
    sub_1BBA1E5EC(a1 + 12880, *(unsigned int **)(a2 + 1096));
    sub_1BBA1E540(v5);
  }
  else
  {
    uint64_t v6 = -272;
    do
    {
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + v6 + 13176);
      *(_OWORD *)(a1 + v6 + 13168) = 0u;
      if (v7) {
        sub_1BB9C09B4(v7);
      }
      v6 += 16;
    }
    while (v6);
    *(_DWORD *)(a1 + 13248) = *(_DWORD *)(a2 + 644);
    *(_DWORD *)(a1 + 13284) = 0;
  }
  if (*(unsigned char *)a2) {
    goto LABEL_21;
  }
  *(unsigned char *)(*(void *)(a2 + 608) + 45) = 1;
  sub_1BBA1E5A8(v5, *(_DWORD *)(a2 + 432));
  uint64_t v17 = *(void *)(a2 + 608);
  if (!*(_DWORD *)(v17 + 36)) {
    goto LABEL_21;
  }
  uint64_t v18 = *(void *)(a2 + 40);
  int v19 = *(unsigned __int8 *)(v18 + 2025);
  LODWORD(v18) = *(unsigned __int8 *)(v18 + 2024);
  *(_DWORD *)(a1 + 13236) = *(_DWORD *)(v17 + 12);
  *(_DWORD *)(a1 + 13240) = v19;
  *(_DWORD *)(a1 + 13244) = v18;
  uint64_t v20 = *(std::__shared_weak_count **)(a2 + 616);
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v16 = sub_1BBA1E4D0(v5, v17, (uint64_t)v20);
    sub_1BB9C09B4(v20);
  }
  else
  {
    BOOL v16 = sub_1BBA1E4D0(v5, v17, 0);
  }
  *(unsigned char *)(*(void *)(a2 + 608) + 272) = 1;
  if (!v16)
  {
    if (*(double *)(a1 + 136) != 1.0 || *(_DWORD *)(a1 + 3688) != 1) {
      goto LABEL_23;
    }
LABEL_21:
    uint64_t v8 = 0;
    int v9 = 0;
    int v10 = *(_DWORD *)(*(void *)(a2 + 608) + 680);
    do
    {
      uint64_t v11 = *(void *)(a1 + 12896 + v8);
      if (v11) {
        LODWORD(v11) = (*(unsigned __int8 *)(v11 + 36) >> 1) & 1;
      }
      v9 += v11;
      v8 += 16;
    }
    while (v8 != 272);
    int v12 = *(char *)(a1 + 3334);
    BOOL v13 = v12 >= 1 && v9 < v12;
    if (v13 && v10 >= v12)
    {
      if (dword_1E9F80A90 >= 2)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: number of LTR frames (%d) is smaller than number of LTR allowed (%d) in DPB", v10, v9, v12);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109632;
          int v73 = v10;
          __int16 v74 = 1024;
          int v75 = v9;
          __int16 v76 = 1024;
          int v77 = v12;
          _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "[Poc %d]: number of LTR frames (%d) is smaller than number of LTR allowed (%d) in DPB", buf, 0x14u);
        }
      }
    }
    else
    {
LABEL_23:
      uint64_t v15 = *(void *)(a1 + 13272);
      if (!v15
        || !*(unsigned char *)(a1 + 3766)
        || !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v15 + 112))(v15, a2))
      {
        return 0;
      }
    }
    int v21 = *(_DWORD *)(*(void *)(a2 + 608) + 680);
    int64_t v22 = *(__int16 **)(a2 + 1112);
    unsigned int v23 = *(unsigned int **)(a2 + 1128);
    if (v22)
    {
      if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v73 = v21;
        _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "<<<<<< [Poc %d]: Short-term RPS >>>>>>\n", buf, 8u);
      }
      sub_1BBAE6060(v22);
    }
    if (v23)
    {
      if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v73 = v21;
        _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "<<<<<< [Poc %d]: Long-term RPS >>>>>>\n", buf, 8u);
      }
      sub_1BBAE66E0(v23);
    }
    int v71 = v21;
    if (!v4) {
      goto LABEL_128;
    }
    if (dword_1E9F80A90 >= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
        || (*(_DWORD *)std::string buf = 67109120,
            int v73 = v21,
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "<<<<<< [Poc %d]: RPS >>>>>>\n", buf, 8u), dword_1E9F80A90 >= 3))
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
          || (int v24 = *v4,
              *(_DWORD *)std::string buf = 67109120,
              int v73 = v24,
              _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "numPocTotalCurr: %d\n", buf, 8u),
              dword_1E9F80A90 >= 3))
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
            || (int v25 = v4[1],
                *(_DWORD *)std::string buf = 67109120,
                int v73 = v25,
                _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "numPocStCurrBefore: %d\n", buf, 8u), dword_1E9F80A90 >= 3))
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
              || (int v26 = v4[2],
                  *(_DWORD *)std::string buf = 67109120,
                  int v73 = v26,
                  _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "numPocStCurrAfter: %d\n", buf, 8u), dword_1E9F80A90 >= 3))
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
                || (int v27 = v4[3],
                    *(_DWORD *)std::string buf = 67109120,
                    int v73 = v27,
                    _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "numPocLtCurr: %d\n", buf, 8u), dword_1E9F80A90 >= 3))
              {
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
                  || (int v28 = v4[4],
                      *(_DWORD *)std::string buf = 67109120,
                      int v73 = v28,
                      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "numPocStFoll: %d\n", buf, 8u), dword_1E9F80A90 >= 3))
                {
                  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
                    || (int v29 = v4[5],
                        *(_DWORD *)std::string buf = 67109120,
                        int v73 = v29,
                        _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "numPocLtFoll: %d\n", buf, 8u), dword_1E9F80A90 >= 3))
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)std::string buf = 0;
                      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Short-term current before:\n", buf, 2u);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((int)v4[1] >= 1)
    {
      uint64_t v30 = 0;
      int v31 = (uint64_t *)(v4 + 6);
      uint64_t v32 = MEMORY[0x1E4F14500];
      do
      {
        uint64_t v33 = *v31;
        if (*v31)
        {
          if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_71;
          }
          int v34 = *(_DWORD *)(v33 + 680);
          *(_DWORD *)std::string buf = 67109120;
          int v73 = v34;
          long long v35 = v32;
          uint64_t v36 = "\tFrame poc: %d";
          uint32_t v37 = 8;
        }
        else
        {
          if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_71;
          }
          *(_WORD *)std::string buf = 0;
          long long v35 = v32;
          uint64_t v36 = "\tFrame is NULL\n";
          uint32_t v37 = 2;
        }
        _os_log_impl(&dword_1BB9B9000, v35, OS_LOG_TYPE_DEFAULT, v36, buf, v37);
LABEL_71:
        ++v30;
        v31 += 2;
      }
      while (v30 < (int)v4[1]);
    }
    if (dword_1E9F80A90 > 2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Short-term current after:\n", buf, 2u);
    }
    if ((int)v4[2] >= 1)
    {
      uint64_t v38 = 0;
      long long v39 = (uint64_t *)(v4 + 70);
      uint64_t v40 = MEMORY[0x1E4F14500];
      do
      {
        uint64_t v41 = *v39;
        if (*v39)
        {
          if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_85;
          }
          int v42 = *(_DWORD *)(v41 + 680);
          *(_DWORD *)std::string buf = 67109120;
          int v73 = v42;
          long long v43 = v40;
          uint64_t v44 = "\tFrame poc: %d";
          uint32_t v45 = 8;
        }
        else
        {
          if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_85;
          }
          *(_WORD *)std::string buf = 0;
          long long v43 = v40;
          uint64_t v44 = "\tFrame is NULL\n";
          uint32_t v45 = 2;
        }
        _os_log_impl(&dword_1BB9B9000, v43, OS_LOG_TYPE_DEFAULT, v44, buf, v45);
LABEL_85:
        ++v38;
        v39 += 2;
      }
      while (v38 < (int)v4[2]);
    }
    if (dword_1E9F80A90 > 2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Long-term current:\n", buf, 2u);
    }
    if ((int)v4[3] >= 1)
    {
      uint64_t v46 = 0;
      uint64_t v47 = (uint64_t *)(v4 + 134);
      uint64_t v48 = MEMORY[0x1E4F14500];
      do
      {
        uint64_t v49 = *v47;
        if (*v47)
        {
          if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_99;
          }
          int v50 = *(_DWORD *)(v49 + 680);
          *(_DWORD *)std::string buf = 67109120;
          int v73 = v50;
          uint64_t v51 = v48;
          unint64_t v52 = "\tFrame poc: %d";
          uint32_t v53 = 8;
        }
        else
        {
          if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_99;
          }
          *(_WORD *)std::string buf = 0;
          uint64_t v51 = v48;
          unint64_t v52 = "\tFrame is NULL\n";
          uint32_t v53 = 2;
        }
        _os_log_impl(&dword_1BB9B9000, v51, OS_LOG_TYPE_DEFAULT, v52, buf, v53);
LABEL_99:
        ++v46;
        v47 += 2;
      }
      while (v46 < (int)v4[3]);
    }
    if (dword_1E9F80A90 > 2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Short-term Foll:\n", buf, 2u);
    }
    if ((int)v4[4] >= 1)
    {
      uint64_t v54 = 0;
      uint64_t v55 = (uint64_t *)(v4 + 198);
      double v56 = MEMORY[0x1E4F14500];
      do
      {
        uint64_t v57 = *v55;
        if (*v55)
        {
          if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_113;
          }
          int v58 = *(_DWORD *)(v57 + 680);
          *(_DWORD *)std::string buf = 67109120;
          int v73 = v58;
          uint64_t v59 = v56;
          unint64_t v60 = "\tFrame poc: %d";
          uint32_t v61 = 8;
        }
        else
        {
          if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_113;
          }
          *(_WORD *)std::string buf = 0;
          uint64_t v59 = v56;
          unint64_t v60 = "\tFrame is NULL\n";
          uint32_t v61 = 2;
        }
        _os_log_impl(&dword_1BB9B9000, v59, OS_LOG_TYPE_DEFAULT, v60, buf, v61);
LABEL_113:
        ++v54;
        v55 += 2;
      }
      while (v54 < (int)v4[4]);
    }
    if (dword_1E9F80A90 > 2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Long-term Foll:\n", buf, 2u);
    }
    if ((int)v4[5] < 1)
    {
LABEL_128:
      sub_1BBA1F1B4(v5, v71);
      if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v73 = v71;
        _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Error occurred in encoding frame %d", buf, 8u);
      }
      BOOL v16 = 0;
      *(unsigned char *)(a2 + 436) = 1;
      return v16;
    }
    uint64_t v62 = 0;
    char v63 = (uint64_t *)(v4 + 262);
    int v64 = MEMORY[0x1E4F14500];
    while (1)
    {
      uint64_t v65 = *v63;
      if (*v63)
      {
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_127;
        }
        int v66 = *(_DWORD *)(v65 + 680);
        *(_DWORD *)std::string buf = 67109120;
        int v73 = v66;
        uint64_t v67 = v64;
        uint64_t v68 = "\tFrame poc: %d";
        uint32_t v69 = 8;
      }
      else
      {
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_127;
        }
        *(_WORD *)std::string buf = 0;
        uint64_t v67 = v64;
        uint64_t v68 = "\tFrame is NULL\n";
        uint32_t v69 = 2;
      }
      _os_log_impl(&dword_1BB9B9000, v67, OS_LOG_TYPE_DEFAULT, v68, buf, v69);
LABEL_127:
      ++v62;
      v63 += 2;
      if (v62 >= (int)v4[5]) {
        goto LABEL_128;
      }
    }
  }
  return v16;
}

void sub_1BBA64F94(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    if (*(void *)(a1 + 8))
    {
      unint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(void *)a1 + 24 * v3;
        uint64_t v5 = *(void **)v4;
        if (*(void *)v4)
        {
          uint64_t v6 = v5[1];
          if (v6) {
            MEMORY[0x1C18605A0](v6, 0x1000C8077774924);
          }
          uint64_t v7 = v5[2];
          if (v7) {
            MEMORY[0x1C18605A0](v7, 0x1000C8077774924);
          }
          uint64_t v8 = v5[3];
          if (v8) {
            MEMORY[0x1C18605A0](v8, 0x1000C8077774924);
          }
          uint64_t v9 = v5[4];
          if (v9) {
            MEMORY[0x1C18605A0](v9, 0x1000C80BDFB0063);
          }
          uint64_t v10 = v5[5];
          if (v10) {
            MEMORY[0x1C18605A0](v10, 0x1000C80BDFB0063);
          }
          uint64_t v11 = v5[6];
          if (v11) {
            MEMORY[0x1C18605A0](v11, 0x1000C80BDFB0063);
          }
          uint64_t v12 = v5[7];
          if (v12) {
            MEMORY[0x1C18605A0](v12, 0x1000C8077774924);
          }
          uint64_t v13 = v5[8];
          if (v13) {
            MEMORY[0x1C18605A0](v13, 0x1000C80BDFB0063);
          }
          uint64_t v14 = v5[9];
          if (v14) {
            MEMORY[0x1C18605A0](v14, 0x1000C8077774924);
          }
          uint64_t v15 = v5[10];
          if (v15) {
            MEMORY[0x1C18605A0](v15, 0x1000C80BDFB0063);
          }
          uint64_t v16 = v5[11];
          if (v16) {
            MEMORY[0x1C18605A0](v16, 0x1000C8077774924);
          }
          uint64_t v17 = v5[12];
          if (v17) {
            MEMORY[0x1C18605A0](v17, 0x1000C8077774924);
          }
          uint64_t v18 = v5[13];
          if (v18) {
            MEMORY[0x1C18605A0](v18, 0x1000C8077774924);
          }
          uint64_t v19 = v5[14];
          if (v19) {
            MEMORY[0x1C18605A0](v19, 0x1000C8077774924);
          }
          uint64_t v20 = v5[15];
          if (v20) {
            MEMORY[0x1C18605A0](v20, 0x1000C8077774924);
          }
          uint64_t v21 = v5[16];
          if (v21) {
            MEMORY[0x1C18605A0](v21, 0x1000C8077774924);
          }
          uint64_t v22 = v5[17];
          if (v22) {
            MEMORY[0x1C18605A0](v22, 0x1000C8077774924);
          }
          uint64_t v23 = v5[18];
          if (v23) {
            MEMORY[0x1C18605A0](v23, 0x1000C80BDFB0063);
          }
          uint64_t v24 = v5[19];
          if (v24) {
            MEMORY[0x1C18605A0](v24, 0x1000C80BDFB0063);
          }
          uint64_t v25 = 0;
          char v26 = 1;
          do
          {
            char v27 = v26;
            int v28 = &v5[v25];
            uint64_t v29 = v28[20];
            if (v29) {
              MEMORY[0x1C18605A0](v29, 0x1000C8052888210);
            }
            uint64_t v30 = v28[22];
            if (v30) {
              MEMORY[0x1C18605A0](v30, 0x1000C8077774924);
            }
            char v26 = 0;
            uint64_t v25 = 1;
          }
          while ((v27 & 1) != 0);
          uint64_t v31 = 0;
          char v32 = 1;
          do
          {
            uint64_t v33 = 0;
            char v34 = v32;
            char v35 = 1;
            do
            {
              char v36 = v35;
              uint64_t v37 = (uint64_t)&v5[2 * v31 + v33];
              uint64_t v38 = *(void *)(v37 + 192);
              if (v38) {
                MEMORY[0x1C18605A0](v38, 0x1000C8052888210);
              }
              uint64_t v39 = *(void *)(v37 + 224);
              if (v39) {
                MEMORY[0x1C18605A0](v39, 0x1000C80BDFB0063);
              }
              uint64_t v40 = (uint64_t)&v5[2 * v31 + v33];
              uint64_t v41 = *(void *)(v40 + 256);
              if (v41) {
                MEMORY[0x1C18605A0](v41, 0x1000C8052888210);
              }
              uint64_t v42 = *(void *)(v40 + 288);
              if (v42) {
                MEMORY[0x1C18605A0](v42, 0x1000C80BDFB0063);
              }
              char v35 = 0;
              uint64_t v33 = 1;
            }
            while ((v36 & 1) != 0);
            char v32 = 0;
            uint64_t v31 = 1;
          }
          while ((v34 & 1) != 0);
          uint64_t v43 = v5[40];
          if (v43) {
            MEMORY[0x1C18605A0](v43, 0x1000C8077774924);
          }
          uint64_t v44 = v5[41];
          if (v44) {
            MEMORY[0x1C18605A0](v44, 0x1000C8077774924);
          }
          for (uint64_t i = 0; i != 3; ++i)
          {
            uint64_t v46 = v5[i + 42];
            if (v46) {
              MEMORY[0x1C18605A0](v46, 0x1000C80BDFB0063);
            }
            uint64_t v47 = v5[i + 45];
            if (v47) {
              MEMORY[0x1C18605A0](v47, 0x1000C8052888210);
            }
          }
          uint64_t v48 = v5[48];
          if (v48) {
            MEMORY[0x1C18605A0](v48, 0x1000C8052888210);
          }
          uint64_t v49 = v5[49];
          if (v49) {
            MEMORY[0x1C18605A0](v49, 0x1000C8052888210);
          }
          for (uint64_t j = 0; j != 8; ++j)
          {
            uint64_t v51 = v5[j + 50];
            if (v51) {
              MEMORY[0x1C18605A0](v51, 0x1000C8077774924);
            }
            uint64_t v52 = v5[j + 58];
            if (v52) {
              MEMORY[0x1C18605A0](v52, 0x1000C8077774924);
            }
          }
          if (*(void *)v4)
          {
            free(*(void **)v4);
            *(void *)uint64_t v4 = 0;
            *(void *)(v4 + 8) = 0;
          }
        }
        ++v3;
      }
      while (v3 < *(void *)(a1 + 8));
      int v2 = *(void **)a1;
    }
    free(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1BBA65448(char **a1)
{
  int v2 = *a1;
  if (v2)
  {
    if (a1[1])
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = *a1;
        uint64_t v6 = &(*a1)[v3];
        uint64_t v7 = *((void *)v6 + 9911);
        if (v7) {
          dispatch_release(v7);
        }
        uint64_t v8 = (void *)*((void *)v6 + 9909);
        if (v8)
        {
          free(v8);
          *((void *)v6 + 9909) = 0;
          *((void *)v6 + 9910) = 0;
        }
        uint64_t v9 = &v5[v3];
        sub_1BBACBC3C((uint64_t)&v5[v3 + 79256]);
        uint64_t v10 = *(void **)&v5[v3 + 79240];
        if (v10)
        {
          free(v10);
          *(void *)&v5[v3 + 79240] = 0;
          *(void *)&v5[v3 + 79248] = 0;
        }
        sub_1BBACBCB4((char **)v9 + 9903);
        if (*((void *)v9 + 9881))
        {
          free(*((void **)v9 + 9881));
          *((void *)v9 + 9881) = 0;
          *((void *)v9 + 9882) = 0;
        }
        uint64_t v11 = (uint64_t)&v5[v3 + 78192];
        if (*(void *)v11)
        {
          free(*(void **)v11);
          *(void *)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
        }
        sub_1BBA17AC0(v6);
        ++v4;
        v3 += 79360;
      }
      while (v4 < (unint64_t)a1[1]);
      int v2 = *a1;
    }
    free(v2);
    *a1 = 0;
    a1[1] = 0;
  }
}

uint64_t sub_1BBA6557C(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 600);
  long long v3 = 0uLL;
  *(_OWORD *)(a1 + 592) = 0u;
  if (v2)
  {
    sub_1BB9C09B4(v2);
    long long v3 = 0uLL;
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 616);
  *(_OWORD *)(a1 + 608) = v3;
  if (v4) {
    sub_1BB9C09B4(v4);
  }
  if (*(void *)(a1 + 624))
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 632);
    *(_OWORD *)(a1 + 624) = 0u;
    if (v5) {
      sub_1BB9C09B4(v5);
    }
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void **)(a1 + 3040);
  if (v7)
  {
    free(v7);
    *(void *)(a1 + 3040) = 0;
    *(void *)(a1 + 3048) = 0;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 3016);
  if (v8) {
    sub_1BB9C09B4(v8);
  }
  sub_1BBA65448((char **)(a1 + 2688));
  uint64_t v9 = *(void *)(a1 + 1048);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 2696);
    if (v10) {
      MEMORY[0x1C18605E0](v10, 0x1000C4052888210);
    }
    *(void *)(v9 + 2696) = 0;
    uint64_t v11 = *(unsigned int *)(v9 + 2712);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 8 * v11;
      do
      {
        uint64_t v14 = *(void *)(v9 + 2704);
        uint64_t v15 = *(void **)(v14 + v12);
        if (!*v15 || (MEMORY[0x1C18605E0](*v15, 0x1000C4052888210), *(void *)(v14 + v12))) {
          MEMORY[0x1C18605A0]();
        }
        *(void *)(v14 + v12) = 0;
        v12 += 8;
      }
      while (v13 != v12);
    }
    uint64_t v16 = *(void *)(v9 + 2704);
    if (v16) {
      MEMORY[0x1C18605A0](v16, 0x80C80B8603338);
    }
    *(void *)(v9 + 2704) = 0;
    for (uint64_t i = 1496; i != 1240; i -= 16)
    {
      uint64_t v18 = (void *)(v9 + i);
      uint64_t v19 = *(void **)(v9 + i);
      if (v19)
      {
        free(v19);
        *uint64_t v18 = 0;
        v18[1] = 0;
      }
    }
    uint64_t v20 = *(void **)(v9 + 24);
    if (v20)
    {
      free(v20);
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
    }
    MEMORY[0x1C18605E0](v9, 0x10F0C405B151E0BLL);
  }
  uint64_t v21 = *(void **)(a1 + 2488);
  if (v21)
  {
    free(v21);
    *(void *)(a1 + 2488) = 0;
    *(void *)(a1 + 2496) = 0;
  }
  for (uint64_t j = 2376; j != 2328; j -= 16)
  {
    uint64_t v23 = (void *)(a1 + j);
    uint64_t v24 = *(void **)(a1 + j);
    if (v24)
    {
      free(v24);
      *uint64_t v23 = 0;
      v23[1] = 0;
    }
  }
  uint64_t v25 = *(void **)(a1 + 2240);
  if (v25)
  {
    free(v25);
    *(void *)(a1 + 2240) = 0;
    *(void *)(a1 + 2248) = 0;
  }
  char v26 = *(void **)(a1 + 2224);
  if (v26)
  {
    free(v26);
    *(void *)(a1 + 2224) = 0;
    *(void *)(a1 + 2232) = 0;
  }
  char v27 = *(void **)(a1 + 2208);
  if (v27)
  {
    free(v27);
    *(void *)(a1 + 2208) = 0;
    *(void *)(a1 + 2216) = 0;
  }
  int v28 = *(void **)(a1 + 2192);
  if (v28)
  {
    free(v28);
    *(void *)(a1 + 2192) = 0;
    *(void *)(a1 + 2200) = 0;
  }
  uint64_t v29 = *(void **)(a1 + 2176);
  if (v29)
  {
    free(v29);
    *(void *)(a1 + 2176) = 0;
    *(void *)(a1 + 2184) = 0;
  }
  uint64_t v30 = *(void **)(a1 + 2160);
  if (v30)
  {
    free(v30);
    *(void *)(a1 + 2160) = 0;
    *(void *)(a1 + 2168) = 0;
  }
  uint64_t v31 = *(void **)(a1 + 2144);
  if (v31)
  {
    free(v31);
    *(void *)(a1 + 2144) = 0;
    *(void *)(a1 + 2152) = 0;
  }
  char v32 = *(void **)(a1 + 2128);
  if (v32)
  {
    free(v32);
    *(void *)(a1 + 2128) = 0;
    *(void *)(a1 + 2136) = 0;
  }
  uint64_t v33 = *(void **)(a1 + 2112);
  if (v33)
  {
    free(v33);
    *(void *)(a1 + 2112) = 0;
    *(void *)(a1 + 2120) = 0;
  }
  char v34 = *(void **)(a1 + 2096);
  if (v34)
  {
    free(v34);
    *(void *)(a1 + 2096) = 0;
    *(void *)(a1 + 2104) = 0;
  }
  char v35 = *(void **)(a1 + 2080);
  if (v35)
  {
    free(v35);
    *(void *)(a1 + 2080) = 0;
    *(void *)(a1 + 2088) = 0;
  }
  sub_1BBA593D0((const void ***)(a1 + 2064), 0);
  sub_1BBA7F130(a1 + 1528);
  char v36 = *(void **)(a1 + 1128);
  if (v36)
  {
    free(v36);
    *(void *)(a1 + 1128) = 0;
    *(void *)(a1 + 1136) = 0;
  }
  uint64_t v37 = *(void **)(a1 + 1112);
  if (v37)
  {
    free(v37);
    *(void *)(a1 + 1112) = 0;
    *(void *)(a1 + 1120) = 0;
  }
  sub_1BBA7F194((char **)(a1 + 1096));
  sub_1BBA65448((char **)(a1 + 1080));
  uint64_t v38 = *(std::__shared_weak_count **)(a1 + 752);
  if (v38) {
    sub_1BB9C09B4(v38);
  }
  uint64_t v39 = *(std::__shared_weak_count **)(a1 + 632);
  if (v39) {
    sub_1BB9C09B4(v39);
  }
  uint64_t v40 = *(std::__shared_weak_count **)(a1 + 616);
  if (v40) {
    sub_1BB9C09B4(v40);
  }
  uint64_t v41 = *(std::__shared_weak_count **)(a1 + 600);
  if (v41) {
    sub_1BB9C09B4(v41);
  }
  sub_1BBA64F94(a1 + 392);
  uint64_t v42 = *(std::__shared_weak_count **)(a1 + 64);
  if (v42) {
    sub_1BB9C09B4(v42);
  }
  uint64_t v43 = *(std::__shared_weak_count **)(a1 + 48);
  if (v43) {
    sub_1BB9C09B4(v43);
  }
  return a1;
}

atomic_ullong *sub_1BBA658F8(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 1088;
  do
  {
    sub_1BBA56634((uint64_t *)(v3 + v2));
    v2 -= 40;
  }
  while (v2 != -80);
  uint64_t v4 = a1 + 1000;
  uint64_t v5 = a1 + 968;
  do
  {
    for (uint64_t i = 0; i != -80; i -= 40)
      sub_1BBA56634((uint64_t *)(v5 + i));
    v4 -= 120;
    v5 -= 120;
  }
  while (v4 != a1 + 160);
  uint64_t result = *(atomic_ullong **)(a1 + 120);
  if (result && !atomic_fetch_add(result + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *(uint64_t (**)(void))(*result + 16);
    return (atomic_ullong *)v8();
  }
  return result;
}

void sub_1BBA659D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEB28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C18605E0);
}

void sub_1BBA65A28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unsigned char *sub_1BBA65A48(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 16);
  if (result[33])
  {
    uint64_t v3 = *(void *)(a1 + 584);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 48))(result);
    if (result)
    {
      if (*(unsigned char *)(v3 + 3705))
      {
        BOOL v4 = 1;
      }
      else
      {
        uint64_t v5 = *(int **)(a1 + 592);
        if (v5[62] > 480) {
          goto LABEL_11;
        }
        double v6 = (double)(v5[70] * v5[69]);
        uint64_t v7 = *(void *)(a1 + 3008);
        unsigned int v8 = *(_DWORD *)(v7 + 72);
        uint64_t v9 = v7 + 976;
        uint64_t v10 = v7 + 120 * v8 + 136;
        if (v8 >= 7) {
          uint64_t v10 = 0;
        }
        if (v8 == 9) {
          uint64_t v10 = v9;
        }
        if (*(double *)(v10 + 8) * v6 <= 5299200.0) {
          BOOL v4 = *(float *)(a1 + 2720) > 30.0;
        }
        else {
LABEL_11:
        }
          BOOL v4 = 0;
      }
      *(unsigned char *)(*(void *)(a1 + 24) + 80) = v4;
    }
  }
  return result;
}

uint64_t sub_1BBA65B30(uint64_t a1, char a2)
{
  uint64_t v618 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 584);
  sub_1BBA61E04(&v607, *(void *)(v4 + 48));
  uint64_t v5 = v607;
  if (v607 && *((unsigned char *)v607 + 111))
  {
    *(unsigned char *)(a1 + 3024) |= *((unsigned char *)v607 + 108);
    *(unsigned char *)(a1 + 3025) |= *((unsigned char *)v5 + 109);
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 584) + 48);
  uint64_t v7 = (std::mutex *)(v6 + 56);
  std::mutex::lock((std::mutex *)(v6 + 56));
  LOBYTE(v6) = *(unsigned char *)(v6 + 44);
  std::mutex::unlock(v7);
  char v8 = *(unsigned char *)(a1 + 3025) | v6;
  *(unsigned char *)(a1 + 3025) = v8;
  if (v8)
  {
    if (*(unsigned char *)(a1 + 3026)) {
      *(unsigned char *)(a1 + 3026) = 0;
    }
    goto LABEL_14;
  }
  if (!*(_DWORD *)(a1 + 644))
  {
LABEL_14:
    uint64_t v9 = (unsigned char *)(a1 + 640);
    *(unsigned char *)(a1 + 640) = 0;
    *(float *)(a1 + 2720) = (float)*(char *)(v4 + 3289);
    goto LABEL_15;
  }
  if (*(unsigned char *)(v4 + 3237) || *(unsigned char *)(a1 + 3026))
  {
    *(unsigned char *)(a1 + 640) = 1;
    *(float *)(a1 + 2720) = (float)*(char *)(v4 + 3289);
  }
  else
  {
    int v97 = *(char *)(v4 + 108 * *(int *)(a1 + 648) + 3813);
    switch(v97)
    {
      case 'L':
        char v98 = 3;
        break;
      case 'R':
        char v98 = 4;
        break;
      case 'P':
        char v98 = 2;
        break;
      default:
        uint64_t v172 = 4294954394;
        goto LABEL_305;
    }
    *(unsigned char *)(a1 + 640) = v98;
  }
  uint64_t v9 = (unsigned char *)(a1 + 640);
  if (*(unsigned char *)(a1 + 3024) && !*(void *)sub_1BBA1E338(*(void *)(a1 + 584) + 12880, 2u)) {
    *uint64_t v9 = 0;
  }
LABEL_15:
  uint64_t v10 = *(void *)(a1 + 608);
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a1 + 644);
  uint64_t v11 = *(void *)(a1 + 592);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
  *(_DWORD *)(v10 + 32) = *(_DWORD *)(v11 + 32);
  uint64_t v12 = *(void *)(a1 + 584);
  uint64_t v13 = *(void *)(v12 + 13256);
  int v14 = *(_DWORD *)(v12 + 3688);
  if (v14 != 1)
  {
    if (v14) {
      goto LABEL_44;
    }
    int v15 = *(unsigned __int8 *)(*(void *)(v12 + 12688) + 198);
    goto LABEL_18;
  }
  int v23 = *(char *)(v12 + 3334);
  if (v23 >= 1)
  {
    uint64_t v24 = 0;
    int v25 = 0;
    do
    {
      uint64_t v26 = *(void *)(v12 + 12896 + v24);
      if (v26) {
        LODWORD(v26) = (*(unsigned __int8 *)(v26 + 36) >> 1) & 1;
      }
      v25 += v26;
      v24 += 16;
    }
    while (v24 != 272);
    if (v25 < v23 || !*(unsigned char *)(a1 + 640))
    {
      *(_DWORD *)(v10 + 40) = 1;
LABEL_37:
      if (*(_DWORD *)(v12 + 3688) != 1) {
        goto LABEL_44;
      }
      LOBYTE(v23) = *(unsigned char *)(v12 + 3334);
      goto LABEL_39;
    }
    int v15 = *(_DWORD *)(*(void *)(*(void *)(v12 + 12688) + 2048) + 1320) - 1;
LABEL_18:
    int v16 = *(_DWORD *)(v12 + 13280);
    uint64_t v17 = (uint64_t *)sub_1BBA1E338(v12 + 12880, 1u);
    uint64_t v18 = *v17;
    uint64_t v19 = (std::__shared_weak_count *)v17[1];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v18) {
      goto LABEL_25;
    }
    uint64_t v20 = (double *)(v12 + 3280);
    if (v13) {
      uint64_t v20 = (double *)(v13 + 416);
    }
    float v21 = *v20;
    if ((float)((float)(1000 * v15) / v21) > (float)v16 || (uint64_t v22 = *(void *)(a1 + 584), *(unsigned char *)(v22 + 320)))
    {
LABEL_25:
      uint64_t v10 = *(void *)(a1 + 608);
      *(_DWORD *)(v10 + 40) = 1;
      goto LABEL_26;
    }
    int v93 = v15 - *(char *)(v12 + 3333);
    BOOL v94 = __OFSUB__(v93, 1);
    int v95 = v93 - 1;
    if ((v95 < 0) ^ v94 | (v95 == 0))
    {
      BOOL v96 = sub_1BBA1E338(v12 + 12880, 1u);
      uint64_t v10 = *(void *)(a1 + 608);
      if (!*v96)
      {
        *(_DWORD *)(v10 + 40) = 1;
        goto LABEL_26;
      }
    }
    else
    {
      int v103 = v16 / v95;
      uint64_t v10 = *(void *)(a1 + 608);
      uint64_t v104 = 1000 * *(void *)(v10 + 16) / *(int *)(v10 + 32);
      uint64_t v105 = 1000 * *(void *)(v18 + 16);
      uint64_t v106 = *(int *)(v18 + 32);
      uint64_t v107 = *(int *)(v22 + 13284);
      uint64_t v108 = v105 / v106;
      if (v104 - v108 + v107 > v103)
      {
        *(_DWORD *)(v10 + 40) = 1;
        *(_DWORD *)(v22 + 13284) = v107 + v104 - v103 - v108;
        goto LABEL_26;
      }
    }
    *(_DWORD *)(v10 + 40) = 0;
LABEL_26:
    if (v19)
    {
      sub_1BB9C09B4(v19);
      uint64_t v10 = *(void *)(a1 + 608);
    }
    goto LABEL_37;
  }
LABEL_39:
  int v27 = *(_DWORD *)(v10 + 40);
  if ((_BYTE)v23)
  {
    if (v27 == 1)
    {
      int v28 = 2;
      goto LABEL_45;
    }
  }
  else if (v27 == 1)
  {
    *(_DWORD *)(v10 + 40) = 0;
  }
LABEL_44:
  int v28 = 1;
LABEL_45:
  *(_DWORD *)(v10 + 36) |= v28;
  uint64_t v29 = *(void *)(a1 + 2712);
  if (!v29) {
    goto LABEL_217;
  }
  int v30 = 6 * *(unsigned __int8 *)(*(void *)(a1 + 40) + 2000) - 48;
  int v31 = *(_DWORD *)(a1 + 452);
  if (v31 != 0x80000000) {
    *(_DWORD *)(v29 + 304) = v31 - v30;
  }
  int v32 = *(_DWORD *)(a1 + 460);
  if (v32 != 0x80000000) {
    *(_DWORD *)(v29 + 308) = v32 - v30;
  }
  int v33 = *(_DWORD *)(a1 + 456);
  if (v33 == 0x80000000)
  {
    int v34 = *(_DWORD *)(v29 + 312);
  }
  else
  {
    int v34 = v33 - v30;
    *(_DWORD *)(v29 + 312) = v34;
  }
  int v35 = *(_DWORD *)(v29 + 308);
  if (v34 != 0x80000000)
  {
    if (v35 == 0x80000000)
    {
      BOOL v203 = *(_DWORD *)(v29 + 280) < v34;
      uint64_t v37 = 280;
      if (v203) {
        uint64_t v37 = 312;
      }
      int v38 = *(_DWORD *)(v29 + v37);
      *(_DWORD *)(v29 + 280) = v38;
      int v39 = v38 + 3;
      if (v39 <= *(_DWORD *)(v29 + 284)) {
        int v39 = *(_DWORD *)(v29 + 284);
      }
      *(_DWORD *)(v29 + 284) = v39;
      goto LABEL_73;
    }
    *(_DWORD *)(v29 + 284) = v35;
    int v40 = v35 - 3;
    if (*(_DWORD *)(v29 + 280) < v40) {
      int v40 = *(_DWORD *)(v29 + 280);
    }
    *(_DWORD *)(v29 + 280) = v40;
    BOOL v203 = v40 < v34;
    uint64_t v41 = 280;
    if (v203) {
      uint64_t v41 = 312;
    }
    int v36 = *(_DWORD *)(v29 + v41);
LABEL_72:
    *(_DWORD *)(v29 + 280) = v36;
    goto LABEL_73;
  }
  if (v35 != 0x80000000)
  {
    *(_DWORD *)(v29 + 284) = v35;
    int v36 = v35 - 3;
    if (*(_DWORD *)(v29 + 280) < v35 - 3) {
      int v36 = *(_DWORD *)(v29 + 280);
    }
    goto LABEL_72;
  }
  if (*(int *)(*(void *)(v29 + 392) + 560) >= 2)
  {
    *(void *)(v29 + 280) = 0x2D00000025;
    if (!*(_DWORD *)(v29 + 916)) {
      goto LABEL_73;
    }
    int v36 = 40;
    goto LABEL_72;
  }
  uint64_t v90 = *(void *)(a1 + 3008);
  if (*(unsigned char *)(v90 + 111)) {
    BOOL v91 = (*(_DWORD *)(v29 + 320) & 0xFFFFFFFD) == 1;
  }
  else {
    BOOL v91 = 0;
  }
  if (!(****(unsigned int (*****)(void))(v29 + 840))(**(void **)(v29 + 840))) {
    goto LABEL_511;
  }
  uint64_t v99 = *(void *)(v29 + 392);
  int v100 = *(unsigned __int16 *)(v99 + 90);
  int v101 = *(unsigned __int16 *)(v99 + 92);
  if (v100 != v101)
  {
    if ((__int16)v101 * (__int16)v100 <= 230400 && *(double *)(v99 + 96) <= 30.0)
    {
      int v303 = *(__int16 *)(v29 + 8 * *(int *)(v29 + 16) + 24);
      if (v303 < 449)
      {
        if (v303 < 321)
        {
          if (v303 < 193) {
            int8x8_t v102 = (int8x8_t)0x2400000022;
          }
          else {
            int8x8_t v102 = (int8x8_t)0x2300000021;
          }
        }
        else
        {
          int8x8_t v102 = (int8x8_t)0x2200000020;
        }
      }
      else
      {
        int8x8_t v102 = (int8x8_t)0x230000001ELL;
      }
      goto LABEL_510;
    }
    if (*(_DWORD *)(v99 + 504))
    {
      uint64_t v235 = v29 + 8 * *(int *)(v29 + 16);
      if (*(__int16 *)(v235 + 24) >= 321 && *(float *)(v235 + 20) > 14.5)
      {
        int8x8_t v102 = (int8x8_t)0x210000001ALL;
        goto LABEL_510;
      }
LABEL_349:
      int8x8_t v102 = (int8x8_t)0x210000001CLL;
      goto LABEL_510;
    }
    int8x8_t v300 = (int8x8_t)0x2400000020;
    *(void *)(v29 + 280) = 0x2400000020;
    BOOL v301 = sub_1BBAAE39C(v29);
    int8x8_t v302 = (int8x8_t)0x2200000018;
LABEL_506:
    if (v301) {
      unsigned int v325 = -1;
    }
    else {
      unsigned int v325 = 0;
    }
    int8x8_t v102 = vbsl_s8((int8x8_t)vdup_n_s32(v325), v302, v300);
    goto LABEL_510;
  }
  if (!*(_DWORD *)(v99 + 504))
  {
    if (*(double *)(v90 + 136) > 1600000.0)
    {
      int8x8_t v102 = (int8x8_t)0x2400000020;
      goto LABEL_510;
    }
    int8x8_t v300 = (int8x8_t)0x2800000023;
    *(void *)(v29 + 280) = 0x2800000023;
    BOOL v301 = sub_1BBAAE39C(v29);
    int8x8_t v302 = (int8x8_t)0x2400000018;
    goto LABEL_506;
  }
  if ((__int16)v100 <= 96) {
    goto LABEL_349;
  }
  int8x8_t v102 = (int8x8_t)0x2800000023;
LABEL_510:
  *(int8x8_t *)(v29 + 280) = v102;
LABEL_511:
  int v326 = *(_DWORD *)(v29 + 320);
  switch(v326)
  {
    case 3:
      goto LABEL_515;
    case 2:
      goto LABEL_519;
    case 1:
LABEL_515:
      if ((****(unsigned int (*****)(void))(v29 + 840))(**(void **)(v29 + 840))
        && !*(void *)(v29 + 344))
      {
        break;
      }
      if (*(unsigned char *)(v29 + 324))
      {
        int32x2_t v327 = qword_1BBB89A08[6 * *(int *)(v29 + 340) + *(int *)(v29 + 336)];
LABEL_520:
        *(int32x2_t *)(v29 + 280) = v327;
        break;
      }
      if (!v91)
      {
        int32x2_t v327 = (int32x2_t)0x2B00000026;
        goto LABEL_520;
      }
LABEL_519:
      int32x2_t v327 = (int32x2_t)0x2D00000028;
      goto LABEL_520;
  }
  int v328 = *(_DWORD *)(*(void *)(v29 + 392) + 64);
  if (v328 == 43)
  {
    uint64_t v329 = 0x220000001ELL;
  }
  else
  {
    if (v328 != 39) {
      goto LABEL_73;
    }
    uint64_t v329 = 0x2600000021;
  }
  *(void *)(v29 + 280) = v329;
LABEL_73:
  uint64_t v42 = *(void *)(v29 + 392);
  if (*(char *)(v42 + 107) >= 1) {
    *(_DWORD *)(v29 + 280) = *(unsigned __int8 *)(v42 + 107);
  }
  int v43 = *(char *)(v42 + 108);
  if (v43 >= 1) {
    *(_DWORD *)(v29 + 284) = v43;
  }
  if (*(int *)(v4 + 3744) <= 1) {
    goto LABEL_217;
  }
  uint64_t v44 = *(void *)(a1 + 2712);
  uint64_t v45 = *(void *)(a1 + 3008);
  if (v44)
  {
    uint64_t v46 = *(unsigned int *)(v45 + 76);
    double v47 = -1000.0;
    if (v46 <= 6)
    {
      uint64_t v48 = *(int **)(*(void *)(v44 + 8 * v46 + 848) + 8);
      if (v48) {
        double v47 = (double)(1000 * *v48);
      }
    }
    int v49 = (int)(v47 / *(double *)(v45 + 120 * (int)v46 + 136));
  }
  else
  {
    int v49 = -1;
  }
  *(_DWORD *)(v45 + 80) = v49;
  sub_1BBA61EF4(&v609, *(void *)(*(void *)(v44 + 840) + 48), 0);
  if (v609) {
    int v50 = *(_DWORD *)(v609 + 152);
  }
  else {
    int v50 = 0;
  }
  if (*(_DWORD *)(v44 + 916))
  {
    if (*(_DWORD *)(v45 + 88)) {
      goto LABEL_151;
    }
  }
  else
  {
    unsigned int v51 = *(_DWORD *)(v45 + 76);
    int v52 = *(_DWORD *)(v45 + 80) / 1000 + v50 / -1000;
    if (v52 >= 3) {
      int v52 = 3;
    }
    int v53 = v52 & ~(v52 >> 31);
    *(_DWORD *)(v45 + 88) = v53;
    uint64_t v54 = (double *)(v45 + 976);
    uint64_t v55 = v45 + 120 * v51 + 136;
    if (v51 >= 7) {
      uint64_t v55 = 0;
    }
    if (v51 != 9) {
      uint64_t v54 = (double *)v55;
    }
    double v56 = *v54;
    double v57 = v54[1];
    uint64_t v58 = *(void *)(v44 + 536);
    double v59 = 0.0;
    if (*(void *)(v44 + 544) != v58)
    {
      unint64_t v60 = *(void *)(v44 + 560);
      uint32_t v61 = (char **)(v58 + 8 * (v60 >> 10));
      uint64_t v62 = *v61;
      char v63 = &(*v61)[4 * (v60 & 0x3FF)];
      uint64_t v64 = *(void *)(v58 + (((*(void *)(v44 + 568) + v60) >> 7) & 0x1FFFFFFFFFFFFF8))
          + 4 * ((*(void *)(v44 + 568) + v60) & 0x3FF);
      if (v63 != (char *)v64)
      {
        int v65 = 0;
        do
        {
          int v67 = *(_DWORD *)v63;
          v63 += 4;
          int v66 = v67;
          if (v63 - v62 == 4096)
          {
            uint64_t v68 = v61[1];
            ++v61;
            uint64_t v62 = v68;
            char v63 = v68;
          }
          v65 += v66;
        }
        while (v63 != (char *)v64);
        double v59 = (double)v65;
      }
    }
    uint64_t v69 = *(void *)(v44 + 488);
    double v70 = 1.0;
    if (*(void *)(v44 + 496) != v69)
    {
      unint64_t v71 = *(void *)(v44 + 512);
      uint64_t v72 = (char **)(v69 + 8 * (v71 >> 10));
      int v73 = *v72;
      __int16 v74 = &(*v72)[4 * (v71 & 0x3FF)];
      uint64_t v75 = *(void *)(v69 + (((*(void *)(v44 + 520) + v71) >> 7) & 0x1FFFFFFFFFFFFF8))
          + 4 * ((*(void *)(v44 + 520) + v71) & 0x3FF);
      if (v74 != (char *)v75)
      {
        int v76 = 0;
        do
        {
          int v78 = *(_DWORD *)v74;
          v74 += 4;
          int v77 = v78;
          if (v74 - v73 == 4096)
          {
            uint64_t v79 = v72[1];
            ++v72;
            int v73 = v79;
            __int16 v74 = v79;
          }
          v76 += v77;
        }
        while (v74 != (char *)v75);
        if (v76 >= 1) {
          double v70 = v59 / (double)v76 + 1.0;
        }
      }
    }
    int v80 = *(_DWORD *)(v45 + 36);
    double v81 = *(double *)(v45 + 56);
    uint64_t v82 = *(void *)(v44 + 8 * (int)v51 + 848);
    if (*(void *)(v82 + 376) < 3uLL)
    {
      float v92 = 0.0;
    }
    else
    {
      v597 = v9;
      uint64_t v601 = v4;
      __dst.int value = v82 + 384;
      LOBYTE(__dst.timescale) = 1;
      std::mutex::lock((std::mutex *)(v82 + 384));
      double v591 = v57;
      double v83 = v56;
      char v84 = a2;
      uint64_t v85 = *(void *)(v82 + 368);
      if (v85 == v82 + 360)
      {
        int v86 = 0;
        float v88 = 0.0;
      }
      else
      {
        int v86 = 0;
        uint64_t v87 = *(void *)(*(void *)(v82 + 360) + 16);
        float v88 = 0.0;
        do
        {
          if (v87 - *(void *)(v85 + 16) < *(_DWORD *)(v85 + 24) / 20)
          {
            ++v86;
            double v89 = (double)*(unint64_t *)(v85 + 32);
            float v88 = v88 + v89 * (exp2((*(float *)(v85 + 40) + -12.0) / 6.0) * 0.850000024);
          }
          uint64_t v85 = *(void *)(v85 + 8);
        }
        while (v85 != v82 + 360);
      }
      sub_1BB9D9FD4((uint64_t)&__dst);
      float v109 = (float)v86;
      a2 = v84;
      uint64_t v4 = v601;
      if (LOBYTE(__dst.timescale)) {
        std::mutex::unlock((std::mutex *)__dst.value);
      }
      int v53 = *(_DWORD *)(v45 + 88);
      float v92 = v88 / v109;
      uint64_t v9 = v597;
      double v56 = v83;
      double v57 = v591;
    }
    float v110 = v56 / v57;
    double v111 = v110;
    double v112 = v81 * 0.5 / (v70 + 0.5);
    if (v112 >= (double)v80) {
      double v112 = (double)v80;
    }
    float v113 = fmax((v111 - v112) / v70, 0.0);
    int v114 = (int)(v92 / (exp2(((double)*(int *)(v44 + 284) + -12.0) / 6.0) * 0.850000024 * v113) + -1.0);
    if (v114 >= 3) {
      int v114 = 3;
    }
    if (v114 <= v53) {
      int v114 = v53;
    }
    int v115 = v114 & ~(v114 >> 31);
    *(_DWORD *)(v45 + 88) = v115;
    if (v115) {
      goto LABEL_151;
    }
  }
  if (*(unsigned char *)(a1 + 640)
    && *(_DWORD *)(v44 + 920 + 4 * *(int *)(*(void *)(v44 + 392) + 560) - 4) >= *(_DWORD *)(v44
                                                                                                + 920
                                                                                                + 4
                                                                                                * *(int *)(v45 + 76)))
  {
    int v116 = *(_DWORD *)(v45 + 72);
    goto LABEL_154;
  }
LABEL_151:
  int v116 = *(_DWORD *)(v45 + 72);
  if (v116 >= 1)
  {
    *(_DWORD *)(v45 + 72) = 0;
    *(void *)(v44 + 360) = 1;
    *(_DWORD *)(*(void *)(a1 + 608) + 12) = 0;
    goto LABEL_155;
  }
LABEL_154:
  *(_DWORD *)(*(void *)(a1 + 608) + 12) = v116;
  if (v116) {
    goto LABEL_207;
  }
LABEL_155:
  if (*(_DWORD *)(v44 + 320) == 4) {
    goto LABEL_207;
  }
  uint64_t v602 = v4;
  uint64_t v117 = *(void *)(a1 + 3008);
  int v592 = *(_DWORD *)(v44 + 16);
  uint64_t v118 = *(void *)(v44 + 392);
  uint64_t v119 = *(unsigned int *)(v118 + 560);
  if ((int)v119 >= 1) {
    memcpy(&__dst, (const void *)(v44 + 920), 4 * v119);
  }
  if (!*(_DWORD *)(a1 + 644) || *(unsigned char *)(a1 + 3025) && !*(_DWORD *)(v44 + 424))
  {
    *(_DWORD *)(v44 + 4 * *(int *)(v117 + 76) + 920) = 0;
    unint64_t v128 = *(unsigned int *)(v117 + 76);
    if ((int)v128 >= 1)
    {
      double v129 = (double *)(v117 + 136 + 120 * v128);
      if (v128 >= 7) {
        double v129 = 0;
      }
      if (v128 == 9) {
        double v129 = (double *)(v117 + 976);
      }
      double v130 = *v129;
      do
      {
        uint64_t v131 = (v128 - 1);
        uint64_t v132 = v117 + 136 + 120 * v131;
        if (v128 >= 8) {
          uint64_t v132 = 0;
        }
        if (v131 == 9) {
          uint64_t v133 = (double *)(v117 + 976);
        }
        else {
          uint64_t v133 = (double *)v132;
        }
        double v134 = *v133;
        int v135 = *(_DWORD *)(v44 + 920 + 4 * v128);
        if (v134 != v130) {
          ++v135;
        }
        double v130 = v134;
        BOOL v203 = v128-- > 1;
        *(_DWORD *)(v44 + 4 * v128 + 920) = v135;
      }
      while (v203);
    }
    if (!*(unsigned char *)(a1 + 416))
    {
      double v136 = *(double *)(*(void *)(v44 + 840) + 128);
      double v137 = *(double *)(v44 + 952);
      do
      {
        if (v136 <= v137) {
          break;
        }
        if (*(int *)(v118 + 560) >= 1)
        {
          uint64_t v138 = 0;
          do
            ++*(_DWORD *)(v44 + 920 + 4 * v138++);
          while (v138 < *(int *)(v118 + 560));
        }
        double v136 = v136 * 0.5;
      }
      while (v136 > v137);
    }
    goto LABEL_193;
  }
  if (*(unsigned char *)(a1 + 416))
  {
LABEL_193:
    char v139 = 0;
    goto LABEL_194;
  }
  char v582 = a2;
  memset(&v612, 0, sizeof(v612));
  int v613 = 0;
  uint64_t v120 = *(int *)(v117 + 76);
  if (*(_DWORD *)(v44 + 920 + 4 * (int)v119 - 4) < *(_DWORD *)(v44 + 920 + 4 * v120))
  {
    sub_1BBA61EF4(&v614, *(void *)(*(void *)(a1 + 584) + 48), 0);
    if (v614.value)
    {
      unsigned int v121 = *(_DWORD *)(v117 + 76);
      long long v122 = (double *)(v117 + 976);
      uint64_t v123 = v117 + 120 * v121 + 136;
      if (v121 >= 7) {
        uint64_t v123 = 0;
      }
      if (v121 != 9) {
        long long v122 = (double *)v123;
      }
      uint64_t v124 = *(unsigned int *)(*(void *)(v44 + 392) + 560);
      while ((int)v124 >= 1)
      {
        uint64_t v125 = v124 - 1;
        double v126 = *(double *)(v614.value + 200 + 8 * v124--);
        if (*v122 >= v126)
        {
          int v127 = *(_DWORD *)(v44 + 920 + 4 * v125)
               - *(_DWORD *)(v44 + 920 + 4 * *(int *)(*(void *)(v44 + 392) + 560) - 4);
          goto LABEL_429;
        }
      }
    }
    int v127 = 0;
LABEL_429:
    if (*(void *)&v614.timescale) {
      sub_1BB9C09B4(*(std::__shared_weak_count **)&v614.timescale);
    }
    goto LABEL_431;
  }
  if ((v120 & 0x80000000) != 0) {
    goto LABEL_419;
  }
  unint64_t v240 = *(unsigned int *)(v117 + 76);
  v598 = v9;
  do
  {
    uint64_t v241 = *(void *)(v44 + 8 * v240 + 848);
    unint64_t v242 = *(void *)(v241 + 376);
    if (!v242) {
      goto LABEL_416;
    }
    v611.int value = v241 + 384;
    LOBYTE(v611.timescale) = 1;
    std::mutex::lock((std::mutex *)(v241 + 384));
    uint64_t v243 = v241 + 360;
    uint64_t v244 = *(void *)(v241 + 368);
    if (v244 == v241 + 360)
    {
      float v249 = 0.0;
      float v246 = 3.4028e38;
      float v248 = 0.0;
      float v247 = 0.0;
      float v245 = 0.0;
    }
    else
    {
      float v245 = 0.0;
      float v246 = 3.4028e38;
      float v247 = 0.0;
      float v248 = 0.0;
      float v249 = 0.0;
      uint64_t v250 = *(void *)(v241 + 368);
      do
      {
        float v251 = *(float *)(v250 + 40);
        float v249 = v249 + v251;
        unint64_t v252 = *(void *)(v250 + 32);
        float v247 = v247 + (float)v252;
        float v253 = exp2((v251 + -12.0) / 6.0) * 0.850000024 * (double)v252;
        float v248 = v248 + v253;
        if (v245 < v253) {
          float v245 = v253;
        }
        if (v246 > v253) {
          float v246 = v253;
        }
        uint64_t v250 = *(void *)(v250 + 8);
      }
      while (v250 != v243);
    }
    uint64_t v254 = *(void *)(*(void *)(a1 + 592) + 16);
    uint64_t v255 = *(void *)(v244 + 16);
    int v256 = *(_DWORD *)(v244 + 24);
    sub_1BB9D9FD4((uint64_t)&v611);
    float v257 = v247 / (float)((float)(v254 - v255) / (float)v256);
    *((float *)&v614.value + v240) = v257;
    float v258 = (float)v242;
    if (v242 < 4) {
      float v259 = v248 / v258;
    }
    else {
      float v259 = (float)((float)(v248 - v245) - v246) / (float)(v242 - 2);
    }
    uint64_t v9 = v598;
    if (LOBYTE(v611.timescale))
    {
      std::mutex::unlock((std::mutex *)v611.value);
      float v258 = (float)v242;
    }
    float v260 = (double *)(v117 + 136 + 120 * v240);
    if (v240 >= 7) {
      float v260 = 0;
    }
    if (v240 == 9) {
      float v260 = (double *)(v117 + 976);
    }
    if (v240 == *(_DWORD *)(v117 + 76))
    {
      float v261 = v257 * 1.25;
    }
    else
    {
      int v262 = *(_DWORD *)(v44 + 920 + 4 * v240) - *(_DWORD *)(v44 + 920 + 4 * (v240 + 1));
      if (v262 < 1) {
        float v261 = 3.4028e38;
      }
      else {
        float v261 = v257 + (float)((float)(*((float *)&v614.value + v240 + 1) - v257) / (float)v262);
      }
    }
    double v263 = *v260;
    double v264 = v260[1];
    uint64_t v265 = *(void *)(v44 + 536);
    if (*(void *)(v44 + 544) == v265
      || (unint64_t v266 = *(void *)(v44 + 560),
          v267 = (char **)(v265 + 8 * (v266 >> 10)),
          uint32_t v268 = *v267,
          int v269 = &(*v267)[4 * (v266 & 0x3FF)],
          uint64_t v270 = *(void *)(v265 + (((*(void *)(v44 + 568) + v266) >> 7) & 0x1FFFFFFFFFFFFF8))
               + 4 * ((*(void *)(v44 + 568) + v266) & 0x3FF),
          v269 == (char *)v270))
    {
      int v271 = 0;
    }
    else
    {
      int v271 = 0;
      do
      {
        int v273 = *(_DWORD *)v269;
        v269 += 4;
        int v272 = v273;
        if (v269 - v268 == 4096)
        {
          uint64_t v274 = v267[1];
          ++v267;
          uint32_t v268 = v274;
          int v269 = v274;
        }
        v271 += v272;
      }
      while (v269 != (char *)v270);
    }
    uint64_t v275 = *(void *)(v44 + 488);
    double v276 = 0.0;
    if (*(void *)(v44 + 496) != v275)
    {
      unint64_t v277 = *(void *)(v44 + 512);
      char v278 = (char **)(v275 + 8 * (v277 >> 10));
      uint64_t v279 = *v278;
      int v280 = &(*v278)[4 * (v277 & 0x3FF)];
      uint64_t v281 = *(void *)(v275 + (((*(void *)(v44 + 520) + v277) >> 7) & 0x1FFFFFFFFFFFFF8))
           + 4 * ((*(void *)(v44 + 520) + v277) & 0x3FF);
      if (v280 != (char *)v281)
      {
        int v282 = 0;
        do
        {
          int v284 = *(_DWORD *)v280;
          v280 += 4;
          int v283 = v284;
          if (v280 - v279 == 4096)
          {
            uint64_t v285 = v278[1];
            ++v278;
            uint64_t v279 = v285;
            int v280 = v285;
          }
          v282 += v283;
        }
        while (v280 != (char *)v281);
        if (v282 >= 1) {
          double v276 = (double)v271 / (double)v282;
        }
      }
    }
    double v286 = (double)*(int *)(v117 + 36);
    double v287 = v276 + 1.0;
    if (*(double *)(v117 + 56) * 0.5 / (v287 + 0.5) < v286) {
      double v286 = *(double *)(v117 + 56) * 0.5 / (v287 + 0.5);
    }
    if (v240 != *(_DWORD *)(v44 + 912) && !*(_DWORD *)(v44 + 916))
    {
      if (v263 * 1.05 >= v257)
      {
        if (v263 < v261) {
          goto LABEL_416;
        }
LABEL_414:
        int v288 = -1;
      }
      else
      {
LABEL_412:
        int v288 = 1;
      }
LABEL_415:
      *((_DWORD *)&v612.value + v240) = v288;
      goto LABEL_416;
    }
    int v288 = *(_DWORD *)(v117 + 88);
    if (v288) {
      goto LABEL_415;
    }
    float v289 = v263 / v264;
    float v290 = fmax((v289 - v286) / v287, 0.0);
    double v291 = (float)(v249 / v258);
    int v292 = *(_DWORD *)(v44 + 284);
    if ((float)v292 + -1.0 <= v291 && exp2(((double)v292 + -12.0) / 6.0) * 0.850000024 * v290 <= v259) {
      goto LABEL_412;
    }
    int v293 = *(_DWORD *)(v44 + 280);
    if ((float)v293 + 1.0 >= v291 && exp2(((double)v293 + -12.0) / 6.0) * 0.850000024 * v290 >= v259) {
      goto LABEL_414;
    }
LABEL_416:
    BOOL v203 = (uint64_t)v240-- <= 0;
  }
  while (!v203);
  uint64_t v120 = *(int *)(v117 + 76);
LABEL_419:
  int v127 = *((_DWORD *)&v612.value + v120);
LABEL_431:
  if ((*(unsigned int (**)(void))(***(void ***)(v44 + 840) + 16))(**(void **)(v44 + 840)))
  {
    int v297 = *(char *)(v44 + 761);
    if ((v297 & 0x80000000) == 0)
    {
      int v298 = *(char *)(v44 + 762);
      if ((v298 & 0x80000000) == 0)
      {
        int v299 = *(_DWORD *)(v44 + 16);
        if (v299 >= v298)
        {
          if (v299 > v298) {
            int v127 = -*(char *)(v44 + 763);
          }
        }
        else
        {
          int v127 = *(char *)(v44 + 763);
        }
      }
    }
    if (v127)
    {
      if (v127 < 1) {
        int v331 = -1;
      }
      else {
        int v331 = 1;
      }
      int v332 = *(_DWORD *)(v44 + 16);
      int v333 = -v127;
      do
      {
        sub_1BBAAC03C((void *)v44, v332 + v331);
        int v334 = *(_DWORD *)(v44 + 16);
        if (v334 != v332
          && *(float *)(v44 + 20 + 8 * v334) == *(float *)(v44 + 20 + 8 * v332)
          && (*(unsigned __int16 *)(v44 + 20 + 8 * v334 + 4) != *(unsigned __int16 *)(v44 + 20 + 8 * v332 + 4)
           || *(unsigned __int16 *)(v44 + 20 + 8 * v334 + 6) != *(unsigned __int16 *)(v44 + 20 + 8 * v332 + 6)))
        {
          v127 -= v331;
        }
        int v332 = *(_DWORD *)(v44 + 16);
        v333 += v331;
      }
      while (v333);
      LOBYTE(v297) = *(unsigned char *)(v44 + 761);
    }
    if ((v297 & 0x80) == 0)
    {
      int v335 = *(char *)(v44 + 762);
      if ((v335 & 0x80000000) == 0
        && (*(unsigned __int8 *)(v44 + 762) > v297 && *(_DWORD *)(v44 + 16) >= v335
         || *(unsigned __int8 *)(v44 + 762) < v297 && *(_DWORD *)(v44 + 16) <= v335))
      {
        *(unsigned char *)(v44 + 761) = v335;
        *(unsigned char *)(v44 + 762) = v297;
      }
    }
  }
  uint64_t v118 = *(void *)(v44 + 392);
  int v336 = *(_DWORD *)(v44 + 920 + 4 * *(int *)(v118 + 560) - 4);
  uint64_t v337 = *(int *)(v117 + 76);
  unint64_t v338 = *(unsigned int *)(v117 + 76);
  int v339 = *(_DWORD *)(v44 + 920 + 4 * v337);
  if (v336 >= v339) {
    int v340 = v127;
  }
  else {
    int v340 = v336 + v127 - v339;
  }
  *((_DWORD *)&v612.value + v337) = v340;
  if (*(_DWORD *)(v44 + 916))
  {
    a2 = v582;
    int v341 = 0;
    if ((v338 & 0x80000000) == 0)
    {
      unint64_t v342 = v338 + 1;
      int v343 = -(int)v338;
      double v344 = (int *)(v44 + 920);
      uint64_t v345 = &v612;
      do
      {
        int v347 = *v344++;
        int v346 = v347;
        int value = v345->value;
        uint64_t v345 = (CMTime *)((char *)v345 + 4);
        int v349 = v343 + v346 + value;
        if (v349 > v341) {
          int v341 = v349;
        }
        ++v343;
        --v342;
      }
      while (v342);
    }
    unsigned int v350 = *(_DWORD *)(v44 + 424);
    if (v350)
    {
      int v351 = -1;
      while (v350 > 1 << ++v351 && v350 >= 2 << v351)
        ;
      if (v341 >= v351 - (int)v338) {
        int v341 = v351 - v338;
      }
    }
    if ((v338 & 0x80000000) == 0)
    {
      char v353 = 0;
      uint64_t v354 = 4 * v338;
      int v355 = v341 - v338;
      uint64_t v356 = v44 + 920;
      do
      {
        int v357 = *(_DWORD *)(v356 + v354);
        int v358 = v355 + *(_DWORD *)(v117 + 76);
        *(_DWORD *)(v356 + v354) = v358;
        v353 |= v358 != v357;
        v354 -= 4;
        ++v355;
      }
      while (v354 != -4);
      goto LABEL_605;
    }
LABEL_604:
    char v353 = 0;
    goto LABEL_605;
  }
  a2 = v582;
  if ((v338 & 0x80000000) != 0) {
    goto LABEL_604;
  }
  uint64_t v359 = 0;
  char v353 = 0;
  uint64_t v360 = 4 * v338;
  uint64_t v361 = v117 + 120 * v338 + 256;
  unint64_t v362 = &v612;
  uint64_t v363 = v44;
  unint64_t v364 = v338;
  do
  {
    uint64_t v365 = v363 + v360;
    uint64_t v366 = (int *)(v365 + 920);
    int v367 = *(_DWORD *)(v363 + v360 + 920);
    int v368 = *((_DWORD *)&v362->value + v338) + v367;
    *(_DWORD *)(v365 + 920) = v368;
    if ((uint64_t)v364 < *(int *)(v117 + 76))
    {
      v369 = (double *)(v361 - 120);
      if (v364 >= 7) {
        v369 = 0;
      }
      if (4 * v338 - 36 == v359) {
        v369 = (double *)(v117 + 976);
      }
      if (v364 >= 6) {
        int32x2_t v370 = 0;
      }
      else {
        int32x2_t v370 = (double *)v361;
      }
      if (4 * v338 - 32 == v359) {
        int32x2_t v370 = (double *)(v117 + 976);
      }
      uint64_t v371 = (int *)(v365 + 924);
      int v372 = *(_DWORD *)(v365 + 924);
      if (v368 >= v372) {
        v373 = v366;
      }
      else {
        v373 = v371;
      }
      int v368 = *v373;
      if (*v369 == *v370) {
        int v368 = v372;
      }
    }
    unint64_t v362 = (CMTime *)((char *)v362 - 4);
    if (v368 >= 6) {
      int v368 = 6;
    }
    int v374 = v368 & ~(v368 >> 31);
    *uint64_t v366 = v374;
    v353 |= v367 != v374;
    v363 -= 4;
    v361 -= 120;
    v359 += 4;
    BOOL v203 = (uint64_t)v364-- <= 0;
  }
  while (!v203);
LABEL_605:
  char v139 = v353 & 1;
LABEL_194:
  uint64_t v140 = *(int *)(v118 + 560);
  LODWORD(v141) = *(_DWORD *)(v117 + 76);
  if ((int)v140 - 1 > (int)v141)
  {
    uint64_t v142 = v44 + 916;
    do
    {
      int v143 = *(_DWORD *)(v142 + 4 * v140);
      int v144 = *(_DWORD *)(v44 + 4 * (int)v141 + 920);
      *(_DWORD *)(v142 + 4 * v140) = v144;
      v139 |= v143 != v144;
      uint64_t v141 = *(int *)(v117 + 76);
      uint64_t v145 = v140 - 2;
      --v140;
    }
    while (v145 > v141);
  }
  if ((v139 & 1) != 0 || v592 != *(_DWORD *)(v44 + 16)) {
    *(void *)(v44 + 360) = 1;
  }
  if (*(int *)(v118 + 560) >= 1)
  {
    uint64_t v146 = 0;
    uint64_t v147 = v44 + 848;
    do
    {
      if (v592 != *(_DWORD *)(v44 + 16) || *((_DWORD *)&__dst.value + v146) != *(_DWORD *)(v147 + 4 * v146 + 72))
      {
        sub_1BB9C83D4((void *)(*(void *)(v147 + 8 * v146) + 360));
        uint64_t v118 = *(void *)(v44 + 392);
      }
      ++v146;
    }
    while (v146 < *(int *)(v118 + 560));
  }
  uint64_t v4 = v602;
LABEL_207:
  uint64_t v148 = *(unsigned int *)(*(void *)(v44 + 392) + 560);
  if ((int)v148 >= 1)
  {
    unint64_t v149 = 0;
    uint64_t v150 = v45 + 976;
    double v152 = *(double *)v45;
    uint64_t v151 = v45 + 136;
    double v153 = v152;
    do
    {
      if (v149 >= 7) {
        uint64_t v154 = 0;
      }
      else {
        uint64_t v154 = v151;
      }
      if (v149 == 9) {
        uint64_t v154 = v150;
      }
      *(double *)(v154 + 8) = v153 / (double)(1 << *(_DWORD *)(v44 + 920 + 4 * v149++));
      v151 += 120;
    }
    while (v148 != v149);
  }
  if (v610) {
    sub_1BB9C09B4(v610);
  }
LABEL_217:
  int v155 = *v9;
  if (*v9)
  {
    uint64_t v156 = v9;
    int v157 = *(_DWORD *)(a1 + 644);
    uint64_t v158 = *(void *)(a1 + 584);
    int v159 = *(_DWORD *)(v158 + 13248);
    uint64_t v160 = *(void *)(v158 + 48);
    std::mutex::lock((std::mutex *)(v160 + 56));
    int v161 = *(_DWORD *)(v160 + 36);
    std::mutex::unlock((std::mutex *)(v160 + 56));
    int v155 = v157 - v159 - v161;
    uint64_t v9 = v156;
  }
  int v162 = *(_DWORD *)(a1 + 728);
  int v163 = *(_DWORD *)(a1 + 732);
  if (v163 > v162)
  {
    int v164 = v163 - v162;
    BOOL v165 = (unsigned __int8 *)(v4 + 108 * v162 + 3814);
    while (1)
    {
      int v166 = *v165;
      v165 += 108;
      if (v155 == v166) {
        break;
      }
      ++v162;
      if (!--v164) {
        goto LABEL_225;
      }
    }
    *(_DWORD *)(a1 + 648) = v162;
  }
LABEL_225:
  int v167 = *v9;
  if ((v167 - 2) <= 2)
  {
    uint64_t v168 = v4 + 108 * *(int *)(a1 + 648);
    int v169 = *(char *)(v168 + 3815);
    *(float *)(a1 + 2720) = (float)(v169 + *(char *)(v4 + 3289));
    *(_DWORD *)(a1 + 652) = v169;
    *(_DWORD *)(a1 + 656) = *(unsigned __int8 *)(v168 + 3817);
  }
  uint64_t v170 = *(void *)(a1 + 608);
  if (!v170)
  {
    uint64_t v172 = 4294954392;
    goto LABEL_305;
  }
  *(_DWORD *)(v170 + 680) = v155;
  if (v167) {
    BOOL v171 = *(unsigned char *)(a1 + 3024) != 0;
  }
  else {
    BOOL v171 = 1;
  }
  *(unsigned char *)(v170 + 44) = v171;
  if (*(unsigned char *)(v4 + 3784))
  {
    *(_DWORD *)(v170 + 1224) = 0;
    *(void *)(v170 + 1216) = 0;
  }
  uint64_t v173 = *(void *)(a1 + 584);
  if (*(double *)(v173 + 136) == 0.5)
  {
    uint64_t v174 = *(void *)(a1 + 608);
    if ((*(_DWORD *)(v174 + 680) & 0x80000001) == 1) {
      *(_DWORD *)(v174 + 36) = 0;
    }
  }
  double v175 = operator new(0x188uLL);
  v175[1] = 0;
  v175[2] = 0;
  *double v175 = &unk_1F14EEBA0;
  *(void *)&long long v176 = sub_1BBA1DA04((uint64_t)(v175 + 3), v173 + 12880);
  *((void *)&v176 + 1) = v175;
  BOOL v177 = *(std::__shared_weak_count **)(a1 + 752);
  *(_OWORD *)(a1 + 744) = v176;
  if (v177) {
    sub_1BB9C09B4(v177);
  }
  uint64_t v178 = *(void *)(a1 + 584);
  int v179 = *(_DWORD *)(v178 + 1000);
  uint64_t v180 = *(void *)(a1 + 40);
  int v181 = *(_DWORD *)(v180 + 176);
  *(_DWORD *)(a1 + 784) = v181;
  int v182 = *(_DWORD *)(v180 + 180);
  *(_DWORD *)(a1 + 788) = v182;
  *(unsigned char *)(a1 + 781) = 0;
  *(void *)(a1 + 2480) = 0;
  *(void *)(a1 + 2512) = 0;
  *(void *)(a1 + 2520) = 0;
  *(void *)(a1 + 2504) = 0;
  *(void *)(a1 + 852) = 0x100000033;
  unsigned int v183 = *(unsigned __int8 *)(v180 + 2000);
  *(_DWORD *)(a1 + 792) = v183;
  uint64_t v184 = *(void *)(a1 + 1072);
  if (v184)
  {
    int v185 = *(unsigned __int8 *)(v178 + 3535);
    if (*(unsigned char *)(v178 + 3535))
    {
      int v186 = *(_DWORD *)(a1 + 2744);
      int v185 = v186 >= 5 ? 5 : *(_DWORD *)(a1 + 2744);
      *(_DWORD *)(a1 + 2524) = v185;
      if (v186 >= 1)
      {
        uint64_t v187 = v184 + 8 * *(int *)(v184 + 16);
        v188.i32[0] = *(__int16 *)(v187 + 24);
        v188.i32[1] = *(__int16 *)(v187 + 26);
        *(float32x2_t *)v189.f32 = vcvt_f32_s32(v188);
        v189.i64[1] = v189.i64[0];
        if (v185 <= 1) {
          uint64_t v190 = 1;
        }
        else {
          uint64_t v190 = v185;
        }
        int v191 = (int32x2_t *)(a1 + 2616);
        double v192 = (_OWORD *)(a1 + 2752);
        do
        {
          float32x4_t v193 = *(float32x4_t *)v192;
          double v192 = (_OWORD *)((char *)v192 + 28);
          int8x16_t v194 = (int8x16_t)vcvtq_s32_f32(vmulq_f32(v193, v189));
          *(int8x16_t *)v191[-11].i8 = v194;
          int32x2_t v195 = (int32x2_t)vextq_s8(v194, v194, 8uLL).u64[0];
          v191[-1] = vmax_s32(vsub_s32(*(int32x2_t *)v194.i8, vcvt_s32_f32(vmul_f32(vmul_f32(vcvt_f32_s32(v195), 0), (float32x2_t)0x3F0000003F000000))), 0);
          *int v191 = v195;
          v191 += 2;
          --v190;
        }
        while (v190);
      }
    }
  }
  else
  {
    int v185 = 0;
  }
  int v196 = *(_DWORD *)(a1 + 460);
  int v197 = *(_DWORD *)(a1 + 456);
  if ((*(_DWORD *)(a1 + 452) & 0x80000000) == 0 || (v196 & 0x80000000) == 0 || (v197 & 0x80000000) == 0)
  {
    int v198 = v196 < 0 ? 51 : *(_DWORD *)(a1 + 460);
    int v199 = v197 < 0 ? 1 : *(_DWORD *)(a1 + 456);
    if (v199 > v198)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_263;
      }
      LODWORD(__dst.value) = 67109376;
      HIDWORD(__dst.value) = v199;
      LOWORD(__dst.timescale) = 1024;
      *(CMTimeScale *)((char *)&__dst.timescale + 2) = v198;
      double v294 = MEMORY[0x1E4F14500];
      int v295 = "min allowed qp (%d) cannot exceed max allowed qp (%d)\n";
      uint32_t v296 = 14;
LABEL_421:
      _os_log_error_impl(&dword_1BB9B9000, v294, OS_LOG_TYPE_ERROR, v295, (uint8_t *)&__dst, v296);
      goto LABEL_263;
    }
  }
  if (v184 && v185 == 1)
  {
    uint64_t v200 = v184 + 8 * *(int *)(v184 + 16);
    int v201 = *(__int16 *)(v200 + 26);
    int v202 = *(__int16 *)(v200 + 24);
    if (*(unsigned char *)(v178 + 3535)) {
      BOOL v203 = v202 <= 191;
    }
    else {
      BOOL v203 = 1;
    }
    char v205 = !v203 && v201 > 191;
  }
  else
  {
    char v205 = 0;
  }
  *(unsigned char *)(a1 + 781) = v205;
  int v206 = *(_DWORD *)(v178 + 3688);
  if (v206)
  {
    char v207 = 0;
    int v208 = (unsigned char *)(a1 + 777);
    *(unsigned char *)(a1 + 777) = 0;
    float v209 = (unsigned char *)(a1 + 778);
    unsigned __int8 v210 = *(unsigned char *)(v178 + 3768) ^ 1;
    *(unsigned char *)(a1 + 778) = v210;
    if (v206 == 1)
    {
LABEL_287:
      double v211 = (unsigned char *)(a1 + 779);
      *(unsigned char *)(a1 + 779) = 1;
      int v212 = *(_DWORD *)(a1 + 444);
      goto LABEL_289;
    }
  }
  else
  {
    if ((*(char *)(v178 + 3239) <= 1 || *(_DWORD *)(v178 + 3692) == 2)
      && (*(int *)(a1 + 444) < 1 || *(char *)(v178 + 3309) <= 1))
    {
      char v207 = a2;
    }
    else
    {
      char v207 = 1;
    }
    int v208 = (unsigned char *)(a1 + 777);
    *(unsigned char *)(a1 + 777) = v207;
    float v209 = (unsigned char *)(a1 + 778);
    unsigned __int8 v210 = *(unsigned char *)(v178 + 3768) ^ 1;
    *(unsigned char *)(a1 + 778) = v210;
  }
  if (*(_DWORD *)(v178 + 3692) == 1) {
    goto LABEL_287;
  }
  int v212 = *(_DWORD *)(a1 + 444);
  double v211 = (unsigned char *)(a1 + 779);
  *(unsigned char *)(a1 + 779) = v212 != 0;
  if (v212)
  {
LABEL_289:
    if ((v212 - 1) >= 5) {
      goto LABEL_290;
    }
LABEL_292:
    BOOL v213 = *(unsigned char *)(v178 + 11056) == 0;
  }
  else
  {
LABEL_290:
    if (v210 | (v207 | v205)) {
      goto LABEL_292;
    }
    BOOL v213 = 0;
  }
  *(unsigned char *)(a1 + 776) = v213;
  *(unsigned char *)(a1 + 780) = *(unsigned char *)(v178 + 10989);
  if (!v206 && v212)
  {
    double v214 = sub_1BBA8272C;
    if ((*(unsigned char *)(v178 + 3309) & 0xFB) == 0) {
      double v214 = sub_1BBA82818;
    }
    *(void *)(a1 + 976) = v214;
  }
  *(unsigned char *)(a1 + 2032) = a2;
  if (*(_DWORD *)(v178 + 3692))
  {
    int v215 = 4;
    int v216 = 4;
  }
  else
  {
    int v215 = *(unsigned __int8 *)(v180 + 2008);
    int v216 = *(_DWORD *)(*(void *)(a1 + 56) + 1620);
  }
  *(_DWORD *)(a1 + 768) = v215;
  *(_DWORD *)(a1 + 772) = v216;
  int v217 = ~(-1 << v215);
  uint64_t v218 = ((v181 + v217) >> v215);
  *(void *)(a1 + 2056) = v218;
  if ((v215 - 5) <= 0xFFFFFFFC)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_303;
    }
    LODWORD(__dst.value) = 67109120;
    HIDWORD(__dst.value) = v215;
    uint64_t v236 = MEMORY[0x1E4F14500];
    v237 = "Unsupported log2_unit_size_ %d (update SpatialSumSad)\n";
LABEL_348:
    _os_log_error_impl(&dword_1BB9B9000, v236, OS_LOG_TYPE_ERROR, v237, (uint8_t *)&__dst, 8u);
    goto LABEL_303;
  }
  BOOL v220 = *(_DWORD *)(v178 + 3248) == 1 && *(__int16 *)(v178 + 3276) * *(__int16 *)(v178 + 3274) > 921600;
  *(unsigned char *)(a1 + 2034) = v220;
  *(void *)(a1 + 960) = 0x100000001;
  *(_DWORD *)(a1 + 968) = 1;
  uint64_t v221 = (void *)(a1 + 872);
  *(void *)(a1 + 936) = sub_1BBA82558;
  *(void *)(a1 + 944) = sub_1BBA82264;
  *(void *)(a1 + 952) = 0;
  int v222 = *(_DWORD *)(a1 + 860);
  if (!v222)
  {
    int v225 = *(unsigned __int8 *)(v178 + 3709);
    int v226 = v225 == 2 || v220;
    if (v225 == 1) {
      int v227 = 1;
    }
    else {
      int v227 = 2 * (v225 == 2);
    }
    *(_DWORD *)(a1 + 864) = v227;
    *(_DWORD *)(a1 + 868) = 3;
    if (v226 != 1) {
      goto LABEL_470;
    }
    int v228 = sub_1BBADF544;
    goto LABEL_324;
  }
  if (v183 == 8)
  {
    int v223 = *(unsigned __int8 *)(v178 + 3709);
    if (v223 == 2)
    {
      *(void *)(a1 + 872) = sub_1BBA81F78;
      *(void *)(a1 + 928) = sub_1BBA80F08;
    }
    else
    {
      if (v223 == 1) {
        double v224 = sub_1BBA820BC;
      }
      else {
        double v224 = sub_1BBA80D98;
      }
      *uint64_t v221 = v224;
    }
    if (v220)
    {
      *(void *)(a1 + 888) = sub_1BBA81F78;
      *(void *)(a1 + 928) = sub_1BBA80F08;
    }
    *(void *)(a1 + 880) = sub_1BBA80C7C;
    *(void *)(a1 + 896) = sub_1BBA80B3C;
    *(void *)(a1 + 904) = sub_1BBA809BC;
    int v232 = *(_DWORD *)(v178 + 3712);
    double v233 = sub_1BBA7F8F8;
    float v234 = sub_1BBA7FB40;
    if (v232 != 16)
    {
      if (v232 != 32) {
        goto LABEL_303;
      }
      double v233 = sub_1BBA7F974;
      float v234 = sub_1BBA7FBBC;
    }
  }
  else
  {
    if (v183 > 0xF) {
      goto LABEL_303;
    }
    int v223 = *(unsigned __int8 *)(v178 + 3709);
    if (v223 == 2)
    {
      BOOL v238 = v179 == 2016686640 || v179 == 2019963440;
      v239 = sub_1BBA803BC;
      if (v238) {
        v239 = sub_1BBA804F8;
      }
      *(void *)(a1 + 872) = v239;
      *(void *)(a1 + 928) = sub_1BBA80F08;
    }
    else
    {
      if (v223 == 1)
      {
        if (v179 == 2019963440 || v179 == 2016686640) {
          uint64_t v229 = sub_1BBA807F8;
        }
        else {
          uint64_t v229 = sub_1BBA8064C;
        }
      }
      else if (v179 == 2019963440 || v179 == 2016686640)
      {
        uint64_t v229 = sub_1BBA80240;
      }
      else
      {
        uint64_t v229 = sub_1BBA800D0;
      }
      *uint64_t v221 = v229;
    }
    if (v220)
    {
      BOOL v304 = v179 == 2016686640 || v179 == 2019963440;
      v305 = sub_1BBA803BC;
      if (v304) {
        v305 = sub_1BBA804F8;
      }
      *(void *)(a1 + 872) = v305;
      *(void *)(a1 + 928) = sub_1BBA80F08;
    }
    *(void *)(a1 + 880) = sub_1BBA7FFBC;
    *(void *)(a1 + 896) = sub_1BBA7FE78;
    *(void *)(a1 + 904) = sub_1BBA7FCF4;
    int v232 = *(_DWORD *)(v178 + 3712);
    double v233 = sub_1BBA7F860;
    float v234 = sub_1BBA7FAAC;
    if (v232 != 16)
    {
      if (v232 != 32) {
        goto LABEL_303;
      }
      double v233 = sub_1BBA7FA14;
      float v234 = sub_1BBA7FC60;
    }
  }
  *(void *)(a1 + 912) = v234;
  *(void *)(a1 + 920) = v233;
  if (v222 == 1)
  {
    *(void *)&long long v306 = 0x100000001;
    *((void *)&v306 + 1) = 0x100000001;
    *(_OWORD *)(a1 + 960) = v306;
    *(void *)(a1 + 936) = sub_1BBAE2A8C;
    *(void *)(a1 + 944) = sub_1BBAE07BC;
    *(void *)(a1 + 952) = 0;
    if (v183 == 8)
    {
      if (v223 == 2)
      {
        *(void *)(a1 + 872) = sub_1BBAE2734;
        *(_DWORD *)(a1 + 960) = 0;
        *(void *)(a1 + 928) = sub_1BBAE1920;
      }
      else
      {
        if (v223 == 1) {
          v307 = sub_1BBAE28B8;
        }
        else {
          v307 = sub_1BBAE17C8;
        }
        *uint64_t v221 = v307;
      }
      if (v220)
      {
        *(void *)(a1 + 888) = sub_1BBAE2734;
        *(void *)(a1 + 928) = sub_1BBAE1920;
        *(_DWORD *)(a1 + 968) = 0;
      }
      *(void *)(a1 + 880) = sub_1BBAE1684;
      *(_DWORD *)(a1 + 964) = 1;
      *(void *)(a1 + 896) = sub_1BBAE1518;
      *(void *)(a1 + 904) = sub_1BBAE1234;
      if (v232 == 32) {
        uint64_t v308 = sub_1BBAE10A0;
      }
      else {
        uint64_t v308 = sub_1BBAE115C;
      }
      *(void *)(a1 + 912) = v308;
      goto LABEL_470;
    }
    if (v223 != 2)
    {
      if (v223 == 1) {
        *uint64_t v221 = sub_1BBAE0F64;
      }
      goto LABEL_470;
    }
    *(void *)(a1 + 872) = sub_1BBAE0DB4;
    *(_DWORD *)(a1 + 960) = 0;
    int v228 = sub_1BBAE1920;
LABEL_324:
    *(void *)(a1 + 928) = v228;
  }
LABEL_470:
  v593 = v208;
  v599 = v209;
  v587 = v211;
  int v603 = v182;
  *(void *)(a1 + 1064) = a1;
  if (!*(void *)(a1 + 1104))
  {
    int v311 = (void **)(a1 + 1096);
    sub_1BBA7F194((char **)(a1 + 1096));
    if (!malloc_type_posix_memalign((void **)(a1 + 1096), 0x10uLL, 0x518uLL, 0x1020040448E6B38uLL))
    {
      int v321 = *v311;
      if (*v311)
      {
        *int v321 = 0;
        v321[1] = 0;
        bzero(v321 + 3, 0x500uLL);
        *(void *)(a1 + 1104) = 1;
        goto LABEL_471;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_497;
    }
    LOWORD(__dst.value) = 0;
    v312 = MEMORY[0x1E4F14500];
    uint64_t v313 = "RPS creation failed\n";
    goto LABEL_496;
  }
LABEL_471:
  uint64_t v172 = sub_1BBA61568((void **)(a1 + 1112), 1uLL);
  if (!v172)
  {
    if (*(void *)(a1 + 1136)) {
      goto LABEL_479;
    }
    v322 = (uint64_t *)(a1 + 1128);
    float v323 = *(void **)(a1 + 1128);
    if (v323)
    {
      free(v323);
      uint64_t *v322 = 0;
      *(void *)(a1 + 1136) = 0;
    }
    if (!malloc_type_posix_memalign((void **)(a1 + 1128), 0x10uLL, 0xDCuLL, 0x1000040EC76111FuLL))
    {
      uint64_t v324 = *v322;
      if (*v322)
      {
        *(void *)uint64_t v324 = 0;
        *(_DWORD *)(v324 + 216) = 0;
        *(void *)(a1 + 1136) = 1;
LABEL_479:
        *(_DWORD *)(a1 + 2320) = 0;
        *(void *)(a1 + 2328) = 0;
        *(_DWORD *)(a1 + 2336) = -1;
        *(_DWORD *)(a1 + 2036) = 0;
        *(void *)(a1 + 2044) = 0;
        *(void *)(a1 + 2472) = 0;
        *(_WORD *)(a1 + 2464) = 0;
        *(_OWORD *)(a1 + 2400) = 0u;
        *(_DWORD *)(a1 + 2416) = 0;
        *(void *)(a1 + 2424) = 0;
        *(void *)(a1 + 2440) = 0;
        *(void *)(a1 + 2432) = 0;
        *(unsigned char *)(a1 + 2466) = *(unsigned char *)(v178 + 10991);
        char v314 = *(unsigned char *)(v178 + 10992);
        if (v314) {
          char v314 = *(_DWORD *)(v178 + 3692) == 2;
        }
        int v315 = v603;
        *(unsigned char *)(a1 + 2467) = v314;
        *(_DWORD *)(a1 + 2392) = 3;
        int v316 = *(unsigned __int8 *)(v178 + 3437);
        int v317 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 1064) + 40) + 2009) - v316;
        *(_DWORD *)(a1 + 2520) = 0;
        *(void *)(a1 + 2504) = 0;
        *(void *)(a1 + 2512) = 0;
        int v318 = v317 - 3;
        *(_DWORD *)(a1 + 2396) = v318;
        if (v318 < 0)
        {
          if (!v316 || v318 != -1)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LOWORD(__dst.value) = 0;
              double v294 = MEMORY[0x1E4F14500];
              int v295 = "Motion block size is larger than LCU size!\n";
              uint32_t v296 = 2;
              goto LABEL_421;
            }
LABEL_263:
            uint64_t v172 = 4294954394;
            goto LABEL_304;
          }
          *(_DWORD *)(a1 + 2396) = 0;
        }
        int v319 = (v181 + 7) >> 3;
        int v583 = (v603 + 15) >> 4;
        int v580 = (v181 + 15) >> 4;
        size_t size = (v583 * v580 + 1);
        int v579 = (v603 + 7) >> 3;
        int v578 = v319;
        unint64_t v320 = (v579 * v319 + 1);
        if (*(unsigned char *)(a1 + 776))
        {
          uint64_t v172 = sub_1BBA39A24((void **)(a1 + 2080), (v579 * v319 + 1));
          if (v172)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_304;
            }
            LOWORD(__dst.value) = 0;
            int v309 = MEMORY[0x1E4F14500];
            int v310 = "8x8 SUM array creation failed\n";
            goto LABEL_474;
          }
          uint64_t v172 = sub_1BBA39A24((void **)(a1 + 2096), v320);
          if (v172)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_304;
            }
            LOWORD(__dst.value) = 0;
            int v309 = MEMORY[0x1E4F14500];
            int v310 = "8x8 SAD array creation failed\n";
            goto LABEL_474;
          }
          uint64_t v172 = sub_1BBA39A24((void **)(a1 + 2112), size);
          int v315 = v603;
          if (v172)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_304;
            }
            LOWORD(__dst.value) = 0;
            int v309 = MEMORY[0x1E4F14500];
            int v310 = "NxN SAD array creation failed\n";
            goto LABEL_474;
          }
        }
        if (*v599)
        {
          uint64_t v172 = sub_1BBA39A24((void **)(a1 + 2128), v320);
          int v315 = v603;
          if (v172)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_304;
            }
            LOWORD(__dst.value) = 0;
            int v309 = MEMORY[0x1E4F14500];
            int v310 = "DEV MEAN array creation failed\n";
            goto LABEL_474;
          }
        }
        if (*v593)
        {
          unint64_t v330 = (v218 * ((v315 + v217) >> v215));
          uint64_t v172 = sub_1BBA39A24((void **)(a1 + 2144), v330);
          if (v172)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_304;
            }
            LOWORD(__dst.value) = 0;
            int v309 = MEMORY[0x1E4F14500];
            int v310 = "Spatial Sum array creation failed\n";
            goto LABEL_474;
          }
          uint64_t v172 = sub_1BBA7F2C8((void **)(a1 + 2160), v330);
          int v315 = v603;
          if (v172)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_304;
            }
            LOWORD(__dst.value) = 0;
            int v309 = MEMORY[0x1E4F14500];
            int v310 = "Spatial Sum of Square array creation failed\n";
            goto LABEL_474;
          }
        }
        int v375 = (v181 + 31) >> 5;
        int v376 = (v315 + 31) >> 5;
        if (*(unsigned char *)(a1 + 780))
        {
          int v377 = *(_DWORD *)(v178 + 3712);
          unsigned int v378 = v583 * v580 + 1;
          if (v377 != 16)
          {
            unsigned int v378 = v376 * v375 + 1;
            if (v377 != 32)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                LODWORD(__dst.value) = 67109120;
                HIDWORD(__dst.value) = v377;
                uint64_t v236 = MEMORY[0x1E4F14500];
                v237 = "Block size (%d) for transition detection is not supported\n";
                goto LABEL_348;
              }
LABEL_303:
              uint64_t v172 = 4294954386;
              goto LABEL_304;
            }
          }
          uint64_t v172 = sub_1BBA39A24((void **)(a1 + 2176), v378);
          int v315 = v603;
          if (v172)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_304;
            }
            LOWORD(__dst.value) = 0;
            int v309 = MEMORY[0x1E4F14500];
            int v310 = "Spatial Sum array creation failed\n";
            goto LABEL_474;
          }
        }
        int v379 = (v181 + 63) >> 6;
        int v380 = (v315 + 63) >> 6;
        if (*v587)
        {
          if (*(_DWORD *)(v178 + 3688) == 1 || (int v381 = *(_DWORD *)(v178 + 3692), v381 == 1))
          {
            uint64_t v382 = a1 + 2208;
            unsigned int v383 = v583 * v580 + 1;
LABEL_619:
            sub_1BBA7F368(v382, v383);
            goto LABEL_620;
          }
          if (*(_DWORD *)(a1 + 444))
          {
            if (v381 == 2)
            {
              sub_1BBA7F368(a1 + 2192, v320);
              sub_1BBA7F368(a1 + 2208, size);
              uint64_t v382 = a1 + 2224;
              unsigned int v383 = v376 * v375 + 1;
            }
            else
            {
              switch(*(_DWORD *)(a1 + 772))
              {
                case 3:
                  goto LABEL_683;
                case 4:
                  goto LABEL_682;
                case 5:
                  goto LABEL_681;
                case 6:
                  sub_1BBA7F368(a1 + 2240, (v380 * v379 + 1));
LABEL_681:
                  sub_1BBA7F368(a1 + 2224, (v376 * v375 + 1));
LABEL_682:
                  sub_1BBA7F368(a1 + 2208, size);
LABEL_683:
                  sub_1BBA7F368(a1 + 2192, v320);
                  if (*(_DWORD *)(v178 + 3692) != 1
                    || *(_DWORD *)(a1 + 772) != 6
                    || (*(unsigned __int8 *)(v178 + 3309) | 4) == 4)
                  {
                    goto LABEL_620;
                  }
                  uint64_t v382 = a1 + 2240;
                  unsigned int v383 = v380 * v379 + 1;
                  break;
                default:
                  goto LABEL_620;
              }
            }
            goto LABEL_619;
          }
        }
LABEL_620:
        int v384 = *(void **)(a1 + 2192);
        if (v384) {
          bzero(v384, v320);
        }
        int v385 = *(void **)(a1 + 2208);
        if (v385) {
          bzero(v385, size);
        }
        int v386 = *(void **)(a1 + 2224);
        if (v386) {
          bzero(v386, (v376 * v375 + 1));
        }
        int v387 = *(void **)(a1 + 2240);
        if (v387)
        {
          bzero(v387, (v380 * v379 + 1));
          uint64_t v388 = *(void *)(a1 + 2240);
        }
        else
        {
          uint64_t v388 = 0;
        }
        *(void *)(a1 + 2256) = *(void *)(a1 + 2192);
        *(void *)(a1 + 2264) = *(void *)(a1 + 2208);
        *(void *)(a1 + 2272) = *(void *)(a1 + 2224);
        *(void *)(a1 + 2280) = v388;
        *(_DWORD *)(a1 + 2288) = v578;
        *(_DWORD *)(a1 + 2292) = v580;
        *(_DWORD *)(a1 + 2296) = v375;
        *(_DWORD *)(a1 + 2300) = v379;
        *(_DWORD *)(a1 + 2304) = v579;
        *(_DWORD *)(a1 + 2308) = v583;
        *(_DWORD *)(a1 + 2312) = v376;
        *(_DWORD *)(a1 + 2316) = v380;
        if (*(unsigned char *)(a1 + 781)) {
          sub_1BBA7F368(a1 + 2488, ((*(_DWORD *)(a1 + 788) * *(_DWORD *)(a1 + 784)) >> 6) + 7);
        }
        v600 = (void *)(a1 + 768);
        if (*(char *)(v178 + 3239) >= 2)
        {
          LODWORD(v389) = *(unsigned __int8 *)(v178 + 3353) - *(_DWORD *)v600;
          if (v389)
          {
            uint64_t v390 = 0;
            if (v389 <= 1) {
              uint64_t v389 = 1;
            }
            else {
              uint64_t v389 = v389;
            }
            unsigned int v391 = (void **)(a1 + 2344);
            uint64_t v392 = -v389;
            while (1)
            {
              uint64_t v172 = sub_1BBA39A24(v391, (((*(_DWORD *)(a1 + 784) + ~(-1 << (v390 + *(unsigned char *)(v178 + 3353)))) >> (v390 + *(unsigned char *)(v178 + 3353)))* ((*(_DWORD *)(a1 + 788) + ~(-1 << (v390 + *(unsigned char *)(v178 + 3353)))) >> (v390 + *(unsigned char *)(v178 + 3353)))));
              if (v172) {
                break;
              }
              v391 += 2;
              if (v392 == --v390) {
                goto LABEL_644;
              }
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_304;
            }
            LOWORD(__dst.value) = 0;
            int v309 = MEMORY[0x1E4F14500];
            int v310 = "diff_masking_cu_ creation failed\n";
LABEL_474:
            _os_log_error_impl(&dword_1BB9B9000, v309, OS_LOG_TYPE_ERROR, v310, (uint8_t *)&__dst, 2u);
            goto LABEL_304;
          }
        }
LABEL_644:
        *(void *)(a1 + 984) = sub_1BBA7F6FC;
        *(void *)(a1 + 1000) = sub_1BBA7F62C;
        *(void *)(a1 + 992) = sub_1BBA7F4C8;
        *(void *)(a1 + 1008) = sub_1BBA7F3F8;
        *(_DWORD *)(a1 + 796) = 0;
        *(_DWORD *)(a1 + 800) = 0;
        int v393 = *(_DWORD *)(a1 + 784);
        *(_DWORD *)(a1 + 804) = v393;
        int v394 = *(_DWORD *)(a1 + 788);
        *(_DWORD *)(a1 + 808) = v394;
        *(_DWORD *)(a1 + 828) = v393 >> 3;
        *(_DWORD *)(a1 + 832) = v394 >> 3;
        *(_DWORD *)(a1 + 836) = (v394 >> 3) * (v393 >> 3);
        *(_DWORD *)(a1 + 840) = v393 >> 4;
        *(_DWORD *)(a1 + 844) = v394 >> 4;
        *(_DWORD *)(a1 + 848) = (v394 >> 4) * (v393 >> 4);
        uint64_t v395 = *(void *)(a1 + 1072);
        if (v395)
        {
          if (!*(unsigned char *)(*(void *)(a1 + 592) + 136))
          {
            if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24)) & 1) == 0)
            {
              int v397 = *(_DWORD *)(a1 + 796);
              int v398 = *(_DWORD *)(a1 + 800);
              int v393 = *(_DWORD *)(a1 + 804);
              int v394 = *(_DWORD *)(a1 + 808);
              goto LABEL_661;
            }
            uint64_t v395 = *(void *)(a1 + 1072);
          }
          uint64_t v396 = *(_DWORD **)(*(void *)(a1 + 1064) + 24);
          int v397 = v396[9];
          *(_DWORD *)(a1 + 796) = v397;
          int v398 = v396[11];
          *(_DWORD *)(a1 + 800) = v398;
          uint64_t v399 = v395 + 8 * *(int *)(v395 + 16);
          int v393 = *(__int16 *)(v399 + 24);
          int v400 = v396[10];
          if (v400 + 1 < v393) {
            int v393 = v400 + 1;
          }
          *(_DWORD *)(a1 + 804) = v393;
          int v401 = *(__int16 *)(v399 + 26);
          int v402 = v396[12];
          if (v402 + 1 < v401) {
            int v394 = v402 + 1;
          }
          else {
            int v394 = v401;
          }
          *(_DWORD *)(a1 + 808) = v394;
        }
        else
        {
          int v398 = 0;
          int v397 = 0;
        }
LABEL_661:
        *(_DWORD *)(a1 + 812) = v397 >> 3;
        *(_DWORD *)(a1 + 816) = v398 >> 3;
        *(_DWORD *)(a1 + 820) = (v393 + 7) >> 3;
        *(_DWORD *)(a1 + 824) = (v394 + 7) >> 3;
        uint64_t v403 = *(void *)(a1 + 1048);
        if (v403)
        {
          uint64_t v172 = sub_1BBA39880(v403, a1, *(_DWORD *)(a1 + 836));
          if (v172)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_304;
            }
            LOWORD(__dst.value) = 0;
            int v309 = MEMORY[0x1E4F14500];
            int v310 = "Reference selector init failed\n";
            goto LABEL_474;
          }
        }
        if (!*(unsigned char *)(a1 + 640)) {
          memset_pattern16((void *)(a1 + 2448), &unk_1BBB701C0, 0x10uLL);
        }
        uint64_t v404 = *(void *)(a1 + 1064);
        uint64_t v581 = *(void *)(v404 + 584);
        memset(&v611, 0, sizeof(v611));
        CMTimeMake(&v611, *(void *)(*(void *)(v404 + 592) + 16), *(_DWORD *)(*(void *)(v404 + 592) + 32));
        sub_1BBA1CE40(*(void **)(a1 + 1096));
        uint64_t v405 = *(void *)(a1 + 1064);
        uint64_t v406 = *(void *)(v405 + 584);
        CMTime __dst = v611;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        if (*(unsigned char *)(a1 + 780))
        {
          uint64_t v407 = *(void *)(v405 + 592);
          if (v407)
          {
            int v408 = *(void **)(v406 + 72);
            if (v408)
            {
              if (*(_DWORD *)(a1 + 860))
              {
                int v409 = *(int **)(*(void *)(a1 + 1064) + 584);
                uint64_t v410 = v409[928];
                uint64_t v411 = v409[930];
                unsigned int v604 = v409[929];
                uint64_t v412 = *(int *)(v407 + 276);
                int v413 = *(_DWORD *)(v407 + 280);
                uint64_t v414 = *(void *)(v407 + 112);
                uint64_t v415 = v408[14];
                uint64_t v416 = (*(uint64_t (**)(uint64_t, void))(*(void *)v407 + 32))(v407, 0);
                uint64_t v417 = (*(uint64_t (**)(void, void))(**(void **)(v406 + 72) + 32))(*(void *)(v406 + 72), 0);
                int v588 = v413 & -(int)v410;
                if (v588 >= 1)
                {
                  uint64_t v418 = v417;
                  int v419 = 0;
                  int v420 = 0;
                  uint64_t v421 = v412 & -(int)v410;
                  unsigned int v422 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(a1 + 8 * v411 + 912);
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      int v594 = v420;
                      uint64_t v423 = 0;
                      uint64_t v424 = v419;
                      do
                      {
                        int v425 = (*v422)(v416 + v423, v418 + v423, v414, v415, 0, v604);
                        int v419 = v424 + 1;
                        *(_DWORD *)(*(void *)(a1 + 2176) + 4 * v424) = v425;
                        v423 += v410;
                        ++v424;
                      }
                      while (v423 < v421);
                      int v420 = v594;
                    }
                    v416 += v414 * v410;
                    v418 += v415 * v410;
                    v420 += v410;
                  }
                  while (v420 < v588);
                }
              }
              else
              {
                uint64_t v426 = *(void *)(v407 + 1248);
                if (!v426 || *(void *)(v407 + 88) != *(void *)(v407 + 192)) {
                  uint64_t v426 = *(void *)(v407 + 1232);
                }
                uint64_t v427 = v408[156];
                if (!v427 || v408[11] != v408[24]) {
                  uint64_t v427 = v408[154];
                }
                int v428 = *(_DWORD **)(*(void *)(a1 + 1064) + 584);
                if (*(_DWORD *)(v581 + 3712) == 16) {
                  uint64_t v429 = 4;
                }
                else {
                  uint64_t v429 = 5;
                }
                int v430 = v428[928];
                int8x8_t v431 = *(int8x8_t *)(v407 + 276);
                char v432 = *(void ***)(a1 + 2064);
                uint64_t v433 = *(void *)(a1 + 2176);
                int v434 = v428[929];
                int v435 = v428[930];
                uint64_t v436 = (void *)MEMORY[0x1C1860C30]();
                int8x8_t v437 = vand_s8(v431, (int8x8_t)vdup_n_s32(-v430));
                *(void *)&long long v438 = v437.u32[0];
                *((void *)&v438 + 1) = v437.u32[1];
                v439 = *v432;
                memset(&__dst, 0, sizeof(__dst));
                long long v616 = v438;
                uint64_t v617 = 1;
                HIDWORD(v573) = v434;
                LODWORD(v574) = v435;
                LODWORD(v573) = 0;
                objc_msgSend(v439, "SpatialDistance:prevFrame:distBlockArray:forRegion:blockStride:log2UnitSize:startLine:lineStep:method:", v426, v427, v433, &__dst, ((v430 + v437.i32[0] - 1) / v430), v429, v573, v574);
              }
            }
          }
        }
        CMTime __dst = v611;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        CMTime __dst = v611;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        uint64_t v440 = *(void *)(a1 + 1064);
        uint64_t v605 = *(void *)(v440 + 584);
        memset(&v612, 0, sizeof(v612));
        CMTimeMake(&v612, *(void *)(*(void *)(v440 + 592) + 16), *(_DWORD *)(*(void *)(v440 + 592) + 32));
        if (!*(unsigned char *)(a1 + 776)) {
          goto LABEL_765;
        }
        uint64_t v441 = *(void *)(*(void *)(a1 + 1064) + 584);
        uint64_t v442 = *(unsigned int *)(a1 + 784);
        unsigned int v443 = *(_DWORD *)(a1 + 788);
        if (*(_DWORD *)(a1 + 792) == 8)
        {
          uint64_t v444 = *(void *)(v440 + 592);
          if (*(unsigned char *)(v444 + 136))
          {
            uint64_t v445 = 240;
            if (*(int *)(v444 + 248) > 0) {
              uint64_t v445 = 248;
            }
            uint64_t v442 = *(unsigned int *)(v444 + v445);
            uint64_t v446 = 244;
            if (*(int *)(v444 + 252) > 0) {
              uint64_t v446 = 252;
            }
            unsigned int v443 = *(_DWORD *)(v444 + v446);
          }
        }
        int v447 = *(unsigned __int8 *)(v441 + 3309);
        unsigned int v589 = v443;
        int v448 = v443 * v442;
        int v595 = v448;
        if (*(unsigned char *)(a1 + 2034)) {
          BOOL v449 = v448 <= 921600;
        }
        else {
          BOOL v449 = 1;
        }
        int v450 = !v449;
        *(unsigned char *)(a1 + 2033) = v450;
        if (*(unsigned char *)(a1 + 777))
        {
          if (*(unsigned char *)(v441 + 3767)) {
            BOOL v451 = v447 == 4;
          }
          else {
            BOOL v451 = 1;
          }
          int v452 = v451;
          int sizea = v452;
        }
        else
        {
          int sizea = 0;
        }
        BOOL v453 = v447 != 0;
        uint64_t v454 = (_DWORD *)(a1 + 4 * v453 + 960);
        if (v450) {
          uint64_t v454 = (_DWORD *)(a1 + 968);
        }
        *(_DWORD *)(a1 + 972) = *v454;
        v455 = *(void **)(v440 + 592);
        unint64_t v456 = (__CVBuffer *)v455[156];
        if (!v456 || v455[11] != v455[24]) {
          unint64_t v456 = (__CVBuffer *)v455[154];
        }
        uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v456);
        if (*(_DWORD *)(a1 + 860))
        {
          if (!CVIsCompressedPixelFormatAvailable(PixelFormatType))
          {
            int v458 = *(void **)(v440 + 592);
            unint64_t v459 = (__CVBuffer *)v458[156];
            if (!v459 || v458[11] != v458[24]) {
              unint64_t v459 = (__CVBuffer *)v458[154];
            }
            IOSurface = CVPixelBufferGetIOSurface(v459);
            IOSurfaceLock(IOSurface, 4u, 0);
            memset(&v614, 0, sizeof(v614));
            CMTimeMake(&v614, *(void *)(*(void *)(*(void *)(a1 + 1064) + 592) + 16), *(_DWORD *)(*(void *)(*(void *)(a1 + 1064) + 592) + 32));
            CMTime __dst = v614;
            CMTimeGetSeconds(&__dst);
            kdebug_trace();
            uint64_t v461 = (*(uint64_t (**)(void, void, void, void))(**(void **)(v440 + 592) + 16))(*(void *)(v440 + 592), 0, 0, 0);
            uint64_t v462 = v461;
            uint64_t v463 = *(void *)(*(void *)(v440 + 592) + 112);
            if (*(unsigned char *)(a1 + 2033)) {
              int v464 = (void (**)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, uint64_t, uint64_t))(a1 + 888);
            }
            else {
              int v464 = (void (**)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, uint64_t, uint64_t))(a1 + 872 + 8 * v453);
            }
            (*v464)(v461, v463, v442, v589, *(void *)(a1 + 2080), *(int *)(a1 + 828), *(void *)(a1 + 2096), *(int *)(a1 + 828), a1 + 2320, a1 + 2328);
            if (sizea) {
              *(_DWORD *)(a1 + 2052) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void, void))(a1 + 768 + 8 * *(int *)(a1 + 768) + 104))(v462, v463, v442, v589, *(void *)(a1 + 2080), *(void *)(a1 + 2144), *(void *)(a1 + 2160));
            }
            IOSurfaceUnlock(IOSurface, 4u, 0);
          }
          *(_DWORD *)(a1 + 2336) = *(void *)(a1 + 2328) / (unint64_t)v595;
        }
        else
        {
          if (*(unsigned char *)(a1 + 2033)) {
            int v477 = 2;
          }
          else {
            int v477 = *(_DWORD *)(a1 + 4 * v453 + 864);
          }
          int v586 = v477;
          unsigned int v489 = *(_DWORD *)(a1 + 768);
          int v490 = *(_DWORD *)(a1 + 828);
          int v491 = *(void ***)(a1 + 2064);
          uint64_t v492 = *(void *)(a1 + 2080);
          uint64_t v493 = *(void *)(a1 + 2096);
          uint64_t v494 = *(void *)(a1 + 2144);
          uint64_t v495 = *(void *)(a1 + 2160);
          context = (void *)MEMORY[0x1C1860C30](PixelFormatType);
          int v496 = *v491;
          *(void *)&long long v497 = v442;
          *((void *)&v497 + 1) = v589;
          memset(&__dst, 0, sizeof(__dst));
          long long v616 = v497;
          uint64_t v617 = 1;
          LOBYTE(v576) = sizea;
          LODWORD(v575) = v490;
          HIDWORD(v575) = ((int)v442 + (1 << v489) - 1) >> v489;
          int v498 = objc_msgSend(v496, "SpatialSumSadVar:sumBlockArray:sadBlockArray:sumUnitArray:sumSquareUnitArray:sumTotal:sadTotal:variance:forRegion:blockStride:unitStride:method:log2UnitSize:calcVar:", v456, v492, v493, v494, v495, a1 + 2328, a1 + 2320, a1 + 2052, &__dst, v575, __PAIR64__(v489, v586), v576);
          *(_DWORD *)(a1 + 2336) = *(void *)(a1 + 2328) / (unint64_t)v595;
          if (v498)
          {
LABEL_766:
            switch(*(unsigned char *)(v605 + 3309))
            {
              case 0:
              case 1:
                unsigned int v503 = *(_DWORD *)(a1 + 2048);
                goto LABEL_769;
              case 2:
              case 4:
                unsigned int v503 = *(_DWORD *)(a1 + 2052);
                goto LABEL_769;
              case 3:
                unsigned int v503 = *(_DWORD *)(a1 + 2052);
                if (v503 >= 2)
                {
                  unsigned int v551 = __clz(v503);
                  unsigned int v552 = ((byte_1BBB8A634[(unint64_t)(v503 << (v551 + 1)) >> 24] << 12) | 0x200000u) >> ((v551 + 1) >> 1);
                  if ((v551 & 1) == 0) {
                    unsigned int v552 = (11585 * v552) >> 14;
                  }
                  unsigned int v503 = (v552 + 16) >> 5;
                }
LABEL_769:
                *(_DWORD *)(a1 + 2072) = v503;
                break;
              default:
                break;
            }
            uint64_t v504 = *(void *)(a1 + 1064);
            if (*(unsigned char *)(v605 + 3784)) {
              *(_DWORD *)(*(void *)(v504 + 608) + 1216) = *(_DWORD *)(a1 + 2040);
            }
            if (v498) {
              *(_DWORD *)(v504 + 444) = 0;
            }
            CMTime __dst = v611;
            CMTimeGetSeconds(&__dst);
            kdebug_trace();
            v505 = (unsigned char *)v581;
            if (*(unsigned char *)(*(void *)(a1 + 1064) + 640))
            {
              if (!*(unsigned char *)(v581 + 3768))
              {
                int v506 = sub_1BBA83D8C(v600);
                v505 = (unsigned char *)v581;
                if (v506) {
                  *(unsigned char *)(*(void *)(a1 + 1064) + 640) = 0;
                }
              }
              uint64_t v507 = *(void *)(a1 + 1048);
              if (v507)
              {
                uint64_t v509 = *(void *)(v507 + 8);
                int v508 = *(int **)(v509 + 1096);
                LODWORD(v509) = *(_DWORD *)(v509 + 656);
                uint64_t v509 = (int)v509 >= *v508 ? *v508 : v509;
                *(_DWORD *)(v507 + 2716) = v509;
                if ((int)v509 >= 1)
                {
                  LODWORD(v510) = 0;
                  uint64_t v511 = v508[1];
                  uint64_t v512 = v508[2];
                  int v513 = (unsigned int *)(v508 + 6);
                  BOOL v514 = (unsigned int *)(v508 + 70);
                  int v515 = (unsigned int *)(v508 + 134);
                  uint64_t v516 = v508[3];
                  do
                  {
                    if ((int)v511 >= 1)
                    {
                      uint64_t v517 = 0;
                      uint64_t v518 = (int)v510;
                      int v519 = v510;
                      int v520 = (_DWORD *)(*(void *)(v507 + 24) + 16 * (int)v510 + 4);
                      int v521 = v513;
                      do
                      {
                        uint64_t v522 = *(void *)v521;
                        v521 += 4;
                        *(v520 - 1) = *(_DWORD *)(v522 + 680);
                        *int v520 = v519 + v517++;
                        uint64_t v510 = v518 + v517;
                        if (v517 >= v511) {
                          break;
                        }
                        v520 += 4;
                      }
                      while (v510 < v509);
                    }
                    if ((int)v512 >= 1 && (int)v510 < (int)v509)
                    {
                      uint64_t v523 = 0;
                      uint64_t v524 = (int)v510;
                      int v525 = v510;
                      int v526 = (_DWORD *)(*(void *)(v507 + 24) + 16 * (int)v510 + 4);
                      uint64_t v527 = v514;
                      do
                      {
                        uint64_t v528 = *(void *)v527;
                        v527 += 4;
                        *(v526 - 1) = *(_DWORD *)(v528 + 680);
                        *int v526 = v525 + v523++;
                        if (v523 >= v512) {
                          break;
                        }
                        v526 += 4;
                      }
                      while (v524 + v523 < v509);
                      LODWORD(v510) = v524 + v523;
                    }
                    if ((int)v516 >= 1 && (int)v510 < (int)v509)
                    {
                      uint64_t v529 = 0;
                      uint64_t v530 = (int)v510;
                      int v531 = v510;
                      v532 = (_DWORD *)(*(void *)(v507 + 24) + 16 * (int)v510 + 4);
                      int v533 = v515;
                      do
                      {
                        uint64_t v534 = *(void *)v533;
                        v533 += 4;
                        *(v532 - 1) = *(_DWORD *)(v534 + 680);
                        _DWORD *v532 = v531 + v529++;
                        if (v529 >= v516) {
                          break;
                        }
                        v532 += 4;
                      }
                      while (v530 + v529 < v509);
                      LODWORD(v510) = v530 + v529;
                    }
                    LODWORD(v510) = v510 + 1;
                  }
                  while ((int)v510 < (int)v509);
                }
              }
            }
            if (v505[3400])
            {
              uint64_t v535 = *(void *)(a1 + 1064);
            }
            else
            {
              uint64_t v535 = *(void *)(a1 + 1064);
              if (v505[3409] != 1 && !*(unsigned char *)(*(void *)(v535 + 56) + 12))
              {
                if ((char)v505[3239] > 1 || *(unsigned char *)(v581 + 3791))
                {
                  v505 = (unsigned char *)v581;
                }
                else
                {
                  v505 = (unsigned char *)v581;
                  if (!*(unsigned char *)(a1 + 2032)) {
                    goto LABEL_883;
                  }
                }
              }
            }
            uint64_t v536 = *(void *)(v535 + 584);
            if (!*(unsigned char *)(a1 + 2032) && (!*(unsigned char *)(v536 + 3400) || !*(void *)(a1 + 1072))) {
              goto LABEL_883;
            }
            int v596 = v505[10993];
            unsigned int v606 = *(unsigned __int8 *)(v535 + 640);
            uint64_t v537 = *(void *)(v536 + 48);
            v538 = (std::mutex *)(v537 + 56);
            std::mutex::lock((std::mutex *)(v537 + 56));
            if (*(void *)(v537 + 216))
            {
              uint64_t v539 = *(void *)(v537 + 200);
              uint64_t v540 = *(void *)(v539 + 16);
              CMTime v541 = *(std::__shared_weak_count **)(v539 + 24);
              if (v541) {
                atomic_fetch_add_explicit(&v541->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              CMTime v541 = 0;
              uint64_t v540 = 0;
            }
            std::mutex::unlock(v538);
            sub_1BBA61FE0(&__dst, *(void *)(*(void *)(*(void *)(a1 + 1064) + 584) + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 1064) + 3008) + 72));
            *(void *)(a1 + 2424) = 0;
            *(void *)(a1 + 2432) = 0;
            *(void *)(a1 + 2440) = 0;
            unsigned int v543 = *(_DWORD *)(a1 + 2044);
            unsigned int v544 = v606;
            if (v543)
            {
              double v545 = (double)v543;
            }
            else
            {
              if (!__dst.value || v606 < 2)
              {
                double v546 = 0.0;
                if (!v540 || v606 > 1)
                {
LABEL_823:
                  if (v606 < 2)
                  {
                    *(_WORD *)(a1 + 2464) = 0;
                    if (*(unsigned char *)(*(void *)(a1 + 1064) + 640) == 4)
                    {
                      uint64_t v172 = 0;
                      *(void *)(a1 + 2472) = 0;
                      goto LABEL_875;
                    }
                    goto LABEL_851;
                  }
                  if (*(unsigned char *)(v536 + 3768))
                  {
                    if (!__dst.value)
                    {
                      double v550 = 0.0;
                      double v549 = 0.0;
                      goto LABEL_846;
                    }
                    LODWORD(v542) = *(_DWORD *)(__dst.value + 72);
                    double v547 = ((double)*(unint64_t *)&v542 + (double)(*(int *)(a1 + 848) >> 1))
                         / (double)*(int *)(a1 + 848);
                    double v548 = fabs(sqrt(v547)) * 0.5;
                    if (v547 == -INFINITY) {
                      double v549 = INFINITY;
                    }
                    else {
                      double v549 = v548;
                    }
                    *(double *)(a1 + 2424) = v549;
                    double v550 = v549;
LABEL_832:
                    *(double *)(a1 + 2440) = v549;
LABEL_846:
                    *(_WORD *)(a1 + 2464) = 0;
                    double v555 = 0.0;
                    if (*(unsigned char *)(*(void *)(a1 + 1064) + 640) != 4)
                    {
                      if (v546 <= 5.0 || *(unsigned char *)(a1 + 2467))
                      {
                        unsigned int v544 = v606;
                        goto LABEL_853;
                      }
                      unsigned int v544 = v606;
                      if (v549 <= v546 * 3.16227794)
                      {
LABEL_853:
                        double v555 = 0.0;
                        if (*(unsigned char *)(v536 + 3400))
                        {
                          CGRect v556 = *(double **)(a1 + 1072);
                          if (v556)
                          {
                            double v557 = *v556;
                            double v555 = v550;
                            if (*v556 > 0.0)
                            {
                              if (v557 * 0.85 <= v550 || *(unsigned char *)(a1 + 2467))
                              {
                                double v555 = (v550 + v557 * 7.0) * 0.125;
                              }
                              else
                              {
                                double v555 = (v557 + v550) * 0.5;
                                *(unsigned char *)(a1 + 2465) = 1;
                              }
                              unsigned int v544 = v606;
                            }
                            *CGRect v556 = v555;
                          }
                        }
                        goto LABEL_861;
                      }
LABEL_851:
                      *(double *)(a1 + 2424) = v546;
                      *(unsigned char *)(a1 + 2464) = 1;
                      double v550 = v546;
                      goto LABEL_853;
                    }
                    unsigned int v544 = v606;
LABEL_861:
                    uint64_t v172 = 0;
                    if (*(unsigned char *)(a1 + 2466)) {
                      double v558 = v550;
                    }
                    else {
                      double v558 = v555;
                    }
                    *(double *)(a1 + 2472) = v558;
                    if (v596 && v544 >= 2)
                    {
                      if (v550 >= v555 * 0.75)
                      {
                        uint64_t v172 = 0;
                        if (v550 > v555 * 1.25) {
                          *(double *)(a1 + 2472) = (v555 * 1.25 + v550) * 0.5;
                        }
                      }
                      else
                      {
                        uint64_t v172 = 0;
                        *(double *)(a1 + 2472) = v555 * 0.75;
                      }
                    }
LABEL_875:
                    if (*(void *)&__dst.timescale) {
                      sub_1BB9C09B4(*(std::__shared_weak_count **)&__dst.timescale);
                    }
                    if (v541) {
                      sub_1BB9C09B4(v541);
                    }
                    if (v172)
                    {
                      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                        goto LABEL_305;
                      }
                      LOWORD(__dst.value) = 0;
                      uint64_t v230 = MEMORY[0x1E4F14500];
                      float v231 = "Precompress failed\n";
LABEL_332:
                      _os_log_error_impl(&dword_1BB9B9000, v230, OS_LOG_TYPE_ERROR, v231, (uint8_t *)&__dst, 2u);
                      goto LABEL_305;
                    }
LABEL_883:
                    if (*(unsigned char *)(a1 + 781) && (!*(_DWORD *)(a1 + 2504) || !*(_DWORD *)(a1 + 2512)))
                    {
                      int v560 = *(_DWORD *)(a1 + 2508);
                      *(_DWORD *)(a1 + 2504) = v560;
                      int v561 = *(_DWORD *)(a1 + 2520);
                      *(_DWORD *)(a1 + 2512) = v561;
                      if (v560) {
                        BOOL v562 = v561 == 0;
                      }
                      else {
                        BOOL v562 = 1;
                      }
                      char v563 = !v562;
                      *(unsigned char *)(a1 + 781) = v563;
                    }
                    uint64_t v172 = 0;
                    goto LABEL_305;
                  }
                  uint64_t v172 = sub_1BBA69FB4(a1 + 1080, 1uLL);
                  if (v172)
                  {
                    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                      goto LABEL_875;
                    }
                    LOWORD(v614.value) = 0;
                    long long v553 = MEMORY[0x1E4F14500];
                    uint64_t v554 = "SliceEnc creation in precomp failed.\n";
                  }
                  else
                  {
                    uint64_t v172 = sub_1BBACBDDC(*(void *)(a1 + 1080), *(__n128 **)(a1 + 1064), 0, 1, 1);
                    if (!v172)
                    {
                      uint64_t v172 = sub_1BBAB1F58(a1 + 1144, *(_DWORD *)(*(void *)(*(void *)(a1 + 1080) + 79088) + 240), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 1080) + 1368) + 2000), *(_DWORD *)(*(void *)(*(void *)(a1 + 1080) + 79088) + 64), *(char *)(*(void *)(a1 + 1064) + 640));
                      if (v172) {
                        goto LABEL_875;
                      }
                      *(_OWORD *)(a1 + 1144) = 0u;
                      *(_DWORD *)(a1 + 1160) = 0x1000000;
                      *(_DWORD *)(a1 + 2512) = 0;
                      *(_DWORD *)(a1 + 2504) = 0;
                      uint64_t v564 = *(void *)(a1 + 1064);
                      char v565 = *(unsigned char *)(*(void *)(v564 + 40) + 2009);
                      uint64_t v566 = *(void *)(v564 + 608);
                      int v567 = ~(-1 << v565);
                      int v590 = (*(_DWORD *)(v566 + 280) + v567) >> v565;
                      if (v590)
                      {
                        int v568 = 0;
                        int v569 = (*(_DWORD *)(v566 + 276) + v567) >> v565;
                        do
                        {
                          if (v569)
                          {
                            for (int i = 0; i != v569; ++i)
                              sub_1BBA86978((unint64_t)v600, (i << v565), (v568 << v565), 0, a1 + 1144);
                          }
                          ++v568;
                        }
                        while (v568 != v590);
                      }
                      int v571 = *(_DWORD *)(a1 + 2404);
                      if (v571 <= 0)
                      {
                        *(void *)(a1 + 2424) = 0;
                        *(void *)(a1 + 2432) = 0;
                        *(void *)(a1 + 2440) = 0;
                        *(_WORD *)(a1 + 2464) = 0;
                        double v550 = 0.0;
                        double v555 = 0.0;
                        unsigned int v544 = v606;
                        if (*(unsigned char *)(*(void *)(a1 + 1064) + 640) != 4) {
                          goto LABEL_853;
                        }
                        goto LABEL_861;
                      }
                      double v550 = fabs(sqrt((double)((*(_DWORD *)(a1 + 2408) + (v571 >> 1)) / v571)));
                      *(double *)(a1 + 2424) = v550;
                      int v572 = v571 << (2 * *(unsigned char *)(a1 + 2392) - 6);
                      LODWORD(v559) = *(_DWORD *)(a1 + 2036);
                      double v546 = fabs(sqrt((double)v559));
                      *(double *)(a1 + 2432) = v546;
                      double v549 = fabs(sqrt((double)((*(_DWORD *)(a1 + 2400) + (v572 >> 1)) / v572)));
                      goto LABEL_832;
                    }
                    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                      goto LABEL_875;
                    }
                    LOWORD(v614.value) = 0;
                    long long v553 = MEMORY[0x1E4F14500];
                    uint64_t v554 = "SliceEnc initialization failed\n";
                  }
                  _os_log_error_impl(&dword_1BB9B9000, v553, OS_LOG_TYPE_ERROR, v554, (uint8_t *)&v614, 2u);
                  goto LABEL_875;
                }
                LODWORD(v542) = *(_DWORD *)(v540 + 72);
                double v542 = (double)*(unint64_t *)&v542 / (double)*(int *)(a1 + 848);
                double v546 = fabs(sqrt(v542)) * 0.5;
                BOOL v238 = v542 == -INFINITY;
                HIDWORD(v542) = 2146435072;
                if (v238) {
                  double v546 = INFINITY;
                }
LABEL_822:
                *(double *)(a1 + 2432) = v546;
                goto LABEL_823;
              }
              LODWORD(v542) = *(_DWORD *)(__dst.value + 84);
              double v545 = (double)*(unint64_t *)&v542;
            }
            double v542 = fabs(sqrt(v545));
            double v546 = v542 * 0.5;
            goto LABEL_822;
          }
        }
        CMTime __dst = v612;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        CMTimeEpoch v465 = *(void *)(a1 + 2112);
        unsigned int v466 = (const float *)(a1 + 784);
        int32x2_t v467 = (int32x2_t)vld1_dup_f32(v466);
        __dst.int value = *(void *)(a1 + 2096);
        *(void *)&__dst.timescale = v465;
        __dst.epoch = v465;
        *(void *)&long long v616 = v465;
        *(int32x2_t *)v468.i8 = vshl_s32(vadd_s32(v467, (int32x2_t)0xF00000007), (int32x2_t)0xFFFFFFFCFFFFFFFDLL);
        *(int32x4_t *)&v614.int value = vzip1q_s32(v468, vdupq_lane_s32(*(int32x2_t *)v468.i8, 1));
        int v469 = (*(_DWORD *)(a1 + 824) - *(_DWORD *)(a1 + 816)) * (*(_DWORD *)(a1 + 820) - *(_DWORD *)(a1 + 812));
        LODWORD(v465) = *(_DWORD *)(a1 + 2320);
        *(_DWORD *)(a1 + 2036) = (v465 + (*(int *)(a1 + 836) >> 1)) / *(_DWORD *)(a1 + 836);
        *(_DWORD *)(a1 + 2044) = (v465 + (*(int *)(a1 + 848) >> 1)) / *(_DWORD *)(a1 + 848);
        uint64_t v470 = ((int)v465 + (v469 >> 1)) / v469;
        *(_DWORD *)(a1 + 2040) = v470;
        if (v470 >= 2)
        {
          unsigned int v471 = __clz(v470);
          if (v471) {
            unsigned int v472 = ((byte_1BBB8A634[(unint64_t)(v470 << (v471 + 1)) >> 24] << 12) | 0x200000u) >> ((v471 + 1) >> 1);
          }
          else {
            unsigned int v472 = (11585
          }
                  * (((byte_1BBB8A634[(unint64_t)(v470 << (v471 + 1)) >> 24] << 12) | 0x200000u) >> ((v471 + 1) >> 1))) >> 14;
          uint64_t v470 = (v472 + 16) >> 5;
        }
        *(_DWORD *)(a1 + 2048) = v470;
        uint64_t v473 = *(void *)(a1 + 1064);
        if ((*(_DWORD *)(v473 + 444) - 6) >= 0xFFFFFFFB && v470)
        {
          uint64_t v474 = a1 + 2256;
          uint64_t v475 = a1 + 2288;
          unsigned int v476 = 3;
          while (!*(void *)(a1 + 8 * v476 + 2256))
          {
            if (--v476 == -1) {
              goto LABEL_760;
            }
          }
          uint64_t v478 = *(unsigned int *)(a1 + 796);
          int v479 = (int)v478 >> (v476 + 3);
          uint64_t v480 = *(unsigned int *)(a1 + 800);
          int v481 = *(_DWORD *)(a1 + 804);
          int v482 = (8 << v476) - 1;
          int v483 = -(8 << v476);
          int v484 = ((v481 + v482) & v483) >> (v476 + 3);
          int v485 = *(_DWORD *)(a1 + 808);
          int v486 = ((v485 + v482) & v483) >> (v476 + 3);
          uint64_t v487 = *(void *)(v473 + 584);
          signed int v488 = *(_DWORD *)(v487 + 10996);
          if (*(unsigned char *)(v487 + 3709) == 2 || *(unsigned char *)(a1 + 2033))
          {
            if (v476 == 2)
            {
              (*(void (**)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, uint64_t, uint64_t))(a1 + 928))(v474, v475, &__dst, &v614, v470, v478, v480);
              goto LABEL_760;
            }
            if (!*(_DWORD *)(a1 + 968))
            {
              sub_1BBA86F88(v474, v475, (uint64_t)&__dst, (uint64_t)&v614, v476, v470, v479, (int)v480 >> (v476 + 3), v484, v486, v481, v485, v488);
              goto LABEL_760;
            }
          }
          sub_1BBA8735C(v474, v475, (uint64_t)&__dst, (uint64_t)&v614, v476, v470, v479, (int)v480 >> (v476 + 3), v484, v486, v481, v485, v488);
        }
LABEL_760:
        CMTime __dst = v612;
        CMTimeGetSeconds(&__dst);
        kdebug_trace();
        if (*(unsigned char *)(a1 + 781) || *(unsigned char *)(a1 + 778))
        {
          uint64_t v499 = a1 + 16 * *(unsigned int *)(a1 + 972);
          uint64_t v500 = *(void (**)(void *))(v499 + 1016);
          uint64_t v501 = *(void *)(v499 + 1024);
          uint64_t v502 = (void *)((char *)v600 + (v501 >> 1));
          if (v501) {
            uint64_t v500 = *(void (**)(void *))(*v502 + v500);
          }
          v500(v502);
        }
LABEL_765:
        int v498 = 0;
        goto LABEL_766;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_497:
      uint64_t v172 = 4294954392;
      goto LABEL_304;
    }
    LOWORD(__dst.value) = 0;
    v312 = MEMORY[0x1E4F14500];
    uint64_t v313 = "long-term RPS creation failed\n";
LABEL_496:
    _os_log_error_impl(&dword_1BB9B9000, v312, OS_LOG_TYPE_ERROR, v313, (uint8_t *)&__dst, 2u);
    goto LABEL_497;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst.value) = 0;
    int v309 = MEMORY[0x1E4F14500];
    int v310 = "short-term RPS creation failed\n";
    goto LABEL_474;
  }
LABEL_304:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst.value) = 0;
    uint64_t v230 = MEMORY[0x1E4F14500];
    float v231 = "Pre-comp init failed\n";
    goto LABEL_332;
  }
LABEL_305:
  if (v608) {
    sub_1BB9C09B4(v608);
  }
  return v172;
}

void sub_1BBA697F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  int v36 = *(std::__shared_weak_count **)(v34 - 216);
  if (v36) {
    sub_1BB9C09B4(v36);
  }
  if (v33) {
    sub_1BB9C09B4(v33);
  }
  if (a29) {
    sub_1BB9C09B4(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BBA698B8(uint64_t a1)
{
  for (uint64_t i = 304; i != 32; i -= 16)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + i);
    if (v3) {
      sub_1BB9C09B4(v3);
    }
  }
}

void sub_1BBA698F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEBA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C18605E0);
}

void sub_1BBA69948(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14EEBA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1BBA69968(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  blockBufferOut[1] = *(CMBlockBufferRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = *(void **)(v4 + 13272);
  blockBufferOut[0] = 0;
  if (!*(_DWORD *)(a1 + 644))
  {
    uint64_t v2 = v5[8];
    uint64_t v3 = v5[6];
  }
  *(void *)(a1 + 3064) = v2;
  *(void *)(a1 + 3056) = v3;
  uint64_t v6 = (OpaqueCMBlockBuffer *)(*(uint64_t (**)(void *))(*v5 + 96))(v5);
  if (!v6)
  {
    uint64_t appended = 4294954394;
    goto LABEL_43;
  }
  uint64_t v7 = v6;
  Datasize_t Length = CMBlockBufferGetDataLength(v6);
  if (*(unsigned char *)(*(void *)(a1 + 16) + 33))
  {
    size_t v9 = DataLength;
    uint64_t v48 = 0;
    size_t v49 = 0;
    size_t v47 = 0;
    uint64_t appended = (*(uint64_t (**)(void *, size_t *, size_t *, uint64_t *))(*v5 + 104))(v5, &v49, &v47, &v48);
    if (appended) {
      goto LABEL_43;
    }
    size_t v11 = v47;
    memptr = 0;
    uint64_t v46 = 0;
    sub_1BBA12730(&memptr, 0x40uLL, 0x10uLL);
    uint64_t v12 = memptr;
    *((_OWORD *)memptr + 2) = 0u;
    v12[3] = 0u;
    *uint64_t v12 = 0u;
    v12[1] = 0u;
    v40[0] = 0;
    v40[1] = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = 0;
    if (v12 && v46)
    {
      v40[2] = v12;
      uint64_t v41 = v12;
      uint64_t v42 = (char *)v12 + v46;
      uint64_t v43 = bswap32(*(_DWORD *)v12);
      char v44 = 0;
    }
    uint64_t v13 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 24) + 152))(*(void *)(a1 + 24), v40);
    uint64_t v19 = MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18);
    float v21 = (char *)&v38 - v20;
    size_t v22 = 0;
    if (v19)
    {
      int v23 = 0;
      uint64_t v24 = (unsigned __int8 *)memptr;
      int v25 = v21;
      do
      {
        unsigned int v26 = *v24;
        if (v23 == 2)
        {
          if (v26 > 3)
          {
            int v23 = 2;
          }
          else
          {
            int v23 = 0;
            *v25++ = 3;
            ++v22;
            unsigned int v26 = *v24;
          }
        }
        if (v26) {
          int v23 = 0;
        }
        else {
          ++v23;
        }
        ++v24;
        *v25++ = v26;
        ++v22;
        --v19;
      }
      while (v19);
    }
    size_t v27 = *(void *)(a1 + 384);
    size_t v28 = v22 + v11;
    if (*(_DWORD *)(v4 + 3688) == 1 || v28 < v27 && !*(void *)(*(void *)(a1 + 584) + 1112))
    {
      if (v28 < v27) {
        v22 += sub_1BBAB1884((uint64_t)v21, v22, v27 - v11);
      }
      uint64_t appended = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, 0, v47, 0, blockBufferOut);
      if (appended) {
        goto LABEL_33;
      }
      uint64_t appended = CMBlockBufferAppendMemoryBlock(blockBufferOut[0], 0, v22, 0, 0, 0, v22, 1u);
      if (appended) {
        goto LABEL_33;
      }
      uint64_t appended = CMBlockBufferReplaceDataBytes(v21, blockBufferOut[0], v47, v22);
      if (appended) {
        goto LABEL_33;
      }
      dataPointerOut = 0;
      uint64_t appended = CMBlockBufferGetDataPointer(v7, v49, 0, 0, &dataPointerOut);
      if (appended) {
        goto LABEL_33;
      }
      *(_DWORD *)dataPointerOut = bswap32(v48 + v22);
    }
    else
    {
      uint64_t appended = CMBlockBufferReplaceDataBytes(v21, v7, v47, v22);
      if (appended) {
        goto LABEL_33;
      }
      dataPointerOut = 0;
      uint64_t appended = CMBlockBufferGetDataPointer(v7, v49, 0, 0, &dataPointerOut);
      if (appended) {
        goto LABEL_33;
      }
      *(_DWORD *)dataPointerOut = bswap32(v48 + v22);
      CFDataRef v34 = *(const __CFData **)(*(void *)(a1 + 584) + 1112);
      if (v34)
      {
        BytePtr = CFDataGetBytePtr(v34);
        size_t Length = CFDataGetLength(*(CFDataRef *)(*(void *)(a1 + 584) + 1112));
        size_t v37 = Length + v28;
        if (v9 < Length + v28)
        {
          uint64_t appended = 4294954385;
LABEL_33:
          char v29 = 0;
          goto LABEL_34;
        }
        uint64_t appended = CMBlockBufferReplaceDataBytes(BytePtr, v7, v28, Length);
        if (appended) {
          goto LABEL_33;
        }
        size_t v28 = v37;
      }
      uint64_t appended = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, 0, v28, 0, blockBufferOut);
      if (appended) {
        goto LABEL_33;
      }
    }
    uint64_t appended = 0;
    char v29 = 1;
    uint64_t v7 = blockBufferOut[0];
LABEL_34:
    if (v40[0]) {
      free(v40[0]);
    }
    if (memptr) {
      free(memptr);
    }
    if ((v29 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_39;
  }
  uint64_t appended = 0;
LABEL_39:
  uint64_t v30 = appended;
  size_t v31 = CMBlockBufferGetDataLength(v7);
  if (*(unsigned char *)(v4 + 3786))
  {
    *(void *)(a1 + 376) = v31;
    CFTypeRef v32 = CFRetain(v7);
LABEL_41:
    *(void *)(a1 + 3032) = v32;
    *(void *)(a1 + 2904) = 8 * *(void *)(a1 + 376);
    uint64_t appended = v30;
    goto LABEL_43;
  }
  uint64_t appended = sub_1BBA12730((void **)(a1 + 3040), v31, 0x10uLL);
  if (!appended)
  {
    sub_1BBA69EA4(*(void *)(a1 + 584), *(void *)(a1 + 3040), (void *)(a1 + 376), v7);
    CFTypeRef v32 = *(CFTypeRef *)(a1 + 3040);
    goto LABEL_41;
  }
LABEL_43:
  if (blockBufferOut[0]) {
    CFRelease(blockBufferOut[0]);
  }
  return appended;
}

void sub_1BBA69E48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 192);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = *(void **)(v1 - 136);
  if (v4) {
    free(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1BBA69EA4(uint64_t a1, uint64_t a2, void *a3, CMBlockBufferRef theBuffer)
{
  unint64_t result = CMBlockBufferGetDataLength(theBuffer);
  dataPointerOut = 0;
  if (result)
  {
    unint64_t v8 = result;
    size_t v9 = 0;
    size_t v10 = 0;
    while (1)
    {
      unint64_t result = CMBlockBufferGetDataPointer(theBuffer, v9, 0, 0, &dataPointerOut);
      size_t v11 = bswap32(*(_DWORD *)dataPointerOut);
      uint64_t v12 = *(int *)(a1 + 3688);
      size_t v13 = qword_1BBB7A070[v12];
      size_t v14 = v9 + 4;
      v9 += 4 + v11;
      if (v10 + v13 + v11 > v8 || v9 > v8) {
        break;
      }
      memcpy((void *)(a2 + v10), (char *)&unk_1BBB7A068 + 4 * v12, v13);
      size_t v16 = qword_1BBB7A070[*(int *)(a1 + 3688)] + v10;
      unint64_t result = CMBlockBufferCopyDataBytes(theBuffer, v14, v11, (void *)(a2 + v16));
      size_t v10 = v16 + v11;
      if (v9 >= v8) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v10 = 0;
LABEL_10:
    *a3 = v10;
  }
  return result;
}

uint64_t sub_1BBA69FB4(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) >= a2) {
    return 0;
  }
  if (a2 > 0x529) {
    return 4294954392;
  }
  sub_1BBA65448((char **)a1);
  if (malloc_type_posix_memalign((void **)a1, 0x10uLL, 79360 * a2, 0x10F0040A03071D4uLL) || !*(void *)a1) {
    return 4294954392;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = sub_1BBA168F4(*(void *)a1 + v5);
    *(unsigned char *)(v7 + 78152) = 0;
    *(_OWORD *)(v7 + 78132) = 0u;
    *(_OWORD *)(v7 + 78160) = 0u;
    *(_OWORD *)(v7 + 78176) = 0u;
    *(_OWORD *)(v7 + 78192) = 0u;
    *(void *)(v7 + 79056) = 0;
    *(void *)(v7 + 79048) = 0;
    *(_DWORD *)(v7 + 79036) = 0;
    *(_DWORD *)(v7 + 79308) = 0;
    *(_OWORD *)(v7 + 79216) = 0u;
    *(_OWORD *)(v7 + 79232) = 0u;
    *(_OWORD *)(v7 + 79248) = 0u;
    *(_OWORD *)(v7 + 79264) = 0u;
    *(_OWORD *)(v7 + 79280) = 0u;
    *(unsigned char *)(v7 + 79160) = 1;
    *(void *)(v7 + 79168) = sub_1BBACBBF0;
    *(void *)(v7 + 79176) = 0;
    *(void *)(v7 + 79184) = sub_1BBACB8E8;
    *(void *)(v7 + 79192) = 0;
    *(void *)(v7 + 79200) = sub_1BBACB5E0;
    ++v6;
    v5 += 79360;
    *(void *)(v7 + 79208) = 0;
  }
  while (a2 != v6);
  uint64_t result = 0;
  *(void *)(a1 + 8) = a2;
  return result;
}

void sub_1BBA6A130(uint64_t a1, unsigned int a2)
{
  uint64_t v258 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = *(void *)(v4 + 48);
  float v249 = (std::mutex *)(v4 + 1048);
  std::mutex::lock((std::mutex *)(v4 + 1048));
  if (a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      uint64_t v6 = MEMORY[0x1E4F14500];
      uint64_t v7 = "FrameEnc emit function receives an error: %d\n";
LABEL_210:
      _os_log_error_impl(&dword_1BB9B9000, v6, OS_LOG_TYPE_ERROR, v7, buf, 8u);
      goto LABEL_211;
    }
    goto LABEL_211;
  }
  uint64_t v8 = *(void *)(a1 + 584);
  if (!*(unsigned char *)a1)
  {
    int v16 = *(unsigned __int8 *)(v8 + 3766);
    uint64_t v17 = *(void *)(v8 + 13272);
    uint64_t v18 = *(void *)(a1 + 2712);
    if (!v18)
    {
LABEL_150:
      if (v17)
      {
        a2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a1);
        if (a2)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_208;
          }
          *(_WORD *)std::string buf = 0;
          int v77 = MEMORY[0x1E4F14500];
          int v78 = "Failed to update DBP context\n";
LABEL_379:
          char v84 = buf;
LABEL_380:
          uint32_t v85 = 2;
          goto LABEL_381;
        }
      }
      uint64_t v104 = *(unsigned char **)(a1 + 16);
      if (!v104[33] || !(*(unsigned int (**)(unsigned char *))(*(void *)v104 + 32))(v104))
      {
LABEL_183:
        uint64_t v109 = *(void *)(a1 + 584);
        uint64_t v110 = *(void *)(v109 + 13272);
        if (*(unsigned char *)(v109 + 3232))
        {
          *(unsigned char *)(*(void *)(a1 + 608) + 349) = (*(unsigned int (**)(void))(*(void *)(a1 + 608) + 440))() == 0;
          if (*(unsigned char *)(*(void *)(a1 + 584) + 1016)) {
            *(unsigned char *)(*(void *)(a1 + 624) + 349) = (*(unsigned int (**)(void))(*(void *)(a1 + 624) + 440))() == 0;
          }
        }
        if (*(unsigned char *)(v109 + 3766) && v110)
        {
          a2 = sub_1BBA69968(a1);
LABEL_206:
          if (!a2) {
            goto LABEL_5;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_208;
          }
          *(_WORD *)std::string buf = 0;
          int v77 = MEMORY[0x1E4F14500];
          int v78 = "Failed to generate output data.\n";
          goto LABEL_379;
        }
        uint64_t v111 = *(void *)(a1 + 584);
        uint64_t v112 = *(char *)(v111 + 3288);
        CFTypeRef cf = 0;
        if ((int)v112 < 1)
        {
          uint64_t v113 = 0;
        }
        else
        {
          uint64_t v113 = 0;
          int v114 = (void *)(*(void *)(a1 + 2688) + 3512);
          uint64_t v115 = v112;
          do
          {
            uint64_t v113 = v113 + *v114 - *(v114 - 1);
            v114 += 9920;
            --v115;
          }
          while (v115);
        }
        if (*(unsigned char *)(v111 + 3232)) {
          v113 += 54;
        }
        if (*(unsigned char *)(v111 + 3620)) {
          v113 += 29;
        }
        if (*(unsigned char *)(v111 + 3664)) {
          v113 += 9;
        }
        unint64_t v116 = ((unint64_t)(3 * v113) >> 1)
             + 5
             * (*(unsigned __int8 *)(v111 + 3232)
              + (int)v112
              + *(unsigned __int8 *)(v111 + 3620)
              + *(unsigned __int8 *)(v111 + 3664))
             + 64;
        if (v116 <= *(void *)(a1 + 384) + 8) {
          size_t v117 = *(void *)(a1 + 384) + 8;
        }
        else {
          size_t v117 = v116;
        }
        a2 = sub_1BBA12730((void **)(a1 + 3040), v117, 0x10uLL);
        if (a2)
        {
LABEL_204:
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_206;
        }
        uint64_t v200 = *(_DWORD **)(a1 + 608);
        if (v200[9]) {
          (*(void (**)(_DWORD *, void, void, void))(*(void *)v200 + 80))(v200, 0, v200[70], 0);
        }
        if (*(unsigned char *)(v111 + 3620) && *(unsigned char *)(*(void *)(a1 + 2688) + 10) == 2)
        {
          uint64_t v201 = 0;
          unsigned int v202 = 0;
          char v203 = 0;
          memset(v255, 0, sizeof(v255));
          *(void *)std::string buf = 0;
          __int16 v253 = 334;
          char v254 = -119;
          uint64_t v204 = &v255[1];
          *(void *)&buf[8] = 0;
          *(void *)&uint8_t buf[16] = &v255[1];
          *(void *)&unsigned char buf[24] = &v255[1];
          *(void *)&buf[32] = buf;
          *(void *)&buf[40] = 0;
          buf[48] = 0;
          do
          {
            *(_DWORD *)&buf[40] = (*(unsigned __int16 *)(v111 + v201 + 3628) << (16 - v203)) | v202;
            *uint64_t v204 = bswap32(*(unsigned int *)&buf[40]);
            unint64_t v205 = *(int *)&buf[44] + 16;
            int v206 = (_DWORD *)(*(void *)&buf[24] + (v205 >> 3));
            *(void *)&unsigned char buf[24] = v206;
            char v207 = buf[44] & 7;
            *(_DWORD *)&buf[44] = buf[44] & 7;
            if ((unint64_t)v206 >= *(void *)&buf[32])
            {
              buf[48] = 1;
              *(void *)&unsigned char buf[24] = *(void *)&buf[32];
              int v206 = *(_DWORD **)&buf[32];
            }
            *(_DWORD *)&buf[40] = (*(unsigned __int16 *)(v111 + v201 + 3634) << (16 - v207)) | (*(_DWORD *)&buf[40] << (v205 & 0xF8));
            *int v206 = bswap32(*(unsigned int *)&buf[40]);
            unint64_t v208 = *(int *)&buf[44] + 16;
            unsigned int v202 = *(_DWORD *)&buf[40] << (v208 & 0xF8);
            uint64_t v204 = (_DWORD *)(*(void *)&buf[24] + (v208 >> 3));
            *(void *)&unsigned char buf[24] = v204;
            char v203 = buf[44] & 7;
            *(void *)&buf[40] = __PAIR64__(*(unsigned int *)&buf[44], v202) & 0x7FFFFFFFFLL;
            if ((unint64_t)v204 >= *(void *)&buf[32])
            {
              buf[48] = 1;
              *(void *)&unsigned char buf[24] = *(void *)&buf[32];
              uint64_t v204 = *(_DWORD **)&buf[32];
            }
            v201 += 2;
          }
          while (v201 != 6);
          *(_DWORD *)&buf[40] = (*(unsigned __int16 *)(v111 + 3640) << (16 - v203)) | v202;
          *uint64_t v204 = bswap32(*(unsigned int *)&buf[40]);
          unint64_t v209 = *(int *)&buf[44] + 16;
          int v210 = *(_DWORD *)&buf[40] << (v209 & 0xF8);
          double v211 = (_DWORD *)(*(void *)&buf[24] + (v209 >> 3));
          *(void *)&unsigned char buf[24] = v211;
          char v212 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v211 >= *(void *)&buf[32])
          {
            buf[48] = 1;
            *(void *)&unsigned char buf[24] = *(void *)&buf[32];
            double v211 = *(_DWORD **)&buf[32];
          }
          *(_DWORD *)&buf[40] = (*(unsigned __int16 *)(v111 + 3642) << (16 - v212)) | v210;
          *double v211 = bswap32(*(unsigned int *)&buf[40]);
          unint64_t v213 = *(int *)&buf[44] + 16;
          int v214 = *(_DWORD *)&buf[40] << (v213 & 0xF8);
          int v215 = (_DWORD *)(*(void *)&buf[24] + (v213 >> 3));
          *(void *)&unsigned char buf[24] = v215;
          char v216 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v215 >= *(void *)&buf[32])
          {
            buf[48] = 1;
            *(void *)&unsigned char buf[24] = *(void *)&buf[32];
            int v215 = *(_DWORD **)&buf[32];
          }
          unsigned int v217 = *(_DWORD *)(v111 + 3644);
          *(_DWORD *)&buf[40] = (HIWORD(v217) << (16 - v216)) | v214;
          *int v215 = bswap32(*(unsigned int *)&buf[40]);
          unint64_t v218 = *(int *)&buf[44] + 16;
          int v219 = *(_DWORD *)&buf[40] << (v218 & 0xF8);
          BOOL v220 = (_DWORD *)(*(void *)&buf[24] + (v218 >> 3));
          *(void *)&unsigned char buf[24] = v220;
          char v221 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v220 >= *(void *)&buf[32])
          {
            buf[48] = 1;
            *(void *)&unsigned char buf[24] = *(void *)&buf[32];
            BOOL v220 = *(_DWORD **)&buf[32];
          }
          *(_DWORD *)&buf[40] = ((unsigned __int16)v217 << (16 - v221)) | v219;
          _DWORD *v220 = bswap32(*(unsigned int *)&buf[40]);
          unint64_t v222 = *(int *)&buf[44] + 16;
          int v223 = *(_DWORD *)&buf[40] << (v222 & 0xF8);
          double v224 = (_DWORD *)(*(void *)&buf[24] + (v222 >> 3));
          *(void *)&unsigned char buf[24] = v224;
          char v225 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v224 >= *(void *)&buf[32])
          {
            buf[48] = 1;
            *(void *)&unsigned char buf[24] = *(void *)&buf[32];
            double v224 = *(_DWORD **)&buf[32];
          }
          unsigned int v226 = *(_DWORD *)(v111 + 3648);
          *(_DWORD *)&buf[40] = (HIWORD(v226) << (16 - v225)) | v223;
          *double v224 = bswap32(*(unsigned int *)&buf[40]);
          unint64_t v227 = *(int *)&buf[44] + 16;
          int v228 = *(_DWORD *)&buf[40] << (v227 & 0xF8);
          uint64_t v229 = (_DWORD *)(*(void *)&buf[24] + (v227 >> 3));
          *(void *)&unsigned char buf[24] = v229;
          char v230 = buf[44] & 7;
          *(_DWORD *)&buf[44] = buf[44] & 7;
          if ((unint64_t)v229 >= *(void *)&buf[32])
          {
            buf[48] = 1;
            *(void *)&unsigned char buf[24] = *(void *)&buf[32];
            uint64_t v229 = *(_DWORD **)&buf[32];
          }
          *(_DWORD *)&buf[40] = ((unsigned __int16)v226 << (16 - v230)) | v228;
          *uint64_t v229 = bswap32(*(unsigned int *)&buf[40]);
          unint64_t v231 = *(int *)&buf[44] + 16;
          *(void *)&buf[24] += v231 >> 3;
          *(void *)&buf[40] = __PAIR64__(*(unsigned int *)&buf[44], *(_DWORD *)&buf[40] << (v231 & 0xF8)) & 0x7FFFFFFFFLL;
          if (*(void *)&buf[24] >= *(void *)&buf[32])
          {
            buf[48] = 1;
            *(void *)&unsigned char buf[24] = *(void *)&buf[32];
          }
          sub_1BBA19A20((uint64_t)buf);
          v255[0] = buf[24] - buf[16] - 1;
          uint64_t v232 = *(void *)&buf[24] - *(void *)&buf[16] + 4;
          if (*(void *)buf) {
            free(*(void **)buf);
          }
          *(void *)(a1 + 376) += off_1EC59CAB8(*(void *)(a1 + 3040) + *(void *)(a1 + 376), 0, &v253, v232, 2);
        }
        if (*(unsigned char *)(v111 + 3664) && *(unsigned char *)(*(void *)(a1 + 2688) + 10) == 2)
        {
          v255[8] = 0;
          *(void *)uint64_t v255 = 0;
          *(void *)std::string buf = 0;
          *(void *)&buf[8] = 0;
          __int16 v253 = 334;
          char v254 = -112;
          *(_DWORD *)&v255[1] = bswap32(*(unsigned __int16 *)(v111 + 3672)) >> 16;
          *(_DWORD *)&v255[3] = bswap32(*(unsigned __int16 *)(v111 + 3674)) >> 16;
          buf[48] = 0;
          *(void *)&uint8_t buf[16] = &v255[1];
          *(void *)&unsigned char buf[24] = &v255[5];
          *(void *)&buf[32] = &v255[9];
          *(void *)&buf[40] = 0;
          sub_1BBA19A20((uint64_t)buf);
          v255[0] = buf[24] - buf[16] - 1;
          uint64_t v233 = *(void *)&buf[24] - *(void *)&buf[16] + 4;
          if (*(void *)buf) {
            free(*(void **)buf);
          }
          *(void *)(a1 + 376) += off_1EC59CAB8(*(void *)(a1 + 3040) + *(void *)(a1 + 376), 0, &v253, v233, 2);
        }
        int v234 = v112 - 1;
        if ((int)v112 >= 1)
        {
          uint64_t v235 = 0;
          uint64_t v236 = 79360 * v112;
          do
          {
            uint64_t v237 = *(void *)(a1 + 2688);
            if (*(unsigned char *)(*(void *)(a1 + 16) + 33)) {
              BOOL v238 = v234 == 0;
            }
            else {
              BOOL v238 = 0;
            }
            if (v238) {
              (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 152))(*(void *)(a1 + 24), v237 + v235 + 3488);
            }
            *(void *)(a1 + 376) += off_1EC59CAB8(*(void *)(a1 + 3040) + *(void *)(a1 + 376), 0, *(void *)(v237 + v235 + 3504), *(void *)(v237 + v235 + 3512) - *(void *)(v237 + v235 + 3504), 2);
            --v234;
            v235 += 79360;
          }
          while (v236 != v235);
        }
        if (*(unsigned char *)(*(void *)(a1 + 16) + 33))
        {
          uint64_t v239 = *(void *)(a1 + 384);
          if (*(void *)(a1 + 3048) > (unint64_t)(v239 + 2)) {
            *(void *)(a1 + 376) += sub_1BBAB1884(*(void *)(a1 + 3040), *(void *)(a1 + 376), v239);
          }
        }
        if (*(unsigned char *)(v111 + 3232))
        {
          uint64_t v240 = *(void *)(a1 + 608);
          if (*(unsigned char *)(v240 + 349))
          {
            uint64_t v241 = (_OWORD *)(v240 + 350);
            *(_DWORD *)std::string buf = 830734672;
            long long v242 = v241[1];
            *(_OWORD *)&buf[5] = *v241;
            uint8_t buf[4] = 0;
            *(_OWORD *)&buf[21] = v242;
            *(_OWORD *)&buf[37] = v241[2];
            char v257 = 0x80;
            *(void *)(a1 + 376) += off_1EC59CAB8(*(void *)(a1 + 3040) + *(void *)(a1 + 376), 0, buf, 54, 2);
          }
        }
        uint64_t v243 = *(void *)(a1 + 3040);
        *(void *)(a1 + 3032) = v243;
        if (*(unsigned char *)(v111 + 3786))
        {
          uint64_t v244 = *(void *)(a1 + 376);
          size_t v245 = v244 - 3;
          *(_DWORD *)std::string buf = bswap32(v244 - 3);
          a2 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v244 + 1, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v244 + 1, 1u, (CMBlockBufferRef *)&cf);
          if (a2) {
            goto LABEL_204;
          }
          a2 = CMBlockBufferReplaceDataBytes(buf, (CMBlockBufferRef)cf, 0, 4uLL);
          if (a2) {
            goto LABEL_204;
          }
          a2 = CMBlockBufferReplaceDataBytes((const void *)(v243 + 3), (CMBlockBufferRef)cf, 4uLL, v245);
          if (a2) {
            goto LABEL_204;
          }
          ++*(void *)(a1 + 376);
          *(void *)(a1 + 3032) = CFRetain(cf);
        }
        a2 = 0;
        *(void *)(a1 + 2904) = 8 * *(void *)(a1 + 376);
        goto LABEL_204;
      }
      *(_WORD *)std::string buf = 0;
      if (*(unsigned char *)(v8 + 3706)
        || (int v106 = *(_DWORD *)(a1 + 420), *(_DWORD *)(*(void *)(a1 + 584) + 284) > 2 * v106)
        && !(*(_DWORD *)(a1 + 644) % v106))
      {
        if (qword_1EC027190 != -1) {
          dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
        }
        if (dword_1EC02719C != 255)
        {
          if (v16
            && (*(void *)(v8 + 3224)
             || *(unsigned char *)(v8 + 3233)
             || *(unsigned char *)(v8 + 3232)
             || *(unsigned char *)(*(void *)(a1 + 24) + 80)))
          {
            __int16 v105 = sub_1BB9FD398(*(uint64_t **)(a1 + 608));
            *(_WORD *)std::string buf = v105;
LABEL_180:
            uint64_t v108 = *(unsigned char **)(a1 + 16);
            if (v108[33] && (*(unsigned int (**)(unsigned char *))(*(void *)v108 + 32))(v108)) {
              *(_WORD *)(*(void *)(a1 + 24) + 16) = v105;
            }
            goto LABEL_183;
          }
          if (v17)
          {
            uint64_t v107 = *(std::__shared_weak_count **)(a1 + 616);
            uint64_t v250 = *(void *)(a1 + 608);
            float v251 = v107;
            if (v107) {
              atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            a2 = (*(uint64_t (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v17 + 88))(v17, &v250, buf);
            if (v251) {
              sub_1BB9C09B4(v251);
            }
            if (a2)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_208;
              }
              __int16 v253 = 0;
              int v77 = MEMORY[0x1E4F14500];
              int v78 = "Failed to CalculateCheckSumOneFrame.\n";
              char v84 = (uint8_t *)&v253;
              goto LABEL_380;
            }
            __int16 v105 = *(_WORD *)buf;
            goto LABEL_180;
          }
        }
      }
      __int16 v105 = 0;
      goto LABEL_180;
    }
    if (*(unsigned char *)(v8 + 3766))
    {
      uint64_t v19 = **(void **)(a1 + 392);
      *(void *)(a1 + 2904) = *(unsigned int *)(v19 + 528);
      *(void *)(a1 + 2928) = *(unsigned int *)(v19 + 584);
      uint64_t v20 = *(void *)(v19 + 816);
      *(void *)&long long v21 = v20;
      *((void *)&v21 + 1) = HIDWORD(v20);
      *(_OWORD *)(a1 + 2912) = v21;
    }
    uint64_t v22 = *(void *)(a1 + 3008);
    uint64_t v23 = *(void *)(v18 + 392);
    BOOL v25 = *(unsigned char *)(v23 + 58)
       && !*(unsigned char *)(a1 + 416)
       && *(int *)(v23 + 512) <= 1
       && ((uint64_t v24 = *(void *)(v18 + 344)) == 0 || *(_DWORD *)(v24 + 68) != 2)
       && *(unsigned char *)(v22 + 84) == 0;
    unsigned int v26 = *(_DWORD *)(v22 + 72);
    uint64_t v27 = v22 + 120 * v26 + 136;
    if (v26 >= 7) {
      uint64_t v27 = 0;
    }
    if (v26 == 9) {
      size_t v28 = (double *)(v22 + 976);
    }
    else {
      size_t v28 = (double *)v27;
    }
    int v29 = (int)(*v28 / v28[1]);
    int v30 = (int)((double)*(int *)(v22 + 36) + (double)*(unint64_t *)(a1 + 2904) * (*(double *)(v22 + 24) + 1.0));
    if (*(int *)(a1 + 644) >= 1 && (*(unsigned char *)(a1 + 640) & 0xFE) == 2 && *(_DWORD *)(v22 + 68) < v30)
    {
      if (v25) {
        goto LABEL_145;
      }
      if (*(unsigned char *)(a1 + 416))
      {
        *(unsigned char *)(a1 + 1) = 1;
        goto LABEL_145;
      }
      if (*(unsigned char *)(a1 + 1))
      {
LABEL_145:
        BOOL v103 = v29 + (v29 >> 2) < v30;
        if (*(_DWORD *)(v22 + 64) >= v30)
        {
          *(unsigned char *)(v18 + 760) = 0;
          *(unsigned char *)(v22 + 50) = v103;
          if (v25)
          {
LABEL_170:
            ++*(_DWORD *)(v18 + 352);
            *(unsigned char *)a1 = 1;
            goto LABEL_5;
          }
        }
        else
        {
          *(unsigned char *)(v18 + 760) = 1;
          *(unsigned char *)(v22 + 50) = v103;
          if (v25) {
            goto LABEL_170;
          }
        }
        goto LABEL_149;
      }
    }
    *(unsigned char *)(v22 + 50) = v29 + (v29 >> 2) < v30;
LABEL_149:
    *(_DWORD *)(v18 + 352) = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_150;
  }
LABEL_5:
  if (!*(unsigned char *)(a1 + 4))
  {
    sub_1BBA61E04((int **)buf, *(void *)(*(void *)(a1 + 584) + 48));
    uint64_t v9 = *(void *)buf;
    if (*(void *)buf && *(unsigned char *)(*(void *)buf + 111))
    {
      *(unsigned char *)(a1 + 3024) |= *(unsigned char *)(*(void *)buf + 108);
      *(unsigned char *)(a1 + 3025) |= *(unsigned char *)(v9 + 109);
    }
    if (*(void *)&buf[8]) {
      sub_1BB9C09B4(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  uint64_t v10 = *(void *)(a1 + 2712);
  if (!v10 || !*(unsigned char *)(a1 + 4))
  {
LABEL_100:
    if (*(unsigned char *)a1) {
      goto LABEL_101;
    }
    uint64_t v79 = *(void *)(a1 + 608);
    uint64_t v80 = *(void *)(a1 + 592);
    long long v81 = *(_OWORD *)(v80 + 48);
    long long v82 = *(_OWORD *)(v80 + 64);
    *(void *)(v79 + 80) = *(void *)(v80 + 80);
    *(_OWORD *)(v79 + 48) = v81;
    *(_OWORD *)(v79 + 64) = v82;
    a2 = sub_1BBA64368(*(void *)(a1 + 584), a1);
    if (a2)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_208;
      }
      int v83 = *(_DWORD *)(a1 + 644);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v83;
      int v77 = MEMORY[0x1E4F14500];
      int v78 = "Frame %d: ManageDPB failed\n";
      goto LABEL_109;
    }
    uint64_t v86 = *(void *)(a1 + 584);
    if (*(int *)(v86 + 152) <= 76999)
    {
      *(_DWORD *)(a1 + 428) = 0;
      goto LABEL_121;
    }
    if (*(unsigned char *)(a1 + 640))
    {
      double v87 = *(double *)(v86 + 416);
      if (v87 < 1.0)
      {
        int v88 = *(unsigned __int8 *)(*(void *)(a1 + 608) + 44);
LABEL_120:
        *(_DWORD *)(a1 + 428) = v88;
        goto LABEL_121;
      }
      if (v87 < 5.0)
      {
        int v88 = 1;
        goto LABEL_120;
      }
      if (v87 < 10.0)
      {
        int v88 = 2;
        goto LABEL_120;
      }
    }
    int v88 = 3;
    goto LABEL_120;
  }
  uint64_t v11 = *(void *)(a1 + 3008);
  unsigned int v12 = *(_DWORD *)(*(void *)(v10 + 392) + 64);
  BOOL v122 = v12 > 0x2B;
  uint64_t v13 = (1 << v12) & 0xCC000100002;
  if (!v122 && v13 != 0 && *(unsigned __int8 *)(a1 + 4) >= 2u)
  {
    *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 2936);
    *(float *)&uint8_t buf[16] = (float)*(char *)(a1 + 2952);
    sub_1BBAACF94(v10, a1, (uint64_t)buf);
  }
  else
  {
    sub_1BBAACF94(*(void *)(a1 + 2712), a1, 0);
  }
  uint64_t v31 = *(void *)(v10 + 392);
  unsigned int v32 = *(_DWORD *)(v31 + 64);
  BOOL v122 = v32 > 0x2B;
  uint64_t v33 = (1 << v32) & 0xCC000100002;
  if (!v122 && v33 != 0)
  {
    uint64_t v35 = *(int *)(v11 + 72);
    if ((int)v35 < *(_DWORD *)(v31 + 560))
    {
      do
      {
        uint64_t v36 = *(void *)(v10 + 848 + 8 * v35);
        uint64_t v37 = *(void *)(v36 + 8);
        if (v37)
        {
          sub_1BBAAA51C(v37, *(_DWORD *)(v36 + 356), (void *)a1);
          uint64_t v31 = *(void *)(v10 + 392);
        }
        ++v35;
      }
      while (v35 < *(int *)(v31 + 560));
    }
    if (*(_DWORD *)(v10 + 424))
    {
      if (*(unsigned __int8 *)(a1 + 640) <= 1u)
      {
        uint64_t v38 = *(void *)(v10 + 904);
        uint64_t v39 = *(void *)(v38 + 8);
        if (v39)
        {
          sub_1BBAAA51C(v39, *(_DWORD *)(v38 + 356), (void *)a1);
          uint64_t v31 = *(void *)(v10 + 392);
        }
      }
    }
  }
  if (*(unsigned char *)(v31 + 58))
  {
    if (*(unsigned char *)a1 || *(unsigned char *)(a1 + 1))
    {
      uint64_t v40 = *(void *)(v10 + 8 * *(int *)(v11 + 72) + 848);
      uint64_t v41 = *(int **)(v40 + 8);
      if (v41)
      {
        unsigned int v42 = *(_DWORD *)(v40 + 356);
        uint64_t v43 = v11 + 120 * v42 + 136;
        if (v42 >= 7) {
          uint64_t v43 = 0;
        }
        uint64_t v44 = v42 == 9 ? v11 + 976 : v43;
        float v45 = *(double *)v44 * (double)*(int *)(v44 + 16) / 1000.0;
        if ((float)((float)*v41 / v45) > 2.0) {
          goto LABEL_65;
        }
      }
      if (*(unsigned char *)(v10 + 760)) {
LABEL_65:
      }
        ++*(_WORD *)(v10 + 752);
    }
    else
    {
      if (*(_DWORD *)(v31 + 508) != 2 && *(unsigned __int8 *)(*(void *)(a1 + 1064) + 640) >= 2u)
      {
        *(_DWORD *)(a1 + 2460) = *(_DWORD *)(a1 + 2456);
        *(void *)(a1 + 2452) = *(void *)(a1 + 2448);
        *(_DWORD *)(a1 + 2448) = *(double *)(a1 + 2440);
      }
      if (*(unsigned __int8 *)(a1 + 4) >= 2u) {
        *(unsigned char *)(v11 + 48) = *(unsigned char *)(v11 + 49);
      }
      float v46 = *(float *)(a1 + 2720);
      size_t v47 = operator new(0x18uLL);
      v47[16] = (int)v46;
      *((void *)v47 + 1) = v10 + 656;
      uint64_t v48 = *(void *)(v10 + 656);
      *(void *)size_t v47 = v48;
      *(void *)(v48 + 8) = v47;
      *(void *)(v10 + 656) = v47;
      uint64_t v49 = *(void *)(v10 + 672);
      *(void *)(v10 + 672) = v49 + 1;
      if ((unint64_t)(v49 + 1) >= 6)
      {
        int v50 = *(uint64_t **)(v10 + 664);
        uint64_t v51 = *v50;
        *(void *)(v51 + 8) = v50[1];
        *(void *)v50[1] = v51;
        *(void *)(v10 + 672) = v49;
        operator delete(v50);
      }
      uint64_t v52 = *(void *)(a1 + 2904);
      int v53 = operator new(0x18uLL);
      v53[4] = v52;
      *((void *)v53 + 1) = v10 + 680;
      uint64_t v54 = *(void *)(v10 + 680);
      *(void *)int v53 = v54;
      *(void *)(v54 + 8) = v53;
      *(void *)(v10 + 680) = v53;
      uint64_t v55 = *(void *)(v10 + 696);
      *(void *)(v10 + 696) = v55 + 1;
      if ((unint64_t)(v55 + 1) >= 6)
      {
        double v56 = *(uint64_t **)(v10 + 688);
        uint64_t v57 = *v56;
        *(void *)(v57 + 8) = v56[1];
        *(void *)v56[1] = v57;
        *(void *)(v10 + 696) = v55;
        operator delete(v56);
      }
      ++*(_DWORD *)(v10 + 12);
      *(_WORD *)(v10 + 752) = 0;
      if (*(unsigned char *)(a1 + 410)) {
        ++*(_DWORD *)(a1 + 412);
      }
      else {
        *(_DWORD *)(a1 + 412) = 0;
      }
    }
  }
  else if (*(_DWORD *)(v31 + 508) != 2 && *(unsigned __int8 *)(*(void *)(a1 + 1064) + 640) >= 2u)
  {
    *(_DWORD *)(a1 + 2460) = *(_DWORD *)(a1 + 2456);
    *(void *)(a1 + 2452) = *(void *)(a1 + 2448);
    *(_DWORD *)(a1 + 2448) = *(double *)(a1 + 2440);
  }
  if (*(unsigned char *)(v10 + 324))
  {
    double v58 = *(double *)(a1 + 2432);
    int v59 = *(_DWORD *)(a1 + 376);
    float v60 = *(float *)(a1 + 2720);
    int v61 = *(unsigned __int16 *)(v10 + 412) * *(unsigned __int16 *)(v10 + 410);
    if (v58 <= 0.0)
    {
      float v64 = *(float *)(v10 + 332);
      uint64_t v66 = 0x4040000000000000;
    }
    else
    {
      double v62 = *(double *)(a1 + 2440);
      double v63 = v62 / v58 * (pow((double)v61, 0.3) * 0.001);
      float v64 = *(float *)(v10 + 332);
      double v65 = (float)(v64 * 5.0);
      if (v63 < v65) {
        double v65 = v63;
      }
      if (v64 > 0.0) {
        double v63 = v65;
      }
      uint64_t v66 = 0x4050000000000000;
      if (v63 <= 64.0) {
        goto LABEL_92;
      }
    }
    double v63 = *(double *)&v66;
LABEL_92:
    int v67 = 8 * v59;
    float v68 = v63 * 0.5 + v64 * 0.5;
    *(float *)(v10 + 332) = v68;
    unsigned int v69 = (int)v68;
    __int32 v70 = 5;
    if ((int)v68 >= 1)
    {
      do
      {
        unsigned int v71 = v70--;
        if (v71 < 2) {
          break;
        }
        BOOL v122 = v69 > 1;
        v69 >>= 1;
      }
      while (v122);
    }
    float v72 = (double)v67 * 0.5 * exp2((v60 + -12.0) / 6.0) / (double)v61 + *(float *)(v10 + 328) * 0.5;
    v73.i32[0] = (int)(v72 / 0.15 + 0.5);
    v73.i32[1] = v70;
    *(float *)(v10 + 328) = v72;
    *(int32x2_t *)(v10 + 336) = vmax_s32(vmin_s32(v73, (int32x2_t)0x500000005), 0);
  }
  uint64_t v74 = *(void *)(v10 + 384);
  if (!v74 || *(int *)(*(void *)(v10 + 392) + 512) > 1) {
    goto LABEL_100;
  }
  if (!*(unsigned char *)a1)
  {
    uint64_t v75 = (const void *)(*(uint64_t (**)(void))(**(void **)(a1 + 592) + 88))(*(void *)(a1 + 592));
    sub_1BBAAC5AC(v74, v75);
    goto LABEL_100;
  }
LABEL_101:
  if (*(_DWORD *)(v8 + 3692) == 2)
  {
    if (*(unsigned char *)(a1 + 4))
    {
      a2 = sub_1BBA64368(*(void *)(a1 + 584), a1);
      if (a2)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_208;
        }
        int v76 = *(_DWORD *)(a1 + 644);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v76;
        int v77 = MEMORY[0x1E4F14500];
        int v78 = "Frame %d: ManageDPB after dropping failed\n";
LABEL_109:
        char v84 = buf;
        uint32_t v85 = 8;
LABEL_381:
        _os_log_error_impl(&dword_1BB9B9000, v77, OS_LOG_TYPE_ERROR, v78, v84, v85);
LABEL_208:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v118 = *(_DWORD *)(a1 + 644);
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v118;
          uint64_t v6 = MEMORY[0x1E4F14500];
          uint64_t v7 = "Frame %d: FinishCompress() is failed\n";
          goto LABEL_210;
        }
LABEL_211:
        *(unsigned char *)(a1 + 436) = 1;
        uint64_t v119 = (FILE **)MEMORY[0x1E4F143C8];
        if (dword_1E9F80A90 >= 1)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Failed to encode frame %d with error %d\n", *(_DWORD *)(a1 + 644), a2);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            int v120 = *(_DWORD *)(a1 + 644);
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v120;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = a2;
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to encode frame %d with error %d\n", buf, 0xEu);
          }
        }
        uint64_t v121 = sub_1BBA568F0(v5);
        if (v121) {
          BOOL v122 = dword_1E9F80A90 < 1;
        }
        else {
          BOOL v122 = 1;
        }
        if (!v122)
        {
          fprintf(*v119, "Failed allocate stat buffer for frame %d with error %d\n", *(_DWORD *)(a1 + 644), v121);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            int v123 = *(_DWORD *)(a1 + 644);
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v123;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v121;
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed allocate stat buffer for frame %d with error %d\n", buf, 0xEu);
          }
        }
        *(void *)std::string buf = 0;
        *(void *)&buf[8] = 0;
        uint64_t v124 = *(void *)(a1 + 584);
        if (!*(unsigned char *)(a1 + 4))
        {
          uint64_t v125 = *(void (**)(void, void, uint64_t, void, void, void))(v124 + 1120);
          if (v125)
          {
            v125(*(void *)(v124 + 1136), *(void *)(*(void *)(a1 + 592) + 288), a1, 0, 0, 0);
            uint64_t v124 = *(void *)(a1 + 584);
          }
        }
        uint64_t v126 = *(void *)(a1 + 608);
        int v127 = *(std::__shared_weak_count **)(a1 + 616);
        if (v127) {
          atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_1BBA642D8(v124, v121, 0, 0, 0, v126, v127, *(void *)(*(void *)(a1 + 592) + 288), (uint64_t)buf);
        if (v127)
        {
          int8x8_t v102 = v127;
          goto LABEL_227;
        }
        goto LABEL_228;
      }
    }
  }
LABEL_121:
  sub_1BBA568F0(v5);
  int v89 = *(_DWORD *)(a1 + 644);
  std::mutex::lock((std::mutex *)(v5 + 56));
  for (uint64_t i = *(void **)(v5 + 136); i != (void *)(v5 + 128); uint64_t i = (void *)i[1])
  {
    BOOL v91 = (_DWORD *)i[2];
    if (*v91 == v89)
    {
LABEL_129:
      uint64_t v92 = i[3];
      *(void *)std::string buf = v91;
      *(void *)&buf[8] = v92;
      if (v92) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_132;
    }
  }
  for (uint64_t i = *(void **)(v5 + 184); i != (void *)(v5 + 176); uint64_t i = (void *)i[1])
  {
    BOOL v91 = (_DWORD *)i[2];
    if (*v91 == v89) {
      goto LABEL_129;
    }
  }
  *(void *)std::string buf = 0;
  *(void *)&buf[8] = 0;
LABEL_132:
  std::mutex::unlock((std::mutex *)(v5 + 56));
  if (*(unsigned char *)a1)
  {
    uint64_t v93 = *(void *)(a1 + 584);
    if (!*(unsigned char *)(a1 + 4))
    {
      BOOL v94 = *(void (**)(void, void, uint64_t, void, void, void))(v93 + 1120);
      if (v94)
      {
        v94(*(void *)(v93 + 1136), *(void *)(*(void *)(a1 + 592) + 288), a1, 0, 0, 0);
        uint64_t v93 = *(void *)(a1 + 584);
      }
    }
    uint64_t v95 = *(void *)(a1 + 608);
    BOOL v96 = *(std::__shared_weak_count **)(a1 + 616);
    if (v96) {
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1BBA642D8(v93, 0, 0, 0, 0, v95, v96, *(void *)(*(void *)(a1 + 592) + 288), (uint64_t)buf);
  }
  else
  {
    uint64_t v97 = *(void *)(a1 + 584);
    uint64_t v98 = *(void *)(a1 + 3064);
    uint64_t v99 = *(void *)(a1 + 3056);
    uint64_t v100 = *(void *)(a1 + 3032);
    uint64_t v101 = *(void *)(a1 + 608);
    BOOL v96 = *(std::__shared_weak_count **)(a1 + 616);
    if (v96) {
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1BBA642D8(v97, 0, v98, v99, v100, v101, v96, *(void *)(*(void *)(a1 + 592) + 288), (uint64_t)buf);
  }
  if (v96)
  {
    int8x8_t v102 = v96;
LABEL_227:
    sub_1BB9C09B4(v102);
  }
LABEL_228:
  if (*(void *)&buf[8]) {
    sub_1BB9C09B4(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v128 = *(void *)(a1 + 584);
  double v129 = *(FILE **)(v128 + 88);
  if (v129 && !*(unsigned char *)a1)
  {
    *(void *)std::string buf = 0;
    if (*(unsigned char *)(v128 + 3786))
    {
      double v137 = operator new[](*(void *)(a1 + 376), MEMORY[0x1E4FBA2D0]);
      if (!v137) {
        goto LABEL_232;
      }
      uint64_t v138 = v137;
      sub_1BBA69EA4(v128, (uint64_t)v137, buf, *(CMBlockBufferRef *)(a1 + 3032));
      uint64_t v139 = *(void *)buf;
      if (fwrite(v138, 1uLL, *(size_t *)buf, v129) == v139)
      {
        MEMORY[0x1C18605A0](v138, 0x1000C8077774924);
        goto LABEL_232;
      }
    }
    else
    {
      size_t v140 = *(void *)(a1 + 376);
      if (fwrite(*(const void **)(a1 + 3032), 1uLL, v140, v129) == v140) {
        goto LABEL_232;
      }
    }
    __error();
  }
LABEL_232:
  uint64_t v130 = *(void *)(a1 + 584);
  if (*(unsigned char *)(v130 + 3708)) {
    uint64_t v131 = *(void *)(v130 + 8);
  }
  else {
    uint64_t v131 = 0;
  }
  uint64_t v132 = *(void *)(v130 + 112);
  uint64_t v133 = (uint64_t *)(v130 + 56);
  if (!*(unsigned char *)a1)
  {
    if (!v132) {
      goto LABEL_285;
    }
    sub_1BBA1226C(*(void *)(a1 + 608), *(void *)(v130 + 112), v131);
    if (!*(unsigned char *)(v130 + 3421)) {
      goto LABEL_277;
    }
    if (!*v133)
    {
      uint64_t v134 = *(void *)(*(void *)(a1 + 584) + 12728);
      if (v134) {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v134 + 16))(v134, v130 + 56, 0);
      }
    }
    BOOL v135 = 0;
    uint64_t v136 = *(void *)(a1 + 608);
    if (*(unsigned char *)(v136 + 136) && v131) {
      BOOL v135 = *(_DWORD *)(v136 + 240) != *(_DWORD *)(v136 + 276) || *(_DWORD *)(v136 + 244) != *(_DWORD *)(v136 + 280);
    }
    uint64_t v142 = *(int **)(v130 + 56);
    uint64_t v141 = *(std::__shared_weak_count **)(v130 + 64);
    if (v141)
    {
      atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v136 = *(void *)(a1 + 608);
    }
    uint64_t v246 = v132;
    int v143 = *(std::__shared_weak_count **)(a1 + 616);
    if (v143) {
      atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v247 = v143;
    float v248 = v141;
    uint64_t v144 = 0;
    if (v135)
    {
      char v145 = 1;
      do
      {
        char v146 = v145;
        uint64_t v147 = (*(uint64_t (**)(int *, uint64_t))(*(void *)v142 + 32))(v142, v144);
        if (v142[70] >> v144 >= 1)
        {
          uint64_t v148 = v147;
          uint64_t v149 = 0;
          uint64_t v150 = v136 + 8 * v144;
          uint64_t v151 = (void *)(v150 + 192);
          double v152 = (void *)(v150 + 112);
          do
          {
            memcpy((void *)(v148 + *(void *)&v142[2 * v144 + 28] * v149), (const void *)(*v151 + *v152 * v149), v142[69]);
            ++v149;
          }
          while (v149 < v142[70] >> v144);
        }
        char v145 = 0;
        uint64_t v144 = 1;
      }
      while ((v146 & 1) != 0);
    }
    else
    {
      char v153 = 1;
      do
      {
        char v154 = v153;
        uint64_t v155 = (*(uint64_t (**)(int *, uint64_t))(*(void *)v142 + 32))(v142, v144);
        uint64_t v156 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v136 + 32))(v136, v144);
        if (v142[70] >> v144 >= 1)
        {
          uint64_t v157 = v156;
          uint64_t v158 = 0;
          do
          {
            memcpy((void *)(v155 + *(void *)&v142[2 * v144 + 28] * v158), (const void *)(v157 + *(void *)(v136 + 8 * v144 + 112) * v158), v142[69]);
            ++v158;
          }
          while (v158 < v142[70] >> v144);
        }
        char v153 = 0;
        uint64_t v144 = 1;
      }
      while ((v154 & 1) != 0);
    }
    if (v247) {
      sub_1BB9C09B4(v247);
    }
    uint64_t v132 = v246;
    if (v248) {
      sub_1BB9C09B4(v248);
    }
LABEL_276:
    if (!v132) {
      goto LABEL_285;
    }
    goto LABEL_277;
  }
  if (!*(unsigned char *)(v130 + 3421) || !*v133 || !v132) {
    goto LABEL_276;
  }
  sub_1BBA1226C(*v133, *(void *)(v130 + 112), 0);
LABEL_277:
  uint64_t v159 = *(void *)(a1 + 608);
  if (v159)
  {
    if (*(unsigned char *)(v159 + 136))
    {
      uint64_t v160 = 0;
      char v161 = 1;
      do
      {
        char v162 = v161;
        uint64_t v163 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v159 + 48))(v159, v160);
        char v161 = 0;
        *(void *)(*(void *)(a1 + 608) + 8 * v160 + 88) = v163;
        uint64_t v159 = *(void *)(a1 + 608);
        *(void *)(v159 + 8 * v160 + 112) = *(void *)(v159 + 8 * v160 + 168);
        uint64_t v160 = 1;
      }
      while ((v162 & 1) != 0);
      *(void *)(v159 + 248) = 0;
      uint64_t v164 = *(void *)(a1 + 592);
      if (v164)
      {
        if (*(int *)(v164 + 248) >= 1)
        {
          uint64_t v165 = 0;
          char v166 = 1;
          do
          {
            char v167 = v166;
            *(void *)(v164 + 8 * v165 + 88) = *(void *)(v164 + 8 * v165 + 192);
            uint64_t v164 = *(void *)(a1 + 592);
            *(void *)(v164 + 8 * v165 + 112) = *(void *)(v164 + 8 * v165 + 216);
            uint64_t v165 = 1;
            char v166 = 0;
          }
          while ((v167 & 1) != 0);
        }
      }
    }
  }
LABEL_285:
  if (!*(unsigned char *)(*(void *)(a1 + 584) + 3534)) {
    (*(void (**)(void))(**(void **)(a1 + 608) + 72))(*(void *)(a1 + 608));
  }
  uint64_t v168 = *(std::__shared_weak_count **)(a1 + 616);
  long long v169 = 0uLL;
  *(_OWORD *)(a1 + 608) = 0u;
  if (v168)
  {
    sub_1BB9C09B4(v168);
    long long v169 = 0uLL;
  }
  uint64_t v170 = *(std::__shared_weak_count **)(a1 + 600);
  *(_OWORD *)(a1 + 592) = v169;
  if (v170) {
    sub_1BB9C09B4(v170);
  }
  *(void *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 3073) = 0;
  *(unsigned char *)(a1 + 417) = 0;
  if (*(unsigned char *)(*(void *)(a1 + 584) + 3786))
  {
    BOOL v171 = *(const void **)(a1 + 3032);
    if (v171)
    {
      CFRelease(v171);
      *(void *)(a1 + 3032) = 0;
    }
  }
  uint64_t v172 = *(void *)(a1 + 1104);
  if (v172)
  {
    uint64_t v173 = 0;
    do
    {
      sub_1BBA1CE40((void *)(*(void *)(a1 + 1096) + v173));
      v173 += 1304;
      --v172;
    }
    while (v172);
  }
  uint64_t v174 = *(void *)(a1 + 744);
  if (v174)
  {
    for (uint64_t j = 0; j != 272; j += 16)
    {
      uint64_t v176 = v174 + j;
      BOOL v177 = *(std::__shared_weak_count **)(v174 + j + 24);
      *(void *)(v176 + 16) = 0;
      *(void *)(v176 + 24) = 0;
      if (v177) {
        sub_1BB9C09B4(v177);
      }
    }
  }
  uint64_t v178 = *(std::__shared_weak_count **)(a1 + 600);
  long long v179 = 0uLL;
  *(_OWORD *)(a1 + 592) = 0u;
  if (v178)
  {
    sub_1BB9C09B4(v178);
    long long v179 = 0uLL;
  }
  uint64_t v180 = *(std::__shared_weak_count **)(a1 + 616);
  *(_OWORD *)(a1 + 608) = v179;
  if (v180) {
    sub_1BB9C09B4(v180);
  }
  int v181 = *(std::__shared_weak_count **)(a1 + 632);
  *(_OWORD *)(a1 + 624) = 0u;
  if (v181) {
    sub_1BB9C09B4(v181);
  }
  uint64_t v182 = *(void *)(a1 + 2696);
  if (v182)
  {
    uint64_t v183 = 0;
    for (uint64_t k = 0; k != v182; ++k)
    {
      uint64_t v185 = 0;
      uint64_t v186 = *(void *)(a1 + 2688);
      uint64_t v187 = v186 + 79360 * k;
      uint64_t v188 = v186 + v183;
      char v189 = 1;
      do
      {
        uint64_t v190 = 0;
        char v191 = v189;
        uint64_t v192 = v188 + (v185 << 8);
        do
        {
          float32x4_t v193 = *(std::__shared_weak_count **)(v192 + v190 + 3552);
          *(_OWORD *)(v192 + v190 + 3544) = 0u;
          if (v193) {
            sub_1BB9C09B4(v193);
          }
          v190 += 16;
        }
        while (v190 != 256);
        char v189 = 0;
        uint64_t v185 = 1;
      }
      while ((v191 & 1) != 0);
      int8x16_t v194 = *(std::__shared_weak_count **)(v187 + 4064);
      *(_OWORD *)(v187 + 4056) = 0u;
      if (v194) {
        sub_1BB9C09B4(v194);
      }
      v183 += 79360;
    }
  }
  uint64_t v195 = *(void *)(a1 + 584);
  std::mutex::lock((std::mutex *)(v195 + 12808));
  int v196 = *(uint64_t **)(v195 + 1032);
  if (v196 != (uint64_t *)(v195 + 1024))
  {
    while (1)
    {
      uint64_t v197 = v196[1];
      if (*(_DWORD *)(v196[2] + 644) == *(_DWORD *)(a1 + 644)) {
        break;
      }
      int v196 = (uint64_t *)v196[1];
      if (v197 == v195 + 1024) {
        goto LABEL_326;
      }
    }
    uint64_t v198 = *v196;
    *(void *)(v198 + 8) = v197;
    *(void *)v196[1] = v198;
    --*(void *)(v195 + 1040);
    int v199 = (std::__shared_weak_count *)v196[3];
    if (v199) {
      sub_1BB9C09B4(v199);
    }
    operator delete(v196);
  }
LABEL_326:
  std::mutex::unlock((std::mutex *)(v195 + 12808));
  std::mutex::unlock(v249);
}

void sub_1BBA6BE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a17) {
    sub_1BB9C09B4(a17);
  }
  std::mutex::unlock(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA6BF1C(char *a1, uint64_t a2, int a3, int a4, __int16 *a5, int a6)
{
  int v11 = a6 >> 1;
  unsigned int v12 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  uint64_t v13 = (char *)operator new[](a6 * a4, MEMORY[0x1E4FBA2D0]);
  uint64_t result = (uint64_t)operator new[]((int)((a6 & 0xFFFFFFFE) + a4), v12);
  uint64_t v15 = (unsigned char *)result;
  int v52 = v11;
  if (a6 < 0)
  {
    int v50 = 0;
  }
  else
  {
    int v53 = a3;
    uint64_t v49 = v11;
    uint64_t v16 = (v11 & ~(v11 >> 31)) + 1;
    uint64_t v17 = &v13[v11 * (uint64_t)a4];
    uint64_t v18 = a1;
    do
    {
      uint64_t result = (uint64_t)memcpy(v17, v18, a4);
      v18 += a2;
      v17 += a4;
      --v16;
    }
    while (v16);
    if (a6 <= 1)
    {
      int v50 = 0;
    }
    else
    {
      if (v52 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = v52;
      }
      uint64_t v20 = &a1[a2 * v49];
      long long v21 = v13;
      do
      {
        uint64_t result = (uint64_t)memcpy(v21, v20, a4);
        v20 -= a2;
        v21 += a4;
        --v19;
      }
      while (v19);
      int v50 = 1;
    }
    a3 = v53;
  }
  if (a3 >= 1)
  {
    uint64_t result = 0;
    int v22 = 0;
    uint64_t v23 = v52 + (uint64_t)a4;
    if (v52 >= 0) {
      int v24 = v52;
    }
    else {
      int v24 = -v52;
    }
    int v25 = v52 + 1;
    if (v52 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v52;
    }
    uint64_t v48 = v26;
    int v27 = v25 + v24;
    int v47 = v25 + v24;
    do
    {
      if (a4 >= 1)
      {
        uint64_t v28 = 0;
        do
        {
          if (a6 < 1)
          {
            LOBYTE(v31) = 0;
          }
          else
          {
            uint64_t v29 = 0;
            int v30 = 0;
            do
            {
              v30 += v13[v28 + (v22 + (int)v29) % a6 * a4] * a5[v29];
              ++v29;
            }
            while (a6 != v29);
            if (v30 > 32639) {
              LOBYTE(v31) = -1;
            }
            else {
              int v31 = (v30 >> 7) & ~(v30 >> 31);
            }
          }
          v15[v28 + v52] = v31;
          ++v28;
        }
        while (v28 != a4);
      }
      int v32 = a6 - 1;
      int v33 = v23 - 2;
      CFDataRef v34 = v15;
      uint64_t v35 = v48;
      if (v50)
      {
        do
        {
          *CFDataRef v34 = v15[v32];
          char v36 = v15[v33--];
          v34[v23] = v36;
          ++v34;
          --v32;
          --v35;
        }
        while (v35);
      }
      if (a4 >= 1)
      {
        uint64_t v37 = v15;
        uint64_t v38 = v52;
        do
        {
          int v39 = 0;
          if ((a6 & 0x80000000) == 0)
          {
            uint64_t v40 = a5;
            uint64_t v41 = v37;
            int v42 = v27;
            do
            {
              int v44 = *v40++;
              int v43 = v44;
              int v45 = *v41++;
              v39 += v45 * v43;
              --v42;
            }
            while (v42);
            if (v39 > 32639) {
              LOBYTE(v39) = -1;
            }
            else {
              int v39 = (v39 >> 7) & ~(v39 >> 31);
            }
          }
          a1[result * a2 + v38 - v52] = v39;
          ++v38;
          ++v37;
        }
        while (v38 < v23);
      }
      int v46 = v52 + 1 + result;
      if (result >= ~v52 + a3) {
        int v46 = 2 * a3 - 3 - (v52 + result);
      }
      uint64_t v54 = result;
      memcpy(&v13[a4 * (uint64_t)v22], &a1[v46 * a2], a4);
      int v27 = v47;
      int v22 = (v22 + 1) % a6;
      uint64_t result = v54 + 1;
    }
    while (v54 + 1 != a3);
  }
  if (v15) {
    uint64_t result = MEMORY[0x1C18605A0](v15, 0x1000C8077774924);
  }
  if (v13)
  {
    JUMPOUT(0x1C18605A0);
  }
  return result;
}

void sub_1BBA6C2E4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = sub_1BBA6BF1C;
  *(void *)(a1 + 48) = nullsub_22;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 24) = a2;
  operator new();
}

void sub_1BBA6C3A8(_Unwind_Exception *a1)
{
  uint64_t v4 = sub_1BB9C607C(v2);
  MEMORY[0x1C18605E0](v4, 0xC0C40B8AA526DLL);
  sub_1BBA593D0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA6C3E8(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    uint64_t v4 = a3;
    uint64_t v5 = 0;
    uint64_t v9 = 0;
    uint64_t v6 = (_DWORD *)(a1 + 7852);
    do
    {
      if (v5 == 4) {
        return 4294954394;
      }
      uint64_t v7 = v5;
      if (sub_1BBA6C4B4(v4, ++v6, &v9, 0, 0x33u)) {
        return 4294954394;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v9 + 1;
    }
    while (*v9 == 58);
    if (v7 <= 2)
    {
      do
        *(_DWORD *)(a1 + 7856 + 4 * v5++) = *v6;
      while (v5 != 4);
    }
    return 0;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a1 + 7864) = -1;
    *(void *)(a1 + 7856) = -1;
  }
  return result;
}

uint64_t sub_1BBA6C4B4(const char *a1, _DWORD *a2, char **a3, int a4, unsigned int a5)
{
  *__error() = 0;
  uint64_t v10 = strtol(a1, a3, 10);
  if (v10)
  {
    uint64_t result = 4294954394;
    if (v10 < a4) {
      return result;
    }
    goto LABEL_6;
  }
  unsigned int v12 = __error();
  uint64_t result = 4294954394;
  if (a4 <= 0 && !*v12)
  {
LABEL_6:
    if (v10 <= a5)
    {
      uint64_t result = 0;
      *a2 = v10;
    }
  }
  return result;
}

uint64_t sub_1BBA6C554(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    uint64_t v4 = a3;
    uint64_t v5 = 0;
    uint64_t v9 = 0;
    uint64_t v6 = (_DWORD *)(a1 + 7836);
    do
    {
      if (v5 == 4) {
        return 4294954394;
      }
      uint64_t v7 = v5;
      if (sub_1BBA6C4B4(v4, ++v6, &v9, -12, 0xCu)) {
        return 4294954394;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v9 + 1;
    }
    while (*v9 == 58);
    if (v7 <= 2)
    {
      do
        *(_DWORD *)(a1 + 7840 + 4 * v5++) = *v6;
      while (v5 != 4);
    }
  }
  else
  {
    memset_pattern16((void *)(a1 + 7840), &unk_1BBB701A0, 0x10uLL);
  }
  return 0;
}

uint64_t sub_1BBA6C628(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    uint64_t v4 = a3;
    uint64_t v5 = 0;
    uint64_t v9 = 0;
    uint64_t v6 = (_DWORD *)(a1 + 7820);
    do
    {
      if (v5 == 4) {
        return 4294954394;
      }
      uint64_t v7 = v5;
      if (sub_1BBA6C4B4(v4, ++v6, &v9, 0, 0x33u)) {
        return 4294954394;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v9 + 1;
    }
    while (*v9 == 58);
    if (v7 <= 2)
    {
      do
        *(_DWORD *)(a1 + 7824 + 4 * v5++) = *v6;
      while (v5 != 4);
    }
    return 0;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a1 + 7832) = -1;
    *(void *)(a1 + 7824) = -1;
  }
  return result;
}

uint64_t sub_1BBA6C6F4(uint64_t a1, int a2, char *a3)
{
  *(unsigned char *)(a1 + 436) = 0;
  if (!a3) {
    return 0;
  }
  if (sscanf(a3, "%hu:%hu:%hu:%hu:%hu:%hu:%hu:%hu:%u:%u", a1 + 444, a1 + 450, a1 + 446, a1 + 452, a1 + 448, a1 + 454, a1 + 456, a1 + 458, a1 + 460, a1 + 464) != 10)return 4294954394; {
  uint64_t result = 0;
  }
  *(unsigned char *)(a1 + 436) = 1;
  return result;
}

uint64_t sub_1BBA6C798(uint64_t a1, int a2, char *__s)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 264);
  long long v59 = 0u;
  memset(v60, 0, sizeof(v60));
  *(_OWORD *)__sa = 0u;
  long long v58 = 0u;
  if (!__s) {
    return 0;
  }
  *(unsigned char *)(a1 + 624) = 1;
  size_t v6 = strlen(__s) + 1;
  uint64_t v7 = (char *)operator new[](v6, MEMORY[0x1E4FBA2D0]);
  if (v7)
  {
    uint64_t v8 = v7;
    memcpy(v7, __s, v6);
    uint64_t v9 = 0;
    __stringp = v8;
    while (1)
    {
      uint64_t v10 = strsep(&__stringp, ", \t");
      if (!v10) {
        break;
      }
      if (*v10)
      {
        __sa[v9++] = v10;
        if (v9 == 57)
        {
          while (!*v10)
          {
            uint64_t v10 = strsep(&__stringp, ", \t");
            if (!v10) {
              goto LABEL_11;
            }
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            uint64_t v26 = MEMORY[0x1E4F14500];
            int v27 = "Too many parameters to ref-struct\n";
            uint32_t v28 = 2;
            goto LABEL_36;
          }
          goto LABEL_21;
        }
      }
    }
    __sa[v9] = 0;
LABEL_11:
    int v11 = __sa[0];
    uint64_t v12 = sub_1BBA6CFA8(__sa[0], (unsigned char *)(a1 + 108 * v3 + 628));
    if (v12)
    {
      uint64_t v13 = v12;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      *(_DWORD *)std::string buf = 136315138;
      v56[0] = v11;
      size_t v14 = MEMORY[0x1E4F14500];
      uint64_t v15 = "Invalid frame_idx_in_gop '%s'\n";
      goto LABEL_14;
    }
    uint64_t v17 = __sa[1];
    if (!__sa[1] || strlen(__sa[1]) >= 2)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)std::string buf = 136315138;
      v56[0] = v17;
      uint64_t v26 = MEMORY[0x1E4F14500];
      int v27 = "Invalid frame_type '%s'\n";
LABEL_35:
      uint32_t v28 = 12;
      goto LABEL_36;
    }
    uint64_t v19 = a1 + 108 * v3;
    *(unsigned char *)(v19 + 629) = *__sa[1];
    uint64_t v20 = v58;
    uint64_t v21 = sub_1BBA6CFA8((const char *)v58, (unsigned char *)(v19 + 630));
    if (v21)
    {
      uint64_t v13 = v21;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315138;
        v56[0] = v20;
        size_t v14 = MEMORY[0x1E4F14500];
        uint64_t v15 = "Invalid poc '%s'\n";
        goto LABEL_14;
      }
LABEL_22:
      MEMORY[0x1C18605A0](v8, 0x1000C8077774924);
      return v13;
    }
    uint64_t v22 = *((void *)&v58 + 1);
    uint64_t v23 = sub_1BBA6D02C(*((const char **)&v58 + 1), (unsigned char *)(a1 + 108 * v3 + 631));
    if (v23)
    {
      uint64_t v13 = v23;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      *(_DWORD *)std::string buf = 136315138;
      v56[0] = v22;
      size_t v14 = MEMORY[0x1E4F14500];
      uint64_t v15 = "Invalid qp_offset '%s'\n";
LABEL_14:
      uint32_t v16 = 12;
LABEL_15:
      _os_log_error_impl(&dword_1BB9B9000, v14, OS_LOG_TYPE_ERROR, v15, buf, v16);
      goto LABEL_22;
    }
    uint64_t v24 = v59;
    int v25 = (unsigned char *)(a1 + 108 * v3 + 632);
    if (sub_1BBA6CFA8((const char *)v59, v25) || *v25 >= 0x11u)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)std::string buf = 136315138;
      v56[0] = v24;
      uint64_t v26 = MEMORY[0x1E4F14500];
      int v27 = "Invalid number_ref_all '%s'\n";
      goto LABEL_35;
    }
    uint64_t v29 = *((void *)&v59 + 1);
    if (sub_1BBA6CFA8(*((const char **)&v59 + 1), (unsigned char *)(a1 + 108 * v3 + 633))
      || *(unsigned __int8 *)(a1 + 108 * v3 + 633) > *v25)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)std::string buf = 136315138;
      v56[0] = v29;
      uint64_t v26 = MEMORY[0x1E4F14500];
      int v27 = "Invalid number_ref_active '%s'\n";
      goto LABEL_35;
    }
    if (*v25)
    {
      int v30 = (const char **)v60;
      int v31 = (_DWORD *)(a1 + 108 * v3 + 636);
      uint64_t v32 = 6;
      do
      {
        int v33 = *v30;
        uint64_t v34 = sub_1BBA6D0B4(*v30, v31);
        if (v34)
        {
          uint64_t v13 = v34;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_22;
          }
          *(_DWORD *)std::string buf = 67109378;
          LODWORD(v56[0]) = v32 - 6;
          WORD2(v56[0]) = 2080;
          *(void *)((char *)v56 + 6) = v33;
          size_t v14 = MEMORY[0x1E4F14500];
          uint64_t v15 = "Invalid ref.ref_frames[%d] '%s'\n";
          goto LABEL_68;
        }
        unsigned int v35 = v32 + 1;
        ++v30;
        unint64_t v36 = v32 - 5;
        ++v31;
        ++v32;
      }
      while (v36 < *v25);
      if (!*v25) {
        goto LABEL_53;
      }
      unint64_t v37 = 0;
      while (1)
      {
        uint64_t v38 = *v30;
        uint64_t v39 = sub_1BBA6CFA8(*v30, (unsigned char *)(a1 + 108 * v3 + 700 + v37));
        if (v39) {
          break;
        }
        ++v37;
        ++v30;
        if (v37 >= *v25)
        {
          v35 += v37;
          goto LABEL_53;
        }
      }
      uint64_t v13 = v39;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109378;
        LODWORD(v56[0]) = v37;
        WORD2(v56[0]) = 2080;
        *(void *)((char *)v56 + 6) = v38;
        size_t v14 = MEMORY[0x1E4F14500];
        uint64_t v15 = "Invalid ref.ref_used[%d] '%s'\n";
LABEL_68:
        uint32_t v16 = 18;
        goto LABEL_15;
      }
      goto LABEL_22;
    }
    unsigned int v35 = 6;
LABEL_53:
    unsigned int v53 = 0;
    uint64_t v40 = __sa[v35];
    int v41 = sub_1BBA6D138(v40, &v53);
    unsigned int v42 = v53;
    if (v41) {
      BOOL v43 = 1;
    }
    else {
      BOOL v43 = v53 >= 3;
    }
    if (v43)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)std::string buf = 136315138;
      v56[0] = v40;
      uint64_t v26 = MEMORY[0x1E4F14500];
      int v27 = "Invalid rps scheme '%s'\n";
      goto LABEL_35;
    }
    unsigned int v44 = v35 + 1;
    *(unsigned char *)(a1 + 108 * v3 + 716) = v53 != 0;
    if (v42)
    {
      int v45 = __sa[v44];
      uint64_t v46 = sub_1BBA6D02C(v45, (unsigned char *)(a1 + 108 * v3 + 717));
      if (v46)
      {
        uint64_t v13 = v46;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_22;
        }
        *(_DWORD *)std::string buf = 136315138;
        v56[0] = v45;
        size_t v14 = MEMORY[0x1E4F14500];
        uint64_t v15 = "Invalid delta_rps '%s'\n";
        goto LABEL_14;
      }
      uint64_t v47 = v35;
      uint64_t v48 = __sa[v35 + 2];
      uint64_t v49 = (unsigned char *)(a1 + 108 * v3 + 718);
      if (sub_1BBA6CFA8(v48, v49) || *v49 > 0x10u)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_21;
        }
        *(_DWORD *)std::string buf = 136315138;
        v56[0] = v48;
        uint64_t v26 = MEMORY[0x1E4F14500];
        int v27 = "Invalid num_ref_predict '%s'\n";
        goto LABEL_35;
      }
      if (*v49)
      {
        uint64_t v50 = 0;
        uint64_t v51 = a1 + 108 * v3 + 719;
        while (1)
        {
          int v52 = (const char *)*((void *)&v58 + v47 + v50 + 1);
          if (sub_1BBA6CFA8(v52, (unsigned char *)(v51 + v50)) || *(unsigned __int8 *)(v51 + v50) >= 3u) {
            break;
          }
          if (++v50 >= (unint64_t)*v49)
          {
            unsigned int v44 = v47 + 3 + v50;
            goto LABEL_82;
          }
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109378;
          LODWORD(v56[0]) = v50;
          WORD2(v56[0]) = 2080;
          *(void *)((char *)v56 + 6) = v52;
          uint64_t v26 = MEMORY[0x1E4F14500];
          int v27 = "Invalid ref.predict_flag[%d] '%s'\n";
          uint32_t v28 = 18;
LABEL_36:
          _os_log_error_impl(&dword_1BB9B9000, v26, OS_LOG_TYPE_ERROR, v27, buf, v28);
        }
LABEL_21:
        uint64_t v13 = 4294954394;
        goto LABEL_22;
      }
      unsigned int v44 = v35 + 3;
    }
LABEL_82:
    uint64_t v13 = (uint64_t)__sa[v44];
    if (v13)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)std::string buf = 136315138;
      v56[0] = v13;
      uint64_t v26 = MEMORY[0x1E4F14500];
      int v27 = "Trailing parameters in reference structure, starting with '%s'\n";
      goto LABEL_35;
    }
    ++*(_DWORD *)(a1 + 264);
    goto LABEL_22;
  }
  return 4294954392;
}

uint64_t sub_1BBA6CFA8(const char *a1, unsigned char *a2)
{
  __endptr = 0;
  if (!a1 || !*a1) {
    return 4294954394;
  }
  unint64_t v3 = strtoimax(a1, &__endptr, 0);
  unint64_t v4 = v3;
  if (!__endptr)
  {
    if (v3 <= 0xFF)
    {
LABEL_10:
      uint64_t result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  uint64_t result = 4294954394;
  if (!*__endptr && (v4 & 0x8000000000000000) == 0 && v4 <= 0xFF) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1BBA6D02C(const char *a1, unsigned char *a2)
{
  __endptr = 0;
  if (!a1 || !*a1) {
    return 4294954394;
  }
  intmax_t v3 = strtoimax(a1, &__endptr, 0);
  uint64_t v4 = v3;
  if (!__endptr)
  {
    if (v3 == (char)v3)
    {
LABEL_10:
      uint64_t result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  uint64_t result = 4294954394;
  if (!*__endptr && v4 >= -128 && v4 <= 127) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1BBA6D0B4(const char *a1, _DWORD *a2)
{
  __endptr = 0;
  if (a1 && *a1)
  {
    intmax_t v3 = strtoimax(a1, &__endptr, 0);
    int v4 = v3;
    if (__endptr)
    {
      if (*__endptr) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = v3 < (uint64_t)0xFFFFFFFF80000000;
      }
      if (v5 || v3 > 0x7FFFFFFF) {
        return 4294954394;
      }
LABEL_14:
      uint64_t result = 0;
      *a2 = v4;
      return result;
    }
    if (v3 == (int)v3) {
      goto LABEL_14;
    }
  }
  return 4294954394;
}

uint64_t sub_1BBA6D138(const char *a1, _DWORD *a2)
{
  __endptr = 0;
  if (!a1 || !*a1) {
    return 4294954394;
  }
  unint64_t v3 = strtoimax(a1, &__endptr, 0);
  unint64_t v4 = v3;
  if (!__endptr)
  {
    if (!HIDWORD(v3))
    {
LABEL_10:
      uint64_t result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  uint64_t result = 4294954394;
  if (!*__endptr && (v4 & 0x8000000000000000) == 0 && !HIDWORD(v4)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1BBA6D1BC(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    unint64_t v3 = a3;
    uint64_t v4 = 0;
    uint64_t v8 = 0;
    uint64_t v5 = a1 + 188;
    while (1)
    {
      uint64_t v6 = v4 + 4;
      if (v4 == 28 || sub_1BBA6C4B4(v3, (_DWORD *)(v5 + v4), &v8, 0, 0x7FFFFFFFu)) {
        break;
      }
      unint64_t v3 = v8 + 1;
      uint64_t v4 = v6;
      if (*v8 != 58) {
        return 0;
      }
    }
    return 4294954394;
  }
  else
  {
    memset_pattern16((void *)(a1 + 188), &unk_1BBB70190, 0x1CuLL);
    return 0;
  }
}

uint64_t sub_1BBA6D254(uint64_t a1, uint64_t a2, const char *a3)
{
  *(_DWORD *)(a1 + 7544) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  if (a3)
  {
    uint64_t v10 = 0;
    if (*(int *)(a1 + 268) >= 1)
    {
      uint64_t v4 = a3;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = a1 + 272;
      while (!sub_1BBA6C4B4(v4, (_DWORD *)(v7 + v5), &v10, 0, 0x7FFFFFFFu)
           && (*v10 == 58 || v6 >= *(int *)(a1 + 268) - 1))
      {
        *(_DWORD *)(a1 + 7544) += *(_DWORD *)(v7 + 4 * v6);
        int v8 = *(_DWORD *)(v7 + 4 * v6);
        if (v8 > *(_DWORD *)(a1 + 304)) {
          *(_DWORD *)(a1 + 304) = v8;
        }
        ++v6;
        v5 += 4;
        v4 += 2;
        if (v6 >= *(int *)(a1 + 268)) {
          return 0;
        }
      }
    }
    return 4294954394;
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 272) = 1;
    *(void *)(a1 + 276) = 0;
    *(void *)(a1 + 292) = 0;
    *(void *)(a1 + 284) = 0;
    *(void *)(a1 + 300) = 0x100000000;
  }
  return result;
}

uint64_t sub_1BBA6D368(unsigned char *a1, uint64_t a2, const char *a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v10 = 0;
  if (a2 == 0x81C3B0CF315BC925)
  {
    uint64_t v6 = a1 + 316;
    uint64_t v7 = a1 + 317;
  }
  else
  {
    if (a2 != 0x8C49EF6ED9F28EA0) {
      return 4294954394;
    }
    uint64_t v6 = a1 + 314;
    uint64_t v7 = a1 + 315;
  }
  if (sub_1BBA6D4A0(a3, v6, &v10, 8, 0xEu)) {
    return 4294954394;
  }
  if (*v10)
  {
    if (*v10 != 58 || sub_1BBA6D4A0(a3, v7, &v10, 8, 0xEu)) {
      return 4294954394;
    }
  }
  else
  {
    *uint64_t v7 = *v6;
  }
  if (a2 == 0x81C3B0CF315BC925) {
    return 0;
  }
  int v9 = a1[314];
  if (v9 == a1[315] && (v9 | 2) == 0xA) {
    return 0;
  }
  else {
    return 4294954386;
  }
}

uint64_t sub_1BBA6D4A0(const char *a1, unsigned char *a2, char **a3, int a4, unsigned __int8 a5)
{
  *__error() = 0;
  uint64_t v10 = strtol(a1, a3, 10);
  if (v10)
  {
    uint64_t result = 4294954394;
    if (v10 < a4) {
      return result;
    }
    goto LABEL_6;
  }
  uint64_t v12 = __error();
  uint64_t result = 4294954394;
  if (a4 <= 0 && !*v12)
  {
LABEL_6:
    if (v10 <= a5)
    {
      uint64_t result = 0;
      *a2 = v10;
    }
  }
  return result;
}

uint64_t sub_1BBA6D540(unsigned char *a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    uint64_t v5 = 0;
    if (sub_1BBA6D4A0(a3, a1 + 336, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1BBA6D4A0(v5 + 1, a1 + 338, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1BBA6D4A0(v5 + 1, a1 + 337, &v5, 0, 0x7Fu)
      || *v5)
    {
      return 4294954394;
    }
  }
  else
  {
    *((_WORD *)a1 + 168) = -1;
    a1[338] = 0;
  }
  return 0;
}

uint64_t sub_1BBA6D60C(unsigned char *a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    uint64_t v5 = 0;
    if (sub_1BBA6D4A0(a3, a1 + 149, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1BBA6D4A0(v5 + 1, a1 + 150, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1BBA6D4A0(v5 + 1, a1 + 151, &v5, 0, 0x7Fu)
      || *v5 != 58
      || sub_1BBA6D4A0(v5 + 1, a1 + 152, &v5, 0, 0x7Fu)
      || *v5)
    {
      return 4294954394;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 149) = -1;
  }
  return 0;
}

uint64_t sub_1BBA6D700(uint64_t a1, uint64_t a2, const char *a3)
{
  if (!a3) {
    return 4294954394;
  }
  int v8 = 0;
  uint64_t v9 = 0;
  if (sub_1BBA6C4B4(a3, (_DWORD *)&v9 + 1, &v8, 0x80000000, 0x7FFFFFFFu)) {
    return 4294954394;
  }
  int v6 = *v8;
  if (v6 == 47)
  {
    if (sub_1BBA6C4B4(v8 + 1, &v9, &v8, 0x80000000, 0x7FFFFFFFu) || *v8) {
      return 4294954394;
    }
    double v7 = (double)SHIDWORD(v9) / (double)(int)v9;
  }
  else if (v6 == 46)
  {
    *__error() = 0;
    double v7 = strtod(a3, 0);
    if (*__error() || v7 < 2.22507386e-308 || v7 > 1.79769313e308) {
      return 4294954394;
    }
  }
  else
  {
    if (*v8) {
      return 4294954394;
    }
    double v7 = (double)SHIDWORD(v9);
  }
  uint64_t result = 0;
  *(double *)(a1 + 96) = v7;
  return result;
}

uint64_t sub_1BBA6D820(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    uint64_t v5 = 0;
    if (sub_1BBA6D8A8(a3, (_WORD *)(a1 + 90), &v5)
      || *v5 != 120
      || sub_1BBA6D8A8(v5 + 1, (_WORD *)(a1 + 92), &v5)
      || *v5)
    {
      return 4294954394;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 90) = 0;
  }
  return 0;
}

uint64_t sub_1BBA6D8A8(const char *a1, _WORD *a2, char **a3)
{
  *__error() = 0;
  uint64_t v6 = strtol(a1, a3, 10);
  if (v6)
  {
    __int16 v7 = v6;
    if ((unint64_t)(v6 - 0x8000) >= 0xFFFFFFFFFFFF8001)
    {
      uint64_t result = 0;
      *a2 = v7;
      return result;
    }
  }
  else
  {
    __error();
  }
  return 4294954394;
}

uint64_t sub_1BBA6D91C(uint64_t a1, int a2, char *__s1)
{
  if (!__s1 || !strcmp(__s1, "default"))
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 104) = 1;
    *(unsigned char *)(a1 + 7872) = 0;
    *(_DWORD *)(a1 + 168) = 84018691;
    *(_WORD *)(a1 + 172) = 514;
    *(unsigned char *)(a1 + 124) = 0;
    *(unsigned char *)(a1 + 127) = 0;
    *(unsigned char *)(a1 + 225) = 0;
    *(_WORD *)(a1 + 259) = 4;
    *(_WORD *)(a1 + 128) = 257;
    *(_WORD *)(a1 + 569) = 4;
    *(unsigned char *)(a1 + 234) = 2;
    *(unsigned char *)(a1 + 250) = 1;
    *(unsigned char *)(a1 + 257) = 0;
    *(unsigned char *)(a1 + 245) = 0;
    *(_DWORD *)(a1 + 512) = 0;
    *(unsigned char *)(a1 + 571) = 2;
    *(_WORD *)(a1 + 604) = 256;
    *(unsigned char *)(a1 + 55) = 0;
    *(unsigned char *)(a1 + 248) = 0;
    *(unsigned char *)(a1 + 227) = 0;
    *(void *)(a1 + 606) = 0;
    *(unsigned char *)(a1 + 614) = 0;
    *(unsigned char *)(a1 + 256) = 1;
    *(_WORD *)(a1 + 615) = 0;
    *(unsigned char *)(a1 + 617) = 0;
    *(_DWORD *)(a1 + 7804) = 0;
    *(_WORD *)(a1 + 7808) = 0;
    *(_DWORD *)(a1 + 7812) = 4;
  }
  else
  {
    uint64_t result = strcmp(__s1, "capture");
    if (result)
    {
      if (!strcmp(__s1, "facetime"))
      {
        sub_1BBA6DB50(a1);
      }
      else if (!strcmp(__s1, "sidecar"))
      {
        sub_1BBA6DCA0(a1);
      }
      else if (!strcmp(__s1, "airplay"))
      {
        sub_1BBA6DDB4(a1);
      }
      else if (!strcmp(__s1, "safeview"))
      {
        sub_1BBA6DEC4(a1);
      }
      else if (!strcmp(__s1, "carplay"))
      {
        sub_1BBA6DFD8(a1);
      }
      else
      {
        if (strcmp(__s1, "trafficlight")) {
          return 4294954394;
        }
        sub_1BBA6E0F4(a1);
      }
      return 0;
    }
    else
    {
      *(_DWORD *)(a1 + 64) = 2;
      *(_WORD *)(a1 + 569) = 3;
      *(_DWORD *)(a1 + 605) = 16843009;
      *(_WORD *)(a1 + 609) = 257;
      *(unsigned char *)(a1 + 571) = 2;
      *(unsigned char *)(a1 + 604) = 0;
      *(unsigned char *)(a1 + 55) = 2;
      *(unsigned char *)(a1 + 248) = 0;
      *(unsigned char *)(a1 + 227) = 0;
      *(_DWORD *)(a1 + 611) = 0;
      *(unsigned char *)(a1 + 256) = 1;
      *(_WORD *)(a1 + 615) = 0;
      *(_DWORD *)(a1 + 7804) = 0;
      *(_WORD *)(a1 + 7808) = 0;
      *(_DWORD *)(a1 + 7812) = 4;
    }
  }
  return result;
}

double sub_1BBA6DB50(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  uint64_t v2 = (_WORD *)(a1 + 7808);
  *(unsigned char *)(a1 + 7872) = 0;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(_WORD *)(a1 + 172) = 0;
  *(unsigned char *)(a1 + 124) = 1;
  *(unsigned char *)(a1 + 127) = 2;
  *(unsigned char *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(unsigned char *)(a1 + 216) = 1;
  *(void *)(a1 + 96) = 0x402E000000000000;
  *(unsigned char *)(a1 + 58) = 1;
  *(unsigned char *)(a1 + 60) = 1;
  *(unsigned char *)(a1 + 250) = 1;
  *(unsigned char *)(a1 + 257) = 0;
  *(unsigned char *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(unsigned char *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 254) = 1;
  *(unsigned char *)(a1 + 236) = 1;
  *(unsigned char *)(a1 + 348) = 1;
  *(unsigned char *)(a1 + 351) = 0;
  *(unsigned char *)(a1 + 252) = 0;
  *(unsigned char *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 376) = 1;
  *(unsigned char *)(a1 + 351) = _os_feature_enabled_impl();
  *(_WORD *)(a1 + 172) = 512;
  *(unsigned char *)(a1 + 252) = 2;
  *(unsigned char *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2) {
    *(unsigned char *)(a1 + 525) = 1;
  }
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(unsigned char *)(a1 + 55) = 2;
  *(unsigned char *)(a1 + 235) = 1;
  *(unsigned char *)(a1 + 245) = 1;
  *(unsigned char *)(a1 + 253) = 1;
  *(unsigned char *)(a1 + 227) = 1;
  *(unsigned char *)(a1 + 260) = 1;
  *(unsigned char *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(unsigned char *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(unsigned char *)(a1 + 248) = 0;
  double result = 7.29112205e-304;
  *(_DWORD *)(a1 + 7804) = 0x1000000;
  _WORD *v2 = 257;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

double sub_1BBA6DCA0(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 42;
  *(unsigned char *)(a1 + 104) = 1;
  *(unsigned char *)(a1 + 7872) = 0;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 127) = 2;
  *(unsigned char *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(unsigned char *)(a1 + 216) = 1;
  *(void *)(a1 + 96) = 0x402E000000000000;
  *(unsigned char *)(a1 + 58) = 0;
  *(unsigned char *)(a1 + 60) = 1;
  *(unsigned char *)(a1 + 250) = 1;
  *(unsigned char *)(a1 + 257) = 0;
  *(unsigned char *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(unsigned char *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 254) = 1;
  *(unsigned char *)(a1 + 236) = 1;
  *(unsigned char *)(a1 + 348) = 1;
  *(unsigned char *)(a1 + 351) = 0;
  *(unsigned char *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 512) = 0x200000002;
  *(unsigned char *)(a1 + 376) = 1;
  *(_WORD *)(a1 + 172) = 512;
  *(unsigned char *)(a1 + 252) = 2;
  *(unsigned char *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2) {
    *(unsigned char *)(a1 + 525) = 1;
  }
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(unsigned char *)(a1 + 55) = 2;
  *(unsigned char *)(a1 + 235) = 1;
  *(unsigned char *)(a1 + 245) = 1;
  *(unsigned char *)(a1 + 253) = 1;
  *(unsigned char *)(a1 + 227) = 1;
  *(unsigned char *)(a1 + 260) = 1;
  *(unsigned char *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(unsigned char *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(unsigned char *)(a1 + 248) = 0;
  double result = 7.29112205e-304;
  *(_DWORD *)(a1 + 7804) = 0x1000000;
  *(_WORD *)(a1 + 7808) = 257;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

uint64_t sub_1BBA6DDB4(uint64_t result)
{
  *(_DWORD *)(result + 64) = 20;
  *(unsigned char *)(result + 104) = 1;
  *(unsigned char *)(result + 7872) = 0;
  *(_DWORD *)(result + 168) = 84018691;
  *(unsigned char *)(result + 124) = 1;
  *(unsigned char *)(result + 525) = 1;
  *(unsigned char *)(result + 127) = 2;
  *(unsigned char *)(result + 225) = 1;
  *(_WORD *)(result + 234) = 2;
  *(unsigned char *)(result + 216) = 1;
  *(void *)(result + 96) = 0x402E000000000000;
  *(unsigned char *)(result + 58) = 0;
  *(unsigned char *)(result + 60) = 1;
  *(unsigned char *)(result + 250) = 1;
  *(unsigned char *)(result + 257) = 0;
  *(unsigned char *)(result + 259) = 1;
  *(_WORD *)(result + 128) = 0;
  *(_WORD *)(result + 569) = 258;
  *(unsigned char *)(result + 571) = 2;
  *(_DWORD *)(result + 592) = 0;
  *(unsigned char *)(result + 254) = 1;
  *(unsigned char *)(result + 236) = 1;
  *(unsigned char *)(result + 348) = 1;
  *(unsigned char *)(result + 351) = 0;
  *(unsigned char *)(result + 59) = 1;
  *(_DWORD *)(result + 176) = 0;
  *(void *)(result + 512) = 0x200000002;
  *(unsigned char *)(result + 376) = 1;
  *(_WORD *)(result + 172) = 512;
  *(unsigned char *)(result + 252) = 2;
  *(unsigned char *)(result + 523) = 1;
  if (*(_DWORD *)(result + 508) == 2) {
    *(unsigned char *)(result + 525) = 1;
  }
  *(_WORD *)(result + 608) = 257;
  *(_DWORD *)(result + 604) = 16843009;
  *(unsigned char *)(result + 55) = 2;
  *(unsigned char *)(result + 235) = 1;
  *(unsigned char *)(result + 245) = 1;
  *(unsigned char *)(result + 253) = 1;
  *(unsigned char *)(result + 227) = 1;
  *(unsigned char *)(result + 260) = 1;
  *(unsigned char *)(result + 614) = 1;
  *(_DWORD *)(result + 610) = 16843009;
  *(unsigned char *)(result + 256) = 0;
  *(_WORD *)(result + 615) = 1;
  *(unsigned char *)(result + 248) = 0;
  *(_WORD *)(result + 7804) = 0;
  *(_DWORD *)(result + 7806) = 16843009;
  *(_DWORD *)(result + 7812) = 12;
  return result;
}

double sub_1BBA6DEC4(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 39;
  *(unsigned char *)(a1 + 104) = 1;
  *(unsigned char *)(a1 + 7872) = 0;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 127) = 2;
  *(unsigned char *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(unsigned char *)(a1 + 216) = 1;
  *(void *)(a1 + 96) = 0x402E000000000000;
  *(unsigned char *)(a1 + 58) = 1;
  *(unsigned char *)(a1 + 60) = 1;
  *(unsigned char *)(a1 + 250) = 1;
  *(unsigned char *)(a1 + 257) = 0;
  *(unsigned char *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(unsigned char *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 254) = 1;
  *(unsigned char *)(a1 + 236) = 1;
  *(unsigned char *)(a1 + 348) = 1;
  *(unsigned char *)(a1 + 351) = 0;
  *(unsigned char *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 512) = 0x200000002;
  *(unsigned char *)(a1 + 376) = 1;
  *(_WORD *)(a1 + 172) = 512;
  *(unsigned char *)(a1 + 252) = 2;
  *(unsigned char *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2) {
    *(unsigned char *)(a1 + 525) = 1;
  }
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(unsigned char *)(a1 + 55) = 2;
  *(unsigned char *)(a1 + 235) = 1;
  *(unsigned char *)(a1 + 245) = 1;
  *(unsigned char *)(a1 + 253) = 1;
  *(unsigned char *)(a1 + 227) = 1;
  *(unsigned char *)(a1 + 260) = 1;
  *(unsigned char *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(unsigned char *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(unsigned char *)(a1 + 248) = 0;
  double result = 7.29112205e-304;
  *(_DWORD *)(a1 + 7804) = 0x1000000;
  *(_WORD *)(a1 + 7808) = 257;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

double sub_1BBA6DFD8(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 38;
  *(unsigned char *)(a1 + 104) = 1;
  *(unsigned char *)(a1 + 7872) = 0;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 525) = 0;
  *(unsigned char *)(a1 + 127) = 2;
  *(unsigned char *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(unsigned char *)(a1 + 216) = 1;
  *(void *)(a1 + 96) = 0x404E000000000000;
  *(unsigned char *)(a1 + 58) = 0;
  *(unsigned char *)(a1 + 60) = 1;
  *(unsigned char *)(a1 + 250) = 1;
  *(unsigned char *)(a1 + 257) = 0;
  *(unsigned char *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(unsigned char *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 254) = 1;
  *(unsigned char *)(a1 + 236) = 1;
  *(unsigned char *)(a1 + 348) = 1;
  *(unsigned char *)(a1 + 351) = 0;
  *(unsigned char *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 512) = 0x200000002;
  *(unsigned char *)(a1 + 376) = 1;
  *(_WORD *)(a1 + 172) = 512;
  *(unsigned char *)(a1 + 252) = 2;
  *(unsigned char *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2) {
    *(unsigned char *)(a1 + 525) = 1;
  }
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(unsigned char *)(a1 + 55) = 2;
  *(unsigned char *)(a1 + 235) = 1;
  *(unsigned char *)(a1 + 245) = 1;
  *(unsigned char *)(a1 + 253) = 1;
  *(unsigned char *)(a1 + 227) = 1;
  *(unsigned char *)(a1 + 260) = 1;
  *(unsigned char *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(unsigned char *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(unsigned char *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 7808) = 257;
  *(void *)&double result = 16777217;
  *(_DWORD *)(a1 + 7804) = 16777217;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

double sub_1BBA6E0F4(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 43;
  *(unsigned char *)(a1 + 104) = 3;
  *(unsigned char *)(a1 + 7872) = 0;
  *(void *)(a1 + 7840) = 0x600000000;
  *(_DWORD *)(a1 + 7848) = 3;
  *(_DWORD *)(a1 + 168) = 84018691;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 127) = 2;
  *(unsigned char *)(a1 + 225) = 1;
  *(_WORD *)(a1 + 234) = 2;
  *(unsigned char *)(a1 + 216) = 1;
  *(void *)(a1 + 96) = 0x402E000000000000;
  *(unsigned char *)(a1 + 58) = 0;
  *(_WORD *)(a1 + 115) = 255;
  *(_DWORD *)(a1 + 120) = 11;
  *(unsigned char *)(a1 + 60) = 1;
  *(unsigned char *)(a1 + 250) = 1;
  *(unsigned char *)(a1 + 257) = 0;
  *(unsigned char *)(a1 + 259) = 1;
  *(_WORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 569) = 258;
  *(unsigned char *)(a1 + 571) = 2;
  *(_DWORD *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 254) = 1;
  *(unsigned char *)(a1 + 236) = 1;
  *(unsigned char *)(a1 + 348) = 1;
  *(unsigned char *)(a1 + 59) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 376) = 1;
  *(unsigned char *)(a1 + 351) = 0;
  *(_WORD *)(a1 + 172) = 512;
  *(unsigned char *)(a1 + 252) = 2;
  *(unsigned char *)(a1 + 523) = 1;
  if (*(_DWORD *)(a1 + 508) == 2) {
    *(unsigned char *)(a1 + 525) = 1;
  }
  *(_WORD *)(a1 + 608) = 257;
  *(_DWORD *)(a1 + 604) = 16843009;
  *(unsigned char *)(a1 + 55) = 2;
  *(unsigned char *)(a1 + 235) = 1;
  *(unsigned char *)(a1 + 245) = 1;
  *(unsigned char *)(a1 + 253) = 1;
  *(unsigned char *)(a1 + 227) = 1;
  *(unsigned char *)(a1 + 260) = 1;
  *(unsigned char *)(a1 + 614) = 1;
  *(_DWORD *)(a1 + 610) = 16843009;
  *(unsigned char *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 615) = 1;
  *(unsigned char *)(a1 + 248) = 0;
  double result = 7.29112205e-304;
  *(_DWORD *)(a1 + 7804) = 0x1000000;
  *(_WORD *)(a1 + 7808) = 257;
  *(_DWORD *)(a1 + 7812) = 4;
  return result;
}

uint64_t sub_1BBA6E228(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    int v10 = 0;
    int v11 = 0;
    if (sub_1BBA6C4B4(a3, &v10, &v11, 0x80000000, 0x7FFFFFFFu)) {
      return 4294954394;
    }
    if (*v11 != 58) {
      return 4294954394;
    }
    int v9 = 0;
    if (sub_1BBA6C4B4(v11 + 1, &v9, &v11, 0x80000000, 0x7FFFFFFFu) || *v11) {
      return 4294954394;
    }
    uint64_t result = 0;
    if (a2 > 0x8C84307B56AD1A1)
    {
      switch(a2)
      {
        case 0x8C84307B56AD1A2:
          uint64_t result = 0;
          *(unsigned char *)(a1 + 170) = v10;
          *(unsigned char *)(a1 + 171) = v9;
          break;
        case 0x4179B3C137C3CEB0:
          uint64_t result = 0;
          *(_DWORD *)(a1 + 424) = v10;
          *(_DWORD *)(a1 + 428) = v9;
          break;
        case 0x571BB01944827A3ELL:
          uint64_t result = 0;
          *(unsigned char *)(a1 + 172) = v10;
          *(unsigned char *)(a1 + 173) = v9;
          break;
      }
      return result;
    }
    if (a2 != 0x3DC4253E192FDEDLL)
    {
      if (a2 == 0x8A24307B54A0265)
      {
        uint64_t result = 0;
        *(unsigned char *)(a1 + 168) = v10;
        *(unsigned char *)(a1 + 169) = v9;
      }
      return result;
    }
    __int16 v7 = v9;
    __int16 v8 = v10;
LABEL_29:
    uint64_t result = 0;
    *(unsigned char *)(a1 + 480) = a3 != 0;
    *(_WORD *)(a1 + 488) = v8;
    *(_WORD *)(a1 + 490) = v7;
    return result;
  }
  if (a2 <= 0x8C84307B56AD1A1)
  {
    __int16 v7 = 0;
    __int16 v8 = 0;
    if (a2 == 0x3DC4253E192FDEDLL) {
      goto LABEL_29;
    }
    uint64_t result = 0;
    if (a2 == 0x8A24307B54A0265)
    {
      uint64_t result = 0;
      *(_WORD *)(a1 + 168) = 1539;
    }
  }
  else if (a2 == 0x8C84307B56AD1A2)
  {
    uint64_t result = 0;
    *(_WORD *)(a1 + 170) = 1282;
  }
  else if (a2 == 0x4179B3C137C3CEB0)
  {
    uint64_t result = 0;
    *(void *)(a1 + 424) = 0;
  }
  else
  {
    uint64_t result = 0;
    if (a2 == 0x571BB01944827A3ELL)
    {
      uint64_t result = 0;
      *(_WORD *)(a1 + 172) = 0;
    }
  }
  return result;
}

void sub_1BBA6E4B4(void *a1)
{
  *a1 = &unk_1F14EDE48;
  uint64_t v1 = (void *)a1[1];
  if (v1)
  {
    do
    {
      uint64_t v2 = (void *)v1[1];
      (*(void (**)(void *))(*v1 + 16))(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }

  JUMPOUT(0x1C18605E0);
}

void *sub_1BBA6E548(void *a1)
{
  *a1 = &unk_1F14EDE48;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)v2[1];
      (*(void (**)(void *))(*v2 + 16))(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  return a1;
}

double sub_1BBA6E5BC(uint64_t a1)
{
  *(void *)(a1 + 573) = 0x101010101010101;
  int v1 = *(_DWORD *)(a1 + 508);
  *(unsigned char *)(a1 + 581) = v1 == 1;
  *(unsigned char *)(a1 + 582) = v1 == 2;
  *(unsigned char *)(a1 + 584) = v1 == 2;
  BOOL v2 = v1 == 2 && *(unsigned char *)(a1 + 224) != 0;
  *(unsigned char *)(a1 + 585) = v2;
  *(unsigned char *)(a1 + 583) = v1 != 0;
  *(void *)&double result = 1287;
  *(_DWORD *)(a1 + 587) = 1287;
  return result;
}

uint64_t sub_1BBA6E620(uint64_t a1)
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 216) && !*(_DWORD *)(a1 + 180)
    || *(__int16 *)(a1 + 90) < 1
    || *(__int16 *)(a1 + 92) < 1
    || *(double *)(a1 + 96) <= 0.0)
  {
    return 4294954387;
  }
  uint64_t v2 = *(char *)(a1 + 105);
  uint64_t result = 4294954387;
  if (v2 > 51) {
    return result;
  }
  uint64_t v4 = -6 * *(char *)(a1 + 314) + 48;
  if (v4 > v2) {
    return result;
  }
  uint64_t v5 = *(char *)(a1 + 106);
  if (v5 > 51) {
    return result;
  }
  if (v4 > v5) {
    return result;
  }
  if (*(int *)(a1 + 132) < 1) {
    return result;
  }
  if ((*(_DWORD *)(a1 + 136) & 0x80000000) != 0) {
    return result;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 168);
  if ((v6 - 3) > 3) {
    return result;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 169);
  if (v7 < v6) {
    return result;
  }
  if ((v7 - 7) < 0xFFFFFFFD) {
    return result;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 170);
  if ((v8 - 2) > 3) {
    return result;
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + 171);
  if (v9 < v8) {
    return result;
  }
  if (v9 - 6 < 0xFFFFFFFC) {
    return result;
  }
  uint64_t v10 = v7 - v8;
  if (v10 < *(unsigned __int8 *)(a1 + 172)) {
    return result;
  }
  if (v7 < v9) {
    return result;
  }
  if (v10 < *(unsigned __int8 *)(a1 + 173)) {
    return result;
  }
  HIDWORD(v12) = *(_DWORD *)(a1 + 240);
  LODWORD(v12) = HIDWORD(v12) - 4;
  unsigned int v11 = v12 >> 2;
  if (v11 > 7) {
    return result;
  }
  if (((1 << v11) & 0x8B) == 0) {
    return result;
  }
  if (*(unsigned __int8 *)(a1 + 570) > 1u) {
    return result;
  }
  if (*(char *)(a1 + 571) > 4) {
    return result;
  }
  uint64_t v121 = a1;
  unsigned int v13 = *(unsigned __int8 *)(a1 + 124);
  if (v13 > 6) {
    return result;
  }
  if (v13)
  {
    uint64_t v14 = *(char *)(v121 + 127);
    if (v14 < 0 || v7 - v6 < v14 || *(unsigned __int8 *)(v121 + 125) > 4u || *(unsigned __int8 *)(v121 + 126) > 3u) {
      return result;
    }
  }
  unsigned int v15 = *(_DWORD *)(v121 + 508);
  if (v15 > 2) {
    return result;
  }
  if (v15 == 1)
  {
    int v16 = *(_DWORD *)(v121 + 512);
    goto LABEL_36;
  }
  int v16 = *(_DWORD *)(v121 + 512);
  if (v15 && *(unsigned char *)(v121 + 57))
  {
LABEL_36:
    if (v16 > 0) {
      return result;
    }
  }
  if ((v16 & 0x80000000) == 0 && *(int *)(v121 + 516) >= 1)
  {
    int v17 = *(_DWORD *)(v121 + 504);
    if (v17 == 1)
    {
      if (qword_1EC027190 != -1) {
        dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
      }
      if ((dword_1EC02719C - 7) >= 0xB)
      {
        if ((dword_1EC02719C - 2) < 5) {
          return 4294954387;
        }
      }
      else if (*(_DWORD *)(v121 + 508) != 2)
      {
        return 4294954387;
      }
    }
    else
    {
      if (v17) {
        return result;
      }
      if (qword_1EC027190 != -1) {
        dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
      }
      if ((dword_1EC02719C - 2) >= 5)
      {
        if ((dword_1EC02719C - 7) < 2 && *(_DWORD *)(v121 + 508) == 2) {
          return 4294954387;
        }
      }
      else if (*(_DWORD *)(v121 + 508))
      {
        return 4294954387;
      }
    }
    int v18 = *(_DWORD *)(v121 + 592);
    if (v18 > 3 || v18 >= 1 && (*(int *)(v121 + 508) < 1 || !*(unsigned char *)(v121 + 216) && !*(_DWORD *)(v121 + 596))) {
      return 4294954387;
    }
    if (*(unsigned __int8 *)(v121 + 55) > 3u
      || *(unsigned char *)(v121 + 55) && *(unsigned __int8 *)(v121 + 169) - *(unsigned __int8 *)(v121 + 168) > 3)
    {
      return 4294954387;
    }
    if (*(unsigned char *)(v121 + 351) && *(char *)(v121 + 124) < 1) {
      return 4294954387;
    }
    double v19 = *(double *)(v121 + 544);
    if (v19 != 1.0 && v19 >= 0.0 && v19 != 0.5) {
      return 4294954387;
    }
    double v20 = *(double *)(v121 + 552);
    if (v20 < 0.0 || (uint64_t result = 4294954387, v20 != 0.0) && v20 < 1.0)
    {
      if (v19 > 0.0 && v19 < 1.0 && *(int *)(v121 + 560) > 1) {
        return 4294954387;
      }
      int v21 = *(_DWORD *)(v121 + 144);
      if (v21 <= 1) {
        int v21 = 1;
      }
      *(_DWORD *)(v121 + 144) = v21;
      int v22 = *(char *)(v121 + 569);
      if (*(unsigned char *)(v121 + 53) && v22 >= 1)
      {
        *(_DWORD *)(v121 + 240) = 8;
        goto LABEL_86;
      }
      if (v22 != -1)
      {
LABEL_86:
        if (!*(unsigned char *)(v121 + 316)) {
          *(unsigned char *)(v121 + 316) = *(unsigned char *)(v121 + 314);
        }
        if (!*(unsigned char *)(v121 + 317)) {
          *(unsigned char *)(v121 + 317) = *(unsigned char *)(v121 + 315);
        }
        int v26 = *(__int16 *)(v121 + 90);
        int v27 = *(__int16 *)(v121 + 92);
        double v28 = *(double *)(v121 + 96) * (double)(v27 * v26);
        *(unsigned char *)(v121 + 618) = v28 > 361758720.0;
        unsigned int v29 = *(_DWORD *)(v121 + 64);
        if (v29 != 20)
        {
          if (v29 == 42) {
            goto LABEL_95;
          }
          if (v29 != 38) {
            goto LABEL_103;
          }
        }
        if (v28 > 361758720.0) {
          *(unsigned char *)(v121 + 525) = 2;
        }
LABEL_95:
        if (*(int *)(v121 + 540) >= 2) {
          *(_DWORD *)(v121 + 516) = 4;
        }
        if (((1 << v29) & 0x44000100000) != 0)
        {
          if (v28 <= 361758720.0)
          {
            if (v29 != 20) {
              goto LABEL_103;
            }
            int v30 = 1;
            *(_DWORD *)(v121 + 512) = 1;
          }
          else
          {
            int v30 = 5;
          }
          *(_DWORD *)(v121 + 516) = v30;
        }
LABEL_103:
        int v31 = *(_DWORD *)(v121 + 504);
        if (v31)
        {
          if (v31 == 1)
          {
            int v122 = v27;
            int v123 = v26;
            sub_1BBA61468(v121, &v123, &v122);
            int v32 = *(char *)(v121 + 149);
            int v33 = *(char *)(v121 + 150);
            if ((v32 & v33) < 0 != v34) {
              int v35 = -1;
            }
            else {
              int v35 = v33 + v32;
            }
            if (sub_1BBAE6DEC((uint64_t)v130, (int)*(double *)(v121 + 96), *(_DWORD *)(v121 + 180), v123 >> 4, v122 >> 4, *(_DWORD *)(v121 + 84), *(unsigned __int16 *)(v121 + 88), v35))return 4294954394; {
            char v112 = v142;
            }
            int v113 = v142 + 1;
            int v114 = *(char *)(v121 + 149);
            if (v114 < 0
              || (int v115 = *(char *)(v121 + 150), v115 < 0)
              || *(char *)(v121 + 151) < 0
              || *(char *)(v121 + 152) < 0)
            {
              if (*(unsigned char *)(v121 + 603))
              {
                int v115 = (char)(v142 - 1);
                *(unsigned char *)(v121 + 150) = v142 - 1;
                if (v115 <= 1)
                {
                  if (dword_1E9F80A90 >= 2)
                  {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Number of LTR %d is too small. Disable LTR.\n", (char)(v112 - 1));
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                    {
                      int v116 = *(char *)(v121 + 150);
                      *(_DWORD *)std::string buf = 67109120;
                      int v125 = v116;
                      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Number of LTR %d is too small. Disable LTR.\n", buf, 8u);
                    }
                  }
                  LOBYTE(v115) = 0;
                  *(unsigned char *)(v121 + 150) = 0;
                  *(unsigned char *)(v121 + 603) = 0;
                }
              }
              else
              {
                LOBYTE(v115) = 0;
                *(unsigned char *)(v121 + 150) = 0;
              }
              LOBYTE(v114) = v112 - v115;
              *(unsigned char *)(v121 + 149) = v112 - v115;
              *(_WORD *)(v121 + 151) = 257;
            }
            else if (v115 + v114 >= v113)
            {
              return 4294954394;
            }
            if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 67109632;
              int v125 = v113;
              __int16 v126 = 1024;
              int v127 = v115;
              __int16 v128 = 1024;
              int v129 = (char)v114;
              _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "max_dpb_size: %d\tnumber_long_term_ref: %d\tnumber_short_term_ref: %d\n", buf, 0x14u);
            }
          }
        }
        else if (*(char *)(v121 + 149) < 0 {
               || *(char *)(v121 + 150) < 0
        }
               || *(char *)(v121 + 151) < 0
               || *(char *)(v121 + 152) < 0)
        {
          if (v29 <= 0x2B && ((1 << v29) & 0xCC000100002) != 0)
          {
            if (*(int *)(v121 + 540) >= 2) {
              char v36 = 15;
            }
            else {
              char v36 = 2;
            }
            *(unsigned char *)(v121 + 149) = v36;
            *(_WORD *)(v121 + 150) = 512;
            *(unsigned char *)(v121 + 152) = 2;
            memset(v130, 0, 15);
            long long v131 = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            __int16 v134 = 0;
            long long v135 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v140 = 0u;
            __int16 v141 = 0;
            sub_1BBA55260((uint64_t)v130, v121);
            unsigned int v37 = BYTE8(v135);
            if (BYTE8(v135) >= 0x10u) {
              unsigned int v37 = 16;
            }
            if (v37 <= 1) {
              LOBYTE(v37) = 1;
            }
            *(unsigned char *)(v121 + 149) = v37 - 1;
            *(unsigned char *)(v121 + 150) = 0;
            unsigned int v38 = *(_DWORD *)(v121 + 64);
            if (v38 <= 0x2A && ((1 << v38) & 0x44000100000) != 0 && *(unsigned char *)(v121 + 618))
            {
              char v39 = 1;
            }
            else if (*(int *)(v121 + 560) > 1)
            {
              char v39 = 1;
            }
            else
            {
              char v39 = 2;
            }
            *(unsigned char *)(v121 + 151) = v39;
            *(unsigned char *)(v121 + 152) = v39;
          }
          else
          {
            *(_DWORD *)(v121 + 149) = 16842753;
          }
        }
        if (*(unsigned char *)(v121 + 624))
        {
          *(unsigned char *)(v121 + 257) = 1;
        }
        else
        {
          bzero((void *)(v121 + 628), 0x1B08uLL);
          *(_DWORD *)(v121 + 304) = 1;
          *(_DWORD *)(v121 + 272) = 1;
          if (*(char *)(v121 + 149) >= 1)
          {
            int v40 = 0;
            uint64_t v41 = v121 + 700;
            int v42 = 1;
            do
            {
              int v43 = *(_DWORD *)(v121 + 540);
              BOOL v44 = v42 <= v43;
              if (v43 <= 1) {
                BOOL v44 = 0;
              }
              BOOL v45 = v43 != 1 && !v44;
              if (!v45)
              {
                uint64_t v46 = v121 + 108 * v40;
                *(unsigned char *)(v46 + 628) = 0;
                *(unsigned char *)(v46 + 630) = v42;
                if (*(unsigned char *)(v121 + 76))
                {
                  if (*(_DWORD *)(v121 + 80)) {
                    char v47 = 82;
                  }
                  else {
                    char v47 = 76;
                  }
                }
                else
                {
                  char v47 = 80;
                }
                uint64_t v48 = v40;
                uint64_t v49 = (unsigned char *)(v121 + 108 * v40);
                v49[629] = v47;
                v49[631] = *(unsigned char *)(v121 + 106) - *(unsigned char *)(v121 + 105);
                v49[716] = 0;
                v49[632] = v42;
                int v50 = *(char *)(v121 + 151);
                if (v50 >= (char)v42) {
                  LOBYTE(v50) = v42;
                }
                v49[633] = v50;
                if ((_BYTE)v42)
                {
                  unint64_t v51 = 0;
                  int v52 = -1;
                  do
                  {
                    *(_DWORD *)(v41 + 108 * v48 + 4 * v51 - 64) = v52;
                    *(unsigned char *)(v41 + 108 * *(int *)(v121 + 7544) + v51) = (uint64_t)v51 < *(char *)(v121 + 151);
                    uint64_t v48 = *(int *)(v121 + 7544);
                    --v52;
                    ++v51;
                  }
                  while (v51 < *(unsigned __int8 *)(v121 + 108 * v48 + 632));
                  int v43 = *(_DWORD *)(v121 + 540);
                  int v40 = *(_DWORD *)(v121 + 7544);
                }
                *(_DWORD *)(v121 + 7544) = ++v40;
              }
              BOOL v53 = v42 < v43 || v43 < 2;
              if (!v53)
              {
                uint64_t v54 = v121 + 108 * v40;
                *(_DWORD *)(v54 + 628) = *(_DWORD *)(v54 + 520);
                *(unsigned char *)(v54 + 716) = *(unsigned char *)(v54 + 608);
                *(unsigned char *)(v54 + 632) = v42;
                if (*(char *)(v121 + 151) >= (char)v42) {
                  unsigned __int8 v55 = v42;
                }
                else {
                  unsigned __int8 v55 = *(unsigned char *)(v121 + 151);
                }
                *(unsigned char *)(v54 + 633) = v55;
                if ((_BYTE)v42)
                {
                  unint64_t v56 = 0;
                  unsigned int v57 = 0;
                  uint64_t v58 = v40;
                  int64_t v59 = v55 - v42 / v43;
                  int v60 = -1;
                  do
                  {
                    *(_DWORD *)(v41 + 108 * v58 + 4 * v56 - 64) = v60;
                    if ((uint64_t)v56 >= v59 && ((int)v56 + 1) % *(_DWORD *)(v121 + 540))
                    {
                      BOOL v61 = 0;
                      int v62 = *(_DWORD *)(v121 + 7544);
                    }
                    else
                    {
                      int v62 = *(_DWORD *)(v121 + 7544);
                      BOOL v61 = v57 < *(unsigned __int8 *)(v121 + 108 * v62 + 633);
                    }
                    *(unsigned char *)(v41 + 108 * v62 + v56) = v61;
                    uint64_t v58 = *(int *)(v121 + 7544);
                    v57 += *(unsigned __int8 *)(v41 + 108 * v58 + v56);
                    --v60;
                    ++v56;
                  }
                  while (v56 < *(unsigned __int8 *)(v121 + 108 * v58 + 632));
                  int v40 = *(_DWORD *)(v121 + 7544);
                }
                *(_DWORD *)(v121 + 7544) = ++v40;
              }
              BOOL v53 = v42++ < *(char *)(v121 + 149);
            }
            while (v53);
          }
        }
        *(_DWORD *)(v121 + 7540) = 0;
        int v63 = *(_DWORD *)(v121 + 268);
        if (v63 >= 1)
        {
          uint64_t v64 = 0;
          uint64_t v65 = 0;
          int v66 = 0;
          do
          {
            v130[0] = 0;
            uint64_t v67 = v121 + 4 * v65;
            int v68 = *(_DWORD *)(v67 + 272);
            if (v68 < 1)
            {
              uint64_t v71 = v64;
            }
            else
            {
              int v69 = 0;
              int v70 = 0;
              uint64_t v71 = v64;
              uint64_t v72 = 1;
              do
              {
                uint64_t v73 = v70 % v68 + v66;
                uint64_t v74 = v121 + 108 * v73;
                int v75 = v70 / v68 * v68 + *(unsigned __int8 *)(v74 + 630);
                uint64_t v76 = *(unsigned __int8 *)(v74 + 632);
                if (*(unsigned char *)(v74 + 632))
                {
                  uint64_t v77 = 0;
                  int v78 = (unsigned __int8 *)(v74 + 632);
                  uint64_t v79 = 4 * v72;
                  while (1)
                  {
                    int v80 = *(_DWORD *)(v121 + 108 * (int)v73 + 4 * v77 + 636) + v75;
                    if (v80 < 0) {
                      break;
                    }
                    unint64_t v81 = 0;
                    while (v80 != v130[v81 / 4])
                    {
                      v81 += 4;
                      if (v79 == v81) {
                        return 0;
                      }
                    }
                    if (++v77 == v76) {
                      goto LABEL_182;
                    }
                  }
                  unint64_t v87 = 0;
                  int v88 = 0;
                  uint64_t v89 = *(int *)(v121 + 7544) + (uint64_t)(int)v71;
                  uint64_t v90 = v121 + 628 + 108 * v89;
                  *(unsigned char *)(v90 + 2) = v75;
                  BOOL v91 = (unsigned char *)(v90 + 2);
                  uint64_t v92 = v121 + 628 + 108 * (int)v73;
                  *(v91 - 1) = *(unsigned char *)(v92 + 1);
                  v91[1] = *(unsigned char *)(v92 + 3);
                  uint64_t v93 = v121 + 108 * (int)v73;
                  do
                  {
                    int v94 = *(_DWORD *)(v93 + 4 * v87 + 636);
                    if (v94 > ~v75)
                    {
                      uint64_t v76 = v121 + 108 * v89 + 628;
                      *(_DWORD *)(v76 + 4 * v88 + 8) = v94;
                      *(unsigned char *)(v76 + v88++ + 72) = *(unsigned char *)(v93 + v87 + 700);
                      LODWORD(v76) = *v78;
                    }
                    ++v87;
                  }
                  while (v87 < v76);
                  int v95 = *(_DWORD *)(v121 + 7540);
                  uint64_t v96 = v121 + 628;
                  uint64_t v97 = v121 + 628 + 108 * v89;
                  *(unsigned char *)(v97 + 4) = v88;
                  *(unsigned char *)(v97 + 5) = *(unsigned char *)(v121 + 628 + 108 * (int)v73 + 5);
                  if (v95)
                  {
                    uint64_t v98 = 0;
                    uint64_t v99 = (int)v89 - 1;
                    uint64_t v100 = v96 + 108 * v99;
                    int v101 = *(unsigned __int8 *)(v100 + 2);
                    uint64_t v102 = *(unsigned __int8 *)(v100 + 4);
                    BOOL v103 = (unsigned char *)(v96 + 108 * v89);
                    v103[90] = v102 + 1;
                    v103[88] = 1;
                    v103[89] = v101 - *v91;
                    uint64_t v104 = v121 + 108 * v89;
                    do
                    {
                      int v105 = v101;
                      if (v98 != v102) {
                        int v105 = *(_DWORD *)(v121 + 108 * v99 + 4 * v98 + 636) + v101;
                      }
                      if ((_BYTE)v88)
                      {
                        uint64_t v106 = 0;
                        char v107 = 0;
                        do
                        {
                          if (v105 == *(_DWORD *)(v104 + 4 * v106 + 636) + v75)
                          {
                            if (*(unsigned char *)(v104 + v106 + 700)) {
                              char v107 = 1;
                            }
                            else {
                              char v107 = 2;
                            }
                          }
                          ++v106;
                        }
                        while (v88 != v106);
                      }
                      else
                      {
                        char v107 = 0;
                      }
                      *(unsigned char *)(v121 + 108 * v89 + v98 + 719) = v107;
                      BOOL v45 = v98++ == v102;
                    }
                    while (!v45);
                    int v108 = *(_DWORD *)(v121 + 7540);
                  }
                  else
                  {
                    int v108 = 0;
                    uint64_t v109 = v121 + 108 * v89;
                    *(unsigned char *)(v109 + 716) = 0;
                    *(unsigned char *)(v109 + 718) = 0;
                  }
                  uint64_t v71 = (v108 + 1);
                  *(_DWORD *)(v121 + 7540) = v71;
                  uint64_t v73 = *(_DWORD *)(v121 + 7544) + v108;
                  LODWORD(v76) = *(unsigned __int8 *)(v121 + 108 * v73 + 632);
                }
                else
                {
LABEL_182:
                  ++v69;
                }
                uint64_t v82 = v76;
                if (v76)
                {
                  int v83 = (int *)(v121 + 636 + 108 * (int)v73);
                  char v84 = v130;
                  uint64_t v85 = v82;
                  do
                  {
                    int v86 = *v83++;
                    *v84++ = v86 + v75;
                    --v85;
                  }
                  while (v85);
                }
                v130[v82] = v75;
                uint64_t v72 = v82 + 1;
                ++v70;
                int v68 = *(_DWORD *)(v67 + 272);
              }
              while (v69 < v68);
              int v63 = *(_DWORD *)(v121 + 268);
            }
            v66 += v68;
            *(_DWORD *)(v67 + 7548) = v71 - v64;
            ++v65;
            uint64_t v64 = v71;
          }
          while (v65 < v63);
        }
        if (*(unsigned char *)(v121 + 349) && *(unsigned char *)(v121 + 350)) {
          return 0;
        }
        *(_DWORD *)(v121 + 581) = 0;
        *(void *)(v121 + 573) = 0;
        BOOL v110 = *(unsigned char *)(v121 + 224) != 0;
        *(unsigned char *)(v121 + 585) = v110;
        *(_WORD *)(v121 + 587) = 1287;
        *(unsigned char *)(v121 + 589) = 0;
        if (*(unsigned char *)(v121 + 124) != 5 || *(char *)(v121 + 569) >= 2)
        {
          int v111 = *(_DWORD *)(v121 + 508);
          if (v111 == 2)
          {
            if (!*(_DWORD *)(v121 + 504)) {
              goto LABEL_244;
            }
          }
          else
          {
            if (*(unsigned char *)(v121 + 523)) {
              *(unsigned char *)(v121 + 523) = 0;
            }
            if (!*(_DWORD *)(v121 + 504))
            {
              if (v111 >= 1) {
LABEL_244:
              }
                sub_1BBA6E5BC(v121);
LABEL_245:
              if (*(__int16 *)(v121 + 90) > 640 || *(__int16 *)(v121 + 92) > 640) {
                *(void *)(v121 + 528) = 0x400000020;
              }
              else {
                *(_DWORD *)(v121 + 528) = 16;
              }
              unsigned int v117 = *(_DWORD *)(v121 + 64);
              BOOL v118 = v117 <= 0x2A && ((1 << v117) & 0x44000100000) != 0;
              *(_DWORD *)(v121 + 620) = v118;
              double v119 = *(double *)(v121 + 544);
              if (v119 > 0.0 && v119 < 1.0)
              {
                *(void *)(v121 + 560) = 0x200000002;
                unsigned int v120 = *(_DWORD *)(v121 + 180);
                *(_DWORD *)(v121 + 188) = (int)(*(double *)(v121 + 552) * (double)v120);
                *(_DWORD *)(v121 + 192) = v120;
              }
              if (v117 == 20 && *(int *)(v121 + 560) >= 2)
              {
                uint64_t result = 0;
                *(unsigned char *)(v121 + 247) = 1;
                return result;
              }
              return 0;
            }
          }
          *(unsigned char *)(v121 + 585) = v110;
          *(void *)(v121 + 573) = 0;
          *(unsigned char *)(v121 + 581) = 0;
          *(_WORD *)(v121 + 582) = 1;
          *(unsigned char *)(v121 + 584) = 1;
          *(unsigned char *)(v121 + 590) = 0;
          goto LABEL_245;
        }
        return 4294954387;
      }
      unsigned int v23 = *(_DWORD *)(v121 + 64);
      if (v23 <= 0x2B)
      {
        if (((1 << v23) & 0xCC000100002) != 0)
        {
          uint64_t v24 = (__int16 *)(v121 + 569);
          __int16 v25 = 258;
LABEL_85:
          *uint64_t v24 = v25;
          goto LABEL_86;
        }
        if (!*(_DWORD *)(v121 + 64))
        {
          uint64_t v24 = (__int16 *)(v121 + 569);
          __int16 v25 = 4;
          goto LABEL_85;
        }
      }
      uint64_t v24 = (__int16 *)(v121 + 569);
      __int16 v25 = 3;
      goto LABEL_85;
    }
  }
  return result;
}

char *sub_1BBA6F6AC(int a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 32))(a2, 0);
  int v38 = a4;
  if (a3 < a4)
  {
    unsigned int v13 = (unsigned __int8 *)(a6 + a3 * a5 - 5);
    uint64_t v14 = &result[v11 * (a3 - 3)];
    unsigned int v15 = (uint8x8_t *)(v14 - 8);
    uint64_t v16 = -3 - a1;
    size_t v17 = a1 - 2;
    int v18 = a1 + 7;
    v19.i64[0] = 0xA000A000A000ALL;
    v19.i64[1] = 0xA000A000A000ALL;
    v20.i64[0] = 0xA000A000A000ALL;
    v20.i64[1] = 0xA000A000A000ALL;
    do
    {
      int v21 = (uint8x8_t *)((char *)v15 + v11);
      if (*(int *)(a2 + 276) < -7)
      {
        LODWORD(v22) = 0;
      }
      else
      {
        uint64_t v22 = 0;
        int16x8_t v23 = vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v15 + 7 * v11), *v15)), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v15 + 5 * v11), *(uint8x8_t *)((char *)v15 + 2 * v11)), v19), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v15 + 6 * v11), *v21), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v15 + 4 * v11), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *(uint8x8_t *)((char *)v15 + 3 * v11), (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL));
        do
        {
          uint64_t v24 = v22;
          __int16 v25 = (uint8x8_t *)&v14[v22 + v11];
          uint8x8_t v26 = *v25;
          int v27 = (uint8x8_t *)((char *)v25 + v11);
          uint8x8_t v28 = *v27;
          unsigned int v29 = (uint8x8_t *)((char *)v27 + v11);
          int8x16_t v30 = (int8x16_t)vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v29 + v11 + v11 + v11 + v11), *(uint8x8_t *)&v14[v22])), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v29 + v11 + v11), v28), v19), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v29 + v11 + v11 + v11), v26), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v29 + v11), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *v29, (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL));
          int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 2uLL);
          int16x8_t v32 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 4uLL);
          int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 6uLL);
          int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 8uLL);
          int16x8_t v35 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 0xAuLL);
          int16x8_t v36 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 0xCuLL);
          int16x8_t v37 = (int16x8_t)vextq_s8((int8x16_t)v23, v30, 0xEuLL);
          *(int8x8_t *)&v13[v22] = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vaddq_s32(vsubq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v32.i8, (int16x4_t)0xA000A000A000ALL), vaddl_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v23.i8)), vshlq_n_s32(vaddq_s32(vaddl_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v31.i8), vmlal_s16(vmull_s16(*(int16x4_t *)v34.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v33.i8, (int16x4_t)0xA000A000A000ALL)), 2uLL)), 6uLL), vaddq_s32(
                                         vsubq_s32(vmlal_high_s16(vmull_high_s16(v35, v19), v32, v19), vaddl_high_s16(v37, v23)), vshlq_n_s32(vaddq_s32(vaddl_high_s16(v36, v31), vmlal_high_s16(vmull_high_s16(v34, v20), v33, v20)), 2uLL)), 6uLL), 6uLL);
          v22 += 8;
          int16x8_t v23 = (int16x8_t)v30;
        }
        while (v24 < *(int *)(a2 + 276));
      }
      memset(&v13[v16 + 5], *v13, v17);
      uint64_t result = (char *)memset(&v13[v22], v13[(int)v22 - 1], v18 - (int)v22 + *(_DWORD *)(a2 + 276));
      ++a3;
      v13 += a5;
      v14 += v11;
      unsigned int v15 = v21;
      v19.i64[0] = 0xA000A000A000ALL;
      v19.i64[1] = 0xA000A000A000ALL;
      v20.i64[0] = 0xA000A000A000ALL;
      v20.i64[1] = 0xA000A000A000ALL;
    }
    while (a3 != v38);
  }
  return result;
}

char *sub_1BBA6F99C(int a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 32))(a2, 0);
  if (a3 < a4)
  {
    unsigned int v13 = (unsigned __int8 *)(a6 + a3 * a5);
    uint64_t v14 = &result[v11 * (a3 - 3)];
    size_t v15 = a1 + 3;
    int v16 = a1 + 2;
    v17.i64[0] = 0xA000A000A000ALL;
    v17.i64[1] = 0xA000A000A000ALL;
    do
    {
      if (*(int *)(a2 + 276) < 1)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        uint64_t v18 = 0;
        do
        {
          int16x8_t v19 = (uint8x8_t *)&v14[v18 + v11];
          uint8x8_t v20 = *v19;
          int v21 = (uint8x8_t *)((char *)v19 + v11);
          uint8x8_t v22 = *v21;
          int16x8_t v23 = (uint8x8_t *)((char *)v21 + v11);
          *(int8x8_t *)&v13[v18] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v11 + v11 + v11 + v11), *(uint8x8_t *)&v14[v18])), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v11 + v11), v22), v17), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v11 + v11 + v11), v20), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v23 + v11), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *v23, (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL)), 6uLL);
          v18 += 8;
        }
        while (v18 < *(int *)(a2 + 276));
      }
      memset(&v13[-v15], *v13, v15);
      uint64_t result = (char *)memset(&v13[v18], v13[(int)v18 - 1], v16 - (int)v18 + *(_DWORD *)(a2 + 276));
      ++a3;
      v14 += v11;
      v13 += a5;
      v17.i64[0] = 0xA000A000A000ALL;
      v17.i64[1] = 0xA000A000A000ALL;
    }
    while (a3 != a4);
  }
  return result;
}

char *sub_1BBA6FB4C(int a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 32))(a2, 0);
  int v24 = a4;
  if (a3 < a4)
  {
    unsigned int v13 = (unsigned __int8 *)(a6 + a3 * a5 - 5);
    uint64_t v14 = &result[v11 * a3];
    size_t v15 = (uint8x8_t *)(v14 - 8);
    uint64_t v16 = -3 - a1;
    size_t v17 = a1 - 2;
    int v18 = a1 + 7;
    v19.i64[0] = 0xA000A000A000ALL;
    v19.i64[1] = 0xA000A000A000ALL;
    do
    {
      if (*(int *)(a2 + 276) < -7)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        uint64_t v20 = 0;
        uint8x8_t v21 = *v15;
        do
        {
          uint64_t v22 = v20;
          int8x8_t v23 = *(int8x8_t *)&v14[v20];
          *(int8x8_t *)&v13[v20] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8((uint8x8_t)vext_s8((int8x8_t)v21, v23, 7uLL), v21)), (int16x8_t)vaddl_u8((uint8x8_t)vext_s8((int8x8_t)v21, v23, 5uLL), (uint8x8_t)vext_s8((int8x8_t)v21, v23, 2uLL)), v19), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)vext_s8((int8x8_t)v21, v23, 6uLL), (uint8x8_t)vext_s8((int8x8_t)v21, v23, 1uLL)), (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8((int8x8_t)v21, v23, 4uLL), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), (uint8x8_t)vext_s8((int8x8_t)v21, v23, 3uLL),
                                                        (uint8x8_t)0xA0A0A0A0A0A0A0ALL)),
                                         2uLL)),
                                     6uLL);
          v20 += 8;
          uint8x8_t v21 = (uint8x8_t)v23;
        }
        while (v22 < *(int *)(a2 + 276));
      }
      memset(&v13[v16 + 5], *v13, v17);
      uint64_t result = (char *)memset(&v13[v20], v13[(int)v20 - 1], v18 - (int)v20 + *(_DWORD *)(a2 + 276));
      ++a3;
      size_t v15 = (uint8x8_t *)((char *)v15 + v11);
      v13 += a5;
      v14 += v11;
      v19.i64[0] = 0xA000A000A000ALL;
      v19.i64[1] = 0xA000A000A000ALL;
    }
    while (a3 != v24);
  }
  return result;
}

uint64_t sub_1BBA6FD00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2545);
}

uint64_t sub_1BBA6FD08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2544);
}

size_t sub_1BBA6FD10(uint64_t a1)
{
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  size_t totalLengthOut = 0;
  DataBuffer = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(a1 + 248));
  CMBlockBufferGetDataPointer(DataBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  return totalLengthOut;
}

uint64_t sub_1BBA6FD54(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(*(void *)(a2 + 608) + 680);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = v4 + 12880;
  uint64_t v6 = sub_1BBA1E700(v4 + 12880);
  uint64_t v7 = 0;
  LODWORD(v8) = 0;
  do
  {
    if (*(void *)(v4 + 12896 + v7)) {
      uint64_t v8 = (v8 + 1);
    }
    else {
      uint64_t v8 = v8;
    }
    v7 += 16;
  }
  while (v7 != 272);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a1 + 880;
    do
    {
      uint64_t v11 = sub_1BBA1D644(v5, *(_DWORD *)(v6 + 4 * v9));
      unint64_t v12 = (_DWORD *)*v11;
      if (*v11)
      {
        unsigned int v13 = v11;
        uint64_t v14 = 0;
        int v15 = v12[171];
        uint64_t v16 = 904;
        while (v15 != *(_DWORD *)(a1 + v16))
        {
          ++v14;
          v16 += 80;
          if (*(_DWORD *)(a1 + 2252) + 1 == v14)
          {
            if (dword_1E9F80A90 >= 1)
            {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: reference poc (%d) frame_num_driver (%d) cannot be found in hw dpb\n", v3, v12[170], v15);
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
              {
                int v27 = *(_DWORD *)(*v13 + 680);
                int v28 = *(_DWORD *)(*v13 + 684);
                *(_DWORD *)std::string buf = 67109632;
                int v43 = v3;
                __int16 v44 = 1024;
                int v45 = v27;
                __int16 v46 = 1024;
                int v47 = v28;
                unsigned int v29 = MEMORY[0x1E4F14500];
                int8x16_t v30 = "[Poc %d]: reference poc (%d) frame_num_driver (%d) cannot be found in hw dpb\n";
                uint32_t v31 = 20;
                goto LABEL_23;
              }
            }
            goto LABEL_24;
          }
        }
        if (*(_DWORD *)(*(void *)(a1 + 88) + 504) != 1) {
          goto LABEL_18;
        }
        int v17 = v12[9];
        if (v17)
        {
          uint64_t v18 = v10 + 80 * v14;
          int v21 = *(_DWORD *)(v18 + 16);
          uint64_t v20 = (_DWORD *)(v18 + 16);
          int v19 = v21;
          if (v21 != 1)
          {
            if (dword_1E9F80A90 < 1) {
              goto LABEL_24;
            }
            int16x8_t v32 = v19 == 2 ? "long_term" : "N/A";
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: reference poc (%d) frame_num_driver (%d) has unmatched reference type (short-term vs. %s)\n", v3, v12[170], v15, v32);
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_24;
            }
            int v33 = *(_DWORD *)(*v13 + 680);
            int v34 = *(_DWORD *)(*v13 + 684);
            int16x8_t v35 = "short_term";
            if (*v20 != 1) {
              int16x8_t v35 = "N/A";
            }
            if (*v20 == 2) {
              int16x8_t v36 = "long_term";
            }
            else {
              int16x8_t v36 = v35;
            }
            *(_DWORD *)std::string buf = 67109890;
            int v43 = v3;
            __int16 v44 = 1024;
            int v45 = v33;
            __int16 v46 = 1024;
            int v47 = v34;
            __int16 v48 = 2080;
            uint64_t v49 = v36;
            unsigned int v29 = MEMORY[0x1E4F14500];
            int8x16_t v30 = "[Poc %d]: reference poc (%d) frame_num_driver (%d) has unmatched reference type (short-term vs. %s)\n";
LABEL_48:
            uint32_t v31 = 30;
LABEL_23:
            _os_log_impl(&dword_1BB9B9000, v29, OS_LOG_TYPE_DEFAULT, v30, buf, v31);
LABEL_24:
            sub_1BBA70120(a1, v3);
            return 4294954385;
          }
        }
        if ((v17 & 2) != 0)
        {
          uint64_t v22 = v10 + 80 * v14;
          int v25 = *(_DWORD *)(v22 + 16);
          int v24 = (_DWORD *)(v22 + 16);
          int v23 = v25;
          if (v25 != 2)
          {
            if (dword_1E9F80A90 < 1) {
              goto LABEL_24;
            }
            int16x8_t v37 = v23 == 1 ? "short_term" : "N/A";
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: reference poc (%d) frame_num_driver (%d) has unmatched reference type (long-term vs. %s)\n", v3, v12[170], v15, v37);
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_24;
            }
            int v38 = *(_DWORD *)(*v13 + 680);
            int v39 = *(_DWORD *)(*v13 + 684);
            if (*v24 == 1) {
              int v40 = "short_term";
            }
            else {
              int v40 = "N/A";
            }
            if (*v24 == 2) {
              uint64_t v41 = "long_term";
            }
            else {
              uint64_t v41 = v40;
            }
            *(_DWORD *)std::string buf = 67109890;
            int v43 = v3;
            __int16 v44 = 1024;
            int v45 = v38;
            __int16 v46 = 1024;
            int v47 = v39;
            __int16 v48 = 2080;
            uint64_t v49 = v41;
            unsigned int v29 = MEMORY[0x1E4F14500];
            int8x16_t v30 = "[Poc %d]: reference poc (%d) frame_num_driver (%d) has unmatched reference type (long-term vs. %s)\n";
            goto LABEL_48;
          }
        }
      }
LABEL_18:
      ++v9;
    }
    while (v9 != v8);
  }
  return 0;
}

void sub_1BBA70120(uint64_t a1, int a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v3 = dword_1E9F80A90;
  if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v24 = a2;
    _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "<<<<<< [Poc %d]: DPB Snapshot >>>>>>\n", buf, 8u);
    int v3 = dword_1E9F80A90;
  }
  uint64_t v5 = 0;
  char v6 = 1;
  uint64_t v7 = MEMORY[0x1E4F14500];
  do
  {
    char v22 = v6;
    uint64_t v8 = 8 * v5 + 884;
    unint64_t v9 = -1;
    uint64_t v10 = a1;
    do
    {
      if (v3 >= 3 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(_DWORD *)(v10 + 904);
        int v12 = *(_DWORD *)(v10 + 896);
        unsigned int v13 = "N/A";
        if (v12 == 1) {
          unsigned int v13 = "short_term";
        }
        BOOL v14 = v12 == 2;
        int v15 = "long_term";
        if (!v14) {
          int v15 = v13;
        }
        int v17 = *(_DWORD *)(v10 + v8 - 4);
        int v16 = *(_DWORD *)(v10 + v8);
        int v18 = *(unsigned __int16 *)(v10 + 928);
        int v19 = *(unsigned __int16 *)(v10 + 932);
        int v20 = *(unsigned __int16 *)(v10 + 930);
        int v21 = *(unsigned __int16 *)(v10 + 934);
        *(_DWORD *)std::string buf = 67111170;
        int v24 = v5;
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 2080;
        int v28 = v15;
        __int16 v29 = 1024;
        int v30 = v17;
        __int16 v31 = 1024;
        int v32 = v18;
        __int16 v33 = 1024;
        int v34 = v19;
        __int16 v35 = 1024;
        int v36 = v16;
        __int16 v37 = 1024;
        int v38 = v20;
        __int16 v39 = 1024;
        int v40 = v21;
        _os_log_impl(&dword_1BB9B9000, v7, OS_LOG_TYPE_DEFAULT, "           layer: %d\tframe_num_driver: %d\treference_type: %s\treference_buffer: %d, %dx%d, scaled_buffer: %d, %dx%d\n", buf, 0x3Cu);
        int v3 = dword_1E9F80A90;
      }
      ++v9;
      v10 += 80;
    }
    while (v9 < *(unsigned int *)(a1 + 2252));
    uint64_t v5 = 1;
    char v6 = 0;
  }
  while (((*(unsigned char *)(a1 + 2545) != 0) & v22) != 0);
}

uint64_t sub_1BBA70348(uint64_t a1, size_t *a2, size_t *a3, void *a4)
{
  uint64_t v5 = *(opaqueCMSampleBuffer **)(a1 + 248);
  if (!v5) {
    return 4294954394;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(v5);
  unsigned int v10 = *(_DWORD *)(a1 + 2520);
  int v11 = *(_DWORD *)(a1 + 148);

  return sub_1BBAB1D3C(DataBuffer, v10, v11, a2, a3, a4);
}

opaqueCMSampleBuffer *sub_1BBA703C0(uint64_t a1)
{
  uint64_t result = *(opaqueCMSampleBuffer **)(a1 + 248);
  if (result) {
    return CMSampleBufferGetDataBuffer(result);
  }
  return result;
}

uint64_t sub_1BBA703D0(uint64_t a1, uint64_t *a2, _WORD *a3)
{
  uint64_t v3 = 0;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = (int *)(a1 + 904);
  while (1)
  {
    int v6 = *v5;
    v5 += 20;
    if (v6 == *(_DWORD *)(*a2 + 684)) {
      break;
    }
    if (*(_DWORD *)(a1 + 2252) + 1 == ++v3) {
      return 4294954387;
    }
  }
  IOSurfaceID v7 = *(_DWORD *)(a1 + 880 + 80 * v3);
  if (v7)
  {
    char v8 = ((*(_DWORD *)(*(void *)(a1 + 80) + 1000) - 875836518) & 0xFFFFFFEF) != 0;
    v11[0] = *(_DWORD *)(v4 + 276);
    v11[1] = 2 * (v11[0] >> v8);
    v10[0] = *(_DWORD *)(v4 + 280);
    v10[1] = v10[0] >> v8;
    return sub_1BBA704C4(v7, a3, (uint64_t)v11, (uint64_t)v10, a1 + 276, *(_DWORD *)(a1 + 2524), *(_DWORD *)(a1 + 2528));
  }
  return 4294954387;
}

uint64_t sub_1BBA704C4(IOSurfaceID a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  _OWORD v36[2] = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  unsigned int v13 = IOSurfaceLookup(a1);
  if (!v13) {
    return 4294954394;
  }
  BOOL v14 = v13;
  v36[0] = 0;
  v36[1] = 0;
  IOSurfaceLock(v13, 0, 0);
  IOSurfaceRef buffer = v14;
  sub_1BBA70674((uint64_t)v24);
  uint64_t v15 = 0;
  char v16 = 1;
  do
  {
    int v17 = &v24[7 * v15];
    v36[v15] = v17[6];
    int v18 = *((_DWORD *)v17 + 22);
    *((_DWORD *)&v36[-1] + v15) = *((_DWORD *)v17 + 21);
    *((_DWORD *)&v34 + v15) = v18;
    char v19 = v16;
    *((_DWORD *)&v33 + v15) = *((_DWORD *)v17 + 18);
    uint64_t v15 = 1;
    char v16 = 0;
  }
  while ((v19 & 1) != 0);
  if (v27 == 3 || v29 == 3)
  {
    __int16 v22 = sub_1BB9FD828((uint64_t)v36, a3, a4, a5);
  }
  else
  {
    if (v27 == 1 || v29 == 1)
    {
      v30[0] = a6;
      v30[1] = a7;
      v30[2] = 0;
      uint64_t v31 = v26;
      uint64_t v32 = v28;
      int v20 = v30;
    }
    else
    {
      int v20 = 0;
    }
    __int16 v22 = sub_1BB9FD5E0((uint64_t)v36, a3, a4, (uint64_t)&v33, (uint64_t)&v35, (uint64_t)&v34, (uint64_t)v20);
  }
  *a2 = v22;
  IOSurfaceRef v23 = buffer;
  IOSurfaceUnlock(buffer, 0, 0);
  CFRelease(v23);
  return 0;
}

uint64_t sub_1BBA70674(uint64_t a1)
{
  uint64_t v2 = *(__IOSurface **)(a1 + 40);
  *(_DWORD *)(a1 + 16) = IOSurfaceGetPixelFormat(v2);
  *(void *)(a1 + 24) = IOSurfaceGetAllocSize(v2);
  *(unsigned char *)(a1 + 32) = IOSurfaceIsTiled() != 0;
  *(_DWORD *)(a1 + 36) = IOSurfaceGetTileFormat();
  uint64_t result = IOSurfaceLock(v2, 0, 0);
  if (result) {
    return result;
  }
  PlaneCFIndex Count = IOSurfaceGetPlaneCount(v2);
  if (PlaneCount >= 2)
  {
    *(void *)a1 = IOSurfaceGetWidthOfPlane(v2, 0);
    *(void *)(a1 + 8) = IOSurfaceGetHeightOfPlane(v2, 0);
LABEL_6:
    size_t v5 = 0;
    int v6 = (void *)(a1 + 96);
    do
    {
      *(v6 - 6) = IOSurfaceGetBaseAddressOfPlane(v2, v5);
      *(v6 - 5) = 0;
      *((_DWORD *)v6 - 8) = IOSurfaceGetWidthOfPlane(v2, v5);
      *((_DWORD *)v6 - 7) = IOSurfaceGetHeightOfPlane(v2, v5);
      *((unsigned char *)v6 - 20) = IOSurfaceGetAddressFormatOfPlane();
      *((_DWORD *)v6 - 4) = IOSurfaceGetCompressionTypeOfPlane();
      int BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v2, v5);
      *((_DWORD *)v6 - 6) = BytesPerRowOfPlane;
      *int v6 = *((int *)v6 - 7) * (uint64_t)BytesPerRowOfPlane;
      *(void *)((char *)v6 - 12) = 0;
      if ((*((_DWORD *)v6 - 4) | 2) == 3)
      {
        *(v6 - 6) = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
        *(v6 - 5) = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
        *((_DWORD *)v6 - 3) = IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
        *((_DWORD *)v6 - 2) = IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
      }
      ++v5;
      v6 += 7;
    }
    while (PlaneCount != v5);
    goto LABEL_10;
  }
  *(void *)a1 = IOSurfaceGetWidth(v2);
  *(void *)(a1 + 8) = IOSurfaceGetHeight(v2);
  if (PlaneCount) {
    goto LABEL_6;
  }
LABEL_10:

  return IOSurfaceUnlock(v2, 0, 0);
}

uint64_t sub_1BBA70848(uint64_t a1, uint64_t a2, uint64_t a3, int a4, opaqueCMSampleBuffer *a5)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a2 + 592);
  int v11 = *(std::__shared_weak_count **)(a2 + 600);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v131, 0, sizeof(v131));
  CMTimeMake(&v131, *(void *)(v10 + 16), *(_DWORD *)(v10 + 32));
  *(_DWORD *)(a1 + 260) = a4;
  *(_DWORD *)(a1 + 256) = a3;
  sub_1BBA3F6DC(a2 + 536);
  std::mutex::lock((std::mutex *)(a1 + 168));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 232));
  if (a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    LODWORD(buf.value) = 67109120;
    HIDWORD(buf.value) = a3;
    uint64_t v12 = MEMORY[0x1E4F14500];
    unsigned int v13 = "Encoder returns abnormal status %d\n";
    uint32_t v14 = 8;
    goto LABEL_6;
  }
  if (!a5 && (a4 & 2) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.value) = 0;
      uint64_t v15 = MEMORY[0x1E4F14500];
      char v16 = "Invalid sample\n";
LABEL_15:
      _os_log_error_impl(&dword_1BB9B9000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&buf, 2u);
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  if ((a4 & 2) != 0)
  {
    if (*(unsigned char *)(a2 + 418))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.value) = 0;
        uint64_t v15 = MEMORY[0x1E4F14500];
        char v16 = "Frame dropped by encoder\n";
        goto LABEL_15;
      }
LABEL_16:
      a3 = 4294954385;
      goto LABEL_17;
    }
LABEL_50:
    a3 = 0;
    goto LABEL_17;
  }
  int v18 = *(unsigned char **)(a1 + 88);
  if (v18[582]) {
    ++*(unsigned char *)(a2 + 4);
  }
  if (*(void *)(a2 + 400) && (char v19 = *(uint64_t **)(a2 + 392), v19[1])) {
    uint64_t v20 = *v19;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v18[216]) {
    BOOL v21 = v18[584] != 0;
  }
  else {
    BOOL v21 = 0;
  }
  uint64_t v22 = *(void *)(a2 + 592);
  BOOL v130 = v21;
  if (*(unsigned char *)(v22 + 136))
  {
    int v23 = *(_DWORD *)(v22 + 248);
    if (v23 <= 0) {
      int v23 = *(_DWORD *)(v22 + 240);
    }
    int v24 = *(_DWORD *)(v22 + 252);
    if (v24 <= 0) {
      int v24 = *(_DWORD *)(v22 + 244);
    }
  }
  else
  {
    int v23 = *(_DWORD *)(v22 + 276);
    int v24 = *(_DWORD *)(v22 + 280);
  }
  sub_1BBA61E04(&v135, *(void *)(*(void *)(a2 + 584) + 48));
  int v134 = 0;
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.value) = 0;
      uint64_t v26 = MEMORY[0x1E4F14500];
      int v27 = "Sample buffer does not exist\n";
      uint32_t v28 = 2;
      goto LABEL_71;
    }
LABEL_42:
    a3 = 4294954385;
    goto LABEL_43;
  }
  int v25 = *(_DWORD *)(a1 + 256);
  if (v25)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.value) = 67109120;
      HIDWORD(buf.value) = v25;
      uint64_t v26 = MEMORY[0x1E4F14500];
      int v27 = "HW encoder has an abnormal status %d\n";
      uint32_t v28 = 8;
LABEL_71:
      _os_log_error_impl(&dword_1BB9B9000, v26, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&buf, v28);
      goto LABEL_42;
    }
    goto LABEL_42;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a5);
  DataCFIndex Length = CMBlockBufferGetDataLength(DataBuffer);
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a5, 0);
  if (!SampleAttachmentsArray)
  {
    a3 = 4294954394;
    goto LABEL_43;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  a3 = 4294954394;
  if (ValueAtIndex) {
    int v32 = 0;
  }
  else {
    int v32 = -12902;
  }
  CFDictionaryRef theDict = ValueAtIndex;
  if (ValueAtIndex)
  {
    unsigned int v124 = v32;
    uint64_t v33 = *(const void **)(a1 + 248);
    if (v33) {
      CFRelease(v33);
    }
    *(void *)(a1 + 248) = a5;
    CFRetain(a5);
    if (!*(unsigned char *)(*(void *)(a1 + 88) + 7873))
    {
LABEL_77:
      uint64_t v42 = 0;
      __int16 v126 = (void *)(v20 + 536);
      int v116 = ((v24 + 15) >> 4) * ((v23 + 15) >> 4);
      int v117 = ((v24 + 7) >> 3) * ((v23 + 7) >> 3);
      int v43 = *(unsigned __int8 *)(a1 + 2545);
      uint64_t v44 = v20 + 1072;
      int v45 = (_DWORD *)(v20 + 688);
      do
      {
        uint64_t v46 = v44 + v42;
        *(void *)(v44 + v42 - 480) = 0;
        *(void *)(v44 + v42 - 448) = 0;
        *(void *)(v44 + v42 - 416) = 0;
        *int v45 = 0;
        v45[4] = 0;
        v45[8] = 0;
        v45[12] = 0;
        v45[16] = 0;
        v45[20] = 0;
        v45[24] = 0;
        v45[28] = 0;
        if (v43)
        {
          *(void *)(v46 - 192) = 0;
          *(void *)(v46 - 160) = 0;
          *(void *)(v46 - 128) = 0;
          v45[72] = 0;
          v45[76] = 0;
          v45[80] = 0;
          v45[84] = 0;
          v45[88] = 0;
          v45[92] = 0;
          v45[96] = 0;
        }
        v42 += 8;
        ++v45;
      }
      while (v42 != 32);
      int v123 = (const void *)*MEMORY[0x1E4F45400];
      sub_1BBA71AC0(theDict, (const void *)*MEMORY[0x1E4F45400], v126, (void *)(v20 + 592));
      int v122 = (const void *)*MEMORY[0x1E4F45408];
      sub_1BBA71AC0(theDict, (const void *)*MEMORY[0x1E4F45408], (void *)(v20 + 544), (void *)(v20 + 624));
      uint64_t v121 = (const void *)*MEMORY[0x1E4F45420];
      sub_1BBA71CBC(theDict, (const void *)*MEMORY[0x1E4F45420], (_DWORD *)(v20 + 564), (_DWORD *)(v20 + 704));
      unsigned int v120 = (const void *)*MEMORY[0x1E4F45418];
      sub_1BBA71CBC(theDict, (const void *)*MEMORY[0x1E4F45418], (_DWORD *)(v20 + 568), (_DWORD *)(v20 + 720));
      double v119 = (const void *)*MEMORY[0x1E4F45428];
      sub_1BBA71CBC(theDict, (const void *)*MEMORY[0x1E4F45428], (_DWORD *)(v20 + 572), (_DWORD *)(v20 + 736));
      BOOL v118 = (const void *)*MEMORY[0x1E4F45430];
      sub_1BBA71CBC(theDict, (const void *)*MEMORY[0x1E4F45430], (_DWORD *)(v20 + 580), (_DWORD *)(v20 + 768));
      int v47 = (const void *)*MEMORY[0x1E4F453F0];
      sub_1BBA71CBC(theDict, (const void *)*MEMORY[0x1E4F453F0], (_DWORD *)(v20 + 584), (_DWORD *)(v20 + 784));
      sub_1BBA71CBC(theDict, (const void *)*MEMORY[0x1E4F453C8], &v134, (_DWORD *)(v20 + 800));
      if (*(unsigned char *)(a1 + 2545))
      {
        __int16 v48 = (const void *)*MEMORY[0x1E4F45368];
        if (CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E4F45368]))
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v48);
          LODWORD(buf.value) = 0;
          CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F45440]);
          CFNumberRef v51 = v50;
          if (v50)
          {
            CFTypeID v52 = CFGetTypeID(v50);
            if (v52 == CFNumberGetTypeID()) {
              CFNumberGetValue(v51, kCFNumberSInt64Type, &buf);
            }
          }
          sub_1BBA71AC0(Value, v123, (void *)(v20 + 824), (void *)(v20 + 880));
          sub_1BBA71AC0(Value, v122, (void *)(v20 + 832), (void *)(v20 + 912));
          sub_1BBA71CBC(Value, v121, (_DWORD *)(v20 + 852), (_DWORD *)(v20 + 992));
          sub_1BBA71CBC(Value, v120, (_DWORD *)(v20 + 856), (_DWORD *)(v20 + 1008));
          sub_1BBA71CBC(Value, v119, (_DWORD *)(v20 + 860), (_DWORD *)(v20 + 1024));
          sub_1BBA71CBC(Value, v118, (_DWORD *)(v20 + 868), (_DWORD *)(v20 + 1056));
          sub_1BBA71CBC(Value, v47, (_DWORD *)(v20 + 872), (_DWORD *)(v20 + 1072));
          int v53 = buf.value;
          *(_DWORD *)(v20 + 816) = 8 * (DataLength - LODWORD(buf.value));
          *(_DWORD *)(v20 + 820) = 8 * v53;
          *(int64x2_t *)(v20 + 536) = vaddq_s64(*(int64x2_t *)(v20 + 536), *(int64x2_t *)(v20 + 824));
        }
      }
      *(_DWORD *)(v20 + 528) = 8 * DataLength;
      unint64_t v54 = *(void *)(v20 + 544) + *(void *)(v20 + 536);
      *(void *)(v20 + 552) = v54;
      int v55 = *(_DWORD *)(v20 + 572);
      int v56 = *(_DWORD *)(a1 + 108) - (v55 + *(_DWORD *)(v20 + 580));
      *(_DWORD *)(v20 + 576) = v56;
      if (*(_DWORD *)(a1 + 148))
      {
LABEL_94:
        if (!*(unsigned char *)(*(void *)(a1 + 88) + 582) || CFDataGetLength(*(CFDataRef *)(a1 + 48)))
        {
LABEL_96:
          if (v130) {
            *(_DWORD *)(a2 + 2448) = *v126;
          }
          a3 = v124;
          goto LABEL_43;
        }
        CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(*(CMSampleBufferRef *)(a1 + 248));
        *(void *)(a1 + 64) = FormatDescription;
        CFRetain(FormatDescription);
        if (FormatDescription && *(void *)(a1 + 64))
        {
          FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
          CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E4F1EE20]);
          CFDictionaryRef v65 = Extension;
          if (Extension)
          {
            int v66 = CFDictionaryGetValue(Extension, @"avcC");
            if (CFDictionaryGetValue(v65, @"hvcC"))
            {
              CFDataRef v67 = *(const __CFData **)(a1 + 48);
              CFArrayRef v68 = (const __CFArray *)CFDictionaryGetValue(v65, @"hvcC");
              CFTypeID TypeID = CFArrayGetTypeID();
              if (TypeID == CFGetTypeID(v68)) {
                CFArrayRef v68 = (const __CFArray *)CFArrayGetValueAtIndex(v68, 0);
              }
              if (v68 && (CFTypeID v70 = CFDataGetTypeID(), v70 == CFGetTypeID(v68)))
              {
                buf.int value = 0;
                *(void *)&buf.timescale = 0;
                unint64_t v144 = 0;
                uint64_t v145 = 0;
                uint64_t v143 = 0;
                BytePtr = (unsigned int *)CFDataGetBytePtr(v68);
                CFIndex Length = CFDataGetLength(v68);
                if (BytePtr && Length)
                {
                  buf.epoch = (CMTimeEpoch)BytePtr;
                  uint64_t v143 = BytePtr;
                  unint64_t v144 = (unint64_t)BytePtr + Length;
                  uint64_t v145 = bswap32(*BytePtr);
                  char v146 = 0;
                }
                int valuePtr = 0;
                uint64_t v138 = 0;
                uint64_t v139 = 0;
                a3 = sub_1BBA19A88((uint64_t)&valuePtr, (uint64_t)&buf);
                if (!a3)
                {
                  *(_DWORD *)(a1 + 2520) = (v140 >> 6) + 1;
                  int v73 = v141;
                  if (v141)
                  {
                    while (1)
                    {
                      unint64_t v74 = SHIDWORD(v145) + 1;
                      int v75 = (unsigned int *)((char *)v143 + (v74 >> 3));
                      if ((unint64_t)v75 >= v144)
                      {
                        unsigned int v76 = v145;
                        if ((unint64_t)v75 > v144) {
                          int v75 = (unsigned int *)v144;
                        }
                      }
                      else
                      {
                        unsigned int v76 = bswap32(*v75);
                      }
                      unsigned int v77 = v76 << (v74 & 7);
                      unint64_t v78 = (v74 & 7) + 1;
                      uint64_t v79 = (unsigned int *)((char *)v75 + (v78 >> 3));
                      if ((unint64_t)v79 >= v144)
                      {
                        if ((unint64_t)v79 > v144) {
                          uint64_t v79 = (unsigned int *)v144;
                        }
                        unsigned int v80 = v77;
                      }
                      else
                      {
                        unsigned int v80 = bswap32(*v79);
                      }
                      unsigned int v81 = v80 << (v78 & 7);
                      LODWORD(v145) = v81;
                      if ((v77 & 0x80000000) != 0) {
                        break;
                      }
                      unint64_t v82 = (v78 & 7) + 6;
                      int v83 = v82 & 7;
                      HIDWORD(v145) = v83;
                      char v84 = (unsigned int *)((char *)v79 + (v82 >> 3));
                      uint64_t v143 = v84;
                      if ((unint64_t)v84 >= v144)
                      {
                        if ((unint64_t)v84 > v144) {
                          char v84 = (unsigned int *)v144;
                        }
                      }
                      else
                      {
                        unsigned int v81 = bswap32(*v84);
                      }
                      LODWORD(v145) = v81 << v83;
                      HIDWORD(v145) = v83;
                      uint64_t v143 = (unsigned int *)((char *)v84 + 2);
                      if ((unint64_t)v84 + 2 >= v144)
                      {
                        if ((unint64_t)v84 + 2 > v144) {
                          uint64_t v143 = (unsigned int *)v144;
                        }
                        unsigned int v85 = v81 << v83;
                      }
                      else
                      {
                        unsigned int v85 = bswap32(*(unsigned int *)((char *)v84 + 2));
                      }
                      LODWORD(v145) = v85 << v83;
                      sub_1BBA71EB8((void *)(v81 << v83 >> 16), (uint64_t)&buf, v67);
                      if (!--v73) {
                        goto LABEL_132;
                      }
                    }
                    a3 = 4294954387;
                  }
                  else
                  {
LABEL_132:
                    a3 = 0;
                  }
                }
                if (valuePtr) {
                  free(valuePtr);
                }
                if (buf.value) {
                  free((void *)buf.value);
                }
                if (!a3) {
                  goto LABEL_96;
                }
              }
              else
              {
                a3 = 4294954387;
              }
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_155;
              }
              LOWORD(buf.value) = 0;
              uint64_t v102 = MEMORY[0x1E4F14500];
              BOOL v103 = "Failed to process hvcC\n";
              goto LABEL_210;
            }
            if (v66)
            {
              CFDataRef v91 = *(const __CFData **)(a1 + 48);
              CFArrayRef v92 = (const __CFArray *)CFDictionaryGetValue(v65, @"avcC");
              CFTypeID v93 = CFArrayGetTypeID();
              if (v93 == CFGetTypeID(v92)) {
                CFArrayRef v92 = (const __CFArray *)CFArrayGetValueAtIndex(v92, 0);
              }
              if (!v92 || (CFTypeID v94 = CFDataGetTypeID(), v94 != CFGetTypeID(v92)))
              {
                a3 = 4294954387;
LABEL_208:
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                  goto LABEL_155;
                }
                LOWORD(buf.value) = 0;
                uint64_t v102 = MEMORY[0x1E4F14500];
                BOOL v103 = "Failed to process avcC\n";
LABEL_210:
                _os_log_error_impl(&dword_1BB9B9000, v102, OS_LOG_TYPE_ERROR, v103, (uint8_t *)&buf, 2u);
LABEL_155:
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buf.value) = 0;
                  _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to process format description", (uint8_t *)&buf, 2u);
                }
                goto LABEL_43;
              }
              buf.int value = 0;
              *(void *)&buf.timescale = 0;
              unint64_t v144 = 0;
              uint64_t v145 = 0;
              uint64_t v143 = 0;
              int v95 = (unsigned int *)CFDataGetBytePtr(v92);
              CFIndex v96 = CFDataGetLength(v92);
              if (v95 && v96)
              {
                buf.epoch = (CMTimeEpoch)v95;
                uint64_t v143 = v95;
                unint64_t v144 = (unint64_t)v95 + v96;
                uint64_t v145 = bswap32(*v95);
                char v146 = 0;
              }
              int valuePtr = 0;
              uint64_t v138 = 0;
              uint64_t v139 = 0;
              a3 = sub_1BBA1A16C(&valuePtr, (uint64_t)&buf);
              if (a3)
              {
LABEL_203:
                if (valuePtr) {
                  free(valuePtr);
                }
                if (buf.value) {
                  free((void *)buf.value);
                }
                if (!a3) {
                  goto LABEL_96;
                }
                goto LABEL_208;
              }
              unsigned int v97 = v145;
              unint64_t v98 = SHIDWORD(v145) + 5;
              char v99 = v98 & 7;
              HIDWORD(v145) = v98 & 7;
              uint64_t v100 = (unsigned int *)((char *)v143 + (v98 >> 3));
              uint64_t v143 = v100;
              if (MediaSubType == 1752589105)
              {
                if ((unint64_t)v100 >= v144)
                {
                  if ((unint64_t)v100 > v144) {
                    uint64_t v143 = (unsigned int *)v144;
                  }
                  unsigned int v101 = v145;
                }
                else
                {
                  unsigned int v101 = bswap32(*v100);
                }
                LODWORD(v145) = v101 << v99;
                sub_1BBA71EB8((void *)(v97 >> 27), (uint64_t)&buf, v91);
                unsigned int v105 = v145;
                unint64_t v106 = SHIDWORD(v145) + 8;
                char v107 = BYTE4(v145) & 7;
                HIDWORD(v145) = BYTE4(v145) & 7;
                int v108 = (unsigned int *)((char *)v143 + (v106 >> 3));
                uint64_t v143 = v108;
                if ((unint64_t)v108 >= v144)
                {
                  if ((unint64_t)v108 > v144) {
                    uint64_t v143 = (unsigned int *)v144;
                  }
                  unsigned int v109 = v145;
                }
                else
                {
                  unsigned int v109 = bswap32(*v108);
                }
                LODWORD(v145) = v109 << v107;
                sub_1BBA71EB8((void *)HIBYTE(v105), (uint64_t)&buf, v91);
                unsigned int v110 = v145;
                unint64_t v114 = SHIDWORD(v145) + 8;
                char v112 = BYTE4(v145) & 7;
                HIDWORD(v145) = BYTE4(v145) & 7;
                int v113 = (unsigned int *)((char *)v143 + (v114 >> 3));
                uint64_t v143 = v113;
                if ((unint64_t)v113 >= v144)
                {
                  if ((unint64_t)v113 > v144) {
                    uint64_t v143 = (unsigned int *)v144;
                  }
                  unsigned int v115 = v145;
                  goto LABEL_202;
                }
              }
              else
              {
                if ((unint64_t)v100 >= v144)
                {
                  if ((unint64_t)v100 > v144) {
                    uint64_t v143 = (unsigned int *)v144;
                  }
                  unsigned int v104 = v145;
                }
                else
                {
                  unsigned int v104 = bswap32(*v100);
                }
                LODWORD(v145) = v104 << v99;
                sub_1BBA71EB8((void *)(v97 >> 27), (uint64_t)&buf, v91);
                unsigned int v110 = v145;
                unint64_t v111 = SHIDWORD(v145) + 8;
                char v112 = BYTE4(v145) & 7;
                HIDWORD(v145) = BYTE4(v145) & 7;
                int v113 = (unsigned int *)((char *)v143 + (v111 >> 3));
                uint64_t v143 = v113;
                if ((unint64_t)v113 >= v144)
                {
                  if ((unint64_t)v113 > v144) {
                    uint64_t v143 = (unsigned int *)v144;
                  }
                  unsigned int v115 = v145;
                  goto LABEL_202;
                }
              }
              unsigned int v115 = bswap32(*v113);
LABEL_202:
              LODWORD(v145) = v115 << v112;
              sub_1BBA71EB8((void *)HIBYTE(v110), (uint64_t)&buf, v91);
              goto LABEL_203;
            }
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.value) = 0;
            _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Invalid format extensions\n", (uint8_t *)&buf, 2u);
          }
        }
        a3 = 4294954385;
        goto LABEL_155;
      }
      int v57 = *(_DWORD *)(v20 + 564) + *(_DWORD *)(v20 + 568);
      if (v57)
      {
        float v58 = (float)v117;
        float v59 = (float)v57;
      }
      else
      {
        int v60 = v56 + v55;
        if (!v60)
        {
          if (!v135) {
            goto LABEL_94;
          }
          unint64_t v61 = (unint64_t)v135[18] >> 1;
          goto LABEL_93;
        }
        float v58 = (float)v116;
        float v59 = (float)v60;
      }
      unint64_t v61 = (unint64_t)(fmax((float)(v58 / v59), 1.0) * (double)v54);
LABEL_93:
      *(void *)(v20 + 552) = v61;
      goto LABEL_94;
    }
    buf.int value = 0xBFF0000000000000;
    int valuePtr = (void *)0xBFF0000000000000;
    unint64_t v133 = 0xBFF0000000000000;
    uint64_t v34 = (const void *)*MEMORY[0x1E4F453A8];
    if (CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E4F453A8]))
    {
      CFDictionaryRef v35 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v34);
      if (v35 && (CFTypeID v36 = CFDictionaryGetTypeID(), v36 == CFGetTypeID(v35)))
      {
        __int16 v37 = (const void *)*MEMORY[0x1E4F45410];
        if (CFDictionaryContainsKey(v35, (const void *)*MEMORY[0x1E4F45410]))
        {
          CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(v35, v37);
          if (v38)
          {
            CFTypeID v125 = CFNumberGetTypeID();
            if (v125 == CFGetTypeID(v38)) {
              CFNumberGetValue(v38, kCFNumberDoubleType, &buf);
            }
          }
        }
        else if (dword_1E9F80A90 >= 2)
        {
          fwrite("quality metric does not contain LumaMeanSquaredError\n", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long v132 = 0;
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "quality metric does not contain LumaMeanSquaredError\n", v132, 2u);
          }
        }
        int v86 = (const void *)*MEMORY[0x1E4F453E0];
        if (CFDictionaryContainsKey(v35, (const void *)*MEMORY[0x1E4F453E0]))
        {
          CFNumberRef v87 = (const __CFNumber *)CFDictionaryGetValue(v35, v86);
          if (v87)
          {
            CFTypeID v127 = CFNumberGetTypeID();
            if (v127 == CFGetTypeID(v87)) {
              CFNumberGetValue(v87, kCFNumberDoubleType, &valuePtr);
            }
          }
        }
        else if (dword_1E9F80A90 >= 2)
        {
          fwrite("quality metric does not contain ChromaBlueMeanSquaredError\n", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long v132 = 0;
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "quality metric does not contain ChromaBlueMeanSquaredError\n", v132, 2u);
          }
        }
        int v88 = (const void *)*MEMORY[0x1E4F453E8];
        if (CFDictionaryContainsKey(v35, (const void *)*MEMORY[0x1E4F453E8]))
        {
          CFNumberRef v89 = (const __CFNumber *)CFDictionaryGetValue(v35, v88);
          if (v89)
          {
            CFTypeID v90 = CFNumberGetTypeID();
            if (v90 == CFGetTypeID(v89)) {
              CFNumberGetValue(v89, kCFNumberDoubleType, &v133);
            }
          }
          goto LABEL_76;
        }
        if (dword_1E9F80A90 < 2
          || (fwrite("quality metric does not contain ChromaRedMeanSquaredError\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]), !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)))
        {
LABEL_76:
          uint64_t v41 = valuePtr;
          *(void *)(a2 + 352) = buf.value;
          *(void *)(a2 + 360) = v41;
          *(void *)(a2 + 368) = v133;
          goto LABEL_77;
        }
        *(_WORD *)long long v132 = 0;
        __int16 v39 = MEMORY[0x1E4F14500];
        int v40 = "quality metric does not contain ChromaRedMeanSquaredError\n";
      }
      else
      {
        if (dword_1E9F80A90 < 2) {
          goto LABEL_76;
        }
        fwrite("unexpected quality metric type\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_76;
        }
        *(_WORD *)long long v132 = 0;
        __int16 v39 = MEMORY[0x1E4F14500];
        int v40 = "unexpected quality metric type\n";
      }
    }
    else
    {
      if (dword_1E9F80A90 < 2) {
        goto LABEL_76;
      }
      fwrite("sample attachment does not contain QualityMetricsKey\n", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_76;
      }
      *(_WORD *)long long v132 = 0;
      __int16 v39 = MEMORY[0x1E4F14500];
      int v40 = "sample attachment does not contain QualityMetricsKey\n";
    }
    _os_log_impl(&dword_1BB9B9000, v39, OS_LOG_TYPE_DEFAULT, v40, v132, 2u);
    goto LABEL_76;
  }
LABEL_43:
  if (v136) {
    sub_1BB9C09B4(v136);
  }
  if (!a3)
  {
    if (*(unsigned char *)(*(void *)(a1 + 88) + 581))
    {
      a3 = (*(uint64_t (**)(uint64_t, uint64_t, opaqueCMSampleBuffer *))(*(void *)a1 + 160))(a1, a2, a5);
      goto LABEL_17;
    }
    goto LABEL_50;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.value) = 0;
    uint64_t v12 = MEMORY[0x1E4F14500];
    unsigned int v13 = "Failed to get simple stats from sample buffer\n";
    uint32_t v14 = 2;
LABEL_6:
    _os_log_error_impl(&dword_1BB9B9000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&buf, v14);
  }
LABEL_17:
  if (*(unsigned char *)(a2 + 418)) {
    sub_1BBA6A130(a2, a3);
  }
  CMTime buf = v131;
  CMTimeGetSeconds(&buf);
  kdebug_trace();
  std::mutex::unlock((std::mutex *)(a1 + 168));
  if (v11) {
    sub_1BB9C09B4(v11);
  }
  return a3;
}

void sub_1BBA71A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *a30)
{
  if (a30) {
    free(a30);
  }
  uint64_t v34 = *(void **)(v32 - 160);
  if (v34) {
    free(v34);
  }
  if (a29) {
    sub_1BB9C09B4(a29);
  }
  std::mutex::unlock(v31);
  if (v30) {
    sub_1BB9C09B4(v30);
  }
  _Unwind_Resume(a1);
}

void sub_1BBA71AC0(const __CFDictionary *a1, const void *a2, void *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!CFDictionaryContainsKey(a1, a2)) {
    return;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    goto LABEL_20;
  }
  CFNumberRef v9 = Value;
  CFTypeID v10 = CFGetTypeID(Value);
  if (v10 == CFNumberGetTypeID())
  {
    CFNumberGetValue(v9, kCFNumberSInt64Type, a3);
    return;
  }
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 == CFArrayGetTypeID())
  {
    unsigned int Count = CFArrayGetCount(v9);
    *a3 = 0;
    uint64_t v13 = Count;
    if (Count)
    {
      CFIndex v14 = 0;
      do
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v14);
        if (ValueAtIndex)
        {
          CFNumberRef v16 = ValueAtIndex;
          CFTypeID v17 = CFGetTypeID(ValueAtIndex);
          if (v17 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v16, kCFNumberSInt64Type, a4);
            *a3 += *a4;
          }
        }
        ++v14;
        ++a4;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
LABEL_20:
    if (dword_1E9F80A90 >= 2)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unknow CFTypeID for %@ in sample attachment!\n", a2);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 138412290;
        char v19 = a2;
        _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unknow CFTypeID for %@ in sample attachment!\n", buf, 0xCu);
      }
    }
  }
}

void sub_1BBA71CBC(const __CFDictionary *a1, const void *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!CFDictionaryContainsKey(a1, a2)) {
    return;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    goto LABEL_20;
  }
  CFNumberRef v9 = Value;
  CFTypeID v10 = CFGetTypeID(Value);
  if (v10 == CFNumberGetTypeID())
  {
    CFNumberGetValue(v9, kCFNumberSInt32Type, a3);
    return;
  }
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 == CFArrayGetTypeID())
  {
    unsigned int Count = CFArrayGetCount(v9);
    *a3 = 0;
    uint64_t v13 = Count;
    if (Count)
    {
      CFIndex v14 = 0;
      do
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v14);
        if (ValueAtIndex)
        {
          CFNumberRef v16 = ValueAtIndex;
          CFTypeID v17 = CFGetTypeID(ValueAtIndex);
          if (v17 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v16, kCFNumberSInt32Type, a4);
            *a3 += *a4;
          }
        }
        ++v14;
        ++a4;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
LABEL_20:
    if (dword_1E9F80A90 >= 2)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unknow CFTypeID for %@ in sample attachment!\n", a2);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 138412290;
        char v19 = a2;
        _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unknow CFTypeID for %@ in sample attachment!\n", buf, 0xCu);
      }
    }
  }
}

void *sub_1BBA71EB8(void *result, uint64_t a2, const __CFData *a3)
{
  if ((int)result >= 1)
  {
    int v5 = (int)result;
    do
    {
      unsigned int v6 = sub_1BBA196DC(a2, 16);
      CFIndex Length = CFDataGetLength(a3);
      CFDataIncreaseLength(a3, v6 + 4);
      *(_DWORD *)&CFDataGetMutableBytePtr(a3)[Length] = 0x1000000;
      MutableBytePtr = CFDataGetMutableBytePtr(a3);
      uint64_t result = memcpy(&MutableBytePtr[Length + 4], *(const void **)(a2 + 24), v6);
      uint64_t v9 = *(int *)(a2 + 44);
      *(_DWORD *)(a2 + 44) &= 7u;
      unint64_t v10 = *(void *)(a2 + 32);
      CFTypeID v11 = (unsigned int *)(*(void *)(a2 + 24) + ((v9 + (unint64_t)(8 * v6)) >> 3));
      *(void *)(a2 + 24) = v11;
      if ((unint64_t)v11 >= v10)
      {
        if ((unint64_t)v11 > v10) {
          *(void *)(a2 + 24) = v10;
        }
      }
      else
      {
        *(_DWORD *)(a2 + 40) = bswap32(*v11);
      }
      --v5;
    }
    while (v5);
  }
  return result;
}

__CFDictionary *sub_1BBA71FA4(uint64_t a1)
{
  uint64_t v242 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  Mutable = CFDictionaryCreateMutable(0, 0, v2, v3);
  BOOL v220 = CFDictionaryCreateMutable(0, 0, v2, v3);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v208 = *(void *)(v4 + 12688);
  int v5 = *(std::__shared_weak_count **)(v4 + 12696);
  char v216 = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *(void *)(a1 + 80);
  }
  uint64_t v210 = *(void *)(v4 + 12704);
  unsigned int v6 = *(std::__shared_weak_count **)(v4 + 12712);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *(void *)(a1 + 80);
  }
  int v215 = v6;
  int v7 = *(_DWORD *)(v4 + 1000);
  if (v7 <= 1278226487)
  {
    if (v7 > 875836517)
    {
      BOOL v8 = v7 == 875836518;
      int v9 = 875836534;
    }
    else
    {
      BOOL v8 = v7 == 645424692;
      int v9 = 645428788;
    }
  }
  else if (v7 <= 1751411058)
  {
    BOOL v8 = v7 == 1278226488;
    int v9 = 1278226736;
  }
  else
  {
    BOOL v8 = v7 == 1751411059 || v7 == 2019963956;
    int v9 = 2016687156;
  }
  if (v8 || v7 == v9)
  {
    *(_DWORD *)int valuePtr = v7;
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v11)
    {
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44980], v11);
      CFRelease(v11);
    }
  }
  int v12 = *(_DWORD *)(a1 + 148);
  if (!v12)
  {
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v18 = *(void *)(v17 + 12688);
    char v19 = *(std::__shared_weak_count **)(v17 + 12696);
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_1BB9C09B4(v19);
      uint64_t v17 = *(void *)(a1 + 80);
    }
    int v20 = *(unsigned __int8 *)(v18 + 12);
    unsigned int v21 = *(unsigned __int8 *)(v18 + 61);
    int v22 = *(_DWORD *)(v17 + 1000);
    if (v22 > 1278226487)
    {
      if (v22 <= 2016687155)
      {
        if (v22 == 1278226488)
        {
LABEL_90:
          int v24 = @"HEVC_Monochrome_AutoLevel";
          goto LABEL_129;
        }
        if (v22 == 1278226736) {
          goto LABEL_73;
        }
LABEL_71:
        if (v22 == 1751411059 && v20 != 132) {
          goto LABEL_73;
        }
        if (*(unsigned __int8 *)(v18 + 12) <= 0x63u)
        {
          switch(v20)
          {
            case 1:
              if (v21 > 0xB9)
              {
                int v24 = @"HEVC_Main_6_2";
                goto LABEL_129;
              }
              if (v21 > 0xB6)
              {
                int v24 = @"HEVC_Main_6_1";
                goto LABEL_129;
              }
              if (v21 > 0xB3)
              {
                int v24 = @"HEVC_Main_6_0";
                goto LABEL_129;
              }
              if (v21 > 0x9B)
              {
                int v24 = @"HEVC_Main_5_2";
                goto LABEL_129;
              }
              if (v21 > 0x98)
              {
                int v24 = @"HEVC_Main_5_1";
                goto LABEL_129;
              }
              if (v21 > 0x95)
              {
                int v24 = @"HEVC_Main_5_0";
                goto LABEL_129;
              }
              if (v21 > 0x7A)
              {
                int v24 = @"HEVC_Main_4_1";
                goto LABEL_129;
              }
              if (v21 > 0x77)
              {
                int v24 = @"HEVC_Main_4_0";
                goto LABEL_129;
              }
              if (v21 > 0x5C)
              {
                int v24 = @"HEVC_Main_3_1";
                goto LABEL_129;
              }
              if (v21 > 0x59)
              {
                int v24 = @"HEVC_Main_3_0";
                goto LABEL_129;
              }
              if (v21 > 0x3E)
              {
                int v24 = @"HEVC_Main_2_1";
                goto LABEL_129;
              }
              if (v21 > 0x3B)
              {
                int v24 = @"HEVC_Main_2_0";
                goto LABEL_129;
              }
              int v206 = @"HEVC_Main_1_0";
              break;
            case 2:
              if (v21 > 0xB9)
              {
                int v24 = @"HEVC_Main10_6_2";
                goto LABEL_129;
              }
              if (v21 > 0xB6)
              {
                int v24 = @"HEVC_Main10_6_1";
                goto LABEL_129;
              }
              if (v21 > 0xB3)
              {
                int v24 = @"HEVC_Main10_6_0";
                goto LABEL_129;
              }
              if (v21 > 0x9B)
              {
                int v24 = @"HEVC_Main10_5_2";
                goto LABEL_129;
              }
              if (v21 > 0x98)
              {
                int v24 = @"HEVC_Main10_5_1";
                goto LABEL_129;
              }
              if (v21 > 0x95)
              {
                int v24 = @"HEVC_Main10_5_0";
                goto LABEL_129;
              }
              if (v21 > 0x7A)
              {
                int v24 = @"HEVC_Main10_4_1";
                goto LABEL_129;
              }
              if (v21 > 0x77)
              {
                int v24 = @"HEVC_Main10_4_0";
                goto LABEL_129;
              }
              if (v21 > 0x5C)
              {
                int v24 = @"HEVC_Main10_3_1";
                goto LABEL_129;
              }
              if (v21 > 0x59)
              {
                int v24 = @"HEVC_Main10_3_0";
                goto LABEL_129;
              }
              if (v21 > 0x3E)
              {
                int v24 = @"HEVC_Main10_2_1";
                goto LABEL_129;
              }
              if (v21 > 0x3B)
              {
                int v24 = @"HEVC_Main10_2_0";
                goto LABEL_129;
              }
              int v206 = @"HEVC_Main10_1_0";
              break;
            case 20:
              goto LABEL_90;
            default:
LABEL_102:
              int v24 = 0;
              goto LABEL_129;
          }
LABEL_509:
          if (v21 <= 0x1D) {
            int v24 = 0;
          }
          else {
            int v24 = v206;
          }
          goto LABEL_129;
        }
        if (v20 != 100)
        {
          if (v20 == 116) {
            goto LABEL_51;
          }
          if (v20 != 132) {
            goto LABEL_102;
          }
LABEL_73:
          int v24 = @"HEVC_Monochrome10_AutoLevel";
          goto LABEL_129;
        }
LABEL_46:
        if (v21 > 0xB9)
        {
          int v24 = @"HEVC_Main444_6_2";
          goto LABEL_129;
        }
        if (v21 > 0xB6)
        {
          int v24 = @"HEVC_Main444_6_1";
          goto LABEL_129;
        }
        if (v21 > 0xB3)
        {
          int v24 = @"HEVC_Main444_6_0";
          goto LABEL_129;
        }
        if (v21 > 0x9B)
        {
          int v24 = @"HEVC_Main444_5_2";
          goto LABEL_129;
        }
        if (v21 > 0x98)
        {
          int v24 = @"HEVC_Main444_5_1";
          goto LABEL_129;
        }
        if (v21 > 0x95)
        {
          int v24 = @"HEVC_Main444_5_0";
          goto LABEL_129;
        }
        if (v21 > 0x7A)
        {
          int v24 = @"HEVC_Main444_4_1";
          goto LABEL_129;
        }
        if (v21 > 0x77)
        {
          int v24 = @"HEVC_Main444_4_0";
          goto LABEL_129;
        }
        if (v21 > 0x5C)
        {
          int v24 = @"HEVC_Main444_3_1";
          goto LABEL_129;
        }
        if (v21 > 0x59)
        {
          int v24 = @"HEVC_Main444_3_0";
          goto LABEL_129;
        }
        if (v21 > 0x3E)
        {
          int v24 = @"HEVC_Main444_2_1";
          goto LABEL_129;
        }
        if (v21 > 0x3B)
        {
          int v24 = @"HEVC_Main444_2_0";
          goto LABEL_129;
        }
        int v206 = @"HEVC_Main444_1_0";
        goto LABEL_509;
      }
      if (v22 != 2016687156)
      {
        int v23 = 2019963956;
LABEL_50:
        if (v22 == v23) {
          goto LABEL_51;
        }
        goto LABEL_71;
      }
    }
    else
    {
      if (v22 > 875836517)
      {
        if (v22 == 875836518 || v22 == 875836534) {
          goto LABEL_46;
        }
        goto LABEL_71;
      }
      if (v22 != 645424692)
      {
        int v23 = 645428788;
        goto LABEL_50;
      }
    }
LABEL_51:
    if (v21 > 0xB9)
    {
      int v24 = @"HEVC_Main44410_6_2";
      goto LABEL_129;
    }
    if (v21 > 0xB6)
    {
      int v24 = @"HEVC_Main44410_6_1";
      goto LABEL_129;
    }
    if (v21 > 0xB3)
    {
      int v24 = @"HEVC_Main44410_6_0";
      goto LABEL_129;
    }
    if (v21 > 0x9B)
    {
      int v24 = @"HEVC_Main44410_5_2";
      goto LABEL_129;
    }
    if (v21 > 0x98)
    {
      int v24 = @"HEVC_Main44410_5_1";
      goto LABEL_129;
    }
    if (v21 > 0x95)
    {
      int v24 = @"HEVC_Main44410_5_0";
      goto LABEL_129;
    }
    if (v21 > 0x7A)
    {
      int v24 = @"HEVC_Main44410_4_1";
      goto LABEL_129;
    }
    if (v21 > 0x77)
    {
      int v24 = @"HEVC_Main44410_4_0";
      goto LABEL_129;
    }
    if (v21 > 0x5C)
    {
      int v24 = @"HEVC_Main44410_3_1";
      goto LABEL_129;
    }
    if (v21 > 0x59)
    {
      int v24 = @"HEVC_Main44410_3_0";
      goto LABEL_129;
    }
    if (v21 > 0x3E)
    {
      int v24 = @"HEVC_Main44410_2_1";
      goto LABEL_129;
    }
    if (v21 > 0x3B)
    {
      int v24 = @"HEVC_Main44410_2_0";
      goto LABEL_129;
    }
    int v206 = @"HEVC_Main44410_1_0";
    goto LABEL_509;
  }
  if (v12 != 1) {
    goto LABEL_130;
  }
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(void *)(v13 + 12688);
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 12696);
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    CFNumberRef v16 = *(int **)(v14 + 2048);
    sub_1BB9C09B4(v15);
  }
  else
  {
    CFNumberRef v16 = *(int **)(v14 + 2048);
  }
  int v24 = (__CFString *)*MEMORY[0x1E4F45250];
  int v26 = *v16;
  int v25 = v16[1];
  if (*v16 == 100)
  {
    if (*((unsigned char *)v16 + 12) && *((unsigned char *)v16 + 13))
    {
      int v27 = (__CFString **)MEMORY[0x1E4F451F0];
    }
    else
    {
      if (v25 <= 49)
      {
        switch(v25)
        {
          case 30:
            int v27 = (__CFString **)MEMORY[0x1E4F45208];
            goto LABEL_128;
          case 31:
            int v27 = (__CFString **)MEMORY[0x1E4F45210];
            goto LABEL_128;
          case 32:
            int v27 = (__CFString **)MEMORY[0x1E4F45218];
            goto LABEL_128;
          case 40:
            int v27 = (__CFString **)MEMORY[0x1E4F45220];
            goto LABEL_128;
          case 41:
            int v27 = (__CFString **)MEMORY[0x1E4F45228];
            goto LABEL_128;
          case 42:
            int v27 = (__CFString **)MEMORY[0x1E4F45230];
            goto LABEL_128;
          default:
            goto LABEL_129;
        }
        goto LABEL_129;
      }
      switch(v25)
      {
        case '2':
          int v27 = (__CFString **)MEMORY[0x1E4F45238];
          break;
        case '3':
          int v27 = (__CFString **)MEMORY[0x1E4F45240];
          break;
        case '4':
          int v27 = (__CFString **)MEMORY[0x1E4F45248];
          break;
        default:
          goto LABEL_129;
      }
    }
LABEL_128:
    int v24 = *v27;
    goto LABEL_129;
  }
  if (v26 == 77)
  {
    if (v25 > 49)
    {
      switch(v25)
      {
        case '2':
          int v27 = (__CFString **)MEMORY[0x1E4F45288];
          break;
        case '3':
          int v27 = (__CFString **)MEMORY[0x1E4F45290];
          break;
        case '4':
          int v27 = (__CFString **)MEMORY[0x1E4F45298];
          break;
        default:
LABEL_110:
          int v27 = (__CFString **)MEMORY[0x1E4F452A0];
          break;
      }
    }
    else
    {
      switch(v25)
      {
        case 30:
          int v27 = (__CFString **)MEMORY[0x1E4F45258];
          break;
        case 31:
          int v27 = (__CFString **)MEMORY[0x1E4F45260];
          break;
        case 32:
          int v27 = (__CFString **)MEMORY[0x1E4F45268];
          break;
        case 40:
          int v27 = (__CFString **)MEMORY[0x1E4F45270];
          break;
        case 41:
          int v27 = (__CFString **)MEMORY[0x1E4F45278];
          break;
        case 42:
          int v27 = (__CFString **)MEMORY[0x1E4F45280];
          break;
        default:
          goto LABEL_110;
      }
    }
    goto LABEL_128;
  }
  if (v26 == 66)
  {
    if (*((unsigned char *)v16 + 8) && *((unsigned char *)v16 + 9) && *((unsigned char *)v16 + 10))
    {
      int v27 = (__CFString **)MEMORY[0x1E4F451E8];
    }
    else if (v25 > 49)
    {
      switch(v25)
      {
        case '2':
          int v27 = (__CFString **)MEMORY[0x1E4F451C8];
          break;
        case '3':
          int v27 = (__CFString **)MEMORY[0x1E4F451D0];
          break;
        case '4':
          int v27 = (__CFString **)MEMORY[0x1E4F451D8];
          break;
        default:
LABEL_113:
          int v27 = (__CFString **)MEMORY[0x1E4F451E0];
          break;
      }
    }
    else
    {
      switch(v25)
      {
        case 30:
          int v27 = (__CFString **)MEMORY[0x1E4F45198];
          break;
        case 31:
          int v27 = (__CFString **)MEMORY[0x1E4F451A0];
          break;
        case 32:
          int v27 = (__CFString **)MEMORY[0x1E4F451A8];
          break;
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
          goto LABEL_113;
        case 40:
          int v27 = (__CFString **)MEMORY[0x1E4F451B0];
          break;
        case 41:
          int v27 = (__CFString **)MEMORY[0x1E4F451B8];
          break;
        case 42:
          int v27 = (__CFString **)MEMORY[0x1E4F451C0];
          break;
        default:
          if (v25 != 13) {
            goto LABEL_113;
          }
          int v27 = (__CFString **)MEMORY[0x1E4F45190];
          break;
      }
    }
    goto LABEL_128;
  }
LABEL_129:
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44AA0], v24);
  if (!*(_DWORD *)(a1 + 148) && *(unsigned char *)(*(void *)(a1 + 88) + 247))
  {
    *(void *)int valuePtr = 0;
    CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    VTSessionCopyProperty(*(VTSessionRef *)(a1 + 160), @"SupportedMotionSearchRangeMode", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], valuePtr);
    if (*(void *)valuePtr)
    {
      CFArrayRef v34 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)valuePtr, @"SupportedMotionSearchRangeModeArray");
      CFIndex Count = CFArrayGetCount(v34);
      CFAllocatorRef v217 = v33;
      if (Count < 1)
      {
        __int16 v37 = 0;
      }
      else
      {
        CFIndex v36 = 0;
        __int16 v37 = 0;
        float v38 = 0.0;
        unsigned int v39 = 1;
        do
        {
          LODWORD(propertyValueOut) = 0;
          *(_DWORD *)CMTime buf = 0;
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v34, v36);
          CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"HorizontalSearchRange");
          CFNumberRef v42 = v41;
          if (v41)
          {
            CFTypeID v43 = CFGetTypeID(v41);
            if (v43 == CFNumberGetTypeID()) {
              CFNumberGetValue(v42, kCFNumberSInt32Type, &propertyValueOut);
            }
          }
          CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"VerticalSearchRange");
          CFNumberRef v45 = v44;
          if (v44)
          {
            CFTypeID v46 = CFGetTypeID(v44);
            if (v46 == CFNumberGetTypeID()) {
              CFNumberGetValue(v45, kCFNumberSInt32Type, buf);
            }
          }
          float v47 = (float)(int)propertyValueOut * (float)*(int *)buf;
          if (v38 < v47)
          {
            __int16 v37 = CFDictionaryGetValue(ValueAtIndex, @"Mode");
            float v38 = v47;
          }
          CFIndex v36 = v39;
          BOOL v48 = Count <= v39++;
        }
        while (!v48);
      }
      CFRelease(*(CFTypeRef *)valuePtr);
      CFAllocatorRef v33 = v217;
    }
    else
    {
      __int16 v37 = 0;
    }
    CFArrayRef propertyValueOut = 0;
    VTSessionCopyProperty(*(VTSessionRef *)(a1 + 160), @"SupportedMotionSearchModes", v33, &propertyValueOut);
    if (propertyValueOut)
    {
      CFIndex v64 = CFArrayGetCount(propertyValueOut);
      if (v64 >= 1)
      {
        CFIndex v65 = 0;
        float v66 = 0.0;
        unsigned int v67 = 1;
        do
        {
          int v223 = 0;
          *(_DWORD *)CMTime buf = 0;
          CFDictionaryRef v68 = (const __CFDictionary *)CFArrayGetValueAtIndex(propertyValueOut, v65);
          CFNumberRef v69 = (const __CFNumber *)CFDictionaryGetValue(v68, @"MotionEstimationHorizontalSearchRange");
          CFNumberRef v70 = v69;
          if (v69)
          {
            CFTypeID v71 = CFGetTypeID(v69);
            if (v71 == CFNumberGetTypeID()) {
              CFNumberGetValue(v70, kCFNumberSInt32Type, buf);
            }
          }
          CFNumberRef v72 = (const __CFNumber *)CFDictionaryGetValue(v68, @"MotionEstimationVerticalSearchRange");
          CFNumberRef v73 = v72;
          if (v72)
          {
            CFTypeID v74 = CFGetTypeID(v72);
            if (v74 == CFNumberGetTypeID()) {
              CFNumberGetValue(v73, kCFNumberSInt32Type, &v223);
            }
          }
          float v75 = (float)*(int *)buf * (float)v223;
          if (v66 < v75)
          {
            __int16 v37 = CFDictionaryGetValue(v68, @"MotionEstimationModeID");
            float v66 = v75;
          }
          CFIndex v65 = v67;
          BOOL v48 = v64 <= v67++;
        }
        while (!v48);
      }
      CFRelease(propertyValueOut);
    }
    if (v37)
    {
      CFDictionarySetValue(theDict, @"MotionSearchRangeMode", v37);
      CFDictionarySetValue(theDict, @"MotionEstimationSearchMode", v37);
    }
  }
LABEL_130:
  uint64_t v28 = *(void *)(a1 + 88);
  int v29 = (const void **)MEMORY[0x1E4F1CFD0];
  if (*(_DWORD *)(v28 + 64) == 1)
  {
    CFDictionarySetValue(theDict, @"EnableVUIBitstreamRestriction", (const void *)*MEMORY[0x1E4F1CFD0]);
    uint64_t v28 = *(void *)(a1 + 88);
  }
  if (*(unsigned char *)(v28 + 7873)) {
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44840], *v29);
  }
  CFArrayRef propertyValueOut = 0;
  CFArrayRef v241 = 0;
  if (!*(unsigned char *)(a1 + 153))
  {
    int v30 = 0;
    uint64_t v31 = 0;
    goto LABEL_203;
  }
  if (!*(unsigned char *)(a1 + 154) && !*(unsigned char *)(a1 + 155))
  {
    if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int valuePtr = 0;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "DPB allocation in VCP\n", valuePtr, 2u);
    }
    uint64_t v49 = 0;
    LODWORD(v50) = *(_DWORD *)(a1 + 264);
    char v51 = 1;
    CFTypeID v52 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      CFMutableArrayRef v53 = CFArrayCreateMutable(0, 2 * (int)v50, v52);
      *(&propertyValueOut + v49) = v53;
      LODWORD(v50) = *(_DWORD *)(a1 + 264);
      if ((int)v50 < 1) {
        goto LABEL_173;
      }
      uint64_t v54 = 0;
      do
      {
        uint64_t v55 = 0;
        char v56 = 1;
        do
        {
          char v57 = v56;
          float v58 = *(__IOSurface **)(a1 + 272 * v49 + 16 * v54 + 8 * v55 + 304);
          if (v58)
          {
            *(_DWORD *)int valuePtr = IOSurfaceGetID(v58);
            CFNumberRef v59 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
            if (!v59) {
              goto LABEL_171;
            }
          }
          else
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberRef v59 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
            if (!v59) {
              goto LABEL_171;
            }
          }
          CFArrayAppendValue(v53, v59);
          CFRelease(v59);
LABEL_171:
          char v56 = 0;
          uint64_t v55 = 1;
        }
        while ((v57 & 1) != 0);
        ++v54;
        uint64_t v50 = *(int *)(a1 + 264);
      }
      while (v54 < v50);
LABEL_173:
      char v60 = (*(unsigned char *)(a1 + 2545) != 0) & v51;
      uint64_t v49 = 1;
      char v51 = 0;
      if ((v60 & 1) == 0)
      {
        unint64_t v61 = (const void *)*MEMORY[0x1E4F44B70];
        CFArrayRef v62 = propertyValueOut;
        if (*(unsigned char *)(a1 + 2545))
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44B70], propertyValueOut);
          CFArrayRef v62 = v241;
          int v63 = v220;
        }
        else
        {
          int v63 = theDict;
        }
        CFDictionarySetValue(v63, v61, v62);
        int v30 = 0;
LABEL_197:
        uint64_t v31 = 0;
        goto LABEL_198;
      }
    }
  }
  if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int valuePtr = 0;
    _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "DPB allocation in AVE\n", valuePtr, 2u);
  }
  int v30 = sub_1BBA74588(a1, 0);
  if (!*(unsigned char *)(a1 + 2545))
  {
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44890], v30);
    goto LABEL_197;
  }
  uint64_t v31 = sub_1BBA74588(a1, 1);
  uint64_t v32 = (const void *)*MEMORY[0x1E4F44890];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44890], v30);
  CFDictionarySetValue(v220, v32, v31);
LABEL_198:
  if (*(unsigned char *)(a1 + 2545))
  {
    if (*(_DWORD *)(a1 + 2548) == 1) {
      unsigned int v76 = (const void **)MEMORY[0x1E4F447A8];
    }
    else {
      unsigned int v76 = (const void **)MEMORY[0x1E4F447A0];
    }
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F447F0], *v76);
  }
LABEL_203:
  uint64_t v77 = *(void *)(a1 + 88);
  if (!*(unsigned char *)(v77 + 582)) {
    goto LABEL_213;
  }
  int v78 = *(_DWORD *)(v77 + 432);
  if (v78)
  {
    *(_DWORD *)(a1 + 2488) = v78;
    *(_DWORD *)(a1 + 2492) = *(_DWORD *)(v77 + 432);
    uint64_t v79 = 2;
  }
  else
  {
    uint64_t v80 = *(void *)(a1 + 80);
    if (*(_DWORD *)(v80 + 1008) == 248)
    {
      *(_OWORD *)(a1 + 2488) = xmmword_1BBB6F990;
      *(void *)(a1 + 2504) = 0x300000003;
      uint64_t v79 = 6;
    }
    else
    {
      if (!*(unsigned char *)(v80 + 1144)) {
        goto LABEL_213;
      }
      *(_OWORD *)(a1 + 2488) = 0u;
      *(_OWORD *)(a1 + 2504) = 0u;
      uint64_t v79 = 8;
    }
  }
  unsigned int v81 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  unint64_t v82 = (char *)(a1 + 2488);
  do
  {
    CFNumberRef v83 = CFNumberCreate(0, kCFNumberSInt32Type, v82);
    CFArrayAppendValue(v81, v83);
    CFRelease(v83);
    v82 += 4;
    --v79;
  }
  while (v79);
  CFDictionarySetValue(theDict, @"ChromaQPIndexOffsetMultiPPS", v81);
  CFRelease(v81);
LABEL_213:
  if (!*(unsigned char *)(a1 + 2545))
  {
    CFIndex v96 = *(_DWORD **)(a1 + 80);
    if ((v96[835] & 0x80000000) != 0
      || (v96[836] & 0x80000000) != 0
      || (v96[837] & 0x80000000) != 0
      || !*(unsigned char *)(*(void *)(a1 + 88) + 582))
    {
      goto LABEL_253;
    }
    int v97 = *(_DWORD *)(a1 + 148);
    unint64_t v98 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    uint64_t v100 = *(void *)(a1 + 80);
    uint64_t v99 = *(void *)(a1 + 88);
    *(void *)int valuePtr = *(void *)(v100 + 3340);
    int v101 = *(_DWORD *)(v100 + 3348);
    *(_DWORD *)&valuePtr[8] = v101;
    *(void *)&valuePtr[20] = 0;
    *(void *)&valuePtr[12] = 0;
    if (*(unsigned char *)(v99 + 582))
    {
      uint64_t v102 = &valuePtr[12];
      if (*(_DWORD *)(v99 + 432))
      {
        int v103 = 1;
        uint64_t v104 = 4;
LABEL_245:
        int v121 = v101 + v103;
        int v122 = v121 & 0x3F;
        int v123 = -v121;
        BOOL v112 = v123 < 0;
        int v124 = v123 & 0x3F;
        if (v112) {
          int v125 = v122;
        }
        else {
          int v125 = -v124;
        }
        *(_DWORD *)uint64_t v102 = v125;
        goto LABEL_250;
      }
      unsigned int v105 = &valuePtr[16];
      unint64_t v106 = &valuePtr[20];
      if (*(_DWORD *)(v100 + 1008) == 248)
      {
        int v103 = 3;
        int v107 = 2;
        int v108 = 1;
        uint64_t v104 = 6;
LABEL_238:
        int v110 = v101 + v108;
        int v111 = v110 & 0x3F;
        int v113 = -v110;
        BOOL v112 = v113 < 0;
        int v114 = v113 & 0x3F;
        if (v112) {
          int v115 = v111;
        }
        else {
          int v115 = -v114;
        }
        *(_DWORD *)uint64_t v102 = v115;
        int v116 = v101 + v107;
        int v117 = (v101 + v107) & 0x3F;
        int v118 = -v116;
        BOOL v112 = v118 < 0;
        int v119 = v118 & 0x3F;
        if (v112) {
          int v120 = v117;
        }
        else {
          int v120 = -v119;
        }
        *(_DWORD *)unsigned int v105 = v120;
        uint64_t v102 = v106;
        goto LABEL_245;
      }
      if (*(unsigned char *)(v100 + 1144))
      {
        uint64_t v102 = &valuePtr[16];
        unsigned int v105 = &valuePtr[20];
        unint64_t v106 = &valuePtr[24];
        int v109 = (v101 + 1) & 0x3F;
        if (v101 + 1 <= 0) {
          int v109 = -(-(v101 + 1) & 0x3F);
        }
        *(_DWORD *)&valuePtr[12] = v109;
        int v103 = 4;
        int v107 = 3;
        int v108 = 2;
        uint64_t v104 = 7;
        goto LABEL_238;
      }
    }
    uint64_t v104 = 3;
LABEL_250:
    uint64_t v126 = v97 != 0;
    do
    {
      *(_DWORD *)CMTime buf = *(_DWORD *)&valuePtr[4 * v126];
      CFNumberRef v127 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      CFArrayAppendValue(v98, v127);
      CFRelease(v127);
      ++v126;
    }
    while (v104 != v126);
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44B78], v98);
    CFRelease(v98);
LABEL_253:
    int v93 = 0;
    goto LABEL_254;
  }
  CFMutableArrayRef v84 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *(void *)int valuePtr = v84;
  if (!v84
    || ((CFMutableArrayRef v85 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]), (*(void *)&valuePtr[8] = v85) != 0)
      ? (int v86 = 0)
      : (int v86 = -12904),
        !v85))
  {
    CFTypeID v94 = 0;
    int v95 = 0;
    int v93 = -12904;
    goto LABEL_418;
  }
  CFMutableArrayRef value = v85;
  int v218 = v86;
  uint64_t v87 = 0;
  char v88 = 1;
  do
  {
    uint64_t v89 = 0;
    char v90 = v88;
    do
    {
      *(_DWORD *)CMTime buf = dword_1BBB7A2D0[3 * v87 + v89];
      CFNumberRef v91 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      CFArrayAppendValue(*(CFMutableArrayRef *)&valuePtr[8 * v87], v91);
      CFRelease(v91);
      ++v89;
    }
    while (v89 != 3);
    char v88 = 0;
    uint64_t v87 = 1;
  }
  while ((v90 & 1) != 0);
  CFArrayRef v92 = (const void *)*MEMORY[0x1E4F44B78];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44B78], v84);
  CFDictionarySetValue(v220, v92, value);
  CFRelease(v84);
  CFRelease(value);
  int v93 = v218;
LABEL_254:
  if (*(_DWORD *)(a1 + 148))
  {
    CFTypeID v94 = 0;
    goto LABEL_283;
  }
  char v207 = v30;
  CFIndex v128 = *(unsigned int *)(v208 + 260);
  if ((int)v128 < 1)
  {
    CFTypeID v94 = 0;
LABEL_282:
    int v30 = v207;
    *(unsigned char *)(v208 + 2009) = 5;
    *(_DWORD *)(v210 + 1620) = 5 - *(unsigned __int8 *)(v210 + 13);
LABEL_283:
    *(_DWORD *)int valuePtr = 1;
    CFNumberRef v147 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v147)
    {
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44B68], v147);
      CFRelease(v147);
    }
    *(void *)int valuePtr = *(void *)(*(void *)(a1 + 88) + 96);
    CFNumberRef v148 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
    if (v148)
    {
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F448F0], v148);
      CFRelease(v148);
    }
    uint64_t v149 = (const void *)*MEMORY[0x1E4F44810];
    if (*(unsigned char *)(a1 + 2545))
    {
      *(void *)int valuePtr = *(unsigned int *)(*(void *)(a1 + 88) + 180);
      CFNumberRef v150 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      if (v150)
      {
        CFDictionarySetValue(Mutable, v149, v150);
        CFRelease(v150);
      }
      *(void *)int valuePtr = *(unsigned int *)(*(void *)(a1 + 88) + 180);
      CFNumberRef v151 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      if (v151)
      {
        CFDictionarySetValue(v220, v149, v151);
        CFRelease(v151);
      }
    }
    else
    {
      *(void *)int valuePtr = *(unsigned int *)(*(void *)(a1 + 88) + 180);
      CFNumberRef v152 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      if (v152)
      {
        CFDictionarySetValue(theDict, v149, v152);
        CFRelease(v152);
      }
    }
    uint64_t v153 = *(void *)(a1 + 88);
    int v154 = *(__int16 *)(v153 + 416);
    if (v154 != 2)
    {
      CFStringRef StringForIntegerCodePoint = CVColorPrimariesGetStringForIntegerCodePoint(v154);
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44868], StringForIntegerCodePoint);
      uint64_t v153 = *(void *)(a1 + 88);
    }
    int v156 = *(__int16 *)(v153 + 418);
    if (v156 != 2)
    {
      CFStringRef v157 = CVTransferFunctionGetStringForIntegerCodePoint(v156);
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44B58], v157);
      uint64_t v153 = *(void *)(a1 + 88);
    }
    int v158 = *(__int16 *)(v153 + 420);
    if (v158 != 2)
    {
      CFStringRef v159 = CVYCbCrMatrixGetStringForIntegerCodePoint(v158);
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44BB0], v159);
      uint64_t v153 = *(void *)(a1 + 88);
    }
    if (*(unsigned char *)(v153 + 581))
    {
      *(_DWORD *)int valuePtr = 0x8000000;
      CFNumberRef v160 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      if (v160) {
        goto LABEL_304;
      }
    }
    else
    {
      *(_DWORD *)int valuePtr = 0;
      CFNumberRef v160 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      if (v160)
      {
LABEL_304:
        CFDictionarySetValue(theDict, @"EnableStatsCollect", v160);
        CFRelease(v160);
      }
    }
    if (*(char *)(*(void *)(a1 + 88) + 151) >= 2)
    {
      CFDictionarySetValue(theDict, @"EnableMultiReferenceP", (const void *)*MEMORY[0x1E4F1CFD0]);
      *(_DWORD *)int valuePtr = 1;
      CFNumberRef v161 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      if (v161)
      {
        CFDictionarySetValue(theDict, @"MultiReferencePSpacing", v161);
        CFRelease(v161);
      }
    }
    uint64_t v162 = *(void *)(a1 + 80);
    int v163 = *(_DWORD *)(v162 + 1012);
    if (v163 == -1)
    {
      if (*(_DWORD *)(*(void *)(a1 + 88) + 64) == 42
        && ((int v168 = *(_DWORD *)(v162 + 1004), v168 == 8) || v168 == 10 && *(unsigned char *)(v208 + 173) == 3))
      {
        long long v169 = (const void *)*MEMORY[0x1E4F1CFC8];
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44AC0], (const void *)*MEMORY[0x1E4F1CFC8]);
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F449D8], v169);
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_331;
        }
        *(_WORD *)int valuePtr = 0;
        char v166 = MEMORY[0x1E4F14500];
        char v167 = "AVE power state set to VMAX\n";
      }
      else
      {
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44AC0], (const void *)*MEMORY[0x1E4F1CFD0]);
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_331;
        }
        *(_WORD *)int valuePtr = 0;
        char v166 = MEMORY[0x1E4F14500];
        char v167 = "AVE power state set to Dynamic\n";
      }
    }
    else
    {
      uint64_t v164 = (const void *)*MEMORY[0x1E4F44AC0];
      if (v163 == 1)
      {
        CFDictionarySetValue(theDict, v164, (const void *)*MEMORY[0x1E4F1CFC8]);
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F449D8], (const void *)*MEMORY[0x1E4F1CFD0]);
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_331;
        }
        *(_WORD *)int valuePtr = 0;
        char v166 = MEMORY[0x1E4F14500];
        char v167 = "AVE power state set to VMIN\n";
      }
      else if (v163 == 2)
      {
        uint64_t v165 = (const void *)*MEMORY[0x1E4F1CFC8];
        CFDictionarySetValue(theDict, v164, (const void *)*MEMORY[0x1E4F1CFC8]);
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F449D8], v165);
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_331;
        }
        *(_WORD *)int valuePtr = 0;
        char v166 = MEMORY[0x1E4F14500];
        char v167 = "AVE power state set to VMAX\n";
      }
      else
      {
        CFDictionarySetValue(theDict, v164, (const void *)*MEMORY[0x1E4F1CFD0]);
        if (dword_1E9F80A90 < 3 || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_331;
        }
        *(_WORD *)int valuePtr = 0;
        char v166 = MEMORY[0x1E4F14500];
        char v167 = "AVE power state set to Dynamic\n";
      }
    }
    _os_log_impl(&dword_1BB9B9000, v166, OS_LOG_TYPE_DEFAULT, v167, valuePtr, 2u);
LABEL_331:
    uint64_t v170 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionarySetValue(theDict, @"EnableUserQPForFacetime", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFDictionarySetValue(theDict, @"EnableUserRefForFacetime", v170);
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F447E8], v170);
    BOOL v171 = (const void *)*MEMORY[0x1E4F1CFC8];
    if (*(unsigned char *)(*(void *)(a1 + 88) + 76)) {
      uint64_t v172 = v170;
    }
    else {
      uint64_t v172 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F447D0], v172);
    if (*(_DWORD *)(a1 + 148) == 1)
    {
      uint64_t v173 = *(void *)(a1 + 80);
      uint64_t v174 = *(void *)(v173 + 12688);
      double v175 = *(std::__shared_weak_count **)(v173 + 12696);
      if (v175)
      {
        atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
        int v176 = **(_DWORD **)(v174 + 2048);
        sub_1BB9C09B4(v175);
      }
      else
      {
        int v176 = **(_DWORD **)(v174 + 2048);
      }
      BOOL v178 = v176 != 66 && v176 != 77;
      int v179 = *(_DWORD *)(*(void *)(a1 + 88) + 72);
      if (v179)
      {
        if (v179 == 2) {
          uint64_t v180 = (const void *)*MEMORY[0x1E4F44FA0];
        }
        else {
          uint64_t v180 = (const void *)*MEMORY[0x1E4F44F98];
        }
      }
      else if (v176 == 66)
      {
        uint64_t v180 = (const void *)*MEMORY[0x1E4F44FA0];
      }
      else
      {
        uint64_t v180 = (const void *)*MEMORY[0x1E4F44F98];
      }
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44920], v180);
      if (v178) {
        int v181 = v170;
      }
      else {
        int v181 = v171;
      }
      CFDictionarySetValue(theDict, @"EnableTransform8x8", v181);
    }
    if (!*(unsigned char *)(v210 + 17) || (uint64_t v182 = v170, !*(unsigned char *)(*(void *)(a1 + 88) + 582))) {
      uint64_t v182 = v171;
    }
    CFDictionarySetValue(theDict, @"EnableWeightedPrediction", v182);
    if ((****(unsigned int (*****)(void))(a1 + 80))(**(void **)(a1 + 80)))
    {
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44B90], v170);
      if (*(unsigned char *)(a1 + 154))
      {
        *(_DWORD *)int valuePtr = 3;
        CFNumberRef v183 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
        if (v183)
        {
          CFDictionarySetValue(theDict, @"VideoResolutionAdaptationType", v183);
          CFRelease(v183);
        }
      }
    }
    *(_DWORD *)int valuePtr = 60;
    CFNumberRef v184 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v184)
    {
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44A98], v184);
      CFRelease(v184);
    }
    uint64_t v185 = *(void *)(a1 + 80);
    if (v185
      && (((***(uint64_t (****)(void))v185)() & 1) != 0
       || ((*(uint64_t (**)(void))(**(void **)v185 + 48))() & 1) != 0
       || ((*(uint64_t (**)(void))(**(void **)v185 + 32))() & 1) != 0
       || *(unsigned char *)(v185 + 3233)
       || *(void *)(v185 + 3224)
       || *(unsigned char *)(v185 + 3232)))
    {
      BOOL v171 = v170;
    }
    CFDictionarySetValue(theDict, @"ForceRefUncompressed", v171);
    int v186 = *(_DWORD *)(a1 + 148);
    uint64_t v187 = *(unsigned __int8 **)(a1 + 88);
    if (!v186)
    {
      if (!v187[582])
      {
LABEL_391:
        if (v187[314] == 10 || v187[315] == 10)
        {
          *(_DWORD *)int valuePtr = 10;
          CFNumberRef v197 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
          if (v197)
          {
            CFDictionarySetValue(theDict, @"OutputBitDepth", v197);
            CFRelease(v197);
          }
        }
        uint64_t v198 = *(const void **)(a1 + 2536);
        if (v198) {
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44990], v198);
        }
        if (*(int *)(*(void *)(a1 + 88) + 560) >= 2 && !*(_DWORD *)(a1 + 148))
        {
          *(_DWORD *)int valuePtr = *(_DWORD *)(*(void *)(a1 + 88) + 560);
          CFNumberRef v199 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
          if (v199)
          {
            CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44A40], v199);
            CFRelease(v199);
          }
        }
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44838], Mutable);
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F447F8], v220);
        if (*(char *)(*(void *)(a1 + 88) + 104) >= 2)
        {
          *(void *)int valuePtr = *(unsigned __int8 *)(*(void *)(a1 + 88) + 104);
          CFNumberRef v200 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
          if (v200)
          {
            CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44A30], v200);
            CFRelease(v200);
          }
        }
        *(_DWORD *)int valuePtr = *(_DWORD *)(a1 + 96);
        CFNumberRef v201 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
        if (v201)
        {
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44988], v201);
          CFRelease(v201);
        }
        if (*(unsigned char *)(*(void *)(a1 + 88) + 7874))
        {
          unsigned int v202 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v202)
          {
            *(_DWORD *)int valuePtr = *(_DWORD *)(*(void *)(a1 + 88) + 7876);
            CFNumberRef v203 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
            if (v203)
            {
              CFDictionarySetValue(v202, (const void *)*MEMORY[0x1E4F45018], v203);
              CFRelease(v203);
            }
            *(_DWORD *)int valuePtr = *(_DWORD *)(*(void *)(a1 + 88) + 7880);
            CFNumberRef v204 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
            if (v204)
            {
              CFDictionarySetValue(v202, (const void *)*MEMORY[0x1E4F45010], v204);
              CFRelease(v204);
            }
            CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F449E8], v202);
            CFRelease(v202);
          }
          else if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int valuePtr = 0;
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Warning: Create MinAndMaxDisparityDict failed!\n", valuePtr, 2u);
          }
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F448D8], v170);
        }
        int v95 = 0;
        goto LABEL_418;
      }
      int v188 = v187[234];
      if (v188 == 2) {
        int v189 = 3;
      }
      else {
        int v189 = 0;
      }
      if (v188 == 1) {
        int v190 = 1;
      }
      else {
        int v190 = v189;
      }
      *(_DWORD *)int valuePtr = v190;
      CFNumberRef v191 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      if (v191)
      {
        CFDictionarySetValue(theDict, @"SAOMode", v191);
        CFRelease(v191);
      }
      int v186 = *(_DWORD *)(a1 + 148);
      uint64_t v187 = *(unsigned __int8 **)(a1 + 88);
    }
    if (v186 == 1 && v187[582])
    {
      uint64_t v192 = *(void *)(a1 + 80);
      uint64_t v193 = *(void *)(v192 + 12688);
      int8x16_t v194 = *(std::__shared_weak_count **)(v192 + 12696);
      if (v194)
      {
        atomic_fetch_add_explicit(&v194->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v195 = *(void *)(v193 + 2048);
        sub_1BB9C09B4(v194);
      }
      else
      {
        uint64_t v195 = *(void *)(v193 + 2048);
      }
      *(void *)int valuePtr = *(unsigned int *)(v195 + 272);
      CFNumberRef v196 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      if (v196)
      {
        CFDictionarySetValue(theDict, @"log2_max_minus4", v196);
        CFRelease(v196);
      }
      CFDictionarySetValue(theDict, @"UseLongTermReference", v170);
      uint64_t v187 = *(unsigned __int8 **)(a1 + 88);
    }
    goto LABEL_391;
  }
  valuea = *(char **)(v208 + 264);
  CFTypeID v94 = CFArrayCreateMutable(0, v128, MEMORY[0x1E4F1D510]);
  uint64_t v129 = 0;
  char v212 = (const void *)*MEMORY[0x1E4F1CFD0];
  double v211 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFIndex v209 = v128;
  while (1)
  {
    BOOL v130 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v95 = v130;
    if (!v130) {
      break;
    }
    CMTime v131 = &valuea[248 * v129];
    long long v236 = *((_OWORD *)v131 + 12);
    long long v237 = *((_OWORD *)v131 + 13);
    long long v238 = *((_OWORD *)v131 + 14);
    uint64_t v239 = *((void *)v131 + 30);
    long long v232 = *((_OWORD *)v131 + 8);
    long long v233 = *((_OWORD *)v131 + 9);
    long long v234 = *((_OWORD *)v131 + 10);
    long long v235 = *((_OWORD *)v131 + 11);
    long long v228 = *((_OWORD *)v131 + 4);
    long long v229 = *((_OWORD *)v131 + 5);
    long long v230 = *((_OWORD *)v131 + 6);
    long long v231 = *((_OWORD *)v131 + 7);
    *(_OWORD *)int valuePtr = *(_OWORD *)v131;
    *(_OWORD *)&valuePtr[16] = *((_OWORD *)v131 + 1);
    long long v226 = *((_OWORD *)v131 + 2);
    long long v227 = *((_OWORD *)v131 + 3);
    int v132 = BYTE3(v234);
    if (BYTE3(v234)) {
      unint64_t v133 = v212;
    }
    else {
      unint64_t v133 = v211;
    }
    CFDictionarySetValue(v130, @"InterRefPicSetPredictionFlag", v133);
    if (v132)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CMTime buf = 0;
        _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "inter_ref_pic_set_prediction_flag is true. Not implemented yet.\n", buf, 2u);
      }
      break;
    }
    int v219 = v93;
    int v134 = BYTE1(v235);
    __int16 v135 = WORD1(v239);
    __int16 v136 = WORD2(v239);
    *(_DWORD *)CMTime buf = v235;
    CFNumberRef v137 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v137)
    {
      CFDictionarySetValue(v95, @"NumNegativePics", v137);
      CFRelease(v137);
    }
    *(_DWORD *)CMTime buf = v134;
    CFNumberRef v138 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v138)
    {
      CFDictionarySetValue(v95, @"NumPositivePics", v138);
      CFRelease(v138);
    }
    uint64_t v139 = CFArrayCreateMutable(0, 16, MEMORY[0x1E4F1D510]);
    for (uint64_t i = 178; i != 210; i += 2)
    {
      *(_WORD *)CMTime buf = *(_WORD *)&valuePtr[i];
      CFNumberRef v141 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
      if (v141)
      {
        CFArrayAppendValue(v139, v141);
        CFRelease(v141);
      }
    }
    CFDictionarySetValue(v95, @"DeltaPOCS0Minus1", v139);
    CFRelease(v139);
    *(_WORD *)CMTime buf = v135;
    CFNumberRef v142 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
    if (v142)
    {
      CFDictionarySetValue(v95, @"UsedByCurrPicS0Flag", v142);
      CFRelease(v142);
    }
    uint64_t v143 = CFArrayCreateMutable(0, 16, MEMORY[0x1E4F1D510]);
    for (uint64_t j = 210; j != 242; j += 2)
    {
      *(_WORD *)CMTime buf = *(_WORD *)&valuePtr[j];
      CFNumberRef v145 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
      if (v145)
      {
        CFArrayAppendValue(v143, v145);
        CFRelease(v145);
      }
    }
    CFDictionarySetValue(v95, @"DeltaPOCS1Minus1", v143);
    CFRelease(v143);
    *(_WORD *)CMTime buf = v136;
    CFNumberRef v146 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
    if (v146)
    {
      CFDictionarySetValue(v95, @"UsedByCurrPicS1Flag", v146);
      CFRelease(v146);
    }
    CFArrayAppendValue(v94, v95);
    int v93 = v219;
    CFRelease(v95);
    if (++v129 == v209)
    {
      CFDictionarySetValue(theDict, @"UserRPSForFaceTime", v94);
      goto LABEL_282;
    }
  }
  int v93 = -12904;
  int v30 = v207;
LABEL_418:
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
  if (v241) {
    CFRelease(v241);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v94) {
    CFRelease(v94);
  }
  if (v95) {
    CFRelease(v95);
  }
  if (v93 && theDict) {
    CFRelease(theDict);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v220) {
    CFRelease(v220);
  }
  if (v215) {
    sub_1BB9C09B4(v215);
  }
  if (v216) {
    sub_1BB9C09B4(v216);
  }
  return theDict;
}

void sub_1BBA74434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19)
{
  if (a18) {
    sub_1BB9C09B4(a18);
  }
  if (a19) {
    sub_1BB9C09B4(a19);
  }
  _Unwind_Resume(exception_object);
}

__CFDictionary *sub_1BBA74588(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 2545))
  {
    int v3 = 875704422;
    BOOL v4 = a2 == 0;
  }
  else
  {
    int v3 = *(_DWORD *)(*(void *)(a1 + 80) + 1000);
    BOOL v4 = v3 == 1982882104;
  }
  if (v4) {
    int v5 = 875704438;
  }
  else {
    int v5 = v3;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int valuePtr = v5;
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionaryAddValue(Mutable, @"DPBPixelFormat", v7);
    CFRelease(v8);
  }
  int v16 = *(_DWORD *)(a1 + 264);
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v16);
  if (v9)
  {
    CFNumberRef v10 = v9;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44BE0], v9);
    CFRelease(v10);
  }
  CFNumberRef v11 = (const void *)*MEMORY[0x1E4F44BD8];
  int v12 = (****(uint64_t (*****)(void))(a1 + 80))(**(void **)(a1 + 80));
  uint64_t v13 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!v12) {
    uint64_t v13 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionaryAddValue(Mutable, v11, *v13);
  return Mutable;
}

uint64_t sub_1BBA746E8(uint64_t a1)
{
  uint64_t v2 = *(OpaqueVTCompressionSession **)(a1 + 160);
  if (!v2) {
    return 4294954381;
  }
  CMTime v4 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  uint64_t result = VTCompressionSessionCompleteFrames(v2, &v4);
  if (!result) {
    return *(unsigned int *)(a1 + 256);
  }
  return result;
}

uint64_t sub_1BBA74748(uint64_t a1)
{
  if (*(void *)(a1 + 160)) {
    return 0;
  }
  else {
    return 4294954381;
  }
}

uint64_t sub_1BBA7475C(uint64_t a1, uint64_t a2)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(*(void *)(a2 + 24) + 80);
  CVPixelBufferRef v131 = 0;
  CMTime v4 = *(opaqueCMSampleBuffer **)(a1 + 248);
  int v134 = 0;
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v4, 0);
  if (!SampleAttachmentsArray) {
    goto LABEL_96;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  if (!ValueAtIndex) {
    goto LABEL_96;
  }
  CFDictionaryRef v7 = ValueAtIndex;
  CFNumberRef v8 = (const void *)*MEMORY[0x1E4F45448];
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F45448]);
  if (!Value) {
    goto LABEL_96;
  }
  CFDictionaryRef v10 = Value;
  CFNumberRef v11 = (const void *)*MEMORY[0x1E4F44E18];
  unint64_t v133 = CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F44E18]);
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F44DF8]);
  if (v12)
  {
    CFNumberRef v13 = v12;
    CFTypeID v14 = CFGetTypeID(v12);
    if (v14 == CFNumberGetTypeID()) {
      CFNumberGetValue(v13, kCFNumberSInt32Type, (void *)(a1 + 2240));
    }
  }
  CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F44E08]);
  if (v15)
  {
    CFNumberRef v16 = v15;
    CFTypeID v17 = CFGetTypeID(v15);
    if (v17 == CFNumberGetTypeID()) {
      CFNumberGetValue(v16, kCFNumberSInt32Type, (void *)(a1 + 2244));
    }
  }
  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F44E00]);
  if (v18)
  {
    CFNumberRef v19 = v18;
    CFTypeID v20 = CFGetTypeID(v18);
    if (v20 == CFNumberGetTypeID()) {
      CFNumberGetValue(v19, kCFNumberSInt32Type, (void *)(a1 + 2248));
    }
  }
  CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F44E10]);
  if (v21)
  {
    CFNumberRef v22 = v21;
    CFTypeID v23 = CFGetTypeID(v21);
    if (v23 == CFNumberGetTypeID()) {
      CFNumberGetValue(v22, kCFNumberSInt32Type, (void *)(a1 + 2252));
    }
  }
  if (*(_DWORD *)(a1 + 2252) > 0xFu) {
    goto LABEL_96;
  }
  if (*(unsigned char *)(a1 + 2545))
  {
    int v24 = (const void *)*MEMORY[0x1E4F45368];
    if (CFDictionaryContainsKey(v7, (const void *)*MEMORY[0x1E4F45368]))
    {
      CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(v7, v24);
      CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(v25, v8);
      if (!v26)
      {
LABEL_96:
        uint64_t v97 = 4294954394;
        goto LABEL_97;
      }
      int v134 = CFDictionaryGetValue(v26, v11);
    }
  }
  BOOL v112 = (_DWORD *)(a1 + 2252);
  int v107 = v3;
  uint64_t v27 = 0;
  int v108 = (void *)(a2 + 608);
  key = (void *)*MEMORY[0x1E4F44E40];
  int v124 = (void *)*MEMORY[0x1E4F44E48];
  int v123 = (void *)*MEMORY[0x1E4F44E70];
  int v122 = (void *)*MEMORY[0x1E4F44E60];
  int v121 = (void *)*MEMORY[0x1E4F44E58];
  int v120 = (void *)*MEMORY[0x1E4F44E78];
  int v119 = (void *)*MEMORY[0x1E4F44E80];
  int v118 = (void *)*MEMORY[0x1E4F44EA0];
  int v117 = (void *)*MEMORY[0x1E4F44E90];
  int v116 = (void *)*MEMORY[0x1E4F44E88];
  int v115 = (void *)*MEMORY[0x1E4F44E98];
  int v114 = (void *)*MEMORY[0x1E4F44E50];
  CFNumberRef v127 = (void *)*MEMORY[0x1E4F44E38];
  uint64_t v28 = (const void *)*MEMORY[0x1E4F44E20];
  int v29 = (const void *)*MEMORY[0x1E4F44E30];
  int v111 = (void *)*MEMORY[0x1E4F44E28];
  char v30 = 1;
  int v113 = (void *)*MEMORY[0x1E4F44E68];
  do
  {
    char v110 = v30;
    uint64_t v31 = 0;
    uint64_t v32 = 8 * v27;
    CFArrayRef theArray = (const __CFArray *)*(&v133 + v27);
    unint64_t v33 = -1;
    do
    {
      CFDictionaryRef v34 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v33 + 1);
      CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v34, key);
      CFNumberRef v36 = v35;
      if (v35)
      {
        CFTypeID v37 = CFGetTypeID(v35);
        if (v37 == CFNumberGetTypeID()) {
          CFNumberGetValue(v36, kCFNumberSInt32Type, (void *)(a1 + v31 + 904));
        }
      }
      CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(v34, v124);
      CFNumberRef v39 = v38;
      if (v38)
      {
        CFTypeID v40 = CFGetTypeID(v38);
        if (v40 == CFNumberGetTypeID()) {
          CFNumberGetValue(v39, kCFNumberSInt32Type, (void *)(a1 + v31 + 908));
        }
      }
      *(_DWORD *)int valuePtr = 0;
      CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v34, v123);
      CFNumberRef v42 = v41;
      if (v41 && (CFTypeID v43 = CFGetTypeID(v41), v43 == CFNumberGetTypeID()))
      {
        CFNumberGetValue(v42, kCFNumberSInt32Type, valuePtr);
        int v44 = *(_DWORD *)valuePtr;
      }
      else
      {
        int v44 = 0;
      }
      *(_DWORD *)(a1 + v31 + 896) = v44;
      CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v34, v122);
      CFNumberRef v46 = v45;
      if (v45)
      {
        CFTypeID v47 = CFGetTypeID(v45);
        if (v47 == CFNumberGetTypeID()) {
          CFNumberGetValue(v46, kCFNumberSInt64Type, (void *)(a1 + v31 + 920));
        }
      }
      CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(v34, v121);
      CFNumberRef v49 = v48;
      if (v48)
      {
        CFTypeID v50 = CFGetTypeID(v48);
        if (v50 == CFNumberGetTypeID()) {
          CFNumberGetValue(v49, kCFNumberSInt32Type, (void *)(a1 + v31 + 912));
        }
      }
      CFDictionaryRef v51 = (const __CFDictionary *)CFDictionaryGetValue(v34, v120);
      CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(v51, v119);
      CFNumberRef v53 = v52;
      if (v52)
      {
        CFTypeID v54 = CFGetTypeID(v52);
        if (v54 == CFNumberGetTypeID()) {
          CFNumberGetValue(v53, kCFNumberSInt32Type, (void *)(a1 + v31 + 936));
        }
      }
      CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v51, v118);
      CFNumberRef v56 = v55;
      if (v55)
      {
        CFTypeID v57 = CFGetTypeID(v55);
        if (v57 == CFNumberGetTypeID()) {
          CFNumberGetValue(v56, kCFNumberSInt32Type, (void *)(a1 + v31 + 940));
        }
      }
      CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(v51, v117);
      CFNumberRef v59 = v58;
      if (v58)
      {
        CFTypeID v60 = CFGetTypeID(v58);
        if (v60 == CFNumberGetTypeID()) {
          CFNumberGetValue(v59, kCFNumberSInt32Type, (void *)(a1 + v31 + 944));
        }
      }
      CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(v51, v116);
      CFNumberRef v62 = v61;
      if (v61)
      {
        CFTypeID v63 = CFGetTypeID(v61);
        if (v63 == CFNumberGetTypeID()) {
          CFNumberGetValue(v62, kCFNumberSInt32Type, (void *)(a1 + v31 + 948));
        }
      }
      CFNumberRef v64 = (const __CFNumber *)CFDictionaryGetValue(v51, v115);
      CFNumberRef v65 = v64;
      if (v64)
      {
        CFTypeID v66 = CFGetTypeID(v64);
        if (v66 == CFNumberGetTypeID()) {
          CFNumberGetValue(v65, kCFNumberSInt32Type, (void *)(a1 + v31 + 952));
        }
      }
      CFDictionaryRef v67 = (const __CFDictionary *)CFDictionaryGetValue(v34, v114);
      CFNumberRef v68 = (const __CFNumber *)CFDictionaryGetValue(v67, v127);
      CFNumberRef v69 = v68;
      if (v68)
      {
        CFTypeID v70 = CFGetTypeID(v68);
        if (v70 == CFNumberGetTypeID()) {
          CFNumberGetValue(v69, kCFNumberSInt16Type, (void *)(a1 + v31 + 928));
        }
      }
      CFNumberRef v71 = (const __CFNumber *)CFDictionaryGetValue(v67, v28);
      CFNumberRef v72 = v71;
      if (v71)
      {
        CFTypeID v73 = CFGetTypeID(v71);
        if (v73 == CFNumberGetTypeID()) {
          CFNumberGetValue(v72, kCFNumberSInt16Type, (void *)(a1 + v31 + 932));
        }
      }
      if (CFDictionaryContainsKey(v67, v29))
      {
        CFNumberRef v74 = (const __CFNumber *)CFDictionaryGetValue(v67, v29);
        CFNumberRef v75 = v74;
        if (!v74) {
          goto LABEL_66;
        }
      }
      else
      {
        CFNumberRef v74 = (const __CFNumber *)CFDictionaryGetValue(v67, v111);
        CFNumberRef v75 = v74;
        if (!v74) {
          goto LABEL_66;
        }
      }
      CFTypeID v76 = CFGetTypeID(v74);
      if (v76 == CFNumberGetTypeID()) {
        CFNumberGetValue(v75, kCFNumberSInt32Type, (void *)(a1 + v32 + 880));
      }
LABEL_66:
      CFDictionaryRef v77 = (const __CFDictionary *)CFDictionaryGetValue(v34, v113);
      CFNumberRef v78 = (const __CFNumber *)CFDictionaryGetValue(v77, v127);
      CFNumberRef v79 = v78;
      if (v78)
      {
        CFTypeID v80 = CFGetTypeID(v78);
        if (v80 == CFNumberGetTypeID()) {
          CFNumberGetValue(v79, kCFNumberSInt16Type, (void *)(a1 + v31 + 930));
        }
      }
      CFNumberRef v81 = (const __CFNumber *)CFDictionaryGetValue(v77, v28);
      CFNumberRef v82 = v81;
      if (v81)
      {
        CFTypeID v83 = CFGetTypeID(v81);
        if (v83 == CFNumberGetTypeID()) {
          CFNumberGetValue(v82, kCFNumberSInt16Type, (void *)(a1 + v31 + 934));
        }
      }
      if (CFDictionaryContainsKey(v77, v29))
      {
        CFNumberRef v84 = (const __CFNumber *)CFDictionaryGetValue(v77, v29);
        CFNumberRef v85 = v84;
        if (!v84) {
          goto LABEL_78;
        }
      }
      else
      {
        CFNumberRef v84 = (const __CFNumber *)CFDictionaryGetValue(v77, v111);
        CFNumberRef v85 = v84;
        if (!v84) {
          goto LABEL_78;
        }
      }
      CFTypeID v86 = CFGetTypeID(v84);
      if (v86 == CFNumberGetTypeID()) {
        CFNumberGetValue(v85, kCFNumberSInt32Type, (void *)(a1 + v32 + 884));
      }
LABEL_78:
      unint64_t v87 = *v112;
      ++v33;
      v31 += 80;
      v32 += 80;
    }
    while (v33 < v87);
    uint64_t v27 = 1;
    char v30 = 0;
  }
  while (((*(unsigned char *)(a1 + 2545) != 0) & v110) != 0);
  unsigned int v88 = 0;
  uint64_t v89 = (v87 + 1);
  uint64_t v90 = 904;
  do
  {
    if (*(_DWORD *)(a1 + v90) > v88) {
      unsigned int v88 = *(_DWORD *)(a1 + v90);
    }
    v90 += 80;
    --v89;
  }
  while (v89);
  *(_DWORD *)(*v108 + 684) = v88;
  CFArrayRef v91 = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(a1 + 248), 0);
  if (!v91) {
    goto LABEL_96;
  }
  CFDictionaryRef v92 = (const __CFDictionary *)CFArrayGetValueAtIndex(v91, 0);
  if (!v92) {
    goto LABEL_96;
  }
  CFNumberRef v93 = (const __CFNumber *)CFDictionaryGetValue(v92, (const void *)*MEMORY[0x1E4F45398]);
  if (v93)
  {
    LODWORD(v133) = 0;
    CFNumberGetValue(v93, kCFNumberSInt32Type, &v133);
    CFTypeID v94 = *(unsigned char **)(a2 + 16);
    if (v94[33])
    {
      __int16 v95 = (__int16)v133;
      if ((*(unsigned int (**)(unsigned char *))(*(void *)v94 + 32))(v94)) {
        *(_WORD *)(*(void *)(a2 + 24) + 16) = v95;
      }
    }
  }
  uint64_t v96 = *(void *)(a1 + 88);
  if (!*(unsigned char *)(v96 + 582)
    || *(unsigned char *)(a1 + 154)
    || !*(void *)(v96 + 40) && !*(unsigned char *)(v96 + 49) && !*(unsigned char *)(v96 + 48))
  {
    goto LABEL_138;
  }
  if (v107) {
    goto LABEL_109;
  }
  unint64_t v106 = *(std::__shared_weak_count **)(a2 + 616);
  v130[0] = *(void *)(a2 + 608);
  v130[1] = v106;
  if (v106) {
    atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v97 = sub_1BBA75388(a1, v130, v88, 0);
  if (v106) {
    sub_1BB9C09B4(v106);
  }
  if (!v97)
  {
LABEL_109:
    if (!*(unsigned char *)(a1 + 2545)) {
      goto LABEL_138;
    }
    uint64_t v99 = *(void *)(a2 + 624);
    *(_DWORD *)(v99 + 684) = v88;
    uint64_t v100 = *(std::__shared_weak_count **)(a2 + 632);
    v129[0] = v99;
    v129[1] = v100;
    if (v100) {
      atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v97 = sub_1BBA75388(a1, v129, v88, 1u);
    if (v100) {
      sub_1BB9C09B4(v100);
    }
    if (!v97)
    {
LABEL_138:
      uint64_t v97 = 0;
      if (v107)
      {
        if (*(unsigned char *)(*(void *)(a1 + 88) + 582))
        {
          if (*(unsigned char *)(a1 + 154)) {
            goto LABEL_95;
          }
          if ((*(uint64_t (**)(void))(*(void *)*v108 + 88))()) {
            goto LABEL_112;
          }
          if ((*(unsigned int (**)(void, CVPixelBufferRef *))(**(void **)(*(void *)(a1 + 80) + 12736)
                                                                          + 32))(*(void *)(*(void *)(a1 + 80) + 12736), &v131))
          {
            uint64_t v97 = 4294954392;
          }
          else if ((*(unsigned int (**)(void, CVPixelBufferRef, void))(*(void *)*v108 + 64))(*v108, v131, 0))
          {
            uint64_t v97 = 4294954385;
          }
          else
          {
LABEL_112:
            int v101 = *(std::__shared_weak_count **)(a2 + 616);
            v128[0] = *(void *)(a2 + 608);
            v128[1] = v101;
            if (v101) {
              atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v97 = sub_1BBA75388(a1, v128, v88, 0);
            if (v101) {
              sub_1BB9C09B4(v101);
            }
            if (!v97)
            {
              uint64_t v102 = *(void *)(a2 + 608);
              LODWORD(v133) = *(_DWORD *)(v102 + 280);
              sub_1BBA499A8(*(void *)(a2 + 2688) + 3320, v102, (int)(*(float *)(a2 + 2720) + 0.5), (int *)&v133);
              if (*(_DWORD *)(*(void *)(a1 + 88) + 508) == 2)
              {
                uint64_t v103 = 0;
                uint64_t v104 = 904;
                while (*(_DWORD *)(a1 + v104) != v88)
                {
                  ++v103;
                  v104 += 80;
                  if (*v112 + 1 == v103)
                  {
                    unsigned int v105 = 0;
                    goto LABEL_133;
                  }
                }
                unsigned int v105 = (IOSurfaceID *)(a1 + 880 + 80 * v103);
LABEL_133:
                uint64_t v97 = sub_1BBA75668(a1, v108, v105);
                if (v97 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)int valuePtr = 0;
                  _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to update remote DPB buffer\n", valuePtr, 2u);
                }
              }
              else
              {
LABEL_95:
                uint64_t v97 = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_97:
  if (v131) {
    CVPixelBufferRelease(v131);
  }
  return v97;
}

void sub_1BBA75360(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1BB9C09B4(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BBA75388(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  uint64_t v6 = 0;
  CFDictionaryRef v7 = (int *)(a1 + 904);
  while (1)
  {
    int v8 = *v7;
    v7 += 20;
    if (v8 == a3) {
      break;
    }
    if (*(_DWORD *)(a1 + 2252) + 1 == ++v6) {
      return 4294954387;
    }
  }
  IOSurfaceID v9 = *(_DWORD *)(a1 + 880 + 80 * v6 + 8 * a4);
  if (!v9) {
    return 4294954387;
  }
  IOSurfaceRef v10 = IOSurfaceLookup(v9);
  if (!v10) {
    return 4294954394;
  }
  CFNumberRef v11 = v10;
  CFNumberRef v12 = (__CVBuffer *)(*(uint64_t (**)(void))(*(void *)*a2 + 88))();
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v12);
  IOSurfaceLock(v11, 0, 0);
  IOSurfaceRef buffer = v11;
  sub_1BBA70674((uint64_t)v30);
  if (sub_1BBA13A1C(v31) <= 8)
  {
    int v18 = sub_1BBA13EC4(PixelFormatType);
    char v19 = 0;
    uint64_t v20 = 0;
    char v21 = 1;
    do
    {
      char v22 = v21;
      if (!v18 && (v19 & 1) != 0) {
        break;
      }
      uint64_t v23 = *(void *)&v33[56 * v20];
      if (v23 && (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, v20))
      {
        int v24 = &v30[7 * v20];
        uint64_t v25 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, v20);
        uint64_t v26 = *(void *)(*a2 + 8 * v20 + 112);
        int v27 = v24[20];
        uint64_t v28 = v25 - v26 * (int)v24[22] - (int)v24[21];
        if (v27 == 3)
        {
          sub_1BBAD0D44(v28, v26, v23, *(_DWORD *)(a1 + 4 * v20 + 276), *(_DWORD *)(a1 + 4 * v20 + 284), v20);
        }
        else
        {
          if (v27 == 1)
          {
            LODWORD(pixelBufferOut[0]) = *(_DWORD *)(a1 + 2524);
            *((_DWORD *)pixelBufferOut + v20 + 1) = *(_DWORD *)(a1 + 2528);
            pixelBufferOut[v20 + 2] = *(CVPixelBufferRef *)&v33[56 * v20 + 8];
          }
          ((void (*)(uint64_t))qword_1E9F81F80[v20])(v28);
        }
      }
      char v21 = 0;
      char v19 = 1;
      uint64_t v20 = 1;
    }
    while ((v22 & 1) != 0);
  }
  else
  {
    pixelBufferOut[0] = 0;
    CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v11, 0, pixelBufferOut);
    CFTypeID v14 = *(OpaqueVTPixelTransferSession **)(a1 + 2552);
    if (v14)
    {
      CFNumberRef v15 = pixelBufferOut[0];
      CFNumberRef v16 = (__CVBuffer *)(*(uint64_t (**)(void))(*(void *)*a2 + 88))();
      VTPixelTransferSessionTransferImage(v14, v15, v16);
    }
    CVPixelBufferRelease(pixelBufferOut[0]);
  }
  IOSurfaceRef v29 = buffer;
  IOSurfaceUnlock(buffer, 0, 0);
  CFRelease(v29);
  return 0;
}

uint64_t sub_1BBA75668(uint64_t a1, void *a2, IOSurfaceID *a3)
{
  if (!a3 || !*a3) {
    return 4294954387;
  }
  int v5 = IOSurfaceLookup(*a3);
  if (!v5) {
    return 4294954394;
  }
  uint64_t v6 = v5;
  IOSurfaceLock(v5, 0, 0);
  IOSurfaceRef buffer = v6;
  sub_1BBA70674((uint64_t)v19);
  uint64_t v7 = 0;
  char v8 = 1;
  while (1)
  {
    char v9 = v8;
    if (!(*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, v7)) {
      break;
    }
    IOSurfaceRef v10 = &v19[7 * v7];
    CFNumberRef v11 = (int8x16_t *)v10[6];
    uint64_t v12 = *((unsigned int *)v10 + 18);
    uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, v7);
    int v14 = *((_DWORD *)v10 + 20);
    uint64_t v15 = v13 - *(void *)(*a2 + 8 * v7 + 112) * *((int *)v10 + 22) - *((int *)v10 + 21);
    if (v14 == 3)
    {
      sub_1BBAD0F08(v11, v15, *(void *)(*a2 + 8 * v7 + 112), *(_DWORD *)(a1 + 4 * v7 + 276), *(_DWORD *)(a1 + 4 * v7 + 284), v7);
    }
    else
    {
      if (v14 == 1)
      {
        v22[0] = *(_DWORD *)(a1 + 2524);
        v22[v7 + 1] = *(_DWORD *)(a1 + 2528);
        *(void *)&v22[2 * v7 + 4] = v21[7 * v7];
      }
      ((void (*)(int8x16_t *, uint64_t, uint64_t))qword_1E9F81F70[v7])(v11, v12, v15);
    }
    char v8 = 0;
    uint64_t v7 = 1;
    if ((v9 & 1) == 0)
    {
      uint64_t v16 = 0;
      goto LABEL_16;
    }
  }
  uint64_t v16 = 4294954385;
LABEL_16:
  IOSurfaceRef v17 = buffer;
  IOSurfaceUnlock(buffer, 0, 0);
  CFRelease(v17);
  return v16;
}

uint64_t sub_1BBA75850(uint64_t a1, uint64_t a2)
{
  uint64_t v338 = *MEMORY[0x1E4F143B8];
  sub_1BBA61EF4(&v333, *(void *)(*(void *)(a2 + 584) + 48), 0);
  uint64_t v4 = *(void *)(a2 + 592);
  int v5 = *(std::__shared_weak_count **)(a2 + 600);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v319 = v5;
  *(unsigned char *)(a1 + 152) = 0;
  memset(&v332, 0, sizeof(v332));
  int v315 = (void *)v4;
  CMTimeMake(&v332, *(void *)(v4 + 16), *(_DWORD *)(v4 + 32));
  if (v333)
  {
    BOOL v6 = *(unsigned char *)(v333 + 111) && *(unsigned char *)(v333 + 130) || *(unsigned char *)(a2 + 3) != 0;
    *(unsigned char *)(a1 + 152) = v6;
  }
  uint64_t v7 = (void ***)(a2 + 392);
  if (!*(void *)(a2 + 400))
  {
    sub_1BBA64F94(a2 + 392);
    if (!malloc_type_posix_memalign((void **)(a2 + 392), 0x10uLL, 0x18uLL, 0x102004024DAA5DEuLL))
    {
      char v8 = *v7;
      if (*v7)
      {
        *char v8 = 0;
        v8[1] = 0;
        *(void *)(a2 + 400) = 1;
      }
    }
  }
  uint64_t v329 = a2;
  char v9 = *v7;
  CFNumberRef v11 = **v7;
  IOSurfaceRef v10 = (*v7)[1];
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12) {
    goto LABEL_41;
  }
  int v13 = *(_DWORD *)(a1 + 72);
  int v14 = *(_DWORD *)(a1 + 76);
  if (!v10)
  {
    if (v11)
    {
      free(v11);
      *char v9 = 0;
      v9[1] = 0;
    }
    if (malloc_type_posix_memalign(v9, 0x10uLL, 0x448uLL, 0x10300406C2DB039uLL) || !*v9) {
      goto LABEL_41;
    }
    bzero(*v9, 0x448uLL);
    v9[1] = (void *)1;
    CFNumberRef v11 = *v9;
  }
  int v15 = ((v14 + 15) >> 4) * ((v13 + 15) >> 4);
  int theDict = 16 * v15;
  int v16 = 4 * v15;
  *((_DWORD *)v9 + 4) = v13;
  *((_DWORD *)v9 + 5) = v14;
  char v17 = 1;
  *((_DWORD *)v11 + 272) = 1;
  *CFNumberRef v11 = (uint64_t)(v13 + 15) >> 4;
  size_t v18 = v15;
  char v19 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  v11[1] = operator new[](v15, MEMORY[0x1E4FBA2D0]);
  v11[3] = operator new[](v15, v19);
  BOOL v20 = v15 < 0;
  if (v15 < 0) {
    size_t v21 = -1;
  }
  else {
    size_t v21 = 2 * v15;
  }
  uint64_t v22 = 64 * v15;
  if (v15 < 0) {
    uint64_t v22 = -1;
  }
  size_t __sz = v22;
  if (v15 < 0) {
    size_t v23 = -1;
  }
  else {
    size_t v23 = 4 * v15;
  }
  if (v20) {
    size_t v24 = -1;
  }
  else {
    size_t v24 = 4 * v16;
  }
  if (v20) {
    size_t v25 = -1;
  }
  else {
    size_t v25 = 2 * v16;
  }
  v11[4] = operator new[](v21, v19);
  size_t v326 = v16;
  v11[13] = operator new[](v16, v19);
  v11[14] = operator new[](theDict, v19);
  v11[12] = operator new[](v18, v19);
  v11[15] = operator new[](v18, v19);
  v11[18] = operator new[](v21, v19);
  v11[16] = operator new[](v18, v19);
  v11[20] = operator new[](__sz, v19);
  uint64_t v26 = 0;
  v11[22] = operator new[](theDict, v19);
  do
  {
    char v27 = v17;
    uint64_t v28 = &v11[v26];
    v28[24] = operator new[](v23, v19);
    v28[28] = operator new[](v21, v19);
    v28[32] = operator new[](v24, v19);
    char v17 = 0;
    v28[36] = operator new[](v25, v19);
    uint64_t v26 = 1;
  }
  while ((v27 & 1) != 0);
  IOSurfaceRef v29 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  uint64_t v30 = 0;
  v11[40] = operator new[](v326, MEMORY[0x1E4FBA2D0]);
  do
  {
    v11[v30 + 42] = operator new[](v21, v29);
    v11[v30 + 45] = operator new[](v23, v29);
    ++v30;
  }
  while (v30 != 3);
LABEL_41:
  int v327 = *(_DWORD *)(*(void *)(v329 + 608) + 680);
  int v31 = *(_DWORD **)(v329 + 1096);
  uint64_t v32 = *(unsigned __int8 **)(v329 + 1112);
  uint64_t v33 = *(void *)(a1 + 88);
  uint64_t v34 = *(void *)(v329 + 40);
  CFMutableDictionaryRef theDicta = *(CFMutableDictionaryRef *)(v329 + 1128);
  if (*(_DWORD *)(v33 + 504)) {
    LODWORD(v34) = *(_DWORD *)(*(void *)(v34 + 2048) + 280);
  }
  else {
    LOBYTE(v34) = *(unsigned char *)(v34 + 196);
  }
  uint64_t v35 = 0;
  int v36 = *(char *)(v33 + 151);
  int v37 = *(_DWORD *)(v33 + 512);
  memset(time, 0, sizeof(time));
  char __sza = v34 + 4;
  char v38 = 1;
  do
  {
    CFNumberRef v39 = &time[16 * v35];
    CFTypeID v40 = (std::__shared_weak_count *)v39[1];
    char v41 = v38;
    *CFNumberRef v39 = 0;
    v39[1] = 0;
    if (v40) {
      sub_1BB9C09B4(v40);
    }
    char v38 = 0;
    *(_DWORD *)(*(void *)(a1 + 864) + 4 * v35) = -1;
    uint64_t v35 = 1;
  }
  while ((v41 & 1) != 0);
  if (v36 >= 2) {
    int v42 = 2;
  }
  else {
    int v42 = v36;
  }
  BOOL v312 = v37 < 2;
  int v43 = v31[1];
  if (v43 < 1 || v36 < 1)
  {
    uint64_t v45 = 0;
    if (v43 >= 1)
    {
      uint64_t v46 = 0;
      uint64_t v44 = 0;
LABEL_95:
      int v67 = v327;
      goto LABEL_96;
    }
    uint64_t v46 = 0;
    int v66 = 0;
    goto LABEL_111;
  }
  uint64_t v44 = 0;
  char v316 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  CFTypeID v47 = (uint64_t *)(v31 + 8);
  while (1)
  {
    CFNumberRef v48 = (_DWORD *)*(v47 - 1);
    if (!v48)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CMTime buf = 0;
        CFNumberRef v64 = MEMORY[0x1E4F14500];
        CFNumberRef v65 = "Cannot find reference frame from short-term RPS\n";
        goto LABEL_379;
      }
      goto LABEL_142;
    }
    uint64_t v49 = *(void *)(v329 + 592);
    if (!*(unsigned char *)(v49 + 136))
    {
LABEL_75:
      uint64_t v57 = *v47;
      if (*v47) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
      }
      CFNumberRef v58 = &time[16 * v45];
      CFNumberRef v59 = (std::__shared_weak_count *)v58[1];
      ++v45;
      *CFNumberRef v58 = v48;
      v58[1] = v57;
      uint64_t v60 = v46;
      if (!v59) {
        goto LABEL_82;
      }
      goto LABEL_78;
    }
    int v50 = v48[170] - v327;
    int v51 = *(unsigned __int8 *)(v329 + 640);
    if (v51 == 3 && (int)v45 >= 1) {
      break;
    }
    if (*(unsigned char *)(*(void *)(a1 + 88) + 523)) {
      BOOL v53 = 1;
    }
    else {
      BOOL v53 = v51 == 3;
    }
    if (!v53) {
      goto LABEL_75;
    }
    int v54 = v48[60];
LABEL_69:
    int v55 = *(_DWORD *)(v49 + 248);
    if (v55 <= 0) {
      int v55 = *(_DWORD *)(v49 + 240);
    }
    if (v54 == v55)
    {
      int v56 = *(_DWORD *)(v49 + 252);
      if (v56 <= 0) {
        int v56 = *(_DWORD *)(v49 + 244);
      }
      if (v48[61] == v56) {
        goto LABEL_75;
      }
    }
    uint64_t v60 = (v46 + 1);
    if ((int)v46 >= 1)
    {
      sub_1BBAE4284((uint64_t)v32, v50);
      char v316 = 1;
      goto LABEL_81;
    }
    uint64_t v62 = *v47;
    if (*v47) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
    }
    CFTypeID v63 = &time[16 * v45];
    CFNumberRef v59 = (std::__shared_weak_count *)v63[1];
    ++v45;
    *CFTypeID v63 = v48;
    v63[1] = v62;
    if (!v59) {
      goto LABEL_81;
    }
LABEL_78:
    sub_1BB9C09B4(v59);
LABEL_81:
    uint64_t v46 = v60;
LABEL_82:
    ++v44;
    uint64_t v61 = (int)v31[1];
    if (v44 < v61)
    {
      v47 += 2;
      if ((int)v45 < v42) {
        continue;
      }
    }
    if ((int)v61 > (int)v44) {
      goto LABEL_95;
    }
    int v69 = v327;
    if ((v316 & 1) == 0)
    {
      int v66 = 0;
      goto LABEL_112;
    }
LABEL_105:
    uint64_t v70 = *(void *)(v329 + 2688);
    sub_1BBAE43E8((uint64_t)v32, 0);
    *(unsigned char *)(v70 + 20) = 0;
    uint64_t v71 = *(void *)(v329 + 40);
    uint64_t v72 = *(unsigned int *)(v71 + 260);
    if (v72)
    {
      uint64_t v73 = 0;
      CFNumberRef v74 = *(unsigned __int8 **)(v71 + 264);
      while (!sub_1BBAE432C(v32, v74))
      {
        ++v73;
        v74 += 248;
        if (v72 == v73) {
          goto LABEL_109;
        }
      }
      *(_DWORD *)(v70 + 272) = v73;
      int v66 = 1;
      *(unsigned char *)(v70 + 20) = 1;
    }
    else
    {
LABEL_109:
      int v66 = 1;
    }
LABEL_111:
    int v69 = v327;
LABEL_112:
    LODWORD(v75) = v31[3];
    if ((int)v75 < 1 || (int)v45 >= v42)
    {
      LODWORD(v77) = 0;
      int v78 = 0;
LABEL_144:
      uint64_t v91 = v329;
      if ((int)v77 >= (int)v75)
      {
        if ((v66 | v78))
        {
LABEL_150:
          uint64_t v90 = sub_1BBA1CEF4(v31, *(void *)(v329 + 744), *(unsigned char **)(v329 + 1112), *(void *)(v329 + 1128), *(_DWORD *)(*(void *)(v329 + 608) + 680), *(unsigned char *)(*(void *)(v329 + 40) + 196) + 4);
          if (v90) {
            goto LABEL_188;
          }
        }
        if ((int)v45 >= *(_DWORD *)(a1 + 264))
        {
          uint64_t v90 = 4294954385;
          goto LABEL_188;
        }
        if ((int)v45 < 1)
        {
          uint64_t v90 = 0;
LABEL_252:
          if ((*(unsigned char *)(v329 + 640) & 0xFE) == 2
            && *(int *)(*(void *)(a1 + 88) + 512) <= 1
            && sub_1BBA78A28(a1, v329, *(void *)(a1 + 864)))
          {
            if (dword_1E9F80A90 >= 1)
            {
              fwrite("DPB error is found\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)CMTime buf = 0;
                _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "DPB error is found\n", buf, 2u);
              }
            }
            sub_1BBA70120(a1, v69);
            sub_1BBA1F1B4(*(void *)(v329 + 744), v69);
          }
          goto LABEL_188;
        }
        uint64_t v93 = 0;
        uint64_t v90 = 0;
        uint64_t v94 = a1 + 880;
        while (1)
        {
          __int16 v95 = &time[16 * v93];
          if (!*(void *)v95) {
            break;
          }
          uint64_t v96 = *(void *)(a1 + 864);
          *(_DWORD *)(v96 + 4 * v93) = *(_DWORD *)(*(void *)v95 + 684);
          *(_DWORD *)(*(void *)(a1 + 848) + 4 * v93) = 0;
          uint64_t v97 = *(void *)(a1 + 88);
          if (!*(_DWORD *)(v97 + 504) && *(_DWORD *)(v97 + 508) == 1)
          {
            *(_DWORD *)(v94 + 80 * v93 + 24) = *(_DWORD *)(v96 + 4 * v93);
            if (*(unsigned char *)(v329 + 532))
            {
              uint64_t v90 = sub_1BBA75668(a1, &time[16 * v93], (IOSurfaceID *)(v94 + 80 * v93));
              uint64_t v94 = a1 + 880;
            }
          }
          uint64_t v98 = (*(_DWORD *)(a1 + 2252) + 1);
          uint64_t v99 = 900;
          do
          {
            *(unsigned char *)(a1 + v99) = 0;
            v99 += 80;
            --v98;
          }
          while (v98);
          uint64_t v100 = *(void *)(v329 + 592);
          if (*(unsigned char *)(v100 + 136))
          {
            signed int v101 = *(_DWORD *)(v100 + 248);
            if (v101 <= 0) {
              signed int v101 = *(_DWORD *)(v100 + 240);
            }
            signed int v102 = *(_DWORD *)(v100 + 252);
            if (v102 <= 0) {
              signed int v102 = *(_DWORD *)(v100 + 244);
            }
            int v103 = *(_DWORD *)(v100 + 276);
            if (*(_DWORD *)(*(void *)v95 + 240) == v101 && *(_DWORD *)(*(void *)v95 + 244) == v102)
            {
              int v69 = v327;
            }
            else
            {
              *(_DWORD *)(*(void *)(a1 + 848) + 4 * v93) = 1;
              if (!v312)
              {
                (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
                uint64_t v94 = a1 + 880;
              }
              uint64_t v104 = 0;
              uint64_t v105 = 904;
              while (*(_DWORD *)(a1 + v105) != *(_DWORD *)(*(void *)(a1 + 864) + 4 * v93))
              {
                ++v104;
                v105 += 80;
                if (*(_DWORD *)(a1 + 2252) + 1 == v104) {
                  goto LABEL_186;
                }
              }
              uint64_t v106 = *(void *)v95;
              if (*(_DWORD *)(*(void *)v95 + 248) != v101 || *(_DWORD *)(v106 + 252) != v102)
              {
                if (*(unsigned char *)(a1 + 154))
                {
                  *(unsigned char *)(a1 + 152) = 1;
                  *(unsigned char *)(v94 + 80 * v104 + 20) = 1;
                }
                else
                {
                  uint64_t v90 = sub_1BBA7893C((_DWORD *)a1, (_DWORD *)(v94 + 80 * v104), v103, *(_DWORD *)(*(void *)v95 + 240), *(_DWORD *)(*(void *)v95 + 244), v101, v102);
                  if (v90)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      int v306 = *(_DWORD *)(*(void *)v95 + 8);
                      *(_DWORD *)CMTime buf = 67109120;
                      int v336 = v306;
                      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to scale reference %d\n", buf, 8u);
                    }
                    goto LABEL_188;
                  }
                  uint64_t v106 = *(void *)v95;
                  uint64_t v94 = a1 + 880;
                }
                *(_DWORD *)(v106 + 248) = v101;
                *(_DWORD *)(v106 + 252) = v102;
                uint64_t v107 = v94 + 80 * v104;
                *(_WORD *)(v107 + 50) = v101;
                *(_WORD *)(v107 + 54) = v102;
              }
              BOOL v312 = 1;
              int v69 = v327;
            }
          }
          if (++v93 == v45) {
            goto LABEL_252;
          }
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_186;
        }
        *(_WORD *)CMTime buf = 0;
        long long v235 = MEMORY[0x1E4F14500];
        long long v236 = "Cannot find reference frame\n";
      }
      else
      {
        uint64_t v92 = (uint64_t)&v31[4 * v77 + 134];
        while (*(void *)v92)
        {
          sub_1BBAE642C((uint64_t)theDicta, *(_DWORD *)(*(void *)v92 + 680), __sza);
          LODWORD(v77) = v77 + 1;
          v92 += 16;
          if (v31[3] <= (int)v77) {
            goto LABEL_150;
          }
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_186;
        }
        *(_WORD *)CMTime buf = 0;
        long long v235 = MEMORY[0x1E4F14500];
        long long v236 = "Cannot find reference frame from long-term RPS\n";
      }
      _os_log_error_impl(&dword_1BB9B9000, v235, OS_LOG_TYPE_ERROR, v236, buf, 2u);
LABEL_186:
      uint64_t v90 = 4294954394;
      goto LABEL_188;
    }
    int v317 = v66;
    uint64_t v77 = 0;
    int v78 = 0;
    CFNumberRef v79 = (uint64_t *)(v31 + 136);
    while (1)
    {
      CFTypeID v80 = (_DWORD *)*(v79 - 1);
      if (!v80)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_142;
        }
        *(_WORD *)CMTime buf = 0;
        CFNumberRef v64 = MEMORY[0x1E4F14500];
        CFNumberRef v65 = "Cannot find reference frame from long-term RPS\n";
LABEL_379:
        _os_log_error_impl(&dword_1BB9B9000, v64, OS_LOG_TYPE_ERROR, v65, buf, 2u);
        goto LABEL_142;
      }
      uint64_t v81 = *(void *)(v329 + 592);
      if (!*(unsigned char *)(v81 + 136) || !*(unsigned char *)(*(void *)(a1 + 88) + 523)) {
        goto LABEL_127;
      }
      int v82 = *(_DWORD *)(v81 + 248);
      if (v82 <= 0) {
        int v82 = *(_DWORD *)(v81 + 240);
      }
      if (v80[60] != v82) {
        goto LABEL_131;
      }
      int v83 = *(_DWORD *)(v81 + 252);
      if (v83 <= 0) {
        int v83 = *(_DWORD *)(v81 + 244);
      }
      if (v80[61] != v83)
      {
LABEL_131:
        uint64_t v87 = (v46 + 1);
        if ((int)v46 >= 1)
        {
          sub_1BBAE642C((uint64_t)theDicta, v80[170], __sza);
          int v78 = 1;
          goto LABEL_133;
        }
        uint64_t v88 = *v79;
        if (*v79) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v89 = &time[16 * v45];
        CFTypeID v86 = (std::__shared_weak_count *)v89[1];
        ++v45;
        *uint64_t v89 = v80;
        v89[1] = v88;
        if (!v86) {
          goto LABEL_133;
        }
      }
      else
      {
LABEL_127:
        uint64_t v84 = *v79;
        if (*v79) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
        }
        CFNumberRef v85 = &time[16 * v45];
        CFTypeID v86 = (std::__shared_weak_count *)v85[1];
        ++v45;
        *CFNumberRef v85 = v80;
        v85[1] = v84;
        uint64_t v87 = v46;
        if (!v86) {
          goto LABEL_134;
        }
      }
      sub_1BB9C09B4(v86);
LABEL_133:
      uint64_t v46 = v87;
LABEL_134:
      ++v77;
      uint64_t v75 = (int)v31[3];
      if (v77 < v75)
      {
        v79 += 2;
        if ((int)v45 < v42) {
          continue;
        }
      }
      int v69 = v327;
      int v66 = v317;
      goto LABEL_144;
    }
  }
  int v54 = v48[60];
  if (v54 == *(_DWORD *)(*(void *)time + 240) && v48[61] == *(_DWORD *)(*(void *)time + 244)) {
    goto LABEL_69;
  }
  sub_1BBAE4284((uint64_t)v32, v50);
  uint64_t v45 = 1;
  int v67 = v327;
  if (v31[1] <= (int)v44) {
    goto LABEL_105;
  }
LABEL_96:
  uint64_t v68 = (uint64_t)&v31[4 * v44 + 6];
  while (*(void *)v68)
  {
    sub_1BBAE4284((uint64_t)v32, *(_DWORD *)(*(void *)v68 + 680) - v67);
    LODWORD(v44) = v44 + 1;
    v68 += 16;
    if (v31[1] <= (int)v44) {
      goto LABEL_105;
    }
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CMTime buf = 0;
    CFNumberRef v64 = MEMORY[0x1E4F14500];
    CFNumberRef v65 = "Cannot find reference frame from short-term RPS\n";
    goto LABEL_379;
  }
LABEL_142:
  uint64_t v90 = 4294954394;
  uint64_t v91 = v329;
LABEL_188:
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    int v109 = *(std::__shared_weak_count **)&time[i];
    if (v109) {
      sub_1BB9C09B4(v109);
    }
  }
  if (v90)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CMTime time = 0;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "PrepareReference failed\n", time, 2u);
    }
    goto LABEL_195;
  }
  if (v315[156] && v315[11] == v315[24]) {
    imageBuffer = (__CVBuffer *)v315[156];
  }
  else {
    imageBuffer = (__CVBuffer *)v315[154];
  }
  *(CMTime *)CMTime time = v332;
  CMTimeGetSeconds((CMTime *)time);
  kdebug_trace();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v309 = *(void *)(v91 + 2688);
  uint64_t v111 = *(unsigned __int8 *)(v91 + 640);
  uint64_t v112 = *(void *)(a1 + 80);
  uint64_t v313 = *(unsigned __int8 **)(v112 + 12704);
  int v113 = *(std::__shared_weak_count **)(v112 + 12712);
  if (v113) {
    atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v318 = v113;
  uint64_t v114 = *(void *)(v91 + 592);
  if (*(unsigned char *)(v114 + 136))
  {
    int v115 = *(_DWORD *)(v114 + 248);
    if (v115 <= 0) {
      int v115 = *(_DWORD *)(v114 + 240);
    }
    int v116 = *(_DWORD *)(v114 + 252);
    if (v116 <= 0) {
      int v116 = *(_DWORD *)(v114 + 244);
    }
  }
  else
  {
    int v115 = *(_DWORD *)(v114 + 276);
    int v116 = *(_DWORD *)(v114 + 280);
  }
  if (*(unsigned char *)(a1 + 2545))
  {
    __szb = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    theDictb = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else
  {
    theDictb = 0;
    __szb = 0;
  }
  if (v111 >= 5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CMTime time = 0;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Frame type not supported\n", time, 2u);
    }
    goto LABEL_223;
  }
  *(_DWORD *)CMTime time = dword_1BBB7A304[v111];
  CFNumberRef v117 = CFNumberCreate(0, kCFNumberSInt32Type, time);
  if (v117)
  {
    CFDictionarySetValue(Mutable, @"UserFrameType", v117);
    CFRelease(v117);
  }
  int v310 = v111;
  if (*(_DWORD *)(a1 + 148) == 1)
  {
    unsigned int v118 = *(_DWORD *)(v91 + 772) - 3;
    if (v118 > 3) {
      uint64_t v119 = 0;
    }
    else {
      uint64_t v119 = *(void *)(v91 + 8 * v118 + 2256);
    }
    unsigned int v130 = *(unsigned __int8 *)(v91 + 640);
    if (qword_1EC027190 != -1) {
      dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
    }
    uint64_t v131 = *(void *)(a1 + 2296);
    if (*(void *)(a1 + 2304) != v131)
    {
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      unint64_t v134 = 0;
      int v135 = *(_DWORD *)(v329 + 4 * *(int *)(v329 + 772) + 2276);
      if (dword_1EC02719C > 8 || v130 > 1) {
        __int16 v137 = 2;
      }
      else {
        __int16 v137 = 0;
      }
      do
      {
        CFNumberRef v138 = (int *)(*(void *)(a1 + 2344) + v132);
        int v139 = *v138;
        if (*v138 >= *(_DWORD *)(a1 + 100) || (int v140 = v138[1], v140 >= *(_DWORD *)(a1 + 104)))
        {
          *(_WORD *)(v131 + v133) = *(_WORD *)(v131 + v133) & 0xFFFD | v137;
          uint64_t v144 = *(void *)(a1 + 2296);
          CFNumberRef v141 = (_WORD *)(v144 + 16 * v134);
          __int16 v142 = *(_WORD *)(v144 + v133) & 0x3FF;
          __int16 v143 = -13312;
        }
        else
        {
          CFNumberRef v141 = (_WORD *)(v131 + v133);
          __int16 v142 = *(unsigned __int8 *)(v119 + v139 + v140 * v135) << 10;
          __int16 v143 = *v141 & 0x3FF;
        }
        *CFNumberRef v141 = v142 | v143;
        ++v134;
        uint64_t v131 = *(void *)(a1 + 2296);
        v133 += 16;
        v132 += 8;
      }
      while (v134 < (*(void *)(a1 + 2304) - v131) >> 4);
    }
    goto LABEL_307;
  }
  int v122 = *(_DWORD *)(v91 + 444);
  if (v122 == 1 || v122 == 6 && *(float *)(v329 + 2720) < (float)(int)(*(float *)(v329 + 2720) + 0.5))
  {
    char v123 = *(unsigned char *)(*(void *)(v329 + 40) + 2009);
    uint64_t v124 = *(void *)(v329 + 592);
    if (*(unsigned char *)(v124 + 136))
    {
      int v125 = *(_DWORD *)(v124 + 248);
      if (v125 <= 0) {
        int v125 = *(_DWORD *)(v124 + 240);
      }
      int v126 = -1 << v123;
      int v127 = ~(-1 << v123);
      int v128 = (v125 + v127) & (-1 << v123);
      int v129 = *(_DWORD *)(v124 + 252);
      if (v129 <= 0) {
        int v129 = *(_DWORD *)(v124 + 244);
      }
    }
    else
    {
      int v126 = -1 << v123;
      int v127 = ~(-1 << v123);
      int v128 = (*(_DWORD *)(v124 + 276) + v127) & (-1 << v123);
      int v129 = *(_DWORD *)(v124 + 280);
    }
    uint64_t v145 = *(void *)(a1 + 2320);
    if (*(void *)(a1 + 2328) != v145)
    {
      unint64_t v146 = 0;
      int v147 = v128 >> v123;
      int v148 = ((v129 + v127) & v126) >> v123;
      uint64_t v149 = *(void *)(v329 + 2256);
      uint64_t v150 = *(void *)(v329 + 2264);
      uint64_t v151 = *(void *)(v329 + 2272);
      int v152 = *(unsigned __int8 *)(v329 + 640);
      uint64_t v153 = 9;
      uint64_t v154 = 13;
      while (1)
      {
        uint64_t v155 = (int *)(*(void *)(a1 + 2368) + 8 * v146);
        int v156 = *v155;
        if (*v155 < *(_DWORD *)(a1 + 112))
        {
          int v157 = v155[1];
          if (v157 < *(_DWORD *)(a1 + 116)) {
            break;
          }
        }
        if (*(unsigned char *)(*(void *)(a1 + 88) + 247)) {
          BOOL v177 = 0;
        }
        else {
          BOOL v177 = v152 == 2;
        }
        if (v177) {
          *(_DWORD *)(v145 + 32 * v146 + 4) = 0x1FFFFF;
        }
        int v178 = 0;
        *(unsigned char *)(v145 + 32 * v146 + 8) = 51;
        char v179 = 1;
        do
        {
          uint64_t v180 = 0;
          char v181 = v179;
          do
            *(unsigned char *)(*(void *)(a1 + 2320) + v153 + v178 + v180++) = 51;
          while (v180 != 2);
          char v179 = 0;
          v178 += 2;
        }
        while ((v181 & 1) != 0);
        int v182 = 0;
        uint64_t v183 = v154;
        do
        {
          for (uint64_t j = 0; j != 4; ++j)
            *(unsigned char *)(*(void *)(a1 + 2320) + v183 + j) = 51;
          ++v182;
          v183 += 4;
        }
        while (v182 != 4);
        uint64_t v145 = *(void *)(a1 + 2320);
LABEL_306:
        ++v146;
        v153 += 32;
        v154 += 32;
        if (v146 >= (*(void *)(a1 + 2328) - v145) >> 5) {
          goto LABEL_307;
        }
      }
      int v158 = 0;
      int v159 = 0;
      int v160 = *(_DWORD *)(a1 + 124);
      int v161 = *(_DWORD *)(a1 + 128) * 2 * v157;
      *(unsigned char *)(v145 + 32 * v146 + 8) = *(unsigned char *)(v151 + v156 + *(_DWORD *)(a1 + 132) * v157);
      uint64_t v162 = v150 + v161 + 2 * v156;
      char v163 = 1;
      while (2)
      {
        uint64_t v164 = 0;
        int v165 = 0;
        char v166 = v163;
LABEL_266:
        int v167 = *(_DWORD *)(a1 + 128);
        if ((v165 | (2 * v156)) >= v167)
        {
          uint64_t v168 = *(void *)(a1 + 2320);
        }
        else
        {
          uint64_t v168 = *(void *)(a1 + 2320);
          if ((v159 | (2 * v157)) < *(_DWORD *)(a1 + 140))
          {
            char v169 = *(unsigned char *)(v162 + v165 + v167 * v159);
            goto LABEL_271;
          }
        }
        char v169 = 51;
LABEL_271:
        *(unsigned char *)(v168 + v153 + v158 + v164++) = v169;
        int v165 = 1;
        if (v164 == 2)
        {
          char v163 = 0;
          v158 += 2;
          int v159 = 1;
          if ((v166 & 1) == 0)
          {
            int v170 = 0;
            int v171 = 0;
            uint64_t v172 = v149 + v160 * 4 * v157 + 4 * v156;
            do
            {
              uint64_t v173 = 0;
              do
              {
                int v174 = *(_DWORD *)(a1 + 124);
                if (4 * v156 + (int)v173 >= v174 || v171 + 4 * v157 >= *(_DWORD *)(a1 + 136)) {
                  char v175 = 51;
                }
                else {
                  char v175 = *(unsigned char *)(v172 + (int)v173 + v171 * v174);
                }
                *(unsigned char *)(*(void *)(a1 + 2320) + v154 + v170 + v173++) = v175;
              }
              while (v173 != 4);
              v170 += 4;
              ++v171;
            }
            while (v171 != 4);
            uint64_t v145 = *(void *)(a1 + 2320);
            *(_DWORD *)(v145 + 32 * v146) = 0;
            if (*(unsigned char *)(*(void *)(a1 + 88) + 247)) {
              BOOL v176 = 0;
            }
            else {
              BOOL v176 = v152 == 2;
            }
            if (v176 && (v156 >= v147 || v157 >= v148)) {
              *(_DWORD *)(v145 + 32 * v146 + 4) = 0x1FFFFF;
            }
            else {
              *(_DWORD *)(v145 + 32 * v146 + 4) = 0;
            }
            LODWORD(v111) = v310;
            goto LABEL_306;
          }
          continue;
        }
        goto LABEL_266;
      }
    }
  }
LABEL_307:
  uint64_t v185 = *(const UInt8 **)(a1 + 2392);
  uint64_t v91 = v329;
  if (v185)
  {
    int v186 = *(_DWORD *)(*(void *)(v329 + 584) + 3688);
    if (v186 == 1
      || !v186
      && ((int v187 = *(_DWORD *)(v329 + 444), v187 == 1)
       || v187 == 6 && *(float *)(v329 + 2720) < (float)(int)(*(float *)(v329 + 2720) + 0.5)))
    {
      CFDataRef v188 = CFDataCreateWithBytesNoCopy(0, v185, *(void *)(a1 + 2408), (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44F80], v188);
      CFRelease(v188);
    }
  }
  CFMutableArrayRef value = (void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(Mutable, @"AttachDPB", (const void *)*MEMORY[0x1E4F1CFD0]);
  *(_DWORD *)CMTime time = v116 | (v115 << 16);
  CFNumberRef v189 = CFNumberCreate(0, kCFNumberSInt32Type, time);
  if (v189)
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44F88], v189);
    CFRelease(v189);
  }
  *(_DWORD *)CMTime time = 0;
  CFNumberRef v190 = CFNumberCreate(0, kCFNumberSInt32Type, time);
  if (v190)
  {
    CFDictionaryAddValue(Mutable, @"VRAActualDimension", v190);
    CFRelease(v190);
  }
  *(_DWORD *)CMTime time = *(_DWORD *)(*(void *)(a1 + 88) + 180);
  CFNumberRef v191 = CFNumberCreate(0, kCFNumberSInt32Type, time);
  if (v191)
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44810], v191);
    CFRelease(v191);
  }
  if (!*(unsigned char *)(a1 + 152) || *(int *)(v329 + 644) < 1)
  {
LABEL_329:
    if ((v111 & 0xFE) == 2)
    {
      uint64_t v195 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v196 = 0;
      char v197 = 1;
      uint64_t v198 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      CFNumberRef v199 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      do
      {
        char v200 = v197;
        if ((*(_DWORD *)(*(void *)(a1 + 864) + 4 * v196) & 0x80000000) == 0)
        {
          CFNumberRef v201 = CFDictionaryCreateMutable(0, 0, v198, v199);
          *(_DWORD *)CMTime time = *(_DWORD *)(*(void *)(a1 + 864) + 4 * v196);
          CFNumberRef v202 = CFNumberCreate(0, kCFNumberSInt32Type, time);
          if (v202)
          {
            CFDictionarySetValue(v201, @"ReferenceFrameNumDriver", v202);
            CFRelease(v202);
          }
          *(_DWORD *)CMTime time = *(_DWORD *)(*(void *)(a1 + 848) + 4 * v196);
          CFNumberRef v203 = CFNumberCreate(0, kCFNumberSInt32Type, time);
          if (v203)
          {
            CFDictionarySetValue(v201, @"ReferenceRVRAIndex", v203);
            CFRelease(v203);
          }
          CFArrayAppendValue(v195, v201);
          CFRelease(v201);
        }
        char v197 = 0;
        uint64_t v196 = 1;
      }
      while ((v200 & 1) != 0);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44F38], v195);
      uint64_t v91 = v329;
      LODWORD(v111) = v310;
      CFRelease(v195);
    }
    uint64_t v204 = *(void *)(a1 + 88);
    if (*(unsigned char *)(v204 + 590))
    {
      *(_DWORD *)CMTime time = 6;
      CFNumberRef v205 = CFNumberCreate(0, kCFNumberSInt32Type, time);
      if (v205)
      {
        CFDictionarySetValue(Mutable, @"RoundingOffsetMode", v205);
        CFRelease(v205);
      }
      int16x8_t v206 = vdupq_n_s16(0x2AAu);
      *(int16x8_t *)(a1 + 2416) = v206;
      *(_OWORD *)(a1 + 2432) = xmmword_1BBB6F9A0;
      *(_OWORD *)(a1 + 2448) = xmmword_1BBB6F9B0;
      *(void *)(a1 + 2464) = v206.i64[0];
      *(_DWORD *)(a1 + 2472) = 22413654;
      CFDataRef v207 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)(a1 + 2416), 72, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      CFDictionaryAddValue(Mutable, @"RoundingOffsets", v207);
      CFRelease(v207);
      uint64_t v204 = *(void *)(a1 + 88);
    }
    if (*(unsigned char *)(v204 + 585))
    {
      uint64_t v208 = *(void *)(v91 + 2688);
      int v209 = *(unsigned __int8 *)(v208 + 546);
      if (*(unsigned char *)(v208 + 546))
      {
        int v209 = *(char *)(v208 + 549);
        int v210 = *(char *)(v208 + 548);
      }
      else
      {
        int v210 = 0;
      }
      if (*(_DWORD *)(a1 + 148) == 1)
      {
        *(_DWORD *)CMTime time = v209;
        CFNumberRef v211 = CFNumberCreate(0, kCFNumberSInt32Type, time);
        if (v211)
        {
          CFDictionarySetValue(Mutable, @"SliceAlphaC0OffsetDiv2", v211);
          CFRelease(v211);
        }
        *(_DWORD *)CMTime time = v210;
        CFNumberRef v212 = CFNumberCreate(0, kCFNumberSInt32Type, time);
        if (v212)
        {
LABEL_355:
          CFDictionarySetValue(Mutable, @"SliceBetaOffsetDiv2", v212);
          CFRelease(v212);
        }
      }
      else
      {
        *(_DWORD *)CMTime time = v209;
        CFNumberRef v213 = CFNumberCreate(0, kCFNumberSInt32Type, time);
        if (v213)
        {
          CFDictionarySetValue(Mutable, @"SliceTcOffsetDiv2", v213);
          CFRelease(v213);
        }
        *(_DWORD *)CMTime time = v210;
        CFNumberRef v212 = CFNumberCreate(0, kCFNumberSInt32Type, time);
        if (v212) {
          goto LABEL_355;
        }
      }
    }
    if (*(unsigned char *)(a1 + 2545))
    {
      *(_DWORD *)CMTime time = 0;
      CFAllocatorRef v214 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberRef v215 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, time);
      if (!v215) {
        goto LABEL_223;
      }
      *(_DWORD *)CMTime buf = 1;
      CFNumberRef v216 = CFNumberCreate(v214, kCFNumberSInt32Type, buf);
      CFAllocatorRef v217 = (const void *)*MEMORY[0x1E4F44F20];
      CFDictionarySetValue(__szb, (const void *)*MEMORY[0x1E4F44F20], v215);
      CFDictionarySetValue(theDictb, v217, v216);
      CFRelease(v215);
      CFRelease(v216);
    }
    else if (*(unsigned char *)(*(void *)(a1 + 88) + 582))
    {
      *(_DWORD *)CMTime time = *v313;
      CFNumberRef v218 = CFNumberCreate(0, kCFNumberSInt32Type, time);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44F20], v218);
      CFRelease(v218);
    }
    uint64_t v219 = *(void *)(a1 + 88);
    if (*(unsigned char *)(v219 + 582))
    {
      int v220 = *(_DWORD *)(v219 + 432);
      uint64_t v221 = *(void *)(a1 + 80);
      if (v220)
      {
        int v222 = *(_DWORD *)(v221 + 3348) + 1;
        BOOL v223 = -v222 < 0;
        int v224 = -v222 & 0x3F;
        int v225 = v222 & 0x3F;
        if (!v223) {
          int v225 = -v224;
        }
        *(_DWORD *)CMTime time = v225;
        CFNumberRef v226 = CFNumberCreate(0, kCFNumberSInt32Type, time);
        if (v226) {
          goto LABEL_388;
        }
      }
      else if (*(_DWORD *)(v221 + 1008) == 248)
      {
        unsigned int v227 = *(_DWORD *)(v91 + 2336);
        if (v227 + 1 >= 0xCA)
        {
          if (v227 >= 0x12D) {
            char v228 = v227 < 0x191;
          }
          else {
            char v228 = 2;
          }
        }
        else
        {
          char v228 = 3;
        }
        *(_DWORD *)CMTime time = (*(_DWORD *)(v221 + 3348) + v228) & 0x3F;
        CFNumberRef v226 = CFNumberCreate(0, kCFNumberSInt32Type, time);
        if (v226)
        {
LABEL_388:
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44F20], v226);
          CFRelease(v226);
        }
      }
      else if (*(unsigned char *)(v221 + 1144))
      {
        int v229 = *(_DWORD *)(v221 + 1148);
        if (!*(_DWORD *)(*(void *)(v91 + 3008) + 72))
        {
          int v229 = (v229 + 1) % 5;
          *(_DWORD *)(v221 + 1148) = v229;
        }
        int v230 = v229 + *(_DWORD *)(v221 + 3348);
        int v231 = v230 & 0x3F;
        int v232 = -v230;
        BOOL v223 = v232 < 0;
        int v233 = v232 & 0x3F;
        int v234 = v223 ? v231 : -v233;
        *(_DWORD *)CMTime time = v234;
        CFNumberRef v226 = CFNumberCreate(0, kCFNumberSInt32Type, time);
        if (v226) {
          goto LABEL_388;
        }
      }
    }
    if (v313[17] && v111 == 2 && *(unsigned char *)(*(void *)(a1 + 88) + 582))
    {
      int v237 = *(char *)(v309 + 500);
      long long v238 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int v239 = *(unsigned __int8 *)(v309 + 540);
      int v240 = *(char *)(v309 + 541) + v239;
      int v241 = 1 << (*(unsigned char *)(v309 + 541) + v239);
      *(_DWORD *)CMTime time = 1 << v239;
      *(_DWORD *)&time[4] = v241;
      *(_DWORD *)&time[8] = v241;
      *(_DWORD *)CMTime buf = v239;
      CFNumberRef v242 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v242)
      {
        CFDictionarySetValue(v238, @"WeightData_LumaLog2WeightDenom", v242);
        CFRelease(v242);
      }
      *(_DWORD *)CMTime buf = v240;
      CFNumberRef v243 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v243)
      {
        CFDictionarySetValue(v238, @"WeightData_ChromaLog2WeightDenom", v243);
        CFRelease(v243);
      }
      uint64_t v244 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      v307 = v238;
      size_t v245 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v246 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (v237 >= 1)
      {
        uint64_t v247 = 0;
        uint64_t v314 = v237;
        uint64_t v248 = v309;
        do
        {
          uint64_t v249 = 0;
          int v250 = *(_DWORD *)&time[4 * v247];
          do
          {
            uint64_t v251 = v248 + v249;
            BOOL v252 = v250 != *(__int16 *)(v248 + v249 + 736) || *(_WORD *)(v251 + 640) != 0;
            buf[0] = v252;
            CFNumberRef v253 = CFNumberCreate(0, kCFNumberCharType, buf);
            if (v253)
            {
              CFArrayAppendValue(v244, v253);
              CFRelease(v253);
            }
            *(_DWORD *)CMTime buf = *(__int16 *)(v251 + 736);
            CFNumberRef v254 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
            if (v254)
            {
              CFArrayAppendValue(v245, v254);
              CFRelease(v254);
            }
            *(_DWORD *)CMTime buf = *(__int16 *)(v248 + v249 + 640);
            CFNumberRef v255 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
            if (v255)
            {
              CFArrayAppendValue(v246, v255);
              CFRelease(v255);
            }
            v249 += 2;
          }
          while (v249 != 6);
          ++v247;
          v248 += 6;
        }
        while (v247 != v314);
      }
      CFDictionarySetValue(v307, @"WeightData_WeightFlagArray", v244);
      CFDictionarySetValue(v307, @"WeightData_Weight", v245);
      CFDictionarySetValue(v307, @"WeightData_Offset", v246);
      CFRelease(v244);
      CFRelease(v245);
      CFRelease(v246);
      CFDictionarySetValue(Mutable, @"WeightedPredictionInfo", v307);
      CFRelease(v307);
      uint64_t v91 = v329;
      LODWORD(v111) = v310;
    }
    int v256 = (const void *)*MEMORY[0x1E4F44F70];
    double v257 = *(float *)(v91 + 2720) + 0.5;
    if (*(unsigned char *)(a1 + 2545))
    {
      *(_DWORD *)CMTime time = (int)v257;
      CFNumberRef v258 = CFNumberCreate(0, kCFNumberSInt32Type, time);
      if (v258)
      {
        CFDictionarySetValue(__szb, v256, v258);
        CFRelease(v258);
      }
      *(_DWORD *)CMTime time = (int)(*(float *)(v91 + 2724) + 0.5);
      CFNumberRef v259 = CFNumberCreate(0, kCFNumberSInt32Type, time);
      if (v259)
      {
        CFDictionarySetValue(theDictb, v256, v259);
        CFRelease(v259);
      }
    }
    else
    {
      *(_DWORD *)CMTime time = (int)v257 + 6 * *(unsigned __int8 *)(*(void *)(v91 + 40) + 2000) - 48;
      CFNumberRef v260 = CFNumberCreate(0, kCFNumberSInt32Type, time);
      if (v260)
      {
        CFDictionarySetValue(Mutable, v256, v260);
        CFRelease(v260);
      }
    }
    *(_DWORD *)CMTime time = *(_DWORD *)(*(void *)(v91 + 608) + 680);
    CFNumberRef v261 = CFNumberCreate(0, kCFNumberSInt32Type, time);
    if (v261)
    {
      CFDictionarySetValue(Mutable, @"POCLsb", v261);
      CFRelease(v261);
    }
    *(_DWORD *)CMTime time = *(_DWORD *)(*(void *)(v91 + 608) + 12);
    CFNumberRef v262 = CFNumberCreate(0, kCFNumberSInt32Type, time);
    if (v262)
    {
      CFDictionarySetValue(Mutable, @"TemporalID", v262);
      CFRelease(v262);
    }
    if (!*(_DWORD *)(*(void *)(v91 + 608) + 36))
    {
      int v263 = *(_DWORD *)(a1 + 148);
      if (v263 != 1)
      {
LABEL_426:
        if (v263 || !v111)
        {
          if (v263 == 1)
          {
            if (*(unsigned char *)(v91 + 3024)) {
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44EE8], value);
            }
            if ((*(unsigned char *)(*(void *)(v91 + 608) + 36) & 2) != 0)
            {
              CFDictionarySetValue(Mutable, @"MarkCurrentFrameAsLTR", value);
              int v268 = *(_DWORD *)(v91 + 432);
              if ((v268 & 0x80000000) == 0)
              {
                uint64_t v269 = *(void *)sub_1BBA1D644(*(void *)(v91 + 744), v268);
                if (v269) {
                  sub_1BBA788DC(Mutable, *(_DWORD *)(v269 + 684));
                }
              }
            }
          }
          int v120 = 0;
          uint64_t v265 = 0;
        }
        else
        {
          double v264 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t v265 = v264;
          if (*(unsigned char *)(v309 + 20))
          {
            int v266 = *(_DWORD *)(v309 + 272);
            CFDictionarySetValue(v264, @"ShortTermRefPicSetSPSFlag", value);
            *(_DWORD *)CMTime time = v266;
            CFNumberRef v267 = CFNumberCreate(0, kCFNumberSInt32Type, time);
            if (v267)
            {
              CFDictionarySetValue(v265, @"ShortTermRefPicSetIdx", v267);
              CFRelease(v267);
            }
            int v120 = 0;
          }
          else
          {
            int v288 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            int v120 = v288;
            uint64_t v289 = *(void *)(v91 + 1112);
            int v290 = *(unsigned __int8 *)(v289 + 163);
            if (*(unsigned char *)(v289 + 163)) {
              double v291 = value;
            }
            else {
              double v291 = (const void *)*MEMORY[0x1E4F1CFC8];
            }
            CFDictionarySetValue(v288, @"InterRefPicSetPredictionFlag", v291);
            if (v290)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)CMTime time = 0;
                _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "inter_ref_pic_set_prediction_flag is true. Not implemented yet.\n", time, 2u);
              }
              int v121 = -12910;
              if (!v265) {
                goto LABEL_450;
              }
LABEL_449:
              CFRelease(v265);
              goto LABEL_450;
            }
            int v292 = *(unsigned __int8 *)(v289 + 177);
            __int16 v293 = *(_WORD *)(v289 + 242);
            __int16 v294 = *(_WORD *)(v289 + 244);
            *(_DWORD *)CMTime time = *(unsigned __int8 *)(v289 + 176);
            CFNumberRef v295 = CFNumberCreate(0, kCFNumberSInt32Type, time);
            if (v295)
            {
              CFDictionarySetValue(v120, @"NumNegativePics", v295);
              CFRelease(v295);
            }
            *(_DWORD *)CMTime time = v292;
            CFNumberRef v296 = CFNumberCreate(0, kCFNumberSInt32Type, time);
            if (v296)
            {
              CFDictionarySetValue(v120, @"NumPositivePics", v296);
              CFRelease(v296);
            }
            int v297 = CFArrayCreateMutable(0, 16, MEMORY[0x1E4F1D510]);
            for (uint64_t k = 0; k != 32; k += 2)
            {
              *(_WORD *)CMTime time = *(_WORD *)(v289 + 178 + k);
              CFNumberRef v299 = CFNumberCreate(0, kCFNumberSInt16Type, time);
              if (v299)
              {
                CFArrayAppendValue(v297, v299);
                CFRelease(v299);
              }
            }
            CFDictionarySetValue(v120, @"DeltaPOCS0Minus1", v297);
            CFRelease(v297);
            *(_WORD *)CMTime time = v293;
            CFNumberRef v300 = CFNumberCreate(0, kCFNumberSInt16Type, time);
            if (v300)
            {
              CFDictionarySetValue(v120, @"UsedByCurrPicS0Flag", v300);
              CFRelease(v300);
            }
            BOOL v301 = CFArrayCreateMutable(0, 16, MEMORY[0x1E4F1D510]);
            uint64_t v302 = 0;
            uint64_t v303 = v289 + 210;
            do
            {
              *(_WORD *)CMTime time = *(_WORD *)(v303 + v302);
              CFNumberRef v304 = CFNumberCreate(0, kCFNumberSInt16Type, time);
              if (v304)
              {
                CFArrayAppendValue(v301, v304);
                CFRelease(v304);
              }
              v302 += 2;
            }
            while (v302 != 32);
            CFDictionarySetValue(v120, @"DeltaPOCS1Minus1", v301);
            CFRelease(v301);
            *(_WORD *)CMTime time = v294;
            CFNumberRef v305 = CFNumberCreate(0, kCFNumberSInt16Type, time);
            if (v305)
            {
              CFDictionarySetValue(v120, @"UsedByCurrPicS1Flag", v305);
              CFRelease(v305);
            }
            CFDictionarySetValue(v265, @"RPSData", v120);
            uint64_t v91 = v329;
          }
          CFDictionarySetValue(Mutable, @"RPSInfo", v265);
        }
        if (*(unsigned char *)(a1 + 154))
        {
          uint64_t v270 = *(unsigned char **)(v91 + 24);
          if (v270[80])
          {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44EA8], value);
            uint64_t v270 = *(unsigned char **)(v91 + 24);
          }
          if ((*(unsigned int (**)(unsigned char *))(*(void *)v270 + 24))(v270)) {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44DF0], value);
          }
        }
        if (*(unsigned char *)(a1 + 2545))
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44DE8], __szb);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44DC8], theDictb);
        }
        int v121 = 0;
        if (!v265) {
          goto LABEL_450;
        }
        goto LABEL_449;
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44F48], value);
    }
    int v263 = *(_DWORD *)(a1 + 148);
    goto LABEL_426;
  }
  uint64_t v192 = sub_1BBA7811C((_DWORD *)(a1 + 880), 0);
  uint64_t v193 = v192;
  if (!*(unsigned char *)(a1 + 2545))
  {
    if (!v192) {
      goto LABEL_223;
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44F68], v192);
LABEL_328:
    CFRelease(v193);
    goto LABEL_329;
  }
  if (v192)
  {
    int8x16_t v194 = (const void *)*MEMORY[0x1E4F44F68];
    CFDictionarySetValue(__szb, (const void *)*MEMORY[0x1E4F44F68], v192);
    CFRelease(v193);
    uint64_t v193 = sub_1BBA7811C((_DWORD *)(a1 + 880), 1u);
    if (v193)
    {
      CFDictionarySetValue(theDictb, v194, v193);
      goto LABEL_328;
    }
  }
LABEL_223:
  int v120 = 0;
  int v121 = -12910;
LABEL_450:
  if (__szb) {
    CFRelease(__szb);
  }
  if (theDictb) {
    CFRelease(theDictb);
  }
  if (v120) {
    CFRelease(v120);
  }
  if (v121 && Mutable) {
    CFRelease(Mutable);
  }
  if (v318) {
    sub_1BB9C09B4(v318);
  }
  if (Mutable)
  {
    if (*(_DWORD *)(a1 + 148))
    {
      CFDictionaryRef v271 = 0;
    }
    else
    {
      int v272 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v271 = v272;
      uint64_t v273 = *(void *)(a1 + 88);
      int v274 = *(_DWORD *)(v273 + 620);
      if (v274 == 1) {
        goto LABEL_475;
      }
      if (v274 != 2) {
        goto LABEL_476;
      }
      uint64_t v275 = *(void *)(v91 + 3008);
      unsigned int v276 = *(_DWORD *)(v275 + 76);
      uint64_t v277 = v275 + 976;
      uint64_t v278 = v275 + 120 * v276 + 136;
      if (v276 >= 7) {
        uint64_t v278 = 0;
      }
      double v279 = (double)(*(__int16 *)(v273 + 92) * *(__int16 *)(v273 + 90));
      uint64_t v280 = v276 == 9 ? v277 : v278;
      if (*(double *)(v280 + 8) * v279 > 125337600.0)
      {
LABEL_475:
        CFDictionarySetValue(v272, (const void *)*MEMORY[0x1E4F44A90], (const void *)*MEMORY[0x1E4F1CFD0]);
        char v281 = 1;
      }
      else
      {
LABEL_476:
        CFDictionarySetValue(v272, (const void *)*MEMORY[0x1E4F44A90], (const void *)*MEMORY[0x1E4F1CFC8]);
        char v281 = 0;
      }
      *(unsigned char *)(a1 + 2544) = v281;
      int v282 = *(void **)(a1 + 160);
      if (v282) {
        CFDictionaryApplyFunction(v271, (CFDictionaryApplierFunction)sub_1BBA78108, v282);
      }
    }
    *(CMTime *)CMTime time = v332;
    CMTimeGetSeconds((CMTime *)time);
    kdebug_trace();
    uint64_t v283 = *(void *)(a1 + 88);
    if (*(unsigned char *)(v283 + 231) || *(unsigned char *)(v283 + 232))
    {
      sub_1BBA3F68C(a1 + 8);
      uint64_t v283 = *(void *)(a1 + 88);
    }
    if (*(_DWORD *)(v283 + 512)) {
      *(unsigned char *)(v91 + 418) = *(unsigned char *)(v283 + 582);
    }
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 232), 0xFFFFFFFFFFFFFFFFLL);
    *(unsigned char *)(v91 + 568) = 0;
    *(void *)(v91 + 536) = 0;
    sub_1BBA3F68C(v91 + 536);
    *(CMTime *)CMTime time = v332;
    CMTimeGetSeconds((CMTime *)time);
    kdebug_trace();
    int v284 = *(OpaqueVTCompressionSession **)(a1 + 160);
    if (v284)
    {
      CMTime presentationTimeStamp = v332;
      CMTime duration = v332;
      uint64_t v90 = VTCompressionSessionEncodeFrame(v284, imageBuffer, &presentationTimeStamp, &duration, Mutable, (void *)v91, 0);
      if (v90)
      {
        if (dword_1E9F80A90 >= 1)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "VTCompressionSessionEncodeFrame failed, err: %d\n", v90);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime time = 67109120;
            *(_DWORD *)&time[4] = v90;
            _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VTCompressionSessionEncodeFrame failed, err: %d\n", time, 8u);
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 80))(a1, v91, v90, 0, 0);
        goto LABEL_496;
      }
    }
    else
    {
      uint64_t v285 = *(void *)(a1 + 80);
      double v286 = *(void (**)(void, void, uint64_t, __CVBuffer *, __CFDictionary *, const __CFDictionary *))(v285 + 1120);
      if (v286) {
        v286(*(void *)(v285 + 1136), v315[36], v91, imageBuffer, Mutable, v271);
      }
    }
    *(CMTime *)CMTime time = v332;
    CMTimeGetSeconds((CMTime *)time);
    kdebug_trace();
    uint64_t v287 = *(void *)(a1 + 88);
    if (*(unsigned char *)(v287 + 231) || *(unsigned char *)(v287 + 232)) {
      sub_1BBA3F6DC(a1 + 8);
    }
    uint64_t v90 = 0;
LABEL_496:
    CFRelease(Mutable);
    if (v271) {
      CFRelease(v271);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CMTime time = 0;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to create frame properties\n", time, 2u);
    }
    uint64_t v90 = 1;
  }
LABEL_195:
  if (v319) {
    sub_1BB9C09B4(v319);
  }
  if (v334) {
    sub_1BB9C09B4(v334);
  }
  return v90;
}

void sub_1BBA78024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18)
{
  if (a17) {
    sub_1BB9C09B4(a17);
  }
  if (a18) {
    sub_1BB9C09B4(a18);
  }
  BOOL v20 = *(std::__shared_weak_count **)(v18 - 152);
  if (v20) {
    sub_1BB9C09B4(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BBA78108()
{
  return VTCompressionSessionSetProperty();
}

__CFDictionary *sub_1BBA7811C(_DWORD *a1, unsigned int a2)
{
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeID v80 = a1;
  LODWORD(valuePtr[0]) = a1[340];
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44DF8], v5);
    CFRelease(v6);
  }
  LODWORD(valuePtr[0]) = v80[341];
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44E08], v7);
    CFRelease(v8);
  }
  LODWORD(valuePtr[0]) = v80[342];
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v9)
  {
    CFNumberRef v10 = v9;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44E00], v9);
    CFRelease(v10);
  }
  LODWORD(valuePtr[0]) = v80[343];
  CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v11)
  {
    CFNumberRef v12 = v11;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44E10], v11);
    CFRelease(v12);
  }
  int theDict = Mutable;
  CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  int v13 = (const void *)*MEMORY[0x1E4F1CFD0];
  int v14 = (const void *)*MEMORY[0x1E4F1CFC8];
  key = (void *)*MEMORY[0x1E4F44E40];
  uint64_t v70 = (void *)*MEMORY[0x1E4F44E48];
  int v69 = (void *)*MEMORY[0x1E4F44E70];
  uint64_t v68 = (void *)*MEMORY[0x1E4F44E60];
  int v67 = (void *)*MEMORY[0x1E4F44E58];
  int v78 = (void *)*MEMORY[0x1E4F44E80];
  uint64_t v77 = (void *)*MEMORY[0x1E4F44EA0];
  CFTypeID v76 = (void *)*MEMORY[0x1E4F44E88];
  int v66 = (void *)*MEMORY[0x1E4F44E90];
  CFNumberRef v65 = (void *)*MEMORY[0x1E4F44E98];
  uint64_t v84 = (const void *)*MEMORY[0x1E4F44E38];
  int v83 = (const void *)*MEMORY[0x1E4F44E20];
  int v82 = (const void *)*MEMORY[0x1E4F44E28];
  uint64_t v81 = (const void *)*MEMORY[0x1E4F44E30];
  uint64_t v75 = (void *)*MEMORY[0x1E4F44E78];
  int v15 = v80 + 18;
  CFNumberRef v74 = (void *)*MEMORY[0x1E4F44E50];
  uint64_t v16 = (8 * a2) | 4;
  unint64_t v17 = -1;
  uint64_t v72 = (void *)*MEMORY[0x1E4F44E68];
  uint64_t v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  char v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  uint64_t v73 = (const void *)*MEMORY[0x1E4F1CFD0];
  do
  {
    BOOL v20 = CFDictionaryCreateMutable(0, 0, v18, v19);
    size_t v21 = v20;
    if (*((unsigned char *)v15 - 52)) {
      uint64_t v22 = v13;
    }
    else {
      uint64_t v22 = v14;
    }
    CFDictionaryAddValue(v20, @"DelayedRVRAScale", v22);
    LODWORD(valuePtr[0]) = *(v15 - 12);
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v23)
    {
      CFNumberRef v24 = v23;
      CFDictionaryAddValue(v21, key, v23);
      CFRelease(v24);
    }
    LODWORD(valuePtr[0]) = *(v15 - 11);
    CFNumberRef v25 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v25)
    {
      CFNumberRef v26 = v25;
      CFDictionaryAddValue(v21, v70, v25);
      CFRelease(v26);
    }
    LODWORD(valuePtr[0]) = *(v15 - 14);
    CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v27)
    {
      CFNumberRef v28 = v27;
      CFDictionaryAddValue(v21, v69, v27);
      CFRelease(v28);
    }
    valuePtr[0] = *((void *)v15 - 4);
    CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
    if (v29)
    {
      CFNumberRef v30 = v29;
      CFDictionaryAddValue(v21, v68, v29);
      CFRelease(v30);
    }
    LODWORD(valuePtr[0]) = *(v15 - 10);
    CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v31)
    {
      CFNumberRef v32 = v31;
      CFDictionaryAddValue(v21, v67, v31);
      CFRelease(v32);
    }
    uint64_t v33 = CFDictionaryCreateMutable(0, 0, v18, v19);
    uint64_t v34 = v33;
    if (*(v15 - 4)) {
      uint64_t v35 = v13;
    }
    else {
      uint64_t v35 = v14;
    }
    CFDictionaryAddValue(v33, v78, v35);
    if (*(v15 - 3)) {
      int v36 = v13;
    }
    else {
      int v36 = v14;
    }
    CFDictionaryAddValue(v34, v77, v36);
    if (*(v15 - 1)) {
      int v37 = v13;
    }
    else {
      int v37 = v14;
    }
    CFDictionaryAddValue(v34, v76, v37);
    LODWORD(valuePtr[0]) = *(v15 - 2);
    CFNumberRef v38 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v38)
    {
      CFNumberRef v39 = v38;
      CFDictionaryAddValue(v34, v66, v38);
      CFRelease(v39);
    }
    LODWORD(valuePtr[0]) = *v15;
    CFNumberRef v40 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v40)
    {
      CFNumberRef v41 = v40;
      CFDictionaryAddValue(v34, v65, v40);
      CFRelease(v41);
    }
    int v42 = CFDictionaryCreateMutable(0, 0, v18, v19);
    LOWORD(valuePtr[0]) = *((_WORD *)v15 - 12);
    CFNumberRef v43 = CFNumberCreate(0, kCFNumberSInt16Type, valuePtr);
    if (v43)
    {
      CFNumberRef v44 = v43;
      CFDictionaryAddValue(v42, v84, v43);
      CFRelease(v44);
    }
    LOWORD(valuePtr[0]) = *((_WORD *)v15 - 10);
    CFNumberRef v45 = CFNumberCreate(0, kCFNumberSInt16Type, valuePtr);
    if (v45)
    {
      CFNumberRef v46 = v45;
      CFDictionaryAddValue(v42, v83, v45);
      CFRelease(v46);
    }
    LODWORD(valuePtr[0]) = *(_DWORD *)((char *)v15 + v16 - 76);
    CFNumberRef v47 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v47)
    {
      CFNumberRef v48 = v47;
      CFDictionaryAddValue(v42, v82, v47);
      CFRelease(v48);
    }
    LODWORD(valuePtr[0]) = *(_DWORD *)((char *)v15 + v16 - 76);
    CFNumberRef v49 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v49)
    {
      CFNumberRef v50 = v49;
      CFDictionaryAddValue(v42, v81, v49);
      CFRelease(v50);
    }
    int v51 = CFDictionaryCreateMutable(0, 0, v18, MEMORY[0x1E4F1D540]);
    LOWORD(valuePtr[0]) = *((_WORD *)v15 - 11);
    CFNumberRef v52 = CFNumberCreate(0, kCFNumberSInt16Type, valuePtr);
    if (v52)
    {
      CFNumberRef v53 = v52;
      CFDictionaryAddValue(v51, v84, v52);
      CFRelease(v53);
    }
    int v54 = v14;
    LOWORD(valuePtr[0]) = *((_WORD *)v15 - 9);
    CFNumberRef v55 = CFNumberCreate(0, kCFNumberSInt16Type, valuePtr);
    if (v55)
    {
      CFNumberRef v56 = v55;
      CFDictionaryAddValue(v51, v83, v55);
      CFRelease(v56);
    }
    uint64_t v57 = v16;
    CFNumberRef v58 = (char *)v15 + v16;
    LODWORD(valuePtr[0]) = *((_DWORD *)v58 - 18);
    CFNumberRef v59 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v59)
    {
      CFNumberRef v60 = v59;
      CFDictionaryAddValue(v51, v82, v59);
      CFRelease(v60);
    }
    LODWORD(valuePtr[0]) = *((_DWORD *)v58 - 18);
    CFNumberRef v61 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v61)
    {
      CFNumberRef v62 = v61;
      CFDictionaryAddValue(v51, v81, v61);
      CFRelease(v62);
    }
    CFDictionaryAddValue(v21, v75, v34);
    CFDictionaryAddValue(v21, v74, v42);
    CFDictionaryAddValue(v21, v72, v51);
    CFRelease(v34);
    CFRelease(v42);
    CFRelease(v51);
    CFArrayAppendValue(theArray, v21);
    CFRelease(v21);
    ++v17;
    v15 += 20;
    uint64_t v16 = v57;
    int v13 = v73;
    int v14 = v54;
    uint64_t v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    char v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  }
  while (v17 < v80[343]);
  CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E4F44E18], theArray);
  CFRelease(theArray);
  return theDict;
}

void sub_1BBA788DC(__CFDictionary *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFDictionarySetValue(a1, @"FrameNumForLTRToReplace", v3);
    CFRelease(v4);
  }
}

uint64_t sub_1BBA7893C(_DWORD *a1, _DWORD *a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 4294954387;
  }
  int v7 = a1[37];
  unsigned int v8 = a1[631];
  unsigned int v9 = a1[632];
  v12[0] = &unk_1F14ED670;
  v12[1] = a1;
  v12[3] = v12;
  uint64_t v10 = sub_1BBA78EE8(a2, v7, (uint64_t)(a1 + 69), (uint64_t)(a1 + 71), (uint64_t)(a1 + 73), v8, v9, (uint64_t)v12, a3, a4, a5, a6, a7);
  sub_1BBA7944C(v12);
  return v10;
}

void sub_1BBA78A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1BBA7944C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA78A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 608);
  int v8 = *(_DWORD *)(v7 + 680);
  char v9 = 1;
  do
  {
    char v10 = v9;
    int v11 = *(_DWORD *)(a3 + 4 * v6);
    if ((v11 & 0x80000000) == 0)
    {
      uint64_t v12 = (*(_DWORD *)(a1 + 2252) + 1);
      int v13 = (int *)(a1 + 904);
      while (1)
      {
        int v14 = *v13;
        v13 += 20;
        if (v11 == v14) {
          break;
        }
        if (!--v12)
        {
          if (dword_1E9F80A90 >= 1)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: current reference frame_num_driver (%d) cannot be found in hw dpb\n", v8, v11);
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              int v16 = *(_DWORD *)(a3 + 4 * v6);
              *(_DWORD *)CMTime buf = 67109376;
              int v41 = v8;
              __int16 v42 = 1024;
              int v43 = v16;
              unint64_t v17 = MEMORY[0x1E4F14500];
              uint64_t v18 = "[Poc %d]: current reference frame_num_driver (%d) cannot be found in hw dpb\n";
              goto LABEL_13;
            }
          }
          return 4294954385;
        }
      }
    }
    char v9 = 0;
    uint64_t v6 = 1;
  }
  while ((v10 & 1) != 0);
  if ((*(unsigned char *)(v7 + 36) & 2) == 0) {
    return 0;
  }
  int v20 = 0;
  uint64_t v21 = (*(_DWORD *)(a1 + 2252) + 1);
  uint64_t v22 = (int *)(a1 + 896);
  do
  {
    int v23 = *v22;
    v22 += 20;
    if (v23 == 2) {
      ++v20;
    }
    --v21;
  }
  while (v21);
  int v24 = *(char *)(*(void *)(a1 + 88) + 150);
  if (v20 < v24)
  {
    int v25 = *(_DWORD *)(a2 + 432);
    if ((v25 & 0x80000000) == 0)
    {
      if (dword_1E9F80A90 < 1) {
        return 4294954385;
      }
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: number of LTR in hw dpb (%d) is smaller than the number of LTR allowed (%d) but with retirement poc (%d) specified\n", v8, v20, *(char *)(*(void *)(a1 + 88) + 150), v25);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        return 4294954385;
      }
      int v26 = *(char *)(*(void *)(a1 + 88) + 150);
      int v27 = *(_DWORD *)(a2 + 432);
      *(_DWORD *)CMTime buf = 67109888;
      int v41 = v8;
      __int16 v42 = 1024;
      int v43 = v20;
      __int16 v44 = 1024;
      int v45 = v26;
      __int16 v46 = 1024;
      int v47 = v27;
      unint64_t v17 = MEMORY[0x1E4F14500];
      uint64_t v18 = "[Poc %d]: number of LTR in hw dpb (%d) is smaller than the number of LTR allowed (%d) but with retirement po"
            "c (%d) specified\n";
      uint32_t v19 = 26;
      goto LABEL_14;
    }
    return 0;
  }
  if (v20 != v24)
  {
    if (dword_1E9F80A90 < 1) {
      return 4294954385;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: number of LTR in hw dpb (%d) is greater than the number of LTR allowed (%d)\n", v8, v20, v24);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    int v37 = *(char *)(*(void *)(a1 + 88) + 150);
    *(_DWORD *)CMTime buf = 67109632;
    int v41 = v8;
    __int16 v42 = 1024;
    int v43 = v20;
    __int16 v44 = 1024;
    int v45 = v37;
    unint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "[Poc %d]: number of LTR in hw dpb (%d) is greater than the number of LTR allowed (%d)\n";
LABEL_43:
    uint32_t v19 = 20;
    goto LABEL_14;
  }
  int v28 = *(_DWORD *)(a2 + 432);
  if (v28 < 0)
  {
    if (dword_1E9F80A90 < 1) {
      return 4294954385;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: number of LTR in hw dpb (%d) is equal to the number of LTR allowed (%d) but with no retirement specified\n", v8, v20, v20);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    int v38 = *(char *)(*(void *)(a1 + 88) + 150);
    *(_DWORD *)CMTime buf = 67109632;
    int v41 = v8;
    __int16 v42 = 1024;
    int v43 = v20;
    __int16 v44 = 1024;
    int v45 = v38;
    unint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "[Poc %d]: number of LTR in hw dpb (%d) is equal to the number of LTR allowed (%d) but with no retirement specified\n";
    goto LABEL_43;
  }
  CFNumberRef v29 = sub_1BBA1D644(*(void *)(a2 + 744), v28);
  if (*(void *)v29)
  {
    int v30 = *(_DWORD *)(*(void *)v29 + 684);
    if (v30 == *(_DWORD *)(a1 + 904)) {
      return 0;
    }
    unint64_t v31 = *(unsigned int *)(a1 + 2252);
    uint64_t v32 = (v31 + 1);
    unint64_t v33 = v32 - 1;
    uint64_t v34 = (int *)(a1 + 984);
    uint64_t v35 = 1;
    while (v32 != v35)
    {
      int v36 = *v34;
      v34 += 20;
      ++v35;
      if (v30 == v36)
      {
        unint64_t v33 = v35 - 2;
        break;
      }
    }
    if (v33 < v31 || dword_1E9F80A90 < 1)
    {
      if (v33 >= v31) {
        return 4294954385;
      }
      return 0;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: retired frame_num_driver (%d) cannot be found in hw dpb\n", v8, v30);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    *(_DWORD *)CMTime buf = 67109376;
    int v41 = v8;
    __int16 v42 = 1024;
    int v43 = v30;
    unint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "[Poc %d]: retired frame_num_driver (%d) cannot be found in hw dpb\n";
  }
  else
  {
    if (dword_1E9F80A90 < 1) {
      return 4294954385;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "[Poc %d]: retired frame poc (%d) cannot be found in sw dpb\n", v8, *(_DWORD *)(a2 + 432));
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    int v39 = *(_DWORD *)(a2 + 432);
    *(_DWORD *)CMTime buf = 67109376;
    int v41 = v8;
    __int16 v42 = 1024;
    int v43 = v39;
    unint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "[Poc %d]: retired frame poc (%d) cannot be found in sw dpb\n";
  }
LABEL_13:
  uint32_t v19 = 14;
LABEL_14:
  _os_log_impl(&dword_1BB9B9000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v19);
  return 4294954385;
}

uint64_t sub_1BBA78EE8(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, int a9, int a10, int a11, unsigned int a12, unsigned int a13)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (!*a1 || !a1[1]) {
    return 4294954387;
  }
  char v14 = 0;
  uint64_t v15 = 0;
  unsigned int v16 = (a9 + 31) & 0xFFFFFFE0;
  if (a2 == 1) {
    unsigned int v16 = (a9 + 15) & 0xFFFFFFF0;
  }
  signed int v79 = v16;
  *(_OWORD *)__int16 v95 = 0uLL;
  long long v94 = 0uLL;
  CVPixelBufferRef texture = 0;
  CVPixelBufferRef pixelBuffer = 0;
  char v17 = 1;
  v85[0] = 0;
  v85[1] = 0;
LABEL_6:
  char v18 = v17;
  uint32_t v19 = IOSurfaceLookup(a1[v15]);
  v85[v15] = v19;
  if (v19)
  {
    int v20 = v19;
    IOSurfaceLock(v19, 0, 0);
    uint64_t v21 = &v85[20 * v15 + 2];
    v21[5] = v20;
    sub_1BBA70674((uint64_t)v21);
    uint64_t v22 = 0;
    char v23 = 1;
    while (1)
    {
      char v24 = v23;
      uint64_t v25 = v85[20 * v15 + 8 + 7 * v22];
      *((void *)&v96[v15] + v22) = v25;
      if (!v25) {
        break;
      }
      if (v14)
      {
        int v26 = &v85[7 * v22 + 2];
        int v27 = *((_DWORD *)v26 + 60);
        int v28 = (void *)*((void *)&v96[1] + v22);
        CFNumberRef v29 = (int *)(a3 + 4 * v22);
        int v30 = (int *)(a4 + 4 * v22);
        unint64_t v31 = (int *)(v26 + 28);
        uint64_t v32 = (int *)v26 + 57;
        if (v27 == 1)
        {
          unint64_t v33 = v29;
        }
        else
        {
          int v30 = v32;
          unint64_t v33 = v31;
        }
        memset(v28, 128, *v30 * (uint64_t)*v33);
      }
      char v23 = 0;
      uint64_t v22 = 1;
      if ((v24 & 1) == 0)
      {
        char v17 = 0;
        char v14 = 1;
        uint64_t v15 = 1;
        if (v18) {
          goto LABEL_6;
        }
        int v34 = v86;
        if (v86 == 3 || (int v35 = v88, v88 == 3))
        {
          if (sub_1BBA794D0(*(void *)(a8 + 24), (uint64_t)&pixelBuffer)
            || (CVPixelBufferLockBaseAddress(pixelBuffer, 0),
                IOSurface = CVPixelBufferGetIOSurface(pixelBuffer),
                sub_1BBA794D0(*(void *)(a8 + 24), (uint64_t)&texture)))
          {
            uint64_t v43 = 4294954392;
            goto LABEL_27;
          }
          CVPixelBufferLockBaseAddress(texture, 0);
          CFNumberRef v50 = CVPixelBufferGetIOSurface(texture);
          size_t v51 = 0;
          char v52 = 1;
          do
          {
            char v53 = v52;
            int v54 = &v85[7 * v51 + 2];
            uint64_t v55 = v54[6];
            int BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(IOSurface, v51);
            BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(IOSurface, v51);
            sub_1BBAD0D44((uint64_t)BaseAddressOfPlane - *((int *)v54 + 22) * (uint64_t)BytesPerRowOfPlane - *((int *)v54 + 21), BytesPerRowOfPlane, v55, *(_DWORD *)(a3 + 4 * v51), *(_DWORD *)(a4 + 4 * v51), v51);
            char v52 = 0;
            size_t v51 = 1;
          }
          while ((v53 & 1) != 0);
          size_t v58 = 0;
          char v59 = 1;
          do
          {
            char v60 = v59;
            v95[v58] = (uint64_t)IOSurfaceGetBaseAddressOfPlane(IOSurface, v58);
            v95[v58 - 2] = (uint64_t)IOSurfaceGetBaseAddressOfPlane(v50, v58);
            v97[v58] = IOSurfaceGetBytesPerRowOfPlane(IOSurface, v58);
            unsigned int v61 = IOSurfaceGetBytesPerRowOfPlane(v50, v58);
            char v59 = 0;
            v89[v58] = v61;
            size_t v58 = 1;
          }
          while ((v60 & 1) != 0);
          BaseAddress = IOSurfaceGetBaseAddress(v50);
          size_t AllocSize = IOSurfaceGetAllocSize(v50);
          memset(BaseAddress, 128, AllocSize);
          sub_1BBA1A580((uint64_t *)&v94, v89, a12, a13, v95, v97, a10, a11);
          uint64_t v64 = 0;
          char v65 = 1;
          do
          {
            char v66 = v65;
            if (*(int *)(a5 + 4 * v64) < 1)
            {
              uint64_t v43 = 4294954385;
              goto LABEL_27;
            }
            BaseAddressOfCompressedTileHeaderRegionOfPlane = (void *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
            uint64_t v68 = (const void *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
            memcpy(BaseAddressOfCompressedTileHeaderRegionOfPlane, v68, *(int *)(a5 + 4 * v64));
            char v65 = 0;
            uint64_t v64 = 1;
          }
          while ((v66 & 1) != 0);
          size_t v69 = 0;
          char v70 = 1;
          do
          {
            char v71 = v70;
            uint64_t v72 = &v85[7 * v69 + 2];
            uint64_t v73 = (int8x16_t *)v72[26];
            int v74 = IOSurfaceGetBytesPerRowOfPlane(v50, v69);
            uint64_t v75 = IOSurfaceGetBaseAddressOfPlane(v50, v69);
            sub_1BBAD0F08(v73, (uint64_t)v75 - *((int *)v72 + 62) * (uint64_t)v74 - *((int *)v72 + 61), v74, *(_DWORD *)(a3 + 4 * v69), *(_DWORD *)(a4 + 4 * v69), v69);
            char v70 = 0;
            size_t v69 = 1;
          }
          while ((v71 & 1) != 0);
        }
        else
        {
          uint64_t v36 = 0;
          char v37 = 1;
          long long v94 = v96[1];
          *(_OWORD *)__int16 v95 = v96[0];
          do
          {
            char v38 = v37;
            int v39 = &v85[7 * v36 + 2];
            int v40 = v39[22];
            v93[v36] = v39[21];
            v92[v36] = v40;
            int v41 = v39[18];
            if (v79 > v41) {
              int v41 = v79;
            }
            v97[v36] = v41;
            uint64_t v36 = 1;
            char v37 = 0;
          }
          while ((v38 & 1) != 0);
          if (v34 == 1 || v35 == 1)
          {
            v89[0] = a6;
            v89[1] = a7;
            v89[2] = 0;
            uint64_t v90 = v85[9];
            uint64_t v91 = v87;
            __int16 v42 = v89;
          }
          else
          {
            __int16 v42 = 0;
          }
          sub_1BBA1B800((uint64_t)&v94, (uint64_t)v97, a12, a13, (uint64_t)v95, (uint64_t)v42, (uint64_t)v97, a10, a11, (uint64_t)v93, (uint64_t)v92);
        }
        uint64_t v43 = 0;
        goto LABEL_27;
      }
    }
  }
  uint64_t v43 = 4294954394;
LABEL_27:
  if (pixelBuffer)
  {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CVPixelBufferRelease(pixelBuffer);
  }
  if (texture)
  {
    CVPixelBufferUnlockBaseAddress(texture, 0);
    CVPixelBufferRelease(texture);
  }
  uint64_t v44 = 0;
  char v45 = 1;
  do
  {
    char v46 = v45;
    int v47 = (const void *)v85[v44];
    if (v47)
    {
      IOSurfaceUnlock((IOSurfaceRef)v85[v44], 0, 0);
      CFRelease(v47);
    }
    char v45 = 0;
    uint64_t v44 = 1;
  }
  while ((v46 & 1) != 0);
  return v43;
}

void *sub_1BBA7944C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1BBA794D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    sub_1BBA79520();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

void sub_1BBA79520()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_1F14ED738;
  __cxa_throw(exception, (struct type_info *)&unk_1F14ED640, (void (*)(void *))std::exception::~exception);
}

void sub_1BBA79570(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x1C18605E0);
}

uint64_t sub_1BBA795A8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 8) + 80) + 12736);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 32))(v2, *a2);
}

uint64_t sub_1BBA795E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14ED670;
  a2[1] = v2;
  return result;
}

void *sub_1BBA79608(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14ED670;
  result[1] = v3;
  return result;
}

void sub_1BBA79650()
{
}

uint64_t sub_1BBA79668(uint64_t a1, uint64_t a2)
{
  v145[1] = *MEMORY[0x1E4F143B8];
  if (_os_feature_enabled_impl())
  {
    if (qword_1EC027190 != -1) {
      dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
    }
    if (dword_1EC02719C == 255) {
      *(unsigned char *)(a1 + 154) = 1;
    }
  }
  CFNumberRef v4 = *(unsigned char **)(a1 + 88);
  *(unsigned char *)(a1 + 155) = v4[392];
  if (v4[231] || v4[232])
  {
    *(unsigned char *)(a1 + 40) = 0;
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 80) = a2;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = 0;
  uint64_t v6 = (_DWORD *)(a1 + 148);
  v7.i32[0] = 1;
  v8.i32[0] = *(_DWORD *)(a1 + 148);
  int32x2_t v9 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v8, v7), 0), (int8x8_t)0x60000000C0, (int8x8_t)0x40000000A0);
  if (v8.i32[0] == 1) {
    unsigned int v10 = -16;
  }
  else {
    unsigned int v10 = -32;
  }
  if (*(_DWORD *)(a1 + 148) == 1) {
    unsigned int v11 = 15;
  }
  else {
    unsigned int v11 = 31;
  }
  int32x2_t v12 = *(int32x2_t *)(a1 + 72);
  *(int32x2_t *)(a1 + 268) = vmax_s32(v9, (int32x2_t)vand_s8((int8x8_t)vadd_s32(vdup_n_s32(v11), v12), (int8x8_t)vdup_n_s32(v10)));
  uint64_t v13 = *(void *)(a1 + 80);
  *(unsigned char *)(a1 + 2545) = *(unsigned char *)(v13 + 1016);
  *(_DWORD *)(a1 + 2548) = *(_DWORD *)(v13 + 1020);
  *(void *)(a1 + 292) = 0;
  int v14 = *(_DWORD *)(v13 + 1000);
  if (v14) {
    int v15 = v14;
  }
  else {
    int v15 = 875704438;
  }
  sub_1BBA15BC8(v12.i32[0], v12.i32[1], 0, 0, 0, 0, v15, (__CFDictionary **)&cf);
  CFMutableArrayRef value = (void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44AC0], (const void *)*MEMORY[0x1E4F1CFD0]);
  if (!*v6)
  {
    uint64_t v30 = *(void *)(a1 + 88);
    if (*(unsigned char *)(a1 + 2545))
    {
      int v31 = 1836415073;
    }
    else if (*(unsigned char *)(v30 + 7874))
    {
      int v31 = 1684632424;
    }
    else
    {
      int v31 = 1752589105;
    }
    int v136 = v31;
    if (!*(unsigned char *)(v30 + 124)) {
      goto LABEL_68;
    }
    int v32 = *(int *)(a1 + 268) >> 5;
    *(_DWORD *)(a1 + 2400) = v32;
    int v33 = *(int *)(a1 + 272) >> 5;
    *(_DWORD *)(a1 + 2404) = v33;
    unint64_t v34 = v33 * v32;
    int v35 = *(char **)(a1 + 2328);
    uint64_t v36 = *(unsigned char **)(a1 + 2320);
    unint64_t v37 = (v35 - v36) >> 5;
    if (v34 <= v37)
    {
      char v45 = *(char **)(a1 + 2328);
      if (v34 >= v37)
      {
LABEL_67:
        uint64_t v52 = *(void *)(a1 + 2320);
        *(void *)(a1 + 2392) = v52;
        *(void *)(a1 + 2408) = &v45[-v52];
LABEL_68:
        uint64_t v53 = *(void *)(a1 + 80);
        uint64_t v54 = *(void *)(v53 + 12688);
        uint64_t v55 = *(std::__shared_weak_count **)(v53 + 12696);
        if (v55)
        {
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          *(_DWORD *)(a1 + 264) = *(unsigned __int8 *)(v54 + 198) + 1;
          sub_1BB9C09B4(v55);
        }
        else
        {
          *(_DWORD *)(a1 + 264) = *(unsigned __int8 *)(v54 + 198) + 1;
        }
        goto LABEL_71;
      }
      char v45 = &v36[32 * v34];
    }
    else
    {
      unint64_t v38 = v34 - v37;
      uint64_t v39 = *(void *)(a1 + 2336);
      if (v34 - v37 > (v39 - (uint64_t)v35) >> 5)
      {
        if ((v34 & 0x80000000) != 0) {
          sub_1BB9C185C();
        }
        uint64_t v40 = v39 - (void)v36;
        if (v40 >> 4 > v34) {
          unint64_t v34 = v40 >> 4;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v41 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v34;
        }
        if (v41 >> 59) {
          goto LABEL_291;
        }
        __int16 v42 = (char *)operator new(32 * v41);
        uint64_t v43 = &v42[32 * v37];
        uint64_t v44 = &v42[32 * v41];
        bzero(v43, 32 * v38);
        char v45 = &v43[32 * v38];
        if (v35 != v36)
        {
          do
          {
            long long v46 = *((_OWORD *)v35 - 1);
            *((_OWORD *)v43 - 2) = *((_OWORD *)v35 - 2);
            *((_OWORD *)v43 - 1) = v46;
            v43 -= 32;
            v35 -= 32;
          }
          while (v35 != v36);
          int v35 = *(char **)(a1 + 2320);
        }
        *(void *)(a1 + 2320) = v43;
        *(void *)(a1 + 2328) = v45;
        *(void *)(a1 + 2336) = v44;
        if (v35)
        {
          operator delete(v35);
          char v45 = *(char **)(a1 + 2328);
        }
        goto LABEL_67;
      }
      bzero(*(void **)(a1 + 2328), 32 * v38);
      char v45 = &v35[32 * v38];
    }
    *(void *)(a1 + 2328) = v45;
    goto LABEL_67;
  }
  if (*v6 != 1)
  {
    int v136 = 0;
    goto LABEL_71;
  }
  int v16 = *(int *)(a1 + 268) >> 4;
  *(_DWORD *)(a1 + 2400) = v16;
  int v17 = *(int *)(a1 + 272) >> 4;
  *(_DWORD *)(a1 + 2404) = v17;
  unint64_t v18 = v17 * v16;
  uint32_t v19 = *(char **)(a1 + 2304);
  int v20 = *(unsigned char **)(a1 + 2296);
  unint64_t v21 = (v19 - v20) >> 4;
  if (v18 > v21)
  {
    unint64_t v22 = v18 - v21;
    uint64_t v23 = *(void *)(a1 + 2312);
    if (v18 - v21 > (v23 - (uint64_t)v19) >> 4)
    {
      if ((v18 & 0x80000000) != 0) {
        sub_1BB9C185C();
      }
      uint64_t v24 = v23 - (void)v20;
      if (v24 >> 3 > v18) {
        unint64_t v18 = v24 >> 3;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v18;
      }
      if (!(v25 >> 60))
      {
        int v26 = (char *)operator new(16 * v25);
        int v27 = &v26[16 * v21];
        int v28 = &v26[16 * v25];
        bzero(v27, 16 * v22);
        CFNumberRef v29 = &v27[16 * v22];
        if (v19 != v20)
        {
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v19 - 1);
            v27 -= 16;
            v19 -= 16;
          }
          while (v19 != v20);
          uint32_t v19 = *(char **)(a1 + 2296);
        }
        *(void *)(a1 + 2296) = v27;
        *(void *)(a1 + 2304) = v29;
        *(void *)(a1 + 2312) = v28;
        if (v19)
        {
          operator delete(v19);
          CFNumberRef v29 = *(char **)(a1 + 2304);
        }
        goto LABEL_61;
      }
LABEL_291:
      sub_1BB9C18AC();
    }
    bzero(*(void **)(a1 + 2304), 16 * v22);
    CFNumberRef v29 = &v19[16 * v22];
    goto LABEL_60;
  }
  CFNumberRef v29 = *(char **)(a1 + 2304);
  if (v18 < v21)
  {
    CFNumberRef v29 = &v20[16 * v18];
LABEL_60:
    *(void *)(a1 + 2304) = v29;
  }
LABEL_61:
  uint64_t v47 = *(void *)(a1 + 2296);
  *(void *)(a1 + 2392) = v47;
  *(void *)(a1 + 2408) = &v29[-v47];
  uint64_t v48 = *(void *)(a1 + 80);
  uint64_t v49 = *(void *)(v48 + 12688);
  CFNumberRef v50 = *(std::__shared_weak_count **)(v48 + 12696);
  if (v50)
  {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v51 = *(void *)(v49 + 2048);
    sub_1BB9C09B4(v50);
  }
  else
  {
    uint64_t v51 = *(void *)(v49 + 2048);
  }
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(v51 + 1320) + 1;
  int v136 = 1635148593;
LABEL_71:
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  *(void *)CMTime buf = 0;
  uint64_t v144 = 0;
  int v56 = *(_DWORD *)(*(void *)(a1 + 80) + 1000);
  int v57 = sub_1BBA13A1C(v56);
  int v58 = *(_DWORD *)(a1 + 268);
  int v59 = *(_DWORD *)(a1 + 272);
  if (qword_1EC027190 != -1) {
    dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
  }
  if (sub_1BBA7BA1C(v58, v59, dword_1EC02719C, *(_DWORD *)(a1 + 148), *(_DWORD *)(*(void *)(a1 + 80) + 1000), (signed int *)(a1 + 276), (signed int *)(a1 + 284), (_DWORD *)&v139 + 1, &v139, (unsigned int *)&v138 + 1, (unsigned int *)&v138, (_DWORD *)(a1 + 2524), (unsigned int *)(a1 + 2528))|| (unsigned int v60 = HIDWORD(v139), SHIDWORD(v139) < 1)|| sub_1BBA13EC4(v56) && (int)v139 < 1)
  {
    uint64_t v61 = 4294954392;
LABEL_78:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CMTime buf = 0;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to allocate dpb\n", buf, 2u);
    }
    CFNumberRef v62 = 0;
LABEL_81:
    CFDictionaryRef v63 = 0;
    goto LABEL_82;
  }
  if (!*(unsigned char *)(a1 + 153))
  {
    uint64_t v61 = 0;
    goto LABEL_164;
  }
  v145[0] = __PAIR64__(v139, v60);
  v142[0] = HIDWORD(v138);
  v142[1] = v138;
  uint64_t v141 = 0;
  if (qword_1EC027190 != -1) {
    dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
  }
  if (dword_1EC02719C < 13) {
    int v65 = 0;
  }
  else {
    int v65 = (****(uint64_t (*****)(void))(a1 + 80))(**(void **)(a1 + 80)) ^ 1;
  }
  if (CFPreferencesGetAppBooleanValue(@"corevideo_dpb_alloc", @"com.apple.VideoProcessing", 0)
    || (CFDictionaryRef v66 = 0, v65))
  {
    int v67 = *(unsigned __int8 *)(a1 + 2545);
    if (*(unsigned char *)(a1 + 2545))
    {
      if (qword_1EC027190 != -1) {
        dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
      }
      int v68 = 641230384;
      if (dword_1EC02719C <= 12)
      {
        if (dword_1EC02719C <= 10) {
          int v69 = 875704438;
        }
        else {
          int v69 = 1563981360;
        }
      }
      else
      {
        int v69 = 641234480;
      }
      LODWORD(v141) = v69;
      if (dword_1EC02719C <= 12)
      {
        if (dword_1EC02719C <= 10) {
          int v68 = 875704422;
        }
        else {
          int v68 = 1563977264;
        }
      }
      HIDWORD(v141) = v68;
      int v71 = 1;
    }
    else
    {
      uint64_t v70 = *(unsigned int *)(*(void *)(a1 + 80) + 1000);
      if (v70 == 1982882104) {
        uint64_t v70 = 875704438;
      }
      int v71 = sub_1BBA7C090(v70);
      LODWORD(v141) = v71;
    }
    uint64_t v72 = sub_1BBA7C514(*(_DWORD *)(a1 + 268), *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 148));
    CFDictionaryRef v66 = v72;
    if (v71)
    {
      BOOL v73 = v67 || *(unsigned char *)(a1 + 2545) == 0;
      if (v73 && v72)
      {
        int v134 = 1;
        goto LABEL_136;
      }
    }
    if (dword_1E9F80A90 >= 3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v74 = *(_DWORD *)(*(void *)(a1 + 80) + 1000);
      *(_DWORD *)int v140 = 67109120;
      *(_DWORD *)&v140[4] = v74;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Not using CoreVideo to allocate DPB for pixfmt %d", v140, 8u);
    }
  }
  if (!*(unsigned char *)(a1 + 2545))
  {
    if (*(_DWORD *)(*(void *)(a1 + 80) + 1000) == 1982882104) {
      int v75 = 875704438;
    }
    else {
      int v75 = *(_DWORD *)(*(void *)(a1 + 80) + 1000);
    }
    *(void *)CMTime buf = sub_1BBA7C89C(*(_DWORD *)(a1 + 268), *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 148), v57, v75, (uint64_t)v145, (uint64_t)v142, a1 + 292);
    if (!*(void *)buf) {
      goto LABEL_161;
    }
LABEL_135:
    int v134 = 0;
LABEL_136:
    if (!*(unsigned char *)(a1 + 154) && !*(unsigned char *)(a1 + 155))
    {
      uint64_t v76 = 0;
      CFStringRef key = (const __CFString *)*MEMORY[0x1E4F2F128];
      LODWORD(v77) = *(_DWORD *)(a1 + 264);
      char v78 = 1;
      do
      {
        if ((int)v77 >= 1)
        {
          char v131 = v78;
          uint64_t v79 = 0;
          do
          {
            char v80 = 0;
            uint64_t v81 = 0;
            uint64_t v132 = (__IOSurface **)(a1 + 272 * v76 + 16 * v79 + 312);
            int v82 = 1;
            do
            {
              char v83 = v80;
              if (((v82 | (****(unsigned int (*****)(void))(a1 + 80))(**(void **)(a1 + 80))) & 1) == 0)
              {
                *uint64_t v132 = 0;
                goto LABEL_157;
              }
              if (v134)
              {
                *(void *)int v140 = 0;
                uint64_t v61 = CVPixelBufferCreate(0, *(int *)(a1 + 268), *(int *)(a1 + 272), v142[v76 - 2], v66, (CVPixelBufferRef *)v140);
                if (v61) {
                  goto LABEL_162;
                }
                IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)v140);
                *(void *)(a1 + 272 * v76 + 16 * v79 + 8 * v81 + 304) = IOSurface;
                if (IOSurface) {
                  CFRetain(IOSurface);
                }
                CFRelease(*(CFTypeRef *)v140);
              }
              else
              {
                CFNumberRef v85 = IOSurfaceCreate(*(CFDictionaryRef *)&buf[8 * v76]);
                *(void *)(a1 + 272 * v76 + 16 * v79 + 8 * v81 + 304) = v85;
                IOSurfaceSetValue(v85, key, @"dpb");
              }
              if (!*(void *)(a1 + 272 * v76 + 16 * v79 + 8 * v81 + 304)) {
                goto LABEL_161;
              }
              int v82 = 0;
              char v80 = 1;
              uint64_t v81 = 1;
            }
            while ((v83 & 1) == 0);
            if (qword_1EC027190 != -1) {
              dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
            }
            if (dword_1EC02719C <= 12) {
              sub_1BBA7DF24(*v132, *(_DWORD *)(a1 + 2528), *(_DWORD *)(a1 + 2524));
            }
LABEL_157:
            ++v79;
            uint64_t v77 = *(int *)(a1 + 264);
          }
          while (v79 < v77);
          char v78 = v131;
        }
        char v86 = (*(unsigned char *)(a1 + 2545) != 0) & v78;
        uint64_t v76 = 1;
        char v78 = 0;
      }
      while ((v86 & 1) != 0);
    }
    uint64_t v61 = 0;
    goto LABEL_162;
  }
  *(void *)CMTime buf = sub_1BBA7C89C(*(_DWORD *)(a1 + 268), *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 148), v57, 875704438, (uint64_t)v145, (uint64_t)v142, a1 + 292);
  if (*(void *)buf)
  {
    uint64_t v144 = sub_1BBA7C89C(*(_DWORD *)(a1 + 268), *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 148), v57, 875704422, (uint64_t)v145, (uint64_t)v142, a1 + 292);
    if (v144) {
      goto LABEL_135;
    }
  }
LABEL_161:
  uint64_t v61 = 4294954392;
LABEL_162:
  if (v66) {
    CFRelease(v66);
  }
LABEL_164:
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (v144) {
    CFRelease(v144);
  }
  if (v61) {
    goto LABEL_78;
  }
  off_1E9F81F60 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBA7B9A4;
  off_1E9F81F68 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBA7B930;
  if (qword_1EC027190 != -1) {
    dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
  }
  if (dword_1EC02719C > 0x11) {
    goto LABEL_249;
  }
  if (((1 << dword_1EC02719C) & 0x3E000) != 0)
  {
    off_1E9F81F60 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBA7AE8C;
    off_1E9F81F68 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBA7AE2C;
    goto LABEL_182;
  }
  if (((1 << dword_1EC02719C) & 0x780) == 0)
  {
    if (((1 << dword_1EC02719C) & 0x1800) != 0)
    {
      qword_1E9F80A88 = 0x800000008;
      qword_1E9F81F80[0] = (uint64_t)sub_1BBA7B0A4;
      qword_1E9F81F88 = (uint64_t)sub_1BBA7B5C4;
      uint64_t v87 = sub_1BBA7AEF0;
      goto LABEL_179;
    }
LABEL_249:
    if (dword_1E9F80A90 >= 2)
    {
      fwrite("Unknown device type\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CMTime buf = 0;
        _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unknown device type\n", buf, 2u);
      }
    }
    goto LABEL_180;
  }
  qword_1E9F80A88 = 0x800000010;
  qword_1E9F81F80[0] = (uint64_t)sub_1BBA7B77C;
  qword_1E9F81F88 = (uint64_t)sub_1BBA7B5C4;
  uint64_t v87 = sub_1BBA7B410;
LABEL_179:
  qword_1E9F81F70[0] = (uint64_t)v87;
  qword_1E9F81F78 = (uint64_t)sub_1BBA7B258;
LABEL_180:
  off_1E9F81F60 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBA7AE8C;
  off_1E9F81F68 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBA7AE2C;
  if (qword_1EC027190 != -1) {
    dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
  }
LABEL_182:
  if (dword_1EC02719C <= 0x11)
  {
    if (((1 << dword_1EC02719C) & 0x3E000) != 0) {
      goto LABEL_189;
    }
    if (((1 << dword_1EC02719C) & 0x780) != 0)
    {
      int v88 = (void *)&unk_1E9F81000;
      uint64_t v89 = sub_1BBA7AD68;
LABEL_188:
      v88[498] = v89;
      goto LABEL_189;
    }
    if (((1 << dword_1EC02719C) & 0x1800) != 0)
    {
      int v88 = &unk_1E9F81000;
      uint64_t v89 = sub_1BBA7ACCC;
      goto LABEL_188;
    }
  }
  if (dword_1E9F80A90 >= 2)
  {
    fwrite("Unknown device type\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CMTime buf = 0;
      _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unknown device type\n", buf, 2u);
    }
  }
LABEL_189:
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1E9F81FF8, memory_order_acquire) != -1)
  {
    *(void *)CMTime buf = v142;
    v145[0] = buf;
    std::__call_once(&qword_1E9F81FF8, v145, (void (__cdecl *)(void *))sub_1BBAD0CEC);
  }
  if (*(_DWORD *)(a1 + 148) == 1)
  {
    sub_1BBA7ABA8((char **)(a1 + 2344), (uint64_t)(*(void *)(a1 + 2304) - *(void *)(a1 + 2296)) >> 4);
    int v91 = 0;
    int v92 = 0;
    int v93 = *(_DWORD *)(a1 + 2400);
    while (1)
    {
      int v94 = v92 / 4;
      int v95 = v92 - (v90 & 0xFFFFFFFC);
      if (v95 < 0)
      {
        v95 += 4;
        __int16 v96 = v94 + (~(2 * v95) | 1);
      }
      else
      {
        __int16 v96 = v94 - 2 * v95;
      }
      if (v93 << 16 <= 0) {
        break;
      }
      int v90 = v95 + 4 * (__int16)(v96 / (__int16)v93);
      __int16 v97 = v96 % (__int16)v93;
      int v98 = v96 % (__int16)v93;
      ++v92;
      if ((v97 & 0x8000) == 0) {
        goto LABEL_200;
      }
LABEL_204:
      if (v98 == v93 - 1 && v90 == *(_DWORD *)(a1 + 2404) - 1) {
        goto LABEL_232;
      }
    }
    int v98 = 0;
    int v90 = 0;
    ++v92;
LABEL_200:
    if (v98 < v93 && (v90 & 0x80000000) == 0 && v90 < *(_DWORD *)(a1 + 2404))
    {
      uint64_t v99 = (int *)(*(void *)(a1 + 2344) + 8 * v91++);
      *uint64_t v99 = v98;
      v99[1] = v90;
    }
    goto LABEL_204;
  }
  if (*(unsigned char *)(*(void *)(a1 + 88) + 124))
  {
    sub_1BBA7ABA8((char **)(a1 + 2368), (uint64_t)(*(void *)(a1 + 2328) - *(void *)(a1 + 2320)) >> 5);
    uint64_t v100 = 0;
    int v101 = 0;
    int v102 = *(_DWORD *)(a1 + 2404);
    uint64_t v103 = *(void *)(a1 + 2368);
    int v104 = -1;
    while (1)
    {
      if (v101)
      {
        int v106 = *(_DWORD *)(a1 + 2400);
        BOOL v107 = v104 < v106 - 2 || ((v102 + 1) >> 1) - 1 == v101 >> 1;
        if (v107) {
          int v105 = -1;
        }
        else {
          int v105 = 1;
        }
        if (v107) {
          int v106 = 0;
        }
        int v104 = v104 - v106 + 2;
      }
      else if (v104 || v101 < 1)
      {
        --v104;
        int v105 = 1;
      }
      else
      {
        int v104 = *(_DWORD *)(a1 + 2400) - 1;
        int v105 = -1;
      }
      v101 += v105;
      if ((v104 & 0x80000000) == 0)
      {
        int v108 = *(_DWORD *)(a1 + 2400);
        if (v104 < v108 && (v101 & 0x80000000) == 0 && v101 < v102)
        {
          int v109 = (int *)(v103 + 8 * v100);
          *int v109 = v104;
          v109[1] = v101;
          ++v100;
          if (v104 == v108 - 1 && v101 == v102 - 1) {
            break;
          }
        }
      }
    }
  }
LABEL_232:
  uint64_t v111 = *(void *)(a1 + 80);
  uint64_t v112 = *(char **)v111;
  if (*(void *)v111 && v112[33])
  {
    uint64_t v113 = *(unsigned int *)(a1 + 2520);
    uint64_t v114 = sub_1BBAB1784(v112);
    if (!v114) {
      goto LABEL_264;
    }
    int v115 = v114;
    unint64_t v116 = ((3
           * (unint64_t)(*(unsigned int (**)(char *, uint64_t, void))(*(void *)v114 + 160))(v114, 255, **(void **)(a1 + 80))+ 3) >> 1)+ 1;
    CFDataRef v117 = *(const __CFData **)(*(void *)(a1 + 80) + 1112);
    if (v117)
    {
      v116 += CFDataGetLength(v117) - v113;
      if (!v116)
      {
        int v121 = 0;
        goto LABEL_259;
      }
    }
    unint64_t v118 = v116 + v113;
    if (v116 + v113 >= 0x200) {
      unint64_t v118 = 512;
    }
    if (v118 <= 8) {
      size_t v119 = 8;
    }
    else {
      size_t v119 = v118;
    }
    int v120 = (UInt8 *)operator new[](v119, MEMORY[0x1E4FBA2D0]);
    if (v120)
    {
      int v121 = v120;
      switch(v113)
      {
        case 4:
          *(_DWORD *)int v120 = bswap32(v119 - 4);
          break;
        case 2:
          *(_WORD *)int v120 = bswap32(v119 - 2) >> 16;
          break;
        case 1:
          *int v120 = v119 - 1;
          break;
        default:
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)CMTime buf = 0;
            _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "value of nalu_length_size should be 1, 2 or 4", buf, 2u);
          }
          goto LABEL_263;
      }
      v120[v113] = 76;
      v120[v113 + 1] = 1;
      memset(&v120[v113 + 2], 255, v119 - (v113 + 2));
      v121[v119 - 1] = 0x80;
      *(void *)(a1 + 2536) = CFDataCreate(0, v121, v119);
LABEL_259:
      (*(void (**)(char *))(*(void *)v115 + 8))(v115);
      if (!v121) {
        goto LABEL_264;
      }
LABEL_263:
      MEMORY[0x1C18605A0](v121, 0x1000C8077774924);
    }
  }
  else
  {
    uint64_t v122 = *(void *)(v111 + 1112);
    if (v122)
    {
      CFRetain(*(CFTypeRef *)(v111 + 1112));
      *(void *)(a1 + 2536) = v122;
    }
  }
LABEL_264:
  if (!*(void *)(*(void *)(a1 + 80) + 1120))
  {
    CFNumberRef v62 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue(v62, (const void *)*MEMORY[0x1E4F44BD0], value);
    if (v136 == 1752589105)
    {
      if (qword_1EC027190 != -1) {
        dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
      }
      int v125 = dword_1EC02719C;
      int v126 = @"com.apple.videotoolbox.videoencoder.hevc";
      int v127 = @"paravirtualized:com.apple.videotoolbox.videoencoder.ave.hevc";
    }
    else
    {
      if (v136 != 1635148593) {
        goto LABEL_283;
      }
      if (qword_1EC027190 != -1) {
        dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
      }
      int v125 = dword_1EC02719C;
      int v126 = @"com.apple.videotoolbox.videoencoder.h264";
      int v127 = @"paravirtualized:com.apple.videotoolbox.videoencoder.ave.avc";
    }
    if (v125 == 255) {
      int v128 = v127;
    }
    else {
      int v128 = v126;
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45620], v128);
LABEL_283:
    uint64_t v61 = VTCompressionSessionCreateWithOptions();
    if (v61)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CMTime buf = 0;
        _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Compresseion session is null\n", buf, 2u);
      }
      goto LABEL_81;
    }
    CVPixelBufferPoolRef PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(a1 + 160));
    *(void *)(a1 + 240) = PixelBufferPool;
    if (PixelBufferPool)
    {
      CFDictionaryRef v130 = (const __CFDictionary *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
      CFDictionaryRef v63 = v130;
      if (v130)
      {
        CFDictionaryApplyFunction(v130, (CFDictionaryApplierFunction)sub_1BBA78108, *(void **)(a1 + 160));
        goto LABEL_266;
      }
    }
    else
    {
      CFDictionaryRef v63 = 0;
    }
    uint64_t v61 = 4294954392;
    goto LABEL_82;
  }
  CFNumberRef v62 = 0;
  CFDictionaryRef v63 = 0;
LABEL_266:
  uint64_t v123 = *(int *)(a1 + 104);
  unint64_t v124 = (*(int *)(a1 + 100) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)(a1 + 2256) = v124;
  uint64_t v61 = sub_1BBA192A4((void **)(a1 + 2264), v124 * v123 + 8);
  if (!v61)
  {
    uint64_t v61 = sub_1BBA12730((void **)(a1 + 2280), *(int *)(a1 + 108), 0x10uLL);
    if (!v61)
    {
      sub_1BBA39A24((void **)(a1 + 864), 2uLL);
      sub_1BBA39A24((void **)(a1 + 848), 2uLL);
      if (*(unsigned char *)(*(void *)(a1 + 88) + 582))
      {
        *(void *)(a1 + 48) = CFDataCreateMutable(0, 0);
        *(void *)(a1 + 56) = CFDataCreateMutable(0, 0);
      }
      uint64_t v61 = 0;
      *(void *)(a1 + 232) = dispatch_semaphore_create(*(int *)(a1 + 96));
      *(unsigned char *)(a1 + 2544) = 0;
    }
  }
LABEL_82:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v62) {
    CFRelease(v62);
  }
  return v61;
}

uint64_t sub_1BBA7AB84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

void sub_1BBA7ABA8(char **a1, unint64_t a2)
{
  CFNumberRef v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    int v16 = &v4[8 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  int32x2_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    int v16 = &v3[8 * v6];
LABEL_20:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61) {
    sub_1BB9C185C();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 61) {
    sub_1BB9C18AC();
  }
  unsigned int v11 = (char *)operator new(8 * v10);
  int32x2_t v12 = &v11[8 * v5];
  uint64_t v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  int v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      uint64_t v15 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

_OWORD *sub_1BBA7ACCC(_OWORD *a1, uint64_t a2, int a3, int a4, int a5, _DWORD *a6, int a7)
{
  if (a6 && (uint64_t v8 = *(void *)&a6[2 * a7 + 4]) != 0)
  {
    char v9 = *a6;
    unsigned int v10 = ((a3 / 8) >> v9) * a6[a7 + 1];
    int v11 = (a3 / 8) & ~(-1 << v9);
    int v12 = *(_DWORD *)(v8 + v10 + 4 * v11);
    uint64_t v13 = (*(_DWORD *)(v8 + v10 + 4 * (v11 + (1 << v9))) & 0xFFFFFFF) - (v12 & 0xFFFFFFFu);
    a2 += v12 & 0xFFFFFFF;
    signed int v14 = 16 * a3 - ((a3 / 8) << 7);
  }
  else
  {
    signed int v14 = 16 * (a3 & 7) + (a3 & 0xFFFFFFF8) * a5;
    uint64_t v13 = 128;
  }
  return DetileRow_neon(a1, (long long *)(a2 + v14), a4, v13);
}

_OWORD *sub_1BBA7AD68(_OWORD *a1, uint64_t a2, int a3, int a4, int a5, _DWORD *a6, int a7)
{
  if (a7) {
    int v8 = -8;
  }
  else {
    int v8 = -16;
  }
  if (a7) {
    int v9 = 8;
  }
  else {
    int v9 = 16;
  }
  if (a6 && (uint64_t v10 = *(void *)&a6[2 * a7 + 4]) != 0)
  {
    unsigned int v11 = a3 / v9;
    char v12 = *a6;
    int v13 = (v11 >> v12) * a6[a7 + 1];
    int v14 = v11 & ~(-1 << v12);
    uint64_t v15 = *(_DWORD *)(v10 + (v13 + 4 * v14)) & 0xFFFFFFF;
    uint64_t v16 = (*(_DWORD *)(v10 + (v13 + 4 * (v14 + (1 << v12)))) & 0xFFFFFFF) - v15;
    a2 += v15;
    if (a7) {
      char v17 = 3;
    }
    else {
      char v17 = 4;
    }
    int v18 = 16 * (a3 - (v11 << v17));
  }
  else
  {
    uint64_t v16 = (16 * v9);
    int v18 = (v8 & a3) * a5 + 16 * ((v9 - 1) & a3);
  }
  return DetileRow_neon(a1, (long long *)(a2 + v18), a4, v16);
}

_OWORD *sub_1BBA7AE2C(_OWORD *result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = a5 >> 1;
    uint64_t v8 = 2 * a3;
    if (a5 >> 1 <= 1) {
      int v7 = 1;
    }
    do
    {
      if (a5 >= 2)
      {
        int v9 = (long long *)(a2 + v6 * a4);
        uint64_t v10 = (long long *)((char *)v9 + a3);
        int v11 = v7;
        do
        {
          long long v12 = *v9;
          int v9 = (long long *)((char *)v9 + v8);
          long long v13 = *v10;
          uint64_t v10 = (long long *)((char *)v10 + v8);
          *uint64_t result = v12;
          result[1] = v13;
          result += 2;
          --v11;
        }
        while (v11);
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return result;
}

long long *sub_1BBA7AE8C(uint64_t a1, int a2, long long *a3, int a4, int a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = a5 >> 1;
    uint64_t v8 = 2 * a2;
    if (a5 >> 1 <= 1) {
      int v7 = 1;
    }
    do
    {
      if (a5 >= 2)
      {
        int v9 = (_OWORD *)(a1 + v6 * a4);
        uint64_t v10 = (_OWORD *)((char *)v9 + a2);
        int v11 = v7;
        do
        {
          long long v12 = *a3;
          long long v13 = a3[1];
          a3 += 2;
          *int v9 = v12;
          int v9 = (_OWORD *)((char *)v9 + v8);
          *uint64_t v10 = v13;
          uint64_t v10 = (_OWORD *)((char *)v10 + v8);
          --v11;
        }
        while (v11);
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return a3;
}

uint64_t sub_1BBA7AEF0(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  if (result)
  {
    uint64_t v7 = a3;
    if (a3)
    {
      uint64_t v10 = result;
      if (a7 && *(void *)(a7 + 16))
      {
        if (a6 >= 1)
        {
          uint64_t v11 = 0;
          unsigned int v12 = 0;
          unint64_t v19 = a6;
          uint64_t v20 = 8 * (int)a4;
          do
          {
            uint64_t v21 = v11;
            if (a5 >= 1)
            {
              uint64_t v13 = 0;
              int v14 = 0;
              do
              {
                uint64_t result = off_1E9F81F68(v10+ (*(_DWORD *)(*(void *)(a7 + 16)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), v7 + v13, a4, 16, 8, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            uint64_t v11 = v21 + 8;
            ++v12;
            v7 += v20;
          }
          while (v21 + 8 < v19);
        }
      }
      else if (a6 >= 1)
      {
        unint64_t v15 = 0;
        uint64_t v16 = (8 * (a2 - a5)) & ~((8 * (a2 - a5)) >> 31);
        unint64_t v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t result = off_1E9F81F68(v10, v7 + v18, a4, 16, 8, 1);
              uint64_t v10 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v10 += v16;
          v15 += 8;
          v7 += 8 * (int)a4;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1BBA7B0A4(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  if (result)
  {
    uint64_t v7 = a3;
    if (a3)
    {
      uint64_t v10 = result;
      if (a7 && *(void *)(a7 + 16))
      {
        if (a6 >= 1)
        {
          uint64_t v11 = 0;
          unsigned int v12 = 0;
          unint64_t v19 = a6;
          uint64_t v20 = 8 * (int)a2;
          do
          {
            uint64_t v21 = v11;
            if (a5 >= 1)
            {
              uint64_t v13 = 0;
              int v14 = 0;
              do
              {
                uint64_t result = off_1E9F81F60(v10 + v13, a2, v7+ (*(_DWORD *)(*(void *)(a7 + 16)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), 16, 8, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            uint64_t v11 = v21 + 8;
            ++v12;
            v10 += v20;
          }
          while (v21 + 8 < v19);
        }
      }
      else if (a6 >= 1)
      {
        unint64_t v15 = 0;
        uint64_t v16 = (8 * (a4 - a5)) & ~((8 * (a4 - a5)) >> 31);
        unint64_t v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t result = off_1E9F81F60(v10 + v18, a2, v7, 16, 8, 1);
              uint64_t v7 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v7 += v16;
          v15 += 8;
          v10 += 8 * (int)a2;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1BBA7B258(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  if (result)
  {
    uint64_t v7 = a3;
    if (a3)
    {
      uint64_t v10 = result;
      if (a7 && *(void *)(a7 + 24))
      {
        if (a6 >= 1)
        {
          uint64_t v11 = 0;
          unsigned int v12 = 0;
          unint64_t v19 = a6;
          uint64_t v20 = 8 * (int)a4;
          do
          {
            uint64_t v21 = v11;
            if (a5 >= 1)
            {
              uint64_t v13 = 0;
              int v14 = 0;
              do
              {
                uint64_t result = off_1E9F81F68(v10+ (*(_DWORD *)(*(void *)(a7 + 24)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 8)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), v7 + v13, a4, 16, 8, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            uint64_t v11 = v21 + 8;
            ++v12;
            v7 += v20;
          }
          while (v21 + 8 < v19);
        }
      }
      else if (a6 >= 1)
      {
        unint64_t v15 = 0;
        uint64_t v16 = (8 * (a2 - a5)) & ~((8 * (a2 - a5)) >> 31);
        unint64_t v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t result = off_1E9F81F68(v10, v7 + v18, a4, 16, 8, 1);
              uint64_t v10 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v10 += v16;
          v15 += 8;
          v7 += 8 * (int)a4;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1BBA7B410(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  if (result)
  {
    uint64_t v7 = a3;
    if (a3)
    {
      uint64_t v10 = result;
      if (a7 && *(void *)(a7 + 16))
      {
        if (a6 >= 1)
        {
          uint64_t v11 = 0;
          unsigned int v12 = 0;
          unint64_t v19 = a6;
          uint64_t v20 = 16 * (int)a4;
          do
          {
            uint64_t v21 = v11;
            if (a5 >= 1)
            {
              uint64_t v13 = 0;
              int v14 = 0;
              do
              {
                uint64_t result = off_1E9F81F68(v10+ (*(_DWORD *)(*(void *)(a7 + 16)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), v7 + v13, a4, 16, 16, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            uint64_t v11 = v21 + 16;
            ++v12;
            v7 += v20;
          }
          while (v21 + 16 < v19);
        }
      }
      else if (a6 >= 1)
      {
        unint64_t v15 = 0;
        uint64_t v16 = (16 * (a2 - a5)) & ~((16 * (a2 - a5)) >> 31);
        unint64_t v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t result = off_1E9F81F68(v10, v7 + v18, a4, 16, 16, 1);
              uint64_t v10 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v10 += v16;
          v15 += 16;
          v7 += 16 * (int)a4;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1BBA7B5C4(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  if (result)
  {
    uint64_t v7 = a3;
    if (a3)
    {
      uint64_t v10 = result;
      if (a7 && *(void *)(a7 + 24))
      {
        if (a6 >= 1)
        {
          uint64_t v11 = 0;
          unsigned int v12 = 0;
          unint64_t v19 = a6;
          uint64_t v20 = 8 * (int)a2;
          do
          {
            uint64_t v21 = v11;
            if (a5 >= 1)
            {
              uint64_t v13 = 0;
              int v14 = 0;
              do
              {
                uint64_t result = off_1E9F81F60(v10 + v13, a2, v7+ (*(_DWORD *)(*(void *)(a7 + 24)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 8)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), 16, 8, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            uint64_t v11 = v21 + 8;
            ++v12;
            v10 += v20;
          }
          while (v21 + 8 < v19);
        }
      }
      else if (a6 >= 1)
      {
        unint64_t v15 = 0;
        uint64_t v16 = (8 * (a4 - a5)) & ~((8 * (a4 - a5)) >> 31);
        unint64_t v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t result = off_1E9F81F60(v10 + v18, a2, v7, 16, 8, 1);
              uint64_t v7 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v7 += v16;
          v15 += 8;
          v10 += 8 * (int)a2;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1BBA7B77C(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  if (result)
  {
    uint64_t v7 = a3;
    if (a3)
    {
      uint64_t v10 = result;
      if (a7 && *(void *)(a7 + 16))
      {
        if (a6 >= 1)
        {
          uint64_t v11 = 0;
          unsigned int v12 = 0;
          unint64_t v19 = a6;
          uint64_t v20 = 16 * (int)a2;
          do
          {
            uint64_t v21 = v11;
            if (a5 >= 1)
            {
              uint64_t v13 = 0;
              int v14 = 0;
              do
              {
                uint64_t result = off_1E9F81F60(v10 + v13, a2, v7+ (*(_DWORD *)(*(void *)(a7 + 16)+ (v12 >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4)+ 4 * ((v12 & ~(-1 << *(_DWORD *)a7)) + (v14 << *(_DWORD *)a7))) & 0xFFFFFFF), 16, 16, 1);
                v13 += 16;
                ++v14;
              }
              while (v13 < a5);
            }
            uint64_t v11 = v21 + 16;
            ++v12;
            v10 += v20;
          }
          while (v21 + 16 < v19);
        }
      }
      else if (a6 >= 1)
      {
        unint64_t v15 = 0;
        uint64_t v16 = (16 * (a4 - a5)) & ~((16 * (a4 - a5)) >> 31);
        unint64_t v17 = a6;
        do
        {
          if (a5 >= 1)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t result = off_1E9F81F60(v10 + v18, a2, v7, 16, 16, 1);
              uint64_t v7 = result;
              v18 += 16;
            }
            while (v18 < a5);
          }
          v7 += v16;
          v15 += 16;
          v10 += 16 * (int)a2;
        }
        while (v15 < v17);
      }
    }
  }
  return result;
}

unsigned char *sub_1BBA7B930(unsigned char *result, char *a2, int a3, int a4, int a5, int a6)
{
  if (a6 >= 1)
  {
    for (uint64_t i = 0; i != a6; ++i)
    {
      if (a5 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = a2;
        do
        {
          int v9 = v8;
          uint64_t v10 = a4;
          if (a4 >= 1)
          {
            do
            {
              char v11 = *v9++;
              *result++ = v11;
              --v10;
            }
            while (v10);
          }
          ++v7;
          v8 += a3;
        }
        while (v7 != a5);
      }
      a2 += a4;
    }
  }
  return result;
}

char *sub_1BBA7B9A4(unsigned char *a1, int a2, char *a3, int a4, int a5, int a6)
{
  if (a6 >= 1)
  {
    for (uint64_t i = 0; i != a6; ++i)
    {
      if (a5 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = a1;
        do
        {
          int v9 = v8;
          uint64_t v10 = a4;
          if (a4 >= 1)
          {
            do
            {
              char v11 = *a3++;
              *v9++ = v11;
              --v10;
            }
            while (v10);
          }
          ++v7;
          v8 += a2;
        }
        while (v7 != a5);
      }
      a1 += a4;
    }
  }
  return a3;
}

uint64_t sub_1BBA7BA1C(int a1, int a2, int a3, int a4, int a5, signed int *a6, signed int *a7, _DWORD *a8, _DWORD *a9, unsigned int *a10, unsigned int *a11, _DWORD *a12, unsigned int *a13)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v21 = sub_1BBA13A1C(a5);
  unsigned int v22 = 1;
  if (a5 > 875836533)
  {
    if (a5 != 875836534 && a5 != 2019963956)
    {
      int v23 = 2016687156;
LABEL_8:
      char v24 = 1;
      if (a5 != v23) {
        goto LABEL_12;
      }
    }
  }
  else if (a5 != 645424692 && a5 != 645428788)
  {
    int v23 = 875836518;
    goto LABEL_8;
  }
  uint64_t v25 = 4294954386;
  if (a3 < 11 || a4) {
    return v25;
  }
  char v24 = 0;
  unsigned int v22 = 3;
LABEL_12:
  if (a5 == 1278226488 || a5 == 1751411059 || a5 == 1278226736)
  {
    uint64_t v25 = 4294954386;
    if (a3 < 11 || a4) {
      return v25;
    }
    unsigned int v22 = 0;
    char v24 = 0;
  }
  int v26 = a1 + 15;
  signed int v27 = (a1 + 15) & 0xFFFFFFF0;
  int v28 = a2 + 15;
  signed int v29 = (a2 + 15) & 0xFFFFFFF0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0;
  int v30 = 2 * (v27 >> v24);
  *a6 = v27;
  a6[1] = v30;
  int v31 = v29 >> v24;
  *a7 = v29;
  a7[1] = v29 >> v24;
  if (a3 > 0xC) {
    goto LABEL_42;
  }
  if (((1 << a3) & 0x180) != 0)
  {
    uint64_t v25 = 0;
    int v43 = v29 * v27;
    *a8 = v43;
    *a9 = v43 >> 1;
  }
  else
  {
    if (((1 << a3) & 0x600) == 0)
    {
      if (((1 << a3) & 0x1800) != 0)
      {
        if (a4)
        {
          if (a4 == 1)
          {
            uint64_t v25 = 0;
            int v32 = v29 >> 3;
            *a8 = (((8 * v27 * ((v29 >> 3) | 1) * v21) >> 3) + 511) & 0xFFFFFE00;
            unsigned int v33 = v26 | 0xF;
            if (v26 < 0) {
              unsigned int v33 = (v26 | 0xF) + 15;
            }
            unsigned int v34 = v33 >> 4;
            int v35 = v28 | 0xF;
            int v36 = (v28 | 0xF) + 15;
            if (v35 < 0) {
              int v35 = v36;
            }
            *a9 = (v34 * (v35 >> 4)) << 7;
            int v38 = v32 + 8;
            BOOL v37 = v32 < -8;
            int v39 = v32 + 15;
            if (!v37) {
              int v39 = v38;
            }
            int v40 = v39 >> 3;
            int v41 = 2 * v27 + 254;
            if (2 * v27 >= -127) {
              int v41 = 2 * v27 + 127;
            }
            unsigned int v42 = v41 & 0xFFFFFF80;
            *a10 = (v40 * v42 + 511) & 0xFFFFFE00;
            *a12 = 3;
            *a13 = v42;
            *a6 = v27;
            a6[1] = v30;
            signed int v29 = (v29 + 23) & 0xFFFFFFF0;
LABEL_41:
            *a7 = v29;
            a7[1] = v31;
            return v25;
          }
          return 0;
        }
        signed int v52 = (v29 + 31) & 0xFFFFFFE0;
        int v53 = v52 >> 3;
        *a8 = (((8 * v27 * ((v52 >> 3) | 1) * v21) >> 3) + 511) & 0xFFFFFE00;
        if (v22)
        {
          if (v22 == 1) {
            char v54 = 7;
          }
          else {
            char v54 = 9;
          }
          unsigned int v55 = (((v27 + 31) >> 4) & 0xFFFFFFFE) << v54;
        }
        else
        {
          unsigned int v55 = 0;
        }
        int v69 = v52 >> 4;
        *a9 = v55 * (v52 >> 4);
        int v70 = v53 + 8;
        BOOL v37 = v53 < -8;
        int v71 = v53 + 15;
        if (v37) {
          int v70 = v71;
        }
        int v72 = v70 >> 3;
        int v73 = 2 * v27;
        int v74 = 2 * v27 + 127;
        if (v73 < -127) {
          int v74 = v73 + 254;
        }
        unsigned int v75 = v74 & 0xFFFFFF80;
        *a10 = (v72 * v75 + 511) & 0xFFFFFE00;
        if (v21 == 10) {
          *a11 = (v69 * ((v73 + 62) & 0xFFFFFFC0) + 511) & 0xFFFFFE00;
        }
        uint64_t v25 = 0;
        *a12 = 3;
        *a13 = v75;
        signed int v76 = (a1 + 31) & 0xFFFFFFE0;
        *a6 = v76;
        a6[1] = 2 * (v76 >> v24);
        signed int v77 = (v29 + 39) & 0xFFFFFFE0;
        int v78 = (int)((a2 + 31) & 0xFFFFFFE0) >> v24;
LABEL_85:
        *a7 = v77;
        a7[1] = v78;
        return v25;
      }
LABEL_42:
      int v47 = v29 + 35;
      *a8 = ((int)(v21 * ((32 * (v27 + 31)) & 0xFFFFFC00)) >> 3) * ((v29 + 35) >> 5);
      if (v22 == 1) {
        int v48 = 2;
      }
      else {
        int v48 = 1;
      }
      int v49 = v29 / v48 + 19;
      int v50 = v27 / v48;
      if (v22) {
        int v51 = (int)(((32 * v50 + 480) & 0xFFFFFE00) * v21) >> 3;
      }
      else {
        int v51 = 0;
      }
      *a9 = (v51 * (v49 >> 4) + 127) & 0xFFFFFF80;
      unsigned int v60 = __clz((v27 + 31) / 32 - 1);
      if (v47 < 0) {
        int v47 = v29 + 66;
      }
      *a10 = ((32 << -(v60 + __clz((v47 >> 5) - 1))) + 127) & 0xFFFFFF80;
      if (v22)
      {
        int v61 = v50 + 15;
        if (v50 < -15) {
          int v61 = v50 + 30;
        }
        unsigned int v62 = ((8 << -(char)(__clz(v49 / 16 - 1) + __clz((v61 >> 4) - 1))) + 127) & 0xFFFFFF80;
      }
      else
      {
        unsigned int v62 = 0;
      }
      uint64_t v63 = 0;
      *a11 = v62;
      char v64 = 1;
      do
      {
        int v65 = v64 & 1;
        if (v64) {
          uint64_t v66 = 0;
        }
        else {
          uint64_t v66 = 264;
        }
        int v67 = (_DWORD *)((char *)&unk_1BBB82F60 + v66);
        int v68 = v67[2];
        a6[v63] = (v27 - 1 + v67[3] / (v68 * v67[1]) * v67[1]) & -(v67[3] / (v68 * v67[1]) * v67[1]);
        a7[v63] = (((v29 >> v63) | 3) + v68) & -v68;
        uint64_t v63 = 1;
        char v64 = 0;
      }
      while (v65);
      return 0;
    }
    if (!a4)
    {
      int v56 = (v27 + 31) >> 4;
      unsigned int v57 = ((v29 + 31) >> 4) & 0xFFFFFFFE;
      unsigned int v58 = (v56 & 0xFFFFFFFE) * v57;
      *a8 = v58 << 8;
      if (v22)
      {
        if (v22 == 1) {
          int v59 = 128;
        }
        else {
          int v59 = 512;
        }
        unsigned int v22 = v59 * (v56 & 0xFFFFFFFE);
      }
      *a9 = v22 * v57;
      if (v21 == 10)
      {
        *a10 = (((v56 << 6) & 0xFFFFFF80) * v57 + 511) & 0xFFFFFE00;
        *a11 = (32 * v58 + 511) & 0xFFFFFE00;
      }
      uint64_t v25 = 0;
      signed int v79 = (a1 + 31) & 0xFFFFFFE0;
      *a6 = v79;
      a6[1] = 2 * (v79 >> v24);
      signed int v77 = (a2 + 31) & 0xFFFFFFE0;
      int v78 = v77 >> v24;
      goto LABEL_85;
    }
    if (a4 == 1)
    {
      uint64_t v25 = 0;
      int v44 = v26 | 0xF;
      if (v26 < 0) {
        int v44 = (v26 | 0xF) + 15;
      }
      int v45 = v28 | 0xF;
      if (v28 < 0) {
        int v45 = (v28 | 0xF) + 15;
      }
      int v46 = (v44 >> 4) * (v45 >> 4);
      *a8 = ((v46 << 8) + 511) & 0xFFFFFE00;
      *a9 = v46 << 7;
      *a6 = v27;
      a6[1] = v30;
      goto LABEL_41;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      v81[0] = 67109120;
      v81[1] = a4;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Unsupported codec type: %d\n", (uint8_t *)v81, 8u);
    }
    return 4294954386;
  }
  return v25;
}

uint64_t sub_1BBA7C090(uint64_t a1)
{
  if (qword_1EC027190 != -1) {
    dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
  }
  if (dword_1EC02719C < 13)
  {
    if (dword_1EC02719C >= 11)
    {
      if ((int)a1 <= 1534621231)
      {
        if ((int)a1 > 875836533)
        {
          if (a1 == 875836534)
          {
LABEL_78:
            unsigned __int16 v5 = 30260;
            return v5 | 0x5D380000u;
          }
          uint64_t result = 1563977264;
          if (a1 == 1278226488) {
            return result;
          }
          int v6 = 1534617136;
LABEL_55:
          if (a1 == v6) {
            return 1534617136;
          }
          return 0;
        }
        uint64_t result = 1563977264;
        if (a1 == 875704422) {
          return result;
        }
        uint64_t result = 1563981360;
        if (a1 == 875704438) {
          return result;
        }
        int v4 = 875836518;
      }
      else
      {
        if ((int)a1 > 1563981359)
        {
          if ((int)a1 <= 2016686639)
          {
            uint64_t result = 1563981360;
            if (a1 == 1563981360) {
              return result;
            }
            if (a1 != 1563981364) {
              return 0;
            }
            goto LABEL_78;
          }
LABEL_41:
          if (a1 != 2016686640)
          {
            int v6 = 2019963440;
            goto LABEL_55;
          }
LABEL_51:
          int v8 = 1534617136;
          return v8 | 0x1000u;
        }
        if (a1 == 1534621232) {
          goto LABEL_51;
        }
        uint64_t result = 1563977264;
        if (a1 == 1563977264) {
          return result;
        }
        int v4 = 1563977268;
      }
      if (a1 == v4) {
        return 1563977268;
      }
      return 0;
    }
    if ((int)a1 <= 1278226735)
    {
      if (a1 == 875704422) {
        return 875704422;
      }
      if (a1 == 875704438) {
        return a1;
      }
      if (a1 != 1278226488) {
        return 0;
      }
      unsigned __int16 v5 = 26160;
      return v5 | 0x5D380000u;
    }
    if ((int)a1 <= 2016686639)
    {
      if (a1 == 1278226736 || a1 == 1751411059) {
        return 1568171568;
      }
      return 0;
    }
    goto LABEL_41;
  }
  uint64_t result = 641234480;
  if ((int)a1 <= 875704437)
  {
    if ((int)a1 <= 645424687)
    {
      if ((int)a1 > 641234479)
      {
        if (a1 == 641234480) {
          return result;
        }
        if (a1 != 641234484) {
          return 0;
        }
        return 641234484;
      }
      if (a1 != 641230384)
      {
        int v7 = 641230388;
        goto LABEL_59;
      }
    }
    else
    {
      if ((int)a1 <= 645428783)
      {
        if (a1 != 645424688)
        {
          int v3 = 645424692;
LABEL_63:
          if (a1 == v3) {
            return 645424692;
          }
          return 0;
        }
        goto LABEL_75;
      }
      if (a1 == 645428784)
      {
LABEL_67:
        int v8 = 645424688;
        return v8 | 0x1000u;
      }
      if (a1 == 645428788) {
        goto LABEL_73;
      }
      if (a1 != 875704422) {
        return 0;
      }
    }
    return 641230384;
  }
  if ((int)a1 > 1751411058)
  {
    if ((int)a1 > 2016687155)
    {
      if (a1 != 2016687156)
      {
        if (a1 != 2019963440)
        {
          int v3 = 2019963956;
          goto LABEL_63;
        }
LABEL_75:
        unsigned __int16 v9 = 26160;
        return v9 | 0x26780000u;
      }
LABEL_73:
      unsigned __int16 v9 = 30260;
      return v9 | 0x26780000u;
    }
    if (a1 == 1751411059) {
      return 642527536;
    }
    if (a1 == 2016686640) {
      goto LABEL_67;
    }
    return 0;
  }
  if ((int)a1 <= 875836533)
  {
    if (a1 == 875704438) {
      return result;
    }
    int v7 = 875836518;
LABEL_59:
    if (a1 == v7) {
      return 641230388;
    }
    return 0;
  }
  if (a1 == 875836534) {
    return 641234484;
  }
  if (a1 != 1278226488)
  {
    if (a1 != 1278226736) {
      return 0;
    }
    return 642527536;
  }
  return 642527288;
}

__CFDictionary *sub_1BBA7C514(int a1, int a2, int a3)
{
  int v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unsigned __int16 v9 = CFDictionaryCreateMutable(0, 0, v6, v7);
  uint64_t v10 = CFDictionaryCreateMutable(0, 0, v6, v7);
  char v11 = CFDictionaryCreateMutable(0, 0, v6, v7);
  CFMutableArrayRef v12 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  uint64_t v13 = v12;
  if (Mutable) {
    BOOL v14 = v9 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  BOOL v16 = v14 || v10 == 0 || v12 == 0;
  int v17 = !v16;
  if (!v16)
  {
    if (qword_1EC027190 != -1) {
      dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
    }
    if (dword_1EC02719C <= 12)
    {
      int v34 = 0;
      int v18 = 4 * (dword_1EC02719C > 10);
      if (a3) {
        goto LABEL_18;
      }
    }
    else
    {
      int v18 = 4;
      int v34 = 4;
      if (a3)
      {
LABEL_18:
        if (a3 != 1)
        {
          int v19 = 0;
          int v35 = 0;
LABEL_40:
          if (dword_1EC02719C <= 12)
          {
            int valuePtr = 3;
            CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v23)
            {
              CFNumberRef v24 = v23;
              CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E4F2F210], v23);
              CFRelease(v24);
            }
          }
          uint64_t v25 = (const void *)*MEMORY[0x1E4F2F250];
          int valuePtr = v18;
          CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          if (v26)
          {
            CFNumberRef v27 = v26;
            CFDictionarySetValue(v10, v25, v26);
            CFRelease(v27);
          }
          int valuePtr = v34;
          CFNumberRef v28 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          if (v28)
          {
            CFNumberRef v29 = v28;
            CFDictionarySetValue(v11, v25, v28);
            CFRelease(v29);
          }
          CFArrayAppendValue(v13, v10);
          CFArrayAppendValue(v13, v11);
          CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E4F24EE0], v13);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v9);
          if (v19)
          {
            int valuePtr = v19;
            CFNumberRef v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v30)
            {
              CFNumberRef v31 = v30;
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24CE8], v30);
              CFRelease(v31);
            }
          }
          if (v35)
          {
            int valuePtr = v35;
            CFNumberRef v32 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v32)
            {
              CFNumberRef v33 = v32;
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24CD0], v32);
              CFRelease(v33);
            }
          }
          goto LABEL_53;
        }
        int v19 = (192 - a1) & ~((192 - a1) >> 31);
        int v20 = 96;
LABEL_38:
        int v35 = (v20 - a2) & ~((v20 - a2) >> 31);
        goto LABEL_40;
      }
    }
    int v19 = (160 - a1) & ~((160 - a1) >> 31);
    int v20 = 64;
    goto LABEL_38;
  }
  if (!v10)
  {
    if (!v11) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_53:
  CFRelease(v10);
  if (v11) {
LABEL_22:
  }
    CFRelease(v11);
LABEL_23:
  if (v9) {
    CFRelease(v9);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (Mutable) {
    char v21 = v17;
  }
  else {
    char v21 = 1;
  }
  if (v17) {
    uint64_t result = Mutable;
  }
  else {
    uint64_t result = 0;
  }
  if ((v21 & 1) == 0)
  {
    CFRelease(Mutable);
    return 0;
  }
  return result;
}

__CFDictionary *sub_1BBA7C89C(int a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = 0;
  values[1] = 0;
  uint64_t v209 = 0;
  uint64_t v210 = 0;
  if (qword_1EC027190 != -1) {
    dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
  }
  int v12 = a4 + 7;
  if (a4 < -7) {
    int v12 = a4 + 14;
  }
  int v195 = v12 >> 3;
  int v198 = a2;
  int v199 = (v12 >> 3) * a1;
  uint64_t v207 = 1;
  uint64_t v208 = 0;
  if ((dword_1EC02719C - 7) >= 4)
  {
    if ((dword_1EC02719C - 11) < 2)
    {
      if (a4 > 8) {
        int v15 = 1;
      }
      else {
        int v15 = 4;
      }
      LODWORD(v208) = 1;
      HIDWORD(v208) = v15;
      int v180 = v15;
      HIDWORD(v207) = a4 > 8;
      if (a5 <= 1278226487)
      {
        if (a5 > 875836517)
        {
          if (a5 == 875836518)
          {
            a5 = 1563977268;
            int v14 = 2;
            goto LABEL_64;
          }
          if (a5 != 875836534) {
            goto LABEL_65;
          }
          int v14 = 2;
          unsigned __int16 v19 = 30260;
LABEL_51:
          a5 = v19 | 0x5D380000;
          goto LABEL_64;
        }
        if (a5 != 875704422)
        {
          if (a5 != 875704438) {
            goto LABEL_65;
          }
          int v18 = 1563977264;
          goto LABEL_62;
        }
      }
      else
      {
        if (a5 > 1751411058)
        {
          if (a5 != 1751411059)
          {
            if (a5 != 2016686640)
            {
              if (a5 == 2019963440)
              {
                int v14 = 4;
                a5 = 1534617136;
LABEL_64:
                int v188 = 0;
                LODWORD(v210) = 4;
                int v13 = 1;
                goto LABEL_93;
              }
LABEL_65:
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
LABEL_66:
                *(_DWORD *)CMTime buf = 67109888;
                *(_DWORD *)&uint8_t buf[4] = HIBYTE(a5);
                __int16 v201 = 1024;
                int v202 = BYTE2(a5);
                __int16 v203 = 1024;
                int v204 = BYTE1(a5);
                __int16 v205 = 1024;
                int v206 = a5;
                _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Unsupported pixel format: %c%c%c%c\n", buf, 0x1Au);
              }
LABEL_240:
              char v148 = 0;
              uint64_t v141 = 0;
              goto LABEL_241;
            }
            int v18 = 1534617136;
LABEL_62:
            a5 = v18 | 0x1000;
            int v14 = 4;
            goto LABEL_64;
          }
LABEL_44:
          int v14 = 4;
          a5 = 1568171568;
          goto LABEL_64;
        }
        if (a5 != 1278226488)
        {
          if (a5 != 1278226736) {
            goto LABEL_65;
          }
          goto LABEL_44;
        }
      }
      int v14 = 4;
      unsigned __int16 v19 = 26160;
      goto LABEL_51;
    }
    int v16 = 641234480;
    uint64_t v207 = 0x300000003;
    uint64_t v208 = 0x500000005;
    if (a5 <= 796419631)
    {
      if (a5 > 758670895)
      {
        if (a5 <= 762869295)
        {
          if (a5 == 758670896) {
            goto LABEL_84;
          }
          if (a5 == 758674992) {
            goto LABEL_91;
          }
          int v20 = 762865200;
          goto LABEL_70;
        }
        if (a5 != 762869296)
        {
          if (a5 != 792225328)
          {
            int v17 = 792229424;
LABEL_82:
            if (a5 != v17)
            {
LABEL_239:
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_240;
              }
              goto LABEL_66;
            }
LABEL_91:
            int v14 = 0;
            uint64_t v210 = 0x400000004;
            int v188 = 1;
            int v180 = 5;
            int v13 = 5;
            goto LABEL_92;
          }
LABEL_84:
          int v16 = 641230384;
          goto LABEL_91;
        }
LABEL_88:
        int v16 = 645428784;
        goto LABEL_91;
      }
      if (a5 > 642527535)
      {
        if (a5 != 642527536)
        {
          if (a5 != 645424688)
          {
            int v21 = 645428784;
            goto LABEL_87;
          }
LABEL_89:
          int v16 = 645424688;
          goto LABEL_91;
        }
        goto LABEL_78;
      }
      if (a5 == 641230384) {
        goto LABEL_84;
      }
      if (a5 == 641234480) {
        goto LABEL_91;
      }
      if (a5 != 642527288) {
        goto LABEL_239;
      }
    }
    else
    {
      if (a5 > 1751411058)
      {
        if (a5 > 2084070959)
        {
          if (a5 <= 2088265263)
          {
            if (a5 != 2084070960)
            {
              int v17 = 2084075056;
              goto LABEL_82;
            }
            goto LABEL_84;
          }
          if (a5 != 2088265264)
          {
            int v21 = 2088269360;
LABEL_87:
            if (a5 != v21) {
              goto LABEL_239;
            }
            goto LABEL_88;
          }
          goto LABEL_89;
        }
        if (a5 != 1751411059)
        {
          if (a5 != 2016686640)
          {
            int v20 = 2019963440;
LABEL_70:
            if (a5 != v20) {
              goto LABEL_239;
            }
            goto LABEL_89;
          }
          goto LABEL_88;
        }
LABEL_78:
        int v16 = 642527536;
        goto LABEL_91;
      }
      if (a5 <= 875704437)
      {
        if (a5 == 796419632) {
          goto LABEL_89;
        }
        if (a5 != 796423728)
        {
          if (a5 != 875704422) {
            goto LABEL_239;
          }
          goto LABEL_84;
        }
        goto LABEL_88;
      }
      if (a5 == 875704438) {
        goto LABEL_91;
      }
      if (a5 != 1278226488)
      {
        if (a5 != 1278226736) {
          goto LABEL_239;
        }
        goto LABEL_78;
      }
    }
    int v16 = 642527288;
    goto LABEL_91;
  }
  if (a4 <= 8)
  {
    int v188 = 0;
    uint64_t v208 = 0x400000004;
    uint64_t v207 = 0;
    int v180 = 4;
    int v13 = 4;
    int v14 = 4;
    goto LABEL_93;
  }
  if (a5 <= 2016686639)
  {
    if (a5 == 1278226736 || a5 == 1751411059)
    {
      int v16 = 1568171568;
      goto LABEL_49;
    }
LABEL_30:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    goto LABEL_240;
  }
  int v16 = 1534617136;
  if (a5 == 2016686640)
  {
    int v16 = 1534621232;
    goto LABEL_49;
  }
  if (a5 != 2019963440) {
    goto LABEL_30;
  }
LABEL_49:
  int v188 = 0;
  uint64_t v207 = 0x100000001;
  uint64_t v208 = 0x100000001;
  int v14 = 4;
  int v180 = 1;
  int v13 = 1;
LABEL_92:
  a5 = v16;
LABEL_93:
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_240;
  }
  CFNumberRef v23 = Mutable;
  sub_1BBA7E094(v195, (unsigned int *)&v199, a1, &v198, v13, a3, v188);
  *(_DWORD *)CMTime buf = a1;
  CFNumberRef v24 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v24)
  {
    CFNumberRef v25 = v24;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E4F2F2C0], v24);
    CFRelease(v25);
  }
  *(_DWORD *)CMTime buf = a2;
  CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v26)
  {
    CFNumberRef v27 = v26;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E4F2F0E8], v26);
    CFRelease(v27);
  }
  CFNumberRef v28 = (const void *)*MEMORY[0x1E4F2EFE0];
  signed int v194 = v199;
  *(_DWORD *)CMTime buf = v199;
  CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v29)
  {
    CFNumberRef v30 = v29;
    CFDictionarySetValue(v23, v28, v29);
    CFRelease(v30);
  }
  *(_DWORD *)CMTime buf = v195;
  CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v31)
  {
    CFNumberRef v32 = v31;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E4F2EFD8], v31);
    CFRelease(v32);
  }
  *(_DWORD *)CMTime buf = 0;
  CFNumberRef v33 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v33)
  {
    CFNumberRef v34 = v33;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E4F2EFE8], v33);
    CFRelease(v34);
  }
  uint64_t v154 = (void *)v28;
  *(_DWORD *)CMTime buf = a5;
  CFNumberRef v35 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v35)
  {
    CFNumberRef v36 = v35;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E4F2F150], v35);
    CFRelease(v36);
  }
  LODWORD(v37) = v198;
  signed int v38 = (v198 * v194 + 511) & 0xFFFFFE00;
  CFMutableArrayRef value = (void *)*MEMORY[0x1E4F1CFD0];
  if (v14) {
    int v39 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    int v39 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E4F2EFD0], v39);
  *(_DWORD *)CMTime buf = v14;
  CFNumberRef v40 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
  if (v40)
  {
    CFNumberRef v41 = v40;
    CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E4F2EFC8], v40);
    CFRelease(v41);
  }
  int v156 = v23;
  char v42 = 0;
  uint64_t v43 = 0;
  signed int v44 = 0;
  unsigned int v178 = 0;
  char v192 = 0;
  int v171 = (void *)*MEMORY[0x1E4F2F168];
  CFStringRef key = (void *)*MEMORY[0x1E4F2F1C8];
  uint64_t v172 = (void *)*MEMORY[0x1E4F2F1C0];
  int v170 = (void *)*MEMORY[0x1E4F2F260];
  char v169 = (void *)*MEMORY[0x1E4F2F228];
  uint64_t v168 = (void *)*MEMORY[0x1E4F2F1B0];
  char v163 = (void *)*MEMORY[0x1E4F2F190];
  uint64_t v162 = (void *)*MEMORY[0x1E4F2F188];
  BOOL v176 = (void *)*MEMORY[0x1E4F2F178];
  char v175 = (void *)*MEMORY[0x1E4F2F170];
  int v161 = (void *)*MEMORY[0x1E4F2F1F0];
  int v160 = (void *)*MEMORY[0x1E4F2F1E8];
  int v167 = (void *)*MEMORY[0x1E4F2F250];
  char v166 = (void *)*MEMORY[0x1E4F2F230];
  int v165 = (void *)*MEMORY[0x1E4F2F1B8];
  int v159 = (void *)*MEMORY[0x1E4F2F180];
  int v157 = (void *)*MEMORY[0x1E4F2F210];
  int v158 = (void *)*MEMORY[0x1E4F2F208];
  int v186 = (const void *)*MEMORY[0x1E4F2F258];
  uint64_t v185 = (const void *)*MEMORY[0x1E4F2F220];
  CFNumberRef v184 = (const void *)*MEMORY[0x1E4F2F240];
  uint64_t v183 = (void *)*MEMORY[0x1E4F2F248];
  int v182 = (void *)*MEMORY[0x1E4F2EFB0];
  char v181 = (void *)*MEMORY[0x1E4F2F1D8];
  char v45 = 1;
  uint64_t v177 = a6;
  do
  {
    char v197 = v45;
    if (v42)
    {
      a2 >>= 1;
      int v198 = a2;
      sub_1BBA7E094(v195, (unsigned int *)&v199, a1, &v198, v180, a3, v188 & 1);
      LODWORD(v37) = v198;
      signed int v194 = v199;
      signed int v38 = v198 * v199;
    }
    CFMutableDictionaryRef v46 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    values[v43] = v46;
    if (!v46)
    {
LABEL_237:
      char v148 = 0;
      uint64_t v141 = v156;
      goto LABEL_241;
    }
    int v47 = v46;
    int v48 = *((_DWORD *)&v207 + v43);
    if (v48)
    {
      if (v48 == 3)
      {
        if (v197) {
          int v82 = -32;
        }
        else {
          int v82 = -16;
        }
        if (v197) {
          uint64_t v83 = 32;
        }
        else {
          uint64_t v83 = 16;
        }
        if (v197) {
          char v84 = 5;
        }
        else {
          char v84 = 4;
        }
        uint64_t v85 = 8;
        if (v197) {
          char v86 = 10;
        }
        else {
          char v86 = 8;
        }
        char v189 = v86;
        int v191 = a2;
        if (v197) {
          uint64_t v85 = 32;
        }
        int v193 = *((_DWORD *)&values[-1] + v43);
        unsigned int v87 = (v37 + v83 - 1 + v193) & v82;
        int v198 = v87;
        *(void *)CMTime buf = v85;
        CFNumberRef v88 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v88)
        {
          CFNumberRef v89 = v88;
          CFDictionarySetValue(v47, v171, v88);
          CFRelease(v89);
        }
        *(void *)CMTime buf = v83;
        CFNumberRef v90 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v90)
        {
          CFNumberRef v91 = v90;
          CFDictionarySetValue(v47, key, v90);
          CFRelease(v91);
        }
        *(void *)CMTime buf = v83;
        CFNumberRef v92 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v92)
        {
          CFNumberRef v93 = v92;
          CFDictionarySetValue(v47, v172, v92);
          CFRelease(v93);
        }
        unsigned int v94 = (v83 - 1 + a1) & v82;
        *(void *)CMTime buf = v94 >> v84;
        CFNumberRef v95 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v95)
        {
          CFNumberRef v96 = v95;
          CFDictionarySetValue(v47, v170, v95);
          CFRelease(v96);
        }
        *(void *)CMTime buf = v87 >> v84;
        CFNumberRef v97 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v97)
        {
          CFNumberRef v98 = v97;
          CFDictionarySetValue(v47, v169, v97);
          CFRelease(v98);
        }
        *(_DWORD *)CMTime buf = v44;
        CFNumberRef v99 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v99)
        {
          CFNumberRef v100 = v99;
          CFDictionarySetValue(v47, v168, v99);
          CFRelease(v100);
        }
        *(void *)CMTime buf = (v195 << v189);
        CFNumberRef v101 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v101)
        {
          CFNumberRef v102 = v101;
          CFDictionarySetValue(v47, v163, v101);
          CFRelease(v102);
        }
        unsigned int v178 = (v94 << v84) * v195;
        *(void *)CMTime buf = v178;
        CFNumberRef v103 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v103)
        {
          CFNumberRef v104 = v103;
          CFDictionarySetValue(v47, v162, v103);
          CFRelease(v104);
        }
        *(void *)CMTime buf = (v94 << v84) * v195;
        CFNumberRef v105 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v105)
        {
          CFNumberRef v106 = v105;
          CFDictionarySetValue(v47, v176, v105);
          CFRelease(v106);
        }
        *(void *)CMTime buf = (v195 << v189);
        CFNumberRef v107 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v107)
        {
          CFNumberRef v108 = v107;
          CFDictionarySetValue(v47, v175, v107);
          CFRelease(v108);
        }
        *(void *)CMTime buf = v83;
        CFNumberRef v109 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v109)
        {
          CFNumberRef v110 = v109;
          CFDictionarySetValue(v47, v161, v109);
          CFRelease(v110);
        }
        *(void *)CMTime buf = v83;
        CFNumberRef v111 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
        if (v111)
        {
          CFNumberRef v112 = v111;
          CFDictionarySetValue(v47, v160, v111);
          CFRelease(v112);
        }
        *(_DWORD *)CMTime buf = v193;
        CFNumberRef v113 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        a6 = v177;
        if (v113)
        {
          CFNumberRef v114 = v113;
          CFDictionarySetValue(v47, v167, v113);
          CFRelease(v114);
        }
        *(_DWORD *)CMTime buf = *((_DWORD *)&v209 + v43);
        CFNumberRef v115 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v115)
        {
          CFNumberRef v116 = v115;
          CFDictionarySetValue(v47, v166, v115);
          CFRelease(v116);
        }
        if ((((int)(v194 * v87) + 127) & 0xFFFFFFFFFFFFFF80) <= *(int *)(v177 + 4 * v43)) {
          unint64_t v117 = *(int *)(v177 + 4 * v43);
        }
        else {
          unint64_t v117 = ((int)(v194 * v87) + 127) & 0xFFFFFFFFFFFFFF80;
        }
        if (v197) {
          int v118 = 31;
        }
        else {
          int v118 = 15;
        }
        unsigned int v119 = (v118 + a1) >> v84;
        unsigned int v120 = (v191 + v118) >> v84;
        if (v197) {
          char v121 = 5;
        }
        else {
          char v121 = 3;
        }
        char v122 = vcvtps_u32_f32(log2f((float)v119));
        unint64_t v37 = ((((1 << v122 << vcvtps_u32_f32(log2f((float)v120)) << v121) + 127) & 0x1FFFFFF80)
             + v194
             + v117
             - 1)
            / v194;
        int v198 = v37;
        *(_DWORD *)CMTime buf = v44 + v117;
        CFNumberRef v123 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v123)
        {
          CFNumberRef v124 = v123;
          CFDictionarySetValue(v47, v165, v123);
          CFRelease(v124);
        }
        if ((int)((v194 * v37 + 127) & 0xFFFFFF80) <= *(_DWORD *)(a7 + 4 * v43) + *(_DWORD *)(v177 + 4 * v43)) {
          signed int v38 = *(_DWORD *)(a7 + 4 * v43) + *(_DWORD *)(v177 + 4 * v43);
        }
        else {
          signed int v38 = (v194 * v37 + 127) & 0xFFFFFF80;
        }
        if (a8) {
          *(_DWORD *)(a8 + 4 * v43) = v38 - v117;
        }
        char v192 = 1;
        LOBYTE(v188) = v197;
        a2 = v191;
      }
      else if (v48 == 1)
      {
        *(_DWORD *)CMTime buf = 16;
        CFNumberRef v49 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v49)
        {
          CFNumberRef v50 = v49;
          CFDictionarySetValue(v47, key, v49);
          CFRelease(v50);
        }
        *(_DWORD *)CMTime buf = 8;
        CFNumberRef v51 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v51)
        {
          CFNumberRef v52 = v51;
          CFDictionarySetValue(v47, v172, v51);
          CFRelease(v52);
        }
        if ((v37 & 7) != 0) {
          goto LABEL_237;
        }
        int v190 = a2;
        int v53 = *((_DWORD *)&v209 + v43);
        signed int v54 = ((v53 + 15) & 0xFFFFFFF0) + ((a1 + 15) & 0xFFFFFFF0);
        int v55 = *((_DWORD *)&values[-1] + v43);
        int v174 = v54 >> 4;
        *(_DWORD *)CMTime buf = v54 >> 4;
        CFNumberRef v56 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v56)
        {
          CFNumberRef v57 = v56;
          CFDictionarySetValue(v47, v170, v56);
          CFRelease(v57);
        }
        int v58 = (int)(v37 + ((v55 + 7) & 0xFFFFFFF8) + 63) >> 3;
        *(_DWORD *)CMTime buf = v58 & 0xFFFFFFF8;
        CFNumberRef v59 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v59)
        {
          CFNumberRef v60 = v59;
          CFDictionarySetValue(v47, v169, v59);
          CFRelease(v60);
        }
        *(_DWORD *)CMTime buf = 4;
        CFNumberRef v61 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v61)
        {
          CFNumberRef v62 = v61;
          CFDictionarySetValue(v47, v171, v61);
          CFRelease(v62);
        }
        unsigned int v63 = (2 * v54 + 127) & 0xFFFFFF80;
        *(_DWORD *)CMTime buf = v63;
        CFNumberRef v64 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v64)
        {
          CFNumberRef v65 = v64;
          CFDictionarySetValue(v47, v159, v64);
          CFRelease(v65);
        }
        *(_DWORD *)CMTime buf = 1;
        CFNumberRef v66 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v66)
        {
          CFNumberRef v67 = v66;
          CFDictionarySetValue(v47, v158, v66);
          CFRelease(v67);
        }
        *(_DWORD *)CMTime buf = 3;
        CFNumberRef v68 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v68)
        {
          CFNumberRef v69 = v68;
          CFDictionarySetValue(v47, v157, v68);
          CFRelease(v69);
        }
        *(_DWORD *)CMTime buf = v44;
        CFNumberRef v70 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v70)
        {
          CFNumberRef v71 = v70;
          CFDictionarySetValue(v47, v165, v70);
          CFRelease(v71);
        }
        *(_DWORD *)CMTime buf = v55;
        CFNumberRef v72 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v72)
        {
          CFNumberRef v73 = v72;
          CFDictionarySetValue(v47, v167, v72);
          CFRelease(v73);
        }
        *(_DWORD *)CMTime buf = v53;
        CFNumberRef v74 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v74)
        {
          CFNumberRef v75 = v74;
          CFDictionarySetValue(v47, v166, v74);
          CFRelease(v75);
        }
        int v76 = v58 | 7;
        if (v58 < 0) {
          int v76 = (v58 | 7) + 7;
        }
        signed int v77 = ((v76 >> 3) * v63 + 511) & 0xFFFFFE00;
        if (v77 <= *(_DWORD *)(a7 + 4 * v43)) {
          signed int v78 = *(_DWORD *)(a7 + 4 * v43);
        }
        else {
          signed int v78 = v77;
        }
        *(_DWORD *)CMTime buf = v78 + v44;
        CFNumberRef v79 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
        if (v79)
        {
          CFNumberRef v80 = v79;
          CFDictionarySetValue(v47, v168, v79);
          CFRelease(v80);
        }
        signed int v81 = (v195 << 7) * v174 * (v58 & 0xFFFFFFF8);
        a6 = v177;
        if (v81 <= *(_DWORD *)(v177 + 4 * v43)) {
          signed int v81 = *(_DWORD *)(v177 + 4 * v43);
        }
        signed int v38 = v81 + v78;
        a2 = v190;
      }
    }
    else if (v38 <= *(_DWORD *)(a6 + 4 * v43))
    {
      signed int v38 = *(_DWORD *)(a6 + 4 * v43);
    }
    *(_DWORD *)CMTime buf = a1;
    CFNumberRef v125 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v125)
    {
      CFNumberRef v126 = v125;
      CFDictionarySetValue(v47, v186, v125);
      CFRelease(v126);
    }
    *(_DWORD *)CMTime buf = a2;
    CFNumberRef v127 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v127)
    {
      CFNumberRef v128 = v127;
      CFDictionarySetValue(v47, v185, v127);
      CFRelease(v128);
    }
    *(_DWORD *)CMTime buf = v44;
    CFNumberRef v129 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v129)
    {
      CFNumberRef v130 = v129;
      CFDictionarySetValue(v47, v184, v129);
      CFRelease(v130);
    }
    if ((v192 & 1) == 0)
    {
      *(_DWORD *)CMTime buf = v194;
      CFNumberRef v131 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v131)
      {
        CFNumberRef v132 = v131;
        CFDictionarySetValue(v47, v176, v131);
        CFRelease(v132);
      }
      *(_DWORD *)CMTime buf = v195;
      CFNumberRef v133 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v133)
      {
        CFNumberRef v134 = v133;
        CFDictionarySetValue(v47, v175, v133);
        CFRelease(v134);
      }
    }
    *(_DWORD *)CMTime buf = v38;
    CFNumberRef v135 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v135)
    {
      CFNumberRef v136 = v135;
      CFDictionarySetValue(v47, v183, v135);
      CFRelease(v136);
    }
    *(_DWORD *)CMTime buf = *((_DWORD *)&v208 + v43);
    CFNumberRef v137 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v137)
    {
      CFNumberRef v138 = v137;
      CFDictionarySetValue(v47, v182, v137);
      CFRelease(v138);
    }
    *(_DWORD *)CMTime buf = v48;
    CFNumberRef v139 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v139)
    {
      CFNumberRef v140 = v139;
      CFDictionarySetValue(v47, v181, v139);
      CFRelease(v140);
    }
    char v45 = 0;
    v38 += v44;
    char v42 = 1;
    uint64_t v43 = 1;
    signed int v44 = v38;
  }
  while ((v197 & 1) != 0);
  uint64_t v141 = v156;
  if (v192)
  {
    *(void *)CMTime buf = v178;
    CFNumberRef v142 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
    if (v142)
    {
      CFNumberRef v143 = v142;
      CFDictionarySetValue(v156, v154, v142);
      CFRelease(v143);
    }
  }
  CFArrayRef v144 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E4F1D510]);
  if (v144)
  {
    CFArrayRef v145 = v144;
    CFDictionarySetValue(v156, (const void *)*MEMORY[0x1E4F2F238], v144);
    *(_DWORD *)CMTime buf = v38;
    CFNumberRef v146 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    if (v146)
    {
      CFNumberRef v147 = v146;
      CFDictionarySetValue(v156, (const void *)*MEMORY[0x1E4F2EFB8], v146);
      CFRelease(v147);
    }
    CFDictionarySetValue(v156, (const void *)*MEMORY[0x1E4F2F0F8], value);
    CFRelease(v145);
    char v148 = 1;
  }
  else
  {
    char v148 = 0;
  }
LABEL_241:
  uint64_t v149 = 0;
  char v150 = 1;
  do
  {
    char v151 = v150;
    int v152 = values[v149];
    if (v152) {
      CFRelease(v152);
    }
    char v150 = 0;
    uint64_t v149 = 1;
  }
  while ((v151 & 1) != 0);
  if ((v148 & 1) == 0 && v141)
  {
    CFRelease(v141);
    return 0;
  }
  return v141;
}

uint64_t sub_1BBA7DF24(__IOSurface *a1, int a2, char a3)
{
  IOSurfaceLock(a1, 0, 0);
  IOSurfaceRef buffer = a1;
  IOSurfaceRef v19[5] = a1;
  sub_1BBA70674((uint64_t)v19);
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    if (LODWORD(v19[7 * v6 + 10]) == 1)
    {
      uint64_t v9 = v19[7 * v6 + 7];
      int CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
      int CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
      int WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
      int HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
      if (HeightInCompressedTilesOfPlane >= 1)
      {
        unsigned int v14 = 0;
        int v15 = 0;
        do
        {
          if (WidthInCompressedTilesOfPlane >= 1)
          {
            for (int i = 0; i != WidthInCompressedTilesOfPlane; ++i)
            {
              *(_DWORD *)(v9 + (v14 >> a3) * a2 + 4 * ((i << a3) + (v14 & ~(-1 << a3)))) = v15 & 0xFFFFFFF;
              v15 += CompressedTileHeightOfPlane * CompressedTileWidthOfPlane;
            }
          }
          ++v14;
        }
        while (v14 != HeightInCompressedTilesOfPlane);
      }
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);

  return IOSurfaceUnlock(buffer, 0, 0);
}

void sub_1BBA7E094(int a1, unsigned int *a2, int a3, int *a4, int a5, int a6, int a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  switch(a5)
  {
    case 1:
      *a2 = (*a2 + 15) & 0xFFFFFFF0;
      if (a6 == 1)
      {
        int v10 = -16;
        int v11 = 15;
        goto LABEL_22;
      }
      if (!a6)
      {
        int v10 = -32;
        int v11 = 31;
LABEL_22:
        int v25 = *a4 + v11;
        goto LABEL_30;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return;
      }
      int v26 = 67109120;
      int v27 = a6;
      int v13 = MEMORY[0x1E4F14500];
      unsigned int v14 = "Unsupported codec type: %d\n";
      goto LABEL_35;
    case 2:
      double v15 = log2((double)(int)*a2);
      *a2 = (int)exp2(ceil(v15));
      double v16 = log2((double)*a4);
      int v17 = (int)exp2(ceil(v16));
      goto LABEL_31;
    case 3:
      double v18 = (double)a1;
      double v19 = log2(16384.0 / (double)a1) * 0.5;
      int v20 = (int)(exp2(floor(v19)) * v18);
      long double v21 = exp2(ceil(v19));
      *a2 = (int)(*a2 + v20 - 1) / v20 * v20;
      int v17 = (*a4 + (int)v21 - 1) / (int)v21 * (int)v21;
      goto LABEL_31;
    case 4:
      if (!a6)
      {
        *a2 = (*a2 + 31) & 0xFFFFFFE0;
        int v17 = (*a4 + 31) & 0xFFFFFFE0;
        goto LABEL_31;
      }
      if (a6 == 1)
      {
        *a2 = (*a2 + 15) & 0xFFFFFFF0;
        int v17 = (*a4 + 15) & 0xFFFFFFF0;
        goto LABEL_31;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return;
      }
      int v26 = 67109120;
      int v27 = a6;
      int v13 = MEMORY[0x1E4F14500];
      unsigned int v14 = "Unsupported codec type: %d\n";
      goto LABEL_35;
    case 5:
      int v22 = -16;
      if (a7) {
        int v10 = -32;
      }
      else {
        int v10 = -16;
      }
      if (a7) {
        int v23 = 32;
      }
      else {
        int v23 = 16;
      }
      if (a6 == 1)
      {
        int v24 = 15;
        goto LABEL_29;
      }
      if (!a6)
      {
        int v22 = -32;
        int v24 = 31;
LABEL_29:
        *a2 = (*a2 + v24) & v22;
        *a4 = (*a4 + v24) & v22;
        *a2 = ((a3 + v23 - 1) & v10) * a1;
        int v25 = v23 + *a4 - 1;
LABEL_30:
        int v17 = v25 & v10;
LABEL_31:
        *a4 = v17;
        return;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return;
      }
      int v26 = 67109120;
      int v27 = a6;
      int v13 = MEMORY[0x1E4F14500];
      unsigned int v14 = "Unsupported codec type: %d\n";
LABEL_35:
      _os_log_error_impl(&dword_1BB9B9000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v26, 8u);
      return;
    default:
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return;
      }
      int v26 = 67109120;
      int v27 = a5;
      int v13 = MEMORY[0x1E4F14500];
      unsigned int v14 = "Unknown address format %d\n";
      goto LABEL_35;
  }
}

uint64_t sub_1BBA7E404(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = *(__int16 *)(a2 + 90);
  int v4 = *(__int16 *)(a2 + 92);
  *(unsigned char *)(result + 40) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)(result + 48) = 0;
  *(_OWORD *)(result + 56) = 0u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 76) = v4;
  *(void *)uint64_t result = &unk_1F14EE008;
  *(void *)(result + 8) = 0;
  int v5 = (*(__int16 *)(a2 + 90) + 15) >> 4;
  int v6 = (*(__int16 *)(a2 + 92) + 15) >> 4;
  *(_DWORD *)(result + 104) = v6;
  *(_DWORD *)(result + 108) = v6 * v5;
  *(void *)(result + 160) = 0;
  *(void *)(result + 168) = 850045863;
  *(_OWORD *)(result + 2360) = 0u;
  *(_OWORD *)(result + 2376) = 0u;
  *(_OWORD *)(result + 2328) = 0u;
  *(_OWORD *)(result + 2344) = 0u;
  *(_OWORD *)(result + 2296) = 0u;
  *(_OWORD *)(result + 2312) = 0u;
  *(_OWORD *)(result + 2264) = 0u;
  *(_OWORD *)(result + 2280) = 0u;
  *(_DWORD *)(result + 2520) = 4;
  *(void *)(result + 88) = a2;
  *(void *)(result + 112) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_DWORD *)(result + 152) = 16777472;
  *(void *)(result + 2408) = 0;
  *(_DWORD *)(result + 256) = 0;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 848) = 0u;
  *(_OWORD *)(result + 864) = 0u;
  *(void *)(result + 2392) = 0;
  *(void *)(result + 2536) = 0;
  *(unsigned char *)(result + 2545) = 0;
  *(_DWORD *)(result + 2548) = 0;
  *(void *)(result + 2552) = 0;
  *(_DWORD *)(result + 96) = *(_DWORD *)(a2 + 516);
  *(_DWORD *)(result + 100) = v5;
  char v7 = (_OWORD *)(result + 304);
  *(_OWORD *)(result + 2240) = 0u;
  do
  {
    uint64_t v8 = result + 576 + v2;
    *(_OWORD *)(v8 + 352) = 0uLL;
    *(_OWORD *)(v8 + 368) = 0uLL;
    *(_OWORD *)(v8 + 320) = 0uLL;
    *(_OWORD *)(v8 + 336) = 0uLL;
    *char v7 = 0uLL;
    v7[17] = 0uLL;
    *(void *)(v8 + 304) = 0;
    *(void *)(v8 + 312) = 0;
    v2 += 80;
    ++v7;
  }
  while (v2 != 1360);
  return result;
}

uint64_t sub_1BBA7E50C(uint64_t a1)
{
  *(void *)a1 = &unk_1F14EE008;
  uint64_t v2 = *(const void **)(a1 + 248);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 248) = 0;
  }
  int v3 = *(OpaqueVTCompressionSession **)(a1 + 160);
  if (v3)
  {
    VTCompressionSessionInvalidate(v3);
    CFRelease(*(CFTypeRef *)(a1 + 160));
    *(void *)(a1 + 160) = 0;
  }
  if (*(int *)(a1 + 264) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = 0;
      char v6 = 1;
      do
      {
        char v7 = v6;
        uint64_t v8 = (CFTypeRef *)(a1 + 304 + 16 * v4 + 8 * v5);
        if (*v8)
        {
          CFRelease(*v8);
          *uint64_t v8 = 0;
        }
        uint64_t v9 = a1 + 16 * v4 + 8 * v5;
        int v10 = *(const void **)(v9 + 576);
        if (v10)
        {
          CFRelease(v10);
          *(void *)(v9 + 576) = 0;
        }
        char v6 = 0;
        uint64_t v5 = 1;
      }
      while ((v7 & 1) != 0);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 264));
  }
  int v11 = *(const void **)(a1 + 2536);
  if (v11) {
    CFRelease(v11);
  }
  int v12 = *(const void **)(a1 + 48);
  if (v12) {
    CFRelease(v12);
  }
  int v13 = *(const void **)(a1 + 56);
  if (v13) {
    CFRelease(v13);
  }
  unsigned int v14 = *(const void **)(a1 + 64);
  if (v14) {
    CFRelease(v14);
  }
  double v15 = *(NSObject **)(a1 + 232);
  if (v15)
  {
    if (*(int *)(a1 + 96) >= 1)
    {
      int v16 = 0;
      do
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 232));
        ++v16;
      }
      while (v16 < *(_DWORD *)(a1 + 96));
      double v15 = *(NSObject **)(a1 + 232);
    }
    dispatch_release(v15);
  }
  int v17 = *(const void **)(a1 + 2552);
  if (v17) {
    CFRelease(v17);
  }
  double v18 = *(void **)(a1 + 2368);
  if (v18)
  {
    *(void *)(a1 + 2376) = v18;
    operator delete(v18);
  }
  double v19 = *(void **)(a1 + 2344);
  if (v19)
  {
    *(void *)(a1 + 2352) = v19;
    operator delete(v19);
  }
  int v20 = *(void **)(a1 + 2320);
  if (v20)
  {
    *(void *)(a1 + 2328) = v20;
    operator delete(v20);
  }
  long double v21 = *(void **)(a1 + 2296);
  if (v21)
  {
    *(void *)(a1 + 2304) = v21;
    operator delete(v21);
  }
  int v22 = *(void **)(a1 + 2280);
  if (v22)
  {
    free(v22);
    *(void *)(a1 + 2280) = 0;
    *(void *)(a1 + 2288) = 0;
  }
  int v23 = *(void **)(a1 + 2264);
  if (v23)
  {
    free(v23);
    *(void *)(a1 + 2264) = 0;
    *(void *)(a1 + 2272) = 0;
  }
  int v24 = *(void **)(a1 + 864);
  if (v24)
  {
    free(v24);
    *(void *)(a1 + 864) = 0;
    *(void *)(a1 + 872) = 0;
  }
  int v25 = *(void **)(a1 + 848);
  if (v25)
  {
    free(v25);
    *(void *)(a1 + 848) = 0;
    *(void *)(a1 + 856) = 0;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 168));
  return a1;
}

int32x2_t sub_1BBA7E708(uint64_t a1, uint64_t a2, void *a3)
{
  int v3 = *(char **)(a1 + 88);
  if (v3[583] && *(unsigned char *)(a2 + 777) && !v3[582])
  {
    int v6 = *(_DWORD *)(a2 + 768);
    uint64_t v7 = (*(int *)(a2 + 788) >> v6);
    if ((int)v7 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = (*(int *)(a2 + 784) >> v6);
      uint64_t v12 = *(void *)(a2 + 2160);
      uint64_t v13 = *(void *)(a2 + 2144);
      int v14 = v6 - 4;
      uint64_t v15 = (1 << v14);
      uint64_t v16 = *(void *)(a2 + 2056);
      uint64_t v17 = 2 * *a3;
      uint64_t v18 = 4 * *a3;
      do
      {
        if ((int)v11 >= 1)
        {
          uint64_t v19 = 0;
          int v20 = (unsigned __int16 *)(a3[42] + v9);
          uint64_t v21 = v8;
          do
          {
            if (v14 == 31)
            {
              int v22 = 0;
              unsigned int v23 = 0;
            }
            else
            {
              uint64_t v24 = 0;
              int v22 = 0;
              int v25 = v20;
              do
              {
                int v26 = v25;
                uint64_t v27 = (1 << v14);
                do
                {
                  int v28 = *v26++;
                  v22 += v28;
                  --v27;
                }
                while (v27);
                ++v24;
                int v25 = (unsigned __int16 *)((char *)v25 + v17);
              }
              while (v24 != v15);
              uint64_t v29 = 0;
              unsigned int v23 = 0;
              CFNumberRef v30 = (int *)(a3[45] + v21);
              do
              {
                CFNumberRef v31 = v30;
                uint64_t v32 = (1 << v14);
                do
                {
                  int v33 = *v31++;
                  v23 += v33;
                  --v32;
                }
                while (v32);
                ++v29;
                CFNumberRef v30 = (int *)((char *)v30 + v18);
              }
              while (v29 != v15);
            }
            *(_DWORD *)(v13 + 4 * v19) = v22;
            *(void *)(v12 + 8 * v19++) = v23;
            ++v20;
            v21 += 4;
          }
          while (v19 != v11);
        }
        v13 += 4 * v16;
        v12 += 8 * v16;
        ++v10;
        v9 += v17;
        v8 += v18;
      }
      while (v10 != v7);
    }
    if (v3[55] > 1)
    {
      sub_1BBA87854((int *)(a2 + 768));
      int v3 = *(char **)(a1 + 88);
    }
    if (v3[600])
    {
      CFNumberRef v35 = *(int32x2_t **)(a2 + 1048);
      CFNumberRef v36 = *(int32x2_t **)(*(void *)&v35[1] + 608);
      v35[287].i32[0] = v36[153].i32[0];
      int32x2_t v37 = v36[152];
      v35[286] = v37;
      int32x2_t result = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmul_s32(v35[285], (int32x2_t)0xA0000000DLL), v37, (int32x2_t)0x600000003), (int32x2_t)0x800000008), 4uLL);
      v35[285] = result;
    }
  }
  return result;
}

const void **sub_1BBA7E8E8(uint64_t a1, IOSurfaceID csid)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = IOSurfaceLookup(csid);
  int v15 = 8;
  OSType valuePtr = IOSurfaceGetPixelFormat(v16);
  CFDictionaryRef v13 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, valuePtr);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F24EC0]);
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F24E20]);
  if (v4) {
    CFNumberGetValue(v4, kCFNumberSInt32Type, &v15);
  }
  *(_DWORD *)(a1 + 44) = (valuePtr & 0xFFFFFFEF) != 875836518;
  if (*(_DWORD *)a1 == 1752589105)
  {
    int v6 = 0;
    int32x2_t v5 = vmax_s32((int32x2_t)(*(void *)&vadd_s32(*(int32x2_t *)(a1 + 4), (int32x2_t)0x1F0000001FLL) & 0xFFFFFFE0FFFFFFE0), (int32x2_t)0x40000000A0);
  }
  else if (*(_DWORD *)a1 == 1635148593)
  {
    int32x2_t v5 = vmax_s32((int32x2_t)(*(void *)&vadd_s32(*(int32x2_t *)(a1 + 4), (int32x2_t)0xF0000000FLL) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0x60000000C0);
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
    int32x2_t v5 = 0;
  }
  uint64_t v12 = 0;
  unsigned int v11 = 0;
  unsigned int v10 = 0;
  if (qword_1EC027190 != -1)
  {
    int32x2_t v8 = v5;
    dispatch_once_f(&qword_1EC027190, 0, (dispatch_function_t)sub_1BBA3F73C);
    int32x2_t v5 = v8;
  }
  if (!sub_1BBA7BA1C(v5.i32[0], v5.i32[1], dword_1EC02719C, v6, valuePtr, (signed int *)(a1 + 20), (signed int *)(a1 + 28), (_DWORD *)&v12 + 1, &v12, &v11, &v10, (_DWORD *)(a1 + 12), (unsigned int *)(a1 + 16)))
  {
    v18[0] = HIDWORD(v12);
    v18[1] = v12;
    v17[0] = v11;
    v17[1] = v10;
    uint64_t v9 = sub_1BBA7C89C(*(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), v6, v15, valuePtr, (uint64_t)v18, (uint64_t)v17, a1 + 36);
    sub_1BB9BE1C0((const void **)&v9);
  }
  sub_1BB9BE1C0((const void **)&v13);
  return sub_1BBA7ECB0((const void **)&v16);
}

void sub_1BBA7EB1C(_Unwind_Exception *a1)
{
  sub_1BB9BE1C0((const void **)(v1 - 64));
  sub_1BBA7ECB0((const void **)(v1 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA7EB4C(uint64_t a1, CVPixelBufferRef **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  int32x2_t v5 = (CFTypeRef *)(v3 + 48);
  CFNumberRef v4 = *(__CVPixelBufferPool **)(v3 + 48);
  if (v4) {
    return CVPixelBufferPoolCreatePixelBuffer(0, v4, v2);
  }
  CFDictionaryRef pixelBufferAttributes = 0;
  sub_1BBA15BC8(*(_DWORD *)(v3 + 4), *(_DWORD *)(v3 + 8), 71, 71, 71, 71, 875704438, &pixelBufferAttributes);
  CFDictionaryRef v7 = pixelBufferAttributes;
  if (*v5)
  {
    CFRelease(*v5);
    *int32x2_t v5 = 0;
  }
  uint64_t v6 = CVPixelBufferPoolCreate(0, 0, v7, (CVPixelBufferPoolRef *)v5);
  sub_1BB9BE228((const void **)&pixelBufferAttributes);
  if (!v6)
  {
    CFNumberRef v4 = (__CVPixelBufferPool *)*v5;
    return CVPixelBufferPoolCreatePixelBuffer(0, v4, v2);
  }
  return v6;
}

void sub_1BBA7EC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1BB9BE228((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA7EC2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1F14ED6B8;
  a2[1] = v2;
  return result;
}

void *sub_1BBA7EC50(uint64_t a1)
{
  int32x2_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int32x2_t result = &off_1F14ED6B8;
  result[1] = v3;
  return result;
}

void sub_1BBA7EC98()
{
}

const void **sub_1BBA7ECB0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1BBA7ECE4(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 48);
  int v2 = *(_DWORD *)(result + 56);
  if ((int)v1 < v2)
  {
    uint64_t v3 = result;
    int v4 = 0;
    int v5 = 0;
    int v23 = 0;
    int v6 = 0;
    int v7 = *(_DWORD *)(result + 60);
    uint64_t v22 = *(void *)(result + 1312) + 4 * v7 * (int)v1;
    uint64_t v21 = *(void *)(result + 1328) + 4 * v7 * (int)v1;
    int v8 = *(_DWORD *)(result + 52);
    do
    {
      uint64_t v9 = *(int *)(v3 + 44);
      if ((int)v9 < v8)
      {
        int v10 = 8 * v9;
        do
        {
          int v11 = *(_DWORD *)(v22 + 4 * v9);
          if (*(unsigned char *)(v3 + 13))
          {
            int v12 = v5;
            int v13 = v4;
            int v14 = *(_DWORD *)(v21 + 4 * v9);
            int32x2_t result = sub_1BBA7EED0(v3, v10, 8 * v1, 8);
            int v15 = v23;
            int v16 = v14 + v23;
            int v17 = v14 + v6;
            int v4 = v13;
            if (result) {
              int v15 = v16;
            }
            else {
              int v6 = v17;
            }
            int v23 = v15;
            int v5 = (result & 1) != 0 ? v12 : v12 + 1;
            if (result) {
              ++v4;
            }
          }
          if (*(unsigned char *)(v3 + 10))
          {
            int32x2_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void))(v3 + 8 * *(unsigned int *)(v3 + 204) + 232))(v9, v1, *(unsigned int *)(v3 + 60), *(unsigned int *)(v3 + 64), (v11 + 32) >> 6, *(void *)(v3 + 1312), *(void *)(v3 + 1360));
            int v8 = *(_DWORD *)(v3 + 52);
          }
          ++v9;
          v10 += 8;
        }
        while (v9 < v8);
        int v2 = *(_DWORD *)(v3 + 56);
        int v7 = *(_DWORD *)(v3 + 60);
      }
      v21 += 4 * v7;
      v22 += 4 * v7;
      uint64_t v1 = (v1 + 1);
    }
    while ((int)v1 < v2);
    if (*(unsigned char *)(v3 + 13))
    {
      if (v5 >= 1)
      {
        unsigned int v18 = (int)(v6 + (v5 >> 1)) / v5;
        if (v18 >= 2)
        {
          unsigned int v19 = __clz(v18);
          unsigned int v20 = ((byte_1BBB8A634[(unint64_t)(v18 << (v19 + 1)) >> 24] << 12) | 0x200000u) >> ((v19 + 1) >> 1);
          if ((v19 & 1) == 0) {
            unsigned int v20 = (11585 * v20) >> 14;
          }
          unsigned int v18 = (v20 + 16) >> 5;
        }
        *(_DWORD *)(v3 + 1748) = v18;
        *(_DWORD *)(v3 + 1752) = v6;
      }
      if (v4) {
        *(_DWORD *)(v3 + 1740) = v23;
      }
    }
  }
  return result;
}

BOOL sub_1BBA7EED0(uint64_t a1, int a2, int a3, int a4)
{
  unint64_t v4 = *(unsigned int *)(a1 + 1756);
  if ((int)v4 < 1)
  {
    return 0;
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = (_DWORD *)(a1 + 1852);
    BOOL v7 = 1;
    int v8 = a2 + (a4 >> 1);
    int v9 = a3 + (a4 >> 1);
    do
    {
      int v10 = *(v6 - 3);
      if (v8 > v10)
      {
        int v11 = *(v6 - 2);
        BOOL v12 = v8 >= *(v6 - 1) + v10 || v9 <= v11;
        if (!v12 && v9 < v11 + *v6) {
          break;
        }
      }
      BOOL v7 = ++v5 < v4;
      v6 += 4;
    }
    while (v4 != v5);
  }
  return v7;
}

uint64_t sub_1BBA7EF44(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 48);
  int v2 = *(_DWORD *)(result + 56);
  if ((int)v1 < v2)
  {
    uint64_t v3 = result;
    int v4 = 0;
    int v5 = 0;
    int v23 = 0;
    int v6 = 0;
    int v7 = *(_DWORD *)(result + 60);
    uint64_t v22 = *(void *)(result + 1312) + 2 * v7 * (int)v1;
    uint64_t v21 = *(void *)(result + 1328) + 2 * v7 * (int)v1;
    int v8 = *(_DWORD *)(result + 52);
    do
    {
      uint64_t v9 = *(int *)(v3 + 44);
      if ((int)v9 < v8)
      {
        int v10 = 8 * v9;
        do
        {
          int v11 = *(unsigned __int16 *)(v22 + 2 * v9);
          if (*(unsigned char *)(v3 + 13))
          {
            int v12 = v5;
            int v13 = v4;
            int v14 = *(unsigned __int16 *)(v21 + 2 * v9);
            int32x2_t result = sub_1BBA7EED0(v3, v10, 8 * v1, 8);
            int v15 = v23;
            int v16 = v23 + v14;
            int v17 = v6 + v14;
            int v4 = v13;
            if (result) {
              int v15 = v16;
            }
            else {
              int v6 = v17;
            }
            int v23 = v15;
            int v5 = (result & 1) != 0 ? v12 : v12 + 1;
            if (result) {
              ++v4;
            }
          }
          if (*(unsigned char *)(v3 + 10))
          {
            int32x2_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void))(v3 + 8 * *(unsigned int *)(v3 + 204) + 232))(v9, v1, *(unsigned int *)(v3 + 60), *(unsigned int *)(v3 + 64), (v11 + 32) >> 6, *(void *)(v3 + 1312), *(void *)(v3 + 1360));
            int v8 = *(_DWORD *)(v3 + 52);
          }
          ++v9;
          v10 += 8;
        }
        while (v9 < v8);
        int v2 = *(_DWORD *)(v3 + 56);
        int v7 = *(_DWORD *)(v3 + 60);
      }
      v21 += 2 * v7;
      v22 += 2 * v7;
      uint64_t v1 = (v1 + 1);
    }
    while ((int)v1 < v2);
    if (*(unsigned char *)(v3 + 13))
    {
      if (v5 >= 1)
      {
        unsigned int v18 = (int)(v6 + (v5 >> 1)) / v5;
        if (v18 >= 2)
        {
          unsigned int v19 = __clz(v18);
          unsigned int v20 = ((byte_1BBB8A634[(unint64_t)(v18 << (v19 + 1)) >> 24] << 12) | 0x200000u) >> ((v19 + 1) >> 1);
          if ((v19 & 1) == 0) {
            unsigned int v20 = (11585 * v20) >> 14;
          }
          unsigned int v18 = (v20 + 16) >> 5;
        }
        *(_DWORD *)(v3 + 1748) = v18;
        *(_DWORD *)(v3 + 1752) = v6;
      }
      if (v4) {
        *(_DWORD *)(v3 + 1740) = v23;
      }
    }
  }
  return result;
}

uint64_t sub_1BBA7F130(uint64_t a1)
{
  for (uint64_t i = 200; i != 168; i -= 16)
  {
    uint64_t v3 = (void *)(a1 + i);
    int v4 = *(void **)(a1 + i);
    if (v4)
    {
      free(v4);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
  }
  int v5 = *(void **)(a1 + 168);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  return a1;
}

void sub_1BBA7F194(char **a1)
{
  int v2 = *a1;
  if (v2)
  {
    if (a1[1])
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      uint64_t v5 = 1296;
      uint64_t v6 = 1040;
      uint64_t v7 = 784;
      do
      {
        uint64_t v8 = 0;
        uint64_t v9 = *a1;
        uint64_t v10 = (uint64_t)&(*a1)[v5];
        do
        {
          int v11 = *(std::__shared_weak_count **)(v10 + v8);
          if (v11) {
            sub_1BB9C09B4(v11);
          }
          v8 -= 16;
        }
        while (v8 != -256);
        for (uint64_t i = 0; i != -256; i -= 16)
        {
          int v13 = *(std::__shared_weak_count **)&v9[v6 + i];
          if (v13) {
            sub_1BB9C09B4(v13);
          }
        }
        for (uint64_t j = 0; j != -256; j -= 16)
        {
          int v15 = *(std::__shared_weak_count **)&v9[v7 + j];
          if (v15) {
            sub_1BB9C09B4(v15);
          }
        }
        for (uint64_t k = 528; k != 272; k -= 16)
        {
          int v17 = *(std::__shared_weak_count **)&v9[v3 + k];
          if (v17) {
            sub_1BB9C09B4(v17);
          }
        }
        unsigned int v18 = &v9[v3];
        for (uint64_t m = 272; m != 16; m -= 16)
        {
          unsigned int v20 = *(std::__shared_weak_count **)&v18[m];
          if (v20) {
            sub_1BB9C09B4(v20);
          }
        }
        ++v4;
        v5 += 1304;
        v6 += 1304;
        v7 += 1304;
        v3 += 1304;
      }
      while (v4 < (unint64_t)a1[1]);
      int v2 = *a1;
    }
    free(v2);
    *a1 = 0;
    a1[1] = 0;
  }
}

uint64_t sub_1BBA7F2C8(void **memptr, unint64_t a2)
{
  if ((unint64_t)memptr[1] >= a2) {
    return 0;
  }
  if (a2 > 0xC80000) {
    return 4294954392;
  }
  unint64_t v4 = *memptr;
  if (v4)
  {
    free(v4);
    void *memptr = 0;
    memptr[1] = 0;
  }
  if (malloc_type_posix_memalign(memptr, 0x10uLL, 8 * a2, 0x100004000313F17uLL) || !*memptr) {
    return 4294954392;
  }
  bzero(*memptr, 8 * a2);
  uint64_t result = 0;
  memptr[1] = (void *)a2;
  return result;
}

uint64_t sub_1BBA7F368(uint64_t memptr, size_t size)
{
  if (*(void *)(memptr + 8) < size && size <= 0x6400000)
  {
    uint64_t v4 = memptr;
    uint64_t v5 = *(void **)memptr;
    if (v5)
    {
      free(v5);
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    memptr = malloc_type_posix_memalign((void **)v4, 0x10uLL, size, 0x100004077774924uLL);
    if (!memptr && *(void *)v4)
    {
      uint64_t v6 = 0;
      do
        *(unsigned char *)(*(void *)v4 + v6++) = 0;
      while (size != v6);
      *(void *)(v4 + 8) = size;
    }
  }
  return memptr;
}

uint64_t sub_1BBA7F3F8(int a1, int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7)
{
  if ((int)(a4 + 15) >> 4 >= (int)(a3 + 15) >> 4) {
    int v7 = (int)(a3 + 15) >> 4;
  }
  else {
    int v7 = (int)(a4 + 15) >> 4;
  }
  uint64_t v8 = (a2 - v7) & ~((a2 - v7) >> 31);
  if (v7 + a2 >= (int)a4) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = (v7 + a2);
  }
  if ((int)v8 >= (int)v9)
  {
    int v11 = 0;
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    int v11 = 0;
    LODWORD(v12) = v7 + a1;
    if (v7 + a1 >= (int)a3) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = v12;
    }
    uint64_t v13 = (a1 - v7) & ~((a1 - v7) >> 31);
    int v14 = (int *)(a6 + 4 * (v13 + (int)a3 * v8));
    do
    {
      if ((int)v12 > (int)v13)
      {
        int v15 = v14;
        uint64_t v16 = v12 - v13;
        do
        {
          int v17 = *v15++;
          v11 += v17;
          --v16;
        }
        while (v16);
        v10 += v12 - v13;
      }
      ++v8;
      v14 += (int)a3;
    }
    while (v8 != v9);
  }
  unsigned int v18 = a1 + a3 * a2;
  unsigned int v19 = v11 + (v10 >> 1);
  BOOL v20 = __OFSUB__(a5, (v19 / v10 + 32) >> 6);
  int v21 = a5 - ((v19 / v10 + 32) >> 6);
  if ((v21 < 0) ^ v20 | (v21 == 0)) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 1;
  }
  if (v21 < 0) {
    int v21 = -v21;
  }
  *(_DWORD *)(a7 + 4 * v18) = v21;
  return result;
}

float sub_1BBA7F4C8(int a1, int a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = a1 + a3 * a2;
  long long v16 = xmmword_1BBB701B0;
  if (a1 >= 1)
  {
    LODWORD(v16) = (*(_DWORD *)(a6 + 4 * (v7 - 1)) + 32) >> 6;
    __int32 v8 = v16 + 2;
    if (a2 > 0)
    {
      unsigned int v9 = v7 - a3;
      unsigned int v10 = (*(_DWORD *)(a6 + 4 * (v7 - a3)) + 32) >> 6;
      DWORD2(v16) = v10;
      unsigned int v11 = (*(_DWORD *)(a6 + 4 * (v7 + ~a3)) + 32) >> 6;
      uint64_t v12 = 1;
      int v13 = v11;
      goto LABEL_6;
    }
    unsigned int v14 = 128;
LABEL_11:
    unsigned int v10 = 128;
    int v13 = 128;
    goto LABEL_12;
  }
  if (a2 < 1)
  {
    unsigned int v14 = 128;
    __int32 v8 = 130;
    goto LABEL_11;
  }
  unsigned int v9 = v7 - a3;
  unsigned int v11 = (*(_DWORD *)(a6 + 4 * (v7 - a3)) + 32) >> 6;
  int v13 = 128;
  __int32 v8 = 130;
  uint64_t v12 = 2;
  unsigned int v10 = v11;
LABEL_6:
  *(_DWORD *)((unint64_t)&v16 | (4 * v12)) = v11;
  if (a1 + 1 >= a3)
  {
    unsigned int v14 = 128;
  }
  else
  {
    unsigned int v14 = (*(_DWORD *)(a6 + 4 * (v9 + 1)) + 32) >> 6;
    HIDWORD(v16) = v14;
  }
LABEL_12:
  float result = COERCE_FLOAT(vminvq_s32(vminq_s32(vabdq_s32((int32x4_t)v16, vdupq_n_s32(a5)), vdupq_n_s32(((v8 + v14 + v13 + v10) >> 2) - a5))));
  *(float *)(a7 + 4 * v7) = result;
  return result;
}

uint64_t sub_1BBA7F62C(int a1, int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7)
{
  if ((int)(a4 + 15) >> 4 >= (int)(a3 + 15) >> 4) {
    int v7 = (int)(a3 + 15) >> 4;
  }
  else {
    int v7 = (int)(a4 + 15) >> 4;
  }
  uint64_t v8 = (a2 - v7) & ~((a2 - v7) >> 31);
  if (v7 + a2 >= (int)a4) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = (v7 + a2);
  }
  if ((int)v8 >= (int)v9)
  {
    int v11 = 0;
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    int v11 = 0;
    LODWORD(v12) = v7 + a1;
    if (v7 + a1 >= (int)a3) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = v12;
    }
    uint64_t v13 = (a1 - v7) & ~((a1 - v7) >> 31);
    unsigned int v14 = (unsigned __int16 *)(a6 + 2 * (v13 + (int)a3 * v8));
    do
    {
      if ((int)v12 > (int)v13)
      {
        int v15 = v14;
        uint64_t v16 = v12 - v13;
        do
        {
          int v17 = *v15++;
          v11 += v17;
          --v16;
        }
        while (v16);
        v10 += v12 - v13;
      }
      ++v8;
      v14 += (int)a3;
    }
    while (v8 != v9);
  }
  unsigned int v18 = a1 + a3 * a2;
  unsigned int v19 = v11 + (v10 >> 1);
  BOOL v20 = __OFSUB__(a5, (v19 / v10 + 32) >> 6);
  int v21 = a5 - ((v19 / v10 + 32) >> 6);
  if ((v21 < 0) ^ v20 | (v21 == 0)) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 1;
  }
  if (v21 < 0) {
    int v21 = -v21;
  }
  *(_DWORD *)(a7 + 4 * v18) = v21;
  return result;
}

float sub_1BBA7F6FC(int a1, int a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = a1 + a3 * a2;
  long long v16 = xmmword_1BBB701B0;
  if (a1 >= 1)
  {
    LODWORD(v16) = (*(unsigned __int16 *)(a6 + 2 * (v7 - 1)) + 32) >> 6;
    __int32 v8 = v16 + 2;
    if (a2 > 0)
    {
      unsigned int v9 = v7 - a3;
      unsigned int v10 = (*(unsigned __int16 *)(a6 + 2 * (v7 - a3)) + 32) >> 6;
      DWORD2(v16) = v10;
      unsigned int v11 = (*(unsigned __int16 *)(a6 + 2 * (v7 + ~a3)) + 32) >> 6;
      uint64_t v12 = 1;
      int v13 = v11;
      goto LABEL_6;
    }
    unsigned int v14 = 128;
LABEL_11:
    unsigned int v10 = 128;
    int v13 = 128;
    goto LABEL_12;
  }
  if (a2 < 1)
  {
    unsigned int v14 = 128;
    __int32 v8 = 130;
    goto LABEL_11;
  }
  unsigned int v9 = v7 - a3;
  unsigned int v11 = (*(unsigned __int16 *)(a6 + 2 * (v7 - a3)) + 32) >> 6;
  int v13 = 128;
  __int32 v8 = 130;
  uint64_t v12 = 2;
  unsigned int v10 = v11;
LABEL_6:
  *(_DWORD *)((unint64_t)&v16 | (4 * v12)) = v11;
  if (a1 + 1 >= a3)
  {
    unsigned int v14 = 128;
  }
  else
  {
    unsigned int v14 = (*(unsigned __int16 *)(a6 + 2 * (v9 + 1)) + 32) >> 6;
    HIDWORD(v16) = v14;
  }
LABEL_12:
  float result = COERCE_FLOAT(vminvq_s32(vminq_s32(vabdq_s32((int32x4_t)v16, vdupq_n_s32(a5)), vdupq_n_s32(((v8 + v14 + v13 + v10) >> 2) - a5))));
  *(float *)(a7 + 4 * v7) = result;
  return result;
}

uint64_t sub_1BBA7F860(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a5 > 15) {
    return 0;
  }
  uint64_t v6 = result;
  LODWORD(result) = 0;
  uint64_t v7 = a2 + 2 * a5 * a4;
  uint64_t v8 = v6 + 2 * a5 * a3;
  do
  {
    uint64_t v9 = 0;
    int32x4_t v10 = 0uLL;
    int32x4_t v11 = (int32x4_t)result;
    do
    {
      uint16x8_t v12 = *(uint16x8_t *)(v8 + v9);
      uint16x8_t v13 = *(uint16x8_t *)(v7 + v9);
      int32x4_t v14 = (int32x4_t)vsubl_high_u16(v12, v13);
      int32x4_t v15 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v12.i8, *(uint16x4_t *)v13.i8);
      int32x4_t v10 = vmlaq_s32(v10, v14, v14);
      int32x4_t v11 = vmlaq_s32(v11, v15, v15);
      v9 += 16;
    }
    while (v9 != 32);
    float result = vaddvq_s32(vaddq_s32(v11, v10));
    a5 += a6;
    v7 += 2 * a4 * a6;
    v8 += 2 * a3 * a6;
  }
  while (a5 < 16);
  return result;
}

uint64_t sub_1BBA7F8F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a5 > 15) {
    return 0;
  }
  uint64_t v6 = result;
  LODWORD(result) = 0;
  uint64_t v7 = (uint8x16_t *)(a2 + a5 * a4);
  uint64_t v8 = (uint8x16_t *)(v6 + a5 * a3);
  do
  {
    int16x8_t v9 = (int16x8_t)vsubl_high_u8(*v8, *v7);
    int16x8_t v10 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v8->i8, *(uint8x8_t *)v7->i8);
    float result = vaddvq_s32(vaddq_s32(vmlal_s16(vmlal_s16((int32x4_t)result, *(int16x4_t *)v10.i8, *(int16x4_t *)v10.i8), *(int16x4_t *)v9.i8, *(int16x4_t *)v9.i8), vmlal_high_s16(vmull_high_s16(v10, v10), v9, v9)));
    uint64_t v8 = (uint8x16_t *)((char *)v8 + a6 * a3);
    uint64_t v7 = (uint8x16_t *)((char *)v7 + a6 * a4);
    a5 += a6;
  }
  while (a5 < 16);
  return result;
}

uint64_t sub_1BBA7F974(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a5 > 31) {
    return 0;
  }
  uint64_t v6 = result;
  LODWORD(result) = 0;
  uint64_t v7 = a2 + a5 * a4;
  uint64_t v8 = v6 + a5 * a3;
  do
  {
    uint64_t v9 = 0;
    int32x4_t v10 = 0uLL;
    int32x4_t v11 = (int32x4_t)result;
    int32x4_t v12 = 0uLL;
    int32x4_t v13 = 0uLL;
    do
    {
      uint8x16_t v14 = *(uint8x16_t *)(v8 + v9);
      uint8x16_t v15 = *(uint8x16_t *)(v7 + v9);
      int16x8_t v16 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v15.i8);
      int16x8_t v17 = (int16x8_t)vsubl_high_u8(v14, v15);
      int32x4_t v13 = vmlal_high_s16(v13, v17, v17);
      int32x4_t v12 = vmlal_s16(v12, *(int16x4_t *)v17.i8, *(int16x4_t *)v17.i8);
      int32x4_t v10 = vmlal_high_s16(v10, v16, v16);
      int32x4_t v11 = vmlal_s16(v11, *(int16x4_t *)v16.i8, *(int16x4_t *)v16.i8);
      v9 += 16;
    }
    while (v9 != 32);
    float result = vaddvq_s32(vaddq_s32(vaddq_s32(v11, v12), vaddq_s32(v10, v13)));
    v8 += a6 * a3;
    v7 += a6 * a4;
    a5 += a6;
  }
  while (a5 < 32);
  return result;
}

uint64_t sub_1BBA7FA14(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a5 > 31) {
    return 0;
  }
  uint64_t v6 = result;
  LODWORD(result) = 0;
  uint64_t v7 = a2 + 2 * a5 * a4;
  uint64_t v8 = v6 + 2 * a5 * a3;
  do
  {
    uint64_t v9 = 0;
    int32x4_t v10 = 0uLL;
    int32x4_t v11 = (int32x4_t)result;
    do
    {
      uint16x8_t v12 = *(uint16x8_t *)(v8 + v9);
      uint16x8_t v13 = *(uint16x8_t *)(v7 + v9);
      int32x4_t v14 = (int32x4_t)vsubl_high_u16(v12, v13);
      int32x4_t v15 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v12.i8, *(uint16x4_t *)v13.i8);
      int32x4_t v10 = vmlaq_s32(v10, v14, v14);
      int32x4_t v11 = vmlaq_s32(v11, v15, v15);
      v9 += 16;
    }
    while (v9 != 64);
    float result = vaddvq_s32(vaddq_s32(v11, v10));
    a5 += a6;
    v7 += 2 * a4 * a6;
    v8 += 2 * a3 * a6;
  }
  while (a5 < 32);
  return result;
}

uint64_t sub_1BBA7FAAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a5 > 15) {
    return 0;
  }
  uint64_t v6 = result;
  LODWORD(result) = 0;
  uint64_t v7 = a2 + 2 * a5 * a4;
  uint64_t v8 = v6 + 2 * a5 * a3;
  do
  {
    uint64_t v9 = 0;
    int32x4_t v10 = 0uLL;
    int32x4_t v11 = (int32x4_t)result;
    do
    {
      uint16x8_t v12 = vabdq_u16(*(uint16x8_t *)(v8 + v9), *(uint16x8_t *)(v7 + v9));
      int32x4_t v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v12);
      int32x4_t v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v12.i8);
      v9 += 16;
    }
    while (v9 != 32);
    float result = vaddvq_s32(vaddq_s32(v11, v10));
    a5 += a6;
    v7 += 2 * a4 * a6;
    v8 += 2 * a3 * a6;
  }
  while (a5 < 16);
  return result;
}

uint64_t sub_1BBA7FB40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a5 > 15) {
    return 0;
  }
  uint64_t v6 = result;
  LODWORD(result) = 0;
  uint64_t v7 = (uint8x16_t *)(a2 + a5 * a4);
  uint64_t v8 = (uint8x16_t *)(v6 + a5 * a3);
  do
  {
    uint8x16_t v9 = vabdq_u8(*v8, *v7);
    uint16x8_t v10 = vmovl_high_u8(v9);
    uint16x8_t v11 = vmovl_u8(*(uint8x8_t *)v9.i8);
    float result = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)result, *(uint16x4_t *)v11.i8), *(uint16x4_t *)v10.i8), (int32x4_t)vaddl_high_u16(v11, v10)));
    uint64_t v8 = (uint8x16_t *)((char *)v8 + a6 * a3);
    uint64_t v7 = (uint8x16_t *)((char *)v7 + a6 * a4);
    a5 += a6;
  }
  while (a5 < 16);
  return result;
}

uint64_t sub_1BBA7FBBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a5 > 31) {
    return 0;
  }
  uint64_t v6 = result;
  LODWORD(result) = 0;
  uint64_t v7 = a2 + a5 * a4;
  uint64_t v8 = v6 + a5 * a3;
  do
  {
    uint64_t v9 = 0;
    int32x4_t v10 = 0uLL;
    int32x4_t v11 = (int32x4_t)result;
    int32x4_t v12 = 0uLL;
    int32x4_t v13 = 0uLL;
    do
    {
      uint8x16_t v14 = vabdq_u8(*(uint8x16_t *)(v8 + v9), *(uint8x16_t *)(v7 + v9));
      uint16x8_t v15 = vmovl_u8(*(uint8x8_t *)v14.i8);
      uint16x8_t v16 = vmovl_high_u8(v14);
      int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v16);
      int32x4_t v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v16.i8);
      int32x4_t v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v15);
      int32x4_t v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v15.i8);
      v9 += 16;
    }
    while (v9 != 32);
    float result = vaddvq_s32(vaddq_s32(vaddq_s32(v11, v12), vaddq_s32(v10, v13)));
    v8 += a6 * a3;
    v7 += a6 * a4;
    a5 += a6;
  }
  while (a5 < 32);
  return result;
}

uint64_t sub_1BBA7FC60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a5 > 31) {
    return 0;
  }
  uint64_t v6 = result;
  LODWORD(result) = 0;
  uint64_t v7 = a2 + 2 * a5 * a4;
  uint64_t v8 = v6 + 2 * a5 * a3;
  do
  {
    uint64_t v9 = 0;
    int32x4_t v10 = 0uLL;
    int32x4_t v11 = (int32x4_t)result;
    do
    {
      uint16x8_t v12 = vabdq_u16(*(uint16x8_t *)(v8 + v9), *(uint16x8_t *)(v7 + v9));
      int32x4_t v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v12);
      int32x4_t v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v12.i8);
      v9 += 16;
    }
    while (v9 != 64);
    float result = vaddvq_s32(vaddq_s32(v11, v10));
    a5 += a6;
    v7 += 2 * a4 * a6;
    v8 += 2 * a3 * a6;
  }
  while (a5 < 32);
  return result;
}

unint64_t sub_1BBA7FCF4(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, void *a7)
{
  if (a4 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)a3 >> 3;
    uint64_t v10 = 8 * v9;
    uint64_t v11 = 4 * v9;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v12 = 0;
        LODWORD(v13) = (a4 - (int)v7) >> 3;
        if ((int)v13 >= 2) {
          uint64_t v13 = 2;
        }
        else {
          uint64_t v13 = v13;
        }
        uint64_t v14 = a1;
        uint16x8_t v15 = a5;
        do
        {
          if (a4 - (int)v7 < 8)
          {
            int v17 = 0;
          }
          else
          {
            uint64_t v16 = 0;
            int v17 = 0;
            LODWORD(v18) = (a3 - (int)v12) >> 3;
            if ((int)v18 >= 2) {
              uint64_t v18 = 2;
            }
            else {
              uint64_t v18 = v18;
            }
            unsigned int v19 = v15;
            do
            {
              BOOL v20 = v19;
              uint64_t v21 = v18;
              if (a3 - (int)v12 >= 8)
              {
                do
                {
                  int v22 = *v20++;
                  v17 += v22;
                  --v21;
                }
                while (v21);
              }
              ++v16;
              unsigned int v19 = (int *)((char *)v19 + v11);
            }
            while (v16 != v13);
          }
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = v14;
          do
          {
            for (uint64_t i = 0; i != 32; i += 2)
              v24 += *(unsigned __int16 *)(v25 + i) * (unint64_t)*(unsigned __int16 *)(v25 + i);
            ++v23;
            v25 += 2 * a2;
          }
          while (v23 != 16);
          *a6++ = v17;
          *a7++ = v24;
          uint64_t v27 = v24 - ((v17 * v17 + 128) >> 8);
          if (v27 <= 127) {
            uint64_t v28 = 0;
          }
          else {
            uint64_t v28 = (v27 + 128) >> 8;
          }
          v8 += v28;
          v12 += 16;
          v15 += 2;
          v14 += 32;
        }
        while (v12 < a3);
      }
      v7 += 16;
      a5 = (int *)((char *)a5 + v10);
      a1 += 32 * a2;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

unint64_t sub_1BBA7FE78(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, void *a7)
{
  if (a4 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 16 * a2;
    uint64_t v10 = 2 * a2;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a1;
        uint64_t v13 = a5;
        do
        {
          if (a4 - (int)v7 < 8
            || ((LODWORD(v14) = (a3 - (int)v11) >> 3, (int)v14 >= 1) ? (uint64_t v14 = 1) : (uint64_t v14 = v14),
                a3 - (int)v11 < 8))
          {
            int v15 = 0;
          }
          else
          {
            int v15 = 0;
            uint64_t v16 = v13;
            do
            {
              int v17 = *v16++;
              v15 += v17;
              --v14;
            }
            while (v14);
          }
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = v12;
          do
          {
            for (uint64_t i = 0; i != 16; i += 2)
              v19 += *(unsigned __int16 *)(v20 + i) * (unint64_t)*(unsigned __int16 *)(v20 + i);
            ++v18;
            v20 += v10;
          }
          while (v18 != 8);
          *a6++ = v15;
          *a7++ = v19;
          uint64_t v22 = v19 - ((v15 * v15 + 32) >> 6);
          if (v22 <= 31) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = (v22 + 32) >> 6;
          }
          v8 += v23;
          v11 += 8;
          ++v13;
          v12 += 16;
        }
        while (v11 < a3);
      }
      v7 += 8;
      a5 += (uint64_t)a3 >> 3;
      a1 += v9;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 7)) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

uint16x4_t *sub_1BBA7FFBC(uint16x4_t *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 16 * a2;
    uint64_t v12 = 2 * a2;
    unint64_t v13 = a4;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v14 = 0;
        int v15 = (unsigned int *)(a7 + 4 * (v10 >> 3) * a8);
        uint64_t v16 = (unsigned int *)(a5 + 4 * (v10 >> 3) * a6);
        uint64_t v17 = *a10;
        uint64_t v18 = result;
        do
        {
          unsigned int v19 = 0;
          uint64_t v20 = v18;
          uint64_t v21 = 8;
          do
          {
            unsigned int v19 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v19, *v20), *(uint16x8_t *)v20->i8));
            uint64_t v20 = (uint16x4_t *)((char *)v20 + v12);
            --v21;
          }
          while (v21);
          unsigned int v22 = 0;
          uint32x4_t v23 = (uint32x4_t)vdupq_n_s32((v19 + 32) >> 6);
          uint64_t v24 = v18;
          uint64_t v25 = 8;
          do
          {
            unsigned int v22 = vaddvq_s32((int32x4_t)vabaq_u32(vabaq_u32((uint32x4_t)v22, v23, vmovl_u16(*v24)), v23, vmovl_high_u16(*(uint16x8_t *)v24->i8)));
            uint64_t v24 = (uint16x4_t *)((char *)v24 + v12);
            --v25;
          }
          while (v25);
          *v16++ = v19;
          *v15++ = v22;
          *a9 += v22;
          v17 += v19;
          v14 += 8;
          v18 += 2;
        }
        while (v14 < a3);
        *a10 = v17;
      }
      v10 += 8;
      float result = (uint16x4_t *)((char *)result + v11);
    }
    while (v10 < v13);
  }
  return result;
}

uint64_t sub_1BBA800D0(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 2 * a2;
    unint64_t v12 = a4;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        int v15 = (unsigned int *)(a5 + 4 * (v10 >> 3) * a6);
        uint64_t v16 = *a10;
        uint64_t v17 = result;
        do
        {
          uint64_t v18 = 0;
          *int v15 = 0;
          *uint64_t v14 = 0;
          char v19 = 1;
          do
          {
            uint64_t v20 = 0;
            char v21 = v19;
            uint64_t v22 = v18 * a2;
            char v23 = 1;
            do
            {
              unsigned int v24 = 0;
              char v25 = v23;
              uint64_t v26 = 2 * (v20 + v22);
              uint64_t v27 = (uint16x4_t *)(v17 + v26);
              uint64_t v28 = 4;
              do
              {
                unsigned int v24 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v24, *v27));
                uint64_t v27 = (uint16x4_t *)((char *)v27 + v11);
                --v28;
              }
              while (v28);
              unsigned int v29 = 0;
              int32x4_t v30 = vdupq_n_s32((int)(v24 + 8) >> 4);
              uint64_t v31 = 4;
              do
              {
                unsigned int v29 = vaddvq_s32(vabaq_s32((int32x4_t)v29, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v17 + v26)), v30));
                v26 += v11;
                --v31;
              }
              while (v31);
              char v23 = 0;
              *v14 += v29;
              *v15 += v24;
              uint64_t v20 = 4;
            }
            while ((v25 & 1) != 0);
            char v19 = 0;
            uint64_t v18 = 4;
          }
          while ((v21 & 1) != 0);
          int v32 = *v14++;
          *a9 += v32;
          unsigned int v33 = *v15++;
          v16 += v33;
          v13 += 8;
          v17 += 16;
        }
        while (v13 < a3);
        *a10 = v16;
      }
      v10 += 8;
      result += 16 * a2;
    }
    while (v10 < v12);
  }
  return result;
}

uint64_t sub_1BBA80240(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 2 * a2;
    unint64_t v12 = a4;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        int v15 = (unsigned int *)(a5 + 4 * (v10 >> 3) * a6);
        uint64_t v16 = *a10;
        uint64_t v17 = result;
        do
        {
          uint64_t v18 = 0;
          *int v15 = 0;
          *uint64_t v14 = 0;
          char v19 = 1;
          do
          {
            uint64_t v20 = 0;
            char v21 = v19;
            uint64_t v22 = v18 * a2;
            char v23 = 1;
            do
            {
              unsigned int v24 = 0;
              char v25 = v23;
              uint64_t v26 = 2 * (v20 + v22);
              uint64_t v27 = (uint16x4_t *)(v17 + v26);
              uint64_t v28 = 4;
              do
              {
                unsigned int v24 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v24, vshr_n_u16(*v27, 6uLL)));
                uint64_t v27 = (uint16x4_t *)((char *)v27 + v11);
                --v28;
              }
              while (v28);
              unsigned int v29 = 0;
              int32x4_t v30 = vdupq_n_s32((int)(v24 + 8) >> 4);
              uint64_t v31 = 4;
              do
              {
                unsigned int v29 = vaddvq_s32(vabaq_s32((int32x4_t)v29, (int32x4_t)vmovl_u16(vshr_n_u16(*(uint16x4_t *)(v17 + v26), 6uLL)), v30));
                v26 += v11;
                --v31;
              }
              while (v31);
              char v23 = 0;
              *v14 += v29;
              *v15 += v24;
              uint64_t v20 = 4;
            }
            while ((v25 & 1) != 0);
            char v19 = 0;
            uint64_t v18 = 4;
          }
          while ((v21 & 1) != 0);
          int v32 = *v14++;
          int v33 = *a9 + v32;
          if (__CFADD__(*a9, v32)) {
            int v33 = -1;
          }
          *a9 = v33;
          unsigned int v34 = *v15++;
          v16 += v34;
          v13 += 8;
          v17 += 16;
        }
        while (v13 < a3);
        *a10 = v16;
      }
      v10 += 8;
      result += 16 * a2;
    }
    while (v10 < v12);
  }
  return result;
}

uint64_t sub_1BBA803BC(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    unint64_t v10 = 0;
    unint64_t v11 = a4;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (int *)(a5 + 4 * (v10 >> 3) * a6);
        uint64_t v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        uint64_t v15 = *a10;
        do
        {
          uint64_t v16 = 0;
          uint64_t v17 = result + 2 * v12;
          *uint64_t v13 = 0;
          *uint64_t v14 = 0;
          int v18 = *v13;
          char v19 = 1;
          do
          {
            char v20 = v19;
            v18 += *(unsigned __int16 *)(v17 + 2 * v16 * a2) + *(unsigned __int16 *)(v17 + 2 * v16 * a2 + 8);
            uint64_t v16 = 4;
            char v19 = 0;
          }
          while ((v20 & 1) != 0);
          uint64_t v21 = 0;
          int v22 = 16 * v18;
          *uint64_t v13 = v22;
          unsigned int v23 = (v22 + 32) >> 6;
          int v24 = *v14;
          char v25 = 1;
          do
          {
            uint64_t v26 = 0;
            char v27 = v25;
            uint64_t v28 = v21 * a2;
            char v29 = 1;
            do
            {
              char v30 = v29;
              int v31 = *(unsigned __int16 *)(v17 + 2 * (v26 + v28)) - v23;
              if (v31 < 0) {
                int v31 = -v31;
              }
              v24 += v31;
              uint64_t v26 = 4;
              char v29 = 0;
            }
            while ((v30 & 1) != 0);
            char v25 = 0;
            uint64_t v21 = 4;
          }
          while ((v27 & 1) != 0);
          *v14++ = 16 * v24;
          *a9 += 16 * v24;
          unsigned int v32 = *v13++;
          v15 += v32;
          v12 += 8;
        }
        while (v12 < a3);
        *a10 = v15;
      }
      result += 16 * a2;
      v10 += 8;
    }
    while (v10 < v11);
  }
  return result;
}

uint64_t sub_1BBA804F8(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    unint64_t v10 = 0;
    unint64_t v11 = a4;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (int *)(a5 + 4 * (v10 >> 3) * a6);
        uint64_t v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        uint64_t v15 = *a10;
        do
        {
          uint64_t v16 = 0;
          uint64_t v17 = result + 2 * v12;
          *uint64_t v13 = 0;
          *uint64_t v14 = 0;
          int v18 = *v13;
          char v19 = 1;
          do
          {
            uint64_t v20 = 0;
            char v21 = v19;
            uint64_t v22 = v16 * a2;
            char v23 = 1;
            do
            {
              char v24 = v23;
              v18 += *(unsigned __int16 *)(v17 + 2 * (v20 + v22)) >> 6;
              uint64_t v20 = 4;
              char v23 = 0;
            }
            while ((v24 & 1) != 0);
            char v19 = 0;
            uint64_t v16 = 4;
          }
          while ((v21 & 1) != 0);
          uint64_t v25 = 0;
          int v26 = 16 * v18;
          *uint64_t v13 = v26;
          unsigned int v27 = (v26 + 32) >> 6;
          int v28 = *v14;
          char v29 = 1;
          do
          {
            uint64_t v30 = 0;
            char v31 = v29;
            uint64_t v32 = v25 * a2;
            char v33 = 1;
            do
            {
              char v34 = v33;
              int v35 = (*(unsigned __int16 *)(v17 + 2 * (v30 + v32)) >> 6) - v27;
              if (v35 < 0) {
                int v35 = -v35;
              }
              v28 += v35;
              uint64_t v30 = 4;
              char v33 = 0;
            }
            while ((v34 & 1) != 0);
            char v29 = 0;
            uint64_t v25 = 4;
          }
          while ((v31 & 1) != 0);
          *v14++ = 16 * v28;
          int v36 = *a9 + 16 * v28;
          if (__CFADD__(*a9, 16 * v28)) {
            int v36 = -1;
          }
          *a9 = v36;
          unsigned int v37 = *v13++;
          v15 += v37;
          v12 += 8;
        }
        while (v12 < a3);
        *a10 = v15;
      }
      result += 16 * a2;
      v10 += 8;
    }
    while (v10 < v11);
  }
  return result;
}

uint64_t sub_1BBA8064C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    for (unint64_t i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = (int *)(a7 + 4 * (i >> 3) * a8);
        uint64_t v13 = (unsigned int *)(a5 + 4 * (i >> 3) * a6);
        uint64_t v14 = *a10;
        do
        {
          uint64_t v15 = 0;
          *uint64_t v13 = 0;
          *uint64_t v12 = 0;
          char v16 = 1;
          do
          {
            uint64_t v17 = 0;
            char v18 = v16;
            uint64_t v19 = v15 * a2;
            char v20 = 1;
            do
            {
              uint64_t v21 = 0;
              int v22 = 0;
              char v23 = v20;
              uint64_t v24 = result + 2 * v11 + 2 * (v17 + v19);
              char v25 = 1;
              do
              {
                char v26 = v25;
                v22 += *(unsigned __int16 *)(v24 + 2 * v21 * a2) + *(unsigned __int16 *)(v24 + 2 * v21 * a2 + 4);
                uint64_t v21 = 2;
                char v25 = 0;
              }
              while ((v26 & 1) != 0);
              uint64_t v27 = 0;
              int v28 = 0;
              int v29 = 4 * v22;
              char v30 = 1;
              do
              {
                uint64_t v31 = 0;
                char v32 = v30;
                uint64_t v33 = v27 * a2;
                char v34 = 1;
                do
                {
                  char v35 = v34;
                  int v36 = *(unsigned __int16 *)(v24 + 2 * (v31 + v33)) - ((v29 + 8) >> 4);
                  if (v36 < 0) {
                    int v36 = -v36;
                  }
                  v28 += v36;
                  uint64_t v31 = 2;
                  char v34 = 0;
                }
                while ((v35 & 1) != 0);
                char v30 = 0;
                uint64_t v27 = 2;
              }
              while ((v32 & 1) != 0);
              char v20 = 0;
              *v12 += 4 * v28;
              *v13 += v29;
              uint64_t v17 = 4;
            }
            while ((v23 & 1) != 0);
            char v16 = 0;
            uint64_t v15 = 4;
          }
          while ((v18 & 1) != 0);
          int v37 = *v12++;
          *a9 += v37;
          unsigned int v38 = *v13++;
          v14 += v38;
          v11 += 8;
        }
        while (v11 < a3);
        *a10 = v14;
      }
      result += 16 * a2;
    }
  }
  return result;
}

uint64_t sub_1BBA807F8(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    for (unint64_t i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = (int *)(a7 + 4 * (i >> 3) * a8);
        uint64_t v13 = (unsigned int *)(a5 + 4 * (i >> 3) * a6);
        uint64_t v14 = *a10;
        do
        {
          uint64_t v15 = 0;
          *uint64_t v13 = 0;
          *uint64_t v12 = 0;
          char v16 = 1;
          do
          {
            uint64_t v17 = 0;
            char v18 = v16;
            uint64_t v19 = v15 * a2;
            char v20 = 1;
            do
            {
              uint64_t v21 = 0;
              int v22 = 0;
              char v23 = v20;
              uint64_t v24 = result + 2 * v11 + 2 * (v17 + v19);
              char v25 = 1;
              do
              {
                uint64_t v26 = 0;
                char v27 = v25;
                uint64_t v28 = v21 * a2;
                char v29 = 1;
                do
                {
                  char v30 = v29;
                  v22 += *(unsigned __int16 *)(v24 + 2 * (v26 + v28)) >> 6;
                  uint64_t v26 = 2;
                  char v29 = 0;
                }
                while ((v30 & 1) != 0);
                char v25 = 0;
                uint64_t v21 = 2;
              }
              while ((v27 & 1) != 0);
              uint64_t v31 = 0;
              int v32 = 0;
              int v33 = 4 * v22;
              char v34 = 1;
              do
              {
                uint64_t v35 = 0;
                char v36 = v34;
                uint64_t v37 = v31 * a2;
                char v38 = 1;
                do
                {
                  char v39 = v38;
                  int v40 = (*(unsigned __int16 *)(v24 + 2 * (v35 + v37)) >> 6) - ((v33 + 8) >> 4);
                  if (v40 < 0) {
                    int v40 = -v40;
                  }
                  v32 += v40;
                  uint64_t v35 = 2;
                  char v38 = 0;
                }
                while ((v39 & 1) != 0);
                char v34 = 0;
                uint64_t v31 = 2;
              }
              while ((v36 & 1) != 0);
              char v20 = 0;
              *v12 += 4 * v32;
              *v13 += v33;
              uint64_t v17 = 4;
            }
            while ((v23 & 1) != 0);
            char v16 = 0;
            uint64_t v15 = 4;
          }
          while ((v18 & 1) != 0);
          int v41 = *v12++;
          int v42 = *a9 + v41;
          if (__CFADD__(*a9, v41)) {
            int v42 = -1;
          }
          *a9 = v42;
          unsigned int v43 = *v13++;
          v14 += v43;
          v11 += 8;
        }
        while (v11 < a3);
        *a10 = v14;
      }
      result += 16 * a2;
    }
  }
  return result;
}

unint64_t sub_1BBA809BC(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, void *a7)
{
  if (a4 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)a3 >> 3;
    uint64_t v10 = 8 * v9;
    uint64_t v11 = 4 * v9;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v12 = 0;
        LODWORD(v13) = (a4 - (int)v7) >> 3;
        if ((int)v13 >= 2) {
          uint64_t v13 = 2;
        }
        else {
          uint64_t v13 = v13;
        }
        uint64_t v14 = a1;
        uint64_t v15 = a5;
        do
        {
          if (a4 - (int)v7 < 8)
          {
            int v17 = 0;
          }
          else
          {
            uint64_t v16 = 0;
            int v17 = 0;
            LODWORD(v18) = (a3 - (int)v12) >> 3;
            if ((int)v18 >= 2) {
              uint64_t v18 = 2;
            }
            else {
              uint64_t v18 = v18;
            }
            uint64_t v19 = v15;
            do
            {
              char v20 = v19;
              uint64_t v21 = v18;
              if (a3 - (int)v12 >= 8)
              {
                do
                {
                  int v22 = *v20++;
                  v17 += v22;
                  --v21;
                }
                while (v21);
              }
              ++v16;
              uint64_t v19 = (int *)((char *)v19 + v11);
            }
            while (v16 != v13);
          }
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = v14;
          do
          {
            for (uint64_t i = 0; i != 16; ++i)
              v24 += *(unsigned __int8 *)(v25 + i) * (unint64_t)*(unsigned __int8 *)(v25 + i);
            ++v23;
            v25 += a2;
          }
          while (v23 != 16);
          *a6++ = v17;
          *a7++ = v24;
          uint64_t v27 = v24 - ((v17 * v17 + 128) >> 8);
          if (v27 <= 127) {
            uint64_t v28 = 0;
          }
          else {
            uint64_t v28 = (v27 + 128) >> 8;
          }
          v8 += v28;
          v12 += 16;
          v15 += 2;
          v14 += 16;
        }
        while (v12 < a3);
      }
      a1 += 16 * a2;
      v7 += 16;
      a5 = (int *)((char *)a5 + v10);
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

unint64_t sub_1BBA80B3C(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, void *a7)
{
  if (a4 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a1;
        uint64_t v11 = a5;
        do
        {
          if (a4 - (int)v7 < 8
            || ((LODWORD(v12) = (a3 - (int)v9) >> 3, (int)v12 >= 1) ? (uint64_t v12 = 1) : (uint64_t v12 = v12),
                a3 - (int)v9 < 8))
          {
            int v13 = 0;
          }
          else
          {
            int v13 = 0;
            uint64_t v14 = v11;
            do
            {
              int v15 = *v14++;
              v13 += v15;
              --v12;
            }
            while (v12);
          }
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = v10;
          do
          {
            for (uint64_t i = 0; i != 8; ++i)
              v17 += *(unsigned __int8 *)(v18 + i) * (unint64_t)*(unsigned __int8 *)(v18 + i);
            ++v16;
            v18 += a2;
          }
          while (v16 != 8);
          *a6++ = v13;
          *a7++ = v17;
          uint64_t v20 = v17 - ((v13 * v13 + 32) >> 6);
          if (v20 <= 31) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = (v20 + 32) >> 6;
          }
          v8 += v21;
          v9 += 8;
          ++v11;
          v10 += 8;
        }
        while (v9 < a3);
      }
      a1 += 8 * a2;
      v7 += 8;
      a5 += (uint64_t)a3 >> 3;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 7)) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

uint64_t sub_1BBA80C7C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    unint64_t v10 = 0;
    unint64_t v11 = a4;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v12 = 0;
        int v13 = (_DWORD *)(a7 + 4 * (v10 >> 3) * a8);
        uint64_t v14 = (unsigned int *)(a5 + 4 * (v10 >> 3) * a6);
        uint64_t v15 = *a10;
        uint64_t v16 = result;
        do
        {
          uint64_t v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = v16;
          do
          {
            for (uint64_t i = 0; i != 8; ++i)
              v18 += *(unsigned __int8 *)(v19 + i);
            ++v17;
            v19 += a2;
          }
          while (v17 != 8);
          uint64_t v21 = 0;
          int v22 = 0;
          uint64_t v24 = v16;
          do
          {
            for (uint64_t j = 0; j != 8; ++j)
            {
              unsigned int v23 = (v18 + 32) >> 6;
              int v26 = *(unsigned __int8 *)(v24 + j) - v23;
              if (v26 < 0) {
                int v26 = v23 - *(unsigned __int8 *)(v24 + j);
              }
              v22 += v26;
            }
            ++v21;
            v24 += a2;
          }
          while (v21 != 8);
          *v14++ = v18;
          *v13++ = v22;
          *a9 += v22;
          v15 += v18;
          *a10 = v15;
          v12 += 8;
          v16 += 8;
        }
        while (v12 < a3);
      }
      result += 8 * a2;
      v10 += 8;
    }
    while (v10 < v11);
  }
  return result;
}

uint64_t sub_1BBA80D98(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int32x4_t a10, int32x4_t a11, _DWORD *a12, uint64_t *a13)
{
  if (a4 >= 1)
  {
    unint64_t v13 = 0;
    unint64_t v14 = a4;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = (int *)(a7 + 4 * (v13 >> 3) * a8);
        uint64_t v17 = (unsigned int *)(a5 + 4 * (v13 >> 3) * a6);
        uint64_t v18 = *a13;
        uint64_t v19 = result;
        do
        {
          uint64_t v20 = 0;
          *uint64_t v17 = 0;
          *uint64_t v16 = 0;
          char v21 = 1;
          do
          {
            uint64_t v22 = 0;
            char v23 = v21;
            uint64_t v24 = v20 * a2;
            char v25 = 1;
            do
            {
              unsigned int v26 = 0;
              char v27 = v25;
              uint64_t v28 = v22 + v24;
              char v29 = (unsigned __int32 *)(v19 + v24 + v22);
              uint64_t v30 = 4;
              do
              {
                a10.i32[0] = *v29;
                a10.i64[0] = vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
                unsigned int v26 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)a10.i8));
                char v29 = (unsigned __int32 *)((char *)v29 + a2);
                --v30;
              }
              while (v30);
              int32x4_t v31 = vdupq_n_s32((int)(v26 + 8) >> 4);
              uint64_t v32 = 4;
              do
              {
                a11.i32[0] = *(_DWORD *)(v19 + v28);
                a11 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a11.i8));
                a10 = vabaq_s32((int32x4_t)v30, a11, v31);
                LODWORD(v30) = vaddvq_s32(a10);
                v28 += a2;
                --v32;
              }
              while (v32);
              char v25 = 0;
              *v16 += v30;
              *v17 += v26;
              uint64_t v22 = 4;
            }
            while ((v27 & 1) != 0);
            char v21 = 0;
            uint64_t v20 = 4;
          }
          while ((v23 & 1) != 0);
          int v33 = *v16++;
          *a12 += v33;
          unsigned int v34 = *v17++;
          v18 += v34;
          *a13 = v18;
          v15 += 8;
          v19 += 8;
        }
        while (v15 < a3);
      }
      result += 8 * a2;
      v13 += 8;
    }
    while (v13 < v14);
  }
  return result;
}

uint64_t sub_1BBA80F08(uint64_t *a1, int *a2, uint64_t *a3, int *a4, int a5, int a6, int a7, int a8, int a9, signed int a10)
{
  int v246 = a7 >> 5;
  int v241 = (a9 + 31) >> 5;
  uint64_t v265 = *MEMORY[0x1E4F143B8];
  int v236 = a8 + 31;
  int v232 = a8 + 7;
  uint64_t result = ((a8 + 7) >> 5);
  uint64_t v11 = *a2;
  uint64_t v239 = *a4;
  int v237 = 4 * v239;
  int v238 = 4 * v11;
  uint64_t v260 = a2[1];
  int v240 = 2 * v260;
  uint64_t v235 = 4 * (a6 >> 5);
  uint64_t v247 = a2[2];
  int v257 = a6 >> 5;
  uint64_t v234 = 2 * (a6 >> 5);
  int v244 = (a9 + 7) >> 5;
  signed int v12 = a10 << 8;
  uint64_t v250 = result;
  if (v244 > a7 >> 5)
  {
    uint64_t v13 = 0;
    uint64_t v256 = 4 * ((int)v235 + v237 * v246);
    int v14 = -a10;
    uint64_t v258 = (result - v257);
    uint64_t v255 = v257 + (int)v247 * v246;
    uint64_t v253 = (int)v234 + v240 * v246;
    uint64_t v251 = (int)v235 + v238 * v246;
    do
    {
      uint64_t v248 = v13;
      if ((int)result > v257)
      {
        uint64_t v15 = 0;
        uint64_t v16 = (unsigned char *)(a1[2] + v255);
        uint64_t v17 = (unsigned char *)(a1[1] + v253);
        uint64_t v18 = *a1 + v251;
        uint64_t v19 = (long long *)(*a3 + v256);
        do
        {
          uint64_t v20 = 0;
          char v21 = v19;
          do
          {
            *(long long *)((char *)&v261 + v20) = *v21;
            v20 += 16;
            char v21 = (long long *)((char *)v21 + 4 * v239);
          }
          while (v20 != 64);
          int v22 = 0;
          int v23 = DWORD1(v261) + v261 + v262 + DWORD1(v262);
          int v24 = HIDWORD(v261) + DWORD2(v261) + DWORD2(v262) + HIDWORD(v262);
          int v25 = DWORD1(v263) + v263 + v264 + DWORD1(v264);
          int v27 = DWORD2(v263);
          int v26 = HIDWORD(v263);
          int v259 = v23 + v24 + v25 + 8;
          int v29 = DWORD2(v264);
          int v28 = HIDWORD(v264);
          unsigned int v30 = v23 + 2;
          unsigned int v31 = v25 + 2;
          uint64_t v32 = &v261;
          uint64_t v33 = v18;
          do
          {
            for (uint64_t i = 0; i != 4; ++i)
            {
              unsigned int v35 = *((_DWORD *)v32 + i);
              if (v35 >= 2)
              {
                unsigned int v36 = __clz(v35);
                unsigned int v37 = ((byte_1BBB8A634[(unint64_t)(v35 << (v36 + 1)) >> 24] << 12) | 0x200000u) >> ((v36 + 1) >> 1);
                if ((v36 & 1) == 0) {
                  unsigned int v37 = (11585 * v37) >> 14;
                }
                unsigned int v35 = (v37 + 16) >> 5;
              }
              int v38 = (int)(v12 * (v35 - a5)) / a5;
              int v39 = (v38 > 0) | (v38 >> 31);
              if (v38 < 0) {
                int v38 = -v38;
              }
              signed int v40 = v39 * ((v38 + 128) >> 8);
              if (v40 >= a10) {
                signed int v40 = a10;
              }
              if (v40 <= v14) {
                LOBYTE(v40) = -(char)a10;
              }
              *(unsigned char *)(v33 + i) = v40;
            }
            ++v22;
            v33 += v11;
            ++v32;
          }
          while (v22 != 4);
          unsigned int v41 = v30 >> 2;
          if (v30 >= 8)
          {
            unsigned int v42 = __clz(v41);
            unsigned int v43 = ((byte_1BBB8A634[(unint64_t)(v41 << (v42 + 1)) >> 24] << 12) | 0x200000u) >> ((v42 + 1) >> 1);
            if (v42) {
              unsigned int v44 = v43;
            }
            else {
              unsigned int v44 = (11585 * v43) >> 14;
            }
            unsigned int v41 = (v44 + 16) >> 5;
          }
          unsigned int v45 = (v24 + 2) >> 2;
          int v46 = (int)((v41 - a5) * v12) / a5;
          int v47 = (v46 > 0) | (v46 >> 31);
          if (v46 < 0) {
            int v46 = -v46;
          }
          signed int v48 = v47 * ((v46 + 128) >> 8);
          if (v48 >= a10) {
            signed int v48 = a10;
          }
          if (v48 <= v14) {
            LOBYTE(v48) = -(char)a10;
          }
          *uint64_t v17 = v48;
          if ((v24 + 2) >= 8)
          {
            unsigned int v49 = __clz(v45);
            if (v49) {
              unsigned int v50 = ((byte_1BBB8A634[(unint64_t)(v45 << (v49 + 1)) >> 24] << 12) | 0x200000u) >> ((v49 + 1) >> 1);
            }
            else {
              unsigned int v50 = (11585
            }
                   * (((byte_1BBB8A634[(unint64_t)(v45 << (v49 + 1)) >> 24] << 12) | 0x200000u) >> ((v49 + 1) >> 1))) >> 14;
            unsigned int v45 = (v50 + 16) >> 5;
          }
          unsigned int v51 = v31 >> 2;
          int v52 = (int)((v45 - a5) * v12) / a5;
          int v53 = (v52 > 0) | (v52 >> 31);
          if (v52 < 0) {
            int v52 = -v52;
          }
          signed int v54 = v53 * ((v52 + 128) >> 8);
          if (v54 >= a10) {
            signed int v54 = a10;
          }
          if (v54 <= v14) {
            LOBYTE(v54) = -(char)a10;
          }
          v17[1] = v54;
          if (v31 >= 8)
          {
            unsigned int v55 = __clz(v51);
            unsigned int v56 = ((byte_1BBB8A634[(unint64_t)(v51 << (v55 + 1)) >> 24] << 12) | 0x200000u) >> ((v55 + 1) >> 1);
            if (v55) {
              unsigned int v57 = v56;
            }
            else {
              unsigned int v57 = (11585 * v56) >> 14;
            }
            unsigned int v51 = (v57 + 16) >> 5;
          }
          int v58 = v26 + v27 + v29 + v28;
          unsigned int v59 = (v58 + 2) >> 2;
          int v60 = (int)((v51 - a5) * v12) / a5;
          int v61 = (v60 > 0) | (v60 >> 31);
          if (v60 < 0) {
            int v60 = -v60;
          }
          signed int v62 = v61 * ((v60 + 128) >> 8);
          if (v62 >= a10) {
            signed int v62 = a10;
          }
          if (v62 <= v14) {
            char v63 = -(char)a10;
          }
          else {
            char v63 = v62;
          }
          v17[v260] = v63;
          if ((v58 + 2) >= 8)
          {
            unsigned int v64 = __clz(v59);
            unsigned int v65 = ((byte_1BBB8A634[(unint64_t)(v59 << (v64 + 1)) >> 24] << 12) | 0x200000u) >> ((v64 + 1) >> 1);
            if (v64) {
              unsigned int v66 = v65;
            }
            else {
              unsigned int v66 = (11585 * v65) >> 14;
            }
            unsigned int v59 = (v66 + 16) >> 5;
          }
          unsigned int v67 = v259 + v58;
          unsigned int v68 = (v259 + v58) >> 4;
          int v69 = (int)((v59 - a5) * v12) / a5;
          int v70 = (v69 > 0) | (v69 >> 31);
          if (v69 < 0) {
            int v69 = -v69;
          }
          signed int v71 = v70 * ((v69 + 128) >> 8);
          if (v71 >= a10) {
            signed int v71 = a10;
          }
          if (v71 <= v14) {
            LOBYTE(v71) = -(char)a10;
          }
          v17[v260 + 1] = v71;
          if (v67 >= 0x20)
          {
            unsigned int v72 = __clz(v68);
            if (v72) {
              unsigned int v73 = ((byte_1BBB8A634[(unint64_t)(v68 << (v72 + 1)) >> 24] << 12) | 0x200000u) >> ((v72 + 1) >> 1);
            }
            else {
              unsigned int v73 = (11585
            }
                   * (((byte_1BBB8A634[(unint64_t)(v68 << (v72 + 1)) >> 24] << 12) | 0x200000u) >> ((v72 + 1) >> 1))) >> 14;
            unsigned int v68 = (v73 + 16) >> 5;
          }
          int v74 = (int)((v68 - a5) * v12) / a5;
          int v75 = (v74 > 0) | (v74 >> 31);
          if (v74 < 0) {
            int v74 = -v74;
          }
          signed int v76 = v75 * ((v74 + 128) >> 8);
          if (v76 >= a10) {
            signed int v76 = a10;
          }
          if (v76 <= v14) {
            LOBYTE(v76) = -(char)a10;
          }
          *v16++ = v76;
          v18 += 4;
          v17 += 2;
          ++v15;
          ++v19;
        }
        while (v15 != v258);
      }
      uint64_t result = ((a8 + 7) >> 5);
      v251 += v238;
      v253 += v240;
      v255 += v247;
      uint64_t v13 = v248 + 1;
      v256 += 4 * v237;
    }
    while (v248 + 1 != v244 - v246);
  }
  int v254 = (a9 + 15) >> 4;
  int v252 = (a9 + 7) >> 3;
  if (v244 != v241 && (int)result > v257)
  {
    signed int v77 = (unsigned char *)(a1[2] + (int)v247 * (uint64_t)v244 + ((uint64_t)a6 >> 5));
    uint64_t v78 = a1[1] + v240 * (uint64_t)v244 + v234;
    uint64_t v79 = *a3 + 4 * v237 * v244 + 16 * (a6 >> 5);
    int v80 = v252 - 4 * v244;
    uint64_t v81 = *a1 + v238 * (uint64_t)v244 + v235;
    uint64_t v82 = (v254 - 2 * v244);
    int v83 = -a10;
    *(void *)&long long v84 = -1;
    *((void *)&v84 + 1) = -1;
    do
    {
      long long v263 = v84;
      long long v264 = v84;
      long long v261 = v84;
      long long v262 = v84;
      if (v80 < 1)
      {
        int v86 = 0;
      }
      else
      {
        int v85 = 0;
        int v86 = 0;
        unsigned int v87 = &v261;
        uint64_t v88 = v79;
        uint64_t v89 = v81;
        do
        {
          for (uint64_t j = 0; j != 4; ++j)
          {
            unsigned int v91 = *(_DWORD *)(v88 + 4 * j);
            *((_DWORD *)v87 + j) = v91;
            unsigned int v92 = v91;
            if (v91 >= 2)
            {
              unsigned int v93 = __clz(v91);
              if (v93) {
                unsigned int v94 = ((byte_1BBB8A634[(unint64_t)(v91 << (v93 + 1)) >> 24] << 12) | 0x200000u) >> ((v93 + 1) >> 1);
              }
              else {
                unsigned int v94 = (11585
              }
                     * (((byte_1BBB8A634[(unint64_t)(v91 << (v93 + 1)) >> 24] << 12) | 0x200000u) >> ((v93 + 1) >> 1))) >> 14;
              unsigned int v92 = (v94 + 16) >> 5;
            }
            int v95 = (int)(v12 * (v92 - a5)) / a5;
            int v96 = (v95 > 0) | (v95 >> 31);
            if (v95 < 0) {
              int v95 = -v95;
            }
            signed int v97 = v96 * ((v95 + 128) >> 8);
            if (v97 >= a10) {
              signed int v97 = a10;
            }
            if (v97 <= v83) {
              LOBYTE(v97) = -(char)a10;
            }
            *(unsigned char *)(v89 + j) = v97;
            v86 += v91;
          }
          ++v85;
          v89 += v11;
          ++v87;
          v88 += 4 * v239;
        }
        while (v85 != v80);
      }
      unsigned int v98 = (v86 + 2 * v80) / (4 * v80);
      if (v98 >= 2)
      {
        unsigned int v99 = __clz(v98);
        unsigned int v100 = ((byte_1BBB8A634[(unint64_t)(v98 << (v99 + 1)) >> 24] << 12) | 0x200000u) >> ((v99 + 1) >> 1);
        if (v99) {
          unsigned int v101 = v100;
        }
        else {
          unsigned int v101 = (11585 * v100) >> 14;
        }
        unsigned int v98 = (v101 + 16) >> 5;
      }
      int v102 = (int)((v98 - a5) * v12) / a5;
      int v103 = (v102 > 0) | (v102 >> 31);
      if (v102 < 0) {
        int v102 = -v102;
      }
      signed int v104 = v103 * ((v102 + 128) >> 8);
      if (v104 >= a10) {
        signed int v104 = a10;
      }
      if (v104 <= v83) {
        LOBYTE(v104) = -(char)a10;
      }
      *signed int v77 = v104;
      if ((int)v82 >= 1)
      {
        for (uint64_t k = 0; k != v82; ++k)
        {
          uint64_t v106 = 0;
          char v107 = 1;
          do
          {
            uint64_t v108 = 0;
            int v109 = 0;
            int v110 = 0;
            char v111 = v107;
            char v112 = 1;
            do
            {
              uint64_t v113 = 0;
              char v114 = v112;
              uint64_t v115 = (8 * k) | (2 * v106) | v108;
              char v116 = 1;
              do
              {
                char v117 = v116;
                int v118 = *((_DWORD *)&v261 + (v115 | v113));
                if (v118 == -1) {
                  int v118 = 0;
                }
                else {
                  ++v110;
                }
                v109 += v118;
                uint64_t v113 = 1;
                char v116 = 0;
              }
              while ((v117 & 1) != 0);
              char v112 = 0;
              uint64_t v108 = 4;
            }
            while ((v114 & 1) != 0);
            unsigned int v119 = (v109 + (v110 >> 1)) / v110;
            if (v119 >= 2)
            {
              unsigned int v120 = __clz(v119);
              unsigned int v121 = ((byte_1BBB8A634[(unint64_t)(v119 << (v120 + 1)) >> 24] << 12) | 0x200000u) >> ((v120 + 1) >> 1);
              if ((v120 & 1) == 0) {
                unsigned int v121 = (11585 * v121) >> 14;
              }
              unsigned int v119 = (v121 + 16) >> 5;
            }
            char v107 = 0;
            int v122 = (int)((v119 - a5) * v12) / a5;
            int v123 = (v122 > 0) | (v122 >> 31);
            if (v122 < 0) {
              int v122 = -v122;
            }
            signed int v124 = v123 * ((v122 + 128) >> 8);
            if (v124 >= a10) {
              signed int v124 = a10;
            }
            if (v124 <= v83) {
              LOBYTE(v124) = -(char)a10;
            }
            *(unsigned char *)(v78 + k * v260 + v106) = v124;
            uint64_t v106 = 1;
          }
          while ((v111 & 1) != 0);
        }
      }
      v79 += 16;
      v81 += 4;
      v78 += 2;
      ++v77;
      uint64_t result = v250;
      ++v257;
    }
    while (v257 != v250);
  }
  int v125 = (a9 + 7) >> 5;
  if (result != v236 >> 5)
  {
    int v245 = (a8 + 15) >> 4;
    int v249 = v232 >> 3;
    if (v244 > v246)
    {
      CFNumberRef v126 = (unsigned char *)(a1[2] + (int)v250);
      uint64_t v127 = a1[1] + 2 * (int)v250;
      int v128 = v249 - 4 * v250;
      uint64_t v129 = (v245 - 2 * v250);
      int v130 = -a10;
      *(void *)&long long v131 = -1;
      *((void *)&v131 + 1) = -1;
      uint64_t v132 = *a1 + 4 * (int)v250;
      uint64_t v133 = *a3 + 16 * (int)v250;
      do
      {
        int v134 = 0;
        int v135 = 0;
        long long v263 = v131;
        long long v264 = v131;
        CFNumberRef v136 = (unsigned int *)&v261;
        CFNumberRef v137 = (unsigned int *)v133;
        CFNumberRef v138 = (unsigned char *)v132;
        long long v261 = v131;
        long long v262 = v131;
        do
        {
          CFNumberRef v139 = v137;
          CFNumberRef v140 = v136;
          uint64_t v141 = v138;
          uint64_t v142 = (v249 - 4 * v250);
          if (v128 >= 1)
          {
            do
            {
              unsigned int v144 = *v139++;
              unsigned int v143 = v144;
              *CFNumberRef v140 = v144;
              unsigned int v145 = v144;
              if (v144 >= 2)
              {
                unsigned int v146 = __clz(v143);
                if (v146) {
                  unsigned int v147 = ((byte_1BBB8A634[(unint64_t)(v143 << (v146 + 1)) >> 24] << 12) | 0x200000u) >> ((v146 + 1) >> 1);
                }
                else {
                  unsigned int v147 = (11585
                }
                        * (((byte_1BBB8A634[(unint64_t)(v143 << (v146 + 1)) >> 24] << 12) | 0x200000u) >> ((v146 + 1) >> 1))) >> 14;
                unsigned int v145 = (v147 + 16) >> 5;
              }
              int v148 = (int)(v12 * (v145 - a5)) / a5;
              int v149 = (v148 > 0) | (v148 >> 31);
              if (v148 < 0) {
                int v148 = -v148;
              }
              signed int v150 = v149 * ((v148 + 128) >> 8);
              if (v150 >= a10) {
                signed int v150 = a10;
              }
              if (v150 <= v130) {
                LOBYTE(v150) = -(char)a10;
              }
              *v141++ = v150;
              v135 += v143;
              ++v140;
              --v142;
            }
            while (v142);
          }
          ++v134;
          v138 += v11;
          v136 += 4;
          v137 += v239;
        }
        while (v134 != 4);
        unsigned int v151 = (v135 + 2 * v128) / (4 * v128);
        if (v151 >= 2)
        {
          unsigned int v152 = __clz(v151);
          unsigned int v153 = ((byte_1BBB8A634[(unint64_t)(v151 << (v152 + 1)) >> 24] << 12) | 0x200000u) >> ((v152 + 1) >> 1);
          if ((v152 & 1) == 0) {
            unsigned int v153 = (11585 * v153) >> 14;
          }
          unsigned int v151 = (v153 + 16) >> 5;
        }
        uint64_t v154 = 0;
        int v155 = (int)((v151 - a5) * v12) / a5;
        int v156 = (v155 > 0) | (v155 >> 31);
        if (v155 < 0) {
          int v155 = -v155;
        }
        signed int v157 = v156 * ((v155 + 128) >> 8);
        if (v157 >= a10) {
          signed int v157 = a10;
        }
        if (v157 <= v130) {
          LOBYTE(v157) = -(char)a10;
        }
        *CFNumberRef v126 = v157;
        uint64_t v158 = 1;
        do
        {
          uint64_t result = v158;
          if ((int)v129 >= 1)
          {
            uint64_t v159 = 0;
            uint64_t v160 = 8 * v154;
            uint64_t v161 = v127 + v154 * v260;
            do
            {
              uint64_t v162 = 0;
              int v163 = 0;
              int v164 = 0;
              char v165 = 1;
              do
              {
                uint64_t v166 = 0;
                char v167 = v165;
                uint64_t v168 = v160 + 2 * v159 + v162;
                char v169 = 1;
                do
                {
                  char v170 = v169;
                  int v171 = *((_DWORD *)&v261 + (v168 | v166));
                  if (v171 == -1) {
                    int v171 = 0;
                  }
                  else {
                    ++v164;
                  }
                  v163 += v171;
                  uint64_t v166 = 1;
                  char v169 = 0;
                }
                while ((v170 & 1) != 0);
                char v165 = 0;
                uint64_t v162 = 4;
              }
              while ((v167 & 1) != 0);
              unsigned int v172 = (v163 + (v164 >> 1)) / v164;
              if (v172 >= 2)
              {
                unsigned int v173 = __clz(v172);
                unsigned int v174 = ((byte_1BBB8A634[(unint64_t)(v172 << (v173 + 1)) >> 24] << 12) | 0x200000u) >> ((v173 + 1) >> 1);
                if ((v173 & 1) == 0) {
                  unsigned int v174 = (11585 * v174) >> 14;
                }
                unsigned int v172 = (v174 + 16) >> 5;
              }
              int v175 = (int)((v172 - a5) * v12) / a5;
              int v176 = (v175 > 0) | (v175 >> 31);
              if (v175 < 0) {
                int v175 = -v175;
              }
              signed int v177 = v176 * ((v175 + 128) >> 8);
              if (v177 >= a10) {
                signed int v177 = a10;
              }
              if (v177 <= v130) {
                LOBYTE(v177) = -(char)a10;
              }
              *(unsigned char *)(v161 + v159++) = v177;
            }
            while (v159 != v129);
          }
          uint64_t v158 = 0;
          uint64_t v154 = 1;
        }
        while ((result & 1) != 0);
        v132 += v238;
        v127 += v240;
        v126 += v247;
        v133 += 4 * v237;
        int v125 = (a9 + 7) >> 5;
        ++v246;
      }
      while (v246 != v244);
    }
    if (v125 != v241)
    {
      uint64_t v178 = *a3;
      uint64_t v179 = *a1;
      uint64_t v180 = a1[1];
      uint64_t v181 = a1[2];
      int v182 = v252 - 4 * v125;
      *(void *)&long long v183 = -1;
      *((void *)&v183 + 1) = -1;
      long long v263 = v183;
      long long v264 = v183;
      long long v261 = v183;
      long long v262 = v183;
      uint64_t v184 = v181 + (int)v247 * (uint64_t)v125;
      int v185 = v249 - 4 * v250;
      int v186 = v182 * v185;
      if (v182 < 1)
      {
        int v188 = 0;
      }
      else
      {
        int v187 = 0;
        int v188 = 0;
        uint64_t v189 = v178 + 4 * v237 * v125 + 16 * (int)v250;
        uint64_t v190 = v179 + v238 * (uint64_t)v125 + 4 * (int)v250;
        int v191 = (unsigned int *)&v261;
        do
        {
          char v192 = (unsigned int *)v189;
          int v193 = v191;
          signed int v194 = (unsigned char *)v190;
          uint64_t v195 = (v249 - 4 * v250);
          if (v185 >= 1)
          {
            do
            {
              unsigned int v197 = *v192++;
              unsigned int v196 = v197;
              *int v193 = v197;
              unsigned int v198 = v197;
              if (v197 >= 2)
              {
                unsigned int v199 = __clz(v196);
                if (v199) {
                  unsigned int v200 = ((byte_1BBB8A634[(unint64_t)(v196 << (v199 + 1)) >> 24] << 12) | 0x200000u) >> ((v199 + 1) >> 1);
                }
                else {
                  unsigned int v200 = (11585
                }
                        * (((byte_1BBB8A634[(unint64_t)(v196 << (v199 + 1)) >> 24] << 12) | 0x200000u) >> ((v199 + 1) >> 1))) >> 14;
                unsigned int v198 = (v200 + 16) >> 5;
              }
              int v201 = (int)(v12 * (v198 - a5)) / a5;
              int v202 = (v201 > 0) | (v201 >> 31);
              if (v201 < 0) {
                int v201 = -v201;
              }
              signed int v203 = v202 * ((v201 + 128) >> 8);
              if (v203 >= a10) {
                signed int v203 = a10;
              }
              if (v203 <= -a10) {
                LOBYTE(v203) = -(char)a10;
              }
              *v194++ = v203;
              v188 += v196;
              ++v193;
              --v195;
            }
            while (v195);
          }
          ++v187;
          v190 += v11;
          v191 += 4;
          v189 += 4 * v239;
        }
        while (v187 != v182);
      }
      uint64_t result = v250;
      uint64_t v204 = (v254 - 2 * v244);
      unsigned int v205 = (v188 + (v186 >> 1)) / v186;
      if (v205 >= 2)
      {
        unsigned int v206 = __clz(v205);
        uint64_t result = v250;
        unsigned int v207 = ((byte_1BBB8A634[(unint64_t)(v205 << (v206 + 1)) >> 24] << 12) | 0x200000u) >> ((v206 + 1) >> 1);
        if ((v206 & 1) == 0) {
          unsigned int v207 = (11585 * v207) >> 14;
        }
        unsigned int v205 = (v207 + 16) >> 5;
      }
      int v208 = (int)((v205 - a5) * v12) / a5;
      int v209 = (v208 > 0) | (v208 >> 31);
      if (v208 < 0) {
        int v208 = -v208;
      }
      signed int v210 = v209 * ((v208 + 128) >> 8);
      int v211 = -a10;
      if (v210 >= a10) {
        signed int v210 = a10;
      }
      if (v210 <= v211) {
        signed int v210 = -a10;
      }
      *(unsigned char *)(v184 + (int)v250) = v210;
      if ((int)v204 >= 1)
      {
        uint64_t v212 = 0;
        uint64_t v213 = v180 + v240 * (uint64_t)v244 + 2 * (int)result;
        uint64_t v214 = (v245 - 2 * result);
        uint64_t result = 0x200000;
        do
        {
          if ((int)v214 >= 1)
          {
            for (uint64_t m = 0; m != v214; ++m)
            {
              uint64_t v216 = 0;
              int v217 = 0;
              int v218 = 0;
              char v219 = 1;
              do
              {
                uint64_t v220 = 0;
                char v221 = v219;
                uint64_t v222 = (v216 + (v212 << 35) + (m << 33)) >> 32;
                char v223 = 1;
                do
                {
                  char v224 = v223;
                  int v225 = *((_DWORD *)&v261 + (v222 | v220));
                  if (v225 == -1) {
                    int v225 = 0;
                  }
                  else {
                    ++v218;
                  }
                  v217 += v225;
                  uint64_t v220 = 1;
                  char v223 = 0;
                }
                while ((v224 & 1) != 0);
                char v219 = 0;
                uint64_t v216 = 0x400000000;
              }
              while ((v221 & 1) != 0);
              unsigned int v226 = (v217 + (v218 >> 1)) / v218;
              if (v226 >= 2)
              {
                unsigned int v227 = __clz(v226);
                unsigned int v228 = ((byte_1BBB8A634[(unint64_t)(v226 << (v227 + 1)) >> 24] << 12) | 0x200000u) >> ((v227 + 1) >> 1);
                if ((v227 & 1) == 0) {
                  unsigned int v228 = (11585 * v228) >> 14;
                }
                unsigned int v226 = (v228 + 16) >> 5;
              }
              int v229 = (int)((v226 - a5) * v12) / a5;
              int v230 = (v229 > 0) | (v229 >> 31);
              if (v229 < 0) {
                int v229 = -v229;
              }
              signed int v231 = v230 * ((v229 + 128) >> 8);
              if (v231 >= a10) {
                signed int v231 = a10;
              }
              if (v231 <= v211) {
                LOBYTE(v231) = -(char)a10;
              }
              *(unsigned char *)(v213 + v212 * v260 + m) = v231;
            }
          }
          ++v212;
        }
        while (v212 != v204);
      }
    }
  }
  return result;
}

uint64_t sub_1BBA81F78(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    unint64_t v10 = 0;
    unint64_t v11 = a4;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (int *)(a5 + 4 * (v10 >> 3) * a6);
        int v14 = (int *)(a7 + 4 * (v10 >> 3) * a8);
        uint64_t v15 = *a10;
        do
        {
          uint64_t v16 = 0;
          uint64_t v17 = result + v12;
          *uint64_t v13 = 0;
          *int v14 = 0;
          int v18 = *v13;
          char v19 = 1;
          do
          {
            char v20 = v19;
            char v21 = (unsigned __int8 *)(v17 + v16 * a2);
            int v22 = v18 + *v21;
            *uint64_t v13 = v22;
            int v18 = v22 + v21[4];
            *uint64_t v13 = v18;
            uint64_t v16 = 4;
            char v19 = 0;
          }
          while ((v20 & 1) != 0);
          uint64_t v23 = 0;
          int v24 = 16 * v18;
          *uint64_t v13 = v24;
          unsigned int v25 = (v24 + 32) >> 6;
          int v26 = *v14;
          char v27 = 1;
          do
          {
            uint64_t v28 = 0;
            char v29 = v27;
            uint64_t v30 = v23 * a2;
            char v31 = 1;
            do
            {
              char v32 = v31;
              int v33 = *(unsigned __int8 *)(v17 + v28 + v30) - v25;
              if (v33 < 0) {
                int v33 = -v33;
              }
              v26 += v33;
              *int v14 = v26;
              uint64_t v28 = 4;
              char v31 = 0;
            }
            while ((v32 & 1) != 0);
            char v27 = 0;
            uint64_t v23 = 4;
          }
          while ((v29 & 1) != 0);
          *v14++ = 16 * v26;
          *a9 += 16 * v26;
          unsigned int v34 = *v13++;
          v15 += v34;
          *a10 = v15;
          v12 += 8;
        }
        while (v12 < a3);
      }
      result += 8 * a2;
      v10 += 8;
    }
    while (v10 < v11);
  }
  return result;
}

uint64_t sub_1BBA820BC(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t *a10)
{
  if (a4 >= 1)
  {
    for (unint64_t i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = (int *)(a7 + 4 * (i >> 3) * a8);
        uint64_t v13 = (unsigned int *)(a5 + 4 * (i >> 3) * a6);
        uint64_t v14 = *a10;
        do
        {
          uint64_t v15 = 0;
          *uint64_t v13 = 0;
          *uint64_t v12 = 0;
          char v16 = 1;
          do
          {
            uint64_t v17 = 0;
            char v18 = v16;
            uint64_t v19 = v15 * a2;
            char v20 = 1;
            do
            {
              uint64_t v21 = 0;
              int v22 = 0;
              char v23 = v20;
              uint64_t v24 = result + v11 + v17 + v19;
              char v25 = 1;
              do
              {
                char v26 = v25;
                v22 += *(unsigned __int8 *)(v24 + v21 * a2) + *(unsigned __int8 *)(v24 + v21 * a2 + 2);
                uint64_t v21 = 2;
                char v25 = 0;
              }
              while ((v26 & 1) != 0);
              uint64_t v27 = 0;
              int v28 = 0;
              int v29 = 4 * v22;
              char v30 = 1;
              do
              {
                uint64_t v31 = 0;
                char v32 = v30;
                uint64_t v33 = v27 * a2;
                char v34 = 1;
                do
                {
                  char v35 = v34;
                  int v36 = *(unsigned __int8 *)(v24 + v31 + v33) - ((v29 + 8) >> 4);
                  if (v36 < 0) {
                    int v36 = -v36;
                  }
                  v28 += v36;
                  uint64_t v31 = 2;
                  char v34 = 0;
                }
                while ((v35 & 1) != 0);
                char v30 = 0;
                uint64_t v27 = 2;
              }
              while ((v32 & 1) != 0);
              char v20 = 0;
              *v12 += 4 * v28;
              *v13 += v29;
              uint64_t v17 = 4;
            }
            while ((v23 & 1) != 0);
            char v16 = 0;
            uint64_t v15 = 4;
          }
          while ((v18 & 1) != 0);
          int v37 = *v12++;
          *a9 += v37;
          unsigned int v38 = *v13++;
          v14 += v38;
          *a10 = v14;
          v11 += 8;
        }
        while (v11 < a3);
      }
      result += 8 * a2;
    }
  }
  return result;
}

uint64_t sub_1BBA82264(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 296);
  float v3 = *(float *)(v2 + 2720);
  int v4 = (int)(v3 + 0.5);
  uint64_t v5 = *(void *)(v2 + 592);
  if (*(unsigned char *)(v5 + 136))
  {
    int v7 = *(_DWORD *)(v5 + 248);
    uint64_t v6 = (signed int *)(v5 + 248);
    if (v7 <= 0) {
      uint64_t v8 = v6 - 2;
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v9 = v6 - 1;
    int v11 = v6[1];
    unint64_t v10 = v6 + 1;
    if (v11 <= 0) {
      unint64_t v10 = v9;
    }
  }
  else
  {
    uint64_t v8 = (signed int *)(v5 + 276);
    unint64_t v10 = (signed int *)(v5 + 280);
  }
  uint64_t v12 = 0;
  signed int v13 = *v8;
  signed int v14 = *v10;
  unsigned int v28 = *(_DWORD *)(result + 84);
  do
  {
    uint64_t v25 = v12;
    uint64_t v15 = *(char **)(v1 + 8 * v12 + 1488);
    if (!v15) {
      goto LABEL_48;
    }
    int v16 = *(_DWORD *)(v1 + 20);
    if (v16 < 1) {
      goto LABEL_48;
    }
    signed int v17 = 0;
    int v18 = 8 << v12;
    uint64_t v26 = *(int *)(v1 + 4 * v12 + 1520);
    int v19 = *(_DWORD *)(v1 + 16);
    int v29 = v12 + 3;
    do
    {
      if (v19 < 1) {
        goto LABEL_47;
      }
      signed int v20 = 0;
      uint64_t v27 = v15;
      do
      {
        if (v20 >= v13 || v17 >= v14)
        {
          *uint64_t v15 = 51;
          if (*(_DWORD *)(v1 + 24) == 10) {
            char v22 = 63;
          }
          else {
            char v22 = 51;
          }
          goto LABEL_44;
        }
        int v21 = *(_DWORD *)(*(void *)(v1 + 296) + 444);
        if (v21
          && (!*(unsigned char *)(v1 + 13) ? (uint64_t result = 0) : (uint64_t result = sub_1BBA824A0(v1, v20, v17, v29)),
              *(_DWORD *)(v1 + 88) != v4))
        {
          if (v21 == 6 && v3 < (float)v4)
          {
            if (v4 + (((v17 + v20) >> v29) & 1)) {
              LOBYTE(v23) = 0;
            }
            else {
              LOBYTE(v23) = -1;
            }
          }
          else
          {
            LOBYTE(v23) = *v15 + result + v4;
          }
          if (v28 >= v23) {
            unsigned int v23 = v23;
          }
          else {
            unsigned int v23 = v28;
          }
          if (v23 >= 0x33) {
            unsigned int v23 = 51;
          }
          *uint64_t v15 = v23;
          if (v23 <= *(unsigned __int8 *)(v1 + 88)) {
            LOBYTE(v23) = *(unsigned char *)(v1 + 88);
          }
          *uint64_t v15 = v23;
        }
        else
        {
          *uint64_t v15 = v4;
          LOBYTE(v23) = (int)(v3 + 0.5);
        }
        if (*(_DWORD *)(v1 + 24) == 10)
        {
          char v22 = v23 + 12;
LABEL_44:
          *uint64_t v15 = v22;
        }
        v20 += v18;
        int v19 = *(_DWORD *)(v1 + 16);
        ++v15;
      }
      while (v20 < v19);
      int v16 = *(_DWORD *)(v1 + 20);
      uint64_t v15 = v27;
LABEL_47:
      v15 += v26;
      v17 += v18;
    }
    while (v17 < v16);
LABEL_48:
    uint64_t v12 = v25 + 1;
  }
  while (v25 != 3);
  return result;
}

uint64_t sub_1BBA824A0(uint64_t a1, signed int a2, signed int a3, int a4)
{
  signed int v4 = a2 & 0xFFFFFFF8;
  if (a4 >= 3) {
    signed int v5 = a3;
  }
  else {
    signed int v5 = a3 & 0xFFFFFFF8;
  }
  if (a4 <= 3) {
    char v6 = 3;
  }
  else {
    char v6 = a4;
  }
  if (a4 >= 3) {
    signed int v4 = a2;
  }
  signed int v7 = *(_DWORD *)(a1 + 20);
  if (v7 >= v5 + (1 << v6)) {
    signed int v7 = v5 + (1 << v6);
  }
  if (v5 >= v7)
  {
    int v8 = 0;
  }
  else
  {
    int v8 = 0;
    int v9 = v4 + (1 << v6);
    if (*(_DWORD *)(a1 + 16) < v9) {
      int v9 = *(_DWORD *)(a1 + 16);
    }
    do
    {
      if (v4 < v9)
      {
        int v10 = v4;
        do
        {
          v8 += *(char *)(*(void *)(a1 + 1720)
                        + (v5 >> 3)
                        * (*(__int16 *)(*(void *)(a1 + 304) + 8 * *(int *)(*(void *)(a1 + 304) + 16) + 24) >> 3)
                        + (v10 >> 3));
          v10 += 8;
        }
        while (v10 < v9);
      }
      v5 += 8;
    }
    while (v5 < v7);
  }
  return (v8 >> (2 * v6 - 6));
}

uint64_t sub_1BBA82558(uint64_t result, int a2, int a3, _DWORD *a4, int a5, int a6)
{
  if (a3 >= 1)
  {
    int v6 = 0;
    int v7 = 0;
    float v8 = (float)(int)a4[2];
    float v9 = (float)(int)a4[3];
    int v10 = *a4 - (int)(float)((float)(v8 * 0.0) * 0.5);
    unsigned int v11 = v10 & ~(v10 >> 31);
    int v12 = a4[1] - (int)(float)((float)(v9 * 0.0) * 0.5);
    unsigned int v13 = v12 & ~(v12 >> 31);
    signed int v14 = v11 + (int)v8;
    int v15 = v13 + (int)v9;
    do
    {
      if (a2 >= 1)
      {
        int v16 = v6 | 4;
        if ((int)((v6 | 4) - v13) >= 0) {
          int v17 = (v6 | 4) - v13;
        }
        else {
          int v17 = v13 - (v6 | 4);
        }
        int v18 = (v6 | 4) - v13 - (int)v9;
        if (v18 < 0) {
          int v18 = (int)v9 - ((v6 | 4) - v13);
        }
        if (v18 < v17) {
          int v17 = v18;
        }
        if (v16 <= v15) {
          int v19 = (v6 | 4u) > v13;
        }
        else {
          int v19 = ((v6 | 4u) > v13) + 1;
        }
        int v20 = 3 * v19;
        float v21 = (float)v17;
        int v22 = v17 * v17;
        uint64_t v23 = v7;
        int v24 = 4;
        do
        {
          uint64_t v25 = v23;
          if (v24 <= v11 || v24 >= v14 || v16 <= v13 || (float v26 = (float)a5, v16 >= v15))
          {
            int v27 = v24 - v11;
            if ((int)(v24 - v11) < 0) {
              int v27 = v11 - v24;
            }
            unsigned int v28 = v24 - v14;
            if (v24 - v14 < 0) {
              unsigned int v28 = v14 - v24;
            }
            if (v28 < v27) {
              int v27 = v28;
            }
            if (v24 <= v11) {
              unsigned int v29 = v20;
            }
            else {
              unsigned int v29 = v20 + 1;
            }
            if (v24 > v14) {
              ++v29;
            }
            float v30 = 0.0;
            if (v29 <= 8)
            {
              int v31 = 1 << v29;
              if ((v31 & 0x145) != 0)
              {
                float v30 = sqrtf((float)(v22 + v27 * v27));
              }
              else if ((v31 & 0x28) != 0)
              {
                float v30 = (float)v27;
              }
              else if ((v31 & 0x82) != 0)
              {
                float v30 = v21;
              }
            }
            float v32 = fmaxf(16.0 - v30, 0.0) * 0.0625;
            float v26 = (float)a5;
            if (v32 < 1.0) {
              float v26 = (float)((float)(1.0 - v32) * (float)a6) + (float)((float)a5 * v32);
            }
          }
          uint64_t v23 = v25 + 1;
          *(unsigned char *)(result + v25) = (int)v26;
          int v33 = v24 + 4;
          v24 += 8;
        }
        while (v33 < a2);
        int v7 = v23;
      }
      v6 += 8;
    }
    while (v6 < a3);
  }
  return result;
}

uint64_t sub_1BBA8272C(int a1, int a2, char a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a5 + 4);
  unsigned int v6 = v5 - 3;
  if ((v5 - 3) > 3)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = *(char **)(a5 + 8 * v6 + 1488);
    if (v7) {
      v7 += (((*(_DWORD *)(a5 + 16) + ~(-1 << v5)) & (-1 << v5)) >> v5) * (a2 >> v5) + (uint64_t)(a1 >> v5);
    }
  }
  int v8 = 1 << (*(unsigned char *)(*(void *)(*(void *)(a5 + 296) + 40) + 2009) - a3);
  int v9 = *(_DWORD *)(a5 + 20) - a2;
  if (v8 < v9) {
    int v9 = 1 << (*(unsigned char *)(*(void *)(*(void *)(a5 + 296) + 40) + 2009) - a3);
  }
  uint64_t v10 = (v9 >> v5);
  if ((int)v10 < 1) {
    return 51;
  }
  uint64_t v11 = 0;
  if (v8 >= *(_DWORD *)(a5 + 16) - a1) {
    int v8 = *(_DWORD *)(a5 + 16) - a1;
  }
  uint64_t v12 = (v8 >> v5);
  uint64_t v13 = *(int *)(a5 + 4 * (int)v6 + 1520);
  uint64_t result = 51;
  do
  {
    int v15 = v7;
    uint64_t v16 = v12;
    if ((int)v12 >= 1)
    {
      do
      {
        int v18 = *v15++;
        unsigned int v17 = v18;
        if ((int)result >= v18) {
          uint64_t result = v17;
        }
        else {
          uint64_t result = result;
        }
        --v16;
      }
      while (v16);
    }
    ++v11;
    v7 += v13;
  }
  while (v11 != v10);
  return result;
}

uint64_t sub_1BBA82818(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v6 = *(_DWORD *)(a5 + 1304);
  if (v6)
  {
    uint64_t v10 = *(void **)(a5 + 296);
    uint64_t v11 = v10[5];
    int v12 = *(unsigned __int8 *)(v11 + 2009) - a3;
    uint64_t v13 = v10[73];
    int v14 = *(char *)(v13 + 3310);
    int v15 = sub_1BBA8290C(a5, a1, a2, *(unsigned char *)(v11 + 2009) - a3, *(_DWORD *)(a5 + 16), *(_DWORD *)(a5 + 20), *(char *)(v13 + 3309));
    if (*(unsigned char *)(a5 + 13)) {
      a4 = sub_1BBA824A0(a5, a1, a2, v12) + a4;
    }
    int v16 = sub_1BBA82D0C(a4, -*(unsigned __int8 *)(v11 + 2001), v15, v6, v14);
    LODWORD(a4) = v16;
    uint64_t v17 = v10[339];
    if (v17)
    {
      int v18 = *(_DWORD *)(v17 + 284) + 3;
      if (v18 >= v16) {
        LODWORD(a4) = v16;
      }
      else {
        LODWORD(a4) = v18;
      }
    }
  }
  if ((int)a4 >= 51) {
    return 51;
  }
  else {
    return a4;
  }
}

unint64_t sub_1BBA8290C(uint64_t a1, int a2, int a3, char a4, int a5, int a6, int a7)
{
  switch(a7)
  {
    case 0:
      return sub_1BBA82F38(a1, a2, a3, a4, a5, a6);
    case 1:
      int v8 = 1 << (a4 - 3);
      int v9 = (a6 - a3) >> 3;
      if (v9 >= v8) {
        int v9 = 1 << (a4 - 3);
      }
      if (v9 < 1)
      {
        LODWORD(result) = -1;
LABEL_63:
        unsigned int v66 = __clz(result);
        unsigned int v67 = v66 + 1;
        unint64_t v68 = (result << (v66 + 1));
        goto LABEL_67;
      }
      int v10 = 0;
      if ((a5 - a2) >> 3 < v8) {
        int v8 = (a5 - a2) >> 3;
      }
      uint64_t v11 = (uint64_t)a5 >> 3;
      uint64_t v12 = *(void *)(a1 + 1328) + 4 * (int)v11 * (uint64_t)(a3 >> 3) + 4 * (a2 >> 3);
      uint64_t v13 = 4 * v11;
      unint64_t result = 0xFFFFFFFFLL;
      do
      {
        if (v8 >= 1)
        {
          uint64_t v14 = 0;
          do
          {
            unsigned int v15 = *(_DWORD *)(v12 + v14);
            if (v15 >= result) {
              unint64_t result = result;
            }
            else {
              unint64_t result = v15;
            }
            v14 += 4;
          }
          while (4 * v8 != v14);
        }
        ++v10;
        v12 += v13;
      }
      while (v10 != v9);
      if (result >= 2) {
        goto LABEL_63;
      }
      return result;
    case 2:
      int v16 = *(_DWORD *)a1;
      LODWORD(v17) = 1 << (a4 - *(_DWORD *)a1);
      int v18 = (a6 - a3) >> *(_DWORD *)a1;
      if (v18 >= (int)v17) {
        int v18 = 1 << (a4 - *(_DWORD *)a1);
      }
      if (v18 < 1) {
        return -1;
      }
      int v19 = 0;
      char v20 = 2 * v16;
      int v21 = (a5 - a2) >> v16;
      if (v21 >= (int)v17) {
        uint64_t v17 = v17;
      }
      else {
        uint64_t v17 = v21;
      }
      uint64_t v22 = a5 >> v16;
      int v23 = a2 >> v16;
      uint64_t v24 = (int)v22 * (uint64_t)(a3 >> v16);
      uint64_t v25 = *(void *)(a1 + 1392) + 8 * v24 + 8 * (a2 >> v16);
      uint64_t v26 = *(void *)(a1 + 1376) + 4 * v24 + 4 * v23;
      uint64_t v27 = 1 << (v20 - 1);
      uint64_t v28 = 4 * v22;
      uint64_t v29 = 8 * v22;
      unint64_t result = -1;
      do
      {
        if ((int)v17 >= 1)
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            uint64_t v31 = (*(_DWORD *)(v26 + 4 * i) * *(_DWORD *)(v26 + 4 * i)) >> v20;
            if ((unint64_t)(*(void *)(v25 + 8 * i) + (int)v27 - v31) >> v20 < result) {
              unint64_t result = (unint64_t)(*(void *)(v25 + 8 * i) + v27 - v31) >> v20;
            }
          }
        }
        ++v19;
        v26 += v28;
        v25 += v29;
      }
      while (v19 != v18);
      return result;
    case 3:
      int v32 = *(_DWORD *)a1;
      LODWORD(v33) = 1 << (a4 - *(_DWORD *)a1);
      int v34 = (a6 - a3) >> *(_DWORD *)a1;
      if (v34 >= (int)v33) {
        int v34 = 1 << (a4 - *(_DWORD *)a1);
      }
      if (v34 < 1)
      {
        LODWORD(v47) = -1;
      }
      else
      {
        int v35 = 0;
        char v36 = 2 * v32;
        int v37 = (a5 - a2) >> v32;
        if (v37 >= (int)v33) {
          uint64_t v33 = v33;
        }
        else {
          uint64_t v33 = v37;
        }
        uint64_t v38 = a5 >> v32;
        int v39 = a3 >> v32;
        int v40 = a2 >> v32;
        uint64_t v41 = (int)v38 * (uint64_t)v39;
        uint64_t v42 = *(void *)(a1 + 1392) + 8 * v41 + 8 * v40;
        uint64_t v43 = *(void *)(a1 + 1376) + 4 * v41 + 4 * v40;
        uint64_t v44 = 1 << (v36 - 1);
        uint64_t v45 = 4 * v38;
        uint64_t v46 = 8 * v38;
        unint64_t v47 = -1;
        do
        {
          if ((int)v33 >= 1)
          {
            for (uint64_t j = 0; j != v33; ++j)
            {
              uint64_t v49 = (*(_DWORD *)(v43 + 4 * j) * *(_DWORD *)(v43 + 4 * j)) >> v36;
              if ((unint64_t)(*(void *)(v42 + 8 * j) + (int)v44 - v49) >> v36 < v47) {
                unint64_t v47 = (unint64_t)(*(void *)(v42 + 8 * j) + v44 - v49) >> v36;
              }
            }
          }
          ++v35;
          v43 += v45;
          v42 += v46;
        }
        while (v35 != v34);
        unint64_t result = v47;
        if (v47 < 2) {
          return result;
        }
      }
      unsigned int v66 = __clz(v47);
      unsigned int v67 = v66 + 1;
      unint64_t v68 = (v47 << (v66 + 1));
LABEL_67:
      unsigned int v69 = ((byte_1BBB8A634[v68 >> 24] << 12) | 0x200000u) >> (v67 >> 1);
      if (v66) {
        unsigned int v70 = v69;
      }
      else {
        unsigned int v70 = (11585 * v69) >> 14;
      }
      return (v70 + 16) >> 5;
    case 4:
      int v50 = *(_DWORD *)a1;
      LODWORD(v51) = 1 << (a4 - *(_DWORD *)a1);
      if ((a6 - a3) >> *(_DWORD *)a1 >= (int)v51) {
        int v52 = 1 << (a4 - *(_DWORD *)a1);
      }
      else {
        int v52 = (a6 - a3) >> *(_DWORD *)a1;
      }
      if (v52 < 1) {
        return 0;
      }
      int v53 = 0;
      uint64_t v54 = 0;
      char v55 = 2 * v50;
      int v56 = (a5 - a2) >> v50;
      uint64_t v51 = v56 >= (int)v51 ? v51 : v56;
      uint64_t v57 = a5 >> v50;
      int v58 = a2 >> v50;
      uint64_t v59 = (int)v57 * (uint64_t)(a3 >> v50);
      uint64_t v60 = *(void *)(a1 + 1392) + 8 * v59 + 8 * (a2 >> v50);
      uint64_t v61 = *(void *)(a1 + 1376) + 4 * v59 + 4 * v58;
      uint64_t v62 = 4 * v57;
      uint64_t v63 = 8 * v57;
      do
      {
        if ((int)v51 >= 1)
        {
          for (uint64_t k = 0; k != v51; ++k)
            v54 += (*(void *)(v60 + 8 * k)
                  + (1 << (v55 - 1))
                  - (unint64_t)((*(_DWORD *)(v61 + 4 * k) * *(_DWORD *)(v61 + 4 * k)) >> v55)) >> v55;
        }
        ++v53;
        v61 += v62;
        v60 += v63;
      }
      while (v53 != v52);
      unint64_t v65 = (v51 & ~((int)v51 >> 31)) * v52;
      if (!v65) {
        return 0;
      }
      return (v54 + (unint64_t)(v65 >> 1)) / v65;
    default:
      return 0;
  }
}

uint64_t sub_1BBA82D0C(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5 = a1;
  if (a4 >= 1)
  {
    int v9 = a1 << 6;
    switch(a5)
    {
      case 0:
        int v10 = ((a3 - a4) << 10) / a4;
        if (v10 >= v9) {
          int v11 = a1 << 6;
        }
        else {
          int v11 = ((a3 - a4) << 10) / a4;
        }
        if (v10 <= -64 * (int)a1) {
          int v12 = -64 * a1;
        }
        else {
          int v12 = v11;
        }
        int v13 = (v12 > 0) | (v12 >> 31);
        if (v12 < 0) {
          int v12 = -v12;
        }
        signed int v14 = v13 * ((v12 + 128) >> 8);
        break;
      case 1:
        double v15 = (double)v9;
        long double v16 = exp2((double)v9 * 0.00390625 / 6.0);
        double v17 = log2(((double)a4 + v16 * (double)(a3 + 1) + 1.0) / ((double)(a3 + 1) + v16 * (double)(a4 + 1))) * 6.0;
        int v18 = (int)((fabs(v17) + 1.0) * 0.5 * (double)(((int)v17 > 0) | ((int)v17 >> 31)));
        int v19 = (int)(v15 * 0.00390625);
        if (v18 < v19) {
          int v19 = v18;
        }
        if (v18 <= (int)-(v15 * 0.00390625)) {
          signed int v14 = (int)-(v15 * 0.00390625);
        }
        else {
          signed int v14 = v19;
        }
        break;
      case 2:
        double v20 = (double)v9 * 0.00390625;
        signed int v14 = (int)-v20;
        int v21 = (int)v20;
        double v22 = (double)(a3 - a4)
            / (double)a4
            * ((double)(a3 - a4)
             / (double)a4)
            * (v20
             * (double)(((int)((double)(a3 - a4) / (double)a4) > 0) | ((int)((double)(a3 - a4) / (double)a4) >> 31)));
        goto LABEL_20;
      case 3:
        double v23 = (double)v9 * 0.00390625;
        signed int v14 = (int)-v23;
        int v21 = (int)v23;
        double v22 = v23
            * ((double)(a3 - a4)
             / (double)a4
             * ((double)(a3 - a4)
              / (double)a4
              * ((double)(a3 - a4)
               / (double)a4)));
LABEL_20:
        if ((int)v22 < v21) {
          int v21 = (int)v22;
        }
        if ((int)v22 > v14) {
          signed int v14 = v21;
        }
        break;
      default:
        signed int v14 = 0;
        break;
    }
    int v24 = v14 + v5;
    if (v24 >= 51) {
      unsigned int v25 = 51;
    }
    else {
      unsigned int v25 = v24;
    }
    if (v24 <= a2) {
      return a2;
    }
    else {
      return v25;
    }
  }
  return v5;
}

uint64_t sub_1BBA82F38(uint64_t a1, int a2, int a3, char a4, int a5, int a6)
{
  int v6 = 1 << (a4 - 3);
  int v7 = (a6 - a3) >> 3;
  if (v7 >= v6) {
    int v7 = 1 << (a4 - 3);
  }
  if ((a5 - a2) >> 3 < v6) {
    int v6 = (a5 - a2) >> 3;
  }
  if (v7 < 1)
  {
    int v9 = 0;
  }
  else
  {
    int v8 = 0;
    int v9 = 0;
    uint64_t v10 = (uint64_t)a5 >> 3;
    uint64_t v11 = *(void *)(a1 + 1328) + 4 * (int)v10 * (uint64_t)(a3 >> 3) + 4 * (a2 >> 3);
    uint64_t v12 = 4 * v10;
    do
    {
      if (v6 >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          v9 += *(_DWORD *)(v11 + v13);
          v13 += 4;
        }
        while (4 * v6 != v13);
      }
      ++v8;
      v11 += v12;
    }
    while (v8 != v7);
  }
  uint64_t result = (v9 + ((v7 * v6) >> 1)) / (v7 * v6);
  if (result >= 2)
  {
    unsigned int v15 = __clz(result);
    if (v15) {
      unsigned int v16 = ((byte_1BBB8A634[(unint64_t)(result << (v15 + 1)) >> 24] << 12) | 0x200000u) >> ((v15 + 1) >> 1);
    }
    else {
      unsigned int v16 = (11585
    }
           * (((byte_1BBB8A634[(unint64_t)(result << (v15 + 1)) >> 24] << 12) | 0x200000u) >> ((v15 + 1) >> 1))) >> 14;
    return (v16 + 16) >> 5;
  }
  return result;
}

unsigned __int16 *sub_1BBA83030(uint64_t a1, int a2, int a3, char a4, int a5, int a6)
{
  if (a5) {
    return (unsigned __int16 *)sub_1BBAE41A4(*(void *)(a1 + 344), a2 - a3, a6);
  }
  uint64_t v7 = *(void *)(a1 + 360);
  int v8 = 1 << a4;
  int v9 = (1 << a4) - 1;
  int v10 = v9 & a2;
  unint64_t v11 = *(unsigned int *)(v7 + 4);
  if (v11)
  {
    uint64_t v12 = 12;
    do
    {
      int v13 = v12;
      int v14 = *(unsigned __int16 *)(v7 + 2 * v12);
      BOOL v15 = v10 == v14;
      if (v12 - 11 >= v11) {
        break;
      }
      ++v12;
    }
    while (v10 != v14);
    unsigned int v16 = v13 - 12;
    uint64_t v17 = *(unsigned int *)(v7 + 4);
  }
  else
  {
    uint64_t v17 = 0;
    unsigned int v16 = 0;
    BOOL v15 = 0;
  }
  uint64_t v18 = v7 + 2 * v17;
  *(_WORD *)(v18 + 56) = a2;
  int v19 = (unsigned __int16 *)(v18 + 56);
  *(v19 - 16) = v10;
  uint64_t result = v19 - 16;
  int v20 = 1 << v11;
  int v21 = *(unsigned __int16 *)(v7 + 216);
  int v22 = v21 & ~(1 << v11);
  int v23 = v21 | (1 << v11);
  if (!a6) {
    LOWORD(v23) = v22;
  }
  *(_WORD *)(v7 + 216) = v23;
  __int16 v24 = *(_WORD *)(v7 + 218);
  if (v15)
  {
    int v25 = v9 & a3;
    unsigned __int16 v26 = v24 | v20;
    *(_WORD *)(v7 + 218) = v26;
    *(_DWORD *)(v7 + 4 * v17 + 152) = (*result + a3 - (v25 + *v19)) / v8;
    if ((v26 & (unsigned __int16)(1 << v16)) == 0)
    {
      *(_WORD *)(v7 + 218) = v26 | (1 << v16);
      *(_DWORD *)(v7 + 4 * v16 + 152) = (*(unsigned __int16 *)(v7 + 2 * v16 + 24)
                                         + a3
                                         - (v25
                                          + *(unsigned __int16 *)(v7 + 2 * v16 + 56)))
                                        / v8;
    }
  }
  else
  {
    *(_WORD *)(v7 + 218) = v24 & ~(_WORD)v20;
  }
  *(_DWORD *)(v7 + 4) = v11 + 1;
  return result;
}

uint64_t sub_1BBA83160(uint64_t a1)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 296);
  uint64_t v3 = v2[73];
  uint64_t v4 = *(unsigned int *)(v3 + 3744);
  uint64_t v5 = v2[93];
  uint64_t v6 = v2[76];
  int v7 = *(_DWORD *)(v6 + 12);
  int v99 = *(_DWORD *)(v6 + 680);
  int v100 = *(char *)(v3 + 3335);
  int v8 = *(_DWORD *)(v3 + 3688);
  uint64_t v9 = *(void *)(v3 + 12688);
  int v96 = *(char *)(v3 + 3333);
  unsigned int v98 = &v106;
  if (!v8)
  {
    int v97 = *(unsigned __int8 *)(v9 + 198) + 1;
    uint64_t v106 = 0;
    unint64_t v107 = 0;
    CFNumberRef v105 = (uint64_t *)&v106;
LABEL_5:
    int v103 = 0;
    uint64_t v104 = 0;
    unsigned int v101 = &v103;
    int v102 = &v103;
    sub_1BBA1E700(v5);
    uint64_t v12 = *(void *)(a1 + 296);
    int v13 = *(unsigned __int8 *)(v12 + 3024);
    uint64_t v95 = a1;
    if (v13)
    {
      uint64_t v14 = 0;
      int v15 = 0;
      int v16 = v97 - 2;
      uint64_t v17 = v98;
      while (1)
      {
        uint64_t v18 = *(void *)sub_1BBA1D644(v5, *(_DWORD *)(v5 + 4 * v14 + 288));
        if (v18 && *(_DWORD *)(v18 + 40) == 2)
        {
          int v19 = *(_DWORD *)(v18 + 680);
          int v20 = v106;
          int v21 = v17;
          int v22 = (uint64_t *)v17;
          if (v106)
          {
            do
            {
              while (1)
              {
                int v22 = v20;
                int v23 = *((_DWORD *)v20 + 7);
                if (v19 <= v23) {
                  break;
                }
                int v20 = (uint64_t *)*v22;
                int v21 = v22;
                if (!*v22) {
                  goto LABEL_16;
                }
              }
              if (v23 <= v19) {
                goto LABEL_19;
              }
              int v20 = (uint64_t *)v22[1];
            }
            while (v20);
            int v21 = v22 + 1;
          }
LABEL_16:
          __int16 v24 = operator new(0x20uLL);
          v24[7] = v19;
          *(void *)__int16 v24 = 0;
          *((void *)v24 + 1) = 0;
          *((void *)v24 + 2) = v22;
          *int v21 = v24;
          if (*v105)
          {
            CFNumberRef v105 = (uint64_t *)*v105;
            __int16 v24 = (_DWORD *)*v21;
          }
          sub_1BB9C8438(v106, (uint64_t *)v24);
          ++v107;
LABEL_19:
          if (v15 == v16)
          {
LABEL_22:
            if (!v107)
            {
              uint64_t v11 = 1;
              goto LABEL_125;
            }
LABEL_92:
            if (v96 < 1 || (uint64_t v77 = (uint64_t)v105, v105 == (uint64_t *)v17))
            {
              unsigned int v79 = 0;
              goto LABEL_124;
            }
            int v78 = 0;
            unsigned int v79 = 0;
            int v80 = v97 - 1;
            uint64_t v11 = 1;
            while (2)
            {
              int v81 = *(_DWORD *)(v77 + 28);
              uint64_t v82 = (uint64_t *)sub_1BBA1D644(v5, v81);
              uint64_t v84 = *v82;
              int v83 = (std::__shared_weak_count *)v82[1];
              if (v83) {
                atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v84)
              {
                int v85 = *(_DWORD *)(v84 + 12);
                if (v85)
                {
                  if (v85 > v7 || v78 >= v100)
                  {
LABEL_103:
                    char v87 = 0;
                    goto LABEL_108;
                  }
                }
                else if (v78 >= v100)
                {
                  goto LABEL_103;
                }
                ++v78;
                char v87 = 1;
LABEL_108:
                if (v79 <= 0xF)
                {
                  uint64_t v89 = &v111[v79];
                  *(_WORD *)uint64_t v89 = v81 - v99;
                  *((unsigned char *)v89 + 2) = v87;
                }
                if ((int)++v79 >= v80) {
                  int v88 = 39;
                }
                else {
                  int v88 = 0;
                }
                if (v83) {
LABEL_114:
                }
                  sub_1BB9C09B4(v83);
              }
              else
              {
                uint64_t v11 = 4294954385;
                int v88 = 1;
                if (v83) {
                  goto LABEL_114;
                }
              }
              if (v88)
              {
                if (v88 != 39)
                {
LABEL_125:
                  sub_1BBA83C3C(v103);
                  int v10 = v106;
                  goto LABEL_126;
                }
LABEL_124:
                sub_1BBAE5608(*(void *)(v95 + 344), v5, v111, v79, v99);
                uint64_t v11 = 0;
                goto LABEL_125;
              }
              CFNumberRef v90 = *(uint64_t **)(v77 + 8);
              if (v90)
              {
                do
                {
                  unsigned int v91 = (uint64_t **)v90;
                  CFNumberRef v90 = (uint64_t *)*v90;
                }
                while (v90);
              }
              else
              {
                do
                {
                  unsigned int v91 = *(uint64_t ***)(v77 + 16);
                  BOOL v92 = *v91 == (uint64_t *)v77;
                  uint64_t v77 = (uint64_t)v91;
                }
                while (!v92);
              }
              uint64_t v77 = (uint64_t)v91;
              if (v91 == v17) {
                goto LABEL_124;
              }
              continue;
            }
          }
          ++v15;
        }
        if (++v14 == 17) {
          goto LABEL_22;
        }
      }
    }
    if ((int)v4 > 0)
    {
      int v25 = *(unsigned __int8 *)(*(void *)(v12 + 40) + 198);
      unsigned __int16 v26 = v110;
      uint64_t v27 = v4;
      do
      {
        *v26++ = v25;
        --v27;
      }
      while (v27);
    }
    for (uint64_t i = 0; i != 17; ++i)
    {
      uint64_t v29 = sub_1BBA1D644(v5, *(_DWORD *)(v5 + 4 * i + 288));
      if (*(void *)v29)
      {
        int v30 = *(_DWORD *)(*(void *)v29 + 680);
        LODWORD(v108[0]) = 0;
        if ((int)v4 >= 1)
        {
          uint64_t v31 = v29;
          int v32 = 0;
          do
          {
            int v33 = *(_DWORD *)(*(void *)v31 + 12);
            if (v33 <= v7 && v33 <= v32)
            {
              int v35 = sub_1BBA83ABC((uint64_t **)&v102, v32, v108);
              char v36 = operator new(0x18uLL);
              v36[4] = v30;
              int v37 = v35[5];
              v35 += 5;
              *(void *)char v36 = v37;
              *((void *)v36 + 1) = v35;
              v37[1] = (uint64_t)v36;
              *int v35 = (uint64_t *)v36;
              v35[2] = (uint64_t *)((char *)v35[2] + 1);
            }
            LODWORD(v108[0]) = ++v32;
          }
          while (v4 != v32);
        }
      }
    }
    v94[1] = v94;
    MEMORY[0x1F4188790]();
    int v39 = (char *)v94 - ((v38 + 15) & 0x7FFFFFFF0);
    LODWORD(v108[0]) = 0;
    int v40 = v4 - 1;
    if ((int)v4 < 1)
    {
      unint64_t v59 = v107;
    }
    else
    {
      for (uint64_t j = 0; j != v4; LODWORD(v108[0]) = j)
      {
        if (sub_1BBA83ABC((uint64_t **)&v102, j, v108)[7] && v107 < (int)v110[j])
        {
          int v42 = *((_DWORD *)sub_1BBA83ABC((uint64_t **)&v102, j, v108)[6] + 4);
          sub_1BBA83B90((uint64_t *)&v105, v42, v42);
          int v43 = *(_DWORD *)(*(void *)sub_1BBA1D644(v5, v42) + 40);
          uint64_t v44 = sub_1BBA83ABC((uint64_t **)&v102, j, v108);
          uint64_t v45 = v44[6];
          uint64_t v46 = *v45;
          *(void *)(v46 + 8) = v45[1];
          *(void *)v45[1] = v46;
          v44[7] = (uint64_t *)((char *)v44[7] - 1);
          operator delete(v45);
          BOOL v47 = v43 == 2;
          BOOL v48 = v43 == 1;
        }
        else
        {
          BOOL v47 = 0;
          BOOL v48 = 0;
        }
        if (sub_1BBA83ABC((uint64_t **)&v102, j, v108)[7]) {
          char v49 = v47;
        }
        else {
          char v49 = 1;
        }
        if ((v49 & 1) == 0 && v107 < (int)v110[j])
        {
          for (uint64_t k = sub_1BBA83ABC((uint64_t **)&v102, j, v108) + 6; ; uint64_t k = (uint64_t **)(v51 + 1))
          {
            uint64_t v51 = *k;
            if (v51 == (uint64_t *)(sub_1BBA83ABC((uint64_t **)&v102, j, v108) + 5)) {
              goto LABEL_55;
            }
            if (*(_DWORD *)(*(void *)sub_1BBA1D644(v5, *((_DWORD *)v51 + 4)) + 40) == 2) {
              break;
            }
          }
          sub_1BBA83B90((uint64_t *)&v105, *((_DWORD *)v51 + 4), *((_DWORD *)v51 + 4));
          int v52 = sub_1BBA83ABC((uint64_t **)&v102, j, v108);
          int v53 = (uint64_t *)*v51;
          v53[1] = v51[1];
          *(void *)v51[1] = v53;
          v52[7] = (uint64_t *)((char *)v52[7] - 1);
          operator delete(v51);
        }
LABEL_55:
        if (sub_1BBA83ABC((uint64_t **)&v102, j, v108)[7]) {
          char v54 = v48;
        }
        else {
          char v54 = 1;
        }
        if ((v54 & 1) == 0 && v107 < (int)v110[j])
        {
          for (uint64_t m = sub_1BBA83ABC((uint64_t **)&v102, j, v108) + 6; ; uint64_t m = (uint64_t **)(v56 + 1))
          {
            int v56 = *m;
            if (v56 == (uint64_t *)(sub_1BBA83ABC((uint64_t **)&v102, j, v108) + 5)) {
              goto LABEL_65;
            }
            if (*(_DWORD *)(*(void *)sub_1BBA1D644(v5, *((_DWORD *)v56 + 4)) + 40) == 1) {
              break;
            }
          }
          sub_1BBA83B90((uint64_t *)&v105, *((_DWORD *)v56 + 4), *((_DWORD *)v56 + 4));
          uint64_t v57 = sub_1BBA83ABC((uint64_t **)&v102, j, v108);
          int v58 = (uint64_t *)*v56;
          v58[1] = v56[1];
          *(void *)v56[1] = v58;
          v57[7] = (uint64_t *)((char *)v57[7] - 1);
          operator delete(v56);
        }
LABEL_65:
        unint64_t v59 = v107;
        *(_DWORD *)&v39[4 * j++] = v107;
      }
    }
    unint64_t v60 = (int)v110[v40];
LABEL_69:
    if (v59 >= v60)
    {
LABEL_91:
      uint64_t v17 = v98;
      goto LABEL_92;
    }
    uint64_t v61 = v103;
    for (n = v101; ; uint64_t v61 = *n)
    {
      uint64_t v63 = n;
      if (!v61) {
        goto LABEL_78;
      }
      while (1)
      {
        n = (uint64_t **)v61;
        int v64 = *((_DWORD *)v61 + 8);
        if ((int)v4 <= v64) {
          break;
        }
        if (v64 >= v40)
        {
          unint64_t v65 = n;
          goto LABEL_81;
        }
        uint64_t v61 = n[1];
        if (!v61)
        {
          uint64_t v63 = n + 1;
LABEL_78:
          unint64_t v65 = operator new(0x40uLL);
          v108[1] = v101;
          v65[8] = v40;
          *((void *)v65 + 5) = v65 + 10;
          *((void *)v65 + 6) = v65 + 10;
          *((void *)v65 + 7) = 0;
          char v109 = 1;
          *(void *)unint64_t v65 = 0;
          *((void *)v65 + 1) = 0;
          *((void *)v65 + 2) = n;
          *uint64_t v63 = (uint64_t *)v65;
          unsigned int v66 = (uint64_t *)v65;
          if (*v102)
          {
            int v102 = (uint64_t **)*v102;
            unsigned int v66 = *v63;
          }
          sub_1BB9C8438(v103, v66);
          ++v104;
          v108[0] = 0;
          sub_1BBA83D34((uint64_t)v108);
LABEL_81:
          if (!*((void *)v65 + 7)) {
            goto LABEL_91;
          }
          LODWORD(v108[0]) = 0;
          if ((int)v4 >= 1)
          {
            uint64_t v67 = 0;
            unint64_t v68 = v39;
            int v69 = v4;
            do
            {
              if (sub_1BBA83ABC((uint64_t **)&v102, v67, v108)[7])
              {
                int v70 = v107;
                if (v107 < v60 && *(_DWORD *)&v39[4 * v67] < v110[v67])
                {
                  signed int v71 = sub_1BBA83ABC((uint64_t **)&v102, v67, v108);
                  sub_1BBA83B90((uint64_t *)&v105, *((_DWORD *)v71[6] + 4), *((_DWORD *)v71[6] + 4));
                  unsigned int v72 = sub_1BBA83ABC((uint64_t **)&v102, v67, v108);
                  unsigned int v73 = v72[6];
                  uint64_t v74 = *v73;
                  *(void *)(v74 + 8) = v73[1];
                  *(void *)v73[1] = v74;
                  v72[7] = (uint64_t *)((char *)v72[7] - 1);
                  operator delete(v73);
                  int v75 = v68;
                  int v76 = v69;
                  if (v107 > v70)
                  {
                    do
                    {
                      ++*v75++;
                      --v76;
                    }
                    while (v76);
                  }
                }
              }
              LODWORD(v108[0]) = ++v67;
              --v69;
              ++v68;
            }
            while (v67 != v4);
          }
          unint64_t v59 = v107;
          goto LABEL_69;
        }
      }
    }
  }
  int v97 = *(_DWORD *)(*(void *)(v9 + 2048) + 1320);
  uint64_t v106 = 0;
  unint64_t v107 = 0;
  CFNumberRef v105 = (uint64_t *)&v106;
  if (v8 != 1) {
    goto LABEL_5;
  }
  int v10 = 0;
  uint64_t v11 = 4294954394;
LABEL_126:
  sub_1BBA83C90(v10);
  return v11;
}

void sub_1BBA83A74(_Unwind_Exception *a1)
{
  sub_1BBA83C3C(*(void **)(v1 - 256));
  sub_1BBA83C90(*(void **)(v1 - 232));
  _Unwind_Resume(a1);
}

uint64_t **sub_1BBA83ABC(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  int v7 = a1 + 1;
  int v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        int v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v10 = operator new(0x40uLL);
    v12[1] = v6;
    v10[8] = *a3;
    *((void *)v10 + 5) = v10 + 10;
    *((void *)v10 + 6) = v10 + 10;
    *((void *)v10 + 7) = 0;
    char v13 = 1;
    sub_1BBA83CDC(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_1BBA83D34((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_1BBA83B90(uint64_t *result, int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 >= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 <= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_1BBA83CDC(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void sub_1BBA83C3C(void *a1)
{
  if (a1)
  {
    sub_1BBA83C3C(*a1);
    sub_1BBA83C3C(a1[1]);
    sub_1BB9C83D4(a1 + 5);
    operator delete(a1);
  }
}

void sub_1BBA83C90(void *a1)
{
  if (a1)
  {
    sub_1BBA83C90(*a1);
    sub_1BBA83C90(a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_1BBA83CDC(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_1BB9C8438(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_1BBA83D34(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1BB9C83D4(v1 + 5);
    }
    operator delete(v1);
  }
}

uint64_t sub_1BBA83D8C(void *a1)
{
  v384[7] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[37];
  uint64_t v3 = *(void *)(v2 + 584);
  uint64_t v4 = *(void *)(v2 + 608);
  unsigned int v368 = *(_DWORD *)(v4 + 680);
  int v5 = *(_DWORD *)(v3 + 3688);
  uint64_t v6 = *(void *)(v3 + 12688);
  uint64_t v7 = *(void *)(v2 + 40);
  if (v5)
  {
    int v8 = *(_DWORD *)(*(void *)(v6 + 2048) + 1320);
    LODWORD(v6) = *(_DWORD *)(*(void *)(v7 + 2048) + 280);
  }
  else
  {
    int v8 = *(unsigned __int8 *)(v6 + 198) + 1;
    LOBYTE(v6) = *(unsigned char *)(v7 + 196);
  }
  char v363 = v6 + 4;
  int v377 = *(char *)(v3 + 3333);
  int v9 = *(char *)(v3 + 3334);
  unint64_t v10 = *(char *)(v3 + 3335);
  int v11 = *(unsigned __int8 *)(v2 + 3024);
  uint64_t v12 = *(void *)(v2 + 744);
  uint64_t v13 = a1[43];
  *(unsigned char *)(v13 + 163) = 0;
  *(_WORD *)(v13 + 176) = 0;
  uint64_t v366 = v3;
  uint64_t v369 = v12;
  if (v5 == 1)
  {
    uint64_t v14 = a1[45];
    *(_DWORD *)(v14 + 4) = 0;
    *(_DWORD *)(v14 + 216) = 0;
    int v15 = (int *)sub_1BBA1E700(v12);
    LODWORD(v16) = 0;
    for (uint64_t i = 16; i != 288; i += 16)
    {
      if (*(void *)(v12 + i)) {
        uint64_t v16 = (v16 + 1);
      }
      else {
        uint64_t v16 = v16;
      }
    }
    uint64_t v18 = a1[37];
    uint64_t v19 = *(void *)(v18 + 608);
    int v20 = *(_DWORD *)(v19 + 36);
    unsigned int v375 = v9;
    if ((v20 & 2) == 0) {
      goto LABEL_247;
    }
    int v21 = 0;
    for (uint64_t j = 16; j != 288; j += 16)
    {
      uint64_t v23 = *(void *)(v12 + j);
      if (v23) {
        LODWORD(v23) = (*(unsigned __int8 *)(v23 + 36) >> 1) & 1;
      }
      v21 += v23;
    }
    if (v21 < v9) {
      goto LABEL_247;
    }
    if (v16)
    {
      int v24 = 0;
      unint64_t v25 = v16 + 1;
      int v26 = 0x7FFFFFFF;
      int v27 = 0x7FFFFFFF;
      do
      {
        uint64_t v28 = (uint64_t *)sub_1BBA1D644(v369, v15[(v25 - 2)]);
        uint64_t v29 = *v28;
        if ((*(unsigned char *)(*v28 + 36) & 2) != 0)
        {
          int v30 = *(_DWORD *)(v29 + 40);
          BOOL v31 = v30 == 3 && v26 == 0x7FFFFFFF;
          if (v31)
          {
            int v26 = *(_DWORD *)(v29 + 680);
          }
          else if (v30 == 2)
          {
            if (v27 == 0x7FFFFFFF) {
              int v27 = *(_DWORD *)(v29 + 680);
            }
            ++v24;
          }
        }
        --v25;
      }
      while (v25 > 1);
      if (v26 != 0x7FFFFFFF)
      {
        uint64_t v18 = a1[37];
        *(_DWORD *)(v18 + 432) = v26;
        uint64_t v12 = v369;
        goto LABEL_247;
      }
      uint64_t v18 = a1[37];
      uint64_t v12 = v369;
      if (v27 != 0x7FFFFFFF && v24 > 1)
      {
        *(_DWORD *)(v18 + 432) = v27;
        goto LABEL_247;
      }
      uint64_t v19 = *(void *)(v18 + 608);
      int v20 = *(_DWORD *)(v19 + 36);
    }
    *(void *)(v19 + 36) = v20 & 0xFFFFFFFC | 1;
LABEL_247:
    if (*(unsigned char *)(*(void *)(v18 + 608) + 36))
    {
      int v218 = 0;
      for (uint64_t k = 16; k != 288; k += 16)
      {
        uint64_t v220 = *(void *)(v12 + k);
        if (v220) {
          LODWORD(v220) = *(unsigned char *)(v220 + 36) & 1;
        }
        v218 += v220;
      }
      if (v218 >= v377)
      {
        uint64_t v221 = v16;
        do
        {
          if ((int)v221 < 1) {
            goto LABEL_257;
          }
          uint64_t v222 = v221 - 1;
          char v223 = sub_1BBA1D644(v12, v15[v221 - 1]);
          uint64_t v221 = v222;
        }
        while ((*(unsigned char *)(*(void *)v223 + 36) & 1) == 0);
        *(_DWORD *)(a1[37] + 432) = *(_DWORD *)(*(void *)v223 + 680);
      }
    }
LABEL_257:
    if (v16)
    {
      uint64_t v224 = 0;
      int v225 = 0;
      unsigned int v226 = (FILE **)MEMORY[0x1E4F143C8];
      unsigned int v227 = MEMORY[0x1E4F14500];
      while (1)
      {
        unsigned int v228 = (uint64_t *)sub_1BBA1D644(v369, *v15);
        if (!*v228)
        {
          if (dword_1E9F80A90 >= 1)
          {
            fprintf(*v226, "Failed to find frame poc=%d in DPB\n", *v15);
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              int v243 = *v15;
              *(_DWORD *)CMTime buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v243;
              _os_log_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to find frame poc=%d in DPB\n", buf, 8u);
            }
          }
          return 4294954394;
        }
        int v229 = v228;
        int v230 = *(_DWORD *)(*v228 + 36);
        if ((v230 & 1) != 0 && (v230 & 2) != 0 && dword_1E9F80A90 >= 2)
        {
          fprintf(*v226, "[Poc %d]: reference poc %d is set as both STR and LTR\n", v368, *v15);
          if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
          {
            int v232 = *v15;
            *(_DWORD *)CMTime buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v368;
            LOWORD(v384[0]) = 1024;
            *(_DWORD *)((char *)v384 + 2) = v232;
            _os_log_impl(&dword_1BB9B9000, v227, OS_LOG_TYPE_DEFAULT, "[Poc %d]: reference poc %d is set as both STR and LTR\n", buf, 0xEu);
          }
        }
        if (!v11) {
          break;
        }
        uint64_t v231 = *v229;
        if (*(_DWORD *)(*v229 + 40) != 2 || v225 >= *(char *)(v3 + 3335))
        {
          int v233 = *(_DWORD *)(v231 + 680);
          int v234 = *(_DWORD *)(v231 + 36);
          goto LABEL_272;
        }
        sub_1BBA83030((uint64_t)a1, *(_DWORD *)(v231 + 680), v368, v363, *(_DWORD *)(v231 + 36) & 1, 1);
        ++v225;
LABEL_274:
        ++v224;
        ++v15;
        if (v16 == v224) {
          goto LABEL_275;
        }
      }
      int v233 = *(_DWORD *)(*v229 + 680);
      int v234 = *(_DWORD *)(*v229 + 36);
      if (v224 >= *(char *)(v3 + 3335))
      {
LABEL_272:
        int v235 = v234 & 1;
        uint64_t v236 = (uint64_t)a1;
        int v237 = v368;
        char v238 = v363;
        int v239 = 0;
      }
      else
      {
        int v235 = *(_DWORD *)(*v229 + 36) & 1;
        uint64_t v236 = (uint64_t)a1;
        int v237 = v368;
        char v238 = v363;
        int v239 = 1;
      }
      sub_1BBA83030(v236, v233, v237, v238, v235, v239);
      goto LABEL_274;
    }
LABEL_275:
    int v240 = a1;
    uint64_t v241 = a1[45];
    if (*(_DWORD *)(v241 + 4) > v375) {
      *(_DWORD *)(v241 + 4) = *(char *)(v3 + 3334);
    }
    sub_1BBAE43E8(a1[43], 0);
    uint64_t v12 = v369;
    uint64_t v242 = a1[45];
LABEL_445:
    uint64_t result = sub_1BBA1CEF4((_DWORD *)v240[41], v12, (unsigned char *)v240[43], v242, v368, v363);
    if (!result)
    {
      uint64_t v352 = a1[37];
      if (*(unsigned char *)(v352 + 640) != 4) {
        return 0;
      }
      uint64_t v353 = a1[41];
      if (*(_DWORD *)(v353 + 8) || *(_DWORD *)(v353 + 12))
      {
        return 0;
      }
      else
      {
        uint64_t result = 0;
        *(unsigned char *)(v352 + 640) = 3;
      }
    }
    return result;
  }
  if (*(_DWORD *)(v3 + 3488) != 1)
  {
    int v40 = *(_DWORD *)(v2 + 648);
    uint64_t v41 = *(void *)(v7 + 264) + 248 * v40;
    long long v42 = *(_OWORD *)(v41 + 112);
    long long v44 = *(_OWORD *)(v41 + 64);
    long long v43 = *(_OWORD *)(v41 + 80);
    *(_OWORD *)(v13 + 96) = *(_OWORD *)(v41 + 96);
    *(_OWORD *)(v13 + 112) = v42;
    *(_OWORD *)(v13 + 64) = v44;
    *(_OWORD *)(v13 + 80) = v43;
    long long v45 = *(_OWORD *)(v41 + 176);
    long long v47 = *(_OWORD *)(v41 + 128);
    long long v46 = *(_OWORD *)(v41 + 144);
    *(_OWORD *)(v13 + 160) = *(_OWORD *)(v41 + 160);
    *(_OWORD *)(v13 + 176) = v45;
    *(_OWORD *)(v13 + 128) = v47;
    *(_OWORD *)(v13 + 144) = v46;
    long long v49 = *(_OWORD *)(v41 + 208);
    long long v48 = *(_OWORD *)(v41 + 224);
    long long v50 = *(_OWORD *)(v41 + 192);
    *(void *)(v13 + 238) = *(void *)(v41 + 238);
    *(_OWORD *)(v13 + 208) = v49;
    *(_OWORD *)(v13 + 224) = v48;
    *(_OWORD *)(v13 + 192) = v50;
    long long v51 = *(_OWORD *)v41;
    long long v52 = *(_OWORD *)(v41 + 16);
    long long v53 = *(_OWORD *)(v41 + 48);
    *(_OWORD *)(v13 + 32) = *(_OWORD *)(v41 + 32);
    *(_OWORD *)(v13 + 48) = v53;
    *(_OWORD *)uint64_t v13 = v51;
    *(_OWORD *)(v13 + 16) = v52;
    if (*(unsigned char *)(v13 + 160))
    {
      uint64_t v54 = 0;
      char v55 = (__int16 *)v13;
      while (1)
      {
        int v56 = *v55;
        v55 += 2;
        if (!*(void *)sub_1BBA1D644(v12, v368 + v56)) {
          break;
        }
        if (++v54 >= (unint64_t)*(unsigned __int8 *)(v13 + 160)) {
          goto LABEL_50;
        }
      }
    }
    else
    {
LABEL_50:
      if (!*(unsigned char *)(v13 + 161)) {
        goto LABEL_420;
      }
      uint64_t v57 = 0;
      int v58 = (__int16 *)(v13 + 64);
      while (1)
      {
        int v59 = *v58;
        v58 += 2;
        if (!*(void *)sub_1BBA1D644(v12, v368 + v59)) {
          break;
        }
        if (++v57 >= (unint64_t)*(unsigned __int8 *)(v13 + 161)) {
          goto LABEL_420;
        }
      }
    }
    *(unsigned char *)(v13 + 163) = 0;
    *(_DWORD *)(v13 + 242) = 0;
    *(_WORD *)(v13 + 176) = 0;
    uint64_t v60 = v3 + 108 * v40;
    int v61 = *(unsigned __int8 *)(v60 + 3816);
    if (*(unsigned char *)(v60 + 3816))
    {
      unint64_t v62 = 0;
      int v63 = 0;
      int v64 = (unsigned __int8 *)(v60 + 3816);
      uint64_t v65 = v3 + 108 * v40 + 3820;
      do
      {
        int v66 = *(_DWORD *)(v65 + 4 * v62) + v368;
        if (((v368 & 0x80000000) != 0 || (v66 & 0x80000000) == 0) && *(void *)sub_1BBA1D644(v369, v66))
        {
          int v67 = *(_DWORD *)(v65 + 4 * v62);
          if (v67 < 0) {
            ++*(unsigned char *)(v13 + 176);
          }
          else {
            ++*(unsigned char *)(v13 + 177);
          }
          *(_DWORD *)&buf[4 * v63++] = v67;
        }
        ++v62;
      }
      while (v62 < *v64);
      int v68 = *(unsigned __int8 *)(v13 + 176);
      int v61 = *(unsigned __int8 *)(v13 + 177);
      uint64_t v12 = v369;
    }
    else
    {
      int v68 = 0;
      int v63 = 0;
    }
    unsigned int v72 = v61 + v68;
    uint64_t v73 = v3 + 108 * v40;
    if (v72 < *(unsigned __int8 *)(v73 + 3817))
    {
      uint64_t v74 = (unsigned __int8 *)(v73 + 3817);
      uint64_t v75 = sub_1BBA1E700(v12);
      for (uint64_t m = 0; m != 17; ++m)
      {
        uint64_t v77 = *(void *)sub_1BBA1D644(v369, *(_DWORD *)(v75 + 4 * m));
        if (v77)
        {
          int v78 = *(_DWORD *)(v77 + 680);
          if ((v78 & 0x80000000) == 0)
          {
            int v79 = v78 - v368;
            if (v63 < 1)
            {
LABEL_79:
              if (v79 < 0) {
                ++*(unsigned char *)(v13 + 176);
              }
              else {
                ++*(unsigned char *)(v13 + 177);
              }
              *(_DWORD *)&buf[4 * v63++] = v79;
            }
            else
            {
              uint64_t v80 = v63;
              int v81 = buf;
              while (1)
              {
                int v82 = *(_DWORD *)v81;
                v81 += 4;
                if (v79 == v82) {
                  break;
                }
                if (!--v80) {
                  goto LABEL_79;
                }
              }
            }
            int v68 = *(unsigned __int8 *)(v13 + 176);
            if (*(unsigned __int8 *)(v13 + 177) + v68 >= *v74) {
              goto LABEL_86;
            }
          }
        }
      }
      int v68 = *(unsigned __int8 *)(v13 + 176);
LABEL_86:
      uint64_t v12 = v369;
    }
    if (v68)
    {
      if (v63 >= 1)
      {
        uint64_t v83 = 0;
        int v84 = 0;
        __int16 v85 = 0;
        while (1)
        {
          uint64_t v86 = 0;
          int v87 = 0x7FFFFFFF;
          unsigned int v88 = -1;
          do
          {
            int v89 = *(_DWORD *)&buf[4 * v86];
            if (v89 < 0 && v84 < -v89 && v87 > -v89)
            {
              int v87 = -v89;
              unsigned int v88 = v86;
            }
            ++v86;
          }
          while (v63 != v86);
          if (v88 > 0xF) {
            break;
          }
          int v90 = *(_DWORD *)&buf[4 * v88];
          *(_WORD *)(v13 + 2 * v83 + 178) = v85 + ~(_WORD)v90;
          *(_WORD *)(v13 + 242) |= 1 << v83;
          int v84 = -v90;
          ++v83;
          __int16 v85 = v90;
          if (v83 == v68) {
            goto LABEL_97;
          }
        }
      }
    }
    else
    {
LABEL_97:
      uint64_t v91 = *(unsigned __int8 *)(v13 + 177);
      if (*(unsigned char *)(v13 + 177))
      {
        if (v63 >= 1)
        {
          uint64_t v92 = 0;
          int v93 = 0;
          while (1)
          {
            uint64_t v94 = 0;
            int v95 = 0x7FFFFFFF;
            unsigned int v96 = -1;
            do
            {
              int v97 = *(_DWORD *)&buf[4 * v94];
              BOOL v98 = v97 > v93;
              BOOL v99 = v97 < v95;
              BOOL v100 = !v98 || !v99;
              if (v98 && v99) {
                int v101 = *(_DWORD *)&buf[4 * v94];
              }
              else {
                int v101 = v95;
              }
              if (v100) {
                unsigned int v102 = v96;
              }
              else {
                unsigned int v102 = v94;
              }
              if (v97 >= 1)
              {
                int v95 = v101;
                unsigned int v96 = v102;
              }
              ++v94;
            }
            while (v63 != v94);
            if (v96 > 0xF) {
              break;
            }
            int v103 = *(_DWORD *)&buf[4 * v96];
            *(_WORD *)(v13 + 2 * v92 + 210) = v103 + ~(_WORD)v93;
            *(_WORD *)(v13 + 244) |= 1 << v92++;
            int v93 = v103;
            if (v92 == v91) {
              goto LABEL_112;
            }
          }
        }
      }
      else
      {
LABEL_112:
        if (v68 + v91) {
          sub_1BBAE43E8(v13, 0);
        }
      }
    }
    goto LABEL_420;
  }
  if (*(unsigned char *)(v3 + 3784))
  {
    LODWORD(v32) = 0;
    uint64_t v378 = a1[35];
    int v33 = *(void **)(v378 + 8);
    uint64_t v34 = v33[93];
    uint64_t v357 = v33[139];
    uint64_t v35 = v33[76];
    int v360 = *(_DWORD *)(v35 + 680);
    for (uint64_t n = 16; n != 288; n += 16)
    {
      if (*(void *)(v34 + n)) {
        unint64_t v32 = (v32 + 1);
      }
      else {
        unint64_t v32 = v32;
      }
    }
    uint64_t v37 = v33[73];
    if (*(unsigned char *)(v35 + 136))
    {
      uint64_t v38 = v33[74];
      if (*(unsigned char *)(v38 + 136))
      {
        int v359 = *(_DWORD *)(v38 + 248);
        if (v359 <= 0) {
          int v359 = *(_DWORD *)(v38 + 240);
        }
        int v355 = *(_DWORD *)(v38 + 252);
        if (v355 > 0)
        {
LABEL_125:
          int v362 = *(char *)(v37 + 3335);
          int v354 = *(char *)(v37 + 3333);
          sub_1BBA1E700(v34);
          if (v32)
          {
            uint64_t v114 = 0;
            unint64_t v356 = v32;
            uint64_t v358 = v34;
            do
            {
              int v115 = *(_DWORD *)(v34 + 4 * v114 + 288);
              char v116 = (uint64_t *)sub_1BBA1D644(v34, v115);
              char v117 = (std::__shared_weak_count *)v116[1];
              uint64_t v374 = *v116;
              if (v117) {
                atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v367 = v117;
              uint64_t v118 = v378 + 48 * v114;
              *(_DWORD *)(v118 + 1544) = v115;
              int v119 = v115 - v360;
              *(_DWORD *)(v118 + 1548) = v119;
              *(_DWORD *)(v118 + 1552) = 1;
              *(void *)(v118 + 1536) = 0;
              uint64_t v364 = v114;
              *(void *)(v118 + 1528) = *(void *)(v378 + 16 * v114 + 1256);
              uint64_t v120 = *(void *)(v374 + 1216);
              *(_DWORD *)(v118 + 1520) = *(_DWORD *)(v374 + 1224);
              *(void *)(v118 + 1512) = v120;
              if ((int)v32 > v362
                || ((sub_1BBAE41A4(v357, v119, 1), v119 >= 0) ? (int v121 = v119) : (int v121 = -v119), v121 == 1))
              {
                if (*(unsigned char *)(*(void *)(*(void *)(v378 + 8) + 608) + 136))
                {
                  if (v367) {
                    atomic_fetch_add_explicit(&v367->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (*(_DWORD *)(v374 + 248) == v359 && *(_DWORD *)(v374 + 252) == v355)
                  {
                    if ((*(uint64_t (**)(uint64_t, void))(*(void *)v374 + 32))(v374, 0) != *(void *)(v374 + 192)) {
                      *(unsigned char *)(v374 + 272) = 1;
                    }
                    *(_OWORD *)(v374 + 88) = *(_OWORD *)(v374 + 192);
                    __n128 v113 = *(__n128 *)(v374 + 216);
                    *(__n128 *)(v374 + 112) = v113;
                  }
                  else if (*(_DWORD *)(v374 + 240) == v359 && *(_DWORD *)(v374 + 244) == v355)
                  {
                    uint64_t v122 = (*(uint64_t (**)(uint64_t, void))(*(void *)v374 + 32))(v374, 0);
                    if (v122 != (*(uint64_t (**)(uint64_t, void))(*(void *)v374 + 48))(v374, 0)) {
                      *(unsigned char *)(v374 + 272) = 1;
                    }
                    uint64_t v123 = 0;
                    char v124 = 1;
                    do
                    {
                      char v125 = v124;
                      uint64_t v126 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v374 + 48))(v374, v123);
                      char v124 = 0;
                      uint64_t v127 = (void *)(v374 + 8 * v123);
                      v127[11] = v126;
                      v127[14] = v127[21];
                      uint64_t v123 = 1;
                    }
                    while ((v125 & 1) != 0);
                  }
                  else
                  {
                    int v128 = *(_DWORD *)(v374 + 680) - v360;
                    if (v128 < 0) {
                      int v128 = v360 - *(_DWORD *)(v374 + 680);
                    }
                    if (v128 <= 2)
                    {
                      uint64_t v129 = *(int *)(v374 + 280);
                      if (v129)
                      {
                        uint64_t v130 = *(void *)(v374 + 216);
                        size_t v131 = *(int *)(v374 + 276);
                        uint64_t v132 = *(char **)(v374 + 192);
                        do
                        {
                          --v129;
                          memset(v132, 128, v131);
                          v132 += v130;
                        }
                        while (v129);
                        unsigned int v133 = *(_DWORD *)(v374 + 280);
                        if (v133 >= 2)
                        {
                          size_t v134 = *(int *)(v374 + 276);
                          uint64_t v135 = *(void *)(v374 + 224);
                          uint64_t v136 = (uint64_t)(int)v133 >> 1;
                          CFNumberRef v137 = *(char **)(v374 + 200);
                          do
                          {
                            --v136;
                            memset(v137, 128, v134);
                            v137 += v135;
                          }
                          while (v136);
                        }
                      }
                      uint64_t v138 = 0;
                      char v139 = 1;
                      do
                      {
                        char v140 = v139;
                        uint64_t v141 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v374 + 48))(v374, v138);
                        char v139 = 0;
                        *(void *)(*(void *)(v378 + 2688) + 8 * v138) = v141;
                        unsigned int v146 = (void *)(v374 + 8 * v138);
                        *(void *)(*(void *)(v378 + 2688) + 8 * v138 + 16) = v146[24];
                        uint64_t v147 = *(void *)(v378 + 2688);
                        uint64_t v148 = v147 + 8 * v138;
                        *(void *)(v148 + 32) = v146[21];
                        *(void *)(v148 + 48) = v146[27];
                        uint64_t v138 = 1;
                      }
                      while ((v140 & 1) != 0);
                      *(void *)(v147 + 64) = *(void *)(v374 + 240);
                      *(_DWORD *)(v147 + 72) = v359;
                      *(_DWORD *)(v147 + 76) = v355;
                      sub_1BBAA6500(v147, v142, v143, v144, v145);
                      *(_OWORD *)(v374 + 88) = *(_OWORD *)(v374 + 192);
                      *(_OWORD *)(v374 + 112) = *(_OWORD *)(v374 + 216);
                      *(_DWORD *)(v374 + 248) = v359;
                      *(_DWORD *)(v374 + 252) = v355;
                      (*(void (**)(uint64_t, void, void, void))(*(void *)v374 + 80))(v374, 0, *(unsigned int *)(v374 + 280), 0);
                      *(unsigned char *)(v374 + 272) = 1;
                    }
                  }
                  if (v367) {
                    sub_1BB9C09B4(v367);
                  }
                }
                uint64_t v149 = *(void *)(v378 + 8);
                uint64_t v150 = *(void *)(v149 + 608);
                int v151 = *(_DWORD *)(v374 + 680) - *(_DWORD *)(v150 + 680);
                if (v151 < 0) {
                  int v151 = *(_DWORD *)(v150 + 680) - *(_DWORD *)(v374 + 680);
                }
                int v361 = v151;
                int v152 = *(_DWORD *)(v149 + 816);
                int v153 = *(_DWORD *)(v149 + 824);
                if (v152 >= v153)
                {
                  int v155 = 0;
                  unsigned int v154 = 0;
                }
                else
                {
                  unsigned int v154 = 0;
                  int v155 = 0;
                  uint64_t v371 = *(void *)(*(void *)(v149 + 592) + 112);
                  uint64_t v372 = *(void *)(v374 + 112);
                  uint64_t v156 = *(void *)(v150 + 112);
                  LODWORD(v150) = *(_DWORD *)(v149 + 820);
                  do
                  {
                    uint64_t v157 = *(int *)(v149 + 812);
                    if ((int)v157 < (int)v150)
                    {
                      uint64_t v158 = (8 * v152);
                      int v370 = v152;
                      uint64_t v376 = *(void *)(v378 + 16 * (int)v364 + 1256) + 4 * *(_DWORD *)(v149 + 828) * v152;
                      uint64_t v159 = (8 * v157);
                      do
                      {
                        uint64_t v160 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v149 + 592)
                                                                                           + 16))(*(void *)(v149 + 592), v159, v158, 0);
                        uint64_t v161 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v374 + 16))(v374, v159, v158, 0);
                        uint64_t v162 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v149 + 608)
                                                                                           + 16))(*(void *)(v149 + 608), v159, v158, 0);
                        (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v378 + 48))(8, 0, v372, v161, v156, v162);
                        int v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v378 + 2376))(8, 8, v160, v371, v162, v156);
                        *(_DWORD *)(v376 + 4 * v157) = v163;
                        v155 += v163;
                        ++v154;
                        ++v157;
                        uint64_t v150 = *(int *)(v149 + 820);
                        uint64_t v159 = (v159 + 8);
                      }
                      while (v157 < v150);
                      int v153 = *(_DWORD *)(v149 + 824);
                      int v152 = v370;
                    }
                    ++v152;
                  }
                  while (v152 < v153);
                }
                uint64_t v12 = v369;
                unint64_t v32 = v356;
                if (v361 == 1)
                {
                  unsigned int v164 = (v155 + (v154 >> 1)) / v154;
                  *(_DWORD *)(v378 + 2300) = v164;
                  *(_DWORD *)(*(void *)(v149 + 608) + 1220) = v164;
                }
              }
              if (v367) {
                sub_1BB9C09B4(v367);
              }
              uint64_t v114 = v364 + 1;
              uint64_t v3 = v366;
              uint64_t v34 = v358;
            }
            while (v364 + 1 != v32);
          }
          uint64_t v165 = *(void *)(v378 + 8);
          if (*(unsigned char *)(v165 + 640))
          {
            uint64_t v166 = *(_DWORD **)(v165 + 608);
            int v167 = v166[304];
            int v168 = *(_DWORD *)(v378 + 2280);
            if (25 * v167 >= (22 * v168)) {
              int v169 = 0;
            }
            else {
              int v169 = 2 * (20 * v166[305] > (23 * *(_DWORD *)(v378 + 2292)));
            }
            unsigned int v170 = *(_DWORD *)(v378 + 2296);
            if (v170 - 2 < 2)
            {
              if (50 * v167 > (47 * v168)) {
                int v171 = 1;
              }
              else {
                int v171 = 3;
              }
              v166[306] = v171;
            }
            else if (v170 <= 1)
            {
              v166[306] = v169;
            }
          }
          else
          {
            __n128 v113 = 0uLL;
            *(_OWORD *)(v378 + 2280) = 0u;
          }
          if ((int)v32 > v362)
          {
            uint64_t v172 = *(void *)(v378 + 8);
            int v173 = *(_DWORD *)(v172 + 816);
            int v174 = *(_DWORD *)(v172 + 824);
            uint64_t v175 = *(void *)(v172 + 744);
            if (v173 < v174)
            {
              LODWORD(v176) = 0;
              for (iuint64_t i = 16; ii != 288; ii += 16)
              {
                if (*(void *)(v175 + ii)) {
                  uint64_t v176 = (v176 + 1);
                }
                else {
                  uint64_t v176 = v176;
                }
              }
              int v178 = *(_DWORD *)(v172 + 812);
              int v179 = *(_DWORD *)(v172 + 820);
              do
              {
                if (v178 < v179)
                {
                  int v180 = v178;
                  do
                  {
                    if (v176)
                    {
                      uint64_t v181 = 0;
                      int v182 = 0;
                      unsigned int v183 = -1;
                      uint64_t v184 = (uint64_t *)(v378 + 1528);
                      do
                      {
                        uint64_t v185 = *v184;
                        v184 += 6;
                        unsigned int v186 = *(_DWORD *)(v185 + 4 * *(_DWORD *)(v172 + 828) * v173);
                        if (v186 < v183)
                        {
                          unsigned int v183 = v186;
                          int v182 = v181;
                        }
                        ++v181;
                      }
                      while (v176 != v181);
                    }
                    else
                    {
                      int v182 = 0;
                    }
                    ++*(_DWORD *)(v378 + 48 * v182 + 1536);
                    ++v180;
                  }
                  while (v180 != v179);
                }
                ++v173;
              }
              while (v173 != v174);
            }
            LODWORD(v187) = 0;
            for (juint64_t j = 16; jj != 288; jj += 16)
            {
              if (*(void *)(v175 + jj)) {
                unint64_t v187 = (v187 + 1);
              }
              else {
                unint64_t v187 = v187;
              }
            }
            int v189 = *(char *)(*(void *)v378 + 149);
            int v190 = *(_DWORD *)(*(void *)(v172 + 608) + 680);
            int v191 = (__n128 *)(v378 + 1512);
            char v192 = (__n128 *)(v378 + 1512 + 48 * v187);
            *(void *)CMTime buf = sub_1BBA3A71C;
            if (v187 < 0x81)
            {
              int v193 = 0;
              uint64_t v195 = 0;
            }
            else
            {
              int v193 = (__n128 *)sub_1BBA39AC8(v187);
              uint64_t v195 = v194;
            }
            __n128 v196 = sub_1BBA39B34(v191, v192, (unsigned int (**)(__n128 *, __n128 *))buf, v187, v193, v195, v113);
            if (v193) {
              operator delete(v193);
            }
            if (v187)
            {
              uint64_t v198 = 0;
              unsigned int v199 = 0;
              unsigned int v200 = 0;
              int v201 = (int *)(v378 + 1536);
              do
              {
                int v203 = *v201;
                v201 += 12;
                int v202 = v203;
                if (v198 >= (uint64_t)(v189 + 3) >> 2) {
                  int v204 = 0;
                }
                else {
                  int v204 = v202;
                }
                v200 += v204;
                v199 += v202;
                ++v198;
              }
              while (v187 != v198);
              v196.n128_f64[0] = (double)v200 / (double)v199;
              unsigned int v205 = (_DWORD *)(v378 + 1544);
              unint64_t v206 = v187;
              do
              {
                int v207 = *v205 - v190;
                LODWORD(v197) = *(v205 - 2);
                double v208 = v196.n128_f64[0] * (double)*(unint64_t *)&v197;
                if (v207 < 0) {
                  int v207 = v190 - *v205;
                }
                double v197 = v208 + (1.0 - v196.n128_f64[0]) * 32.0 / (double)v207 + 0.5;
                *(v205 - 1) = (int)v197;
                v205 += 12;
                --v206;
              }
              while (v206);
              *(void *)CMTime buf = sub_1BBA3A708;
              if (v187 < 0x81)
              {
                int v209 = 0;
                uint64_t v211 = 0;
              }
              else
              {
                int v209 = (__n128 *)sub_1BBA39AC8(v187);
                uint64_t v211 = v210;
              }
            }
            else
            {
              int v209 = 0;
              uint64_t v211 = 0;
              *(void *)CMTime buf = sub_1BBA3A708;
            }
            __n128 v212 = sub_1BBA39B34(v191, v192, (unsigned int (**)(__n128 *, __n128 *))buf, v187, v209, v211, v196);
            if (v209) {
              operator delete(v209);
            }
            *(_DWORD *)(v378 + 1552) = 2;
            int v213 = 1;
            if (v32 >= 2 && v362 >= 2)
            {
              uint64_t v214 = (unsigned int *)(v378 + 1568);
              for (kuint64_t k = 1; kk != v32; ++kk)
              {
                unsigned int v217 = *v214;
                v214 += 12;
                unsigned int v216 = v217;
                if (*(int *)(*(void *)(*(void *)(v378 + 8) + 608) + 1224) > 1)
                {
                  if (v216 > 1)
                  {
LABEL_282:
                    uint64_t v244 = v378 + 48 * kk;
                    int v213 = 2;
                    *(_DWORD *)(v244 + 1552) = 2;
                    goto LABEL_283;
                  }
                }
                else if (v216 < 2)
                {
                  goto LABEL_282;
                }
              }
              int v213 = 1;
            }
LABEL_283:
            if (v32 >= 2 && v213 < v362)
            {
              int v245 = (_DWORD *)(v378 + 1600);
              unint64_t v246 = 2;
              do
              {
                if (*v245 != 2)
                {
                  *int v245 = 2;
                  ++v213;
                }
                if (v246 >= v32) {
                  break;
                }
                ++v246;
                v245 += 12;
              }
              while (v213 < v362);
            }
            if (v32 < 2)
            {
              uint64_t v250 = 0;
              uint64_t v252 = 0;
              *(void *)CMTime buf = sub_1BBA3A6E4;
            }
            else
            {
              unint64_t v247 = v32 - 1;
              uint64_t v248 = (BOOL *)(v378 + 1600);
              do
              {
                if (*v248 != 2)
                {
                  BOOL v249 = v213++ < v354;
                  *uint64_t v248 = v249;
                }
                v248 += 12;
                --v247;
              }
              while (v247);
              *(void *)CMTime buf = sub_1BBA3A6E4;
              if (v32 < 0x81)
              {
                uint64_t v250 = 0;
                uint64_t v252 = 0;
              }
              else
              {
                uint64_t v250 = (__n128 *)sub_1BBA39AC8(v32);
                uint64_t v252 = v251;
              }
            }
            sub_1BBA39B34(v191, &v191[3 * v32], (unsigned int (**)(__n128 *, __n128 *))buf, v32, v250, v252, v212);
            if (v250) {
              operator delete(v250);
            }
            if (v32)
            {
              int v253 = *(_DWORD *)(*(void *)(*(void *)(v378 + 8) + 608) + 680);
              int v254 = (int *)(v378 + 1552);
              do
              {
                if (*v254 >= 1) {
                  sub_1BBAE41A4(v357, *(v254 - 2) - v253, *v254 != 1);
                }
                v254 += 12;
                --v32;
              }
              while (v32);
            }
          }
          goto LABEL_419;
        }
        int v39 = *(_DWORD *)(v38 + 244);
      }
      else
      {
        int v359 = *(_DWORD *)(v38 + 276);
        int v39 = *(_DWORD *)(v38 + 280);
      }
    }
    else
    {
      uint64_t v70 = v33[5];
      int v71 = *(_DWORD *)(v70 + 176);
      int v39 = *(_DWORD *)(v70 + 180);
      int v359 = v71;
    }
    int v355 = v39;
    goto LABEL_125;
  }
  if (*(int *)(v3 + 3744) >= 2)
  {
    uint64_t result = sub_1BBA83160((uint64_t)a1);
    if (result) {
      return result;
    }
LABEL_419:
    sub_1BBAE43E8(a1[43], 0);
LABEL_420:
    int v240 = a1;
    uint64_t v242 = a1[45];
    if (*(unsigned char *)(*(void *)(a1[37] + 40) + 280))
    {
      uint64_t v331 = 0;
      int v332 = 0;
      int v333 = (1 << v363) - 1;
      do
      {
        uint64_t v334 = *(void *)(v12 + 16 * v331 + 16);
        if (v334 && (*(unsigned char *)(v334 + 36) & 2) != 0)
        {
          unint64_t v335 = 0;
          int v336 = *(_DWORD *)(v334 + 680);
          int v337 = v336 & v333;
          uint64_t v338 = (uint64_t *)(v12 + 16);
          do
          {
            if (v331 == v335)
            {
              LOBYTE(v339) = 0;
            }
            else
            {
              uint64_t v339 = *v338;
              if (*v338) {
                LOBYTE(v339) = (*(_DWORD *)(v339 + 680) & v333) == v337;
              }
            }
            if (v335 > 0xF) {
              break;
            }
            ++v335;
            v338 += 2;
          }
          while ((v339 & 1) == 0);
          uint64_t v340 = v242 + 2 * v332;
          *(_WORD *)(v340 + 24) = v337;
          int v341 = (unsigned __int16 *)(v340 + 24);
          int v342 = 1 << v332;
          *(_WORD *)(v242 + 216) |= 1 << v332;
          if (v339)
          {
            *(_WORD *)(v242 + 218) |= v342;
            *(_DWORD *)(v242 + 4 * v332 + 152) = (int)((v368 & -(1 << v363)) - v336 + *v341) / (1 << v363);
          }
          else
          {
            *(_WORD *)(v242 + 218) &= ~(_WORD)v342;
          }
          ++v332;
        }
        ++v331;
      }
      while (v331 != 17);
      *(_DWORD *)(v242 + 4) = v332;
      int v343 = (unsigned __int16 *)(v242 + 24);
      unint64_t v344 = v332;
      uint64_t v345 = (unsigned __int16 *)(v242 + 24 + 2 * v332);
      if (v332 < 129)
      {
LABEL_440:
        sub_1BBA1DAC8(v343, v345, v344, 0, 0);
      }
      else
      {
        int v346 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
        unint64_t v347 = v332;
        while (1)
        {
          unsigned int v348 = (unsigned __int16 *)operator new(2 * v347, v346);
          if (v348) {
            break;
          }
          BOOL v349 = v347 > 1;
          v347 >>= 1;
          if (!v349) {
            goto LABEL_440;
          }
        }
        unsigned int v350 = v348;
        sub_1BBA1DAC8(v343, v345, v344, v348, v347);
        operator delete(v350);
      }
      int v240 = a1;
      uint64_t v242 = a1[45];
      unsigned int v351 = *(char *)(v3 + 3334);
      uint64_t v12 = v369;
      if (*(_DWORD *)(v242 + 4) > v351) {
        *(_DWORD *)(v242 + 4) = v351;
      }
    }
    else
    {
      *(_DWORD *)(v242 + 4) = 0;
    }
    goto LABEL_445;
  }
  int v373 = *(_DWORD *)(v4 + 256);
  int v382 = v373;
  v381[0] = 0;
  v381[1] = 0;
  int v380 = (uint64_t *)v381;
  int v104 = 0;
  if (v11)
  {
    int v105 = 0;
    int v106 = v373;
    do
    {
      unint64_t v107 = sub_1BBA1E428(v12, v104);
      uint64_t v108 = *v107;
      if (*v107 && *(_DWORD *)(v108 + 40) == 2)
      {
        char v109 = v107;
        int v110 = sub_1BBA83ABC(&v380, *(_DWORD *)(v108 + 256), (_DWORD *)(v108 + 256));
        LODWORD(v109) = *(_DWORD *)(*v109 + 680);
        char v111 = operator new(0x18uLL);
        v111[4] = v109;
        uint64_t v112 = v110[5];
        v110 += 5;
        *(void *)char v111 = v112;
        *((void *)v111 + 1) = v110;
        v112[1] = (uint64_t)v111;
        *int v110 = (uint64_t *)v111;
        v110[2] = (uint64_t *)((char *)v110[2] + 1);
        if (v105 == v8 - 2) {
          break;
        }
        ++v105;
      }
      ++v104;
    }
    while (v104 != 17);
  }
  else
  {
    v384[0] = 0;
    v384[1] = 0;
    *(void *)CMTime buf = v384;
    do
    {
      uint64_t v255 = sub_1BBA1E428(v12, v104);
      if (*(void *)v255)
      {
        uint64_t v256 = v255;
        int v257 = sub_1BBA83ABC((uint64_t **)buf, *(_DWORD *)(*(void *)v255 + 256), (_DWORD *)(*(void *)v255 + 256));
        LODWORD(v256) = *(_DWORD *)(*(void *)v256 + 680);
        uint64_t v258 = operator new(0x18uLL);
        v258[4] = v256;
        int v259 = v257[5];
        v257 += 5;
        *(void *)uint64_t v258 = v259;
        *((void *)v258 + 1) = v257;
        v259[1] = (uint64_t)v258;
        *int v257 = (uint64_t *)v258;
        v257[2] = (uint64_t *)((char *)v257[2] + 1);
      }
      ++v104;
    }
    while (v104 != 17);
    uint64_t v260 = *(void ***)buf;
    if (*(void ***)buf == v384)
    {
      int v261 = 0;
    }
    else
    {
      int v261 = 0;
      do
      {
        int v262 = *((_DWORD *)v260 + 8);
        int v379 = v262;
        long long v263 = (int *)(v260 + 5);
        sub_1BBA85D48((uint64_t)v260[6], (uint64_t)(v260 + 5), (unint64_t)v260[7]);
        if (v260[7])
        {
          int v264 = *((_DWORD *)v260[6] + 4);
          int v265 = *(_DWORD *)(*(void *)sub_1BBA1D644(v369, v264) + 40);
          int v266 = sub_1BBA83ABC(&v380, v262, &v379);
          CFNumberRef v267 = operator new(0x18uLL);
          v267[4] = v264;
          int v268 = v266[5];
          v266 += 5;
          *(void *)CFNumberRef v267 = v268;
          *((void *)v267 + 1) = v266;
          v268[1] = (uint64_t)v267;
          NSObject *v266 = (uint64_t *)v267;
          v266[2] = (uint64_t *)((char *)v266[2] + 1);
          uint64_t v269 = v260[6];
          uint64_t v270 = *v269;
          *(void *)(v270 + 8) = v269[1];
          *(void *)v269[1] = v270;
          v260[7] = (void *)((char *)v260[7] - 1);
          operator delete(v269);
          BOOL v271 = v265 == 1;
          if (v265 != 2 && v260[7] != 0)
          {
            for (muint64_t m = (int *)v260[6]; mm != v263; muint64_t m = (int *)*((void *)mm + 1))
            {
              if (*(_DWORD *)(*(void *)sub_1BBA1D644(v369, mm[4]) + 40) == 2)
              {
                int v274 = sub_1BBA83ABC(&v380, v262, &v379);
                uint64_t v275 = operator new(0x18uLL);
                v275[4] = mm[4];
                unsigned int v276 = v274[5];
                v274 += 5;
                *(void *)uint64_t v275 = v276;
                *((void *)v275 + 1) = v274;
                v276[1] = (uint64_t)v275;
                *int v274 = (uint64_t *)v275;
                v274[2] = (uint64_t *)((char *)v274[2] + 1);
                uint64_t v277 = *(void *)mm;
                *(void *)(v277 + 8) = *((void *)mm + 1);
                **((void **)mm + 1) = v277;
                v260[7] = (void *)((char *)v260[7] - 1);
                operator delete(mm);
                v261 += 2;
                goto LABEL_325;
              }
            }
          }
          ++v261;
        }
        else
        {
          BOOL v271 = 0;
        }
LABEL_325:
        uint64_t v278 = v260[7];
        if (!v271 && v278)
        {
          for (nuint64_t n = (int *)v260[6]; nn != v263; nuint64_t n = (int *)*((void *)nn + 1))
          {
            if (*(_DWORD *)(*(void *)sub_1BBA1D644(v369, nn[4]) + 40) == 1)
            {
              uint64_t v280 = sub_1BBA83ABC(&v380, v262, &v379);
              char v281 = operator new(0x18uLL);
              v281[4] = nn[4];
              int v282 = v280[5];
              v280 += 5;
              *(void *)char v281 = v282;
              *((void *)v281 + 1) = v280;
              v282[1] = (uint64_t)v281;
              *uint64_t v280 = (uint64_t *)v281;
              v280[2] = (uint64_t *)((char *)v280[2] + 1);
              uint64_t v283 = *(void *)nn;
              *(void *)(v283 + 8) = *((void *)nn + 1);
              **((void **)nn + 1) = v283;
              v260[7] = (void *)((char *)v260[7] - 1);
              operator delete(nn);
              ++v261;
              break;
            }
          }
          uint64_t v278 = v260[7];
        }
        if (v278)
        {
          do
          {
            if ((unint64_t)sub_1BBA83ABC(&v380, v262, &v379)[7] >= v10) {
              break;
            }
            int v284 = sub_1BBA83ABC(&v380, v262, &v379);
            uint64_t v285 = v260[6];
            double v286 = operator new(0x18uLL);
            v286[4] = *((_DWORD *)v285 + 4);
            uint64_t v287 = v284[5];
            v284 += 5;
            *(void *)double v286 = v287;
            *((void *)v286 + 1) = v284;
            v287[1] = (uint64_t)v286;
            *int v284 = (uint64_t *)v286;
            v284[2] = (uint64_t *)((char *)v284[2] + 1);
            ++v261;
            int v288 = v260[6];
            uint64_t v289 = *v288;
            *(void *)(v289 + 8) = v288[1];
            *(void *)v288[1] = v289;
            v260[7] = (void *)((char *)v260[7] - 1);
            operator delete(v288);
          }
          while (v260[7]);
        }
        int v290 = v260[1];
        if (v290)
        {
          do
          {
            double v291 = (void **)v290;
            int v290 = (void *)*v290;
          }
          while (v290);
        }
        else
        {
          do
          {
            double v291 = (void **)v260[2];
            BOOL v31 = *v291 == v260;
            uint64_t v260 = v291;
          }
          while (!v31);
        }
        uint64_t v260 = v291;
      }
      while (v291 != v384);
    }
    int v106 = v373;
    int v379 = v373;
    int v292 = v8 - 1;
    int v293 = v373;
    do
    {
      if (v261 >= v292) {
        break;
      }
      if (sub_1BBA83ABC((uint64_t **)buf, v293, &v379)[7])
      {
        __int16 v294 = sub_1BBA83ABC((uint64_t **)buf, v293, &v379);
        if (v294[7])
        {
          do
          {
            CFNumberRef v295 = sub_1BBA83ABC(&v380, v293, &v379);
            CFNumberRef v296 = v294[6];
            int v297 = operator new(0x18uLL);
            v297[4] = *((_DWORD *)v296 + 4);
            int v298 = v295[5];
            v295 += 5;
            *(void *)int v297 = v298;
            *((void *)v297 + 1) = v295;
            v298[1] = (uint64_t)v297;
            *CFNumberRef v295 = (uint64_t *)v297;
            v295[2] = (uint64_t *)((char *)v295[2] + 1);
            ++v261;
            CFNumberRef v299 = v294[6];
            uint64_t v300 = *v299;
            *(void *)(v300 + 8) = v299[1];
            *(void *)v299[1] = v300;
            v294[7] = (uint64_t *)((char *)v294[7] - 1);
            operator delete(v299);
          }
          while (v294[7] && v261 < v292);
        }
      }
      int v293 = (v293 + 1) % *(_DWORD *)(v366 + 3724);
      int v379 = v293;
    }
    while (v293 != v373);
    sub_1BBA83C3C(v384[0]);
  }
  if (!sub_1BBA83ABC(&v380, v106, &v382)[7]
    || (BOOL v301 = sub_1BBA83ABC(&v380, v106, &v382), v302 = v301 + 5, v303 = v301[6], v303 == (uint64_t *)(v301 + 5)))
  {
    CFNumberRef v304 = 0;
    v307 = 0;
    unint64_t v306 = 0;
  }
  else
  {
    CFNumberRef v304 = 0;
    CFNumberRef v305 = 0;
    unint64_t v306 = 0;
    do
    {
      if ((unint64_t)v305 >= v306)
      {
        uint64_t v308 = ((char *)v305 - v304) >> 2;
        unint64_t v309 = v308 + 1;
        if ((unint64_t)(v308 + 1) >> 62) {
          sub_1BB9C185C();
        }
        if ((uint64_t)(v306 - (void)v304) >> 1 > v309) {
          unint64_t v309 = (uint64_t)(v306 - (void)v304) >> 1;
        }
        if (v306 - (unint64_t)v304 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v310 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v310 = v309;
        }
        if (v310) {
          unint64_t v310 = (unint64_t)sub_1BB9C1874(v310);
        }
        else {
          uint64_t v311 = 0;
        }
        BOOL v312 = (_DWORD *)(v310 + 4 * v308);
        _DWORD *v312 = *((_DWORD *)v303 + 4);
        v307 = v312 + 1;
        while (v305 != (_DWORD *)v304)
        {
          int v313 = *--v305;
          *--BOOL v312 = v313;
        }
        unint64_t v306 = v310 + 4 * v311;
        if (v304) {
          operator delete(v304);
        }
        CFNumberRef v304 = v312;
      }
      else
      {
        *CFNumberRef v305 = *((_DWORD *)v303 + 4);
        v307 = v305 + 1;
      }
      uint64_t v303 = (uint64_t *)v303[1];
      CFNumberRef v305 = v307;
    }
    while (v303 != (uint64_t *)v302);
  }
  unint64_t v314 = 126 - 2 * __clz(((char *)v307 - v304) >> 2);
  if (v307 == (_DWORD *)v304) {
    uint64_t v315 = 0;
  }
  else {
    uint64_t v315 = v314;
  }
  sub_1BBA85F14(v307, (char *)v307, (uint64_t)v304, v304, v315, 1);
  *(_DWORD *)CMTime buf = 0;
  uint64_t v3 = v366;
  if (*(int *)(v366 + 3724) >= 1)
  {
    int v316 = 0;
    do
    {
      if (v316 != v382 && sub_1BBA83ABC(&v380, v316, buf)[7])
      {
        int v317 = sub_1BBA83ABC(&v380, v316, buf);
        int v318 = v317 + 5;
        int v319 = v317[6];
        if (v319 != (uint64_t *)(v317 + 5))
        {
          do
          {
            if ((unint64_t)v307 >= v306)
            {
              uint64_t v320 = ((char *)v307 - v304) >> 2;
              unint64_t v321 = v320 + 1;
              if ((unint64_t)(v320 + 1) >> 62) {
                sub_1BB9C185C();
              }
              if ((uint64_t)(v306 - (void)v304) >> 1 > v321) {
                unint64_t v321 = (uint64_t)(v306 - (void)v304) >> 1;
              }
              if (v306 - (unint64_t)v304 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v322 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v322 = v321;
              }
              if (v322) {
                unint64_t v322 = (unint64_t)sub_1BB9C1874(v322);
              }
              else {
                uint64_t v323 = 0;
              }
              uint64_t v324 = (_DWORD *)(v322 + 4 * v320);
              *uint64_t v324 = *((_DWORD *)v319 + 4);
              unsigned int v325 = v324 + 1;
              while (v307 != (_DWORD *)v304)
              {
                int v326 = *--v307;
                *--uint64_t v324 = v326;
              }
              unint64_t v306 = v322 + 4 * v323;
              if (v304) {
                operator delete(v304);
              }
              CFNumberRef v304 = v324;
              v307 = v325;
            }
            else
            {
              *v307++ = *((_DWORD *)v319 + 4);
            }
            int v319 = (uint64_t *)v319[1];
          }
          while (v319 != (uint64_t *)v318);
          int v316 = *(_DWORD *)buf;
        }
        uint64_t v3 = v366;
      }
      *(_DWORD *)CMTime buf = ++v316;
    }
    while (v316 < *(_DWORD *)(v3 + 3724));
  }
  if (v307 != (_DWORD *)v304)
  {
    if (v377 >= 1)
    {
      uint64_t v327 = 0;
      unint64_t v328 = 0;
      if (*(char *)(v3 + 3333) <= 1) {
        int v329 = 1;
      }
      else {
        int v329 = *(char *)(v3 + 3333);
      }
      unint64_t v330 = &buf[2];
      do
      {
        if (v328 <= 0xF)
        {
          *((_WORD *)v330 - 1) = *(_WORD *)&v304[4 * v328] - v368;
          *unint64_t v330 = (uint64_t)v328 < (uint64_t)v10;
        }
        if (v329 - 1 == v328) {
          goto LABEL_415;
        }
        ++v328;
        v330 += 4;
        v327 += 4;
      }
      while (&v304[v327] != (unsigned char *)v307);
      int v329 = v328;
LABEL_415:
      sub_1BBAE5608(a1[43], v369, (__int32 *)buf, v329, v368);
    }
    if (v304) {
      operator delete(v304);
    }
    sub_1BBA83C3C(v381[0]);
    uint64_t v12 = v369;
    goto LABEL_419;
  }
  if (v304) {
    operator delete(v304);
  }
  sub_1BBA83C3C(v381[0]);
  return 1;
}

void sub_1BBA85C74(_Unwind_Exception *a1)
{
  sub_1BBA83C3C(*(void **)(v1 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_1BBA85D48(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      uint64_t v4 = *(uint64_t **)a2;
      if (*(_DWORD *)(*(void *)a2 + 16) > *(_DWORD *)(result + 16))
      {
        uint64_t v5 = *v4;
        *(void *)(v5 + 8) = v4[1];
        *(void *)v4[1] = v5;
        uint64_t v6 = *(void *)result;
        *(void *)(v6 + 8) = v4;
        *uint64_t v4 = v6;
        *(void *)uint64_t result = v4;
        v4[1] = result;
        return (uint64_t)v4;
      }
    }
    else
    {
      unint64_t v8 = a3 >> 1;
      unint64_t v9 = (a3 >> 1) + 1;
      uint64_t v10 = result;
      do
      {
        uint64_t v10 = *(void *)(v10 + 8);
        --v9;
      }
      while (v9 > 1);
      uint64_t v11 = sub_1BBA85D48(result, v10, a3 >> 1);
      uint64_t result = sub_1BBA85D48(v10, a2, a3 - v8);
      int v12 = *(_DWORD *)(v11 + 16);
      if (*(_DWORD *)(result + 16) <= v12)
      {
        uint64_t v14 = *(uint64_t **)(v11 + 8);
        uint64_t i = result;
        uint64_t result = v11;
      }
      else
      {
        for (uint64_t i = *(void *)(result + 8); i != a2; uint64_t i = *(void *)(i + 8))
        {
          if (*(_DWORD *)(i + 16) <= v12) {
            goto LABEL_14;
          }
        }
        uint64_t i = a2;
LABEL_14:
        uint64_t v15 = *(void *)i;
        uint64_t v16 = *(void *)result;
        *(void *)(v16 + 8) = *(void *)(*(void *)i + 8);
        **(void **)(v15 + 8) = v16;
        uint64_t v17 = *(void *)v11;
        uint64_t v14 = *(uint64_t **)(v11 + 8);
        *(void *)(v17 + 8) = result;
        *(void *)uint64_t result = v17;
        *(void *)uint64_t v11 = v15;
        *(void *)(v15 + 8) = v11;
      }
      if (v14 != (uint64_t *)i && i != a2)
      {
        uint64_t v18 = i;
        do
        {
          int v19 = *((_DWORD *)v14 + 4);
          if (*(_DWORD *)(i + 16) <= v19)
          {
            uint64_t v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (uint64_t j = *(void *)(i + 8); j != a2; uint64_t j = *(void *)(j + 8))
            {
              if (*(_DWORD *)(j + 16) <= v19) {
                goto LABEL_25;
              }
            }
            uint64_t j = a2;
LABEL_25:
            uint64_t v21 = *(void *)j;
            uint64_t v22 = *(void *)i;
            *(void *)(v22 + 8) = *(void *)(*(void *)j + 8);
            **(void **)(v21 + 8) = v22;
            if (v18 == i) {
              uint64_t v18 = j;
            }
            uint64_t v24 = *v14;
            uint64_t v23 = (uint64_t *)v14[1];
            *(void *)(v24 + 8) = i;
            *(void *)uint64_t i = v24;
            *uint64_t v14 = v21;
            *(void *)(v21 + 8) = v14;
            uint64_t v14 = v23;
            uint64_t i = j;
          }
        }
        while (v14 != (uint64_t *)v18 && i != a2);
      }
    }
  }
  return result;
}

void sub_1BBA85F14(_DWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5, char a6)
{
  while (2)
  {
    while (2)
    {
      while (2)
      {
        int v89 = a1;
        uint64_t v12 = (uint64_t)a1;
        for (uint64_t i = a2; ; uint64_t i = v28)
        {
          uint64_t v14 = i - a4;
          unint64_t v15 = (i - a4) >> 2;
          if (v7 || !v6)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                int v45 = *((_DWORD *)i - 1);
                if (*(_DWORD *)a4 < v45)
                {
                  *((_DWORD *)i - 1) = *(_DWORD *)a4;
                  *(_DWORD *)a4 = v45;
                }
                break;
              case 3uLL:
                sub_1BBA86628(v12, (uint64_t)i, (uint64_t)(i - 4), (uint64_t)(i - 4), a3, (uint64_t)(a4 + 4));
                break;
              case 4uLL:
                sub_1BBA86698(v12, (uint64_t)i, (uint64_t)(i - 4), (uint64_t)(i - 4), (uint64_t)(i - 8), (uint64_t)(i - 8), a3, (uint64_t)(a4 + 4));
                break;
              case 5uLL:
                sub_1BBA86718(v12, (uint64_t)i, (uint64_t)(i - 4), (uint64_t)(i - 4), (uint64_t)(i - 8), (uint64_t)(i - 8), (uint64_t)(i - 12), (uint64_t)(i - 12), a3, (uint64_t)(a4 + 4));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 95)
          {
            long long v46 = i - 4;
            BOOL v48 = i == a4 || v46 == a4;
            if (a6)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                long long v50 = i - 4;
                do
                {
                  int v52 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  int v51 = v52;
                  int v53 = *(_DWORD *)v46;
                  if (v52 < v53)
                  {
                    uint64_t v54 = v49;
                    while (1)
                    {
                      uint64_t v55 = v54;
                      int v56 = &i[v54];
                      *((_DWORD *)v56 - 2) = v53;
                      if (!v55) {
                        break;
                      }
                      int v53 = *(_DWORD *)&i[v55];
                      uint64_t v54 = v55 + 4;
                      if (v51 >= v53)
                      {
                        uint64_t v57 = &i[v55 - 4];
                        goto LABEL_76;
                      }
                    }
                    uint64_t v57 = v56 - 4;
LABEL_76:
                    *(_DWORD *)uint64_t v57 = v51;
                  }
                  v49 -= 4;
                  long long v46 = v50;
                }
                while (v50 != a4);
              }
            }
            else if (!v48)
            {
              uint64_t v83 = i - 8;
              int v84 = i - 4;
              do
              {
                int v86 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                int v85 = v86;
                int v87 = *(_DWORD *)v46;
                if (v86 < v87)
                {
                  unsigned int v88 = v83;
                  do
                  {
                    *(_DWORD *)unsigned int v88 = v87;
                    int v87 = *((_DWORD *)v88 + 2);
                    v88 += 4;
                  }
                  while (v85 < v87);
                  *(_DWORD *)unsigned int v88 = v85;
                }
                v83 -= 4;
                long long v46 = v84;
              }
              while (v84 != a4);
            }
            return;
          }
          if (!a5)
          {
            if (i != a4)
            {
              int64_t v58 = (v15 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= (4 * v59) >> 2)
                {
                  uint64_t v61 = (4 * v59) >> 1;
                  uint64_t v62 = v61 | 1;
                  int v63 = &i[-4 * (v61 | 1)];
                  uint64_t v64 = v61 + 2;
                  if (v64 < (uint64_t)v15 && *((_DWORD *)v63 - 1) < *((_DWORD *)v63 - 2))
                  {
                    v63 -= 4;
                    uint64_t v62 = v64;
                  }
                  uint64_t v65 = &i[-4 * v60];
                  int v66 = *((_DWORD *)v63 - 1);
                  int v67 = *((_DWORD *)v65 - 1);
                  if (v66 >= v67)
                  {
                    do
                    {
                      *((_DWORD *)v65 - 1) = v66;
                      uint64_t v65 = v63;
                      if (v58 < v62) {
                        break;
                      }
                      uint64_t v68 = (2 * v62) | 1;
                      int v63 = &i[-4 * v68];
                      uint64_t v69 = 2 * v62 + 2;
                      if (v69 < (uint64_t)v15 && *((_DWORD *)v63 - 1) < *((_DWORD *)v63 - 2))
                      {
                        v63 -= 4;
                        uint64_t v68 = v69;
                      }
                      int v66 = *((_DWORD *)v63 - 1);
                      uint64_t v62 = v68;
                    }
                    while (v66 >= v67);
                    *((_DWORD *)v65 - 1) = v67;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v70 = (unint64_t)v14 >> 2;
              do
              {
                uint64_t v71 = 0;
                int v72 = *((_DWORD *)i - 1);
                uint64_t v73 = i;
                do
                {
                  uint64_t v74 = &v73[4 * ~v71];
                  uint64_t v75 = (2 * v71) | 1;
                  uint64_t v76 = 2 * v71 + 2;
                  if (v76 < v70 && *((_DWORD *)v74 - 1) < *((_DWORD *)v74 - 2))
                  {
                    v74 -= 4;
                    uint64_t v75 = v76;
                  }
                  *((_DWORD *)v73 - 1) = *((_DWORD *)v74 - 1);
                  uint64_t v73 = v74;
                  uint64_t v71 = v75;
                }
                while (v75 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
                uint64_t v77 = v74 - 4;
                if (v74 == a4 + 4)
                {
                  *(_DWORD *)uint64_t v77 = v72;
                }
                else
                {
                  *(_DWORD *)uint64_t v77 = *(_DWORD *)a4;
                  *(_DWORD *)a4 = v72;
                  if (i - v77 >= 5)
                  {
                    unint64_t v78 = (((unint64_t)(i - v77) >> 2) - 2) >> 1;
                    int v79 = &i[-4 * v78];
                    int v80 = *((_DWORD *)v79 - 1);
                    int v81 = *(_DWORD *)v77;
                    if (v80 < v81)
                    {
                      do
                      {
                        *((_DWORD *)v74 - 1) = v80;
                        uint64_t v74 = v79;
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                        int v79 = &i[-4 * v78];
                        int v80 = *((_DWORD *)v79 - 1);
                      }
                      while (v80 < v81);
                      *((_DWORD *)v74 - 1) = v81;
                    }
                  }
                }
                a4 += 4;
              }
              while (v70-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = (uint64_t)&i[-4 * (v15 >> 1)];
          if ((unint64_t)v14 >= 0x201)
          {
            sub_1BBA86628(v12, (uint64_t)i, (uint64_t)&i[-4 * (v15 >> 1)], (uint64_t)&i[-4 * (v15 >> 1)], (uint64_t)(a4 + 4), (uint64_t)(a4 + 4));
            uint64_t v18 = v12;
            uint64_t v19 = (uint64_t)&i[4 * (1 - v16)];
            sub_1BBA86628((uint64_t)(i - 4), (uint64_t)(i - 4), v19, v19, (uint64_t)(a4 + 8), (uint64_t)(a4 + 8));
            uint64_t v20 = (uint64_t)&i[4 * ~v16];
            sub_1BBA86628((uint64_t)(i - 8), (uint64_t)(i - 8), v20, v20, (uint64_t)(a4 + 12), (uint64_t)(a4 + 12));
            uint64_t v21 = v19;
            uint64_t v22 = v19;
            uint64_t v12 = v18;
            sub_1BBA86628(v21, v22, v17, v17, v20, v20);
            int v23 = *((_DWORD *)i - 1);
            *((_DWORD *)i - 1) = *(_DWORD *)(v17 - 4);
            *(_DWORD *)(v17 - 4) = v23;
          }
          else
          {
            sub_1BBA86628((uint64_t)&i[-4 * (v15 >> 1)], (uint64_t)&i[-4 * (v15 >> 1)], v12, (uint64_t)i, (uint64_t)(a4 + 4), (uint64_t)(a4 + 4));
          }
          --a5;
          uint64_t v24 = i - 4;
          if (a6) {
            break;
          }
          int v25 = *((_DWORD *)i - 1);
          if (*(_DWORD *)i < v25) {
            goto LABEL_29;
          }
          int v26 = i - 4;
          if (v25 >= *(_DWORD *)a4)
          {
            do
            {
              uint64_t v28 = v26;
              if (v26 <= a4) {
                break;
              }
              v26 -= 4;
            }
            while (v25 >= *((_DWORD *)v28 - 1));
          }
          else
          {
            int v27 = i;
            do
            {
              uint64_t v28 = v27 - 4;
              int v29 = *((_DWORD *)v27 - 2);
              v27 -= 4;
            }
            while (v25 >= v29);
          }
          int v30 = a4;
          if (v28 > a4)
          {
            int v30 = a4;
            do
            {
              int v31 = *(_DWORD *)v30;
              v30 += 4;
            }
            while (v25 < v31);
          }
          while (v30 < v28)
          {
            int v32 = *((_DWORD *)v28 - 1);
            *((_DWORD *)v28 - 1) = *((_DWORD *)v30 - 1);
            *((_DWORD *)v30 - 1) = v32;
            do
            {
              int v33 = *((_DWORD *)v28 - 2);
              v28 -= 4;
            }
            while (v25 >= v33);
            do
            {
              int v34 = *(_DWORD *)v30;
              v30 += 4;
            }
            while (v25 < v34);
          }
          BOOL v6 = v28 + 4 >= i;
          BOOL v7 = v28 + 4 == i;
          if (v28 + 4 != i) {
            *(_DWORD *)uint64_t v24 = *(_DWORD *)v28;
          }
          a6 = 0;
          *(_DWORD *)uint64_t v28 = v25;
        }
        int v25 = *(_DWORD *)v24;
LABEL_29:
        uint64_t v35 = i;
        do
        {
          char v36 = v35;
          v35 -= 4;
        }
        while (*((_DWORD *)v36 - 2) < v25);
        uint64_t v37 = a4;
        if (v36 == i)
        {
          uint64_t v37 = a4;
          do
          {
            if (v37 >= v35) {
              break;
            }
            int v39 = *(_DWORD *)v37;
            v37 += 4;
          }
          while (v39 >= v25);
        }
        else
        {
          do
          {
            int v38 = *(_DWORD *)v37;
            v37 += 4;
          }
          while (v38 >= v25);
        }
        a2 = v35;
        if (v37 < v35)
        {
          int v40 = v37;
          do
          {
            int v41 = *((_DWORD *)a2 - 1);
            *((_DWORD *)a2 - 1) = *((_DWORD *)v40 - 1);
            *((_DWORD *)v40 - 1) = v41;
            do
            {
              int v42 = *((_DWORD *)a2 - 2);
              a2 -= 4;
            }
            while (v42 < v25);
            do
            {
              int v43 = *(_DWORD *)v40;
              v40 += 4;
            }
            while (v43 >= v25);
          }
          while (v40 < a2);
        }
        if (a2 + 4 != i) {
          *(_DWORD *)uint64_t v24 = *(_DWORD *)a2;
        }
        *(_DWORD *)a2 = v25;
        if (v37 < v35)
        {
LABEL_50:
          sub_1BBA85F14(v12, i, a2 + 4, a2 + 4, a5, a6 & 1);
          a6 = 0;
          a1 = a2 + 4;
          continue;
        }
        break;
      }
      char v44 = sub_1BBA867BC(v12, (uint64_t)i, (uint64_t)(a2 + 4), (_DWORD *)a2 + 1);
      if (!sub_1BBA867BC((uint64_t)a2, (uint64_t)a2, a3, a4))
      {
        a1 = a2 + 4;
        if (v44) {
          continue;
        }
        goto LABEL_50;
      }
      break;
    }
    a3 = (uint64_t)(a2 + 4);
    a4 = a2 + 4;
    a2 = i;
    a1 = v89;
    if ((v44 & 1) == 0) {
      continue;
    }
    break;
  }
}

void sub_1BBA86628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = *(_DWORD *)(a4 - 4);
  int v7 = *(_DWORD *)(a2 - 4);
  int v8 = *(_DWORD *)(a6 - 4);
  if (v6 >= v7)
  {
    if (v8 < v6)
    {
      *(_DWORD *)(a4 - 4) = v8;
      *(_DWORD *)(a6 - 4) = v6;
      int v9 = *(_DWORD *)(a4 - 4);
      int v10 = *(_DWORD *)(a2 - 4);
      if (v9 < v10)
      {
        *(_DWORD *)(a2 - 4) = v9;
        *(_DWORD *)(a4 - 4) = v10;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *(_DWORD *)(a2 - 4) = v6;
      *(_DWORD *)(a4 - 4) = v7;
      int v11 = *(_DWORD *)(a6 - 4);
      if (v11 >= v7) {
        return;
      }
      *(_DWORD *)(a4 - 4) = v11;
    }
    else
    {
      *(_DWORD *)(a2 - 4) = v8;
    }
    *(_DWORD *)(a6 - 4) = v7;
  }
}

void sub_1BBA86698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1BBA86628(a1, a2, a3, a4, a5, a6);
  int v12 = *(_DWORD *)(a8 - 4);
  int v13 = *(_DWORD *)(a6 - 4);
  if (v12 < v13)
  {
    *(_DWORD *)(a6 - 4) = v12;
    *(_DWORD *)(a8 - 4) = v13;
    int v14 = *(_DWORD *)(a6 - 4);
    int v15 = *(_DWORD *)(a4 - 4);
    if (v14 < v15)
    {
      *(_DWORD *)(a4 - 4) = v14;
      *(_DWORD *)(a6 - 4) = v15;
      int v16 = *(_DWORD *)(a4 - 4);
      int v17 = *(_DWORD *)(a2 - 4);
      if (v16 < v17)
      {
        *(_DWORD *)(a2 - 4) = v16;
        *(_DWORD *)(a4 - 4) = v17;
      }
    }
  }
}

void sub_1BBA86718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1BBA86698(a1, a2, a3, a4, a5, a6, a7, a8);
  int v14 = *(_DWORD *)(a10 - 4);
  int v15 = *(_DWORD *)(a8 - 4);
  if (v14 < v15)
  {
    *(_DWORD *)(a8 - 4) = v14;
    *(_DWORD *)(a10 - 4) = v15;
    int v16 = *(_DWORD *)(a8 - 4);
    int v17 = *(_DWORD *)(a6 - 4);
    if (v16 < v17)
    {
      *(_DWORD *)(a6 - 4) = v16;
      *(_DWORD *)(a8 - 4) = v17;
      int v18 = *(_DWORD *)(a6 - 4);
      int v19 = *(_DWORD *)(a4 - 4);
      if (v18 < v19)
      {
        *(_DWORD *)(a4 - 4) = v18;
        *(_DWORD *)(a6 - 4) = v19;
        int v20 = *(_DWORD *)(a4 - 4);
        int v21 = *(_DWORD *)(a2 - 4);
        if (v20 < v21)
        {
          *(_DWORD *)(a2 - 4) = v20;
          *(_DWORD *)(a4 - 4) = v21;
        }
      }
    }
  }
}

uint64_t sub_1BBA867BC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char v6 = 1;
  switch((a2 - (uint64_t)a4) >> 2)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      int v7 = *(_DWORD *)(a2 - 4);
      if (*a4 < v7)
      {
        *(_DWORD *)(a2 - 4) = *a4;
        *a4 = v7;
      }
      goto LABEL_18;
    case 3:
      sub_1BBA86628(a1, a2, a2 - 4, a2 - 4, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 4:
      sub_1BBA86698(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 5:
      sub_1BBA86718(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a2 - 12, a2 - 12, a3, (uint64_t)(a4 + 1));
LABEL_18:
      char v6 = 1;
      return v6 & 1;
    default:
      uint64_t v8 = a2 - 8;
      sub_1BBA86628(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8);
      int v10 = (_DWORD *)(a2 - 12);
      if ((_DWORD *)(a2 - 12) == a4) {
        goto LABEL_14;
      }
      int v11 = 0;
      uint64_t v9 = a2 - 12;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)(v9 - 4);
    v9 -= 4;
    int v12 = v13;
    if (v13 < *(_DWORD *)(v8 - 4))
    {
      int v14 = v10;
      while (1)
      {
        *(v14 - 1) = *v14;
        if (v14 + 1 == (_DWORD *)a2) {
          break;
        }
        int v15 = v14 + 1;
        int v16 = v14[1];
        ++v14;
        if (v12 >= v16) {
          goto LABEL_12;
        }
      }
      int v15 = (_DWORD *)a2;
LABEL_12:
      *(v15 - 1) = v12;
      if (++v11 == 8) {
        break;
      }
    }
    uint64_t v8 = (uint64_t)v10;
    int v10 = (_DWORD *)v9;
    if ((_DWORD *)v9 == a4)
    {
LABEL_14:
      char v17 = 1;
      goto LABEL_20;
    }
  }
  char v17 = 0;
  LOBYTE(v9) = v9 == (void)a4;
LABEL_20:
  char v6 = v17 | v9;
  return v6 & 1;
}

unint64_t sub_1BBA86978(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (*(_DWORD *)(result + 16) > (int)a2)
  {
    LODWORD(v6) = a4;
    uint64_t v8 = a2;
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result + 296);
    int v11 = *(unsigned __int8 *)(*(void *)(v10 + 40) + 2009);
    int v12 = v11 - a4;
    while (*(_DWORD *)(v9 + 20) > (int)a3)
    {
      int v13 = 1 << v12;
      if (v12 <= *(_DWORD *)(v9 + 1624))
      {
        int v15 = 1 << (v11 - *(_DWORD *)(v9 + 1628));
        if (((v15 - 1) & (a3 | v8)) != 0) {
          return result;
        }
        ++*(_DWORD *)(v9 + 1636);
        int v16 = (*(uint64_t (**)(void))(**(void **)(v10 + 24) + 32))(*(void *)(v10 + 24));
        uint64_t v17 = *(void *)(v9 + 296);
        if (v16) {
          uint64_t result = sub_1BBAB1928(*(_DWORD **)(v17 + 24), v8, a3, v13);
        }
        else {
          uint64_t result = 2;
        }
        char v18 = *(unsigned char *)(*(void *)(v17 + 592) + 136);
        if (v18)
        {
          uint64_t v19 = *(void *)(v9 + 304) + 8 * *(int *)(*(void *)(v9 + 304) + 16);
          if ((int)v8 >= *(__int16 *)(v19 + 24)) {
            return result;
          }
          char v18 = (int)a3 >= *(__int16 *)(v19 + 26);
        }
        if ((v18 & 1) == 0 && result == 2)
        {
          uint64_t v64 = (unsigned char **)(v9 + 760);
          sub_1BBA5226C(v9 + 760, *(void *)(v9 + 312), a5, 0, 0, 1, 0, 0);
          uint64_t v20 = *(void *)(v9 + 296);
          int v21 = *(void **)(v20 + 592);
          uint64_t v22 = v21[14];
          uint64_t v23 = *(void *)(*(void *)(v20 + 608) + 112);
          uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void))(*v21 + 16))(v21, v8, a3, 0);
          uint64_t v65 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(*(void *)(v9 + 296) + 608)
                                                                            + 16))(*(void *)(*(void *)(v9 + 296) + 608), v8, a3, 0);
          if (((a3 | v8) & 0x80000000) != 0
            || (uint64_t v25 = *(void *)(*(void *)(v9 + 312) + 1360), *(_DWORD *)(v25 + 276) <= (int)v8)
            || *(_DWORD *)(v25 + 280) <= (int)a3)
          {
            uint64_t v26 = 0;
            int v27 = 0;
          }
          else
          {
            uint64_t v26 = *(void *)(v25 + 512) + 2 * (*(void *)(v25 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)v8 >> 3));
            int v27 = (__int16 *)(*(void *)(v25 + 576)
                            + 16 * (*(void *)(v25 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)v8 >> 2)));
          }
          unsigned int v28 = v6 & 3 | (*(unsigned __int8 *)(v26 + 1) << 8);
          *(_WORD *)uint64_t v26 = v28;
          uint64_t v29 = *(void *)(v9 + 312);
          uint64_t v30 = *(void *)(*(void *)(v29 + 1360) + 488);
          int16x8_t v31 = vdupq_n_s16(v28);
          int v32 = *(unsigned __int8 *)(*(void *)(v29 + 1368) + 2009) - v13;
          switch(v32)
          {
            case 6:
              *(int16x8_t *)uint64_t v26 = v31;
              *(int16x8_t *)(v26 + 2 * v30) = v31;
              *(int16x8_t *)(v26 + 4 * v30) = v31;
              *(int16x8_t *)(v26 + 6 * v30) = v31;
              *(int16x8_t *)(v26 + 8 * v30) = v31;
              *(int16x8_t *)(v26 + 10 * v30) = v31;
              *(int16x8_t *)(v26 + 12 * v30) = v31;
              *(int16x8_t *)(v26 + 14 * v30) = v31;
              break;
            case 5:
              *(void *)uint64_t v26 = v31.i64[0];
              *(void *)(v26 + 2 * v30) = v31.i64[0];
              *(void *)(v26 + 4 * v30) = v31.i64[0];
              *(void *)(v26 + 6 * v30) = v31.i64[0];
              break;
            case 4:
              *(_DWORD *)uint64_t v26 = v31.i32[0];
              *(_DWORD *)(v26 + 2 * v30) = v31.i32[0];
              break;
          }
          uint64_t v33 = *(void *)(*(void *)(v9 + 976) + 3544);
          *(unsigned char *)(v9 + 778) = 0;
          *(_DWORD *)(v9 + 780) = *(_DWORD *)(v33 + 276);
          *(_DWORD *)(v9 + 788) = *(_DWORD *)(v33 + 280);
          *(void *)(v9 + 912) = v24;
          *(void *)(v9 + 920) = v22;
          if (*(unsigned char *)(*(void *)(*(void *)(v9 + 296) + 584) + 3438))
          {
            sub_1BBAD033C(*(unsigned char **)(v9 + 312), v8, a3, v13, v13, (uint64_t)v66);
            uint64_t result = sub_1BBA54970((uint64_t)v64, v8, a3, v13, v13, (uint64_t)v66, v23, v65);
          }
          else
          {
            sub_1BBAD025C(*(void *)(v9 + 312), v8, a3, 0, 0, v13, v13, v66);
            uint64_t result = sub_1BBA54DA0(v64, v8, a3, v13, v13, (uint64_t)v66, v23, v65);
          }
          if (v15 >= 4)
          {
            uint64_t v34 = 0;
            LODWORD(v35) = v15 >> 2;
            if (v15 >> 2 <= 1) {
              uint64_t v35 = 1;
            }
            else {
              uint64_t v35 = v35;
            }
            uint64_t v36 = 16 * *(void *)(*(void *)(*(void *)(v9 + 312) + 1360) + 552);
            uint64_t v37 = v27;
            do
            {
              int v38 = v37;
              uint64_t v39 = v35;
              do
              {
                uint64_t v40 = *(void *)v27;
                *(void *)((char *)v38 + 6) = *(void *)(v27 + 3);
                *int v38 = v40;
                v38 += 2;
                --v39;
              }
              while (v39);
              ++v34;
              uint64_t v37 = (void *)((char *)v37 + v36);
            }
            while (v34 != v15 >> 2);
          }
          *(_DWORD *)(v9 + 1632) += result;
          int v41 = *(_DWORD *)(v9 + 1624);
          char v42 = v41 - 3;
          if (v41 == 34)
          {
            unsigned int v43 = 0;
          }
          else
          {
            uint64_t v44 = 0;
            int v45 = 0;
            uint64_t v46 = (*(int *)(v9 + 16) >> 3);
            uint64_t v47 = (int)v46 * ((int)a3 >> 3) + ((int)v8 >> 3);
            uint64_t v48 = *(void *)(v9 + 1360) + 4 * v47;
            uint64_t v49 = (1 << v42);
            uint64_t v50 = 4 * v46;
            do
            {
              int v51 = (int *)v48;
              uint64_t v52 = v49;
              do
              {
                int v53 = *v51++;
                v45 += v53;
                --v52;
              }
              while (v52);
              ++v44;
              v48 += v50;
            }
            while (v44 != v49);
            uint64_t v54 = 0;
            int v55 = 0;
            uint64_t v56 = *(void *)(v9 + 1328) + 4 * v47;
            do
            {
              uint64_t v57 = (int *)v56;
              uint64_t v58 = v49;
              do
              {
                int v59 = *v57++;
                v55 += v59;
                --v58;
              }
              while (v58);
              ++v54;
              v56 += v50;
            }
            while (v54 != v49);
            unsigned int v43 = v55 + (v45 << 7);
          }
          if (result <= 3 * v43) {
            unint64_t v60 = result;
          }
          else {
            unint64_t v60 = v43;
          }
          if (v60 > v43) {
            ++*(_DWORD *)(v9 + 1644);
          }
          *(_DWORD *)(v9 + 1640) += v60;
          int v61 = *v27;
          if (v61 < 0) {
            int v61 = -v61;
          }
          int v62 = v27[1];
          if (v62 < 0) {
            int v62 = -v62;
          }
          *(_DWORD *)(v9 + 1648) += v61 + v62;
          if (*(unsigned char *)(v9 + 13))
          {
            uint64_t result = sub_1BBA7EED0(v9, v8, a3, v13);
            uint64_t v63 = 1744;
            if (result) {
              uint64_t v63 = 1736;
            }
            *(_DWORD *)(v9 + v63) += v60;
          }
        }
        return result;
      }
      uint64_t v6 = (v6 + 1);
      sub_1BBA86978(v9, v8, a3, v6, a5);
      unsigned int v14 = v8 + (v13 >> 1);
      sub_1BBA86978(v9, v14, a3, v6, a5);
      a3 = (a3 + (v13 >> 1));
      uint64_t result = sub_1BBA86978(v9, v8, a3, v6, a5);
      uint64_t v10 = *(void *)(v9 + 296);
      int v11 = *(unsigned __int8 *)(*(void *)(v10 + 40) + 2009);
      int v12 = v11 - v6;
      uint64_t v8 = v14;
      if (*(_DWORD *)(v9 + 16) <= (signed int)v14) {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1BBA86F88(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, int a9, int a10, int a11, int a12, signed int a13)
{
  int v15 = a6;
  uint64_t v70 = result;
  uint64_t v72 = (a5 - 1);
  if (a5 >= 1)
  {
    int v16 = (4 << a5) - 1;
    int v17 = -(4 << a5);
    int v18 = ((v16 + a11) & v17) >> (a5 + 2);
    int v19 = ((v16 + a12) & v17) >> (a5 + 2);
    uint64_t result = sub_1BBA86F88(result, a2, a3, a4, v72, a6);
    if (a8 < a10)
    {
      uint64_t v20 = *(int *)(a4 + 4 * v72);
      uint64_t v21 = *(int *)(a4 + 4 * a5);
      uint64_t v22 = *(void *)(a3 + 8 * a5) + 2 * (int)v21 * a8;
      uint64_t v23 = a8;
      int v24 = 2 * v20 * a8;
      int v25 = 2 * v20;
      uint64_t result = 2 * v20;
      do
      {
        if (a7 < a9)
        {
          if (2 * (int)v23 + 2 <= v19) {
            int v26 = 2;
          }
          else {
            int v26 = v19 - 2 * v23;
          }
          uint64_t v27 = *(void *)(a3 + 8 * v72) + 2 * v24;
          int v28 = 2 * a7 + 2;
          int v29 = -2 * a7;
          int v30 = 2 * a7;
          uint64_t v31 = a7;
          do
          {
            if (v18 >= v28) {
              int v32 = v28;
            }
            else {
              int v32 = v18;
            }
            uint64_t v33 = v31 + 1;
            if (v26 < 1)
            {
              __int16 v35 = 0;
            }
            else
            {
              int v34 = 0;
              __int16 v35 = 0;
              uint64_t v36 = v27 + 2 * v30;
              uint64_t v37 = v32 + v29;
              BOOL v39 = v18 >= 2 * (int)v33 || v18 > 2 * (int)v31;
              do
              {
                if (v39)
                {
                  uint64_t v40 = 0;
                  do
                    v35 += *(_WORD *)(v36 + 2 * v40++);
                  while (v37 != v40);
                }
                ++v34;
                v36 += result;
              }
              while (v34 < v26);
            }
            v30 += 2;
            *(_WORD *)(v22 + 2 * v31) = v35;
            v29 -= 2;
            v28 += 2;
            ++v31;
          }
          while (v33 != a9);
        }
        v22 += 2 * v21;
        ++v23;
        v24 += v25;
      }
      while (v23 != a10);
    }
  }
  uint64_t v41 = *(void *)(v70 + 8 * a5);
  if (v41) {
    BOOL v42 = a8 < a10;
  }
  else {
    BOOL v42 = 0;
  }
  if (v42)
  {
    char v43 = a5 + 3;
    int v44 = (a11 + 7) >> 3;
    uint64_t v45 = *(int *)(a2 + 4 * a5);
    uint64_t v46 = *(int *)(a4 + 4 * a5);
    int v47 = (a12 + 7) >> 3;
    uint64_t v48 = (unsigned char *)(v41 + 2 * a7 + (int)v45 * (uint64_t)a8);
    uint64_t v49 = *(void *)(a3 + 8 * a5) + 4 * a7 + 2 * (int)v46 * a8;
    uint64_t v50 = 2 * v46;
    uint64_t result = a9 - (uint64_t)a7;
    do
    {
      int v51 = a8 + 1;
      if (a7 < a9)
      {
        if (v47 >= v51 << v43 >> 3) {
          int v52 = 1 << (a5 + 3) >> 3;
        }
        else {
          int v52 = v47 - (a8 << v43 >> 3);
        }
        uint64_t v53 = a9 - (uint64_t)a7;
        int v54 = a7;
        int v55 = (unsigned __int16 *)v49;
        uint64_t v56 = v48;
        do
        {
          int v57 = v54 + 1;
          int v58 = v44 - (v54 << v43 >> 3);
          if (v44 >= v57 << v43 >> 3) {
            int v59 = 1 << (a5 + 3) >> 3;
          }
          else {
            int v59 = v58;
          }
          int v60 = *v55++;
          unsigned int v61 = (v60 + ((v59 * v52) >> 1)) / (v59 * v52);
          if (v61 >= 2)
          {
            unsigned int v62 = __clz(v61);
            unsigned int v63 = ((byte_1BBB8A634[(unint64_t)(v61 << (v62 + 1)) >> 24] << 12) | 0x200000u) >> ((v62 + 1) >> 1);
            if (v62) {
              unsigned int v64 = v63;
            }
            else {
              unsigned int v64 = (11585 * v63) >> 14;
            }
            unsigned int v61 = (v64 + 16) >> 5;
          }
          int v65 = (int)((a13 << 8) * (v61 - v15)) / v15;
          int v66 = (v65 > 0) | (v65 >> 31);
          if (v65 < 0) {
            int v65 = -v65;
          }
          signed int v67 = v66 * ((v65 + 128) >> 8);
          if (v67 >= a13) {
            signed int v67 = a13;
          }
          if (v67 <= -a13) {
            LOBYTE(v67) = -(char)a13;
          }
          *v56++ = v67;
          int v54 = v57;
          --v53;
        }
        while (v53);
      }
      v48 += v45;
      v49 += v50;
      a8 = v51;
    }
    while (v51 != a10);
  }
  return result;
}

uint64_t sub_1BBA8735C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, int a9, int a10, int a11, int a12, signed int a13)
{
  int v15 = a6;
  uint64_t v70 = result;
  uint64_t v72 = (a5 - 1);
  if (a5 >= 1)
  {
    int v16 = (4 << a5) - 1;
    int v17 = -(4 << a5);
    int v18 = ((v16 + a11) & v17) >> (a5 + 2);
    int v19 = ((v16 + a12) & v17) >> (a5 + 2);
    uint64_t result = sub_1BBA8735C(result, a2, a3, a4, v72, a6);
    if (a8 < a10)
    {
      uint64_t v20 = *(int *)(a4 + 4 * v72);
      uint64_t v21 = *(int *)(a4 + 4 * a5);
      uint64_t v22 = *(void *)(a3 + 8 * a5) + 4 * (int)v21 * a8;
      uint64_t v23 = a8;
      int v24 = 2 * v20 * a8;
      int v25 = 2 * v20;
      uint64_t result = 4 * v20;
      do
      {
        if (a7 < a9)
        {
          if (2 * (int)v23 + 2 <= v19) {
            int v26 = 2;
          }
          else {
            int v26 = v19 - 2 * v23;
          }
          uint64_t v27 = *(void *)(a3 + 8 * v72) + 4 * v24;
          int v28 = 2 * a7 + 2;
          int v29 = -2 * a7;
          int v30 = 2 * a7;
          uint64_t v31 = a7;
          do
          {
            if (v18 >= v28) {
              int v32 = v28;
            }
            else {
              int v32 = v18;
            }
            uint64_t v33 = v31 + 1;
            if (v26 < 1)
            {
              int v35 = 0;
            }
            else
            {
              int v34 = 0;
              int v35 = 0;
              uint64_t v36 = v27 + 4 * v30;
              uint64_t v37 = v32 + v29;
              BOOL v39 = v18 >= 2 * (int)v33 || v18 > 2 * (int)v31;
              do
              {
                if (v39)
                {
                  uint64_t v40 = 0;
                  do
                    v35 += *(_DWORD *)(v36 + 4 * v40++);
                  while (v37 != v40);
                }
                ++v34;
                v36 += result;
              }
              while (v34 < v26);
            }
            v30 += 2;
            *(_DWORD *)(v22 + 4 * v31) = v35;
            v29 -= 2;
            v28 += 2;
            ++v31;
          }
          while (v33 != a9);
        }
        v22 += 4 * v21;
        ++v23;
        v24 += v25;
      }
      while (v23 != a10);
    }
  }
  uint64_t v41 = *(void *)(v70 + 8 * a5);
  if (v41) {
    BOOL v42 = a8 < a10;
  }
  else {
    BOOL v42 = 0;
  }
  if (v42)
  {
    char v43 = a5 + 3;
    int v44 = (a11 + 7) >> 3;
    uint64_t v45 = *(int *)(a2 + 4 * a5);
    uint64_t v46 = *(int *)(a4 + 4 * a5);
    int v47 = (a12 + 7) >> 3;
    uint64_t v48 = (unsigned char *)(v41 + 2 * a7 + (int)v45 * (uint64_t)a8);
    uint64_t v49 = *(void *)(a3 + 8 * a5) + 8 * a7 + 4 * (int)v46 * a8;
    uint64_t v50 = 4 * v46;
    uint64_t result = a9 - (uint64_t)a7;
    do
    {
      int v51 = a8 + 1;
      if (a7 < a9)
      {
        if (v47 >= v51 << v43 >> 3) {
          int v52 = 1 << (a5 + 3) >> 3;
        }
        else {
          int v52 = v47 - (a8 << v43 >> 3);
        }
        uint64_t v53 = a9 - (uint64_t)a7;
        int v54 = a7;
        int v55 = (int *)v49;
        uint64_t v56 = v48;
        do
        {
          int v57 = v54 + 1;
          int v58 = v44 - (v54 << v43 >> 3);
          if (v44 >= v57 << v43 >> 3) {
            int v59 = 1 << (a5 + 3) >> 3;
          }
          else {
            int v59 = v58;
          }
          int v60 = *v55++;
          unsigned int v61 = (v60 + ((v59 * v52) >> 1)) / (v59 * v52);
          if (v61 >= 2)
          {
            unsigned int v62 = __clz(v61);
            unsigned int v63 = ((byte_1BBB8A634[(unint64_t)(v61 << (v62 + 1)) >> 24] << 12) | 0x200000u) >> ((v62 + 1) >> 1);
            if (v62) {
              unsigned int v64 = v63;
            }
            else {
              unsigned int v64 = (11585 * v63) >> 14;
            }
            unsigned int v61 = (v64 + 16) >> 5;
          }
          int v65 = (int)((a13 << 8) * (v61 - v15)) / v15;
          int v66 = (v65 > 0) | (v65 >> 31);
          if (v65 < 0) {
            int v65 = -v65;
          }
          signed int v67 = v66 * ((v65 + 128) >> 8);
          if (v67 >= a13) {
            signed int v67 = a13;
          }
          if (v67 <= -a13) {
            LOBYTE(v67) = -(char)a13;
          }
          *v56++ = v67;
          int v54 = v57;
          --v53;
        }
        while (v53);
      }
      v48 += v45;
      v49 += v50;
      a8 = v51;
    }
    while (v51 != a10);
  }
  return result;
}

void *sub_1BBA87730(void *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v17 = *(_OWORD *)(result[37] + 2728);
  uint64_t v5 = a2;
  do
  {
    uint64_t v16 = v4;
    uint64_t v6 = (char *)v3[v4 + 186];
    if (v6) {
      BOOL v7 = a2 < 1;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = 0;
      int v9 = 8 << v4;
      size_t v10 = *((int *)v3 + v4 + 380);
      do
      {
        int v11 = *((_DWORD *)v3 + 5);
        int v12 = v11 * (int)v8 / a2;
        uint64_t v13 = v8 + 1;
        int v14 = v11 * ((int)v8 + 1) / a2;
        if (v12 < v14)
        {
          int v15 = *((_DWORD *)&v17 + v8);
          do
          {
            uint64_t result = memset(v6, v15, v10);
            v6 += v10;
            v12 += v9;
          }
          while (v12 < v14);
        }
        uint64_t v8 = v13;
      }
      while (v13 != v5);
    }
    uint64_t v4 = v16 + 1;
  }
  while (v16 != 3);
  return result;
}

int *sub_1BBA87854(int *result)
{
  int v1 = *result;
  int v39 = *(unsigned __int8 *)(*(void *)(*((void *)result + 37) + 584) + 3353);
  if (*result < v39)
  {
    int v2 = result[4];
    int v3 = result[5];
    int v4 = *(unsigned __int8 *)(*(void *)(*((void *)result + 37) + 584) + 3353);
    do
    {
      if (v3 >= 1)
      {
        int v5 = 0;
        int v6 = 1 << v4;
        unsigned int v41 = ((1 << v4) + v2 - 1) >> v4;
        unsigned int v7 = (1 << v4) >> 1;
        uint64_t v8 = (1 << (2 * v4 - 3));
        char v9 = 2 * v4 - 2;
        uint64_t v42 = (1 << (2 * v4 - 1));
        char v43 = 2 * v4;
        uint64_t v10 = (1 << v4) >> (v1 + 1);
        uint64_t v40 = (uint64_t *)&result[4 * (v39 - v4) + 394];
        int v44 = v4;
        do
        {
          unsigned int v11 = v5 + v6;
          if (v2 >= 1)
          {
            int v12 = 0;
            int v13 = (v5 >> v4) * v41;
            uint64_t v14 = *v40;
            int v45 = v5;
            do
            {
              unsigned int v15 = v12 + v6;
              if (v12 + v6 <= v2 && v11 <= result[5])
              {
                if (v5 >= v11)
                {
                  uint64_t v19 = 0;
                  uint64_t v18 = 0;
                  uint64_t v17 = 0;
                }
                else
                {
                  uint64_t v17 = 0;
                  uint64_t v18 = 0;
                  uint64_t v19 = 0;
                  do
                  {
                    if (v12 < v15)
                    {
                      uint64_t v20 = *((void *)result + 161);
                      uint64_t v21 = v20 * (v5 >> *result);
                      uint64_t v22 = 4 * v20;
                      uint64_t v23 = 8 * v20;
                      int v24 = v12;
                      do
                      {
                        if ((int)v10 < 1)
                        {
                          unsigned int v26 = 0;
                          unsigned int v34 = 0;
                        }
                        else
                        {
                          uint64_t v25 = 0;
                          unsigned int v26 = 0;
                          uint64_t v27 = v21 + (v24 >> *result);
                          uint64_t v28 = *((void *)result + 172) + 4 * v27;
                          uint64_t v29 = *((void *)result + 174) + 8 * v27;
                          do
                          {
                            int v30 = (int *)v28;
                            uint64_t v31 = v10;
                            do
                            {
                              int v32 = *v30++;
                              v26 += v32;
                              --v31;
                            }
                            while (v31);
                            ++v25;
                            v28 += v22;
                          }
                          while (v25 != v10);
                          uint64_t v33 = 0;
                          unsigned int v34 = 0;
                          do
                          {
                            int v35 = (int *)v29;
                            uint64_t v36 = v10;
                            do
                            {
                              int v37 = *v35;
                              v35 += 2;
                              v34 += v37;
                              --v36;
                            }
                            while (v36);
                            ++v33;
                            v29 += v23;
                          }
                          while (v33 != v10);
                        }
                        v17 += (v8 + v34 - ((v26 * (unint64_t)v26) >> v9)) >> v9;
                        v19 += v26;
                        v18 += v34;
                        v24 += v7;
                      }
                      while (v24 < v15);
                    }
                    v5 += v7;
                  }
                  while (v5 < v11);
                }
                unint64_t v38 = (v18 + v42 - ((unint64_t)(v19 * v19) >> v43)) >> v43;
                int v16 = (v38 - ((unint64_t)(v17 + 2) >> 2)) & ~((int)(v38 - ((unint64_t)(v17 + 2) >> 2)) >> 31);
                int v4 = v44;
                int v5 = v45;
              }
              else
              {
                int v16 = 0;
              }
              *(_DWORD *)(v14 + 4 * ((v12 >> v4) + v13)) = v16;
              int v2 = result[4];
              v12 += v6;
            }
            while ((int)v15 < v2);
            int v3 = result[5];
          }
          int v5 = v11;
        }
        while ((int)v11 < v3);
        int v1 = *result;
      }
      --v4;
    }
    while (v4 > v1);
  }
  return result;
}

uint64_t sub_1BBA87ADC(uint64_t a1)
{
  int v2 = *(int **)(a1 + 304);
  int v3 = &v2[2 * v2[4]];
  uint64_t v4 = *((__int16 *)v3 + 12);
  uint64_t v5 = *((__int16 *)v3 + 13);
  LODWORD(v3) = v2[75];
  int v6 = v2[74];
  int v7 = (int)(*(float *)(*(void *)(a1 + 296) + 2720) + 0.5);
  int v8 = v2[72];
  int v9 = v2[73];
  int v10 = v3 - v7;
  if (v10 <= v8) {
    LODWORD(v11) = v8;
  }
  else {
    LODWORD(v11) = v10 & (v10 >> 31);
  }
  int v12 = v6 - v7;
  if (v12 < v9) {
    int v9 = v12;
  }
  if (v12 <= 0) {
    int v13 = 0;
  }
  else {
    int v13 = v9;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 1744);
  unsigned int v15 = *(_DWORD *)(a1 + 1736);
  int v16 = sub_1BBA87C08(v14, v15, v13);
  if (v16 <= (int)v11) {
    uint64_t v11 = v11;
  }
  else {
    uint64_t v11 = v16 & (v16 >> 31);
  }
  *(_DWORD *)(a1 + 1712) = v11;
  uint64_t result = sub_1BBA87C08(v15, v14, v11);
  if ((int)result >= v13) {
    int v18 = v13;
  }
  else {
    int v18 = result;
  }
  if ((int)result <= 0) {
    int v19 = 0;
  }
  else {
    int v19 = v18;
  }
  *(_DWORD *)(a1 + 1716) = v19;
  if (*(int *)(a1 + 1756) >= 1)
  {
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 168);
    uint64_t v21 = *(void *)(a1 + 1720);
    return v20(v21, v4, v5, a1 + 1760, v11);
  }
  return result;
}

uint64_t sub_1BBA87C08(unsigned int a1, unsigned int a2, int a3)
{
  if (!a2) {
    return 0;
  }
  float v3 = (double)-a3 / 6.0;
  double v4 = (double)a1 / (double)a2 * (1.0 - exp2f(v3));
  if (v4 <= 0.0) {
    double v5 = 0.5;
  }
  else {
    double v5 = -0.5;
  }
  float v6 = v4 + 1.0;
  return (int)(v5 + (float)(log2f(v6) * -6.0));
}

uint64_t sub_1BBA87C98(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 296) + 584);
  int v3 = *(__int16 *)(v2 + 3274);
  int v4 = *(__int16 *)(v2 + 3276);
  if (v4 * v3 <= 230400 && *(double *)(v2 + 3280) <= 30.0)
  {
    if (a2 < 400) {
      return 1;
    }
    goto LABEL_7;
  }
  uint64_t v5 = 1;
  if (a2 >= 400 && (unsigned __int16)v3 == (unsigned __int16)v4)
  {
LABEL_7:
    if (*(double *)(a1 + 1672) >= 12.0) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return v5;
}

uint64_t sub_1BBA87D1C(void *a1, int a2)
{
  *(_OWORD *)(a1 + 3) = 0u;
  int v4 = a1 + 3;
  *((_DWORD *)a1 + 22) = 0;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  a1[3] = (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, 0);
  uint64_t v5 = *a1;
  a1[7] = *(void *)(*a1 + 112);
  *((_DWORD *)a1 + 22) = a2;
  int v6 = *(unsigned __int8 *)(v5 + 284);
  if (v6 == 10)
  {
    *((unsigned char *)a1 + 92) = 1;
    int v15 = a2 + 3;
    int v16 = a2 + a2 + 3 + 2;
    uint64_t v17 = (int)((v16 + *(_DWORD *)(v5 + 276) + 7) & 0xFFFFFFF8);
    signed int v18 = (a2 + 10) & 0xFFFFFFF8;
    uint64_t v19 = v17 * (*(int *)(v5 + 280) + (uint64_t)v16);
    uint64_t result = sub_1BBA12730((void **)a1 + 1, 2 * (3 * v19 + (v18 | 5)), 0x10uLL);
    if (result)
    {
LABEL_6:
      *((_DWORD *)v4 + 16) = 0;
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)int v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      return result;
    }
    uint64_t v20 = a1[1] + 2 * v18 + 2 * (int)v17 * (uint64_t)v15;
    uint64_t v21 = v20 + 2 * v19 + 10;
    a1[4] = v21;
    a1[5] = v20;
    a1[6] = v21 + 2 * v19;
    a1[9] = v17;
    a1[10] = v17;
    a1[8] = v17;
    a1[12] = sub_1BBA88540;
    a1[13] = sub_1BBA883BC;
    a1[14] = sub_1BBA88008;
    a1[15] = sub_1BBA87F6C;
  }
  else
  {
    if (v6 == 8)
    {
      *((unsigned char *)a1 + 92) = 0;
      int v7 = a2 + 3;
      int v8 = a2 + a2 + 3 + 2;
      uint64_t v9 = (int)((v8 + *(_DWORD *)(v5 + 276) + 15) & 0xFFFFFFF0);
      signed int v10 = (a2 + 18) & 0xFFFFFFF0;
      uint64_t v11 = v9 * (*(int *)(v5 + 280) + (uint64_t)v8);
      uint64_t result = sub_1BBA12730((void **)a1 + 1, 3 * v11 + (v10 | 0xD), 0x10uLL);
      if (!result)
      {
        uint64_t v13 = a1[1] + v10 + (int)v9 * (uint64_t)v7;
        uint64_t v14 = v13 + v11 + 13;
        a1[4] = v14;
        a1[5] = v13;
        a1[6] = v14 + v11;
        a1[9] = v9;
        a1[10] = v9;
        a1[8] = v9;
        a1[15] = sub_1BBA886C4;
        a1[12] = sub_1BBA6FB4C;
        a1[13] = sub_1BBA6F99C;
        a1[14] = sub_1BBA6F6AC;
        return result;
      }
      goto LABEL_6;
    }
    return 4294954386;
  }
  return result;
}

void *sub_1BBA87F6C(void *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    int v6 = (const void *)(a6 + 2 * (-3 - (int)result) + 2 * a3 * a5);
    size_t v7 = 2 * (a2 + 2 * (int)result + 5);
    uint64_t v8 = (a4 + 1) - 1;
    uint64_t v9 = (char *)(a5 * (2 * a3 + 2) - 2 * (int)result + a6 - 6);
    uint64_t v10 = 2 * a5;
    do
    {
      uint64_t result = memcpy(v9, v6, v7);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1BBA88008(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v8 = a3;
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, 4294967292, a3, 0);
  int v61 = a4;
  if (v8 < a4)
  {
    uint64_t v13 = a6 + 2 * v8 * a5;
    uint64_t v14 = (__int16 *)(v13 - 8);
    uint64_t v15 = *(int *)(a2 + 276);
    uint64_t v59 = (int)v15 + 6;
    uint64_t v16 = ((v15 + 6) & ~(((int)v15 + 6) >> 31)) + 1;
    uint64_t v17 = result - 6 * v11 - 6;
    uint64_t v18 = 2 * v11;
    uint64_t v19 = result - 4 * v11 - 6;
    uint64_t v20 = result - 2 * v11 - 6;
    uint64_t v21 = result - 6;
    uint64_t v22 = result - 6 + 2 * v11;
    uint64_t v23 = result - 6 + 4 * v11;
    uint64_t v24 = result - 6 + 6 * v11;
    int v60 = *(_DWORD *)(a2 + 276);
    uint64_t v58 = 2 * v15 + 6;
    uint64_t v25 = result - 6 + 8 * v11;
    do
    {
      if (v60 >= -6)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v25;
        uint64_t v28 = v24;
        uint64_t v29 = v23;
        uint64_t v30 = v22;
        uint64_t result = v21;
        uint64_t v31 = v20;
        uint64_t v32 = v19;
        uint64_t v33 = v17;
        do
        {
          uint64_t v34 = 0;
          int v35 = 0;
          do
          {
            v35 += byte_1BBB7A380[v34] * *(unsigned __int16 *)(v33 + 2 * v34);
            ++v34;
          }
          while (v34 != 8);
          uint64_t v36 = 0;
          int v37 = 0;
          v63[0] = v35 >> 2;
          do
          {
            v37 += byte_1BBB7A380[v36] * *(unsigned __int16 *)(v32 + 2 * v36);
            ++v36;
          }
          while (v36 != 8);
          uint64_t v38 = 0;
          int v39 = 0;
          v63[1] = v37 >> 2;
          do
          {
            v39 += byte_1BBB7A380[v38] * *(unsigned __int16 *)(v31 + 2 * v38);
            ++v38;
          }
          while (v38 != 8);
          uint64_t v40 = 0;
          int v41 = 0;
          v63[2] = v39 >> 2;
          do
          {
            v41 += byte_1BBB7A380[v40] * *(unsigned __int16 *)(result + 2 * v40);
            ++v40;
          }
          while (v40 != 8);
          uint64_t v42 = 0;
          int v43 = 0;
          v63[3] = v41 >> 2;
          do
          {
            v43 += byte_1BBB7A380[v42] * *(unsigned __int16 *)(v30 + 2 * v42);
            ++v42;
          }
          while (v42 != 8);
          uint64_t v44 = 0;
          int v45 = 0;
          v63[4] = v43 >> 2;
          do
          {
            v45 += byte_1BBB7A380[v44] * *(unsigned __int16 *)(v29 + 2 * v44);
            ++v44;
          }
          while (v44 != 8);
          uint64_t v46 = 0;
          int v47 = 0;
          v63[5] = v45 >> 2;
          do
          {
            v47 += byte_1BBB7A380[v46] * *(unsigned __int16 *)(v28 + 2 * v46);
            ++v46;
          }
          while (v46 != 8);
          uint64_t v48 = 0;
          int v49 = 0;
          v63[6] = v47 >> 2;
          do
          {
            v49 += byte_1BBB7A380[v48] * *(unsigned __int16 *)(v27 + 2 * v48);
            ++v48;
          }
          while (v48 != 8);
          uint64_t v50 = 0;
          int v51 = 0;
          v63[7] = v49 >> 2;
          do
          {
            v51 += v63[v50] * byte_1BBB7A380[v50];
            ++v50;
          }
          while (v50 != 8);
          int v52 = (v51 + 512) >> 10;
          if (v52 >= 1023) {
            int v52 = 1023;
          }
          v14[v26++] = v52 & ~(unsigned __int16)(v52 >> 31);
          v33 += 2;
          v32 += 2;
          v31 += 2;
          result += 2;
          v30 += 2;
          v29 += 2;
          v28 += 2;
          v27 += 2;
        }
        while (v26 != v16);
      }
      if (a1 != 1)
      {
        __int16 v53 = *v14;
        uint64_t v54 = -4 - (a1 - 1);
        do
          *(_WORD *)(v13 + 2 * v54++) = v53;
        while (v54 != -4);
        uint64_t v55 = v58;
        __int16 v56 = v14[v59];
        uint64_t v57 = a1 - 1;
        do
        {
          *(_WORD *)(v13 + v55) = v56;
          v55 += 2;
          --v57;
        }
        while (v57);
      }
      v14 += a5;
      ++v8;
      v17 += v18;
      v19 += v18;
      v20 += v18;
      v21 += v18;
      v22 += v18;
      v23 += v18;
      v24 += v18;
      v25 += v18;
      v13 += 2 * a5;
    }
    while (v8 != v61);
  }
  return result;
}

char *sub_1BBA883BC(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v9 = a3;
  uint64_t v12 = *(void *)(a2 + 112);
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)a2 + 16))(a2, 0, a3, 0);
  if (v9 < a4)
  {
    uint64_t v14 = (__int16 *)(a6 + 2 * v9 * a5);
    uint64_t v15 = *(unsigned int *)(a2 + 276);
    uint64_t v16 = &result[-6 * v12];
    uint64_t v17 = 2 * v12;
    uint64_t result = byte_1BBB7A380;
    do
    {
      if ((int)v15 >= 1)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v16;
        do
        {
          uint64_t v20 = 0;
          int v21 = 0;
          uint64_t v22 = (unsigned __int16 *)v19;
          do
          {
            v21 += byte_1BBB7A380[v20++] * *v22;
            uint64_t v22 = (unsigned __int16 *)((char *)v22 + v17);
          }
          while (v20 != 8);
          int v23 = (v21 + 32) >> 6;
          if (v23 >= 1023) {
            int v23 = 1023;
          }
          v14[v18++] = v23 & ~(unsigned __int16)(v23 >> 31);
          v19 += 2;
        }
        while (v18 != v15);
      }
      if (a1 == -3) {
        goto LABEL_15;
      }
      __int16 v24 = *v14;
      uint64_t v25 = -(uint64_t)(a1 + 3);
      do
        v14[v25] = v24;
      while (!__CFADD__(v25++, 1));
      if (a1 != -2)
      {
LABEL_15:
        __int16 v27 = v14[(int)v15 - 1];
        uint64_t v28 = (int)v15;
        uint64_t v29 = a1 + 2;
        do
        {
          v14[v28++] = v27;
          --v29;
        }
        while (v29);
      }
      ++v9;
      v14 += a5;
      v16 += v17;
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t sub_1BBA88540(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v9 = a3;
  uint64_t v12 = *(void *)(a2 + 112);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, 4294967292, a3, 0);
  if (v9 < a4)
  {
    uint64_t v14 = a6 + 2 * v9 * a5;
    uint64_t v15 = *(int *)(a2 + 276);
    uint64_t v16 = (__int16 *)(v14 - 8);
    uint64_t v17 = result - 6;
    uint64_t result = 2 * v15 + 6;
    do
    {
      if ((int)v15 >= -6)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v17;
        do
        {
          uint64_t v20 = 0;
          int v21 = 0;
          do
          {
            v21 += byte_1BBB7A380[v20] * *(unsigned __int16 *)(v19 + 2 * v20);
            ++v20;
          }
          while (v20 != 8);
          int v22 = (v21 + 32) >> 6;
          if (v22 >= 1023) {
            int v22 = 1023;
          }
          v16[v18++] = v22 & ~(unsigned __int16)(v22 >> 31);
          v19 += 2;
        }
        while (v18 != ((v15 + 6) & ~(((int)v15 + 6) >> 31)) + 1);
      }
      if (a1 != 1)
      {
        __int16 v23 = *v16;
        uint64_t v24 = -4 - (a1 - 1);
        do
          *(_WORD *)(v14 + 2 * v24++) = v23;
        while (v24 != -4);
        __int16 v25 = v16[(int)v15 + 6];
        uint64_t v26 = 2 * v15 + 6;
        uint64_t v27 = a1 - 1;
        do
        {
          *(_WORD *)(v14 + v26) = v25;
          v26 += 2;
          --v27;
        }
        while (v27);
      }
      ++v9;
      v16 += a5;
      v17 += 2 * v12;
      v14 += 2 * a5;
    }
    while (v9 != a4);
  }
  return result;
}

void *sub_1BBA886C4(void *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    size_t v7 = (const void *)(a6 + -3 - (int)result + a3 * a5);
    size_t v8 = a2 + 2 * (int)result + 5;
    uint64_t v9 = (a4 + 1) - 1;
    uint64_t v10 = (char *)(a5 + a5 * a3 - (int)result + a6 - 3);
    do
    {
      uint64_t result = memcpy(v10, v7, v8);
      v10 += a5;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1BBA88754(void *a1, uint64_t a2)
{
  int v2 = a2;
  ((void (*)(void, void, void, uint64_t, void, void))a1[12])(*((unsigned int *)a1 + 22), *a1, 0, a2, a1[8], a1[4]);
  int v4 = *(_DWORD *)(*a1 + 280);
  if (v4 <= v2) {
    uint64_t v5 = (v4 + 3);
  }
  else {
    uint64_t v5 = (v2 - 4);
  }
  ((void (*)(void))a1[13])(*((unsigned int *)a1 + 22));
  ((void (*)(void, void, uint64_t, uint64_t, void, void))a1[14])(*((unsigned int *)a1 + 22), *a1, 4294967292, v5, a1[10], a1[6]);
  ((void (*)(void, void, void, void, void, void))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), 0, (*((_DWORD *)a1 + 22) + 3), -a1[8], a1[4]);
  ((void (*)(void, void, uint64_t, void, void, void))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), 4, (*((_DWORD *)a1 + 22) - 1), -a1[9], a1[5]);
  uint64_t result = ((uint64_t (*)(void, void, uint64_t, void, void, void))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), 4, (*((_DWORD *)a1 + 22) - 1), -a1[10], a1[6]);
  int v7 = *(_DWORD *)(*a1 + 280);
  if (v5 == v7 + 3)
  {
    ((void (*)(void, void, void, void, void, void))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), (v7 - 1), (*((_DWORD *)a1 + 22) + 2), a1[8], a1[4]);
    ((void (*)(void, void, void, void, void, void))a1[15])(*((unsigned int *)a1 + 22), *(unsigned int *)(*a1 + 276), (*(_DWORD *)(*a1 + 280) + 2), (*((_DWORD *)a1 + 22) - 1), a1[9], a1[5]);
    size_t v8 = (uint64_t (*)(void))a1[15];
    return v8();
  }
  return result;
}

uint64_t sub_1BBA88900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 1368);
  *(void *)(a1 + 16) = *(void *)(v4 + 176);
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a2 + 78544;
  uint64_t v7 = *(unsigned __int8 *)(v4 + 241);
  *(void *)(a1 + 976) = *(void *)(a2 + 1400);
  *(void *)(a1 + 1872) = a2;
  *(void *)(a1 + 1880) = v4;
  *(void *)(a1 + 1888) = *(void *)(a2 + 1384);
  uint64_t v8 = *(void *)(a2 + 79088);
  *(void *)(a1 + 952) = v8;
  uint64_t v9 = *(void *)(a2 + 79216);
  *(void *)(a1 + 960) = v9 + 768;
  uint64_t v10 = a1 + 984;
  uint64_t v11 = sub_1BBAB1F58(a1 + 984, *(_DWORD *)(v8 + 240), *(unsigned __int8 *)(v4 + 2000), *(_DWORD *)(v8 + 64), *(char *)(v9 + 640));
  sub_1BBAB47F4(v10, *(char *)(a2 + 621), *(unsigned __int8 *)(*(void *)(v5 + 1864) + 2001));
  if (v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CMTime buf = 0;
      _os_log_error_impl(&dword_1BB9B9000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "RDCost init failed in LCUEnc\n", buf, 2u);
    }
    return v11;
  }
  *(void *)(a1 + 4296) = a2;
  uint64_t v12 = *(void *)(a2 + 1368);
  *(void *)(a1 + 4304) = v12;
  *(void *)(a1 + 4312) = *(void *)(v6 + 544);
  int v13 = *(unsigned __int8 *)(v12 + 2000);
  uint64_t v14 = sub_1BBAB4978;
  if (v13 == 8) {
    uint64_t v14 = sub_1BBAB4AF8;
  }
  *(void *)(a1 + 4192) = v14;
  *(void *)(a1 + 4144) = sub_1BBAE4020;
  *(void *)(a1 + 4152) = sub_1BBAE3F80;
  *(void *)(a1 + 4160) = sub_1BBAE3F44;
  *(void *)(a1 + 4168) = sub_1BBAE3EDC;
  *(void *)(a1 + 4176) = sub_1BBAE3E80;
  *(void *)(a1 + 4184) = sub_1BBAE3E28;
  *(void *)(a1 + 4264) = sub_1BBAE3DBC;
  *(void *)(a1 + 4272) = sub_1BBAE3CBC;
  *(void *)(a1 + 4280) = sub_1BBAE3B7C;
  *(void *)(a1 + 4288) = sub_1BBAE39FC;
  if (v13 == 8) {
    *(void *)(a1 + 4192) = sub_1BBAE3754;
  }
  sub_1BBA5226C(a1 + 1368, a2, v10, *(char *)(*(void *)(a1 + 952) + 259), *(char *)(*(void *)(a1 + 952) + 259), 8, 1, 2);
  memset((void *)(a1 + 8088), 255, 4 * v7 + 4);
  uint64_t v15 = *(void *)(a1 + 952);
  int v16 = *(char *)(v15 + 569);
  *(_DWORD *)(a1 + 4) = v16;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v15 + 613);
  uint64_t v17 = *(void *)(v6 + 672);
  int v18 = *(_DWORD *)(v17 + 444);
  *(_DWORD *)(a1 + 12) = v18;
  *(unsigned char *)(a1 + 188) = v16 == 4;
  *(unsigned char *)a1 = v16 > 0;
  if (v16 >= 3)
  {
    unsigned int v19 = *(unsigned __int8 *)(a2 + 10);
    *(unsigned char *)(a1 + 1) = v19 < 2;
LABEL_11:
    int v20 = 1;
    goto LABEL_18;
  }
  *(unsigned char *)(a1 + 1) = 0;
  unsigned int v19 = *(unsigned __int8 *)(a2 + 10);
  if (v16 == 2) {
    goto LABEL_11;
  }
  BOOL v21 = v16 > 0 && v19 == 2;
  int v20 = v21;
LABEL_18:
  *(_DWORD *)(a1 + 184) = v20;
  *(unsigned char *)(a1 + 192) = *(unsigned __int8 *)(v17 + 640) - 3 < 2;
  int v22 = *(unsigned char **)(a1 + 1880);
  *(unsigned char *)(v5 + 8110) = v22[245] != 0;
  BOOL v23 = v19 <= 1 && v22[244] != 0;
  *(unsigned char *)(v5 + 8111) = v23;
  int v24 = *(_DWORD *)(v15 + 508);
  if (v24) {
    LOBYTE(v24) = *(unsigned char *)(v15 + 574) || *(unsigned char *)(v15 + 575) || *(unsigned char *)(v15 + 576) != 0;
  }
  *(unsigned char *)(v5 + 8112) = v24;
  uint64_t v25 = *(void *)(a1 + 1872);
  uint64_t v26 = *(void *)(v25 + 79216);
  uint64_t v27 = *(void *)(v26 + 400);
  if (v27)
  {
    uint64_t v28 = *(uint64_t **)(v26 + 392);
    uint64_t v27 = v28[1];
    if (v27) {
      uint64_t v27 = *v28;
    }
  }
  BOOL v29 = 0;
  BOOL v30 = v19 < 2;
  if (*(unsigned char *)(v15 + 612)) {
    BOOL v31 = v19 < 2;
  }
  else {
    BOOL v31 = 0;
  }
  if (!*(unsigned char *)(v15 + 608)) {
    BOOL v30 = 0;
  }
  *(void *)(a1 + 8136) = v27;
  *(_DWORD *)(a1 + 24) = *(char *)(v25 + 621);
  *(unsigned char *)(a1 + 189) = v31;
  *(unsigned char *)(a1 + 190) = v30;
  if (v19 == 2 && *(unsigned char *)(v15 + 225) == 1) {
    BOOL v29 = v18 != 3 && v18 != 5;
  }
  *(unsigned char *)(a1 + 191) = v29;
  if (!*(void *)(a1 + 4736))
  {
    int v36 = *(_DWORD *)(a1 + 4848);
    int v37 = *(void **)(a1 + 4856);
    if (v22[2000] == 8)
    {
      if (v36 == 1)
      {
LABEL_50:
        v37[1] = 0;
        uint64_t v38 = 4 * v22[2013] + 16;
        uint64_t v11 = sub_1BBA12730((void **)(a1 + 4648), 4 * v38, 0x10uLL);
        if (v11) {
          return v11;
        }
        uint64_t v41 = *(void *)(a1 + 4648);
        *(void *)(a1 + 4664) = v41 + 16;
        *(void *)(a1 + 4672) = v41 + v38 + 16;
        *(void *)(a1 + 4680) = v41 + (2 * v38) + 16;
        unsigned int v42 = 3 * v38;
        int v43 = sub_1BBA8C3C0;
        uint64_t v44 = sub_1BBA8D008;
        int v45 = sub_1BBA8DCD4;
        uint64_t v46 = sub_1BBA8DD1C;
        goto LABEL_79;
      }
      if (v37) {
        (*(void (**)(void *))(*v37 + 8))(v37);
      }
      int v37 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
      if (v37)
      {
        v37[1] = 0;
        v37[2] = 0;
        *int v37 = &unk_1F14EE2B0;
        *(void *)(a1 + 4856) = v37;
        *(_DWORD *)(a1 + 4848) = 1;
        int v22 = *(unsigned char **)(a1 + 1880);
        goto LABEL_50;
      }
LABEL_90:
      *(void *)(a1 + 4856) = 0;
      return 4294954392;
    }
    if (v36 != 2)
    {
      if (v37) {
        (*(void (**)(void *))(*v37 + 8))(v37);
      }
      int v37 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
      if (!v37) {
        goto LABEL_90;
      }
      v37[1] = 0;
      v37[2] = 0;
      *int v37 = &unk_1F14EE2E0;
      *(void *)(a1 + 4856) = v37;
      *(_DWORD *)(a1 + 4848) = 2;
      int v22 = *(unsigned char **)(a1 + 1880);
    }
    v37[1] = 0;
    uint64_t v67 = 4 * v22[2013] + 8;
    uint64_t v11 = sub_1BBA12730((void **)(a1 + 4648), 8 * v67, 0x10uLL);
    if (v11) {
      return v11;
    }
    uint64_t v41 = *(void *)(a1 + 4648);
    *(void *)(a1 + 4664) = v41 + 16;
    *(void *)(a1 + 4672) = v41 + (2 * v67) + 16;
    *(void *)(a1 + 4680) = v41 + (4 * v67) + 16;
    unsigned int v42 = 6 * v67;
    int v43 = sub_1BBA8A424;
    uint64_t v44 = sub_1BBA8B490;
    int v45 = sub_1BBA8C1C8;
    uint64_t v46 = sub_1BBA8C218;
LABEL_79:
    uint64_t v68 = (void *)(a1 + 4736);
    *(void *)(a1 + 4688) = v41 + v42 + 16;
    *(void *)(a1 + 8144) = v46;
    *(void *)(a1 + 8152) = v45;
    *(void *)(a1 + 8160) = v44;
    *(void *)(a1 + 8168) = 0;
    *(void *)(a1 + 8176) = v43;
    *(void *)(a1 + 8184) = 0;
    uint64_t v69 = *(unsigned __int8 **)(a1 + 1880);
    int v279 = v69[2013];
    uint64_t v70 = v69[2009];
    int v71 = v69[242];
    uint64_t v72 = *(unsigned __int8 *)(*(void *)(a1 + 952) + 352);
    int v73 = (v69[241] + 4) & 0x1FC;
    unint64_t v289 = v69[241];
    int32x4_t v74 = vdupq_n_s32(v70);
    int32x4_t v75 = 0uLL;
    v76.i64[0] = 0x100000001;
    v76.i64[1] = 0x100000001;
    v77.i64[0] = 0x400000004;
    v77.i64[1] = 0x400000004;
    v78.i64[0] = 0x100000001;
    v78.i64[1] = 0x100000001;
    v79.i64[0] = 0x200000002;
    v79.i64[1] = 0x200000002;
    int32x4_t v80 = (int32x4_t)xmmword_1BBB6F6C0;
    int32x4_t v81 = 0uLL;
    int32x4_t v82 = 0uLL;
    int32x4_t v83 = 0uLL;
    int32x4_t v84 = 0uLL;
    int32x4_t v85 = 0uLL;
    int8x16_t v86 = 0uLL;
    do
    {
      v40.i32[0] = 0;
      int32x4_t v87 = (int32x4_t)v86;
      int8x16_t v88 = (int8x16_t)v85;
      int32x4_t v89 = v84;
      int32x4_t v90 = v83;
      int8x16_t v91 = (int8x16_t)v82;
      int8x16_t v92 = (int8x16_t)v81;
      int32x4_t v93 = v75;
      int32x4_t v94 = v80;
      v86.i32[0] = *(unsigned __int8 *)(*(void *)(a1 + 952) + 352);
      int8x16_t v95 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v86, v40), 0);
      int32x4_t v96 = vsubq_s32(v74, v80);
      int8x16_t v40 = (int8x16_t)vshlq_u32((uint32x4_t)v76, (uint32x4_t)vaddq_s32(v96, v96));
      int32x4_t v97 = (int32x4_t)vshrq_n_u32((uint32x4_t)v40, 4uLL);
      int32x4_t v98 = vceqzq_s32(v94);
      int32x4_t v99 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v77, (int8x16_t)v98), v98);
      int32x4_t v100 = vaddq_s32(v99, v76);
      unsigned long long v101 = *(_OWORD *)&v99 | __PAIR128__(0x200000002, 0x200000002);
      int32x4_t v102 = vmulq_s32((int32x4_t)vorrq_s8((int8x16_t)v97, (int8x16_t)vshrq_n_u32((uint32x4_t)v40, 5uLL)), (int32x4_t)v101);
      int32x4_t v103 = (int32x4_t)vbicq_s8((int8x16_t)v102, v95);
      uint32x4_t v104 = (uint32x4_t)vaddq_s32(v96, v78);
      int32x4_t v105 = (int32x4_t)vshrq_n_u32((uint32x4_t)v40, 6uLL);
      int8x16_t v86 = (int8x16_t)vaddq_s32(v100, v87);
      int32x4_t v85 = vmlaq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v76, v104), v85), v105, v100);
      int32x4_t v84 = vaddq_s32(vmlaq_s32(vaddq_s32(v89, (int32x4_t)vshlq_u32(v79, v104)), v97, v100), v77);
      int32x4_t v83 = vaddq_s32((int32x4_t)v101, v90);
      int32x4_t v82 = vmlaq_s32(v82, (int32x4_t)vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v40, 1uLL), v40), (int32x4_t)v101);
      int32x4_t v81 = vaddq_s32(v102, v81);
      int32x4_t v75 = vaddq_s32(v103, v75);
      int32x4_t v80 = vaddq_s32(v94, v77);
      v73 -= 4;
    }
    while (v73);
    int32x4_t v295 = v74;
    int8x16_t v291 = (int8x16_t)v84;
    int8x16_t v292 = (int8x16_t)v89;
    int8x16_t v286 = (int8x16_t)v83;
    BOOL v282 = v72 != 0;
    int v106 = ~v71;
    v39.i32[0] = v69[241];
    int8x16_t v107 = (int8x16_t)vcgtq_u32((uint32x4_t)v94, (uint32x4_t)vdupq_lane_s32(v39, 0));
    uint64_t v108 = vaddvq_s32((int32x4_t)vbslq_s8(v107, (int8x16_t)v87, v86));
    unsigned int v109 = ~v71 + v70;
    uint64_t v110 = v69[2011];
    uint64_t v111 = v70 - v110;
    *(void *)(a1 + 376) = 0;
    int v290 = v70;
    unsigned int v278 = v109;
    int8x16_t v280 = (int8x16_t)v75;
    int8x16_t v281 = (int8x16_t)v93;
    if (!v69[245] && !v69[244]) {
      goto LABEL_91;
    }
    if ((int)v111 >= 1)
    {
      uint64_t v112 = v70 - v110;
      bzero((void *)(a1 + 216), 32 * (~v110 + v70) + 32);
      uint64_t v111 = v112;
    }
    if (v111 < v109)
    {
      int32x4_t v113 = vdupq_n_s32(v111);
      int32x4_t v114 = vaddq_s32(v113, (int32x4_t)xmmword_1BBB6F6C0);
      int32x4_t v115 = vdupq_n_s32(*(unsigned __int8 *)(*(void *)(a1 + 1880) + 2012));
      int8x16_t v116 = 0uLL;
      v117.i64[0] = 0x100000001;
      v117.i64[1] = 0x100000001;
      int v118 = (v106 + v110 + 3) & 0xFFFFFFFC;
      v119.i64[0] = 0x200000002;
      v119.i64[1] = 0x200000002;
      v120.i64[0] = 0x500000005;
      v120.i64[1] = 0x500000005;
      v121.i64[0] = 0x400000004;
      v121.i64[1] = 0x400000004;
      int8x16_t v122 = 0uLL;
      int8x16_t v123 = 0uLL;
      int8x16_t v124 = 0uLL;
      do
      {
        v105.i32[0] = 0;
        int32x4_t v125 = (int32x4_t)v124;
        int32x4_t v126 = (int32x4_t)v123;
        int32x4_t v127 = (int32x4_t)v122;
        int32x4_t v128 = (int32x4_t)v116;
        v116.i32[0] = v72;
        int8x16_t v129 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v116, (int8x16_t)v105), 0);
        int32x4_t v130 = vsubq_s32(v295, v114);
        uint32x4_t v131 = (uint32x4_t)vaddq_s32(v130, v130);
        uint32x4_t v132 = vshlq_u32(v117, v131);
        int8x16_t v133 = (int8x16_t)vceqq_s32(v130, v115);
        int32x4_t v134 = vceqq_s32(v114, v113);
        uint32x4_t v135 = (uint32x4_t)vbicq_s8(v119, vorrq_s8((int8x16_t)v134, v133));
        int32x4_t v105 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v120, v131), v119, (int8x16_t)vshrq_n_u32(v132, 5uLL)), v135), (int8x16_t)vshlq_u32(vshrq_n_u32(v132, 4uLL), (uint32x4_t)vbicq_s8(v119, (int8x16_t)v134)));
        uint32x4_t v136 = (uint32x4_t)vbslq_s8(v133, (int8x16_t)vshlq_u32((uint32x4_t)v119, v131), (int8x16_t)vshrq_n_u32(v132, 1uLL));
        int32x4_t v137 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v121, (int8x16_t)v134), v134);
        int8x16_t v124 = (int8x16_t)vaddq_s32(v137, v125);
        int8x16_t v123 = (int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v137, v131), v126), (int32x4_t)vshlq_u32(v136, v135));
        int8x16_t v122 = (int8x16_t)vaddq_s32(v105, v127);
        int8x16_t v116 = (int8x16_t)vaddq_s32((int32x4_t)vbicq_s8((int8x16_t)v105, v129), v128);
        int32x4_t v114 = vaddq_s32(v114, v121);
        v118 -= 4;
      }
      while (v118);
      v87.i32[0] = v106 + v110 - 1;
      int8x16_t v138 = (int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v87.i32[0] & 0xFFFFFFFC), (int8x16_t)xmmword_1BBB6F6C0), (uint32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.i8, 0));
      int v139 = vaddvq_s32((int32x4_t)vbslq_s8(v138, (int8x16_t)v125, v124));
      int v140 = vaddvq_s32((int32x4_t)vbslq_s8(v138, (int8x16_t)v126, v123));
      int v141 = vaddvq_s32((int32x4_t)vbslq_s8(v138, (int8x16_t)v127, v122));
      int v142 = vaddvq_s32((int32x4_t)vbslq_s8(v138, (int8x16_t)v128, v116));
    }
    else
    {
LABEL_91:
      int v139 = 0;
      int v140 = 0;
      int v141 = 0;
      int v142 = 0;
    }
    if (*(void *)(a1 + 4744) >= (unint64_t)v108)
    {
LABEL_100:
      uint64_t v277 = v111;
      uint64_t v11 = sub_1BBA125DC((void **)(a1 + 4752), vaddvq_s32((int32x4_t)vbslq_s8(v107, v88, (int8x16_t)v85)));
      if (v11) {
        return v11;
      }
      uint64_t v11 = sub_1BBA12684((void **)(a1 + 4768), vaddvq_s32((int32x4_t)vbslq_s8(v107, v292, v291)));
      if (v11) {
        return v11;
      }
      int v145 = vaddvq_s32((int32x4_t)vbslq_s8(v107, (int8x16_t)v90, v286));
      uint64_t v11 = sub_1BBA8A288(a1 + 4784, (v145 + v72 + v139));
      if (v11) {
        return v11;
      }
      int v146 = vaddvq_s32((int32x4_t)vbslq_s8(v107, v91, (int8x16_t)v82));
      unsigned int v288 = 32 * v282;
      uint64_t v11 = sub_1BBA192A4((void **)(a1 + 4800), (v146 + 32 * v282 + v140));
      if (v11) {
        return v11;
      }
      int v147 = vaddvq_s32((int32x4_t)vbslq_s8(v107, v92, (int8x16_t)v81));
      uint64_t v11 = sub_1BBA12730((void **)(a1 + 4816), (v147 + v72 + v141), 0x10uLL);
      if (v11) {
        return v11;
      }
      int v148 = vaddvq_s32((int32x4_t)vbslq_s8(v107, v281, v280));
      if (v72)
      {
        uint64_t v11 = sub_1BBA12730((void **)(a1 + 4832), (v148 + v142 + 1), 0x10uLL);
        if (v11) {
          return v11;
        }
      }
      unsigned int v287 = v148;
      unsigned int v283 = v147;
      unsigned int v284 = v146;
      unsigned int v285 = v145;
      uint64_t v149 = *(void *)(a1 + 4736);
      *(void *)(a1 + 4584) = v149;
      *(void *)(v149 + 88) = *(void *)(a1 + 4752);
      *(void *)(*(void *)(a1 + 4584) + 96) = *(void *)(a1 + 4768);
      uint64_t v150 = (v279 * v279);
      uint64_t v151 = *(void *)(a1 + 4856);
      *(void *)(a1 + 4864) = v151;
      uint64_t v152 = *(void *)(v151 + 8);
      *(void *)(a1 + 4872) = v152;
      uint64_t v153 = v150 >> 1;
      *(void *)(a1 + 4880) = v151;
      uint64_t v154 = v152 + v150 + v153;
      *(void *)(a1 + 4888) = v152 + v150;
      *(void *)(a1 + 4896) = v151;
      uint64_t v155 = v154 + v150;
      *(void *)(a1 + 4904) = v154;
      *(void *)(a1 + 4912) = v151;
      *(void *)(v151 + 8) = v155 + v153;
      *(void *)(a1 + 4920) = v155;
      uint64_t v156 = *(void *)(a1 + 4584);
      *(void *)(v156 + 24) = v151;
      *(void *)(v156 + 32) = v152;
      uint64_t v157 = *(void *)(a1 + 4584);
      uint64_t v158 = *(void *)(a1 + 4888);
      *(void *)(v157 + 40) = *(void *)(a1 + 4880);
      *(void *)(v157 + 48) = v158;
      uint64_t v159 = *(void *)(a1 + 4584);
      uint64_t v160 = *(void *)(a1 + 4904);
      *(void *)(v159 + 56) = *(void *)(a1 + 4896);
      *(void *)(v159 + 64) = v160;
      uint64_t v161 = *(void *)(a1 + 4584);
      uint64_t v162 = *(void *)(a1 + 4920);
      *(void *)(v161 + 72) = *(void *)(a1 + 4912);
      *(void *)(v161 + 80) = v162;
      *(void *)(*(void *)(a1 + 4584) + 136) = *(void *)(a1 + 4784);
      *(void *)(*(void *)(*(void *)(a1 + 4584) + 136) + 56) = *(void *)(a1 + 4800);
      *(void *)(*(void *)(*(void *)(a1 + 4584) + 136) + 32) = *(void *)(a1 + 4816);
      if (v72) {
        *(void *)(*(void *)(*(void *)(a1 + 4584) + 136) + 8) = *(void *)(a1 + 4832);
      }
      unint64_t v163 = 0;
      char v164 = v290;
      do
      {
        char v297 = v164 - v163 - 2;
        unsigned int v165 = 1 << v297;
        uint64_t v166 = (1 << (2 * (v164 - v163)));
        uint64_t v167 = v166 >> 1;
        uint64_t v168 = v166 >> 4;
        uint64_t v169 = v166 >> 6;
        if (v163) {
          uint64_t v170 = 4;
        }
        else {
          uint64_t v170 = 1;
        }
        uint64_t v171 = a1 + 8 * v163;
        *(void *)(*(void *)(v171 + 4584) + 152) = *(void *)(a1 + 4680);
        *(void *)(*(void *)(v171 + 4584) + 160) = *(void *)(a1 + 4688);
        int v172 = v170 + 1;
        uint64_t v294 = (v169 * (v170 + 1));
        *(void *)(*(void *)(v171 + 4584) + 104) = *(void *)(*(void *)(v171 + 4584) + 88)
                                                      + 2 * v294;
        *(void *)(*(void *)(v171 + 4584) + 112) = *(void *)(*(void *)(v171 + 4584) + 104)
                                                      + (v165 & 0xFFFFFFFE);
        uint64_t v293 = (v168 * (v170 + 1));
        *(void *)(*(void *)(v171 + 4584) + 120) = *(void *)(*(void *)(v171 + 4584) + 96)
                                                      + 16 * v293;
        uint64_t v296 = (1 << (v164 - v163 - 2));
        *(void *)(*(void *)(v171 + 4584) + 128) = *(void *)(*(void *)(v171 + 4584) + 120) + 16 * v165 + 32;
        uint64_t v173 = *(void *)(*(void *)(v171 + 4584) + 136);
        uint64_t v174 = *(void *)(a1 + 4856);
        uint64_t v175 = *(void *)(v174 + 8);
        *(void *)(v173 + 80) = v174;
        *(void *)(v173 + 88) = v175;
        uint64_t v176 = *(void *)(*(void *)(v171 + 4584) + 136);
        *(void *)(v174 + 8) = v175 + v166 + v167;
        *(void *)(v176 + 96) = v174;
        *(void *)(v176 + 104) = v175 + v166;
        signed int v177 = *(void **)(*(void *)(v171 + 4584) + 136);
        uint64_t v178 = v177[7] + 2 * v166;
        uint64_t v179 = v166 >> 2;
        v177[8] = v178;
        v177[9] = v178 + 2 * v179;
        uint64_t v180 = v177[4] + v168;
        v177[5] = v180;
        v177[6] = v180 + v169;
        if (v72)
        {
          uint64_t v181 = v177[1] + v168;
          v177[2] = v181;
          v177[3] = v181 + v169;
        }
        int v182 = (uint64_t *)(v171 + 4584);
        int v183 = v167 | v166;
        uint64_t v184 = v168 | (v166 >> 5);
        uint64_t v185 = 368;
        uint64_t v186 = 2 * v169;
        uint64_t v187 = 16 * v168;
        uint64_t v188 = 136;
        unsigned int v189 = v167 | v166;
        uint64_t v190 = v184;
        uint64_t v191 = v170;
        uint64_t v192 = a1 + 4456 + 32 * v163;
        do
        {
          int v193 = (void *)(*v182 + v185);
          *(void *)uint64_t v192 = v193 - 19;
          *int v193 = *(void *)(a1 + 4680);
          *(void *)(*(void *)v192 + 160) = *(void *)(a1 + 4688);
          *(void *)(*(void *)v192 + 88) = *(void *)(*v182 + 88) + v186;
          *(void *)(*(void *)v192 + 104) = *(void *)(*v182 + 104);
          *(void *)(*(void *)v192 + 112) = *(void *)(*v182 + 112);
          *(void *)(*(void *)v192 + 96) = *(void *)(*v182 + 96) + v187;
          *(void *)(*(void *)v192 + 120) = *(void *)(*v182 + 120);
          *(void *)(*(void *)v192 + 128) = *(void *)(*v182 + 128);
          *(void *)(*(void *)v192 + 136) = *(void *)(*v182 + 136) + v188;
          *(void *)(*(void *)(*(void *)v192 + 136) + 56) = *(void *)(*(void *)(*v182 + 136) + 56)
                                                                   + 2 * v189;
          *(void *)(*(void *)(*(void *)v192 + 136) + 32) = *(void *)(*(void *)(*v182 + 136) + 32) + v190;
          if (v72) {
            *(void *)(*(void *)(*(void *)v192 + 136) + 8) = *(void *)(*(void *)(*v182 + 136) + 8) + v190;
          }
          uint64_t v194 = *(void *)(*(void *)v192 + 136);
          uint64_t v195 = *(void *)(a1 + 4856);
          uint64_t v196 = *(void *)(v195 + 8);
          *(void *)(v194 + 80) = v195;
          *(void *)(v194 + 88) = v196;
          uint64_t v197 = *(void *)(*(void *)v192 + 136);
          *(void *)(v195 + 8) = v196 + v166 + v167;
          *(void *)(v197 + 96) = v195;
          *(void *)(v197 + 104) = v196 + v166;
          uint64_t v198 = *(void **)(*(void *)v192 + 136);
          uint64_t v199 = v198[7] + 2 * v166;
          v198[8] = v199;
          v198[9] = v199 + 2 * v179;
          uint64_t v200 = v198[4] + v168;
          v198[5] = v200;
          v198[6] = v200 + v169;
          if (v72)
          {
            uint64_t v201 = v198[1] + v168;
            v198[2] = v201;
            v198[3] = v201 + v169;
          }
          v192 += 8;
          v190 += v184;
          v189 += v183;
          v188 += 136;
          v187 += 16 * v168;
          v186 += 2 * v169;
          v185 += 216;
          --v191;
        }
        while (v191);
        uint64_t v202 = *v182;
        uint64_t v203 = *(void *)(*v182 + 136) + 136 * v170;
        uint64_t v204 = a1 + 8 * v163 + 4616;
        *(void *)uint64_t v204 = v203 + 136;
        *(void *)(v203 + 192) = *(void *)(*(void *)(v202 + 136) + 56) + 2 * (v183 * v172);
        uint64_t v205 = (v184 * v172);
        *(void *)(*(void *)v204 + 32) = *(void *)(*(void *)(*v182 + 136) + 32) + v205;
        if (v72) {
          *(void *)(*(void *)v204 + 8) = *(void *)(*(void *)(*v182 + 136) + 8) + v205;
        }
        uint64_t v206 = *(void *)v204;
        uint64_t v207 = *(void *)(a1 + 4856);
        uint64_t v208 = *(void *)(v207 + 8);
        *(void *)(v206 + 80) = v207;
        *(void *)(v206 + 88) = v208;
        uint64_t v209 = *(void *)v204;
        *(void *)(v207 + 8) = v208 + v166 + v167;
        *(void *)(v209 + 96) = v207;
        *(void *)(v209 + 104) = v208 + v166;
        uint64_t v210 = *(void **)v204;
        uint64_t v211 = v210[7] + 2 * v166;
        v210[8] = v211;
        v210[9] = v211 + 2 * v179;
        uint64_t v212 = v210[4] + v168;
        v210[5] = v212;
        v210[6] = v212 + v169;
        char v164 = v290;
        if (v72)
        {
          uint64_t v213 = v210[1] + v168;
          v210[2] = v213;
          v210[3] = v213 + v169;
        }
        if (v163 >= v289)
        {
          ++v163;
        }
        else
        {
          uint64_t v214 = *v182;
          uint64_t v215 = *v182 + 216 * v170;
          ++v163;
          uint64_t v216 = a1 + 8 * v163;
          *(void *)(v216 + 4584) = v215 + 216;
          *(void *)(v215 + 304) = *(void *)(v214 + 88) + 2 * v294 + 2 * v296;
          *(void *)(*(void *)(v216 + 4584) + 96) = *(void *)(*v182 + 96)
                                                       + 16 * v293
                                                       + 16 * ((2 << v297) + 4);
          *(void *)(*(void *)(v216 + 4584) + 136) = *(void *)(*v182 + 136) + 136 * (v170 | 2);
          *(void *)(*(void *)(*(void *)(v216 + 4584) + 136) + 56) = *(void *)(*(void *)(*v182 + 136) + 56)
                                                                            + 2 * v183 * (v170 | 2);
          uint64_t v217 = v184 * (v170 | 2);
          *(void *)(*(void *)(*(void *)(v216 + 4584) + 136) + 32) = *(void *)(*(void *)(*v182 + 136) + 32)
                                                                            + v217;
          if (v72) {
            *(void *)(*(void *)(*(void *)(v216 + 4584) + 136) + 8) = *(void *)(*(void *)(*v182 + 136) + 8)
          }
                                                                             + v217;
        }
      }
      while (v163 != v289 + 1);
      if (*(unsigned char *)(*(void *)(a1 + 952) + 352))
      {
        uint64_t v218 = *(void *)(a1 + 4784) + 136 * v285;
        *(void *)(a1 + 376) = v218;
        *(void *)(v218 + 56) = *(void *)(a1 + 4800) + 2 * v284;
        *(void *)(*(void *)(a1 + 376) + 64) = *(void *)(*(void *)(a1 + 376) + 56) + v288;
        *(void *)(*(void *)(a1 + 376) + 72) = *(void *)(*(void *)(a1 + 376) + 64);
        *(void *)(*(void *)(a1 + 376) + 32) = *(void *)(a1 + 4816) + v283;
        *(void *)(*(void *)(a1 + 376) + 40) = *(void *)(*(void *)(a1 + 376) + 32);
        *(void *)(*(void *)(a1 + 376) + 48) = *(void *)(*(void *)(a1 + 376) + 32);
        *(void *)(*(void *)(a1 + 376) + 8) = *(void *)(a1 + 4832) + v287;
        *(void *)(*(void *)(a1 + 376) + 16) = *(void *)(*(void *)(a1 + 376) + 8);
        *(void *)(*(void *)(a1 + 376) + 24) = *(void *)(*(void *)(a1 + 376) + 8);
        **(unsigned char **)(a1 + 376) = 4;
        *(unsigned char *)(*(void *)(a1 + 376) + 1) = 4;
        uint64_t v219 = *(void *)(a1 + 376);
        uint64_t v220 = *(void *)(a1 + 4856);
        uint64_t v221 = *(void *)(v220 + 8);
        *(void *)(v220 + 8) = v221 + v288;
        *(void *)(v219 + 80) = v220;
        *(void *)(v219 + 88) = v221;
        *(_OWORD *)(v219 + 96) = *(_OWORD *)(v219 + 80);
      }
      uint64_t v222 = *(void *)(a1 + 1880);
      if (*(unsigned char *)(v222 + 245) || *(unsigned char *)(v222 + 244))
      {
        uint64_t v223 = *(void *)(a1 + 4784) + 136 * v285 + 136 * v72;
        uint64_t v224 = a1 + 32 * v277;
        *(void *)(v224 + 216) = v223;
        uint64_t v225 = v224 + 216;
        *(void *)(v223 + 56) = *(void *)(a1 + 4800) + 2 * v284 + 2 * v288;
        *(void *)(*(void *)v225 + 32) = *(void *)(a1 + 4816) + v283 + v72;
        if (v72) {
          *(void *)(*(void *)v225 + 8) = *(void *)(a1 + 4832) + v287 + v72;
        }
        if (v277 < v278)
        {
          uint64_t v226 = v277;
          while (1)
          {
            int v227 = v290 - v226;
            unsigned int v228 = 2 * (v290 - v226);
            uint64_t v229 = (1 << (2 * (v290 - v226)));
            int v230 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2012);
            unsigned int v231 = v229 >> 5;
            if (v228 < 5) {
              unsigned int v231 = 2;
            }
            if (v226 == v277) {
              unsigned int v232 = 1;
            }
            else {
              unsigned int v232 = 4;
            }
            if (v227 == v230) {
              uint64_t v233 = (2 << (2 * (v290 - v226)));
            }
            else {
              uint64_t v233 = v229 >> 1;
            }
            uint64_t v234 = v229 >> 4;
            BOOL v235 = v227 == v230 || v226 == v277;
            uint64_t v236 = a1 + 32 * v226;
            char v238 = *(unsigned char **)(v236 + 216);
            int v237 = (unsigned char **)(v236 + 216);
            *char v238 = 1 << v227;
            unsigned int v239 = (v227 - 1);
            if (v239 <= *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2012)) {
              LOBYTE(v239) = *(unsigned char *)(*(void *)(a1 + 1880) + 2012);
            }
            (*v237)[1] = 1 << v239;
            int v240 = *v237;
            uint64_t v241 = *(void *)(a1 + 4856);
            uint64_t v242 = *(void *)(v241 + 8);
            v240[10] = v241;
            v240[11] = v242;
            int v243 = *v237;
            *(void *)(v241 + 8) = v242 + v229 + v233;
            v243[12] = v241;
            v243[13] = v242 + v229;
            uint64_t v244 = *v237;
            uint64_t v245 = *((void *)*v237 + 7) + 2 * v229;
            v244[8] = v245;
            v244[9] = v245 + v233;
            uint64_t v246 = v244[4] + v234;
            uint64_t v247 = v231 >> 1;
            v244[5] = v246;
            v244[6] = v246 + v247;
            if (v72)
            {
              uint64_t v248 = v244[1] + v234;
              v244[2] = v248;
              v244[3] = v248 + v247;
            }
            if (v226 != v277) {
              break;
            }
LABEL_164:
            if (v278 - 1 <= v226)
            {
              ++v226;
            }
            else
            {
              BOOL v21 = v226 == v277;
              int v266 = *v237;
              uint64_t v267 = (uint64_t)&(*v237)[136 * v232];
              ++v226;
              uint64_t v268 = a1 + 32 * v226;
              *(void *)(v268 + 216) = v267;
              uint64_t v269 = v268 + 216;
              char v270 = !v21;
              uint64_t v271 = v266[7] + 2 * (v232 << v228);
              if (v235) {
                char v272 = 0;
              }
              else {
                char v272 = 2;
              }
              *(void *)(v267 + 56) = v271 + 2 * (v233 << v272);
              unint64_t v273 = (v234 << (2 * v270)) + (unint64_t)(v231 << v272);
              *(void *)(*(void *)v269 + 32) = *((void *)*v237 + 4) + v273;
              if (v72) {
                *(void *)(*(void *)v269 + 8) = *((void *)*v237 + 1) + v273;
              }
            }
            if (v278 <= v226) {
              goto LABEL_175;
            }
          }
          uint64_t v249 = 0;
          uint64_t v250 = a1 + 32 * v226;
          unsigned int v251 = v231;
          while (1)
          {
            uint64_t v252 = v250 + v249;
            uint64_t v253 = *(void *)(v250 + v249 + 216);
            *(void *)(v250 + v249 + 224) = v253 + 136;
            *(unsigned char *)(v253 + 136) = **v237;
            *(unsigned char *)(*(void *)(v250 + v249 + 224) + 1) = (*v237)[1];
            uint64_t v254 = *(void *)(v250 + v249 + 224);
            uint64_t v255 = *(void *)(a1 + 4856);
            uint64_t v256 = *(void *)(v255 + 8);
            *(void *)(v255 + 8) = v256 + v229;
            *(void *)(v254 + 80) = v255;
            *(void *)(v254 + 88) = v256;
            *(void *)(*(void *)(v250 + v249 + 224) + 56) = *(void *)(*(void *)(v250 + v249 + 216) + 56)
                                                               + 2 * v229
                                                               + 2 * v233;
            *(void *)(*(void *)(v250 + v249 + 224) + 32) = *(void *)(*(void *)(v250 + v249 + 216) + 32)
                                                               + v234
                                                               + v251;
            if (v72) {
              *(void *)(*(void *)(v252 + 224) + 8) = *(void *)(*(void *)(v252 + 216) + 8) + v234 + v251;
            }
            if (v235)
            {
              *(_OWORD *)(*(void *)(v252 + 224) + 96) = *((_OWORD *)*v237 + 6);
              *(void *)(*(void *)(v252 + 224) + 64) = *((void *)*v237 + 8);
              *(void *)(*(void *)(v252 + 224) + 72) = *((void *)*v237 + 9);
              *(void *)(*(void *)(v252 + 224) + 40) = *((void *)*v237 + 5);
              *(void *)(*(void *)(v252 + 224) + 48) = *((void *)*v237 + 6);
              LODWORD(v233) = 0;
              unsigned int v251 = 0;
              if (v72)
              {
                *(void *)(*(void *)(v252 + 224) + 16) = *((void *)*v237 + 2);
                uint64_t v257 = *((void *)*v237 + 3);
                uint64_t v258 = *(void **)(v252 + 224);
LABEL_162:
                v258[3] = v257;
              }
            }
            else
            {
              uint64_t v259 = *(void *)(v252 + 224);
              uint64_t v260 = *(void *)(a1 + 4856);
              uint64_t v261 = *(void *)(v260 + 8);
              *(void *)(v260 + 8) = v261 + v233;
              *(void *)(v259 + 96) = v260;
              *(void *)(v259 + 104) = v261;
              uint64_t v258 = *(void **)(v252 + 224);
              uint64_t v262 = v258[7] + 2 * v229;
              v258[8] = v262;
              v258[9] = v262 + (v233 & 0xFFFFFFFE);
              uint64_t v263 = v258[4] + v234;
              uint64_t v264 = v251 >> 1;
              v258[5] = v263;
              v258[6] = v263 + v264;
              if (v72)
              {
                uint64_t v265 = v258[1] + v234;
                v258[2] = v265;
                uint64_t v257 = v265 + v264;
                goto LABEL_162;
              }
            }
            v249 += 8;
            if (v249 == 24) {
              goto LABEL_164;
            }
          }
        }
LABEL_175:
        int v274 = (void *)(a1 + 32 * v277);
        v274[28] = 0;
        v274[29] = 0;
        v274[30] = 0;
      }
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 4856) + 16))(*(void *)(a1 + 4856));
      if (v11) {
        return v11;
      }
      uint64_t v275 = *(void *)(a1 + 4584);
      *(_OWORD *)(a1 + 4704) = *(_OWORD *)(v275 + 104);
      *(_OWORD *)(a1 + 4720) = *(_OWORD *)(v275 + 120);
      *(void *)(a1 + 4472) = 0;
      *(void *)(a1 + 4480) = 0;
      *(void *)(a1 + 4464) = 0;
      goto LABEL_42;
    }
    if (v108 <= 0x7684B)
    {
      uint64_t v276 = v111;
      sub_1BBA8A3B4(a1 + 4736);
      if (!malloc_type_posix_memalign((void **)(a1 + 4736), 0x10uLL, 216 * v108, 0x10A0040DC34BAECuLL))
      {
        if (*v68)
        {
          uint64_t v143 = 0;
          do
          {
            uint64_t v144 = *v68 + v143;
            *(_OWORD *)(v144 + 72) = 0uLL;
            *(_OWORD *)(v144 + 56) = 0uLL;
            *(_OWORD *)(v144 + 40) = 0uLL;
            *(_OWORD *)(v144 + 24) = 0uLL;
            v143 += 216;
          }
          while (216 * v108 != v143);
          *(void *)(a1 + 4744) = v108;
          uint64_t v111 = v276;
          goto LABEL_100;
        }
      }
    }
    return 4294954392;
  }
LABEL_42:
  int v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 976) + 16))(*(void *)(a1 + 976));
  *(unsigned char *)(a1 + 789) = v33;
  if (v33)
  {
    uint64_t v34 = *(void *)(a1 + 976);
    uint64_t v5 = v34 + 8;
    int v35 = (int *)(v34 + 12);
  }
  else
  {
    int v35 = (int *)(v5 + 4);
  }
  int v47 = *v35;
  *(_DWORD *)(a1 + 792) = *(_DWORD *)v5;
  *(_DWORD *)(a1 + 796) = v47;
  uint64_t v48 = *(void *)(a1 + 952);
  if (*(unsigned char *)(v48 + 256) && *(unsigned __int8 *)(*(void *)(a1 + 1872) + 10) <= 1u) {
    int v49 = *(unsigned __int8 *)(a1 + 192) + 1;
  }
  else {
    int v49 = 0;
  }
  unint64_t v50 = 0;
  *(_DWORD *)(a1 + 200) = v49;
  BOOL v21 = (*(unsigned char *)(v48 + 125) & 0xFB) == 0;
  int v51 = sub_1BBA8A09C;
  if (v21) {
    int v51 = sub_1BBA8A18C;
  }
  *(void *)(a1 + 968) = v51;
  uint64_t v52 = *(void *)(a1 + 1880);
  uint64_t v53 = a1 + 4456;
  do
  {
    uint64_t v54 = 0;
    unsigned int v55 = *(unsigned __int8 *)(v52 + 2013);
    unsigned int v56 = v55 >> v50;
    uint64_t v57 = a1 + 8 * v50;
    uint64_t v58 = *(void *)(v57 + 4584);
    *(unsigned char *)(v58 + 1) = v55;
    *(unsigned char *)uint64_t v58 = v55 >> v50;
    **(unsigned char **)(v58 + 136) = v55 >> v50;
    int v59 = v55 >> v50 >> 1;
    int v60 = 1 << *(unsigned char *)(*(void *)(a1 + 1880) + 2012);
    if (v59 > v60) {
      LOBYTE(v60) = v59;
    }
    *(unsigned char *)(*(void *)(*(void *)(v57 + 4584) + 136) + 1) = v60;
    **(unsigned char **)(v57 + 4616) = v56;
    int v61 = 1 << *(unsigned char *)(*(void *)(a1 + 1880) + 2012);
    if (v59 > v61) {
      LOBYTE(v61) = v59;
    }
    unsigned int v62 = (unsigned char **)(v57 + 4616);
    *(unsigned char *)(*(void *)(v57 + 4616) + 1) = v61;
    do
    {
      uint64_t v63 = *(void *)(v53 + v54);
      if (v63)
      {
        *(unsigned char *)(v63 + 1) = *(unsigned char *)(*(void *)(a1 + 1880) + 2013);
        *(unsigned char *)uint64_t v63 = v56;
        **(unsigned char **)(v63 + 136) = **v62;
        *(unsigned char *)(*(void *)(*(void *)(v53 + v54) + 136) + 1) = (*v62)[1];
      }
      v54 += 8;
    }
    while (v54 != 32);
    uint64_t v52 = *(void *)(a1 + 1880);
    v53 += 32;
  }
  while (v50++ < *(unsigned __int8 *)(v52 + 241));
  uint64_t v11 = 0;
  int v65 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 172) = *(void *)v6;
  *(_DWORD *)(a1 + 180) = v65;
  *(void *)(a1 + 160) = 0xFFFFFFFFLL;
  return v11;
}

uint64_t sub_1BBA8A09C(int a1, int a2, char a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 960);
  int v5 = *(_DWORD *)(v4 + 4);
  unsigned int v6 = v5 - 3;
  if ((v5 - 3) > 3)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *(char **)(v4 + 8 * v6 + 1488);
    if (v7) {
      v7 += (((*(_DWORD *)(v4 + 16) + ~(-1 << v5)) & (-1 << v5)) >> v5) * (a2 >> v5) + (uint64_t)(a1 >> v5);
    }
  }
  int v8 = 1 << (*(unsigned char *)(*(void *)(*(void *)(a4 + 1872) + 1368) + 2009) - a3);
  int v9 = *(_DWORD *)(a4 + 20) - a2;
  if (v8 < v9) {
    int v9 = 1 << (*(unsigned char *)(*(void *)(*(void *)(a4 + 1872) + 1368) + 2009) - a3);
  }
  uint64_t v10 = (v9 >> v5);
  if ((int)v10 < 1) {
    return 51;
  }
  uint64_t v11 = 0;
  if (v8 >= *(_DWORD *)(a4 + 16) - a1) {
    int v8 = *(_DWORD *)(a4 + 16) - a1;
  }
  uint64_t v12 = (v8 >> v5);
  uint64_t v13 = *(int *)(v4 + 4 * (int)v6 + 1520);
  uint64_t result = 51;
  do
  {
    uint64_t v15 = v7;
    uint64_t v16 = v12;
    if ((int)v12 >= 1)
    {
      do
      {
        int v18 = *v15++;
        unsigned int v17 = v18;
        if ((int)result >= v18) {
          uint64_t result = v17;
        }
        else {
          uint64_t result = result;
        }
        --v16;
      }
      while (v16);
    }
    ++v11;
    v7 += v13;
  }
  while (v11 != v10);
  return result;
}

uint64_t sub_1BBA8A18C(int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 1872);
  uint64_t v5 = *(void *)(a4 + 960);
  int v6 = *(_DWORD *)(v5 + 1304);
  uint64_t v7 = *(char *)(v4 + 621);
  if (v6)
  {
    uint64_t v10 = v4 + 79088;
    uint64_t v11 = *(void *)(v4 + 1368);
    int v12 = *(unsigned __int8 *)(v11 + 2009) - a3;
    uint64_t v13 = *(void *)(v4 + 79088);
    int v14 = *(char *)(v13 + 126);
    int v15 = sub_1BBA8290C(*(void *)(a4 + 960), a1, a2, *(unsigned char *)(v11 + 2009) - a3, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(char *)(v13 + 125));
    if (*(unsigned char *)(v5 + 13)) {
      uint64_t v7 = sub_1BBA824A0(v5, a1, a2, v12) + v7;
    }
    int v16 = sub_1BBA82D0C(v7, -*(unsigned __int8 *)(v11 + 2001), v15, v6, v14);
    LODWORD(v7) = v16;
    uint64_t v17 = *(void *)(*(void *)(v10 + 128) + 2712);
    if (v17)
    {
      int v18 = *(_DWORD *)(v17 + 284) + 3;
      if (v18 >= v16) {
        LODWORD(v7) = v16;
      }
      else {
        LODWORD(v7) = v18;
      }
    }
  }
  if ((int)v7 >= 51) {
    return 51;
  }
  else {
    return v7;
  }
}

uint64_t sub_1BBA8A288(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) >= a2) {
    return 0;
  }
  if (a2 > 0xBC3C3) {
    return 4294954392;
  }
  sub_1BBA8A344(a1);
  if (malloc_type_posix_memalign((void **)a1, 0x10uLL, 136 * a2, 0x103004000029181uLL) || !*(void *)a1) {
    return 4294954392;
  }
  uint64_t v5 = 8;
  unint64_t v6 = a2;
  do
  {
    uint64_t v7 = *(void *)a1 + v5;
    *(void *)(v7 + 96) = 0;
    *(_OWORD *)(v7 + 64) = 0uLL;
    *(_OWORD *)(v7 + 80) = 0uLL;
    *(_OWORD *)(v7 + 32) = 0uLL;
    *(_OWORD *)(v7 + 48) = 0uLL;
    *(_OWORD *)uint64_t v7 = 0uLL;
    *(_OWORD *)(v7 + 16) = 0uLL;
    v5 += 136;
    --v6;
  }
  while (v6);
  uint64_t result = 0;
  *(void *)(a1 + 8) = a2;
  return result;
}

void sub_1BBA8A344(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    if (*(void *)(a1 + 8))
    {
      unint64_t v3 = 0;
      uint64_t v4 = 8;
      do
      {
        uint64_t v5 = *(void *)a1 + v4;
        *(void *)(v5 + 64) = 0;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)(v5 + 48) = 0uLL;
        *(_OWORD *)uint64_t v5 = 0uLL;
        *(_OWORD *)(v5 + 16) = 0uLL;
        ++v3;
        v4 += 136;
      }
      while (v3 < *(void *)(a1 + 8));
      int v2 = *(void **)a1;
    }
    free(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1BBA8A3B4(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    if (*(void *)(a1 + 8))
    {
      unint64_t v3 = 0;
      uint64_t v4 = 88;
      do
      {
        uint64_t v5 = (_OWORD *)(*(void *)a1 + v4);
        v5[3] = 0uLL;
        v5[4] = 0uLL;
        v5[1] = 0uLL;
        v5[2] = 0uLL;
        *uint64_t v5 = 0uLL;
        ++v3;
        v4 += 216;
      }
      while (v3 < *(void *)(a1 + 8));
      int v2 = *(void **)a1;
    }
    free(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

_WORD *sub_1BBA8A424(_WORD *result, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, int a7, int a8, int a9, char *__dst)
{
  uint64_t v10 = (uint64_t)result;
  if (!a8)
  {
    uint64_t v28 = (8 << a9) | 2;
    int v29 = 128 << *(unsigned char *)(*((void *)result + 235) + 195);
    BOOL v30 = __dst - 4;
    do
    {
      *(_WORD *)BOOL v30 = v29;
      v30 += 2;
      --v28;
    }
    while (v28);
    return result;
  }
  uint64_t v213 = (char *)result + 4697;
  int v221 = a8;
  uint64_t v220 = a5;
  if (!*((unsigned char *)result + 4697) && (*((_DWORD *)result + 1107) == a2 || *((_DWORD *)result + 1108) == a3))
  {
    uint64_t result = (_WORD *)sub_1BBA8B344((uint64_t)result, 1);
    a5 = v220;
    a8 = v221;
  }
  int v13 = 4 << a9;
  int v14 = 2 << (a9 + 1);
  int v15 = *(_DWORD *)(v10 + 16);
  int v16 = v14 + a2 - v15;
  int v17 = v14 + a3 - *(_DWORD *)(v10 + 20);
  int v212 = a8 & 0x1E000;
  BOOL v18 = (a8 & 0x1E000) != 0;
  if (v16 <= 1) {
    BOOL v18 = 0;
  }
  int v19 = a8 & 0xF;
  BOOL v217 = v19 != 0;
  BOOL v20 = v17 > 1 && (a8 & 0xF) != 0;
  if (v18 || v20)
  {
    int v21 = *(_DWORD *)(v10 + 4428);
    if (v18)
    {
      int v22 = *(_DWORD *)(v10 + 4432);
      int v23 = a3 - v22;
      if (a3 != v22)
      {
        uint64_t v24 = (v16 >> 1);
        int v25 = v15 - 2;
        int v26 = a3 - 1;
        int v208 = a8 & 0xF;
        if (*(unsigned char *)(v10 + 8) && *((_DWORD *)a5 + 2) == a3)
        {
          uint64_t v27 = (uint64_t *)(v10 + 4456);
        }
        else
        {
          int v31 = v25 - v21;
          int v32 = v26 - v22;
          int v33 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_26:
            int v36 = -1;
          }
          else
          {
            int v34 = v33 - a4;
            while ((a2 - v21) >> v34 != v31 >> v34 || v23 >> v34 != v32 >> v34)
            {
              BOOL v35 = v34++ < v33;
              if (!v35) {
                goto LABEL_26;
              }
            }
            int v36 = v33 - v34;
            if (v33 - v34 < a4) {
              ++v36;
            }
          }
          uint64_t v27 = (uint64_t *)(v10
                          + 32 * v36
                          + 8
                          * ((v31 >> (v33 - v36)) & 1 | (2 * ((v32 >> (v33 - v36)) & 1)))
                          + 4456);
        }
        uint64_t v37 = *v27;
        uint64_t v38 = (_DWORD *)(*(uint64_t (**)(void, unint64_t))(**(void **)(*(void *)(v37 + 136) + 96)
                                                                            + 24))(*(void *)(*(void *)(v37 + 136) + 96), *(void *)(*(void *)(v37 + 136) + 104)+ (v25 - *(_DWORD *)(v37 + 4))+ 2* *(unsigned __int8 *)(*(void *)(v37 + 136) + 1)* (unint64_t)((v26 - *(_DWORD *)(v37 + 8)) >> 1));
        int v40 = *v38;
        uint64_t result = v38 + 1;
        int v39 = v40;
        LOWORD(a8) = v221;
        a5 = v220;
        int v19 = v208;
        do
        {
          *(_DWORD *)uint64_t result = v39;
          result += 2;
          --v24;
        }
        while (v24);
      }
    }
    if (a2 != v21 && v20)
    {
      int v42 = a2 - 2;
      int v43 = *(_DWORD *)(v10 + 20) - 1;
      if (*(unsigned char *)(v10 + 8) && *((_DWORD *)a5 + 1) == a2)
      {
        uint64_t v44 = v10 + 4456;
      }
      else
      {
        int v45 = *(_DWORD *)(v10 + 4428);
        int v46 = *(_DWORD *)(v10 + 4432);
        int v47 = v42 - v45;
        int v48 = v43 - v46;
        int v49 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
        if (a4 < 0)
        {
LABEL_44:
          int v53 = -1;
        }
        else
        {
          int v50 = a2 - v45;
          int v51 = a3 - v46;
          int v52 = v49 - a4;
          while (v50 >> v52 != v47 >> v52 || v51 >> v52 != v48 >> v52)
          {
            BOOL v35 = v52++ < v49;
            if (!v35) {
              goto LABEL_44;
            }
          }
          int v53 = v49 - v52;
          if (v49 - v52 < a4) {
            ++v53;
          }
        }
        uint64_t v44 = v10
            + 32 * v53
            + 8 * ((v47 >> (v49 - v53)) & 1 | (2 * ((v48 >> (v49 - v53)) & 1)))
            + 4456;
      }
      uint64_t result = 0;
      uint64_t v54 = (v17 >> 1);
      unsigned int v55 = *(unsigned __int8 **)v44;
      uint64_t v56 = *(void *)(*(void *)v44 + 136);
      uint64_t v57 = *(unsigned __int8 *)(v56 + 1);
      unsigned int v58 = v42 - *((_DWORD *)v55 + 1);
      if ((v58 & 0x80000000) == 0)
      {
        unsigned int v59 = v43 - *((_DWORD *)v55 + 2);
        if ((v59 & 0x80000000) == 0)
        {
          unsigned int v60 = *v55;
          if (v58 >= v60 || v59 >= v60)
          {
            uint64_t result = 0;
          }
          else
          {
            int v62 = v19;
            uint64_t result = (_WORD *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v56 + 96) + 24))(*(void *)(v56 + 96), *(void *)(v56 + 104) + v58 + (2 * v57) * (unint64_t)(v59 >> 1));
            int v19 = v62;
            a5 = v220;
            LOWORD(a8) = v221;
          }
        }
      }
      uint64_t v63 = 2 * v57;
      do
      {
        *(_DWORD *)&result[v63] = *(_DWORD *)result;
        v63 += 2 * v57;
        --v54;
      }
      while (v54);
    }
  }
  uint64_t v64 = &__dst[2 * v13];
  uint64_t v65 = *(void *)(v10 + 1880);
  uint64_t v211 = *(unsigned __int8 *)(v65 + 2013);
  int v66 = *(_DWORD *)(v10 + 4428);
  uint64_t v216 = *(void *)(v10 + 4672);
  int v218 = *(_DWORD *)(v10 + 4432);
  int v219 = a3 - v218;
  int v67 = a2 - v66;
  int v209 = v66;
  int v210 = a2 - v66;
  if (a2 == v66)
  {
    BOOL v68 = (a8 & 0xF0) != 0;
    int v69 = v212;
    if ((a8 & 0xF0) != 0)
    {
      int v70 = v19;
      uint64_t result = memcpy(__dst, (const void *)(v216 + 2 * v219), 2 * (2 << a9));
      int v19 = v70;
      a5 = v220;
      LOWORD(a8) = v221;
    }
    if (v19)
    {
      uint64_t result = memcpy(&__dst[2 * (2 << a9)], (const void *)(v216 + 2 * v219 + 2 * (2 << a9)), 2 * (2 << a9));
      a5 = v220;
      LOWORD(a8) = v221;
      BOOL v217 = 1;
    }
    else
    {
      BOOL v217 = 0;
    }
  }
  else
  {
    if (v19)
    {
      uint64_t v71 = v13;
      int v72 = a2 - 2;
      int v73 = 2 << a9;
      int v74 = (2 << a9) + a3;
      int v75 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(v10 + 8) && v75 == a2)
      {
        unsigned int v76 = 0;
        int32x4_t v77 = *(unsigned __int8 **)(v10 + 4456);
      }
      else
      {
        if (v75 > v72
          || (int v78 = *a5, v75 + v78 <= v72)
          || (int v79 = *((_DWORD *)a5 + 2), v79 > v74)
          || (v80 = v79 + v78, int32x4_t v77 = a5, v80 <= v74))
        {
          int v81 = v72 - v209;
          int v82 = v74 - v218;
          int v83 = *(unsigned __int8 *)(v65 + 2009);
          if (a4 < 0)
          {
LABEL_75:
            int v85 = -1;
          }
          else
          {
            int v84 = v83 - a4;
            while (v67 >> v84 != v81 >> v84 || v219 >> v84 != v82 >> v84)
            {
              BOOL v35 = v84++ < v83;
              if (!v35) {
                goto LABEL_75;
              }
            }
            int v85 = v83 - v84;
            if (v85 < a4) {
              ++v85;
            }
          }
          int32x4_t v77 = *(unsigned __int8 **)(v10
                                    + 32 * v85
                                    + 8
                                    * ((v81 >> (v83 - v85)) & 1 | (2
                                                                               * ((v82 >> (v83 - v85)) & 1)))
                                    + 4456);
        }
        unsigned int v76 = a6;
        if (v77 != a5) {
          unsigned int v76 = 0;
        }
      }
      uint64_t result = 0;
      uint64_t v86 = *(unsigned __int8 *)(*((void *)v77 + 17) + 1);
      unsigned int v87 = v72 - *((_DWORD *)v77 + 1);
      if ((v87 & 0x80000000) == 0)
      {
        unsigned int v88 = v74 - *((_DWORD *)v77 + 2);
        if ((v88 & 0x80000000) == 0)
        {
          unsigned int v89 = *v77;
          if (v87 >= v89 || v88 >= v89)
          {
            uint64_t result = 0;
          }
          else
          {
            uint64_t v91 = *(void *)&v77[8 * v76 + 136];
            uint64_t result = (_WORD *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v91 + 96) + 24))(*(void *)(v91 + 96), *(void *)(v91 + 104)+ v87+ *(unsigned __int8 *)(v91 + 1) * (unint64_t)(v88 & 0xFFFFFFFE));
            a5 = v220;
            LOWORD(a8) = v221;
          }
        }
      }
      if (v73 < (int)v71)
      {
        uint64_t v92 = v73;
        int32x4_t v93 = result + 1;
        do
        {
          int32x4_t v94 = &__dst[2 * v92];
          *(_WORD *)int32x4_t v94 = *(v93 - 1);
          *((_WORD *)v94 + 1) = *v93;
          v92 += 2;
          v93 += 2 * v86;
        }
        while (v92 < v71);
      }
    }
    if ((a8 & 0xF0) != 0)
    {
      int v95 = a2 - 2;
      int v96 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(v10 + 8)) {
        BOOL v97 = v96 == a2;
      }
      else {
        BOOL v97 = 0;
      }
      if (v97)
      {
        unsigned int v108 = 0;
        unsigned long long v101 = *(unsigned __int8 **)(v10 + 4456);
        int v69 = v212;
      }
      else
      {
        int v69 = v212;
        if (v96 > v95
          || (int v98 = *a5, v96 + v98 <= v95)
          || (int v99 = *((_DWORD *)a5 + 2), v99 > a3)
          || (int v100 = v99 + v98, v101 = a5, v100 <= a3))
        {
          int v102 = *(_DWORD *)(v10 + 4428);
          int v103 = v95 - v102;
          int v104 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_108:
            int v107 = -1;
          }
          else
          {
            int v105 = a2 - v102;
            int v106 = v104 - a4;
            while (v105 >> v106 != v103 >> v106)
            {
              BOOL v35 = v106++ < v104;
              if (!v35) {
                goto LABEL_108;
              }
            }
            int v107 = v104 - v106;
            if (v104 - v106 < a4) {
              ++v107;
            }
          }
          unsigned long long v101 = *(unsigned __int8 **)(v10
                                     + 32 * v107
                                     + 8
                                     * ((v103 >> (v104 - v107)) & 1 | (2
                                                                                   * (((a3 - *(_DWORD *)(v10 + 4432)) >> (v104 - v107)) & 1)))
                                     + 4456);
        }
        unsigned int v108 = a6;
        if (v101 != a5) {
          unsigned int v108 = 0;
        }
      }
      uint64_t result = 0;
      uint64_t v109 = *(unsigned __int8 *)(*((void *)v101 + 17) + 1);
      unsigned int v110 = v95 - *((_DWORD *)v101 + 1);
      if ((v110 & 0x80000000) == 0)
      {
        unsigned int v111 = a3 - *((_DWORD *)v101 + 2);
        if ((v111 & 0x80000000) == 0)
        {
          unsigned int v112 = *v101;
          if (v110 >= v112 || v111 >= v112)
          {
            uint64_t result = 0;
          }
          else
          {
            uint64_t v114 = *(void *)&v101[8 * v108 + 136];
            uint64_t result = (_WORD *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v114 + 96) + 24))(*(void *)(v114 + 96), *(void *)(v114 + 104)+ v110+ *(unsigned __int8 *)(v114 + 1) * (unint64_t)(v111 & 0xFFFFFFFE));
            a5 = v220;
            LOWORD(a8) = v221;
          }
        }
      }
      unint64_t v115 = (2 << a9);
      if ((int)v115 >= 1)
      {
        unint64_t v116 = 0;
        uint32x4_t v117 = result + 1;
        do
        {
          int v118 = &__dst[2 * v116];
          *(_WORD *)int v118 = *(v117 - 1);
          *((_WORD *)v118 + 1) = *v117;
          v116 += 2;
          v117 += 2 * v109;
        }
        while (v116 < v115);
      }
      BOOL v68 = 1;
    }
    else
    {
      BOOL v68 = 0;
      int v69 = v212;
    }
  }
  int v119 = a8 & 0x1E00;
  if (a3 == v218)
  {
    if ((a8 & 0x1E00) != 0)
    {
      uint64_t result = memcpy(v64, (const void *)(v216 + 4 * v211 + 2 * v210), 2 * (2 << a9));
      a5 = v220;
      LOWORD(a8) = v221;
    }
    if (v69)
    {
      uint64_t v120 = 2 << a9;
      int32x4_t v121 = (const void *)(v216 + 4 * v211 + 2 * v210 + 2 * v120);
LABEL_189:
      uint64_t result = memcpy(&v64[2 * v120], v121, 2 * v120);
      char v145 = 1;
      LOWORD(a8) = v221;
      a5 = v220;
      goto LABEL_190;
    }
  }
  else
  {
    if ((a8 & 0x1E00) != 0)
    {
      int v122 = a3 - 1;
      if (*(unsigned char *)(v10 + 8) && *((_DWORD *)a5 + 2) == a3)
      {
        unsigned int v123 = 0;
        int8x16_t v124 = *(unsigned __int8 **)(v10 + 4456);
      }
      else
      {
        int v125 = *((_DWORD *)a5 + 1);
        if (v125 > a2
          || (int v126 = *a5, v125 + v126 <= a2)
          || (int v127 = *((_DWORD *)a5 + 2), v127 >= a3)
          || (v128 = v127 + v126, int8x16_t v124 = a5, v128 < a3))
        {
          int v129 = *(_DWORD *)(v10 + 4432);
          int v130 = v122 - v129;
          int v131 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_145:
            int v134 = -1;
          }
          else
          {
            int v132 = a3 - v129;
            int v133 = v131 - a4;
            while (v132 >> v133 != v130 >> v133)
            {
              BOOL v35 = v133++ < v131;
              if (!v35) {
                goto LABEL_145;
              }
            }
            int v134 = v131 - v133;
            if (v131 - v133 < a4) {
              ++v134;
            }
          }
          int8x16_t v124 = *(unsigned __int8 **)(v10
                                     + 32 * v134
                                     + 8
                                     * (((a2 - *(_DWORD *)(v10 + 4428)) >> (v131 - v134)) & 1 | (2 * ((v130 >> (v131 - v134)) & 1)))
                                     + 4456);
        }
        unsigned int v123 = a6;
        if (v124 != a5) {
          unsigned int v123 = 0;
        }
      }
      uint32x4_t v135 = 0;
      unsigned int v136 = a2 - *((_DWORD *)v124 + 1);
      if ((v136 & 0x80000000) == 0)
      {
        unsigned int v137 = v122 - *((_DWORD *)v124 + 2);
        if ((v137 & 0x80000000) == 0)
        {
          unsigned int v138 = *v124;
          if (v136 >= v138 || v137 >= v138)
          {
            uint32x4_t v135 = 0;
          }
          else
          {
            uint64_t v140 = *(void *)&v124[8 * v123 + 136];
            uint32x4_t v135 = (const void *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v140 + 96) + 24))(*(void *)(v140 + 96), *(void *)(v140 + 104)+ v136+ *(unsigned __int8 *)(v140 + 1) * (unint64_t)(v137 & 0xFFFFFFFE));
          }
        }
      }
      uint64_t result = memcpy(v64, v135, 2 * (2 << a9));
      LOWORD(a8) = v221;
      a5 = v220;
    }
    if (v69)
    {
      int v141 = (2 << a9) + a2;
      int v142 = a3 - 1;
      if (*(unsigned char *)(v10 + 8) && *((_DWORD *)a5 + 2) == a3)
      {
        unsigned int v143 = 0;
        uint64_t v144 = *(unsigned __int8 **)(v10 + 4456);
      }
      else
      {
        int v146 = *((_DWORD *)a5 + 1);
        if (v146 > v141
          || (int v147 = *a5, v146 + v147 <= v141)
          || (int v148 = *((_DWORD *)a5 + 2), v148 >= a3)
          || (v149 = v148 + v147, uint64_t v144 = a5, v149 < a3))
        {
          int v150 = *(_DWORD *)(v10 + 4428);
          int v151 = *(_DWORD *)(v10 + 4432);
          int v152 = v141 - v150;
          int v153 = v142 - v151;
          int v154 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_174:
            int v158 = -1;
          }
          else
          {
            int v155 = a2 - v150;
            int v156 = a3 - v151;
            int v157 = v154 - a4;
            while (v155 >> v157 != v152 >> v157 || v156 >> v157 != v153 >> v157)
            {
              BOOL v35 = v157++ < v154;
              if (!v35) {
                goto LABEL_174;
              }
            }
            int v158 = v154 - v157;
            if (v154 - v157 < a4) {
              ++v158;
            }
          }
          uint64_t v144 = *(unsigned __int8 **)(v10
                                     + 32 * v158
                                     + 8
                                     * ((v152 >> (v154 - v158)) & 1 | (2
                                                                                   * ((v153 >> (v154 - v158)) & 1)))
                                     + 4456);
        }
        unsigned int v143 = a6;
        if (v144 != a5) {
          unsigned int v143 = 0;
        }
      }
      int32x4_t v121 = 0;
      unsigned int v159 = v141 - *((_DWORD *)v144 + 1);
      if ((v159 & 0x80000000) == 0)
      {
        unsigned int v160 = v142 - *((_DWORD *)v144 + 2);
        if ((v160 & 0x80000000) == 0)
        {
          unsigned int v161 = *v144;
          if (v159 >= v161 || v160 >= v161)
          {
            int32x4_t v121 = 0;
          }
          else
          {
            uint64_t v163 = *(void *)&v144[8 * v143 + 136];
            int32x4_t v121 = (const void *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v163 + 96) + 24))(*(void *)(v163 + 96), *(void *)(v163 + 104)+ v159+ *(unsigned __int8 *)(v163 + 1) * (unint64_t)(v160 & 0xFFFFFFFE));
          }
        }
      }
      uint64_t v120 = 2 << a9;
      goto LABEL_189;
    }
  }
  char v145 = 0;
LABEL_190:
  if ((a8 & 0x100) != 0)
  {
    if (a2 == v209 || a3 == v218)
    {
      int v169 = v210 + 2 * v211;
      if (v210 <= 0) {
        int v169 = 0;
      }
      uint64_t v170 = v216 + 2 * v219 + 2 * v169;
      *((_WORD *)__dst - 2) = *(_WORD *)(v170 - 4);
      uint64_t result = (_WORD *)(v170 - 2);
    }
    else
    {
      int v164 = a2 - 2;
      int v165 = a3 - 1;
      int v166 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(v10 + 8) && (v166 == a2 || *((_DWORD *)a5 + 2) == a3))
      {
        uint64_t v167 = 0;
        uint64_t v168 = *(unsigned __int8 **)(v10 + 4456);
      }
      else
      {
        if (v166 > v164
          || (int v171 = *a5, v166 + v171 <= v164)
          || (int v172 = *((_DWORD *)a5 + 2), v172 >= a3)
          || (v173 = v172 + v171, uint64_t v168 = a5, v173 < a3))
        {
          int v174 = *(_DWORD *)(v10 + 4428);
          int v175 = *(_DWORD *)(v10 + 4432);
          int v176 = v164 - v174;
          int v177 = v165 - v175;
          int v178 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_209:
            int v182 = -1;
          }
          else
          {
            int v179 = a2 - v174;
            int v180 = a3 - v175;
            int v181 = v178 - a4;
            while (v179 >> v181 != v176 >> v181 || v180 >> v181 != v177 >> v181)
            {
              BOOL v35 = v181++ < v178;
              if (!v35) {
                goto LABEL_209;
              }
            }
            int v182 = v178 - v181;
            if (v178 - v181 < a4) {
              ++v182;
            }
          }
          uint64_t v168 = *(unsigned __int8 **)(v10
                                     + 32 * v182
                                     + 8
                                     * ((v176 >> (v178 - v182)) & 1 | (2
                                                                                   * ((v177 >> (v178 - v182)) & 1)))
                                     + 4456);
        }
        uint64_t v167 = a6;
        if (v168 != a5) {
          uint64_t v167 = 0;
        }
      }
      int v183 = *((_DWORD *)v168 + 1);
      int v184 = *((_DWORD *)v168 + 2);
      uint64_t v185 = *(void *)&v168[8 * v167 + 136];
      uint64_t v186 = (__int16 *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v185 + 96) + 24))(*(void *)(v185 + 96), *(void *)(v185 + 104)+ (v164 - v183)+ *(unsigned __int8 *)(v185 + 1) * (unint64_t)((v165 - v184) & 0xFE));
      __int16 v187 = *v186;
      uint64_t result = v186 + 1;
      *((_WORD *)__dst - 2) = v187;
      LOWORD(a8) = v221;
    }
    *((_WORD *)__dst - 1) = *result;
  }
  int v188 = 1 << a9;
  if (!v217)
  {
    if (v68)
    {
      unsigned int v189 = &__dst[2 * (2 << a9) - 4];
    }
    else if ((a8 & 0x100) != 0)
    {
      unsigned int v189 = __dst - 4;
    }
    else
    {
      unsigned int v189 = v64;
      if (!v119) {
        unsigned int v189 = &v64[2 * (2 << a9)];
      }
    }
    if (v188 < 2 << a9)
    {
      uint64_t v190 = (2 << a9) - (uint64_t)v188;
      int v191 = 2 * v188;
      do
      {
        *(_WORD *)&__dst[2 * v191] = *(_WORD *)v189;
        *(_WORD *)&__dst[2 * v191 + 2] = *((_WORD *)v189 + 1);
        v191 += 2;
        --v190;
      }
      while (v190);
    }
  }
  char v192 = a9 == 31 || v68;
  if ((v192 & 1) == 0)
  {
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v195 = 2 << a9;
    if (v188 <= 1) {
      unsigned int v196 = 1;
    }
    else {
      unsigned int v196 = 1 << a9;
    }
    uint64_t v197 = 2 * v196;
    do
    {
      *(_WORD *)&__dst[v193 >> 31] = *(_WORD *)&__dst[2 * v195];
      *(_WORD *)&__dst[2 * (int)v194 + 2] = *(_WORD *)&__dst[2 * (v195 | 1)];
      v194 += 2;
      v193 += 0x200000000;
    }
    while (v197 != v194);
  }
  if ((a8 & 0x100) == 0) {
    *((_DWORD *)__dst - 1) = *(_DWORD *)__dst;
  }
  if (a9 != 31 && !v119)
  {
    uint64_t v198 = 0;
    uint64_t v199 = 0;
    if (v188 <= 1) {
      unsigned int v200 = 1;
    }
    else {
      unsigned int v200 = 1 << a9;
    }
    uint64_t v201 = 2 * v200;
    do
    {
      *(_WORD *)&v64[v198 >> 31] = *((_WORD *)__dst - 2);
      *(_WORD *)&v64[2 * (int)v199 + 2] = *((_WORD *)__dst - 1);
      v199 += 2;
      v198 += 0x200000000;
    }
    while (v201 != v199);
  }
  if ((v145 & 1) == 0)
  {
    int v202 = 2 << a9;
    if (v188 < 2 << a9)
    {
      uint64_t v203 = v202;
      uint64_t v204 = v202 - 2;
      uint64_t v205 = v203 - 1;
      uint64_t v206 = v203 - v188;
      int v207 = 2 * v188;
      do
      {
        *(_WORD *)&v64[2 * v207] = *(_WORD *)&v64[2 * v204];
        *(_WORD *)&v64[2 * v207 + 2] = *(_WORD *)&v64[2 * v205];
        v207 += 2;
        --v206;
      }
      while (v206);
    }
  }
  v213[2] = 1;
  return result;
}

uint64_t sub_1BBA8B344(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(*(void *)(a1 + 1880) + 2009);
  unsigned __int8 v5 = v4 - a2;
  (*(void (**)(void, void, void, BOOL, BOOL))(*(void *)(*(void *)(a1 + 1872) + 1360)
                                                             + 8 * a2
                                                             + 1072))((*(int *)(a1 + 4428) >> a2), (*(int *)(a1 + 4432) >> a2), (2 << (v4 - a2)), (*(_DWORD *)(a1 + 4436) & 0xF) != 0, (*(_DWORD *)(a1 + 4436) & 0x1E000) != 0);
  (*(void (**)(void, void, void, BOOL, BOOL))(*(void *)(*(void *)(a1 + 1872) + 1360)
                                                             + 8 * a2
                                                             + 1072))((*(int *)(a1 + 4428) >> a2), (*(int *)(a1 + 4432) >> a2), (1 << v5), (*(_DWORD *)(a1 + 4436) & 0xF0) != 0, (*(_DWORD *)(a1 + 4436) & 0x1E00) != 0);
  uint64_t v6 = *(void *)(a1 + 1872);
  uint64_t v7 = v6 + 8 * a2;
  uint64_t v8 = *(unsigned int *)(a1 + 4436);
  uint64_t v9 = *(void *)(v6 + 1360);
  uint64_t v10 = *(uint64_t *)(v9 + 8 * a2 + 112) >> a2;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v9 + 16))(v9, (*(int *)(a1 + 4428) >> a2), (*(int *)(a1 + 4432) >> a2), a2);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void))(v7 + 1424))(v5, v8, v10, v11, *(void *)(a1 + 8 * a2 + 4664));
  *(unsigned char *)(a1 + a2 + 4696) = 1;
  return result;
}

uint64_t sub_1BBA8B490(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, _WORD *a9)
{
  uint64_t v10 = result;
  if (!a7)
  {
    uint64_t v20 = (4 << a8) | 1;
    int v21 = 128 << *(unsigned char *)(*(void *)(result + 1880) + 194);
    int v22 = a9 - 1;
    do
    {
      *v22++ = v21;
      --v20;
    }
    while (v20);
    return result;
  }
  int v15 = 2 << a8;
  uint64_t v138 = result + 4696;
  int v145 = a4;
  if (!*(unsigned char *)(result + 4696) && (*(_DWORD *)(result + 4428) == a2 || *(_DWORD *)(result + 4432) == a3))
  {
    sub_1BBA8B344(result, 0);
    a4 = v145;
  }
  int v16 = 1 << a8;
  int v142 = (char *)&a9[v15];
  uint64_t result = sub_1BBA8BE80(v10, a2, a3, a4, (uint64_t)a5, a8, a7, 0);
  uint64_t v17 = *(void *)(v10 + 1880);
  uint64_t v136 = *(unsigned __int8 *)(v17 + 2013);
  uint64_t v143 = *(void *)(v10 + 4664);
  int v144 = *(_DWORD *)(v10 + 4432);
  int v141 = a3 - v144;
  int v135 = *(_DWORD *)(v10 + 4428);
  int v18 = a2 - v135;
  if (a2 == v135)
  {
    BOOL v139 = (a7 & 0xF0) != 0;
    if ((a7 & 0xF0) != 0) {
      uint64_t result = (uint64_t)memcpy(a9, (const void *)(v143 + 2 * v141), 2 * v16);
    }
    int v19 = (char *)&a9[v15];
    if ((a7 & 0xF) != 0)
    {
      uint64_t result = (uint64_t)memcpy(&a9[v16], (const void *)(v143 + 2 * v141 + 2 * v16), 2 * v16);
      BOOL v137 = 1;
    }
    else
    {
      BOOL v137 = 0;
    }
    int v23 = v145;
  }
  else
  {
    BOOL v137 = (a7 & 0xF) != 0;
    int v23 = v145;
    if ((a7 & 0xF) != 0)
    {
      uint64_t v24 = v15;
      int v25 = a2 - 1;
      int v26 = v16 + a3;
      int v27 = *((_DWORD *)a5 + 1);
      if (v27 >= a2 || (v28 = *a5, v27 + v28 < a2) || (int v35 = *((_DWORD *)a5 + 2), v35 > v26) || v35 + v28 <= v26)
      {
        int v29 = v25 - v135;
        int v30 = v26 - v144;
        int v31 = *(unsigned __int8 *)(v17 + 2009);
        if (v145 < 0)
        {
LABEL_22:
          int v34 = -1;
        }
        else
        {
          int v32 = v31 - v145;
          while (v18 >> v32 != v29 >> v32 || v141 >> v32 != v30 >> v32)
          {
            BOOL v33 = v32++ < v31;
            if (!v33) {
              goto LABEL_22;
            }
          }
          int v38 = v31 - v32;
          if (v38 >= v145) {
            int v34 = v38;
          }
          else {
            int v34 = v38 + 1;
          }
        }
        BOOL v36 = 0;
        uint64_t v37 = *(unsigned __int8 **)(v10
                                  + 32 * v34
                                  + 8
                                  * ((v29 >> (v31 - v34)) & 1 | (2
                                                                             * ((v30 >> (v31 - v34)) & 1)))
                                  + 4456);
        int v27 = *((_DWORD *)v37 + 1);
        int v35 = *((_DWORD *)v37 + 2);
      }
      else
      {
        BOOL v36 = a6 != 3;
        uint64_t v37 = a5;
      }
      uint64_t result = 0;
      uint64_t v39 = **((unsigned __int8 **)v37 + 17);
      unsigned int v40 = v25 - v27;
      if ((v40 & 0x80000000) == 0)
      {
        unsigned int v41 = v26 - v35;
        if ((v41 & 0x80000000) == 0)
        {
          unsigned int v42 = *v37;
          if (v40 >= v42 || v41 >= v42)
          {
            uint64_t result = 0;
          }
          else
          {
            uint64_t v44 = *(unsigned __int8 **)&v37[8 * v36 + 136];
            uint64_t v140 = v24;
            uint64_t result = (*(uint64_t (**)(void, unint64_t))(**((void **)v44 + 10) + 24))(*((void *)v44 + 10), *((void *)v44 + 11) + v40 + *v44 * (unint64_t)v41);
            uint64_t v24 = v140;
            int v23 = v145;
          }
        }
      }
      if (v16 < (int)v24)
      {
        uint64_t v45 = v24 - v16;
        int v46 = &a9[v16];
        do
        {
          *v46++ = *(_WORD *)result;
          result += 2 * v39;
          --v45;
        }
        while (v45);
      }
    }
    if ((a7 & 0xF0) != 0)
    {
      int v47 = a2 - 1;
      int v48 = *((_DWORD *)a5 + 1);
      if (v48 >= a2 || (int v49 = *a5, v48 + v49 < a2) || (v58 = *((_DWORD *)a5 + 2), v58 > a3) || v58 + v49 <= a3)
      {
        int v50 = *(_DWORD *)(v10 + 4428);
        int v51 = v47 - v50;
        int v52 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
        if (v23 < 0)
        {
LABEL_50:
          int v55 = -1;
        }
        else
        {
          int v53 = a2 - v50;
          int v54 = v52 - v23;
          while (v53 >> v54 != v51 >> v54)
          {
            BOOL v33 = v54++ < v52;
            if (!v33) {
              goto LABEL_50;
            }
          }
          if (v52 - v54 >= v23) {
            int v55 = v52 - v54;
          }
          else {
            int v55 = v52 - v54 + 1;
          }
        }
        BOOL v56 = 0;
        uint64_t v57 = *(unsigned __int8 **)(v10
                                  + 32 * v55
                                  + 8
                                  * ((v51 >> (v52 - v55)) & 1 | (2
                                                                             * (((a3
                                                                                              - *(_DWORD *)(v10 + 4432)) >> (v52 - v55)) & 1)))
                                  + 4456);
        int v48 = *((_DWORD *)v57 + 1);
        int v58 = *((_DWORD *)v57 + 2);
      }
      else
      {
        BOOL v56 = a6 != 3;
        uint64_t v57 = a5;
      }
      uint64_t result = 0;
      uint64_t v59 = **((unsigned __int8 **)v57 + 17);
      unsigned int v60 = v47 - v48;
      if ((v60 & 0x80000000) == 0)
      {
        unsigned int v61 = a3 - v58;
        if (((a3 - v58) & 0x80000000) == 0)
        {
          unsigned int v62 = *v57;
          if (v60 >= v62 || v61 >= v62)
          {
            uint64_t result = 0;
          }
          else
          {
            uint64_t v64 = *(unsigned __int8 **)&v57[8 * v56 + 136];
            uint64_t result = (*(uint64_t (**)(void, unint64_t))(**((void **)v64 + 10) + 24))(*((void *)v64 + 10), *((void *)v64 + 11) + v60 + *v64 * (unint64_t)v61);
            int v23 = v145;
          }
        }
      }
      if (a8 != 31)
      {
        if (v16 <= 1) {
          uint64_t v65 = 1;
        }
        else {
          uint64_t v65 = v16;
        }
        int v66 = a9;
        do
        {
          *v66++ = *(_WORD *)result;
          result += 2 * v59;
          --v65;
        }
        while (v65);
      }
      BOOL v139 = 1;
    }
    else
    {
      BOOL v139 = 0;
    }
    int v19 = v142;
  }
  if (a3 == v144)
  {
    if ((a7 & 0x1E00) != 0)
    {
      uint64_t result = (uint64_t)memcpy(v19, (const void *)(v143 + 4 * v136 + 2 * v18), 2 * v16);
      int v23 = v145;
    }
    if ((a7 & 0x1E000) != 0)
    {
      uint64_t v67 = v16;
      BOOL v68 = (const void *)(v143 + 4 * v136 + 2 * v18 + 2 * v16);
      goto LABEL_115;
    }
LABEL_102:
    char v91 = 0;
    if ((a7 & 0x100) != 0) {
      goto LABEL_116;
    }
    goto LABEL_138;
  }
  if ((a7 & 0x1E00) != 0)
  {
    int v69 = a3 - 1;
    int v70 = *((_DWORD *)a5 + 1);
    if (v70 > a2 || (int v71 = *a5, v70 + v71 <= a2) || (v72 = *((_DWORD *)a5 + 2), v72 >= a3) || v72 + v71 < a3)
    {
      int v75 = *(_DWORD *)(v10 + 4432);
      int v76 = v69 - v75;
      int v77 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
      if (v23 < 0)
      {
LABEL_90:
        int v80 = -1;
      }
      else
      {
        int v78 = a3 - v75;
        int v79 = v77 - v23;
        while (v78 >> v79 != v76 >> v79)
        {
          BOOL v33 = v79++ < v77;
          if (!v33) {
            goto LABEL_90;
          }
        }
        if (v77 - v79 >= v23) {
          int v80 = v77 - v79;
        }
        else {
          int v80 = v77 - v79 + 1;
        }
      }
      BOOL v73 = 0;
      int v74 = *(unsigned __int8 **)(v10
                                + 32 * v80
                                + 8
                                * (((a2 - *(_DWORD *)(v10 + 4428)) >> (v77 - v80)) & 1 | (2 * ((v76 >> (v77 - v80)) & 1)))
                                + 4456);
      int v70 = *((_DWORD *)v74 + 1);
      int v72 = *((_DWORD *)v74 + 2);
    }
    else
    {
      BOOL v73 = a6 != 3;
      int v74 = a5;
    }
    unsigned int v81 = v69 - v72;
    int v82 = *(unsigned __int8 **)&v74[8 * v73 + 136];
    int v83 = (const void *)(*(uint64_t (**)(void, unint64_t))(**((void **)v82 + 10) + 24))(*((void *)v82 + 10), *((void *)v82 + 11) + (a2 - v70) + *v82 * (unint64_t)v81);
    uint64_t result = (uint64_t)memcpy(v19, v83, 2 * v16);
    int v23 = v145;
  }
  if ((a7 & 0x1E000) == 0) {
    goto LABEL_102;
  }
  int v84 = v16 + a2;
  int v85 = a3 - 1;
  int v86 = *((_DWORD *)a5 + 1);
  if (v86 > v16 + a2 || (int v87 = *a5, v86 + v87 <= v84) || (v88 = *((_DWORD *)a5 + 2), v88 >= a3) || v88 + v87 < a3)
  {
    int v92 = *(_DWORD *)(v10 + 4428);
    int v93 = *(_DWORD *)(v10 + 4432);
    int v94 = v84 - v92;
    int v95 = v85 - v93;
    int v96 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
    if (v23 < 0)
    {
LABEL_109:
      int v100 = -1;
    }
    else
    {
      int v97 = a2 - v92;
      int v98 = a3 - v93;
      int v99 = v96 - v23;
      while (v97 >> v99 != v94 >> v99 || v98 >> v99 != v95 >> v99)
      {
        BOOL v33 = v99++ < v96;
        if (!v33) {
          goto LABEL_109;
        }
      }
      if (v96 - v99 >= v23) {
        int v100 = v96 - v99;
      }
      else {
        int v100 = v96 - v99 + 1;
      }
    }
    BOOL v89 = 0;
    int32x4_t v90 = *(unsigned __int8 **)(v10
                              + 32 * v100
                              + 8
                              * ((v94 >> (v96 - v100)) & 1 | (2 * ((v95 >> (v96 - v100)) & 1)))
                              + 4456);
    int v86 = *((_DWORD *)v90 + 1);
    int v88 = *((_DWORD *)v90 + 2);
  }
  else
  {
    BOOL v89 = a6 != 3;
    int32x4_t v90 = a5;
  }
  uint64_t v101 = (v84 - v86);
  int v102 = *(unsigned __int8 **)&v90[8 * v89 + 136];
  BOOL v68 = (const void *)(*(uint64_t (**)(void, unint64_t))(**((void **)v102 + 10) + 24))(*((void *)v102 + 10), *((void *)v102 + 11) + v101 + *v102 * (unint64_t)(v85 - v88));
  uint64_t v67 = v16;
LABEL_115:
  uint64_t result = (uint64_t)memcpy(&v19[2 * v67], v68, 2 * v67);
  char v91 = 1;
  int v23 = v145;
  if ((a7 & 0x100) != 0)
  {
LABEL_116:
    if (a2 == v135 || a3 == v144)
    {
      int v109 = v18 + 2 * v136;
      if (v18 <= 0) {
        int v109 = 0;
      }
      uint64_t result = v143 + 2 * v141 + 2 * v109 - 2;
    }
    else
    {
      int v103 = a2 - 1;
      int v104 = a3 - 1;
      int v105 = *((_DWORD *)a5 + 1);
      if (v105 >= a2 || (int v106 = *a5, v105 + v106 < a2) || (v107 = *((_DWORD *)a5 + 2), v107 >= a3) || v107 + v106 < a3)
      {
        int v110 = *(_DWORD *)(v10 + 4428);
        int v111 = *(_DWORD *)(v10 + 4432);
        int v112 = v103 - v110;
        int v113 = v104 - v111;
        int v114 = *(unsigned __int8 *)(*(void *)(v10 + 1880) + 2009);
        if (v23 < 0)
        {
LABEL_131:
          int v118 = -1;
        }
        else
        {
          int v115 = a2 - v110;
          int v116 = a3 - v111;
          int v117 = v114 - v23;
          while (v115 >> v117 != v112 >> v117 || v116 >> v117 != v113 >> v117)
          {
            BOOL v33 = v117++ < v114;
            if (!v33) {
              goto LABEL_131;
            }
          }
          if (v114 - v117 >= v23) {
            int v118 = v114 - v117;
          }
          else {
            int v118 = v114 - v117 + 1;
          }
        }
        BOOL v108 = 0;
        a5 = *(unsigned __int8 **)(v10
                                 + 32 * v118
                                 + 8
                                 * ((v112 >> (v114 - v118)) & 1 | (2
                                                                               * ((v113 >> (v114 - v118)) & 1)))
                                 + 4456);
        int v105 = *((_DWORD *)a5 + 1);
        int v107 = *((_DWORD *)a5 + 2);
      }
      else
      {
        BOOL v108 = a6 != 3;
      }
      uint64_t v119 = (v103 - v105);
      uint64_t v120 = *(unsigned __int8 **)&a5[8 * v108 + 136];
      uint64_t result = (*(uint64_t (**)(void, unint64_t))(**((void **)v120 + 10) + 24))(*((void *)v120 + 10), *((void *)v120 + 11) + v119 + *v120 * (unint64_t)(v104 - v107));
    }
    *(a9 - 1) = *(_WORD *)result;
  }
LABEL_138:
  if (!v137)
  {
    if (v139)
    {
      int32x4_t v121 = (char *)&a9[v16 - 1];
    }
    else if ((a7 & 0x100) != 0)
    {
      int32x4_t v121 = (char *)(a9 - 1);
    }
    else
    {
      int32x4_t v121 = v19;
      if ((a7 & 0x1E00) == 0) {
        int32x4_t v121 = &v19[2 * v16];
      }
    }
    __int16 v122 = *(_WORD *)v121;
    uint64_t v123 = v16;
    int8x16_t v124 = &a9[v16];
    do
    {
      *v124++ = v122;
      --v123;
    }
    while (v123);
  }
  if (!v139)
  {
    uint64_t v125 = v16;
    __int16 v126 = a9[v16];
    int v127 = a9;
    do
    {
      *v127++ = v126;
      --v125;
    }
    while (v125);
  }
  if ((a7 & 0x100) == 0) {
    *(a9 - 1) = *a9;
  }
  if ((a7 & 0x1E00) == 0)
  {
    uint64_t v128 = v16;
    __int16 v129 = *(a9 - 1);
    int v130 = v19;
    do
    {
      *v130++ = v129;
      --v128;
    }
    while (v128);
  }
  if ((v91 & 1) == 0)
  {
    uint64_t v131 = v16;
    int v132 = &v19[2 * v16];
    __int16 v133 = *((_WORD *)v132 - 1);
    do
    {
      *(_WORD *)int v132 = v133;
      v132 += 2;
      --v131;
    }
    while (v131);
  }
  *(unsigned char *)(v138 + 2) = 1;
  return result;
}

uint64_t sub_1BBA8BE80(uint64_t result, int a2, int a3, int a4, uint64_t a5, char a6, int a7, unsigned int a8)
{
  uint64_t v13 = result;
  int v14 = *(_DWORD *)(result + 16);
  uint64_t v15 = (((2 << a6) + a2 - v14) >> a8);
  uint64_t v16 = (((2 << a6) + a3 - *(_DWORD *)(result + 20)) >> a8);
  BOOL v17 = (a7 & 0x1E000) == 0 || (int)v15 <= 0;
  int v18 = !v17;
  BOOL v20 = (a7 & 0xF) != 0 && (int)v16 > 0;
  if ((v18 & 1) != 0 || v20)
  {
    int v21 = *(_DWORD *)(result + 4428);
    if (v18)
    {
      int v22 = *(_DWORD *)(result + 4432);
      int v23 = a3 - v22;
      if (a3 != v22)
      {
        int v24 = v14 + (-1 << a8);
        int v25 = a3 - 1;
        if (a8 && *(unsigned char *)(result + 8) && *(_DWORD *)(a5 + 8) == a3)
        {
          int v26 = (uint64_t *)(result + 4456);
        }
        else
        {
          int v27 = v24 - v21;
          int v28 = v25 - v22;
          int v29 = *(unsigned __int8 *)(*(void *)(result + 1880) + 2009);
          if (a4 < 0)
          {
LABEL_26:
            int v31 = -1;
          }
          else
          {
            int v30 = v29 - a4;
            while ((a2 - v21) >> v30 != v27 >> v30 || v23 >> v30 != v28 >> v30)
            {
              BOOL v17 = v30++ < v29;
              if (!v17) {
                goto LABEL_26;
              }
            }
            int v31 = v29 - v30;
            if (v29 - v30 < a4) {
              ++v31;
            }
          }
          int v26 = (uint64_t *)(result
                          + 32 * v31
                          + 8
                          * ((v27 >> (v29 - v31)) & 1 | (2 * ((v28 >> (v29 - v31)) & 1)))
                          + 4456);
        }
        uint64_t v32 = *v26;
        int v33 = *(_DWORD *)(v32 + 8);
        uint64_t v34 = (v24 - *(_DWORD *)(v32 + 4));
        uint64_t v35 = *(void *)(v32 + 136);
        BOOL v36 = (__int16 *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v35 + 16 * a8 + 80) + 24))(*(void *)(v35 + 16 * a8 + 80), *(void *)(v35 + 16 * a8 + 88)+ v34+ (*(unsigned __int8 *)(v35 + a8) << a8) * (unint64_t)((v25 - v33) >> a8));
        __int16 v38 = *v36;
        uint64_t result = (uint64_t)(v36 + 1);
        __int16 v37 = v38;
        do
        {
          *(_WORD *)uint64_t result = v37;
          result += 2;
          --v15;
        }
        while (v15);
      }
    }
    if (a2 != v21 && v20)
    {
      int v40 = (-1 << a8) + a2;
      int v41 = *(_DWORD *)(v13 + 20) - 1;
      if (a8 && *(unsigned char *)(v13 + 8) && *(_DWORD *)(a5 + 4) == a2)
      {
        uint64_t v42 = v13 + 4456;
      }
      else
      {
        int v43 = *(_DWORD *)(v13 + 4428);
        int v44 = *(_DWORD *)(v13 + 4432);
        int v45 = v40 - v43;
        int v46 = v41 - v44;
        int v47 = *(unsigned __int8 *)(*(void *)(v13 + 1880) + 2009);
        if (a4 < 0)
        {
LABEL_45:
          int v51 = -1;
        }
        else
        {
          int v48 = a2 - v43;
          int v49 = a3 - v44;
          int v50 = v47 - a4;
          while (v48 >> v50 != v45 >> v50 || v49 >> v50 != v46 >> v50)
          {
            BOOL v17 = v50++ < v47;
            if (!v17) {
              goto LABEL_45;
            }
          }
          int v51 = v47 - v50;
          if (v47 - v50 < a4) {
            ++v51;
          }
        }
        uint64_t v42 = v13
            + 32 * v51
            + 8 * ((v45 >> (v47 - v51)) & 1 | (2 * ((v46 >> (v47 - v51)) & 1)))
            + 4456;
      }
      uint64_t result = 0;
      int v52 = *(unsigned __int8 **)v42;
      uint64_t v53 = *(void *)(*(void *)v42 + 136);
      unint64_t v54 = *(unsigned __int8 *)(v53 + a8) << a8;
      unsigned int v55 = v40 - *((_DWORD *)v52 + 1);
      if ((v55 & 0x80000000) == 0)
      {
        unsigned int v56 = v41 - *((_DWORD *)v52 + 2);
        if ((v56 & 0x80000000) == 0)
        {
          unsigned int v57 = *v52;
          if (v55 >= v57 || v56 >= v57) {
            uint64_t result = 0;
          }
          else {
            uint64_t result = (*(uint64_t (**)(void, unint64_t))(**(void **)(v53 + 16 * a8 + 80) + 24))(*(void *)(v53 + 16 * a8 + 80), *(void *)(v53 + 16 * a8 + 88) + v55 + v54 * (unint64_t)(v56 >> a8));
          }
        }
      }
      uint64_t v59 = 2 * (v54 >> a8);
      do
      {
        *(_WORD *)(result + v59) = *(_WORD *)result;
        v59 += 2 * (v54 >> a8);
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t sub_1BBA8C1C8(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >= 1)
  {
    for (int i = 0; i != a2; ++i)
    {
      if ((int)result >= 1)
      {
        uint64_t v7 = 0;
        do
        {
          *(_WORD *)(a6 + 2 * v7) = *(_WORD *)(a4 + 2 * v7);
          v7 += 2;
        }
        while (v7 < (int)result);
      }
      a6 += 2 * a5;
      a4 += 2 * a3;
    }
  }
  return result;
}

void *sub_1BBA8C218(void *result, int a2, uint64_t a3, char *__src, uint64_t a5, char *__dst)
{
  if (a2)
  {
    uint64_t v8 = 2 * a5;
    uint64_t v9 = 2 * a3;
    size_t v10 = 2 * (int)result;
    uint64_t v11 = a2;
    do
    {
      --v11;
      uint64_t result = memcpy(__dst, __src, v10);
      __dst += v8;
      __src += v9;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1BBA8C284(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) + 2 * a2;
}

uint64_t sub_1BBA8C290(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  size_t v3 = v2 < 0 ? -1 : 2 * v2;
  char v4 = operator new[](v3, MEMORY[0x1E4FBA2D0]);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    return 0;
  }
  else {
    return 4294954392;
  }
}

void sub_1BBA8C2E8(void *a1)
{
  *a1 = &unk_1F14EE2E0;
  uint64_t v1 = a1[2];
  if (v1) {
    MEMORY[0x1C18605E0](v1, 0x1000C40BDFB0063);
  }

  JUMPOUT(0x1C18605E0);
}

void *sub_1BBA8C364(void *a1)
{
  *a1 = &unk_1F14EE2E0;
  uint64_t v2 = a1[2];
  if (v2) {
    MEMORY[0x1C18605E0](v2, 0x1000C40BDFB0063);
  }
  return a1;
}

unsigned char *sub_1BBA8C3C0(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, uint64_t a7, int a8, int a9, _WORD *a10)
{
  if (!a8)
  {
    int v22 = 128 << *(unsigned char *)(*(void *)(a1 + 1880) + 195);
    return memset(a10 - 1, v22, (8 << a9) | 2);
  }
  int v16 = 4 << a9;
  uint64_t v168 = a1 + 4697;
  if (!*(unsigned char *)(a1 + 4697) && (*(_DWORD *)(a1 + 4428) == a2 || *(_DWORD *)(a1 + 4432) == a3))
  {
    int v17 = a4;
    sub_1BBA8B344(a1, 1);
    a4 = v17;
  }
  int v18 = (char *)a10 + v16;
  int v165 = a4;
  uint64_t result = (unsigned char *)sub_1BBA8BE80(a1, a2, a3, a4, (uint64_t)a5, a9 + 1, a8, 1u);
  uint64_t v20 = *(void *)(a1 + 1880);
  uint64_t v164 = *(unsigned __int8 *)(v20 + 2013);
  uint64_t v21 = *(int *)(a1 + 4428);
  uint64_t v169 = *(void *)(a1 + 4672);
  uint64_t v170 = *(int *)(a1 + 4432);
  uint64_t v172 = a2 - v21;
  uint64_t v171 = a3 - v170;
  int v162 = *(_DWORD *)(a1 + 4428);
  unsigned int v163 = a6;
  if (v21 == a2)
  {
    BOOL v166 = (a8 & 0xF0) != 0;
    if ((a8 & 0xF0) != 0) {
      uint64_t result = memcpy(a10, (const void *)(v169 + (int)v171), 2 << a9);
    }
    if ((a8 & 0xF) != 0)
    {
      uint64_t result = memcpy((char *)a10 + (2 << a9), (const void *)(v169 + v171 + (2 << a9)), 2 << a9);
      BOOL v167 = 1;
    }
    else
    {
      BOOL v167 = 0;
    }
  }
  else
  {
    BOOL v167 = (a8 & 0xF) != 0;
    if ((a8 & 0xF) != 0)
    {
      uint64_t v23 = v16;
      int v24 = a2 - 2;
      int v25 = 2 << a9;
      int v26 = (2 << a9) + a3;
      int v27 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(a1 + 8) && v27 == a2)
      {
        unsigned int v28 = 0;
        int v29 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        if (v27 > v24
          || (int v30 = *a5, v27 + v30 <= v24)
          || (int v31 = *((_DWORD *)a5 + 2), v31 > v26)
          || (int v32 = v31 + v30, v29 = a5, v32 <= v26))
        {
          int v33 = v24 - v162;
          int v34 = v26 - v170;
          int v35 = *(unsigned __int8 *)(v20 + 2009);
          if (v165 < 0)
          {
LABEL_28:
            int v38 = -1;
          }
          else
          {
            int v36 = v35 - v165;
            while ((int)v172 >> v36 != v33 >> v36 || (int)v171 >> v36 != v34 >> v36)
            {
              BOOL v37 = v36++ < v35;
              if (!v37) {
                goto LABEL_28;
              }
            }
            int v38 = v35 - v36;
            if (v38 < v165) {
              ++v38;
            }
          }
          int v29 = *(unsigned __int8 **)(a1
                                    + 32 * v38
                                    + 8
                                    * ((v33 >> (v35 - v38)) & 1 | (2
                                                                               * ((v34 >> (v35 - v38)) & 1)))
                                    + 4456);
        }
        unsigned int v28 = v163;
        if (v29 != a5) {
          unsigned int v28 = 0;
        }
      }
      uint64_t result = 0;
      uint64_t v39 = *(unsigned __int8 *)(*((void *)v29 + 17) + 1);
      unsigned int v40 = v24 - *((_DWORD *)v29 + 1);
      if ((v40 & 0x80000000) == 0)
      {
        unsigned int v41 = v26 - *((_DWORD *)v29 + 2);
        if ((v41 & 0x80000000) == 0)
        {
          unsigned int v42 = *v29;
          if (v40 >= v42 || v41 >= v42)
          {
            uint64_t result = 0;
          }
          else
          {
            uint64_t v44 = *(void *)&v29[8 * v28 + 136];
            uint64_t result = (unsigned char *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v44 + 96) + 24))(*(void *)(v44 + 96), *(void *)(v44 + 104)+ v40+ *(unsigned __int8 *)(v44 + 1) * (unint64_t)(v41 & 0xFFFFFFFE));
            int v25 = 2 << a9;
          }
        }
      }
      if (v25 < (int)v23)
      {
        uint64_t v45 = v25;
        int v46 = result + 1;
        do
        {
          int v47 = (char *)a10 + v45;
          *int v47 = *(v46 - 1);
          v47[1] = *v46;
          v45 += 2;
          v46 += 2 * v39;
        }
        while (v45 < v23);
      }
    }
    if ((a8 & 0xF0) != 0)
    {
      int v48 = a2 - 2;
      int v49 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(a1 + 8)) {
        BOOL v50 = v49 == a2;
      }
      else {
        BOOL v50 = 0;
      }
      a6 = v163;
      if (v50)
      {
        unsigned int v61 = 0;
        unint64_t v54 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        if (v49 > v48
          || (int v51 = *a5, v49 + v51 <= v48)
          || (int v52 = *((_DWORD *)a5 + 2), v52 > a3)
          || (int v53 = v52 + v51, v54 = a5, v53 <= a3))
        {
          int v55 = *(_DWORD *)(a1 + 4428);
          int v56 = v48 - v55;
          int v57 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009);
          if (v165 < 0)
          {
LABEL_58:
            int v60 = -1;
          }
          else
          {
            int v58 = a2 - v55;
            int v59 = v57 - v165;
            while (v58 >> v59 != v56 >> v59)
            {
              BOOL v37 = v59++ < v57;
              if (!v37) {
                goto LABEL_58;
              }
            }
            int v60 = v57 - v59;
            if (v57 - v59 < v165) {
              ++v60;
            }
          }
          unint64_t v54 = *(unsigned __int8 **)(a1
                                    + 32 * v60
                                    + 8
                                    * ((v56 >> (v57 - v60)) & 1 | (2
                                                                               * (((a3
                                                                                                - *(_DWORD *)(a1 + 4432)) >> (v57 - v60)) & 1)))
                                    + 4456);
        }
        if (v54 == a5) {
          unsigned int v61 = v163;
        }
        else {
          unsigned int v61 = 0;
        }
      }
      uint64_t result = 0;
      uint64_t v62 = *(unsigned __int8 *)(*((void *)v54 + 17) + 1);
      unsigned int v63 = v48 - *((_DWORD *)v54 + 1);
      if ((v63 & 0x80000000) == 0)
      {
        unsigned int v64 = a3 - *((_DWORD *)v54 + 2);
        if ((v64 & 0x80000000) == 0)
        {
          unsigned int v65 = *v54;
          if (v63 >= v65 || v64 >= v65)
          {
            uint64_t result = 0;
          }
          else
          {
            uint64_t v67 = *(void *)&v54[8 * v61 + 136];
            uint64_t result = (unsigned char *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v67 + 96) + 24))(*(void *)(v67 + 96), *(void *)(v67 + 104)+ v63+ *(unsigned __int8 *)(v67 + 1) * (unint64_t)(v64 & 0xFFFFFFFE));
          }
        }
      }
      unint64_t v68 = (2 << a9);
      if ((int)v68 >= 1)
      {
        unint64_t v69 = 0;
        int v70 = result + 1;
        do
        {
          int v71 = &a10[v69 / 2];
          *int v71 = *(v70 - 1);
          v71[1] = *v70;
          v69 += 2;
          v70 += 2 * v62;
        }
        while (v69 < v68);
      }
      BOOL v166 = 1;
    }
    else
    {
      BOOL v166 = 0;
      a6 = v163;
    }
  }
  if (v170 == a3)
  {
    if ((a8 & 0x1E00) != 0) {
      uint64_t result = memcpy(v18, (const void *)(v169 + 2 * v164 + (int)v172), 2 << a9);
    }
    if ((a8 & 0x1E000) != 0)
    {
      size_t v72 = 2 << a9;
      BOOL v73 = (const void *)(v169 + 2 * v164 + v172 + v72);
      int v74 = &v18[v72];
LABEL_142:
      uint64_t result = memcpy(v74, v73, v72);
      char v99 = 1;
      goto LABEL_143;
    }
  }
  else
  {
    if ((a8 & 0x1E00) != 0)
    {
      int v75 = a3 - 1;
      if (*(unsigned char *)(a1 + 8) && *((_DWORD *)a5 + 2) == a3)
      {
        int v76 = 0;
        int v77 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        int v78 = *((_DWORD *)a5 + 1);
        if (v78 > a2
          || (int v79 = *a5, v78 + v79 <= a2)
          || (int v80 = *((_DWORD *)a5 + 2), v80 >= a3)
          || (v81 = v80 + v79, int v77 = a5, v81 < a3))
        {
          int v82 = *(_DWORD *)(a1 + 4432);
          int v83 = v75 - v82;
          int v84 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009);
          if (v165 < 0)
          {
LABEL_96:
            int v87 = -1;
          }
          else
          {
            int v85 = a3 - v82;
            int v86 = v84 - v165;
            while (v85 >> v86 != v83 >> v86)
            {
              BOOL v37 = v86++ < v84;
              if (!v37) {
                goto LABEL_96;
              }
            }
            int v87 = v84 - v86;
            if (v84 - v86 < v165) {
              ++v87;
            }
          }
          int v77 = *(unsigned __int8 **)(a1
                                    + 32 * v87
                                    + 8
                                    * (((a2 - *(_DWORD *)(a1 + 4428)) >> (v84 - v87)) & 1 | (2 * ((v83 >> (v84 - v87)) & 1)))
                                    + 4456);
        }
        if (v77 == a5) {
          int v76 = a6;
        }
        else {
          int v76 = 0;
        }
      }
      int v88 = 0;
      unsigned int v89 = a2 - *((_DWORD *)v77 + 1);
      if ((v89 & 0x80000000) == 0)
      {
        unsigned int v90 = v75 - *((_DWORD *)v77 + 2);
        if ((v90 & 0x80000000) == 0)
        {
          unsigned int v91 = *v77;
          if (v89 >= v91 || v90 >= v91)
          {
            int v88 = 0;
          }
          else
          {
            uint64_t v93 = *(void *)&v77[8 * v76 + 136];
            int v88 = (const void *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v93 + 96) + 24))(*(void *)(v93 + 96), *(void *)(v93 + 104)+ v89+ *(unsigned __int8 *)(v93 + 1) * (unint64_t)(v90 & 0xFFFFFFFE));
          }
        }
      }
      uint64_t result = memcpy(v18, v88, 2 << a9);
    }
    if ((a8 & 0x1E000) != 0)
    {
      int v94 = 2 << a9;
      int v95 = (2 << a9) + a2;
      int v96 = a3 - 1;
      if (*(unsigned char *)(a1 + 8) && *((_DWORD *)a5 + 2) == a3)
      {
        int v97 = 0;
        int v98 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        int v100 = *((_DWORD *)a5 + 1);
        if (v100 > v95
          || (int v101 = *a5, v100 + v101 <= v95)
          || (int v102 = *((_DWORD *)a5 + 2), v102 >= a3)
          || (int v103 = v102 + v101, v98 = a5, v103 < a3))
        {
          int v104 = *(_DWORD *)(a1 + 4428);
          int v105 = *(_DWORD *)(a1 + 4432);
          int v106 = v95 - v104;
          int v107 = v96 - v105;
          int v108 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009);
          if (v165 < 0)
          {
LABEL_126:
            int v112 = -1;
          }
          else
          {
            int v109 = a2 - v104;
            int v110 = a3 - v105;
            int v111 = v108 - v165;
            while (v109 >> v111 != v106 >> v111 || v110 >> v111 != v107 >> v111)
            {
              BOOL v37 = v111++ < v108;
              if (!v37) {
                goto LABEL_126;
              }
            }
            int v112 = v108 - v111;
            if (v108 - v111 < v165) {
              ++v112;
            }
          }
          int v98 = *(unsigned __int8 **)(a1
                                    + 32 * v112
                                    + 8
                                    * ((v106 >> (v108 - v112)) & 1 | (2
                                                                                  * ((v107 >> (v108 - v112)) & 1)))
                                    + 4456);
        }
        if (v98 == a5) {
          int v97 = a6;
        }
        else {
          int v97 = 0;
        }
      }
      BOOL v73 = 0;
      unsigned int v113 = v95 - *((_DWORD *)v98 + 1);
      if ((v113 & 0x80000000) == 0)
      {
        unsigned int v114 = v96 - *((_DWORD *)v98 + 2);
        if ((v114 & 0x80000000) == 0)
        {
          unsigned int v115 = *v98;
          if (v113 >= v115 || v114 >= v115)
          {
            BOOL v73 = 0;
          }
          else
          {
            uint64_t v117 = *(void *)&v98[8 * v97 + 136];
            BOOL v73 = (const void *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v117 + 96) + 24))(*(void *)(v117 + 96), *(void *)(v117 + 104)+ v113+ *(unsigned __int8 *)(v117 + 1) * (unint64_t)(v114 & 0xFFFFFFFE));
          }
        }
      }
      size_t v72 = v94;
      int v74 = &v18[v94];
      goto LABEL_142;
    }
  }
  char v99 = 0;
LABEL_143:
  if ((a8 & 0x100) != 0)
  {
    if (v162 == a2 || v170 == a3)
    {
      int v123 = v172 + 2 * v164;
      if ((int)v172 <= 0) {
        int v123 = 0;
      }
      uint64_t v124 = v169 + (int)v171 + v123;
      *((unsigned char *)a10 - 2) = *(unsigned char *)(v124 - 2);
      uint64_t result = (unsigned char *)(v124 - 1);
    }
    else
    {
      int v118 = a2 - 2;
      int v119 = a3 - 1;
      int v120 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(a1 + 8) && (v120 == a2 || *((_DWORD *)a5 + 2) == a3))
      {
        uint64_t v121 = 0;
        __int16 v122 = *(unsigned __int8 **)(a1 + 4456);
      }
      else
      {
        if (v120 > v118
          || (int v125 = *a5, v120 + v125 <= v118)
          || (int v126 = *((_DWORD *)a5 + 2), v126 >= a3)
          || (int v127 = v126 + v125, v122 = a5, v127 < a3))
        {
          int v128 = *(_DWORD *)(a1 + 4428);
          int v129 = *(_DWORD *)(a1 + 4432);
          int v130 = v118 - v128;
          int v131 = v119 - v129;
          int v132 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009);
          if (v165 < 0)
          {
LABEL_162:
            int v136 = -1;
          }
          else
          {
            int v133 = a2 - v128;
            int v134 = a3 - v129;
            int v135 = v132 - v165;
            while (v133 >> v135 != v130 >> v135 || v134 >> v135 != v131 >> v135)
            {
              BOOL v37 = v135++ < v132;
              if (!v37) {
                goto LABEL_162;
              }
            }
            int v136 = v132 - v135;
            if (v132 - v135 < v165) {
              ++v136;
            }
          }
          __int16 v122 = *(unsigned __int8 **)(a1
                                     + 32 * v136
                                     + 8
                                     * ((v130 >> (v132 - v136)) & 1 | (2
                                                                                   * ((v131 >> (v132 - v136)) & 1)))
                                     + 4456);
        }
        uint64_t v121 = v163;
        if (v122 != a5) {
          uint64_t v121 = 0;
        }
      }
      int v137 = *((_DWORD *)v122 + 1);
      int v138 = *((_DWORD *)v122 + 2);
      uint64_t v139 = *(void *)&v122[8 * v121 + 136];
      uint64_t v140 = (char *)(*(uint64_t (**)(void, unint64_t))(**(void **)(v139 + 96) + 24))(*(void *)(v139 + 96), *(void *)(v139 + 104)+ (v118 - v137)+ *(unsigned __int8 *)(v139 + 1) * (unint64_t)((v119 - v138) & 0xFE));
      char v141 = *v140;
      uint64_t result = v140 + 1;
      *((unsigned char *)a10 - 2) = v141;
    }
    *((unsigned char *)a10 - 1) = *result;
  }
  int v142 = 1 << a9;
  if (!v167)
  {
    if (v166)
    {
      uint64_t v143 = (char *)a10 + (2 << a9) - 2;
    }
    else if ((a8 & 0x100) != 0)
    {
      uint64_t v143 = (char *)(a10 - 1);
    }
    else
    {
      uint64_t v143 = v18;
      if ((a8 & 0x1E00) == 0) {
        uint64_t v143 = &v18[2 << a9];
      }
    }
    if (v142 < 2 << a9)
    {
      uint64_t v144 = (2 << a9) - (uint64_t)v142;
      int v145 = v142;
      do
      {
        LOBYTE(a10[v145]) = *v143;
        HIBYTE(a10[v145++]) = v143[1];
        --v144;
      }
      while (v144);
    }
  }
  char v146 = a9 == 31 || v166;
  if ((v146 & 1) == 0)
  {
    uint64_t v147 = 0;
    uint64_t v148 = 0;
    uint64_t v149 = 2 << a9;
    if (v142 <= 1) {
      unsigned int v150 = 1;
    }
    else {
      unsigned int v150 = 1 << a9;
    }
    uint64_t v151 = 2 * v150;
    do
    {
      *((unsigned char *)a10 + (v147 >> 32)) = *((unsigned char *)a10 + v149);
      *((unsigned char *)a10 + (int)v148 + 1) = *((unsigned char *)a10 + (v149 | 1));
      v148 += 2;
      v147 += 0x200000000;
    }
    while (v151 != v148);
  }
  if ((a8 & 0x100) == 0) {
    *(a10 - 1) = *a10;
  }
  if (a9 != 31 && (a8 & 0x1E00) == 0)
  {
    uint64_t v152 = 0;
    uint64_t v153 = 0;
    if (v142 <= 1) {
      unsigned int v154 = 1;
    }
    else {
      unsigned int v154 = 1 << a9;
    }
    uint64_t v155 = 2 * v154;
    do
    {
      v18[v152 >> 32] = *((unsigned char *)a10 - 2);
      v18[(int)v153 + 1] = *((unsigned char *)a10 - 1);
      v153 += 2;
      v152 += 0x200000000;
    }
    while (v155 != v153);
  }
  if ((v99 & 1) == 0)
  {
    int v156 = 2 << a9;
    if (v142 < 2 << a9)
    {
      uint64_t v157 = v156;
      uint64_t v158 = v156 - 2;
      uint64_t v159 = v157 - 1;
      uint64_t v160 = v157 - v142;
      int v161 = 2 * v142;
      do
      {
        v18[v161] = v18[v158];
        v18[v161 + 1] = v18[v159];
        v161 += 2;
        --v160;
      }
      while (v160);
    }
  }
  *(unsigned char *)(v168 + 2) = 1;
  return result;
}

unsigned char *sub_1BBA8D008(unsigned char *result, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, unsigned char *a9)
{
  uint64_t v9 = result;
  if (a7)
  {
    int v11 = a3;
    int v12 = a2;
    int v13 = 2 << a8;
    uint64_t v14 = 2 << a8;
    int v178 = result + 4696;
    int v182 = a4;
    if (!result[4696] && (*((_DWORD *)result + 1107) == a2 || *((_DWORD *)result + 1108) == a3))
    {
      int v15 = a8;
      uint64_t result = (unsigned char *)sub_1BBA8B344((uint64_t)result, 0);
      a8 = v15;
      a4 = v182;
    }
    uint64_t v16 = 1;
    int v17 = *((_DWORD *)v9 + 4);
    uint64_t v18 = (v14 + v12 - v17);
    uint64_t v19 = (v14 + v11 - *((_DWORD *)v9 + 5));
    BOOL v20 = (a7 & 0x1E000) != 0;
    if ((int)v18 <= 0) {
      BOOL v20 = 0;
    }
    int v21 = a7 & 0xF;
    BOOL v180 = v21 != 0;
    BOOL v22 = (int)v19 > 0 && (a7 & 0xF) != 0;
    if (v20 || v22)
    {
      int v23 = *((_DWORD *)v9 + 1107);
      if (v20)
      {
        int v24 = *((_DWORD *)v9 + 1108);
        int v25 = v11 - v24;
        if (v11 != v24)
        {
          int v26 = v17 - 1;
          int v27 = v26 - v23;
          int v28 = v11 - 1 - v24;
          int v29 = *(unsigned __int8 *)(*((void *)v9 + 235) + 2009);
          int v175 = a8;
          if (a4 < 0)
          {
LABEL_20:
            int v32 = -1;
          }
          else
          {
            int v30 = v29 - a4;
            while ((v12 - v23) >> v30 != v27 >> v30 || v25 >> v30 != v28 >> v30)
            {
              BOOL v31 = v30++ < v29;
              if (!v31) {
                goto LABEL_20;
              }
            }
            int v32 = v29 - v30;
            if (v29 - v30 < a4) {
              ++v32;
            }
          }
          uint64_t v34 = *(void *)&v9[32 * v32
                             + 4456
                             + 8
                             * ((v27 >> (v29 - v32)) & 1 | (2 * ((v28 >> (v29 - v32)) & 1)))];
          int v35 = (char *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(*(void *)(v34 + 136) + 80)
                                                                                     + 24))(*(void *)(*(void *)(v34 + 136) + 80), *(void *)(*(void *)(v34 + 136) + 88)+ (v26 - *(_DWORD *)(v34 + 4))+ **(unsigned __int8 **)(v34 + 136)* (unint64_t)(v11 - 1 - *(_DWORD *)(v34 + 8)), 1);
          char v37 = *v35;
          uint64_t result = v35 + 1;
          char v36 = v37;
          a4 = v182;
          a8 = v175;
          int v21 = a7 & 0xF;
          uint64_t v16 = 1;
          do
          {
            *result++ = v36;
            --v18;
          }
          while (v18);
        }
      }
      if (v12 != v23 && v22)
      {
        int v39 = *((_DWORD *)v9 + 5) - 1;
        int v40 = *((_DWORD *)v9 + 1107);
        int v41 = *((_DWORD *)v9 + 1108);
        int v42 = v12 - 1 - v40;
        int v43 = v39 - v41;
        int v44 = *(unsigned __int8 *)(*((void *)v9 + 235) + 2009);
        if (a4 < 0)
        {
LABEL_37:
          int v48 = -1;
        }
        else
        {
          int v45 = v12 - v40;
          int v46 = v11 - v41;
          int v47 = v44 - a4;
          while (v45 >> v47 != v42 >> v47 || v46 >> v47 != v43 >> v47)
          {
            BOOL v31 = v47++ < v44;
            if (!v31) {
              goto LABEL_37;
            }
          }
          int v48 = v44 - v47;
          if (v44 - v47 < a4) {
            ++v48;
          }
        }
        uint64_t result = 0;
        int v49 = *(unsigned __int8 **)&v9[32 * v48
                                     + 4456
                                     + 8
                                     * ((v42 >> (v44 - v48)) & 1 | (2
                                                                                * ((v43 >> (v44 - v48)) & 1)))];
        BOOL v50 = (unsigned __int8 *)*((void *)v49 + 17);
        uint64_t v51 = *v50;
        unsigned int v52 = v12 - 1 - *((_DWORD *)v49 + 1);
        if ((v52 & 0x80000000) == 0)
        {
          unsigned int v53 = v39 - *((_DWORD *)v49 + 2);
          if ((v53 & 0x80000000) == 0)
          {
            unsigned int v54 = *v49;
            if (v52 >= v54 || v53 >= v54)
            {
              uint64_t result = 0;
            }
            else
            {
              int v56 = v21;
              int v57 = a8;
              uint64_t result = (unsigned char *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)v50 + 10)
                                                                                             + 24))(*((void *)v50 + 10), *((void *)v50 + 11) + v52 + *v50 * (unint64_t)v53, 1);
              uint64_t v16 = 1;
              int v21 = v56;
              a8 = v57;
              a4 = v182;
            }
          }
        }
        uint64_t v58 = v51;
        do
        {
          result[v58] = *result;
          v58 += v51;
          --v19;
        }
        while (v19);
      }
    }
    int v59 = 1 << a8;
    int v184 = &a9[v13];
    uint64_t v60 = *((void *)v9 + 235);
    uint64_t v174 = *(unsigned __int8 *)(v60 + 2013);
    uint64_t v61 = *((int *)v9 + 1107);
    uint64_t v62 = *((void *)v9 + 583);
    uint64_t v63 = v12 - v61;
    uint64_t v181 = *((int *)v9 + 1108);
    int v172 = *((_DWORD *)v9 + 1107);
    uint64_t v173 = v62;
    uint64_t v179 = v11 - v181;
    if (v61 == v12)
    {
      unsigned int v64 = v9;
      int v65 = 1 << a8;
      int v66 = v12;
      BOOL v176 = (a7 & 0xF0) != 0;
      int v67 = a7 & 0x1E000;
      if ((a7 & 0xF0) != 0)
      {
        size_t v68 = v59;
        int v69 = v11;
        uint64_t v70 = v12 - v61;
        int v71 = v21;
        uint64_t v72 = v62;
        uint64_t result = memcpy(a9, (const void *)(v62 + (int)v179), v68);
        uint64_t v62 = v72;
        int v21 = v71;
        int v67 = a7 & 0x1E000;
        uint64_t v63 = v70;
        int v11 = v69;
        a4 = v182;
      }
      if (v21)
      {
        uint64_t result = memcpy(&a9[v65], (const void *)(v62 + v179 + v65), v65);
        a4 = v182;
        BOOL v180 = 1;
      }
      else
      {
        BOOL v180 = 0;
      }
      int v12 = v66;
      uint64_t v9 = v64;
    }
    else
    {
      if (v21)
      {
        int v73 = v12 - 1;
        int v74 = v59 + v11;
        int v75 = *((_DWORD *)a5 + 1);
        if (v75 >= v12 || (int v76 = *a5, v75 + v76 < v12) || (v82 = *((_DWORD *)a5 + 2), v82 > v74) || v82 + v76 <= v74)
        {
          int v77 = v73 - v172;
          int v78 = v74 - v181;
          int v79 = *(unsigned __int8 *)(v60 + 2009);
          if (a4 < 0)
          {
LABEL_61:
            int v81 = -1;
          }
          else
          {
            int v80 = v79 - a4;
            while ((int)v63 >> v80 != v77 >> v80 || (int)v179 >> v80 != v78 >> v80)
            {
              BOOL v31 = v80++ < v79;
              if (!v31) {
                goto LABEL_61;
              }
            }
            int v85 = v79 - v80;
            if (v85 >= a4) {
              int v81 = v85;
            }
            else {
              int v81 = v85 + 1;
            }
          }
          BOOL v83 = 0;
          int v84 = *(unsigned __int8 **)&v9[32 * v81
                                       + 4456
                                       + 8
                                       * ((v77 >> (v79 - v81)) & 1 | (2
                                                                                  * ((v78 >> (v79 - v81)) & 1)))];
          int v75 = *((_DWORD *)v84 + 1);
          int v82 = *((_DWORD *)v84 + 2);
        }
        else
        {
          BOOL v83 = a6 != 3;
          int v84 = a5;
        }
        uint64_t result = 0;
        uint64_t v86 = **((unsigned __int8 **)v84 + 17);
        unsigned int v87 = v73 - v75;
        if ((v87 & 0x80000000) == 0)
        {
          unsigned int v88 = v74 - v82;
          if ((v88 & 0x80000000) == 0)
          {
            unsigned int v89 = *v84;
            if (v87 >= v89 || v88 >= v89)
            {
              uint64_t result = 0;
            }
            else
            {
              unsigned int v91 = *(unsigned __int8 **)&v84[8 * v83 + 136];
              int v177 = a8;
              uint64_t result = (unsigned char *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)v91 + 10)
                                                                                             + 24))(*((void *)v91 + 10), *((void *)v91 + 11) + v87 + *v91 * (unint64_t)v88, 1);
              a8 = v177;
              a4 = v182;
            }
          }
        }
        if (v59 < (int)v14)
        {
          uint64_t v92 = v14 - v59;
          uint64_t v93 = &a9[v59];
          do
          {
            *v93++ = *result;
            result += v86;
            --v92;
          }
          while (v92);
        }
      }
      if ((a7 & 0xF0) != 0)
      {
        int v94 = v12 - 1;
        int v95 = a5;
        int v96 = *((_DWORD *)a5 + 1);
        if (v96 >= v12 || (v97 = *a5, v96 + v97 < v12) || (int v105 = *((_DWORD *)a5 + 2), v105 > v11) || v105 + v97 <= v11)
        {
          int v98 = *((_DWORD *)v9 + 1107);
          int v99 = v94 - v98;
          int v100 = *(unsigned __int8 *)(*((void *)v9 + 235) + 2009);
          int v67 = a7 & 0x1E000;
          if (a4 < 0)
          {
LABEL_89:
            int v103 = -1;
          }
          else
          {
            int v101 = v12 - v98;
            int v102 = v100 - a4;
            while (v101 >> v102 != v99 >> v102)
            {
              BOOL v31 = v102++ < v100;
              if (!v31) {
                goto LABEL_89;
              }
            }
            if (v100 - v102 >= a4) {
              int v103 = v100 - v102;
            }
            else {
              int v103 = v100 - v102 + 1;
            }
          }
          BOOL v104 = 0;
          int v95 = *(unsigned __int8 **)&v9[32 * v103
                                       + 4456
                                       + 8
                                       * ((v99 >> (v100 - v103)) & 1 | (2
                                                                                    * (((v11 - *((_DWORD *)v9 + 1108)) >> (v100 - v103)) & 1)))];
          int v96 = *((_DWORD *)v95 + 1);
          int v105 = *((_DWORD *)v95 + 2);
        }
        else
        {
          BOOL v104 = a6 != 3;
          int v67 = a7 & 0x1E000;
        }
        uint64_t result = 0;
        uint64_t v106 = **((unsigned __int8 **)v95 + 17);
        unsigned int v107 = v94 - v96;
        if ((v107 & 0x80000000) == 0)
        {
          unsigned int v108 = v11 - v105;
          if (((v11 - v105) & 0x80000000) == 0)
          {
            unsigned int v109 = *v95;
            if (v107 >= v109 || v108 >= v109)
            {
              uint64_t result = 0;
            }
            else
            {
              int v111 = *(unsigned __int8 **)&v95[8 * v104 + 136];
              int v112 = v9;
              int v113 = a8;
              uint64_t result = (unsigned char *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)v111 + 10)
                                                                                             + 24))(*((void *)v111 + 10), *((void *)v111 + 11) + v107 + *v111 * (unint64_t)v108, v16);
              a8 = v113;
              uint64_t v9 = v112;
              a4 = v182;
            }
          }
        }
        if (a8 == 31)
        {
          int v65 = v59;
        }
        else
        {
          int v65 = v59;
          if (v59 <= 1) {
            uint64_t v114 = 1;
          }
          else {
            uint64_t v114 = v59;
          }
          unsigned int v115 = a9;
          do
          {
            *v115++ = *result;
            result += v106;
            --v114;
          }
          while (v114);
        }
        BOOL v176 = 1;
      }
      else
      {
        int v65 = v59;
        BOOL v176 = 0;
        int v67 = a7 & 0x1E000;
      }
    }
    if (v181 == v11)
    {
      if ((a7 & 0x1E00) != 0) {
        uint64_t result = memcpy(v184, (const void *)(v173 + 2 * v174 + (int)v63), v65);
      }
      if (v67)
      {
        size_t v116 = v65;
        uint64_t v117 = (const void *)(v173 + 2 * v174 + v63 + v65);
LABEL_152:
        uint64_t result = memcpy(&v184[v65], v117, v116);
        LOBYTE(v67) = 1;
      }
    }
    else
    {
      if ((a7 & 0x1E00) != 0)
      {
        int v118 = v11 - 1;
        int v119 = *((_DWORD *)a5 + 1);
        if (v119 > v12
          || (int v120 = *a5, v119 + v120 <= v12)
          || (int v121 = *((_DWORD *)a5 + 2), v121 >= v11)
          || v121 + v120 < v11)
        {
          int v124 = *((_DWORD *)v9 + 1108);
          int v125 = v118 - v124;
          int v126 = *(unsigned __int8 *)(*((void *)v9 + 235) + 2009);
          if (a4 < 0)
          {
LABEL_129:
            int v129 = -1;
          }
          else
          {
            int v127 = v11 - v124;
            int v128 = v126 - a4;
            while (v127 >> v128 != v125 >> v128)
            {
              BOOL v31 = v128++ < v126;
              if (!v31) {
                goto LABEL_129;
              }
            }
            if (v126 - v128 >= a4) {
              int v129 = v126 - v128;
            }
            else {
              int v129 = v126 - v128 + 1;
            }
          }
          BOOL v122 = 0;
          int v123 = *(unsigned __int8 **)&v9[32 * v129
                                        + 4456
                                        + 8
                                        * (((v12 - *((_DWORD *)v9 + 1107)) >> (v126 - v129)) & 1 | (2 * ((v125 >> (v126 - v129)) & 1)))];
          int v119 = *((_DWORD *)v123 + 1);
          int v121 = *((_DWORD *)v123 + 2);
        }
        else
        {
          BOOL v122 = a6 != 3;
          int v123 = a5;
        }
        unsigned int v130 = v118 - v121;
        int v131 = *(unsigned __int8 **)&v123[8 * v122 + 136];
        int v132 = (const void *)(*(uint64_t (**)(void, unint64_t))(**((void **)v131 + 10) + 24))(*((void *)v131 + 10), *((void *)v131 + 11) + (v12 - v119) + *v131 * (unint64_t)v130);
        uint64_t result = memcpy(v184, v132, v65);
        a4 = v182;
      }
      if (v67)
      {
        int v133 = v65 + v12;
        int v134 = v11 - 1;
        int v135 = *((_DWORD *)a5 + 1);
        if (v135 > v65 + v12
          || (int v136 = *a5, v135 + v136 <= v133)
          || (int v137 = *((_DWORD *)a5 + 2), v137 >= v11)
          || v137 + v136 < v11)
        {
          int v140 = *((_DWORD *)v9 + 1107);
          int v141 = *((_DWORD *)v9 + 1108);
          int v142 = v133 - v140;
          int v143 = v134 - v141;
          int v144 = *(unsigned __int8 *)(*((void *)v9 + 235) + 2009);
          if (a4 < 0)
          {
LABEL_146:
            int v148 = -1;
          }
          else
          {
            int v145 = v12 - v140;
            int v146 = v11 - v141;
            int v147 = v144 - a4;
            while (v145 >> v147 != v142 >> v147 || v146 >> v147 != v143 >> v147)
            {
              BOOL v31 = v147++ < v144;
              if (!v31) {
                goto LABEL_146;
              }
            }
            if (v144 - v147 >= a4) {
              int v148 = v144 - v147;
            }
            else {
              int v148 = v144 - v147 + 1;
            }
          }
          BOOL v138 = 0;
          uint64_t v139 = *(unsigned __int8 **)&v9[32 * v148
                                        + 4456
                                        + 8
                                        * ((v142 >> (v144 - v148)) & 1 | (2
                                                                                      * ((v143 >> (v144 - v148)) & 1)))];
          int v135 = *((_DWORD *)v139 + 1);
          int v137 = *((_DWORD *)v139 + 2);
        }
        else
        {
          BOOL v138 = a6 != 3;
          uint64_t v139 = a5;
        }
        uint64_t v149 = (v133 - v135);
        unsigned int v150 = *(unsigned __int8 **)&v139[8 * v138 + 136];
        uint64_t v117 = (const void *)(*(uint64_t (**)(void, unint64_t))(**((void **)v150 + 10) + 24))(*((void *)v150 + 10), *((void *)v150 + 11) + v149 + *v150 * (unint64_t)(v134 - v137));
        size_t v116 = v65;
        goto LABEL_152;
      }
    }
    if ((a7 & 0x100) != 0)
    {
      if (v172 == v12 || v181 == v11)
      {
        int v158 = v63 + 2 * v174;
        if ((int)v63 <= 0) {
          int v158 = 0;
        }
        uint64_t result = (unsigned char *)(v173 + (int)v179 + v158 - 1);
      }
      else
      {
        int v151 = v12 - 1;
        int v152 = v11 - 1;
        uint64_t v153 = a5;
        int v154 = *((_DWORD *)a5 + 1);
        if (v154 >= v12
          || (int v155 = *a5, v154 + v155 < v12)
          || (int v156 = *((_DWORD *)a5 + 2), v156 >= v11)
          || v156 + v155 < v11)
        {
          int v159 = *((_DWORD *)v9 + 1107);
          int v160 = *((_DWORD *)v9 + 1108);
          int v161 = v151 - v159;
          int v162 = v152 - v160;
          int v163 = *(unsigned __int8 *)(*((void *)v9 + 235) + 2009);
          if (v182 < 0)
          {
LABEL_169:
            int v167 = -1;
          }
          else
          {
            int v164 = v12 - v159;
            int v165 = v11 - v160;
            int v166 = v163 - v182;
            while (v164 >> v166 != v161 >> v166 || v165 >> v166 != v162 >> v166)
            {
              BOOL v31 = v166++ < v163;
              if (!v31) {
                goto LABEL_169;
              }
            }
            if (v163 - v166 >= v182) {
              int v167 = v163 - v166;
            }
            else {
              int v167 = v163 - v166 + 1;
            }
          }
          BOOL v157 = 0;
          uint64_t v153 = *(unsigned __int8 **)&v9[32 * v167
                                        + 4456
                                        + 8
                                        * ((v161 >> (v163 - v167)) & 1 | (2
                                                                                      * ((v162 >> (v163 - v167)) & 1)))];
          int v154 = *((_DWORD *)v153 + 1);
          int v156 = *((_DWORD *)v153 + 2);
        }
        else
        {
          BOOL v157 = a6 != 3;
        }
        uint64_t v168 = (v151 - v154);
        uint64_t v169 = *(unsigned __int8 **)&v153[8 * v157 + 136];
        uint64_t result = (unsigned char *)(*(uint64_t (**)(void, unint64_t))(**((void **)v169 + 10) + 24))(*((void *)v169 + 10), *((void *)v169 + 11) + v168 + *v169 * (unint64_t)(v152 - v156));
      }
      *(a9 - 1) = *result;
    }
    if (v180)
    {
      if (v176) {
        goto LABEL_181;
      }
    }
    else
    {
      if (v176)
      {
        uint64_t v170 = &a9[v65 - 1];
      }
      else if ((a7 & 0x100) != 0)
      {
        uint64_t v170 = a9 - 1;
      }
      else
      {
        uint64_t v170 = v184;
        if ((a7 & 0x1E00) == 0) {
          uint64_t v170 = &v184[v65];
        }
      }
      uint64_t result = memset(&a9[v65], *v170, v65);
      if (v176)
      {
LABEL_181:
        if ((a7 & 0x100) != 0) {
          goto LABEL_182;
        }
        goto LABEL_194;
      }
    }
    uint64_t result = memset(a9, a9[v65], v65);
    if ((a7 & 0x100) != 0)
    {
LABEL_182:
      if ((a7 & 0x1E00) != 0) {
        goto LABEL_183;
      }
      goto LABEL_195;
    }
LABEL_194:
    *(a9 - 1) = *a9;
    if ((a7 & 0x1E00) != 0)
    {
LABEL_183:
      if (v67)
      {
LABEL_185:
        v178[2] = 1;
        return result;
      }
LABEL_184:
      uint64_t result = memset(&v184[v65], v184[v65 - 1], v65);
      goto LABEL_185;
    }
LABEL_195:
    uint64_t result = memset(v184, *(a9 - 1), v65);
    if (v67) {
      goto LABEL_185;
    }
    goto LABEL_184;
  }
  int v33 = 128 << *(unsigned char *)(*((void *)result + 235) + 194);

  return memset(a9 - 1, v33, (4 << a8) | 1);
}

uint64_t sub_1BBA8DCD4(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >= 1)
  {
    for (int i = 0; i != a2; ++i)
    {
      if ((int)result >= 1)
      {
        uint64_t v7 = 0;
        do
        {
          *(unsigned char *)(a6 + v7) = *(unsigned char *)(a4 + v7);
          v7 += 2;
        }
        while (v7 < (int)result);
      }
      a4 += a3;
      a6 += a5;
    }
  }
  return result;
}

void *sub_1BBA8DD1C(void *result, int a2, uint64_t a3, char *__src, uint64_t a5, char *__dst)
{
  if (a2)
  {
    size_t v10 = (int)result;
    uint64_t v11 = a2;
    do
    {
      --v11;
      uint64_t result = memcpy(__dst, __src, v10);
      __dst += a5;
      __src += a3;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1BBA8DD88(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) + a2;
}

uint64_t sub_1BBA8DD94(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v2 = operator new[](*(void *)(a1 + 8), MEMORY[0x1E4FBA2D0]);
  *(void *)(a1 + 16) = v2;
  if (v2) {
    return 0;
  }
  else {
    return 4294954392;
  }
}

void sub_1BBA8DDE0(void *a1)
{
  *a1 = &unk_1F14EE2B0;
  uint64_t v1 = a1[2];
  if (v1) {
    MEMORY[0x1C18605E0](v1, 0x1000C4077774924);
  }

  JUMPOUT(0x1C18605E0);
}

void *sub_1BBA8DE5C(void *a1)
{
  *a1 = &unk_1F14EE2B0;
  uint64_t v2 = a1[2];
  if (v2) {
    MEMORY[0x1C18605E0](v2, 0x1000C4077774924);
  }
  return a1;
}

double sub_1BBA8DEB8(uint64_t a1, unsigned __int8 *a2, int a3, int a4, char a5, __int16 a6)
{
  int v10 = a3 - *(_DWORD *)(a1 + 4428);
  int v11 = a4 - *(_DWORD *)(a1 + 4432);
  *((_DWORD *)a2 + 1) = a3;
  *((_DWORD *)a2 + 2) = a4;
  bzero(*((void **)a2 + 11), 2 * ((unint64_t)*a2 >> 3) * ((unint64_t)*a2 >> 3));
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0xFFFC | a5 & 3;
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0x1FF | (a6 << 9);
  sub_1BBA8E004((void **)a2, *(unsigned __int8 *)(*(void *)(a1 + 1872) + 10) < 2u);
  int v12 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2013);
  int v13 = v10 + v11 * v12;
  uint64_t v14 = *(void *)(a1 + 4872) + v13;
  *((void *)a2 + 3) = *(void *)(a1 + 4864);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *(void *)(a1 + 4904) + v13;
  *((void *)a2 + 7) = *(void *)(a1 + 4896);
  *((void *)a2 + 8) = v15;
  int v16 = v10 + (v11 >> 1) * v12;
  uint64_t v17 = *(void *)(a1 + 4888) + v16;
  *((void *)a2 + 5) = *(void *)(a1 + 4880);
  *((void *)a2 + 6) = v17;
  uint64_t v18 = *(void *)(a1 + 4920) + v16;
  *((void *)a2 + 9) = *(void *)(a1 + 4912);
  *((void *)a2 + 10) = v18;
  **((unsigned char **)a2 + 17) = *a2;
  if (1 << *(unsigned char *)(*(void *)(a1 + 1880) + 2012) <= *a2 >> 1) {
    char v19 = *a2 >> 1;
  }
  else {
    char v19 = 1 << *(unsigned char *)(*(void *)(a1 + 1880) + 2012);
  }
  *(unsigned char *)(*((void *)a2 + 17) + 1) = v19;
  *((_DWORD *)a2 + 46) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 168) = xmmword_1BBB6F8F0;
  *((_WORD *)a2 + 94) = 2;
  *((_DWORD *)a2 + 52) = 0;
  *((_OWORD *)a2 + 12) = xmmword_1BBB6F8F0;
  *((_WORD *)a2 + 106) = 0;
  return result;
}

void sub_1BBA8E004(void **a1, int a2)
{
  bzero(a1[12], 16 * ((unint64_t)*(unsigned __int8 *)a1 >> 2) * ((unint64_t)*(unsigned __int8 *)a1 >> 2));
  if (a2)
  {
    LODWORD(v4) = *(unsigned __int8 *)a1;
    if (v4 >= 4)
    {
      unsigned int v5 = 0;
      uint64_t v6 = (char *)a1[12];
      do
      {
        if (v4 >= 4)
        {
          unint64_t v8 = 0;
          uint64_t v9 = v6 + 9;
          do
          {
            *(_WORD *)(v9 - 1) = -1;
            ++v8;
            unint64_t v4 = *(unsigned __int8 *)a1;
            v9 += 16;
          }
          while (v8 < v4 >> 2);
          unint64_t v7 = v4 >> 2;
        }
        else
        {
          LODWORD(v7) = 0;
        }
        v6 += 16 * v7;
        ++v5;
      }
      while (v5 < v7);
    }
  }
}

void sub_1BBA8E0A0(uint64_t a1, unsigned __int8 *a2, int a3, int a4, char a5, char a6, __int16 a7)
{
  sub_1BBA8DEB8(a1, a2, a3, a4, a5, a7);
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0xFFF3 | (4 * (a6 & 3));
  unint64_t v9 = *a2;
  if (v9 >= 8)
  {
    uint64_t v10 = 0;
    int v11 = (_WORD *)*((void *)a2 + 11);
    unint64_t v12 = v9 >> 3;
    int v13 = v11;
    do
    {
      uint64_t v14 = v13;
      unint64_t v15 = v12;
      do
      {
        *v14++ = *v11;
        --v15;
      }
      while (v15);
      ++v10;
      v13 += v12;
    }
    while (v10 != v12);
  }
}

uint64_t sub_1BBA8E12C(uint64_t result, _WORD *a2, char a3, char a4, int a5, uint64_t a6, __int16 a7)
{
  if (a5) {
    __int16 v7 = 128;
  }
  else {
    __int16 v7 = 0;
  }
  *a2 = v7 & 0xFF8C | a3 & 3 | (16 * (a4 & 7)) | (a7 << 9) | *a2 & 0x10C;
  unsigned int v8 = *(unsigned __int8 *)(*(void *)(result + 1880) + 2013) >> a3;
  if (v8 >= 8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v8 >> 3;
    int v11 = a2;
    do
    {
      unint64_t v12 = v11;
      uint64_t v13 = v10;
      do
      {
        *v12++ = *a2;
        --v13;
      }
      while (v13);
      ++v9;
      v11 += a6;
    }
    while (v9 != v10);
  }
  return result;
}

void *sub_1BBA8E1A8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5, int a6)
{
  double result = sub_1BBA8E388(a2, a3, a4, a5, a6);
  uint64_t v13 = 0;
  unsigned int v14 = a4 - *((_DWORD *)a3 + 1);
  if ((v14 & 0x80000000) == 0)
  {
    unsigned int v15 = a5 - *((_DWORD *)a3 + 2);
    if ((v15 & 0x80000000) == 0)
    {
      unint64_t v16 = *a3;
      if (v14 >= v16 || v15 >= v16) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = (char *)(*((void *)a3 + 12) + 16
      }
                                            * ((v14 >> 2) + (v16 >> 2) * (unint64_t)(v15 >> 2)));
    }
  }
  uint64_t v18 = 0;
  unsigned int v19 = a4 - *((_DWORD *)a2 + 1);
  if ((v19 & 0x80000000) == 0)
  {
    unsigned int v20 = a5 - *((_DWORD *)a2 + 2);
    if ((v20 & 0x80000000) == 0)
    {
      unint64_t v21 = *a2;
      if (v19 >= v21 || v20 >= v21) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = (char *)(*((void *)a2 + 12) + 16
      }
                                            * ((v19 >> 2) + (v21 >> 2) * (unint64_t)(v20 >> 2)));
    }
  }
  if (a6 >= 4)
  {
    unsigned int v23 = a6 >> 2;
    size_t v24 = 16 * (a6 >> 2);
    do
    {
      double result = memcpy(v18, v13, v24);
      v18 += (4 * *a2) & 0x3F0;
      v13 += (4 * *a3) & 0x3F0;
      --v23;
    }
    while (v23);
  }
  if (!*(unsigned char *)(a1 + 8120))
  {
    double result = sub_1BBA8E4A4(a1, *((unsigned __int8 **)a2 + 17), *((unsigned __int8 **)a3 + 17), a4 - *((_DWORD *)a2 + 1), a5 - *((_DWORD *)a2 + 2), a4 - *((_DWORD *)a3 + 1), a5 - *((_DWORD *)a3 + 2), **((unsigned __int8 **)a3 + 17));
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t v25 = *((void *)a2 + 17);
      uint64_t v26 = *((void *)a3 + 17);
      int v27 = a4 - *((_DWORD *)a2 + 1);
      int v28 = a5 - *((_DWORD *)a2 + 2);
      int v29 = a4 - *((_DWORD *)a3 + 1);
      int v30 = a5 - *((_DWORD *)a3 + 2);
      uint64_t v31 = *(unsigned __int8 *)(v26 + 1);
      return sub_1BBA8E71C(a1, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  return result;
}

unsigned __int8 *sub_1BBA8E388(unsigned __int8 *result, unsigned __int8 *a2, int a3, int a4, int a5)
{
  uint64_t v6 = result;
  __int16 v7 = 0;
  unsigned int v8 = a3 - *((_DWORD *)result + 1);
  if ((v8 & 0x80000000) == 0)
  {
    unsigned int v9 = a4 - *((_DWORD *)result + 2);
    if ((v9 & 0x80000000) == 0)
    {
      unint64_t v10 = *result;
      if (v8 >= v10 || v9 >= v10) {
        __int16 v7 = 0;
      }
      else {
        __int16 v7 = (char *)(*((void *)result + 11) + 2
      }
                                               * ((v8 >> 3) + (v10 >> 3) * (unint64_t)(v9 >> 3)));
    }
  }
  unint64_t v12 = 0;
  unsigned int v13 = a3 - *((_DWORD *)a2 + 1);
  if ((v13 & 0x80000000) == 0)
  {
    unsigned int v14 = a4 - *((_DWORD *)a2 + 2);
    if ((v14 & 0x80000000) == 0)
    {
      unint64_t v15 = *a2;
      if (v13 >= v15 || v14 >= v15) {
        unint64_t v12 = 0;
      }
      else {
        unint64_t v12 = (char *)(*((void *)a2 + 11) + 2 * ((v13 >> 3) + (v15 >> 3) * (unint64_t)(v14 >> 3)));
      }
    }
  }
  if (a5 >= 8)
  {
    size_t v17 = 2 * (a5 >> 3);
    if (a5 >> 3 <= 1) {
      int v18 = 1;
    }
    else {
      int v18 = a5 >> 3;
    }
    do
    {
      double result = (unsigned __int8 *)memcpy(v7, v12, v17);
      v7 += ((unint64_t)*v6 >> 2) & 0x3E;
      v12 += ((unint64_t)*a2 >> 2) & 0x3E;
      --v18;
    }
    while (v18);
  }
  return result;
}

void *sub_1BBA8E4A4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v16 = *a3;
  size_t __na = (*(uint64_t (**)(void, uint64_t))(**((void **)a3 + 10) + 24))(*((void *)a3 + 10), *((void *)a3 + 11) + a6 + v16 * a7);
  uint64_t v17 = *a2;
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 10) + 24))(*((void *)a2 + 10), *((void *)a2 + 11) + a4 + v17 * a5);
  uint64_t v55 = a1;
  double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, size_t, uint64_t, uint64_t))(a1 + 8144))(a8, a8, v16, __na, v17, v18);
  int v52 = a5;
  int v53 = a7;
  uint64_t v20 = (uint64_t)a5 >> 2;
  unint64_t v21 = a2;
  BOOL v22 = a3;
  signed int v23 = a8;
  unint64_t v24 = *(unsigned __int8 *)v21;
  uint64_t v25 = (uint64_t)a4 >> 2;
  uint64_t v26 = (uint64_t)a7 >> 2;
  unint64_t v27 = *(unsigned __int8 *)v22;
  int v54 = a6;
  uint64_t v28 = (uint64_t)a6 >> 2;
  size_t v29 = (uint64_t)(int)a8 >> 2;
  __uint64_t n = v29;
  uint64_t v50 = v25;
  int v51 = v20;
  uint64_t v48 = v28;
  int v49 = v26;
  if (a8 < 4)
  {
    uint64_t v30 = a1;
    if (!v23) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  int v47 = a4;
  unint64_t v31 = v24 >> 2;
  unint64_t v32 = v27 >> 2;
  int v33 = (char *)(v22[4] + v28 + (int)(v27 >> 2) * (uint64_t)(int)v26);
  uint64_t v34 = (char *)(v21[4] + v25 + (int)(v24 >> 2) * (uint64_t)(int)v20);
  uint64_t v35 = (uint64_t)(int)a8 >> 2;
  do
  {
    --v35;
    double result = memcpy(v34, v33, v29);
    v34 += v31;
    v33 += v32;
  }
  while (v35);
  LODWORD(v24) = *(unsigned __int8 *)v21;
  LODWORD(v27) = *(unsigned __int8 *)v22;
  uint64_t v30 = v55;
  a4 = v47;
  if (v23)
  {
LABEL_7:
    uint64_t v36 = a4;
    uint64_t v37 = 2 * v24;
    uint64_t v38 = 2 * v27;
    uint64_t v39 = v23;
    int v40 = (char *)(v22[7] + 2 * (v54 + (int)v27 * (uint64_t)v53));
    int v41 = (char *)(v21[7] + 2 * (v36 + (int)v24 * (uint64_t)v52));
    do
    {
      --v39;
      double result = memcpy(v41, v40, 2 * v23);
      v41 += v37;
      v40 += v38;
    }
    while (v39);
  }
LABEL_9:
  if (*(unsigned char *)(*(void *)(v30 + 952) + 352) && v23 >= 4)
  {
    unint64_t v42 = (unint64_t)*(unsigned __int8 *)v21 >> 2;
    unint64_t v43 = (unint64_t)*(unsigned __int8 *)v22 >> 2;
    int v44 = (char *)(v22[1] + v48 + (int)v43 * (uint64_t)v49);
    int v45 = (char *)(v21[1] + v50 + (int)v42 * (uint64_t)v51);
    size_t v46 = __n;
    do
    {
      --v46;
      double result = memcpy(v45, v44, __n);
      v45 += v42;
      v44 += v43;
    }
    while (v46);
  }
  return result;
}

void *sub_1BBA8E71C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  unsigned int v76 = 2 * a8;
  uint64_t v15 = 2 * *(unsigned __int8 *)(a3 + 1);
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a3 + 96) + 24))(*(void *)(a3 + 96), *(void *)(a3 + 104) + a6 + (int)v15 * (uint64_t)(a7 >> 1));
  uint64_t v17 = 2 * *(unsigned __int8 *)(a2 + 1);
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96), *(void *)(a2 + 104) + a4 + (int)v17 * (uint64_t)(a5 >> 1));
  uint64_t v72 = a1;
  double result = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v76, a8, v15, v16, v17, v18);
  int v63 = a5;
  int v64 = a4;
  uint64_t v20 = (uint64_t)a5 >> 3;
  unint64_t v21 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v22 = (uint64_t)a7 >> 3;
  unint64_t v23 = *(unsigned __int8 *)(a3 + 1);
  int v66 = a6;
  uint64_t v68 = (uint64_t)a4 >> 3;
  uint64_t v24 = (uint64_t)a6 >> 3;
  size_t v25 = a8 >> 2;
  int v75 = v22;
  unsigned int v77 = a8;
  size_t v73 = v25;
  uint64_t v74 = v24;
  int v69 = v20;
  if (a8 >= 4)
  {
    unint64_t v28 = v21 >> 2;
    unint64_t v29 = v23 >> 2;
    uint64_t v30 = ((uint64_t)a4 >> 3) + (int)(v21 >> 2) * (uint64_t)(int)v20;
    uint64_t v31 = a3;
    unint64_t v32 = (char *)(*(void *)(a3 + 40) + v24 + (int)(v23 >> 2) * (uint64_t)(int)v22);
    int v33 = (char *)(*(void *)(a2 + 40) + v30);
    uint64_t v34 = a8 >> 2;
    uint64_t v26 = a2;
    do
    {
      --v34;
      memcpy(v33, v32, v25);
      v33 += v28;
      v32 += v29;
    }
    while (v34);
    uint64_t v27 = v31;
    unint64_t v35 = (unint64_t)*(unsigned __int8 *)(v26 + 1) >> 2;
    unint64_t v36 = (unint64_t)*(unsigned __int8 *)(v31 + 1) >> 2;
    uint64_t v37 = (char *)(*(void *)(v31 + 48) + v74 + (int)v36 * (uint64_t)v75);
    uint64_t v38 = (char *)(*(void *)(v26 + 48) + v68 + (int)v35 * (uint64_t)v69);
    size_t v39 = v25;
    do
    {
      --v39;
      double result = memcpy(v38, v37, v25);
      v38 += v35;
      v37 += v36;
    }
    while (v39);
    LODWORD(v21) = *(unsigned __int8 *)(v26 + 1);
    LODWORD(v23) = *(unsigned __int8 *)(v31 + 1);
  }
  else
  {
    uint64_t v26 = a2;
    uint64_t v27 = a3;
  }
  if (v77)
  {
    uint64_t v40 = (uint64_t)v63 >> 1;
    uint64_t v41 = (uint64_t)v64 >> 1;
    uint64_t v42 = 2 * v21;
    uint64_t v43 = 2 * v23;
    uint64_t v44 = v77;
    uint64_t v71 = (uint64_t)a7 >> 1;
    uint64_t v65 = (uint64_t)v66 >> 1;
    uint64_t v67 = v41;
    int v45 = (char *)(*(void *)(v27 + 64) + 2 * (v65 + (int)v23 * (uint64_t)(int)v71));
    size_t v46 = (char *)(*(void *)(v26 + 64) + 2 * (v41 + (int)v21 * (uint64_t)(int)v40));
    uint64_t v47 = v77;
    size_t v48 = 2 * v77;
    do
    {
      --v47;
      memcpy(v46, v45, v48);
      v46 += v42;
      v45 += v43;
    }
    while (v47);
    uint64_t v49 = 2 * *(unsigned __int8 *)(v26 + 1);
    uint64_t v50 = 2 * *(unsigned __int8 *)(v27 + 1);
    int v51 = (char *)(*(void *)(v27 + 72) + 2 * (v65 + *(unsigned __int8 *)(v27 + 1) * (uint64_t)(int)v71));
    int v52 = (char *)(*(void *)(v26 + 72) + 2 * (v67 + *(unsigned __int8 *)(v26 + 1) * (uint64_t)(int)v40));
    do
    {
      --v44;
      double result = memcpy(v52, v51, v48);
      v52 += v49;
      v51 += v50;
    }
    while (v44);
  }
  if (*(unsigned char *)(*(void *)(v72 + 952) + 352) && v77 >= 4)
  {
    unint64_t v53 = (unint64_t)*(unsigned __int8 *)(v26 + 1) >> 2;
    unint64_t v54 = (unint64_t)*(unsigned __int8 *)(v27 + 1) >> 2;
    uint64_t v55 = (char *)(*(void *)(v27 + 16) + v74 + (int)v54 * (uint64_t)v75);
    int v56 = (char *)(*(void *)(v26 + 16) + v68 + (int)v53 * (uint64_t)v69);
    size_t v57 = v73;
    do
    {
      --v57;
      memcpy(v56, v55, v73);
      v56 += v53;
      v55 += v54;
    }
    while (v57);
    unint64_t v58 = (unint64_t)*(unsigned __int8 *)(v26 + 1) >> 2;
    unint64_t v59 = (unint64_t)*(unsigned __int8 *)(v27 + 1) >> 2;
    uint64_t v60 = (char *)(*(void *)(v27 + 24) + v74 + (int)v59 * (uint64_t)v75);
    uint64_t v61 = (char *)(*(void *)(v26 + 24) + v68 + (int)v58 * (uint64_t)v69);
    size_t v62 = v73;
    do
    {
      --v62;
      double result = memcpy(v61, v60, v73);
      v61 += v58;
      v60 += v59;
    }
    while (v62);
  }
  return result;
}

int *sub_1BBA8EAB4(int *result, int a2)
{
  int v2 = a2;
  size_t v3 = result;
  unint64_t v4 = (unsigned __int8 *)*((void *)result + 557);
  uint64_t v5 = *(void *)(*((void *)result + 234) + 1360);
  uint64_t v6 = *(void *)(v5 + 488);
  uint64_t v7 = *(void *)(v5 + 552);
  int v8 = result[1107];
  int v9 = result[1108];
  if ((v9 | v8) < 0 || *(_DWORD *)(v5 + 276) <= v8 || *(_DWORD *)(v5 + 280) <= v9)
  {
    unint64_t v10 = 0;
    int v11 = 0;
  }
  else
  {
    unint64_t v10 = (char *)(*(void *)(v5 + 512) + 2 * (v6 * ((uint64_t)v9 >> 3) + (v8 >> 3)));
    int v11 = (char *)(*(void *)(v5 + 576) + 16 * (v7 * ((uint64_t)v9 >> 2) + (v8 >> 2)));
  }
  unint64_t v12 = 0;
  unsigned int v13 = v8 - *((_DWORD *)v4 + 1);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v15 = 0;
  }
  else
  {
    unsigned int v14 = v9 - *((_DWORD *)v4 + 2);
    uint64_t v15 = 0;
    if ((v14 & 0x80000000) == 0)
    {
      unint64_t v16 = *v4;
      if (v13 >= v16 || v14 >= v16)
      {
        unint64_t v12 = 0;
        uint64_t v15 = 0;
      }
      else
      {
        unint64_t v12 = (char *)(*((void *)v4 + 11) + 2 * ((v13 >> 3) + (v16 >> 3) * (unint64_t)(v14 >> 3)));
        uint64_t v15 = (char *)(*((void *)v4 + 12) + 16
                                            * ((v13 >> 2) + (v16 >> 2) * (unint64_t)(v14 >> 2)));
      }
    }
  }
  int v18 = v4[1];
  int v19 = v8 + v18;
  if (result[4] < v8 + v18) {
    int v19 = result[4];
  }
  int v20 = v9 + v18;
  if (result[5] < v20) {
    int v20 = result[5];
  }
  int v21 = v20 - v9 + 7;
  if (v21 >= 8)
  {
    int v22 = (v19 - v8 + 7) >> 3;
    int v23 = v21 >> 3;
    int v45 = 2 * v22;
    uint64_t v46 = v7;
    int v24 = 2 * v23;
    size_t v25 = 2 * v22;
    if (v23 <= 1) {
      int v26 = 1;
    }
    else {
      int v26 = v23;
    }
    uint64_t v27 = 2 * v6;
    do
    {
      memcpy(v10, v12, v25);
      v12 += ((unint64_t)*v4 >> 2) & 0x3E;
      v10 += v27;
      --v26;
    }
    while (v26);
    if (v24 <= 1) {
      int v28 = 1;
    }
    else {
      int v28 = v24;
    }
    int v2 = a2;
    do
    {
      double result = (int *)memcpy(v11, v15, 16 * v45);
      v15 += (4 * *v4) & 0x3F0;
      v11 += 16 * v46;
      --v28;
    }
    while (v28);
  }
  if (v2)
  {
    uint64_t v29 = 0;
    char v30 = 1;
    do
    {
      uint64_t v31 = 0;
      char v32 = v30;
      uint64_t v33 = *((void *)v4 + 17);
      uint64_t v34 = v4[1];
      uint64_t v35 = *(unsigned __int8 *)(v33 + v29) << v29;
      int v36 = v3[1107];
      int v37 = v3[1108];
      unsigned int v38 = v36 - *((_DWORD *)v4 + 1);
      if ((v38 & 0x80000000) == 0)
      {
        unsigned int v39 = v37 - *((_DWORD *)v4 + 2);
        if ((v39 & 0x80000000) == 0)
        {
          unsigned int v40 = *v4;
          if (v38 >= v40 || v39 >= v40)
          {
            uint64_t v31 = 0;
          }
          else
          {
            uint64_t v31 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v33 + 16 * v29 + 80) + 24))(*(void *)(v33 + 16 * v29 + 80), *(void *)(v33 + 16 * v29 + 88) + v38 + v35 * (unint64_t)(v39 >> v29));
            int v36 = v3[1107];
            int v37 = v3[1108];
          }
        }
      }
      uint64_t v42 = *(void *)(*((void *)v3 + 234) + 1360);
      uint64_t v43 = *(void *)(v42 + 8 * v29 + 112);
      uint64_t v44 = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v42 + 16))(v42, (v36 >> v29), (v37 >> v29), v29);
      double result = (int *)(*((uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v3 + 1018))(v34, v34 >> v29, v35, v31, v43, v44);
      char v30 = 0;
      uint64_t v29 = 1;
    }
    while ((v32 & 1) != 0);
  }
  return result;
}

uint64_t sub_1BBA8EDCC(uint64_t result, int a2, int a3, unsigned __int8 a4)
{
  switch(a2)
  {
    case 0:
      if ((((result & 0xF0) != 0) & a4) != 0) {
        int v4 = 15;
      }
      else {
        int v4 = 0;
      }
      if ((((result & 0x1E00) != 0) & a3) != 0) {
        int v5 = 122880;
      }
      else {
        int v5 = 0;
      }
      double result = v5 | v4 | result;
      break;
    case 1:
      double result = result & 0xFFFFFF00 | (((result & 0x1E00) != 0) << 8) | 0xF0;
      break;
    case 2:
      if (a3) {
        int v6 = 122880;
      }
      else {
        int v6 = 0;
      }
      double result = v6 | (((result & 0xF0) != 0) << 8) | result | 0x1E00;
      break;
    case 3:
      double result = result & 0xFFFE0000 | 0x1FF0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1BBA8EE84(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8)
{
  if (*(unsigned char *)(a1 + 800))
  {
    sub_1BBA8EEF8(a1, a2, a3, *(unsigned __int8 **)(a1 + 848), a4, a5, a6, a7, a8);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 1872);
    sub_1BBAD025C(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1BBA8EEF8(uint64_t a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7, int a8, __int32 *a9)
{
  _DWORD v17[2] = *MEMORY[0x1E4F143B8];
  v17[0] = 0;
  v17[1] = 0;
  memset(v16, 0, sizeof(v16));
  sub_1BBA8EFD8(a1, a2, a3, a4, a7, a8, v17, v16);
  sub_1BBA180C8(*(void *)(a1 + 1872), a2, a3, a5, a6, a7, a8, a9, v17, (uint64_t)v16);
}

uint64_t sub_1BBA8EFD8(uint64_t result, int a2, int a3, unsigned __int8 *a4, int a5, int a6, unint64_t *a7, unint64_t *a8)
{
  uint64_t v8 = *(void *)(result + 1880);
  int v9 = 1 << (*(unsigned char *)(v8 + 2008) - 1);
  int v10 = a5 + a2;
  int v11 = a6 + a3;
  int v12 = a6 + a3 - 1;
  int v13 = *((_DWORD *)a4 + 1);
  int v14 = a2 - v13;
  if (a2 == v13)
  {
    int v15 = *((_DWORD *)a4 + 2);
    *a7 = *((void *)a4 + 15) + 16 * ((v11 - v15) >> 2);
    uint64_t v16 = *((void *)a4 + 15) + 16 * ((v12 - v15) >> 2);
  }
  else
  {
    unint64_t v20 = 0;
    if ((word_1BBBA39F0[(((*(unsigned __int8 *)(v8 + 2013) - 1) & v12) - *(unsigned __int8 *)(v8 + 2013) + 64) >> 2] >> (((*(unsigned __int8 *)(v8 + 2013) - 1) & a2) >> 2)))
    {
      unsigned int v21 = ~v13 + a2;
      int v15 = *((_DWORD *)a4 + 2);
      if ((v21 & 0x80000000) == 0)
      {
        unsigned int v22 = v11 - v15;
        if ((v22 & 0x80000000) == 0)
        {
          unint64_t v20 = 0;
          unint64_t v23 = *a4;
          if (v21 < v23 && v22 < v23) {
            unint64_t v20 = *((void *)a4 + 12) + 16 * ((v21 >> 2) + (v23 >> 2) * (unint64_t)(v22 >> 2));
          }
        }
      }
    }
    else
    {
      int v15 = *((_DWORD *)a4 + 2);
      unsigned int v21 = ~v13 + a2;
    }
    uint64_t v16 = 0;
    *a7 = v20;
    if ((v21 & 0x80000000) == 0)
    {
      unsigned int v29 = v12 - v15;
      if ((v29 & 0x80000000) == 0)
      {
        uint64_t v16 = 0;
        unint64_t v30 = *a4;
        if (v21 < v30 && v29 < v30) {
          uint64_t v16 = *((void *)a4 + 12) + 16 * ((v21 >> 2) + (v30 >> 2) * (unint64_t)(v29 >> 2));
        }
      }
    }
  }
  int v17 = v10 - v9;
  a7[1] = v16;
  if (v15 == a3)
  {
    *a8 = *((void *)a4 + 16) + 16 * ((v10 - v13) >> 2);
    a8[1] = *((void *)a4 + 16) + 16 * ((v17 - v13) >> 2);
    uint64_t v18 = *((void *)a4 + 16);
    int v19 = (v14 >> 2) - 1;
LABEL_31:
    unint64_t v34 = v18 + 16 * v19;
    goto LABEL_32;
  }
  int v24 = *(unsigned __int8 *)(*(void *)(result + 1880) + 2013);
  if ((word_1BBB82EEA[((v24 - 1) & a3) >> 2] >> ((((v24 - 1) & (v10 - 1)) - v24 + 64) >> 2)))
  {
    unsigned int v25 = v10 - v13;
    unsigned int v26 = ~v15 + a3;
    if (((v26 | v25) & 0x80000000) != 0)
    {
      unint64_t v27 = 0;
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = *a4;
      if (v25 < v28 && v26 < v28) {
        unint64_t v27 = *((void *)a4 + 12) + 16 * ((v25 >> 2) + (v28 >> 2) * (unint64_t)(v26 >> 2));
      }
    }
  }
  else
  {
    unint64_t v27 = 0;
    unsigned int v26 = ~v15 + a3;
  }
  *a8 = v27;
  unsigned int v31 = v17 - v13;
  if (((v26 | (v17 - v13)) & 0x80000000) != 0)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    unint64_t v33 = *a4;
    if (v31 < v33 && v26 < v33) {
      unint64_t v32 = *((void *)a4 + 12) + 16 * ((v31 >> 2) + (v33 >> 2) * (unint64_t)(v26 >> 2));
    }
  }
  a8[1] = v32;
  if (a2 == v13)
  {
    uint64_t v18 = *((void *)a4 + 15);
    int v19 = (int)v26 >> 2;
    goto LABEL_31;
  }
  unsigned int v35 = a2 - v13 - v9;
  if (((v26 | v35) & 0x80000000) != 0)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    unint64_t v36 = *a4;
    if (v35 < v36 && v26 < v36) {
      unint64_t v34 = *((void *)a4 + 12) + 16 * ((v35 >> 2) + (v36 >> 2) * (unint64_t)(v26 >> 2));
    }
  }
LABEL_32:
  a8[2] = v34;
  return result;
}

void sub_1BBA8F298(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, uint64_t a7)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = 0;
  v14[1] = 0;
  memset(v13, 0, sizeof(v13));
  sub_1BBA8EFD8(a1, a2, a3, a4, a5, a6, (unint64_t *)v14, v13);
  sub_1BBA18690(*(unsigned char **)(a1 + 1872), a2, a3, a5, a6, a7, v14, (uint64_t *)v13);
}

void *sub_1BBA8F34C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int v111 = (_WORD *)(a1 + 4696);
  uint64_t v5 = *(void *)(a1 + 1880);
  char v6 = *(unsigned char *)(v5 + 2009);
  int v7 = *(_DWORD *)(v5 + 2016);
  *(_DWORD *)(a1 + 4416) = a2;
  int v8 = a2 / v7;
  int v9 = (a2 % v7) << v6;
  *(_DWORD *)(a1 + 4420) = v9 >> v6;
  uint64_t v10 = *(unsigned __int8 *)(v5 + 2013);
  *(void *)(a1 + 944) = a3;
  *(_DWORD *)(a1 + 4428) = v9;
  int v11 = v8 << v6;
  *(_DWORD *)(a1 + 4432) = v11;
  *(_DWORD *)(a1 + 4424) = v11 >> v6;
  *(unsigned char *)(a3 + 197) = 0;
  int v13 = *(_DWORD *)(v5 + 176);
  int v12 = *(_DWORD *)(v5 + 180);
  int v14 = v13 - v9;
  if (v14 >= (int)v10) {
    uint64_t v15 = v10;
  }
  else {
    uint64_t v15 = v14;
  }
  int v16 = v12 - v11;
  if (v16 >= (int)v10) {
    unsigned int v17 = v10;
  }
  else {
    unsigned int v17 = v16;
  }
  uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 1872) + 79216) + 592);
  char v19 = 1;
  do
  {
    char v20 = v19;
    uint64_t v21 = *(void *)(v18 + 8 * v4 + 112);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v18 + 16))(v18, (*(int *)(a1 + 4428) >> v4), (*(int *)(a1 + 4432) >> v4), v4);
    uint64_t v23 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 4584) + 16 * v4 + 24) + 24))(*(void *)(*(void *)(a1 + 4584) + 16 * v4 + 24), *(void *)(*(void *)(a1 + 4584) + 16 * v4 + 32));
    double result = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v15, v17 >> v4, v21, v22, v10, v23);
    char v19 = 0;
    uint64_t v4 = 1;
  }
  while ((v20 & 1) != 0);
  *(_OWORD *)(*(void *)(a1 + 4456) + 24) = *(_OWORD *)(*(void *)(a1 + 4584) + 24);
  *(_OWORD *)(*(void *)(a1 + 4456) + 40) = *(_OWORD *)(*(void *)(a1 + 4584) + 40);
  *(_OWORD *)(*(void *)(a1 + 4456) + 56) = *(_OWORD *)(*(void *)(a1 + 4584) + 56);
  *(_OWORD *)(*(void *)(a1 + 4456) + 72) = *(_OWORD *)(*(void *)(a1 + 4584) + 72);
  int v25 = *(_DWORD *)(a1 + 4428);
  int v26 = *(_DWORD *)(a1 + 4432);
  if (v25) {
    int v27 = 240;
  }
  else {
    int v27 = 0;
  }
  int v28 = *(_DWORD *)(a1 + 16);
  int v29 = *(_DWORD *)(a1 + 20);
  if (v25 + (int)v10 >= v28) {
    int v30 = 7680;
  }
  else {
    int v30 = 130560;
  }
  if (v26)
  {
    BOOL v31 = v25 == 0;
  }
  else
  {
    int v30 = 0;
    BOOL v31 = 1;
  }
  int v32 = v30 | v27;
  int v33 = v32 | 0x100;
  if (v31) {
    int v33 = v32;
  }
  *(_DWORD *)(a1 + 4436) = v33;
  int v34 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2013);
  int v35 = v26 + v34;
  if (v29 < v26 + v34) {
    int v35 = v29;
  }
  unint64_t v36 = (v35 - v26);
  int v37 = v25 + v34;
  if (v28 < v25 + v34) {
    int v37 = v28;
  }
  if ((v33 & 0xF0) != 0)
  {
    uint64_t v38 = *(void *)(*(void *)(a1 + 1872) + 1360);
    uint64_t v39 = *(void *)(v38 + 488);
    if ((v26 | (v25 - 1)) < 0 || *(_DWORD *)(v38 + 276) < v25 || *(_DWORD *)(v38 + 280) <= v26) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = (_WORD *)(*(void *)(v38 + 512) + 2 * (v39 * ((uint64_t)v26 >> 3) + ((v25 - 1) >> 3)));
    }
    if ((int)v36 >= 1)
    {
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      uint64_t v43 = 2 * v39;
      do
      {
        *(_WORD *)(*(void *)(a1 + 4704) + v41) = *v40;
        v42 += 8;
        v41 += 2;
        unsigned int v40 = (_WORD *)((char *)v40 + v43);
      }
      while (v42 < v36);
    }
  }
  else if ((int)v36 >= 8)
  {
    uint64_t v44 = 0;
    do
      *(_WORD *)(*(void *)(a1 + 4704) + 2 * v44++) = 0;
    while (v36 >> 3 != v44);
  }
  int v45 = v37 - v25;
  if ((*(unsigned char *)(a1 + 4437) & 0x1E) != 0)
  {
    int v46 = *(_DWORD *)(a1 + 4428);
    int v47 = *(_DWORD *)(a1 + 4432);
    if (((v47 - 1) | v46) < 0
      || (uint64_t v48 = *(void *)(*(void *)(a1 + 1872) + 1360), *(_DWORD *)(v48 + 276) <= v46)
      || *(_DWORD *)(v48 + 280) < v47)
    {
      uint64_t v49 = 0;
    }
    else
    {
      uint64_t v49 = (const void *)(*(void *)(v48 + 512) + 2
                                                  * (*(void *)(v48 + 488) * ((uint64_t)(v47 - 1) >> 3) + (v46 >> 3)));
    }
    double result = memcpy(*(void **)(a1 + 4712), v49, 2 * (v45 >> 3));
  }
  else if (v45 >= 8)
  {
    uint64_t v50 = 0;
    do
      *(_WORD *)(*(void *)(a1 + 4712) + 2 * v50++) = 0;
    while (v45 >> 3 != v50);
  }
  int v51 = (int)v36 >> 2;
  if ((*(unsigned char *)(a1 + 4436) & 0xF0) != 0)
  {
    uint64_t v52 = *(void *)(*(void *)(a1 + 1872) + 1360);
    uint64_t v53 = *(void *)(v52 + 552);
    int v54 = *(_DWORD *)(a1 + 4428);
    int v55 = *(_DWORD *)(a1 + 4432);
    if ((v55 | (v54 - 1)) < 0 || *(_DWORD *)(v52 + 276) < v54 || *(_DWORD *)(v52 + 280) <= v55) {
      int v56 = 0;
    }
    else {
      int v56 = (uint64_t *)(*(void *)(v52 + 576) + 16 * (v53 * ((uint64_t)v55 >> 2) + ((v54 - 1) >> 2)));
    }
    if ((int)v36 >= 1)
    {
      uint64_t v57 = 0;
      unint64_t v58 = 0;
      uint64_t v59 = 16 * v53;
      do
      {
        uint64_t v60 = (void *)(*(void *)(a1 + 4720) + v57);
        uint64_t v61 = *v56;
        *(void *)((char *)v60 + 6) = *(uint64_t *)((char *)v56 + 6);
        void *v60 = v61;
        v58 += 4;
        v57 += 16;
        int v56 = (uint64_t *)((char *)v56 + v59);
      }
      while (v58 < v36);
    }
  }
  else if ((int)v36 >= 4)
  {
    uint64_t v62 = 0;
    if (v51 <= 1) {
      unsigned int v63 = 1;
    }
    else {
      unsigned int v63 = (int)v36 >> 2;
    }
    uint64_t v64 = 16 * v63;
    do
    {
      uint64_t v65 = (void *)(*(void *)(a1 + 4720) + v62);
      uint64_t v66 = *(void *)(a1 + 4440);
      *(void *)((char *)v65 + 6) = *(void *)(a1 + 4446);
      *uint64_t v65 = v66;
      v62 += 16;
    }
    while (v64 != v62);
  }
  int v67 = v45 >> 2;
  uint64_t v68 = (uint64_t *)(a1 + 4440);
  int v69 = (void *)(*(void *)(a1 + 4720) + 16 * v51);
  uint64_t v70 = *(void *)(a1 + 4440);
  *(void *)((char *)v69 + 6) = *(void *)(a1 + 4446);
  *int v69 = v70;
  if ((*(unsigned char *)(a1 + 4437) & 0x1E) != 0)
  {
    int v71 = *(_DWORD *)(a1 + 4428);
    int v72 = *(_DWORD *)(a1 + 4432);
    if (((v72 - 1) | v71) < 0
      || (uint64_t v73 = *(void *)(*(void *)(a1 + 1872) + 1360), *(_DWORD *)(v73 + 276) <= v71)
      || *(_DWORD *)(v73 + 280) < v72)
    {
      uint64_t v74 = 0;
    }
    else
    {
      uint64_t v74 = (char *)(*(void *)(v73 + 576) + 16 * (*(void *)(v73 + 552) * ((uint64_t)(v72 - 1) >> 2) + (v71 >> 2)));
    }
    double result = memcpy(*(void **)(a1 + 4728), v74, 16 * v67);
    if ((*(_DWORD *)(a1 + 4436) & 0x100) != 0) {
      int v75 = v74 - 16;
    }
    else {
      int v75 = (char *)(a1 + 4440);
    }
    uint64_t v76 = *(void *)(a1 + 4728);
    uint64_t v77 = *(void *)v75;
    *(void *)(v76 - 10) = *(void *)(v75 + 6);
    *(void *)(v76 - 16) = v77;
    int v78 = *(_DWORD *)(a1 + 4428) + v67;
    int v79 = *(_DWORD *)(a1 + 4432);
    if (((v79 - 1) | v78) < 0
      || (uint64_t v80 = *(void *)(*(void *)(a1 + 1872) + 1360), *(_DWORD *)(v80 + 276) <= v78)
      || *(_DWORD *)(v80 + 280) < v79)
    {
      int v81 = 0;
    }
    else
    {
      int v81 = (uint64_t *)(*(void *)(v80 + 576) + 16 * (*(void *)(v80 + 552) * ((uint64_t)(v79 - 1) >> 2) + (v78 >> 2)));
    }
    if (!v81) {
      int v81 = (uint64_t *)(a1 + 4440);
    }
    int v82 = (void *)(*(void *)(a1 + 4728) + 16 * v67);
    uint64_t v83 = *v81;
    *(void *)((char *)v82 + 6) = *(uint64_t *)((char *)v81 + 6);
    *int v82 = v83;
    int v84 = *(_DWORD *)(a1 + 4428);
    int v85 = *(_DWORD *)(a1 + 4432);
    int v86 = v85 - 1;
    if (((v85 - 1) | (v84 - 1)) < 0
      || (uint64_t v87 = *(void *)(*(void *)(a1 + 1872) + 1360), *(_DWORD *)(v87 + 276) < v84)
      || *(_DWORD *)(v87 + 280) < v85
      || (uint64_t v88 = *(void *)(v87 + 576)) == 0)
    {
      uint64_t v92 = *(void *)(a1 + 4728);
      uint64_t v93 = *v68;
      *(void *)(v92 - 10) = *(void *)(a1 + 4446);
      *(void *)(v92 - 16) = v93;
    }
    else
    {
      unsigned int v89 = (uint64_t *)(v88 + 16 * (*(void *)(v87 + 552) * ((uint64_t)v86 >> 2) + ((v84 - 1) >> 2)));
      uint64_t v90 = *(void *)(a1 + 4728);
      uint64_t v91 = *v89;
      *(void *)(v90 - 10) = *(uint64_t *)((char *)v89 + 6);
      *(void *)(v90 - 16) = v91;
    }
    int v94 = v111;
    int v95 = *(_DWORD *)(a1 + 4428) + v34;
    int v96 = *(_DWORD *)(a1 + 4432);
    int v97 = v96 - 1;
    if (((v96 - 1) | v95) < 0
      || (uint64_t v98 = *(void *)(*(void *)(a1 + 1872) + 1360), *(_DWORD *)(v98 + 276) <= v95)
      || *(_DWORD *)(v98 + 280) < v96
      || (uint64_t v99 = *(void *)(v98 + 576)) == 0)
    {
      int v103 = (void *)(*(void *)(a1 + 4728) + 16 * v67);
      uint64_t v104 = *v68;
      *(void *)((char *)v103 + 6) = *(void *)(a1 + 4446);
      *int v103 = v104;
    }
    else
    {
      int v100 = (uint64_t *)(v99 + 16 * (*(void *)(v98 + 552) * ((uint64_t)v97 >> 2) + (v95 >> 2)));
      uint64_t v101 = *v100;
      int v102 = (void *)(*(void *)(a1 + 4728) + 16 * v67);
      *(void *)((char *)v102 + 6) = *(uint64_t *)((char *)v100 + 6);
      *int v102 = v101;
    }
  }
  else
  {
    int v94 = v111;
    if (v45 >= -4)
    {
      if (v67 < 0) {
        int v105 = -1;
      }
      else {
        int v105 = v45 >> 2;
      }
      uint64_t v106 = 16 * (v105 + 1);
      uint64_t v107 = -16;
      do
      {
        unsigned int v108 = (void *)(*(void *)(a1 + 4728) + v107);
        uint64_t v109 = *v68;
        *(void *)((char *)v108 + 6) = *(void *)(a1 + 4446);
        *unsigned int v108 = v109;
        v107 += 16;
      }
      while (v106 != v107);
    }
  }
  *(unsigned char *)(a1 + 804) = v10;
  *int v94 = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_DWORD *)(a1 + 8108) = 0;
  int v110 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 241);
  *(_DWORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 208) = v110;
  return result;
}

uint64_t sub_1BBA8FA78(uint64_t a1, int *a2)
{
  uint64_t v3 = a1;
  uint64_t v399 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)(a1 + 8120);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 976) + 32))(*(void *)(a1 + 976)))
  {
    int v5 = *(_DWORD *)(v3 + 4428);
    int v6 = *(unsigned __int8 *)(*(void *)(v3 + 1880) + 2013);
    int v7 = sub_1BBAB1928(*(_DWORD **)(v3 + 976), v5, *(_DWORD *)(v3 + 4432), v6);
    int v8 = (void *)(v3 + 1872);
    uint64_t v9 = *(void *)(v3 + 1872);
    uint64_t v10 = *(void *)(v9 + 79216);
    if (!*(unsigned char *)(v3 + 789))
    {
      if (v7 == 2) {
        goto LABEL_13;
      }
LABEL_12:
      *(_DWORD *)(v3 + 204) = 0;
      uint64_t v12 = *(void *)(v3 + 952);
      goto LABEL_173;
    }
  }
  else
  {
    int v8 = (void *)(v3 + 1872);
    uint64_t v9 = *(void *)(v3 + 1872);
    uint64_t v10 = *(void *)(v9 + 79216);
    if (!*(unsigned char *)(v3 + 789)) {
      goto LABEL_13;
    }
    int v5 = *(_DWORD *)(v3 + 4428);
    int v6 = *(unsigned __int8 *)(*(void *)(v3 + 1880) + 2013);
    int v7 = 2;
  }
  if (v5 + v6 > *(_DWORD *)(v3 + 792)) {
    goto LABEL_12;
  }
  BOOL v11 = *(_DWORD *)(v3 + 4432) + v6 <= *(_DWORD *)(v3 + 796) && v7 == 2;
  if (!v11) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v12 = *(void *)(v3 + 952);
  int v13 = *(char *)(v12 + 55);
  if (v13 >= 1)
  {
    int v367 = v8;
    int v14 = 0;
    int v15 = *(_DWORD *)(v3 + 4428);
    int v16 = *(_DWORD *)(v3 + 4432);
    unsigned int v17 = *(unsigned __int8 **)(v3 + 1880);
    unsigned __int8 v18 = v17[2008];
    int v19 = 1 << v18;
    int v20 = v17[2013];
    int v21 = *(_DWORD *)(v3 + 16);
    int v22 = *(_DWORD *)(v3 + 20);
    int v23 = v15 + v20;
    if (v21 >= v15 + v20) {
      int v24 = v15 + v20;
    }
    else {
      int v24 = *(_DWORD *)(v3 + 16);
    }
    int v363 = *(_DWORD *)(v3 + 20);
    if (v22 >= v16 + v20) {
      int v22 = v16 + v20;
    }
    int v374 = v17[2013];
    if (v21 >= v15 + 2 * v20) {
      int v25 = v15 + 2 * v20;
    }
    else {
      int v25 = *(_DWORD *)(v3 + 16);
    }
    int v26 = v17[241];
    BOOL v28 = v16 >= v19 && v23 + v19 <= v21;
    *(_DWORD *)(v3 + 204) = 0;
    *(_DWORD *)(v3 + 208) = v26;
    int v370 = v26;
    if (*(unsigned char *)(v9 + 10) == 2)
    {
LABEL_106:
      if (v13 >= 2)
      {
        if (v14 || (int v76 = v370, v26 != v370))
        {
          uint64_t v378 = a2;
          uint64_t v77 = *(int **)(v3 + 960);
          uint64_t v78 = v17[2009];
          int64_t v79 = *v77;
          unsigned int v80 = 1 << v78;
          unsigned int v81 = (1 << v79) + ~v16 + v77[5];
          if (v81 >= 1 << v78) {
            unsigned int v81 = 1 << v78;
          }
          uint64_t v82 = v81 >> v79;
          int v359 = v17;
          int v384 = v77;
          if ((int)v82 < 1)
          {
            int v84 = 0;
            unsigned int v94 = 0;
          }
          else
          {
            uint64_t v83 = 0;
            int v84 = 0;
            uint64_t v85 = *((void *)v77 + 161);
            uint64_t v86 = v85 * (v16 >> v79) + (v15 >> v79);
            uint64_t v87 = *((void *)v77 + 172) + 4 * v86;
            uint64_t v88 = *((void *)v77 + 174) + 8 * v86;
            if ((1 << v79) + ~v15 + v77[4] < v80) {
              unsigned int v80 = (1 << v79) + ~v15 + v77[4];
            }
            uint64_t v89 = v80 >> v79;
            do
            {
              uint64_t v90 = (int *)v87;
              uint64_t v91 = v89;
              if ((int)v89 >= 1)
              {
                do
                {
                  int v92 = *v90++;
                  v84 += v92;
                  --v91;
                }
                while (v91);
              }
              ++v83;
              v87 += 4 * v85;
            }
            while (v83 != v82);
            uint64_t v93 = 0;
            unsigned int v94 = 0;
            uint64_t v95 = 8 * v85;
            do
            {
              int v96 = (int *)v88;
              uint64_t v97 = v89;
              if ((int)v89 >= 1)
              {
                do
                {
                  int v98 = *v96;
                  v96 += 2;
                  v94 += v98;
                  --v97;
                }
                while (v97);
              }
              ++v93;
              v88 += v95;
            }
            while (v93 != v82);
          }
          unint64_t v99 = ((1 << (2 * v78 - 1)) + (unint64_t)v94 - ((v84 * v84) >> (2 * v78))) >> (2 * v78);
          if (v13 == 3)
          {
            int v100 = v78 - v14;
            if ((int)v78 - v14 <= (int)v79) {
              int v100 = *v77;
            }
            if (v100 < (int)v78)
            {
              uint64_t v101 = v100;
              do
              {
                ++v101;
                if (v99 < 0x3A99 || v101 != v78)
                {
                  int v102 = 1 << v101;
                  unsigned int v103 = v363 - (1 << v101) >= (v16 - (1 << v101) + v374)
                       ? v16 - (1 << v101) + v374
                       : v363 - (1 << v101);
                  if (v16 <= v103)
                  {
                    int v104 = 0;
                    int v105 = 0;
                    unsigned int v106 = 0;
                    unsigned int v107 = v374 - v102 + v15;
                    if (v21 - v102 < v107) {
                      unsigned int v107 = v21 - v102;
                    }
                    uint64_t v108 = (v78 - v101);
                    int v109 = v16;
                    while (v15 > v107)
                    {
LABEL_144:
                      v109 += v102;
                      if (v109 > v103)
                      {
                        if (v106
                          && v106 == v104
                          && (v105 + (v106 >> 1)) / v106 < (1431655766
                                                          * (unint64_t)(2 * word_1BBB7A388[v108])) >> 32)
                        {
                          *(_DWORD *)(a1 + 204) = v78 - v101;
                        }
                        goto LABEL_135;
                      }
                    }
                    int v110 = v15;
                    while (1)
                    {
                      int v111 = *(_DWORD *)(*(void *)&v384[4 * (v78 - v101) + 394]
                                       + 4
                                       * ((v110 >> v101) + (v109 >> v101) * ((v102 + v21 - 1) >> v101)));
                      if (v111 >= word_1BBB7A388[v108]) {
                        break;
                      }
                      ++v104;
                      v105 += v111;
                      ++v106;
                      v110 += v102;
                      if (v110 > v107) {
                        goto LABEL_144;
                      }
                    }
                  }
                }
LABEL_135:
                ;
              }
              while (v101 != v78);
            }
          }
          if (v99 >= 0x2EE1)
          {
            a2 = v378;
            uint64_t v3 = a1;
            unsigned int v17 = v359;
            if ((int)v78 - v26 > (int)v79)
            {
              int64_t v112 = -v26 + (unint64_t)v78;
              int v76 = v26;
              do
              {
                if (v16 < v22)
                {
                  unsigned int v113 = 0;
                  int v114 = 0;
                  unsigned int v115 = 0;
                  int v116 = v78 - v112;
                  int v117 = 1 << v112;
                  uint64_t v118 = (v78 - v112);
                  int v119 = v16;
                  do
                  {
                    if (v15 < v24)
                    {
                      int v120 = v15;
                      do
                      {
                        int v121 = *(_DWORD *)(*(void *)&v384[4 * (v78 - v112) + 394]
                                         + 4
                                         * ((v120 >> v112)
                                          + (v119 >> v112) * (((1 << v112) + v21 - 1) >> v112)));
                        ++v113;
                        if (v121 <= word_1BBB7A388[v118]) {
                          int v121 = 0;
                        }
                        else {
                          ++v115;
                        }
                        v114 += v121;
                        v120 += v117;
                      }
                      while (v120 < v24);
                    }
                    v119 += v117;
                  }
                  while (v119 < v22);
                  a2 = v378;
                  uint64_t v3 = a1;
                  if (v113 && v115 > v113 >> 2
                    || v115 && (v114 + (v115 >> 1)) / v115 > 2 * word_1BBB7A388[v118])
                  {
                    int v76 = v116 + 1;
                    *(_DWORD *)(a1 + 208) = v116 + 1;
                  }
                }
                --v112;
              }
              while (v112 > v79);
              goto LABEL_169;
            }
            goto LABEL_168;
          }
          int v76 = v26;
          a2 = v378;
          uint64_t v3 = a1;
          unsigned int v17 = v359;
        }
LABEL_169:
        if (v4[8])
        {
          int v8 = v367;
          if (v17[2009] - v76 <= 4) {
            *(_DWORD *)(v3 + 208) = v370;
          }
        }
        else
        {
          int v8 = v367;
        }
        goto LABEL_173;
      }
LABEL_168:
      int v76 = v26;
      goto LABEL_169;
    }
    if (*(_DWORD *)(*(void *)(v9 + 79216) + 444))
    {
      if (v22 <= v16)
      {
        unsigned int v30 = 0;
        unsigned int v29 = 0;
      }
      else
      {
        unsigned int v29 = 0;
        unsigned int v30 = 0;
        int v31 = v19 + v15;
        if (v24 <= v19 + v15) {
          int v32 = v19 + v15;
        }
        else {
          int v32 = v24;
        }
        if (v31 >= v24) {
          int v33 = v19 + v15;
        }
        else {
          int v33 = v31 + 1;
        }
        unsigned int v34 = (v32 - v33) >> v18;
        if (v31 < v24) {
          ++v34;
        }
        unsigned int v35 = (v34 & 0xFFFFFFFC) + 4;
        v36.i64[0] = 0x100000001;
        v36.i64[1] = 0x100000001;
        int8x16_t v37 = (int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v34 & 0xFFFFFFFC), (int8x16_t)xmmword_1BBB6F6C0), (uint32x4_t)vdupq_n_s32(v34));
        int v38 = v16;
        do
        {
          if (v24 > v15)
          {
            uint64_t v39 = *(void *)(v3 + 960);
            int v40 = *(_DWORD *)(v39 + 4);
            int32x4_t v41 = (int32x4_t)v29;
            int32x4_t v42 = (int32x4_t)v30;
            int32x4_t v43 = vdupq_n_s32(*(char *)(*(void *)(v39 + 8 * (v40 - 3) + 1488)
                                      + (((*(_DWORD *)(v39 + 16) + ~(-1 << v40)) & (-1 << v40)) >> v40) * (v16 >> v40)
                                      + (v15 >> v40)));
            unsigned int v44 = v35;
            do
            {
              int8x16_t v45 = (int8x16_t)v42;
              int8x16_t v46 = (int8x16_t)v41;
              int32x4_t v42 = vaddq_s32(v42, v43);
              int32x4_t v41 = vaddq_s32(v41, v36);
              v44 -= 4;
            }
            while (v44);
            unsigned int v30 = vaddvq_s32((int32x4_t)vbslq_s8(v37, v45, (int8x16_t)v42));
            unsigned int v29 = vaddvq_s32((int32x4_t)vbslq_s8(v37, v46, (int8x16_t)v41));
          }
          v38 += v19;
        }
        while (v38 < v22);
      }
      unsigned int v47 = (v30 + (v29 >> 1)) / v29;
    }
    else
    {
      unsigned int v47 = *(_DWORD *)(v3 + 24);
    }
    int v49 = v15 >= v19 || v16 >= v19 || v28;
    if (v49 == 1)
    {
      if (v15 < v19 || v22 <= v16)
      {
        int v50 = 0;
        int v55 = v370;
      }
      else
      {
        int v50 = 0;
        uint64_t v51 = *(void *)(v9 + 1360);
        uint64_t v52 = *(void *)(v51 + 512);
        uint64_t v53 = *(void *)(v51 + 488);
        int v54 = v16;
        int v55 = v370;
        do
        {
          __int16 v56 = *(_WORD *)(v52 + 2 * (((uint64_t)(v15 - v19) >> 3) + v53 * ((uint64_t)v54 >> 3)));
          int v57 = (v56 >> 9) - v47;
          if (v57 < 0) {
            int v57 = v47 - (v56 >> 9);
          }
          if (v57 <= 2)
          {
            int v58 = v56 & 3;
            if (v55 >= v58) {
              int v55 = v58;
            }
            if (v50 <= v58) {
              int v50 = v58;
            }
          }
          v54 += v19;
        }
        while (v54 < v22);
      }
      int v59 = v16 - v19;
      if (v16 >= v19 && v24 > v15)
      {
        uint64_t v60 = *(void *)(v9 + 1360);
        uint64_t v61 = *(void *)(v60 + 512);
        uint64_t v62 = *(void *)(v60 + 488) * ((uint64_t)v59 >> 3);
        int v63 = v15;
        do
        {
          __int16 v64 = *(_WORD *)(v61 + 2 * (v62 + (v63 >> 3)));
          int v65 = (v64 >> 9) - v47;
          if (v65 < 0) {
            int v65 = v47 - (v64 >> 9);
          }
          if (v65 <= 2)
          {
            int v66 = v64 & 3;
            if (v55 >= v66) {
              int v55 = v66;
            }
            if (v50 <= v66) {
              int v50 = v66;
            }
          }
          v63 += v19;
        }
        while (v63 < v24);
      }
      if (v28 && v23 < v25)
      {
        uint64_t v67 = *(void *)(v9 + 1360);
        uint64_t v68 = *(void *)(v67 + 512);
        uint64_t v69 = *(void *)(v67 + 488) * ((uint64_t)v59 >> 3);
        do
        {
          __int16 v70 = *(_WORD *)(v68 + 2 * (v69 + (v23 >> 3)));
          int v71 = (v70 >> 9) - v47;
          if (v71 < 0) {
            int v71 = v47 - (v70 >> 9);
          }
          if (v71 <= 2)
          {
            int v72 = v70 & 3;
            if (v55 >= v72) {
              int v55 = v72;
            }
            if (v50 <= v72) {
              int v50 = v72;
            }
          }
          v23 += v19;
        }
        while (v23 < v25);
      }
      if (v15 >= v19 && v16 >= v19)
      {
        __int16 v73 = *(_WORD *)(*(void *)(*(void *)(v9 + 1360) + 512)
                       + 2
                       * (*(void *)(*(void *)(v9 + 1360) + 488) * ((uint64_t)(v16 - v19) >> 3) + ((v15 - v19) >> 3)));
        int v74 = (v73 >> 9) - v47;
        if (v74 < 0) {
          int v74 = v47 - (v73 >> 9);
        }
        if (v74 <= 2)
        {
          int v75 = v73 & 3;
          if (v55 >= v75) {
            int v55 = v75;
          }
          if (v50 <= v75) {
            int v50 = v75;
          }
          goto LABEL_102;
        }
      }
      if (v55 <= v50)
      {
LABEL_102:
        int v14 = (v55 - (v55 == v50)) & ~((v55 - (v55 == v50)) >> 31);
        if (v50 + 1 < v370) {
          int v26 = v50 + 1;
        }
        else {
          int v26 = v370;
        }
        *(_DWORD *)(v3 + 204) = v14;
        *(_DWORD *)(v3 + 208) = v26;
        goto LABEL_106;
      }
    }
    int v14 = 0;
    int v26 = v370;
    goto LABEL_106;
  }
LABEL_173:
  *uint64_t v4 = 0;
  if (*(unsigned char *)(v12 + 579) && *(unsigned char *)(v12 + 569) == 2 && *(unsigned __int8 *)(v9 + 10) <= 1u)
  {
    BOOL v122 = *(void **)(v3 + 8136);
    if (v122)
    {
      int v123 = *(_DWORD *)(v3 + 4432);
      int v124 = *(unsigned __int8 *)(*(void *)(v3 + 1880) + 2013);
      LODWORD(v125) = v123 >> 4;
      int v126 = v123 + v124;
      if (*(_DWORD *)(v3 + 20) < v126) {
        int v126 = *(_DWORD *)(v3 + 20);
      }
      if ((int)v125 < v126 >> 4)
      {
        int v127 = *(_DWORD *)(v3 + 4428);
        int v128 = v126 >> 4;
        double v129 = *(double *)(v12 + 496);
        int v130 = v127 + v124;
        if (*(_DWORD *)(v3 + 16) >= v130) {
          int v131 = v130;
        }
        else {
          int v131 = *(_DWORD *)(v3 + 16);
        }
        int v132 = v131 >> 4;
        int v133 = v127 >> 4;
        int v134 = *(unsigned __int8 *)(v12 + 492);
        uint64_t v135 = (uint64_t)v127 >> 4;
        uint64_t v125 = (int)v125;
        uint64_t v136 = v128;
        uint64_t v137 = ((uint64_t)v131 >> 4) - v133;
        do
        {
          if ((int)v135 < v132)
          {
            uint64_t v138 = v135 + *v122 * v125;
            uint64_t v139 = (unsigned __int16 *)(v122[18] + 2 * v138);
            int v140 = (unsigned __int16 *)(v122[4] + 2 * v138);
            int v141 = (unsigned __int8 *)(v138 + v122[1]);
            for (uint64_t i = v137; i; --i)
            {
              unsigned int v144 = *v141++;
              unsigned int v143 = v144;
              unsigned int v146 = *v140++;
              unsigned int v145 = v146;
              unsigned int v148 = *v139++;
              unsigned int v147 = v148;
              if (v134)
              {
                if (v143 <= 0x19 && v129 * (double)v147 > (double)v145) {
                  goto LABEL_194;
                }
              }
              else if (v143 < 0x1A)
              {
                goto LABEL_194;
              }
            }
          }
          ++v125;
        }
        while (v125 != v136);
      }
      char v149 = 1;
    }
    else
    {
LABEL_194:
      char v149 = 0;
    }
    *uint64_t v4 = v149;
  }
  if (*(unsigned char *)(v10 + 408))
  {
    BOOL v11 = *(unsigned char *)(v9 + 10) == 1;
    v4[1] = v11;
    unsigned int v150 = (BOOL *)(v4 + 1);
    if (v11)
    {
      uint64_t v151 = *(void *)(v3 + 960);
      if (*(int *)(v151 + 1756) >= 1 && *(unsigned char *)(v10 + 409))
      {
        BOOL v152 = sub_1BBA7EED0(v151, *(_DWORD *)(v3 + 4428), *(_DWORD *)(v3 + 4432), *(unsigned __int8 *)(*(void *)(v3 + 1880) + 2013));
        int v153 = !v152;
        *unsigned int v150 = !v152;
      }
      else
      {
        int v153 = 1;
      }
    }
    else
    {
      int v153 = 0;
    }
  }
  else
  {
    int v153 = 0;
    v4[1] = 0;
    unsigned int v150 = (BOOL *)(v4 + 1);
  }
  *(unsigned char *)(v10 + 410) &= v153;
  if (*(_DWORD *)(v10 + 444))
  {
    if (v153) {
      BOOL v154 = *(_DWORD *)(*(void *)(v3 + 1888) + 1620) < 5;
    }
    else {
      BOOL v154 = 0;
    }
    int v153 = v154;
    *unsigned int v150 = v153;
  }
  char v386 = 0;
  if (v153)
  {
    sub_1BBA8DEB8(v3, *(unsigned __int8 **)(v3 + 4456), *(_DWORD *)(v3 + 4428), *(_DWORD *)(v3 + 4432), 0, *(_DWORD *)(v3 + 24));
    sub_1BBA96480((void *)v3, *(unsigned int *)(v3 + 4428), *(unsigned int *)(v3 + 4432), 0, (unsigned __int8 **)(v3 + 4456), *(unsigned int *)(v3 + 4436), a2, &v386);
  }
  else
  {
    int v155 = *a2;
    sub_1BBA91768(v3, *(unsigned int *)(v3 + 4428), *(unsigned int *)(v3 + 4432), 0, (unsigned __int8 **)(v3 + 4584), (unsigned __int8 **)(v3 + 4456), *(_DWORD *)(v3 + 4436), a2, &v386, *(_DWORD *)(v3 + 24));
    if (*v4)
    {
      char v386 = 0;
      *a2 = v155;
      sub_1BBA8EAB4((int *)v3, 0);
      sub_1BBA95350(v3, *(unsigned int *)(v3 + 4428), *(unsigned int *)(v3 + 4432), 0, *(unsigned int *)(v3 + 4436), a2, &v386);
    }
    else
    {
      if (*(unsigned char *)(v3 + 8))
      {
        char v386 = 0;
        *a2 = v155;
        sub_1BBA9595C(v3, *(_DWORD *)(v3 + 4428), *(_DWORD *)(v3 + 4432), *(unsigned __int8 **)(v3 + 4456), 1, 0, 0, 0, 0);
        sub_1BBA95C18(v3, (unsigned __int8 *)*(unsigned int *)(v3 + 4428), (unsigned __int8 *)*(unsigned int *)(v3 + 4432), 0, *(_DWORD *)(v3 + 4436), *(unsigned int *)(v3 + 24), a2, &v386);
      }
      sub_1BBA8EAB4((int *)v3, 1);
    }
  }
  uint64_t result = sub_1BBA9595C(v3, *(_DWORD *)(v3 + 4428), *(_DWORD *)(v3 + 4432), *(unsigned __int8 **)(v3 + 4456), 0, 0, 0, 0, 0);
  uint64_t v159 = *(void *)(v3 + 1872);
  if (!*(unsigned char *)(v159 + 547))
  {
    v160.n128_u64[0] = (unint64_t)sub_1BBA965FC(v3, *(unsigned int *)(v3 + 4428), *(unsigned int *)(v3 + 4432), 0, *(int8x8_t *)v157.i8);
    uint64_t v161 = *(void *)(v3 + 1872);
    uint64_t v162 = *(void *)(v161 + 3344);
    int v163 = *(uint64_t (**)(void *, __n128))(v161 + 3336);
    int v164 = (void *)(v161 + (v162 >> 1) + 3320);
    if (v162) {
      int v163 = *(uint64_t (**)(void *, __n128))(*v164 + v163);
    }
    uint64_t result = v163(v164, v160);
    uint64_t v159 = *v8;
  }
  if (!*(unsigned char *)(v159 + 496) && !*(unsigned char *)(v159 + 497)) {
    return result;
  }
  v157.i32[1] = 0;
  *(void *)(v3 + 160) = 0xFFFFFFFFLL;
  if (*(_DWORD *)(v10 + 444))
  {
    uint64_t v165 = *(void *)(v3 + 1880);
    int v166 = *(unsigned __int8 *)(v165 + 2013);
    int v167 = *(_DWORD *)(v3 + 4428);
    int v168 = *(_DWORD *)(v3 + 792) - v167;
    if (v168 >= v166) {
      int v169 = *(unsigned __int8 *)(v165 + 2013);
    }
    else {
      int v169 = *(_DWORD *)(v3 + 792) - v167;
    }
    if (v168 <= 0) {
      int v170 = 0;
    }
    else {
      int v170 = v169;
    }
    int v171 = *(_DWORD *)(v3 + 4432);
    int v172 = *(_DWORD *)(v3 + 796) - v171;
    if (v172 < v166) {
      int v166 = *(_DWORD *)(v3 + 796) - v171;
    }
    if (v172 <= 0) {
      int v173 = 0;
    }
    else {
      int v173 = v166;
    }
    if (v170 && v173)
    {
      if (v173 < 1)
      {
        int v175 = 0;
        int v174 = 0;
      }
      else
      {
        int v174 = 0;
        int v175 = 0;
        int v177 = 1 << *(_DWORD *)(*(void *)(v3 + 1888) + 1620);
        int v178 = v173 + v171;
        uint64_t result = (v170 + v167);
        do
        {
          if (v170 >= 1)
          {
            int v179 = *(_DWORD *)(v3 + 4428);
            do
            {
              BOOL v176 = *(unsigned __int8 **)(v3 + 4456);
              v174 += *(__int16 *)(*((void *)v176 + 11)
                                 + 2
                                 * (((unint64_t)*v176 >> 3) * ((v171 - *((_DWORD *)v176 + 2)) >> 3)
                                  + ((v179 - *((_DWORD *)v176 + 1)) >> 3))) >> 9;
              v179 += v177;
              ++v175;
            }
            while (v179 < (int)result);
          }
          v171 += v177;
        }
        while (v171 < v178);
      }
      if (v175 >= 0) {
        int v181 = v175;
      }
      else {
        int v181 = v175 + 1;
      }
      signed int v180 = (v174 + (v181 >> 1)) / v175;
    }
    else
    {
      signed int v180 = *(_DWORD *)(v3 + 24);
    }
    *(_DWORD *)(v3 + 168) = v180;
    if (v180 > 51)
    {
      int v186 = 0;
      int v187 = 0;
      int v188 = 0;
    }
    else
    {
      int v182 = (unsigned __int8 *)(v159 + 78582);
      BOOL v183 = *(_DWORD *)(v159 + 79036) == 3;
      int v184 = v180 + *(unsigned __int8 *)(v165 + 2001);
      if (v184 >= 63) {
        int v184 = 63;
      }
      unsigned int v185 = v184 & ~(v184 >> 31);
      int v186 = dword_1BBB7B4C0[70 * *v182 + v185];
      int v187 = word_1BBB7BA38[512 * (unint64_t)v182[1] + 256 * v183 + 64 * (unint64_t)*v182 + v185];
      int v188 = (unsigned __int16)word_1BBB7C238[52 * v183 + (v180 & ~(v180 >> 31))];
    }
    *(_DWORD *)(v3 + 172) = v186;
    *(_DWORD *)(v3 + 176) = v187;
    *(_DWORD *)(v3 + 180) = v188;
    uint64_t v159 = *(void *)(v3 + 1872);
  }
  uint64_t v189 = v159 + 78120;
  uint64_t v190 = *(void *)(v3 + 944);
  uint64_t v191 = *(int *)(v3 + 4420);
  unsigned int v192 = *(_DWORD *)(v3 + 4424);
  uint64_t v193 = *(unsigned __int8 **)(v3 + 4456);
  int v194 = v191 + *(_DWORD *)(v189 + 20) * v192;
  uint64_t v195 = *(void *)(v189 + 928);
  unsigned int v196 = (void *)(*(void *)(*(void *)v189 + 664) + 16 * v194);
  *unsigned int v196 = 0;
  v196[1] = 0;
  uint64_t v197 = *(void *)v189;
  if (*(unsigned char *)(*(void *)v189 + 136))
  {
    int v198 = *(_DWORD *)(v189 + 12);
    int v199 = *(_DWORD *)(v189 + 16) - 1;
    unsigned int v200 = (v199 + *(_DWORD *)(v197 + 240)) >> v198;
    unsigned int v201 = (v199 + *(_DWORD *)(v197 + 244)) >> v198;
    if (v200 <= v191 || v201 <= v192)
    {
      BOOL v203 = v200 <= v191;
      BOOL v204 = v200 < v191;
      BOOL v205 = v201 >= v192;
      uint64_t v206 = (char *)(*(void *)(v189 + 928) + 2 * (int)(*(_DWORD *)(v189 + 20) * v192) + 2 * v191);
      char v207 = v201 <= v192 || v204;
      *uint64_t v206 = v207;
      char v208 = !v205 || v203;
      v206[1] = v208;
      int v209 = v206 + 1;
      if (v191)
      {
        if (v192) {
          char v210 = v207;
        }
        else {
          char v210 = 1;
        }
        if ((v210 & 1) == 0) {
          return result;
        }
      }
      else
      {
        *uint64_t v206 = 0;
        if (v192) {
          return result;
        }
      }
LABEL_321:
      *int v209 = 0;
      return result;
    }
  }
  uint64_t v211 = v194;
  int v212 = (unsigned char *)(v195 + 2 * v194);
  if (*(unsigned char *)(v189 + 920))
  {
    int v213 = *(_DWORD *)(v189 + 16);
    int v214 = v213 * v191;
    int v215 = v213 * v192;
    uint64_t v216 = *(void *)(v189 + 944);
    if (*(unsigned char *)(v216 + 136))
    {
      int v217 = *(_DWORD *)(v216 + 248);
      if (v217 <= 0) {
        int v217 = *(_DWORD *)(v216 + 240);
      }
      int v218 = *(_DWORD *)(v216 + 252);
      if (v218 <= 0) {
        int v218 = *(_DWORD *)(v216 + 244);
      }
    }
    else
    {
      int v217 = *(_DWORD *)(v216 + 276);
      int v218 = *(_DWORD *)(v216 + 280);
    }
    if (v213 + v214 < v217) {
      int v217 = v213 + v214;
    }
    int v219 = v213 + v215;
    if (v219 < v218) {
      int v218 = v219;
    }
    if (v218 <= v215)
    {
      int v221 = 0;
      int v220 = 0;
    }
    else
    {
      int v220 = 0;
      int v221 = 0;
      int v222 = 1 << *(_DWORD *)(v189 + 28);
      do
      {
        if (v217 > v214)
        {
          uint64_t result = -*((_DWORD *)v193 + 1);
          int v223 = v214;
          do
          {
            v221 += (*(unsigned __int16 *)(*((void *)v193 + 11)
                                         + 2
                                         * (((unint64_t)*v193 >> 3)
                                          * ((v215 - *((_DWORD *)v193 + 2)) >> 3)
                                          + ((v223 - *((_DWORD *)v193 + 1)) >> 3))) >> 7) & 1;
            v223 += v222;
            ++v220;
          }
          while (v223 < v217);
        }
        v215 += v222;
      }
      while (v215 < v218);
    }
    if (v221 >= (96 * v220) >> 7)
    {
      *(unsigned char *)unsigned int v196 = -86;
      *int v212 = 0;
      int v209 = (unsigned char *)(v195 + 2 * v211 + 1);
      goto LABEL_321;
    }
  }
  uint64_t v348 = v190;
  uint64_t v349 = v211;
  uint64_t v350 = v195;
  unsigned int v351 = v212;
  uint64_t v352 = v196;
  uint64_t v385 = v189;
  int v353 = v192;
  int v354 = v191;
  if (*(unsigned char *)(v189 + 912))
  {
    sub_1BBAD2394((void *)v189, v191, v192, 0, (uint64_t)v387);
    int v397 = 0;
    int v390 = 0;
    int v391 = 0;
    int v224 = v191 + *(_DWORD *)(v189 + 20) * v192;
    uint64_t v225 = *(void *)(*(void *)v189 + 664);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F82088, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1E9F82088))
    {
      word_1E9F82080 = 0;
      byte_1E9F82082 = 0;
      int v343 = -*(unsigned __int8 *)(v189 + 960);
      byte_1E9F82083 = -*(unsigned char *)(v189 + 960);
      byte_1E9F82084 = v343;
      __cxa_guard_release(&qword_1E9F82088);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F82098, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1E9F82098))
    {
      byte_1E9F82090[0] = *(unsigned char *)(v189 + 960);
      byte_1E9F82091 = byte_1E9F82090[0];
      word_1E9F82092 = 0;
      byte_1E9F82094 = 0;
      __cxa_guard_release(&qword_1E9F82098);
    }
    uint64_t v226 = 0;
    uint64_t v360 = v224;
    uint64_t v364 = v225;
    uint64_t v371 = v225 + 16 * v224;
    unsigned int v375 = (_DWORD *)(v371 + 1);
    int v227 = v387;
    unsigned int v228 = v388;
    int v229 = 0x7FFFFFFF;
    int v379 = 5;
    do
    {
      int v368 = v229;
      uint64_t v230 = 0;
      int v231 = 0;
      int v232 = 0;
      do
      {
        if (v230 != 2)
        {
          int v233 = *(_DWORD *)&v227[4 * v230];
          int v234 = (unsigned __int16)v228[v230];
          if (v228[v230])
          {
            if (v233 >= 0) {
              int v235 = (unsigned __int16)v228[v230];
            }
            else {
              int v235 = -v234;
            }
            int v236 = (v235 + 2 * v233) / (2 * v234);
            int v237 = byte_1E9F82090[v230];
            if (v236 < v237) {
              int v237 = (v235 + 2 * v233) / (2 * v234);
            }
            if (v236 <= *((char *)&word_1E9F82080 + v230)) {
              int v238 = *((char *)&word_1E9F82080 + v230);
            }
            else {
              int v238 = v237;
            }
          }
          else
          {
            int v238 = 0;
          }
          int v390 = v238;
          LODWORD(v392) = 0;
          int v239 = sub_1BBAD27A4(v189, v234, v233, &v390, (int *)&v392, v226, *(_DWORD *)(v3 + 172));
          uint64_t v189 = v385;
          v231 += v239;
          v232 += (int)v392;
          *((unsigned char *)&v394 + byte_1BBB833F0[v230] - 1) = v390;
        }
        ++v230;
      }
      while (v230 != 5);
      int v391 = v231;
      int v397 = v232;
      int v240 = *(_DWORD *)(v3 + 172);
      if (*(_DWORD *)(v189 + 916) == 1)
      {
        sub_1BBAD2888(v189, (uint64_t)v387, v226, (char *)&v394, 0, &v397, &v391, v240);
        uint64_t v189 = v385;
        int v231 = v391;
        int v232 = v397;
      }
      int v391 = v231 + 4;
      int v241 = v232 + v240 * (v231 + 4);
      int v229 = v368;
      uint64_t v3 = a1;
      if (v241 < v368)
      {
        *(_DWORD *)(a1 + 160) = v232;
        *(_DWORD *)(a1 + 164) = v231 + 4;
        *unsigned int v375 = v394;
        int v229 = v241;
        int v379 = v226;
      }
      ++v226;
      v228 += 15;
      v227 += 60;
    }
    while (v226 != 4);
    int v242 = *(_DWORD *)(a1 + 172);
    if (*(unsigned char *)(v189 + 920))
    {
      int v243 = (char *)v371;
      LOBYTE(v244) = v379;
    }
    else
    {
      int v246 = v229;
      for (uint64_t j = 0; j != 32; ++j)
      {
        int v248 = *(_DWORD *)&v388[2 * j + 60];
        int v249 = (unsigned __int16)v388[j + 252];
        if (v388[j + 252])
        {
          if (v248 >= 0) {
            int v250 = (unsigned __int16)v388[j + 252];
          }
          else {
            int v250 = -v249;
          }
          int v251 = (v250 + 2 * v248) / (2 * v249);
          int v252 = *(unsigned __int8 *)(v189 + 33);
          if (v251 >= v252) {
            int v253 = *(unsigned __int8 *)(v189 + 33);
          }
          else {
            int v253 = v251;
          }
          if (v251 <= -v252) {
            int v254 = -v252;
          }
          else {
            int v254 = v253;
          }
        }
        else
        {
          int v254 = 0;
          int v397 = 0;
        }
        int v390 = v254;
        int v255 = sub_1BBAD27A4(v189, v249, v248, &v390, &v397, 4, v242);
        uint64_t v189 = v385;
        *((unsigned char *)&v394 + j) = v390;
        *((_DWORD *)&v393[-1] + j) = v397 + v255 * v242;
      }
      uint64_t v256 = 0;
      int v257 = 0;
      int v258 = v392 - v242 + 8 * v242 + HIDWORD(v392) + LODWORD(v393[0]);
      int v244 = v379;
      int v229 = v246;
      do
      {
        uint64_t v259 = (_DWORD *)&v393[-1] + v256;
        int v260 = v259[3] + v258;
        if (v260 < v229)
        {
          int v229 = v260;
          int v244 = 4;
          int v257 = v256;
        }
        int v258 = v260 - *v259;
        ++v256;
      }
      while (v256 != 29);
      int v243 = (char *)v371;
      if (v244 == 4)
      {
        *(unsigned char *)(v364 + 16 * v360 + 13) = v257;
        *unsigned int v375 = *(_DWORD *)((char *)&v394 + v257);
        int v242 = *(_DWORD *)(a1 + 172);
      }
    }
    char v261 = *v243;
    if (v229 >= v242)
    {
      *int v243 = v261 & 0xF0 | 0xA;
      int v245 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      int v245 = v229;
      *int v243 = v261 & 0xF0 | (2 * (v244 & 7)) | 1;
    }
    unsigned int v192 = v353;
  }
  else
  {
    int v245 = 0;
  }
  if (*(unsigned char *)(v189 + 913))
  {
    sub_1BBAD2394((void *)v189, v191, v192, 1, (uint64_t)v387);
    uint64_t v189 = v385;
    int v391 = 0;
    int v389 = 0;
    int v262 = v191 + *(_DWORD *)(v385 + 20) * v192;
    int v346 = v262;
    uint64_t v347 = *(void *)(*(void *)v385 + 664);
    uint64_t v345 = v262;
    if (*(unsigned char *)(v385 + 920))
    {
      char v357 = 5;
      int v361 = 0x7FFFFFFF;
    }
    else
    {
      int v390 = 0;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F820A8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v189 = v385;
        if (__cxa_guard_acquire(&qword_1E9F820A8))
        {
          word_1E9F820A0 = 0;
          byte_1E9F820A2 = 0;
          int v344 = -*(unsigned __int8 *)(v385 + 960);
          byte_1E9F820A3 = -*(unsigned char *)(v385 + 960);
          byte_1E9F820A4 = v344;
          __cxa_guard_release(&qword_1E9F820A8);
          uint64_t v189 = v385;
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F820B8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v189 = v385;
        if (__cxa_guard_acquire(&qword_1E9F820B8))
        {
          byte_1E9F820B0[0] = *(unsigned char *)(v385 + 960);
          byte_1E9F820B1 = byte_1E9F820B0[0];
          word_1E9F820B2 = 0;
          byte_1E9F820B4 = 0;
          __cxa_guard_release(&qword_1E9F820B8);
          uint64_t v189 = v385;
        }
      }
      uint64_t v263 = 0;
      uint64_t v264 = v347 + 16 * v262;
      uint64_t v365 = (_DWORD *)(v264 + 5);
      int v355 = (_DWORD *)(v264 + 9);
      uint64_t v376 = v387;
      uint64_t v372 = v388;
      int v361 = 0x7FFFFFFF;
      char v357 = 5;
      do
      {
        char v265 = 0;
        int v390 = 0;
        int v391 = 0;
        uint64_t v266 = 1;
        do
        {
          uint64_t v267 = 0;
          char v380 = v265;
          int v269 = v390;
          int v268 = v391;
          uint64_t v270 = v266 - 1;
          uint64_t v271 = &v372[5 * v266];
          do
          {
            if (v267 != 2)
            {
              int v272 = *(_DWORD *)&v376[20 * v266 + 4 * v267];
              int v273 = (unsigned __int16)v271[v267];
              if (v271[v267])
              {
                if (v272 >= 0) {
                  int v274 = (unsigned __int16)v271[v267];
                }
                else {
                  int v274 = -v273;
                }
                int v275 = (v274 + 2 * v272) / (2 * v273);
                int v276 = byte_1E9F820B0[v267];
                if (v275 < v276) {
                  int v276 = (v274 + 2 * v272) / (2 * v273);
                }
                if (v275 <= *((char *)&word_1E9F820A0 + v267)) {
                  int v277 = *((char *)&word_1E9F820A0 + v267);
                }
                else {
                  int v277 = v276;
                }
              }
              else
              {
                int v277 = 0;
              }
              int v389 = v277;
              LODWORD(v392) = 0;
              int v278 = sub_1BBAD27A4(v189, v273, v272, &v389, (int *)&v392, v263, *(_DWORD *)(a1 + 176));
              uint64_t v189 = v385;
              v269 += v278;
              v268 += (int)v392;
              *((unsigned char *)&v394 + 32 * v270 + byte_1BBB833F0[v267] - 1) = v389;
            }
            ++v267;
          }
          while (v267 != 5);
          int v390 = v269;
          int v391 = v268;
          if (*(_DWORD *)(v189 + 916) == 1)
          {
            sub_1BBAD2888(v189, (uint64_t)v387, v263, (char *)&v394 + 32 * v270, v266, &v391, &v390, *(_DWORD *)(a1 + 176));
            uint64_t v189 = v385;
          }
          char v265 = 1;
          uint64_t v266 = 2;
        }
        while ((v380 & 1) == 0);
        v390 += 4;
        uint64_t v3 = a1;
        int v279 = v391 + *(_DWORD *)(a1 + 176) * v390;
        int v280 = v361;
        if (v279 < v361)
        {
          *uint64_t v365 = v394;
          *int v355 = v396[0];
          int v280 = v279;
          char v357 = v263;
        }
        int v361 = v280;
        ++v263;
        v372 += 15;
        v376 += 60;
      }
      while (v263 != 4);
    }
    char v281 = 0;
    unint64_t v356 = (char *)(v347 + 16 * v346);
    int v282 = *(_DWORD *)(v3 + 176);
    int v283 = 12 * v282;
    uint64_t v284 = 1;
    do
    {
      uint64_t v285 = 0;
      int8x16_t v286 = &v393[4 * v284 + 11];
      char v381 = v281;
      uint64_t v287 = v284 - 1;
      unsigned int v288 = &v388[32 * v284 + 252];
      unint64_t v289 = &v388[64 * v284 + 60];
      do
      {
        int v290 = *(_DWORD *)&v289[2 * v285];
        int v291 = (unsigned __int16)v288[v285];
        if (v288[v285])
        {
          if (v290 >= 0) {
            int v292 = (unsigned __int16)v288[v285];
          }
          else {
            int v292 = -v291;
          }
          int v293 = (v292 + 2 * v290) / (2 * v291);
          int v294 = *(unsigned __int8 *)(v189 + 33);
          if (v293 >= v294) {
            int v295 = *(unsigned __int8 *)(v189 + 33);
          }
          else {
            int v295 = v293;
          }
          if (v293 <= -v294) {
            int v296 = -v294;
          }
          else {
            int v296 = v295;
          }
        }
        else
        {
          int v296 = 0;
          int v391 = 0;
        }
        int v389 = v296;
        int v297 = sub_1BBAD27A4(v189, v291, v290, &v389, &v391, 4, v282);
        uint64_t v189 = v385;
        *((unsigned char *)v286 + v285) = v389;
        *((_DWORD *)&v393[-1] + v285++) = v391 + v297 * v282;
      }
      while (v285 != 32);
      uint64_t v298 = 0;
      int v299 = HIDWORD(v392) + v392 + LODWORD(v393[0]);
      int v300 = 0x7FFFFFFF;
      do
      {
        int v301 = *((_DWORD *)v393 + v298 + 1) + v299;
        if (v301 < v300)
        {
          *(&v397 + v287) = v298;
          int v300 = v301;
        }
        int v299 = v301 - *((_DWORD *)&v393[-1] + v298++);
      }
      while (v298 != 29);
      v283 += v300;
      char v281 = 1;
      uint64_t v284 = 2;
    }
    while ((v381 & 1) == 0);
    int v302 = v361;
    uint64_t v3 = a1;
    if (v283 < v361)
    {
      uint64_t v303 = v347 + 16 * v345;
      uint64_t v304 = v397;
      uint64_t v305 = v398;
      *(unsigned char *)(v303 + 14) = v397;
      *(_DWORD *)(v303 + 5) = *(_DWORD *)((char *)&v394 + v304);
      *(unsigned char *)(v303 + 15) = v305;
      *(_DWORD *)(v303 + 9) = *(_DWORD *)((char *)v396 + v305);
      int v282 = *(_DWORD *)(a1 + 176);
      char v357 = 4;
      int v302 = v283;
    }
    LODWORD(v191) = v354;
    char v306 = *v356;
    if (v302 >= v282)
    {
      *unint64_t v356 = v306 & 0xF | 0xA0;
      int v302 = *(_DWORD *)(a1 + 176);
    }
    else
    {
      *unint64_t v356 = v306 & 0xF | (32 * v357) | 0x10;
    }
    unsigned int v192 = v353;
    v245 += (*(_DWORD *)(a1 + 180) * v302) >> 8;
  }
  int v307 = v191 + *(_DWORD *)(v189 + 20) * v192;
  uint64_t v308 = (unsigned char *)(*(void *)(*(void *)v189 + 664) + 16 * v307);
  uint64_t v373 = *(void *)(v189 + 928);
  v393[0] = 0;
  uint64_t v392 = 0;
  LOWORD(v391) = 0;
  uint64_t v369 = (_WORD *)(v373 + 2 * v307);
  _WORD *v369 = 0;
  if ((int)v191 < 1)
  {
    int v362 = 0;
  }
  else
  {
    LOBYTE(v391) = 1;
    int v362 = v308 - 16;
    uint64_t v392 = v308 - 16;
  }
  int v377 = v308;
  if ((int)v192 < 1)
  {
    uint64_t v358 = 0;
  }
  else
  {
    BYTE1(v391) = 1;
    uint64_t v358 = &v308[-16 * *(int *)(v189 + 20)];
    v393[0] = v358;
  }
  int v309 = v245;
  uint64_t v310 = 0;
  int v382 = 0;
  uint64_t v366 = v307;
  uint64_t v311 = *(unsigned __int8 *)(v348 + 40);
  int v312 = word_1BBB833F6[v311 ^ 1];
  LODWORD(v311) = word_1BBB833F6[v311] + v312;
  int v397 = v312;
  int v398 = v311;
  uint64_t result = (uint64_t)v388;
  int v313 = -1;
  char v314 = 1;
  unsigned int v315 = -1;
  do
  {
    char v316 = v314;
    if (!*((unsigned char *)&v391 + v310)) {
      goto LABEL_432;
    }
    int v317 = (unsigned __int8 *)v393[v310 - 1];
    if (!v317)
    {
      uint64_t v3 = a1;
      goto LABEL_432;
    }
    int v395 = 0;
    uint64_t v394 = 0;
    int v318 = *(unsigned __int8 *)(v189 + 912);
    int v319 = *(unsigned __int8 *)(v189 + 913);
    if (!(v319 | v318))
    {
      int v331 = 0;
      goto LABEL_430;
    }
    unint64_t v320 = v318 == 0;
    unsigned int v321 = *v317;
    unint64_t v322 = &v388[5 * v320];
    uint64_t v323 = &v387[20 * v320];
    do
    {
      if (v320)
      {
        unsigned int v324 = v321 >> 5;
        if ((v321 & 0x10) == 0) {
          goto LABEL_424;
        }
      }
      else
      {
        unsigned int v324 = (v321 >> 1) & 7;
        if ((v321 & 1) == 0) {
          goto LABEL_424;
        }
      }
      if (v324 == 4)
      {
        uint64_t v325 = v317[v320 + 13];
        v157.i32[0] = *((_DWORD *)&v394 + v320);
        int32x4_t v326 = *(int32x4_t *)&v387[128 * v320 + 360 + 4 * v325];
        v158.i32[0] = *(_DWORD *)&v317[4 * v320 + 1];
        int32x4_t v158 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v158.i8));
        int32x4_t v157 = vmlaq_s32(v157, vmlaq_s32(vnegq_s32(vaddq_s32(v326, v326)), v158, (int32x4_t)vmovl_u16(*(uint16x4_t *)&v387[64 * v320 + 744 + 2 * v325])), v158);
        *((_DWORD *)&v394 + v320) = vaddvq_s32(v157);
      }
      else if (v324 <= 3)
      {
        uint64_t v327 = 0;
        unint64_t v328 = &v322[15 * v324];
        int v329 = &v323[60 * v324];
        do
        {
          if (v327 != 2)
          {
            int v330 = (char)v317[4 * v320 + byte_1BBB833F0[v327]];
            *((_DWORD *)&v394 + v320) += (v330 * (unsigned __int16)v328[v327] - 2 * *(_DWORD *)&v329[4 * v327]) * v330;
          }
          ++v327;
        }
        while (v327 != 5);
      }
      if (v320) {
        *((_DWORD *)&v394 + v320) = (*(_DWORD *)(a1 + 180) * *((_DWORD *)&v394 + v320)) >> 8;
      }
LABEL_424:
      if (!v319) {
        break;
      }
      v322 += 5;
      v323 += 20;
      BOOL v205 = v320++ >= 2;
    }
    while (!v205);
    int v331 = v395 + HIDWORD(v394) + v394;
    uint64_t v189 = v385;
LABEL_430:
    uint64_t v3 = a1;
    int v332 = *(&v397 + v310);
    if (v331 + ((v332 * *(_DWORD *)(a1 + 172)) >> 8) < v309)
    {
      int v382 = v332 >> 8;
      int v309 = v331 + ((v332 * *(_DWORD *)(a1 + 172)) >> 8);
      unsigned int v315 = v310;
      int v313 = v331;
    }
LABEL_432:
    char v314 = 0;
    uint64_t v310 = 1;
  }
  while ((v316 & 1) != 0);
  if (v309 >= *(_DWORD *)(v3 + 172) * (*(unsigned __int8 *)(v189 + 913) + *(unsigned __int8 *)(v189 + 912)))
  {
    uint64_t v334 = v351;
    int v333 = v352;
    uint64_t v336 = v349;
    uint64_t v335 = v350;
    if (v354 >= 1 && (*v362 & 0x11) == 0)
    {
      unsigned int v315 = 0;
      goto LABEL_443;
    }
    if (v353 >= 1 && (*v358 & 0x11) == 0)
    {
      unsigned int v315 = 1;
      goto LABEL_443;
    }
    *uint64_t v308 = -86;
  }
  else
  {
    uint64_t v334 = v351;
    int v333 = v352;
    uint64_t v336 = v349;
    uint64_t v335 = v350;
    if ((v315 & 0x80000000) != 0) {
      goto LABEL_446;
    }
LABEL_443:
    *(unsigned char *)uint64_t v369 = v315 == 0;
    *(unsigned char *)(v373 + 2 * v366 + 1) = v315 != 0;
    int v337 = (_OWORD *)v393[v315 - 1];
    *int v377 = *v337;
    if ((*(unsigned char *)v337 & 8) != 0)
    {
      *(void *)(v3 + 160) = 2147483649;
    }
    else
    {
      *(_DWORD *)(v3 + 160) = v313;
      *(_DWORD *)(v3 + 164) = v382;
    }
  }
LABEL_446:
  if (*(unsigned char *)(v189 + 436))
  {
    uint64_t v338 = v335 + 2 * v336;
    int v340 = *(unsigned __int8 *)(v338 + 1);
    int v209 = (unsigned char *)(v338 + 1);
    int v339 = v340;
    if ((*v333 & 8) == 0 || *v334 || v339)
    {
      int v341 = *(_DWORD *)(v3 + 168);
      if (v341 <= 26)
      {
        int v342 = *(_DWORD *)(v189 + 824) - 2 * v341 + 81;
        if (v342 >= 63) {
          int v342 = 63;
        }
        if (((*(_DWORD *)(v3 + 160)
             + *(_DWORD *)(v3 + 164) * dword_1BBB7B4C0[70 * *(unsigned __int8 *)(v189 + 462) + (v342 & ~(v342 >> 31))]) & 0x80000000) == 0)
        {
          *int v333 = -86;
          unsigned char *v334 = 0;
          goto LABEL_321;
        }
      }
    }
  }
  return result;
}

void sub_1BBA91768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5, unsigned __int8 **a6, unsigned int a7, int *a8, char *a9, int a10)
{
  uint64_t v10 = a4;
  uint64_t v12 = a2;
  int v13 = a10;
  uint64_t v590 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(a1 + 1880);
  int v15 = *(unsigned __int8 *)(v14 + 2009) - a4;
  int v16 = 1 << (*(unsigned char *)(v14 + 2009) - a4);
  int v525 = v16;
  BOOL v545 = v16 + (int)a2 <= *(_DWORD *)(a1 + 16) && v16 + (int)a3 <= *(_DWORD *)(a1 + 20);
  uint64_t v544 = a1 + 4336;
  char v563 = v15 - 1;
  int v539 = 1 << (v15 - 1);
  uint64_t v551 = (int)a4;
  uint64_t v554 = (int)a4 + 1;
  v570[0] = 1;
  int v557 = *(unsigned __int8 *)(v14 + 2008);
  BOOL v569 = v15 > v557;
  sub_1BBA8DEB8(a1, *a5, a2, a3, a4, a10);
  uint64_t v565 = a3;
  double v19 = sub_1BBA8DEB8(a1, *a6, v12, a3, v10, a10);
  *((_WORD *)*a6 + 107) = a10;
  int v21 = (void **)*a5;
  *((_WORD *)*a5 + 107) = a10;
  int v22 = (void ***)a6;
  uint64_t v537 = a6;
  uint64_t v566 = a1;
  unsigned int v556 = v12;
  uint64_t v540 = v10;
  int v529 = v15;
  if ((int)v10 >= 1)
  {
    int v23 = *(_DWORD *)(a1 + 4428);
    int v24 = v12 - v23;
    int v25 = *(_DWORD *)(a1 + 4432);
    int v26 = v565 - v25;
    unint64_t v27 = *(unsigned __int8 *)v21;
    int v28 = v12;
    unint64_t v29 = v27 >> 3;
    unint64_t v30 = v27 >> 2;
    if (v28 == v23)
    {
      memcpy(v21[13], (const void *)(*(void *)(a1 + 4704) + 2 * (v26 >> 3)), 2 * v29);
      memcpy(v21[15], (const void *)(*(void *)(a1 + 4720) + 16 * (v26 >> 2)), 16 * v30 + 32);
      if (v565 == v25) {
        uint64_t v31 = *(void *)(a1 + 4728);
      }
      else {
        uint64_t v31 = *(void *)(a1 + 4720) + 16 * ((uint64_t)v26 >> 2);
      }
      uint64_t v10 = v540;
      unsigned int v44 = v21[16];
      uint64_t v45 = *(void *)(v31 - 16);
      *(void *)((char *)v44 - 10) = *(void *)(v31 - 10);
      *(v44 - 2) = v45;
    }
    else
    {
      int v32 = v28 - 1;
      int v33 = v28 - 1 - v23;
      int v34 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009);
      int v35 = v34 - v540;
      while (v24 >> v35 != v33 >> v35)
      {
        BOOL v123 = v35++ < v34;
        if (!v123)
        {
          int v36 = -1;
          goto LABEL_15;
        }
      }
      int v37 = v34 - v35;
      if (v37 >= (int)v540) {
        int v36 = v37;
      }
      else {
        int v36 = v37 + 1;
      }
LABEL_15:
      int v38 = 0;
      uint64_t v39 = *(unsigned __int8 **)(a1
                                + 32 * v36
                                + 8
                                * ((v33 >> (v34 - v36)) & 1 | (2 * ((v26 >> (v34 - v36)) & 1)))
                                + 4456);
      unsigned int v40 = v32 - *((_DWORD *)v39 + 1);
      unsigned int v41 = v565 - *((_DWORD *)v39 + 2);
      if ((v40 & 0x80000000) != 0)
      {
        uint64_t v10 = v540;
      }
      else
      {
        uint64_t v10 = v540;
        if ((v41 & 0x80000000) == 0)
        {
          unint64_t v42 = *v39;
          if (v40 >= v42 || v41 >= v42) {
            int v38 = 0;
          }
          else {
            int v38 = (_WORD *)(*((void *)v39 + 11)
          }
                          + 2 * ((v40 >> 3) + (v42 >> 3) * (unint64_t)(v41 >> 3)));
        }
      }
      if (v27 >= 8)
      {
        uint64_t v46 = 0;
        if (v29 <= 1) {
          unsigned int v47 = 1;
        }
        else {
          unsigned int v47 = v27 >> 3;
        }
        uint64_t v48 = 2 * v47;
        do
        {
          *(_WORD *)((char *)v21[13] + v46) = *v38;
          int v38 = (_WORD *)((char *)v38 + (((unint64_t)*v39 >> 2) & 0x3E));
          v46 += 2;
        }
        while (v48 != v46);
        unsigned int v40 = v32 - *((_DWORD *)v39 + 1);
        unsigned int v41 = v565 - *((_DWORD *)v39 + 2);
      }
      int v49 = 0;
      if ((v40 & 0x80000000) == 0 && (v41 & 0x80000000) == 0)
      {
        unint64_t v50 = *v39;
        if (v40 >= v50 || v41 >= v50) {
          int v49 = 0;
        }
        else {
          int v49 = (uint64_t *)(*((void *)v39 + 12)
        }
                          + 16 * ((v40 >> 2) + (v50 >> 2) * (unint64_t)(v41 >> 2)));
      }
      if (v27 >= 4)
      {
        uint64_t v52 = 0;
        if (v30 <= 1) {
          unsigned int v53 = 1;
        }
        else {
          unsigned int v53 = v27 >> 2;
        }
        uint64_t v54 = 16 * v53;
        do
        {
          int v55 = (char *)v21[15] + v52;
          uint64_t v56 = *v49;
          *(void *)((char *)v55 + 6) = *(uint64_t *)((char *)v49 + 6);
          *int v55 = v56;
          int v49 = (uint64_t *)((char *)v49 + ((4 * *v39) & 0x3F0));
          v52 += 16;
        }
        while (v54 != v52);
      }
      if ((a7 & 0xF) != 0)
      {
        int v57 = (char *)v21[15] + 16 * v30;
        uint64_t v58 = *v49;
        *(void *)((char *)v57 + 6) = *(uint64_t *)((char *)v49 + 6);
        *int v57 = v58;
      }
      else
      {
        int v59 = (char *)v21[15] + 16 * v30;
        uint64_t v60 = *(void *)(a1 + 4440);
        *(void *)((char *)v59 + 6) = *(void *)(a1 + 4446);
        *int v59 = v60;
      }
    }
    if (v565 == v25)
    {
      memcpy(v21[14], (const void *)(*(void *)(a1 + 4712) + 2 * (v24 >> 3)), (2 * v29));
      memcpy(v21[16], (const void *)(*(void *)(a1 + 4728) + 16 * (v24 >> 2)), (16 * v30 + 32));
      uint64_t v12 = v556;
      int v22 = (void ***)v537;
      int v13 = a10;
      int v15 = v529;
      if (v556 != v23)
      {
        uint64_t v61 = *(void *)(a1 + 4728) + 16 * ((uint64_t)v24 >> 2);
        uint64_t v62 = v21[16];
        uint64_t v63 = *(void *)(v61 - 16);
        *(void *)((char *)v62 - 10) = *(void *)(v61 - 10);
        *(v62 - 2) = v63;
      }
    }
    else
    {
      int v64 = v565 - 1;
      int v65 = *(_DWORD *)(a1 + 4432);
      int v66 = v565 - v65;
      int v67 = v565 - 1 - v65;
      int v68 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009);
      int v69 = v68 - v10;
      int v22 = (void ***)v537;
      while (v66 >> v69 != v67 >> v69)
      {
        BOOL v123 = v69++ < v68;
        if (!v123)
        {
          int v70 = -1;
          goto LABEL_59;
        }
      }
      int v70 = v68 - v69;
      if (v68 - v69 < (int)v10) {
        ++v70;
      }
LABEL_59:
      int v71 = 0;
      int v72 = *(unsigned __int8 **)(a1
                                + 32 * v70
                                + 8
                                * (((v556 - *(_DWORD *)(a1 + 4428)) >> (v68 - v70)) & 1 | (2
                                                                                         * ((v67 >> (v68 - v70)) & 1)))
                                + 4456);
      unsigned int v73 = v556 - *((_DWORD *)v72 + 1);
      if ((v73 & 0x80000000) != 0)
      {
        int v75 = v565;
      }
      else
      {
        unsigned int v74 = v64 - *((_DWORD *)v72 + 2);
        int v75 = v565;
        if ((v74 & 0x80000000) == 0)
        {
          unint64_t v76 = *v72;
          if (v73 >= v76 || v74 >= v76) {
            int v71 = 0;
          }
          else {
            int v71 = (const void *)(*((void *)v72 + 11)
          }
                               + 2 * ((v73 >> 3) + (v76 >> 3) * (unint64_t)(v74 >> 3)));
        }
      }
      memcpy(v21[14], v71, (2 * v29));
      uint64_t v78 = 0;
      unsigned int v79 = v556 - *((_DWORD *)v72 + 1);
      if ((v79 & 0x80000000) == 0)
      {
        unsigned int v80 = v64 - *((_DWORD *)v72 + 2);
        if ((v80 & 0x80000000) == 0)
        {
          unint64_t v81 = *v72;
          if (v79 >= v81 || v80 >= v81) {
            uint64_t v78 = 0;
          }
          else {
            uint64_t v78 = (const void *)(*((void *)v72 + 12)
          }
                               + 16 * ((v79 >> 2) + (v81 >> 2) * (unint64_t)(v80 >> 2)));
        }
      }
      uint64_t v83 = v30;
      memcpy(v21[16], v78, 16 * (v27 >> 2));
      uint64_t v10 = v540;
      int v15 = v529;
      if (v556 != v23)
      {
        int v84 = *(_DWORD *)(v566 + 4428);
        int v85 = v556 - v84;
        int v86 = *(_DWORD *)(v566 + 4432);
        int v87 = v75 - v86;
        int v88 = v556 - 1 - v84;
        int v89 = v64 - v86;
        int v90 = *(unsigned __int8 *)(*(void *)(v566 + 1880) + 2009);
        int v91 = v90 - v540;
        while (v85 >> v91 != v88 >> v91 || v87 >> v91 != v89 >> v91)
        {
          BOOL v123 = v91++ < v90;
          if (!v123)
          {
            int v92 = -1;
            goto LABEL_84;
          }
        }
        int v92 = v90 - v91;
        if (v90 - v91 < (int)v540) {
          ++v92;
        }
LABEL_84:
        uint64_t v93 = *(unsigned __int8 **)(v566
                                  + 32 * v92
                                  + 8
                                  * ((v88 >> (v90 - v92)) & 1 | (2
                                                                             * ((v89 >> (v90 - v92)) & 1)))
                                  + 4456);
        unsigned int v94 = (uint64_t *)(*((void *)v93 + 12)
                        + 16
                        * (((v556 - 1 - *((_DWORD *)v93 + 1)) >> 2)
                         + ((unint64_t)*v93 >> 2) * ((v64 - *((_DWORD *)v93 + 2)) >> 2)));
        uint64_t v95 = v21[16];
        uint64_t v96 = *v94;
        *(void *)((char *)v95 - 10) = *(uint64_t *)((char *)v94 + 6);
        *(v95 - 2) = v96;
      }
      if ((a7 & 0x1E000) != 0)
      {
        int v97 = *(_DWORD *)(v566 + 4428);
        int v98 = v556 - v97;
        int v99 = *(_DWORD *)(v566 + 4432);
        int v100 = v75 - v99;
        int v101 = v27 + v556 - v97;
        int v102 = v64 - v99;
        int v103 = *(unsigned __int8 *)(*(void *)(v566 + 1880) + 2009);
        int v104 = v103 - v540;
        while (v98 >> v104 != v101 >> v104 || v100 >> v104 != v102 >> v104)
        {
          BOOL v123 = v104++ < v103;
          if (!v123)
          {
            int v105 = -1;
            goto LABEL_94;
          }
        }
        int v105 = v103 - v104;
        if (v103 - v104 < (int)v540) {
          ++v105;
        }
LABEL_94:
        int v109 = *(unsigned __int8 **)(v566
                                   + 32 * v105
                                   + 8
                                   * ((v101 >> (v103 - v105)) & 1 | (2
                                                                                 * ((v102 >> (v103 - v105)) & 1)))
                                   + 4456);
        int v110 = (uint64_t *)(*((void *)v109 + 12)
                         + 16
                         * (((v27 + v556 - *((_DWORD *)v109 + 1)) >> 2)
                          + ((unint64_t)*v109 >> 2) * ((v64 - *((_DWORD *)v109 + 2)) >> 2)));
        uint64_t v108 = *v110;
        uint64_t v107 = *(uint64_t *)((char *)v110 + 6);
        unsigned int v106 = (char *)v21[16] + 16 * v83;
      }
      else
      {
        unsigned int v106 = (char *)v21[16] + 16 * v83;
        uint64_t v107 = *(void *)(v566 + 4446);
        uint64_t v108 = *(void *)(v566 + 4440);
      }
      *(void *)((char *)v106 + 6) = v107;
      *unsigned int v106 = v108;
      uint64_t v12 = v556;
      int v13 = a10;
    }
  }
  uint64_t v111 = 0;
  long long v112 = xmmword_1BBB6F8F0;
  do
  {
    unsigned int v113 = &v570[v111 + 1];
    *((_DWORD *)v113 + 28) = 0;
    *((_OWORD *)v113 + 6) = xmmword_1BBB6F8F0;
    *((_WORD *)v113 + 58) = 0;
    v111 += 24;
  }
  while (v111 != 96);
  LODWORD(v576) = 0;
  long long v575 = xmmword_1BBB6F8F0;
  WORD2(v576) = 2;
  LODWORD(v578) = 0;
  long long v577 = xmmword_1BBB6F8F0;
  WORD2(v578) = 0;
  int v568 = *a8;
  int v114 = *a9;
  char v567 = *a9;
  uint64_t v115 = v565;
  uint64_t v116 = v566;
  uint64_t v117 = *(void *)(v566 + 1888);
  uint64_t v118 = v544;
  uint64_t v119 = v551;
  if (*(unsigned char *)(v117 + 12))
  {
    int v120 = *(_DWORD *)(v117 + 1620);
    BOOL v121 = v15 >= v120;
    BOOL v531 = v15 == v120;
  }
  else
  {
    BOOL v121 = 0;
    BOOL v531 = 0;
  }
  BOOL v523 = v121;
  if (!v545)
  {
    int v125 = 0;
    int v136 = 0;
    v570[0] = 0;
    BOOL v124 = 1;
    BOOL v569 = 1;
    *(_DWORD *)(v566 + 4 * v551 + 8088) = -1;
    *(unsigned char *)(v566 + 788) = 0;
    goto LABEL_135;
  }
  int v122 = *(_DWORD *)(v566 + 204);
  BOOL v123 = v15 <= v557 || *(_DWORD *)(v566 + 208) <= (int)v10;
  BOOL v124 = !v123;
  BOOL v569 = v124;
  int v125 = v122 <= (int)v10;
  v570[0] = v122 <= (int)v10;
  if (v122 <= (int)v10 && v124)
  {
    if (!*(unsigned char *)(*(void *)(v566 + 952) + 607))
    {
      uint64_t v133 = v565;
      uint64_t v137 = v22;
      int v136 = 1;
      goto LABEL_126;
    }
    int v126 = *(unsigned __int8 **)(v566 + 1880);
    uint64_t v127 = v126[2009] - (uint64_t)(int)v10;
    if ((int)v127 <= v126[2008])
    {
      uint64_t v133 = v565;
      int v135 = 0;
    }
    else if (*(unsigned char *)(*(void *)(v566 + 1872) + 10) == 2)
    {
      int v128 = *(_DWORD *)(v566 + 24) + v126[2001];
      int v129 = word_1BBB7A390[2 * (6 - v127) + 1] + v128 * word_1BBB7A390[2 * (6 - v127)];
      unsigned int v130 = v129 & ~(v129 >> 31);
      int v131 = (__int16 *)((char *)&unk_1BBB7A39C + 4 * (6 - v127));
      int v558 = *v131;
      int v132 = v131[1];
      uint64_t v133 = v565;
      int v134 = sub_1BBA82F38(*(void *)(v566 + 960), v12, v565, v127, *(_DWORD *)(v566 + 16), *(_DWORD *)(v566 + 20));
      if (v134 * v134 >= v130)
      {
        if (v134 * v134 > ((v132 + v128 * v558) & ~((v132 + v128 * v558) >> 31))) {
          int v135 = 1;
        }
        else {
          int v135 = 2;
        }
      }
      else
      {
        int v135 = 0;
      }
      uint64_t v116 = v566;
      uint64_t v10 = v540;
      BOOL v121 = v523;
      uint64_t v119 = v551;
      long long v112 = xmmword_1BBB6F8F0;
    }
    else
    {
      uint64_t v133 = v565;
      int v135 = 2;
    }
    uint64_t v137 = v22;
    int v125 = v135 != 1;
    v570[0] = v135 != 1;
    BOOL v124 = v135 != 0;
    BOOL v569 = v135 != 0;
  }
  else
  {
    uint64_t v133 = v565;
    uint64_t v137 = v22;
  }
  int v136 = v125;
LABEL_126:
  *(_DWORD *)(v116 + 4 * v119 + 8088) = -1;
  *(unsigned char *)(v116 + 788) = 0;
  if (!*(unsigned char *)(v116 + 789))
  {
LABEL_134:
    int v22 = v137;
    uint64_t v118 = v544;
    uint64_t v115 = v133;
    goto LABEL_135;
  }
  int v138 = v125;
  BOOL v139 = v121;
  int v140 = sub_1BBAB1928(*(_DWORD **)(v116 + 976), v12, v133, v525);
  if (v140 == 1)
  {
    uint64_t v116 = v566;
    BOOL v121 = v139;
    long long v112 = xmmword_1BBB6F8F0;
    if (*(_DWORD *)(v566 + 208) <= (int)v10)
    {
      BOOL v124 = 0;
      int v125 = 1;
      v570[0] = 1;
      BOOL v569 = 0;
      int v136 = 1;
    }
    else
    {
      int v125 = 0;
      int v136 = 0;
      v570[0] = 0;
      BOOL v124 = 1;
      BOOL v569 = 1;
    }
    uint64_t v119 = v551;
    goto LABEL_134;
  }
  uint64_t v116 = v566;
  BOOL v121 = v139;
  uint64_t v119 = v551;
  long long v112 = xmmword_1BBB6F8F0;
  int v125 = v138;
  int v22 = v137;
  uint64_t v118 = v544;
  uint64_t v115 = v133;
  if (!v140)
  {
    BOOL v124 = 0;
    int v125 = 1;
    v570[0] = 1;
    BOOL v569 = 0;
    *(unsigned char *)(v566 + 788) = 1;
    int v136 = 1;
  }
LABEL_135:
  uint64_t v526 = v116 + 984;
  if (*(unsigned __int8 *)(*(void *)(v116 + 1872) + 10) <= 1u && *(unsigned char *)(*(void *)(v116 + 952) + 610))
  {
    uint64_t v141 = v116 + 32 * v119;
    double v19 = 0.0;
    *(_OWORD *)(v141 + 32) = 0u;
    *(_OWORD *)(v141 + 48) = 0u;
    *(unsigned char *)(v141 + 58) = *(unsigned char *)(v141 + 58) & 0x7F | ((v136 & 1) << 7);
  }
  BOOL v142 = v114 != 0;
  unsigned int v143 = v22;
  if (!v121)
  {
    char v149 = v563;
    goto LABEL_147;
  }
  int v144 = v125;
  int v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(v116 + 968))(v12, v115, v10, v116, v142);
  uint64_t v116 = v566;
  int v13 = v145;
  unint64_t v146 = ((v12 - *((_DWORD *)*v22 + 1)) >> 3)
       + ((unint64_t)*(unsigned __int8 *)*v22 >> 3) * ((v115 - *((_DWORD *)*v22 + 2)) >> 3);
  *((_WORD *)(*v22)[11] + v146) = ((_WORD)v145 << 9) | *((_WORD *)(*v22)[11] + v146) & 0x1FF;
  unint64_t v147 = ((v12 - *((_DWORD *)*a5 + 1)) >> 3)
       + ((unint64_t)**a5 >> 3) * ((v115 - *((_DWORD *)*a5 + 2)) >> 3);
  *(_WORD *)(*((void *)*a5 + 11) + 2 * v147) = ((_WORD)v145 << 9) | *(_WORD *)(*((void *)*a5 + 11) + 2 * v147) & 0x1FF;
  int v148 = *(_DWORD *)(v566 + 12);
  if (v148 == 5 || v148 == 3)
  {
    *((_WORD *)*v22 + 107) = v145;
    *((_WORD *)*a5 + 107) = v145;
    if (!v10) {
      *(_DWORD *)(v566 + 28) = v145;
    }
    goto LABEL_145;
  }
  if (v148 >= 2)
  {
LABEL_145:
    sub_1BBAB47F4(v526, v145, *(unsigned __int8 *)(*(void *)(v566 + 1880) + 2001));
    uint64_t v116 = v566;
  }
  LODWORD(v142) = 1;
  char v149 = v563;
  uint64_t v119 = v551;
  long long v112 = xmmword_1BBB6F8F0;
  int v125 = v144;
LABEL_147:
  int v553 = v13;
  unsigned int v150 = *v22;
  *((_DWORD *)v150 + 3) = v13;
  uint64_t v151 = *a5;
  *((_DWORD *)v151 + 3) = v13;
  *((_DWORD *)v150 + 4) = *a8;
  *((_DWORD *)v151 + 4) = *a8;
  *((_DWORD *)v150 + 5) = *a8;
  *((_DWORD *)v151 + 5) = *a8;
  BOOL v152 = (unsigned char *)(v116 + v119);
  v152[8108] = 0;
  v152[8112] = 0;
  v152[8116] = 0;
  v152[8104] = 0;
  v152[193] = *(unsigned char *)(v116 + 192);
  v152[8122] = 0;
  int v524 = v142;
  if (!*(unsigned char *)(v118 + 3792)) {
    goto LABEL_150;
  }
  if (*(unsigned char *)(*(void *)(v116 + 1872) + 10) != 2)
  {
    if (*(unsigned char *)(v118 + 3784)) {
      uint64_t v154 = 16;
    }
    else {
      uint64_t v154 = 1;
    }
    if (!v125)
    {
      BOOL v153 = 1;
      goto LABEL_176;
    }
    int v155 = *(unsigned __int8 *)(*(void *)(v116 + 1880) + 2009) - v10;
    int v156 = *(uint64_t **)(v116 + 8136);
    uint64_t v157 = *v156;
    uint64_t v158 = *v156 * ((uint64_t)(int)v115 >> 4) + ((int)v12 >> 4);
    unsigned int v159 = *(unsigned __int8 *)(v156[v154] + v158);
    if (!v124 || !*(unsigned char *)(*(void *)(v116 + 952) + 576))
    {
      BOOL v168 = 1;
      goto LABEL_168;
    }
    if (v155 > 4)
    {
      BOOL v153 = 0;
      goto LABEL_151;
    }
    if (v159 == 31 && v155 == 4) {
      goto LABEL_164;
    }
    signed int v160 = ((int)v115 >> 2) & 0xFFFFFFFE;
    uint64_t v161 = v157 * (v160 + 2) + ((int)v12 >> 3);
    uint64_t v162 = v156[36];
    int v163 = (_WORD *)(v162 + 2 * (v157 * v160 + ((int)v12 >> 3)));
    LOWORD(v19) = *v163;
    WORD2(v19) = v163[1];
    int v164 = (__int16 *)(v162 + 2 * v161);
    v20.i16[0] = *v164;
    v20.i16[2] = v164[1];
    int32x4_t v165 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)&v19, v20));
    int v166 = vaddvq_s32(v165);
    if (v166 > *(unsigned __int16 *)(v156[28] + 2 * v158))
    {
LABEL_164:
      int v167 = &v569;
    }
    else
    {
      int v262 = vaddvq_s32(vmulq_s32(v165, v165));
      int v263 = v166 + 2;
      BOOL v123 = v166 < -2;
      int v264 = v166 + 5;
      if (!v123) {
        int v264 = v263;
      }
      signed int v265 = ((v262 + 2) >> 2) - (v264 >> 2) * (v264 >> 2);
      if ((v265 & ~(v265 >> 31)) <= 1 << vcvtmd_s64_f64((float)((float)((float)(*(__int16 *)(*((void *)v151 + 11)+ 2* (((v12- *((_DWORD *)v151 + 1)) >> 3)+ ((unint64_t)*v151 >> 3)* ((v115- *((_DWORD *)v151 + 2)) >> 3))) >> 9)* 0.26)+ 9.96)+ 0.5))goto LABEL_166; {
      int v167 = v570;
      }
    }
    *int v167 = 0;
    int v125 = v570[0];
LABEL_166:
    BOOL v168 = v125 != 0;
LABEL_168:
    if (v168 && v155 <= 4)
    {
      uint64_t v169 = *(void *)(v116 + 952);
      if (*(unsigned char *)(v169 + 574))
      {
        int v170 = (unsigned int *)(v116 + 4 * v119 + 8088);
        unsigned int v171 = *v170;
        if (v159 > 0x19)
        {
          *int v170 = v171 & 0xFFFFEDFF;
          uint64_t v172 = v116 + v119;
          uint64_t v173 = 8116;
        }
        else
        {
          *int v170 = v171 & 0xFFFFFEF0;
          if (v159) {
            BOOL v569 = 0;
          }
          uint64_t v172 = v116 + v119;
          uint64_t v173 = 8112;
        }
        *(unsigned char *)(v172 + v173) = 1;
      }
      if (*(unsigned char *)(v169 + 575) && v159 >= 0x1A)
      {
        int v254 = (int *)(v116 + 4 * v119 + 8088);
        *int v254 = 0;
        if (v155 == 4)
        {
          switch(*(unsigned char *)(v156[16] + v158))
          {
            case 0x1A:
            case 0x1F:
              goto LABEL_284;
            case 0x1B:
              goto LABEL_315;
            case 0x1C:
              goto LABEL_316;
            case 0x1D:
            case 0x1E:
              int v125 = 0;
              v570[0] = 0;
              BOOL v569 = 1;
              break;
            default:
              break;
          }
        }
        else
        {
          switch(*(unsigned char *)(v156[40] + v157 * (int)(((int)v115 >> 2) & 0xFFFFFFFE) + ((int)v12 >> 3)))
          {
            case 0:
LABEL_284:
              int v255 = 257;
              goto LABEL_285;
            case 1:
LABEL_315:
              int v282 = 2;
              goto LABEL_317;
            case 2:
LABEL_316:
              int v282 = 4;
LABEL_317:
              *int v254 = v282;
              goto LABEL_318;
            case 3:
              uint64_t v283 = v157 * (int)(v115 & 0xFFFFFFFC) + ((int)v12 >> 2);
              uint64_t v284 = v156[20];
              int v285 = *(_DWORD *)(v284 + 4 * v283);
              int v286 = *(_DWORD *)(v284 + 4 * (v283 + 1));
              uint64_t v287 = v283 + 4 * v157;
              int v288 = *(_DWORD *)(v284 + 4 * v287);
              uint64_t v289 = v283 + 1 + 4 * v157;
              int v290 = *(_DWORD *)(v284 + 4 * v289);
              uint64_t v291 = v156[22];
              int v292 = *(unsigned __int8 *)(v291 + v283);
              int v293 = *(unsigned __int8 *)(v291 + v283 + 1);
              int v294 = *(unsigned __int8 *)(v291 + v287);
              int v295 = *(unsigned __int8 *)(v291 + v289);
              if (v285 == v286 && v292 == v293 || (char v296 = 0, v297 = 4, v288 == v290) && v294 == v295)
              {
                *int v254 = 2;
                char v296 = 1;
                *(unsigned char *)(v116 + v551 + 8122) = 1;
                int v297 = 6;
              }
              uint64_t v119 = v551;
              if (v285 == v288 && v292 == v294 || v286 == v290 && v293 == v295)
              {
                *int v254 = v297;
LABEL_318:
                *(unsigned char *)(v116 + v119 + 8122) = 1;
              }
              else if ((v296 & 1) == 0)
              {
                int v255 = 7;
LABEL_285:
                *int v254 = v255;
              }
              break;
            default:
              break;
          }
        }
        *(unsigned char *)(v116 + v119 + 8112) = 1;
      }
    }
  }
  int v136 = v125;
LABEL_150:
  BOOL v153 = v136 == 0;
  if (!v136)
  {
LABEL_176:
    char v534 = v153;
    int v174 = v569;
    int v175 = v539;
    goto LABEL_195;
  }
LABEL_151:
  if (!*(unsigned char *)(v116 + v119 + 8112))
  {
    if (*(unsigned char *)(v116 + 189))
    {
      *(_DWORD *)(v116 + 4 * v119 + 8088) = 257;
    }
    else if (*(unsigned __int8 *)(*(void *)(v116 + 1880) + 2009) - v10 == 3 {
           && *(unsigned __int8 *)(*(void *)(v116 + 1872) + 10) <= 1u)
    }
    {
      uint64_t v176 = v116 + 4 * v119;
      if (*(unsigned char *)(*(void *)(v116 + 952) + 250)) {
        unsigned int v177 = *(_DWORD *)(v176 + 8088);
      }
      else {
        unsigned int v177 = *(_DWORD *)(v176 + 8088) & 0xFFFFFFF1;
      }
      *(_DWORD *)(v176 + 8088) = v177 & 0xFFFFFFF7;
    }
  }
  int v175 = v539;
  if (*(unsigned __int8 *)(*(void *)(v116 + 1872) + 10) <= 1u)
  {
    if (*(unsigned char *)(v116 + 788)) {
      *(_DWORD *)(v116 + 4 * v119 + 8088) = 256;
    }
    sub_1BBA9C560(v116, v12, v115, v10, a5, v22, a7);
    uint64_t v116 = v566;
    unsigned int v150 = *v22;
    char v149 = v563;
    long long v112 = xmmword_1BBB6F8F0;
  }
  char v534 = v153;
  int v174 = v569;
  if (!*(unsigned char *)(v116 + 188))
  {
    int v178 = *((unsigned __int8 *)v150[12]
           + 16 * ((v12 - *((_DWORD *)v150 + 1)) >> 2)
           + 16
           * ((unint64_t)*(unsigned __int8 *)v150 >> 2)
           * ((v115 - *((_DWORD *)v150 + 2)) >> 2)
           + 10);
    int v174 = v569 && v178 != 2;
    BOOL v569 = v174;
  }
LABEL_195:
  int v533 = v174;
  if (v174)
  {
    if (v531) {
      char v567 = 1;
    }
    int v180 = 0;
    uint64_t v181 = 0;
    int v182 = 0;
    uint64_t v183 = 0;
    uint64_t v184 = 0;
    int v559 = v539 + v12;
    int v555 = v539 + v115;
    uint64_t v185 = v116 + 8 * v554 + 4584;
    uint64_t v186 = v116 + 32 * v554 + 4456;
    uint64_t v187 = -1;
    uint64_t v188 = -1;
    do
    {
      uint64_t v189 = ((v184 & 1) << v149) + (int)v12;
      int v190 = *(_DWORD *)(v116 + 16);
      if ((int)v189 < v190)
      {
        uint64_t v191 = (v184 >> 1 << v149) + v565;
        int v192 = *(_DWORD *)(v116 + 20);
        if ((int)v191 < v192)
        {
          uint64_t v193 = v181;
          uint64_t v194 = sub_1BBA8EDCC(a7, v184, v559 < v190, v555 < v192);
          sub_1BBA91768(v566, v189, v191, v554, v185, v186, v194, &v568, &v567, v553);
          long long v112 = xmmword_1BBB6F8F0;
          char v149 = v563;
          uint64_t v116 = v566;
          v183 += *(void *)(*(void *)v186 + 168);
          v182 += *(_DWORD *)(*(void *)v186 + 184);
          uint64_t v188 = v183 + v182 * *(unsigned __int16 *)(v566 + 996);
          uint64_t v181 = v193 + *(void *)(*(void *)v186 + 192);
          v180 += *(_DWORD *)(*(void *)v186 + 208);
          uint64_t v187 = v181 + ((v180 * *(unsigned __int16 *)(v566 + 992)) >> 8);
        }
        LODWORD(v12) = v556;
      }
      ++v184;
      v186 += 8;
    }
    while (v184 != 4);
    LODWORD(v576) = v182;
    *(void *)&long long v575 = v183;
    *((void *)&v575 + 1) = v188;
    LODWORD(v578) = v180;
    *(void *)&long long v577 = v181;
    *((void *)&v577 + 1) = v187;
    int v195 = *(_DWORD *)(v116 + 12);
    unsigned int v143 = (void ***)v537;
    uint64_t v115 = v565;
    if (v195 > 1)
    {
      uint64_t v196 = v181;
      sub_1BBAB47F4(v526, v553, *(unsigned __int8 *)(*(void *)(v116 + 1880) + 2001));
      uint64_t v116 = v566;
      uint64_t v197 = 0;
      int v195 = *(_DWORD *)(v566 + 12);
      int v198 = &v571;
      do
      {
        uint64_t v199 = *(void *)(v566 + 32 * v554 + 4456 + v197);
        *(void *)(v199 + 176) = *(void *)(v199 + 168)
                                + ((*(_DWORD *)(v199 + 184)
                                  * *(unsigned __int16 *)(v566 + 992 + 2 * *(__int16 *)(v199 + 188))) >> (8 * (*(_WORD *)(v199 + 188) == 0)));
        unsigned int v200 = (long long *)(v199 + 192);
        *(void *)(v199 + 200) = *(void *)(v199 + 192)
                                + ((*(_DWORD *)(v199 + 208)
                                  * *(unsigned __int16 *)(v566 + 992 + 2 * *(__int16 *)(v199 + 212))) >> (8 * (*(_WORD *)(v199 + 212) == 0)));
        if (v195 == 5)
        {
          if (!*(unsigned char *)(v544 + 3784))
          {
            *int v198 = *v200;
            *((void *)v198 + 2) = *(void *)(v199 + 208);
          }
        }
        else if (v195 == 3)
        {
          if ((v534 & 1) == 0)
          {
            *int v198 = *v200;
            *((void *)v198 + 2) = *(void *)(v199 + 208);
            int v201 = *(__int16 *)(v199 + 214) - v553;
            if (v201)
            {
              if (v201 >= 16) {
                int v201 = 16;
              }
              if (v201 <= -15) {
                int v201 = -15;
              }
              *(void *)int v198 = (*(void *)v198 * (unint64_t)word_1BBB7B35C[v201 + 15] + 128) >> 8;
            }
          }
          *((_WORD *)v198 + 11) = v553;
          *(_WORD *)(v199 + 214) = v553;
        }
        v197 += 8;
        int v198 = (long long *)((char *)v198 + 24);
      }
      while (v197 != 32);
      *((void *)&v575 + 1) = v183 + v182 * *(unsigned __int16 *)(v566 + 996);
      uint64_t v181 = v196;
      *((void *)&v577 + 1) = v196 + ((v180 * *(unsigned __int16 *)(v566 + 992)) >> 8);
      char v149 = v563;
      long long v112 = xmmword_1BBB6F8F0;
    }
    if ((v195 == 5 || v195 == 3) && (v534 & 1) == 0 && !*(unsigned char *)(v544 + 3784))
    {
      uint64_t v202 = 0;
      uint64_t v203 = v571;
      int v204 = (int)v572;
      do
      {
        v203 += *(void *)&v573[v202];
        v204 += *(_DWORD *)&v573[v202 + 16];
        v202 += 24;
      }
      while (v202 != 72);
      *(void *)&long long v571 = v203;
      LODWORD(v572) = v204;
    }
    if (v545 && v529 > *(unsigned __int8 *)(*(void *)(v116 + 1880) + 2008))
    {
      uint64_t v205 = v181;
      sub_1BBA9595C(v116, v12, v565, *v537, 1, 0, 0, 0, 0);
      uint64_t v116 = v566;
      LODWORD(v576) = v182 + 1;
      uint64_t v206 = *(void *)(v566 + 944);
      int v207 = *(unsigned __int8 *)(*(void *)(v566 + 1880) + 2008);
      if ((int)v12 - (1 << v207) < 0)
      {
        BOOL v210 = 0;
        int v208 = v540;
        char v149 = v563;
        long long v112 = xmmword_1BBB6F8F0;
        uint64_t v211 = v205;
      }
      else
      {
        int v208 = v540;
        if (*(unsigned char *)(v566 + 800)) {
          int v209 = *(_WORD **)(*(void *)(v566 + 848) + 104);
        }
        else {
          int v209 = (_WORD *)(*(void *)(*(void *)(*(void *)(v566 + 1872) + 1360) + 512)
        }
                         + 2
                         * (((v12 - (1 << v207)) >> 3)
                          + *(void *)(*(void *)(*(void *)(v566 + 1872) + 1360) + 488)
                          * ((uint64_t)(int)v565 >> 3)));
        char v149 = v563;
        long long v112 = xmmword_1BBB6F8F0;
        uint64_t v211 = v205;
        BOOL v210 = (*v209 & 3) > (int)v540;
      }
      int v212 = v565 - (1 << v207);
      if (v212 < 0)
      {
        BOOL v218 = 0;
      }
      else
      {
        if (*(unsigned char *)(v566 + 800))
        {
          BOOL v213 = v207 == 31;
          uint64_t v214 = 112;
          if (v213) {
            uint64_t v214 = 104;
          }
          uint64_t v215 = *(void *)(*(void *)(v566 + 848) + v214);
          uint64_t v216 = -536870912;
          if (!v213) {
            uint64_t v216 = 0;
          }
          int v217 = (_WORD *)(v215 + v216);
        }
        else
        {
          int v217 = (_WORD *)(*(void *)(*(void *)(*(void *)(v566 + 1872) + 1360) + 512)
                         + 2
                         * (*(void *)(*(void *)(*(void *)(v566 + 1872) + 1360) + 488)
                          * (v212 >> 3)
                          + ((int)v12 >> 3)));
        }
        BOOL v218 = (*v217 & 3) > v208;
      }
      uint64_t v219 = v206 + v218 + v210;
      uint64_t v220 = *(void *)(v206 + 8);
      unint64_t v221 = *(unsigned __int8 *)(v219 + 42);
      if (v221) {
        unint64_t v222 = v220 - byte_1BBB78C10[(v220 & 0xC0) + (v221 >> 1)];
      }
      else {
        unint64_t v222 = byte_1BBB78C10[(v220 & 0xC0) + (v221 >> 1)];
      }
      int v223 = __clz(v222);
      int v224 = v220 - (v222 << (v223 - 55)) + ((v223 - 55) << 8);
      LODWORD(v572) = v572 + v224;
      LODWORD(v578) = v180 + v224;
      *((void *)&v575 + 1) = v183 + (v182 + 1) * *(unsigned __int16 *)(v566 + 996);
      *((void *)&v577 + 1) = v211 + (((v180 + v224) * *(unsigned __int16 *)(v566 + 992)) >> 8);
    }
    int v175 = v539;
    if (v531)
    {
      uint64_t v225 = 0;
      int v226 = *(_DWORD *)(v116 + 16);
      uint64_t v227 = v116 + 32 * v554 + 4456;
      do
      {
        int v228 = ((v225 & 1) << v149) + v12;
        if (v228 < v226)
        {
          int v229 = (v225 >> 1 << v149) + v565;
          if (v229 < *(_DWORD *)(v116 + 20))
          {
            uint64_t v230 = *(unsigned __int8 **)(v227 + 8 * v225);
            char v231 = sub_1BBA99AE8(((v225 & 1) << v149) + (int)v12, (v225 >> 1 << v149) + v565, v539, v230, 0);
            uint64_t v116 = v566;
            if (*(unsigned char *)(v566 + 8) || (v231 & 1) != 0)
            {
              char v149 = v563;
              long long v112 = xmmword_1BBB6F8F0;
              if (v231) {
                goto LABEL_266;
              }
            }
            else
            {
              char v232 = sub_1BBA99AE8(v228, v229, v539, v230, 1u);
              uint64_t v116 = v566;
              char v149 = v563;
              long long v112 = xmmword_1BBB6F8F0;
              if (v232) {
                goto LABEL_266;
              }
              char v233 = sub_1BBA99AE8(v228, v229, v539, v230, 2u);
              long long v112 = xmmword_1BBB6F8F0;
              char v149 = v563;
              uint64_t v116 = v566;
              if (v233) {
                goto LABEL_266;
              }
            }
          }
        }
        ++v225;
      }
      while (v225 != 4);
      int v234 = sub_1BBA9783C(v116, v12, v565, v540, *v537, *a8, 1);
      long long v112 = xmmword_1BBB6F8F0;
      char v149 = v563;
      uint64_t v116 = v566;
      __int16 v235 = v234;
      uint64_t v236 = 0;
      int v568 = v234;
      do
      {
        int v237 = ((v236 & 1) << v149) + v12;
        if (v237 < *(_DWORD *)(v116 + 16))
        {
          int v238 = (v236 >> 1 << v149) + v565;
          if (v238 < *(_DWORD *)(v116 + 20))
          {
            sub_1BBA991B0(v116, v237, v238, v554, *(unsigned __int8 **)(v566 + 32 * v554 + 4456 + 8 * v236), v235);
            long long v112 = xmmword_1BBB6F8F0;
            char v149 = v563;
            uint64_t v116 = v566;
          }
        }
        ++v236;
      }
      while (v236 != 4);
    }
  }
LABEL_266:
  int v239 = *(_DWORD *)(v116 + 4);
  uint64_t v240 = v544;
  int v241 = v540;
  int v242 = v553;
  uint64_t v243 = v551;
  if ((v534 & 1) == 0)
  {
    int v244 = *(unsigned __int8 **)(v116 + 1880);
    if (*(int *)(v116 + 12) >= 2)
    {
      sub_1BBAB47F4(v526, v553, v244[2001]);
      long long v112 = xmmword_1BBB6F8F0;
      uint64_t v243 = v551;
      char v149 = v563;
      uint64_t v116 = v566;
      int v244 = *(unsigned __int8 **)(v566 + 1880);
    }
    int v245 = v244[2009] - v540;
    if (*(unsigned __int8 *)(*(void *)(v116 + 1872) + 10) > 1u)
    {
      char v252 = 0;
      uint64_t v253 = (int)v540;
      goto LABEL_367;
    }
    if (!*(unsigned char *)(v116 + 189)
      || (int v246 = *v537,
          unint64_t v247 = **v537,
          uint64_t v248 = *((void *)*v537 + 12),
          *(unsigned char *)(v248
                   + 16
                   * (((v556 - *((_DWORD *)*v537 + 1)) >> 2)
                    + (v247 >> 2) * (unint64_t)((v115 - *((_DWORD *)*v537 + 2)) >> 2))
                   + 10) == 2)
      || *(unsigned char *)(v116 + v243 + 8112))
    {
LABEL_340:
      unsigned int v143 = (void ***)v537;
      sub_1BBA9C560(v116, v556, v115, v241, a5, (void ***)v537, a7);
      uint64_t v243 = v551;
      uint64_t v116 = v566;
      if (!*(unsigned char *)(v566 + v551 + 8108))
      {
        char v252 = 0;
        uint64_t v253 = v551;
        uint64_t v240 = v544;
LABEL_366:
        char v149 = v563;
        long long v112 = xmmword_1BBB6F8F0;
        goto LABEL_367;
      }
      uint64_t v298 = *v537;
      uint64_t v240 = v544;
      char v149 = v563;
      long long v112 = xmmword_1BBB6F8F0;
      if (*(unsigned char *)(v566 + 188) && !*(unsigned char *)(v544 + 3791)) {
        goto LABEL_400;
      }
      if (*(unsigned char *)(v566 + 8) && *(char *)(*(void *)(v566 + 952) + 226) >= 1) {
        int v299 = *(unsigned __int8 *)(v566 + 188) ^ 1;
      }
      else {
        int v299 = 0;
      }
      unsigned int v300 = v556 - *((_DWORD *)v298 + 1);
      unsigned int v301 = v115 - *((_DWORD *)v298 + 2);
      unint64_t v302 = *v298;
      int v303 = *(unsigned __int8 *)(*((void *)v298 + 12)
                                + 16 * ((v300 >> 2) + (v302 >> 2) * (unint64_t)(v301 >> 2))
                                + 10);
      if (v303 == 2 || *(unsigned char *)(*(void *)(v566 + 952) + 609) && v245 >= 5) {
        int v299 = 0;
      }
      if (!*(unsigned char *)(v544 + 3784) || *(unsigned char *)(*(void *)(v566 + 952) + 252) == 3)
      {
        if (v303 == 2 && *(unsigned char *)(v566 + 8) && !*(unsigned char *)(v566 + 788))
        {
          char v252 = 0;
        }
        else
        {
          uint64_t v116 = v566;
          char v252 = sub_1BBA97AF4(v566, v556, v115, v241, v298, 1, *(unsigned __int8 *)(v566 + 8) == 0, v299, (unsigned int *)&v298[24 * *(unsigned __int8 *)(v566 + 188) + 168]);
        }
        if (*(int *)(v116 + 4) < 3)
        {
          if (*(unsigned char *)(v544 + 3791) && *(char *)(*(void *)(v116 + 952) + 252) < 1) {
            goto LABEL_365;
          }
          sub_1BBA9CF24(v116, v556, v115, v241, *v537, (uint64_t)(*v537 + 168));
        }
        else
        {
          sub_1BBA99CA4(v116, v556, v115, v241, *a5, *v537, a7, 0xFFFFFFFFuLL);
        }
        uint64_t v116 = v566;
LABEL_365:
        uint64_t v243 = v551;
        uint64_t v253 = v551;
        goto LABEL_366;
      }
      int v326 = *(unsigned __int8 *)(*(void *)(v566 + 1880) + 2009) - v241;
      uint64_t v327 = (_WORD *)(*((void *)v298 + 11)
                     + 2 * ((v300 >> 3) + (v302 >> 3) * (unint64_t)(v301 >> 3)));
      if (v303 == 2)
      {
        if ((*v327 & 0x80) == 0)
        {
          *v327 |= 0x80u;
          if (1 << v326 >= 8)
          {
            uint64_t v328 = 0;
            unint64_t v329 = 2 * ((unint64_t)*v298 >> 3);
            int v330 = v327;
            unsigned int v143 = (void ***)v537;
            do
            {
              int v331 = v330;
              uint64_t v332 = (1 << v326) >> 3;
              do
              {
                *v331++ = *v327;
                --v332;
              }
              while (v332);
              ++v328;
              int v330 = (_WORD *)((char *)v330 + v329);
            }
            while (v328 != (1 << v326) >> 3);
LABEL_400:
            char v252 = 0;
            uint64_t v253 = v551;
            goto LABEL_367;
          }
        }
      }
      else
      {
        sub_1BBAB48E0(v566 + 1920, v566, v556, v115, v241, v303, ((unsigned __int16)*v327 >> 4) & 7);
        uint64_t v240 = v544;
        sub_1BBABDCB4(v566 + 1920, v556, v115, 0, v326, v298);
        long long v112 = xmmword_1BBB6F8F0;
        uint64_t v243 = v551;
        char v149 = v563;
        uint64_t v116 = v566;
      }
      char v252 = 0;
      uint64_t v253 = v243;
      unsigned int v143 = (void ***)v537;
LABEL_367:
      *(void *)(v116 + 32 * v253 + 32) = 0xFFFFFFFFLL;
      if (*(unsigned char *)(v116 + 188) || (v252) && !*(unsigned char *)(v116 + v253 + 8116))
      {
        *(_DWORD *)(v116 + 4 * v253 + 8088) |= 0x1200u;
        int v242 = v553;
        goto LABEL_413;
      }
      uint64_t v304 = v116 + 4 * v253;
      unsigned int v305 = *(_DWORD *)(v304 + 8088);
      int v242 = v553;
      if ((v305 & 0x1200) == 0) {
        goto LABEL_432;
      }
      uint64_t v306 = *(void *)(v116 + 1872);
      if (*(unsigned __int8 *)(v306 + 10) > 1u || !*(unsigned char *)(v116 + v253 + 8108))
      {
LABEL_413:
        if (*(unsigned __int8 *)(*(void *)(v116 + 1880) + 241) == v241) {
          int v334 = (*(_DWORD *)(v116 + 4 * v241 + 8088) >> 12) & 1;
        }
        else {
          int v334 = 0;
        }
        if (*(int *)(v116 + 200) >= 1 && !*(unsigned char *)(v116 + v243 + 8108) && *(unsigned char *)(v116 + v243 + 8112))
        {
          uint64_t v335 = *(void **)(v116 + 8136);
          uint64_t v336 = *v335 * (int)(v115 & 0xFFFFFFFC) + ((int)v556 >> 2);
          *(_DWORD *)(*v143)[12] = *(_DWORD *)(v335[20] + 4 * v336);
          *((unsigned char *)(*v143)[12] + 8) = *(unsigned char *)(*(void *)(*(void *)(v116 + 8136) + 176) + v336);
        }
        *(_WORD *)(v240 + 362) = 0;
        uint64_t v337 = v116 + 4 * v243;
        if ((*(_DWORD *)(v337 + 8088) & 0x200) != 0)
        {
          uint64_t v338 = v337 + 8088;
          sub_1BBA9D284(v116, v556, (unsigned __int8 *)v115, v241, a5, v143, a7, 0);
          uint64_t v116 = v566;
          if ((v334 & ((*(unsigned char *)(v338 + 1) & 0x10) >> 4) & 1) == 0)
          {
LABEL_425:
            char v149 = v563;
            uint64_t v243 = v551;
            long long v112 = xmmword_1BBB6F8F0;
            if (*(_DWORD *)(v116 + 4) == 2)
            {
              int v339 = *v143;
              unsigned int v340 = v556 - *((_DWORD *)*v143 + 1);
              unsigned int v341 = v115 - *((_DWORD *)*v143 + 2);
              unint64_t v342 = *(unsigned __int8 *)*v143;
              int v343 = (*v143)[12];
              unint64_t v344 = (v340 >> 2) + (v342 >> 2) * (unint64_t)(v341 >> 2);
              if (v343[16 * v344 + 10] == 1)
              {
                if (*(unsigned char *)(v240 + 3790))
                {
                  if ((*((_WORD *)v339[11] + (v340 >> 3) + (v342 >> 3) * (unint64_t)(v341 >> 3)) & 0x70) != 0x30)
                  {
                    int v345 = *(unsigned __int8 *)(*(void *)(v116 + 1880) + 2009) - v241;
                    int v346 = &v343[16 * v344];
                    uint64_t v347 = *v346;
                    int v348 = v346[1];
                    *((_DWORD *)v339 + 52) = 0;
                    *((_OWORD *)v339 + 12) = xmmword_1BBB6F8F0;
                    *((_WORD *)v339 + 106) = 0;
                    uint64_t v349 = v116 + 8 * v551;
                    v339[18] = *(void **)(v349 + 4616);
                    uint64_t v350 = v116 + 1920;
                    uint64_t v351 = *(void *)(v116 + 4296);
                    int v352 = *(unsigned __int8 *)(*(void *)(v116 + 4304) + 2009) - v241;
                    *(void *)(v116 + 3992) = v351;
                    *(_DWORD *)(v116 + 3968) = v352;
                    *(void *)(v116 + 3972) = 1;
                    *(_DWORD *)(v116 + 3980) = *(unsigned __int8 *)(*(void *)(v351 + 1368) + 245);
                    *(_OWORD *)(v116 + 4056) = 0u;
                    *(_OWORD *)(v116 + 4072) = 0u;
                    *(_OWORD *)(v116 + 4088) = 0u;
                    *(_OWORD *)(v116 + 4104) = 0u;
                    *(_OWORD *)(v116 + 4120) = 0u;
                    *(void *)(v116 + 4136) = 0;
                    *(void *)(v116 + 4320) = v116;
                    *(_DWORD *)(v116 + 4344) = v556;
                    *(_DWORD *)(v116 + 4348) = v115;
                    *(_DWORD *)(v116 + 4352) = v241;
                    *(void *)(v116 + 4328) = v526;
                    *(unsigned char *)uint64_t v240 = *(unsigned char *)(v116 + 8);
                    sub_1BBAB7384(v116 + 1920, v556, v115, (unsigned __int8 *)v339, v345, 0, v347, 0, a7, (uint64_t)(v339 + 24));
                    uint64_t v116 = v566;
                    int8x16_t v353 = *(int8x16_t *)(v339 + 17);
                    *(int8x16_t *)(v339 + 17) = vextq_s8(v353, v353, 8uLL);
                    *(void *)(v349 + 4616) = v353.i64[0];
                    if (!*(unsigned char *)(v566 + 8))
                    {
                      *(unsigned char *)(v240 + 363) = 0;
                      v339[24] = (char *)v339[24]
                               + sub_1BBABC664(v350, v556, (unsigned __int8 *)v115, (unsigned __int8 *)v339, (unsigned __int8 *)v339, 1u, 0, v348, v345, 0, 0, a7, &v581);
                      sub_1BBA8E71C(v566, (uint64_t)v339[17], (uint64_t)v339[18], v556 - *((_DWORD *)v339 + 1), v115 - *((_DWORD *)v339 + 2), v556 - *((_DWORD *)v339 + 1), v115 - *((_DWORD *)v339 + 2), *(unsigned __int8 *)v339 >> 1);
                      uint64_t v116 = v566;
                    }
                  }
                }
                uint64_t v354 = *(void *)(v116 + 944);
                long long v355 = *(_OWORD *)(v354 + 16);
                *(_OWORD *)(v354 + 216) = *(_OWORD *)v354;
                long long v356 = *(_OWORD *)(v354 + 32);
                long long v357 = *(_OWORD *)(v354 + 64);
                long long v358 = *(_OWORD *)(v354 + 80);
                *(_OWORD *)(v354 + 264) = *(_OWORD *)(v354 + 48);
                *(_OWORD *)(v354 + 280) = v357;
                *(_OWORD *)(v354 + 248) = v356;
                *(_OWORD *)(v354 + 232) = v355;
                long long v359 = *(_OWORD *)(v354 + 96);
                long long v360 = *(_OWORD *)(v354 + 128);
                long long v361 = *(_OWORD *)(v354 + 144);
                *(_OWORD *)(v354 + 328) = *(_OWORD *)(v354 + 112);
                *(_OWORD *)(v354 + 344) = v360;
                *(_OWORD *)(v354 + 296) = v358;
                *(_OWORD *)(v354 + 312) = v359;
                long long v362 = *(_OWORD *)(v354 + 176);
                *(_OWORD *)(v354 + 376) = *(_OWORD *)(v354 + 160);
                *(_OWORD *)(v354 + 392) = v362;
                LOBYTE(v581) = 0;
                *(void *)(v354 + 408) = *(void *)(v354 + 192);
                *(_OWORD *)(v354 + 360) = v361;
                uint64_t v363 = 8 * (*(_DWORD *)(v354 + 208) - *(_DWORD *)(v354 + 24));
                *(void *)(v354 + 32) = 0;
                *(void *)(v354 + 8) = 510;
                *(void *)(v354 + 16) = v363;
                unsigned int v143 = (void ***)v537;
                sub_1BBA9595C(v116, v556, v115, *v537, 1, 0, 0, 0, 0);
                uint64_t v364 = *v537;
                *((_DWORD *)v364 + 4) = *((_DWORD *)*v537 + 5);
                sub_1BBA9AF40((unint64_t *)v566, v556, v115, v241, a7, (int *)v364 + 4, &v581);
                uint64_t v116 = v566;
                uint64_t v365 = *(void *)(v566 + 944);
                *((_DWORD *)*v537 + 52) = ((*(_DWORD *)(v365 + 16)
                                          + 8 * (*(_DWORD *)(v365 + 24) - *(_DWORD *)(v365 + 208))) << 8)
                                        - *(_DWORD *)(v365 + 8)
                                        + 510;
                long long v367 = *(_OWORD *)(v365 + 264);
                long long v366 = *(_OWORD *)(v365 + 280);
                *(_OWORD *)(v365 + 32) = *(_OWORD *)(v365 + 248);
                *(_OWORD *)(v365 + 48) = v367;
                long long v369 = *(_OWORD *)(v365 + 328);
                long long v368 = *(_OWORD *)(v365 + 344);
                long long v370 = *(_OWORD *)(v365 + 296);
                *(_OWORD *)(v365 + 96) = *(_OWORD *)(v365 + 312);
                *(_OWORD *)(v365 + 112) = v369;
                *(_OWORD *)(v365 + 64) = v366;
                *(_OWORD *)(v365 + 80) = v370;
                long long v371 = *(_OWORD *)(v365 + 392);
                long long v372 = *(_OWORD *)(v365 + 360);
                *(_OWORD *)(v365 + 160) = *(_OWORD *)(v365 + 376);
                *(_OWORD *)(v365 + 176) = v371;
                long long v373 = *(_OWORD *)(v365 + 232);
                *(void *)(v365 + 192) = *(void *)(v365 + 408);
                *(_OWORD *)(v365 + 128) = v368;
                *(_OWORD *)(v365 + 144) = v372;
                *(_OWORD *)uint64_t v365 = *(_OWORD *)(v365 + 216);
                *(_OWORD *)(v365 + 16) = v373;
                *((void *)*v537 + 25) = *((void *)*v537 + 24)
                                        + ((*((_DWORD *)*v537 + 52)
                                          * *(unsigned __int16 *)(v566
                                                                              + 2 * *((__int16 *)*v537 + 106)
                                                                              + 992)) >> (8
                                                                                        * (*((_WORD *)*v537 + 106) == 0)));
                int v242 = v553;
                char v149 = v563;
                uint64_t v243 = v551;
                long long v112 = xmmword_1BBB6F8F0;
              }
            }
            goto LABEL_432;
          }
        }
        else if (!v334)
        {
          goto LABEL_425;
        }
        *(unsigned char *)(v240 + 363) = 0;
        sub_1BBA9D284(v116, v556, (unsigned __int8 *)v115, v241, a5, v143, a7, 3u);
        uint64_t v116 = v566;
        *(unsigned char *)(v240 + 362) = 0;
        goto LABEL_425;
      }
      int v307 = (unsigned int *)(v304 + 8088);
      uint64_t v308 = *(void *)(v116 + 952);
      if (*(unsigned char *)(v308 + 609) && v245 > 4)
      {
        LOBYTE(v309) = 0;
      }
      else
      {
        uint64_t v310 = *v143;
        if ((*((_WORD *)(*v143)[11]
              + ((v556 - *((_DWORD *)*v143 + 1)) >> 3)
              + ((unint64_t)*(unsigned __int8 *)*v143 >> 3)
              * ((v115 - *((_DWORD *)*v143 + 2)) >> 3)) & 0x80) != 0)
        {
          LOBYTE(v309) = 0;
        }
        else
        {
          uint64_t v311 = *(void *)(v116 + 1880);
          if (!*(unsigned char *)(v308 + 610)) {
            goto LABEL_389;
          }
          uint64_t v312 = v306 + 79296;
          int v313 = *(unsigned __int8 *)(v311 + 2013) >> v241;
          if ((a7 & 0xF0) != 0)
          {
            uint64_t v314 = *(void *)(v306 + 1368);
            char v315 = *(unsigned char *)(v314 + 2009);
            if ((*(unsigned char *)(*(void *)(v306 + 79296)
                           + 32
                           * ((((*(unsigned __int8 *)(v314 + 2013) - 1) & (v556 - v313)) >> (v315 - v241))
                            + (((*(unsigned __int8 *)(v314 + 2013) - 1) & v115) >> (v315 - v241))
                            * byte_1BBB7A49D[v243]
                            + *(_DWORD *)(v306 + 79304)
                            * (((v556 - v313) >> v315) + (v115 >> v315) * *(_DWORD *)(v314 + 2016))
                            + byte_1BBB7A499[v243])
                           + 26) & 0x98) == 0x88)
              goto LABEL_389;
          }
          if ((a7 & 0x1E00) != 0)
          {
            uint64_t v316 = *(void *)(v306 + 1368);
            char v317 = *(unsigned char *)(v316 + 2009);
            if ((*(unsigned char *)(*(void *)(v306 + 79296)
                           + 32
                           * ((((*(unsigned __int8 *)(v316 + 2013) - 1) & v556) >> (v317 - v241))
                            + (((*(unsigned __int8 *)(v316 + 2013) - 1) & (v115 - v313)) >> (v317 - v241))
                            * byte_1BBB7A49D[v243]
                            + *(_DWORD *)(v306 + 79304)
                            * ((v556 >> v317) + ((v115 - v313) >> v317) * *(_DWORD *)(v316 + 2016))
                            + byte_1BBB7A499[v243])
                           + 26) & 0x98) == 0x88)
              goto LABEL_389;
          }
          if ((a7 & 0x1E000) != 0
            && (uint64_t v318 = *(void *)(v306 + 1368),
                char v319 = *(unsigned char *)(v318 + 2009),
                (*(unsigned char *)(*(void *)(v306 + 79296)
                          + 32
                          * ((((*(unsigned __int8 *)(v318 + 2013) - 1) & (v313 + v556)) >> (v319 - v241))
                           + (((*(unsigned __int8 *)(v318 + 2013) - 1) & (v115 - v313)) >> (v319 - v241))
                           * byte_1BBB7A49D[v243]
                           + *(_DWORD *)(v306 + 79304)
                           * (((v313 + v556) >> v319) + ((v115 - v313) >> v319) * *(_DWORD *)(v318 + 2016))
                           + byte_1BBB7A499[v243])
                          + 26) & 0x98) == 0x88)
            || (a7 & 0x100) != 0
            && (uint64_t v320 = *(void *)(v306 + 1368),
                char v321 = *(unsigned char *)(v320 + 2009),
                (*(unsigned char *)(*(void *)(v306 + 79296)
                          + 32
                          * ((((*(unsigned __int8 *)(v320 + 2013) - 1) & (v556 - v313)) >> (v321 - v241))
                           + (((*(unsigned __int8 *)(v320 + 2013) - 1) & (v115 - v313)) >> (v321 - v241))
                           * byte_1BBB7A49D[v243]
                           + *(_DWORD *)(v306 + 79304)
                           * (((v556 - v313) >> v321) + ((v115 - v313) >> v321) * *(_DWORD *)(v320 + 2016))
                           + byte_1BBB7A499[v243])
                          + 26) & 0x98) == 0x88)
            || (a7 & 0xF) != 0
            && (uint64_t v322 = *(void *)(v306 + 1368),
                char v323 = *(unsigned char *)(v322 + 2009),
                (*(unsigned char *)(*(void *)v312
                          + 32
                          * ((((*(unsigned __int8 *)(v322 + 2013) - 1) & (v556 - v313)) >> (v323 - v241))
                           + (((*(unsigned __int8 *)(v322 + 2013) - 1) & (v313 + v115)) >> (v323 - v241))
                           * byte_1BBB7A49D[v243]
                           + *(_DWORD *)(v312 + 8)
                           * (((v556 - v313) >> v323) + ((v313 + v115) >> v323) * *(_DWORD *)(v322 + 2016))
                           + byte_1BBB7A499[v243])
                          + 26) & 0x98) == 0x88))
          {
LABEL_389:
            int v324 = 1;
          }
          else
          {
            BOOL v500 = sub_1BBA9D150(v116, v556, v115, v241, (unsigned __int8 *)*v143, a7);
            uint64_t v243 = v551;
            uint64_t v116 = v566;
            int v324 = v500;
          }
          int v325 = 3;
          if (v245 > *(unsigned __int8 *)(v311 + 2011))
          {
            int v175 = v539;
          }
          else
          {
            int v175 = v539;
            if (v324)
            {
              sub_1BBAB4898(v116 + 1920, v116, v556, v115, v540, (unsigned __int8 *)v310);
              uint64_t v240 = v544;
              int v241 = v540;
              int v325 = sub_1BBABF248(v116 + 1920, v556, v115, v245, *v537);
              uint64_t v243 = v551;
              uint64_t v116 = v566;
              unsigned int v305 = *v307;
            }
          }
          if (v324) {
            unsigned int v309 = v325;
          }
          else {
            unsigned int v309 = 0;
          }
          if (v309 >= 2)
          {
            unsigned int v333 = v305 | 0x200;
            unsigned int v143 = (void ***)v537;
            int v242 = v553;
            goto LABEL_412;
          }
          unsigned int v143 = (void ***)v537;
        }
        int v242 = v553;
      }
      unsigned int v333 = v305 & 0xFFFFFDFF;
      LOBYTE(v325) = v309;
LABEL_412:
      unsigned int *v307 = v333 & 0xFFFFEFFF | ((v325 & 1) << 12);
      goto LABEL_413;
    }
    int v249 = (int *)(v116 + 4 * v243 + 8088);
    int v250 = *v249;
    unsigned int v251 = *v249 | 6;
    int *v249 = v251;
    if (v245 < 4)
    {
      if (v245 == 3 && !*(unsigned char *)(*(void *)(v116 + 952) + 250))
      {
        unsigned int v251 = v250 & 0xFFFFFFF9;
        goto LABEL_337;
      }
    }
    else
    {
      unsigned int v251 = v250 | 0xE;
      int *v249 = v250 | 0xE;
    }
    if (v245 <= v244[2008] || !v533) {
      goto LABEL_338;
    }
    uint64_t v256 = 0;
    unsigned int v257 = v556 - *((_DWORD *)v246 + 1);
    if ((v257 & 0x80000000) == 0)
    {
      unsigned int v258 = v115 - *((_DWORD *)v246 + 2);
      if ((v258 & 0x80000000) == 0)
      {
        uint64_t v256 = 0;
        if (v257 < v247 && v258 < v247) {
          uint64_t v256 = v248 + 16 * ((v257 >> 2) + (v247 >> 2) * (unint64_t)(v258 >> 2));
        }
      }
    }
    unsigned int v259 = v244[2013] >> v540;
    unsigned int v586 = v556;
    unsigned int v587 = v556 + (v259 >> 1);
    unsigned int v588 = v556;
    unsigned int v589 = v587;
    v583[0] = v115;
    v583[1] = v115;
    int v584 = v115 + (v259 >> 1);
    int v585 = v584;
    long long v581 = 0u;
    long long v582 = 0u;
    long long v579 = 0u;
    long long v580 = 0u;
    v261 = v259 >= 0x11 && (uint64_t v260 = *(void *)(v116 + 952), *(_DWORD *)(v260 + 508)) && *(unsigned char *)(v260 + 580) != 0;
    uint64_t v266 = 0;
    int v267 = 0;
    unsigned int v268 = 0;
    int v269 = 0;
    do
    {
      uint64_t v270 = *(unsigned __int8 **)(v116 + 32 * (int)v554 + 4456 + 8 * v266);
      unsigned int v271 = *(&v586 + v266) - *((_DWORD *)v270 + 1);
      unsigned int v272 = v583[v266] - *((_DWORD *)v270 + 2);
      unint64_t v273 = *v270;
      uint64_t v275 = *((void *)v270 + 11);
      uint64_t v274 = *((void *)v270 + 12);
      int v276 = (_WORD *)(v275 + 2 * ((v271 >> 3) + (v273 >> 3) * (unint64_t)(v272 >> 3)));
      *((void *)&v581 + v266) = v276;
      if ((int)v554 < (*v276 & 3)) {
        ++v269;
      }
      uint64_t v277 = v274 + 16 * ((v271 >> 2) + (v273 >> 2) * (unint64_t)(v272 >> 2));
      *((void *)&v579 + v266) = v277;
      int v278 = *(unsigned __int8 *)(v277 + 10);
      if (v278 == 2) {
        ++v268;
      }
      if (v278 == 1) {
        ++v267;
      }
      ++v266;
    }
    while (v266 != 4);
    if (v261
      || (int v279 = (char *)&v575 + 24 * (v239 > 2),
          unint64_t v280 = *((void *)v246 + 21) + (*((_DWORD *)v279 + 4) >> 2) * *(unsigned __int16 *)(v116 + 996),
          unint64_t v281 = *((void *)v279 + 1),
          v280 < v281))
    {
      v251 &= 0xFFFFFFF9;
LABEL_314:
      uint64_t v243 = v551;
LABEL_337:
      int *v249 = v251;
      goto LABEL_338;
    }
    uint64_t v243 = v551;
    if ((*(unsigned char *)(v256 + 11) & 1) == 0 || v268 < 4 || *((void *)v246 + 22) >= v281)
    {
      if (v269)
      {
        if (v281 >= *((void *)v246 + 22)) {
          goto LABEL_338;
        }
        goto LABEL_335;
      }
      if (v267 == 1) {
        goto LABEL_338;
      }
      if (!v267)
      {
        __int16 v501 = *(_WORD *)v581;
        int v502 = *(_WORD *)v581 & 0x70;
        if (v502 == 16)
        {
          if ((**((_WORD **)&v581 + 1) & 0x70) == 0x10)
          {
LABEL_676:
            v251 &= ~4u;
LABEL_682:
            int v241 = v540;
            goto LABEL_337;
          }
        }
        else if (!v502)
        {
          __int16 v503 = **((_WORD **)&v581 + 1);
          if ((**((_WORD **)&v581 + 1) & 0x70) == 0)
          {
            __int16 v504 = *(_WORD *)v582;
            if ((*(_WORD *)v582 & 0x70) == 0 && (**((_WORD **)&v582 + 1) & 0x70) == 0)
            {
              uint64_t v505 = v579;
              BOOL v506 = sub_1BBAA56B8((__int16 *)v256, (__int16 *)v579, 0);
              uint64_t v507 = *((void *)&v579 + 1);
              if (!v506
                || !sub_1BBAA56B8((__int16 *)v256, *((__int16 **)&v579 + 1), 0)
                || (uint64_t v561 = v580, !sub_1BBAA56B8((__int16 *)v256, (__int16 *)v580, 0))
                || !sub_1BBAA56B8((__int16 *)v256, *((__int16 **)&v580 + 1), 0)
                || (v501 & 0x80) == 0
                && ((*(unsigned __int8 *)(v505 + 11) | ((v503 & 0x80) >> 7)) & 1) == 0
                && ((*(unsigned __int8 *)(v507 + 11) | ((v504 & 0x80) >> 7)) & 1) == 0
                && (*(unsigned char *)(v561 + 11) & 1) == 0)
              {
                BOOL v508 = sub_1BBAA56B8((__int16 *)v505, (__int16 *)v507, 1u);
                uint64_t v509 = (__int16 *)v580;
                if (v508
                  && sub_1BBAA56B8((__int16 *)v580, *((__int16 **)&v580 + 1), 1u)
                  && !sub_1BBAA56B8((__int16 *)v505, v509, 1u))
                {
                  unsigned int v251 = v251 & 0xFFFFFFF9 | 2;
                }
                else
                {
                  if (!sub_1BBAA56B8((__int16 *)v505, v509, 1u)
                    || ((v508 | !sub_1BBAA56B8((__int16 *)v507, *((__int16 **)&v580 + 1), 1u)) & 1) != 0)
                  {
                    if (sub_1BBAA56B8((__int16 *)v505, (__int16 *)v507, 3u)
                      || sub_1BBAA56B8((__int16 *)v505, v509, 3u)
                      || (uint64_t v510 = (__int16 *)*((void *)&v580 + 1),
                          sub_1BBAA56B8((__int16 *)v505, *((__int16 **)&v580 + 1), 3u))
                      || sub_1BBAA56B8((__int16 *)v507, v509, 3u)
                      || sub_1BBAA56B8((__int16 *)v507, v510, 3u)
                      || sub_1BBAA56B8(v509, v510, 3u))
                    {
                      uint64_t v115 = v565;
                      uint64_t v116 = v566;
                      int v175 = v539;
                      int v241 = v540;
                      uint64_t v243 = v551;
                      goto LABEL_338;
                    }
                    goto LABEL_686;
                  }
                  unsigned int v251 = v251 & 0xFFFFFFF9 | 4;
                }
LABEL_687:
                uint64_t v115 = v565;
                uint64_t v116 = v566;
                int v175 = v539;
                int v241 = v540;
                goto LABEL_314;
              }
LABEL_686:
              v251 &= 0xFFFFFFF9;
              goto LABEL_687;
            }
          }
        }
        int v511 = *(_WORD *)v582 & 0x70;
        if (v511 == 16)
        {
          if ((**((_WORD **)&v582 + 1) & 0x70) == 0x10) {
            goto LABEL_676;
          }
        }
        else if (v502 == 32 && v511 == 32)
        {
          goto LABEL_681;
        }
        if ((**((_WORD **)&v581 + 1) & 0x70) == 0x20 && (**((_WORD **)&v582 + 1) & 0x70) == 0x20)
        {
LABEL_681:
          v251 &= ~2u;
          goto LABEL_682;
        }
        int v241 = v540;
LABEL_338:
        if (!*(unsigned char *)(v116 + v243 + 8116)) {
          int *v249 = v251 | 0x1200;
        }
        goto LABEL_340;
      }
      if (v281 <= *((void *)v246 + 22)) {
        goto LABEL_338;
      }
    }
LABEL_335:
    v251 &= 0xFFFFFFF9;
    goto LABEL_337;
  }
LABEL_432:
  int v375 = *((_DWORD *)*v143 + 4);
  uint64_t v376 = *(void *)(v116 + 1872);
  if (*(unsigned __int8 *)(v376 + 10) <= 1u && *(unsigned char *)(*(void *)(v116 + 952) + 610))
  {
    uint64_t v377 = v376 + 79296;
    uint64_t v378 = v116 + 32 * v243;
    int v374 = *v143;
    char v379 = *(unsigned char *)(v378 + 58) & 0xE7 | (8
                                         * (*((unsigned char *)v374[12]
                                            + 16 * ((v556 - *((_DWORD *)v374 + 1)) >> 2)
                                            + 16
                                            * ((unint64_t)*(unsigned __int8 *)v374 >> 2)
                                            * ((v115 - *((_DWORD *)v374 + 2)) >> 2)
                                            + 10) & 3));
    *(unsigned char *)(v378 + 58) = v379;
    *(unsigned char *)(v378 + 58) = v379 & 0xF8 | (*((unsigned __int16 *)(*v143)[11]
                                           + ((v556 - *((_DWORD *)*v143 + 1)) >> 3)
                                           + ((unint64_t)*(unsigned __int8 *)*v143 >> 3)
                                           * ((v115 - *((_DWORD *)*v143 + 2)) >> 3)) >> 4) & 7;
    *(void *)(v378 + 40) = (*v143)[3 * (v239 > 2) + 22];
    uint64_t v380 = *(void *)(v376 + 1368);
    LOBYTE(v374) = *(unsigned char *)(v380 + 2009);
    char v381 = (_OWORD *)(*(void *)v377
                    + 32
                    * ((((*(unsigned __int8 *)(v380 + 2013) - 1) & v556) >> ((_BYTE)v374 - v241))
                     + (((*(unsigned __int8 *)(v380 + 2013) - 1) & v115) >> ((_BYTE)v374 - v241))
                     * byte_1BBB7A49D[v243]
                     + *(_DWORD *)(v377 + 8)
                     * ((v556 >> (char)v374) + (v115 >> (char)v374) * *(_DWORD *)(v380 + 2016))
                     + byte_1BBB7A499[v243]));
    long long v382 = *(_OWORD *)(v378 + 48);
    *char v381 = *(_OWORD *)(v378 + 32);
    v381[1] = v382;
  }
  BOOL v383 = v545;
  if (*(_DWORD *)(v116 + 204) > v241) {
    BOOL v383 = 0;
  }
  int v384 = v533;
  if (!v383)
  {
    uint64_t v400 = 0;
    uint64_t v401 = v116 + 32 * (int)v554 + 4456;
    do
    {
      int v402 = ((v400 & 1) << v149) + v556;
      if (v402 < *(_DWORD *)(v116 + 16))
      {
        int v403 = (v400 >> 1 << v149) + v115;
        if (v403 < *(_DWORD *)(v116 + 20))
        {
          sub_1BBA8E1A8(v116, (unsigned __int8 *)*v143, *(unsigned __int8 **)(v401 + 8 * v400), v402, v403, v175);
          char v149 = v563;
          uint64_t v116 = v566;
        }
      }
      ++v400;
    }
    while (v400 != 4);
    uint64_t v404 = *v143;
    *(_OWORD *)(v404 + 21) = v575;
    v404[23] = v576;
    uint64_t v405 = *v143;
    *((_OWORD *)v405 + 12) = v577;
    v405[26] = v578;
    if (!*(unsigned char *)(v240 + 3784)) {
      goto LABEL_626;
    }
    return;
  }
  int v532 = v375;
  int v385 = -1;
  unsigned int v386 = v556;
  uint64_t v387 = v554;
  if (v533 && *(unsigned char *)(v116 + 191))
  {
    char v388 = *(unsigned char *)(*(void *)(v116 + 1880) + 194);
    int v389 = 500 << v388;
    int v390 = 1 << (v529 - 3);
    if ((*(_DWORD *)(v116 + 20) - (int)v115) >> 3 >= v390) {
      int v391 = 1 << (v529 - 3);
    }
    else {
      int v391 = (*(_DWORD *)(v116 + 20) - (int)v115) >> 3;
    }
    if (v391 < 1)
    {
      int v393 = 0;
    }
    else
    {
      int v392 = 0;
      int v393 = 0;
      int v394 = *(_DWORD *)(v116 + 16);
      uint64_t v395 = (uint64_t)v394 >> 3;
      int v396 = (int)(v394 - v556) >> 3;
      if (v396 < v390) {
        int v390 = v396;
      }
      uint64_t v397 = *(void *)(*(void *)(v116 + 960) + 1328)
           + 4 * (int)v395 * (uint64_t)((int)v115 >> 3)
           + 4 * ((int)v556 >> 3);
      uint64_t v398 = 4 * v395;
      do
      {
        if (v390 >= 1)
        {
          uint64_t v399 = 0;
          do
          {
            if (*(_DWORD *)(v397 + v399) > v393) {
              int v393 = *(_DWORD *)(v397 + v399);
            }
            v399 += 4;
          }
          while (4 * v390 != v399);
        }
        ++v392;
        v397 += v398;
      }
      while (v392 != v391);
    }
    if (v393 <= v389)
    {
      int v385 = -1;
    }
    else
    {
      int v406 = v389 + (v389 >> 1);
      if (v393 < 400 << v388) {
        int v407 = 2;
      }
      else {
        int v407 = 3;
      }
      if (v393 >= v406) {
        int v385 = v407;
      }
      else {
        int v385 = 3;
      }
    }
  }
  int v408 = *v143;
  unsigned int v409 = v556 - *((_DWORD *)*v143 + 1);
  unsigned int v410 = v115 - *((_DWORD *)*v143 + 2);
  unint64_t v411 = *(unsigned __int8 *)*v143;
  if (v409 >= v411 || v410 >= v411) {
    unint64_t v413 = 0;
  }
  else {
    unint64_t v413 = (unint64_t)v408[12]
  }
         + 16 * (v409 >> 2)
         + 16 * (v411 >> 2) * (unint64_t)(v410 >> 2);
  if (*(unsigned char *)(v240 + 3784))
  {
    unsigned int v414 = 0;
    int v415 = 0;
    int v416 = v570[0];
    goto LABEL_503;
  }
  int v417 = *((__int16 *)v408[11] + (v409 >> 3) + (v411 >> 3) * (unint64_t)(v410 >> 3));
  unsigned int v414 = *(_DWORD *)(v116 + 184);
  char v418 = v534;
  if (*(_DWORD *)(v116 + 4) != 2) {
    char v418 = 1;
  }
  if ((v418 & 1) == 0 && *(unsigned __int8 *)(v413 + 10) >= 2u)
  {
    if (*(unsigned char *)(*(void *)(v116 + 952) + 614)
      && v533
      && (unint64_t)v408[22] >= *((void *)&v575 + 1) + (*((void *)&v575 + 1) >> 3))
    {
      v570[0] = 0;
      *((_DWORD *)v408 + 52) = 0;
      *((_OWORD *)v408 + 12) = v112;
      *((_WORD *)v408 + 106) = 0;
    }
    else
    {
      sub_1BBA99CA4(v116, v556, v115, v540, *a5, (unsigned __int8 *)v408, a7, *((unint64_t *)&v577 + 1));
      uint64_t v387 = v554;
      uint64_t v116 = v566;
      int v408 = *v143;
      int v532 = *((_DWORD *)*v143 + 4);
    }
  }
  int v416 = v570[0];
  char v419 = v524 ^ 1;
  if (!v570[0]) {
    char v419 = 1;
  }
  if (v419)
  {
    int v415 = 0;
    int v384 = v533;
  }
  else
  {
    unint64_t v517 = v413;
    int v420 = v408;
    int v421 = sub_1BBA99AE8(v556, v115, v525, (unsigned __int8 *)v408, 0);
    uint64_t v116 = v566;
    if (*(unsigned char *)(v566 + 8) || (v421 & 1) != 0)
    {
      if (!v421)
      {
LABEL_494:
        int v415 = 0;
        int v416 = 1;
        int v524 = 1;
        int v384 = v533;
        int v408 = v420;
        unint64_t v413 = v517;
        uint64_t v387 = v554;
        goto LABEL_503;
      }
    }
    else
    {
      uint64_t v116 = v566;
      if ((sub_1BBA99AE8(v556, v115, v525, (unsigned __int8 *)v420, 1u) & 1) == 0)
      {
        uint64_t v116 = v566;
        if ((sub_1BBA99AE8(v556, v115, v525, (unsigned __int8 *)v420, 2u) & 1) == 0) {
          goto LABEL_494;
        }
      }
    }
    int v532 = v417 >> 9;
    signed int v422 = (v417 >> 9) - *a8;
    if (v422)
    {
      if (v422 < 0) {
        signed int v422 = *a8 - (v417 >> 9);
      }
      unsigned int v423 = 63 - 2 * __clz(v422);
    }
    else
    {
      unsigned int v423 = 1;
    }
    int v384 = v533;
    int v408 = v420;
    uint64_t v387 = v554;
    int v524 = 0;
    unsigned int v424 = *((_DWORD *)v420 + 46) + v423;
    *((_DWORD *)v420 + 46) = v424;
    int v425 = *((_DWORD *)v420 + 52) + (v423 << 8);
    *((_DWORD *)v420 + 52) = v425;
    v420[22] = (char *)v420[21]
             + ((v424 * *(unsigned __int16 *)(v116 + 992 + 2 * *((__int16 *)v420 + 94))) >> (8
                                                                                             * (*((_WORD *)v420 + 94) == 0)));
    v420[25] = (char *)v420[24]
             + ((v425 * *(unsigned __int16 *)(v116 + 992 + 2 * *((__int16 *)v420 + 106))) >> (8 * (*((_WORD *)v420 + 106) == 0)));
    int v416 = 1;
    int v415 = 1;
    unint64_t v413 = v517;
  }
LABEL_503:
  BOOL v428 = v385 < 0 || v416 == 0 || *(unsigned char *)(v116 + 191) == 0 || v384 == 0;
  unsigned int v429 = v414;
  unint64_t v430 = (unint64_t)v408[3 * v414 + 22];
  if (v428) {
    unint64_t v431 = 0;
  }
  else {
    unint64_t v431 = v430 >> v385;
  }
  int v432 = *(_DWORD *)(v116 + 12);
  if (v432 >= 3 && v416)
  {
    int v433 = v539;
    if (*(unsigned char *)(v240 + 3784))
    {
      unint64_t v434 = *((void *)&v575 + 3 * v429 + 1);
    }
    else
    {
      int v435 = *(_DWORD *)(v116 + 28) + *(unsigned __int8 *)(*(void *)(v116 + 1880) + 2001);
      if (v435 >= 63) {
        int v435 = 63;
      }
      __int16 v436 = dword_1BBB7B4C0[70 * *(unsigned __int8 *)(v116 + 1006) + (v435 & ~(v435 >> 31))];
      *(_WORD *)(v116 + 984) = v436;
      *(_WORD *)(v116 + 992) = v436;
      unint64_t v434 = v571
           + ((v572 * *(unsigned __int16 *)(v116 + 992 + 2 * SWORD2(v572))) >> (8 * (WORD2(v572) == 0)));
      *((void *)&v571 + 1) = v434;
    }
  }
  else
  {
    unint64_t v434 = *((void *)&v575 + 3 * v429 + 1);
    int v433 = v539;
    if (!v416) {
      goto LABEL_615;
    }
  }
  if (v432 == 5)
  {
    if (*(unsigned char *)(v240 + 3784))
    {
      int v432 = 5;
      goto LABEL_609;
    }
    unint64_t v516 = (unint64_t)v408[24];
    if (!v384)
    {
      unint64_t v430 = (unint64_t)v408[25];
LABEL_602:
      int v482 = v242 - *(_DWORD *)(v116 + 28);
      if (v482)
      {
        if (v482 >= 16) {
          int v482 = 16;
        }
        if (v482 <= -15) {
          int v482 = -15;
        }
        unint64_t v516 = (v516 * word_1BBB7B3DC[v482 + 15] + 128) >> 8;
      }
      v408[24] = (void *)v516;
      int v432 = *(_DWORD *)(v116 + 12);
      goto LABEL_609;
    }
    unint64_t v512 = v434;
    uint64_t v437 = *(void *)(v116 + 1880);
    int v438 = *(unsigned __int8 *)(v437 + 2000);
    int v560 = *(_DWORD *)(v116 + 28);
    int v439 = *(unsigned __int8 *)(v437 + 2009) - v540;
    int v440 = 1 << v439;
    if (v439 >= *(_DWORD *)(*(void *)(v116 + 1888) + 1620)) {
      int v441 = *(_DWORD *)(*(void *)(v116 + 1888) + 1620);
    }
    else {
      int v441 = *(unsigned __int8 *)(v437 + 2009) - v540;
    }
    uint64_t v562 = (1 << v441);
    unsigned int v552 = (int)v562 >> 1;
    uint64_t v442 = v556 - *((_DWORD *)v408 + 1);
    unsigned int v443 = v115 - *((_DWORD *)v408 + 2);
    uint64_t v564 = v408;
    int v514 = v415;
    int v515 = v416;
    unint64_t v518 = v413;
    unint64_t v513 = v431;
    if (v438 == 8)
    {
      if ((int)(v442 | v443) >= 0)
      {
        uint64_t v519 = 0;
        unsigned int v444 = *(unsigned __int8 *)v408;
        if (v442 < v444 && v443 < v444)
        {
          uint64_t v445 = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*(void *)v408[3] + 24))(v408[3], (unint64_t)v408[4] + v442 + *((unsigned __int8 *)v408 + 1) * (unint64_t)v443, v387);
          int v408 = v564;
          uint64_t v116 = v566;
          uint64_t v519 = v445;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          unsigned int v443 = v115 - *((_DWORD *)v564 + 2);
        }
      }
      else
      {
        uint64_t v519 = 0;
      }
      uint64_t v530 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        uint64_t v530 = 0;
        unsigned int v446 = *(unsigned __int8 *)v408;
        if (v442 < v446 && v443 < v446)
        {
          uint64_t v447 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)v408[17] + 10) + 24))(*((void *)v408[17] + 10), *((void *)v408[17] + 11)+ v442+ *(unsigned __int8 *)v408[17] * (unint64_t)v443, v387);
          int v408 = v564;
          uint64_t v116 = v566;
          uint64_t v530 = v447;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          unsigned int v443 = v115 - *((_DWORD *)v564 + 2);
        }
      }
      uint64_t v527 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        uint64_t v527 = 0;
        unsigned int v448 = *(unsigned __int8 *)v408;
        if (v442 < v448 && v443 < v448)
        {
          uint64_t v449 = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*(void *)v408[5] + 24))(v408[5], (unint64_t)v408[6]+ v442+ *((unsigned __int8 *)v408 + 1) * (unint64_t)(v443 >> 1), v387);
          int v408 = v564;
          uint64_t v116 = v566;
          uint64_t v527 = v449;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          unsigned int v443 = v115 - *((_DWORD *)v564 + 2);
        }
      }
      uint64_t v521 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        uint64_t v521 = 0;
        unsigned int v450 = *(unsigned __int8 *)v408;
        if (v442 < v450 && v443 < v450)
        {
          uint64_t v451 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)v408[17] + 12) + 24))(*((void *)v408[17] + 12), *((void *)v408[17] + 13)+ v442+ *((unsigned __int8 *)v408[17] + 1) * (unint64_t)(v443 & 0xFFFFFFFE), v387);
          int v408 = v564;
          uint64_t v116 = v566;
          uint64_t v521 = v451;
        }
      }
      if (v439 != 31)
      {
        uint64_t v452 = 0;
        BOOL v453 = 0;
        double v542 = (uint64_t (**)(void, void, uint64_t, void, uint64_t))(v116
                                                                                 + 1008
                                                                                 + 8 * __clz(__rbit32(v552))
                                                                                 + 144);
        uint64_t v454 = v440;
        do
        {
          uint64_t v455 = 0;
          uint64_t v456 = v519 + v452;
          uint64_t v457 = v530 + v452;
          uint64_t v549 = v527 + v452;
          uint64_t v546 = v521 + v452;
          uint64_t v535 = v452;
          int v458 = v452 + v556;
          do
          {
            unint64_t v459 = v408;
            unint64_t v460 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v116
                                                                                              + 1008
                                                                                              + 8 * (v441 - 2)))(v562, v562, v456 + v455 * *((unsigned __int8 *)v408 + 1), *((unsigned __int8 *)v408 + 1), v457 + v455 * *(unsigned __int8 *)v408[17]);
            uint64_t v461 = v566;
            if (!*(unsigned char *)(v566 + 8))
            {
              unsigned int v462 = (*v542)(v552, v552, v549 + *((unsigned __int8 *)v459 + 1) * (uint64_t)((int)v455 >> 1), *((unsigned __int8 *)v459 + 1), v546 + 2 * *((unsigned __int8 *)v459[17] + 1) * (uint64_t)((int)v455 >> 1));
              uint64_t v461 = v566;
              v460 += ((*(unsigned __int16 *)(v566 + 1002) * (unint64_t)v462) >> 8);
            }
            int v463 = *(char *)(v461
                           + (int)(((v565 + v455 - *(_DWORD *)(v461 + 4432)) & 0xFFFFFFF8)
                                 + ((v458 - *(_DWORD *)(v461 + 4428)) >> 3))
                           + 724)
                 - v560;
            if (v463)
            {
              if (v463 >= 16) {
                int v463 = 16;
              }
              if (v463 <= -15) {
                int v463 = -15;
              }
              unint64_t v460 = (v460 * word_1BBB7B3DC[v463 + 15] + 128) >> 8;
            }
            int v408 = v564;
            v453 += v460;
            v455 += (int)v562;
          }
          while (v455 < v454);
          uint64_t v452 = v535 + (int)v562;
        }
        while (v452 < v454);
        goto LABEL_601;
      }
    }
    else
    {
      if ((int)(v442 | v443) >= 0)
      {
        uint64_t v520 = 0;
        unsigned int v464 = *(unsigned __int8 *)v408;
        if (v442 < v464 && v443 < v464)
        {
          uint64_t v465 = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*(void *)v408[3] + 24))(v408[3], (unint64_t)v408[4] + v442 + *((unsigned __int8 *)v408 + 1) * (unint64_t)v443, v387);
          int v408 = v564;
          uint64_t v116 = v566;
          uint64_t v520 = v465;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          unsigned int v443 = v115 - *((_DWORD *)v564 + 2);
        }
      }
      else
      {
        uint64_t v520 = 0;
      }
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        unsigned int v466 = *(unsigned __int8 *)v408;
        if (v442 < v466 && v443 < v466)
        {
          (*(void (**)(void, unint64_t, uint64_t))(**((void **)v408[17] + 10) + 24))(*((void *)v408[17] + 10), *((void *)v408[17] + 11) + v442 + *(unsigned __int8 *)v408[17] * (unint64_t)v443, v387);
          int v408 = v564;
          uint64_t v116 = v566;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          unsigned int v443 = v115 - *((_DWORD *)v564 + 2);
        }
      }
      uint64_t v528 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        uint64_t v528 = 0;
        unsigned int v467 = *(unsigned __int8 *)v408;
        if (v442 < v467 && v443 < v467)
        {
          uint64_t v468 = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*(void *)v408[5] + 24))(v408[5], (unint64_t)v408[6]+ v442+ *((unsigned __int8 *)v408 + 1) * (unint64_t)(v443 >> 1), v387);
          int v408 = v564;
          uint64_t v116 = v566;
          uint64_t v528 = v468;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          unsigned int v443 = v115 - *((_DWORD *)v564 + 2);
        }
      }
      uint64_t v522 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        uint64_t v522 = 0;
        unsigned int v469 = *(unsigned __int8 *)v408;
        if (v442 < v469 && v443 < v469)
        {
          uint64_t v470 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)v408[17] + 12) + 24))(*((void *)v408[17] + 12), *((void *)v408[17] + 13)+ v442+ *((unsigned __int8 *)v408[17] + 1) * (unint64_t)(v443 & 0xFFFFFFFE), v387);
          int v408 = v564;
          uint64_t v116 = v566;
          uint64_t v522 = v470;
        }
      }
      if (v439 != 31)
      {
        uint64_t v471 = 0;
        BOOL v453 = 0;
        unsigned int v543 = (uint64_t (**)(void, void, uint64_t, void, uint64_t, uint64_t))(v116
                                                                                          + 1008
                                                                                          + 8 * __clz(__rbit32(v552))
                                                                                          + 144);
        uint64_t v472 = v440;
        do
        {
          uint64_t v473 = 0;
          uint64_t v474 = v520 + 2 * v471;
          int v475 = v471 + v556;
          uint64_t v536 = v471;
          uint64_t v547 = v522 + 2 * v471;
          uint64_t v550 = v528 + 2 * v471;
          do
          {
            unsigned int v476 = v408;
            unint64_t v477 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 1008 + 8 * (v441 - 2)))(v562, v562, v474 + 2 * v473 * *((unsigned __int8 *)v408 + 1));
            uint64_t v478 = v566;
            if (!*(unsigned char *)(v566 + 8))
            {
              uint64_t v479 = 2 * *((unsigned __int8 *)v476[17] + 1);
              unsigned int v480 = (*v543)(v552, v552, v550 + 2 * *((unsigned __int8 *)v476 + 1) * (uint64_t)((int)v473 >> 1), *((unsigned __int8 *)v476 + 1), v547 + 2 * (int)v479 * (uint64_t)((int)v473 >> 1), v479);
              uint64_t v478 = v566;
              v477 += ((*(unsigned __int16 *)(v566 + 1002) * (unint64_t)v480) >> 8);
            }
            int v481 = *(char *)(v478
                           + (int)(((v565 + v473 - *(_DWORD *)(v478 + 4432)) & 0xFFFFFFF8)
                                 + ((v475 - *(_DWORD *)(v478 + 4428)) >> 3))
                           + 724)
                 - v560;
            if (v481)
            {
              if (v481 >= 16) {
                int v481 = 16;
              }
              if (v481 <= -15) {
                int v481 = -15;
              }
              unint64_t v477 = (v477 * word_1BBB7B3DC[v481 + 15] + 128) >> 8;
            }
            int v408 = v564;
            v453 += v477;
            v473 += (int)v562;
          }
          while (v473 < v472);
          uint64_t v471 = v536 + (int)v562;
        }
        while (v471 < v472);
        goto LABEL_601;
      }
    }
    BOOL v453 = 0;
LABEL_601:
    unsigned int v143 = (void ***)v537;
    int v408 = (void **)*v537;
    v408[24] = v453;
    uint64_t v115 = v565;
    uint64_t v116 = v566;
    unint64_t v430 = (unint64_t)&v453[(*((_DWORD *)v408 + 52)
                                  * *(unsigned __int16 *)(v566 + 2 * *((__int16 *)v408 + 106) + 992)) >> (8 * (*((_WORD *)v408 + 106) == 0))];
    v408[25] = (void *)v430;
    unsigned int v386 = v556;
    uint64_t v240 = v544;
    int v433 = v539;
    LODWORD(v387) = v554;
    int v242 = v553;
    int v384 = v533;
    unint64_t v413 = v518;
    int v415 = v514;
    int v416 = v515;
    unint64_t v434 = v512;
    unint64_t v431 = v513;
    goto LABEL_602;
  }
LABEL_609:
  if (v432 >= 3)
  {
    unint64_t v483 = v434;
    if (!*(unsigned char *)(v240 + 3784))
    {
      int v484 = v242 + *(unsigned __int8 *)(*(void *)(v116 + 1880) + 2001);
      if (v484 >= 63) {
        int v484 = 63;
      }
      int v485 = dword_1BBB7B4C0[70 * *(unsigned __int8 *)(v116 + 1006) + (v484 & ~(v484 >> 31))];
      *(_WORD *)(v116 + 984) = v485;
      *(_WORD *)(v116 + 992) = v485;
    }
    unint64_t v434 = v483;
  }
LABEL_615:
  if (!v384 || v416 && v430 + v431 < v434)
  {
    if (!*(unsigned char *)(v240 + 3784))
    {
      unint64_t v486 = v413;
      if ((v415 | v524 ^ 1))
      {
        int v487 = v532;
      }
      else
      {
        uint64_t v492 = (unsigned __int8 *)v408;
        int v493 = sub_1BBA9783C(v116, v386, v115, v540, (unsigned __int8 *)v408, *a8, 1);
        sub_1BBA991B0(v566, v386, v115, v540, v492, v493);
        uint64_t v116 = v566;
        int v487 = v532;
        if (v523) {
          int v487 = v493;
        }
      }
      if (*(int *)(v116 + 4) <= 1 && *(unsigned __int8 *)(v486 + 10) >= 2u)
      {
        sub_1BBA9A7B0(v116, v386, v115, v540, (unsigned __int8 *)*v143, 0, 0, 1, 0);
        uint64_t v116 = v566;
      }
      *a8 = v487;
      *a9 = v524;
      int v432 = *(_DWORD *)(v116 + 12);
    }
    if (v432 == 5 && v525 >= 8)
    {
      int v494 = 0;
      int v495 = *((_DWORD *)*v143 + 3);
      uint64_t v496 = v116 + ((int)(v386 - *(_DWORD *)(v116 + 4428)) >> 3) + 724;
      int v497 = v115 - *(_DWORD *)(v116 + 4432);
      do
      {
        int v498 = (unsigned char *)(v496 + (int)(v497 & 0xFFFFFFF8));
        uint64_t v499 = v525 >> 3;
        do
        {
          *v498++ = v495;
          --v499;
        }
        while (v499);
        ++v494;
        v497 += 8;
      }
      while (v494 != v525 >> 3);
    }
    return;
  }
  if (v432 == 3)
  {
    long long v577 = v571;
    int v578 = v572;
  }
  signed int v488 = (unsigned __int8 **)(v116 + 32 * (int)v387);
  sub_1BBA8E1A8(v116, (unsigned __int8 *)v408, v488[557], v386, v115, v433);
  sub_1BBA8E1A8(v116, (unsigned __int8 *)*v143, v488[558], v433 + v386, v115, v433);
  sub_1BBA8E1A8(v116, (unsigned __int8 *)*v143, v488[559], v386, v433 + v115, v433);
  sub_1BBA8E1A8(v116, (unsigned __int8 *)*v143, v488[560], v433 + v386, v433 + v115, v433);
  unsigned int v489 = *v143;
  *(_OWORD *)(v489 + 21) = v575;
  v489[23] = v576;
  int v490 = *v143;
  v490[26] = v578;
  *((_OWORD *)v490 + 12) = v577;
  if (*(_DWORD *)(v116 + 12) == 5)
  {
    int v491 = *v143;
    *((_WORD *)v491 + 95) = HIWORD(v572);
    *((_WORD *)v491 + 107) = v574;
  }
  if (!*(unsigned char *)(v544 + 3784))
  {
LABEL_626:
    *a8 = v568;
    *a9 = v567;
  }
}

uint64_t sub_1BBA95350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, unsigned char *a7)
{
  uint64_t v8 = a4;
  int v11 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) - a4;
  uint64_t v12 = *(void *)(a1 + 1888);
  if (*(unsigned char *)(v12 + 12))
  {
    int v13 = *(_DWORD *)(v12 + 1620);
    BOOL v14 = v11 >= v13;
    BOOL v66 = v11 == v13;
  }
  else
  {
    BOOL v14 = 0;
    BOOL v66 = 0;
  }
  int v15 = *(unsigned __int8 **)(a1 + 4456);
  uint64_t result = sub_1BBA9783C(a1, a2, a3, a4, 0, *a6, 0);
  uint64_t v17 = a3;
  int v18 = result;
  if (((a3 | a2) & 0x80000000) != 0
    || (uint64_t v19 = *(void *)(*(void *)(a1 + 1872) + 1360), *(_DWORD *)(v19 + 276) <= (int)a2)
    || *(_DWORD *)(v19 + 280) <= (int)a3)
  {
    int16x4_t v20 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    int16x4_t v20 = (unsigned __int16 *)(*(void *)(v19 + 512)
                             + 2 * (*(void *)(v19 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    uint64_t v21 = *(void *)(v19 + 576) + 16 * (*(void *)(v19 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  if ((*v20 & 3) <= (int)v8)
  {
    if (v14)
    {
      *a7 = 1;
      __int16 v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 968))(a2, a3, v8, a1);
      sub_1BBA97994(a1, a2, a3, v8, 0, v31, 0);
      uint64_t v17 = a3;
    }
    uint64_t result = sub_1BBA97AF4(a1, a2, v17, v8, 0, 1, 1, 0, 0);
    unsigned int v32 = *v20;
    if ((v32 & 0x80) == 0)
    {
      int v63 = v8;
      unsigned int v67 = 1 << v11;
      if (*(unsigned char *)(*(void *)(a1 + 952) + 227))
      {
        int v60 = v11;
        uint64_t v61 = v20;
        BOOL v62 = v14;
        int v65 = v18;
        uint64_t v33 = 0;
        char v34 = 1;
        do
        {
          char v35 = v34;
          uint64_t v36 = *(void *)(*(void *)(a1 + 1872) + 1360);
          uint64_t v37 = *(void *)(v36 + 8 * v33 + 112);
          uint64_t v38 = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v36 + 16))(v36, ((int)a2 >> v33), ((int)a3 >> v33), v33);
          uint64_t v39 = 0;
          uint64_t v40 = v15[1];
          uint64_t v41 = (a2 - *((_DWORD *)v15 + 1));
          if ((v41 & 0x80000000) != 0)
          {
            uint64_t v43 = v67;
          }
          else
          {
            unsigned int v42 = a3 - *((_DWORD *)v15 + 2);
            uint64_t v43 = v67;
            if ((v42 & 0x80000000) == 0)
            {
              unsigned int v44 = *v15;
              if (v41 >= v44 || v42 >= v44) {
                uint64_t v39 = 0;
              }
              else {
                uint64_t v39 = (*(uint64_t (**)(void, unint64_t))(**(void **)&v15[16 * v33 + 56] + 24))(*(void *)&v15[16 * v33 + 56], v41 + v15[1] * (unint64_t)(v42 >> v33) + *(void *)&v15[16 * v33 + 64]);
              }
            }
          }
          (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v43, ((int)v43 >> v33), v37, v38, v40, v39);
          char v34 = 0;
          uint64_t v33 = 1;
        }
        while ((v35 & 1) != 0);
        int16x4_t v20 = v61;
        unsigned int v32 = *v61;
        int v18 = v65;
        BOOL v14 = v62;
        int v11 = v60;
      }
      sub_1BBAB48E0(a1 + 1920, a1, a2, a3, v63, *(unsigned __int8 *)(v21 + 10), (v32 >> 4) & 7);
      if (*(unsigned char *)(a1 + 8127))
      {
        int v46 = *(unsigned __int8 *)(*(void *)(a1 + 952) + 252);
        if (v46 != 3)
        {
          int v72 = 0;
          long long v71 = xmmword_1BBB6F8F0;
          __int16 v73 = 2;
          if (v46 == 2) {
            sub_1BBABDEDC(a1 + 1920, a2, a3, v15, v11, 0, (uint64_t *)&v71, 1);
          }
          else {
            sub_1BBABE604(a1 + 1920, a2, a3, v15, v11, 0, 0, (uint64_t)&v71, 1);
          }
        }
      }
      uint64_t result = sub_1BBAC4F90(a1 + 1920, a2, a3, 0, v15, 0, 0, 0, 1, 1u, 1u);
      __int16 v47 = *v20;
      if (result)
      {
        *a6 = v47 >> 9;
        goto LABEL_43;
      }
      LODWORD(v8) = v63;
      if (v47 & 0x70) == 0 && (*(unsigned char *)(v21 + 11))
      {
        *int16x4_t v20 = v47 | 0x80;
        *(unsigned char *)(v21 + 11) &= ~1u;
        *(unsigned char *)(v21 + 10) = 2;
        uint64_t v48 = *(void *)(*(void *)(a1 + 1872) + 1360);
        if ((int)v67 >= 8)
        {
          uint64_t v49 = 0;
          uint64_t v50 = 2 * *(void *)(v48 + 488);
          uint64_t v51 = v20;
          do
          {
            uint64_t v52 = v51;
            uint64_t v53 = v67 >> 3;
            do
            {
              *v52++ = *v20;
              --v53;
            }
            while (v53);
            ++v49;
            uint64_t v51 = (_WORD *)((char *)v51 + v50);
          }
          while (v49 != v67 >> 3);
          uint64_t v48 = *(void *)(*(void *)(a1 + 1872) + 1360);
        }
        if ((int)v67 >= 4)
        {
          uint64_t v54 = 0;
          uint64_t v55 = 16 * *(void *)(v48 + 552);
          uint64_t v56 = (void *)v21;
          do
          {
            int v57 = v56;
            uint64_t v58 = v67 >> 2;
            do
            {
              uint64_t v59 = *(void *)v21;
              *(void *)((char *)v57 + 6) = *(void *)(v21 + 6);
              *int v57 = v59;
              v57 += 2;
              --v58;
            }
            while (v58);
            ++v54;
            uint64_t v56 = (void *)((char *)v56 + v55);
          }
          while (v54 != v67 >> 2);
        }
      }
    }
    if (*a7) {
      uint64_t result = sub_1BBA97994(a1, a2, a3, v8, 0, v18, 0);
    }
    if (v14) {
      *a6 = v18;
    }
  }
  else
  {
    int v64 = result;
    char v22 = v11 - 1;
    int v23 = 1 << (v11 - 1);
    if (v66)
    {
      *a7 = 1;
      __int16 v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 968))(a2, a3, v8, a1);
      uint64_t result = sub_1BBA97994(a1, a2, a3, v8, 0, v24, 0);
      LODWORD(v17) = a3;
    }
    unsigned int v25 = 0;
    int v26 = v23 + v17;
    do
    {
      int v27 = *(_DWORD *)(a1 + 16);
      if ((int)(((v25 & 1) << v22) + a2) < v27)
      {
        uint64_t v28 = (v25 >> 1 << v22) + v17;
        int v29 = *(_DWORD *)(a1 + 20);
        if ((int)v28 < v29)
        {
          uint64_t v30 = sub_1BBA8EDCC(a5, v25, v23 + (int)a2 < v27, v26 < v29);
          uint64_t result = sub_1BBA95350(a1, ((v25 & 1) << v22) + (int)a2, v28, (v8 + 1), v30, a6, a7);
          LODWORD(v17) = a3;
        }
      }
      ++v25;
    }
    while (v25 != 4);
    if (v66 && *a7)
    {
      *a6 = v64;
LABEL_43:
      *a7 = 0;
    }
  }
  return result;
}

uint64_t sub_1BBA9595C(uint64_t result, int a2, int a3, unsigned __int8 *a4, int a5, char a6, char a7, char a8, int a9)
{
  *(unsigned char *)(result + 800) = a5;
  *(unsigned char *)(result + 801) = a6;
  *(unsigned char *)(result + 802) = a7;
  *(unsigned char *)(result + 803) = a8;
  *(_DWORD *)(result + 808) = a2;
  *(_DWORD *)(result + 812) = a3;
  if (a5)
  {
    *(void *)(result + 848) = a4;
    uint64_t v9 = (unsigned __int8 *)*((void *)a4 + 17);
    *(void *)(result + 816) = *v9;
    *(void *)(result + 824) = v9[1];
    unint64_t v10 = *a4;
    *(void *)(result + 832) = v10 >> 3;
    int v11 = *((_DWORD *)a4 + 2);
    unsigned int v12 = a2 - *((_DWORD *)a4 + 1);
    *(void *)(result + 840) = v10 >> 2;
    unsigned int v13 = a3 - v11;
    if ((v12 & 0x80000000) != 0 || (v13 & 0x80000000) != 0 || v12 >= v10 || v13 >= v10)
    {
      uint64_t v15 = 0;
      *(void *)(result + 856) = 0;
    }
    else
    {
      uint64_t v14 = *((void *)a4 + 12);
      *(void *)(result + 856) = *((void *)a4 + 11)
                                + 2 * ((v12 >> 3) + (v10 >> 3) * (unint64_t)(v13 >> 3));
      uint64_t v15 = v14 + 16 * ((v12 >> 2) + (v10 >> 2) * (unint64_t)(v13 >> 2));
    }
    *(void *)(result + 864) = v15;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_21;
    }
  }
  else
  {
    *(void *)(result + 848) = 0;
    unint64_t v16 = *(unsigned __int8 *)(*(void *)(result + 1880) + 2013);
    *(void *)(result + 816) = v16;
    *(void *)(result + 824) = v16 >> 1;
    uint64_t v17 = *(void *)(*(void *)(result + 1872) + 1360);
    uint64_t v18 = *(void *)(v17 + 488);
    *(void *)(result + 832) = v18;
    uint64_t v19 = *(void *)(v17 + 552);
    *(void *)(result + 840) = v19;
    if ((a3 | a2) < 0 || *(_DWORD *)(v17 + 276) <= a2 || *(_DWORD *)(v17 + 280) <= a3)
    {
      uint64_t v20 = 0;
      *(void *)(result + 856) = 0;
    }
    else
    {
      *(void *)(result + 856) = *(void *)(v17 + 512) + 2 * (v18 * ((uint64_t)a3 >> 3) + (a2 >> 3));
      uint64_t v20 = *(void *)(v17 + 576) + 16 * (v19 * ((uint64_t)a3 >> 2) + (a2 >> 2));
    }
    *(void *)(result + 864) = v20;
    unsigned int v12 = a2 - *((_DWORD *)a4 + 1);
    unsigned int v13 = a3 - *((_DWORD *)a4 + 2);
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_21;
    }
  }
  if ((v13 & 0x80000000) == 0)
  {
    unsigned int v21 = *a4;
    if (v12 < v21 && v13 < v21)
    {
      char v22 = &a4[8 * a9];
      __int16 v24 = (unsigned __int8 *)*((void *)v22 + 17);
      int v23 = (unsigned __int8 **)(v22 + 136);
      *(void *)(result + 872) = *((void *)v24 + 7) + 2 * (v12 + *v24 * (unint64_t)v13);
      uint64_t v25 = v12 >> 1;
      *(void *)(result + 880) = *((void *)*v23 + 8) + 2 * (v25 + (*v23)[1] * (unint64_t)(v13 >> 1));
      *(void *)(result + 888) = *((void *)*v23 + 9) + 2 * (v25 + (*v23)[1] * (unint64_t)(v13 >> 1));
      uint64_t v26 = v12 >> 2;
      unsigned int v27 = v13 >> 2;
      *(void *)(result + 896) = *((void *)*v23 + 4) + v26 + ((unint64_t)**v23 >> 2) * (v13 >> 2);
      uint64_t v28 = v12 >> 3;
      unsigned int v29 = v13 >> 3;
      *(void *)(result + 904) = *((void *)*v23 + 5) + v28 + ((unint64_t)(*v23)[1] >> 2) * v29;
      *(void *)(result + 912) = *((void *)*v23 + 6) + v28 + ((unint64_t)(*v23)[1] >> 2) * v29;
      if (!*(unsigned char *)(*(void *)(result + 952) + 352)) {
        return result;
      }
      *(void *)(result + 920) = *((void *)*v23 + 1) + v26 + ((unint64_t)**v23 >> 2) * v27;
      *(void *)(result + 928) = *((void *)*v23 + 2) + v28 + ((unint64_t)(*v23)[1] >> 2) * v29;
      unint64_t v30 = *((void *)*v23 + 3) + v28 + ((unint64_t)(*v23)[1] >> 2) * v29;
      goto LABEL_23;
    }
  }
LABEL_21:
  *(_OWORD *)(result + 904) = 0u;
  *(_OWORD *)(result + 888) = 0u;
  *(_OWORD *)(result + 872) = 0u;
  if (!*(unsigned char *)(*(void *)(result + 952) + 352)) {
    return result;
  }
  unint64_t v30 = 0;
  *(void *)(result + 928) = 0;
  *(void *)(result + 920) = 0;
LABEL_23:
  *(void *)(result + 936) = v30;
  return result;
}

void sub_1BBA95C18(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, int *a7, unsigned char *a8)
{
  uint64_t v8 = a7;
  unsigned int v12 = a2;
  uint64_t v14 = 0;
  uint64_t v15 = *(unsigned __int8 **)(a1 + 4456);
  unint64_t v16 = *(unsigned __int8 **)(a1 + 8 * a4 + 4584);
  unsigned int v17 = a2 - *((_DWORD *)v15 + 1);
  if ((v17 & 0x80000000) != 0)
  {
    unint64_t v19 = 0;
  }
  else
  {
    unsigned int v18 = a3 - *((_DWORD *)v15 + 2);
    unint64_t v19 = 0;
    if ((v18 & 0x80000000) == 0)
    {
      unint64_t v20 = *v15;
      if (v17 >= v20 || v18 >= v20)
      {
        uint64_t v14 = 0;
        unint64_t v19 = 0;
      }
      else
      {
        uint64_t v14 = (_WORD *)(*((void *)v15 + 11)
                      + 2 * ((v17 >> 3) + (v20 >> 3) * (unint64_t)(v18 >> 3)));
        unint64_t v19 = *((void *)v15 + 12) + 16 * ((v17 >> 2) + (v20 >> 2) * (unint64_t)(v18 >> 2));
      }
    }
  }
  int v22 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) - a4;
  unsigned int v23 = (unsigned __int16)*v14;
  unsigned int v96 = a2;
  unsigned int v97 = a3;
  if ((v23 & 3) <= (int)a4)
  {
    uint64_t v29 = *(void *)(a1 + 1888);
    if (*(unsigned char *)(v29 + 12) && v22 >= *(_DWORD *)(v29 + 1620))
    {
      int v47 = (*(uint64_t (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(a1 + 968))(a2, a3, a4, a1);
      int v91 = 1;
      *a8 = 1;
      sub_1BBA991B0(a1, v96, v97, a4, v15, v47);
      unsigned int v12 = (unsigned __int8 *)v96;
      a3 = (unsigned __int8 *)v97;
      LODWORD(a6) = v47;
      unsigned int v23 = (unsigned __int16)*v14;
    }
    else
    {
      int v91 = 0;
    }
    uint64_t v48 = a3;
    int v87 = a6;
    uint64_t v49 = v12;
    sub_1BBA8E0A0(a1, v16, (int)v12, (int)a3, a4, (v23 >> 2) & 3, a6);
    if (*(unsigned char *)(v19 + 10) == 1)
    {
      *(unsigned char *)(a1 + 4699) = 0;
      uint64_t v50 = *(unsigned __int8 **)(a1 + 848);
      unsigned int v51 = (unsigned __int16)*v14;
      uint64_t v52 = *(void *)(a1 + 4296);
      int v53 = *(unsigned __int8 *)(*(void *)(a1 + 4304) + 2009) - a4;
      *(void *)(a1 + 3992) = v52;
      *(_DWORD *)(a1 + 3968) = v53;
      *(_DWORD *)(a1 + 3972) = 1;
      int v55 = (v51 >> 4) & 7;
      BOOL v54 = v55 == 0;
      *(_DWORD *)(a1 + 3976) = v55;
      int v56 = *(unsigned __int8 *)(*(void *)(v52 + 1368) + 245);
      if (!v54) {
        ++v56;
      }
      *(_DWORD *)(a1 + 3980) = v56;
      *(_OWORD *)(a1 + 4056) = 0u;
      *(_OWORD *)(a1 + 4072) = 0u;
      *(_OWORD *)(a1 + 4088) = 0u;
      *(_OWORD *)(a1 + 4104) = 0u;
      *(_OWORD *)(a1 + 4120) = 0u;
      *(void *)(a1 + 4136) = 0;
      *(void *)(a1 + 4320) = a1;
      *(_DWORD *)(a1 + 4344) = v49;
      *(_DWORD *)(a1 + 4348) = v48;
      *(_DWORD *)(a1 + 4352) = a4;
      *(void *)(a1 + 4328) = a1 + 984;
      *(unsigned char *)(a1 + 4336) = *(unsigned char *)(a1 + 8);
      sub_1BBA9930C(a1, v49, v48, a4, v16, v15, a5, ((unsigned __int16)*v14 >> 4) & 7);
      sub_1BBA9595C(a1, *(_DWORD *)(a1 + 4428), *(_DWORD *)(a1 + 4432), v50, 1, 0, 0, 0, 0);
    }
    else
    {
      sub_1BBA97AF4(a1, (uint64_t)v49, (uint64_t)v48, a4, v15, 0, 1, 0, 0);
      unsigned int v57 = (unsigned __int16)*v14;
      if ((v57 & 0x80) == 0)
      {
        uint64_t v58 = (1 << v22);
        int v94 = 1 << v22;
        if (*(unsigned char *)(*(void *)(a1 + 952) + 227))
        {
          int v89 = a4;
          a4 = 0;
          uint64_t v59 = ((int)v58 >> 1);
          uint64_t v60 = *((void *)v15 + 17);
          uint64_t v61 = 2 * *(unsigned __int8 *)(v60 + 1);
          uint64_t v62 = v96 - *((_DWORD *)v15 + 1);
          unsigned int v63 = v97 - *((_DWORD *)v15 + 2);
          if ((v62 & 0x80000000) == 0 && (v63 & 0x80000000) == 0)
          {
            a4 = 0;
            unsigned int v64 = *v15;
            if (v62 < v64 && v63 < v64)
            {
              uint64_t v65 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v60 + 96) + 24))(*(void *)(v60 + 96), v62 + v61 * (unint64_t)(v63 >> 1) + *(void *)(v60 + 104));
              uint64_t v59 = ((int)v58 >> 1);
              a4 = v65;
              LODWORD(v62) = v96 - *((_DWORD *)v15 + 1);
              unsigned int v63 = v97 - *((_DWORD *)v15 + 2);
            }
          }
          uint64_t v66 = 0;
          uint64_t v67 = v15[1];
          if ((v62 & 0x80000000) == 0 && (v63 & 0x80000000) == 0)
          {
            uint64_t v66 = 0;
            unsigned int v68 = *v15;
            if (v62 < v68 && v63 < v68)
            {
              uint64_t v85 = v61;
              uint64_t v69 = v59;
              uint64_t v70 = (*(uint64_t (**)(void, unint64_t))(**((void **)v15 + 9) + 24))(*((void *)v15 + 9), v62 + v15[1] * (unint64_t)(v63 >> 1) + *((void *)v15 + 10));
              uint64_t v59 = v69;
              uint64_t v61 = v85;
              uint64_t v66 = v70;
            }
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v58, v59, v61, a4, v67, v66);
          unsigned int v57 = (unsigned __int16)*v14;
          LODWORD(a4) = v89;
        }
        sub_1BBAB48E0(a1 + 1920, a1, v96, v97, a4, *(unsigned __int8 *)(v19 + 10), (v57 >> 4) & 7);
        char v71 = sub_1BBAC7488(a1 + 1920, v96, v97, 0);
        char v72 = sub_1BBAC1B9C(a1 + 1920, v96, v97, 0, v15, 0);
        if (v71 & 1) == 0 && (v72 & 1) == 0 && (*v14 & 0x70) == 0 && (*(unsigned char *)(v19 + 11))
        {
          *v14 |= 0x80u;
          *(unsigned char *)(v19 + 11) &= ~1u;
          *(unsigned char *)(v19 + 10) = 2;
          unsigned int v73 = *v15;
          if (v94 >= 8)
          {
            uint64_t v74 = 0;
            int v75 = v14;
            do
            {
              unint64_t v76 = v75;
              uint64_t v77 = v94 >> 3;
              do
              {
                *v76++ = *v14;
                --v77;
              }
              while (v77);
              ++v74;
              v75 += v73 >> 3;
            }
            while (v74 != v94 >> 3);
            unsigned int v73 = *v15;
          }
          if (v94 >= 4)
          {
            uint64_t v78 = 0;
            unsigned int v79 = (void *)v19;
            do
            {
              unsigned int v80 = v79;
              uint64_t v81 = v94 >> 2;
              do
              {
                uint64_t v82 = *(void *)v19;
                *(void *)((char *)v80 + 6) = *(void *)(v19 + 6);
                *unsigned int v80 = v82;
                v80 += 2;
                --v81;
              }
              while (v81);
              ++v78;
              v79 += 2 * (v73 >> 2);
            }
            while (v78 != v94 >> 2);
          }
        }
      }
    }
    if (*(unsigned char *)(*(void *)(a1 + 1888) + 12) && *a8)
    {
      int v83 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2013) >> a4;
      if ((sub_1BBA99AE8(v96, v97, v83, v15, 0) & 1) != 0
        || (sub_1BBA99AE8(v96, v97, v83, v15, 1u) & 1) != 0
        || sub_1BBA99AE8(v96, v97, v83, v15, 2u))
      {
        __int16 v84 = v87;
        *uint64_t v8 = v87;
        *a8 = 0;
      }
      else
      {
        __int16 v84 = sub_1BBA99254(a1, v96, v97, a4, v15, *v8);
      }
      sub_1BBA991B0(a1, v96, v97, a4, v16, v84);
      sub_1BBA991B0(a1, v96, v97, a4, v15, v84);
    }
    if (v91 && *a8)
    {
      int v46 = sub_1BBA99254(a1, v96, v97, a4, v15, *v8);
      sub_1BBA991B0(a1, v96, v97, a4, v16, v46);
      sub_1BBA991B0(a1, v96, v97, a4, v15, v46);
      goto LABEL_69;
    }
  }
  else
  {
    int v90 = *(unsigned __int8 **)(a1 + 4456);
    int v92 = *(unsigned __int8 **)(a1 + 8 * a4 + 4584);
    char v24 = v22 - 1;
    int v25 = 1 << (v22 - 1);
    uint64_t v26 = *(void *)(a1 + 1888);
    if (*(unsigned char *)(v26 + 12) && v22 == *(_DWORD *)(v26 + 1620))
    {
      unsigned int v27 = a7;
      uint64_t v28 = (*(uint64_t (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(a1 + 968))(a2, a3, a4, a1);
      char v86 = 1;
      *a8 = 1;
      sub_1BBA991B0(a1, v96, v97, a4, v90, v28);
      LODWORD(v12) = v96;
      LODWORD(a3) = v97;
      a6 = v28;
      unsigned int v23 = (unsigned __int16)*v14;
    }
    else
    {
      unsigned int v27 = a7;
      char v86 = 0;
    }
    uint64_t v30 = a6;
    sub_1BBA8E0A0(a1, v92, (int)v12, (int)a3, a4, (v23 >> 2) & 3, a6);
    int v31 = v96;
    int v32 = v97;
    unsigned int v33 = 0;
    int v34 = v25 + v96;
    int v35 = a4;
    int v36 = v25 + v97;
    int v88 = v35;
    uint64_t v37 = (v35 + 1);
    do
    {
      uint64_t v38 = ((v33 & 1) << v24) + v31;
      int v39 = *(_DWORD *)(a1 + 16);
      if ((int)v38 < v39)
      {
        uint64_t v40 = (v33 >> 1 << v24) + v32;
        int v41 = *(_DWORD *)(a1 + 20);
        if ((int)v40 < v41)
        {
          uint64_t v42 = sub_1BBA8EDCC(a5, v33, v34 < v39, v36 < v41);
          sub_1BBA95C18(a1, v38, v40, v37, v42, v30, v27, a8);
          int v31 = v96;
          int v32 = v97;
        }
      }
      ++v33;
    }
    while (v33 != 4);
    if ((v86 & 1) != 0 && *a8)
    {
      uint64_t v8 = v27;
      int v43 = *v27;
      int v44 = v32;
      int v45 = v31;
      int v46 = sub_1BBA99254(a1, v31, v32, v88, *(unsigned __int8 **)(a1 + 848), v43);
      sub_1BBA97994(a1, v45, v44, v88, v92, v46, 1);
      sub_1BBA97994(a1, v45, v44, v88, v90, v46, 1);
LABEL_69:
      *uint64_t v8 = v46;
      *a8 = 0;
    }
  }
}

void *sub_1BBA96480(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5, uint64_t a6, int *a7, unsigned char *a8)
{
  uint64_t v15 = (uint64_t)result;
  int v16 = *(unsigned __int8 *)(result[235] + 2009) - a4;
  if (v16 < 5)
  {
    sub_1BBA96F50(result, a2, a3, a4);
    uint64_t v26 = *a5;
    return (void *)sub_1BBA973D0(v15, a2, a3, a4, a6, v26, a7, a8);
  }
  else
  {
    unsigned int v28 = a6;
    unsigned int v17 = 0;
    char v18 = v16 - 1;
    int v19 = 1 << (v16 - 1);
    int v20 = v19 + a2;
    int v21 = v19 + a3;
    uint64_t v22 = (a4 + 1);
    do
    {
      int v23 = *(_DWORD *)(v15 + 16);
      if ((int)(((v17 & 1) << v18) + a2) < v23)
      {
        int v24 = *(_DWORD *)(v15 + 20);
        if ((int)((v17 >> 1 << v18) + a3) < v24)
        {
          uint64_t v25 = sub_1BBA8EDCC(v28, v17, v20 < v23, v21 < v24);
          uint64_t result = (void *)sub_1BBA96480(v15, ((v17 & 1) << v18) + (int)a2, (v17 >> 1 << v18) + a3, v22, a5, v25, a7, a8);
        }
      }
      ++v17;
    }
    while (v17 != 4);
  }
  return result;
}

int8x8_t sub_1BBA965FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int8x8_t result)
{
  while (1)
  {
    int v9 = a2 - *(_DWORD *)(a1 + 808);
    int v10 = a3 - *(_DWORD *)(a1 + 812);
    uint64_t v11 = *(void *)(a1 + 856);
    uint64_t v12 = *(void *)(a1 + 832) * ((uint64_t)v10 >> 3) + (v9 >> 3);
    unsigned int v13 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2013) >> a4;
    uint64_t v14 = a2 + (v13 >> 1);
    uint64_t v15 = a3 + (v13 >> 1);
    unsigned int v16 = *(unsigned __int16 *)(v11 + 2 * v12);
    if (a4 >= (v16 & 3)) {
      break;
    }
    sub_1BBA965FC(a1, a2, a3, (a4 + 1));
    int v17 = *(_DWORD *)(a1 + 16);
    if ((int)v14 < v17 && *(_DWORD *)(a1 + 20) > (int)a3)
    {
      sub_1BBA965FC(a1, v14, a3, (a4 + 1));
      int v17 = *(_DWORD *)(a1 + 16);
    }
    if (v17 > (int)a2 && (int)v15 < *(_DWORD *)(a1 + 20))
    {
      sub_1BBA965FC(a1, a2, v15, (a4 + 1));
      int v17 = *(_DWORD *)(a1 + 16);
    }
    if ((int)v14 < v17)
    {
      ++a4;
      a2 = a2 + (v13 >> 1);
      a3 = a3 + (v13 >> 1);
      if ((int)v15 < *(_DWORD *)(a1 + 20)) {
        continue;
      }
    }
    return result;
  }
  if (((a3 | a2) & 0x80000000) != 0)
  {
    uint64_t v18 = 0;
    if ((v16 & 0x80) == 0) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v25 = *(void *)(a1 + 1872);
    if (!*(unsigned char *)(v25 + 547))
    {
      uint64_t v26 = (uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 79168);
      unsigned int v27 = *(void **)(v25 + 1360);
      uint64_t v28 = v27[69];
      if (a3 && (a3 & 7) == 0 && v13 >= 4)
      {
        uint64_t v29 = (unsigned __int8 *)(v27[78] + v27[76] * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 2));
        uint64_t v30 = v13 >> 2;
        uint64_t v31 = v18 - 16 * v28;
        do
        {
          int v32 = *v26;
          uint64_t v33 = *(void *)(v25 + 79176);
          int v34 = (void *)(v25 + (v33 >> 1));
          if (v33) {
            int v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v34 + v32);
          }
          unsigned int v35 = v32(v34, v18, v31);
          unsigned int v36 = *v29;
          if (v36 <= v35) {
            LOBYTE(v36) = v35;
          }
          *v29++ = v36;
          v31 += 16;
          --v30;
        }
        while (v30);
      }
      if (a2 && (a2 & 7) == 0 && v13 >= 4)
      {
        uint64_t v37 = (unsigned __int8 *)(*(void *)(*(void *)(v25 + 1360) + 640)
                                + *(void *)(*(void *)(v25 + 1360) + 616) * ((uint64_t)(int)a2 >> 3)
                                + ((int)a3 >> 2));
        uint64_t v38 = v13 >> 2;
        uint64_t v39 = v18 - 16;
        do
        {
          uint64_t v40 = *v26;
          uint64_t v41 = *(void *)(v25 + 79176);
          uint64_t v42 = (void *)(v25 + (v41 >> 1));
          if (v41) {
            uint64_t v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v42 + v40);
          }
          unsigned int v43 = v40(v42, v18, v39);
          unsigned int v44 = *v37;
          if (v44 <= v43) {
            LOBYTE(v44) = v43;
          }
          *v37++ = v44;
          v39 += 16 * v28;
          --v38;
        }
        while (v38);
      }
    }
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 864) + 16 * (*(void *)(a1 + 840) * ((uint64_t)v10 >> 2) + (v9 >> 2));
  if ((v16 & 0x80) != 0) {
    goto LABEL_18;
  }
LABEL_13:
  if (*(unsigned char *)(v18 + 10) != 1)
  {
    uint64_t v19 = *(void *)(a1 + 1872);
    if (!*(unsigned char *)(v19 + 547))
    {
      int v20 = v13 >> 1;
      switch((v16 >> 4) & 7)
      {
        case 0u:
          uint64_t v21 = v18;
          int v22 = a2;
          int v23 = a3;
          int v24 = v13;
          goto LABEL_40;
        case 1u:
          sub_1BBA96AE0(v19, v18, a2, a3, v13, v13 >> 1);
          uint64_t v49 = *(void *)(a1 + 1872);
          uint64_t v21 = sub_1BBA96C48(a1 + 800, a2, a3 + (v13 >> 1));
          uint64_t v19 = v49;
          int v22 = a2;
          int v23 = a3 + (v13 >> 1);
          int v24 = v13;
          goto LABEL_42;
        case 2u:
          sub_1BBA96AE0(v19, v18, a2, a3, v13 >> 1, v13);
          uint64_t v50 = *(void *)(a1 + 1872);
          uint64_t v21 = sub_1BBA96C48(a1 + 800, a2 + (v13 >> 1), a3);
          uint64_t v19 = v50;
          int v22 = a2 + (v13 >> 1);
          int v23 = a3;
          int v24 = v13 >> 1;
LABEL_40:
          int v45 = v13;
          goto LABEL_43;
        case 3u:
          sub_1BBA96AE0(v19, v18, a2, a3, v13 >> 1, v13 >> 1);
          uint64_t v51 = *(void *)(a1 + 1872);
          uint64_t v46 = sub_1BBA96C48(a1 + 800, v14, a3);
          sub_1BBA96AE0(v51, v46, v14, a3, v20, v20);
          uint64_t v52 = *(void *)(a1 + 1872);
          uint64_t v47 = sub_1BBA96C48(a1 + 800, a2, v15);
          sub_1BBA96AE0(v52, v47, a2, v15, v20, v20);
          uint64_t v53 = *(void *)(a1 + 1872);
          uint64_t v21 = sub_1BBA96C48(a1 + 800, v14, v15);
          uint64_t v19 = v53;
          int v22 = a2 + (v13 >> 1);
          int v23 = a3 + (v13 >> 1);
          int v24 = v13 >> 1;
LABEL_42:
          int v45 = v13 >> 1;
LABEL_43:
          sub_1BBA96AE0(v19, v21, v22, v23, v24, v45);
          break;
        default:
          break;
      }
    }
  }
  if (!*(unsigned char *)(*(void *)(a1 + 1880) + 250) && !*(unsigned char *)(*(void *)(a1 + 1872) + 547))
  {
    if (*(unsigned char *)(v18 + 10) == 1)
    {
      BOOL v54 = 1;
      return sub_1BBA96C94(a1, a2, a3, 0, &v54, 1, result);
    }
    if (*(unsigned char *)(v18 + 11))
    {
      int v48 = *(_WORD *)(v11 + 2 * v12) & 0x70;
      BOOL v54 = (*(_WORD *)(v11 + 2 * v12) & 0x70) == 0;
      if (!v48) {
        return sub_1BBA96C94(a1, a2, a3, 0, &v54, 1, result);
      }
    }
    else
    {
      BOOL v54 = 0;
    }
    uint64_t result = sub_1BBA96C94(a1, a2, a3, 0, &v54, 0, result);
    if (!v54) {
      return result;
    }
    return sub_1BBA96C94(a1, a2, a3, 0, &v54, 1, result);
  }
  return result;
}

uint64_t sub_1BBA96AE0(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v10 = result;
  uint64_t v11 = result + 79168;
  uint64_t v12 = *(void **)(result + 1360);
  uint64_t v13 = v12[69];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    uint64_t v14 = (unsigned __int8 *)(v12[78] + v12[76] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    uint64_t v15 = a5 >> 2;
    uint64_t v16 = a2 - 16 * v13;
    do
    {
      int v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))v11;
      uint64_t v18 = *(void *)(v11 + 8);
      uint64_t v19 = (void *)(v10 + (v18 >> 1));
      if (v18) {
        int v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v19 + v17);
      }
      uint64_t result = v17(v19, a2, v16);
      unsigned int v20 = *v14;
      if (v20 <= result) {
        LOBYTE(v20) = result;
      }
      *v14++ = v20;
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    uint64_t v21 = (unsigned __int8 *)(*(void *)(*(void *)(v10 + 1360) + 640)
                            + *(void *)(*(void *)(v10 + 1360) + 616) * ((uint64_t)a3 >> 3)
                            + (a4 >> 2));
    uint64_t v22 = a6 >> 2;
    uint64_t v23 = a2 - 16;
    do
    {
      int v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))v11;
      uint64_t v25 = *(void *)(v11 + 8);
      uint64_t v26 = (void *)(v10 + (v25 >> 1));
      if (v25) {
        int v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v26 + v24);
      }
      uint64_t result = v24(v26, a2, v23);
      unsigned int v27 = *v21;
      if (v27 <= result) {
        LOBYTE(v27) = result;
      }
      *v21++ = v27;
      v23 += 16 * v13;
      --v22;
    }
    while (v22);
  }
  return result;
}

uint64_t sub_1BBA96C48(uint64_t a1, int a2, int a3)
{
  if (((a3 | a2) & 0x80000000) == 0
    && ((int v3 = a2 - *(_DWORD *)(a1 + 8), v4 = a3 - *(_DWORD *)(a1 + 12), v5 = *(unsigned __int8 *)(a1 + 4), v3 < v5)
      ? (BOOL v6 = v4 < v5)
      : (BOOL v6 = 0),
        v6))
  {
    return *(void *)(a1 + 64) + 16 * (*(void *)(a1 + 40) * ((uint64_t)v4 >> 2) + (v3 >> 2));
  }
  else
  {
    return 0;
  }
}

int8x8_t sub_1BBA96C94(uint64_t a1, uint64_t a2, uint64_t a3, int a4, BOOL *a5, uint64_t a6, int8x8_t result)
{
  LODWORD(v9) = a4;
  int v13 = -a4;
  if ((a6 & 1) == 0)
  {
LABEL_2:
    if (!*a5) {
      goto LABEL_3;
    }
    return result;
  }
LABEL_3:
  while (1)
  {
    int v14 = a2 - *(_DWORD *)(a1 + 808);
    int v15 = a3 - *(_DWORD *)(a1 + 812);
    uint64_t v16 = (uint64_t)v15 >> 3;
    unsigned int v17 = *(unsigned __int16 *)(*(void *)(a1 + 856) + 2 * (*(void *)(a1 + 832) * v16 + (v14 >> 3)));
    char v18 = *(unsigned char *)(*(void *)(a1 + 1880) + 2009) - (v17 & 3);
    if ((int)v9 >= (int)((v17 >> 2) & 3)) {
      break;
    }
    LOBYTE(v13) = v13 - 1;
    int v19 = 1 << (v13 + v18);
    uint64_t v20 = (v19 + a2);
    uint64_t v21 = (v19 + a3);
    uint64_t v9 = (v9 + 1);
    sub_1BBA96C94(a1, a2, a3, v9, a5, a6);
    sub_1BBA96C94(a1, v20, a3, v9, a5, a6);
    sub_1BBA96C94(a1, a2, v21, v9, a5, a6);
    a2 = v20;
    a3 = v21;
    if ((a6 & 1) == 0) {
      goto LABEL_2;
    }
  }
  uint64_t v22 = (uint64_t)v15 >> 2;
  int v23 = *(unsigned __int8 *)(*(void *)(a1 + 896) + (*(uint64_t *)(a1 + 816) >> 2) * v22 + (v14 >> 2));
  BOOL v25 = *a5 | v23
     || (uint64_t v24 = ((uint64_t)v14 >> 3) + (*(uint64_t *)(a1 + 824) >> 2) * v16, *(unsigned char *)(*(void *)(a1 + 904) + v24))
     || *(unsigned char *)(*(void *)(a1 + 912) + v24) != 0;
  *a5 = v25;
  if (a6)
  {
    char v26 = v13 + v18;
    if (*(unsigned char *)(*(void *)(a1 + 864) + 16 * (((uint64_t)v14 >> 2) + *(void *)(a1 + 840) * v22) + 10) == 1)
    {
      unsigned int v27 = *(void **)(*(void *)(a1 + 1872) + 1360);
      int v28 = 1 << v26;
      int8x8_t v29 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(void *)&vdup_n_s32((2 << v26) - 64));
      uint64_t v30 = v27[77];
      uint64_t v31 = (uint64_t)(int)a3 >> 2;
      uint64_t v32 = v27[80];
      uint64_t v33 = v27[76];
      uint64_t v34 = (uint64_t)(int)a2 >> 2;
      uint64_t v35 = v27[78];
      if (v28 > 4)
      {
LABEL_12:
        uint64_t v36 = v34 + v33 * ((uint64_t)(int)a3 >> 3);
        int8x8_t v37 = vmax_s8(*(int8x8_t *)(v35 + v36), v29);
        *(int8x8_t *)(v32 + v31 + v30 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v32+ v31+ v30 * ((uint64_t)(int)a2 >> 3)), v29);
        *(int8x8_t *)(v35 + v36) = v37;
      }
    }
    else
    {
      if (!v23) {
        return result;
      }
      uint64_t v41 = *(void **)(*(void *)(a1 + 1872) + 1360);
      int v28 = 1 << v26;
      int8x8_t v29 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(void *)&vdup_n_s32((2 << v26) - 64));
      uint64_t v30 = v41[77];
      uint64_t v31 = (uint64_t)(int)a3 >> 2;
      uint64_t v32 = v41[80];
      uint64_t v33 = v41[76];
      uint64_t v34 = (uint64_t)(int)a2 >> 2;
      uint64_t v35 = v41[78];
      if (v28 >= 5) {
        goto LABEL_12;
      }
    }
    uint64_t v38 = v34 + v33 * ((uint64_t)(v28 + (int)a3) >> 3);
    uint64_t v39 = v31 + v30 * ((uint64_t)(v28 + (int)a2) >> 3);
    int8x8_t v40 = vmax_s8(*(int8x8_t *)(v32 + v39), v29);
    uint64_t result = vmax_s8(*(int8x8_t *)(v35 + v38), v29);
    *(int8x8_t *)(v32 + v39) = v40;
    *(int8x8_t *)(v35 + v38) = result;
  }
  return result;
}

void sub_1BBA96F50(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)a1;
  uint64_t v8 = a1[235];
  int v9 = *(unsigned __int8 *)(v8 + 2009) - a4;
  int v10 = v9 - 1;
  uint64_t v11 = (void *)a1[1017];
  uint64_t v12 = *v11 * ((uint64_t)(int)a3 >> 4) + ((int)a2 >> 4);
  unsigned int v13 = *(unsigned __int8 *)(v11[1] + v12);
  BOOL v14 = v13 > 0x1E || ((1 << v13) & 0x60000001) == 0;
  if (!v14 && v9 > *(unsigned __int8 *)(v8 + 2008))
  {
    for (unsigned int i = 0; i != 4; ++i)
      sub_1BBA96F50(v7, ((i & 1) << v10) + (int)v6, (i >> 1 << v10) + v5, (a4 + 1));
    return;
  }
  uint64_t v16 = *v11 * 2 * ((int)a3 >> 3) + ((int)a2 >> 3);
  uint64_t v17 = v11[40];
  uint64_t v18 = (1 << v9);
  uint64_t v19 = (1 << v10);
  if (((a3 | a2) & 0x80000000) != 0
    || (uint64_t v20 = *(void *)(a1[234] + 1360), *(_DWORD *)(v20 + 276) <= (int)a2)
    || *(_DWORD *)(v20 + 280) <= (int)a3)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = (_WORD *)(*(void *)(v20 + 512) + 2 * (((uint64_t)(int)a2 >> 3) + *(void *)(v20 + 488) * ((int)a3 >> 3)));
  }
  uint64_t v22 = *(unsigned __int8 *)(v17 + v16);
  __int16 v23 = *v21 & 0xFE7C | a4 & 3;
  *uint64_t v21 = v23;
  if (v13 <= 0x19)
  {
    if (v13)
    {
      __int16 v24 = v23 & 0xFE0F;
    }
    else
    {
      if (*(unsigned char *)(*(void *)(a1[1017] + 24) + v12)) {
        __int16 v33 = 0;
      }
      else {
        __int16 v33 = 48;
      }
      __int16 v24 = v23 & 0xFE0F | v33;
    }
    *uint64_t v21 = v24;
    if ((v24 & 0x70) != 0)
    {
      for (unsigned int j = 0; j != 4; ++j)
        sub_1BBA98928(v7, ((j & 1) << v10) + (int)v6, (j >> 1 << v10) + v5, v10, v19, v19, j, 1);
    }
    else
    {
      sub_1BBA98928((uint64_t)a1, a2, a3, v9, v18, v18, 0, 1);
    }
    *uint64_t v21 = *v21 & 0xFFF3 | (4 * ((*v21 & 0x70) != 0));
    if ((int)v18 >= 8)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 2 * *(void *)(*(void *)(*(void *)(v7 + 1872) + 1360) + 488);
      int8x8_t v37 = v21;
      do
      {
        uint64_t v38 = v37;
        uint64_t v39 = v18 >> 3;
        do
        {
          *v38++ = *v21;
          --v39;
        }
        while (v39);
        ++v35;
        int8x8_t v37 = (_WORD *)((char *)v37 + v36);
      }
      while (v35 != v18 >> 3);
    }
    return;
  }
  BOOL v25 = (_DWORD *)((char *)&unk_1BBB7A440 + 4 * v22);
  char v26 = (char *)&unk_1BBB7A428 + 4 * v13 - 104;
  if (v9 == 4) {
    BOOL v25 = v26;
  }
  char v27 = *v25;
  *uint64_t v21 = (16 * (v27 & 7)) | v23 & 0xFE0F;
  int v28 = v27 & 7;
  switch(v28)
  {
    case 2:
      sub_1BBA98928((uint64_t)a1, a2, a3, v9, v19, v18, 0, 3);
      a2 = (v19 + v6);
      a1 = (void *)v7;
      a3 = v5;
      int v29 = v9;
      uint64_t v30 = (1 << v10);
      int v31 = 1 << v9;
      int v32 = 1;
      goto LABEL_40;
    case 1:
      sub_1BBA98928((uint64_t)a1, a2, a3, v9, v18, v19, 0, 3);
      a3 = (v19 + v5);
      a1 = (void *)v7;
      a2 = v6;
      int v29 = v9;
      uint64_t v30 = (1 << v9);
      int v31 = 1 << v10;
      int v32 = 2;
      goto LABEL_40;
    case 0:
      int v29 = v9;
      uint64_t v30 = (1 << v9);
      int v31 = 1 << v9;
      int v32 = 0;
LABEL_40:
      sub_1BBA98928((uint64_t)a1, a2, a3, v29, v30, v31, v32, 3);
      break;
  }
  if ((int)v18 >= 8)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 2 * *(void *)(*(void *)(*(void *)(v7 + 1872) + 1360) + 488);
    uint64_t v42 = v21;
    do
    {
      unsigned int v43 = v42;
      uint64_t v44 = v18 >> 3;
      do
      {
        *v43++ = *v21;
        --v44;
      }
      while (v44);
      ++v40;
      uint64_t v42 = (_WORD *)((char *)v42 + v41);
    }
    while (v40 != v18 >> 3);
  }
  int v45 = ((unsigned __int16)*v21 >> 4) & 7;
  uint64_t v46 = *(void *)(v7 + 4296);
  int v47 = *(unsigned __int8 *)(*(void *)(v7 + 4304) + 2009) - a4;
  *(void *)(v7 + 3992) = v46;
  *(_DWORD *)(v7 + 3968) = v47;
  *(_DWORD *)(v7 + 3972) = 3;
  *(_DWORD *)(v7 + 3976) = v45;
  uint64_t v48 = *(void *)(v46 + 1368);
  unsigned int v49 = (v47 - *(unsigned __int8 *)(v48 + 2010)) & ~((v47 - *(unsigned __int8 *)(v48 + 2010)) >> 31);
  unsigned int v50 = *(unsigned __int8 *)(v48 + 244);
  if (v49 < v50) {
    unsigned int v50 = v49;
  }
  *(_DWORD *)(v7 + 3980) = v50;
  *(void *)(v7 + 4136) = 0;
  *(_OWORD *)(v7 + 4104) = 0u;
  *(_OWORD *)(v7 + 4120) = 0u;
  *(_OWORD *)(v7 + 4072) = 0u;
  *(_OWORD *)(v7 + 4088) = 0u;
  *(_OWORD *)(v7 + 4056) = 0u;
  *(void *)(v7 + 4320) = v7;
  *(_DWORD *)(v7 + 4344) = v6;
  *(_DWORD *)(v7 + 4348) = v5;
  *(_DWORD *)(v7 + 4352) = a4;
  *(void *)(v7 + 4328) = v7 + 984;
  *(unsigned char *)(v7 + 4336) = *(unsigned char *)(v7 + 8);

  sub_1BBABDCB4(v7 + 1920, v6, v5, 0, v9, 0);
}

uint64_t sub_1BBA973D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, int *a7, unsigned char *a8)
{
  if (((a3 | a2) & 0x80000000) != 0
    || (uint64_t v13 = *(void *)(*(void *)(a1 + 1872) + 1360), *(_DWORD *)(v13 + 276) <= (int)a2)
    || *(_DWORD *)(v13 + 280) <= (int)a3)
  {
    uint64_t v14 = a5;
    int v15 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v14 = a5;
    int v15 = (_WORD *)(*(void *)(v13 + 512) + 2 * (*(void *)(v13 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    uint64_t v16 = *(void *)(v13 + 576) + 16 * (*(void *)(v13 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  int v17 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) - a4;
  uint64_t v18 = *(void *)(a1 + 1888);
  if (*(unsigned char *)(v18 + 12))
  {
    int v19 = *(_DWORD *)(v18 + 1620);
    char v20 = *(unsigned char *)(*(void *)(a1 + 1880) + 2009) - a4;
    BOOL v21 = v17 >= v19;
    BOOL v48 = v17 == v19;
  }
  else
  {
    char v20 = *(unsigned char *)(*(void *)(a1 + 1880) + 2009) - a4;
    BOOL v21 = 0;
    BOOL v48 = 0;
  }
  int v22 = sub_1BBA9783C(a1, a2, a3, a4, 0, *a7, 0);
  __int16 v23 = a7;
  int v24 = v22;
  if ((*v15 & 3) <= (int)a4)
  {
    unsigned int v50 = v23;
    if (v21)
    {
      *a8 = 1;
      __int16 v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 968))(a2, a3, a4, a1);
      sub_1BBA97994(a1, a2, a3, a4, 0, v32, 0);
    }
    unsigned int v33 = *(unsigned __int8 *)(v16 + 10);
    if (v33 >= 2)
    {
      sub_1BBA97AF4(a1, a2, a3, a4, 0, 1, 1, 0, 0);
      unsigned int v33 = *(unsigned __int8 *)(v16 + 10);
    }
    sub_1BBAB48E0(a1 + 1920, a1, a2, a3, a4, v33, ((unsigned __int16)*v15 >> 4) & 7);
    uint64_t result = sub_1BBAC3E50(a1 + 1920, a2, a3, 0, 0, v14, v14, a6);
    if (*(unsigned __int8 *)(v16 + 10) >= 2u
      && (result & 1) == 0
      && (*v15 & 0x70) == 0
      && (*(unsigned char *)(v16 + 11) & 1) != 0)
    {
      *(unsigned char *)(v16 + 10) = 2;
      *v15 |= 0x80u;
      unsigned int v34 = 1 << v20;
      if (1 << v20 >= 4)
      {
        uint64_t v35 = 0;
        uint64_t v36 = 16 * *(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 552);
        int8x8_t v37 = (void *)v16;
        do
        {
          uint64_t v38 = v37;
          uint64_t v39 = v34 >> 2;
          do
          {
            uint64_t v40 = *(void *)v16;
            *(void *)((char *)v38 + 6) = *(void *)(v16 + 6);
            *uint64_t v38 = v40;
            v38 += 2;
            --v39;
          }
          while (v39);
          ++v35;
          int8x8_t v37 = (void *)((char *)v37 + v36);
        }
        while (v35 != v34 >> 2);
        if ((int)v34 >= 8)
        {
          uint64_t v41 = 0;
          uint64_t v42 = v34 >> 3;
          uint64_t v43 = 2 * *(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 488);
          uint64_t v44 = v15;
          do
          {
            int v45 = v44;
            uint64_t v46 = v42;
            do
            {
              *v45++ = *v15;
              --v46;
            }
            while (v46);
            ++v41;
            uint64_t v44 = (_WORD *)((char *)v44 + v43);
          }
          while (v41 != v42);
        }
      }
    }
    if (result)
    {
      *unsigned int v50 = (__int16)*v15 >> 9;
      *a8 = 0;
    }
    else
    {
      if (*a8) {
        uint64_t result = sub_1BBA97994(a1, a2, a3, a4, 0, v24, 0);
      }
      if (v21) {
        *unsigned int v50 = v24;
      }
    }
  }
  else
  {
    int v47 = v22;
    BOOL v25 = v23;
    char v26 = v20 - 1;
    if (v48)
    {
      *a8 = 1;
      __int16 v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 968))(a2, a3, a4, a1);
      sub_1BBA97994(a1, a2, a3, a4, 0, v27, 0);
    }
    unsigned int v28 = 0;
    uint64_t v29 = (a4 + 1);
    do
    {
      uint64_t v30 = sub_1BBA8EDCC(v14, v28, (1 << v26) + (int)a2 < *(_DWORD *)(a1 + 16), (1 << v26) + (int)a3 < *(_DWORD *)(a1 + 20));
      uint64_t result = sub_1BBA973D0(a1, ((v28 & 1) << v26) + (int)a2, (v28 >> 1 << v26) + a3, v29, v30, a6, v25, a8);
      ++v28;
    }
    while (v28 != 4);
    if (v48)
    {
      if (*a8)
      {
        *BOOL v25 = v47;
        *a8 = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1BBA9783C(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7)
{
  int v7 = a6;
  int v9 = *(unsigned __int8 *)(*(void *)(a1 + 1880) + 2009) - a4;
  if (v9 <= *(_DWORD *)(*(void *)(a1 + 1888) + 1620)) {
    LOBYTE(v9) = *(_DWORD *)(*(void *)(a1 + 1888) + 1620);
  }
  int v10 = -1 << v9;
  int v11 = v10 & a2;
  int v12 = v10 & a3;
  int v13 = *(_DWORD *)(a1 + 4428);
  if (a7)
  {
    int v16 = a6;
    if (v11 != v13) {
      int v16 = sub_1BBA98838(a1, v11, v12, a4, a5, v11 - 1, v12);
    }
    if (v12 != *(_DWORD *)(a1 + 4432)) {
      int v7 = sub_1BBA98838(a1, v11, v12, a4, a5, v11, v12 - 1);
    }
  }
  else
  {
    int v16 = a6;
    if (v11 != v13) {
      int v16 = *(__int16 *)(*(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 512)
    }
                       + 2
                       * (*(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 488) * ((uint64_t)v12 >> 3)
                        + ((v11 - 1) >> 3))) >> 9;
    if (v12 != *(_DWORD *)(a1 + 4432)) {
      int v7 = *(__int16 *)(*(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 512)
    }
                      + 2
                      * (*(void *)(*(void *)(*(void *)(a1 + 1872) + 1360) + 488) * ((uint64_t)(v12 - 1) >> 3)
                       + (v11 >> 3))) >> 9;
  }
  return ((v16 + v7 + 1) >> 1);
}