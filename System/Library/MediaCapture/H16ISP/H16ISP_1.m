uint64_t AutoAENow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  NSObject *v5;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x263EF8340];
  v4 = H16ISP::H16ISPDevice::AEUpdateSuspend(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132));
  v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    v5 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_impl(&dword_24680F000, v5, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Reverting to auto-exposure, result=0x%08X\n\n", (uint8_t *)v7, 8u);
  }
  if (v4) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t AutoFocusNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 76)) {
    return 4294954608;
  }
  int v7 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v7 |= 0x80000000;
  }
  if (*(_DWORD *)(a2 + 628) == -1)
  {
    bzero(v12, 0xCuLL);
    int v14 = v14 & 0x7FFF0000 | v7;
    __int16 v13 = 1031;
    int v10 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v12, 0xCu, 0, 0xFFFFFFFF);
    v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      int v17 = v10;
      _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating auto-focus operation, res=0x%08X\n\n", buf, 8u);
    }
    if (v10) {
      return 4294954516;
    }
  }
  else
  {
    bzero(v12, 0x14uLL);
    int v14 = v14 & 0x7FFF0000 | v7;
    __int16 v13 = -31736;
    uint64_t v15 = 0x600000000;
    int v8 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v12, 0x14u, 0, 0xFFFFFFFF);
    v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      int v17 = v8;
      _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating peak tracking auto-focus operation, res=0x%08X\n\n", buf, 8u);
    }
    if (v8) {
      return 4294954516;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(a2 + 528) = 1;
  return result;
}

uint64_t CopyDeferAdditionOfAttachments(uint64_t a1, void *a2, uint64_t a3)
{
  v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 672)) {
    v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t CopyTemporalNoiseReductionEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 84)) {
    v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t CopyTemporalNoiseReductionConfiguration(const __CFAllocator *a1, __CFDictionary **a2, unsigned char *a3)
{
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int v7 = Mutable;
  if (!Mutable) {
    goto LABEL_22;
  }
  int v8 = (const void *)*MEMORY[0x263EFFB38];
  v9 = (const void *)*MEMORY[0x263EFFB40];
  if (a3[85]) {
    int v10 = (const void *)*MEMORY[0x263EFFB40];
  }
  else {
    int v10 = (const void *)*MEMORY[0x263EFFB38];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E5E8], v10);
  if (a3[86]) {
    v11 = v9;
  }
  else {
    v11 = v8;
  }
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E608], v11);
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, a3 + 92);
  if (v12)
  {
    CFNumberRef v13 = v12;
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E5F0], v12);
    CFRelease(v13);
  }
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v14)
  {
    uint64_t v15 = v14;
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloatType, a3 + 96);
    if (v16)
    {
      CFNumberRef v17 = v16;
      CFDictionarySetValue(v15, (const void *)*MEMORY[0x263F2E5D8], v16);
      CFRelease(v17);
    }
    CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloatType, a3 + 100);
    if (v18)
    {
      CFNumberRef v19 = v18;
      CFDictionarySetValue(v15, (const void *)*MEMORY[0x263F2E5E0], v18);
      CFRelease(v19);
    }
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E5F8], v15);
    CFRelease(v15);
    if (a3[88]) {
      v20 = v9;
    }
    else {
      v20 = v8;
    }
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E600], v20);
    if (a3[104]) {
      v21 = v9;
    }
    else {
      v21 = v8;
    }
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E610], v21);
    uint64_t result = 0;
  }
  else
  {
LABEL_22:
    uint64_t result = 4294954510;
  }
  *a2 = v7;
  return result;
}

uint64_t CopyTemporalNoiseReductionConfigurationSupportedKeys(const __CFAllocator *a1, __CFArray **a2)
{
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  v4 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F2E5E8]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E608]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E5F0]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E5F8]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E600]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E610]);
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 4294954510;
  }
  *a2 = v4;
  return result;
}

uint64_t SetFaceDetectionEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v5 = &_os_log_internal;
  if (!a1 || (int v8 = *(unsigned __int8 *)(a2 + 81), v9 = CFGetTypeID(a1), v9 != CFBooleanGetTypeID()))
  {
LABEL_15:
    uint64_t v12 = 4294954516;
    goto LABEL_16;
  }
  int v10 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  *(unsigned char *)(a2 + 81) = v10 != 0;
  int v11 = (v8 != 0) ^ (v10 == 0);
  if (!*(void *)(a2 + 136)) {
    int v11 = 1;
  }
  if (v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = 4294954514;
  }
  if ((v11 & 1) == 0)
  {
    if (v10)
    {
      uint64_t v12 = ActivateFaceDetectionOutputInFrameReceiver(a2, a4);
      if (v12)
      {
        CFNumberRef v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
        {
          CFNumberRef v13 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          SetFaceDetectionEnabled();
        }
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  CFMutableDictionaryRef v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
  {
    CFMutableDictionaryRef v14 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(a2 + 81) == 1) {
      uint64_t v15 = "True";
    }
    else {
      uint64_t v15 = "False";
    }
    int v17 = 136315138;
    CFNumberRef v18 = v15;
    _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Enable Face Detection: %s\n\n", (uint8_t *)&v17, 0xCu);
  }
  return v12;
}

uint64_t CopyFaceDetectionEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 81)) {
    v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t SetFaceDetectionMode(const void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    uint64_t v5 = 4294954516;
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, (void *)(a2 + 3700))) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = 4294954516;
      }
    }
  }
  else
  {
    uint64_t v5 = 4294954516;
  }
  v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    v6 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = *(_DWORD *)(a2 + 3700);
    v9[0] = 67109120;
    v9[1] = v7;
    _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Set Face Detection Mode: %u\n\n", (uint8_t *)v9, 8u);
  }
  return v5;
}

uint64_t CopyFaceDetectionMode(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3)
{
  *a2 = CFNumberCreate(a1, kCFNumberIntType, (const void *)(a3 + 3700));
  return 0;
}

uint64_t CopyLuxAdaptiveParameters(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  H16ISP::H16ISPDevice::GetLuxAdaptiveSettings(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 0, &v56);
  if (v9
    || (H16ISP::H16ISPDevice::GetLuxAdaptiveSettings(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 1, capacity), v10)|| (H16ISP::H16ISPDevice::GetLuxAdaptiveSettings(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 2, v54), v11)|| (H16ISP::H16ISPDevice::GetLuxAdaptiveSettings(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 4, v53), v12))
  {
    Mutable = 0;
    uint64_t result = 4294954516;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      int valuePtr = 0;
      CFMutableArrayRef v15 = CFArrayCreateMutable(a1, (unsigned __int16)v56, MEMORY[0x263EFFF70]);
      if (v15)
      {
        CFNumberRef v16 = v15;
        if ((_WORD)v56)
        {
          unint64_t v17 = 1;
          do
          {
            int valuePtr = *((unsigned __int16 *)&v56 + v17);
            CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v16, v18);
            CFRelease(v18);
            BOOL v19 = v17++ >= (unsigned __int16)v56;
          }
          while (!v19);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D8D0], v16);
        CFRelease(v16);
      }
      CFMutableArrayRef v20 = CFArrayCreateMutable(a1, (unsigned __int16)v56, MEMORY[0x263EFFF70]);
      if (v20)
      {
        v21 = v20;
        if ((_WORD)v56)
        {
          uint64_t v22 = 18;
          do
          {
            int valuePtr = *((unsigned __int8 *)&v56 + v22);
            CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v21, v23);
            CFRelease(v23);
            unint64_t v24 = v22 - 17;
            ++v22;
          }
          while (v24 < (unsigned __int16)v56);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D8C8], v21);
        CFRelease(v21);
      }
      CFMutableArrayRef v25 = CFArrayCreateMutable(a1, LOWORD(capacity[0]), MEMORY[0x263EFFF70]);
      if (v25)
      {
        v26 = v25;
        if (LOWORD(capacity[0]))
        {
          unint64_t v27 = 1;
          do
          {
            int valuePtr = *((unsigned __int16 *)capacity + v27);
            CFNumberRef v28 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v26, v28);
            CFRelease(v28);
            BOOL v19 = v27++ >= LOWORD(capacity[0]);
          }
          while (!v19);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2DA70], v26);
        CFRelease(v26);
      }
      CFMutableArrayRef v29 = CFArrayCreateMutable(a1, LOWORD(capacity[0]), MEMORY[0x263EFFF70]);
      if (v29)
      {
        v30 = v29;
        if (LOWORD(capacity[0]))
        {
          uint64_t v31 = 18;
          do
          {
            int valuePtr = *((unsigned __int8 *)capacity + v31);
            CFNumberRef v32 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v30, v32);
            CFRelease(v32);
            unint64_t v33 = v31 - 17;
            ++v31;
          }
          while (v33 < LOWORD(capacity[0]));
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2DA68], v30);
        CFRelease(v30);
      }
      CFMutableArrayRef v34 = CFArrayCreateMutable(a1, LOWORD(v54[0]), MEMORY[0x263EFFF70]);
      if (v34)
      {
        v35 = v34;
        if (LOWORD(v54[0]))
        {
          unint64_t v36 = 1;
          do
          {
            int valuePtr = *((unsigned __int16 *)v54 + v36);
            CFNumberRef v37 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v35, v37);
            CFRelease(v37);
            BOOL v19 = v36++ >= LOWORD(v54[0]);
          }
          while (!v19);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D8E0], v35);
        CFRelease(v35);
      }
      CFMutableArrayRef v38 = CFArrayCreateMutable(a1, LOWORD(v54[0]), MEMORY[0x263EFFF70]);
      if (v38)
      {
        v39 = v38;
        if (LOWORD(v54[0]))
        {
          uint64_t v40 = 18;
          do
          {
            int valuePtr = *((unsigned __int8 *)v54 + v40);
            CFNumberRef v41 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v39, v41);
            CFRelease(v41);
            unint64_t v42 = v40 - 17;
            ++v40;
          }
          while (v42 < LOWORD(v54[0]));
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D8D8], v39);
        CFRelease(v39);
      }
      CFMutableArrayRef v43 = CFArrayCreateMutable(a1, LOWORD(v53[0]), MEMORY[0x263EFFF70]);
      if (v43)
      {
        v44 = v43;
        if (LOWORD(v53[0]))
        {
          unint64_t v45 = 1;
          do
          {
            int valuePtr = *((unsigned __int16 *)v53 + v45);
            CFNumberRef v46 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v44, v46);
            CFRelease(v46);
            BOOL v19 = v45++ >= LOWORD(v53[0]);
          }
          while (!v19);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D8C0], v44);
        CFRelease(v44);
      }
      CFMutableArrayRef v47 = CFArrayCreateMutable(a1, LOWORD(v53[0]), MEMORY[0x263EFFF70]);
      if (v47)
      {
        v48 = v47;
        if (LOWORD(v53[0]))
        {
          uint64_t v49 = 18;
          do
          {
            int valuePtr = *((unsigned __int8 *)v53 + v49);
            CFNumberRef v50 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v48, v50);
            CFRelease(v50);
            unint64_t v51 = v49 - 17;
            ++v49;
          }
          while (v51 < LOWORD(v53[0]));
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D8B8], v48);
        CFRelease(v48);
      }
    }
    uint64_t result = 0;
  }
  *a2 = Mutable;
  return result;
}

uint64_t CopyModuleInfo(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    int v9 = Mutable;
    unsigned int valuePtr = *(_DWORD *)(a3 + 156);
    CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C478], v10);
    CFRelease(v10);
    if (!H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), 0, v29, v34))
    {
      unsigned int valuePtr = v37;
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C458], v11);
      CFRelease(v11);
      unsigned int valuePtr = v38;
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C440], v12);
      CFRelease(v12);
      unsigned int valuePtr = v35;
      CFNumberRef v13 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C450], v13);
      CFRelease(v13);
      unsigned int valuePtr = v39;
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C430], v14);
      CFRelease(v14);
      unsigned int valuePtr = v36;
      CFNumberRef v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C448], v15);
      CFRelease(v15);
      CFStringRef v16 = CFStringCreateWithCString(0, v49, 0);
      if (v16)
      {
        CFStringRef v17 = v16;
        CFDictionarySetValue(v9, @"ModuleSerialNumber", v16);
        CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C460], v17);
        CFRelease(v17);
      }
      *(void *)__str = 0;
      uint64_t v32 = 0;
      char v33 = 0;
      snprintf(__str, 0x10uLL, "%02X%02X%02X%02X%02X%02X%02X%02X", v40, v41, v42, v43, v44, v45, v46, v47);
      CFStringRef v18 = CFStringCreateWithCString(0, __str, 0);
      if (v18)
      {
        CFStringRef v19 = v18;
        CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C480], v18);
        CFRelease(v19);
      }
      char v28 = 0;
      *(_DWORD *)cStr = 0;
      snprintf(cStr, 5uLL, "%04X", v48);
      CFStringRef v20 = CFStringCreateWithCString(0, cStr, 0);
      if (v20)
      {
        CFStringRef v21 = v20;
        CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C438], v20);
        CFRelease(v21);
      }
      CFStringRef v22 = CFStringCreateWithCString(0, v51, 0);
      if (v22)
      {
        CFStringRef v23 = v22;
        CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F2C470], v22);
        CFRelease(v23);
      }
      CFStringRef v24 = CFStringCreateWithCString(0, v50, 0);
      if (v24)
      {
        CFStringRef v25 = v24;
        CFDictionarySetValue(v9, @"StrobeSerialNumber", v24);
        CFRelease(v25);
      }
    }
    *a2 = v9;
  }
  return 0;
}

uint64_t CopyColorHistogram(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  bzero(v11, 0x400CuLL);
  __int16 v12 = -16372;
  int v13 = *(_DWORD *)(v5 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v3 + 24), v11, 0x400Cu, 0, 0xFFFFFFFF))
  {
    CFDataRef v8 = 0;
    uint64_t v9 = 4294954513;
  }
  else
  {
    CFDataRef v8 = CFDataCreate(0, v14, 0x4000);
    uint64_t v9 = 0;
  }
  *int v7 = v8;
  return v9;
}

uint64_t SetAWBScheme(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  int v8 = H16ISP::H16ISPDevice::SetAWBScheme(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    int v13 = valuePtr;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Selected AWB Scheme: %d result=0x%08X\n\n", buf, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyAWBScheme(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10 = 0;
  if (H16ISP::H16ISPDevice::GetAWBScheme(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v10))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    int valuePtr = v10;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopyMaxIntegrationTime(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v11 = 0;
  if (H16ISP::H16ISPDevice::GetMaxIntegrationTime(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v11))
  {
    CFNumberRef v7 = 0;
    uint64_t v8 = 4294954513;
  }
  else
  {
    LODWORD(v6) = v11;
    double v10 = (double)v6 / 1000.0;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberDoubleType, &v10);
    uint64_t v8 = 0;
  }
  *a2 = v7;
  return v8;
}

uint64_t CopyMinIntegrationTime(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int valuePtr = 0;
  if (H16ISP::H16ISPDevice::GetMinIntegrationTime(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &valuePtr))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopySensorTemperature(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = 0;
  if (H16ISP::H16ISPDevice::GetSensorTemperature(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &valuePtr, 0))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopySensorPixelClock(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t valuePtr = 0;
  if (H16ISP::H16ISPDevice::GetCurrentPixClockFrequencyIndex(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), (unsigned int *)&valuePtr))return 4294954513; {
  if (H16ISP::H16ISPDevice::GetPixClockFrequencyForIndex(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), valuePtr, (unsigned int *)&valuePtr + 1))
  }
  {
    CFNumberRef v9 = 0;
    uint64_t result = 4294954513;
  }
  else
  {
    CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, (char *)&valuePtr + 4);
    uint64_t result = 0;
  }
  *a2 = v9;
  return result;
}

uint64_t CopyAlternateOutputSizeLimits(uint64_t a1, __CFDictionary **a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 674))
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t result = 4294954509;
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a3 + 48);
    unsigned int v8 = *(_DWORD *)(a3 + 168);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      if (v7 >= v8) {
        unsigned int v9 = v8;
      }
      else {
        unsigned int v9 = 0;
      }
      unsigned int v10 = v7 - v9;
      int valuePtr = *(_DWORD *)(*(void *)(a3 + 160) + 120 * (v7 - v9) + 28) >> 2;
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2DA38], v11);
      CFRelease(v11);
      int valuePtr = *(_DWORD *)(*(void *)(a3 + 160) + 120 * v10 + 32) >> 2;
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2DA20], v12);
      CFRelease(v12);
      int valuePtr = *(_DWORD *)(*(void *)(a3 + 160) + 120 * v10 + 28);
      CFNumberRef v13 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2DA30], v13);
      CFRelease(v13);
      int valuePtr = *(_DWORD *)(*(void *)(a3 + 160) + 120 * v10 + 32);
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2DA18], v14);
      CFRelease(v14);
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = 4294954510;
    }
  }
  *a2 = Mutable;
  return result;
}

uint64_t SetAEMinGain(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (HIWORD(valuePtr)) {
    return 4294954516;
  }
  int v8 = H16ISP::H16ISPDevice::SetMinimumGainCap(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (unsigned __int16)valuePtr);
  unsigned int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    unsigned int v13 = valuePtr;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting Minimum Gain Cap: 0x%08X, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyAEMinGain(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v10 = 0;
  if (H16ISP::H16ISPDevice::GetMinimumGainCap(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v10))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    int valuePtr = v10;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetAEGainThresholdForFlickerZoneIntegrationTimeTransition(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  int v8 = H16ISP::H16ISPDevice::SetAEMaxGainCapWithExposureUpdate(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  unsigned int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    int v13 = valuePtr;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting AE Max Gain Cap With Exposure Update: 0x%08X, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyAEGainThresholdForFlickerZoneIntegrationTimeTransition(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int valuePtr = 0;
  if (H16ISP::H16ISPDevice::GetAEMaxGainCapWithExposureUpdate(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &valuePtr))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetAEIntegrationTimeForUnityGainToMinGainTransition(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  int v8 = H16ISP::H16ISPDevice::SetAEGainCapOffExposureUpdate(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  unsigned int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    int v13 = valuePtr;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting AE Gain Cap Off Exposure Update: 0x%08X, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyAEIntegrationTimeForUnityGainToMinGainTransition(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int valuePtr = 0;
  if (H16ISP::H16ISPDevice::GetAEGainCapOffExposureUpdate(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &valuePtr))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopyErrorCounters(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)CFStringRef v17 = 0;
  uint64_t valuePtr = 0;
  *(void *)uint64_t v16 = 0;
  if (H16ISP::H16ISPDevice::GetErrorCount(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 0, (unsigned int *)&valuePtr + 1)|| H16ISP::H16ISPDevice::GetErrorCount(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 1, (unsigned int *)&valuePtr)|| H16ISP::H16ISPDevice::GetErrorCount(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 2, &v17[1])|| H16ISP::H16ISPDevice::GetErrorCount(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 3, v17)
    || H16ISP::H16ISPDevice::GetErrorCount(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 4, &v16[1])|| H16ISP::H16ISPDevice::GetErrorCount(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 6, v16))
  {
    int v8 = 0;
    uint64_t result = 4294954513;
  }
  else
  {
    uint64_t result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    int v8 = (__CFDictionary *)result;
    if (result)
    {
      CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, (char *)&valuePtr + 4);
      CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2D9A8], v10);
      CFRelease(v10);
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2D968], v11);
      CFRelease(v11);
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &v17[1]);
      CFDictionarySetValue(v8, @"SIFErrorCount", v12);
      CFRelease(v12);
      CFNumberRef v13 = CFNumberCreate(0, kCFNumberIntType, v17);
      CFDictionarySetValue(v8, @"UARTErrorCount", v13);
      CFRelease(v13);
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, &v16[1]);
      CFDictionarySetValue(v8, @"LPDPErrorCount", v14);
      CFRelease(v14);
      CFNumberRef v15 = CFNumberCreate(0, kCFNumberIntType, v16);
      CFDictionarySetValue(v8, @"ProjectorErrorCount", v15);
      CFRelease(v15);
      uint64_t result = 0;
    }
  }
  *a2 = v8;
  return result;
}

uint64_t SetFaceDetectionRectangleOfInterest(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID() || !CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a1, &v11)) {
    return 4294954516;
  }
  int v8 = H16ISP::H16ISPDevice::SetFaceDetectionWindowParam(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), ((unint64_t)(int)(v11.size.width * 1000.0) << 32) | ((unint64_t)(int)(v11.size.height * 1000.0) << 48) | ((unint64_t)(int)(v11.origin.y * 1000.0) << 16) | (int)(v11.origin.x * 1000.0));
  unsigned int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v13 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: set kFigCaptureStreamProperty_FaceDetectionRectangleOfInterest, res=0x%08x\n\n", buf, 8u);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyFaceDetectionRectangleOfInterest(uint64_t a1, CFDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (H16ISP::H16ISPDevice::GetFaceDetectionWindowParam(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v13))
  {
    CFDictionaryRef DictionaryRepresentation = 0;
    uint64_t v11 = 4294954513;
  }
  else
  {
    LOWORD(v6) = v13;
    v14.origin.x = (double)v6 / 1000.0;
    LOWORD(v7) = WORD1(v13);
    v14.origin.y = (double)v7 / 1000.0;
    LOWORD(v8) = WORD2(v13);
    v14.size.width = (double)v8 / 1000.0;
    LOWORD(v9) = HIWORD(v13);
    v14.size.height = (double)v9 / 1000.0;
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v14);
    uint64_t v11 = 0;
  }
  *a2 = DictionaryRepresentation;
  return v11;
}

uint64_t CopyAutoFocusMode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v9 = 0;
  if (H16ISP::H16ISPDevice::GetFocusMode(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v9))
  {
    CFTypeRef v6 = 0;
    uint64_t result = 4294954513;
  }
  else
  {
    unint64_t v8 = (CFTypeRef *)MEMORY[0x263F2C350];
    if (v9 != 1) {
      unint64_t v8 = (CFTypeRef *)MEMORY[0x263F2C358];
    }
    CFTypeRef v6 = *v8;
    CFRetain(*v8);
    uint64_t result = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t CopyMatrixFocusParams(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)CFNumberRef v15 = 0;
  *(_DWORD *)uint64_t v16 = 0;
  unsigned __int16 v14 = 0;
  if (H16ISP::H16ISPDevice::GetAFMatrixModeConfig(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v16[1], v16, &v15[1], v15, &v14))
  {
    *a2 = 0;
    return 4294954513;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      int v13 = v16[1];
      CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C410], v8);
      CFRelease(v8);
      int v13 = v16[0];
      CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C400], v9);
      CFRelease(v9);
      int v13 = v15[1];
      CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C3F8], v10);
      CFRelease(v10);
      int v13 = v15[0];
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C408], v11);
      CFRelease(v11);
      int v13 = v14;
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C3F0], v12);
      CFRelease(v12);
    }
    uint64_t result = 0;
    *a2 = Mutable;
  }
  return result;
}

uint64_t CopyMatrixFocusDebugData(uint64_t a1, CFDataRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  bzero(bytes, 0xA9CuLL);
  __int16 v11 = -31731;
  int v12 = *(_DWORD *)(a3 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), bytes, 0xA9Cu, 0, 0xFFFFFFFF))
  {
    CFDataRef v8 = 0;
    uint64_t result = 4294954513;
  }
  else
  {
    CFDataRef v8 = CFDataCreate(0, bytes, 2716);
    uint64_t result = 0;
  }
  *a2 = v8;
  return result;
}

uint64_t SetClientMaxBufferCountHint(CFTypeRef cf, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 674)) {
    return 4294954509;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
  *(_DWORD *)(a2 + 128) = valuePtr;
  CFTypeRef v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeRef v6 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v9 = valuePtr;
    _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting Max Buffer Count Hint: %d\n\n", buf, 8u);
  }
  return 0;
}

uint64_t SetAttachRAW(const void *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFBooleanGetTypeID()))
  {
    int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
    uint64_t v6 = 0;
    *(unsigned char *)(a2 + 80) = v5 != 0;
  }
  else
  {
    uint64_t v6 = 4294954516;
  }
  unint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unint64_t v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(a2 + 80) == 1) {
      CFDataRef v8 = "True";
    }
    else {
      CFDataRef v8 = "False";
    }
    int v10 = 136315138;
    __int16 v11 = v8;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Capture Raw In Parallel: %s\n\n", (uint8_t *)&v10, 0xCu);
  }
  return v6;
}

uint64_t SetColorRange(CFTypeRef cf, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 674)) {
    return 4294954509;
  }
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFStringGetTypeID())
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x263F2C360], cf))
      {
        int v6 = 0;
LABEL_9:
        uint64_t result = 0;
        *(_DWORD *)(a2 + 144) = v6;
        return result;
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x263F2C368], cf))
      {
        int v6 = 1;
        goto LABEL_9;
      }
    }
  }
  return 4294954516;
}

uint64_t LockAWBNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v6 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v6 |= 0x80000000;
  }
  int v7 = H16ISP::H16ISPDevice::AWBUpdateSuspend(*(H16ISP::H16ISPDevice **)(a4 + 24), v6);
  int v8 = *(_DWORD *)(a2 + 132);
  if (!(gCaptureDeviceCFPrefs[44 * v8 + 200] | v7))
  {
    int v7 = H16ISP::H16ISPDevice::ALSSuspend(*(H16ISP::H16ISPDevice **)(a4 + 24), v6);
    int v8 = *(_DWORD *)(a2 + 132);
  }
  if (!(gCaptureDeviceCFPrefs[44 * v8 + 199] | v7)) {
    int v7 = H16ISP::H16ISPDevice::LSCModulationSuspend(*(H16ISP::H16ISPDevice **)(a4 + 24), v6);
  }
  int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109120;
    v11[1] = v7;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Lock AWB, result=0x%08X\n\n", (uint8_t *)v11, 8u);
  }
  if (v7) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t UnlockAWBNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v6 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v6 |= 0x80000000;
  }
  int v7 = H16ISP::H16ISPDevice::AWBUpdateResume(*(H16ISP::H16ISPDevice **)(a4 + 24), v6);
  int v8 = *(_DWORD *)(a2 + 132);
  if (!(gCaptureDeviceCFPrefs[44 * v8 + 200] | v7))
  {
    int v7 = H16ISP::H16ISPDevice::ALSResume(*(H16ISP::H16ISPDevice **)(a4 + 24), v6);
    int v8 = *(_DWORD *)(a2 + 132);
  }
  if (!(gCaptureDeviceCFPrefs[44 * v8 + 199] | v7)) {
    int v7 = H16ISP::H16ISPDevice::LSCModulationResume(*(H16ISP::H16ISPDevice **)(a4 + 24), v6);
  }
  int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109120;
    v11[1] = v7;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Unlock AWB, result=0x%08X\n\n", (uint8_t *)v11, 8u);
  }
  if (v7) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t LockAENow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v5 |= 0x80000000;
  }
  int v6 = H16ISP::H16ISPDevice::AEUpdateSuspend(*(H16ISP::H16ISPDevice **)(a4 + 24), v5);
  int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Lock AE, result=0x%08X\n\n", (uint8_t *)v9, 8u);
  }
  if (v6) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t UnlockAENow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v5 |= 0x80000000;
  }
  int v6 = H16ISP::H16ISPDevice::AEUpdateResume(*(H16ISP::H16ISPDevice **)(a4 + 24), v5);
  int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Unlock AE, result=0x%08X\n\n", (uint8_t *)v9, 8u);
  }
  if (v6) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetTorchLevel(uint64_t a1, uint64_t a2)
{
  CFNumberRef v2 = (const __CFNumber *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  CFNumberRef v7 = v2;
  uint64_t v28 = *MEMORY[0x263EF8340];
  LODWORD(v26) = 101;
  CFTypeID v8 = CFGetTypeID(v2);
  if (v8 != CFNumberGetTypeID() || !*(_DWORD *)(v6 + 644)) {
    return 4294954516;
  }
  float valuePtr = 0.0;
  CFNumberGetValue(v7, kCFNumberFloatType, &valuePtr);
  uint64_t v9 = &_os_log_internal;
  if (valuePtr >= 1.0)
  {
    unsigned int v10 = 255;
    goto LABEL_11;
  }
  if (valuePtr > 0.0)
  {
    if ((float)(valuePtr * 255.0) <= 1) {
      unsigned int v10 = 1;
    }
    else {
      unsigned int v10 = (float)(valuePtr * 255.0);
    }
LABEL_11:
    if (dword_26B11B874)
    {
      if (dword_26B11B874 >= 0xFF) {
        unsigned int v10 = 255;
      }
      else {
        unsigned int v10 = dword_26B11B874;
      }
      uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v13 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)CFStringRef v24 = v10;
        _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Torch Level Override: %d.\n\n", buf, 8u);
      }
    }
    if (*(unsigned char *)(v6 + 4040))
    {
      H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), 1u, 1u);
      if (v10 >= 2) {
        unsigned int v14 = (v10 << 23) & 0xFF000000 | ((v10 >> 1) << 8);
      }
      else {
        unsigned int v14 = 0;
      }
      int v15 = H16ISP::H16ISPDevice::SetIndividualTorchLEDLevels(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), v14);
    }
    else
    {
      if (!*(void *)(v6 + 136)) {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), 1u, 1u);
      }
      int v15 = H16ISP::H16ISPDevice::EnableTorch(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), (unsigned __int16)v10);
    }
    int v16 = v15;
    char v17 = 1;
    *(unsigned char *)(v6 + 4041) = 1;
    if (v15)
    {
      int v18 = 0;
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  int v16 = H16ISP::H16ISPDevice::DisableTorch(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132));
  if (!*(void *)(v6 + 136)) {
    H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), 0, 0);
  }
  *(unsigned char *)(v6 + 4041) = 0;
  if (v16)
  {
    int v18 = 0;
    unsigned int v10 = 0;
    goto LABEL_37;
  }
  char v17 = 0;
  unsigned int v10 = 0;
LABEL_34:
  char v27 = v17;
  uint64_t v19 = *(void *)(v4 + 200);
  if (!v19)
  {
    int v16 = 0;
    int v18 = 1;
LABEL_37:
    CFStringRef v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
    {
      CFStringRef v20 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)CFStringRef v24 = "SetTorchLevel";
      *(_WORD *)&v24[8] = 1024;
      int v25 = v16;
      _os_log_impl(&dword_24680F000, v20, OS_LOG_TYPE_INFO, "%s - Could not set strobe state, res = 0x%x\n\n", buf, 0x12u);
      if (v18) {
        goto LABEL_41;
      }
    }
    else if (v18)
    {
      goto LABEL_41;
    }
    uint64_t v11 = 4294954516;
    goto LABEL_44;
  }
  H16ISP::H16ISPServicesRemote::SetProperty(v19, &v26);
  int v16 = 0;
LABEL_41:
  uint64_t v11 = 0;
LABEL_44:
  CFStringRef v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
  {
    CFStringRef v21 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)CFStringRef v24 = v10;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v16;
    _os_log_impl(&dword_24680F000, v21, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting torch level to %d. result=0x%08X\n\n", buf, 0xEu);
  }
  return v11;
}

uint64_t SetAEWindowParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  *(void *)unsigned int v14 = 0;
  *(void *)int v15 = 0;
  unsigned int v13 = 0;
  if (H16ISPGetRectParamsFromDict((const __CFDictionary *)a1, &v15[2], v15, &v14[2], v14, &v13, 0)) {
    return 4294954516;
  }
  int v10 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v10 |= 0x80000000;
  }
  int v11 = H16ISP::H16ISPDevice::SetAEWindow(*(H16ISP::H16ISPDevice **)(a4 + 24), v10, v15[2], v15[0], v14[2], v14[0]);
  if (v11) {
    uint64_t v8 = 4294954516;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v12 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110144;
    int v17 = v11;
    __int16 v18 = 1024;
    int v19 = *(_DWORD *)&v15[2];
    __int16 v20 = 1024;
    int v21 = *(_DWORD *)v15;
    __int16 v22 = 1024;
    int v23 = *(_DWORD *)&v14[2];
    __int16 v24 = 1024;
    int v25 = *(_DWORD *)v14;
    _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Set AE Window Params (result=0x%08X), hStart=%d, vStart=%d, width=%d, height=%d\n\n", buf, 0x20u);
  }
  return v8;
}

uint64_t ManualFocusNow(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
  {
    CFTypeID v11 = CFGetTypeID(a1);
    if (v11 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
      goto LABEL_8;
    }
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CC30]);
  if (!Value) {
    return 4294954516;
  }
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C370]);
  if (!v9)
  {
LABEL_8:
    int v10 = 0;
    goto LABEL_9;
  }
  CFNumberGetValue(v9, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  int v10 = HIDWORD(valuePtr);
LABEL_9:
  int v12 = H16ISP::H16ISPDevice::SetManualFocusPosition(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr, v10);
  unsigned int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v13 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    int v17 = valuePtr;
    __int16 v18 = 1024;
    int v19 = v12;
    _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating manual-focus operation, position=0x%02X, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v12) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetFlashMode(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
  {
    if (CFEqual((CFTypeRef)*MEMORY[0x263F2C1A8], a1))
    {
      int v5 = 0;
LABEL_8:
      uint64_t result = 0;
      *(_DWORD *)(a2 + 232) = v5;
      return result;
    }
    if (CFEqual((CFTypeRef)*MEMORY[0x263F2C1B0], a1))
    {
      int v5 = 1;
      goto LABEL_8;
    }
  }
  return 4294954516;
}

uint64_t SetAFEarlyOutParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C310]);
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C300]);
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C318]);
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C308]);
  BOOL v12 = !Value || v9 == 0;
  BOOL v13 = v12 || v10 == 0;
  if (v13 || v11 == 0) {
    return 4294954516;
  }
  CFNumberRef v16 = v11;
  uint64_t v20 = 0;
  uint64_t valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  CFNumberGetValue(v10, kCFNumberIntType, (char *)&v20 + 4);
  CFNumberGetValue(v16, kCFNumberIntType, &v20);
  uint64_t result = 4294954516;
  if (HIDWORD(v20) <= 0xFF && HIDWORD(valuePtr) <= 1 && valuePtr <= 1 && v20 <= 0x40)
  {
    int v17 = *(unsigned __int16 *)(a2 + 132);
    if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
      v17 |= 0x80000000;
    }
    int v18 = H16ISP::H16ISPDevice::SetAFEarlyOutParams(*(H16ISP::H16ISPDevice **)(a4 + 24), v17, SBYTE4(valuePtr), valuePtr, SBYTE4(v20), v20);
    int v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v19 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      int v23 = v18;
      _os_log_impl(&dword_24680F000, v19, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting early-out AF Parameters, result=0x%08X\n\n", buf, 8u);
    }
    if (v18) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t ManualAENow(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  *(void *)uint64_t v20 = 0;
  uint64_t valuePtr = 0;
  *(void *)int v19 = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C4B8]);
  if (!Value) {
    return 4294954516;
  }
  CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C4B0]);
  if (!v9) {
    return 4294954516;
  }
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C320]);
  if (!v10) {
    return 4294954516;
  }
  CFNumberGetValue(v10, kCFNumberIntType, &v20[2]);
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C4A8]);
  if (!v11) {
    return 4294954516;
  }
  CFNumberGetValue(v11, kCFNumberIntType, v20);
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C4A0]);
  if (!v12) {
    return 4294954516;
  }
  CFNumberGetValue(v12, kCFNumberIntType, &v19[1]);
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C370]);
  if (v13) {
    CFNumberGetValue(v13, kCFNumberIntType, v19);
  }
  *(_DWORD *)buf = 0;
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C3E8]);
  if (v14)
  {
    CFNumberGetValue(v14, kCFNumberFloatType, buf);
    int v15 = vcvts_n_u32_f32(*(float *)buf, 8uLL);
  }
  else
  {
    int v15 = 0;
  }
  int v17 = H16ISP::H16ISPDevice::SetAEIntegrationTimeAndGains(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1000000 * (unint64_t)HIDWORD(valuePtr) / valuePtr, v20[2], v19[1], v20[0], v19[0], v15, 0, 0, 0, 0);
  int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v18 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110912;
    int v23 = v17;
    __int16 v24 = 1024;
    int v25 = HIDWORD(valuePtr);
    __int16 v26 = 1024;
    int v27 = valuePtr;
    __int16 v28 = 1024;
    int v29 = *(_DWORD *)&v20[2];
    __int16 v30 = 1024;
    int v31 = *(_DWORD *)v20;
    __int16 v32 = 1024;
    unsigned int v33 = v19[1];
    __int16 v34 = 1024;
    unsigned int v35 = v19[0];
    __int16 v36 = 1024;
    int v37 = v15;
    _os_log_impl(&dword_24680F000, v18, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating manual-AE (result=0x%08X), shutterSpeedNumerator=%d, shutterSpeedDenominator=%d, agc=%d, sensorDGain=%d, ispDGain=%d, tag=0x%08X, frameRate=0x%08X\n\n", buf, 0x32u);
  }
  if (v17) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t RawImageProcessBegin(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 == CFDictionaryGetTypeID() && !*(unsigned char *)(a2 + 376))
    {
      if (*(void *)(a2 + 136)) {
        return 4294954612;
      }
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D410]);
      if (Value)
      {
        CFDataRef v11 = Value;
        CFTypeID v12 = CFGetTypeID(Value);
        if (v12 == CFDataGetTypeID())
        {
          unint64_t Length = CFDataGetLength(v11);
          LOBYTE(v33) = 0;
          CFNumberRef v14 = H16ISP::H16ISPCreateCVBuffer((Length >> 4) + 1, 8u, 0, 0, 1, 0, 0.0, 64, 128, 0, v33, 0, 0, -1);
          if (v14)
          {
            int v15 = v14;
            CVPixelBufferLockBaseAddress(v14, 0);
            BaseAddress = CVPixelBufferGetBaseAddress(v15);
            BytePtr = CFDataGetBytePtr(v11);
            memmove(BaseAddress, BytePtr, Length);
            int v18 = BaseAddress[4];
            if (!v18) {
              goto LABEL_36;
            }
            uint64_t v19 = BaseAddress[5];
            uint64_t v20 = v19 ? (char *)BaseAddress + v19 : 0;
            if (v18 == 1) {
              goto LABEL_36;
            }
            if (!v20 || BaseAddress[6] == 0) {
              goto LABEL_36;
            }
            unsigned int v22 = *((unsigned __int16 *)v20 + 229);
            if (*(_DWORD *)(a2 + 132) != v22) {
              goto LABEL_36;
            }
            if (dword_26B11B878 != -1 || dword_26B11B87C != -1 || dword_26B11B880 != -1 || dword_26B11B884 != -1) {
              H16ISP::H16ISPDevice::SetVISParams(*(H16ISP::H16ISPDevice **)(a4 + 24), *((unsigned __int16 *)v20 + 229), dword_26B11B878, dword_26B11B87C, dword_26B11B880, dword_26B11B884);
            }
            int v23 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E9B8]);
            __int16 v24 = (CFTypeRef *)MEMORY[0x263EFFB40];
            if (v23 && CFEqual(v23, (CFTypeRef)*MEMORY[0x263EFFB40]))
            {
              H16ISP::H16ISPDevice::EnableVIS(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1, 1);
              H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 16, 1);
              H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 18, 1);
            }
            int v25 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E9B0]);
            if (v25)
            {
              __int16 v26 = v25;
              if (CFEqual(v25, *v24))
              {
                int v27 = *(H16ISP::H16ISPDevice **)(a4 + 24);
                int v28 = *(_DWORD *)(a2 + 132);
                char v29 = 1;
                char v30 = 1;
              }
              else
              {
                if (!CFEqual(v26, (CFTypeRef)*MEMORY[0x263EFFB38])) {
                  goto LABEL_35;
                }
                int v27 = *(H16ISP::H16ISPDevice **)(a4 + 24);
                int v28 = *(_DWORD *)(a2 + 132);
                char v29 = 0;
                char v30 = 0;
              }
              H16ISP::H16ISPDevice::EnableTileBasedGDC(v27, v28, v29, v30, 0, 0);
            }
LABEL_35:
            bzero(v34, 0x10uLL);
            __int16 v35 = 263;
            int v31 = v20[46];
            unsigned int v36 = v22;
            int v37 = v31;
            if (!H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v34, 0x10u, 0, 0xFFFFFFFF))
            {
              __int16 v32 = (unsigned char *)(a2 + 84);
              if ((!*(unsigned char *)(a2 + 84)
                 || !H16ISP::H16ISPDevice::EnableTNR(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), a2 + 84))&& (!*(unsigned char *)(a2 + 81)|| !H16ISP::H16ISPDevice::StartFaceDetect(*(H16ISP::H16ISPDevice **)(a4 + 24), *(unsigned int *)(a2 + 132))))
              {
                if (!H16ISP::H16ISPDevice::ProcessRawStart(*(H16ISP::H16ISPDevice **)(a4 + 24), v22))
                {
                  uint64_t v8 = 0;
                  *(unsigned char *)(a2 + 376) = 1;
                  *(unsigned char *)(a2 + 377) = *(unsigned char *)(a2 + 84);
                  *(_DWORD *)(a2 + 380) = v20[46];
                  goto LABEL_37;
                }
                if (*v32)
                {
                  *__int16 v32 = 0;
                  H16ISP::H16ISPDevice::EnableTNR(*(H16ISP::H16ISPDevice **)(a4 + 24), v22, a2 + 84);
                }
              }
            }
LABEL_36:
            uint64_t v8 = 4294954516;
LABEL_37:
            CVPixelBufferUnlockBaseAddress(v15, 0);
            CVPixelBufferRelease(v15);
            return v8;
          }
        }
      }
    }
  }
  return 4294954516;
}

uint64_t RawImageProcessPrepare(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  uint64_t v102 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  if (!*(unsigned char *)(a2 + 376)) {
    return 4294954516;
  }
  if (*(unsigned char *)(a2 + 384)) {
    return 4294954516;
  }
  CFDataRef Value = (__CVBuffer *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C4E8]);
  if (!Value) {
    return 4294954516;
  }
  CFDataRef v11 = Value;
  IOSurface = CVPixelBufferGetIOSurface(Value);
  IOSurfaceID ID = IOSurfaceGetID(IOSurface);
  CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C4F0]);
  CFDictionaryRef v15 = v14;
  if (!v14)
  {
    int v25 = *(__CVBuffer **)(a2 + 392);
    if (v25)
    {
      CFDictionaryRef cf = 0;
      int v33 = CVPixelBufferGetIOSurface(v25);
      IOSurfaceID v28 = IOSurfaceGetID(v33);
      int DataSize = CVPixelBufferGetDataSize(v25);
      BaseAddress = CVPixelBufferGetBaseAddress(v25);
      int v26 = -536870212;
      goto LABEL_25;
    }
    return 4294954516;
  }
  CFNumberRef v16 = CFDictionaryGetValue(v14, (const void *)*MEMORY[0x263F2D410]);
  if (!v16) {
    return 4294954516;
  }
  int v17 = v16;
  if (dword_26B11B888)
  {
    H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 19, 1);
    H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 19, 0, 1);
    H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 19, 1, 1);
  }
  CFTypeID v18 = CFGetTypeID(v17);
  if (v18 != CFDataGetTypeID()) {
    return 4294954516;
  }
  CFDictionaryRef cf = v15;
  IOSurfaceID v97 = ID;
  size_t Length = CFDataGetLength((CFDataRef)v17);
  int CameraConfig = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 0, v101, valuePtr);
  int v21 = CameraConfig;
  size_t v22 = v111;
  if (Length > v111) {
    size_t v22 = Length;
  }
  if (CameraConfig) {
    size_t v23 = Length;
  }
  else {
    size_t v23 = v22;
  }
  BYTE4(v89) = 0;
  __int16 v24 = H16ISP::H16ISPCreateCVBuffer((v23 >> 4) + 1, 8u, 0, 0, 1, 0, 0.0, 64, 128, 0, SHIDWORD(v89), 0, 0, -1);
  if (!v24)
  {
    if (!v21)
    {
      *(unsigned char *)(a2 + 384) = 1;
      *(void *)(a2 + 392) = 0;
      *(void *)(a2 + 400) = 0;
      *(void *)(a2 + 408) = v11;
      *(void *)(a2 + 416) = 0;
LABEL_47:
      CFRetain(v15);
      *(void *)(a2 + 424) = v15;
LABEL_48:
      CFRetain(v11);
      return 0;
    }
    return 4294954516;
  }
  int v25 = v24;
  int DataSize = v23;
  int v26 = v21;
  CVPixelBufferLockBaseAddress(v24, 0);
  int v27 = CVPixelBufferGetIOSurface(v25);
  IOSurfaceID v28 = IOSurfaceGetID(v27);
  BaseAddress = CVPixelBufferGetBaseAddress(v25);
  BytePtr = CFDataGetBytePtr((CFDataRef)v17);
  memmove(BaseAddress, BytePtr, Length);
  int v31 = *(__CVBuffer **)(a2 + 392);
  if (v31)
  {
    CVPixelBufferUnlockBaseAddress(v31, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 392));
    *(void *)(a2 + 392) = 0;
  }
  __int16 v32 = *(const void **)(a2 + 424);
  IOSurfaceID ID = v97;
  if (v32)
  {
    CFRelease(v32);
    *(void *)(a2 + 424) = 0;
  }
LABEL_25:
  int v34 = BaseAddress[4];
  if (!v34) {
    goto LABEL_37;
  }
  uint64_t v35 = BaseAddress[5];
  unsigned int v36 = v35 ? (char *)BaseAddress + v35 : 0;
  if (v34 == 1
    || (v96 = v28, uint64_t v37 = BaseAddress[6], !v37)
    || !v36
    || (unsigned int v38 = *((unsigned __int16 *)v36 + 229), *(_DWORD *)(a2 + 132) != v38)
    || (IOSurfaceID v98 = ID,
        int v39 = *(_DWORD *)v36,
        int v95 = *((unsigned __int16 *)v36 + 229),
        unsigned __int8 v40 = v36,
        v39 != H16ISP::H16ISPDevice::GetChannelSensorID(*(H16ISP::H16ISPDevice **)(a4 + 24), v38))
    || *(_DWORD *)(a2 + 380) != v40[46])
  {
LABEL_37:
    unsigned __int8 v44 = 0;
    CFDataRef v45 = 0;
    uint64_t v8 = 4294954516;
    goto LABEL_38;
  }
  v94 = v40;
  unsigned __int8 v41 = (unsigned __int16 *)((char *)BaseAddress + v37);
  CFDataRef v42 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C508]);
  unsigned __int8 v43 = (UInt8 *)(a2 + 432);
  if (v42)
  {
    v113.location = 0;
    v113.length = 72;
    CFDataGetBytes(v42, v113, v43);
  }
  else
  {
    uint64_t v46 = MEMORY[0x263F01090];
    long long v47 = *MEMORY[0x263F01090];
    *(_OWORD *)unsigned __int8 v43 = *MEMORY[0x263F01090];
    uint64_t v48 = *(void *)(v46 + 16);
    *(void *)(a2 + 448) = v48;
    *(_OWORD *)(a2 + 456) = v47;
    *(void *)(a2 + 472) = v48;
    *(_OWORD *)(a2 + 480) = v47;
    *(void *)(a2 + 496) = v48;
  }
  CFDictionaryRef v49 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C500]);
  CFDictionaryRef v50 = v49;
  v93 = v41;
  int v92 = v26;
  if (v49)
  {
    CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(v49, (const void *)*MEMORY[0x263F04180]);
    if (v51)
    {
      valuePtr[0] = 0;
      CFNumberGetValue(v51, kCFNumberIntType, valuePtr);
      if (valuePtr[0] == 875704438)
      {
        __int16 v52 = 0;
        BOOL v53 = 0;
      }
      else if (valuePtr[0] == 2037741171)
      {
        BOOL v53 = 0;
        __int16 v52 = 1;
      }
      else
      {
        __int16 v52 = valuePtr[0] == 2037741158;
        BOOL v53 = 1;
      }
    }
    else
    {
      __int16 v52 = 0;
      BOOL v53 = 1;
    }
    *unsigned __int8 v41 = v52;
    CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(v50, (const void *)*MEMORY[0x263F04240]);
    CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v50, (const void *)*MEMORY[0x263F04118]);
    CFDictionaryRef v50 = 0;
    if (v54 && v55)
    {
      CFNumberRef v56 = v55;
      CFNumberGetValue(v54, kCFNumberIntType, (char *)&v102 + 4);
      CFNumberGetValue(v56, kCFNumberIntType, &v102);
      if (HIDWORD(v102) && (unsigned __int16 v57 = v102, v102))
      {
        CFDictionaryRef v50 = 0;
        v41[2] = WORD2(v102);
        v41[3] = v57;
      }
      else
      {
        uint64_t v58 = *(unsigned int *)(a2 + 168);
        if (v58)
        {
          CFDictionaryRef v50 = 0;
          CFDictionaryRef v59 = *(const __CFDictionary **)(a2 + 160);
          do
          {
            CFDictionaryRef v60 = v50;
            if (*((_DWORD *)v59 + 4) == *((_DWORD *)v94 + 92))
            {
              CFDictionaryRef v50 = v59;
              if (v60)
              {
                if (*((_DWORD *)v59 + 1) <= *((_DWORD *)v60 + 1)) {
                  CFDictionaryRef v50 = v60;
                }
                else {
                  CFDictionaryRef v50 = v59;
                }
              }
            }
            CFDictionaryRef v59 = (const __CFDictionary *)((char *)v59 + 120);
            --v58;
          }
          while (v58);
          if (v50)
          {
            v41[2] = *((_DWORD *)v50 + 1);
            v41[3] = *((_DWORD *)v50 + 2);
            v41[2064] = *((_DWORD *)v50 + 3);
          }
        }
        else
        {
          CFDictionaryRef v50 = 0;
        }
      }
    }
  }
  else
  {
    BOOL v53 = 1;
  }
  if (CVPixelBufferGetPixelFormatType(v11) == 2037741171 || CVPixelBufferGetPixelFormatType(v11) == 2037741158)
  {
    *((_WORD *)v94 + 12) = CVPixelBufferGetWidth(v11);
    *((_WORD *)v94 + 13) = CVPixelBufferGetHeight(v11);
    *((_WORD *)v94 + 200) = 1;
    *((_DWORD *)v94 + 13) = 0;
    *((_WORD *)v94 + 28) = CVPixelBufferGetWidth(v11);
    *((_WORD *)v94 + 29) = CVPixelBufferGetHeight(v11);
    *((_WORD *)v94 + 47) = CVPixelBufferGetBytesPerRow(v11);
    BOOL v53 = CVPixelBufferGetPixelFormatType(v11) != 2037741171;
  }
  CFDictionaryRef v61 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C4F8]);
  if (v61)
  {
    CFDataRef v62 = (const __CFData *)CFDictionaryGetValue(v61, (const void *)*MEMORY[0x263F2D410]);
    CFDataRef v45 = v62;
    if (v62)
    {
      BOOL v63 = v53;
      CFTypeID v64 = CFGetTypeID(v62);
      if (v64 == CFDataGetTypeID())
      {
        unint64_t v65 = CFDataGetLength(v45);
        int v66 = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 0, v101, valuePtr);
        unint64_t v67 = v111;
        if (v65 > v111) {
          unint64_t v67 = v65;
        }
        int v92 = v66;
        if (v66) {
          unint64_t v67 = v65;
        }
        int v91 = v67;
        BYTE4(v89) = 0;
        v68 = H16ISP::H16ISPCreateCVBuffer((v67 >> 4) + 1, 8u, 0, 0, 1, 0, 0.0, 64, 128, 0, SHIDWORD(v89), 0, 0, -1);
        unsigned __int8 v44 = v68;
        if (v68)
        {
          CVPixelBufferLockBaseAddress(v68, 0);
          v69 = CVPixelBufferGetIOSurface(v44);
          IOSurfaceID v90 = IOSurfaceGetID(v69);
          v70 = CVPixelBufferGetBaseAddress(v44);
          v71 = CFDataGetBytePtr(v45);
          memmove(v70, v71, v65);
          unsigned __int8 v41 = v93;
          BOOL v53 = v63;
          goto LABEL_88;
        }
      }
      else
      {
        unsigned __int8 v44 = 0;
      }
      CFDataRef v45 = 0;
    }
    else
    {
      unsigned __int8 v44 = 0;
    }
LABEL_100:
    uint64_t v8 = 4294954516;
    int v26 = v92;
    goto LABEL_38;
  }
  unsigned __int8 v44 = 0;
  IOSurfaceID v90 = 0;
  int v91 = 0;
LABEL_88:
  if (v50)
  {
    unsigned int v72 = *((_DWORD *)v50 + 1);
    unsigned int v73 = *((_DWORD *)v50 + 2);
    int v74 = *((_DWORD *)v50 + 3);
  }
  else
  {
    unsigned int v72 = v41[2];
    unsigned int v73 = v41[3];
    int v74 = v41[2064];
  }
  BYTE4(v89) = 0;
  v75 = H16ISP::H16ISPCreateCVBuffer(v72, v73, v74, 0, *v41, v53, 0.0, 64, 128, 0, SHIDWORD(v89), 0, 0, -1);
  CFDataRef v45 = v75;
  if (!v75) {
    goto LABEL_100;
  }
  v76 = CVPixelBufferGetIOSurface(v75);
  IOSurfaceID v77 = IOSurfaceGetID(v76);
  valuePtr[0] = v98;
  int v78 = CVPixelBufferGetDataSize(v11);
  int v79 = *((unsigned __int16 *)v94 + 47);
  valuePtr[1] = v78;
  valuePtr[2] = v79;
  valuePtr[3] = v96;
  valuePtr[4] = DataSize;
  int v80 = v90;
  if (v44)
  {
    int v81 = v91;
  }
  else
  {
    int v80 = -1;
    int v81 = 0;
  }
  valuePtr[5] = v77;
  int v109 = v80;
  int v110 = v81;
  if (*v41 == 1)
  {
    int BytesPerRow = CVPixelBufferGetBytesPerRow(v45);
    int Height = CVPixelBufferGetHeight(v45);
    unsigned int v84 = 0;
    int v104 = Height * BytesPerRow;
  }
  else
  {
    int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v45, 0);
    int v104 = CVPixelBufferGetHeight(v45) * BytesPerRowOfPlane;
    int v86 = CVPixelBufferGetBytesPerRowOfPlane(v45, 1uLL);
    unsigned int v84 = (CVPixelBufferGetHeight(v45) * v86) >> 1;
  }
  unsigned int v105 = v84;
  BOOL v87 = *v93 == 1;
  int v107 = *v93;
  if (v107 == 1) {
    int v88 = 262080;
  }
  else {
    int v88 = 131008;
  }
  int v106 = ((v93[2] << v87) + 63) & v88;
  int v108 = v95;
  int v26 = H16ISP::H16ISPDevice::ISP_ProcessRawImagePrepare(*(void *)(a4 + 24), valuePtr);
  if (v26) {
    uint64_t v8 = 4294954516;
  }
  else {
    uint64_t v8 = 0;
  }
LABEL_38:
  if (!v26)
  {
    *(unsigned char *)(a2 + 384) = 1;
    *(void *)(a2 + 392) = v25;
    *(void *)(a2 + 400) = v44;
    *(void *)(a2 + 408) = v11;
    *(void *)(a2 + 416) = v45;
    CFDictionaryRef v15 = cf;
    if (!cf) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  CVPixelBufferUnlockBaseAddress(v25, 0);
  CVPixelBufferRelease(v25);
  if (v44)
  {
    CVPixelBufferUnlockBaseAddress(v44, 0);
    CVPixelBufferRelease(v44);
  }
  if (v45)
  {
    CVPixelBufferUnlockBaseAddress(v45, 0);
    CVPixelBufferRelease(v45);
  }
  return v8;
}

uint64_t RawImageProcessGo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v24[1] = *MEMORY[0x263EF8340];
  CMSampleBufferRef sampleBufferOut = 0;
  if (!*(unsigned char *)(a2 + 384)) {
    return 4294954516;
  }
  if (H16ISP::H16ISPDevice::ISP_ProcessRawImageGo(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132)))
  {
    uint64_t v6 = 4294954516;
  }
  else
  {
    if (*(_DWORD *)(*(void *)(*(void *)(a4 + 24) + 4384) + 96 * *(unsigned int *)(a2 + 132) + 8))
    {
      memset(v21, 0, sizeof(v21));
      LOWORD(v21[0]) = 257;
      *(_DWORD *)((char *)v21 + 2) = 0;
      BYTE6(v21[0]) = 0;
      *(_DWORD *)((char *)v21 + 10) = 0;
      *(_DWORD *)((char *)v21 + 13) = 0;
      if (byte_26B11BAB0) {
        BYTE2(v21[1]) = 1;
      }
      if (byte_26B11BAB1) {
        BYTE3(v21[1]) = 1;
      }
      uint64_t v22 = 0;
      CVBufferSetAttachment(*(CVBufferRef *)(a2 + 416), @"RawMetaData", *(CFTypeRef *)(a2 + 392), kCVAttachmentMode_ShouldPropagate);
      v24[0] = *(void *)(a2 + 416);
      std::deque<__CVBuffer *>::deque((uint64_t)formatDescription, v24, 1);
      v7.n128_u64[0] = 0;
      H16ISP::GenerateAndAttachCoreMediaMetaDataDictionary(*(void *)(*(void *)(a4 + 24) + 88), *(void *)(a2 + 416), formatDescription, v21, v7);
      std::deque<__CVBuffer *>::~deque[abi:ne180100](formatDescription);
    }
    CFStringRef v8 = (const __CFString *)*MEMORY[0x263F2C558];
    CFTypeRef Attachment = CVBufferGetAttachment(*(CVBufferRef *)(a2 + 416), (CFStringRef)*MEMORY[0x263F2C558], 0);
    if (Attachment)
    {
      CFNumberRef v10 = *(const void **)(a2 + 424);
      if (v10) {
        CFRelease(v10);
      }
      CFRetain(Attachment);
      *(void *)(a2 + 424) = Attachment;
    }
    formatDescription[0] = 0;
    CFAllocatorRef v11 = CFGetAllocator(*(CFTypeRef *)(a2 + 16));
    CMVideoFormatDescriptionCreateForImageBuffer(v11, *(CVImageBufferRef *)(a2 + 416), formatDescription);
    CFAllocatorRef v12 = CFGetAllocator(*(CFTypeRef *)(a2 + 16));
    uint64_t v6 = CMSampleBufferCreateForImageBuffer(v12, *(CVImageBufferRef *)(a2 + 416), 1u, 0, 0, formatDescription[0], (const CMSampleTimingInfo *)(a2 + 432), &sampleBufferOut);
    FigFormatDescriptionRelease();
    if (v6)
    {
      CFNumberRef v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v13 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        RawImageProcessGo();
      }
    }
    else
    {
      if (Attachment) {
        CMSetAttachment(sampleBufferOut, v8, Attachment, 1u);
      }
      uint64_t v14 = 24;
      if (!*(unsigned char *)(a2 + 592)) {
        uint64_t v14 = 32;
      }
      uint64_t v6 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + v14), sampleBufferOut);
      if (v6)
      {
        CFDictionaryRef v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFDictionaryRef v15 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          RawImageProcessGo();
        }
      }
    }
    if (sampleBufferOut) {
      CFRelease(sampleBufferOut);
    }
  }
  CFNumberRef v16 = *(__CVBuffer **)(a2 + 408);
  if (v16)
  {
    CVPixelBufferUnlockBaseAddress(v16, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 408));
    *(void *)(a2 + 408) = 0;
  }
  int v17 = *(__CVBuffer **)(a2 + 416);
  if (v17)
  {
    CVPixelBufferUnlockBaseAddress(v17, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 416));
    *(void *)(a2 + 416) = 0;
  }
  CFTypeID v18 = *(__CVBuffer **)(a2 + 400);
  if (v18)
  {
    CVPixelBufferUnlockBaseAddress(v18, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 400));
    *(void *)(a2 + 400) = 0;
  }
  *(unsigned char *)(a2 + 384) = 0;
  return v6;
}

void sub_2468BABF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RawImageProcessEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 376) || *(unsigned char *)(a2 + 384)) {
    return 4294954516;
  }
  H16ISP::H16ISPDevice::ProcessRawStop(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132));
  if (*(unsigned char *)(a2 + 377))
  {
    *(unsigned char *)(a2 + 84) = 0;
    H16ISP::H16ISPDevice::EnableTNR(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), a2 + 84);
  }
  *(unsigned char *)(a2 + 376) = 0;
  __n128 v7 = *(__CVBuffer **)(a2 + 392);
  if (v7)
  {
    CVPixelBufferUnlockBaseAddress(v7, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 392));
    *(void *)(a2 + 392) = 0;
  }
  uint64_t result = *(void *)(a2 + 424);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    uint64_t result = 0;
    *(void *)(a2 + 424) = 0;
  }
  return result;
}

uint64_t SetAEGainConvergenceNormalizationEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  CFNumberRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (v8)
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    __int16 v14 = 0;
    CFNumberRef v10 = "H16ISPCaptureDevice: Enable AE Gain Convergence Normalization\n\n";
    CFAllocatorRef v11 = (uint8_t *)&v14;
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    __int16 v13 = 0;
    CFNumberRef v10 = "H16ISPCaptureDevice: Disable AE Gain Convergence Normalization\n\n";
    CFAllocatorRef v11 = (uint8_t *)&v13;
  }
  _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, v10, v11, 2u);
LABEL_15:
  if (H16ISP::H16ISPDevice::EnableAEGainConvergenceNormalization(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8 != 0))return 4294954516; {
  else
  }
    return 0;
}

uint64_t LockBLCNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v5 |= 0x80000000;
  }
  int v6 = H16ISP::H16ISPDevice::BLCSuspend(*(H16ISP::H16ISPDevice **)(a4 + 24), v5);
  CFTypeID v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeID v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: BLC Suspend, result=0x%08X\n\n", (uint8_t *)v9, 8u);
  }
  if (v6) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t UnlockBLCNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v5 |= 0x80000000;
  }
  int v6 = H16ISP::H16ISPDevice::BLCResume(*(H16ISP::H16ISPDevice **)(a4 + 24), v5);
  CFTypeID v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeID v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: BLC Resume, result=0x%08X\n\n", (uint8_t *)v9, 8u);
  }
  if (v6) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetDiagnosticMode(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  unsigned int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  int v5 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  uint64_t v6 = 4294954516;
  if (v5)
  {
    if (H16ISP::H16ISPFrameReceiver::setDiagnosticsMode(v5, valuePtr)) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return v6;
}

uint64_t SetImageMapParams(CFTypeRef cf, uint64_t a2)
{
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 != CFDictionaryGetTypeID()) {
      return 4294954516;
    }
  }
  CFDataRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2C3B0]);
  uint64_t v6 = (CFTypeRef *)MEMORY[0x263F2C3E0];
  if (Value)
  {
    CFTypeID v7 = Value;
    if (CFEqual((CFTypeRef)*MEMORY[0x263F2C3E0], Value))
    {
      int v8 = 0;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x263F2C3C0], v7))
    {
      int v8 = 6;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x263F2C3C8], v7))
    {
      int v8 = 7;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x263F2C3D0], v7))
    {
      int v8 = 8;
    }
    else
    {
      if (!CFEqual((CFTypeRef)*MEMORY[0x263F2C3D8], v7)) {
        return 4294954516;
      }
      int v8 = 9;
    }
    *(_DWORD *)(a2 + 556) = v8;
  }
  CFNumberRef v9 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2C3B8]);
  if (v9)
  {
    uint64_t v10 = v9;
    if (CFEqual(*v6, v9))
    {
      int v11 = 0;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x263F2C3C0], v10))
    {
      int v11 = 6;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x263F2C3C8], v10))
    {
      int v11 = 7;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x263F2C3D0], v10))
    {
      int v11 = 8;
    }
    else
    {
      if (!CFEqual((CFTypeRef)*MEMORY[0x263F2C3D8], v10)) {
        return 4294954516;
      }
      int v11 = 9;
    }
    *(_DWORD *)(a2 + 560) = v11;
  }
  CFDataRef v12 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2D970]);
  if (!v12) {
    goto LABEL_33;
  }
  CFDataRef v13 = v12;
  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 != CFDataGetTypeID() || CFDataGetLength(v13) != 36) {
    return 4294954516;
  }
  CFDictionaryRef v15 = *(const void **)(a2 + 568);
  if (v15) {
    CFRelease(v15);
  }
  *(void *)(a2 + 568) = v13;
  CFRetain(v13);
LABEL_33:
  uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2D978]);
  if (!result) {
    return result;
  }
  CFDataRef v17 = (const __CFData *)result;
  CFTypeID v18 = CFGetTypeID((CFTypeRef)result);
  if (v18 != CFDataGetTypeID() || CFDataGetLength(v17) != 36) {
    return 4294954516;
  }
  uint64_t v19 = *(const void **)(a2 + 576);
  if (v19) {
    CFRelease(v19);
  }
  *(void *)(a2 + 576) = v17;
  CFRetain(v17);
  return 0;
}

uint64_t SetAlternateOutputSize(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 674)) {
    return 4294954509;
  }
  uint64_t valuePtr = 0;
  *(void *)CFDataRef v42 = 0;
  unsigned int v7 = *(_DWORD *)(a2 + 48);
  if (v7 >= *(_DWORD *)(a2 + 168)) {
    int v8 = *(_DWORD *)(a2 + 168);
  }
  else {
    int v8 = 0;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2DA28]);
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2DA10]);
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2D8F0]);
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2D8E8]);
  if (Value) {
    BOOL v15 = v12 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    unsigned int v19 = v7 - v8;
    CFNumberGetValue(Value, kCFNumberIntType, &v42[1]);
    CFNumberGetValue(v12, kCFNumberIntType, v42);
    uint64_t v20 = *(void *)(a2 + 160);
    unsigned int v21 = *(_DWORD *)(v20 + 120 * v19 + 28);
    BOOL v22 = v42[1] <= v21 && v42[1] >= v21 >> 2;
    if (!v22) {
      return 4294954516;
    }
    uint64_t v23 = v20 + 120 * v19;
    unsigned int v25 = *(_DWORD *)(v23 + 32);
    __int16 v24 = (unsigned int *)(v23 + 32);
    unsigned int v26 = v25 >> 2;
    if (v42[0] > v25 || v42[0] < v26) {
      return 4294954516;
    }
    if (v13 && v14)
    {
      CFNumberGetValue(v13, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
      unsigned int v21 = HIDWORD(valuePtr) & 0xFFFFFFFE;
      unsigned int v29 = valuePtr & 0xFFFFFFFE;
      LODWORD(valuePtr) = valuePtr & 0xFFFFFFFE;
      HIDWORD(valuePtr) = v21;
      uint64_t v4 = 4294954516;
      if (v21 < 0x140) {
        return v4;
      }
      uint64_t v30 = *(void *)(a2 + 160);
      unsigned int v31 = *(_DWORD *)(v30 + 120 * v19 + 28);
      BOOL v22 = v31 >= v21;
      unsigned int v32 = v31 - v21;
      if (!v22) {
        return v4;
      }
      if (v29 < 0xF0) {
        return v4;
      }
      unsigned int v33 = *(_DWORD *)(v30 + 120 * v19 + 32);
      BOOL v22 = v33 >= v29;
      unsigned int v34 = v33 - v29;
      if (!v22) {
        return v4;
      }
      uint64_t v35 = v30 + 120 * v19;
      unsigned int v36 = (*(_DWORD *)(v35 + 20) + (v32 >> 1)) & 0xFFFFFFFE;
      unsigned int v37 = (*(_DWORD *)(v35 + 24) + (v34 >> 1)) & 0xFFFFFFFE;
    }
    else
    {
      HIDWORD(valuePtr) = *(_DWORD *)(v20 + 120 * v19 + 28);
      unsigned int v29 = *v24;
      LODWORD(valuePtr) = *v24;
      uint64_t v38 = v20 + 120 * v19;
      unsigned int v36 = *(_DWORD *)(v38 + 20);
      unsigned int v37 = *(_DWORD *)(v38 + 24);
    }
    int v39 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
    if (v39)
    {
      uint64_t v4 = H16ISP::H16ISPFrameReceiver::setNewOutputSize(v39);
      unsigned __int8 v40 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned __int8 v40 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v40;
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        int v44 = v4;
        _os_log_impl(&dword_24680F000, v40, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: setNewOutputSize, result=0x%08X\n\n", buf, 8u);
      }
      if (v4) {
        return 4294954516;
      }
      *(_DWORD *)(a2 + 596) = v42[1];
      *(_DWORD *)(a2 + 600) = v42[0];
      *(_DWORD *)(a2 + 612) = HIDWORD(valuePtr);
      *(_DWORD *)(a2 + 616) = valuePtr;
    }
    else
    {
      uint64_t v4 = 0;
      *(_DWORD *)(a2 + 596) = v42[1];
      *(_DWORD *)(a2 + 600) = v42[0];
      *(_DWORD *)(a2 + 612) = v21;
      *(_DWORD *)(a2 + 616) = v29;
    }
    *(_DWORD *)(a2 + 604) = v36;
    *(_DWORD *)(a2 + 608) = v37;
    return v4;
  }
  CFNumberRef v16 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  if (!v16 || H16ISP::H16ISPFrameReceiver::isNewOutputSizeChangePending(v16)) {
    return 4294954516;
  }
  uint64_t v4 = 4294954516;
  if (v13)
  {
    if (v14)
    {
      CFNumberGetValue(v13, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
      uint64_t v17 = HIDWORD(valuePtr) & 0xFFFFFFFE;
      uint64_t v18 = valuePtr & 0xFFFFFFFE;
      LODWORD(valuePtr) = valuePtr & 0xFFFFFFFE;
      HIDWORD(valuePtr) = v17;
      if (v17 >= *(_DWORD *)(a2 + 596) && v18 >= *(_DWORD *)(a2 + 600))
      {
        if (H16ISP::H16ISPDevice::SetScalerCrop(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), ((*(_DWORD *)(a2 + 620) - v17) >> 1) & 0x7FFFFFFE | ((((unint64_t)(((*(_DWORD *)(a2 + 624) - v18) >> 1) & 0x7FFFFFFE) >> 1) & 0x3FFFFFFF) << 33), v17 | (v18 << 32)))return 4294954516; {
        else
        }
          return 0;
      }
    }
  }
  return v4;
}

uint64_t SetUsePreviewBufferQueueForRawReprocessing(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 592) = v5 != 0;
  return result;
}

uint64_t SetAFPeakPredictionEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a1)
  {
    CFTypeID v7 = CFGetTypeID(a1);
    int v8 = "False";
    if (v7 == CFBooleanGetTypeID())
    {
      int v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
      int v10 = *(unsigned __int16 *)(a2 + 132);
      if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
        v10 |= 0x80000000;
      }
      if (v9) {
        int v8 = "True";
      }
      if (H16ISP::H16ISPDevice::EnableAFPeakPrediction(*(H16ISP::H16ISPDevice **)(a4 + 24), v10, v9 != 0)) {
        uint64_t v11 = 4294954516;
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 4294954516;
    }
  }
  else
  {
    uint64_t v11 = 4294954516;
    int v8 = "False";
  }
  CFNumberRef v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFNumberRef v12 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v14 = 136315138;
    BOOL v15 = v8;
    _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Enable AF Peak Prediction: %s\n\n", (uint8_t *)&v14, 0xCu);
  }
  return v11;
}

uint64_t SetAEEnabled(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v4 = cf;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    uint64_t v8 = 4294954516;
    if (v7 == CFBooleanGetTypeID())
    {
      LODWORD(v4) = CFEqual(v4, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
      if (H16ISP::H16ISPDevice::EnableAE(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (int)v4))uint64_t v8 = 4294954516; {
      else
      }
        uint64_t v8 = 0;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  else
  {
    uint64_t v8 = 4294954516;
  }
  int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = "False";
    if (v4) {
      int v10 = "True";
    }
    int v12 = 136315138;
    CFNumberRef v13 = v10;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Enable AE: %s\n\n", (uint8_t *)&v12, 0xCu);
  }
  return v8;
}

uint64_t SetAWB1stGainManual(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C330]);
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C348]);
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C340]);
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C338]);
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C328]);
  if (Value) {
    BOOL v13 = v9 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13 || v10 == 0 || v11 == 0 || v12 == 0)
  {
    uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v17 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      SetAWB1stGainManual();
    }
    return 4294954516;
  }
  CFNumberRef v19 = v12;
  int v20 = CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFB40]);
  int valuePtr = 0;
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  *(_DWORD *)unsigned int v25 = 0;
  CFNumberGetValue(v10, kCFNumberIntType, v25);
  *(_DWORD *)__int16 v24 = 0;
  CFNumberGetValue(v11, kCFNumberIntType, v24);
  *(_DWORD *)uint64_t v23 = 0;
  CFNumberGetValue(v19, kCFNumberIntType, v23);
  int v21 = H16ISP::H16ISPDevice::SetAWB1stGainManual(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v20 != 0, valuePtr, v25[0], v24[0], v23[0]);
  BOOL v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    BOOL v22 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110400;
    BOOL v28 = v20 != 0;
    __int16 v29 = 1024;
    int v30 = valuePtr;
    __int16 v31 = 1024;
    int v32 = *(_DWORD *)v25;
    __int16 v33 = 1024;
    int v34 = *(_DWORD *)v24;
    __int16 v35 = 1024;
    int v36 = *(_DWORD *)v23;
    __int16 v37 = 1024;
    int v38 = v21;
    _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: set kFigCaptureStreamProperty_AWB1stGainManual, enableFlag=%d, rGain=%d, grGain=%d, gbGain=%d, bGain=%d, result=0x%08X\n\n", buf, 0x26u);
  }
  if (v21) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetLimitAERange(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2DA80]);
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D9A0]);
  if (!Value)
  {
    int v12 = H16ISP::H16ISPDevice::SetAEMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0);
    BOOL v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      BOOL v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 67109120;
    int v21 = v12;
    uint64_t v14 = "H16ISPCaptureDevice: kFigCaptureStreamProperty_LimitAERange disabled. res=0x%08x\n\n";
    BOOL v15 = v13;
    uint32_t v16 = 8;
    goto LABEL_15;
  }
  CFNumberRef v10 = v9;
  int valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  *(_DWORD *)uint64_t v18 = 0;
  CFNumberGetValue(v10, kCFNumberIntType, v18);
  if (H16ISP::H16ISPDevice::SetPanoAELimits(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr, v18[0]))return 4294954516; {
  int v12 = H16ISP::H16ISPDevice::SetAEMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1);
  }
  uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v17 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109632;
    int v21 = valuePtr;
    __int16 v22 = 1024;
    int v23 = *(_DWORD *)v18;
    __int16 v24 = 1024;
    int v25 = v12;
    uint64_t v14 = "H16ISPCaptureDevice: kFigCaptureStreamProperty_LimitAERange enabled, upper=0x%08X, lower=0x%08X, res=0x%08x\n"
          "\n";
    BOOL v15 = v17;
    uint32_t v16 = 20;
LABEL_15:
    _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_INFO, v14, buf, v16);
  }
LABEL_16:
  if (v12) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t PeakTrackingFocusNow(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int valuePtr = 6;
  if (a1 && (CFTypeID v7 = CFGetTypeID(a1), v7 == CFDictionaryGetTypeID()))
  {
    CFNumberRef Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2DA50]);
    CFNumberRef v9 = Value;
    if (Value)
    {
      if (CFEqual(Value, (CFTypeRef)*MEMORY[0x263F2DA60])) {
        LODWORD(v9) = 1;
      }
      else {
        LODWORD(v9) = 2 * (CFEqual(v9, (CFTypeRef)*MEMORY[0x263F2DA58]) != 0);
      }
    }
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2DA48]);
    if (v10) {
      CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  int v11 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v11 |= 0x80000000;
  }
  bzero(v15, 0x14uLL);
  __int16 v16 = -31736;
  int v17 = v17 & 0x7FFF0000 | v11;
  int v18 = (int)v9;
  int v19 = valuePtr;
  int v12 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v15, 0x14u, 0, 0xFFFFFFFF);
  BOOL v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    BOOL v13 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    int v22 = (int)v9;
    __int16 v23 = 1024;
    int v24 = v12;
    _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating peak-tracking auto-focus operation, directionHint=%d, res=0x%08X\n\n", buf, 0xEu);
  }
  if (v12) {
    return 4294954516;
  }
  uint64_t result = 0;
  *(unsigned char *)(a2 + 528) = 1;
  return result;
}

uint64_t LockLTMNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v5 |= 0x80000000;
  }
  int v6 = H16ISP::H16ISPDevice::LTMUpdateSuspend(*(H16ISP::H16ISPDevice **)(a4 + 24), v5);
  CFTypeID v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeID v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: LTM Update Suspend, result=0x%08X\n\n", (uint8_t *)v9, 8u);
  }
  if (v6) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t UnlockLTMNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v5 |= 0x80000000;
  }
  int v6 = H16ISP::H16ISPDevice::LTMUpdateResume(*(H16ISP::H16ISPDevice **)(a4 + 24), v5);
  CFTypeID v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeID v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: LTM Update Resume, result=0x%08X\n\n", (uint8_t *)v9, 8u);
  }
  if (v6) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetMaxPerFrameExposureDelta(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (HIWORD(valuePtr)) {
    return 4294954516;
  }
  int v8 = H16ISP::H16ISPDevice::SetAEPanoMaxExpAdjustment(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  CFNumberRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    unsigned int v13 = valuePtr;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetMaxPerFrameExposureDelta: 0x%08X, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyMaxPerFrameExposureDelta(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int valuePtr = 0;
  if (H16ISP::H16ISPDevice::GetAEPanoMaxExpAdjustment(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &valuePtr))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopyFocusLastScanHistory(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v33 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    v34[0] = 0;
    CFMutableArrayRef v10 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
    if (!v10)
    {
      uint64_t v13 = 4294954510;
      goto LABEL_12;
    }
    CFMutableArrayRef v11 = v10;
    unsigned __int16 v32 = 0;
    if (H16ISP::H16ISPDevice::GetFocusMode(*(H16ISP::H16ISPDevice **)(v3 + 24), *(_DWORD *)(v5 + 132), &v32)|| (v32 ? (int v12 = (const void **)MEMORY[0x263F2C350]) : (int v12 = (const void **)MEMORY[0x263F2C358]), CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C380], *v12), bzero(v26, 0x8250uLL), v27 = -31730, v28 = *(_DWORD *)(v5 + 132), H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v3 + 24), v26, 0x8250u, 0, 0xFFFFFFFF)))
    {
      uint64_t v13 = 4294954516;
LABEL_9:
      CFRelease(v11);
LABEL_12:
      CFRelease(Mutable);
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_13;
    }
    HIDWORD(v33) = v29;
    CFNumberRef v15 = CFNumberCreate(0, kCFNumberIntType, (char *)&v33 + 4);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C388], v15);
    CFRelease(v15);
    if (!HIDWORD(v33))
    {
      uint64_t v13 = 4294954513;
      goto LABEL_9;
    }
    CFMutableArrayRef v16 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
    if (!v16)
    {
      uint64_t v13 = 4294954510;
      goto LABEL_9;
    }
    int v17 = v16;
    if (HIDWORD(v33))
    {
      unint64_t v18 = 0;
      do
      {
        v34[0] = (unsigned __int16)v30[v18];
        CFNumberRef v19 = CFNumberCreate(0, kCFNumberIntType, v34);
        CFArrayAppendValue(v17, v19);
        CFRelease(v19);
        ++v18;
      }
      while (v18 < HIDWORD(v33));
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C390], v17);
    CFRelease(v17);
    uint64_t v20 = 0;
    int v21 = v31;
    do
    {
      if (!v31[2052 * v20 + 2048]) {
        break;
      }
      LODWORD(v33) = ++v20;
      if (HIDWORD(v33))
      {
        unint64_t v22 = 0;
        __int16 v23 = v21;
        do
        {
          CFNumberRef v24 = CFNumberCreate(0, kCFNumberLongLongType, v23);
          CFArrayAppendValue(v11, v24);
          CFRelease(v24);
          ++v22;
          v23 += 8;
        }
        while (v22 < HIDWORD(v33));
      }
      v21 += 2052;
    }
    while (v20 != 16);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C398], v11);
    CFRelease(v11);
    CFNumberRef v25 = CFNumberCreate(0, kCFNumberIntType, &v33);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C3A0], v25);
    CFRelease(v25);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 4294954510;
  }
LABEL_13:
  *uint64_t v7 = Mutable;
  return v13;
}

uint64_t CopySphereMode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9 = 0;
  H16ISP::H16ISPDevice::GetOISMode(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v9);
  if (v9 - 1 > 0xB) {
    CFNumberRef v6 = (CFTypeRef *)MEMORY[0x263F2E328];
  }
  else {
    CFNumberRef v6 = (CFTypeRef *)qword_2651E8DD8[v9 - 1];
  }
  CFTypeRef v7 = *v6;
  CFRetain(*v6);
  *a2 = v7;
  return 0;
}

uint64_t SetMotionDataFromISPEnabled(const void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFBooleanGetTypeID()))
  {
    if (*(void *)(a2 + 136))
    {
      uint64_t v5 = 4294954612;
    }
    else
    {
      int v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
      uint64_t v5 = 0;
      *(unsigned char *)(a2 + 3674) = v9 != 0;
    }
  }
  else
  {
    uint64_t v5 = 4294954516;
  }
  CFNumberRef v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFNumberRef v6 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    CFTypeRef v7 = "True";
    if (!*(unsigned char *)(a2 + 3674)) {
      CFTypeRef v7 = "False";
    }
    int v10 = 136315394;
    CFMutableArrayRef v11 = v7;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetMotionDataFromISPEnabled: %s (err=%d)\n\n", (uint8_t *)&v10, 0x12u);
  }
  return v5;
}

uint64_t SetVideoStabilizationISPDebugDataEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1 && (CFTypeID v7 = CFGetTypeID(a1), v7 == CFBooleanGetTypeID()))
  {
    if (*(void *)(a2 + 136))
    {
      BOOL v8 = 0;
      uint64_t v9 = 4294954612;
    }
    else
    {
      int v13 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
      BOOL v8 = v13 != 0;
      uint64_t v9 = 4294954516;
      if (!H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 16, v8))
      {
        if (H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 18, v13 != 0))uint64_t v9 = 4294954516; {
        else
        }
          uint64_t v9 = 0;
      }
    }
  }
  else
  {
    BOOL v8 = 0;
    uint64_t v9 = 4294954516;
  }
  int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v10 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    CFMutableArrayRef v11 = "False";
    if (v8) {
      CFMutableArrayRef v11 = "True";
    }
    int v14 = 136315394;
    CFNumberRef v15 = v11;
    __int16 v16 = 1024;
    int v17 = v9;
    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetVideoStabilizationISPDebugDataEnabled: %s (err=%d)\n\n", (uint8_t *)&v14, 0x12u);
  }
  return v9;
}

uint64_t SetMaxFrameCoalescingDuration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  memset(&v13, 0, sizeof(v13));
  CMTimeMakeFromDictionary(&v13, (CFDictionaryRef)a1);
  CMTime v12 = v13;
  int v8 = (CMTimeGetSeconds(&v12) * 1000000.0);
  int v9 = H16ISP::H16ISPDevice::SetTargetToHostFrameDeliveryCadenceInMicroSeconds(*(H16ISP::H16ISPDevice **)(a4 + 24), v8);
  int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v10 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    int v15 = v8;
    __int16 v16 = 1024;
    int v17 = v9;
    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetMaxFrameCoalescingDuration (in MicroSeconds): %d result=0x%08X\n\n", buf, 0xEu);
  }
  if (v9) {
    return 4294954516;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 676) = v8;
  return result;
}

uint64_t CopyMaxFrameCoalescingDuration(uint64_t a1, CFDictionaryRef *a2, uint64_t a3)
{
  CMTimeMake(&time, *(unsigned int *)(a3 + 676), 1000000);
  *a2 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x263EFFB08]);
  return 0;
}

uint64_t SetContinuousAutoFocusNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v5 |= 0x80000000;
  }
  int v6 = H16ISP::H16ISPDevice::EnableContinuousFocus(*(H16ISP::H16ISPDevice **)(a4 + 24), v5, 1, *(unsigned char *)(a2 + 192));
  CFTypeID v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeID v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetContinuousAutoFocusNow result=0x%08X\n\n", (uint8_t *)v9, 8u);
  }
  if (v6) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetLockAFNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v5 |= 0x80000000;
  }
  int v6 = H16ISP::H16ISPDevice::EnableContinuousFocus(*(H16ISP::H16ISPDevice **)(a4 + 24), v5, 0, 0);
  CFTypeID v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeID v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetLockAFNow result=0x%08X\n\n", (uint8_t *)v9, 8u);
  }
  if (v6) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetManualWhiteBalanceGain(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v22 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CC48]);
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CC40]);
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CC38]);
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C370]);
  BOOL v12 = !Value || v9 == 0;
  if (v12 || v10 == 0) {
    return 4294954516;
  }
  CFNumberRef v15 = v11;
  int valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  int v20 = 0;
  CFNumberGetValue(v9, kCFNumberIntType, &v20);
  unsigned int v19 = 0;
  CFNumberGetValue(v10, kCFNumberIntType, &v19);
  if (v15)
  {
    CFNumberGetValue(v15, kCFNumberSInt32Type, &v22);
    int v16 = v22;
  }
  else
  {
    int v16 = 0;
  }
  int v17 = H16ISP::H16ISPDevice::SetAWBManualGain(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr, v20, v19, v16);
  uint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v18 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110144;
    int v24 = valuePtr;
    __int16 v25 = 1024;
    int v26 = v20;
    __int16 v27 = 1024;
    unsigned int v28 = v19;
    __int16 v29 = 1024;
    int v30 = v22;
    __int16 v31 = 1024;
    int v32 = v17;
    _os_log_impl(&dword_24680F000, v18, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetAWBManualGain, red=0x%08X, green=0x%08X, blue=0x%08X, tag=0x%08X, result=0x%08X\n\n", buf, 0x20u);
  }
  if (v17) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetDebugHallDataFromISPEnabled(const void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFBooleanGetTypeID()))
  {
    if (*(void *)(a2 + 136))
    {
      uint64_t v5 = 4294954612;
    }
    else
    {
      int v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
      uint64_t v5 = 0;
      *(unsigned char *)(a2 + 3676) = v9 != 0;
    }
  }
  else
  {
    uint64_t v5 = 4294954516;
  }
  int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v6 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    CFTypeID v7 = "True";
    if (!*(unsigned char *)(a2 + 3676)) {
      CFTypeID v7 = "False";
    }
    int v10 = 136315394;
    CFNumberRef v11 = v7;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetDebugHallDataFromISPEnabled: %s (err=%d)\n\n", (uint8_t *)&v10, 0x12u);
  }
  return v5;
}

uint64_t SetDebugMotionDataFromISPEnabled(const void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFBooleanGetTypeID()))
  {
    if (*(void *)(a2 + 136))
    {
      uint64_t v5 = 4294954612;
    }
    else
    {
      int v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
      uint64_t v5 = 0;
      *(unsigned char *)(a2 + 3675) = v9 != 0;
    }
  }
  else
  {
    uint64_t v5 = 4294954516;
  }
  int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v6 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    CFTypeID v7 = "True";
    if (!*(unsigned char *)(a2 + 3675)) {
      CFTypeID v7 = "False";
    }
    int v10 = 136315394;
    CFNumberRef v11 = v7;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetDebugMotionDataFromISPEnabled: %s (err=%d)\n\n", (uint8_t *)&v10, 0x12u);
  }
  return v5;
}

uint64_t SetFaceDetectionConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 81) != 1) {
    return 4294954513;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C9E0]);
  int v9 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C9D8]);
  int v10 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C9F0]);
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C9E8]);
  *(_DWORD *)(a2 + 3696) = 0;
  __int16 v12 = (CFTypeRef *)MEMORY[0x263EFFB40];
  if (Value && CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFB40])) {
    *(_DWORD *)(a2 + 3696) |= 4u;
  }
  if (v9 && CFEqual(v9, *v12)) {
    *(_DWORD *)(a2 + 3696) |= 2u;
  }
  if (v10 && CFEqual(v10, *v12)) {
    *(_DWORD *)(a2 + 3696) |= 1u;
  }
  if (v11 && (CFTypeID v13 = CFGetTypeID(v11), v13 == CFNumberGetTypeID()))
  {
    LODWORD(v25) = 0;
    CFNumberGetValue(v11, kCFNumberSInt32Type, &v25);
    unsigned int v14 = v25;
    if ((v25 & 0x80000000) != 0)
    {
      unsigned int v14 = 0;
    }
    else
    {
      uint64_t v15 = 3764;
      if (!*(void *)(a2 + 136)) {
        uint64_t v15 = 3756;
      }
      unsigned int v16 = *(_DWORD *)(a2 + v15);
      if (v25 >= v16) {
        unsigned int v14 = v16;
      }
    }
  }
  else
  {
    unsigned int v14 = *(void *)(a2 + 136) ? *(_DWORD *)(a2 + 3764) : *(_DWORD *)(a2 + 3756);
  }
  *(_DWORD *)(a2 + 3760) = v14;
  uint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v18 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = *(_DWORD *)(a2 + 3696);
    int v20 = *(_DWORD *)(a2 + 3760);
    LODWORD(v25) = 67109376;
    HIDWORD(v25) = v19;
    __int16 v26 = 1024;
    int v27 = v20;
    _os_log_impl(&dword_24680F000, v18, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetFaceDetectionConfiguration, fdFeatureFlags=%d, maxFaces=%d\n\n", (uint8_t *)&v25, 0xEu);
  }
  if (!*(void *)(a2 + 136) || *(unsigned char *)(a2 + 81) != 1) {
    return 0;
  }
  int v21 = H16ISP::H16ISPDevice::ReconfigureFaceDetect(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(a2 + 3696), *(_DWORD *)(a2 + 3760));
  int v22 = *(void **)(a2 + 4240);
  if (v22)
  {
    __int16 v25 = 0;
    H16ISP::H16ISPFilterGraphManager::GetNode(v22, 4, &v25);
    if (v25)
    {
      if (*(unsigned char *)(a2 + 3672)) {
        char v23 = 1;
      }
      else {
        char v23 = *(unsigned char *)(a2 + 3675) != 0;
      }
      char v24 = *(unsigned char *)(a2 + 3673) || *(unsigned char *)(a2 + 3674) || *(unsigned char *)(a2 + 3676) != 0;
      SetOptionsForMetadataNode((uint64_t)v25, a4, a2, v23, v24);
    }
  }
  if (v21) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetZoomFactor(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  float valuePtr = 1.0;
  if (LOBYTE(gCaptureDeviceCFPrefs[44 * *(unsigned int *)(a2 + 132) + 187])) {
    return 0;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, &valuePtr);
  uint64_t v9 = 0;
  float v10 = valuePtr;
  do
  {
    *(float *)(a2 + 3684 + v9) = v10;
    v9 += 4;
  }
  while (v9 != 12);
  CFArrayRef v11 = *(const __CFArray **)(a2 + 3888);
  if (v11 && CFArrayGetCount(v11))
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 3888), v12);
      FigCaptureStreamGetFigBaseObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(DerivedStorage + 132), 1919251319))
      {
        if (*(void *)(a2 + 136)) {
          int v13 = H16ISP::H16ISPDevice::SetZoomFactor(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(DerivedStorage + 132), vcvts_n_s32_f32(valuePtr, 0xAuLL));
        }
        float valuePtr = valuePtr * 0.5;
        if (valuePtr < 1.0) {
          float valuePtr = 1.0;
        }
      }
      ++v12;
    }
    while (v12 < CFArrayGetCount(*(CFArrayRef *)(a2 + 3888)));
  }
  else
  {
    int v13 = 0;
  }
  if (*(void *)(a2 + 136))
  {
    int v15 = *(unsigned __int16 *)(a2 + 132);
    if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
      v15 |= 0x80000000;
    }
    int v13 = H16ISP::H16ISPDevice::SetZoomFactor(*(H16ISP::H16ISPDevice **)(a4 + 24), v15, vcvts_n_s32_f32(valuePtr, 0xAuLL));
  }
  unsigned int v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v16 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    double v19 = valuePtr;
    __int16 v20 = 1024;
    int v21 = v13;
    _os_log_impl(&dword_24680F000, v16, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetZoomFactor: %10.5f, result=0x%08X\n\n", buf, 0x12u);
  }
  if (v13) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyZoomFactor(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)unint64_t v12 = 0;
  if (H16ISP::H16ISPDevice::GetCurrentZoomFactor(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v12[1], v12))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    unsigned int v8 = v12[1];
    if (v12[1] <= v12[0]) {
      unsigned int v8 = v12[0];
    }
    float v9 = (double)v8 * 0.0009765625;
    float valuePtr = v9;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopyWhiteBalanceCalibrations(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  H16ISP::H16ISPDevice::GetAWBCalibrationMatrix(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), (uint64_t)valuePtr);
  if (v7)
  {
    CFMutableDictionaryRef Mutable = 0;
LABEL_3:
    uint64_t result = 4294954513;
    goto LABEL_4;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (!Mutable) {
    goto LABEL_3;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef v11 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  unint64_t v12 = (const void **)MEMORY[0x263F2EA70];
  if (v11)
  {
    int v13 = v11;
    CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v14)
    {
      CFNumberRef v15 = v14;
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x263F2EA78], v14);
      CFRelease(v15);
    }
    for (uint64_t i = 0; i != 36; i += 4)
    {
      float v17 = (double)*(int *)&v26[i + 4] * 0.000244140625;
      *(float *)&bytes[i] = v17;
    }
    CFDataRef v18 = CFDataCreate(0, bytes, 36);
    CFDictionarySetValue(v13, *v12, v18);
    CFRelease(v18);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
  }
  uint64_t result = (uint64_t)CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (result)
  {
    double v19 = (__CFDictionary *)result;
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt32Type, v26);
    if (v20)
    {
      CFNumberRef v21 = v20;
      CFDictionaryAddValue(v19, (const void *)*MEMORY[0x263F2EA78], v20);
      CFRelease(v21);
    }
    for (uint64_t j = 0; j != 36; j += 4)
    {
      float v23 = (double)*(int *)&v26[j + 40] * 0.000244140625;
      *(float *)&bytes[j] = v23;
    }
    CFDataRef v24 = CFDataCreate(0, bytes, 36);
    CFDictionarySetValue(v19, *v12, v24);
    CFRelease(v24);
    CFArrayAppendValue(Mutable, v19);
    CFRelease(v19);
    uint64_t result = 0;
  }
LABEL_4:
  *a2 = Mutable;
  return result;
}

uint64_t CopyWhiteBalanceGain(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v14, 0x18uLL);
  __int16 v15 = -31988;
  int v16 = *(_DWORD *)(a3 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v14, 0x18u, 0, 0xFFFFFFFF))
  {
    *a2 = 0;
    return 4294954513;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      int valuePtr = v17;
      CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2EA90], v10);
      CFRelease(v10);
      int valuePtr = v18;
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2EA88], v11);
      CFRelease(v11);
      int valuePtr = v19;
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2EA80], v12);
      CFRelease(v12);
    }
    uint64_t result = 0;
    *a2 = Mutable;
  }
  return result;
}

uint64_t SetVideoStabilizationISPOutputVectorsEnabled(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v4 = cf;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!cf) {
    goto LABEL_6;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFBooleanGetTypeID())
  {
    LODWORD(v4) = 0;
LABEL_6:
    uint64_t v8 = 4294954516;
    goto LABEL_7;
  }
  if (*(void *)(a2 + 136))
  {
    LODWORD(v4) = 0;
    uint64_t v8 = 4294954612;
  }
  else
  {
    LODWORD(v4) = CFEqual(v4, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    if (H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 20, (__int16)v4))uint64_t v8 = 4294954516; {
    else
    }
      uint64_t v8 = 0;
  }
LABEL_7:
  float v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    float v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    CFNumberRef v10 = "False";
    if (v4) {
      CFNumberRef v10 = "True";
    }
    int v12 = 136315394;
    int v13 = v10;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetVideoStabilizationISPOutputVectorsEnabled: %s (err=%d)\n\n", (uint8_t *)&v12, 0x12u);
  }
  return v8;
}

uint64_t CopyFocalLength(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6 = *(H16ISP::H16ISPDevice **)(a5 + 24);
  unsigned int v7 = *(_DWORD *)(a3 + 132);
  if (*(_DWORD *)(*((void *)v6 + 548) + 96 * v7 + 8))
  {
    OpticalEffectiveFocalsize_t Length = H16ISP::H16ISPDevice::ISP_GetOpticalEffectiveFocalLength(v6, v7);
    double valuePtr = OpticalEffectiveFocalLength;
    if (OpticalEffectiveFocalLength <= 0.0)
    {
      CFNumberRef v9 = 0;
      uint64_t result = 4294954513;
    }
    else
    {
      CFNumberRef v9 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
      uint64_t result = 0;
    }
    *a2 = v9;
  }
  else
  {
    *a2 = 0;
    return 4294954513;
  }
  return result;
}

uint64_t CopyPixelSize(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = *(H16ISP::H16ISPDevice **)(a5 + 24);
  unsigned int v8 = *(_DWORD *)(a3 + 132);
  if (*(_DWORD *)(*((void *)v7 + 548) + 96 * v8 + 8))
  {
    float OpticalPixelSize = H16ISP::H16ISPDevice::ISP_GetOpticalPixelSize(v7, v8);
    double valuePtr = OpticalPixelSize;
    if (OpticalPixelSize <= 0.0)
    {
      CFNumberRef v10 = 0;
      uint64_t result = 4294954513;
    }
    else
    {
      CFNumberRef v10 = CFNumberCreate(a1, kCFNumberDoubleType, &valuePtr);
      uint64_t result = 0;
    }
    *a2 = v10;
  }
  else
  {
    *a2 = 0;
    return 4294954513;
  }
  return result;
}

uint64_t CopyLensFNumber(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = *(H16ISP::H16ISPDevice **)(a5 + 24);
  unsigned int v8 = *(_DWORD *)(a3 + 132);
  if (*(_DWORD *)(*((void *)v7 + 548) + 96 * v8 + 8))
  {
    float OpticalfNumber = H16ISP::H16ISPDevice::ISP_GetOpticalfNumber(v7, v8);
    double valuePtr = OpticalfNumber;
    if (OpticalfNumber <= 0.0)
    {
      CFNumberRef v10 = 0;
      uint64_t result = 4294954513;
    }
    else
    {
      CFNumberRef v10 = CFNumberCreate(a1, kCFNumberDoubleType, &valuePtr);
      uint64_t result = 0;
    }
    *a2 = v10;
  }
  else
  {
    *a2 = 0;
    return 4294954513;
  }
  return result;
}

uint64_t CopyMultipleOutputSupportEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  CFTypeRef v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 674)) {
    CFTypeRef v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t CopyVideoOutputsEnabled(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), 1785950322);
  if (*(unsigned char *)(a3 + 674))
  {
    BOOL v9 = isSensorType;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFNumberRef v11 = Mutable;
    if (Mutable)
    {
      int v12 = (const void **)MEMORY[0x263EFFB38];
      int v13 = (const void *)*MEMORY[0x263EFFB38];
      __int16 v14 = (const void **)MEMORY[0x263EFFB40];
      int v15 = (const void *)*MEMORY[0x263EFFB40];
      if (*(unsigned char *)(a3 + 680)) {
        uint64_t v16 = (const void *)*MEMORY[0x263EFFB40];
      }
      else {
        uint64_t v16 = (const void *)*MEMORY[0x263EFFB38];
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E918], v16);
      if (*(unsigned char *)(a3 + 880)) {
        int v17 = v15;
      }
      else {
        int v17 = v13;
      }
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E928], v17);
      if (*(unsigned char *)(a3 + 1080)) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E900], v18);
      if (*(unsigned char *)(a3 + 1280)) {
        int v19 = v15;
      }
      else {
        int v19 = v13;
      }
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E930], v19);
      if (*(unsigned char *)(a3 + 1480)) {
        CFNumberRef v20 = v15;
      }
      else {
        CFNumberRef v20 = v13;
      }
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E938], v20);
      if (ConfigSupportsContextSwitchCaptures(a3, a5, 0, 0))
      {
        if (*(unsigned char *)(a3 + 1680)) {
          CFNumberRef v21 = v14;
        }
        else {
          CFNumberRef v21 = v12;
        }
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E940], *v21);
      }
      if (*(unsigned char *)(a3 + 1880)) {
        uint64_t v22 = v14;
      }
      else {
        uint64_t v22 = v12;
      }
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E8F8], *v22);
      if (*(unsigned char *)(a3 + 3784)) {
        int v23 = 1;
      }
      else {
        int v23 = v9;
      }
      if (v23 == 1)
      {
        if (*(unsigned char *)(a3 + 2080)) {
          CFDataRef v24 = v14;
        }
        else {
          CFDataRef v24 = v12;
        }
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E920], *v24);
      }
      if (*(unsigned char *)(a3 + 2280)) {
        __int16 v25 = v15;
      }
      else {
        __int16 v25 = v13;
      }
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E948], v25);
      if (*(unsigned char *)(a3 + 2480)) {
        __int16 v26 = v15;
      }
      else {
        __int16 v26 = v13;
      }
      CFDictionarySetValue(v11, @"VisPipe", v26);
      if (v9)
      {
        if (*(unsigned char *)(a3 + 3608)) {
          int v27 = v14;
        }
        else {
          int v27 = v12;
        }
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E910], *v27);
      }
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = 4294954510;
    }
  }
  else
  {
    CFNumberRef v11 = 0;
    uint64_t result = 4294954509;
  }
  *a2 = v11;
  return result;
}

uint64_t CopyGeometricDistortionCorrectedRects(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v8 = a3 + 132;
  if (!H16ISP::H16ISPDevice::isSensorType(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), 1919251319)
    && !H16ISP::H16ISPDevice::isSensorType(*(void *)(a5 + 24), *(_DWORD *)v8, 1718776695))
  {
    uint64_t v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v28 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      CopyGeometricDistortionCorrectedRects();
    }
    return 4294954516;
  }
  unsigned int v9 = *(_DWORD *)(a3 + 48);
  unsigned int v10 = *(_DWORD *)(a3 + 168);
  if (v9 < v10) {
    unsigned int v10 = 0;
  }
  unsigned int v11 = v9 - v10;
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), *(_DWORD *)(*(void *)(a3 + 160) + 120 * (v9 - v10) + 16), v41, v50))
  {
    int v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      CopyGeometricDistortionCorrectedRects(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    return 4294954516;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  memmove(__dst, (const void *)(*(void *)(a3 + 160) + 120 * v11), 0x78uLL);
  int32x4_t v39 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(v8 + 580)), (int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(v8 + 596)));
  uint64_t v38 = *(void *)(v8 + 568);
  bzero(&v40, 0x10uLL);
  int GDCBesOutputValidRect = H16ISP::H16ISPDevice::ISP_GetGDCBesOutputValidRect(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), (uint64_t)__dst, v41, &v40, *(float *)(a3 + 756));
  if (GDCBesOutputValidRect)
  {
    int v24 = GDCBesOutputValidRect;
    __int16 v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v25 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
    }
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      return 4294954516;
    }
    unsigned int v26 = *(_DWORD *)v8;
    *(_DWORD *)buf = 136315906;
    unsigned __int8 v43 = "CopyGeometricDistortionCorrectedRects";
    __int16 v44 = 1024;
    unsigned int v45 = v26;
    __int16 v46 = 1024;
    unsigned int v47 = v11;
    __int16 v48 = 1024;
    int v49 = v24;
    int v27 = "%s - Querying sCIspCmdChBESOutputValidRect for PrimaryScalarOutput for ch %d preset %d error 0x%08X\n";
    goto LABEL_27;
  }
  v52.origin.x = (double)(int)v40;
  v52.origin.y = (double)SDWORD1(v40);
  LODWORD(v23) = HIDWORD(v40);
  LODWORD(v22) = DWORD2(v40);
  v52.size.width = (double)v22;
  v52.size.height = (double)v23;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v52);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E918], DictionaryRepresentation);
  CFRelease(DictionaryRepresentation);
  memmove(__dst, (const void *)(*(void *)(a3 + 160) + 120 * v11), 0x78uLL);
  int32x4_t v39 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(a3 + 1312)), (int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(a3 + 1328)));
  uint64_t v38 = *(void *)(v8 + 1168);
  bzero(&v40, 0x10uLL);
  int v30 = H16ISP::H16ISPDevice::ISP_GetGDCBesOutputValidRect(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), (uint64_t)__dst, v41, &v40, *(float *)(a3 + 1356));
  if (!v30)
  {
    v53.origin.x = (double)(int)v40;
    v53.origin.y = (double)SDWORD1(v40);
    LODWORD(v32) = HIDWORD(v40);
    LODWORD(v31) = DWORD2(v40);
    v53.size.width = (double)v31;
    v53.size.height = (double)v32;
    CFDictionaryRef v35 = CGRectCreateDictionaryRepresentation(v53);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E930], v35);
    CFRelease(v35);
    uint64_t result = 0;
    *a2 = Mutable;
    return result;
  }
  int v33 = v30;
  __int16 v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    __int16 v25 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    unsigned int v36 = *(_DWORD *)v8;
    *(_DWORD *)buf = 136315906;
    unsigned __int8 v43 = "CopyGeometricDistortionCorrectedRects";
    __int16 v44 = 1024;
    unsigned int v45 = v36;
    __int16 v46 = 1024;
    unsigned int v47 = v11;
    __int16 v48 = 1024;
    int v49 = v33;
    int v27 = "%s - Querying sCIspCmdChBESOutputValidRect for StillImageOutput for ch %d preset %d error 0x%08X\n";
LABEL_27:
    _os_log_error_impl(&dword_24680F000, v25, OS_LOG_TYPE_ERROR, v27, buf, 0x1Eu);
  }
  return 4294954516;
}

uint64_t CopyDecouplePrimaryScalerFromStreaming(uint64_t a1, void *a2, uint64_t a3)
{
  CFTypeRef v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 3726)) {
    CFTypeRef v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t CopyVibeMitigationInfo(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 4294954516;
  if (a3 && a5)
  {
    if (*(_DWORD *)(a3 + 132) <= 5u)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      unsigned int v10 = Mutable;
      if (Mutable)
      {
        if (*(_DWORD *)(*(void *)(*(void *)(a5 + 24) + 4384) + 96 * *(unsigned int *)(a3 + 132) + 36)) {
          unsigned int v11 = (const void **)MEMORY[0x263EFFB40];
        }
        else {
          unsigned int v11 = (const void **)MEMORY[0x263EFFB38];
        }
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F2E778], *v11);
        uint64_t result = 0;
      }
      else
      {
        uint64_t result = 4294954510;
      }
      *a2 = v10;
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t SetVibeMitigationEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136) && CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]))
  {
    uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      SetVibeMitigationEnabled();
    }
    return 4294954612;
  }
  else
  {
    char v10 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
    *(unsigned char *)(a2 + 3794) = v10;
    uint64_t result = H16ISP::H16ISPDevice::EnableVibeMitigation(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v10);
    if (result)
    {
      unsigned int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned int v11 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        SetVibeMitigationEnabled();
      }
      return 4294954514;
    }
  }
  return result;
}

uint64_t CopySupportedColorSpaces(uint64_t a1, __CFArray **a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v8 = *(_OWORD *)"";
  uint64_t v9 = 0x500000004;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    for (uint64_t i = 0; i != 24; i += 4)
    {
      CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, (char *)&v8 + i);
      if (!v5) {
        break;
      }
      CFNumberRef v6 = v5;
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v6);
    }
    if (CFArrayGetCount(Mutable) == 6) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 4294954510;
    }
  }
  else
  {
    uint64_t result = 4294954510;
  }
  *a2 = Mutable;
  return result;
}

uint64_t CopyColorSpace(uint64_t a1, CFNumberRef *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 3916);
  if (v3 == 2) {
    goto LABEL_11;
  }
  if (v3 == 1)
  {
    int v4 = *(_DWORD *)(a3 + 3920);
    if (v4 == 3)
    {
      int v3 = 5;
    }
    else if (v4 == 1)
    {
      if (*(unsigned char *)(a3 + 3928)) {
        int v3 = 4;
      }
      else {
        int v3 = 3;
      }
    }
    else
    {
      int v3 = 1;
    }
LABEL_11:
    int valuePtr = v3;
    goto LABEL_12;
  }
  int valuePtr = 0;
LABEL_12:
  *a2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  return 0;
}

uint64_t CopyAutoFocusPositionSensor(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = (void *)MEMORY[0x263EFFB40];
  if (!*(_DWORD *)(a3 + 652) && !*(_DWORD *)(a3 + 656)) {
    int v3 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v3;
  return 0;
}

uint64_t SetPDEStreaming(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  int v8 = valuePtr;
  *(_DWORD *)(a2 + 3936) = valuePtr;
  H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 44, v8 != 0);
  return 0;
}

uint64_t CopyAPSMode(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v14 = 0;
  if (H16ISP::H16ISPDevice::GetAPSMode(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v14))
  {
    CFTypeID v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      CopyAPSMode();
    }
LABEL_6:
    CFNumberRef v8 = 0;
    uint64_t v9 = 4294954514;
  }
  else
  {
    switch(v14)
    {
      case 0:
        int valuePtr = 0;
        goto LABEL_22;
      case 1:
        int v11 = 1;
        goto LABEL_21;
      case 2:
        int v11 = 2;
        goto LABEL_21;
      case 3:
        int v11 = 3;
        goto LABEL_21;
      case 4:
        int v11 = 4;
        goto LABEL_21;
      case 5:
        int v11 = 5;
        goto LABEL_21;
      case 6:
        int v11 = 6;
        goto LABEL_21;
      case 7:
        int v11 = 7;
        goto LABEL_21;
      case 8:
        int v11 = 8;
LABEL_21:
        int valuePtr = v11;
LABEL_22:
        CFNumberRef v8 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
        uint64_t v9 = 0;
        break;
      default:
        uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v10 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          CopyAPSMode();
        }
        goto LABEL_6;
    }
  }
  *a2 = v8;
  return v9;
}

uint64_t SetAFCalibrationData(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 136))
  {
    int v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetAFCalibrationData();
    }
    return 4294954612;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 != CFDataGetTypeID()) {
    return 4294954516;
  }
  if (CFDataGetLength((CFDataRef)cf) != 64)
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      SetAFCalibrationData();
    }
    return 4294954516;
  }
  bzero(v14, 0x40uLL);
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  v14[0] = *(_WORD *)BytePtr;
  if (v14[0])
  {
    if (v14[0] != 1) {
      goto LABEL_21;
    }
    long long v15 = *(_OWORD *)(BytePtr + 4);
    int v16 = *((_DWORD *)BytePtr + 5);
    int v20 = *((_DWORD *)BytePtr + 11);
    long long v17 = *((_OWORD *)BytePtr + 3);
  }
  else
  {
    long long v15 = *(_OWORD *)(BytePtr + 4);
    int v16 = *((_DWORD *)BytePtr + 5);
    int v20 = *((_DWORD *)BytePtr + 11);
  }
  long long v12 = *(_OWORD *)(BytePtr + 24);
  __int16 v19 = *((_WORD *)BytePtr + 20);
  long long v18 = v12;
LABEL_21:
  uint64_t result = H16ISP::H16ISPDevice::SetAFIdentificationCalibration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (long long *)v14);
  if (result)
  {
    uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetAFCalibrationData();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyAFCalibrationData(const __CFAllocator *a1, CFDataRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(*(void *)(a5 + 24) + 4384);
  if (GetNumberOfActiveChannels(*(const __CFArray **)(a5 + 120)))
  {
    uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      CopyAFCalibrationData();
    }
LABEL_28:
    CFDataRef v22 = 0;
    uint64_t v23 = 4294954514;
    goto LABEL_29;
  }
  bzero(bytes, 0x40uLL);
  unsigned int v11 = *(_DWORD *)(a3 + 132);
  int v12 = *(_DWORD *)(v9 + 96 * v11 + 60);
  unint64_t v13 = *(unsigned int *)(a5 + 112);
  if (v13)
  {
    unint64_t v14 = 0;
    long long v15 = (_DWORD *)(v9 + 60);
    do
    {
      if (*(v15 - 13) && (v12 || v14 == *(_DWORD *)(a3 + 132)) && v12 == *v15)
      {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a5 + 24), v14, 1u, 0);
        unint64_t v13 = *(unsigned int *)(a5 + 112);
      }
      v15 += 24;
      ++v14;
    }
    while (v14 < v13);
    unsigned int v11 = *(_DWORD *)(a3 + 132);
  }
  H16ISP::H16ISPDevice::RunAFIdentificationCalibration(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, &v33);
  int v17 = v16;
  unint64_t v18 = *(unsigned int *)(a5 + 112);
  if (v18)
  {
    unint64_t v19 = 0;
    int v20 = (_DWORD *)(v9 + 60);
    do
    {
      if (*(v20 - 13) && (v12 || v19 == *(_DWORD *)(a3 + 132)) && v12 == *v20)
      {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a5 + 24), v19, 0, 0);
        unint64_t v18 = *(unsigned int *)(a5 + 112);
      }
      v20 += 24;
      ++v19;
    }
    while (v19 < v18);
  }
  if (v17)
  {
    uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      CopyAFCalibrationData();
    }
    goto LABEL_28;
  }
  *(_WORD *)bytes = v33;
  if (v33)
  {
    if (v33 != 1) {
      goto LABEL_35;
    }
    long long v27 = v34;
    int v28 = v35;
    int v31 = v39;
    long long v32 = v36;
  }
  else
  {
    long long v27 = v34;
    int v28 = v35;
    int v31 = v39;
  }
  long long v29 = v37;
  __int16 v30 = v38;
LABEL_35:
  CFDataRef v22 = CFDataCreate(a1, bytes, 64);
  if (v22)
  {
    uint64_t v23 = 0;
  }
  else
  {
    __int16 v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v25 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      CopyAFCalibrationData();
    }
    CFDataRef v22 = 0;
    uint64_t v23 = 4294954510;
  }
LABEL_29:
  *a2 = v22;
  return v23;
}

uint64_t SetSphereCalibrationData(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 136))
  {
    int v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetSphereCalibrationData();
    }
    return 4294954612;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 != CFDataGetTypeID()) {
    return 4294954516;
  }
  if (CFDataGetLength((CFDataRef)cf) != 68)
  {
    unint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetSphereCalibrationData();
    }
    return 4294954516;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  bzero(v14, 0x44uLL);
  v14[0] = *(_WORD *)BytePtr;
  long long v15 = *(_OWORD *)(BytePtr + 4);
  long long v16 = *(_OWORD *)(BytePtr + 20);
  uint64_t v17 = *(void *)(BytePtr + 36);
  int v20 = *((_DWORD *)BytePtr + 16);
  long long v11 = *(_OWORD *)(BytePtr + 44);
  __int16 v19 = *((_WORD *)BytePtr + 30);
  long long v18 = v11;
  uint64_t result = H16ISP::H16ISPDevice::SetOISIdentificationCalibration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (long long *)v14);
  if (result)
  {
    int v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      SetSphereCalibrationData();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopySphereCalibrationData(const __CFAllocator *a1, CFDataRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(*(void *)(a5 + 24) + 4384);
  if (GetNumberOfActiveChannels(*(const __CFArray **)(a5 + 120)))
  {
    uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      CopySphereCalibrationData();
    }
LABEL_28:
    CFDataRef v22 = 0;
    uint64_t v23 = 4294954514;
    goto LABEL_29;
  }
  bzero(v26, 0x44uLL);
  unsigned int v11 = *(_DWORD *)(a3 + 132);
  int v12 = *(_DWORD *)(v9 + 96 * v11 + 60);
  unint64_t v13 = *(unsigned int *)(a5 + 112);
  if (v13)
  {
    unint64_t v14 = 0;
    long long v15 = (_DWORD *)(v9 + 60);
    do
    {
      if (*(v15 - 13) && (v12 || v14 == *(_DWORD *)(a3 + 132)) && v12 == *v15)
      {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a5 + 24), v14, 1u, 0);
        unint64_t v13 = *(unsigned int *)(a5 + 112);
      }
      v15 += 24;
      ++v14;
    }
    while (v14 < v13);
    unsigned int v11 = *(_DWORD *)(a3 + 132);
  }
  H16ISP::H16ISPDevice::RunOISIdentificationCalibration(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, (uint64_t)&v33);
  int v17 = v16;
  unint64_t v18 = *(unsigned int *)(a5 + 112);
  if (v18)
  {
    unint64_t v19 = 0;
    int v20 = (_DWORD *)(v9 + 60);
    do
    {
      if (*(v20 - 13) && (v12 || v19 == *(_DWORD *)(a3 + 132)) && v12 == *v20)
      {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a5 + 24), v19, 0, 0);
        unint64_t v18 = *(unsigned int *)(a5 + 112);
      }
      v20 += 24;
      ++v19;
    }
    while (v19 < v18);
  }
  if (v17)
  {
    uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      CopySphereCalibrationData();
    }
    goto LABEL_28;
  }
  *(_WORD *)unsigned int v26 = v33;
  long long v27 = v34;
  long long v28 = v35;
  uint64_t v29 = v36;
  int v32 = v39;
  long long v30 = v37;
  __int16 v31 = v38;
  CFDataRef v22 = CFDataCreate(a1, v26, 68);
  if (v22)
  {
    uint64_t v23 = 0;
  }
  else
  {
    __int16 v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v25 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      CopySphereCalibrationData();
    }
    CFDataRef v22 = 0;
    uint64_t v23 = 4294954510;
  }
LABEL_29:
  *a2 = v22;
  return v23;
}

uint64_t SetSphereEndStopCalibrationData(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 136))
  {
    int v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetSphereEndStopCalibrationData();
    }
    return 4294954612;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 != CFDataGetTypeID()) {
    return 4294954516;
  }
  if (CFDataGetLength((CFDataRef)cf) != 60)
  {
    unint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      SetSphereEndStopCalibrationData();
    }
    return 4294954516;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  bzero(v15, 0x3CuLL);
  v15[0] = *(_WORD *)BytePtr;
  long long v11 = *(_OWORD *)(BytePtr + 20);
  long long v16 = *(_OWORD *)(BytePtr + 4);
  long long v17 = v11;
  int v20 = *((_DWORD *)BytePtr + 14);
  __int16 v12 = *((_WORD *)BytePtr + 26);
  long long v18 = *(_OWORD *)(BytePtr + 36);
  __int16 v19 = v12;
  uint64_t result = H16ISP::H16ISPDevice::SetOISEndStopCalibration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (long long *)v15);
  if (result)
  {
    unint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetSphereEndStopCalibrationData();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopySphereEndStopCalibrationData(const __CFAllocator *a1, CFDataRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(*(void *)(a5 + 24) + 4384);
  if (GetNumberOfActiveChannels(*(const __CFArray **)(a5 + 120)))
  {
    uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      CopySphereEndStopCalibrationData();
    }
LABEL_28:
    CFDataRef v22 = 0;
    uint64_t v23 = 4294954514;
    goto LABEL_29;
  }
  bzero(v26, 0x3CuLL);
  unsigned int v11 = *(_DWORD *)(a3 + 132);
  int v12 = *(_DWORD *)(v9 + 96 * v11 + 60);
  unint64_t v13 = *(unsigned int *)(a5 + 112);
  if (v13)
  {
    unint64_t v14 = 0;
    long long v15 = (_DWORD *)(v9 + 60);
    do
    {
      if (*(v15 - 13) && (v12 || v14 == *(_DWORD *)(a3 + 132)) && v12 == *v15)
      {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a5 + 24), v14, 1u, 0);
        unint64_t v13 = *(unsigned int *)(a5 + 112);
      }
      v15 += 24;
      ++v14;
    }
    while (v14 < v13);
    unsigned int v11 = *(_DWORD *)(a3 + 132);
  }
  H16ISP::H16ISPDevice::RunOISEndStopCalibration(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, &v32);
  int v17 = v16;
  unint64_t v18 = *(unsigned int *)(a5 + 112);
  if (v18)
  {
    unint64_t v19 = 0;
    int v20 = (_DWORD *)(v9 + 60);
    do
    {
      if (*(v20 - 13) && (v12 || v19 == *(_DWORD *)(a3 + 132)) && v12 == *v20)
      {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a5 + 24), v19, 0, 0);
        unint64_t v18 = *(unsigned int *)(a5 + 112);
      }
      v20 += 24;
      ++v19;
    }
    while (v19 < v18);
  }
  if (v17)
  {
    uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      CopySphereEndStopCalibrationData();
    }
    goto LABEL_28;
  }
  *(_WORD *)unsigned int v26 = v32;
  long long v27 = v33;
  long long v28 = v34;
  int v31 = v37;
  long long v29 = v35;
  __int16 v30 = v36;
  CFDataRef v22 = CFDataCreate(a1, v26, 60);
  if (v22)
  {
    uint64_t v23 = 0;
  }
  else
  {
    __int16 v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v25 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      CopySphereEndStopCalibrationData();
    }
    CFDataRef v22 = 0;
    uint64_t v23 = 4294954510;
  }
LABEL_29:
  *a2 = v22;
  return v23;
}

uint64_t SetAPSSphereInterCalibrationData(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 136))
  {
    int v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetAPSSphereInterCalibrationData();
    }
    return 4294954612;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 != CFDataGetTypeID()) {
    return 4294954516;
  }
  if (CFDataGetLength((CFDataRef)cf) != 84)
  {
    unint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetAPSSphereInterCalibrationData();
    }
    return 4294954516;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  bzero(v14, 0x54uLL);
  v14[0] = *(_WORD *)BytePtr;
  long long v15 = *(_OWORD *)(BytePtr + 4);
  long long v16 = *(_OWORD *)(BytePtr + 20);
  long long v17 = *(_OWORD *)(BytePtr + 36);
  uint64_t v18 = *(void *)(BytePtr + 52);
  int v21 = *((_DWORD *)BytePtr + 20);
  long long v11 = *(_OWORD *)(BytePtr + 60);
  __int16 v20 = *((_WORD *)BytePtr + 38);
  long long v19 = v11;
  uint64_t result = H16ISP::H16ISPDevice::SetAPSOISInteractionCalibration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (long long *)v14);
  if (result)
  {
    int v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      SetAPSSphereInterCalibrationData();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyAPSSphereInterCalibrationData(const __CFAllocator *a1, CFDataRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(*(void *)(a5 + 24) + 4384);
  if (GetNumberOfActiveChannels(*(const __CFArray **)(a5 + 120)))
  {
    uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      CopyAPSSphereInterCalibrationData();
    }
LABEL_28:
    CFDataRef v22 = 0;
    uint64_t v23 = 4294954514;
    goto LABEL_29;
  }
  bzero(v26, 0x54uLL);
  unsigned int v11 = *(_DWORD *)(a3 + 132);
  int v12 = *(_DWORD *)(v9 + 96 * v11 + 60);
  unint64_t v13 = *(unsigned int *)(a5 + 112);
  if (v13)
  {
    unint64_t v14 = 0;
    long long v15 = (_DWORD *)(v9 + 60);
    do
    {
      if (*(v15 - 13) && (v12 || v14 == *(_DWORD *)(a3 + 132)) && v12 == *v15)
      {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a5 + 24), v14, 1u, 0);
        unint64_t v13 = *(unsigned int *)(a5 + 112);
      }
      v15 += 24;
      ++v14;
    }
    while (v14 < v13);
    unsigned int v11 = *(_DWORD *)(a3 + 132);
  }
  H16ISP::H16ISPDevice::RunAPSOISInteractionCalibration(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, (uint64_t)&v34);
  int v17 = v16;
  unint64_t v18 = *(unsigned int *)(a5 + 112);
  if (v18)
  {
    unint64_t v19 = 0;
    __int16 v20 = (_DWORD *)(v9 + 60);
    do
    {
      if (*(v20 - 13) && (v12 || v19 == *(_DWORD *)(a3 + 132)) && v12 == *v20)
      {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a5 + 24), v19, 0, 0);
        unint64_t v18 = *(unsigned int *)(a5 + 112);
      }
      v20 += 24;
      ++v19;
    }
    while (v19 < v18);
  }
  if (v17)
  {
    int v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      CopyAPSSphereInterCalibrationData();
    }
    goto LABEL_28;
  }
  *(_WORD *)unsigned int v26 = v34;
  long long v27 = v35;
  long long v28 = v36;
  long long v29 = v37;
  uint64_t v30 = v38;
  int v33 = v41;
  long long v31 = v39;
  __int16 v32 = v40;
  CFDataRef v22 = CFDataCreate(a1, v26, 84);
  if (v22)
  {
    uint64_t v23 = 0;
  }
  else
  {
    __int16 v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v25 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      CopyAPSSphereInterCalibrationData();
    }
    CFDataRef v22 = 0;
    uint64_t v23 = 4294954510;
  }
LABEL_29:
  *a2 = v22;
  return v23;
}

uint64_t CopyKeypointDetectionEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 4116)) {
    int v3 = (void *)MEMORY[0x263EFFB40];
  }
  else {
    int v3 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v3;
  return 0;
}

uint64_t SetKeypointDetectionConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  *(_DWORD *)unint64_t v18 = 0;
  int valuePtr = 0;
  *(_DWORD *)int v16 = 0;
  *(_DWORD *)int v17 = 0;
  if (H16ISP::H16ISPDevice::GetKeypointConfiguration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), &v17[1], v17, &v16[1], v16))return 4294954514; {
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CB68]);
  }
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt16Type, (char *)&valuePtr + 2);
  }
  else {
    HIWORD(valuePtr) = 0;
  }
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CB60]);
  if (v10) {
    CFNumberGetValue(v10, kCFNumberSInt16Type, &valuePtr);
  }
  else {
    LOWORD(valuePtr) = 0;
  }
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CB58]);
  if (v11) {
    CFNumberGetValue(v11, kCFNumberSInt16Type, &v18[1]);
  }
  else {
    v18[1] = 64;
  }
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CB50]);
  if (v12) {
    CFNumberGetValue(v12, kCFNumberSInt16Type, v18);
  }
  else {
    v18[0] = 64;
  }
  if (!*(void *)(a2 + 136))
  {
    if (H16ISP::H16ISPDevice::SetKeypointConfiguration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), SHIWORD(valuePtr), valuePtr, v18[1], v18[0]))
    {
      unint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unint64_t v14 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        SetKeypointDetectionConfiguration();
      }
      return 4294954514;
    }
    if (H16ISP::H16ISPDevice::EnableKeypointDetection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1))
    {
      long long v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        long long v15 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        SetKeypointDetectionConfiguration();
      }
      return 4294954514;
    }
    H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 27, 1);
    return 0;
  }
  if (SHIWORD(valuePtr) == v17[1]
    && (__int16)valuePtr == v17[0]
    && (__int16)v18[0] == v16[0]
    && (__int16)v18[1] == v16[1])
  {
    return 0;
  }
  unint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unint64_t v13 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    SetKeypointDetectionConfiguration();
  }
  return 4294954612;
}

uint64_t CopyKeypointDetectionConfiguration(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    *(_DWORD *)unint64_t v19 = 0;
    *(_DWORD *)__int16 v20 = 0;
    if (H16ISP::H16ISPDevice::GetKeypointConfiguration(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v20[1], v20, &v19[1], v19))
    {
      uint64_t result = 4294954514;
    }
    else
    {
      int valuePtr = v20[1];
      CFNumberRef v11 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2CB68], v11);
      CFRelease(v11);
      int v17 = v20[0];
      CFNumberRef v12 = CFNumberCreate(a1, kCFNumberSInt32Type, &v17);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2CB60], v12);
      CFRelease(v12);
      int v16 = v19[1];
      CFNumberRef v13 = CFNumberCreate(a1, kCFNumberSInt32Type, &v16);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2CB58], v13);
      CFRelease(v13);
      int v15 = v19[0];
      CFNumberRef v14 = CFNumberCreate(a1, kCFNumberSInt32Type, &v15);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2CB50], v14);
      CFRelease(v14);
      uint64_t result = 0;
    }
  }
  else
  {
    uint64_t result = 4294954510;
  }
  *a2 = Mutable;
  return result;
}

uint64_t CopySceneClassifierVersion(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3)
{
  *a2 = CFNumberCreate(a1, kCFNumberSInt32Type, (const void *)(a3 + 4120));
  return 0;
}

uint64_t CopyLTMLookUpTableMetadataEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = (void *)MEMORY[0x263EFFB40];
  if (!*(unsigned char *)(a3 + 3840)) {
    int v3 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v3;
  return 0;
}

uint64_t CopyLumaHistogramEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = (void *)MEMORY[0x263EFFB40];
  if (!*(unsigned char *)(a3 + 3856)) {
    int v3 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v3;
  return 0;
}

uint64_t CopyAutoExposureTables(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  valuePtr[1] = *MEMORY[0x263EF8340];
  valuePtr[0] = 0x400000000;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    bzero(v20, 0xD4uLL);
    __int16 v21 = 577;
    __int16 v22 = *(_DWORD *)(a3 + 132);
    int v23 = 4;
    if (!H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v20, 0xD4u, 0, 0xFFFFFFFF))
    {
      uint64_t v10 = v24;
      uint64_t v11 = 8 * v24;
      CFNumberRef v12 = (const UInt8 *)malloc_type_malloc(v11, 0x283C558BuLL);
      if (v12)
      {
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB18];
        if (v10)
        {
          CFNumberRef v14 = v12 + 4;
          int v15 = &v25;
          do
          {
            *(v14 - 1) = *(v15 - 1) / 0x3E8uLL;
            int v16 = *(_DWORD *)v15;
            int v15 = (uint64_t *)((char *)v15 + 12);
            *CFNumberRef v14 = v16;
            v14 += 2;
            --v10;
          }
          while (v10);
        }
        CFDataRef v17 = CFDataCreateWithBytesNoCopy(a1, v12, v11, v13);
        CFNumberRef v18 = CFNumberCreate(a1, kCFNumberIntType, valuePtr);
        CFDictionarySetValue(Mutable, v18, v17);
        CFRelease(v18);
        CFRelease(v17);
      }
    }
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 4294954510;
  }
  *a2 = Mutable;
  return result;
}

uint64_t TimeMachineSuspendNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = H16ISP::H16ISPDevice::SuspendTimeMachine(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1);
  if (result)
  {
    CFNumberRef v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      TimeMachineSuspendNow();
    }
    return 4294954514;
  }
  return result;
}

uint64_t TimeMachineResumeNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = H16ISP::H16ISPDevice::SuspendTimeMachine(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0);
  if (result)
  {
    CFNumberRef v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      TimeMachineSuspendNow();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyTimeMachinePTSRange(const __CFAllocator *a1, CFDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v23 = 0;
  unint64_t v24 = 0;
  if (H16ISP::H16ISPDevice::GetTimeMachinePTSRange(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v24, &v23))
  {
    CFNumberRef v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      CopyTimeMachinePTSRange();
    }
LABEL_11:
    CFDictionaryRef v10 = 0;
    uint64_t v11 = 4294954514;
    goto LABEL_12;
  }
  if (H16ISP::H16ISPDevice::ISP_GetCameraTime(*(void *)(a5 + 24), &outputStruct))
  {
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      CopyTimeMachinePTSRange();
    }
    goto LABEL_11;
  }
  int64_t v13 = FigHostTimeToNanoseconds();
  CMTimeMake(&v22, v13, 1000000000);
  int64_t v14 = FigHostTimeToNanoseconds();
  CMTimeMake(&v21, v14, 1000000000);
  CMTime start = v22;
  CMTime lhs = v21;
  CMTime rhs = v22;
  CMTimeSubtract(&duration, &lhs, &rhs);
  CMTimeRangeMake(&v20, &start, &duration);
  CMTimeRange v15 = v20;
  CFDictionaryRef v10 = CMTimeRangeCopyAsDictionary(&v15, a1);
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = 4294954510;
  }
LABEL_12:
  *a2 = v10;
  return v11;
}

uint64_t SetFirmwareFocusTriggerEnabled(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  int v6 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 4124) = v6 != 0;
  return result;
}

uint64_t CopyFirmwareFocusTriggerEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 4124)) {
    CFTypeID v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  else {
    CFTypeID v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t CopyContentAwareEnhancement(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = (void *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 3753)) {
    int v3 = (void *)MEMORY[0x263EFFB40];
  }
  *a2 = *v3;
  return 0;
}

uint64_t CopyContentAwareAWBEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = (void *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 3754)) {
    int v3 = (void *)MEMORY[0x263EFFB40];
  }
  *a2 = *v3;
  return 0;
}

uint64_t CopyNRSharpeningConfiguration(const __CFAllocator *a1, CFMutableDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    uint64_t v11 = 4294954510;
    goto LABEL_25;
  }
  unsigned __int8 v41 = 0;
  if (H16ISP::H16ISPDevice::GetRNFStrength(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 0, &v41))
  {
    CFDictionaryRef v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFDictionaryRef v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      CopyNRSharpeningConfiguration();
    }
LABEL_23:
    uint64_t v11 = 4294954514;
LABEL_24:
    CFRelease(Mutable);
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_25;
  }
  int valuePtr = v41;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D6C8], v13);
  CFRelease(v13);
  unsigned __int8 v40 = 0;
  if (H16ISP::H16ISPDevice::GetSharpness(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 0, &v40))
  {
    int64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int64_t v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      CopyNRSharpeningConfiguration();
    }
    goto LABEL_23;
  }
  int valuePtr = v40;
  CFNumberRef v15 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D6D0], v15);
  CFRelease(v15);
  unsigned __int8 v39 = 0;
  if (H16ISP::H16ISPDevice::GetLCEStrength(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 0, &v39))
  {
    int v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      CopyNRSharpeningConfiguration();
    }
    goto LABEL_23;
  }
  int valuePtr = v39;
  CFNumberRef v17 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D6B8], v17);
  CFRelease(v17);
  int v38 = 0;
  BOOL v37 = 0;
  if (H16ISP::H16ISPDevice::GetMBNRConfiguration(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 0, 5u, &v38, &v37, v36, v35))
  {
    CFNumberRef v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v18 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      CopyNRSharpeningConfiguration();
    }
    goto LABEL_23;
  }
  CMTimeRange v20 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v20)
  {
LABEL_44:
    uint64_t v11 = 4294954510;
    goto LABEL_24;
  }
  CMTime v21 = v20;
  CMTime v22 = (const void *)*MEMORY[0x263EFFB40];
  unint64_t v23 = (const void *)*MEMORY[0x263EFFB38];
  if (v38 == 2) {
    unint64_t v24 = (const void *)*MEMORY[0x263EFFB38];
  }
  else {
    unint64_t v24 = (const void *)*MEMORY[0x263EFFB40];
  }
  CFDictionarySetValue(v20, (const void *)*MEMORY[0x263F2D6A0], v24);
  if (v38 == 1) {
    uint64_t v25 = v22;
  }
  else {
    uint64_t v25 = v23;
  }
  CFDictionarySetValue(v21, (const void *)*MEMORY[0x263F2D6B0], v25);
  if (v37) {
    unsigned int v26 = v22;
  }
  else {
    unsigned int v26 = v23;
  }
  CFDictionarySetValue(v21, (const void *)*MEMORY[0x263F2D690], v26);
  CFMutableArrayRef v27 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (!v27) {
    goto LABEL_43;
  }
  long long v28 = v27;
  for (uint64_t i = 0; i != 5; ++i)
  {
    int valuePtr = v36[i];
    CFNumberRef v30 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
    CFArrayAppendValue(v28, v30);
    CFRelease(v30);
  }
  CFDictionarySetValue(v21, (const void *)*MEMORY[0x263F2D6A8], v28);
  CFRelease(v28);
  CFMutableArrayRef v31 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (!v31)
  {
LABEL_43:
    CFRelease(v21);
    goto LABEL_44;
  }
  __int16 v32 = v31;
  for (uint64_t j = 0; j != 5; ++j)
  {
    int valuePtr = v35[j];
    CFNumberRef v34 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
    CFArrayAppendValue(v32, v34);
    CFRelease(v34);
  }
  CFDictionarySetValue(v21, (const void *)*MEMORY[0x263F2D698], v32);
  CFRelease(v32);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D6C0], v21);
  CFRelease(v21);
  uint64_t v11 = 0;
LABEL_25:
  *a2 = Mutable;
  return v11;
}

uint64_t CopyStructuredLightStandbyTemperature(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a3 + 136))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954612;
  }
  else
  {
    *(void *)int v16 = 0;
    int v15 = 0;
    int v14 = 0;
    *(void *)CFNumberRef v13 = 0;
    int v12 = 0;
    if (H16ISP::H16ISPDevice::GetProjectorTemp(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v16[1], v16, &v15, &v14, &v13[1], v13, &v12))
    {
      CFNumberRef v6 = 0;
      uint64_t v7 = 4294954513;
    }
    else
    {
      float v9 = (double)v15 * 0.01;
      float valuePtr = v9;
      CFNumberRef v6 = CFNumberCreate(a1, kCFNumberFloatType, &valuePtr);
      uint64_t v7 = 0;
    }
  }
  *a2 = v6;
  return v7;
}

uint64_t CopyStreamingYCbCrMatrix(uint64_t a1, CFStringRef *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a3 + 148);
  if (v4 == 1)
  {
    CFTypeRef v5 = (CFStringRef *)MEMORY[0x263F04038];
  }
  else
  {
    if (v4 != 2)
    {
      CFStringRef Copy = 0;
      goto LABEL_7;
    }
    CFTypeRef v5 = (CFStringRef *)MEMORY[0x263F04050];
  }
  CFStringRef Copy = CFStringCreateCopy(0, *v5);
LABEL_7:
  *a2 = Copy;
  return 0;
}

uint64_t CopyForegroundSegmentationNetwork(uint64_t a1, CFNumberRef *a2, uint64_t a3)
{
  *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, (const void *)(a3 + 4248));
  return 0;
}

uint64_t CopyStreamingTuningProfile(uint64_t a1, CFNumberRef *a2, uint64_t a3)
{
  *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, (const void *)(a3 + 3952));
  return 0;
}

uint64_t CopyFPCCoefficients(uint64_t a1, __CFData **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v16, 0x78uLL);
  int v18 = *(_DWORD *)(a3 + 132);
  __int16 v17 = 1309;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v16, 0x78u, 0, 0xFFFFFFFF))BOOL v8 = 1; {
  else
  }
    BOOL v8 = v20 == 0;
  if (v8)
  {
    float v9 = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 100);
    float v9 = Mutable;
    if (!Mutable)
    {
      uint64_t result = 4294954510;
      goto LABEL_18;
    }
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    if (v19 == 2)
    {
      unint64_t v13 = 0;
      *(_WORD *)MutableBytePtr = 2;
      int v14 = MutableBytePtr + 84;
      int v15 = &v35;
      do
      {
        *(v14 - 20) = *((_DWORD *)v15 - 20);
        if (v13 <= 3) {
          *int v14 = *(_DWORD *)v15;
        }
        ++v13;
        int v15 = (uint64_t *)((char *)v15 + 4);
        ++v14;
      }
      while (v13 != 20);
      goto LABEL_17;
    }
    if (v19 == 1)
    {
      *(_WORD *)MutableBytePtr = 1;
      *((_DWORD *)MutableBytePtr + 1) = v21;
      *((_DWORD *)MutableBytePtr + 2) = v22;
      *((_DWORD *)MutableBytePtr + 3) = v23;
      *((_DWORD *)MutableBytePtr + 4) = v24;
      *((_DWORD *)MutableBytePtr + 5) = v25;
      *((_DWORD *)MutableBytePtr + 6) = v26;
      *((_DWORD *)MutableBytePtr + 7) = v27;
      *((_DWORD *)MutableBytePtr + 8) = v28;
      *((_DWORD *)MutableBytePtr + 9) = v29;
      *((_DWORD *)MutableBytePtr + 10) = v30;
      *((_DWORD *)MutableBytePtr + 11) = v31;
      *((_DWORD *)MutableBytePtr + 12) = v32;
      *((_DWORD *)MutableBytePtr + 13) = v33;
      *((_DWORD *)MutableBytePtr + 14) = v34;
LABEL_17:
      CFDataSetLength(v9, 100);
      uint64_t result = 0;
      goto LABEL_18;
    }
    CFRelease(v9);
  }
  uint64_t result = 4294954513;
LABEL_18:
  *a2 = v9;
  return result;
}

uint64_t SetVisionDataSuspended(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  *(unsigned char *)(a2 + 4137) = v5 != 0;
  uint64_t result = *(void *)(a2 + 4240);
  if (result)
  {
    uint64_t v7 = 0;
    H16ISP::H16ISPFilterGraphManager::GetNode((void *)result, 9, &v7);
    if (v7)
    {
      if (v5) {
        H16ISP::H16ISPGraphVIOCameraControlNode::Suspend((uint64_t)v7);
      }
      else {
        H16ISP::H16ISPGraphVIOCameraControlNode::Resume((uint64_t)v7);
      }
    }
    return 0;
  }
  return result;
}

uint64_t SetLTMCurve(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  bzero(v11, 0x10uLL);
  __int16 v12 = 2628;
  __int16 v13 = *(_DWORD *)(a2 + 132);
  int v8 = valuePtr;
  if ((valuePtr - 1) >= 3) {
    int v8 = 0;
  }
  int v14 = v8;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v11, 0x10u, 0, 0xFFFFFFFF);
  if (result)
  {
    CFDictionaryRef v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFDictionaryRef v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetLTMCurve();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyLSCStrength(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = 0;
  H16ISP::H16ISPDevice::GetLSCStrength(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), (float *)&valuePtr);
  if (v6)
  {
    CFNumberRef v7 = 0;
    uint64_t v8 = 4294954514;
  }
  else
  {
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberFloatType, &valuePtr);
    uint64_t v8 = 0;
  }
  *a2 = v7;
  return v8;
}

float SetTimeLapseCaptureConfiguration(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float valuePtr = 1.0;
  if (cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 != CFDictionaryGetTypeID()) {
      return result;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E618]);
    if (!Value) {
      return result;
    }
    CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
    if (H16ISP::H16ISPDevice::SetTimeLapseSamplingRate(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), vcvts_n_u32_f32(valuePtr, 0x18uLL)))
    {
      CFDictionaryRef v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFDictionaryRef v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        SetTimeLapseCaptureConfiguration();
      }
      return result;
    }
    __int16 v13 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E620]);
    if (v13) {
      char v11 = CFEqual(v13, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    }
    else {
      char v11 = 0;
    }
    if (H16ISP::H16ISPDevice::EnableTimeLapseSmoothing(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v11))
    {
      int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v14 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        SetTimeLapseCaptureConfiguration();
      }
      return result;
    }
  }
  else
  {
    char v11 = 0;
  }
  if (H16ISP::H16ISPDevice::EnableTimeLapseConfiguration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), cf != 0))
  {
    __int16 v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      SetTimeLapseCaptureConfiguration();
    }
  }
  else
  {
    *(unsigned char *)(a2 + 4262) = cf != 0;
    *(unsigned char *)(a2 + 4263) = v11;
    float result = valuePtr;
    *(float *)(a2 + 4264) = valuePtr;
  }
  return result;
}

uint64_t CopyTimeLapseCaptureConfiguration(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3)
{
  uint64_t v4 = a3 + 4262;
  if (*(unsigned char *)(a3 + 4262))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFNumberRef v8 = CFNumberCreate(a1, kCFNumberFloatType, (const void *)(a3 + 4264));
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E618], v8);
      CFRelease(v8);
      if (*(unsigned char *)(v4 + 1)) {
        float v9 = (const void **)MEMORY[0x263EFFB40];
      }
      else {
        float v9 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E620], *v9);
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = 4294954510;
    }
  }
  else
  {
    uint64_t result = 0;
    CFMutableDictionaryRef Mutable = 0;
  }
  *a2 = Mutable;
  return result;
}

uint64_t CopyBackWideCalibratedExtrinsics(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  int v3 = v2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  int DistortionData = H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v5 + 132), 1, v10);
  CFDataRef v7 = 0;
  if (DistortionData)
  {
    uint64_t result = 4294954513;
  }
  else
  {
    do
    {
      v9[(void)v7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v10[32 * (void)v7 + 2232]), *(float64x2_t *)&v10[32 * (void)v7 + 2248]);
      CFDataRef v7 = (CFDataRef)((char *)v7 + 1);
    }
    while (v7 != (CFDataRef)3);
    CFDataRef v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)v9, 48);
    if (v7) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 4294954510;
    }
  }
  *int v3 = v7;
  return result;
}

uint64_t CopyBackWideCalibratedGDCCoefficients(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  CFDataRef v7 = v6;
  *(void *)&v23[4116] = *MEMORY[0x263EF8340];
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    if (H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v3 + 24), *(_DWORD *)(v5 + 132), 1, v21))
    {
      uint64_t v10 = 4294954513;
LABEL_12:
      CFRelease(Mutable);
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_13;
    }
    if (v22 == 49926)
    {
      uint64_t v11 = 0;
      __int16 v12 = (float64x2_t *)v23;
      do
      {
        *(float32x4_t *)&bytes[v11] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12[-4]), v12[-3]);
        *(float32x4_t *)&bytes[v11 + 32] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12[-12]), v12[-11]);
        __int16 v13 = (float32x4_t *)&v19[v11];
        *__int16 v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v12), v12[1]);
        int v13[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12[-8]), v12[-7]);
        v11 += 16;
        v12 += 2;
      }
      while (v11 != 32);
    }
    CFDataRef v14 = CFDataCreate(v8, bytes, 64);
    if (!v14
      || (CFDataRef v15 = v14,
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F2CA90], v14),
          CFRelease(v15),
          (CFDataRef v16 = CFDataCreate(v8, v19, 64)) == 0))
    {
      uint64_t v10 = 4294954510;
      goto LABEL_12;
    }
    CFDataRef v17 = v16;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F2CA98], v16);
    CFRelease(v17);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 4294954510;
  }
LABEL_13:
  *CFDataRef v7 = Mutable;
  return v10;
}

uint64_t CopyBackWideCalibratedOpticalCenter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v5 + 132), 1, v8))
  {
    CFDictionaryRef DictionaryRepresentation = 0;
    uint64_t result = 4294954513;
  }
  else
  {
    v10.x = v8[548];
    v10.y = v8[549];
    CFDictionaryRef DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v10);
    if (DictionaryRepresentation) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 4294954510;
    }
  }
  *uint64_t v3 = DictionaryRepresentation;
  return result;
}

uint64_t CopyAmbientViewingLevel(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = 0;
  H16ISP::H16ISPDevice::GetAmbientViewingLevel(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), (float *)&valuePtr);
  if (v6)
  {
    CFNumberRef v7 = 0;
    uint64_t v8 = 4294954514;
  }
  else
  {
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    uint64_t v8 = 0;
  }
  *a2 = v7;
  return v8;
}

uint64_t CopyTOFAutoFocusEstimatorResults(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v60, 0x34uLL);
  __int16 v61 = 1962;
  __int16 v62 = *(_DWORD *)(a3 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v60, 0x34u, 0, 0xFFFFFFFF))
  {
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      CopyTOFAutoFocusEstimatorResults();
    }
LABEL_11:
    uint64_t v11 = 0;
    uint64_t result = 4294954514;
    goto LABEL_12;
  }
  bzero(v50, 0x64uLL);
  __int16 v51 = 1963;
  __int16 v52 = *(_DWORD *)(a3 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v50, 0x64u, 0, 0xFFFFFFFF))
  {
    CGPoint v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CGPoint v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      CopyTOFAutoFocusEstimatorResults();
    }
    goto LABEL_11;
  }
  if (v67 && v59[6])
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      uint64_t v11 = Mutable;
      CFNumberRef v14 = CFNumberCreate(a1, kCFNumberSInt32Type, &v63);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6A8], v14);
      CFRelease(v14);
      CFNumberRef v15 = CFNumberCreate(a1, kCFNumberSInt32Type, (char *)&v63 + 4);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E688], v15);
      CFRelease(v15);
      CFNumberRef v16 = CFNumberCreate(a1, kCFNumberSInt32Type, v64);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6B8], v16);
      CFRelease(v16);
      int valuePtr = v64[1] / 1000;
      CFNumberRef v17 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6C8], v17);
      CFRelease(v17);
      CFNumberRef v18 = CFNumberCreate(a1, kCFNumberSInt32Type, v65);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E690], v18);
      CFRelease(v18);
      int v48 = v65[1] / 10;
      CFNumberRef v19 = CFNumberCreate(a1, kCFNumberSInt32Type, &v48);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6A0], v19);
      CFRelease(v19);
      int v47 = v65[2] / 10;
      CFNumberRef v20 = CFNumberCreate(a1, kCFNumberSInt32Type, &v47);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E698], v20);
      CFRelease(v20);
      CFNumberRef v21 = CFNumberCreate(a1, kCFNumberSInt32Type, v66);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6B0], v21);
      CFRelease(v21);
      int v46 = v66[1];
      CFNumberRef v22 = CFNumberCreate(a1, kCFNumberSInt32Type, &v46);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6C0], v22);
      CFRelease(v22);
      CFNumberRef v23 = CFNumberCreate(a1, kCFNumberSInt32Type, &v53);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E720], v23);
      CFRelease(v23);
      CFNumberRef v24 = CFNumberCreate(a1, kCFNumberSInt32Type, &v54);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6F0], v24);
      CFRelease(v24);
      CFNumberRef v25 = CFNumberCreate(a1, kCFNumberSInt32Type, (char *)&v54 + 4);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6D8], v25);
      CFRelease(v25);
      CFNumberRef v26 = CFNumberCreate(a1, kCFNumberSInt32Type, v55);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E718], v26);
      CFRelease(v26);
      int valuePtr = v55[1] / 1000;
      CFNumberRef v27 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E730], v27);
      CFRelease(v27);
      CFNumberRef v28 = CFNumberCreate(a1, kCFNumberSInt32Type, v56);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6E8], v28);
      CFRelease(v28);
      int v48 = v56[1] / 10;
      CFNumberRef v29 = CFNumberCreate(a1, kCFNumberSInt32Type, &v48);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E700], v29);
      CFRelease(v29);
      int v47 = v56[2] / 10;
      CFNumberRef v30 = CFNumberCreate(a1, kCFNumberSInt32Type, &v47);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6F8], v30);
      CFRelease(v30);
      CFNumberRef v31 = CFNumberCreate(a1, kCFNumberSInt32Type, &v57);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E710], v31);
      CFRelease(v31);
      CFNumberRef v32 = CFNumberCreate(a1, kCFNumberSInt32Type, &v58[4]);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6D0], v32);
      CFRelease(v32);
      int v45 = v59[5];
      CFNumberRef v33 = CFNumberCreate(a1, kCFNumberSInt32Type, &v45);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E6E0], v33);
      CFRelease(v33);
      int v46 = *(_DWORD *)&v58[8];
      CFNumberRef v34 = CFNumberCreate(a1, kCFNumberSInt32Type, &v46);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E728], v34);
      CFRelease(v34);
      CFNumberRef v35 = CFNumberCreate(a1, kCFNumberSInt32Type, v58);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E708], v35);
      CFRelease(v35);
      CFNumberRef v36 = CFNumberCreate(a1, kCFNumberSInt32Type, v59);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F2E680], v36);
      CFRelease(v36);
      uint64_t result = 0;
    }
    else
    {
      BOOL v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        BOOL v37 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v37;
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
        CopyTOFAutoFocusEstimatorResults(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      uint64_t v11 = 0;
      uint64_t result = 4294954510;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 4294954513;
  }
LABEL_12:
  *a2 = v11;
  return result;
}

uint64_t CopyAutoFocusDriverShortStats(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v25, 0x1CuLL);
  __int16 v26 = 1964;
  __int16 v27 = *(_DWORD *)(a3 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v25, 0x1Cu, 0, 0xFFFFFFFF))
  {
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      CopyAutoFocusDriverShortStats();
    }
    CGPoint v10 = 0;
    uint64_t result = 4294954514;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CGPoint v10 = Mutable;
      CFNumberRef v13 = CFNumberCreate(a1, kCFNumberSInt32Type, &v28);
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2C680], v13);
      CFRelease(v13);
      CFNumberRef v14 = CFNumberCreate(a1, kCFNumberFloatType, (char *)&v28 + 4);
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2C678], v14);
      CFRelease(v14);
      CFNumberRef v15 = CFNumberCreate(a1, kCFNumberFloatType, &v29);
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2C670], v15);
      CFRelease(v15);
      CFNumberRef v16 = CFNumberCreate(a1, kCFNumberSInt32Type, (char *)&v29 + 4);
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2C688], v16);
      CFRelease(v16);
      uint64_t result = 0;
    }
    else
    {
      CFNumberRef v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v17 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        CopyAutoFocusDriverShortStats(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      CGPoint v10 = 0;
      uint64_t result = 4294954510;
    }
  }
  *a2 = v10;
  return result;
}

uint64_t SetLocalHistogramsEnabled(const __CFBoolean *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && (CFTypeID v7 = CFGetTypeID(a1), v7 == CFBooleanGetTypeID()))
  {
    int Value = CFBooleanGetValue(a1);
    int v9 = Value != 0;
    if (!*(void *)(a2 + 136))
    {
      int v19 = Value;
      if (H16ISP::H16ISPDevice::EnableLocalHistogram(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), Value != 0))
      {
        uint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v20 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          SetLocalHistogramsEnabled();
        }
      }
      else
      {
        uint64_t result = H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), *(_WORD *)(a2 + 3820), v19 != 0);
        if (!result)
        {
          *(unsigned char *)(a2 + 3824) = v9;
          return result;
        }
        uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v21 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          SetLocalHistogramsEnabled();
        }
      }
      return 4294954514;
    }
    if (*(unsigned __int8 *)(a2 + 3824) == v9) {
      return 0;
    }
    else {
      return 4294954612;
    }
  }
  else
  {
    uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      SetLocalHistogramsEnabled(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    return 4294954516;
  }
}

uint64_t CopyLocalHistogramsEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x263EFFB40];
  if (!*(unsigned char *)(a3 + 3824)) {
    uint64_t v3 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v3;
  return 0;
}

uint64_t SetReplaySIFDMA(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v5 = -536870212;
  if (cf)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    uint64_t v9 = 4294954516;
    if (v8 == CFBooleanGetTypeID())
    {
      BOOL v10 = CFEqual(cf, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
      int v5 = H16ISP::H16ISPDevice::EnableReplaySifDMA(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v10);
      if (v5) {
        uint64_t v9 = 4294954516;
      }
      else {
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    uint64_t v9 = 4294954516;
  }
  uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v11 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v12 = CFEqual(cf, (CFTypeRef)*MEMORY[0x263EFFB40]);
    uint64_t v13 = "True";
    if (!v12) {
      uint64_t v13 = "False";
    }
    int v15 = 136315394;
    uint64_t v16 = v13;
    __int16 v17 = 1024;
    int v18 = v5;
    _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: kFigCaptureStreamProperty_ReplaySIFDMAMode: %s, result=0x%08x\n\n", (uint8_t *)&v15, 0x12u);
  }
  return v9;
}

uint64_t SetTorchColor(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"WarmLEDPercentile");
  if (!Value) {
    return 4294954516;
  }
  unsigned int valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  __int16 v9 = valuePtr;
  if (valuePtr >= 0x65)
  {
    __int16 v9 = 100;
    unsigned int valuePtr = 100;
  }
  int v10 = H16ISP::H16ISPDevice::SetTorchColorMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 2, v9);
  uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v11 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    unsigned int v15 = valuePtr;
    __int16 v16 = 1024;
    int v17 = v10;
    _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetTorchColor, warmLEDPercentile=%d, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v10) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetOISPosition(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"XPosition");
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"YPosition");
  uint64_t result = 4294954516;
  if (Value && v9)
  {
    float valuePtr = 0.0;
    CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
    float v13 = 0.0;
    CFNumberGetValue(v9, kCFNumberFloat32Type, &v13);
    int v11 = H16ISP::H16ISPDevice::SetOISPosition(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), vcvtd_n_s64_f64(valuePtr, 8uLL), vcvtd_n_s64_f64(v13, 8uLL));
    int v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218496;
      double v16 = valuePtr;
      __int16 v17 = 2048;
      double v18 = v13;
      __int16 v19 = 1024;
      int v20 = v11;
      _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetOISPosition, XPosition=%5.5f um, YPosition=%5.5f um, result=0x%08X\n\n", buf, 0x1Cu);
    }
    if (v11) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CopyOISPosition(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)__int16 v19 = 0;
  *(_DWORD *)double v18 = 0;
  if (H16ISP::H16ISPDevice::GetOISPosition(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v19[1], v19, &v18[1], v18))
  {
    int v6 = 0;
    uint64_t result = 4294954513;
  }
  else
  {
    uint64_t result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    int v6 = (__CFDictionary *)result;
    if (result)
    {
      float v8 = (double)v19[1] * 0.00390625;
      float valuePtr = v8;
      CFNumberRef v9 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      CFDictionarySetValue(v6, @"XPosition", v9);
      CFRelease(v9);
      float v10 = (double)v19[0] * 0.00390625;
      float v16 = v10;
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberFloat32Type, &v16);
      CFDictionarySetValue(v6, @"YPosition", v11);
      CFRelease(v11);
      int v15 = v18[1];
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &v15);
      CFDictionarySetValue(v6, @"HallSensor1", v12);
      CFRelease(v12);
      int v14 = v18[0];
      CFNumberRef v13 = CFNumberCreate(0, kCFNumberIntType, &v14);
      CFDictionarySetValue(v6, @"HallSensor2", v13);
      CFRelease(v13);
      uint64_t result = 0;
    }
  }
  *a2 = v6;
  return result;
}

uint64_t SetOISActuator(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"XPosition");
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"YPosition");
  uint64_t result = 4294954516;
  if (Value && v9)
  {
    int valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    *(_DWORD *)CFNumberRef v13 = 0;
    CFNumberGetValue(v9, kCFNumberIntType, v13);
    int v11 = H16ISP::H16ISPDevice::SetOISActuator(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr, v13[0]);
    CFNumberRef v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109632;
      int v16 = valuePtr;
      __int16 v17 = 1024;
      int v18 = *(_DWORD *)v13;
      __int16 v19 = 1024;
      int v20 = v11;
      _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetOISActuator, b1=%8.8d, b2=%8.8d, result=0x%08X\n\n", buf, 0x14u);
    }
    if (v11) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CopyOISTemperature(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v10 = 0;
  if (H16ISP::H16ISPDevice::GetOISTemperature(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v10))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    int valuePtr = v10;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetAFTestScriptLoad(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDataGetTypeID()) {
    return 4294954516;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  unsigned int Length = CFDataGetLength((CFDataRef)a1);
  int DataFile = H16ISP::H16ISPDevice::ISP_LoadDataFile(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), BytePtr, Length, 0x10u);
  int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v11 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v13[0] = 67109120;
    v13[1] = DataFile;
    _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetAFTestScriptLoad, result=0x%08X\n\n", (uint8_t *)v13, 8u);
  }
  if (DataFile) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetSensorSidebandEnabled(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v4 = cf;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!cf) {
    goto LABEL_6;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFBooleanGetTypeID())
  {
    LODWORD(v4) = 0;
LABEL_6:
    uint64_t v8 = 4294954516;
    goto LABEL_7;
  }
  if (*(void *)(a2 + 136))
  {
    LODWORD(v4) = 0;
    uint64_t v8 = 4294954612;
  }
  else
  {
    LODWORD(v4) = CFEqual(v4, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    if (H16ISP::H16ISPDevice::EnableSensorSideband(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (char)v4))uint64_t v8 = 4294954516; {
    else
    }
      uint64_t v8 = 0;
  }
LABEL_7:
  CFNumberRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    __int16 v10 = "False";
    if (v4) {
      __int16 v10 = "True";
    }
    int v12 = 136315394;
    CFNumberRef v13 = v10;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: EnableSensorSideband: %s (err=%d)\n\n", (uint8_t *)&v12, 0x12u);
  }
  return v8;
}

uint64_t SetReloadNVM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  uint64_t v4 = 4294954514;
  if (!H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1u, 0))
  {
    int v7 = H16ISP::H16ISPDevice::ReloadNVMBytes(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132));
    H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0, 0);
    if (v7) {
      return 4294954514;
    }
    else {
      return 0;
    }
  }
  return v4;
}

uint64_t SetChromaNoiseReductionLevel(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (valuePtr > 0xFF) {
    return 4294954516;
  }
  int v8 = H16ISP::H16ISPDevice::SetCNRLevel(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  CFNumberRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    unsigned int v13 = valuePtr;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetCNRLevel: 0x%08X, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyChromaNoiseReductionLevel(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10 = 0;
  if (H16ISP::H16ISPDevice::GetCNRLevel(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v10))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    int valuePtr = v10;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetISPProcessingConfig(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (valuePtr > 3) {
    return 4294954516;
  }
  int v8 = H16ISP::H16ISPDevice::SetISPProcessingConfig(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  CFNumberRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    int v13 = valuePtr;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetISPProcessingConfig: 0x%08X, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetNoiseReductionLevel(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (valuePtr > 0xFF) {
    return 4294954516;
  }
  int v8 = H16ISP::H16ISPDevice::SetNoiseReductionLevel(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  CFNumberRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    unsigned int v13 = valuePtr;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetNoiseReductionLevel: 0x%08X, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyNoiseReductionLevel(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10 = 0;
  if (H16ISP::H16ISPDevice::GetNoiseReductionLevel(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v10))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    int valuePtr = v10;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetIRProjectorParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"EnableIRProjector");
  if (!Value) {
    return 4294954516;
  }
  int v9 = CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFB40]);
  unsigned __int8 v10 = CFDictionaryGetValue((CFDictionaryRef)a1, @"ProjectorType");
  if (!v10) {
    return 4294954516;
  }
  int v11 = v10;
  CFTypeID v12 = CFGetTypeID(v10);
  if (v12 != CFStringGetTypeID()) {
    return 4294954516;
  }
  if (CFEqual(v11, @"Flood"))
  {
    int v13 = 1;
LABEL_27:
    *(_DWORD *)(a2 + 3788) = v13;
    goto LABEL_28;
  }
  if (CFEqual(v11, @"Dense"))
  {
    int v13 = 4;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"Sparse"))
  {
    int v13 = 5;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseInterleave"))
  {
    int v13 = 6;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseInterleave"))
  {
    int v13 = 7;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseLowPower"))
  {
    int v13 = 11;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseLowPower"))
  {
    int v13 = 12;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseInterleaveLowPower"))
  {
    int v13 = 13;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseInterleaveLowPower"))
  {
    int v13 = 14;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"RunScript") || CFEqual(v11, @"UserStudy"))
  {
    int v13 = 8;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"UserStudyLowPower"))
  {
    int v13 = 15;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"ComplianceA"))
  {
    int v13 = 9;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"ComplianceB"))
  {
    int v13 = 10;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"ComplianceC"))
  {
    int v13 = 16;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"ComplianceD"))
  {
    int v13 = 17;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"ComplianceE"))
  {
    int v13 = 45;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseProbeA"))
  {
    int v13 = 18;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseProbeB"))
  {
    int v13 = 19;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseProbeAB"))
  {
    int v13 = 20;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseProbeA"))
  {
    int v13 = 21;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseProbeB"))
  {
    int v13 = 22;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseProbeAB"))
  {
    int v13 = 23;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseLowPowerProbeA"))
  {
    int v13 = 24;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseLowPowerProbeB"))
  {
    int v13 = 25;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseLowPowerProbeAB"))
  {
    int v13 = 26;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseLowPowerProbeA"))
  {
    int v13 = 27;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseLowPowerProbeB"))
  {
    int v13 = 28;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseLowPowerProbeAB"))
  {
    int v13 = 29;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"UserStudyProbingPattern"))
  {
    int v13 = 30;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"FactoryBurninP3A"))
  {
    int v13 = 31;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"FactoryBurninP3D"))
  {
    int v13 = 32;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseInterleaveProbeA"))
  {
    int v13 = 33;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseInterleaveProbeB"))
  {
    int v13 = 34;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseInterleaveProbeAB"))
  {
    int v13 = 35;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseInterleaveProbeA"))
  {
    int v13 = 36;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseInterleaveProbeB"))
  {
    int v13 = 37;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseInterleaveProbeAB"))
  {
    int v13 = 38;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseInterleaveLowPowerProbeA"))
  {
    int v13 = 39;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseInterleaveLowPowerProbeB"))
  {
    int v13 = 40;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"DenseInterleaveLowPowerProbeAB"))
  {
    int v13 = 41;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseInterleaveLowPowerProbeA"))
  {
    int v13 = 42;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseInterleaveLowPowerProbeB"))
  {
    int v13 = 43;
    goto LABEL_27;
  }
  if (CFEqual(v11, @"SparseInterleaveLowPowerProbeAB"))
  {
    int v13 = 44;
    goto LABEL_27;
  }
  *(_DWORD *)(a2 + 3788) = 0;
LABEL_28:
  *(unsigned char *)(a2 + 3786) = v9 != 0;
  if (*(void *)(a2 + 4048))
  {
    if (v9)
    {
      if ((H16ISP::H16ISPDevice::IsProjectorAllowed(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132)) & 1) == 0)
      {
        NotifyProjectorValidationError(a2, a4);
        return 0;
      }
      H16ISP::ProjectorManager::setProjectorType(*(H16ISP::ProjectorManager **)(a2 + 4048), *(_DWORD *)(a2 + 3788));
      int v15 = 1;
    }
    else
    {
      int v15 = 0;
    }
    EnableIRProjector(v15, a2, a4);
  }
  return 0;
}

uint64_t SetGenericProjectorType(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (H16ISP::H16ISPDevice::IsProjectorAllowed(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132)))
  {
    *(unsigned char *)(a2 + 3786) = 1;
    *(_DWORD *)(a2 + 3788) = 47;
    int v8 = *(H16ISP::ProjectorManager **)(a2 + 4048);
    if (v8) {
      H16ISP::ProjectorManager::setProjectorType(v8, a1);
    }
    else {
      H16ISP::ProjectorManager::setUserDefinedProjectorType(a1, v7);
    }
    EnableIRProjector(1, a2, a4);
  }
  else
  {
    NotifyProjectorValidationError(a2, a4);
  }
  return 0;
}

uint64_t CopyProjectorValid(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int IsProjectorAllowed = H16ISP::H16ISPDevice::IsProjectorAllowed(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132));
  CFDictionaryRef v7 = (CFTypeRef *)MEMORY[0x263EFFB40];
  if (!IsProjectorAllowed) {
    CFDictionaryRef v7 = (CFTypeRef *)MEMORY[0x263EFFB38];
  }
  CFTypeRef v8 = *v7;
  CFRetain(*v7);
  *a2 = v8;
  return 0;
}

uint64_t CopyValidateCompliance(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(a3 + 136))
  {
    uint64_t v9 = 4294954514;
LABEL_11:
    int v11 = (CFTypeRef *)MEMORY[0x263EFFB38];
    goto LABEL_12;
  }
  bzero(v14, 0x14uLL);
  __int16 v15 = 328;
  int v16 = *(_DWORD *)(a3 + 132);
  int v8 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v14, 0x14u, 0, 0xFFFFFFFF);
  if (v8) {
    uint64_t v9 = 4294954513;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v17 == 0;
  }
  if (v10) {
    goto LABEL_11;
  }
  int v11 = (CFTypeRef *)MEMORY[0x263EFFB40];
LABEL_12:
  CFTypeRef v12 = *v11;
  CFRetain(*v11);
  *a2 = v12;
  return v9;
}

uint64_t CopyValidateComplianceWithDetails(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(a3 + 136)) {
    return 4294954514;
  }
  bzero(v11, 0x14uLL);
  __int16 v12 = 328;
  int v13 = *(_DWORD *)(a3 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x14u, 0, 0xFFFFFFFF))return 4294954513; {
  int valuePtr = v14;
  }
  CFNumberRef v10 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t CopyProjectorFaultStatus(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t valuePtr = 0;
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 0x100000000;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))
  {
    uint64_t v9 = 4294954513;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t valuePtr = v16 | ((unint64_t)v15 << 32);
  }
  *a2 = CFNumberCreate(a1, kCFNumberSInt64Type, &valuePtr);
  return v9;
}

uint64_t CopyProjectorRosalineFaultStatus(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t valuePtr = 0;
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 0x200000002;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))
  {
    uint64_t v9 = 4294954513;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t valuePtr = v15;
  }
  *a2 = CFNumberCreate(a1, kCFNumberLongLongType, &valuePtr);
  return v9;
}

uint64_t SetDynamicVoltageEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  char v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  uint64_t result = H16ISP::H16ISPDevice::SetDynamicVoltageEnable(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8);
  if (result)
  {
    CFNumberRef v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetDynamicVoltageEnable();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyProjectorRikerFaultStatus()
{
  return 4294954509;
}

uint64_t CopyProjectorQuarkFaultStatus(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v18, 0x4CuLL);
  int v20 = *(_DWORD *)(a3 + 132);
  __int16 v19 = 1570;
  uint64_t v21 = 0x600000007;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v18, 0x4Cu, 0, 0xFFFFFFFF))return 4294954513; {
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  int v17 = v22;
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  CFDictionarySetValue(Mutable, @"ChipState", v10);
  CFRelease(v10);
  int v17 = v23;
  CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  CFDictionarySetValue(Mutable, @"Armed", v11);
  CFRelease(v11);
  int v17 = v24;
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  CFDictionarySetValue(Mutable, @"FaultState", v12);
  CFRelease(v12);
  CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, v25);
  CFDictionarySetValue(Mutable, @"FaultDT0", v13);
  CFRelease(v13);
  int v17 = v25[1] & 0xFFFFFF;
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  CFDictionarySetValue(Mutable, @"FaultDT1", v14);
  CFRelease(v14);
  CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt32Type, v26);
  CFDictionarySetValue(Mutable, @"FaultDT01ST", v15);
  CFRelease(v15);
  int v17 = v26[1] & 0xFFFFFF;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  CFDictionarySetValue(Mutable, @"FaultDT11ST", v16);
  CFRelease(v16);
  uint64_t result = 0;
  *a2 = Mutable;
  return result;
}

uint64_t CopyProjectorWillFaultStatus(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = 0;
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 0x700000005;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))
  {
    uint64_t v9 = 4294954513;
  }
  else
  {
    uint64_t v9 = 0;
    int valuePtr = v15;
  }
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return v9;
}

uint64_t CopyRikerResistance()
{
  return 4294954509;
}

uint64_t CopyRikerState()
{
  return 4294954509;
}

uint64_t CopyProjectorRikerStatus()
{
  return 4294954509;
}

uint64_t CopyBaneResistance(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 0xA00000002;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))return 4294954516; {
  CFNumberRef v10 = CFNumberCreate(a1, kCFNumberIntType, &v15);
  }
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t CopyBaneState(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 0xB00000002;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))return 4294954516; {
  CFNumberRef v10 = CFNumberCreate(a1, kCFNumberIntType, &v15);
  }
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t CopyProjectorMamaBearStatus(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = 0;
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 1;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))
  {
    uint64_t v9 = 4294954513;
  }
  else
  {
    uint64_t v9 = 0;
    int valuePtr = v15;
  }
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return v9;
}

uint64_t CopyProjectorRigelPulseCount(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = 0;
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 0x800000000;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))
  {
    uint64_t v9 = 4294954513;
  }
  else
  {
    uint64_t v9 = 0;
    int valuePtr = v15;
  }
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return v9;
}

uint64_t CopyProjectorRigelSerialNumber(const __CFAllocator *a1, CFStringRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  bzero(v11, 0x68uLL);
  __int16 v12 = 1565;
  int v13 = *(_DWORD *)(a3 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x68u, 0, 0xFFFFFFFF))
  {
    CFStringRef v9 = 0;
    uint64_t result = 4294954513;
  }
  else
  {
    CFStringRef v9 = CFStringCreateWithCString(a1, v14, 0x8000100u);
    uint64_t result = 0;
  }
  *a2 = v9;
  return result;
}

uint64_t CopyGuadaloupLastResistance(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 0xD00000006;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))return 4294954513; {
  int valuePtr = v15;
  }
  CFNumberRef v10 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t CopyGuadaloupRecordRegisters(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 0xE00000006;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))return 4294954513; {
  uint64_t valuePtr = v15;
  }
  CFNumberRef v10 = CFNumberCreate(a1, kCFNumberSInt64Type, &valuePtr);
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t SetRigelFaultInterruptMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFNumberRef v6 = *(H16ISP::H16ISPDevice **)(a4 + 24);
  int v7 = *(_DWORD *)(a2 + 132);
  bzero(v13, 0x20uLL);
  int v15 = v7;
  __int16 v14 = 14094;
  int v17 = 4;
  long long v16 = xmmword_2469DABE0;
  int v8 = H16ISP::H16ISPDevice::ISP_SendCommand(v6, v13, 0x20u, 0, 0xFFFFFFFF);
  uint64_t v9 = 4294954516;
  if (!v8)
  {
    CFNumberRef v10 = *(H16ISP::H16ISPDevice **)(a4 + 24);
    int v11 = *(_DWORD *)(a2 + 132);
    bzero(v13, 0x20uLL);
    int v15 = v11;
    __int16 v14 = 14094;
    int v17 = 1;
    long long v16 = xmmword_2469DABF0;
    if (H16ISP::H16ISPDevice::ISP_SendCommand(v10, v13, 0x20u, 0, 0xFFFFFFFF)) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return v9;
}

uint64_t ForceOpenCircuitFault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(H16ISP::H16ISPDevice **)(a4 + 24);
  int v5 = *(_DWORD *)(a2 + 132);
  bzero(v7, 0x20uLL);
  int v9 = v5;
  __int16 v8 = 14094;
  int v11 = 1;
  long long v10 = xmmword_2469DAC00;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(v4, v7, 0x20u, 0, 0xFFFFFFFF)) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetYogiFaultCSpecialFunctions(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  *(void *)__int16 v8 = 0;
  if (DebugSpecialFunctionGetHandle(*(H16ISP::H16ISPDevice **)(a4 + 24), v8, a3)) {
    return 4294954516;
  }
  uint64_t v6 = *(void *)v8;
  uint64_t v5 = 4294954516;
  if (!DebugSpecialFunction(*(H16ISP::H16ISPDevice **)(a4 + 24), *(uint64_t *)v8, 4, 10500))
  {
    if (DebugSpecialFunction(*(H16ISP::H16ISPDevice **)(a4 + 24), v6, 3, 200000)) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return v5;
}

uint64_t SetRosalineCalCurrent(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)int v11 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  uint64_t v8 = 4294954516;
  if (!DebugSpecialFunctionGetHandle(*(H16ISP::H16ISPDevice **)(a4 + 24), v11, v7))
  {
    if (DebugSpecialFunction(*(H16ISP::H16ISPDevice **)(a4 + 24), *(uint64_t *)v11, 3, valuePtr)) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return v8;
}

uint64_t CopyProjectorSpecCalibrationValue(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = -1;
  if (*(unsigned char *)(a3 + 3784))
  {
    int v9 = -1;
    if (H16ISP::ProjectorManager::getFloodProjectorCalibrationValue(*(H16ISP::ProjectorManager **)(a5 + 24), (H16ISP::H16ISPDevice *)*(unsigned int *)(a3 + 132), &valuePtr, &v9, (int *)a5))uint64_t v7 = 4294954513; {
    else
    }
      uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 4294954514;
  }
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return v7;
}

uint64_t SetRosalineCalPulseWidth(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)int v11 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  uint64_t v8 = 4294954516;
  if (!DebugSpecialFunctionGetHandle(*(H16ISP::H16ISPDevice **)(a4 + 24), v11, v7))
  {
    if (DebugSpecialFunction(*(H16ISP::H16ISPDevice **)(a4 + 24), *(uint64_t *)v11, 4, valuePtr)) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return v8;
}

uint64_t CopyProjectorSpecCalibrationPw(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = -1;
  if (*(unsigned char *)(a3 + 3784))
  {
    int v9 = -1;
    if (H16ISP::ProjectorManager::getFloodProjectorCalibrationValue(*(H16ISP::ProjectorManager **)(a5 + 24), (H16ISP::H16ISPDevice *)*(unsigned int *)(a3 + 132), &v9, &valuePtr, (int *)a5))uint64_t v7 = 4294954513; {
    else
    }
      uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 4294954514;
  }
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return v7;
}

uint64_t CopyProjectorVersion(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  int valuePtr = 0;
  if (*(unsigned char *)(a3 + 3784))
  {
    int v10 = 0;
    if (H16ISP::ProjectorManager::getProjectorVersion(*(H16ISP::ProjectorManager **)(a5 + 24), (H16ISP::H16ISPDevice *)*(unsigned int *)(a3 + 132), &valuePtr, &v10, &v10, a6))uint64_t v8 = 4294954513; {
    else
    }
      uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 4294954514;
  }
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return v8;
}

uint64_t CopyProjectorHWVersion(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  int valuePtr = 0;
  if (*(unsigned char *)(a3 + 3784))
  {
    int v10 = 0;
    if (H16ISP::ProjectorManager::getProjectorVersion(*(H16ISP::ProjectorManager **)(a5 + 24), (H16ISP::H16ISPDevice *)*(unsigned int *)(a3 + 132), &v10, &v10, &valuePtr, a6))uint64_t v8 = 4294954513; {
    else
    }
      uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 4294954514;
  }
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return v8;
}

uint64_t CopyProjectorTokenVersion(const __CFAllocator *a1, CFNumberRef *a2)
{
  int valuePtr = MobileProjectorToken::VERSION;
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return 0;
}

uint64_t SetPDEPreset(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID() || *(void *)(a2 + 136)) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  uint64_t result = 0;
  *(_DWORD *)(a2 + 3940) = valuePtr;
  return result;
}

uint64_t SetPCEOutputFormat(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (valuePtr > 1) {
    return 4294954516;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 3944) = valuePtr;
  return result;
}

uint64_t SetFusionMode(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  uint64_t result = 0;
  int v6 = *(_DWORD *)(a2 + 3948);
  int v7 = valuePtr;
  if (v6 == valuePtr) {
    return result;
  }
  uint64_t v8 = *(void *)(a2 + 136);
  if (!v8)
  {
    if (valuePtr <= 2)
    {
      uint64_t result = 0;
      *(_DWORD *)(a2 + 3948) = valuePtr;
      return result;
    }
    return 4294954516;
  }
  if (v6 == 1 && valuePtr == 2 && !*(unsigned char *)(a2 + 3956)
    || (uint64_t result = 4294954612, valuePtr == 1) && v6 == 2 && !*(unsigned char *)(a2 + 3956))
  {
    *(_DWORD *)(a2 + 3948) = valuePtr;
    H16ISP::H16ISPFrameReceiver::setFuseMode(v8, v7);
    uint64_t result = *(void *)(a2 + 4240);
    if (result)
    {
      int v9 = 0;
      H16ISP::H16ISPFilterGraphManager::GetNode((void *)result, 5, &v9);
      if (v9) {
        H16ISP::H16ISPFusionNode::SetFusionMode(v9, valuePtr, *(unsigned __int8 *)(a2 + 3956));
      }
      return 0;
    }
  }
  return result;
}

uint64_t SetHwGdrMode(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)a1);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 3956) = Value != 0;
  return result;
}

uint64_t SetCinVidMode(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)a1);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 3976) = Value != 0;
  return result;
}

uint64_t CopySupportedDepthPerspectivePortTypes(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), 1718186595))
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
    if (H16ISP::H16ISPDevice::hasSensorType(*(void *)(a5 + 24), 1718775412)) {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F2C270]);
    }
    if (H16ISP::H16ISPDevice::hasSensorType(*(void *)(a5 + 24), 1718776695)) {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F2C288]);
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  *a2 = Mutable;
  return 0;
}

uint64_t CopySupportedOutputConfigurations(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  uint64_t v10 = *(void *)(a5 + 24);
  int v11 = *(_DWORD *)(*(void *)(v10 + 4384) + 96 * *(unsigned int *)(a3 + 132) + 16);
  switch(v11)
  {
    case 1919251564:
      goto LABEL_9;
    case 1919246706:
      if (!H16ISP::H16ISPDevice::hasSensorType(v10, 1919251319)) {
        break;
      }
LABEL_9:
      unsigned __int8 v23 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
      int valuePtr = 825306677;
      CFNumberRef v24 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
      CFArrayAppendValue(v23, v24);
      CFRelease(v24);
      int v33 = 1751411059;
      CFNumberRef v25 = CFNumberCreate(a1, kCFNumberIntType, &v33);
      CFArrayAppendValue(v23, v25);
      CFRelease(v25);
      if (H16ISP::DepthRearConfigurations::Count(v26))
      {
        uint64_t v28 = 0;
        do
        {
          BOOL v29 = H16ISP::DepthRearConfigurations::supports(v28, *(void *)(*(void *)(a5 + 24) + 4384), v27);
          if (v29)
          {
            int WidthOfPreset = H16ISP::DepthRearConfigurations::getWidthOfPreset(v28);
            int HeightOfPreset = H16ISP::DepthRearConfigurations::getHeightOfPreset(v28);
            addSupportedConfiguration(a1, Mutable, WidthOfPreset, HeightOfPreset, 0, v23, 0, 1, 1, v28 == 4);
          }
          uint64_t v28 = (H16ISP::DepthRearConfigurations *)(v28 + 1);
        }
        while (v28 < H16ISP::DepthRearConfigurations::Count((H16ISP::DepthRearConfigurations *)v29));
      }
      unsigned __int8 v22 = v23;
      goto LABEL_15;
    case 1718186595:
      __int16 v12 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
      int valuePtr = 825437747;
      CFNumberRef v13 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
      CFArrayAppendValue(v12, v13);
      CFRelease(v13);
      int v33 = 1751410032;
      CFNumberRef v14 = CFNumberCreate(a1, kCFNumberIntType, &v33);
      CFArrayAppendValue(v12, v14);
      CFRelease(v14);
      int v33 = 1751411059;
      CFNumberRef v15 = CFNumberCreate(a1, kCFNumberIntType, &v33);
      CFArrayAppendValue(v12, v15);
      CFRelease(v15);
      if (H16ISP::DepthFrontConfigurations::Count(v16))
      {
        int v17 = 0;
        do
        {
          int v18 = H16ISP::DepthFrontConfigurations::getWidthOfPreset(v17);
          int v19 = H16ISP::DepthFrontConfigurations::getHeightOfPreset(v17);
          BOOL RegistrationOfPreset = H16ISP::DepthFrontConfigurations::getRegistrationOfPreset(v17);
          addSupportedConfiguration(a1, Mutable, v18, v19, RegistrationOfPreset, v12, 1, 0, 0, v17 == 4);
          int v17 = (H16ISP::DepthFrontConfigurations *)(v17 + 1);
        }
        while (v17 < H16ISP::DepthFrontConfigurations::Count(v21));
      }
      unsigned __int8 v22 = v12;
LABEL_15:
      CFRelease(v22);
      uint64_t result = 0;
      *a2 = Mutable;
      return result;
  }
  CFRelease(Mutable);
  return 4294954514;
}

uint64_t CopyValidateCalibration(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v13 = *MEMORY[0x263EF8340];
  __int16 v10 = 24577;
  int v11 = *(_DWORD *)(v6 + 132);
  bzero(v12, 0x33BCuLL);
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v3 + 24), v9, 0x33C8u, 0, 0xFFFFFFFF);
  if (result) {
    return 4294954516;
  }
  if (v12[0]) {
    uint64_t v8 = (void *)MEMORY[0x263EFFB40];
  }
  else {
    uint64_t v8 = (void *)MEMORY[0x263EFFB38];
  }
  *uint64_t v5 = *v8;
  return result;
}

uint64_t SetEnableFIDMetadata(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  int v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  if (H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 35, v9 != 0))return 4294954516; {
  uint64_t v8 = 4294954516;
  }
  if (!H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 36, v9 != 0))
  {
    if (H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 40, v9 != 0))return 4294954516; {
    else
    }
      return 0;
  }
  return v8;
}

uint64_t SetEnableFIDDebugMetadata(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  int v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  int v10 = H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 38, v9 != 0);
  if (!v10) {
    int v10 = H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 39, v9 != 0);
  }
  if (v10) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetEnableFID(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  int v9 = *(H16ISP::H16ISPDevice **)(a4 + 24);
  int v10 = *(_DWORD *)(a2 + 132);
  if (v8) {
    int v11 = H16ISP::H16ISPDevice::FIDStart(v9, v10, 0, 0);
  }
  else {
    int v11 = H16ISP::H16ISPDevice::FIDStop(v9, v10);
  }
  if (v11) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetAEMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  uint64_t v8 = 4294954516;
  if (v7 == CFNumberGetTypeID())
  {
    int valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    if (H16ISP::H16ISPDevice::SetAEMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr))return 4294954516; {
    else
    }
      return 0;
  }
  return v8;
}

uint64_t SetAETarget(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  uint64_t v8 = 4294954516;
  if (v7 == CFNumberGetTypeID())
  {
    int valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    if (H16ISP::H16ISPDevice::SetAETarget(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr))return 4294954516; {
    else
    }
      return 0;
  }
  return v8;
}

uint64_t CopyAETarget(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int valuePtr = 0;
  if (H16ISP::H16ISPDevice::GetAETarget(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &valuePtr))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetFIDState(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  switch(valuePtr)
  {
    case 2:
      goto LABEL_6;
    case 1:
      goto LABEL_8;
    case 0:
LABEL_6:
      int v7 = H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), 0, 5890, 0, 0xFFFFFFFF);
      if (v7 || valuePtr == 2)
      {
LABEL_9:
        if (v7) {
          return 4294954516;
        }
        return 0;
      }
LABEL_8:
      int v7 = H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), 0, 5888, 1, 0xFFFFFFFF);
      goto LABEL_9;
  }
  return 0;
}

uint64_t EnableIRFramesToPDE(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  BOOL v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  if (H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 8197, v8, 0xFFFFFFFF))
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      return 4294954514;
    }
    goto LABEL_14;
  }
  uint64_t result = H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 16397, v8, 0xFFFFFFFF);
  if (!result) {
    return result;
  }
  int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v11 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
LABEL_14:
  }
    EnableIRFramesToPDE();
  return 4294954514;
}

uint64_t SetGMCDebug(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  uint64_t v8 = 4294954516;
  if (v7 == CFNumberGetTypeID())
  {
    int valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    if (H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 16399, valuePtr, 0xFFFFFFFF))return 4294954516; {
    else
    }
      return 0;
  }
  return v8;
}

uint64_t SetColorGMCDebug(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  uint64_t v8 = 4294954516;
  if (v7 == CFNumberGetTypeID())
  {
    int valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    if (H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 16406, valuePtr, 0xFFFFFFFF))return 4294954516; {
    else
    }
      return 0;
  }
  return v8;
}

uint64_t SetSIFROverrideMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (valuePtr > 3) {
    return 4294954516;
  }
  uint64_t result = H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 288, valuePtr, 0xFFFFFFFF);
  if (result)
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetSIFROverrideMode();
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetSplitPDOverrideMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (valuePtr > 3) {
    return 4294954516;
  }
  uint64_t result = H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 280, valuePtr, 0xFFFFFFFF);
  if (result)
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetSplitPDOverrideMode();
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetAPSActuator(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  __int16 valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt16Type, &valuePtr);
  uint64_t result = H16ISP::H16ISPDevice::SetAPSActuator(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  if (result)
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetAPSActuator();
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetMasterSlaveAPSFocus(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 136))
  {
    CFTypeID v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetMasterSlaveAPSFocus();
    }
    return 4294954612;
  }
  else if (cf && (CFTypeID v9 = CFGetTypeID(cf), v9 == CFBooleanGetTypeID()))
  {
    int v10 = CFEqual(cf, (CFTypeRef)*MEMORY[0x263EFFB40]);
    int v11 = *(unsigned __int16 *)(a2 + 132);
    if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
      v11 |= 0x80000000;
    }
    uint64_t result = H16ISP::H16ISPDevice::SetMasterSlaveAPSFocus(*(H16ISP::H16ISPDevice **)(a4 + 24), v11, v10 != 0);
    if (result)
    {
      __int16 v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        __int16 v12 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        SetMasterSlaveAPSFocus();
      }
      return 4294954514;
    }
  }
  else
  {
    return 4294954516;
  }
  return result;
}

uint64_t SetMasterSlaveContrastFocus(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 136))
  {
    CFTypeID v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetMasterSlaveAPSFocus();
    }
    return 4294954612;
  }
  else if (cf && (CFTypeID v9 = CFGetTypeID(cf), v9 == CFBooleanGetTypeID()))
  {
    int v10 = CFEqual(cf, (CFTypeRef)*MEMORY[0x263EFFB40]);
    int v11 = *(unsigned __int16 *)(a2 + 132);
    if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
      v11 |= 0x80000000;
    }
    uint64_t result = H16ISP::H16ISPDevice::SetMasterSlaveContrastFocus(*(H16ISP::H16ISPDevice **)(a4 + 24), v11, v10 != 0);
    if (result)
    {
      __int16 v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        __int16 v12 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        SetMasterSlaveContrastFocus();
      }
      return 4294954514;
    }
  }
  else
  {
    return 4294954516;
  }
  return result;
}

uint64_t SetForceSingleChannelCommands(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 3908) = v5 != 0;
  return result;
}

uint64_t SetTorchManualParameters(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v2 = (const __CFDictionary *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  CFDictionaryRef v7 = v2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  LODWORD(v28) = 101;
  CFTypeID v8 = CFGetTypeID(v2);
  if (v8 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  unsigned int v25 = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v7, @"WarmLED0Level");
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v7, @"WarmLED1Level");
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v7, @"CoolLED0Level");
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v7, @"CoolLED1Level");
  CFNumberRef v13 = v12;
  if (v10)
  {
    CFNumberGetValue(v10, kCFNumberIntType, &v25);
    unsigned int v14 = v25;
    if (!v13) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  unsigned int v14 = 0;
  if (v12)
  {
LABEL_4:
    CFNumberGetValue(v13, kCFNumberIntType, &v25);
    unsigned int v14 = v14 & 0xFFFF00FF | (v25 << 8);
  }
LABEL_5:
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &v25);
    unsigned int v14 = v14 & 0xFF00FFFF | (v25 << 16);
  }
  if (v11)
  {
    CFNumberGetValue(v11, kCFNumberIntType, &v25);
    v14 |= v25 << 24;
  }
  uint64_t v15 = &_os_log_internal;
  if (v14)
  {
    if (!*(void *)(v6 + 136)) {
      H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), 1u, 1u);
    }
    int v16 = H16ISP::H16ISPDevice::SetIndividualTorchLEDLevels(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), v14);
    if (v16)
    {
      int v17 = v16;
      int v18 = 0;
      goto LABEL_25;
    }
    char v20 = 1;
  }
  else
  {
    int v17 = H16ISP::H16ISPDevice::SetIndividualTorchLEDLevels(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), 0);
    if (!*(void *)(v6 + 136)) {
      H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), 0, 0);
    }
    int v18 = 0;
    if (v17)
    {
LABEL_25:
      unsigned __int8 v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v15)
      {
        unsigned __int8 v22 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        unsigned int v25 = 136315394;
        *(void *)__int16 v26 = "SetTorchManualParameters";
        *(_WORD *)&_DWORD v26[8] = 1024;
        int v27 = v17;
        _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_INFO, "%s - Could not set strobe state, res = 0x%x\n\n", (uint8_t *)&v25, 0x12u);
        if (v18) {
          goto LABEL_29;
        }
      }
      else if (v18)
      {
        goto LABEL_29;
      }
      uint64_t v19 = 4294954516;
      goto LABEL_32;
    }
    char v20 = 0;
  }
  char v29 = v20;
  uint64_t v21 = *(void *)(v4 + 200);
  if (!v21)
  {
    int v17 = 0;
    int v18 = 1;
    goto LABEL_25;
  }
  H16ISP::H16ISPServicesRemote::SetProperty(v21, &v28);
  int v17 = 0;
LABEL_29:
  uint64_t v19 = 0;
LABEL_32:
  unsigned __int8 v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v15)
  {
    unsigned __int8 v23 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    unsigned int v25 = 67109376;
    *(_DWORD *)__int16 v26 = v14;
    *(_WORD *)&UInt8 v26[4] = 1024;
    *(_DWORD *)&v26[6] = v17;
    _os_log_impl(&dword_24680F000, v23, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting individual LED levels to %x. result=0x%08X\n\n", (uint8_t *)&v25, 0xEu);
  }
  return v19;
}

uint64_t SetLPDPFilterEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  BOOL v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  uint64_t result = H16ISP::H16ISPDevice::SetCameraControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0, v8);
  if (result)
  {
    CFNumberRef v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetLPDPFilterEnable();
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetHighSpeedOutputLevel(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  __int16 valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberShortType, &valuePtr);
  uint64_t result = H16ISP::H16ISPDevice::SetHighSpeedOutputLevel(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  if (result)
  {
    CFTypeID v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetHighSpeedOutputLevel();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopySupportedLinkFrequencies(uint64_t a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!Mutable) {
    return 4294954510;
  }
  CFTypeID v9 = Mutable;
  unsigned int v16 = 0;
  if (H16ISP::H16ISPDevice::GetNumberOfMipiFrequencies(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v16))return 4294954514; {
  if (v16)
  }
  {
    for (unsigned int i = 0; i < v16; ++i)
    {
      uint64_t valuePtr = 0;
      unsigned int v14 = 0;
      if (H16ISP::H16ISPDevice::GetMIPIFrequency(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), i, &v14))break; {
      uint64_t valuePtr = v14;
      }
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      CFArrayAppendValue(v9, v11);
      CFRelease(v11);
    }
  }
  int Count = CFArrayGetCount(v9);
  if (v16 != Count) {
    return 4294954514;
  }
  uint64_t result = 0;
  *a2 = v9;
  return result;
}

uint64_t SetLinkFrequencyIndex(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  uint64_t result = H16ISP::H16ISPDevice::SetMIPIFrequencyIndex(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  if (result)
  {
    CFTypeID v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetLinkFrequencyIndex();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyLinkFrequencyIndex(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int valuePtr = 0;
  if (H16ISP::H16ISPDevice::GetCurrentMIPIFrequencyIndex(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &valuePtr))return 4294954514; {
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
  }
  uint64_t result = 0;
  *a2 = v7;
  return result;
}

uint64_t SetTestPattern(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFStringGetTypeID()) {
    return 4294954516;
  }
  __int16 v8 = CFEqual(a1, @"TestPatternNone") == 0;
  uint64_t result = H16ISP::H16ISPDevice::TestPatternConfig(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8, a1);
  if (result)
  {
    CFNumberRef v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetTestPattern();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopySupportedTestPatterns(uint64_t a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!Mutable) {
    return 4294954510;
  }
  CFTypeID v9 = Mutable;
  uint64_t result = H16ISP::H16ISPDevice::GetSupportedTestPatterns(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), Mutable);
  if (!result) {
    *a2 = v9;
  }
  return result;
}

uint64_t SetAPSDistance(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  float valuePtr = 0.0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
  int v8 = vcvts_n_s32_f32(valuePtr, 8uLL);
  uint64_t result = H16ISP::H16ISPDevice::SetAPSDistance(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8);
  if (result)
  {
    int v10 = result;
    CFNumberRef v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)buf = 67109632;
      int v15 = v12;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_error_impl(&dword_24680F000, v11, OS_LOG_TYPE_ERROR, "SetAPSDistance failed: channel=%u distance [in cm (Q24.8)]=%d ret=0x%08x\n\n", buf, 0x14u);
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetAPSPosition(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  float valuePtr = 0.0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
  uint64_t result = H16ISP::H16ISPDevice::SetAPSPosition(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), vcvtd_n_s64_f64(valuePtr, 8uLL));
  if (result)
  {
    int v9 = result;
    int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)buf = 67109632;
      int v14 = v11;
      __int16 v15 = 2048;
      double v16 = valuePtr;
      __int16 v17 = 1024;
      int v18 = v9;
      _os_log_error_impl(&dword_24680F000, v10, OS_LOG_TYPE_ERROR, "SetAPSPosition failed: channel=%u, zposition [in um]=%f, ret=0x%08x\n\n", buf, 0x18u);
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetAPSSearchRange(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"MacroLimit");
  CFNumberGetValue(Value, kCFNumberFloatType, (char *)&valuePtr + 4);
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"InfLimit");
  CFNumberGetValue(v9, kCFNumberFloatType, &valuePtr);
  uint64_t result = H16ISP::H16ISPDevice::SetAPSSearchRange(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), vcvtd_n_s64_f64(*((float *)&valuePtr + 1), 8uLL), vcvtd_n_s64_f64(*(float *)&valuePtr, 8uLL));
  if (result)
  {
    int v11 = result;
    int v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)buf = 67109888;
      int v16 = v13;
      __int16 v17 = 2048;
      double v18 = *((float *)&valuePtr + 1);
      __int16 v19 = 2048;
      double v20 = *(float *)&valuePtr;
      __int16 v21 = 1024;
      int v22 = v11;
      _os_log_error_impl(&dword_24680F000, v12, OS_LOG_TYPE_ERROR, "SetAPSSearchRange failed: channel=%u, macroLimit [in um]=%f, infLimit [in um]=%f, ret=0x%08x\n\n", buf, 0x22u);
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetDynamicVoltageLevel(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"PVDD1"))
  {
    float valuePtr = 0.0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"PVDD1");
    CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
    if (H16ISP::H16ISPDevice::SetDynamicVoltageLevel(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0, valuePtr))return 4294954514; {
    uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 4294954516;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"PVDD2"))
  {
    float v12 = 0.0;
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"PVDD2");
    CFNumberGetValue(v11, kCFNumberFloatType, &v12);
    if (H16ISP::H16ISPDevice::SetDynamicVoltageLevel(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1, v12))return 4294954514; {
    else
    }
      return 0;
  }
  return v9;
}

uint64_t SetLPDPEqualization(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  unsigned __int16 valuePtr = 0;
  int v25 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  unsigned __int16 v21 = 0;
  value = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"LPDPEqualizationMode", (const void **)&value)) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"LPDPEqualizationCTLEc", (const void **)&value)) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v25);
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"LPDPEqualizationCTLEr", (const void **)&value)) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v24 + 4);
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"LPDPEqualizationDFEh1", (const void **)&value)) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v24);
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"LPDPEqualizationDFEh2", (const void **)&value)) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v23 + 4);
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"LPDPEqualizationDFEh3", (const void **)&value)) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v23);
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"LPDPEqualizationDFEh4", (const void **)&value)) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v22 + 4);
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"LPDPEqualizationDFEh5", (const void **)&value)) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v22);
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"LPDPEqualizationVMMode", (const void **)&value))
  {
    CFNumberRef v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      SetLPDPEqualization(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    printf("No Vmode found");
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v21);
  uint64_t result = H16ISP::H16ISPDevice::SetLPDPEqualization(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr, v25, SHIDWORD(v24), v24, SHIDWORD(v23), v23, HIDWORD(v22), v22, v21);
  if (result)
  {
    int v9 = result;
    int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v19 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)buf = 136317954;
      xpc_object_t v28 = "SetLPDPEqualization";
      __int16 v29 = 1024;
      int v30 = v19;
      __int16 v31 = 1024;
      int v32 = valuePtr;
      __int16 v33 = 1024;
      int v34 = v25;
      __int16 v35 = 1024;
      int v36 = HIDWORD(v24);
      __int16 v37 = 1024;
      int v38 = v24;
      __int16 v39 = 1024;
      int v40 = HIDWORD(v23);
      __int16 v41 = 1024;
      int v42 = v23;
      __int16 v43 = 1024;
      int v44 = HIDWORD(v22);
      __int16 v45 = 1024;
      int v46 = v22;
      __int16 v47 = 1024;
      int v48 = v21;
      __int16 v49 = 1024;
      int v50 = v9;
      _os_log_error_impl(&dword_24680F000, v10, OS_LOG_TYPE_ERROR, "%s - SetLPDPEqualization failed: channel=%u, mode=%d, CTLE_c=%d, CTLE_r=%d, DFE_h1=%d, DFE_h2=%d, DFE_h3=%d, DFE_h4=%d, DFE_h5=%d, VMmode=%d, ret=0x%08x\n", buf, 0x4Eu);
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyLPDPRC(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v15, 0x10uLL);
  __int16 v16 = 368;
  int v17 = *(_DWORD *)(a3 + 132);
  if (!H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v15, 0x10u, 0, 0xFFFFFFFF))
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFNumberRef v11 = CFNumberCreate(v10, kCFNumberSInt8Type, &v18);
      if (v11)
      {
        CFNumberRef v12 = v11;
        CFDictionarySetValue(Mutable, @"LPDPRCParamR", v11);
        CFRelease(v12);
        CFNumberRef v13 = CFNumberCreate(v10, kCFNumberSInt8Type, (char *)&v18 + 1);
        if (v13)
        {
          CFNumberRef v14 = v13;
          CFDictionarySetValue(Mutable, @"LPDPRCParamC", v13);
          CFRelease(v14);
          uint64_t result = 4294954516;
          goto LABEL_9;
        }
      }
      CFMutableArrayRef Mutable = 0;
    }
    uint64_t result = 4294954510;
    goto LABEL_9;
  }
  CFMutableArrayRef Mutable = 0;
  uint64_t result = 4294954513;
LABEL_9:
  *a2 = Mutable;
  return result;
}

uint64_t CopySensorNVM(uint64_t a1, void *a2, uint64_t a3)
{
  if (!*(void *)(a3 + 136)) {
    operator new[]();
  }
  *a2 = 0;
  return 4294954612;
}

uint64_t SetPCECalibration(uint64_t a1, uint64_t a2)
{
  CFDataRef v2 = (const __CFData *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!v2) {
    return 4294954516;
  }
  uint64_t v4 = v3;
  CFDataRef v5 = v2;
  CFTypeID v6 = CFGetTypeID(v2);
  if (v6 != CFDataGetTypeID()) {
    return 4294954516;
  }
  BytePtr = CFDataGetBytePtr(v5);
  if (!BytePtr) {
    return 4294954516;
  }
  int v8 = BytePtr;
  int v9 = *(H16ISP::H16ISPDevice **)(v4 + 24);
  int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel((uint64_t)v9, 1718186595);
  if (SensorChannel == -1) {
    return 4294954514;
  }
  int v11 = SensorChannel;
  bzero(v13, 0x337CuLL);
  __int16 v14 = 24581;
  int v15 = v11;
  memcpy(v16, v8, sizeof(v16));
  return H16ISP::H16ISPDevice::ISP_SendCommand(v9, v13, 0x337Cu, 0, 0xFFFFFFFF);
}

uint64_t CopyPCECalibration(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  CFAllocatorRef v5 = (const __CFAllocator *)v2;
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!getPCECalib(*(void *)(v6 + 24), (uint64_t)bytes)) {
    return 4294954516;
  }
  CFDataRef v7 = CFDataCreate(v5, bytes, 13168);
  uint64_t result = 0;
  CFDataRef *v4 = v7;
  return result;
}

uint64_t CopyPCEShiftParams(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  CFAllocatorRef v5 = (const __CFAllocator *)v2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!getPCECalib(*(void *)(v6 + 24), (uint64_t)v10)) {
    return 4294954516;
  }
  CFDataRef v7 = CFDataCreate(v5, bytes, 28);
  uint64_t result = 0;
  CFDataRef *v4 = v7;
  return result;
}

uint64_t CopyPCEDepthConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  CFAllocatorRef v5 = (const __CFAllocator *)v2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!getPCECalib(*(void *)(v6 + 24), (uint64_t)v10)) {
    return 4294954516;
  }
  CFDataRef v7 = CFDataCreate(v5, v9, 40);
  uint64_t result = 0;
  CFDataRef *v4 = v7;
  return result;
}

uint64_t SetRawImageProcessStillFlowEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  bzero(v10, 0x10uLL);
  __int16 v11 = 338;
  __int16 v12 = *(_DWORD *)(a2 + 132);
  int v13 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v10, 0x10u, 0, 0xFFFFFFFF);
  if (result)
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetRawImageProcessStillFlowEnabled();
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetProximityMonitoringEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (CFBooleanGetValue((CFBooleanRef)a1)) {
    int v8 = 0;
  }
  else {
    int v8 = 196608;
  }
  int v9 = *(H16ISP::H16ISPDevice **)(a4 + 24);
  int v10 = *(_DWORD *)(a2 + 132);

  return H16ISP::H16ISPDevice::WritePropertyValue(v9, v10, 1442, v8, 0xFFFFFFFF);
}

uint64_t SetPCERFCLockEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  BOOL v8 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  int v9 = *(H16ISP::H16ISPDevice **)(a4 + 24);
  int v10 = *(_DWORD *)(a2 + 132);

  return H16ISP::H16ISPDevice::WritePropertyValue(v9, v10, 16396, v8, 0xFFFFFFFF);
}

uint64_t SetPCERegsUpdateTweak(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  return H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 16398, valuePtr, 0xFFFFFFFF);
}

uint64_t CopyUseAuxRawPool(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 4126)) {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  else {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t CopyMamaBearCapacitance(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 1;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))return 4294954516; {
  CFNumberRef v10 = CFNumberCreate(a1, kCFNumberIntType, &v15);
  }
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t CopyMamaBearState(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v11, 0x4CuLL);
  int v13 = *(_DWORD *)(a3 + 132);
  __int16 v12 = 1570;
  uint64_t v14 = 1;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v11, 0x4Cu, 0, 0xFFFFFFFF))return 4294954516; {
  CFNumberRef v10 = CFNumberCreate(a1, kCFNumberIntType, &v15);
  }
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t SetReplayEnabled(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  uint64_t v6 = (BOOL *)(a2 + 4127);
  int v7 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t result = 0;
  BOOL *v6 = v7 != 0;
  v6[1] = 0;
  return result;
}

uint64_t CopyReplayEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 4127)) {
    uint64_t v3 = (void *)MEMORY[0x263EFFB40];
  }
  else {
    uint64_t v3 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v3;
  return 0;
}

uint64_t SetReplayFrame(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  if (!*(unsigned char *)(a2 + 4127)) {
    return 4294954514;
  }
  uint64_t v8 = *(void *)(a4 + 24);
  if (*(void *)(v8 + 4384))
  {
    unsigned int v9 = *(_DWORD *)(a2 + 48);
    unsigned int v10 = *(_DWORD *)(a2 + 168);
    if (v9 < v10) {
      unsigned int v10 = 0;
    }
    if (H16ISP::H16ISPDevice::GetCameraConfig(v8, *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v9 - v10) + 16), v23, v25))
    {
      __int16 v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        __int16 v11 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        SetReplayFrame();
      }
      return 3758097122;
    }
    if (CFDictionaryGetValue((CFDictionaryRef)a1, @"ReplayMetadataFilePath")
      && CFDictionaryGetValue((CFDictionaryRef)a1, @"ReplayRawFilePath"))
    {
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"ReplaySIFRRawFilePath");
      if (v24 && Value) {
        CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFD08]);
      }
      CFDictionaryGetValue((CFDictionaryRef)a1, @"ReplayRepeatCount");
      operator new[]();
    }
    return 4294954516;
  }
  int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v13 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
  }
  uint64_t v12 = 3758097090;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    SetReplayFrame(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  return v12;
}

uint64_t SetProjectorErrorProtectionEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v11 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t v9 = 4294954514;
  if (!H16ISP::H16ISPDevice::ReadPropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1442, &v11, 0xFFFFFFFF))
  {
    unsigned int v11 = v11 & 0xFFFFFBFF | ((v8 != 0) << 10);
    if (H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1442, v11, 0xFFFFFFFF))return 4294954514; {
    else
    }
      return 0;
  }
  return v9;
}

uint64_t CopyProjectorErrorProtectionEnabled(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *MEMORY[0x263EFFB38];
  unsigned int v8 = 0;
  uint64_t result = H16ISP::H16ISPDevice::ReadPropertyValue(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 1442, &v8, 0xFFFFFFFF);
  if (result)
  {
    uint64_t result = 4294954514;
  }
  else if ((v8 & 0x400) != 0)
  {
    uint64_t v6 = *MEMORY[0x263EFFB40];
  }
  *a2 = v6;
  return result;
}

uint64_t SetGDCMetadataEnabled(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionEnabled(a4, a2, (int *)(a2 + 3860), cf);
}

uint64_t SetManualControl(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  if (!*(unsigned char *)(a2 + 4127)) {
    return 4294954514;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"ManualControlEnable");
  if (!Value) {
    return 4294954516;
  }
  uint64_t v9 = (const void *)*MEMORY[0x263EFFB40];
  int v10 = 2 * (CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0);
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"ManualAWBGains"))
  {
    CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ManualAWBGains");
    if (v11)
    {
      CFDictionaryRef v12 = v11;
      CFTypeID v13 = CFGetTypeID(v11);
      if (v13 == CFDictionaryGetTypeID())
      {
        CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2EA90]);
        CFNumberGetValue(v14, kCFNumberSInt16Type, valuePtr);
        CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2EA88]);
        CFNumberGetValue(v15, kCFNumberSInt16Type, v77);
        CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2EA80]);
        CFNumberGetValue(v16, kCFNumberSInt16Type, v78);
        if (H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0, valuePtr, 6u))return 4294954514; {
      }
        }
    }
    if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0, v10))return 4294954514; {
  }
    }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"FlashAuxManualAWBGains"))
  {
    CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"FlashAuxManualAWBGains");
    if (v17)
    {
      CFDictionaryRef v18 = v17;
      CFTypeID v19 = CFGetTypeID(v17);
      if (v19 == CFDictionaryGetTypeID())
      {
        CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v18, (const void *)*MEMORY[0x263F2EA90]);
        CFNumberGetValue(v20, kCFNumberSInt16Type, valuePtr);
        CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v18, (const void *)*MEMORY[0x263F2EA88]);
        CFNumberGetValue(v21, kCFNumberSInt16Type, v77);
        CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v18, (const void *)*MEMORY[0x263F2EA80]);
        CFNumberGetValue(v22, kCFNumberSInt16Type, v78);
        if (H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 7u, valuePtr, 6u))return 4294954514; {
      }
        }
    }
    if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 7, v10))return 4294954514; {
  }
    }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"ManualCCM"))
  {
    CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ManualCCM");
    if (v23)
    {
      CFArrayRef v24 = v23;
      CFTypeID v25 = CFGetTypeID(v23);
      if (v25 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount(v24) != 9) {
          return 4294954516;
        }
        if (CFArrayGetCount(v24) >= 1)
        {
          CFIndex v26 = 0;
          int v27 = valuePtr;
          do
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v24, v26);
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, v27);
            ++v26;
            v27 += 2;
          }
          while (v26 < CFArrayGetCount(v24));
        }
        if (H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1u, valuePtr, 0x12u))return 4294954514; {
      }
        }
    }
    if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1, v10))return 4294954514; {
  }
    }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"ManualGTC"))
  {
    CFDataRef v29 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ManualGTC");
    if (v29)
    {
      CFDataRef v30 = v29;
      CFTypeID v31 = CFGetTypeID(v29);
      if (v31 == CFDataGetTypeID())
      {
        BytePtr = CFDataGetBytePtr(v30);
        if (*(_WORD *)BytePtr != 257) {
          return 4294954516;
        }
        if (H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 2u, BytePtr + 2, 0x202u))return 4294954514; {
      }
        }
    }
    if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 2, v10))return 4294954514; {
  }
    }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"ManualLTM"))
  {
    CFDictionaryRef v33 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ManualLTM");
    if (v33)
    {
      CFDictionaryRef v34 = v33;
      CFTypeID v35 = CFGetTypeID(v33);
      if (v35 == CFDictionaryGetTypeID())
      {
        CFDataRef v36 = (const __CFData *)CFDictionaryGetValue(v34, @"ManualLTMLUTS");
        unsigned int v37 = CFDataGetLength(v36) + 4;
        int v38 = (UInt8 *)malloc_type_malloc(v37, 0x1A64C8EAuLL);
        if (!v38) {
          return 4294954510;
        }
        __int16 v39 = v38;
        v79.length = CFDataGetLength(v36);
        v79.location = 0;
        CFDataGetBytes(v36, v79, v39 + 4);
        int v40 = CFDictionaryGetValue(v34, @"ManualLTMEnableSpatialCCM");
        UInt8 *v39 = CFEqual(v40, v9) != 0;
        CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v34, @"ManualLTMBytesPerRow");
        CFNumberGetValue(v41, kCFNumberSInt16Type, v39 + 2);
        int v42 = H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 3u, v39, v37);
        free(v39);
        if (v42) {
          return 4294954514;
        }
      }
    }
    if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 3, v10))return 4294954514; {
  }
    }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"ManualLTC"))
  {
    CFDictionaryRef v43 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ManualLTC");
    if (v43)
    {
      CFDictionaryRef v44 = v43;
      CFTypeID v45 = CFGetTypeID(v43);
      if (v45 == CFDictionaryGetTypeID())
      {
        CFDataRef v46 = (const __CFData *)CFDictionaryGetValue(v44, @"ManualLTCLUTS");
        unsigned int v47 = CFDataGetLength(v46) + 2;
        int v48 = (UInt8 *)malloc_type_malloc(v47, 0xE8ED8D40uLL);
        if (!v48) {
          return 4294954510;
        }
        __int16 v49 = v48;
        v80.length = CFDataGetLength(v46);
        v80.location = 0;
        CFDataGetBytes(v46, v80, v49 + 2);
        CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(v44, @"ManualLTCBytesPerRow");
        CFNumberGetValue(v50, kCFNumberSInt16Type, v49);
        int v51 = H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 9u, v49, v47);
        free(v49);
        if (v51) {
          return 4294954514;
        }
      }
    }
    if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 9, v10))return 4294954514; {
  }
    }
  if (!CFDictionaryContainsKey((CFDictionaryRef)a1, @"ManualSCCM")) {
    goto LABEL_49;
  }
  CFDictionaryRef v52 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ManualSCCM");
  if (!v52) {
    goto LABEL_49;
  }
  CFDictionaryRef v53 = v52;
  CFTypeID v54 = CFGetTypeID(v52);
  if (v54 != CFDictionaryGetTypeID()) {
    goto LABEL_49;
  }
  CFNumberRef v55 = CFDictionaryGetValue(v53, @"ManualSCCMEnable");
  if (CFEqual(v55, v9))
  {
    CFDataRef v56 = (const __CFData *)CFDictionaryGetValue(v53, @"ManualSCCMLUTS");
    unsigned int v57 = CFDataGetLength(v56) + 4;
    uint64_t v58 = (UInt8 *)malloc_type_malloc(v57, 0xDBFADDF2uLL);
    if (v58)
    {
      CFDictionaryRef v59 = v58;
      v81.length = CFDataGetLength(v56);
      v81.location = 0;
      CFDataGetBytes(v56, v81, v59 + 4);
      *CFDictionaryRef v59 = CFEqual(v55, v9) != 0;
      CFNumberRef v60 = (const __CFNumber *)CFDictionaryGetValue(v53, @"ManualSCCMBytesPerRow");
      CFNumberGetValue(v60, kCFNumberSInt16Type, v59 + 2);
      int v61 = H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0xAu, v59, v57);
      free(v59);
      if (v61) {
        return 4294954514;
      }
      goto LABEL_48;
    }
    return 4294954510;
  }
LABEL_48:
  if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 10, v10))return 4294954514; {
LABEL_49:
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"ManualLTMGTC"))
  {
    CFDataRef v62 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ManualLTMGTC");
    if (!v62 || (CFDataRef v63 = v62, v64 = CFGetTypeID(v62), v64 != CFDataGetTypeID()))
    {
LABEL_54:
      if (!H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 4, v10))goto LABEL_55; {
      return 4294954514;
      }
    }
    unint64_t v65 = CFDataGetBytePtr(v63);
    if (*(_WORD *)v65 == 257)
    {
      if (H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 4u, v65 + 2, 0x202u))return 4294954514; {
      goto LABEL_54;
      }
    }
    return 4294954516;
  }
LABEL_55:
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"ManualLTMIIR"))
  {
    CFNumberRef v66 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ManualLTMIIR");
    if (v66)
    {
      CFNumberRef v67 = v66;
      CFTypeID v68 = CFGetTypeID(v66);
      if (v68 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v67, kCFNumberSInt16Type, valuePtr);
        if (H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 5u, valuePtr, 2u))return 4294954514; {
      }
        }
    }
    if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 5, v10))return 4294954514; {
  }
    }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"LTMAEStableWaitTime"))
  {
    CFNumberRef v69 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"LTMAEStableWaitTime");
    if (v69)
    {
      CFNumberRef v70 = v69;
      CFTypeID v71 = CFGetTypeID(v69);
      if (v71 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v70, kCFNumberSInt32Type, valuePtr);
        if (H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 6u, valuePtr, 4u))return 4294954514; {
      }
        }
    }
    if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 6, v10))return 4294954514; {
  }
    }
  if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"SIFREnabled"))
  {
    unsigned int v72 = CFDictionaryGetValue((CFDictionaryRef)a1, @"SIFREnabled");
    if (v72)
    {
      unsigned int v73 = v72;
      CFTypeID v74 = CFGetTypeID(v72);
      if (v74 == CFBooleanGetTypeID())
      {
        valuePtr[0] = CFEqual(v73, v9) != 0;
        if (H16ISP::H16ISPDevice::ConfigureManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 8u, valuePtr, 1u))return 4294954514; {
      }
        }
    }
    if (H16ISP::H16ISPDevice::EnableManualControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 8, v10))return 4294954514; {
  }
    }
  return 0;
}

uint64_t SetPackedRawAttachmentsEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  *(unsigned char *)(a2 + 545) = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  if (ConfigSensorFormat(a4, a2)) {
    return 4294954514;
  }
  else {
    return 0;
  }
}

uint64_t CopyPackedRawAttachmentsEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x263EFFB40];
  if (!*(unsigned char *)(a3 + 545)) {
    uint64_t v3 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v3;
  return 0;
}

uint64_t SetForceVideoRawBitDepth(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  int valuePtr = -1;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  *(_DWORD *)(a2 + 548) = valuePtr;
  if (ConfigSensorFormat(a4, a2)) {
    return 4294954514;
  }
  else {
    return 0;
  }
}

uint64_t SetImageCaptureWaitForAEEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  uint64_t v8 = 4294954516;
  if (v7 == CFBooleanGetTypeID())
  {
    BOOL v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    if (H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1343, v9, 0xFFFFFFFF))return 4294954516; {
    else
    }
      return 0;
  }
  return v8;
}

uint64_t SetVisionDataKeypointDetectionThreshold(const void *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFTypeRef v5 = *(void **)(a2 + 4240);
  if (!v5) {
    return 4294954516;
  }
  float valuePtr = 0.0;
  H16ISP::H16ISPFilterGraphManager::GetNode(v5, 9, &v8);
  if (!v8) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
  H16ISP::H16ISPGraphVIOCameraControlNode::UpdateKeypointDetectionThreshold(v8, valuePtr);
  return 0;
}

uint64_t SetTriggerVisionDataBurst(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = 0;
  uint64_t v2 = *(void **)(a2 + 4240);
  if (!v2) {
    return 4294954516;
  }
  H16ISP::H16ISPFilterGraphManager::GetNode(v2, 9, &v4);
  if (!v4) {
    return 4294954516;
  }
  H16ISP::H16ISPGraphVIOCameraControlNode::TriggerBurstMode(v4);
  return 0;
}

uint64_t SetMultiplePearlCalibration(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 4057) = v5 != 0;
  return result;
}

uint64_t CopyPearlCalibrationDebugInfo(const __CFAllocator *a1, CFDictionaryRef *a2, uint64_t a3)
{
  CFTypeID v4 = *(void **)(a3 + 4240);
  if (v4)
  {
    CFDictionaryRef v11 = 0;
    H16ISP::H16ISPFilterGraphManager::GetNode(v4, 7, &v11);
    if (v11)
    {
      if (*(unsigned char *)(a3 + 4080))
      {
        CFDictionaryRef DebugInfo = (const __CFDictionary *)H16ISP::H16ISPPearlCalibrationNode_Remote::getDebugInfo(v11);
        goto LABEL_8;
      }
      uint64_t v8 = *(RgbIrCalibration **)(a3 + 4064);
      if (v8)
      {
        if (!*(unsigned char *)(a3 + 4056)) {
          return 0;
        }
        CFDictionaryRef DebugInfo = (const __CFDictionary *)RgbIrCalibration::GetDebugInfo(v8);
LABEL_8:
        if (DebugInfo)
        {
          CFDictionaryRef Copy = CFDictionaryCreateCopy(a1, DebugInfo);
          uint64_t result = 0;
          *a2 = Copy;
          return result;
        }
        return 0;
      }
    }
  }
  return 4294954516;
}

uint64_t SetProjectorOverheatLimit(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr)) {
    return 4294954516;
  }
  H16ISP::H16ISPDevice::SetProjectorOverheatLimit(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  return 0;
}

uint64_t CopyProjectorOverheatLimit(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int valuePtr = 0;
  if (H16ISP::H16ISPDevice::GetProjectorOverheatLimit(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &valuePtr))return 4294954516; {
  CFNumberRef v8 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  }
  uint64_t result = 0;
  *a2 = v8;
  return result;
}

uint64_t SetToFCapturingPresetIndex(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (a1 && isSensorType)
  {
    CFTypeID v9 = CFGetTypeID(a1);
    if (v9 != CFNumberGetTypeID()) {
      return 4294954516;
    }
    unsigned int valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    BOOL v11 = H16ISP::JasperConfigManager::configureFrameMode((H16ISP::JasperConfigManager *)valuePtr);
    uint64_t result = 0;
    if (*(void *)(a2 + 136) && v11)
    {
      if (!H16ISP::JasperConfigManager::applyFrameMode(*(H16ISP::JasperConfigManager **)(a4 + 24), (H16ISP::H16ISPDevice *)*(unsigned int *)(a2 + 132), *(_DWORD *)(a2 + 4104), *(xpc_connection_t **)(a4 + 200), v10))
      {
        EnableIRProjector(1, a2, a4);
        return 0;
      }
      EnableIRProjector(0, a2, a4);
      FigStreamRef = GetFigStreamRef(a2, a4);
      H16ISPPostNotification(@"BadJasperCalibrationNotification", FigStreamRef, 0);
      return 4294954516;
    }
  }
  return result;
}

uint64_t CopyToFCapturingPresetIndex(H16ISP::JasperConfigManager *a1, CFNumberRef *a2)
{
  int valuePtr = H16ISP::JasperConfigManager::getFrameMode(a1);
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return 0;
}

uint64_t SetJasperPreset(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (!a1 || !isSensorType) {
    return result;
  }
  CFTypeID v9 = CFGetTypeID(a1);
  if (v9 != CFStringGetTypeID()) {
    return 4294954516;
  }
  if (!CFEqual(a1, @"JasperPreset_Normal"))
  {
    if (CFEqual(a1, @"JasperPreset_Hybrid"))
    {
      uint64_t v10 = 44;
      goto LABEL_12;
    }
    if (CFEqual(a1, @"JasperPreset_AutoFocusMacroNormal"))
    {
      uint64_t v10 = 104;
      goto LABEL_12;
    }
    if (CFEqual(a1, @"JasperPreset_MacroShortNormalHybrid"))
    {
      uint64_t v10 = 108;
      goto LABEL_12;
    }
    return 4294954516;
  }
  uint64_t v10 = 4;
LABEL_12:
  BOOL v11 = H16ISP::JasperConfigManager::configureFrameMode((H16ISP::JasperConfigManager *)v10);
  if (*(void *)(a2 + 136))
  {
    if (v11)
    {
      if (H16ISP::JasperConfigManager::applyFrameMode(*(H16ISP::JasperConfigManager **)(a4 + 24), (H16ISP::H16ISPDevice *)*(unsigned int *)(a2 + 132), *(_DWORD *)(a2 + 4104), *(xpc_connection_t **)(a4 + 200), v12))
      {
        EnableIRProjector(0, a2, a4);
        FigStreamRef = GetFigStreamRef(a2, a4);
        H16ISPPostNotification(@"BadJasperCalibrationNotification", FigStreamRef, 0);
        return 4294954516;
      }
      EnableIRProjector(1, a2, a4);
    }
    CFNumberRef v15 = 0;
    CFNumberRef v14 = *(void **)(a2 + 4240);
    if (v14)
    {
      H16ISP::H16ISPFilterGraphManager::GetNode(v14, 11, &v15);
      if (v15) {
        H16ISP::H16ISPJasperDepthNode::setJasperMode((id **)v15);
      }
    }
  }
  return 0;
}

uint64_t CopyJasperPreset(H16ISP::JasperConfigManager *a1, CFStringRef *a2)
{
  uint64_t v4 = 4294954516;
  int FrameMode = H16ISP::JasperConfigManager::getFrameMode(a1);
  if (FrameMode > 103)
  {
    if (FrameMode == 104)
    {
      CFStringRef v6 = @"JasperPreset_AutoFocusMacroNormal";
      goto LABEL_10;
    }
    if (FrameMode == 108)
    {
      CFStringRef v6 = @"JasperPreset_MacroShortNormalHybrid";
      goto LABEL_10;
    }
  }
  else
  {
    if (FrameMode == 4)
    {
      CFStringRef v6 = @"JasperPreset_Normal";
      goto LABEL_10;
    }
    if (FrameMode == 44)
    {
      CFStringRef v6 = @"JasperPreset_Hybrid";
LABEL_10:
      uint64_t v4 = 0;
      *a2 = CFStringCreateCopy(a1, v6);
    }
  }
  return v4;
}

uint64_t SetJasperProcessingMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (a1 && isSensorType)
  {
    CFTypeID v8 = CFGetTypeID(a1);
    if (v8 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, (void *)(a2 + 4088));
      uint64_t v10 = 0;
      CFTypeID v9 = *(void **)(a2 + 4240);
      if (v9)
      {
        H16ISP::H16ISPFilterGraphManager::GetNode(v9, 11, &v10);
        if (v10) {
          H16ISP::H16ISPJasperDepthNode::setProcessingMode((uint64_t)v10, *(_DWORD *)(a2 + 4088));
        }
      }
      return 0;
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t CopyJasperProcessingMode(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!H16ISP::H16ISPDevice::isSensorType(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), 1785950322)) {
    return 4294954516;
  }
  CFNumberRef v8 = CFNumberCreate(a1, kCFNumberIntType, (const void *)(a3 + 4088));
  uint64_t result = 0;
  *a2 = v8;
  return result;
}

uint64_t SetJasperRgbMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (a1 && isSensorType)
  {
    CFTypeID v8 = CFGetTypeID(a1);
    if (v8 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, (void *)(a2 + 4092));
      return 0;
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t SetJasperBuiltInSequence(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (!H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322)) {
    return 4294954514;
  }
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFArrayGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954516;
  }
  unsigned int Count = CFArrayGetCount((CFArrayRef)a1);
  if (!Count) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, 0);
  CFTypeID v11 = CFGetTypeID(ValueAtIndex);
  if (v11 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberIntType, &valuePtr);
  if (H16ISP::H16ISPDevice::GetChannelSensorID(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132)) == 1424)
  {
    if (Count <= 5)
    {
      *(void *)&long long v50 = -1;
      *((void *)&v50 + 1) = -1;
      LOWORD(v45) = 13062;
      LODWORD(v46) = *(_DWORD *)(a2 + 132);
      HIDWORD(v46) = valuePtr;
      *(_DWORD *)CFTypeID v35 = 0;
      uint64_t v12 = Count - 1;
      if (Count != 1)
      {
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t v14 = v13 + 1;
          CFNumberRef v15 = CFArrayGetValueAtIndex((CFArrayRef)a1, v13 + 1);
          CFTypeID v16 = CFGetTypeID(v15);
          if (v16 != CFNumberGetTypeID()) {
            return 4294954516;
          }
          *(_DWORD *)CFTypeID v35 = 0;
          CFNumberGetValue((CFNumberRef)v15, kCFNumberIntType, v35);
          *((_DWORD *)&v50 + v13++) = *(_DWORD *)v35;
          if (v12 == v14)
          {
            long long v17 = v50;
            goto LABEL_25;
          }
        }
      }
      *(void *)&long long v17 = -1;
      *((void *)&v17 + 1) = -1;
LABEL_25:
      long long v47 = v17;
      if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), buf, 0x20u, 0, 0xFFFFFFFF))
      {
        CFDataRef v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFDataRef v30 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v30;
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          SetJasperBuiltInSequence();
        }
        return 4294954516;
      }
      goto LABEL_40;
    }
    return 4294954516;
  }
  ChannelSensorIOSurfaceID ID = H16ISP::H16ISPDevice::GetChannelSensorID(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132));
  uint64_t result = 4294954516;
  if (Count <= 5 && ChannelSensorID == 1425)
  {
    H16ISP::setPeridotCalib(*(H16ISP **)(a4 + 24), *(xpc_connection_t **)(a4 + 200), (H16ISP::H16ISPServicesRemote *)*(unsigned __int16 *)(a2 + 132));
    *(void *)&long long v50 = -1;
    *((void *)&v50 + 1) = -1;
    __int16 v36 = 14083;
    int v19 = *(_DWORD *)(a2 + 132);
    int v20 = valuePtr;
    int v37 = v19;
    int v38 = valuePtr;
    int v34 = 0;
    uint64_t v21 = Count - 1;
    if (Count != 1)
    {
      uint64_t v22 = 0;
      while (1)
      {
        uint64_t v23 = v22 + 1;
        CFArrayRef v24 = CFArrayGetValueAtIndex((CFArrayRef)a1, v22 + 1);
        CFTypeID v25 = CFGetTypeID(v24);
        if (v25 != CFNumberGetTypeID()) {
          return 4294954516;
        }
        int v34 = 0;
        CFNumberGetValue((CFNumberRef)v24, kCFNumberIntType, &v34);
        *((_DWORD *)&v50 + v22++) = v34;
        if (v21 == v23)
        {
          int v27 = v50;
          int v26 = DWORD1(v50);
          int v29 = DWORD2(v50);
          int v28 = HIDWORD(v50);
          goto LABEL_31;
        }
      }
    }
    int v28 = -1;
    int v29 = -1;
    int v26 = -1;
    int v27 = -1;
LABEL_31:
    int v39 = v27;
    int v40 = v26;
    int v41 = v29;
    int v42 = v28;
    CFTypeID v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    uint64_t v32 = &_os_log_internal;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v31 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110400;
      int v45 = v19;
      LOWORD(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 2) = v20;
      HIWORD(v46) = 1024;
      LODWORD(v47) = v27;
      WORD2(v47) = 1024;
      *(_DWORD *)((char *)&v47 + 6) = v26;
      WORD5(v47) = 1024;
      HIDWORD(v47) = v29;
      __int16 v48 = 1024;
      int v49 = v28;
      _os_log_impl(&dword_24680F000, v31, OS_LOG_TYPE_DEFAULT, "SetPeridotBuiltInSequence: ch=%d, config=%d, args=[%d,%d,%d,%d]\n", buf, 0x26u);
    }
    if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v35, 0x20u, 0, 0xFFFFFFFF))
    {
      CFDictionaryRef v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v32)
      {
        CFDictionaryRef v33 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        SetJasperBuiltInSequence();
      }
      return 4294954516;
    }
LABEL_40:
    H16ISP::JasperConfigManager::configureFrameMode((H16ISP::JasperConfigManager *)0xFFFFFFFFLL);
    return 0;
  }
  return result;
}

uint64_t SetJasperBurstSize(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (a1 && isSensorType)
  {
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
      H16ISP::JasperConfigManager::setJasperBurstSize((unsigned __int16)valuePtr);
      return 0;
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t CopyJasperBurstSize(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), 1785950322);
  if (!isSensorType) {
    return 4294954516;
  }
  int valuePtr = H16ISP::JasperConfigManager::getJasperBurstSize((H16ISP::JasperConfigManager *)isSensorType);
  CFNumberRef v8 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  uint64_t result = 0;
  *a2 = v8;
  return result;
}

uint64_t SetFrameModeDictionaryLocation(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322)) {
    return 4294954516;
  }
  if (!a1)
  {
    CFTypeID v7 = 0;
    goto LABEL_7;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID()) {
    return 4294954516;
  }
  CFTypeID v7 = (NSString *)a1;
LABEL_7:
  H16ISP::JasperConfigManager::setFrameModeDictionaryLocation(v7, v5);
  return 0;
}

uint64_t CopyJasperCalibData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!H16ISP::H16ISPDevice::isSensorType(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), 1785950322)) {
    return 4294954516;
  }
  CFNumberRef v8 = JasperCalibration::copyCalibData(*(JasperCalibration **)(a5 + 24), (H16ISP::H16ISPDevice *)*(unsigned int *)(a3 + 132));
  uint64_t result = 0;
  *a2 = v8;
  return result;
}

uint64_t SetJasperFrameConfig(void *cf, uint64_t a2, uint64_t a3, H16ISP::JasperConfigManager **a4)
{
  return H16ISP::JasperConfigManager::setFrameFromArray(a4[3], (H16ISP::H16ISPDevice *)*(unsigned int *)(a2 + 132), cf, a4);
}

uint64_t SetJasperPreloadFrameConfig(void *cf, uint64_t a2, uint64_t a3, H16ISP::JasperConfigManager **a4)
{
  return H16ISP::JasperConfigManager::preloadFrameFromArray(a4[3], (H16ISP::H16ISPDevice *)*(unsigned int *)(a2 + 132), cf, a4);
}

uint64_t SetJasperFrameOffset(void *cf, uint64_t a2, uint64_t a3, H16ISP::JasperConfigManager **a4)
{
  return H16ISP::JasperConfigManager::setFrameOffsetFromArray(a4[3], (H16ISP::H16ISPDevice *)*(unsigned int *)(a2 + 132), cf, a4);
}

uint64_t SetJasperSequence(void *cf, uint64_t a2, uint64_t a3, H16ISP::JasperConfigManager **a4)
{
  return H16ISP::JasperConfigManager::setSequenceFromArray(a4[3], (H16ISP::H16ISPDevice *)*(unsigned int *)(a2 + 132), cf, a4);
}

uint64_t SetJasperCalibration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFDataGetTypeID()) {
    return 4294954516;
  }
  CFTypeID v7 = (void *)PDPeridotCalibCreateWithBinaryRepresentation();
  uint64_t v9 = 4294954516;
  if (v7)
  {
    uint64_t v10 = v7;
    if (H16ISP::savePeridotCalib(*(H16ISP **)(a4 + 24), *(H16ISP::H16ISPDevice **)(a4 + 200), (H16ISP::H16ISPServicesRemote *)*(unsigned __int16 *)(a2 + 132), v7, v8))uint64_t v9 = 0; {
    else
    }
      uint64_t v9 = 4294954516;
    CFRelease(v10);
  }
  return v9;
}

uint64_t CopyJasperCalibration(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  PeridotCalib = H16ISP::createPeridotCalib(*(H16ISP **)(a5 + 24), *(xpc_connection_t **)(a5 + 200), (H16ISP::H16ISPServicesRemote *)*(unsigned __int16 *)(a3 + 132));
  if (!PeridotCalib) {
    return 4294954516;
  }
  CFTypeID v7 = PeridotCalib;
  *a2 = CFRetain(PeridotCalib);
  CFRelease(v7);
  return 0;
}

uint64_t SetJasperGmoDebugMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (!a1 || !isSensorType) {
    return result;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 == CFBooleanGetTypeID())
  {
    BOOL v9 = CFBooleanGetValue((CFBooleanRef)a1) == 0;
  }
  else
  {
    CFTypeID v10 = CFGetTypeID(a1);
    if (v10 != CFNumberGetTypeID()) {
      return 4294954516;
    }
    int valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    BOOL v9 = valuePtr == 0;
  }
  char v11 = !v9;
  *(unsigned char *)(a2 + 4108) = v11;
  CFTypeID v12 = CFGetTypeID(a1);
  if (v12 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  *(unsigned char *)(a2 + 4108) = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  uint64_t v14 = 0;
  uint64_t v13 = *(void **)(a2 + 4240);
  if (v13)
  {
    H16ISP::H16ISPFilterGraphManager::GetNode(v13, 11, &v14);
    if (v14) {
      H16ISP::H16ISPJasperDepthNode::setGmoDebugMode(v14, *(unsigned char *)(a2 + 4108));
    }
  }
  return 0;
}

uint64_t SetJasperGmoFlow(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (a1 && isSensorType)
  {
    CFTypeID v8 = CFGetTypeID(a1);
    if (v8 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, (void *)(a2 + 4104));
      CFTypeID v10 = 0;
      BOOL v9 = *(void **)(a2 + 4240);
      if (v9)
      {
        H16ISP::H16ISPFilterGraphManager::GetNode(v9, 11, &v10);
        if (v10) {
          H16ISP::H16ISPJasperDepthNode::setGmoDebugMode(v10, *(_DWORD *)(a2 + 4104) != 0);
        }
      }
      return 0;
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t SetJasperLockAfFrequency(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (!a1 || !isSensorType) {
    return result;
  }
  CFTypeID v9 = CFGetTypeID(a1);
  if (v9 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = -1;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  uint64_t result = 4294954516;
  if (valuePtr > 3)
  {
    if (valuePtr != 32 && valuePtr != 4) {
      return result;
    }
    goto LABEL_11;
  }
  if (valuePtr != -1)
  {
    if (valuePtr) {
      return result;
    }
LABEL_11:
    int v10 = 1;
    goto LABEL_13;
  }
  int v10 = 0;
LABEL_13:
  int v11 = H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1500, v10, 0xFFFFFFFF);
  int v12 = v11;
  if (v10 && !v11) {
    int v12 = H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1501, valuePtr, 0xFFFFFFFF);
  }
  uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v13 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    CFTypeID v16 = "SetJasperLockAfFrequency";
    __int16 v17 = 1024;
    int v18 = v10;
    __int16 v19 = 1024;
    int v20 = valuePtr;
    __int16 v21 = 1024;
    int v22 = v12;
    _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "%s - Lock ToF Af Frequency: (Lock:%d frequency:%d): 0x%08x\n", buf, 0x1Eu);
  }
  if (v12) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyTimeOfFlightConfiguration(const __CFAllocator *a1, H16ISP::JasperConfigManager **a2, uint64_t a3)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int FrameMode = H16ISP::JasperConfigManager::getFrameMode(Mutable);
  switch(FrameMode)
  {
    case 108:
      int v8 = 6;
      break;
    case 104:
      int v8 = 5;
      break;
    case 4:
      int v8 = 1;
      break;
    default:
      return 4294954516;
  }
  int valuePtr = v8;
  if (!*(_DWORD *)(a3 + 4088)) {
    int valuePtr = 0;
  }
  CFNumberRef v9 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2EBA0], v9);
  CFRelease(v9);
  uint64_t result = 0;
  *a2 = Mutable;
  return result;
}

uint64_t CopySupportedTimeOfFlightProjectorModes(const __CFAllocator *a1, __CFArray **a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  CFTypeID v7 = ___ZL39CopySupportedTimeOfFlightProjectorModesPK13__CFAllocatorPvP19H16ISPCaptureStreamP18H16ISPCaptureGroupP19H16ISPCaptureDevice_block_invoke;
  int v8 = &__block_descriptor_tmp_1052;
  CFAllocatorRef v9 = a1;
  ___ZL39CopySupportedTimeOfFlightProjectorModesPK13__CFAllocatorPvP19H16ISPCaptureStreamP18H16ISPCaptureGroupP19H16ISPCaptureDevice_block_invoke((uint64_t)v6, Mutable, 0);
  v7((uint64_t)v6, Mutable, 1);
  v7((uint64_t)v6, Mutable, 5);
  v7((uint64_t)v6, Mutable, 6);
  *a2 = Mutable;
  return 0;
}

uint64_t SetJasperWideExtrinsics(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  CFTypeID v7 = (const void *)v2;
  v23[1641] = *MEMORY[0x263EF8340];
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(v3 + 24), *(_DWORD *)(v5 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (v7 && isSensorType)
  {
    CFTypeID v10 = CFGetTypeID(v7);
    if (v10 == CFArrayGetTypeID() && !*(void *)(v6 + 136) && CFArrayGetCount((CFArrayRef)v7) >= 3)
    {
      LODWORD(v17) = 13;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v7, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberFloat64Type, &v18);
      CFNumberRef v12 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v7, 1);
      CFNumberGetValue(v12, kCFNumberFloat64Type, &v19);
      CFNumberRef v13 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v7, 2);
      CFNumberGetValue(v13, kCFNumberFloat64Type, &v20);
      if (CFArrayGetCount((CFArrayRef)v7) > 5)
      {
        CFNumberRef v14 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v7, 3);
        CFNumberGetValue(v14, kCFNumberFloat64Type, &v21);
        CFNumberRef v15 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v7, 4);
        CFNumberGetValue(v15, kCFNumberFloat64Type, &v22);
        CFNumberRef v16 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v7, 5);
        CFNumberGetValue(v16, kCFNumberFloat64Type, v23);
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        v23[0] = 0;
      }
      if (H16ISP::H16ISPServicesRemote::SetProperty(*(void *)(v4 + 200), &v17)) {
        return 4294954516;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t SetRgbjConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t result = 4294954516;
  if (a1 && isSensorType)
  {
    CFTypeID v9 = CFGetTypeID(a1);
    if (v9 == CFDictionaryGetTypeID() && !*(void *)(a2 + 136))
    {
      int valuePtr = -1;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RgbjConfigurationFeatureVectorSize");
      if (Value)
      {
        CFNumberRef v11 = Value;
        CFTypeID v12 = CFGetTypeID(Value);
        if (v12 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v11, kCFNumberIntType, &valuePtr);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setFeatureVectorSize(*(void *)(a4 + 240), valuePtr);
        }
      }
      CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RgbjConfigurationDilutionRate");
      if (v13)
      {
        CFNumberRef v14 = v13;
        CFTypeID v15 = CFGetTypeID(v13);
        if (v15 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setDilutionRate(*(void *)(a4 + 240), valuePtr);
        }
      }
      CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RgbjConfigurationLowFrameInterval");
      if (v16)
      {
        CFNumberRef v17 = v16;
        CFTypeID v18 = CFGetTypeID(v16);
        if (v18 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v17, kCFNumberIntType, &valuePtr);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setLowFrameInterval(*(void *)(a4 + 240), valuePtr);
        }
      }
      CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RgbjConfigurationHighFrameInterval");
      if (v19)
      {
        CFNumberRef v20 = v19;
        CFTypeID v21 = CFGetTypeID(v19);
        if (v21 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setHighFrameInterval(*(void *)(a4 + 240), valuePtr);
        }
      }
      CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RgbjConfigurationLowFrameIntervalThresholdX");
      if (v22)
      {
        CFNumberRef v23 = v22;
        CFTypeID v24 = CFGetTypeID(v22);
        if (v24 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setLowFrameIntervalThresholdX(*(void *)(a4 + 240), valuePtr);
        }
      }
      CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RgbjConfigurationLowFrameIntervalThresholdY");
      if (v25)
      {
        CFNumberRef v26 = v25;
        CFTypeID v27 = CFGetTypeID(v25);
        if (v27 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v26, kCFNumberIntType, &valuePtr);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setLowFrameIntervalThresholdY(*(void *)(a4 + 240), valuePtr);
        }
      }
      CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RgbjConfigurationLowFrameIntervalThresholdZ");
      if (v28)
      {
        CFNumberRef v29 = v28;
        CFTypeID v30 = CFGetTypeID(v28);
        if (v30 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v29, kCFNumberIntType, &valuePtr);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setLowFrameIntervalThresholdZ(*(void *)(a4 + 240), valuePtr);
        }
      }
      CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RgbjConfigurationMinFrameNumAtLowInterval");
      if (v31)
      {
        CFNumberRef v32 = v31;
        CFTypeID v33 = CFGetTypeID(v31);
        if (v33 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setMinFrameNumAtLowInterval(*(void *)(a4 + 240), valuePtr);
        }
      }
      return 0;
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t CopyRgbjReport(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  LODWORD(v18) = 11;
  if (H16ISP::H16ISPServicesRemote::GetProperty(*(xpc_connection_t **)(a5 + 200), &v18)) {
    return 4294954516;
  }
  uint64_t v9 = *(void *)(a5 + 240);
  if (!v9) {
    return 4294954516;
  }
  int valuePtr = 0;
  H16ISP::H16ISPTimeOfFlightColorSynchronizer::getColorControllerStats(v9, &valuePtr);
  int v16 = *(_DWORD *)&v19[8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFNumberRef v11 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"RgbjReportControllerReached", v11);
  CFRelease(v11);
  CFNumberRef v12 = CFNumberCreate(a1, kCFNumberIntType, &v16);
  CFDictionaryAddValue(Mutable, @"RgbjReportControllerPassed", v12);
  CFRelease(v12);
  CFNumberRef v13 = CFNumberCreate(a1, kCFNumberIntType, v19);
  CFDictionaryAddValue(Mutable, @"RgbjReportIsfSuccess", v13);
  CFRelease(v13);
  CFNumberRef v14 = CFNumberCreate(a1, kCFNumberIntType, &v19[4]);
  CFDictionaryAddValue(Mutable, @"RgbjReportIsfFailure", v14);
  CFRelease(v14);
  CFNumberRef v15 = CFNumberCreate(a1, kCFNumberIntType, &v20);
  CFDictionaryAddValue(Mutable, @"RgbjReportFailedToSave", v15);
  CFRelease(v15);
  uint64_t result = 0;
  *a2 = Mutable;
  return result;
}

uint64_t RgbjForceSaveCalib(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  v4[1647] = *(xpc_object_t *)MEMORY[0x263EF8340];
  LODWORD(v4[0]) = 12;
  if (H16ISP::H16ISPServicesRemote::SetProperty(*(void *)(v2 + 200), v4)) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetManualColorCalGain(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RedGreenGain");
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"BlueGreenGain");
  uint64_t result = 4294954516;
  if (Value && v9)
  {
    int valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    int v16 = 0;
    CFNumberGetValue(v9, kCFNumberSInt32Type, &v16);
    bzero(v11, 0x14uLL);
    __int16 v12 = 788;
    int v13 = *(_DWORD *)(a2 + 132);
    int v14 = valuePtr;
    int v15 = v16;
    if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v11, 0x14u, 0, 0xFFFFFFFF))return 4294954514; {
    else
    }
      return 0;
  }
  return result;
}

uint64_t CopyLSCGainGrid(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[20] = *(unsigned __int8 **)MEMORY[0x263EF8340];
  *a2 = 0;
  LODWORD(v6[0]) = 0;
  if (!H16ISP::H16ISPDevice::ISP_GetSetfileSize(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), (unsigned int *)v6))operator new[](); {
  return 4294954516;
  }
}

uint64_t CopyHDRFusionEnable(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 4130)) {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  else {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t CopyCAREnable(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 3793)) {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t CopySwitchingFormatIndex(const __CFAllocator *a1, CFDictionaryRef *a2, uint64_t a3)
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  if (!a2) {
    return 4294954516;
  }
  int v5 = *(_DWORD *)(a3 + 48);
  uint64_t v4 = (_DWORD *)(a3 + 48);
  if (v4[1067] == v5 || (CFNumberRef v7 = CFNumberCreate(a1, kCFNumberIntType, v4)) == 0)
  {
    CFDictionaryRef v10 = 0;
  }
  else
  {
    CFNumberRef v8 = v7;
    CFNumberRef v9 = (void *)*MEMORY[0x263F2C3A8];
    values = v7;
    keys[0] = v9;
    CFDictionaryRef v10 = CFDictionaryCreate(a1, (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFRelease(v8);
  }
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t CopySensorDimensions(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    CFDictionaryRef v10 = Mutable;
    unsigned int v11 = *(_DWORD *)(a3 + 48);
    unsigned int v12 = *(_DWORD *)(a3 + 168);
    if (v11 < v12) {
      unsigned int v12 = 0;
    }
    H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), *(_DWORD *)(*(void *)(a3 + 160) + 120 * (v11 - v12) + 16), &v16, v18);
    int valuePtr = v19;
    CFNumberRef v13 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v10, (const void *)*MEMORY[0x263F2C4D0], v13);
    CFRelease(v13);
    int valuePtr = v20;
    CFNumberRef v14 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v10, (const void *)*MEMORY[0x263F2C498], v14);
    CFRelease(v14);
    *a2 = v10;
  }
  return 0;
}

uint64_t CopyVisionDataConfigurationSupportedKeys(const __CFAllocator *a1, __CFArray **a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  uint64_t v4 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F2EA38]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA30]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA28]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA00]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E9F8]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA40]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA18]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E9D8]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E9F0]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E9D0]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA10]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA68]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E9E8]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2E9E0]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA48]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA58]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA08]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA60]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EA20]);
  }
  *a2 = v4;
  return 0;
}

uint64_t CopyLSCQuadraCICGainGrid(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a2 = 0;
  LODWORD(v6) = 0;
  if (!H16ISP::H16ISPDevice::ISP_GetSetfileSize(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), (unsigned int *)&v6))operator new[](); {
  return 4294954513;
  }
}

uint64_t CopyFocusPixelMap(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  CFNumberRef v7 = v6;
  CFDataRef *v6 = 0;
  bzero(v21, 0x1BE0uLL);
  __int16 v22 = 1316;
  int v23 = *(_DWORD *)(v5 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v3 + 24), v21, 0x1BE0u, 0, 0xFFFFFFFF))return 4294954513; {
  if (!v24)
  }
    return 4294954509;
  CFNumberRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    CopyFocusPixelMap(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  *(_DWORD *)bytes = 2;
  memcpy(v19, v25, sizeof(v19));
  memcpy(v20, v26, sizeof(v20));
  CFDataRef v17 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 7124);
  if (v17) {
    *CFNumberRef v7 = v17;
  }
  return 0;
}

uint64_t CopyNarrowerCalibratedExtrinsics(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  int DistortionData = H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v5 + 132), 1, v10);
  CFDataRef v7 = 0;
  if (DistortionData)
  {
    uint64_t result = 4294954513;
  }
  else
  {
    do
    {
      v9[(void)v7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v10[32 * (void)v7 + 2232]), *(float64x2_t *)&v10[32 * (void)v7 + 2248]);
      CFDataRef v7 = (CFDataRef)((char *)v7 + 1);
    }
    while (v7 != (CFDataRef)3);
    CFDataRef v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)v9, 48);
    if (v7) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 4294954510;
    }
  }
  *uint64_t v3 = v7;
  return result;
}

uint64_t CopyNarrowerCalibratedGDCCoefficients(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  CFDataRef v7 = v6;
  *(void *)&v23[4116] = *MEMORY[0x263EF8340];
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    if (H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v3 + 24), *(_DWORD *)(v5 + 132), 1, v22))goto LABEL_3; {
    if (v22[4] == 49926)
    }
    {
      uint64_t v11 = 0;
      uint64_t v12 = (float64x2_t *)v23;
      do
      {
        *(float32x4_t *)&bytes[v11] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12[-4]), v12[-3]);
        *(float32x4_t *)&bytes[v11 + 32] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12[-12]), v12[-11]);
        uint64_t v13 = (float32x4_t *)&v19[v11];
        *uint64_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v12), v12[1]);
        _DWORD v13[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12[-8]), v12[-7]);
        v11 += 16;
        v12 += 2;
      }
      while (v11 != 32);
    }
    CFDataRef v14 = CFDataCreate(v8, bytes, 64);
    if (!v14
      || (CFDataRef v15 = v14,
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F2CA90], v14),
          CFRelease(v15),
          (CFDataRef v16 = CFDataCreate(v8, v19, 64)) == 0))
    {
      uint64_t v10 = 4294954510;
      goto LABEL_13;
    }
    CFDataRef v17 = v16;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F2CA98], v16);
    CFRelease(v17);
    if (H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v3 + 24), *(_DWORD *)(v5 + 132), 0, v21))
    {
LABEL_3:
      uint64_t v10 = 4294954513;
LABEL_13:
      CFRelease(Mutable);
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_14;
    }
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 4294954510;
  }
LABEL_14:
  *CFDataRef v7 = Mutable;
  return v10;
}

uint64_t CopyNarrowerFOVCalibratedValidRadius(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  CFAllocatorRef v5 = (const __CFAllocator *)v2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v6 + 24), *(_DWORD *)(v7 + 132), 1, v12))return 4294954513; {
  float v9 = v13;
  }
  float valuePtr = v9;
  CFNumberRef v10 = CFNumberCreate(v5, kCFNumberFloatType, &valuePtr);
  uint64_t result = 0;
  CFNumberRef *v4 = v10;
  return result;
}

uint64_t CopyFullFOVCalibratedValidRadius(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  CFAllocatorRef v5 = (const __CFAllocator *)v2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v6 + 24), *(_DWORD *)(v7 + 132), 0, v12))return 4294954513; {
  float v9 = v13;
  }
  float valuePtr = v9;
  CFNumberRef v10 = CFNumberCreate(v5, kCFNumberFloatType, &valuePtr);
  uint64_t result = 0;
  CFNumberRef *v4 = v10;
  return result;
}

uint64_t CopyAbsoluteColorCalibrations(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)CFTypeID v33 = 0;
  *(_DWORD *)int v34 = 0;
  unsigned __int8 v32 = 0;
  if (H16ISP::H16ISPDevice::GetAbsoluteColorCal(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v34[1], v34, &v33[1], v33, &v32))
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t result = 4294954516;
  }
  else
  {
    if (v32)
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (v9)
        {
          CFNumberRef v10 = v9;
          CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (v11)
          {
            double v13 = v11;
            LOWORD(v12) = v34[1];
            float v14 = (double)v12 * 0.0000610351562;
            float valuePtr = v14;
            CFNumberRef v15 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
            CFDataRef v16 = (const void *)*MEMORY[0x263F2C658];
            CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2C658], v15);
            CFRelease(v15);
            LOWORD(v17) = v34[0];
            *(float *)&unint64_t v17 = (double)v17 * 0.0000610351562;
            float valuePtr = *(float *)&v17;
            CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
            unsigned __int16 v19 = (const void *)*MEMORY[0x263F2C650];
            CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2C650], v18);
            CFRelease(v18);
            LOWORD(v20) = v33[1];
            *(float *)&unint64_t v20 = (double)v20 * 0.0000610351562;
            float valuePtr = *(float *)&v20;
            CFNumberRef v21 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
            CFDictionarySetValue(v13, v16, v21);
            CFRelease(v21);
            LOWORD(v22) = v33[0];
            *(float *)&unint64_t v22 = (double)v22 * 0.0000610351562;
            float valuePtr = *(float *)&v22;
            CFNumberRef v23 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
            CFDictionarySetValue(v13, v19, v23);
            CFRelease(v23);
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C668], v10);
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C660], v13);
            CFRelease(v10);
            CFRelease(v13);
            uint64_t result = 0;
            goto LABEL_15;
          }
          CFRelease(v10);
        }
      }
      uint64_t result = 4294954510;
      goto LABEL_15;
    }
    char v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      char v24 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      CopyAbsoluteColorCalibrations(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    CFMutableDictionaryRef Mutable = 0;
    uint64_t result = 4294954509;
  }
LABEL_15:
  *a2 = Mutable;
  return result;
}

uint64_t SetLumaHistogramROI(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954513;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v9 = 0;
  uint64_t result = H16ISPGetRectParamsFromDict((const __CFDictionary *)a1, (char *)&v11 + 4, &v11, (char *)&v10 + 4, &v10, &v9, 0);
  if (!result)
  {
    if (H16ISP::H16ISPDevice::SetLumaHistogramROI(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1, ((unint64_t)WORD2(v10) << 32) | ((unint64_t)v10 << 48) | (v11 << 16) | WORD2(v11)))return 4294954516; {
    else
    }
      return 0;
  }
  return result;
}

uint64_t CopyDefectivePixelTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset(v15, 0, sizeof(v15));
  if (a2)
  {
    int MaxResolutionSensorConfigIndex = H16ISP::H16ISPDevice::GetMaxResolutionSensorConfigIndex(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), v15);
    if (MaxResolutionSensorConfigIndex)
    {
      int v9 = MaxResolutionSensorConfigIndex;
      uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v17 = "CopyDefectivePixelTable";
      __int16 v18 = 1024;
      int v19 = v9;
      uint64_t v11 = "%s - Could not find valid sensor config index, res = 0x%08X\n";
    }
    else
    {
      DPCunsigned int Count = H16ISP::H16ISPDevice::GetDPCCount(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), v15[0], (unsigned int *)&v15[1]);
      if (!DPCCount) {
        operator new[]();
      }
      int v13 = DPCCount;
      uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v17 = "CopyDefectivePixelTable";
      __int16 v18 = 1024;
      int v19 = v13;
      uint64_t v11 = "%s - CISP_CMD_CH_SENSOR_STATIC_DPC_INFO_GET failed, res = 0x%08X\n";
    }
    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x12u);
LABEL_14:
    *a2 = 0;
  }
  return 4294954516;
}

uint64_t SetSensorRawOutputRetainedBufferCount(const void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, a2 + 1088);
  if (!*((void *)a2 + 17) || a2[1088] < 1) {
    return 0;
  }
  if (*((void *)a2 + 543)) {
    resizeRawPool(a4, (uint64_t)a2);
  }
  int v8 = resizeStillMetaPool((uint64_t)a2, 1, (int *)&v15 + 1, (int *)&v15);
  uint64_t v9 = &_os_log_internal;
  if (v8)
  {
    int v10 = v8;
    uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      unint64_t v17 = "SetSensorRawOutputRetainedBufferCount";
      __int16 v18 = 1024;
      int v19 = v10;
      __int16 v20 = 1024;
      int v21 = HIDWORD(v15);
      __int16 v22 = 1024;
      int v23 = v15;
      _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_DEFAULT, "%s - Unable to modify still meta pool, err = %d, FWprimeCount= %d, clientRetainCount=%d\n", buf, 0x1Eu);
    }
  }
  uint64_t v12 = resizeThumbnailRawPool((uint64_t)a2, 1, 0, (int *)&v15);
  if (v12)
  {
    int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
    {
      int v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      unint64_t v17 = "SetSensorRawOutputRetainedBufferCount";
      __int16 v18 = 1024;
      int v19 = v12;
      __int16 v20 = 1024;
      int v21 = HIDWORD(v15);
      __int16 v22 = 1024;
      int v23 = v15;
      _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "%s - Unable to modify thumbnail raw pool, err = %d, FWprimeCount= %d, clientRetainCount=%d\n", buf, 0x1Eu);
    }
  }
  return v12;
}

uint64_t CopyUnsynchronizedSensorRawOutputBufferPoolRequirements(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  H16ISP::H16ISPDevice::GetPoolInfoExtended(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), 3, &v25);
  if (v8)
  {
LABEL_2:
    uint64_t v9 = 0;
    uint64_t result = 4294954513;
    goto LABEL_3;
  }
  *(_WORD *)uint64_t v24 = 0;
  unsigned int v22 = 0;
  unsigned int v23 = 0;
  int RawBufferConfig = H16ISP::H16ISPDevice::GetRawBufferConfig(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v24[1], &v26, &v27, v24, &v23, &v22);
  if (RawBufferConfig)
  {
    int v12 = RawBufferConfig;
    int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int CVPixelFormat = 136315394;
      uint64_t v30 = "CopyUnsynchronizedSensorRawOutputBufferPoolRequirements";
      __int16 v31 = 1024;
      int v32 = v12;
      _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "%s - Unable to get raw buffer count, res = %d \n", (uint8_t *)&CVPixelFormat, 0x12u);
    }
    goto LABEL_2;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v9 = (__CFDictionary *)result;
  if (result)
  {
    CFNumberRef v15 = CFNumberCreate(v14, kCFNumberSInt16Type, (char *)&v25 + 6);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F04078], v15);
    CFRelease(v15);
    CFNumberRef v16 = CFNumberCreate(v14, kCFNumberSInt16Type, (char *)&v25 + 4);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F04198], v16);
    CFRelease(v16);
    CFNumberRef v17 = CFNumberCreate(v14, kCFNumberIntType, &v26);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F04240], v17);
    CFRelease(v17);
    CFNumberRef v18 = CFNumberCreate(v14, kCFNumberIntType, &v27);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F04118], v18);
    CFRelease(v18);
    char valuePtr = v24[0] + v24[1];
    CFNumberRef v19 = CFNumberCreate(v14, kCFNumberSInt8Type, &valuePtr);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F041C0], v19);
    CFRelease(v19);
    int CVPixelFormat = H16ISP::getCVPixelFormat((H16ISP *)v28, *(unsigned __int8 *)(a3 + 536), *(unsigned char *)(a3 + 545) == 0);
    CFNumberRef v20 = CFNumberCreate(v14, kCFNumberIntType, &CVPixelFormat);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x263F04180], v20);
    CFRelease(v20);
    uint64_t result = 0;
  }
LABEL_3:
  *a2 = v9;
  return result;
}

uint64_t SetUnsynchronizedSensorRawOutputBufferPool(__CVPixelBufferPool *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 136))
  {
    uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetUnsynchronizedSensorRawOutputBufferPool(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    return 4294954612;
  }
  *(_OWORD *)unsigned __int16 v28 = 0u;
  memset(v29, 0, sizeof(v29));
  v29[15] = 1;
  CFNumberRef v15 = *(H16ISP::H16ISPDevice **)(a4 + 24);
  int v16 = *(_DWORD *)(a2 + 132);
  if (a1)
  {
    int v17 = H16ISP::H16ISPDevice::SetCommonBufferPool(v15, v16, 3, 1, v28, 0x2DuLL);
    if (v17)
    {
      int v18 = v17;
      CFNumberRef v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v19 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
      }
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        return 4294954514;
      }
      int v24 = 136315394;
      long long v25 = "SetUnsynchronizedSensorRawOutputBufferPool";
      __int16 v26 = 1024;
      int v27 = v18;
      CFNumberRef v20 = "%s - Error enabling shared raw/sifr pool, res = %d\n";
LABEL_18:
      _os_log_impl(&dword_24680F000, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v24, 0x12u);
      return 4294954514;
    }
    unsigned int v23 = *(__CVPixelBufferPool **)(a2 + 4344);
    if (v23)
    {
      CVPixelBufferPoolRelease(v23);
      *(void *)(a2 + 4344) = 0;
    }
    CVPixelBufferPoolRetain(a1);
    uint64_t result = 0;
    *(void *)(a2 + 4344) = a1;
  }
  else
  {
    int v21 = H16ISP::H16ISPDevice::SetCommonBufferPool(v15, v16, 3, 0, v28, 0x2DuLL);
    if (v21)
    {
      int v22 = v21;
      CFNumberRef v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v19 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
      }
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        return 4294954514;
      }
      int v24 = 136315394;
      long long v25 = "SetUnsynchronizedSensorRawOutputBufferPool";
      __int16 v26 = 1024;
      int v27 = v22;
      CFNumberRef v20 = "%s - Error disabling shared raw/sifr pool, res = %d\n";
      goto LABEL_18;
    }
    uint64_t result = *(void *)(a2 + 4344);
    if (result)
    {
      CVPixelBufferPoolRelease((CVPixelBufferPoolRef)result);
      uint64_t result = 0;
      *(void *)(a2 + 4344) = 0;
    }
  }
  return result;
}

uint64_t CopyStrobeYetiStatus(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = 0;
  bzero(v12, 0x18uLL);
  int v9 = *(_DWORD *)(a3 + 132);
  __int16 v13 = 1583;
  uint64_t v15 = 0;
  int v14 = v9;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v12, 0x18u, 0, 0xFFFFFFFF))
  {
    uint64_t v10 = 4294954513;
  }
  else
  {
    uint64_t v10 = 0;
    int valuePtr = v16;
  }
  *a2 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  return v10;
}

uint64_t SetExclusivelyForSecureProcessing(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v8 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  *(unsigned char *)(a2 + 2700) = v8;
  int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  uint64_t v10 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    int v8 = *(unsigned __int8 *)(a2 + 2700);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 136315394;
    uint64_t v15 = "SetExclusivelyForSecureProcessing";
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "%s - capstream->metadataOutput.bSecureProcessingOnly is set to %d\n\n", (uint8_t *)&v14, 0x12u);
    int v8 = *(unsigned __int8 *)(a2 + 2700);
  }
  uint64_t result = H16ISP::H16ISPDevice::SetExclusiveExclaveStreamingMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8 != 0);
  if (result)
  {
    int v12 = result;
    __int16 v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v10)
    {
      __int16 v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315394;
      uint64_t v15 = "SetExclusivelyForSecureProcessing";
      __int16 v16 = 1024;
      int v17 = v12;
      _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "%s - Error setting exclusive exclave streaming mode = %d\n", (uint8_t *)&v14, 0x12u);
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyExclusivelyForSecureProcessing(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 2701)) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 4294954514;
  }
  uint64_t v4 = (void *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 2701)) {
    uint64_t v4 = (void *)MEMORY[0x263EFFB40];
  }
  *a2 = *v4;
  return result;
}

uint64_t SetTorchSegmentParameters(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v2 = (const __CFDictionary *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  CFDictionaryRef v7 = v2;
  uint64_t v52 = *MEMORY[0x263EF8340];
  LODWORD(v50) = 101;
  uint64_t valuePtr = 0;
  int v36 = 0;
  *(void *)long long v47 = 0;
  uint64_t v48 = 0;
  __int16 v49 = 0;
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  *(_OWORD *)int v42 = 0u;
  long long v43 = 0u;
  CFTypeID v8 = CFGetTypeID(v2);
  if (v8 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v7, @"SegmentLEDSignature");
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v7, @"SegmentLEDMode");
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v7, @"SegmentLEDGroups");
  CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(v7, @"SegmentLEDLevels");
  CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(v7, @"SegmentLEDBitmasks");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
    if (HIDWORD(valuePtr) == 170)
    {
      if (v10) {
        CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
      }
    }
  }
  if (v11)
  {
    CFNumberGetValue(v11, kCFNumberIntType, &v36);
    LODWORD(v11) = v36;
    if (v36 > 9) {
      return 4294954516;
    }
  }
  if (CFArrayGetCount(v12) != (int)v11) {
    return 4294954516;
  }
  uint64_t v14 = v36;
  if (CFArrayGetCount(v13) != v14) {
    return 4294954516;
  }
  int v15 = v36;
  if (v36)
  {
    unint64_t v16 = 0;
    int v17 = v47;
    uint64_t v18 = v42;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v12, v16);
      CFTypeID v20 = CFGetTypeID(ValueAtIndex);
      if (v20 != CFNumberGetTypeID()) {
        return 4294954516;
      }
      CFNumberRef v21 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, v16);
      CFNumberGetValue(v21, kCFNumberSInt16Type, v17);
      int v22 = CFArrayGetValueAtIndex(v13, v16);
      CFTypeID v23 = CFGetTypeID(v22);
      if (v23 != CFNumberGetTypeID()) {
        return 4294954516;
      }
      CFNumberRef v24 = (const __CFNumber *)CFArrayGetValueAtIndex(v13, v16);
      CFNumberGetValue(v24, kCFNumberSInt64Type, v18);
      ++v16;
      int v15 = v36;
      ++v17;
      ++v18;
    }
    while (v16 < v36);
  }
  unsigned __int8 v25 = BYTE4(valuePtr);
  uint64_t v26 = &_os_log_internal;
  if (HIDWORD(valuePtr) | v15)
  {
    if (!*(void *)(v6 + 136))
    {
      H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), 1u, 1u);
      unsigned __int8 v25 = BYTE4(valuePtr);
      LOBYTE(v15) = v36;
    }
    int v27 = H16ISP::H16ISPDevice::SetSegmentTorchLEDLevels(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), v25, valuePtr, v15, v47, v42);
    if (v27)
    {
      int v28 = v27;
      int v29 = 0;
      goto LABEL_30;
    }
    char v32 = 1;
  }
  else
  {
    int v28 = H16ISP::H16ISPDevice::SetSegmentTorchLEDLevels(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), 0, valuePtr, 0, v47, v42);
    if (!*(void *)(v6 + 136)) {
      H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), 0, 0);
    }
    int v29 = 0;
    if (v28)
    {
LABEL_30:
      int v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v26)
      {
        int v34 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v34;
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        int v39 = "SetTorchSegmentParameters";
        __int16 v40 = 1024;
        int v41 = v28;
        _os_log_impl(&dword_24680F000, v34, OS_LOG_TYPE_INFO, "%s - Could not set strobe state, res = 0x%x\n\n", buf, 0x12u);
        if (v29) {
          goto LABEL_34;
        }
      }
      else if (v29)
      {
        goto LABEL_34;
      }
      uint64_t v30 = 4294954516;
      goto LABEL_37;
    }
    char v32 = 0;
  }
  char v51 = v32;
  uint64_t v33 = *(void *)(v4 + 200);
  if (!v33)
  {
    int v28 = 0;
    int v29 = 1;
    goto LABEL_30;
  }
  H16ISP::H16ISPServicesRemote::SetProperty(v33, &v50);
  int v28 = 0;
LABEL_34:
  uint64_t v30 = 0;
LABEL_37:
  CFTypeID v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v26)
  {
    CFTypeID v35 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v35;
  }
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v39) = v28;
    _os_log_impl(&dword_24680F000, v35, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting segmented LED levels. result=0x%08X\n\n", buf, 8u);
  }
  return v30;
}

uint64_t SetFocusBehavior(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  unsigned int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
  if (valuePtr > 2) {
    return 4294954516;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetFocusMultiCamBehavior(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  if (result)
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetFocusBehavior();
    }
    return 4294954514;
  }
  else
  {
    *(_DWORD *)(a2 + 636) = valuePtr;
  }
  return result;
}

uint64_t SetExclaveTestSuite(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t result = CFDictionaryContainsKey((CFDictionaryRef)a1, @"ExclaveGraphManagerInitTest");
  if (result)
  {
    uint64_t v9 = &_os_log_internal;
    if (!*(unsigned char *)(a2 + 2680))
    {
LABEL_22:
      int v13 = 0;
LABEL_23:
      CFNumberRef v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
      {
        CFNumberRef v19 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeID v20 = "Fail";
        if (v13) {
          CFTypeID v20 = "Pass";
        }
        *(_DWORD *)int v22 = 136315138;
        *(void *)&v22[4] = v20;
        _os_log_impl(&dword_24680F000, v19, OS_LOG_TYPE_DEFAULT, "ExclaveGraphManagerInitTest test result: %s\n", v22, 0xCu);
      }
      if (v13) {
        return 0;
      }
      else {
        return 4294954514;
      }
    }
    int v10 = ConfigureExclaveGraph(a4, a2);
    if (v10)
    {
      int v11 = v10;
      CFArrayRef v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
      {
        CFArrayRef v12 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
      }
      int v13 = 0;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      *(_DWORD *)int v22 = 136315394;
      *(void *)&v22[4] = "ExclaveGraphManagerInitTest";
      __int16 v23 = 1024;
      int v24 = v11;
      _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_DEFAULT, "%s - unable to configure exclave graph, res=%d\n", v22, 0x12u);
      goto LABEL_22;
    }
    *(void *)int v22 = 0;
    uint64_t v14 = (unsigned int *)(a2 + 132);
    if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1718186595))
    {
      H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(a2 + 4472), 17, (H16ISP::H16ISPFilterGraphNode **)v22);
      int v15 = *(unsigned __int8 *)(a2 + 2697);
      if (v15 != (*(unsigned int (**)(void))(**(void **)v22 + 40))(*(void *)v22)) {
        goto LABEL_22;
      }
      *(void *)int v22 = 0;
      H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(a2 + 4472), 20, (H16ISP::H16ISPFilterGraphNode **)v22);
      if (*(void *)v22)
      {
        int v16 = *(unsigned __int8 *)(a2 + 2698);
        if (v16 != (*(unsigned int (**)(void))(**(void **)v22 + 40))(*(void *)v22)) {
          goto LABEL_22;
        }
      }
      *(void *)int v22 = 0;
      H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(a2 + 4472), 21, (H16ISP::H16ISPFilterGraphNode **)v22);
      uint64_t v17 = *(void *)v22;
      if (!*(void *)v22) {
        goto LABEL_37;
      }
      int v18 = *(unsigned __int8 *)(a2 + 2696);
    }
    else
    {
      if (!H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *v14, 1718775412)
        && !H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *v14, 1718776695))
      {
        CFNumberRef v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
        {
          CFNumberRef v21 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          SetExclaveTestSuite();
        }
        goto LABEL_37;
      }
      *(void *)int v22 = 0;
      H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(a2 + 4472), 22, (H16ISP::H16ISPFilterGraphNode **)v22);
      uint64_t v17 = *(void *)v22;
      if (!*(void *)v22)
      {
LABEL_37:
        int v13 = 1;
        goto LABEL_23;
      }
      int v18 = *(unsigned __int8 *)(a2 + 2699);
    }
    if (v18 != (*(unsigned int (**)(uint64_t))(*(void *)v17 + 40))(v17)) {
      goto LABEL_22;
    }
    goto LABEL_37;
  }
  return result;
}

uint64_t CopyMainToSIFRFrameRateRatio(uint64_t a1, CFNumberRef *a2, uint64_t a3)
{
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 64));
  if (v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 4294954510;
  }
  *a2 = v4;
  return v5;
}

uint64_t CopyDefectivePixels(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(_DWORD *)&v14[1] = 0;
  v14[0] = 0;
  *(_OWORD *)buf = xmmword_2469DAC10;
  *(void *)&buf[16] = 0x200000002;
  std::unordered_map<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>::unordered_map((uint64_t)v13, (unsigned int *)buf, 3);
  int MaxResolutionSensorConfigIndex = H16ISP::H16ISPDevice::GetMaxResolutionSensorConfigIndex(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), v14);
  if (MaxResolutionSensorConfigIndex)
  {
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CopyDefectivePixels";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = MaxResolutionSensorConfigIndex;
      int v10 = "%s - Could not find valid sensor config index, res = 0x%08X\n";
LABEL_11:
      _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0x12u);
    }
  }
  else
  {
    DPCunsigned int Count = H16ISP::H16ISPDevice::GetDPCCount(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), v14[0], (unsigned int *)&v14[1]);
    if (!DPCCount) {
      operator new[]();
    }
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CopyDefectivePixels";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = DPCCount;
      int v10 = "%s - CISP_CMD_CH_SENSOR_STATIC_DPC_INFO_GET failed, res = 0x%08X\n";
      goto LABEL_11;
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table((uint64_t)v13);
  *a2 = 0;
  return 4294954516;
}

void sub_2468CE22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SetExternalSyncModeEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 136))
  {
    CFNumberRef v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetExternalSyncModeEnabled();
    }
    return 4294954514;
  }
  else
  {
    uint64_t result = H16ISP::H16ISPDevice::SetMasterSlaveSync(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 3);
    if (result)
    {
      uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v6 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        SetExternalSyncModeEnabled();
      }
      return 4294954516;
    }
  }
  return result;
}

uint64_t SetMLVNRConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFDictionaryRef theDict = 0;
  CFNumberRef v4 = (void *)*MEMORY[0x263F2CC20];
  CFNumberRef number = 0;
  value = v4;
  uint64_t v27 = 0;
  uint64_t valuePtr = 0;
  int v26 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  int ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CC08], (const void **)&value);
  int v10 = value;
  int v11 = (void *)*MEMORY[0x263F2CC18];
  if (ValueIfPresent) {
    BOOL v12 = value == v11;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D828], (const void **)&theDict))
    {
      uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v17 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        SetMLVNRConfiguration();
      }
      return 4294954516;
    }
    uint64_t v14 = (const void *)*MEMORY[0x263F2D840];
    if (!CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D840], (const void **)&number))
    {
      CFTypeID v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFTypeID v20 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        SetMLVNRConfiguration();
      }
      return 4294954516;
    }
    CFNumberGetValue(number, kCFNumberIntType, (char *)&valuePtr + 4);
    int v15 = (const void *)*MEMORY[0x263F2D838];
    if (!CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D838], (const void **)&number))
    {
      CFNumberRef v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v21 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        SetMLVNRConfiguration();
      }
      return 4294954516;
    }
    CFNumberGetValue(number, kCFNumberIntType, (char *)&v27 + 4);
    if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D830], (const void **)&theDict))
    {
      int v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v22 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        SetMLVNRConfiguration();
      }
      return 4294954516;
    }
    if (!CFDictionaryGetValueIfPresent(theDict, v14, (const void **)&number))
    {
      __int16 v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        __int16 v23 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        SetMLVNRConfiguration();
      }
      return 4294954516;
    }
    CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    if (!CFDictionaryGetValueIfPresent(theDict, v15, (const void **)&number))
    {
      int v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v24 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        SetMLVNRConfiguration();
      }
      return 4294954516;
    }
    CFNumberGetValue(number, kCFNumberIntType, &v27);
    if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CC10], (const void **)&number))
    {
      uint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v25 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        SetMLVNRConfiguration();
      }
      return 4294954516;
    }
    CFNumberGetValue(number, kCFNumberIntType, &v26);
    int v10 = value;
  }
  if (v10 == (void *)*MEMORY[0x263F2CC28])
  {
    int v16 = 1;
  }
  else
  {
    if (v10 != v11)
    {
      int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v13 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        SetMLVNRConfiguration();
      }
      return 4294954516;
    }
    int v16 = 2;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetMLVNRConfiguration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v16, SHIDWORD(valuePtr), valuePtr, SHIDWORD(v27), v27, v26);
  if (result)
  {
    CFNumberRef v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v19 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      SetMLVNRConfiguration();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopySupportedSphereModes(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  CFTypeID v8 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F2E328]);
    CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E310]);
    CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E340]);
    CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E348]);
    CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E350]);
    CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E330]);
    CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E318]);
    CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E320]);
    CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E338]);
    if (*(int *)(*(void *)(a5 + 24) + 4392) >= 17)
    {
      CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E360]);
      CFArrayAppendValue(v8, (const void *)*MEMORY[0x263F2E358]);
    }
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 4294954510;
  }
  *a2 = v8;
  return result;
}

uint64_t SetPrimaryFrameSkip(const __CFNumber *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = 1;
  if (*(void *)(a2 + 3888))
  {
    uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      SetPrimaryFrameSkip(a2, (CFArrayRef *)(a2 + 3888), v5);
    }
    return 4294954514;
  }
  CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr <= 0)
  {
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetPrimaryFrameSkip();
    }
    return 4294954516;
  }
  else
  {
    uint64_t result = H16ISP::H16ISPDevice::SetPrimaryFrameSkippingRatio(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
    if (result)
    {
      CFTypeID v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFTypeID v8 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        SetPrimaryFrameSkip();
      }
      return 4294954514;
    }
  }
  return result;
}

uint64_t SetActiveNondisruptiveStreamingFormats(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  if (!a1 || (CFTypeID v7 = CFGetTypeID(a1), v7 != CFArrayGetTypeID()))
  {
    int v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v15 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      SetActiveNondisruptiveStreamingFormats(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    return 4294954516;
  }
  CFArrayRef v8 = *(const __CFArray **)(a2 + 4328);
  if (!v8 || (Count = CFArrayGetCount(v8), CFIndex v10 = *(unsigned int *)(a2 + 48), Count <= v10))
  {
    __int16 v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v23 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      SetActiveNondisruptiveStreamingFormats(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    return 4294954516;
  }
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 4328), v10);
  if (ValueAtIndex && (CFArrayRef v12 = ValueAtIndex, !CFEqual(ValueAtIndex, (CFTypeRef)*MEMORY[0x263EFFD08])))
  {
    *(_WORD *)(a2 + 4465) = 0;
    CFIndex v31 = CFArrayGetCount(v12);
    if (CFArrayGetCount((CFArrayRef)a1) < 1)
    {
      int v33 = 0;
    }
    else
    {
      CFIndex v32 = 0;
      int v33 = 0;
      do
      {
        CFNumberRef v34 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v32);
        unsigned int valuePtr = 0;
        if (v34 && (CFNumberRef v35 = v34, v60.location = 0, v60.length = v31, CFArrayContainsValue(v12, v60, v34)))
        {
          CFNumberGetValue(v35, kCFNumberSInt32Type, &valuePtr);
          unsigned int v36 = valuePtr;
          unsigned int v37 = *(_DWORD *)(a2 + 168);
          BOOL v38 = valuePtr >= v37;
          unsigned int v39 = valuePtr - v37;
          if (v38)
          {
            unsigned int valuePtr = v39;
            unsigned int v36 = v39;
          }
          unsigned int v40 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * v36 + 16);
          if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), v40, v46, v55))
          {
            int v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              int v41 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              int v42 = *(_DWORD *)(a2 + 132);
              *(_DWORD *)buf = 136315650;
              xpc_object_t v50 = "ActiveNondisruptiveStreamingFormatsTrackIncludedConfigs";
              __int16 v51 = 1024;
              int v52 = v42;
              __int16 v53 = 1024;
              unsigned int v54 = v40;
              _os_log_error_impl(&dword_24680F000, v41, OS_LOG_TYPE_ERROR, "%s - ch%u: failed to load camera config=%u\n", buf, 0x18u);
            }
          }
          else if (v47 >> 8 < 0x21 || v48 >> 5 < 0xBD)
          {
            if (v47 >> 7 >= 0x25 && v48 >= 0xB90) {
              *(unsigned char *)(a2 + 4466) = 1;
            }
          }
          else
          {
            *(unsigned char *)(a2 + 4465) = 1;
          }
          v33 |= 1 << v40;
        }
        else
        {
          long long v43 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v43 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v43;
          }
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFNumberRef v55 = 136315394;
            CFDataRef v56 = "SetActiveNondisruptiveStreamingFormats";
            __int16 v57 = 2048;
            CFIndex v58 = v32;
            _os_log_error_impl(&dword_24680F000, v43, OS_LOG_TYPE_ERROR, "%s - skipping format index = %ld\n", v55, 0x16u);
          }
        }
        ++v32;
      }
      while (v32 < CFArrayGetCount((CFArrayRef)a1));
    }
    uint64_t result = H16ISP::H16ISPDevice::EnableContextSwitchingWithType(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v33, 1);
    if (result)
    {
      long long v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        long long v44 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
      }
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        SetActiveNondisruptiveStreamingFormats();
      }
      return 4294954514;
    }
  }
  else
  {
    int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetActiveNondisruptiveStreamingFormats();
    }
    return 4294954513;
  }
  return result;
}

uint64_t CopyStreamSensorRawOutputBufferPoolRequirements(const __CFAllocator *a1, CFMutableArrayRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 4294954516;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  LOWORD(v67[0]) = 3;
  __int16 v68 = 32;
  __int16 v53 = (int *)(a3 + 132);
  if (H16ISP::H16ISPDevice::GetPoolInfoBatched(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), v67, 2))
  {
    CFArrayRef v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFArrayRef v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      CopyStreamSensorRawOutputBufferPoolRequirements();
    }
    CFMutableArrayRef v9 = 0;
    uint64_t result = 4294954514;
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
    CFMutableArrayRef v9 = Mutable;
    if (Mutable)
    {
      uint64_t v46 = v6;
      char v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = (unsigned char *)(v5 + 4464);
      key = (void *)*MEMORY[0x263F04078];
      __int16 v51 = (void *)*MEMORY[0x263F04198];
      xpc_object_t v50 = (void *)*MEMORY[0x263F04240];
      __int16 v49 = (void *)*MEMORY[0x263F04118];
      unsigned int v48 = (void *)*MEMORY[0x263F041C0];
      unsigned int v47 = (void *)*MEMORY[0x263F04180];
      char v15 = 1;
      unsigned int v54 = (unsigned char *)(v5 + 4464);
      CFNumberRef v55 = Mutable;
      do
      {
        char v16 = v15;
        if ((v12 & 1) != 0 && !v14[1] && !*v14) {
          break;
        }
        uint64_t v17 = &v67[2 * v13];
        uint64_t v18 = (int *)(v17 + 1);
        if (*((_DWORD *)v17 + 4) && (uint64_t v19 = &v67[2 * v13], v21 = *((_DWORD *)v19 + 5), v20 = (char *)v19 + 20, v21))
        {
          BOOL v56 = *(unsigned char *)(v5 + 545) == 0;
          CFMutableDictionaryRef v22 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (v22)
          {
            __int16 v23 = v22;
            uint64_t v24 = v5;
            uint64_t v25 = &v67[2 * v13];
            CFNumberRef v26 = CFNumberCreate(a1, kCFNumberSInt16Type, (char *)v25 + 6);
            if (v26)
            {
              CFNumberRef v27 = v26;
              CFDictionarySetValue(v23, key, v26);
              CFRelease(v27);
            }
            CFNumberRef v28 = CFNumberCreate(a1, kCFNumberSInt16Type, (char *)v25 + 4);
            if (v28)
            {
              CFNumberRef v29 = v28;
              CFDictionarySetValue(v23, v51, v28);
              CFRelease(v29);
            }
            CFNumberRef v30 = CFNumberCreate(a1, kCFNumberIntType, v18);
            uint64_t v5 = v24;
            if (v30)
            {
              CFNumberRef v31 = v30;
              CFDictionarySetValue(v23, v50, v30);
              CFRelease(v31);
            }
            CFNumberRef v32 = CFNumberCreate(a1, kCFNumberIntType, v20);
            uint64_t v14 = v54;
            CFMutableArrayRef v9 = v55;
            if (v32)
            {
              CFNumberRef v33 = v32;
              CFDictionarySetValue(v23, v49, v32);
              CFRelease(v33);
            }
            CFNumberRef v34 = &v67[2 * v13];
            int valuePtr = *((unsigned __int16 *)v34 + 6);
            CFNumberRef v35 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
            if (v35)
            {
              CFNumberRef v36 = v35;
              CFDictionarySetValue(v23, v48, v35);
              CFRelease(v36);
            }
            int valuePtr = H16ISP::getCVPixelFormat((H16ISP *)*((unsigned __int16 *)v34 + 14), *((unsigned __int8 *)v34 + 24), v56);
            CFNumberRef v37 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
            if (v37)
            {
              CFNumberRef v38 = v37;
              CFDictionarySetValue(v23, v47, v37);
              CFRelease(v38);
            }
            CFArrayAppendValue(v55, v23);
            CFRelease(v23);
            long long v39 = v17[1];
            uint64_t v40 = v5 + 48 * v13;
            *(_OWORD *)(v40 + 4368) = *v17;
            *(_OWORD *)(v40 + 4384) = v39;
          }
        }
        else
        {
          int v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v41 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
          }
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            int v42 = *v53;
            int v43 = *v18;
            int v44 = DWORD1(v67[2 * v13 + 1]);
            int v45 = *(unsigned __int16 *)v17;
            int valuePtr = 136316162;
            CFIndex v58 = "CopyStreamSensorRawOutputBufferPoolRequirements";
            __int16 v59 = 1024;
            int v60 = v42;
            __int16 v61 = 1024;
            int v62 = v43;
            __int16 v63 = 1024;
            int v64 = v44;
            __int16 v65 = 1024;
            int v66 = v45;
            _os_log_error_impl(&dword_24680F000, v41, OS_LOG_TYPE_ERROR, "%s - ch=%u: invalid width=%u height=%u for pool type=%hu\n", (uint8_t *)&valuePtr, 0x24u);
          }
        }
        char v15 = 0;
        char v12 = 1;
        uint64_t v13 = 1;
      }
      while ((v16 & 1) != 0);
      uint64_t result = 0;
      uint64_t v6 = v46;
    }
    else
    {
      uint64_t result = 4294954510;
    }
  }
  CFMutableArrayRef *v6 = v9;
  return result;
}

uint64_t SetStreamSensorRawOutputBufferPools(const void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a1)
  {
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 != CFArrayGetTypeID()) {
      return 4294954516;
    }
    if (CFArrayGetCount((CFArrayRef)a1) < 1) {
      return 0;
    }
    CFIndex v8 = 0;
    uint64_t v9 = &_os_log_internal;
    while (1)
    {
      CFArrayRef ValueAtIndex = (__CVPixelBufferPool *)CFArrayGetValueAtIndex((CFArrayRef)a1, v8);
      if (!ValueAtIndex) {
        break;
      }
      int v11 = ValueAtIndex;
      CFTypeID v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != CVPixelBufferPoolGetTypeID()) {
        break;
      }
      unsigned int IndexForPool = H16ISPSensorRawPoolConfigurationFindIndexForPool(a2, v11);
      if ((IndexForPool & 0x80000000) != 0)
      {
        uint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
        {
          uint64_t v18 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
        }
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136315394;
        CFNumberRef v28 = "SetStreamSensorRawOutputBufferPools";
        __int16 v29 = 2048;
        CFIndex v30 = v8;
        uint64_t v19 = v18;
        uint64_t v20 = "%s - failed to resolve pool type for pool at index = %ld\n";
        goto LABEL_23;
      }
      unsigned int v14 = IndexForPool;
      uint64_t v15 = a2 + 48 * IndexForPool;
      char v16 = *(__CVPixelBufferPool **)(v15 + 4360);
      if (v16) {
        CVPixelBufferPoolRelease(v16);
      }
      if (!v14 && SetSIFRCommonPool(a4, *(_DWORD *)(a2 + 132), 1))
      {
        CFNumberRef v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
        {
          CFNumberRef v26 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v26;
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          SetStreamSensorRawOutputBufferPools();
        }
        return 4294954514;
      }
      *(void *)(v15 + 4360) = CVPixelBufferPoolRetain(v11);
LABEL_16:
      if (++v8 >= CFArrayGetCount((CFArrayRef)a1)) {
        return 0;
      }
    }
    uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
    {
      uint64_t v17 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
    }
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 136315394;
    CFNumberRef v28 = "SetStreamSensorRawOutputBufferPools";
    __int16 v29 = 2048;
    CFIndex v30 = v8;
    uint64_t v19 = v17;
    uint64_t v20 = "%s - invalid pool at index = %ld\n";
LABEL_23:
    _os_log_error_impl(&dword_24680F000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x16u);
    goto LABEL_16;
  }
  SetSIFRCommonPool(a4, *(_DWORD *)(a2 + 132), 0);
  uint64_t v21 = 0;
  char v22 = 1;
  do
  {
    char v23 = v22;
    uint64_t v24 = *(__CVPixelBufferPool **)(a2 + 48 * v21 + 4360);
    if (v24) {
      CVPixelBufferPoolRelease(v24);
    }
    char v22 = 0;
    uint64_t v21 = 1;
  }
  while ((v23 & 1) != 0);
  uint64_t result = 0;
  *(_OWORD *)(a2 + 4424) = 0u;
  *(_OWORD *)(a2 + 4440) = 0u;
  *(_OWORD *)(a2 + 4392) = 0u;
  *(_OWORD *)(a2 + 4408) = 0u;
  *(_OWORD *)(a2 + 4360) = 0u;
  *(_OWORD *)(a2 + 4376) = 0u;
  return result;
}

uint64_t SetStreamSensorRawOutputRetainedBufferCounts(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  int v60 = 0;
  int v61 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a1);
  if (!Count)
  {
    CFNumberRef v36 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v36 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v36;
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      SetStreamSensorRawOutputRetainedBufferCounts(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    return 4294954514;
  }
  uint64_t v9 = Count;
  CFIndex v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
  if (!v10) {
    return 4294954514;
  }
  int v11 = v10;
  CFDictionaryGetKeysAndValues((CFDictionaryRef)a1, v10, 0);
  CFTypeID v12 = &_os_log_internal;
  if (v9 >= 1)
  {
    uint64_t v13 = 0;
    while (1)
    {
      CFNumberRef v14 = (const __CFNumber *)v11[v13];
      int valuePtr = 0;
      int v62 = 0;
      if (!v14) {
        break;
      }
      if (!CFNumberGetValue(v14, kCFNumberSInt64Type, &valuePtr))
      {
        uint64_t v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v12)
        {
          uint64_t v24 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
        }
        if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136315394;
        __int16 v65 = "SetStreamSensorRawOutputRetainedBufferCountsInternal";
        __int16 v66 = 2048;
        *(void *)CFNumberRef v67 = v13;
        uint64_t v21 = v24;
        char v22 = "%s - failed to extract pool address at index = %ld\n";
        goto LABEL_28;
      }
      uint64_t v15 = valuePtr;
      if (!valuePtr || (CFTypeID v16 = CFGetTypeID(valuePtr), v16 != CVPixelBufferPoolGetTypeID()))
      {
        char v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v12)
        {
          char v23 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
        }
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          goto LABEL_36;
        }
        goto LABEL_23;
      }
      unsigned int IndexForPool = H16ISPSensorRawPoolConfigurationFindIndexForPool(a2, v15);
      if ((IndexForPool & 0x80000000) != 0)
      {
        uint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v12)
        {
          uint64_t v25 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
        }
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136315394;
        __int16 v65 = "SetStreamSensorRawOutputRetainedBufferCountsInternal";
        __int16 v66 = 2048;
        *(void *)CFNumberRef v67 = v13;
        uint64_t v21 = v25;
        char v22 = "%s - failed to resolve pool type for pool at index = %ld\n";
        goto LABEL_28;
      }
      unsigned int v18 = IndexForPool;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, v11[v13]);
      if (!Value || !CFNumberGetValue(Value, kCFNumberIntType, &v62) || v62 < 0)
      {
        char v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v12)
        {
          char v23 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
        }
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          goto LABEL_36;
        }
LABEL_23:
        *(_DWORD *)buf = 136315394;
        __int16 v65 = "SetStreamSensorRawOutputRetainedBufferCountsInternal";
        __int16 v66 = 2048;
        *(void *)CFNumberRef v67 = v13;
        uint64_t v21 = v23;
        char v22 = "%s - invalid pool address at index = %ld\n";
LABEL_28:
        _os_log_error_impl(&dword_24680F000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x16u);
        goto LABEL_36;
      }
      *(_DWORD *)(a2 + 48 * v18 + 4400) = v62;
LABEL_36:
      if (v9 == ++v13) {
        goto LABEL_40;
      }
    }
    uint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v12)
    {
      uint64_t v20 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
    }
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136315394;
    __int16 v65 = "SetStreamSensorRawOutputRetainedBufferCountsInternal";
    __int16 v66 = 2048;
    *(void *)CFNumberRef v67 = v13;
    uint64_t v21 = v20;
    char v22 = "%s - invalid key at index = %ld\n";
    goto LABEL_28;
  }
LABEL_40:
  free(v11);
  if (!*(void *)(a2 + 136)) {
    return 0;
  }
  uint64_t v27 = resizeRawPool(a4, a2);
  if (v27)
  {
    uint64_t v26 = v27;
    CFNumberRef v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v12)
    {
      CFNumberRef v28 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      SetStreamSensorRawOutputRetainedBufferCounts(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    return v26;
  }
  if (*(void *)(a2 + 4408))
  {
    int v45 = *(_DWORD *)(a2 + 4448);
    if ((v45 & 0x80000000) == 0)
    {
      uint64_t v46 = *(void **)(a2 + 136);
      if (H16ISP::H16ISPFrameReceiver::HasPool(v46, 31))
      {
        FirmwarePrimeCFIndex Count = H16ISP::H16ISPFrameReceiver::getFirmwarePrimeCount((uint64_t)v46, 31);
        if (FirmwarePrimeCount + v45)
        {
          int v48 = FirmwarePrimeCount;
          if (H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount((uint64_t)v46, 31, FirmwarePrimeCount + v45))
          {
            __int16 v49 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v12)
            {
              __int16 v49 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v49;
            }
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              __int16 v65 = "resizeHiResRawPool";
              __int16 v66 = 1024;
              *(_DWORD *)CFNumberRef v67 = v45;
              *(_WORD *)&v67[4] = 1024;
              *(_DWORD *)&v67[6] = v48;
              _os_log_error_impl(&dword_24680F000, v49, OS_LOG_TYPE_ERROR, "%s - failed to modify buffer count retainedCount=%d firmwareCount=%d\n", buf, 0x18u);
              __int16 v49 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            }
            if (v49 == v12)
            {
              __int16 v49 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v49;
            }
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
              SetStreamSensorRawOutputRetainedBufferCounts(v49, v50, v51, v52, v53, v54, v55, v56);
            }
            return 4294954514;
          }
        }
      }
    }
  }
  uint64_t v57 = resizeStillMetaPool(a2, 1, &v61, &v60);
  if (v57)
  {
    uint64_t v26 = v57;
    CFIndex v58 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v12)
    {
      CFIndex v58 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v58;
    }
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v65 = "SetStreamSensorRawOutputRetainedBufferCounts";
      __int16 v66 = 1024;
      *(_DWORD *)CFNumberRef v67 = v26;
      *(_WORD *)&v67[4] = 1024;
      *(_DWORD *)&v67[6] = v61;
      __int16 v68 = 1024;
      int v69 = v60;
      _os_log_error_impl(&dword_24680F000, v58, OS_LOG_TYPE_ERROR, "%s - failed to resize still meta pool, err = %d, FWprimeCount= %d, clientRetainCount=%d\n", buf, 0x1Eu);
    }
  }
  else
  {
    uint64_t v26 = resizeThumbnailRawPool(a2, 1, 0, &v60);
    if (v26)
    {
      __int16 v59 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v12)
      {
        __int16 v59 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v59;
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
        SetStreamSensorRawOutputRetainedBufferCounts();
      }
    }
  }
  return v26;
}

uint64_t SetTorchBeamWidth(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float valuePtr = 0.0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
  uint64_t result = H16ISP::H16ISPDevice::SetTorchBeamWidth(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  if (result)
  {
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetTorchBeamWidth(&valuePtr);
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetMultiIlluminantWhiteBalanceEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  CFIndex v8 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  if (v8 && !H16ISP::H16ISPFrameReceiver::IsSuspended(v8)) {
    return 4294954612;
  }
  BOOL v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  *(unsigned char *)(a2 + 57705) = v9;
  uint64_t result = H16ISP::H16ISPDevice::EnableAWBMultiIlluminant(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v9);
  if (result)
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      SetMultiIlluminantWhiteBalanceEnabled();
    }
    return 4294954516;
  }
  return result;
}

uint64_t CopyMultiIlluminantWhiteBalanceEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 57705)) {
    uint64_t v3 = (void *)MEMORY[0x263EFFB40];
  }
  else {
    uint64_t v3 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v3;
  return 0;
}

uint64_t SetMaximumFrameRateForBufferAllocation(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float valuePtr = 0.0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
  if (valuePtr < 0.0)
  {
    CFIndex v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFIndex v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      SetMaximumFrameRateForBufferAllocation((uint64_t)&valuePtr);
    }
    return 4294954516;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetMaximumFrameRateForAllocation(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), vcvtms_u32_f32(valuePtr * 256.0));
  if (result)
  {
    CFIndex v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFIndex v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetMaximumFrameRateForBufferAllocation(&valuePtr);
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetSIFRControlMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  unsigned int v8 = *(_DWORD *)(a2 + 48);
  unsigned int v9 = *(_DWORD *)(a2 + 168);
  if (v8 < v9) {
    unsigned int v9 = 0;
  }
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v8 - v9) + 16), v15, v17))
  {
    CFIndex v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFIndex v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetSIFRControlMode();
    }
    return 4294954516;
  }
  if (!v16)
  {
    uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetSIFRControlMode();
    }
    return 4294954516;
  }
  unsigned int v14 = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &v14);
  uint64_t result = H16ISP::H16ISPDevice::SetCameraControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 3, v14);
  if (result)
  {
    CFTypeID v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      SetLPDPFilterEnable();
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetCameraControlsCacheExpiryDuration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  float valuePtr = 0.0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
  if (valuePtr < 0.0)
  {
    unsigned int v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      SetCameraControlsCacheExpiryDuration((uint64_t)&valuePtr);
    }
    return 4294954516;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetCameraControl(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 5, (float)(valuePtr * 1000000.0));
  if (result)
  {
    CFIndex v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFIndex v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetCameraControlsCacheExpiryDuration();
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetDeskViewEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  char v8 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  uint64_t result = H16ISP::H16ISPDevice::SetDeskViewEnabled(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8);
  if (result)
  {
    CFIndex v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFIndex v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetDeskViewEnabled();
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetDCSDataFileLoad(const void *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    CFTypeID v2 = CFGetTypeID(a1);
    if (v2 == CFDictionaryGetTypeID())
    {
      value = 0;
      int valuePtr = 0;
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"DCSDataFileLoad_FileType_Private", (const void **)&value))
      {
        if (CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr))
        {
          CFStringRef theString = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"DCSDataFileLoad_FilePath_Private", (const void **)&theString))
          {
            CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
            CFNumberRef v4 = fopen(CStringPtr, "rb");
            if (v4)
            {
              uint64_t v5 = v4;
              fseeko(v4, 0, 2);
              ftello(v5);
              fseeko(v5, 0, 0);
              operator new[]();
            }
          }
        }
      }
    }
  }
  return 4294954516;
}

uint64_t SetDCSDataFileUnload(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  unsigned int valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr)) {
    return 4294954516;
  }
  if (H16ISP::H16ISPDevice::ISP_UnloadDataFile(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr))return 4294954514; {
  return 0;
  }
}

uint64_t StartJasperForInternalStreaming(uint64_t a1)
{
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 1))
  {
    CFNumberRef v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      StartJasperForInternalStreaming(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    return 4294954514;
  }
  else
  {
    uint64_t v13 = v3;
    if (H16ISP::H16ISPDevice::ISP_ReserveChannel(*(void *)(v3 + 24), *(_DWORD *)(DerivedStorage + 132), 2u))
    {
      unsigned int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned int v14 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        StartJasperForInternalStreaming();
      }
      return 0;
    }
    else
    {
      *(unsigned char *)(DerivedStorage + 2) = 1;
      uint64_t v15 = (const void *)*MEMORY[0x263EFFB40];
      uint64_t v16 = SetDeferAdditionOfAttachments((const void *)*MEMORY[0x263EFFB40], DerivedStorage);
      if (v16)
      {
        uint64_t started = v16;
        uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v17 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          StartJasperForInternalStreaming();
        }
      }
      else
      {
        int valuePtr = 0;
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
        uint64_t started = SetFormatIndex(v19, DerivedStorage, v20, v13);
        CFRelease(v19);
        if (started)
        {
          uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v21 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
          }
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            StartJasperForInternalStreaming();
          }
        }
        else
        {
          int v30 = 104;
          CFNumberRef v22 = CFNumberCreate(v18, kCFNumberIntType, &v30);
          uint64_t started = SetToFCapturingPresetIndex(v22, DerivedStorage, v23, v13);
          CFRelease(v22);
          if (started)
          {
            uint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v25 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
            }
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              StartJasperForInternalStreaming();
            }
          }
          else
          {
            *(unsigned char *)(v13 + 249) = 1;
            if ((dword_26B11BAD4 & 0x80000000) == 0
              && H16ISP::H16ISPDevice::isSensorType(*(void *)(v13 + 24), *(_DWORD *)(DerivedStorage + 132), 1785950322))
            {
              *(unsigned char *)(v13 + 249) = 0;
              *(_DWORD *)(DerivedStorage + 4088) = 1;
            }
            uint64_t v26 = SetMultipleOutputSupportEnabled(v15, DerivedStorage, v24, v13);
            if (v26)
            {
              uint64_t started = v26;
              uint64_t v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v27 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
              }
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
                StartJasperForInternalStreaming();
              }
            }
            else
            {
              uint64_t started = H16ISPCaptureStreamStartInternal(a1);
              if (started)
              {
                CFNumberRef v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  CFNumberRef v28 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
                }
                if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
                  StartJasperForInternalStreaming();
                }
              }
            }
          }
        }
      }
    }
  }
  return started;
}

uint64_t StopJasperForInternalStreaming(uint64_t a1)
{
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 1))
  {
    uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      StopJasperForInternalStreaming(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    return 4294954514;
  }
  else
  {
    uint64_t v14 = v3;
    if (H16ISPCaptureStreamStopInternal(a1, v4))
    {
      uint64_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v15 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        StopJasperForInternalStreaming();
      }
    }
    *(unsigned char *)(v14 + 249) = 0;
    *(unsigned char *)(DerivedStorage + 4125) = 1;
    *(unsigned char *)(DerivedStorage + 2) = 0;
    if (H16ISP::H16ISPDevice::ISP_ReleaseChannel(*(H16ISP::H16ISPDevice **)(v14 + 24), *(_DWORD *)(DerivedStorage + 132)))
    {
      uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v16 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        StopJasperForInternalStreaming();
      }
    }
    if (!CFArrayGetCount(*(CFArrayRef *)(v14 + 120))) {
      goto LABEL_23;
    }
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 120), v17);
      FigCaptureStreamGetFigBaseObject();
      if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 1)) {
        ++v18;
      }
      ++v17;
    }
    while (v17 < CFArrayGetCount(*(CFArrayRef *)(v14 + 120)));
    if (!v18)
    {
LABEL_23:
      uint64_t result = *(void *)(v14 + 184);
      if (!result) {
        return result;
      }
      MEMORY[0x24C53D6E0](result, 0x1000C40009FEB1ALL);
      *(void *)(v14 + 184) = 0;
      H16ISP::H16ISPDevice::ISP_DestroyMultiCameraSession(*(H16ISP::H16ISPDevice **)(v14 + 24));
    }
    return 0;
  }
}

uint64_t H16ISPCaptureStreamStopInternal(uint64_t a1, uint64_t a2)
{
  CFTypeID v2 = (const void *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v3 = 3758097122;
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = (unsigned int *)(DerivedStorage + 132);
  kdebug_trace();
  if (!*(void *)(DerivedStorage + 136)) {
    goto LABEL_112;
  }
  uint64_t v7 = *(H16ISP::H16ISPDevice **)(v5 + 24);
  uint64_t v8 = *((void *)v7 + 548);
  if (*(unsigned char *)(DerivedStorage + 4112)) {
    H16ISP::H16ISPDevice::SetPearlControlMode(v7, *(_DWORD *)(DerivedStorage + 132), *(unsigned __int8 *)(DerivedStorage + 4114), 0, byte_26B11BAEA);
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 304));
  H16ISPResetVideoOutputConfigurationsForNewSelectedFormat(DerivedStorage, v5);
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 304));
  if (*(unsigned char *)(DerivedStorage + 3786)) {
    EnableIRProjector(0, DerivedStorage, v5);
  }
  if (*(_DWORD *)(v8 + 96 * *v6 + 16) == 1785950322) {
    H16ISP::JasperConfigManager::configureFrameMode((H16ISP::JasperConfigManager *)0xFFFFFFFFLL);
  }
  CFArrayRef v9 = *(const __CFArray **)(DerivedStorage + 3888);
  if (v9)
  {
    BOOL v10 = *(unsigned char *)(v8 + 96 * *v6 + 64) != 0;
    if (IsJasperSyncGroup(*(H16ISP::H16ISPDevice **)(v5 + 24), v9))
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 3888), 0);
      FigCaptureStreamGetFigBaseObject();
      BOOL v10 = *(_DWORD *)(DerivedStorage + 132) == *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 132);
    }
    if (GetNumberOfActiveChannels(*(const __CFArray **)(DerivedStorage + 3888)) >= 2 && v10)
    {
      uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v11 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStopInternal();
      }
      goto LABEL_112;
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  if (StopExclaveStreams(v5, DerivedStorage))
  {
    uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v12 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStopInternal();
    }
  }
  *(unsigned char *)(DerivedStorage + 2700) = 0;
  H16ISP::H16ISPFrameReceiver::stopReceive(*(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136));
  uint64_t v13 = *(H16ISP::H16ISPFilterGraphManager **)(DerivedStorage + 4240);
  if (v13)
  {
    if (*(void *)(DerivedStorage + 3888))
    {
      *(void *)buf = 0;
      H16ISP::H16ISPFilterGraphManager::GetNode(v13, 3, (H16ISP::H16ISPFilterGraphNode **)buf);
      if (*(void *)buf) {
        H16ISP::H16ISPGraphFrameSyncNode::DisableChannel(*(H16ISP::H16ISPGraphFrameSyncNode **)buf, *v6);
      }
      if (!v10) {
        goto LABEL_39;
      }
      H16ISP::H16ISPFilterGraphManager::Deactivate(*(H16ISP::H16ISPFilterGraphManager **)(DerivedStorage + 4240));
      uint64_t v14 = *(void *)(DerivedStorage + 4240);
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 3888)))
      {
        unint64_t v15 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 3888), v15);
          FigCaptureStreamGetFigBaseObject();
          uint64_t v16 = CMBaseObjectGetDerivedStorage();
          if (v16) {
            *(void *)(v16 + 4240) = 0;
          }
          ++v15;
        }
        while (v15 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 3888)));
      }
    }
    else
    {
      H16ISP::H16ISPFilterGraphManager::Deactivate(v13);
      uint64_t v17 = *(void *)(DerivedStorage + 4240);
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
    *(void *)(DerivedStorage + 4240) = 0;
  }
LABEL_39:
  int v18 = *(H16ISP::H16ISPFilterGraphManager **)(DerivedStorage + 4472);
  if (v18)
  {
    H16ISP::H16ISPFilterGraphManager::Deactivate(v18);
    uint64_t v19 = *(void *)(DerivedStorage + 4472);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    *(void *)(DerivedStorage + 4472) = 0;
  }
  uint64_t v20 = *(H16ISP::ProjectorManager **)(DerivedStorage + 4048);
  if (v20)
  {
    H16ISP::ProjectorManager::~ProjectorManager(v20);
    MEMORY[0x24C53D6E0]();
    *(void *)(DerivedStorage + 4048) = 0;
  }
  bzero(v56, 0x38uLL);
  H16ISP::H16ISPFrameReceiver::GetPerSessionTelemetryReadings(*(void *)(DerivedStorage + 136), (uint64_t)v56);
  unsigned int v55 = 0;
  H16ISP::H16ISPDevice::GetErrorCount(*(H16ISP::H16ISPDevice **)(v5 + 24), *(_DWORD *)(DerivedStorage + 132), 2, &v55);
  uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  uint64_t v22 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v21 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = *(_DWORD *)(DerivedStorage + 132);
    unsigned int v25 = v55 - *(_DWORD *)(DerivedStorage + 4312);
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "H16ISPCaptureStreamStopInternal";
    *(_WORD *)__int16 v66 = 1024;
    *(_DWORD *)&_DWORD v66[2] = v24;
    *(_WORD *)&v66[6] = 1024;
    *(_DWORD *)&v66[8] = v56[0];
    LOWORD(v67) = 1024;
    *(_DWORD *)((char *)&v67 + 2) = v57;
    HIWORD(v67) = 1024;
    LODWORD(v68) = v25;
    _os_log_impl(&dword_24680F000, v21, OS_LOG_TYPE_DEFAULT, "%s - channel=%d frameDropRequestEnabled=%d totalFrameDropRequests=%d sifErrorCount=%d\n", buf, 0x24u);
  }
  uint64_t v26 = *(void *)(v5 + 200);
  if (v26)
  {
    int v27 = *(_DWORD *)(DerivedStorage + 132);
    *(_DWORD *)buf = 15;
    int v28 = *(_DWORD *)(DerivedStorage + 4312);
    *(_DWORD *)&buf[8] = v27;
    *(_DWORD *)__int16 v66 = v55 - v28;
    *(void *)&v66[4] = v57;
    if (H16ISP::H16ISPServicesRemote::SetProperty(v26, (xpc_object_t *)buf))
    {
      uint64_t v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v22)
      {
        uint64_t v29 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v29;
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStopInternal();
      }
    }
    if (H16ISP::H16ISPDevice::isSensorType(*(void *)(v5 + 24), *v6, 1919251319)
      || H16ISP::H16ISPDevice::isSensorType(*(void *)(v5 + 24), *v6, 1919246706)
      || H16ISP::H16ISPDevice::isSensorType(*(void *)(v5 + 24), *v6, 1919251564))
    {
      bzero(buf, 0x3378uLL);
      unsigned int v30 = *v6;
      *(_DWORD *)buf = 16;
      *(_DWORD *)&buf[8] = v30;
      *(void *)__int16 v66 = v58;
      if (v59)
      {
        v66[8] = 1;
        uint64_t v67 = v60;
        uint64_t v68 = v61;
        int v69 = v62;
        uint64_t v70 = v63;
        int v71 = v64;
      }
      if (H16ISP::H16ISPServicesRemote::SetProperty(*(void *)(v5 + 200), (xpc_object_t *)buf))
      {
        uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v22)
        {
          uint64_t v31 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureStreamStopInternal();
        }
      }
    }
  }
  H16ISP::DestroyH16ISPFrameReceiver(*(H16ISP **)(DerivedStorage + 136), v23);
  H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v5 + 24), *(_DWORD *)(DerivedStorage + 132), 0, 0);
  uint64_t v32 = 0;
  *(void *)(DerivedStorage + 136) = 0;
  do
  {
    uint64_t v33 = DerivedStorage + v32;
    uint64_t v34 = *(__CVBuffer **)(DerivedStorage + v32 + 832);
    if (v34)
    {
      CVPixelBufferRelease(v34);
      *(void *)(v33 + 832) = 0;
    }
    uint64_t v35 = *(__CVBuffer **)(v33 + 1032);
    if (v35)
    {
      CVPixelBufferRelease(v35);
      *(void *)(v33 + 1032) = 0;
    }
    CFNumberRef v36 = *(__CVBuffer **)(DerivedStorage + v32 + 1232);
    if (v36)
    {
      CVPixelBufferRelease(v36);
      *(void *)(DerivedStorage + v32 + 1232) = 0;
    }
    v32 += 8;
  }
  while (v32 != 32);
  uint64_t v37 = *(__CVPixelBufferPool **)(DerivedStorage + 824);
  if (v37)
  {
    CVPixelBufferPoolRelease(v37);
    *(void *)(DerivedStorage + 824) = 0;
  }
  uint64_t v38 = *(__CVPixelBufferPool **)(DerivedStorage + 1024);
  if (v38)
  {
    CVPixelBufferPoolRelease(v38);
    *(void *)(DerivedStorage + 1024) = 0;
  }
  uint64_t v39 = *(__CVPixelBufferPool **)(DerivedStorage + 1224);
  if (v39)
  {
    CVPixelBufferPoolRelease(v39);
    *(void *)(DerivedStorage + 1224) = 0;
  }
  uint64_t v40 = *(__CVPixelBufferPool **)(DerivedStorage + 1424);
  if (v40)
  {
    CVPixelBufferPoolRelease(v40);
    *(void *)(DerivedStorage + 1424) = 0;
  }
  uint64_t v41 = *(__CVPixelBufferPool **)(DerivedStorage + 1624);
  if (v41)
  {
    CVPixelBufferPoolRelease(v41);
    *(void *)(DerivedStorage + 1624) = 0;
  }
  *(void *)(DerivedStorage + 1824) = 0;
  *(void *)(DerivedStorage + 2024) = 0;
  *(void *)(DerivedStorage + 2224) = 0;
  *(void *)(DerivedStorage + 2424) = 0;
  uint64_t v42 = *(__CVPixelBufferPool **)(DerivedStorage + 2624);
  if (v42)
  {
    CVPixelBufferPoolRelease(v42);
    *(void *)(DerivedStorage + 2624) = 0;
  }
  uint64_t v43 = *(__CVPixelBufferPool **)(DerivedStorage + 4344);
  if (v43)
  {
    CVPixelBufferPoolRelease(v43);
    *(void *)(DerivedStorage + 4344) = 0;
  }
  *(_DWORD *)(DerivedStorage + 3932) = 2;
  int v44 = *(const void **)(DerivedStorage + 3664);
  if (v44)
  {
    CFRelease(v44);
    *(void *)(DerivedStorage + 3664) = 0;
  }
  uint64_t v45 = 0;
  char v46 = 1;
  do
  {
    char v47 = v46;
    int v48 = *(__CVPixelBufferPool **)(DerivedStorage + 48 * v45 + 4360);
    if (v48) {
      CVPixelBufferPoolRelease(v48);
    }
    char v46 = 0;
    uint64_t v45 = 1;
  }
  while ((v47 & 1) != 0);
  int v49 = *(_DWORD *)(DerivedStorage + 76);
  *(_OWORD *)(DerivedStorage + 4424) = 0u;
  *(_OWORD *)(DerivedStorage + 4440) = 0u;
  *(_OWORD *)(DerivedStorage + 4392) = 0u;
  *(_OWORD *)(DerivedStorage + 4408) = 0u;
  *(_OWORD *)(DerivedStorage + 4360) = 0u;
  *(_OWORD *)(DerivedStorage + 4376) = 0u;
  if (v49)
  {
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 3776), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    if (*(void *)(DerivedStorage + 3712)) {
      DisableDisplayStrobeOverlay(DerivedStorage);
    }
    uint64_t v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v22)
    {
      uint64_t v50 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v50;
    }
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStopInternal();
    }
    H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D728], v2, 0);
    *(_DWORD *)(DerivedStorage + 76) = 0;
  }
  *(_DWORD *)(DerivedStorage + 72) = 0;
  if (*(void *)(DerivedStorage + 504))
  {
    FigFormatDescriptionRelease();
    *(void *)(DerivedStorage + 504) = 0;
  }
  if (*(unsigned char *)(DerivedStorage + 528)) {
    *(unsigned char *)(DerivedStorage + 528) = 0;
  }
  uint64_t v51 = *(H16ISP::H16ISPFirmwareWorkProcessor **)(v5 + 192);
  if (v51) {
    H16ISP::H16ISPFirmwareWorkProcessor::FlushSurfaceCache(v51);
  }
  uint64_t v52 = *(void *)(v5 + 200);
  if (v52)
  {
    unsigned int v53 = *v6;
    *(_DWORD *)buf = 2;
    *(_DWORD *)&buf[8] = v53;
    v66[0] = 0;
    H16ISP::H16ISPServicesRemote::SetProperty(v52, (xpc_object_t *)buf);
  }
  if (!*(unsigned char *)(DerivedStorage + 8)) {
    H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D748], v2, 0);
  }
  uint64_t v3 = 0;
  *(_WORD *)(DerivedStorage + 4489) = 0;
LABEL_112:
  kdebug_trace();
  return v3;
}

uint64_t ConfigurePearlForExclusiveFirmwareControl(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 57704) && SetDefaultFormatIndexConfiguration(a1, a2)) {
    return 4294954514;
  }
  *(unsigned char *)(a2 + 3956) = 0;
  *(unsigned char *)(a2 + 3976) = 0;
  *(_OWORD *)(a2 + 3936) = xmmword_2469DAC20;
  H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), 44, 1);
  return 0;
}

uint64_t SetDefaultFormatIndexConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 160);
  uint64_t v3 = H16ISP::H16ISPDevice::SetCameraConfig(*(void *)(a1 + 24), *(unsigned int *)(a2 + 132), *(unsigned int *)(v2 + 16), *(unsigned __int8 *)(v2 + 36), *(unsigned int *)(v2 + 40), *(unsigned int *)(v2 + 44), *(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned char *)(v2 + 64), *(_DWORD *)(v2 + 68), *(_DWORD *)(v2 + 72), *(void *)(v2 + 76), *(void *)(v2 + 84));
  if (v3)
  {
    uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetDefaultFormatIndexConfiguration();
    }
  }
  return v3;
}

uint64_t CopyGroupExtrinsics(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v2 = (const __CFAllocator *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  char v47 = v7;
  uint64_t v58 = *MEMORY[0x263EF8340];
  CFAllocatorRef allocator = v2;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294954510;
  }
  int v9 = *(_DWORD *)(v6 + 8);
  if (v9 == 2)
  {
    uint64_t v38 = Mutable;
    if (!H16ISP::H16ISPDevice::hasSensorType(*(void *)(v4 + 24), 1718186595)
      || !getPCECalib(*(void *)(v4 + 24), (uint64_t)v55))
    {
      uint64_t v39 = 0;
      CFMutableDictionaryRef Mutable = v38;
      goto LABEL_48;
    }
    if (CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90])) {
      Matrix<float>::Matrix<double>(v54);
    }
    CFRelease(v38);
    return 4294954510;
  }
  if (v9 != 1)
  {
    uint64_t v39 = 0;
    goto LABEL_48;
  }
  CFDictionaryRef theDict = Mutable;
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v52 = (uint64_t *)v53;
  v56.columns[0].i32[0] = 1919251564;
  v55[0] = (unsigned int *)&v56;
  *((_DWORD *)std::__tree<std::__value_type<camera_module_description,camera_module_description>,std::__map_value_compare<camera_module_description,std::__value_type<camera_module_description,camera_module_description>,std::less<camera_module_description>,true>,std::allocator<std::__value_type<camera_module_description,camera_module_description>>>::__emplace_unique_key_args<camera_module_description,std::piecewise_construct_t const&,std::tuple<camera_module_description&&>,std::tuple<>>(&v52, (int *)&v56, (uint64_t)&std::piecewise_construct, v55)+ 8) = 1919246706;
  v56.columns[0].i32[0] = 1919251319;
  v55[0] = (unsigned int *)&v56;
  *((_DWORD *)std::__tree<std::__value_type<camera_module_description,camera_module_description>,std::__map_value_compare<camera_module_description,std::__value_type<camera_module_description,camera_module_description>,std::less<camera_module_description>,true>,std::allocator<std::__value_type<camera_module_description,camera_module_description>>>::__emplace_unique_key_args<camera_module_description,std::piecewise_construct_t const&,std::tuple<camera_module_description&&>,std::tuple<>>(&v52, (int *)&v56, (uint64_t)&std::piecewise_construct, v55)+ 8) = 1919246706;
  v56.columns[0].i32[0] = 1785950322;
  v55[0] = (unsigned int *)&v56;
  *((_DWORD *)std::__tree<std::__value_type<camera_module_description,camera_module_description>,std::__map_value_compare<camera_module_description,std::__value_type<camera_module_description,camera_module_description>,std::less<camera_module_description>,true>,std::allocator<std::__value_type<camera_module_description,camera_module_description>>>::__emplace_unique_key_args<camera_module_description,std::piecewise_construct_t const&,std::tuple<camera_module_description&&>,std::tuple<>>(&v52, (int *)&v56, (uint64_t)&std::piecewise_construct, v55)+ 8) = 1919246706;
  BOOL v10 = v52;
  if (v52 == (uint64_t *)v53)
  {
LABEL_40:
    std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::destroy((uint64_t)&v52, v53[0]);
    uint64_t v39 = 0;
    CFMutableDictionaryRef Mutable = theDict;
    goto LABEL_48;
  }
  CFAllocatorRef v45 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    int v11 = *((_DWORD *)v10 + 7);
    int v12 = *((_DWORD *)v10 + 8);
    if (!H16ISP::H16ISPDevice::hasSensorType(*(void *)(v4 + 24), v11)
      || !H16ISP::H16ISPDevice::hasSensorType(*(void *)(v4 + 24), v12))
    {
      goto LABEL_24;
    }
    int v13 = 1919246706;
    if (v11 != 1919251564)
    {
      int v13 = 1919251319;
      if (v11 != 1919251319)
      {
        if (v11 == 1785950322)
        {
          unsigned __int16 SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(v4 + 24), 1785950322);
          PeridotCalib = H16ISP::createPeridotCalib(*(H16ISP **)(v4 + 24), *(xpc_connection_t **)(v4 + 200), (H16ISP::H16ISPServicesRemote *)SensorChannel);
          if (!PeridotCalib)
          {
            uint64_t v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v37 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v37;
            }
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
              CopyGroupExtrinsics(&buf, v51, v37);
            }
            goto LABEL_24;
          }
          PDPeridotCalibGetOperationalWideToPeridotTransform();
          simd_float3 v17 = v16;
          v17.i32[3] = v41;
          v18.i32[3] = v42;
          v19.i32[3] = v43;
          v20.i32[3] = v44;
          v56.columns[0] = v17;
          v56.columns[1] = v18;
          v56.columns[2] = v19;
          v56.columns[3] = v20;
          *(double *)&long long v21 = dsiExtrinsicsToFig(&v56);
          uint64_t v22 = 0;
          v54[0] = v21;
          v54[1] = v23;
          v54[2] = v24;
          unsigned int v25 = bytes;
          do
          {
            uint64_t v26 = 0;
            long long v27 = v54[v22];
            do
            {
              long long v49 = v27;
              *(_DWORD *)&v25[4 * v26] = *(_DWORD *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
              ++v26;
            }
            while (v26 != 4);
            ++v22;
            v25 += 16;
          }
          while (v22 != 3);
          CFRelease(PeridotCalib);
          goto LABEL_21;
        }
        int v13 = v12;
      }
    }
    __int16 v28 = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(v4 + 24), v13);
    if (H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v4 + 24), v28, 0, v55)) {
      break;
    }
    for (uint64_t i = 0; i != 3; ++i)
      *(float32x4_t *)&bytes[16 * i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v55[4 * i + 279]), *(float64x2_t *)&v55[4 * i + 281]);
LABEL_21:
    CFMutableDictionaryRef v30 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v30) {
      goto LABEL_44;
    }
    CFDataRef v31 = CFDataCreate(v45, bytes, 48);
    if (!v31)
    {
      CFRelease(v30);
LABEL_44:
      uint64_t v39 = 4294954510;
      goto LABEL_47;
    }
    uint64_t v32 = H16ISP::ModuleDescriptionToPortType(v12);
    CFDictionaryAddValue(v30, v32, v31);
    CFRelease(v31);
    uint64_t v33 = H16ISP::ModuleDescriptionToPortType(v11);
    CFDictionaryAddValue(theDict, v33, v30);
    CFRelease(v30);
LABEL_24:
    uint64_t v34 = (uint64_t *)v10[1];
    if (v34)
    {
      do
      {
        uint64_t v35 = v34;
        uint64_t v34 = (uint64_t *)*v34;
      }
      while (v34);
    }
    else
    {
      do
      {
        uint64_t v35 = (uint64_t *)v10[2];
        BOOL v36 = *v35 == (void)v10;
        BOOL v10 = v35;
      }
      while (!v36);
    }
    BOOL v10 = v35;
    if (v35 == (uint64_t *)v53) {
      goto LABEL_40;
    }
  }
  uint64_t v39 = 4294954514;
LABEL_47:
  std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::destroy((uint64_t)&v52, v53[0]);
  CFRelease(theDict);
  CFMutableDictionaryRef Mutable = 0;
LABEL_48:
  *char v47 = Mutable;
  return v39;
}

void sub_2468D220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,void *a50)
{
}

uint64_t CopyGroupMasterConfiguration(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef v9 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v9)
    {
      BOOL v10 = v9;
      uint64_t v26 = a2;
      CFArrayRef v11 = *(const __CFArray **)(a4 + 104);
      if (v11 && CFArrayGetCount(v11))
      {
        unint64_t v12 = 0;
        key = (void *)*MEMORY[0x263F2EAC0];
        uint64_t v32 = (void *)*MEMORY[0x263F2EAB0];
        CFDataRef v31 = (void *)*MEMORY[0x263F2EAA8];
        CFMutableDictionaryRef v30 = (void *)*MEMORY[0x263F2EAB8];
        int v13 = (const void *)*MEMORY[0x263EFFB40];
        uint64_t v14 = (const void *)*MEMORY[0x263EFFB38];
        uint64_t v29 = (void *)*MEMORY[0x263F2E5C8];
        __int16 v28 = (void *)*MEMORY[0x263F2E5D0];
        long long v27 = (void *)*MEMORY[0x263F2E5C0];
        do
        {
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 104), v12);
          FigCaptureStreamGetFigBaseObject();
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (*(unsigned char *)(DerivedStorage + 3896)) {
            CFDictionarySetValue(Mutable, key, ValueAtIndex);
          }
          if (*(unsigned char *)(DerivedStorage + 3897))
          {
            CFDictionarySetValue(Mutable, v32, ValueAtIndex);
            CFDictionarySetValue(Mutable, v31, ValueAtIndex);
            CFDictionarySetValue(Mutable, v30, ValueAtIndex);
          }
          simd_float3 v17 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (v17)
          {
            simd_float3 v18 = v17;
            int v19 = *(_DWORD *)(*(void *)(*(void *)(a5 + 24) + 4384)
                            + 96 * *(unsigned int *)(DerivedStorage + 132)
                            + 16);
            if (*(unsigned char *)(DerivedStorage + 3898)) {
              simd_float3 v20 = v13;
            }
            else {
              simd_float3 v20 = v14;
            }
            CFDictionarySetValue(v17, v29, v20);
            if (*(unsigned char *)(DerivedStorage + 3899)) {
              long long v21 = v13;
            }
            else {
              long long v21 = v14;
            }
            CFDictionarySetValue(v18, v28, v21);
            int v22 = *(_DWORD *)(DerivedStorage + 3904);
            if (v22 <= 0) {
              int v22 = (int)(float)(*(float *)(DerivedStorage + 52) / 10.0);
            }
            int valuePtr = v22;
            CFNumberRef v23 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
            CFDictionarySetValue(v18, v27, v23);
            CFRelease(v23);
            long long v24 = H16ISP::ModuleDescriptionToPortType(v19);
            CFDictionarySetValue(v10, v24, v18);
            CFRelease(v18);
          }
          ++v12;
        }
        while (v12 < CFArrayGetCount(*(CFArrayRef *)(a4 + 104)));
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2EAC8], v10);
      CFRelease(v10);
      a2 = v26;
    }
  }
  *a2 = Mutable;
  return 0;
}

uint64_t CopyGroupMaxSlaveStreams(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = *(_DWORD *)(a4 + 116);
  *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
  return 0;
}

uint64_t CopyGroupMaxSlaveTimeMachines(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = *(_DWORD *)(a4 + 120);
  *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
  return 0;
}

uint64_t CopyGroupMaxSlaveStreamsProcessingEnabled(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = *(_DWORD *)(a4 + 124);
  *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
  return 0;
}

uint64_t CopyGroupMidFrameSynchronizationEnabled(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (void *)MEMORY[0x263EFFB40];
  if (*(_DWORD *)(a4 + 128) != 1) {
    uint64_t v4 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v4;
  return 0;
}

CFIndex SetGroupNondisruptiveSwitchingFormatIndices(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  value[57] = *(void **)MEMORY[0x263EF8340];
  uint64_t v51 = *(void *)(*(void *)(a4 + 24) + 4384);
  uint64_t valuePtr = 0;
  float idx_4 = 0.0;
  CFArrayRef v5 = *(const __CFArray **)(a3 + 104);
  if (!v5) {
    return 4294954516;
  }
  if (cf)
  {
    value[0] = 0;
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 != CFDictionaryGetTypeID()) {
      return 4294954516;
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2C418], (const void **)value))
    {
      CFNumberGetValue((CFNumberRef)value[0], kCFNumberFloatType, (char *)&valuePtr + 4);
      if (*((float *)&valuePtr + 1) < 0.0)
      {
        CFMutableDictionaryRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFMutableDictionaryRef v9 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          SetSwitchingFormatIndex((uint64_t)&valuePtr + 4);
        }
        return 4294954516;
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2C420], (const void **)value))
    {
      CFNumberGetValue((CFNumberRef)value[0], kCFNumberFloatType, &valuePtr);
      if (*(float *)&valuePtr < 0.0)
      {
        BOOL v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          BOOL v10 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          SetSwitchingFormatIndex((uint64_t)&valuePtr);
        }
        return 4294954516;
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2C428], (const void **)value))
    {
      CFNumberGetValue((CFNumberRef)value[0], kCFNumberFloatType, &idx_4);
      if (idx_4 < 0.0)
      {
        CFArrayRef v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFArrayRef v11 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          SetSwitchingFormatIndex((uint64_t)&idx_4);
        }
        return 4294954516;
      }
    }
    CFArrayRef v5 = *(const __CFArray **)(a3 + 104);
  }
  CFIndex result = CFArrayGetCount(v5);
  if (!result) {
    return result;
  }
  unint64_t v13 = 0;
  unsigned int v14 = 0;
  CFTypeRef cf1 = (CFTypeRef)*MEMORY[0x263EFFD08];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  do
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v13);
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    simd_float3 v16 = (int *)(DerivedStorage + 132);
    int v17 = *(_DWORD *)(v51 + 96 * *(unsigned int *)(DerivedStorage + 132) + 16);
    unsigned int idx = *(_DWORD *)(DerivedStorage + 4316);
    unsigned int v54 = 0;
    float64x2_t v53 = *(float64x2_t *)MEMORY[0x263F00148];
    if (cf)
    {
      simd_float3 v18 = H16ISP::ModuleDescriptionToPortType(v17);
      int v19 = CFDictionaryGetValue((CFDictionaryRef)cf, v18);
      if (v19)
      {
        simd_float3 v20 = *(int *)(*(void *)(a4 + 24) + 4392) <= 16 ? 0 : (CGPoint *)&v53;
        if (!ParseSwitchingFormatIndex(v19, *(_DWORD *)(DerivedStorage + 4316), &idx, &v54, v20))
        {
          char v46 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            char v46 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v46;
          }
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
            SetGroupNondisruptiveSwitchingFormatIndices();
          }
          return 4294954516;
        }
      }
    }
    if (!*(void *)(DerivedStorage + 40))
    {
      __int32 v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        __int32 v44 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
      }
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        SetGroupNondisruptiveSwitchingFormatIndices();
      }
      return 4294954516;
    }
    CFArrayRef v21 = *(const __CFArray **)(DerivedStorage + 4328);
    if (!v21)
    {
      CFAllocatorRef v45 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFAllocatorRef v45 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v45;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        SetGroupNondisruptiveSwitchingFormatIndices();
      }
      return 4294954514;
    }
    unsigned int v22 = *(_DWORD *)(DerivedStorage + 48);
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v21, v22);
    if (CFEqual(cf1, ValueAtIndex))
    {
      long long v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        long long v24 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        int v25 = *v16;
        *(_DWORD *)uint8_t buf = 136315394;
        char v59 = "SetGroupNondisruptiveSwitchingFormatIndices";
        __int16 v60 = 1024;
        int v61 = v25;
        _os_log_error_impl(&dword_24680F000, v24, OS_LOG_TYPE_ERROR, "%s - channel %d context switch list not available\n", buf, 0x12u);
      }
    }
    else
    {
      CFNumberRef v26 = CFNumberCreate(allocator, kCFNumberIntType, &idx);
      v67.length = CFArrayGetCount(ValueAtIndex);
      v67.location = 0;
      if (CFArrayContainsValue(ValueAtIndex, v67, v26)) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v22 == idx;
      }
      if (!v27)
      {
        char v47 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          char v47 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v47;
        }
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          int v48 = *v16;
          *(_DWORD *)uint8_t buf = 136315906;
          char v59 = "SetGroupNondisruptiveSwitchingFormatIndices";
          __int16 v60 = 1024;
          int v61 = v48;
          __int16 v62 = 1024;
          unsigned int v63 = v22;
          __int16 v64 = 1024;
          unsigned int v65 = idx;
          _os_log_error_impl(&dword_24680F000, v47, OS_LOG_TYPE_ERROR, "%s - channel %d switching from %d to %d is not allowed\n", buf, 0x1Eu);
        }
        CFRelease(v26);
        return 4294954516;
      }
      CFRelease(v26);
      CFRelease(*(CFTypeRef *)(DerivedStorage + 40));
      __int16 v28 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 112), idx);
      *(void *)(DerivedStorage + 40) = v28;
      CFRetain(v28);
      unsigned int v29 = idx;
      *(_DWORD *)(DerivedStorage + 48) = idx;
      H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(DerivedStorage + 132), *(_DWORD *)(*(void *)(DerivedStorage + 160) + 120 * v29 + 16), v52, buf);
      CFMutableDictionaryRef v30 = (char *)value + 76 * v14;
      *(_DWORD *)CFMutableDictionaryRef v30 = *(_DWORD *)(DerivedStorage + 132);
      uint64_t v31 = *(void *)(DerivedStorage + 160);
      unsigned int v32 = idx;
      uint64_t v33 = v31 + 120 * idx;
      *((_WORD *)v30 + 2) = *(_DWORD *)(v33 + 16);
      *((_DWORD *)v30 + 2) = v54;
      *(int8x8_t *)(v30 + 12) = vand_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(v53)), (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32(v52[204] == 0), 0x1FuLL)));
      LODWORD(v33) = *(unsigned __int8 *)(v33 + 36);
      v30[20] = v33;
      if (v33)
      {
        uint64_t v34 = v31 + 120 * v32;
        uint64_t v35 = (char *)value + 76 * v14;
        *(_OWORD *)(v35 + 24) = *(_OWORD *)(v34 + 48);
        *((void *)v35 + 5) = *(void *)(v34 + 40);
      }
      int v36 = *(unsigned __int8 *)(v31 + 120 * v32 + 64);
      *((unsigned char *)&value[6] + 76 * v14) = v36;
      if (v36)
      {
        uint64_t v37 = v31 + 120 * v32;
        uint64_t v38 = (char *)value + 76 * v14;
        *(_OWORD *)(v38 + 52) = *(_OWORD *)(v37 + 76);
        *(void *)(v38 + 68) = *(void *)(v37 + 68);
      }
      float v39 = *(float *)&valuePtr;
      if (*(float *)&valuePtr <= 0.0) {
        float v39 = *(float *)(DerivedStorage + 52);
      }
      *(float *)(DerivedStorage + 52) = v39;
      float v40 = idx_4;
      if (idx_4 <= 0.0) {
        float v40 = *(float *)(DerivedStorage + 56);
      }
      *(float *)(DerivedStorage + 56) = v40;
      int v41 = HIDWORD(valuePtr);
      if (*((float *)&valuePtr + 1) > 0.0)
      {
        float v42 = fminf(v40, *((float *)&valuePtr + 1));
        *(float *)(DerivedStorage + 52) = fminf(v39, *((float *)&valuePtr + 1));
        *(float *)(DerivedStorage + 56) = v42;
        *(_DWORD *)(DerivedStorage + 60) = v41;
      }
      ++v14;
    }
    ++v13;
  }
  while (v13 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
  if (v14)
  {
    CFIndex result = H16ISP::H16ISPDevice::SetContextSwitch(*(H16ISP::H16ISPDevice **)(a4 + 24), v14, value, vcvtms_u32_f32(*((float *)&valuePtr + 1) * 256.0), vcvtms_u32_f32(*(float *)&valuePtr * 256.0), vcvtms_u32_f32(idx_4 * 256.0));
    if (!result) {
      return result;
    }
    __int32 v43 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int32 v43 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v43;
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      SetGroupNondisruptiveSwitchingFormatIndices();
    }
    return 4294954514;
  }
  return 0;
}

uint64_t CopySynchronizedStreamsSensorRawOutputBufferPoolRequirements(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 4294954516;
  }
  CFTypeID v8 = a2;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  if (!Mutable)
  {
    unsigned int v22 = 0;
    uint64_t result = 4294954510;
    goto LABEL_64;
  }
  CFArrayRef v11 = Mutable;
  CFArrayRef v12 = *(const __CFArray **)(a4 + 104);
  uint64_t v77 = a3;
  CFAllocatorRef allocator = a1;
  if (v12 && CFArrayGetCount(v12) >= 1)
  {
    CFIndex v13 = 0;
    int v14 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 104), v13);
      FigCaptureStreamGetFigBaseObject();
      v14 |= 1 << *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 132);
      ++v13;
    }
    while (v13 < CFArrayGetCount(*(CFArrayRef *)(a4 + 104)));
  }
  else
  {
    LOWORD(v14) = 0;
  }
  char v80 = 0;
  __int16 v79 = 0;
  simd_float3 v16 = *(H16ISP::H16ISPDevice **)(a5 + 24);
  __int16 v17 = *(_WORD *)(a4 + 8) - 1;
  __int16 v18 = ChannelMaskForSharedRawPool(a5, a4, (unsigned __int16)v14);
  int SharedBufferPoolInfo = H16ISP::H16ISPDevice::GetSharedBufferPoolInfo(v16, v17, v18, 1, buf);
  if (!SharedBufferPoolInfo)
  {
    long long v23 = v93;
    *(_OWORD *)(a4 + 152) = *(_OWORD *)&v92[2];
    *(_OWORD *)(a4 + 168) = v23;
    *(_DWORD *)(a4 + 184) = v94;
    CFArrayRef v24 = *(const __CFArray **)(a4 + 104);
    if (v24 && CFArrayGetCount(v24) >= 1)
    {
      CFIndex v25 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 104), v25);
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (*(unsigned char *)(DerivedStorage + 4464) || *(unsigned char *)(DerivedStorage + 4465)) {
          break;
        }
        if (++v25 >= CFArrayGetCount(*(CFArrayRef *)(a4 + 104))) {
          goto LABEL_22;
        }
      }
      uint64_t v34 = *(H16ISP::H16ISPDevice **)(a5 + 24);
      __int16 v35 = *(_WORD *)(a4 + 8) - 1;
      __int16 v36 = ChannelMaskForSharedHiResRawPool(a5, (unsigned __int16)v14);
      int v37 = H16ISP::H16ISPDevice::GetSharedBufferPoolInfo(v34, v35, v36, 7, buf);
      if (v37)
      {
        int v38 = v37;
        CFArrayRef v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFArrayRef v21 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
        }
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        int v39 = (unsigned __int16)(*(_WORD *)(a4 + 8) - 1);
        *(_DWORD *)CFRange v81 = 136315906;
        v82 = "GetSharedHiResRawBufferPoolInfo";
        __int16 v83 = 1024;
        int v84 = v38;
        __int16 v85 = 1024;
        int v86 = v39;
        __int16 v87 = 1024;
        int v88 = ChannelMaskForSharedHiResRawPool(a5, (unsigned __int16)v14);
        uint64_t v33 = "%s - failed to get shared hires pool info: ret=0x%08x groupID=%hu mask=%hu\n";
        goto LABEL_67;
      }
      long long v67 = v93;
      *(_OWORD *)(a4 + 208) = *(_OWORD *)&v92[2];
      *(_OWORD *)(a4 + 224) = v67;
      *(_DWORD *)(a4 + 240) = v94;
    }
    else
    {
LABEL_22:
      HIBYTE(v79) = 1;
    }
    if (SuperWideActiveNondisruptiveStreamingFormatsIncludesARawPlusConfig(a5, a4))
    {
      BOOL v27 = *(H16ISP::H16ISPDevice **)(a5 + 24);
      __int16 v28 = *(_WORD *)(a4 + 8) - 1;
      __int16 v29 = ChannelMaskForSharedRawPlusPool(a5, (unsigned __int16)v14);
      int v30 = H16ISP::H16ISPDevice::GetSharedBufferPoolInfo(v27, v28, v29, 8, buf);
      if (v30)
      {
        int v31 = v30;
        CFArrayRef v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFArrayRef v21 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
        }
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        int v32 = (unsigned __int16)(*(_WORD *)(a4 + 8) - 1);
        *(_DWORD *)CFRange v81 = 136315906;
        v82 = "GetSharedRawPlusBufferPoolInfo";
        __int16 v83 = 1024;
        int v84 = v31;
        __int16 v85 = 1024;
        int v86 = v32;
        __int16 v87 = 1024;
        int v88 = ChannelMaskForSharedRawPlusPool(a5, (unsigned __int16)v14);
        uint64_t v33 = "%s - failed to get shared raw plus pool info: ret=0x%08x groupID=%hu mask=%hu\n";
        goto LABEL_67;
      }
      theArray = v11;
      int v69 = v8;
      *(_DWORD *)(a4 + 296) = v94;
      long long v40 = v93;
      *(_OWORD *)(a4 + 264) = *(_OWORD *)&v92[2];
      *(_OWORD *)(a4 + 280) = v40;
    }
    else
    {
      theArray = v11;
      int v69 = v8;
      char v80 = 1;
    }
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    key = (void *)*MEMORY[0x263F04078];
    unsigned int v73 = (void *)*MEMORY[0x263F04240];
    CFTypeID v74 = (void *)*MEMORY[0x263F04198];
    int v71 = (void *)*MEMORY[0x263F041C0];
    uint64_t v72 = (void *)*MEMORY[0x263F04118];
    uint64_t v70 = (void *)*MEMORY[0x263F04180];
    uint64_t v43 = &_os_log_internal;
    do
    {
      if (*((unsigned char *)&v79 + v42))
      {
        __int32 v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v43)
        {
          __int32 v44 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
        }
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          int v45 = *(_DWORD *)(v77 + 132);
          *(_DWORD *)uint8_t buf = 136315650;
          IOSurfaceID v90 = "CopySynchronizedStreamsSensorRawOutputBufferPoolRequirements";
          __int16 v91 = 1024;
          *(_DWORD *)int v92 = v45;
          *(_WORD *)&v92[4] = 1024;
          *(_DWORD *)&v92[6] = v42;
          _os_log_debug_impl(&dword_24680F000, v44, OS_LOG_TYPE_DEBUG, "%s - ch%u: ignoring pool requirements for index=%d\n", buf, 0x18u);
        }
      }
      else
      {
        char v46 = (_DWORD *)(a4 + v41);
        if (*(_DWORD *)(a4 + v41 + 172) && (char v47 = v46 + 44, v46[44]))
        {
          CFMutableDictionaryRef v48 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (v48)
          {
            long long v49 = v48;
            CFNumberRef v50 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a4 + v41 + 160));
            if (v50)
            {
              CFNumberRef v51 = v50;
              CFDictionarySetValue(v49, key, v50);
              CFRelease(v51);
            }
            CFNumberRef v52 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a4 + v41 + 158));
            if (v52)
            {
              CFNumberRef v53 = v52;
              CFDictionarySetValue(v49, v74, v52);
              CFRelease(v53);
            }
            CFNumberRef v54 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(a4 + v41 + 172));
            if (v54)
            {
              CFNumberRef v55 = v54;
              CFDictionarySetValue(v49, v73, v54);
              CFRelease(v55);
            }
            CFNumberRef v56 = CFNumberCreate(allocator, kCFNumberSInt32Type, v47);
            if (v56)
            {
              CFNumberRef v57 = v56;
              CFDictionarySetValue(v49, v72, v56);
              CFRelease(v57);
            }
            *(_DWORD *)uint8_t buf = *(unsigned __int16 *)(a4 + v41 + 168);
            CFNumberRef v58 = CFNumberCreate(allocator, kCFNumberIntType, buf);
            if (v58)
            {
              CFNumberRef v59 = v58;
              CFDictionarySetValue(v49, v71, v58);
              CFRelease(v59);
            }
            *(_DWORD *)uint8_t buf = H16ISP::getCVPixelFormat((H16ISP *)*(unsigned __int16 *)(a4 + v41 + 184), *(unsigned __int8 *)(a4 + v41 + 186), *(unsigned __int16 *)(a4 + v41 + 182));
            CFNumberRef v60 = CFNumberCreate(allocator, kCFNumberIntType, buf);
            if (v60)
            {
              CFNumberRef v61 = v60;
              CFDictionarySetValue(v49, v70, v60);
              CFRelease(v61);
            }
            CFArrayAppendValue(theArray, v49);
            CFRelease(v49);
          }
        }
        else
        {
          __int16 v62 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v43)
          {
            __int16 v62 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v62;
          }
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            int v63 = *(_DWORD *)(v77 + 132);
            int v64 = v46[43];
            int v65 = *(_DWORD *)(a4 + v41 + 176);
            int v66 = v46[38];
            *(_DWORD *)uint8_t buf = 136316162;
            IOSurfaceID v90 = "CopySynchronizedStreamsSensorRawOutputBufferPoolRequirements";
            __int16 v91 = 1024;
            *(_DWORD *)int v92 = v63;
            *(_WORD *)&v92[4] = 1024;
            *(_DWORD *)&v92[6] = v64;
            *(_WORD *)&v92[10] = 1024;
            *(_DWORD *)&v92[12] = v65;
            *(_WORD *)&v92[16] = 1024;
            LODWORD(v93) = v66;
            _os_log_error_impl(&dword_24680F000, v62, OS_LOG_TYPE_ERROR, "%s - ch=%u: invalid width=%u height=%u for shared pool id=%u\n", buf, 0x24u);
          }
        }
      }
      ++v42;
      v41 += 56;
    }
    while (v41 != 168);
    uint64_t result = 0;
    CFTypeID v8 = v69;
    unsigned int v22 = theArray;
    goto LABEL_64;
  }
  int v20 = SharedBufferPoolInfo;
  CFArrayRef v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFArrayRef v21 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
  }
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
    goto LABEL_14;
  }
  int v68 = (unsigned __int16)(*(_WORD *)(a4 + 8) - 1);
  *(_DWORD *)CFRange v81 = 136315906;
  v82 = "GetSharedRawBufferPoolInfo";
  __int16 v83 = 1024;
  int v84 = v20;
  __int16 v85 = 1024;
  int v86 = v68;
  __int16 v87 = 1024;
  int v88 = ChannelMaskForSharedRawPool(a5, a4, (unsigned __int16)v14);
  uint64_t v33 = "%s - failed to get shared raw pool info: ret=0x%08x groupID=%hu mask=%hu\n";
LABEL_67:
  _os_log_error_impl(&dword_24680F000, v21, OS_LOG_TYPE_ERROR, v33, v81, 0x1Eu);
LABEL_14:
  CFRelease(v11);
  unsigned int v22 = 0;
  uint64_t result = 4294954514;
LABEL_64:
  *CFTypeID v8 = v22;
  return result;
}

uint64_t SetSynchronizedStreamsSensorRawOutputBufferPools(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (cf)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 != CFArrayGetTypeID()) {
      return 4294954516;
    }
  }
  CFArrayRef v9 = *(const __CFArray **)(a3 + 104);
  if (!v9 || GetNumberOfActiveChannels(v9)) {
    return 4294954514;
  }
  uint64_t v37 = a2;
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 104)) < 1)
  {
    LOWORD(v11) = 0;
  }
  else
  {
    CFIndex v10 = 0;
    int v11 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v10);
      FigCaptureStreamGetFigBaseObject();
      v11 |= 1 << *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 132);
      ++v10;
    }
    while (v10 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
  }
  if (SetSharedBufferPoolConfigurations(a4, a3, (unsigned __int16)v11, 0)) {
    return 4294954514;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 104)) >= 1)
  {
    CFIndex v13 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v13);
      FigCaptureStreamGetFigBaseObject();
      *(void *)(CMBaseObjectGetDerivedStorage() + 4456) = 0;
      ++v13;
    }
    while (v13 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
  }
  H16ISPSensorSharedRawPoolConfigurationReset(a3, 0);
  if (!cf) {
    return 0;
  }
  uint64_t v14 = 0;
  __int16 v15 = *(_WORD *)(a3 + 8) - 1;
  do
  {
    uint64_t v16 = a3 + v14;
    *(_WORD *)(v16 + 192) = v15;
    *(_WORD *)(v16 + 194) = v11;
    v14 += 56;
  }
  while (v14 != 168);
  if (CFArrayGetCount((CFArrayRef)cf) < 1)
  {
    if (CFArrayGetCount(*(CFArrayRef *)(a3 + 104)) >= 1)
    {
      CFIndex v35 = 0;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v35);
        FigCaptureStreamGetFigBaseObject();
        *(void *)(CMBaseObjectGetDerivedStorage() + 4456) = a3 + 144;
        ++v35;
      }
      while (v35 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
    }
    int v36 = SetSharedBufferPoolConfigurations(a4, a3, (unsigned __int16)v11, 1);
  }
  else
  {
    CFIndex v17 = 0;
    while (1)
    {
      CFIndex v38 = v17;
      CFArrayRef ValueAtIndex = (__CVPixelBufferPool *)CFArrayGetValueAtIndex((CFArrayRef)cf, v17);
      int v19 = ValueAtIndex;
      if (!ValueAtIndex || (CFTypeID v20 = CFGetTypeID(ValueAtIndex), v20 != CVPixelBufferPoolGetTypeID()))
      {
        int v33 = -536870206;
        goto LABEL_47;
      }
      unsigned int IndexForPool = H16ISPSensorSharedRawPoolConfigurationFindIndexForPool(a3, v19);
      unsigned int v22 = IndexForPool;
      if ((IndexForPool & 0x80000000) != 0) {
        break;
      }
      switch(IndexForPool)
      {
        case 2u:
          int CVPixelFormat = (H16ISP *)H16ISP::getCVPixelFormat((H16ISP *)*(unsigned __int16 *)(a3 + 296), *(unsigned __int8 *)(a3 + 298), *(unsigned __int16 *)(a3 + 294));
          H16ISP::getFrameFormat(CVPixelFormat);
          operator new();
        case 1u:
          if (*(unsigned char *)(v37 + 544))
          {
            uint64_t v25 = a3 + 56 * IndexForPool;
            int v28 = *(unsigned __int16 *)(v25 + 184);
            BOOL v27 = (unsigned __int16 *)(v25 + 184);
            int v26 = v28;
            if ((v28 - 2) >= 2 && v26 != 5)
            {
              int v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                int v30 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v30;
              }
              if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              {
                unsigned int v32 = *v27;
                int buf = 136315394;
                buf_4 = "H16ISPSensorSharedRawPoolConfigurationInitSharedHiResRawPool";
                __int16 buf_12 = 1024;
                unsigned int buf_14 = v32;
                _os_log_error_impl(&dword_24680F000, v30, OS_LOG_TYPE_ERROR, "%s - unsupported compand type %d\n", (uint8_t *)&buf, 0x12u);
              }
            }
          }
          operator new();
        case 0u:
          long long v23 = (H16ISP *)H16ISP::getCVPixelFormat((H16ISP *)*(unsigned __int16 *)(a3 + 184), *(unsigned __int8 *)(a3 + 186), *(unsigned __int16 *)(a3 + 182));
          H16ISP::getFrameFormat(v23);
          operator new();
      }
      __int16 v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        __int16 v29 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v29;
      }
      int v36 = -536870212;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        int buf = 136315394;
        buf_4 = "H16ISPSensorSharedRawPoolConfigurationInitSharedPools";
        __int16 buf_12 = 1024;
        unsigned int buf_14 = v22;
        _os_log_error_impl(&dword_24680F000, v29, OS_LOG_TYPE_ERROR, "%s - invalid shared pool index=%d\n", (uint8_t *)&buf, 0x12u);
        int v36 = -536870212;
      }
      CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
      CFIndex v17 = v38 + 1;
      if (v38 + 1 >= Count) {
        goto LABEL_48;
      }
    }
    int v33 = -536870160;
LABEL_47:
    int v36 = v33;
LABEL_48:
    uint64_t v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v34 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v34;
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      SetSynchronizedStreamsSensorRawOutputBufferPools();
    }
  }
  if (v36) {
    return 4294954514;
  }
  else {
    return 0;
  }
}

void sub_2468D3FD4(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10A0C409E841ECDLL);
  _Unwind_Resume(a1);
}

uint64_t SetSynchronizedStreamsSensorRawOutputRetainedBufferCounts(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v5 = CFGetTypeID(a1);
  if (v5 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t v6 = v63;
  for (uint64_t i = 188; i != 356; i += 56)
    *v6++ = *(_DWORD *)(a3 + i);
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a1);
  if (Count)
  {
    uint64_t v9 = Count;
    CFIndex v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
    if (v10)
    {
      int v11 = v10;
      CFDictionaryGetKeysAndValues((CFDictionaryRef)a1, v10, 0);
      if (v9 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = &_os_log_internal;
        while (1)
        {
          CFNumberRef v14 = (const __CFNumber *)v11[v12];
          uint64_t valuePtr = 0;
          int v55 = 0;
          if (!v14) {
            break;
          }
          if (!CFNumberGetValue(v14, kCFNumberSInt64Type, &valuePtr))
          {
            CFArrayRef v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v13)
            {
              CFArrayRef v24 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
            }
            if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              goto LABEL_38;
            }
            *(_DWORD *)int buf = 136315394;
            CFNumberRef v58 = "SetSynchronizedStreamsSensorRawOutputRetainedBufferCountsInternal";
            __int16 v59 = 2048;
            *(void *)CFNumberRef v60 = v12;
            CFArrayRef v21 = v24;
            unsigned int v22 = "%s - failed to extract pool address at index = %ld\n";
            goto LABEL_30;
          }
          __int16 v15 = valuePtr;
          if (!valuePtr || (CFTypeID v16 = CFGetTypeID(valuePtr), v16 != CVPixelBufferPoolGetTypeID()))
          {
            long long v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v13)
            {
              long long v23 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
            }
            if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
              goto LABEL_38;
            }
            goto LABEL_25;
          }
          unsigned int IndexForPool = H16ISPSensorSharedRawPoolConfigurationFindIndexForPool(a3, v15);
          if ((IndexForPool & 0x80000000) != 0)
          {
            uint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v13)
            {
              uint64_t v25 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
            }
            if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              goto LABEL_38;
            }
            *(_DWORD *)int buf = 136315394;
            CFNumberRef v58 = "SetSynchronizedStreamsSensorRawOutputRetainedBufferCountsInternal";
            __int16 v59 = 2048;
            *(void *)CFNumberRef v60 = v12;
            CFArrayRef v21 = v25;
            unsigned int v22 = "%s - failed to resolve pool type for pool at index = %ld\n";
            goto LABEL_30;
          }
          unsigned int v18 = IndexForPool;
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, v11[v12]);
          if (!Value || !CFNumberGetValue(Value, kCFNumberIntType, &v55) || v55 < 0)
          {
            long long v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v13)
            {
              long long v23 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
            }
            if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
              goto LABEL_38;
            }
LABEL_25:
            *(_DWORD *)int buf = 136315394;
            CFNumberRef v58 = "SetSynchronizedStreamsSensorRawOutputRetainedBufferCountsInternal";
            __int16 v59 = 2048;
            *(void *)CFNumberRef v60 = v12;
            CFArrayRef v21 = v23;
            unsigned int v22 = "%s - invalid pool address at index = %ld\n";
LABEL_30:
            _os_log_error_impl(&dword_24680F000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x16u);
            goto LABEL_38;
          }
          *(_DWORD *)(a3 + 56 * v18 + 188) = v55;
LABEL_38:
          if (v9 == ++v12) {
            goto LABEL_42;
          }
        }
        CFTypeID v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v13)
        {
          CFTypeID v20 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
        }
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_38;
        }
        *(_DWORD *)int buf = 136315394;
        CFNumberRef v58 = "SetSynchronizedStreamsSensorRawOutputRetainedBufferCountsInternal";
        __int16 v59 = 2048;
        *(void *)CFNumberRef v60 = v12;
        CFArrayRef v21 = v20;
        unsigned int v22 = "%s - invalid key at index = %ld\n";
        goto LABEL_30;
      }
LABEL_42:
      free(v11);
      CFArrayRef v27 = *(const __CFArray **)(a3 + 104);
      if (v27)
      {
        CFIndex v28 = CFArrayGetCount(v27);
        if (v28)
        {
          CFIndex v29 = v28;
          if (v28 >= 1)
          {
            for (CFIndex j = 0; v29 != j; ++j)
            {
              CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), j);
              FigCaptureStreamGetFigBaseObject();
              uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
              int v55 = 0;
              LODWORD(valuePtr) = 0;
              if (*(void *)(DerivedStorage + 136))
              {
                uint64_t v32 = DerivedStorage;
                uint64_t v33 = resizeStillMetaPool(DerivedStorage, 1, &v55, (int *)&valuePtr);
                if (v33)
                {
                  uint64_t v26 = v33;
                  __int32 v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                  {
                    __int32 v44 = os_log_create("com.apple.isp", "plugin");
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
                  }
                  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 136315906;
                    CFNumberRef v58 = "SetSynchronizedStreamsSensorRawOutputRetainedBufferCounts";
                    __int16 v59 = 1024;
                    *(_DWORD *)CFNumberRef v60 = v26;
                    *(_WORD *)&unsigned __int8 v60[4] = 1024;
                    *(_DWORD *)&v60[6] = v55;
                    __int16 v61 = 1024;
                    LODWORD(v62) = valuePtr;
                    _os_log_error_impl(&dword_24680F000, v44, OS_LOG_TYPE_ERROR, "%s - failed to resize still meta pool, err = %d, FWprimeCount= %d, clientRetainCount=%d\n", buf, 0x1Eu);
                  }
                  goto LABEL_65;
                }
                uint64_t v34 = resizeThumbnailRawPool(v32, 1, 0, (int *)&valuePtr);
                if (v34)
                {
                  uint64_t v26 = v34;
                  int v45 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                  {
                    int v45 = os_log_create("com.apple.isp", "plugin");
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v45;
                  }
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
                    SetSynchronizedStreamsSensorRawOutputRetainedBufferCounts();
                  }
                  goto LABEL_65;
                }
              }
            }
          }
          uint64_t v26 = 0;
LABEL_65:
          uint64_t v46 = 0;
          for (k = (_DWORD *)(a3 + 188); ; k += 14)
          {
            CFMutableDictionaryRef v48 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(k - 11);
            if (v48 && *k != v63[v46])
            {
              uint64_t Pool = H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(v48);
              if (!Pool) {
                return 4294954514;
              }
              if (*(unsigned char *)Pool)
              {
                int v50 = *(_DWORD *)(Pool + 112);
                uint64_t v51 = (v50 + *k);
                int v52 = H16ISP::H16ISPFrameReceiverBufferPool::SetCapacity((pthread_mutex_t *)Pool, v50 + *k);
                if (v52) {
                  break;
                }
              }
            }
            if (++v46 == 3) {
              return v26;
            }
          }
          int v53 = v52;
          CFNumberRef v54 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFNumberRef v54 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v54;
          }
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315906;
            CFNumberRef v58 = "SetSynchronizedStreamsSensorRawOutputRetainedBufferCounts";
            __int16 v59 = 1024;
            *(_DWORD *)CFNumberRef v60 = v53;
            *(_WORD *)&unsigned __int8 v60[4] = 1024;
            *(_DWORD *)&v60[6] = v46;
            __int16 v61 = 2048;
            uint64_t v62 = v51;
            _os_log_error_impl(&dword_24680F000, v54, OS_LOG_TYPE_ERROR, "%s - failed to resize shared pool err=0x%08x idx=%d count=%zu\n", buf, 0x22u);
          }
        }
      }
    }
  }
  else
  {
    CFIndex v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFIndex v35 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v35;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      SetSynchronizedStreamsSensorRawOutputRetainedBufferCounts(v35, v36, v37, v38, v39, v40, v41, v42);
    }
  }
  return 4294954514;
}

uint64_t SetGroupAEWindowParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a4 + 24) + 4384);
  value = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != CFDictionaryGetTypeID() || CFArrayGetCount(*(CFArrayRef *)(a3 + 16)) > 4) {
    return 4294954516;
  }
  bzero(v21, 0x40uLL);
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 16)) < 1) {
    return 0;
  }
  unsigned int v10 = 0;
  CFIndex v11 = 0;
  float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x447A0000u);
  do
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), v11);
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v13 = H16ISP::ModuleDescriptionToPortType(*(_DWORD *)(v4 + 96 * *(unsigned int *)(DerivedStorage + 132) + 16));
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, v13, (const void **)&value))
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      CFNumberRef v14 = &v21[v10];
      *CFNumberRef v14 = *(_DWORD *)(DerivedStorage + 132);
      uint64_t result = H16ISPGetRectParamsFromDict((const __CFDictionary *)value, (char *)&v19 + 4, &v19, (char *)&v18 + 4, &v18, v14 + 1, 0);
      if (result) {
        return result;
      }
      v15.i64[0] = __PAIR64__(v19, HIDWORD(v19));
      v15.i64[1] = __PAIR64__(v18, HIDWORD(v18));
      *((int16x4_t *)&v21[v10++] + 1) = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(v15, v17)));
    }
    ++v11;
  }
  while (v11 < CFArrayGetCount(*(CFArrayRef *)(a3 + 16)));
  if (!v10) {
    return 0;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetMultiCamAEWindowParams(*(H16ISP::H16ISPDevice **)(a4 + 24), v10, v21);
  if (result)
  {
    CFTypeID v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      SetGroupAEWindowParams();
    }
    return 4294954516;
  }
  return result;
}

uint64_t SetGroupAFWindowParams(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a4 + 24) + 4384);
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  *(_OWORD *)values = 0u;
  long long v54 = 0u;
  if (!a1) {
    return 4294954516;
  }
  CFDictionaryRef v7 = a1;
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != CFDictionaryGetTypeID() || CFArrayGetCount(*(CFArrayRef *)(a3 + 16)) > 4) {
    return 4294954516;
  }
  bzero(v52, 0x270uLL);
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 16)) >= 1)
  {
    uint64_t v9 = 0;
    CFIndex v11 = 0;
    unsigned int v12 = 0;
    key = (void *)*MEMORY[0x263F2C488];
    CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x263EFFB40];
    uint64_t v40 = (void *)*MEMORY[0x263F2C378];
    float32x4_t v42 = (float32x4_t)vdupq_n_s32(0x447A0000u);
    CFDictionaryRef v38 = v7;
    uint64_t v39 = a3;
    uint64_t v37 = v4;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), v11);
      FigCaptureStreamGetFigBaseObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      int v14 = *(_DWORD *)(v4 + 96 * *(unsigned int *)(DerivedStorage + 132) + 16);
      value = 0;
      float32x4_t v15 = H16ISP::ModuleDescriptionToPortType(v14);
      if (CFDictionaryGetValueIfPresent(v7, v15, (const void **)&value))
      {
        CFTypeID v16 = CFGetTypeID(value);
        if (v16 == CFDictionaryGetTypeID())
        {
          values[0] = value;
          CFIndex Count = 1;
        }
        else
        {
          if (v16 != CFArrayGetTypeID())
          {
            CFIndex v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              CFIndex v28 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
            }
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              SetGroupAFWindowParams(v28, v29, v30, v31, v32, v33, v34, v35);
            }
            return 4294954516;
          }
          CFIndex Count = CFArrayGetCount((CFArrayRef)value);
          if ((unint64_t)(Count - 17) <= 0xFFFFFFFFFFFFFFEFLL)
          {
            uint64_t v36 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v36 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v36;
            }
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
              SetGroupAFWindowParams();
            }
            return 4294954516;
          }
          v62.location = 0;
          v62.length = Count;
          CFArrayGetValues((CFArrayRef)value, v62, (const void **)values);
        }
        uint64_t v18 = 0;
        uint64_t v19 = &v52[39 * v12];
        *((_WORD *)v19 + 77) = 0;
        v19[1] = 0xFFFF;
        while (1)
        {
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          unsigned int v44 = 0;
          *uint64_t v19 = *(_DWORD *)(DerivedStorage + 132);
          *((_WORD *)v19 + 68) = Count;
          uint64_t v20 = H16ISPGetRectParamsFromDict((const __CFDictionary *)values[v18], (char *)&v46 + 4, &v46, (char *)&v45 + 4, &v45, &v44, 0);
          if (v20) {
            break;
          }
          v21.i64[0] = __PAIR64__(v46, HIDWORD(v46));
          v21.i64[1] = __PAIR64__(v45, HIDWORD(v45));
          *(int16x4_t *)&v19[2 * v18 + 2] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(v21, v42)));
          unsigned int v22 = v44;
          *((unsigned char *)v19 + v18 + 138) = v44;
          if (v22) {
            *((_WORD *)v19 + 77) ^= 1 << v18;
          }
          long long v23 = CFDictionaryGetValue((CFDictionaryRef)values[v18], key);
          if (v23 && CFEqual(v23, cf2))
          {
            CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)values[v18], v40);
            if (!v24)
            {
              uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v26 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v26;
              }
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136315394;
                long long v49 = "SetGroupAFWindowParams";
                __int16 v50 = 2048;
                uint64_t v51 = v18;
                _os_log_error_impl(&dword_24680F000, v26, OS_LOG_TYPE_ERROR, "%s - missing FaceTrackingScale value for AF window=%ld\n", buf, 0x16u);
              }
              uint64_t v9 = 4294954516;
              goto LABEL_33;
            }
            CFNumberGetValue(v24, kCFNumberSInt16Type, (char *)v19 + 6);
            *((_WORD *)v19 + 2) = v18;
          }
          if (Count == ++v18)
          {
            uint64_t v9 = 0;
            CFDictionaryRef v7 = v38;
            a3 = v39;
            uint64_t v4 = v37;
            goto LABEL_34;
          }
        }
        uint64_t v9 = v20;
        uint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v25 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          long long v49 = "SetGroupAFWindowParams";
          __int16 v50 = 2048;
          uint64_t v51 = v18;
          _os_log_error_impl(&dword_24680F000, v25, OS_LOG_TYPE_ERROR, "%s - failed to extract rect parameters from AF window=%ld\n", buf, 0x16u);
        }
LABEL_33:
        CFDictionaryRef v7 = v38;
        a3 = v39;
        uint64_t v4 = v37;
LABEL_34:
        ++v12;
      }
      ++v11;
    }
    while (v11 < CFArrayGetCount(*(CFArrayRef *)(a3 + 16)));
    if (v9 || !v12) {
      return v9;
    }
    if (H16ISP::H16ISPDevice::SetMultiCamAFWindowParams(*(H16ISP::H16ISPDevice **)(a4 + 24), v12, v52))
    {
      CFArrayRef v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFArrayRef v27 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        SetGroupAFWindowParams();
      }
    }
  }
  return 0;
}

uint64_t SetGroupROIForCameraControls(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a4 + 24) + 4384);
  value = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != CFDictionaryGetTypeID() || CFArrayGetCount(*(CFArrayRef *)(a3 + 16)) > 4) {
    return 4294954516;
  }
  bzero(v20, 0x30uLL);
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 16)) < 1) {
    return 0;
  }
  unsigned int v10 = 0;
  CFIndex v11 = 0;
  float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x447A0000u);
  do
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), v11);
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v13 = H16ISP::ModuleDescriptionToPortType(*(_DWORD *)(v4 + 96 * *(unsigned int *)(DerivedStorage + 132) + 16));
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, v13, (const void **)&value))
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      v20[3 * v10] = *(_DWORD *)(DerivedStorage + 132);
      uint64_t result = H16ISPGetRectParamsFromDict((const __CFDictionary *)value, (char *)&v18 + 4, &v18, (char *)&v17 + 4, &v17, 0, 0);
      if (result) {
        return result;
      }
      v14.i64[0] = __PAIR64__(v18, HIDWORD(v18));
      v14.i64[1] = __PAIR64__(v17, HIDWORD(v17));
      *(int16x4_t *)&v20[3 * v10++ + 1] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(v14, v16)));
    }
    ++v11;
  }
  while (v11 < CFArrayGetCount(*(CFArrayRef *)(a3 + 16)));
  if (!v10) {
    return 0;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetMultiCamROIForCameraControls(*(H16ISP::H16ISPDevice **)(a4 + 24), v10, v20);
  if (result)
  {
    float32x4_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      float32x4_t v15 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      SetGroupROIForCameraControls();
    }
    return 4294954516;
  }
  return result;
}

uint64_t SetGroupLumaHistogramROI(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a4 + 24) + 4384);
  value = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != CFDictionaryGetTypeID() || CFArrayGetCount(*(CFArrayRef *)(a3 + 16)) > 4) {
    return 4294954516;
  }
  bzero(v21, 0x40uLL);
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 16)) < 1) {
    return 0;
  }
  unsigned int v10 = 0;
  CFIndex v11 = 0;
  float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x447A0000u);
  do
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), v11);
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v13 = H16ISP::ModuleDescriptionToPortType(*(_DWORD *)(v4 + 96 * *(unsigned int *)(DerivedStorage + 132) + 16));
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, v13, (const void **)&value))
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      float32x4_t v14 = &v21[v10];
      *(_DWORD *)float32x4_t v14 = *(_DWORD *)(DerivedStorage + 132);
      *((unsigned char *)v14 + 4) = 1;
      uint64_t result = H16ISPGetRectParamsFromDict((const __CFDictionary *)value, (char *)&v19 + 4, &v19, (char *)&v18 + 4, &v18, 0, 0);
      if (result) {
        return result;
      }
      v15.i64[0] = __PAIR64__(v19, HIDWORD(v19));
      v15.i64[1] = __PAIR64__(v18, HIDWORD(v18));
      *(int16x4_t *)((char *)&v21[v10++] + 6) = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(v15, v17)));
    }
    ++v11;
  }
  while (v11 < CFArrayGetCount(*(CFArrayRef *)(a3 + 16)));
  if (!v10) {
    return 0;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetMultiCamLumaHistogramROI(*(H16ISP::H16ISPDevice **)(a4 + 24), v10, v21);
  if (result)
  {
    float32x4_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      float32x4_t v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      SetGroupLumaHistogramROI();
    }
    return 4294954516;
  }
  return result;
}

uint64_t GroupStillImageCaptureNow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  CFDictionaryRef v12 = (const __CFDictionary *)v5;
  uint64_t v327 = *MEMORY[0x263EF8340];
  bzero(v299, 0x1214uLL);
  CFArrayRef v13 = *(const __CFArray **)(v9 + 104);
  if (!v13)
  {
    uint64_t v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v34 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v34;
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      GroupStillImageCaptureNow(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    return 4294954516;
  }
  uint64_t v282 = v11;
  unsigned __int16 Count = CFArrayGetCount(v13);
  memset(v319, 0, 48);
  uint64_t v281 = v7;
  uint64_t v15 = *(void *)(*(void *)(v7 + 24) + 4384);
  int v288 = 0;
  int v287 = 0;
  bzero(&v283, 0xE8uLL);
  uint64_t v16 = Count;
  if (Count)
  {
    CFIndex v17 = 0;
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 104), v17))
      {
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        v298[v17] = DerivedStorage;
        uint64_t v19 = H16ISP::ModuleDescriptionToPortType(*(_DWORD *)(v15 + 96 * *(unsigned int *)(DerivedStorage + 132) + 16));
        if (*(void *)(DerivedStorage + 136))
        {
          if (CFDictionaryGetValueIfPresent(v12, v19, (const void **)&v319[v290]))
          {
            uint64_t v20 = v290;
            uint64_t v21 = &v283 + 2 * v290;
            *((void *)v21 + 17) = DerivedStorage;
            uint64_t v22 = v21 + 34;
            if (*(unsigned char *)(DerivedStorage + 3896))
            {
              *uint64_t v22 = v298[0];
              v298[0] = DerivedStorage;
              uint64_t v23 = v319[0];
              v319[0] = v319[v20];
              v319[v20] = v23;
              uint64_t v282 = DerivedStorage;
            }
            unsigned int v290 = v20 + 1;
          }
        }
      }
      ++v17;
    }
    while (v16 != v17);
  }
  if (!v298[0])
  {
    uint64_t v33 = 0;
    goto LABEL_33;
  }
  int v24 = *(unsigned __int8 *)(v298[0] + 3752);
  unsigned int v25 = *(_DWORD *)(v298[0] + 132);
  int v295 = 5;
  unsigned int v283 = v25;
  uint64_t v26 = v7;
  if (v290 >= 2)
  {
    unsigned int v25 = (unsigned __int16)v25;
    if (*(void *)(v298[0] + 3888) && !*(unsigned char *)(v298[0] + 3908)) {
      unsigned int v25 = (unsigned __int16)v25 | 0x80000000;
    }
    unsigned int v283 = v25;
  }
  CFNumberRef Value = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E3E0]);
  if (Value)
  {
    BOOL v28 = CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    H16ISP::H16ISPDevice::EnableHighlightRecovery(*(H16ISP::H16ISPDevice **)(v7 + 24), *(_DWORD *)(v298[0] + 132), v28, 1);
  }
  v320[0] = 0;
  CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E438]);
  if (v29)
  {
    CFNumberRef v30 = v29;
    CFTypeID v31 = CFGetTypeID(v29);
    if (v31 == CFNumberGetTypeID()) {
      CFNumberGetValue(v30, kCFNumberIntType, v320);
    }
  }
  if (H16ISP::H16ISPDevice::EnableSqrtToneCurve(*(H16ISP::H16ISPDevice **)(v7 + 24), v283, v320[0] == 1)) {
    goto LABEL_26;
  }
  uint64_t v32 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E3A0]);
  if (v32) {
    int v24 = CFEqual(v32, (CFTypeRef)*MEMORY[0x263EFFB40]);
  }
  if (H16ISP::H16ISPDevice::EnableCNRForStillCapture(*(H16ISP::H16ISPDevice **)(v7 + 24), v283, v24 != 0))
  {
LABEL_26:
    uint64_t v33 = 4294954611;
LABEL_33:
    float32x4_t v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      float32x4_t v42 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v42;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      GroupStillImageCaptureNow();
    }
    uint64_t v43 = v290;
    if (v290)
    {
      unsigned int v44 = v298;
      do
      {
        uint64_t v45 = *v44++;
        *(_DWORD *)(v45 + 76) = 0;
        --v43;
      }
      while (v43);
    }
    return v33;
  }
  char v47 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E390]);
  if (v47)
  {
    CFMutableDictionaryRef v48 = v47;
    long long v49 = *(void **)(v298[0] + 136);
    if (v49 && !H16ISP::H16ISPFrameReceiver::HasPool(v49, 20)) {
      return 4294954516;
    }
    unsigned __int8 v50 = CFEqual(v48, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  else
  {
    unsigned __int8 v50 = dword_26B11BA60;
    if (dword_26B11BA60 != 1) {
      goto LABEL_47;
    }
  }
  unsigned __int8 v284 = v50;
LABEL_47:
  uint64_t v51 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E388]);
  if (v51)
  {
    int v52 = *(void **)(v298[0] + 136);
    if (v52 && !H16ISP::H16ISPFrameReceiver::HasPool(v52, 22)) {
      return 4294954516;
    }
    BOOL v285 = CFEqual(v51, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  if (CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E380]))
  {
    int v53 = *(void **)(v298[0] + 136);
    if (v53 && !H16ISP::H16ISPFrameReceiver::HasPool(v53, 23)) {
      return 4294954516;
    }
    BOOL v286 = CFEqual(v51, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  long long v54 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E3F0]);
  if (v54)
  {
    BOOL v55 = CFEqual(v54, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    *(unsigned char *)(v298[0] + 4117) = v55;
  }
  else
  {
    *(unsigned char *)(v298[0] + 4117) = *(unsigned char *)(v298[0] + 4116);
  }
  long long v56 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E3A8]);
  if (v56) {
    LOBYTE(v287) = CFEqual(v56, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  long long v57 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E3C0]);
  if (v57) {
    BYTE1(v287) = CFEqual(v57, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  long long v58 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E3B8]);
  if (v58) {
    BYTE2(v287) = CFEqual(v58, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  long long v59 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E3B0]);
  if (v59) {
    HIBYTE(v287) = CFEqual(v59, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  CFDictionaryRef v60 = (const __CFDictionary *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2D880]);
  if (v60 && GetAFWindowParam(v60, (uint64_t)&v307, &v302[1]))
  {
    uint64_t v33 = 0;
    goto LABEL_33;
  }
  CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E398]);
  if (v61)
  {
    *(_DWORD *)uint64_t valuePtr = 0;
    CFNumberGetValue(v61, kCFNumberSInt32Type, valuePtr);
    v302[2] = *(_DWORD *)valuePtr;
    int v62 = 4;
  }
  else
  {
    int v62 = 0;
  }
  int v294 = v62;
  unsigned int v289 = 4;
  int v63 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2DA78]);
  if (v63 && CFEqual(v63, (CFTypeRef)*MEMORY[0x263EFFB40])) {
    unsigned int v289 = 1;
  }
  uint64_t v64 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E418]);
  if (v64)
  {
    if (CFEqual((CFTypeRef)*MEMORY[0x263F2E310], v64))
    {
      unsigned int v289 = 1;
      goto LABEL_78;
    }
    return 4294954516;
  }
LABEL_78:
  int v65 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2D918]);
  if (v65)
  {
    int v66 = v65;
    CFTypeID v67 = CFGetTypeID(v65);
    if (v67 == CFStringGetTypeID())
    {
      if (CFEqual(v66, (CFTypeRef)*MEMORY[0x263F2D898]))
      {
        unsigned __int16 v68 = 2;
      }
      else if (CFEqual(v66, (CFTypeRef)*MEMORY[0x263F2D888]))
      {
        unsigned __int16 v68 = 0;
      }
      else if (CFEqual(v66, (CFTypeRef)*MEMORY[0x263F2D890]))
      {
        unsigned __int16 v68 = 1;
      }
      else
      {
        CFEqual(v66, (CFTypeRef)*MEMORY[0x263F2D8A0]);
        unsigned __int16 v68 = 15;
      }
      unsigned __int16 v296 = v68;
    }
  }
  int v288 = *(_DWORD *)(v298[0] + 232);
  CFNumberRef v69 = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E3C8]);
  if (v69)
  {
    *(_DWORD *)uint64_t valuePtr = 0;
    CFNumberGetValue(v69, kCFNumberIntType, valuePtr);
    int v288 = (*(_DWORD *)valuePtr - 1) < 2;
  }
  if (v290)
  {
    unint64_t v70 = 0;
    uint64_t v33 = 0;
    uint64_t v268 = 0;
    v276 = (unsigned int *)v309;
    v277 = &v321;
    int v266 = -1;
    key = (void *)*MEMORY[0x263F2E428];
    v270 = (void *)*MEMORY[0x263F2E440];
    CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x263EFFB40];
    v261 = (void *)*MEMORY[0x263F2E3D0];
    v262 = (void *)*MEMORY[0x263F2D868];
    v274 = (void *)*MEMORY[0x263F2E638];
    v272 = (const void *)*MEMORY[0x263F2E508];
    v267 = (void *)*MEMORY[0x263F2E408];
    v263 = (void *)*MEMORY[0x263F2E460];
    v264 = (void *)*MEMORY[0x263F2E470];
    while (1)
    {
      int v71 = &v320[487 * v70];
      bzero(v71, 0x79CuLL);
      uint64_t v72 = &v283 + 2 * v70;
      uint64_t v74 = *((void *)v72 + 17);
      unsigned int v73 = (uint64_t *)(v72 + 34);
      v71[2] = *(_DWORD *)(v74 + 132);
      v75 = v71 + 2;
      *((_WORD *)v75 - 2) = 2623;
      uint64_t v275 = (uint64_t)(v75 + 2);
      CFArrayRef v76 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v319[v70], key);
      CFArrayRef v77 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v319[v70], v270);
      v279 = v73;
      if ((unint64_t)v76 | (unint64_t)v77)
      {
        CFArrayRef v78 = v77;
        uint64_t v79 = *(void *)(*v73 + 4456);
        if ((!v79 || !*(void *)(v79 + 56))
          && !H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(*v73 + 136), 31)
          && AddCntxSwRawPoolToFrameReceiver(*v73, v26))
        {
          v243 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v243 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v243;
          }
          if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR)) {
            GroupStillImageCaptureNow();
          }
          goto LABEL_291;
        }
        if (v70 && v300 != 605) {
          return 4294954611;
        }
        if (v70)
        {
          uint64_t v80 = *v73;
          unsigned int v81 = v301 | (0x10000 << *(_DWORD *)(*v73 + 132)) | 0x80000000;
        }
        else
        {
          __int16 v300 = 605;
          uint64_t v80 = *v73;
          LODWORD(v308[0]) = *(_DWORD *)(*v73 + 132);
          unsigned int v81 = v301 & 0x80000000 | (unsigned __int16)*(_DWORD *)(v298[0] + 132) | (0x10000 << *(_DWORD *)(v298[0] + 132)) & 0x7FFF0000;
        }
        unsigned int v301 = v81;
        if (*(unsigned char *)(v80 + 3896))
        {
          unsigned int v301 = v81 & 0xFFFF0000 | (unsigned __int16)*(_DWORD *)(v80 + 132);
          v309[2142] = 298;
          unsigned int v310 = *(unsigned __int16 *)(v80 + 132) | ((v290 != 0) << 31);
          v310 |= (0x10000 << *(_DWORD *)(v80 + 132)) & 0x7FFF0000;
          __int16 v312 = 0;
        }
        else
        {
          unsigned int v310 = v310 & 0x8000FFFF | ((((0x10000 << *(_DWORD *)(v80 + 132)) >> 16) & 0x7FFF) << 16);
        }
        *(_DWORD *)&v322[1948 * v70 + 1882] = 17;
        unint64_t v278 = v70;
        if (v76)
        {
          CFArrayRef v269 = v78;
          unsigned int v87 = CFArrayGetCount(v76);
          *(_DWORD *)uint64_t valuePtr = 0;
          float v316 = 0.0;
          uint64_t v273 = v87;
          if (v87)
          {
            CFIndex v88 = 0;
            unsigned int v89 = 0;
            IOSurfaceID v90 = &v320[487 * v70 + 3];
            while (1)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v76, v88);
              CFNumberRef v92 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v274);
              if (!v92)
              {
                uint64_t v33 = 4294954516;
                goto LABEL_184;
              }
              CFNumberGetValue(v92, kCFNumberSInt32Type, &v316);
              long long v93 = (int *)(v80 + 1368);
              if (*(unsigned char *)(v80 + 1364)
                || (long long v93 = (int *)(v80 + 2368), *(unsigned char *)(v80 + 2364))
                || (long long v93 = (int *)(v80 + 1568), *(unsigned char *)(v80 + 1564)))
              {
                int v94 = *v93;
              }
              else
              {
                int v94 = 0;
              }
              uint64_t v33 = 4294954516;
              if ((LODWORD(v316) & 0x80000000) != 0 || SLODWORD(v316) >= v94) {
                goto LABEL_184;
              }
              uint64_t v95 = &v315[v89];
              *uint64_t v95 = LOBYTE(v316);
              CFNumberRef v96 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v272);
              if (!v96) {
                break;
              }
              uint64_t v97 = v89;
              CFNumberGetValue(v96, kCFNumberSInt32Type, valuePtr);
              if (*(_DWORD *)valuePtr)
              {
                if (v89
                  && LOBYTE(v315[v89 - 1]) == *v95
                  && (IOSurfaceID v98 = &v315[v89 - 1], v100 = *((unsigned __int8 *)v98 + 1), v99 = (char *)v98 + 1, !v100))
                {
                  unsigned char *v99 = 2;
                }
                else
                {
                  ++v89;
                  HIBYTE(v315[v97]) = 1;
                }
              }
              else
              {
                ++v89;
                HIBYTE(v315[v97]) = 0;
              }
              unint64_t v70 = v278;
              v101 = &v320[487 * v278 + 4];
              GetPerFrameTuningParam(ValueAtIndex, (uint64_t)&v101[16 * (unint64_t)*v90], (unsigned char *)v80);
              uint64_t v102 = *v90;
              v101[16 * v102 + 5] = 1;
              *IOSurfaceID v90 = v102 + 1;
              if (v273 == ++v88)
              {
                uint64_t v33 = 0;
                goto LABEL_184;
              }
            }
            uint64_t v33 = 4294954516;
            unint64_t v70 = v278;
          }
          else
          {
            LOWORD(v89) = 0;
            uint64_t v33 = 0;
          }
LABEL_184:
          __int16 v312 = v89;
          uint64_t v138 = *v279;
          if (*(unsigned char *)(*v279 + 1352))
          {
            __int16 v139 = 1;
            CFArrayRef v78 = v269;
          }
          else
          {
            CFArrayRef v78 = v269;
            if (*(unsigned char *)(v138 + 1552)) {
              __int16 v139 = 1;
            }
            else {
              __int16 v139 = *(unsigned __int8 *)(v138 + 2280) != 0;
            }
          }
          __int16 v311 = v139 ^ 1;
          __int16 v313 = 2;
          __int16 v314 = 1;
        }
        v131 = v279;
        if (v78)
        {
          v140 = (H16ISP *)HasFlashBracket(v78);
          int v141 = (int)v140;
          BYTE4(v268) = v140 != 0;
          if (v140)
          {
            BOOL v142 = (v268 & 1) != 0 || H16ISP::getExternalStrobeAttached(v140);
            LOBYTE(v268) = v142;
            ConfigureExternalStrobeParameters(v26, *(_DWORD *)(*v279 + 132), v142);
            if (!v70)
            {
              *(_DWORD *)uint64_t valuePtr = 0;
              if (H16ISP::H16ISPDevice::ISP_PPMAdmissionCheck(*(void *)(v26 + 24), 1u, 0, 0x10000u, valuePtr))
              {
                int v143 = v266;
                if (v266 == -1) {
                  int v143 = 0x10000;
                }
              }
              else
              {
                int v143 = *(_DWORD *)valuePtr;
                if (*(_DWORD *)valuePtr >= 0x10000u) {
                  int v143 = 0x10000;
                }
              }
              int v266 = v143;
            }
          }
          CFDictionaryRef v145 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v319[v70], v267);
          if (v141 || (CFDictionaryRef v146 = v145) == 0)
          {
            *(unsigned char *)(*v279 + 552) = 0;
            if (!v141)
            {
              v151 = &v320[487 * v70];
              bzero((void *)(v275 + ((unint64_t)*((unsigned __int8 *)v151 + 12) << 6)), 0x40uLL);
              ++*((unsigned char *)v151 + 12);
            }
          }
          else
          {
            v147 = &v320[487 * v70];
            GetPerFrameTuningParam(v145, v275 + ((unint64_t)*((unsigned __int8 *)v147 + 12) << 6), (unsigned char *)*v279);
            uint64_t v148 = *((unsigned __int8 *)v147 + 12);
            *(_DWORD *)(v275 + (v148 << 6) + 20) = 2;
            *((unsigned char *)v147 + 12) = v148 + 1;
            *(unsigned char *)(*v279 + 552) = 1;
            v149 = CFDictionaryGetValue(v146, v264);
            if (v149 && CFEqual(v149, cf2)) {
              *(_DWORD *)&v322[1948 * v70 + 1878] = 1;
            }
            CFBooleanRef v150 = (const __CFBoolean *)CFDictionaryGetValue(v146, v263);
            if (v150) {
              v322[1948 * v70 + 1886] = CFBooleanGetValue(v150) != 0;
            }
          }
          uint64_t v152 = *v279;
          CFArrayRef v153 = v78;
          CFIndex v154 = CFArrayGetCount(v78);
          unint64_t v155 = v70;
          v156 = &v302[358 * LOWORD(v302[0])];
          v157 = &v320[487 * v155];
          unsigned int v160 = *((unsigned __int8 *)v157 + 12);
          v158 = v157 + 3;
          uint64_t v159 = v160;
          bzero(v156 + 68, 0x598uLL);
          if (v154 < 1)
          {
            int v162 = 0;
          }
          else
          {
            CFIndex v161 = 0;
            int v162 = 0;
            v163 = v156 + 69;
            uint64_t v164 = v159 << 6;
            v165 = v277;
            do
            {
              CFDictionaryRef v166 = (const __CFDictionary *)CFArrayGetValueAtIndex(v153, v161);
              v167 = &v163[17 * v162];
              if (v166) {
                GetPerFrameBracketParams(v166, (float32x2_t *)&v163[17 * v162], (uint64_t)v165 + v164 - 20, v152);
              }
              if (v162 && *((unsigned char *)v167 + 6) == 1 && (v168 = &v163[17 * (v162 - 1)], !*((unsigned char *)v168 + 6)))
              {
                *((unsigned char *)v168 + 6) = 2;
                *((unsigned char *)v168 + 5) = *((unsigned char *)v167 + 5);
                *((_WORD *)v168 + 1) = *((_WORD *)v167 + 1);
                bzero(&v163[17 * v162], 0x44uLL);
              }
              else
              {
                *(_DWORD *)((char *)v165 + v164) = 1;
                ++v162;
              }
              ++*v158;
              ++v161;
              v165 += 8;
            }
            while (v154 != v161);
          }
          if (LOWORD(v302[0]))
          {
            unsigned int v169 = HIWORD(v302[0]);
            v131 = v279;
            uint64_t v26 = v281;
            unint64_t v70 = v278;
            if (v162 == HIWORD(v302[0]))
            {
              uint64_t v33 = 0;
            }
            else
            {
              v170 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v170 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v170;
                unsigned int v169 = HIWORD(v302[0]);
              }
              if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t valuePtr = 136315650;
                *(void *)&unsigned char valuePtr[4] = "GetUBCaptureParams";
                *(_WORD *)&valuePtr[12] = 1024;
                *(_DWORD *)&valuePtr[14] = v169;
                *(_WORD *)&valuePtr[18] = 1024;
                *(_DWORD *)&valuePtr[20] = v162;
                _os_log_error_impl(&dword_24680F000, v170, OS_LOG_TYPE_ERROR, "%s - exposure count %d is not matched to new requestCount %d\n", valuePtr, 0x18u);
                unsigned int v169 = HIWORD(v302[0]);
              }
              uint64_t v33 = 4294954516;
            }
          }
          else
          {
            uint64_t v33 = 0;
            unsigned int v169 = (unsigned __int16)v162;
            HIWORD(v302[0]) = v162;
            v131 = v279;
            uint64_t v26 = v281;
            unint64_t v70 = v278;
          }
          LODWORD(v308[179 * v70]) = *(_DWORD *)(*v131 + 132);
          if (v169)
          {
            uint64_t v171 = v169;
            v172 = v276;
            do
            {
              int v173 = *((unsigned __int8 *)v172 - 8);
              unsigned int v175 = *v172;
              v172 += 17;
              unsigned int v174 = v175;
              if (v173 == 3) {
                unsigned int v176 = v174;
              }
              else {
                unsigned int v176 = 0;
              }
              v292[v70 + 6] += v176;
              unsigned int v177 = v293;
              if (v174 > v293) {
                unsigned int v177 = v174;
              }
              unsigned int v293 = v177;
              --v171;
            }
            while (v171);
          }
          v298[v70 + 6] = NumberOfClientRequestedHiResStillImageCaptures(v153);
          if (v292[v70 + 6]) {
            int v294 = 6;
          }
        }
        v178 = &v320[487 * v70];
        int v179 = *((unsigned __int8 *)v178 + 12);
        uint64_t v180 = *v131;
        *(_DWORD *)(*v131 + 76) = v179;
        if (v178[484] == 1) {
          *(_DWORD *)(v180 + 76) = v179 - 1;
        }
        v181 = &v283 + v70;
        v181[12] = 0;
        v181[6] = 0;
        ++LOWORD(v302[0]);
      }
      else
      {
        if (v288)
        {
          if (v70 && v300 != 540) {
            return 4294954611;
          }
          if (v70)
          {
            v82 = v73;
            __int16 v83 = (unsigned char *)*v73;
            unsigned int v84 = v301 | (0x10000 << *(_DWORD *)(*v73 + 132)) | 0x80000000;
          }
          else
          {
            bzero(v299, 0x30uLL);
            __int16 v300 = 540;
            v82 = v73;
            __int16 v83 = (unsigned char *)*v73;
            unsigned int v84 = v301 & 0x80000000 | (unsigned __int16)*(_DWORD *)(*v73 + 132) | (0x10000 << *(_DWORD *)(*v73 + 132)) & 0x7FFF0000;
          }
          unsigned int v301 = v84;
          InitBracketingTuningSet((_DWORD *)v275);
          CFTypeID PerFrameTuningParam = GetPerFrameTuningParam((const __CFDictionary *)v319[v70], v275, v83);
          BOOL v104 = v285;
          *(unsigned char *)(v275 + 42) = v285;
          unsigned int v105 = &v283 + v70;
          v105[6] = v104;
          BOOL v106 = v286;
          *(unsigned char *)(v275 + 43) = v286;
          v105[12] = v106;
          int v107 = &v320[487 * v70];
          *((unsigned char *)v107 + 12) = 1;
          int v108 = v107 + 3;
          uint64_t v109 = *v82;
          *(_DWORD *)(*v82 + 76) = 1;
          CFDictionaryRef v110 = (const __CFDictionary *)v319[v70];
          uint64_t v111 = *(void *)(*(void *)(v26 + 24) + 4384);
          if (v110
            && (CFTypeID v112 = CFGetTypeID((CFTypeRef)v319[v70]),
                CFTypeID PerFrameTuningParam = CFDictionaryGetTypeID(),
                v112 == PerFrameTuningParam))
          {
            CFRange v113 = CFDictionaryGetValue(v110, v262);
            if (v113) {
              __int16 v114 = CFEqual(v113, cf2) != 0;
            }
            else {
              __int16 v114 = 0;
            }
            CFTypeID PerFrameTuningParam = (CFTypeID)CFDictionaryGetValue(v110, v261);
            if (PerFrameTuningParam)
            {
              CFTypeID PerFrameTuningParam = CFEqual((CFTypeRef)PerFrameTuningParam, cf2);
              if (PerFrameTuningParam)
              {
                if (v306) {
                  int v144 = 1;
                }
                else {
                  int v144 = 2;
                }
                int v306 = v144;
              }
            }
          }
          else
          {
            __int16 v114 = 0;
          }
          BOOL ExternalStrobeAttached = H16ISP::getExternalStrobeAttached((H16ISP *)PerFrameTuningParam);
          ConfigureExternalStrobeParameters(v26, *(_DWORD *)(v109 + 132), ExternalStrobeAttached);
          v291[0] = v285;
          v292[0] = v286;
          unsigned int v117 = *(_DWORD *)(v109 + 132);
          if (*(_DWORD *)(v111 + 96 * v117 + 24))
          {
            if (!*(void *)(v109 + 3712) && !ExternalStrobeAttached)
            {
              uint64_t v116 = (uint64_t)H16ISPDisplayStrobePrepare(*(unsigned __int8 *)(v111 + 626));
              *(void *)(v109 + 3712) = v116;
              unsigned int v117 = *(_DWORD *)(v109 + 132);
            }
          }
          int v119 = *(_DWORD *)(v111 + 96 * v117 + 16);
          if (v119 == 1919246706 || v119 == 1919251564 || v119 == 1919251319)
          {
            *(_DWORD *)uint64_t valuePtr = 0;
            uint64_t v116 = H16ISP::H16ISPDevice::ISP_PPMAdmissionCheck(*(void *)(v26 + 24), 1u, 0, 0x10000u, valuePtr);
            int v122 = *(_DWORD *)valuePtr;
            if (*(_DWORD *)valuePtr >= 0x10000u) {
              int v122 = 0x10000;
            }
            if (v116) {
              int CameraStrobeMaxLoad = -1;
            }
            else {
              int CameraStrobeMaxLoad = v122;
            }
          }
          else
          {
            int CameraStrobeMaxLoad = -1;
          }
          if (*(void *)(v109 + 3712)) {
            char v124 = ExternalStrobeAttached;
          }
          else {
            char v124 = 1;
          }
          if ((v124 & 1) == 0)
          {
            int v125 = H16ISP::H16ISPDevice::PrepareCommand(*(H16ISP::H16ISPDevice **)(v26 + 24), *(_DWORD *)(v109 + 132), 1);
            if (v125)
            {
              int v126 = v125;
              v127 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v127 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v127;
              }
              if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t valuePtr = 136315650;
                *(void *)&unsigned char valuePtr[4] = "StillImageCaptureSub_FlashCapture";
                *(_WORD *)&valuePtr[12] = 1024;
                *(_DWORD *)&valuePtr[14] = 28274;
                *(_WORD *)&valuePtr[18] = 1024;
                *(_DWORD *)&valuePtr[20] = v126;
                _os_log_error_impl(&dword_24680F000, v127, OS_LOG_TYPE_ERROR, "%s - (%d) PrepareCommand err 0x%08X\n\n", valuePtr, 0x18u);
              }
LABEL_264:
              if (v70) {
                BOOL v189 = v306 == 1;
              }
              else {
                BOOL v189 = 0;
              }
              int v190 = v189;
              BOOL v191 = v306 == 2 && v70 == 0;
              v131 = v279;
              if (v191 || v190)
              {
                long long v192 = *(_OWORD *)(v275 + 16);
                *(_OWORD *)(v275 + 64) = *(_OWORD *)v275;
                *(_OWORD *)(v275 + 80) = v192;
                long long v193 = *(_OWORD *)(v275 + 48);
                *(_OWORD *)(v275 + 96) = *(_OWORD *)(v275 + 32);
                *(_OWORD *)(v275 + 112) = v193;
                *(_WORD *)(v275 + 106) = 0;
                ++*v108;
                ++*(_DWORD *)(*v279 + 76);
              }
              if (LOWORD(v302[0])) {
                int v194 = 8;
              }
              else {
                int v194 = 5;
              }
              int v295 = v194;
              goto LABEL_280;
            }
            H16ISPDisplayStrobeSetScreenBrightness(*(void *)(v109 + 3712), 0);
            unsigned int v132 = dword_26B11BA3C;
            if (dword_26B11BA3C)
            {
              v133 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v133 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v133;
              }
              double v2 = (double)HIBYTE(v132) * 0.00390625;
              double v3 = (double)BYTE2(v132) * 0.00390625;
              double v4 = (double)BYTE1(v132) * 0.00390625;
              double v134 = (double)v132 * 0.00390625;
              if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint64_t valuePtr = 134218752;
                *(double *)&unsigned char valuePtr[4] = (double)HIBYTE(v132) * 0.00390625;
                *(_WORD *)&valuePtr[12] = 2048;
                *(double *)&valuePtr[14] = (double)BYTE2(v132) * 0.00390625;
                *(_WORD *)&valuePtr[22] = 2048;
                *(double *)v324 = (double)BYTE1(v132) * 0.00390625;
                *(_WORD *)&v324[8] = 2048;
                double v325 = (double)v132 * 0.00390625;
                v135 = v133;
                v136 = "Override Display Strobe RGBA Params R=%4.3f G=%4.3f B=%4.3f A=%4.3f\n\n";
                uint32_t v137 = 42;
                goto LABEL_257;
              }
            }
            else
            {
              LOWORD(v2) = *(_WORD *)(v109 + 3720);
              LOWORD(v3) = *(_WORD *)(v109 + 3722);
              LOWORD(v4) = *(_WORD *)(v109 + 3724);
              v182 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v182 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v182;
              }
              double v2 = (double)*(unint64_t *)&v2 * 0.0000152587891;
              double v3 = (double)*(unint64_t *)&v3 * 0.0000152587891;
              double v4 = (double)*(unint64_t *)&v4 * 0.0000152587891;
              double v134 = 1.0;
              if (os_log_type_enabled(v182, OS_LOG_TYPE_INFO))
              {
                int v183 = *(unsigned __int16 *)(v109 + 3720);
                int v184 = *(unsigned __int16 *)(v109 + 3722);
                int v185 = *(unsigned __int16 *)(v109 + 3724);
                *(_DWORD *)uint64_t valuePtr = 67110400;
                *(_DWORD *)&unsigned char valuePtr[4] = v183;
                *(_WORD *)&valuePtr[8] = 2048;
                *(double *)&valuePtr[10] = v2;
                *(_WORD *)&valuePtr[18] = 1024;
                *(_DWORD *)&valuePtr[20] = v184;
                *(_WORD *)v324 = 2048;
                *(double *)&v324[2] = v3;
                LOWORD(v325) = 1024;
                *(_DWORD *)((char *)&v325 + 2) = v185;
                HIWORD(v325) = 2048;
                double v326 = v4;
                v135 = v182;
                v136 = "Current AWB RGBEstimate R=0x%04X (%4.3f) G=0x%04X (%4.3f) B=0x%04X (%4.3f)\n\n";
                uint32_t v137 = 50;
LABEL_257:
                _os_log_impl(&dword_24680F000, v135, OS_LOG_TYPE_INFO, v136, valuePtr, v137);
              }
            }
            *(double *)uint64_t valuePtr = v2;
            *(double *)&valuePtr[8] = v3;
            *(double *)&valuePtr[16] = v4;
            *(double *)v324 = v134;
            H16ISPDisplayStrobeSetScreenColor(*(void *)(v109 + 3712), (uint64_t)valuePtr);
            float v316 = 0.0;
            int StrobeBrightnessRatio = H16ISPDisplayGetStrobeBrightnessRatio(*(void *)(v109 + 3712), &v316);
            unsigned int v187 = vcvtd_n_u64_f64(v316, 0x10uLL);
            if (!StrobeBrightnessRatio) {
              int CameraStrobeMaxLoad = v187;
            }
            uint64_t v116 = usleep(0x3A98u);
          }
          if (CameraStrobeMaxLoad == -1) {
            int CameraStrobeMaxLoad = H16ISP::getCameraStrobeMaxLoad((H16ISP *)v116);
          }
          int v188 = v301 & 0x7FFF0000 | *(unsigned __int16 *)(v109 + 132);
          __int16 v300 = 540;
          unsigned int v301 = v188 | ((v290 > 1) << 31);
          LOWORD(v302[0]) = v114;
          memset((char *)v302 + 2, 0, 14);
          __int16 v303 = -1;
          unsigned int v304 = v289;
          int v305 = CameraStrobeMaxLoad;
          goto LABEL_264;
        }
        if (v70 && v300 != 298) {
          return 4294954611;
        }
        if (v70)
        {
          uint64_t v85 = *v73;
          unsigned int v86 = v301 | (0x10000 << *(_DWORD *)(*v73 + 132)) | 0x80000000;
        }
        else
        {
          bzero(v299, 0x30uLL);
          __int16 v300 = 298;
          uint64_t v85 = *v73;
          unsigned int v86 = v301 & 0x80000000 | (unsigned __int16)*(_DWORD *)(*v73 + 132) | (0x10000 << *(_DWORD *)(*v73 + 132)) & 0x7FFF0000;
        }
        unsigned int v301 = v86;
        *(_DWORD *)(v85 + 76) = 1;
        BOOL v128 = v285;
        *((unsigned char *)v75 + 50) = v285;
        v129 = &v283 + v70;
        v129[6] = v128;
        BOOL v130 = v286;
        *((unsigned char *)v75 + 51) = v286;
        v129[12] = v130;
        if (*(unsigned char *)(v298[0] + 674)
          && (*(unsigned char *)(v298[0] + 1280) || *(unsigned char *)(v298[0] + 1480) || *(unsigned char *)(v298[0] + 2280)))
        {
          HIWORD(v302[0]) = 1;
          _DWORD *v75 = *(_DWORD *)(v85 + 132);
          LOBYTE(v320[487 * v70 + 3]) = 1;
          InitBracketingTuningSet((_DWORD *)v275);
          GetPerFrameTuningParam((const __CFDictionary *)v319[v70], v275, (unsigned char *)v85);
        }
        v131 = v73;
      }
LABEL_280:
      if (dword_26B11B888)
      {
        int v195 = 1;
        LOBYTE(v287) = 1;
      }
      else
      {
        int v195 = v287;
      }
      if (H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(v26 + 24), *(_DWORD *)(*v131 + 132), 19, 1, v195 != 0)|| H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(v26 + 24), *(_DWORD *)(*v131 + 132), 37, 1, BYTE1(v287))|| H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(v26 + 24), *(_DWORD *)(*v131 + 132), 15, 1, BYTE2(v287))|| H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(v26 + 24),
                           *(_DWORD *)(*v131 + 132),
                           63,
                           1,
                           HIBYTE(v287)))
      {
        goto LABEL_33;
      }
      ++v70;
      v276 += 358;
      v277 = (uint64_t *)((char *)v277 + 1948);
      if (v70 >= v290) {
        goto LABEL_291;
      }
    }
  }
  BYTE4(v268) = 0;
  uint64_t v33 = 0;
  int v266 = -1;
LABEL_291:
  bzero(valuePtr, 0x14uLL);
  int v196 = *(_DWORD *)(v298[0] + 132);
  *(_WORD *)&unsigned char valuePtr[4] = 320;
  *(_DWORD *)&valuePtr[8] = v196;
  *(_DWORD *)&valuePtr[12] = v284;
  valuePtr[16] = v291[0] != 0;
  valuePtr[17] = v292[0] != 0;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v26 + 24), valuePtr, 0x14u, 0, 0xFFFFFFFF))
  {
    v197 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v197 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v197;
    }
    if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR)) {
      GroupStillImageCaptureNow();
    }
    goto LABEL_26;
  }
  if (H16ISP::H16ISPDevice::SetAEBracketingMode(*(H16ISP::H16ISPDevice **)(v26 + 24), v283, v296, v289))
  {
    v198 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v198 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v198;
    }
    if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR)) {
      GroupStillImageCaptureNow();
    }
    goto LABEL_26;
  }
  if (!v290) {
    goto LABEL_374;
  }
  unint64_t v199 = 0;
  v200 = v322;
LABEL_304:
  if (v300 != 605) {
    goto LABEL_317;
  }
  v201 = &v283 + 2 * v199;
  v204 = (uint64_t *)*((void *)v201 + 17);
  v203 = v201 + 34;
  v202 = v204;
  uint64_t v205 = v203[6];
  if (!v205 || (uint64_t v206 = v202[557]) == 0 || !*(void *)(v206 + 56))
  {
    CFArrayRef v207 = (const __CFArray *)v202[540];
    if (v207)
    {
      int v208 = CFArrayGetCount(v207);
      if (v208)
      {
        Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(*v203 + 136), 31);
        CFIndex v209 = 0;
        while (1)
        {
          v210 = (__CVBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*v203 + 4320), v209);
          int v211 = H16ISP::H16ISPFrameReceiver::AddPreallocatedBuffer(*(void **)(*v203 + 136), 31, v210);
          if (v211) {
            break;
          }
          if (v208 == ++v209) {
            goto LABEL_350;
          }
        }
        int v239 = v211;
        v240 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v240 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v240;
        }
        if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
        {
          int v241 = *(_DWORD *)(*v203 + 132);
          *(_DWORD *)uint64_t valuePtr = 136315650;
          *(void *)&unsigned char valuePtr[4] = "GroupStillImageCaptureNow";
          *(_WORD *)&valuePtr[12] = 1024;
          *(_DWORD *)&valuePtr[14] = v241;
          *(_WORD *)&valuePtr[18] = 1024;
          *(_DWORD *)&valuePtr[20] = v239;
          _os_log_error_impl(&dword_24680F000, v240, OS_LOG_TYPE_ERROR, "%s - AddPreallocatedBuffer() CH %d returns error 0x%x\n", valuePtr, 0x18u);
        }
LABEL_350:
        H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*(H16ISP::H16ISPDevice **)(v281 + 24), *(_DWORD *)(*v203 + 132), 32, 1, 0, 1u, (const void *)(BufferPool + 336));
        goto LABEL_322;
      }
    }
LABEL_317:
    v212 = &v283 + 2 * v199;
    uint64_t v215 = *((void *)v212 + 17);
    v214 = v212 + 34;
    uint64_t v213 = v215;
    uint64_t v216 = *(void *)(v215 + 4456);
    if ((!v216 || !*(void *)(v216 + 56)) && H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(v213 + 136), 31)) {
      H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(*(void *)v214 + 136), 31);
    }
    int v208 = 0;
LABEL_322:
    uint64_t v217 = LOBYTE(v320[487 * v199 + 3]);
    if (!LOBYTE(v320[487 * v199 + 3])) {
      goto LABEL_335;
    }
    BOOL v218 = v285;
    BOOL v219 = v286;
    v220 = &v283 + v199;
    unsigned int v223 = v220[12];
    v221 = v220 + 12;
    unsigned int v222 = v223;
    unsigned int v224 = *(v221 - 6);
    v225 = &v298[v199];
    v226 = v200;
    while (1)
    {
      int v227 = *v226 | v218;
      *v226 |= v218;
      int v228 = v226[1] | v219;
      v226[1] |= v219;
      int v229 = v226[11];
      if (v229 == 3) {
        break;
      }
      if (!v226[11])
      {
        LOBYTE(v229) = *(unsigned char *)(*v225 + 1400);
LABEL_330:
        v226[11] = v229;
      }
      if ((v229 & 0xFE) == 2) {
        ++v221[16];
      }
      v224 += v227;
      v222 += v228;
      v226 += 64;
      if (!--v217)
      {
        *(v221 - 6) = v224;
        unsigned int *v221 = v222;
LABEL_335:
        v230 = &v283 + 2 * v199;
        uint64_t v233 = *((void *)v230 + 17);
        v232 = v230 + 34;
        uint64_t v231 = v233;
        v234 = &v297[v199];
        if (*(unsigned char *)(v233 + 3784))
        {
          int v235 = 0;
          int *v234 = 0;
        }
        else
        {
          int v235 = *v234;
        }
        if (v284) {
          int v236 = *(_DWORD *)(v231 + 76);
        }
        else {
          int v236 = 0;
        }
        if (AllocateAndSendOneShotBuffers(v231, *(_DWORD *)(v231 + 76) - v235, v236, v291[v199], v292[v199], v208))
        {
          v242 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v242 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v242;
          }
          if (os_log_type_enabled(v242, OS_LOG_TYPE_ERROR)) {
            GroupStillImageCaptureNow();
          }
          uint64_t v33 = 4294954610;
          goto LABEL_33;
        }
        v237 = *(const void **)(*(void *)v232 + 4320);
        if (v237)
        {
          CFRelease(v237);
          *(void *)(*(void *)v232 + 4320) = 0;
        }
        ++v199;
        unint64_t v238 = v290;
        v200 += 1948;
        if (v199 >= v290) {
          goto LABEL_365;
        }
        goto LABEL_304;
      }
    }
    if (*(unsigned char *)(*v225 + 1400)) {
      LOBYTE(v229) = 2;
    }
    else {
      LOBYTE(v229) = 3;
    }
    goto LABEL_330;
  }
  if (*(int *)(v206 + 100) < 1
    || !H16ISP::H16ISPFrameReceiver::AllocateAndSendStillImageBuffersFromSharedPool(v202[17], 31, v205))
  {
    goto LABEL_317;
  }
  v244 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    v244 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v244;
  }
  if (os_log_type_enabled(v244, OS_LOG_TYPE_ERROR)) {
    GroupStillImageCaptureNow();
  }
  unint64_t v238 = v290;
LABEL_365:
  uint64_t v26 = v281;
  if (v238)
  {
    unint64_t v245 = 0;
    v246 = (unsigned __int8 *)v320;
    do
    {
      v247 = (unsigned char *)v298[v245];
      if ((v247[1280] || v247[1480] || v247[2280]) && !v247[3784])
      {
        if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v281 + 24), v246, 0x79Cu, 0, 0xFFFFFFFF))
        {
          v260 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v260 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v260;
          }
          if (os_log_type_enabled(v260, OS_LOG_TYPE_ERROR)) {
            GroupStillImageCaptureNow();
          }
          goto LABEL_26;
        }
        unint64_t v238 = v290;
      }
      ++v245;
      v246 += 1948;
    }
    while (v245 < v238);
  }
LABEL_374:
  float v248 = (double)(v293 / 0x3E8) / 1000.0;
  if (v248 > 1.0) {
    H16ISP::H16ISPFrameReceiver::SetFrameDoneTimeoutDuration(*(H16ISP::H16ISPFrameReceiver **)(v282 + 136), v248 + 2.0);
  }
  LODWORD(v317) = 101;
  char v318 = 0;
  if (v300 == 605)
  {
    v253 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v253 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v253;
    }
    if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t valuePtr = 136315138;
      *(void *)&unsigned char valuePtr[4] = "GroupStillImageCaptureNow";
      _os_log_impl(&dword_24680F000, v253, OS_LOG_TYPE_DEFAULT, "%s - Initiating multi unified bracketedISP capture\n", valuePtr, 0xCu);
    }
    if (v266 != -1) {
      v302[3] = v266;
    }
    int v254 = LaunchStillImageCapture(v26, &v283, v299, 0x1214u);
    if (v254) {
      goto LABEL_408;
    }
    int v255 = BYTE4(v268) & 1;
    char v318 = BYTE4(v268) & 1;
    uint64_t v256 = *(void *)(v26 + 200);
    if (!v256) {
      int v255 = 0;
    }
    if (v255 == 1) {
      H16ISP::H16ISPServicesRemote::SetProperty(v256, &v317);
    }
  }
  else
  {
    if (v300 == 540)
    {
      v257 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v257 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v257;
      }
      if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t valuePtr = 136315138;
        *(void *)&unsigned char valuePtr[4] = "GroupStillImageCaptureNow";
        _os_log_impl(&dword_24680F000, v257, OS_LOG_TYPE_DEFAULT, "%s - Initiating flash capture\n", valuePtr, 0xCu);
      }
      char v318 = 1;
      int v254 = LaunchStillImageCapture(v26, &v283, v299, 0x30u);
      if (v254)
      {
        char v318 = 0;
        if (*(void *)(v298[0] + 3712)) {
          DisableDisplayStrobeOverlay(v298[0]);
        }
      }
      uint64_t v258 = *(void *)(v26 + 200);
      if (v258 && v318) {
        H16ISP::H16ISPServicesRemote::SetProperty(v258, &v317);
      }
    }
    else
    {
      if (v300 == 298)
      {
        v249 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v249 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v249;
        }
        if (os_log_type_enabled(v249, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t valuePtr = 136315138;
          *(void *)&unsigned char valuePtr[4] = "GroupStillImageCaptureNow";
          _os_log_impl(&dword_24680F000, v249, OS_LOG_TYPE_DEFAULT, "%s - Initiating time machine capture\n", valuePtr, 0xCu);
        }
        v250 = v299;
        uint64_t v251 = v26;
        unsigned int v252 = 48;
      }
      else
      {
        uint64_t v251 = v26;
        v250 = 0;
        unsigned int v252 = 0;
      }
      int v254 = LaunchStillImageCapture(v251, &v283, v250, v252);
    }
    if (v254)
    {
LABEL_408:
      if (v300 == 605 && v254 == -536870212) {
        uint64_t v33 = 4294954608;
      }
      else {
        uint64_t v33 = 4294954611;
      }
      goto LABEL_33;
    }
  }
  return v33;
}

uint64_t CopyFirmwareVersion(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *a2 = 0;
  uint64_t v7 = *(H16ISP::H16ISPDevice **)(a5 + 24);
  uint64_t v8 = *((void *)v7 + 548);
  bzero(v36, 0xA8uLL);
  __int16 v37 = 6;
  if (!H16ISP::H16ISPDevice::ISP_SendCommand(v7, v36, 0xA8u, 0, 0xFFFFFFFF))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!Mutable) {
      goto LABEL_3;
    }
    CFStringRef v11 = CFStringCreateWithCString(0, v38, 0);
    if (v11)
    {
      CFStringRef v12 = v11;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D928], v11);
      CFRelease(v12);
    }
    CFStringRef v13 = CFStringCreateWithCString(0, v39, 0);
    if (v13)
    {
      CFStringRef v14 = v13;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D920], v13);
      CFRelease(v14);
    }
    CFStringRef v15 = CFStringCreateWithCString(0, v40, 0);
    if (v15)
    {
      CFStringRef v16 = v15;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D930], v15);
      CFRelease(v16);
    }
    CFStringRef v17 = CFStringCreateWithCString(0, v41, 0);
    if (v17)
    {
      CFStringRef v18 = v17;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D938], v17);
      CFRelease(v18);
    }
    CFStringRef v19 = CFStringCreateWithCString(0, v42, 0);
    if (v19)
    {
      CFStringRef v20 = v19;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D940], v19);
      CFRelease(v20);
    }
    int valuePtr = 4142;
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D9E0], v21);
    CFRelease(v21);
    if ((int)CFArrayGetCount(*(CFArrayRef *)(a5 + 120)) < 1)
    {
LABEL_34:
      uint64_t result = 0;
      goto LABEL_35;
    }
    CFIndex v22 = 0;
    key = (void *)*MEMORY[0x263F2D878];
    uint64_t v23 = (const void *)*MEMORY[0x263F2D948];
    int v24 = (const void *)*MEMORY[0x263F2D870];
    while (1)
    {
      if (!CFArrayGetValueAtIndex(*(CFArrayRef *)(a5 + 120), v22)) {
        goto LABEL_33;
      }
      FigCaptureStreamGetFigBaseObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (H16ISP::H16ISPDevice::ISP_GetModuleParams(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(DerivedStorage + 132), (H16ISPModuleParams *)v34)|| v34[12] == 0)
      {
        goto LABEL_33;
      }
      uint64_t v32 = v35;
      CFNumberRef v27 = CFNumberCreate(0, kCFNumberLongType, &v32);
      int v28 = *(_DWORD *)(v8 + 96 * *(unsigned int *)(DerivedStorage + 132) + 16);
      if (v28 <= 1919246705) {
        break;
      }
      CFNumberRef v30 = v24;
      if (v28 == 1919246706) {
        goto LABEL_31;
      }
      if (v28 == 1919251564)
      {
        CFNumberRef v30 = key;
LABEL_31:
        CFDictionarySetValue(Mutable, v30, v27);
      }
LABEL_32:
      CFRelease(v27);
LABEL_33:
      if (++v22 >= (int)CFArrayGetCount(*(CFArrayRef *)(a5 + 120))) {
        goto LABEL_34;
      }
    }
    BOOL v29 = v28 == 1718775412 || v28 == 1718776695;
    CFNumberRef v30 = v23;
    if (!v29) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  CFMutableArrayRef Mutable = 0;
LABEL_3:
  uint64_t result = 4294954513;
LABEL_35:
  *a2 = Mutable;
  return result;
}

uint64_t CopyMultiCamConfiguration(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, CFArrayRef *a5)
{
  uint64_t v6 = a5[23];
  if (v6)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    uint64_t v10 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    CFStringRef v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
    CFStringRef v12 = CFArrayCreateMutable(a1, 0, v10);
    CFMutableArrayRef v13 = CFArrayCreateMutable(a1, 0, v10);
    CFMutableArrayRef v14 = CFArrayCreateMutable(a1, 0, v10);
    CFStringRef v15 = v14;
    if (Mutable) {
      BOOL v16 = v11 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16 && v12 != 0 && v13 != 0 && v14 != 0)
    {
      uint64_t v36 = a2;
      theArray = v13;
      CFDictionaryRef theDict = Mutable;
      if (!*(_WORD *)a5[23]) {
        goto LABEL_63;
      }
      uint64_t v22 = 0;
      while (1)
      {
        uint64_t v23 = 0;
        int v24 = -1;
        do
        {
          if (((*((unsigned __int16 *)a5[23] + 4 * v22 + 14) >> v23) & 1) == 0) {
            goto LABEL_47;
          }
          if (CFArrayGetCount(a5[15]) >= 1)
          {
            CFIndex v25 = 0;
            while (1)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a5[15], v25);
              FigCaptureStreamGetFigBaseObject();
              if (v23 == *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 132)) {
                break;
              }
              if (++v25 >= CFArrayGetCount(a5[15])) {
                goto LABEL_46;
              }
            }
            if (ValueAtIndex)
            {
              FigCaptureStreamGetFigBaseObject();
              uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
              if (*(unsigned char *)(DerivedStorage + 8)) {
                goto LABEL_47;
              }
              uint64_t v28 = DerivedStorage;
              if (*((_DWORD *)a5[23] + v23 + 1) == 1) {
                CFArrayInsertValueAtIndex(v11, 0, ValueAtIndex);
              }
              else {
                CFArrayAppendValue(v11, ValueAtIndex);
              }
              if (!*((_DWORD *)a5[23] + 2 * v22 + 8)) {
                CFArrayAppendValue(v12, ValueAtIndex);
              }
              if (*(_DWORD *)(v28 + 108) == 1) {
                CFArrayInsertValueAtIndex(v15, 0, ValueAtIndex);
              }
              else {
                CFArrayAppendValue(v15, ValueAtIndex);
              }
            }
          }
LABEL_46:
          int v24 = v23;
LABEL_47:
          ++v23;
        }
        while (v23 != 6);
        if ((v24 & 0x80000000) == 0 && *((_DWORD *)a5[23] + 2 * v22 + 8) == 1)
        {
          CFArrayRef v29 = a5[26];
          if (v29)
          {
            if (CFArrayGetCount(v29) >= 1)
            {
              CFIndex v30 = 0;
              while (1)
              {
                CFTypeID v31 = CFArrayGetValueAtIndex(a5[26], v30);
                FigCaptureSynchronizedStreamsGroupGetFigBaseObject();
                uint64_t v32 = CMBaseObjectGetDerivedStorage();
                if (CFArrayGetCount(*(CFArrayRef *)(v32 + 16)) >= 1)
                {
                  CFIndex v33 = 0;
                  while (1)
                  {
                    CFArrayGetValueAtIndex(*(CFArrayRef *)(v32 + 16), v33);
                    FigCaptureStreamGetFigBaseObject();
                    if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 132) == v24) {
                      break;
                    }
                    if (++v33 >= CFArrayGetCount(*(CFArrayRef *)(v32 + 16))) {
                      goto LABEL_59;
                    }
                  }
                  if (v31) {
                    break;
                  }
                }
LABEL_59:
                if (++v30 >= CFArrayGetCount(a5[26])) {
                  goto LABEL_62;
                }
              }
              CFArrayAppendValue(theArray, v31);
            }
          }
        }
LABEL_62:
        if (++v22 >= (unint64_t)*(unsigned __int16 *)a5[23])
        {
LABEL_63:
          CFStringRef v20 = theDict;
          if (CFArrayGetCount(v12) > 0) {
            CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F2C100], v12);
          }
          CFRelease(v12);
          a2 = v36;
          if (CFArrayGetCount(theArray) >= 1) {
            CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F2C0F8], theArray);
          }
          CFRelease(theArray);
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F2C108], v11);
          CFRelease(v11);
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F2C110], v15);
          uint64_t v21 = 0;
          goto LABEL_68;
        }
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v13) {
      CFRelease(v13);
    }
    CFStringRef v20 = 0;
    uint64_t v6 = 0;
    uint64_t v21 = 4294954510;
    if (v15)
    {
LABEL_68:
      CFRelease(v15);
      uint64_t v6 = v20;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  *a2 = v6;
  return v21;
}

uint64_t CopyTOFAutoFocusEnabled(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (void *)MEMORY[0x263EFFB40];
  if (!*(unsigned char *)(a5 + 248)) {
    uint64_t v5 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v5;
  return 0;
}

uint64_t SetDARTCacheParameters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"CacheTTL");
  if (!Value)
  {
    CFStringRef v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFStringRef v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      SetDARTCacheParameters();
    }
    return 4294954516;
  }
  unsigned int valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  int v8 = H16ISP::H16ISPDevice::ISP_SetDARTCacheTTL(*(H16ISP::H16ISPDevice **)(a4 + 24), valuePtr);
  uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67109376;
    unsigned int v14 = valuePtr;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: set kFigCaptureDeviceProperty_DARTCacheParameters, ttl=%d, res=0x%08X\n\n", buf, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetDiagnosticsLogDump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v9 = 0;
  if (H16ISP::H16ISPDevice::ISP_GetDriverLoggingFlags(*(H16ISP::H16ISPDevice **)(a4 + 24), &v9))
  {
    uint64_t v5 = 4294954516;
  }
  else
  {
    CFTypeID v6 = *(H16ISP::H16ISPDevice **)(a4 + 24);
    if (v9)
    {
      H16ISP::H16ISPDevice::SetFirmwareRunMode(v6, 1);
    }
    else
    {
      H16ISP::H16ISPDevice::ISP_SetDriverLoggingFlags(v6, v9 | 1);
      H16ISP::H16ISPDevice::SetFirmwareRunMode(*(H16ISP::H16ISPDevice **)(a4 + 24), 1);
      usleep(0x7A120u);
      H16ISP::H16ISPDevice::ISP_SetDriverLoggingFlags(*(H16ISP::H16ISPDevice **)(a4 + 24), v9);
    }
    uint64_t v5 = 0;
  }
  uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67109120;
    int v11 = v5;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetDiagnosticsLogDump (err=%d)\n\n", buf, 8u);
  }
  return v5;
}

uint64_t SetSensorAgileClockingEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  unsigned int v7 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  *(unsigned char *)(a4 + 224) = v7;
  uint64_t result = H16ISP::H16ISPDevice::ISP_EnableMIPIClockAdjustments(*(H16ISP::H16ISPDevice **)(a4 + 24), v7);
  if (result)
  {
    unsigned int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetSensorAgileClockingEnable();
    }
    return 4294954514;
  }
  return result;
}

uint64_t SetFactoryFeaturesMode()
{
  return 0;
}

uint64_t SetForgetFirmwareDuringPluginTeardown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a4 + 232) = 1;
  return 0;
}

uint64_t SetMotionDataSamplingRate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  int v7 = H16ISP::H16ISPDevice::WritePropertyValue(*(H16ISP::H16ISPDevice **)(a4 + 24), 0, 2314, valuePtr, 0xFFFFFFFF);
  int v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v8 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67109376;
    int v12 = valuePtr;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetMotionDataSamplingRate, motionDataSamplingRate=%d, result=0x%08X\n\n", buf, 0xEu);
  }
  if (v7) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t CopyUnitInfo(uint64_t a1, CFDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFDictionaryRef theDict = 0;
  if (CFArrayGetCount(*(CFArrayRef *)(a5 + 120)))
  {
    CFIndex v7 = 0;
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a5 + 120), v7))
      {
        FigCaptureStreamGetFigBaseObject();
        if (*(void *)(CMBaseObjectGetDerivedStorage() + 136)) {
          goto LABEL_8;
        }
      }
    }
    while (++v7 < (unint64_t)CFArrayGetCount(*(CFArrayRef *)(a5 + 120)));
  }
  int v8 = byte_26B11BAE5;
  if (H16ISP::H16ISPDevice::CreateISPUnitInfoDictionary(*(H16ISP::H16ISPDevice **)(a5 + 24), &theDict))
  {
    CFDictionaryRef theDict = 0;
LABEL_8:
    uint64_t result = 4294954513;
    goto LABEL_9;
  }
  if (theDict) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 4294954513;
  }
  if (v8) {
    BOOL v10 = theDict == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, @"ChannelArray");
    if (result)
    {
      CFArrayRef v11 = (const __CFArray *)result;
      if (CFArrayGetCount((CFArrayRef)result) >= 1)
      {
        CFIndex v12 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v12);
          if (ValueAtIndex)
          {
            int v14 = ValueAtIndex;
            int valuePtr = 0;
            CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"Index");
            CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
            int v16 = H16ISP::ModuleDescriptionToPortType(*(_DWORD *)(*(void *)(*(void *)(a5 + 24) + 4384)
                                                                + 96 * valuePtr
                                                                + 16));
            CFDictionarySetValue(v14, @"PortType", v16);
          }
          ++v12;
        }
        while (v12 < CFArrayGetCount(v11));
      }
      uint64_t result = 0;
    }
  }
LABEL_9:
  *a2 = theDict;
  return result;
}

uint64_t CopyMultiCamSessionStatus(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v24[156] = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  uint64_t v21 = 0;
  unsigned __int16 v20 = 0;
  CFTypeID v6 = *(H16ISP::H16ISPDevice **)(a5 + 24);
  uint64_t v7 = *((void *)v6 + 548);
  int MultiCamSessionStatus = H16ISP::H16ISPDevice::GetMultiCamSessionStatus(v6, v23, &v20);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t result = 4294954516;
  if (!MultiCamSessionStatus && Mutable && v20 <= 6u)
  {
    CFStringRef v19 = a2;
    if (v20)
    {
      unint64_t v13 = 0;
      int v14 = v24;
      do
      {
        uint64_t v15 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        int valuePtr = *((_DWORD *)v14 - 1);
        CFNumberRef v16 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(v15, @"Offset", v16);
        CFRelease(v16);
        uint64_t v21 = *v14;
        CFNumberRef v17 = CFNumberCreate(0, kCFNumberSInt64Type, &v21);
        CFDictionarySetValue(v15, @"FrameCount", v17);
        CFRelease(v17);
        CFStringRef v18 = H16ISP::ModuleDescriptionToPortType(*(_DWORD *)(v7 + 96 * *((unsigned int *)v14 - 3) + 16));
        CFDictionarySetValue(Mutable, v18, v15);
        ++v13;
        int v14 = (void *)((char *)v14 + 28);
      }
      while (v13 < v20);
    }
    uint64_t result = 0;
    *CFStringRef v19 = Mutable;
  }
  return result;
}

uint64_t CopyDCSAudioAccelTimeReference(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (H16ISP::H16ISPDevice::ISP_GetCameraTime(*(void *)(a5 + 24), &v11))
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294954516;
  }
  uint64_t v7 = Mutable;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberSInt64Type, &v11);
  CFDictionarySetValue(v7, @"DCSAudioAccelTimeReference_absoluteTime_Private", v8);
  CFRelease(v8);
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt64Type, &v12);
  CFDictionarySetValue(v7, @"DCSAudioAccelTimeReference_ispTime_Private", v9);
  CFRelease(v9);
  uint64_t result = 0;
  *a2 = v7;
  return result;
}

uint64_t SetDCSAudioAccelCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t v7 = *(const void **)(a4 + 264);
  if (v7)
  {
    _Block_release(v7);
    *(void *)(a4 + 264) = 0;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"DCSAudioAccelKeySampleCallback_Private");
  if (Value)
  {
    CFNumberRef v9 = _Block_copy(Value);
    *(void *)(a4 + 264) = v9;
  }
  else
  {
    CFNumberRef v9 = *(void **)(a4 + 264);
  }
  if (H16ISP::H16ISPDevice::ISP_DCS_SetAudioBufferReceiverCallbackBlock(*(void *)(a4 + 24), (uint64_t)v9))return 4294954516; {
  else
  }
    return 0;
}

uint64_t SetDCSAudioAccelMessageCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t v7 = *(const void **)(a4 + 272);
  if (v7)
  {
    _Block_release(v7);
    *(void *)(a4 + 272) = 0;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"DCSAudioAccelKeyMessageCallback_Private");
  if (Value)
  {
    CFNumberRef v9 = _Block_copy(Value);
    *(void *)(a4 + 272) = v9;
  }
  else
  {
    CFNumberRef v9 = *(void **)(a4 + 272);
  }
  if (H16ISP::H16ISPDevice::ISP_DCS_SetAudioBufferReceiverMessageCallbackBlock(*(void *)(a4 + 24), (uint64_t)v9))return 4294954516; {
  else
  }
    return 0;
}

uint64_t SetDCSAudioAccelTestMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  uint64_t v7 = 4294954516;
  if (v6 == CFBooleanGetTypeID())
  {
    unsigned int v8 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
    if (H16ISP::H16ISPDevice::ISP_DCS_SetAudioTestMode(*(H16ISP::H16ISPDevice **)(a4 + 24), v8)) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return v7;
}

uint64_t SetDCSAudioAccelStreaming(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  uint64_t v7 = 4294954516;
  if (v6 == CFBooleanGetTypeID())
  {
    BOOL v8 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
    if (H16ISP::H16ISPDevice::ISP_DCS_EnableAudioAccelStreaming(*(H16ISP::H16ISPDevice **)(a4 + 24), v8, v9, v10))return 4294954516; {
    else
    }
      return 0;
  }
  return v7;
}

uint64_t CopyDCSAudioAccelStreaming(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = 0;
  uint64_t result = H16ISP::H16ISPDevice::ISP_DCS_GetAudioAccelStreaming(*(H16ISP::H16ISPDevice **)(a5 + 24), &v8);
  if (result) {
    return 4294954516;
  }
  if (v8) {
    uint64_t v7 = (void *)MEMORY[0x263EFFB40];
  }
  else {
    uint64_t v7 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v7;
  return result;
}

uint64_t SetDCSFPGAControl(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  uint64_t v7 = 4294954516;
  if (v6 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    if (H16ISP::H16ISPDevice::DCS_FPGACtrl(*(H16ISP::H16ISPDevice **)(a4 + 24), valuePtr & 1, (valuePtr & 2) != 0))return 4294954516; {
    else
    }
      return 0;
  }
  return v7;
}

uint64_t CopyDCSFPGAStatus(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(&v18, 0x1CuLL);
  int v7 = H16ISP::H16ISPDevice::DCS_FPGAStatusQuery(*(H16ISP::H16ISPDevice **)(a5 + 24), &v18);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = Mutable == 0;
  }
  if (v9) {
    return 4294954516;
  }
  BOOL v10 = Mutable;
  CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v18 + 8);
  CFDictionarySetValue(v10, @"DCSFPGAStatus_relDate_Private", v11);
  CFRelease(v11);
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberSInt16Type, (char *)&v18 + 12);
  CFDictionarySetValue(v10, @"DCSFPGAStatus_version_Private", v12);
  CFRelease(v12);
  CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt16Type, (char *)&v18 + 14);
  CFDictionarySetValue(v10, @"DCSFPGAStatus_minVersion_Private", v13);
  CFRelease(v13);
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v19);
  CFDictionarySetValue(v10, @"DCSFPGAStatus_errorCode_Private", v14);
  CFRelease(v14);
  CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt8Type, &v20);
  CFDictionarySetValue(v10, @"DCSFPGAStatus_fpgaUpdateStatus_Private", v15);
  CFRelease(v15);
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)&v20 + 1);
  CFDictionarySetValue(v10, @"DCSFPGAStatus_fpgaBatStatus_Private", v16);
  CFRelease(v16);
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t SetDCSFPGASyncOffsetControl(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"DCSFPGASyncOffsetControl_channel_Private");
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"DCSFPGASyncOffsetControl_offset_Private");
  uint64_t result = 4294954516;
  if (Value && v8)
  {
    int valuePtr = 0;
    unsigned __int8 v10 = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    CFNumberGetValue(v8, kCFNumberSInt8Type, &v10);
    if (H16ISP::H16ISPDevice::DCS_FPGASyncOffsetCtrl(*(H16ISP::H16ISPDevice **)(a4 + 24), valuePtr, v10)) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t SetDCSFPGASyncControl(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"DCSFPGASyncControl_channel_Private");
  CFBooleanRef v8 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, @"DCSFPGASyncControl_enable_Private");
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"DCSFPGASyncControl_frameRate_Private");
  uint64_t result = 4294954516;
  if (Value && v8 && v9)
  {
    int valuePtr = 0;
    unsigned __int16 v12 = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    char v11 = CFBooleanGetValue(v8) != 0;
    CFNumberGetValue(v9, kCFNumberSInt16Type, &v12);
    if (H16ISP::H16ISPDevice::DCS_FPGASyncCtrl(*(H16ISP::H16ISPDevice **)(a4 + 24), valuePtr, v11, v12)) {
      return 4294954516;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t SetLowMemoryMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)a1);
  int v8 = H16ISP::H16ISPDevice::ISP_SetLowMemoryMode(*(H16ISP::H16ISPDevice **)(a4 + 24), Value != 0);
  if (v8) {
    uint64_t v9 = 4294954514;
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned __int8 v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned __int8 v10 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    char v11 = "Exited";
    if (Value) {
      char v11 = "Entered";
    }
    int v13 = 136315394;
    CFNumberRef v14 = v11;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_INFO, "%s low memory mode, res: 0x%08X\n\n", (uint8_t *)&v13, 0x12u);
  }
  return v9;
}

uint64_t CopyLowMemoryMode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = 0;
  uint64_t result = H16ISP::H16ISPDevice::ISP_GetLowMemoryMode(*(H16ISP::H16ISPDevice **)(a5 + 24), &v8);
  if (result) {
    return 4294954516;
  }
  if (v8) {
    int v7 = (void *)MEMORY[0x263EFFB40];
  }
  else {
    int v7 = (void *)MEMORY[0x263EFFB38];
  }
  *a2 = *v7;
  return result;
}

uint64_t CopyProcessingSessionSupportedPropertiesDictionary(uint64_t a1, __CFDictionary **a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a3 + 24);
  if (!Mutable)
  {
    CFNumberRef v14 = a2;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFStringRef v5 = (const __CFString *)processingSessionProperties[0];
      if (processingSessionProperties[0])
      {
        uint64_t v6 = 0;
        CFBooleanRef v7 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
        unsigned int v8 = 1;
        uint64_t v9 = (const __CFString **)MEMORY[0x263F2C2A0];
        unsigned __int8 v10 = (const __CFString **)MEMORY[0x263F2C2A8];
        do
        {
          if (processingSessionProperties[5 * v6 + 2])
          {
            if (streamProperties[6 * v6 + 3]) {
              char v11 = v9;
            }
            else {
              char v11 = v10;
            }
          }
          else
          {
            char v11 = (const __CFString **)MEMORY[0x263F2C298];
          }
          addPropertyDictionaryToPropertiesDictionary(Mutable, v5, (const __CFString *)processingSessionProperties[5 * v6 + 1], *v11, v7);
          uint64_t v6 = v8;
          CFStringRef v5 = (const __CFString *)processingSessionProperties[5 * v8++];
        }
        while (v5);
      }
    }
    *(void *)(a3 + 24) = Mutable;
    a2 = v14;
  }
  *a2 = Mutable;
  unsigned __int16 v12 = *(const void **)(a3 + 24);
  if (v12) {
    CFRetain(v12);
  }
  return 0;
}

uint64_t CopyProcessingSessionInputPixelBufferAttributes(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    unsigned int v8 = Mutable;
    int valuePtr = 64;
    CFNumberRef v9 = CFNumberCreate(v6, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F04078], v9);
    CFRelease(v9);
    int v20 = 128;
    CFNumberRef v10 = CFNumberCreate(v6, kCFNumberIntType, &v20);
    CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F04198], v10);
    CFRelease(v10);
    char v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v11)
    {
      unsigned __int16 v12 = v11;
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F0EF30], (const void *)*MEMORY[0x263EFFB40]);
      int v19 = 0;
      CFNumberRef v13 = CFNumberCreate(0, kCFNumberIntType, &v19);
      CFDictionarySetValue(v12, (const void *)*MEMORY[0x263F0ED58], v13);
      CFRelease(v13);
      CFDictionaryAddValue(v8, (const void *)*MEMORY[0x263F04130], v12);
      CFNumberRef v14 = v12;
    }
    else
    {
      CFNumberRef v14 = v8;
    }
    CFRelease(v14);
    int v15 = *(_DWORD *)(a3 + 32);
    if ((v15 - 5) < 2 || v15 == 1)
    {
      SetSupportedFormats(v8, (int *)SupportedOutputFormatsGPVISInput, 1, 1);
    }
    else if (v15 == 2)
    {
      int v16 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
      int v19 = 1650943796;
      CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, &v19);
      CFArrayAppendValue(v16, v17);
      CFRelease(v17);
      CFDictionaryAddValue(v8, (const void *)*MEMORY[0x263F04180], v16);
      CFRelease(v16);
    }
    *a2 = v8;
  }
  return 0;
}

uint64_t CopyProcessingSessionOutputPixelBufferAttributes(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4)
{
  v40[4] = *MEMORY[0x263EF8340];
  CFStringRef v5 = (const void *)*MEMORY[0x263F2C1D8];
  CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x263F2C1C8];
  v40[0] = *MEMORY[0x263F2C1C8];
  v40[1] = v5;
  CFTypeRef v30 = v5;
  CFTypeRef v28 = (CFTypeRef)*MEMORY[0x263F2C1D0];
  CFTypeRef v29 = (CFTypeRef)*MEMORY[0x263F2C1C0];
  v40[2] = *MEMORY[0x263F2C1C0];
  v40[3] = v28;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 4, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    unsigned int v8 = Mutable;
    uint64_t v26 = a2;
    uint64_t v9 = 0;
    key = (void *)*MEMORY[0x263F04078];
    CFNumberRef v10 = (const void *)*MEMORY[0x263F04198];
    uint64_t v34 = (const void *)*MEMORY[0x263F0EF30];
    uint64_t v32 = (void *)*MEMORY[0x263F0ED58];
    CFIndex v33 = (const void *)*MEMORY[0x263EFFB40];
    CFTypeID v31 = (void *)*MEMORY[0x263F04130];
    char v11 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    unsigned __int16 v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    do
    {
      CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v6, 0, v11, v12);
      if (v13)
      {
        CFNumberRef v14 = v13;
        int valuePtr = 64;
        CFNumberRef v15 = CFNumberCreate(v6, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue(v14, key, v15);
        CFRelease(v15);
        int v38 = 128;
        CFNumberRef v16 = CFNumberCreate(v6, kCFNumberIntType, &v38);
        CFDictionarySetValue(v14, v10, v16);
        CFRelease(v16);
        CFNumberRef v17 = CFDictionaryCreateMutable(0, 0, v11, v12);
        if (v17)
        {
          long long v18 = v17;
          CFDictionarySetValue(v17, v34, v33);
          int v37 = 0;
          CFNumberRef v19 = CFNumberCreate(0, kCFNumberIntType, &v37);
          CFDictionarySetValue(v18, v32, v19);
          CFRelease(v19);
          CFDictionaryAddValue(v14, v31, v18);
          CFRelease(v18);
        }
        int v20 = (const void *)v40[v9];
        int v21 = CFEqual(v20, cf2);
        uint64_t v22 = SupportedOutputFormatsGPVISOutputPrimaryScaler;
        if (v21
          || (v23 = CFEqual(v20, v30), uint64_t v22 = SupportedOutputFormatsGPVISOutputPrimaryScaler, v23)
          || (v24 = CFEqual(v20, v29), uint64_t v22 = SupportedOutputFormatsGPVISOutputIntermediateTap, v24)
          || CFEqual(v20, v28)
          && (uint64_t v22 = SupportedOutputFormatsGPVISOutputPrimaryScalerLowRes, *(int *)(*(void *)(a4 + 24) + 4392) >= 17))
        {
          SetSupportedFormats(v14, (int *)v22, 1, 1);
        }
        CFDictionaryAddValue(v8, v20, v14);
        CFRelease(v14);
      }
      ++v9;
    }
    while (v9 != 4);
    NSObject *v26 = v8;
  }
  return 0;
}

uint64_t SetProcessingSessionDefaultProcessingParameters(const void *a1, uint64_t a2)
{
  bzero(cf, 0x470uLL);
  if (*(_DWORD *)(a2 + 32) == 4) {
    return 4294954514;
  }
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v5 = CFGetTypeID(a1);
  if (v5 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C200]);
  if (Value)
  {
    CFDataRef v7 = Value;
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 == CFDataGetTypeID())
    {
      unsigned int v9 = *(_DWORD *)(a2 + 32);
      if (v9 <= 6 && ((1 << v9) & 0x6A) != 0)
      {
        unint64_t Length = CFDataGetLength(v7);
        int v11 = *(_DWORD *)(a2 + 32);
        if (v11 == 3 && Length > 0x200000)
        {
          unsigned __int16 v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            unsigned __int16 v12 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            SetProcessingSessionDefaultProcessingParameters();
          }
LABEL_34:
          uint64_t v4 = 4294954516;
          goto LABEL_35;
        }
        if (v11 == 1 && Length >= 0xDA85)
        {
          CFMutableDictionaryRef v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFMutableDictionaryRef v13 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
            SetProcessingSessionDefaultProcessingParameters();
          }
          goto LABEL_34;
        }
        if (v11 == 5 && Length >= 0x173AD)
        {
          CFNumberRef v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFNumberRef v14 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            SetProcessingSessionDefaultProcessingParameters();
          }
          goto LABEL_34;
        }
        if (v11 == 6 && Length >= 0x9E5CD)
        {
          CFNumberRef v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFNumberRef v15 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            SetProcessingSessionDefaultProcessingParameters();
          }
          goto LABEL_34;
        }
        CFDataRef Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v7);
        if (!Copy)
        {
          uint64_t v4 = 4294954510;
LABEL_35:
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          return v4;
        }
        cf[0] = Copy;
      }
    }
  }
  CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C1F8]);
  if (v17)
  {
    CFDictionaryRef v18 = v17;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = (const void *)*MEMORY[0x263F2C1E8];
    uint64_t v22 = (CGRect *)&v36;
    do
    {
      if (v20 > 4) {
        break;
      }
      int v23 = *(const void ***)((char *)&unk_2651E8E50 + (v19 >> 29));
      int v24 = *v23;
      if (!*v23) {
        break;
      }
      CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(v18, *v23);
      if (v25)
      {
        CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(v25, v21);
        if (!CGRectMakeWithDictionaryRepresentation(v26, v22 - 1)) {
          goto LABEL_34;
        }
        *(void *)&v22->origin.x = v24;
      }
      ++v20;
      v19 += 0x100000000;
      uint64_t v22 = (CGRect *)((char *)v22 + 56);
    }
    while (v20 != 20);
  }
  CFTypeRef v27 = cf[0];
  if (cf[0])
  {
    CFTypeRef v28 = *(const void **)(a2 + 88);
    if (v28)
    {
      CFRelease(v28);
      CFTypeRef v27 = cf[0];
    }
    *(void *)(a2 + 88) = v27;
  }
  uint64_t v29 = 0;
  uint64_t v30 = a2 + 96;
  do
  {
    CFTypeID v31 = &cf[v29];
    if (!CGRectIsEmpty(*(CGRect *)&cf[v29 + 3]))
    {
      uint64_t v32 = v30 + v29 * 8;
      long long v33 = *(_OWORD *)(v31 + 3);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)(v31 + 1);
      *(_OWORD *)(v32 + 16) = v33;
      *(_OWORD *)(v32 + 32) = *(_OWORD *)(v31 + 5);
      *(void *)(v32 + 48) = v31[7];
    }
    v29 += 7;
  }
  while (v29 != 140);
  return 0;
}

uint64_t CopyProcessingSessionDefaultProcessingParameters(uint64_t a1, __CFDictionary **a2, uint64_t a3)
{
  if (*(unsigned char *)a3)
  {
    double v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      double v3 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      CopyProcessingSessionDefaultProcessingParameters(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 4294954516;
  }
  else
  {
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (theDict)
    {
      CFDataRef v15 = *(const __CFData **)(a3 + 88);
      if (v15)
      {
        CFDataRef Copy = CFDataCreateCopy(v14, v15);
        if (Copy)
        {
          CFDataRef v17 = Copy;
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F2C200], Copy);
          CFRelease(v17);
        }
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        uint64_t v19 = Mutable;
        uint64_t v20 = 0;
        int v21 = (const void *)*MEMORY[0x263F2C1E8];
        uint64_t v22 = a3 + 136;
        int v23 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
        int v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
        do
        {
          if (!CGRectIsEmpty(*(CGRect *)(v22 - 24)))
          {
            CFMutableDictionaryRef v25 = CFDictionaryCreateMutable(v14, 0, v23, v24);
            if (v25)
            {
              CFDictionaryRef v26 = v25;
              CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)(v22 - 24));
              if (DictionaryRepresentation)
              {
                CFDictionaryRef v28 = DictionaryRepresentation;
                CFDictionarySetValue(v26, v21, DictionaryRepresentation);
                CFRelease(v28);
              }
              if (v20 <= 4)
              {
                uint64_t v29 = (const void *)**((void **)&unk_2651E8E50 + v20);
                if (v29) {
                  CFDictionarySetValue(v19, v29, v26);
                }
              }
              CFRelease(v26);
            }
          }
          ++v20;
          v22 += 56;
        }
        while (v20 != 20);
      }
    }
    uint64_t result = 0;
    *a2 = theDict;
  }
  return result;
}

uint64_t SetProcessingSessionOutputHandler(void *aBlock, uint64_t a2)
{
  if (aBlock)
  {
    uint64_t v4 = *(const void **)(a2 + 48);
    if (v4) {
      _Block_release(v4);
    }
    *(void *)(a2 + 48) = _Block_copy(aBlock);
  }
  return 0;
}

uint64_t CopyProcessingSessionSupportedOutputs(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)a3)
  {
    uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      CopyProcessingSessionSupportedOutputs(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    return 4294954516;
  }
  if (!a2) {
    return 4294954516;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  CFDataRef v17 = Mutable;
  if (Mutable)
  {
    unsigned int v18 = *(_DWORD *)(a3 + 32);
    if (v18 <= 6 && ((1 << v18) & 0x66) != 0)
    {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F2C1C8]);
      if (*(int *)(*(void *)(a4 + 24) + 4392) >= 17) {
        CFArrayAppendValue(v17, (const void *)*MEMORY[0x263F2C1D0]);
      }
      unsigned int v18 = *(_DWORD *)(a3 + 32);
    }
    if (v18 == 2)
    {
      CFArrayAppendValue(v17, (const void *)*MEMORY[0x263F2C1D8]);
      CFArrayAppendValue(v17, (const void *)*MEMORY[0x263F2C1C0]);
      unsigned int v18 = *(_DWORD *)(a3 + 32);
    }
    if (v18 == 3)
    {
      CFArrayAppendValue(v17, (const void *)*MEMORY[0x263F2C1E0]);
      unsigned int v18 = *(_DWORD *)(a3 + 32);
    }
    if (v18 == 4)
    {
      CFArrayAppendValue(v17, (const void *)*MEMORY[0x263F2C1E0]);
      CFArrayAppendValue(v17, @"OperationsList");
      CFArrayAppendValue(v17, @"ActionsList");
    }
  }
  uint64_t result = 0;
  *a2 = v17;
  return result;
}

uint64_t SetProcessingSessionDeferAdditionOfAttachments(const void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v5 = "False";
    goto LABEL_7;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  uint64_t v5 = "False";
  if (v4 != CFBooleanGetTypeID())
  {
LABEL_7:
    uint64_t v7 = 4294954516;
    goto LABEL_8;
  }
  int v6 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t v7 = 0;
  if (v6) {
    uint64_t v5 = "True";
  }
  *(unsigned char *)(a2 + 1312) = v6 != 0;
LABEL_8:
  uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v8 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315394;
    uint64_t v11 = v5;
    __int16 v12 = 1024;
    int v13 = v7;
    _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_INFO, "H16ISPProcessingSession: SetDeferAdditionOfAttachments: %s (err=%d) \n\n", (uint8_t *)&v10, 0x12u);
  }
  return v7;
}

uint64_t CopyProcessingSessionDeferAdditionOfAttachments(uint64_t a1, void *a2, uint64_t a3)
{
  CFTypeID v4 = (CFTypeRef *)MEMORY[0x263EFFB38];
  if (*(unsigned char *)(a3 + 1312)) {
    CFTypeID v4 = (CFTypeRef *)MEMORY[0x263EFFB40];
  }
  CFTypeRef v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t H16ISPProcessingSessionCreate(const void *a1, int a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  int valuePtr = 0;
  uint64_t v4 = 4294954516;
  if (!a1 || !theDict || !a4) {
    goto LABEL_22;
  }
  uint64_t v8 = (const void *)*MEMORY[0x263F2C1B8];
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2C1B8]);
  if (!Value)
  {
LABEL_21:
    uint64_t v4 = 4294954516;
    goto LABEL_22;
  }
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  BOOL v10 = (valuePtr & 0xFFFFFFFB) == 1 || valuePtr == 6;
  if (!v10 && (valuePtr - 5) <= 0xFFFFFFFC)
  {
    uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionCreate();
    }
    goto LABEL_21;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(5u, DerivedStorage, 0, 0, v8, (__CFString *)theDict, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (!DerivedStorage || *(unsigned char *)DerivedStorage)
  {
    int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionCreate(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
    goto LABEL_21;
  }
  if (!*(_DWORD *)(DerivedStorage + 108) && valuePtr == 2)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
    uint64_t v4 = 3758097088;
    goto LABEL_22;
  }
  CFRetain(a1);
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
  FigCaptureISPProcessingSessionGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
LABEL_22:
    if (cf) {
      CFRelease(cf);
    }
    return v4;
  }
  uint64_t v22 = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)uint64_t v22 = 0;
  *(void *)(v22 + 24) = 0;
  *(_DWORD *)(v22 + 32) = 0;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(void *)(v22 + 72) = 0;
  bzero((void *)(v22 + 88), 0x470uLL);
  *(unsigned char *)(v22 + 1312) = 0;
  *(_DWORD *)(v22 + 1316) = 0;
  *(void *)(v22 + 1224) = 0;
  *(unsigned char *)(v22 + 1242) = 0;
  *(void *)(v22 + 8) = a1;
  *(void *)(v22 + 56) = *(void *)(DerivedStorage + 24);
  if (valuePtr == 4) {
    *(unsigned char *)(v22 + 1312) = 1;
  }
  if (dword_26B11B9E8 && (dword_26B11B9F0 & 0x40000000) != 0) {
    operator new();
  }
  *(unsigned char *)(v22 + 1320) = 0;
  *(_DWORD *)(v22 + 32) = valuePtr;
  bzero((void *)(v22 + 88), 0x470uLL);
  *(_DWORD *)int buf = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(void *)(v22 + 16) = Mutable;
  if (Mutable)
  {
    if (processingSessionProperties[0])
    {
      do
      {
        CFNumberRef v24 = CFNumberCreate(0, kCFNumberIntType, buf);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v22 + 16), (const void *)processingSessionProperties[5 * *(unsigned int *)buf], v24);
        CFRelease(v24);
        ++*(_DWORD *)buf;
      }
      while (processingSessionProperties[5 * *(unsigned int *)buf]);
    }
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 3758097085;
  }
  pthread_mutexattr_init(&v27);
  pthread_mutexattr_settype(&v27, 2);
  pthread_mutex_init((pthread_mutex_t *)(v22 + 1248), &v27);
  pthread_mutexattr_destroy(&v27);
  *a4 = cf;
  return v4;
}

void sub_2468DA54C(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1010C40C6958149);
  _Unwind_Resume(a1);
}

void PrintFirmwareLog(FILE *a1, const char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a1)
    {
      fputs(a2, a1);
    }
    else
    {
      double v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        double v3 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = 136315138;
        CFTypeRef v5 = a2;
        _os_log_impl(&dword_24680F000, v3, OS_LOG_TYPE_INFO, "ISPCPU: %s\n", (uint8_t *)&v4, 0xCu);
      }
    }
  }
}

BOOL refreshProjectorAllowed(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(v2 + 24), *(_DWORD *)(v3 + 132), 1718186595);
  int PCECalib = *(unsigned __int8 *)(v4 + 3785);
  if (isSensorType)
  {
    if (*(unsigned char *)(v4 + 3785))
    {
      int PCECalib = 1;
    }
    else
    {
      int PCECalib = getPCECalib(*(void *)(v5 + 24), (uint64_t)v15);
      uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v8 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = "not ";
        if (PCECalib) {
          uint64_t v9 = "";
        }
        int v11 = 136315394;
        __int16 v12 = "H16ISPCaptureDeviceCreate";
        __int16 v13 = 2080;
        uint64_t v14 = v9;
        _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_DEFAULT, "%s: IR channel: calibration is %savailable\n", (uint8_t *)&v11, 0x16u);
      }
      *(unsigned char *)(v4 + 3785) = PCECalib;
    }
  }
  return PCECalib != 0;
}

uint64_t H16ISPCaptureDeviceInvalidate()
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(1u, DerivedStorage, 0, 0, 0, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (*(unsigned char *)DerivedStorage)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
    return 0;
  }
  *(unsigned char *)uint64_t DerivedStorage = 1;
  uint64_t v1 = *(H16ISP::H16ISPDevice **)(DerivedStorage + 24);
  if (v1) {
    H16ISP::H16ISPDevice::DisableDeviceMessages(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 216);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 216) = 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 120);
  if (v3)
  {
    if (CFArrayGetCount(v3))
    {
      unint64_t v4 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 120), v4);
        if (ValueAtIndex)
        {
          uint64_t v6 = ValueAtIndex;
          uint64_t FigBaseObject = FigCaptureStreamGetFigBaseObject();
          H16ISPCaptureStreamInvalidate(FigBaseObject, v8);
          CFRelease(v6);
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120)));
    }
    CFRelease(*(CFTypeRef *)(DerivedStorage + 120));
    *(void *)(DerivedStorage + 120) = 0;
  }
  CFArrayRef v9 = *(const __CFArray **)(DerivedStorage + 208);
  if (v9)
  {
    if (CFArrayGetCount(v9))
    {
      unint64_t v10 = 0;
      do
      {
        int v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 208), v10);
        if (v11)
        {
          __int16 v12 = v11;
          FigCaptureSynchronizedStreamsGroupGetFigBaseObject();
          H16ISPCaptureGroupInvalidate();
          CFRelease(v12);
        }
        ++v10;
      }
      while (v10 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 208)));
    }
    CFRelease(*(CFTypeRef *)(DerivedStorage + 208));
    *(void *)(DerivedStorage + 208) = 0;
  }
  __int16 v13 = *(NSObject **)(DerivedStorage + 256);
  if (v13)
  {
    dispatch_release(v13);
    *(void *)(DerivedStorage + 256) = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 128);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 128) = 0;
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 8);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 264);
  if (v16)
  {
    _Block_release(v16);
    *(void *)(DerivedStorage + 264) = 0;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 272);
  if (v17)
  {
    _Block_release(v17);
    *(void *)(DerivedStorage + 272) = 0;
  }
  if (*(void *)(DerivedStorage + 184))
  {
    if (!*(void *)(DerivedStorage + 24)
      || (H16ISP::H16ISPDevice::ISP_DestroyMultiCameraSession(*(H16ISP::H16ISPDevice **)(DerivedStorage + 24)),
          *(void *)(DerivedStorage + 184)))
    {
      MEMORY[0x24C53D6E0]();
    }
    *(void *)(DerivedStorage + 184) = 0;
  }
  uint64_t v18 = *(H16ISP::H16ISPFirmwareWorkProcessor **)(DerivedStorage + 192);
  if (v18)
  {
    if (*(void *)(DerivedStorage + 24))
    {
      H16ISP::H16ISPDevice::SetRPCEnableFlag(*(H16ISP::H16ISPDevice **)(DerivedStorage + 24), 0);
      uint64_t v18 = *(H16ISP::H16ISPFirmwareWorkProcessor **)(DerivedStorage + 192);
    }
    H16ISP::H16ISPFirmwareWorkProcessor::stopReceive(v18);
    H16ISP::DestroyH16ISPFirmwareWorkProcessor(*(H16ISP **)(DerivedStorage + 192), v19);
    *(void *)(DerivedStorage + 192) = 0;
  }
  uint64_t v20 = *(H16ISP::H16ISPTimeOfFlightColorSynchronizer **)(DerivedStorage + 240);
  if (v20)
  {
    H16ISP::H16ISPTimeOfFlightColorSynchronizer::~H16ISPTimeOfFlightColorSynchronizer(v20);
    MEMORY[0x24C53D6E0]();
    *(void *)(DerivedStorage + 240) = 0;
  }
  int v21 = *(xpc_connection_t **)(DerivedStorage + 200);
  if (v21)
  {
    H16ISP::H16ISPServicesRemote::Disconnect(v21);
    uint64_t v22 = *(H16ISP::H16ISPServicesRemote **)(DerivedStorage + 200);
    if (v22)
    {
      H16ISP::H16ISPServicesRemote::~H16ISPServicesRemote(v22);
      MEMORY[0x24C53D6E0]();
    }
    *(void *)(DerivedStorage + 200) = 0;
  }
  int v23 = *(H16ISP::H16ISPDevice **)(DerivedStorage + 24);
  if (v23)
  {
    if (H16ISP::H16ISPDevice::ISP_IsPowered(v23)) {
      H16ISP::H16ISPDevice::ISP_PowerOffCamera(*(H16ISP::H16ISPDevice **)(DerivedStorage + 24));
    }
    CFNumberRef v24 = *(H16ISP::H16ISPFirmwareLogger **)(DerivedStorage + 136);
    if (v24)
    {
      H16ISP::H16ISPFirmwareLogger::~H16ISPFirmwareLogger(v24);
      MEMORY[0x24C53D6E0]();
    }
    CFMutableDictionaryRef v25 = *(FILE **)(DerivedStorage + 144);
    if (v25) {
      fclose(v25);
    }
    if (*(unsigned char *)(DerivedStorage + 232))
    {
      usleep(0x493E0u);
      int v26 = -10;
      while (1)
      {
        int v27 = H16ISP::H16ISPDevice::ISP_ForgetFirmware(*(H16ISP::H16ISPDevice **)(DerivedStorage + 24));
        int v28 = v27;
        if (v27 != -536870174) {
          break;
        }
        usleep(0x493E0u);
        if (__CFADD__(v26++, 1)) {
          goto LABEL_62;
        }
      }
      if (v27)
      {
LABEL_62:
        long long v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          long long v33 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
        }
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__argv[0]) = 67109120;
          HIDWORD(__argv[0]) = v28;
          uint64_t v34 = "H16ISPCaptureDeviceInvalidate: Warning: Requested firmware forget did not succeed (0x%08X)\n\n";
          unsigned int v35 = v33;
LABEL_74:
          _os_log_impl(&dword_24680F000, v35, OS_LOG_TYPE_DEFAULT, v34, (uint8_t *)__argv, 8u);
        }
      }
      else
      {
        pid_t v52 = 0;
        __argv[0] = "killall";
        __argv[1] = "appleh16camerad";
        uint64_t v54 = 0;
        uint64_t v30 = _NSGetEnviron();
        int v31 = posix_spawnp(&v52, "killall", 0, 0, __argv, *v30);
        int v51 = v31;
        if (v31)
        {
          int v32 = 0;
        }
        else
        {
          pid_t v36 = waitpid(v52, &v51, 0);
          int v32 = v36 & (v36 >> 31);
          int v31 = v51;
        }
        if (v31) {
          int v37 = v31;
        }
        else {
          int v37 = v32;
        }
        int v38 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v38 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v38;
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__argv[0]) = 67109120;
          HIDWORD(__argv[0]) = v37;
          uint64_t v34 = "H16ISPCaptureDeviceInvalidate: Successfully triggered firmware forget (as requested by client). Result o"
                "f killing appleh16camerad: %d\n"
                "\n";
          unsigned int v35 = v38;
          goto LABEL_74;
        }
      }
    }
    H16ISP::H16ISPDevice::H16ISPDeviceClose(*(H16ISP::H16ISPDevice **)(DerivedStorage + 24));
    *(void *)(DerivedStorage + 24) = 0;
    LogCaptureDeviceEvent(1u, DerivedStorage, 0, 0, 0, 0, 1);
    if (*(void *)(DerivedStorage + 160))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        uint64_t v40 = Mutable;
        uint64_t v41 = *(const void **)(DerivedStorage + 168);
        if (v41)
        {
          CFDictionaryAddValue(Mutable, @"CameraEventLog", v41);
          __argv[0] = 0;
          if (!CFPropertyListWrite(v40, *(CFWriteStreamRef *)(DerivedStorage + 160), kCFPropertyListXMLFormat_v1_0, 0, (CFErrorRef *)__argv))
          {
            float32x4_t v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            uint64_t v43 = &_os_log_internal;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              float32x4_t v42 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v42;
            }
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
              H16ISPCaptureDeviceInvalidate();
            }
            if (__argv[0])
            {
              CFStringRef v44 = CFCopyDescription(__argv[0]);
              if (v44)
              {
                CFStringRef v45 = v44;
                uint64_t v46 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v43)
                {
                  uint64_t v46 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v46;
                }
                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
                  H16ISPCaptureDeviceInvalidate(v45, v46);
                }
                CFRelease(v45);
              }
              CFRelease(__argv[0]);
            }
          }
          CFRelease(*(CFTypeRef *)(DerivedStorage + 168));
          *(void *)(DerivedStorage + 168) = 0;
        }
        CFRelease(v40);
      }
      CFWriteStreamClose(*(CFWriteStreamRef *)(DerivedStorage + 160));
      CFRelease(*(CFTypeRef *)(DerivedStorage + 160));
      *(void *)(DerivedStorage + 160) = 0;
    }
  }
  char v47 = *(const void **)(DerivedStorage + 96);
  if (v47)
  {
    CFRelease(v47);
    *(void *)(DerivedStorage + 96) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
  long long v49 = *(H16ISP **)(DerivedStorage + 16);
  if (v49)
  {
    H16ISP::DestroyH16ISPDeviceController(v49, v48);
    *(void *)(DerivedStorage + 16) = 0;
  }
  return 0;
}

uint64_t H16ISP::H16ISPTimeLogger::end(H16ISP::H16ISPTimeLogger *this, const char *a2, double *a3, int a4)
{
  uint64_t v8 = mach_absolute_time();
  *((void *)this + 2) = v8;
  uint64_t v9 = v8 - *((void *)this + 1);
  double v10 = (double)(v9 * *(unsigned int *)this / *((unsigned int *)this + 1));
  double v11 = v10 / 1000000.0;
  if (a4) {
    operator new[]();
  }
  __int16 v12 = " ";
  if (a2) {
    __int16 v12 = a2;
  }
  printf("%s: %9.3f msec\n", v12, v10 / 1000000.0);
  if (a3) {
    *a3 = v11;
  }
  return v9;
}

void MyH16ISPServicesRemoteNotification(int a1, const void *a2)
{
  if (a1 == 1)
  {
    uint64_t v11 = v2;
    uint64_t v12 = v3;
    uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      MyH16ISPServicesRemoteNotification();
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      uint64_t v8 = Mutable;
      int valuePtr = -12683;
      CFNumberRef v9 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2C118], v9);
      CFRelease(v9);
      H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2C128], a2, v8);
      CFRelease(v8);
    }
    else
    {
      H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2C128], a2, 0);
    }
  }
}

void EnqueueExclaveSensorMetadata()
{
}

void sub_2468DB334(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1000C406DBD42B9);
  _Unwind_Resume(a1);
}

uint64_t CreateH16ISPPluginMetadata(uint64_t a1, uint64_t a2, char *outputStruct)
{
  *((_OWORD *)outputStruct + 3) = 0u;
  *((_OWORD *)outputStruct + 4) = 0u;
  *((_OWORD *)outputStruct + 1) = 0u;
  *((_OWORD *)outputStruct + 2) = 0u;
  *(_OWORD *)uint64_t outputStruct = 0u;
  uint64_t v6 = *(void *)(a1 + 24);
  *((void *)outputStruct + 9) = *(void *)(v6 + 4384);
  if (H16ISP::H16ISPDevice::ISP_GetCameraTime(v6, outputStruct))
  {
    *(void *)uint64_t outputStruct = 0;
    *((void *)outputStruct + 1) = 0;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 24) + 104);
  uint64_t v8 = outputStruct + 16;
  if (result)
  {
    uint64_t result = H16ISP::H16ISPMotionManager::GetOscarTimeSyncInfo(result, v8);
  }
  else
  {
    *(void *)uint64_t v8 = 0;
    *((void *)outputStruct + 3) = 0;
  }
  if (*(unsigned char *)(a2 + 674))
  {
    if (*(unsigned char *)(a2 + 752)
      || *(unsigned char *)(a2 + 952)
      || *(unsigned char *)(a2 + 1152)
      || *(unsigned char *)(a2 + 1352)
      || *(unsigned char *)(a2 + 1552)
      || *(unsigned char *)(a2 + 1680)
      || *(unsigned char *)(a2 + 2080)
      || *(unsigned char *)(a2 + 2280)
      || *(unsigned char *)(a2 + 3608))
    {
      BOOL v9 = 1;
      goto LABEL_19;
    }
    int v10 = *(unsigned __int8 *)(a2 + 1880);
  }
  else
  {
    int v10 = *(unsigned __int8 *)(a2 + 3732);
  }
  BOOL v9 = v10 != 0;
LABEL_19:
  if (*(_DWORD *)(*((void *)outputStruct + 9) + 96 * *(unsigned int *)(a2 + 132) + 8))
  {
    if (dword_26B11B9EC) {
      BOOL v9 = 1;
    }
    outputStruct[32] = v9;
    outputStruct[33] = *(_DWORD *)(a2 + 3736) == 0;
    *((_WORD *)outputStruct + 17) = *(_WORD *)(a2 + 3677);
    *((_DWORD *)outputStruct + 9) = *(_DWORD *)(a2 + 3672);
    outputStruct[40] = *(unsigned char *)(a2 + 3676);
    uint64_t result = H16ISP::H16ISPDevice::hasSensorType(*(void *)(a1 + 24), 1785950322);
    outputStruct[42] = result;
    outputStruct[43] = *(unsigned char *)(a2 + 3681);
    outputStruct[44] = *(unsigned char *)(a2 + 4126);
    *(_WORD *)(outputStruct + 45) = *(_WORD *)(a2 + 3679);
    outputStruct[48] = *(unsigned char *)(a2 + 3848);
    uint64_t v11 = *(void *)(a2 + 4252);
    *((_WORD *)outputStruct + 30) = *(_WORD *)(a2 + 4260);
    *(void *)(outputStruct + 52) = v11;
    outputStruct[47] = *(unsigned char *)(a2 + 3682);
    if (byte_26B11BAB0) {
      outputStruct[50] = 1;
    }
    if (byte_26B11BAB1) {
      outputStruct[51] = 1;
    }
    *((void *)outputStruct + 8) = 0;
    outputStruct[41] = *(_DWORD *)(a2 + 648) != 0;
  }
  return result;
}

uint64_t H16ISPDebugFrameFileWriter(__CVBuffer *a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  pthread_setname_np("H16ISPDebugFrameFileWriter");
  if (a1)
  {
    time_t v30 = 0;
    setlocale(0, "");
    time(&v30);
    uint64_t v2 = localtime(&v30);
    strftime(__source, 0x14uLL, "%m%d%g_%H%M%S", v2);
    snprintf(__str, 7uLL, "-%d", H16ISPDebugFrameFileWriter(__CVBuffer *)::savedFrameCounter);
    ++H16ISPDebugFrameFileWriter(__CVBuffer *)::savedFrameCounter;
    BOOL v3 = CVPixelBufferGetPixelFormatType(a1) == 2037741171 || CVPixelBufferGetPixelFormatType(a1) == 2037741158;
    strcpy(__dst, "/var/mobile/Media/DCIM/");
    strlcat(__dst, __source, 0x400uLL);
    strlcat(__dst, __str, 0x400uLL);
    if (v3) {
      unint64_t v4 = ".422";
    }
    else {
      unint64_t v4 = ".420";
    }
    strlcat(__dst, v4, 0x400uLL);
    uint64_t v5 = fopen(__dst, "wb");
    if (v5)
    {
      uint64_t v6 = v5;
      CVPixelBufferLockBaseAddress(a1, 0);
      if (v3)
      {
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
        size_t Width = CVPixelBufferGetWidth(a1);
        size_t Height = CVPixelBufferGetHeight(a1);
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
        if (Height)
        {
          uint64_t v11 = BaseAddress;
          uint64_t v12 = 0;
          size_t v13 = 2 * Width;
          unsigned int v14 = 1;
          do
          {
            fwrite(&v11[v12 * BytesPerRow], v13, 1uLL, v6);
            uint64_t v12 = v14;
            BOOL v15 = Height > v14++;
          }
          while (v15);
        }
      }
      else
      {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
        size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
        if (HeightOfPlane)
        {
          uint64_t v20 = BaseAddressOfPlane;
          uint64_t v21 = 0;
          unsigned int v22 = 1;
          do
          {
            fwrite(&v20[v21 * BytesPerRowOfPlane], WidthOfPlane, 1uLL, v6);
            uint64_t v21 = v22;
            BOOL v15 = HeightOfPlane > v22++;
          }
          while (v15);
        }
        size_t v23 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        size_t v24 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
        CFMutableDictionaryRef v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
        if (v24)
        {
          int v26 = v25;
          uint64_t v27 = 0;
          unsigned int v28 = 1;
          do
          {
            fwrite(&v26[v27 * v23], WidthOfPlane, 1uLL, v6);
            uint64_t v27 = v28;
            BOOL v15 = v24 > v28++;
          }
          while (v15);
        }
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      fclose(v6);
    }
    CVPixelBufferRelease(a1);
  }
  return 0;
}

uint64_t DisableDisplayStrobeOverlay(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t result = *(void *)(a1 + 3712);
  if (result)
  {
    H16ISPDisplayStrobeSetScreenBrightness(result, 1);
    memset(v3, 0, sizeof(v3));
    return H16ISPDisplayStrobeSetScreenColor(*(void *)(a1 + 3712), (uint64_t)v3);
  }
  return result;
}

void LightSourceMaskInfoAttach(__CVBuffer *a1, uint64_t a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      uint64_t v6 = Mutable;
      CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v7)
      {
        int v10 = v7;
        int valuePtr = *(unsigned __int8 *)(a2 + 2);
        CFNumberRef v11 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
        if (v11)
        {
          CFNumberRef v12 = v11;
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2CBE0], v11);
          CFRelease(v12);
        }
        Array = LightSourceMaskInfoCreateArray((unsigned int *)(a2 + 12));
        if (Array)
        {
          unsigned int v14 = Array;
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2CBF8], Array);
          CFRelease(v14);
        }
        BOOL v15 = LightSourceMaskInfoCreateArray((unsigned int *)(a2 + 28));
        if (v15)
        {
          uint64_t v16 = v15;
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2CBF0], v15);
          CFRelease(v16);
        }
        uint64_t v17 = LightSourceMaskInfoCreateArray((unsigned int *)(a2 + 64));
        if (v17)
        {
          uint64_t v18 = v17;
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2CBE8], v17);
          CFRelease(v18);
        }
        CFNumberRef v19 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 80));
        if (v19)
        {
          CFNumberRef v20 = v19;
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F2CC00], v19);
          CFRelease(v20);
        }
        CFDictionarySetValue(v6, (const void *)*MEMORY[0x263F2D308], v10);
        CFRelease(v10);
      }
      v44.origin.x = (double)*(int *)(a2 + 108);
      v44.origin.y = (double)*(int *)(a2 + 112);
      LODWORD(v8) = *(_DWORD *)(a2 + 116);
      LODWORD(v9) = *(_DWORD *)(a2 + 120);
      v44.size.width = (double)v8;
      v44.size.height = (double)v9;
      CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v44);
      if (DictionaryRepresentation)
      {
        CFDictionaryRef v24 = DictionaryRepresentation;
        CFDictionarySetValue(v6, (const void *)*MEMORY[0x263F2D640], DictionaryRepresentation);
        CFRelease(v24);
      }
      v45.origin.x = (double)*(int *)(a2 + 124);
      v45.origin.y = (double)*(int *)(a2 + 128);
      LODWORD(v22) = *(_DWORD *)(a2 + 132);
      LODWORD(v23) = *(_DWORD *)(a2 + 136);
      v45.size.width = (double)v22;
      v45.size.height = (double)v23;
      CFDictionaryRef v25 = CGRectCreateDictionaryRepresentation(v45);
      if (v25)
      {
        CFDictionaryRef v26 = v25;
        CFDictionarySetValue(v6, (const void *)*MEMORY[0x263F2D630], v25);
        CFRelease(v26);
      }
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x263F2C558], v6, kCVAttachmentMode_ShouldPropagate);
      CFRelease(v6);
    }
    else
    {
      unsigned int v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned int v35 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v35;
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        LightSourceMaskInfoAttach(v35, v36, v37, v38, v39, v40, v41, v42);
      }
    }
  }
  else
  {
    uint64_t v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v27 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      LightSourceMaskInfoAttach(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void LightSourceMaskVersatileBayerPatternAttach(__CVBuffer *a1, int a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1651519537)
  {
    switch(a2)
    {
      case 0:
        goto LABEL_8;
      case 1:
        int valuePtr = 0;
        goto LABEL_12;
      case 2:
        int v5 = 3;
        goto LABEL_11;
      case 3:
        int v5 = 2;
        goto LABEL_11;
      default:
        CFAllocatorRef v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFAllocatorRef v4 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          LightSourceMaskVersatileBayerPatternAttach();
        }
LABEL_8:
        int v5 = 1;
LABEL_11:
        int valuePtr = v5;
LABEL_12:
        CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
        if (v6)
        {
          CFNumberRef v7 = v6;
          CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x263F04238], v6, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v7);
        }
        break;
    }
  }
}

void ImageRegistrationInfoAttach(__CVBuffer *a1, uint64_t a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFNumberRef v6 = Mutable;
      CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v7)
      {
        unint64_t v8 = v7;
        int valuePtr = *(unsigned __int8 *)(a2 + 4544);
        CFNumberRef v9 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
        if (v9)
        {
          CFNumberRef v12 = v9;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CB20], v9);
          CFRelease(v12);
        }
        v63.origin.x = (double)*(int *)(a2 + 4560);
        v63.origin.y = (double)*(int *)(a2 + 4564);
        LODWORD(v10) = *(_DWORD *)(a2 + 4568);
        v63.size.width = (double)v10;
        LODWORD(v11) = *(_DWORD *)(a2 + 4572);
        v63.size.height = (double)v11;
        CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v63);
        if (DictionaryRepresentation)
        {
          CFDictionaryRef v14 = DictionaryRepresentation;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CAF0], DictionaryRepresentation);
          CFRelease(v14);
        }
        Array = ImageRegistrationInfoCreateArray((float *)(a2 + 4276));
        if (Array)
        {
          uint64_t v16 = Array;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CB18], Array);
          CFRelease(v16);
        }
        CFNumberRef v17 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 4408));
        if (v17)
        {
          CFNumberRef v20 = v17;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CB28], v17);
          CFRelease(v20);
        }
        v64.origin.x = (double)*(int *)(a2 + 4576);
        v64.origin.y = (double)*(int *)(a2 + 4580);
        LODWORD(v18) = *(_DWORD *)(a2 + 4584);
        v64.size.width = (double)v18;
        LODWORD(v19) = *(_DWORD *)(a2 + 4588);
        v64.size.height = (double)v19;
        CFDictionaryRef v21 = CGRectCreateDictionaryRepresentation(v64);
        if (v21)
        {
          CFDictionaryRef v24 = v21;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CB08], v21);
          CFRelease(v24);
        }
        LODWORD(v22) = *(_DWORD *)(a2 + 4592);
        v62.width = (double)v22;
        LODWORD(v23) = *(_DWORD *)(a2 + 4596);
        v62.height = (double)v23;
        CFDictionaryRef v25 = CGSizeCreateDictionaryRepresentation(v62);
        if (v25)
        {
          CFDictionaryRef v26 = v25;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CB00], v25);
          CFRelease(v26);
        }
        CFNumberRef v27 = CFNumberCreate(v4, kCFNumberFloatType, (const void *)(a2 + 4488));
        if (v27)
        {
          CFNumberRef v28 = v27;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CAF8], v27);
          CFRelease(v28);
        }
        CFNumberRef v29 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 4548));
        if (v29)
        {
          CFNumberRef v30 = v29;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CB10], v29);
          CFRelease(v30);
        }
        uint64_t v31 = ImageRegistrationInfoCreateArray((float *)(a2 + 4416));
        if (v31)
        {
          uint64_t v32 = v31;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CAD8], v31);
          CFRelease(v32);
        }
        CFNumberRef v33 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 4552));
        if (v33)
        {
          CFNumberRef v34 = v33;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CAE8], v33);
          CFRelease(v34);
        }
        CFNumberRef v35 = CFNumberCreate(v4, kCFNumberFloatType, (const void *)(a2 + 4556));
        if (v35)
        {
          CFNumberRef v36 = v35;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F2CAE0], v35);
          CFRelease(v36);
        }
        CFDictionarySetValue(v6, (const void *)*MEMORY[0x263F2D250], v8);
        CFRelease(v8);
      }
      else
      {
        int v53 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v53 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v53;
        }
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
          ImageRegistrationInfoAttach(v53, v54, v55, v56, v57, v58, v59, v60);
        }
      }
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x263F2C558], v6, kCVAttachmentMode_ShouldPropagate);
      CFRelease(v6);
    }
    else
    {
      CGRect v45 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CGRect v45 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v45;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        ImageRegistrationInfoAttach(v45, v46, v47, v48, v49, v50, v51, v52);
      }
    }
  }
  else
  {
    uint64_t v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v37 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v37;
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      ImageRegistrationInfoAttach(v37, v38, v39, v40, v41, v42, v43, v44);
    }
  }
}

void H16ISPParsePropertyValue(__CFDictionary *a1, __CFString *a2)
{
  CFTypeID v4 = CFGetTypeID(a2);
  if (v4 == FigCaptureStreamGetTypeID())
  {
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage) {
      return;
    }
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, (const void *)(DerivedStorage + 132));
    CFDictionaryAddValue(a1, @"CameraChannel", v6);
    CFMutableDictionaryRef v7 = v6;
LABEL_4:
    CFRelease(v7);
    return;
  }
  CFTypeID v8 = CFGetTypeID(a2);
  if (v8 == FigCaptureSynchronizedStreamsGroupGetTypeID())
  {
    FigCaptureSynchronizedStreamsGroupGetFigBaseObject();
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (!v9) {
      return;
    }
    uint64_t v10 = v9;
    CFArrayRef v11 = *(const __CFArray **)(v9 + 104);
    if (!v11) {
      return;
    }
    if (CFArrayGetCount(v11) < 1) {
      return;
    }
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
    CFMutableStringRef v13 = CFStringCreateMutable(0, 0);
    if (!Mutable) {
      return;
    }
    CFDictionaryRef v14 = v13;
    if (!v13) {
      return;
    }
    LODWORD(idx) = 0;
    if (CFArrayGetCount(*(CFArrayRef *)(v10 + 104)) >= 1)
    {
      CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 104), (int)idx);
        FigCaptureStreamGetFigBaseObject();
        uint64_t v16 = CMBaseObjectGetDerivedStorage();
        if (v16)
        {
          CFNumberRef v17 = idx ? ", " : "";
          unint64_t v18 = (unsigned char *)(v16 + 132);
          CFStringAppendFormat(Mutable, 0, @"%s%d", v17, *(unsigned int *)(v16 + 132));
          CFStringAppendFormat(v14, 0, @"%s%d", v17, idx);
          if (v18[3764])
          {
            CFNumberRef v19 = CFNumberCreate(v15, kCFNumberIntType, v18);
            CFDictionaryAddValue(a1, @"MasterChannel", v19);
            CFRelease(v19);
            CFNumberRef v20 = CFNumberCreate(v15, kCFNumberIntType, &idx);
            CFDictionaryAddValue(a1, @"MasterStream", v20);
            CFRelease(v20);
          }
        }
        CFIndex v21 = (int)idx + 1;
        LODWORD(idx) = idx + 1;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(v10 + 104)) > v21);
    }
    CFDictionaryAddValue(a1, @"ActiveSyncGroupChannelIndex", Mutable);
    CFDictionaryAddValue(a1, @"ActiveSyncGroupStreamIndex", v14);
    CFRelease(Mutable);
    unint64_t v22 = v14;
    goto LABEL_85;
  }
  CFTypeID v23 = CFGetTypeID(a2);
  if (v23 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)a2))
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
    CFTypeID v25 = CFGetTypeID(ValueAtIndex);
    if (v25 == FigCaptureStreamGetTypeID())
    {
      CFDictionaryRef v26 = CFStringCreateMutable(0, 0);
      CFMutableStringRef v27 = CFStringCreateMutable(0, 0);
      if (!v26) {
        return;
      }
      CFNumberRef v28 = v27;
      if (!v27) {
        return;
      }
      if (CFArrayGetCount((CFArrayRef)a2))
      {
        unint64_t v29 = 0;
        do
        {
          CFArrayGetValueAtIndex((CFArrayRef)a2, v29);
          FigCaptureStreamGetFigBaseObject();
          uint64_t v30 = CMBaseObjectGetDerivedStorage();
          if (v30)
          {
            if (v29) {
              uint64_t v31 = ", ";
            }
            else {
              uint64_t v31 = "";
            }
            CFStringAppendFormat(v26, 0, @"%s%d", v31, *(unsigned int *)(v30 + 132));
            CFStringAppendFormat(v28, 0, @"%s%d", v31, v29);
          }
          ++v29;
        }
        while (v29 < CFArrayGetCount((CFArrayRef)a2));
      }
      CFDictionaryAddValue(a1, @"CameraChannel", v26);
      CFDictionaryAddValue(a1, @"StreamIndex", v28);
      CFRelease(v26);
      CFMutableDictionaryRef v7 = v28;
      goto LABEL_4;
    }
    if (v25 == FigCaptureSynchronizedStreamsGroupGetTypeID())
    {
      CFAllocatorRef v58 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v59 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
      CFMutableArrayRef v60 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
      CFNumberRef v61 = CFArrayCreateMutable(v58, 0, v59);
      CFMutableArrayRef v62 = CFArrayCreateMutable(v58, 0, v59);
      CFMutableArrayRef v63 = CFArrayCreateMutable(v58, 0, v59);
      theArray = v60;
      if (!v60 || !v61 || !v62 || !v63) {
        return;
      }
      uint64_t v80 = v63;
      if (CFArrayGetCount((CFArrayRef)a2) >= 1)
      {
        CFIndex v64 = 0;
        uint64_t v79 = v62;
        do
        {
          CFArrayGetValueAtIndex((CFArrayRef)a2, v64);
          FigCaptureSynchronizedStreamsGroupGetFigBaseObject();
          uint64_t v65 = CMBaseObjectGetDerivedStorage();
          if (v65)
          {
            uint64_t v66 = v65;
            CFArrayRef v67 = *(const __CFArray **)(v65 + 104);
            if (v67)
            {
              if (CFArrayGetCount(v67) >= 1)
              {
                unsigned __int16 v68 = CFStringCreateMutable(0, 0);
                CFMutableStringRef v69 = CFStringCreateMutable(0, 0);
                if (v68)
                {
                  unint64_t v70 = v69;
                  if (v69)
                  {
                    uint64_t valuePtr = 0;
                    if (CFArrayGetCount(*(CFArrayRef *)(v66 + 104)) >= 1)
                    {
                      do
                      {
                        CFArrayGetValueAtIndex(*(CFArrayRef *)(v66 + 104), v64);
                        FigCaptureStreamGetFigBaseObject();
                        uint64_t v71 = CMBaseObjectGetDerivedStorage();
                        if (v71)
                        {
                          uint64_t v72 = valuePtr ? ", " : "";
                          unsigned int v73 = (unsigned char *)(v71 + 132);
                          CFStringAppendFormat(v68, 0, @"%s%d", v72, *(unsigned int *)(v71 + 132));
                          CFStringAppendFormat(v70, 0, @"%s%ld", v72, valuePtr);
                          if (v73[3764])
                          {
                            CFNumberRef v74 = CFNumberCreate(v58, kCFNumberIntType, v73);
                            CFArrayAppendValue(theArray, v74);
                            CFRelease(v74);
                            CFNumberRef v75 = CFNumberCreate(v58, kCFNumberIntType, &valuePtr);
                            CFArrayAppendValue(v61, v75);
                            CFRelease(v75);
                          }
                        }
                        CFIndex v76 = ++valuePtr;
                      }
                      while (v76 < CFArrayGetCount(*(CFArrayRef *)(v66 + 104)));
                    }
                    CFMutableArrayRef v62 = v79;
                    CFArrayAppendValue(v79, v68);
                    CFArrayAppendValue(v80, v70);
                    CFRelease(v68);
                    CFRelease(v70);
                  }
                }
              }
            }
          }
          ++v64;
        }
        while (v64 < CFArrayGetCount((CFArrayRef)a2));
      }
      CFDictionaryAddValue(a1, @"MasterChannel", theArray);
      CFDictionaryAddValue(a1, @"MasterStream", v61);
      CFDictionaryAddValue(a1, @"ActiveSyncGroupChannelIndex", v62);
      CFDictionaryAddValue(a1, @"ActiveSyncGroupStreamIndex", v80);
      CFRelease(theArray);
      CFRelease(v61);
      CFRelease(v62);
      unint64_t v22 = v80;
LABEL_85:
      CFRelease(v22);
      return;
    }
    if (v25 == CFNumberGetTypeID() || v25 == CFBooleanGetTypeID() || v25 == CFStringGetTypeID()) {
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  CFTypeID v32 = CFGetTypeID(a2);
  if (v32 != CFDictionaryGetTypeID())
  {
    CFTypeID v55 = CFGetTypeID(a2);
    if (v55 == CFNumberGetTypeID()) {
      goto LABEL_97;
    }
    CFTypeID v56 = CFGetTypeID(a2);
    if (v56 == CFBooleanGetTypeID()) {
      goto LABEL_97;
    }
    CFTypeID v57 = CFGetTypeID(a2);
    if (v57 == CFStringGetTypeID()) {
      goto LABEL_97;
    }
    CFTypeID v25 = CFGetTypeID(a2);
LABEL_96:
    if (v25 != CFDataGetTypeID())
    {
      CFArrayRef v78 = @"UNSUPPORTED_PROPERTY_TYPE";
      CFArrayRef v77 = a1;
      goto LABEL_98;
    }
LABEL_97:
    CFArrayRef v77 = a1;
    CFArrayRef v78 = a2;
LABEL_98:
    CFDictionaryAddValue(v77, @"PropertyValue", v78);
    return;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
  CFNumberRef v34 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
  CFNumberRef v35 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (v35)
  {
    if (v34)
    {
      CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v34, v35);
      CFAllocatorRef v36 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v37 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
      uint64_t v38 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
      CFMutableArrayRef v39 = CFArrayCreateMutable(v36, 0, v37);
      if (v38)
      {
        uint64_t v40 = v39;
        if (v39)
        {
          if (Count)
          {
            uint64_t v41 = v34;
            uint64_t v42 = v35;
            do
            {
              CFArrayAppendValue(v38, *v41);
              CFTypeID v43 = CFGetTypeID(*v42);
              if (v43 == CFArrayGetTypeID()
                || (CFTypeID v44 = CFGetTypeID(*v42), v44 == CFDictionaryGetTypeID())
                || (CFTypeID v45 = CFGetTypeID(*v42), v45 == FigCaptureStreamGetTypeID())
                || (CFTypeID v46 = CFGetTypeID(*v42), v46 == FigCaptureSynchronizedStreamsGroupGetTypeID()))
              {
                CFTypeID v47 = CFGetTypeID(*v42);
                if (v47 == CFArrayGetTypeID())
                {
                  if (CFArrayGetCount((CFArrayRef)*v42))
                  {
                    uint64_t v48 = CFArrayGetValueAtIndex((CFArrayRef)*v42, 0);
                    CFTypeID v49 = CFGetTypeID(v48);
                    if (v49 != CFDictionaryGetTypeID())
                    {
                      uint64_t v50 = CFArrayGetValueAtIndex((CFArrayRef)*v42, 0);
                      CFTypeID v51 = CFGetTypeID(v50);
                      if (v51 != FigCaptureStreamGetTypeID())
                      {
                        uint64_t v52 = CFArrayGetValueAtIndex((CFArrayRef)*v42, 0);
                        CFTypeID v53 = CFGetTypeID(v52);
                        if (v53 != FigCaptureSynchronizedStreamsGroupGetTypeID())
                        {
LABEL_57:
                          CFArrayAppendValue(v40, *v42);
                          goto LABEL_54;
                        }
                      }
                    }
                  }
                }
                H16ISPParsePropertyValue(a1, *v42);
              }
              else
              {
                CFTypeID v54 = CFGetTypeID(*v42);
                if (v54 != CFNullGetTypeID()) {
                  goto LABEL_57;
                }
              }
LABEL_54:
              ++v42;
              ++v41;
              --Count;
            }
            while (Count);
          }
          CFDictionaryAddValue(a1, @"PropertyConfigurationKey", v38);
          if (CFArrayGetCount(v40) > 0) {
            CFDictionaryAddValue(a1, @"PropertyConfigurationValue", v40);
          }
          CFRelease(v38);
          CFRelease(v40);
        }
      }
    }
  }
  free(v34);

  free(v35);
}

void SetSupportedFormats(__CFDictionary *a1, int *a2, int a3, char a4)
{
  int valuePtr = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  uint64_t v9 = (const void **)MEMORY[0x263F04180];
  if (!a3) {
    uint64_t v9 = (const void **)MEMORY[0x263F2E9A0];
  }
  if (Mutable)
  {
    uint64_t v10 = Mutable;
    CFArrayRef v11 = *v9;
    int v12 = *a2;
    if (*a2)
    {
      CFMutableStringRef v13 = a2 + 1;
      do
      {
        int valuePtr = v12;
        if ((a4 & 1) != 0 || !H16ISP::getFrameFormatMetaInfo(v12, &v16) || v17 != 2)
        {
          CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          CFArrayAppendValue(v10, v14);
          CFRelease(v14);
        }
        int v15 = *v13++;
        int v12 = v15;
      }
      while (v15);
    }
    CFDictionarySetValue(a1, v11, v10);
    CFRelease(v10);
  }
}

uint64_t GetPerFrameTuningParam(const __CFDictionary *a1, uint64_t a2, unsigned char *a3)
{
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)a2 = 8421504;
  *(_WORD *)(a2 + 12) = 2618;
  *(unsigned char *)(a2 + 28) = 0;
  *(void *)(a2 + 20) = 0x200000000;
  *(_DWORD *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 52) = 0;
  *(void *)(a2 + 32) = 0x8080808080808080;
  *(_WORD *)(a2 + 40) = -32640;
  *(_DWORD *)(a2 + 42) = 0;
  CFNumberRef Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4A0]);
  CFMutableDictionaryRef v7 = (CFTypeRef *)MEMORY[0x263EFFB40];
  if (Value && CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFB40])) {
    *(unsigned char *)(a2 + 3) = 1;
  }
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E500]);
  if (v8)
  {
    LOWORD(valuePtr) = 0;
    CFNumberGetValue(v8, kCFNumberSInt16Type, &valuePtr);
    if (((__int16)valuePtr - 1) >= 3)
    {
      *(_DWORD *)(a2 + 4) = 0;
    }
    else
    {
      *(_DWORD *)(a2 + 4) = (__int16)valuePtr;
      uint64_t v9 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4D8]);
      if (v9 && CFEqual(v9, *v7)) {
        *(unsigned char *)(a2 + 44) = 1;
      }
    }
  }
  *(unsigned char *)(a2 + 53) = 0;
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E478]);
  if (v10)
  {
    int valuePtr = 0;
    CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
    char v11 = valuePtr;
    *(unsigned char *)(a2 + 54) = valuePtr & 1;
    if ((v11 & 2) != 0) {
      char v12 = 0;
    }
    else {
      char v12 = 3;
    }
    *(unsigned char *)(a2 + 53) = v12;
  }
  if (a3[1280] && a3[1352] || a3[1480] && a3[1552] || a3[2280] && a3[3784]) {
    *(unsigned char *)(a2 + 54) = 1;
  }
  CFMutableStringRef v13 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E490]);
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4B0]);
  if (!v13 || !v14)
  {
    if (v13 || !v14) {
      goto LABEL_35;
    }
    int valuePtr = 0;
    CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
    char v16 = valuePtr;
    if (valuePtr != 1)
    {
      if (valuePtr == 2)
      {
        char v16 = 1;
        int v17 = 1;
LABEL_34:
        *(unsigned char *)(a2 + 45) = v16;
        *(_DWORD *)(a2 + 48) = v17;
        goto LABEL_35;
      }
      char v16 = 0;
    }
    int v17 = 0;
    goto LABEL_34;
  }
  int valuePtr = 0;
  CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
  *(unsigned char *)(a2 + 45) = CFEqual(v13, *v7) != 0;
  int v15 = valuePtr;
  if ((valuePtr - 1) >= 3) {
    int v15 = 0;
  }
  *(_DWORD *)(a2 + 48) = v15;
LABEL_35:
  unint64_t v18 = CFDictionaryGetValue(a1, @"ChromaticAberrationReductionEnabled");
  if (v18 && CFEqual(v18, *v7)) {
    *(unsigned char *)(a2 + 52) = 1;
  }
  CFNumberRef v19 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E468]);
  if (v19 && CFEqual(v19, *v7)) {
    *(unsigned char *)(a2 + 42) = 1;
  }
  CFNumberRef v20 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E458]);
  if (v20 && CFEqual(v20, *v7)) {
    *(unsigned char *)(a2 + 43) = 1;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4C8]);
  if (result)
  {
    CFDictionaryRef v22 = (const __CFDictionary *)result;
    int valuePtr = 0;
    CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x263F2D6C8]);
    if (v23)
    {
      CFNumberGetValue(v23, kCFNumberSInt32Type, &valuePtr);
      char v24 = valuePtr;
    }
    else
    {
      char v24 = 0;
    }
    *(unsigned char *)(a2 + 1) = v24;
    CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v22, (const void *)*MEMORY[0x263F2D6D0]);
    if (v25) {
      CFNumberGetValue(v25, kCFNumberSInt32Type, &valuePtr);
    }
    *(unsigned char *)a2 = valuePtr;
    CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v22, (const void *)*MEMORY[0x263F2D6B8]);
    if (v26) {
      CFNumberGetValue(v26, kCFNumberSInt32Type, &valuePtr);
    }
    *(unsigned char *)(a2 + 2) = valuePtr;
    uint64_t result = (uint64_t)CFDictionaryGetValue(v22, (const void *)*MEMORY[0x263F2D6C0]);
    if (result)
    {
      CFDictionaryRef v27 = (const __CFDictionary *)result;
      CFNumberRef v28 = CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x263F2D6A0]);
      if (v28 && (CFTypeRef v29 = *v7, CFEqual(v28, *v7)))
      {
        uint64_t v30 = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x263F2D6B0]);
        int v31 = v30 && CFEqual(v30, v29);
      }
      else
      {
        int v31 = 2;
      }
      *(_DWORD *)(a2 + 24) = v31;
      CFTypeID v32 = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x263F2D690]);
      if (v32 && CFEqual(v32, *v7)) {
        *(unsigned char *)(a2 + 28) = 1;
      }
      uint64_t result = (uint64_t)CFDictionaryGetValue(v27, (const void *)*MEMORY[0x263F2D6A8]);
      if (result)
      {
        CFArrayRef v33 = (const __CFArray *)result;
        CFArrayRef v34 = (const __CFArray *)CFDictionaryGetValue(v27, (const void *)*MEMORY[0x263F2D698]);
        uint64_t result = CFArrayGetCount(v33);
        if (result >= 1)
        {
          uint64_t v35 = result;
          CFIndex v36 = 0;
          int v37 = 0;
          do
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v33, v36);
            if (ValueAtIndex) {
              CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
            }
            CFIndex v39 = a2 + 2 * v36;
            *(unsigned char *)(v39 + 32) = valuePtr;
            uint64_t result = (uint64_t)CFArrayGetValueAtIndex(v34, v36);
            if (result) {
              uint64_t result = CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
            }
            *(unsigned char *)(v39 + 33) = valuePtr;
            CFIndex v36 = (unsigned __int16)++v37;
          }
          while (v35 > (unsigned __int16)v37);
        }
      }
    }
  }
  return result;
}

uint64_t AllocateAndSendOneShotBuffers(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  int v12 = 0;
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v13 = *(unsigned __int8 *)(a1 + 674);
  if (a2 && *(unsigned char *)(a1 + 674))
  {
    if (*(unsigned char *)(a1 + 1280) || *(unsigned char *)(a1 + 2280) && *(unsigned char *)(a1 + 3784))
    {
      uint64_t v14 = H16ISP::H16ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(void *)(a1 + 136), 7);
      if (v14) {
        goto LABEL_27;
      }
      int v13 = *(unsigned __int8 *)(a1 + 674);
      int v12 = a2;
    }
    else
    {
      int v12 = 0;
      int v13 = 1;
    }
  }
  int v15 = 0;
  if (!a2 || !v13)
  {
LABEL_13:
    if (!a3) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 1480))
  {
    uint64_t v14 = H16ISP::H16ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(void *)(a1 + 136), 9);
    int v15 = a2;
    if (v14) {
      goto LABEL_27;
    }
    goto LABEL_13;
  }
  int v15 = 0;
  if (!a3) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v14 = H16ISP::H16ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(void *)(a1 + 136), 20);
  if (v14) {
    goto LABEL_27;
  }
LABEL_17:
  if (a6)
  {
    uint64_t v16 = H16ISP::H16ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(void *)(a1 + 136), 31);
    if (v16)
    {
      uint64_t v14 = v16;
      int v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v17 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        AllocateAndSendOneShotBuffers();
      }
      goto LABEL_27;
    }
  }
  if (a4
    && (uint64_t v14 = H16ISP::H16ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(void *)(a1 + 136), 22), v14)
    || a5
    && (uint64_t v14 = H16ISP::H16ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(void *)(a1 + 136), 23), v14))
  {
LABEL_27:
    unint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v18 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      AllocateAndSendOneShotBuffers();
    }
    return v14;
  }
  CFNumberRef v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFNumberRef v20 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
  }
  uint64_t v14 = 0;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = *(_DWORD *)(a1 + 132);
    v22[0] = 67110656;
    v22[1] = v21;
    __int16 v23 = 1024;
    int v24 = v12;
    __int16 v25 = 1024;
    int v26 = v15;
    __int16 v27 = 1024;
    int v28 = a3;
    __int16 v29 = 1024;
    int v30 = a4;
    __int16 v31 = 1024;
    int v32 = a5;
    __int16 v33 = 1024;
    int v34 = a6;
    _os_log_impl(&dword_24680F000, v20, OS_LOG_TYPE_DEFAULT, "AllocateAndSendOneShotBuffers (channel %d): Sent still image buffers: still=%d, stillycc=%d, sushi=%d, sashimi=%d, fpc=%d CntxSw = %d\n", (uint8_t *)v22, 0x2Cu);
    return 0;
  }
  return v14;
}

uint64_t LaunchStillImageCapture(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (a2[5])
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 18;
    do
    {
      CFNumberRef v10 = *(NSObject **)(*(void *)&v9[2 * v8 + 16] + 3776);
      dispatch_time_t v11 = dispatch_time(0, 1000000000 * a2[26] + 1000 * v9[v8]);
      dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
      ++v8;
    }
    while (v8 < a2[5]);
  }
  if (!a3) {
    return 0;
  }
  uint64_t v12 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a1 + 24), a3, a4, 0, a2[25]);
  if (v12)
  {
    if (a2[5])
    {
      unint64_t v13 = 0;
      uint64_t v14 = a2 + 34;
      do
      {
        dispatch_source_set_timer(*(dispatch_source_t *)(*(void *)&v14[2 * v13] + 3776), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
        uint64_t v15 = *(void *)&v14[2 * v13];
        if (!*(void *)(v15 + 4408)) {
          H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(v15 + 136), 31);
        }
        ++v13;
      }
      while (v13 < a2[5]);
    }
    uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      LaunchStillImageCapture();
    }
  }
  return v12;
}

uint64_t HasFlashBracket(const __CFArray *a1)
{
  int valuePtr = 0;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    char v5 = 0;
  }
  else
  {
    CFIndex v3 = Count;
    CFIndex v4 = 0;
    char v5 = 0;
    CFNumberRef v6 = (const void *)*MEMORY[0x263F2E770];
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v4);
      if (ValueAtIndex)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v6);
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
          v5 |= (valuePtr & 0xFFFFFFFE) == 4;
        }
      }
      ++v4;
    }
    while (v3 != v4);
  }
  return v5 & 1;
}

void ConfigureExternalStrobeParameters(uint64_t a1, int a2, int a3)
{
  bzero(v8, 0x18uLL);
  __int16 v9 = 1578;
  int v10 = a2;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a1 + 24), v8, 0x18u, 0, 0xFFFFFFFF))
  {
    CFNumberRef v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ConfigureExternalStrobeParameters();
    }
  }
  else if (v12 != a3)
  {
    unsigned __int8 v12 = a3;
    char v11 = a3 ^ 1;
    int v10 = a2;
    __int16 v9 = 1577;
    if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a1 + 24), v8, 0x18u, 0, 0xFFFFFFFF))
    {
      CFMutableDictionaryRef v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFMutableDictionaryRef v7 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        ConfigureExternalStrobeParameters();
      }
    }
  }
}

uint64_t AddCntxSwRawPoolToFrameReceiver(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 4408) || (uint64_t v13 = *(void *)(a1 + 4456)) != 0 && *(void *)(v13 + 56))
  {
    uint64_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v2 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v2;
    }
    uint64_t v3 = 3758097095;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      AddCntxSwRawPoolToFrameReceiver(v2, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  else
  {
    H16ISP::H16ISPDevice::GetPoolInfoExtended(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 32, &v19);
    if (v14)
    {
      uint64_t v3 = v14;
      uint64_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v15 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        AddCntxSwRawPoolToFrameReceiver();
      }
    }
    else
    {
      uint64_t v16 = *(void *)(a1 + 136);
      int v17 = WORD1(v19);
      GetFormatForHiResRaw(a1, v20);
      uint64_t v3 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v16, 31, v17);
      if (v3)
      {
        unint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          unint64_t v18 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          AddCntxSwRawPoolToFrameReceiver();
        }
      }
    }
  }
  return v3;
}

uint64_t NumberOfClientRequestedHiResStillImageCaptures(const __CFArray *a1)
{
  if (CFArrayGetCount(a1) < 1) {
    return 0;
  }
  CFIndex v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = (const void *)*MEMORY[0x263F2E4D0];
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v2);
    if (ValueAtIndex && CFDictionaryContainsKey(ValueAtIndex, v4)) {
      ++v3;
    }
    ++v2;
  }
  while (v2 < CFArrayGetCount(a1));
  return v3;
}

uint64_t GetPerFrameBracketParams(const __CFDictionary *a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  __int32 valuePtr = 0;
  float v38 = 0.0;
  float v39 = 0.0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E508]);
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  if (valuePtr == 1)
  {
    a2->i8[6] = 1;
  }
  else if (valuePtr)
  {
    a2->i8[6] = 0;
  }
  else
  {
    a2->i8[6] = 0;
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4B8]);
    if (v9)
    {
      CFNumberGetValue(v9, kCFNumberFloatType, &v39);
      a2->i16[0] = vcvtd_n_s64_f64(v39, 8uLL);
    }
  }
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4D0]);
  if (!v10)
  {
    a2[2].i16[1] = *(_DWORD *)(*(void *)(a4 + 160) + 120 * *(unsigned int *)(a4 + 48) + 16);
    goto LABEL_15;
  }
  LODWORD(point.x) = 0;
  CFNumberGetValue(v10, kCFNumberSInt32Type, &point);
  int x_low = LODWORD(point.x);
  a2[2].i16[1] = *(_DWORD *)(*(void *)(a4 + 160) + 120 * SLODWORD(point.x) + 16);
  unsigned __int8 v12 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4E8]);
  if (!*(void *)(a4 + 4408))
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(a4 + 4456);
    if (!v14 || !*(void *)(v14 + 56))
    {
      CFMutableArrayRef Mutable = *(__CFArray **)(a4 + 4320);
      if (Mutable)
      {
        if (v13)
        {
LABEL_13:
          CFArrayAppendValue(Mutable, v13);
          goto LABEL_15;
        }
      }
      else
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
        *(void *)(a4 + 4320) = Mutable;
        if (v13) {
          goto LABEL_13;
        }
      }
      Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(a4 + 136), 31);
      uint64_t v33 = *(void *)(a4 + 160) + 120 * x_low;
      LOBYTE(v35) = 0;
      CVPixelBufferRef v34 = H16ISP::H16ISPCreateCVBuffer(*(_DWORD *)(v33 + 4), *(_DWORD *)(v33 + 8), 0, 0, *(_DWORD *)(BufferPool + 40), 0, 0.0, 64, 128, 1792, v35, 0, 0, -1);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a4 + 4320), v34);
      CFRelease(v34);
    }
  }
LABEL_15:
  CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4E0]);
  if (v16 && (CFNumberGetValue(v16, kCFNumberFloatType, &v38), float v17 = v38, v38 != *MEMORY[0x263F2E450]))
  {
    a2->i8[5] = 1;
    a2->i16[1] = vcvtd_n_s64_f64(v17, 8uLL);
  }
  else
  {
    a2->i8[5] = 0;
  }
  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4F8]);
  if (v18)
  {
    __int32 valuePtr = 0;
    CFNumberGetValue(v18, kCFNumberIntType, &valuePtr);
    __int8 v19 = valuePtr;
  }
  else
  {
    __int8 v19 = 0;
  }
  a2[4].i8[7] = v19;
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E770]);
  if (v20)
  {
    LODWORD(point.x) = 0;
    int v37 = 0;
    CFNumberGetValue(v20, kCFNumberSInt32Type, &v37);
    switch(v37)
    {
      case 0:
        char v21 = 1;
        goto LABEL_35;
      case 1:
        char v21 = 2;
        goto LABEL_35;
      case 2:
        a2->i8[4] = 3;
        CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E488]);
        if (v22)
        {
          CFNumberGetValue(v22, kCFNumberFloatType, &point);
          a2[1].i32[0] = LODWORD(point.x);
        }
        CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4A8]);
        if (v23)
        {
          CFNumberGetValue(v23, kCFNumberSInt32Type, &valuePtr);
          a2[1].i32[1] = valuePtr;
        }
        int v24 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E480]);
        if (v24) {
          a2[2].i16[0] = CFEqual(v24, (CFTypeRef)*MEMORY[0x263EFFB40]);
        }
        else {
          a2[2].i16[0] = 0;
        }
        break;
      case 3:
        char v21 = 4;
        goto LABEL_35;
      case 4:
        char v21 = 6;
        goto LABEL_35;
      case 5:
        char v21 = 5;
LABEL_35:
        a2->i8[4] = v21;
        break;
      default:
        break;
    }
  }
  __int16 v25 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E498]);
  if (v25) {
    a2[3].i8[0] = CFEqual(v25, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4C0]);
  if (v26)
  {
    LODWORD(point.x) = 0;
    CFNumberGetValue(v26, kCFNumberFloatType, &point);
    a2[2].i32[1] = LODWORD(point.x);
  }
  CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E510]);
  if (v27)
  {
    LODWORD(point.x) = 0;
    CFNumberGetValue(v27, kCFNumberIntType, &point);
    if (LODWORD(point.x) <= 1) {
      a2[3].i8[1] = LOBYTE(point.x);
    }
  }
  CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4F0]);
  if (v28 && CGPointMakeWithDictionaryRepresentation(v28, &point)) {
    a2[5] = vcvt_f32_f64((float64x2_t)point);
  }
  a2[3].i8[4] = 0;
  if (*(void *)(a4 + 3888))
  {
    __int16 v29 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2EB98]);
    if (v29) {
      a2[3].i8[4] = CFEqual(v29, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    }
  }
  int v30 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E470]);
  if (v30) {
    a2[6].i8[0] = CFEqual(v30, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  return GetPerFrameTuningParam(a1, a3, (unsigned char *)a4);
}

uint64_t GetAFWindowParam(const __CFDictionary *a1, uint64_t a2, _WORD *a3)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2DB20]);
  if (!Value) {
    return 0;
  }
  CFArrayRef v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFArrayGetTypeID()) {
    return 4294954611;
  }
  unsigned __int16 Count = CFArrayGetCount(v6);
  if (Count <= 0x10u) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 4294954516;
  }
  if (Count)
  {
    CFIndex v10 = 0;
    uint64_t v11 = Count;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v10);
      if (!ValueAtIndex) {
        break;
      }
      CFDictionaryRef v13 = ValueAtIndex;
      CFTypeID v14 = CFGetTypeID(ValueAtIndex);
      if (v14 != CFDictionaryGetTypeID()) {
        break;
      }
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      unsigned int v17 = 0;
      if (H16ISPGetRectParamsFromDict(v13, (char *)&v19 + 4, &v19, (char *)&v18 + 4, &v18, &v17, 1u)) {
        break;
      }
      uint64_t v15 = a2 + 12 * (unsigned __int16)*a3;
      *(_DWORD *)uint64_t v15 = (unsigned __int16)*a3;
      *(_WORD *)(v15 + 4) = WORD2(v19);
      *(_WORD *)(a2 + 12 * (unsigned __int16)*a3 + 6) = v19;
      *(_WORD *)(a2 + 12 * (unsigned __int16)*a3 + 8) = WORD2(v18);
      *(_WORD *)(a2 + 12 * (unsigned __int16)(*a3)++ + 10) = v18;
      ++v10;
    }
    while (v11 != v10);
  }
  return v9;
}

uint64_t GetPerFrameBracketParamForDualUB(const __CFDictionary *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v17 = 0;
  uint64_t valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E508]);
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr == 1)
  {
    *(unsigned char *)(a2 + 6) = 1;
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E770]);
    CFNumberGetValue(v12, kCFNumberSInt16Type, (char *)&valuePtr + 4);
    if (HIDWORD(valuePtr) == 1) {
      char v13 = 2;
    }
    else {
      char v13 = 1;
    }
    *(unsigned char *)(a2 + 4) = v13;
  }
  else
  {
    if (valuePtr)
    {
      *(unsigned char *)(a2 + 6) = 0;
      return GetPerFrameTuningParam(a1, a3, a4);
    }
    *(unsigned char *)(a2 + 6) = 0;
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E770]);
    if (v9) {
      CFNumberGetValue(v9, kCFNumberSInt16Type, (char *)&valuePtr + 4);
    }
    if (HIDWORD(valuePtr) == 1) {
      char v10 = 2;
    }
    else {
      char v10 = 1;
    }
    *(unsigned char *)(a2 + 4) = v10;
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4B8]);
    if (v11)
    {
      CFNumberGetValue(v11, kCFNumberFloatType, (char *)&v17 + 4);
      *(_WORD *)a2 = vcvtd_n_s64_f64(*((float *)&v17 + 1), 8uLL);
    }
  }
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E4E0]);
  if (v14)
  {
    CFNumberGetValue(v14, kCFNumberFloatType, &v17);
    float v15 = *(float *)&v17;
    if (*(float *)&v17 == *MEMORY[0x263F2E450])
    {
      *(unsigned char *)(a2 + 5) = 0;
    }
    else
    {
      *(unsigned char *)(a2 + 5) = 1;
      *(_WORD *)(a2 + 2) = vcvtd_n_s64_f64(v15, 8uLL);
    }
  }
  return GetPerFrameTuningParam(a1, a3, a4);
}

uint64_t GetFormatForHiResRaw(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 545)) {
    uint64_t v2 = 38;
  }
  else {
    uint64_t v2 = 20;
  }
  if (*(unsigned char *)(a1 + 544))
  {
    if ((a2 - 2) >= 2)
    {
      if (a2 == 5)
      {
        return 41;
      }
      else
      {
        uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v3 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          GetFormatForHiResRaw();
        }
      }
    }
    else
    {
      return 40;
    }
  }
  return v2;
}

uint64_t std::deque<__CVBuffer *>::deque(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::deque<__CVBuffer *>::__append_with_size[abi:ne180100]<__CVBuffer * const*>((void *)a1, a2, (8 * a3) >> 3);
  return a1;
}

void sub_2468DE368(_Unwind_Exception *a1)
{
  std::__split_buffer<__CVBuffer **>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void *std::deque<__CVBuffer *>::__append_with_size[abi:ne180100]<__CVBuffer * const*>(void *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 6) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<__CVBuffer *>::__add_back_capacity(a1, a3 - v10);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  CFNumberRef v11 = (void *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *v11 + 8 * (v9 & 0x1FF);
  }
  v20[0] = v6 + 8 * (v9 >> 9);
  v20[1] = v12;
  uint64_t result = std::__deque_iterator<__CVBuffer *,__CVBuffer **,__CVBuffer *&,__CVBuffer ***,long,512l>::operator+[abi:ne180100]((uint64_t)v20, a3);
  if (v12 != v14)
  {
    uint64_t v15 = a1[5];
    do
    {
      if (v11 == result) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = *v11 + 4096;
      }
      if (v12 == v16)
      {
        uint64_t v16 = v12;
      }
      else
      {
        uint64_t v17 = (void *)v12;
        do
        {
          uint64_t v18 = *a2++;
          *v17++ = v18;
        }
        while (v17 != (void *)v16);
      }
      v15 += (v16 - v12) >> 3;
      if (v11 == result) {
        break;
      }
      uint64_t v19 = v11[1];
      ++v11;
      uint64_t v12 = v19;
    }
    while (v19 != v14);
    a1[5] = v15;
  }
  return result;
}

void std::deque<__CVBuffer *>::__add_back_capacity(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          __int16 v29 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v28);
          __int16 v31 = &v29[8 * (v28 >> 2)];
          int v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            int v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)int v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          int v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          __int16 v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          CFNumberRef v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<__CVBuffer **>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          CFArrayRef v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          unsigned __int16 v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v78);
              unsigned int v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              unsigned int v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              CFNumberRef v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              CFArrayRef v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __int16 v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        CFIndex v88 = operator new(0x1000uLL);
        std::__split_buffer<__CVBuffer **>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        float v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              CFTypeID v49 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)v91, v48);
              CFTypeID v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                CFTypeID v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)CFTypeID v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              CFTypeID v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              CFTypeID v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              CFTypeID v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          float v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      CFTypeID v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<__CVBuffer **>::push_front((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_2468DE9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ActivateIntermediateTapOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 136)) {
    return;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 168);
  if (v4 < v5) {
    unsigned int v5 = 0;
  }
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v4 - v5) + 16), v50, v60))
  {
    unint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ActivateIntermediateTapOutputInFrameReceiver();
    }
    return;
  }
  int valuePtr = 0;
  int v48 = 0;
  if (H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(a1 + 1096), &v46))
  {
    int v7 = DWORD1(v46);
  }
  else
  {
    unint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      ActivateIntermediateTapOutputInFrameReceiver();
    }
    int v7 = 0;
  }
  unint64_t v9 = *(__CVPixelBufferPool **)(a1 + 1224);
  if (v9)
  {
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v9);
    if (!PixelBufferAttributes)
    {
      uint64_t v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v19 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        ActivateIntermediateTapOutputInFrameReceiver();
      }
      return;
    }
    CFDictionaryRef v11 = PixelBufferAttributes;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F04240]);
    CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v11, (const void *)*MEMORY[0x263F04118]);
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    CFNumberGetValue(v13, kCFNumberIntType, &v48);
  }
  else
  {
    int valuePtr = *(_DWORD *)(a1 + 1100);
    int v48 = *(_DWORD *)(a1 + 1104);
  }
  long long v44 = 0u;
  long long v45 = 0u;
  GenerateBufferTagsForOutput(a1, a1 + 1080, (uint64_t)&v44);
  uint64_t v14 = *(void *)(a1 + 136);
  long long v42 = v44;
  long long v43 = v45;
  if (H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v14, 6, SDWORD1(v51)))
  {
    uint64_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v15 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      ActivateIntermediateTapOutputInFrameReceiver();
    }
    return;
  }
  unsigned int v16 = *(_DWORD *)(H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(a1 + 136), 6) + 44);
  bzero(v37, 0x1CuLL);
  __int16 v38 = 2832;
  int v39 = *(_DWORD *)(a1 + 132);
  float64x2_t v17 = *(float64x2_t *)(a1 + 1128);
  int32x2_t v40 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(a1 + 1112)));
  int32x2_t v41 = vmovn_s64((int64x2_t)vcvtq_u64_f64(v17));
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a2 + 24), v37, 0x1Cu, 0, 0xFFFFFFFF))
  {
    uint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v18 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      ActivateIntermediateTapOutputInFrameReceiver();
    }
    return;
  }
  bzero(v29, 0x20uLL);
  __int16 v30 = 2822;
  int v31 = *(_DWORD *)(a1 + 132);
  switch(v7)
  {
    case 15:
      unsigned int v32 = (2 * valuePtr + 63) & 0xFFFFFFC0;
      int v35 = 18;
      goto LABEL_66;
    case 22:
      BOOL v36 = 1;
      int v35 = 0;
      unsigned int v32 = (32 * valuePtr + 992) & 0xFFFFFC00;
      break;
    case 23:
      BOOL v36 = 1;
      int v35 = 19;
      unsigned int v32 = ((5 * ((valuePtr + 31) >> 5)) & 0x1FFFFF) << 8;
      break;
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      BOOL v36 = v47 != 0;
      int v35 = HIDWORD(v46);
      unsigned int v32 = v16;
      break;
    default:
      unsigned int v32 = (valuePtr + 63) & 0xFFFFFFC0;
      int v35 = 0;
LABEL_66:
      BOOL v36 = 0;
      break;
  }
  int v34 = v48;
  int v33 = ColorRangeForOutput(a1, a1 + 1080);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a2 + 24), v29, 0x20u, 0, 0xFFFFFFFF))
  {
    uint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v20 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      ActivateIntermediateTapOutputInFrameReceiver();
    }
    return;
  }
  uint64_t v21 = *(H16ISP::H16ISPFrameReceiver **)(a1 + 136);
  if (!*(unsigned char *)(a1 + 1152) || *((unsigned char *)v21 + 453)) {
    goto LABEL_44;
  }
  v27[10] = v56;
  v27[11] = v57;
  v27[12] = v58;
  int v28 = v59;
  v27[6] = v52;
  v27[7] = v53;
  v27[8] = v54;
  v27[9] = v55;
  v27[2] = v50[2];
  v27[3] = v50[3];
  v27[4] = v50[4];
  v27[5] = v51;
  v27[0] = v50[0];
  v27[1] = v50[1];
  if (!AddRawPoolToFrameReceiver(a1, a2, (uint64_t)v27))
  {
    uint64_t v21 = *(H16ISP::H16ISPFrameReceiver **)(a1 + 136);
LABEL_44:
    if ((*(_DWORD *)v21 - 1) <= 1
      && H16ISP::H16ISPFrameReceiver::SendFWInitialBuffers(v21, 6))
    {
      BOOL v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        BOOL v22 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        ActivateIntermediateTapOutputInFrameReceiver();
      }
    }
    else
    {
      unsigned int v23 = vcvtms_u32_f32(*(float *)(a1 + 1216) * 256.0);
      if (v23) {
        int v24 = v23;
      }
      else {
        int v24 = HIDWORD(v50[0]);
      }
      if (H16ISP::H16ISPDevice::ISP_SetMaxOutputRate(*(H16ISP::H16ISPDevice **)(a2 + 24), 6, v24))
      {
        __int16 v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          __int16 v25 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          ActivateIntermediateTapOutputInFrameReceiver();
        }
      }
      else
      {
        SetMetaDataOptionsOnFrameReceiver(a1, a2);
      }
    }
    return;
  }
  int64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int64_t v26 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v26;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
    ActivateIntermediateTapOutputInFrameReceiver();
  }
}

void ActivateStillImageIntermediateTapOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 136)) {
    return;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 168);
  if (v4 < v5) {
    unsigned int v5 = 0;
  }
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v4 - v5) + 16), v60, v65))
  {
    unint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageIntermediateTapOutputInFrameReceiver();
    }
    return;
  }
  bzero(v55, 0x5B0uLL);
  __int16 v56 = 278;
  int v57 = *(_DWORD *)(a1 + 132);
  unsigned int v58 = 45;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a2 + 24), v55, 0x5B0u, 0, 0xFFFFFFFF))
  {
    int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageIntermediateTapOutputInFrameReceiver();
    }
    return;
  }
  uint64_t v8 = v58;
  if (!v58) {
    goto LABEL_28;
  }
  unint64_t v9 = (unsigned __int16 *)&v59;
  while (*(v9 - 1) != 19)
  {
    v9 += 16;
    if (!--v8) {
      goto LABEL_28;
    }
  }
  int v10 = *v9;
  if (v10 == 0xFFFF)
  {
LABEL_28:
    uint64_t v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v19 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageIntermediateTapOutputInFrameReceiver();
    }
    return;
  }
  int v11 = *(_DWORD *)(a1 + 1544);
  int valuePtr = 0;
  int v53 = 0;
  if ((H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(a1 + 1496), &v52) & 1) == 0)
  {
    unint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageIntermediateTapOutputInFrameReceiver();
    }
  }
  CFNumberRef v13 = *(__CVPixelBufferPool **)(a1 + 1624);
  if (v13)
  {
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v13);
    if (!PixelBufferAttributes)
    {
      int v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v28 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageIntermediateTapOutputInFrameReceiver();
      }
      return;
    }
    CFDictionaryRef v15 = PixelBufferAttributes;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F04240]);
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x263F04118]);
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    CFNumberGetValue(v17, kCFNumberIntType, &v53);
    int v18 = valuePtr;
  }
  else
  {
    int v18 = *(_DWORD *)(a1 + 1500);
    int valuePtr = v18;
    int v53 = *(_DWORD *)(a1 + 1504);
  }
  uint64_t v20 = *(H16ISP::H16ISPDevice **)(a2 + 24);
  int v21 = *(_DWORD *)(a1 + 132);
  unsigned int v22 = (2 * v18 + 63) & 0xFFFFFFC0;
  int v23 = ColorRangeForOutput(a1, a1 + 1480);
  if (H16ISP::H16ISPDevice::ConfigureStillImageIntermediateTapDMA(v20, v21, v22, v23, 0, 0))
  {
    int v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v24 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageIntermediateTapOutputInFrameReceiver();
    }
    return;
  }
  BOOL v25 = *(unsigned char *)(a1 + 752)
     || *(unsigned char *)(a1 + 952)
     || *(unsigned char *)(a1 + 1152)
     || *(unsigned char *)(a1 + 1352)
     || *(unsigned char *)(a1 + 1552)
     || *(unsigned char *)(a1 + 2080)
     || *(unsigned char *)(a1 + 2280)
     || *(unsigned char *)(a1 + 3608)
     || *(unsigned char *)(a1 + 1680) != 0;
  uint64_t v26 = *(void *)(a1 + 136);
  if (v25 && !*(unsigned char *)(v26 + 453))
  {
    v50[10] = v60[10];
    v50[11] = v60[11];
    v50[12] = v60[12];
    int v51 = v61;
    v50[6] = v60[6];
    v50[7] = v60[7];
    v50[8] = v60[8];
    v50[9] = v60[9];
    v50[2] = v60[2];
    v50[3] = v60[3];
    unsigned __int8 v50[4] = v60[4];
    _OWORD v50[5] = v60[5];
    v50[0] = v60[0];
    v50[1] = v60[1];
    if (AddRawPoolToFrameReceiver(a1, a2, (uint64_t)v50))
    {
      CFNumberRef v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v27 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageIntermediateTapOutputInFrameReceiver();
      }
      return;
    }
    uint64_t v26 = *(void *)(a1 + 136);
  }
  if (!H16ISP::H16ISPFrameReceiver::HasPool((void *)v26, 30)
    && *(unsigned char *)(a1 + 1553)
    && AddThumbnailRawPoolToFrameReceiver(a1, a2))
  {
    __int16 v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v29 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v29;
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
  }
  else
  {
    long long v48 = 0u;
    long long v49 = 0u;
    GenerateBufferTagsForOutput(a1, a1 + 1480, (uint64_t)&v48);
    uint64_t v30 = *(void *)(a1 + 136);
    long long v46 = v48;
    long long v47 = v49;
    int v31 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v30, 9, v10);
    unsigned int v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    uint64_t v33 = &_os_log_internal;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v32 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v32;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 67109376;
      *(_DWORD *)CFMutableArrayRef v63 = v11;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = 0;
      _os_log_impl(&dword_24680F000, v32, OS_LOG_TYPE_INFO, "ActivateStillImageIntermediateTapOutputInFrameReceiver STILLYCC pool size=%d,prime=%d\n\n", buf, 0xEu);
    }
    if (v31)
    {
      int v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v33)
      {
        int v34 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v34;
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageIntermediateTapOutputInFrameReceiver();
      }
    }
    else if (*(unsigned char *)(a1 + 1600) && AddSushiRawPoolToFrameReceiver(a1, a2, a1 + 1480))
    {
      int v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v33)
      {
        int v35 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v35;
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageIntermediateTapOutputInFrameReceiver();
      }
    }
    else if (*(_DWORD *)(a1 + 1604) && AddSashimiRawPoolToFrameReceiver(a1, a2, a1 + 1480))
    {
      BOOL v36 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v33)
      {
        BOOL v36 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v36;
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageIntermediateTapOutputInFrameReceiver();
      }
    }
    else if (*(_DWORD *)(a1 + 1608) && AddFocusPixelDataToFrameReceiver(a1, a2, a1 + 1480))
    {
      int v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v33)
      {
        int v37 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v37;
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageIntermediateTapOutputInFrameReceiver();
      }
    }
    else if (*(unsigned char *)(a1 + 1576) && AddSplitPixelDataToFrameReceiver(a1, a2, a1 + 1480))
    {
      __int16 v38 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v33)
      {
        __int16 v38 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v38;
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageOutputInFrameReceiver();
      }
    }
    else
    {
      if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 8))
      {
        uint64_t v45 = 0;
        int v39 = resizeStillMetaPool(a1, 0, (int *)&v45 + 1, (int *)&v45);
        if (v39)
        {
          int v40 = v39;
          int32x2_t v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v33)
          {
            int32x2_t v41 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
          }
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)CFMutableArrayRef v63 = "ActivateStillImageIntermediateTapOutputInFrameReceiver";
            *(_WORD *)&v63[8] = 1024;
            int v64 = v40;
            _os_log_impl(&dword_24680F000, v41, OS_LOG_TYPE_DEFAULT, "%s - resize still meta pool failed err= %d\n", buf, 0x12u);
          }
        }
        int v42 = v45 + HIDWORD(v45);
        if (HIDWORD(v45) >= 0x10) {
          int v43 = 16;
        }
        else {
          int v43 = HIDWORD(v45);
        }
        H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 8, v66);
        long long v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v33)
        {
          long long v44 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
        }
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 67109376;
          *(_DWORD *)CFMutableArrayRef v63 = v42;
          *(_WORD *)&v63[4] = 1024;
          *(_DWORD *)&v63[6] = v43;
          _os_log_impl(&dword_24680F000, v44, OS_LOG_TYPE_INFO, "ActivateStillImageIntermediateTapOutputInFrameReceiver STILLMETA pool size=%d,prime=%d\n\n", buf, 0xEu);
        }
      }
      SetMetaDataOptionsOnFrameReceiver(a1, a2);
    }
  }
}

void ActivateVisPipeOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 136))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 168);
    if (v4 < v5) {
      unsigned int v5 = 0;
    }
    unsigned int v6 = v4 - v5;
    int v7 = dword_26B11BA34;
    uint64_t v8 = *(void *)(a1 + 160);
    if (!dword_26B11BA34) {
      int v7 = *(_DWORD *)(v8 + 120 * v6 + 116);
    }
    if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(v8 + 120 * v6 + 16), v18, v24))
    {
      unint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unint64_t v9 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        ActivateVisPipeOutputInFrameReceiver();
      }
    }
    else if (H16ISP::H16ISPDevice::EnableDPM(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 0))
    {
      int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        ActivateVisPipeOutputInFrameReceiver();
      }
    }
    else if (*(_DWORD *)(a1 + 2620) > 4u)
    {
      unint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unint64_t v12 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        ActivateVisPipeOutputInFrameReceiver();
      }
    }
    else if (H16ISP::H16ISPDevice::EnableVisPipeOutput(*(void *)(a2 + 24), *(unsigned int *)(a1 + 132)))
    {
      int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v11 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        ActivateVisPipeOutputInFrameReceiver();
      }
    }
    else
    {
      int v13 = v7 + *(_DWORD *)(a1 + 744) + 1;
      int v14 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 19, v19);
      CFDictionaryRef v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      uint64_t v16 = &_os_log_internal;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFDictionaryRef v15 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 67109376;
        int v21 = v13;
        __int16 v22 = 1024;
        int v23 = v7;
        _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_INFO, "ActivateVisPipeOutputInFrameReceiver VISION_RESIZE_RAW pool size=%d,prime=%d\n\n", buf, 0xEu);
      }
      if (v14)
      {
        CFNumberRef v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v16)
        {
          CFNumberRef v17 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          ActivateVisPipeOutputInFrameReceiver();
        }
      }
      else
      {
        SetMetaDataOptionsOnFrameReceiver(a1, a2);
      }
    }
  }
}

uint64_t ConfigureExclaveGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 57696))
  {
    uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v8 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      ConfigureExclaveGraph(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return 0;
  }
  if (!isExclaveAlgoEnabled((unsigned char *)a2))
  {
    uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v16 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      ConfigureExclaveGraph(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    return 0;
  }
  unsigned int v4 = (unsigned int *)(a2 + 132);
  if (H16ISP::H16ISPDevice::isConclaveRunning(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132)))
  {
    int v5 = H16ISP::H16ISPDevice::SetExclusiveExclaveStreamingMode(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), *(unsigned __int8 *)(a2 + 2700));
    if (v5)
    {
      int v6 = v5;
      int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v7 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315394;
        int v37 = "ConfigureExclaveGraph";
        __int16 v38 = 1024;
        int v39 = v6;
        _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_DEFAULT, "%s - Failed enabling exclave streaming mode res=0x%08x\n", buf, 0x12u);
      }
    }
    if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *v4, 1718186595)) {
      operator new();
    }
    if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *v4, 1718775412)
      || H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *v4, 1718776695))
    {
      operator new();
    }
    uint64_t v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v33 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      ConfigureExclaveGraph();
    }
    int v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v34 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v34;
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      ConfigureExclaveGraph();
    }
    return 0;
  }
  int v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    int v24 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v24;
  }
  uint64_t v25 = 3758097084;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
    ConfigureExclaveGraph(v24, v26, v27, v28, v29, v30, v31, v32);
  }
  return v25;
}

void sub_2468E13BC(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10E1C403682F8F4);
  _Unwind_Resume(a1);
}

void ActivateMetadataOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 136);
  if (!v3) {
    return;
  }
  int v5 = &_os_log_internal;
  if (*(unsigned char *)(a1 + 2795))
  {
    if (*(unsigned char *)(a1 + 2921))
    {
      int v6 = AddMetadataOutputBufferPoolToFrameReceiver(v3, (uint64_t *)(a1 + 2840));
      if (v6)
      {
        int v7 = v6;
        uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
        {
          uint64_t v8 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          ActivateMetadataOutputInFrameReceiver();
        }
LABEL_16:
        uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
        {
          uint64_t v12 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315394;
          __int16 v56 = "ActivateMetadataOutputInFrameReceiver";
          __int16 v57 = 1024;
          int v58 = v7;
          _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_DEFAULT, "%s - Failed activating deghosting output ret=0x%08x\n", buf, 0x12u);
        }
        goto LABEL_20;
      }
      unsigned __int8 v9 = *(unsigned char *)(a1 + 2921) != 0;
    }
    else
    {
      unsigned __int8 v9 = 0;
    }
    int v10 = H16ISP::H16ISPDevice::EnableStatsFEThumbnailMask(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), v9);
    if (v10)
    {
      int v7 = v10;
      uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
      {
        uint64_t v11 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        ActivateMetadataOutputInFrameReceiver();
      }
      goto LABEL_16;
    }
    if (*(unsigned char *)(a1 + 3017))
    {
      int v43 = AddMetadataOutputBufferPoolToFrameReceiver(*(void *)(a1 + 136), (uint64_t *)(a1 + 2936));
      if (v43)
      {
        int v7 = v43;
        long long v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
        {
          long long v44 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
        }
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
          ActivateMetadataOutputInFrameReceiver();
        }
        goto LABEL_16;
      }
      BOOL v47 = *(unsigned char *)(a1 + 3017) != 0;
    }
    else
    {
      BOOL v47 = 0;
    }
    int v48 = H16ISP::H16ISPDevice::EnableDesGenFlow2Features(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), v47);
    if (v48)
    {
      int v7 = v48;
      long long v49 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
      {
        long long v49 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v49;
      }
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
        ActivateMetadataOutputInFrameReceiver();
      }
      goto LABEL_16;
    }
  }
LABEL_20:
  uint64_t v13 = 0;
  while (!*(unsigned char *)(a1 + v13 + 3113)
       || !AddMetadataOutputBufferPoolToFrameReceiver(*(void *)(a1 + 136), (uint64_t *)(a1 + v13 + 3032)))
  {
    v13 += 96;
    if (v13 == 384) {
      goto LABEL_29;
    }
  }
  uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
  {
    uint64_t v14 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    ActivateMetadataOutputInFrameReceiver();
  }
LABEL_29:
  int v15 = H16ISP::H16ISPDevice::EnableSemanticMasks(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), *(unsigned char *)(a1 + 3113), *(unsigned char *)(a1 + 3305), *(unsigned char *)(a1 + 3209), *(unsigned char *)(a1 + 3401));
  if (v15)
  {
    int v16 = v15;
    uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
    {
      uint64_t v17 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v56 = "ActivateANSTSemanticOutputInFrameReceiver";
      __int16 v57 = 1024;
      int v58 = v16;
      _os_log_error_impl(&dword_24680F000, v17, OS_LOG_TYPE_ERROR, "%s - EnableSemanticMasks failed with ret=0x%08x\n", buf, 0x12u);
      uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    }
    if (v17 == v5)
    {
      uint64_t v17 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v56 = "ActivateMetadataOutputInFrameReceiver";
      __int16 v57 = 1024;
      int v58 = v16;
      _os_log_impl(&dword_24680F000, v17, OS_LOG_TYPE_DEFAULT, "%s - Failed activating ANST Semantic output ret=0x%08x\n", buf, 0x12u);
    }
  }
  if (*(unsigned char *)(a1 + 2797))
  {
    if (*(unsigned char *)(a1 + 3497))
    {
      int v18 = AddMetadataOutputBufferPoolToFrameReceiver(*(void *)(a1 + 136), (uint64_t *)(a1 + 3416));
      if (v18)
      {
        int v19 = v18;
        uint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
        {
          uint64_t v20 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          ActivateMetadataOutputInFrameReceiver();
        }
LABEL_52:
        int v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
        {
          int v24 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315394;
          __int16 v56 = "ActivateMetadataOutputInFrameReceiver";
          __int16 v57 = 1024;
          int v58 = v19;
          _os_log_impl(&dword_24680F000, v24, OS_LOG_TYPE_DEFAULT, "%s - Failed activating HITH output ret=0x%08x\n", buf, 0x12u);
        }
        goto LABEL_56;
      }
      char v21 = *(unsigned char *)(a1 + 3497) != 0;
    }
    else
    {
      char v21 = 0;
    }
    int v22 = H16ISP::H16ISPDevice::EnableHITH(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), v21);
    if (!v22) {
      goto LABEL_56;
    }
    int v19 = v22;
    uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
    {
      uint64_t v23 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      ActivateMetadataOutputInFrameReceiver();
    }
    goto LABEL_52;
  }
LABEL_56:
  if (!*(unsigned char *)(a1 + 2798)) {
    goto LABEL_74;
  }
  if (*(unsigned char *)(a1 + 3593))
  {
    int v25 = AddMetadataOutputBufferPoolToFrameReceiver(*(void *)(a1 + 136), (uint64_t *)(a1 + 3512));
    if (v25)
    {
      int v26 = v25;
      uint64_t v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
      {
        uint64_t v27 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        ActivateMetadataOutputInFrameReceiver();
      }
      goto LABEL_70;
    }
    char v28 = *(unsigned char *)(a1 + 3593) != 0;
  }
  else
  {
    char v28 = 0;
  }
  int v29 = H16ISP::H16ISPDevice::EnableANSTThumbnail(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), v28);
  if (!v29) {
    goto LABEL_74;
  }
  int v26 = v29;
  uint64_t v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
  {
    uint64_t v30 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v30;
  }
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
    ActivateMetadataOutputInFrameReceiver();
  }
LABEL_70:
  uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
  {
    uint64_t v31 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315394;
    __int16 v56 = "ActivateMetadataOutputInFrameReceiver";
    __int16 v57 = 1024;
    int v58 = v26;
    _os_log_impl(&dword_24680F000, v31, OS_LOG_TYPE_DEFAULT, "%s - Failed to activate ANST Thumbnail output ret=0x%08x\n", buf, 0x12u);
  }
LABEL_74:
  if (!isExclaveAlgoEnabled((unsigned char *)a1)) {
    return;
  }
  unsigned int v32 = *(_DWORD *)(a1 + 48);
  unsigned int v33 = *(_DWORD *)(a1 + 168);
  if (v32 < v33) {
    unsigned int v33 = 0;
  }
  unsigned int v34 = v32 - v33;
  bzero(v50, 0xD4uLL);
  bzero(buf, 0x190uLL);
  int CameraConfig = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * v34 + 16), v50, buf);
  if (CameraConfig)
  {
    int v36 = CameraConfig;
    int v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
    {
      int v37 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v37;
    }
    if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_100;
    }
    *(_DWORD *)int v51 = 136315138;
    long long v52 = "ActivateExclaveOutputInFrameReceiver";
    __int16 v38 = "%s - Failed to get camera config\n";
    int v39 = v37;
    uint32_t v40 = 12;
  }
  else
  {
    int v41 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 38, v59);
    if (v41)
    {
      int v36 = v41;
      int v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
      {
        int v42 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v42;
      }
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_100;
      }
      *(_DWORD *)int v51 = 136315394;
      long long v52 = "ActivateExclaveOutputInFrameReceiver";
      __int16 v53 = 1024;
      int v54 = v36;
      __int16 v38 = "%s - Unable to add exclave metadata buffer pool to frame receiver res=0x%08X\n\n";
    }
    else
    {
      int v45 = H16ISP::H16ISPDevice::SetExclaveOutputMetadata(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 1);
      if (!v45) {
        return;
      }
      int v36 = v45;
      int v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
      {
        int v42 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v42;
      }
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_100;
      }
      *(_DWORD *)int v51 = 136315394;
      long long v52 = "ActivateExclaveOutputInFrameReceiver";
      __int16 v53 = 1024;
      int v54 = v36;
      __int16 v38 = "%s - Failed enabling exclave output metadata res=0x%08x\n";
    }
    int v39 = v42;
    uint32_t v40 = 18;
  }
  _os_log_impl(&dword_24680F000, v39, OS_LOG_TYPE_DEFAULT, v38, v51, v40);
LABEL_100:
  long long v46 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
  {
    long long v46 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v46;
  }
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315394;
    __int16 v56 = "ActivateMetadataOutputInFrameReceiver";
    __int16 v57 = 1024;
    int v58 = v36;
    _os_log_impl(&dword_24680F000, v46, OS_LOG_TYPE_DEFAULT, "%s - Failed adding Exclave buffer pool ret=0x%08x\n", buf, 0x12u);
  }
}

void DeactivatePrimaryScalerOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 136))
  {
    if (H16ISP::H16ISPDevice::EnableScalerOutput(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 0, 0))
    {
      uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v3 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        DeactivatePrimaryScalerOutputInFrameReceiver();
      }
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = a1 + 832;
      do
      {
        int v6 = *(__CVBuffer **)(v5 + v4);
        if (v6)
        {
          CVPixelBufferRelease(v6);
          *(void *)(v5 + v4) = 0;
        }
        v4 += 8;
      }
      while (v4 != 32);
      if (H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 0))
      {
        int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v7 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          DeactivatePrimaryScalerOutputInFrameReceiver();
        }
      }
      else
      {
        uint64_t v8 = *(__CVPixelBufferPool **)(a1 + 824);
        if (v8)
        {
          CVPixelBufferPoolRelease(v8);
          *(void *)(a1 + 824) = 0;
        }
      }
    }
  }
}

void DeactivateSecondaryScalerOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 136))
  {
    if (H16ISP::H16ISPDevice::EnableScalerOutput(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 1, 0))
    {
      uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v3 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        DeactivateSecondaryScalerOutputInFrameReceiver();
      }
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = a1 + 1032;
      do
      {
        int v6 = *(__CVBuffer **)(v5 + v4);
        if (v6)
        {
          CVPixelBufferRelease(v6);
          *(void *)(v5 + v4) = 0;
        }
        v4 += 8;
      }
      while (v4 != 32);
      if (H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 10))
      {
        int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v7 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          DeactivateSecondaryScalerOutputInFrameReceiver();
        }
      }
      else
      {
        uint64_t v8 = *(__CVPixelBufferPool **)(a1 + 1024);
        if (v8)
        {
          CVPixelBufferPoolRelease(v8);
          *(void *)(a1 + 1024) = 0;
        }
      }
    }
  }
}

void DeactivateIntermediateTapOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 136))
  {
    if (H16ISP::H16ISPDevice::EnableScalerOutput(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 2, 0))
    {
      uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v3 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        DeactivatePrimaryScalerOutputInFrameReceiver();
      }
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = a1 + 1232;
      do
      {
        int v6 = *(__CVBuffer **)(v5 + v4);
        if (v6)
        {
          CVPixelBufferRelease(v6);
          *(void *)(v5 + v4) = 0;
        }
        v4 += 8;
      }
      while (v4 != 32);
      if (H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 6))
      {
        int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v7 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          DeactivateIntermediateTapOutputInFrameReceiver();
        }
      }
      else
      {
        uint64_t v8 = *(__CVPixelBufferPool **)(a1 + 1224);
        if (v8)
        {
          CVPixelBufferPoolRelease(v8);
          *(void *)(a1 + 1224) = 0;
        }
      }
    }
  }
}

void DeactivateStillImageOutputInFrameReceiver(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2 && !*(_DWORD *)(a1 + 76))
  {
    if (*(unsigned char *)(a1 + 2280) || !H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(v2, 7))
    {
      if (*(unsigned char *)(a1 + 1280) && *(unsigned char *)(a1 + 1400)
        || *(unsigned char *)(a1 + 1480) && *(unsigned char *)(a1 + 1600)
        || *(unsigned char *)(a1 + 2280) && *(unsigned char *)(a1 + 2400)
        || !H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 20)
        || !H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 20))
      {
        if (*(unsigned char *)(a1 + 1280) && *(_DWORD *)(a1 + 1404)
          || *(unsigned char *)(a1 + 1480) && *(_DWORD *)(a1 + 1604)
          || *(unsigned char *)(a1 + 2280) && *(_DWORD *)(a1 + 2404)
          || !H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 22)
          || !H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 22))
        {
          if (*(unsigned char *)(a1 + 1280) && *(_DWORD *)(a1 + 1408)
            || *(unsigned char *)(a1 + 1480) && *(_DWORD *)(a1 + 1608)
            || *(unsigned char *)(a1 + 2280) && *(_DWORD *)(a1 + 2408)
            || !H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 23)
            || !H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 23))
          {
            int v6 = *(__CVPixelBufferPool **)(a1 + 1424);
            if (v6)
            {
              CVPixelBufferPoolRelease(v6);
              *(void *)(a1 + 1424) = 0;
            }
            uint64_t v7 = 0;
            uint64_t v8 = a1 + 1432;
            do
            {
              unsigned __int8 v9 = *(__CVBuffer **)(v8 + v7);
              if (v9)
              {
                CVPixelBufferRelease(v9);
                *(void *)(v8 + v7) = 0;
              }
              v7 += 8;
            }
            while (v7 != 32);
          }
          else
          {
            uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v5 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
            }
            if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
              DeactivateStillImageOutputInFrameReceiver();
            }
          }
        }
        else
        {
          uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v4 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
            DeactivateStillImageOutputInFrameReceiver();
          }
        }
      }
      else
      {
        uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v3 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          DeactivateStillImageOutputInFrameReceiver();
        }
      }
    }
    else
    {
      int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        DeactivateStillImageOutputInFrameReceiver();
      }
    }
  }
}

void DeactivateStillImageIntermediateTapOutputInFrameReceiver(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2 && !*(_DWORD *)(a1 + 76))
  {
    if (H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(v2, 9))
    {
      uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v3 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        DeactivateStillImageIntermediateTapOutputInFrameReceiver();
      }
    }
    else if (*(unsigned char *)(a1 + 1280) && *(unsigned char *)(a1 + 1400) {
           || *(unsigned char *)(a1 + 1480) && *(unsigned char *)(a1 + 1600)
    }
           || *(unsigned char *)(a1 + 2280) && *(unsigned char *)(a1 + 2400)
           || !H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 20)
           || !H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 20))
    {
      if (*(unsigned char *)(a1 + 1280) && *(_DWORD *)(a1 + 1404)
        || *(unsigned char *)(a1 + 1480) && *(_DWORD *)(a1 + 1604)
        || *(unsigned char *)(a1 + 2280) && *(_DWORD *)(a1 + 2404)
        || !H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 22)
        || !H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 22))
      {
        if ((!*(unsigned char *)(a1 + 1280) || !*(_DWORD *)(a1 + 1408))
          && (!*(unsigned char *)(a1 + 1480) || !*(_DWORD *)(a1 + 1608))
          && (!*(unsigned char *)(a1 + 2280) || !*(_DWORD *)(a1 + 2408))
          && H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 23)
          && H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 23))
        {
          int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v6 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
          }
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            DeactivateStillImageIntermediateTapOutputInFrameReceiver();
          }
        }
      }
      else
      {
        uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v5 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          DeactivateStillImageIntermediateTapOutputInFrameReceiver();
        }
      }
    }
    else
    {
      uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v4 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        DeactivateStillImageIntermediateTapOutputInFrameReceiver();
      }
    }
  }
}

void DeactivateStillImageRawOutputInFrameReceiver(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (!v2 || *(_DWORD *)(a1 + 76)) {
    return;
  }
  if (*(unsigned char *)(a1 + 1280)) {
    goto LABEL_50;
  }
  if (H16ISP::H16ISPFrameReceiver::HasPool(v2, 7)
    && H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 7))
  {
    uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v3 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      DeactivateStillImageRawOutputInFrameReceiver();
    }
    return;
  }
  if (*(unsigned char *)(a1 + 1280))
  {
LABEL_50:
    if (*(unsigned char *)(a1 + 1400)) {
      goto LABEL_49;
    }
  }
  if (*(unsigned char *)(a1 + 1480) && *(unsigned char *)(a1 + 1600)
    || *(unsigned char *)(a1 + 2280) && *(unsigned char *)(a1 + 2400)
    || !H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 20)
    || !H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 20))
  {
LABEL_49:
    if (*(unsigned char *)(a1 + 1280) && *(_DWORD *)(a1 + 1404)
      || *(unsigned char *)(a1 + 1480) && *(_DWORD *)(a1 + 1604)
      || *(unsigned char *)(a1 + 2280) && *(_DWORD *)(a1 + 2404)
      || !H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 22)
      || !H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 22))
    {
      if ((!*(unsigned char *)(a1 + 1280) || !*(_DWORD *)(a1 + 1408))
        && (!*(unsigned char *)(a1 + 1480) || !*(_DWORD *)(a1 + 1608))
        && (!*(unsigned char *)(a1 + 2280) || !*(_DWORD *)(a1 + 2408))
        && H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 23)
        && H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 23))
      {
        int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v6 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          DeactivateStillImageRawOutputInFrameReceiver();
        }
      }
    }
    else
    {
      uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v5 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        DeactivateStillImageRawOutputInFrameReceiver();
      }
    }
  }
  else
  {
    uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      DeactivateStillImageRawOutputInFrameReceiver();
    }
  }
}

void DeactivateMetadataOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 136)) {
    return;
  }
  *(unsigned char *)(a1 + 2921) = 0;
  *(unsigned char *)(a1 + 3017) = 0;
  uint64_t v4 = &_os_log_internal;
  if (*(unsigned char *)(a1 + 2795))
  {
    if (H16ISP::H16ISPDevice::EnableStatsFEThumbnailMask(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 0))
    {
      uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
      {
        uint64_t v5 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        DeactivateMetadataOutputInFrameReceiver();
      }
    }
    RemoveMetadataOutputBufferPoolFromFrameReceiver(*(void **)(a1 + 136), (uint64_t *)(a1 + 2840));
    if (H16ISP::H16ISPDevice::EnableDesGenFlow2Features(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 0))
    {
      int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
      {
        int v6 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        DeactivateMetadataOutputInFrameReceiver();
      }
    }
    RemoveMetadataOutputBufferPoolFromFrameReceiver(*(void **)(a1 + 136), (uint64_t *)(a1 + 2936));
  }
  if (H16ISP::H16ISPDevice::EnableHITH(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 0))
  {
    uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
    {
      uint64_t v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      DeactivateMetadataOutputInFrameReceiver();
    }
  }
  if (*(unsigned char *)(a1 + 3497))
  {
    RemoveMetadataOutputBufferPoolFromFrameReceiver(*(void **)(a1 + 136), (uint64_t *)(a1 + 3416));
    *(unsigned char *)(a1 + 3497) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 3504);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 3504) = 0;
  }
  if (H16ISP::H16ISPDevice::EnableSemanticMasks(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 0, 0, 0, 0))
  {
    unsigned __int8 v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
    {
      unsigned __int8 v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      DeactivateMetadataOutputInFrameReceiver();
    }
  }
  for (uint64_t i = 0; i != 384; i += 96)
  {
    uint64_t v11 = a1 + i;
    if (*(unsigned char *)(a1 + i + 3113))
    {
      RemoveMetadataOutputBufferPoolFromFrameReceiver(*(void **)(a1 + 136), (uint64_t *)(v11 + 3032));
      *(unsigned char *)(v11 + 3113) = 0;
    }
  }
  if (H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 38))
  {
    int v12 = H16ISP::H16ISPDevice::SetExclaveOutputMetadata(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 0);
    if (v12)
    {
      int v13 = v12;
      uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
      {
        uint64_t v14 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
      }
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_49;
      }
      int v23 = 136315394;
      int v24 = "DeactivateExclaveOutputFromFrameReceiver";
      __int16 v25 = 1024;
      int v26 = v13;
      int v15 = "%s - Unable to disable Exclave output in fw, res=0x%08x\n";
    }
    else
    {
      int v19 = H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a1 + 136), 38);
      if (!v19) {
        goto LABEL_49;
      }
      int v20 = v19;
      uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
      {
        uint64_t v14 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
      }
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_49;
      }
      int v23 = 136315394;
      int v24 = "DeactivateExclaveOutputFromFrameReceiver";
      __int16 v25 = 1024;
      int v26 = v20;
      int v15 = "%s - failed to remove Exclave buffer pool res=0x%08x\n";
    }
    uint64_t v17 = v14;
    uint32_t v18 = 18;
  }
  else
  {
    int v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
    {
      int v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    int v23 = 136315138;
    int v24 = "DeactivateExclaveOutputFromFrameReceiver";
    int v15 = "%s - Cannot find Exclave buffer pool type in the frame receiver list of buffer pools\n";
    uint64_t v17 = v16;
    uint32_t v18 = 12;
  }
  _os_log_impl(&dword_24680F000, v17, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v23, v18);
LABEL_49:
  if (H16ISP::H16ISPDevice::EnableANSTThumbnail(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 0))
  {
    char v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
    {
      char v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      DeactivateMetadataOutputInFrameReceiver();
    }
  }
  if (*(unsigned char *)(a1 + 3593))
  {
    RemoveMetadataOutputBufferPoolFromFrameReceiver(*(void **)(a1 + 136), (uint64_t *)(a1 + 3512));
    *(unsigned char *)(a1 + 3593) = 0;
  }
  int v22 = *(const void **)(a1 + 3600);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 3600) = 0;
  }
}

void DeactivatePointCloudOutputInFrameReceiver(uint64_t a1)
{
  *(void *)uint64_t v5 = 0;
  uint64_t v2 = *(void **)(a1 + 4240);
  if (v2)
  {
    int Node = H16ISP::H16ISPFilterGraphManager::GetNode(v2, 11, (H16ISP::H16ISPFilterGraphNode **)v5);
    uint64_t v4 = *(void *)v5;
    if (!Node)
    {
      H16ISP::H16ISPJasperDepthNode::setProcessingMode(*(uint64_t *)v5, 0);
      uint64_t v4 = *(void *)v5;
    }
    if (*(void *)(a1 + 3664))
    {
      if (v4) {
        H16ISP::H16ISPJasperDepthNode::setBufferPool(v4, 0);
      }
    }
  }
}

uint64_t AddSushiRawPoolToFrameReceiver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v10 = 0xFFFF;
  H16ISP::H16ISPDevice::GetPoolInfo(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 20, &v10, 0);
  uint64_t v6 = v5;
  if (!v5)
  {
    uint64_t v6 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 20, v10);
    uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = *(_DWORD *)(a3 + 64);
      *(_DWORD *)int buf = 67109632;
      int v12 = v8;
      __int16 v13 = 1024;
      int v14 = 0;
      __int16 v15 = 1024;
      int v16 = v6;
      _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "AddSushiRawPoolToFrameReceiver - size=%d,prime=%d (res=0x%08X)\n\n", buf, 0x14u);
    }
  }
  return v6;
}

uint64_t AddSashimiRawPoolToFrameReceiver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v10 = 0;
  H16ISP::H16ISPDevice::GetPoolInfo(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 22, &v10, 0);
  uint64_t v6 = v5;
  if (!v5)
  {
    uint64_t v6 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 22, v10);
    uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = *(_DWORD *)(a3 + 64);
      *(_DWORD *)int buf = 67109376;
      int v12 = v8;
      __int16 v13 = 1024;
      int v14 = v6;
      _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "AddSashimiRawPoolToFrameReceiver - RAW pool size=%d (res=0x%08X)\n\n", buf, 0xEu);
    }
  }
  return v6;
}

uint64_t AddFocusPixelDataToFrameReceiver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v10 = 0;
  int v11 = 0xFFFF;
  H16ISP::H16ISPDevice::GetPoolInfo(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 23, &v11, &v10);
  uint64_t v6 = v5;
  if (!v5)
  {
    uint64_t v6 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 23, v11);
    uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = *(_DWORD *)(a3 + 64);
      *(_DWORD *)int buf = 67109376;
      int v13 = v8;
      __int16 v14 = 1024;
      int v15 = v6;
      _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "AddFocusPixelDataToFrameReceiver - prime=%d (res=0x%08X)\n\n", buf, 0xEu);
    }
  }
  return v6;
}

uint64_t AddSplitPixelDataToFrameReceiver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a3 + 96))
  {
    uint64_t v5 = (int *)(a1 + 132);
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    unsigned int v7 = *(_DWORD *)(a1 + 168);
    if (v6 < v7) {
      unsigned int v7 = 0;
    }
    uint64_t CameraConfig = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), v6 - v7, v24, v30);
    if (CameraConfig)
    {
      uint64_t v9 = CameraConfig;
      int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        AddSplitPixelDataToFrameReceiver();
      }
    }
    else if (v25)
    {
      H16ISP::H16ISPDevice::GetPoolInfoExtended(*(H16ISP::H16ISPDevice **)(a2 + 24), *v5, 26, &v23);
      if (v20)
      {
        uint64_t v9 = v20;
        char v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          char v21 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          AddSplitPixelDataToFrameReceiver();
        }
      }
      else
      {
        uint64_t v9 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 26, WORD1(v23));
        int v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v22 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 136315394;
          uint64_t v27 = "AddSplitPixelDataToFrameReceiver";
          __int16 v28 = 1024;
          int v29 = v9;
          _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_INFO, "%s - addBufferPoolToFrameReceiver return error 0x%X\n", buf, 0x12u);
        }
      }
    }
    else
    {
      return 3758097095;
    }
  }
  else
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    uint64_t v9 = 3758097122;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      AddSplitPixelDataToFrameReceiver(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  return v9;
}

uint64_t StartExclaveStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v219 = *MEMORY[0x263EF8340];
  uint64_t v7 = v3 + 132;
  unsigned int v6 = *(_DWORD *)(v3 + 132);
  unsigned int v8 = *(_DWORD *)(v7 - 84);
  unsigned int v9 = *(_DWORD *)(v7 + 36);
  if (v8 < v9) {
    unsigned int v9 = 0;
  }
  uint64_t CameraConfig = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(v2 + 24), v6, *(_DWORD *)(*(void *)(v7 + 28) + 120 * (v8 - v9) + 16), v173, &v214);
  if (CameraConfig)
  {
    uint64_t DistortionData = CameraConfig;
    uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v12 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      StartExclaveStreams(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    return DistortionData;
  }
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(v5 + 24), *(_DWORD *)v7, 1718186595);
  uint64_t v22 = *(void *)(v5 + 24);
  if (!isSensorType)
  {
    if (!H16ISP::H16ISPDevice::isSensorType(v22, *(_DWORD *)v7, 1718775412)
      && !H16ISP::H16ISPDevice::isSensorType(*(void *)(v5 + 24), *(_DWORD *)v7, 1718776695))
    {
      uint64_t DistortionData = 0;
      LOBYTE(v75) = 1;
LABEL_66:
      int64_t v76 = *(NSObject **)(v5 + 256);
      if (v76)
      {
        int v77 = *(_DWORD *)(v4 + 132);
        v192[0] = MEMORY[0x263EF8330];
        v192[1] = 0x40000000;
        v192[2] = ___ZL38ExclavePreferenceRegisterNotificationsP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke;
        *(void *)&v193[0].f64[0] = &__block_descriptor_tmp_0;
        *(void *)&v193[0].f64[1] = v5;
        LODWORD(v193[1].f64[0]) = v77;
        if (notify_register_dispatch("com.apple.isp.preference-notify", (int *)(v4 + 57700), v76, v192))
        {
          unint64_t v78 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
          {
            unint64_t v78 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v78;
          }
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
            StartExclaveStreams();
          }
        }
      }
      else
      {
        unsigned int v81 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          unsigned int v81 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v81;
        }
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
          StartExclaveStreams(v81, v82, v83, v84, v85, v86, v87, v88);
        }
      }
      if (DistortionData) {
        char v89 = 1;
      }
      else {
        char v89 = v75;
      }
      if (v89) {
        return DistortionData;
      }
      long long v90 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        long long v90 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v90;
      }
      uint64_t DistortionData = 0;
      if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT)) {
        return DistortionData;
      }
      unsigned int v91 = *(_DWORD *)v7;
      LODWORD(v192[0]) = 136315394;
      *(void *)((char *)v192 + 4) = "StartExclaveStreams";
      WORD2(v192[1]) = 1024;
      *(_DWORD *)((char *)&v192[1] + 6) = v91;
      _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]: Successfully started EK channel %d \n", (uint8_t *)v192, 0x12u);
      return 0;
    }
    uint64_t v38 = *(void *)(*(void *)(v5 + 24) + 184);
    int v165 = *(_DWORD *)(v4 + 132);
    int v168 = *(_DWORD *)(v4 + 2704);
    kdebug_trace();
    int v39 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchfaceconfigset();
    kdebug_trace();
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(*(H16ISP::H16ISPDevice **)(v5 + 24)))
    {
      uint32_t v40 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint32_t v40 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v40;
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v192[0]) = 67109376;
        HIDWORD(v192[0]) = v165;
        LOWORD(v192[1]) = 1024;
        *(_DWORD *)((char *)&v192[1] + 2) = v168;
        _os_log_impl(&dword_24680F000, v40, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Sent RGB FaceKit config! channel=%u, numtrackedfaces=%u\n", (uint8_t *)v192, 0xEu);
      }
    }
    if (v39)
    {
      int v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        int v41 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v41;
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        StartExclaveStreams(v41, v42, v43, v44, v45, v46, v47, v48);
      }
    }
    uint64_t v49 = ConfigureExclaveAutoExposure(v5, v4);
    if (v49)
    {
      uint64_t DistortionData = v49;
      uint64_t v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v50 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v50;
      }
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      return DistortionData;
    }
    bzero(v192, 0x1118uLL);
    uint64_t DistortionData = H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v5 + 24), *(_DWORD *)v7, 0, v192);
    if (DistortionData)
    {
      int v59 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        int v59 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v59;
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
        StartExclaveStreams(v59, v60, v61, v62, v63, v64, v65, v66);
      }
    }
    float FrontCameraOffsetFromDisplayCenter = H16ISP::H16ISPDevice::GetFrontCameraOffsetFromDisplayCenter(*(H16ISP::H16ISPDevice **)(v5 + 24));
    unsigned int v178 = *(_DWORD *)v7;
    LODWORD(v179) = v177;
    BYTE4(v179) = v216 != 0;
    *((void *)&v179 + 1) = __PAIR64__(v174, v215);
    LOWORD(v180) = v176;
    HIWORD(v180) = WORD2(v176);
    *(_OWORD *)v181 = v217;
    v181[16] = v218;
    *(void *)&v182[0] = __PAIR64__(v68, LODWORD(FrontCameraOffsetFromDisplayCenter));
    DWORD2(v182[0]) = v69;
    *(void *)((char *)v182 + 12) = 0;
    DWORD1(v182[1]) = 0;
    v70.f64[0] = v193[139].f64[0];
    v70.f64[1] = v193[140].f64[0];
    *(float32x4_t *)((char *)&v182[1] + 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v193[138]), v70);
    *(float32x4_t *)((char *)&v182[2] + 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)&v193[140] + 8)), v193[142]);
    *(float *)&unsigned int v71 = v193[143].f64[0];
    *(float *)v70.f64 = v193[139].f64[1];
    *((void *)&v182[3] + 1) = __PAIR64__(LODWORD(v70.f64[0]), v71);
    *(float *)&unsigned int v72 = v193[141].f64[1];
    *(float *)v70.f64 = v193[143].f64[1];
    *(void *)&v182[4] = __PAIR64__(LODWORD(v70.f64[0]), v72);
    DWORD2(v182[4]) = v175;
    kdebug_trace();
    int v73 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchinfoset2(v38, (uint64_t)&v178);
    kdebug_trace();
    if (v73)
    {
      uint64_t v74 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v74 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v74;
      }
      if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
        return 3758097087;
      }
LABEL_64:
      StartExclaveStreams();
      return 3758097087;
    }
    int v172 = 0;
    if (*(unsigned char *)(v4 + 2696))
    {
      if (*(unsigned char *)(v4 + 2699)) {
        int v80 = 6;
      }
      else {
        int v80 = 2;
      }
      int v172 = v80;
    }
    else
    {
      int v80 = 0;
    }
    if (*(unsigned char *)(v4 + 2716))
    {
LABEL_94:
      v80 |= 8u;
      int v172 = v80;
    }
    else
    {
      uint64_t v104 = 0;
      while (v104 != 8)
      {
        if (*(unsigned __int8 *)(v4 + 2717 + v104++))
        {
          if ((unint64_t)(v104 - 1) <= 7) {
            goto LABEL_94;
          }
          break;
        }
      }
    }
    if (*(unsigned char *)(v4 + 2713))
    {
      v80 |= 0x10u;
      int v172 = v80;
    }
    if (v5)
    {
      uint64_t v92 = *(void *)(v5 + 24);
      if (v92)
      {
        if (*(unsigned char *)(*(void *)(v92 + 4384) + 96 * *(unsigned int *)(v4 + 132) + 100))
        {
          v80 |= 0x40u;
          int v172 = v80;
        }
      }
    }
    long long v93 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    uint64_t v94 = &_os_log_internal;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      long long v93 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v93;
      int v80 = v172;
    }
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v186 = 136315394;
      *(void *)unsigned int v187 = "StartExclaveStreams";
      *(_WORD *)&v187[8] = 1024;
      *(_DWORD *)int v188 = v80;
      _os_log_impl(&dword_24680F000, v93, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]: Enabling Exclave algo bitmask: %d\n", (uint8_t *)&v186, 0x12u);
    }
    kdebug_trace();
    int v95 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchalgoenable();
    kdebug_trace();
    if (v95)
    {
      CFNumberRef v96 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v94)
      {
        CFNumberRef v96 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v96;
      }
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
        StartExclaveStreams(v96, v97, v98, v99, v100, v101, v102, v103);
      }
      return 3758097087;
    }
    isExclaveAlgoEnabled((unsigned char *)v4);
    kdebug_trace();
    int v106 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchisconcurrent();
    kdebug_trace();
    if (v106)
    {
      int v107 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v94)
      {
        int v107 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v107;
      }
      uint64_t DistortionData = 3758097087;
      if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR)) {
        StartExclaveStreams(v107, v108, v109, v110, v111, v112, v113, v114);
      }
      return DistortionData;
    }
    unsigned int v152 = *(_DWORD *)(v4 + 2728);
    if (!v152)
    {
      unsigned int v152 = *(float *)(v4 + 52);
      *(_DWORD *)(v4 + 2728) = v152;
    }
    if (*(unsigned char *)(v4 + 2716))
    {
LABEL_166:
      if (v152)
      {
        kdebug_trace();
        int v153 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchsetperceptionframerate();
        kdebug_trace();
        if (v153)
        {
          CFIndex v154 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v94)
          {
            CFIndex v154 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v154;
          }
          if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR)) {
            StartExclaveStreams();
          }
          return DistortionData;
        }
        float v157 = (float)v152;
        uint64_t v158 = H16ISP::H16ISPDevice::SetExclaveTargetFrameRate(*(H16ISP::H16ISPDevice **)(v5 + 24), *(_DWORD *)v7, (float)v152);
        uint64_t v159 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (v158)
        {
          uint64_t DistortionData = v158;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v94)
          {
            uint64_t v159 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v159;
          }
          if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
          {
            unsigned int v160 = *(_DWORD *)v7;
            unsigned int v186 = 136315906;
            *(void *)unsigned int v187 = "StartExclaveStreams";
            *(_WORD *)&v187[8] = 1024;
            *(_DWORD *)int v188 = v160;
            *(_WORD *)&v188[4] = 2048;
            double v189 = v157;
            __int16 v190 = 1024;
            int v191 = DistortionData;
            _os_log_error_impl(&dword_24680F000, v159, OS_LOG_TYPE_ERROR, "%s - failed to set target frame rate channel=%u framerate=%f ret=0x%08x\n", (uint8_t *)&v186, 0x22u);
          }
          return DistortionData;
        }
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v94)
        {
          uint64_t v159 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v159;
        }
        if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
        {
          int v161 = *(_DWORD *)(v4 + 2728);
          int v162 = *(_DWORD *)(v4 + 132);
          unsigned int v186 = 67109376;
          *(_DWORD *)unsigned int v187 = v161;
          *(_WORD *)&v187[4] = 1024;
          *(_DWORD *)&v187[6] = v162;
          _os_log_impl(&dword_24680F000, v159, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Sent RGB Perception Framerate=%d channel=%d\n", (uint8_t *)&v186, 0xEu);
        }
        uint64_t DistortionData = 0;
      }
    }
    else
    {
      uint64_t v155 = 0;
      while (v155 != 8)
      {
        if (*(unsigned __int8 *)(v4 + 2717 + v155++))
        {
          if ((unint64_t)(v155 - 1) <= 7) {
            goto LABEL_166;
          }
          break;
        }
      }
    }
    ExclavePreferenceApplyValues(v5, *(_DWORD *)v7);
    unsigned int v169 = *(_DWORD *)v7;
    uint64_t v171 = v176;
    kdebug_trace();
    int v75 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchstart();
    kdebug_trace();
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(*(H16ISP::H16ISPDevice **)(v5 + 24)))
    {
      v163 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v94)
      {
        v163 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v163;
      }
      if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v186 = 67109632;
        *(_DWORD *)unsigned int v187 = v169;
        *(_WORD *)&v187[4] = 1024;
        *(_DWORD *)&v187[6] = v171;
        *(_WORD *)int v188 = 1024;
        *(_DWORD *)&v188[2] = HIDWORD(v171);
        _os_log_impl(&dword_24680F000, v163, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Sent RGB cmd start! channel=%u, width=%u, height=%u\n", (uint8_t *)&v186, 0x14u);
      }
    }
    if (v75)
    {
      uint64_t v164 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v94)
      {
        uint64_t v164 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v164;
      }
      uint64_t DistortionData = 3758097087;
      if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR)) {
        StartExclaveStreams();
      }
      return DistortionData;
    }
LABEL_198:
    *(_DWORD *)(*(void *)(v5 + 24) + 96) = *(_DWORD *)v7;
    goto LABEL_66;
  }
  uint64_t v23 = *(void *)(v22 + 136);
  int v24 = 2 * *(unsigned __int8 *)(v4 + 2698);
  int v170 = v24;
  if (*(unsigned char *)(v4 + 2697))
  {
    if (*(unsigned char *)(v4 + 2792)) {
      int v25 = 16;
    }
    else {
      int v25 = 8;
    }
    v24 |= v25;
    int v170 = v24;
  }
  if (*(unsigned char *)(v4 + 2696))
  {
    v24 |= 4u;
    int v170 = v24;
  }
  if (*(unsigned char *)(v4 + 2713)) {
    int v170 = v24 | 0x20;
  }
  int v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  uint64_t v27 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    int v26 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v26;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v192[0]) = 136315394;
    *(void *)((char *)v192 + 4) = "StartExclaveStreams";
    WORD2(v192[1]) = 1024;
    *(_DWORD *)((char *)&v192[1] + 6) = v170;
    _os_log_impl(&dword_24680F000, v26, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]: Enabling Exclave algo bitmask: %d\n", (uint8_t *)v192, 0x12u);
  }
  kdebug_trace();
  int v28 = ispirexclavekitmodule_ispirexclavekit_sendcmdchalgoenable();
  kdebug_trace();
  if (H16ISP::H16ISPDevice::enabledExclaveDebug(*(H16ISP::H16ISPDevice **)(v5 + 24)))
  {
    int v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
    {
      int v29 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v29;
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v192[0]) = 0;
      _os_log_impl(&dword_24680F000, v29, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Sent IR Algorithm enable cmd!\n", (uint8_t *)v192, 2u);
    }
  }
  if (v28)
  {
    uint64_t v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
    {
      uint64_t v30 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v30;
    }
    uint64_t DistortionData = 3758097087;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      StartExclaveStreams(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    return DistortionData;
  }
  uint64_t v58 = ConfigureExclaveAutoExposure(v5, v4);
  if (!v58)
  {
    if (H16ISP::H16ISPDevice::isSensorType(*(void *)(v5 + 24), *(_DWORD *)v7, 1718186595))
    {
      uint64_t PDPConfig = H16ISP::H16ISPDevice::ISP_GetPDPConfig(*(void *)(v5 + 24), *(_DWORD *)v7, &v178);
      if (PDPConfig)
      {
        uint64_t DistortionData = PDPConfig;
LABEL_126:
        unsigned int v117 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
        {
          unsigned int v117 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v117;
        }
        if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
          StartExclaveStreams(v117, v118, v119, v120, v121, v122, v123, v124);
        }
        return DistortionData;
      }
      LODWORD(v192[0]) = *(_DWORD *)v7;
      BYTE4(v192[0]) = BYTE1(v178);
      int v194 = v180;
      *(_OWORD *)&v192[1] = v179;
      int v195 = *(_DWORD *)v181;
      uint64_t v210 = v183;
      int v211 = v184;
      long long v196 = *(_OWORD *)&v181[4];
      long long v197 = v182[0];
      long long v201 = v182[4];
      long long v200 = v182[3];
      long long v199 = v182[2];
      long long v198 = v182[1];
      long long v205 = v182[8];
      long long v202 = v182[5];
      long long v203 = v182[6];
      long long v204 = v182[7];
      long long v209 = v182[12];
      long long v208 = v182[11];
      long long v207 = v182[10];
      long long v206 = v182[9];
      memcpy(v193, v185, sizeof(v193));
      uint64_t v115 = *(void *)(*(void *)(v5 + 24) + 136);
      LOBYTE(v186) = 0;
      if (ispirexclavekitmodule_ispirexclavekit_sendcmdchpdpset(v115, (uint64_t)v192))
      {
        uint64_t v116 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
        {
          uint64_t v116 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v116;
        }
        if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR)) {
          StartExclaveStreams();
        }
        uint64_t DistortionData = 3758097087;
        goto LABEL_126;
      }
    }
    bzero(v192, 0x3370uLL);
    if (!getPCECalib(*(void *)(v5 + 24), (uint64_t)v192))
    {
      v131 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
      {
        v131 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v131;
      }
      if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR)) {
        StartExclaveStreams(v131, v132, v133, v134, v135, v136, v137, v138);
      }
      return 0;
    }
    float v125 = H16ISP::H16ISPDevice::GetFrontCameraOffsetFromDisplayCenter(*(H16ISP::H16ISPDevice **)(v5 + 24));
    unsigned int v178 = *(_DWORD *)v7;
    LODWORD(v179) = v177;
    BYTE4(v179) = v216 != 0;
    *((void *)&v179 + 1) = __PAIR64__(v174, v215);
    LOWORD(v180) = v176;
    HIWORD(v180) = WORD2(v176);
    *(_OWORD *)v181 = v217;
    v181[16] = v218;
    *(void *)&v182[0] = __PAIR64__(v126, LODWORD(v125));
    DWORD2(v182[0]) = v127;
    *(float32x2_t *)((char *)v182 + 12) = vcvt_f32_f64(v212);
    float v128 = v213;
    *((float *)&v182[1] + 1) = v128;
    *(_OWORD *)((char *)&v182[1] + 8) = xmmword_2469DA7D0;
    *(_OWORD *)((char *)&v182[2] + 8) = xmmword_2469DA7D0;
    *(_OWORD *)((char *)&v182[3] + 8) = xmmword_2469DA7D0;
    DWORD2(v182[4]) = v175;
    kdebug_trace();
    int v129 = ispirexclavekitmodule_ispirexclavekit_sendcmdchinfoset2(v23, (uint64_t)&v178);
    kdebug_trace();
    if (v129)
    {
      BOOL v130 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
      {
        BOOL v130 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v130;
      }
      if (!os_log_type_enabled(v130, OS_LOG_TYPE_ERROR)) {
        return 3758097087;
      }
      goto LABEL_64;
    }
    if (*(unsigned char *)(v4 + 2697))
    {
      int v139 = *(unsigned __int8 *)(v4 + 2793);
      unsigned int v186 = 0;
      *(_DWORD *)unsigned int v187 = v139;
      kdebug_trace();
      ispirexclavekitmodule_ispirexclavekit_sendcmdadsettings(v23, &v186);
      kdebug_trace();
      v140 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
      {
        v140 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v140;
      }
      if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR)) {
        StartExclaveStreams();
      }
      int v141 = 1;
      unsigned int v186 = 1;
      if (*(unsigned char *)(v4 + 2792)) {
        int v141 = *(unsigned __int8 *)(v4 + 2794);
      }
      *(_DWORD *)unsigned int v187 = v141;
      kdebug_trace();
      ispirexclavekitmodule_ispirexclavekit_sendcmdadsettings(v23, &v186);
      kdebug_trace();
      BOOL v142 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
      {
        BOOL v142 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v142;
      }
      if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR)) {
        StartExclaveStreams(v142, v143, v144, v145, v146, v147, v148, v149);
      }
    }
    ExclavePreferenceApplyValues(v5, *(_DWORD *)v7);
    unsigned int v166 = *(_DWORD *)v7;
    uint64_t v167 = v176;
    kdebug_trace();
    uint64_t DistortionData = ispirexclavekitmodule_ispirexclavekit_sendcmdchstart();
    kdebug_trace();
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(*(H16ISP::H16ISPDevice **)(v5 + 24)))
    {
      CFBooleanRef v150 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
      {
        CFBooleanRef v150 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v150;
      }
      if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v186 = 67109632;
        *(_DWORD *)unsigned int v187 = v166;
        *(_WORD *)&v187[4] = 1024;
        *(_DWORD *)&v187[6] = v167;
        *(_WORD *)int v188 = 1024;
        *(_DWORD *)&v188[2] = HIDWORD(v167);
        _os_log_impl(&dword_24680F000, v150, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Sent IR ISP Mgr start! channel=%u, width=%u, height=%u\n", (uint8_t *)&v186, 0x14u);
      }
    }
    if (DistortionData)
    {
      v151 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
      {
        v151 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v151;
      }
      if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR)) {
        StartExclaveStreams();
      }
      return 3758097087;
    }
    LOBYTE(v75) = 0;
    goto LABEL_198;
  }
  uint64_t DistortionData = v58;
  uint64_t v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v27)
  {
    uint64_t v50 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v50;
  }
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
LABEL_49:
  }
    StartExclaveStreams(v50, v51, v52, v53, v54, v55, v56, v57);
  return DistortionData;
}

uint64_t H16ISPSecureMetadataReceivedProc(void *a1, unint64_t a2, const __CFDictionary *a3)
{
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 304));
  if (a3)
  {
    CFRetain(a3);
    memset(&v9, 0, sizeof(v9));
    int64_t v5 = FigHostTimeToNanoseconds();
    CMTimeMake(&v9, v5, 1000000000);
    uint64_t v6 = *(void *)(DerivedStorage + 2688);
    CMTime v8 = v9;
    (*(void (**)(uint64_t, const __CFDictionary *, CMTime *))(v6 + 16))(v6, a3, &v8);
    CFRelease(a3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 304));
  return 0;
}

uint64_t ConfigureExclaveAutoExposure(uint64_t a1, uint64_t a2)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  BOOL v4 = isExclaveAlgoEnabled((unsigned char *)a2);
  int64_t v5 = &_os_log_internal;
  if (v4 && !*(unsigned char *)(a2 + 2700))
  {
    uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v17 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v17;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      ConfigureExclaveAutoExposure(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 48);
  unsigned int v7 = *(_DWORD *)(a2 + 168);
  if (v6 < v7) {
    unsigned int v7 = 0;
  }
  unsigned int v8 = v6 - v7;
  CMTime v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    CMTime v9 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * v8 + 16);
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "ConfigureExclaveAutoExposure";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v10;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "%s - AE PresetIndex:%u / SensorConfigIndex:%u\n", buf, 0x18u);
  }
  int v79 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v66 = 0u;
  memset(buf, 0, sizeof(buf));
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  int v11 = (unsigned int *)(a2 + 132);
  uint64_t CameraConfig = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a1 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * v8 + 16), &v66, buf);
  if (CameraConfig)
  {
    uint64_t v13 = CameraConfig;
    uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
    {
      uint64_t v14 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      ConfigureExclaveAutoExposure();
    }
    return v13;
  }
  memset(__dst, 0, 60);
  Exclaveuint64_t CameraConfig = H16ISP::H16ISPDevice::GetExclaveCameraConfig(*(void *)(a1 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * v8 + 16), __dst);
  if (ExclaveCameraConfig)
  {
    uint64_t v13 = ExclaveCameraConfig;
    uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
    {
      uint64_t v16 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      ConfigureExclaveAutoExposure();
    }
    return v13;
  }
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *v11, 1718186595);
  uint64_t v27 = *(H16ISP::H16ISPDevice **)(a1 + 24);
  uint64_t v28 = *v11;
  if (!isSensorType)
  {
    if (!H16ISP::H16ISPDevice::isSensorType((uint64_t)v27, v28, 1718775412)
      && !H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *v11, 1718776695))
    {
      return 0;
    }
    H16ISP::H16ISPDevice::SetMinimumFrameRate(*(H16ISP::H16ISPDevice **)(a1 + 24), *(unsigned int *)(a2 + 132));
    H16ISP::H16ISPDevice::SetMaximumFrameRate(*(H16ISP::H16ISPDevice **)(a1 + 24), *(unsigned int *)(a2 + 132));
    if (isprgbexclavekitmodule_isprgbexclavekit_sendcmdexclavechcameraconfigset())
    {
      uint64_t v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
      {
        uint64_t v32 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v32;
      }
      uint64_t v13 = 3758097087;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      return v13;
    }
    int v38 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchaeinitsettinggetv2();
    if (v38 || v59 == 2)
    {
      uint64_t v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
      {
        uint64_t v42 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v42;
      }
      uint64_t v13 = 3758097087;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        unsigned int v43 = *v11;
        *(_DWORD *)uint64_t v85 = 136315906;
        *(void *)uint64_t v86 = "ConfigureExclaveAutoExposure";
        *(_WORD *)&v86[8] = 1024;
        *(_DWORD *)uint64_t v87 = v59;
        *(_WORD *)&v87[4] = 1024;
        *(_DWORD *)&v87[6] = v38;
        *(_WORD *)&v87[10] = 1024;
        LODWORD(v88) = v43;
        _os_log_error_impl(&dword_24680F000, v42, OS_LOG_TYPE_ERROR, "%s - [Exclaves]: Cannot get initial AE settings, ipcRet %d tberr %d ch %d\n", v85, 0x1Eu);
      }
      return v13;
    }
    if (v59 == 1)
    {
      int v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
      {
        int v39 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v39;
      }
      uint64_t v13 = 0;
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        return v13;
      }
      unsigned int v40 = *v11;
      *(_DWORD *)uint64_t v85 = 67109376;
      *(_DWORD *)uint64_t v86 = v59;
      *(_WORD *)&v86[4] = 1024;
      *(_DWORD *)&v86[6] = v40;
      uint64_t v35 = "[Exclaves]: Skip configuring initial AE settings, ipcRet %d ch %d\n";
      uint64_t v36 = v39;
      uint32_t v37 = 14;
      goto LABEL_57;
    }
    *(void *)&long long v80 = v52;
    *((void *)&v80 + 1) = v53;
    *(void *)&long long v48 = v54;
    *((void *)&v48 + 1) = v56;
    uint64_t v83 = v58;
    long long v81 = v48;
    long long v82 = v57;
    int v84 = v55;
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(*(H16ISP::H16ISPDevice **)(a1 + 24)))
    {
      uint64_t v49 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
      {
        uint64_t v49 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v49;
      }
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v50 = *v11;
        *(_DWORD *)uint64_t v85 = 134220288;
        *(void *)uint64_t v86 = *((void *)&v80 + 1);
        *(_WORD *)&v86[8] = 1024;
        *(_DWORD *)uint64_t v87 = DWORD2(v81);
        *(_WORD *)&v87[4] = 1024;
        *(_DWORD *)&v87[6] = HIDWORD(v81);
        *(_WORD *)&v87[10] = 2048;
        double v88 = *(double *)&v80;
        __int16 v89 = 1024;
        int v90 = v81;
        __int16 v91 = 1024;
        int v92 = DWORD1(v81);
        __int16 v93 = 1024;
        int v94 = v84;
        __int16 v95 = 1024;
        int v96 = v82;
        __int16 v97 = 1024;
        int v98 = DWORD1(v82);
        __int16 v99 = 1024;
        unsigned int v100 = v50;
        _os_log_impl(&dword_24680F000, v49, OS_LOG_TYPE_DEFAULT, "[Exclaves]: AE init settings aeCounter %llu Exp %u ExpTime %d ReqID %llu SensorAG %d SensorDG %d IspDG %d VFrameSize %d VFrameTime %d Channel=%u\n", v85, 0x46u);
        uint64_t v49 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      }
      if (v49 == v5)
      {
        uint64_t v49 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v49;
      }
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v85 = 67109888;
        *(_DWORD *)uint64_t v86 = HIDWORD(v83);
        *(_WORD *)&v86[4] = 1024;
        *(_DWORD *)&v86[6] = v83;
        *(_WORD *)uint64_t v87 = 2048;
        *(double *)&v87[2] = *((float *)&v82 + 2);
        *(_WORD *)&v87[10] = 2048;
        double v88 = *((float *)&v82 + 3);
        _os_log_impl(&dword_24680F000, v49, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Projector Settings : ProbeMode %d StrobeMode %d StrobePulseWidth %f StrobeCurrentPercentage %f\n", v85, 0x22u);
      }
    }
    uint64_t v13 = H16ISP::H16ISPDevice::SetExclaveAEConfig(*(H16ISP::H16ISPDevice **)(a1 + 24), *v11, &v80);
    if (!v13) {
      return v13;
    }
    uint64_t v51 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
    {
      uint64_t v51 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v51;
    }
    if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      return v13;
    }
LABEL_79:
    ConfigureExclaveAutoExposure();
    return v13;
  }
  H16ISP::H16ISPDevice::SetMinimumFrameRate(v27, v28);
  H16ISP::H16ISPDevice::SetMaximumFrameRate(*(H16ISP::H16ISPDevice **)(a1 + 24), *(unsigned int *)(a2 + 132));
  int v60 = *(_DWORD *)(a2 + 132);
  unsigned __int16 v61 = WORD2(__dst[0]);
  int v62 = DWORD2(__dst[0]);
  unsigned __int16 v63 = WORD6(v66);
  unsigned __int16 v64 = v67;
  kdebug_trace();
  int v29 = ispirexclavekitmodule_ispirexclavekit_sendcmdexclavechcameraconfigset();
  kdebug_trace();
  if (H16ISP::H16ISPDevice::enabledExclaveDebug(*(H16ISP::H16ISPDevice **)(a1 + 24)))
  {
    uint64_t v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
    {
      uint64_t v30 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v30;
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v85 = 67110144;
      *(_DWORD *)uint64_t v86 = v60;
      *(_WORD *)&v86[4] = 1024;
      *(_DWORD *)&v86[6] = v61;
      *(_WORD *)uint64_t v87 = 1024;
      *(_DWORD *)&v87[2] = v62;
      *(_WORD *)&v87[6] = 1024;
      *(_DWORD *)&v87[8] = v63;
      LOWORD(v88) = 1024;
      *(_DWORD *)((char *)&v88 + 2) = v64;
      _os_log_impl(&dword_24680F000, v30, OS_LOG_TYPE_DEFAULT, "[Exclaves]: AE Configuration Set: channel=%u, totalH=%u, totalvmin=%u, max framerate=%u, min framerate=%u\n", v85, 0x20u);
    }
  }
  if (!v29)
  {
    kdebug_trace();
    int v33 = ispirexclavekitmodule_ispirexclavekit_sendcmdchaeinitsettinggetv2();
    kdebug_trace();
    if (v33 || v59 == 2)
    {
      int v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
      {
        int v41 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v41;
      }
      uint64_t v13 = 3758097087;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        ConfigureExclaveAutoExposure();
      }
      return v13;
    }
    if (v59 == 1)
    {
      uint64_t v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
      {
        uint64_t v34 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v34;
      }
      uint64_t v13 = 0;
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
        return v13;
      }
      *(_DWORD *)uint64_t v85 = 67109120;
      *(_DWORD *)uint64_t v86 = v59;
      uint64_t v35 = "[Exclaves]: Skip configuring initial AE settings, ipcRet %d\n";
      uint64_t v36 = v34;
      uint32_t v37 = 8;
LABEL_57:
      _os_log_impl(&dword_24680F000, v36, OS_LOG_TYPE_DEFAULT, v35, v85, v37);
      return 0;
    }
    *(void *)&long long v80 = v52;
    *((void *)&v80 + 1) = v53;
    *(void *)&long long v44 = v54;
    *((void *)&v44 + 1) = v56;
    uint64_t v83 = v58;
    long long v81 = v44;
    long long v82 = v57;
    int v84 = v55;
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(*(H16ISP::H16ISPDevice **)(a1 + 24)))
    {
      uint64_t v45 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
      {
        uint64_t v45 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v45;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v46 = *v11;
        *(_DWORD *)uint64_t v85 = 134220288;
        *(void *)uint64_t v86 = *((void *)&v80 + 1);
        *(_WORD *)&v86[8] = 1024;
        *(_DWORD *)uint64_t v87 = DWORD2(v81);
        *(_WORD *)&v87[4] = 1024;
        *(_DWORD *)&v87[6] = HIDWORD(v81);
        *(_WORD *)&v87[10] = 2048;
        double v88 = *(double *)&v80;
        __int16 v89 = 1024;
        int v90 = v81;
        __int16 v91 = 1024;
        int v92 = DWORD1(v81);
        __int16 v93 = 1024;
        int v94 = v84;
        __int16 v95 = 1024;
        int v96 = v82;
        __int16 v97 = 1024;
        int v98 = DWORD1(v82);
        __int16 v99 = 1024;
        unsigned int v100 = v46;
        _os_log_impl(&dword_24680F000, v45, OS_LOG_TYPE_DEFAULT, "[Exclaves]: AE init settings aeCounter %llu Exp %u ExpTime %d ReqID %llu SensorAG %d SensorDG %d IspDG %d VFrameSize %d VFrameTime %d Channel=%u\n", v85, 0x46u);
        uint64_t v45 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      }
      if (v45 == v5)
      {
        uint64_t v45 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v45;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v85 = 67109888;
        *(_DWORD *)uint64_t v86 = HIDWORD(v83);
        *(_WORD *)&v86[4] = 1024;
        *(_DWORD *)&v86[6] = v83;
        *(_WORD *)uint64_t v87 = 2048;
        *(double *)&v87[2] = *((float *)&v82 + 2);
        *(_WORD *)&v87[10] = 2048;
        double v88 = *((float *)&v82 + 3);
        _os_log_impl(&dword_24680F000, v45, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Projector Settings : ProbeMode %d StrobeMode %d StrobePulseWidth %f StrobeCurrentPercentage %f\n", v85, 0x22u);
      }
    }
    uint64_t v13 = H16ISP::H16ISPDevice::SetExclaveAEConfig(*(H16ISP::H16ISPDevice **)(a1 + 24), *v11, &v80);
    if (!v13) {
      return v13;
    }
    uint64_t v47 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
    {
      uint64_t v47 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v47;
    }
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
      return v13;
    }
    goto LABEL_79;
  }
  uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
  {
    uint64_t v31 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v31;
  }
  uint64_t v13 = 3758097087;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
LABEL_35:
  }
    ConfigureExclaveAutoExposure();
  return v13;
}

void ExclavePreferenceApplyValues(uint64_t a1, unsigned int a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 4384) + 96 * a2 + 16);
  switch(v4)
  {
    case 1718186595:
      int64_t v5 = "FrontInfrared";
      break;
    case 1718775412:
      int64_t v5 = "Front";
      break;
    case 1718776695:
      int64_t v5 = "FrontSuperWide";
      break;
    default:
LABEL_33:
      uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v23 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v23;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        ExclavePreferenceApplyValues();
      }
      goto LABEL_43;
  }
  CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"ISPDebug%sPropertyWrite", v5);
  if (!v6) {
    goto LABEL_33;
  }
  CFStringRef v7 = v6;
  CFArrayRef v8 = (const __CFArray *)CFPreferencesCopyValue(v6, @"com.apple.coremedia", (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  if (v8)
  {
    CFArrayRef v9 = v8;
    CFTypeID v10 = CFGetTypeID(v8);
    if (v10 == CFArrayGetTypeID())
    {
      if (CFArrayGetCount(v9) >= 1)
      {
        CFIndex v11 = 0;
        uint64_t v12 = &_os_log_internal;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, v11);
          unsigned int valuePtr = 0;
          CFTypeID v14 = CFGetTypeID(ValueAtIndex);
          if (v14 != CFStringGetTypeID() && v14 != CFNumberGetTypeID()) {
            break;
          }
          if (v14 == CFNumberGetTypeID())
          {
            if (!CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, &valuePtr)) {
              break;
            }
            IntCFNumberRef Value = valuePtr;
          }
          else if (CFStringHasPrefix(ValueAtIndex, @"0x"))
          {
            CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
            if (!CFStringGetCString(ValueAtIndex, buffer, 256, SystemEncoding)) {
              break;
            }
            IntCFNumberRef Value = strtoul(buffer, 0, 16);
          }
          else
          {
            IntCFNumberRef Value = CFStringGetIntValue(ValueAtIndex);
          }
          unsigned int v21 = HIWORD(IntValue);
          unsigned int valuePtr = (unsigned __int16)IntValue;
          if (!H16ISP::H16ISPDevice::WritePropertyValueExclave(*(H16ISP::H16ISPDevice **)(a1 + 24), a2, HIWORD(IntValue), (unsigned __int16)IntValue))goto LABEL_29; {
          uint64_t v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
          }
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v12)
          {
            uint64_t v22 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v22;
          }
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            goto LABEL_29;
          }
          *(_DWORD *)buffer = 136315906;
          uint64_t v42 = "ExclavePreferenceApplyGenericValues";
          __int16 v43 = 1024;
          *(_DWORD *)long long v44 = a2;
          *(_WORD *)&v44[4] = 1024;
          *(_DWORD *)&v44[6] = v21;
          __int16 v45 = 1024;
          unsigned int v46 = valuePtr;
          uint64_t v18 = v22;
          uint64_t v19 = "%s - channel=%u failed to set property=0x%08x value=%u\n";
          uint32_t v20 = 30;
LABEL_32:
          _os_log_error_impl(&dword_24680F000, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)buffer, v20);
LABEL_29:
          if (++v11 >= CFArrayGetCount(v9)) {
            goto LABEL_41;
          }
        }
        uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v12)
        {
          uint64_t v17 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v17;
        }
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          goto LABEL_29;
        }
        *(_DWORD *)buffer = 136315394;
        uint64_t v42 = "ExclavePreferenceApplyGenericValues";
        __int16 v43 = 2048;
        *(void *)long long v44 = v11;
        uint64_t v18 = v17;
        uint64_t v19 = "%s - bad array value at idx=%ld\n";
        uint32_t v20 = 22;
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v24 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v24;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        ExclavePreferenceApplyValues(v24, v25, v26, v27, v28, v29, v30, v31);
      }
    }
LABEL_41:
    CFRelease(v9);
  }
  CFRelease(v7);
LABEL_43:
  unsigned int v32 = H16ISP::H16ISPGetCFPreferenceNumber(@"ISPDebugFiltration", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
  if (v32 != -1
    && H16ISP::H16ISPDevice::WritePropertyValueExclave(*(H16ISP::H16ISPDevice **)(a1 + 24), a2, 0x1Bu, v32))
  {
    int v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v33 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v33;
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      ExclavePreferenceApplyValues();
    }
  }
  unsigned int v34 = H16ISP::H16ISPGetCFPreferenceNumber(@"ISPDebugDumpSkipFrame", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
  if (v34 != -1
    && H16ISP::H16ISPDevice::WritePropertyValueExclave(*(H16ISP::H16ISPDevice **)(a1 + 24), a2, 0xDu, v34))
  {
    uint64_t v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v35 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v35;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      ExclavePreferenceApplyValues();
    }
  }
  unsigned int v36 = H16ISP::H16ISPGetCFPreferenceNumber(@"ISPDebugYUVDumpCtl", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
  if (v36 != -1
    && H16ISP::H16ISPDevice::WritePropertyValueExclave(*(H16ISP::H16ISPDevice **)(a1 + 24), a2, 4u, v36))
  {
    uint32_t v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint32_t v37 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v37;
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      ExclavePreferenceApplyValues();
    }
  }
  unsigned int v38 = H16ISP::H16ISPGetCFPreferenceNumber(@"ISPDebugReplayCtl", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
  if (v38 != -1
    && H16ISP::H16ISPDevice::WritePropertyValueExclave(*(H16ISP::H16ISPDevice **)(a1 + 24), a2, 3u, v38))
  {
    int v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v39 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v39;
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      ExclavePreferenceApplyValues();
    }
  }
}

void ___ZL38ExclavePreferenceRegisterNotificationsP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke(uint64_t a1)
{
}

uint64_t AddMetadataOutputBufferPoolToFrameReceiver(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (v4 == CVPixelBufferPoolGetTypeID())
  {
    uint64_t v56 = 0;
    uint64_t valuePtr = 0;
    int64_t v5 = (__CVPixelBufferPool *)a2[1];
    if (v5)
    {
      CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v5);
      if (PixelBufferAttributes)
      {
        CFDictionaryRef v7 = PixelBufferAttributes;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F04240]);
        CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x263F04118]);
        CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
        CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x263F04078]);
        CFNumberGetValue(v10, kCFNumberIntType, (char *)&v56 + 4);
        CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x263F04198]);
        CFNumberGetValue(v11, kCFNumberIntType, &v56);
        uint64_t v12 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(a1, *((unsigned int *)a2 + 15), *((unsigned __int16 *)a2 + 28));
        if (v12)
        {
          uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v13 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
            AddMetadataOutputBufferPoolToFrameReceiver(v13, v14, v15, v16, v17, v18, v19, v20);
          }
        }
      }
      else
      {
        uint64_t v47 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v47 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v47;
        }
        uint64_t v12 = 3758097136;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
          AddMetadataOutputBufferPoolToFrameReceiver(v47, v48, v49, v50, v51, v52, v53, v54);
        }
      }
    }
    else
    {
      uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v31 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
      }
      uint64_t v12 = 3758097095;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        AddMetadataOutputBufferPoolToFrameReceiver(v31, v32, v33, v34, v35, v36, v37, v38);
      }
    }
  }
  else
  {
    uint64_t v21 = a2[1];
    if (v21)
    {
      MinBufferunsigned __int16 Count = CVDataBufferPoolGetMinBufferCount();
      uint64_t v12 = H16ISP::H16ISPFrameReceiver::addDataBufferPoolToFrameReceiver(a1, v21, MinBufferCount, *((_DWORD *)a2 + 15));
      if (v12)
      {
        uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v23 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          AddMetadataOutputBufferPoolToFrameReceiver(v23, v24, v25, v26, v27, v28, v29, v30);
        }
      }
    }
    else
    {
      int v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v39 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v39;
      }
      uint64_t v12 = 3758097095;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        AddMetadataOutputBufferPoolToFrameReceiver(v39, v40, v41, v42, v43, v44, v45, v46);
      }
    }
  }
  return v12;
}

void RemoveMetadataOutputBufferPoolFromFrameReceiver(void *a1, uint64_t *a2)
{
  int v3 = *((_DWORD *)a2 + 15);
  uint64_t v4 = *a2;
  if (v4 == CVPixelBufferPoolGetTypeID())
  {
    if (!H16ISP::H16ISPFrameReceiver::HasPool(a1, v3)
      || !H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)a1, v3))
    {
      return;
    }
  }
  else if (!H16ISP::H16ISPFrameReceiver::removeDataBufferPoolFromFrameReceiver((uint64_t)a1, v3))
  {
    return;
  }
  int64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int64_t v5 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    RemoveMetadataOutputBufferPoolFromFrameReceiver();
  }
}

void HandleSecureStreamOutputConfig(const __CFDictionary *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  CFDictionaryRef v46 = 0;
  CFDictionaryRef theDict = 0;
  value = 0;
  CFDictionaryRef v45 = 0;
  CFNumberRef v42 = 0;
  CFArrayRef theArray = 0;
  CFNumberRef v41 = 0;
  CFDictionaryRef v5 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2E908]);
  if (v5)
  {
    CFDictionaryRef v6 = v5;
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFDictionaryGetTypeID())
    {
      int ValueIfPresent = CFDictionaryGetValueIfPresent(v6, @"SecureIRBaselineStreamingEnabled_Private", (const void **)&value);
      CFNumberRef v9 = (CFTypeRef *)MEMORY[0x263EFFB40];
      if (ValueIfPresent) {
        *(unsigned char *)(a2 + 2715) = CFEqual((CFTypeRef)*MEMORY[0x263EFFB40], value) != 0;
      }
      if (CFDictionaryGetValueIfPresent(v6, @"SecureRGBBaselineStreamingEnabled_Private", (const void **)&value)) {
        *(unsigned char *)(a2 + 2715) = CFEqual(*v9, value) != 0;
      }
      if (CFDictionaryGetValueIfPresent(v6, (const void *)*MEMORY[0x263F2CCF8], (const void **)&value)) {
        *(unsigned char *)(a2 + 2696) = CFEqual(*v9, value) != 0;
      }
      if (!CFDictionaryGetValueIfPresent(v6, (const void *)*MEMORY[0x263F2CCF0], (const void **)&theDict)) {
        goto LABEL_17;
      }
      char v10 = *(unsigned char *)(a2 + 2696);
      if (!v10) {
        goto LABEL_18;
      }
      if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2E208], (const void **)&value)) {
        char v10 = CFEqual(*v9, value) != 0;
      }
      else {
LABEL_17:
      }
        char v10 = 0;
LABEL_18:
      *(unsigned char *)(a2 + 2697) = v10;
      if (*(unsigned char *)(a2 + 2696)
        && H16ISP::H16ISPDevice::isSensorType(*(void *)(a3 + 24), *(_DWORD *)(a2 + 132), 1718186595))
      {
        *(unsigned char *)(a2 + 2697) = 1;
      }
      if (CFDictionaryGetValueIfPresent(v6, (const void *)*MEMORY[0x263F2CCE8], (const void **)&value)) {
        *(unsigned char *)(a2 + 2698) = CFEqual(*v9, value) != 0;
      }
      if (CFDictionaryGetValueIfPresent(v6, (const void *)*MEMORY[0x263F2CD18], (const void **)&value))
      {
        int v12 = CFEqual(*v9, value);
        *(unsigned char *)(a2 + 2699) = v12 != 0;
        if (v12)
        {
          *(unsigned char *)(a2 + 2696) = 1;
          if (CFDictionaryGetValueIfPresent(v6, (const void *)*MEMORY[0x263F2CD10], (const void **)&v46))
          {
            *(void *)int buf = 0;
            CFNumberRef number = 0;
            if (CFDictionaryGetValueIfPresent(v46, (const void *)*MEMORY[0x263F2CA00], (const void **)buf)) {
              CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, (void *)(a2 + 2704));
            }
            else {
              *(_DWORD *)(a2 + 2704) = 1;
            }
            if (CFDictionaryGetValueIfPresent(v46, (const void *)*MEMORY[0x263F2C9F8], (const void **)&number)) {
              CFNumberGetValue(number, kCFNumberFloatType, (void *)(a2 + 2708));
            }
            else {
              *(_DWORD *)(a2 + 2708) = 0;
            }
          }
        }
      }
      if (CFDictionaryGetValueIfPresent(v6, (const void *)*MEMORY[0x263F2CCA0], (const void **)&value))
      {
        CFTypeRef v13 = *v9;
        int v14 = CFEqual(*v9, value);
        BOOL v15 = v14 != 0;
        if (v14)
        {
          *(_WORD *)(a2 + 2696) = 257;
          *(unsigned char *)(a2 + 2792) = v15;
          if (CFDictionaryGetValueIfPresent(v6, (const void *)*MEMORY[0x263F2CC98], (const void **)&v45))
          {
            CFNumberRef v16 = (const __CFNumber *)*MEMORY[0x263EFFB38];
            *(void *)int buf = *MEMORY[0x263EFFB38];
            if (CFDictionaryGetValueIfPresent(v45, (const void *)*MEMORY[0x263F2CB70], (const void **)buf)) {
              *(unsigned char *)(a2 + 2793) = CFEqual(v13, *(CFTypeRef *)buf) != 0;
            }
            CFNumberRef number = v16;
            if (CFDictionaryGetValueIfPresent(v45, (const void *)*MEMORY[0x263F2CB78], (const void **)&number)) {
              *(unsigned char *)(a2 + 2794) = CFEqual(v13, number) != 0;
            }
          }
        }
        else
        {
          *(unsigned char *)(a2 + 2792) = v15;
        }
      }
      if (theDict)
      {
        CFNumberRef number = (CFNumberRef)*MEMORY[0x263EFFB38];
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2E598], (const void **)&number)) {
          *(unsigned char *)(a2 + 2712) = CFEqual(*v9, number) != 0;
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2E5A8], (const void **)&theArray)
          && CFArrayGetCount(theArray) >= 1)
        {
          CFIndex v17 = 0;
          uint64_t v18 = (const void *)*MEMORY[0x263F2C958];
          uint64_t v19 = (const void *)*MEMORY[0x263F2C970];
          uint64_t v20 = (const void *)*MEMORY[0x263F2C950];
          uint64_t v21 = (const void *)*MEMORY[0x263F2C930];
          CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x263F2C938];
          CFTypeRef v38 = (CFTypeRef)*MEMORY[0x263F2C940];
          CFTypeRef v37 = (CFTypeRef)*MEMORY[0x263F2C948];
          CFTypeRef v36 = (CFTypeRef)*MEMORY[0x263F2C960];
          CFTypeRef v35 = (CFTypeRef)*MEMORY[0x263F2C968];
          do
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v17);
            if (CFEqual(ValueAtIndex, v18) || CFEqual(ValueAtIndex, v19))
            {
              *(unsigned char *)(a2 + 2716) = 1;
            }
            else if (CFEqual(ValueAtIndex, v20))
            {
              *(unsigned char *)(a2 + 2717) = 1;
            }
            else if (CFEqual(ValueAtIndex, v21))
            {
              *(unsigned char *)(a2 + 2718) = 1;
            }
            else if (CFEqual(ValueAtIndex, cf2))
            {
              *(unsigned char *)(a2 + 2719) = 1;
            }
            else if (CFEqual(ValueAtIndex, v38))
            {
              *(unsigned char *)(a2 + 2720) = 1;
            }
            else if (CFEqual(ValueAtIndex, v37))
            {
              *(unsigned char *)(a2 + 2721) = 1;
            }
            else if (CFEqual(ValueAtIndex, v36))
            {
              *(unsigned char *)(a2 + 2722) = 1;
            }
            else if (CFEqual(ValueAtIndex, v35))
            {
              *(_WORD *)(a2 + 2723) = 257;
            }
            else
            {
              uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
              {
                uint64_t v23 = os_log_create("com.apple.isp", "exclaves");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v23;
              }
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                HandleSecureStreamOutputConfig(buf, &buf[4], v23);
              }
            }
            ++v17;
          }
          while (v17 < CFArrayGetCount(theArray));
        }
        CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2E5A0], (const void **)&v42);
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2E5B0], (const void **)&v42)) {
          CFNumberGetValue(v42, kCFNumberIntType, (void *)(a2 + 2728));
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D798], (const void **)&v41)) {
          CFNumberGetValue(v41, kCFNumberIntType, (void *)(a2 + 2736));
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D7B0], (const void **)&v41)) {
          CFNumberGetValue(v41, kCFNumberIntType, (void *)(a2 + 2744));
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D7A8], (const void **)&v41)) {
          CFNumberGetValue(v41, kCFNumberIntType, (void *)(a2 + 2740));
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D790], (const void **)&v41)) {
          CFNumberGetValue(v41, kCFNumberIntType, (void *)(a2 + 2748));
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D7A0], (const void **)&v41)) {
          CFNumberGetValue(v41, kCFNumberIntType, (void *)(a2 + 2752));
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D780], (const void **)&v41)) {
          CFNumberGetValue(v41, kCFNumberIntType, (void *)(a2 + 2756));
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D788], (const void **)&v41)) {
          CFNumberGetValue(v41, kCFNumberIntType, (void *)(a2 + 2760));
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D770], (const void **)&v41)) {
          CFNumberGetValue(v41, kCFNumberIntType, (void *)(a2 + 2764));
        }
        if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F2D778], (const void **)&v41)) {
          CFNumberGetValue(v41, kCFNumberIntType, (void *)(a2 + 2768));
        }
      }
      if (CFDictionaryGetValueIfPresent(v6, (const void *)*MEMORY[0x263F2CCB8], (const void **)&value) && value) {
        *(unsigned char *)(a2 + 2713) = CFBooleanGetValue((CFBooleanRef)value) != 0;
      }
      if (!*(unsigned char *)(a2 + 57696) && isExclaveAlgoEnabled((unsigned char *)a2))
      {
        if (H16ISP::H16ISPDevice::PowerOnExclaveKit(*(H16ISP::H16ISPDevice **)(a3 + 24), *(_DWORD *)(a2 + 132), 0))
        {
          uint64_t v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
          {
            uint64_t v24 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v24;
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            HandleSecureStreamOutputConfig(v24, v25, v26, v27, v28, v29, v30, v31);
          }
        }
        else
        {
          *(unsigned char *)(a2 + 57696) = 1;
        }
      }
      if (!isExclaveAlgoEnabled((unsigned char *)a2))
      {
        uint64_t v32 = *(H16ISP::H16ISPFilterGraphManager **)(a2 + 4472);
        if (v32)
        {
          H16ISP::H16ISPFilterGraphManager::Deactivate(v32);
          uint64_t v33 = *(void *)(a2 + 4472);
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
          }
          *(void *)(a2 + 4472) = 0;
        }
        if (StopExclaveStreams(a3, a2))
        {
          uint64_t v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
          {
            uint64_t v34 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v34;
          }
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            HandleSecureStreamOutputConfig();
          }
        }
      }
      return;
    }
  }
  CFNumberRef v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    CFNumberRef v11 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v11;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = "HandleSecureStreamOutputConfig";
    _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_DEFAULT, "%s - Secure Metadata configuration prop invalid\n", buf, 0xCu);
  }
}

uint64_t PrimaryAndSecondaryScalerConfigUpdateAtomically(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD v64[2] = *MEMORY[0x263EF8340];
  uint64_t v63 = 0;
  long long v62 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  *(_OWORD *)int v55 = 0u;
  if (*(void *)(a2 + 136))
  {
    uint64_t v5 = 0;
    v64[0] = a3;
    v64[1] = a4;
    *(_WORD *)&unsigned __int8 v55[4] = 2847;
    *(_DWORD *)&v55[8] = *(_DWORD *)(a2 + 132);
    *(_DWORD *)&v55[12] = 1;
    for (char i = 1; ; char i = 0)
    {
      char v7 = i;
      int v8 = (i & 1) != 0 ? 0 : 10;
      uint64_t v9 = v64[v5];
      Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(a2 + 136), v8);
      if (!BufferPool) {
        break;
      }
      CFNumberRef v11 = (_DWORD *)BufferPool;
      int v12 = (int32x2_t *)&v55[16 * v5];
      unsigned __int16 v12[2] = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v9 + 32)));
      v12[3] = vmovn_s64((int64x2_t)vcvtq_u64_f64(*(float64x2_t *)(v9 + 48)));
      CFTypeRef v13 = &v55[44 * v5];
      *((_DWORD *)v13 + 12) = *(_DWORD *)(v9 + 20);
      LODWORD(v12) = *(_DWORD *)(v9 + 24);
      *((_DWORD *)v13 + 13) = v12;
      *((_DWORD *)v13 + 22) = *(_DWORD *)(BufferPool + 24);
      int v14 = *(_DWORD *)(BufferPool + 28);
      *((_DWORD *)v13 + 19) = -(int)v12 & 0xF;
      *((_DWORD *)v13 + 20) = v14;
      *((_DWORD *)v13 + 14) = ColorRangeForOutput(a2, v9);
      int FrameFormatMetaInfo = H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(v9 + 16), &v53);
      int v16 = 0;
      int v17 = 0;
      if (FrameFormatMetaInfo)
      {
        if (v54 == 2 || DWORD1(v53) == 35 || DWORD1(v53) == 36)
        {
          int v17 = v11[11];
          int v16 = v11[12];
        }
        else
        {
          int v16 = 0;
          int v17 = 0;
        }
      }
      int v18 = v11[10];
      switch(v18)
      {
        case 0:
          uint64_t v21 = &v55[44 * v5];
          *((_DWORD *)v21 + 15) = 0;
          v21[84] = 0;
          goto LABEL_22;
        case 1:
          uint64_t v22 = &v55[44 * v5];
          *((_DWORD *)v22 + 15) = 1;
          v22[84] = 0;
          *((_DWORD *)v22 + 16) = (2 * v11[6] + 63) & 0xFFFFFFC0;
          break;
        case 13:
          uint64_t v21 = &v55[44 * v5];
          *((_DWORD *)v21 + 15) = 0;
          v21[84] = 1;
LABEL_22:
          *((_DWORD *)v21 + 16) = (v11[6] + 63) & 0xFFFFFFC0;
          int v24 = v11[6];
          goto LABEL_27;
        case 15:
          uint64_t v21 = &v55[44 * v5];
          *((_DWORD *)v21 + 15) = 18;
          v21[84] = 0;
          goto LABEL_25;
        case 16:
          uint64_t v21 = &v55[44 * v5];
          *((_DWORD *)v21 + 15) = 18;
          v21[84] = 1;
LABEL_25:
          *((_DWORD *)v21 + 16) = (2 * v11[6] + 63) & 0xFFFFFFC0;
          int v24 = 2 * v11[6];
          goto LABEL_27;
        case 18:
          uint64_t v21 = &v55[44 * v5];
          *((_DWORD *)v21 + 15) = 19;
          v21[84] = 0;
          *((_DWORD *)v21 + 16) = (((2 * ((2863311531u * (unint64_t)(v11[6] + 2)) >> 32)) & 0xFFFFFFFC)
                                 + 63) & 0xFFFFFFC0;
          int v24 = (2 * ((2863311531u * (unint64_t)(v11[6] + 2)) >> 32)) & 0xFFFFFFFC;
LABEL_27:
          unsigned int v25 = (v24 + 63) & 0xFFFFFFC0;
          goto LABEL_28;
        case 22:
          uint64_t v21 = &v55[44 * v5];
          *((_DWORD *)v21 + 15) = 0;
          v21[84] = 1;
          int v26 = *(_DWORD *)(v9 + 20);
          int v28 = v26 + 31;
          BOOL v27 = v26 < -31;
          int v29 = v26 + 62;
          if (!v27) {
            int v29 = v28;
          }
          *((_DWORD *)v21 + 16) = (32 * v29) & 0xFFFFFC00;
          int v30 = *(_DWORD *)(v9 + 20);
          int v31 = v30 + 15;
          BOOL v27 = v30 < -15;
          int v32 = v30 + 30;
          if (!v27) {
            int v32 = v31;
          }
          unsigned int v25 = (32 * v32) & 0xFFFFFE00;
          goto LABEL_28;
        case 23:
          uint64_t v21 = &v55[44 * v5];
          *((_DWORD *)v21 + 15) = 19;
          v21[84] = 1;
          int v33 = *(_DWORD *)(v9 + 20);
          int v34 = v33 + 31;
          BOOL v27 = v33 < -31;
          int v35 = v33 + 62;
          if (!v27) {
            int v35 = v34;
          }
          *((_DWORD *)v21 + 16) = ((5 * (v35 >> 5)) & 0x1FFFFF) << 8;
          int v36 = *(_DWORD *)(v9 + 20);
          int v37 = v36 + 15;
          BOOL v27 = v36 < -15;
          int v38 = v36 + 30;
          if (!v27) {
            int v38 = v37;
          }
          unsigned int v25 = ((5 * (v38 >> 4)) & 0x7FFFFF) << 6;
LABEL_28:
          *((_DWORD *)v21 + 17) = v25;
          break;
        case 24:
        case 26:
        case 28:
          uint64_t v20 = &v55[44 * v5];
          v20[84] = 1;
          *((_DWORD *)v20 + 15) = 0;
          goto LABEL_17;
        case 25:
        case 27:
        case 29:
          uint64_t v20 = &v55[44 * v5];
          v20[84] = 1;
          *((_DWORD *)v20 + 15) = 19;
LABEL_17:
          *((_DWORD *)v20 + 16) = v17;
          *((_DWORD *)v20 + 17) = v16;
          break;
        case 31:
        case 32:
        case 33:
        case 34:
          uint64_t v19 = &v55[44 * v5];
          *((_DWORD *)v19 + 15) = 26;
          v19[84] = 1;
          goto LABEL_42;
        case 35:
          uint64_t v19 = &v55[44 * v5];
          int v39 = 25;
          goto LABEL_41;
        case 36:
          uint64_t v19 = &v55[44 * v5];
          int v39 = 26;
LABEL_41:
          *((_DWORD *)v19 + 15) = v39;
          v19[84] = 0;
LABEL_42:
          *((_DWORD *)v19 + 17) = v17;
          *((_DWORD *)v19 + 18) = v16;
          break;
        default:
          uint64_t v23 = &v55[44 * v5];
          *((_DWORD *)v23 + 15) = v18;
          v23[84] = 0;
          *((_DWORD *)v23 + 16) = (v11[6] + 63) & 0xFFFFFFC0;
          *((_DWORD *)v23 + 17) = (v11[6] + 63) & 0xFFFFFFC0;
          break;
      }
      uint64_t v5 = 1;
      if ((v7 & 1) == 0)
      {
        uint64_t v40 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a1 + 24), v55, 0x88u, 0, 0xFFFFFFFF);
        if (v40)
        {
          CFNumberRef v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFNumberRef v41 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
          }
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
            PrimaryAndSecondaryScalerConfigUpdateAtomically();
          }
        }
        return v40;
      }
    }
    uint64_t v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v50 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v50;
    }
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
      PrimaryAndSecondaryScalerConfigUpdateAtomically();
    }
    return 3758097084;
  }
  else
  {
    CFNumberRef v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v42 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v42;
    }
    uint64_t v40 = 3758097095;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      PrimaryAndSecondaryScalerConfigUpdateAtomically(v42, v43, v44, v45, v46, v47, v48, v49);
    }
  }
  return v40;
}

uint64_t SetPrimaryScalerCrop(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3 = H16ISP::H16ISPDevice::SetScalerCrop(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), (int)a3[4] | ((unint64_t)(int)a3[5] << 32), a3[6] | ((unint64_t)a3[7] << 32));
  if (v3)
  {
    uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetPrimaryScalerCrop();
    }
  }
  return v3;
}

uint64_t resizeRawPool(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 752)) {
    int v4 = *(_DWORD *)(a2 + 744);
  }
  else {
    int v4 = 0;
  }
  if (*(unsigned char *)(a2 + 952) && *(_DWORD *)(a2 + 944) > v4) {
    int v4 = *(_DWORD *)(a2 + 944);
  }
  if (*(unsigned char *)(a2 + 1152) && *(_DWORD *)(a2 + 1144) > v4) {
    int v4 = *(_DWORD *)(a2 + 1144);
  }
  if (*(unsigned char *)(a2 + 1352) && *(_DWORD *)(a2 + 1344) > v4) {
    int v4 = *(_DWORD *)(a2 + 1344);
  }
  if (*(unsigned char *)(a2 + 1552) && *(_DWORD *)(a2 + 1544) > v4) {
    int v4 = *(_DWORD *)(a2 + 1544);
  }
  if (*(unsigned char *)(a2 + 2080) && *(_DWORD *)(a2 + 2144) > v4) {
    int v4 = *(_DWORD *)(a2 + 2144);
  }
  if (*(unsigned char *)(a2 + 2280) && *(_DWORD *)(a2 + 2344) > v4) {
    int v4 = *(_DWORD *)(a2 + 2344);
  }
  if (*(unsigned char *)(a2 + 1680) && *(_DWORD *)(a2 + 1744) > v4) {
    int v4 = *(_DWORD *)(a2 + 1744);
  }
  if ((*(unsigned char *)(a2 + 3608) || doesDisabledTofRequireBuffers(a1, a2)) && *(_DWORD *)(a2 + 3636) > v4) {
    int v4 = *(_DWORD *)(a2 + 3636);
  }
  if (*(unsigned char *)(a2 + 1880) && *(unsigned char *)(a2 + 3976) && *(_DWORD *)(a2 + 1944) > v4) {
    int v4 = *(_DWORD *)(a2 + 1944);
  }
  if ((*(void *)(a2 + 4336) || *(void *)(a2 + 4344)) && *(_DWORD *)(a2 + 4352) > v4) {
    int v4 = *(_DWORD *)(a2 + 4352);
  }
  if (*(void *)(a2 + 4360))
  {
    int v5 = *(_DWORD *)(a2 + 4400);
    if (v5 > v4 && v5 > -1) {
      int v4 = *(_DWORD *)(a2 + 4400);
    }
  }
  int v7 = v4 + *(unsigned __int8 *)(a2 + 2080);
  if (*(unsigned char *)(a2 + 8) && H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *(_DWORD *)(a2 + 132), 1785950322)) {
    v7 += 4;
  }
  if (*(unsigned char *)(a2 + 4114)
    && H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *(_DWORD *)(a2 + 132), 1718186595))
  {
    v7 += 4;
  }
  if (gCaptureDeviceCFPrefs[44 * *(unsigned int *)(a2 + 132) + 203]) {
    int v8 = gCaptureDeviceCFPrefs[44 * *(unsigned int *)(a2 + 132) + 203];
  }
  else {
    int v8 = v7;
  }
  uint64_t result = H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 1);
  if (result)
  {
    FirmwarePrimeunsigned __int16 Count = H16ISP::H16ISPFrameReceiver::getFirmwarePrimeCount(*(void *)(a2 + 136), 1);
    uint64_t result = H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(*(void *)(a2 + 136), 1, FirmwarePrimeCount + v8);
    if (!result)
    {
      uint64_t result = H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 29);
      if (result)
      {
        int v11 = H16ISP::H16ISPFrameReceiver::getFirmwarePrimeCount(*(void *)(a2 + 136), 29) + v8;
        uint64_t v12 = *(void *)(a2 + 136);
        return H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(v12, 29, v11);
      }
    }
  }
  return result;
}

uint64_t StopExclaveStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 57696;
  int v5 = H16ISP::H16ISPDevice::enabledExclaveDebug(*(H16ISP::H16ISPDevice **)(a1 + 24));
  if (!*(unsigned char *)v4) {
    return 0;
  }
  int v6 = v5;
  if (notify_is_valid_token(*(_DWORD *)(v4 + 4)))
  {
    notify_cancel(*(_DWORD *)(v4 + 4));
    dispatch_sync(*(dispatch_queue_t *)(a1 + 256), &__block_literal_global_0);
    *(_DWORD *)(v4 + 4) = -1;
  }
  unsigned int v8 = *(_DWORD *)(a2 + 132);
  int v7 = (unsigned int *)(a2 + 132);
  if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), v8, 1718186595))
  {
    char v30 = 0;
    kdebug_trace();
    int v9 = ispirexclavekitmodule_ispirexclavekit_sendcmdchstop();
    kdebug_trace();
    if (!v9)
    {
      if (v6)
      {
        char v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          char v10 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v10;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v29 = 0;
          int v11 = "[Exclaves]: Sent IR channel stop!\n";
LABEL_19:
          _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, v11, v29, 2u);
          goto LABEL_20;
        }
      }
      goto LABEL_20;
    }
    BOOL v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      BOOL v27 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v27;
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      StopExclaveStreams();
    }
    return 3758097084;
  }
  if (!H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *v7, 1718775412)
    && !H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *v7, 1718776695))
  {
    int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v18 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      StopExclaveStreams();
    }
    return 3758096385;
  }
  char v30 = 0;
  kdebug_trace();
  int v12 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchstop();
  kdebug_trace();
  if (v12)
  {
    int v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v28 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v28;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      StopExclaveStreams();
    }
    return 3758097084;
  }
  if (v6)
  {
    char v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      char v10 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v29 = 0;
      int v11 = "[Exclaves]: Sent RGB stop!\n";
      goto LABEL_19;
    }
  }
LABEL_20:
  uint64_t v13 = H16ISP::H16ISPDevice::PowerOffExclaveKit(*(H16ISP::H16ISPDevice **)(a1 + 24), *v7);
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v19 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v19;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      StopExclaveStreams(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  else
  {
    *(unsigned char *)uint64_t v4 = 0;
    *(_DWORD *)(*(void *)(a1 + 24) + 96) = -1;
    int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v14 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v14;
    }
    uint64_t v15 = 0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v16 = *v7;
      *(_DWORD *)int buf = 136315650;
      int v32 = "StopExclaveStreams";
      __int16 v33 = 2080;
      int v34 = "StopExclaveStreams";
      __int16 v35 = 1024;
      unsigned int v36 = v16;
      _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]:%s Successfully stopped EK channel %d \n", buf, 0x1Cu);
      return 0;
    }
  }
  return v15;
}

const void *SetHITHFeatureConfiguration(uint64_t a1, const __CFDictionary *a2)
{
  if (!*(unsigned char *)(a1 + 117)) {
    return 0;
  }
  value = 0;
  uint64_t v4 = a1 + 736;
  uint64_t v5 = SetMetadataOutputFeatureEnabled(a1 + 736, a2, **(void ***)(a1 + 808));
  if (v5)
  {
    int v6 = (const void *)v5;
    int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      SetHITHFeatureConfiguration();
    }
    return v6;
  }
  if (!CFDictionaryGetValueIfPresent(a2, *(const void **)(*(void *)(a1 + 808) + 8), (const void **)&value)) {
    return 0;
  }
  uint64_t v8 = SetMetadataOutputBufferPoolConfiguration(v4, (const __CFDictionary *)value);
  if (v8)
  {
    int v6 = (const void *)v8;
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetHITHFeatureConfiguration();
    }
    return v6;
  }
  char v10 = CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2CC50]);
  int v6 = v10;
  if (!v10) {
    return v6;
  }
  CFTypeID v11 = CFGetTypeID(v10);
  if (v11 != CFStringGetTypeID()) {
    return 0;
  }
  int v12 = *(const void **)(a1 + 824);
  if (v12) {
    CFRelease(v12);
  }
  CFTypeRef v13 = CFRetain(v6);
  int v6 = 0;
  *(void *)(a1 + 824) = v13;
  return v6;
}

const void *SetANSTThumbnailFeatureConfiguration(uint64_t a1, const __CFDictionary *a2)
{
  value = 0;
  if (!*(unsigned char *)(a1 + 118)) {
    return 0;
  }
  uint64_t v4 = a1 + 832;
  uint64_t v5 = SetMetadataOutputFeatureEnabled(a1 + 832, a2, **(void ***)(a1 + 904));
  if (v5)
  {
    int v6 = (const void *)v5;
    int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      SetANSTThumbnailFeatureConfiguration();
    }
    return v6;
  }
  if (!CFDictionaryGetValueIfPresent(a2, *(const void **)(*(void *)(a1 + 904) + 8), (const void **)&value)) {
    return 0;
  }
  uint64_t v8 = SetMetadataOutputBufferPoolConfiguration(v4, (const __CFDictionary *)value);
  if (v8)
  {
    int v6 = (const void *)v8;
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetANSTThumbnailFeatureConfiguration();
    }
    return v6;
  }
  char v10 = CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2CC50]);
  int v6 = v10;
  if (!v10) {
    return v6;
  }
  CFTypeID v11 = CFGetTypeID(v10);
  if (v11 != CFStringGetTypeID()) {
    return 0;
  }
  int v12 = *(const void **)(a1 + 920);
  if (v12) {
    CFRelease(v12);
  }
  CFTypeRef v13 = CFRetain(v6);
  int v6 = 0;
  *(void *)(a1 + 920) = v13;
  return v6;
}

uint64_t LightSourceMaskTunableConfigurationSendToFirmware(uint64_t a1, int a2, int32x4_t *a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (a3[2].i32[0] != 1) {
    return 0;
  }
  __int32 v4 = a3->i32[0];
  if (a3->i32[0] <= 0x40u && (unsigned int v5 = a3->u32[1], v5 < 0x41))
  {
    unsigned int v9 = a3->u32[2];
    if (v9 >= 3)
    {
      CFTypeRef v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFTypeRef v13 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
      }
      uint64_t v7 = 3758097131;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        LightSourceMaskTunableConfigurationSendToFirmware();
      }
    }
    else
    {
      unsigned int v10 = a3->u32[3];
      if (v10 > 1)
      {
        int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v14 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
        }
        uint64_t v7 = 3758097131;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          LightSourceMaskTunableConfigurationSendToFirmware();
        }
      }
      else
      {
        *(int16x4_t *)unsigned int v36 = vmovn_s32(a3[1]);
        uint64_t v7 = H16ISP::H16ISPDevice::SetStatsFEThumbnailMaskConfig(*(H16ISP::H16ISPDevice **)(a1 + 24), a2, v4, v5, v9, v10, v36);
        if (v7)
        {
          int v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v12 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            int v15 = a3->u8[0];
            int v16 = a3->u8[4];
            int v17 = a3->u8[8];
            int v18 = a3->u8[12];
            v19[0] = 67111168;
            v19[1] = a2;
            __int16 v20 = 1024;
            int v21 = v15;
            __int16 v22 = 1024;
            int v23 = v16;
            __int16 v24 = 1024;
            int v25 = v17;
            __int16 v26 = 1024;
            int v27 = v18;
            __int16 v28 = 1024;
            int v29 = v36[0];
            __int16 v30 = 1024;
            int v31 = v36[1];
            __int16 v32 = 1024;
            int v33 = v36[2];
            __int16 v34 = 1024;
            int v35 = v36[3];
            _os_log_error_impl(&dword_24680F000, v12, OS_LOG_TYPE_ERROR, "SetStatsFEThumbnailMaskConfig failed: channel=%u downscaleFactorX=%hhu downscaleFactorY=%hhu genMode=%hhu bitBinMode=%hhu thresholdMask=[%hu, %hu, %hu, %hu]\n", (uint8_t *)v19, 0x38u);
          }
          a3[2].i32[0] = 0;
        }
        else
        {
          a3[2].i32[0] = 2;
        }
      }
    }
  }
  else
  {
    int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    uint64_t v7 = 3758097131;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      LightSourceMaskTunableConfigurationSendToFirmware();
    }
  }
  return v7;
}

uint64_t SetMetadataOutputFeatureEnabled(uint64_t a1, CFDictionaryRef theDict, void *key)
{
  value = 0;
  if (!CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value)) {
    return 0;
  }
  if (value && (CFTypeID v4 = CFGetTypeID(value), v4 == CFBooleanGetTypeID()))
  {
    uint64_t v5 = 0;
    *(unsigned char *)(a1 + 81) = CFBooleanGetValue((CFBooleanRef)value) != 0;
  }
  else
  {
    int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    uint64_t v5 = 3758097084;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      SetMetadataOutputFeatureEnabled(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  return v5;
}

uint64_t SetMetadataOutputBufferPoolConfiguration(uint64_t a1, const __CFDictionary *cf)
{
  CFTypeRef cfa = 0;
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
  {
    if (!CFDictionaryGetValueIfPresent(cf, (const void *)*MEMORY[0x263F2E828], &cfa)) {
      return 0;
    }
    if (*(unsigned char *)(a1 + 81))
    {
      uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v5 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        SetMetadataOutputBufferPoolConfiguration(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      return 3758097131;
    }
    CFTypeID v23 = CFGetTypeID(cfa);
    TypeIOSurfaceID ID = CVPixelBufferPoolGetTypeID();
    int v25 = (__CVPixelBufferPool *)cfa;
    if (v23 == TypeID)
    {
      MetadataOutputBufferPoolRelease((CFTypeID *)a1);
      if (!CFEqual(v25, (CFTypeRef)*MEMORY[0x263EFFD08]))
      {
        CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v25);
        if (PixelBufferAttributes)
        {
          CFDictionaryRef v27 = PixelBufferAttributes;
          uint64_t valuePtr = 0;
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F04240]);
          if (!Value)
          {
            uint64_t v47 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v47 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v47;
            }
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
              SetMetadataOutputBufferPoolConfiguration(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            return 3758097090;
          }
          CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
          CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v27, (const void *)*MEMORY[0x263F04118]);
          if (!v29)
          {
            int v55 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              int v55 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v55;
            }
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
              SetMetadataOutputBufferPoolConfiguration(v55, v56, v57, v58, v59, v60, v61, v62);
            }
            return 3758097090;
          }
          CFNumberGetValue(v29, kCFNumberIntType, &valuePtr);
          if (HIDWORD(valuePtr) < *(_DWORD *)(a1 + 20) || valuePtr < *(_DWORD *)(a1 + 24))
          {
            __int16 v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              __int16 v30 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v30;
            }
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              SetMetadataOutputBufferPoolConfiguration(v30, v31, v32, v33, v34, v35, v36, v37);
            }
            return 3758097090;
          }
        }
        *(void *)(a1 + 8) = CVPixelBufferPoolRetain(v25);
        uint64_t v13 = 0;
        *(void *)a1 = CVPixelBufferPoolGetTypeID();
        return v13;
      }
      return 0;
    }
    CFTypeID v38 = CFGetTypeID(cfa);
    if (v38 == CVDataBufferPoolGetTypeID())
    {
      SetMetadataOutputFeatureDataBufferPool((CFTypeID *)a1, cfa);
      return 0;
    }
    int v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v39 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v39;
    }
    uint64_t v13 = 3758097090;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      SetMetadataOutputBufferPoolConfiguration(v39, v40, v41, v42, v43, v44, v45, v46);
    }
  }
  else
  {
    int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    uint64_t v13 = 3758097090;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      SetMetadataOutputBufferPoolConfiguration(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return v13;
}

uint64_t LightSourceMaskGetTunableParameterValue(const __CFDictionary *a1, const __CFString *a2, void *a3)
{
  value = 0;
  if (!CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value)) {
    return 0;
  }
  uint64_t v4 = 3758097090;
  if (value)
  {
    CFTypeID v5 = CFGetTypeID(value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, a3);
      return 0;
    }
  }
  return v4;
}

uint64_t SetMetadataOutputFeatureDataBufferPool(CFTypeID *a1, const void *a2)
{
  MetadataOutputBufferPoolRelease(a1);
  uint64_t result = CFEqual(a2, (CFTypeRef)*MEMORY[0x263EFFD08]);
  if (!result)
  {
    a1[1] = (CFTypeID)CFRetain(a2);
    uint64_t result = CVDataBufferPoolGetTypeID();
    *a1 = result;
  }
  return result;
}

uint64_t IntermediateTapAndScalerConfigUpdateAtomically(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  memset(v59, 0, sizeof(v59));
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  memset(v63, 0, 28);
  uint64_t v6 = *(void **)(a2 + 136);
  if (v6)
  {
    Bufferuint64_t Pool = (_DWORD *)H16ISP::H16ISPFrameReceiver::getBufferPool(v6, 6);
    if (BufferPool)
    {
      uint64_t v12 = BufferPool;
      *(_WORD *)&v59[4] = a5;
      *(_DWORD *)&v59[8] = *(_DWORD *)(a2 + 132);
      float64x2_t v13 = *(float64x2_t *)(a3 + 48);
      *(int32x2_t *)&v59[12] = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(a3 + 32)));
      *(int32x2_t *)&v59[20] = vmovn_s64((int64x2_t)vcvtq_u64_f64(v13));
      switch(BufferPool[10])
      {
        case 0xF:
          unsigned int v14 = 0;
          unsigned int v15 = 0;
          *(_DWORD *)&v59[28] = (2 * BufferPool[6] + 63) & 0xFFFFFFC0;
          DWORD2(v60) = 18;
          goto LABEL_21;
        case 0x16:
          unsigned int v14 = 0;
          unsigned int v15 = 0;
          DWORD2(v60) = 0;
          BYTE12(v60) = 1;
          unsigned int v35 = (32 * BufferPool[6] + 992) & 0xFFFFFC00;
          goto LABEL_24;
        case 0x17:
          unsigned int v14 = 0;
          unsigned int v15 = 0;
          DWORD2(v60) = 19;
          BYTE12(v60) = 1;
          unsigned int v35 = ((5 * ((BufferPool[6] + 31) >> 5)) & 0x1FFFFF) << 8;
LABEL_24:
          *(_DWORD *)&v59[28] = v35;
          break;
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
          unsigned int v15 = BufferPool[11];
          unsigned int v14 = BufferPool[12];
          if (H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(a3 + 16), &v57))
          {
            BYTE12(v60) = v58 != 0;
            DWORD2(v60) = HIDWORD(v57);
            *(_DWORD *)&v59[28] = v15;
          }
          else
          {
            unsigned int v33 = v14;
            uint64_t v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v34 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v34;
            }
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
              IntermediateTapAndScalerConfigUpdateAtomically();
            }
            *(_DWORD *)&v59[28] = (v12[6] + 63) & 0xFFFFFFC0;
            DWORD2(v60) = 0;
            BYTE12(v60) = 0;
            unsigned int v14 = v33;
          }
          break;
        default:
          unsigned int v14 = 0;
          unsigned int v15 = 0;
          *(_DWORD *)&v59[28] = (BufferPool[6] + 63) & 0xFFFFFFC0;
          DWORD2(v60) = 0;
LABEL_21:
          BYTE12(v60) = 0;
          break;
      }
      DWORD1(v60) = v12[7];
      LODWORD(v60) = ColorRangeForOutput(a2, a3);
      if (a5 == 2845) {
        int v36 = 0;
      }
      else {
        int v36 = 10;
      }
      uint64_t v37 = H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(a2 + 136), v36);
      if (v37)
      {
        CFTypeID v38 = (_DWORD *)v37;
        int32x2_t v39 = vmovn_s64((int64x2_t)vcvtq_u64_f64(*(float64x2_t *)(a4 + 48)));
        *(int32x2_t *)&long long v61 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(a4 + 32)));
        *((int32x2_t *)&v61 + 1) = v39;
        int v40 = *(_DWORD *)(a4 + 24);
        LODWORD(v62) = *(_DWORD *)(a4 + 20);
        DWORD1(v62) = v40;
        DWORD2(v63[1]) = *(_DWORD *)(v37 + 24);
        int v41 = *(_DWORD *)(v37 + 28);
        HIDWORD(v63[0]) = -v40 & 0xF;
        LODWORD(v63[1]) = v41;
        DWORD2(v62) = ColorRangeForOutput(a2, a4);
        if (H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(a4 + 16), &v57)
          && (v58 == 2 || DWORD1(v57) == 35 || DWORD1(v57) == 36))
        {
          unsigned int v15 = v38[11];
          unsigned int v14 = v38[12];
        }
        switch(v38[10])
        {
          case 0:
            HIDWORD(v62) = 0;
            goto LABEL_46;
          case 1:
            HIDWORD(v62) = 1;
            BYTE4(v63[1]) = 0;
            LODWORD(v63[0]) = (2 * v38[6] + 63) & 0xFFFFFFC0;
            break;
          case 0xD:
            HIDWORD(v62) = 0;
            BYTE4(v63[1]) = 1;
            goto LABEL_48;
          case 0xF:
            HIDWORD(v62) = 18;
            BYTE4(v63[1]) = 0;
            goto LABEL_51;
          case 0x10:
            HIDWORD(v62) = 18;
            BYTE4(v63[1]) = 1;
LABEL_51:
            LODWORD(v63[0]) = (2 * v38[6] + 63) & 0xFFFFFFC0;
            int v44 = 2 * v38[6];
            goto LABEL_53;
          case 0x12:
            HIDWORD(v62) = 19;
            BYTE4(v63[1]) = 0;
            LODWORD(v63[0]) = (((2 * ((2863311531u * (unint64_t)(v38[6] + 2)) >> 32)) & 0xFFFFFFFC)
                             + 63) & 0xFFFFFFC0;
            int v44 = (2 * ((2863311531u * (unint64_t)(v38[6] + 2)) >> 32)) & 0xFFFFFFFC;
            goto LABEL_53;
          case 0x16:
            BYTE4(v63[1]) = 1;
            int v46 = *(_DWORD *)(a4 + 20);
            int v47 = v46 + 31;
            if (v46 < -31) {
              int v47 = v46 + 62;
            }
            HIDWORD(v62) = 0;
            LODWORD(v63[0]) = (32 * v47) & 0xFFFFFC00;
            int v49 = v46 + 15;
            BOOL v48 = v46 < -15;
            int v50 = v46 + 30;
            if (!v48) {
              int v50 = v49;
            }
            unsigned int v45 = (32 * v50) & 0xFFFFFE00;
            goto LABEL_54;
          case 0x17:
            BYTE4(v63[1]) = 1;
            int v51 = *(_DWORD *)(a4 + 20);
            int v52 = v51 + 31;
            if (v51 < -31) {
              int v52 = v51 + 62;
            }
            HIDWORD(v62) = 19;
            LODWORD(v63[0]) = ((5 * (v52 >> 5)) & 0x1FFFFF) << 8;
            int v53 = v51 + 15;
            BOOL v48 = v51 < -15;
            int v54 = v51 + 30;
            if (!v48) {
              int v54 = v53;
            }
            unsigned int v45 = ((5 * (v54 >> 4)) & 0x7FFFFF) << 6;
            goto LABEL_54;
          case 0x18:
          case 0x1A:
          case 0x1C:
            BYTE4(v63[1]) = 1;
            HIDWORD(v62) = 0;
            goto LABEL_42;
          case 0x19:
          case 0x1B:
          case 0x1D:
            BYTE4(v63[1]) = 1;
            HIDWORD(v62) = 19;
LABEL_42:
            *(void *)&v63[0] = __PAIR64__(v14, v15);
            break;
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
            BYTE4(v63[1]) = 1;
            int v42 = 26;
            goto LABEL_68;
          case 0x23:
            int v42 = 25;
            goto LABEL_67;
          case 0x24:
            int v42 = 26;
LABEL_67:
            BYTE4(v63[1]) = 0;
LABEL_68:
            HIDWORD(v62) = v42;
            *(void *)((char *)v63 + 4) = __PAIR64__(v14, v15);
            break;
          default:
            HIDWORD(v62) = v38[10];
LABEL_46:
            BYTE4(v63[1]) = 0;
LABEL_48:
            LODWORD(v63[0]) = (v38[6] + 63) & 0xFFFFFFC0;
            int v44 = v38[6];
LABEL_53:
            unsigned int v45 = (v44 + 63) & 0xFFFFFFC0;
LABEL_54:
            DWORD1(v63[0]) = v45;
            break;
        }
        uint64_t v24 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a1 + 24), v59, 0x6Cu, 0, 0xFFFFFFFF);
        if (v24)
        {
          int v55 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v55 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v55;
          }
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
            IntermediateTapAndScalerConfigUpdateAtomically();
          }
        }
      }
      else
      {
        uint64_t v43 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v43 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v43;
        }
        uint64_t v24 = 3758097084;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
          IntermediateTapAndScalerConfigUpdateAtomically();
        }
      }
    }
    else
    {
      int v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v25 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
      }
      uint64_t v24 = 3758097084;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        IntermediateTapAndScalerConfigUpdateAtomically(v25, v26, v27, v28, v29, v30, v31, v32);
      }
    }
  }
  else
  {
    uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    uint64_t v24 = 3758097095;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      IntermediateTapAndScalerConfigUpdateAtomically(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  return v24;
}

uint64_t ScalerOutputConfigUpdateAtomically(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 2843) {
    int v5 = 0;
  }
  else {
    int v5 = 10;
  }
  memset(v44, 0, sizeof(v44));
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v6 = *(void **)(a2 + 136);
  if (v6)
  {
    Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool(v6, v5);
    if (BufferPool)
    {
      uint64_t v11 = (_DWORD *)BufferPool;
      float64x2_t v12 = *(float64x2_t *)(a3 + 48);
      *(int32x2_t *)&v44[12] = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(a3 + 32)));
      *(_WORD *)&v44[4] = a4;
      *(_DWORD *)&v44[8] = *(_DWORD *)(a2 + 132);
      *(int32x2_t *)&v44[20] = vmovn_s64((int64x2_t)vcvtq_u64_f64(v12));
      int v13 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)&v44[28] = *(_DWORD *)(a3 + 20);
      LODWORD(v45) = v13;
      HIDWORD(v47) = *(_DWORD *)(BufferPool + 24);
      int v14 = *(_DWORD *)(BufferPool + 28);
      DWORD2(v46) = -v13 & 0xF;
      HIDWORD(v46) = v14;
      DWORD1(v45) = ColorRangeForOutput(a2, a3);
      int FrameFormatMetaInfo = H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(a3 + 16), &v42);
      unsigned int v16 = 0;
      unsigned int v17 = 0;
      if (FrameFormatMetaInfo)
      {
        if (v43 == 2 || DWORD1(v42) == 35 || DWORD1(v42) == 36)
        {
          unsigned int v17 = v11[11];
          unsigned int v16 = v11[12];
        }
        else
        {
          unsigned int v16 = 0;
          unsigned int v17 = 0;
        }
      }
      switch(v11[10])
      {
        case 0:
          DWORD2(v45) = 0;
          goto LABEL_28;
        case 1:
          DWORD2(v45) = 1;
          LOBYTE(v47) = 0;
          HIDWORD(v45) = (2 * v11[6] + 63) & 0xFFFFFFC0;
          break;
        case 0xD:
          DWORD2(v45) = 0;
          LOBYTE(v47) = 1;
          goto LABEL_30;
        case 0xF:
          DWORD2(v45) = 18;
          LOBYTE(v47) = 0;
          goto LABEL_33;
        case 0x10:
          DWORD2(v45) = 18;
          LOBYTE(v47) = 1;
LABEL_33:
          HIDWORD(v45) = (2 * v11[6] + 63) & 0xFFFFFFC0;
          int v29 = 2 * v11[6];
          goto LABEL_35;
        case 0x12:
          DWORD2(v45) = 19;
          LOBYTE(v47) = 0;
          HIDWORD(v45) = (((2 * ((2863311531u * (unint64_t)(v11[6] + 2)) >> 32)) & 0xFFFFFFFC) + 63) & 0xFFFFFFC0;
          int v29 = (2 * ((2863311531u * (unint64_t)(v11[6] + 2)) >> 32)) & 0xFFFFFFFC;
          goto LABEL_35;
        case 0x16:
          LOBYTE(v47) = 1;
          int v31 = *(_DWORD *)(a3 + 20);
          int v32 = v31 + 31;
          if (v31 < -31) {
            int v32 = v31 + 62;
          }
          DWORD2(v45) = 0;
          HIDWORD(v45) = (32 * v32) & 0xFFFFFC00;
          int v34 = v31 + 15;
          BOOL v33 = v31 < -15;
          int v35 = v31 + 30;
          if (!v33) {
            int v35 = v34;
          }
          unsigned int v30 = (32 * v35) & 0xFFFFFE00;
          goto LABEL_36;
        case 0x17:
          LOBYTE(v47) = 1;
          int v36 = *(_DWORD *)(a3 + 20);
          int v37 = v36 + 31;
          if (v36 < -31) {
            int v37 = v36 + 62;
          }
          DWORD2(v45) = 19;
          HIDWORD(v45) = ((5 * (v37 >> 5)) & 0x1FFFFF) << 8;
          int v38 = v36 + 15;
          BOOL v33 = v36 < -15;
          int v39 = v36 + 30;
          if (!v33) {
            int v39 = v38;
          }
          unsigned int v30 = ((5 * (v39 >> 4)) & 0x7FFFFF) << 6;
          goto LABEL_36;
        case 0x18:
        case 0x1A:
        case 0x1C:
          LOBYTE(v47) = 1;
          DWORD2(v45) = 0;
          goto LABEL_24;
        case 0x19:
        case 0x1B:
        case 0x1D:
          LOBYTE(v47) = 1;
          DWORD2(v45) = 19;
LABEL_24:
          HIDWORD(v45) = v17;
          LODWORD(v46) = v16;
          break;
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x22:
          LOBYTE(v47) = 1;
          int v28 = 26;
          goto LABEL_50;
        case 0x23:
          int v28 = 25;
          goto LABEL_49;
        case 0x24:
          int v28 = 26;
LABEL_49:
          LOBYTE(v47) = 0;
LABEL_50:
          DWORD2(v45) = v28;
          *(void *)&long long v46 = __PAIR64__(v16, v17);
          break;
        default:
          DWORD2(v45) = v11[10];
LABEL_28:
          LOBYTE(v47) = 0;
LABEL_30:
          HIDWORD(v45) = (v11[6] + 63) & 0xFFFFFFC0;
          int v29 = v11[6];
LABEL_35:
          unsigned int v30 = (v29 + 63) & 0xFFFFFFC0;
LABEL_36:
          LODWORD(v46) = v30;
          break;
      }
      uint64_t v26 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a1 + 24), v44, 0x48u, 0, 0xFFFFFFFF);
      if (v26)
      {
        int v40 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v40 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v40;
        }
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
          ScalerOutputConfigUpdateAtomically(a4 == 2843, v26, v40);
        }
      }
    }
    else
    {
      uint64_t v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v27 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
      }
      uint64_t v26 = 3758097084;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        ScalerOutputConfigUpdateAtomically();
      }
    }
  }
  else
  {
    uint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v18 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
    }
    uint64_t v26 = 3758097095;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      ScalerOutputConfigUpdateAtomically(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  return v26;
}

void NotifyProjectorValidationError(uint64_t a1, uint64_t a2)
{
  FigStreamRef = GetFigStreamRef(a1, a2);
  if (*(unsigned char *)(a1 + 3792)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = FigStreamRef == 0;
  }
  if (!v4)
  {
    *(unsigned char *)(a1 + 3792) = 1;
    H16ISPPostNotification(@"ProjectorValidationFailed", FigStreamRef, 0);
  }
}

const void *GetFigStreamRef(uint64_t a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 120)) < 1) {
    return 0;
  }
  CFIndex v4 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 120), v4);
    if (CMBaseObjectGetDerivedStorage() == a1) {
      break;
    }
    if (CFArrayGetCount(*(CFArrayRef *)(a2 + 120)) <= ++v4) {
      return 0;
    }
  }
  CFArrayRef v6 = *(const __CFArray **)(a2 + 120);

  return CFArrayGetValueAtIndex(v6, v4);
}

uint64_t DebugSpecialFunctionGetHandle(H16ISP::H16ISPDevice *a1, char *a2, unint64_t *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  bzero(v6, 0x40uLL);
  __int16 v7 = 5;
  long long v8 = *(_OWORD *)"FrontIRStrobe";
  long long v9 = unk_2469DAD5C;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v6, 0x40u, 1u, 0xFFFFFFFF);
  if (!result) {
    *(void *)a2 = v10;
  }
  return result;
}

uint64_t DebugSpecialFunction(H16ISP::H16ISPDevice *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  bzero(v9, 0x38uLL);
  __int16 v10 = 28;
  int v11 = 1;
  uint64_t v12 = a2;
  uint64_t v13 = 1;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = 0;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v9, 0x38u, 1u, 0xFFFFFFFF);
}

void addSupportedConfiguration(const __CFAllocator *a1, __CFArray *a2, int a3, int a4, int a5, const __CFArray *a6, int a7, int a8, BOOL a9, BOOL a10)
{
  int v27 = a4;
  int valuePtr = a3;
  CFNumberRef v16 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
  if (v16)
  {
    CFNumberRef v17 = v16;
    CFNumberRef v18 = CFNumberCreate(a1, kCFNumberSInt32Type, &v27);
    if (v18)
    {
      CFNumberRef v19 = v18;
      if (a5) {
        uint64_t v20 = (const void *)*MEMORY[0x263EFFB40];
      }
      else {
        uint64_t v20 = (const void *)*MEMORY[0x263EFFB38];
      }
      if (a7) {
        uint64_t v21 = (const void *)*MEMORY[0x263EFFB40];
      }
      else {
        uint64_t v21 = (const void *)*MEMORY[0x263EFFB38];
      }
      if (a8) {
        uint64_t v22 = (const void *)*MEMORY[0x263EFFB40];
      }
      else {
        uint64_t v22 = (const void *)*MEMORY[0x263EFFB38];
      }
      if (a9) {
        uint64_t v23 = (const void *)*MEMORY[0x263EFFB40];
      }
      else {
        uint64_t v23 = (const void *)*MEMORY[0x263EFFB38];
      }
      if (a10) {
        uint64_t v24 = (const void *)*MEMORY[0x263EFFB40];
      }
      else {
        uint64_t v24 = (const void *)*MEMORY[0x263EFFB38];
      }
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8F8], v17);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8B0], v19);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8E0], v20);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8B8], a6);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8D8], v21);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8D0], v21);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8C8], v21);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8C0], v21);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8E8], v22);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8A8], v23);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C8F0], v24);
      CFRelease(v17);
      CFRelease(v19);
      CFArrayAppendValue(a2, Mutable);
      uint64_t v26 = Mutable;
    }
    else
    {
      uint64_t v26 = v17;
    }
    CFRelease(v26);
  }
}

void ___ZL39CopySupportedTimeOfFlightProjectorModesPK13__CFAllocatorPvP19H16ISPCaptureStreamP18H16ISPCaptureGroupP19H16ISPCaptureDevice_block_invoke(uint64_t a1, __CFArray *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v4 = CFNumberCreate(*(CFAllocatorRef *)(a1 + 32), kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(a2, v4);
  CFRelease(v4);
}

void ___ZL21CopyDCNUCVPixelBufferPK13__CFAllocatorPvP19H16ISPCaptureStreamP18H16ISPCaptureGroupP19H16ISPCaptureDevice_block_invoke(void *a1)
{
  if (*(void *)(a1[6] + 4504))
  {
    *(void *)(*(void *)(a1[4] + 8) + 24) = bfpn_correction_create_dict_from_metadata();
    if (*(void *)(*(void *)(a1[4] + 8) + 24))
    {
      *(void *)(*(void *)(a1[5] + 8) + 24) = CFRetain(*(CFTypeRef *)(a1[6] + 4504));
    }
    else
    {
      uint64_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v2 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v2;
      }
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        ___ZL21CopyDCNUCVPixelBufferPK13__CFAllocatorPvP19H16ISPCaptureStreamP18H16ISPCaptureGroupP19H16ISPCaptureDevice_block_invoke_cold_1();
      }
    }
  }
}

uint64_t SetSIFRCommonPool(uint64_t a1, int a2, __int16 a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(v6, 0, 45);
  HIBYTE(v6[1]) = 1;
  uint64_t v3 = H16ISP::H16ISPDevice::SetCommonBufferPool(*(H16ISP::H16ISPDevice **)(a1 + 24), a2, 3, a3, (unsigned __int8 *)v6, 0x2DuLL);
  if (v3)
  {
    CFNumberRef v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SetSIFRCommonPool();
    }
  }
  return v3;
}

uint64_t H16ISPSensorRawPoolConfigurationFindIndexForPool(uint64_t a1, __CVPixelBufferPool *a2)
{
  *(void *)CFArrayRef v6 = 0;
  if (H16ISPSensorRawPoolConfigurationGetBufferWidthAndHeight(a2, &v6[1], v6)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  for (char i = 1; ; char i = 0)
  {
    char v5 = i;
    if (*(_DWORD *)(a1 + 48 * result + 4384) == v6[1] && *(_DWORD *)(a1 + 48 * result + 4388) == v6[0]) {
      break;
    }
    uint64_t result = 1;
    if ((v5 & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t H16ISPSensorRawPoolConfigurationGetBufferWidthAndHeight(__CVPixelBufferPool *a1, unsigned int *a2, unsigned int *a3)
{
  CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(a1);
  uint64_t valuePtr = 0;
  if (PixelBufferAttributes)
  {
    CFDictionaryRef v6 = PixelBufferAttributes;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F04240]);
    if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4))
    {
      CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x263F04118]);
      if (v8 && CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr))
      {
        if (HIDWORD(valuePtr) && (unsigned int v9 = valuePtr) != 0)
        {
          uint64_t v10 = 0;
          *a2 = HIDWORD(valuePtr);
          *a3 = v9;
        }
        else
        {
          int v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v35 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v35;
          }
          uint64_t v10 = 3758097084;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
            H16ISPSensorRawPoolConfigurationGetBufferWidthAndHeight(v35, v36, v37, v38, v39, v40, v41, v42);
          }
        }
      }
      else
      {
        int v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v27 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
        }
        uint64_t v10 = 3758097136;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          H16ISPSensorRawPoolConfigurationGetBufferWidthAndHeight(v27, v28, v29, v30, v31, v32, v33, v34);
        }
      }
    }
    else
    {
      int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v11 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
      }
      uint64_t v10 = 3758097136;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        H16ISPSensorRawPoolConfigurationGetBufferWidthAndHeight(v11, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }
  else
  {
    CFNumberRef v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v19 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
    }
    uint64_t v10 = 3758097136;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      H16ISPSensorRawPoolConfigurationGetBufferWidthAndHeight(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  return v10;
}

void H16ISPEPipeReceivedProc()
{
  FigCaptureStreamGetFigBaseObject();
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = (H16ISP::H16ISPFilterGraphMessage *)CMBaseObjectGetDerivedStorage();
  H16ISP::H16ISPFilterGraphMessage::CreateH16ISPFilterGraphMessage(DerivedStorage);
}

{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  int v3;
  int v4;

  LODWORD(v2) = 136315650;
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_8(&dword_24680F000, v0, v1, "%s - [Exclaves]: Failed to allocate graph message for requestID=0x%08X frameID=%u!\n", v2, v3, v4);
}

void AddHiResRawPoolToFrameReceiver(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 4456);
  if (v1 && (uint64_t v2 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(v1 + 56)) != 0)
  {
    if (H16ISP::H16ISPFrameReceiver::addSharedBufferPoolToFrameReceiver(*(H16ISP::H16ISPFrameReceiver **)(a1 + 136), v2))
    {
      uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v3 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        AddHiResRawPoolToFrameReceiver();
      }
    }
  }
  else if (*(void *)(a1 + 4408))
  {
    uint64_t v4 = *(void *)(a1 + 136);
    int v5 = *(unsigned __int16 *)(a1 + 4418);
    GetFormatForHiResRaw(a1, *(_DWORD *)(a1 + 4444));
    CVPixelBufferPoolGetMinBufferCount();
    if (H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v4, 31, v5))
    {
      CFDictionaryRef v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFDictionaryRef v6 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        AddHiResRawPoolToFrameReceiver();
      }
    }
  }
}

void AddRawPlusPoolToFrameReceiver(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 4456);
  if (v1)
  {
    uint64_t v2 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(v1 + 112);
    if (v2)
    {
      if (H16ISP::H16ISPFrameReceiver::addSharedBufferPoolToFrameReceiver(*(H16ISP::H16ISPFrameReceiver **)(a1 + 136), v2))
      {
        uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v3 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          AddRawPlusPoolToFrameReceiver();
        }
      }
    }
  }
}

void ActivateStillImageQuadraOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 136))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 168);
    if (v4 < v5) {
      unsigned int v5 = 0;
    }
    if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v4 - v5) + 16), v10, v12))
    {
      CFDictionaryRef v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFDictionaryRef v6 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageQuadraOutputInFrameReceiver();
      }
    }
    else
    {
      if (*(unsigned char *)(*(void *)(a1 + 136) + 453)) {
        goto LABEL_10;
      }
      v8[10] = v10[10];
      v8[11] = v10[11];
      v8[12] = v10[12];
      int v9 = v11;
      v8[6] = v10[6];
      v8[7] = v10[7];
      char v8[8] = v10[8];
      v8[9] = v10[9];
      v8[2] = v10[2];
      v8[3] = v10[3];
      unsigned __int8 v8[4] = v10[4];
      v8[5] = v10[5];
      v8[0] = v10[0];
      v8[1] = v10[1];
      if (!AddRawPoolToFrameReceiver(a1, a2, (uint64_t)v8))
      {
LABEL_10:
        SetMetaDataOptionsOnFrameReceiver(a1, a2);
      }
      else
      {
        uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v7 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          ActivateStillImageQuadraOutputInFrameReceiver();
        }
      }
    }
  }
}

void ActivateRawOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 136))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 168);
    if (v4 < v5) {
      unsigned int v5 = 0;
    }
    if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v4 - v5) + 16), v11, v13))
    {
      CFDictionaryRef v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFDictionaryRef v6 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        ActivateRawOutputInFrameReceiver();
      }
    }
    else
    {
      if (*(unsigned char *)(*(void *)(a1 + 136) + 453)) {
        goto LABEL_25;
      }
      v9[10] = v11[10];
      v9[11] = v11[11];
      v9[12] = v11[12];
      int v10 = v12;
      v9[6] = v11[6];
      v9[7] = v11[7];
      v9[8] = v11[8];
      v9[9] = v11[9];
      _DWORD v9[2] = v11[2];
      _OWORD v9[3] = v11[3];
      unsigned __int8 v9[4] = v11[4];
      v9[5] = v11[5];
      v9[0] = v11[0];
      v9[1] = v11[1];
      if (!AddRawPoolToFrameReceiver(a1, a2, (uint64_t)v9))
      {
LABEL_25:
        if (*(unsigned char *)(a1 + 3784)
          && *(_DWORD *)(a1 + 2096) == 1278226736
          && H16ISP::H16ISPDevice::SetSensorInterfacePixelFormat(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 15, 1, 0, 0))
        {
          uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v7 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
          }
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            ActivateRawOutputInFrameReceiver();
          }
        }
        else
        {
          SetMetaDataOptionsOnFrameReceiver(a1, a2);
        }
      }
      else
      {
        CFNumberRef v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v8 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          ActivateRawOutputInFrameReceiver();
        }
      }
    }
  }
}

uint64_t getTofGroupPreviewMasterChannel(void *a1)
{
  if (a1)
  {
    uint64_t v2 = *((void *)a1 + 3);
    unsigned __int16 SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(v2, 1785950322);
    uint64_t v4 = *(void *)(v2 + 4384);
    int v5 = *(_DWORD *)(v4 + 96 * SensorChannel + 60);
    if (v5 && (uint64_t Count = CFArrayGetCount(*((CFArrayRef *)a1 + 15))) != 0)
    {
      CFIndex v7 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(*((CFArrayRef *)a1 + 15), v7);
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        unsigned int v9 = *(_DWORD *)(DerivedStorage + 132);
        if (v5 == *(_DWORD *)(v4 + 96 * v9 + 60)
          && *(unsigned char *)(DerivedStorage + 3896)
          && *(void *)(DerivedStorage + 136))
        {
          break;
        }
        if (Count == ++v7) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      LOWORD(v9) = -1;
    }
  }
  else
  {
    LOWORD(v9) = -1;
  }
  return (unsigned __int16)v9;
}

uint64_t GraphTeardown(uint64_t a1, int a2)
{
  uint64_t v4 = *(H16ISP::H16ISPFilterGraphManager **)(a1 + 4472);
  if (v4)
  {
    H16ISP::H16ISPFilterGraphManager::Deactivate(v4);
    uint64_t v5 = *(void *)(a1 + 4472);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *(void *)(a1 + 4472) = 0;
  }
  uint64_t result = *(void *)(a1 + 4240);
  if (result)
  {
    if (!*(void *)(a1 + 3888))
    {
      H16ISP::H16ISPFilterGraphManager::Deactivate((H16ISP::H16ISPFilterGraphManager *)result);
      uint64_t result = *(void *)(a1 + 4240);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      goto LABEL_21;
    }
    int v10 = 0;
    uint64_t result = H16ISP::H16ISPFilterGraphManager::GetNode((void *)result, 3, &v10);
    if (!result)
    {
      uint64_t result = (uint64_t)v10;
      if (v10) {
        uint64_t result = H16ISP::H16ISPGraphFrameSyncNode::DisableChannel(v10, *(_DWORD *)(a1 + 132));
      }
    }
    if (a2)
    {
      H16ISP::H16ISPFilterGraphManager::Deactivate(*(H16ISP::H16ISPFilterGraphManager **)(a1 + 4240));
      uint64_t v7 = *(void *)(a1 + 4240);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 3888));
      if (result >= 1)
      {
        for (CFIndex i = 0; i < result; ++i)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3888), i);
          FigCaptureStreamGetFigBaseObject();
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (DerivedStorage) {
            *(void *)(DerivedStorage + 4240) = 0;
          }
          uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 3888));
        }
      }
LABEL_21:
      *(void *)(a1 + 4240) = 0;
    }
  }
  return result;
}

uint64_t std::unordered_map<unsigned int,H16ISP::H16ISPFrameReceiverBufferPoolType>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (CFIndex i = *(unsigned int **)(a2 + 16); i; CFIndex i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>(a1, i + 4, (void *)i + 2);
  return a1;
}

void sub_2468EABAC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

FILE *PearlCalibrationNode_IsfHistoryRead(unsigned char *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = *(xpc_connection_t **)(a3 + 200);
  if (v5)
  {
    LODWORD(v9) = 4;
    H16ISP::H16ISPServicesRemote::GetProperty(v5, &v9);
    uint64_t result = (FILE *)memcpy(a1, v10, 0xE38uLL);
    long long v7 = v12;
    *a2 = v11;
    a2[1] = v7;
  }
  else
  {
    readAnalyticsIsfThresholds((uint64_t)a2, (uint64_t)a2);
    uint64_t result = fopen("/var/mobile/Library/ISP/Pearl/IsfHistory.bin", "rb");
    if (result)
    {
      CFNumberRef v8 = result;
      fread(a1, 0xE38uLL, 1uLL, result);
      return (FILE *)fclose(v8);
    }
    else
    {
      *(_DWORD *)a1 = 3;
      a1[4] = 1;
    }
  }
  return result;
}

void PearlCalibrationNode_IsfHistoryWrite(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(v6 + 200);
  if (v7)
  {
    memcpy(v13, v2, sizeof(v13));
    long long v8 = v4[1];
    long long v14 = *v4;
    long long v15 = v8;
    LODWORD(v12) = 4;
    H16ISP::H16ISPServicesRemote::SetProperty(v7, &v12);
  }
  else
  {
    writeAnalyticsIsfThresholds(v3);
    xpc_object_t v9 = fopen("/var/mobile/Library/ISP/Pearl/IsfHistory.bin.bak", "wb");
    if (v9)
    {
      int v10 = v9;
      fwrite(v5, 0xE38uLL, 1uLL, v9);
      fclose(v10);
      rename((const std::__fs::filesystem::path *)"/var/mobile/Library/ISP/Pearl/IsfHistory.bin.bak", (const std::__fs::filesystem::path *)"/var/mobile/Library/ISP/Pearl/IsfHistory.bin", v11);
    }
  }
}

uint64_t PearlCalibrationNode_PceCalibWrite(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = (const void *)v2;
  uint64_t v10 = *MEMORY[0x263EF8340];
  kdebug_trace();
  uint64_t v6 = *(void *)(v4 + 200);
  if (v6)
  {
    memcpy(v9, v5, sizeof(v9));
    LODWORD(v8) = 3;
    return H16ISP::H16ISPServicesRemote::SetProperty(v6, &v8);
  }
  else
  {
    return PCECalibration::save(v5);
  }
}

void Matrix<float>::Transpose(uint64_t a1)
{
  Matrix<float>::Matrix((uint64_t)&v1, a1, 0, -1);
}

void sub_2468EAF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Matrix<float>::~Matrix(v9);
  Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Matrix<float>::operator*(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v5 = a3;
  Matrix<float>::Matrix(a2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  vDSPVsmul<float>(*(const float **)(a1 + 8), 1, &v5, *(float **)(a2 + 8), 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

void sub_2468EAFF4(_Unwind_Exception *a1)
{
  Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void Matrix<float>::operator*(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_2468EB058(_Unwind_Exception *a1)
{
  Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void Matrix<float>::operator-(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if (v4 != *(_DWORD *)(a1 + 20) || (int v7 = *(_DWORD *)(a2 + 16), v7 != *(_DWORD *)(a1 + 16))) {
    Matrix<float>::operator-();
  }
  Matrix<float>::Matrix(a3, v7, v4);
  vDSPVsub<float>(*(const float **)(a1 + 8), 1, *(const float **)(a2 + 8), 1, *(float **)(a3 + 8), 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

void sub_2468EB0EC(_Unwind_Exception *a1)
{
  Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<camera_module_description,camera_module_description>,std::__map_value_compare<camera_module_description,std::__value_type<camera_module_description,camera_module_description>,std::less<camera_module_description>,true>,std::allocator<std::__value_type<camera_module_description,camera_module_description>>>::__emplace_unique_key_args<camera_module_description,std::piecewise_construct_t const&,std::tuple<camera_module_description&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    long long v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void Matrix<float>::Matrix<double>(void *a1)
{
  *a1 = &unk_26FAEAFE0;
  operator new[]();
}

void Matrix<float>::Matrix(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_26FAEAFE0;
  int v4 = *(_DWORD *)(a2 + 20);
  int v5 = *(_DWORD *)(a2 + 16) - a3;
  if (a4 != -1) {
    int v5 = a4;
  }
  uint64_t v6 = *(void *)(a2 + 8) + 4 * (v4 * a3);
  int v7 = &unk_26FAEAFE0;
  uint64_t v8 = v6;
  int v9 = v5;
  int v10 = v4;
  char v11 = 0;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  operator new[]();
}

void sub_2468EB340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Matrix<float>::Matrix(uint64_t result, int a2, int a3)
{
  *(void *)uint64_t result = &unk_26FAEAFE0;
  if (a3 * a2) {
    operator new[]();
  }
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

{
  *(void *)uint64_t result = &unk_26FAEAFE0;
  if (a3 * a2) {
    operator new[]();
  }
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

void Matrix<float>::MultAxBToC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 20);
  if (v6 == 1 && v7 == 1)
  {
    Matrix<float>::ScalarProduct(a2, *(const float **)(a1 + 8), (uint64_t)v13);
    Matrix<float>::Resize(a3, v15, v16);
LABEL_15:
    memcpy(*(void **)(a3 + 8), __src, 4 * *(unsigned int *)(a3 + 16) * (unint64_t)*(unsigned int *)(a3 + 20));
    Matrix<float>::~Matrix((uint64_t)v13);
    goto LABEL_16;
  }
  int v10 = *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  if (v9 == 1 && v10 == 1)
  {
    Matrix<float>::ScalarProduct(a1, *(const float **)(a2 + 8), (uint64_t)v13);
    Matrix<float>::Resize(a3, v15, v16);
    goto LABEL_15;
  }
  if (v7 != v10) {
    Matrix<float>::MultAxBToC();
  }
  if (v6 != *(_DWORD *)(a3 + 16) || v9 != *(_DWORD *)(a3 + 20)) {
    Matrix<float>::MultAxBToC();
  }
LABEL_16:
  LODWORD(v12) = *(_DWORD *)(a1 + 20);
  vDSPMmul<float>(*(const float **)(a1 + 8), 1, *(const float **)(a2 + 8), 1, *(float **)(a3 + 8), 1, *(_DWORD *)(a1 + 16), *(_DWORD *)(a3 + 20), v12);
}

void sub_2468EB4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void Matrix<float>::ScalarProduct(uint64_t a1@<X0>, const float *a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_2468EB558(_Unwind_Exception *a1)
{
  Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

CFArrayRef SuperWideActiveNondisruptiveStreamingFormatsIncludesARawPlusConfig(uint64_t a1, uint64_t a2)
{
  CFArrayRef result = *(const __CFArray **)(a2 + 104);
  if (result)
  {
    if (CFArrayGetCount(result) < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v5 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 104), v5);
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *(_DWORD *)(DerivedStorage + 132), 1919251319))
        {
          if (*(unsigned char *)(DerivedStorage + 4466)) {
            break;
          }
        }
        if (++v5 >= CFArrayGetCount(*(CFArrayRef *)(a2 + 104))) {
          return 0;
        }
      }
      return (const __CFArray *)1;
    }
  }
  return result;
}

uint64_t ChannelMaskForSharedRawPool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(a1 + 24), 1919246706);
  if (SuperWideActiveNondisruptiveStreamingFormatsIncludesARawPlusConfig(a1, a2))
  {
    if (SensorChannel < 0)
    {
      int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v7 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        ChannelMaskForSharedRawPool();
      }
    }
    else
    {
      return (1 << SensorChannel) & a3;
    }
  }
  return a3;
}

uint64_t ChannelMaskForSharedHiResRawPool(uint64_t a1, uint64_t a2)
{
  int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(a1 + 24), 1919246706);
  int v5 = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(a1 + 24), 1919251319);
  if ((SensorChannel & 0x80000000) == 0 && (v5 & 0x80000000) == 0) {
    return ((1 << v5) | (1 << SensorChannel)) & a2;
  }
  int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v6 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    ChannelMaskForSharedHiResRawPool();
  }
  return a2;
}

uint64_t ChannelMaskForSharedRawPlusPool(uint64_t a1, uint64_t a2)
{
  int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(a1 + 24), 1919251564);
  int v5 = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(a1 + 24), 1919251319);
  if ((SensorChannel & 0x80000000) == 0 && (v5 & 0x80000000) == 0) {
    return ((1 << v5) | (1 << SensorChannel)) & a2;
  }
  int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v6 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    ChannelMaskForSharedRawPlusPool();
  }
  return a2;
}

uint64_t SetSharedBufferPoolConfigurations(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(void *)(a2 + 144)
    && (uint64_t v8 = *(H16ISP::H16ISPDevice **)(a1 + 24),
        __int16 v9 = *(_WORD *)(a2 + 8) - 1,
        __int16 v10 = ChannelMaskForSharedRawPool(a1, a2, a3),
        uint64_t v11 = H16ISP::H16ISPDevice::SetSharedBufferPoolConfiguration(v8, v9, v10, 1, a4),
        v11))
  {
    uint64_t v12 = v11;
    uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetSharedBufferPoolConfigurations();
    }
  }
  else if (*(void *)(a2 + 200) {
         && (long long v14 = *(H16ISP::H16ISPDevice **)(a1 + 24),
  }
             __int16 v15 = *(_WORD *)(a2 + 8) - 1,
             __int16 v16 = ChannelMaskForSharedHiResRawPool(a1, a3),
             uint64_t v17 = H16ISP::H16ISPDevice::SetSharedBufferPoolConfiguration(v14, v15, v16, 7, a4),
             v17))
  {
    uint64_t v12 = v17;
    uint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v18 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      SetSharedBufferPoolConfigurations();
    }
  }
  else if (*(void *)(a2 + 256))
  {
    CFNumberRef v19 = *(H16ISP::H16ISPDevice **)(a1 + 24);
    __int16 v20 = *(_WORD *)(a2 + 8) - 1;
    __int16 v21 = ChannelMaskForSharedRawPlusPool(a1, a3);
    uint64_t v12 = H16ISP::H16ISPDevice::SetSharedBufferPoolConfiguration(v19, v20, v21, 8, a4);
    if (v12)
    {
      uint64_t v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v22 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        SetSharedBufferPoolConfigurations();
      }
    }
  }
  else
  {
    return 0;
  }
  return v12;
}

uint64_t H16ISPSensorSharedRawPoolConfigurationFindIndexForPool(uint64_t a1, __CVPixelBufferPool *a2)
{
  *(void *)int v5 = 0;
  if (H16ISPSensorRawPoolConfigurationGetBufferWidthAndHeight(a2, &v5[1], v5)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  for (CFIndex i = (_DWORD *)(a1 + 176); *(i - 1) != v5[1] || *i != v5[0]; i += 14)
  {
    if (++result == 3) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

double InitBracketingTuningSet(_DWORD *a1)
{
  bzero(a1, 0x40uLL);
  a1[1] = 0;
  *a1 = 8421504;
  *((_WORD *)a1 + 6) = 2618;
  *((unsigned char *)a1 + 28) = 0;
  *(void *)&double result = 0x200000000;
  *(void *)(a1 + 5) = 0x200000000;
  a1[12] = 0;
  *((_WORD *)a1 + 26) = 0;
  *((void *)a1 + 4) = 0x8080808080808080;
  *((_WORD *)a1 + 20) = -32640;
  *(_DWORD *)((char *)a1 + 42) = 0;
  return result;
}

uint64_t H16ISPProcessingSessionInvalidate(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v22 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionInvalidate();
    }
    return 4294954516;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v23 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionInvalidate();
    }
    return 4294954516;
  }
  uint64_t v2 = DerivedStorage;
  uint64_t v3 = (pthread_mutex_t *)(DerivedStorage + 1248);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 1248));
  if (!*(unsigned char *)v2)
  {
    *(unsigned char *)uint64_t v2 = 1;
    int v4 = *(const void **)(v2 + 48);
    if (v4)
    {
      _Block_release(v4);
      *(void *)(v2 + 48) = 0;
    }
    int v5 = *(const void **)(v2 + 40);
    if (v5)
    {
      _Block_release(v5);
      *(void *)(v2 + 40) = 0;
    }
    int v6 = *(const void **)(v2 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v2 + 24) = 0;
    }
    if (*(unsigned char *)(v2 + 1242))
    {
      if (*(unsigned char *)(v2 + 1320))
      {
        H16ISPMetrics::StopTimer(*(H16ISPMetrics **)(v2 + 1328));
        int v7 = *(H16ISPMetrics **)(v2 + 1328);
        if (v7)
        {
          H16ISPMetrics::~H16ISPMetrics(v7);
          MEMORY[0x24C53D6E0]();
        }
        uint64_t v8 = *(H16ISPMetrics **)(v2 + 1336);
        if (v8)
        {
          H16ISPMetrics::~H16ISPMetrics(v8);
          MEMORY[0x24C53D6E0]();
        }
        __int16 v9 = *(H16ISPMetrics **)(v2 + 1344);
        if (v9)
        {
          H16ISPMetrics::~H16ISPMetrics(v9);
          MEMORY[0x24C53D6E0]();
        }
        __int16 v10 = *(H16ISPMetrics **)(v2 + 1352);
        if (v10)
        {
          H16ISPMetrics::~H16ISPMetrics(v10);
          MEMORY[0x24C53D6E0]();
        }
        uint64_t v11 = *(H16ISPMetrics **)(v2 + 1360);
        if (v11)
        {
          H16ISPMetrics::~H16ISPMetrics(v11);
          MEMORY[0x24C53D6E0]();
        }
        uint64_t v12 = *(H16ISPMetrics **)(v2 + 1368);
        if (v12)
        {
          H16ISPMetrics::~H16ISPMetrics(v12);
          MEMORY[0x24C53D6E0]();
        }
      }
      uint64_t v13 = *(H16ISP::H16ISPGeneralProcessFrameReceiver **)(v2 + 1224);
      if (v13) {
        H16ISP::H16ISPGeneralProcessFrameReceiver::stopReceive(v13);
      }
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      pthread_mutex_lock((pthread_mutex_t *)(v14 + 32));
      if (v14 && !*(unsigned char *)v14) {
        H16ISP::H16ISPDevice::ISP_GeneralProcessStop(*(H16ISP::H16ISPDevice **)(v2 + 56), *(_WORD *)(v2 + 1240));
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v14 + 32));
      __int16 v16 = *(H16ISP::H16ISPFrameReceiverBufferPool **)(v2 + 72);
      if (v16)
      {
        H16ISP::H16ISPFrameReceiverBufferPool::deactivatePool(v16);
        uint64_t v17 = *(H16ISP::H16ISPFrameReceiverBufferPool **)(v2 + 72);
        if (v17)
        {
          H16ISP::H16ISPFrameReceiverBufferPool::~H16ISPFrameReceiverBufferPool(v17);
          MEMORY[0x24C53D6E0]();
        }
        *(void *)(v2 + 72) = 0;
      }
      uint64_t v18 = *(H16ISP::H16ISPFrameReceiverBufferPool **)(v2 + 64);
      if (v18)
      {
        H16ISP::H16ISPFrameReceiverBufferPool::deactivatePool(v18);
        CFNumberRef v19 = *(H16ISP::H16ISPFrameReceiverBufferPool **)(v2 + 64);
        if (v19)
        {
          H16ISP::H16ISPFrameReceiverBufferPool::~H16ISPFrameReceiverBufferPool(v19);
          MEMORY[0x24C53D6E0]();
        }
        *(void *)(v2 + 64) = 0;
      }
      __int16 v20 = (H16ISP **)(v2 + 1224);
      __int16 v21 = *(const void **)(v2 + 88);
      if (v21)
      {
        CFRelease(v21);
        *(void *)(v2 + 88) = 0;
      }
      if (*v20) {
        H16ISP::DestroyH16ISPGeneralProcessFrameReceiver(*v20, v15);
      }
      *(unsigned char *)(v2 + 1242) = 0;
      const void *v20 = 0;
      *(void *)(v2 + 1232) = 0;
    }
    else
    {
      uint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v25 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        H16ISPProcessingSessionInvalidate();
      }
    }
    CFRelease(*(CFTypeRef *)(v2 + 8));
    uint64_t v26 = *(const void **)(v2 + 16);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(v2 + 16) = 0;
    }
  }
  pthread_mutex_unlock(v3);
  return 0;
}

void H16ISPProcessingSessionFinalize(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v3 = DerivedStorage;
      H16ISPProcessingSessionInvalidate(a1);
      pthread_mutex_destroy((pthread_mutex_t *)(v3 + 1248));
    }
    else
    {
      int v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v4 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        H16ISPProcessingSessionInvalidate();
      }
    }
  }
}

uint64_t H16ISPProcessingSessionCopyProperty(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    __int16 v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionCopyProperty(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    return 4294954516;
  }
  uint64_t v8 = DerivedStorage;
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  __int16 v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  uint64_t v11 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    __int16 v10 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_INFO, "H16ISPProcessingSessionCopyProperty: \n\n", buf, 2u);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v8 + 1248));
  if (*(unsigned char *)v8)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 1248));
    uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v11)
    {
      uint64_t v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionCopyProperty(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    uint64_t v20 = 4294954511;
    FigSignalError(4294954511, "invalidated");
  }
  else
  {
    unsigned int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 16), a2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (valuePtr <= 0x169
        && (uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))processingSessionProperties[5 * valuePtr + 3]) != 0)
      {
        uint64_t v20 = v31(a3, a4, v8, v9);
      }
      else
      {
        uint64_t v20 = 4294954512;
      }
    }
    else
    {
      uint64_t v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v11)
      {
        uint64_t v32 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v32;
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        H16ISPProcessingSessionCopyProperty(a2, v32);
      }
      uint64_t v20 = 4294954509;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 1248));
  }
  return v20;
}

uint64_t H16ISPProcessingSessionSetProperty(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v17 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionSetProperty(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    return 4294954516;
  }
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 1248));
  if (*(unsigned char *)v6)
  {
    uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionSetProperty(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    uint64_t v16 = 4294954511;
    FigSignalError(4294954511, "invalidated");
  }
  else
  {
    unsigned int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 16), a2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (valuePtr <= 0x169
        && (uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))processingSessionProperties[5 * valuePtr + 2]) != 0)
      {
        uint64_t v16 = v26(a3, v6, v7);
      }
      else
      {
        uint64_t v16 = 4294954512;
      }
    }
    else
    {
      uint64_t v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v27 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        H16ISPProcessingSessionCopyProperty(a2, v27);
      }
      uint64_t v16 = 4294954509;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 1248));
  return v16;
}

uint64_t FigSignalError(uint64_t a1, const char *a2)
{
  int v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v4 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    FigSignalError((uint64_t)a2, a1, v4);
  }
  return a1;
}

uint64_t H16ISPProcessingSessionPrepare(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v2 = DerivedStorage;
      uint64_t v3 = (pthread_mutex_t *)(DerivedStorage + 1248);
      pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 1248));
      if (*(unsigned char *)v2)
      {
        uint64_t v4 = 4294954511;
LABEL_34:
        pthread_mutex_unlock(v3);
        return v4;
      }
      __int16 v49 = 0;
      if (*(unsigned char *)(v2 + 1242))
      {
        uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v13 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          H16ISPProcessingSessionPrepare(v13, v14, v15, v16, v17, v18, v19, v20);
        }
LABEL_31:
        uint64_t v4 = 4294954516;
        goto LABEL_32;
      }
      int v21 = *(_DWORD *)(v2 + 32) - 1;
      if (v21 >= 6)
      {
        uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v26 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v26;
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          H16ISPProcessingSessionPrepare(v26, v27, v28, v29, v30, v31, v32, v33);
        }
        goto LABEL_31;
      }
      *(_DWORD *)(v2 + 80) = dword_2469DAD88[v21];
      uint64_t v22 = CMBaseObjectGetDerivedStorage();
      uint64_t v23 = (pthread_mutex_t *)(v22 + 32);
      pthread_mutex_lock((pthread_mutex_t *)(v22 + 32));
      if (v22 && !*(unsigned char *)v22)
      {
        int v24 = H16ISP::H16ISPDevice::ISP_GeneralProcessStart(*(H16ISP::H16ISPDevice **)(v2 + 56), *(_DWORD *)(v2 + 80), &v49);
        pthread_mutex_unlock(v23);
        if (!v24)
        {
          *(_WORD *)(v2 + 1240) = v49;
          uint64_t v36 = *(void *)(v2 + 56);
          v48[4] = 0;
          v48[5] = 0;
          v48[3] = v2;
          v48[1] = v36;
          v48[2] = MyH16ISPGeneralProcessFrameReceivedProc;
          v48[0] = v2 + 1224;
          if (H16ISP::CreateH16ISPGeneralProcessFrameReceiver((uint64_t)v48))
          {
            uint64_t v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v37 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v37;
            }
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
              H16ISPProcessingSessionPrepare();
            }
          }
          else
          {
            if (*(void *)(v2 + 1224))
            {
              *(void *)(v2 + 1232) = MyH16ISPGeneralProcessFrameReceivedProc;
              H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(v2 + 56), 0, 0, v47, v50);
              H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(v2 + 56), 1u, 0, v47, v50);
              int v38 = *(_DWORD *)(v2 + 80);
              if ((v38 - 5) >= 2 && v38 != 1)
              {
                if (!v38) {
                  operator new();
                }
                operator new();
              }
              operator new();
            }
            uint64_t v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v39 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v39;
            }
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
              H16ISPProcessingSessionPrepare(v39, v40, v41, v42, v43, v44, v45, v46);
            }
          }
          goto LABEL_45;
        }
      }
      else
      {
        pthread_mutex_unlock(v23);
        int v24 = -536870212;
      }
      uint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v25 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        H16ISPProcessingSessionPrepare();
      }
      if (v24 <= -536870207)
      {
        if (v24 != -536870210)
        {
          if (v24 == -536870208)
          {
            uint64_t v4 = 4294954511;
            goto LABEL_32;
          }
          goto LABEL_45;
        }
        uint64_t v4 = 4294954510;
LABEL_32:
        uint64_t v34 = *(void *)(v2 + 40);
        if (v34) {
          (*(void (**)(uint64_t, uint64_t))(v34 + 16))(v34, 1);
        }
        goto LABEL_34;
      }
      uint64_t v4 = 4294954516;
      if (v24 == -536870206 || v24 == -536870184) {
        goto LABEL_32;
      }
LABEL_45:
      uint64_t v4 = 4294954513;
      goto LABEL_32;
    }
    int v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionPrepare(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return 4294954516;
}

void sub_2468ECC94(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10E0C404726C66ELL);
  _Unwind_Resume(a1);
}

uint64_t H16ISPProcessingSessionProcessBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v31 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionProcessBuffer(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    return 4294954516;
  }
  uint64_t v8 = DerivedStorage;
  uint64_t v9 = (pthread_mutex_t *)(DerivedStorage + 1248);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 1248));
  if (*(unsigned char *)(v8 + 1320))
  {
    H16ISPMetrics::StopTimer(*(H16ISPMetrics **)(v8 + 1328));
    H16ISPMetrics::StartTimer(*(H16ISPMetrics **)(v8 + 1328));
    mach_absolute_time();
    mach_absolute_time();
  }
  if (a4 <= 20 && a5 && *(unsigned char *)(v8 + 1242))
  {
    if (a4 < 1)
    {
LABEL_22:
      if (!*(unsigned char *)v8) {
        operator new();
      }
      uint64_t v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v22 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        H16ISPProcessingSessionProcessBuffer(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      uint64_t v30 = 4294954511;
    }
    else
    {
      uint64_t v65 = v9;
      char v10 = 0;
      size_t Width = 0;
      size_t Height = 0;
      size_t v66 = 0;
      size_t v67 = 0;
      char v68 = 0;
      uint64_t v13 = (const void *)*MEMORY[0x263F2C1C8];
      uint64_t v14 = a5;
      uint64_t v15 = (const void *)*MEMORY[0x263F2C1D0];
      uint64_t v16 = a4;
      uint64_t v17 = (CFTypeRef *)(v14 + 8);
      do
      {
        if (!*v17
          || (CFStringRef v18 = (const __CFString *)*(v17 - 1)) == 0
          || (GetISPProcessingSessionOutputIndex(v18), CFTypeID v19 = CFGetTypeID(*v17), v19 != CVPixelBufferGetTypeID()))
        {
          uint64_t v47 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v47 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v47;
          }
          uint64_t v9 = v65;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
            H16ISPProcessingSessionProcessBuffer(v47, v48, v49, v50, v51, v52, v53, v54);
          }
          goto LABEL_41;
        }
        if (CFEqual(*(v17 - 1), v13))
        {
          uint64_t v20 = (__CVBuffer *)*v17;
          size_t Width = CVPixelBufferGetWidth((CVPixelBufferRef)*v17);
          size_t Height = CVPixelBufferGetHeight(v20);
          char v10 = 1;
        }
        else if (CFEqual(*(v17 - 1), v15))
        {
          int v21 = (__CVBuffer *)*v17;
          size_t v67 = CVPixelBufferGetWidth((CVPixelBufferRef)*v17);
          size_t v66 = CVPixelBufferGetHeight(v21);
          char v68 = 1;
        }
        v17 += 2;
        --v16;
      }
      while (v16);
      uint64_t v9 = v65;
      if ((v68 & 1) == 0) {
        goto LABEL_22;
      }
      if ((v10 & 1) == 0)
      {
        uint64_t v56 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v56 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v56;
        }
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
          H16ISPProcessingSessionProcessBuffer(v56, v57, v58, v59, v60, v61, v62, v63);
        }
        goto LABEL_41;
      }
      if (v67 == Width >> 2 && v66 == Height >> 2) {
        goto LABEL_22;
      }
      unsigned __int16 v64 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned __int16 v64 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v64;
      }
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316162;
        long long v70 = "H16ISPProcessingSessionProcessBuffer";
        __int16 v71 = 2048;
        size_t v72 = Width;
        __int16 v73 = 2048;
        size_t v74 = Height;
        __int16 v75 = 2048;
        size_t v76 = v67;
        __int16 v77 = 2048;
        size_t v78 = v66;
        _os_log_error_impl(&dword_24680F000, v64, OS_LOG_TYPE_ERROR, "%s - Primary scaler low resolution buffer is not quarter res (primary=%zu x %zu, lowres=%zu x %zu\n", buf, 0x34u);
      }
      uint64_t v30 = 4294954516;
      uint64_t v9 = v65;
    }
  }
  else
  {
    uint64_t v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v39 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v39;
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionProcessBuffer(v39, v40, v41, v42, v43, v44, v45, v46);
    }
LABEL_41:
    uint64_t v30 = 4294954516;
  }
  pthread_mutex_unlock(v9);
  return v30;
}

uint64_t H16ISPProcessingSessionCompleteBuffers(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionCompleteBuffers(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    return 4294954516;
  }
  uint64_t v2 = DerivedStorage;
  uint64_t v3 = (pthread_mutex_t *)(DerivedStorage + 1248);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 1248));
  if (*(unsigned char *)(v2 + 1242))
  {
    if (*(unsigned char *)v2)
    {
      uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v4 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        H16ISPProcessingSessionCompleteBuffers(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      uint64_t v12 = 4294954511;
    }
    else
    {
      uint64_t v30 = *(H16ISP::H16ISPGeneralProcessFrameReceiver **)(v2 + 1224);
      if (v30)
      {
        uint64_t v12 = H16ISP::H16ISPGeneralProcessFrameReceiver::completeAllRequests(v30);
        if (v12)
        {
          uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v31 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
          }
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            H16ISPProcessingSessionCompleteBuffers();
          }
          uint64_t v12 = 4294954516;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
    }
  }
  else
  {
    int v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      H16ISPProcessingSessionCompleteBuffers(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    uint64_t v12 = 4294954513;
  }
  pthread_mutex_unlock(v3);
  return v12;
}

void MyH16ISPGeneralProcessFrameReceivedProc(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (*(_DWORD *)(a2 + 948) || !*(void *)(a1 + 48)) {
      return;
    }
    if (*(_DWORD *)(a2 + 1296))
    {
      unint64_t v4 = 0;
      char v5 = 0;
      uint64_t v6 = (CFTypeRef *)(a2 + 976);
      do
      {
        if (CFEqual(*v6, @"ActionsList") || CFEqual(*v6, @"OperationsList")) {
          char v5 = 1;
        }
        ++v4;
        unint64_t v7 = *(unsigned int *)(a2 + 1296);
        v6 += 2;
      }
      while (v4 < v7);
      if (v5)
      {
        if (v7)
        {
          uint64_t v8 = (long long *)(a2 + 976);
          uint64_t v9 = v95;
          uint64_t v10 = *(unsigned int *)(a2 + 1296);
          do
          {
            long long v11 = *v8++;
            *v9++ = v11;
            --v10;
          }
          while (v10);
          int v12 = v7;
        }
        else
        {
          int v12 = 0;
          char v5 = 1;
        }
        goto LABEL_29;
      }
      if (v7)
      {
        uint64_t v21 = 0;
        int v12 = 0;
        uint64_t v22 = *(unsigned int *)(a2 + 944);
        do
        {
          if (v22)
          {
            uint64_t v23 = a2 + 16 * v21;
            uint64_t v24 = (void *)(v23 + 976);
            uint64_t v25 = *(void *)(v23 + 984);
            uint64_t v26 = v22;
            uint64_t v27 = (void *)(a2 + 40);
            do
            {
              if (*v27 == v25)
              {
                uint64_t v28 = &v95[v12];
                *uint64_t v28 = *v24;
                v28[1] = v25;
                ++v12;
              }
              ++v27;
              --v26;
            }
            while (v26);
          }
          ++v21;
        }
        while (v21 != v7);
        char v5 = 0;
LABEL_29:
        if (*(unsigned char *)(a1 + 1320))
        {
          *(void *)(a2 + 1312) = mach_absolute_time();
          *(void *)(a2 + 1376) = mach_absolute_time();
          *(void *)(a2 + 1392) = *(void *)(a2 + 952);
          H16ISPMetrics::AddSample(*(H16ISPMetrics **)(a1 + 1336), *(void *)(a2 + 1320), *(void *)(a2 + 1328));
          H16ISPMetrics::AddSample(*(H16ISPMetrics **)(a1 + 1344), *(void *)(a2 + 1336), *(void *)(a2 + 1344));
          H16ISPMetrics::AddSample(*(H16ISPMetrics **)(a1 + 1352), *(void *)(a2 + 1368), *(void *)(a2 + 1376));
          H16ISPMetrics::AddSample(*(H16ISPMetrics **)(a1 + 1360), *(void *)(a2 + 1384), *(void *)(a2 + 1392));
          H16ISPMetrics::AddSample(*(H16ISPMetrics **)(a1 + 1368), *(void *)(a2 + 1304), *(void *)(a2 + 1312));
          if ((dword_26B11B9F0 & 0x80000) != 0)
          {
            uint64_t v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v29 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v29;
            }
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v30 = *(void *)(a2 + 960);
              uint64_t v31 = *(void *)(a2 + 1320);
              uint64_t v32 = *(void *)(a2 + 1328);
              uint64_t v33 = *(void *)(a2 + 1336);
              uint64_t v34 = *(void *)(a2 + 1344);
              uint64_t v35 = *(void *)(a2 + 1368);
              uint64_t v36 = *(void *)(a2 + 1376);
              uint64_t v37 = *(void *)(a2 + 1384);
              uint64_t v38 = *(void *)(a2 + 1392);
              uint64_t v39 = *(void *)(a2 + 1304);
              uint64_t v40 = *(void *)(a2 + 1312);
              *(_DWORD *)int buf = 134220544;
              uint64_t v74 = v30;
              __int16 v75 = 2048;
              uint64_t v76 = v31;
              __int16 v77 = 2048;
              uint64_t v78 = v32;
              __int16 v79 = 2048;
              uint64_t v80 = v33;
              __int16 v81 = 2048;
              uint64_t v82 = v34;
              __int16 v83 = 2048;
              uint64_t v84 = v35;
              __int16 v85 = 2048;
              uint64_t v86 = v36;
              __int16 v87 = 2048;
              uint64_t v88 = v37;
              __int16 v89 = 2048;
              uint64_t v90 = v38;
              __int16 v91 = 2048;
              uint64_t v92 = v39;
              __int16 v93 = 2048;
              uint64_t v94 = v40;
              _os_log_impl(&dword_24680F000, v29, OS_LOG_TYPE_DEFAULT, "Sample:%p,%lld,%lld,%lld,%lld,%lld,%lld,%lld,%lld,%lld,%lld\n", buf, 0x70u);
            }
          }
          H16ISPMetrics::GetMetricsSummary(*(_DWORD **)(a1 + 1328), buf);
          if (HIDWORD(v74) == v74 - 2)
          {
            uint64_t v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            uint64_t v42 = &_os_log_internal;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v41 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long v70 = 0;
              _os_log_impl(&dword_24680F000, v41, OS_LOG_TYPE_DEFAULT, "*** Metrics report for GP Session ***\n", v70, 2u);
              uint64_t v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            }
            if (v41 == v42)
            {
              uint64_t v41 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long v70 = 0;
              _os_log_impl(&dword_24680F000, v41, OS_LOG_TYPE_DEFAULT, "*** CM command cadence ***\n", v70, 2u);
            }
            H16ISPMetrics::PrintMetricsSummary(*(H16ISPMetrics **)(a1 + 1328));
            uint64_t v43 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v42)
            {
              uint64_t v43 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v43;
            }
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long v70 = 0;
              _os_log_impl(&dword_24680F000, v43, OS_LOG_TYPE_DEFAULT, "*** Driver Setup time ***\n", v70, 2u);
            }
            H16ISPMetrics::PrintMetricsSummary(*(H16ISPMetrics **)(a1 + 1336));
            uint64_t v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v42)
            {
              uint64_t v44 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
            }
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long v70 = 0;
              _os_log_impl(&dword_24680F000, v44, OS_LOG_TYPE_DEFAULT, "*** FW Setup time ***\n", v70, 2u);
            }
            H16ISPMetrics::PrintMetricsSummary(*(H16ISPMetrics **)(a1 + 1344));
            uint64_t v45 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v42)
            {
              uint64_t v45 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v45;
            }
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long v70 = 0;
              _os_log_impl(&dword_24680F000, v45, OS_LOG_TYPE_DEFAULT, "*** Request Processing time (Userspace) ***\n", v70, 2u);
            }
            H16ISPMetrics::PrintMetricsSummary(*(H16ISPMetrics **)(a1 + 1352));
            uint64_t v46 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v42)
            {
              uint64_t v46 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v46;
            }
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long v70 = 0;
              _os_log_impl(&dword_24680F000, v46, OS_LOG_TYPE_DEFAULT, "*** Request Processing time (Kernel) ***\n", v70, 2u);
            }
            H16ISPMetrics::PrintMetricsSummary(*(H16ISPMetrics **)(a1 + 1360));
            uint64_t v47 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v42)
            {
              uint64_t v47 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v47;
            }
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long v70 = 0;
              _os_log_impl(&dword_24680F000, v47, OS_LOG_TYPE_DEFAULT, "*** Total Processing time ***\n", v70, 2u);
            }
            H16ISPMetrics::PrintMetricsSummary(*(H16ISPMetrics **)(a1 + 1368));
            uint64_t v48 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v42)
            {
              uint64_t v48 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v48;
            }
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long v70 = 0;
              _os_log_impl(&dword_24680F000, v48, OS_LOG_TYPE_DEFAULT, "*** Metrics end ***\n", v70, 2u);
            }
          }
        }
        unsigned int v49 = *(_DWORD *)(a1 + 32);
        BOOL v50 = v49 > 6;
        int v51 = (1 << v49) & 0x62;
        if (v50 || v51 == 0)
        {
          if ((v5 & 1) == 0)
          {
            if (*(_DWORD *)(a2 + 944))
            {
              uint64_t v63 = *(const void **)(a2 + 32);
              if (v63)
              {
                CVBufferSetAttachment(*(CVBufferRef *)(a2 + 40), @"RawMetaData", v63, kCVAttachmentMode_ShouldPropagate);
                if (!*(unsigned char *)(a1 + 1312))
                {
                  memset(v70, 0, sizeof(v70));
                  v70[1] = 1;
                  *(_DWORD *)&v70[2] = 0;
                  v70[6] = 0;
                  *(_DWORD *)&v70[10] = 0;
                  *(_DWORD *)&v70[13] = 0;
                  if (byte_26B11BAB0) {
                    v70[18] = 1;
                  }
                  if (byte_26B11BAB1) {
                    v70[19] = 1;
                  }
                  uint64_t v64 = *(void *)(a2 + 40);
                  uint64_t v71 = 0;
                  uint64_t v72 = v64;
                  std::deque<__CVBuffer *>::deque((uint64_t)buf, &v72, 1);
                  v65.n128_u64[0] = 0;
                  H16ISP::GenerateAndAttachCoreMediaMetaDataDictionary(*(void *)(*(void *)(a1 + 56) + 88), *(void *)(a2 + 40), buf, v70, v65);
                  CFStringRef v66 = (const __CFString *)*MEMORY[0x263F2C558];
                  CFStringRef Attachment = (const __CFString *)CVBufferGetAttachment(*(CVBufferRef *)(a2 + 40), (CFStringRef)*MEMORY[0x263F2C558], 0);
                  if (*(_DWORD *)(a2 + 944) >= 2u)
                  {
                    uint64_t v67 = 6;
                    do
                    {
                      CVBufferSetAttachment(*(CVBufferRef *)(a2 + 8 * v67), v66, Attachment, kCVAttachmentMode_ShouldPropagate);
                      unint64_t v68 = v67 - 4;
                      ++v67;
                    }
                    while (v68 < *(unsigned int *)(a2 + 944));
                  }
                  CFRetain(Attachment);
                  long long v69 = (const __CFString **)&v95[v12];
                  __IOSurface *v69 = v66;
                  v69[1] = Attachment;
                  std::deque<__CVBuffer *>::~deque[abi:ne180100](buf);
                  goto LABEL_94;
                }
              }
            }
          }
        }
        else if (*(_DWORD *)(a2 + 944))
        {
          unsigned __int16 v53 = 0;
          do
          {
            uint64_t v54 = a2 + 8 * v53;
            uint64_t v56 = *(__CVBuffer **)(v54 + 40);
            int v55 = (CVPixelBufferRef *)(v54 + 40);
            signed int PixelFormatType = CVPixelBufferGetPixelFormatType(v56);
            unsigned __int16 v58 = v53;
            if (PixelFormatType > 2100848175)
            {
              if (PixelFormatType > 2105042479)
              {
                BOOL v59 = PixelFormatType == 2105046576;
                int v60 = 2105042480;
              }
              else
              {
                BOOL v59 = PixelFormatType == 2100848176;
                int v60 = 2100852272;
              }
            }
            else if (PixelFormatType > 1534617135)
            {
              BOOL v59 = PixelFormatType == 1534617136;
              int v60 = 1534621232;
            }
            else
            {
              BOOL v59 = PixelFormatType == 1530422832;
              int v60 = 1530426928;
            }
            if (v59 || PixelFormatType == v60)
            {
              CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a2 + 32), 0);
              CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 32));
              CVPixelBufferGetIOSurface(*v55);
              IOSurfaceSetCompressedTileDataRegionMemoryUsedOfPlane();
              IOSurfaceSetCompressedTileDataRegionMemoryUsedOfPlane();
              CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 32), 0);
            }
            ++v53;
          }
          while (*(_DWORD *)(a2 + 944) > (unsigned __int16)(v58 + 1));
          CFStringRef Attachment = 0;
          goto LABEL_94;
        }
        CFStringRef Attachment = 0;
LABEL_94:
        if (*(void *)(a2 + 968)) {
          (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
        }
        if (Attachment) {
          CFRelease(Attachment);
        }
        return;
      }
    }
    char v5 = 0;
    int v12 = 0;
    goto LABEL_29;
  }
  uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v13 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    MyH16ISPGeneralProcessFrameReceivedProc(v13, v14, v15, v16, v17, v18, v19, v20);
  }
}

void sub_2468EE3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t GetISPProcessingSessionOutputIndex(const __CFString *a1)
{
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x263F2C1C8])) {
    return 0;
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x263F2C1D8])) {
    return 1;
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x263F2C1C0])) {
    return 2;
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x263F2C1E0])) {
    return 3;
  }
  return 4 * (CFEqual(a1, (CFTypeRef)*MEMORY[0x263F2C1D0]) != 0);
}

uint64_t ISPProcessingSessionProcessBuffer(uint64_t a1, CVBufferRef buffer, void *cf, uint64_t a4, uint64_t a5, const void *a6)
{
  CFStringRef Attachment = 0;
  uint64_t v92 = 0;
  if (*(unsigned char *)(a1 + 1242))
  {
    if (buffer)
    {
      if (a5)
      {
        if (a4)
        {
          if (*(_DWORD *)(a1 + 32) != 2) {
            goto LABEL_26;
          }
          if (cf)
          {
            CFTypeID v12 = CFGetTypeID(cf);
            if (v12 == CVPixelBufferGetTypeID())
            {
              CFStringRef Attachment = (__CVBuffer *)cf;
              CVPixelBufferRetain((CVPixelBufferRef)cf);
            }
LABEL_26:
            uint64_t v18 = *(H16ISP::H16ISPFrameReceiverBufferPool **)(a1 + 64);
            if (!v18)
            {
              uint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v20 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
              }
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
                ISPProcessingSessionProcessBuffer();
              }
LABEL_36:
              uint64_t v14 = 3758096385;
              goto LABEL_37;
            }
            if (H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(v18, &v92, 0))
            {
              uint64_t v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v19 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
              }
              uint64_t v14 = 3758097086;
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
                ISPProcessingSessionProcessBuffer();
              }
LABEL_37:
              if (Attachment) {
                CVPixelBufferRelease(Attachment);
              }
              if (v92) {
                CVPixelBufferRelease(v92);
              }
              return v14;
            }
            CVPixelBufferLockBaseAddress(v92, 0);
            BaseAddress = CVPixelBufferGetBaseAddress(v92);
            size_t DataSize = CVPixelBufferGetDataSize(v92);
            bzero(BaseAddress, DataSize);
            int v24 = 0;
            _WORD *BaseAddress = 1;
            *((_DWORD *)BaseAddress + 1) = 16;
            switch(*(_DWORD *)(a1 + 32))
            {
              case 1:
              case 5:
              case 6:
                unsigned int Length = CFDataGetLength(*(CFDataRef *)a4);
                BytePtr = CFDataGetBytePtr(*(CFDataRef *)a4);
                uint64_t v27 = BytePtr;
                int v28 = *(_DWORD *)(a1 + 32);
                if (v28 == 6)
                {
                  *((_DWORD *)BaseAddress + 11) = 128;
                  if (*(_DWORD *)BytePtr == 1)
                  {
                    if (*((_DWORD *)BytePtr + 23787) == 1)
                    {
                      uint64_t v84 = BytePtr + 95148;
                      *((_DWORD *)BaseAddress + 23813) = 1;
                      *((unsigned char *)BaseAddress + 95256) = BytePtr[20];
                      *(_OWORD *)(BaseAddress + 47629) = *(_OWORD *)(BytePtr + 4);
                      size_t v45 = *((unsigned int *)BytePtr + 6);
                      *((_DWORD *)BaseAddress + 23812) = v45;
                      memcpy(BaseAddress + 64, BytePtr + 28, v45);
                      if (*(_DWORD *)(a4 + 1128))
                      {
                        unint64_t v46 = 0;
                        uint64_t v47 = (const void *)*MEMORY[0x263F2C1D0];
                        uint64_t v48 = (CFTypeRef *)a5;
                        while (!CFEqual(*v48, v47))
                        {
                          ++v46;
                          v48 += 2;
                          if (v46 >= *(unsigned int *)(a4 + 1128)) {
                            goto LABEL_157;
                          }
                        }
                        *((unsigned char *)BaseAddress + 95257) = 1;
                      }
LABEL_157:
                      *((_DWORD *)BaseAddress + 162177) = 1;
                      *((unsigned char *)BaseAddress + 648712) = v84[26];
                      *(_OWORD *)(BaseAddress + 324358) = *(_OWORD *)(v84 + 4);
                      BaseAddress[324366] = *((_WORD *)v84 + 10);
                      *(_DWORD *)(BaseAddress + 324367) = *(_DWORD *)(v84 + 22);
                      memcpy(BaseAddress + 47648, v27 + 95180, *((unsigned int *)v84 + 7));
                      unsigned int v31 = 648740;
                      goto LABEL_82;
                    }
                    __int16 v79 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                    {
                      __int16 v79 = os_log_create("com.apple.isp", "plugin");
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v79;
                    }
                    uint64_t v14 = 3758097090;
                    if (!os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_37;
                    }
                  }
                  else
                  {
                    uint64_t v76 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                    {
                      uint64_t v76 = os_log_create("com.apple.isp", "plugin");
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v76;
                    }
                    uint64_t v14 = 3758097090;
                    if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_37;
                    }
                  }
                }
                else
                {
                  if (v28 != 5)
                  {
                    if (v28 == 1)
                    {
                      *((_DWORD *)BaseAddress + 4) = 72;
                      memmove(BaseAddress + 36, BytePtr, Length);
                      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(buffer);
                      H16ISP::getFrameFormatMetaInfo(PixelFormatType, __dst);
                      OSType v30 = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a5 + 8));
                      H16ISP::getFrameFormatMetaInfo(v30, &extraColumnsOnRight);
                      if ((unsigned __int16)BaseAddress[36] >= 2u && (LODWORD(__dst[1]) == 2 || v90 == 2))
                      {
                        uint64_t v78 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                        {
                          uint64_t v78 = os_log_create("com.apple.isp", "plugin");
                          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v78;
                        }
                        if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
                          ISPProcessingSessionProcessBuffer();
                        }
                        uint64_t v14 = 3758097090;
                        goto LABEL_37;
                      }
                      unsigned int v31 = *((_DWORD *)BaseAddress + 4) + 55940;
                    }
                    else
                    {
                      unsigned int v31 = 0;
                    }
LABEL_82:
                    *((_DWORD *)BaseAddress + 7) = v31;
                    bzero((char *)BaseAddress + v31, 0xE08uLL);
                    unsigned int v49 = *(H16ISP::H16ISPFrameReceiverBufferPool **)(a1 + 72);
                    if (!v49)
                    {
                      int v51 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                      {
                        int v51 = os_log_create("com.apple.isp", "plugin");
                        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v51;
                      }
                      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
                        ISPProcessingSessionProcessBuffer();
                      }
                      goto LABEL_36;
                    }
                    if (!H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(v49, &Attachment, 0))
                    {
                      CVPixelBufferLockBaseAddress(Attachment, 0);
                      uint64_t v52 = CVPixelBufferGetBaseAddress(Attachment);
                      size_t v53 = CVPixelBufferGetDataSize(Attachment);
                      bzero(v52, v53);
                      *uint64_t v52 = 1;
                      *((_DWORD *)v52 + 1) = 1;
                      *(_OWORD *)(v52 + 4) = xmmword_2469DAC70;
                      *(_OWORD *)(v52 + 12) = xmmword_2469DAC80;
                      *(_OWORD *)(v52 + 20) = xmmword_2469DAC90;
                      *(_OWORD *)(v52 + 28) = xmmword_2469DACA0;
                      CVPixelBufferUnlockBaseAddress(Attachment, 0);
                      goto LABEL_93;
                    }
                    BOOL v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                    {
                      BOOL v50 = os_log_create("com.apple.isp", "plugin");
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v50;
                    }
                    uint64_t v14 = 3758097086;
                    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
                      ISPProcessingSessionProcessBuffer();
                    }
                    goto LABEL_37;
                  }
                  *((_DWORD *)BaseAddress + 10) = 128;
                  if (*(_DWORD *)BytePtr == 1)
                  {
                    unsigned int v31 = 95296;
                    goto LABEL_82;
                  }
                  __int16 v77 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                  {
                    __int16 v77 = os_log_create("com.apple.isp", "plugin");
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v77;
                  }
                  uint64_t v14 = 3758097090;
                  if (!os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_37;
                  }
                }
                ISPProcessingSessionProcessBuffer();
                goto LABEL_37;
              case 2:
                if (Attachment)
                {
                  CVPixelBufferLockBaseAddress(Attachment, 0);
                  uint64_t v33 = CVPixelBufferGetBaseAddress(Attachment);
                }
                else
                {
                  uint64_t v74 = *(H16ISP::H16ISPFrameReceiverBufferPool **)(a1 + 72);
                  if (!v74)
                  {
                    uint64_t v80 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                    {
                      uint64_t v80 = os_log_create("com.apple.isp", "plugin");
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v80;
                    }
                    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR)) {
                      ISPProcessingSessionProcessBuffer();
                    }
                    goto LABEL_36;
                  }
                  if (H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(v74, &Attachment, 0))
                  {
                    __int16 v75 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                    {
                      __int16 v75 = os_log_create("com.apple.isp", "plugin");
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v75;
                    }
                    uint64_t v14 = 3758097086;
                    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
                      ISPProcessingSessionProcessBuffer();
                    }
                    goto LABEL_37;
                  }
                  CFIndex v81 = CFDataGetLength((CFDataRef)cf);
                  uint64_t v33 = CFDataGetBytePtr((CFDataRef)cf);
                  CVPixelBufferLockBaseAddress(Attachment, 0);
                  uint64_t v82 = CVPixelBufferGetBaseAddress(Attachment);
                  memmove(v82, v33, v81);
                }
                unsigned int v34 = v33[4];
                if (v34)
                {
                  uint64_t v35 = v33[5];
                  if (v35) {
                    uint64_t v36 = (char *)v33 + v35;
                  }
                  else {
                    uint64_t v36 = 0;
                  }
                  if (v34 >= 3)
                  {
                    uint64_t v37 = v33[7];
                    if (v37) {
                      uint64_t v38 = (char *)v33 + v37;
                    }
                    else {
                      uint64_t v38 = 0;
                    }
                    if (v34 < 8)
                    {
                      uint64_t v40 = 0;
                    }
                    else
                    {
                      uint64_t v39 = v33[12];
                      if (v39) {
                        uint64_t v40 = (char *)v33 + v39;
                      }
                      else {
                        uint64_t v40 = 0;
                      }
                      if (v34 >= 0xA)
                      {
                        uint64_t v41 = v33[14];
                        if (v41)
                        {
                          uint64_t v42 = (char *)v33 + v41;
                          goto LABEL_136;
                        }
                      }
                    }
LABEL_135:
                    uint64_t v42 = 0;
LABEL_136:
                    uint64_t v14 = 3758096385;
                    if (v36 && v38 && v40 && v42)
                    {
                      *((void *)BaseAddress + 1) = 0xB000000088;
                      *((_DWORD *)BaseAddress + 34) = *(_DWORD *)v36;
                      *(_OWORD *)(BaseAddress + 70) = *(_OWORD *)(v36 + 344);
                      BaseAddress[78] = *((_DWORD *)v36 + 4);
                      BaseAddress[79] = *((_DWORD *)v36 + 94);
                      BaseAddress[80] = v36[45];
                      BaseAddress[81] = *((_WORD *)v36 + 201);
                      *((unsigned char *)BaseAddress + 168) = v36[461];
                      BaseAddress[82] = *((_WORD *)v38 + 2);
                      BaseAddress[83] = *((_WORD *)v38 + 4);
                      *((_DWORD *)BaseAddress + 43) = v36[46];
                      BaseAddress[92] = *((_DWORD *)v38 + 1313);
                      *((_DWORD *)BaseAddress + 184) = *((_DWORD *)v38 + 432);
                      *((unsigned char *)BaseAddress + 740) = v38[12];
                      *((unsigned char *)BaseAddress + 741) = v38[1732];
                      *((_DWORD *)BaseAddress + 44) = 0;
                      *((_DWORD *)BaseAddress + 45) = v33[3];
                      *((unsigned char *)BaseAddress + 726) = v40[63];
                      *((unsigned char *)BaseAddress + 727) = v40[66];
                      *((unsigned char *)BaseAddress + 728) = v42[162];
                      *((unsigned char *)BaseAddress + 729) = v42[5];
                      *((unsigned char *)BaseAddress + 730) = v42[2];
                      *((unsigned char *)BaseAddress + 725) = v42[4];
                      *((unsigned char *)BaseAddress + 731) = 0;
                      int v24 = *((unsigned __int16 *)v36 + 229);
                      CVPixelBufferUnlockBaseAddress(Attachment, 0);
                      goto LABEL_94;
                    }
                    goto LABEL_37;
                  }
                  uint64_t v40 = 0;
                }
                else
                {
                  uint64_t v40 = 0;
                  uint64_t v36 = 0;
                }
                uint64_t v38 = 0;
                goto LABEL_135;
              case 3:
                *((_DWORD *)BaseAddress + 5) = 192;
                unsigned int v43 = CFDataGetLength(*(CFDataRef *)a4);
                uint64_t v44 = CFDataGetBytePtr(*(CFDataRef *)a4);
                memmove(BaseAddress + 96, v44, v43);
LABEL_93:
                int v24 = 0;
                goto LABEL_94;
              default:
LABEL_94:
                CVPixelBufferUnlockBaseAddress(v92, 0);
                memcpy(__dst, a6, sizeof(__dst));
                *((void *)&__dst[0] + 1) = buffer;
                uint64_t v54 = (H16ISP *)CVPixelBufferGetPixelFormatType(buffer);
                unsigned int FrameFormat = H16ISP::getFrameFormat(v54);
                if (FrameFormat > 0x15 || (int v56 = 1, ((1 << FrameFormat) & 0x380004) == 0)) {
                  int v56 = 0;
                }
                *((void *)&__dst[1] + 1) = v92;
                int v57 = *(_DWORD *)(a4 + 1128);
                DWORD2(__dst[13]) = v56;
                LODWORD(__dst[59]) = v57;
                if (v57)
                {
                  unint64_t v58 = 0;
                  CFStringRef v85 = (const __CFString *)*MEMORY[0x263F040E0];
                  BOOL v59 = (__CVBuffer **)(a5 + 8);
                  uint64_t v60 = 14;
                  __int16 v83 = (const void *)*MEMORY[0x263EFFB40];
                  do
                  {
                    uint64_t v61 = *v59;
                    unsigned int ISPProcessingSessionOutputIndex = GetISPProcessingSessionOutputIndex((const __CFString *)*(v59 - 1));
                    *((void *)&__dst[2] + v58 + 1) = v61;
                    unsigned int v63 = *(_DWORD *)(a1 + 32);
                    BOOL v64 = v63 > 6;
                    int v65 = (1 << v63) & 0x62;
                    if (!v64 && v65 != 0)
                    {
                      *(void *)&long long extraColumnsOnRight = 0;
                      size_t extraRowsOnBottom = 0;
                      CVPixelBufferGetExtendedPixels(v61, 0, (size_t *)&extraColumnsOnRight, 0, &extraRowsOnBottom);
                      if ((unint64_t)extraColumnsOnRight | extraRowsOnBottom) {
                        CVBufferSetAttachment(v61, v85, v83, kCVAttachmentMode_ShouldNotPropagate);
                      }
                    }
                    uint64_t v67 = a4 + 56 * ISPProcessingSessionOutputIndex;
                    unint64_t v68 = &__dst[v60];
                    long long v69 = *(_OWORD *)(v67 + 40);
                    _OWORD *v68 = *(_OWORD *)(v67 + 24);
                    v68[1] = v69;
                    *((_DWORD *)&__dst[54] + v58++) = 0;
                    v59 += 2;
                    v60 += 2;
                  }
                  while (v58 < LODWORD(__dst[59]));
                }
                *(void *)&__dst[2] = Attachment;
                LODWORD(__dst[0]) = *(unsigned __int16 *)(a1 + 1240);
                DWORD1(__dst[0]) = v24;
                if (*(unsigned char *)(a1 + 1320))
                {
                  *(void *)&__dst[83] = mach_absolute_time();
                  *((void *)&__dst[83] + 1) = mach_absolute_time();
                  *((void *)&__dst[85] + 1) = mach_absolute_time();
                  *((void *)&__dst[86] + 1) = mach_absolute_time();
                }
                uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
                uint64_t v71 = (pthread_mutex_t *)(DerivedStorage + 32);
                pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
                uint64_t v14 = 3758097088;
                if (DerivedStorage && !*(unsigned char *)DerivedStorage)
                {
                  uint64_t v72 = *(void *)(a1 + 1224);
                  memcpy(v86, __dst, sizeof(v86));
                  uint64_t v14 = H16ISP::H16ISPGeneralProcessFrameReceiver::GeneralProcess(v72, (uint64_t)v86);
                }
                pthread_mutex_unlock(v71);
                if (*(unsigned char *)(a1 + 1320)) {
                  mach_absolute_time();
                }
                if (v14)
                {
                  __int16 v73 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                  {
                    __int16 v73 = os_log_create("com.apple.isp", "plugin");
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v73;
                  }
                  if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
                    ISPProcessingSessionProcessBuffer();
                  }
                }
                goto LABEL_37;
            }
          }
          CFStringRef Attachment = (__CVBuffer *)CVBufferGetAttachment(buffer, @"RawMetaData", 0);
          CVPixelBufferRetain(Attachment);
          CVBufferRemoveAttachment(buffer, @"RawMetaData");
          if (Attachment) {
            goto LABEL_26;
          }
          uint64_t v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v32 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v32;
          }
          uint64_t v14 = 3758097090;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            ISPProcessingSessionProcessBuffer();
          }
        }
        else
        {
          uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v17 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
          }
          uint64_t v14 = 3758097090;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            ISPProcessingSessionProcessBuffer();
          }
        }
      }
      else
      {
        uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v16 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
        }
        uint64_t v14 = 3758097090;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          ISPProcessingSessionProcessBuffer();
        }
      }
    }
    else
    {
      uint64_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v15 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
      }
      uint64_t v14 = 3758097090;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        ISPProcessingSessionProcessBuffer();
      }
    }
  }
  else
  {
    uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    uint64_t v14 = 3758097112;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      ISPProcessingSessionProcessBuffer();
    }
  }
  return v14;
}

uint64_t ISPProcessingSessionProcessBufferGeneric(uint64_t a1, uint64_t a2, uint64_t a3, void *__src)
{
  if (*(unsigned char *)(a1 + 1242))
  {
    if (a2 && a3)
    {
      memcpy(__dst, __src, 0x580uLL);
      if (*(_DWORD *)(a2 + 1128))
      {
        unint64_t v7 = 0;
        unsigned int v8 = 0;
        uint64_t v9 = __dst[4];
        uint64_t v10 = (void *)(a3 + 8);
        do
        {
          if (CFEqual((CFTypeRef)*(v10 - 1), @"ActionsList"))
          {
            __dst[26] = *v10;
          }
          else if (CFEqual((CFTypeRef)*(v10 - 1), @"OperationsList"))
          {
            __dst[25] = *v10;
          }
          else if (CFEqual((CFTypeRef)*(v10 - 1), @"StatsBuffer"))
          {
            uint64_t v9 = *v10;
          }
          else
          {
            __dst[v8++ + 5] = *v10;
          }
          ++v7;
          v10 += 2;
        }
        while (v7 < *(unsigned int *)(a2 + 1128));
      }
      else
      {
        unsigned int v8 = 0;
        uint64_t v9 = __dst[4];
      }
      LODWORD(__dst[118]) = v8;
      if (v9)
      {
        _OWORD __dst[4] = 0;
        __dst[0] = *(unsigned __int16 *)(a1 + 1240);
        if (*(unsigned char *)(a1 + 1320))
        {
          __dst[166] = mach_absolute_time();
          __dst[167] = mach_absolute_time();
          __dst[171] = mach_absolute_time();
          __dst[173] = mach_absolute_time();
        }
        uint64_t v12 = 3758097088;
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
        if (DerivedStorage && !*(unsigned char *)DerivedStorage)
        {
          uint64_t v15 = *(void *)(a1 + 1224);
          memcpy(v18, __dst, sizeof(v18));
          uint64_t v12 = H16ISP::H16ISPGeneralProcessFrameReceiver::GeneralProcessGeneric(v15, (uint64_t)v18, 0);
        }
        pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
        if (*(unsigned char *)(a1 + 1320)) {
          mach_absolute_time();
        }
        if (v12)
        {
          uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v16 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            ISPProcessingSessionProcessBufferGeneric();
          }
        }
      }
      else
      {
        return 4294954516;
      }
    }
    else
    {
      uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v13 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        ISPProcessingSessionProcessBufferGeneric();
      }
      return 3758097090;
    }
  }
  else
  {
    long long v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      long long v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      ISPProcessingSessionProcessBuffer();
    }
    return 3758097112;
  }
  return v12;
}

uint64_t H16ISPCaptureDeviceFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  H16ISPCaptureDeviceInvalidate();

  return pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 32));
}

uint64_t H16ISPCaptureDeviceRelinquishStreams(uint64_t a1, __CFString *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t result = 4294954516;
  if (a1)
  {
    unint64_t v4 = a2;
    if (a2)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      LogCaptureDeviceEvent(7u, DerivedStorage, 0, 0, 0, v4, 0);
      pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
      if (*(unsigned char *)DerivedStorage)
      {
        uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v6 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureDeviceRelinquishStreams(v6, v7, v8, v9, v10, v11, v12, v13);
        }
        pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
        return 4294954511;
      }
      else
      {
        LockStreamMutexes(*(const __CFArray **)(DerivedStorage + 120));
        if (CFArrayGetCount((CFArrayRef)v4))
        {
          CFIndex v14 = 0;
          int v15 = 0;
          while (1)
          {
            CFArrayGetValueAtIndex((CFArrayRef)v4, v14);
            FigCaptureStreamGetFigBaseObject();
            uint64_t v16 = CMBaseObjectGetDerivedStorage();
            if (*(void *)(v16 + 136)) {
              break;
            }
            if (*(unsigned char *)(v16 + 1)) {
              ++v15;
            }
            if (++v14 >= (unint64_t)CFArrayGetCount((CFArrayRef)v4)) {
              goto LABEL_17;
            }
          }
          UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 120));
          pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
          return 4294954516;
        }
        else
        {
          int v15 = 0;
LABEL_17:
          unsigned int v31 = (pthread_mutex_t *)(DerivedStorage + 32);
          if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120)))
          {
            unint64_t v17 = 0;
            int v18 = 0;
            do
            {
              CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 120), v17);
              FigCaptureStreamGetFigBaseObject();
              uint64_t v19 = CMBaseObjectGetDerivedStorage();
              if (*(unsigned char *)(v19 + 1) || *(unsigned char *)(v19 + 2)) {
                ++v18;
              }
              ++v17;
            }
            while (v17 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120)));
          }
          else
          {
            int v18 = 0;
          }
          if (v15 == v18)
          {
            uint64_t v20 = *(void *)(DerivedStorage + 184);
            if (v20)
            {
              MEMORY[0x24C53D6E0](v20, 0x1000C40009FEB1ALL);
              *(void *)(DerivedStorage + 184) = 0;
              H16ISP::H16ISPDevice::ISP_DestroyMultiCameraSession(*(H16ISP::H16ISPDevice **)(DerivedStorage + 24));
            }
          }
          uint64_t v33 = DerivedStorage;
          if (CFArrayGetCount((CFArrayRef)v4))
          {
            unint64_t v21 = 0;
            uint64_t v22 = &_os_log_internal;
            uint64_t v32 = v4;
            do
            {
              CFArrayGetValueAtIndex((CFArrayRef)v4, v21);
              FigCaptureStreamGetFigBaseObject();
              uint64_t v23 = (unsigned char *)CMBaseObjectGetDerivedStorage();
              if (!*v23)
              {
                uint64_t v24 = (uint64_t)v23;
                if (v23[1])
                {
                  uint64_t v25 = 0;
                  v23[1] = 0;
                  v23[4125] = 1;
                  do
                  {
                    uint64_t v26 = v24 + v25;
                    if (*(void *)(v24 + v25 + 832))
                    {
                      uint64_t v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v22)
                      {
                        uint64_t v27 = os_log_create("com.apple.isp", "plugin");
                        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
                      }
                      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)int buf = 136315138;
                        uint64_t v35 = "H16ISPCaptureDeviceRelinquishStreams";
                        _os_log_impl(&dword_24680F000, v27, OS_LOG_TYPE_INFO, "%s - primaryScalerOutput initialClientBuffers weren't released\n", buf, 0xCu);
                      }
                      CVPixelBufferRelease(*(CVPixelBufferRef *)(v26 + 832));
                      *(void *)(v26 + 832) = 0;
                    }
                    if (*(void *)(v26 + 1032))
                    {
                      int v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v22)
                      {
                        int v28 = os_log_create("com.apple.isp", "plugin");
                        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
                      }
                      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)int buf = 136315138;
                        uint64_t v35 = "H16ISPCaptureDeviceRelinquishStreams";
                        _os_log_impl(&dword_24680F000, v28, OS_LOG_TYPE_INFO, "%s - secondaryScalerOutput initialClientBuffers weren't released\n", buf, 0xCu);
                      }
                      CVPixelBufferRelease(*(CVPixelBufferRef *)(v26 + 1032));
                      *(void *)(v26 + 1032) = 0;
                    }
                    uint64_t v29 = v24 + v25;
                    if (*(void *)(v24 + v25 + 1232))
                    {
                      OSType v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v22)
                      {
                        OSType v30 = os_log_create("com.apple.isp", "plugin");
                        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v30;
                      }
                      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)int buf = 136315138;
                        uint64_t v35 = "H16ISPCaptureDeviceRelinquishStreams";
                        _os_log_impl(&dword_24680F000, v30, OS_LOG_TYPE_INFO, "%s - intermediateTapOutput initialClientBuffers weren't released\n", buf, 0xCu);
                      }
                      CVPixelBufferRelease(*(CVPixelBufferRef *)(v29 + 1232));
                      *(void *)(v29 + 1232) = 0;
                    }
                    v25 += 8;
                  }
                  while (v25 != 32);
                  H16ISP::H16ISPDevice::ISP_ReleaseChannel(*(H16ISP::H16ISPDevice **)(v33 + 24), *(_DWORD *)(v24 + 132));
                  SavePFLFile(v33, v24);
                  unint64_t v4 = v32;
                }
                H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v33 + 24), *(_DWORD *)(v24 + 132), 0, 0);
              }
              ++v21;
            }
            while (v21 < CFArrayGetCount((CFArrayRef)v4));
          }
          UnlockStreamMutexes(*(const __CFArray **)(v33 + 120));
          pthread_mutex_unlock(v31);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t H16ISPCaptureDevicePerformPearlCalibration()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(8u, DerivedStorage, 0, 0, 0, 0, 0);
  return 0;
}

void SavePFLFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v6 + 4384);
  BOOL hasSensorType = H16ISP::H16ISPDevice::hasSensorType(v6, 1785950322);
  if (*(_DWORD *)(v4 + 640) && *(void *)(v5 + 200))
  {
    if (!hasSensorType || (uint64_t v9 = *(unsigned int *)(v4 + 132), *(_DWORD *)(v7 + 96 * v9 + 60) != 1))
    {
      if (!H16ISP::H16ISPDevice::hasSensorType(*(void *)(v5 + 24), 1718186595) || !byte_26B11BAEA) {
        return;
      }
      uint64_t v9 = *(unsigned int *)(v4 + 132);
    }
    if (H16ISP::H16ISPDevice::SavePersistFile(*(void *)(v5 + 24), v9))
    {
      uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        SavePFLFile();
      }
    }
  }
}

void ___ZL25H16ISPCaptureStreamCreatePK13__CFAllocatorP22OpaqueFigCaptureDevicePN6H16ISP12H16ISPDeviceEPP22OpaqueFigCaptureStream_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  uint64_t v4 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v3 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    ___ZL25H16ISPCaptureStreamCreatePK13__CFAllocatorP22OpaqueFigCaptureDevicePN6H16ISP12H16ISPDeviceEPP22OpaqueFigCaptureStream_block_invoke_cold_1(v2, v3, v5);
  }
  uint64_t v6 = *(void *)(v2 + 32);
  *(_DWORD *)(v6 + 76) = 0;
  if (*(void *)(v6 + 3712)) {
    DisableDisplayStrobeOverlay(v6);
  }
  uint64_t v7 = *(void *)(*(void *)(v2 + 40) + 200);
  if (v7)
  {
    LODWORD(v9) = 101;
    char v10 = 0;
    H16ISP::H16ISPServicesRemote::SetProperty(v7, &v9);
  }
  else
  {
    uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
    {
      uint64_t v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_INFO, "StillImageCaptureFailure: Could not set strobe state\n\n", (uint8_t *)&v9, 2u);
    }
  }
  H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D728], *(const void **)(v2 + 48), 0);
}

uint64_t H16ISPCaptureStreamFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    LogCaptureDeviceEvent(0xBu, v3, DerivedStorage, 0, 0, 0, 0);
    H16ISPCaptureStreamInvalidate(a1, v4);
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    LogCaptureDeviceEvent(0xBu, v5, DerivedStorage, 0, 0, 0, 1);
  }

  return pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 240));
}

void H16ISPCaptureStreamInvalidate(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(0xAu, v3, DerivedStorage, 0, 0, 0, 0);
  uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  uint64_t v5 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v4 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(DerivedStorage + 132);
    *(_DWORD *)uint64_t v80 = 136315394;
    *(void *)&v80[4] = "H16ISPCaptureStreamInvalidate";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = v6;
    _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "%s - camChannel:%d\n", v80, 0x12u);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 32));
  CFArrayRef v7 = *(const __CFArray **)(v3 + 120);
  if (v7)
  {
    CFRetain(*(CFTypeRef *)(v3 + 120));
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
    LockStreamMutexes(v7);
    if (!*(unsigned char *)DerivedStorage)
    {
      if (StopExclaveStreams(v3, DerivedStorage))
      {
        uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v5)
        {
          uint64_t v8 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v8;
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureStreamInvalidate();
        }
      }
      xpc_object_t v9 = *(H16ISP::H16ISPDevice **)(v3 + 24);
      BOOL v10 = *(unsigned __int8 *)(*((void *)v9 + 548) + 96 * *(unsigned int *)(DerivedStorage + 132) + 64) != 0;
      if (IsJasperSyncGroup(v9, *(CFArrayRef *)(DerivedStorage + 3888)))
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 3888), 0);
        FigCaptureStreamGetFigBaseObject();
        BOOL v10 = *(_DWORD *)(DerivedStorage + 132) == *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 132);
      }
      CFArrayRef v11 = *(const __CFArray **)(DerivedStorage + 3888);
      if (v11 && v10 && CFArrayGetCount(v11))
      {
        unint64_t v12 = 0;
        do
        {
          if (CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 3888), v12))
          {
            FigCaptureStreamGetFigBaseObject();
            uint64_t v13 = CMBaseObjectGetDerivedStorage();
            if (*(_DWORD *)(v13 + 132) != *(_DWORD *)(DerivedStorage + 132))
            {
              uint64_t v14 = v13;
              if (!*(unsigned char *)v13)
              {
                int v15 = *(H16ISP::H16ISPFrameReceiver **)(v13 + 136);
                if (v15)
                {
                  H16ISP::H16ISPFrameReceiver::stopReceive(v15);
                  H16ISP::DestroyH16ISPFrameReceiver(*(H16ISP **)(v14 + 136), v16);
                  H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v3 + 24), *(_DWORD *)(v14 + 132), 0, 0);
                  *(void *)(v14 + 136) = 0;
                  uint64_t v17 = *(void *)(v3 + 200);
                  if (v17)
                  {
                    int v18 = *(_DWORD *)(v14 + 132);
                    *(_DWORD *)uint64_t v80 = 2;
                    *(_DWORD *)&v80[8] = v18;
                    v80[12] = 0;
                    H16ISP::H16ISPServicesRemote::SetProperty(v17, (xpc_object_t *)v80);
                  }
                }
              }
            }
          }
          ++v12;
        }
        while (v12 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 3888)));
      }
      *(unsigned char *)uint64_t DerivedStorage = 1;
      uint64_t v19 = *(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136);
      if (v19)
      {
        H16ISP::H16ISPFrameReceiver::stopReceive(v19);
        GraphTeardown(DerivedStorage, v10);
        H16ISP::DestroyH16ISPFrameReceiver(*(H16ISP **)(DerivedStorage + 136), v20);
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 132), 0, 0);
        *(void *)(DerivedStorage + 136) = 0;
        uint64_t v21 = *(void *)(v3 + 200);
        if (v21)
        {
          int v22 = *(_DWORD *)(DerivedStorage + 132);
          *(_DWORD *)uint64_t v80 = 2;
          *(_DWORD *)&v80[8] = v22;
          v80[12] = 0;
          H16ISP::H16ISPServicesRemote::SetProperty(v21, (xpc_object_t *)v80);
        }
      }
      uint64_t v23 = *(RgbIrCalibration **)(DerivedStorage + 4064);
      if (v23)
      {
        RgbIrCalibration::~RgbIrCalibration(v23);
        MEMORY[0x24C53D6E0]();
        *(void *)(DerivedStorage + 4064) = 0;
      }
      if (*(unsigned char *)(DerivedStorage + 4041))
      {
        H16ISP::H16ISPDevice::DisableTorch(*(H16ISP::H16ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 132));
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*(H16ISP::H16ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 132), 0, 0);
        uint64_t v24 = *(void *)(v3 + 200);
        if (v24)
        {
          *(_DWORD *)uint64_t v80 = 101;
          v80[8] = 0;
          H16ISP::H16ISPServicesRemote::SetProperty(v24, (xpc_object_t *)v80);
        }
        else
        {
          uint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
          {
            uint64_t v25 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
          }
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v80 = 136315138;
            *(void *)&v80[4] = "H16ISPCaptureStreamInvalidate";
            _os_log_impl(&dword_24680F000, v25, OS_LOG_TYPE_INFO, "%s - Could not set strobe state\n", v80, 0xCu);
          }
        }
      }
      uint64_t v26 = *(const void **)(DerivedStorage + 792);
      if (v26)
      {
        _Block_release(v26);
        *(void *)(DerivedStorage + 792) = 0;
      }
      uint64_t v27 = *(const void **)(DerivedStorage + 784);
      if (v27)
      {
        _Block_release(v27);
        *(void *)(DerivedStorage + 784) = 0;
      }
      int v28 = *(const void **)(DerivedStorage + 992);
      if (v28)
      {
        _Block_release(v28);
        *(void *)(DerivedStorage + 992) = 0;
      }
      uint64_t v29 = *(const void **)(DerivedStorage + 984);
      if (v29)
      {
        _Block_release(v29);
        *(void *)(DerivedStorage + 984) = 0;
      }
      OSType v30 = *(const void **)(DerivedStorage + 1192);
      if (v30)
      {
        _Block_release(v30);
        *(void *)(DerivedStorage + 1192) = 0;
      }
      unsigned int v31 = *(const void **)(DerivedStorage + 1184);
      if (v31)
      {
        _Block_release(v31);
        *(void *)(DerivedStorage + 1184) = 0;
      }
      uint64_t v32 = *(const void **)(DerivedStorage + 1392);
      if (v32)
      {
        _Block_release(v32);
        *(void *)(DerivedStorage + 1392) = 0;
      }
      uint64_t v33 = *(const void **)(DerivedStorage + 1384);
      if (v33)
      {
        _Block_release(v33);
        *(void *)(DerivedStorage + 1384) = 0;
      }
      unsigned int v34 = *(const void **)(DerivedStorage + 1592);
      if (v34)
      {
        _Block_release(v34);
        *(void *)(DerivedStorage + 1592) = 0;
      }
      uint64_t v35 = *(const void **)(DerivedStorage + 1584);
      if (v35)
      {
        _Block_release(v35);
        *(void *)(DerivedStorage + 1584) = 0;
      }
      uint64_t v36 = *(const void **)(DerivedStorage + 1792);
      if (v36)
      {
        _Block_release(v36);
        *(void *)(DerivedStorage + 1792) = 0;
      }
      uint64_t v37 = *(const void **)(DerivedStorage + 1784);
      if (v37)
      {
        _Block_release(v37);
        *(void *)(DerivedStorage + 1784) = 0;
      }
      uint64_t v38 = *(const void **)(DerivedStorage + 1992);
      if (v38)
      {
        _Block_release(v38);
        *(void *)(DerivedStorage + 1992) = 0;
      }
      uint64_t v39 = *(const void **)(DerivedStorage + 1984);
      if (v39)
      {
        _Block_release(v39);
        *(void *)(DerivedStorage + 1984) = 0;
      }
      uint64_t v40 = *(const void **)(DerivedStorage + 2192);
      if (v40)
      {
        _Block_release(v40);
        *(void *)(DerivedStorage + 2192) = 0;
      }
      uint64_t v41 = *(const void **)(DerivedStorage + 2184);
      if (v41)
      {
        _Block_release(v41);
        *(void *)(DerivedStorage + 2184) = 0;
      }
      uint64_t v42 = *(const void **)(DerivedStorage + 2392);
      if (v42)
      {
        _Block_release(v42);
        *(void *)(DerivedStorage + 2392) = 0;
      }
      unsigned int v43 = *(const void **)(DerivedStorage + 2384);
      if (v43)
      {
        _Block_release(v43);
        *(void *)(DerivedStorage + 2384) = 0;
      }
      uint64_t v44 = *(const void **)(DerivedStorage + 3648);
      if (v44)
      {
        _Block_release(v44);
        *(void *)(DerivedStorage + 3648) = 0;
      }
      size_t v45 = *(const void **)(DerivedStorage + 2688);
      if (v45)
      {
        _Block_release(v45);
        *(void *)(DerivedStorage + 2688) = 0;
      }
      for (uint64_t i = 0; i != 32; i += 8)
      {
        uint64_t v47 = DerivedStorage + i;
        uint64_t v48 = *(__CVBuffer **)(DerivedStorage + i + 832);
        if (v48)
        {
          CVPixelBufferRelease(v48);
          *(void *)(v47 + 832) = 0;
        }
        unsigned int v49 = *(__CVBuffer **)(v47 + 1032);
        if (v49)
        {
          CVPixelBufferRelease(v49);
          *(void *)(v47 + 1032) = 0;
        }
        BOOL v50 = *(__CVBuffer **)(DerivedStorage + i + 1232);
        if (v50)
        {
          CVPixelBufferRelease(v50);
          *(void *)(DerivedStorage + i + 1232) = 0;
        }
      }
      int v51 = *(__CVPixelBufferPool **)(DerivedStorage + 824);
      if (v51)
      {
        CVPixelBufferPoolRelease(v51);
        *(void *)(DerivedStorage + 824) = 0;
      }
      uint64_t v52 = *(__CVPixelBufferPool **)(DerivedStorage + 1024);
      if (v52)
      {
        CVPixelBufferPoolRelease(v52);
        *(void *)(DerivedStorage + 1024) = 0;
      }
      size_t v53 = *(__CVPixelBufferPool **)(DerivedStorage + 1224);
      if (v53)
      {
        CVPixelBufferPoolRelease(v53);
        *(void *)(DerivedStorage + 1224) = 0;
      }
      uint64_t v54 = *(__CVPixelBufferPool **)(DerivedStorage + 1424);
      if (v54)
      {
        CVPixelBufferPoolRelease(v54);
        *(void *)(DerivedStorage + 1424) = 0;
      }
      int v55 = *(__CVPixelBufferPool **)(DerivedStorage + 1624);
      if (v55)
      {
        CVPixelBufferPoolRelease(v55);
        *(void *)(DerivedStorage + 1624) = 0;
      }
      int v56 = *(const void **)(DerivedStorage + 3664);
      if (v56)
      {
        CFRelease(v56);
        *(void *)(DerivedStorage + 3664) = 0;
      }
      int v57 = *(__CVPixelBufferPool **)(DerivedStorage + 2624);
      if (v57)
      {
        CVPixelBufferPoolRelease(v57);
        *(void *)(DerivedStorage + 2624) = 0;
      }
      MetadataOutputFeatureResetConfiguration(DerivedStorage + 2840);
      MetadataOutputFeatureResetConfiguration(DerivedStorage + 2936);
      for (uint64_t j = 3032; j != 3416; j += 96)
        MetadataOutputFeatureResetConfiguration(DerivedStorage + j);
      MetadataOutputFeatureResetConfiguration(DerivedStorage + 3416);
      MetadataOutputFeatureResetConfiguration(DerivedStorage + 3512);
      if (*(void *)(DerivedStorage + 4336)) {
        *(void *)(DerivedStorage + 4336) = 0;
      }
      if (*(void *)(DerivedStorage + 504))
      {
        FigFormatDescriptionRelease();
        *(void *)(DerivedStorage + 504) = 0;
      }
      BOOL v59 = *(const void **)(DerivedStorage + 24);
      if (v59)
      {
        CFRelease(v59);
        *(void *)(DerivedStorage + 24) = 0;
      }
      uint64_t v60 = *(const void **)(DerivedStorage + 32);
      if (v60)
      {
        CFRelease(v60);
        *(void *)(DerivedStorage + 32) = 0;
      }
      uint64_t v61 = *(const void **)(DerivedStorage + 120);
      if (v61)
      {
        CFRelease(v61);
        *(void *)(DerivedStorage + 120) = 0;
      }
      uint64_t v62 = *(const void **)(DerivedStorage + 40);
      if (v62)
      {
        CFRelease(v62);
        *(void *)(DerivedStorage + 40) = 0;
      }
      unsigned int v63 = *(const void **)(DerivedStorage + 112);
      if (v63)
      {
        CFRelease(v63);
        *(void *)(DerivedStorage + 112) = 0;
      }
      BOOL v64 = *(const void **)(DerivedStorage + 568);
      if (v64)
      {
        CFRelease(v64);
        *(void *)(DerivedStorage + 568) = 0;
      }
      int v65 = *(const void **)(DerivedStorage + 576);
      if (v65)
      {
        CFRelease(v65);
        *(void *)(DerivedStorage + 576) = 0;
      }
      if (H16ISP::H16ISPDevice::isSensorType(*(void *)(v3 + 24), *(_DWORD *)(DerivedStorage + 132), 1919246706))
      {
        CFStringRef v66 = *(NSObject **)(DerivedStorage + 4496);
        if (v66)
        {
          *(void *)uint64_t v80 = MEMORY[0x263EF8330];
          *(void *)&v80[8] = 0x40000000;
          *(void *)&v80[16] = ___ZL10DCNUDeInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke;
          CFIndex v81 = &__block_descriptor_tmp_1648;
          uint64_t v82 = DerivedStorage;
          dispatch_sync(v66, v80);
          dispatch_release(*(dispatch_object_t *)(DerivedStorage + 4496));
          *(void *)(DerivedStorage + 4496) = 0;
        }
      }
      if (*(unsigned char *)(DerivedStorage + 673))
      {
        uint64_t v67 = *(void *)(DerivedStorage + 160);
        if (v67)
        {
          MEMORY[0x24C53D6E0](v67, 0x1000C40027896E1);
          *(void *)(DerivedStorage + 160) = 0;
          unint64_t v68 = *(const void **)(DerivedStorage + 4328);
          if (v68) {
            CFRelease(v68);
          }
        }
      }
      long long v69 = *(void ***)(DerivedStorage + 3712);
      if (v69)
      {
        H16ISPDisplayStrobeDispose(v69);
        *(void *)(DerivedStorage + 3712) = 0;
      }
      if (*(void *)(DerivedStorage + 3984))
      {
        pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 304));
        DestroyMotionMetadataDebugLogger(*(FILE ***)(DerivedStorage + 3984));
        pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 304));
        *(void *)(DerivedStorage + 3984) = 0;
      }
      long long v70 = *(NSObject **)(DerivedStorage + 3776);
      if (v70)
      {
        dispatch_source_cancel(v70);
        dispatch_release(*(dispatch_object_t *)(DerivedStorage + 3776));
      }
      uint64_t v71 = *(NSObject **)(DerivedStorage + 3768);
      if (v71) {
        dispatch_release(v71);
      }
      uint64_t v72 = *(H16ISP::H16ISPFirmwareWorkProcessor **)(v3 + 192);
      if (v72) {
        H16ISP::H16ISPFirmwareWorkProcessor::FlushSurfaceCache(v72);
      }
      __int16 v73 = *(const void **)(DerivedStorage + 3888);
      if (v73)
      {
        CFRelease(v73);
        *(void *)(DerivedStorage + 3888) = 0;
      }
      if (*(unsigned char *)(DerivedStorage + 1) || *(unsigned char *)(DerivedStorage + 2))
      {
        *(_WORD *)(DerivedStorage + 1) = 0;
        SavePFLFile(v3, DerivedStorage);
        H16ISP::H16ISPDevice::ISP_ReleaseChannel(*(H16ISP::H16ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 132));
      }
      uint64_t v74 = *(__CVPixelBufferPool **)(DerivedStorage + 4344);
      if (v74)
      {
        CVPixelBufferPoolRelease(v74);
        *(void *)(DerivedStorage + 4344) = 0;
      }
      uint64_t v75 = *(void *)(DerivedStorage + 4480);
      if (v75)
      {
        MEMORY[0x24C53D6E0](v75, 0x1000C40504FFAC1);
        *(void *)(DerivedStorage + 4480) = 0;
      }
      uint64_t v76 = 0;
      *(unsigned char *)(DerivedStorage + 57704) = 0;
      char v77 = 1;
      do
      {
        char v78 = v77;
        __int16 v79 = *(__CVPixelBufferPool **)(DerivedStorage + 48 * v76 + 4360);
        if (v79) {
          CVPixelBufferPoolRelease(v79);
        }
        char v77 = 0;
        uint64_t v76 = 1;
      }
      while ((v78 & 1) != 0);
      *(_OWORD *)(DerivedStorage + 4451) = 0u;
      *(_OWORD *)(DerivedStorage + 4424) = 0u;
      *(_OWORD *)(DerivedStorage + 4440) = 0u;
      *(_OWORD *)(DerivedStorage + 4392) = 0u;
      *(_OWORD *)(DerivedStorage + 4408) = 0u;
      *(_OWORD *)(DerivedStorage + 4360) = 0u;
      *(_OWORD *)(DerivedStorage + 4376) = 0u;
    }
    UnlockStreamMutexes(v7);
    CFRelease(v7);
    LogCaptureDeviceEvent(0xAu, v3, DerivedStorage, 0, 0, 0, 1);
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
  }
}

void ___ZL10DCNUDeInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(*(void *)(a1 + 32) + 4504);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(a1 + 32) + 4504) = 0;
  }
}

uint64_t H16ISPCaptureStreamStop(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v4 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)(DerivedStorage + 132);
    v12[0] = 67109120;
    v12[1] = v5;
    _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_INFO, "H16ISPCaptureStreamStop: camChannel:%d\n\n", (uint8_t *)v12, 8u);
  }
  LogCaptureDeviceEvent(0xFu, v3, DerivedStorage, 0, 0, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 32));
  CFArrayRef v6 = *(const __CFArray **)(v3 + 120);
  if (!v6)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
    uint64_t v8 = "device invalidated";
    goto LABEL_9;
  }
  CFRetain(*(CFTypeRef *)(v3 + 120));
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
  LockStreamMutexes(v6);
  if (*(unsigned char *)DerivedStorage)
  {
    UnlockStreamMutexes(v6);
    CFRelease(v6);
    uint64_t v8 = "invalidated";
LABEL_9:
    uint64_t v9 = 4294954511;
    uint64_t v10 = 4294954511;
    goto LABEL_10;
  }
  if (!*(void *)(v3 + 24))
  {
    UnlockStreamMutexes(v6);
    CFRelease(v6);
    return 4294954616;
  }
  if (*(unsigned char *)(DerivedStorage + 1))
  {
    uint64_t v9 = H16ISPCaptureStreamStopInternal(a1, v7);
    UnlockStreamMutexes(v6);
    CFRelease(v6);
    LogCaptureDeviceEvent(0xFu, v3, DerivedStorage, 0, 0, 0, 1);
    return v9;
  }
  UnlockStreamMutexes(v6);
  CFRelease(v6);
  uint64_t v8 = "stream not controlled";
  uint64_t v9 = 4294954607;
  uint64_t v10 = 4294954607;
LABEL_10:
  FigSignalError(v10, v8);
  return v9;
}

void ___ZL8DCNUInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 **)(a1 + 32);
  int v3 = stat("/var/mobile/Library/ISP/CalData/DCNUMetadata_0", &v29);
  uint64_t v4 = &_os_log_internal;
  if (v3)
  {
    int v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      ___ZL8DCNUInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke_cold_7(v5, v6, v7, v8, v9, v10, v11, v12);
    }
LABEL_27:
    uint64_t v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
    {
      uint64_t v27 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v27;
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      ___ZL8DCNUInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke_cold_1();
    }
    return;
  }
  if (v29.st_size != 53176)
  {
    uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v17 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      ___ZL8DCNUInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke_cold_6(&v29.st_size, v17);
    }
    goto LABEL_27;
  }
  uint64_t v13 = fopen("/var/mobile/Library/ISP/CalData/DCNUMetadata_0", "rb");
  if (!v13)
  {
    int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
    {
      int v18 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      ___ZL8DCNUInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    goto LABEL_27;
  }
  uint64_t v14 = v13;
  size_t v15 = fread(v2 + 2256, 0xCFB8uLL, 1uLL, v13);
  fclose(v14);
  if (v15 != 1)
  {
    uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
    {
      uint64_t v26 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v26;
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      ___ZL8DCNUInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke_cold_5();
    }
    goto LABEL_27;
  }
  if (v2[2261])
  {
    v29.st_dev = v2[2260];
    *(void *)(*(void *)(a1 + 32) + 4504) = CreatePixelBufferFromFile();
    if (!*(void *)(*(void *)(a1 + 32) + 4504))
    {
      uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
      {
        uint64_t v16 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        ___ZL8DCNUInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke_cold_4();
      }
    }
  }
  else
  {
    int v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v4)
    {
      int v28 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      ___ZL8DCNUInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke_cold_3();
    }
  }
}

uint64_t H16ISPCaptureGroupFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 40));
  if (!*(unsigned char *)(DerivedStorage + 32))
  {
    uint64_t v1 = CMBaseObjectGetDerivedStorage();
    LogCaptureDeviceEvent(0x17u, v1, 0, DerivedStorage, 0, 0, 0);
    H16ISPCaptureGroupInvalidate();
    LogCaptureDeviceEvent(0x17u, v1, 0, DerivedStorage, 0, 0, 1);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 40));

  return pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 40));
}

void H16ISPCaptureGroupInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(0x16u, v1, 0, DerivedStorage, 0, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 40));
  if (!*(unsigned char *)(DerivedStorage + 32))
  {
    *(unsigned char *)(DerivedStorage + 32) = 1;
    uint64_t v2 = *(const void **)(DerivedStorage + 16);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 16) = 0;
    }
    int v3 = *(const void **)(DerivedStorage + 104);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 104) = 0;
    }
    uint64_t v4 = *(const void **)(DerivedStorage + 24);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 24) = 0;
    }
    int v5 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(DerivedStorage + 136);
    if (v5)
    {
      H16ISP::H16ISPFrameReceiverSharedBufferPool::~H16ISPFrameReceiverSharedBufferPool(v5);
      MEMORY[0x24C53D6E0]();
      *(void *)(DerivedStorage + 136) = 0;
    }
    H16ISPSensorSharedRawPoolConfigurationReset(DerivedStorage, 1);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 40));

  LogCaptureDeviceEvent(0x16u, v1, 0, DerivedStorage, 0, 0, 1);
}

uint64_t H16ISPCaptureGroupStop()
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  FigCaptureSynchronizedStreamsGroupGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  memset(v41, 0, sizeof(v41));
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 40));
  if (!*(unsigned char *)(DerivedStorage + 32))
  {
    CFArrayRef v11 = *(const __CFArray **)(DerivedStorage + 104);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(v1 + 24) + 4384);
      LockStreamMutexes(v11);
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 104)))
      {
        uint64_t v40 = v1;
        unint64_t v13 = 0;
        unsigned int v14 = 0;
        unint64_t v15 = 0;
        memset(v42, 0, sizeof(v42));
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 104), v13);
          FigCaptureStreamGetFigBaseObject();
          uint64_t v16 = CMBaseObjectGetDerivedStorage();
          uint64_t v17 = *(void *)(v16 + 136);
          if (v17)
          {
            uint64_t v18 = v16;
            *((void *)v41 + v15) = v17;
            *((void *)v42 + v15) = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 104), v13);
            if (*(unsigned char *)(v12 + 96 * *(unsigned int *)(v18 + 132) + 64)) {
              unsigned int v14 = v15;
            }
            unint64_t v15 = (v15 + 1);
          }
          ++v13;
        }
        while (v13 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 104)));
        if (v15)
        {
          uint64_t v19 = (uint64_t *)v42;
          uint64_t v20 = *((void *)v42 + (v15 - 1));
          *((void *)v42 + (v15 - 1)) = *((void *)v42 + v14);
          *((void *)v42 + v14) = v20;
          H16ISP::H16ISPFrameReceiver::StopChannels(*(H16ISP::H16ISPFrameReceiver **)(v40 + 24), (H16ISP::H16ISPDevice *)v41, (H16ISP::H16ISPFrameReceiver **)v15);
          unint64_t v15 = v15;
          do
          {
            uint64_t v22 = *v19++;
            H16ISPCaptureStreamStopInternal(v22, v21);
            --v15;
          }
          while (v15);
          UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 104));
          uint64_t v10 = 0;
          goto LABEL_29;
        }
      }
      uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v23 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureGroupStop(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 104));
    }
    else
    {
      unsigned int v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned int v31 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureGroupStop(v31, v32, v33, v34, v35, v36, v37, v38);
      }
    }
    uint64_t v10 = 4294954516;
    goto LABEL_29;
  }
  uint64_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v2 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v2;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    H16ISPCaptureGroupStop(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  uint64_t v10 = 4294954511;
LABEL_29:
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 40));
  kdebug_trace();
  return v10;
}

__CFArray *StreamArrayCopyAndSort(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  MutableCFDataRef Copy = CFArrayCreateMutableCopy(0, Count, a1);
  uint64_t v4 = MutableCopy;
  if (MutableCopy)
  {
    v6.location = 0;
    v6.length = Count;
    CFArraySortValues(MutableCopy, v6, (CFComparatorFunction)StreamChannelComparator, 0);
  }
  return v4;
}

uint64_t StreamChannelComparator(const void *a1, const void *a2, void *a3)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigCaptureStreamGetFigBaseObject();
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    unsigned int v7 = *(_DWORD *)(DerivedStorage + 132);
    unsigned int v8 = *(_DWORD *)(v6 + 132);
    if (v7 >= v8) {
      return v7 > v8;
    }
    else {
      return -1;
    }
  }
  return result;
}

__CFArray *LightSourceMaskInfoCreateArray(unsigned int *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 4, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      CFNumberRef v5 = CFNumberCreate(v2, kCFNumberSInt32Type, &a1[i]);
      if (v5)
      {
        CFNumberRef v6 = v5;
        CFArrayAppendValue(Mutable, v5);
        CFRelease(v6);
      }
    }
  }
  else
  {
    unsigned int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      LightSourceMaskInfoCreateArray(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  return Mutable;
}

__CFArray *ImageRegistrationInfoCreateArray(float *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 9, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    for (uint64_t i = 0; i != 9; ++i)
    {
      CFNumberRef v5 = CFNumberCreate(v2, kCFNumberFloatType, &a1[i]);
      if (v5)
      {
        CFNumberRef v6 = v5;
        CFArrayAppendValue(Mutable, v5);
        CFRelease(v6);
      }
    }
  }
  else
  {
    unsigned int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ImageRegistrationInfoCreateArray(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  return Mutable;
}

void ___ZL31H16ISPDebugDepthFrameFileWriteriP10__CVBufferS0_PK14__CFDictionarydd_block_invoke(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v27 = *(__CFDictionary **)(a1 + 48);
  double v2 = *(double *)(a1 + 56);
  double v1 = *(double *)(a1 + 64);
  int v3 = H16ISPDebugDepthFrameFileWriter(int,__CVBuffer *,__CVBuffer *,__CFDictionary const*,double,double)::savedFrameCounter;
  double v32 = v1;
  double valuePtr = v2;
  time_t v31 = 0;
  long long v26 = *(_OWORD *)(a1 + 32);
  setlocale(0, "");
  time(&v31);
  uint64_t v4 = localtime(&v31);
  strftime(v36, 0x14uLL, "%m%d%g_%H%M%S", v4);
  int v5 = sprintf(__filename, "/var/mobile/Media/DCIM/%s-%05d-", v36, v3);
  uint64_t v6 = 0;
  long long v34 = v26;
  unsigned int v7 = &__filename[v5];
  char v8 = 1;
  do
  {
    char v9 = v8;
    uint64_t v10 = *(__CVBuffer **)&__filename[8 * v6 - 4];
    if (v10)
    {
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)&__filename[8 * v6 - 4]);
      char v30 = 0;
      CVPixelBufferLockBaseAddress(v10, 0);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v10);
      size_t Width = CVPixelBufferGetWidth(v10);
      size_t Height = CVPixelBufferGetHeight(v10);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v10);
      sprintf(v7, "%s.%lux%lu.%s", off_2651E8DC8[v6], Width, Height, (const char *)&PixelFormatType);
      unint64_t v15 = fopen(__filename, "wb");
      if (v15)
      {
        uint64_t v16 = v15;
        if (Height)
        {
          uint64_t v17 = 0;
          size_t v18 = 2 * Width;
          unsigned int v19 = 1;
          do
          {
            fwrite(&BaseAddress[v17 * BytesPerRow], v18, 1uLL, v16);
            uint64_t v17 = v19;
          }
          while (Height > v19++);
        }
        fclose(v16);
        CVPixelBufferUnlockBaseAddress(v10, 0);
      }
    }
    char v8 = 0;
    uint64_t v6 = 1;
  }
  while ((v9 & 1) != 0);
  if (v27)
  {
    strcpy(v7, "metadata.plist");
    H16ISPWriteDictionary(v27, __filename);
  }
  if (v2 != 0.0 || v1 != 0.0)
  {
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFNumberRef v23 = CFNumberCreate(v21, kCFNumberFloat64Type, &valuePtr);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C7E8], v23);
    CFRelease(v23);
    CFNumberRef v24 = CFNumberCreate(v21, kCFNumberFloat64Type, &v32);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C7E0], v24);
    CFRelease(v24);
    strcpy(v7, "disparityParams.plist");
    H16ISPWriteDictionary(Mutable, __filename);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 40));
  uint64_t v25 = *(const void **)(a1 + 48);
  if (v25) {
    CFRelease(v25);
  }
}

void H16ISPWriteDictionary(const __CFDictionary *a1, const char *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  CFStringRef v6 = CFStringCreateWithCString(v4, a2, SystemEncoding);
  CFURLRef v7 = CFURLCreateWithFileSystemPath(v4, v6, kCFURLPOSIXPathStyle, 0);
  char v8 = CFWriteStreamCreateWithFile(v4, v7);
  CFWriteStreamOpen(v8);
  CFPropertyListWrite(a1, v8, kCFPropertyListXMLFormat_v1_0, 0, 0);
  CFWriteStreamClose(v8);
  CFRelease(v8);
  CFRelease(v7);

  CFRelease(v6);
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x18u);
}

void OUTLINED_FUNCTION_13(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_16(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Eu);
}

double OUTLINED_FUNCTION_18@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 8) = a2;
  return *(double *)a1;
}

void OUTLINED_FUNCTION_20(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_22(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xEu);
}

void OUTLINED_FUNCTION_25(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

double OUTLINED_FUNCTION_26@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 8) = a2;
  return *(float *)a1;
}

double OUTLINED_FUNCTION_28(float a1)
{
  return a1;
}

void OUTLINED_FUNCTION_29(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Cu);
}

void OUTLINED_FUNCTION_32(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_35(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t H16ISP::H16ISPMetadataDictCreatorGraphNode::onDeactivate(H16ISP::H16ISPMetadataDictCreatorGraphNode *this)
{
  return 0;
}

void H16ISP::H16ISPMetadataDictCreatorGraphNode::~H16ISPMetadataDictCreatorGraphNode(H16ISP::H16ISPMetadataDictCreatorGraphNode *this)
{
  *(void *)this = &unk_26FAEBB58;
  uint64_t v2 = *((void *)this + 11);
  if (v2) {
    MEMORY[0x24C53D6C0](v2, 0x1060C80C9F24B9CLL);
  }
  uint64_t v3 = *((void *)this + 12);
  if (v3) {
    MEMORY[0x24C53D6C0](v3, 0x1000C808D959DE2);
  }

  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);
}

{
  uint64_t vars8;

  H16ISP::H16ISPMetadataDictCreatorGraphNode::~H16ISPMetadataDictCreatorGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

void rotationMatrixToAngles(uint64_t a1@<X0>, long double *a2@<X8>)
{
  long double v4 = *(double *)(a1 + 56);
  long double v5 = *(double *)(a1 + 64);
  *a2 = atan2(v4, v5);
  a2[1] = atan2(-*(double *)(a1 + 48), sqrt(v5 * v5 + v4 * v4));
  a2[2] = atan2(*(long double *)(a1 + 24), *(long double *)a1);
}

BOOL GMC_ToleranceTest(uint64_t a1, double *a2, double *a3)
{
  long long v5 = *(_OWORD *)(a1 + 48);
  _DWORD v9[2] = *(_OWORD *)(a1 + 32);
  _OWORD v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  rotationMatrixToAngles((uint64_t)v9, v11);
  uint64_t v7 = 0;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  do
  {
    *(long double *)((char *)&v12 + v7 * 8) = v11[v7] * 1000.0;
    ++v7;
  }
  while (v7 != 3);
  *(_OWORD *)a3 = v12;
  *((void *)a3 + 2) = v13;
  return fabs(*a3) <= a2[85] && fabs(a3[1]) <= a2[86] && fabs(a3[2]) <= a2[87];
}

BOOL GMC_ToleranceTest(uint64_t a1, double *a2)
{
  memset(v3, 0, sizeof(v3));
  return GMC_ToleranceTest(a1, a2, v3);
}

double H16ISP::H16ISPGraphExclaveExitNode::H16ISPGraphExclaveExitNode(H16ISP::H16ISPGraphExclaveExitNode *this, H16ISP::H16ISPDevice *a2)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 25);
  *(void *)uint64_t v3 = &unk_26FAEBBD0;
  *(unsigned char *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = a2;
  *(_DWORD *)(v3 + 84) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(void *)(v3 + 160) = 0;
  return result;
}

{
  uint64_t v3;
  double result;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 25);
  *(void *)uint64_t v3 = &unk_26FAEBBD0;
  *(unsigned char *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = a2;
  *(_DWORD *)(v3 + 84) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(void *)(v3 + 160) = 0;
  return result;
}

void H16ISP::H16ISPGraphExclaveExitNode::~H16ISPGraphExclaveExitNode(H16ISP::H16ISPGraphExclaveExitNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPGraphExclaveExitNode::onActivate(H16ISP::H16ISPGraphExclaveExitNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveExitNode::onDeactivate(H16ISP::H16ISPGraphExclaveExitNode *this)
{
  unint64_t v1 = *((unsigned int *)this + 21);
  if (v1)
  {
    unint64_t v3 = 0;
    long double v4 = (dispatch_queue_t *)((char *)this + 112);
    do
    {
      if (*v4)
      {
        dispatch_sync(*v4, &__block_literal_global_1);
        dispatch_release(*v4);
        dispatch_queue_t *v4 = 0;
        unint64_t v1 = *((unsigned int *)this + 21);
      }
      ++v3;
      v4 += 3;
    }
    while (v3 < v1);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveExitNode::RegisterH16ISPExclaveMetadataReceivedForChannel(H16ISP::H16ISPGraphExclaveExitNode *this, int a2, int (*a3)(void *, unint64_t, const __CFDictionary *))
{
  if (!*((unsigned char *)this + 16)) {
    return 3758097112;
  }
  unint64_t v3 = *((void *)this + 1);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN6H16ISP26H16ISPGraphExclaveExitNode47RegisterH16ISPExclaveMetadataReceivedForChannelEjPFiPvyPK14__CFDictionaryE_block_invoke;
  block[3] = &__block_descriptor_tmp_2;
  block[4] = this;
  block[5] = a3;
  int v6 = a2;
  dispatch_async(v3, block);
  return 0;
}

NSObject *___ZN6H16ISP26H16ISPGraphExclaveExitNode47RegisterH16ISPExclaveMetadataReceivedForChannelEjPFiPvyPK14__CFDictionaryE_block_invoke(NSObject *result)
{
  Class isa = result[4].isa;
  unsigned int v2 = *((_DWORD *)isa + 21);
  if (v2 <= 2)
  {
    uint64_t v3 = (uint64_t)isa + 24 * v2 + 96;
    *(v3 + 8) = result[5];
    *(_DWORD *)uint64_t v3 = result[6].isa;
    double result = H16ISP::CreateFixedPrioritySerialDispatchQueue((H16ISP *)"com.apple.h16ispgraphexclaveexit.callback.queue", (const char *)0x3A);
    unsigned int v4 = *((_DWORD *)isa + 21);
    *((void *)isa + 3 * v4 + 14) = result;
    *((_DWORD *)isa + 21) = v4 + 1;
  }
  return result;
}

uint64_t H16ISP::H16ISPGraphExclaveExitNode::onMessageProcessing(H16ISP::H16ISPDevice **this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 9) & (1 << H16ISP::H16ISPFilterGraphNode::GetType((H16ISP::H16ISPFilterGraphNode *)this));
  *((unsigned char *)this + 80) = v4 != 0;
  if (v4)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2000000000;
    uint64_t v25 = 0;
    int v5 = *((_DWORD *)a2 + 24);
    int v6 = *((_DWORD *)a2 + 90);
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v7 = *((void *)a2 + 11);
    uint64_t v9 = (const void *)*((void *)a2 + 46);
    if (v9)
    {
      uint64_t v25 = *((void *)a2 + 46);
      CFRetain(v9);
    }
    else
    {
      uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v11 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphExclaveExitNode::onMessageProcessing(v6, v11);
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
    long long v12 = *(const void **)(*(void *)&buf[8] + 24);
    if (v12)
    {
      uint64_t v13 = *((unsigned int *)this + 21);
      if (v13)
      {
        uint64_t v14 = 0;
        unint64_t v15 = (NSObject **)(this + 14);
        while (1)
        {
          if (v5 == *((_DWORD *)v15 - 4))
          {
            if (*(v15 - 1))
            {
              uint64_t v16 = *v15;
              if (*v15) {
                break;
              }
            }
          }
          v15 += 3;
          if (v13 == ++v14) {
            goto LABEL_19;
          }
        }
        block[0] = MEMORY[0x263EF8330];
        block[1] = 0x40000000;
        block[2] = ___ZN6H16ISP26H16ISPGraphExclaveExitNode19onMessageProcessingEPNS_24H16ISPFilterGraphMessageE_block_invoke;
        block[3] = &unk_2651E8EC0;
        void block[6] = v14;
        block[7] = v8;
        block[8] = v7;
        block[4] = buf;
        block[5] = this;
        dispatch_async(v16, block);
        if (H16ISP::H16ISPDevice::enabledExclaveDebug(this[11]))
        {
          size_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
          {
            size_t v18 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v18;
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v20 = 67109376;
            int v21 = v6;
            __int16 v22 = 1024;
            int v23 = v5;
            _os_log_impl(&dword_24680F000, v18, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Sent Secure Metadata: reqId 0x%08X channel=%u\n", v20, 0xEu);
          }
        }
      }
      else
      {
LABEL_19:
        CFRelease(v12);
        *(void *)(*(void *)&buf[8] + 24) = 0;
      }
    }
    kdebug_trace();
    _Block_object_dispose(buf, 8);
  }
  else
  {
    uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v10 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "onMessageProcessing";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "onMessageProcessing";
      _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_INFO, "%s - %s:: Skipped processing exit node\n", buf, 0x16u);
    }
  }
  return 0;
}

void sub_2468F22AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN6H16ISP26H16ISPGraphExclaveExitNode19onMessageProcessingEPNS_24H16ISPFilterGraphMessageE_block_invoke(void *a1)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) = 0;
}

uint64_t H16ISP::H16ISPGraphExclaveExitNode::GetNodeProcessingState(H16ISP::H16ISPGraphExclaveExitNode *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t H16ISP::H16ISPGraphFaceTrackingNode::onActivate(H16ISP::H16ISPGraphFaceTrackingNode *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    uint64_t v4 = Mutable;
    if (!*((void *)this + 16)) {
      goto LABEL_21;
    }
    if (*(_DWORD *)(*(void *)(*((void *)this + 12) + 4384) + 96 * *(int *)(*((void *)this + 15) + 16) + 60) == 2
      && *((int *)this + 36) > 0)
    {
      int v5 = (const void **)MEMORY[0x263EFFB38];
    }
    else
    {
      int v5 = (const void **)MEMORY[0x263EFFB40];
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F26978], *v5);
    int v6 = *((_DWORD *)this + 36);
    if (v6 == 7)
    {
      uint64_t v7 = (const void *)*MEMORY[0x263F269A0];
      uint64_t v8 = (const void **)MEMORY[0x263F269A8];
    }
    else
    {
      if (v6 != 8)
      {
        uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v10 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPGraphFaceTrackingNode::onActivate((int *)this + 36, v10);
        }
LABEL_17:
        CFDictionarySetValue(v4, (const void *)*MEMORY[0x263F26AE8], (const void *)*MEMORY[0x263EFFB38]);
        int valuePtr = 1;
        CFNumberRef v11 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue(v4, (const void *)*MEMORY[0x263F26A68], v11);
        CFRelease(v11);
        if (!CVAFaceTrackingCreate())
        {
          uint64_t v9 = 0;
LABEL_19:
          CFRelease(v4);
          return v9;
        }
LABEL_21:
        uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v13 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v13;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPGraphFaceTrackingNode::onActivate(v13);
        }
        uint64_t v9 = 3758097084;
        uint64_t v14 = (const void *)*((void *)this + 11);
        if (v14)
        {
          CFRelease(v14);
          *((void *)this + 11) = 0;
        }
        goto LABEL_19;
      }
      uint64_t v7 = (const void *)*MEMORY[0x263F269A0];
      uint64_t v8 = (const void **)MEMORY[0x263F269B0];
    }
    CFDictionarySetValue(v4, v7, *v8);
    goto LABEL_17;
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphFaceTrackingNode::onDeactivate(H16ISP::H16ISPGraphFaceTrackingNode *this)
{
  CFAllocatorRef v2 = (const void *)*((void *)this + 11);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 11) = 0;
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphFaceTrackingNode::onMessageProcessing(H16ISP::H16ISPGraphFaceTrackingNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v117 = 0;
  long long v118 = &v117;
  uint64_t v119 = 0x2000000000;
  uint64_t v120 = 0;
  dispatch_semaphore_t v4 = dispatch_semaphore_create(0);
  value[0] = MEMORY[0x263EF8330];
  value[1] = 0x40000000;
  value[2] = ___ZN6H16ISP27H16ISPGraphFaceTrackingNode19onMessageProcessingEPNS_24H16ISPFilterGraphMessageE_block_invoke;
  value[3] = &unk_2651E8EE8;
  value[4] = &v117;
  value[5] = v4;
  long long v106 = *(_DWORD **)(*((void *)this + 12) + 4384);
  int v115 = -1;
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  __int16 v95 = (char *)a2 + 80;
  dispatch_object_t object = v4;
  if (*((void *)this + 16) < 2uLL)
  {
    uint64_t v13 = *((void *)this + 15);
    int theDict = *(_DWORD *)(v13 + 20);
    int v115 = *(_DWORD *)(v13 + 16);
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = (char *)a2 + 112;
    int theDict = 43;
    do
    {
      uint64_t v7 = &v95[312 * v5];
      int v9 = *((_DWORD *)v7 + 5);
      uint64_t v8 = (unsigned int *)(v7 + 20);
      if (v9)
      {
        if (std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::find<unsigned int>((void *)this + 13, (unsigned int *)&v95[312 * v5 + 16]))
        {
          uint64_t v10 = *v8;
          if (v10)
          {
            uint64_t v11 = 0;
            long long v12 = v6;
            do
            {
              if (*v12 == 2) {
                uint64_t v11 = *((void *)v12 - 1);
              }
              v12 += 4;
              --v10;
            }
            while (v10);
            if (v11) {
              operator new();
            }
          }
        }
      }
      ++v5;
      v6 += 312;
    }
    while (v5 != 3);
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  __int16 v99 = 0;
  long long v100 = 0uLL;
  CFDictionaryRef cf = 0;
  uint64_t v16 = 0;
  CFStringRef key = (const __CFString *)*MEMORY[0x263F2C558];
  uint64_t v17 = (char *)a2 + 112;
  do
  {
    size_t v18 = &v95[312 * v14];
    int v20 = *((_DWORD *)v18 + 5);
    unsigned int v19 = (unsigned int *)(v18 + 20);
    __int16 v97 = v17;
    if (v20)
    {
      unint64_t v21 = 0;
      __int16 v22 = &v95[312 * v14 + 16];
      int v23 = v15;
      do
      {
        unint64_t v15 = (__CVBuffer *)*((void *)v17 - 1);
        if (v106[24 * *(unsigned int *)v22 + 4] == 1718186595)
        {
          int v24 = *(_DWORD *)v17;
          if (*(_DWORD *)v17 == 2)
          {
            CVPixelBufferRetain(*((CVPixelBufferRef *)v17 - 1));
            uint64_t v16 = v15;
          }
          else if (v24 == 15)
          {
            CVPixelBufferRetain(*((CVPixelBufferRef *)v17 - 1));
            *((void *)&v100 + 1) = v15;
          }
          else if (v24 == 17)
          {
            CVPixelBufferRetain(*((CVPixelBufferRef *)v17 - 1));
            *(void *)&long long v100 = v15;
          }
        }
        if (*(_DWORD *)v22 != v115) {
          goto LABEL_31;
        }
        if (*(_DWORD *)v17 == theDict)
        {
          CVPixelBufferRetain(v15);
          CFDictionaryRef Attachment = (const __CFDictionary *)CVBufferGetAttachment(v15, key, 0);
          CFDictionaryRef cf = Attachment;
          if (Attachment) {
            CFRetain(Attachment);
          }
          else {
            CFDictionaryRef cf = 0;
          }
          goto LABEL_32;
        }
        if (*(_DWORD *)v17 == 2)
        {
          CVPixelBufferRetain(v15);
          __int16 v99 = v15;
          unint64_t v15 = v23;
        }
        else
        {
LABEL_31:
          unint64_t v15 = v23;
        }
LABEL_32:
        ++v21;
        v17 += 16;
        int v23 = v15;
      }
      while (v21 < *v19);
    }
    ++v14;
    uint64_t v17 = v97 + 312;
  }
  while (v14 != 3);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
  uint64_t v26 = object;
  int v90 = v16;
  if ((void)v100 && *((void *)&v100 + 1))
  {
    CVPixelBufferRelease(*((CVPixelBufferRef *)&v100 + 1));
    *((void *)&v100 + 1) = 0;
  }
  theDicta = 0;
  if (v15 && v99 && cf)
  {
    CFDataRef v27 = (const __CFData *)CVBufferGetAttachment(v15, @"CameraIntrinsicMatrixPrivate", 0);
    if (v27)
    {
      BytePtr = (UInt8 *)CFDataGetBytePtr(v27);
      CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      theDicta = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (theDicta)
      {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v29, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (Mutable)
        {
          double v32 = H16ISP::CFArrayCreateFromMatrix((H16ISP *)BytePtr, v30);
          if (v32)
          {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F26A40], v32);
            CFRelease(v32);
          }
          long long v34 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (v34)
          {
            long long v35 = *(_OWORD *)(MEMORY[0x263EF89A0] + 16);
            long long v122 = *MEMORY[0x263EF89A0];
            long long v123 = v35;
            long long v124 = *(_OWORD *)(MEMORY[0x263EF89A0] + 32);
            uint64_t v36 = H16ISP::CFArrayCreateFromMatrix((H16ISP *)&v122, v33);
            if (v36)
            {
              CFDictionarySetValue(v34, (const void *)*MEMORY[0x263F26A80], v36);
              CFRelease(v36);
            }
            uint64_t v37 = CFArrayCreateMutable(v29, 0, MEMORY[0x263EFFF70]);
            if (v37)
            {
              LODWORD(valuePtr[0]) = 0;
              CFNumberRef v38 = CFNumberCreate(v29, kCFNumberIntType, valuePtr);
              CFArrayAppendValue(v37, v38);
              CFRelease(v38);
              LODWORD(valuePtr[0]) = 0;
              CFNumberRef v39 = CFNumberCreate(v29, kCFNumberIntType, valuePtr);
              CFArrayAppendValue(v37, v39);
              CFRelease(v39);
              LODWORD(valuePtr[0]) = 0;
              CFNumberRef v40 = CFNumberCreate(v29, kCFNumberIntType, valuePtr);
              CFArrayAppendValue(v37, v40);
              CFRelease(v40);
              CFDictionarySetValue(v34, (const void *)*MEMORY[0x263F26AD0], v37);
              CFRelease(v37);
            }
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F26A10], v34);
            CFRelease(v34);
          }
          CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F26958], Mutable);
          CFRelease(Mutable);
        }
        if (v90) {
          operator new();
        }
        if (v100 != 0)
        {
          if (*((void *)&v100 + 1)) {
            operator new();
          }
          if ((void)v100)
          {
            CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F26998], (const void *)v100);
            LODWORD(v122) = 1040187392;
            CFNumberRef v41 = CFNumberCreate(v29, kCFNumberFloatType, &v122);
            CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F269B8], v41);
            CFRelease(v41);
          }
          CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F26A90], (const void *)*MEMORY[0x263EFFB38]);
          uint64_t v42 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (v42)
          {
            CFAllocatorRef v43 = v29;
            uint64_t v44 = (long long *)MEMORY[0x263EF89A0];
            long long v45 = *(_OWORD *)(MEMORY[0x263EF89A0] + 16);
            long long v112 = *MEMORY[0x263EF89A0];
            long long v113 = v45;
            long long v114 = *(_OWORD *)(MEMORY[0x263EF89A0] + 32);
            if ((void)v100) {
              unint64_t v46 = (__CVBuffer *)v100;
            }
            else {
              unint64_t v46 = (__CVBuffer *)*((void *)&v100 + 1);
            }
            int Width = CVPixelBufferGetWidth(v46);
            int Height = CVPixelBufferGetHeight(v46);
            int v49 = CVPixelBufferGetWidth(v15);
            int v50 = CVPixelBufferGetHeight(v15);
            uint64_t v52 = 0;
            float v53 = (float)Height / (float)v49;
            float v54 = (float)Width / (float)v50;
            float v55 = v53 * *(float *)BytePtr;
            float v56 = v54 * *((float *)BytePtr + 5);
            long long v58 = v112;
            long long v57 = v113;
            float v59 = (COERCE_FLOAT(*((_OWORD *)BytePtr + 2)) + 0.5) * v53 + -0.5;
            int v60 = DWORD2(v114);
            float v61 = (COERCE_FLOAT(HIDWORD(*((void *)BytePtr + 4))) + 0.5) * v54 + -0.5;
            float32x4_t v63 = (float32x4_t)v44[1];
            long long v109 = *v44;
            float32x4_t v110 = v63;
            long long v111 = v44[2];
            float32x4_t v62 = (float32x4_t)v44[2];
            v63.i32[0] = 0;
            v63.i32[1] = 1.0;
            v63.i32[2] = *((_DWORD *)v44 + 2);
            v64.i64[0] = COERCE_UNSIGNED_INT(-1.0);
            v64.i32[2] = *((_DWORD *)v44 + 6);
            valuePtr[0] = v109;
            valuePtr[1] = v110;
            unsigned char valuePtr[2] = v111;
            do
            {
              *(long long *)((char *)&v122 + v52 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, COERCE_FLOAT(valuePtr[v52])), v64, *(float32x2_t *)&valuePtr[v52], 1), v62, (float32x4_t)valuePtr[v52], 2);
              ++v52;
            }
            while (v52 != 3);
            DWORD2(v109) = DWORD2(v122);
            v110.i32[2] = DWORD2(v123);
            DWORD2(v111) = DWORD2(v124);
            DWORD2(v112) = DWORD2(v58);
            *(void *)&long long v109 = v122;
            v110.i64[0] = v123;
            *(float *)&long long v58 = v56;
            DWORD2(v113) = DWORD2(v57);
            *(void *)&long long v111 = v124;
            *((float *)&v57 + 1) = v55;
            *(void *)&long long v112 = v58;
            *(void *)&long long v113 = v57;
            *(float *)&uint64_t v65 = (float)(unint64_t)(Width - 1) - v61;
            *((float *)&v65 + 1) = v59;
            DWORD2(v114) = v60;
            *(void *)&long long v114 = v65;
            CFStringRef v66 = H16ISP::CFArrayCreateFromMatrix((H16ISP *)&v112, v51);
            CFAllocatorRef v29 = v43;
            if (v66)
            {
              CFDictionarySetValue(v42, (const void *)*MEMORY[0x263F26A40], v66);
              CFRelease(v66);
            }
            unint64_t v68 = CFDictionaryCreateMutable(v43, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            uint64_t v26 = object;
            if (v68)
            {
              long long v69 = H16ISP::CFArrayCreateFromMatrix((H16ISP *)&v109, v67);
              if (v69)
              {
                CFDictionarySetValue(v68, (const void *)*MEMORY[0x263F26A80], v69);
                CFRelease(v69);
              }
              long long v70 = CFArrayCreateMutable(v29, 0, MEMORY[0x263EFFF70]);
              if (v70)
              {
                LODWORD(v122) = 0;
                CFNumberRef v71 = CFNumberCreate(v29, kCFNumberIntType, &v122);
                CFArrayAppendValue(v70, v71);
                CFRelease(v71);
                LODWORD(v122) = 0;
                CFNumberRef v72 = CFNumberCreate(v29, kCFNumberIntType, &v122);
                CFArrayAppendValue(v70, v72);
                CFRelease(v72);
                LODWORD(v122) = 0;
                CFNumberRef v73 = CFNumberCreate(v29, kCFNumberIntType, &v122);
                CFArrayAppendValue(v70, v73);
                CFRelease(v73);
                CFDictionarySetValue(v68, (const void *)*MEMORY[0x263F26AD0], v70);
                CFRelease(v70);
              }
              CFDictionarySetValue(v42, (const void *)*MEMORY[0x263F26A10], v68);
              CFRelease(v68);
            }
            CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F26960], v42);
            CFRelease(v42);
          }
        }
        uint64_t v74 = CFArrayCreateMutable(v29, 0, MEMORY[0x263EFFF70]);
        uint64_t v75 = (const void **)MEMORY[0x263F26AA8];
        if (v74)
        {
          CFArrayRef v76 = (const __CFArray *)CFDictionaryGetValue(cf, (const void *)*MEMORY[0x263F2D000]);
          if (v76)
          {
            CFIndex v77 = 0;
            long long v107 = (void *)*MEMORY[0x263F2D0C0];
            CFStringRef keya = (CFStringRef)*MEMORY[0x263F269C8];
            int v98 = (void *)*MEMORY[0x263F2CEE8];
            uint64_t v96 = (void *)*MEMORY[0x263F269C0];
            uint64_t v94 = (pthread_mutex_t *)*MEMORY[0x263F2D440];
            __int16 v93 = (void *)*MEMORY[0x263F269D8];
            __int16 v91 = (void *)*v75;
            uint64_t v92 = (void *)*MEMORY[0x263F2D620];
            while (v77 < CFArrayGetCount(v76))
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v76, v77);
              __int16 v79 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              if (v79)
              {
                *(void *)&valuePtr[0] = 0;
                uint64_t v80 = CFDictionaryGetValue(ValueAtIndex, v107);
                CFDictionarySetValue(v79, keya, v80);
                CFIndex v81 = CFDictionaryGetValue(ValueAtIndex, v98);
                CFDictionarySetValue(v79, v96, v81);
                uint64_t v82 = CFDictionaryGetValue(ValueAtIndex, v94);
                CFDictionarySetValue(v79, v93, v82);
                CFNumberRef v83 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v92);
                CFNumberGetValue(v83, kCFNumberLongLongType, valuePtr);
                int64_t v84 = FigHostTimeToNanoseconds();
                CMTimeMake((CMTime *)&v122, v84, 1000000000);
                *(_OWORD *)&time.value = v122;
                time.epoch = v123;
                CFDictionaryRef v85 = CMTimeCopyAsDictionary(&time, v29);
                CFDictionarySetValue(v79, v91, v85);
                CFRelease(v85);
                CFArrayAppendValue(v74, v79);
                CFRelease(v79);
              }
              ++v77;
            }
          }
          CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F269E0], v74);
          CFRelease(v74);
        }
        uint64_t v86 = CFDictionaryGetValue(cf, (const void *)*MEMORY[0x263F2C560]);
        if (v86) {
          CFDictionarySetValue(theDicta, *v75, v86);
        }
        if (CFDictionaryCreateMutable(v29, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90])) {
          operator new();
        }
        CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F26920], (const void *)*MEMORY[0x263EFFB40]);
        CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F26918], (const void *)*MEMORY[0x263EFFB38]);
        CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F26968], v15);
        CFDictionarySetValue(theDicta, (const void *)*MEMORY[0x263F26948], value);
        if (!CVAFaceTrackingProcess())
        {
          dispatch_semaphore_wait(v26, 0xFFFFFFFFFFFFFFFFLL);
          __int16 v87 = (const void *)v118[3];
          if (v87)
          {
            CVBufferSetAttachment(v15, (CFStringRef)*MEMORY[0x263F2C5D0], v87, kCVAttachmentMode_ShouldPropagate);
            CFRelease((CFTypeRef)v118[3]);
          }
        }
        goto LABEL_91;
      }
    }
    theDicta = 0;
LABEL_92:
    CVPixelBufferRelease(v15);
  }
  else
  {
LABEL_91:
    if (v15) {
      goto LABEL_92;
    }
  }
  if (v99) {
    CVPixelBufferRelease(v99);
  }
  if (cf) {
    CFRelease(cf);
  }
  if ((void)v100) {
    CVPixelBufferRelease((CVPixelBufferRef)v100);
  }
  if (*((void *)&v100 + 1)) {
    CVPixelBufferRelease(*((CVPixelBufferRef *)&v100 + 1));
  }
  if (v90) {
    CVPixelBufferRelease(v90);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (theDicta) {
    CFRelease(theDicta);
  }
  _Block_object_dispose(&v117, 8);
  return 0;
}

void sub_2468F36F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Unwind_Resume(a1);
}

intptr_t ___ZN6H16ISP27H16ISPGraphFaceTrackingNode19onMessageProcessingEPNS_24H16ISPFilterGraphMessageE_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  CFRetain(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  uint64_t v3 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v3);
}

__CFArray *H16ISP::CFArrayCreateFromMatrix(H16ISP *this, simd_float3x3 *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    CFMutableArrayRef v5 = CFArrayCreateMutable(v3, 0, MEMORY[0x263EFFF70]);
    if (v5)
    {
      int v6 = v5;
      int valuePtr = *(_DWORD *)this;
      CFNumberRef v7 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
      CFArrayAppendValue(v6, v7);
      CFRelease(v7);
      int valuePtr = *((_DWORD *)this + 4);
      CFNumberRef v8 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
      CFArrayAppendValue(v6, v8);
      CFRelease(v8);
      int valuePtr = *((_DWORD *)this + 8);
      CFNumberRef v9 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
      CFArrayAppendValue(v6, v9);
      CFRelease(v9);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
    }
    CFMutableArrayRef v10 = CFArrayCreateMutable(v3, 0, MEMORY[0x263EFFF70]);
    if (v10)
    {
      uint64_t v11 = v10;
      int valuePtr = *((_DWORD *)this + 1);
      CFNumberRef v12 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
      CFArrayAppendValue(v11, v12);
      CFRelease(v12);
      int valuePtr = *((_DWORD *)this + 5);
      CFNumberRef v13 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
      CFArrayAppendValue(v11, v13);
      CFRelease(v13);
      int valuePtr = *((_DWORD *)this + 9);
      CFNumberRef v14 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
      CFArrayAppendValue(v11, v14);
      CFRelease(v14);
      CFArrayAppendValue(Mutable, v11);
      CFRelease(v11);
    }
    CFMutableArrayRef v15 = CFArrayCreateMutable(v3, 0, MEMORY[0x263EFFF70]);
    if (v15)
    {
      uint64_t v16 = v15;
      int valuePtr = *((_DWORD *)this + 2);
      CFNumberRef v17 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
      CFArrayAppendValue(v16, v17);
      CFRelease(v17);
      int valuePtr = *((_DWORD *)this + 6);
      CFNumberRef v18 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
      CFArrayAppendValue(v16, v18);
      CFRelease(v18);
      int valuePtr = *((_DWORD *)this + 10);
      CFNumberRef v19 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
      CFArrayAppendValue(v16, v19);
      CFRelease(v19);
      CFArrayAppendValue(Mutable, v16);
      CFRelease(v16);
    }
  }
  return Mutable;
}

uint64_t H16ISP::H16ISPGraphFaceTrackingNode::H16ISPGraphFaceTrackingNode(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode(a1, 6);
  *CFMutableArrayRef v10 = &unk_26FAEBC68;
  v10[10] = a2;
  v10[11] = 0;
  v10[12] = a3;
  std::unordered_map<unsigned int,H16ISP::H16ISPFrameReceiverBufferPoolType>::unordered_map((uint64_t)(v10 + 13), a4);
  *(_DWORD *)(a1 + 144) = a5;
  CFRetain(a2);
  return a1;
}

void sub_2468F3B28(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table(v2);
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(v1);
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPGraphFaceTrackingNode::~H16ISPGraphFaceTrackingNode(H16ISP::H16ISPGraphFaceTrackingNode *this)
{
  *(void *)this = &unk_26FAEBC68;
  uint64_t v2 = (const void *)*((void *)this + 11);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 11) = 0;
  }
  CFRelease(*((CFTypeRef *)this + 10));
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table((uint64_t)this + 104);

  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);
}

{
  uint64_t vars8;

  H16ISP::H16ISPGraphFaceTrackingNode::~H16ISPGraphFaceTrackingNode(this);

  JUMPOUT(0x24C53D6E0);
}

BOOL GMC_SpatialCoverageTest(uint64_t a1, uint64_t a2, double *a3)
{
  Matrix<unsigned int>::Matrix((uint64_t)&v21, *(_DWORD *)(a2 + 116) / 32, *(_DWORD *)(a2 + 112) / 32);
  unint64_t v6 = *(unsigned int *)(a1 + 20);
  if (v6)
  {
    for (unint64_t i = 0; i < v6; ++i)
    {
      int v8 = *(_DWORD *)(a1 + 16);
      if (!v8) {
        __assert_rtn("operator()", "Matrix.hpp", 125, "row < m_rows && col < m_cols");
      }
      if (v8 == 1) {
        __assert_rtn("operator()", "Matrix.hpp", 125, "row < m_rows && col < m_cols");
      }
      int v9 = *(_DWORD *)(a2 + 112);
      int v10 = v9 + 31;
      if (v9 >= 0) {
        int v10 = *(_DWORD *)(a2 + 112);
      }
      uint64_t v11 = (double *)(*(void *)(a1 + 8) + 8 * i);
      unsigned int v12 = fmin((double)(*(_DWORD *)(a2 + 116) / 32 - 1), fmax((double)(v11[v6] * 0.03125), 0.0));
      if (v23 <= v12
        || (unsigned int v13 = fmin((double)((v10 >> 5) - 1), fmax((double)(*v11 * 0.03125), 0.0)), v24 <= v13))
      {
        __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
      }
      v22[v13 + v24 * v12] = 1;
      unint64_t v6 = *(unsigned int *)(a1 + 20);
    }
  }
  if (v24 * v23)
  {
    CFNumberRef v14 = v22;
    double v15 = 0.0;
    uint64_t v16 = v24 * v23;
    do
    {
      unsigned int v17 = *v14++;
      double v15 = v15 + (double)v17;
      --v16;
    }
    while (v16);
  }
  else
  {
    double v15 = 0.0;
  }
  double v18 = v15 / (double)(v24 * v23);
  BOOL v19 = v18 > *(double *)(a2 + 536);
  *a3 = v18;
  Matrix<unsigned int>::~Matrix((uint64_t)&v21);
  return v19;
}

void sub_2468F3E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Matrix<unsigned int>::Matrix(uint64_t result, int a2, int a3)
{
  *(void *)double result = &unk_26FAEBCE0;
  if (a3 * a2) {
    operator new[]();
  }
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

{
  *(void *)double result = &unk_26FAEBCE0;
  if (a3 * a2) {
    operator new[]();
  }
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

void Matrix<unsigned int>::~Matrix(uint64_t a1)
{
  Matrix<unsigned int>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

uint64_t Matrix<unsigned int>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEBCE0;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x24C53D6C0]();
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void H16ISP::H16ISPDeviceController::~H16ISPDeviceController(H16ISP::H16ISPDeviceController *this)
{
  for (unint64_t i = 0; i < CFArrayGetCount(*(CFArrayRef *)this); ++i)
  {
    CFDictionaryRef ValueAtIndex = (H16ISP::H16ISPDevice *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, i);
    H16ISP::H16ISPDevice::DisableDeviceMessages(ValueAtIndex);
  }
  io_object_t v4 = *((_DWORD *)this + 14);
  if (v4) {
    IOObjectRelease(v4);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
  CFMutableArrayRef v5 = (IONotificationPort *)*((void *)this + 2);
  if (v5)
  {
    unint64_t v6 = (__CFRunLoopSource *)*((void *)this + 3);
    if (v6)
    {
      CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 6), v6, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
      *((void *)this + 3) = 0;
      CFMutableArrayRef v5 = (IONotificationPort *)*((void *)this + 2);
    }
    IONotificationPortDestroy(v5);
  }
  CFNumberRef v7 = *((void *)this + 9);
  if (v7)
  {
    dispatch_sync(v7, &__block_literal_global_2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((void *)this + 9) = 0;
  }
  pthread_cond_destroy((pthread_cond_t *)this + 3);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  int v8 = (const void *)*((void *)this + 6);
  if (v8) {
    CFRelease(v8);
  }
}

void H16ISP::cfArrayReleaseH16ISPUnitObject(H16ISP *this, const __CFAllocator *a2, const void *a3)
{
  if (a2)
  {
    H16ISP::H16ISPDevice::~H16ISPDevice(a2);
    JUMPOUT(0x24C53D6E0);
  }
}

double readAnalyticsIsfThresholds(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  if (!readAnalyticsFile("/var/mobile/Library/ISP/Pearl/IsfThresholds.bin", (void *)v2, 0x20u))
  {
    if (PCECalibration::readColorAssembly((uint64_t)v8))
    {
      unsigned int v6[2] = v8[2];
      _OWORD v6[3] = v8[3];
      uint64_t v7 = v9;
      v6[0] = v8[0];
      v6[1] = v8[1];
      long long v4 = 0uLL;
      double v5 = 0.0;
      GeomUtils::CalcRotationAngleFromMatrix<double>((uint64_t)v6, (long double *)&v4);
      *(_OWORD *)(v2 + 8) = v4;
      double result = v5;
      *(double *)(v2 + 24) = v5;
    }
  }
  return result;
}

BOOL readAnalyticsFile(const char *a1, void *a2, unsigned int a3)
{
  double v5 = fopen(a1, "rb");
  if (v5)
  {
    unint64_t v6 = v5;
    int v7 = fread(a2, 1uLL, a3, v5);
    fclose(v6);
    return v7 == a3;
  }
  else
  {
    bzero(a2, a3);
    return 0;
  }
}

uint64_t GeomUtils::CalcRotationAngleFromMatrix<double>(uint64_t a1, long double *a2)
{
  *a2 = atan2(*(long double *)(a1 + 56), *(long double *)(a1 + 64)) * 1000.0;
  a2[1] = atan2(-*(double *)(a1 + 48), sqrt(*(double *)(a1 + 64) * *(double *)(a1 + 64) + *(double *)(a1 + 56) * *(double *)(a1 + 56)))* 1000.0;
  a2[2] = atan2(*(long double *)(a1 + 24), *(long double *)a1) * 1000.0;
  return 0;
}

FILE *writeAnalyticsIsfThresholds(void *a1)
{
  return writeAnalyticsFile("/var/mobile/Library/ISP/Pearl/IsfThresholds.bin", a1, 0x20u);
}

FILE *writeAnalyticsFile(const char *a1, const void *a2, unsigned int a3)
{
  double result = fopen(a1, "wb");
  if (result)
  {
    unint64_t v6 = result;
    fwrite(a2, a3, 1uLL, result);
    return (FILE *)fclose(v6);
  }
  return result;
}

void reportIsfResults(int a1, double *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == 2)
  {
    if ((analytics_send_event_lazy() & 1) == 0)
    {
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        reportIsfResults();
      }
    }
    checkIsfThresholds(a2, a6);
    if (!a1) {
      goto LABEL_14;
    }
  }
  else
  {
    if (analytics_send_event_lazy()) {
      goto LABEL_13;
    }
    int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v10 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
    }
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      if (a1) {
        return;
      }
      goto LABEL_14;
    }
    reportIsfResults();
    if (!a1) {
LABEL_14:
    }
      checkIsfThresholds(a2, a6);
  }
}

void checkIsfThresholds(double *a1, uint64_t a2)
{
  checkIsfThresholdPerAxis("X", (signed __int8 *)a2, *a1 - *(double *)(a2 + 8));
  checkIsfThresholdPerAxis("Y", (signed __int8 *)(a2 + 2), a1[1] - *(double *)(a2 + 16));
  double v4 = a1[2] - *(double *)(a2 + 24);

  checkIsfThresholdPerAxis("Z", (signed __int8 *)(a2 + 4), v4);
}

void reportProjectorGmcResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v20[0].i32[0] = 2;
  uint64_t v21 = -1;
  uint64_t v22 = -1;
  int64x2_t v23 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v24 = 0x7FF8000000000000;
  readAnalyticsProjectorGmcHistory(v20);
  uint64_t v8 = a5[1];
  uint64_t v22 = a5[2];
  uint64_t v21 = v8;
  uint64_t v9 = a5[6];
  v23.i64[0] = a5[5];
  v23.i64[1] = v9;
  uint64_t v24 = a5[7];
  writeAnalyticsFile("/var/mobile/Library/ISP/Pearl/GmcThresholds.bin", v20, 0x1B0u);
  if ((analytics_send_event_lazy() & 1) == 0)
  {
    int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v10 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      reportProjectorGmcResults();
    }
  }
  if (*(double *)(a2 + 376) >= 0.0)
  {
    v25[0].i32[0] = 2;
    v29[5] = -1;
    v29[6] = -1;
    v29[7] = 0x7FF8000000000000;
    int64x2_t v30 = vdupq_n_s64(0x7FF8000000000000uLL);
    readAnalyticsProjectorGmcHistory(v25);
    long long v11 = *(_OWORD *)(a1 + 13096);
    unsigned __int16 v34[2] = *(_OWORD *)(a1 + 13080);
    int v34[3] = v11;
    uint64_t v35 = *(void *)(a1 + 13112);
    long long v12 = *(_OWORD *)(a1 + 13064);
    v34[0] = *(_OWORD *)(a1 + 13048);
    v34[1] = v12;
    double v31 = 0.0;
    double v32 = 0.0;
    double v33 = 0.0;
    GeomUtils::CalcRotationAngleFromMatrix<double>((uint64_t)v34, &v31);
    double v13 = v32;
    double v14 = v33;
    ++v25[0].i32[1];
    checkGmcThresholdPerAxis("X", (double *)&v25[0].i64[1], v31);
    checkGmcThresholdPerAxis("Y", &v26, v13);
    checkGmcThresholdPerAxis("Z", &v27, v14);
    uint64_t v15 = 0;
    double v28 = v28 * 0.99
        + (double)(int)llround((*(double *)(a2 + 88) * *(double *)(a1 + 24) / *(double *)(a1 + 32) + -1.0) * 10000.0)
        * 0.01;
    double v16 = 0.05;
    do
    {
      double v17 = v28;
      if (v28 > v16)
      {
        int v18 = (*((unsigned char *)v29 + v15))++ + 1;
        if (v18 == 10)
        {
          reportGmcEflTolerance(v16);
          double v17 = v28;
        }
      }
      if (v17 < -v16)
      {
        int v19 = (*((unsigned char *)v29 + v15 + 1))++ + 1;
        if (v19 == 10) {
          reportGmcEflTolerance(-v16);
        }
      }
      double v16 = v16 + 0.05;
      v15 += 2;
    }
    while (v15 != 40);
    writeAnalyticsFile("/var/mobile/Library/ISP/Pearl/GmcThresholds.bin", v25, 0x1B0u);
  }
}

FILE *readAnalyticsProjectorGmcHistory(int64x2_t *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  double result = (FILE *)readAnalyticsFile("/var/mobile/Library/ISP/Pearl/GmcThresholds.bin", a1, 0x1B0u);
  if (result) {
    BOOL v3 = a1->i32[0] == 2;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3)
  {
    *(void *)&__src[97] = -1;
    *(void *)&__src[99] = -1;
    a1->i32[0] = 2;
    memcpy((char *)a1->i64 + 4, __src, 0x194uLL);
    a1[25].i64[1] = 0x7FF8000000000000;
    a1[26] = vdupq_n_s64(0x7FF8000000000000uLL);
    return writeAnalyticsFile("/var/mobile/Library/ISP/Pearl/GmcThresholds.bin", a1, 0x1B0u);
  }
  return result;
}

void *___Z25reportProjectorGmcResultsRK26sCIspCmdChPearlCalibrationRK18GMCInnerStatisticsiS1_RK22H16ISPAnalyticsGMCInfo_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  BOOL v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_uint64(v2, "Duration", *(void *)(*(void *)(a1 + 32) + 32));
    xpc_dictionary_set_int64(v3, "Status", (uint64_t)*(double *)(*(void *)(a1 + 40) + 376));
    double v4 = *(double **)(a1 + 40);
    if (v4[47] >= 0.0)
    {
      xpc_dictionary_set_double(v3, "SpatialCoverage", *v4);
      xpc_dictionary_set_double(v3, "RotationX", *(double *)(*(void *)(a1 + 32) + 40));
      xpc_dictionary_set_double(v3, "RotationY", *(double *)(*(void *)(a1 + 32) + 48));
      xpc_dictionary_set_double(v3, "RotationZ", *(double *)(*(void *)(a1 + 32) + 56));
      double v5 = (*(double *)(*(void *)(a1 + 40) + 88)
          * *(double *)(*(void *)(a1 + 48) + 24)
          / *(double *)(*(void *)(a1 + 48) + 32)
          + -1.0)
         * 100.0;
      xpc_dictionary_set_double(v3, "EflPctDiffFromAssembly", v5);
      xpc_dictionary_set_double(v3, "EflPctDiffFromPrev", v5- (*(double *)(*(void *)(a1 + 40) + 88)* *(double *)(*(void *)(a1 + 56) + 24)/ *(double *)(*(void *)(a1 + 56) + 32)+ -1.0)* 100.0);
      xpc_dictionary_set_double(v3, "TimeSincePrevSuccessfulRun", (double)*(unint64_t *)(a1 + 64));
    }
    xpc_dictionary_set_double(v3, "TimeSincePrevRun", (double)*(unint64_t *)(a1 + 72));
    xpc_dictionary_set_double(v3, "RotationXDiffFromPrev", *(double *)(a1 + 80));
    xpc_dictionary_set_double(v3, "RotationYDiffFromPrev", *(double *)(a1 + 88));
    xpc_dictionary_set_double(v3, "RotationZDiffFromPrev", *(double *)(a1 + 96));
    uint64_t v6 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v6 + 64))
    {
      xpc_dictionary_set_double(v3, "ISFConfidence", *(double *)(v6 + 24));
      xpc_dictionary_set_double(v3, "ISFDuration", **(double **)(a1 + 32));
      double v23 = 0.0;
      double v24 = 0.0;
      double v25 = 0.0;
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v22 = *(void *)(v7 + 13112);
      long long v8 = *(_OWORD *)(v7 + 13096);
      long long v20 = *(_OWORD *)(v7 + 13080);
      long long v21 = v8;
      long long v9 = *(_OWORD *)(v7 + 13064);
      long long v18 = *(_OWORD *)(v7 + 13048);
      long long v19 = v9;
      GeomUtils::CalcRotationAngleFromMatrix<double>((uint64_t)&v18, &v23);
      double v15 = 0.0;
      double v16 = 0.0;
      double v17 = 0.0;
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(v10 + 13112);
      long long v11 = *(_OWORD *)(v10 + 13096);
      long long v20 = *(_OWORD *)(v10 + 13080);
      long long v21 = v11;
      long long v12 = *(_OWORD *)(v10 + 13064);
      long long v18 = *(_OWORD *)(v10 + 13048);
      long long v19 = v12;
      GeomUtils::CalcRotationAngleFromMatrix<double>((uint64_t)&v18, &v15);
      xpc_dictionary_set_double(v3, "FilteredRotationX", v23);
      xpc_dictionary_set_double(v3, "FilteredRotationY", v24);
      xpc_dictionary_set_double(v3, "FilteredRotationZ", v25);
      xpc_dictionary_set_double(v3, "FilteredRotationXDiffFromPrev", v23 - v15);
      xpc_dictionary_set_double(v3, "FilteredRotationYDiffFromPrev", v24 - v16);
      xpc_dictionary_set_double(v3, "FilteredRotationZDiffFromPrev", v25 - v17);
    }
    uint64_t v13 = *(unsigned int *)(a1 + 104);
    if ((int)v13 >= 1) {
      xpc_dictionary_set_uint64(v3, "ScanModeStep", v13);
    }
  }
  return v3;
}

void reportStereoGmcResults()
{
  if ((analytics_send_event_lazy() & 1) == 0)
  {
    v0 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      v0 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v0;
    }
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      reportStereoGmcResults();
    }
  }
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_24680F000, v0, v1, "Failed to send the %s event into the diagnostics system %08X\n\n", v2, v3, v4, v5, 2u);
}

void *___Z22reportStereoGmcResultsRK18GMCInnerStatisticsRK26sCIspCmdChPearlCalibrationy_block_invoke(void *a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  BOOL v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_int64(v2, "Status", (uint64_t)*(double *)(a1[4] + 376));
    xpc_dictionary_set_uint64(v3, "Duration", a1[5]);
    double v4 = (double *)a1[4];
    if (v4[47] >= 0.0)
    {
      uint64_t v5 = a1[6];
      double v6 = v4[31];
      double v7 = v4[32];
      double v8 = v4[33];
      long long v9 = *(_OWORD *)(v5 + 8600);
      __int16 v18[2] = *(_OWORD *)(v5 + 8584);
      v18[3] = v9;
      uint64_t v19 = *(void *)(v5 + 8616);
      long long v10 = *(_OWORD *)(v5 + 8568);
      v18[0] = *(_OWORD *)(v5 + 8552);
      v18[1] = v10;
      double v15 = 0.0;
      double v16 = 0.0;
      double v17 = 0.0;
      GeomUtils::CalcRotationAngleFromMatrix<double>((uint64_t)v18, &v15);
      double v11 = v6 - v15;
      double v12 = v7 - v16;
      double v13 = v8 - v17;
      xpc_dictionary_set_double(v3, "RotationX", v11);
      xpc_dictionary_set_double(v3, "RotationY", v12);
      xpc_dictionary_set_double(v3, "RotationZ", v13);
    }
  }
  return v3;
}

void reportMutualInformationResults()
{
  if ((analytics_send_event_lazy() & 1) == 0)
  {
    v0 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      v0 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v0;
    }
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      reportMutualInformationResults();
    }
  }
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_24680F000, v0, v1, "Failed to send the %s event into the diagnostics system %08X\n\n", v2, v3, v4, v5, 2u);
}

void *___Z30reportMutualInformationResultsiRKN16RgbIrCalibration20RgbIrInnerStatisticsE15MutualInfoStagey_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  BOOL v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_uint64(v2, "Duration", *(void *)(a1 + 32));
    xpc_dictionary_set_uint64(v3, "Status", *(int *)(a1 + 48));
    if (!*(_DWORD *)(a1 + 48))
    {
      uint64_t v4 = *(int *)(*(void *)(a1 + 40) + 20);
      if (v4 <= 2) {
        xpc_dictionary_set_string(v3, "SelectedMode", off_2651E9028[v4]);
      }
      int v5 = *(_DWORD *)(a1 + 52);
      if (v5)
      {
        if (v5 != 1)
        {
LABEL_10:
          xpc_dictionary_set_double(v3, "RotationX", *(float *)(*(void *)(a1 + 40) + 8));
          xpc_dictionary_set_double(v3, "RotationY", *(float *)(*(void *)(a1 + 40) + 12));
          xpc_dictionary_set_double(v3, "RotationZ", *(float *)(*(void *)(a1 + 40) + 16));
          xpc_dictionary_set_double(v3, "Confidence", **(double **)(a1 + 40));
          return v3;
        }
        double v6 = "FullGrid";
      }
      else
      {
        double v6 = "LMV";
      }
      xpc_dictionary_set_string(v3, "CalculationMode", v6);
      goto LABEL_10;
    }
  }
  return v3;
}

void reportJasperStateAnalytics()
{
  if ((analytics_send_event_lazy() & 1) == 0)
  {
    v0 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      v0 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v0;
    }
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      reportJasperStateAnalytics();
    }
  }
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_24680F000, v0, v1, "Failed to send the %s event into the diagnostics system %08X\n\n", v2, v3, v4, v5, 2u);
}

void *___Z26reportJasperStateAnalytics13eJasperStatesS_yyiii_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  if (v2 == 2)
  {
    int v5 = *(_DWORD *)(a1 + 52);
    if (v5 == 1)
    {
      uint64_t v4 = "Soft Brick to Armed";
      goto LABEL_12;
    }
    if (v5 == 3)
    {
      uint64_t v4 = "Soft Brick to Hard Brick";
      goto LABEL_12;
    }
    return 0;
  }
  if (v2 != 1) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 52);
  if (v3 == 2)
  {
    uint64_t v4 = "Armed to Soft Brick";
    goto LABEL_12;
  }
  if (v3 != 3) {
    return 0;
  }
  uint64_t v4 = "Armed to Hard Brick";
LABEL_12:
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  double v6 = v7;
  if (v7)
  {
    xpc_dictionary_set_string(v7, "TransitionType", v4);
    xpc_dictionary_set_uint64(v6, "FramesSinceEver", *(void *)(a1 + 32));
    xpc_dictionary_set_uint64(v6, "FramesSinceTransition", *(void *)(a1 + 40));
    xpc_dictionary_set_uint64(v6, "TransitionCount", *(int *)(a1 + 56));
    if (*(_DWORD *)(a1 + 52) != 1)
    {
      xpc_dictionary_set_uint64(v6, "Resistance", *(int *)(a1 + 60));
      xpc_dictionary_set_uint64(v6, "fault0", *(unsigned __int8 *)(a1 + 64));
      xpc_dictionary_set_uint64(v6, "fault1", *(unsigned __int8 *)(a1 + 65));
      xpc_dictionary_set_uint64(v6, "fault2", *(unsigned __int8 *)(a1 + 66));
      xpc_dictionary_set_uint64(v6, "fault3", *(unsigned __int8 *)(a1 + 67));
    }
  }
  return v6;
}

void reportPeridotCoexRetries()
{
  if ((analytics_send_event_lazy() & 1) == 0)
  {
    v0 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      v0 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v0;
    }
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      reportPeridotCoexRetries(v0, v1, v2, v3, v4, v5, v6, v7);
    }
  }
}

void *___Z24reportPeridotCoexRetriesjj_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = v2;
  if (v2)
  {
    int v4 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = "Unknown";
    if (v4 == 20) {
      uint64_t v5 = "Link Training";
    }
    if (v4 == 19) {
      uint64_t v6 = "Lock PLL";
    }
    else {
      uint64_t v6 = v5;
    }
    xpc_dictionary_set_string(v2, "Source", v6);
    xpc_dictionary_set_uint64(v3, "RetryCounter", *(unsigned __int8 *)(a1 + 42));
    xpc_dictionary_set_double(v3, "Temperature", *(float *)(a1 + 36));
    if (*(unsigned char *)(a1 + 43)) {
      xpc_dictionary_set_int64(v3, "VSpad", *(__int16 *)(a1 + 40));
    }
  }
  return v3;
}

void *___ZL29reportIsfResultsFromStereoGmc9IsfStatusRKN3Isf18IsfInnerStatisticsERK26sCIspCmdChPearlCalibrationR38H16ISPAnalyticsIsfHistoricalThresholds_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_uint64(v2, "Status", *(unsigned int *)(a1 + 48));
    xpc_dictionary_set_string(v3, "Mode", "StereoGmc");
    xpc_dictionary_set_int64(v3, "StereoGmcStatus", 0);
    if (!*(_DWORD *)(a1 + 48))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(double **)(a1 + 40);
      double v6 = *v5;
      double v7 = v5[1];
      double v8 = v5[2];
      long long v9 = *(_OWORD *)(v4 + 8600);
      __int16 v18[2] = *(_OWORD *)(v4 + 8584);
      v18[3] = v9;
      uint64_t v19 = *(void *)(v4 + 8616);
      long long v10 = *(_OWORD *)(v4 + 8568);
      v18[0] = *(_OWORD *)(v4 + 8552);
      v18[1] = v10;
      double v15 = 0.0;
      double v16 = 0.0;
      double v17 = 0.0;
      GeomUtils::CalcRotationAngleFromMatrix<double>((uint64_t)v18, &v15);
      double v11 = v6 - v15;
      double v12 = v7 - v16;
      double v13 = v8 - v17;
      xpc_dictionary_set_double(v3, "RotationX", v11);
      xpc_dictionary_set_double(v3, "RotationY", v12);
      xpc_dictionary_set_double(v3, "RotationZ", v13);
    }
  }
  return v3;
}

void *___ZL37reportIsfResultsFromMutualInformation9IsfStatusRKN3Isf18IsfInnerStatisticsENS0_12ResultOriginE12SelectedModeddRK26sCIspCmdChPearlCalibrationR38H16ISPAnalyticsIsfHistoricalThresholds_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_uint64(v2, "Status", *(unsigned int *)(a1 + 64));
    double v4 = *(double *)(a1 + 32);
    if (v4 != 4025479150.0) {
      xpc_dictionary_set_int64(v3, "StereoGmcStatus", (uint64_t)v4);
    }
    int v5 = *(_DWORD *)(a1 + 68);
    if (v5 == 1)
    {
      xpc_dictionary_set_string(v3, "Mode", "FullGrid");
      xpc_dictionary_set_double(v3, "MIConfidence", *(double *)(a1 + 40));
    }
    else if (!v5)
    {
      xpc_dictionary_set_string(v3, "Mode", "LMV");
    }
    if (!*(_DWORD *)(a1 + 64))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      double v7 = *(double **)(a1 + 56);
      double v8 = *v7;
      double v9 = v7[1];
      double v10 = v7[2];
      long long v11 = *(_OWORD *)(v6 + 8600);
      void v20[2] = *(_OWORD *)(v6 + 8584);
      v20[3] = v11;
      uint64_t v21 = *(void *)(v6 + 8616);
      long long v12 = *(_OWORD *)(v6 + 8568);
      v20[0] = *(_OWORD *)(v6 + 8552);
      v20[1] = v12;
      double v17 = 0.0;
      double v18 = 0.0;
      double v19 = 0.0;
      GeomUtils::CalcRotationAngleFromMatrix<double>((uint64_t)v20, &v17);
      double v13 = v8 - v17;
      double v14 = v9 - v18;
      double v15 = v10 - v19;
      xpc_dictionary_set_double(v3, "RotationX", v13);
      xpc_dictionary_set_double(v3, "RotationY", v14);
      xpc_dictionary_set_double(v3, "RotationZ", v15);
    }
  }
  return v3;
}

void checkIsfThresholdPerAxis(char *a1, signed __int8 *a2, double a3)
{
  int v6 = *a2;
  if ((double)(v6 + 1) < a3)
  {
    do
    {
      signed __int8 v7 = v6 + 1;
      *a2 = v7;
      reportIsfThreshold(v7, a1);
      LOBYTE(v6) = *a2;
    }
    while ((double)(*a2 + 1) < a3);
  }
  int v8 = a2[1];
  if ((double)(v8 - 1) > a3)
  {
    do
    {
      signed __int8 v9 = v8 - 1;
      a2[1] = v9;
      reportIsfThreshold(v9, a1);
      LOBYTE(v8) = a2[1];
    }
    while ((double)((char)v8 - 1) > a3);
  }
}

void reportIsfThreshold(signed __int8 a1, const char *a2)
{
  if ((analytics_send_event_lazy() & 1) == 0)
  {
    xpc_object_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      xpc_object_t v2 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v2;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      reportIsfThreshold();
    }
  }
}

void *___ZL18reportIsfThresholdaPKc_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_int64(v2, "ThresholdPassed", *(char *)(a1 + 40));
    xpc_dictionary_set_string(v3, "Axis", *(const char **)(a1 + 32));
  }
  return v3;
}

void checkGmcThresholdPerAxis(char *a1, double *a2, double a3)
{
  *a2 = *a2 * 0.99 + a3 * 0.01;
  int v5 = (char *)a2 + 9;
  uint64_t v6 = -50;
  int v7 = -1;
  double v8 = 1.0;
  do
  {
    double v9 = *a2;
    if (*a2 > v8)
    {
      int v10 = (*(v5 - 1))++ + 1;
      if (v10 == 10)
      {
        reportGmcThreshold(v6 + 51, a1);
        double v9 = *a2;
      }
    }
    if (v9 < (double)v7)
    {
      int v11 = (*v5)++ + 1;
      if (v11 == 10) {
        reportGmcThreshold(v7, a1);
      }
    }
    double v8 = v8 + 1.0;
    v5 += 2;
    --v7;
  }
  while (!__CFADD__(v6++, 1));
}

void reportGmcThreshold(signed __int8 a1, const char *a2)
{
  if ((analytics_send_event_lazy() & 1) == 0)
  {
    xpc_object_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      xpc_object_t v2 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v2;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      reportGmcThreshold();
    }
  }
}

void *___ZL18reportGmcThresholdaPKc_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_int64(v2, "ThresholdPassed", *(char *)(a1 + 40));
    xpc_dictionary_set_string(v3, "Axis", *(const char **)(a1 + 32));
  }
  return v3;
}

void reportGmcEflTolerance(double a1)
{
  if ((analytics_send_event_lazy() & 1) == 0)
  {
    uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v1 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      reportGmcEflTolerance();
    }
  }
}

xpc_object_t ___ZL21reportGmcEflToleranced_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2) {
    xpc_dictionary_set_double(v2, "ThresholdPassed", *(double *)(a1 + 32));
  }
  return v3;
}

void *H16ISP::H16ISPGraphExclavePerceptionNode::H16ISPGraphExclavePerceptionNode(H16ISP::H16ISPGraphExclavePerceptionNode *this, H16ISP::H16ISPDevice *a2, int a3)
{
  double result = (void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode((uint64_t)this, 29, a2, a3, 1);
  *double result = &unk_26FAEBD30;
  return result;
}

{
  void *result;

  double result = (void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode((uint64_t)this, 29, a2, a3, 1);
  *double result = &unk_26FAEBD30;
  return result;
}

uint64_t H16ISP::H16ISPGraphExclavePerceptionNode::updateObjectDicts(uint64_t a1, uint64_t a2, int a3)
{
  CFDictionaryRef theDict = 0;
  value = 0;
  int v5 = (pthread_mutex_t *)(a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 8));
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 368), (const void *)*MEMORY[0x263F2CD70], (const void **)&value) == 1)
  {
    int ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2C970], (const void **)&theDict);
    int v7 = (const void **)MEMORY[0x263F2C988];
    if (ValueIfPresent)
    {
      CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2C988]);
      if (CFArrayGetCount(v8) >= 1)
      {
        CFIndex v9 = 0;
        int v10 = (const void *)*MEMORY[0x263F2C928];
        int v11 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          int v11 = (const void **)MEMORY[0x263EFFB40];
        }
        long long v12 = *v11;
        do
        {
          CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v8, v9);
          CFDictionarySetValue(ValueAtIndex, v10, v12);
          ++v9;
        }
        while (v9 < CFArrayGetCount(v8));
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2C958], (const void **)&theDict))
    {
      CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(theDict, *v7);
      if (CFArrayGetCount(v14) >= 1)
      {
        CFIndex v15 = 0;
        double v16 = (const void *)*MEMORY[0x263F2C928];
        double v17 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          double v17 = (const void **)MEMORY[0x263EFFB40];
        }
        double v18 = *v17;
        do
        {
          double v19 = (__CFDictionary *)CFArrayGetValueAtIndex(v14, v15);
          CFDictionarySetValue(v19, v16, v18);
          ++v15;
        }
        while (v15 < CFArrayGetCount(v14));
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2C950], (const void **)&theDict))
    {
      CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(theDict, *v7);
      if (CFArrayGetCount(v20) >= 1)
      {
        CFIndex v21 = 0;
        uint64_t v22 = (const void *)*MEMORY[0x263F2C928];
        double v23 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          double v23 = (const void **)MEMORY[0x263EFFB40];
        }
        double v24 = *v23;
        do
        {
          double v25 = (__CFDictionary *)CFArrayGetValueAtIndex(v20, v21);
          CFDictionarySetValue(v25, v22, v24);
          ++v21;
        }
        while (v21 < CFArrayGetCount(v20));
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2C930], (const void **)&theDict))
    {
      CFArrayRef v26 = (const __CFArray *)CFDictionaryGetValue(theDict, *v7);
      if (CFArrayGetCount(v26) >= 1)
      {
        CFIndex v27 = 0;
        double v28 = (const void *)*MEMORY[0x263F2C928];
        CFAllocatorRef v29 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          CFAllocatorRef v29 = (const void **)MEMORY[0x263EFFB40];
        }
        int64x2_t v30 = *v29;
        do
        {
          double v31 = (__CFDictionary *)CFArrayGetValueAtIndex(v26, v27);
          CFDictionarySetValue(v31, v28, v30);
          ++v27;
        }
        while (v27 < CFArrayGetCount(v26));
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2C938], (const void **)&theDict))
    {
      CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue(theDict, *v7);
      if (CFArrayGetCount(v32) >= 1)
      {
        CFIndex v33 = 0;
        long long v34 = (const void *)*MEMORY[0x263F2C928];
        uint64_t v35 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          uint64_t v35 = (const void **)MEMORY[0x263EFFB40];
        }
        uint64_t v36 = *v35;
        do
        {
          uint64_t v37 = (__CFDictionary *)CFArrayGetValueAtIndex(v32, v33);
          CFDictionarySetValue(v37, v34, v36);
          ++v33;
        }
        while (v33 < CFArrayGetCount(v32));
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2C940], (const void **)&theDict))
    {
      CFArrayRef v38 = (const __CFArray *)CFDictionaryGetValue(theDict, *v7);
      if (CFArrayGetCount(v38) >= 1)
      {
        CFIndex v39 = 0;
        CFNumberRef v40 = (const void *)*MEMORY[0x263F2C928];
        CFNumberRef v41 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          CFNumberRef v41 = (const void **)MEMORY[0x263EFFB40];
        }
        uint64_t v42 = *v41;
        do
        {
          CFAllocatorRef v43 = (__CFDictionary *)CFArrayGetValueAtIndex(v38, v39);
          CFDictionarySetValue(v43, v40, v42);
          ++v39;
        }
        while (v39 < CFArrayGetCount(v38));
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2C948], (const void **)&theDict))
    {
      CFArrayRef v44 = (const __CFArray *)CFDictionaryGetValue(theDict, *v7);
      if (CFArrayGetCount(v44) >= 1)
      {
        CFIndex v45 = 0;
        unint64_t v46 = (const void *)*MEMORY[0x263F2C928];
        uint64_t v47 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          uint64_t v47 = (const void **)MEMORY[0x263EFFB40];
        }
        uint64_t v48 = *v47;
        do
        {
          int v49 = (__CFDictionary *)CFArrayGetValueAtIndex(v44, v45);
          CFDictionarySetValue(v49, v46, v48);
          ++v45;
        }
        while (v45 < CFArrayGetCount(v44));
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2C960], (const void **)&theDict))
    {
      CFArrayRef v50 = (const __CFArray *)CFDictionaryGetValue(theDict, *v7);
      if (CFArrayGetCount(v50) >= 1)
      {
        CFIndex v51 = 0;
        uint64_t v52 = (const void *)*MEMORY[0x263F2C928];
        float v53 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          float v53 = (const void **)MEMORY[0x263EFFB40];
        }
        float v54 = *v53;
        do
        {
          float v55 = (__CFDictionary *)CFArrayGetValueAtIndex(v50, v51);
          CFDictionarySetValue(v55, v52, v54);
          ++v51;
        }
        while (v51 < CFArrayGetCount(v50));
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x263F2C968], (const void **)&theDict))
    {
      CFArrayRef v56 = (const __CFArray *)CFDictionaryGetValue(theDict, *v7);
      if (CFArrayGetCount(v56) >= 1)
      {
        CFIndex v57 = 0;
        long long v58 = (const void *)*MEMORY[0x263F2C928];
        float v59 = (const void **)MEMORY[0x263EFFB38];
        if (!a3) {
          float v59 = (const void **)MEMORY[0x263EFFB40];
        }
        int v60 = *v59;
        do
        {
          float v61 = (__CFDictionary *)CFArrayGetValueAtIndex(v56, v57);
          CFDictionarySetValue(v61, v58, v60);
          ++v57;
        }
        while (v57 < CFArrayGetCount(v56));
      }
    }
  }
  else
  {
    float32x4_t v62 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      float32x4_t v62 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v62;
    }
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclavePerceptionNode::updateObjectDicts(v62, v63, v64, v65, v66, v67, v68, v69);
    }
  }
  pthread_mutex_unlock(v5);
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclavePerceptionNode::onMessageProcessing(H16ISP::H16ISPGraphExclavePerceptionNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = H16ISP::H16ISPExclaveGraphNode::ConclaveClient(this);
  if (v4)
  {
    uint64_t v5 = 3758097130;
    if (a2)
    {
      uint64_t v6 = v4;
      if ((*((void *)a2 + 9) & (1 << H16ISP::H16ISPFilterGraphNode::GetType(this))) != 0)
      {
        if (H16ISP::H16ISPExclaveGraphNode::Verbose((H16ISP::H16ISPDevice **)this))
        {
          int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
          {
            int v7 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v7;
          }
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Sending ANST results to perception!\n", buf, 2u);
          }
        }
        pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
        pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
        *(_DWORD *)int buf = H16ISP::H16ISPExclaveGraphNode::Channel(this);
        LODWORD(v40) = 7;
        kdebug_trace();
        int v8 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchrunkitperception(v6, (uint64_t)buf);
        uint64_t v9 = kdebug_trace();
        if (!v8 && v38[0])
        {
          if (v37 == 2)
          {
            double v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
            {
              double v28 = os_log_create("com.apple.isp", "exclaves");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v28;
            }
            uint64_t v9 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
            if (v9) {
              H16ISP::H16ISPGraphExclavePerceptionNode::onMessageProcessing(v28, v29, v30, v31, v32, v33, v34, v35);
            }
          }
          else if (v37 == 1)
          {
            int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
            {
              int v10 = os_log_create("com.apple.isp", "exclaves");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v10;
            }
            uint64_t v9 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
            if (v9) {
              H16ISP::H16ISPGraphExclavePerceptionNode::onMessageProcessing(v10, v11, v12, v13, v14, v15, v16, v17);
            }
          }
          H16ISP::H16ISPGraphExclavePerceptionNode::updateObjectDicts(v9, (uint64_t)a2, v37);
          return 0;
        }
        CFIndex v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          CFIndex v27 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v27;
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPGraphExclavePerceptionNode::onMessageProcessing(v38, v8, v27);
        }
      }
      else
      {
        CFArrayRef v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          CFArrayRef v26 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v26;
        }
        uint64_t v5 = 0;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315138;
          CFNumberRef v40 = "onMessageProcessing";
          _os_log_impl(&dword_24680F000, v26, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]: Skipping perception transfer!\n", buf, 0xCu);
          return 0;
        }
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    double v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      double v18 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v18;
    }
    uint64_t v5 = 3758097136;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclavePerceptionNode::onMessageProcessing(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  return v5;
}

void H16ISP::H16ISPGraphExclavePerceptionNode::~H16ISPGraphExclavePerceptionNode(H16ISP::H16ISPGraphExclavePerceptionNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t PhotonDetectorArrivedCallback(void *a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result) {
    operator new();
  }
  return result;
}

void sub_2468F67D0(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1000C40FF89C88ELL);
  _Unwind_Resume(a1);
}

uint64_t AppleH16PhotonDetectorServicesAssistant::AppleH16PhotonDetectorServicesAssistant(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  *(void *)(a1 + 56) = CFRetain(Current);
  if (a2) {
    *(void *)(a2 + 592) = a1;
  }
  return a1;
}

void AppleH16PhotonDetectorServicesAssistant::~AppleH16PhotonDetectorServicesAssistant(AppleH16PhotonDetectorServicesAssistant *this)
{
  io_object_t v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    IOObjectRelease(v2);
    *((_DWORD *)this + 4) = 0;
  }
  xpc_object_t v3 = *(IONotificationPort **)this;
  if (*(void *)this)
  {
    uint64_t v4 = (__CFRunLoopSource *)*((void *)this + 1);
    if (v4)
    {
      CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 7), v4, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
      *((void *)this + 1) = 0;
      xpc_object_t v3 = *(IONotificationPort **)this;
    }
    IONotificationPortDestroy(v3);
    *(void *)this = 0;
  }
  uint64_t v5 = (AppleH16PhotonDetectorDevice *)*((void *)this + 3);
  if (v5)
  {
    AppleH16PhotonDetectorDevice::~AppleH16PhotonDetectorDevice(v5);
    MEMORY[0x24C53D6E0]();
    *((void *)this + 3) = 0;
  }
  *((void *)this + 4) = 0;
  uint64_t v6 = (const void *)*((void *)this + 5);
  if (v6) {
    CFRelease(v6);
  }
  int v7 = (const void *)*((void *)this + 7);
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t AppleH16PhotonDetectorServicesAssistant::SetupDevice(AppleH16PhotonDetectorServicesAssistant *this)
{
  CFDictionaryRef v2 = IOServiceMatching("AppleH16PhotonDetector");
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, 0);
  *((void *)this + 5) = Mutable;
  if (Mutable)
  {
    uint64_t v4 = IOMasterPort(*MEMORY[0x263EF87F0], (mach_port_t *)this + 12);
    if (!v4)
    {
      uint64_t v5 = IONotificationPortCreate(*((_DWORD *)this + 12));
      *(void *)this = v5;
      if (v5)
      {
        RunLoopSource = IONotificationPortGetRunLoopSource(v5);
        *((void *)this + 1) = RunLoopSource;
        if (RunLoopSource)
        {
          CFRunLoopAddSource(*((CFRunLoopRef *)this + 7), RunLoopSource, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
          uint64_t v4 = IOServiceAddMatchingNotification(*(IONotificationPortRef *)this, "IOServiceMatched", v2, (IOServiceMatchingCallback)PhotonDetectorArrivedCallback, this, (io_iterator_t *)this + 4);
          if (!v4) {
            PhotonDetectorArrivedCallback(this, *((_DWORD *)this + 4));
          }
        }
        else
        {
          uint64_t v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
          {
            uint64_t v24 = os_log_create("com.apple.isp", "photon");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v24;
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            AppleH16PhotonDetectorServicesAssistant::SetupDevice(v24, v25, v26, v27, v28, v29, v30, v31);
          }
          uint64_t v4 = 3758097086;
          IONotificationPortDestroy(*(IONotificationPortRef *)this);
          *(void *)this = 0;
        }
      }
      else
      {
        uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
        {
          uint64_t v16 = os_log_create("com.apple.isp", "photon");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v16;
        }
        uint64_t v4 = 3758097086;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          AppleH16PhotonDetectorServicesAssistant::SetupDevice(v16, v17, v18, v19, v20, v21, v22, v23);
        }
      }
    }
  }
  else
  {
    int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
    {
      int v7 = os_log_create("com.apple.isp", "photon");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v7;
    }
    uint64_t v4 = 3758097085;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      AppleH16PhotonDetectorServicesAssistant::SetupDevice(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  return v4;
}

uint64_t AppleH16PhotonDetectorServicesAssistant::OpenDevice(AppleH16PhotonDetectorServicesAssistant *this)
{
  if (CFArrayGetCount(*((CFArrayRef *)this + 5)) != 1) {
    return 3758097088;
  }
  CFDictionaryRef ValueAtIndex = (io_service_t *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 5), 0);
  *((void *)this + 3) = ValueAtIndex;
  if (!ValueAtIndex) {
    return 3758097088;
  }

  return AppleH16PhotonDetectorDevice::DeviceOpen(ValueAtIndex);
}

uint64_t AppleH16PhotonDetectorServicesAssistant::CloseDevice(AppleH16PhotonDetectorServicesAssistant *this)
{
  uint64_t v1 = (AppleH16PhotonDetectorDevice *)*((void *)this + 3);
  if (v1) {
    return AppleH16PhotonDetectorDevice::DeviceClose(v1);
  }
  else {
    return 3758097088;
  }
}

uint64_t AppleH16PhotonDetectorServicesAssistant::PowerOnDevice(AppleH16PhotonDetectorServicesAssistant *this)
{
  uint64_t v1 = (AppleH16PhotonDetectorDevice *)*((void *)this + 3);
  if (v1) {
    return AppleH16PhotonDetectorDevice::PowerOnDevice(v1);
  }
  else {
    return 3758097088;
  }
}

uint64_t AppleH16PhotonDetectorServicesAssistant::PowerOffDevice(AppleH16PhotonDetectorServicesAssistant *this)
{
  uint64_t v1 = (AppleH16PhotonDetectorDevice *)*((void *)this + 3);
  if (v1) {
    return AppleH16PhotonDetectorDevice::PowerOffDevice(v1);
  }
  else {
    return 3758097088;
  }
}

uint64_t AppleH16PhotonDetectorServicesAssistant::GetGainInfo(AppleH16PhotonDetectorServicesAssistant *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  xpc_object_t v3 = (AppleH16PhotonDetectorDevice *)*((void *)this + 3);
  if (v3) {
    return AppleH16PhotonDetectorDevice::GetGainInfo(v3, a2, a3);
  }
  else {
    return 3758097088;
  }
}

uint64_t AppleH16PhotonDetectorServicesAssistant::ReadReg(AppleH16PhotonDetectorServicesAssistant *this, char a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v4 = (AppleH16PhotonDetectorDevice *)*((void *)this + 3);
  if (v4) {
    return AppleH16PhotonDetectorDevice::ReadReg(v4, a2, a3, a4);
  }
  else {
    return 3758097088;
  }
}

uint64_t AppleH16PhotonDetectorServicesAssistant::WriteReg(AppleH16PhotonDetectorServicesAssistant *this, char a2, unsigned __int8 *a3, size_t a4)
{
  uint64_t v4 = (AppleH16PhotonDetectorDevice *)*((void *)this + 3);
  if (v4) {
    return AppleH16PhotonDetectorDevice::WriteReg(v4, a2, a3, a4);
  }
  else {
    return 3758097088;
  }
}

void AppleH16PhotonDetectorServicesAssistant::GetCalibrationData(AppleH16PhotonDetectorServicesAssistant *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  xpc_object_t v3 = (AppleH16PhotonDetectorDevice *)*((void *)this + 3);
  if (v3) {
    AppleH16PhotonDetectorDevice::ReadCalibrationData(v3, a2, a3);
  }
}

void AppleH16PhotonDetectorServicesThreadStart(uint64_t a1)
{
}

void sub_2468F6CC4(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1020C4069A38E4ALL);
  _Unwind_Resume(a1);
}

uint64_t AppleH16PhotonDetectorThreadSyncer::signalAndUnlock(AppleH16PhotonDetectorThreadSyncer *this)
{
  pthread_cond_signal((pthread_cond_t *)((char *)this + 64));

  return pthread_mutex_unlock((pthread_mutex_t *)this);
}

void AppleH16PhotonDetectorServicesStart(void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  AppleH16PhotonDetectorThreadSyncer::AppleH16PhotonDetectorThreadSyncer((AppleH16PhotonDetectorThreadSyncer *)&v8);
  pthread_t v5 = 0;
  v6[0] = 0;
  v6[1] = a2;
  unsigned int v6[2] = &v8;
  uint64_t v4 = 49;
  pthread_attr_init(&v7);
  pthread_attr_setschedparam(&v7, (const sched_param *)&v4);
  pthread_attr_setdetachstate(&v7, 1);
  pthread_create(&v5, &v7, (void *(__cdecl *)(void *))AppleH16PhotonDetectorServicesThreadStart, v6);
  pthread_attr_destroy(&v7);
  pthread_cond_wait(&v9, &v8);
  *a1 = v6[0];
  AppleH16PhotonDetectorThreadSyncer::~AppleH16PhotonDetectorThreadSyncer((AppleH16PhotonDetectorThreadSyncer *)&v8);
}

void sub_2468F6E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

uint64_t AppleH16PhotonDetectorThreadSyncer::wait(pthread_mutex_t *this)
{
  return pthread_cond_wait((pthread_cond_t *)&this[1], this);
}

void AppleH16PhotonDetectorThreadSyncer::AppleH16PhotonDetectorThreadSyncer(AppleH16PhotonDetectorThreadSyncer *this)
{
}

void AppleH16PhotonDetectorThreadSyncer::~AppleH16PhotonDetectorThreadSyncer(AppleH16PhotonDetectorThreadSyncer *this)
{
}

uint64_t H16ISP::H16ISPGraphNullNode::Deactivate(H16ISP::H16ISPGraphNullNode *this)
{
  *((unsigned char *)this + 16) = 0;
  return 0;
}

void H16ISP::H16ISPGraphNullNode::~H16ISPGraphNullNode(H16ISP::H16ISPGraphNullNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPFilterGraphNode::onMessageProcessing(H16ISP::H16ISPFilterGraphNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  return 0;
}

H16ISP::H16ISPFrameMetadata *H16ISP::H16ISPFrameMetadata::H16ISPFrameMetadata(H16ISP::H16ISPFrameMetadata *this, const void **a2)
{
  *((void *)this + 62) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((void *)this + 68) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((unsigned char *)this + 552) = 1;
  H16ISP::H16ISPFrameMetadata::DeepCopy(this, a2);
  return this;
}

{
  *((void *)this + 62) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((void *)this + 68) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((unsigned char *)this + 552) = 1;
  H16ISP::H16ISPFrameMetadata::DeepCopy(this, a2);
  return this;
}

__n128 H16ISP::H16ISPFrameMetadata::DeepCopy(H16ISP::H16ISPFrameMetadata *this, const void **a2)
{
  if (a2)
  {
    if (*a2)
    {
      uint64_t v4 = malloc_type_calloc(1uLL, 0x3E8uLL, 0x10000408242E905uLL);
      *(void *)this = v4;
      if (v4) {
        memcpy(v4, *a2, 0x3E8uLL);
      }
    }
    if (a2[1])
    {
      uint64_t v6 = malloc_type_calloc(1uLL, 0x12A4uLL, 0x1000040F0A0837BuLL);
      *((void *)this + 1) = v6;
      if (v6) {
        memcpy(v6, a2[1], 0x12A4uLL);
      }
    }
    if (a2[2])
    {
      pthread_attr_t v7 = malloc_type_calloc(1uLL, 0x16D8uLL, 0x1000040FEB1C9A5uLL);
      *((void *)this + 2) = v7;
      if (v7) {
        memcpy(v7, a2[2], 0x16D8uLL);
      }
    }
    if (a2[3])
    {
      pthread_mutex_t v8 = malloc_type_calloc(1uLL, 0xE90uLL, 0x10000408C5F273CuLL);
      *((void *)this + 3) = v8;
      if (v8) {
        memcpy(v8, a2[3], 0xE90uLL);
      }
    }
    if (a2[4])
    {
      pthread_cond_t v9 = malloc_type_calloc(1uLL, 0x458uLL, 0x100004023870162uLL);
      *((void *)this + 4) = v9;
      if (v9) {
        memcpy(v9, a2[4], 0x458uLL);
      }
    }
    if (a2[5])
    {
      uint64_t v10 = (__n128 *)malloc_type_calloc(1uLL, 0x18uLL, 0x1000040504FFAC1uLL);
      *((void *)this + 5) = v10;
      if (v10)
      {
        uint64_t v11 = (__n128 *)a2[5];
        __n128 result = *v11;
        v10[1].n128_u64[0] = v11[1].n128_u64[0];
        *uint64_t v10 = result;
      }
    }
    if (a2[6])
    {
      uint64_t v12 = malloc_type_calloc(1uLL, 0x6CuLL, 0x10000404DD648B0uLL);
      *((void *)this + 6) = v12;
      if (v12)
      {
        uint64_t v13 = a2[6];
        __n128 v14 = *(__n128 *)v13;
        long long v15 = v13[2];
        v12[1] = v13[1];
        _DWORD v12[2] = v15;
        *uint64_t v12 = v14;
        __n128 result = *((__n128 *)v13 + 3);
        long long v16 = v13[4];
        long long v17 = v13[5];
        *(_OWORD *)((char *)v12 + 92) = *(_OWORD *)((char *)v13 + 92);
        unsigned __int8 v12[4] = v16;
        v12[5] = v17;
        v12[3] = result;
      }
    }
    if (a2[7])
    {
      uint64_t v18 = malloc_type_calloc(1uLL, 0x25CuLL, 0x1000040A3139B51uLL);
      *((void *)this + 7) = v18;
      if (v18) {
        memcpy(v18, a2[7], 0x25CuLL);
      }
    }
    if (a2[8])
    {
      uint64_t v19 = malloc_type_calloc(1uLL, 0x308uLL, 0x100004025561657uLL);
      *((void *)this + 8) = v19;
      if (v19) {
        memcpy(v19, a2[8], 0x308uLL);
      }
    }
    if (a2[9])
    {
      uint64_t v20 = malloc_type_calloc(1uLL, 0xC0uLL, 0x10000407B2704E1uLL);
      *((void *)this + 9) = v20;
      if (v20)
      {
        uint64_t v21 = (__n128 *)a2[9];
        __n128 v22 = *v21;
        __n128 v23 = v21[1];
        __n128 v24 = v21[3];
        void v20[2] = v21[2];
        v20[3] = v24;
        _OWORD *v20 = v22;
        v20[1] = v23;
        __n128 v25 = v21[4];
        __n128 v26 = v21[5];
        __n128 v27 = v21[7];
        v20[6] = v21[6];
        v20[7] = v27;
        _OWORD v20[4] = v25;
        v20[5] = v26;
        __n128 result = v21[8];
        __n128 v28 = v21[9];
        __n128 v29 = v21[11];
        v20[10] = v21[10];
        v20[11] = v29;
        v20[8] = result;
        v20[9] = v28;
      }
    }
    if (a2[10])
    {
      uint64_t v30 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
      *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v30;
      if (v30) {
        _DWORD *v30 = *(_DWORD *)a2[10];
      }
    }
    if (a2[11])
    {
      uint64_t v31 = malloc_type_calloc(1uLL, 0x4D24uLL, 0x10C0040FB12ED5DuLL);
      *((void *)this + 11) = v31;
      if (v31) {
        memcpy(v31, a2[11], 0x4D24uLL);
      }
    }
    if (a2[12])
    {
      uint64_t v32 = malloc_type_calloc(1uLL, 0x10000uLL, 0x1000040FE83D5C4uLL);
      *((void *)this + 12) = v32;
      if (v32) {
        memcpy(v32, a2[12], 0x10000uLL);
      }
    }
    if (a2[13])
    {
      uint64_t v33 = malloc_type_calloc(1uLL, 0xE678uLL, 0x10000405CC578F7uLL);
      *((void *)this + 13) = v33;
      if (v33) {
        memcpy(v33, a2[13], 0xE678uLL);
      }
    }
    if (a2[14])
    {
      uint64_t v34 = malloc_type_calloc(1uLL, 0x10048uLL, 0x1000040F1D1A10DuLL);
      *((void *)this + 14) = v34;
      if (v34) {
        memcpy(v34, a2[14], 0x10048uLL);
      }
    }
    if (a2[15])
    {
      uint64_t v35 = malloc_type_calloc(1uLL, 0x181EuLL, 0x1000040CE2E0CD6uLL);
      *((void *)this + 15) = v35;
      if (v35) {
        memcpy(v35, a2[15], 0x181EuLL);
      }
    }
    if (a2[16])
    {
      uint64_t v36 = malloc_type_calloc(1uLL, 0x10004uLL, 0x10000404B17ED74uLL);
      *((void *)this + 16) = v36;
      if (v36) {
        memcpy(v36, a2[16], 0x10004uLL);
      }
    }
    if (a2[17])
    {
      int v37 = malloc_type_calloc(1uLL, 0x4004uLL, 0x10000400008604DuLL);
      *((void *)this + 17) = v37;
      if (v37) {
        memcpy(v37, a2[17], 0x4004uLL);
      }
    }
    if (a2[18])
    {
      CFArrayRef v38 = malloc_type_calloc(1uLL, 0x40uLL, 0x10000401C69B744uLL);
      *((void *)this + 18) = v38;
      if (v38)
      {
        CFIndex v39 = (__n128 *)a2[18];
        __n128 result = *v39;
        __n128 v40 = v39[1];
        __n128 v41 = v39[3];
        v38[2] = v39[2];
        v38[3] = v41;
        *CFArrayRef v38 = result;
        v38[1] = v40;
      }
    }
    if (a2[19])
    {
      uint64_t v42 = malloc_type_calloc(1uLL, 0xF928uLL, 0x10000409D3B693BuLL);
      *((void *)this + 19) = v42;
      if (v42) {
        memcpy(v42, a2[19], 0xF928uLL);
      }
    }
    if (a2[20])
    {
      CFAllocatorRef v43 = malloc_type_calloc(1uLL, 0x6C8uLL, 0x1000040FE9D2FA8uLL);
      *((void *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v43;
      if (v43) {
        memcpy(v43, a2[20], 0x6C8uLL);
      }
    }
    if (a2[21])
    {
      CFArrayRef v44 = malloc_type_calloc(1uLL, 0x2B00uLL, 0x100004074313ED0uLL);
      *((void *)this + 21) = v44;
      if (v44) {
        memcpy(v44, a2[21], 0x2B00uLL);
      }
    }
    if (a2[22])
    {
      CFIndex v45 = malloc_type_calloc(1uLL, 0x1030uLL, 0x1000040213E16FBuLL);
      *((void *)this + 22) = v45;
      if (v45) {
        memcpy(v45, a2[22], 0x1030uLL);
      }
    }
    if (a2[23])
    {
      unint64_t v46 = malloc_type_calloc(1uLL, 0x284uLL, 0x1000040FF9E6560uLL);
      *((void *)this + 23) = v46;
      if (v46) {
        memcpy(v46, a2[23], 0x284uLL);
      }
    }
    if (a2[24])
    {
      uint64_t v47 = malloc_type_calloc(1uLL, 0x42C8uLL, 0x10000405D850273uLL);
      *((void *)this + 24) = v47;
      if (v47) {
        memcpy(v47, a2[24], 0x42C8uLL);
      }
    }
    if (a2[25])
    {
      uint64_t v48 = malloc_type_calloc(1uLL, 0x12ED8uLL, 0x10000404B67D5EAuLL);
      *((void *)this + 25) = v48;
      if (v48) {
        memcpy(v48, a2[25], 0x12ED8uLL);
      }
    }
    if (a2[26])
    {
      int v49 = malloc_type_calloc(1uLL, 0xC00A8uLL, 0x1000040DAE9EA36uLL);
      *((void *)this + 26) = v49;
      if (v49) {
        memcpy(v49, a2[26], 0xC00A8uLL);
      }
    }
    if (a2[27])
    {
      CFArrayRef v50 = malloc_type_calloc(1uLL, 0x80F4uLL, 0x1000040230C61E3uLL);
      *((void *)this + 27) = v50;
      if (v50) {
        memcpy(v50, a2[27], 0x80F4uLL);
      }
    }
    if (a2[28])
    {
      CFIndex v51 = malloc_type_calloc(1uLL, 0x74uLL, 0x100004007D33FE3uLL);
      *((void *)this + 28) = v51;
      if (v51)
      {
        uint64_t v52 = (__n128 *)a2[28];
        __n128 v53 = *v52;
        __n128 v54 = v52[1];
        __n128 v55 = v52[3];
        v51[2] = v52[2];
        v51[3] = v55;
        *CFIndex v51 = v53;
        v51[1] = v54;
        __n128 result = v52[4];
        __n128 v56 = v52[5];
        __n128 v57 = v52[6];
        *((_DWORD *)v51 + 28) = v52[7].n128_u32[0];
        v51[5] = v56;
        v51[6] = v57;
        uint8_t v51[4] = result;
      }
    }
    if (a2[29])
    {
      long long v58 = malloc_type_calloc(1uLL, 0x1C8uLL, 0x1000040A54C56BFuLL);
      *((void *)this + 29) = v58;
      if (v58) {
        memcpy(v58, a2[29], 0x1C8uLL);
      }
    }
    if (a2[30])
    {
      float v59 = malloc_type_calloc(1uLL, 0x9CuLL, 0x100004059EBD510uLL);
      *((void *)this + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v59;
      if (v59)
      {
        int v60 = a2[30];
        long long v61 = v60[1];
        *float v59 = *v60;
        v59[1] = v61;
        long long v62 = v60[2];
        long long v63 = v60[3];
        long long v64 = v60[5];
        v59[4] = v60[4];
        v59[5] = v64;
        v59[2] = v62;
        v59[3] = v63;
        __n128 result = *((__n128 *)v60 + 6);
        long long v65 = v60[7];
        long long v66 = v60[8];
        *(_OWORD *)((char *)v59 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)((char *)v60 + 140);
        v59[7] = v65;
        v59[8] = v66;
        v59[6] = result;
      }
    }
    if (a2[31])
    {
      uint64_t v67 = malloc_type_calloc(1uLL, 0x400uLL, 0x1000040D7EB2065uLL);
      *((void *)this + 31) = v67;
      if (v67) {
        memcpy(v67, a2[31], 0x400uLL);
      }
    }
    if (a2[32])
    {
      uint64_t v68 = malloc_type_calloc(1uLL, 0x162C9CuLL, 0x1000040AB53A37EuLL);
      *((void *)this + 32) = v68;
      if (v68) {
        memcpy(v68, a2[32], 0x162C9CuLL);
      }
    }
    if (a2[33])
    {
      uint64_t v69 = malloc_type_calloc(1uLL, 0x2CuLL, 0x1000040D4159EFEuLL);
      *((void *)this + 33) = v69;
      if (v69)
      {
        long long v70 = a2[33];
        __n128 result = *(__n128 *)v70;
        long long v71 = v70[1];
        *(_OWORD *)((char *)v69 + 28) = *(_OWORD *)((char *)v70 + 28);
        _OWORD *v69 = result;
        v69[1] = v71;
      }
    }
    if (a2[34])
    {
      CFNumberRef v72 = malloc_type_calloc(1uLL, 0x8B0uLL, 0x1000040EDE33F2DuLL);
      *((void *)this + 34) = v72;
      if (v72) {
        memcpy(v72, a2[34], 0x8B0uLL);
      }
    }
    if (a2[35])
    {
      CFNumberRef v73 = malloc_type_calloc(1uLL, 0x2730uLL, 0x10000406FE76C01uLL);
      *((void *)this + 35) = v73;
      if (v73) {
        memcpy(v73, a2[35], 0x2730uLL);
      }
    }
    if (a2[36])
    {
      uint64_t v74 = malloc_type_calloc(1uLL, 0x1074uLL, 0x100004001BEE44AuLL);
      *((void *)this + 36) = v74;
      if (v74) {
        memcpy(v74, a2[36], 0x1074uLL);
      }
    }
    if (a2[37])
    {
      uint64_t v75 = malloc_type_calloc(1uLL, 0x40CuLL, 0x10000409551EE10uLL);
      *((void *)this + 37) = v75;
      if (v75) {
        memcpy(v75, a2[37], 0x40CuLL);
      }
    }
    if (a2[38])
    {
      CFArrayRef v76 = malloc_type_calloc(1uLL, 0x24238uLL, 0x1000040B069E486uLL);
      *((void *)this + 38) = v76;
      if (v76) {
        memcpy(v76, a2[38], 0x24238uLL);
      }
    }
    if (a2[39])
    {
      CFIndex v77 = malloc_type_calloc(1uLL, 0xA9C90uLL, 0x1000040762BA0BFuLL);
      *((void *)this + 39) = v77;
      if (v77) {
        memcpy(v77, a2[39], 0xA9C90uLL);
      }
    }
    if (a2[40])
    {
      char v78 = malloc_type_calloc(1uLL, 0x6FCuLL, 0x1000040AA86B62BuLL);
      *((void *)this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v78;
      if (v78) {
        memcpy(v78, a2[40], 0x6FCuLL);
      }
    }
    if (a2[41])
    {
      __int16 v79 = malloc_type_calloc(1uLL, 0x3C114uLL, 0x1000040EB5D8976uLL);
      *((void *)this + 41) = v79;
      if (v79) {
        memcpy(v79, a2[41], 0x3C114uLL);
      }
    }
    if (a2[42])
    {
      uint64_t v80 = malloc_type_calloc(1uLL, 0x2CF244uLL, 0x100004046AA1C73uLL);
      *((void *)this + 42) = v80;
      if (v80) {
        memcpy(v80, a2[42], 0x2CF244uLL);
      }
    }
    if (a2[43])
    {
      CFIndex v81 = malloc_type_calloc(1uLL, 0xF08uLL, 0x100004016538002uLL);
      *((void *)this + 43) = v81;
      if (v81) {
        memcpy(v81, a2[43], 0xF08uLL);
      }
    }
    if (a2[44])
    {
      uint64_t v82 = malloc_type_calloc(1uLL, 0x1E0uLL, 0x100004012FE04D1uLL);
      *((void *)this + 44) = v82;
      if (v82) {
        memcpy(v82, a2[44], 0x1E0uLL);
      }
    }
    if (a2[45])
    {
      CFNumberRef v83 = malloc_type_calloc(1uLL, 0x2CA64uLL, 0x100004045EA9F51uLL);
      *((void *)this + 45) = v83;
      if (v83) {
        memcpy(v83, a2[45], 0x2CA64uLL);
      }
    }
    if (a2[46])
    {
      int64_t v84 = malloc_type_calloc(1uLL, 0x20040uLL, 0x10000409C819C96uLL);
      *((void *)this + 46) = v84;
      if (v84) {
        memcpy(v84, a2[46], 0x20040uLL);
      }
    }
    if (a2[47])
    {
      CFDictionaryRef v85 = malloc_type_calloc(1uLL, 0x120uLL, 0x1000040A8CFB95EuLL);
      *((void *)this + 47) = v85;
      if (v85) {
        memcpy(v85, a2[47], 0x120uLL);
      }
    }
    if (a2[48])
    {
      uint64_t v86 = malloc_type_calloc(1uLL, 0x13CuLL, 0x10000406D32C9D5uLL);
      *((void *)this + 48) = v86;
      if (v86) {
        memcpy(v86, a2[48], 0x13CuLL);
      }
    }
    if (a2[49])
    {
      __int16 v87 = (__n128 *)malloc_type_calloc(1uLL, 0x18uLL, 0x1000040504FFAC1uLL);
      *((void *)this + 49) = v87;
      if (v87)
      {
        uint64_t v88 = (__n128 *)a2[49];
        __n128 result = *v88;
        v87[1].n128_u64[0] = v88[1].n128_u64[0];
        *__int16 v87 = result;
      }
    }
    if (a2[50])
    {
      __int16 v89 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
      *((void *)this + 5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v89;
      if (v89)
      {
        int v90 = (__n128 *)a2[50];
        __n128 result = *v90;
        __n128 v91 = v90[1];
        *__int16 v89 = *v90;
        v89[1] = v91;
      }
    }
    if (a2[51])
    {
      uint64_t v92 = malloc_type_calloc(1uLL, 0x74uLL, 0x10000404F1BB7F0uLL);
      *((void *)this + 51) = v92;
      if (v92)
      {
        __int16 v93 = (__n128 *)a2[51];
        __n128 v94 = *v93;
        __n128 v95 = v93[1];
        __n128 v96 = v93[3];
        v92[2] = v93[2];
        v92[3] = v96;
        *uint64_t v92 = v94;
        v92[1] = v95;
        __n128 result = v93[4];
        __n128 v97 = v93[5];
        __n128 v98 = v93[6];
        *((_DWORD *)v92 + 28) = v93[7].n128_u32[0];
        v92[5] = v97;
        v92[6] = v98;
        v92[4] = result;
      }
    }
    if (a2[52])
    {
      __int16 v99 = malloc_type_calloc(1uLL, 0x100uLL, 0x10000406B966DEFuLL);
      *((void *)this + 52) = v99;
      if (v99)
      {
        long long v100 = (__n128 *)a2[52];
        __n128 v101 = *v100;
        __n128 v102 = v100[1];
        __n128 v103 = v100[3];
        v99[2] = v100[2];
        v99[3] = v103;
        _OWORD *v99 = v101;
        v99[1] = v102;
        __n128 v104 = v100[4];
        __n128 v105 = v100[5];
        __n128 v106 = v100[7];
        v99[6] = v100[6];
        v99[7] = v106;
        v99[4] = v104;
        v99[5] = v105;
        __n128 v107 = v100[8];
        __n128 v108 = v100[9];
        __n128 v109 = v100[11];
        v99[10] = v100[10];
        v99[11] = v109;
        v99[8] = v107;
        v99[9] = v108;
        __n128 result = v100[12];
        __n128 v110 = v100[13];
        __n128 v111 = v100[15];
        v99[14] = v100[14];
        v99[15] = v111;
        v99[12] = result;
        v99[13] = v110;
      }
    }
    if (a2[53])
    {
      long long v112 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
      *((void *)this + 53) = v112;
      if (v112)
      {
        long long v113 = (__n128 *)a2[53];
        __n128 result = *v113;
        *long long v112 = *v113;
      }
    }
    if (a2[54])
    {
      long long v114 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
      *((void *)this + 54) = v114;
      if (v114)
      {
        int v115 = (__n128 *)a2[54];
        __n128 result = *v115;
        *long long v114 = *v115;
      }
    }
    if (a2[55])
    {
      long long v116 = malloc_type_calloc(1uLL, 0x40uLL, 0x10000400F2D7D10uLL);
      *((void *)this + 55) = v116;
      if (v116)
      {
        uint64_t v117 = (__n128 *)a2[55];
        __n128 result = *v117;
        __n128 v118 = v117[1];
        __n128 v119 = v117[3];
        v116[2] = v117[2];
        v116[3] = v119;
        *long long v116 = result;
        v116[1] = v118;
      }
    }
    if (a2[56])
    {
      uint64_t v120 = malloc_type_calloc(1uLL, 0xCCuLL, 0x100004005C82046uLL);
      *((void *)this + 56) = v120;
      if (v120)
      {
        long long v121 = a2[56];
        *uint64_t v120 = *v121;
        long long v122 = v121[1];
        long long v123 = v121[2];
        long long v124 = v121[4];
        v120[3] = v121[3];
        v120[4] = v124;
        v120[1] = v122;
        v120[2] = v123;
        long long v125 = v121[5];
        long long v126 = v121[6];
        long long v127 = v121[8];
        v120[7] = v121[7];
        v120[8] = v127;
        v120[5] = v125;
        v120[6] = v126;
        __n128 result = *((__n128 *)v121 + 9);
        long long v128 = v121[10];
        long long v129 = v121[11];
        *(_OWORD *)((char *)v120 + 188) = *(_OWORD *)((char *)v121 + 188);
        v120[10] = v128;
        v120[11] = v129;
        v120[9] = result;
      }
    }
    if (a2[57])
    {
      BOOL v130 = malloc_type_calloc(1uLL, 0x17ECuLL, 0x1000040A4EF050CuLL);
      *((void *)this + 57) = v130;
      if (v130) {
        memcpy(v130, a2[57], 0x17ECuLL);
      }
    }
    if (a2[58])
    {
      v131 = malloc_type_calloc(1uLL, 0x404uLL, 0x100004084B5CCE0uLL);
      *((void *)this + 58) = v131;
      if (v131) {
        memcpy(v131, a2[58], 0x404uLL);
      }
    }
    if (a2[59])
    {
      uint64_t v132 = malloc_type_calloc(1uLL, 0x108uLL, 0x1000040B4D0C7F7uLL);
      *((void *)this + 59) = v132;
      if (v132) {
        memcpy(v132, a2[59], 0x108uLL);
      }
    }
    if (a2[60])
    {
      uint64_t v133 = malloc_type_calloc(1uLL, 0x1ACuLL, 0x1000040CCACE116uLL);
      *((void *)this + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v133;
      if (v133) {
        memcpy(v133, a2[60], 0x1ACuLL);
      }
    }
    if (a2[61])
    {
      uint64_t v134 = malloc_type_calloc(1uLL, 0x8CuLL, 0x1000040592C6820uLL);
      *((void *)this + 61) = v134;
      if (v134)
      {
        uint64_t v135 = a2[61];
        *uint64_t v134 = *v135;
        long long v136 = v135[1];
        long long v137 = v135[2];
        long long v138 = v135[4];
        v134[3] = v135[3];
        v134[4] = v138;
        v134[1] = v136;
        v134[2] = v137;
        __n128 result = *((__n128 *)v135 + 5);
        long long v139 = v135[6];
        long long v140 = v135[7];
        *(_OWORD *)((char *)v134 + 124) = *(_OWORD *)((char *)v135 + 124);
        v134[6] = v139;
        v134[7] = v140;
        v134[5] = result;
      }
    }
    if (a2[62])
    {
      int v141 = malloc_type_calloc(1uLL, 0xC00uLL, 0x1000040BD1F2613uLL);
      *((void *)this + 62) = v141;
      if (v141) {
        memcpy(v141, a2[62], 0xC00uLL);
      }
    }
    if (a2[66])
    {
      BOOL v142 = (__n128 *)malloc_type_calloc(1uLL, 0x14uLL, 0x1000040A86A77D5uLL);
      *((void *)this + 66) = v142;
      if (v142)
      {
        uint64_t v143 = (__n128 *)a2[66];
        __n128 result = *v143;
        v142[1].n128_u32[0] = v143[1].n128_u32[0];
        *BOOL v142 = result;
      }
    }
  }
  return result;
}

void H16ISP::H16ISPFrameMetadata::DeepFree(H16ISP::H16ISPFrameMetadata *this)
{
  CFDictionaryRef v2 = *(void **)this;
  if (v2)
  {
    free(v2);
    *(void *)this = 0;
  }
  xpc_object_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    free(v3);
    *((void *)this + 1) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    free(v4);
    *((void *)this + 2) = 0;
  }
  pthread_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    free(v5);
    *((void *)this + 3) = 0;
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    free(v6);
    *((void *)this + 4) = 0;
  }
  pthread_attr_t v7 = (void *)*((void *)this + 5);
  if (v7)
  {
    free(v7);
    *((void *)this + 5) = 0;
  }
  pthread_mutex_t v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    free(v8);
    *((void *)this + 6) = 0;
  }
  pthread_cond_t v9 = (void *)*((void *)this + 7);
  if (v9)
  {
    free(v9);
    *((void *)this + 7) = 0;
  }
  uint64_t v10 = (void *)*((void *)this + 8);
  if (v10)
  {
    free(v10);
    *((void *)this + 8) = 0;
  }
  uint64_t v11 = (void *)*((void *)this + 9);
  if (v11)
  {
    free(v11);
    *((void *)this + 9) = 0;
  }
  uint64_t v12 = (void *)*((void *)this + 10);
  if (v12)
  {
    free(v12);
    *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  uint64_t v13 = (void *)*((void *)this + 11);
  if (v13)
  {
    free(v13);
    *((void *)this + 11) = 0;
  }
  __n128 v14 = (void *)*((void *)this + 12);
  if (v14)
  {
    free(v14);
    *((void *)this + 12) = 0;
  }
  long long v15 = (void *)*((void *)this + 13);
  if (v15)
  {
    free(v15);
    *((void *)this + 13) = 0;
  }
  long long v16 = (void *)*((void *)this + 14);
  if (v16)
  {
    free(v16);
    *((void *)this + 14) = 0;
  }
  long long v17 = (void *)*((void *)this + 15);
  if (v17)
  {
    free(v17);
    *((void *)this + 15) = 0;
  }
  uint64_t v18 = (void *)*((void *)this + 16);
  if (v18)
  {
    free(v18);
    *((void *)this + 16) = 0;
  }
  uint64_t v19 = (void *)*((void *)this + 17);
  if (v19)
  {
    free(v19);
    *((void *)this + 17) = 0;
  }
  uint64_t v20 = (void *)*((void *)this + 18);
  if (v20)
  {
    free(v20);
    *((void *)this + 18) = 0;
  }
  uint64_t v21 = (void *)*((void *)this + 19);
  if (v21)
  {
    free(v21);
    *((void *)this + 19) = 0;
  }
  __n128 v22 = (void *)*((void *)this + 20);
  if (v22)
  {
    free(v22);
    *((void *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  __n128 v23 = (void *)*((void *)this + 21);
  if (v23)
  {
    free(v23);
    *((void *)this + 21) = 0;
  }
  __n128 v24 = (void *)*((void *)this + 22);
  if (v24)
  {
    free(v24);
    *((void *)this + 22) = 0;
  }
  __n128 v25 = (void *)*((void *)this + 23);
  if (v25)
  {
    free(v25);
    *((void *)this + 23) = 0;
  }
  __n128 v26 = (void *)*((void *)this + 24);
  if (v26)
  {
    free(v26);
    *((void *)this + 24) = 0;
  }
  __n128 v27 = (void *)*((void *)this + 25);
  if (v27)
  {
    free(v27);
    *((void *)this + 25) = 0;
  }
  __n128 v28 = (void *)*((void *)this + 26);
  if (v28)
  {
    free(v28);
    *((void *)this + 26) = 0;
  }
  __n128 v29 = (void *)*((void *)this + 27);
  if (v29)
  {
    free(v29);
    *((void *)this + 27) = 0;
  }
  uint64_t v30 = (void *)*((void *)this + 28);
  if (v30)
  {
    free(v30);
    *((void *)this + 28) = 0;
  }
  uint64_t v31 = (void *)*((void *)this + 29);
  if (v31)
  {
    free(v31);
    *((void *)this + 29) = 0;
  }
  uint64_t v32 = (void *)*((void *)this + 30);
  if (v32)
  {
    free(v32);
    *((void *)this + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  uint64_t v33 = (void *)*((void *)this + 31);
  if (v33)
  {
    free(v33);
    *((void *)this + 31) = 0;
  }
  uint64_t v34 = (void *)*((void *)this + 32);
  if (v34)
  {
    free(v34);
    *((void *)this + 32) = 0;
  }
  uint64_t v35 = (void *)*((void *)this + 33);
  if (v35)
  {
    free(v35);
    *((void *)this + 33) = 0;
  }
  uint64_t v36 = (void *)*((void *)this + 34);
  if (v36)
  {
    free(v36);
    *((void *)this + 34) = 0;
  }
  int v37 = (void *)*((void *)this + 35);
  if (v37)
  {
    free(v37);
    *((void *)this + 35) = 0;
  }
  CFArrayRef v38 = (void *)*((void *)this + 36);
  if (v38)
  {
    free(v38);
    *((void *)this + 36) = 0;
  }
  CFIndex v39 = (void *)*((void *)this + 37);
  if (v39)
  {
    free(v39);
    *((void *)this + 37) = 0;
  }
  __n128 v40 = (void *)*((void *)this + 38);
  if (v40)
  {
    free(v40);
    *((void *)this + 38) = 0;
  }
  __n128 v41 = (void *)*((void *)this + 39);
  if (v41)
  {
    free(v41);
    *((void *)this + 39) = 0;
  }
  uint64_t v42 = (void *)*((void *)this + 40);
  if (v42)
  {
    free(v42);
    *((void *)this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  CFAllocatorRef v43 = (void *)*((void *)this + 41);
  if (v43)
  {
    free(v43);
    *((void *)this + 41) = 0;
  }
  CFArrayRef v44 = (void *)*((void *)this + 42);
  if (v44)
  {
    free(v44);
    *((void *)this + 42) = 0;
  }
  CFIndex v45 = (void *)*((void *)this + 43);
  if (v45)
  {
    free(v45);
    *((void *)this + 43) = 0;
  }
  unint64_t v46 = (void *)*((void *)this + 44);
  if (v46)
  {
    free(v46);
    *((void *)this + 44) = 0;
  }
  uint64_t v47 = (void *)*((void *)this + 45);
  if (v47)
  {
    free(v47);
    *((void *)this + 45) = 0;
  }
  uint64_t v48 = (void *)*((void *)this + 46);
  if (v48)
  {
    free(v48);
    *((void *)this + 46) = 0;
  }
  int v49 = (void *)*((void *)this + 47);
  if (v49)
  {
    free(v49);
    *((void *)this + 47) = 0;
  }
  CFArrayRef v50 = (void *)*((void *)this + 48);
  if (v50)
  {
    free(v50);
    *((void *)this + 48) = 0;
  }
  CFIndex v51 = (void *)*((void *)this + 49);
  if (v51)
  {
    free(v51);
    *((void *)this + 49) = 0;
  }
  uint64_t v52 = (void *)*((void *)this + 50);
  if (v52)
  {
    free(v52);
    *((void *)this + 5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  __n128 v53 = (void *)*((void *)this + 51);
  if (v53)
  {
    free(v53);
    *((void *)this + 51) = 0;
  }
  __n128 v54 = (void *)*((void *)this + 52);
  if (v54)
  {
    free(v54);
    *((void *)this + 52) = 0;
  }
  __n128 v55 = (void *)*((void *)this + 53);
  if (v55)
  {
    free(v55);
    *((void *)this + 53) = 0;
  }
  __n128 v56 = (void *)*((void *)this + 54);
  if (v56)
  {
    free(v56);
    *((void *)this + 54) = 0;
  }
  __n128 v57 = (void *)*((void *)this + 55);
  if (v57)
  {
    free(v57);
    *((void *)this + 55) = 0;
  }
  long long v58 = (void *)*((void *)this + 56);
  if (v58)
  {
    free(v58);
    *((void *)this + 56) = 0;
  }
  float v59 = (void *)*((void *)this + 57);
  if (v59)
  {
    free(v59);
    *((void *)this + 57) = 0;
  }
  int v60 = (void *)*((void *)this + 58);
  if (v60)
  {
    free(v60);
    *((void *)this + 58) = 0;
  }
  long long v61 = (void *)*((void *)this + 59);
  if (v61)
  {
    free(v61);
    *((void *)this + 59) = 0;
  }
  long long v62 = (void *)*((void *)this + 60);
  if (v62)
  {
    free(v62);
    *((void *)this + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  long long v63 = (void *)*((void *)this + 61);
  if (v63)
  {
    free(v63);
    *((void *)this + 61) = 0;
  }
  long long v64 = (void *)*((void *)this + 62);
  if (v64)
  {
    free(v64);
    *((void *)this + 62) = 0;
  }
}

void *H16ISP::H16ISPGraphExclaveMotionDetectionNode::H16ISPGraphExclaveMotionDetectionNode(uint64_t a1, H16ISP::H16ISPDevice *this, int a3, int a4)
{
  __n128 result = (void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode(a1, 27, this, a3, a4);
  *__n128 result = &unk_26FAEBE20;
  return result;
}

uint64_t H16ISP::H16ISPGraphExclaveMotionDetectionNode::onMessageProcessing(H16ISP::H16ISPGraphExclaveMotionDetectionNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  if (!a2) {
    return 3758097090;
  }
  if ((*((void *)a2 + 9) & (1 << H16ISP::H16ISPFilterGraphNode::GetType(this))) == 0) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(H16ISP::H16ISPGraphExclaveMotionDetectionNode *, H16ISP::H16ISPFilterGraphMessage *))(*(void *)this + 80);

  return v4(this, a2);
}

void *H16ISP::H16ISPGraphExclaveRGBMotionDetectionNode::H16ISPGraphExclaveRGBMotionDetectionNode(H16ISP::H16ISPGraphExclaveRGBMotionDetectionNode *this, H16ISP::H16ISPDevice *a2, int a3)
{
  __n128 result = (void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode((uint64_t)this, 27, a2, a3, 1);
  *__n128 result = &unk_26FAEBE88;
  return result;
}

{
  void *result;

  __n128 result = (void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode((uint64_t)this, 27, a2, a3, 1);
  *__n128 result = &unk_26FAEBE88;
  return result;
}

uint64_t H16ISP::H16ISPGraphExclaveRGBMotionDetectionNode::runMotionDetection(H16ISP::H16ISPGraphExclaveRGBMotionDetectionNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  int v5 = *((_DWORD *)a2 + 90);
  pthread_mutex_unlock(v4);
  uint64_t v6 = H16ISP::H16ISPExclaveGraphNode::ConclaveClient(this);
  if (v6)
  {
    uint64_t v7 = v6;
    if (H16ISP::H16ISPExclaveGraphNode::Verbose((H16ISP::H16ISPDevice **)this))
    {
      pthread_mutex_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        pthread_mutex_t v8 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = H16ISP::H16ISPExclaveGraphNode::Channel(this);
        __int16 v30 = 1024;
        int v31 = v5;
        _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_DEFAULT, "rgb runkit motion detection ch=%u reqid=0x%08x\n", buf, 0xEu);
      }
    }
    v25[0] = H16ISP::H16ISPExclaveGraphNode::Channel(this);
    v25[1] = 6;
    kdebug_trace();
    int v9 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchrunkitmdv2(v7, (uint64_t)v25);
    kdebug_trace();
    if (!v9 && v28 && v26)
    {
      BOOL v10 = v27;
      if (v27 >= 3)
      {
        uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          uint64_t v11 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v11;
        }
        BOOL v10 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
        if (v10)
        {
          H16ISP::H16ISPGraphExclaveRGBMotionDetectionNode::runMotionDetection(v11, v12, v13, v14, v15, v16, v17, v18);
          BOOL v10 = 0;
        }
      }
      *(void *)int buf = 0;
      uint64_t DictionaryRepresentation = MotionDetectionResultCreateDictionaryRepresentation(v10, (const __CFDictionary **)buf);
      if (!DictionaryRepresentation)
      {
        pthread_mutex_lock(v4);
        uint64_t v20 = (__CFDictionary *)*((void *)a2 + 46);
        uint64_t v21 = *(const void **)buf;
        CFDictionarySetValue(v20, (const void *)*MEMORY[0x263F2CD50], *(const void **)buf);
        pthread_mutex_unlock(v4);
        CFRelease(v21);
      }
    }
    else
    {
      __n128 v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        __n128 v23 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v23;
      }
      uint64_t DictionaryRepresentation = 3758097084;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v5;
        __int16 v30 = 1024;
        int v31 = v9;
        __int16 v32 = 1024;
        int v33 = v28;
        __int16 v34 = 1024;
        int v35 = v26;
        _os_log_error_impl(&dword_24680F000, v23, OS_LOG_TYPE_ERROR, "failed to run rgb motion detection reqid=0x%08x tberr=%u ipcret=%{BOOL}d hasvalidresult=%{BOOL}d\n", buf, 0x1Au);
      }
    }
  }
  else
  {
    __n128 v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      __n128 v22 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v22;
    }
    uint64_t DictionaryRepresentation = 3758097136;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveRGBMotionDetectionNode::runMotionDetection(v22);
    }
  }
  return DictionaryRepresentation;
}

void *H16ISP::H16ISPGraphExclaveIRMotionDetectionNode::H16ISPGraphExclaveIRMotionDetectionNode(H16ISP::H16ISPGraphExclaveIRMotionDetectionNode *this, H16ISP::H16ISPDevice *a2, int a3)
{
  __n128 result = (void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode((uint64_t)this, 27, a2, a3, 0);
  *__n128 result = &unk_26FAEBEF0;
  return result;
}

{
  void *result;

  __n128 result = (void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode((uint64_t)this, 27, a2, a3, 0);
  *__n128 result = &unk_26FAEBEF0;
  return result;
}

uint64_t H16ISP::H16ISPGraphExclaveIRMotionDetectionNode::runMotionDetection(H16ISP::H16ISPGraphExclaveIRMotionDetectionNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  int v5 = *((_DWORD *)a2 + 90);
  pthread_mutex_unlock(v4);
  uint64_t v6 = H16ISP::H16ISPExclaveGraphNode::ConclaveClient(this);
  if (v6)
  {
    uint64_t v7 = v6;
    if (H16ISP::H16ISPExclaveGraphNode::Verbose((H16ISP::H16ISPDevice **)this))
    {
      pthread_mutex_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        pthread_mutex_t v8 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = H16ISP::H16ISPExclaveGraphNode::Channel(this);
        __int16 v30 = 1024;
        int v31 = v5;
        _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_DEFAULT, "ir runkit motion detection ch=%u reqid=0x%08x\n", buf, 0xEu);
      }
    }
    v25[0] = H16ISP::H16ISPExclaveGraphNode::Channel(this);
    v25[1] = 7;
    kdebug_trace();
    int v9 = ispirexclavekitmodule_ispirexclavekit_sendcmdchrunkitmdv2(v7, (uint64_t)v25);
    kdebug_trace();
    if (!v9 && v28 && v26)
    {
      BOOL v10 = v27;
      if (v27 >= 3)
      {
        uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          uint64_t v11 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v11;
        }
        BOOL v10 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
        if (v10)
        {
          H16ISP::H16ISPGraphExclaveIRMotionDetectionNode::runMotionDetection(v11, v12, v13, v14, v15, v16, v17, v18);
          BOOL v10 = 0;
        }
      }
      *(void *)int buf = 0;
      uint64_t DictionaryRepresentation = MotionDetectionResultCreateDictionaryRepresentation(v10, (const __CFDictionary **)buf);
      if (!DictionaryRepresentation)
      {
        pthread_mutex_lock(v4);
        uint64_t v20 = (__CFDictionary *)*((void *)a2 + 46);
        uint64_t v21 = *(const void **)buf;
        CFDictionarySetValue(v20, (const void *)*MEMORY[0x263F2CD50], *(const void **)buf);
        pthread_mutex_unlock(v4);
        CFRelease(v21);
      }
    }
    else
    {
      __n128 v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        __n128 v23 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v23;
      }
      uint64_t DictionaryRepresentation = 3758097084;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v5;
        __int16 v30 = 1024;
        int v31 = v9;
        __int16 v32 = 1024;
        int v33 = v28;
        __int16 v34 = 1024;
        int v35 = v26;
        _os_log_error_impl(&dword_24680F000, v23, OS_LOG_TYPE_ERROR, "failed to run ir motion detection reqid=0x%08x tberr=%u ipcret=%{BOOL}d hasvalidresult=%{BOOL}d\n", buf, 0x1Au);
      }
    }
  }
  else
  {
    __n128 v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      __n128 v22 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v22;
    }
    uint64_t DictionaryRepresentation = 3758097136;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveIRMotionDetectionNode::runMotionDetection(v22);
    }
  }
  return DictionaryRepresentation;
}

void H16ISP::H16ISPGraphExclaveRGBMotionDetectionNode::~H16ISPGraphExclaveRGBMotionDetectionNode(H16ISP::H16ISPGraphExclaveRGBMotionDetectionNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

void H16ISP::H16ISPGraphExclaveIRMotionDetectionNode::~H16ISPGraphExclaveIRMotionDetectionNode(H16ISP::H16ISPGraphExclaveIRMotionDetectionNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t MotionDetectionResultCreateDictionaryRepresentation(int a1, const __CFDictionary **a2)
{
  int valuePtr = a1;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    int v5 = Mutable;
    CFNumberRef v6 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionarySetValue(v5, (const void *)*MEMORY[0x263F2C900], v6);
      CFRelease(v7);
    }
    uint64_t v8 = 0;
    *a2 = v5;
  }
  else
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v9;
    }
    uint64_t v8 = 3758097085;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      MotionDetectionResultCreateDictionaryRepresentation(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  return v8;
}

uint64_t GMC_AmbiguityTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5, double *a6, double a7)
{
  int v9 = *(_DWORD *)(a1 + 20);
  if (v9)
  {
    Matrix<double>::Matrix((uint64_t)v20, 1, v9);
    v20[0] = &unk_26FAEAF48;
    calcEpipolarDistances(a2, a1, a3, (uint64_t)v20);
    double v15 = MatrixNxPts<1u,double>::SortInplace<1u,void>((uint64_t)v20);
    LODWORD(v15) = v21;
    double v16 = round(a7 * (double)*(unint64_t *)&v15 + -1.0);
    if (v16 >= 0.0)
    {
      uint64_t v17 = 0;
      double v18 = *(double *)(v20[1] + 8 * v16);
      *a6 = v18;
      *a5 = v18 < *(double *)(a4 + 632);
    }
    else
    {
      uint64_t v17 = 4294967291;
    }
    Matrix<double>::~Matrix((uint64_t)v20);
  }
  else
  {
    uint64_t v17 = 0;
    *a5 = 1;
  }
  return v17;
}

void sub_2468F8F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t calcEpipolarDistances(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  uint64_t v8 = v28;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = v8;
    do
    {
      *uint64_t v10 = *(void *)(a3 + v9);
      v10 += 3;
      v9 += 8;
    }
    while (v9 != 24);
    ++v7;
    uint64_t v8 = (_OWORD *)((char *)v8 + 8);
    a3 += 24;
  }
  while (v7 != 3);
  if (*(_DWORD *)(a1 + 20))
  {
    unint64_t v11 = 0;
    do
    {
      MatrixNxPts<3u,double>::CloneColumn(a1, v11, v27);
      uint64_t v12 = 0;
      long long v25 = 0uLL;
      uint64_t v13 = v28;
      uint64_t v26 = 0;
      do
      {
        uint64_t v14 = 0;
        double v15 = 0.0;
        do
        {
          double v15 = v15 + *(double *)((char *)v13 + v14 * 8) * *(double *)&v27[v14];
          ++v14;
        }
        while (v14 != 3);
        *((double *)&v25 + v12++) = v15;
        uint64_t v13 = (_OWORD *)((char *)v13 + 24);
      }
      while (v12 != 3);
      MatrixNxPts<3u,double>::CloneColumn(a2, v11, &v23);
      uint64_t v16 = 0;
      long long v21 = v25;
      uint64_t v22 = v26;
      long long v19 = v23;
      uint64_t v20 = v24;
      double v17 = 0.0;
      do
      {
        double v17 = v17 + *(double *)((char *)&v21 + v16) * *(double *)((char *)&v19 + v16);
        v16 += 8;
      }
      while (v16 != 24);
      *(double *)(*(void *)(a4 + 8) + 8 * v11++) = fabs(v17)
                                                   / sqrt(*((double *)&v25 + 1) * *((double *)&v25 + 1)+ *(double *)&v25 * *(double *)&v25);
    }
    while (v11 < *(unsigned int *)(a1 + 20));
  }
  return 0;
}

double MatrixNxPts<1u,double>::SortInplace<1u,void>(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 20);
  if ((int)v1 >= 2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 1;
    do
    {
      uint64_t v4 = v2 + 1;
      uint64_t v5 = *(void *)(a1 + 8);
      if (v2 + 1 >= v1)
      {
        unsigned int v7 = v2;
      }
      else
      {
        uint64_t v6 = v3;
        unsigned int v7 = v2;
        do
        {
          if (*(double *)(v5 + 8 * v6) < *(double *)(v5 + 8 * v7)) {
            unsigned int v7 = v6;
          }
          ++v6;
        }
        while (v1 != v6);
      }
      double result = *(double *)(v5 + 8 * v7);
      *(void *)(v5 + 8 * v7) = *(void *)(v5 + 8 * v2);
      *(double *)(*(void *)(a1 + 8) + 8 * v2) = result;
      ++v3;
      ++v2;
    }
    while (v4 != v1 - 1);
  }
  return result;
}

double MatrixNxPts<3u,double>::CloneColumn@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!*(_DWORD *)(a1 + 16) || (uint64_t v3 = *(int *)(a1 + 20), v3 <= a2)) {
    MatrixNxPts<3u,double>::CloneColumn();
  }
  uint64_t v4 = 0;
  uint64_t v5 = (double *)(*(void *)(a1 + 8) + 8 * a2);
  uint64_t v6 = 8 * v3;
  do
  {
    double result = *v5;
    a3[v4++] = *(void *)v5;
    uint64_t v5 = (double *)((char *)v5 + v6);
  }
  while ((v4 * 8) != 24);
  return result;
}

void *H16ISP::H16ISPGraphNodeMCTF::ForwardMessage(void *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = this[4];
  uint64_t v5 = this[5];
  uint64_t v6 = (void *)(v4 + 8 * (this[7] >> 9));
  if (v5 == v4) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = (uint64_t *)(*v6 + 8 * (this[7] & 0x1FFLL));
  }
  while (1)
  {
    if (v5 == v4)
    {
      uint64_t v11 = 0;
    }
    else
    {
      unint64_t v10 = v3[8] + v3[7];
      uint64_t v11 = *(void *)(v4 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF);
    }
    if (v7 == (uint64_t *)v11) {
      break;
    }
    uint64_t v8 = *v7++;
    this = (void *)(*(uint64_t (**)(uint64_t, H16ISP::H16ISPFilterGraphMessage *))(*(void *)v8 + 32))(v8, a2);
    if ((uint64_t *)((char *)v7 - *v6) == (uint64_t *)4096)
    {
      uint64_t v9 = (uint64_t *)v6[1];
      ++v6;
      unsigned int v7 = v9;
    }
    uint64_t v4 = v3[4];
    uint64_t v5 = v3[5];
  }
  return this;
}

void H16ISP::H16ISPGraphNodeMCTF::H16ISPGraphNodeMCTF(H16ISP::H16ISPGraphNodeMCTF *this, int a2, int a3, int a4)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 14);
  *(void *)uint64_t v7 = &unk_26FAEBFA0;
  *(_DWORD *)(v7 + 84) = a2;
  *(_DWORD *)(v7 + 88) = a3;
  *(_DWORD *)(v7 + 92) = a4;
  operator new();
}

void sub_2468F9344(_Unwind_Exception *a1)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(v1);
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPGraphNodeMCTF::~H16ISPGraphNodeMCTF(CFTypeRef *this)
{
  *this = &unk_26FAEBFA0;
  if (this[12]) {
    H16ISP::H16ISPGraphNodeMCTF::onDeactivate(this);
  }
  uint64_t v2 = (char *)this[13];
  *(void *)uint64_t v2 = 0;
  std::mutex::lock((std::mutex *)(v2 + 104));
  while (1)
  {
    uint64_t v3 = this[13];
    if (!v3[6]) {
      break;
    }
    H16ISP::H16ISPFilterGraphMessage::Release(*(H16ISP::H16ISPFilterGraphMessage **)(*(void *)(v3[2]
                                                                                               + ((v3[5] >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                                   + 8 * (v3[5] & 0x1FFLL)));
    uint64_t v4 = (char *)this[13];
    *(int64x2_t *)(v4 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = vaddq_s64(*(int64x2_t *)(v4 + 40), (int64x2_t)xmmword_2469DAFB0);
    std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(v4 + 8), 1);
  }
  while (1)
  {
    uint64_t v5 = (char *)this[13];
    uint64_t v6 = *((void *)v5 + 12);
    if (!v6) {
      break;
    }
    ++*((void *)v5 + 11);
    *((void *)v5 + 12) = v6 - 1;
    std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(v5 + 56), 1);
  }
  std::mutex::unlock((std::mutex *)(v5 + 104));
  uint64_t v7 = (char *)this[13];
  if (v7)
  {
    std::mutex::~mutex((std::mutex *)(v7 + 104));
    std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)v7 + 7);
    std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)v7 + 1);
    MEMORY[0x24C53D6E0](v7, 0x10A0C4052DFA383);
  }

  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode((H16ISP::H16ISPFilterGraphNode *)this);
}

{
  uint64_t vars8;

  H16ISP::H16ISPGraphNodeMCTF::~H16ISPGraphNodeMCTF(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPGraphNodeMCTF::onDeactivate(CFTypeRef *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  VTTemporalFilterSessionCompleteFrames();
  VTTemporalFilterSessionInvalidate();
  CFRelease(this[12]);
  this[12] = 0;
  uint64_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v2 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v2;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "onDeactivate";
    _os_log_impl(&dword_24680F000, v2, OS_LOG_TYPE_INFO, "%s - Deactivated MCTF node!\n", (uint8_t *)&v4, 0xCu);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphNodeMCTF::onActivate(H16ISP::H16ISPGraphNodeMCTF *this)
{
  uint64_t v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  uint64_t v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F04180], v5);
  CFRelease(v5);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 84);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F04240], v6);
  CFRelease(v6);
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 88);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F04118], v7);
  CFRelease(v7);
  CFDictionaryRef v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0, 0, v2, v3);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F04130], v8);
  CFRelease(v8);
  uint64_t v9 = (void *)((char *)this + 96);
  int v10 = VTTemporalFilterSessionCreate();
  CFRelease(Mutable);
  if (!v10 && *v9) {
    return 0;
  }
  uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v11 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;
  }
  uint64_t v12 = 3758097098;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPGraphNodeMCTF::onActivate(v10, v11);
  }
  return v12;
}

void H16ISP::VTOutputFrameCallback(H16ISP *this, void *a2, int a3, CMTime *a4, CMTime *a5, __CVBuffer *a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (this)
  {
    uint64_t v9 = (std::mutex *)((char *)this + 104);
    std::mutex::lock((std::mutex *)((char *)this + 104));
    unint64_t v10 = *((void *)this + 5);
    uint64_t v11 = *(void *)(*(void *)(*((void *)this + 2) + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF));
    if (*(unsigned char *)(*(void *)this + 80))
    {
      v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      uint64_t v20 = *(void *)(*(void *)(*((void *)this + 8) + ((*((void *)this + 11) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*((void *)this + 11) & 0x1FFLL));
      long long v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        long long v21 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v21;
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        LODWORD(v25.value) = 136315394;
        *(CMTimeValue *)((char *)&v25.value + 4) = (CMTimeValue)"VTOutputFrameCallback";
        LOWORD(v25.flags) = 2048;
        *(void *)((char *)&v25.flags + 2) = (v19.__d_.__rep_ - v20) / 1000000;
        _os_log_impl(&dword_24680F000, v21, OS_LOG_TYPE_INFO, "%s - MCTF frame delay: %lldms\n", (uint8_t *)&v25, 0x16u);
      }
      *(int64x2_t *)((char *)this + 88) = vaddq_s64(*(int64x2_t *)((char *)this + 88), (int64x2_t)xmmword_2469DAFB0);
      std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 56, 1);
      unint64_t v10 = *((void *)this + 5);
    }
    uint64_t v12 = *((void *)this + 6) - 1;
    *((void *)this + 5) = v10 + 1;
    *((void *)this + 6) = v12;
    std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 8, 1);
    std::mutex::unlock(v9);
    pthread_mutex_lock((pthread_mutex_t *)(v11 + 8));
    uint64_t v13 = *(unsigned int *)(v11 + 100);
    memset(&v25, 0, sizeof(v25));
    CMTimeMake(&v25, H16ISP::VTOutputFrameCallback(void *,int,unsigned int,CMTime,__CVBuffer *)::frameNumber, 1);
    CMTime time1 = v25;
    CMTime time2 = *a4;
    if (CMTimeCompare(&time1, &time2))
    {
      uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v14 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        H16ISP::VTOutputFrameCallback(&v22, (uint64_t)a4, v14);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v11 + 8));
    }
    else
    {
      ++H16ISP::VTOutputFrameCallback(void *,int,unsigned int,CMTime,__CVBuffer *)::frameNumber;
      if (v13)
      {
        uint64_t v16 = v11 + 104;
        while (1)
        {
          int v17 = *(_DWORD *)(v16 + 8);
          if (v17 == 10 || v17 == 0) {
            break;
          }
          v16 += 16;
          if (!--v13) {
            goto LABEL_22;
          }
        }
        CVPixelBufferRetain((CVPixelBufferRef)a5);
        CVPixelBufferRelease(*(CVPixelBufferRef *)v16);
        *(void *)uint64_t v16 = a5;
      }
LABEL_22:
      pthread_mutex_unlock((pthread_mutex_t *)(v11 + 8));
      H16ISP::H16ISPGraphNodeMCTF::ForwardMessage(*(void **)this, (H16ISP::H16ISPFilterGraphMessage *)v11);
    }
    H16ISP::H16ISPFilterGraphMessage::Release((H16ISP::H16ISPFilterGraphMessage *)v11);
  }
  else
  {
    double v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      double v15 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      H16ISP::VTOutputFrameCallback(v15);
    }
  }
}

uint64_t H16ISP::H16ISPGraphNodeMCTF::onMessageProcessing(H16ISP::H16ISPGraphNodeMCTF *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  std::chrono::steady_clock::time_point v19 = a2;
  memset(&v18, 0, sizeof(v18));
  CMTimeMake(&v18, H16ISP::H16ISPGraphNodeMCTF::onMessageProcessing(H16ISP::H16ISPFilterGraphMessage *)::frameNumber, 1);
  ++H16ISP::H16ISPGraphNodeMCTF::onMessageProcessing(H16ISP::H16ISPFilterGraphMessage *)::frameNumber;
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  uint64_t v4 = *((unsigned int *)a2 + 25);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 16 * v4;
    do
    {
      int v8 = *(_DWORD *)((char *)a2 + v5 + 112);
      if (v8 == 10 || v8 == 0) {
        uint64_t v6 = *(void *)((char *)a2 + v5 + 104);
      }
      v5 += 16;
    }
    while (v7 != v5);
    uint64_t v10 = 3758097084;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
    if (v6)
    {
      std::mutex::lock((std::mutex *)(*((void *)this + 13) + 104));
      pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
      ++*(_DWORD *)a2;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
      std::deque<H16ISP::H16ISPFilterGraphMessage *>::push_back((void *)(*((void *)this + 13) + 8), &v19);
      if (*((unsigned char *)this + 80))
      {
        uint64_t v16 = (void *)(*((void *)this + 13) + 56);
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
        std::deque<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::push_back(v16, &rep);
      }
      std::mutex::unlock((std::mutex *)(*((void *)this + 13) + 104));
      int v11 = VTTemporalFilterSessionProcessFrame();
      if (v11)
      {
        int v12 = v11;
        uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v13 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v13;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPGraphNodeMCTF::onMessageProcessing(v12, v13);
        }
      }
      else
      {
        return 3758097130;
      }
    }
    else
    {
      uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v14 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphNodeMCTF::onMessageProcessing(v14);
      }
    }
  }
  else
  {
    uint64_t v10 = 3758097084;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
  }
  return v10;
}

void std::deque<H16ISP::H16ISPFilterGraphMessage *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<H16ISP::H16ISPFilterGraphMessage *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<H16ISP::H16ISPFilterGraphMessage *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      CFArrayRef v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    std::chrono::steady_clock::time_point v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<__CVBuffer **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, &v54);
    CFArrayRef v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CFIndex v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CFIndex v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      CFAllocatorRef v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __n128 v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __n128 v53 = operator new(0x1000uLL);
  std::__split_buffer<__CVBuffer **>::push_back(&v54, &v53);
  unsigned int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2468FA08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      CFArrayRef v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    std::chrono::steady_clock::time_point v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<__CVBuffer **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, &v54);
    CFArrayRef v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CFIndex v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CFIndex v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      CFAllocatorRef v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __n128 v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __n128 v53 = operator new(0x1000uLL);
  std::__split_buffer<__CVBuffer **>::push_back(&v54, &v53);
  unsigned int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2468FA42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t GMC_Normalise2DPts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 20);
  if (v4) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    GMC_Homography();
  }
  if (v4 <= 1) {
    GMC_Homography();
  }
  if (v4 == 2) {
    GMC_Homography();
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 + 8 * v3;
  uint64_t v10 = v8 + 8 * (2 * v3);
  double v11 = 0.0;
  double v12 = 0.0;
  do
  {
    *(double *)(v8 + 8 * v7) = *(double *)(v8 + 8 * v7) / *(double *)(v10 + 8 * v7);
    *(double *)(v9 + 8 * v7) = *(double *)(v9 + 8 * v7) / *(double *)(v10 + 8 * v7);
    *(void *)(v10 + 8 * v7) = 0x3FF0000000000000;
    double v11 = v11 + *(double *)(v8 + 8 * v7);
    double v12 = v12 + *(double *)(v9 + 8 * v7++);
  }
  while (v3 != v7);
  unsigned int v13 = *(_DWORD *)(a2 + 16);
  if (!v13 || (uint64_t v14 = *(unsigned int *)(a2 + 20), !v14)) {
    GMC_Homography();
  }
  if (v13 <= 1) {
    GMC_Homography();
  }
  if (v13 == 2) {
    GMC_Homography();
  }
  double v15 = v11 / (double)v3;
  uint64_t v16 = *(double **)(a2 + 8);
  uint64_t v17 = *(double **)(a1 + 8);
  double v18 = 0.0;
  int v19 = v3;
  double v20 = v12 / (double)v3;
  do
  {
    double v21 = *v17 - v15;
    *uint64_t v16 = v21;
    double v22 = v17[v3] - v20;
    v16[v14] = v22;
    double v23 = sqrt(v22 * v22 + v21 * v21);
    v16[(2 * v14)] = v23;
    double v18 = v18 + v23;
    ++v16;
    ++v17;
    --v19;
  }
  while (v19);
  double v24 = 1.41421356 / (v18 / (double)v3);
  *(double *)a3 = v24;
  *(void *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = -(v24 * v15);
  *(void *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = v24;
  *(double *)(a3 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -(v24 * v20);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0x3FF0000000000000;
  MatrixMxN<3u,3u,double>::operator*<3u>((const double *)a3, a1, (uint64_t)&v26);
  Matrix<double>::Resize(a2, v28, v29);
  memcpy(*(void **)(a2 + 8), __src, 8 * *(unsigned int *)(a2 + 16) * (unint64_t)*(unsigned int *)(a2 + 20));
  Matrix<double>::~Matrix((uint64_t)&v26);
  return 0;
}

void sub_2468FA62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t H16ISP::H16ISPGraphExitNode::onDeactivate(H16ISP::H16ISPGraphExitNode *this)
{
  unint64_t v1 = *((unsigned int *)this + 20);
  if (v1)
  {
    unint64_t v3 = 0;
    unsigned int v4 = (dispatch_queue_t *)((char *)this + 104);
    do
    {
      if (*v4)
      {
        dispatch_sync(*v4, &__block_literal_global_3);
        dispatch_release(*v4);
        dispatch_queue_t *v4 = 0;
        unint64_t v1 = *((unsigned int *)this + 20);
      }
      ++v3;
      v4 += 3;
    }
    while (v3 < v1);
  }
  return 0;
}

void H16ISP::H16ISPGraphExitNode::~H16ISPGraphExitNode(H16ISP::H16ISPGraphExitNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::FlickerFrequencyHintForCurrentLocation(H16ISP *this)
{
  if (objc_opt_class())
  {
    unint64_t v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x263F41770], "sharedConfiguration"), "countryCode");
    if (v1)
    {
      unint64_t v2 = v1;
      unint64_t v3 = (const char *)[v1 UTF8String];
      if (v3)
      {
        int v4 = 0;
        int v5 = *(unsigned __int8 *)v3;
        switch(*v3)
        {
          case 'A':
            unsigned int v6 = *((unsigned __int8 *)v3 + 1) - 71;
            BOOL v7 = v6 > 0x10;
            int v8 = 1 << v6;
            int v9 = 69633;
            goto LABEL_29;
          case 'B':
            unsigned int v11 = *((unsigned __int8 *)v3 + 1) - 72;
            BOOL v7 = v11 > 0x12;
            int v8 = 1 << v11;
            int v9 = 265249;
            goto LABEL_29;
          case 'C':
            unsigned int v12 = *((unsigned __int8 *)v3 + 1) - 65;
            BOOL v7 = v12 > 0x14;
            int v8 = 1 << v12;
            unsigned __int16 v13 = 16385;
            goto LABEL_9;
          case 'D':
            if (v3[1] == 79) {
              break;
            }
            goto LABEL_62;
          case 'E':
            if (v3[1] == 67) {
              break;
            }
            goto LABEL_62;
          case 'G':
            LODWORD(v14) = *((unsigned __int8 *)v3 + 1) - 84;
            if (v14 >= 6) {
              goto LABEL_62;
            }
            uint64_t v14 = (char)v14;
            double v15 = "<";
            goto LABEL_16;
          case 'H':
            int v16 = *((unsigned __int8 *)v3 + 1);
            BOOL v17 = v16 == 78;
            int v18 = 84;
            goto LABEL_38;
          case 'J':
            if (v3[1] == 80) {
              break;
            }
            goto LABEL_62;
          case 'K':
            int v4 = 1;
            unsigned int v19 = *((unsigned __int8 *)v3 + 1) - 80;
            BOOL v7 = v19 > 9;
            int v20 = (1 << v19) & 0x205;
            if (!v7 && v20 != 0) {
              break;
            }
            goto LABEL_25;
          case 'P':
            unsigned int v22 = *((unsigned __int8 *)v3 + 1) - 65;
            BOOL v7 = v22 > 0x16;
            int v8 = 1 << v22;
            int v9 = 4329649;
            goto LABEL_29;
          case 'S':
            int v16 = *((unsigned __int8 *)v3 + 1);
            if (v16 == 86) {
              break;
            }
            BOOL v17 = v16 == 82;
            int v18 = 65;
LABEL_38:
            if (v17 || v16 == v18) {
              uint64_t v10 = 60;
            }
            else {
              uint64_t v10 = 50;
            }
            goto LABEL_34;
          case 'U':
            if (v3[1] == 83) {
              break;
            }
            goto LABEL_62;
          default:
LABEL_25:
            switch(*v3)
            {
              case 'F':
                if (v3[1] == 77) {
                  goto LABEL_33;
                }
                break;
              case 'L':
                if (v3[1] == 82) {
                  goto LABEL_33;
                }
                break;
              case 'M':
                unsigned int v27 = *((unsigned __int8 *)v3 + 1) - 70;
                BOOL v7 = v27 > 0x12;
                int v28 = (1 << v27) & 0x42401;
                if (!v7 && v28 != 0) {
                  goto LABEL_33;
                }
                break;
              case 'N':
                if (v3[1] == 73) {
                  goto LABEL_33;
                }
                break;
              default:
                break;
            }
            if (v4 && v3[1] == 78) {
              break;
            }
            if (v5 == 86)
            {
              LODWORD(v14) = *((unsigned __int8 *)v3 + 1) - 69;
              if (v14 < 5)
              {
                uint64_t v14 = (char)v14;
                double v15 = "<";
LABEL_16:
                uint64_t v10 = *(unsigned int *)&v15[4 * v14];
                goto LABEL_34;
              }
            }
            else if (v5 == 84)
            {
              unsigned int v30 = *((unsigned __int8 *)v3 + 1) - 67;
              BOOL v7 = v30 > 0x14;
              int v8 = 1 << v30;
              unsigned __int16 v13 = 1;
LABEL_9:
              int v9 = v13 | 0x120000;
LABEL_29:
              int v23 = v8 & v9;
              if (!v7 && v23 != 0) {
                break;
              }
            }
LABEL_62:
            uint64_t v10 = 50;
            goto LABEL_34;
        }
      }
LABEL_33:
      uint64_t v10 = 60;
LABEL_34:
      printf("H16ISPLocationManager: countryCode=%s, flickerFreqHint=%dHz\n", v3, v10);

      return v10;
    }
  }
  return 50;
}

void StopAudioCaptureSession(H16ISPFlickerDetectorContext *a1)
{
  if (a1)
  {
    p_var23 = &a1->var23;
    pthread_mutex_lock(&a1->var23);
    var2 = a1->var2;
    if (var2)
    {
      if (AudioOutputUnitStop(var2))
      {
        int v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v4 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v4;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          StopAudioCaptureSession();
        }
      }
      DisposeAudioCaptureSession(a1);
    }
    pthread_mutex_unlock(p_var23);
  }
  else
  {
    int v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v5 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      StopAudioCaptureSession();
    }
  }
}

char *H16ISPFlickerDetectorCreate(int a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a1)
  {
    unint64_t v2 = (char *)malloc_type_calloc(1uLL, 0x2C8uLL, 0x10A00403CF60310uLL);
    unint64_t v3 = v2;
    if (v2)
    {
      pthread_mutex_init((pthread_mutex_t *)(v2 + 336), 0);
      pthread_mutex_init((pthread_mutex_t *)(v3 + 424), 0);
      pthread_cond_init((pthread_cond_t *)(v3 + 488), 0);
      uint64_t v4 = 0;
      v3[328] = 0;
      v3[8] = 1;
      *((_DWORD *)v3 + 16) = 4096;
      *((void *)v3 + 36) = 0;
      *((_DWORD *)v3 + 102) = 0;
      do
      {
        if (*(_DWORD *)((char *)&h16IspFlickerDetectorHWInfo + v4) == a1) {
          *(void *)unint64_t v3 = (char *)&h16IspFlickerDetectorHWInfo + v4;
        }
        v4 += 16;
      }
      while (v4 != 160);
      *((void *)v3 + 39) = 0;
      *((void *)v3 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *((_DWORD *)v3 + 76) = 1065353216;
      int v5 = objc_alloc_init(FlickerResourceArbiterClientDelegate);
      *((void *)v3 + 5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
      [(FlickerResourceArbiterClientDelegate *)v5 setFlickerContext:v3];
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  unsigned int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    unsigned int v6 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315650;
    int v9 = "H16ISPFlickerDetectorCreate";
    __int16 v10 = 1024;
    int v11 = a1;
    __int16 v12 = 2048;
    unsigned __int16 v13 = v3;
    _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_DEFAULT, "%s - HWType = %d; pContext = %p \n\n",
      (uint8_t *)&v8,
      0x1Cu);
  }
  return v3;
}

uint64_t H16ISPFlickerDetectorDispose(H16ISPFlickerDetectorContext *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 3758097090;
  }
  [a1->var24 cleanup];

  pthread_mutex_lock(&a1->var27);
  pthread_cond_broadcast(&a1->var28);
  pthread_mutex_unlock(&a1->var27);
  pthread_cond_destroy(&a1->var28);
  pthread_mutex_destroy(&a1->var27);
  pthread_mutex_destroy(&a1->var23);
  free(a1);
  unint64_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    unint64_t v2 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v2;
  }
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v3)
  {
    int v5 = 136315138;
    unsigned int v6 = "H16ISPFlickerDetectorDispose";
    _os_log_impl(&dword_24680F000, v2, OS_LOG_TYPE_DEFAULT, "%s - Success\n", (uint8_t *)&v5, 0xCu);
    return 0;
  }
  return result;
}

uint64_t H16ISPFlickerDetectorStartDataCollection(H16ISPFlickerDetectorContext *a1)
{
  if (!a1) {
    return 3758097090;
  }
  p_var23 = &a1->var23;
  pthread_mutex_lock(&a1->var23);
  a1->var22 = 0;
  pthread_mutex_unlock(p_var23);
  [a1->var24 requestResourceAccess];
  BOOL v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    BOOL v3 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v3;
  }
  uint64_t result = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    H16ISPFlickerDetectorStartDataCollection(v3);
    return 0;
  }
  return result;
}

uint64_t H16ISPFlickerDetectorStopDataCollection(H16ISPFlickerDetectorContext *a1)
{
  if (!a1) {
    return 3758097090;
  }
  p_var23 = &a1->var23;
  pthread_mutex_lock(&a1->var23);
  a1->var22 = 1;
  pthread_mutex_unlock(p_var23);
  StopAudioCaptureSession(a1);
  BOOL v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    BOOL v3 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v3;
  }
  uint64_t result = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    H16ISPFlickerDetectorStopDataCollection(v3);
    return 0;
  }
  return result;
}

uint64_t H16ISPFlickerDetectorSetGain(H16ISPFlickerDetectorContext *a1, float a2)
{
  uint64_t v2 = 3758097097;
  float inData = a2;
  if (!a1) {
    return 3758097090;
  }
  a1->var19 = a2;
  p_var23 = &a1->var23;
  pthread_mutex_lock(&a1->var23);
  var2 = a1->var2;
  if (var2 && AudioUnitSetProperty(var2, 0x7E6u, 1u, 1u, &inData, 4u))
  {
    unsigned int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      unsigned int v6 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      H16ISPFlickerDetectorSetGain();
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  pthread_mutex_unlock(p_var23);
  return v2;
}

uint64_t H16ISPFlickerDetectorGetGain(H16ISPFlickerDetectorContext *a1, float *a2)
{
  uint64_t v3 = 3758097097;
  uint64_t result = 3758097090;
  if (a1 && a2)
  {
    iosize_t DataSize = 4;
    p_var23 = &a1->var23;
    pthread_mutex_lock(&a1->var23);
    var2 = a1->var2;
    if (var2 && AudioUnitGetProperty(var2, 0x7E6u, 1u, 1u, a2, &ioDataSize))
    {
      int v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        int v8 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        H16ISPFlickerDetectorGetGain();
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    pthread_mutex_unlock(p_var23);
    return v3;
  }
  return result;
}

uint64_t H16ISPFlickerDetectorRegisterDataCollectionCallback(H16ISPFlickerDetectorContext *a1, void *a2, int (*a3)(H16ISPFlickerDetectorContext *, void *, photometer_flicker_result *))
{
  if (!a1) {
    return 3758097090;
  }
  uint64_t result = 0;
  a1->var20 = a3;
  a1->var21 = a2;
  return result;
}

uint64_t H16ISPFlickerDetectorSetIRStreamingState(H16ISPFlickerDetectorContext *a1, char a2)
{
  uint64_t result = 3758097090;
  if (a1)
  {
    var26 = a1->var26;
    if (var26)
    {
      uint64_t result = 0;
      *(unsigned char *)var26 = a2;
    }
  }
  return result;
}

uint64_t H16ISPFlickerDetectorSetJasperState(H16ISPFlickerDetectorContext *a1, char a2)
{
  uint64_t result = 3758097090;
  if (a1)
  {
    var26 = a1->var26;
    if (var26)
    {
      uint64_t result = 0;
      *((unsigned char *)var26 + 1) = a2;
    }
  }
  return result;
}

void DisposeAudioCaptureSession(H16ISPFlickerDetectorContext *a1)
{
  var2 = a1->var2;
  if (var2)
  {
    AudioComponentInstanceDispose(var2);
    a1->var2 = 0;
  }
  if (*(_DWORD *)a1->var0 != 1)
  {
    mData = a1->var8.mData;
    if (mData)
    {
      free(mData);
      a1->var8.mData = 0;
    }
    uint64_t v4 = a1->var9.mData;
    if (v4)
    {
      free(v4);
      a1->var9.mData = 0;
    }
  }
  int v5 = a1->var5.mData;
  if (v5)
  {
    free(v5);
    a1->var5.mData = 0;
  }
  unsigned int v6 = a1->var6.mData;
  if (v6)
  {
    free(v6);
    a1->var6.mData = 0;
  }
  uint64_t v7 = a1->var10.mData;
  if (v7)
  {
    free(v7);
    a1->var10.mData = 0;
  }
  int v8 = a1->var11.mData;
  if (v8)
  {
    free(v8);
    a1->var11.mData = 0;
  }
  var17 = a1->var17;
  if (var17)
  {
    vDSP_destroy_fftsetup(var17);
    a1->var17 = 0;
  }
  __int16 v10 = a1->var12.mData;
  if (v10)
  {
    free(v10);
    a1->var12.mData = 0;
  }
  int v11 = a1->var13.mData;
  if (v11)
  {
    free(v11);
    a1->var13.mData = 0;
  }
  var15 = a1->var15;
  if (var15)
  {
    free(var15);
    a1->var15 = 0;
  }
  var6 = a1->var18.var6;
  if (var6)
  {
    free(var6);
    a1->var18.var6 = 0;
  }
  if (*(_DWORD *)a1->var0 != 1)
  {
    uint64_t v14 = a1->var14.mData;
    if (v14)
    {
      free(v14);
      a1->var14.mData = 0;
    }
    var26 = a1->var26;
    if (var26)
    {
      free(var26);
      a1->var26 = 0;
    }
  }
}

uint64_t inputCallbackForHawking(char *a1, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, unsigned int a4, UInt32 inNumberFrames, AudioBufferList *a6)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  if (a1)
  {
    __int16 v10 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v10) {
      H16ISPMetrics::StartTimer(v10);
    }
    uint64_t v11 = *((void *)a1 + 10);
    if (!v11)
    {
      uint64_t v17 = 0;
      goto LABEL_54;
    }
    uint64_t v12 = *((_DWORD *)a1 + 12) * inNumberFrames;
    uint64_t v14 = a1 + 104;
    uint64_t v13 = *((void *)a1 + 13);
    ioData.mBuffers[0].mData = (void *)(v11 + v13);
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mDataByteSize = v12;
    if (v13 + v12 <= (unint64_t)*((unsigned int *)a1 + 19))
    {
      uint64_t v17 = AudioUnitRender(*((AudioUnit *)a1 + 2), ioActionFlags, inTimeStamp, 1u, inNumberFrames, &ioData);
      if (v17)
      {
        uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v26 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v26;
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          inputCallbackForHawking();
        }
      }
      unsigned int v27 = (FILE *)*((void *)a1 + 31);
      if (v27)
      {
        fwrite(ioData.mBuffers[0].mData, 1uLL, ioData.mBuffers[0].mDataByteSize, v27);
        fflush(*((FILE **)a1 + 31));
      }
      size_t v16 = *v14 + ioData.mBuffers[0].mDataByteSize;
    }
    else
    {
      double v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        double v15 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        inputCallbackForHawking();
      }
      size_t v16 = 0;
      uint64_t v17 = 0;
    }
    *((void *)a1 + 13) = v16;
    if (v16 != *((_DWORD *)a1 + 19)) {
      goto LABEL_54;
    }
    memcpy(*((void **)a1 + 12), (const void *)(*((void *)a1 + 12) + v16), v16);
    memcpy((void *)(*((void *)a1 + 12) + *((unsigned int *)a1 + 19)), *((const void **)a1 + 10), *((unsigned int *)a1 + 19));
    int v28 = (FILE *)*((void *)a1 + 32);
    if (v28)
    {
      fwrite(*((const void **)a1 + 12), 1uLL, *((unsigned int *)a1 + 23), v28);
      fflush(*((FILE **)a1 + 32));
    }
    int v29 = (char *)malloc_type_calloc(1uLL, 0x110uLL, 0x1000040368141FCuLL);
    if (!v29)
    {
LABEL_53:
      *uint64_t v14 = 0;
LABEL_54:
      float v59 = (H16ISPMetrics *)*((void *)a1 + 36);
      if (v59) {
        H16ISPMetrics::StopTimer(v59);
      }
      return v17;
    }
    unsigned int v30 = v29;
    float v72 = NAN;
    uint64_t v71 = 0x7FC000007FC00000;
    int v70 = 2143289344;
    uint64_t v69 = 0x7FC000007FC00000;
    float v61 = NAN;
    int v68 = 0;
    uint64_t v67 = 0;
    long long v31 = *(double **)(*(void *)a1 + 8);
    double v33 = *v31;
    double v32 = v31[1];
    double v34 = v31[2];
    *((void *)a1 + 15) = *((void *)a1 + 12);
    *((_DWORD *)a1 + 29) = *((_DWORD *)a1 + 23);
    vDSP_Length v35 = (unint64_t)*((unsigned int *)a1 + 37) >> 2;
    uint64_t v36 = (uint64_t)(v33 / v34);
    if (v36 > 16 || v36 == 0)
    {
      CFArrayRef v38 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        CFArrayRef v38 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v38;
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
        inputCallbackForHawking();
      }
      long long v65 = 0u;
      long long v66 = 0u;
      long long __F = 0u;
      long long v64 = 0u;
      uint64_t v36 = 16;
    }
    else
    {
      long long v65 = 0u;
      long long v66 = 0u;
      long long __F = 0u;
      long long v64 = 0u;
      if (v36 < 1)
      {
LABEL_42:
        vDSP_desamp(*((const float **)a1 + 15), v36, (const float *)&__F, *((float **)a1 + 19), v35, v36);
        float v40 = v34;
        analyze_flicker_Hawking(*((DSPComplex **)a1 + 19), *((_DWORD *)a1 + 58), v40, (float *)&v71, (float *)&v69, *((float **)a1 + 25), (OpaqueFFTSetup **)a1 + 30);
        vDSP_Length v41 = (unint64_t)*((unsigned int *)a1 + 45) >> 2;
        long long __F = xmmword_2469DACD0;
        vDSP_desamp(*((const float **)a1 + 15), (uint64_t)(v33 / v32), (const float *)&__F, *((float **)a1 + 23), v41, (uint64_t)(v33 / v32));
        float v42 = v32;
        waveMatching(*((float32x4_t **)a1 + 23), v41, v42, (float *)&v71, (float *)&v67, 3u);
        int v43 = flicker_temporal_filter_Hawking(*(float *)&v71, *(float *)&v69, *(float *)&v67, -1.0, &v61, *((CPastFlickerHistory **)a1 + 28));
        *(_DWORD *)unsigned int v30 = v43;
        float v44 = *(float *)(*((void *)a1 + 28)
                       + 4
                       * ((*(_DWORD *)(*((void *)a1 + 28) + 8) + **((_DWORD **)a1 + 28) - 1) % **((_DWORD **)a1 + 28))
                       + 140);
        *(float *)&uint64_t v67 = v44;
        if (v43 == 1)
        {
          if (v44 > 0.4) {
            int v45 = 1;
          }
          else {
            int v45 = 2;
          }
        }
        else
        {
          int v45 = v43;
          if (v43 != 3) {
            int v45 = 2;
          }
        }
        uint64_t v46 = 0;
        *((double *)v30 + 1) = v61 * 0.5;
        v47.i32[0] = v69;
        *((void *)v30 + 2) = 0xBFF0000000000000;
        v47.i32[1] = sqrtf(v72);
        *(float64x2_t *)(v30 + 24) = vcvtq_f64_f32(vminnm_f32(v47, (float32x2_t)vdup_n_s32(0x477FFF00u)));
        double v48 = fminf(*((float *)&v67 + 1), 65535.0);
        *((double *)v30 + 5) = fminf(v44, 65535.0);
        *((double *)v30 + 6) = v48;
        *((_DWORD *)v30 + 1) = v45;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(v30 + 56) = _Q0;
        *((void *)v30 + 9) = 0xBFF0000000000000;
        *((void *)v30 + 13) = 0x200000000;
        uint64_t v53 = *((void *)a1 + 37);
        char v54 = 1;
        do
        {
          char v55 = v54;
          __n128 v56 = &v30[8 * v46];
          __n128 v57 = (void *)(v53 + 8 * v46);
          v57[1] = *((void *)v56 + 1);
          v57[3] = *((void *)v56 + 3);
          v57[5] = *((void *)v56 + 5);
          uint64_t v46 = 1;
          char v54 = 0;
        }
        while ((v55 & 1) != 0);
        *(void *)(v53 + 56) = *((void *)v30 + 7);
        *(void *)(v53 + 64) = *((void *)v30 + 8);
        *(_DWORD *)uint64_t v53 = v43;
        *(_DWORD *)(v53 + 4) = v45;
        *(void *)(v53 + 72) = *((void *)v30 + 9);
        *(_DWORD *)(v53 + 104) = 0;
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 424));
        pthread_cond_broadcast((pthread_cond_t *)(a1 + 488));
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 424));
        long long v58 = (void (*)(char *, void, char *))*((void *)a1 + 39);
        if (v58) {
          v58(a1, *((void *)a1 + 40), v30);
        }
        else {
          free(v30);
        }
        goto LABEL_53;
      }
    }
    uint64_t v39 = 0;
    do
      *((float *)&__F + v39++) = 1.0 / (float)v36;
    while (v36 > v39);
    goto LABEL_42;
  }
  int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    int v18 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    inputCallbackForHawking(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  return 0xFFFFFFFFLL;
}

uint64_t inputCallbackForPenrose(char *a1, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, unsigned int a4, UInt32 inNumberFrames, AudioBufferList *a6)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  if (a1)
  {
    __int16 v10 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v10) {
      H16ISPMetrics::StartTimer(v10);
    }
    uint64_t v11 = *((void *)a1 + 10);
    if (!v11)
    {
      uint64_t v17 = 0;
      goto LABEL_70;
    }
    uint64_t v12 = *((_DWORD *)a1 + 12) * inNumberFrames;
    uint64_t v14 = a1 + 104;
    uint64_t v13 = *((void *)a1 + 13);
    ioData.mBuffers[0].mData = (void *)(v11 + v13);
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mDataByteSize = v12;
    if (v13 + v12 <= (unint64_t)*((unsigned int *)a1 + 19))
    {
      uint64_t v17 = AudioUnitRender(*((AudioUnit *)a1 + 2), ioActionFlags, inTimeStamp, 1u, inNumberFrames, &ioData);
      if (v17)
      {
        uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v26 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v26;
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          inputCallbackForPenrose();
        }
      }
      unsigned int v27 = (FILE *)*((void *)a1 + 31);
      if (v27)
      {
        fwrite(ioData.mBuffers[0].mData, 1uLL, ioData.mBuffers[0].mDataByteSize, v27);
        fflush(*((FILE **)a1 + 31));
      }
      size_t v16 = *v14 + ioData.mBuffers[0].mDataByteSize;
    }
    else
    {
      double v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        double v15 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        inputCallbackForPenrose();
      }
      size_t v16 = 0;
      uint64_t v17 = 0;
    }
    *((void *)a1 + 13) = v16;
    if (v16 != *((_DWORD *)a1 + 19)) {
      goto LABEL_70;
    }
    memcpy(*((void **)a1 + 12), (const void *)(*((void *)a1 + 12) + v16), v16);
    memcpy((void *)(*((void *)a1 + 12) + *((unsigned int *)a1 + 19)), *((const void **)a1 + 10), *((unsigned int *)a1 + 19));
    int v28 = (FILE *)*((void *)a1 + 32);
    if (v28)
    {
      fwrite(*((const void **)a1 + 12), 1uLL, *((unsigned int *)a1 + 23), v28);
      fflush(*((FILE **)a1 + 32));
    }
    int v29 = (char *)malloc_type_calloc(1uLL, 0x110uLL, 0x1000040368141FCuLL);
    if (!v29)
    {
LABEL_69:
      *uint64_t v14 = 0;
LABEL_70:
      int v68 = (H16ISPMetrics *)*((void *)a1 + 36);
      if (v68) {
        H16ISPMetrics::StopTimer(v68);
      }
      return v17;
    }
    unsigned int v30 = v29;
    float v82 = NAN;
    uint64_t v81 = 0x7FC000007FC00000;
    int v80 = 2143289344;
    uint64_t v79 = 0x7FC000007FC00000;
    float v70 = NAN;
    int v78 = 0;
    uint64_t v77 = 0;
    long long v31 = *(double **)(*(void *)a1 + 8);
    double v33 = *v31;
    double v32 = v31[1];
    double v34 = v31[2];
    vDSP_Length v35 = (unint64_t)*((unsigned int *)a1 + 29) >> 2;
    vDSP_Length v36 = (unint64_t)*((unsigned int *)a1 + 33) >> 2;
    *(void *)&long long __F = 1065353216;
    vDSP_desamp(*((const float **)a1 + 12), 2, (const float *)&__F, *((float **)a1 + 17), v36, 2uLL);
    uint64_t v76 = 0x3F80000000000000;
    vDSP_desamp(*((const float **)a1 + 12), 2, (const float *)&v76, *((float **)a1 + 15), v35, 2uLL);
    float v37 = meanFilter(*((const float **)a1 + 15), v35);
    float v38 = meanFilter(*((const float **)a1 + 17), v36);
    if (a1[8])
    {
      float v37 = meanFilter((const float *)(*((void *)a1 + 15) + 38400), v35 - 9600);
      float v39 = meanFilter((const float *)(*((void *)a1 + 17) + 38400), v36 - 9600);
      a1[8] = 0;
    }
    else
    {
      float v39 = v38;
    }
    float v40 = v37 + 0.4945;
    float v41 = v39 + 0.4945;
    BOOL v43 = (float)(v37 + 0.4945) <= (float)(v39 + 0.4945) || v40 <= 0.033 || v41 <= 0.033;
    float v44 = v41 / v40;
    if (v43) {
      float v45 = 0.0;
    }
    else {
      float v45 = v44;
    }
    uint64_t v46 = (FILE *)*((void *)a1 + 34);
    if (v46)
    {
      fwrite(*((const void **)a1 + 17), 1uLL, *((unsigned int *)a1 + 33), v46);
      fflush(*((FILE **)a1 + 34));
    }
    float32x2_t v47 = (FILE *)*((void *)a1 + 33);
    if (v47)
    {
      fwrite(*((const void **)a1 + 15), 1uLL, *((unsigned int *)a1 + 29), v47);
      fflush(*((FILE **)a1 + 33));
    }
    vDSP_Length v48 = (unint64_t)*((unsigned int *)a1 + 37) >> 2;
    uint64_t v49 = (uint64_t)(v33 / v34);
    if (v49 > 16 || v49 == 0)
    {
      CFIndex v51 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        CFIndex v51 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v51;
      }
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
        inputCallbackForPenrose();
      }
      long long v74 = 0u;
      long long v75 = 0u;
      long long __F = 0u;
      long long v73 = 0u;
      uint64_t v49 = 16;
    }
    else
    {
      long long v74 = 0u;
      long long v75 = 0u;
      long long __F = 0u;
      long long v73 = 0u;
      if (v49 < 1)
      {
LABEL_58:
        vDSP_desamp(*((const float **)a1 + 15), v49, (const float *)&__F, *((float **)a1 + 19), v48, v49);
        float v53 = v34;
        analyze_flicker(*((DSPComplex **)a1 + 19), *((_DWORD *)a1 + 58), v53, (float *)&v81, (float *)&v79, *((float **)a1 + 25), (OpaqueFFTSetup **)a1 + 30);
        vDSP_Length v54 = (unint64_t)*((unsigned int *)a1 + 45) >> 2;
        long long __F = xmmword_2469DACD0;
        vDSP_desamp(*((const float **)a1 + 15), (uint64_t)(v33 / v32), (const float *)&__F, *((float **)a1 + 23), v54, (uint64_t)(v33 / v32));
        float v55 = v32;
        waveMatching(*((float32x4_t **)a1 + 23), v54, v55, (float *)&v81, (float *)&v77, 3u);
        LODWORD(__F) = 0;
        int v56 = flicker_temporal_filter_Penrose(*(float *)&v81, *(float *)&v79, *(float *)&v77, v45, v82, &v70, (float *)&__F, *((CPastFlickerHistory **)a1 + 28), v34);
        *(_DWORD *)unsigned int v30 = v56;
        v57.i32[0] = __F;
        LODWORD(v79) = __F;
        float v58 = *(float *)(*((void *)a1 + 28)
                       + 4
                       * ((*(_DWORD *)(*((void *)a1 + 28) + 8) + **((_DWORD **)a1 + 28) - 1) % **((_DWORD **)a1 + 28))
                       + 140);
        *(float *)&uint64_t v77 = v58;
        if (v56 == 1)
        {
          if (v58 > 0.4) {
            int v59 = 1;
          }
          else {
            int v59 = 2;
          }
        }
        else
        {
          int v59 = v56;
          if (v56 != 3) {
            int v59 = 2;
          }
        }
        uint64_t v60 = 0;
        v57.i32[1] = sqrtf(v82);
        *((double *)v30 + 1) = v70 * 0.5;
        *((double *)v30 + 2) = v45;
        *(float64x2_t *)(v30 + 24) = vcvtq_f64_f32(vminnm_f32(v57, (float32x2_t)vdup_n_s32(0x477FFF00u)));
        float v61 = fminf(*((float *)&v77 + 1), 65535.0);
        *((double *)v30 + 5) = fminf(v58, 65535.0);
        *((double *)v30 + 6) = v61;
        *((_DWORD *)v30 + 1) = v59;
        *((double *)v30 + 7) = v37;
        *((double *)v30 + 8) = v39;
        *((double *)v30 + 9) = v45;
        *((void *)v30 + 13) = 0x200000000;
        uint64_t v62 = *((void *)a1 + 37);
        char v63 = 1;
        do
        {
          char v64 = v63;
          long long v65 = &v30[8 * v60];
          long long v66 = (void *)(v62 + 8 * v60);
          v66[1] = *((void *)v65 + 1);
          v66[3] = *((void *)v65 + 3);
          v66[5] = *((void *)v65 + 5);
          uint64_t v60 = 1;
          char v63 = 0;
        }
        while ((v64 & 1) != 0);
        *(void *)(v62 + 56) = *((void *)v30 + 7);
        *(void *)(v62 + 64) = *((void *)v30 + 8);
        *(_DWORD *)uint64_t v62 = v56;
        *(_DWORD *)(v62 + 4) = v59;
        *(void *)(v62 + 72) = *((void *)v30 + 9);
        *(_DWORD *)(v62 + 104) = 0;
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 424));
        pthread_cond_broadcast((pthread_cond_t *)(a1 + 488));
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 424));
        uint64_t v67 = (void (*)(char *, void, char *))*((void *)a1 + 39);
        if (v67) {
          v67(a1, *((void *)a1 + 40), v30);
        }
        else {
          free(v30);
        }
        goto LABEL_69;
      }
    }
    uint64_t v52 = 0;
    do
      *((float *)&__F + v52++) = 1.0 / (float)v49;
    while (v49 > v52);
    goto LABEL_58;
  }
  int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    int v18 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    inputCallbackForPenrose(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  return 0xFFFFFFFFLL;
}

uint64_t inputCallbackForPenrose2(char *a1, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, unsigned int a4, UInt32 inNumberFrames, AudioBufferList *a6)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  if (a1)
  {
    __int16 v10 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v10) {
      H16ISPMetrics::StartTimer(v10);
    }
    uint64_t v11 = *((void *)a1 + 10);
    if (v11)
    {
      uint64_t v12 = *((_DWORD *)a1 + 12) * inNumberFrames;
      uint64_t v14 = a1 + 104;
      uint64_t v13 = *((void *)a1 + 13);
      ioData.mBuffers[0].mData = (void *)(v11 + v13);
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mDataByteSize = v12;
      if (v13 + v12 <= (unint64_t)*((unsigned int *)a1 + 19))
      {
        uint64_t v17 = AudioUnitRender(*((AudioUnit *)a1 + 2), ioActionFlags, inTimeStamp, 1u, inNumberFrames, &ioData);
        if (v17)
        {
          uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            uint64_t v26 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v26;
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            inputCallbackForPenrose2();
          }
        }
        unsigned int v27 = (FILE *)*((void *)a1 + 31);
        if (v27)
        {
          fwrite(ioData.mBuffers[0].mData, 1uLL, ioData.mBuffers[0].mDataByteSize, v27);
          fflush(*((FILE **)a1 + 31));
        }
        size_t v16 = *v14 + ioData.mBuffers[0].mDataByteSize;
      }
      else
      {
        double v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          double v15 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          inputCallbackForPenrose2();
        }
        size_t v16 = 0;
        uint64_t v17 = 0;
      }
      *((void *)a1 + 13) = v16;
      if (v16 == *((_DWORD *)a1 + 19))
      {
        memcpy(*((void **)a1 + 12), (const void *)(*((void *)a1 + 12) + v16), v16);
        memcpy((void *)(*((void *)a1 + 12) + *((unsigned int *)a1 + 19)), *((const void **)a1 + 10), *((unsigned int *)a1 + 19));
        int v28 = (FILE *)*((void *)a1 + 32);
        if (v28)
        {
          fwrite(*((const void **)a1 + 12), 1uLL, *((unsigned int *)a1 + 23), v28);
          fflush(*((FILE **)a1 + 32));
        }
        int v29 = (char *)malloc_type_calloc(1uLL, 0x110uLL, 0x1000040368141FCuLL);
        if (v29)
        {
          unsigned int v30 = v29;
          int v100 = 2143289344;
          uint64_t v99 = 0x7FC000007FC00000;
          int v98 = 0;
          uint64_t v97 = 0;
          long long v31 = *(_DWORD **)a1;
          double v32 = *(double **)(*(void *)a1 + 8);
          double v34 = *v32;
          double v33 = v32[1];
          vDSP_Length v35 = (unint64_t)*((unsigned int *)a1 + 29) >> 2;
          vDSP_Length v36 = (unint64_t)*((unsigned int *)a1 + 33) >> 2;
          *(void *)&long long __F = 1065353216;
          uint64_t v101 = 0x3F80000000000000;
          if (*v31 == 5) {
            p_F = (const float *)&v101;
          }
          else {
            p_F = (const float *)&__F;
          }
          if (*v31 == 5) {
            float v38 = (const float *)&__F;
          }
          else {
            float v38 = (const float *)&v101;
          }
          vDSP_desamp(*((const float **)a1 + 12), 2, p_F, *((float **)a1 + 17), v36, 2uLL);
          vDSP_desamp(*((const float **)a1 + 12), 2, v38, *((float **)a1 + 15), v35, 2uLL);
          float v39 = meanFilter(*((const float **)a1 + 15), v35);
          float v40 = meanFilter(*((const float **)a1 + 17), v36);
          if (a1[8])
          {
            float v39 = meanFilter((const float *)(*((void *)a1 + 15) + 38400), v35 - 9600);
            float v41 = meanFilter((const float *)(*((void *)a1 + 17) + 38400), v36 - 9600);
            a1[8] = 0;
          }
          else
          {
            float v41 = v40;
          }
          float v42 = -1.0;
          switch(**(_DWORD **)a1)
          {
            case 3:
              *(void *)(*((void *)a1 + 52) + 708) = 0x3EE666663E99999ALL;
              float v43 = v41 + 0.389;
              float v42 = 0.0;
              if ((float)(v41 + 0.389) > 0.024)
              {
                float v44 = v39 + 0.3895;
                if ((float)(v39 + 0.3895) > 0.024)
                {
                  BOOL v45 = v44 <= v43;
                  float v46 = v43 / v44;
                  if (!v45) {
                    float v42 = v46;
                  }
                }
              }
              break;
            case 4:
              *(void *)(*((void *)a1 + 52) + 708) = 0x4110000040C00000;
              float v47 = v41 + 19.021;
              float v42 = 0.0;
              if ((float)(v41 + 19.021) > 1.4576)
              {
                float v48 = v39 + 18.175;
                float v49 = 1.6311;
                goto LABEL_53;
              }
              break;
            case 5:
              *(void *)(*((void *)a1 + 52) + 708) = 0x4110000040C00000;
              float v47 = v41 + 24.91;
              float v42 = 0.0;
              if ((float)(v41 + 24.91) > 1.011)
              {
                float v48 = v39 + 25.06;
                if ((float)(v39 + 25.06) > 1.011) {
                  goto LABEL_54;
                }
              }
              break;
            case 7:
              *(void *)(*((void *)a1 + 52) + 708) = 0x3EE666663E99999ALL;
              float v47 = v41 + 0.6268;
              float v42 = 0.0;
              float v49 = 0.01758;
              if ((float)(v41 + 0.6268) > 0.01758)
              {
                float v48 = v39 + 0.6268;
                goto LABEL_53;
              }
              break;
            case 8:
              *(void *)(*((void *)a1 + 52) + 708) = 0x4110000040C00000;
              float v47 = v41 + 24.876;
              float v42 = 0.0;
              if ((float)(v41 + 24.876) > 0.714)
              {
                float v48 = v39 + 25.042;
                float v49 = 2.0352;
LABEL_53:
                if (v48 > v49)
                {
LABEL_54:
                  if (v48 > v47) {
                    float v42 = v47 / v48;
                  }
                }
              }
              break;
            default:
              break;
          }
          uint64_t v50 = (FILE *)*((void *)a1 + 34);
          if (v50)
          {
            fwrite(*((const void **)a1 + 17), 1uLL, *((unsigned int *)a1 + 33), v50);
            fflush(*((FILE **)a1 + 34));
          }
          CFIndex v51 = (FILE *)*((void *)a1 + 33);
          if (v51)
          {
            fwrite(*((const void **)a1 + 15), 1uLL, *((unsigned int *)a1 + 29), v51);
            fflush(*((FILE **)a1 + 33));
          }
          if ((**(_DWORD **)a1 | 2) == 7)
          {
            uint64_t v52 = *(double **)(*(void *)a1 + 8);
            double v53 = *v52;
            double v54 = v52[2];
            unint64_t v55 = *((unsigned int *)a1 + 37);
            uint64_t v56 = (uint64_t)(v53 / v54);
            long long v95 = 0u;
            long long v96 = 0u;
            vDSP_Length v57 = v55 >> 2;
            long long __F = 0u;
            long long v94 = 0u;
            if (v56 >= 1)
            {
              uint64_t v58 = 0;
              do
                *((float *)&__F + v58++) = 1.0 / (float)v56;
              while (v56 > v58);
            }
            vDSP_desamp(*((const float **)a1 + 15), v56, (const float *)&__F, *((float **)a1 + 19), v57, v56);
            vDSP_desamp(*((const float **)a1 + 17), v56, (const float *)&__F, *((float **)a1 + 21), v57, v56);
          }
          else
          {
            memcpy(*((void **)a1 + 19), *((const void **)a1 + 15), *((unsigned int *)a1 + 37));
            memcpy(*((void **)a1 + 21), *((const void **)a1 + 17), *((unsigned int *)a1 + 37));
          }
          int v59 = flicker_data_processing(*((void *)a1 + 52), (OpaqueFFTSetup **)a1 + 30, *((const float **)a1 + 19), *((const float **)a1 + 21), (uint64_t)&v101, *((float *)a1 + 102));
          uint64_t v99 = 1119092736;
          int v100 = 0;
          float v60 = 0.0;
          if (!v59)
          {
            LODWORD(v99) = HIDWORD(v101);
            int v100 = v104;
            float v60 = v102 * 65535.0;
          }
          float v90 = v60;
          unint64_t v61 = *((unsigned int *)a1 + 37);
          uint64_t v62 = (float *)(*((void *)a1 + 19) + (v61 >> 1));
          char v63 = (float *)(*((void *)a1 + 21) + (v61 >> 1));
          unsigned int v64 = v61 >> 3;
          uint64_t v65 = *((void *)a1 + 52);
          float v66 = *(float *)(v65 + 24);
          float v67 = *(float *)(v65 + 28);
          uint64_t v68 = *(void *)(v65 + 816);
          if (*(unsigned char *)(v65 + 828))
          {
            jasperDetectC(v62, v63, v64, 1, v68, (uint64_t)&__F, 0, 1.0, 1.0, v66, v67);
          }
          else
          {
            jasperDetectC(v62, v63, v64, 0, v68, (uint64_t)&__F, 0, 1.0, 1.0, v66, v67);
            *(unsigned char *)(*((void *)a1 + 52) + 828) = 1;
          }
          long long v69 = v94;
          *(_OWORD *)(v30 + 116) = __F;
          *(_OWORD *)(v30 + 132) = v69;
          *(_OWORD *)(v30 + 148) = v95;
          *(void *)(v30 + 164) = v96;
          vDSP_Length v70 = (unint64_t)*((unsigned int *)a1 + 45) >> 2;
          long long v92 = xmmword_2469DACD0;
          vDSP_desamp(*((const float **)a1 + 15), (uint64_t)(v34 / v33), (const float *)&v92, *((float **)a1 + 23), v70, (uint64_t)(v34 / v33));
          float v71 = v33;
          waveMatching(*((float32x4_t **)a1 + 23), v70, v71, (float *)&v99, (float *)&v97, 3u);
          int v72 = v105;
          *(_DWORD *)unsigned int v30 = v105;
          float v73 = *(float *)(*((void *)a1 + 28)
                         + 4
                         * ((*(_DWORD *)(*((void *)a1 + 28) + 8) + **((_DWORD **)a1 + 28) - 1)
                          % **((_DWORD **)a1 + 28))
                         + 140);
          *(float *)&uint64_t v97 = v73;
          int v74 = v72;
          if (v72 != 3)
          {
            if (v72 == 1)
            {
              if (v73 > 0.4) {
                int v74 = 1;
              }
              else {
                int v74 = 2;
              }
            }
            else
            {
              int v74 = 2;
            }
          }
          uint64_t v75 = 0;
          *((double *)v30 + 1) = *((float *)&v101 + 1) * 0.5;
          *((double *)v30 + 2) = v42;
          int v76 = v103;
          int v77 = v106;
          *((_DWORD *)v30 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v103;
          *((_DWORD *)v30 + 23) = v77;
          *(void *)(v30 + 84) = 0x3F80000000000000;
          *(float64x2_t *)(v30 + 24) = vcvtq_f64_f32(vminnm_f32((float32x2_t)__PAIR64__(v100, LODWORD(v90)), (float32x2_t)vdup_n_s32(0x477FFF00u)));
          float v78 = fminf(*((float *)&v97 + 1), 65535.0);
          *((double *)v30 + 5) = fminf(v73, 65535.0);
          *((double *)v30 + 6) = v78;
          *((_DWORD *)v30 + 1) = v74;
          *((void *)v30 + 13) = 0x200000000;
          *((double *)v30 + 7) = v39;
          *((double *)v30 + 8) = v41;
          *((double *)v30 + 9) = v42;
          uint64_t v79 = *((void *)a1 + 37);
          char v80 = 1;
          do
          {
            char v81 = v80;
            float v82 = &v30[8 * v75];
            uint64_t v83 = (void *)(v79 + 8 * v75);
            v83[1] = *((void *)v82 + 1);
            v83[3] = *((void *)v82 + 3);
            v83[5] = *((void *)v82 + 5);
            uint64_t v75 = 1;
            char v80 = 0;
          }
          while ((v81 & 1) != 0);
          *(void *)(v79 + 56) = *((void *)v30 + 7);
          *(void *)(v79 + 64) = *((void *)v30 + 8);
          *(_DWORD *)uint64_t v79 = v72;
          *(_DWORD *)(v79 + 4) = v74;
          *(void *)(v79 + 72) = *((void *)v30 + 9);
          *(_DWORD *)(v79 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v76;
          *(_DWORD *)(v79 + 92) = v77;
          *(void *)(v79 + 84) = 0x3F80000000000000;
          *(_DWORD *)(v79 + 104) = 0;
          long long v84 = *(_OWORD *)(v30 + 116);
          long long v85 = *(_OWORD *)(v30 + 132);
          long long v86 = *(_OWORD *)(v30 + 148);
          *(void *)(v79 + 164) = *(void *)(v30 + 164);
          *(_OWORD *)(v79 + 148) = v86;
          *(_OWORD *)(v79 + 132) = v85;
          *(_OWORD *)(v79 + 116) = v84;
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 424));
          pthread_cond_broadcast((pthread_cond_t *)(a1 + 488));
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 424));
          __int16 v87 = (void (*)(char *, void, char *))*((void *)a1 + 39);
          if (v87) {
            v87(a1, *((void *)a1 + 40), v30);
          }
          else {
            free(v30);
          }
        }
        *uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v88 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v88) {
      H16ISPMetrics::StopTimer(v88);
    }
  }
  else
  {
    int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v18 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      inputCallbackForPenrose2(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    return 0xFFFFFFFFLL;
  }
  return v17;
}

uint64_t inputCallbackForGrimaldi(char *a1, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, unsigned int a4, UInt32 inNumberFrames, AudioBufferList *a6)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  if (a1)
  {
    __int16 v10 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v10) {
      H16ISPMetrics::StartTimer(v10);
    }
    uint64_t v11 = *((void *)a1 + 10);
    if (v11)
    {
      uint64_t v12 = *((_DWORD *)a1 + 12) * inNumberFrames;
      uint64_t v14 = a1 + 104;
      uint64_t v13 = *((void *)a1 + 13);
      ioData.mBuffers[0].mData = (void *)(v11 + v13);
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mDataByteSize = v12;
      if (v13 + v12 <= (unint64_t)*((unsigned int *)a1 + 19))
      {
        uint64_t v17 = AudioUnitRender(*((AudioUnit *)a1 + 2), ioActionFlags, inTimeStamp, 1u, inNumberFrames, &ioData);
        if (v17)
        {
          uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            uint64_t v26 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v26;
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            inputCallbackForGrimaldi();
          }
        }
        unsigned int v27 = (FILE *)*((void *)a1 + 31);
        if (v27)
        {
          fwrite(ioData.mBuffers[0].mData, 1uLL, ioData.mBuffers[0].mDataByteSize, v27);
          fflush(*((FILE **)a1 + 31));
        }
        uint64_t v16 = *v14 + ioData.mBuffers[0].mDataByteSize;
      }
      else
      {
        double v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          double v15 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          inputCallbackForGrimaldi();
        }
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      *((void *)a1 + 13) = v16;
      if (v16 == *((_DWORD *)a1 + 19))
      {
        unsigned __int8 __ptr = 0;
        a1[536] = 0;
        int v28 = (AppleH16PhotonDetectorServicesAssistant *)*((void *)a1 + 68);
        if (v28) {
          AppleH16PhotonDetectorServicesAssistant::GetGainInfo(v28, &__ptr, (unsigned __int8 *)a1 + 536);
        }
        int v29 = (FILE *)*((void *)a1 + 35);
        if (v29)
        {
          fwrite(&__ptr, 1uLL, 1uLL, v29);
          fflush(*((FILE **)a1 + 35));
        }
        if (a1[536] && !a1[8])
        {
          *((void *)a1 + 13) = 0;
          *(unsigned char *)(*((void *)a1 + 52) + 828) = 0;
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 424));
          uint64_t v48 = mach_absolute_time();
          uint64_t v49 = *((void *)a1 + 37);
          *(void *)(v49 + 96) = v48;
          LOBYTE(v5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = __ptr;
          *(float *)(v49 + 88) = (float)v50;
          *(_DWORD *)(v49 + 84) = 0;
          *(unsigned char *)(v49 + 112) = 1;
          pthread_cond_broadcast((pthread_cond_t *)(a1 + 488));
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 424));
          return 0;
        }
        memcpy(*((void **)a1 + 12), (const void *)(*((void *)a1 + 12) + *((unsigned int *)a1 + 19)), *((unsigned int *)a1 + 19));
        memcpy((void *)(*((void *)a1 + 12) + *((unsigned int *)a1 + 19)), *((const void **)a1 + 10), *((unsigned int *)a1 + 19));
        unsigned int v30 = (FILE *)*((void *)a1 + 32);
        if (v30)
        {
          fwrite(*((const void **)a1 + 12), 1uLL, *((unsigned int *)a1 + 23), v30);
          fflush(*((FILE **)a1 + 32));
        }
        long long v31 = (float *)malloc_type_calloc(1uLL, 0x110uLL, 0x1000040368141FCuLL);
        if (v31)
        {
          double v33 = v31;
          LOBYTE(v32) = __ptr;
          v31[22] = (float)v32;
          int v110 = 2143289344;
          uint64_t v109 = 0x7FC000007FC00000;
          int v108 = 0;
          uint64_t v107 = 0;
          double v34 = *(double **)(*(void *)a1 + 8);
          double v36 = *v34;
          double v35 = v34[1];
          vDSP_Length v37 = (unint64_t)*((unsigned int *)a1 + 29) >> 2;
          vDSP_Length v38 = (unint64_t)*((unsigned int *)a1 + 33) >> 2;
          uint64_t __F = 1065353216;
          info[0] = (mach_timebase_info)0x3F80000000000000;
          vDSP_desamp(*((const float **)a1 + 12), 2, (const float *)&__F, *((float **)a1 + 17), v38, 2uLL);
          vDSP_desamp(*((const float **)a1 + 12), 2, (const float *)info, *((float **)a1 + 15), v37, 2uLL);
          unint64_t v39 = (unint64_t)*((unsigned int *)a1 + 19) >> 3;
          float v40 = meanFilter(*((const float **)a1 + 15), v37);
          float v41 = meanFilter(*((const float **)a1 + 17), v38);
          vDSP_Length v42 = v37 - v39;
          float v43 = meanFilter((const float *)(*((void *)a1 + 15) + 4 * v39), v42);
          vDSP_Length v44 = v38 - v39;
          float v45 = meanFilter((const float *)(*((void *)a1 + 17) + 4 * v39), v44);
          if (a1[8])
          {
            float v46 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              float v46 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v46;
            }
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              int v47 = *((_DWORD *)a1 + 19);
              *(_DWORD *)int buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v39;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v47;
              _os_log_impl(&dword_24680F000, v46, OS_LOG_TYPE_DEFAULT, "skip buffer size in (float)%d, acc size %d\n\n", buf, 0xEu);
            }
            float v40 = meanFilter((const float *)(*((void *)a1 + 15) + 4 * v39), v42);
            float v41 = meanFilter((const float *)(*((void *)a1 + 17) + 4 * v39), v44);
            a1[8] = 0;
            *((_DWORD *)a1 + 135) = 0;
          }
          else
          {
            *((_DWORD *)a1 + 135) ^= 1u;
          }
          uint64_t v51 = *((void *)a1 + 52);
          *(void *)(v51 + 708) = 0x3EE666663E99999ALL;
          switch(__ptr)
          {
            case 0u:
              float v52 = *(float *)(v51 + 748) * 0.00000011921;
              float v53 = *(float *)(v51 + 744);
              goto LABEL_51;
            case 1u:
              float v52 = *(float *)(v51 + 756) * 0.00000011921;
              float v53 = *(float *)(v51 + 752);
              goto LABEL_51;
            case 2u:
            case 4u:
            case 5u:
            case 6u:
              goto LABEL_47;
            case 3u:
              float v52 = *(float *)(v51 + 764) * 0.00000011921;
              float v53 = *(float *)(v51 + 760);
              goto LABEL_51;
            case 7u:
              float v52 = *(float *)(v51 + 772) * 0.00000011921;
              float v53 = *(float *)(v51 + 768);
              goto LABEL_51;
            default:
              if (__ptr == 15)
              {
                float v52 = *(float *)(v51 + 780) * 0.00000011921;
                float v53 = *(float *)(v51 + 776);
LABEL_51:
                float v54 = v53 * 0.00000011921;
                *(float *)(v51 + 24) = v52;
                *(float *)(v51 + 28) = v53 * 0.00000011921;
              }
              else
              {
LABEL_47:
                float v52 = *(float *)(v51 + 24);
                float v54 = *(float *)(v51 + 28);
              }
              float v55 = v40 - v52;
              float v56 = v41 - v54;
              BOOL v57 = (float)(v41 - v54) > 0.01;
              if ((float)(v40 - v52) <= 0.01) {
                BOOL v57 = 0;
              }
              BOOL v58 = v55 > v56 && v57;
              int v59 = (FILE *)*((void *)a1 + 34);
              if (v59)
              {
                fwrite(*((const void **)a1 + 17), 1uLL, *((unsigned int *)a1 + 33), v59);
                fflush(*((FILE **)a1 + 34));
              }
              float v60 = (FILE *)*((void *)a1 + 33);
              if (v60)
              {
                fwrite(*((const void **)a1 + 15), 1uLL, *((unsigned int *)a1 + 29), v60);
                fflush(*((FILE **)a1 + 33));
              }
              float v103 = 0.0;
              uint64_t v102 = 0;
              float v101 = 0.0;
              memcpy(*((void **)a1 + 19), *((const void **)a1 + 15), *((unsigned int *)a1 + 37));
              memcpy(*((void **)a1 + 21), *((const void **)a1 + 17), *((unsigned int *)a1 + 37));
              getGainAndOffset(*((void *)a1 + 52) + 716, __ptr, &v103, (float *)&v102 + 1, &v102, &v101);
              float lux = fun_get_lux((float *)(*((void *)a1 + 52) + 716), 1, v43, v45, v103, *((float *)&v102 + 1), *(float *)&v102, v101);
              if (lux < 0.0) {
                float lux = 0.0;
              }
              v33[21] = lux;
              int v62 = flicker_data_processing(*((void *)a1 + 52), (OpaqueFFTSetup **)a1 + 30, *((const float **)a1 + 19), *((const float **)a1 + 21), (uint64_t)&__F, *((float *)a1 + 102));
              uint64_t v63 = *((void *)a1 + 52);
              if (*(unsigned char *)(v63 + 1))
              {
                if (*((float *)a1 + 102) != 8.0) {
                  *(unsigned char *)(v63 + 828) = 0;
                }
                if (*((_DWORD *)a1 + 135) == 1) {
                  peridotDetectC(*((float **)a1 + 19), *((void *)a1 + 21), *((_DWORD *)a1 + 37) >> 2, 0xFA0u, *(float **)(v63 + 816), *(_DWORD *)(v63 + 824), (uint64_t)buf);
                }
              }
              else
              {
                *(unsigned char *)(v63 + 828) = 0;
              }
              mach_timebase_info(info);
              if (info[0].denom) {
                uint64_t v64 = info[0].numer / info[0].denom;
              }
              else {
                uint64_t v64 = 1;
              }
              *(void *)&v115[1] = v64 * inTimeStamp->mHostTime;
              *(_OWORD *)(v33 + 51) = v113;
              long long v65 = v115[0];
              *(_OWORD *)(v33 + 55) = v114;
              *(_OWORD *)(v33 + 59) = v65;
              long long v66 = v112;
              *(_OWORD *)(v33 + 43) = *(_OWORD *)buf;
              *(_OWORD *)(v33 + 47) = v66;
              *(_OWORD *)((char *)v33 + 25pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)((char *)v115 + 14);
              int v67 = HIDWORD(__F);
              BOOL v68 = 1;
              if ((float)(*((float *)&__F + 1) * 0.5) >= 59.0 && (float)(*((float *)&__F + 1) * 0.5) <= 61.0) {
                BOOL v68 = v117 < 0.95;
              }
              BOOL v69 = v118 <= 13.66;
              if (v121 < 0.66) {
                BOOL v69 = 0;
              }
              *((_DWORD *)v33 + 67) = v69 && v68;
              uint64_t v109 = 1119092736;
              int v110 = 0;
              float v70 = 0.0;
              if (!v62)
              {
                LODWORD(v109) = v67;
                int v110 = v119;
                float v70 = v117 * 65535.0;
              }
              float v100 = v70;
              vDSP_Length v71 = (unint64_t)*((unsigned int *)a1 + 45) >> 2;
              *(_OWORD *)&info[0].numer = xmmword_2469DACD0;
              vDSP_desamp(*((const float **)a1 + 15), (uint64_t)(v36 / v35), (const float *)info, *((float **)a1 + 23), v71, (uint64_t)(v36 / v35));
              float v72 = v35;
              waveMatching(*((float32x4_t **)a1 + 23), v71, v72, (float *)&v109, (float *)&v107, 3u);
              int v73 = v120;
              *(_DWORD *)double v33 = v120;
              float v74 = *(float *)(*((void *)a1 + 28)
                             + 4
                             * ((*(_DWORD *)(*((void *)a1 + 28) + 8) + **((_DWORD **)a1 + 28) - 1)
                              % **((_DWORD **)a1 + 28))
                             + 140);
              *(float *)&uint64_t v107 = v74;
              int v75 = v73;
              if (v73 != 3)
              {
                if (v73 == 1)
                {
                  if (v74 > 0.4) {
                    int v75 = 1;
                  }
                  else {
                    int v75 = 2;
                  }
                }
                else
                {
                  int v75 = 2;
                }
              }
              uint64_t v76 = 0;
              if (v58) {
                double v77 = (float)(v56 / v55);
              }
              else {
                double v77 = 0.0;
              }
              *((double *)v33 + 1) = *((float *)&__F + 1) * 0.5;
              *((double *)v33 + 2) = v77;
              float v78 = v118;
              float v79 = v121;
              v33[20] = v118;
              v33[23] = v79;
              *(float64x2_t *)(v33 + 6) = vcvtq_f64_f32(vminnm_f32((float32x2_t)__PAIR64__(v110, LODWORD(v100)), (float32x2_t)vdup_n_s32(0x477FFF00u)));
              float v80 = fminf(*((float *)&v107 + 1), 65535.0);
              *((double *)v33 + 5) = fminf(v74, 65535.0);
              *((double *)v33 + 6) = v80;
              *((_DWORD *)v33 + 1) = v75;
              *((void *)v33 + 13) = 0x200000001;
              *((double *)v33 + 7) = v40;
              *((double *)v33 + 8) = v41;
              *((double *)v33 + 9) = v77;
              uint64_t v81 = *((void *)a1 + 37);
              char v82 = 1;
              do
              {
                char v83 = v82;
                long long v84 = (char *)&v33[2 * v76];
                long long v85 = (void *)(v81 + 8 * v76);
                v85[1] = *((void *)v84 + 1);
                v85[3] = *((void *)v84 + 3);
                v85[5] = *((void *)v84 + 5);
                uint64_t v76 = 1;
                char v82 = 0;
              }
              while ((v83 & 1) != 0);
              *(void *)(v81 + 56) = *((void *)v33 + 7);
              *(void *)(v81 + 64) = *((void *)v33 + 8);
              *(_DWORD *)uint64_t v81 = v73;
              *(_DWORD *)(v81 + 4) = v75;
              *(void *)(v81 + 72) = *((void *)v33 + 9);
              *(float *)(v81 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v78;
              *(float *)(v81 + 92) = v79;
              *(_DWORD *)(v81 + 104) = 1;
              pthread_mutex_lock((pthread_mutex_t *)(a1 + 424));
              *(float *)(*((void *)a1 + 37) + 84) = v33[21];
              uint64_t v86 = mach_absolute_time();
              uint64_t v87 = *((void *)a1 + 37);
              *(void *)(v87 + 96) = v86;
              *(float *)(v87 + 88) = v33[22];
              *(unsigned char *)(v87 + 112) = a1[536];
              pthread_cond_broadcast((pthread_cond_t *)(a1 + 488));
              pthread_mutex_unlock((pthread_mutex_t *)(a1 + 424));
              uint64_t v88 = *((void *)a1 + 37);
              uint64_t v89 = *(void *)(v33 + 41);
              long long v90 = *(_OWORD *)(v33 + 37);
              long long v91 = *(_OWORD *)(v33 + 33);
              *(_OWORD *)(v88 + 116) = *(_OWORD *)(v33 + 29);
              *(_OWORD *)(v88 + 132) = v91;
              *(_OWORD *)(v88 + 148) = v90;
              *(void *)(v88 + 164) = v89;
              uint64_t v92 = *((void *)a1 + 37);
              long long v94 = *(_OWORD *)(v33 + 55);
              long long v93 = *(_OWORD *)(v33 + 59);
              long long v95 = *(_OWORD *)(v33 + 51);
              *(_OWORD *)(v92 + 25pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)((char *)v33 + 250);
              *(_OWORD *)(v92 + 204) = v95;
              *(_OWORD *)(v92 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v94;
              *(_OWORD *)(v92 + 236) = v93;
              long long v96 = *(_OWORD *)(v33 + 47);
              *(_OWORD *)(v92 + 172) = *(_OWORD *)(v33 + 43);
              *(_OWORD *)(v92 + 188) = v96;
              uint64_t v97 = (void (*)(void, void, void))*((void *)a1 + 39);
              if (v97) {
                v97(a1, *((void *)a1 + 40), v33);
              }
              else {
                free(v33);
              }
              break;
          }
        }
        *uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    int v98 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v98) {
      H16ISPMetrics::StopTimer(v98);
    }
  }
  else
  {
    int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v18 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      inputCallbackForGrimaldi(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    return 0xFFFFFFFFLL;
  }
  return v17;
}

uint64_t inputCallbackForGrimaldi_iPad(char *a1, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, unsigned int a4, UInt32 inNumberFrames, AudioBufferList *a6)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  if (a1)
  {
    __int16 v10 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v10) {
      H16ISPMetrics::StartTimer(v10);
    }
    uint64_t v11 = *((void *)a1 + 10);
    if (v11)
    {
      uint64_t v12 = *((_DWORD *)a1 + 12) * inNumberFrames;
      uint64_t v14 = a1 + 104;
      uint64_t v13 = *((void *)a1 + 13);
      ioData.mBuffers[0].mData = (void *)(v11 + v13);
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mDataByteSize = v12;
      if (v13 + v12 <= (unint64_t)*((unsigned int *)a1 + 19))
      {
        uint64_t v17 = AudioUnitRender(*((AudioUnit *)a1 + 2), ioActionFlags, inTimeStamp, 1u, inNumberFrames, &ioData);
        if (v17)
        {
          uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            uint64_t v26 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v26;
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            inputCallbackForGrimaldi_iPad();
          }
        }
        unsigned int v27 = (FILE *)*((void *)a1 + 31);
        if (v27)
        {
          fwrite(ioData.mBuffers[0].mData, 1uLL, ioData.mBuffers[0].mDataByteSize, v27);
          fflush(*((FILE **)a1 + 31));
        }
        uint64_t v16 = *v14 + ioData.mBuffers[0].mDataByteSize;
      }
      else
      {
        double v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          double v15 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          inputCallbackForGrimaldi_iPad();
        }
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      *((void *)a1 + 13) = v16;
      size_t v28 = *((unsigned int *)a1 + 19);
      if (v16 == v28)
      {
        unsigned __int8 v94 = 0;
        a1[536] = 0;
        int v29 = (AppleH16PhotonDetectorServicesAssistant *)*((void *)a1 + 68);
        if (v29)
        {
          AppleH16PhotonDetectorServicesAssistant::GetGainInfo(v29, &v94, (unsigned __int8 *)a1 + 536);
          size_t v28 = *((unsigned int *)a1 + 19);
        }
        memcpy(*((void **)a1 + 12), (const void *)(*((void *)a1 + 12) + v28), v28);
        memcpy((void *)(*((void *)a1 + 12) + *((unsigned int *)a1 + 19)), *((const void **)a1 + 10), *((unsigned int *)a1 + 19));
        unsigned int v30 = (FILE *)*((void *)a1 + 32);
        if (v30)
        {
          fwrite(*((const void **)a1 + 12), 1uLL, *((unsigned int *)a1 + 23), v30);
          fflush(*((FILE **)a1 + 32));
        }
        long long v31 = (char *)malloc_type_calloc(1uLL, 0x110uLL, 0x1000040368141FCuLL);
        if (v31)
        {
          unsigned int v32 = v31;
          int v100 = 2143289344;
          uint64_t v99 = 0x7FC000007FC00000;
          int v98 = 0;
          uint64_t v97 = 0;
          double v33 = *(double **)(*(void *)a1 + 8);
          double v35 = *v33;
          double v34 = v33[1];
          vDSP_Length v36 = (unint64_t)*((unsigned int *)a1 + 29) >> 2;
          vDSP_Length v37 = (unint64_t)*((unsigned int *)a1 + 33) >> 2;
          uint64_t __F = 1065353216;
          info[0] = (mach_timebase_info)0x3F80000000000000;
          vDSP_desamp(*((const float **)a1 + 12), 2, (const float *)&__F, *((float **)a1 + 17), v37, 2uLL);
          vDSP_desamp(*((const float **)a1 + 12), 2, (const float *)info, *((float **)a1 + 15), v36, 2uLL);
          unint64_t v38 = *((unsigned int *)a1 + 19);
          float v39 = meanFilter(*((const float **)a1 + 15), v36);
          float v40 = meanFilter(*((const float **)a1 + 17), v37);
          if (a1[8])
          {
            float v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              float v41 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v41;
            }
            unint64_t v42 = v38 >> 3;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              int v43 = *((_DWORD *)a1 + 19);
              *(_DWORD *)int buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v42;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v43;
              _os_log_impl(&dword_24680F000, v41, OS_LOG_TYPE_DEFAULT, "skip buffer size in (float)%d, acc size %d\n\n", buf, 0xEu);
            }
            float v39 = meanFilter((const float *)(*((void *)a1 + 15) + 4 * v42), v36 - v42);
            float v44 = meanFilter((const float *)(*((void *)a1 + 17) + 4 * v42), v37 - v42);
            a1[8] = 0;
            *((_DWORD *)a1 + 135) = 0;
          }
          else
          {
            float v44 = v40;
            *((_DWORD *)a1 + 135) ^= 1u;
          }
          uint64_t v45 = *((void *)a1 + 52);
          *(void *)(v45 + 708) = 0x3EE666663E99999ALL;
          switch(v94)
          {
            case 0u:
              float v46 = *(float *)(v45 + 748) * 0.00000011921;
              float v47 = *(float *)(v45 + 744);
              goto LABEL_46;
            case 1u:
              float v46 = *(float *)(v45 + 756) * 0.00000011921;
              float v47 = *(float *)(v45 + 752);
              goto LABEL_46;
            case 2u:
            case 4u:
            case 5u:
            case 6u:
              goto LABEL_42;
            case 3u:
              float v46 = *(float *)(v45 + 764) * 0.00000011921;
              float v47 = *(float *)(v45 + 760);
              goto LABEL_46;
            case 7u:
              float v46 = *(float *)(v45 + 772) * 0.00000011921;
              float v47 = *(float *)(v45 + 768);
              goto LABEL_46;
            default:
              if (v94 == 15)
              {
                float v46 = *(float *)(v45 + 780) * 0.00000011921;
                float v47 = *(float *)(v45 + 776);
LABEL_46:
                *(float *)(v45 + 24) = v46;
                *(float *)(v45 + 28) = v47 * 0.00000011921;
              }
              else
              {
LABEL_42:
                float v46 = *(float *)(v45 + 24);
              }
              if (v46 < -0.6446 || v46 > -0.6138)
              {
                *(_DWORD *)(v45 + 24) = -1088351424;
                float v46 = -0.6292;
              }
              float v48 = *(float *)(v45 + 28);
              if (v48 < -0.6437 || v48 > -0.6051)
              {
                *(_DWORD *)(v45 + 28) = -1088431954;
                float v48 = -0.6244;
              }
              float v49 = v39 - v46;
              float v50 = v44 - v48;
              BOOL v51 = (float)(v44 - v48) > 0.0193;
              if ((float)(v39 - v46) <= 0.0154) {
                BOOL v51 = 0;
              }
              BOOL v52 = v49 > v50 && v51;
              float v53 = (FILE *)*((void *)a1 + 34);
              if (v53)
              {
                fwrite(*((const void **)a1 + 17), 1uLL, *((unsigned int *)a1 + 33), v53);
                fflush(*((FILE **)a1 + 34));
              }
              float v54 = (FILE *)*((void *)a1 + 33);
              if (v54)
              {
                fwrite(*((const void **)a1 + 15), 1uLL, *((unsigned int *)a1 + 29), v54);
                fflush(*((FILE **)a1 + 33));
              }
              memcpy(*((void **)a1 + 19), *((const void **)a1 + 15), *((unsigned int *)a1 + 37));
              memcpy(*((void **)a1 + 21), *((const void **)a1 + 17), *((unsigned int *)a1 + 37));
              int v55 = flicker_data_processing(*((void *)a1 + 52), (OpaqueFFTSetup **)a1 + 30, *((const float **)a1 + 19), *((const float **)a1 + 21), (uint64_t)&__F, *((float *)a1 + 102));
              uint64_t v56 = *((void *)a1 + 52);
              if (*(unsigned char *)(v56 + 1))
              {
                if (*((float *)a1 + 102) != 8.0) {
                  *(unsigned char *)(v56 + 828) = 0;
                }
                if (*((_DWORD *)a1 + 135) == 1) {
                  peridotDetectC(*((float **)a1 + 19), *((void *)a1 + 21), *((_DWORD *)a1 + 37) >> 2, 0xFA0u, *(float **)(v56 + 816), *(_DWORD *)(v56 + 824), (uint64_t)buf);
                }
              }
              else
              {
                *(unsigned char *)(v56 + 828) = 0;
              }
              mach_timebase_info(info);
              if (info[0].denom) {
                uint64_t v57 = info[0].numer / info[0].denom;
              }
              else {
                uint64_t v57 = 1;
              }
              *(void *)&v105[1] = v57 * inTimeStamp->mHostTime;
              long long v58 = v104;
              *(_OWORD *)(v32 + 204) = v103;
              *(_OWORD *)(v32 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v58;
              *(_OWORD *)(v32 + 236) = v105[0];
              long long v59 = v102;
              *(_OWORD *)(v32 + 172) = *(_OWORD *)buf;
              *(_OWORD *)(v32 + 188) = v59;
              *(_OWORD *)(v32 + 25pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)((char *)v105 + 14);
              int v60 = HIDWORD(__F);
              BOOL v61 = 1;
              if ((float)(*((float *)&__F + 1) * 0.5) >= 59.0 && (float)(*((float *)&__F + 1) * 0.5) <= 61.0) {
                BOOL v61 = v107 < 0.95;
              }
              BOOL v62 = v108 <= 13.66;
              if (v111 < 0.66) {
                BOOL v62 = 0;
              }
              *((_DWORD *)v32 + 67) = v62 && v61;
              uint64_t v99 = 1119092736;
              int v100 = 0;
              float v63 = 0.0;
              if (!v55)
              {
                LODWORD(v99) = v60;
                int v100 = v109;
                float v63 = v107 * 65535.0;
              }
              float v93 = v63;
              double v64 = (float)(v50 / v49);
              vDSP_Length v65 = (unint64_t)*((unsigned int *)a1 + 45) >> 2;
              *(_OWORD *)&info[0].numer = xmmword_2469DACD0;
              vDSP_desamp(*((const float **)a1 + 15), (uint64_t)(v35 / v34), (const float *)info, *((float **)a1 + 23), v65, (uint64_t)(v35 / v34));
              float v66 = v34;
              waveMatching(*((float32x4_t **)a1 + 23), v65, v66, (float *)&v99, (float *)&v97, 3u);
              int v67 = v110;
              *(_DWORD *)unsigned int v32 = v110;
              float v68 = *(float *)(*((void *)a1 + 28)
                             + 4
                             * ((*(_DWORD *)(*((void *)a1 + 28) + 8) + **((_DWORD **)a1 + 28) - 1)
                              % **((_DWORD **)a1 + 28))
                             + 140);
              *(float *)&uint64_t v97 = v68;
              int v69 = v67;
              if (v67 != 3)
              {
                if (v67 == 1)
                {
                  if (v68 > 0.4) {
                    int v69 = 1;
                  }
                  else {
                    int v69 = 2;
                  }
                }
                else
                {
                  int v69 = 2;
                }
              }
              uint64_t v70 = 0;
              if (v52) {
                double v71 = v64;
              }
              else {
                double v71 = 0.0;
              }
              *((double *)v32 + 1) = *((float *)&__F + 1) * 0.5;
              *((double *)v32 + 2) = v71;
              float v72 = v108;
              *((float *)v32 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v108;
              float v73 = v111;
              *((float *)v32 + 23) = v111;
              *(float64x2_t *)(v32 + 24) = vcvtq_f64_f32(vminnm_f32((float32x2_t)__PAIR64__(v100, LODWORD(v93)), (float32x2_t)vdup_n_s32(0x477FFF00u)));
              float v74 = fminf(*((float *)&v97 + 1), 65535.0);
              *((double *)v32 + 5) = fminf(v68, 65535.0);
              *((double *)v32 + 6) = v74;
              *((_DWORD *)v32 + 1) = v69;
              *((_DWORD *)v32 + 27) = 2;
              *((double *)v32 + 7) = v39;
              *((double *)v32 + 8) = v44;
              *((double *)v32 + 9) = v71;
              uint64_t v75 = *((void *)a1 + 37);
              char v76 = 1;
              do
              {
                char v77 = v76;
                float v78 = &v32[8 * v70];
                float v79 = (void *)(v75 + 8 * v70);
                v79[1] = *((void *)v78 + 1);
                v79[3] = *((void *)v78 + 3);
                v79[5] = *((void *)v78 + 5);
                uint64_t v70 = 1;
                char v76 = 0;
              }
              while ((v77 & 1) != 0);
              *(void *)(v75 + 56) = *((void *)v32 + 7);
              *(void *)(v75 + 64) = *((void *)v32 + 8);
              *(_DWORD *)uint64_t v75 = v67;
              *(_DWORD *)(v75 + 4) = v69;
              *(void *)(v75 + 72) = *((void *)v32 + 9);
              *(float *)(v75 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v72;
              *(float *)(v75 + 92) = v73;
              uint64_t v80 = mach_absolute_time();
              uint64_t v81 = *((void *)a1 + 37);
              *(void *)(v81 + 96) = v80;
              long long v82 = *(_OWORD *)(v32 + 116);
              long long v83 = *(_OWORD *)(v32 + 132);
              long long v84 = *(_OWORD *)(v32 + 148);
              *(void *)(v81 + 164) = *(void *)(v32 + 164);
              *(_OWORD *)(v81 + 148) = v84;
              *(_OWORD *)(v81 + 132) = v83;
              *(_OWORD *)(v81 + 116) = v82;
              uint64_t v85 = *((void *)a1 + 37);
              long long v86 = *(_OWORD *)(v32 + 188);
              *(_OWORD *)(v85 + 172) = *(_OWORD *)(v32 + 172);
              *(_OWORD *)(v85 + 188) = v86;
              long long v87 = *(_OWORD *)(v32 + 204);
              long long v88 = *(_OWORD *)(v32 + 220);
              long long v89 = *(_OWORD *)(v32 + 236);
              *(_OWORD *)(v85 + 25pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v32 + 250);
              *(_OWORD *)(v85 + 236) = v89;
              *(_OWORD *)(v85 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v88;
              *(_OWORD *)(v85 + 204) = v87;
              long long v90 = (void (*)(char *, void, char *))*((void *)a1 + 39);
              if (v90) {
                v90(a1, *((void *)a1 + 40), v32);
              }
              else {
                free(v32);
              }
              break;
          }
        }
        *uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    long long v91 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v91) {
      H16ISPMetrics::StopTimer(v91);
    }
  }
  else
  {
    int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v18 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      inputCallbackForGrimaldi_iPad(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    return 0xFFFFFFFFLL;
  }
  return v17;
}

uint64_t inputCallbackForGrimaldiHighFreq(char *a1, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, unsigned int a4, UInt32 inNumberFrames, AudioBufferList *a6)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  if (a1)
  {
    __int16 v10 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v10) {
      H16ISPMetrics::StartTimer(v10);
    }
    uint64_t v11 = *((void *)a1 + 10);
    if (v11)
    {
      uint64_t v13 = a1 + 104;
      uint64_t v12 = *((void *)a1 + 13);
      uint64_t v14 = *((_DWORD *)a1 + 12) * inNumberFrames;
      ioData.mBuffers[0].mData = (void *)(v11 + v12);
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mDataByteSize = v14;
      if (v12 + v14 <= (unint64_t)*((unsigned int *)a1 + 19))
      {
        uint64_t v17 = AudioUnitRender(*((AudioUnit *)a1 + 2), ioActionFlags, inTimeStamp, 1u, inNumberFrames, &ioData);
        if (v17)
        {
          uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            uint64_t v26 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v26;
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            inputCallbackForGrimaldiHighFreq();
          }
        }
        unsigned int v27 = (FILE *)*((void *)a1 + 31);
        if (v27)
        {
          fwrite(ioData.mBuffers[0].mData, 1uLL, ioData.mBuffers[0].mDataByteSize, v27);
          fflush(*((FILE **)a1 + 31));
        }
        uint64_t v16 = *v13 + ioData.mBuffers[0].mDataByteSize;
      }
      else
      {
        double v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          double v15 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          inputCallbackForGrimaldiHighFreq();
        }
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      *((void *)a1 + 13) = v16;
      if (v16 == *((_DWORD *)a1 + 19))
      {
        unsigned __int8 __ptr = 0;
        a1[536] = 0;
        size_t v28 = (AppleH16PhotonDetectorServicesAssistant *)*((void *)a1 + 68);
        if (v28) {
          AppleH16PhotonDetectorServicesAssistant::GetGainInfo(v28, &__ptr, (unsigned __int8 *)a1 + 536);
        }
        int v29 = (FILE *)*((void *)a1 + 35);
        if (v29)
        {
          fwrite(&__ptr, 1uLL, 1uLL, v29);
          fflush(*((FILE **)a1 + 35));
        }
        if (a1[536] && !a1[8])
        {
          *((void *)a1 + 13) = 0;
          *(unsigned char *)(*((void *)a1 + 52) + 828) = 0;
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 424));
          uint64_t v49 = mach_absolute_time();
          uint64_t v50 = *((void *)a1 + 37);
          *(void *)(v50 + 96) = v49;
          LOBYTE(v51) = __ptr;
          *(float *)(v50 + 88) = (float)v51;
          *(_DWORD *)(v50 + 84) = 0;
          *(unsigned char *)(v50 + 112) = 1;
          pthread_cond_broadcast((pthread_cond_t *)(a1 + 488));
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 424));
          return 0;
        }
        memcpy(*((void **)a1 + 12), (const void *)(*((void *)a1 + 12) + *((unsigned int *)a1 + 19)), *((unsigned int *)a1 + 19));
        memcpy((void *)(*((void *)a1 + 12) + *((unsigned int *)a1 + 19)), *((const void **)a1 + 10), *((unsigned int *)a1 + 19));
        unsigned int v30 = (FILE *)*((void *)a1 + 32);
        if (v30)
        {
          fwrite(*((const void **)a1 + 12), 1uLL, *((unsigned int *)a1 + 23), v30);
          fflush(*((FILE **)a1 + 32));
        }
        long long v31 = (float *)malloc_type_calloc(1uLL, 0x110uLL, 0x1000040368141FCuLL);
        if (v31)
        {
          double v33 = v31;
          LOBYTE(v32) = __ptr;
          v31[22] = (float)v32;
          int v117 = 2143289344;
          uint64_t v116 = 0x7FC000007FC00000;
          int v115 = 0;
          uint64_t v114 = 0;
          double v34 = *(double **)(*(void *)a1 + 8);
          double v36 = *v34;
          double v35 = v34[1];
          double v37 = v34[2];
          vDSP_Length v38 = (unint64_t)*((unsigned int *)a1 + 29) >> 2;
          vDSP_Length v39 = (unint64_t)*((unsigned int *)a1 + 33) >> 2;
          uint64_t __F = 1065353216;
          info[0] = (mach_timebase_info)0x3F80000000000000;
          vDSP_desamp(*((const float **)a1 + 12), 2, (const float *)&__F, *((float **)a1 + 17), v39, 2uLL);
          vDSP_desamp(*((const float **)a1 + 12), 2, (const float *)info, *((float **)a1 + 15), v38, 2uLL);
          unint64_t v40 = (unint64_t)*((unsigned int *)a1 + 19) >> 3;
          float v41 = meanFilter(*((const float **)a1 + 15), v38);
          float v42 = meanFilter(*((const float **)a1 + 17), v39);
          vDSP_Length v43 = v38 - v40;
          vDSP_Length v44 = v39 - v40;
          float v45 = meanFilter((const float *)(*((void *)a1 + 15) + 4 * v40 + 4 * (v43 - 3 * v43 / 5)), 3 * v43 / 5);
          float v46 = meanFilter((const float *)(*((void *)a1 + 17) + 4 * v40 + 4 * (v44 - 3 * v44 / 5)), 3 * v44 / 5);
          if (a1[8])
          {
            float v47 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              float v47 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v47;
            }
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              int v48 = *((_DWORD *)a1 + 19);
              *(_DWORD *)int buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v40;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v48;
              _os_log_impl(&dword_24680F000, v47, OS_LOG_TYPE_DEFAULT, "skip buffer size in (float)%d, acc size %d\n\n", buf, 0xEu);
            }
            float v41 = meanFilter((const float *)(*((void *)a1 + 15) + 4 * v40), v43);
            float v42 = meanFilter((const float *)(*((void *)a1 + 17) + 4 * v40), v44);
            a1[8] = 0;
            *((_DWORD *)a1 + 135) = 0;
          }
          else
          {
            *((_DWORD *)a1 + 135) ^= 1u;
          }
          uint64_t v52 = *((void *)a1 + 52);
          *(void *)(v52 + 708) = 0x3EE666663E99999ALL;
          double v107 = v35;
          switch(__ptr)
          {
            case 0u:
              float32x2_t v53 = *(float32x2_t *)(v52 + 744);
              goto LABEL_54;
            case 1u:
              float32x2_t v53 = *(float32x2_t *)(v52 + 752);
              goto LABEL_54;
            case 2u:
            case 4u:
            case 5u:
            case 6u:
              goto LABEL_47;
            case 3u:
              float32x2_t v53 = *(float32x2_t *)(v52 + 760);
              goto LABEL_54;
            case 7u:
              float32x2_t v53 = *(float32x2_t *)(v52 + 768);
              goto LABEL_54;
            default:
              if (__ptr == 15)
              {
                float32x2_t v53 = *(float32x2_t *)(v52 + 776);
LABEL_54:
                *(int32x2_t *)(v52 + 24) = vrev64_s32((int32x2_t)vmul_f32(v53, (float32x2_t)0x3400000034000000));
              }
              else
              {
LABEL_47:
                float v54 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
                {
                  float v54 = os_log_create("com.apple.isp", "general");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v54;
                }
                if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)int buf = 136315394;
                  *(void *)&uint8_t buf[4] = "inputCallbackForGrimaldiHighFreq";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = __ptr;
                  _os_log_impl(&dword_24680F000, v54, OS_LOG_TYPE_INFO, "%s - Unexpected gain value %d\n", buf, 0x12u);
                }
              }
              uint64_t v55 = *((void *)a1 + 52);
              float v56 = v41 - *(float *)(v55 + 24);
              float v57 = v42 - *(float *)(v55 + 28);
              BOOL v58 = v57 > 0.01;
              if (v56 <= 0.01) {
                BOOL v58 = 0;
              }
              BOOL v59 = v56 > v57 && v58;
              int v60 = (FILE *)*((void *)a1 + 34);
              if (v60)
              {
                fwrite(*((const void **)a1 + 17), 1uLL, *((unsigned int *)a1 + 33), v60);
                fflush(*((FILE **)a1 + 34));
              }
              BOOL v61 = (FILE *)*((void *)a1 + 33);
              if (v61)
              {
                fwrite(*((const void **)a1 + 15), 1uLL, *((unsigned int *)a1 + 29), v61);
                fflush(*((FILE **)a1 + 33));
              }
              float v110 = 0.0;
              uint64_t v109 = 0;
              float v108 = 0.0;
              if (v36 == v37)
              {
                memcpy(*((void **)a1 + 19), *((const void **)a1 + 15), *((unsigned int *)a1 + 37));
                memcpy(*((void **)a1 + 21), *((const void **)a1 + 17), *((unsigned int *)a1 + 37));
              }
              else
              {
                vDSP_Length v62 = (unint64_t)*((unsigned int *)a1 + 37) >> 2;
                uint64_t v63 = (uint64_t)(v36 / v37);
                if (v63 >= 16) {
                  uint64_t v64 = 16;
                }
                else {
                  uint64_t v64 = (uint64_t)(v36 / v37);
                }
                if (v63 >= 1)
                {
                  if (v64 <= 1) {
                    uint64_t v65 = 1;
                  }
                  else {
                    uint64_t v65 = v64;
                  }
                  float v66 = (float *)buf;
                  do
                  {
                    *v66++ = 1.0 / (float)v64;
                    --v65;
                  }
                  while (v65);
                }
                vDSP_desamp(*((const float **)a1 + 15), v64, (const float *)buf, *((float **)a1 + 19), v62, v64);
                vDSP_desamp(*((const float **)a1 + 17), v64, (const float *)buf, *((float **)a1 + 21), v62, v64);
              }
              getGainAndOffset(*((void *)a1 + 52) + 716, __ptr, &v110, (float *)&v109 + 1, &v109, &v108);
              float lux = fun_get_lux((float *)(*((void *)a1 + 52) + 716), 1, v45, v46, v110, *((float *)&v109 + 1), *(float *)&v109, v108);
              if (lux < 0.0) {
                float lux = 0.0;
              }
              v33[21] = lux;
              int v68 = flicker_data_processing(*((void *)a1 + 52), (OpaqueFFTSetup **)a1 + 30, *((const float **)a1 + 19), *((const float **)a1 + 21), (uint64_t)&__F, *((float *)a1 + 102));
              uint64_t v69 = *((void *)a1 + 52);
              if (*(unsigned char *)(v69 + 1))
              {
                if (*((float *)a1 + 102) != 8.0) {
                  *(unsigned char *)(v69 + 828) = 0;
                }
                if (*((_DWORD *)a1 + 135) == 1) {
                  peridotDetectC(*((float **)a1 + 19), *((void *)a1 + 21), *((_DWORD *)a1 + 37) >> 2, 0xFA0u, *(float **)(v69 + 816), *(_DWORD *)(v69 + 824), (uint64_t)buf);
                }
              }
              else
              {
                *(unsigned char *)(v69 + 828) = 0;
              }
              mach_timebase_info(info);
              if (info[0].denom) {
                uint64_t v70 = info[0].numer / info[0].denom;
              }
              else {
                uint64_t v70 = 1;
              }
              *(void *)&v121[1] = v70 * inTimeStamp->mHostTime;
              *(_OWORD *)(v33 + 51) = v119;
              long long v71 = v121[0];
              *(_OWORD *)(v33 + 55) = v120;
              *(_OWORD *)(v33 + 59) = v71;
              long long v72 = *(_OWORD *)&buf[16];
              *(_OWORD *)(v33 + 43) = *(_OWORD *)buf;
              *(_OWORD *)(v33 + 47) = v72;
              *(_OWORD *)((char *)v33 + 25pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)((char *)v121 + 14);
              int v73 = HIDWORD(__F);
              BOOL v74 = 1;
              if ((float)(*((float *)&__F + 1) * 0.5) >= 59.0 && (float)(*((float *)&__F + 1) * 0.5) <= 61.0) {
                BOOL v74 = v123 < 0.95;
              }
              BOOL v75 = v124 <= 13.66;
              if (v127 < 0.66) {
                BOOL v75 = 0;
              }
              *((_DWORD *)v33 + 67) = v75 && v74;
              uint64_t v116 = 1119092736;
              int v117 = 0;
              float v76 = 0.0;
              if (!v68)
              {
                LODWORD(v116) = v73;
                int v117 = v125;
                float v76 = v123 * 65535.0;
              }
              float v106 = v76;
              vDSP_Length v77 = (unint64_t)*((unsigned int *)a1 + 45) >> 2;
              *(_OWORD *)&info[0].numer = xmmword_2469DACD0;
              vDSP_desamp(*((const float **)a1 + 15), (uint64_t)(v36 / v107), (const float *)info, *((float **)a1 + 23), v77, (uint64_t)(v36 / v107));
              float v78 = v107;
              waveMatching(*((float32x4_t **)a1 + 23), v77, v78, (float *)&v116, (float *)&v114, 3u);
              int v79 = v126;
              *(_DWORD *)double v33 = v126;
              float v80 = *(float *)(*((void *)a1 + 28)
                             + 4
                             * ((*(_DWORD *)(*((void *)a1 + 28) + 8) + **((_DWORD **)a1 + 28) - 1)
                              % **((_DWORD **)a1 + 28))
                             + 140);
              *(float *)&uint64_t v114 = v80;
              int v81 = v79;
              if (v79 != 3)
              {
                if (v79 == 1)
                {
                  if (v80 > 0.4) {
                    int v81 = 1;
                  }
                  else {
                    int v81 = 2;
                  }
                }
                else
                {
                  int v81 = 2;
                }
              }
              uint64_t v82 = 0;
              if (v59) {
                double v83 = (float)(v57 / v56);
              }
              else {
                double v83 = 0.0;
              }
              *((double *)v33 + 1) = *((float *)&__F + 1) * 0.5;
              *((double *)v33 + 2) = v83;
              float v84 = v124;
              float v85 = v127;
              v33[20] = v124;
              v33[23] = v85;
              *(float64x2_t *)(v33 + 6) = vcvtq_f64_f32(vminnm_f32((float32x2_t)__PAIR64__(v117, LODWORD(v106)), (float32x2_t)vdup_n_s32(0x477FFF00u)));
              float v86 = fminf(*((float *)&v114 + 1), 65535.0);
              *((double *)v33 + 5) = fminf(v80, 65535.0);
              *((double *)v33 + 6) = v86;
              *((_DWORD *)v33 + 1) = v81;
              *((void *)v33 + 13) = 0x200000001;
              *((double *)v33 + 7) = v41;
              *((double *)v33 + 8) = v42;
              *((double *)v33 + 9) = v83;
              uint64_t v87 = *((void *)a1 + 37);
              char v88 = 1;
              do
              {
                char v89 = v88;
                long long v90 = (char *)&v33[2 * v82];
                long long v91 = (void *)(v87 + 8 * v82);
                v91[1] = *((void *)v90 + 1);
                v91[3] = *((void *)v90 + 3);
                v91[5] = *((void *)v90 + 5);
                uint64_t v82 = 1;
                char v88 = 0;
              }
              while ((v89 & 1) != 0);
              *(void *)(v87 + 56) = *((void *)v33 + 7);
              *(void *)(v87 + 64) = *((void *)v33 + 8);
              *(_DWORD *)uint64_t v87 = v79;
              *(_DWORD *)(v87 + 4) = v81;
              *(void *)(v87 + 72) = *((void *)v33 + 9);
              *(float *)(v87 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v84;
              *(float *)(v87 + 92) = v85;
              *(_DWORD *)(v87 + 104) = 1;
              pthread_mutex_lock((pthread_mutex_t *)(a1 + 424));
              *(float *)(*((void *)a1 + 37) + 84) = v33[21];
              uint64_t v92 = mach_absolute_time();
              uint64_t v93 = *((void *)a1 + 37);
              *(void *)(v93 + 96) = v92;
              *(float *)(v93 + 88) = v33[22];
              *(unsigned char *)(v93 + 112) = a1[536];
              pthread_cond_broadcast((pthread_cond_t *)(a1 + 488));
              pthread_mutex_unlock((pthread_mutex_t *)(a1 + 424));
              uint64_t v94 = *((void *)a1 + 37);
              uint64_t v95 = *(void *)(v33 + 41);
              long long v96 = *(_OWORD *)(v33 + 37);
              long long v97 = *(_OWORD *)(v33 + 33);
              *(_OWORD *)(v94 + 116) = *(_OWORD *)(v33 + 29);
              *(_OWORD *)(v94 + 132) = v97;
              *(_OWORD *)(v94 + 148) = v96;
              *(void *)(v94 + 164) = v95;
              uint64_t v98 = *((void *)a1 + 37);
              long long v100 = *(_OWORD *)(v33 + 55);
              long long v99 = *(_OWORD *)(v33 + 59);
              long long v101 = *(_OWORD *)(v33 + 51);
              *(_OWORD *)(v98 + 25pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)((char *)v33 + 250);
              *(_OWORD *)(v98 + 204) = v101;
              *(_OWORD *)(v98 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v100;
              *(_OWORD *)(v98 + 236) = v99;
              long long v102 = *(_OWORD *)(v33 + 47);
              *(_OWORD *)(v98 + 172) = *(_OWORD *)(v33 + 43);
              *(_OWORD *)(v98 + 188) = v102;
              long long v103 = (void (*)(void, void, void))*((void *)a1 + 39);
              if (v103) {
                v103(a1, *((void *)a1 + 40), v33);
              }
              else {
                free(v33);
              }
              break;
          }
        }
        *uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    long long v104 = (H16ISPMetrics *)*((void *)a1 + 36);
    if (v104) {
      H16ISPMetrics::StopTimer(v104);
    }
  }
  else
  {
    int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v18 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      inputCallbackForGrimaldiHighFreq(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    return 0xFFFFFFFFLL;
  }
  return v17;
}

void OUTLINED_FUNCTION_3_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_11_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_12_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t H16ISP::H16ISPServicesRemote::sendMessageAsync(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = *(_xpc_connection_s **)a1;
  uint64_t v4 = *(NSObject **)(a1 + 8);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  unsigned int v6[2] = ___ZN6H16ISP20H16ISPServicesRemote16sendMessageAsyncEPv28H16ISPServicesRemoteProperty_block_invoke;
  void v6[3] = &__block_descriptor_tmp_5;
  _OWORD v6[4] = a1;
  int v7 = a3;
  xpc_connection_send_message_with_reply(v3, a2, v4, v6);
  return 0;
}

void ___ZN6H16ISP20H16ISPServicesRemote7ConnectEPFv25H16ISPServicesRemoteEventPvES2_b_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v4 = (xpc_connection_t *)a1[4];
  if (MEMORY[0x24C53EF40](a2) == MEMORY[0x263EF8720])
  {
    uint64_t v5 = MEMORY[0x24C53EE30](a2);
    if (v5)
    {
      unsigned int v6 = (void *)v5;
      int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
      {
        int v7 = os_log_create("com.apple.isp", "services");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v7;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        ___ZN6H16ISP20H16ISPServicesRemote7ConnectEPFv25H16ISPServicesRemoteEventPvES2_b_block_invoke_cold_1((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13);
      }
      free(v6);
    }
    if (a2 == MEMORY[0x263EF86A8])
    {
      uint64_t v14 = (void (*)(uint64_t, void))a1[5];
      if (v14) {
        v14(1, a1[6]);
      }
    }
    else
    {
      xpc_connection_cancel(*v4);
    }
  }
}

uint64_t H16ISP::H16ISPServicesRemote::VerifyConnection(H16ISP::H16ISPServicesRemote *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  v4[1647] = *(xpc_object_t *)MEMORY[0x263EF8340];
  bzero(v4, 0x3378uLL);
  LODWORD(v4[0]) = 1;
  return H16ISP::H16ISPServicesRemote::SetProperty(v2, v4);
}

uint64_t H16ISP::H16ISPServicesRemote::Disconnect(xpc_connection_t *this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    xpc_connection_set_event_handler(v2, &__block_literal_global_4);
    xpc_connection_cancel(*this);
    xpc_release(*this);
    *this = 0;
  }
  return 0;
}

void H16ISP::H16ISPServicesRemote::~H16ISPServicesRemote(H16ISP::H16ISPServicesRemote *this)
{
  uint64_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
  {
    uint64_t v2 = os_log_create("com.apple.isp", "services");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v2;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_24680F000, v2, OS_LOG_TYPE_DEFAULT, "Destroying remote service object\n", v3, 2u);
  }
  H16ISP::H16ISPServicesRemote::Disconnect((xpc_connection_t *)this);
  dispatch_sync(*((dispatch_queue_t *)this + 1), &__block_literal_global_28);
  dispatch_release(*((dispatch_object_t *)this + 1));
}

uint64_t H16ISP::H16ISPServicesRemote::RunRgbIr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, __int16 a10, unsigned __int8 a11, __int16 a12, __int16 a13, __int16 a14, unsigned __int8 a15, unsigned __int8 a16, int a17)
{
  uint64_t v17 = MEMORY[0x270FA5388](a1, a2);
  CFStringRef v19 = v18;
  CFStringRef v21 = v20;
  CFStringRef v23 = v22;
  uint64_t v25 = v24;
  unsigned int v27 = v26;
  uint64_t v28 = v17;
  uint64_t v54 = *MEMORY[0x263EF8340];
  LODWORD(v39) = 17;
  xpc_object_t XPCObject = 0;
  __int16 v48 = a10;
  __int16 v46 = v29;
  __int16 v47 = a9;
  __int16 v49 = a11;
  __int16 v50 = a13;
  __int16 v51 = a15;
  __int16 v52 = a16;
  int v53 = a17;
  IOSurface = CVPixelBufferGetIOSurface(v30);
  xpc_object_t object = IOSurfaceCreateXPCObject(IOSurface);
  if (v27)
  {
    unsigned int v32 = CVPixelBufferGetIOSurface(v27);
    xpc_object_t XPCObject = IOSurfaceCreateXPCObject(v32);
  }
  double v33 = CVPixelBufferGetIOSurface(v25);
  xpc_object_t v42 = IOSurfaceCreateXPCObject(v33);
  xpc_object_t XpcFromType = H16ISP::createXpcFromType(v23, v34);
  xpc_object_t v44 = H16ISP::createXpcFromType(v21, v35);
  xpc_object_t v45 = H16ISP::createXpcFromType(v19, v36);
  uint64_t v37 = H16ISP::H16ISPServicesRemote::SetProperty(v28, &v39);
  xpc_release(object);
  if (v27) {
    xpc_release(XPCObject);
  }
  xpc_release(v42);
  xpc_release(XpcFromType);
  xpc_release(v44);
  xpc_release(v45);
  return v37;
}

uint64_t H16ISP::H16ISPServicesRemote::GetRgbIrReport(xpc_connection_t *this, __CFDictionary **a2)
{
  LODWORD(v6) = 18;
  uint64_t Property = H16ISP::H16ISPServicesRemote::GetProperty(this, &v6);
  if (!Property)
  {
    if (object)
    {
      *a2 = H16ISP::createTypeFromXpc((H16ISP *)object, v3);
      xpc_release(object);
    }
    else
    {
      *a2 = 0;
    }
  }
  return Property;
}

uint64_t H16ISP::H16ISPServicesRemote::UpdateRgbIrPceCalib(xpc_connection_t *a1, UInt8 *a2)
{
  LODWORD(v12[0]) = 19;
  CFStringRef v4 = (const __CFString *)CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, 13168);
  xpc_object_t XpcFromType = H16ISP::createXpcFromType(v4, v5);
  v12[1] = XpcFromType;
  CFRelease(v4);
  uint64_t Property = H16ISP::H16ISPServicesRemote::GetProperty(a1, v12);
  if (!Property && object)
  {
    CFDataRef TypeFromXpc = H16ISP::createTypeFromXpc((H16ISP *)object, v7);
    xpc_release(object);
    BytePtr = CFDataGetBytePtr(TypeFromXpc);
    memcpy(a2, BytePtr, 0x3370uLL);
    CFRelease(TypeFromXpc);
  }
  xpc_release(XpcFromType);
  return Property;
}

uint64_t H16ISP::H16ISPServicesRemote::SaveJasperCalibData(H16ISP::H16ISPServicesRemote *this, const __CFData *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  v7[1647] = *(xpc_object_t *)MEMORY[0x263EF8340];
  LODWORD(v7[0]) = 7;
  xpc_object_t XpcFromType = H16ISP::createXpcFromType(v3, v3);
  v7[1] = XpcFromType;
  uint64_t v5 = H16ISP::H16ISPServicesRemote::SetProperty(v2, v7);
  xpc_release(XpcFromType);
  return v5;
}

uint64_t H16ISP::H16ISPServicesRemote::WriteDictionary(H16ISP::H16ISPServicesRemote *this, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](this, a2);
  CFStringRef v5 = v4;
  uint64_t v6 = v3;
  v13[1647] = *(xpc_object_t *)MEMORY[0x263EF8340];
  LODWORD(v13[0]) = 9;
  xpc_object_t XpcFromType = H16ISP::createXpcFromType(v7, v7);
  xpc_object_t v10 = H16ISP::createXpcFromType(v5, v9);
  v13[1] = XpcFromType;
  _DWORD v13[2] = v10;
  uint64_t v11 = H16ISP::H16ISPServicesRemote::SetProperty(v6, v13);
  xpc_release(v10);
  xpc_release(XpcFromType);
  return v11;
}

uint64_t H16ISP::H16ISPServicesRemote::WriteData(H16ISP::H16ISPServicesRemote *this, const __CFString *a2, const __CFData *a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](this, a2);
  CFStringRef v5 = v4;
  uint64_t v6 = v3;
  v13[1647] = *(xpc_object_t *)MEMORY[0x263EF8340];
  LODWORD(v13[0]) = 10;
  xpc_object_t XpcFromType = H16ISP::createXpcFromType(v7, v7);
  xpc_object_t v10 = H16ISP::createXpcFromType(v5, v9);
  v13[1] = XpcFromType;
  _DWORD v13[2] = v10;
  uint64_t v11 = H16ISP::H16ISPServicesRemote::SetProperty(v6, v13);
  xpc_release(v10);
  xpc_release(XpcFromType);
  return v11;
}

uint64_t GMC_Undistort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a3 + 528))
  {
    Matrix<double>::Matrix((uint64_t)&v65, 2, *(_DWORD *)(a1 + 20));
    uint64_t v65 = &unk_26FAEC0F0;
    Matrix<double>::Row(a2, 0, (uint64_t)&v60);
    int v70 = 1;
    int v71 = v67;
    LODWORD(v58) = 1;
    HIDWORD(v58) = v67;
    char v59 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    float v56 = &unk_26FAEAF48;
    __dst = v66;
    Matrix<double>::~Matrix((uint64_t)&v68);
    Matrix<double>::Resize((uint64_t)&v56, v62, v63);
    memcpy(__dst, __src, 8 * v58 * (unint64_t)HIDWORD(v58));
    Matrix<double>::~Matrix((uint64_t)&v56);
    Matrix<double>::~Matrix((uint64_t)&v60);
    double v10 = *(double *)(a3 + 24);
    int v70 = 1;
    int v71 = v67;
    int v62 = 1;
    int v63 = v67;
    char v64 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    int v60 = &unk_26FAEAF48;
    __src = v66;
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v68 = v10;
    vDSPVsmul<double>((const double *)__src, 1, &v68, (double *)__src, 1, v63 * v62);
    Matrix<double>::~Matrix((uint64_t)&v60);
    double v11 = *(double *)a3;
    int v70 = 1;
    int v71 = v67;
    int v62 = 1;
    int v63 = v67;
    char v64 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    int v60 = &unk_26FAEAF48;
    __src = v66;
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v68 = -v11;
    vDSPVsadd<double>((const double *)__src, 1, &v68, (double *)__src, 1, v63 * v62);
    Matrix<double>::~Matrix((uint64_t)&v60);
    Matrix<double>::Row(a2, 1, (uint64_t)&v60);
    int v70 = 1;
    int v71 = v67;
    LODWORD(v58) = 1;
    HIDWORD(v58) = v67;
    char v59 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    float v56 = &unk_26FAEAF48;
    __dst = &v66[8 * v67];
    Matrix<double>::~Matrix((uint64_t)&v68);
    Matrix<double>::Resize((uint64_t)&v56, v62, v63);
    memcpy(__dst, __src, 8 * v58 * (unint64_t)HIDWORD(v58));
    Matrix<double>::~Matrix((uint64_t)&v56);
    Matrix<double>::~Matrix((uint64_t)&v60);
    double v12 = *(double *)(a3 + 24);
    int v70 = 1;
    int v71 = v67;
    int v62 = 1;
    int v63 = v67;
    char v64 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    int v60 = &unk_26FAEAF48;
    __src = &v66[8 * v67];
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v68 = v12;
    vDSPVsmul<double>((const double *)__src, 1, &v68, (double *)__src, 1, v63 * v62);
    Matrix<double>::~Matrix((uint64_t)&v60);
    double v13 = *(double *)(a3 + 8);
    int v70 = 1;
    int v71 = v67;
    int v62 = 1;
    int v63 = v67;
    char v64 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    int v60 = &unk_26FAEAF48;
    __src = &v66[8 * v67];
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v68 = -v13;
    vDSPVsadd<double>((const double *)__src, 1, &v68, (double *)__src, 1, v63 * v62);
    Matrix<double>::~Matrix((uint64_t)&v60);
    uint64_t v14 = *(void **)(a5 + 8);
    int v15 = *(_DWORD *)(a5 + 20);
    int v70 = 2;
    int v71 = v15;
    int v62 = 2;
    int v63 = v15;
    char v64 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    int v60 = &unk_26FAEC0F0;
    __src = v14;
    Matrix<double>::~Matrix((uint64_t)&v68);
    uint64_t v58 = 1;
    char v59 = 0;
    float v56 = &unk_26FAEAF48;
    __dst = 0;
    uint64_t v54 = 1;
    char v55 = 0;
    __int16 v52 = &unk_26FAEAF48;
    int v53 = 0;
    if (*(unsigned char *)(a3 + 529))
    {
      Matrix<double>::Row(a3 + 128, 0, (uint64_t)&v68);
      Matrix<double>::Resize((uint64_t)&v56, v70, v71);
      memcpy(__dst, v69, 8 * v58 * (unint64_t)HIDWORD(v58));
      Matrix<double>::~Matrix((uint64_t)&v68);
      Matrix<double>::Row(a3 + 128, 1, (uint64_t)&v68);
    }
    else
    {
      Matrix<double>::Row(a3 + 744, 0, (uint64_t)&v68);
      Matrix<double>::Resize((uint64_t)&v56, v70, v71);
      memcpy(__dst, v69, 8 * v58 * (unint64_t)HIDWORD(v58));
      Matrix<double>::~Matrix((uint64_t)&v68);
      Matrix<double>::Row(a3 + 744, 1, (uint64_t)&v68);
    }
    Matrix<double>::Resize((uint64_t)&v52, v70, v71);
    memcpy(v53, v69, 8 * v54 * (unint64_t)HIDWORD(v54));
    Matrix<double>::~Matrix((uint64_t)&v68);
    DistortRadialLiteInternal<double>((uint64_t)&v65, (uint64_t)v53, (uint64_t)__dst, *(_DWORD *)(a3 + 148), (uint64_t)&v60, 0, 1, 0, 0.0, 0);
    double v27 = *(double *)a3;
    Matrix<double>::Row(a5, 0, (uint64_t)&v68);
    double v47 = v27;
    vDSPVsadd<double>(v69, 1, &v47, v69, 1, v71 * v70);
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v28 = *(double *)(a3 + 24);
    Matrix<double>::Row(a5, 0, (uint64_t)&v68);
    double v47 = v28;
    vDSPVsdiv<double>(v69, 1, &v47, v69, 1, v71 * v70);
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v29 = *(double *)(a3 + 8);
    Matrix<double>::Row(a5, 1, (uint64_t)&v68);
    double v47 = v29;
    vDSPVsadd<double>(v69, 1, &v47, v69, 1, v71 * v70);
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v30 = *(double *)(a3 + 24);
    Matrix<double>::Row(a5, 1, (uint64_t)&v68);
    double v47 = v30;
    vDSPVsdiv<double>(v69, 1, &v47, v69, 1, v71 * v70);
    Matrix<double>::~Matrix((uint64_t)&v68);
    Matrix<double>::Row(a1, 0, (uint64_t)&v47);
    int v70 = 1;
    int v71 = v67;
    unsigned int v44 = 1;
    unsigned int v45 = v67;
    char v46 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    xpc_object_t v42 = &unk_26FAEAF48;
    vDSP_Length v43 = v66;
    Matrix<double>::~Matrix((uint64_t)&v68);
    Matrix<double>::Resize((uint64_t)&v42, v49, v50);
    memcpy(v43, v48, 8 * v44 * (unint64_t)v45);
    Matrix<double>::~Matrix((uint64_t)&v42);
    Matrix<double>::~Matrix((uint64_t)&v47);
    double v31 = *(double *)(a3 + 80);
    int v70 = 1;
    int v71 = v67;
    int v49 = 1;
    int v50 = v67;
    char v51 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    double v47 = COERCE_DOUBLE(&unk_26FAEAF48);
    __int16 v48 = v66;
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v68 = v31;
    vDSPVsmul<double>((const double *)v48, 1, &v68, (double *)v48, 1, v50 * v49);
    Matrix<double>::~Matrix((uint64_t)&v47);
    double v32 = *(double *)(a3 + 56);
    int v70 = 1;
    int v71 = v67;
    int v49 = 1;
    int v50 = v67;
    char v51 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    double v47 = COERCE_DOUBLE(&unk_26FAEAF48);
    __int16 v48 = v66;
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v68 = -v32;
    vDSPVsadd<double>((const double *)v48, 1, &v68, (double *)v48, 1, v50 * v49);
    Matrix<double>::~Matrix((uint64_t)&v47);
    Matrix<double>::Row(a1, 1, (uint64_t)&v47);
    int v70 = 1;
    int v71 = v67;
    unsigned int v44 = 1;
    unsigned int v45 = v67;
    char v46 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    xpc_object_t v42 = &unk_26FAEAF48;
    vDSP_Length v43 = &v66[8 * v67];
    Matrix<double>::~Matrix((uint64_t)&v68);
    Matrix<double>::Resize((uint64_t)&v42, v49, v50);
    memcpy(v43, v48, 8 * v44 * (unint64_t)v45);
    Matrix<double>::~Matrix((uint64_t)&v42);
    Matrix<double>::~Matrix((uint64_t)&v47);
    double v33 = *(double *)(a3 + 80);
    int v70 = 1;
    int v71 = v67;
    int v49 = 1;
    int v50 = v67;
    char v51 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    double v47 = COERCE_DOUBLE(&unk_26FAEAF48);
    __int16 v48 = &v66[8 * v67];
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v68 = v33;
    vDSPVsmul<double>((const double *)v48, 1, &v68, (double *)v48, 1, v50 * v49);
    Matrix<double>::~Matrix((uint64_t)&v47);
    double v34 = *(double *)(a3 + 64);
    int v70 = 1;
    int v71 = v67;
    int v49 = 1;
    int v50 = v67;
    char v51 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEAF18);
    uint64_t v69 = 0;
    char v72 = 0;
    double v47 = COERCE_DOUBLE(&unk_26FAEAF48);
    __int16 v48 = &v66[8 * v67];
    Matrix<double>::~Matrix((uint64_t)&v68);
    double v68 = -v34;
    vDSPVsadd<double>((const double *)v48, 1, &v68, (double *)v48, 1, v50 * v49);
    Matrix<double>::~Matrix((uint64_t)&v47);
    double v35 = *(double **)(a4 + 8);
    int v36 = *(_DWORD *)(a4 + 20);
    int v49 = 2;
    int v50 = v36;
    int v70 = 2;
    int v71 = v36;
    char v72 = 0;
    double v47 = COERCE_DOUBLE(&unk_26FAEAF18);
    __int16 v48 = 0;
    char v51 = 0;
    double v68 = COERCE_DOUBLE(&unk_26FAEC0F0);
    uint64_t v69 = v35;
    Matrix<double>::~Matrix((uint64_t)&v47);
    if (!*(unsigned char *)(a3 + 529))
    {
      Matrix<double>::Row(a3 + 128, 0, (uint64_t)&v47);
      Matrix<double>::Resize((uint64_t)&v56, v49, v50);
      memcpy(__dst, v48, 8 * v58 * (unint64_t)HIDWORD(v58));
      Matrix<double>::~Matrix((uint64_t)&v47);
      Matrix<double>::Row(a3 + 128, 1, (uint64_t)&v47);
      Matrix<double>::Resize((uint64_t)&v52, v49, v50);
      memcpy(v53, v48, 8 * v54 * (unint64_t)HIDWORD(v54));
      Matrix<double>::~Matrix((uint64_t)&v47);
    }
    DistortRadialLiteInternal<double>((uint64_t)&v65, (uint64_t)v53, (uint64_t)__dst, *(_DWORD *)(a3 + 148), (uint64_t)&v68, 0, 1, 0, 0.0, 0);
    uint64_t v37 = *(void **)(a3 + 56);
    Matrix<double>::Row(a4, 0, (uint64_t)&v47);
    xpc_object_t v42 = v37;
    vDSPVsadd<double>((const double *)v48, 1, (const double *)&v42, (double *)v48, 1, v50 * v49);
    Matrix<double>::~Matrix((uint64_t)&v47);
    vDSP_Length v38 = *(void **)(a3 + 80);
    Matrix<double>::Row(a4, 0, (uint64_t)&v47);
    xpc_object_t v42 = v38;
    vDSPVsdiv<double>((const double *)v48, 1, (const double *)&v42, (double *)v48, 1, v50 * v49);
    Matrix<double>::~Matrix((uint64_t)&v47);
    xpc_object_t v39 = *(void **)(a3 + 64);
    Matrix<double>::Row(a4, 1, (uint64_t)&v47);
    xpc_object_t v42 = v39;
    vDSPVsadd<double>((const double *)v48, 1, (const double *)&v42, (double *)v48, 1, v50 * v49);
    Matrix<double>::~Matrix((uint64_t)&v47);
    unint64_t v40 = *(void **)(a3 + 80);
    Matrix<double>::Row(a4, 1, (uint64_t)&v47);
    xpc_object_t v42 = v40;
    vDSPVsdiv<double>((const double *)v48, 1, (const double *)&v42, (double *)v48, 1, v50 * v49);
    Matrix<double>::~Matrix((uint64_t)&v47);
    Matrix<double>::~Matrix((uint64_t)&v68);
    Matrix<double>::~Matrix((uint64_t)&v52);
    Matrix<double>::~Matrix((uint64_t)&v56);
    Matrix<double>::~Matrix((uint64_t)&v60);
    Matrix<double>::~Matrix((uint64_t)&v65);
  }
  else
  {
    uint64_t v16 = *(unsigned int *)(a1 + 20);
    if (v16)
    {
      unsigned int v17 = *(_DWORD *)(a1 + 16);
      if (!v17) {
        GMC_Homography();
      }
      unsigned int v18 = *(_DWORD *)(a4 + 16);
      if (v18)
      {
        uint64_t v19 = 0;
        unint64_t v20 = 0;
        uint64_t v21 = 8 * *(unsigned int *)(a4 + 20);
        unsigned int v22 = *(_DWORD *)(a2 + 16);
        unint64_t v23 = *(unsigned int *)(a2 + 20);
        uint64_t v24 = 8 * v16;
        while (v21 + v19)
        {
          *(void *)(*(void *)(a4 + 8) + 8 * v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(*(void *)(a1 + 8) + 8 * v20);
          if (v17 <= 1) {
            GMC_Homography();
          }
          if (v18 <= 1) {
            GMC_Homography();
          }
          *(void *)(*(void *)(a4 + 8) + v21 + 8 * v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(*(void *)(a1 + 8) + v24 + 8 * v20);
          if (!v22 || v20 >= v23) {
            GMC_Homography();
          }
          unsigned int v25 = *(_DWORD *)(a5 + 16);
          if (!v25 || (unint64_t v26 = *(unsigned int *)(a5 + 20), v20 >= v26)) {
            GMC_Homography();
          }
          *(void *)(*(void *)(a5 + 8) + 8 * v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(*(void *)(a2 + 8) + 8 * v20);
          if (v22 <= 1) {
            GMC_Homography();
          }
          if (v25 <= 1) {
            GMC_Homography();
          }
          *(void *)(*(void *)(a5 + 8) + 8 * v26 + 8 * v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(*(void *)(a2 + 8) + 8 * v23 + 8 * v20);
          ++v20;
          v19 -= 8;
          if (!(v24 + v19)) {
            return 0;
          }
        }
      }
      GMC_Homography();
    }
  }
  return 0;
}

void sub_2469015C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  Matrix<double>::~Matrix((uint64_t)&a15);
  Matrix<double>::~Matrix(v27 - 128);
  Matrix<double>::~Matrix((uint64_t)&a19);
  Matrix<double>::~Matrix((uint64_t)&a23);
  Matrix<double>::~Matrix((uint64_t)&a27);
  Matrix<double>::~Matrix(v27 - 160);
  _Unwind_Resume(a1);
}

void sub_2469016AC()
{
}

uint64_t Matrix<double>::Row@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 8) + 8 * (v3 * a2);
  v6[0] = &unk_26FAEAF18;
  v6[1] = v4;
  int v7 = 1;
  int v8 = v3;
  char v9 = 0;
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)a3 = &unk_26FAEAF48;
  *(void *)(a3 + 8) = v4;
  return Matrix<double>::~Matrix((uint64_t)v6);
}

{
  int v3;
  uint64_t v4;
  void v6[2];
  int v7;
  int v8;
  char v9;

  int v3 = *(_DWORD *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 8) + 8 * (v3 * a2);
  int v7 = 1;
  int v8 = v3;
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(unsigned char *)(a3 + 24) = 0;
  v6[0] = &unk_26FAEAF18;
  v6[1] = 0;
  char v9 = 0;
  *(void *)a3 = &unk_26FAEAF48;
  *(void *)(a3 + 8) = v4;
  return Matrix<double>::~Matrix((uint64_t)v6);
}

void MatrixNxPts<2u,double>::~MatrixNxPts(uint64_t a1)
{
  Matrix<double>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

uint64_t DistortRadialLiteInternal<double>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6, int a7, int a8, double a9, char a10)
{
  if (*(_DWORD *)(a1 + 16) != 2) {
    DistortRadialLiteInternal<double>();
  }
  if (a7) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = a3;
  }
  if (a7) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = a2;
  }
  int v63 = 1;
  int v64 = a4;
  char v65 = 0;
  v62[0] = &unk_26FAEAF48;
  v62[1] = v15;
  int v59 = 1;
  int v60 = a4;
  char v61 = 0;
  v58[0] = &unk_26FAEAF48;
  v58[1] = v16;
  Matrix<double>::Matrix((uint64_t)&v54, 1, *(_DWORD *)(a1 + 20));
  uint64_t v54 = &unk_26FAEAF48;
  Matrix<double>::Matrix((uint64_t)v53, 1, *(_DWORD *)(a1 + 20));
  v53[0] = &unk_26FAEAF48;
  uint64_t v17 = v57;
  Matrix<double>::DotMult<double>(a1, a1, (uint64_t)v49);
  if (a6)
  {
    if ((int)v17 >= 1)
    {
      unsigned int v18 = v51;
      if (v51)
      {
        unint64_t v19 = 0;
        uint64_t v20 = v52;
        int v21 = v56;
        uint64_t v22 = 8 * v52;
        while (v20 != v19 && v18 >= 2 && v21 && v19 < v57)
        {
          double v23 = sqrt(*(double *)(v50 + 8 * v19) + *(double *)(v50 + 8 * v19 + v22));
          if (v23 >= a9) {
            double v23 = a9;
          }
          *(double *)(v55 + 8 * v19++) = v23;
          if (v17 == v19) {
            goto LABEL_28;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if ((int)v17 >= 1)
  {
    unsigned int v24 = v51;
    if (v51)
    {
      unint64_t v25 = 0;
      uint64_t v26 = v52;
      int v27 = v56;
      uint64_t v28 = 8 * v52;
      while (v26 != v25 && v24 >= 2 && v27 && v25 < v57)
      {
        *(double *)(v55 + 8 * v25) = sqrt(*(double *)(v50 + 8 * v25) + *(double *)(v50 + v28 + 8 * v25));
        if (v17 == ++v25) {
          goto LABEL_28;
        }
      }
    }
LABEL_50:
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
LABEL_28:
  if (a8) {
    Interp1SortedWithExtrap<double,LinearInterpolator<double>>((uint64_t)v62, (uint64_t)v58, (uint64_t)&v54, (uint64_t)v53);
  }
  else {
    Algo::Interp1WithExtrap<double>((uint64_t)v62, (uint64_t)v58, (uint64_t)&v54, 1, (uint64_t)v53, a10);
  }
  MatrixNxPts<1u,double>::DotDiv((uint64_t)v53, (uint64_t)&v54, (uint64_t)&v41);
  unsigned int v45 = &unk_26FAEAF18;
  uint64_t v46 = v42;
  uint64_t v47 = v43;
  char v48 = v44;
  uint64_t v42 = 0;
  char v44 = 0;
  Matrix<double>::~Matrix((uint64_t)&v41);
  uint64_t v29 = v57;
  if ((int)v57 >= 1)
  {
    if (v56)
    {
      unint64_t v30 = 0;
      int v31 = v47;
      while (1)
      {
        if (*(double *)(v55 + 8 * v30) == 0.0)
        {
          if (!v31 || v30 >= HIDWORD(v47)) {
            break;
          }
          *(void *)(v46 + 8 * v3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x3FF0000000000000;
        }
        if (v29 == ++v30)
        {
          unsigned int v32 = *(_DWORD *)(a1 + 16);
          if (v32)
          {
            unint64_t v33 = 0;
            uint64_t v34 = *(unsigned int *)(a1 + 20);
            int v35 = v47;
            int v36 = 119;
            while (1)
            {
              if (v34 == v33) {
                goto LABEL_53;
              }
              if (!v35 || v33 >= HIDWORD(v47)) {
                goto LABEL_54;
              }
              unsigned int v37 = *(_DWORD *)(a5 + 16);
              if (!v37) {
                break;
              }
              unint64_t v38 = *(unsigned int *)(a5 + 20);
              if (v33 >= v38) {
                break;
              }
              *(double *)(*(void *)(a5 + 8) + 8 * v33) = *(double *)(*(void *)(a1 + 8) + 8 * v33)
                                                         * *(double *)(v46 + 8 * v33);
              if (v32 < 2)
              {
                int v40 = 125;
                goto LABEL_57;
              }
              if (v37 <= 1)
              {
                int v40 = 119;
LABEL_57:
                __assert_rtn("operator()", "Matrix.hpp", v40, "row < m_rows && col < m_cols");
              }
              *(double *)(*(void *)(a5 + 8) + 8 * v38 + 8 * v33) = *(double *)(v46 + 8 * v33)
                                                                   * *(double *)(*(void *)(a1 + 8) + 8 * v34 + 8 * v33);
              if (v29 == ++v33) {
                goto LABEL_49;
              }
            }
            int v36 = 119;
          }
          else
          {
LABEL_53:
            int v36 = 125;
          }
LABEL_54:
          __assert_rtn("operator()", "Matrix.hpp", v36, "row < m_rows && col < m_cols");
        }
      }
    }
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
LABEL_49:
  Matrix<double>::~Matrix((uint64_t)&v45);
  Matrix<double>::~Matrix((uint64_t)v49);
  Matrix<double>::~Matrix((uint64_t)v53);
  Matrix<double>::~Matrix((uint64_t)&v54);
  Matrix<double>::~Matrix((uint64_t)v58);
  Matrix<double>::~Matrix((uint64_t)v62);
  return 0;
}

void sub_246901C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  Matrix<double>::~Matrix((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  Matrix<double>::~Matrix((uint64_t)va2);
  Matrix<double>::~Matrix(v9 - 128);
  Matrix<double>::~Matrix(v9 - 96);
  _Unwind_Resume(a1);
}

void Matrix<double>::DotMult<double>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if (v4 != *(_DWORD *)(a1 + 20) || (int v7 = *(_DWORD *)(a2 + 16), v7 != *(_DWORD *)(a1 + 16))) {
    Matrix<double>::DotMult<double>();
  }
  Matrix<double>::Matrix(a3, v7, v4);
  vDSPVmul<double,double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 1, *(double **)(a3 + 8), 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

void sub_246901D74(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t Algo::Interp1WithExtrap<double>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      if (*(_DWORD *)(a3 + 20) <= 1u) {
        Algo::Interp1WithExtrap<double>();
      }
      return Interp1WithExtrap<double,CubicInterpolator<double>>(a1, a2, a3, a5, a6);
    }
    else
    {
      if (a4 != 1) {
        Algo::Interp1WithExtrap<double>();
      }
      if (!*(_DWORD *)(a3 + 20)) {
        Algo::Interp1WithExtrap<double>();
      }
      return Interp1WithExtrap<double,LinearInterpolator<double>>(a1, a2, a3, a5, a6);
    }
  }
  else
  {
    if (*(_DWORD *)(a3 + 20) <= 1u) {
      Algo::Interp1WithExtrap<double>();
    }
    return Interp1WithExtrap<double,NearestInterpolator<double>>(a1, a2, a3, a5, a6);
  }
}

uint64_t MatrixNxPts<1u,double>::DotDiv@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Matrix<double>::DotDiv(a1, a2, (uint64_t)&v7);
  uint64_t v4 = v8;
  int v5 = v9;
  *(unsigned char *)(a3 + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a3 = &unk_26FAEAF48;
  *(void *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

uint64_t Interp1SortedWithExtrap<double,LinearInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    Interp1SortedWithExtrap<double,LinearInterpolator<double>>();
  }
  unsigned int v5 = *(_DWORD *)(a3 + 20);
  if (v5 <= 1) {
    Interp1SortedWithExtrap<double,LinearInterpolator<double>>();
  }
  Matrix<double>::Resize(a4, 1, v5);
  unint64_t v9 = *(unsigned int *)(a3 + 20);
  if (v9)
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
    int v12 = *(_DWORD *)(a1 + 20);
    double v13 = *(double *)(*(void *)(a1 + 8) + 8 * (v12 - 1));
    do
    {
      double v14 = *(double *)(*(void *)(a3 + 8) + 8 * v10);
      unsigned int v18 = 0;
      if (v14 >= v13)
      {
        unsigned int v15 = v12 - 2;
        unsigned int v11 = v12 - 2;
      }
      else
      {
        Algo::BinSearchNearestLowest<double>(a1, v11, (int *)&v18, v14);
        int v12 = *(_DWORD *)(a1 + 20);
        unsigned int v11 = v18;
        unint64_t v9 = *(unsigned int *)(a3 + 20);
        unsigned int v15 = v12 - 2;
      }
      if (v12 - 1 > v11) {
        unsigned int v15 = v11;
      }
      uint64_t v16 = *(void *)(a2 + 8);
      *(double *)(*(void *)(a4 + 8) + 8 * v10++) = *(double *)(v16 + 8 * v15)
                                                   + (*(double *)(v16 + 8 * (v15 + 1)) - *(double *)(v16 + 8 * v15))
                                                   * ((v14 - *(double *)(*(void *)(a1 + 8) + 8 * v15))
                                                    / (*(double *)(*(void *)(a1 + 8) + 8 * (v15 + 1))
                                                     - *(double *)(*(void *)(a1 + 8) + 8 * v15)));
    }
    while (v10 < v9);
  }
  return 0;
}

uint64_t Algo::BinSearchNearestLowest<double>(uint64_t a1, int a2, int *a3, double a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  int v5 = v4 - 1;
  if ((int)v4 - 1 >= 100)
  {
    if (v5 >= a2)
    {
      while (1)
      {
        int v9 = (a2 + v5) >> 1;
        double v10 = *(double *)(*(void *)(a1 + 8) + 8 * v9);
        if (v10 == a4) {
          break;
        }
        if (v10 <= a4) {
          a2 = v9 + 1;
        }
        else {
          int v5 = v9 - 1;
        }
        if (a2 > v5) {
          goto LABEL_18;
        }
      }
      a2 = (a2 + v5) >> 1;
    }
LABEL_18:
    if (v5 >= a2) {
      int v5 = a2;
    }
    int v8 = v5 & ~(v5 >> 31);
  }
  else
  {
    *a3 = 0;
    if ((int)v4 < 1)
    {
LABEL_6:
      LODWORD(v6) = 0;
    }
    else
    {
      uint64_t v6 = 0;
      while (*(double *)(*(void *)(a1 + 8) + 8 * v6) <= a4)
      {
        if (v4 == ++v6) {
          goto LABEL_6;
        }
      }
    }
    BOOL v7 = v6 != 0;
    int v8 = v6 - 1;
    if (!v7) {
      int v8 = 0;
    }
  }
  *a3 = v8;
  return 0;
}

uint64_t Interp1WithExtrap<double,LinearInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    Interp1WithExtrap<double,LinearInterpolator<double>>();
  }
  uint64_t v10 = *(unsigned int *)(a3 + 20);
  Matrix<double>::Resize(a4, 1, *(_DWORD *)(a3 + 20));
  uint64_t v11 = *(int *)(a1 + 20);
  unsigned int v26 = 0;
  int v12 = *(double **)(a3 + 8);
  double v13 = *(double **)(a4 + 8);
  uint64_t v14 = *(void *)(a2 + 8);
  unsigned int v15 = *(double **)(a1 + 8);
  double v16 = v15[v11 - 1];
  if (a5)
  {
    if ((int)v10 >= 1)
    {
      double v17 = *v15;
      double v18 = v15[1] - *v15;
      do
      {
        double v19 = *v12;
        unsigned int v20 = v11 - 2;
        if (*v12 < v16)
        {
          unsigned int v20 = ((v19 - v17) / v18);
          if (v20 + 1 < v11 && *(double *)(*(void *)(a1 + 8) + 8 * (v20 + 1)) <= v19) {
            ++v20;
          }
        }
        if ((int)v11 - 1 <= v20) {
          unsigned int v20 = v11 - 2;
        }
        *v13++ = *(double *)(v14 + 8 * v20)
               + (*(double *)(v14 + 8 * (v20 + 1)) - *(double *)(v14 + 8 * v20))
               * ((v19 - v15[v20])
                / (v15[v20 + 1] - v15[v20]));
        ++v12;
        --v10;
      }
      while (v10);
    }
  }
  else if ((int)v10 >= 1)
  {
    int v21 = v11 - 2;
    unsigned int v22 = v11 - 1;
    do
    {
      double v23 = *v12;
      if (*v12 >= v16)
      {
        unsigned int v26 = v21;
        unsigned int v24 = v21;
      }
      else
      {
        Algo::BinSearchNearestLowest<double>(a1, 0, (int *)&v26, *v12);
        unsigned int v24 = v26;
      }
      if (v22 <= v24) {
        unsigned int v24 = v21;
      }
      *v13++ = *(double *)(v14 + 8 * v24)
             + (*(double *)(v14 + 8 * (v24 + 1)) - *(double *)(v14 + 8 * v24))
             * ((v23 - v15[v24])
              / (v15[v24 + 1] - v15[v24]));
      ++v12;
      --v10;
    }
    while (v10);
  }
  return 0;
}

uint64_t Interp1WithExtrap<double,CubicInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    Interp1WithExtrap<double,LinearInterpolator<double>>();
  }
  uint64_t v10 = *(unsigned int *)(a3 + 20);
  Matrix<double>::Resize(a4, 1, *(_DWORD *)(a3 + 20));
  uint64_t v11 = *(int *)(a1 + 20);
  unsigned int v44 = 0;
  int v12 = *(double **)(a3 + 8);
  double v13 = *(double **)(a4 + 8);
  uint64_t v14 = *(double **)(a2 + 8);
  unsigned int v15 = *(double **)(a1 + 8);
  double v16 = v15[v11 - 1];
  if ((a5 & 1) == 0)
  {
    if ((int)v10 < 1) {
      return 0;
    }
    uint64_t v31 = (v11 - 2);
    uint64_t v32 = (v11 - 1);
    while (1)
    {
      double v33 = *v12;
      if (*v12 >= v16)
      {
        unsigned int v44 = v11 - 2;
        unsigned int v34 = v11 - 2;
      }
      else
      {
        Algo::BinSearchNearestLowest<double>(a1, 0, (int *)&v44, *v12);
        unsigned int v34 = v44;
      }
      if (v11 >= 4) {
        break;
      }
      if (v11 != 3)
      {
        double v36 = *v14;
        double v37 = v14[1];
        double v35 = -(v37 - *v14 * 2.0);
        double v38 = -(*v14 - v37 * 2.0);
        goto LABEL_40;
      }
      double v36 = *v14;
      double v37 = v14[1];
      if (!v34) {
        goto LABEL_39;
      }
      double v38 = -(v37 - v14[2] * 2.0);
      double v39 = *v15;
      double v40 = v15[1];
      double v41 = v40;
      double v35 = *v14;
      double v36 = v14[1];
      double v37 = v14[2];
LABEL_42:
      double v42 = (v33 - v41) / (v40 - v39);
      *v13++ = v36
             + v42 * (v42 * (v35 + v36 * -2.5 + v37 * 2.0 + v38 * -0.5))
             + v42 * (v42 * ((v36 - v37) * 1.5 + (v38 - v35) * 0.5)) * v42
             + (v37 - v35) * 0.5 * v42;
      ++v12;
      if (!--v10) {
        return 0;
      }
    }
    if (v31 <= v34)
    {
      double v35 = v14[(v11 - 3)];
      double v36 = v14[v31];
      double v37 = v14[v32];
      double v38 = -(v36 - v37 * 2.0);
      double v39 = v15[v31];
      double v40 = v15[v32];
    }
    else if (v34)
    {
      double v35 = v14[v34 - 1];
      double v36 = v14[v34];
      double v37 = v14[v34 + 1];
      double v38 = v14[v34 + 2];
      double v39 = v15[v34];
      double v40 = v15[v34 + 1];
    }
    else
    {
      double v36 = *v14;
      double v37 = v14[1];
LABEL_39:
      double v35 = -(v37 - v36 * 2.0);
      double v38 = v14[2];
LABEL_40:
      double v39 = *v15;
      double v40 = v15[1];
    }
    double v41 = v39;
    goto LABEL_42;
  }
  if ((int)v10 >= 1)
  {
    double v17 = *v15;
    double v18 = v15[1] - *v15;
    uint64_t v19 = (v11 - 2);
    uint64_t v20 = (v11 - 1);
    while (1)
    {
      double v21 = *v12;
      unsigned int v22 = v11 - 2;
      if (*v12 < v16)
      {
        unsigned int v22 = ((v21 - v17) / v18);
        if (v22 + 1 < v11 && *(double *)(*(void *)(a1 + 8) + 8 * (v22 + 1)) <= v21) {
          ++v22;
        }
      }
      if (v11 >= 4) {
        break;
      }
      if (v11 != 3)
      {
        double v24 = *v14;
        double v25 = v14[1];
        double v23 = -(v25 - *v14 * 2.0);
        double v26 = -(*v14 - v25 * 2.0);
        goto LABEL_20;
      }
      double v24 = *v14;
      double v25 = v14[1];
      if (!v22) {
        goto LABEL_19;
      }
      double v26 = -(v25 - v14[2] * 2.0);
      double v27 = *v15;
      double v28 = v15[1];
      double v29 = v28;
      double v23 = *v14;
      double v24 = v14[1];
      double v25 = v14[2];
LABEL_22:
      double v30 = (v21 - v29) / (v28 - v27);
      *v13++ = v24
             + v30 * (v30 * (v23 + v24 * -2.5 + v25 * 2.0 + v26 * -0.5))
             + v30 * (v30 * ((v24 - v25) * 1.5 + (v26 - v23) * 0.5)) * v30
             + (v25 - v23) * 0.5 * v30;
      ++v12;
      if (!--v10) {
        return 0;
      }
    }
    if (v19 <= v22)
    {
      double v23 = v14[(v11 - 3)];
      double v24 = v14[v19];
      double v25 = v14[v20];
      double v26 = -(v24 - v25 * 2.0);
      double v27 = v15[v19];
      double v28 = v15[v20];
    }
    else if (v22)
    {
      double v23 = v14[v22 - 1];
      double v24 = v14[v22];
      double v25 = v14[v22 + 1];
      double v26 = v14[v22 + 2];
      double v27 = v15[v22];
      double v28 = v15[v22 + 1];
    }
    else
    {
      double v24 = *v14;
      double v25 = v14[1];
LABEL_19:
      double v23 = -(v25 - v24 * 2.0);
      double v26 = v14[2];
LABEL_20:
      double v27 = *v15;
      double v28 = v15[1];
    }
    double v29 = v27;
    goto LABEL_22;
  }
  return 0;
}

uint64_t Interp1WithExtrap<double,NearestInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    Interp1WithExtrap<double,LinearInterpolator<double>>();
  }
  uint64_t v10 = *(unsigned int *)(a3 + 20);
  Matrix<double>::Resize(a4, 1, *(_DWORD *)(a3 + 20));
  uint64_t v11 = *(int *)(a1 + 20);
  unsigned int v28 = 0;
  int v12 = *(double **)(a3 + 8);
  double v13 = *(void **)(a4 + 8);
  uint64_t v14 = *(void *)(a2 + 8);
  unsigned int v15 = *(double **)(a1 + 8);
  double v16 = v15[v11 - 1];
  if (a5)
  {
    if ((int)v10 >= 1)
    {
      double v17 = *v15;
      double v18 = v15[1] - *v15;
      do
      {
        double v19 = *v12;
        unsigned int v20 = v11 - 2;
        if (*v12 < v16)
        {
          unsigned int v20 = ((v19 - v17) / v18);
          if (v20 + 1 < v11 && *(double *)(*(void *)(a1 + 8) + 8 * (v20 + 1)) <= v19) {
            ++v20;
          }
        }
        uint64_t v21 = (v11 - 1);
        if ((int)v11 - 1 > v20)
        {
          uint64_t v21 = v20 + 1;
          if (v19 - v15[v20] < v15[v21] - v19) {
            uint64_t v21 = v20;
          }
        }
        *v13++ = *(void *)(v14 + 8 * v21);
        ++v12;
        --v10;
      }
      while (v10);
    }
  }
  else if ((int)v10 >= 1)
  {
    int v22 = v11 - 2;
    uint64_t v23 = (v11 - 1);
    do
    {
      double v24 = *v12;
      if (*v12 >= v16)
      {
        unsigned int v28 = v22;
        unsigned int v25 = v22;
      }
      else
      {
        Algo::BinSearchNearestLowest<double>(a1, 0, (int *)&v28, *v12);
        unsigned int v25 = v28;
      }
      uint64_t v26 = v23;
      if (v23 > v25)
      {
        uint64_t v26 = v25 + 1;
        if (v24 - v15[v25] < v15[v26] - v24) {
          uint64_t v26 = v25;
        }
      }
      *v13++ = *(void *)(v14 + 8 * v26);
      ++v12;
      --v10;
    }
    while (v10);
  }
  return 0;
}

void Matrix<double>::DotDiv(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if (v4 != *(_DWORD *)(a1 + 20) || (int v7 = *(_DWORD *)(a2 + 16), v7 != *(_DWORD *)(a1 + 16))) {
    Matrix<float>::operator-();
  }
  Matrix<double>::Matrix(a3, v7, v4);
  vDSPVdiv<double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 1, *(double **)(a3 + 8), 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

void sub_246902810(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPGraphExclaveISPManagerNode::H16ISPGraphExclaveISPManagerNode(H16ISP::H16ISPGraphExclaveISPManagerNode *this, H16ISP::H16ISPDevice *a2, int a3)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 18);
  *(void *)uint64_t v5 = &unk_26FAEC128;
  *(unsigned char *)(v5 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(v5 + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

{
  uint64_t v5;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 18);
  *(void *)uint64_t v5 = &unk_26FAEC128;
  *(unsigned char *)(v5 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(v5 + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

void H16ISP::H16ISPGraphExclaveISPManagerNode::~H16ISPGraphExclaveISPManagerNode(H16ISP::H16ISPGraphExclaveISPManagerNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPGraphExclaveISPManagerNode::onActivate(H16ISP::H16ISPGraphExclaveISPManagerNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_INFO, "[Exclaves]: H16ISPGraphExclaveISPManagerNode::onActivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveISPManagerNode::onDeactivate(H16ISP::H16ISPGraphExclaveISPManagerNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_INFO, "[Exclaves]: H16ISPGraphExclaveISPManagerNode::onDeactivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveISPManagerNode::onMessageProcessing(H16ISP::H16ISPGraphExclaveISPManagerNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 9) & (1 << H16ISP::H16ISPFilterGraphNode::GetType(this));
  *((unsigned char *)this + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4 != 0;
  if (!v4)
  {
    uint64_t v12 = 3758097130;
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(*((H16ISP::H16ISPDevice **)this + 11)))
    {
      uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v14 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *((unsigned __int8 *)this + 80);
        *(_DWORD *)int buf = 136315394;
        *(void *)double v30 = "onMessageProcessing";
        *(_WORD *)&v30[8] = 1024;
        int v31 = v15;
        _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_DEFAULT, "[Exclaves]: H16ISPGraphExclaveISPManagerNode::%s Skipped processing ISPManager algoProcessing %d\n", buf, 0x12u);
      }
    }
    return v12;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    double v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      double v16 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveISPManagerNode::onMessageProcessing((uint64_t)this, v16);
    }
    return 0;
  }
  CFMutableDictionaryRef v6 = Mutable;
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  int v7 = *((_DWORD *)a2 + 90);
  *((void *)a2 + 46) = v6;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
  if (H16ISP::H16ISPDevice::enabledExclaveDebug(*((H16ISP::H16ISPDevice **)this + 11)))
  {
    int v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v8 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)double v30 = "onMessageProcessing";
      *(_WORD *)&v30[8] = 1024;
      int v31 = v7;
      __int16 v32 = 1024;
      int v33 = (unsigned __int16)v7;
      _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_DEFAULT, "[Exclaves]: H16ISPGraphExclaveISPManagerNode::%s RunKit ISP Mgr reqID 0x%08X frameID=%U\n", buf, 0x18u);
    }
  }
  if (H16ISP::H16ISPDevice::isSensorType(*((void *)this + 11), *((_DWORD *)this + 24), 1718186595))
  {
    int v26 = *((_DWORD *)this + 24);
    int v27 = v7;
    int v28 = 1;
    uint64_t v9 = *(void *)(*((void *)this + 11) + 136);
    if (!v9)
    {
      uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v21 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v21;
      }
      uint64_t v12 = 3758097130;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphExclaveISPManagerNode::onMessageProcessing(v21);
      }
      return v12;
    }
    kdebug_trace();
    int v10 = ispirexclavekitmodule_ispirexclavekit_sendcmdchrunkitisp(v9, (uint64_t)&v26);
    kdebug_trace();
    if (v10 || !v25)
    {
      int v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        int v22 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v22;
      }
      uint64_t v12 = 3758097130;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphExclaveISPManagerNode::onMessageProcessing();
      }
      return v12;
    }
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(*((H16ISP::H16ISPDevice **)this + 11)))
    {
      uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v11 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v11;
      }
      uint64_t v12 = 0;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67109376;
        *(_DWORD *)double v30 = v26;
        *(_WORD *)&v30[4] = 1024;
        *(_DWORD *)&v30[6] = v27;
        double v13 = "[Exclaves]: IR ISP Manager IDL Success: channel=%u, requestid=%u\n";
LABEL_43:
        _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_DEFAULT, v13, buf, 0xEu);
        return 0;
      }
      return v12;
    }
    return 0;
  }
  if (!H16ISP::H16ISPDevice::isSensorType(*((void *)this + 11), *((_DWORD *)this + 24), 1718775412)
    && !H16ISP::H16ISPDevice::isSensorType(*((void *)this + 11), *((_DWORD *)this + 24), 1718776695))
  {
    return 0;
  }
  int v26 = *((_DWORD *)this + 24);
  int v27 = v7;
  int v28 = 1;
  if (H16ISP::H16ISPDevice::enabledExclaveDebug(*((H16ISP::H16ISPDevice **)this + 11)))
  {
    double v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      double v18 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)double v30 = "onMessageProcessing";
      *(_WORD *)&v30[8] = 1024;
      int v31 = v7;
      _os_log_impl(&dword_24680F000, v18, OS_LOG_TYPE_DEFAULT, "[Exclaves]: H16ISPGraphExclaveISPManagerNode::%s EK RGB ISP Manager RunKit requestid=0x%08X\n", buf, 0x12u);
    }
  }
  uint64_t v19 = *(void *)(*((void *)this + 11) + 184);
  if (!v19)
  {
    uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v23 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v23;
    }
    uint64_t v12 = 3758097130;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveISPManagerNode::onMessageProcessing(v23);
    }
    return v12;
  }
  kdebug_trace();
  int v20 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchrunkitisp(v19, (uint64_t)&v26);
  kdebug_trace();
  if (v20 || !v25)
  {
    double v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      double v24 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v24;
    }
    uint64_t v12 = 3758097130;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveISPManagerNode::onMessageProcessing();
    }
    return v12;
  }
  if (!H16ISP::H16ISPDevice::enabledExclaveDebug(*((H16ISP::H16ISPDevice **)this + 11))) {
    return 0;
  }
  uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    uint64_t v11 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v11;
  }
  uint64_t v12 = 0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109376;
    *(_DWORD *)double v30 = v26;
    *(_WORD *)&v30[4] = 1024;
    *(_DWORD *)&v30[6] = v27;
    double v13 = "[Exclaves]: RGB ISP Manager IDL Success: channel=%u, requestid=0x%08X\n";
    goto LABEL_43;
  }
  return v12;
}

uint64_t H16ISP::H16ISPGraphExclaveISPManagerNode::GetNodeProcessingState(H16ISP::H16ISPGraphExclaveISPManagerNode *this)
{
  return *((unsigned __int8 *)this + 80);
}

void BlurM::print2dRoiDBL(BlurM *this, const __int16 *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v34 = (int)a2;
  int v7 = (__int16 *)((char *)this + 2 * a6 * a3 + 2 * (int)a2);
  uint64_t v33 = a4;
  uint64_t v8 = a6;
  uint64_t v9 = 2 * a6;
  uint64_t v10 = 2 * a4 - 4;
  uint64_t v11 = 4;
  uint64_t v12 = &_os_log_internal;
  do
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *v7;
      int v14 = v7[1];
      int v15 = v7[2];
      int v16 = v7[3];
      int v17 = *(__int16 *)((char *)v7 + v10 - 4);
      int v18 = *(__int16 *)((char *)v7 + v10 - 2);
      int v19 = *(__int16 *)((char *)v7 + v10);
      int v20 = *(__int16 *)((char *)v7 + v10 + 2);
      *(_DWORD *)int buf = 67110912;
      int v38 = v13;
      __int16 v39 = 1024;
      int v40 = v14;
      __int16 v41 = 1024;
      int v42 = v15;
      __int16 v43 = 1024;
      int v44 = v16;
      __int16 v45 = 1024;
      int v46 = v17;
      __int16 v47 = 1024;
      int v48 = v18;
      __int16 v49 = 1024;
      int v50 = v19;
      __int16 v51 = 1024;
      int v52 = v20;
      _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_DEFAULT, "BlurM: [%6d %6d %6d %6d ... %6d %6d %6d %6d]\n", buf, 0x32u);
    }
    int v7 = (__int16 *)((char *)v7 + v9);
    --v11;
  }
  while (v11);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: [...... ...... ...... ...... ... ...... ...... ...... ......]\n", buf, 2u);
  }
  uint64_t v21 = (__int16 *)((char *)this + 2 * (a3 + (uint64_t)a5 - 4) * v8 + 2 * v34);
  uint64_t v22 = 2 * v33 - 4;
  uint64_t v23 = &_os_log_internal;
  uint64_t v24 = 4;
  do
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *v21;
      int v26 = v21[1];
      int v27 = v21[2];
      int v28 = v21[3];
      int v29 = *(__int16 *)((char *)v21 + v22 - 4);
      int v30 = *(__int16 *)((char *)v21 + v22 - 2);
      int v31 = *(__int16 *)((char *)v21 + v22);
      int v32 = *(__int16 *)((char *)v21 + v22 + 2);
      *(_DWORD *)int buf = 67110912;
      int v38 = v25;
      __int16 v39 = 1024;
      int v40 = v26;
      __int16 v41 = 1024;
      int v42 = v27;
      __int16 v43 = 1024;
      int v44 = v28;
      __int16 v45 = 1024;
      int v46 = v29;
      __int16 v47 = 1024;
      int v48 = v30;
      __int16 v49 = 1024;
      int v50 = v31;
      __int16 v51 = 1024;
      int v52 = v32;
      _os_log_impl(&dword_24680F000, v23, OS_LOG_TYPE_DEFAULT, "BlurM: [%6d %6d %6d %6d ... %6d %6d %6d %6d]\n", buf, 0x32u);
    }
    v21 += v8;
    --v24;
  }
  while (v24);
}

void BlurM::printPyrRoiU8(BlurM *this, const unsigned __int8 *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v8 = a6;
  uint64_t v32 = (int)a2;
  uint64_t v9 = (unsigned __int8 *)this + a6 * (uint64_t)a3 + (int)a2;
  uint64_t v10 = a4 - 2;
  uint64_t v11 = 4;
  uint64_t v12 = &_os_log_internal;
  do
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *v9;
      int v14 = v9[1];
      int v15 = v9[2];
      int v16 = v9[3];
      int v17 = v9[v10 - 2];
      int v18 = v9[v10 - 1];
      int v19 = v9[v10];
      int v20 = v9[v10 + 1];
      *(_DWORD *)int buf = 67110912;
      int v35 = v13;
      __int16 v36 = 1024;
      int v37 = v14;
      __int16 v38 = 1024;
      int v39 = v15;
      __int16 v40 = 1024;
      int v41 = v16;
      __int16 v42 = 1024;
      int v43 = v17;
      __int16 v44 = 1024;
      int v45 = v18;
      __int16 v46 = 1024;
      int v47 = v19;
      __int16 v48 = 1024;
      int v49 = v20;
      _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_DEFAULT, "BlurM: [%3d %3d %3d %3d ... %3d %3d %3d %3d]\n", buf, 0x32u);
    }
    v9 += v8;
    --v11;
  }
  while (v11);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: [... ... ... ... ... ... ... ... ...]\n", buf, 2u);
  }
  uint64_t v21 = (unsigned __int8 *)this + (a3 + (uint64_t)a5 - 4) * v8 + v32;
  uint64_t v22 = &_os_log_internal;
  uint64_t v23 = 4;
  do
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *v21;
      int v25 = v21[1];
      int v26 = v21[2];
      int v27 = v21[3];
      int v28 = v21[v10 - 2];
      int v29 = v21[v10 - 1];
      int v30 = v21[v10];
      int v31 = v21[v10 + 1];
      *(_DWORD *)int buf = 67110912;
      int v35 = v24;
      __int16 v36 = 1024;
      int v37 = v25;
      __int16 v38 = 1024;
      int v39 = v26;
      __int16 v40 = 1024;
      int v41 = v27;
      __int16 v42 = 1024;
      int v43 = v28;
      __int16 v44 = 1024;
      int v45 = v29;
      __int16 v46 = 1024;
      int v47 = v30;
      __int16 v48 = 1024;
      int v49 = v31;
      _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_DEFAULT, "BlurM: [%3d %3d %3d %3d ... %3d %3d %3d %3d]\n", buf, 0x32u);
    }
    v21 += v8;
    --v23;
  }
  while (v23);
}

uint64_t BlurM::shellSortDBL(uint64_t this, __int16 *a2)
{
  for (uint64_t i = 0; i != 9; ++i)
  {
    unint64_t v3 = BlurM::shellSortDBL(short *,unsigned long)::increments[i];
    if (v3 < (unint64_t)a2)
    {
      uint64_t v4 = this + 2 * v3;
      uint64_t v5 = this;
      unint64_t v6 = BlurM::shellSortDBL(short *,unsigned long)::increments[i];
      do
      {
        int v7 = *(__int16 *)(this + 2 * v6);
        unint64_t v8 = v6;
        if (v6 >= v3)
        {
          uint64_t v9 = 0;
          while (1)
          {
            int v10 = *(__int16 *)(v5 + 2 * v9);
            if (v10 <= v7) {
              break;
            }
            *(_WORD *)(v4 + 2 * v9) = v10;
            v9 -= v3;
            unint64_t v8 = v6 + v9;
            if (v6 + v9 < v3) {
              goto LABEL_10;
            }
          }
          unint64_t v8 = v6 + v9;
        }
LABEL_10:
        *(_WORD *)(this + 2 * v8) = v7;
        ++v6;
        v4 += 2;
        v5 += 2;
      }
      while ((__int16 *)v6 != a2);
    }
  }
  return this;
}

uint64_t BlurM::selectKth(BlurM *this, __int16 *a2, int a3)
{
  if ((int)a2 >= 2)
  {
    int v3 = 0;
    int v4 = a2 - 1;
    do
    {
      int v5 = v3 + v4;
      if (v3 + v4 < 0 != __OFADD__(v3, v4)) {
        ++v5;
      }
      int v6 = v5 >> 1;
      int v7 = *((__int16 *)this + (v5 >> 1));
      uint64_t v8 = v4;
      *((_WORD *)this + v6) = *((_WORD *)this + v4);
      *((_WORD *)this + v4) = v7;
      uint64_t v9 = v3;
      int v10 = v3;
      do
      {
        int v11 = *((__int16 *)this + v9);
        if (v11 < v7)
        {
          __int16 v12 = *((_WORD *)this + v10);
          *((_WORD *)this + v1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v11;
          *((_WORD *)this + v9) = v12;
          ++v10;
        }
        ++v9;
      }
      while (v9 < v8);
      *((_WORD *)this + v8) = *((_WORD *)this + v10);
      *((_WORD *)this + v1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v7;
      if (v10 >= a3) {
        int v4 = v10;
      }
      else {
        int v4 = v8;
      }
      if (v10 < a3) {
        int v3 = v10 + 1;
      }
    }
    while (v3 < v4);
  }
  return *((__int16 *)this + a3);
}

void BlurM::calcMean(BlurM *this, __int16 *a2, int a3, _WORD *a4, __int16 *a5)
{
  int v6 = this;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v7 = (a3 * a2);
  if (a5)
  {
    int v14 = (int)a2;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = 67109120;
      int v30 = v7;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: length = %d\n", (uint8_t *)&v29, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x = [\n", (uint8_t *)&v29, 2u);
    }
    BlurM::print2dRoiDBL(v6, 0, 0, v14, a3, v14);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", (uint8_t *)&v29, 2u);
    }
    unint64_t v15 = v7 & 0xFFFFFFF8;
    if ((int)v15 < 1)
    {
      int32x4_t v17 = 0uLL;
    }
    else
    {
      unint64_t v16 = 0;
      int32x4_t v17 = 0uLL;
      int v18 = (int16x8_t *)v6;
      do
      {
        int16x8_t v19 = *v18++;
        int32x4_t v17 = vaddw_high_s16(vaddw_s16(v17, *(int16x4_t *)v19.i8), v19);
        v16 += 8;
      }
      while (v16 < v15);
    }
    float32x2_t v24 = vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL));
    int v25 = (int)(float)(v24.f32[1] + (float)(int)v24.f32[0]);
    if ((int)v7 >= 1)
    {
      uint64_t v26 = v7;
      do
      {
        int v27 = *(__int16 *)v6;
        int v6 = (BlurM *)((char *)v6 + 2);
        v25 += v27;
        --v26;
      }
      while (v26);
    }
    int v28 = v25 / (int)v7;
    *a4 = v25 / (int)v7;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = 67109120;
      int v30 = (__int16)v28;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: mean(x) = %d\n", (uint8_t *)&v29, 8u);
    }
  }
  else
  {
    unint64_t v8 = v7 & 0xFFFFFFF8;
    if ((int)v8 < 1)
    {
      int32x4_t v10 = 0uLL;
    }
    else
    {
      unint64_t v9 = 0;
      int32x4_t v10 = 0uLL;
      int v11 = this;
      do
      {
        int16x8_t v12 = *(int16x8_t *)v11;
        int v11 = (BlurM *)((char *)v11 + 16);
        int32x4_t v10 = vaddw_high_s16(vaddw_s16(v10, *(int16x4_t *)v12.i8), v12);
        v9 += 8;
      }
      while (v9 < v8);
    }
    float32x2_t v20 = vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL));
    int v21 = (int)(float)(v20.f32[1] + (float)(int)v20.f32[0]);
    if ((int)v7 >= 1)
    {
      uint64_t v22 = (a3 * a2);
      do
      {
        int v23 = *(__int16 *)v6;
        int v6 = (BlurM *)((char *)v6 + 2);
        v21 += v23;
        --v22;
      }
      while (v22);
    }
    *a4 = v21 / (int)v7;
  }
}

void BlurM::calcMedian(BlurM *this, __int16 *a2, int a3, __int16 *a4, __int16 *__dst, __int16 *a6, __int16 *a7)
{
  char v7 = (char)a7;
  int v11 = (int)a2;
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v13 = (__int16 *)(a3 * a2);
  memcpy(__dst, this, 2 * (int)v13);
  memcpy(a6, this, 2 * (int)v13);
  if (v7)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v25 = (int)v13;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: length = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(this, 0, 0, v11, a3, v11);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
  int v22 = v11;
  int v14 = a3;
  if ((int)v13 >= 0) {
    int v15 = (int)v13;
  }
  else {
    int v15 = v13 + 1;
  }
  int v16 = v15 >> 1;
  uint64_t v17 = (uint64_t)v15 >> 1;
  int v18 = BlurM::selectKth((BlurM *)__dst, v13, (int)v17 - 1);
  *a4 = (BlurM::selectKth((BlurM *)a6, v13, v16) + v18) >> 1;
  if (v7)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = __dst[v17 - 1];
      *(_DWORD *)int buf = 67109120;
      int v25 = v19;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x_sorted[length/2 -1] = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = __dst[v17];
      *(_DWORD *)int buf = 67109120;
      int v25 = v20;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x_sorted[(length/2)+1 -1] = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *a4;
      *(_DWORD *)int buf = 67109120;
      int v25 = v21;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: median(x) = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v25 = (int)v13;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: length = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(this, 0, 0, v22, v14, v22);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
}

void BlurM::calcNoiseMAD_Mean(BlurM *this, __int16 *a2, int a3, __int16 *a4, __int16 *a5, __int16 *a6, int16x8_t *__dst, __int16 *a8, unsigned __int8 a9)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v17 = (a3 * a2);
  memcpy(__dst, this, 2 * (int)v17);
  if (a8)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v40 = v17;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: length = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *a4;
      *(_DWORD *)int buf = 67109120;
      int v40 = v23;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x_mean = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(this, 0, 0, (int)a2, a3, (int)a2);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
    unsigned int v24 = *a4;
    unint64_t v25 = v17 & 0xFFFFFFF8;
    if ((int)v25 < 1)
    {
      LODWORD(v26) = 0;
    }
    else
    {
      unint64_t v26 = 0;
      int16x8_t v27 = vdupq_n_s16(v24);
      int v28 = __dst;
      do
      {
        *int v28 = vabdq_s16(*v28, v27);
        ++v28;
        v26 += 8;
      }
      while (v26 < v25);
    }
    if ((int)v26 < (int)v17)
    {
      uint64_t v32 = v17 - v26;
      uint64_t v33 = &__dst->i16[v26];
      do
      {
        int v34 = *v33 - v24;
        if (v34 < 0) {
          LOWORD(v34) = v24 - *v33;
        }
        *v33++ = v34;
        --v32;
      }
      while (v32);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v40 = v17;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: length = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: abs(x-mean(x)) = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL((BlurM *)__dst, 0, 0, (int)a2, a3, (int)a2);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
  else
  {
    unsigned int v18 = *a4;
    unint64_t v19 = v17 & 0xFFFFFFF8;
    if ((int)v19 < 1)
    {
      LODWORD(v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    else
    {
      unint64_t v20 = 0;
      int16x8_t v21 = vdupq_n_s16(v18);
      int v22 = __dst;
      do
      {
        *int v22 = vabdq_s16(*v22, v21);
        ++v22;
        v20 += 8;
      }
      while (v20 < v19);
    }
    if ((int)v20 < (int)v17)
    {
      uint64_t v29 = v17 - v20;
      int v30 = &__dst->i16[v20];
      do
      {
        int v31 = *v30 - v18;
        if (v31 < 0) {
          LOWORD(v31) = v18 - *v30;
        }
        *v30++ = v31;
        --v29;
      }
      while (v29);
    }
  }
  __int16 v38 = 0;
  BlurM::calcMean((BlurM *)__dst, a2, a3, &v38, a8);
  int v35 = v38;
  *a5 = v38;
  *a6 = (5 * v35) >> 2;
  if (a8)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v40 = v35;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x_tmp_mean = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v36 = *a5;
      *(_DWORD *)int buf = 67109120;
      int v40 = v36;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x_mad_mean = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v37 = *a6;
      *(_DWORD *)int buf = 67109120;
      int v40 = v37;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x_mad_sigma = %d\n", buf, 8u);
    }
  }
}

void BlurM::calcNoiseFilter(BlurM *this, __int16 *a2, int a3, __int16 *a4, __int16 *a5, __int16 *a6, __int16 *a7, BlurM *a8, __int16 *a9, unsigned __int8 a10)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v12 = (a3 * a2);
  __int16 v13 = *a4 + (*a7 >> *a5);
  *a6 = v13;
  if (a9)
  {
    int v25 = (int)a2;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v47 = 67109120;
      int v48 = v12;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: length = %d\n", (uint8_t *)&v47, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = *a4;
      int v47 = 67109120;
      int v48 = v26;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x_median = %d\n", (uint8_t *)&v47, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = *a5;
      int v47 = 67109120;
      int v48 = v27;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: noise_factor = %d\n", (uint8_t *)&v47, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = *a7;
      int v47 = 67109120;
      int v48 = v28;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x_sigma = %d\n", (uint8_t *)&v47, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = *a6;
      int v47 = 67109120;
      int v48 = v29;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: sft_thr = %d\n", (uint8_t *)&v47, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v47) = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x = [\n", (uint8_t *)&v47, 2u);
    }
    BlurM::print2dRoiDBL(this, 0, 0, v25, a3, v25);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v47) = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", (uint8_t *)&v47, 2u);
    }
    signed int v30 = *a6;
    unint64_t v31 = v12 & 0xFFFFFFF8;
    if ((int)v31 < 1)
    {
      LODWORD(v32) = 0;
    }
    else
    {
      unint64_t v32 = 0;
      int16x8_t v33 = vdupq_n_s16(v30);
      int v34 = this;
      int v35 = (int8x16_t *)a8;
      do
      {
        int16x8_t v36 = *(int16x8_t *)v34;
        int v34 = (BlurM *)((char *)v34 + 16);
        *v35++ = vandq_s8((int8x16_t)vsubq_s16(v36, v33), (int8x16_t)vcgtq_s16(v36, v33));
        v32 += 8;
      }
      while (v32 < v31);
    }
    if ((int)v32 < (int)v12)
    {
      uint64_t v42 = v12 - v32;
      int v43 = (__int16 *)((char *)a8 + 2 * v32);
      __int16 v44 = (__int16 *)((char *)this + 2 * v32);
      do
      {
        int v45 = *v44++;
        __int16 v46 = v45 - v30;
        if (v45 <= v30) {
          __int16 v46 = 0;
        }
        *v43++ = v46;
        --v42;
      }
      while (v42);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v47 = 67109120;
      int v48 = v12;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: length = %d\n", (uint8_t *)&v47, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v47) = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: x_th = [\n", (uint8_t *)&v47, 2u);
    }
    BlurM::print2dRoiDBL(a8, 0, 0, v25, a3, v25);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v47) = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", (uint8_t *)&v47, 2u);
    }
  }
  else
  {
    unint64_t v14 = v12 & 0xFFFFFFF8;
    if ((int)v14 < 1)
    {
      LODWORD(v15) = 0;
    }
    else
    {
      unint64_t v15 = 0;
      int16x8_t v16 = vdupq_n_s16(v13);
      uint64_t v17 = this;
      unsigned int v18 = (int8x16_t *)a8;
      do
      {
        int16x8_t v19 = *(int16x8_t *)v17;
        uint64_t v17 = (BlurM *)((char *)v17 + 16);
        *v18++ = vandq_s8((int8x16_t)vsubq_s16(v19, v16), (int8x16_t)vcgtq_s16(v19, v16));
        v15 += 8;
      }
      while (v15 < v14);
    }
    if ((int)v15 < (int)v12)
    {
      uint64_t v37 = v12 - v15;
      __int16 v38 = (__int16 *)((char *)a8 + 2 * v15);
      int v39 = (__int16 *)((char *)this + 2 * v15);
      do
      {
        int v40 = *v39++;
        __int16 v41 = v40 - v13;
        if (v40 <= v13) {
          __int16 v41 = 0;
        }
        *v38++ = v41;
        --v37;
      }
      while (v37);
    }
  }
}

void BlurM::calcEmax(BlurM *this, __int16 *a2, int a3, int *a4, int *a5, __int16 *a6, const __int16 *a7, __int16 *a8, unsigned __int8 a9)
{
  int v11 = (int)a2;
  uint64_t v12 = *a4;
  if (a3 - (int)v12 + 1 >= 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = (v12 * v12);
    unint64_t v16 = v15 & 0x7FFFFFF8;
    uint64_t v17 = (int)a2 - (int)v12 + 1;
    uint64_t v18 = (int)a6;
    uint64_t v19 = 2 * v12;
    do
    {
      uint64_t v20 = v14 + v12;
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        int v23 = this;
        do
        {
          if ((int)v12 >= 1)
          {
            unsigned int v24 = a7;
            int v25 = v23;
            uint64_t v26 = v14;
            do
            {
              uint64_t v27 = 0;
              do
              {
                v24[v27] = *((_WORD *)v25 + v27);
                ++v27;
              }
              while (v22 + v27 < v22 + v12);
              ++v26;
              int v25 = (BlurM *)((char *)v25 + 2 * v11);
              unsigned int v24 = (const __int16 *)((char *)v24 + v19);
            }
            while (v26 < v20);
          }
          int16x8_t v28 = vld1q_dup_s16(a7);
          if (v16)
          {
            unint64_t v29 = 0;
            signed int v30 = (int16x8_t *)a7;
            do
            {
              int16x8_t v31 = *v30++;
              int16x8_t v28 = vmaxq_s16(v31, v28);
              v29 += 8;
            }
            while (v29 < v16);
            unsigned int v32 = ((v16 - 1) & 0xFFFFFFF8) + 8;
          }
          else
          {
            unsigned int v32 = 0;
          }
          __int16 v33 = vmaxv_s16(vmax_s16(*(int16x4_t *)v28.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL)));
          if ((int)v32 < (int)v15)
          {
            uint64_t v34 = v15 - v32;
            int v35 = &a7[v32];
            do
            {
              int v37 = *v35++;
              __int16 v36 = v37;
              if (v33 <= v37) {
                __int16 v33 = v36;
              }
              --v34;
            }
            while (v34);
          }
          *((_WORD *)a5 + v21 + v13 * v18) = v33;
          ++v21;
          v22 += v12;
          int v23 = (BlurM *)((char *)v23 + v19);
        }
        while (v22 <= v17);
      }
      ++v13;
      this = (BlurM *)((char *)this + 2 * (int)v12 * (uint64_t)v11);
      v14 += v12;
    }
    while (v20 <= (a3 - v12 + 1));
  }
  if (a8)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: xmax = [\n", buf, 2u);
    }
    if (v11 >= 0) {
      int v38 = v11;
    }
    else {
      int v38 = v11 + 1;
    }
    int v39 = v38 >> 1;
    if (a3 >= 0) {
      int v40 = a3;
    }
    else {
      int v40 = a3 + 1;
    }
    BlurM::print2dRoiDBL((BlurM *)a5, 0, 0, v39, v40 >> 1, v39);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      v41[0] = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", (uint8_t *)v41, 2u);
    }
  }
}

void BlurM::calcSharpness(BlurM *this, __int16 *a2, int a3, float *a4, float *a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = (a3 * a2);
  unint64_t v6 = v5 & 0xFFFFFFF8;
  if ((int)v6 < 1)
  {
    LODWORD(v7) = 0;
    int32x4_t v11 = 0uLL;
    int32x4_t v10 = 0uLL;
  }
  else
  {
    unint64_t v7 = 0;
    v8.i64[0] = 0x1000100010001;
    v8.i64[1] = 0x1000100010001;
    unint64_t v9 = this;
    int32x4_t v10 = 0uLL;
    int32x4_t v11 = 0uLL;
    do
    {
      int16x8_t v12 = *(int16x8_t *)v9;
      unint64_t v9 = (BlurM *)((char *)v9 + 16);
      uint16x8_t v13 = (uint16x8_t)vmaxq_s16(v12, (int16x8_t)0);
      uint16x8_t v14 = (uint16x8_t)vandq_s8((int8x16_t)vcgtzq_s16(v12), v8);
      int32x4_t v10 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v13.i8), v13);
      int32x4_t v11 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v14.i8), v14);
      v7 += 8;
    }
    while (v7 < v6);
  }
  int v15 = vaddvq_s32(v10);
  int v16 = vaddvq_s32(v11);
  if ((int)v7 < (int)v5)
  {
    uint64_t v17 = v5 - v7;
    uint64_t v18 = (__int16 *)((char *)this + 2 * v7);
    do
    {
      int v20 = *v18++;
      int v19 = v20;
      if (v20 > 0) {
        ++v16;
      }
      v15 += v19 & ~(v19 >> 31);
      --v17;
    }
    while (v17);
  }
  float v21 = (float)((float)v15 * 0.0625) / (float)v16;
  *a4 = v21;
  if ((a5 & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 134217984;
    double v23 = v21;
    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: sharpness = %f\n", (uint8_t *)&v22, 0xCu);
  }
}

float32x2_t BlurM::detectBlur(BlurM *this, __int16 *a2, __int16 *a3, int a4, float *a5, float *a6, float *a7, float *a8, unsigned __int8 a9)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v11 = (a4 * a3);
  signed int v12 = (int)*a5;
  unint64_t v13 = v11 & 0xFFFFFFF8;
  if ((int)v13 < 1)
  {
    LODWORD(v14) = 0;
    int16x8_t v22 = 0uLL;
    int16x8_t v21 = 0uLL;
    int16x8_t v20 = 0uLL;
    int16x8_t v16 = 0uLL;
  }
  else
  {
    unint64_t v14 = 0;
    int16x8_t v15 = vdupq_n_s16(v12);
    int16x8_t v16 = 0uLL;
    v17.i64[0] = 0x2000200020002;
    v17.i64[1] = 0x2000200020002;
    uint64_t v18 = this;
    int v19 = a2;
    int16x8_t v20 = 0uLL;
    int16x8_t v21 = 0uLL;
    int16x8_t v22 = 0uLL;
    do
    {
      int16x8_t v23 = *(int16x8_t *)v18;
      uint64_t v18 = (BlurM *)((char *)v18 + 16);
      int16x8_t v24 = v23;
      int16x8_t v25 = *(int16x8_t *)v19;
      v19 += 8;
      int16x8_t v26 = vshrq_n_s16(v24, 4uLL);
      int16x8_t v27 = vshrq_n_s16(v25, 4uLL);
      int16x8_t v28 = vcgtq_s16(vmaxq_s16(v26, v27), v15);
      int16x8_t v16 = vsubq_s16(v16, v28);
      int16x8_t v20 = vsubq_s16(v20, (int16x8_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_s16(v26, v27)));
      int16x8_t v29 = (int16x8_t)vandq_s8((int8x16_t)v28, vandq_s8((int8x16_t)vcgtq_s16(v27, v26), v17));
      int16x8_t v21 = vaddq_s16(v29, v21);
      int16x8_t v22 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_s16(v15, v26)), v22);
      v14 += 8;
    }
    while (v14 < v13);
  }
  int8x16_t v30 = (int8x16_t)vmovl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v16.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL)));
  int8x16_t v31 = (int8x16_t)vmovl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v20.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)));
  int32x2_t v32 = (int32x2_t)vand_s8((int8x8_t)vzip1_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v30.i8), (int8x8_t)0xFFFF0000FFFFLL);
  int32x2_t v33 = (int32x2_t)vand_s8((int8x8_t)vzip2_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v30.i8), (int8x8_t)0xFFFF0000FFFFLL);
  v30.i64[0] = vextq_s8(v30, v30, 8uLL).u64[0];
  v31.i64[0] = vextq_s8(v31, v31, 8uLL).u64[0];
  int32x2_t v34 = vadd_s32(vadd_s32(vadd_s32(v33, v32), (int32x2_t)vand_s8((int8x8_t)vzip1_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v30.i8), (int8x8_t)0xFFFF0000FFFFLL)), (int32x2_t)vand_s8((int8x8_t)vzip2_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v30.i8), (int8x8_t)0xFFFF0000FFFFLL));
  int v35 = vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v21.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL))));
  int v36 = vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v22.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL))));
  if ((int)v14 < (int)v11)
  {
    float v37 = (float)v12;
    uint64_t v38 = v11 - v14;
    int v39 = &a2[v14];
    int v40 = (__int16 *)((char *)this + 2 * v14);
    do
    {
      int v41 = *v40++;
      float v42 = (float)(v41 >> 4);
      int v43 = *v39++;
      int v44 = v43 >> 4;
      float v45 = (float)(v43 >> 4);
      if (v45 <= v42) {
        float v46 = v42;
      }
      else {
        float v46 = (float)v44;
      }
      if (v46 > v37)
      {
        int32x2_t v34 = vadd_s32(v34, (int32x2_t)((v42 > v45) | 0x100000000));
        if (v45 > v42)
        {
          v35 += 2;
          if (v42 < v37) {
            v36 += 2;
          }
        }
      }
      --v38;
    }
    while (v38);
  }
  __int32 v47 = v34.i32[1];
  if (v34.i32[1])
  {
    float32x2_t v48 = vcvt_f32_s32(v34);
    float32x2_t result = vdiv_f32(v48, (float32x2_t)vdup_lane_s32((int32x2_t)v48, 1));
  }
  else
  {
    float32x2_t result = 0;
  }
  *a6 = result.f32[0];
  if (v35) {
    result.f32[0] = (float)v36 / (float)v35;
  }
  else {
    result.i32[0] = 1.0;
  }
  *a7 = result.f32[0];
  if (a8)
  {
    __int32 v53 = v34.i32[0];
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v47;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Nedge      = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 67109120;
      HIDWORD(v5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v53;
      *(void *)int buf = v50;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Nda        = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v35;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Nrg        = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v36;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Nbrg       = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      double v51 = *a6;
      *(_DWORD *)int buf = 134217984;
      *(double *)&uint8_t buf[4] = v51;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: blurConf   = %f\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      double v52 = *a7;
      *(_DWORD *)int buf = 134217984;
      *(double *)&uint8_t buf[4] = v52;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: blurExtent = %f\n", buf, 0xCu);
    }
  }
  return result;
}

void BlurM::calcEmap(BlurM *this, __int16 *a2, __int16 *a3, __int16 *a4, int a5, BlurM *a6, __int16 *a7)
{
  int v9 = (int)a4;
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v10 = (a5 * a4);
  unint64_t v11 = v10 & 0xFFFFFFF8;
  if ((int)v11 < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v13 = this;
    unint64_t v14 = a2;
    int16x8_t v15 = a3;
    int16x8_t v16 = (int16x8_t *)a6;
    do
    {
      int16x8_t v17 = *(int16x8_t *)v13;
      unint64_t v13 = (BlurM *)((char *)v13 + 16);
      int16x8_t v18 = v17;
      int16x8_t v19 = *(int16x8_t *)v14;
      v14 += 8;
      int16x8_t v20 = v19;
      int16x8_t v21 = *(int16x8_t *)v15;
      v15 += 8;
      int16x8_t v22 = v21;
      int32x4_t v23 = vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v20.i8);
      int32x4_t v24 = vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v20, v20), v18, v18), v22, v22);
      float32x4_t v25 = vcvtq_f32_s32(vmlal_s16(vmlal_s16(v23, *(int16x4_t *)v18.i8, *(int16x4_t *)v18.i8), *(int16x4_t *)v22.i8, *(int16x4_t *)v22.i8));
      float32x4_t v26 = vrsqrteq_f32(v25);
      float32x4_t v27 = vcvtq_f32_s32(v24);
      float32x4_t v28 = vmulq_f32(vmulq_f32(v26, vrsqrtsq_f32(vmulq_f32(v26, v25), v26)), v25);
      float32x4_t v29 = vrsqrteq_f32(v27);
      *v16++ = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v28), (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v29, vrsqrtsq_f32(vmulq_f32(v29, v27), v29)), v27)));
      v12 += 8;
    }
    while (v12 < v11);
  }
  if ((int)v12 < (int)v10)
  {
    uint64_t v30 = v10 - v12;
    int8x16_t v31 = (_WORD *)((char *)a6 + 2 * v12);
    int32x2_t v32 = &a3[v12];
    int32x2_t v33 = &a2[v12];
    int32x2_t v34 = (__int16 *)((char *)this + 2 * v12);
    do
    {
      int v35 = *v34++;
      int v36 = v35 * v35;
      int v37 = *v33++;
      int v38 = v36 + v37 * v37;
      int v39 = *v32++;
      *v31++ = (int)sqrt((double)(v38 + v39 * v39));
      --v30;
    }
    while (v30);
  }
  if (a7)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: calcEmap\n", (uint8_t *)&v40, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = 67109120;
      int v41 = a5;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: height=%d\n", (uint8_t *)&v40, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = 67109120;
      int v41 = v9;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: width=%d\n", (uint8_t *)&v40, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: emap = [\n", (uint8_t *)&v40, 2u);
    }
    BlurM::print2dRoiDBL(a6, 0, 0, v9, a5, v9);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", (uint8_t *)&v40, 2u);
    }
  }
}

void BlurM::hlwt2(BlurM *this, __int16 *a2, int a3, BlurM *a4, BlurM *a5, BlurM *a6, BlurM *a7, BlurM *__src, int16x8_t *a9, __int16 *a10, unsigned __int8 a11)
{
  unint64_t v11 = __src;
  int v14 = (int)a2;
  int16x8_t v16 = (__int16 *)a9;
  uint64_t v130 = *MEMORY[0x263EF8340];
  if (a10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: hlwt2\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = a3;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: height=%d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v14;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: width=%d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: img_data = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(this, 0, 0, v14, a3, v14);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
    if (a3 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = (int)(v14 & 0xFFFFFFF8);
      uint64_t v27 = 2 * (v14 >> 1);
      float32x4_t v28 = v11;
      float32x4_t v29 = (__int16 *)a9;
      do
      {
        if ((int)v26 < 1)
        {
          uint64_t v30 = 0;
        }
        else
        {
          uint64_t v30 = 0;
          int8x16_t v31 = (const __int16 *)this;
          do
          {
            int16x4x2_t v132 = vld2_s16(v31);
            v31 += 8;
            *(int16x4_t *)((char *)v28 + v3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v132.val[0];
            *(int16x4_t *)((char *)v29 + v3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v132.val[1];
            v30 += 8;
          }
          while (v30 < v26);
          uint64_t v30 = v30;
        }
        if ((int)v30 < v14)
        {
          do
          {
            if (v30) {
              int32x2_t v32 = (__int16 *)a9;
            }
            else {
              int32x2_t v32 = (__int16 *)v11;
            }
            v32[(int)v25 * v14 / 2 + (v30 >> 1)] = *((_WORD *)this + v30);
            ++v30;
          }
          while (v14 != v30);
        }
        ++v25;
        float32x4_t v29 = (__int16 *)((char *)v29 + v27);
        float32x4_t v28 = (BlurM *)((char *)v28 + v27);
        this = (BlurM *)((char *)this + 2 * v14);
      }
      while (v25 != a3);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Splitting\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: L = [\n", buf, 2u);
    }
    if (v14 >= 0) {
      int v33 = v14;
    }
    else {
      int v33 = v14 + 1;
    }
    BlurM::print2dRoiDBL(v11, 0, 0, v33 >> 1, a3, v33 >> 1);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
  else
  {
    if (a3 < 1) {
      goto LABEL_60;
    }
    uint64_t v17 = 0;
    uint64_t v18 = (int)(a2 & 0xFFFFFFF8);
    uint64_t v19 = 2 * ((int)a2 >> 1);
    int16x8_t v20 = (__int16 *)__src;
    int16x8_t v21 = (__int16 *)a9;
    do
    {
      if ((int)v18 < 1)
      {
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v22 = 0;
        int32x4_t v23 = (const __int16 *)this;
        do
        {
          int16x4x2_t v131 = vld2_s16(v23);
          v23 += 8;
          *(int16x4_t *)((char *)v20 + v22) = v131.val[0];
          *(int16x4_t *)((char *)v21 + v22) = v131.val[1];
          v22 += 8;
        }
        while (v22 < v18);
        uint64_t v22 = v22;
      }
      if ((int)v22 < (int)a2)
      {
        do
        {
          if (v22) {
            int32x4_t v24 = (__int16 *)a9;
          }
          else {
            int32x4_t v24 = (__int16 *)__src;
          }
          v24[(int)v17 * (int)a2 / 2 + (v22 >> 1)] = *((_WORD *)this + v22);
          ++v22;
        }
        while (a2 != v22);
      }
      ++v17;
      int16x8_t v21 = (__int16 *)((char *)v21 + v19);
      int16x8_t v20 = (__int16 *)((char *)v20 + v19);
      this = (BlurM *)((char *)this + 2 * (int)a2);
    }
    while (v17 != a3);
  }
  if (a10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: H = [\n", buf, 2u);
    }
    if (v14 >= 0) {
      int v34 = v14;
    }
    else {
      int v34 = v14 + 1;
    }
    BlurM::print2dRoiDBL((BlurM *)a9, 0, 0, v34 >> 1, a3, v34 >> 1);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
LABEL_60:
  if (v14 >= 0) {
    int v35 = v14;
  }
  else {
    int v35 = v14 + 1;
  }
  int v36 = v35 >> 1;
  uint64_t v37 = ((v35 >> 1) * a3);
  unint64_t v38 = v37 & 0xFFFFFFF8;
  if ((int)v38 < 1)
  {
    LODWORD(v39) = 0;
  }
  else
  {
    unint64_t v39 = 0;
    int v40 = a9;
    int v41 = (int16x8_t *)v11;
    do
    {
      int16x8_t v42 = *v41++;
      *int v40 = vsubq_s16(*v40, v42);
      ++v40;
      v39 += 8;
    }
    while (v39 < v38);
  }
  if ((int)v39 < (int)v37)
  {
    uint64_t v43 = v37 - v39;
    int v44 = (__int16 *)((char *)v11 + 2 * v39);
    float v45 = &a9->i16[v39];
    do
    {
      __int16 v46 = *v44++;
      *v45++ -= v46;
      --v43;
    }
    while (v43);
  }
  if (a10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Lifting\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: H = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL((BlurM *)a9, 0, 0, v36, a3, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
    if ((int)v38 < 1)
    {
      LODWORD(v51) = 0;
    }
    else
    {
      unint64_t v51 = 0;
      double v52 = a9;
      __int32 v53 = (int16x8_t *)v11;
      do
      {
        int16x8_t v54 = vshrq_n_s16(*v52, 1uLL);
        *__int32 v53 = vsraq_n_s16(*v53, *v52, 1uLL);
        ++v53;
        *v52++ = v54;
        v51 += 8;
      }
      while (v51 < v38);
    }
    if ((int)v51 < (int)v37)
    {
      uint64_t v59 = v37 - v51;
      int v60 = (_WORD *)((char *)v11 + 2 * v51);
      char v61 = &a9->i16[v51];
      do
      {
        int v62 = *v61;
        *v61++ >>= 1;
        *v60++ += v62 >> 1;
        --v59;
      }
      while (v59);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: L = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(v11, 0, 0, v36, a3, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
  else
  {
    if ((int)v38 < 1)
    {
      LODWORD(v47) = 0;
    }
    else
    {
      unint64_t v47 = 0;
      float32x2_t v48 = a9;
      uint64_t v49 = (int16x8_t *)v11;
      do
      {
        int16x8_t v50 = vshrq_n_s16(*v48, 1uLL);
        *uint64_t v49 = vsraq_n_s16(*v49, *v48, 1uLL);
        ++v49;
        *v48++ = v50;
        v47 += 8;
      }
      while (v47 < v38);
    }
    if ((int)v47 < (int)v37)
    {
      uint64_t v55 = v37 - v47;
      int v56 = (_WORD *)((char *)v11 + 2 * v47);
      unsigned int v57 = &a9->i16[v47];
      do
      {
        int v58 = *v57;
        *v57++ >>= 1;
        *v56++ += v58 >> 1;
        --v55;
      }
      while (v55);
    }
  }
  if (a3 < 1)
  {
    int v66 = a3;
    int v65 = 0;
    int v64 = 0;
  }
  else
  {
    uint64_t v63 = 0;
    int v64 = 0;
    int v65 = 0;
    int v66 = a3;
    do
    {
      if (v63)
      {
        memcpy((char *)a5 + 2 * v64 * v36, v11, 2 * v36);
        ++v64;
      }
      else
      {
        memcpy((char *)a4 + 2 * v65 * v36, v11, 2 * v36);
        ++v65;
      }
      ++v63;
      unint64_t v11 = (BlurM *)((char *)v11 + 2 * v36);
    }
    while (a3 != v63);
  }
  if (a10)
  {
    int v67 = v66;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Splitting\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v65;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: a = [\n", buf, 2u);
    }
    if (v66 >= 0) {
      int v70 = v66;
    }
    else {
      int v70 = v66 + 1;
    }
    int v69 = v70 >> 1;
    BlurM::print2dRoiDBL(a4, 0, 0, v36, v70 >> 1, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v64;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(a5, 0, 0, v36, v69, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
  else
  {
    int v64 = 0;
    int v67 = v66;
    if (v66 >= 0) {
      int v68 = v66;
    }
    else {
      int v68 = v66 + 1;
    }
    int v69 = v68 >> 1;
  }
  uint64_t v71 = (v69 * v36);
  unint64_t v72 = v71 & 0xFFFFFFF8;
  if ((int)v72 < 1)
  {
    LODWORD(v73) = 0;
  }
  else
  {
    unint64_t v73 = 0;
    BOOL v74 = (int16x8_t *)a5;
    BOOL v75 = (int16x8_t *)a4;
    do
    {
      int16x8_t v76 = *v75++;
      *BOOL v74 = vsubq_s16(*v74, v76);
      ++v74;
      v73 += 8;
    }
    while (v73 < v72);
  }
  if ((int)v73 < (int)v71)
  {
    uint64_t v77 = v71 - v73;
    float v78 = (__int16 *)((char *)a4 + 2 * v73);
    int v79 = (__int16 *)((char *)a5 + 2 * v73);
    do
    {
      __int16 v80 = *v78++;
      *v79++ -= v80;
      --v77;
    }
    while (v77);
  }
  if (a10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Lifting\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v64;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(a5, 0, 0, v36, v69, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
    if ((int)v72 < 1)
    {
      LODWORD(v85) = 0;
    }
    else
    {
      unint64_t v85 = 0;
      float v86 = (int16x8_t *)a4;
      uint64_t v87 = a5;
      do
      {
        int16x8_t v88 = *(int16x8_t *)v87;
        uint64_t v87 = (BlurM *)((char *)v87 + 16);
        *float v86 = vaddq_s16(vaddq_s16(*v86, *v86), v88);
        ++v86;
        v85 += 8;
      }
      while (v85 < v72);
    }
    if ((int)v85 < (int)v71)
    {
      uint64_t v93 = v71 - v85;
      uint64_t v94 = (__int16 *)((char *)a5 + 2 * v85);
      uint64_t v95 = (_WORD *)((char *)a4 + 2 * v85);
      do
      {
        __int16 v96 = *v94++;
        *uint64_t v95 = v96 + 2 * *v95;
        ++v95;
        --v93;
      }
      while (v93);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v64;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: a = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(a4, 0, 0, v36, v69, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
  else
  {
    if ((int)v72 < 1)
    {
      LODWORD(v81) = 0;
    }
    else
    {
      unint64_t v81 = 0;
      uint64_t v82 = (int16x8_t *)a4;
      double v83 = a5;
      do
      {
        int16x8_t v84 = *(int16x8_t *)v83;
        double v83 = (BlurM *)((char *)v83 + 16);
        int16x8_t *v82 = vaddq_s16(vaddq_s16(*v82, *v82), v84);
        ++v82;
        v81 += 8;
      }
      while (v81 < v72);
    }
    if ((int)v81 < (int)v71)
    {
      uint64_t v89 = v71 - v81;
      long long v90 = (__int16 *)((char *)a5 + 2 * v81);
      long long v91 = (_WORD *)((char *)a4 + 2 * v81);
      do
      {
        __int16 v92 = *v90++;
        *long long v91 = v92 + 2 * *v91;
        ++v91;
        --v89;
      }
      while (v89);
    }
  }
  int v125 = (BlurM *)(v69 * v36);
  if (v67 < 1)
  {
    int v99 = 0;
    int v98 = 0;
  }
  else
  {
    uint64_t v97 = 0;
    int v98 = 0;
    int v99 = 0;
    do
    {
      if (v97)
      {
        memcpy((char *)a7 + 2 * v98 * v36, v16, 2 * v36);
        ++v98;
      }
      else
      {
        memcpy((char *)a6 + 2 * v99 * v36, v16, 2 * v36);
        ++v99;
      }
      ++v97;
      v16 += v36;
    }
    while (v67 != v97);
  }
  if (a10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Splitting\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v99;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(a6, 0, 0, v36, v69, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v98;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: d = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(a7, 0, 0, v36, v69, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
    int v64 = v98;
  }
  if ((int)v72 < 1)
  {
    LODWORD(v10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  else
  {
    unint64_t v100 = 0;
    long long v102 = a6;
    long long v101 = (int16x8_t *)a7;
    do
    {
      int16x8_t v103 = *(int16x8_t *)v102;
      long long v102 = (BlurM *)((char *)v102 + 16);
      int16x8_t *v101 = vsubq_s16(*v101, v103);
      ++v101;
      v100 += 8;
    }
    while (v100 < v72);
  }
  if ((int)v100 < (int)v125)
  {
    long long v104 = (char *)v125 - v100;
    int v105 = (__int16 *)((char *)a6 + 2 * v100);
    float v106 = (__int16 *)((char *)a7 + 2 * v100);
    do
    {
      __int16 v107 = *v105++;
      *v106++ -= v107;
      --v104;
    }
    while (v104);
  }
  if (a10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: Lifting\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v64;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: d = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(a7, 0, 0, v36, v69, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
    if ((int)v72 < 1)
    {
      LODWORD(v112) = 0;
    }
    else
    {
      unint64_t v112 = 0;
      uint64_t v114 = (int16x8_t *)a6;
      long long v113 = (int16x8_t *)a7;
      do
      {
        int16x8_t v115 = vshrq_n_s16(*v113, 1uLL);
        *uint64_t v114 = vsraq_n_s16(*v114, *v113, 1uLL);
        ++v114;
        *v113++ = v115;
        v112 += 8;
      }
      while (v112 < v72);
    }
    if ((int)v112 < (int)v125)
    {
      long long v120 = (char *)v125 - v112;
      float v121 = (__int16 *)((char *)a6 + 2 * v112);
      uint64_t v122 = (__int16 *)((char *)a7 + 2 * v112);
      do
      {
        int v123 = *v122;
        *v122++ >>= 1;
        *v121++ += v123 >> 1;
        --v120;
      }
      while (v120);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v64;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(a6, 0, 0, v36, v69, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
  else
  {
    if ((int)v72 < 1)
    {
      LODWORD(v108) = 0;
    }
    else
    {
      unint64_t v108 = 0;
      float v110 = (int16x8_t *)a6;
      uint64_t v109 = (int16x8_t *)a7;
      do
      {
        int16x8_t v111 = vshrq_n_s16(*v109, 1uLL);
        *float v110 = vsraq_n_s16(*v110, *v109, 1uLL);
        ++v110;
        *v109++ = v111;
        v108 += 8;
      }
      while (v108 < v72);
    }
    if ((int)v108 < (int)v125)
    {
      uint64_t v116 = (char *)v125 - v108;
      int v117 = (__int16 *)((char *)a6 + 2 * v108);
      float v118 = (__int16 *)((char *)a7 + 2 * v108);
      do
      {
        int v119 = *v118;
        *v118++ >>= 1;
        *v117++ += v119 >> 1;
        --v116;
      }
      while (v116);
    }
  }
  if (a10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = v64;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: v_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      int v129 = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: h_cnt_split = %d\n", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: d = [\n", buf, 2u);
    }
    BlurM::print2dRoiDBL(a7, 0, 0, v36, v69, v36);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
    }
  }
}

void BlurM::createROI(BlurM *this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, long double *a10, double *a11, int *a12, double *a13, double *a14, double *a15, double *a16, double a17, double a18, double *a19, unsigned __int8 a20)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  double v32 = *(double *)this;
  *(long double *)this = v32 - fmod(*(long double *)this, 2.0);
  double v33 = *a10;
  long double v34 = v33 - fmod(*a10, 2.0);
  *a10 = v34;
  double v35 = *(double *)this;
  long double v36 = log(*(long double *)this);
  double v37 = exp2(ceil(v36 / 0.693147181));
  long double v38 = log(v34);
  double v39 = exp2(ceil(v38 / 0.693147181));
  if (v37 > 256.0) {
    double v37 = 256.0;
  }
  if (v39 <= 256.0) {
    double v40 = v39;
  }
  else {
    double v40 = 256.0;
  }
  double v41 = (v37 - v35) * 0.5;
  double v42 = (v40 - v34) * 0.5;
  *a13 = v37;
  *a14 = v40;
  *(_DWORD *)a11 = 0;
  double v43 = (double)(int)(a4 - v41);
  if (v41 + a8 >= v43)
  {
    uint64_t v44 = 0;
    do
    {
      int v45 = v44;
      a15[v44++] = v43;
      if ((double)(int)v44 == a17) {
        break;
      }
      double v43 = (double)(int)(v43 + *(double *)this);
    }
    while (v41 + a8 >= v43);
    *(_DWORD *)a11 = v45 + 1;
  }
  LODWORD(v46) = 0;
  *a12 = 0;
  double v47 = (double)(int)(a5 - v42);
  if (v42 + a9 >= v47)
  {
    uint64_t v48 = 0;
    do
    {
      int v49 = v48;
      a16[v48++] = v47;
      if ((double)(int)v48 == a18) {
        break;
      }
      double v47 = (double)(int)(v47 + *a10);
    }
    while (v42 + a9 >= v47);
    LODWORD(v46) = v49 + 1;
    *a12 = v46;
  }
  int v50 = *(_DWORD *)a11;
  if (*(int *)a11 >= 1)
  {
    uint64_t v51 = *(unsigned int *)a11;
    double v52 = a15;
    do
    {
      double v53 = *v52;
      if (*v52 < 0.0)
      {
        *double v52 = 0.0;
        double v53 = 0.0;
      }
      if (v53 + *a13 > a2) {
        *double v52 = a2 - *a13;
      }
      ++v52;
      --v51;
    }
    while (v51);
  }
  int v54 = v46 - 1;
  if ((int)v46 >= 1)
  {
    uint64_t v46 = v46;
    uint64_t v55 = a16;
    do
    {
      double v56 = *v55;
      if (*v55 < 0.0)
      {
        *uint64_t v55 = 0.0;
        double v56 = 0.0;
      }
      if (v56 + *a14 > a3) {
        *uint64_t v55 = a3 - *a14;
      }
      ++v55;
      --v46;
    }
    while (v46);
  }
  if (a19)
  {
    double v57 = v40;
    double v58 = a15[v50 - 1];
    double v59 = *a13;
    double v60 = *a15;
    double v65 = *a14;
    double v67 = a16[v54];
    double v61 = *a16;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      long double v62 = *(double *)this;
      *(_DWORD *)int buf = 134217984;
      double v69 = v62;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_subWinint Width = %f\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      long double v63 = *a10;
      *(_DWORD *)int buf = 134217984;
      double v69 = v63;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_subWinint Height = %f\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      double v69 = v37;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_subWinWidthNearestPow2 = %f\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      double v69 = v57;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_subWinHeightNearestPow2 = %f\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      double v69 = v41;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_superWidthPow2Adjust = %f\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      double v69 = v42;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_superHeightPow2Adjust = %f\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      double v69 = v58 + v59 - v60 + 1.0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_superWidthAdjust = %f\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      double v69 = v67 + v65 - v61 + 1.0;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_superHeightAdjust = %f\n", buf, 0xCu);
    }
  }
}

uint64_t BlurM::Prepare(uint64_t result, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v168 = *MEMORY[0x263EF8340];
  if (!result) {
    BlurM::Prepare();
  }
  float v127 = (unsigned char *)(result + 4576);
  char v135 = *(unsigned char *)(result + 4608);
  *(void *)float32x2_t result = 0x100000001;
  *(_DWORD *)(result + 8) = -1;
  int v7 = *(unsigned __int16 *)(result + 12);
  *(_WORD *)(result + 4588) = v7;
  *(_DWORD *)(result + 4592) = *(_DWORD *)(result + 16);
  *(_WORD *)(result + 4596) = *(_WORD *)(result + 20);
  *(_DWORD *)(result + 4598) = *(_DWORD *)(result + 22);
  *(_WORD *)(result + 4602) = *(_WORD *)(result + 154);
  *(_DWORD *)(result + 4604) = *(_DWORD *)(result + 156);
  if ((float)((float)(*(_DWORD *)(result + 4624) * *(_DWORD *)(result + 4620)) / 562900.0) >= 0.2)
  {
    int v9 = (_DWORD *)(result + 4644);
    uint64_t v8 = -1;
    while (v8 != 1)
    {
      float v10 = (float)(*v9 * *(v9 - 1)) / 562900.0;
      ++v8;
      v9 += 5;
      if (v10 < 0.2) {
        goto LABEL_9;
      }
    }
    LOBYTE(v8) = 2;
  }
  else
  {
    LOBYTE(v8) = 0;
  }
LABEL_9:
  uint64_t v11 = 0;
  uint64_t v12 = result + 160;
  unsigned char *v127 = v8;
  uint64_t v13 = result + 576;
  int v14 = (double *)(result + 704);
  int16x8_t v15 = &_os_log_internal;
  *(int8x8_t *)(result + 458pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v7 == 1), 0x1FuLL)), (int8x8_t)0xBFF7C1363F75160ALL, (int8x8_t)0x40AA70333F86ADB4);
  __asm { FMOV            V0.4S, #30.0 }
  long long v124 = _Q0;
  uint64_t v134 = result;
  uint64_t v138 = result + 160;
  do
  {
    uint64_t v21 = v12 + 1472 * v11;
    uint64_t v22 = (_DWORD *)(v21 + 1444);
    *(_OWORD *)(v21 + 144pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *(_OWORD *)(v21 + 1456) = v124;
    uint64_t v23 = result + 20 * v11;
    unsigned int v24 = *(_DWORD *)(v23 + 4620);
    unsigned int v25 = *(_DWORD *)(v23 + 4624);
    *(_OWORD *)(v21 + 256) = xmmword_2469DB1F0;
    *(_OWORD *)(v21 + 288) = xmmword_2469DB200;
    *(void *)(v21 + 272) = 0x4010000000000000;
    *(void *)(v21 + 304) = 0x4010000000000000;
    *(_DWORD *)(v21 + 144pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
    double v26 = (float)((float)((float)((float)v24 * 0.45) * 0.5) + 0.0);
    *(double *)uint64_t v21 = v26;
    double v27 = (float)((float)((float)((float)v25 * 0.56) * 0.5) + 0.0);
    *(double *)(v21 + 32) = v27;
    double v28 = (float)((float)v24 * 0.55) + v26;
    *(double *)(v21 + 64) = v28;
    *(void *)&double v29 = 1054951342;
    double v30 = (float)((float)v25 * 0.44) + v27;
    double v31 = v28 - v26;
    *(double *)(v21 + 128) = v31;
    int16x4x2_t v132 = (double *)(v21 + 128);
    *(double *)(v21 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v30 - v27;
    int16x4x2_t v131 = (double *)(v21 + 160);
    *(double *)(v21 + 96) = v30;
    *(double *)(v21 + 192) = v31 / 5.0;
    *(double *)(v21 + 224) = (v30 - v27) / 3.0;
    if (!*(_WORD *)(result + 156))
    {
      *uint64_t v22 = 0;
      *(void *)(v21 + 8) = 0;
      int v45 = (void *)(v12 + 1472 * v11);
      v45[5] = 0;
      v45[9] = 0;
      v45[13] = 0;
      v45[17] = 0;
      v45[21] = 0;
      v45[25] = 0;
      uint64_t v44 = v45 + 29;
      goto LABEL_14;
    }
    *uint64_t v22 = 1;
    int v32 = *(unsigned __int16 *)(result + 26);
    double v33 = (double)(v24 * v32 / 0x3E8);
    int v34 = *(unsigned __int16 *)(result + 58);
    uint64_t v35 = v12 + 1472 * v11;
    double v36 = (double)((*(unsigned __int16 *)(result + 90) + v32) * v24 / 0x3E8);
    double v37 = v36 - v33;
    double v29 = 0.25;
    double v38 = (v36 - v33) * 0.25;
    *(double *)(v35 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v38;
    double v39 = (void *)(v35 + 200);
    *((double *)v39 - 16) = v36;
    double v40 = (double)(v25 * v34 / 0x3E8);
    *((double *)v39 - 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v40;
    unsigned int v41 = (*(unsigned __int16 *)(result + 122) + v34) * v25;
    *((double *)v39 - 8) = v37;
    double v42 = (double)(v41 / 0x3E8);
    *((double *)v39 - 12) = v42;
    *(double *)(v21 + 8) = v33;
    *((double *)v39 - 4) = v42 - v40;
    double v43 = (v42 - v40) * 0.25;
    *((double *)v39 + 4) = v43;
    uint64_t v44 = v39 + 4;
    if (v38 * v43 > 65536.0)
    {
      *uint64_t v22 = 0;
      *(void *)(v21 + 8) = 0;
      *(v39 - 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(v39 - 16) = 0;
      *(v39 - 12) = 0;
      *(v39 - 8) = 0;
      *(v39 - 4) = 0;
      void *v39 = 0;
LABEL_14:
      void *v44 = 0;
    }
    uint64_t v46 = (_DWORD *)(v21 + 1448);
    uint64_t v133 = v12 + 1472 * v11;
    if (*(_WORD *)(result + 158))
    {
      *uint64_t v46 = 1;
      double v47 = (double)(v24 * *(unsigned __int16 *)(result + 26) / 0x3E8);
      *(double *)(v21 + 16) = v47;
      double v48 = (double)(v25 * *(unsigned __int16 *)(result + 58) / 0x3E8);
      int v49 = (double *)(v12 + 1472 * v11);
      v49[6] = v48;
      double v50 = (double)((*(unsigned __int16 *)(result + 120) + *(unsigned __int16 *)(result + 56)) * v24 / 0x3E8);
      unsigned int v51 = (*(unsigned __int16 *)(result + 152) + *(unsigned __int16 *)(result + 88)) * v25 / 0x3E8;
      v49[10] = v50;
      v49[14] = (double)v51;
      double v52 = v50 - v47;
      double v53 = (double)v51 - v48;
      double v54 = v52 * 0.25;
      double v55 = v53 * 0.25;
    }
    else
    {
      *uint64_t v46 = 0;
      *(void *)(v21 + 16) = 0;
      double v56 = (void *)(v12 + 1472 * v11);
      v56[6] = 0;
      v56[10] = 0;
      v56[14] = 0;
      double v52 = 0.0;
      double v53 = 0.0;
      double v54 = 0.0;
      double v55 = 0.0;
    }
    uint64_t v57 = 0;
    double v58 = (double *)(v12 + 1472 * v11);
    v58[18] = v52;
    v58[22] = v53;
    v58[26] = v54;
    v58[30] = v55;
    unsigned int v128 = v25;
    unsigned int v129 = v24;
    double v59 = (double)v24;
    double v60 = (double)v25;
    int v125 = v14;
    uint64_t v126 = v13;
    uint64_t v137 = v11;
    do
    {
      long long v136 = v14;
      if (*(_DWORD *)(v12 + 1472 * v11 + 4 * v57 + 1440) == 1)
      {
        float v61 = *(double *)(v133 + 8 * v57);
        double v62 = roundf(v61);
        *(double *)(v133 + 8 * v57) = v62;
        uint64_t v63 = v138 + 1472 * v11;
        uint64_t v64 = v63 + 8 * v57;
        double v66 = *(double *)(v64 + 224);
        uint64_t v65 = v64 + 224;
        float v67 = *(double *)(v65 - 192);
        double v68 = roundf(v67);
        *(double *)(v65 - 192) = v68;
        float v69 = *(double *)(v65 - 96);
        *(double *)(v65 - 96) = roundf(v69);
        float v70 = *(double *)(v65 - 64);
        *(double *)(v65 - 64) = roundf(v70);
        float v71 = *(double *)(v65 - 160);
        double v72 = roundf(v71);
        *(double *)(v65 - 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v72;
        float v73 = *(double *)(v65 - 128);
        double v74 = roundf(v73);
        *(double *)(v65 - 128) = v74;
        float v75 = *(double *)(v65 - 32);
        *(double *)(v65 - 32) = roundf(v75);
        float v76 = v66;
        *(double *)uint64_t v65 = roundf(v76);
        uint64_t v77 = v63 + 4 * v57;
        float v78 = (int *)(v77 + 320);
        int v79 = (uint64_t *)(v65 + 128);
        __int16 v80 = (uint64_t *)(v65 + 160);
        uint64_t v139 = v57;
        long long v140 = (int *)(v77 + 336);
        LOBYTE(v122) = v135;
        BlurM::createROI((BlurM *)(v65 - 32), v59, v60, v62, v68, v29, a7, v72, v74, (long double *)v65, (double *)(v77 + 320), (int *)(v77 + 336), (double *)(v65 + 128), (double *)(v65 + 160), (double *)(v63 + (v57 << 8) + 416), (double *)(v63 + (v57 << 8) + 544), *(double *)(v65 + 32), *(double *)(v65 + 64), v122,
          v123);
        unsigned int v81 = *(unsigned __int16 *)(v134 + 24);
        float v82 = *(float *)(v134 + 4584) + (float)(*(float *)(v134 + 4580) * (float)v81);
        double v83 = (float *)(v77 + 1456);
        *(float *)(v77 + 1456) = v82;
        double v84 = *(double *)(v65 - 32);
        long double v85 = *(double *)v65;
        double v86 = v84 * *(double *)v65;
        double v87 = *v132 * *v131;
        if (v86 < v87)
        {
          float v82 = v86 / v87 * v82;
          *double v83 = v82;
        }
        uint64_t v11 = v137;
        if (v82 > 30.0)
        {
          *double v83 = 30.0;
          float v82 = 30.0;
        }
        int v88 = *(unsigned __int16 *)(v134 + 12);
        switch(*(_WORD *)(v134 + 12))
        {
          case 0:
          case 2:
          case 4:
            unsigned __int16 v89 = v139 - 1;
            if (v81 < 6 || (unsigned __int16)(v139 - 1) < 2u || v82 < 4.0)
            {
              if ((((_WORD)v139 - 1) & 0xFFFE) != 0) {
                float v82 = 4.0;
              }
              else {
                float v82 = 0.5;
              }
              if (v81 < 6) {
                float v82 = 0.1;
              }
              *double v83 = v82;
            }
            if (v88 == 1) {
              goto LABEL_37;
            }
            break;
          case 1:
            unsigned __int16 v89 = v139 - 1;
LABEL_37:
            if (v81 < 0x1F || v89 < 2u || v82 < 1.0)
            {
              float v90 = flt_2469DB1C0[v89 < 2u];
              if (v81 < 0x1F) {
                float v90 = 0.1;
              }
              *double v83 = v90;
            }
            break;
          default:
            break;
        }
        uint64_t v57 = v139;
        if (v135)
        {
          uint64_t v130 = v83;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            long long v91 = "OTHER";
            if ((unsigned __int16)v139 <= 2u) {
              long long v91 = off_2651E91C0[(__int16)v139];
            }
            int v92 = *(_DWORD *)(v134 + 16);
            uint64_t v93 = *(void *)(v133 + 8 * v139);
            int v94 = *v127;
            uint64_t v95 = *(void *)(v65 - 192);
            uint64_t v96 = *(void *)(v65 - 160);
            uint64_t v97 = *(void *)(v65 - 128);
            uint64_t v98 = *(void *)(v65 - 96);
            uint64_t v99 = *(void *)(v65 - 64);
            uint64_t v100 = *(void *)(v65 + 32);
            uint64_t v101 = *(void *)(v65 + 64);
            *(_DWORD *)int buf = 67113218;
            *(_DWORD *)BOOL v142 = v88;
            *(_WORD *)&v142[4] = 1024;
            *(_DWORD *)&v142[6] = v92;
            *(_WORD *)uint64_t v143 = 2048;
            *(void *)&v143[2] = v137;
            LOWORD(v144) = 1024;
            *(_DWORD *)((char *)&v144 + 2) = v94;
            HIWORD(v144) = 1024;
            *(_DWORD *)uint64_t v145 = v129;
            *(_WORD *)&v145[4] = 1024;
            *(_DWORD *)&v145[6] = v128;
            __int16 v146 = 2048;
            uint64_t v147 = v93;
            __int16 v148 = 2048;
            uint64_t v149 = v95;
            __int16 v150 = 2048;
            uint64_t v151 = v96;
            __int16 v152 = 2048;
            uint64_t v153 = v97;
            __int16 v154 = 2048;
            uint64_t v155 = v98;
            __int16 v156 = 2048;
            uint64_t v157 = v99;
            __int16 v158 = 2048;
            double v159 = v84;
            __int16 v160 = 2048;
            long double v161 = v85;
            __int16 v162 = 2080;
            v163 = v91;
            __int16 v164 = 2048;
            uint64_t v165 = v100;
            __int16 v166 = 2048;
            uint64_t v167 = v101;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: CH%d #%08d PyrLvl[%zu]UseLvl[%d]:%dx%d [%.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f] - %s:%.2fx%.2f\n", buf, 0x98u);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            double v102 = *v130;
            int v103 = *(unsigned __int16 *)(v134 + 24);
            *(_DWORD *)int buf = 134218240;
            *(double *)BOOL v142 = v102;
            *(_WORD *)&v142[8] = 1024;
            *(_DWORD *)uint64_t v143 = v103;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: blurTh = %f (float lux = %d)\n", buf, 0x12u);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            int v104 = *v78;
            *(_DWORD *)int buf = 67109120;
            *(_DWORD *)BOOL v142 = v104;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_TileNumX = %d\n", buf, 8u);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_TileStartX = [\n", buf, 2u);
          }
          int v105 = *v78;
          if (*v78 >= 1)
          {
            uint64_t v106 = 0;
            do
            {
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v107 = *(void *)(v13 + 8 * v106);
                *(_DWORD *)int buf = 134217984;
                *(void *)BOOL v142 = v107;
                _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: %.2f\n", buf, 0xCu);
                int v105 = *v78;
              }
              ++v106;
            }
            while (v106 < v105);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: \n ", buf, 2u);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            int v108 = *v140;
            *(_DWORD *)int buf = 67109120;
            *(_DWORD *)BOOL v142 = v108;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_TileNumY = %d\n", buf, 8u);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile_TileStartY = [\n", buf, 2u);
          }
          int v109 = *v140;
          if (*v140 >= 1)
          {
            uint64_t v110 = 0;
            do
            {
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                double v111 = v136[v110];
                *(_DWORD *)int buf = 134217984;
                *(double *)BOOL v142 = v111;
                _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: %.2f\n", buf, 0xCu);
                int v109 = *v140;
              }
              ++v110;
            }
            while (v110 < v109);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: \n ", buf, 2u);
          }
          uint64_t v11 = v137;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: AFTile = [\n", buf, 2u);
          }
          int v112 = *v140;
          if (*v140 >= 1)
          {
            uint64_t v113 = 0;
            int v114 = *v78;
            do
            {
              if (v114 >= 1)
              {
                uint64_t v115 = 0;
                uint64_t v116 = (uint64_t *)(v138 + 1472 * v11 + (v139 << 8) + 8 * v113 + 544);
                do
                {
                  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v117 = *(void *)(v13 + 8 * v115);
                    uint64_t v118 = *v116;
                    uint64_t v119 = *v79;
                    uint64_t v120 = *v80;
                    *(_DWORD *)int buf = 134218752;
                    *(void *)BOOL v142 = v117;
                    *(_WORD *)&v142[8] = 2048;
                    *(void *)uint64_t v143 = v118;
                    *(_WORD *)&v143[8] = 2048;
                    uint64_t v144 = v119;
                    *(_WORD *)uint64_t v145 = 2048;
                    *(void *)&v145[2] = v120;
                    _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: [%.2f, %.2f, %.2f, %.2f];\n",
                      buf,
                      0x2Au);
                    int v114 = *v78;
                  }
                  ++v115;
                }
                while (v115 < v114);
                int v112 = *v140;
                uint64_t v11 = v137;
              }
              ++v113;
            }
            while (v113 < v112);
          }
          BOOL v121 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          uint64_t v57 = v139;
          if (v121)
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
            uint64_t v57 = v139;
          }
        }
      }
      ++v57;
      v13 += 256;
      int v14 = v136 + 32;
      uint64_t v12 = v138;
    }
    while (v57 != 4);
    ++v11;
    uint64_t v13 = v126 + 1472;
    int v14 = v125 + 184;
    float32x2_t result = v134;
  }
  while (v11 != 3);
  return result;
}

void BlurM::Process(int *a1, uint64_t a2)
{
  uint64_t v181 = *MEMORY[0x263EF8340];
  if (!a1) {
    BlurM::Process();
  }
  uint64_t v2 = a1;
  int v3 = *a1;
  if (*a1 == 1)
  {
    uint64_t v153 = (unsigned __int8 *)(a1 + 1144);
    uint64_t v118 = (unsigned __int8 *)(a1 + 2531);
    unsigned int v121 = *((unsigned __int8 *)a1 + 4608);
    if (a1[1152])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = v2[4];
        int v6 = v2[1169];
        int v7 = v2[1170];
        int v8 = v2[1153];
        *(_DWORD *)int buf = 67109888;
        *(_DWORD *)unsigned int v174 = v5;
        *(_WORD *)&v174[4] = 1024;
        *(_DWORD *)&v174[6] = v6;
        LOWORD(v175) = 1024;
        *(_DWORD *)((char *)&v175 + 2) = v7;
        HIWORD(v175) = 1024;
        *(_DWORD *)uint64_t v176 = v8;
        _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: #%08d (%4d x %4d) inputCFIndex Count = %d\n", buf, 0x1Au);
      }
      if (v2[1153])
      {
        unint64_t v9 = 0;
        float v10 = &_os_log_internal;
        do
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            double v11 = *(double *)(a2 + 8 * v9);
            uint64_t v12 = &v2[5 * v9];
            int v13 = *((unsigned __int8 *)v12 + 4616);
            int v14 = v12[1155];
            int v15 = v12[1156];
            int v16 = v12[1158];
            LODWORD(v12) = v12[1157];
            *(_DWORD *)int buf = 134219520;
            *(void *)unsigned int v174 = v9;
            *(_WORD *)&v174[8] = 2048;
            double v175 = v11;
            *(_WORD *)uint64_t v176 = 1024;
            *(_DWORD *)&v176[2] = v13;
            *(_WORD *)__int16 v177 = 1024;
            *(_DWORD *)&v177[2] = v14;
            *(_WORD *)unsigned int v178 = 1024;
            *(_DWORD *)&v178[2] = v15;
            *(_WORD *)long long v179 = 1024;
            *(_DWORD *)&v179[2] = v16;
            LOWORD(v180[0]) = 1024;
            *(_DWORD *)((char *)v180 + 2) = v12;
            _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "BlurM: input[%zu] = %p (level = %d) %d x %d, stride = %d, size = %d\n", buf, 0x34u);
          }
          uint64_t v17 = *(unsigned __int8 **)(a2 + 8 * v9);
          if (v17)
          {
            uint64_t v18 = &v2[5 * v9];
            uint64_t v19 = v18[1155];
            if (v19)
            {
              int16x8_t v20 = &v2[5 * v9];
              if (v20[1156])
              {
                uint64_t v157 = v18 + 1155;
                uint64_t v155 = v20 + 1156;
                uint64_t v21 = &v17[v19 - 1];
                uint64_t v22 = &v2[5 * v9 + 1158];
                uint64_t v23 = 4;
                do
                {
                  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                  {
                    int v24 = *v17;
                    int v25 = v17[1];
                    int v26 = v17[2];
                    int v27 = v17[3];
                    int v28 = *(v21 - 3);
                    int v29 = *(v21 - 2);
                    int v30 = *(v21 - 1);
                    int v31 = *v21;
                    *(_DWORD *)int buf = 67110912;
                    *(_DWORD *)unsigned int v174 = v24;
                    *(_WORD *)&v174[4] = 1024;
                    *(_DWORD *)&v174[6] = v25;
                    LOWORD(v175) = 1024;
                    *(_DWORD *)((char *)&v175 + 2) = v26;
                    HIWORD(v175) = 1024;
                    *(_DWORD *)uint64_t v176 = v27;
                    *(_WORD *)&v176[4] = 1024;
                    *(_DWORD *)__int16 v177 = v28;
                    *(_WORD *)&v177[4] = 1024;
                    *(_DWORD *)unsigned int v178 = v29;
                    *(_WORD *)&v178[4] = 1024;
                    *(_DWORD *)long long v179 = v30;
                    *(_WORD *)&v179[4] = 1024;
                    v180[0] = v31;
                    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "BlurM: %3d %3d %3d %3d ... %3d %3d %3d %3d\n", buf, 0x32u);
                  }
                  uint64_t v32 = *v22;
                  v17 += v32;
                  v21 += v32;
                  --v23;
                }
                while (v23);
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)int buf = 0;
                  _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "BlurM: ... ... ... ... ... ... ... ... ...\n", buf, 2u);
                  uint64_t v32 = *v22;
                }
                double v33 = (unsigned __int8 *)(*(void *)(a2 + 8 * v9) + (*v155 - 4) * v32);
                int v34 = &v33[*v157 - 1];
                uint64_t v35 = 4;
                do
                {
                  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                  {
                    int v36 = *v33;
                    int v37 = v33[1];
                    int v38 = v33[2];
                    int v39 = v33[3];
                    int v40 = *(v34 - 3);
                    int v41 = *(v34 - 2);
                    int v42 = *(v34 - 1);
                    int v43 = *v34;
                    *(_DWORD *)int buf = 67110912;
                    *(_DWORD *)unsigned int v174 = v36;
                    *(_WORD *)&v174[4] = 1024;
                    *(_DWORD *)&v174[6] = v37;
                    LOWORD(v175) = 1024;
                    *(_DWORD *)((char *)&v175 + 2) = v38;
                    HIWORD(v175) = 1024;
                    *(_DWORD *)uint64_t v176 = v39;
                    *(_WORD *)&v176[4] = 1024;
                    *(_DWORD *)__int16 v177 = v40;
                    *(_WORD *)&v177[4] = 1024;
                    *(_DWORD *)unsigned int v178 = v41;
                    *(_WORD *)&v178[4] = 1024;
                    *(_DWORD *)long long v179 = v42;
                    *(_WORD *)&v179[4] = 1024;
                    v180[0] = v43;
                    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "BlurM: %3d %3d %3d %3d ... %3d %3d %3d %3d\n", buf, 0x32u);
                    uint64_t v32 = *v22;
                  }
                  v33 += v32;
                  v34 += v32;
                  --v35;
                }
                while (v35);
              }
            }
          }
          ++v9;
        }
        while (v9 < v2[1153]);
      }
    }
    uint64_t v131 = a2;
    uint64_t v44 = v2 + 40;
    int v45 = v153;
    int v46 = *v153;
    unsigned int v128 = (float *)(v2 + 1171);
    bzero(v2 + 1171, 0x400uLL);
    uint64_t v117 = v2 + 1427;
    memcpy(v2 + 1427, v2 + 40, 0x1160uLL);
    double v47 = 0;
    __dst = (char *)(v2 + 35309);
    double v48 = (BlurM *)(v2 + 51693);
    uint64_t v151 = (BlurM *)(v2 + 84461);
    __int16 v146 = (BlurM *)(v2 + 100845);
    uint64_t v147 = (BlurM *)(v2 + 92653);
    uint64_t v144 = (int16x8_t *)(v2 + 27117);
    uint64_t v145 = (BlurM *)(v2 + 18925);
    uint64_t v143 = (int16x8_t *)(v2 + 10731);
    BOOL v142 = v2 + 133613;
    long long v124 = (const __int16 *)(v2 + 18923);
    int v125 = (__int16 *)(v2 + 125421);
    char v135 = (BlurM *)(v2 + 135661);
    long long v136 = (BlurM *)(v2 + 117229);
    uint64_t v133 = (BlurM *)(v2 + 139757);
    uint64_t v134 = (BlurM *)(v2 + 137709);
    int16x4x2_t v132 = (BlurM *)(v2 + 141805);
    *(void *)uint64_t v115 = v2;
    uint64_t v122 = (__int16 *)(v2 + 145901);
    unsigned __int8 v123 = (BlurM *)(v2 + 143853);
    int v49 = (__int16 *)v121;
    uint64_t v126 = v2 + 40;
    uint64_t v130 = &v2[5 * v46 + 1158];
    uint64_t v138 = (BlurM *)(v2 + 51693);
    __int16 v152 = (BlurM *)(v2 + 109037);
    do
    {
      if (v44[368 * *v45 + 360 + (void)v47] == 1)
      {
        double v50 = &v44[368 * *v45];
        uint64_t v119 = v50[(void)v47 + 84];
        if ((int)v119 >= 1)
        {
          uint64_t v137 = 0;
          int v51 = 0;
          double v52 = (double *)&v50[2 * (void)v47];
          uint64_t v53 = (int)v52[48];
          double v54 = (__int16 *)(int)v52[44];
          uint64_t v129 = v44[368 * *v45 + 80 + (void)v47];
          float v127 = &v128[(void)v47];
          if ((int)v54 >= 0) {
            int v55 = (int)v52[44];
          }
          else {
            int v55 = v54 + 1;
          }
          int v56 = v54 + 3;
          if ((int)v54 >= 0) {
            int v56 = (int)v54;
          }
          if ((int)v53 >= 0) {
            int v57 = v53;
          }
          else {
            int v57 = v53 + 1;
          }
          int v158 = v57 >> 1;
          int v58 = v55 >> 1;
          unsigned int v156 = v56 >> 2;
          int v154 = (int)v53 / 4;
          uint64_t v139 = v53;
          unsigned int v159 = v55 >> 1;
          long long v140 = v47;
          do
          {
            if ((int)v129 >= 1)
            {
              uint64_t v59 = 0;
              uint64_t v60 = v51;
              do
              {
                uint64_t v141 = v60;
                uint64_t v61 = (uint64_t)&v44[368 * *v45 + 104 + 64 * (void)v47];
                int v149 = (int)*(double *)(v61 + 8 * v137 + 128);
                uint64_t v150 = v59;
                __int16 v148 = (unsigned __int8 *)(int)*(double *)(v61 + 8 * v59);
                double v62 = &_os_log_internal;
                if ((int)v53 >= 1)
                {
                  uint64_t v63 = v53;
                  uint64_t v64 = __dst;
                  double v47 = v45;
                  int v65 = (int)*(double *)(v61 + 8 * v137 + 128);
                  do
                  {
                    memcpy(v64, (const void *)(*(void *)(v131 + 8 * *v47) + (int)v148 + (*v130 * v65++)), (int)v54);
                    v64 += (int)v54;
                    --v63;
                  }
                  while (v63);
                  uint64_t v66 = 0;
                  double v48 = v138;
                  LODWORD(v53) = v139;
                  float v67 = v138;
                  double v68 = (unsigned __int8 *)__dst;
                  int v45 = v47;
                  int v49 = (__int16 *)v121;
                  LODWORD(v47) = v140;
                  double v62 = &_os_log_internal;
                  int v58 = v159;
                  do
                  {
                    if ((int)v54 >= 1)
                    {
                      float v69 = v54;
                      float v70 = v67;
                      float v71 = v68;
                      do
                      {
                        __int16 v72 = *v71++;
                        *(_WORD *)float v70 = 16 * v72;
                        float v70 = (BlurM *)((char *)v70 + 2);
                        float v69 = (__int16 *)((char *)v69 - 1);
                      }
                      while (v69);
                    }
                    ++v66;
                    v68 += (int)v54;
                    float v67 = (BlurM *)((char *)v67 + 2 * (int)v54);
                  }
                  while (v66 != v139);
                }
                if (v49)
                {
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67110144;
                    *(_DWORD *)unsigned int v174 = v54;
                    *(_WORD *)&v174[4] = 1024;
                    *(_DWORD *)&v174[6] = v53;
                    LOWORD(v175) = 1024;
                    *(_DWORD *)((char *)&v175 + 2) = v47;
                    HIWORD(v175) = 1024;
                    *(_DWORD *)uint64_t v176 = v137;
                    *(_WORD *)&v176[4] = 1024;
                    *(_DWORD *)__int16 v177 = v150;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: PYRYU8[%dx%df][OBJ=%d][Y=%d][X=%d]=[\n", buf, 0x20u);
                  }
                  BlurM::printPyrRoiU8(*(BlurM **)(v131 + 8 * *v45), v148, v149, (int)v54, v53, *v130);
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
                  }
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67110144;
                    *(_DWORD *)unsigned int v174 = v54;
                    *(_WORD *)&v174[4] = 1024;
                    *(_DWORD *)&v174[6] = v53;
                    LOWORD(v175) = 1024;
                    *(_DWORD *)((char *)&v175 + 2) = v47;
                    HIWORD(v175) = 1024;
                    *(_DWORD *)uint64_t v176 = v137;
                    *(_WORD *)&v176[4] = 1024;
                    *(_DWORD *)__int16 v177 = v150;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: ROIS16[%dx%df][OBJ=%d][Y=%d][X=%d]=[\n", buf, 0x20u);
                  }
                  BlurM::print2dRoiDBL(v48, 0, 0, (int)v54, v53, (int)v54);
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
                  }
                  LOBYTE(v111) = (_BYTE)v49;
                  BlurM::hlwt2(v48, v54, v53, v151, v147, v146, v152, v145, v144, v111, v115[0]);
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v158;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: height_l1 = %d\n", buf, 8u);
                  }
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v58;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: width_l1 = %d\n", buf, 8u);
                  }
                  float v73 = v45;
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: a1 = [\n", buf, 2u);
                  }
                  BlurM::print2dRoiDBL(v151, 0, 0, v159, v158, v159);
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
                  }
                }
                else
                {
                  float v73 = v45;
                  LOBYTE(v111) = (_BYTE)v49;
                  BlurM::hlwt2(v48, v54, v53, v151, v147, v146, v152, v145, v144, v111, v115[0]);
                }
                double v74 = (__int16 *)v159;
                int v75 = v158;
                BlurM::calcEmap(v147, (__int16 *)v146, (__int16 *)v152, (__int16 *)v159, v158, v136, v49);
                __int16 v172 = 0;
                BlurM::calcMean(v152, (__int16 *)v159, v158, &v172, v49);
                if (v49)
                {
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v172;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: d1_median = %d\n", buf, 8u);
                  }
                  uint64_t v77 = v136;
                  int v79 = v73;
                  int v78 = v154;
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v158;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: height_d1 = %d\n", buf, 8u);
                  }
                  double v74 = (__int16 *)v159;
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v159;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: width_d1 = %d\n", buf, 8u);
                  }
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: d1 = [\n", buf, 2u);
                  }
                  BlurM::print2dRoiDBL(v152, 0, 0, v159, v158, v159);
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
                  }
                  *(_DWORD *)uint64_t v171 = 0;
                  BlurM::calcNoiseMAD_Mean(v152, (__int16 *)v159, v158, &v172, &v171[1], v171, v143, v49, v105);
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v171[1];
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: d1_mad_median = %d\n", buf, 8u);
                  }
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v171[0];
                    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, "BlurM: d1_mad_sigma = %d\n", buf, 8u);
                  }
                  __int16 v80 = v62;
                  float v76 = v79;
                  __int16 v170 = 0;
                  int v75 = v158;
                  BlurM::calcMean(v136, (__int16 *)v159, v158, &v170, v49);
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v170;
                    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: emap1_median = %d\n", buf, 8u);
                  }
                }
                else
                {
                  float v76 = v73;
                  *(_DWORD *)uint64_t v171 = 0;
                  BlurM::calcNoiseMAD_Mean(v152, (__int16 *)v159, v158, &v172, &v171[1], v171, v143, v49, v105);
                  __int16 v170 = 0;
                  BlurM::calcMean(v136, (__int16 *)v159, v158, &v170, v49);
                  uint64_t v77 = v136;
                  int v78 = v154;
                }
                __int16 v169 = 1;
                __int16 v168 = 0;
                LOBYTE(v106) = (_BYTE)v49;
                BlurM::calcNoiseFilter(v77, v74, v75, &v170, &v169, &v168, v171, (BlurM *)v125, v106, v112);
                int v167 = 2;
                BlurM::calcEmax((BlurM *)v125, v74, v75, &v167, v142, (__int16 *)v156, v124, v49, v107);
                float v166 = 0.0;
                BlurM::calcSharpness((BlurM *)v142, (__int16 *)v156, v78, &v166, (float *)v49);
                LOBYTE(v113) = (_BYTE)v49;
                BlurM::hlwt2(v151, v74, v75, v135, v134, v133, v132, v145, v144, v113, v116);
                if (v49)
                {
                  double v84 = &_os_log_internal;
                  double v48 = v138;
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v78;
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: height_l2 = %d\n", buf, 8u);
                  }
                  int v45 = v76;
                  unsigned int v81 = v123;
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v156;
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: width_l2 = %d\n", buf, 8u);
                  }
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: a2 = [\n", buf, 2u);
                  }
                  BlurM::print2dRoiDBL(v135, 0, 0, v156, v78, v156);
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
                  }
                  int v78 = v154;
                  BlurM::calcEmap(v134, (__int16 *)v133, (__int16 *)v132, (__int16 *)v156, v154, v123, v49);
                  __int16 v165 = 0;
                  BlurM::calcMean(v132, (__int16 *)v156, v154, &v165, v49);
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v165;
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: d2_median = %d\n", buf, 8u);
                  }
                  uint64_t v83 = v141;
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v154;
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: height_d2 = %d\n", buf, 8u);
                  }
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v156;
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: width_d2 = %d\n", buf, 8u);
                  }
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: d2 = [\n", buf, 2u);
                  }
                  BlurM::print2dRoiDBL(v132, 0, 0, v156, v154, v156);
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
                  }
                  *(_DWORD *)__int16 v164 = 0;
                  float v82 = (__int16 *)v156;
                  BlurM::calcNoiseMAD_Mean(v132, (__int16 *)v156, v154, &v165, &v164[1], v164, v143, v49, v108);
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v164[1];
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: d2_mad_median = %d\n", buf, 8u);
                  }
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v164[0];
                    _os_log_impl(&dword_24680F000, v84, OS_LOG_TYPE_DEFAULT, "BlurM: d2_mad_sigma = %d\n", buf, 8u);
                  }
                  __int16 v163 = 0;
                  BlurM::calcMean(v123, (__int16 *)v156, v154, &v163, v49);
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)int buf = 67109120;
                    *(_DWORD *)unsigned int v174 = v163;
                    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: emap2_median = %d\n", buf, 8u);
                  }
                }
                else
                {
                  unsigned int v81 = v123;
                  BlurM::calcEmap(v134, (__int16 *)v133, (__int16 *)v132, (__int16 *)v156, v78, v123, v49);
                  __int16 v165 = 0;
                  BlurM::calcMean(v132, (__int16 *)v156, v78, &v165, v49);
                  *(_DWORD *)__int16 v164 = 0;
                  BlurM::calcNoiseMAD_Mean(v132, (__int16 *)v156, v78, &v165, &v164[1], v164, v143, v49, v108);
                  __int16 v163 = 0;
                  BlurM::calcMean(v123, (__int16 *)v156, v78, &v163, v49);
                  double v48 = v138;
                  int v45 = v76;
                  float v82 = (__int16 *)v156;
                  uint64_t v83 = v141;
                }
                __int16 v162 = 0;
                LOBYTE(v109) = (_BYTE)v49;
                BlurM::calcNoiseFilter(v81, v82, v78, &v163, &v169, &v162, v164, (BlurM *)v122, v109, v114);
                *(_DWORD *)int buf = 0;
                BlurM::calcSharpness((BlurM *)v122, v82, v154, (float *)buf, (float *)v49);
                uint64_t v44 = v126;
                float v161 = *(float *)&v126[368 * *v45 + 364 + (void)v140];
                uint64_t v160 = 0;
                double v47 = v140;
                BlurM::detectBlur((BlurM *)v142, v122, v82, v154, &v161, (float *)&v160 + 1, (float *)&v160, (float *)v49, v110);
                v127[16 * v83] = v166;
                long double v85 = &v128[16 * v83 + (void)v140];
                uint8_t v85[4] = *(float *)buf;
                v85[8] = *((float *)&v160 + 1);
                *((_DWORD *)v85 + 12) = v160;
                uint64_t v60 = v83 + 1;
                uint64_t v59 = v150 + 1;
                uint64_t v53 = v139;
                int v58 = v159;
              }
              while (v150 + 1 != v129);
              int v51 = v60;
            }
            ++v137;
          }
          while (v137 != v119);
        }
      }
      ++v47;
    }
    while (v47 != (unsigned __int8 *)4);
    if (v45[32])
    {
      uint64_t v86 = 0;
      double v87 = (float *)(*(void *)v115 + 4700);
      int v88 = (float *)(*(void *)v115 + 4716);
      unsigned __int16 v89 = (float *)(*(void *)v115 + 4732);
      float v90 = &_os_log_internal;
      do
      {
        if (v117[368 * *v118 + 360 + v86] == 1)
        {
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            long long v91 = "OTHER";
            if ((unsigned __int16)v86 <= 2u) {
              long long v91 = off_2651E91C0[(__int16)v86];
            }
            *(_DWORD *)int buf = 136315138;
            *(void *)unsigned int v174 = v91;
            _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: Output[OBJ=%s]:\n", buf, 0xCu);
          }
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: sharpnessL1 = [\n", buf, 2u);
          }
          uint64_t v92 = 0;
          uint64_t v93 = v128;
          do
          {
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              double v94 = *v93;
              *(_DWORD *)int buf = 134218240;
              *(void *)unsigned int v174 = v92;
              *(_WORD *)&v174[8] = 2048;
              double v175 = v94;
              _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: [%2zu %010.6f];\n", buf, 0x16u);
            }
            ++v92;
            v93 += 16;
          }
          while (v92 != 16);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
          }
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: sharpnessL2 = [\n", buf, 2u);
          }
          uint64_t v95 = 0;
          uint64_t v96 = v87;
          do
          {
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              double v97 = *v96;
              *(_DWORD *)int buf = 134218240;
              *(void *)unsigned int v174 = v95;
              *(_WORD *)&v174[8] = 2048;
              double v175 = v97;
              _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: [%2zu %010.6f];\n", buf, 0x16u);
            }
            ++v95;
            v96 += 16;
          }
          while (v95 != 16);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
          }
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: blurConf = [\n", buf, 2u);
          }
          uint64_t v98 = 0;
          uint64_t v99 = v88;
          do
          {
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              double v100 = *v99;
              *(_DWORD *)int buf = 134218240;
              *(void *)unsigned int v174 = v98;
              *(_WORD *)&v174[8] = 2048;
              double v175 = v100;
              _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: [%2zu %010.6f];\n", buf, 0x16u);
            }
            ++v98;
            v99 += 16;
          }
          while (v98 != 16);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
          }
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: blurExtent = [\n", buf, 2u);
          }
          uint64_t v101 = 0;
          double v102 = v89;
          do
          {
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              double v103 = *v102;
              *(_DWORD *)int buf = 134218240;
              *(void *)unsigned int v174 = v101;
              *(_WORD *)&v174[8] = 2048;
              double v175 = v103;
              _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: [%2zu %010.6f];\n", buf, 0x16u);
            }
            ++v101;
            v102 += 16;
          }
          while (v101 != 16);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_24680F000, v90, OS_LOG_TYPE_DEFAULT, "BlurM: ];\n", buf, 2u);
          }
        }
        ++v86;
        ++v128;
        ++v87;
        ++v88;
        ++v89;
      }
      while (v86 != 4);
    }
    int v104 = 0;
    uint64_t v2 = *(_DWORD **)v115;
  }
  else if (a1[1152])
  {
    int v104 = 1;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109376;
      *(_DWORD *)unsigned int v174 = 1;
      *(_WORD *)&v174[4] = 1024;
      *(_DWORD *)&v174[6] = v3;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "BlurM: incompatible context version (expected %d, got %d)\n", buf, 0xEu);
    }
  }
  else
  {
    int v104 = 1;
  }
  v2[2] = v104;
}

uint64_t H16ISP::DestroyH16ISPDeviceController(H16ISP *this, H16ISP::H16ISPDeviceController *a2)
{
  int v3 = (__CFRunLoop *)CFRetain(*((CFTypeRef *)this + 6));
  CFRunLoopStop(v3);
  int v5 = 0;
  pthread_join(*((pthread_t *)this + 8), &v5);
  H16ISP::H16ISPDeviceController::~H16ISPDeviceController(this);
  MEMORY[0x24C53D6E0]();
  CFRelease(v3);
  return 0;
}

char *H16ISP::GetOutputPresetForOutputSize(int a1, int a2, uint64_t a3, int a4, int a5)
{
  unsigned int v8 = 0;
  float32x2_t result = (char *)H16ISP::getOutputPresets(a1, (int *)&v8, a3, a4, a5);
  if (!result) {
    return result;
  }
  uint64_t v7 = v8;
  if (a2 == 255)
  {
    if (v8)
    {
      while (!result[113])
      {
        result += 120;
        if (!--v7) {
          return 0;
        }
      }
      return result;
    }
    return 0;
  }
  if (!v8) {
    return 0;
  }
  while (*(_DWORD *)result != a2)
  {
    result += 120;
    if (!--v7) {
      return 0;
    }
  }
  return result;
}

BOOL H16ISP::isContextSwitchSupported(_DWORD *a1, _DWORD *a2, unsigned int a3)
{
  BOOL result = 0;
  if (*a1 != *a2)
  {
    int v4 = a2[4];
    if (((a3 >> v4) & 1) != 0 || a1[4] == v4) {
      return 1;
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPGetYUVSBufferParamsForDataBufferSize(uint64_t this, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    *a2 = this >> 4;
    if ((this & 0xF) != 0) {
      *a2 = (this >> 4) + 1;
    }
  }
  if (a3) {
    *a3 = 16;
  }
  return this;
}

CVPixelBufferRef H16ISP::H16ISPCreateCVBuffer(unsigned int a1, unsigned int a2, int a3, int a4, int a5, int a6, float a7, uint64_t a8, uint64_t a9, int a10, int a11, char a12, int a13, int a14)
{
  int v18 = a13;
  int v17 = a14;
  unsigned int v44 = a2;
  unsigned int valuePtr = a1;
  int v42 = a4;
  int v43 = a3;
  float v41 = a7;
  CVPixelBufferRef pixelBufferOut = 0;
  switch(a5)
  {
    case 0:
      OSType v20 = 875704422;
      if (!a6) {
        OSType v20 = 875704438;
      }
      goto LABEL_76;
    case 2:
      OSType pixelFormatType = 1650943796;
      if ((a12 & 4) != 0)
      {
        OSType v20 = 1735549492;
      }
      else if ((a12 & 8) != 0)
      {
        OSType v20 = 1919379252;
      }
      else
      {
        if ((a12 & 0x20) == 0) {
          goto LABEL_77;
        }
        OSType v20 = 1734505012;
      }
      goto LABEL_76;
    case 3:
      OSType v20 = 825437747;
      goto LABEL_76;
    case 4:
      OSType v20 = 825306677;
      goto LABEL_76;
    case 5:
      OSType v20 = 1932996149;
      goto LABEL_76;
    case 6:
    case 7:
    case 10:
    case 19:
    case 43:
      OSType v20 = 1278226488;
      goto LABEL_76;
    case 8:
      OSType v20 = 1278226742;
      goto LABEL_76;
    case 11:
      OSType v20 = 1751411059;
      goto LABEL_76;
    case 12:
      OSType v20 = 1278226736;
      goto LABEL_76;
    case 13:
      OSType v20 = 1530422832;
      if (a6) {
        goto LABEL_76;
      }
      goto LABEL_46;
    case 14:
      OSType v20 = 2100848176;
      if (a6) {
        goto LABEL_76;
      }
      goto LABEL_46;
    case 15:
      OSType v20 = 2016686640;
      if (!a6) {
        goto LABEL_76;
      }
      goto LABEL_42;
    case 16:
      if (a6)
      {
        int v22 = 1530422832;
        goto LABEL_49;
      }
      int v23 = 1530422832;
      goto LABEL_67;
    case 17:
      if (a6) {
        OSType v20 = 2105042480;
      }
      else {
        OSType v20 = 2105046576;
      }
      goto LABEL_76;
    case 18:
      OSType v20 = 1882468912;
      if (a6) {
LABEL_42:
      }
        v20 += 3276800;
      goto LABEL_76;
    case 20:
      if ((a12 & 2) == 0) {
        goto LABEL_44;
      }
      OSType v20 = 1651847472;
      goto LABEL_76;
    case 21:
LABEL_44:
      OSType v20 = 1650943796;
      goto LABEL_76;
    case 22:
      OSType v20 = 641230384;
      if (!a6) {
LABEL_46:
      }
        v20 |= 0x1000u;
      goto LABEL_76;
    case 23:
      if (a6)
      {
        int v22 = 641230384;
LABEL_49:
        OSType v20 = v22 | 0x400000;
      }
      else
      {
        int v23 = 641230384;
LABEL_67:
        OSType v20 = v23 | 0x401000;
      }
      goto LABEL_76;
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      uint64_t v19 = 0;
      break;
    case 30:
      OSType v20 = 1751410032;
      goto LABEL_76;
    case 37:
      OSType v20 = 1651519798;
      goto LABEL_76;
    case 38:
      if ((a12 & 2) != 0)
      {
        OSType v20 = 1651587122;
      }
      else
      {
        OSType pixelFormatType = 1650946096;
        if ((a12 & 4) != 0)
        {
          OSType v20 = 1735553072;
        }
        else
        {
          if ((a12 & 8) != 0)
          {
            int v21 = 1919378232;
          }
          else
          {
            if ((a12 & 0x20) == 0) {
              goto LABEL_77;
            }
            int v21 = 1734501176;
          }
          OSType v20 = v21 + 3320;
        }
      }
      goto LABEL_76;
    case 39:
      OSType v20 = 1650946100;
      goto LABEL_76;
    case 40:
      if ((a12 & 2) != 0)
      {
        OSType v20 = 1651925816;
      }
      else
      {
        OSType pixelFormatType = 1650942776;
        if ((a12 & 4) != 0)
        {
          OSType v20 = 1735549752;
        }
        else if ((a12 & 8) != 0)
        {
          OSType v20 = 1919378232;
        }
        else
        {
          if ((a12 & 0x20) == 0) {
            goto LABEL_77;
          }
          OSType v20 = 1734501176;
        }
      }
      goto LABEL_76;
    case 41:
      OSType v20 = 1652056888;
      goto LABEL_76;
    case 42:
      if ((a12 & 2) != 0) {
        OSType v20 = 1651519537;
      }
      else {
        OSType v20 = 1278226481;
      }
      goto LABEL_76;
    case 44:
      OSType v20 = 1650946098;
      goto LABEL_76;
    case 45:
      OSType v20 = 893595958;
      goto LABEL_76;
    case 46:
      OSType v20 = 1111970369;
      goto LABEL_76;
    default:
      OSType v20 = 2037741158;
      if (!a6) {
        OSType v20 = 2037741171;
      }
      goto LABEL_76;
  }
  while (*(_DWORD *)&supportedFormatMap[v19 + 4] != a5 || supportedFormatMap[v19 + 8] != a6)
  {
    v19 += 20;
    if (v19 == 1280)
    {
      OSType v20 = 0;
      goto LABEL_76;
    }
  }
  OSType v20 = *(_DWORD *)&supportedFormatMap[v19];
LABEL_76:
  OSType pixelFormatType = v20;
LABEL_77:
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CVPixelBufferRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (result)
  {
    int v26 = result;
    CFNumberRef v27 = CFNumberCreate(v24, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F04240], v27);
    CFRelease(v27);
    CFNumberRef v28 = CFNumberCreate(v24, kCFNumberIntType, &v44);
    CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F04118], v28);
    CFRelease(v28);
    if (a3)
    {
      CFNumberRef v29 = CFNumberCreate(v24, kCFNumberIntType, &v43);
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F040D8], v29);
      CFRelease(v29);
    }
    if (a4)
    {
      CFNumberRef v30 = CFNumberCreate(v24, kCFNumberIntType, &v42);
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F040F8], v30);
      CFRelease(v30);
    }
    if (a12 < 0) {
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F040E0], (const void *)*MEMORY[0x263EFFB40]);
    }
    if (v18)
    {
      CFNumberRef v31 = CFNumberCreate(v24, kCFNumberIntType, &a13);
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F04230], v31);
      CFRelease(v31);
    }
    if (a7 != 0.0)
    {
      CFNumberRef v32 = CFNumberCreate(v24, kCFNumberFloatType, &v41);
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F04110], v32);
      CFRelease(v32);
    }
    if (v17 != -1)
    {
      CFNumberRef v33 = CFNumberCreate(v24, kCFNumberIntType, &a14);
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F04108], v33);
      CFRelease(v33);
    }
    CFNumberRef v34 = CFNumberCreate(v24, kCFNumberIntType, &pixelFormatType);
    CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F04180], v34);
    CFRelease(v34);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      int v36 = Mutable;
      if ((a12 & 0x40) != 0) {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0EF48], (const void *)*MEMORY[0x263EFFB40]);
      }
      int v38 = a10;
      CFNumberRef v37 = CFNumberCreate(0, kCFNumberIntType, &v38);
      CFDictionarySetValue(v36, (const void *)*MEMORY[0x263F0ED58], v37);
      CFRelease(v37);
      CFDictionaryAddValue(v26, (const void *)*MEMORY[0x263F04130], v36);
      CFRelease(v36);
      CVPixelBufferCreate(v24, valuePtr, v44, pixelFormatType, v26, &pixelBufferOut);
      CFRelease(v26);
      return pixelBufferOut;
    }
    else
    {
      CFRelease(v26);
      return 0;
    }
  }
  return result;
}

uint64_t H16ISP::CalculateTotalCrop(H16ISP *this, int a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, _DWORD *a13, unsigned int *a14, unsigned int *a15, unsigned int *a16, unsigned int *a17)
{
  double v17 = 1.0;
  double v18 = 1.0;
  if (a7) {
    double v18 = (double)a5 / (double)a7;
  }
  if (a8) {
    double v17 = (double)a6 / (double)a8;
  }
  *a13 = (round(v18 * (double)a9) + (double)(a3 + this));
  *a14 = (round(v17 * (double)a10) + (double)(a4 + a2));
  *a15 = vcvtad_u64_f64(v18 * (double)a11);
  *a16 = vcvtad_u64_f64(v17 * (double)a12);
  return 0;
}

unsigned int *H16ISP::FindCommandInSetfile(H16ISP *this, unsigned __int8 *a2, int a3)
{
  int v3 = *((_DWORD *)this + 4);
  if (v3)
  {
    int v4 = (unsigned int *)((char *)this + 20);
    do
    {
      uint64_t v5 = *v4;
      if ((unsigned __int8 *)((unint64_t)v4 + v5) > &a2[(void)this]) {
        break;
      }
      if (*((unsigned __int16 *)v4 + 4) == a3) {
        return v4 + 1;
      }
      int v4 = (unsigned int *)((char *)v4 + (v5 + 4));
      --v3;
    }
    while (v3);
  }
  return 0;
}

H16ISP::H16ISPCFLocalMessagePort *H16ISP::H16ISPCFLocalMessagePort::H16ISPCFLocalMessagePort(H16ISP::H16ISPCFLocalMessagePort *this, const __CFString *a2, CFDataRef (__cdecl *a3)(CFMessagePortRef, SInt32, CFDataRef, void *), void (__cdecl *a4)(CFMessagePortRef, void *), void *a5)
{
  *(void *)this = &unk_26FAEC1A0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  context.version = 0;
  context.info = a5;
  memset(&context.retain, 0, 24);
  uint64_t v7 = CFMessagePortCreateLocal(0, a2, a3, &context, 0);
  *((void *)this + 1) = v7;
  if (a4 && v7) {
    CFMessagePortSetInvalidationCallBack(v7, a4);
  }
  return this;
}

void H16ISP::H16ISPCFLocalMessagePort::~H16ISPCFLocalMessagePort(H16ISP::H16ISPCFLocalMessagePort *this)
{
  *(void *)this = &unk_26FAEC1A0;
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (__CFMessagePort *)*((void *)this + 1);
  if (v3)
  {
    CFMessagePortInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 1));
  }
}

{
  uint64_t vars8;

  H16ISP::H16ISPCFLocalMessagePort::~H16ISPCFLocalMessagePort(this);

  JUMPOUT(0x24C53D6E0);
}

CFRunLoopSourceRef H16ISP::H16ISPCFLocalMessagePort::GetRunLoopSource(H16ISP::H16ISPCFLocalMessagePort *this)
{
  CFRunLoopSourceRef result = (CFRunLoopSourceRef)*((void *)this + 2);
  if (!result)
  {
    CFRunLoopSourceRef result = CFMessagePortCreateRunLoopSource(0, *((CFMessagePortRef *)this + 1), 0);
    *((void *)this + 2) = result;
  }
  return result;
}

void H16ISP::H16ISPCFLocalMessagePort::SetDispatchQueue(H16ISP::H16ISPCFLocalMessagePort *this, NSObject *a2)
{
  *((void *)this + 3) = a2;
  CFMessagePortSetDispatchQueue(*((CFMessagePortRef *)this + 1), a2);
}

H16ISP::H16ISPCFRemoteMessagePort *H16ISP::H16ISPCFRemoteMessagePort::H16ISPCFRemoteMessagePort(H16ISP::H16ISPCFRemoteMessagePort *this, const __CFString *a2, void (__cdecl *a3)(CFMessagePortRef, void *))
{
  *(void *)this = &unk_26FAEC1C0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  Remote = CFMessagePortCreateRemote(0, a2);
  *((void *)this + 1) = Remote;
  if (a3 && Remote) {
    CFMessagePortSetInvalidationCallBack(Remote, a3);
  }
  return this;
}

void H16ISP::H16ISPCFRemoteMessagePort::~H16ISPCFRemoteMessagePort(H16ISP::H16ISPCFRemoteMessagePort *this)
{
  *(void *)this = &unk_26FAEC1C0;
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }
}

{
  uint64_t vars8;

  H16ISP::H16ISPCFRemoteMessagePort::~H16ISPCFRemoteMessagePort(this);

  JUMPOUT(0x24C53D6E0);
}

CFRunLoopSourceRef H16ISP::H16ISPCFRemoteMessagePort::GetRunLoopSource(H16ISP::H16ISPCFRemoteMessagePort *this)
{
  CFRunLoopSourceRef result = (CFRunLoopSourceRef)*((void *)this + 2);
  if (!result)
  {
    CFRunLoopSourceRef result = CFMessagePortCreateRunLoopSource(0, *((CFMessagePortRef *)this + 1), 0);
    *((void *)this + 2) = result;
  }
  return result;
}

void H16ISP::H16ISPCFRemoteMessagePort::SetDispatchQueue(H16ISP::H16ISPCFRemoteMessagePort *this, NSObject *a2)
{
  *((void *)this + 3) = a2;
  CFMessagePortSetDispatchQueue(*((CFMessagePortRef *)this + 1), a2);
}

uint64_t H16ISP::H16ISPGetMachThreadPriority(H16ISP *this, integer_t *a2, int *a3)
{
  if (!a2) {
    return 3758097090;
  }
  thread_inspect_t v4 = this;
  mach_msg_type_number_t thread_info_outCnt = 10;
  uint64_t v5 = thread_info((thread_inspect_t)this, 3u, thread_info_out, &thread_info_outCnt);
  if (!v5)
  {
    switch(v17)
    {
      case 4:
        mach_msg_type_number_t thread_info_outCnt = 4;
        uint64_t v6 = thread_info(v4, 0xCu, v14, &thread_info_outCnt);
        if (v6)
        {
          uint64_t v7 = (FILE *)*MEMORY[0x263EF8348];
          unsigned int v8 = "thread_info() for THREAD_SCHED_FIFO_INFO failed";
          size_t v9 = 47;
          goto LABEL_4;
        }
        integer_t v11 = v14[1];
        break;
      case 2:
        mach_msg_type_number_t thread_info_outCnt = 5;
        uint64_t v6 = thread_info(v4, 0xBu, v13, &thread_info_outCnt);
        if (v6)
        {
          uint64_t v7 = (FILE *)*MEMORY[0x263EF8348];
          unsigned int v8 = "thread_info() for THREAD_SCHED_RR_INFO failed\n";
          size_t v9 = 46;
          goto LABEL_4;
        }
        integer_t v11 = v13[1];
        break;
      case 1:
        mach_msg_type_number_t thread_info_outCnt = 5;
        uint64_t v6 = thread_info(v4, 0xAu, v12, &thread_info_outCnt);
        if (v6)
        {
          uint64_t v7 = (FILE *)*MEMORY[0x263EF8348];
          unsigned int v8 = "thread_info() for THREAD_SCHED_TIMESHARE_INFO failed\n";
          size_t v9 = 53;
          goto LABEL_4;
        }
        integer_t v11 = v12[1];
        break;
      default:
        fwrite("Unknown mach thread policy\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
        return 0;
    }
    *a2 = v11;
    return v6;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (FILE *)*MEMORY[0x263EF8348];
  unsigned int v8 = "thread_info() for THREAD_BASIC_INFO failed\n";
  size_t v9 = 43;
LABEL_4:
  fwrite(v8, v9, 1uLL, v7);
  return v6;
}

uint64_t H16ISP::H16ISPVerifyFirmwareDigest(H16ISP *this, unint64_t a2, void *a3, unsigned __int8 *a4)
{
  CC_LONG v4 = a2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2 >> 25)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "Computing signature for buffer %p whose size 0x%08zx is too large.  Failing. \n", this, a2);
    return 3758097090;
  }
  else
  {
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, this, v4);
    CC_SHA256_Final(md, &c);
    return *a3 != *(void *)md || a3[1] != v13 || a3[2] != v14 || a3[3] != v15;
  }
}

uint64_t H16ISP::H16ISPInflateFirmwareBuffer(H16ISP *this, unint64_t a2, unint64_t a3, unsigned __int8 **a4, unint64_t *a5)
{
  memset(&strm.zalloc, 0, 24);
  strm.avail_in = a2;
  strm.next_in = 0;
  if (HIDWORD(a2))
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "Cannot initialize decompression.  Compressed buffer size %zd too large. \n", a2);
    return 4294967292;
  }
  else
  {
    uint64_t v8 = inflateInit2_(&strm, 47, "1.2.12", 112);
    if (v8)
    {
      uint64_t v9 = v8;
      fwrite("Cannot initialize decompression.  Invalid input. \n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    }
    else
    {
      integer_t v11 = (unsigned __int8 *)*(unsigned int *)((char *)this + a2 - 4);
      *a4 = v11;
      if (!(v11 >> 25)) {
        operator new[]();
      }
      fprintf((FILE *)*MEMORY[0x263EF8348], "Expected size for decompressed firmware 0x%08x is larger than 0x%08x.  Failing. \n", v11, 0x2000000);
      return 4294967293;
    }
  }
  return v9;
}

uint64_t H16ISP::getCameraStrobeMaxLoad(H16ISP *this)
{
  unsigned int valuePtr = 0x10000;
  mach_port_t v1 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v2 = IOServiceNameMatching("AppleDieTempController");
  io_service_t MatchingService = IOServiceGetMatchingService(v1, v2);
  if (!MatchingService)
  {
    fwrite("could not find AppleDieTempController", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    return 0x10000;
  }
  io_object_t v4 = MatchingService;
  CFuint64_t Property = (const __CFNumber *)IORegistryEntryCreateCFProperty(MatchingService, @"CameraStrobeMaxLoad", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (!CFProperty)
  {
    uint64_t v8 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v9 = "could not find CameraStrobeMaxLoad of die temperature controller";
    size_t v10 = 64;
    goto LABEL_7;
  }
  CFNumberRef v6 = CFProperty;
  int Value = CFNumberGetValue(CFProperty, kCFNumberSInt32Type, &valuePtr);
  CFRelease(v6);
  if (!Value)
  {
    uint64_t v8 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v9 = "could not get CameraStrobeMaxLoad of die temperature controller";
    size_t v10 = 63;
LABEL_7:
    fwrite(v9, v10, 1uLL, v8);
  }
  IOObjectRelease(v4);
  return valuePtr;
}

BOOL H16ISP::getExternalStrobeAttached(H16ISP *this)
{
  *(void *)existing = 0;
  CFDictionaryRef v1 = IOServiceMatching("IOAccessoryManager");
  IOServiceGetMatchingServices(*MEMORY[0x263F0EC88], v1, existing);
  if (existing[0])
  {
    io_object_t v2 = IOIteratorNext(existing[0]);
    BOOL v3 = v2 != 0;
    if (v2)
    {
      io_registry_entry_t v4 = v2;
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      do
      {
        CFuint64_t Property = (const __CFData *)IORegistryEntryCreateCFProperty(v4, @"IOAccessoryDigitalID", v5, 0);
        if (CFProperty)
        {
          CFDataRef v7 = CFProperty;
          CFTypeID v8 = CFGetTypeID(CFProperty);
          if (v8 == CFDataGetTypeID() && CFDataGetLength(v7) >= 4)
          {
            v16.location = 0;
            v16.length = 4;
            CFDataGetBytes(v7, v16, (UInt8 *)&existing[1]);
            unint64_t v9 = 0;
            size_t v10 = &H16ISP::accessoryStrobeIDTable;
            do
            {
              int v11 = *v10++;
              BOOL v12 = existing[1] != v11;
            }
            while (existing[1] != v11 && v9++ <= 1);
            IOObjectRelease(v4);
            CFRelease(v7);
            if (!v12) {
              break;
            }
          }
          else
          {
            IOObjectRelease(v4);
            CFRelease(v7);
          }
        }
        else
        {
          IOObjectRelease(v4);
        }
        io_registry_entry_t v4 = IOIteratorNext(existing[0]);
        BOOL v3 = v4 != 0;
      }
      while (v4);
    }
    IOObjectRelease(existing[0]);
  }
  else
  {
    fwrite("could not find IOAccessoryManager", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    return 0;
  }
  return v3;
}

uint64_t H16ISP::PortTypeToModuleDescription(H16ISP *this, const __CFString *a2)
{
  uint64_t v2 = 1919246706;
  if (this)
  {
    H16ISP::GetPortTypeMap(this, 0);
    if (v3)
    {
      uint64_t v2 = v3[2];
      free(v3);
    }
  }
  return v2;
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

uint64_t ___ZN6H16ISPL18createArrayFromXpcEPv_block_invoke(uint64_t a1, void *a2, H16ISP *this)
{
  CFDataRef TypeFromXpc = (const void *)H16ISP::createTypeFromXpc(this, a2);
  CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), (CFIndex)a2, TypeFromXpc);
  CFRelease(TypeFromXpc);
  return 1;
}

void normalizeCoords(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  Matrix<double>::Matrix((uint64_t)a3, 3, *(_DWORD *)(a1 + 20));
  *a3 = &unk_26FAEB100;
  if (*(_DWORD *)(a1 + 20))
  {
    unsigned int v6 = 0;
    double v7 = a2->f64[0];
    float64x2_t v8 = a2[1];
    v8.f64[1] = a2[2].f64[1];
    float64x2_t v9 = v8;
    do
    {
      MatrixNxPts<3u,double>::CloneColumn(a1, v6, &v12);
      float64x2_t v10 = vmulq_n_f64(vsubq_f64(v12, v9), 1.0 / (v7 * v13));
      uint64_t v11 = 0x3FF0000000000000;
      MatrixNxPts<3u,double>::SetColumn((uint64_t)a3, v6++, (uint64_t)&v10);
    }
    while (v6 < *(_DWORD *)(a1 + 20));
  }
}

void sub_24690AA8C(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

double MatrixNxPts<3u,double>::SetColumn(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!*(_DWORD *)(a1 + 16) || (uint64_t v3 = *(unsigned int *)(a1 + 20), v3 <= a2)) {
    GMC_Homography();
  }
  uint64_t v4 = 0;
  CFAllocatorRef v5 = (double *)(*(void *)(a1 + 8) + 8 * a2);
  uint64_t v6 = 8 * v3;
  do
  {
    double result = *(double *)(a3 + v4);
    *CFAllocatorRef v5 = result;
    v4 += 8;
    CFAllocatorRef v5 = (double *)((char *)v5 + v6);
  }
  while (v4 != 24);
  return result;
}

uint64_t GMC_WorldFromPoints@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X2>, float64x2_t *a4@<X3>, const double *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v42 = (void *)Matrix<double>::Matrix(a8, 3, *(_DWORD *)(a1 + 20));
  *int v42 = &unk_26FAEB100;
  uint64_t v65 = 3;
  char v66 = 0;
  uint64_t v63 = &unk_26FAEB100;
  uint64_t v64 = 0;
  uint64_t v61 = 3;
  char v62 = 0;
  uint64_t v59 = &unk_26FAEB100;
  uint64_t v60 = 0;
  if (a7)
  {
    normalizeCoords(a1, a3, &v56);
    if (v66 && v64) {
      MEMORY[0x24C53D6C0](v64, 0x1000C8000313F17);
    }
    uint64_t v65 = v57;
    uint64_t v64 = *((void *)&v56 + 1);
    char v66 = v58;
    char v58 = 0;
    Matrix<double>::~Matrix((uint64_t)&v56);
    normalizeCoords(a2, a4, &v54);
    MatrixMxN<3u,3u,double>::operator*<3u>(a5, (uint64_t)&v54, (uint64_t)&v56);
    if (v62 && v60) {
      MEMORY[0x24C53D6C0](v60, 0x1000C8000313F17);
    }
    uint64_t v61 = v57;
    uint64_t v60 = *((void *)&v56 + 1);
    char v62 = v58;
    char v58 = 0;
    Matrix<double>::~Matrix((uint64_t)&v56);
    uint64_t v15 = &v54;
  }
  else
  {
    uint64_t v65 = *(void *)(a1 + 16);
    uint64_t v64 = *(void *)(a1 + 8);
    char v66 = 0;
    MatrixMxN<3u,3u,double>::operator*<3u>(a5, a2, (uint64_t)&v56);
    if (v62 && v60) {
      MEMORY[0x24C53D6C0](v60, 0x1000C8000313F17);
    }
    uint64_t v61 = v57;
    uint64_t v60 = *((void *)&v56 + 1);
    char v62 = v58;
    char v58 = 0;
    uint64_t v15 = &v56;
  }
  Matrix<double>::~Matrix((uint64_t)v15);
  if (HIDWORD(v65))
  {
    unsigned int v16 = 0;
    do
    {
      MatrixNxPts<3u,double>::CloneColumn((uint64_t)&v63, v16, v51);
      unsigned int v43 = v16;
      MatrixNxPts<3u,double>::CloneColumn((uint64_t)&v59, v16, v50);
      uint64_t v17 = 0;
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      do
      {
        *(double *)((char *)&v48 + v17 * 8) = -*(double *)&v50[v17];
        ++v17;
      }
      while (v17 != 3);
      uint64_t v18 = 0;
      long long v54 = v48;
      uint64_t v55 = v49;
      long long v56 = v48;
      uint64_t v57 = v49;
      double v19 = 0.0;
      do
      {
        double v19 = v19 + *(double *)((char *)&v56 + v18) * *(double *)((char *)&v56 + v18);
        v18 += 8;
      }
      while (v18 != 24);
      uint64_t v20 = 0;
      double v21 = sqrt(v19);
      do
      {
        *(double *)((char *)&v56 + v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(double *)((char *)&v56 + v20) / v21;
        v20 += 8;
      }
      while (v20 != 24);
      uint64_t v22 = 0;
      double v23 = 0.0;
      do
      {
        double v23 = v23 + *(double *)((char *)&v56 + v22 * 8) * *(double *)&v51[v22];
        ++v22;
      }
      while (v22 != 3);
      uint64_t v24 = 0;
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      do
      {
        *(double *)((char *)&v48 + v24) = *(double *)((char *)&v56 + v24) * -v23;
        v24 += 8;
      }
      while (v24 != 24);
      uint64_t v25 = 0;
      long long v52 = v48;
      uint64_t v53 = v49;
      do
      {
        *(double *)((char *)&v52 + v25 * 8) = *(double *)&v51[v25] + *(double *)((char *)&v52 + v25 * 8);
        ++v25;
      }
      while (v25 != 3);
      uint64_t v26 = 0;
      double v27 = 0.0;
      do
      {
        double v27 = v27 + *(double *)((char *)&v52 + v26) * *(double *)(a6 + v26);
        v26 += 8;
      }
      while (v26 != 24);
      uint64_t v28 = 0;
      double v29 = 0.0;
      do
      {
        double v29 = v29 + *(double *)((char *)&v52 + v28 * 8) * *(double *)&v51[v28];
        ++v28;
      }
      while (v28 != 3);
      uint64_t v30 = 0;
      double v31 = 0.0;
      do
      {
        double v31 = v31 + *(double *)((char *)&v56 + v30) * *(double *)(a6 + v30);
        v30 += 8;
      }
      while (v30 != 24);
      uint64_t v32 = 0;
      double v33 = 0.0;
      do
      {
        double v33 = v33 + *(double *)((char *)&v56 + v32) * *(double *)((char *)&v54 + v32);
        v32 += 8;
      }
      while (v32 != 24);
      uint64_t v34 = 0;
      memset(v45, 0, sizeof(v45));
      double v35 = v27 / v29;
      do
      {
        *(double *)&v45[v34] = v35 * *(double *)&v51[v34];
        ++v34;
      }
      while (v34 != 3);
      uint64_t v36 = 0;
      double v37 = (v31 - v35 * v23) / v33;
      memset(v44, 0, sizeof(v44));
      do
      {
        *(double *)&v44[v36] = v37 * *(double *)&v50[v36];
        ++v36;
      }
      while (v36 != 3);
      uint64_t v38 = 0;
      memset(v46, 0, sizeof(v46));
      do
      {
        *(double *)&v46[v38] = *(double *)&v45[v38] + *(double *)&v44[v38];
        ++v38;
      }
      while (v38 != 3);
      uint64_t v39 = 0;
      memset(v47, 0, sizeof(v47));
      do
      {
        *(double *)&v47[v39] = *(double *)&v46[v39] + *(double *)(a6 + v39 * 8);
        ++v39;
      }
      while (v39 != 3);
      uint64_t v40 = 0;
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      do
      {
        *(double *)((char *)&v48 + v40 * 8) = *(double *)&v47[v40] * 0.5;
        ++v40;
      }
      while (v40 != 3);
      MatrixNxPts<3u,double>::SetColumn((uint64_t)v42, v16++, (uint64_t)&v48);
    }
    while (v43 + 1 < HIDWORD(v65));
  }
  Matrix<double>::~Matrix((uint64_t)&v59);
  return Matrix<double>::~Matrix((uint64_t)&v63);
}

void sub_24690AFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  Matrix<double>::~Matrix(v10 - 176);
  Matrix<double>::~Matrix(v10 - 144);
  Matrix<double>::~Matrix(a10);
  _Unwind_Resume(a1);
}

double H16ISP::DCSAudioAccelManager::DCSAudioAccelManager(H16ISP::DCSAudioAccelManager *this, H16ISP::H16ISPDevice *a2)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = a2;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = a2;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  return result;
}

void H16ISP::DCSAudioAccelManager::~DCSAudioAccelManager(H16ISP::H16ISPDevice **this)
{
  if (*this == (H16ISP::H16ISPDevice *)1) {
    H16ISP::DCSAudioAccelManager::StopStreaming(this);
  }
  if (this[8]) {
    H16ISP::DCSAudioAccelManager::DestroyStreamSession((H16ISP::DCSAudioAccelManager *)this);
  }
}

uint64_t H16ISP::DCSAudioAccelManager::StopStreaming(H16ISP::H16ISPDevice **this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*this)
  {
    uint64_t v2 = H16ISP::H16ISPDevice::ISP_DCS_EnableAudio(this[9], 0, this[1] != 0);
    if (v2)
    {
      uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v3 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v3;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = *this;
        CFAllocatorRef v5 = this[1];
        int v15 = 136315906;
        unsigned int v16 = "StopStreaming";
        __int16 v17 = 2048;
        uint64_t v18 = v4;
        __int16 v19 = 2048;
        uint64_t v20 = v5;
        __int16 v21 = 1024;
        int v22 = v2;
        _os_log_error_impl(&dword_24680F000, v3, OS_LOG_TYPE_ERROR, "%s - Send CISP_CMD_DCS_AUDIO_ACCEL_ENABLE failure: isEnable=%llu isEnableTestMode=%llu result=0x%08X\n", (uint8_t *)&v15, 0x26u);
      }
    }
    else
    {
      *this = 0;
    }
  }
  else
  {
    uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v6 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      H16ISP::DCSAudioAccelManager::StopStreaming(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  return v2;
}

uint64_t H16ISP::DCSAudioAccelManager::DestroyStreamSession(H16ISP::DCSAudioAccelManager *this)
{
  uint64_t v2 = (H16ISP::H16ISPBufferReceiver *)*((void *)this + 8);
  if (!v2)
  {
    uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v6 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      H16ISP::DCSAudioAccelManager::DestroyStreamSession(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  uint64_t v3 = H16ISP::H16ISPBufferReceiver::stopReceive(v2);
  if (v3)
  {
    uint64_t v4 = v3;
    CFAllocatorRef v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      CFAllocatorRef v5 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      H16ISP::DCSAudioAccelManager::DestroyStreamSession();
    }
    return v4;
  }
  uint64_t v14 = H16ISP::H16ISPBufferReceiver::removeBufferPoolFromBufferReceiver(*((H16ISP::H16ISPBufferReceiver **)this + 8), *((unsigned __int16 *)this + 25));
  if (v14)
  {
    uint64_t v4 = v14;
    unsigned int v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      unsigned int v16 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      H16ISP::DCSAudioAccelManager::DestroyStreamSession();
    }
    return v4;
  }
  uint64_t v17 = H16ISP::DestroyH16ISPBufferReceiver(*((H16ISP **)this + 8), v15);
  if (!v17)
  {
    *((void *)this + 8) = 0;
    uint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v20 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v20;
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      H16ISP::DCSAudioAccelManager::DestroyStreamSession(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    return 0;
  }
  uint64_t v4 = v17;
  uint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v18 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    H16ISP::DCSAudioAccelManager::DestroyStreamSession();
  }
  return v4;
}

void *H16ISP::DCSAudioAccelManager::SetTestMode(void *this, uint64_t a2)
{
  if (this[1] != a2)
  {
    uint64_t v3 = (uint64_t)this;
    if (*this == 1)
    {
      uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      uint64_t v5 = &_os_log_internal;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v4 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v4;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        H16ISP::DCSAudioAccelManager::SetTestMode(v4, v6, v7, v8, v9, v10, v11, v12);
      }
      this = (void *)H16ISP::DCSAudioAccelManager::StopStreaming((H16ISP::H16ISPDevice **)v3);
      uint64_t v13 = *(H16ISP::H16ISPDevice **)v3;
      *(void *)(v3 + 8) = a2;
      if (v13 == (H16ISP::H16ISPDevice *)1)
      {
        uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
        {
          uint64_t v14 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          H16ISP::DCSAudioAccelManager::SetTestMode(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        return (void *)H16ISP::DCSAudioAccelManager::StartStreaming((H16ISP::H16ISPDevice **)v3);
      }
    }
    else
    {
      this[1] = a2;
    }
  }
  return this;
}

uint64_t H16ISP::DCSAudioAccelManager::StartStreaming(H16ISP::H16ISPDevice **this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*this == (H16ISP::H16ISPDevice *)1)
  {
    uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v1 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
      H16ISP::DCSAudioAccelManager::StartStreaming(v1, v2, v3, v4, v5, v6, v7, v8);
    }
    return 0;
  }
  else
  {
    uint64_t v9 = H16ISP::H16ISPDevice::ISP_DCS_EnableAudio(this[9], 1, this[1] != 0);
    if (v9)
    {
      uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v11 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *this;
        uint64_t v13 = this[1];
        int v15 = 136315906;
        uint64_t v16 = "StartStreaming";
        __int16 v17 = 2048;
        uint64_t v18 = v12;
        __int16 v19 = 2048;
        uint64_t v20 = v13;
        __int16 v21 = 1024;
        int v22 = v9;
        _os_log_error_impl(&dword_24680F000, v11, OS_LOG_TYPE_ERROR, "%s - Send CISP_CMD_DCS_AUDIO_ACCEL_ENABLE failure: isEnable=%llu isEnableTestMode=%llu result=0x%08X\n", (uint8_t *)&v15, 0x26u);
      }
    }
    else
    {
      *this = (H16ISP::H16ISPDevice *)1;
    }
  }
  return v9;
}

uint64_t H16ISP::DCSAudioAccelManager::SetCallbackBlock(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  H16ISP::MyAudioAccelCallbackBlock = a2;
  return result;
}

uint64_t H16ISP::DCSAudioAccelManager::SetCallbackPtr(uint64_t this, void (*a2)(__CVBuffer *, CMTime *__struct_ptr))
{
  *(void *)(this + 24) = a2;
  H16ISP::MyAudioAccelCallbackPtr = a2;
  return this;
}

uint64_t H16ISP::DCSAudioAccelManager::SetMessageCallbackBlock(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  H16ISP::MyAudioAccelMessageCallbackBlock = a2;
  return result;
}

uint64_t H16ISP::DCSAudioAccelManager::SetMessageCallbackPtr(uint64_t this, void (*a2)(unsigned int, unsigned int, unsigned int))
{
  *(void *)(this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  H16ISP::MyAudioAccelMessageCallbackPtr = a2;
  return this;
}

uint64_t H16ISP::DCSAudioAccelManager::CreateStreamSession(H16ISP::DCSAudioAccelManager *this)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t AudioConfig = H16ISP::H16ISPDevice::ISP_DCS_GetAudioConfig(*((H16ISP::H16ISPDevice **)this + 9), v40);
  if (AudioConfig)
  {
LABEL_23:
    uint64_t v20 = (H16ISP *)*((void *)this + 8);
    if (v20)
    {
      H16ISP::DestroyH16ISPBufferReceiver(v20, v2);
      *((void *)this + 8) = 0;
    }
    return AudioConfig;
  }
  unsigned __int16 v4 = v41;
  uint64_t v5 = v42;
  *((void *)this + 6) = v41;
  *((void *)this + 7) = v5;
  uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  uint64_t v7 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v6 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v6;
    unsigned __int16 v8 = *((_WORD *)this + 24);
  }
  else
  {
    unsigned __int16 v8 = v4;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v27 = *((unsigned __int16 *)this + 25);
    int v28 = *((unsigned __int16 *)this + 26);
    int v29 = *((unsigned __int16 *)this + 27);
    int v30 = *((_DWORD *)this + 14);
    int v31 = *((_DWORD *)this + 15);
    *(_DWORD *)int buf = 136316674;
    *(void *)&uint8_t buf[4] = "CreateStreamSession";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v27;
    LOWORD(v44) = 1024;
    *(_DWORD *)((char *)&v44 + 2) = v28;
    HIWORD(v44) = 1024;
    LODWORD(v45) = v29;
    WORD2(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 6) = v30;
    WORD5(v45) = 1024;
    HIDWORD(v45) = v31;
    _os_log_debug_impl(&dword_24680F000, v6, OS_LOG_TYPE_DEBUG, "%s - sCIspCmdAudioAccelInfoGet: type=0x%08X poolId=0x%08X alignment=%hu strideDivider=%hu size=%d audioAccelSerial=0x%08X\n", buf, 0x30u);
    unsigned __int16 v8 = *((_WORD *)this + 24);
  }
  if (v8 != 43)
  {
    __int16 v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v7)
    {
      __int16 v19 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v19;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      H16ISP::DCSAudioAccelManager::CreateStreamSession((unsigned __int16 *)this + 24, v19);
    }
    uint64_t AudioConfig = 3758096385;
    goto LABEL_23;
  }
  if (*((void *)this + 8))
  {
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v7)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      H16ISP::DCSAudioAccelManager::CreateStreamSession(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    uint64_t v22 = *((void *)this + 9);
    *(void *)int buf = (char *)this + 64;
    *(void *)&uint8_t buf[8] = v22;
    *(void *)&uint8_t buf[16] = H16ISP::DCSISPAudioBufferReceivedProc;
    uint64_t v44 = 0;
    *(void *)&long long v45 = H16ISP::DCSISPAudioBufferReceivedMessageProc;
    *((void *)&v45 + 1) = 0;
    uint64_t H16ISPBufferReceiver = H16ISP::CreateH16ISPBufferReceiver((uint64_t)buf);
    if (H16ISPBufferReceiver)
    {
      uint64_t AudioConfig = H16ISPBufferReceiver;
      uint64_t v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v7)
      {
        uint64_t v24 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v24;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        H16ISP::DCSAudioAccelManager::CreateStreamSession();
      }
      goto LABEL_23;
    }
  }
  uint64_t started = H16ISP::H16ISPBufferReceiver::startReceive(*((pthread_mutex_t **)this + 8));
  if (started)
  {
    uint64_t AudioConfig = started;
    uint64_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v7)
    {
      uint64_t v18 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      H16ISP::DCSAudioAccelManager::CreateStreamSession();
    }
    goto LABEL_23;
  }
  HIDWORD(v39) = 64;
  LOBYTE(v39) = 0;
  uint64_t v25 = H16ISP::H16ISPBufferReceiver::addBufferPoolToBufferReceiver(*((void *)this + 8), 42, *((unsigned __int16 *)this + 25), (*((_DWORD *)this + 14) >> 4) + 1, 8, 0, 0, 19, v39, 128, 16, 0, 4, 0);
  uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (v25)
  {
    uint64_t AudioConfig = v25;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v7)
    {
      uint64_t v26 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v26;
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      H16ISP::DCSAudioAccelManager::CreateStreamSession();
    }
    goto LABEL_23;
  }
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v7)
  {
    uint64_t v26 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v26;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
    H16ISP::DCSAudioAccelManager::CreateStreamSession(v26, v32, v33, v34, v35, v36, v37, v38);
  }
  return 0;
}

uint64_t H16ISP::DCSISPAudioBufferReceivedProc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a3;
    uint64_t v6 = (int *)(a4 + 12);
    uint64_t v7 = &_os_log_internal;
    unsigned __int16 v8 = (long long *)MEMORY[0x263F01090];
    do
    {
      if (*(v6 - 1) == 42)
      {
        if (*v6 == 43)
        {
          uint64_t v4 = *(void *)(v6 - 3);
          if (v4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        }
        uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v7)
        {
          uint64_t v13 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v13;
        }
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
LABEL_14:
          if (v4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        }
        int v14 = *v6;
        *(_DWORD *)int buf = 136315394;
        __int16 v21 = "DCSISPAudioBufferReceivedProc";
        __int16 v22 = 1024;
        int v23 = v14;
        uint64_t v11 = v13;
        uint64_t v12 = "%s - Invalid poolID=%d\n";
      }
      else
      {
        uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v7)
        {
          uint64_t v9 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v9;
        }
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        int v10 = *(v6 - 1);
        *(_DWORD *)int buf = 136315394;
        __int16 v21 = "DCSISPAudioBufferReceivedProc";
        __int16 v22 = 1024;
        int v23 = v10;
        uint64_t v11 = v9;
        uint64_t v12 = "%s - Invalid poolType=%d\n";
      }
      _os_log_error_impl(&dword_24680F000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
      if (v4)
      {
LABEL_15:
        if (H16ISP::MyAudioAccelCallbackBlock)
        {
          uint64_t v19 = *((void *)v8 + 2);
          long long v18 = *v8;
          (*(void (**)(uint64_t, uint64_t, long long *))(H16ISP::MyAudioAccelCallbackBlock + 16))(H16ISP::MyAudioAccelCallbackBlock, v4, &v18);
        }
        if (H16ISP::MyAudioAccelCallbackPtr)
        {
          long long v16 = *v8;
          uint64_t v17 = *((void *)v8 + 2);
          ((void (*)(uint64_t, long long *))H16ISP::MyAudioAccelCallbackPtr)(v4, &v16);
        }
      }
LABEL_19:
      CVPixelBufferRelease(*(CVPixelBufferRef *)(v6 - 3));
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t H16ISP::DCSISPAudioBufferReceivedMessageProc(H16ISP *this, uint64_t a2, uint64_t a3, unsigned int a4, void *a5, void *a6, void *a7)
{
  uint64_t result = H16ISP::MyAudioAccelMessageCallbackBlock;
  if (H16ISP::MyAudioAccelMessageCallbackBlock) {
    uint64_t result = (*(uint64_t (**)(void))(H16ISP::MyAudioAccelMessageCallbackBlock + 16))();
  }
  uint64_t v11 = (uint64_t (*)(H16ISP *, uint64_t, uint64_t))H16ISP::MyAudioAccelMessageCallbackPtr;
  if (H16ISP::MyAudioAccelMessageCallbackPtr)
  {
    return v11(this, a2, a3);
  }
  return result;
}

uint64_t H16ISP::DCSAudioAccelManager::GetStreamingStatus(H16ISP::DCSAudioAccelManager *this, BOOL *a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = 0;
  *a2 = *(void *)this == 1;
  return result;
}

void H16ISP::CreateAudioAccelManager(H16ISP *this, H16ISP::H16ISPDevice *a2, DCSAudioAccelClientConfigStruct *a3, H16ISP::DCSAudioAccelManager **a4)
{
}

uint64_t H16ISP::DestroyAudioAccelManager(H16ISP::H16ISPDevice ***this, H16ISP::DCSAudioAccelManager **a2)
{
  uint64_t v3 = *this;
  if (v3)
  {
    H16ISP::DCSAudioAccelManager::~DCSAudioAccelManager(v3);
    MEMORY[0x24C53D6E0]();
    *this = 0;
  }
  return 0;
}

void OUTLINED_FUNCTION_1_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t GMC_ExtractTestSamples(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v15 = *(_DWORD *)(a1 + 20);
  double v16 = (double)v15 / (double)a3;
  if (v16 <= 1.0)
  {
    Matrix<double>::Resize(a6, *(_DWORD *)(a1 + 16), v15);
    memcpy(*(void **)(a6 + 8), *(const void **)(a1 + 8), 8 * *(unsigned int *)(a6 + 16) * (unint64_t)*(unsigned int *)(a6 + 20));
    Matrix<double>::Resize(a7, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
    memcpy(*(void **)(a7 + 8), *(const void **)(a2 + 8), 8 * *(unsigned int *)(a7 + 16) * (unint64_t)*(unsigned int *)(a7 + 20));
    puts("Bad configuration");
  }
  else
  {
    MatrixNxPts<3u,double>::CloneColumn(a1, 0, v29);
    MatrixNxPts<3u,double>::SetColumn(a8, 0, (uint64_t)v29);
    MatrixNxPts<3u,double>::CloneColumn(a2, 0, v29);
    MatrixNxPts<3u,double>::SetColumn(a9, 0, (uint64_t)v29);
    if (a3)
    {
      uint64_t v25 = a8;
      unsigned int v20 = 0;
      unsigned int v27 = 0;
      unsigned int v21 = 1;
      unsigned int v26 = a3;
      do
      {
        unsigned int v28 = v21;
        signed int v22 = llround(v16 * (double)v21);
        unsigned int v23 = llround(v16 * (double)(v21 - 1)) + 1;
        if ((int)v23 < v22)
        {
          do
          {
            MatrixNxPts<3u,double>::CloneColumn(a1, v23, v29);
            MatrixNxPts<3u,double>::SetColumn(a6, v20, (uint64_t)v29);
            MatrixNxPts<3u,double>::CloneColumn(a2, v23, v29);
            MatrixNxPts<3u,double>::SetColumn(a7, v20, (uint64_t)v29);
            if (a4)
            {
              if (*(_DWORD *)(a5 + 20) * *(_DWORD *)(a5 + 16) <= v23) {
                GMC_ExtractTestSamples();
              }
              if (*(_DWORD *)(a10 + 20) * *(_DWORD *)(a10 + 16) <= v20) {
                GMC_ExtractTestSamples();
              }
              *(unsigned char *)(*(void *)(a10 + 8) + v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(unsigned char *)(*(void *)(a5 + 8) + v23);
            }
            ++v20;
            ++v23;
          }
          while (v22 != v23);
        }
        a3 = v26;
        if (v28 == v26) {
          break;
        }
        MatrixNxPts<3u,double>::CloneColumn(a1, v22, v29);
        MatrixNxPts<3u,double>::SetColumn(v25, v27 + 1, (uint64_t)v29);
        MatrixNxPts<3u,double>::CloneColumn(a2, v22, v29);
        ++v27;
        a3 = v26;
        MatrixNxPts<3u,double>::SetColumn(a9, v27, (uint64_t)v29);
        unsigned int v21 = v28 + 1;
      }
      while (v28 + 1 <= v26);
    }
    else
    {
      unsigned int v27 = 0;
    }
    if (v27 + 1 != a3) {
      GMC_ExtractTestSamples();
    }
    if (*(_DWORD *)(a1 + 20) - a3 != *(_DWORD *)(a6 + 20)) {
      GMC_ExtractTestSamples();
    }
  }
  return 0;
}

void DisjointSet::DisjointSet(DisjointSet *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

void DisjointSet::~DisjointSet(DisjointSet *this)
{
  if (*(_DWORD *)this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      MEMORY[0x24C53D6C0](v2, 0x1000C80BDFB0063);
    }
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x24C53D6E0](v3, 0x1000C40BDFB0063);
  }
  *(_DWORD *)this = 0;
}

uint64_t DisjointSet::SetCapacity(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)this < a2)
  {
    if (*(_DWORD *)this)
    {
      uint64_t v2 = *(void *)(this + 8);
      if (v2) {
        MEMORY[0x24C53D6C0](v2, 0x1000C80BDFB0063);
      }
    }
    operator new[]();
  }
  return this;
}

uint64_t DisjointSet::Compact(DisjointSet *this, unsigned int a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = (_WORD *)*((void *)this + 2);
    if (!v4) {
      operator new[]();
    }
    if (!a2) {
      goto LABEL_15;
    }
    uint64_t v5 = (__int16 *)*((void *)this + 1);
    uint64_t v6 = a2;
    do
    {
      __int16 v7 = *v5++;
      *v4++ = v7;
      --v6;
    }
    while (v6);
  }
  if (!a2)
  {
LABEL_15:
    uint64_t result = 0;
    goto LABEL_16;
  }
  unint64_t v8 = 0;
  uint64_t result = 0;
  uint64_t v10 = *((void *)this + 1);
  do
  {
    unint64_t v11 = *(unsigned __int16 *)(v10 + 2 * v8);
    if (v8 <= v11)
    {
      __int16 v12 = result;
      uint64_t result = (result + 1);
    }
    else
    {
      __int16 v12 = *(_WORD *)(v10 + 2 * v11);
    }
    *(_WORD *)(v10 + 2 * v8++) = v12;
  }
  while (a2 != v8);
LABEL_16:
  *((_WORD *)this + 12) = a2;
  return result;
}

uint64_t DisjointSet::UnCompact(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (!v1) {
    DisjointSet::UnCompact();
  }
  if (*(_WORD *)(this + 24))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(this + 8);
    do
    {
      *(_WORD *)(v3 + 2 * v2) = *(_WORD *)(v1 + 2 * v2);
      ++v2;
    }
    while (v2 < *(unsigned __int16 *)(this + 24));
  }
  return this;
}

uint64_t DisjointSet::GetCompactedMap(uint64_t a1, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int> *this)
{
  unsigned int v4 = __sz;
  uint64_t v6 = __sz;
  std::vector<unsigned int>::resize(this, __sz);
  std::vector<unsigned int>::pointer begin = this->__begin_;
  *this->__begin_ = 0;
  if (v4 < 2) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = 1;
  uint64_t result = 1;
  do
  {
    unint64_t v11 = *(unsigned __int16 *)(v8 + 2 * v9);
    BOOL v12 = v9 == v11;
    if (v9 <= v11)
    {
      if (v9 == v11) {
        unsigned int v13 = result;
      }
      else {
        unsigned int v13 = 0;
      }
      if (v12) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
    }
    else
    {
      unsigned int v13 = begin[v11];
    }
    begin[v9++] = v13;
  }
  while (v6 != v9);
  return result;
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

uint64_t DisjointSet::GetCompactedMap(uint64_t a1, std::vector<unsigned int> *this)
{
  return DisjointSet::GetCompactedMap(a1, *(unsigned __int16 *)(a1 + 4), this);
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)std::allocator<unsigned int>::allocate_at_least[abi:ne180100]((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      int v14 = 0;
    }
    unsigned int v15 = &v14[4 * v11];
    double v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

__n128 SPD::Init(uint64_t a1)
{
  if (!a1) {
    SPD::Init();
  }
  *(void *)a1 = 0x100000001;
  *(_DWORD *)(a1 + 8) = -1;
  *(unsigned char *)(a1 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(a1 + 76) = result;
  *(__n128 *)(a1 + 92) = result;
  *(__n128 *)(a1 + 108) = result;
  *(__n128 *)(a1 + 124) = result;
  return result;
}

uint64_t SPD::Prepare(uint64_t result)
{
  if (!result) {
    SPD::Prepare();
  }
  *(_DWORD *)(result + 8) = -1;
  *(_DWORD *)(result + 44) = 2;
  return result;
}

void SPD::Process(int *a1, uint64_t a2)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  if (!a1) {
    SPD::Process();
  }
  if (!a2) {
    SPD::Process();
  }
  int v4 = *a1;
  if (*a1 == 1)
  {
    if (a1[12])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = a1[3];
        int v6 = a1[5];
        int v7 = a1[6];
        int v8 = a1[7];
        int v9 = a1[8];
        int v11 = a1[9];
        int v10 = a1[10];
        *(_DWORD *)int buf = 67110656;
        LODWORD(v117) = v5;
        WORD2(v117) = 1024;
        *(_DWORD *)((char *)&v117 + 6) = v6;
        WORD5(v117) = 1024;
        HIDWORD(v117) = v7;
        LOWORD(v118) = 1024;
        *(_DWORD *)((char *)&v118 + 2) = v10;
        HIWORD(v118) = 1024;
        *(_DWORD *)uint64_t v119 = v8;
        *(_WORD *)&v119[4] = 1024;
        *(_DWORD *)&v119[6] = v9;
        __int16 v120 = 1024;
        LODWORD(v121) = v11;
        _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "SPD:#%08d inp: (%4d x %4d) stride = %d, scale = %d x %d, total = %d\n", buf, 0x2Cu);
      }
      uint64_t v12 = 0;
      unint64_t v13 = &_os_log_internal;
      do
      {
        int v14 = a1[v12 + 19];
        if (v14 != -1 && (a1[12] & 1) != 0 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 134218240;
          *(void *)&long long v117 = v12;
          WORD4(v117) = 1024;
          *(_DWORD *)((char *)&v117 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v14;
          _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "SPD:tuning[%2zu] = %d\n", buf, 0x12u);
        }
        ++v12;
      }
      while (v12 != 16);
    }
    unint64_t v15 = a1[5];
    if (v15)
    {
      a1[2] = 2;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "SPD:ERR: CSPD::SPD pContext->meta.geom.sizeX is not expected as an odd number!!!\n", buf, 2u);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v107 = a1[3];
        int v108 = a1[5];
        int v109 = a1[6];
        int v110 = a1[7];
        int v111 = a1[8];
        int v113 = a1[9];
        int v112 = a1[10];
        *(_DWORD *)int buf = 67110656;
        LODWORD(v117) = v107;
        WORD2(v117) = 1024;
        *(_DWORD *)((char *)&v117 + 6) = v108;
        WORD5(v117) = 1024;
        HIDWORD(v117) = v109;
        LOWORD(v118) = 1024;
        *(_DWORD *)((char *)&v118 + 2) = v112;
        HIWORD(v118) = 1024;
        *(_DWORD *)uint64_t v119 = v110;
        *(_WORD *)&v119[4] = 1024;
        *(_DWORD *)&v119[6] = v111;
        __int16 v120 = 1024;
        LODWORD(v121) = v113;
        _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "SPD:ERR: #%d SPD(%d,%d) stride=%d scaleXY(%d,%d) totSize=%d\n", buf, 0x2Cu);
      }
    }
    else
    {
      uint64_t v16 = a1[6];
      uint64_t v17 = (32 * v16);
      uint64_t v18 = a1[10];
      uint64_t v19 = a1[11];
      if ((a1[12] & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67110400;
        LODWORD(v117) = (2 * v19) | 1;
        WORD2(v117) = 2048;
        *(void *)((char *)&v117 + 6) = 0;
        HIWORD(v117) = 2048;
        uint64_t v118 = 0;
        *(_WORD *)uint64_t v119 = 2048;
        *(void *)&v119[2] = v15;
        __int16 v120 = 2048;
        uint64_t v121 = v16;
        __int16 v122 = 2048;
        uint64_t v123 = v18;
        _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "SPD:SPD: k=%d, (x y)=(%zu %zu), (w h)=(%zu %zu), strideIn=%zu\n", buf, 0x3Au);
      }
      uint64_t v20 = (uint64_t)&a1[v17 + 36];
      uint64_t v115 = (32 * v16);
      uint64_t v114 = v16;
      unint64_t v21 = 0;
      if (v15 >= 0x11)
      {
        uint64_t v22 = 2 * v18;
        unint64_t v23 = (v19 + 1);
        uint64_t v24 = 4 * v17;
        unint64_t v25 = v16 - 1;
        unint64_t v26 = ~v19 + v16;
        uint64_t v27 = v16 - 2;
        uint64_t v28 = (v19 + v23) << 6;
        uint64_t v29 = (v23 << 6) - (v19 << 6) + 128;
        uint64_t v30 = v28 + 4 * v17 + 144;
        uint64_t v31 = 16;
        uint64_t v32 = (v23 << 6) + 4 * v17 - (v19 << 6);
        do
        {
          int v33 = 3 * (v21 >> 1);
          uint64_t v34 = (const char *)(a2 + v33);
          int8x8x3_t v125 = vld3_s8(v34);
          uint64_t v35 = (const char *)(a2 + v18 + v33);
          int8x8x3_t v127 = vld3_s8(v35);
          unint64_t v21 = v31;
          int16x8_t v36 = (int16x8_t)vmovl_u8((uint8x8_t)v125.val[1]);
          *(uint16x8_t *)v125.val[1].i8 = vmovl_u8((uint8x8_t)v125.val[2]);
          int16x8_t v37 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)v125.val[1].i8, 4uLL);
          *(int16x8_t *)v125.val[1].i8 = vsliq_n_s16(*(int16x8_t *)v125.val[1].i8, (int16x8_t)vmovl_u8((uint8x8_t)v125.val[0]), 4uLL);
          uint16x8_t v38 = (uint16x8_t)vsliq_n_s16(v37, v36, 4uLL);
          uint32x4_t v39 = vmovl_u16((uint16x4_t)v125.val[1]);
          uint32x4_t v40 = vmovl_high_u16(*(uint16x8_t *)v125.val[1].i8);
          uint32x4_t v41 = vmovl_u16(*(uint16x4_t *)v38.i8);
          uint32x4_t v42 = vmovl_high_u16(v38);
          *((uint32x4_t *)a1 + 9) = v39;
          *((uint32x4_t *)a1 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v40;
          *((uint32x4_t *)a1 + 11) = v41;
          *((uint32x4_t *)a1 + 12) = v42;
          int16x8_t v43 = (int16x8_t)vmovl_u8((uint8x8_t)v127.val[1]);
          *(uint16x8_t *)v127.val[1].i8 = vmovl_u8((uint8x8_t)v127.val[2]);
          int16x8_t v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)v127.val[1].i8, 4uLL);
          *(int16x8_t *)v127.val[1].i8 = vsliq_n_s16(*(int16x8_t *)v127.val[1].i8, (int16x8_t)vmovl_u8((uint8x8_t)v127.val[0]), 4uLL);
          uint16x8_t v45 = (uint16x8_t)vsliq_n_s16(v44, v43, 4uLL);
          uint32x4_t v46 = vmovl_u16((uint16x4_t)v127.val[1]);
          uint32x4_t v47 = vmovl_high_u16(*(uint16x8_t *)v127.val[1].i8);
          uint32x4_t v48 = vmovl_u16(*(uint16x4_t *)v45.i8);
          uint32x4_t v49 = vmovl_high_u16(v45);
          *(uint32x4_t *)uint64_t v20 = v46;
          *(uint32x4_t *)(v20 + 16) = v47;
          *(uint32x4_t *)(v20 + 32) = v48;
          *(uint32x4_t *)(v20 + 48) = v49;
          double v50 = (uint32x4_t *)(a1 + 52);
          int v51 = v34;
          uint64_t v52 = v27;
          if (v25 >= 2)
          {
            do
            {
              uint64_t v53 = &v51[v22];
              int8x8x3_t v128 = vld3_s8(v53);
              long long v54 = &v51[3 * v18];
              int8x8x3_t v129 = vld3_s8(v54);
              int16x8_t v55 = (int16x8_t)vmovl_u8((uint8x8_t)v128.val[0]);
              int16x8_t v56 = (int16x8_t)vmovl_u8((uint8x8_t)v128.val[1]);
              *(uint16x8_t *)v128.val[0].i8 = vmovl_u8((uint8x8_t)v128.val[2]);
              *(uint16x8_t *)v128.val[1].i8 = vshrq_n_u16(*(uint16x8_t *)v128.val[0].i8, 4uLL);
              *(int16x8_t *)v128.val[0].i8 = vsliq_n_s16(*(int16x8_t *)v128.val[0].i8, v55, 4uLL);
              *(int16x8_t *)v128.val[1].i8 = vsliq_n_s16(*(int16x8_t *)v128.val[1].i8, v56, 4uLL);
              uint32x4_t v39 = vaddw_u16(v39, (uint16x4_t)v128.val[0]);
              uint32x4_t v40 = vaddw_high_u16(v40, *(uint16x8_t *)v128.val[0].i8);
              uint32x4_t v41 = vaddw_u16(v41, (uint16x4_t)v128.val[1]);
              uint32x4_t v42 = vaddw_high_u16(v42, *(uint16x8_t *)v128.val[1].i8);
              *double v50 = v39;
              v50[1] = v40;
              v50[2] = v41;
              void v50[3] = v42;
              *(uint16x8_t *)v128.val[0].i8 = vmovl_u8((uint8x8_t)v129.val[0]);
              *(uint16x8_t *)v128.val[2].i8 = vmovl_u8((uint8x8_t)v129.val[2]);
              *(uint16x8_t *)v129.val[0].i8 = vshrq_n_u16(*(uint16x8_t *)v128.val[2].i8, 4uLL);
              *(int16x8_t *)v128.val[2].i8 = vsliq_n_s16(*(int16x8_t *)v128.val[2].i8, *(int16x8_t *)v128.val[0].i8, 4uLL);
              *(int16x8_t *)v129.val[0].i8 = vsliq_n_s16(*(int16x8_t *)v129.val[0].i8, (int16x8_t)vmovl_u8((uint8x8_t)v129.val[1]), 4uLL);
              uint32x4_t v46 = vaddw_u16(v46, (uint16x4_t)v128.val[2]);
              uint32x4_t v47 = vaddw_high_u16(v47, *(uint16x8_t *)v128.val[2].i8);
              uint32x4_t v48 = vaddw_u16(v48, (uint16x4_t)v129.val[0]);
              uint64_t v57 = (uint32x4_t *)((char *)v50 + v24);
              *uint64_t v57 = v46;
              v57[1] = v47;
              uint32x4_t v49 = vaddw_high_u16(v49, *(uint16x8_t *)v129.val[0].i8);
              v57[2] = v48;
              v57[3] = v49;
              v50 += 4;
              int v51 = v53;
              --v52;
            }
            while (v52);
          }
          char v58 = a1;
          unint64_t v59 = (v19 + 1);
          if (v26 > v23)
          {
            do
            {
              int16x8_t v60 = vshrn_high_n_s32(vshrn_n_s32(vsubq_s32(*(int32x4_t *)((char *)v58 + v28 + 144), *(int32x4_t *)((char *)v58 + v29 - 48)), 3uLL), vsubq_s32(*(int32x4_t *)((char *)v58 + v28 + 160), *(int32x4_t *)((char *)v58 + v29 - 32)), 3uLL);
              int16x8_t v61 = vshrn_high_n_s32(vshrn_n_s32(vsubq_s32(*(int32x4_t *)((char *)v58 + v28 + 176), *(int32x4_t *)((char *)v58 + v29 - 16)), 3uLL), vsubq_s32(*(int32x4_t *)((char *)v58 + v28 + 192), *(int32x4_t *)((char *)v58 + v29)), 3uLL);
              v126.val[0] = vshrn_n_s16(v60, 4uLL);
              v126.val[1] = vshrn_n_s16(v61, 4uLL);
              v126.val[2] = vsli_n_s8(vmovn_s16(v60), vmovn_s16(v61), 4uLL);
              char v62 = (char *)&v34[2 * v18 * (unint64_t)v23];
              vst3_s8(v62, v126);
              int16x8_t v63 = vshrn_high_n_s32(vshrn_n_s32(vsubq_s32(*(int32x4_t *)((char *)v58 + v30), *(int32x4_t *)((char *)v58 + v32 + 80)), 3uLL), vsubq_s32(*(int32x4_t *)((char *)v58 + v30 + 16), *(int32x4_t *)((char *)v58 + v32 + 96)), 3uLL);
              int16x8_t v64 = vshrn_high_n_s32(vshrn_n_s32(vsubq_s32(*(int32x4_t *)((char *)v58 + v30 + 32), *(int32x4_t *)((char *)v58 + v32 + 112)), 3uLL), vsubq_s32(*(int32x4_t *)((char *)v58 + v30 + 48), *(int32x4_t *)((char *)v58 + v32 + 128)), 3uLL);
              v126.val[0] = vshrn_n_s16(v63, 4uLL);
              v126.val[1] = vshrn_n_s16(v64, 4uLL);
              v126.val[2] = vsli_n_s8(vmovn_s16(v63), vmovn_s16(v64), 4uLL);
              uint64_t v65 = (char *)&v34[((2 * v23) | 1) * v18];
              vst3_s8(v65, v126);
              ++v59;
              v34 += v22;
              v58 += 16;
            }
            while (v59 < v26);
          }
          uint64_t v31 = v21 + 16;
        }
        while (v21 + 16 < v15);
      }
      if (v21 < v15)
      {
        char v66 = (unsigned __int8 *)(a2 + v21 + (v21 >> 1));
        uint64_t v67 = 2 * v18;
        unint64_t v68 = (v19 + 1);
        unint64_t v69 = ~v19 + v114;
        uint64_t v70 = 4 * v115 + 8 * v68 - 8 * v19 + 140;
        uint64_t v71 = 8 * (v19 + v68) + 148;
        uint64_t v72 = 8 * v68 - 8 * v19 + 136;
        do
        {
          unsigned int v73 = v66[2];
          int v74 = v66[1];
          a1[36] = v73 & 0xF | (16 * *v66);
          a1[37] = (v73 >> 4) | (16 * v74);
          unsigned int v75 = v66[v18 + 2];
          int v76 = v75 & 0xF | (16 * v66[v18]);
          int v77 = (v75 >> 4) | (16 * v66[v18 + 1]);
          *(_DWORD *)uint64_t v20 = v76;
          *(_DWORD *)(v20 + 4) = v77;
          int v78 = a1 + 36;
          uint64_t v79 = 2 * v18;
          uint64_t v80 = v114 - 2;
          if ((unint64_t)(v114 - 1) >= 2)
          {
            do
            {
              unsigned int v81 = v66[v79 + 2];
              int v82 = (v81 & 0xF | (16 * v66[v79])) + *v78;
              v78[3] = ((v81 >> 4) | (16 * v66[v79 + 1])) + v78[1];
              v78[2] = v82;
              uint64_t v83 = v78 + 2;
              double v84 = &v78[v115];
              long double v85 = &v66[v79 + v18];
              unsigned int v86 = v85[2];
              int v87 = v86 & 0xF | (16 * *v85);
              LODWORD(v85) = ((v86 >> 4) | (16 * v85[1])) + v84[1];
              v84[2] = v87 + *v84;
              v84[3] = v85;
              v79 += v67;
              int v78 = v83;
              --v80;
            }
            while (v80);
          }
          uint64_t v88 = v71 + 4 * v115;
          uint64_t v89 = v72;
          uint64_t v90 = v71;
          uint64_t v91 = v70;
          unint64_t v92 = v18 * (unint64_t)(2 * v68);
          for (unint64_t i = v68; i < v69; v88 += 8)
          {
            double v94 = &v66[v92];
            unsigned int v95 = *(int *)((char *)a1 + v90 - 4) - *(int *)((char *)a1 + v89);
            unsigned int v96 = *(int *)((char *)a1 + v90) - *(int *)((char *)a1 + v89 + 4);
            unsigned __int8 *v94 = v95 >> 7;
            v94[1] = v96 >> 7;
            v94[2] = (2 * v96) & 0xF0 | (v95 >> 3) & 0xF;
            unsigned int v97 = *(int *)((char *)a1 + v88 - 4) - *(int *)((char *)a1 + v91 - 4);
            unsigned int v98 = *(int *)((char *)a1 + v88) - *(int *)((char *)a1 + v91);
            uint64_t v99 = &v66[v92 + v18];
            unsigned __int8 *v99 = v97 >> 7;
            ++i;
            v92 += v67;
            v91 += 8;
            v99[1] = v98 >> 7;
            v99[2] = (2 * v98) & 0xF0 | (v97 >> 3) & 0xF;
            v90 += 8;
            v89 += 8;
          }
          v66 += 3;
          v21 += 2;
        }
        while (v21 < v15);
      }
      *(_OWORD *)(a1 + 13) = *(_OWORD *)(a1 + 5);
      *(void *)(a1 + 17) = *(void *)(a1 + 9);
      if ((a1[12] & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v100 = a1[3];
        int v101 = a1[13];
        int v102 = a1[14];
        int v103 = a1[15];
        int v104 = a1[16];
        int v106 = a1[17];
        int v105 = a1[18];
        *(_DWORD *)int buf = 67110656;
        LODWORD(v117) = v100;
        WORD2(v117) = 1024;
        *(_DWORD *)((char *)&v117 + 6) = v101;
        WORD5(v117) = 1024;
        HIDWORD(v117) = v102;
        LOWORD(v118) = 1024;
        *(_DWORD *)((char *)&v118 + 2) = v105;
        HIWORD(v118) = 1024;
        *(_DWORD *)uint64_t v119 = v103;
        *(_WORD *)&v119[4] = 1024;
        *(_DWORD *)&v119[6] = v104;
        __int16 v120 = 1024;
        LODWORD(v121) = v106;
        _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "SPD:#%08d out: (%4d x %4d) stride = %d, scale = %d x %d, total = %d\n", buf, 0x2Cu);
      }
      a1[2] = 0;
    }
  }
  else
  {
    if ((a1[12] & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109376;
      LODWORD(v117) = 1;
      WORD2(v117) = 1024;
      *(_DWORD *)((char *)&v117 + 6) = v4;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "SPD:incompatible context version (expected %d, got %d)\n", buf, 0xEu);
    }
    a1[2] = 1;
  }
}

uint64_t H16ISP::MOVReader::MOVReader(uint64_t this, const __CFString *a2)
{
  *(void *)this = a2;
  *(unsigned char *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  H16ISP::reader = 0;
  return this;
}

{
  *(void *)this = a2;
  *(unsigned char *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  H16ISP::reader = 0;
  return this;
}

void H16ISP::MOVReader::~MOVReader(CFTypeRef *this)
{
  if (H16ISP::reader) {
    [(id)H16ISP::reader dealloc];
  }
  H16ISP::reader = 0;
  if (*this) {
    CFRelease(*this);
  }
}

uint64_t H16ISP::MOVReader::openStream(H16ISP::MOVReader *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = 3758097084;
  id v9 = 0;
  uint64_t v3 = (void *)[NSURL fileURLWithPath:*(void *)this];
  H16ISP::MOVReader::fileAccessCheck(this, 0);
  int v4 = [[BasicMOVReader alloc] initWithFileURL:v3 error:&v9];
  H16ISP::reader = (uint64_t)v4;
  if (v9)
  {
    int v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v5 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CStringPtr = CFStringGetCStringPtr((CFStringRef)[v3 absoluteString], 0x8000100u);
      uint64_t v7 = [v9 description];
      *(_DWORD *)int buf = 136315650;
      int v11 = "openStream";
      __int16 v12 = 2080;
      unint64_t v13 = CStringPtr;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl(&dword_24680F000, v5, OS_LOG_TYPE_DEFAULT, "%s - Failed to open stream [%s] with error: %@\n", buf, 0x20u);
    }
  }
  else if ([(BasicMOVReader *)v4 hasReachedEndOfStream])
  {
    return 3758097124;
  }
  else
  {
    *((void *)this + 2) = mach_absolute_time();
    if (H16ISP::MOVReader::openStream(void)::onceToken != -1) {
      dispatch_once(&H16ISP::MOVReader::openStream(void)::onceToken, &__block_literal_global_5);
    }
    uint64_t v2 = 0;
    *((_WORD *)this + 108) = 0;
  }
  return v2;
}

uint64_t H16ISP::MOVReader::fileAccessCheck(void *a1, uint64_t a2)
{
  uint64_t v3 = [NSURL fileURLWithPath:*a1];
  uint64_t v4 = [MEMORY[0x263EFA8D0] URLAssetWithURL:v3 options:0];
  id v10 = 0;
  [objc_alloc(MEMORY[0x263EFA4C0]) initWithAsset:v4 error:&v10];
  if (!v10) {
    return 0;
  }
  int v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    int v5 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    H16ISP::MOVReader::fileAccessCheck(&v10);
  }
  uint64_t v6 = 3758097084;
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, (char *)objc_msgSend((id)objc_msgSend(v10, "description"), "UTF8String"));
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = v9;
  }
  return v6;
}

uint64_t H16ISP::MOVReader::isReadDone(H16ISP::MOVReader *this)
{
  return [(id)H16ISP::reader hasReachedEndOfStream];
}

uint64_t ___ZN6H16ISP9MOVReader10openStreamEv_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&H16ISP::s_timebase_info);
}

uint64_t H16ISP::MOVReader::getNextFrame(H16ISP::MOVReader *this, __CVBuffer *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v34 = 0;
  if (![(id)H16ISP::reader hasReachedEndOfStream])
  {
    uint64_t v6 = [(id)H16ISP::reader getNextFrameTimestamp:buf error:&v34];
    uint64_t v7 = (__CVBuffer *)v6;
    if (v34)
    {
      long long v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        long long v8 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v8;
      }
      uint64_t v5 = 3758097120;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        H16ISP::MOVReader::getNextFrame(&v34);
      }
    }
    else
    {
      uint64_t v5 = 3758097084;
      if (!v6) {
        return 3758097120;
      }
      if (!*((unsigned char *)this + 8))
      {
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
        OSType v17 = CVPixelBufferGetPixelFormatType(v7);
        if (PixelFormatType != 875704422)
        {
          uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            uint64_t v31 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v31;
          }
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            H16ISP::MOVReader::getNextFrame();
          }
          goto LABEL_32;
        }
        if (v17 != 875704422)
        {
          uint64_t v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            uint64_t v32 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v32;
          }
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            H16ISP::MOVReader::getNextFrame();
          }
          goto LABEL_32;
        }
        size_t Height = CVPixelBufferGetHeight(a2);
        if (Height != CVPixelBufferGetHeight(v7)
          || (size_t Width = CVPixelBufferGetWidth(a2), Width != CVPixelBufferGetWidth(v7)))
        {
          int v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            int v33 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v33;
          }
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            H16ISP::MOVReader::getNextFrame(a2, v7, v33);
          }
          goto LABEL_32;
        }
        *((unsigned char *)this + 8) = 1;
      }
      CVPixelBufferLockBaseAddress(v7, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      if (BytesPerRowOfPlane == CVPixelBufferGetBytesPerRowOfPlane(v7, 0))
      {
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v7, 0);
        size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(v7, 0) * HeightOfPlane;
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
        unint64_t v13 = CVPixelBufferGetBaseAddressOfPlane(v7, 0);
        memcpy(BaseAddressOfPlane, v13, v11);
        __int16 v14 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
        uint64_t v15 = CVPixelBufferGetBaseAddressOfPlane(v7, 1uLL);
        memcpy(v14, v15, v11 >> 1);
      }
      else if (CVPixelBufferGetPlaneCount(a2))
      {
        size_t v20 = 0;
        do
        {
          size_t v21 = CVPixelBufferGetBytesPerRowOfPlane(a2, v20);
          size_t v22 = CVPixelBufferGetBytesPerRowOfPlane(v7, v20);
          if (CVPixelBufferGetHeightOfPlane(a2, v20))
          {
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            size_t v25 = 0;
            do
            {
              unint64_t v26 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v20) + v23;
              uint64_t v27 = (char *)CVPixelBufferGetBaseAddressOfPlane(v7, v20);
              memcpy(v26, &v27[v24], v21);
              ++v25;
              v24 += v22;
              v23 += v21;
            }
            while (v25 < CVPixelBufferGetHeightOfPlane(a2, v20));
          }
          ++v20;
        }
        while (v20 < CVPixelBufferGetPlaneCount(a2));
      }
      CVPixelBufferUnlockBaseAddress(v7, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      uint64_t v5 = 0;
      uint64_t v28 = *((unsigned __int8 *)this + 216);
      *((void *)this + v28 + 11) = 1000000000
                                   * *(void *)buf
                                   * *(unsigned int *)algn_2691BF664
                                   / (uint64_t)(H16ISP::s_timebase_info * *(_DWORD *)&buf[8])
                                   + *((void *)this + 2);
      if ((((_BYTE)v28 + 1) & 0xF0) != 0) {
        char v29 = 0;
      }
      else {
        char v29 = v28 + 1;
      }
      *((unsigned char *)this + 216) = v29;
    }
    if (!v7) {
      return v5;
    }
LABEL_32:
    CVPixelBufferRelease(v7);
    return v5;
  }
  uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v4 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v4;
  }
  uint64_t v5 = 3758097120;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = "getNextFrame";
    _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "%s - End of stream\n", buf, 0xCu);
  }
  return v5;
}

uint64_t H16ISP::MOVReader::getFrameTimestamp(H16ISP::MOVReader *this, CVPixelBufferRef pixelBuffer)
{
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  IOSurfaceID ID = IOSurfaceGetID(IOSurface);
  uint64_t v5 = 0;
  while (*((_DWORD *)this + v5 + 6) != ID)
  {
    if (++v5 == 16) {
      return 0;
    }
  }
  uint64_t result = *((void *)this + v5 + 11);
  *((_DWORD *)this + v5 + 6) = 0;
  *((void *)this + v5 + 11) = 0;
  return result;
}

uint64_t H16ISP::MOVReader::storeFrameTimestampSurfaceId(H16ISP::MOVReader *this, CVPixelBufferRef pixelBuffer)
{
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  IOSurfaceID ID = IOSurfaceGetID(IOSurface);
  uint64_t v5 = *((unsigned __int8 *)this + 217);
  *((_DWORD *)this + v5 + 6) = ID;
  if ((((_BYTE)v5 + 1) & 0xF0) != 0) {
    char v6 = 0;
  }
  else {
    char v6 = v5 + 1;
  }
  *((unsigned char *)this + 217) = v6;
  return 0;
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void GMC_BundleAdjustment(uint64_t a1)
{
  CGMC_BundleAdjustment::CGMC_BundleAdjustment((uint64_t)v1, a1);
}

void sub_24690DA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void CGMC_BundleAdjustment::CalcBA(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a5 != (long long *)a1)
  {
    long long v7 = *a5;
    *(void *)(a1 + 16) = *((void *)a5 + 2);
    *(_OWORD *)a1 = v7;
  }
  CGMC_BundleAdjustment::rotationMatrixToAngleAxis(a4, (double *)&v10);
  long long v8 = a3[3];
  long long v14 = a3[2];
  long long v15 = v8;
  uint64_t v16 = *((void *)a3 + 8);
  long long v9 = a3[1];
  long long v12 = *a3;
  long long v13 = v9;
  Matrix<double>::Matrix((uint64_t)&v11, a2, 0, -1);
}

void sub_24690E728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  Matrix<double>::~Matrix((uint64_t)&a46);
  Matrix<double>::~Matrix((uint64_t)&a50);
  Matrix<double>::~Matrix((uint64_t)&a54);
  Matrix<double>::~Matrix((uint64_t)&a58);
  Matrix<double>::~Matrix((uint64_t)&a62);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x200]);
  SparseMatrix::~SparseMatrix((SparseMatrix *)&a66);
  Matrix<double>::~Matrix(v66);
  _Unwind_Resume(a1);
}

void CGMC_BundleAdjustment::~CGMC_BundleAdjustment(CGMC_BundleAdjustment *this)
{
}

void CGMC_BundleAdjustment::rotationMatrixToAngleAxis(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v4 = 0;
  *a2 = 0.0;
  a2[1] = 0.0;
  a2[2] = 0.0;
  double v5 = 0.0;
  do
  {
    double v5 = v5 + *(double *)(a1 + v4);
    v4 += 32;
  }
  while (v4 != 96);
  double v6 = (v5 + -1.0) * 0.5;
  long double v7 = 1.0;
  if (v6 <= 1.0)
  {
    long double v7 = v6;
    if (v6 < -1.0) {
      long double v7 = -1.0;
    }
  }
  long double v8 = acos(v7);
  long double v9 = sin(v8);
  double v10 = v9 + v9;
  uint64_t v11 = 0;
  if (v10 <= 0.0000001)
  {
    uint64_t v37 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)__u = 0u;
    long long v34 = 0u;
    double v32 = 0.0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    memset(__s, 0, sizeof(__s));
    uint64_t v16 = v23;
    memset(v23, 0, sizeof(v23));
    uint64_t v24 = 0;
    do
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        if (v11 == i) {
          double v18 = 1.0;
        }
        else {
          double v18 = 0.0;
        }
        *((double *)v16 + i) = v18;
      }
      ++v11;
      uint64_t v16 = (_OWORD *)((char *)v16 + 24);
    }
    while (v11 != 3);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    do
    {
      for (uint64_t j = 0; j != 24; j += 8)
        *(double *)((char *)v25 + v19 + j) = *(double *)(a1 + v19 + j) - *(double *)((char *)v23 + v19 + j);
      ++v20;
      v19 += 24;
    }
    while (v20 != 3);
    MatrixMxN<3u,3u,double>::SVDMxN<3u,void>(v25, __u, __s, (__CLPK_doublereal *)&v28);
    long double v22 = v8 * *((double *)&v30 + 1);
    *a2 = v8 * *(double *)&v29;
    a2[1] = v22;
    a2[2] = v8 * v32;
  }
  else
  {
    float64x2_t v12 = *(float64x2_t *)(a1 + 56);
    v12.f64[1] = *(float64_t *)(a1 + 16);
    *(float64x2_t *)a2 = vdivq_f64(vsubq_f64(v12, *(float64x2_t *)(a1 + 40)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0));
    a2[2] = (*(double *)(a1 + 24) - *(double *)(a1 + 8)) / v10;
    double v13 = 0.0;
    do
    {
      double v13 = v13 + *(double *)((char *)a2 + v11) * *(double *)((char *)a2 + v11);
      v11 += 8;
    }
    while (v11 != 24);
    uint64_t v14 = 0;
    double v15 = v8 / sqrt(v13);
    do
    {
      a2[v14] = v15 * a2[v14];
      ++v14;
    }
    while (v14 != 3);
  }
}

double CGMC_BundleAdjustment::OptimizationParams::OptimizationParams(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  long long v6 = *(_OWORD *)(a3 + 16);
  long long v7 = *(_OWORD *)(a3 + 32);
  long long v8 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 88) = *(void *)(a3 + 64);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 56) = v7;
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v6;
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = *(_OWORD *)a3;
  *(void *)(a1 + 104) = *(void *)(a4 + 8);
  double result = *(double *)(a4 + 16);
  *(double *)(a1 + 112) = result;
  *(unsigned char *)(a1 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(unsigned char *)(a4 + 24);
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  *(void *)(a1 + 96) = &unk_26FAEB100;
  *(unsigned char *)(a1 + 128) = a5;
  return result;
}

{
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  double result;

  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  long long v6 = *(_OWORD *)(a3 + 16);
  long long v7 = *(_OWORD *)(a3 + 32);
  long long v8 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 88) = *(void *)(a3 + 64);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 56) = v7;
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v6;
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = *(_OWORD *)a3;
  *(void *)(a1 + 104) = *(void *)(a4 + 8);
  double result = *(double *)(a4 + 16);
  *(double *)(a1 + 112) = result;
  *(unsigned char *)(a1 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(unsigned char *)(a4 + 24);
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  *(void *)(a1 + 96) = &unk_26FAEB100;
  *(unsigned char *)(a1 + 128) = a5;
  return result;
}

uint64_t CGMC_BundleAdjustment::calculateCostFunctionResiduals@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = 1;
  Matrix<double>::Matrix((uint64_t)a3, 1, 4 * *((_DWORD *)a2 + 29));
  *a3 = &unk_26FAEAF48;
  long long v65 = *a2;
  uint64_t v66 = *((void *)a2 + 2);
  CGMC_BundleAdjustment::angleAxisToRotationMatrix((double *)&v65, (uint64_t)&v67);
  long long v7 = (char *)&v67 + 8;
  long long v8 = (char *)v68 + 8;
  do
  {
    uint64_t v9 = 0;
    double v10 = v7;
    do
    {
      uint64_t v11 = *(void *)&v8[8 * v9];
      *(void *)&v8[8 * v9] = *v10;
      *double v10 = v11;
      v10 += 3;
      ++v9;
    }
    while (v6 != v9);
    ++v6;
    v7 += 8;
    v8 += 24;
  }
  while (v6 != 3);
  v70[2] = v68[1];
  v70[3] = v68[2];
  uint64_t v71 = v69;
  v70[0] = v67;
  v70[1] = v68[0];
  MatrixMxN<3u,3u,double>::operator*<3u>((const double *)a2 + 3, (uint64_t)(a2 + 6), (uint64_t)v62);
  if (v64)
  {
    for (unsigned int i = 0; i < v64; ++i)
    {
      MatrixNxPts<3u,double>::CloneColumn((uint64_t)v62, i, &v67);
      uint64_t v13 = 0;
      double v14 = *(double *)v68;
      do
      {
        *(double *)((char *)&v68[-1] + v13) = *(double *)((char *)&v68[-1] + v13) / v14;
        v13 += 8;
      }
      while (v13 != 24);
      MatrixNxPts<3u,double>::SetColumn((uint64_t)v62, i, (uint64_t)&v67);
    }
  }
  MatrixMxN<3u,3u,double>::operator*<3u>((const double *)v70, (uint64_t)(a2 + 6), (uint64_t)v59);
  uint64_t v15 = 0;
  double v56 = 0.0;
  double v57 = 0.0;
  uint64_t v16 = v70;
  double v58 = 0.0;
  do
  {
    uint64_t v17 = 0;
    double v18 = 0.0;
    do
    {
      double v18 = v18 + *(double *)((char *)v16 + v17) * *(double *)(a1 + v17);
      v17 += 8;
    }
    while (v17 != 24);
    *(&v56 + v15++) = v18;
    uint64_t v16 = (_OWORD *)((char *)v16 + 24);
  }
  while (v15 != 3);
  double v19 = v56;
  LODWORD(v68[0]) = 1;
  DWORD1(v68[0]) = v61;
  int v53 = 1;
  unsigned int v54 = v61;
  char v55 = 0;
  *(void *)&long long v67 = &unk_26FAEAF18;
  *((void *)&v67 + 1) = 0;
  BYTE8(v68[0]) = 0;
  int v51 = &unk_26FAEAF48;
  uint64_t v52 = v60;
  Matrix<double>::~Matrix((uint64_t)&v67);
  *(double *)&long long v67 = -v19;
  vDSPVsadd<double>(v52, 1, (const double *)&v67, v52, 1, v54);
  Matrix<double>::~Matrix((uint64_t)&v51);
  double v20 = v57;
  LODWORD(v68[0]) = 1;
  DWORD1(v68[0]) = v61;
  int v53 = 1;
  unsigned int v54 = v61;
  char v55 = 0;
  *(void *)&long long v67 = &unk_26FAEAF18;
  *((void *)&v67 + 1) = 0;
  BYTE8(v68[0]) = 0;
  int v51 = &unk_26FAEAF48;
  uint64_t v52 = &v60[v61];
  Matrix<double>::~Matrix((uint64_t)&v67);
  *(double *)&long long v67 = -v20;
  vDSPVsadd<double>(v52, 1, (const double *)&v67, v52, 1, v54 * v53);
  Matrix<double>::~Matrix((uint64_t)&v51);
  double v21 = v58;
  LODWORD(v68[0]) = 1;
  DWORD1(v68[0]) = v61;
  int v53 = 1;
  unsigned int v54 = v61;
  char v55 = 0;
  *(void *)&long long v67 = &unk_26FAEAF18;
  *((void *)&v67 + 1) = 0;
  BYTE8(v68[0]) = 0;
  int v51 = &unk_26FAEAF48;
  uint64_t v52 = &v60[2 * v61];
  Matrix<double>::~Matrix((uint64_t)&v67);
  *(double *)&long long v67 = -v21;
  vDSPVsadd<double>(v52, 1, (const double *)&v67, v52, 1, v54 * v53);
  Matrix<double>::~Matrix((uint64_t)&v51);
  if (v61)
  {
    for (unsigned int j = 0; j < v61; ++j)
    {
      MatrixNxPts<3u,double>::CloneColumn((uint64_t)v59, j, &v67);
      uint64_t v23 = 0;
      double v24 = *(double *)v68;
      do
      {
        *(double *)((char *)&v68[-1] + v23) = *(double *)((char *)&v68[-1] + v23) / v24;
        v23 += 8;
      }
      while (v23 != 24);
      MatrixNxPts<3u,double>::SetColumn((uint64_t)v59, j, (uint64_t)&v67);
    }
  }
  Matrix<double>::Row(a1 + 88, 0, (uint64_t)v49);
  LODWORD(v68[0]) = 1;
  DWORD1(v68[0]) = v64;
  int v46 = 1;
  unsigned int v47 = v64;
  char v48 = 0;
  *(void *)&long long v67 = &unk_26FAEAF18;
  *((void *)&v67 + 1) = 0;
  BYTE8(v68[0]) = 0;
  int16x8_t v44 = &unk_26FAEAF48;
  uint64_t v45 = v63;
  Matrix<double>::~Matrix((uint64_t)&v67);
  MatrixNxPts<1u,double>::operator-((uint64_t)v49, (uint64_t)&v44, (uint64_t)&v51);
  Matrix<double>::~Matrix((uint64_t)&v44);
  Matrix<double>::~Matrix((uint64_t)v49);
  Matrix<double>::Row(a1 + 88, 1, (uint64_t)&v44);
  LODWORD(v68[0]) = 1;
  DWORD1(v68[0]) = v64;
  int v41 = 1;
  unsigned int v42 = v64;
  char v43 = 0;
  *(void *)&long long v67 = &unk_26FAEAF18;
  *((void *)&v67 + 1) = 0;
  BYTE8(v68[0]) = 0;
  uint32x4_t v39 = &unk_26FAEAF48;
  uint64_t v40 = v63 + 8 * v64;
  Matrix<double>::~Matrix((uint64_t)&v67);
  MatrixNxPts<1u,double>::operator-((uint64_t)&v44, (uint64_t)&v39, (uint64_t)v49);
  Matrix<double>::~Matrix((uint64_t)&v39);
  Matrix<double>::~Matrix((uint64_t)&v44);
  uint64_t v25 = a1 + 120;
  Matrix<double>::Row(v25, 0, (uint64_t)&v39);
  LODWORD(v68[0]) = 1;
  DWORD1(v68[0]) = v61;
  int v36 = 1;
  unsigned int v37 = v61;
  char v38 = 0;
  *(void *)&long long v67 = &unk_26FAEAF18;
  *((void *)&v67 + 1) = 0;
  BYTE8(v68[0]) = 0;
  v35[0] = &unk_26FAEAF48;
  v35[1] = v60;
  Matrix<double>::~Matrix((uint64_t)&v67);
  MatrixNxPts<1u,double>::operator-((uint64_t)&v39, (uint64_t)v35, (uint64_t)&v44);
  Matrix<double>::~Matrix((uint64_t)v35);
  Matrix<double>::~Matrix((uint64_t)&v39);
  Matrix<double>::Row(v25, 1, (uint64_t)v35);
  LODWORD(v68[0]) = 1;
  DWORD1(v68[0]) = v61;
  int v32 = 1;
  unsigned int v33 = v61;
  char v34 = 0;
  *(void *)&long long v67 = &unk_26FAEAF18;
  *((void *)&v67 + 1) = 0;
  BYTE8(v68[0]) = 0;
  v31[0] = &unk_26FAEAF48;
  v31[1] = &v60[v61];
  Matrix<double>::~Matrix((uint64_t)&v67);
  MatrixNxPts<1u,double>::operator-((uint64_t)v35, (uint64_t)v31, (uint64_t)&v39);
  Matrix<double>::~Matrix((uint64_t)v31);
  Matrix<double>::~Matrix((uint64_t)v35);
  uint64_t v26 = *((unsigned int *)a2 + 29);
  if (v26)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 8 * v26;
    unsigned int v29 = 1;
    do
    {
      *(double *)(a3[1] + 8 * (v29 - 1)) = v52[v27 / 8];
      *(void *)(a3[1] + 8 * v29) = *(void *)(v50 + v27);
      *(void *)(a3[1] + 8 * (v29 + 1)) = *(void *)(v45 + v27);
      *(void *)(a3[1] + 8 * (v29 + 2)) = *(void *)(v40 + v27);
      v27 += 8;
      v29 += 4;
    }
    while (v28 != v27);
  }
  Matrix<double>::~Matrix((uint64_t)&v39);
  Matrix<double>::~Matrix((uint64_t)&v44);
  Matrix<double>::~Matrix((uint64_t)v49);
  Matrix<double>::~Matrix((uint64_t)&v51);
  Matrix<double>::~Matrix((uint64_t)v59);
  return Matrix<double>::~Matrix((uint64_t)v62);
}

void sub_24690F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  Matrix<double>::~Matrix((uint64_t)&a10);
  Matrix<double>::~Matrix((uint64_t)&a14);
  Matrix<double>::~Matrix((uint64_t)&a22);
  Matrix<double>::~Matrix((uint64_t)&a26);
  Matrix<double>::~Matrix((uint64_t)&a30);
  Matrix<double>::~Matrix((uint64_t)&a37);
  Matrix<double>::~Matrix((uint64_t)&a41);
  Matrix<double>::~Matrix(v41);
  _Unwind_Resume(a1);
}

uint64_t CGMC_BundleAdjustment::calcJacobian(double *a1, long long *a2, void **a3, uint64_t a4)
{
  v199[3] = *(double *)MEMORY[0x263EF8340];
  long long v173 = *a2;
  uint64_t v174 = *((void *)a2 + 2);
  CGMC_BundleAdjustment::angleAxisToRotationMatrix((double *)&v173, (uint64_t)&v175);
  double v8 = *(double *)a2;
  double v119 = *((double *)a2 + 1);
  double v121 = *((double *)a2 + 2);
  double v117 = *((double *)a2 + 3);
  Matrix<double>::Row((uint64_t)(a2 + 6), 0, (uint64_t)v171);
  Matrix<double>::Row((uint64_t)(a2 + 6), 1, (uint64_t)v169);
  Matrix<double>::Row((uint64_t)(a2 + 6), 2, (uint64_t)v167);
  Matrix<double>::Row((uint64_t)(a1 + 11), 0, (uint64_t)v166);
  Matrix<double>::Row((uint64_t)(a1 + 11), 1, (uint64_t)v165);
  Matrix<double>::Row((uint64_t)(a1 + 15), 0, (uint64_t)v164);
  Matrix<double>::Row((uint64_t)(a1 + 15), 1, (uint64_t)v163);
  double v9 = v175;
  Matrix<double>::operator*((uint64_t)v171, (uint64_t)&v138, v175);
  double v10 = v178;
  Matrix<double>::operator*((uint64_t)v169, (uint64_t)v134, v178);
  Matrix<double>::operator+((uint64_t)&v138, (uint64_t)v134, (uint64_t)&v142);
  double v11 = v181;
  Matrix<double>::operator*((uint64_t)v167, (uint64_t)&v130, v181);
  Matrix<double>::operator+((uint64_t)&v142, (uint64_t)&v130, (uint64_t)v146);
  Matrix<double>::operator-((uint64_t)v146, (uint64_t)&v148, v9 * *a1);
  Matrix<double>::operator-((uint64_t)&v148, (uint64_t)&v153, v10 * a1[1]);
  Matrix<double>::operator-((uint64_t)&v153, (uint64_t)&v184, v11 * a1[2]);
  uint64_t v12 = v185;
  unsigned int v161 = v187;
  char v162 = v188;
  uint64_t v185 = 0;
  char v188 = 0;
  int v158 = &unk_26FAEAF48;
  uint64_t v159 = v12;
  int v160 = 1;
  Matrix<double>::~Matrix((uint64_t)&v184);
  Matrix<double>::~Matrix((uint64_t)&v153);
  Matrix<double>::~Matrix((uint64_t)&v148);
  Matrix<double>::~Matrix((uint64_t)v146);
  Matrix<double>::~Matrix((uint64_t)&v130);
  Matrix<double>::~Matrix((uint64_t)&v142);
  Matrix<double>::~Matrix((uint64_t)v134);
  Matrix<double>::~Matrix((uint64_t)&v138);
  double v13 = v176;
  Matrix<double>::operator*((uint64_t)v171, (uint64_t)v134, v176);
  double v14 = v179;
  Matrix<double>::operator*((uint64_t)v169, (uint64_t)&v130, v179);
  Matrix<double>::operator+((uint64_t)v134, (uint64_t)&v130, (uint64_t)&v138);
  double v15 = v182;
  Matrix<double>::operator*((uint64_t)v167, (uint64_t)v128, v182);
  Matrix<double>::operator+((uint64_t)&v138, (uint64_t)v128, (uint64_t)&v142);
  Matrix<double>::operator-((uint64_t)&v142, (uint64_t)v146, v13 * *a1);
  Matrix<double>::operator-((uint64_t)v146, (uint64_t)&v148, v14 * a1[1]);
  Matrix<double>::operator-((uint64_t)&v148, (uint64_t)&v184, v15 * a1[2]);
  uint64_t v16 = v185;
  unsigned int v156 = v187;
  char v157 = v188;
  uint64_t v185 = 0;
  char v188 = 0;
  uint64_t v153 = &unk_26FAEAF48;
  uint64_t v154 = v16;
  int v155 = 1;
  Matrix<double>::~Matrix((uint64_t)&v184);
  Matrix<double>::~Matrix((uint64_t)&v148);
  Matrix<double>::~Matrix((uint64_t)v146);
  Matrix<double>::~Matrix((uint64_t)&v142);
  Matrix<double>::~Matrix((uint64_t)v128);
  Matrix<double>::~Matrix((uint64_t)&v138);
  Matrix<double>::~Matrix((uint64_t)&v130);
  Matrix<double>::~Matrix((uint64_t)v134);
  double v17 = v177;
  Matrix<double>::operator*((uint64_t)v171, (uint64_t)&v130, v177);
  double v18 = v180;
  Matrix<double>::operator*((uint64_t)v169, (uint64_t)v128, v180);
  Matrix<double>::operator+((uint64_t)&v130, (uint64_t)v128, (uint64_t)v134);
  double v19 = v183;
  Matrix<double>::operator*((uint64_t)v167, (uint64_t)v126, v183);
  Matrix<double>::operator+((uint64_t)v134, (uint64_t)v126, (uint64_t)&v138);
  Matrix<double>::operator-((uint64_t)&v138, (uint64_t)&v142, v17 * *a1);
  Matrix<double>::operator-((uint64_t)&v142, (uint64_t)v146, v18 * a1[1]);
  Matrix<double>::operator-((uint64_t)v146, (uint64_t)&v184, v19 * a1[2]);
  uint64_t v20 = v185;
  unsigned int v151 = v187;
  char v152 = v188;
  uint64_t v185 = 0;
  char v188 = 0;
  __int16 v148 = &unk_26FAEAF48;
  uint64_t v149 = v20;
  int v150 = 1;
  Matrix<double>::~Matrix((uint64_t)&v184);
  Matrix<double>::~Matrix((uint64_t)v146);
  Matrix<double>::~Matrix((uint64_t)&v142);
  Matrix<double>::~Matrix((uint64_t)&v138);
  Matrix<double>::~Matrix((uint64_t)v126);
  Matrix<double>::~Matrix((uint64_t)v134);
  Matrix<double>::~Matrix((uint64_t)v128);
  Matrix<double>::~Matrix((uint64_t)&v130);
  MatrixNxPts<1u,double>::DotMult((uint64_t)&v148, (uint64_t)&v148, (uint64_t)v146);
  uint64_t v21 = 0;
  double v22 = 0.0;
  do
  {
    double v22 = v22 + *(double *)((char *)a2 + v21) * *(double *)((char *)a2 + v21);
    v21 += 8;
  }
  while (v21 != 24);
  double v23 = sqrt(v22);
  if (v23 == 0.0)
  {
    double v24 = 1.0;
    double v26 = 0.5;
  }
  else
  {
    double v24 = sin(v23) / v23;
    long double v25 = sin(v23 * 0.5);
    double v26 = v25 / v23 * (v25 / v23 + v25 / v23);
  }
  uint64_t v27 = *((unsigned int *)a2 + 29);
  uint64_t v144 = 1;
  char v145 = 0;
  BOOL v142 = &unk_26FAEAF48;
  uint64_t v143 = 0;
  uint64_t v140 = 1;
  char v141 = 0;
  uint64_t v138 = &unk_26FAEAF48;
  uint64_t v139 = 0;
  Matrix<double>::Matrix((uint64_t)v134, 2, v27);
  uint64_t v28 = 8 * v27;
  if (*((unsigned char *)a2 + 128))
  {
    int v186 = 1;
    unsigned int v187 = v137;
    LODWORD(v132) = 1;
    HIDWORD(v132) = v137;
    char v133 = 0;
    int v184 = &unk_26FAEAF18;
    uint64_t v185 = 0;
    char v188 = 0;
    uint64_t v130 = &unk_26FAEAF48;
    uint64_t v131 = v135;
    Matrix<double>::~Matrix((uint64_t)&v184);
    if (v145 && v143) {
      MEMORY[0x24C53D6C0](v143, 0x1000C8000313F17);
    }
    uint64_t v144 = v132;
    uint64_t v143 = v131;
    char v145 = v133;
    char v133 = 0;
    Matrix<double>::~Matrix((uint64_t)&v130);
    int v186 = 1;
    unsigned int v187 = v137;
    LODWORD(v132) = 1;
    HIDWORD(v132) = v137;
    char v133 = 0;
    int v184 = &unk_26FAEAF18;
    uint64_t v185 = 0;
    char v188 = 0;
    uint64_t v130 = &unk_26FAEAF48;
    uint64_t v131 = v135 + 8 * v137;
    Matrix<double>::~Matrix((uint64_t)&v184);
    if (v141 && v139) {
      MEMORY[0x24C53D6C0](v139, 0x1000C8000313F17);
    }
    uint64_t v140 = v132;
    uint64_t v139 = v131;
    char v141 = v133;
    char v133 = 0;
    Matrix<double>::~Matrix((uint64_t)&v130);
    if (v27)
    {
      uint64_t v29 = 0;
      do
      {
        *(double *)(v143 + v29) = -*(double *)(v172 + v29) / *(double *)(v168 + v29);
        *(double *)(v139 + v29) = -*(double *)(v170 + v29) / *(double *)(v168 + v29);
        v29 += 8;
      }
      while (v28 != v29);
    }
  }
  if (v23 == 0.0)
  {
    double v34 = v8;
    double v35 = 1.0;
    double v31 = 0.0;
    double v33 = 0.0;
    double v36 = 1.0;
    double v37 = 1.0;
  }
  else
  {
    __double2 v30 = __sincos_stret(v23);
    double v31 = -(v30.__sinval - v23 * v30.__cosval) / (v23 * v23);
    long double v32 = sin(v23 * 0.5);
    double v33 = (v23 * -4.0 * (v32 * v32) + v23 * v23 * v30.__sinval) / pow(v23, 4.0);
    double v34 = v8;
    double v35 = v8 / v23;
    double v36 = v119 / v23;
    double v37 = v121 / v23;
  }
  MatrixNxPts<1u,double>::operator-((uint64_t)v171, (uint64_t)&v130, *a1);
  MatrixNxPts<1u,double>::operator-((uint64_t)v169, (uint64_t)v128, a1[1]);
  MatrixNxPts<1u,double>::operator-((uint64_t)v167, (uint64_t)v126, a1[2]);
  double v39 = v119;
  double v38 = v121;
  double v40 = v38 * v38 + v39 * v39;
  double v41 = v38 * v38 + v34 * v34;
  double v42 = v24 + v34 * (v31 * v35);
  double v43 = v39 * v39 + v34 * v34;
  v199[0] = -(v40 * (v33 * v35));
  v199[1] = -(v40 * (v33 * v36) + (v39 + v39) * v26);
  v198[0] = v119 * v26 + v121 * (v31 * v35) + v34 * v119 * (v33 * v35);
  v198[1] = v34 * v26 + v121 * (v31 * v36) + v34 * v119 * (v33 * v36);
  double v44 = v24 + v119 * (v31 * v36);
  v197[0] = v121 * v26 - v119 * (v31 * v35) + v34 * v121 * (v33 * v35);
  v197[1] = -(v44 - v34 * v121 * (v33 * v36));
  v196[0] = v119 * v26 - v121 * (v31 * v35) + v34 * v119 * (v33 * v35);
  v196[1] = v34 * v26 - v121 * (v31 * v36) + v34 * v119 * (v33 * v36);
  v195[0] = -(v41 * (v33 * v35) + (v34 + v34) * v26);
  v195[1] = -(v41 * (v33 * v36));
  v194[0] = v42 + v119 * v121 * (v33 * v35);
  v194[1] = v121 * v26 + v34 * (v31 * v36) + v119 * v121 * (v33 * v36);
  v193[0] = v121 * v26 + v119 * (v31 * v35) + v34 * v121 * (v33 * v35);
  v193[1] = v44 + v34 * v121 * (v33 * v36);
  v192[0] = -(v42 - v119 * v121 * (v33 * v35));
  v192[1] = v121 * v26 - v34 * (v31 * v36) + v119 * v121 * (v33 * v36);
  v191[0] = -(v43 * (v33 * v35) + (v34 + v34) * v26);
  v191[1] = -(v43 * (v33 * v36) + (v39 + v39) * v26);
  v199[2] = -(v40 * (v33 * v37) + (v38 + v38) * v26);
  double v45 = v24 + v121 * (v31 * v37);
  v198[2] = v45 + v34 * v119 * (v33 * v37);
  v197[2] = v34 * v26 - v119 * (v31 * v37) + v34 * v121 * (v33 * v37);
  v196[2] = -(v45 - v34 * v119 * (v33 * v37));
  v195[2] = -(v41 * (v33 * v37) + (v38 + v38) * v26);
  v194[2] = v119 * v26 + v34 * (v31 * v37) + v119 * v121 * (v33 * v37);
  v193[2] = v34 * v26 + v119 * (v31 * v37) + v34 * v121 * (v33 * v37);
  v192[2] = v119 * v26 - v34 * (v31 * v37) + v119 * v121 * (v33 * v37);
  v191[2] = -(v43 * (v33 * v37));
  Matrix<double>::Matrix((uint64_t)&v184, 2, v27);
  Matrix<double>::Matrix((uint64_t)&v189, 2, v27);
  Matrix<double>::Matrix((uint64_t)&v190, 2, v27);
  for (uint64_t i = 0; i != 3; ++i)
  {
    Matrix<double>::Row((uint64_t)(&v184 + 4 * i), 0, (uint64_t)&v122);
    if (v145 && v143) {
      MEMORY[0x24C53D6C0](v143, 0x1000C8000313F17);
    }
    uint64_t v144 = v124;
    uint64_t v143 = v123;
    char v145 = v125;
    char v125 = 0;
    Matrix<double>::~Matrix((uint64_t)&v122);
    Matrix<double>::Row((uint64_t)(&v184 + 4 * i), 1, (uint64_t)&v122);
    if (v141 && v139) {
      MEMORY[0x24C53D6C0](v139, 0x1000C8000313F17);
    }
    uint64_t v140 = v124;
    uint64_t v139 = v123;
    char v141 = v125;
    char v125 = 0;
    Matrix<double>::~Matrix((uint64_t)&v122);
    if (v27)
    {
      uint64_t v47 = 0;
      double v48 = v199[i];
      double v49 = v198[i];
      double v50 = v197[i];
      double v51 = v196[i];
      double v52 = v195[i];
      double v53 = v194[i];
      double v54 = v193[i];
      double v55 = v192[i];
      double v56 = v191[i];
      do
      {
        double v57 = *(double *)(v131 + v47);
        double v58 = *(double *)(v129 + v47);
        double v59 = *(double *)(v127 + v47);
        double v60 = v58 * v49 + v57 * v48 + v59 * v50;
        double v61 = v58 * v52 + v57 * v51;
        double v62 = v58 * v55 + v57 * v54 + v59 * v56;
        *(double *)(v143 + v47) = -(v60 * *(double *)(v149 + v47) - v62 * *(double *)(v159 + v47))
                                / *(double *)(v147 + v47);
        *(double *)(v139 + v47) = -((v61 + v59 * v53) * *(double *)(v149 + v47) - v62 * *(double *)(v154 + v47))
                                / *(double *)(v147 + v47);
        v47 += 8;
      }
      while (v28 != v47);
    }
  }
  SparseMatrix::Zero(a3);
  Matrixsize_t Width = SparseMatrix::GetMatrixWidth((SparseMatrix *)a3);
  Matrix<double>::Matrix((uint64_t)&v122, 1, MatrixWidth);
  __int16 v122 = &unk_26FAEAF48;
  Matrix<double>::ReferTo(a4, (uint64_t)&v122);
  Matrix<double>::~Matrix((uint64_t)&v122);
  bzero(*(void **)(a4 + 8), 8 * (*(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16)));
  if (v27)
  {
    for (unint64_t j = 0; j != v27; ++j)
    {
      int v65 = 4 * j;
      if (*((unsigned char *)a2 + 128))
      {
        if (!v136 || j >= v137) {
          __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
        }
        if (v136 <= 1) {
          __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
        }
        uint64_t v66 = (double *)(v135 + 8 * j);
        double v67 = *v66;
        double v68 = v66[v137];
        SparseMatrix::AddValue(a3, 4 * j, 3, *v66);
        SparseMatrix::AddValue(a3, v65 | 1, 3, v68);
        *(double *)(*(void *)(a4 + 8) + Matrix<double>::~Matrix((uint64_t)this + 24) = *(double *)(*(void *)(a4 + 8) + 24) + v67 * v67;
        *(double *)(*(void *)(a4 + 8) + Matrix<double>::~Matrix((uint64_t)this + 24) = *(double *)(*(void *)(a4 + 8) + 24) + v68 * v68;
      }
      uint64_t v69 = 0;
      int v70 = v65 | 2;
      int v71 = v65 | 3;
      uint64_t v72 = &v187;
      do
      {
        unsigned int v73 = *(v72 - 1);
        if (!v73 || (unint64_t v74 = *v72, j >= v74)) {
          __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
        }
        if (v73 <= 1) {
          __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
        }
        unsigned int v75 = (double *)(*(void *)(v72 - 3) + 8 * j);
        double v76 = *v75;
        double v77 = v75[v74];
        SparseMatrix::AddValue(a3, v70, v69, *v75);
        SparseMatrix::AddValue(a3, v71, v69, v77);
        *(double *)(*(void *)(a4 + 8) + 8 * v69) = *(double *)(*(void *)(a4 + 8) + 8 * v69) + v76 * v76;
        *(double *)(*(void *)(a4 + 8) + 8 * v69) = *(double *)(*(void *)(a4 + 8) + 8 * v69) + v77 * v77;
        ++v69;
        v72 += 8;
      }
      while (v69 != 3);
    }
    uint64_t v78 = 0;
    double v116 = v175;
    double v114 = v178;
    double v115 = v176;
    double v79 = -v180;
    double v118 = -v183;
    double v120 = -v177;
    double v112 = v181;
    double v113 = v179;
    double v111 = v182;
    int v80 = 3;
    int v81 = 1;
    do
    {
      int v82 = *((unsigned __int8 *)a2 + 128);
      double v83 = -v117 / *(double *)(v168 + v78);
      double v84 = *(double *)(v149 + v78);
      double v85 = *(double *)(v159 + v78);
      double v86 = *(double *)(v147 + v78);
      double v87 = *(double *)(v154 + v78);
      SparseMatrix::AddValue(a3, v81 - 1, v80 + v82, v83);
      double v88 = -(v85 * v120 + v116 * v84) / v86;
      SparseMatrix::AddValue(a3, v81 + 1, v80 + v82, v88);
      double v89 = -(v87 * v120 + v115 * v84) / v86;
      SparseMatrix::AddValue(a3, v81 + 2, v80 + v82, v89);
      *(double *)(*(void *)(a4 + 8) + 8 * (v80 + v82)) = v88 * v88 + v83 * v83 + v89 * v89;
      double v90 = *(double *)(v149 + v78);
      double v91 = *(double *)(v159 + v78);
      double v92 = *(double *)(v147 + v78);
      double v93 = *(double *)(v154 + v78);
      SparseMatrix::AddValue(a3, v81, v80 + v82 + 1, v83);
      double v94 = -(v91 * v79 + v114 * v90) / v92;
      SparseMatrix::AddValue(a3, v81 + 1, v80 + v82 + 1, v94);
      double v95 = -(v93 * v79 + v113 * v90) / v92;
      SparseMatrix::AddValue(a3, v81 + 2, v80 + v82 + 1, v95);
      *(double *)(*(void *)(a4 + 8) + 8 * (v80 + v82 + 1)) = v94 * v94 + v83 * v83 + v95 * v95;
      double v96 = v117 / (*(double *)(v168 + v78) * *(double *)(v168 + v78));
      double v97 = v96 * *(double *)(v172 + v78);
      double v98 = *(double *)(v170 + v78);
      double v99 = *(double *)(v149 + v78);
      double v100 = *(double *)(v159 + v78);
      double v101 = *(double *)(v147 + v78);
      double v102 = *(double *)(v154 + v78);
      SparseMatrix::AddValue(a3, v81 - 1, v80 + v82 + 2, v97);
      double v103 = v96 * v98;
      SparseMatrix::AddValue(a3, v81, v80 + v82 + 2, v103);
      double v104 = -(v100 * v118 + v112 * v99) / v101;
      SparseMatrix::AddValue(a3, v81 + 1, v80 + v82 + 2, v104);
      double v105 = -(v102 * v118 + v111 * v99) / v101;
      SparseMatrix::AddValue(a3, v81 + 2, v80 + v82 + 2, v105);
      *(double *)(*(void *)(a4 + 8) + 8 * (v80 + v82 + 2)) = v103 * v103
                                                                             + v97 * v97
                                                                             + v104 * v104
                                                                             + v105 * v105;
      v80 += 3;
      v81 += 4;
      v78 += 8;
    }
    while (v28 != v78);
  }
  uint64_t v106 = *(unsigned int *)(a4 + 20);
  if (v106)
  {
    uint64_t v107 = 0;
    uint64_t v108 = 8 * v106;
    do
    {
      *(double *)(*(void *)(a4 + 8) + v107) = sqrt(*(double *)(*(void *)(a4 + 8) + v107));
      v107 += 8;
    }
    while (v108 != v107);
  }
  for (uint64_t k = 64; k != -32; k -= 32)
    Matrix<double>::~Matrix((uint64_t)&v184 + k);
  Matrix<double>::~Matrix((uint64_t)v126);
  Matrix<double>::~Matrix((uint64_t)v128);
  Matrix<double>::~Matrix((uint64_t)&v130);
  Matrix<double>::~Matrix((uint64_t)v134);
  Matrix<double>::~Matrix((uint64_t)&v138);
  Matrix<double>::~Matrix((uint64_t)&v142);
  Matrix<double>::~Matrix((uint64_t)v146);
  Matrix<double>::~Matrix((uint64_t)&v148);
  Matrix<double>::~Matrix((uint64_t)&v153);
  Matrix<double>::~Matrix((uint64_t)&v158);
  Matrix<double>::~Matrix((uint64_t)v163);
  Matrix<double>::~Matrix((uint64_t)v164);
  Matrix<double>::~Matrix((uint64_t)v165);
  Matrix<double>::~Matrix((uint64_t)v166);
  Matrix<double>::~Matrix((uint64_t)v167);
  Matrix<double>::~Matrix((uint64_t)v169);
  return Matrix<double>::~Matrix((uint64_t)v171);
}

void sub_24691041C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 64; i != -32; i -= 32)
    Matrix<double>::~Matrix((uint64_t)&STACK[0x308] + i);
  Matrix<double>::~Matrix((uint64_t)&a25);
  Matrix<double>::~Matrix((uint64_t)&a29);
  Matrix<double>::~Matrix((uint64_t)&a33);
  Matrix<double>::~Matrix((uint64_t)&a37);
  Matrix<double>::~Matrix((uint64_t)&a41);
  Matrix<double>::~Matrix((uint64_t)&a45);
  Matrix<double>::~Matrix((uint64_t)&a49);
  Matrix<double>::~Matrix((uint64_t)&a53);
  Matrix<double>::~Matrix((uint64_t)&a57);
  Matrix<double>::~Matrix((uint64_t)&a61);
  Matrix<double>::~Matrix((uint64_t)&a65);
  Matrix<double>::~Matrix((uint64_t)&a69);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x200]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x220]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x240]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x260]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void CGMC_BundleAdjustment::solveLinearEq(int a1, SparseMatrix *this, double a3, uint64_t a4, uint64_t a5, int a6)
{
  Matrixsize_t Height = SparseMatrix::GetMatrixHeight(this);
  SparseMatrix::Expand((uint64_t)this, a6, 1uLL);
  if (a6 >= 1)
  {
    uint64_t v12 = 0;
    double v13 = sqrt(a3);
    do
    {
      SparseMatrix::AddValue(this, MatrixHeight + v12, v12, v13 * *(double *)(*(void *)(a5 + 8) + 8 * v12));
      ++v12;
    }
    while (a6 != v12);
  }
  Matrix<double>::Matrix((uint64_t)&v15, 1, *(_DWORD *)(a4 + 20) + a6);
  double v15 = &unk_26FAEAF48;
  bzero(__dst, 8 * (v18 * v17));
  memcpy(__dst, *(const void **)(a4 + 8), 8 * *(unsigned int *)(a4 + 20));
  JacobianMatrix::Solve(this, v14);
}

void sub_246910880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  Matrix<double>::~Matrix(v9);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MatrixNxPts<1u,double>::operator/@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  Matrix<double>::operator/(a1, (uint64_t)&v7, a3);
  uint64_t v4 = v8;
  int v5 = v9;
  *(unsigned char *)(a2 + Matrix<double>::~Matrix((uint64_t)this + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a2 = &unk_26FAEAF48;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

uint64_t MatrixNxPts<1u,double>::operator*@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  Matrix<double>::operator*(a1, (uint64_t)&v7, a3);
  uint64_t v4 = v8;
  int v5 = v9;
  *(unsigned char *)(a2 + Matrix<double>::~Matrix((uint64_t)this + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a2 = &unk_26FAEAF48;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

uint64_t MatrixNxPts<1u,double>::MultAxBTag<1u>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  *a3 = 0.0;
  if (*(_DWORD *)(a2 + 16)) {
    BOOL v3 = *(_DWORD *)(a2 + 20) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  char v4 = v3;
  if (!*(_DWORD *)(result + 16) || (int v5 = *(_DWORD *)(result + 20)) == 0) {
    MatrixNxPts<3u,double>::CloneColumn();
  }
  if (v4) {
    MatrixNxPts<3u,double>::CloneColumn();
  }
  uint64_t v6 = *(double **)(a2 + 8);
  uint64_t v7 = *(double **)(result + 8);
  double v8 = 0.0;
  do
  {
    double v9 = *v7++;
    double v10 = v9;
    double v11 = *v6++;
    double v8 = v8 + v10 * v11;
    --v5;
  }
  while (v5);
  *a3 = v8;
  return result;
}

void Matrix<double>::operator+(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if (v4 != *(_DWORD *)(a1 + 20) || (int v7 = *(_DWORD *)(a2 + 16), v7 != *(_DWORD *)(a1 + 16))) {
    Matrix<float>::operator-();
  }
  Matrix<double>::Matrix(a3, v7, v4);
  vDSPVadd<double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 1, *(double **)(a3 + 8), 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

void sub_246910A90(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t MatrixNxPts<1u,double>::operator+@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Matrix<double>::operator+(a1, a2, (uint64_t)&v7);
  uint64_t v4 = v8;
  int v5 = v9;
  *(unsigned char *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a3 = &unk_26FAEAF48;
  *(void *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

void CGMC_BundleAdjustment::OptimizationParams::OptimizationParams(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  long long v3 = *(long long *)((char *)a2 + 56);
  long long v4 = *(long long *)((char *)a2 + 72);
  uint64_t v5 = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 56) = v3;
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = *(long long *)((char *)a2 + 24);
  Matrix<double>::Matrix(a1 + 96, (uint64_t)(a2 + 6), 0, -1);
}

{
  long long v2;
  long long v3;
  long long v4;
  uint64_t v5;

  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  long long v3 = *(long long *)((char *)a2 + 56);
  long long v4 = *(long long *)((char *)a2 + 72);
  uint64_t v5 = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 56) = v3;
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = *(long long *)((char *)a2 + 24);
  Matrix<double>::Matrix(a1 + 96, (uint64_t)(a2 + 6), 0, -1);
}

double CGMC_BundleAdjustment::OptimizationParams::ShiftBy(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 8);
  *(double *)a1 = **(double **)(a2 + 8) + *(double *)a1;
  *(double *)(a1 + 8) = *(double *)(*(void *)(a2 + 8) + 8) + v4;
  *(double *)(a1 + 16) = *(double *)(*(void *)(a2 + 8) + 16) + *(double *)(a1 + 16);
  if (*(unsigned char *)(a1 + 128))
  {
    *(double *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = *(double *)(*(void *)(a2 + 8) + 24) + *(double *)(a1 + 24);
    *(double *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 56) = *(double *)(*(void *)(a2 + 8) + 24) + *(double *)(a1 + 56);
  }
  Matrix<double>::Row(a1 + 96, 0, (uint64_t)&v11);
  uint64_t v5 = v12;
  Matrix<double>::~Matrix((uint64_t)&v11);
  Matrix<double>::Row(a1 + 96, 1, (uint64_t)&v11);
  uint64_t v6 = v12;
  Matrix<double>::~Matrix((uint64_t)&v11);
  Matrix<double>::Row(a1 + 96, 2, (uint64_t)&v11);
  uint64_t v7 = v12;
  Matrix<double>::~Matrix((uint64_t)&v11);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 128) + 3;
  for (unsigned int i = *(_DWORD *)(a2 + 20); v9 < i; v9 += 3)
  {
    *uint64_t v5 = *(double *)(*(void *)(a2 + 8) + 8 * v9) + *v5;
    ++v5;
    double *v6 = *(double *)(*(void *)(a2 + 8) + 8 * (v9 + 1)) + *v6;
    ++v6;
    double result = *(double *)(*(void *)(a2 + 8) + 8 * (v9 + 2)) + *v7;
    *v7++ = result;
  }
  return result;
}

BOOL CGMC_BundleAdjustment::isStalled(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4 = *(double **)(a3 + 8);
  double v5 = sqrt(v4[1] * v4[1] + *v4 * *v4 + v4[2] * v4[2]);
  if (v5 < *(double *)(a4 + 600))
  {
    double v5 = fabs(v4[3]);
    if (v5 < *(double *)(a4 + 608)) {
      return 1;
    }
  }
  LODWORD(v5) = *(_DWORD *)(a4 + 524);
  return fabs(a1) / (double)*(unint64_t *)&v5 < *(double *)(a4 + 592);
}

void CGMC_BundleAdjustment::angleAxisToRotationMatrix(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  double v4 = 0.0;
  do
  {
    double v4 = v4 + a1[v3] * a1[v3];
    ++v3;
  }
  while (v3 != 3);
  double v5 = sqrt(v4);
  if (v5 != 0.0)
  {
    for (uint64_t i = 0; i != 3; ++i)
      a1[i] = a1[i] / v5;
  }
  uint64_t v7 = 0;
  v43[0] = 0;
  double v9 = a1[1];
  double v8 = a1[2];
  double v10 = *a1;
  *(double *)&v43[1] = -v8;
  *(double *)&v43[2] = v9;
  *(double *)&v43[3] = v8;
  v43[4] = 0;
  *(double *)&v43[5] = -v10;
  *(double *)&v43[6] = -v9;
  *(double *)&v43[7] = v10;
  v43[8] = 0;
  uint64_t v40 = 0;
  uint64_t v11 = v39;
  memset(v39, 0, sizeof(v39));
  do
  {
    for (uint64_t j = 0; j != 3; ++j)
    {
      if (v7 == j) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      *((double *)v11 + j) = v13;
    }
    ++v7;
    uint64_t v11 = (_OWORD *)((char *)v11 + 24);
  }
  while (v7 != 3);
  double v14 = sin(v5);
  uint64_t v15 = 0;
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  do
  {
    *(double *)((char *)v37 + v15 * 8) = v14 * *(double *)&v43[v15];
    ++v15;
  }
  while (v15 != 9);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  do
  {
    for (uint64_t k = 0; k != 24; k += 8)
      *(double *)((char *)v41 + v16 + k) = *(double *)((char *)v39 + v16 + k) + *(double *)((char *)v37 + v16 + k);
    ++v17;
    v16 += 24;
  }
  while (v17 != 3);
  uint64_t v19 = 0;
  uint64_t v34 = 0;
  memset(v33, 0, sizeof(v33));
  uint64_t v20 = v43;
  do
  {
    uint64_t v21 = 0;
    double v22 = (double *)v43;
    do
    {
      uint64_t v23 = 0;
      double v24 = 0.0;
      long double v25 = v22;
      do
      {
        double v26 = *v25;
        v25 += 3;
        double v24 = v24 + *(double *)&v20[v23++] * v26;
      }
      while (v23 != 3);
      *((double *)v33 + 3 * v19 + v21++) = v24;
      ++v22;
    }
    while (v21 != 3);
    ++v19;
    v20 += 3;
  }
  while (v19 != 3);
  long double v27 = cos(v5);
  uint64_t v28 = 0;
  double v29 = 1.0 - v27;
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  do
  {
    *(double *)((char *)v35 + v28) = v29 * *(double *)((char *)v33 + v28);
    v28 += 8;
  }
  while (v28 != 72);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  do
  {
    for (uint64_t m = 0; m != 24; m += 8)
      *(double *)(a2 + m) = *(double *)((char *)v41 + v30 + m) + *(double *)((char *)v35 + v30 + m);
    ++v31;
    a2 += 24;
    v30 += 24;
  }
  while (v31 != 3);
}

void Matrix<double>::operator-(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  Matrix<double>::Matrix(a2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  double v6 = -a3;
  vDSPVsadd<double>(*(const double **)(a1 + 8), 1, &v6, *(double **)(a2 + 8), 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

void sub_246911080(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t MatrixNxPts<1u,double>::DotMult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Matrix<double>::DotMult<double>(a1, a2, (uint64_t)&v7);
  uint64_t v4 = v8;
  int v5 = v9;
  *(unsigned char *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a3 = &unk_26FAEAF48;
  *(void *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

uint64_t MatrixNxPts<1u,double>::operator-@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  Matrix<double>::operator-(a1, (uint64_t)&v7, a3);
  uint64_t v4 = v8;
  int v5 = v9;
  *(unsigned char *)(a2 + Matrix<double>::~Matrix((uint64_t)this + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a2 = &unk_26FAEAF48;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

uint64_t MatrixNxPts<1u,double>::operator-@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Matrix<double>::operator-(a1, a2, (uint64_t)&v7);
  uint64_t v4 = v8;
  int v5 = v9;
  *(unsigned char *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a3 = &unk_26FAEAF48;
  *(void *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

uint64_t CGMC_BundleAdjustment::getResidualsStats(uint64_t a1, uint64_t a2, void *a3, double *a4, double *a5)
{
  MatrixNxPts<1u,double>::DotMult(a2, a2, (uint64_t)v20);
  Matrix<double>::Matrix((uint64_t)&v16, 1, v22 >> 1);
  uint64_t v16 = &unk_26FAEAF48;
  if (v19)
  {
    unint64_t v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 8 * v19;
    do
    {
      v17[v8 / 8] = sqrt(*(double *)(v21 + 8 * v9) + *(double *)(v21 + 8 * (v9 + 1)));
      v9 += 2;
      v8 += 8;
    }
    while (v10 != v8);
  }
  MatrixNxPts<1u,double>::SortInplace<1u,void>((uint64_t)&v16);
  uint64_t v23 = 0;
  vDSPMeanv<double>(v17, 1, (double *)&v23, v19 * v18);
  *a3 = v23;
  unsigned int v11 = v19;
  unint64_t v12 = (unint64_t)v19 >> 1;
  double v13 = v17;
  if (v19) {
    double v14 = v17[v12];
  }
  else {
    double v14 = (v17[(v12 - 1)] + v17[v12]) * 0.5;
  }
  *a4 = sqrt(v14);
  *a5 = sqrt(v13[vcvtad_u64_f64((double)v11 * 0.95) - 1]);
  Matrix<double>::~Matrix((uint64_t)&v16);
  return Matrix<double>::~Matrix((uint64_t)v20);
}

void sub_246911348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  Matrix<double>::~Matrix((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MatrixMxN<3u,3u,double>::SVDMxN<3u,void>(long long *a1, __CLPK_doublereal *__u, __CLPK_doublereal *__s, __CLPK_doublereal *a4)
{
  long long v5 = a1[3];
  v21[1] = a1[2];
  _OWORD v21[2] = v5;
  uint64_t v22 = *((void *)a1 + 8);
  long long v6 = a1[1];
  long long v20 = *a1;
  v21[0] = v6;
  uint64_t v7 = (char *)&v20 + 8;
  unint64_t v8 = (char *)v21 + 8;
  for (uint64_t i = 1; i != 3; ++i)
  {
    uint64_t v10 = 0;
    unsigned int v11 = v7;
    do
    {
      uint64_t v12 = *(void *)&v8[8 * v10];
      *(void *)&v8[8 * v10] = *v11;
      void *v11 = v12;
      v11 += 3;
      ++v10;
    }
    while (i != v10);
    v7 += 8;
    v8 += 24;
  }
  MatrixMxN<3u,3u,double>::svdLapack((int)a1, (__CLPK_doublereal *)&v20, 3, 3, __u, __s, a4);
  double v13 = __u + 1;
  double v14 = __u + 3;
  for (uint64_t j = 1; j != 3; ++j)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v13;
    do
    {
      __CLPK_doublereal v18 = v14[v16];
      v14[v16] = *v17;
      *uint64_t v17 = v18;
      v17 += 3;
      ++v16;
    }
    while (j != v16);
    ++v13;
    v14 += 3;
  }
  return 0;
}

void CGMC_BundleAdjustment::CGMC_BundleAdjustment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 3;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = &unk_26FAEB100;
  *(void *)(a1 + 72) = 3;
  *(unsigned char *)(a1 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 56) = &unk_26FAEB100;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 104) = 2;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 88) = &unk_26FAEC0F0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 136) = 2;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = &unk_26FAEC0F0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  Matrix<double>::Matrix((uint64_t)&v2, a2, 0, -1);
}

void sub_24691173C(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  Matrix<double>::~Matrix(v3);
  Matrix<double>::~Matrix(v4);
  Matrix<double>::~Matrix(v2);
  _Unwind_Resume(a1);
}

void Matrix<double>::Matrix(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_26FAEAF18;
  int v4 = *(_DWORD *)(a2 + 20);
  int v5 = *(_DWORD *)(a2 + 16) - a3;
  if (a4 != -1) {
    int v5 = a4;
  }
  uint64_t v6 = *(void *)(a2 + 8) + 8 * (v4 * a3);
  uint64_t v7 = &unk_26FAEAF18;
  uint64_t v8 = v6;
  int v9 = v5;
  int v10 = v4;
  char v11 = 0;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4;
  operator new[]();
}

void sub_246911848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double Matrix<double>::DotDivInPlace(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20);
  if (v2 != *(_DWORD *)(a1 + 20) || (int v3 = *(_DWORD *)(a2 + 16), v3 != *(_DWORD *)(a1 + 16))) {
    Matrix<float>::operator-();
  }
  unsigned int v4 = v3 * v2;
  if (v4)
  {
    int v5 = *(double **)(a1 + 8);
    uint64_t v6 = &v5[v4];
    uint64_t v7 = *(double **)(a2 + 8);
    do
    {
      double v8 = *v7++;
      double result = *v5 / v8;
      *v5++ = result;
    }
    while (v5 < v6);
  }
  return result;
}

void Matrix<double>::operator/(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v5 = a3;
  Matrix<double>::Matrix(a2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  vDSPVsdiv<double>(*(const double **)(a1 + 8), 1, &v5, *(double **)(a2 + 8), 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

void sub_24691191C(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void Matrix<double>::operator*(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v5 = a3;
  Matrix<double>::Matrix(a2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  vDSPVsmul<double>(*(const double **)(a1 + 8), 1, &v5, *(double **)(a2 + 8), 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

void sub_24691198C(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

double Matrix<double>::DotProductInPlace(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20);
  if (v2 != *(_DWORD *)(a1 + 20) || (int v3 = *(_DWORD *)(a2 + 16), v3 != *(_DWORD *)(a1 + 16))) {
    Matrix<float>::operator-();
  }
  unsigned int v4 = v3 * v2;
  if (v4)
  {
    double v5 = *(double **)(a1 + 8);
    uint64_t v6 = &v5[v4];
    uint64_t v7 = *(double **)(a2 + 8);
    do
    {
      double v8 = *v7++;
      double result = v8 * *v5;
      *v5++ = result;
    }
    while (v5 < v6);
  }
  return result;
}

void Matrix<double>::operator-(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if (v4 != *(_DWORD *)(a1 + 20) || (int v7 = *(_DWORD *)(a2 + 16), v7 != *(_DWORD *)(a1 + 16))) {
    Matrix<float>::operator-();
  }
  Matrix<double>::Matrix(a3, v7, v4);
  vDSPVsub<double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 1, *(double **)(a3 + 8), 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

void sub_246911A84(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t MatrixMxN<3u,3u,double>::svdLapack(int a1, __CLPK_doublereal *__a, __CLPK_integer a3, __CLPK_integer a4, __CLPK_doublereal *__u, __CLPK_doublereal *__s, __CLPK_doublereal *a7)
{
  __CLPK_integer __lda = a4;
  __CLPK_integer __ldvt = a4;
  __CLPK_integer __ldu = a3;
  __CLPK_integer __n = a4;
  __uint64_t m = a3;
  __CLPK_doublereal v16 = 0.0;
  strcpy(__jobu, "S");
  strcpy(__jobvt, "S");
  uint64_t v11 = 0xFFFFFFFFLL;
  __lworuint64_t k = -1;
  __CLPK_integer v20 = 0;
  dgesvd_(__jobu, __jobvt, &__m, &__n, __a, &__lda, __s, __u, &__ldu, a7, &__ldvt, &v16, &__lwork, &v20);
  __lworuint64_t k = (int)v16;
  uint64_t v12 = (__CLPK_doublereal *)malloc_type_malloc(8 * (int)v16, 0x100004000313F17uLL);
  dgesvd_(__jobu, __jobvt, &__m, &__n, __a, &__lda, __s, __u, &__ldu, a7, &__ldvt, v12, &__lwork, &v20);
  if (v20 <= 0)
  {
    free(v12);
    return 0;
  }
  return v11;
}

void ___ZN6H16ISP24H16ISPGraphFrameSyncNode10onActivateEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  H16ISP::H16ISPGraphFrameSyncNode::CheckForSynchronization(v1, 0);

  H16ISP::H16ISPGraphFrameSyncNode::CheckForSynchronization(v1, 1);
}

uint64_t H16ISP::H16ISPGraphFrameSyncNode::onDeactivate(H16ISP::H16ISPGraphFrameSyncNode *this)
{
  int v2 = *((void *)this + 38);
  if (v2)
  {
    dispatch_release(v2);
    *((void *)this + 38) = 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = &_os_log_internal;
  do
  {
    double v5 = (char *)this + 72 * v3;
    uint64_t v8 = *((void *)v5 + 14);
    uint64_t v6 = v5 + 112;
    uint64_t v7 = v8;
    if (v8)
    {
      if (*(_DWORD *)(v7 + 20))
      {
        unint64_t v9 = 0;
        int v10 = (__CVBuffer **)(v7 + 24);
        do
        {
          uint64_t v11 = *v10;
          v10 += 2;
          CVPixelBufferRelease(v11);
          ++v9;
        }
        while (v9 < *(unsigned int *)(v7 + 20));
      }
      uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v4)
      {
        uint64_t v12 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v12;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_DEFAULT, "H16ISPGraphFrameSyncNode::AllocateAndSendGraphMessage - System tearing down, discard the cached frame.\n\n", buf, 2u);
      }
      if (*v6) {
        MEMORY[0x24C53D6E0](*v6, 0x10A0C40FEED4831);
      }
    }
    void *v6 = 0;
    double v13 = (char *)this + 72 * v3;
    uint64_t v16 = *((void *)v13 + 18);
    double v14 = v13 + 144;
    uint64_t v15 = v16;
    if (v16)
    {
      if (*(_DWORD *)(v15 + 20))
      {
        unint64_t v17 = 0;
        __CLPK_doublereal v18 = (__CVBuffer **)(v15 + 24);
        do
        {
          unsigned int v19 = *v18;
          v18 += 2;
          CVPixelBufferRelease(v19);
          ++v17;
        }
        while (v17 < *(unsigned int *)(v15 + 20));
      }
      __CLPK_integer v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v4)
      {
        __CLPK_integer v20 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v20;
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_24680F000, v20, OS_LOG_TYPE_DEFAULT, "H16ISPGraphFrameSyncNode::AllocateAndSendGraphMessage - System tearing down, discard the cached frame.\n\n", v22, 2u);
      }
      if (*v14) {
        MEMORY[0x24C53D6E0](*v14, 0x10A0C40FEED4831);
      }
    }
    *double v14 = 0;
    ++v3;
  }
  while (v3 != 3);
  return 0;
}

void H16ISP::H16ISPGraphFrameSyncNode::~H16ISPGraphFrameSyncNode(H16ISP::H16ISPGraphFrameSyncNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPGraphFrameSyncNode::DisableChannel(H16ISP::H16ISPGraphFrameSyncNode *this, unsigned int a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = -536870160;
  if (H16ISP::H16ISPDevice::isSensorType(*((void *)this + 39), a2, 1785950322))
  {
    uint64_t v4 = 0;
  }
  else
  {
    double v5 = *((void *)this + 1);
    if (v5)
    {
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = ___ZN6H16ISP24H16ISPGraphFrameSyncNode14DisableChannelEj_block_invoke;
      block[3] = &unk_2651E9268;
      unsigned int v9 = a2;
      block[4] = &v10;
      block[5] = this;
      dispatch_sync(v5, block);
    }
    if (*((_DWORD *)v11 + 6))
    {
      uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v6 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphFrameSyncNode::DisableChannel(a2, v6);
      }
    }
    uint64_t v4 = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return v4;
}

void sub_246911F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6H16ISP24H16ISPGraphFrameSyncNode14DisableChannelEj_block_invoke(uint64_t result)
{
  uint64_t v1 = 0;
  int v2 = *(H16ISP::H16ISPFilterGraphMessage **)(result + 40);
  while (!*((unsigned char *)v2 + v1 + 80) || *(_DWORD *)((char *)v2 + v1 + 84) != *(_DWORD *)(result + 48))
  {
    v1 += 72;
    if (v1 == 216) {
      return result;
    }
  }
  *((unsigned char *)v2 + v1 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  if (*(void *)((char *)v2 + v1 + 112)) {
    H16ISP::H16ISPGraphFrameSyncNode::AllocateAndSendGraphMessage(v2);
  }
  if (*(void *)((char *)v2 + v1 + 144)) {
    H16ISP::H16ISPGraphFrameSyncNode::AllocateAndSendGraphMessage(v2);
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  return result;
}

uint64_t H16ISP::H16ISPGraphFrameSyncNode::GetNumEnabledChannels(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = 0;
  LODWORD(this) = 0;
  uint64_t v3 = v1 + 80;
  do
  {
    this = this + *(unsigned __int8 *)(v3 + v2);
    v2 += 72;
  }
  while (v2 != 216);
  return this;
}

uint64_t GetDistortionCenter(const __CFDictionary *a1, int a2, int a3, int a4, int a5, CGPoint *a6)
{
  CFDictionaryRef dict = 0;
  CGPoint point = (CGPoint)*MEMORY[0x263F00148];
  long long v14 = *MEMORY[0x263F001A8];
  long long v15 = *(_OWORD *)(MEMORY[0x263F001A8] + 16);
  if (!FigCFDictionaryGetCGRectIfPresent()
    && !FigCFDictionaryGetCGRectIfPresent()
    && !FigCFDictionaryGetCGRectIfPresent())
  {
    return 3758097084;
  }
  double v11 = ((double)a2 + -1.0) * 0.5;
  double v12 = ((double)a3 + -1.0) * 0.5;
  if (FigCFDictionaryGetValueIfPresent())
  {
    if (CGPointMakeWithDictionaryRepresentation(dict, &point))
    {
      double v11 = v11 + (point.x - (*(double *)&v14 + (*(double *)&v15 + -1.0) * 0.5)) * (double)a4;
      double v12 = v12 + (point.y - (*((double *)&v14 + 1) + (*((double *)&v15 + 1) + -1.0) * 0.5)) * (double)a5;
    }
  }
  uint64_t result = 0;
  a6->x = v11;
  a6->y = v12;
  return result;
}

uint64_t GetGDCPolynomials(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (double *)(a2 + 260);
  int v5 = *(_DWORD *)(a2 + 16);
  if ((v5 - 49921) >= 5)
  {
    if (v5 == 49926)
    {
      for (uint64_t i = 0; i != 32; i += 4)
      {
        float v36 = *(v4 - 8);
        double v37 = (float *)(a4 + 32 + i);
        *(v37 - 8) = v36;
        float v38 = *(v4 - 24);
        *double v37 = v38;
        float v39 = *v4;
        uint64_t v40 = (float *)(a3 + i);
        *uint64_t v40 = v39;
        float v41 = *(v4 - 16);
        unsigned char v40[8] = v41;
        ++v4;
      }
      return 0;
    }
    else
    {
      return 3758097126;
    }
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)a4 = 0;
    float v7 = *(double *)(a2 + 436);
    *(float *)(a4 + 4) = v7;
    float v8 = *(double *)(a2 + 444);
    *(float *)(a4 + 8) = v8;
    float v9 = *(double *)(a2 + 452);
    *(float *)(a4 + 12) = v9;
    float v10 = *(double *)(a2 + 460);
    *(float *)(a4 + 16) = v10;
    float v11 = *(double *)(a2 + 468);
    *(float *)(a4 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v11;
    float v12 = *(double *)(a2 + 476);
    *(float *)(a4 + Matrix<double>::~Matrix((uint64_t)this + 24) = v12;
    float v13 = *(double *)(a2 + 484);
    *(float *)(a4 + 28) = v13;
    *(_DWORD *)(a4 + 32) = 0;
    float v14 = *(double *)(a2 + 308);
    *(float *)(a4 + 36) = v14;
    float v15 = *(double *)(a2 + 316);
    *(float *)(a4 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v15;
    float v16 = *(double *)(a2 + 324);
    *(float *)(a4 + 44) = v16;
    float v17 = *(double *)(a2 + 332);
    *(float *)(a4 + 48) = v17;
    float v18 = *(double *)(a2 + 340);
    *(float *)(a4 + 52) = v18;
    float v19 = *(double *)(a2 + 348);
    *(float *)(a4 + Matrix<double>::~Matrix((uint64_t)this + 56) = v19;
    float v20 = *(double *)(a2 + 356);
    *(float *)(a4 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v20;
    *(_DWORD *)a3 = 0;
    float v21 = *(double *)(a2 + 500);
    *(float *)(a3 + 4) = v21;
    float v22 = *(double *)(a2 + 508);
    *(float *)(a3 + 8) = v22;
    float v23 = *(double *)(a2 + 516);
    *(float *)(a3 + 12) = v23;
    float v24 = *(double *)(a2 + 524);
    *(float *)(a3 + 16) = v24;
    float v25 = *(double *)(a2 + 532);
    *(float *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v25;
    float v26 = *(double *)(a2 + 540);
    *(float *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = v26;
    float v27 = *(double *)(a2 + 548);
    *(float *)(a3 + 28) = v27;
    *(_DWORD *)(a3 + 32) = 0;
    float v28 = *(double *)(a2 + 372);
    *(float *)(a3 + 36) = v28;
    float v29 = *(double *)(a2 + 380);
    *(float *)(a3 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v29;
    float v30 = *(double *)(a2 + 388);
    *(float *)(a3 + 44) = v30;
    float v31 = *(double *)(a2 + 396);
    *(float *)(a3 + 48) = v31;
    float v32 = *(double *)(a2 + 404);
    *(float *)(a3 + 52) = v32;
    float v33 = *(double *)(a2 + 412);
    *(float *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 56) = v33;
    float v34 = *(double *)(a2 + 420);
    *(float *)(a3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v34;
  }
  return result;
}

uint64_t GetDistortionPolynomials(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = 0;
  float v7 = (double)a6 * 0.0000152587891;
  if (!a5) {
    float v7 = 1.0;
  }
  do
  {
    *(float *)(a3 + v6) = *(float *)(a2 + 32 + v6) + (float)(*(float *)(a1 + 32 + v6) * v7);
    *(float *)(a4 + v6) = *(float *)(a2 + v6) + (float)(*(float *)(a1 + v6) * v7);
    v6 += 4;
  }
  while (v6 != 32);
  return 0;
}

float ComputeLensPSF(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  v14.origin.x = (double)a4;
  v14.origin.y = (double)a5;
  v14.size.width = (double)a6;
  v14.size.height = (double)a7;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v14);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D630], DictionaryRepresentation);
  FigMotionComputeLensPositionScalingFactor();
  CFRelease(DictionaryRepresentation);
  CFRelease(Mutable);
  return 1.0;
}

double ComputeOpticalCenter(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, float a8, float a9, unsigned int a10, double a11, unsigned int a12, BOOL a13)
{
  long long v24 = *MEMORY[0x263F00148];
  *(double *)&unint64_t v17 = (double)a10;
  CGFloat v18 = (double)a10 / 1000000.0;
  LODWORD(v17) = a12;
  CGFloat v19 = (double)v17 / 1000000.0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  v26.origin.x = (double)a4;
  v26.origin.y = (double)a5;
  v26.size.width = (double)a6;
  v26.size.height = (double)a7;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v26);
  v25.x = v18;
  v25.y = v19;
  CFDictionaryRef v22 = CGPointCreateDictionaryRepresentation(v25);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D630], DictionaryRepresentation);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D3C0], v22);
  FigMotionComputePrincipalPoint();
  CFRelease(v22);
  CFRelease(DictionaryRepresentation);
  CFRelease(Mutable);
  return *(double *)&v24;
}

double H16ISPMetrics::AddSample(H16ISPMetrics *this, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)this;
  double result = 0.0;
  if (a2 - 1 < a3 && v3 != 0)
  {
    uint64_t v6 = *((unsigned int *)this + 4);
    *(void *)(v3 + 8 * v6) = a3 - a2;
    unsigned int v8 = *((_DWORD *)this + 2);
    unsigned int v7 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 4) = ((int)v6 + 1) % v8;
    if (v7 < v8) {
      *((_DWORD *)this + 3) = v7 + 1;
    }
    return (double)((a3 - a2) * *((unsigned int *)this + 8) / *((unsigned int *)this + 9)) / 1000000.0;
  }
  return result;
}

H16ISPMetrics *H16ISPMetrics::StartTimer(H16ISPMetrics *this)
{
  if (*(void *)this)
  {
    uint64_t v1 = this;
    if (!*((void *)this + 3))
    {
      this = (H16ISPMetrics *)mach_absolute_time();
      *((void *)v1 + 3) = this;
    }
  }
  return this;
}

double H16ISPMetrics::StopTimer(H16ISPMetrics *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0.0;
  }
  uint64_t v3 = mach_absolute_time();
  double result = H16ISPMetrics::AddSample(this, v1, v3);
  *((void *)this + 3) = 0;
  return result;
}

void H16ISPMetrics::GetMetricsSummary(_DWORD *a1, _DWORD *a2)
{
  if (a2)
  {
    bzero(a2, 0x38uLL);
    int v5 = a1[2];
    int v4 = a1[3];
    *a2 = v4;
    a2[1] = v5;
    a2[2] = a1[4];
    if (v4) {
      operator new[]();
    }
  }
}

void H16ISPMetrics::PrintMetricsSummary(H16ISPMetrics *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  H16ISPMetrics::GetMetricsSummary(this, v3);
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  uint64_t v2 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    LODWORD(v1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3[0];
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_DEFAULT, " Number of samples: %d\n", buf, 8u);
    uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  }
  if (v1 == v2)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    LODWORD(v1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3[1];
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_DEFAULT, " Maximum samples:   %d\n", buf, 8u);
    uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  }
  if (v1 == v2)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    uint64_t v10 = v4;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_DEFAULT, " Minimum time (ms): %.3f\n", buf, 0xCu);
    uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  }
  if (v1 == v2)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    uint64_t v10 = v5;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_DEFAULT, " Maximum time (ms): %.3f\n", buf, 0xCu);
    uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  }
  if (v1 == v2)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    uint64_t v10 = v6;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_DEFAULT, " Average time (ms): %.3f\n", buf, 0xCu);
    uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  }
  if (v1 == v2)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    uint64_t v10 = v7;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_DEFAULT, " Median time (ms): %.3f\n", buf, 0xCu);
    uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  }
  if (v1 == v2)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    uint64_t v10 = v8;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_DEFAULT, " Standard deviation (ms): %.3f\n", buf, 0xCu);
  }
}

H16ISPMetrics *H16ISPMetrics::ClearSamples(H16ISPMetrics *this)
{
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  return this;
}

void H16ISPMetrics::H16ISPMetrics(H16ISPMetrics *this, int a2)
{
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 2) = a2;
  *((void *)this + 3) = 0;
  operator new[]();
}

{
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 2) = a2;
  *((void *)this + 3) = 0;
  operator new[]();
}

void H16ISPMetrics::~H16ISPMetrics(H16ISPMetrics *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    MEMORY[0x24C53D6C0](v1, 0x1000C8000313F17);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  if (v1) {
    MEMORY[0x24C53D6C0](v1, 0x1000C8000313F17);
  }
}

uint64_t H16ISP::H16ISPGraphInfoNode::onActivate(H16ISP::H16ISPGraphInfoNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPGraphInfoNode::onDeactivate(H16ISP::H16ISPGraphInfoNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPGraphInfoNode::onMessageProcessing(H16ISP::H16ISPGraphInfoNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v3 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  int v4 = *((_DWORD *)a2 + 103);
  if (!*((_DWORD *)a2 + 25))
  {
    if (!v4)
    {
      puts("H16ISPGraphInfoNode - No buffers in message (that is strange)");
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (!v4)
  {
LABEL_5:
    printf("H16ISPGraphInfoNode - Single-channel frame message (channel %d)\n");
    goto LABEL_6;
  }
  printf("H16ISPGraphInfoNode - Synced-pair frame message (channels %d and %d). Timestamp delta: %6.3f mSec\n");
LABEL_6:
  pthread_mutex_unlock(v3);
  return 0;
}

H16ISP::H16ISPGraphInfoNode *H16ISP::H16ISPGraphInfoNode::H16ISPGraphInfoNode(H16ISP::H16ISPGraphInfoNode *this)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 1);
  *(void *)uint64_t v2 = &unk_26FAEC2C8;
  mach_timebase_info((mach_timebase_info_t)(v2 + 80));
  return this;
}

void sub_246912F08(_Unwind_Exception *a1)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(v1);
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPGraphInfoNode::~H16ISPGraphInfoNode(H16ISP::H16ISPGraphInfoNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t CppUtils::MachTimeToMicroseconds(uint64_t this, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = this;
  unsigned int v5 = dword_2691BF66C;
  if (!dword_2691BF66C)
  {
    this = mach_timebase_info((mach_timebase_info_t)&CppUtils::MachTimeToMicroseconds(unsigned long long,unsigned long long *)::sTimebaseInfo);
    unsigned int v5 = dword_2691BF66C;
  }
  *a2 = (unint64_t)CppUtils::MachTimeToMicroseconds(unsigned long long,unsigned long long *)::sTimebaseInfo
      * v4
      / v5
      / 0x3E8;
  return this;
}

void H16ISP::H16ISPPearlCalibrationNodeBase::markCurrentFrame(H16ISP::H16ISPPearlCalibrationNodeBase *this, CFMutableDictionaryRef theDict)
{
}

uint64_t H16ISP::H16ISPPearlCalibrationNodeBase::dropPDEBuffers(H16ISP::H16ISPPearlCalibrationNodeBase *this, H16ISP::H16ISPFilterGraphMessage *a2, unsigned int a3)
{
  uint64_t v6 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  if (a3 <= 2)
  {
    uint64_t v7 = (char *)a2 + 312 * a3;
    if (*((_DWORD *)v7 + 24) == *((unsigned __int16 *)this + 44))
    {
      uint64_t v8 = (uint64_t)(v7 + 80);
      H16ISP::H16ISPFilterGraphNode::RemoveFrame((uint64_t)this, (uint64_t)(v7 + 80), 21);
      if (v9) {
        CVPixelBufferRelease(v9);
      }
      H16ISP::H16ISPFilterGraphNode::RemoveFrame((uint64_t)this, v8, 17);
      if (v10) {
        CVPixelBufferRelease(v10);
      }
    }
  }

  return pthread_mutex_unlock(v6);
}

uint64_t H16ISP::H16ISPPearlCalibrationNodeBase::shouldProcessByPearlMetadata(H16ISP::H16ISPPearlCalibrationNodeBase *this, const H16ISP::H16ISPFrameMetadata *a2, H16ISP::H16ISPFilterGraphMessage *a3, unsigned int a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_WORD *)*((void *)a2 + 44);
  if (!v4 || !v4[1]) {
    return 1;
  }
  if ((unsigned __int16)v4[14] - 1 >= 2)
  {
    if (!*((unsigned char *)this + 95))
    {
      CGRect v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        CGRect v14 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPPearlCalibrationNodeBase::shouldProcessByPearlMetadata();
      }
LABEL_16:
      H16ISP::H16ISPPearlCalibrationNodeBase::dropPDEBuffers(this, a3, a4);
    }
    return 0;
  }
  int v8 = (unsigned __int16)v4[37];
  if (v4[37])
  {
    float v9 = (char *)a2 + 352;
    if (v8 == 1)
    {
      int v18 = (unsigned __int16)v4[6];
      switch(v4[6])
      {
        case 0:
        case 4:
          goto LABEL_32;
        case 1:
        case 2:
        case 5:
          goto LABEL_35;
        case 3:
        case 6:
          goto LABEL_31;
        default:
          if (v18 == 24)
          {
LABEL_32:
            *((unsigned char *)this + 93) = 0;
            return 1;
          }
          if (v18 == 27)
          {
LABEL_31:
            uint64_t result = 1;
            *((unsigned char *)this + 93) = 1;
            return result;
          }
LABEL_35:
          CFDictionaryRef v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            CFDictionaryRef v22 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v22;
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPPearlCalibrationNodeBase::shouldProcessByPearlMetadata((uint64_t)v9, v22);
          }
          if (!*((unsigned char *)this + 95)) {
            goto LABEL_16;
          }
          return 0;
      }
    }
    if (v8 == 2)
    {
      *((_DWORD *)this + 26) = 1;
      uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v10 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
      }
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v11)
      {
        LOWORD(v23[0]) = 0;
        float v13 = "Pearl Calibration (MI): FW says pearl system is valid!\n";
LABEL_21:
        float v16 = v10;
        uint32_t v17 = 2;
LABEL_27:
        _os_log_impl(&dword_24680F000, v16, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)v23, v17);
        return 0;
      }
    }
    else
    {
      CGFloat v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        CGFloat v19 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v19;
      }
      BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v20)
      {
        int v21 = *(unsigned __int16 *)(*(void *)v9 + 74);
        v23[0] = 67109120;
        v23[1] = v21;
        float v13 = "Pearl Calibration (MI): Unknown Pearl System Status %d\n";
        float v16 = v19;
        uint32_t v17 = 8;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v10 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
    }
    BOOL v15 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v15)
    {
      LOWORD(v23[0]) = 0;
      float v13 = "Pearl Calibration (MI): FW says pearl system status is unknown\n";
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPPearlCalibrationNode::H16ISPPearlCalibrationNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = H16ISP::H16ISPPearlCalibrationNodeBase::H16ISPPearlCalibrationNodeBase(a1, a2, a6, a7, a8, 0);
  *(void *)uint64_t result = &unk_26FAEC3B0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(result + 128) = a3;
  *(void *)(result + 136) = a4;
  *(void *)(result + 144) = a5;
  *(void *)(result + 152) = a9;
  *(void *)(result + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a10;
  *(unsigned char *)(result + 168) = 0;
  *(void *)(result + 176) = a11;
  *(_WORD *)(result + 184) = 0;
  *(unsigned char *)(result + 192) = 0;
  return result;
}

{
  uint64_t result;

  uint64_t result = H16ISP::H16ISPPearlCalibrationNodeBase::H16ISPPearlCalibrationNodeBase(a1, a2, a6, a7, a8, 0);
  *(void *)uint64_t result = &unk_26FAEC3B0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(result + 128) = a3;
  *(void *)(result + 136) = a4;
  *(void *)(result + 144) = a5;
  *(void *)(result + 152) = a9;
  *(void *)(result + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a10;
  *(unsigned char *)(result + 168) = 0;
  *(void *)(result + 176) = a11;
  *(_WORD *)(result + 184) = 0;
  *(unsigned char *)(result + 192) = 0;
  return result;
}

uint64_t H16ISP::H16ISPPearlCalibrationNode::onActivate(H16ISP::H16ISPPearlCalibrationNode *this)
{
  if (!*((void *)this + 14))
  {
    uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_BACKGROUND, 0);
    *((void *)this + 14) = dispatch_queue_create("com.apple.H16ispcalibrationnode.algo", v2);
    *((void *)this + 15) = dispatch_group_create();
  }
  *((unsigned char *)this + 168) = 0;
  return 0;
}

uint64_t H16ISP::H16ISPPearlCalibrationNode::onDeactivate(H16ISP::H16ISPPearlCalibrationNode *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v3 = v2;
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(void *)(v2 + 112))
  {
    RgbIrCalibration::abort(*(RgbIrCalibration **)(v2 + 160));
    *(unsigned char *)(v3 + 168) = 1;
    dispatch_time_t v4 = dispatch_time(0, 2000000000);
    intptr_t v5 = dispatch_group_wait(*(dispatch_group_t *)(v3 + 120), v4);
    dispatch_release(*(dispatch_object_t *)(v3 + 120));
    if (v5)
    {
      *(void *)(v3 + 112) = 0;
      uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v6 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPPearlCalibrationNode::onDeactivate();
      }
      return 0;
    }
    dispatch_release(*(dispatch_object_t *)(v3 + 112));
    *(void *)(v3 + 112) = 0;
  }
  if (H16ISP::getPCECalib(*(void *)(v3 + 80), *(unsigned __int16 *)(v3 + 88)))
  {
    uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, void))(v3 + 128);
    if (v7)
    {
      v7(v16, v15, *(void *)(v3 + 176));
      memcpy(__dst, v18, sizeof(__dst));
      PearlIsf::PearlIsf((PearlIsf *)v14);
      if (!PearlIsf::updatePCECalib((uint64_t)v14, (uint64_t)v16, (uint64_t)v18)
        && memcmp(v18, __dst, 0x3370uLL))
      {
        uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v10 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v19[0] = 0;
          _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI) finalization: updating PCECalib\n", (uint8_t *)v19, 2u);
        }
        BOOL v11 = *(H16ISP::H16ISPDevice **)(v3 + 80);
        int v12 = *(unsigned __int16 *)(v3 + 88);
        _DWORD v19[2] = 24581;
        int v20 = v12;
        memcpy(v21, v18, sizeof(v21));
        H16ISP::H16ISPDevice::ISP_SendCommand(v11, (unsigned __int8 *)v19, 0x337Cu, 0, 0xFFFFFFFF);
        float v13 = *(void (**)(unsigned char *, void))(v3 + 144);
        if (v13) {
          v13(v18, *(void *)(v3 + 176));
        }
      }
      PearlIsf::~PearlIsf((PearlIsf *)v14);
    }
  }
  else
  {
    int v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v8 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPPearlCalibrationNode::onDeactivate();
    }
  }
  return 0;
}

void sub_246913854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PearlIsf::~PearlIsf((PearlIsf *)va);
  _Unwind_Resume(a1);
}

BOOL H16ISP::getPCECalib(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  int v8 = v7;
  float v9 = (H16ISP::H16ISPDevice *)v2;
  uint64_t v23 = *MEMORY[0x263EF8340];
  __int16 v15 = 24577;
  int v16 = v10;
  bzero(v17, 0x33BCuLL);
  int v11 = H16ISP::H16ISPDevice::ISP_SendCommand(v9, v14, 0x33C8u, 0, 0xFFFFFFFF);
  BOOL result = 0;
  if (!v11)
  {
    if (v6) {
      _WORD *v6 = v18;
    }
    if (v4)
    {
      long long v13 = v21;
      *(_OWORD *)uint64_t v4 = v20;
      *(_OWORD *)(v4 + 16) = v13;
      *(void *)(v4 + 32) = v22;
    }
    memcpy(v8, v19, 0x3370uLL);
    return v17[0] != 0;
  }
  return result;
}

void H16ISP::H16ISPPearlCalibrationNode::~H16ISPPearlCalibrationNode(H16ISP::H16ISPPearlCalibrationNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

void H16ISP::H16ISPPearlCalibrationNode::updateMetadata(H16ISP::H16ISPPearlCalibrationNode *this, __CFDictionary *a2)
{
  if (*((unsigned char *)this + 192))
  {
    setValueCFDict<int>(a2, @"MutualInformation-Result", *((_DWORD *)this + 49));
    setValueCFDict<int>(a2, @"MutualInformation-SelectedMode", *((_DWORD *)this + 50));
    setValueCFDict<int>(a2, @"MutualInformation-Stage", *((_DWORD *)this + 54));
    setValueCFDict<float>(a2, @"MutualInformation-RotationX", *((float *)this + 51));
    setValueCFDict<float>(a2, @"MutualInformation-RotationY", *((float *)this + 52));
    setValueCFDict<float>(a2, @"MutualInformation-RotationZ", *((float *)this + 53));
    if (!*((_DWORD *)this + 54))
    {
      uint64_t valuePtr = *((void *)this + 28);
      CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberDoubleType, &valuePtr);
      CFDictionarySetValue(a2, @"MutualInformation-Confidence", v4);
      CFRelease(v4);
    }
  }
}

BOOL H16ISP::H16ISPPearlCalibrationNode::isSessionOK(H16ISP::H16ISPPearlCalibrationNode *this, __CVBuffer *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  int v4 = *((unsigned __int8 *)this + 93);
  if (!*((unsigned char *)this + 93))
  {
    intptr_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      intptr_t v5 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPPearlCalibrationNode::isSessionOK();
    }
  }
  return v4 != 0;
}

const __CFNumber *H16ISP::H16ISPPearlCalibrationNode::isFrameOK(H16ISP::H16ISPPearlCalibrationNode *this, __CVBuffer *a2, const __CFDictionary *a3, CFDictionaryRef theDict)
{
  if (!theDict) {
    return 0;
  }
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2CDD8]);
  int valuePtr = -1;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
    if (valuePtr)
    {
      CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2D000]);
      if (result) {
        return (const __CFNumber *)(CFArrayGetCount(result) != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPPearlCalibrationNode::algorithmPreconditions(H16ISP::H16ISPPearlCalibrationNode *this, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, const __CFDictionary *a5, const __CFDictionary *a6)
{
  BOOL isSessionOK = H16ISP::H16ISPPearlCalibrationNode::isSessionOK(this, a2, a3, a4);
  if (isSessionOK) {
    return H16ISP::H16ISPPearlCalibrationNode::isFrameOK((H16ISP::H16ISPPearlCalibrationNode *)isSessionOK, v8, v9, a5) ^ 1;
  }
  else {
    return 2;
  }
}

uint64_t H16ISP::H16ISPPearlCalibrationNode::onMessageProcessing(H16ISP::H16ISPPearlCalibrationNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  int v2 = *((_DWORD *)this + 26);
  if (v2 == 4 || v2 == 2)
  {
    *((_WORD *)this + 46) = 1;
    uint64_t v6 = (pthread_mutex_t *)((char *)a2 + 8);
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
    uint64_t v7 = 0;
    unsigned __int16 v8 = 0;
    CFDictionaryRef v9 = 0;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    long long v13 = 0;
    CGRect v14 = (char *)a2 + 80;
    int v15 = *((unsigned __int16 *)this + 45);
    int v16 = *((unsigned __int16 *)this + 44);
    uint32_t v17 = (char *)a2 + 112;
    __int16 v18 = (char *)a2 + 104;
    unsigned __int16 v19 = -1;
    do
    {
      int v20 = *(_DWORD *)&v14[312 * v7 + 16];
      if (v20 == v15)
      {
        uint64_t v21 = *(unsigned int *)&v14[312 * v7 + 20];
        uint64_t v22 = v17;
        if (v21)
        {
          while (*v22)
          {
            v22 += 4;
            if (!--v21) {
              goto LABEL_13;
            }
          }
          long long v13 = (__CVBuffer *)*((void *)v22 - 1);
        }
      }
LABEL_13:
      if (v20 == v16)
      {
        uint64_t v23 = *(unsigned int *)&v14[312 * v7 + 20];
        if (v23)
        {
          uint64_t v24 = v18;
          do
          {
            int v25 = *((_DWORD *)v24 + 2);
            if (v25 <= 1)
            {
              if (v25)
              {
                if (v25 == 1) {
                  int v12 = *(__CVBuffer **)v24;
                }
              }
              else
              {
                int v10 = *(__CVBuffer **)v24;
              }
            }
            else
            {
              switch(v25)
              {
                case 2:
                  CFDictionaryRef v9 = *(__CVBuffer **)v24;
                  break;
                case 15:
                  if (!v11)
                  {
                    int v11 = *(__CVBuffer **)v24;
                    *((unsigned char *)this + 92) = 0;
                  }
                  break;
                case 17:
                  int v11 = *(__CVBuffer **)v24;
                  *((unsigned char *)this + 92) = 1;
                  break;
              }
            }
            v24 += 16;
            --v23;
          }
          while (v23);
        }
        unsigned __int16 v19 = v8;
      }
      ++v7;
      ++v8;
      v17 += 312;
      v18 += 312;
    }
    while (v7 != 3);
    pthread_mutex_unlock(v6);
    if (v12)
    {
      CFStringRef v26 = (const __CFString *)*MEMORY[0x263F2C558];
      CFTypeRef Attachment = CVBufferGetAttachment(v12, (CFStringRef)*MEMORY[0x263F2C558], 0);
      if (Attachment) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v10 == 0;
      }
      if (!v28) {
        CFTypeRef Attachment = CVBufferGetAttachment(v10, v26, 0);
      }
      if (Attachment)
      {
        if (*((_DWORD *)this + 26) == 4)
        {
          (*(void (**)(H16ISP::H16ISPPearlCalibrationNode *, CFTypeRef))(*(void *)this + 80))(this, Attachment);
          return 0;
        }
        if (!v11) {
          return 0;
        }
        if (v9)
        {
          H16ISP::H16ISPFrameMetadata::H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)&v44, v9, 1uLL);
          char shouldProcessByPearlMetadata = H16ISP::H16ISPPearlCalibrationNodeBase::shouldProcessByPearlMetadata(this, (const H16ISP::H16ISPFrameMetadata *)&v44, a2, v19);
          H16ISP::H16ISPFrameMetadata::~H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)&v44);
          if (v13) {
            char v30 = shouldProcessByPearlMetadata;
          }
          else {
            char v30 = 0;
          }
          if ((v30 & 1) == 0) {
            return 0;
          }
        }
        else if (!v13)
        {
          return 0;
        }
        CFTypeRef v31 = CVBufferGetAttachment(v13, v26, 0);
        if (!v31) {
          return 0;
        }
        float v32 = v31;
        int v33 = (*(uint64_t (**)(H16ISP::H16ISPPearlCalibrationNode *, __CVBuffer *, __CVBuffer *, __CVBuffer *, CFTypeRef, CFTypeRef))(*(void *)this + 88))(this, v13, v12, v11, v31, Attachment);
        if (v33 == 1) {
          return 0;
        }
        if (v33 != 2)
        {
          if (H16ISP::getPCECalib(*((void *)this + 10), *((unsigned __int16 *)this + 44)))
          {
            CFTypeRef cf = 0;
            uint64_t v43 = 0;
            DeepCFDataRef Copy = H16ISP::dictionaryCreateDeepCopy(Attachment, v34);
            if (DeepCopy)
            {
              double v37 = DeepCopy;
              CFPropertyListRef v38 = H16ISP::dictionaryCreateDeepCopy(v32, v36);
              if (v38)
              {
                float v39 = v38;
                CVPixelBufferCreateFromCVImageBufferRef();
                CFRelease(v37);
                CFRelease(v39);
              }
              else
              {
                CFRelease(v37);
              }
            }
            return 0;
          }
          uint64_t v40 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            uint64_t v40 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v40;
          }
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPPearlCalibrationNode::onMessageProcessing();
          }
        }
        *((_DWORD *)this + 26) = 0;
      }
    }
  }
  return 0;
}

void sub_246914110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN6H16ISP26H16ISPPearlCalibrationNode19onMessageProcessingEPNS_24H16ISPFilterGraphMessageE_block_invoke(uint64_t a1)
{
  keys[128] = *(void **)MEMORY[0x263EF8340];
  int v2 = *(H16ISP::H16ISPPearlCalibrationNode **)(a1 + 40);
  if ((CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) | 0x10) == 0x34323076)
  {
    CVReturn v3 = 0;
    BOOL v4 = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(__CVBuffer **)(v5 + 24);
    *(void *)(v5 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
    size_t Width = CVPixelBufferGetWidth(v6);
    size_t Height = CVPixelBufferGetHeight(v6);
    unint64_t v9 = Width >> 2;
    if (Width <= 0xA03) {
      unint64_t v9 = 640;
    }
    if (v9 >= Width) {
      unint64_t v9 = Width;
    }
    size_t v10 = (int)(2 * llroundf((float)v9 * 0.5));
    size_t v11 = (int)(2 * llroundf((float)(Height * v10 / Width) * 0.5));
    keys[0] = *(void **)MEMORY[0x263F04130];
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    long long v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    CGRect v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    values[0] = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionaryRef v15 = CFDictionaryCreate(v12, (const void **)keys, (const void **)values, 1, v13, v14);
    CVReturn v3 = CVPixelBufferCreate(v12, v10, v11, 0x34323076u, v15, (CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    CFRelease(values[0]);
    CFRelease(v15);
    if (v3)
    {
      BOOL v4 = 0;
    }
    else
    {
      BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 0;
      pixelTransferSessionOut[0] = 0;
      OSStatus v16 = VTPixelTransferSessionCreate(v12, pixelTransferSessionOut);
      if (v16)
      {
        CVReturn v3 = v16;
        uint32_t v17 = 0;
        pixelTransferSessionOut[0] = 0;
      }
      else
      {
        CVReturn v3 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut[0], v6, *(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
        uint32_t v17 = pixelTransferSessionOut[0];
      }
      VTPixelTransferSessionInvalidate(v17);
      CFRelease(pixelTransferSessionOut[0]);
    }
    CVBufferRelease(v6);
  }
  if (*((unsigned char *)v2 + 96))
  {
    BOOL v59 = v4;
    double v60 = v2;
    time_t v61 = 0;
    __int16 v18 = *(__CVBuffer **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    unsigned __int16 v19 = *(H16ISP **)(a1 + 48);
    int v20 = *(H16ISP **)(a1 + 56);
    uint64_t v21 = *(H16ISP **)(a1 + 64);
    double v58 = *(H16ISP **)(a1 + 72);
    setlocale(0, "");
    time(&v61);
    uint64_t v22 = localtime(&v61);
    strftime((char *)pixelTransferSessionOut, 0x14uLL, "%m%d%g_%H%M%S", v22);
    snprintf((char *)values, 0x400uLL, "/var/mobile/Media/DCIM/%s-RGBIR-", (const char *)pixelTransferSessionOut);
    H16ISP::dumpMetadata(v19, (const __CFDictionary *)values, "Color", v23);
    H16ISP::dumpMetadata(v21, (const __CFDictionary *)values, "IR", v24);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v18);
    v62[0] = HIBYTE(PixelFormatType);
    v62[1] = BYTE2(PixelFormatType);
    void v62[2] = BYTE1(PixelFormatType);
    v62[3] = PixelFormatType;
    v62[4] = 0;
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v18, 0);
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v18, 0);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v18, 0);
    snprintf((char *)keys, 0x400uLL, "%s%s.%lux%lu.%lu.%s.bin", (const char *)values, "Color", WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, v62);
    float v29 = fopen((const char *)keys, "wb");
    if (v29)
    {
      CFTypeRef v31 = v29;
      CVPixelBufferLockBaseAddress(v18, 0);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v18, 0);
      if (HeightOfPlane)
      {
        int v33 = BaseAddressOfPlane;
        uint64_t v34 = 0;
        unsigned int v35 = 1;
        do
        {
          fwrite(&v33[v34 * BytesPerRowOfPlane], WidthOfPlane, 1uLL, v31);
          uint64_t v34 = v35;
          BOOL v36 = HeightOfPlane > v35++;
        }
        while (v36);
      }
      size_t v37 = CVPixelBufferGetBytesPerRowOfPlane(v18, 1uLL);
      size_t v38 = CVPixelBufferGetHeightOfPlane(v18, 1uLL);
      float v39 = (char *)CVPixelBufferGetBaseAddressOfPlane(v18, 1uLL);
      if (v38)
      {
        uint64_t v40 = v39;
        uint64_t v41 = 0;
        unsigned int v42 = 1;
        do
        {
          fwrite(&v40[v41 * v37], WidthOfPlane, 1uLL, v31);
          uint64_t v41 = v42;
          BOOL v36 = v38 > v42++;
        }
        while (v36);
      }
      CVPixelBufferUnlockBaseAddress(v18, 0);
      fclose(v31);
    }
    H16ISP::dumpSinglePlaneBuffer(v20, (__CVBuffer *)values, "IR", v30);
    H16ISP::dumpSinglePlaneBuffer(v58, (__CVBuffer *)values, "Depth", v43);
    int v2 = v60;
    BOOL v4 = v59;
  }
  keys[0] = 0;
  if (v3) {
    BOOL v44 = 0;
  }
  else {
    BOOL v44 = v4;
  }
  if (v44)
  {
    CFAllocatorRef v45 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    size_t v46 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
    size_t v47 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
    CVReturn v3 = CVPixelBufferCreate(v45, v46, v47, 0x4C303038u, *(CFDictionaryRef *)(a1 + 48), (CVPixelBufferRef *)keys);
    if (!v3)
    {
      CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 1uLL);
      double v48 = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
      CVPixelBufferLockBaseAddress((CVPixelBufferRef)keys[0], 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)keys[0]);
      if (v48) {
        BOOL v50 = BaseAddress == 0;
      }
      else {
        BOOL v50 = 1;
      }
      if (v50)
      {
        CVReturn v3 = -12780;
      }
      else
      {
        double v51 = BaseAddress;
        size_t v52 = CVPixelBufferGetHeight((CVPixelBufferRef)keys[0]);
        size_t v53 = CVPixelBufferGetWidth((CVPixelBufferRef)keys[0]);
        size_t v54 = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)keys[0]);
        if (v52)
        {
          size_t v56 = BytesPerRow;
          do
          {
            memcpy(v51, v48, v53);
            v48 += v54;
            v51 += v56;
            --v52;
          }
          while (v52);
        }
        CVReturn v3 = 0;
      }
      CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)keys[0], 0);
      CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 1uLL);
    }
  }
  double v57 = *(__CVBuffer **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v57) {
    CVPixelBufferRelease(v57);
  }
  if (!v3) {
    H16ISP::H16ISPPearlCalibrationNode::run(v2, *(__CVBuffer **)(a1 + 56), *(__CFDictionary **)(a1 + 64), (__CVBuffer *)keys[0], *(const __CFDictionary **)(a1 + 48), *(__CVBuffer **)(a1 + 72));
  }
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 56));
  if (keys[0]) {
    CFRelease(keys[0]);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 64));
}

float H16ISP::H16ISPPearlCalibrationNode::run(H16ISP::H16ISPPearlCalibrationNode *this, __CVBuffer *a2, __CFDictionary *a3, __CVBuffer *a4, const __CFDictionary *a5, __CVBuffer *a6)
{
  int v6 = (int)a6;
  int v8 = (int)a4;
  int v10 = (int)a2;
  uint64_t v49 = *MEMORY[0x263EF8340];
  CFAllocatorRef v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  uint64_t v13 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    CFAllocatorRef v12 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v12;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI): Ready for algorithm\n", buf, 2u);
  }
  if (*((unsigned char *)this + 168))
  {
    CGRect v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v13)
    {
      CGRect v14 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPPearlCalibrationNode::run();
    }
    return result;
  }
  if (a5) {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x263F2D000]);
  }
  else {
    CFArrayRef Value = 0;
  }
  int valuePtr = -269488145;
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a3, @"StereoGMC-Result");
  if (v17) {
    CFNumberGetValue(v17, kCFNumberIntType, &valuePtr);
  }
  int v40 = 0;
  unsigned int v41 = 0;
  mach_timebase_info(&info);
  uint64_t v34 = mach_absolute_time();
  kdebug_trace();
  __int16 v18 = (const __CFBoolean **)MEMORY[0x263EFFB40];
  if (!*((unsigned char *)this + 93)) {
    __int16 v18 = (const __CFBoolean **)MEMORY[0x263EFFB38];
  }
  int v19 = RgbIrCalibration::Calibrate(*((void *)this + 20), v10, a3, v8, (int)a5, v6, *((unsigned char *)this + 92) == 0, *v18, (double *)this + 29, Value, *((_WORD *)this + 6720), (uint64_t)this + 13400, &v41, (uint64_t)&v35, (uint64_t)&v40, (uint64_t)v38);
  kdebug_trace();
  uint64_t v20 = (mach_absolute_time() - v34) * info.numer / info.denom / 0xF4240;
  reportMutualInformationResults();
  uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v13)
  {
    uint64_t v21 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v21;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109376;
    int v46 = v19;
    __int16 v47 = 1024;
    int v48 = v20;
    _os_log_impl(&dword_24680F000, v21, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI): status 0x%08X (%d msec)\n", buf, 0xEu);
  }
  if (v19 != 4102)
  {
    if (v19)
    {
      int v23 = (unsigned __int16)(*((_WORD *)this + 92))++ + 1;
      if ((v23 & 0x10000) != 0)
      {
        *((_DWORD *)this + 26) = 2;
        return result;
      }
      *((_DWORD *)this + 26) = 4;
      goto LABEL_39;
    }
    PearlIsf::PearlIsf((PearlIsf *)v31);
    Isf::setStepDetectionMode((Isf *)v31, *((_DWORD *)this + 25) != 0);
    uint64_t v22 = (void (*)(uint8_t *, unsigned char *, void))*((void *)this + 16);
    if (v22) {
      v22(buf, v32, *((void *)this + 22));
    }
    else {
      bzero(buf, 0xE38uLL);
    }
    kdebug_trace();
    if (v40 == 1) {
      int v24 = PearlIsf::RunFromMiFullGrid((uint64_t)v31, buf, &v30, v35, v36, v37, v38[0]);
    }
    else {
      int v24 = PearlIsf::RunFromLmv((uint64_t)v31, buf, &v30, v35, v36, v37);
    }
    int v25 = v24;
    kdebug_trace();
    CFStringRef v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v13)
    {
      CFStringRef v26 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v26;
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v43 = 67109120;
      int v44 = v25;
      _os_log_impl(&dword_24680F000, v26, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (ISF): status 0x%08X\n", v43, 8u);
    }
    reportIsfResults(v25, (double *)v30.i64, v40 == 1, v41, (uint64_t)this + 232, (uint64_t)v32);
    float v27 = (void (*)(uint8_t *, unsigned char *, void))*((void *)this + 17);
    if (v27) {
      v27(buf, v32, *((void *)this + 22));
    }
    *((_DWORD *)this + 26) = 4;
    PearlIsf::~PearlIsf((PearlIsf *)v31);
    if (*((_DWORD *)this + 26) == 4)
    {
LABEL_39:
      *((unsigned char *)this + 192) = 1;
      *((_DWORD *)this + 54) = v40;
      unsigned int v28 = v41;
      *((_DWORD *)this + 49) = v19;
      *((_DWORD *)this + 5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v28;
      double v29 = v38[0];
      *(double *)((char *)this + 204) = v38[1];
      float result = v39;
      *((float *)this + 53) = v39;
      *((double *)this + 28) = v29;
    }
  }
  return result;
}

void sub_246914C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  PearlIsf::~PearlIsf((PearlIsf *)va);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPPearlCalibrationNode_Remote::onDeactivate(H16ISP::H16ISPPearlCalibrationNode_Remote *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(v2 + 112))
  {
    uint64_t v3 = v2;
    if (H16ISP::getPCECalib(*(void *)(v2 + 80), *(unsigned __int16 *)(v2 + 88)))
    {
      if (!H16ISP::H16ISPServicesRemote::UpdateRgbIrPceCalib(*(xpc_connection_t **)(v3 + 112), v9))
      {
        BOOL v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          BOOL v4 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v4;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 0;
          _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI) finalization: Updating PCECalib in FW\n", (uint8_t *)v10, 2u);
        }
        uint64_t v5 = *(H16ISP::H16ISPDevice **)(v3 + 80);
        int v6 = *(unsigned __int16 *)(v3 + 88);
        v10[2] = 24581;
        int v11 = v6;
        memcpy(v12, v9, sizeof(v12));
        H16ISP::H16ISPDevice::ISP_SendCommand(v5, (unsigned __int8 *)v10, 0x337Cu, 0, 0xFFFFFFFF);
      }
    }
    else
    {
      uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v7 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v7;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPPearlCalibrationNode::onDeactivate();
      }
    }
  }
  return 0;
}

void H16ISP::H16ISPPearlCalibrationNode_Remote::~H16ISPPearlCalibrationNode_Remote(H16ISP::H16ISPPearlCalibrationNode_Remote *this)
{
  *(void *)this = &unk_26FAEC420;
  uint64_t v2 = (const void *)*((void *)this + 23);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 23) = 0;
  }

  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);
}

{
  uint64_t vars8;

  H16ISP::H16ISPPearlCalibrationNode_Remote::~H16ISPPearlCalibrationNode_Remote(this);

  JUMPOUT(0x24C53D6E0);
}

void H16ISP::H16ISPPearlCalibrationNode_Remote::updateMetadata(H16ISP::H16ISPPearlCalibrationNode_Remote *this, __CFDictionary *context)
{
  CFDictionaryRef v2 = (const __CFDictionary *)*((void *)this + 23);
  if (v2) {
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)H16ISP::metadataCopier, context);
  }
}

void H16ISP::metadataCopier(H16ISP *this, const void *value, CFMutableDictionaryRef theDict, void *a4)
{
}

uint64_t H16ISP::H16ISPPearlCalibrationNode_Remote::algorithmPreconditions(H16ISP::H16ISPPearlCalibrationNode_Remote *this, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, const __CFDictionary *a5, const __CFDictionary *a6)
{
  if (H16ISPRgbIrRunner::validateSession(a2, a6, a5, (const __CFDictionary *)*((unsigned __int8 *)this + 93)))return !H16ISPRgbIrRunner::validateFrame(a2, a6, a5, (const __CFDictionary *)*((unsigned __int8 *)this + 94)); {
  else
  }
    return 2;
}

uint64_t H16ISP::H16ISPPearlCalibrationNode_Remote::callAlgorithm(H16ISP::H16ISPPearlCalibrationNode_Remote *this, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, __CVBuffer *a5, const __CFDictionary *a6, const __CFDictionary *a7)
{
  uint64_t v7 = MEMORY[0x270FA5388](this, a2);
  uint64_t v27 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = (uint64_t)v11;
  uint64_t v14 = (uint64_t)v13;
  uint64_t v16 = (uint64_t)v15;
  uint64_t v17 = v7;
  uint64_t v31 = *MEMORY[0x263EF8340];
  __int16 v18 = H16ISP::crcInputs(v15, v13, v11, v11);
  __int16 valuePtr = 0;
  H16ISP::getPCECalib(*(void *)(v17 + 80), *(unsigned __int16 *)(v17 + 88));
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDataRef v20 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 13168);
  CFDataRef v21 = CFDataCreate(v19, v29, 40);
  CFNumberRef v22 = CFNumberCreate(v19, kCFNumberSInt16Type, &valuePtr);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionarySetValue(Mutable, @"PCECalib", v20);
  CFDictionarySetValue(Mutable, @"DepthConfig", v21);
  CFDictionarySetValue(Mutable, @"DXOffset", v22);
  CFRelease(v22);
  CFRelease(v21);
  CFRelease(v20);
  uint64_t v24 = H16ISP::H16ISPServicesRemote::RunRgbIr(*(void *)(v17 + 112), v16, v14, v12, v10, v27, (uint64_t)Mutable, *(unsigned __int8 *)(v17 + 92), 1, v18, *(unsigned char *)(v17 + 94), v26, 1, 0, *(unsigned char *)(v17 + 120), *(unsigned char *)(v17 + 96), *(_DWORD *)(v17 + 100));
  CFRelease(Mutable);
  return v24;
}

uint64_t H16ISP::crcInputs(CVPixelBufferRef pixelBuffer, CVPixelBufferRef a2, CVPixelBufferRef a3, __CVBuffer *a4)
{
  BOOL v4 = a3;
  if (a3)
  {
    CVPixelBufferLockBaseAddress(a3, 1uLL);
    CVPixelBufferGetBaseAddress(v4);
    CVPixelBufferUnlockBaseAddress(v4, 1uLL);
    LOWORD(v4) = -1;
  }
  if (pixelBuffer)
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    LOWORD(v4) = ~(_WORD)v4;
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  }
  if (a2)
  {
    CVPixelBufferLockBaseAddress(a2, 1uLL);
    CVPixelBufferGetBaseAddress(a2);
    LOWORD(v4) = ~(_WORD)v4;
    CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  }
  return (unsigned __int16)v4;
}

uint64_t H16ISP::H16ISPPearlCalibrationNode_Remote::getDebugInfo(H16ISP::H16ISPPearlCalibrationNode_Remote *this)
{
  return *((void *)this + 24);
}

H16ISP::H16ISPPearlCalibrationNode_RGBP *H16ISP::H16ISPPearlCalibrationNode_RGBP::H16ISPPearlCalibrationNode_RGBP(H16ISP::H16ISPPearlCalibrationNode_RGBP *this, H16ISP::H16ISPDevice *a2, H16ISP::H16ISPServicesRemote *a3, char a4, char a5, const __CFDictionary *a6, double a7, char a8)
{
  uint64_t v11 = H16ISP::H16ISPPearlCalibrationNode_Remote::H16ISPPearlCalibrationNode_Remote((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, a5, 0, 1, a8);
  *(void *)uint64_t v11 = &unk_26FAEC498;
  *(void *)(v11 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(double *)(v11 + 208) = a7;
  *(unsigned char *)(v11 + 121) = 0;
  if (a6) {
    *((void *)this + 25) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a6);
  }
  *((unsigned char *)this + 128) = H16ISP::H16ISPGetCFPreferenceNumber(@"RgbpLcd", @"com.apple.coremedia", (const __CFString *)1) != 0;
  *((_DWORD *)this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = H16ISP::H16ISPGetCFPreferenceNumber(@"RgbpLcd_LookForSuccessMaxAttempts", @"com.apple.coremedia", (const __CFString *)3);
  *((_DWORD *)this + 41) = H16ISP::H16ISPGetCFPreferenceNumber(@"RgbpLcd_LookForSuccessFrequency", @"com.apple.coremedia", (const __CFString *)0x7D0);
  *((_DWORD *)this + 42) = H16ISP::H16ISPGetCFPreferenceNumber(@"RgbpLcd_Threshold", @"com.apple.coremedia", (const __CFString *)0xC);
  *((_DWORD *)this + 43) = H16ISP::H16ISPGetCFPreferenceNumber(@"RgbpLcd_MultiRunCount", @"com.apple.coremedia", (const __CFString *)0x1E);
  *((_DWORD *)this + 44) = H16ISP::H16ISPGetCFPreferenceNumber(@"RgbpLcd_MultiRunFrequency", @"com.apple.coremedia", (const __CFString *)0x3E8);
  H16ISP::gBlockCinematiCC_SHA256_CTX c = H16ISP::H16ISPGetCFPreferenceNumber(@"RgbpBlockCinematic", @"com.apple.coremedia", 0) != 0;
  H16ISP::gBlockThirdParty = H16ISP::H16ISPGetCFPreferenceNumber(@"RgbpBlockThirdParty", @"com.apple.coremedia", 0) != 0;
  *((void *)this + 19) = *((unsigned __int8 *)this + 128);
  *((void *)this + 18) = mach_absolute_time();
  return this;
}

void sub_2469153C8(_Unwind_Exception *a1)
{
  H16ISP::H16ISPPearlCalibrationNode_Remote::~H16ISPPearlCalibrationNode_Remote(v1);
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPPearlCalibrationNode_RGBP::~H16ISPPearlCalibrationNode_RGBP(H16ISP::H16ISPPearlCalibrationNode_RGBP *this)
{
  *(void *)this = &unk_26FAEC498;
  CFDictionaryRef v2 = (const void *)*((void *)this + 25);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 25) = 0;
  }

  H16ISP::H16ISPPearlCalibrationNode_Remote::~H16ISPPearlCalibrationNode_Remote(this);
}

{
  uint64_t vars8;

  H16ISP::H16ISPPearlCalibrationNode_RGBP::~H16ISPPearlCalibrationNode_RGBP(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPPearlCalibrationNode_RGBP::callAlgorithm(H16ISP::H16ISPPearlCalibrationNode_RGBP *this, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, __CVBuffer *a5, const __CFDictionary *a6, const __CFDictionary *a7)
{
  uint64_t v7 = MEMORY[0x270FA5388](this, a2);
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  double v29 = v10;
  uint64_t v12 = (uint64_t)v11;
  uint64_t v14 = (uint64_t)v13;
  uint64_t v16 = (uint64_t)v15;
  uint64_t v17 = v7;
  uint64_t v40 = *MEMORY[0x263EF8340];
  __int16 v30 = H16ISP::crcInputs(v15, v13, v11, v11);
  H16ISP::getPCECalib(*(void *)(v17 + 80), *(unsigned __int16 *)(v17 + 88));
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDataRef v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 13168);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionarySetValue(Mutable, @"PCECalib", v19);
  CFDictionarySetValue(Mutable, @"ColorGdcCoeffs", *(const void **)(v17 + 200));
  CFNumberRef v21 = CFNumberCreate(v18, kCFNumberDoubleType, (const void *)(v17 + 208));
  CFDictionarySetValue(Mutable, @"ColorPixelSizeMm", v21);
  CFRelease(v21);
  bzero(v35, 0x68uLL);
  __int16 v36 = 1565;
  int v37 = *(unsigned __int16 *)(v17 + 88);
  if (!H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v17 + 80), v35, 0x68u, 0, 0xFFFFFFFF))
  {
    CFNumberRef v22 = CFNumberCreate(v18, kCFNumberIntType, &v38);
    CFDictionarySetValue(Mutable, @"PearlVersion", v22);
    CFRelease(v22);
  }
  if (!*(unsigned char *)(v17 + 92))
  {
    H16ISP::H16ISPFrameMetadata::H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)v33, v29, 1uLL);
    if (v34 && v34[1])
    {
      CFNumberRef v23 = CFNumberCreate(v18, kCFNumberDoubleType, v34 + 178);
      CFNumberRef v24 = CFNumberCreate(v18, kCFNumberDoubleType, v34 + 174);
      CFDictionarySetValue(Mutable, @"Multiplier", v23);
      CFDictionarySetValue(Mutable, @"Offset", v24);
      CFRelease(v23);
      CFRelease(v24);
    }
    H16ISP::H16ISPFrameMetadata::~H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)v33);
  }
  CFRelease(v19);
  if (*(unsigned char *)(v17 + 128)) {
    int v25 = 2 * *(_DWORD *)(v17 + 172);
  }
  else {
    int v25 = 1;
  }
  uint64_t v26 = H16ISP::H16ISPServicesRemote::RunRgbIr(*(void *)(v17 + 112), v16, v14, v12, v31, v32, (uint64_t)Mutable, *(unsigned __int8 *)(v17 + 92) != 0, 2, v30, *(unsigned char *)(v17 + 94) != 0, v28, v25, SHIWORD(v25), *(unsigned char *)(v17 + 120), *(unsigned char *)(v17 + 96), 0);
  CFRelease(Mutable);
  return v26;
}

void sub_246915780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  H16ISP::H16ISPFrameMetadata::~H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)va);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPPearlCalibrationNode_RGBP::algorithmPreconditions(H16ISP::H16ISPPearlCalibrationNode_RGBP *this, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, const __CFDictionary *a5, const __CFDictionary *a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!H16ISPRgbpRunner::validateSession(a2, a3, a4, a5, a6, (const __CFDictionary *)*((unsigned __int8 *)this + 93)))return 2; {
  if (!(H16ISP::gBlockCinematic | H16ISP::gBlockThirdParty))
  }
    goto LABEL_3;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  if (a4)
  {
    size_t Height = CVPixelBufferGetHeight(a4);
    BOOL v15 = Height < 0x280;
    if (H16ISP::gBlockCinematic && Height <= 0x27F)
    {
      if (!*((unsigned char *)this + 94)) {
        return 2;
      }
      uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v16 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v16;
      }
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        return 2;
      }
      int v25 = 67110400;
      OSType v26 = HIBYTE(PixelFormatType);
      __int16 v27 = 1024;
      int v28 = BYTE2(PixelFormatType);
      __int16 v29 = 1024;
      int v30 = BYTE1(PixelFormatType);
      __int16 v31 = 1024;
      int v32 = PixelFormatType;
      __int16 v33 = 2048;
      size_t Width = CVPixelBufferGetWidth(a4);
      __int16 v35 = 2048;
      size_t v36 = CVPixelBufferGetHeight(a4);
      uint64_t v17 = "Pearl Calibration (MI): Blocking cinematic (color format '%c%c%c%c', depth resolution %zux%zu)\n";
      goto LABEL_31;
    }
  }
  else
  {
    BOOL v15 = 0;
  }
  if (H16ISP::gBlockThirdParty && ((PixelFormatType - 875704422) & 0xFFFFFFEF) != 0 && !v15)
  {
    if (!*((unsigned char *)this + 94)) {
      return 2;
    }
    uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v16 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v16;
    }
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      return 2;
    }
    OSType v19 = HIBYTE(PixelFormatType);
    int v20 = BYTE2(PixelFormatType);
    int v21 = PixelFormatType;
    int v22 = BYTE1(PixelFormatType);
    if (a4)
    {
      size_t v23 = CVPixelBufferGetWidth(a4);
      size_t v24 = CVPixelBufferGetHeight(a4);
    }
    else
    {
      size_t v23 = 0;
      size_t v24 = 0;
    }
    int v25 = 67110400;
    OSType v26 = v19;
    __int16 v27 = 1024;
    int v28 = v20;
    __int16 v29 = 1024;
    int v30 = v22;
    __int16 v31 = 1024;
    int v32 = v21;
    __int16 v33 = 2048;
    size_t Width = v23;
    __int16 v35 = 2048;
    size_t v36 = v24;
    uint64_t v17 = "Pearl Calibration (MI): Blocking third party API (color format '%c%c%c%c', depth resolution %zux%zu)\n";
LABEL_31:
    _os_log_impl(&dword_24680F000, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v25, 0x2Eu);
    return 2;
  }
LABEL_3:
  if (H16ISPRgbpRunner::validateFrame(a2, a3, a4, a5, a6, (const __CFDictionary *)*((unsigned __int8 *)this + 93))) {
    return 0;
  }
  if (*((unsigned char *)this + 94))
  {
    CFAllocatorRef v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      CFAllocatorRef v18 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPPearlCalibrationNode_RGBP::algorithmPreconditions();
    }
  }
  return 1;
}

void H16ISP::dumpMetadata(H16ISP *this, const __CFDictionary *a2, const char *a3, const char *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x400uLL, "%s%s-metadata.plist", (const char *)a2, a3);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  CFStringRef v7 = CFStringCreateWithCString(v5, __str, SystemEncoding);
  CFURLRef v8 = CFURLCreateWithFileSystemPath(v5, v7, kCFURLPOSIXPathStyle, 0);
  uint64_t v9 = CFWriteStreamCreateWithFile(v5, v8);
  CFWriteStreamOpen(v9);
  CFPropertyListWrite(this, v9, kCFPropertyListXMLFormat_v1_0, 0, 0);
  CFWriteStreamClose(v9);
  CFRelease(v9);
  CFRelease(v8);
  CFRelease(v7);
}

FILE *H16ISP::dumpSinglePlaneBuffer(H16ISP *this, __CVBuffer *a2, const char *a3, const char *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  v14[0] = HIBYTE(PixelFormatType);
  v14[1] = BYTE2(PixelFormatType);
  _WORD v14[2] = BYTE1(PixelFormatType);
  v14[3] = PixelFormatType;
  unsigned __int8 v14[4] = 0;
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  snprintf(__str, 0x400uLL, "%s%s.%lux%lu.%lu.%s.bin", (const char *)a2, a3, Width, Height, BytesPerRow, v14);
  float result = fopen(__str, "wb");
  if (result)
  {
    uint64_t v12 = result;
    CVPixelBufferLockBaseAddress(this, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(this);
    fwrite(BaseAddress, Height * BytesPerRow, 1uLL, v12);
    fclose(v12);
    return (FILE *)CVPixelBufferUnlockBaseAddress(this, 0);
  }
  return result;
}

uint64_t H16ISP::updateLargest(uint64_t this, const __CFNumber *a2, double *a3)
{
  if (this)
  {
    CFNumberRef v4 = (const __CFNumber *)this;
    CFTypeID v5 = CFGetTypeID((CFTypeRef)this);
    this = CFNumberGetTypeID();
    if (v5 == this)
    {
      double valuePtr = 0.0;
      this = CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr);
      if (this)
      {
        double v6 = fabs(valuePtr);
        if (v6 > *(double *)a2) {
          *(double *)a2 = v6;
        }
      }
    }
  }
  return this;
}

uint64_t H16ISP::H16ISPFrameReceiver::InitializePDEStreaming(uint64_t this)
{
  *(void *)(this + 22) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

void H16ISP::H16ISPFrameReceiver::~H16ISPFrameReceiver(H16ISP::H16ISPFrameReceiver *this)
{
  if (*(_DWORD *)this) {
    H16ISP::H16ISPFrameReceiver::stopReceive(this);
  }
  if (*((void *)this + 39)) {
    H16ISP::H16ISPFrameReceiver::removeIODispatcherFromRunLoop(this);
  }
  CFDictionaryRef v2 = (H16ISP::H16ISPCFLocalMessagePort *)*((void *)this + 99);
  if (v2)
  {
    uint64_t v3 = (__CFRunLoop *)*((void *)this + 1);
    RunLoopSource = H16ISP::H16ISPCFLocalMessagePort::GetRunLoopSource(v2);
    CFRunLoopRemoveSource(v3, RunLoopSource, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
    uint64_t v5 = *((void *)this + 99);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *((void *)this + 99) = 0;
  }
  while (1)
  {
    uint64_t v6 = *((void *)this + 85);
    if (!v6) {
      break;
    }
    unint64_t v7 = *((void *)this + 84);
    CFURLRef v8 = *(H16ISP::H16ISPFrameReceiverBufferPool **)(*(void *)(*((void *)this + 81)
                                                               + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                   + 8 * (v7 & 0x1FF));
    *((void *)this + 85) = v6 - 1;
    *((void *)this + 84) = v7 + 1;
    std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 640, 1);
    if (v8)
    {
      H16ISP::H16ISPFrameReceiverBufferPool::~H16ISPFrameReceiverBufferPool(v8);
      MEMORY[0x24C53D6E0]();
    }
  }
  while (1)
  {
    uint64_t v9 = *((void *)this + 91);
    if (!v9) {
      break;
    }
    unint64_t v10 = *((void *)this + 90);
    uint64_t v11 = *(void *)(*(void *)(*((void *)this + 87) + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF));
    *((void *)this + 91) = v9 - 1;
    *((void *)this + 9pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v10 + 1;
    std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 688, 1);
    if (v11) {
      MEMORY[0x24C53D6E0](v11, 0x1020C405F07FB98);
    }
  }
  uint64_t v12 = (H16ISP::H16ISPFrameReceiverDataBufferPool *)*((void *)this + 98);
  if (v12)
  {
    H16ISP::H16ISPFrameReceiverDataBufferPool::~H16ISPFrameReceiverDataBufferPool(v12);
    MEMORY[0x24C53D6E0]();
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 96));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 160));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 224));
  uint64_t v13 = (H16ISP::H16ISPDevice *)*((void *)this + 41);
  uint64_t v14 = *(NSObject **)(*((void *)v13 + 9) + 72);
  if (v14)
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN6H16ISP19H16ISPFrameReceiverD2Ev_block_invoke;
    block[3] = &__block_descriptor_tmp_24;
    block[4] = this;
    dispatch_sync(v14, block);
    uint64_t v13 = (H16ISP::H16ISPDevice *)*((void *)this + 41);
  }
  H16ISP::H16ISPDevice::ISP_FlushInactiveDARTMappings(v13);
  BOOL v15 = *((void *)this + 40);
  if (v15) {
    dispatch_release(v15);
  }
  if (*((unsigned char *)this + 853))
  {
    H16ISP::MOVReader::~MOVReader(*((H16ISP::MOVReader **)this + 107));
    *((unsigned char *)this + 853) = 0;
    H16ISP::H16ISPDevice::ISP_EnableMOVReplay(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), 0);
  }
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)this + 92);
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)this + 86);
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)this + 80);
}

uint64_t H16ISP::H16ISPFrameReceiver::stopReceive(H16ISP::H16ISPFrameReceiver *this)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  CFDictionaryRef v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  if (!*(_DWORD *)this)
  {
    pthread_mutex_unlock(v2);
    return 3758097122;
  }
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  if (!*((unsigned char *)this + 362)) {
    H16ISP::H16ISPFrameReceiver::PrepareStopReceive(this);
  }
  double v91 = v2;
  if (*((unsigned char *)this + 363))
  {
    int v3 = H16ISP::H16ISPDevice::StopCamera(*((H16ISP::H16ISPDevice **)this + 41), 1 << *((_DWORD *)this + 91));
    BOOL v4 = v3 != 0;
    uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (v3)
    {
      int v6 = v3;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v5 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        double v94 = "stopReceive";
        __int16 v95 = 1024;
        int v96 = v6;
        _os_log_error_impl(&dword_24680F000, v5, OS_LOG_TYPE_ERROR, "%s - StopCamera error: 0x%08X\n", buf, 0x12u);
        uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      }
    }
    if (v5 == &_os_log_internal)
    {
      uint64_t v5 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *((_DWORD *)this + 91);
      *(_DWORD *)int buf = 136315650;
      double v94 = "stopReceive";
      __int16 v95 = 1024;
      int v96 = 2183;
      __int16 v97 = 1024;
      int v98 = v7;
      _os_log_impl(&dword_24680F000, v5, OS_LOG_TYPE_DEFAULT, "%s - [%d] [CIL] Call ISP_CILRequestPerChannel (%u/false)\n", buf, 0x18u);
    }
    uint64_t v8 = H16ISP::H16ISPDevice::ISP_CILRequestPerChannel(*((mach_port_t **)this + 41), *((_DWORD *)this + 91), 0);
    if (v8)
    {
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::stopReceive();
      }
      goto LABEL_26;
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  uint64_t v8 = H16ISP::H16ISPDevice::ReturnAllUnusedBuffers(*((H16ISP::H16ISPDevice **)this + 41), *((unsigned int *)this + 91));
  if (!v8) {
    goto LABEL_27;
  }
  unint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    unint64_t v10 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPFrameReceiver::stopReceive();
  }
LABEL_26:
  BOOL v4 = 1;
LABEL_27:
  uint64_t v11 = *((void *)this + 87);
  uint64_t v12 = (void *)(v11 + 8 * (*((void *)this + 90) >> 9));
  uint64_t v13 = *((void *)this + 88);
  if (v13 == v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(*v12 + 8 * (*((void *)this + 90) & 0x1FFLL));
  }
  while (1)
  {
    if (v13 == v11)
    {
      uint64_t v16 = 0;
    }
    else
    {
      unint64_t v15 = *((void *)this + 91) + *((void *)this + 90);
      uint64_t v16 = *(void *)(v11 + ((v15 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v15 & 0x1FF);
    }
    if (v14 == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v16) {
      break;
    }
    if (*((unsigned char *)*v14 + 8))
    {
      uint64_t v8 = H16ISP::H16ISPFrameReceiverSharedBufferPool::InitiateShutdown(**v14);
      if (v8)
      {
        uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v17 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v17;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          double v94 = "stopReceive";
          __int16 v95 = 1024;
          int v96 = v8;
          _os_log_error_impl(&dword_24680F000, v17, OS_LOG_TYPE_ERROR, "%s - InitiateShutdown error: 0x%08X\n", buf, 0x12u);
        }
        BOOL v4 = 1;
      }
    }
    if ((H16ISP::H16ISPFrameReceiverSharedBufferPool ***)((char *)++v14 - *v12) == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)4096)
    {
      CFAllocatorRef v18 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v12[1];
      ++v12;
      uint64_t v14 = v18;
    }
    uint64_t v11 = *((void *)this + 87);
    uint64_t v13 = *((void *)this + 88);
  }
  *((unsigned char *)this + 363) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 160));
  if (!*((unsigned char *)this + 452) || v8)
  {
    if (v8) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v8 = H16ISP::H16ISPDevice::StopFaceDetect(*((H16ISP::H16ISPDevice **)this + 41), *((unsigned int *)this + 91));
    if (v8)
    {
      OSType v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        OSType v19 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v19;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::stopReceive();
      }
LABEL_57:
      BOOL v4 = 1;
      goto LABEL_58;
    }
  }
  uint64_t v8 = H16ISP::H16ISPDevice::DisableALS(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91));
  if (v8)
  {
    int v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v20 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v20;
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::stopReceive();
    }
    goto LABEL_57;
  }
  if (*((unsigned char *)this + 416))
  {
    *((unsigned char *)this + 416) = 0;
    uint64_t v8 = H16ISP::H16ISPDevice::EnableTNR(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), (uint64_t)this + 416);
    if (v8)
    {
      unint64_t v74 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        unint64_t v74 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v74;
      }
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::stopReceive();
      }
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_58:
  if (*((unsigned char *)this + 512)) {
    H16ISP::H16ISPFrameReceiver::stopProjectorWatchdogTimer(this);
  }
  double v92 = (void *)((char *)this + 776);
  if (!v4)
  {
    int v32 = 0;
    int v33 = 0;
    int v34 = 0;
    int v35 = 0;
    while (1)
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
      uint64_t v36 = *((void *)this + 87);
      uint64_t v37 = (void *)(v36 + 8 * (*((void *)this + 90) >> 9));
      uint64_t v38 = *((void *)this + 88);
      if (v38 == v36) {
        float v39 = 0;
      }
      else {
        float v39 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(*v37 + 8 * (*((void *)this + 90) & 0x1FFLL));
      }
      int v40 = 0;
      v32 |= *((void *)this + 97) == 0;
      while (1)
      {
        if (v38 == v36)
        {
          uint64_t v42 = 0;
        }
        else
        {
          unint64_t v41 = *((void *)this + 91) + *((void *)this + 90);
          uint64_t v42 = *(void *)(v36 + ((v41 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v41 & 0x1FF);
        }
        if (v39 == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v42) {
          break;
        }
        if (*((unsigned char *)*v39 + 8)) {
          v40 += H16ISP::H16ISPFrameReceiverSharedBufferPool::GetNumAllocatedBuffers(**v39);
        }
        if ((H16ISP::H16ISPFrameReceiverSharedBufferPool ***)((char *)++v39 - *v37) == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)4096)
        {
          uint64_t v43 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v37[1];
          ++v37;
          float v39 = v43;
        }
        uint64_t v36 = *((void *)this + 87);
        uint64_t v38 = *((void *)this + 88);
      }
      int v44 = (H16ISP::H16ISPFrameReceiverDataBufferPool *)*((void *)this + 98);
      if (!v44 || !H16ISP::H16ISPFrameReceiverDataBufferPool::NumBuffersSent(v44)) {
        int v34 = 1;
      }
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 160));
      v33 |= v40 == 0;
      if (v32 & v33 & v34) {
        break;
      }
      usleep(0x3E8u);
      if (++v35 == 2001)
      {
        if ((v32 & 1) == 0)
        {
          pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
          CFAllocatorRef v45 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            CFAllocatorRef v45 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v45;
          }
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::stopReceive((uint64_t)v92, v45, v46, v47, v48, v49, v50, v51);
          }
          uint64_t v52 = *((void *)this + 93);
          if (*((void *)this + 94) != v52)
          {
            unint64_t v53 = *((void *)this + 96);
            size_t v54 = (void *)(v52 + 8 * (v53 >> 9));
            double v55 = (uint64_t *)(*v54 + 8 * (v53 & 0x1FF));
            uint64_t v56 = *(void *)(v52 + (((*v92 + v53) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((*v92 + v53) & 0x1FF);
            while (v55 != (uint64_t *)v56)
            {
              uint64_t v57 = *v55;
              if (*v55)
              {
                double v58 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
                {
                  double v58 = os_log_create("com.apple.isp", "general");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v58;
                }
                if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
                {
                  int v60 = *(_DWORD *)(v57 + 8);
                  *(_DWORD *)int buf = 136315394;
                  double v94 = "stopReceive";
                  __int16 v95 = 1024;
                  int v96 = v60;
                  _os_log_error_impl(&dword_24680F000, v58, OS_LOG_TYPE_ERROR, "%s - Buffer with IOSurface ID 0x%08X was not returned\n", buf, 0x12u);
                }
              }
              if ((uint64_t *)((char *)++v55 - *v54) == (uint64_t *)4096)
              {
                BOOL v59 = (uint64_t *)v54[1];
                ++v54;
                double v55 = v59;
              }
            }
          }
          pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 160));
        }
        if ((v33 & 1) == 0)
        {
          unsigned int v75 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            unsigned int v75 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v75;
          }
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::stopReceive(v75, v76, v77, v78, v79, v80, v81, v82);
          }
        }
        if ((v34 & 1) == 0)
        {
          double v83 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            double v83 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v83;
          }
          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::stopReceive(v83, v84, v85, v86, v87, v88, v89, v90);
          }
        }
        break;
      }
    }
  }
  int v21 = *((void *)this + 40);
  if (v21) {
    dispatch_sync(v21, &__block_literal_global_6);
  }
  *((unsigned char *)this + 362) = 0;
  *(_DWORD *)this = 0;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  int v22 = (void **)*((void *)this + 93);
  size_t v23 = (void **)*((void *)this + 94);
  if (v23 != v22)
  {
    unint64_t v24 = *((void *)this + 96);
    int v25 = &v22[v24 >> 9];
    OSType v26 = (CVPixelBufferRef **)((char *)*v25 + 8 * (v24 & 0x1FF));
    uint64_t v27 = *(uint64_t *)((char *)v22 + (((*((void *)this + 97) + v24) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*((void *)this + 97) + v24) & 0x1FF);
    if (v26 != (CVPixelBufferRef **)v27)
    {
      do
      {
        int v28 = *v26;
        if (*v26)
        {
          CVPixelBufferRelease(*v28);
          MEMORY[0x24C53D6E0](v28, 0x1020C4093CA8EA1);
        }
        if ((char *)++v26 - (unsigned char *)*v25 == 4096)
        {
          __int16 v29 = (CVPixelBufferRef **)v25[1];
          ++v25;
          OSType v26 = v29;
        }
      }
      while (v26 != (CVPixelBufferRef **)v27);
      int v22 = (void **)*((void *)this + 93);
      size_t v23 = (void **)*((void *)this + 94);
    }
  }
  *double v92 = 0;
  unint64_t v30 = (char *)v23 - (char *)v22;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      int v22 = (void **)(*((void *)this + 93) + 8);
      *((void *)this + 93) = v22;
      unint64_t v30 = *((void *)this + 94) - (void)v22;
    }
    while (v30 > 0x10);
  }
  if (v30 >> 3 == 1)
  {
    uint64_t v31 = 256;
    goto LABEL_111;
  }
  if (v30 >> 3 == 2)
  {
    uint64_t v31 = 512;
LABEL_111:
    *((void *)this + 96) = v31;
  }
  time_t v61 = (__CVBuffer *)*((void *)this + 48);
  if (v61)
  {
    CVPixelBufferRelease(v61);
    *((void *)this + 48) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 160));
  uint64_t v62 = *((void *)this + 87);
  uint64_t v63 = (void *)(v62 + 8 * (*((void *)this + 90) >> 9));
  uint64_t v64 = *((void *)this + 88);
  if (v64 == v62) {
    int v65 = 0;
  }
  else {
    int v65 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(*v63 + 8 * (*((void *)this + 90) & 0x1FFLL));
  }
  while (1)
  {
    if (v64 == v62)
    {
      uint64_t v68 = 0;
    }
    else
    {
      unint64_t v67 = *((void *)this + 91) + *((void *)this + 90);
      uint64_t v68 = *(void *)(v62 + ((v67 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v67 & 0x1FF);
    }
    if (v65 == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v68) {
      break;
    }
    if (*((unsigned char *)*v65 + 8)) {
      H16ISP::H16ISPFrameReceiverSharedBufferPool::ReleaseAllBuffers(**v65);
    }
    if ((H16ISP::H16ISPFrameReceiverSharedBufferPool ***)((char *)++v65 - *v63) == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)4096)
    {
      uint64_t v66 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v63[1];
      ++v63;
      int v65 = v66;
    }
    uint64_t v62 = *((void *)this + 87);
    uint64_t v64 = *((void *)this + 88);
  }
  uint64_t v69 = (H16ISP::H16ISPFrameReceiverDataBufferPool *)*((void *)this + 98);
  if (v69) {
    H16ISP::H16ISPFrameReceiverDataBufferPool::ReleaseBuffers(v69);
  }
  int v70 = (H16ISP::H16ISPFrameReceiverBufferPool *)*((void *)this + 102);
  if (v70)
  {
    H16ISP::H16ISPFrameReceiverBufferPool::~H16ISPFrameReceiverBufferPool(v70);
    MEMORY[0x24C53D6E0]();
    *((void *)this + 102) = 0;
  }
  if (*((unsigned char *)this + 361))
  {
    if (H16ISP::H16ISPDevice::ISP_UnregisterEPipeDoneCallback(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91)))
    {
      int v71 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        int v71 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v71;
      }
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::stopReceive();
      }
    }
    uint64_t v8 = H16ISP::H16ISPDevice::SetExclusiveExclaveStreamingMode(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), 0);
    if (v8)
    {
      uint64_t v72 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v72 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v72;
      }
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::stopReceive();
      }
    }
  }
  pthread_mutex_unlock(v91);
  kdebug_trace();
  return v8;
}

void H16ISP::H16ISPFrameReceiver::removeIODispatcherFromRunLoop(H16ISP::H16ISPFrameReceiver *this)
{
  CFDictionaryRef v2 = (__CFRunLoopSource *)*((void *)this + 39);
  int v3 = (CFRunLoopMode *)MEMORY[0x263EFFE88];
  if (v2)
  {
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 1), v2, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
    CFRelease(*((CFTypeRef *)this + 39));
    *((void *)this + 39) = 0;
  }
  BOOL v4 = (__CFRunLoopSource *)*((void *)this + 44);
  if (v4)
  {
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 1), v4, *v3);
    CFRelease(*((CFTypeRef *)this + 44));
    *((void *)this + 44) = 0;
  }
  uint64_t v5 = (__CFMachPort *)*((void *)this + 37);
  if (v5)
  {
    CFMachPortInvalidate(v5);
    CFRelease(*((CFTypeRef *)this + 37));
    *((void *)this + 37) = 0;
  }
  int v6 = (__CFMachPort *)*((void *)this + 43);
  if (v6)
  {
    CFMachPortInvalidate(v6);
    CFRelease(*((CFTypeRef *)this + 43));
    *((void *)this + 43) = 0;
  }
  mach_port_name_t v7 = *((_DWORD *)this + 76);
  uint64_t v8 = (ipc_space_t *)MEMORY[0x263EF8960];
  if (v7)
  {
    mach_port_mod_refs(*MEMORY[0x263EF8960], v7, 1u, -1);
    *((_DWORD *)this + 76) = 0;
  }
  if (*((_DWORD *)this + 84))
  {
    mach_port_mod_refs(*v8, 0, 1u, -1);
    *((_DWORD *)this + 84) = 0;
  }
}

uint64_t ___ZN6H16ISP19H16ISPFrameReceiverD2Ev_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 472))
  {
    notify_set_state(*(_DWORD *)(v1 + 476), 0);
    notify_post(*(const char **)(v1 + 464));
    float result = notify_cancel(*(_DWORD *)(v1 + 476));
    *(unsigned char *)(v1 + 472) = 0;
  }
  if (*(unsigned char *)(v1 + 496))
  {
    float result = notify_cancel(*(_DWORD *)(v1 + 500));
    *(unsigned char *)(v1 + 496) = 0;
  }
  if (*(unsigned char *)(v1 + 536))
  {
    float result = notify_cancel(*(_DWORD *)(v1 + 540));
    *(unsigned char *)(v1 + 536) = 0;
  }
  if (*(unsigned char *)(v1 + 552))
  {
    float result = notify_cancel(*(_DWORD *)(v1 + 556));
    *(unsigned char *)(v1 + 552) = 0;
  }
  if (*(unsigned char *)(v1 + 568))
  {
    float result = notify_cancel(*(_DWORD *)(v1 + 572));
    *(unsigned char *)(v1 + 568) = 0;
  }
  if (*(unsigned char *)(v1 + 584))
  {
    float result = notify_cancel(*(_DWORD *)(v1 + 588));
    *(unsigned char *)(v1 + 584) = 0;
  }
  if (*(unsigned char *)(v1 + 600))
  {
    float result = notify_cancel(*(_DWORD *)(v1 + 604));
    *(unsigned char *)(v1 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  if (*(unsigned char *)(v1 + 616))
  {
    float result = notify_cancel(*(_DWORD *)(v1 + 620));
    *(unsigned char *)(v1 + 616) = 0;
  }
  if (*(unsigned char *)(v1 + 632))
  {
    float result = notify_cancel(*(_DWORD *)(v1 + 636));
    *(unsigned char *)(v1 + 632) = 0;
  }
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiver::setupFrameReceiver(H16ISP::H16ISPFrameReceiver *this)
{
  *((void *)this + 1) = CFRunLoopGetCurrent();

  return H16ISP::H16ISPFrameReceiver::addIODispatcherToRunLoop(this);
}

uint64_t H16ISP::H16ISPFrameReceiver::DisablePDEStreaming(H16ISP::H16ISPFrameReceiver *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(uint64_t a1, int a2)
{
  BOOL v4 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 648);
  unint64_t v6 = *(void *)(a1 + 672);
  mach_port_name_t v7 = (char *)(v5 + 8 * (v6 >> 9));
  uint64_t v8 = *(void *)(a1 + 656);
  if (v8 == v5) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (char *)(*(void *)v7 + 8 * (*(void *)(a1 + 672) & 0x1FFLL));
  }
LABEL_4:
  unint64_t v10 = v9;
  while (1)
  {
    if (v8 == v5) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *(void *)(v5 + (((*(void *)(a1 + 680) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
    }
          + 8 * ((*(void *)(a1 + 680) + v6) & 0x1FF);
    if (v10 == (char *)v11)
    {
      uint64_t v14 = 3758097136;
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)v10;
    if (*(_DWORD *)(*(void *)v10 + 16) == a2) {
      break;
    }
    v10 += 8;
    v9 += 8;
    if ((char *)(*(void *)v7 + 4096) == v9)
    {
      uint64_t v13 = (char *)*((void *)v7 + 1);
      v7 += 8;
      uint64_t v9 = v13;
      goto LABEL_4;
    }
  }
  if ((*(_DWORD *)a1 - 1) > 1) {
    goto LABEL_22;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
  *(unsigned char *)(v12 + 144) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 160));
  uint64_t v14 = H16ISP::H16ISPDevice::ReturnAllBuffersInPool(*(H16ISP::H16ISPDevice **)(a1 + 328), *(_DWORD *)(a1 + 364), *(_DWORD *)(v12 + 20));
  if (!v14)
  {
    int v15 = 2001;
    while (1)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
      int v16 = *(_DWORD *)(v12 + 120);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 160));
      if (!v16) {
        break;
      }
      usleep(0x3E8u);
      if (!--v15)
      {
        uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v17 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v17;
        }
        uint64_t v14 = 3758097084;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((_DWORD *)(v12 + 20), v12 + 120, v17);
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::erase((int64x2_t *)(a1 + 640), v7, v9);
    H16ISP::H16ISPFrameReceiverBufferPool::~H16ISPFrameReceiverBufferPool((H16ISP::H16ISPFrameReceiverBufferPool *)v12);
    MEMORY[0x24C53D6E0]();
    uint64_t v14 = 0;
  }
LABEL_23:
  pthread_mutex_unlock(v4);
  return v14;
}

uint64_t H16ISP::H16ISPFrameReceiver::sendInitialDataBuffersToFirmware(H16ISP::H16ISPFrameReceiver *this, H16ISP::H16ISPFrameReceiverDataBufferPool *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t Pool = (_DWORD *)H16ISP::H16ISPFrameReceiverDataBufferPool::GetPool(a2);
  int v15 = H16ISP::H16ISPFrameReceiverDataBufferPool::IOSurfaceAllocSize(a2);
  v16[0] = v15;
  uint64_t v5 = (H16ISP::H16ISPDevice *)*((void *)this + 41);
  LODWORD(this) = *((_DWORD *)this + 91);
  uint64_t v6 = H16ISP::H16ISPFrameReceiverDataBufferPool::GetPool(a2);
  uint64_t v7 = H16ISP::H16ISPDevice::SetBufferPoolConfiguration(v5, (int)this, 39, *(_WORD *)(v6 + 112), 0, 1u, &v15);
  uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (v7)
  {
    uint64_t v9 = v7;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v8 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::sendInitialDataBuffersToFirmware(&v15, v16, v8);
    }
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v8 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = Pool[28];
      int v11 = Pool[25];
      int v13 = Pool[4];
      int v12 = Pool[5];
      *(_DWORD *)int buf = 136316162;
      CFAllocatorRef v18 = "sendInitialDataBuffersToFirmware";
      __int16 v19 = 1024;
      int v20 = v10;
      __int16 v21 = 1024;
      int v22 = v12;
      __int16 v23 = 1024;
      int v24 = v11;
      __int16 v25 = 1024;
      int v26 = v13;
      _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_DEFAULT, "%s - Sending %d initial buffers to firmware (poolID=%d, poolSize=%d, poolType=%d)\n", buf, 0x24u);
    }
    return H16ISP::H16ISPFrameReceiverDataBufferPool::SendInitialFirmwareBuffers(a2);
  }
  return v9;
}

uint64_t H16ISP::H16ISPFrameReceiver::addDataBufferPoolToFrameReceiver(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (a4 == 33)
  {
    if (!*(void *)(a1 + 784)) {
      operator new();
    }
    uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v7 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::addDataBufferPoolToFrameReceiver(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  else
  {
    int v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v15 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::addDataBufferPoolToFrameReceiver();
    }
  }
  pthread_mutex_unlock(v6);
  return 3758097095;
}

void sub_246917654(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10A0C40F8CCE62BLL);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPFrameReceiver::removeDataBufferPoolFromFrameReceiver(uint64_t a1, int a2)
{
  BOOL v4 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (a2 == 33)
  {
    uint64_t v5 = *(H16ISP::H16ISPFrameReceiverDataBufferPool **)(a1 + 784);
    if (v5)
    {
      uint64_t v6 = (H16ISP::H16ISPFrameReceiverDataBufferPool **)(a1 + 784);
      if ((*(_DWORD *)a1 - 1) > 1)
      {
        pthread_mutex_t *v6 = 0;
      }
      else
      {
        int v7 = *(_DWORD *)(H16ISP::H16ISPFrameReceiverDataBufferPool::GetPool(*(H16ISP::H16ISPFrameReceiverDataBufferPool **)(a1 + 784))
                       + 20);
        uint64_t v8 = (pthread_mutex_t *)(a1 + 160);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
        H16ISP::H16ISPFrameReceiverDataBufferPool::SetDestructionInProgress(*(void *)(a1 + 784));
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 160));
        if (H16ISP::H16ISPDevice::ReturnAllBuffersInPool(*(H16ISP::H16ISPDevice **)(a1 + 328), *(_DWORD *)(a1 + 364), v7))
        {
          uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            uint64_t v9 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v9;
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::removeDataBufferPoolFromFrameReceiver();
          }
        }
        else
        {
          int v12 = 2000;
          while (H16ISP::H16ISPFrameReceiverDataBufferPool::NumBuffersSent(*v6))
          {
            usleep(0x3E8u);
            if (!--v12)
            {
              uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                uint64_t v13 = os_log_create("com.apple.isp", "general");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v13;
              }
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPFrameReceiver::removeDataBufferPoolFromFrameReceiver(v6, v7, v13);
              }
              break;
            }
          }
        }
        pthread_mutex_lock(v8);
        pthread_mutex_t *v6 = 0;
        pthread_mutex_unlock(v8);
      }
      H16ISP::H16ISPFrameReceiverDataBufferPool::~H16ISPFrameReceiverDataBufferPool(v5);
      MEMORY[0x24C53D6E0]();
    }
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v10 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
    }
    uint64_t v11 = 3758097095;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::removeDataBufferPoolFromFrameReceiver();
    }
  }
  pthread_mutex_unlock(v4);
  return v11;
}

uint64_t H16ISP::H16ISPFrameReceiver::MessageHandlerEntry(H16ISP::H16ISPFrameReceiver *this, __CFMessagePort *a2, int a3, const __CFData *a4, H16ISP::H16ISPFrameReceiver *a5)
{
  *((_DWORD *)a4 + 200) |= a2;
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::registerFrameReceiveCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a3;
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::registerMessageCallback(H16ISP::H16ISPFrameReceiver *this, void (*a2)(unsigned int, unsigned int, unsigned int, void *, void *, void *), void *a3)
{
  *((void *)this + 6) = a2;
  *((void *)this + 7) = a3;
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::registerEPipeReceiveCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::registerFramePostProcessingCallback(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1[40]) {
    return 3758097122;
  }
  a1[10] = a2;
  a1[11] = a3;
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.h16ispframereceiver.postprocess.queue", 0);
  uint64_t result = 0;
  a1[40] = v5;
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiver::setDiagnosticsMode(H16ISP::H16ISPFrameReceiver *this, unsigned int a2)
{
  if (a2 > 2) {
    return 3758097090;
  }
  uint64_t result = 0;
  *((_DWORD *)this + 201) = a2;
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiver::GetChannel(H16ISP::H16ISPFrameReceiver *this)
{
  return *((unsigned int *)this + 91);
}

uint64_t H16ISP::H16ISPFrameReceiver::SetChannelStreaming(uint64_t this, char a2)
{
  *(unsigned char *)(this + 363) = a2;
  return this;
}

__n128 H16ISP::H16ISPFrameReceiver::GetPerSessionTelemetryReadings(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a1 + 944);
  long long v3 = *(_OWORD *)(a1 + 960);
  long long v4 = *(_OWORD *)(a1 + 976);
  *(void *)(a2 + 48) = *(void *)(a1 + 992);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiver::getFirmwarePrimeCount(uint64_t a1, int a2)
{
  long long v4 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 648);
  unint64_t v6 = *(void *)(a1 + 672);
  int v7 = (void *)(v5 + 8 * (v6 >> 9));
  uint64_t v8 = *(void *)(a1 + 656);
  if (v8 == v5) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *v7 + 8 * (*(void *)(a1 + 672) & 0x1FFLL);
  }
LABEL_4:
  uint64_t v10 = v9 - 4096;
  while (1)
  {
    if (v8 == v5) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *(void *)(v5 + (((*(void *)(a1 + 680) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
    }
          + 8 * ((*(void *)(a1 + 680) + v6) & 0x1FF);
    if (v9 == v11)
    {
      uint64_t v13 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
    if (*(_DWORD *)(*(void *)v9 + 16) == a2) {
      break;
    }
    v9 += 8;
    v10 += 8;
    if (*v7 == v10)
    {
      uint64_t v12 = v7[1];
      ++v7;
      uint64_t v9 = v12;
      goto LABEL_4;
    }
  }
  uint64_t v13 = *(unsigned int *)(*(void *)v9 + 112);
LABEL_14:
  pthread_mutex_unlock(v4);
  return v13;
}

uint64_t H16ISP::H16ISPFrameReceiver::SendFWInitialBuffers(H16ISP::H16ISPFrameReceiver *a1, int a2)
{
  uint64_t v2 = *((void *)a1 + 81);
  unint64_t v3 = *((void *)a1 + 84);
  long long v4 = (H16ISP::H16ISPFrameReceiverBufferPool ***)(v2 + 8 * (v3 >> 9));
  uint64_t v5 = *((void *)a1 + 82);
  if (v5 == v2) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = &(*v4)[*((void *)a1 + 84) & 0x1FFLL];
  }
LABEL_4:
  int v7 = v6 - 512;
  while (1)
  {
    if (v5 == v2) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = *(void *)(v2 + (((*((void *)a1 + 85) + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
    }
         + 8 * ((*((void *)a1 + 85) + v3) & 0x1FF);
    if (v6 == (H16ISP::H16ISPFrameReceiverBufferPool **)v8) {
      return 3758097084;
    }
    if (*((_DWORD *)*v6 + 4) == a2) {
      return H16ISP::H16ISPFrameReceiver::sendInitialBuffersToFirmware(a1, *v6);
    }
    ++v6;
    if (*v4 == ++v7)
    {
      uint64_t v9 = v4[1];
      ++v4;
      unint64_t v6 = v9;
      goto LABEL_4;
    }
  }
}

void H16ISP::H16ISPFrameReceiver::EPipeDone(H16ISP::H16ISPDevice **this, void *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a4 == 4)
  {
    unint64_t v6 = (pthread_mutex_t *)(this + 20);
    pthread_mutex_lock((pthread_mutex_t *)(this + 20));
    int v7 = *(_DWORD *)(a3 + 16);
    int v21 = v7;
    uint64_t v8 = *(void *)(a3 + 24);
    BOOL v22 = v8 != 0;
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(this[41]))
    {
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315650;
        int v24 = "EPipeDone";
        __int16 v25 = 1024;
        int v26 = v7;
        __int16 v27 = 1024;
        BOOL v28 = v8 != 0;
        _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves] H16ISPFrameReceiver - Exclave buffer ready notification received, requestID 0x%08X, epipe status: %d\n", buf, 0x18u);
      }
    }
    uint64_t v10 = this[8];
    if (v10)
    {
      ((void (*)(H16ISP::H16ISPDevice *, void, int *))v10)(this[9], *((unsigned int *)this + 91), &v21);
    }
    else
    {
      uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v13 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v13;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::EPipeDone(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    pthread_mutex_unlock(v6);
  }
  else
  {
    int v11 = (int)a4;
    uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v12 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315394;
      int v24 = "EPipeDone";
      __int16 v25 = 1024;
      int v26 = v11;
      _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves] H16ISPFrameReceiver - Invalid number of epipe done arguments, numArgs=%d, bail \n\n", buf, 0x12u);
    }
  }
}

uint64_t H16ISP::H16ISPFrameReceiver::StopChannels(H16ISP::H16ISPFrameReceiver *this, H16ISP::H16ISPDevice *a2, H16ISP::H16ISPFrameReceiver **a3)
{
  unint64_t v3 = a2;
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v5 = &_os_log_internal;
  unsigned int v23 = a3;
  if (!a3)
  {
    uint64_t v10 = H16ISP::H16ISPDevice::StopCamera(this, 0);
    if (!v10) {
      return v10;
    }
LABEL_7:
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
    {
      int v11 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::StopChannels();
    }
    if (!v23) {
      return v10;
    }
    goto LABEL_12;
  }
  unsigned int v6 = 0;
  int v7 = (H16ISP::H16ISPFrameReceiver **)a2;
  uint64_t v8 = a3;
  do
  {
    H16ISP::H16ISPFrameReceiver::PrepareStopReceive(*v7);
    uint64_t v9 = *v7++;
    v6 |= 1 << *((_DWORD *)v9 + 91);
    --v8;
  }
  while (v8);
  uint64_t v10 = H16ISP::H16ISPDevice::StopCamera(this, v6);
  if (v10) {
    goto LABEL_7;
  }
LABEL_12:
  uint64_t v12 = 0;
  uint64_t v13 = v23;
  do
  {
    while (1)
    {
      uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
      {
        uint64_t v14 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(_DWORD *)(*((void *)v3 + v12) + 364);
        *(_DWORD *)int buf = 136315906;
        __int16 v25 = "StopChannels";
        __int16 v26 = 1024;
        int v27 = 2097;
        __int16 v28 = 1024;
        int v29 = v12;
        __int16 v30 = 1024;
        int v31 = v15;
        _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_DEFAULT, "%s - [%d] [CIL] Call ISP_CILRequestPerChannel %d (%u/false)\n", buf, 0x1Eu);
      }
      uint64_t v16 = H16ISP::H16ISPDevice::ISP_CILRequestPerChannel((mach_port_t *)this, *(_DWORD *)(*((void *)v3 + v12) + 364), 0);
      if (!v16) {
        break;
      }
      uint64_t v10 = v16;
      uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
      {
        uint64_t v17 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v17;
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v18 = *(_DWORD *)(*((void *)v3 + v12) + 364);
        *(_DWORD *)int buf = 136315906;
        __int16 v25 = "StopChannels";
        __int16 v26 = 1024;
        int v27 = v10;
        __int16 v28 = 1024;
        int v29 = v12;
        __int16 v30 = 1024;
        int v31 = v18;
        _os_log_error_impl(&dword_24680F000, v17, OS_LOG_TYPE_ERROR, "%s - Calling ISP_CILRequestPerChannel error: 0x%08X (%d/%u/false)\n", buf, 0x1Eu);
      }
      if (++v12 == v23) {
        return v10;
      }
    }
    ++v12;
  }
  while (v12 != v23);
  if (!v23) {
    return 0;
  }
  while (1)
  {
    uint64_t v19 = *(void *)v3;
    *(unsigned char *)(v19 + 363) = 0;
    uint64_t v20 = H16ISP::H16ISPDevice::ReturnAllUnusedBuffers(this, *(unsigned int *)(v19 + 364));
    if (v20) {
      break;
    }
    unint64_t v3 = (H16ISP::H16ISPDevice *)((char *)v3 + 8);
    if (!--v13) {
      return 0;
    }
  }
  uint64_t v10 = v20;
  int v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
  {
    int v21 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v21;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPFrameReceiver::StopChannels();
  }
  return v10;
}

uint64_t H16ISP::H16ISPFrameReceiver::PrepareStopReceive(H16ISP::H16ISPFrameReceiver *this)
{
  *((unsigned char *)this + 362) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 160));
  return 0;
}

void H16ISP::H16ISPFrameReceiver::stopProjectorWatchdogTimer(H16ISP::H16ISPFrameReceiver *this)
{
  uint64_t v2 = *((void *)this + 117);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 117));
    *((void *)this + 1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 17) = 0;
  }
  unint64_t v3 = *((void *)this + 116);
  if (v3)
  {
    dispatch_sync(v3, &__block_literal_global_67);
    dispatch_release(*((dispatch_object_t *)this + 116));
    *((void *)this + 116) = 0;
  }
  bzero(v6, 0x10uLL);
  int v4 = *((_DWORD *)this + 91);
  __int16 v7 = 1569;
  int v8 = v4;
  int v9 = 0;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*((H16ISP::H16ISPDevice **)this + 41), v6, 0x10u, 0, 0xFFFFFFFF))
  {
    uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v5 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::stopProjectorWatchdogTimer();
    }
  }
}

void *H16ISP::H16ISPFrameReceiver::InsertTestPattern(H16ISP::H16ISPFrameReceiver *this, _DWORD *a2, unint64_t a3, unint64_t a4, size_t __n, int a6, int a7)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (a2)
  {
    size_t v10 = __n >> 2;
    if (a6) {
      unsigned int v11 = -1;
    }
    else {
      unsigned int v11 = 0;
    }
    int8x16_t v12 = (int8x16_t)vdupq_n_s16(v11);
    int8x16_t v13 = vbslq_s8(v12, (int8x16_t)xmmword_2469EDA70, (int8x16_t)xmmword_2469EDA60);
    int8x16_t v14 = vbslq_s8(v12, (int8x16_t)xmmword_2469EDA90, (int8x16_t)xmmword_2469EDA80);
    int8x16_t v15 = vbslq_s8(v12, (int8x16_t)xmmword_2469EDAB0, (int8x16_t)xmmword_2469EDAA0);
    if (a7) {
      unsigned int v16 = -1;
    }
    else {
      unsigned int v16 = 0;
    }
    int8x16_t v17 = (int8x16_t)vdupq_n_s16(v16);
    int16x8_t v18 = (int16x8_t)vbslq_s8(v17, v14, vbslq_s8(v12, (int8x16_t)xmmword_2469EDAD0, (int8x16_t)xmmword_2469EDAC0));
    int16x8_t v19 = (int16x8_t)vbslq_s8(v17, v13, v15);
    v66.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)vuzp1q_s16(v19, v18));
    v66.val[1] = (int16x8_t)vrev16q_s8((int8x16_t)vuzp2q_s16(v19, v18));
    uint64_t v20 = (__int16 *)v63;
    vst2q_s16(v20, v66);
    unint64_t v21 = (a4 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
    unint64_t v22 = a4 / 0x18;
    int16x8_t v23 = (int16x8_t)vbslq_s8(v17, vbslq_s8(v12, (int8x16_t)xmmword_2469EDB10, (int8x16_t)xmmword_2469EDB00), vbslq_s8(v12, (int8x16_t)xmmword_2469EDB50, (int8x16_t)xmmword_2469EDB40));
    int16x8_t v24 = (int16x8_t)vbslq_s8(v17, vbslq_s8(v12, (int8x16_t)xmmword_2469EDAF0, (int8x16_t)xmmword_2469EDAE0), vbslq_s8(v12, (int8x16_t)xmmword_2469EDB30, (int8x16_t)xmmword_2469EDB20));
    int8x16_t v25 = (int8x16_t)vuzp1q_s16(v24, v23);
    int8x16_t v26 = (int8x16_t)vuzp2q_s16(v24, v23);
    v65.val[0] = (int16x8_t)vrev16q_s8(v25);
    v65.val[1] = (int16x8_t)vrev16q_s8(v26);
    int v27 = (__int16 *)v62;
    vst2q_s16(v27, v65);
    unint64_t v28 = a3 >> 1;
    if (a3 >= 2)
    {
      unsigned int v29 = 0;
      uint64_t v30 = 0;
      do
      {
        a2[v30++] = bswap32(*(_DWORD *)((char *)v62 + ((uint64_t)((v29 / v28) << 32) >> 30)));
        v29 += 8;
      }
      while (v28 > v30);
    }
    uint64_t v31 = 4 * v10;
    unint64_t v32 = v22 - 1;
    if (v22 == 1)
    {
      uint64_t v36 = (char *)&a2[v10];
    }
    else
    {
      unint64_t v33 = v22 - 1;
      do
      {
        int v34 = (char *)&a2[(unint64_t)v31 / 4];
        __n128 result = memcpy(&a2[(unint64_t)v31 / 4], a2, __n);
        a2 = v34;
        --v33;
      }
      while (v33);
      uint64_t v36 = &v34[4 * v10];
    }
    if (a3 >= 2)
    {
      unsigned int v37 = 0;
      uint64_t v38 = 0;
      do
      {
        *(_DWORD *)&v36[4 * v38++] = bswap32(*(_DWORD *)&v63[(uint64_t)((v37 / v28) << 32) >> 30]);
        v37 += 8;
      }
      while (v28 > v38);
    }
    if (v32)
    {
      unint64_t v39 = v32;
      do
      {
        int v40 = &v36[v31];
        __n128 result = memcpy(&v36[v31], v36, __n);
        uint64_t v36 = v40;
        --v39;
      }
      while (v39);
      unint64_t v41 = &v40[4 * v10];
    }
    else
    {
      unint64_t v41 = &v36[4 * v10];
    }
    if (a3 >= 2)
    {
      unsigned int v42 = 0;
      uint64_t v43 = 0;
      do
      {
        unint64_t v44 = v42 / v28;
        if (a7) {
          double v45 = (double)(255 * (int)v44 / 31);
        }
        else {
          double v45 = (double)(int)v44 * 219.0 / 31.0 + 16.0;
        }
        *(_DWORD *)&v41[4 * v43++] = bswap32(16777472 * (int)(v45 + 0.5) + 8388736);
        v42 += 32;
      }
      while (v28 > v43);
    }
    unint64_t v46 = v21 >> 5;
    if (v32)
    {
      do
      {
        uint64_t v47 = &v41[v31];
        __n128 result = memcpy(&v41[v31], v41, __n);
        unint64_t v41 = v47;
        --v32;
      }
      while (v32);
      size_t v48 = v10;
      uint64_t v49 = &v47[4 * v10];
    }
    else
    {
      size_t v48 = v10;
      uint64_t v49 = &v41[4 * v10];
    }
    uint64_t v50 = 0;
    v61[0] = v62[0];
    v61[1] = v62[5];
    unsigned int v51 = v62[7];
    v61[2] = v62[3];
    v61[3] = v62[6];
    unint64_t v52 = v46 - 1;
    do
    {
      if (a3 >= 2)
      {
        unint64_t v53 = 0;
        unsigned int v54 = v61[v50];
        do
        {
          int v55 = 0;
          int v56 = 4;
          unsigned int v57 = v54;
          unsigned int v58 = v51;
          do
          {
            int v55 = (int)((double)v53 / (double)(v28 - 1) * (double)v57
                      + (double)v58 * (1.0 - (double)v53 / (double)(v28 - 1))
                      + 0.5)
                + (v55 << 8);
            v58 >>= 8;
            v57 >>= 8;
            --v56;
          }
          while (v56);
          *(_DWORD *)&v49[4 * v53] = v55;
          unint64_t v53 = (v53 + 1);
        }
        while (v28 > v53);
      }
      if (v52)
      {
        unint64_t v59 = v52;
        do
        {
          int v60 = &v49[v31];
          __n128 result = memcpy(&v49[v31], v49, __n);
          uint64_t v49 = v60;
          --v59;
        }
        while (v59);
        uint64_t v49 = &v60[v31];
      }
      else
      {
        v49 += 4 * v48;
      }
      ++v50;
    }
    while (v50 != 4);
  }
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiver::InsertTestPattern_YCbCr_420_Y_UV(H16ISP::H16ISPFrameReceiver *this, char *__src, char *a3, size_t __n, unint64_t a5, unint64_t a6, unint64_t a7, int a8, double a9, BOOL a10)
{
  uint64_t result = 0;
  uint64_t v99 = *MEMORY[0x263EF8340];
  if (__src)
  {
    unsigned int v11 = a3;
    if (a3)
    {
      int8x16_t v13 = __src;
      unint64_t v14 = (a5 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
      unint64_t v15 = a5 / 0x18 + 1;
      if (a10)
      {
        BOOL v16 = a8 == 0;
        if (a8) {
          int8x16_t v17 = &unk_2469EDCA4;
        }
        else {
          int8x16_t v17 = &unk_2469EDD24;
        }
        if (a8) {
          int16x8_t v18 = &unk_2469EDCC4;
        }
        else {
          int16x8_t v18 = &unk_2469EDD44;
        }
        if (a8) {
          int16x8_t v19 = &unk_2469EDC64;
        }
        else {
          int16x8_t v19 = &unk_2469EDCE4;
        }
        uint64_t v20 = &unk_2469EDD04;
        unint64_t v21 = &unk_2469EDC84;
      }
      else
      {
        BOOL v16 = a8 == 0;
        if (a8) {
          int8x16_t v17 = &unk_2469EDBA4;
        }
        else {
          int8x16_t v17 = &unk_2469EDC24;
        }
        if (a8) {
          int16x8_t v18 = &unk_2469EDBC4;
        }
        else {
          int16x8_t v18 = &unk_2469EDC44;
        }
        if (a8) {
          int16x8_t v19 = &unk_2469EDB64;
        }
        else {
          int16x8_t v19 = &unk_2469EDBE4;
        }
        uint64_t v20 = &unk_2469EDC04;
        unint64_t v21 = &unk_2469EDB84;
      }
      if (v16) {
        unint64_t v22 = v20;
      }
      else {
        unint64_t v22 = v21;
      }
      uint64_t v23 = v15 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v24 = a6 >> 2;
      unint64_t v25 = a7 >> 2;
      if (__n)
      {
        unint64_t v26 = 0;
        size_t v27 = 0;
        do
        {
          int v28 = v17[v26 / __n];
          unsigned int v29 = v18[v26 / __n];
          *(_DWORD *)&v13[v27] = v28;
          *(_DWORD *)&v13[4 * v24 + v27] = v28;
          *(_DWORD *)&a3[v27] = bswap32(v29);
          v27 += 4;
          v26 += 32;
        }
        while (v27 < __n);
      }
      unint64_t v92 = a6 >> 2;
      double v93 = v18;
      uint64_t v30 = 8 * v24;
      uint64_t v31 = 4 * v24;
      uint64_t v32 = 4 * v25;
      uint64_t v84 = v23;
      uint64_t v33 = v23 - 2;
      unint64_t v89 = a7 >> 2;
      unint64_t v95 = v23 - 2;
      uint64_t v87 = v17;
      uint64_t v88 = 2 * v24;
      if (v23 == 2)
      {
        uint64_t v38 = &v13[8 * v24];
        unint64_t v39 = &v11[4 * v25];
      }
      else
      {
        uint64_t v81 = v22;
        unint64_t v82 = v14;
        uint64_t v90 = v19;
        unint64_t v34 = 0;
        uint64_t v35 = 12 * v24;
        do
        {
          uint64_t v36 = &v13[v30];
          unsigned int v37 = &v11[v32];
          memcpy(&v13[v30], v13, __n);
          memcpy(&v13[v35], &v13[v31], __n);
          memcpy(&v11[v32], v11, __n);
          uint64_t v33 = v95;
          v34 += 2;
          v11 += v32;
          v13 += v30;
        }
        while (v34 < v95);
        int16x8_t v19 = v90;
        unint64_t v24 = v92;
        uint64_t v38 = &v36[8 * v92];
        unint64_t v25 = v89;
        unint64_t v39 = &v37[4 * v89];
        unint64_t v22 = v81;
        unint64_t v14 = v82;
      }
      if (__n)
      {
        unint64_t v40 = 0;
        size_t v41 = 0;
        do
        {
          int v42 = v19[v40 / __n];
          unsigned int v43 = v22[v40 / __n];
          *(_DWORD *)&v38[v41] = v42;
          *(_DWORD *)&v38[4 * v24 + v41] = v42;
          *(_DWORD *)&v39[v41] = bswap32(v43);
          v41 += 4;
          v40 += 32;
        }
        while (v41 < __n);
      }
      uint64_t v91 = v31;
      uint64_t v44 = (v14 >> 5) + 1;
      if (v33)
      {
        uint64_t v83 = (v14 >> 5) + 1;
        unint64_t v45 = 0;
        uint64_t v46 = 12 * v24;
        do
        {
          uint64_t v47 = &v38[v30];
          size_t v48 = &v39[v32];
          memcpy(&v38[v30], v38, __n);
          memcpy(&v38[v46], &v38[v31], __n);
          memcpy(&v39[v32], v39, __n);
          uint64_t v33 = v95;
          v45 += 2;
          v39 += v32;
          v38 += v30;
        }
        while (v45 < v95);
        unint64_t v24 = v92;
        uint64_t v49 = &v47[8 * v92];
        unint64_t v25 = v89;
        uint64_t v50 = &v48[4 * v89];
        uint64_t v44 = v83;
      }
      else
      {
        uint64_t v49 = &v38[4 * v88];
        uint64_t v50 = &v39[4 * v25];
      }
      uint64_t v51 = v44 & 0xFFFFFFFFFFFFFFELL;
      if (__n)
      {
        unint64_t v52 = 0;
        size_t v53 = 0;
        a9 = 0.5;
        do
        {
          size_t v54 = v52 / __n;
          if (a10) {
            double v55 = (double)(255 * v54 / 0x1F);
          }
          else {
            double v55 = (double)v54 * 219.0 / 31.0 + 16.0;
          }
          int v56 = 16843009 * (int)(v55 + 0.5);
          *(_DWORD *)&v49[v53] = v56;
          *(_DWORD *)&v49[4 * v24 + v53] = v56;
          *(_DWORD *)&v50[v53] = -2139062144;
          v53 += 4;
          v52 += 128;
        }
        while (v53 < __n);
      }
      uint64_t v86 = 3 * v84 + 4 * v51;
      if (v33)
      {
        uint64_t v85 = v51;
        unint64_t v57 = 0;
        uint64_t v58 = 12 * v24;
        do
        {
          unint64_t v59 = &v49[v30];
          int v60 = &v50[v32];
          memcpy(&v49[v30], v49, __n);
          memcpy(&v49[v58], &v49[v31], __n);
          memcpy(&v50[v32], v50, __n);
          v57 += 2;
          v50 += v32;
          v49 += v30;
        }
        while (v57 < v95);
        unint64_t v24 = v92;
        time_t v61 = &v59[8 * v92];
        uint64_t v62 = &v60[4 * v89];
        uint64_t v51 = v85;
      }
      else
      {
        time_t v61 = &v49[4 * v88];
        uint64_t v62 = &v50[4 * v25];
      }
      uint64_t v63 = 0;
      v97[0] = *v87;
      int v64 = v87[6];
      v97[1] = v87[5];
      int v65 = *((unsigned __int8 *)v87 + 28);
      v97[2] = v87[3];
      v97[3] = v64;
      v98[0] = *v93;
      int v66 = v93[6];
      v98[1] = v93[5];
      int v67 = v93[7];
      v98[2] = v93[3];
      unint64_t v68 = v51 - 2;
      double v69 = (double)v65;
      double v70 = (double)BYTE1(v67);
      v98[3] = v66;
      double v71 = (double)v67;
      uint64_t v96 = 12 * v24;
      do
      {
        if (__n)
        {
          unint64_t v72 = 0;
          LOBYTE(a9) = v97[v63];
          a9 = (double)*(unint64_t *)&a9;
          double v73 = (double)HIBYTE(v98[v63]);
          double v74 = (double)v98[v63];
          unsigned int v75 = v62;
          do
          {
            double v76 = (double)v72 / (double)(__n - 1);
            int v77 = (int)(v76 * a9 + v69 * (1.0 - v76) + 0.5);
            v61[v72] = v77;
            v61[4 * v24 + v72] = v77;
            if ((v72 & 1) == 0)
            {
              *(_WORD *)unsigned int v75 = bswap32((int)(v76 * v74 + v71 * (1.0 - v76) + 0.5) | ((int)(v76 * v73 + v70 * (1.0 - v76) + 0.5) << 8)) >> 16;
              v75 += 2;
            }
            ++v72;
          }
          while (__n != v72);
        }
        if (v68)
        {
          uint64_t v94 = v63;
          for (unint64_t i = 0; i < v68; i += 2)
          {
            uint64_t v79 = &v61[v30];
            uint64_t v80 = &v62[v32];
            memcpy(&v61[v30], v61, __n);
            memcpy(&v61[v96], &v61[v91], __n);
            memcpy(&v62[v32], v62, __n);
            v62 += v32;
            v61 += v30;
          }
          time_t v61 = &v79[v30];
          uint64_t v62 = &v80[v32];
          unint64_t v24 = v92;
          uint64_t v63 = v94;
        }
        else
        {
          v61 += 4 * v88;
          v62 += 4 * v89;
        }
        ++v63;
      }
      while (v63 != 4);
      return v86;
    }
  }
  return result;
}

void ___ZN6H16ISP19H16ISPFrameReceiver9FrameDoneEPviPyi_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 362))
  {
    unint64_t v3 = *(void (**)(void, uint64_t, void, uint64_t, uint64_t))(v2 + 80);
    if (v3)
    {
      v3(*(void *)(v2 + 88), v2, **(void **)(a1 + 40), *(void *)(a1 + 40) + 16, *(void *)(a1 + 40) + 12);
      uint64_t v2 = *(void *)(a1 + 32);
    }
    int v4 = *(void (**)(void, void, void, void, uint64_t))(v2 + 32);
    if (v4) {
      v4(*(void *)(v2 + 40), **(void **)(a1 + 40), *(unsigned int *)(*(void *)(a1 + 40) + 8), *(unsigned int *)(*(void *)(a1 + 40) + 12), *(void *)(a1 + 40) + 16);
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v5 + 12))
  {
    unint64_t v6 = 0;
    uint64_t v7 = 16;
    do
    {
      CVBufferRelease(*(CVBufferRef *)(v5 + v7));
      ++v6;
      uint64_t v5 = *(void *)(a1 + 40);
      v7 += 16;
    }
    while (v6 < *(unsigned int *)(v5 + 12));
  }

  JUMPOUT(0x24C53D6E0);
}

void H16ISP::H16ISPFrameReceiver::NoDataTimeout(H16ISP::H16ISPFrameReceiver *this, __CFRunLoopTimer *a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    int v4 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((_DWORD *)a2 + 91);
    int v7 = 136315394;
    int v8 = "NoDataTimeout";
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "%s - (chan: %d)\n", (uint8_t *)&v7, 0x12u);
  }
  unint64_t v6 = (void (*)(uint64_t, void, void, void, void, void))*((void *)a2 + 6);
  if (v6) {
    v6(6, 0, 0, 0, 0, *((void *)a2 + 7));
  }
}

BOOL H16ISP::H16ISPFrameReceiver::isNewOutputSizeChangePending(H16ISP::H16ISPFrameReceiver *this)
{
  return *((void *)this + 102) != 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::EnableFrameDoneTimer(H16ISP::H16ISPFrameReceiver *this, int a2)
{
  if (a2) {
    H16ISP::H16ISPFrameReceiver::startNoDataTimer(this);
  }
  else {
    H16ISP::H16ISPFrameReceiver::stopNoDataTimer(this);
  }
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::AllocateAndSendStillImageBuffersFromSharedPool(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = 3758097136;
  int v7 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if ((*(_DWORD *)a1 - 1) > 1)
  {
    uint64_t v6 = 3758097131;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 696);
    __int16 v9 = (void *)(v8 + 8 * (*(void *)(a1 + 720) >> 9));
    uint64_t v10 = *(void *)(a1 + 704);
    if (v10 == v8) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(*v9 + 8 * (*(void *)(a1 + 720) & 0x1FFLL));
    }
    while (1)
    {
      if (v10 == v8)
      {
        uint64_t v13 = 0;
      }
      else
      {
        unint64_t v12 = *(void *)(a1 + 728) + *(void *)(a1 + 720);
        uint64_t v13 = *(void *)(v8 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF);
      }
      if (v11 == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v13) {
        break;
      }
      unint64_t v14 = **v11;
      if (*(_DWORD *)(H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(v14) + 16) == a2)
      {
        if (v14) {
          uint64_t v6 = H16ISP::H16ISPFrameReceiverSharedBufferPool::SendStillImageBuffers(v14, a3);
        }
        break;
      }
      if ((H16ISP::H16ISPFrameReceiverSharedBufferPool ***)((char *)++v11 - *v9) == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)4096)
      {
        unint64_t v15 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v9[1];
        ++v9;
        uint64_t v11 = v15;
      }
      uint64_t v8 = *(void *)(a1 + 696);
      uint64_t v10 = *(void *)(a1 + 704);
    }
  }
  pthread_mutex_unlock(v7);
  return v6;
}

uint64_t H16ISP::H16ISPFrameReceiver::AllocateAndSendStillImageBuffers(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  memset(v22, 0, sizeof(v22));
  uint64_t v20 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (!a3) {
    goto LABEL_35;
  }
  uint64_t Buffer = 3758097131;
  if ((*(_DWORD *)a1 - 1) <= 1)
  {
    uint64_t v7 = *(void *)(a1 + 648);
    unint64_t v8 = *(void *)(a1 + 672);
    __int16 v9 = (void *)(v7 + 8 * (v8 >> 9));
    uint64_t v10 = *(void *)(a1 + 656);
    uint64_t v11 = v10 == v7 ? 0 : *v9 + 8 * (*(void *)(a1 + 672) & 0x1FFLL);
LABEL_6:
    uint64_t v12 = v11 - 4096;
    while (1)
    {
      if (v10 == v7) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = *(void *)(v7 + (((*(void *)(a1 + 680) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
      }
            + 8 * ((*(void *)(a1 + 680) + v8) & 0x1FF);
      if (v11 == v13)
      {
        uint64_t Buffer = 3758097136;
        goto LABEL_36;
      }
      unint64_t v14 = *(H16ISP::H16ISPFrameReceiverBufferPool **)v11;
      if (*(_DWORD *)(*(void *)v11 + 16) == a2) {
        break;
      }
      v11 += 8;
      v12 += 8;
      if (*v9 == v12)
      {
        uint64_t v15 = v9[1];
        ++v9;
        uint64_t v11 = v15;
        goto LABEL_6;
      }
    }
    pixelBuffer[0] = 0;
    pixelBuffer[1] = 0;
    uint64_t Buffer = H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(v14, pixelBuffer, 0);
    if (!Buffer && pixelBuffer[0])
    {
      DWORD1(v22[0]) = CVPixelBufferGetBytesPerRow(pixelBuffer[0]);
      LODWORD(v22[0]) = CVPixelBufferGetDataSize(pixelBuffer[0]);
      operator new();
    }
    BOOL v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      BOOL v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::AllocateAndSendStillImageBuffers();
    }
    if (!Buffer)
    {
      if (!*((_DWORD *)v14 + 28))
      {
        uint64_t Buffer = H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*(H16ISP::H16ISPDevice **)(a1 + 328), *(_DWORD *)(a1 + 364), 32, a3, 0, 1u, v22);
        if (Buffer)
        {
          int16x8_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int16x8_t v18 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::AllocateAndSendStillImageBuffers();
          }
          goto LABEL_36;
        }
      }
      uint64_t Buffer = H16ISP::H16ISPDevice::ISP_SendBuffers(*(void *)(a1 + 328), v23, a3, *(_DWORD *)(a1 + 304));
      if (Buffer)
      {
        int8x16_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int8x16_t v17 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiver::AllocateAndSendStillImageBuffers();
        }
        goto LABEL_36;
      }
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
      *((_DWORD *)v14 + 30) += a3;
      H16ISP::H16ISPFrameReceiverBufferPool::AddPendingStillImageBuffers((pthread_mutex_t *)v14, a3);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 160));
LABEL_35:
      uint64_t Buffer = 0;
    }
  }
LABEL_36:
  pthread_mutex_unlock(v20);
  return Buffer;
}

uint64_t H16ISP::H16ISPFrameReceiver::AllocateAndSendOneShotBuffers(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v57 = *MEMORY[0x263EF8340];
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t Buffer = 3758097086;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  unsigned int v6 = *(_DWORD *)v2 - 1;
  *(_OWORD *)uint64_t v23 = 0u;
  long long v24 = 0u;
  if (v6 > 1)
  {
    uint64_t Buffer = 3758097122;
  }
  else if (v4 <= 0x40)
  {
    uint64_t v10 = *(void *)(v2 + 648);
    unint64_t v11 = *(void *)(v2 + 672);
    uint64_t v12 = (void *)(v10 + 8 * (v11 >> 9));
    uint64_t v13 = *(void *)(v2 + 656);
    if (v13 == v10) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = *v12 + 8 * (*(void *)(v2 + 672) & 0x1FFLL);
    }
LABEL_13:
    uint64_t v15 = v14 - 4096;
    while (1)
    {
      uint64_t v16 = v13 == v10
          ? 0
          : *(void *)(v10 + (((*(void *)(v2 + 680) + v11) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(void *)(v2 + 680) + v11) & 0x1FF);
      if (v14 == v16) {
        break;
      }
      int8x16_t v17 = *(H16ISP::H16ISPFrameReceiverBufferPool **)v14;
      if (*(_DWORD *)(*(void *)v14 + 16) == v3)
      {
        int v19 = *((_DWORD *)v17 + 30);
        if ((int)v4 - v19 >= 1)
        {
          uint64_t v20 = v23;
          uint64_t v21 = (v4 - v19);
          while (1)
          {
            uint64_t Buffer = H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(v17, v20, (*((_DWORD *)v17 + 29) >> 10) & 1);
            if (Buffer) {
              break;
            }
            ++v20;
            if (!--v21) {
              operator new();
            }
          }
          break;
        }
        unint64_t v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          unint64_t v22 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v22;
        }
        uint64_t Buffer = 0;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315138;
          int v56 = "AllocateAndSendOneShotBuffers";
          _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_DEFAULT, "%s - Warning: Not queuing any more single shot buffers to firmware\n", buf, 0xCu);
          return 0;
        }
        return Buffer;
      }
      v14 += 8;
      v15 += 8;
      if (*v12 == v15)
      {
        uint64_t v18 = v12[1];
        ++v12;
        uint64_t v14 = v18;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t Buffer = 3758097090;
  }
  for (uint64_t i = 0; i != 64; ++i)
  {
    unint64_t v8 = v23[i];
    if (v8) {
      CVPixelBufferRelease(v8);
    }
  }
  return Buffer;
}

uint64_t H16ISP::H16ISPFrameReceiver::AllocateOneShotBuffer(uint64_t a1, int a2, __CVBuffer **a3)
{
  uint64_t result = 3758097086;
  *a3 = 0;
  if ((*(_DWORD *)a1 - 1) > 1) {
    return 3758097122;
  }
  uint64_t v14 = 0;
  uint64_t v6 = *(void *)(a1 + 648);
  unint64_t v7 = *(void *)(a1 + 672);
  unint64_t v8 = (H16ISP::H16ISPFrameReceiverBufferPool ***)(v6 + 8 * (v7 >> 9));
  uint64_t v9 = *(void *)(a1 + 656);
  if (v9 == v6) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = &(*v8)[*(void *)(a1 + 672) & 0x1FFLL];
  }
LABEL_6:
  unint64_t v11 = v10 - 512;
  while (1)
  {
    uint64_t v12 = v9 == v6
        ? 0
        : *(void *)(v6 + (((*(void *)(a1 + 680) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(void *)(a1 + 680) + v7) & 0x1FF);
    if (v10 == (H16ISP::H16ISPFrameReceiverBufferPool **)v12) {
      return result;
    }
    if (*((_DWORD *)*v10 + 4) == a2)
    {
      uint64_t result = H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(*v10, &v14, 0);
      if (!result) {
        *a3 = v14;
      }
      return result;
    }
    ++v10;
    if (*v8 == ++v11)
    {
      uint64_t v13 = v8[1];
      ++v8;
      uint64_t v10 = v13;
      goto LABEL_6;
    }
  }
}

uint64_t H16ISP::H16ISPFrameReceiver::SendOneShotBuffer(uint64_t a1, int a2)
{
  uint64_t v2 = 3758097086;
  if ((*(_DWORD *)a1 - 1) > 1) {
    return 3758097122;
  }
  uint64_t v3 = *(void *)(a1 + 648);
  unint64_t v4 = *(void *)(a1 + 672);
  int v5 = (void *)(v3 + 8 * (v4 >> 9));
  uint64_t v6 = *(void *)(a1 + 656);
  if (v6 == v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v5 + 8 * (*(void *)(a1 + 672) & 0x1FFLL);
  }
LABEL_6:
  uint64_t v8 = v7 - 4096;
  while (1)
  {
    uint64_t v9 = v6 == v3
       ? 0
       : *(void *)(v3 + (((*(void *)(a1 + 680) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(void *)(a1 + 680) + v4) & 0x1FF);
    if (v7 == v9) {
      return v2;
    }
    if (*(_DWORD *)(*(void *)v7 + 16) == a2) {
      operator new();
    }
    v7 += 8;
    v8 += 8;
    if (*v5 == v8)
    {
      uint64_t v10 = v5[1];
      ++v5;
      uint64_t v7 = v10;
      goto LABEL_6;
    }
  }
}

uint64_t H16ISP::H16ISPFrameReceiver::AddPreallocatedBuffer(void *a1, int a2, __CVBuffer *a3)
{
  uint64_t v3 = a1[81];
  unint64_t v4 = a1[84];
  int v5 = (pthread_mutex_t ***)(v3 + 8 * (v4 >> 9));
  uint64_t v6 = a1[82];
  if (v6 == v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = &(*v5)[a1[84] & 0x1FFLL];
  }
LABEL_4:
  uint64_t v8 = v7 - 512;
  while (1)
  {
    if (v6 == v3) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *(void *)(v3 + (((a1[85] + v4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[85] + v4) & 0x1FF);
    }
    if (v7 == (pthread_mutex_t **)v9) {
      return 3758097086;
    }
    if (*(_DWORD *)&(*v7)->__opaque[8] == a2) {
      break;
    }
    ++v7;
    if (*v5 == ++v8)
    {
      uint64_t v10 = v5[1];
      ++v5;
      uint64_t v7 = v10;
      goto LABEL_4;
    }
  }
  H16ISP::H16ISPFrameReceiverBufferPool::addPreallocatedBuffer(*v7, a3);
  return 0;
}

BOOL H16ISP::H16ISPFrameReceiver::HasSharedPool(void *a1, int a2)
{
  return H16ISP::H16ISPFrameReceiver::getSharedBufferPool(a1, a2) != 0;
}

H16ISP::H16ISPFrameReceiverSharedBufferPool **H16ISP::H16ISPFrameReceiver::getSharedBufferPool(void *a1, int a2)
{
  uint64_t v4 = a1[87];
  int v5 = (void *)(v4 + 8 * (a1[90] >> 9));
  uint64_t v6 = a1[88];
  if (v6 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(*v5 + 8 * (a1[90] & 0x1FFLL));
  }
  while (1)
  {
    if (v6 == v4)
    {
      uint64_t v9 = 0;
    }
    else
    {
      unint64_t v8 = a1[91] + a1[90];
      uint64_t v9 = *(void *)(v4 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF);
    }
    if (v7 == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v9) {
      break;
    }
    uint64_t v10 = *v7;
    if (*(_DWORD *)(H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(**v7) + 16) == a2) {
      return v10;
    }
    if ((H16ISP::H16ISPFrameReceiverSharedBufferPool ***)((char *)++v7 - *v5) == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)4096)
    {
      unint64_t v11 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v5[1];
      ++v5;
      uint64_t v7 = v11;
    }
    uint64_t v4 = a1[87];
    uint64_t v6 = a1[88];
  }
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::ResumeReceive(H16ISP::H16ISPFrameReceiver *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 160);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  uint64_t v3 = (__CVBuffer *)*((void *)this + 48);
  if (v3)
  {
    CVPixelBufferRelease(v3);
    *((void *)this + 48) = 0;
  }
  *((void *)this + 46) = -1;
  *((_WORD *)this + 1Matrix<double>::~Matrix((uint64_t)this + 88) = 1;
  *((unsigned char *)this + 378) = 0;
  pthread_mutex_unlock(v2);
  if (*((_DWORD *)this + 112)) {
    H16ISP::H16ISPFrameReceiver::startNoDataTimer(this);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  *(_DWORD *)this = 1;

  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
}

uint64_t H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  uint64_t v7 = *(void *)(a1 + 648);
  unint64_t v8 = *(void *)(a1 + 672);
  uint64_t v9 = (pthread_mutex_t ***)(v7 + 8 * (v8 >> 9));
  uint64_t v10 = *(void *)(a1 + 656);
  if (v10 == v7) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = &(*v9)[*(void *)(a1 + 672) & 0x1FFLL];
  }
LABEL_4:
  uint64_t v12 = v11 - 512;
  while (1)
  {
    if (v10 == v7) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *(void *)(v7 + (((*(void *)(a1 + 680) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
    }
          + 8 * ((*(void *)(a1 + 680) + v8) & 0x1FF);
    if (v11 == (pthread_mutex_t **)v13)
    {
      uint64_t v15 = 3758097086;
      goto LABEL_14;
    }
    if (*(_DWORD *)&(*v11)->__opaque[8] == a2) {
      break;
    }
    ++v11;
    if (*v9 == ++v12)
    {
      uint64_t v14 = v9[1];
      ++v9;
      unint64_t v11 = v14;
      goto LABEL_4;
    }
  }
  uint64_t v15 = H16ISP::H16ISPFrameReceiverBufferPool::ModifyBufferCount(*v11, a3);
LABEL_14:
  pthread_mutex_unlock(v6);
  return v15;
}

uint64_t H16ISP::H16ISPFrameReceiver::ModifySharedPoolBufferCount(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  uint64_t v7 = *(void *)(a1 + 696);
  unint64_t v8 = (void *)(v7 + 8 * (*(void *)(a1 + 720) >> 9));
  uint64_t v9 = *(void *)(a1 + 704);
  if (v9 == v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(*v8 + 8 * (*(void *)(a1 + 720) & 0x1FFLL));
  }
  while (1)
  {
    if (v9 == v7)
    {
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v11 = *(void *)(a1 + 728) + *(void *)(a1 + 720);
      uint64_t v12 = *(void *)(v7 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF);
    }
    if (v10 == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v12)
    {
      uint64_t v15 = 3758097086;
      goto LABEL_14;
    }
    uint64_t v13 = *v10;
    if (*(_DWORD *)(H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(**v10) + 16) == a2) {
      break;
    }
    if ((H16ISP::H16ISPFrameReceiverSharedBufferPool ***)((char *)++v10 - *v8) == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)4096)
    {
      uint64_t v14 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v8[1];
      ++v8;
      uint64_t v10 = v14;
    }
    uint64_t v7 = *(void *)(a1 + 696);
    uint64_t v9 = *(void *)(a1 + 704);
  }
  uint64_t Pool = (pthread_mutex_t *)H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(*v13);
  uint64_t v15 = H16ISP::H16ISPFrameReceiverBufferPool::ModifyBufferCount(Pool, a3);
LABEL_14:
  pthread_mutex_unlock(v6);
  return v15;
}

uint64_t H16ISP::H16ISPFrameReceiver::getOutputSize(void *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, unsigned char *a7)
{
  uint64_t v7 = a1[81];
  unint64_t v8 = a1[84];
  uint64_t v9 = (void *)(v7 + 8 * (v8 >> 9));
  uint64_t v10 = a1[82];
  if (v10 == v7) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *v9 + 8 * (a1[84] & 0x1FFLL);
  }
LABEL_4:
  uint64_t v12 = v11 - 4096;
  while (1)
  {
    if (v10 == v7) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *(void *)(v7 + (((a1[85] + v8) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[85] + v8) & 0x1FF);
    }
    if (v11 == v13) {
      return 3758097097;
    }
    uint64_t v14 = *(void *)v11;
    if (!*(_DWORD *)(*(void *)v11 + 16)) {
      break;
    }
    v11 += 8;
    v12 += 8;
    if (*v9 == v12)
    {
      uint64_t v15 = v9[1];
      ++v9;
      uint64_t v11 = v15;
      goto LABEL_4;
    }
  }
  uint64_t result = 0;
  *a2 = *(_DWORD *)(v14 + 24);
  *a3 = *(_DWORD *)(v14 + 28);
  *a4 = *(_DWORD *)(v14 + 32);
  int v17 = *(_DWORD *)(v14 + 40);
  *a5 = *(_DWORD *)(v14 + 36);
  *a6 = v17;
  *a7 = *(unsigned char *)(v14 + 88);
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiver::setNewOutputSize(H16ISP::H16ISPFrameReceiver *this)
{
  uint64_t v1 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  pthread_mutex_unlock(v1);
  return 3758097097;
}

uint64_t H16ISP::DestroyH16ISPFrameReceiver(H16ISP *this, H16ISP::H16ISPFrameReceiver *a2)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  CFRetain(v3);
  H16ISP::H16ISPFrameReceiver::~H16ISPFrameReceiver(this);
  MEMORY[0x24C53D6E0]();
  CFRunLoopStop((CFRunLoopRef)v3);
  CFRelease(v3);
  return 0;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    int v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<H16ISP::H16ISPFrameReceiverBufferPool **,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,0>(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      int v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    int v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<H16ISP::H16ISPFrameReceiverBufferPool **,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,0>(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<H16ISP::H16ISPFrameReceiverBufferPool **,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 3;
      }
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 8 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

uint64_t std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__erase_to_end(uint64_t result, char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  unint64_t v8 = (char *)(v6 + 8 * (v5 >> 9));
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 8 * (v5 & 0x1FF);
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 3) + ((v8 - a2) << 6);
    uint64_t v11 = a3 - *(void *)a2;
    uint64_t v12 = v10 - (v11 >> 3);
    if (v12 >= 1)
    {
      uint64_t v13 = (char *)(v6 + 8 * (v4 >> 9));
      if (v7 == v6) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *(void *)v13 + 8 * (*(void *)(result + 32) & 0x1FFLL);
      }
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = (v11 >> 3) + ((a2 - v13) << 6) - ((v14 - *(void *)v13) >> 3);
      }
      std::__deque_iterator<__CVBuffer *,__CVBuffer **,__CVBuffer *&,__CVBuffer ***,long,512l>::operator+[abi:ne180100]((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        __n128 result = std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void H16ISP::H16ISPFirmwareWorkProcessor::H16ISPFirmwareWorkProcessor(H16ISP::H16ISPFirmwareWorkProcessor *this, H16ISP::H16ISPDevice *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)this = 0;
  *((void *)this + 27) = 0;
  *((_DWORD *)this + Matrix<double>::~Matrix((uint64_t)this + 56) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  uint64_t v3 = (H16ISP::H16ISPDevice **)((char *)this + 240);
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0x4000000000000000;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 16), 0);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 144), 0);
  *((void *)this + 26) = 0;
  pthread_mutexattr_init(&v5);
  pthread_mutexattr_settype(&v5, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 80), &v5);
  pthread_mutexattr_destroy(&v5);
  unsigned int v4 = 0;
  H16ISP::H16ISPDevice::GetISPCounterFrequency(*v3, &v4, (double *)this + 32);
  mach_timebase_info((mach_timebase_info_t)this + 33);
  operator new();
}

void sub_24691A35C(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1020C40D212FA45);
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPFirmwareWorkProcessor::~H16ISPFirmwareWorkProcessor(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  if (*(_DWORD *)this) {
    H16ISP::H16ISPFirmwareWorkProcessor::stopReceive(this);
  }
  if (*((void *)this + 29)) {
    H16ISP::H16ISPFirmwareWorkProcessor::removeIODispatcherFromRunLoop(this);
  }
  uint64_t v2 = (H16ISP::H16ISPCFLocalMessagePort *)*((void *)this + 34);
  if (v2)
  {
    uint64_t v3 = (__CFRunLoop *)*((void *)this + 1);
    RunLoopSource = H16ISP::H16ISPCFLocalMessagePort::GetRunLoopSource(v2);
    CFRunLoopRemoveSource(v3, RunLoopSource, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
    uint64_t v5 = *((void *)this + 34);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *((void *)this + 34) = 0;
  }
  uint64_t v6 = (H16ISPFirmwareWork *)*((void *)this + 36);
  if (v6)
  {
    H16ISPFirmwareWork::~H16ISPFirmwareWork(v6);
    MEMORY[0x24C53D6E0]();
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 144));
}

uint64_t H16ISP::H16ISPFirmwareWorkProcessor::stopReceive(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (*(_DWORD *)this)
  {
    H16ISP::H16ISPFirmwareWorkProcessor::stopNoDataTimer(this);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
    *((unsigned char *)this + 248) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 80));
    uint64_t v3 = H16ISP::H16ISPDevice::ISP_UnregisterFirmwareWorkProcessor(*((H16ISP::H16ISPDevice **)this + 30), *((_DWORD *)this + 56));
    *((unsigned char *)this + 248) = 0;
    *(_DWORD *)this = 0;
  }
  else
  {
    uint64_t v3 = 3758097122;
  }
  pthread_mutex_unlock(v2);
  return v3;
}

void H16ISP::H16ISPFirmwareWorkProcessor::removeIODispatcherFromRunLoop(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  uint64_t v2 = (__CFRunLoopSource *)*((void *)this + 29);
  if (v2)
  {
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 1), v2, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
    CFRelease(*((CFTypeRef *)this + 29));
    *((void *)this + 29) = 0;
  }
  uint64_t v3 = (__CFMachPort *)*((void *)this + 27);
  if (v3)
  {
    CFMachPortInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 27));
    *((void *)this + 27) = 0;
  }
  mach_port_name_t v4 = *((_DWORD *)this + 56);
  if (v4)
  {
    mach_port_mod_refs(*MEMORY[0x263EF8960], v4, 1u, -1);
    *((_DWORD *)this + Matrix<double>::~Matrix((uint64_t)this + 56) = 0;
  }
}

uint64_t H16ISP::H16ISPFirmwareWorkProcessor::setupWorkProcessor(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  *((void *)this + 1) = CFRunLoopGetCurrent();

  return H16ISP::H16ISPFirmwareWorkProcessor::addIODispatcherToRunLoop(this);
}

uint64_t H16ISP::H16ISPFirmwareWorkProcessor::addIODispatcherToRunLoop(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  uint64_t v2 = IOCreateReceivePort(0x39u, (mach_port_t *)this + 56);
  if (!v2)
  {
    uint64_t v2 = 3758097085;
    Boolean shouldFreeInfo = 0;
    context.version = 1;
    context.mach_timebase_info info = this;
    memset(&context.retain, 0, 24);
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    mach_port_name_t v4 = CFMachPortCreateWithPort((CFAllocatorRef)*MEMORY[0x263EFFB08], *((_DWORD *)this + 56), MEMORY[0x263F0EBE0], &context, &shouldFreeInfo);
    *((void *)this + 27) = v4;
    if (v4)
    {
      RunLoopSource = CFMachPortCreateRunLoopSource(v3, v4, 0);
      *((void *)this + 29) = RunLoopSource;
      if (RunLoopSource)
      {
        CFRunLoopAddSource(*((CFRunLoopRef *)this + 1), RunLoopSource, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
        return 0;
      }
    }
  }
  return v2;
}

uint64_t H16ISP::H16ISPFirmwareWorkProcessor::startReceive(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (*(_DWORD *)this == 1)
  {
    pthread_mutex_unlock(v2);
    return 3758097122;
  }
  else
  {
    *((unsigned char *)this + 248) = 0;
    *(_DWORD *)this = 1;
    inputStruct[0] = H16ISP::H16ISPFirmwareWorkProcessor::WorkReady;
    inputStruct[1] = this;
    int v6 = *((_DWORD *)this + 56);
    uint64_t v3 = H16ISP::H16ISPDevice::ISP_RegisterFirmwareWorkProcessor(*((void *)this + 30), inputStruct);
    pthread_mutex_unlock(v2);
  }
  return v3;
}

void H16ISP::H16ISPFirmwareWorkProcessor::WorkReady(H16ISP::H16ISPFirmwareWorkProcessor *this, void *a2, int a3, unint64_t *a4)
{
}

uint64_t H16ISP::H16ISPFirmwareWorkProcessor::stopNoDataTimer(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 144);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  uint64_t v3 = (__CFRunLoopTimer *)*((void *)this + 26);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 26));
    *((void *)this + 26) = 0;
  }

  return pthread_mutex_unlock(v2);
}

uint64_t H16ISP::H16ISPFirmwareWorkProcessor::tickleNoDataTimer(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 144);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  uint64_t v3 = (__CFRunLoopTimer *)*((void *)this + 26);
  if (v3)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFRunLoopTimerSetNextFireDate(v3, Current + *((double *)this + 35));
  }

  return pthread_mutex_unlock(v2);
}

uint64_t H16ISP::H16ISPFirmwareWorkProcessor::FlushSurfaceCache(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  H16ISP::H16ISPDevice::ISP_ReleaseFirmwareWorkProcessorBuffers(*((H16ISP::H16ISPDevice **)this + 30), *((_DWORD *)this + 56));
  pthread_mutex_unlock(v2);
  return 0;
}

uint64_t H16ISP::H16ISPFirmwareWorkProcessor::startNoDataTimer(H16ISP::H16ISPFirmwareWorkProcessor *this)
{
  unsigned int v2 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableISPBringup", @"com.apple.coremedia", 0);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  uint64_t v3 = (__CFRunLoopTimer *)*((void *)this + 26);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 26));
    *((void *)this + 26) = 0;
  }
  context.version = 0;
  context.mach_timebase_info info = this;
  memset(&context.retain, 0, 24);
  double v4 = CFAbsoluteTimeGetCurrent() + *((double *)this + 35);
  double v5 = 200.0;
  if (!v2) {
    double v5 = 0.0;
  }
  int v6 = CFRunLoopTimerCreate(0, v5 + v4, 0.0, 0, 0, (CFRunLoopTimerCallBack)H16ISP::H16ISPFirmwareWorkProcessor::NoDataTimeout, &context);
  *((void *)this + 26) = v6;
  if (v6) {
    CFRunLoopAddTimer(*((CFRunLoopRef *)this + 1), v6, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 144));
}

uint64_t H16ISP::H16ISPFirmwareWorkProcessor::SetFrameDoneTimeoutDuration(H16ISP::H16ISPFirmwareWorkProcessor *this, double a2)
{
  if (a2 < 2.0) {
    a2 = 2.0;
  }
  *((double *)this + 35) = a2;
  H16ISP::H16ISPFirmwareWorkProcessor::tickleNoDataTimer(this);
  return 0;
}

uint64_t H16ISP::CreateH16ISPFirmwareWorkProcessor(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  pthread_t v5 = 0;
  H16ISP::H16ISPThreadReadySyncer::H16ISPThreadReadySyncer((H16ISP::H16ISPThreadReadySyncer *)&v7);
  uint64_t v2 = *(void *)(a1 + 8);
  v6[0] = 0;
  v6[1] = v2;
  void v6[2] = &v7;
  pthread_attr_init(&v8);
  pthread_attr_setdetachstate(&v8, 2);
  pthread_create(&v5, &v8, (void *(__cdecl *)(void *))H16ISP::H16ISPFirmwareWorkProcessorThreadStart, v6);
  pthread_attr_destroy(&v8);
  H16ISP::H16ISPThreadReadySyncer::wait(&v7);
  **(void **)a1 = v6[0];
  if (v6[0]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 3758097084;
  }
  H16ISP::H16ISPThreadReadySyncer::~H16ISPThreadReadySyncer((H16ISP::H16ISPThreadReadySyncer *)&v7);
  return v3;
}

void sub_24691AB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void H16ISP::H16ISPFirmwareWorkProcessorThreadStart(uint64_t a1)
{
}

void sub_24691ABF0(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1020C4078A72D64);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::DestroyH16ISPFirmwareWorkProcessor(H16ISP *this, H16ISP::H16ISPFirmwareWorkProcessor *a2)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  CFRetain(v3);
  H16ISP::H16ISPFirmwareWorkProcessor::~H16ISPFirmwareWorkProcessor(this);
  MEMORY[0x24C53D6E0]();
  CFRunLoopStop((CFRunLoopRef)v3);
  CFRelease(v3);
  return 0;
}

uint64_t AppendMotionMetadata(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 3758097090;
  if (a1 && a2)
  {
    if (pMetadataFileWriterQueue) {
      BOOL v5 = metadataFileWriterThreadRunLoopRef == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      return 3758097112;
    }
    else
    {
      pthread_mutex_lock(&metadataFileWriterQueueMutex);
      pthread_mutex_t v7 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040DE3E3027uLL);
      if (v7)
      {
        *pthread_mutex_t v7 = 0u;
        v7[1] = 0u;
        *pthread_mutex_t v7 = *a1;
        *((void *)v7 + 3) = a3;
        operator new();
      }
      pthread_attr_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        pthread_attr_t v8 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        AppendMotionMetadata(v8);
      }
      pthread_mutex_unlock(&metadataFileWriterQueueMutex);
      return 3758097085;
    }
  }
  return result;
}

void sub_24691ADE8(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1020C405A04CE29);
  _Unwind_Resume(a1);
}

void std::deque<MotionMetadataContext *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<MotionMetadataContext *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

_DWORD *CreateMotionMetadataDebugLogger(const char *a1, int a2, H16ISP::H16ISPDevice *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = malloc_type_calloc(0x10uLL, 1uLL, 0x8E67F1FBuLL);
  if (v6)
  {
    if (!nThreadCreateRefCnt) {
      operator new();
    }
    ++nThreadCreateRefCnt;
    uint64_t v7 = fopen(a1, "w");
    *(void *)uint64_t v6 = v7;
    if (v7)
    {
      void v6[2] = a2;
      fwrite("---------------------------------------------------------------------------\n", 0x4CuLL, 1uLL, v7);
      fwrite("OIS/Motion Debug Log\n", 0x15uLL, 1uLL, *(FILE **)v6);
      fprintf(*(FILE **)v6, "File Version: %s\n", "H16-1.0.0");
      time_t v13 = 0;
      setlocale(0, "");
      time(&v13);
      unint64_t v8 = localtime(&v13);
      strftime(v18, 0x28uLL, "%m/%d/%g - %H:%M:%S", v8);
      fprintf(*(FILE **)v6, "Created: %s\n\n", v18);
      if (a3)
      {
        bzero(&v14, 0xA8uLL);
        WORD2(v14.__sig) = 6;
        if (!H16ISP::H16ISPDevice::ISP_SendCommand(a3, (unsigned __int8 *)&v14, 0xA8u, 0, 0xFFFFFFFF))
        {
          fwrite("Firmware Info:\n", 0xFuLL, 1uLL, *(FILE **)v6);
          fprintf(*(FILE **)v6, "    Platform Name: %s\n", v14.__opaque);
          fprintf(*(FILE **)v6, "    Link Date: %s\n", &v14.__opaque[32]);
          fprintf(*(FILE **)v6, "    Release Version: %s\n", v15);
          fprintf(*(FILE **)v6, "    Toolchain Name: %s\n", v16);
          fprintf(*(FILE **)v6, "    Toolchain Version: %s\n", v17);
          fprintf(*(FILE **)v6, "    Metadata Version: %d\n", 4142);
          if ((a2 & 0x100) != 0)
          {
            mach_timebase_info(&info);
            fwrite("Timebase Conversion Info:\n", 0x1AuLL, 1uLL, *(FILE **)v6);
            fprintf(*(FILE **)v6, "    mach_timebase_mach_timebase_info info = %u / %u \n", info.numer, info.denom);
            fprintf(*(FILE **)v6, "Conversion Formula: elapsed time (nanoseconds) = (elapsed time (mach ticks)) * %d/%d \n", info.numer, info.denom);
            LODWORD(v9) = info.numer;
            LODWORD(v1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = info.denom;
            fprintf(*(FILE **)v6, "Conversion Formula: elapsed time (seconds) = (elapsed time (mach ticks))/ %f \n", 1000000000.0 / ((double)v9 / (double)v10));
          }
          fputc(10, *(FILE **)v6);
        }
      }
      fwrite("---------------------------------------------------------------------------\n", 0x4CuLL, 1uLL, *(FILE **)v6);
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "Could not open OIS meta-data file for writing: %s\n", a1);
      free(v6);
      return 0;
    }
  }
  return v6;
}

uint64_t DestroyMotionMetadataDebugLogger(FILE **a1)
{
  if (a1)
  {
    if (!--nThreadCreateRefCnt)
    {
      CFRetain((CFTypeRef)metadataFileWriterThreadRunLoopRef);
      CFRunLoopStop((CFRunLoopRef)metadataFileWriterThreadRunLoopRef);
      CFRelease((CFTypeRef)metadataFileWriterThreadRunLoopRef);
      metadataFileWriterThreadRunLoopRef = 0;
      if (pMetadataFileWriterQueue)
      {
        uint64_t v2 = std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)pMetadataFileWriterQueue);
        MEMORY[0x24C53D6E0](v2, 0x1080C40BE8D5F09);
        pMetadataFileWriterQueue = 0;
      }
      uint64_t v4 = 0;
      pthread_join((pthread_t)metadataFileWriterThread, &v4);
      pthread_mutex_destroy(&metadataFileWriterQueueMutex);
    }
    if (*a1)
    {
      fflush(*a1);
      fclose(*a1);
    }
    free(a1);
    return 0;
  }
  else
  {
    fwrite("DestroyMotionMetadataDebugLogger: Invalid context \n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    return 3758097090;
  }
}

uint64_t MetadataFileWriterThread(void *a1)
{
  pthread_setname_np("MetadataFileWriterThread");
  bzero(&v4, 0x50uLL);
  v4.perforuint64_t m = (void (__cdecl *)(void *))MetadataFileWriterThreadMessageHandler;
  v4.mach_timebase_info info = 0;
  metadataFileWriterThreadRunLoopSource = (uint64_t)CFRunLoopSourceCreate(0, 0, &v4);
  if (metadataFileWriterThreadRunLoopSource)
  {
    CFAbsoluteTime Current = CFRunLoopGetCurrent();
    CFRunLoopAddSource(Current, (CFRunLoopSourceRef)metadataFileWriterThreadRunLoopSource, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
    metadataFileWriterThreadRunLoopRef = (uint64_t)CFRunLoopGetCurrent();
    CFRunLoopRun();
  }
  else
  {
    uint64_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v2 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v2;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      MetadataFileWriterThread(v2);
    }
  }
  return 0;
}

uint64_t MetadataFileWriterThreadMessageHandler(void *a1)
{
  pthread_mutex_lock(&metadataFileWriterQueueMutex);
  uint64_t v1 = (void *)pMetadataFileWriterQueue;
  if (pMetadataFileWriterQueue)
  {
    while (1)
    {
      uint64_t v2 = v1[5];
      if (!v2) {
        goto LABEL_86;
      }
      uint64_t v3 = *(void *)(*(void *)(v1[1] + ((v1[4] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v1[4] & 0x1FFLL));
      ++v1[4];
      v1[5] = v2 - 1;
      std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v1, 1);
      pthread_mutex_unlock(&metadataFileWriterQueueMutex);
      if (v3) {
        break;
      }
LABEL_85:
      pthread_mutex_lock(&metadataFileWriterQueueMutex);
      uint64_t v1 = (void *)pMetadataFileWriterQueue;
      if (!pMetadataFileWriterQueue) {
        goto LABEL_86;
      }
    }
    CFRunLoopSourceContext v4 = *(FILE **)v3;
    int v5 = *(_DWORD *)(v3 + 8);
    uint64_t v6 = *(void **)(v3 + 16);
    fwrite("---------------------------------------------------------------------------\n", 0x4CuLL, 1uLL, *(FILE **)v3);
    if (v6)
    {
      fprintf(v4, "frame: %d\n", *(_DWORD *)(v6[66] + 12));
      fprintf(v4, "timeStamp: 0x%016llX\n", *(void *)(v3 + 24));
      if ((v5 & 0x100) != 0)
      {
        uint64_t v7 = v6[66];
        if (v7) {
          fprintf(v4, "metadata->timeStamp: 0x%016llX\n", *(void *)(v7 + 4));
        }
      }
      gettimeofday(&v83, 0);
      fprintf(v4, "epochTime: %ld:%03d\n", v83.tv_sec, v83.tv_usec / 1000);
      if ((v5 & 8) != 0 && *v6) {
        fprintf(v4, "sensorTemperature: %d\n", *(__int16 *)(*v6 + 336));
      }
      if ((v5 & 0x10) != 0 && *v6)
      {
        fprintf(v4, "motionDataStatus: %d\n", *(_DWORD *)(*v6 + 420));
        fprintf(v4, "sphereStatus: %d\n", *(_DWORD *)(*v6 + 424));
        fprintf(v4, "sphereMode: %d\n", *(_DWORD *)(*v6 + 428));
        fprintf(v4, "apsMode: %d\n", *(_DWORD *)(*v6 + 592));
        fprintf(v4, "apsModeInUse: %d\n", *(_DWORD *)(*v6 + 636));
        fprintf(v4, "channel: %d\n", *(unsigned __int16 *)(*v6 + 458));
      }
      if ((v5 & 0x20) != 0)
      {
        uint64_t v8 = v6[3];
        if (v8) {
          fprintf(v4, "afCurrentPosition: %d\n", *(unsigned __int16 *)(v8 + 26));
        }
      }
      unint64_t v9 = (unsigned __int16 *)v6[21];
      __int16 v82 = v5;
      if (v9) {
        BOOL v10 = (v5 & 2) == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        fwrite("Motion meta-data section not found in frame meta-data.\n", 0x37uLL, 1uLL, v4);
      }
      else
      {
        fprintf(v4, "motionMetaVersion = %d\n", *v9);
        fprintf(v4, "motionSampleCFIndex Count = %d\n", *(unsigned __int16 *)(v6[21] + 2));
        uint64_t v11 = v6[21];
        if (*(_WORD *)(v11 + 2))
        {
          unint64_t v12 = 0;
          uint64_t v13 = 104;
          do
          {
            pthread_attr_t v14 = (int *)(v11 + v13);
            fprintf(v4, "motionSample: Tisp=0x%016llX  Tmot=0x%016llX  type=%-5d  convergence=%-5d  Wq=%-10.7f  Xq=%-10.7f  Yq=%-10.7f  Zq=%-10.7f  Wp=%-10.7f  Xp=%-10.7f  Yp=%-10.7f  Zp=%-10.7f  Xg=%-10.7f  Yg=%-10.7f  Zg=%-10.7f AccelX=%-10.7f AccelY=%-10.7f AccelZ=%-10.7f\n              gyroBiasEst=%.3f RotationRateY=%.3f RotationRateP=%.3f RotationRateR=%.3f\n", *((void *)v14 - 12), *((void *)v14 - 11), *((unsigned __int16 *)v14 - 40), *((unsigned __int16 *)v14 - 37), (double)*(v14 - 18) * 9.31322575e-10, (double)*(v14 - 17) * 9.31322575e-10, (double)*(v14 - 16) * 9.31322575e-10, (double)*(v14 - 15) * 9.31322575e-10, (double)*(v14 - 11) * 9.31322575e-10, (double)*(v14 - 10) * 9.31322575e-10, (double)*(v14 - 9) * 9.31322575e-10, (double)*(v14 - 8) * 9.31322575e-10, (double)*(v14 - 14) * 0.0000152587891, (double)*(v14 - 13) * 0.0000152587891,
              (double)*(v14 - 12) * 0.0000152587891,
              (double)*(v14 - 7) * 0.0000152587891,
              (double)*(v14 - 6) * 0.0000152587891,
              (double)*(v14 - 5) * 0.0000152587891,
              (double)*(v14 - 3) * 0.0000152587891,
              (double)*(v14 - 2) * 0.0000152587891,
              (double)*(v14 - 1) * 0.0000152587891,
              (double)*v14 * 0.0000152587891);
            ++v12;
            uint64_t v11 = v6[21];
            v13 += 100;
          }
          while (v12 < *(unsigned __int16 *)(v11 + 2));
        }
      }
      uint64_t v15 = (unsigned __int16 *)v6[13];
      if (v15)
      {
        fprintf(v4, "oisMetaVersion: %d\n", *v15);
        fprintf(v4, "oisSampleCount: %d\n", *(unsigned __int16 *)(v6[13] + 2));
        fprintf(v4, "motionSampleCount: %d\n", *(unsigned __int16 *)(v6[13] + 4));
        fprintf(v4, "rvsyncTimeStamp: %llu\n", *(void *)(v6[13] + 58968));
        fprintf(v4, "primaryReadoutDoneTimeStamp: %llu\n", *(void *)(v6[13] + 58976));
        fprintf(v4, "fvsyncTimeStamp: %llu\n", *(void *)(v6[13] + 58984));
        fprintf(v4, "nextExposureTimeStamp: %llu\n", *(void *)(v6[13] + 58992));
        uint64_t v16 = *v6;
        if (*v6)
        {
          if (!*(void *)(v16 + 468)
            || (fprintf(v4, "torchOn: ts=0x%016llX\n", *(void *)(v16 + 468)), (uint64_t v16 = *v6) != 0))
          {
            uint64_t v17 = *(void *)(v16 + 476);
            if (v17) {
              fprintf(v4, "torchOff: ts=0x%016llX\n", v17);
            }
          }
        }
        if ((v82 & 2) != 0)
        {
          uint64_t v18 = v6[50];
          if (v18)
          {
            fprintf(v4, "accel_std: %f\n", *(float *)(v18 + 4));
            fprintf(v4, "max_accel: %f\n", *(float *)(v6[50] + 8));
            fprintf(v4, "min_accel: %f\n", *(float *)(v6[50] + 12));
            fprintf(v4, "gyro_std: %f\n", *(float *)(v6[50] + 16));
            fprintf(v4, "max_gyro: %f\n", *(float *)(v6[50] + 20));
            fprintf(v4, "min_gyro: %f\n", *(float *)(v6[50] + 24));
          }
        }
        if (v82)
        {
          uint64_t v19 = v6[52];
          if (v19)
          {
            fprintf(v4, "xy_std: %f\n", *(float *)(v19 + 4));
            fprintf(v4, "max_xy: %f\n", *(float *)(v6[52] + 16));
            fprintf(v4, "min_xy: %f\n", *(float *)(v6[52] + 20));
          }
        }
        if ((v82 & 0x80) != 0)
        {
          uint64_t v20 = v6[51];
          if (v20)
          {
            fprintf(v4, "ze_std: %f\n", *(float *)(v20 + 4));
            fprintf(v4, "max_ze: %f\n", *(float *)(v6[51] + 8));
            fprintf(v4, "min_ze: %f\n", *(float *)(v6[51] + 12));
            fprintf(v4, "ze_ss_error: %f\n", *(float *)(v6[51] + 16));
            fprintf(v4, "ze_avg: %f\n", *(float *)(v6[51] + 24));
            fprintf(v4, "w_avg: %f\n", *(float *)(v6[51] + 28));
            fprintf(v4, "e_avg: %f\n", *(float *)(v6[51] + 32));
          }
        }
        if (v82)
        {
          uint64_t v21 = v6[13];
          if (*(_WORD *)(v21 + 2))
          {
            unint64_t v22 = 0;
            uint64_t v23 = 84;
            do
            {
              long long v24 = (unsigned __int16 *)(v21 + v23);
              fprintf(v4, "oisSample: ts=0x%016llX  Xt=%-10.5f  Yt=%-10.5f  H1=%-5d  H2=%-5d  B1=%-5d  B2=%-5d  Xe=%-10.5f  Ye=%-10.5f  temp=%-5d\n           H1_bz_corr=%-10.5f  H2_bz_corr=%-10.5f  H1_to_um_X=%-10.5f  H1_to_um_Y=%-10.5f  H2_to_um_X=%-10.5f  H2_to_um_Y=%-10.5f  B1_to_um_X=%-10.5f\n           B1_to_um_Y=%-10.5f  B2_to_um_X=%-10.5f  B2_to_um_Y=%-10.5f  power=0x%04X\n", *(void *)(v21 + v23 - 76), (double)*(int *)(v21 + v23 - 68) * 0.00390625, (double)*((int *)v24 - 16) * 0.00390625, (__int16)*(v24 - 30), (__int16)*(v24 - 29), (__int16)*(v24 - 28), (__int16)*(v24 - 27), (double)*((int *)v24 - 13) * 0.00390625, (double)*((int *)v24 - 12) * 0.00390625, *(v24 - 22), (double)*((int *)v24 - 10) * 0.00390625, (double)*((int *)v24 - 9) * 0.00390625, (double)*((int *)v24 - 8) * 0.00390625,
                (double)*((int *)v24 - 7) * 0.00390625,
                (double)*((int *)v24 - 6) * 0.00390625,
                (double)*((int *)v24 - 5) * 0.00390625,
                (double)*((int *)v24 - 4) * 0.00390625,
                (double)*((int *)v24 - 3) * 0.00390625,
                (double)*((int *)v24 - 2) * 0.00390625,
                (double)*((int *)v24 - 1) * 0.00390625,
                *v24);
              ++v22;
              uint64_t v21 = v6[13];
              v23 += 88;
            }
            while (v22 < *(unsigned __int16 *)(v21 + 2));
          }
        }
        int v25 = v82 & 0x80;
        if ((v82 & 2) != 0)
        {
          uint64_t v26 = v6[13];
          if (*(_WORD *)(v26 + 4))
          {
            unint64_t v27 = 0;
            uint64_t v28 = 44984;
            do
            {
              long long v29 = (int *)(v26 + v28);
              fprintf(v4, "motionSample: Tisp=0x%016llX  Tmot=0x%016llX  type=%-5d  convergence=%-5d  Wq=%-10.7f  Xq=%-10.7f  Yq=%-10.7f  Zq=%-10.7f  Wp=%-10.7f  Xp=%-10.7f  Yp=%-10.7f  Zp=%-10.7f  Xg=%-10.7f  Yg=%-10.7f  Zg=%-10.7f AccelX=%-10.7f AccelY=%-10.7f AccelZ=%-10.7f\n              gyroBiasEst=%.3f RotationRateY=%.3f RotationRateP=%.3f RotationRateR=%.3f\n", *((void *)v29 - 12), *((void *)v29 - 11), *((unsigned __int16 *)v29 - 40), *((unsigned __int16 *)v29 - 37), (double)*(v29 - 18) * 9.31322575e-10, (double)*(v29 - 17) * 9.31322575e-10, (double)*(v29 - 16) * 9.31322575e-10, (double)*(v29 - 15) * 9.31322575e-10, (double)*(v29 - 11) * 9.31322575e-10, (double)*(v29 - 10) * 9.31322575e-10, (double)*(v29 - 9) * 9.31322575e-10, (double)*(v29 - 8) * 9.31322575e-10, (double)*(v29 - 14) * 0.0000152587891, (double)*(v29 - 13) * 0.0000152587891,
                (double)*(v29 - 12) * 0.0000152587891,
                (double)*(v29 - 7) * 0.0000152587891,
                (double)*(v29 - 6) * 0.0000152587891,
                (double)*(v29 - 5) * 0.0000152587891,
                (double)*(v29 - 3) * 0.0000152587891,
                (double)*(v29 - 2) * 0.0000152587891,
                (double)*(v29 - 1) * 0.0000152587891,
                (double)*v29 * 0.0000152587891);
              ++v27;
              uint64_t v26 = v6[13];
              v28 += 100;
            }
            while (v27 < *(unsigned __int16 *)(v26 + 4));
          }
        }
      }
      else
      {
        fwrite("OIS meta-data section not found in frame meta-data.\n", 0x34uLL, 1uLL, v4);
        int v25 = v82 & 0x80;
      }
      if (v25)
      {
        long long v30 = (unsigned __int16 *)v6[25];
        if (v30)
        {
          fprintf(v4, "apsMetaVersion: %d\n", *v30);
          fprintf(v4, "apsSampleCount: %d\n", *(unsigned __int16 *)(v6[25] + 2));
          fprintf(v4, "startupCalStatus: %d\n", *(_DWORD *)(v6[25] + 77524));
          uint64_t v31 = v6[25];
          if (*(_WORD *)(v31 + 2))
          {
            unint64_t v32 = 0;
            uint64_t v33 = 152;
            do
            {
              uint64_t v34 = v31 + v33;
              int v67 = *(unsigned __int8 *)(v31 + v33 - 13);
              int v68 = *(_DWORD *)(v31 + v33);
              int v65 = *(unsigned __int8 *)(v31 + v33 - 14);
              int v66 = *(_DWORD *)(v31 + v33 - 4);
              int v63 = *(unsigned __int8 *)(v31 + v33 - 15);
              int v64 = *(_DWORD *)(v31 + v33 - 8);
              int v62 = *(unsigned __int8 *)(v31 + v33 - 16);
              int v60 = *(unsigned __int8 *)(v31 + v33 - 19);
              int v61 = *(unsigned __int16 *)(v31 + v33 - 18);
              int v59 = *(unsigned __int8 *)(v31 + v33 - 20);
              double v57 = (double)*(int *)(v31 + v33 - 28) * 0.00390625;
              double v58 = (double)*(int *)(v31 + v33 - 24) * 0.00390625;
              fprintf(v4, "apsSample: ts=0x%016llX  Zt=%-10.4f  Ze=%-10.4f  aps_w=%-5d  aps_e=%-5d  apsTemperature=%-10.4f lensTemperature=%-10.4f dieTemperature=%-10.4f\n           aps_sp_pos_corr=%-10.4f  aps_sp_cur_corr=%-10.4f  Zcmd=%-10.4f  Zcmd_clamped=%-10.4f  Bz=%-5d  do=%-10.4f  di=%-10.7f  Ze_lin=%-10.4f  Ze_gcol=%-10.4f g=%-10.4f\n           aps_sp=%-10.4f aps_tc=%-10.4f  aps_tc_final=%-10.4f  aps_offset_est=%-10.4f  aps_self_afInt_corr=%-10.4f  aps_cross_afInt_corr=%-10.4f  Zt_clamped=%-10.4f  estZ_APS_Corr=%-10.4f aps_startup_offset_est=%-10.4f\n           oisz_s1=%-5d  oisz_s2=%-5d  oisz_delta=%-5d  oisz_pos_corr=%-10.4f  oisz_temp_corr=%-10.4f  oisz_zest=%-10.4f\n           oisz_gcol = %.2f  degradedAF = %d  eflTrackingMode = %d  power=0x%04X\n           dbg_key_0=%u dbg_val_0=%d dbg_key_1=%u dbg_val_1=%d dbg_key_2=%u dbg_val_2=%d dbg_key_3=%u dbg_val_3=%d\n", *(void *)(v31 + v33 - 148), (double)*(int *)(v34 - 140) * 0.00390625, (double)*(int *)(v34 - 136) * 0.00390625, *(__int16 *)(v34 - 132), *(__int16 *)(v34 - 130), (double)*(__int16 *)(v34 - 128) * 0.00390625, (double)*(__int16 *)(v34 - 126) * 0.00390625,
                (double)*(__int16 *)(v34 - 124) * 0.00390625,
                (double)*(int *)(v34 - 120) * 0.00390625,
                (double)*(int *)(v34 - 116) * 0.00390625,
                (double)*(int *)(v34 - 112) * 0.00390625,
                (double)*(int *)(v34 - 108) * 0.00390625,
                *(__int16 *)(v34 - 104),
                (double)*(int *)(v34 - 100) * 0.00390625,
                (double)*(int *)(v34 - 96) * 0.0000152587891,
                (double)*(int *)(v34 - 92) * 0.00390625,
                (double)*(int *)(v34 - 88) * 0.00390625,
                (double)*(int *)(v34 - 84) * 0.00390625,
                (double)*(int *)(v34 - 80) * 0.00390625,
                (double)*(int *)(v34 - 76) * 0.00390625,
                (double)*(int *)(v34 - 72) * 0.00390625,
                (double)*(int *)(v34 - 68) * 0.00390625,
                (double)*(int *)(v34 - 64) * 0.00390625,
                (double)*(int *)(v34 - 60) * 0.00390625,
                (double)*(int *)(v34 - 56) * 0.00390625,
                (double)*(int *)(v34 - 52) * 0.00390625,
                (double)*(int *)(v34 - 48) * 0.00390625,
                *(__int16 *)(v34 - 44),
                *(__int16 *)(v34 - 42),
                *(__int16 *)(v34 - 40),
                (double)*(int *)(v34 - 36) * 0.00390625,
                (double)*(int *)(v34 - 32) * 0.00390625,
                v57,
                v58,
                v59,
                v60,
                v61,
                v62,
                *(_DWORD *)(v34 - 12),
                v63,
                v64,
                v65,
                v66,
                v67,
                v68);
              ++v32;
              uint64_t v31 = v6[25];
              v33 += 152;
            }
            while (v32 < *(unsigned __int16 *)(v31 + 2));
          }
        }
        else
        {
          fwrite("APS meta-data section not found in frame meta-data.\n", 0x34uLL, 1uLL, v4);
        }
      }
      if ((v82 & 0x200) != 0 && v6[3])
      {
        fwrite("autofocus: afScores=", 0x14uLL, 1uLL, v4);
        for (uint64_t i = 28; i != 156; i += 8)
          fprintf(v4, " %llu ", *(void *)(v6[3] + i));
        fputc(10, v4);
        fprintf(v4, "autofocus: AFStatsUpdated=%u focusingMethod=%u afFocusMoving=%u \n", *(unsigned __int16 *)(v6[3] + 2722), *(_DWORD *)(v6[3] + 2736), *(unsigned __int16 *)(v6[3] + 424));
      }
      long long v36 = (unsigned __int16 *)v6[55];
      if (v36)
      {
        BOOL v10 = *v36 == 0;
        long long v37 = "on";
        if (v10) {
          long long v37 = "off";
        }
        fprintf(v4, "IsSIFROn: %s\n", v37);
      }
      else
      {
        fwrite("SIFR meta-data section not found in frame meta-data.\n", 0x35uLL, 1uLL, v4);
      }
      if ((v82 & 0x800) != 0)
      {
        uint64_t v38 = v6[59];
        if (v38)
        {
          uint64_t v39 = *(void *)(v38 + 4);
          int v40 = *(unsigned __int8 *)(v38 + 44);
          float v41 = *(float *)(v38 + 32);
          double v81 = *(float *)(v38 + 36);
          double v42 = *(float *)(v38 + 40);
          float v43 = *(float *)(v38 + 28);
          double v44 = *(float *)(v38 + 24);
          double v45 = *(float *)(v38 + 16);
          double v46 = *(float *)(v38 + 20);
          double v47 = *(float *)(v38 + 68);
          double v48 = *(float *)(v38 + 72);
          double v49 = *(float *)(v38 + 76);
          int v50 = *(unsigned __int8 *)(v38 + 89);
          int v80 = *(unsigned __int8 *)(v38 + 88);
          int v79 = *(unsigned __int8 *)(v38 + 45);
          int v78 = *(unsigned __int8 *)(v38 + 13);
          int v77 = *(unsigned __int8 *)(v38 + 12);
          int v76 = *(unsigned __int8 *)(v38 + 1);
          double v51 = *(float *)(v38 + 84);
          double v52 = *(float *)(v38 + 104);
          double v53 = *(float *)(v38 + 108);
          int v75 = *(__int16 *)(v38 + 46);
          int v74 = *(__int16 *)(v38 + 52);
          int v73 = *(unsigned __int8 *)(v38 + 64);
          int v72 = *(unsigned __int8 *)(v38 + 100);
          int v71 = *(unsigned __int8 *)(v38 + 102);
          int v70 = *(__int16 *)(v38 + 120);
          int v69 = *(__int16 *)(v38 + 122);
          fprintf(v4, "AFASample: ts=0x%016llX  pdaf=%-5d  defocus=%-10.2f  cbafSNR=%-10.2f  depth=%-10.2f  zTgtLogical=%-10.2f  zTgtUm=%-10.2f  PFLErr=%-10.2f  PFLErrTmp= %-10.2f  PFLCorr=%-10.2f  converged=%-5d  lowError=%-5d  SplitPDEnable=%-5d depthConfidence=%-5d widowDetected=%-5d dataValid=%-5d zTargetUm=%-10.2f blobCorrection=%-10.2f fdrCorrection=%-10.2f Depth_LFAF=%.2f  zTgtLogical_LFAF=%.2f  zTgtUm_LFAF=%.2f  pdafFocusPos=%d  pdafFocusPosTarget=%.2f  zTgtDAC=%d  defocusScaling = %2f  defocusOffset = %.2f\n           tofFrameRate = %f  focusROIType=%d apeBeforeTrainingStatus=%d apeDuringTrainingStatus=%d apeTrainingOngoing=%d offsetDeltaEst=%.2f tempcoDeltaEst=%.2f\n            instantLFAFEnabled=%d PFLErrorUm_LFAF=%.2f leaderDefocusDAC=%d leaderPositionDAC=%d leaderROIType=%d leaderPDAFEnabled=%d leaderSPDEnabled=%d leaderAPEConverged=%d\n           apeFC_xsum=%.2f apeFC_ysum=%.2f apeFC_xxsum=%.2f  apeFC_xysum=%.2f  apeFC_yysum=%.2f   apeFC_zsum=%.2f  apeFC_xzsum=%.2f apeFC_yzsum=%.2f apeFC_nsamplesQuad1=%d  apeFC_nsamplesQuad2=%d  apeFC_nsamplesQuad3=%d  apeFC_nsamplesQuad4=%d  apeFC_nsamples=%d\n           masterPreviewCh=%d  recommendedCh=%d  depthInfoUsed=%d  wideFocusDist=%.2f  wideDepth=%.2f  wideDepthValid=%d  wideFocusMethod=%d  wideFocusValid=%d  teleFocusDist=%.2f  teleDepth=%.2f  teleDepthValid=%d  teleFocusMethod=%d  teleFocusValid=%d  swideFocusDist=%.2f  swideDepth=%.2f  swideDepthValid=%d  swideFocusMethod=%d  swideFocusValid=%d  minFocusDistance=%.2f\n", v39, v40,
            v81,
            v42,
            v44,
            v45,
            v46,
            v47,
            v48,
            v49,
            v50,
            v80,
            v79,
            v78,
            v77,
            v76,
            v41,
            *(float *)(v38 + 80),
            v51,
            v52,
            v53,
            *(float *)(v38 + 112),
            v75,
            *(float *)(v38 + 48),
            v74,
            *(float *)(v38 + 56),
            *(float *)(v38 + 60),
            v43,
            v73,
            *(_DWORD *)(v38 + 92),
            *(_DWORD *)(v38 + 96),
            v72,
            *(float *)(v38 + 128),
            *(float *)(v38 + 132),
            v71,
            *(float *)(v38 + 116),
            v70,
            v69,
            *(unsigned __int8 *)(v38 + 124),
            *(unsigned __int8 *)(v38 + 125),
            *(unsigned __int8 *)(v38 + 126),
            *(unsigned __int8 *)(v38 + 127),
            *(double *)(v38 + 136),
            *(double *)(v38 + 144),
            *(double *)(v38 + 152),
            *(double *)(v38 + 160),
            *(double *)(v38 + 168),
            *(double *)(v38 + 176),
            *(double *)(v38 + 184),
            *(double *)(v38 + 192),
            *(_DWORD *)(v38 + 200),
            *(_DWORD *)(v38 + 204),
            *(_DWORD *)(v38 + 208),
            *(_DWORD *)(v38 + 212),
            *(_DWORD *)(v38 + 216),
            *(unsigned __int8 *)(v38 + 220),
            *(unsigned __int8 *)(v38 + 221),
            *(unsigned __int8 *)(v38 + 222),
            *(float *)(v38 + 224),
            *(float *)(v38 + 228),
            *(unsigned __int8 *)(v38 + 232),
            *(unsigned __int8 *)(v38 + 233),
            *(unsigned __int8 *)(v38 + 234),
            *(float *)(v38 + 236),
            *(float *)(v38 + 240),
            *(unsigned __int8 *)(v38 + 244),
            *(unsigned __int8 *)(v38 + 245),
            *(unsigned __int8 *)(v38 + 246),
            *(float *)(v38 + 248),
            *(float *)(v38 + 252),
            *(unsigned __int8 *)(v38 + 256),
            *(unsigned __int8 *)(v38 + 257),
            *(unsigned __int8 *)(v38 + 258),
            (float)((float)*(int *)(v38 + 260) * 0.0039062));
          if ((v82 & 0x1000) == 0) {
            goto LABEL_82;
          }
LABEL_74:
          if (v6[62])
          {
            fwrite("hist_ch0: ", 0xAuLL, 1uLL, v4);
            for (uint64_t j = 0; j != 1024; j += 4)
              fprintf(v4, " %llu", *(unsigned int *)(v6[62] + j));
            fputc(10, v4);
            fwrite("hist_ch1: ", 0xAuLL, 1uLL, v4);
            do
            {
              fprintf(v4, " %llu", *(unsigned int *)(v6[62] + j));
              j += 4;
            }
            while (j != 2048);
            fputc(10, v4);
            fwrite("hist_ch2: ", 0xAuLL, 1uLL, v4);
            do
            {
              fprintf(v4, " %llu", *(unsigned int *)(v6[62] + j));
              j += 4;
            }
            while (j != 3072);
            fputc(10, v4);
          }
          goto LABEL_82;
        }
      }
      fwrite("AFAssist Debug meta-data section not found in frame meta-data.\n", 0x3FuLL, 1uLL, v4);
      if ((v82 & 0x1000) != 0) {
        goto LABEL_74;
      }
    }
    else
    {
      fwrite("frame: Dropped\n", 0xFuLL, 1uLL, v4);
    }
LABEL_82:
    fflush(v4);
    double v55 = *(H16ISP::H16ISPFrameMetadata **)(v3 + 16);
    if (v55)
    {
      H16ISP::H16ISPFrameMetadata::~H16ISPFrameMetadata(v55);
      MEMORY[0x24C53D6E0]();
    }
    free((void *)v3);
    goto LABEL_85;
  }
LABEL_86:

  return pthread_mutex_unlock(&metadataFileWriterQueueMutex);
}

void std::deque<MotionMetadataContext *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<__CVBuffer **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<__CVBuffer **>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24691C8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(H16ISP::H16ISPFilterGraphNode *this)
{
  *(void *)this = &unk_26FAEC5B0;
  H16ISP::H16ISPFilterGraphNode::Deactivate(this);
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)this + 3);
}

{
  uint64_t vars8;

  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPFilterGraphNode::Deactivate(H16ISP::H16ISPFilterGraphNode *this)
{
  kdebug_trace();
  if (*((unsigned char *)this + 16))
  {
    *((unsigned char *)this + 16) = 0;
    unint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = ___ZN6H16ISP21H16ISPFilterGraphNode10DeactivateEv_block_invoke;
      block[3] = &__block_descriptor_tmp_2_1;
      block[4] = this;
      dispatch_sync(v2, block);
      BOOL v3 = *((void *)this + 1);
      if (v3)
      {
        dispatch_release(v3);
        *((void *)this + 1) = 0;
      }
    }
  }
  kdebug_trace();
  return 0;
}

uint64_t ___ZN6H16ISP21H16ISPFilterGraphNode10DeactivateEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))();
}

__n128 H16ISP::H16ISPFilterGraphNode::RemoveFrame(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 20);
  if (v3)
  {
    unint64_t v4 = (__n128 *)(a2 + 24);
    uint64_t v5 = *(unsigned int *)(a2 + 20);
    while (v4->n128_u32[2] != a3)
    {
      ++v4;
      if (!--v5) {
        return result;
      }
    }
    unsigned int v6 = v3 - 1;
    *(_DWORD *)(a2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v6;
    if (v5 != 1)
    {
      __n128 result = *(__n128 *)(a2 + 16 * v6 + 24);
      __n128 *v4 = result;
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPFilterGraphNode::AddFrame(int a1, uint64_t a2, int a3, int a4, CVPixelBufferRef texture)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  if (v5)
  {
    uint64_t result = 3758097084;
    if (v5 != 16)
    {
      uint64_t v7 = (int *)(a2 + 32);
      uint64_t v8 = *(unsigned int *)(a2 + 20);
      while (1)
      {
        int v9 = *v7;
        v7 += 4;
        if (v9 == a3) {
          break;
        }
        if (!--v8) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v10 = a2 + 16 * v5;
    *(void *)(v10 + Matrix<double>::~Matrix((uint64_t)this + 24) = texture;
    *(_DWORD *)(v10 + 32) = a3;
    *(_DWORD *)(v10 + 36) = a4;
    *(_DWORD *)(a2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5 + 1;
    CVPixelBufferRetain(texture);
    return 0;
  }
  return result;
}

uint64_t H16ISP::H16ISPParallelDispatchNode::onActivate(H16ISP::H16ISPParallelDispatchNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPParallelDispatchNode::onDeactivate(H16ISP::H16ISPParallelDispatchNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPParallelDispatchNode::onMessageProcessing(H16ISP::H16ISPParallelDispatchNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  unint64_t v4 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  uint64_t v5 = (char *)a2 + 1016;
  unsigned int v6 = (uint64_t *)*((void *)a2 + 128);
  if (v6 == (uint64_t *)((char *)a2 + 1016))
  {
LABEL_4:
    uint64_t v8 = (char *)this + 80;
    for (uint64_t i = *((void *)this + 11); (char *)i != v8; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v10 = operator new(0x18uLL);
      v10[1] = v5;
      v10[2] = this;
      uint64_t v11 = *((void *)a2 + 127);
      *uint64_t v10 = v11;
      *(void *)(v11 + 8) = v10;
      *((void *)a2 + 127) = v10;
      ++*((void *)a2 + 129);
    }
    uint64_t v12 = 3758097130;
    pthread_mutex_unlock(v4);
    for (uint64_t j = *((void *)this + 11); (char *)j != v8; uint64_t j = *(void *)(j + 8))
      (*(void (**)(void, H16ISP::H16ISPFilterGraphMessage *))(**(void **)(j + 16) + 32))(*(void *)(j + 16), a2);
  }
  else
  {
    while (1)
    {
      uint64_t v7 = (char *)v6[1];
      if ((H16ISP::H16ISPParallelDispatchNode *)v6[2] == this) {
        break;
      }
      unsigned int v6 = (uint64_t *)v6[1];
      if (v7 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v14 = *v6;
    *(void *)(v14 + 8) = v7;
    *(void *)v6[1] = v14;
    --*((void *)a2 + 129);
    operator delete(v6);
    uint64_t v15 = *((void *)a2 + 128);
    if ((char *)v15 == v5)
    {
LABEL_14:
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = 3758097130;
      while (*(H16ISP::H16ISPParallelDispatchNode **)(v15 + 16) != this)
      {
        uint64_t v15 = *(void *)(v15 + 8);
        if ((char *)v15 == v5) {
          goto LABEL_14;
        }
      }
    }
    pthread_mutex_unlock(v4);
  }
  return v12;
}

uint64_t H16ISP::H16ISPParallelDispatchNode::AddExecutionNode(H16ISP::H16ISPParallelDispatchNode *this, H16ISP::H16ISPFilterGraphNode *a2)
{
  unint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *((void *)this + 10);
  v4[1] = (char *)this + 80;
  v4[2] = a2;
  void *v4 = v5;
  *(void *)(v5 + 8) = v4;
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4;
  ++*((void *)this + 12);
  uint64_t v7 = this;
  std::deque<H16ISP::H16ISPFilterGraphNode *>::push_back((void *)a2 + 3, &v7);
  return 0;
}

double H16ISP::H16ISPParallelDispatchNode::H16ISPParallelDispatchNode(H16ISP::H16ISPParallelDispatchNode *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + Matrix<double>::~Matrix((uint64_t)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + Matrix<double>::~Matrix((uint64_t)this + 56) = 0u;
  *((unsigned char *)this + 16) = 0;
  *(void *)this = &unk_26FAEC610;
  *((void *)this + 1) = 0;
  *((void *)this + 9) = 0xA00000000;
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (char *)this + 80;
  *((void *)this + 11) = (char *)this + 80;
  *((void *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + Matrix<double>::~Matrix((uint64_t)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + Matrix<double>::~Matrix((uint64_t)this + 56) = 0u;
  *((unsigned char *)this + 16) = 0;
  *(void *)this = &unk_26FAEC610;
  *((void *)this + 1) = 0;
  *((void *)this + 9) = 0xA00000000;
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (char *)this + 80;
  *((void *)this + 11) = (char *)this + 80;
  *((void *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  return result;
}

void H16ISP::H16ISPParallelDispatchNode::~H16ISPParallelDispatchNode(H16ISP::H16ISPParallelDispatchNode *this)
{
  *(void *)this = &unk_26FAEC610;
  std::__list_imp<H16ISP::H16ISPFilterGraphNode *>::clear((void *)this + 10);

  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26FAEC610;
  std::__list_imp<H16ISP::H16ISPFilterGraphNode *>::clear((void *)this + 10);

  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26FAEC610;
  std::__list_imp<H16ISP::H16ISPFilterGraphNode *>::clear((void *)this + 10);
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode(uint64_t a1, int a2, H16ISP::H16ISPDevice *this, int a4, int a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0u;
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a2;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26FAEC670;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = this;
  *(_DWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 88) = a4;
  *(_DWORD *)(a1 + 92) = a5;
  if (H16ISP::H16ISPDevice::enabledExclaveDebug(this))
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315906;
      uint64_t v12 = "H16ISPExclaveGraphNode";
      __int16 v13 = 1024;
      int v14 = a4;
      __int16 v15 = 1024;
      int v16 = a2;
      __int16 v17 = 1024;
      int v18 = a5;
      _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "%s - creating graph node channel=%u type=%d ektype=%d\n", (uint8_t *)&v11, 0x1Eu);
    }
  }
  return a1;
}

void sub_24691D084(_Unwind_Exception *a1)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(v1);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPExclaveGraphNode::Verbose(H16ISP::H16ISPDevice **this)
{
  return H16ISP::H16ISPDevice::enabledExclaveDebug(this[10]);
}

uint64_t H16ISP::H16ISPExclaveGraphNode::ConclaveClient(H16ISP::H16ISPExclaveGraphNode *this)
{
  return *(void *)(*((void *)this + 10) + 48 * *((int *)this + 23) + 136);
}

uint64_t H16ISP::H16ISPExclaveGraphNode::ISPDevice(H16ISP::H16ISPExclaveGraphNode *this)
{
  return *((void *)this + 10);
}

uint64_t H16ISP::H16ISPExclaveGraphNode::Channel(H16ISP::H16ISPExclaveGraphNode *this)
{
  return *((unsigned int *)this + 22);
}

void H16ISP::H16ISPExclaveGraphNode::GetModuleParams(H16ISP::H16ISPDevice **this@<X0>, H16ISPModuleParams *a2@<X8>)
{
  unint64_t v2 = (int *)(this + 11);
  if (H16ISP::H16ISPDevice::ISP_GetModuleParams(this[10], *((_DWORD *)this + 22), a2))
  {
    int v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v3 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v3;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPExclaveGraphNode::GetModuleParams(v2, v3);
    }
  }
}

void H16ISP::H16ISPExclaveGraphNode::~H16ISPExclaveGraphNode(H16ISP::H16ISPExclaveGraphNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

void GMC_RansacFitFundMatrix(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  Matrix<double>::Matrix((uint64_t)v20, 3, *(_DWORD *)(a1 + 20));
  v20[0] = &unk_26FAEB100;
  Matrix<double>::Matrix((uint64_t)v19, 3, *(_DWORD *)(a2 + 20));
  uint64_t v18 = 0;
  v19[0] = &unk_26FAEB100;
  memset(v17, 0, sizeof(v17));
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  Algo::Normalize2DPts(a1, (uint64_t)v20, (uint64_t)v17);
  Algo::Normalize2DPts(a2, (uint64_t)v19, (uint64_t)v15);
  Matrix<unsigned int>::Matrix((uint64_t)&v14, 1, *(_DWORD *)(a1 + 20));
  int v14 = &unk_26FAEC6F8;
  int v13 = 0;
  if ((a4 & 1) == 0)
  {
    int v9 = *(_DWORD *)(a5 + 20) * *(_DWORD *)(a5 + 16);
    if (v9 >= 1)
    {
      uint64_t v10 = *(void **)(a5 + 8);
      unint64_t v11 = (unint64_t)v10 + v9;
      if (v11 <= (unint64_t)v10 + 1) {
        unint64_t v11 = (unint64_t)v10 + 1;
      }
      memset(v10, 1, v11 - (void)v10);
    }
  }
  Matrix<BOOL>::Matrix((uint64_t)v12, a5, 0, -1);
}

void sub_24691D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  Matrix<double>::~Matrix((uint64_t)&a49);
  Matrix<unsigned int>::~Matrix((uint64_t)&a53);
  Matrix<unsigned int>::~Matrix((uint64_t)&a62);
  Matrix<unsigned int>::~Matrix((uint64_t)&a71);
  Matrix<double>::~Matrix(v71 - 168);
  Matrix<double>::~Matrix(v71 - 136);
  _Unwind_Resume(a1);
}

uint64_t CopyFirstNCols<MatrixNxPts<3u,double>>(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = *(_DWORD *)(result + 20);
    do
    {
      if (a3)
      {
        for (unint64_t i = 0;
              i != a3;
              *(void *)(*(void *)(a4 + 8) + 8 * (v5 * v9) + 8 * i++) = *(void *)(*(void *)(result + 8) + 8 * v8 + 8 * v6 * v5))
        {
          uint64_t v8 = *(unsigned int *)(*(void *)(a2 + 8) + 4 * i);
          if (v8 >= v6) {
            MatrixNxPts<3u,double>::CloneColumn();
          }
          if (v5 < *(unsigned int *)(a4 + 16))
          {
            unint64_t v9 = *(unsigned int *)(a4 + 20);
            if (i < v9) {
              continue;
            }
          }
          GMC_Homography();
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t CopyFirstNCols<MatrixNxPts<1u,BOOL>>(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = *(_DWORD *)(result + 20);
    do
    {
      if (a3)
      {
        for (unint64_t i = 0;
              i != a3;
              *(unsigned char *)(*(void *)(a4 + 8) + (v5 * v9) + i++) = *(unsigned char *)(*(void *)(result + 8)
                                                                                         + v8
                                                                                         + v6 * v5))
        {
          uint64_t v8 = *(unsigned int *)(*(void *)(a2 + 8) + 4 * i);
          if (v8 >= v6) {
            MatrixNxPts<3u,double>::CloneColumn();
          }
          if (v5 < *(unsigned int *)(a4 + 16))
          {
            unint64_t v9 = *(unsigned int *)(a4 + 20);
            if (i < v9) {
              continue;
            }
          }
          GMC_Homography();
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t CopyFirstNCols<MatrixNxPts<1u,unsigned int>>(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(result + 16);
  if (v4)
  {
    for (unsigned int i = 0; i < v4; ++i)
    {
      if (a3)
      {
        for (unint64_t j = 0;
              j != a3;
              *(_DWORD *)(*(void *)(a4 + 8) + 4 * i * v9 + 4 * j++) = *(_DWORD *)(*(void *)(result + 8)
                                                                                                  + 4 * v7
                                                                                                  + 4 * v8 * i))
        {
          if (i >= *(_DWORD *)(result + 16)
            || (uint64_t v7 = *(unsigned int *)(*(void *)(a2 + 8) + 4 * j),
                unsigned int v8 = *(_DWORD *)(result + 20),
                v7 >= v8))
          {
            MatrixNxPts<3u,double>::CloneColumn();
          }
          if (*(_DWORD *)(a4 + 16) > i)
          {
            unint64_t v9 = *(unsigned int *)(a4 + 20);
            if (j < v9) {
              continue;
            }
          }
          GMC_Homography();
        }
        unsigned int v4 = *(_DWORD *)(result + 16);
      }
    }
  }
  return result;
}

uint64_t MatrixNxPts<3u,double>::CopyCols(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 20);
  uint64_t v4 = *(unsigned int *)(a3 + 20);
  if (v3 >= v4)
  {
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = *(unsigned int *)(a2 + 16);
    do
    {
      if (v4)
      {
        if (v6 < v7)
        {
          uint64_t v8 = 0;
          unsigned int v9 = *(_DWORD *)(a2 + 20);
          while (1)
          {
            uint64_t v10 = *(unsigned int *)(*(void *)(a3 + 8) + 4 * v8);
            if (v10 >= v9) {
              break;
            }
            if (v6 >= *(unsigned int *)(result + 16)) {
              GMC_Homography();
            }
            *(void *)(*(void *)(result + 8) + 8 * v5 + 8 * v8++) = *(void *)(*(void *)(a2 + 8)
                                                                                   + 8 * v10
                                                                                   + 8 * v9 * v6);
            if (v4 == v8) {
              goto LABEL_9;
            }
          }
        }
        MatrixNxPts<3u,double>::CloneColumn();
      }
LABEL_9:
      ++v6;
      v5 += v3;
    }
    while (v6 != 3);
  }
  return result;
}

void MatrixNxPts<1u,unsigned int>::~MatrixNxPts(uint64_t a1)
{
  Matrix<unsigned int>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

void Matrix<BOOL>::Matrix(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_26FAEAFB0;
  int v4 = *(_DWORD *)(a2 + 20);
  int v5 = *(_DWORD *)(a2 + 16) - a3;
  if (a4 != -1) {
    int v5 = a4;
  }
  uint64_t v6 = *(void *)(a2 + 8) + (v4 * a3);
  unint64_t v7 = &unk_26FAEAFB0;
  uint64_t v8 = v6;
  int v9 = v5;
  int v10 = v4;
  char v11 = 0;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4;
  operator new[]();
}

void sub_24691DD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MatrixNxPts<1u,BOOL>::~MatrixNxPts(uint64_t a1)
{
  Matrix<BOOL>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

uint64_t Matrix<BOOL>::Matrix(uint64_t result, int a2, int a3)
{
  *(void *)double result = &unk_26FAEAFB0;
  if (a3 * a2) {
    operator new[]();
  }
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a3;
  *(unsigned char *)(result + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  return result;
}

uint64_t GMC_Controller(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = 0;
  double v15 = *(double *)(a5 + 72) / *(double *)(a5 + 80);
  *(double *)(a7 + 96) = v15;
  uint64_t v88 = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  uint64_t v16 = &v84;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      if (v14 == i) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      *((double *)v16 + i) = v18;
    }
    ++v14;
    uint64_t v16 = (long long *)((char *)v16 + 24);
  }
  while (v14 != 3);
  uint64_t v19 = 0;
  *(void *)(a7 + 64) = v88;
  long long v20 = v87;
  *(_OWORD *)(a7 + 32) = v86;
  *(_OWORD *)(a7 + 48) = v20;
  long long v21 = v85;
  *(_OWORD *)a7 = v84;
  *(_OWORD *)(a7 + 16) = v21;
  *(void *)&long long v21 = *(void *)(a5 + 16);
  *(double *)(a8 + Matrix<double>::~Matrix((uint64_t)this + 88) = v15;
  *(void *)(a8 + 96) = v21;
  *(void *)(a8 + 2Matrix<double>::~Matrix((uint64_t)this + 56) = 0;
  *(void *)(a8 + 264) = 0;
  *(void *)(a8 + 248) = 0;
  do
  {
    *(void *)(a8 + v19 + 104) = *(void *)(a7 + v19);
    v19 += 8;
  }
  while (v19 != 72);
  if (GMC_Verbose)
  {
    printf("Num of points: %d\n", *(_DWORD *)(a1 + 20));
    int v22 = GMC_Verbose;
  }
  else
  {
    int v22 = 0;
  }
  unsigned int v23 = *(_DWORD *)(a1 + 20);
  *(double *)(a8 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (double)v23;
  unsigned int v24 = *(_DWORD *)(a5 + 544);
  double v25 = 0.0;
  if (v23 >= v24) {
    double v25 = 1.0;
  }
  *(double *)(a8 + 40pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v25;
  if (v22)
  {
    printf("outStats->tests.isEnoughInPoints = %lf\n", v25);
    unsigned int v23 = *(_DWORD *)(a1 + 20);
    unsigned int v24 = *(_DWORD *)(a5 + 544);
  }
  if (v23 < v24 && a6 == 0) {
    return 4294967294;
  }
  int v27 = *(_DWORD *)(a5 + 520);
  unsigned int v28 = *(_DWORD *)(a5 + 532) + v27;
  if (v28 > v23)
  {
    if (GMC_Verbose)
    {
      printf("Required points: %d+%d, available points: %d. Only these will be used.\n", v27, *(_DWORD *)(a5 + 532), v23);
      unsigned int v28 = *(_DWORD *)(a1 + 20);
    }
    else
    {
      unsigned int v28 = v23;
    }
  }
  Matrix<double>::Matrix((uint64_t)&v80, 2, v28);
  int v80 = &unk_26FAEC0F0;
  Matrix<double>::Matrix((uint64_t)&v76, 2, v28);
  uint64_t v30 = *(unsigned int *)(a1 + 20);
  int v76 = &unk_26FAEC0F0;
  double v31 = (double)v30 / (double)v28;
  if (v31 <= 1.0)
  {
    Matrix<double>::Resize((uint64_t)&v80, *(_DWORD *)(a1 + 16), v30);
    memcpy(v81, *(const void **)(a1 + 8), 8 * v82 * (unint64_t)v83);
    Matrix<double>::Resize((uint64_t)&v76, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
    memcpy(v77, *(const void **)(a2 + 8), 8 * v78 * (unint64_t)v79);
  }
  else if (v28)
  {
    unsigned int v32 = *(_DWORD *)(a1 + 16);
    if (v32)
    {
      unint64_t v33 = 0;
      unsigned int v34 = *(_DWORD *)(a2 + 16);
      uint64_t v35 = *(unsigned int *)(a2 + 20);
      BOOL v38 = v32 >= 2;
      unsigned int v36 = v82;
      unint64_t v37 = v83;
      BOOL v38 = v38 && v82 >= 2;
      char v39 = !v38;
      unsigned int v40 = v78;
      unint64_t v41 = v79;
      BOOL v43 = v34 < 2 || v78 < 2;
      while (1)
      {
        uint64_t v44 = (int)(v31 * (double)v33);
        BOOL v45 = v30 <= v44 || v36 == 0;
        if (v45 || v33 >= v37) {
          break;
        }
        *((void *)v81 + v33) = *(void *)(*(void *)(a1 + 8) + 8 * v44);
        if (v39) {
          break;
        }
        *((void *)v81 + v37 + v33) = *(void *)(*(void *)(a1 + 8) + 8 * v44 + 8 * v30);
        if (!v34) {
          break;
        }
        BOOL v47 = v35 <= v44 || v40 == 0;
        if (v47 || v33 >= v41) {
          break;
        }
        *((void *)v77 + v33) = *(void *)(*(void *)(a2 + 8) + 8 * v44);
        if (v43) {
          break;
        }
        *((void *)v77 + v41 + v33++) = *(void *)(*(void *)(a2 + 8) + 8 * v44 + 8 * v35);
        if (v28 == v33) {
          goto LABEL_61;
        }
      }
    }
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
LABEL_61:
  Matrix<double>::Matrix((uint64_t)v73, 3, v83);
  v73[0] = &unk_26FAEB100;
  Matrix<double>::Matrix((uint64_t)v70, 3, v83);
  v70[0] = &unk_26FAEB100;
  if (GMC_Undistort((uint64_t)&v80, (uint64_t)&v76, a5, (uint64_t)v73, (uint64_t)v70))
  {
    int v59 = 166;
    goto LABEL_89;
  }
  uint64_t v49 = v75;
  if (v75)
  {
    if (v74 >= 3)
    {
      unint64_t v50 = 0;
      unsigned int v51 = v71;
      unint64_t v52 = v72;
      uint64_t v53 = 16 * v72;
      while (1)
      {
        *(void *)(v73[1] + 8 * (2 * v49) + 8 * v5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x3FF0000000000000;
        if (v51 < 3 || v50 >= v52) {
          break;
        }
        *(void *)(v70[1] + v53 + 8 * v50++) = 0x3FF0000000000000;
        if (v49 == v50) {
          goto LABEL_68;
        }
      }
    }
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
LABEL_68:
  if (*(unsigned char *)(a5 + 529) && GMC_Homography((uint64_t)v73, (uint64_t)v70, a5))
  {
    int v59 = 182;
LABEL_89:
    __assert_rtn("GMC_Controller", "GMC_Controller.cpp", v59, "status == 0");
  }
  double v69 = 0.0;
  BOOL v54 = GMC_SpatialCoverageTest((uint64_t)v73, a5, &v69);
  double v55 = v69;
  *(double *)a8 = v69;
  if (GMC_Verbose) {
    printf("GMC_SpatialCoverageTest, coverage: %lf\n", v55);
  }
  *(double *)(a8 + 384) = (double)v54;
  if ((v54 | a6) == 1)
  {
    if (!(*(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16))) {
      __assert_rtn("operator()", "Matrix.hpp", 131, "index < m_rows * m_cols");
    }
    double v56 = **(double **)(a4 + 8);
    *(double *)&unint64_t v68 = -1.0;
    Matrix<BOOL>::Matrix((uint64_t)v67, 1, v75);
    v67[0] = &unk_26FAEC730;
    int v66 = 0;
    if (v56 >= 0.0) {
      Matrix<double>::Matrix((uint64_t)v65, a4, 0, -1);
    }
    double v57 = *(double *)&v68;
    *(double *)(a8 + 16) = *(double *)&v68;
    if (GMC_Verbose) {
      printf("GMC_FaceCoverageTest, coverage: %lf, num points: %d\n", v57, v66);
    }
    *(double *)(a8 + 392) = (double)1u;
    if ((a6 | 1) == 1)
    {
      Matrix<double>::Matrix((uint64_t)v64, 3, *(_DWORD *)(a5 + 532));
      v64[0] = &unk_26FAEB100;
      Matrix<double>::Matrix((uint64_t)v63, 3, *(_DWORD *)(a5 + 532));
      v63[0] = &unk_26FAEB100;
      Matrix<double>::Matrix((uint64_t)v62, 3, v75 - *(_DWORD *)(a5 + 532));
      v62[0] = &unk_26FAEB100;
      Matrix<double>::Matrix((uint64_t)v61, 3, v72 - *(_DWORD *)(a5 + 532));
      v61[0] = &unk_26FAEB100;
      Matrix<BOOL>::Matrix((uint64_t)v60, 1, v75 - *(_DWORD *)(a5 + 532));
      v60[0] = &unk_26FAEC730;
      if (!GMC_ExtractTestSamples((uint64_t)v73, (uint64_t)v70, *(_DWORD *)(a5 + 532), v56 >= 0.0, (uint64_t)v67, (uint64_t)v62, (uint64_t)v61, (uint64_t)v64, (uint64_t)v63, (uint64_t)v60))calcProjectionDists((uint64_t)v64, (uint64_t)v63, (long long *)a5); {
      __assert_rtn("GMC_Controller", "GMC_Controller.cpp", 250, "status == 0");
      }
    }
    uint64_t v29 = 4294967284;
    Matrix<BOOL>::~Matrix((uint64_t)v67);
  }
  else
  {
    uint64_t v29 = 0xFFFFFFFFLL;
  }
  Matrix<double>::~Matrix((uint64_t)v70);
  Matrix<double>::~Matrix((uint64_t)v73);
  Matrix<double>::~Matrix((uint64_t)&v76);
  Matrix<double>::~Matrix((uint64_t)&v80);
  return v29;
}

void sub_24691F898(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix((uint64_t)&STACK[0x340]);
  Matrix<unsigned int>::~Matrix((uint64_t)&STACK[0x360]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x380]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x3A0]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x3C0]);
  Matrix<unsigned int>::~Matrix((uint64_t)&STACK[0x440]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x460]);
  Matrix<BOOL>::~Matrix((uint64_t)&STACK[0x4A8]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x4C8]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x4E8]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x508]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x528]);
  Matrix<BOOL>::~Matrix((uint64_t)&STACK[0x570]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x5A0]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x5C0]);
  Matrix<double>::~Matrix(v1 - 256);
  Matrix<double>::~Matrix(v1 - 224);
  _Unwind_Resume(a1);
}

void calcProjectionDists(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *(long long *)((char *)a3 + 72);
  long long v185 = *(long long *)((char *)a3 + 56);
  long long v186 = v5;
  long long v187 = *(long long *)((char *)a3 + 88);
  uint64_t v188 = *((void *)a3 + 13);
  long long v6 = a3[1];
  long long v181 = *a3;
  long long v182 = v6;
  long long v183 = a3[2];
  uint64_t v184 = *((void *)a3 + 6);
  long long v7 = a3[27];
  long long v176 = a3[26];
  long long v177 = v7;
  uint64_t v8 = *((void *)a3 + 56);
  long long v9 = a3[24];
  long long v175 = a3[25];
  long long v174 = v9;
  long long v179 = *(long long *)((char *)a3 + 456);
  uint64_t v10 = *((void *)a3 + 59);
  uint64_t v178 = v8;
  uint64_t v180 = v10;
  long long v11 = a3[21];
  long long v169 = a3[20];
  long long v170 = v11;
  uint64_t v12 = *((void *)a3 + 44);
  long long v13 = a3[18];
  long long v168 = a3[19];
  long long v167 = v13;
  long long v172 = *(long long *)((char *)a3 + 360);
  uint64_t v14 = *((void *)a3 + 47);
  uint64_t v171 = v12;
  uint64_t v173 = v14;
  toNonHomg<3u>(a1, (uint64_t)v163);
  toNonHomg<3u>(a2, (uint64_t)v159);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  long long v155 = (unint64_t)v185;
  double v17 = *((double *)&v186 + 1);
  float64x2_t v154 = (float64x2_t)(unint64_t)v186;
  long long v157 = 0uLL;
  *(void *)&long long v156 = v186;
  *((void *)&v156 + 1) = *((void *)&v185 + 1);
  uint64_t v158 = *((void *)&v186 + 1);
  memset(v136, 0, sizeof(v136));
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
      *(double *)&v136[v15 * 8 + i * 8] = v154.f64[v15 + i] / v17;
    ++v16;
    v15 += 3;
  }
  while (v16 != 3);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  long long v157 = *(_OWORD *)&v136[48];
  uint64_t v158 = *(void *)&v136[64];
  long long v155 = *(_OWORD *)&v136[16];
  long long v156 = *(_OWORD *)&v136[32];
  float64x2_t v154 = *(float64x2_t *)v136;
  long long v150 = (unint64_t)v181;
  double v21 = *((double *)&v182 + 1);
  float64x2_t v149 = (float64x2_t)(unint64_t)v182;
  long long v152 = 0uLL;
  *(void *)&long long v151 = v182;
  *((void *)&v151 + 1) = *((void *)&v181 + 1);
  uint64_t v153 = *((void *)&v182 + 1);
  memset(v136, 0, sizeof(v136));
  do
  {
    for (uint64_t j = 0; j != 3; ++j)
      *(double *)&v136[v19 * 8 + j * 8] = v149.f64[v19 + j] / v21;
    ++v20;
    v19 += 3;
  }
  while (v20 != 3);
  uint64_t v23 = 0;
  long long v151 = *(_OWORD *)&v136[32];
  long long v152 = *(_OWORD *)&v136[48];
  uint64_t v153 = *(void *)&v136[64];
  float64x2_t v149 = *(float64x2_t *)v136;
  long long v150 = *(_OWORD *)&v136[16];
  v147[2] = v176;
  v147[3] = v177;
  uint64_t v148 = v178;
  v147[0] = v174;
  v147[1] = v175;
  long long v145 = 0uLL;
  double v146 = 0.0;
  do
  {
    *(double *)((char *)&v145 + v23) = *(double *)((char *)&v172 + v23) - *(double *)((char *)&v183 + v23);
    v23 += 8;
  }
  while (v23 != 24);
  if (!*((unsigned char *)a3 + 529))
  {
    uint64_t v24 = 0;
    memset(v136, 0, 24);
    do
    {
      *(double *)&v136[v24] = *(double *)((char *)&v183 + v24) - *(double *)((char *)&v187 + v24);
      v24 += 8;
    }
    while (v24 != 24);
    long long v145 = *(_OWORD *)v136;
    double v146 = *(double *)&v136[16];
  }
  toHomg((uint64_t)v163, (uint64_t)v141);
  toHomg((uint64_t)v159, (uint64_t)v140);
  GMC_WorldFromPoints((uint64_t)v141, (uint64_t)v140, &v154, &v149, (const double *)v147, (uint64_t)&v145, 1, (uint64_t)v142);
  Matrix<double>::~Matrix((uint64_t)v140);
  Matrix<double>::~Matrix((uint64_t)v141);
  uint64_t v25 = 0;
  memset(&v136[40], 0, 32);
  uint64_t v137 = 0;
  memset(&v136[8], 0, 32);
  *(void *)unsigned int v136 = 0x3FF0000000000000;
  *(void *)&v136[40] = 0x3FF0000000000000;
  double v139 = 0.0;
  uint64_t v138 = 0x3FF0000000000000;
  long long v132 = 0u;
  long long v133 = 0u;
  uint64_t v26 = &v130;
  long long v130 = 0u;
  long long v131 = 0u;
  uint64_t v134 = 0;
  do
  {
    for (uint64_t k = 0; k != 3; ++k)
    {
      if (v25 == k) {
        double v28 = 1.0;
      }
      else {
        double v28 = 0.0;
      }
      *((double *)v26 + k) = v28;
    }
    ++v25;
    uint64_t v26 = (long long *)((char *)v26 + 24);
  }
  while (v25 != 3);
  uint64_t v29 = 0;
  *(void *)&long long v128 = 0;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  uint64_t v30 = &v154;
  do
  {
    uint64_t v31 = 0;
    unsigned int v32 = &v130;
    do
    {
      uint64_t v33 = 0;
      double v34 = 0.0;
      uint64_t v35 = (double *)v32;
      do
      {
        double v36 = *v35;
        v35 += 3;
        double v34 = v34 + v30->f64[v33++] * v36;
      }
      while (v33 != 3);
      *((double *)&v124 + 3 * v29 + v31++) = v34;
      unsigned int v32 = (long long *)((char *)v32 + 8);
    }
    while (v31 != 3);
    ++v29;
    uint64_t v30 = (float64x2_t *)((char *)v30 + 24);
  }
  while (v29 != 3);
  uint64_t v37 = 0;
  memset(v135, 0, sizeof(v135));
  BOOL v38 = &v124;
  do
  {
    uint64_t v39 = 0;
    unsigned int v40 = (double *)v136;
    do
    {
      uint64_t v41 = 0;
      double v42 = 0.0;
      BOOL v43 = v40;
      do
      {
        double v44 = *v43;
        v43 += 4;
        double v42 = v42 + *(double *)((char *)v38 + v41) * v44;
        v41 += 8;
      }
      while (v41 != 24);
      *((double *)&v135[2 * v37] + v39++) = v42;
      ++v40;
    }
    while (v39 != 4);
    ++v37;
    BOOL v38 = (long long *)((char *)v38 + 24);
  }
  while (v37 != 3);
  uint64_t v45 = 0;
  *(double *)&v136[24] = -*(double *)&v145;
  *(double *)&v136[56] = -*((double *)&v145 + 1);
  double v139 = -v146;
  uint64_t v123 = 0;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  unint64_t v46 = &v119;
  BOOL v47 = v147;
  do
  {
    uint64_t v48 = 0;
    uint64_t v49 = v46;
    do
    {
      *(void *)uint64_t v49 = *(void *)((char *)v47 + v48);
      uint64_t v49 = (long long *)((char *)v49 + 24);
      v48 += 8;
    }
    while (v48 != 24);
    ++v45;
    unint64_t v46 = (long long *)((char *)v46 + 8);
    BOOL v47 = (_OWORD *)((char *)v47 + 24);
  }
  while (v45 != 3);
  uint64_t v50 = 0;
  uint64_t v134 = 0;
  long long v132 = 0u;
  long long v133 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  unsigned int v51 = &v149;
  do
  {
    uint64_t v52 = 0;
    uint64_t v53 = &v119;
    do
    {
      uint64_t v54 = 0;
      double v55 = 0.0;
      double v56 = (double *)v53;
      do
      {
        double v57 = *v56;
        v56 += 3;
        double v55 = v55 + v51->f64[v54++] * v57;
      }
      while (v54 != 3);
      *((double *)&v130 + 3 * v50 + v52++) = v55;
      uint64_t v53 = (long long *)((char *)v53 + 8);
    }
    while (v52 != 3);
    ++v50;
    unsigned int v51 = (float64x2_t *)((char *)v51 + 24);
  }
  while (v50 != 3);
  uint64_t v58 = 0;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  int v59 = &v130;
  do
  {
    uint64_t v60 = 0;
    int v61 = (double *)v136;
    do
    {
      uint64_t v62 = 0;
      double v63 = 0.0;
      int v64 = v61;
      do
      {
        double v65 = *v64;
        v64 += 4;
        double v63 = v63 + *(double *)((char *)v59 + v62) * v65;
        v62 += 8;
      }
      while (v62 != 24);
      *((double *)&v124 + 4 * v58 + v60++) = v63;
      ++v61;
    }
    while (v60 != 4);
    ++v58;
    int v59 = (long long *)((char *)v59 + 24);
  }
  while (v58 != 3);
  Matrix<double>::Matrix((uint64_t)&v119, 4, v144);
  *(void *)&long long v119 = &unk_26FAEC768;
  LODWORD(v131) = 1;
  DWORD1(v131) = v144;
  unsigned int v116 = 1;
  unsigned int v117 = v144;
  char v118 = 0;
  *(void *)&long long v130 = &unk_26FAEAF18;
  *((void *)&v130 + 1) = 0;
  BYTE8(v131) = 0;
  double v114 = &unk_26FAEAF48;
  __srCC_SHA256_CTX c = v143;
  Matrix<double>::~Matrix((uint64_t)&v130);
  LODWORD(v131) = 1;
  DWORD1(v131) = DWORD1(v120);
  unsigned int v111 = 1;
  unsigned int v112 = DWORD1(v120);
  char v113 = 0;
  *(void *)&long long v130 = &unk_26FAEAF18;
  *((void *)&v130 + 1) = 0;
  BYTE8(v131) = 0;
  int v109 = &unk_26FAEAF48;
  __dst = (void *)*((void *)&v119 + 1);
  Matrix<double>::~Matrix((uint64_t)&v130);
  Matrix<double>::Resize((uint64_t)&v109, 1, v117);
  memcpy(__dst, __src, 8 * v111 * (unint64_t)v112);
  Matrix<double>::~Matrix((uint64_t)&v109);
  Matrix<double>::~Matrix((uint64_t)&v114);
  LODWORD(v131) = 1;
  DWORD1(v131) = v144;
  unsigned int v116 = 1;
  unsigned int v117 = v144;
  char v118 = 0;
  *(void *)&long long v130 = &unk_26FAEAF18;
  *((void *)&v130 + 1) = 0;
  BYTE8(v131) = 0;
  double v114 = &unk_26FAEAF48;
  __srCC_SHA256_CTX c = &v143[8 * v144];
  Matrix<double>::~Matrix((uint64_t)&v130);
  LODWORD(v131) = 1;
  DWORD1(v131) = DWORD1(v120);
  unsigned int v111 = 1;
  unsigned int v112 = DWORD1(v120);
  char v113 = 0;
  *(void *)&long long v130 = &unk_26FAEAF18;
  *((void *)&v130 + 1) = 0;
  BYTE8(v131) = 0;
  int v109 = &unk_26FAEAF48;
  __dst = (void *)(*((void *)&v119 + 1) + 8 * DWORD1(v120));
  Matrix<double>::~Matrix((uint64_t)&v130);
  Matrix<double>::Resize((uint64_t)&v109, v116, v117);
  memcpy(__dst, __src, 8 * v111 * (unint64_t)v112);
  Matrix<double>::~Matrix((uint64_t)&v109);
  Matrix<double>::~Matrix((uint64_t)&v114);
  LODWORD(v131) = 1;
  DWORD1(v131) = v144;
  unsigned int v116 = 1;
  unsigned int v117 = v144;
  char v118 = 0;
  *(void *)&long long v130 = &unk_26FAEAF18;
  *((void *)&v130 + 1) = 0;
  BYTE8(v131) = 0;
  double v114 = &unk_26FAEAF48;
  __srCC_SHA256_CTX c = &v143[16 * v144];
  Matrix<double>::~Matrix((uint64_t)&v130);
  LODWORD(v131) = 1;
  DWORD1(v131) = DWORD1(v120);
  unsigned int v111 = 1;
  unsigned int v112 = DWORD1(v120);
  char v113 = 0;
  *(void *)&long long v130 = &unk_26FAEAF18;
  *((void *)&v130 + 1) = 0;
  BYTE8(v131) = 0;
  int v109 = &unk_26FAEAF48;
  __dst = (void *)(*((void *)&v119 + 1) + 8 * (2 * DWORD1(v120)));
  Matrix<double>::~Matrix((uint64_t)&v130);
  Matrix<double>::Resize((uint64_t)&v109, v116, v117);
  memcpy(__dst, __src, 8 * v111 * (unint64_t)v112);
  Matrix<double>::~Matrix((uint64_t)&v109);
  Matrix<double>::~Matrix((uint64_t)&v114);
  uint64_t v66 = DWORD1(v120);
  if (DWORD1(v120))
  {
    if (v120 < 4) {
      __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
    }
    uint64_t v67 = 8 * (3 * DWORD1(v120));
    do
    {
      *(void *)(*((void *)&v119 + 1) + v67) = 0x3FF0000000000000;
      v67 += 8;
      --v66;
    }
    while (v66);
  }
  MatrixMxN<3u,4u,double>::operator*<4u>((const double *)v135, (uint64_t)&v119, (uint64_t)&v130);
  toNonHomg<3u>((uint64_t)&v130, (uint64_t)&v114);
  MatrixMxN<3u,4u,double>::operator*<4u>((const double *)&v124, (uint64_t)&v119, (uint64_t)&v109);
  toNonHomg<3u>((uint64_t)&v109, (uint64_t)v105);
  Matrix<double>::Matrix((uint64_t)v102, 1, v117);
  v102[0] = &unk_26FAEAF48;
  Matrix<double>::Matrix((uint64_t)v99, 1, v117);
  v99[0] = &unk_26FAEAF48;
  uint64_t v68 = v104;
  if (v104)
  {
    if (v116)
    {
      unint64_t v69 = 0;
      uint64_t v70 = v117;
      unsigned int v71 = v165;
      unint64_t v72 = v166;
      unsigned int v73 = v107;
      unint64_t v74 = v108;
      unsigned int v75 = v161;
      unint64_t v76 = v162;
      int v77 = v100;
      BOOL v80 = v116 < 2 || v165 < 2 || v103 == 0;
      uint64_t v81 = 8 * v108;
      uint64_t v82 = 8 * v162;
      while (v70 != v69)
      {
        BOOL v83 = !v71 || v69 >= v72;
        char v84 = v83 || v80;
        if (v84) {
          break;
        }
        long long v85 = (double *)((char *)__src + 8 * v69);
        long long v86 = (double *)(v164 + 8 * v69);
        *(double *)(v102[1] + 8 * v69) = (*v85 - *v86) * v17 * ((*v85 - *v86) * v17)
                                       + v17 * (v85[v70] - v86[v72]) * (v17 * (v85[v70] - v86[v72]));
        if (!v73 || v69 >= v74 || !v75 || v69 >= v76 || v73 < 2 || v75 < 2 || !v77 || v69 >= v101) {
          break;
        }
        double v87 = (*(double *)(v106 + 8 * v69) - *(double *)(v160 + 8 * v69)) * v21;
        double v88 = v21 * (*(double *)(v106 + v81 + 8 * v69) - *(double *)(v160 + v82 + 8 * v69));
        *(double *)(v99[1] + 8 * v69++) = v87 * v87 + v88 * v88;
        if (v68 == v69) {
          goto LABEL_83;
        }
      }
    }
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
LABEL_83:
  Matrix<double>::ConcatCols((uint64_t)v102, (uint64_t)v99, (uint64_t)v90);
  Matrix<double>::Sqrt((uint64_t)v90, (uint64_t)v91);
  uint64_t v89 = v92;
  char v98 = v94;
  uint64_t v92 = 0;
  char v94 = 0;
  v95[0] = &unk_26FAEAF48;
  v95[1] = v89;
  int v96 = 1;
  int v97 = v93;
  Matrix<double>::~Matrix((uint64_t)v91);
  Matrix<double>::~Matrix((uint64_t)v90);
  MatrixNxPts<1u,double>::Sort<1u,void>((uint64_t)v95);
}

void sub_246920768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

_DWORD *diluteInliers(_DWORD *result, unsigned int a2, unsigned int a3, uint64_t a4)
{
  long long v5 = result;
  double v6 = (double)a2 / (double)a3;
  if (v6 <= 1.0)
  {
    if (result[5] == *(_DWORD *)(a4 + 20))
    {
      Matrix<float>::Resize(a4, result[4], result[5]);
      long long v9 = *(void **)(a4 + 8);
      uint64_t v10 = (const void *)*((void *)v5 + 1);
      size_t v11 = 4 * *(unsigned int *)(a4 + 16) * (unint64_t)*(unsigned int *)(a4 + 20);
      return memcpy(v9, v10, v11);
    }
    else if (a3)
    {
      for (unint64_t i = 0; i != a3; ++i)
      {
        if (i >= (result[5] * result[4])) {
          GMC_ExtractTestSamples();
        }
        if (i >= (*(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16))) {
          GMC_ExtractTestSamples();
        }
        *(_DWORD *)(*(void *)(a4 + 8) + 4 * i) = *(_DWORD *)(*((void *)result + 1) + 4 * i);
      }
    }
  }
  else if (a3)
  {
    for (unint64_t j = 0; j != a3; *(_DWORD *)(*(void *)(a4 + 8) + 4 * j++) = *(_DWORD *)(*((void *)result + 1) + 4 * v8))
    {
      unsigned int v8 = (int)(v6 * (double)j);
      if (result[5] * result[4] <= v8) {
        GMC_ExtractTestSamples();
      }
      if (j >= (*(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16))) {
        GMC_ExtractTestSamples();
      }
    }
  }
  return result;
}

uint64_t GMCAlgorithm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(unsigned char *)(a4 + 560))
  {
    uint64_t v6 = 0;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    do
    {
      *(double *)((char *)&v12 + v6) = *(double *)(a4 + v6 + 360) - *(double *)(a4 + v6 + 32);
      v6 += 8;
    }
    while (v6 != 24);
    *(_OWORD *)(a6 + 72) = v12;
    *(void *)(a6 + Matrix<double>::~Matrix((uint64_t)this + 88) = v13;
    if (!*(unsigned char *)(a4 + 529))
    {
      uint64_t v7 = 0;
      long long v12 = 0uLL;
      uint64_t v13 = 0;
      do
      {
        *(double *)((char *)&v12 + v7) = *(double *)(a4 + v7 + 32) - *(double *)(a4 + v7 + 88);
        v7 += 8;
      }
      while (v7 != 24);
      *(_OWORD *)(a6 + 72) = v12;
      *(void *)(a6 + Matrix<double>::~Matrix((uint64_t)this + 88) = v13;
    }
    LODWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
    GMC_BundleAdjustment(a1);
  }
  *(double *)(a6 + 96) = *(double *)(a4 + 72) / *(double *)(a4 + 80);
  if (a5 != a6)
  {
    *(_OWORD *)a6 = *(_OWORD *)a5;
    long long v8 = *(_OWORD *)(a5 + 16);
    long long v9 = *(_OWORD *)(a5 + 32);
    long long v10 = *(_OWORD *)(a5 + 48);
    *(void *)(a6 + 64) = *(void *)(a5 + 64);
    *(_OWORD *)(a6 + 32) = v9;
    *(_OWORD *)(a6 + 48) = v10;
    *(_OWORD *)(a6 + 16) = v8;
  }
  return 0xFFFFFFFFLL;
}

uint64_t toNonHomg<3u>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  uint64_t result = Matrix<double>::Matrix(a2, 2, v4);
  *(void *)a2 = &unk_26FAEC0F0;
  if (v4)
  {
    unint64_t v6 = 0;
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    int v8 = 119;
    do
    {
      unint64_t v9 = 0;
      unint64_t v10 = *(unsigned int *)(a1 + 20);
      unint64_t v11 = *(unsigned int *)(a2 + 16);
      unint64_t v12 = *(unsigned int *)(a2 + 20);
      if (v7) {
        BOOL v13 = v6 >= v10;
      }
      else {
        BOOL v13 = 1;
      }
      char v14 = v13;
      char v15 = 1;
      do
      {
        if ((v14 & 1) != 0 || v7 < 3)
        {
          int v8 = 125;
LABEL_18:
          __assert_rtn("operator()", "Matrix.hpp", v8, "row < m_rows && col < m_cols");
        }
        if (v9 >= v11 || v6 >= v12) {
          goto LABEL_18;
        }
        char v16 = v15;
        char v15 = 0;
        uint64_t v17 = *(void *)(a1 + 8) + 8 * v6;
        double v18 = *(double *)(v17 + 8 * v9 * v10);
        double v19 = *(double *)(v17 + 8 * (2 * v10));
        uint64_t result = *(void *)(a2 + 8) + 8 * v6;
        *(double *)(result + 8 * v9 * vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v18 / v19;
        unint64_t v9 = 1;
      }
      while ((v16 & 1) != 0);
      ++v6;
    }
    while (v6 != v4);
  }
  return result;
}

void sub_246920C20(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t toHomg@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  uint64_t result = Matrix<double>::Matrix(a2, 3, v4);
  *(void *)a2 = &unk_26FAEB100;
  if (v4)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
    if (v6)
    {
      unint64_t v7 = 0;
      uint64_t v8 = *(unsigned int *)(a1 + 20);
      unsigned int v9 = *(_DWORD *)(a2 + 16);
      unint64_t v10 = *(unsigned int *)(a2 + 20);
      BOOL v12 = v6 < 2 || v9 < 2;
      int v13 = 119;
      while (v8 != v7)
      {
        if (!v9 || v7 >= v10) {
          goto LABEL_22;
        }
        *(void *)(*(void *)(a2 + 8) + 8 * v7) = *(void *)(*(void *)(a1 + 8) + 8 * v7);
        if (v12)
        {
          if (v6 >= 2) {
            int v14 = 119;
          }
          else {
            int v14 = 125;
          }
          __assert_rtn("operator()", "Matrix.hpp", v14, "row < m_rows && col < m_cols");
        }
        *(void *)(*(void *)(a2 + 8) + 8 * v10 + 8 * v7) = *(void *)(*(void *)(a1 + 8) + 8 * v8 + 8 * v7);
        if (v9 == 2) {
          __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
        }
        uint64_t result = *(void *)(a2 + 8) + 8 * (2 * v10);
        *(void *)(result + 8 * v7++) = 0x3FF0000000000000;
        if (v4 == v7) {
          return result;
        }
      }
    }
    int v13 = 125;
LABEL_22:
    __assert_rtn("operator()", "Matrix.hpp", v13, "row < m_rows && col < m_cols");
  }
  return result;
}

void sub_246920DA4(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t MatrixMxN<3u,4u,double>::operator*<4u>@<X0>(const double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MatrixMxN<3u,4u,double>::operator*(a1, a2, (uint64_t)&v7);
  uint64_t v4 = v8;
  int v5 = v9;
  *(unsigned char *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a3 = &unk_26FAEB100;
  *(void *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = 3;
  *(_DWORD *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

uint64_t Matrix<double>::ConcatCols@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 != *(_DWORD *)(a2 + 16)) {
    Matrix<double>::ConcatCols();
  }
  uint64_t result = Matrix<double>::Matrix(a3, v5, *(_DWORD *)(a2 + 20) + *(_DWORD *)(a1 + 20));
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7)
  {
    int v8 = 0;
    int v9 = *(uint64_t **)(a2 + 8);
    char v10 = *(uint64_t **)(a1 + 8);
    unint64_t v11 = *(void **)(result + 8);
    int v12 = *(_DWORD *)(a1 + 20);
    int v13 = *(_DWORD *)(a2 + 20);
    do
    {
      for (int i = v12; i; --i)
      {
        uint64_t v15 = *v10++;
        *v11++ = v15;
      }
      for (int j = v13; j; --j)
      {
        uint64_t v17 = *v9++;
        *v11++ = v17;
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

double Matrix<double>::Sqrt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = Matrix<double>::Matrix(a2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  if (v5)
  {
    unsigned int v6 = *(double **)(a1 + 8);
    int v7 = *(double **)(v3 + 8);
    do
    {
      double v8 = *v6++;
      double result = sqrt(v8);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void MatrixNxPts<1u,double>::Sort<1u,void>(uint64_t a1)
{
  Matrix<double>::Matrix((uint64_t)v1, a1, 0, -1);
}

void sub_246920FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t GMC_UpdateParamsWithResults(uint64_t a1, uint64_t a2)
{
  *(double *)(a1 + 72) = *(double *)(a2 + 96) * *(double *)(a1 + 80);
  if (a2 != a1 + 384)
  {
    long long v2 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 472) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 4Matrix<double>::~Matrix((uint64_t)this + 56) = v2;
  }
  return 0;
}

void MatrixNxPts<4u,double>::~MatrixNxPts(uint64_t a1)
{
  Matrix<double>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

void MatrixMxN<3u,4u,double>::operator*(const double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 16) == 4)
  {
    Matrix<double>::Matrix(a3, 3, *(_DWORD *)(a2 + 20));
    LODWORD(v6) = 4;
    vDSPMmul<double>(a1, 1, *(const double **)(a2 + 8), 1, *(double **)(a3 + 8), 1, 3, *(_DWORD *)(a2 + 20), v6);
  }
  else
  {
    *(void *)a3 = &unk_26FAEAF18;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  }
}

void sub_246921104(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void CNeonBlurMAccelerate::CNeonBlurMAccelerate(CNeonBlurMAccelerate *this)
{
  *(void *)this = &unk_26FAEC7A0;
}

{
  *(void *)this = &unk_26FAEC7A0;
}

void CNeonBlurMAccelerate::~CNeonBlurMAccelerate(CNeonBlurMAccelerate *this)
{
}

void H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode::H16ISPGraphExclaveFaceTrackingSecondaryNode(H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode *this, H16ISP::H16ISPDevice *a2, int a3)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 23);
  *(void *)uint64_t v5 = &unk_26FAEC7D0;
  *(unsigned char *)(v5 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(v5 + Matrix<double>::~Matrix((uint64_t)this + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

{
  uint64_t v5;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 23);
  *(void *)uint64_t v5 = &unk_26FAEC7D0;
  *(unsigned char *)(v5 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(v5 + Matrix<double>::~Matrix((uint64_t)this + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

void H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode::~H16ISPGraphExclaveFaceTrackingSecondaryNode(H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode::onActivate(H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_DEFAULT, "H16ISPGraphExclaveFaceTrackingSecondaryNode::onActivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode::onDeactivate(H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_DEFAULT, "H16ISPGraphExclaveFaceTrackingSecondaryNode::onDeactivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode::onMessageProcessing(H16ISP::H16ISPDevice **this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 9) & (1 << H16ISP::H16ISPFilterGraphNode::GetType((H16ISP::H16ISPFilterGraphNode *)this));
  *((unsigned char *)this + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4 != 0;
  if (!v4) {
    return 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  int v5 = *((_DWORD *)a2 + 90);
  int v6 = *((unsigned __int8 *)a2 + 384);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
  if (H16ISP::H16ISPDevice::enabledExclaveDebug(this[11]))
  {
    int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v7 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *((_DWORD *)this + 24);
      *(_DWORD *)int buf = 67109632;
      int v16 = v8;
      __int16 v17 = 1024;
      int v18 = v6;
      __int16 v19 = 1024;
      int v20 = v5;
      _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_DEFAULT, "[Exclaves]: channel=%u runSecondaryProcessing=%{BOOL}d requestID=0x%08x\n", buf, 0x14u);
    }
  }
  if (!v6) {
    return 0;
  }
  unsigned __int8 v14 = 0;
  *(_DWORD *)int buf = *((_DWORD *)this + 24);
  int v16 = 5;
  uint64_t v9 = *((void *)this[11] + 23);
  kdebug_trace();
  int v10 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchrunkitfacesecondaryprocess(v9, (uint64_t)buf);
  kdebug_trace();
  unint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    unint64_t v11 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v11;
  }
  uint64_t v12 = 3758097084;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode::onMessageProcessing(&v14, v10, v11);
  }
  return v12;
}

uint64_t H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode::GetNodeProcessingState(H16ISP::H16ISPGraphExclaveFaceTrackingSecondaryNode *this)
{
  return *((unsigned __int8 *)this + 80);
}

void H16ISPColorPearlOnlineCalibrationRunner::H16ISPColorPearlOnlineCalibrationRunner(H16ISPColorPearlOnlineCalibrationRunner *this, void *a2)
{
  *(void *)this = &unk_26FAEC848;
  *((_WORD *)this + 4) = 0;
  *(void *)((char *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0x100000000;
  *((_DWORD *)this + 5) = 0;
  *((unsigned char *)this + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  *((void *)this + 4) = a2;
}

void H16ISPRgbIrRunner::H16ISPRgbIrRunner(H16ISPRgbIrRunner *this, void *a2)
{
  *((_WORD *)this + 4) = 0;
  *(void *)((char *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0x100000000;
  *((_DWORD *)this + 5) = 0;
  *((unsigned char *)this + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26FAEC888;
  *((_DWORD *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  *((void *)this + 7) = 0;
  operator new();
}

void sub_2469216C4(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1020C400CC4F872);
  _Unwind_Resume(a1);
}

void H16ISPRgbIrRunner::~H16ISPRgbIrRunner(H16ISPRgbIrRunner *this)
{
  *(void *)this = &unk_26FAEC888;
  long long v2 = *((void *)this + 7);
  if (v2)
  {
    dispatch_sync(v2, &__block_literal_global_7);
    dispatch_release(*((dispatch_object_t *)this + 7));
    *((void *)this + 7) = 0;
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    if (*(void *)v3)
    {
      RgbIrCalibration::~RgbIrCalibration(*(RgbIrCalibration **)v3);
      MEMORY[0x24C53D6E0]();
      uint64_t v3 = *((void *)this + 5);
    }
    uint64_t v4 = *(void **)(v3 + 8);
    if (!v4 || (v4, *((void *)this + 5))) {
      MEMORY[0x24C53D6E0]();
    }
    *((void *)this + 5) = 0;
  }
}

{
  uint64_t vars8;

  H16ISPRgbIrRunner::~H16ISPRgbIrRunner(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISPColorPearlOnlineCalibrationRunner::setVerbose(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

uint64_t H16ISPRgbIrRunner::setStepDetectionMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t H16ISPColorPearlOnlineCalibrationRunner::setOnEveryStart(uint64_t this, char a2)
{
  *(unsigned char *)(this + 22) = a2;
  return this;
}

uint64_t H16ISPColorPearlOnlineCalibrationRunner::setDumpAlgoFrames(uint64_t this, char a2)
{
  *(unsigned char *)(this + 23) = a2;
  return this;
}

uint64_t H16ISPColorPearlOnlineCalibrationRunner::markForDeletion(uint64_t this)
{
  *(unsigned char *)(this + Matrix<double>::~Matrix((uint64_t)this + 24) = 1;
  return this;
}

uint64_t H16ISPRgbIrRunner::markForDeletion(uint64_t this)
{
  *(unsigned char *)(this + Matrix<double>::~Matrix((uint64_t)this + 24) = 1;
  uint64_t v1 = *(uint64_t **)(this + 40);
  if (v1)
  {
    this = *v1;
    if (*v1) {
      return RgbIrCalibration::abort((RgbIrCalibration *)this);
    }
  }
  return this;
}

uint64_t H16ISPColorPearlOnlineCalibrationRunner::isMarkedForDeletion(H16ISPColorPearlOnlineCalibrationRunner *this)
{
  return *((unsigned __int8 *)this + 24);
}

__n128 H16ISPRgbIrRunner::setDepthConfig(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 96) = *(void *)(a2 + 32);
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  return result;
}

uint64_t H16ISPRgbIrRunner::setDxOffset(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 104) = a2;
  return this;
}

uint64_t H16ISPRgbIrRunner::run(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  v11[1664] = *(CFTypeRef *)MEMORY[0x263EF8340];
  if (!*(unsigned char *)(v2 + 9))
  {
    uint64_t v6 = v2;
    if (*(unsigned char *)(v2 + 20))
    {
      if (*(unsigned char *)(v2 + 8))
      {
        int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v7 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v7;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11[0]) = 0;
          _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI): Already ran algorithm\n", (uint8_t *)v11, 2u);
        }
      }
    }
    else if (*(_DWORD *)(v2 + 12) < *(_DWORD *)(v2 + 16))
    {
      int v8 = v4;
      uint64_t v9 = v3;
      v11[5] = 0;
      v11[6] = 0;
      CFRetain(v4);
      CFRetain(v9);
      CVPixelBufferCreateFromCVImageBufferRef();
      if (v8) {
        CFRelease(v8);
      }
      if (v9) {
        CFRelease(v9);
      }
      if (*(unsigned char *)(v6 + 8))
      {
        int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v10 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          H16ISPRgbIrRunner::run();
        }
      }
    }
  }
  return 3758097084;
}

void ___ZN17H16ISPRgbIrRunner3runEP10__CVBufferS1_S1_PK14__CFDictionaryS4_b26sCIspCmdChPearlCalibrationt_block_invoke(uint64_t a1)
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  if ((CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) | 0x10) == 0x34323076)
  {
    CVReturn v3 = 0;
    BOOL v4 = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(__CVBuffer **)(v5 + 24);
    *(void *)(v5 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
    size_t Width = CVPixelBufferGetWidth(v6);
    size_t Height = CVPixelBufferGetHeight(v6);
    unint64_t v9 = Width >> 2;
    if (Width <= 0xA03) {
      unint64_t v9 = 640;
    }
    if (v9 >= Width) {
      unint64_t v9 = Width;
    }
    size_t v10 = (int)(2 * llroundf((float)v9 * 0.5));
    size_t v11 = (int)(2 * llroundf((float)(Height * v10 / Width) * 0.5));
    keys[0] = *(void **)MEMORY[0x263F04130];
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    unsigned __int8 v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    values = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionaryRef v15 = CFDictionaryCreate(v12, (const void **)keys, (const void **)&values, 1, v13, v14);
    CVReturn v3 = CVPixelBufferCreate(v12, v10, v11, 0x34323076u, v15, (CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    CFRelease(values);
    CFRelease(v15);
    if (v3)
    {
      BOOL v4 = 0;
    }
    else
    {
      BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 0;
      VTPixelTransferSessionRef pixelTransferSessionOut = 0;
      OSStatus v16 = VTPixelTransferSessionCreate(v12, &pixelTransferSessionOut);
      if (v16)
      {
        CVReturn v3 = v16;
        __int16 v17 = 0;
        VTPixelTransferSessionRef pixelTransferSessionOut = 0;
      }
      else
      {
        CVReturn v3 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v6, *(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
        __int16 v17 = pixelTransferSessionOut;
      }
      VTPixelTransferSessionInvalidate(v17);
      CFRelease(pixelTransferSessionOut);
    }
    CVBufferRelease(v6);
  }
  if (*(unsigned char *)(v2 + 23)) {
    dumpBuffers(*(__CVBuffer **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(const __CFDictionary **)(a1 + 48), *(FILE **)(a1 + 56), *(const __CFDictionary **)(a1 + 64), *(FILE **)(a1 + 72));
  }
  keys[0] = 0;
  if (v3) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = v4;
  }
  if (v18)
  {
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
    if (!CVPixelBufferCreate(v19, WidthOfPlane, HeightOfPlane, 0x4C303038u, *(CFDictionaryRef *)(a1 + 48), (CVPixelBufferRef *)keys))
    {
      CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 1uLL);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
      CVPixelBufferLockBaseAddress((CVPixelBufferRef)keys[0], 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)keys[0]);
      if (BaseAddressOfPlane) {
        BOOL v24 = BaseAddress == 0;
      }
      else {
        BOOL v24 = 1;
      }
      if (!v24)
      {
        uint64_t v25 = BaseAddress;
        size_t v26 = CVPixelBufferGetHeight((CVPixelBufferRef)keys[0]);
        size_t v27 = CVPixelBufferGetWidth((CVPixelBufferRef)keys[0]);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)keys[0]);
        if (v26)
        {
          size_t v30 = BytesPerRow;
          do
          {
            memcpy(v25, BaseAddressOfPlane, v27);
            BaseAddressOfPlane += BytesPerRowOfPlane;
            v25 += v30;
            --v26;
          }
          while (v26);
        }
      }
      CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)keys[0], 0);
      CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 1uLL);
    }
  }
  uint64_t v31 = *(__CVBuffer **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v31) {
    CVPixelBufferRelease(v31);
  }
  if (keys[0]) {
    *(unsigned char *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = H16ISPRgbIrRunner::runAlgorithm(v2, *(void *)(a1 + 56), *(const __CFDictionary **)(a1 + 64), (int)keys[0], *(CFDictionaryRef *)(a1 + 48), *(void *)(a1 + 72), *(unsigned __int8 *)(a1 + 13248), (double *)(a1 + 80), v2 + 64, *(_WORD *)(v2 + 104));
  }
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 56));
  if (keys[0]) {
    CFRelease(keys[0]);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 64));
  ++*(_DWORD *)(v2 + 12);
  *(unsigned char *)(v2 + 9) = 0;
}

FILE *dumpBuffers(__CVBuffer *a1, const __CFDictionary *a2, FILE *a3, const __CFDictionary *a4, FILE *a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  time_t v29 = 0;
  setlocale(0, "");
  time(&v29);
  size_t v10 = localtime(&v29);
  strftime(v32, 0x14uLL, "%m%d%g_%H%M%S", v10);
  snprintf(__str, 0x400uLL, "/var/mobile/Media/DCIM/%s-RGBIR-", v32);
  dumpMetadata(a2, __str, "Color");
  dumpMetadata(a4, __str, "IR");
  if (a1)
  {
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    v30[0] = HIBYTE(PixelFormatType);
    v30[1] = BYTE2(PixelFormatType);
    v30[2] = BYTE1(PixelFormatType);
    v30[3] = PixelFormatType;
    v30[4] = 0;
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
    snprintf(__filename, 0x400uLL, "%s%s.%lux%lu.%lu.%s.bin", __str, "Color", WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, v30);
    if (HeightOfPlane * BytesPerRowOfPlane <= CVPixelBufferGetDataSize(a1))
    {
      CFDictionaryRef v15 = fopen(__filename, "wb");
      if (v15)
      {
        OSStatus v16 = v15;
        CVPixelBufferLockBaseAddress(a1, 0);
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
        if (HeightOfPlane)
        {
          BOOL v18 = BaseAddressOfPlane;
          uint64_t v19 = 0;
          unsigned int v20 = 1;
          do
          {
            fwrite(&v18[v19 * BytesPerRowOfPlane], WidthOfPlane, 1uLL, v16);
            uint64_t v19 = v20;
            BOOL v21 = HeightOfPlane > v20++;
          }
          while (v21);
        }
        size_t v22 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        size_t v23 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
        BOOL v24 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
        if (v23)
        {
          uint64_t v25 = v24;
          uint64_t v26 = 0;
          unsigned int v27 = 1;
          do
          {
            fwrite(&v25[v26 * v22], WidthOfPlane, 1uLL, v16);
            uint64_t v26 = v27;
            BOOL v21 = v23 > v27++;
          }
          while (v21);
        }
        CVPixelBufferUnlockBaseAddress(a1, 0);
        fclose(v16);
      }
    }
  }
  dumpSinglePlaneBuffer(a3, __str, "IR");
  return dumpSinglePlaneBuffer(a5, __str, "Depth");
}

BOOL H16ISPRgbIrRunner::runAlgorithm(uint64_t a1, int a2, const __CFDictionary *a3, int a4, CFDictionaryRef theDict, int a6, int a7, double *a8, uint64_t a9, __int16 a10)
{
  int v13 = (int)theDict;
  uint64_t v68 = *MEMORY[0x263EF8340];
  if (theDict) {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2D000]);
  }
  else {
    CFArrayRef Value = 0;
  }
  int valuePtr = -269488145;
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a3, @"StereoGMC-Result");
  if (v19) {
    CFNumberGetValue(v19, kCFNumberIntType, &valuePtr);
  }
  unsigned int v57 = 0;
  unsigned int v58 = 0;
  mach_timebase_info(&info);
  int v43 = a6;
  CFDictionaryRef v44 = a3;
  unsigned int v20 = a8;
  uint64_t v21 = a1;
  uint64_t v49 = mach_absolute_time();
  size_t v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    size_t v22 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v22;
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI): Starting\n", buf, 2u);
  }
  uint64_t v23 = a1;
  uint64_t v24 = (uint64_t)v20;
  int v25 = RgbIrCalibration::Calibrate(**(void **)(v21 + 40), a2, v44, a4, v13, v43, a7 ^ 1u, (const __CFBoolean *)*MEMORY[0x263EFFB40], v20, Value, a10, a9, &v58, (uint64_t)&v50, (uint64_t)&v57, (uint64_t)&v53);
  uint64_t v26 = &_os_log_internal;
  int v27 = v25;
  uint64_t v28 = (mach_absolute_time() - v49) * info.numer / info.denom / 0xF4240;
  reportMutualInformationResults();
  time_t v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v26)
  {
    time_t v29 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v29;
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109376;
    int v65 = v27;
    __int16 v66 = 1024;
    int v67 = v28;
    _os_log_impl(&dword_24680F000, v29, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI): status 0x%08X (%d msec)\n", buf, 0xEu);
  }
  if (!v27)
  {
    PearlIsf::PearlIsf((PearlIsf *)v46);
    Isf::setStepDetectionMode((Isf *)v46, *(_DWORD *)(v23 + 48) != 0);
    IsfReadPearlHistory(buf, (uint64_t)v47);
    kdebug_trace();
    if (v57 == 1) {
      int v30 = PearlIsf::RunFromMiFullGrid((uint64_t)v46, buf, &v45, v50, v51, v52, v53);
    }
    else {
      int v30 = PearlIsf::RunFromLmv((uint64_t)v46, buf, &v45, v50, v51, v52);
    }
    int v31 = v30;
    kdebug_trace();
    unsigned int v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v26)
    {
      unsigned int v32 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v32;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v62 = 67109120;
      int v63 = v31;
      _os_log_impl(&dword_24680F000, v32, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (ISF): status 0x%08X\n", v62, 8u);
    }
    reportIsfResults(v31, (double *)v45.i64, v57 == 1, v58, v24, (uint64_t)v47);
    writeAnalyticsIsfThresholds(v47);
    uint64_t v33 = fopen("/var/mobile/Library/ISP/Pearl/IsfHistory.bin.bak", "wb");
    if (v33)
    {
      fwrite(buf, 0xE38uLL, 1uLL, v33);
      fclose(v33);
      rename((const std::__fs::filesystem::path *)"/var/mobile/Library/ISP/Pearl/IsfHistory.bin.bak", (const std::__fs::filesystem::path *)"/var/mobile/Library/ISP/Pearl/IsfHistory.bin", v34);
    }
    v60[0] = @"MutualInformation-Result";
    v61[0] = [NSNumber numberWithUnsignedInt:0];
    v60[1] = @"MutualInformation-Stage";
    v61[1] = [NSNumber numberWithUnsignedInt:v57];
    v60[2] = @"MutualInformation-SelectedMode";
    v61[2] = [NSNumber numberWithUnsignedInt:v58];
    v60[3] = @"MutualInformation-RotationX";
    LODWORD(v35) = v54;
    v61[3] = [NSNumber numberWithFloat:v35];
    void v60[4] = @"MutualInformation-RotationY";
    LODWORD(v36) = v55;
    void v61[4] = [NSNumber numberWithFloat:v36];
    v60[5] = @"MutualInformation-RotationZ";
    LODWORD(v37) = v56;
    v61[5] = [NSNumber numberWithFloat:v37];
    BOOL v38 = (void *)[NSDictionary dictionaryWithObjects:v61 forKeys:v60 count:6];
    uint64_t v39 = *(void **)(*(void *)(v23 + 40) + 8);
    if (v39) {

    }
    unsigned int v40 = (void *)[v38 mutableCopy];
    uint64_t v41 = *(void *)(v23 + 40);
    *(void *)(v41 + 8) = v40;
    if (!v57)
    {
      objc_msgSend(v40, "setValue:forKey:", objc_msgSend(NSNumber, "numberWithDouble:", v53), @"MutualInformation-Confidence");
      uint64_t v41 = *(void *)(v23 + 40);
      unsigned int v40 = *(void **)(v41 + 8);
    }
    [v40 setValue:RgbIrCalibration::GetDebugInfo(*(RgbIrCalibration **)v41) forKey:@"DebugInfo"];
    PearlIsf::~PearlIsf((PearlIsf *)v46);
  }
  return v27 == 0;
}

void sub_246922820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  PearlIsf::~PearlIsf((PearlIsf *)va);
  _Unwind_Resume(a1);
}

FILE *IsfReadPearlHistory(unsigned char *a1, uint64_t a2)
{
  readAnalyticsIsfThresholds(a2, a2);
  __n128 result = fopen("/var/mobile/Library/ISP/Pearl/IsfHistory.bin", "rb");
  if (result)
  {
    BOOL v4 = result;
    fread(a1, 0xE38uLL, 1uLL, result);
    return (FILE *)fclose(v4);
  }
  else
  {
    *(_DWORD *)a1 = 3;
    a1[4] = 1;
  }
  return result;
}

uint64_t H16ISPColorPearlOnlineCalibrationRunner::setMaxAttempts(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

BOOL H16ISPRgbIrRunner::getUpdatedPceCalib(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v2;
  __dst[1646] = *(double *)MEMORY[0x263EF8340];
  if (*(unsigned char *)(v2 + 20) && !*(unsigned char *)(v2 + 21))
  {
    uint64_t v6 = v3;
    IsfReadPearlHistory(v14, (uint64_t)v13);
    memcpy(__dst, v6, 0x3370uLL);
    PearlIsf::PearlIsf((PearlIsf *)v12);
    Isf::setStepDetectionMode((Isf *)v12, *(_DWORD *)(v4 + 48) != 0);
    if (PearlIsf::updatePCECalib((uint64_t)v12, (uint64_t)v14, (uint64_t)__dst))
    {
      BOOL v5 = 0;
    }
    else
    {
      memset(v21, 0, sizeof(v21));
      calcRotationAngle((const double (*)[3][3])&__dst[1069], (double (*)[3])v21);
      int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      uint64_t v8 = &_os_log_internal;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        int v7 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v7;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134218496;
        double v16 = v21[0];
        __int16 v17 = 2048;
        double v18 = v21[1];
        __int16 v19 = 2048;
        double v20 = v21[2];
        _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI) finalization: final rotation: (%lf, %f, %f)\n", buf, 0x20u);
      }
      int v9 = memcmp(v6, __dst, 0x3370uLL);
      BOOL v5 = v9 != 0;
      if (v9)
      {
        size_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v8)
        {
          size_t v10 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI) finalization: Updating PCECalib on disk\n", buf, 2u);
        }
        PCECalibration::save(__dst);
      }
    }
    memcpy(v6, __dst, 0x3370uLL);
    *(unsigned char *)(v4 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 21) = 1;
    PearlIsf::~PearlIsf((PearlIsf *)v12);
  }
  else
  {
    BOOL v5 = 0;
  }
  if (*(unsigned char *)(v4 + 22))
  {
    *(_WORD *)(v4 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(v4 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  }
  return v5;
}

void sub_246922B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PearlIsf::~PearlIsf((PearlIsf *)va);
  _Unwind_Resume(a1);
}

long double calcRotationAngle(const double (*a1)[3][3], double (*a2)[3])
{
  (*a2)[0] = atan2((*a1)[2][1], (*a1)[2][2]) * 1000.0;
  (*a2)[1] = atan2(-(*a1)[2][0], sqrt((*a1)[2][2] * (*a1)[2][2] + (*a1)[2][1] * (*a1)[2][1])) * 1000.0;
  long double result = atan2((*a1)[1][0], (*a1)[0][0]) * 1000.0;
  (*a2)[2] = result;
  return result;
}

BOOL H16ISPColorPearlOnlineCalibrationRunner::isContext(H16ISPColorPearlOnlineCalibrationRunner *this, void *a2)
{
  return *((void *)this + 4) == (void)a2;
}

CFDictionaryRef H16ISPRgbIrRunner::getReport(H16ISPRgbIrRunner *this)
{
  CFDictionaryRef v1 = *(const __CFDictionary **)(*((void *)this + 5) + 8);
  if (!v1) {
    return 0;
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v1);

  *(void *)(*((void *)this + 5) + 8) = 0;
  return Copy;
}

const __CFDictionary *H16ISPRgbIrRunner::validateSession(H16ISPRgbIrRunner *this, __CVBuffer *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  if ((a4 & 1) == 0)
  {
    BOOL v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      BOOL v5 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPPearlCalibrationNode::isSessionOK();
    }
  }
  return a4;
}

BOOL H16ISPRgbIrRunner::validateFrame(H16ISPRgbIrRunner *this, __CVBuffer *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  int v4 = (int)a4;
  if (a3)
  {
    uint64_t v6 = (void *)[(__CFDictionary *)a3 valueForKey:*MEMORY[0x263F2CDD8]];
    if (v6)
    {
      if ([v6 intValue])
      {
        int v7 = (void *)[(__CFDictionary *)a3 valueForKey:*MEMORY[0x263F2D000]];
        if (v7)
        {
          uint64_t v8 = [v7 count];
          BOOL v10 = v8 == 0;
          BOOL result = v8 != 0;
          BOOL v10 = !v10 || v4 == 0;
          if (!v10)
          {
            size_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              size_t v11 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;
            }
            BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
            if (result)
            {
              H16ISPRgbIrRunner::validateFrame();
              return 0;
            }
          }
        }
        else
        {
          if (!v4) {
            return 0;
          }
          CFDictionaryRef v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            CFDictionaryRef v15 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
          }
          BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
          if (result)
          {
            H16ISPRgbIrRunner::validateFrame();
            return 0;
          }
        }
      }
      else
      {
        if (!v4) {
          return 0;
        }
        unsigned __int8 v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          unsigned __int8 v14 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
        }
        BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
        if (result)
        {
          H16ISPRgbIrRunner::validateFrame();
          return 0;
        }
      }
    }
    else
    {
      if (!v4) {
        return 0;
      }
      int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        int v13 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v13;
      }
      BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (result)
      {
        H16ISPRgbIrRunner::validateFrame();
        return 0;
      }
    }
  }
  else
  {
    if (!a4) {
      return 0;
    }
    CFAllocatorRef v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      CFAllocatorRef v12 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v12;
    }
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (result)
    {
      H16ISPRgbIrRunner::validateFrame();
      return 0;
    }
  }
  return result;
}

const __CFDictionary *H16ISPRgbpRunner::validateSession(H16ISPRgbpRunner *this, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, const __CFDictionary *a5, const __CFDictionary *a6)
{
  if ((a6 & 1) == 0)
  {
    int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v7 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPPearlCalibrationNode::isSessionOK();
    }
  }
  return a6;
}

uint64_t H16ISPRgbpRunner::validateFrame(H16ISPRgbpRunner *this, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, const __CFDictionary *a5, const __CFDictionary *a6)
{
  uint64_t result = objc_msgSend(MEMORY[0x263F26C20], "isColorFrameValid:withMetadata:", this, a4, a5, a6);
  if (result)
  {
    int v9 = (void *)MEMORY[0x263F26C20];
    return [v9 isPearlFrameValid:a3 withMetadata:a5];
  }
  return result;
}

void H16ISPRgbpRunner::H16ISPRgbpRunner(H16ISPRgbpRunner *this, void *a2)
{
  *((_WORD *)this + 4) = 0;
  *(void *)((char *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0x100000000;
  *((_DWORD *)this + 5) = 0;
  *((unsigned char *)this + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  *((void *)this + 4) = a2;
  *(void *)this = &unk_26FAEC8E8;
  *((_DWORD *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  *((void *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  *((void *)this + 7) = 0x3FF0000000000000;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  operator new();
}

void H16ISPRgbpRunner::~H16ISPRgbpRunner(H16ISPRgbpRunner *this)
{
  *(void *)this = &unk_26FAEC8E8;
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    dispatch_sync(v2, &__block_literal_global_36);
    dispatch_release(*((dispatch_object_t *)this + 12));
    *((void *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  }
  CVReturn v3 = (const void *)*((void *)this + 9);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 9) = 0;
  }
  int v4 = (RgbpRunnerInternal *)*((void *)this + 5);
  if (v4)
  {
    RgbpRunnerInternal::~RgbpRunnerInternal(v4);
    MEMORY[0x24C53D6E0]();
    *((void *)this + 5) = 0;
  }
}

{
  uint64_t vars8;

  H16ISPRgbpRunner::~H16ISPRgbpRunner(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISPRgbpRunner::setNormalizationParmas(uint64_t this, double a2, double a3)
{
  *(double *)(this + Matrix<double>::~Matrix((uint64_t)this + 56) = a2;
  *(double *)(this + 64) = a3;
  return this;
}

CFDictionaryRef H16ISPRgbpRunner::setColorGdcCoefficients(H16ISPRgbpRunner *this, CFDictionaryRef theDict)
{
  int v4 = (const void *)*((void *)this + 9);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 9) = 0;
  }
  CFDictionaryRef result = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theDict);
  *((void *)this + 9) = result;
  return result;
}

uint64_t H16ISPRgbpRunner::setColorPixelSize(uint64_t this, double a2)
{
  *(double *)(this + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  return this;
}

uint64_t H16ISPRgbpRunner::setPearlVersion(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t H16ISPRgbpRunner::run(uint64_t a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, const __CFDictionary *a5, const __CFDictionary *a6, int a7, double *a8, unsigned __int16 a9)
{
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v10 = 3758097084;
    if (*(unsigned char *)(a1 + 8))
    {
      size_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        size_t v11 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        CFAllocatorRef v12 = "Pearl Calibration (MI): Already running algorithm\n";
LABEL_7:
        _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
        return v10;
      }
    }
    return v10;
  }
  uint64_t v19 = 0;
  int v20 = a9;
  int32x4_t v80 = 0u;
  long long v81 = 0u;
  *(_OWORD *)int buf = 0u;
  int32x4_t v79 = 0u;
  uint64_t v21 = a8 + 1069;
  do
  {
    uint64_t v22 = 0;
    uint64_t v23 = v21;
    do
    {
      double v24 = *v23++;
      float v25 = v24;
      *(float *)&buf[4 * v19 + v22] = v25;
      v22 += 16;
    }
    while (v22 != 48);
    ++v19;
    v21 += 3;
  }
  while (v19 != 3);
  float v26 = a8[1078];
  float v27 = a8[1079];
  float v28 = a8[1080];
  int32x4_t v29 = vzip1q_s32(*(int32x4_t *)buf, v80);
  float32x4_t v30 = (float32x4_t)vtrn2q_s32(*(int32x4_t *)buf, v79);
  v30.i32[2] = v80.i32[1];
  float32x4_t v74 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)buf, v80), vdupq_laneq_s32(v79, 2));
  float32x4_t v75 = (float32x4_t)vzip1q_s32(v29, v79);
  float32x4_t v72 = vnegq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v75, v26), v30, v27), v74, v28));
  int32x4_t v73 = vzip2q_s32(v29, vdupq_lane_s32(*(int32x2_t *)v79.i8, 1));
  int v31 = *(void **)(*(void *)(a1 + 40) + 16);
  if (!v31)
  {
    RgbpRunnerInternal::invalidate(*(RgbpRunnerInternal **)(a1 + 40));
    uint64_t v49 = *(void *)(a1 + 40);
    *(unsigned char *)(v49 + 48) = 0;
    *(void *)uint64_t v49 = 4;
    id v50 = objc_alloc_init(MEMORY[0x263F26C18]);
    [v50 setReportTelemetry:1];
    *(void *)(*(void *)(a1 + 40) + 16) = [objc_alloc(MEMORY[0x263F26C10]) initForEngineType:**(void **)(a1 + 40) andExecutorParameters:v50];

    if ([*(id *)(*(void *)(a1 + 40) + 16) prepare]) {
      goto LABEL_48;
    }
    id v51 = objc_alloc(MEMORY[0x263F26C60]);
    double v52 = *(double *)(a1 + 80);
    *(float *)&double v52 = v52;
    double v53 = objc_msgSend(v51, "initWithPixelSize:gdcModel:cameraToPlatformTransform:", *(void *)(a1 + 72), v52, *MEMORY[0x263EF89A8], *(double *)(MEMORY[0x263EF89A8] + 16), *(double *)(MEMORY[0x263EF89A8] + 32), *(double *)(MEMORY[0x263EF89A8] + 48));
    *(void *)(*(void *)(a1 + 40) + 8) = v53;
    int v54 = (void *)[v53 cameraCalibration];
    int v55 = (void *)[v54 mutableCopy];
    double Width = (double)CVPixelBufferGetWidth(a4);
    double Height = (double)CVPixelBufferGetHeight(a4);
    [v55 referenceDimensions];
    double v60 = v59 / (Height / Width);
    if (v58 < v60) {
      double v60 = v58;
    }
    objc_msgSend(v55, "crop:", (v58 - v60) * 0.5, (v59 - Height / Width * v60) * 0.5);
    objc_msgSend(v55, "scale:", Width, Height);
    int v61 = (void *)[*(id *)(*(void *)(a1 + 40) + 16) pipeline];
    uint64_t v62 = objc_msgSend(v61, "createInterSessionDataWithDictionaryRepresentation:", objc_msgSend(NSDictionary, "dictionaryWithContentsOfFile:", @"/var/mobile/Library/ISP/Pearl/rgbpInterSession.plist"));
    uint64_t v63 = *(void *)(a1 + 40);
    *(void *)(v63 + Matrix<double>::~Matrix((uint64_t)this + 24) = v62;
    if (!v62)
    {
      uint64_t v62 = objc_msgSend((id)objc_msgSend(*(id *)(v63 + 16), "pipeline"), "createInterSessionDataWithFactoryPearlToColorTransform:currentPearlToColorTransform:", *(double *)v75.i64, *(double *)v73.i64, *(double *)v74.i64, *(double *)v72.i64, *(double *)v75.i64, *(double *)v73.i64, *(double *)v74.i64, *(double *)v72.i64);
      *(void *)(*(void *)(a1 + 40) + Matrix<double>::~Matrix((uint64_t)this + 24) = v62;
    }
    id v64 = v62;
    int v65 = (void *)[v54 copy];
    [*(id *)(*(void *)(a1 + 40) + 16) setColorCameraCalibration:v65];
    [*(id *)(*(void *)(a1 + 40) + 16) setPearlCameraCalibration:v55];

    int v31 = *(void **)(*(void *)(a1 + 40) + 16);
    int v20 = a9;
  }
  if (objc_msgSend((id)objc_msgSend(v31, "pipeline"), "isColorFrameValid:withMetadata:", a2, a5))
  {
    if ((objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "pipeline"), "isPearlFrameValid:withMetadata:", a4, a6) & 1) == 0)
    {
      uint64_t v10 = 3758097084;
      if (*(unsigned char *)(a1 + 8))
      {
        size_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          size_t v11 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          CFAllocatorRef v12 = "Pearl Calibration (MI): pearl frame not valid for algorithm\n";
          goto LABEL_7;
        }
      }
      return v10;
    }
    unsigned int v32 = *(void **)(*(void *)(a1 + 40) + 8);
    double WidthOfPlane = (double)CVPixelBufferGetWidthOfPlane(a2, 0);
    objc_msgSend(v32, "updateForFrameWithDimensions:metadataDictionary:", a5, WidthOfPlane, (double)CVPixelBufferGetHeightOfPlane(a2, 0));
    uint64_t v34 = (void *)[*(id *)(*(void *)(a1 + 40) + 8) cameraCalibration];
    double v35 = (void *)[v34 mutableCopy];
    double v36 = (double)CVPixelBufferGetWidth(a4);
    double v37 = (double)CVPixelBufferGetHeight(a4);
    [v35 referenceDimensions];
    double v40 = v39 / (v37 / v36);
    if (v38 < v40) {
      double v40 = v38;
    }
    objc_msgSend(v35, "crop:", (v38 - v40) * 0.5, (v39 - v37 / v36 * v40) * 0.5);
    objc_msgSend(v35, "scale:", v36, v37);
    memset(buf, 0, sizeof(buf));
    v79.i64[0] = 0;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a6, (const void *)*MEMORY[0x263F2C560]);
    CMTimeMakeFromDictionary((CMTime *)buf, Value);
    *(_OWORD *)&time.value = *(_OWORD *)buf;
    time.epoch = v79.i64[0];
    Float64 Seconds = CMTimeGetSeconds(&time);
    int v43 = *(void **)(*(void *)(a1 + 40) + 16);
    long long v44 = *MEMORY[0x263EF89A8];
    long long v45 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    long long v46 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    long long v47 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    if (a7) {
      uint64_t v48 = objc_msgSend(v43, "preprocessInputColorFrame:pearlDepth:pearlPoses:pceCameraCalibration:pearlCameraCalibrationTransform:colorCameraCalibration:timestamp:", a2, a4, v35, v34, *(double *)&v44, *(double *)&v45, *(double *)&v46, *(double *)&v47, *(double *)v75.i64, *(double *)v73.i64, *(double *)v74.i64, *(double *)v72.i64, *(void *)&Seconds);
    }
    else {
      uint64_t v48 = objc_msgSend(v43, "preprocessInputColorFrame:pearlNormalizedDX:pearlPoses:disparityNormalizationMultiplier:disparityNormalizationOffset:pceCameraCalibration:pearlCameraCalibrationTransform:colorCameraCalibration:timestamp:", a2, a4, v35, v34, *(double *)&v44, *(double *)&v45, *(double *)&v46, *(double *)&v47, *(double *)(a1 + 56), *(double *)(a1 + 64), *(_OWORD *)&v75, *(_OWORD *)&v73, *(_OWORD *)&v74, *(_OWORD *)&v72, *(void *)&Seconds);
    }
    uint64_t v66 = v48;

    if (!v66)
    {
      if (a2)
      {
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        CVPixelBufferGetBaseAddressOfPlane(a2, 0);
        CVPixelBufferUnlockBaseAddress(a2, 1uLL);
        int v67 = 0xFFFF;
      }
      else
      {
        int v67 = 0;
      }
      if (a3)
      {
        CVPixelBufferLockBaseAddress(a3, 1uLL);
        CVPixelBufferGetBaseAddress(a3);
        v67 ^= 0xFFFFu;
        CVPixelBufferUnlockBaseAddress(a3, 1uLL);
      }
      if (a4)
      {
        CVPixelBufferLockBaseAddress(a4, 1uLL);
        CVPixelBufferGetBaseAddress(a4);
        v67 ^= 0xFFFFu;
        CVPixelBufferUnlockBaseAddress(a4, 1uLL);
      }
      if (v67 == v20)
      {
        if (*(unsigned char *)(a1 + 23)) {
          dumpBuffers(a2, a5, (FILE *)a3, a6, (FILE *)a4);
        }
        *(unsigned char *)(a1 + 9) = 1;
        id v68 = *(id *)(*(void *)(a1 + 40) + 16);
        id v69 = *(id *)(*(void *)(a1 + 40) + 24);
        uint64_t v70 = *(NSObject **)(a1 + 96);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 3221225472;
        block[2] = ___ZN16H16ISPRgbpRunner3runEP10__CVBufferS1_S1_PK14__CFDictionaryS4_b26sCIspCmdChPearlCalibrationt_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = a1;
        dispatch_async(v70, block);
        return 0;
      }
    }
LABEL_48:
    uint64_t v10 = 3758097084;
    ++*(_DWORD *)(a1 + 12);
    return v10;
  }
  uint64_t v10 = 3758097084;
  if (*(unsigned char *)(a1 + 8))
  {
    size_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      size_t v11 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      CFAllocatorRef v12 = "Pearl Calibration (MI): color frame not valid for algorithm\n";
      goto LABEL_7;
    }
  }
  return v10;
}

double RgbpRunnerInternal::invalidate(RgbpRunnerInternal *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2) {

  }
  CVReturn v3 = (void *)*((void *)this + 1);
  if (v3) {

  }
  int v4 = (void *)*((void *)this + 4);
  if (v4) {

  }
  BOOL v5 = (void *)*((void *)this + 3);
  if (v5) {

  }
  *((unsigned char *)this + 48) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + Matrix<double>::~Matrix((uint64_t)this + 24) = 0u;
  return result;
}

void ___ZN16H16ISPRgbpRunner3runEP10__CVBufferS1_S1_PK14__CFDictionaryS4_b26sCIspCmdChPearlCalibrationt_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(*(void *)(v1 + 40) + 32);
  if (v2) {

  }
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)(v4 + 32) = v3;
  uint64_t v5 = [*(id *)(v4 + 16) executePreprocessedInputsWithInterSessionData:*(void *)(v4 + 24) outResult:v3];
  *(unsigned char *)(v1 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5 == 0;
  uint64_t v6 = *(void *)(v1 + 40);
  *(unsigned char *)(v6 + 48) = 0;
  *(unsigned char *)(v1 + 9) = 0;
  ++*(_DWORD *)(v1 + 12);
  if (!v5)
  {
    int v7 = [*(id *)(v6 + 32) executed];
    uint64_t v6 = *(void *)(v1 + 40);
    if (v7)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      if (v8)
      {

        uint64_t v6 = *(void *)(v1 + 40);
      }
      int v9 = *(void **)(v6 + 32);
      *(void *)(v6 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v9;
      id v10 = v9;
      uint64_t v6 = *(void *)(v1 + 40);
    }
  }
  objc_msgSend((id)objc_msgSend(*(id *)(v6 + 24), "persistenceData"), "writeToFile:atomically:", @"/var/mobile/Library/ISP/Pearl/rgbpInterSession.plist", 1);

  size_t v11 = *(void **)(*(void *)(v1 + 40) + 24);
}

uint64_t H16ISPRgbpRunner::getUpdatedPceCalib(uint64_t a1, uint64_t a2)
{
  v39[3] = *(double *)MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 88)) {
    return 0;
  }
  uint64_t v4 = *(id **)(a1 + 40);
  if (!v4[5])
  {
    uint64_t v2 = 0;
    goto LABEL_30;
  }
  [v4[5] pearlToColorExtrinsics];
  uint64_t v6 = 0;
  LOBYTE(v2) = 0;
  int32x4_t v9 = vzip1q_s32(v7, v8);
  int32x4_t v10 = vzip2q_s32(v7, v8);
  int32x4_t v12 = vdupq_laneq_s32(v11, 2);
  float32x4_t v13 = (float32x4_t)vtrn2q_s32(v7, v11);
  v13.i32[2] = v8.i32[1];
  float32x4_t v14 = (float32x4_t)vzip1q_s32(v9, v11);
  float32x4_t v15 = (float32x4_t)vzip1q_s32(v10, v12);
  __int32 v26 = v8.i32[0];
  uint64_t v25 = v14.i64[0];
  float32x4_t v17 = vnegq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v16.f32[0]), v13, *(float32x2_t *)v16.f32, 1), v15, v16, 2));
  __int32 v28 = v8.i32[1];
  __int32 v30 = v8.i32[2];
  uint64_t v27 = v13.i64[0];
  uint64_t v29 = v15.i64[0];
  __int32 v32 = v17.i32[2];
  uint64_t v31 = v17.i64[0];
  uint64_t v18 = a2 + 8552;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      if (v2)
      {
        double v20 = *(float *)((unint64_t)(&v25 + 2 * i) & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
LABEL_9:
        uint64_t v2 = 1;
        goto LABEL_10;
      }
      double v20 = *(float *)((unint64_t)(&v25 + 2 * i) & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
      if (*(double *)(v18 + 8 * i) != v20) {
        goto LABEL_9;
      }
      uint64_t v2 = 0;
LABEL_10:
      *(double *)(v18 + 8 * i) = v20;
    }
    ++v6;
    v18 += 24;
  }
  while (v6 != 3);
  memset(v39, 0, 24);
  calcRotationAngle((const double (*)[3][3])(a2 + 8552), (double (*)[3])v39);
  uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  uint64_t v22 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v21 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v21;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134218496;
    double v34 = v39[0];
    __int16 v35 = 2048;
    double v36 = v39[1];
    __int16 v37 = 2048;
    double v38 = v39[2];
    _os_log_impl(&dword_24680F000, v21, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI) finalization: final rotation: (%lf, %f, %f)\n", buf, 0x20u);
  }
  uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (v2)
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v22)
    {
      uint64_t v23 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v23;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, v23, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI) finalization: Updating PCECalib on disk\n", buf, 2u);
    }
    PCECalibration::save(a2);
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v22)
    {
      uint64_t v23 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v23;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, v23, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI) finalization: No changes to PCECalib\n", buf, 2u);
    }
  }
  *(unsigned char *)(a1 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 21) = 1;

  uint64_t v4 = *(id **)(a1 + 40);
  v4[5] = 0;
LABEL_30:
  RgbpRunnerInternal::invalidate((RgbpRunnerInternal *)v4);
  if (*(unsigned char *)(a1 + 22))
  {
    *(_WORD *)(a1 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(a1 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  }
  return v2;
}

uint64_t H16ISPRgbpRunner::getReport(H16ISPRgbpRunner *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = *(void **)(v2 + 32);
  if (!v3 || *(unsigned char *)(v2 + 48)) {
    return 0;
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(v3, "dictionaryRepresentation"), "copy");
  *(unsigned char *)(*((void *)this + 5) + 48) = 1;
  return result;
}

void dumpMetadata(const __CFDictionary *a1, const char *a2, const char *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    snprintf(__str, 0x400uLL, "%s%s-metadata.plist", a2, a3);
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
    CFStringRef v6 = CFStringCreateWithCString(v4, __str, SystemEncoding);
    CFURLRef v7 = CFURLCreateWithFileSystemPath(v4, v6, kCFURLPOSIXPathStyle, 0);
    int32x4_t v8 = CFWriteStreamCreateWithFile(v4, v7);
    CFWriteStreamOpen(v8);
    CFPropertyListWrite(a1, v8, kCFPropertyListXMLFormat_v1_0, 0, 0);
    CFWriteStreamClose(v8);
    CFRelease(v8);
    CFRelease(v7);
    CFRelease(v6);
  }
}

FILE *dumpSinglePlaneBuffer(FILE *result, const char *a2, const char *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v5 = (__CVBuffer *)result;
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)result);
    v12[0] = HIBYTE(PixelFormatType);
    v12[1] = BYTE2(PixelFormatType);
    xpc_object_t v12[2] = BYTE1(PixelFormatType);
    v12[3] = PixelFormatType;
    void v12[4] = 0;
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v5);
    size_t Width = CVPixelBufferGetWidth(v5);
    size_t Height = CVPixelBufferGetHeight(v5);
    snprintf(__str, 0x400uLL, "%s%s.%lux%lu.%lu.%s.bin", a2, a3, Width, Height, BytesPerRow, v12);
    uint64_t result = fopen(__str, "wb");
    if (result)
    {
      uint64_t v10 = result;
      CVPixelBufferLockBaseAddress(v5, 0);
      BaseAddress = CVPixelBufferGetBaseAddress(v5);
      fwrite(BaseAddress, Height * BytesPerRow, 1uLL, v10);
      fclose(v10);
      return (FILE *)CVPixelBufferUnlockBaseAddress(v5, 0);
    }
  }
  return result;
}

void RgbpRunnerInternal::~RgbpRunnerInternal(RgbpRunnerInternal *this)
{
  RgbpRunnerInternal::invalidate(this);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2) {
}
  }

void GeomUtils::FindSpots(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = 0;
  uint64_t v19 = 1;
  char v20 = 0;
  float32x4_t v17 = &unk_26FAEAF48;
  uint64_t v15 = 1;
  char v16 = 0;
  float32x4_t v13 = &unk_26FAEAF48;
  uint64_t v14 = 0;
  uint64_t v11 = 1;
  char v12 = 0;
  int32x4_t v9 = &unk_26FAEAF48;
  uint64_t v10 = 0;
  uint64_t v7 = 1;
  char v8 = 0;
  uint64_t v5 = &unk_26FAEAF48;
  uint64_t v6 = 0;
  v3[6] = 1;
  char v4 = 0;
  _DWORD v3[4] = &unk_26FAEAF48;
  v3[5] = 0;
  Matrix<double>::Matrix((uint64_t)v3, a3, 0, -1);
}

void sub_2469251E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  Matrix<double>::~Matrix((uint64_t)&a15);
  Matrix<double>::~Matrix((uint64_t)&a19);
  Matrix<double>::~Matrix((uint64_t)&a23);
  Matrix<double>::~Matrix((uint64_t)&a27);
  Matrix<double>::~Matrix((uint64_t)&a31);
  Matrix<double>::~Matrix(v71 - 232);
  Matrix<double>::~Matrix(v71 - 200);
  Matrix<double>::~Matrix((uint64_t)&a39);
  Matrix<double>::~Matrix((uint64_t)&a59);
  Matrix<double>::~Matrix((uint64_t)&a63);
  Matrix<double>::~Matrix((uint64_t)&a67);
  Matrix<double>::~Matrix((uint64_t)&a71);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void GeomUtils::ImTxTy2AlphaBeta<double>(int a1, uint64_t a2, int a3, int a4, int a5, Algo *this, Algo *a7, int a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15)
{
  int v16 = (int)this;
  Algo::LinearSpace(this, a10, a11, (uint64_t)&v40);
  Matrix<double>::Resize(a14, v42, v43);
  memcpy(*(void **)(a14 + 8), v41, 8 * *(unsigned int *)(a14 + 16) * (unint64_t)*(unsigned int *)(a14 + 20));
  Matrix<double>::~Matrix((uint64_t)&v40);
  Algo::LinearSpace(a7, a12, a13, (uint64_t)&v40);
  Matrix<double>::Resize(a15, v42, v43);
  memcpy(*(void **)(a15 + 8), v41, 8 * *(unsigned int *)(a15 + 16) * (unint64_t)*(unsigned int *)(a15 + 20));
  Matrix<double>::~Matrix((uint64_t)&v40);
  Matrix<double>::Matrix((uint64_t)v39, (int)a7, v16);
  Matrix<double>::Matrix((uint64_t)v38, (int)a7, v16);
  v34[0] = &unk_26FAEAF18;
  char v20 = *(const void **)(a14 + 8);
  int v21 = *(_DWORD *)(a14 + 16);
  int v22 = *(_DWORD *)(a14 + 20);
  double v40 = &unk_26FAEAF18;
  uint64_t v41 = v20;
  int v42 = v21;
  int v43 = v22;
  char v44 = 0;
  v34[1] = v20;
  int v35 = v21;
  int v36 = v22;
  char v37 = 0;
  uint64_t v23 = Matrix<double>::~Matrix((uint64_t)&v40);
  v30[0] = &unk_26FAEAF18;
  double v24 = *(const void **)(a15 + 8);
  int v25 = *(_DWORD *)(a15 + 16);
  int v26 = *(_DWORD *)(a15 + 20);
  double v40 = &unk_26FAEAF18;
  uint64_t v41 = v24;
  int v42 = v25;
  int v43 = v26;
  char v44 = 0;
  v30[1] = v24;
  int v31 = v25;
  int v32 = v26;
  char v33 = 0;
  Matrix<double>::~Matrix(v23);
  Algo::MeshGrid<double>((uint64_t)v34, (uint64_t)v30, (uint64_t)v39, (uint64_t)v38);
  LODWORD(a7) = a7 * v16;
  Matrix<double>::~Matrix((uint64_t)v30);
  Matrix<double>::~Matrix((uint64_t)v34);
  Matrix<double>::Matrix((uint64_t)&v29, 1, (int)a7);
  uint64_t v29 = &unk_26FAEAF48;
  Matrix<double>::Matrix((uint64_t)&v28, 1, (int)a7);
  __int32 v28 = &unk_26FAEAF48;
  Matrix<double>::Matrix((uint64_t)v27, a2, 0, -1);
}

void sub_246925890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  Matrix<double>::~Matrix((uint64_t)&a10);
  Matrix<double>::~Matrix(v38 - 152);
  Matrix<double>::~Matrix((uint64_t)&a34);
  Matrix<double>::~Matrix((uint64_t)&a38);
  Matrix<double>::~Matrix(v38 - 216);
  Matrix<double>::~Matrix(v38 - 184);
  _Unwind_Resume(a1);
}

void sub_24692591C()
{
}

void sub_246925924()
{
}

void sub_24692592C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void sub_246925940()
{
}

void sub_246925948()
{
}

void GeomUtils::GetLocationsOnWall<double>()
{
  v0 = &unk_26FAEAF18;
  operator new[]();
}

void sub_24692636C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  Matrix<double>::~Matrix(v71 - 128);
  Matrix<double>::~Matrix((uint64_t)&a14);
  Matrix<double>::~Matrix((uint64_t)&a18);
  Matrix<double>::~Matrix((uint64_t)&a22);
  Matrix<double>::~Matrix((uint64_t)&a26);
  Matrix<double>::~Matrix((uint64_t)&a30);
  Matrix<double>::~Matrix((uint64_t)&a34);
  Matrix<double>::~Matrix((uint64_t)&a38);
  Matrix<double>::~Matrix((uint64_t)&a42);
  Matrix<double>::~Matrix((uint64_t)&a46);
  Matrix<double>::~Matrix((uint64_t)&a51);
  Matrix<double>::~Matrix((uint64_t)&a55);
  Matrix<double>::~Matrix((uint64_t)&a59);
  Matrix<double>::~Matrix((uint64_t)&a63);
  Matrix<double>::~Matrix((uint64_t)&a67);
  Matrix<double>::~Matrix((uint64_t)&a71);
  Matrix<double>::~Matrix(v71 - 192);
  Matrix<double>::~Matrix(v71 - 160);
  _Unwind_Resume(a1);
}

uint64_t GeomUtils::ApproxPolyDP(uint64_t a1, int a2, uint64_t a3, double a4)
{
  int v7 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  double v10 = a4 * a4;
  uint64_t v11 = *(unsigned int *)(a1 + 20);
  uint64_t v12 = *(void *)(a1 + 8);
  double v13 = 0.0;
  while (1)
  {
    unsigned int v14 = v8;
    if (v11)
    {
      uint64_t v15 = 0;
      int v16 = (double *)(v12 + 8 * v8);
      double v17 = *v16;
      double v18 = v16[v11];
      unsigned int v8 = v14;
      do
      {
        double v19 = (*(double *)(v12 + 8 * v11 + 8 * v15) - v18) * (*(double *)(v12 + 8 * v11 + 8 * v15) - v18);
        if (v19 + (*(double *)(v12 + 8 * v15) - v17) * (*(double *)(v12 + 8 * v15) - v17) > v13)
        {
          unsigned int v8 = v15;
          double v13 = v19 + (*(double *)(v12 + 8 * v15) - v17) * (*(double *)(v12 + 8 * v15) - v17);
        }
        ++v15;
      }
      while (v11 != v15);
    }
    if (v14 == v8) {
      break;
    }
    ++v7;
    unsigned int v9 = v14;
    if (v7 == 3) {
      goto LABEL_11;
    }
  }
  unsigned int v8 = v14;
  unsigned int v14 = v9;
LABEL_11:
  if (v14 >= v8) {
    unsigned int v20 = v8;
  }
  else {
    unsigned int v20 = v14;
  }
  if (v14 <= v8) {
    unsigned int v21 = v8;
  }
  else {
    unsigned int v21 = v14;
  }
  if (v13 <= v10)
  {
    uint64_t result = Matrix<double>::Resize(a3, 2, 1);
    **(void **)(a3 + 8) = *(void *)(*(void *)(a1 + 8) + 8 * v20);
    *(void *)(*(void *)(a3 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8 * (v20 + v11));
    return result;
  }
  uint64_t v22 = v21 - v20 + 1;
  if (a2) {
    int v23 = 2;
  }
  else {
    int v23 = 1;
  }
  uint64_t v24 = (v11 - v22 + v23);
  Matrix<double>::Matrix((uint64_t)&v57, 2, v21 - v20 + 1);
  unsigned int v57 = &unk_26FAEC0F0;
  Matrix<double>::Matrix((uint64_t)&v55, 2, v24);
  int v48 = a2;
  int v55 = &unk_26FAEC0F0;
  int v25 = *(char **)(a1 + 8);
  int v26 = __dst;
  memcpy(__dst, &v25[8 * v20], 8 * (v21 - v20 + 1));
  memcpy(&v26[v21 - v20 + 1], &v25[8 * v20 + 8 * v11], 8 * (v21 - v20 + 1));
  uint64_t v27 = (char *)v56;
  memcpy(v56, &v25[8 * v21], 8 * (v11 - v21));
  memcpy(&v27[8 * v24], &v25[8 * v21 + 8 * v11], 8 * (v11 - v21));
  memcpy(&v27[8 * v11 + -8 * v21], v25, 8 * (v20 + 1));
  if (v48) {
    size_t v28 = 8 * (v20 + 1);
  }
  else {
    size_t v28 = 8 * v20;
  }
  memcpy(&v27[8 * v11 + 8 * v24 + -8 * v21], &v25[8 * v11], v28);
  __p = 0;
  unint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t v51 = 0;
  int v29 = GeomUtils::ApproxPolyDP((uint64_t)&v57, &__p, v10);
  int v30 = GeomUtils::ApproxPolyDP((uint64_t)&v55, &v49, v10);
  if (v48) {
    int v31 = -2;
  }
  else {
    int v31 = -1;
  }
  int v32 = v29 + v31 + v30;
  Matrix<double>::Resize(a3, 2, v32);
  char v33 = *(void **)(a3 + 8);
  double v34 = (char *)__p;
  int v35 = v53 & 0x3F;
  if (v53 > 0x3F || (v53 & 0x3F) != 0)
  {
    int v36 = 0;
    char v37 = (char *)__p + 8 * (v53 >> 6);
    do
    {
      if ((*(void *)v34 >> v36))
      {
        *char v33 = *v26;
        v33[v32] = v26[v22];
        ++v33;
      }
      v34 += 8 * (v36 == 63);
      if (v36 == 63) {
        int v36 = 0;
      }
      else {
        ++v36;
      }
      ++v26;
    }
    while (v34 != v37 || v36 != v35);
  }
  double v39 = v49;
  double v40 = &v49[8 * (v50 >> 6)];
  int v41 = v50 & 0x3F;
  if (v48)
  {
    if ((v50 & 0x3F) == 0)
    {
      v40 -= 8;
      int v41 = 63;
      goto LABEL_48;
    }
    --v41;
  }
  if (v50 > 0x3F || v41 != 1)
  {
LABEL_48:
    int v43 = v27 + 8;
    int v44 = 1;
    long long v45 = v49;
    do
    {
      if ((*(void *)v45 >> v44))
      {
        *char v33 = *v43;
        v33[v32] = v43[v24];
        ++v33;
      }
      v45 += 8 * (v44 == 63);
      if (v44 == 63) {
        int v44 = 0;
      }
      else {
        ++v44;
      }
      ++v43;
    }
    while (v45 != v40 || v44 != v41);
  }
  if (v39) {
    operator delete(v39);
  }
  if (__p) {
    operator delete(__p);
  }
  Matrix<double>::~Matrix((uint64_t)&v55);
  return Matrix<double>::~Matrix((uint64_t)&v57);
}

void sub_246926894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  Matrix<double>::~Matrix((uint64_t)&a18);
  Matrix<double>::~Matrix((uint64_t)&a22);
  _Unwind_Resume(a1);
}

unint64_t GeomUtils::ApproxPolyDP(uint64_t a1, void *a2, double a3)
{
  unint64_t v6 = *(unsigned int *)(a1 + 20);
  __p = 0;
  double v60 = 0;
  int v61 = 0;
  std::vector<std::pair<unsigned int,unsigned int>>::reserve(&__p, v6);
  uint64_t v7 = (v6 - 1);
  unsigned int v8 = v60;
  if (v60 >= v61)
  {
    uint64_t v10 = (v60 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = (v61 - (unsigned char *)__p) >> 2;
    if (v11 <= v10 + 1) {
      unint64_t v11 = v10 + 1;
    }
    if ((unint64_t)(v61 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      double v13 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)&v61, v12);
    }
    else {
      double v13 = 0;
    }
    unsigned int v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    *(void *)unsigned int v14 = v7 << 32;
    unsigned int v9 = v14 + 8;
    double v17 = (char *)__p;
    int v16 = v60;
    if (v60 != __p)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int v16 = (char *)__p;
    }
    __p = v14;
    double v60 = v9;
    int v61 = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(void *)double v60 = v7 << 32;
    unsigned int v9 = v8 + 8;
  }
  double v60 = v9;
  std::vector<BOOL>::resize((uint64_t)a2, v6, 0);
  if (a2[1])
  {
    int v19 = 0;
    unsigned int v20 = (void *)*a2;
    unsigned int v21 = (void *)*a2;
    do
    {
      *v21 |= 1 << v19;
      v21 += v19 == 63;
      if (v19 == 63) {
        int v19 = 0;
      }
      else {
        ++v19;
      }
    }
    while (v21 != &v20[a2[1] >> 6] || v19 != (a2[1] & 0x3F));
  }
  int v23 = __p;
  uint64_t v24 = v60;
  if (v60 != __p)
  {
    int v25 = v60;
    unint64_t v26 = v6;
    while (1)
    {
      uint64_t v28 = *((unsigned int *)v24 - 2);
      uint64_t v27 = *((unsigned int *)v24 - 1);
      v24 -= 8;
      double v60 = v24;
      uint64_t v29 = *(void *)(a1 + 8);
      double v30 = *(double *)(v29 + 8 * v28);
      double v31 = *(double *)(v29 + 8 * (v28 + v6));
      double v32 = *(double *)(v29 + 8 * v27) - v30;
      double v33 = *(double *)(v29 + 8 * (v27 + v6)) - v31;
      unint64_t v34 = (v28 + 1);
      if (v34 >= v27)
      {
        uint64_t v38 = v27;
        if (0.0 / (v33 * v33 + v32 * v32) > a3) {
          goto LABEL_43;
        }
      }
      else
      {
        int v35 = (double *)(v29 + 8 * v34);
        double v36 = 0.0;
        unsigned int v37 = v28 + 1;
        LODWORD(v38) = v27;
        do
        {
          double v39 = fabs((*v35 - v30) * v33 - (v35[v6] - v31) * v32);
          if (v39 <= v36) {
            uint64_t v38 = v38;
          }
          else {
            uint64_t v38 = v37;
          }
          if (v39 > v36) {
            double v36 = v39;
          }
          ++v37;
          ++v35;
        }
        while (v27 != v37);
        if (v36 * v36 / (v33 * v33 + v32 * v32) > a3)
        {
LABEL_43:
          if (v24 >= v61)
          {
            uint64_t v41 = (v24 - v23) >> 3;
            if ((unint64_t)(v41 + 1) >> 61) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = v61 - v23;
            uint64_t v43 = v42 >> 2;
            if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
              uint64_t v43 = v41 + 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v43;
            }
            if (v44) {
              long long v45 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)&v61, v44);
            }
            else {
              long long v45 = 0;
            }
            long long v46 = &v45[8 * v41];
            *(void *)long long v46 = v28 | (v38 << 32);
            int v25 = v46 + 8;
            int v48 = (char *)__p;
            long long v47 = v60;
            if (v60 != __p)
            {
              do
              {
                uint64_t v49 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v46 - 1) = v49;
                v46 -= 8;
              }
              while (v47 != v48);
              long long v47 = (char *)__p;
            }
            __p = v46;
            double v60 = v25;
            int v61 = &v45[8 * v44];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(void *)uint64_t v24 = v28 | (v38 << 32);
          }
          double v60 = v25;
          if (v25 >= v61)
          {
            uint64_t v50 = (v25 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v50 + 1) >> 61) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v51 = (v61 - (unsigned char *)__p) >> 2;
            if (v51 <= v50 + 1) {
              unint64_t v51 = v50 + 1;
            }
            if ((unint64_t)(v61 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v51;
            }
            if (v52) {
              unint64_t v53 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)&v61, v52);
            }
            else {
              unint64_t v53 = 0;
            }
            uint64_t v54 = &v53[8 * v50];
            *(void *)uint64_t v54 = v38 | (unint64_t)(v27 << 32);
            uint64_t v24 = v54 + 8;
            int v56 = (char *)__p;
            int v55 = v60;
            if (v60 != __p)
            {
              do
              {
                uint64_t v57 = *((void *)v55 - 1);
                v55 -= 8;
                *((void *)v54 - 1) = v57;
                v54 -= 8;
              }
              while (v55 != v56);
              int v55 = (char *)__p;
            }
            __p = v54;
            double v60 = v24;
            int v61 = &v53[8 * v52];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(void *)int v25 = v38 | (unint64_t)(v27 << 32);
            uint64_t v24 = v25 + 8;
          }
          double v60 = v24;
          goto LABEL_76;
        }
        unint64_t v26 = (v26 + v28 - v27 + 1);
        int v40 = ~v28 + v27;
        do
        {
          if (a2[1] <= v34) {
            std::vector<ImageUtils::Blob>::__throw_out_of_range[abi:ne180100]();
          }
          *(void *)(*a2 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v34);
          ++v34;
          --v40;
        }
        while (v40);
      }
LABEL_76:
      int v23 = __p;
      int v25 = v24;
      if (v24 == __p) {
        goto LABEL_79;
      }
    }
  }
  unint64_t v26 = v6;
  if (v60)
  {
LABEL_79:
    double v60 = v24;
    operator delete(v24);
    return v26;
  }
  return v6;
}

void sub_246926D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GeomUtils::AlgebricCameraCalibration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  unint64_t v4 = (unint64_t)(a1[1] - *a1) >> 5;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v4)
  {
    uint64_t v22 = &unk_26FAEAF18;
    int v23 = 0;
    uint64_t v24 = 0;
    char v25 = 0;
    GeomUtils::ComputeHomography(v3, v2);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  std::vector<Matrix<double>>::__init_with_size[abi:ne180100]<Matrix<double>*,Matrix<double>*>(&v12, 0, 0, 0);
  uint64_t v5 = v12;
  uint64_t v6 = v13 - v12;
  unint64_t v7 = (unint64_t)(v13 - v12) >> 5;
  Matrix<double>::Matrix((uint64_t)&v22, 2 * v7, 4);
  if (v7)
  {
    unsigned int v8 = v23;
    unsigned int v9 = (double **)(v5 + 8);
    do
    {
      uint64_t v10 = *v9;
      v9 += 4;
      *unsigned int v8 = v10[3] * v10[4] + *v10 * v10[1];
      v8[1] = v10[6] * v10[1] + *v10 * v10[7];
      v8[2] = v10[6] * v10[4] + v10[3] * v10[7];
      v8[3] = v10[6] * v10[7];
      unint64_t v11 = (double *)((char *)v8 + (v6 & 0x7FFFFFFE0));
      double *v11 = v10[3] * v10[3] + *v10 * *v10 - v10[1] * v10[1] - v10[4] * v10[4];
      v11[1] = v10[1] * -2.0 * v10[7] + (*v10 + *v10) * v10[6];
      _DWORD v11[2] = v10[4] * -2.0 * v10[7] + (v10[3] + v10[3]) * v10[6];
      long double v11[3] = v10[6] * v10[6] - v10[7] * v10[7];
      v8 += 4;
      LODWORD(v7) = v7 - 1;
    }
    while (v7);
  }
  uint64_t v20 = 1;
  char v21 = 0;
  uint64_t v18 = &unk_26FAEAF48;
  uint64_t v19 = 0;
  Matrix<double>::Svd0LowestSingularVector((uint64_t)&v22);
}

void sub_2469271FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void **a28)
{
  Matrix<double>::~Matrix((uint64_t)&a28);
  Matrix<double>::~Matrix(v28 - 136);
  a28 = (void **)&a18;
  std::vector<Matrix<double>>::__destroy_vector::operator()[abi:ne180100](&a28);
  a28 = (void **)&a25;
  std::vector<Matrix<double>>::__destroy_vector::operator()[abi:ne180100](&a28);
  _Unwind_Resume(a1);
}

void GeomUtils::ComputeHomography(uint64_t a1, uint64_t a2)
{
  GeomUtils::ToHomg(a2, (uint64_t)v4);
  GeomUtils::ToHomg(a1, (uint64_t)v3);
  GeomUtils::ComputeHomography((uint64_t)v3, (uint64_t)v4);
}

{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double *v13;
  char *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *__src;
  uint64_t v21;
  char v22;
  char v23[8];
  void *__dst;
  int v25;
  char v26;
  void *v27;
  char *v28;
  int v29;
  int v30;
  char v31;
  void *v32;
  void *v33;
  uint64_t v34;
  char v35;
  double v36[3];
  char v37;
  char v38[8];
  const double *v39;
  int v40;
  int v41;
  char v42[8];
  const double *v43;
  int v44;
  int v45;
  void v46[9];
  double v47;
  const double *v48;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  int v56 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(unsigned int *)(a1 + 20);
  Matrix<double>::Row(a2, 0, (uint64_t)v42);
  Matrix<double>::Row(a2, 1, (uint64_t)v38);
  long long v47 = 0.0;
  vDSPMeanv<double>(v43, 1, &v47, v45 * v44);
  uint64_t v5 = v47;
  long long v47 = 0.0;
  vDSPMeanv<double>(v39, 1, &v47, v41 * v40);
  uint64_t v6 = v47;
  MatrixNxPts<1u,double>::operator-((uint64_t)v42, (uint64_t)v46, v5);
  MatrixNxPts<1u,double>::Abs((uint64_t)v46, (uint64_t)&v47);
  v36[0] = 0.0;
  vDSPMeanv<double>(v48, 1, v36, HIDWORD(v49) * LODWORD(v49));
  unint64_t v7 = v36[0];
  Matrix<double>::~Matrix((uint64_t)&v47);
  Matrix<double>::~Matrix((uint64_t)v46);
  MatrixNxPts<1u,double>::operator-((uint64_t)v38, (uint64_t)v46, v6);
  MatrixNxPts<1u,double>::Abs((uint64_t)v46, (uint64_t)&v47);
  v36[0] = 0.0;
  vDSPMeanv<double>(v48, 1, v36, HIDWORD(v49) * LODWORD(v49));
  unsigned int v8 = v36[0];
  Matrix<double>::~Matrix((uint64_t)&v47);
  Matrix<double>::~Matrix((uint64_t)v46);
  long long v47 = 1.0 / v7;
  int v48 = 0;
  uint64_t v49 = -v5 / v7;
  uint64_t v50 = 0;
  unint64_t v51 = 1.0 / v8;
  unint64_t v52 = -v6 / v8;
  unint64_t v53 = 0;
  uint64_t v54 = 0;
  int v55 = 0x3FF0000000000000;
  *(double *)long long v46 = v7;
  v46[1] = 0;
  *(double *)&v46[2] = v5;
  void v46[3] = 0;
  *(double *)&v46[4] = v8;
  *(double *)&v46[5] = v6;
  v46[6] = 0;
  v46[7] = 0;
  v46[8] = 0x3FF0000000000000;
  *(void *)&v36[0] = &unk_26FAEAF18;
  *(void *)&v36[1] = &v47;
  *(void *)&v36[2] = 0x300000003;
  unsigned int v37 = 0;
  double v32 = &unk_26FAEAF18;
  double v33 = v46;
  unint64_t v34 = 0x300000003;
  int v35 = 0;
  Matrix<double>::operator*((uint64_t)v36, a2, (uint64_t)v23);
  unsigned int v9 = (char *)__dst;
  double v31 = v26;
  __dst = 0;
  unint64_t v26 = 0;
  uint64_t v27 = &unk_26FAEB100;
  uint64_t v28 = v9;
  uint64_t v29 = 3;
  double v30 = v25;
  Matrix<double>::~Matrix((uint64_t)v23);
  Matrix<double>::Matrix((uint64_t)v23, 2 * v4, 9);
  if (v4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = v28;
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = (double *)__dst;
    uint64_t v14 = &v28[8 * v4];
    do
    {
      uint64_t v15 = *(double *)(v12 + 8 * v10);
      uint64_t v16 = *(double *)(v12 + 8 * v4 + 8 * v10);
      uint64_t v17 = *(double *)&v11[8 * v10];
      uint64_t v18 = *(double *)&v14[8 * v10];
      *uint64_t v13 = v15;
      v13[1] = v16;
      _DWORD v13[2] = 1.0;
      v13[3] = 0.0;
      unsigned __int8 v13[4] = 0.0;
      integer_t v13[5] = 0.0;
      v13[6] = -(v17 * v15);
      v13[7] = -(v17 * v16);
      unsigned char v13[8] = -v17;
      v13[10] = 0.0;
      v13[11] = 0.0;
      v13[9] = 0.0;
      v13[12] = v15;
      v13[13] = v16;
      v13[14] = 1.0;
      v13[15] = -(v18 * v15);
      v13[16] = -(v18 * v16);
      v13[17] = -v18;
      ++v10;
      v13 += 18;
    }
    while (v4 != v10);
    if (v4 > 4) {
      Matrix<double>::Transpose((uint64_t)v23);
    }
  }
  char v21 = 1;
  uint64_t v22 = 0;
  uint64_t v19 = &unk_26FAEAF48;
  __srCC_SHA256_CTX c = 0;
  Matrix<double>::Svd0LowestSingularVector((uint64_t)v23);
}

void sub_246927308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void Matrix<double>::operator*(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_24692737C(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void GeomUtils::estimatePlanePosition(uint64_t a1)
{
}

void sub_246927820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  Matrix<double>::~Matrix((uint64_t)&a9);
  Matrix<double>::~Matrix(v25 - 80);
  Matrix<double>::~Matrix((uint64_t)&a13);
  Matrix<double>::~Matrix((uint64_t)&a17);
  Matrix<double>::~Matrix((uint64_t)&a21);
  Matrix<double>::~Matrix((uint64_t)&a25);
  Matrix<double>::~Matrix(v25 - 144);
  Matrix<double>::~Matrix(v25 - 112);
  _Unwind_Resume(a1);
}

uint64_t GeomUtils::DistortRadialLiteInternal(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6, double a7)
{
  if (*(_DWORD *)(a1 + 16) != 2) {
    GeomUtils::DistortRadialLiteInternal();
  }
  uint64_t v14 = *(void *)(a2 + 32);
  if (a5) {
    uint64_t v15 = *(void *)(a2 + 32);
  }
  else {
    uint64_t v15 = *(void *)(a2 + 40);
  }
  if (a5) {
    uint64_t v14 = *(void *)(a2 + 40);
  }
  int v16 = *(_DWORD *)(a2 + 24);
  v86[1] = v14;
  int v87 = 1;
  int v88 = v16;
  char v89 = 0;
  v86[0] = &unk_26FAEAF48;
  int v83 = 1;
  int v84 = v16;
  char v85 = 0;
  v82[0] = &unk_26FAEAF48;
  v82[1] = v15;
  Matrix<double>::Matrix((uint64_t)&v78, 1, *(_DWORD *)(a1 + 20));
  unsigned int v78 = &unk_26FAEAF48;
  Matrix<double>::Matrix((uint64_t)v77, 1, *(_DWORD *)(a1 + 20));
  v77[0] = &unk_26FAEAF48;
  uint64_t v17 = v81;
  Matrix<double>::Matrix((uint64_t)v73, 2, *(_DWORD *)(a1 + 20));
  uint64_t v18 = *(unsigned int *)(a1 + 20);
  if (a5)
  {
    if (v18)
    {
      unsigned int v19 = *(_DWORD *)(a1 + 16);
      if (v19)
      {
        if (v75)
        {
          uint64_t v20 = 0;
          BOOL v22 = v19 < 2 || v75 < 2;
          uint64_t v23 = 8 * v76;
          uint64_t v24 = 8 * v18;
          while (v23 != v20)
          {
            *(void *)(v74 + v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(*(void *)(a1 + 8) + v20);
            if (v22)
            {
              if (v19 >= 2) {
                int v57 = 119;
              }
              else {
                int v57 = 125;
              }
              __assert_rtn("operator()", "Matrix.hpp", v57, "row < m_rows && col < m_cols");
            }
            *(void *)(v74 + v23 + v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(*(void *)(a1 + 8) + v24 + v20);
            v20 += 8;
            if (v24 == v20) {
              goto LABEL_35;
            }
          }
        }
        int v59 = 119;
      }
      else
      {
        int v59 = 125;
      }
      __assert_rtn("operator()", "Matrix.hpp", v59, "row < m_rows && col < m_cols");
    }
  }
  else if (v18)
  {
    unsigned int v25 = *(_DWORD *)(a1 + 16);
    if (v25)
    {
      if (v75)
      {
        uint64_t v26 = 0;
        BOOL v28 = v25 < 2 || v75 < 2;
        uint64_t v29 = 8 * v76;
        uint64_t v30 = 8 * v18;
        while (v29 != v26)
        {
          *(double *)(v74 + v26) = *(double *)(*(void *)(a1 + 8) + v26) - *(double *)(a2 + 216) * *(double *)a2;
          if (v28)
          {
            if (v25 >= 2) {
              int v58 = 119;
            }
            else {
              int v58 = 125;
            }
            __assert_rtn("operator()", "Matrix.hpp", v58, "row < m_rows && col < m_cols");
          }
          *(double *)(v74 + v29 + v26) = *(double *)(*(void *)(a1 + 8) + v30 + v26)
                                       - *(double *)(a2 + 224) * *(double *)a2;
          v26 += 8;
          if (v30 == v26) {
            goto LABEL_35;
          }
        }
      }
      int v60 = 119;
    }
    else
    {
      int v60 = 125;
    }
    __assert_rtn("operator()", "Matrix.hpp", v60, "row < m_rows && col < m_cols");
  }
LABEL_35:
  Matrix<double>::DotMult<double>((uint64_t)v73, (uint64_t)v73, (uint64_t)v69);
  if (a4)
  {
    if ((int)v17 >= 1)
    {
      unsigned int v31 = v71;
      if (v71)
      {
        unint64_t v32 = 0;
        uint64_t v33 = v72;
        int v34 = v80;
        uint64_t v35 = 8 * v72;
        while (v33 != v32 && v31 >= 2 && v34 && v32 < v81)
        {
          double v36 = sqrt(*(double *)(v70 + 8 * v32) + *(double *)(v70 + 8 * v32 + v35));
          if (v36 >= a7) {
            double v36 = a7;
          }
          *(double *)(v79 + 8 * v32++) = v36;
          if (v17 == v32) {
            goto LABEL_55;
          }
        }
      }
      goto LABEL_84;
    }
  }
  else if ((int)v17 >= 1)
  {
    unsigned int v37 = v71;
    if (v71)
    {
      unint64_t v38 = 0;
      uint64_t v39 = v72;
      int v40 = v80;
      uint64_t v41 = 8 * v72;
      while (v39 != v38 && v37 >= 2 && v40 && v38 < v81)
      {
        *(double *)(v79 + 8 * v38) = sqrt(*(double *)(v70 + 8 * v38) + *(double *)(v70 + v41 + 8 * v38));
        if (v17 == ++v38) {
          goto LABEL_55;
        }
      }
    }
LABEL_84:
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
LABEL_55:
  if (a6) {
    Interp1SortedWithExtrap<double,LinearInterpolator<double>>((uint64_t)v86, (uint64_t)v82, (uint64_t)&v78, (uint64_t)v77);
  }
  else {
    Algo::Interp1WithExtrap<double>((uint64_t)v86, (uint64_t)v82, (uint64_t)&v78, 1, (uint64_t)v77, 0);
  }
  MatrixNxPts<1u,double>::DotDiv((uint64_t)v77, (uint64_t)&v78, (uint64_t)&v61);
  int v65 = &unk_26FAEAF18;
  uint64_t v66 = v62;
  uint64_t v67 = v63;
  char v68 = v64;
  uint64_t v62 = 0;
  char v64 = 0;
  Matrix<double>::~Matrix((uint64_t)&v61);
  uint64_t v42 = v81;
  if ((int)v81 >= 1)
  {
    if (!v80) {
      goto LABEL_83;
    }
    unint64_t v43 = 0;
    int v44 = v67;
    do
    {
      if (*(double *)(v79 + 8 * v43) == 0.0)
      {
        if (!v44 || v43 >= HIDWORD(v67)) {
          goto LABEL_83;
        }
        *(void *)(v66 + 8 * v43) = 0x3FF0000000000000;
      }
      ++v43;
    }
    while (v42 != v43);
    unsigned int v45 = v75;
    if (!v75) {
LABEL_83:
    }
      __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
    unint64_t v46 = 0;
    uint64_t v47 = v76;
    int v48 = v67;
    uint64_t v49 = 8 * v76;
    do
    {
      if (v47 == v46) {
        goto LABEL_83;
      }
      if (!v48) {
        goto LABEL_83;
      }
      if (v46 >= HIDWORD(v67)) {
        goto LABEL_83;
      }
      unsigned int v50 = *(_DWORD *)(a3 + 16);
      if (!v50) {
        goto LABEL_83;
      }
      unint64_t v51 = *(unsigned int *)(a3 + 20);
      if (v46 >= v51) {
        goto LABEL_83;
      }
      *(double *)(*(void *)(a3 + 8) + 8 * v46) = *(double *)(v74 + 8 * v46) * *(double *)(v66 + 8 * v46);
      if (v45 < 2 || v50 < 2) {
        goto LABEL_83;
      }
      *(double *)(*(void *)(a3 + 8) + 8 * v51 + 8 * v46) = *(double *)(v66 + 8 * v46)
                                                           * *(double *)(v74 + v49 + 8 * v46);
      ++v46;
    }
    while (v42 != v46);
    if (a5)
    {
      unsigned int v52 = *(_DWORD *)(a3 + 16);
      if (v52)
      {
        uint64_t v53 = 0;
        uint64_t v54 = 8 * *(unsigned int *)(a3 + 20);
        uint64_t v55 = 8 * v42;
        while (v54 != v53)
        {
          *(double *)(*(void *)(a3 + 8) + v53) = *(double *)(*(void *)(a3 + 8) + v53)
                                                 + *(double *)(a2 + 216) * *(double *)a2;
          if (v52 <= 1) {
            break;
          }
          *(double *)(*(void *)(a3 + 8) + v54 + v53) = *(double *)(*(void *)(a3 + 8) + v54 + v53)
                                                       + *(double *)(a2 + 224) * *(double *)a2;
          v53 += 8;
          if (v55 == v53) {
            goto LABEL_82;
          }
        }
      }
      goto LABEL_83;
    }
  }
LABEL_82:
  Matrix<double>::~Matrix((uint64_t)&v65);
  Matrix<double>::~Matrix((uint64_t)v69);
  Matrix<double>::~Matrix((uint64_t)v73);
  Matrix<double>::~Matrix((uint64_t)v77);
  Matrix<double>::~Matrix((uint64_t)&v78);
  Matrix<double>::~Matrix((uint64_t)v82);
  Matrix<double>::~Matrix((uint64_t)v86);
  return 0;
}

void sub_246927F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  Matrix<double>::~Matrix((uint64_t)&a17);
  Matrix<double>::~Matrix((uint64_t)&a21);
  Matrix<double>::~Matrix((uint64_t)&a25);
  Matrix<double>::~Matrix((uint64_t)&a29);
  Matrix<double>::~Matrix(v29 - 144);
  Matrix<double>::~Matrix(v29 - 112);
  _Unwind_Resume(a1);
}

uint64_t Matrix<double>::operator()(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  if (*a2 >= *(_DWORD *)(a1 + 16) || (v3 = *a3, unsigned int v4 = *(_DWORD *)(a1 + 20), v3 >= v4)) {
    MatrixNxPts<3u,double>::CloneColumn();
  }
  return *(void *)(a1 + 8) + 8 * v3 + 8 * v4 * *a2;
}

uint64_t GeomUtils::DistortRadialLite<double>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return 0;
}

uint64_t GeomUtils::DistortRadialLite<double>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6)
{
  return 0;
}

void GeomUtils::ToHomg(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned int *)(a1 + 20);
  unsigned int v4 = (void *)Matrix<double>::Matrix(a2, 3, *(_DWORD *)(a1 + 20));
  void *v4 = &unk_26FAEB100;
  unint64_t v5 = v4[1];
  uint64_t v6 = *(const void **)(a1 + 8);
  size_t v7 = 8 * (2 * v3);
  memcpy((void *)v5, v6, v7);
  if (v3)
  {
    unint64_t v8 = v5 + 8 * v3 + v7;
    if (v8 <= v7 + v5 + 8) {
      unint64_t v8 = v7 + v5 + 8;
    }
    memset_pattern16((void *)(v5 + 8 * (2 * v3)), &unk_2469EDF00, ((v8 + ~v5 - v7) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
}

double GeomUtils::ToNonHomg@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned int *)(a1 + 20);
  unsigned int v4 = (void *)Matrix<double>::Matrix(a2, 2, *(_DWORD *)(a1 + 20));
  void *v4 = &unk_26FAEC0F0;
  if (v3)
  {
    uint64_t v6 = *(double **)(a1 + 8);
    size_t v7 = (double *)v4[1];
    uint64_t v8 = (2 * v3);
    int v9 = v3;
    do
    {
      *size_t v7 = *v6 / v6[v8];
      double result = v6[v3] / v6[v8];
      v7[v3] = result;
      ++v7;
      ++v6;
      --v9;
    }
    while (v9);
  }
  return result;
}

{
  uint64_t v3;
  void *v4;
  double result;
  double *v6;
  double *v7;
  uint64_t v8;
  int v9;

  uint64_t v3 = *(unsigned int *)(a1 + 20);
  unsigned int v4 = (void *)Matrix<double>::Matrix(a2, 2, *(_DWORD *)(a1 + 20));
  void *v4 = &unk_26FAEC0F0;
  if (v3)
  {
    uint64_t v6 = *(double **)(a1 + 8);
    size_t v7 = (double *)v4[1];
    uint64_t v8 = (2 * v3);
    int v9 = v3;
    do
    {
      *size_t v7 = *v6 / v6[v8];
      double result = v6[v3] / v6[v8];
      v7[v3] = result;
      ++v7;
      ++v6;
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_2469286AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

uint64_t MatrixNxPts<1u,double>::Abs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Matrix<double>::Matrix((uint64_t)&v7, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  vDSPVabs<double>(*(const double **)(a1 + 8), 1, v8, 1, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  unsigned int v4 = v8;
  int v5 = v9;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  *(unsigned char *)(a2 + Matrix<double>::~Matrix((uint64_t)this + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a2 = &unk_26FAEAF48;
  *(void *)(a2 + 8) = v4;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

void sub_246928824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Matrix<double>::Transpose(uint64_t a1)
{
  Matrix<double>::Matrix((uint64_t)&v1, a1, 0, -1);
}

void sub_2469288B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Matrix<double>::~Matrix(v9);
  Matrix<double>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Matrix<double>::Svd0LowestSingularVector(uint64_t a1)
{
  v5[1] = 0;
  unsigned int v5[2] = 0;
  v5[0] = &unk_26FAEAF18;
  char v6 = 0;
  v3[1] = 0;
  _OWORD v3[2] = 0;
  v3[0] = &unk_26FAEAF18;
  char v4 = 0;
  v1[2] = 1;
  char v2 = 0;
  v1[0] = &unk_26FAEAF48;
  v1[1] = 0;
  Matrix<double>::Svd(a1, (uint64_t)v5, (uint64_t)v1, (uint64_t)v3);
}

void sub_2469289FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void GeomUtils::homography2d(void *a1@<X8>)
{
  uint64_t v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  long long v1 = 0u;
  long long v2 = 0u;
  *a1 = &unk_26FAEAF18;
  operator new[]();
}

void sub_246928CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  Matrix<double>::~Matrix(v26 - 136);
  Matrix<double>::~Matrix((uint64_t)&a9);
  Matrix<double>::~Matrix((uint64_t)&a13);
  Matrix<double>::~Matrix((uint64_t)&a17);
  Matrix<double>::~Matrix((uint64_t)&a21);
  Matrix<double>::~Matrix((uint64_t)&a25);
  Matrix<double>::~Matrix(v25);
  _Unwind_Resume(a1);
}

void GeomUtils::ransacComputeHomography(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  uint64_t v57 = 0;
  memset(v56, 0, sizeof(v56));
  uint64_t v55 = 0;
  memset(v54, 0, sizeof(v54));
  Matrix<double>::Matrix((uint64_t)&v50, 3, *(_DWORD *)(a1 + 20));
  unsigned int v50 = &unk_26FAEB100;
  Matrix<double>::Matrix((uint64_t)&v46, 3, *(_DWORD *)(a2 + 20));
  unint64_t v46 = &unk_26FAEB100;
  Algo::Normalize2DPts(a1, (uint64_t)&v50, (uint64_t)v56);
  Algo::Normalize2DPts(a2, (uint64_t)&v46, (uint64_t)v54);
  Algo::RansacHomography((int)&v50, (int)&v46, 4, 10, 50, 1, a4, a5, a6);
  Matrix<double>::Matrix((uint64_t)&v42, 3, *a5);
  uint64_t v42 = &unk_26FAEB100;
  Matrix<double>::Matrix((uint64_t)&v38, 3, *a5);
  unint64_t v38 = &unk_26FAEB100;
  unsigned int v11 = *a5;
  if (*a5)
  {
    uint64_t v12 = v53;
    if (v53 == v49)
    {
      unsigned int v13 = 0;
      unsigned __int16 v14 = 0;
      unsigned int v15 = *(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16);
      unsigned int v16 = v52;
      unsigned int v17 = v44;
      uint64_t v18 = v45;
      uint64_t v19 = 2 * v53;
      uint64_t v20 = 2 * v45;
      unsigned int v21 = v48;
      unsigned int v22 = v40;
      uint64_t v23 = v41;
      uint64_t v24 = 2 * v41;
      uint64_t v25 = "row < m_rows && col < m_cols";
      while (v15 > v13)
      {
        int v26 = 119;
        if (!v16) {
          goto LABEL_33;
        }
        uint64_t v27 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * v14);
        BOOL v28 = v12 <= v27 || v17 == 0;
        if (v28 || v18 <= v13) {
          goto LABEL_33;
        }
        *((void *)__dst + vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 14) = *(void *)(v51 + 8 * v27);
        int v26 = 119;
        if (v16 < 2) {
          goto LABEL_33;
        }
        uint64_t v30 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * v14);
        if (v12 <= v30) {
          goto LABEL_33;
        }
        if (v17 < 2) {
          goto LABEL_33;
        }
        *((void *)__dst + v14 + v18) = *(void *)(v51 + 8 * v30 + 8 * v12);
        int v26 = 119;
        if (v16 < 3) {
          goto LABEL_33;
        }
        uint64_t v31 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * v14);
        if (v12 <= v31) {
          goto LABEL_33;
        }
        if (v17 < 3) {
          goto LABEL_33;
        }
        *((void *)__dst + v14 + v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(v51 + 8 * v31 + 8 * v19);
        int v26 = 119;
        if (!v21) {
          goto LABEL_33;
        }
        uint64_t v32 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * v14);
        if (v12 <= v32) {
          goto LABEL_33;
        }
        if (!v22) {
          goto LABEL_33;
        }
        if (v23 <= v13) {
          goto LABEL_33;
        }
        *((void *)v39 + vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 14) = *(void *)(v47 + 8 * v32);
        int v26 = 119;
        if (v21 < 2) {
          goto LABEL_33;
        }
        uint64_t v33 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * v14);
        if (v12 <= v33) {
          goto LABEL_33;
        }
        if (v22 < 2) {
          goto LABEL_33;
        }
        *((void *)v39 + v14 + v23) = *(void *)(v47 + 8 * v33 + 8 * v12);
        int v26 = 119;
        if (v21 < 3) {
          goto LABEL_33;
        }
        uint64_t v34 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * v14);
        if (v12 <= v34 || v22 <= 2) {
          goto LABEL_33;
        }
        *((void *)v39 + v14++ + vMatrix<double>::~Matrix((uint64_t)this + 24) = *(void *)(v47 + 8 * v34 + 8 * v19);
        unsigned int v13 = v14;
        if (v11 <= v14)
        {
          GeomUtils::ToNonHomg((uint64_t)&v42, (uint64_t)&v37);
          GeomUtils::ToHomg((uint64_t)&v37, (uint64_t)&v58);
          Matrix<double>::Resize((uint64_t)&v42, v60, v61);
          memcpy(__dst, v59, 8 * v44 * (unint64_t)v45);
          Matrix<double>::~Matrix((uint64_t)&v58);
          Matrix<double>::~Matrix((uint64_t)&v37);
          GeomUtils::ToNonHomg((uint64_t)&v38, (uint64_t)&v37);
          GeomUtils::ToHomg((uint64_t)&v37, (uint64_t)&v58);
          Matrix<double>::Resize((uint64_t)&v38, v60, v61);
          memcpy(v39, v59, 8 * v40 * (unint64_t)v41);
          Matrix<double>::~Matrix((uint64_t)&v58);
          Matrix<double>::~Matrix((uint64_t)&v37);
          GeomUtils::ComputeHomography((uint64_t)&v42, (uint64_t)&v38);
        }
      }
      int v26 = 131;
      uint64_t v25 = "index < m_rows * m_cols";
LABEL_33:
      __assert_rtn("operator()", "Matrix.hpp", v26, v25);
    }
    uint64_t v35 = "x1_norm.GetNumOfPoints() == x2_norm.GetNumOfPoints()";
    int v36 = 930;
  }
  else
  {
    uint64_t v35 = "*ninliers != 0";
    int v36 = 928;
  }
  __assert_rtn("ransacComputeHomography", "GeomUtils.cpp", v36, v35);
}

void sub_246929328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  Matrix<double>::~Matrix((uint64_t)&a15);
  Matrix<double>::~Matrix((uint64_t)&a11);
  Matrix<double>::~Matrix((uint64_t)&a19);
  Matrix<double>::~Matrix(v35 - 152);
  Matrix<double>::~Matrix((uint64_t)&a23);
  Matrix<double>::~Matrix((uint64_t)&a27);
  Matrix<double>::~Matrix((uint64_t)&a31);
  Matrix<double>::~Matrix((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void GeomUtils::estimateBestRotMat(uint64_t a1)
{
  v5[1] = 0;
  unsigned int v5[2] = 0;
  v5[0] = &unk_26FAEAF18;
  char v6 = 0;
  v3[1] = 0;
  _OWORD v3[2] = 0;
  v3[0] = &unk_26FAEAF18;
  char v4 = 0;
  v1[2] = 1;
  char v2 = 0;
  v1[0] = &unk_26FAEAF48;
  v1[1] = 0;
  Matrix<double>::Svd(a1, (uint64_t)v5, (uint64_t)v1, (uint64_t)v3);
}

void sub_2469294F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  Matrix<double>::~Matrix((uint64_t)&a9);
  Matrix<double>::~Matrix((uint64_t)&a13);
  Matrix<double>::~Matrix((uint64_t)&a17);
  Matrix<double>::~Matrix(v17 - 80);
  Matrix<double>::~Matrix(v17 - 48);
  _Unwind_Resume(a1);
}

void Matrix<double>::Svd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CLPK_integer v9 = *(_DWORD *)(a1 + 16);
  __CLPK_integer v8 = *(_DWORD *)(a1 + 20);
  __CLPK_integer __n = v8;
  __CLPK_integer __ldu = v9;
  Matrix<double>::Matrix((uint64_t)v21, v9, v8);
  if (v8 >= 1)
  {
    uint64_t v10 = *(__CLPK_doublereal **)(a1 + 8);
    unsigned int v11 = &v10[v8];
    uint64_t v12 = __a;
    uint64_t v13 = v9 * v8;
    do
    {
      if ((int)v13 >= 1)
      {
        unsigned __int16 v14 = v10;
        do
        {
          *v12++ = *v14;
          v14 += v8;
        }
        while (v14 < &v10[v13]);
      }
      ++v10;
    }
    while (v10 < v11);
  }
  __CLPK_integer v20 = v8;
  Matrix<double>::Resize(a3, 1, v8);
  Matrix<double>::Resize(a4, v8, v8);
  if (v9 >= v8) {
    char v15 = 83;
  }
  else {
    char v15 = 65;
  }
  char __jobz = v15;
  if (v9 >= v8) {
    int v16 = v8;
  }
  else {
    int v16 = v9;
  }
  Matrix<double>::Resize(a2, v9, v16);
  __CLPK_doublereal v18 = 0.0;
  int v17 = -1;
  operator new[]();
}

void sub_24692979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t GeomUtils::CalcRotTrans(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  long long v117 = xmmword_2469EDEF0;
  uint64_t v118 = 0x3FF0000000000000;
  long long v119 = 0u;
  long long v120 = 0u;
  uint64_t v121 = 0x3FF0000000000000;
  long long __u = 0u;
  memset(v114, 0, sizeof(v114));
  memset(v112, 0, 72);
  memset(__s, 0, sizeof(__s));
  p_u = &__u;
  MatrixMxN<3u,3u,double>::SVDMxN<3u,void>(a1, (__CLPK_doublereal *)&__u, __s, v112);
  uint64_t v12 = 0;
  uint64_t v106 = 0;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  do
  {
    uint64_t v13 = 0;
    unsigned __int16 v14 = (double *)&v116;
    do
    {
      uint64_t v15 = 0;
      double v16 = 0.0;
      int v17 = v14;
      do
      {
        double v18 = *v17;
        v17 += 3;
        double v16 = v16 + *(double *)((char *)p_u + v15) * v18;
        v15 += 8;
      }
      while (v15 != 24);
      *((double *)&v102 + 3 * v12 + v13++) = v16;
      ++v14;
    }
    while (v13 != 3);
    ++v12;
    p_u = (long long *)((char *)p_u + 24);
  }
  while (v12 != 3);
  uint64_t v19 = 0;
  uint64_t v101 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  __CLPK_integer v20 = &v97;
  unsigned int v21 = v112;
  do
  {
    uint64_t v22 = 0;
    uint64_t v23 = v20;
    do
    {
      *(__CLPK_doublereal *)uint64_t v23 = v21[v22];
      uint64_t v23 = (long long *)((char *)v23 + 24);
      ++v22;
    }
    while (v22 != 3);
    ++v19;
    __CLPK_integer v20 = (long long *)((char *)v20 + 8);
    v21 += 3;
  }
  while (v19 != 3);
  uint64_t v24 = 0;
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long v109 = 0u;
  memset(v107, 0, sizeof(v107));
  uint64_t v25 = &v102;
  do
  {
    uint64_t v26 = 0;
    uint64_t v27 = &v97;
    do
    {
      uint64_t v28 = 0;
      double v29 = 0.0;
      uint64_t v30 = (double *)v27;
      do
      {
        double v31 = *v30;
        v30 += 3;
        double v29 = v29 + *(double *)((char *)v25 + v28) * v31;
        v28 += 8;
      }
      while (v28 != 24);
      *(double *)&v107[3 * v24 + v26++] = v29;
      uint64_t v27 = (long long *)((char *)v27 + 8);
    }
    while (v26 != 3);
    ++v24;
    uint64_t v25 = (long long *)((char *)v25 + 24);
  }
  while (v24 != 3);
  uint64_t v32 = 0;
  uint64_t v96 = 0;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  uint64_t v33 = &v92;
  uint64_t v34 = &v116;
  do
  {
    uint64_t v35 = 0;
    int v36 = v33;
    do
    {
      *(void *)int v36 = v34[v35];
      int v36 = (long long *)((char *)v36 + 24);
      ++v35;
    }
    while (v35 != 3);
    ++v32;
    uint64_t v33 = (long long *)((char *)v33 + 8);
    v34 += 3;
  }
  while (v32 != 3);
  uint64_t v37 = 0;
  uint64_t v101 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  unint64_t v38 = &__u;
  do
  {
    uint64_t v39 = 0;
    unsigned int v40 = &v92;
    do
    {
      uint64_t v41 = 0;
      double v42 = 0.0;
      unint64_t v43 = (double *)v40;
      do
      {
        double v44 = *v43;
        v43 += 3;
        double v42 = v42 + *(double *)((char *)v38 + v41) * v44;
        v41 += 8;
      }
      while (v41 != 24);
      *((double *)&v97 + 3 * v37 + v39++) = v42;
      unsigned int v40 = (long long *)((char *)v40 + 8);
    }
    while (v39 != 3);
    ++v37;
    unint64_t v38 = (long long *)((char *)v38 + 24);
  }
  while (v37 != 3);
  uint64_t v45 = 0;
  uint64_t v91 = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  unint64_t v46 = &v87;
  uint64_t v47 = v112;
  do
  {
    uint64_t v48 = 0;
    int v49 = v46;
    do
    {
      *(__CLPK_doublereal *)int v49 = v47[v48];
      int v49 = (long long *)((char *)v49 + 24);
      ++v48;
    }
    while (v48 != 3);
    ++v45;
    unint64_t v46 = (long long *)((char *)v46 + 8);
    v47 += 3;
  }
  while (v45 != 3);
  uint64_t v50 = 0;
  uint64_t v106 = 0;
  v51.i64[1] = 0;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  unsigned int v52 = &v97;
  do
  {
    uint64_t v53 = 0;
    uint64_t v54 = &v87;
    do
    {
      uint64_t v55 = 0;
      double v56 = 0.0;
      uint64_t v57 = (double *)v54;
      do
      {
        double v58 = *v57;
        v57 += 3;
        double v56 = v56 + *(double *)((char *)v52 + v55) * v58;
        v55 += 8;
      }
      while (v55 != 24);
      *((double *)&v102 + 3 * v50 + v53++) = v56;
      uint64_t v54 = (long long *)((char *)v54 + 8);
    }
    while (v53 != 3);
    ++v50;
    unsigned int v52 = (long long *)((char *)v52 + 24);
  }
  while (v50 != 3);
  uint64_t v59 = 0;
  long long v92 = 0uLL;
  *(void *)&long long v93 = 0;
  int v60 = (uint64_t *)v114;
  do
  {
    uint64_t v61 = *v60;
    v60 += 3;
    *(void *)((char *)&v92 + v59) = v61;
    v59 += 8;
  }
  while (v59 != 24);
  v51.i64[0] = v107[0];
  if ((((unint64_t)v108 ^ v107[0]) & 0x8000000000000000) != 0 || (v110 ^ v107[0]) < 0)
  {
    uint64_t v65 = 0;
    v51.i64[0] = v102;
    v11.i64[0] = 1.0;
    v66.f64[0] = NAN;
    v66.f64[1] = NAN;
    long long v97 = 0u;
    long long v98 = 0u;
    v51.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v66), v11, v51).u64[0];
    long long v99 = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    do
    {
      *(double *)((char *)&v97 + v65) = *(double *)v51.i64 * *(double *)((char *)&v102 + v65);
      v65 += 8;
    }
    while (v65 != 72);
  }
  else
  {
    uint64_t v62 = 0;
    v11.i64[0] = 1.0;
    v63.f64[0] = NAN;
    v63.f64[1] = NAN;
    uint64_t v101 = 0;
    long long v99 = 0u;
    long long v100 = 0u;
    *(void *)&double v64 = vbslq_s8((int8x16_t)vnegq_f64(v63), v11, v51).u64[0];
    long long v97 = 0u;
    long long v98 = 0u;
    do
    {
      *(double *)((char *)&v97 + v62 * 8) = v64 * *(double *)&v107[v62];
      ++v62;
    }
    while (v62 != 9);
  }
  long long v67 = v100;
  *(_OWORD *)(a5 + 32) = v99;
  *(_OWORD *)(a5 + 48) = v67;
  *(void *)(a5 + 64) = v101;
  long long v68 = v98;
  *(_OWORD *)a5 = v97;
  *(_OWORD *)(a5 + 16) = v68;
  uint64_t v69 = 0;
  long long v87 = 0uLL;
  *(void *)&long long v88 = 0;
  do
  {
    *(double *)((char *)&v87 + v69) = *(double *)(a3 + v69) - *(double *)(a2 + v69);
    v69 += 8;
  }
  while (v69 != 24);
  uint64_t v70 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  do
  {
    *(double *)((char *)&v84 + v7pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(double *)(a3 + v70) - *(double *)(a2 + v70);
    v70 += 8;
  }
  while (v70 != 24);
  uint64_t v71 = 0;
  double v72 = 0.0;
  do
  {
    double v72 = v72 + *(double *)((char *)&v84 + v71) * *(double *)((char *)&v84 + v71);
    v71 += 8;
  }
  while (v71 != 24);
  uint64_t v73 = 0;
  long long v97 = 0uLL;
  *(void *)&long long v98 = 0;
  double v74 = sqrt(v72);
  do
  {
    *(double *)((char *)&v97 + v73) = *(double *)((char *)&v87 + v73) / v74;
    v73 += 8;
  }
  while (v73 != 24);
  uint64_t v75 = 0;
  double v76 = 0.0;
  do
  {
    double v76 = v76 + *(double *)((char *)&v97 + v75) * *(double *)((char *)&v92 + v75);
    v75 += 8;
  }
  while (v75 != 24);
  if (v76 < 0.0)
  {
    uint64_t v77 = 0;
    long long v87 = 0uLL;
    *(void *)&long long v88 = 0;
    do
    {
      *(double *)((char *)&v87 + v77) = -*(double *)((char *)&v92 + v77);
      v77 += 8;
    }
    while (v77 != 24);
    long long v92 = v87;
    *(void *)&long long v93 = v88;
  }
  uint64_t v78 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  do
  {
    *(double *)((char *)&v84 + v78) = *(double *)(a3 + v78) - *(double *)(a2 + v78);
    v78 += 8;
  }
  while (v78 != 24);
  uint64_t v79 = 0;
  double v80 = 0.0;
  do
  {
    double v80 = v80 + *(double *)((char *)&v84 + v79) * *(double *)((char *)&v84 + v79);
    v79 += 8;
  }
  while (v79 != 24);
  uint64_t v81 = 0;
  long long v87 = 0uLL;
  *(void *)&long long v88 = 0;
  double v82 = sqrt(v80);
  do
  {
    *(double *)((char *)&v87 + v81) = v82 * *(double *)((char *)&v92 + v81);
    v81 += 8;
  }
  while (v81 != 24);
  *(_OWORD *)a6 = v87;
  *(void *)(a6 + 16) = v88;
  return 0;
}

uint64_t GeomUtils::homogDist2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, double a6)
{
  uint64_t v37 = 3;
  char v38 = 0;
  uint64_t v35 = &unk_26FAEB100;
  int v36 = 0;
  __dst = 0;
  uint64_t v33 = 0;
  double v31 = &unk_26FAEAF18;
  char v34 = 0;
  Matrix<double>::operator*(a1, a2, (uint64_t)&v27);
  Matrix<double>::Resize((uint64_t)&v31, v29, v30);
  memcpy(__dst, __src, 8 * v33 * (unint64_t)HIDWORD(v33));
  Matrix<double>::~Matrix((uint64_t)&v27);
  Matrix<double>::Matrix((uint64_t)&v27, 1, SHIDWORD(v33));
  uint64_t v27 = &unk_26FAEAF48;
  GeomUtils::ToNonHomg(a3, (uint64_t)v22);
  GeomUtils::ToHomg((uint64_t)v22, (uint64_t)v23);
  Matrix<double>::Resize((uint64_t)&v35, v25, v26);
  memcpy(v36, v24, 8 * v37 * (unint64_t)HIDWORD(v37));
  Matrix<double>::~Matrix((uint64_t)v23);
  Matrix<double>::~Matrix((uint64_t)v22);
  GeomUtils::ToNonHomg((uint64_t)&v31, (uint64_t)v22);
  GeomUtils::ToHomg((uint64_t)v22, (uint64_t)v23);
  Matrix<double>::Resize((uint64_t)&v31, v25, v26);
  memcpy(__dst, v24, 8 * v33 * (unint64_t)HIDWORD(v33));
  Matrix<double>::~Matrix((uint64_t)v23);
  Matrix<double>::~Matrix((uint64_t)v22);
  unsigned int v10 = HIDWORD(v33);
  if (HIDWORD(v33))
  {
    unint64_t v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = "row < m_rows && col < m_cols";
    while (v37 && v11 < HIDWORD(v37) && v33)
    {
      int v14 = 119;
      if (v37 < 2 || v33 == 1 || v37 < 3 || v33 < 3) {
        goto LABEL_21;
      }
      if (v11 >= (v30 * v29)) {
        goto LABEL_20;
      }
      uint64_t v15 = (double *)&v36[8 * v11];
      double v16 = (double *)((char *)__dst + 8 * v11);
      double v17 = v15[HIDWORD(v37)] - v16[v10];
      double v18 = v17 * v17 + (*v15 - *v16) * (*v15 - *v16);
      double v19 = *(double *)&v36[8 * (2 * HIDWORD(v37)) + 8 * v11] - *((double *)__dst + 2 * v10 + v11);
      *((double *)__src + v11) = v18 + v19 * v19;
      if (*((double *)__src + v11) >= a6)
      {
        unint64_t v20 = v10;
      }
      else
      {
        if (*(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16) <= v12)
        {
LABEL_20:
          int v14 = 131;
          uint64_t v13 = "index < m_rows * m_cols";
LABEL_21:
          __assert_rtn("operator()", "Matrix.hpp", v14, v13);
        }
        *(_DWORD *)(*(void *)(a4 + 8) + 4 * v12++) = v11;
        unint64_t v20 = HIDWORD(v33);
        unsigned int v10 = HIDWORD(v33);
      }
      if (++v11 >= v20) {
        goto LABEL_18;
      }
    }
    int v14 = 119;
    goto LABEL_21;
  }
  unsigned int v12 = 0;
LABEL_18:
  *a5 = v12;
  Matrix<double>::~Matrix((uint64_t)&v27);
  Matrix<double>::~Matrix((uint64_t)&v31);
  return Matrix<double>::~Matrix((uint64_t)&v35);
}

void sub_24692A0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  Matrix<double>::~Matrix((uint64_t)&a13);
  Matrix<double>::~Matrix((uint64_t)&a9);
  Matrix<double>::~Matrix((uint64_t)&a17);
  Matrix<double>::~Matrix((uint64_t)&a21);
  Matrix<double>::~Matrix(v21 - 80);
  _Unwind_Resume(a1);
}

BOOL GeomUtils::check3of4SpotsOnSameLine(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) != 4 || *(_DWORD *)(a1 + 16) != 3) {
    GeomUtils::check3of4SpotsOnSameLine();
  }
  if (*(_DWORD *)(a2 + 20) != 4 || *(_DWORD *)(a2 + 16) != 3) {
    GeomUtils::check3of4SpotsOnSameLine();
  }
  long long v3 = *(double **)(a1 + 8);
  double v5 = *v3;
  double v4 = v3[1];
  double v6 = v3[4];
  double v7 = v3[5];
  double v9 = v3[8];
  double v8 = v3[9];
  double v10 = v3[2];
  double v11 = v3[6];
  double v12 = v3[10];
  double v13 = v7 * v12 - v11 * v8;
  double v14 = -(v11 * v9);
  double v15 = v6 * v8 - v7 * v9;
  if (fabs(*v3 * v13 - v4 * (v9 * v12 - v11 * v9) + v10 * v15) < 0.00000011920929) {
    return 1;
  }
  double v16 = v3[3];
  double v17 = v3[7];
  double v18 = v3[11];
  double v19 = v9 * v18 - v17 * v9;
  if (fabs(v19 * -v4 + v5 * (v7 * v18 - v17 * v8) + v16 * v15) < 0.00000011920929) {
    return 1;
  }
  double v20 = v12 * -v17 + v11 * v18;
  if (fabs(v5 * v20 - v10 * v19 + v16 * (v14 + v6 * v12)) < 0.00000011920929) {
    return 1;
  }
  if (fabs((v8 * v18 - v17 * v8) * -v10 + v4 * v20 + v16 * v13) < 0.00000011920929) {
    return 1;
  }
  uint64_t v21 = *(double **)(a2 + 8);
  double v22 = v21[1];
  double v23 = v21[5];
  double v24 = v21[8];
  double v25 = v21[9];
  double v26 = v21[4] * v25 - v23 * v24;
  if (fabs(*v21 * (v23 * v21[10] - v21[6] * v25) - v22 * (v24 * v21[10] - v21[6] * v24) + v21[2] * v26) < 0.00000011920929) {
    return 1;
  }
  uint64_t v27 = 1;
  if (fabs((v24 * v21[11] - v21[7] * v24) * -v22 + *v21 * (v23 * v21[11] - v21[7] * v25) + v21[3] * v26) >= 0.00000011920929)
  {
    uint64_t v47 = 0;
    double v29 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x100000000;
    double v30 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x200000000;
    double v31 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 2;
    double v32 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x100000002;
    double v33 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x200000002;
    double v34 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 3;
    double v35 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x100000003;
    double v36 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x200000003;
    uint64_t v37 = (double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    if (fabs(v29 * (v33 * *v37 - v36 * v34) - v32 * (v31 * *v37 - v36 * v31) + v35 * (v30 * v34 - v33 * v31)) >= 0.00000011920929)
    {
      uint64_t v47 = 1;
      double v38 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x100000001;
      double v39 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x200000001;
      double v40 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 2;
      double v41 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x100000002;
      double v42 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x200000002;
      double v43 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 3;
      double v44 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x100000003;
      double v45 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x200000003;
      unint64_t v46 = (double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      return fabs(v38 * (v42 * *v46 - v45 * v43) - v41 * (v40 * *v46 - v45 * v40) + v44 * (v39 * v43 - v42 * v40)) < 0.00000011920929;
    }
  }
  return v27;
}

float32x2_t GeomUtils::ExtrinsicsToSimd4x3(float64x2_t *a1)
{
  float64x2_t v1 = *a1;
  v1.f64[1] = a1[1].f64[1];
  return vcvt_f32_f64(v1);
}

double GeomUtils::ExtrinsicsFromSimd4x3(float64x2_t *a1, float64x2_t *a2, int8x16_t a3, int8x16_t a4, __n128 a5, __n128 a6)
{
  a1->f64[0] = *(float *)a3.i32;
  a1->f64[1] = *(float *)a4.i32;
  float64x2_t v6 = vcvtq_f64_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL)));
  float32x2_t v7 = (float32x2_t)vzip2_s32(*(int32x2_t *)a4.i8, (int32x2_t)a5.n128_u64[0]);
  a5.n128_u32[1] = a3.u32[1];
  a1[1] = vcvtq_f64_f32((float32x2_t)a5.n128_u64[0]);
  a1[2] = vcvtq_f64_f32(v7);
  a1[3] = v6;
  a1[4].f64[0] = a5.n128_f32[2];
  *a2 = vcvtq_f64_f32((float32x2_t)a6.n128_u64[0]);
  double result = a6.n128_f32[2];
  a2[1].f64[0] = a6.n128_f32[2];
  return result;
}

double Matrix<double>::DotMult<BOOL>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if (v4 != *(_DWORD *)(a1 + 20) || (int v6 = *(_DWORD *)(a2 + 16), v6 != *(_DWORD *)(a1 + 16))) {
    Matrix<double>::DotMult<double>();
  }
  uint64_t v7 = Matrix<double>::Matrix(a3, v6, v4);
  int v9 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  if (v9 >= 1)
  {
    double v10 = *(double **)(a1 + 8);
    double v11 = &v10[v9];
    double v12 = *(double **)(v7 + 8);
    double v13 = *(unsigned __int8 **)(a2 + 8);
    do
    {
      double v14 = *v10++;
      double v15 = v14;
      LODWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 14) = *v13++;
      double result = v15 * (double)LODWORD(v14);
      *v12++ = result;
    }
    while (v10 < v11);
  }
  return result;
}

void *std::vector<ImageUtils::Blob>::__init_with_size[abi:ne180100]<ImageUtils::Blob*,ImageUtils::Blob*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<ImageUtils::Blob>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*,ImageUtils::Blob*,ImageUtils::Blob*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24692A6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ImageUtils::Blob>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ImageUtils::Blob>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::allocator<ImageUtils::Blob>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*,ImageUtils::Blob*,ImageUtils::Blob*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  double v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_24692A808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      double v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<ImageUtils::Blob>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<ImageUtils::Blob>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<ImageUtils::Blob>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      double v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      uint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      double v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      double v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      double v17 = v19;
      LODWORD(v18) = v20;
      double v15 = *(char **)a1;
      *(void *)a1 = v21;
      uint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      double v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_24692AAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    uint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_24692AB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  double result = std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + Matrix<double>::~Matrix((uint64_t)this + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + Matrix<double>::~Matrix((uint64_t)this + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    __srCC_SHA256_CTX c = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      void *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __srCC_SHA256_CTX c = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __srCC_SHA256_CTX c = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *uint64_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  int v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *double result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    double result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *unint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void std::vector<Matrix<double>>::__push_back_slow_path<Matrix<double> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if (!((unint64_t)(v4 + 1) >> 59))
  {
    uint64_t v7 = (uint64_t)(a1 + 2);
    uint64_t v8 = a1[2] - v3;
    if (v8 >> 4 > v5) {
      unint64_t v5 = v8 >> 4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v5;
    }
    uint64_t v15 = a1 + 2;
    if (v9) {
      int64_t v10 = (char *)std::allocator<Matrix<double>>::allocate_at_least[abi:ne180100](v7, v9);
    }
    else {
      int64_t v10 = 0;
    }
    uint64_t v11 = v10;
    unint64_t v12 = &v10[32 * v4];
    uint64_t v13 = (uint64_t)v12;
    uint64_t v14 = &v10[32 * v9];
    Matrix<double>::Matrix((uint64_t)v12, a2, 0, -1);
  }
  std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
}

void sub_24692B154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Matrix<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Matrix<double>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Matrix<double>>,std::reverse_iterator<Matrix<double>*>,std::reverse_iterator<Matrix<double>*>,std::reverse_iterator<Matrix<double>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::allocator<Matrix<double>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Matrix<double>>,std::reverse_iterator<Matrix<double>*>,std::reverse_iterator<Matrix<double>*>,std::reverse_iterator<Matrix<double>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5) {
    Matrix<double>::Matrix(a7 - 32, a3 - 32, 0, -1);
  }
  return a6;
}

uint64_t std::__split_buffer<Matrix<double>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<Matrix<double>>::__init_with_size[abi:ne180100]<Matrix<double>*,Matrix<double>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<Matrix<double>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Matrix<double>>,Matrix<double>*,Matrix<double>*,Matrix<double>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24692B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<Matrix<double>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Matrix<double>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<Matrix<double>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Matrix<double>>,Matrix<double>*,Matrix<double>*,Matrix<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<Matrix<double>,Matrix<double>&,Matrix<double>*>(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_24692B450(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Matrix<double>>,Matrix<double>*,Matrix<double>*,Matrix<double>*>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<Matrix<double>,Matrix<double>&,Matrix<double>*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FAEAF18;
  uint64_t v3 = *(void *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 20);
  v7[0] = &unk_26FAEAF18;
  v7[1] = v3;
  int v8 = v4;
  int v9 = v5;
  char v10 = 0;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  *(unsigned char *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  Matrix<double>::~Matrix((uint64_t)v7);
  return a1;
}

void std::vector<Matrix<double>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      int v8 = v4 - 32;
      do
      {
        int v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t Algo::MeshGrid<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 20);
  int v8 = *(_DWORD *)(a2 + 20);
  Matrix<double>::Resize(a3, v8, v7);
  Matrix<double>::Resize(a4, v8, v7);
  if (v8)
  {
    int v9 = 0;
    BOOL v10 = *(uint64_t **)(a1 + 8);
    uint64_t v11 = *(void **)(a3 + 8);
    do
    {
      if (v7)
      {
        int v12 = v7;
        uint64_t v13 = v10;
        do
        {
          uint64_t v14 = *v13++;
          *v11++ = v14;
          --v12;
        }
        while (v12);
      }
      ++v9;
    }
    while (v9 != v8);
  }
  Matrix<double>::Transpose(a3, a4);
  return 0;
}

void Matrix<double>::Transpose(uint64_t a1, uint64_t a2)
{
  Matrix<double>::Resize(a2, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 16));
  int v4 = *(const double **)(a1 + 8);
  int v5 = *(double **)(a2 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 20);

  vDSPMtranspose<double>(v4, 1, v5, 1, v6, v7);
}

uint64_t Interp2<double,CubicInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 20);
  if (v8 != *(_DWORD *)(a3 + 20)) {
    Interp2<double,CubicInterpolator<double>>();
  }
  unsigned int v11 = *(_DWORD *)(a2 + 20);
  if (v11 != *(_DWORD *)(a3 + 16)) {
    Interp2<double,CubicInterpolator<double>>();
  }
  if (v8 <= 1) {
    Interp2<double,CubicInterpolator<double>>();
  }
  if (v11 <= 1) {
    Interp2<double,CubicInterpolator<double>>();
  }
  int v14 = *(_DWORD *)(a4 + 20);
  if (v14 != *(_DWORD *)(a5 + 20)) {
    Interp2<double,CubicInterpolator<double>>();
  }
  Matrix<double>::Resize(a6, 1, v14);
  int v19 = *(double **)(a1 + 8);
  double v20 = *v19;
  double v21 = v19[*(_DWORD *)(a1 + 20) - 1];
  long long v22 = *(double **)(a2 + 8);
  double v23 = *v22;
  double v24 = v22[*(_DWORD *)(a2 + 20) - 1];
  uint64_t v25 = *(unsigned int *)(a4 + 20);
  if (a7)
  {
    if (v25)
    {
      uint64_t v26 = 0;
      double v27 = v19[1] - v20;
      double v28 = v22[1] - v23;
      uint64_t v29 = 8 * v25;
      do
      {
        double v30 = *(double *)(*(void *)(a4 + 8) + v26);
        double v31 = *(double *)(*(void *)(a5 + 8) + v26);
        BOOL v34 = v30 > v21 || v30 < v20 || v31 > v24 || v31 < v23;
        double v35 = a8;
        if (!v34)
        {
          unsigned int v36 = ((v30 - v20) / v27);
          unsigned int v37 = *(_DWORD *)(a1 + 20);
          if (v36 + 1 < v37 && *(double *)(*(void *)(a1 + 8) + 8 * (v36 + 1)) <= v30) {
            ++v36;
          }
          unsigned int v38 = ((v31 - v23) / v28);
          unsigned int v39 = *(_DWORD *)(a2 + 20);
          double v40 = *(double **)(a2 + 8);
          if (v38 + 1 < v39 && v40[v38 + 1] <= v31) {
            ++v38;
          }
          double v35 = CubicInterpolator<double>::operator()(v30, v31, (uint64_t)&v51, *(double **)(a1 + 8), v40, *(double **)(a3 + 8), v37, v39, v36, v38);
        }
        *(double *)(*(void *)(a6 + 8) + v26) = v35;
        v26 += 8;
      }
      while (v29 != v26);
    }
  }
  else if (v25)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 8 * v25;
    do
    {
      double v43 = *(double *)(*(void *)(a4 + 8) + v41);
      double v44 = *(double *)(*(void *)(a5 + 8) + v41);
      if (v43 > v21 || v43 < v20 || v44 > v24 || v44 < v23)
      {
        *(double *)(*(void *)(a6 + 8) + v41) = a8;
      }
      else
      {
        unsigned int v49 = 0;
        unsigned int v50 = 0;
        Algo::BinSearchNearestLowest<double>(a1, 0, (int *)&v50, v43);
        Algo::BinSearchNearestLowest<double>(a2, 0, (int *)&v49, v44);
        *(double *)(*(void *)(a6 + 8) + v41) = CubicInterpolator<double>::operator()(v43, v44, (uint64_t)&v51, *(double **)(a1 + 8), *(double **)(a2 + 8), *(double **)(a3 + 8), *(_DWORD *)(a1 + 20), *(_DWORD *)(a2 + 20), v50, v49);
      }
      v41 += 8;
    }
    while (v42 != v41);
  }
  return 0;
}

double CubicInterpolator<double>::operator()(double a1, double a2, uint64_t a3, double *a4, double *a5, double *a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  if (a8 >= 4)
  {
    if (a8 - 2 > a10)
    {
      if (a10)
      {
        BOOL v10 = &a6[(a10 - 1) * a7];
        if (a7 < 4)
        {
          if (a7 != 3)
          {
            double v13 = *v10;
            double v14 = v10[1];
            double v12 = -(v14 - *v10 * 2.0);
            double v15 = -(*v10 - v14 * 2.0);
LABEL_111:
            double v16 = *a4;
            double v17 = a4[1];
            goto LABEL_112;
          }
          double v13 = *v10;
          double v14 = v10[1];
          if (a9)
          {
            double v15 = -(v14 - v10[2] * 2.0);
            double v16 = *a4;
            double v17 = a4[1];
            double v56 = v17;
            double v12 = *v10;
            double v13 = v10[1];
            double v14 = v10[2];
            goto LABEL_113;
          }
        }
        else
        {
          unsigned int v11 = a7 - 2;
          if (a7 - 2 <= a9)
          {
            double v12 = v10[a7 - 3];
            double v13 = v10[v11];
            double v14 = v10[a7 - 1];
            double v15 = -(v13 - v14 * 2.0);
            double v16 = a4[v11];
            double v17 = a4[a7 - 1];
            goto LABEL_112;
          }
          if (a9)
          {
            double v12 = v10[a9 - 1];
            double v13 = v10[a9];
            double v14 = v10[a9 + 1];
            double v15 = v10[a9 + 2];
            double v16 = a4[a9];
            double v17 = a4[a9 + 1];
LABEL_112:
            double v56 = v16;
LABEL_113:
            double v101 = (a1 - v56) / (v17 - v16);
            double v102 = v101 * (v101 * ((v13 - v14) * 1.5 + (v15 - v12) * 0.5));
            double v103 = v101 * (v101 * (v12 + v13 * -2.5 + v14 * 2.0 + v15 * -0.5));
            double v104 = v14 - v12;
            long long v105 = &v10[a7];
            if (a7 < 4)
            {
              if (a7 != 3)
              {
                double v108 = *v105;
                double v109 = v105[1];
                double v107 = -(v109 - *v105 * 2.0);
                double v110 = -(*v105 - v109 * 2.0);
LABEL_137:
                double v111 = *a4;
                double v112 = a4[1];
                goto LABEL_138;
              }
              double v108 = *v105;
              double v109 = v105[1];
              if (a9)
              {
                double v110 = -(v109 - v105[2] * 2.0);
                double v111 = *a4;
                double v112 = a4[1];
                double v113 = v112;
                double v107 = *v105;
                double v108 = v105[1];
                double v109 = v105[2];
                goto LABEL_139;
              }
            }
            else
            {
              unsigned int v106 = a7 - 2;
              if (a7 - 2 <= a9)
              {
                double v107 = v105[a7 - 3];
                double v108 = v105[v106];
                double v109 = v105[a7 - 1];
                double v110 = -(v108 - v109 * 2.0);
                double v111 = a4[v106];
                double v112 = a4[a7 - 1];
                goto LABEL_138;
              }
              if (a9)
              {
                double v107 = v105[a9 - 1];
                double v108 = v105[a9];
                double v109 = v105[a9 + 1];
                double v110 = v105[a9 + 2];
                double v111 = a4[a9];
                double v112 = a4[a9 + 1];
LABEL_138:
                double v113 = v111;
LABEL_139:
                double v126 = v103 + v102 * v101;
                double v127 = v104 * 0.5;
                double v128 = (a1 - v113) / (v112 - v111);
                double v129 = v128 * (v128 * (v107 + v108 * -2.5 + v109 * 2.0 + v110 * -0.5))
                     + v128 * (v128 * ((v108 - v109) * 1.5 + (v110 - v107) * 0.5)) * v128;
                double v130 = (v109 - v107) * 0.5;
                long long v131 = &v10[2 * a7];
                if (a7 < 4)
                {
                  if (a7 != 3)
                  {
                    double v134 = *v131;
                    double v135 = v131[1];
                    double v133 = -(v135 - *v131 * 2.0);
                    double v136 = -(*v131 - v135 * 2.0);
LABEL_163:
                    double v137 = *a4;
                    double v138 = a4[1];
                    goto LABEL_164;
                  }
                  double v134 = *v131;
                  double v135 = v131[1];
                  if (a9)
                  {
                    double v136 = -(v135 - v131[2] * 2.0);
                    double v137 = *a4;
                    double v138 = a4[1];
                    double v139 = v138;
                    double v133 = *v131;
                    double v134 = v131[1];
                    double v135 = v131[2];
                    goto LABEL_165;
                  }
                }
                else
                {
                  unsigned int v132 = a7 - 2;
                  if (a7 - 2 <= a9)
                  {
                    double v133 = v131[a7 - 3];
                    double v134 = v131[v132];
                    double v135 = v131[a7 - 1];
                    double v136 = -(v134 - v135 * 2.0);
                    double v137 = a4[v132];
                    double v138 = a4[a7 - 1];
                    goto LABEL_164;
                  }
                  if (a9)
                  {
                    double v133 = v131[a9 - 1];
                    double v134 = v131[a9];
                    double v135 = v131[a9 + 1];
                    double v136 = v131[a9 + 2];
                    double v137 = a4[a9];
                    double v138 = a4[a9 + 1];
LABEL_164:
                    double v139 = v137;
LABEL_165:
                    double v151 = v126 + v127 * v101;
                    double v152 = v129 + v130 * v128;
                    double v153 = (a1 - v139) / (v138 - v137);
                    double v154 = v153 * (v153 * (v133 + v134 * -2.5 + v135 * 2.0 + v136 * -0.5))
                         + v153 * (v153 * ((v134 - v135) * 1.5 + (v136 - v133) * 0.5)) * v153
                         + (v135 - v133) * 0.5 * v153;
                    long long v155 = &v10[3 * a7];
                    if (a7 < 4)
                    {
                      if (a7 != 3)
                      {
                        double v158 = *v155;
                        double v159 = v155[1];
                        double v157 = -(v159 - *v155 * 2.0);
                        double v160 = -(*v155 - v159 * 2.0);
LABEL_181:
                        double v161 = *a4;
                        double v162 = a4[1];
                        goto LABEL_182;
                      }
                      double v158 = *v155;
                      double v159 = v155[1];
                      if (a9)
                      {
                        double v160 = -(v159 - v155[2] * 2.0);
                        double v161 = *a4;
                        double v162 = a4[1];
                        double v163 = v162;
                        double v157 = *v155;
                        double v158 = v155[1];
                        double v159 = v155[2];
LABEL_183:
                        double v96 = v13 + v151;
                        double v73 = v108 + v152;
                        double v95 = v134 + v154;
                        double v167 = (a1 - v163) / (v162 - v161);
                        double v97 = v158
                            + v167 * (v167 * (v157 + v158 * -2.5 + v159 * 2.0 + v160 * -0.5))
                            + v167 * (v167 * ((v158 - v159) * 1.5 + (v160 - v157) * 0.5)) * v167
                            + (v159 - v157) * 0.5 * v167;
                        double v99 = a5[a10];
                        unsigned int v100 = a10 + 1;
                        goto LABEL_184;
                      }
                    }
                    else
                    {
                      unsigned int v156 = a7 - 2;
                      if (a7 - 2 <= a9)
                      {
                        double v157 = v155[a7 - 3];
                        double v158 = v155[v156];
                        double v159 = v155[a7 - 1];
                        double v160 = -(v158 - v159 * 2.0);
                        double v161 = a4[v156];
                        double v162 = a4[a7 - 1];
                        goto LABEL_182;
                      }
                      if (a9)
                      {
                        double v157 = v155[a9 - 1];
                        double v158 = v155[a9];
                        double v159 = v155[a9 + 1];
                        double v160 = v155[a9 + 2];
                        double v161 = a4[a9];
                        double v162 = a4[a9 + 1];
LABEL_182:
                        double v163 = v161;
                        goto LABEL_183;
                      }
                      double v158 = *v155;
                      double v159 = v155[1];
                    }
                    double v157 = -(v159 - v158 * 2.0);
                    double v160 = v155[2];
                    goto LABEL_181;
                  }
                  double v134 = *v131;
                  double v135 = v131[1];
                }
                double v133 = -(v135 - v134 * 2.0);
                double v136 = v131[2];
                goto LABEL_163;
              }
              double v108 = *v105;
              double v109 = v105[1];
            }
            double v107 = -(v109 - v108 * 2.0);
            double v110 = v105[2];
            goto LABEL_137;
          }
          double v13 = *v10;
          double v14 = v10[1];
        }
        double v12 = -(v14 - v13 * 2.0);
        double v15 = v10[2];
        goto LABEL_111;
      }
      if (a7 < 4)
      {
        if (a7 != 3)
        {
          double v44 = *a6;
          double v45 = a6[1];
          double v43 = -(v45 - *a6 * 2.0);
          double v46 = -(*a6 - v45 * 2.0);
LABEL_187:
          double v47 = *a4;
          double v48 = a4[1];
          goto LABEL_188;
        }
        double v44 = *a6;
        double v45 = a6[1];
        if (a9)
        {
          double v46 = -(v45 - a6[2] * 2.0);
          double v47 = *a4;
          double v48 = a4[1];
          double v58 = v48;
          double v43 = *a6;
          double v44 = a6[1];
          double v45 = a6[2];
          goto LABEL_189;
        }
      }
      else
      {
        unsigned int v42 = a7 - 2;
        if (a7 - 2 <= a9)
        {
          double v43 = a6[a7 - 3];
          double v44 = a6[v42];
          double v45 = a6[a7 - 1];
          double v46 = -(v44 - v45 * 2.0);
          double v47 = a4[v42];
          double v48 = a4[a7 - 1];
          goto LABEL_188;
        }
        if (a9)
        {
          double v43 = a6[a9 - 1];
          double v44 = a6[a9];
          double v45 = a6[a9 + 1];
          double v46 = a6[a9 + 2];
          double v47 = a4[a9];
          double v48 = a4[a9 + 1];
LABEL_188:
          double v58 = v47;
LABEL_189:
          double v168 = (a1 - v58) / (v48 - v47);
          double v169 = v168 * (v168 * (v43 + v44 * -2.5 + v45 * 2.0 + v46 * -0.5))
               + v168 * (v168 * ((v44 - v45) * 1.5 + (v46 - v43) * 0.5)) * v168
               + (v45 - v43) * 0.5 * v168;
          long long v170 = &a6[a7];
          if (a7 < 4)
          {
            if (a7 != 3)
            {
              double v173 = *v170;
              double v174 = v170[1];
              double v172 = -(v174 - *v170 * 2.0);
              double v175 = -(*v170 - v174 * 2.0);
LABEL_213:
              double v176 = *a4;
              double v177 = a4[1];
              goto LABEL_214;
            }
            double v173 = *v170;
            double v174 = v170[1];
            if (a9)
            {
              double v175 = -(v174 - v170[2] * 2.0);
              double v176 = *a4;
              double v177 = a4[1];
              double v178 = v177;
              double v172 = *v170;
              double v173 = v170[1];
              double v174 = v170[2];
              goto LABEL_215;
            }
          }
          else
          {
            unsigned int v171 = a7 - 2;
            if (a7 - 2 <= a9)
            {
              double v172 = v170[a7 - 3];
              double v173 = v170[v171];
              double v174 = v170[a7 - 1];
              double v175 = -(v173 - v174 * 2.0);
              double v176 = a4[v171];
              double v177 = a4[a7 - 1];
              goto LABEL_214;
            }
            if (a9)
            {
              double v172 = v170[a9 - 1];
              double v173 = v170[a9];
              double v174 = v170[a9 + 1];
              double v175 = v170[a9 + 2];
              double v176 = a4[a9];
              double v177 = a4[a9 + 1];
LABEL_214:
              double v178 = v176;
LABEL_215:
              double v73 = v44 + v169;
              double v190 = (a1 - v178) / (v177 - v176);
              double v191 = 2.0;
              double v95 = v173
                  + v190 * (v190 * (v172 + v173 * -2.5 + v174 * 2.0 + v175 * -0.5))
                  + v190 * (v190 * ((v173 - v174) * 1.5 + (v175 - v172) * 0.5)) * v190
                  + (v174 - v172) * 0.5 * v190;
              long long v192 = &a6[2 * a7];
              if (a7 >= 4)
              {
                unsigned int v193 = a7 - 2;
                if (a7 - 2 > a9)
                {
                  if (!a9)
                  {
LABEL_218:
                    double v194 = *v192;
                    double v195 = v192[1];
                    goto LABEL_232;
                  }
                  goto LABEL_226;
                }
                goto LABEL_230;
              }
              goto LABEL_227;
            }
            double v173 = *v170;
            double v174 = v170[1];
          }
          double v172 = -(v174 - v173 * 2.0);
          double v175 = v170[2];
          goto LABEL_213;
        }
        double v44 = *a6;
        double v45 = a6[1];
      }
      double v43 = -(v45 - v44 * 2.0);
      double v46 = a6[2];
      goto LABEL_187;
    }
    uint64_t v25 = &a6[(a8 - 3) * a7];
    if (a7 < 4)
    {
      if (a7 != 3)
      {
        double v28 = *v25;
        double v29 = v25[1];
        double v27 = -(v29 - *v25 * 2.0);
        double v30 = -(*v25 - v29 * 2.0);
LABEL_58:
        double v31 = *a4;
        double v32 = a4[1];
        goto LABEL_59;
      }
      double v28 = *v25;
      double v29 = v25[1];
      if (a9)
      {
        double v30 = -(v29 - v25[2] * 2.0);
        double v31 = *a4;
        double v32 = a4[1];
        double v40 = v32;
        double v27 = *v25;
        double v28 = v25[1];
        double v29 = v25[2];
        goto LABEL_60;
      }
    }
    else
    {
      unsigned int v26 = a7 - 2;
      if (a7 - 2 <= a9)
      {
        double v27 = v25[a7 - 3];
        double v28 = v25[v26];
        double v29 = v25[a7 - 1];
        double v30 = -(v28 - v29 * 2.0);
        double v31 = a4[v26];
        double v32 = a4[a7 - 1];
        goto LABEL_59;
      }
      if (a9)
      {
        double v27 = v25[a9 - 1];
        double v28 = v25[a9];
        double v29 = v25[a9 + 1];
        double v30 = v25[a9 + 2];
        double v31 = a4[a9];
        double v32 = a4[a9 + 1];
LABEL_59:
        double v40 = v31;
LABEL_60:
        double v60 = (a1 - v40) / (v32 - v31);
        double v61 = v60 * (v60 * (v27 + v28 * -2.5 + v29 * 2.0 + v30 * -0.5))
            + v60 * (v60 * ((v28 - v29) * 1.5 + (v30 - v27) * 0.5)) * v60;
        double v62 = (v29 - v27) * 0.5;
        float64x2_t v63 = &v25[a7];
        if (a7 < 4)
        {
          if (a7 != 3)
          {
            double v66 = *v63;
            double v67 = v63[1];
            double v65 = -(v67 - *v63 * 2.0);
            double v68 = -(*v63 - v67 * 2.0);
LABEL_88:
            double v69 = *a4;
            double v70 = a4[1];
            goto LABEL_89;
          }
          double v66 = *v63;
          double v67 = v63[1];
          if (a9)
          {
            double v68 = -(v67 - v63[2] * 2.0);
            double v69 = *a4;
            double v70 = a4[1];
            double v71 = v70;
            double v65 = *v63;
            double v66 = v63[1];
            double v67 = v63[2];
            goto LABEL_90;
          }
        }
        else
        {
          unsigned int v64 = a7 - 2;
          if (a7 - 2 <= a9)
          {
            double v65 = v63[a7 - 3];
            double v66 = v63[v64];
            double v67 = v63[a7 - 1];
            double v68 = -(v66 - v67 * 2.0);
            double v69 = a4[v64];
            double v70 = a4[a7 - 1];
            goto LABEL_89;
          }
          if (a9)
          {
            double v65 = v63[a9 - 1];
            double v66 = v63[a9];
            double v67 = v63[a9 + 1];
            double v68 = v63[a9 + 2];
            double v69 = a4[a9];
            double v70 = a4[a9 + 1];
LABEL_89:
            double v71 = v69;
LABEL_90:
            double v83 = v61 + v62 * v60;
            double v84 = (a1 - v71) / (v70 - v69);
            double v73 = v66
                + v84 * (v84 * (v65 + v66 * -2.5 + v67 * 2.0 + v68 * -0.5))
                + v84 * (v84 * ((v66 - v67) * 1.5 + (v68 - v65) * 0.5)) * v84
                + (v67 - v65) * 0.5 * v84;
            uint64_t v85 = &v25[2 * a7];
            if (a7 < 4)
            {
              if (a7 != 3)
              {
                double v88 = *v85;
                double v89 = v85[1];
                double v87 = -(v89 - *v85 * 2.0);
                double v90 = -(*v85 - v89 * 2.0);
LABEL_106:
                double v91 = *a4;
                double v92 = a4[1];
                goto LABEL_107;
              }
              double v88 = *v85;
              double v89 = v85[1];
              if (a9)
              {
                double v90 = -(v89 - v85[2] * 2.0);
                double v91 = *a4;
                double v92 = a4[1];
                double v93 = v92;
                double v87 = *v85;
                double v88 = v85[1];
                double v89 = v85[2];
LABEL_108:
                double v96 = v28 + v83;
                double v98 = (a1 - v93) / (v92 - v91);
                double v95 = v88
                    + v98 * (v98 * (v87 + v88 * -2.5 + v89 * 2.0 + v90 * -0.5))
                    + v98 * (v98 * ((v88 - v89) * 1.5 + (v90 - v87) * 0.5)) * v98
                    + (v89 - v87) * 0.5 * v98;
                double v97 = -(v73 - v95 * 2.0);
                double v99 = a5[a8 - 2];
                unsigned int v100 = a8 - 1;
LABEL_184:
                double v165 = a5[v100];
LABEL_237:
                double v166 = v99;
                goto LABEL_238;
              }
            }
            else
            {
              unsigned int v86 = a7 - 2;
              if (a7 - 2 <= a9)
              {
                double v87 = v85[a7 - 3];
                double v88 = v85[v86];
                double v89 = v85[a7 - 1];
                double v90 = -(v88 - v89 * 2.0);
                double v91 = a4[v86];
                double v92 = a4[a7 - 1];
                goto LABEL_107;
              }
              if (a9)
              {
                double v87 = v85[a9 - 1];
                double v88 = v85[a9];
                double v89 = v85[a9 + 1];
                double v90 = v85[a9 + 2];
                double v91 = a4[a9];
                double v92 = a4[a9 + 1];
LABEL_107:
                double v93 = v91;
                goto LABEL_108;
              }
              double v88 = *v85;
              double v89 = v85[1];
            }
            double v87 = -(v89 - v88 * 2.0);
            double v90 = v85[2];
            goto LABEL_106;
          }
          double v66 = *v63;
          double v67 = v63[1];
        }
        double v65 = -(v67 - v66 * 2.0);
        double v68 = v63[2];
        goto LABEL_88;
      }
      double v28 = *v25;
      double v29 = v25[1];
    }
    double v27 = -(v29 - v28 * 2.0);
    double v30 = v25[2];
    goto LABEL_58;
  }
  if (a8 != 3)
  {
    if (a7 < 4)
    {
      if (a7 != 3)
      {
        double v35 = *a6;
        double v36 = a6[1];
        double v34 = -(v36 - *a6 * 2.0);
        double v37 = -(*a6 - v36 * 2.0);
LABEL_71:
        double v38 = *a4;
        double v39 = a4[1];
        goto LABEL_72;
      }
      double v35 = *a6;
      double v36 = a6[1];
      if (a9)
      {
        double v37 = -(v36 - a6[2] * 2.0);
        double v38 = *a4;
        double v39 = a4[1];
        double v41 = v39;
        double v34 = *a6;
        double v35 = a6[1];
        double v36 = a6[2];
        goto LABEL_73;
      }
    }
    else
    {
      unsigned int v33 = a7 - 2;
      if (a7 - 2 <= a9)
      {
        double v34 = a6[a7 - 3];
        double v35 = a6[v33];
        double v36 = a6[a7 - 1];
        double v37 = -(v35 - v36 * 2.0);
        double v38 = a4[v33];
        double v39 = a4[a7 - 1];
        goto LABEL_72;
      }
      if (a9)
      {
        double v34 = a6[a9 - 1];
        double v35 = a6[a9];
        double v36 = a6[a9 + 1];
        double v37 = a6[a9 + 2];
        double v38 = a4[a9];
        double v39 = a4[a9 + 1];
LABEL_72:
        double v41 = v38;
LABEL_73:
        double v72 = (a1 - v41) / (v39 - v38);
        double v73 = v35
            + v72 * (v72 * (v34 + v35 * -2.5 + v36 * 2.0 + v37 * -0.5))
            + v72 * (v72 * ((v35 - v36) * 1.5 + (v37 - v34) * 0.5)) * v72
            + (v36 - v34) * 0.5 * v72;
        double v74 = &a6[a7];
        if (a7 < 4)
        {
          if (a7 != 3)
          {
            double v77 = *v74;
            double v78 = v74[1];
            double v76 = -(v78 - *v74 * 2.0);
            double v79 = -(*v74 - v78 * 2.0);
LABEL_101:
            double v80 = *a4;
            double v81 = a4[1];
            goto LABEL_102;
          }
          double v77 = *v74;
          double v78 = v74[1];
          if (a9)
          {
            double v79 = -(v78 - v74[2] * 2.0);
            double v80 = *a4;
            double v81 = a4[1];
            double v82 = v81;
            double v76 = *v74;
            double v77 = v74[1];
            double v78 = v74[2];
LABEL_103:
            double v94 = (a1 - v82) / (v81 - v80);
            double v95 = v77
                + v94 * (v94 * (v76 + v77 * -2.5 + v78 * 2.0 + v79 * -0.5))
                + v94 * (v94 * ((v77 - v78) * 1.5 + (v79 - v76) * 0.5)) * v94
                + (v78 - v76) * 0.5 * v94;
            double v96 = -(v95 - v73 * 2.0);
            double v97 = -(v73 - v95 * 2.0);
LABEL_236:
            double v99 = *a5;
            double v165 = a5[1];
            goto LABEL_237;
          }
        }
        else
        {
          unsigned int v75 = a7 - 2;
          if (a7 - 2 <= a9)
          {
            double v76 = v74[a7 - 3];
            double v77 = v74[v75];
            double v78 = v74[a7 - 1];
            double v79 = -(v77 - v78 * 2.0);
            double v80 = a4[v75];
            double v81 = a4[a7 - 1];
            goto LABEL_102;
          }
          if (a9)
          {
            double v76 = v74[a9 - 1];
            double v77 = v74[a9];
            double v78 = v74[a9 + 1];
            double v79 = v74[a9 + 2];
            double v80 = a4[a9];
            double v81 = a4[a9 + 1];
LABEL_102:
            double v82 = v80;
            goto LABEL_103;
          }
          double v77 = *v74;
          double v78 = v74[1];
        }
        double v76 = -(v78 - v77 * 2.0);
        double v79 = v74[2];
        goto LABEL_101;
      }
      double v35 = *a6;
      double v36 = a6[1];
    }
    double v34 = -(v36 - v35 * 2.0);
    double v37 = a6[2];
    goto LABEL_71;
  }
  if (!a10)
  {
    if (a7 < 4)
    {
      if (a7 != 3)
      {
        double v51 = *a6;
        double v52 = a6[1];
        double v50 = -(v52 - *a6 * 2.0);
        double v53 = -(*a6 - v52 * 2.0);
LABEL_200:
        double v54 = *a4;
        double v55 = a4[1];
        goto LABEL_201;
      }
      double v51 = *a6;
      double v52 = a6[1];
      if (a9)
      {
        double v53 = -(v52 - a6[2] * 2.0);
        double v54 = *a4;
        double v55 = a4[1];
        double v59 = v55;
        double v50 = *a6;
        double v51 = a6[1];
        double v52 = a6[2];
        goto LABEL_202;
      }
    }
    else
    {
      unsigned int v49 = a7 - 2;
      if (a7 - 2 <= a9)
      {
        double v50 = a6[a7 - 3];
        double v51 = a6[v49];
        double v52 = a6[a7 - 1];
        double v53 = -(v51 - v52 * 2.0);
        double v54 = a4[v49];
        double v55 = a4[a7 - 1];
        goto LABEL_201;
      }
      if (a9)
      {
        double v50 = a6[a9 - 1];
        double v51 = a6[a9];
        double v52 = a6[a9 + 1];
        double v53 = a6[a9 + 2];
        double v54 = a4[a9];
        double v55 = a4[a9 + 1];
LABEL_201:
        double v59 = v54;
LABEL_202:
        double v179 = (a1 - v59) / (v55 - v54);
        double v180 = v179 * (v179 * (v50 + v51 * -2.5 + v52 * 2.0 + v53 * -0.5))
             + v179 * (v179 * ((v51 - v52) * 1.5 + (v53 - v50) * 0.5)) * v179
             + (v52 - v50) * 0.5 * v179;
        long long v181 = &a6[a7];
        if (a7 < 4)
        {
          if (a7 != 3)
          {
            double v184 = *v181;
            double v185 = v181[1];
            double v183 = -(v185 - *v181 * 2.0);
            double v186 = -(*v181 - v185 * 2.0);
LABEL_221:
            double v187 = *a4;
            double v188 = a4[1];
            goto LABEL_222;
          }
          double v184 = *v181;
          double v185 = v181[1];
          if (a9)
          {
            double v186 = -(v185 - v181[2] * 2.0);
            double v187 = *a4;
            double v188 = a4[1];
            double v189 = v188;
            double v183 = *v181;
            double v184 = v181[1];
            double v185 = v181[2];
            goto LABEL_223;
          }
        }
        else
        {
          unsigned int v182 = a7 - 2;
          if (a7 - 2 <= a9)
          {
            double v183 = v181[a7 - 3];
            double v184 = v181[v182];
            double v185 = v181[a7 - 1];
            double v186 = -(v184 - v185 * 2.0);
            double v187 = a4[v182];
            double v188 = a4[a7 - 1];
            goto LABEL_222;
          }
          if (a9)
          {
            double v183 = v181[a9 - 1];
            double v184 = v181[a9];
            double v185 = v181[a9 + 1];
            double v186 = v181[a9 + 2];
            double v187 = a4[a9];
            double v188 = a4[a9 + 1];
LABEL_222:
            double v189 = v187;
LABEL_223:
            double v73 = v51 + v180;
            double v196 = (a1 - v189) / (v188 - v187);
            double v191 = 2.0;
            double v95 = v184
                + v196 * (v196 * (v183 + v184 * -2.5 + v185 * 2.0 + v186 * -0.5))
                + v196 * (v196 * ((v184 - v185) * 1.5 + (v186 - v183) * 0.5)) * v196
                + (v185 - v183) * 0.5 * v196;
            long long v192 = &a6[2 * a7];
            if (a7 >= 4)
            {
              unsigned int v193 = a7 - 2;
              if (a7 - 2 > a9)
              {
                if (!a9) {
                  goto LABEL_218;
                }
LABEL_226:
                double v197 = v192[a9 - 1];
                double v194 = v192[a9];
                double v195 = v192[a9 + 1];
                double v198 = v192[a9 + 2];
                double v199 = a4[a9];
                double v200 = a4[a9 + 1];
LABEL_234:
                double v201 = v199;
                goto LABEL_235;
              }
LABEL_230:
              double v197 = v192[a7 - 3];
              double v194 = v192[v193];
              double v195 = v192[a7 - 1];
              double v198 = -(v194 - v195 * 2.0);
              double v199 = a4[v193];
              double v200 = a4[a7 - 1];
              goto LABEL_234;
            }
LABEL_227:
            if (a7 != 3)
            {
              double v194 = *v192;
              double v195 = v192[1];
              double v197 = -(v195 - *v192 * 2.0);
              double v198 = -(*v192 - v195 * 2.0);
LABEL_233:
              double v199 = *a4;
              double v200 = a4[1];
              goto LABEL_234;
            }
            double v194 = *v192;
            double v195 = v192[1];
            if (a9)
            {
              double v198 = -(v195 - v192[2] * 2.0);
              double v199 = *a4;
              double v200 = a4[1];
              double v201 = v200;
              double v197 = *v192;
              double v194 = v192[1];
              double v195 = v192[2];
LABEL_235:
              double v96 = -(v95 - v73 * v191);
              double v202 = (a1 - v201) / (v200 - v199);
              double v97 = v194
                  + v202 * (v202 * (v197 + v194 * -2.5 + v195 * 2.0 + v198 * -0.5))
                  + v202 * (v202 * ((v194 - v195) * 1.5 + (v198 - v197) * 0.5)) * v202
                  + (v195 - v197) * 0.5 * v202;
              goto LABEL_236;
            }
LABEL_232:
            double v197 = -(v195 - v194 * 2.0);
            double v198 = v192[2];
            goto LABEL_233;
          }
          double v184 = *v181;
          double v185 = v181[1];
        }
        double v183 = -(v185 - v184 * 2.0);
        double v186 = v181[2];
        goto LABEL_221;
      }
      double v51 = *a6;
      double v52 = a6[1];
    }
    double v50 = -(v52 - v51 * 2.0);
    double v53 = a6[2];
    goto LABEL_200;
  }
  if (a7 < 4)
  {
    if (a7 != 3)
    {
      double v20 = *a6;
      double v21 = a6[1];
      double v19 = -(v21 - *a6 * 2.0);
      double v22 = -(*a6 - v21 * 2.0);
LABEL_124:
      double v23 = *a4;
      double v24 = a4[1];
      goto LABEL_125;
    }
    double v20 = *a6;
    double v21 = a6[1];
    if (a9)
    {
      double v22 = -(v21 - a6[2] * 2.0);
      double v23 = *a4;
      double v24 = a4[1];
      double v57 = v24;
      double v19 = *a6;
      double v20 = a6[1];
      double v21 = a6[2];
      goto LABEL_126;
    }
LABEL_123:
    double v19 = -(v21 - v20 * 2.0);
    double v22 = a6[2];
    goto LABEL_124;
  }
  unsigned int v18 = a7 - 2;
  if (a7 - 2 <= a9)
  {
    double v19 = a6[a7 - 3];
    double v20 = a6[v18];
    double v21 = a6[a7 - 1];
    double v22 = -(v20 - v21 * 2.0);
    double v23 = a4[v18];
    double v24 = a4[a7 - 1];
    goto LABEL_125;
  }
  if (!a9)
  {
    double v20 = *a6;
    double v21 = a6[1];
    goto LABEL_123;
  }
  double v19 = a6[a9 - 1];
  double v20 = a6[a9];
  double v21 = a6[a9 + 1];
  double v22 = a6[a9 + 2];
  double v23 = a4[a9];
  double v24 = a4[a9 + 1];
LABEL_125:
  double v57 = v23;
LABEL_126:
  double v114 = (a1 - v57) / (v24 - v23);
  double v115 = v114 * (v114 * (v19 + v20 * -2.5 + v21 * 2.0 + v22 * -0.5))
       + v114 * (v114 * ((v20 - v21) * 1.5 + (v22 - v19) * 0.5)) * v114;
  double v116 = (v21 - v19) * 0.5;
  long long v117 = &a6[a7];
  if (a7 < 4)
  {
    if (a7 != 3)
    {
      double v120 = *v117;
      double v121 = v117[1];
      double v119 = -(v121 - *v117 * 2.0);
      double v122 = -(*v117 - v121 * 2.0);
LABEL_150:
      double v123 = *a4;
      double v124 = a4[1];
      goto LABEL_151;
    }
    double v120 = *v117;
    double v121 = v117[1];
    if (a9)
    {
      double v122 = -(v121 - v117[2] * 2.0);
      double v123 = *a4;
      double v124 = a4[1];
      double v125 = v124;
      double v119 = *v117;
      double v120 = v117[1];
      double v121 = v117[2];
      goto LABEL_152;
    }
LABEL_149:
    double v119 = -(v121 - v120 * 2.0);
    double v122 = v117[2];
    goto LABEL_150;
  }
  unsigned int v118 = a7 - 2;
  if (a7 - 2 <= a9)
  {
    double v119 = v117[a7 - 3];
    double v120 = v117[v118];
    double v121 = v117[a7 - 1];
    double v122 = -(v120 - v121 * 2.0);
    double v123 = a4[v118];
    double v124 = a4[a7 - 1];
    goto LABEL_151;
  }
  if (!a9)
  {
    double v120 = *v117;
    double v121 = v117[1];
    goto LABEL_149;
  }
  double v119 = v117[a9 - 1];
  double v120 = v117[a9];
  double v121 = v117[a9 + 1];
  double v122 = v117[a9 + 2];
  double v123 = a4[a9];
  double v124 = a4[a9 + 1];
LABEL_151:
  double v125 = v123;
LABEL_152:
  double v140 = v115 + v116 * v114;
  double v141 = (a1 - v125) / (v124 - v123);
  double v73 = v120
      + v141 * (v141 * (v119 + v120 * -2.5 + v121 * 2.0 + v122 * -0.5))
      + v141 * (v141 * ((v120 - v121) * 1.5 + (v122 - v119) * 0.5)) * v141
      + (v121 - v119) * 0.5 * v141;
  BOOL v142 = &a6[2 * a7];
  if (a7 >= 4)
  {
    unsigned int v143 = a7 - 2;
    if (a7 - 2 <= a9)
    {
      double v144 = v142[a7 - 3];
      double v145 = v142[v143];
      double v146 = v142[a7 - 1];
      double v147 = -(v145 - v146 * 2.0);
      double v148 = a4[v143];
      double v149 = a4[a7 - 1];
      goto LABEL_177;
    }
    if (a9)
    {
      double v144 = v142[a9 - 1];
      double v145 = v142[a9];
      double v146 = v142[a9 + 1];
      double v147 = v142[a9 + 2];
      double v148 = a4[a9];
      double v149 = a4[a9 + 1];
LABEL_177:
      double v150 = v148;
      goto LABEL_178;
    }
    double v145 = *v142;
    double v146 = v142[1];
    goto LABEL_175;
  }
  if (a7 != 3)
  {
    double v145 = *v142;
    double v146 = v142[1];
    double v144 = -(v146 - *v142 * 2.0);
    double v147 = -(*v142 - v146 * 2.0);
LABEL_176:
    double v148 = *a4;
    double v149 = a4[1];
    goto LABEL_177;
  }
  double v145 = *v142;
  double v146 = v142[1];
  if (!a9)
  {
LABEL_175:
    double v144 = -(v146 - v145 * 2.0);
    double v147 = v142[2];
    goto LABEL_176;
  }
  double v147 = -(v146 - v142[2] * 2.0);
  double v148 = *a4;
  double v149 = a4[1];
  double v150 = v149;
  double v144 = *v142;
  double v145 = v142[1];
  double v146 = v142[2];
LABEL_178:
  double v96 = v20 + v140;
  double v164 = (a1 - v150) / (v149 - v148);
  double v95 = v145
      + v164 * (v164 * (v144 + v145 * -2.5 + v146 * 2.0 + v147 * -0.5))
      + v164 * (v164 * ((v145 - v146) * 1.5 + (v147 - v144) * 0.5)) * v164
      + (v146 - v144) * 0.5 * v164;
  double v97 = -(v73 - v95 * 2.0);
  double v99 = *a5;
  double v165 = a5[1];
  double v166 = v165;
LABEL_238:
  double v203 = (a2 - v166) / (v165 - v99);
  return v73
       + v203 * (v203 * (v96 + v73 * -2.5 + v95 * 2.0 + v97 * -0.5))
       + v203 * (v203 * ((v73 - v95) * 1.5 + (v97 - v96) * 0.5)) * v203
       + (v95 - v96) * 0.5 * v203;
}

uint64_t Interp1<double,LinearInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  if (v5 != *(_DWORD *)(a2 + 20)) {
    Interp1<double,LinearInterpolator<double>>();
  }
  if (v5 <= 1) {
    Interp1<double,LinearInterpolator<double>>();
  }
  BOOL v10 = *(double **)(a1 + 8);
  unsigned int v11 = *(double **)(a3 + 8);
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v13 = *(unsigned int *)(a3 + 20);
  Matrix<double>::Resize(a4, 1, *(_DWORD *)(a3 + 20));
  if ((int)v13 >= 1)
  {
    double v14 = *(double **)(a4 + 8);
    double v15 = *v10;
    double v16 = v10[v5 - 1];
    uint64_t v17 = v12 + 8 * v5;
    unsigned int v18 = v5 - 1;
    unsigned int v19 = v5 - 2;
    do
    {
      double v20 = *v11;
      if (*v11 > v16 || v20 < v15)
      {
        *double v14 = a5;
      }
      else
      {
        unsigned int v25 = 0;
        Algo::BinSearchNearestLowest<double>(a1, 0, (int *)&v25, v20);
        if (v20 >= v16)
        {
          double v23 = *(double *)(v17 - 8);
        }
        else
        {
          unsigned int v22 = v25;
          if (v18 <= v25) {
            unsigned int v22 = v19;
          }
          double v23 = *(double *)(*(void *)(a2 + 8) + 8 * v22)
              + (*(double *)(*(void *)(a2 + 8) + 8 * (v22 + 1)) - *(double *)(*(void *)(a2 + 8) + 8 * v22))
              * ((v20 - v10[v22])
               / (v10[v22 + 1] - v10[v22]));
        }
        *double v14 = v23;
      }
      ++v14;
      ++v11;
      --v13;
    }
    while (v13);
  }
  return 0;
}

uint64_t GeomUtils::CalcRotationMatrix<double>(uint64_t a1, double a2, long double a3, long double a4)
{
  double v8 = cos(a3);
  double v9 = cos(a4);
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (!v10 || (uint64_t v11 = *(unsigned int *)(a1 + 20), !v11)) {
    GMC_Homography();
  }
  double v12 = v9;
  **(double **)(a1 + 8) = v8 * v9;
  __double2 v13 = __sincos_stret(a2);
  double v14 = sin(a3);
  double v15 = sin(a4);
  if (v11 == 1) {
    GMC_Homography();
  }
  *(double *)(*(void *)(a1 + 8) + 8) = v13.__sinval * v12 * v14 - v13.__cosval * v15;
  if (v11 <= 2) {
    GMC_Homography();
  }
  *(double *)(*(void *)(a1 + 8) + 16) = v13.__cosval * v14 * v12 + v13.__sinval * v15;
  if (v10 <= 1) {
    GMC_Homography();
  }
  *(double *)(*(void *)(a1 + 8) + 8 * v11) = v8 * v15;
  *(double *)(*(void *)(a1 + 8) + 8 * v11 + 8) = v13.__sinval * v14 * v15 + v13.__cosval * v12;
  *(double *)(*(void *)(a1 + 8) + 8 * v11 + 16) = v13.__cosval * v14 * v15 - v13.__sinval * v12;
  if (v10 == 2) {
    GMC_Homography();
  }
  unsigned int v16 = 2 * v11;
  *(double *)(*(void *)(a1 + 8) + 8 * v16) = -v14;
  *(double *)(*(void *)(a1 + 8) + 8 * v16 + 8) = v13.__sinval * v8;
  *(double *)(*(void *)(a1 + 8) + 8 * v16 + 16) = v13.__cosval * v8;
  return 0;
}

uint64_t Matrix<double>::AsVector@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  int v6 = 1;
  int v7 = v3;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(unsigned char *)(a2 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  v5[0] = &unk_26FAEAF18;
  v5[1] = 0;
  char v8 = 0;
  *(void *)a2 = &unk_26FAEAF48;
  *(void *)(a2 + 8) = v2;
  return Matrix<double>::~Matrix((uint64_t)v5);
}

void Matrix<double>::ScalarDivRight(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_24692D1C8(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void GeomUtils::ProjectWorldToCam<double>()
{
  v0 = &unk_26FAEAF18;
  operator new[]();
}

void sub_24692D824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  Matrix<double>::~Matrix((uint64_t)&a15);
  Matrix<double>::~Matrix(v35 - 112);
  Matrix<double>::~Matrix((uint64_t)&a19);
  Matrix<double>::~Matrix((uint64_t)&a23);
  Matrix<double>::~Matrix((uint64_t)&a27);
  Matrix<double>::~Matrix((uint64_t)&a31);
  Matrix<double>::~Matrix((uint64_t)&a35);
  Matrix<double>::~Matrix(v35 - 176);
  Matrix<double>::~Matrix(v35 - 144);
  _Unwind_Resume(a1);
}

uint64_t Matrix<double>::DotRepeatSubFromRightInPlace@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = *(unsigned int *)(a1 + 20);
  if (v5 == v4 && v3 == 1)
  {
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (v5)
        {
          unsigned int v14 = 0;
          uint64_t v15 = 0;
          do
          {
            *(double *)(*(void *)(a1 + 8) + 8 * i + 8 * vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 14) = *(double *)(*(void *)(a1 + 8) + 8 * i + 8 * v14)
                                                                 - *(double *)(*(void *)(a2 + 8) + v15);
            v15 += 8;
            v14 += v6;
          }
          while (8 * v5 != v15);
        }
      }
      LODWORD(v3) = v6;
    }
    else
    {
      LODWORD(v3) = 0;
    }
  }
  else
  {
    if (v4 != 1 || v6 != v3) {
      Matrix<double>::DotRepeatSubFromRightInPlace();
    }
    if (v5)
    {
      unsigned int v9 = 0;
      for (uint64_t j = 0; j != v5; ++j)
      {
        if (v3)
        {
          uint64_t v11 = 0;
          do
          {
            uint64_t v12 = *(void *)(a1 + 8) + 8 * v9;
            *(double *)(v12 + v11) = *(double *)(v12 + v11) - *(double *)(*(void *)(a2 + 8) + v11);
            v11 += 8;
          }
          while (8 * v3 != v11);
        }
        v9 += v3;
      }
    }
  }
  *(void *)a3 = &unk_26FAEAF18;
  int v16 = *(_DWORD *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 8);
  v19[0] = &unk_26FAEAF18;
  v19[1] = v17;
  int v20 = v16;
  int v21 = v3;
  char v22 = 0;
  *(void *)(a3 + 8) = v17;
  *(_DWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(unsigned char *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  return Matrix<double>::~Matrix((uint64_t)v19);
}

uint64_t Matrix<double>::DotRepeatProductFromRight@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = Matrix<double>::Matrix(a3, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  int v8 = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  uint64_t v9 = *(unsigned int *)(a1 + 16);
  uint64_t v10 = *(unsigned int *)(a1 + 20);
  if (v9 == v8 && v7 == 1)
  {
    if (v10)
    {
      unint64_t v20 = 0;
      unint64_t v21 = *(unsigned int *)(a3 + 16);
      do
      {
        if (v9)
        {
          unsigned int v22 = 0;
          unsigned int v23 = 0;
          unint64_t v24 = 0;
          unint64_t v25 = *(unsigned int *)(a3 + 20);
          do
          {
            if (v24 >= v21 || v20 >= v25) {
              __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
            }
            *(double *)(*(void *)(a3 + 8) + 8 * v20 + 8 * v23) = *(double *)(*(void *)(a1 + 8)
                                                                               + 8 * v20
                                                                               + 8 * v22)
                                                                   * *(double *)(*(void *)(a2 + 8) + 8 * v24++);
            v23 += v25;
            v22 += v10;
          }
          while (v9 != v24);
        }
        ++v20;
      }
      while (v20 != v10);
    }
  }
  else
  {
    if (v8 != 1 || v10 != v7) {
      __assert_rtn("DotRepeatProductFromRight", "Matrix.hpp", 1468, "0");
    }
    if (v9)
    {
      unsigned int v13 = 0;
      unint64_t v14 = 0;
      unint64_t v15 = *(unsigned int *)(a3 + 16);
      do
      {
        if (v7)
        {
          if (v14 < v15)
          {
            uint64_t v16 = 0;
            uint64_t v17 = *(unsigned int *)(a3 + 20);
            uint64_t v18 = 8 * v17;
            uint64_t v19 = 8 * (v17 * v14);
            while (v18 != v16)
            {
              uint64_t result = *(void *)(a3 + 8) + v19;
              *(double *)(result + v16) = *(double *)(*(void *)(a1 + 8) + 8 * v13 + v16)
                                        * *(double *)(*(void *)(a2 + 8) + v16);
              v16 += 8;
              if (8 * v7 == v16) {
                goto LABEL_17;
              }
            }
          }
          __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
        }
LABEL_17:
        ++v14;
        v13 += v7;
      }
      while (v14 != v9);
    }
  }
  return result;
}

void sub_24692DBDC(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void Matrix<double>::MultAxBToC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 20);
  if (v6 == 1 && v7 == 1)
  {
    Matrix<double>::ScalarProduct(a2, *(const double **)(a1 + 8), (uint64_t)v13);
    Matrix<double>::Resize(a3, v15, v16);
LABEL_15:
    memcpy(*(void **)(a3 + 8), __src, 8 * *(unsigned int *)(a3 + 16) * (unint64_t)*(unsigned int *)(a3 + 20));
    Matrix<double>::~Matrix((uint64_t)v13);
    goto LABEL_16;
  }
  int v10 = *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  if (v9 == 1 && v10 == 1)
  {
    Matrix<double>::ScalarProduct(a1, *(const double **)(a2 + 8), (uint64_t)v13);
    Matrix<double>::Resize(a3, v15, v16);
    goto LABEL_15;
  }
  if (v7 != v10) {
    Matrix<float>::MultAxBToC();
  }
  if (v6 != *(_DWORD *)(a3 + 16) || v9 != *(_DWORD *)(a3 + 20)) {
    Matrix<float>::MultAxBToC();
  }
LABEL_16:
  LODWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = *(_DWORD *)(a1 + 20);
  vDSPMmul<double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 1, *(double **)(a3 + 8), 1, *(_DWORD *)(a1 + 16), *(_DWORD *)(a3 + 20), v12);
}

void sub_24692DCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void Matrix<double>::ScalarProduct(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_24692DD70(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void CRandomGenerator::CRandomGenerator(CRandomGenerator *this, int a2)
{
  *(void *)this = &unk_26FAEC988;
  CRandomGenerator::Init((uint64_t)this, a2);
}

{
  *(void *)this = &unk_26FAEC988;
  CRandomGenerator::Init((uint64_t)this, a2);
}

uint64_t CRandomGenerator::Init(uint64_t this, int a2)
{
  signed int v2 = 48271 * (a2 % 0xADC8u) - 3399 * (a2 / 0xADC8u);
  unsigned int v3 = v2 - (v2 < 1);
  if (a2 <= 3399) {
    unsigned int v3 = 48271 * a2;
  }
  *(unsigned char *)(this + 10H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  for (uint64_t i = 12; i != 1012; i += 4)
  {
    signed int v5 = 48271 * (v3 % 0xADC8) - 3399 * (v3 / 0xADC8);
    unsigned int v6 = v5 - (v5 < 1);
    if ((int)v3 <= 3399) {
      v3 *= 48271;
    }
    else {
      unsigned int v3 = v6;
    }
    *(_DWORD *)(this + i) = v3;
  }
  for (uint64_t j = 12; j != 1012; j += 4)
  {
    signed int v8 = 48271 * (v3 % 0xADC8) - 3399 * (v3 / 0xADC8);
    unsigned int v9 = v8 - (v8 < 1);
    if ((int)v3 <= 3399) {
      v3 *= 48271;
    }
    else {
      unsigned int v3 = v9;
    }
    if (v3 >= 0x40000001) {
      *(_DWORD *)(this + j) |= 0x80000000;
    }
  }
  *(_DWORD *)(this + 8) = v3;
  unsigned int v10 = -1;
  unsigned int v11 = 0x80000000;
  for (uint64_t k = 24; k != 920; k += 28)
  {
    *(_DWORD *)(this + k) = *(_DWORD *)(this + k) & v10 | v11;
    v10 >>= 1;
    v11 >>= 1;
  }
  *(unsigned char *)(this + 10H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 13) = 0;
  return this;
}

void CRandomGenerator::~CRandomGenerator(CRandomGenerator *this)
{
}

uint64_t CRandomGenerator::randlcg(CRandomGenerator *this)
{
  int v1 = *((_DWORD *)this + 2);
  signed int v2 = 48271 * (v1 % 0xADC8u) - 3399 * (v1 / 0xADC8u);
  unsigned int v3 = v2 - (v2 < 1);
  if (v1 <= 3399) {
    uint64_t v4 = (48271 * v1);
  }
  else {
    uint64_t v4 = v3;
  }
  *((_DWORD *)this + 2) = v4;
  return v4;
}

float CRandomGenerator::UniformRand(CRandomGenerator *this)
{
  unsigned int v1 = *((unsigned __int8 *)this + 1012);
  if (v1 <= 0x92) {
    int v2 = 103;
  }
  else {
    int v2 = -147;
  }
  unsigned int v3 = *((_DWORD *)this + v2 + *((unsigned __int8 *)this + 1012) + 3) ^ *((_DWORD *)this
                                                                                      + *((unsigned __int8 *)this + 1012)
                                                                                      + 3);
  *((_DWORD *)this + *((unsigned __int8 *)this + 1012) + 3) = v3;
  if (v1 <= 0xF8) {
    char v4 = v1 + 1;
  }
  else {
    char v4 = 0;
  }
  *((unsigned char *)this + 10H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v4;
  return (float)v3 * 2.3283e-10;
}

float CRandomGenerator::NormalRand(CRandomGenerator *this, float a2)
{
  if (*((unsigned char *)this + 1013))
  {
    char v4 = 0;
    float v5 = *((float *)this + 254);
  }
  else
  {
    int v6 = *((unsigned __int8 *)this + 1012);
    do
    {
      if (v6 <= 0x92u) {
        int v7 = 103;
      }
      else {
        int v7 = -147;
      }
      uint64_t v8 = v6;
      unsigned int v9 = (char *)this + 12;
      unsigned int v10 = *((_DWORD *)this + v7 + v6 + 3) ^ *((_DWORD *)this + v6 + 3);
      if (v6 <= 0xF8u) {
        int v11 = v6 + 1;
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)&v9[4 * v8] = v10;
      uint64_t v12 = v11;
      if (v11 <= 0x92u) {
        int v13 = 103;
      }
      else {
        int v13 = -147;
      }
      float v14 = (float)v10;
      unsigned int v15 = *(_DWORD *)&v9[4 * v13 + 4 * v11] ^ *(_DWORD *)&v9[4 * v11];
      float v16 = v14 * 2.3283e-10;
      if (v11 <= 0xF8u) {
        int v6 = v11 + 1;
      }
      else {
        int v6 = 0;
      }
      float v17 = (float)(v16 * 2.0) + -1.0;
      float v18 = (float)((float)((float)v15 * 2.3283e-10) * 2.0) + -1.0;
      float v19 = (float)(v18 * v18) + (float)(v17 * v17);
      *(_DWORD *)&v9[4 * v12] = v15;
    }
    while (v19 >= 1.0 || v19 == 0.0);
    *((unsigned char *)this + 10H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v6;
    float v20 = sqrtf((float)(logf((float)(v18 * v18) + (float)(v17 * v17)) * -2.0) / v19);
    float v5 = v17 * v20;
    *((float *)this + 254) = v18 * v20;
    char v4 = 1;
  }
  *((unsigned char *)this + 10H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 13) = v4;
  return v5 * a2;
}

void MyIOHIDEventCallback(int a1, uint64_t a2, IOHIDServiceClientRef service)
{
  int valuePtr = 0;
  if (service)
  {
    CFNumberRef v4 = (const __CFNumber *)IOHIDServiceClientCopyProperty(service, @"Placement");
    CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
    if (IOHIDEventGetType() == 12 && valuePtr == 2)
    {
      IOHIDEventGetFloatValue();
      if (a2)
      {
        if (*(unsigned char *)(a2 + 24))
        {
          uint64_t v6 = *(void *)(a2 + 8);
          if (v6)
          {
            uint64_t v7 = *(void *)(v6 + 296);
            if (v7)
            {
              float v8 = v5;
              *(float *)(v7 + 84) = v8;
              *(_DWORD *)(v7 + 104) = 1;
              *(void *)(*(void *)(v6 + 296) + 96) = mach_absolute_time();
              pthread_mutex_lock((pthread_mutex_t *)(v6 + 424));
              pthread_cond_broadcast((pthread_cond_t *)(v6 + 488));
              pthread_mutex_unlock((pthread_mutex_t *)(v6 + 424));
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
    {
      unsigned int v9 = os_log_create("com.apple.isp", "photon");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      MyIOHIDEventCallback(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

H16ISP::H16ISPPhotometerManager *H16ISP::H16ISPPhotometerManager::H16ISPPhotometerManager(H16ISP::H16ISPPhotometerManager *this, int (*a2)(H16ISPFlickerDetectorContext *, void *, photometer_flicker_result *), void *a3, CFArrayRef *a4, H16ISP::H16ISPDevice *a5)
{
  CFDictionaryRef ValueAtIndex = a5;
  uint64_t v6 = a4;
  uint64_t v21 = *MEMORY[0x263EF8340];
  float v18 = a4;
  *(void *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a3;
  *((unsigned char *)this + Matrix<double>::~Matrix((uint64_t)this + 56) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0xBFF0000000000000;
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 2;
  *((void *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = a4;
  *((void *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 13) = a5;
  *((_WORD *)this + 1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
  mach_timebase_info((mach_timebase_info_t)this + 6);
  int v17 = 0;
  if (!v6)
  {
    H16ISP::CreateH16ISPDeviceController((H16ISP *)&v18, 0, 0, v9);
    uint64_t v6 = v18;
  }
  BOOL v10 = 1;
  if (!ValueAtIndex && v6)
  {
    if (CFArrayGetCount(*v6) < 1) {
      goto LABEL_14;
    }
    CFDictionaryRef ValueAtIndex = (H16ISP::H16ISPDevice *)CFArrayGetValueAtIndex(*v18, 0);
    int v11 = H16ISP::H16ISPDevice::H16ISPDeviceOpen(ValueAtIndex, 0, 0);
    uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
    {
      uint64_t v12 = os_log_create("com.apple.isp", "photon");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 67109120;
      int v20 = v11;
      _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_INFO, "H16ISPDeviceOpen returned 0x%08x\n", buf, 8u);
    }
    *((unsigned char *)this + 2Matrix<double>::~Matrix((uint64_t)this + 24) = 1;
    BOOL v10 = v11 == 0;
  }
  if (ValueAtIndex && v10) {
    H16ISP::H16ISPDevice::GetFlickerDetectorHWType((uint64_t)ValueAtIndex, &v17);
  }
LABEL_14:
  uint64_t v13 = dispatch_queue_create("com.apple.video.PhotometerManager.CommandQueue", 0);
  *((void *)this + 2) = v13;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  _WORD v15[2] = ___ZN6H16ISP23H16ISPPhotometerManagerC2EPFiP28H16ISPFlickerDetectorContextPvP25photometer_flicker_resultES3_PNS_22H16ISPDeviceControllerEPNS_12H16ISPDeviceE_block_invoke;
  unsigned __int16 v15[3] = &__block_descriptor_52_e5_v8__0l;
  int v16 = v17;
  _OWORD v15[4] = this;
  v15[5] = a3;
  dispatch_async(v13, v15);
  return this;
}

void ___ZN6H16ISP23H16ISPPhotometerManagerC2EPFiP28H16ISPFlickerDetectorContextPvP25photometer_flicker_resultES3_PNS_22H16ISPDeviceControllerEPNS_12H16ISPDeviceE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = (H16ISPFlickerDetectorContext *)H16ISPFlickerDetectorCreate(*(_DWORD *)(a1 + 48));
  *(void *)(v2 + 8) = v3;
  if (v3)
  {
    CFNumberRef v4 = *(AppleH16PhotonDetectorServicesAssistant **)(*(void *)(a1 + 40) + 592);
    v3->var31 = v4;
    if (v4)
    {
      AppleH16PhotonDetectorServicesAssistant::GetCalibrationData(v4, v3->var32, v3->var33);
      unsigned int v3 = *(H16ISPFlickerDetectorContext **)(v2 + 8);
    }
    H16ISPFlickerDetectorRegisterDataCollectionCallback(v3, (void *)v2, (int (*)(H16ISPFlickerDetectorContext *, void *, photometer_flicker_result *))H16ISPPhotometerManagerDataCollectionCallback);
    bzero((void *)(v2 + 112), 0x68uLL);
    H16ISPFlickerDetectorStartDataCollection(*(H16ISPFlickerDetectorContext **)(v2 + 8));
    if (*(void *)(*(void *)(v2 + 8) + 16))
    {
      if (*(_DWORD *)(a1 + 48) == 9) {
        H16ISP::H16ISPPhotometerManager::InitializeHIDEventSystemClientForALS((H16ISP::H16ISPPhotometerManager *)v2);
      }
      *(_DWORD *)(v2 + Matrix<double>::~Matrix((uint64_t)this + 88) = 1065353216;
      H16ISPFlickerDetectorSetGain(*(H16ISPFlickerDetectorContext **)(v2 + 8), *(float *)(v2 + 88));
      *(unsigned char *)(v2 + Matrix<double>::~Matrix((uint64_t)this + 24) = 1;
    }
    else
    {
      uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
      {
        uint64_t v13 = os_log_create("com.apple.isp", "photon");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v13;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        ___ZN6H16ISP23H16ISPPhotometerManagerC2EPFiP28H16ISPFlickerDetectorContextPvP25photometer_flicker_resultES3_PNS_22H16ISPDeviceControllerEPNS_12H16ISPDeviceE_block_invoke_cold_2(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }
  else
  {
    double v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
    {
      double v5 = os_log_create("com.apple.isp", "photon");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      ___ZN6H16ISP23H16ISPPhotometerManagerC2EPFiP28H16ISPFlickerDetectorContextPvP25photometer_flicker_resultES3_PNS_22H16ISPDeviceControllerEPNS_12H16ISPDeviceE_block_invoke_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
}

uint64_t H16ISPPhotometerManagerDataCollectionCallback(H16ISPFlickerDetectorContext *a1, void *a2, photometer_flicker_result *a3)
{
  if (a2)
  {
    unsigned int v3 = a2[2];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZN6H16ISP23H16ISPPhotometerManager26PhotometerAnalysisCallbackEP28H16ISPFlickerDetectorContextP25photometer_flicker_result_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a2;
    void block[5] = a3;
    void block[6] = a1;
    dispatch_async(v3, block);
  }
  else
  {
    free(a3);
  }
  return 0;
}

void H16ISP::H16ISPPhotometerManager::InitializeHIDEventSystemClientForALS(H16ISP::H16ISPPhotometerManager *this)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v3 = IOHIDEventSystemClientCreateWithType();
  *(void *)this = v3;
  if (v3)
  {
    int v69 = 4;
    int valuePtr = 65280;
    CFNumberRef v4 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
    CFNumberRef v5 = CFNumberCreate(v2, kCFNumberSInt32Type, &v69);
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
      {
        uint64_t v7 = os_log_create("com.apple.isp", "photon");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v7;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPPhotometerManager::InitializeHIDEventSystemClientForALS(v7, v8, v9, v10, v11, v12, v13, v14);
      }
    }
    else
    {
      CFNumberRef v23 = v5;
      *(_OWORD *)keys = xmmword_2651E9678;
      values[0] = v4;
      values[1] = v5;
      CFDictionaryRef v24 = CFDictionaryCreate(v2, (const void **)keys, (const void **)values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v24)
      {
        CFDictionaryRef v25 = v24;
        int v67 = 65;
        int v68 = 32;
        int v66 = 2;
        CFNumberRef v26 = CFNumberCreate(v2, kCFNumberSInt32Type, &v68);
        CFNumberRef v27 = CFNumberCreate(v2, kCFNumberSInt32Type, &v67);
        CFNumberRef v28 = CFNumberCreate(v2, kCFNumberSInt32Type, &v66);
        if (v26 && v27 && (CFNumberRef v29 = v28) != 0)
        {
          *(_OWORD *)double v72 = xmmword_2651E9688;
          double v73 = @"Placement";
          v71[0] = v26;
          v71[1] = v27;
          v71[2] = v28;
          CFDictionaryRef v30 = CFDictionaryCreate(v2, (const void **)v72, (const void **)v71, 3, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (v30)
          {
            CFDictionaryRef v31 = v30;
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v2, 2, MEMORY[0x263EFFF70]);
            if (Mutable)
            {
              unsigned int v33 = Mutable;
              CFArrayAppendValue(Mutable, v31);
              CFArrayAppendValue(v33, v25);
              IOHIDEventSystemClientSetMatchingMultiple();
              IOHIDEventSystemClientRegisterEventCallback();
              IOHIDEventSystemClientSetCancelHandler();
              IOHIDEventSystemClientSetDispatchQueue();
              IOHIDEventSystemClientActivate();
              CFRelease(v25);
              CFRelease(v31);
              CFRelease(v4);
              CFRelease(v26);
              CFRelease(v23);
              CFRelease(v27);
              CFRelease(v29);
              CFRelease(v33);
            }
            else
            {
              double v58 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
              {
                double v58 = os_log_create("com.apple.isp", "photon");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v58;
              }
              if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPPhotometerManager::InitializeHIDEventSystemClientForALS(v58, v59, v60, v61, v62, v63, v64, v65);
              }
            }
          }
          else
          {
            double v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
            {
              double v50 = os_log_create("com.apple.isp", "photon");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v50;
            }
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
              H16ISP::H16ISPPhotometerManager::InitializeHIDEventSystemClientForALS(v50, v51, v52, v53, v54, v55, v56, v57);
            }
          }
        }
        else
        {
          unsigned int v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
          {
            unsigned int v42 = os_log_create("com.apple.isp", "photon");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v42;
          }
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPPhotometerManager::InitializeHIDEventSystemClientForALS(v42, v43, v44, v45, v46, v47, v48, v49);
          }
        }
      }
      else
      {
        double v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
        {
          double v34 = os_log_create("com.apple.isp", "photon");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v34;
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPPhotometerManager::InitializeHIDEventSystemClientForALS(v34, v35, v36, v37, v38, v39, v40, v41);
        }
      }
    }
  }
  else
  {
    uint64_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
    {
      uint64_t v15 = os_log_create("com.apple.isp", "photon");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPPhotometerManager::InitializeHIDEventSystemClientForALS(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void H16ISP::H16ISPPhotometerManager::~H16ISPPhotometerManager(H16ISP::H16ISPPhotometerManager *this)
{
  CFAllocatorRef v2 = *((void *)this + 2);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN6H16ISP23H16ISPPhotometerManagerD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
  dispatch_sync(*((dispatch_queue_t *)this + 2), &__block_literal_global_8);
  dispatch_release(*((dispatch_object_t *)this + 2));
  *((void *)this + 2) = 0;
  if (*((unsigned char *)this + 224))
  {
    CFNumberRef v4 = (H16ISP::H16ISPDevice *)*((void *)this + 13);
    if (v4)
    {
      H16ISP::H16ISPDevice::H16ISPDeviceClose(v4);
      *((void *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 13) = 0;
    }
    CFNumberRef v5 = (H16ISP *)*((void *)this + 12);
    if (v5) {
      H16ISP::DestroyH16ISPDeviceController(v5, v3);
    }
  }
}

H16ISPFlickerDetectorContext *___ZN6H16ISP23H16ISPPhotometerManagerD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  H16ISPFlickerDetectorRegisterDataCollectionCallback(*(H16ISPFlickerDetectorContext **)(v1 + 8), 0, 0);
  *(void *)(v1 + 32) = 0;
  bzero((void *)(v1 + 112), 0x68uLL);
  *(_DWORD *)(v1 + Matrix<double>::~Matrix((uint64_t)this + 88) = 1065353216;
  if (*(void *)v1) {
    IOHIDEventSystemClientCancel();
  }
  uint64_t result = *(H16ISPFlickerDetectorContext **)(v1 + 8);
  if (result)
  {
    H16ISPFlickerDetectorStopDataCollection(result);
    uint64_t result = (H16ISPFlickerDetectorContext *)H16ISPFlickerDetectorDispose(*(H16ISPFlickerDetectorContext **)(v1 + 8));
    *(void *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t H16ISP::H16ISPPhotometerManager::PhotometerAnalysisCallback(H16ISP::H16ISPPhotometerManager *this, H16ISPFlickerDetectorContext *a2, photometer_flicker_result *a3)
{
  uint64_t v3 = *((void *)this + 2);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN6H16ISP23H16ISPPhotometerManager26PhotometerAnalysisCallbackEP28H16ISPFlickerDetectorContextP25photometer_flicker_result_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = this;
  void block[5] = a3;
  void block[6] = a2;
  dispatch_async(v3, block);
  return 0;
}

void ___ZN6H16ISP23H16ISPPhotometerManager26PhotometerAnalysisCallbackEP28H16ISPFlickerDetectorContextP25photometer_flicker_result_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 24)) {
    goto LABEL_36;
  }
  uint64_t v3 = *(int ***)(a1 + 48);
  if (v3 && *v3)
  {
    int v4 = **v3;
    if (v4 == 10 || v4 == 6)
    {
      unsigned int v6 = *(_DWORD *)(v2 + 208);
      uint64_t v7 = v3[37];
      uint64_t v8 = (void *)(v2 + 112 + 24 * v6);
      *uint64_t v8 = *(void *)(v7 + 21);
      v8[1] = *((void *)v7 + 12);
      char v9 = *(unsigned char *)(v2 + 56);
      if (v9) {
        char v10 = 1;
      }
      else {
        char v10 = *(unsigned char *)(v2 + 225);
      }
      *(unsigned char *)(v2 + 112 + 24 * v6 + 16) = v10 | (4 * *((unsigned char *)v7 + 112));
      *(unsigned char *)(v2 + 2H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v9;
      int v11 = ((_BYTE)v6 + 1) & 3;
      if (v11) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = *(unsigned char *)(v2 + 212) == 0;
      }
      if (v12) {
        *(unsigned char *)(v2 + 2H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 1;
      }
      *(_DWORD *)(v2 + 208) = v11;
    }
  }
  uint64_t v13 = mach_absolute_time();
  if (*(unsigned char *)(v2 + 56) {
    || (HIDWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 15) = 1041313291,
  }
        LODWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 15) = *(_DWORD *)(v2 + 48),
        LODWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 14) = *(_DWORD *)(v2 + 52),
        (double)(v13 - *(void *)(v2 + 64)) * 0.000000001 * (double)v15 / (double)v14 < 1.5))
  {
LABEL_36:
    CFDictionaryRef v25 = *(void **)(a1 + 40);
    if (v25)
    {
      free(v25);
    }
  }
  else
  {
    if (*(float *)(v2 + 88) != 1.0)
    {
      *(_DWORD *)(v2 + Matrix<double>::~Matrix((uint64_t)this + 88) = 1065353216;
      H16ISPFlickerDetectorSetGain(*(H16ISPFlickerDetectorContext **)(v2 + 8), *(float *)(v2 + 88));
    }
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
      uint64_t v17 = *(void *)(a1 + 48);
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 296);
        if (v18)
        {
          *(_DWORD *)(v16 + 84) = *(_DWORD *)(v18 + 84);
          *(_DWORD *)(v16 + 104) = *(_DWORD *)(v18 + 104);
          uint64_t v19 = *(void (**)(void, void))(v2 + 32);
          if (v19) {
            v19(0, *(void *)(v2 + 40));
          }
          uint64_t v20 = *(H16ISP::H16ISPDevice **)(v2 + 104);
          if (v20)
          {
            if (H16ISP::H16ISPDevice::ISP_IsPowered(v20))
            {
              uint64_t v21 = *(void *)(v2 + 104);
              memcpy(v26, *(const void **)(a1 + 40), sizeof(v26));
              if (!H16ISP::H16ISPDevice::SetFlickerFrequency(v21, (uint64_t)v26))
              {
                uint64_t v22 = *(void *)(a1 + 40);
                *(void *)(v2 + 72) = *(void *)(v22 + 8);
                *(_DWORD *)(v2 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v22 + 4);
                CFNumberRef v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
                {
                  CFNumberRef v23 = os_log_create("com.apple.isp", "photon");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v23;
                }
                if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
                  uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8);
                  *(_DWORD *)int buf = 134218240;
                  uint64_t v28 = v24;
                  __int16 v29 = 1024;
                  int v30 = 0;
                  _os_log_impl(&dword_24680F000, v23, OS_LOG_TYPE_INFO, "SetFlickerFrequency: %6.2f Hz, deviceStatus 0x%08x \n", buf, 0x12u);
                }
              }
            }
          }
        }
      }
    }
    free(*(void **)(a1 + 40));
  }
}

uint64_t H16ISP::H16ISPPhotometerManager::PhotometerCommand(uint64_t a1, int a2)
{
  uint64_t v2 = 3758097097;
  switch(a2)
  {
    case 0:
      uint64_t v3 = *(NSObject **)(a1 + 16);
      v13[0] = MEMORY[0x263EF8330];
      v13[1] = 3221225472;
      _DWORD v13[2] = ___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke;
      v13[3] = &__block_descriptor_40_e5_v8__0l;
      unsigned __int8 v13[4] = a1;
      int v4 = v13;
      goto LABEL_7;
    case 1:
      uint64_t v3 = *(NSObject **)(a1 + 16);
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 3221225472;
      xpc_object_t v12[2] = ___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_2;
      v12[3] = &__block_descriptor_40_e5_v8__0l;
      void v12[4] = a1;
      int v4 = v12;
      goto LABEL_7;
    case 2:
      uint64_t v3 = *(NSObject **)(a1 + 16);
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 3221225472;
      _DWORD v11[2] = ___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_3;
      long double v11[3] = &__block_descriptor_40_e5_v8__0l;
      unsigned __int8 v11[4] = a1;
      int v4 = v11;
      goto LABEL_7;
    case 3:
      uint64_t v3 = *(NSObject **)(a1 + 16);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = ___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_4;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      int v4 = block;
LABEL_7:
      dispatch_async(v3, v4);
      return 0;
    case 4:
      CFNumberRef v5 = *(NSObject **)(a1 + 16);
      v9[0] = MEMORY[0x263EF8330];
      v9[1] = 3221225472;
      _DWORD v9[2] = ___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_5;
      _OWORD v9[3] = &__block_descriptor_40_e5_v8__0l;
      _OWORD v9[4] = a1;
      unsigned int v6 = v9;
      goto LABEL_10;
    case 5:
      CFNumberRef v5 = *(NSObject **)(a1 + 16);
      v8[0] = MEMORY[0x263EF8330];
      v8[1] = 3221225472;
      v8[2] = ___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_6;
      void v8[3] = &__block_descriptor_40_e5_v8__0l;
      _OWORD v8[4] = a1;
      unsigned int v6 = v8;
LABEL_10:
      dispatch_async(v5, v6);
      break;
    default:
      uint64_t v2 = 3758097090;
      break;
  }
  return v2;
}

uint64_t ___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + Matrix<double>::~Matrix((uint64_t)this + 56) = 1;
  *(void *)(v1 + 64) = mach_absolute_time();
  *(unsigned char *)(v1 + 2H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = 1;
  uint64_t v2 = *(H16ISP::H16ISPDevice **)(v1 + 104);
  if (v2) {
    H16ISP::H16ISPDevice::ISP_SetStrobeState(v2, 1uLL);
  }
  uint64_t v3 = *(H16ISPFlickerDetectorContext **)(v1 + 8);
  float v4 = *(float *)(v1 + 88);

  return H16ISPFlickerDetectorSetGain(v3, v4);
}

H16ISP::H16ISPDevice *___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_2(H16ISP::H16ISPDevice *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(unsigned char *)(v1 + 56))
  {
    *(unsigned char *)(v1 + Matrix<double>::~Matrix((uint64_t)this + 56) = 0;
    *(void *)(v1 + 64) = mach_absolute_time();
    uint64_t result = *(H16ISP::H16ISPDevice **)(v1 + 104);
    if (result)
    {
      return (H16ISP::H16ISPDevice *)H16ISP::H16ISPDevice::ISP_SetStrobeState(result, 0);
    }
  }
  return result;
}

uint64_t ___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_3(uint64_t a1)
{
  return H16ISPFlickerDetectorSetIRStreamingState(*(H16ISPFlickerDetectorContext **)(*(void *)(a1 + 32) + 8), 1);
}

uint64_t ___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_4(uint64_t a1)
{
  return H16ISPFlickerDetectorSetIRStreamingState(*(H16ISPFlickerDetectorContext **)(*(void *)(a1 + 32) + 8), 0);
}

H16ISP::H16ISPDevice *___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_5(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  H16ISPFlickerDetectorSetJasperState(*(H16ISPFlickerDetectorContext **)(v1 + 8), 1);
  uint64_t result = *(H16ISP::H16ISPDevice **)(v1 + 104);
  if (result)
  {
    return (H16ISP::H16ISPDevice *)H16ISP::H16ISPDevice::ISP_SetLidarState(result, 1uLL);
  }
  return result;
}

H16ISP::H16ISPDevice *___ZN6H16ISP23H16ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_6(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  H16ISPFlickerDetectorSetJasperState(*(H16ISPFlickerDetectorContext **)(v1 + 8), 0);
  uint64_t result = *(H16ISP::H16ISPDevice **)(v1 + 104);
  if (result)
  {
    return (H16ISP::H16ISPDevice *)H16ISP::H16ISPDevice::ISP_SetLidarState(result, 0);
  }
  return result;
}

uint64_t H16ISP::H16ISPPhotometerManager::SetLux(H16ISP::H16ISPPhotometerManager *this, int a2)
{
  *((_DWORD *)this + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 21) = a2;
  return 0;
}

uint64_t H16ISP::H16ISPPhotometerManager::SetIRSignalRateHint(H16ISP::H16ISPPhotometerManager *this, float a2)
{
  uint64_t v2 = *((void *)this + 2);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = ___ZN6H16ISP23H16ISPPhotometerManager19SetIRSignalRateHintEf_block_invoke;
  v4[3] = &__block_descriptor_44_e5_v8__0l;
  v4[4] = this;
  float v5 = a2;
  dispatch_async(v2, v4);
  return 0;
}

float ___ZN6H16ISP23H16ISPPhotometerManager19SetIRSignalRateHintEf_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v1)
  {
    float result = *(float *)(a1 + 40);
    *(float *)(v1 + 408) = result;
  }
  return result;
}

uint64_t H16ISP::H16ISPPhotometerManager::GetLuxInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  v12[0] = &v11;
  v12[1] = 0x2020000000;
  int v13 = 0;
  float v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
  uint64_t v5 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
  {
    float v4 = os_log_create("com.apple.isp", "photon");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPPhotometerManager::GetLuxInfo();
  }
  unsigned int v6 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN6H16ISP23H16ISPPhotometerManager10GetLuxInfoEP7luxInfo_block_invoke;
  block[3] = &unk_2651E9638;
  block[4] = &v11;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync(v6, block);
  uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == v5)
  {
    uint64_t v7 = os_log_create("com.apple.isp", "photon");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPPhotometerManager::GetLuxInfo((uint64_t)v12, v7);
  }
  uint64_t v8 = *(unsigned int *)(v12[0] + 24);
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t ___ZN6H16ISP23H16ISPPhotometerManager10GetLuxInfoEP7luxInfo_block_invoke(uint64_t result)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(result + 40);
  if (*(void *)(v1 + 8))
  {
    uint64_t v2 = result;
    bzero(&v14, 0x10uLL);
    v14.tv_nseCC_SHA256_CTX c = 175000000;
    uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
    uint64_t v4 = &_os_log_internal;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
    {
      uint64_t v3 = os_log_create("com.apple.isp", "photon");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v3;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___ZN6H16ISP23H16ISPPhotometerManager10GetLuxInfoEP7luxInfo_block_invoke_cold_1();
    }
    pthread_mutex_lock((pthread_mutex_t *)(*(void *)(v1 + 8) + 424));
    *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + Matrix<double>::~Matrix((uint64_t)this + 24) = pthread_cond_timedwait_relative_np((pthread_cond_t *)(*(void *)(v1 + 8) + 488), (pthread_mutex_t *)(*(void *)(v1 + 8) + 424), &v14);
    uint64_t v5 = *(void *)(v2 + 32);
    if (*(_DWORD *)(*(void *)(v5 + 8) + 24))
    {
      unsigned int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == v4)
      {
        unsigned int v6 = os_log_create("com.apple.isp", "photon");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v6;
        uint64_t v5 = *(void *)(v2 + 32);
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v13 = *(_DWORD *)(*(void *)(v5 + 8) + 24);
        *(_DWORD *)int buf = 136315394;
        uint64_t v16 = "GetLuxInfo_block_invoke";
        __int16 v17 = 1024;
        int v18 = v13;
        _os_log_error_impl(&dword_24680F000, v6, OS_LOG_TYPE_ERROR, "%s - timed wait on a condition returned %d\n", buf, 0x12u);
        uint64_t v5 = *(void *)(v2 + 32);
      }
      *(_DWORD *)(*(void *)(v5 + 8) + Matrix<double>::~Matrix((uint64_t)this + 24) = -536870186;
      uint64_t v7 = *(void *)(v1 + 8);
    }
    else
    {
      uint64_t v7 = *(void *)(v1 + 8);
      if (v7 && (uint64_t v8 = *(void *)(v7 + 296)) != 0)
      {
        uint64_t v9 = *(void *)(v2 + 48);
        *(void *)(v9 + 8) = *(void *)(v8 + 96);
        *(void *)uint64_t v9 = *(void *)(v8 + 84);
        char v10 = *(unsigned char *)(v1 + 56);
        if (v10) {
          char v11 = 1;
        }
        else {
          char v11 = *(unsigned char *)(v1 + 225);
        }
        *(unsigned char *)(v9 + 16) = v11 | (2 * *(unsigned char *)(*(void *)(v7 + 416) + 1)) | (4 * *(unsigned char *)(v8 + 112));
        *(unsigned char *)(v1 + 2H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v10;
      }
      else
      {
        uint64_t v12 = *(void *)(v2 + 48);
        *(void *)uint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        *(unsigned char *)(v12 + 16) = 0;
        *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + Matrix<double>::~Matrix((uint64_t)this + 24) = -536870212;
      }
    }
    return pthread_mutex_unlock((pthread_mutex_t *)(v7 + 424));
  }
  return result;
}

uint64_t H16ISP::H16ISPPhotometerManager::GetCorrectionFactor(H16ISP::H16ISPPhotometerManager *this, double *a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = -536870212;
  uint64_t v2 = *((void *)this + 2);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN6H16ISP23H16ISPPhotometerManager19GetCorrectionFactorEPd_block_invoke;
  block[3] = &unk_2651E9638;
  void block[5] = this;
  void block[6] = a2;
  block[4] = &v6;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

double ___ZN6H16ISP23H16ISPPhotometerManager19GetCorrectionFactorEPd_block_invoke(uint64_t a1, double a2)
{
  LOWORD(a2) = *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 564);
  double result = (double)*(unint64_t *)&a2 * 0.0000305175781;
  **(double **)(a1 + 48) = result;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  return result;
}

uint64_t H16ISP::H16ISPPhotometerManager::GetLuxCache(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = ___ZNK6H16ISP23H16ISPPhotometerManager11GetLuxCacheEP8luxCache_block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = a1;
  void v4[5] = a2;
  dispatch_sync(v2, v4);
  return 0;
}

void *___ZNK6H16ISP23H16ISPPhotometerManager11GetLuxCacheEP8luxCache_block_invoke(uint64_t a1)
{
  return memmove(*(void **)(a1 + 40), (const void *)(*(void *)(a1 + 32) + 112), 0x68uLL);
}

void ___ZN6H16ISP23H16ISPPhotometerManager36InitializeHIDEventSystemClientForALSEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(CFTypeRef **)(a1 + 32);
  IOHIDEventSystemClientUnregisterEventCallback();
  IOHIDEventSystemClientCancel();
  CFRelease(*v1);
  *uint64_t v1 = 0;
}

void H16ISP::LoadSavageDATFile(H16ISP *this, H16ISP::H16ISPDevice *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unsigned int v30 = 255;
  mach_port_t v3 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v4 = IOServiceNameMatching("AppleH16CamIn");
  io_service_t MatchingService = IOServiceGetMatchingService(v3, v4);
  uint64_t v29 = 0;
  uint64_t v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x263F53618], "sharedDataAccessor"), "copyPathForPersonalizedData:error:", 0, &v29);
  uint64_t v7 = (void *)v6;
  if (this)
  {
    if (!v6)
    {
      NSLog(&cfstr_PersonalizedFi.isa);
      return;
    }
    if (H16ISP::H16ISPDevice::isSavageSensorSupported(this, &v30))
    {
      uint64_t v8 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:@"/private/var/tmp/usr/standalone/firmware/Savage/SavagePatch.DAT"];
      if (v8)
      {
        uint64_t v24 = (void *)v8;
        NSLog(&cfstr_FoundSavageOve.isa, @"/private/var/tmp/usr/standalone/firmware/Savage/SavagePatch.DAT");
        uint64_t v12 = 0;
        CFTypeRef v10 = 0;
        uint64_t v25 = 3722248192;
      }
      else
      {
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFTypeRef v10 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"SavageDeviceRev", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
        CFTypeRef v11 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"SavageMNS", v9, 0);
        uint64_t v12 = v11;
        if (v10) {
          BOOL v13 = v11 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          NSLog(&cfstr_IrSensorNotDet.isa);
          CFNumberRef v27 = 0;
          uint64_t v26 = 0;
          uint64_t v25 = 3149594624;
          goto LABEL_22;
        }
        CFTypeID v14 = CFGetTypeID(v10);
        if (v14 != CFDataGetTypeID() || (CFTypeID v15 = CFGetTypeID(v12), v15 != CFDataGetTypeID()))
        {
          CFNumberRef v27 = 0;
          goto LABEL_24;
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)v10);
        __int16 v17 = "B3";
        if (BytePtr && (*BytePtr & 0xF0) == 0xA0) {
          __int16 v17 = "BA";
        }
        int v18 = CFDataGetBytePtr((CFDataRef)v12);
        uint64_t v19 = "Dev";
        if (v18 && *v18 == 10) {
          uint64_t v19 = "Prod";
        }
        snprintf(__str, 0x400uLL, "Savage/SavagePatch%s%s.DAT", v17, v19);
        uint64_t v20 = objc_msgSend(v7, "stringByAppendingPathComponent:", objc_msgSend(NSString, "stringWithUTF8String:", __str));
        NSLog(&cfstr_DatFileForUnpr.isa, v20);
        uint64_t v21 = [v7 stringByAppendingPathComponent:@"/Savage/SavagePatch.DAT"];
        NSLog(&cfstr_DatFileForProv.isa, v21);
        uint64_t v22 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v20];
        if (v22)
        {
          uint64_t v24 = (void *)v22;
          uint64_t v25 = 2863267840;
          NSLog(&cfstr_LoadingDatFile.isa);
        }
        else
        {
          uint64_t v23 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v21];
          if (!v23)
          {
            NSLog(&cfstr_NoDatFileForSa.isa);
            CFNumberRef v27 = 0;
            uint64_t v26 = 0;
            uint64_t v25 = 3435921408;
            goto LABEL_22;
          }
          uint64_t v24 = (void *)v23;
          uint64_t v25 = 2863267840;
        }
      }
      uint64_t v26 = [v24 length];
      CFNumberRef v27 = (unsigned __int8 *)malloc_type_calloc(v26, 1uLL, 0xD78BBC9FuLL);
      if (!v27) {
        goto LABEL_23;
      }
      [v24 getBytes:v27 length:v26];
    }
    else
    {
      CFNumberRef v27 = 0;
      uint64_t v26 = 0;
      uint64_t v12 = 0;
      CFTypeRef v10 = 0;
      uint64_t v25 = 4008574976;
    }
LABEL_22:
    uint64_t DataFile = H16ISP::H16ISPDevice::ISP_LoadDataFile(this, v30 | 0x80000000, v27, v26, v25 | 5);
    NSLog(&cfstr_LoadSavageDatF.isa, v26, DataFile, v25);
LABEL_23:
    if (!v12)
    {
LABEL_25:
      if (v10) {
        CFRelease(v10);
      }
      CFRelease(v7);
      if (v27) {
        free(v27);
      }
      return;
    }
LABEL_24:
    CFRelease(v12);
    goto LABEL_25;
  }
  NSLog(&cfstr_PdeviceIsNull.isa);
  if (v7) {
    CFRelease(v7);
  }
}

void H16ISP::LoadYonkersDATFile(H16ISP *this, H16ISP::H16ISPDevice *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unsigned int v34 = 255;
  mach_port_t v3 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v4 = IOServiceNameMatching("AppleH16CamIn");
  io_service_t MatchingService = IOServiceGetMatchingService(v3, v4);
  uint64_t v33 = 0;
  uint64_t v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x263F53618], "sharedDataAccessor"), "copyPathForPersonalizedData:error:", 0, &v33);
  uint64_t v7 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:@"/private/var/tmp/usr/standalone/firmware/Yonkers/YonkersPatch.DAT"];
  if (!this)
  {
    NSLog(&cfstr_PdeviceIsNull.isa);
    if (!v6) {
      return;
    }
LABEL_40:
    CFRelease(v6);
    return;
  }
  if (!v6)
  {
    NSLog(&cfstr_PersonalizedFi.isa);
    return;
  }
  uint64_t v8 = (void *)v7;
  if (!H16ISP::H16ISPDevice::isYonkersSensorSupported(this, &v34)) {
    goto LABEL_40;
  }
  if (v8)
  {
    NSLog(&cfstr_FoundYonkersOv.isa, @"/private/var/tmp/usr/standalone/firmware/Yonkers/YonkersPatch.DAT");
    CFDataRef v12 = 0;
    CFTypeRef v10 = 0;
    uint64_t v24 = 3722248192;
  }
  else
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFTypeRef v10 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"YonkersFabRevision", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    CFDataRef v11 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"YonkersMNS", v9, 0);
    CFDataRef v12 = v11;
    if (v11) {
      BOOL v13 = v10 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      NSLog(&cfstr_SecureRgbSenso.isa);
      uint64_t v31 = 0;
      uint64_t v30 = 0;
      uint64_t v24 = 3149594624;
      goto LABEL_30;
    }
    CFTypeID v14 = CFGetTypeID(v11);
    if (v14 != CFDataGetTypeID() || (CFTypeID v15 = CFGetTypeID(v10), v15 != CFDataGetTypeID()))
    {
      uint64_t v31 = 0;
      goto LABEL_32;
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)v10);
    if (!BytePtr
      || ((int v17 = __rev16(*(unsigned __int16 *)BytePtr), v18 = 1, v17 > 59904)
        ? (BOOL v19 = v17 == 59905, v20 = 61953)
        : (BOOL v19 = v17 == 54529, v20 = 56577),
          !v19 ? (BOOL v21 = v17 == v20) : (BOOL v21 = 1),
          !v21))
    {
      int v18 = 0;
    }
    uint64_t v22 = CFDataGetBytePtr(v12);
    uint64_t v23 = "Dev";
    if (v22 && *v22 == 8) {
      uint64_t v23 = "Prod";
    }
    uint64_t v24 = 2863267840;
    uint64_t v25 = "Ymgt";
    if (!v18) {
      uint64_t v25 = "Ngsk";
    }
    snprintf(__str, 0x400uLL, "Yonkers/YonkersPatch%s%s.DAT", v25, v23);
    uint64_t v26 = objc_msgSend(v6, "stringByAppendingPathComponent:", objc_msgSend(NSString, "stringWithUTF8String:", __str));
    NSLog(&cfstr_DatFileForUnpr_0.isa, v26);
    uint64_t v27 = [v6 stringByAppendingPathComponent:@"/Yonkers/YonkersPatch.DAT"];
    NSLog(&cfstr_DatFileForProv_0.isa, v27);
    uint64_t v28 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v26];
    if (v28)
    {
      uint64_t v8 = (void *)v28;
      NSLog(&cfstr_LoadingDatFile_0.isa);
    }
    else
    {
      uint64_t v29 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v27];
      if (!v29)
      {
        NSLog(&cfstr_NoDatFileForYo.isa);
        uint64_t v31 = 0;
        uint64_t v30 = 0;
        uint64_t v24 = 3435921408;
        goto LABEL_30;
      }
      uint64_t v8 = (void *)v29;
    }
  }
  uint64_t v30 = [v8 length];
  uint64_t v31 = (unsigned __int8 *)malloc_type_calloc(v30, 1uLL, 0x4664D063uLL);
  if (!v31) {
    goto LABEL_31;
  }
  [v8 getBytes:v31 length:v30];
LABEL_30:
  uint64_t DataFile = H16ISP::H16ISPDevice::ISP_LoadDataFile(this, v34 | 0x80000000, v31, v30, v24 | 5);
  NSLog(&cfstr_LoadYonkersDat.isa, v30, DataFile, v24);
LABEL_31:
  if (v12) {
LABEL_32:
  }
    CFRelease(v12);
  if (v10) {
    CFRelease(v10);
  }
  CFRelease(v6);
  if (v31) {
    free(v31);
  }
}

void H16ISP::LoadFrontIRHPRFile(H16ISP *this, H16ISP::H16ISPDevice *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unsigned int v30 = 255;
  if (!this) {
    return;
  }
  BOOL isSavageSensorSupported = H16ISP::H16ISPDevice::isSavageSensorSupported(this, &v30);
  uint64_t v4 = &_os_log_internal;
  if (!isSavageSensorSupported) {
    goto LABEL_42;
  }
  mach_port_t v5 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v6 = IOServiceNameMatching("AppleH16CamIn");
  io_service_t MatchingService = IOServiceGetMatchingService(v5, v6);
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFTypeRef v9 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"LoadHPR", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFTypeRef v10 = v9;
  if (v9)
  {
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 == CFBooleanGetTypeID() && !CFBooleanGetValue((CFBooleanRef)v10))
    {
      CFRelease(v10);
      uint64_t v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v4)
      {
        uint64_t v29 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v29;
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        H16ISP::LoadFrontIRHPRFile(v29);
      }
LABEL_42:
      CFStringRef v20 = 0;
      goto LABEL_43;
    }
  }
  CFTypeRef v12 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"SavageChipID", v8, 3u);
  if (v12)
  {
    BOOL v13 = v12;
    uint64_t v14 = AMFDRCreateInstanceString();
    if (v14)
    {
      CFTypeID v15 = (const void *)v14;
      CFTypeRef v16 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"SavageUID", v8, 3u);
      if (v16)
      {
        int v17 = v16;
        uint64_t v18 = AMFDRCreateInstanceString();
        if (v18)
        {
          BOOL v19 = (const void *)v18;
          CFStringRef v20 = CFStringCreateWithFormat(v8, 0, @"%@-%@", v15, v18);
          CFRelease(v17);
          CFRelease(v19);
          goto LABEL_11;
        }
        NSLog(&cfstr_CouldnTCreateS_0.isa);
        CFRelease(v17);
      }
      else
      {
        NSLog(&cfstr_CouldnTReadSav_0.isa);
      }
      CFStringRef v20 = 0;
LABEL_11:
      CFRelease(v13);
      CFRelease(v15);
      if (!v10) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    NSLog(&cfstr_CouldnTCreateS.isa);
    CFRelease(v13);
  }
  else
  {
    NSLog(&cfstr_CouldnTReadSav.isa);
  }
  CFStringRef v20 = 0;
  if (v10) {
LABEL_12:
  }
    CFRelease(v10);
LABEL_13:
  if (!v20)
  {
    NSLog(&cfstr_CouldnTCombine.isa);
LABEL_43:
    CFDataRef v22 = 0;
    goto LABEL_44;
  }
  uint64_t v21 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:@"/usr/local/share/firmware/isp/Savage/FrontIRHPR.DER"];
  if (v21)
  {
    CFDataRef v22 = (const __CFData *)v21;
    NSLog(&cfstr_FoundFrontirOv.isa, v30);
    goto LABEL_16;
  }
  CFDataRef v22 = (const __CFData *)AMFDRSealingMapCopyLocalMinimalManifestForInstance();
  if (v22)
  {
LABEL_16:
    BytePtr = CFDataGetBytePtr(v22);
    unsigned int Length = CFDataGetLength(v22);
    int DataFile = H16ISP::H16ISPDevice::ISP_LoadDataFile(this, v30 | 0x80000000, BytePtr, Length, 0x501u);
    CFStringRef v26 = CFCopyDescription(v22);
    uint64_t v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v4)
    {
      uint64_t v27 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v27;
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      CStringPtr = CFStringGetCStringPtr(v26, 0);
      *(_DWORD *)int buf = 136315650;
      uint64_t v32 = "LoadFrontIRHPRFile";
      __int16 v33 = 1024;
      int v34 = DataFile;
      __int16 v35 = 2080;
      uint64_t v36 = CStringPtr;
      _os_log_impl(&dword_24680F000, v27, OS_LOG_TYPE_DEFAULT, "%s - Status = %08x; HPR - %s\n", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  NSLog(&cfstr_NoHprFileForFr.isa);
LABEL_44:
  CFStringRef v26 = 0;
LABEL_20:
  if (v20) {
    CFRelease(v20);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v26) {
    CFRelease(v26);
  }
}

void analyze_flicker_Hawking(DSPComplex *a1, int a2, float a3, float *a4, float *a5, float *a6, OpaqueFFTSetup **a7)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  int v13 = (1 << a2) / 2;
  int v14 = v13 + 1;
  vDSP_Length v15 = (uint64_t)((1 << a2) + (1 << a2 < 0)) >> 1;
  __Z.realp = a6;
  __Z.imagp = &a6[v13 + 1];
  vDSP_ctoz(a1, 2, &__Z, 1, v15);
  vDSP_fft_zrip(*a7, &__Z, 1, a2, 1);
  imagp = __Z.imagp;
  __Z.realp[v13] = *__Z.imagp;
  imagp[v13] = 0.0;
  float *imagp = 0.0;
  vDSP_Length v17 = v13 + 1;
  vDSP_zvabs(&__Z, 1, (float *)a1, 1, v17);
  double v18 = a3 * 0.5;
  double v19 = (double)v13;
  vDSP_vclr((float *)a1, 1, (int)fmin((double)(int)((float)((float)(v13 + 1) * 90.0) / v18), (double)v13));
  int v79 = 0;
  v77[1] = 0;
  uint64_t __C = 0;
  vDSP_Length __I = 0;
  v77[0] = 0;
  vDSP_maxvi((const float *)a1, 1, (float *)&__C, &__I, v15);
  uint64_t v20 = 0;
  int v21 = (int)fmin((double)v13, fmax((double)__I, 1.0));
  float v22 = *(&a1->real + v21);
  uint64_t v23 = v21;
  float v24 = (float)v21;
  uint64_t v25 = v21 - 1;
  float v26 = *(&a1->real + v25);
  uint64_t v27 = v23 + 1;
  float v28 = v22 * v24;
  if (v26 <= *(&a1->real + v27))
  {
    LODWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v27;
    float v26 = *(&a1->real + v27);
  }
  float v29 = (float)(v22 + v26) + 0.0000001;
  float v30 = (float)(v28 + (float)(v26 * (float)(int)v25)) / v29;
  while (1)
  {
    float v73 = 0.0;
    vDSP_Length v72 = 0;
    float v31 = *(float *)&dword_2469EE040[v20];
    float v32 = (float)(v30 * v31) + -1.0;
    if (v32 < 0.0) {
      float v32 = 0.0;
    }
    uint64_t v33 = v32;
    vDSP_maxvi((const float *)a1 + v33, 1, &v73, &v72, 3uLL);
    vDSP_Length v34 = v72 + v33;
    v72 += v33;
    if (*(float *)&__C > 0.0 && (float)(v73 / *(float *)&__C) > 0.1) {
      break;
    }
    if (++v20 == 4) {
      goto LABEL_11;
    }
  }
  float v30 = v30 * v31;
  vDSP_Length __I = v34;
LABEL_11:
  uint64_t v35 = 0;
  memset(v75, 0, 60);
  float v36 = (float)v13;
  float v37 = *(float *)&__C * 0.08;
  do
  {
    if (v35 == 15) {
      break;
    }
    float v38 = v30 * (float)(v35 + 1);
    if (v38 >= v36) {
      break;
    }
    int v39 = (int)fmax((float)(v38 + -7.0), 0.0);
    double v40 = fmin(v19, (float)(v38 + 7.0));
    float v41 = *((float *)v75 + v35);
    if (v40 > (double)v39)
    {
      unsigned int v42 = (float *)a1 + v39;
      int v43 = v39 + 1;
      do
      {
        float v44 = *v42++;
        float v45 = v44;
        if (v41 < v44) {
          float v41 = v45;
        }
        double v46 = (double)v43++;
      }
      while (v40 > v46);
      *((float *)v75 + v35) = v41;
    }
    ++v35;
  }
  while (v41 >= v37);
  int v47 = 0;
  do
  {
    float v48 = v30 * (float)++v47;
    if (v48 >= v36) {
      break;
    }
    int v49 = (int)fmax((float)(v48 + -7.0), 0.0);
    double v50 = fmin(v19, (float)(v48 + 7.0));
    if (v50 > (double)v49)
    {
      uint64_t v51 = (float *)a1 + v49;
      int v52 = v49 + 1;
      do
      {
        *v51++ = 0.0;
        --v14;
        double v53 = (double)v52++;
      }
      while (v50 > v53);
    }
  }
  while (v47 != 15);
  vDSP_maxvi((const float *)a1, 1, (float *)&__C + 1, v77, v17);
  float v71 = 0.0;
  vDSP_meanv((const float *)a1, 1, &v71, v17);
  int v54 = (int)fmin(v19, fmax((double)v77[0], 1.0));
  float v55 = *((float *)a1 + v54 - 1);
  uint64_t v56 = v54 + 1;
  float v57 = *(&a1->real + v56);
  float v58 = *(&a1->real + v54);
  float v59 = v58 * (float)v54;
  if (v55 <= v57) {
    int v60 = v54 + 1;
  }
  else {
    int v60 = v54 - 1;
  }
  if (v55 <= v57) {
    float v55 = *(&a1->real + v56);
  }
  float v61 = v59 + (float)(v55 * (float)v60);
  float v62 = (float)(v58 + v55) + 0.0000001;
  float v63 = v61 / v62;
  float v64 = fmax((double)v14, 1.0);
  float v65 = (float)((float)(v13 + 1) / v64) * v71;
  float v66 = v18 * v30 / v19;
  *a4 = v66;
  if (v65 == 0.0)
  {
    *a5 = 0.0;
    float v70 = v18 * v63 / v19;
    a4[1] = v70;
    float v69 = 0.0;
  }
  else
  {
    float v67 = *((float *)&__C + 1);
    *a5 = *(float *)&__C / v65;
    float v68 = v18 * v63 / v19;
    a4[1] = v68;
    float v69 = v67 / v65;
  }
  a5[1] = v69;
  a4[2] = a4[1];
  a5[2] = a5[1];
}

uint64_t flicker_temporal_filter_Hawking(float a1, float a2, float a3, float a4, float *a5, CPastFlickerHistory *a6)
{
  int v10 = *((_DWORD *)a6 + 1);
  if ((*(_DWORD *)a6 & 0xFFFFFFFD) == 5 || *(_DWORD *)a6 == 3) {
    int v12 = *(_DWORD *)a6;
  }
  else {
    int v12 = 5;
  }
  int v13 = (float *)((char *)a6 + 12);
  uint64_t v14 = *((int *)a6 + 2);
  *((float *)a6 + v14 + 3) = a1;
  *((float *)a6 + v14 + 19) = a2;
  int v15 = (int)fmin((double)(v10 + 1), (double)v12);
  *((_DWORD *)a6 + 1) = v15;
  if (v15 <= 0)
  {
    *a5 = 0.0;
LABEL_22:
    *a5 = medianFilter(v13, v15);
    int v15 = *((_DWORD *)a6 + 1);
    uint64_t result = 1;
    goto LABEL_23;
  }
  int v16 = 0;
  int v17 = v12 + v14;
  LOBYTE(v18) = 1;
  LOBYTE(v19) = 1;
  do
  {
    int v20 = (v17 + v16) % v12;
    int v21 = (float *)((char *)a6 + 4 * v20);
    BOOL v19 = v19 && vabds_f32(a1, v21[3]) < 2.0 && *((float *)a6 + v20 + 19) > 15.0;
    BOOL v18 = v18 && v21[19] < 6.0;
    --v16;
  }
  while (v15 + v16);
  *a5 = 0.0;
  if (v19) {
    goto LABEL_22;
  }
  if (v18) {
    uint64_t result = 3;
  }
  else {
    uint64_t result = 0;
  }
LABEL_23:
  uint64_t v23 = *((int *)a6 + 2);
  if (v15 >= 2) {
    a3 = (float)(*((float *)a6 + (v12 + (int)v23 - 1) % v12 + 35) * 0.382) + (float)(a3 * 0.618);
  }
  float v24 = (float *)((char *)a6 + 4 * v23);
  v24[35] = a3;
  v24[51] = a4;
  *((_DWORD *)a6 + 2) = ((int)v23 + 1) % v12;
  return result;
}

float medianFilter(float *a1, int a2)
{
  if (a2 == 2) {
    return (float)(*a1 + a1[1]) * 0.5;
  }
  if (a2 == 1) {
    return *a1;
  }
  if ((a2 - 3) > 1)
  {
    if ((a2 - 5) > 1)
    {
      float result = 0.0;
      if (a2 == 7)
      {
        float v23 = a1[1];
        float v25 = a1[4];
        float v24 = a1[5];
        float v26 = fminf(*a1, v24);
        float v27 = fmaxf(*a1, v24);
        float v29 = a1[2];
        float v28 = a1[3];
        float v30 = fminf(v26, v28);
        float v31 = fmaxf(v26, v28);
        float v32 = a1[6];
        float v33 = fminf(v23, v32);
        float v34 = fmaxf(v23, v32);
        float v35 = fminf(v29, v25);
        float v36 = fmaxf(v29, v25);
        float v37 = fminf(v30, v33);
        float v38 = fmaxf(v30, v33);
        float v39 = fminf(v31, v27);
        float v40 = fmaxf(v31, v27);
        float v41 = fminf(v35, v34);
        float v42 = fmaxf(v35, v34);
        float v43 = fminf(v41, v39);
        float v44 = fmaxf(v41, v39);
        float v45 = fminf(v44, v42);
        a1[6] = fmaxf(v44, v42);
        float v46 = fminf(v36, v40);
        float v47 = fmaxf(v36, v40);
        float v48 = fminf(v38, v46);
        float v49 = fmaxf(v38, v46);
        *a1 = v37;
        a1[1] = fminf(v48, v45);
        float v50 = fmaxf(v48, v45);
        float result = fminf(v50, v49);
        a1[2] = v43;
        a1[3] = result;
        a1[4] = fmaxf(v50, v49);
        a1[5] = v47;
      }
    }
    else
    {
      float v8 = a1[1];
      float v9 = fminf(*a1, v8);
      float v10 = fmaxf(*a1, v8);
      float v12 = a1[3];
      float v11 = a1[4];
      float v13 = a1[2];
      float v14 = fminf(v12, v11);
      float v15 = fmaxf(v12, v11);
      float v16 = fminf(v9, v14);
      float v17 = fmaxf(v9, v14);
      float v18 = fminf(v10, v15);
      float v19 = fmaxf(v10, v15);
      float v20 = fminf(v18, v13);
      *a1 = v16;
      a1[1] = v20;
      float v21 = fmaxf(v18, v13);
      float v22 = fminf(v21, v17);
      a1[2] = v22;
      a1[3] = fmaxf(v21, v17);
      a1[4] = v19;
      return fmaxf(v20, v22);
    }
  }
  else
  {
    float v3 = a1[1];
    float v4 = fminf(*a1, v3);
    float v5 = fmaxf(*a1, v3);
    float v6 = a1[2];
    float v7 = fminf(v5, v6);
    *a1 = v4;
    a1[1] = v7;
    a1[2] = fmaxf(v5, v6);
    return fmaxf(v4, v7);
  }
  return result;
}

void analyze_flicker(DSPComplex *__C, int a2, float a3, float *a4, float *a5, float *a6, OpaqueFFTSetup **a7)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  int v13 = 1 << a2;
  if (1 << a2 >= 0) {
    int v14 = 1 << a2;
  }
  else {
    int v14 = v13 + 1;
  }
  int v15 = v14 >> 1;
  int v16 = (v14 >> 1) + 1;
  vDSP_Length v17 = (uint64_t)v14 >> 1;
  __Z.realp = a6;
  __Z.imagp = &a6[(v14 >> 1) + 1];
  float __B = 0.4945;
  vDSP_vsadd((const float *)__C, 1, &__B, (float *)__C, 1, v13);
  vDSP_ctoz(__C, 2, &__Z, 1, v17);
  vDSP_fft_zrip(*a7, &__Z, 1, a2, 1);
  imagp = __Z.imagp;
  __Z.realp[v15] = *__Z.imagp;
  imagp[v15] = 0.0;
  float *imagp = 0.0;
  vDSP_Length v19 = v16;
  vDSP_zvabs(&__Z, 1, (float *)__C, 1, v16);
  float v20 = (float)v16;
  double v21 = a3 * 0.5;
  double v22 = (double)v15;
  int v23 = (int)fmin((double)(int)((float)((float)v16 * 90.0) / v21), (double)v15);
  float real = __C->real;
  vDSP_vclr((float *)__C, 1, v23);
  int v96 = 0;
  v94[1] = 0;
  uint64_t __Ca = 0;
  vDSP_Length __I = 0;
  v94[0] = 0;
  vDSP_maxvi((const float *)__C, 1, (float *)&__Ca, &__I, v17);
  int v25 = (int)fmin((double)v15, fmax((double)__I, 1.0));
  float v26 = *((float *)__C + v25 - 1);
  uint64_t v27 = v25 + 1;
  float v28 = *(&__C->real + v27);
  float v29 = *(&__C->real + v25);
  float v30 = v29 * (float)v25;
  if (v26 <= v28) {
    int v31 = v25 + 1;
  }
  else {
    int v31 = v25 - 1;
  }
  if (v26 <= v28) {
    float v26 = *(&__C->real + v27);
  }
  float v32 = v30 + (float)(v26 * (float)v31);
  float v33 = (float)(v29 + v26) + 0.0000001;
  float v34 = v32 / v33;
  float v89 = 0.0;
  vDSP_Length v88 = 0;
  float v35 = *(float *)&__Ca;
  float v36 = (float)(*(float *)&__Ca * 1024.0) / (float)v13;
  if (v36 <= 0.1)
  {
    float v41 = 0.06;
  }
  else if (v36 >= 100.0)
  {
    float v41 = 0.03;
  }
  else
  {
    char v37 = 1;
    unsigned int v38 = 1;
    do
    {
      unsigned int v39 = v38;
      float v40 = flt_2469EE050[v38];
      if ((v37 & 1) == 0) {
        break;
      }
      char v37 = 0;
      unsigned int v38 = 2;
    }
    while (v40 < v36);
    float v41 = flt_2469EE05C[v39 - 1]
        + (float)((float)((float)(flt_2469EE05C[v39] - flt_2469EE05C[v39 - 1]) * (float)(v36 - flt_2469EE050[v39 - 1]))
                / (float)(v40 - flt_2469EE050[v39 - 1]));
  }
  unsigned int v42 = vcvtms_u32_f32(v34 / (float)v23);
  if (v42 <= 1) {
    unsigned int v42 = 1;
  }
  unsigned int v43 = v42 - 1;
  if (v42 != 1)
  {
    double v86 = v21;
    unsigned int v44 = 0;
    float v45 = (float)v42;
    while (1)
    {
      float v46 = 1.0 / (float)(v45 - (float)v44);
      float v89 = 0.0;
      vDSP_Length v88 = 0;
      float v47 = (float)(v34 * v46) + -1.0;
      float v48 = 0.0;
      if (v47 < 0.0) {
        float v47 = 0.0;
      }
      uint64_t v49 = v47;
      vDSP_maxvi((const float *)__C + v49, 1, &v89, &v88, 3uLL);
      vDSP_Length v50 = v88 + v49;
      v88 += v49;
      float v35 = *(float *)&__Ca;
      float v51 = 0.0;
      if (*(float *)&__Ca > 0.0) {
        float v51 = v89 / *(float *)&__Ca;
      }
      uint64_t v52 = 0;
      float v53 = (float)(v34 * v46) + -3.0;
      if (v53 < 0.0) {
        float v53 = 0.0;
      }
      unsigned int v54 = v53;
      float v55 = 0.0;
      do
      {
        uint64_t v56 = v54 + v52;
        if (v50 != v56)
        {
          float v55 = v55 + *(&__C->real + v56);
          float v48 = v48 + 1.0;
        }
        ++v52;
      }
      while (v52 != 6);
      if (v48 >= 1.0) {
        float v57 = v48;
      }
      else {
        float v57 = 1.0;
      }
      float v58 = v55 / v57;
      if (v58 <= 0.0) {
        float v58 = 1.0;
      }
      if (v51 > v41 && (float)(v89 / v58) > 1.5) {
        break;
      }
      if (++v44 == v43) {
        goto LABEL_41;
      }
    }
    float v34 = v34 * v46;
    vDSP_Length __I = v50;
LABEL_41:
    double v21 = v86;
    float v20 = (float)v16;
  }
  uint64_t v59 = 0;
  memset(v92, 0, 60);
  float v60 = (float)v15;
  float v61 = v35 * 0.08;
  do
  {
    if (v59 == 15) {
      break;
    }
    float v62 = v34 * (float)(v59 + 1);
    if (v62 >= v60) {
      break;
    }
    unsigned int v63 = fmax((float)(v62 + -7.0), 0.0);
    double v64 = fmin(v22, (float)(v62 + 7.0));
    float v65 = *((float *)v92 + v59);
    if (v64 > (double)v63)
    {
      do
      {
        if (v65 < *(&__C->real + v63)) {
          float v65 = *(&__C->real + v63);
        }
        ++v63;
      }
      while (v64 > (double)v63);
      *((float *)v92 + v59) = v65;
    }
    ++v59;
  }
  while (v65 >= v61);
  int v66 = 0;
  do
  {
    float v67 = v34 * (float)++v66;
    if (v67 >= v60) {
      break;
    }
    unsigned int v68 = fmax((float)(v67 + -7.0), 0.0);
    double v69 = fmin(v22, (float)(v67 + 7.0));
    while (v69 > (double)v68)
    {
      *((_DWORD *)&__C->real + v68) = 0;
      --v16;
      ++v68;
    }
  }
  while (v66 != 15);
  vDSP_maxvi((const float *)__C, 1, (float *)&__Ca + 1, v94, v19);
  float v87 = 0.0;
  vDSP_meanv((const float *)__C, 1, &v87, v19);
  double v70 = 1.0;
  int v71 = (int)fmin(v22, fmax((double)v94[0], 1.0));
  uint64_t v72 = v71 - 1;
  float v73 = *(&__C->real + v72);
  float v74 = *(&__C->imag + v71);
  float v75 = *(&__C->real + v71);
  float v76 = fmax((double)v16, 1.0);
  float v77 = (float)(v20 / v76) * v87;
  float v78 = v21 * v34 / v22;
  *a4 = v78;
  float v79 = *(float *)&__Ca;
  if (v77 == 0.0)
  {
    float v80 = 0.0;
    float v81 = 0.0;
  }
  else
  {
    float v80 = *(float *)&__Ca / v77;
    float v81 = *((float *)&__Ca + 1) / v77;
  }
  if (v73 <= v74)
  {
    float v73 = v74;
    LODWORD(v72) = v71 + 1;
  }
  float v82 = (float)(v75 * (float)v71) + (float)(v73 * (float)(int)v72);
  float v83 = (float)(v75 + v73) + 0.0000001;
  float v84 = v21 * (float)(v82 / v83) / v22;
  *a5 = v80;
  a4[1] = v84;
  a5[1] = v81;
  if (v79 > 0.0) {
    double v70 = v79;
  }
  float v85 = real / v70;
  a4[2] = v85;
  a5[2] = a5[1];
}

uint64_t flicker_temporal_filter_Penrose(float a1, float a2, float a3, float a4, float a5, float *a6, float *a7, CPastFlickerHistory *a8, double a9)
{
  float v13 = a9;
  float v14 = 1.0;
  if (v13 > 3000.0)
  {
    float v14 = 0.625;
    if (v13 < 12000.0) {
      float v14 = (float)((float)((float)(v13 + -3000.0) * -0.375) / 9000.0) + 1.0;
    }
  }
  float v15 = v14 * a2;
  int v16 = *((_DWORD *)a8 + 1);
  if ((*(_DWORD *)a8 & 0xFFFFFFFD) == 5 || *(_DWORD *)a8 == 3) {
    int v18 = *(_DWORD *)a8;
  }
  else {
    int v18 = 5;
  }
  uint64_t v19 = *((int *)a8 + 2);
  float v20 = (float *)((char *)a8 + 4 * v19 + 12);
  float *v20 = a1;
  *((float *)a8 + v19 + 19) = v15;
  *((float *)a8 + v19 + 67) = a5;
  if (v16 + 1 < v18) {
    int v21 = v16 + 1;
  }
  else {
    int v21 = v18;
  }
  *((_DWORD *)a8 + 1) = v21;
  int v22 = v21 - 1;
  if (v21 > 1)
  {
    int v23 = v18 + v19 - 1;
    while (1)
    {
      float v24 = (float *)((char *)a8 + 4 * (v23 % v18));
      float v26 = v24[3];
      int v25 = v24 + 3;
      float v27 = v26;
      if (v26 < a1 && v27 > 0.0)
      {
        float v28 = fabsf(a1 / v27);
        if (v28 > 1.9 && vabds_f32(a1 / v27, v28) < 0.05) {
          break;
        }
      }
      --v23;
      if (!--v22) {
        goto LABEL_20;
      }
    }
    if (v15 >= (float)(*((float *)a8 + v23 % v18 + 19) * 1.25))
    {
      a1 = v27;
    }
    else
    {
      float *v20 = v27;
      a1 = *v25;
    }
  }
LABEL_20:
  if (v21 < 1)
  {
    *a6 = 0.0;
LABEL_38:
    float v37 = *v20;
    float *v20 = a1;
    *a6 = medianFilter((float *)a8 + 3, v21);
    int v21 = *((_DWORD *)a8 + 1);
    *((float *)a8 + *((int *)a8 + 2) + 3) = v37;
    uint64_t v36 = 1;
    goto LABEL_39;
  }
  int v29 = v18 + v19;
  LOBYTE(v3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
  int v31 = v21;
  LOBYTE(v32) = 1;
  do
  {
    int v33 = v29 % v18;
    float v34 = (float *)((char *)a8 + 4 * (v29 % v18));
    BOOL v32 = v32
       && vabds_f32(a1, v34[3]) < 2.0
       && (float v35 = (float *)((char *)a8 + 4 * v33), v35[19] > 15.0)
       && v35[67] < 300.0;
    if (v30) {
      BOOL v30 = v34[19] < 6.0 || *((float *)a8 + v33 + 67) > 400.0;
    }
    else {
      BOOL v30 = 0;
    }
    --v29;
    --v31;
  }
  while (v31);
  *a6 = 0.0;
  if (v32) {
    goto LABEL_38;
  }
  if (v30) {
    uint64_t v36 = 3;
  }
  else {
    uint64_t v36 = 0;
  }
LABEL_39:
  float __C = 0.0;
  vDSP_meanv((const float *)a8 + 19, 1, &__C, v21);
  *a7 = __C;
  uint64_t v38 = *((int *)a8 + 2);
  if (*((int *)a8 + 1) >= 2) {
    a3 = (float)(*((float *)a8 + (v18 + (int)v38 - 1) % v18 + 35) * 0.382) + (float)(a3 * 0.618);
  }
  unsigned int v39 = (float *)((char *)a8 + 4 * v38);
  v39[35] = a3;
  v39[51] = a4;
  *((_DWORD *)a8 + 2) = ((int)v38 + 1) % v18;
  return v36;
}

float meanFilter(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_meanv(a1, 1, &__C, __N);
  return __C;
}

float32x4_t *waveMatching(float32x4_t *result, unint64_t a2, float a3, float *a4, float *a5, unsigned int a6)
{
  if (a6)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a6;
    uint64_t v8 = 1;
    do
    {
      a5[v6] = 0.0;
      float v9 = a4[v6];
      if (v9 <= 0.0)
      {
        unint64_t v18 = v8;
      }
      else
      {
        unint64_t v10 = (float)((float)((float)(a3 / v9)
                                          * (float)(float)((float)((float)a2 / (float)(a3 / v9)) / 5.0))
                                  + 0.5);
        if (v10 >= a2) {
          uint64_t v11 = a2;
        }
        else {
          uint64_t v11 = v10;
        }
        unint64_t v12 = v11 & 0xFFFFFFFC;
        if ((int)v12 < 1)
        {
          uint64_t v17 = 0;
          float32x4_t v14 = 0uLL;
        }
        else
        {
          unint64_t v13 = 0;
          float32x4_t v14 = 0uLL;
          float v15 = result;
          do
          {
            float32x4_t v16 = *v15++;
            float32x4_t v14 = vmlaq_f32(v14, v16, v16);
            v13 += 4;
          }
          while (v13 < v12);
          uint64_t v17 = v13;
        }
        unsigned __int32 v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1)))).u32[0];
        if ((int)v17 < (int)v11)
        {
          uint64_t v20 = v11 - v17;
          int v21 = &result->f32[v17];
          do
          {
            float v22 = *v21++;
            *(float *)&unsigned __int32 v19 = *(float *)&v19 + (float)(v22 * v22);
            --v20;
          }
          while (v20);
        }
        unint64_t v18 = v8 + 4;
        float v23 = 0.0;
        uint64_t v24 = v8;
        unsigned int v25 = v10;
        uint64_t v26 = (uint64_t)result;
        do
        {
          float v27 = *(float *)&v19;
          uint64_t v28 = (uint64_t)result->i64 + 4 * v25;
          unint64_t v29 = ~(unint64_t)v25 + a2;
          if (v29 <= v10) {
            unint64_t v29 = v29;
          }
          else {
            unint64_t v29 = v10;
          }
          unint64_t v30 = v29 & 0xFFFFFFFC;
          if ((int)v30 < 1)
          {
            uint64_t v38 = 0;
            float32x4_t v32 = 0uLL;
          }
          else
          {
            unint64_t v31 = 0;
            float32x4_t v32 = 0uLL;
            int v33 = (float32x4_t *)v26;
            float v34 = (float32x4_t *)((char *)result + 4 * v25);
            do
            {
              float32x4_t v35 = *v33++;
              float32x4_t v36 = v35;
              float32x4_t v37 = *v34++;
              float32x4_t v32 = vmlaq_f32(v32, v37, v36);
              v31 += 4;
            }
            while (v31 < v30);
            uint64_t v38 = v31;
          }
          uint64_t v39 = v25;
          LODWORD(v4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1)))).u32[0];
          if ((int)v38 < (int)v29)
          {
            uint64_t v41 = v29 - v38;
            unsigned int v42 = &result->f32[v38 + v39];
            unsigned int v43 = (float *)(v26 + 4 * v38);
            do
            {
              float v44 = *v43++;
              float v45 = v44;
              float v46 = *v42++;
              float v40 = v40 + (float)(v45 * v46);
              --v41;
            }
            while (v41);
          }
          if ((int)v30 < 1)
          {
            uint64_t v51 = 0;
            float32x4_t v48 = 0uLL;
          }
          else
          {
            unint64_t v47 = 0;
            float32x4_t v48 = 0uLL;
            uint64_t v49 = (float32x4_t *)((char *)result + 4 * v25);
            do
            {
              float32x4_t v50 = *v49++;
              float32x4_t v48 = vmlaq_f32(v48, v50, v50);
              v47 += 4;
            }
            while (v47 < v30);
            uint64_t v51 = v47;
          }
          unsigned __int32 v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1)))).u32[0];
          if ((int)v51 < (int)v29)
          {
            uint64_t v52 = v29 - v51;
            float v53 = &result->f32[v51 + v39];
            do
            {
              float v54 = *v53++;
              *(float *)&unsigned __int32 v19 = *(float *)&v19 + (float)(v54 * v54);
              --v52;
            }
            while (v52);
          }
          float v55 = 0.0;
          if (fabsf(v27) > 0.001 && fabsf(*(float *)&v19) > 0.001) {
            float v55 = (float)(fabsf(v40) / sqrtf(v27)) / sqrtf(*(float *)&v19);
          }
          v25 += v10;
          float v23 = v23 + v55;
          ++v24;
          uint64_t v26 = v28;
        }
        while (v24 != v18);
        if (v18 > 1) {
          a5[v6] = v23 / (float)(unint64_t)(v8 + 3);
        }
      }
      ++v6;
      uint64_t v8 = v18;
    }
    while (v6 != v7);
  }
  return result;
}

float fun_vector_dotpr_float(float *a1, float *a2, int a3)
{
  unint64_t v3 = a3 & 0xFFFFFFFC;
  if ((int)v3 < 1)
  {
    LODWORD(v4) = 0;
    float32x4_t v5 = 0uLL;
  }
  else
  {
    unint64_t v4 = 0;
    float32x4_t v5 = 0uLL;
    uint64_t v6 = a1;
    uint64_t v7 = a2;
    do
    {
      float32x4_t v8 = *(float32x4_t *)v6;
      v6 += 4;
      float32x4_t v9 = v8;
      float32x4_t v10 = *(float32x4_t *)v7;
      v7 += 4;
      float32x4_t v5 = vmlaq_f32(v5, v10, v9);
      v4 += 4;
    }
    while (v4 < v3);
  }
  LODWORD(result) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)))).u32[0];
  if ((int)v4 < a3)
  {
    unint64_t v12 = &a2[v4];
    unint64_t v13 = &a1[v4];
    unint64_t v14 = a3 - (unint64_t)v4;
    do
    {
      float v15 = *v13++;
      float v16 = v15;
      float v17 = *v12++;
      float result = result + (float)(v16 * v17);
      --v14;
    }
    while (v14);
  }
  return result;
}

void mem_free(void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    free(v2);
    *a1 = 0;
  }
}

uint64_t my_log2(int a1)
{
  if (a1 < 2) {
    return 0;
  }
  LODWORD(v1) = 0;
  do
  {
    uint64_t v1 = (v1 + 1);
    BOOL v2 = a1 > 3;
    a1 >>= 1;
  }
  while (v2);
  return v1;
}

void fun_get_histogram(const float *a1, int a2, int a3, int *a4, float *a5)
{
  float32x4_t v9 = a1;
  uint64_t __C = 0;
  vDSP_Length v10 = a2;
  vDSP_maxv(a1, 1, (float *)&__C + 1, a2);
  vDSP_minv(v9, 1, (float *)&__C, v10);
  float v11 = *(float *)&__C;
  float v12 = (float)(*((float *)&__C + 1) - *(float *)&__C) / (float)a3;
  if (v12 == 0.0) {
    float v12 = 0.0000001;
  }
  if (a3 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      a5[v13] = v11 + (float)((float)(int)v13 * v12);
      a4[v13++] = 0;
    }
    while (a3 != v13);
  }
  if (a2 >= 1)
  {
    uint64_t v14 = a2;
    do
    {
      float v15 = *v9++;
      signed int v16 = vcvtms_s32_f32((float)(v15 - v11) / v12);
      if (v16 >= a3) {
        signed int v16 = a3 - 1;
      }
      ++a4[v16];
      --v14;
    }
    while (v14);
  }
}

float fun_get_threshold_histogram(int *a1, int a2, float *a3, float result, float *a5)
{
  if (a2 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = a2;
    uint64_t v7 = a2;
    float32x4_t v8 = a1;
    do
    {
      int v9 = *v8++;
      v5 += v9;
      --v7;
    }
    while (v7);
    float result = (float)v5 * result;
    while (1)
    {
      int v10 = *a1++;
      LODWORD(v7) = v10 + v7;
      if (result <= (float)(int)v7) {
        break;
      }
      ++a3;
      if (!--v6) {
        return result;
      }
    }
    float result = *a3;
    *a5 = *a3;
  }
  return result;
}

float fun_signal_noise_ratio(int a1, float *a2, int a3, float a4, int a5, float a6, float *a7)
{
  float v8 = (float)(a5 >> 1);
  float v9 = (float)a3;
  double v10 = (float)((float)(a4 / v8) * (float)a3) + 0.5;
  float v11 = (float)(int)v10;
  BOOL v12 = v10 <= 1.0;
  float v13 = 1.0;
  if (!v12) {
    float v13 = v11;
  }
  int v14 = (int)((float)(v9 / v13) + 0.5);
  if (v14 < 1)
  {
    float v16 = 0.0;
  }
  else
  {
    int v15 = 0;
    float v16 = 0.0;
    do
    {
      double v17 = (float)((float)((float)((float)++v15 * a4) / v8) * v9) + 0.5;
      int v18 = ((int)v17 - a1) & ~(((int)v17 - a1) >> 31);
      int v19 = (int)v17 + a1;
      if (v19 >= a3 - 1) {
        int v19 = a3 - 1;
      }
      if (v18 <= v19)
      {
        uint64_t v20 = (v19 + 1);
        int v21 = &a2[v18];
        uint64_t v22 = v20 - v18;
        do
        {
          float v23 = *v21++;
          float v16 = v16 + (float)(v23 * v23);
          --v22;
        }
        while (v22);
      }
    }
    while (v15 != v14);
  }
  float result = log10f(v16 / a6) * 10.0;
  *a7 = result;
  return result;
}

float fun_dc_ratio(int a1, float *a2, int a3, float a4, int a5, float a6, float *a7, float a8)
{
  float v9 = (float)(a5 >> 1);
  float v10 = (float)a3;
  double v11 = (float)((float)(a4 / v9) * (float)a3) + 0.5;
  float v12 = (float)(int)v11;
  BOOL v13 = v11 <= 1.0;
  float v14 = 1.0;
  if (!v13) {
    float v14 = v12;
  }
  int v15 = (int)((float)(v10 / v14) + 0.5);
  if (v15 < 1)
  {
    float v18 = 0.0;
  }
  else
  {
    int v16 = 0;
    signed int v17 = vcvtmd_s64_f64((float)((float)(a8 / v9) * v10) + 0.5);
    float v18 = 0.0;
    do
    {
      int v19 = (int)((float)((float)((float)((float)++v16 * a4) / v9) * v10) + 0.5);
      signed int v20 = v19 - a1;
      if (v19 - a1 <= v17) {
        signed int v20 = v17;
      }
      int v21 = v19 + a1;
      if (v21 >= a3 - 1) {
        int v22 = a3 - 1;
      }
      else {
        int v22 = v21;
      }
      if (v20 <= v22)
      {
        float v23 = &a2[v20];
        int v24 = v22 - v20 + 1;
        do
        {
          float v25 = *v23++;
          float v18 = v18 + (float)(v25 * v25);
          --v24;
        }
        while (v24);
      }
    }
    while (v16 != v15);
  }
  float result = log10f(a6 / v18) * 10.0;
  *a7 = result;
  return result;
}

uint64_t fun_signal_correlation2(uint64_t result, float *a2, int a3, float a4, int a5, float *a6)
{
  float v6 = (float)(a5 >> 1);
  float v7 = (float)a3;
  int v8 = (int)fmax((float)((float)(a4 / v6) * (float)a3) + 0.5, 1.0);
  int v9 = (v8 - 4) >> 1;
  if (v9 <= 1) {
    int v9 = 1;
  }
  int v10 = (int)((float)(v7 / (float)v8) + 0.5);
  float v11 = 0.0;
  float v12 = 0.0;
  int v13 = a3 - 1;
  if (a3 >= 1)
  {
    uint64_t v14 = a3;
    int v15 = a2;
    do
    {
      float v16 = *v15++;
      float v12 = v12 + (float)(v16 * v16);
      --v14;
    }
    while (v14);
  }
  if (v10 >= 1)
  {
    int v17 = 0;
    float v11 = 0.0;
    do
    {
      int v18 = (int)((float)((float)((float)((float)++v17 * a4) / v6) * v7) + 0.5);
      int v19 = (v18 - result) & ~((v18 - (int)result) >> 31);
      if (v19 >= v13) {
        int v19 = a3 - 1;
      }
      int v20 = v18 + result;
      if (v18 + (int)result >= v13) {
        int v20 = a3 - 1;
      }
      if (v19 > v20) {
        int v20 = v19;
      }
      int v21 = (v18 - v9) & ~((v18 - v9) >> 31);
      if (v21 >= v13) {
        int v21 = a3 - 1;
      }
      int v22 = v9 + v18;
      if (v22 >= v13) {
        int v22 = a3 - 1;
      }
      if (v22 <= v21) {
        int v23 = v21;
      }
      else {
        int v23 = v22;
      }
      int v24 = &a2[v21];
      float v25 = *v24;
      int v26 = v23 - v21;
      if (v26 >= 0)
      {
        uint64_t v27 = -(uint64_t)(v26 + 1);
        do
        {
          float v28 = *v24++;
          float v29 = v28;
          if (v25 < v28) {
            float v25 = v29;
          }
          BOOL v30 = __CFADD__(v27++, 1);
        }
        while (!v30);
      }
      unint64_t v31 = &a2[v19];
      float v32 = *v31;
      if (v20 - v19 >= 0)
      {
        uint64_t v33 = -(uint64_t)(v20 - v19 + 1);
        float v34 = &a2[v19];
        do
        {
          float v35 = *v34++;
          float v36 = v35;
          if (v32 < v35) {
            float v32 = v36;
          }
          BOOL v30 = __CFADD__(v33++, 1);
        }
        while (!v30);
      }
      if (v25 * 0.999 < v32)
      {
        int v37 = ~v20 + v19;
        do
        {
          float v38 = *v31++;
          float v11 = v11 + (float)(v38 * v38);
          BOOL v30 = __CFADD__(v37++, 1);
        }
        while (!v30);
      }
    }
    while (v17 != v10);
  }
  float v39 = v11 / v12;
  if ((float)(v11 / v12) > 1.0) {
    float v39 = 1.0;
  }
  *a6 = v39;
  return result;
}

float *fun_get_max(float *result, int a2, float *a3, int *a4)
{
  float v4 = *result;
  if (a2 < 1)
  {
    int v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
    do
    {
      if (v4 < result[v5])
      {
        int v6 = v5;
        float v4 = result[v5];
      }
      ++v5;
    }
    while (a2 != v5);
  }
  *a3 = v4;
  *a4 = v6;
  return result;
}

uint64_t fun_signal_correlation(uint64_t result, float *a2, int a3, float a4, int a5, float *a6)
{
  float v6 = (float)(a5 >> 1);
  float v7 = (float)a3;
  double v8 = (float)((float)(a4 / v6) * (float)a3) + 0.5;
  int v9 = (int)v8;
  BOOL v10 = v8 <= 1.0;
  float v11 = 1.0;
  if (!v10) {
    float v11 = (float)v9;
  }
  int v12 = (int)((float)(v7 / v11) + 0.5);
  float v13 = 0.0;
  float v14 = 0.0;
  if (a3 >= 1)
  {
    uint64_t v15 = a3;
    float v16 = a2;
    do
    {
      float v17 = *v16++;
      float v14 = v14 + (float)(v17 * v17);
      --v15;
    }
    while (v15);
  }
  if (v12 >= 1)
  {
    int v18 = 0;
    float v13 = 0.0;
    do
    {
      double v19 = (float)((float)((float)((float)++v18 * a4) / v6) * v7) + 0.5;
      int v20 = ((int)v19 - result) & ~(((int)v19 - (int)result) >> 31);
      int v21 = (int)v19 + result;
      if (v21 >= a3 - 1) {
        int v21 = a3 - 1;
      }
      if (v20 <= v21)
      {
        uint64_t v22 = (v21 + 1);
        int v23 = &a2[v20];
        uint64_t v24 = v22 - v20;
        do
        {
          float v25 = *v23++;
          float v13 = v13 + (float)(v25 * v25);
          --v24;
        }
        while (v24);
      }
    }
    while (v18 != v12);
  }
  float v26 = v13 / v14;
  if ((float)(v13 / v14) > 1.0) {
    float v26 = 1.0;
  }
  *a6 = v26;
  return result;
}

void fun_get_hannign_window(int a1, float *a2, double a3)
{
  if (a1 >= 1)
  {
    uint64_t v4 = 0;
    *(float *)&a3 = (float)(a1 - 1);
    uint64x2_t v24 = (uint64x2_t)vdupq_n_s64((unint64_t)a1 - 1);
    uint64x2_t v5 = (uint64x2_t)xmmword_2469EE030;
    float32x2_t v6 = (float32x2_t)vdup_n_s32(0x40C90FDAu);
    uint64_t v7 = (a1 + 1) & 0x1FFFFFFFELL;
    float32x2_t v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    __asm { FMOV            V0.2D, #-0.5 }
    float64x2_t v22 = _Q0;
    int64x2_t v23 = vdupq_n_s64(2uLL);
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v21 = _Q0;
    do
    {
      int32x2_t v27 = vmovn_s64((int64x2_t)vcgeq_u64(v24, v5));
      int64x2_t v28 = (int64x2_t)v5;
      v15.i32[0] = v4;
      v15.i32[1] = v4 + 1;
      float32x2_t v16 = vmul_f32(vdiv_f32(vcvt_f32_s32(v15), v8), v6);
      float v25 = v16.f32[0];
      float v26 = cosf(v16.f32[1]);
      v17.f32[0] = cosf(v25);
      v17.f32[1] = v26;
      float64x2_t v18 = vmlaq_f64(v21, v22, vcvtq_f64_f32(v17));
      if (v27.i8[0])
      {
        float v19 = v18.f64[0];
        a2[v4] = v19;
      }
      if (v27.i8[4])
      {
        float v20 = v18.f64[1];
        a2[v4 + 1] = v20;
      }
      v4 += 2;
      uint64x2_t v5 = (uint64x2_t)vaddq_s64(v28, v23);
    }
    while (v7 != v4);
  }
}

float fun_vec_mpy(float *a1, float *a2, float *a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = a4;
    do
    {
      float v5 = *a1++;
      float v6 = v5;
      float v7 = *a2++;
      float result = v6 * v7;
      *a3++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t quickSort_float(float *a1, int *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v29 = *MEMORY[0x263EF8340];
  v28[0] = 0;
  v27[0] = v4;
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(_DWORD *)(v3 + 4 * i) = i;
  }
  LODWORD(v6) = 0;
  uint64_t v7 = v3 + 4;
  while (1)
  {
    while (1)
    {
      uint64_t v8 = v6;
      int v9 = v28[v6];
      int v10 = v27[v6];
      int v11 = v10 - 1;
      if (v9 < v10 - 1) {
        break;
      }
      LODWORD(v6) = v6 - 1;
      if (v8 - 1 < 0) {
        return 0;
      }
    }
    if (v6 == 999) {
      break;
    }
    float v12 = *(float *)(v2 + 4 * v9);
    int v13 = *(_DWORD *)(v3 + 4 * v9);
    do
    {
      uint64_t v14 = v11;
      uint64_t v15 = v9;
      uint64_t v16 = ((uint64_t)v11 << 32) + 0x100000000;
      float32x2_t v17 = (float *)(v2 + 4 + 4 * v11);
      do
      {
        uint64_t v18 = v14;
        float v19 = *--v17;
        float v20 = v19;
        --v14;
        v16 -= 0x100000000;
      }
      while (v18 > v15 && v20 >= v12);
      if (v18 > v15)
      {
        *(float *)(v2 + 4 * vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 15) = v20;
        *(_DWORD *)(v3 + 4 * vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 15) = *(_DWORD *)(v7 + 4 * v14);
        uint64_t v15 = (int)v15 + 1;
      }
      int v11 = v14 + 1;
      uint64_t v21 = v16 >> 32;
      uint64_t v22 = (v15 << 32) - 0x100000000;
      do
      {
        uint64_t v23 = v15;
        float v24 = *(float *)(v2 + 4 * v15++);
        v22 += 0x100000000;
      }
      while (v23 < v21 && v24 <= v12);
      if (v23 < v21)
      {
        *float32x2_t v17 = v24;
        *(_DWORD *)(v7 + 4 * vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 14) = *(_DWORD *)(v3 - 4 + 4 * v15);
        int v11 = v14;
      }
      int v9 = v15 - 1;
    }
    while (v11 > (int)v15 - 1);
    uint64_t v25 = v22 >> 30;
    *(float *)(v2 + vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v12;
    *(_DWORD *)(v3 + vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v13;
    uint64_t v6 = (int)v8 + 1;
    v28[v6] = v15;
    v27[v6] = v10;
    v27[v8] = v9;
    if ((v6 & 0x80000000) != 0) {
      return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

float fun_median_float(float *a1, int a2)
{
  int v4 = (int *)malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  if (v4)
  {
    float v5 = v4;
    if (a2 >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        v4[v6] = v6;
        ++v6;
      }
      while (a2 != v6);
    }
    quickSort_float(a1, v4);
    free(v5);
    int v7 = (a2 & 1) + (a2 >> 1) - 1;
  }
  else
  {
    int v7 = a2 - 1;
  }
  return a1[v7];
}

float *fun_get_percent(float a1, float a2, float a3, float *result)
{
  float v4 = 0.0;
  if (a1 >= a2)
  {
    float v4 = 1.0;
    if (a2 < a1 && a1 <= a3) {
      float v4 = (float)(a1 - a2) / (float)(a3 - a2);
    }
  }
  *float result = v4;
  return result;
}

uint64_t fun_get_spectrum_value(float a1, uint64_t result, int a3, int a4, float *a5)
{
  if (a4 >= 0) {
    int v5 = a4;
  }
  else {
    int v5 = a4 + 1;
  }
  int v6 = (int)(float)((float)(a1 / (float)(v5 >> 1)) * (float)a3);
  if (v6 <= 2) {
    int v7 = 2;
  }
  else {
    int v7 = v6;
  }
  int v8 = v7 - 2;
  if (v8 >= a3 - 1) {
    int v8 = a3 - 1;
  }
  int v9 = v6 + 2;
  if (v9 >= a3 - 1) {
    int v9 = a3 - 1;
  }
  int v10 = v9 & ~(v9 >> 31);
  int v11 = (float *)(result + 4 * v8);
  float v12 = *v11;
  int v13 = v10 - v8;
  if (v13 >= 0)
  {
    uint64_t v14 = -(uint64_t)(v13 + 1);
    do
    {
      float v15 = *v11++;
      float v16 = v15;
      if (v12 < v15) {
        float v12 = v16;
      }
    }
    while (!__CFADD__(v14++, 1));
  }
  *a5 = v12;
  return result;
}

uint64_t fun_get_tight_idx(float *a1, int a2, int a3)
{
  int v3 = 0;
  int v4 = a3 + 2;
  float v5 = 1.0 / a1[a3];
  do
  {
    int v6 = v4 + v3;
    if (v4 + v3 >= a2 - 1) {
      int v6 = a2 - 1;
    }
    float v7 = v5 + (float)(-1.0 / a1[v6]);
    int v8 = v3 + 1;
  }
  while (v7 < 30.0 && v3++ != 8);
  int v10 = 0;
  unsigned int v11 = v8 + 1;
  do
  {
    int v12 = v10 - 1;
    BOOL v13 = (float)((float)(1.0 / a1[(a3 - 2 + v10) & ~((a3 - 2 + v10) >> 31)]) - v5) >= 30.0 || v10 == -8;
    --v10;
  }
  while (!v13);
  if (v11 >= 1 - v12) {
    return (1 - v12);
  }
  else {
    return v11;
  }
}

BOOL fun_mpy_test(float a1, float a2)
{
  return (float)(fabsf(a1 - (float)(roundf(a1 / a2) * a2)) / a2) < 0.02;
}

float fun_equal_max(float a1, float a2, float a3)
{
  BOOL v3 = vabds_f32(a1, a2) < 3.0;
  float result = 0.0;
  if (v3) {
    return a3;
  }
  return result;
}

float fun_non_equal_max(float a1, float a2, float a3)
{
  BOOL v3 = vabds_f32(a1, a2) < 3.0;
  float result = 0.0;
  if (!v3) {
    return a3;
  }
  return result;
}

float fun_val_ratio(float a1, float a2, float a3, float a4)
{
  if (vabds_f32(a1, a2) >= 3.0) {
    return a4;
  }
  else {
    return a3;
  }
}

float fun_cpes_th(float a1, float a2, float a3, float a4)
{
  if (vabds_f32(a1, a2) >= 3.0) {
    return a3;
  }
  else {
    return a4;
  }
}

float fun_get_interpolate_max(int a1, float *a2, int a3, int a4)
{
  if (a1 < 1 || (a3 >> 1) - 1 <= a1) {
    return (float)(a1 / a3 * a4);
  }
  float v4 = a2[a1 - 1];
  float v5 = a2[a1 + 1];
  float v6 = (float)(v4 + v5) + (float)(a2[a1] * -2.0);
  double v7 = 0.0;
  if (v6 != 0.0)
  {
    float v8 = (float)(v4 - v5) * 0.5 / v6;
    double v7 = v8;
  }
  double v9 = -0.5;
  if (v7 >= -0.5) {
    double v9 = v7;
  }
  float v10 = v9;
  if (v10 > 0.5) {
    float v10 = 0.5;
  }
  float v11 = v10 + (float)a1;
  if (v11 > (float)(a3 - 1)) {
    float v11 = (float)(a3 - 1);
  }
  if (v11 < 0.0) {
    float v11 = 0.0;
  }
  return (float)(v11 / (float)a3) * (float)a4;
}

float32_t fun_vector_mpy_float(float *a1, float *a2, float *a3, int a4)
{
  unint64_t v4 = a4 & 0xFFFFFFFC;
  if ((int)v4 < 1)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    unint64_t v5 = 0;
    float v6 = a1;
    double v7 = a2;
    float v8 = a3;
    do
    {
      float32x4_t v9 = *(float32x4_t *)v6;
      v6 += 4;
      float32x4_t v10 = v9;
      float32x4_t v11 = *(float32x4_t *)v7;
      v7 += 4;
      float32x4_t v12 = vmulq_f32(v10, v11);
      *(float32x4_t *)float v8 = v12;
      v8 += 4;
      v5 += 4;
    }
    while (v5 < v4);
  }
  if ((int)v5 < a4)
  {
    BOOL v13 = &a3[v5];
    uint64_t v14 = &a2[v5];
    float v15 = &a1[v5];
    unint64_t v16 = a4 - (unint64_t)v5;
    do
    {
      float v17 = *v15++;
      float v18 = v17;
      float v19 = *v14++;
      v12.f32[0] = v18 * v19;
      *v13++ = v12.f32[0];
      --v16;
    }
    while (v16);
  }
  return v12.f32[0];
}

float fun_get_data_pulse_diff(float *a1, float *a2, int a3, int a4)
{
  float result = 0.0;
  if (a4 && a1 && a2)
  {
    float v5 = 0.0;
    float v6 = 0.0;
    if (a4 >= 1)
    {
      uint64_t v7 = a4;
      float v8 = a1;
      do
      {
        float v9 = *v8++;
        float v6 = v6 + v9;
        --v7;
      }
      while (v7);
    }
    float v10 = (float)a4;
    if (fabsf(v6) <= (float)a4) {
      float v5 = v6;
    }
    *a2 = v5;
    if (a3 > a4)
    {
      float32x4_t v11 = a2 + 1;
      uint64_t v12 = (a3 - a4 + 1) - 1;
      int v13 = a4;
      uint64_t v14 = a1;
      do
      {
        float v15 = *v14++;
        float v5 = (float)(v5 - v15) + a1[v13];
        if (fabsf(v5) <= v10) {
          float v16 = v5;
        }
        else {
          float v16 = 0.0;
        }
        *v11++ = v16;
        ++v13;
        --v12;
      }
      while (v12);
    }
    float v17 = 0.0;
    if (2 * a4 <= a3)
    {
      uint64_t v18 = (a3 - 2 * a4 + 1);
      do
      {
        float v19 = a2[a4];
        float v20 = *a2++;
        float v21 = vabds_f32(v19, v20);
        if (v21 > v17) {
          float v17 = v21;
        }
        --v18;
      }
      while (v18);
    }
    return v17 / v10;
  }
  return result;
}

void flicker_detection_init(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, float a7, float a8)
{
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = a4;
  *(_DWORD *)(a1 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a5;
  *(float *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = a7;
  *(float *)(a1 + 28) = a8;
  *(void *)(a1 + 32) = 0x100000008;
  *(_DWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(a1 + 44) = 0x3F7333333F666666;
  v10.i32[1] = 90;
  *(void *)(a1 + 52) = 0x5A00000001;
  *(_DWORD *)(a1 + 336) = 64;
  int v11 = a2 / a3;
  if (a2 / a3 >= 0) {
    int v12 = a2 / a3;
  }
  else {
    int v12 = v11 + 1;
  }
  int v13 = v12 >> 1;
  *(_DWORD *)(a1 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v11;
  if (a4 >= 0) {
    int v14 = a4;
  }
  else {
    int v14 = a4 + 1;
  }
  *(float *)v10.i32 = (float)v13;
  int32x2_t v15 = vcvt_s32_f32(vmul_n_f32(vdiv_f32((float32x2_t)0x4580200042B40000, (float32x2_t)vdup_lane_s32(v10, 0)), (float)(v14 >> 1)));
  *(int32x2_t *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = a6;
  float v16 = (char *)(a6 + 4 * a4);
  if (a4 >= 1)
  {
    uint64_t v17 = 0;
    *(float *)v15.i32 = (float)(a4 - 1);
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x40C90FDAu);
    int64x2_t v85 = vdupq_n_s64(2uLL);
    uint64x2_t v86 = (uint64x2_t)vdupq_n_s64((unint64_t)a4 - 1);
    uint64_t v19 = (a4 + 1) & 0x1FFFFFFFELL;
    float32x2_t v20 = (float32x2_t)vdup_lane_s32(v15, 0);
    uint64x2_t v21 = (uint64x2_t)xmmword_2469EE030;
    __asm
    {
      FMOV            V2.2D, #-0.5
      FMOV            V0.2D, #0.5
    }
    float64x2_t v83 = _Q0;
    float64x2_t v84 = _Q2;
    do
    {
      int64x2_t v90 = (int64x2_t)v21;
      int32x2_t v89 = vmovn_s64((int64x2_t)vcgeq_u64(v86, v21));
      v28.i32[0] = v17;
      v28.i32[1] = v17 + 1;
      float32x2_t v29 = vmul_f32(vdiv_f32(vcvt_f32_s32(v28), v20), v18);
      float v87 = v29.f32[0];
      float v88 = cosf(v29.f32[1]);
      v30.f32[0] = cosf(v87);
      v30.f32[1] = v88;
      float64x2_t v31 = vmlaq_f64(v83, v84, vcvtq_f64_f32(v30));
      if (v89.i8[0])
      {
        float v32 = v31.f64[0];
        *(float *)(a6 + 4 * vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 17) = v32;
      }
      if (v89.i8[4])
      {
        float v33 = v31.f64[1];
        *(float *)(a6 + 4 * v17 + 4) = v33;
      }
      v17 += 2;
      uint64x2_t v21 = (uint64x2_t)vaddq_s64(v90, v85);
    }
    while (v19 != v17);
  }
  for (uint64_t i = 0; i != 64; i += 8)
  {
    float v35 = v16;
    *(void *)(a1 + 80 + i) = v16;
    size_t v36 = 4 * (*(_DWORD *)(a1 + 12) / 2 + 1);
    v16 += v36;
    bzero(v35, v36);
  }
  *(void *)(a1 + 216) = v16;
  size_t v37 = 4 * (*(_DWORD *)(a1 + 12) / 2 + 1);
  float v38 = &v16[v37];
  bzero(v16, v37);
  for (uint64_t j = 0; j != 64; j += 8)
  {
    float v40 = v38;
    *(void *)(a1 + 144 + j) = v38;
    int v41 = *(_DWORD *)(a1 + 12) / 2;
    size_t v42 = 4 * (v41 + 1);
    v38 += v42;
    bzero(v40, v42);
  }
  *(void *)(a1 + 2Matrix<double>::~Matrix((uint64_t)this + 24) = v38;
  int v43 = *(_DWORD *)(a1 + 12) / 2;
  size_t v44 = 4 * (v43 + 1);
  float v45 = &v38[v44];
  bzero(v38, v44);
  int v46 = 0;
  *(_DWORD *)(a1 + 208) = 0;
  int v47 = *(_DWORD *)(a1 + 12);
  int v48 = v47;
  uint64_t v49 = &v45[4 * v47];
  *(void *)(a1 + 232) = v45;
  *(void *)(a1 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v49;
  float32x4_t v50 = &v49[4 * v47];
  uint64_t v51 = v47 + 2;
  if (v47 >= 0) {
    int v52 = v47;
  }
  else {
    int v52 = v47 + 1;
  }
  int v53 = v52 >> 1;
  *(void *)(a1 + 264) = v50;
  *(void *)(a1 + 272) = &v50[4 * v53];
  float v54 = &v50[4 * v51];
  *(void *)(a1 + 248) = v50;
  *(void *)(a1 + 2Matrix<double>::~Matrix((uint64_t)this + 56) = v54;
  float v55 = &v54[4 * v51];
  if (v47 >= 2)
  {
    int v46 = 0;
    int v56 = v47;
    do
    {
      ++v46;
      BOOL v57 = v56 > 3;
      v56 >>= 1;
    }
    while (v57);
  }
  *(_DWORD *)(a1 + 16) = v46;
  uint64_t v58 = (v53 + 1);
  uint64_t v59 = &v55[4 * (int)v58];
  *(void *)(a1 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v55;
  *(void *)(a1 + 2Matrix<double>::~Matrix((uint64_t)this + 88) = v59;
  float v60 = &v59[4 * v47];
  *(_DWORD *)(a1 + 336) = 64;
  *(void *)(a1 + 344) = v60 + 256;
  *(void *)(a1 + 352) = v60;
  v60 += 512;
  float v61 = &v60[4 * (int)v58];
  *(void *)(a1 + 296) = v60;
  *(void *)(a1 + 304) = v61;
  float v62 = &v61[4 * (int)v58];
  unsigned int v63 = &v62[(int)v58];
  *(void *)(a1 + 3H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v62;
  *(void *)(a1 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v63;
  double v64 = &v63[(int)v58];
  *(void *)(a1 + 816) = v64;
  *(_DWORD *)(a1 + 8Matrix<double>::~Matrix((uint64_t)this + 24) = v64 - a6;
  *(unsigned char *)(a1 + 828) = 0;
  if (v47 > -2)
  {
    uint64_t v67 = 0;
    uint64x2_t v68 = (uint64x2_t)vdupq_n_s64(v58 - 1);
    float v69 = (float)v47;
    float v70 = (float)*(int *)(a1 + 60);
    uint64_t v71 = (v58 + 1) & 0x1FFFFFFFELL;
    uint64_t v72 = (float *)&v40[12 * v47 + 528 + 8 * v51 + 4 * v43 + 4 * (uint64_t)v53 + 4 * v41];
    int64x2_t v73 = (int64x2_t)xmmword_2469EE030;
    int64x2_t v74 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v75 = vmovn_s64((int64x2_t)vcgeq_u64(v68, (uint64x2_t)v73));
      if (v75.i8[0]) {
        *(v72 - 1) = (float)((float)(int)v67 / v69) * v70;
      }
      if (v75.i8[4]) {
        *uint64_t v72 = (float)((float)(v67 + 1) / v69) * v70;
      }
      v67 += 2;
      int64x2_t v73 = vaddq_s64(v73, v74);
      v72 += 2;
    }
    while (v71 != v67);
    *(_DWORD *)(a1 + 328) = 0;
    int v66 = v53 - 1;
    *(_DWORD *)(a1 + 332) = v53 - 1;
    *(_DWORD *)float v61 = 925353388;
    if (v47 < 4)
    {
      int v65 = 0;
    }
    else
    {
      int v65 = 0;
      float v76 = (float)*(int *)(a1 + 60);
      if (v53 <= 2) {
        uint64_t v77 = 2;
      }
      else {
        uint64_t v77 = v53;
      }
      uint64_t v78 = 1;
      while (1)
      {
        float v79 = (float)(int)v78 / v76;
        *((float *)v61 + 1) = v79;
        if (v79 >= 0.0002 && *(float *)v61 < 0.0002)
        {
          *(_DWORD *)(a1 + 328) = v78;
          int v65 = v78;
        }
        if (v79 >= 0.011111 && *(float *)v61 < 0.011111) {
          break;
        }
        ++v78;
        v61 += 4;
        if (v77 == v78) {
          goto LABEL_46;
        }
      }
      *(_DWORD *)(a1 + 332) = v78;
      int v66 = v78;
    }
  }
  else
  {
    int v65 = 0;
    *(_DWORD *)(a1 + 328) = 0;
    int v66 = v53 - 1;
    *(_DWORD *)(a1 + 332) = v53 - 1;
    *(_DWORD *)float v61 = 925353388;
  }
LABEL_46:
  if (v65 <= v66)
  {
    uint64_t v80 = (v66 - v65 + 1);
    float v81 = &v40[12 * v48 + 528 + 8 * v51 + 8 * v53 + 4 * v65 + 4 * v43 + 4 * (uint64_t)v41];
    do
    {
      int v82 = *(_DWORD *)v81;
      v81 += 4;
      *v62++ = v82;
      --v80;
    }
    while (v80);
  }
}

void fun_get_fft(float *a1, DSPComplex *a2, float *a3, int a4, int a5, float *a6, OpaqueFFTSetup **a7, DSPSplitComplex *a8)
{
  fun_vector_mpy_float(a1, a3, (float *)a2, a4);
  if (a4 >= 0) {
    int v14 = a4;
  }
  else {
    int v14 = a4 + 1;
  }
  int v15 = v14 >> 1;
  vDSP_ctoz(a2, 2, a8, 1, (uint64_t)v14 >> 1);
  vDSP_fft_zrip(*a7, a8, 1, a5, 1);
  imagp = a8->imagp;
  a8->realp[v15] = *imagp;
  imagp[v15] = 0.0;
  float *imagp = 0.0;

  vDSP_zvabs(a8, 1, a6, 1, v15 + 1);
}

uint64_t flicker_data_processing(uint64_t a1, OpaqueFFTSetup **a2, const float *__A, const float *__B, uint64_t a5, float a6)
{
  uint64_t v371 = *MEMORY[0x263EF8340];
  float v362 = 0.0;
  uint64_t v360 = 0;
  uint64_t v361 = 0;
  uint64_t v359 = 0;
  unsigned int v358 = 0;
  float v354 = 0.0;
  unint64_t v353 = 0;
  unint64_t v351 = 0;
  if (*(void *)(a1 + 72))
  {
    if (*(void *)(a1 + 232))
    {
      float v8 = *(float **)(a1 + 240);
      if (v8)
      {
        if (*(void *)(a1 + 248)
          && *(void *)(a1 + 256)
          && *(void *)(a1 + 280)
          && *(void *)(a1 + 288)
          && *(void *)(a1 + 216)
          && *(void *)(a1 + 224)
          && *(void *)(a1 + 344)
          && *(void *)(a1 + 352)
          && *(void *)(a1 + 296)
          && *(void *)(a1 + 304)
          && *(void *)(a1 + 320)
          && *(void *)(a1 + 312))
        {
          uint64_t v12 = 0;
          int v13 = *a2;
          float v14 = *(float *)(a1 + 708);
          float v15 = *(float *)(a1 + 712);
          do
          {
            if (!*(void *)(a1 + v12 + 80) || !*(void *)(a1 + v12 + 144)) {
              return 1;
            }
            v12 += 8;
          }
          while (v12 != 64);
          uint64_t __C = 0;
          vDSP_Length __N = 0;
          vDSP_Length v365 = 0;
          vDSP_Length __I = 0;
          unint64_t v364 = 0;
          float v363 = 0.0;
          float v357 = 0.0;
          uint64_t v356 = 0;
          float v355 = 0.0;
          float __Ba = 0.0;
          if (__A && __B && a5 && *(_DWORD *)(a1 + 12) == 4096)
          {
            float v338 = v15;
            float v343 = v14;
            float v16 = (float)*(int *)(a1 + 60);
            float __Ba = -*(float *)(a1 + 24);
            float v17 = 16000.0 / v16;
            if (*(_WORD *)a1)
            {
              int v268 = 1;
              vDSP_vsub(__B, 1, __A, 1, v8, 1, 0x1000uLL);
              vDSP_vsadd(__A, 1, &__Ba, *(float **)(a1 + 256), 1, *(int *)(a1 + 12));
            }
            else
            {
              vDSP_vsadd(__A, 1, &__Ba, v8, 1, 0x1000uLL);
              int v268 = 0;
            }
            float data_pulse_diff = fun_get_data_pulse_diff(*(float **)(a1 + 240), *(float **)(a1 + 232), *(_DWORD *)(a1 + 12), 10);
            fun_get_fft(*(float **)(a1 + 240), *(DSPComplex **)(a1 + 232), *(float **)(a1 + 72), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(float **)(a1 + 280), a2, (DSPSplitComplex *)(a1 + 264));
            int v19 = *(_DWORD *)(a1 + 12);
            if (v19 >= 0) {
              int v20 = *(_DWORD *)(a1 + 12);
            }
            else {
              int v20 = v19 + 1;
            }
            uint64x2_t v21 = *(const float **)(a1 + 280);
            uint64_t v22 = ((v20 >> 1) + 1);
            if (v19 >= -1)
            {
              uint64_t v23 = v22;
              float v24 = *(float **)(a1 + 280);
              do
              {
                float v25 = *v24;
                if (*v24 < 0.00001) {
                  float v25 = 0.00001;
                }
                *v24++ = v25;
                --v23;
              }
              while (v23);
            }
            HIDWORD(__N) = v22;
            vvlogf(*(float **)(a1 + 288), v21, (const int *)&__N + 1);
            int v26 = *(_DWORD *)(a1 + 12);
            if (v26 >= 0) {
              int v27 = *(_DWORD *)(a1 + 12);
            }
            else {
              int v27 = v26 + 1;
            }
            int v28 = v27 >> 1;
            if (v26 >= -1)
            {
              float v33 = *(float **)(a1 + 216);
              float v34 = *(float **)(a1 + 8 * *(int *)(a1 + 208) + 80);
              float v35 = *(float **)(a1 + 280);
              unsigned int v30 = v28 + 1;
              uint64_t v36 = v30;
              uint64_t v37 = v30;
              do
              {
                float v38 = *v34++;
                float v39 = *v33 - v38;
                float v40 = *v35++;
                *v33++ = v39 + v40;
                --v37;
              }
              while (v37);
              int v41 = *(float **)(a1 + 224);
              uint64_t v29 = *(int *)(a1 + 208);
              size_t v42 = *(float **)(a1 + 8 * v29 + 144);
              int v43 = *(float **)(a1 + 288);
              do
              {
                float v44 = *v42++;
                float v45 = *v41 - v44;
                float v46 = *v43++;
                *v41++ = v45 + v46;
                --v36;
              }
              while (v36);
            }
            else
            {
              uint64_t v29 = *(int *)(a1 + 208);
              unsigned int v30 = v28 + 1;
            }
            double v47 = (float)(v17 * 5.0) + 0.5;
            memcpy(*(void **)(a1 + 8 * v29 + 80), *(const void **)(a1 + 280), 4 * (int)v30);
            memcpy(*(void **)(a1 + 8 * *(int *)(a1 + 208) + 144), *(const void **)(a1 + 288), 4 * (*(_DWORD *)(a1 + 12) / 2 + 1));
            unint64_t v48 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 208) = (*(_DWORD *)(a1 + 208) + 1) % (int)v48;
            if (*(void *)(a1 + 696) >= v48)
            {
              int v49 = *(_DWORD *)(a1 + 12);
              if (v49 >= -1)
              {
                int v50 = v49 / 2;
                uint64_t v51 = *(float **)(a1 + 216);
                float v52 = (float)(int)v48;
                int v53 = *(float **)(a1 + 280);
                uint64_t v54 = (v50 + 1);
                uint64_t v55 = v54;
                do
                {
                  float v56 = *v51++;
                  *v53++ = v56 / v52;
                  --v55;
                }
                while (v55);
                BOOL v57 = *(float **)(a1 + 224);
                uint64_t v58 = *(float **)(a1 + 288);
                do
                {
                  float v59 = *v57++;
                  *v58++ = v59 / v52;
                  --v54;
                }
                while (v54);
              }
            }
            uint64_t v60 = (int)v47;
            if (v268)
            {
              fun_get_fft(*(float **)(a1 + 256), *(DSPComplex **)(a1 + 232), *(float **)(a1 + 72), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(float **)(a1 + 240), a2, (DSPSplitComplex *)(a1 + 264));
              int v61 = *(_DWORD *)(a1 + 12);
              float v62 = *(float **)(a1 + 240);
              if (v61 >= -1)
              {
                if (v61 >= 0) {
                  int v63 = *(_DWORD *)(a1 + 12);
                }
                else {
                  int v63 = v61 + 1;
                }
                uint64_t v64 = ((v63 >> 1) + 1);
                int v65 = *(float **)(a1 + 240);
                do
                {
                  float v66 = *v65;
                  if (*v65 < 0.00001) {
                    float v66 = 0.00001;
                  }
                  *v65++ = v66;
                  --v64;
                }
                while (v64);
              }
              float v341 = (float)((float)((float)((float)(v62[1] * v62[1]) + (float)(*v62 * *v62)) + (float)(v62[2] * v62[2]))
                           + (float)(v62[3] * v62[3]))
                   + (float)(v62[4] * v62[4]);
            }
            else
            {
              uint64_t v67 = *(float **)(a1 + 280);
              float v341 = (float)((float)((float)((float)(v67[1] * v67[1]) + (float)(*v67 * *v67)) + (float)(v67[2] * v67[2]))
                           + (float)(v67[3] * v67[3]))
                   + (float)(v67[4] * v67[4]);
              float v62 = *(float **)(a1 + 240);
              int v61 = *(_DWORD *)(a1 + 12);
            }
            float __Ba = -*(float *)(a1 + 28);
            vDSP_vsadd(__B, 1, &__Ba, v62, 1, v61);
            fun_get_fft(*(float **)(a1 + 240), *(DSPComplex **)(a1 + 232), *(float **)(a1 + 72), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(float **)(a1 + 248), a2, (DSPSplitComplex *)(a1 + 264));
            if (a6 == 0.0)
            {
              *(_DWORD *)(a5 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1120403456;
              *(_DWORD *)(a5 + 32) = 0;
              int v73 = HIDWORD(__N);
            }
            else
            {
              if (a6 == 30.0 || a6 == 15.0) {
                int v70 = 1;
              }
              else {
                int v70 = 2;
              }
              if (a6 == 8.0 || a6 == 1.0) {
                int v72 = 0;
              }
              else {
                int v72 = v70;
              }
              int v73 = HIDWORD(__N);
              uint64x2_t v68 = *(float **)(a1 + 248);
              fun_dc_ratio(v72, v68, SHIDWORD(__N), a6, *(_DWORD *)(a1 + 60), (float)((float)((float)((float)(v68[1] * v68[1]) + (float)(*v68 * *v68)) + (float)(v68[2] * v68[2]))+ (float)(v68[3] * v68[3]))+ (float)(v68[4] * v68[4]), (float *)(a5 + 20), (float)*(int *)(a1 + 56));
              LODWORD(v369[0]) = 0;
              int v74 = *(_DWORD *)(a1 + 64);
              int32x2_t v75 = *(float **)(a1 + 248);
              if (v74 >= -1) {
                bzero(*(void **)(a1 + 248), 4 * (v74 + 1) + 4);
              }
              fun_signal_correlation((int)v47, v75, v73, 120.0, *(_DWORD *)(a1 + 60), (float *)v369);
              *(_DWORD *)(a5 + 32) = v369[0];
            }
            fun_get_histogram(*(const float **)(a1 + 288), v73, *(_DWORD *)(a1 + 336), *(int **)(a1 + 352), *(float **)(a1 + 344));
            uint64_t v76 = *(unsigned int *)(a1 + 336);
            if ((int)v76 >= 1)
            {
              int v77 = 0;
              float v79 = *(_DWORD **)(a1 + 344);
              uint64_t v78 = *(int **)(a1 + 352);
              uint64_t v80 = v78;
              uint64_t v81 = *(unsigned int *)(a1 + 336);
              do
              {
                int v82 = *v80++;
                v77 += v82;
                --v81;
              }
              while (v81);
              int v83 = 0;
              while (1)
              {
                int v84 = *v78++;
                v83 += v84;
                if ((float)(*(float *)(a1 + 44) * (float)v77) <= (float)v83) {
                  break;
                }
                ++v79;
                if (!--v76) {
                  goto LABEL_91;
                }
              }
              LODWORD(__N) = *v79;
            }
LABEL_91:
            int v85 = HIDWORD(__N);
            uint64_t v86 = SHIDWORD(__N);
            float v87 = *(char **)(a1 + 288);
            if (SHIDWORD(__N) < 1)
            {
              int v89 = 0;
              float v91 = 0.0;
            }
            else
            {
              uint64_t v88 = 0;
              int v89 = 0;
              uint64_t v90 = 4 * HIDWORD(__N);
              float v91 = 0.0;
              do
              {
                if (*(float *)&v87[v88] < *(float *)&__N)
                {
                  float v91 = v91 + (float)(*(float *)(*(void *)(a1 + 280) + v88) * *(float *)(*(void *)(a1 + 280) + v88));
                  ++v89;
                  *(_DWORD *)&v87[v88] = __N;
                }
                v88 += 4;
              }
              while (v90 != v88);
            }
            int __Ab = v89;
            memcpy(*(void **)(a1 + 248), v87, 4 * v86);
            if (*(_DWORD *)(a1 + 52) && SHIDWORD(__N) >= 3)
            {
              uint64_t v92 = 0;
              uint64_t v93 = *(void *)(a1 + 248);
              uint64_t v94 = 4 * (HIDWORD(__N) - 1) - 4;
              do
              {
                if (*(float *)(v93 + v92) == *(float *)&__N && *(float *)(v93 + v92 + 8) == *(float *)&__N) {
                  *(_DWORD *)(*(void *)(a1 + 288) + v92 + 4) = __N;
                }
                v92 += 4;
              }
              while (v94 != v92);
            }
            int v95 = *(_DWORD *)(a1 + 64);
            int v96 = *(const void **)(a1 + 288);
            if (v95 >= -1)
            {
              uint64_t v97 = *(_DWORD **)(a1 + 280);
              uint64_t v98 = (v95 + 2);
              double v99 = *(_DWORD **)(a1 + 288);
              do
              {
                *v97++ = 0;
                *v99++ = __N;
                --v98;
              }
              while (v98);
            }
            *(float *)&vDSP_Length __N = -*(float *)&__N;
            memcpy(*(void **)(a1 + 248), v96, 4 * SHIDWORD(__N));
            vDSP_vsadd(*(const float **)(a1 + 248), 1, (const float *)&__N, *(float **)(a1 + 288), 1, SHIDWORD(__N));
            vDSP_maxvi(*(const float **)(a1 + 280), 1, (float *)&__C + 1, &__I, SHIDWORD(__N));
            unsigned int v100 = *(const void **)(a1 + 280);
            BOOL v340 = 0;
            if (__I >= 2)
            {
              vDSP_Length v101 = (vDSP_Length)v100 + 4 * __I;
              if (*(float *)(v101 - 4) == 0.0 && *(float *)(v101 - 8) == 0.0) {
                BOOL v340 = 1;
              }
            }
            int v102 = (int)(float)((float)(4100.0 / (float)(*(_DWORD *)(a1 + 60) / 2)) * (float)(*(_DWORD *)(a1 + 12) / 2));
            memcpy(*(void **)(a1 + 248), v100, 4 * SHIDWORD(__N));
            vDSP_Length v103 = SHIDWORD(__N);
            double v104 = *(const float **)(a1 + 248);
            if (SHIDWORD(__N) >= v102) {
              bzero((void *)&v104[v102 - 1], 4 * (HIDWORD(__N) - v102) + 4);
            }
            vDSP_maxvi(v104, 1, (float *)&__C + 1, &__I, v103);
            int v105 = *(_DWORD *)(a1 + 12);
            if (__I) {
              float v106 = (float)__I;
            }
            else {
              float v106 = 1.0;
            }
            if ((float)__I <= (float)(v105 >> 1)) {
              float v107 = v106;
            }
            else {
              float v107 = (float)(v105 >> 1);
            }
            unint64_t v108 = (unint64_t)v107;
            vDSP_Length __I = (unint64_t)v107;
            double v109 = (float *)(*(void *)(a1 + 280) + 4 * (unint64_t)v107);
            float v110 = quadratic_interpolation_dx((const float (*)[3])(v109 - 1));
            float v111 = *v109 + (float)(v110 * (float)(*(v109 - 1) - v109[1])) * -0.25;
            *((float *)&__C + 1) = v111;
            float v112 = (float)v105;
            float v113 = (float)(v110 + (float)v108) * (float)*(unsigned int *)(a1 + 60);
            if ((int)v108 <= 5) {
              unsigned int v114 = 5;
            }
            else {
              unsigned int v114 = v108;
            }
            int v115 = v108 + 5;
            vDSP_Length v116 = SHIDWORD(__N);
            if ((int)v108 + 5 >= HIDWORD(__N) - 1) {
              int v115 = HIDWORD(__N) - 1;
            }
            long long v117 = *(const float **)(a1 + 248);
            if ((int)(v114 - 5) <= v115) {
              bzero((void *)&v117[v114 - 5], 4 * (v115 - v114 + 5) + 4);
            }
            float v118 = v113 / v112;
            vDSP_maxvi(v117, 1, (float *)&__C, &v365, v116);
            uint64_t v119 = *(int *)(a1 + 12);
            if (v365) {
              float v120 = (float)v365;
            }
            else {
              float v120 = 1.0;
            }
            if ((float)v365 <= (float)((int)v119 >> 1)) {
              float v121 = v120;
            }
            else {
              float v121 = (float)((int)v119 >> 1);
            }
            unint64_t v122 = (unint64_t)v121;
            vDSP_Length v365 = (unint64_t)v121;
            double v123 = (float *)(*(void *)(a1 + 280) + 4 * (unint64_t)v121);
            float v124 = quadratic_interpolation_dx((const float (*)[3])(v123 - 1));
            float v125 = *v123 + (float)(v124 * (float)(*(v123 - 1) - v123[1])) * -0.25;
            *(float *)&uint64_t __C = v125;
            float v126 = (float)((float)(v124 + (float)v122) * (float)*(unsigned int *)(a1 + 60)) / (float)v119;
            if (vabds_f32(*(float *)(a1 + 680), v126) < 3.0 && *((float *)&__C + 1) * 0.95 < v125) {
              float v118 = v126;
            }
            double v127 = *(const DSPComplex **)(a1 + 288);
            if (SHIDWORD(__N) < (int)v119)
            {
              uint64_t v128 = 4 * SHIDWORD(__N);
              uint64_t v129 = v119 - SHIDWORD(__N);
              do
              {
                *(float *)((char *)&v127->real + v128) = *(&v127->real + v129);
                v128 += 4;
                --v129;
              }
              while (v129);
            }
            if ((int)v119 >= 0) {
              int v130 = v119;
            }
            else {
              int v130 = v119 + 1;
            }
            vDSP_ctoz(v127, 2, (const DSPSplitComplex *)(a1 + 264), 1, (uint64_t)v130 >> 1);
            vDSP_fft_zrip(v13, (const DSPSplitComplex *)(a1 + 264), 1, *(int *)(a1 + 16), 1);
            long long v131 = *(const float **)(a1 + 264);
            unsigned int v132 = *(const float **)(a1 + 272);
            int v133 = *(_DWORD *)(a1 + 12) / 2;
            v131[v133] = *v132;
            v132[v133] = 0.0;
            *unsigned int v132 = 0.0;
            vDSP_vabs(v131, 1, *(float **)(a1 + 288), 1, v133 + 1);
            uint64_t v134 = *(int *)(a1 + 328);
            int v135 = *(_DWORD *)(a1 + 332);
            double v136 = *(float **)(a1 + 320);
            if ((int)v134 <= v135)
            {
              uint64_t v140 = 0;
              uint64_t v137 = (v135 - v134 + 1);
              uint64_t v141 = *(void *)(a1 + 288) + 4 * v134;
              do
              {
                v136[v140] = *(float *)(v141 + 4 * v140);
                ++v140;
              }
              while (v137 != v140);
              float v139 = *v136;
              if (v137)
              {
                uint64_t v142 = 0;
                int v138 = 0;
                do
                {
                  if (v139 < v136[v142])
                  {
                    int v138 = v142;
                    float v139 = v136[v142];
                  }
                  ++v142;
                }
                while (v137 != v142);
                char v143 = 0;
                goto LABEL_155;
              }
              int v138 = 0;
            }
            else
            {
              LODWORD(v137) = 0;
              int v138 = 0;
              float v139 = *v136;
            }
            char v143 = 1;
LABEL_155:
            float v144 = v17 * 7.0;
            *((float *)&__C + 1) = v139;
            double v145 = *(float **)(a1 + 312);
            float v146 = 1.0 / v145[v138];
            if (v146 < 90.0) {
              float v146 = 90.0;
            }
            int v147 = *(_DWORD *)(a1 + 60);
            if (v147 >= 0) {
              int v148 = *(_DWORD *)(a1 + 60);
            }
            else {
              int v148 = v147 + 1;
            }
            int v149 = v148 >> 1;
            float v150 = (float)v149;
            if (v146 >= (float)v149) {
              float v146 = (float)v149;
            }
            *((float *)&v364 + 1) = v146;
            tight_CFIndex idx = fun_get_tight_idx(v145, v137, v138);
            unsigned int v152 = (v138 - tight_idx) & ~((v138 - tight_idx) >> 31);
            int v153 = tight_idx + v138;
            if (tight_idx + v138 >= (int)v137) {
              int v153 = v137;
            }
            BOOL v154 = __OFSUB__(v153, v152);
            int v155 = v153 - v152;
            if (v155 < 0 == v154) {
              bzero(&v136[v152], 4 * v155 + 4);
            }
            float v156 = *v136;
            if (v143)
            {
              int v157 = 0;
            }
            else
            {
              uint64_t v158 = 0;
              int v157 = 0;
              do
              {
                if (v156 < v136[v158])
                {
                  int v157 = v158;
                  float v156 = v136[v158];
                }
                ++v158;
              }
              while (v137 != v158);
            }
            double v159 = v144 + 0.5;
            *((float *)&__C + 1) = v156;
            float v160 = (float)(v139 - v156) / v139;
            BOOL v161 = v160 > 0.5 || v160 <= 0.0;
            float v162 = v160 + v160;
            if (v161) {
              float v162 = 1.0;
            }
            if (v160 >= 0.0) {
              float v163 = v162;
            }
            else {
              float v163 = 0.0;
            }
            if (v139 == 0.0) {
              float v163 = 1.0;
            }
            float v339 = v163;
            float v164 = 1.0 / v145[v157];
            if (v164 < 90.0) {
              float v164 = 90.0;
            }
            if (v164 >= v150) {
              float v164 = v150;
            }
            *(float *)&unint64_t v364 = v164;
            int v165 = fun_get_tight_idx(v145, v137, v157);
            unsigned int v166 = (v157 - v165) & ~((v157 - v165) >> 31);
            int v167 = v165 + v157;
            if (v165 + v157 >= (int)v137) {
              int v167 = v137;
            }
            BOOL v154 = __OFSUB__(v167, v166);
            int v168 = v167 - v166;
            if (v168 < 0 == v154) {
              bzero(&v136[v166], 4 * v168 + 4);
            }
            int v342 = (int)v159;
            float v169 = *v136;
            if (v143)
            {
              int v170 = 0;
            }
            else
            {
              uint64_t v171 = 0;
              int v170 = 0;
              do
              {
                if (v169 < v136[v171])
                {
                  int v170 = v171;
                  float v169 = v136[v171];
                }
                ++v171;
              }
              while (v137 != v171);
            }
            uint64_t v172 = 0;
            float v346 = (float)(v91 * (float)v85) / (float)__Ab;
            *((float *)&__C + 1) = v169;
            float v173 = 1.0 / v145[v170];
            if (v173 < 90.0) {
              float v173 = 90.0;
            }
            if (v173 >= v150) {
              float v173 = v150;
            }
            float v363 = v173;
            v369[0] = (char *)&v364 + 4;
            v369[1] = &v364;
            int v174 = *(_DWORD *)(a1 + 12);
            float v175 = (float)v174;
            float v176 = (float)v147;
            v369[2] = &v363;
            double v177 = *(float **)(a1 + 280);
            do
            {
              double v178 = (float *)v369[v172];
              float v179 = (float)(*v178 * v175) / v176;
              double v180 = (float)(v179 + 2.0) + 0.5;
              uint64_t v181 = v180;
              uint64_t v182 = (float)(v179 + -2.0);
              if (v182 >= v181)
              {
                unsigned int v184 = v180;
              }
              else
              {
                float v183 = v177[v181];
                unsigned int v184 = v180;
                do
                {
                  if (v177[v182] > v183)
                  {
                    float v183 = v177[v182];
                    unsigned int v184 = v182;
                  }
                  ++v182;
                }
                while (v181 != v182);
              }
              float *v178 = (float)((float)(quadratic_interpolation_dx((const float (*)[3])&v177[v184 - 1]) + (float)v184)
                            * v176)
                    / v175;
              ++v172;
            }
            while (v172 != 3);
            for (int i = 1; i != 30; ++i)
            {
              float v186 = v118 / (float)i;
              float v187 = vabds_f32(*((float *)&v364 + 1), v186);
              BOOL v188 = v187 < 20.0;
              if (*((float *)&v364 + 1) <= 1000.0) {
                BOOL v188 = 0;
              }
              if (v187 < 6.0 || v188)
              {
                *((float *)&v364 + 1) = v118 / (float)i;
                goto LABEL_219;
              }
            }
            float v186 = *((float *)&v364 + 1);
LABEL_219:
            for (int j = 1; j != 30; ++j)
            {
              float v191 = v118 / (float)j;
              float v192 = vabds_f32(*(float *)&v364, v191);
              BOOL v193 = v192 < 20.0;
              if (*(float *)&v364 <= 1000.0) {
                BOOL v193 = 0;
              }
              if (v192 < 6.0 || v193)
              {
                *(float *)&unint64_t v364 = v118 / (float)j;
                goto LABEL_229;
              }
            }
            float v191 = *(float *)&v364;
LABEL_229:
            for (int k = 1; k != 30; ++k)
            {
              float v196 = v118 / (float)k;
              float v197 = vabds_f32(v363, v196);
              BOOL v198 = v197 < 20.0;
              if (v363 <= 1000.0) {
                BOOL v198 = 0;
              }
              if (v197 < 6.0 || v198)
              {
                float v363 = v118 / (float)k;
                goto LABEL_239;
              }
            }
            float v196 = v363;
LABEL_239:
            int v200 = HIDWORD(__N);
            fun_signal_noise_ratio(v60, v177, SHIDWORD(__N), v186, v147, v346, &v362);
            fun_signal_noise_ratio(v60, v177, v200, v191, v147, v346, (float *)&v361 + 1);
            fun_signal_noise_ratio(v60, v177, v200, v196, v147, v346, (float *)&v361);
            fun_signal_noise_ratio(v60, v177, v200, v118, v147, v346, (float *)&v360 + 1);
            fun_signal_correlation(v60, v177, v200, v186, v147, (float *)&v360);
            fun_signal_correlation(v60, v177, v200, v191, v147, (float *)&v359 + 1);
            fun_signal_correlation(v60, v177, v200, v196, v147, (float *)&v359);
            fun_signal_correlation(v60, v177, v200, v118, v147, (float *)&v358);
            uint64_t v201 = 0;
            *(float *)v370 = v118;
            *(float *)&v370[1] = v186;
            v369[0] = &v355;
            v369[1] = &v357;
            v369[2] = (char *)&v356 + 4;
            v369[3] = &v356;
            *(float *)&v370[2] = v191;
            *(float *)&v370[3] = v196;
            do
            {
              *(float *)v369[v201] = quadratic_interpolation_y((const float (*)[3])&v177[((float)((float)(*(float *)&v370[v201] * v175) / v176) + 0.5)
                                                                                       - 1]);
              ++v201;
            }
            while (v201 != 4);
            if (v174 >= -1)
            {
              if (v174 >= 0) {
                int v202 = v174;
              }
              else {
                int v202 = v174 + 1;
              }
              uint64_t v203 = ((v202 >> 1) + 1);
              long long v204 = v177;
              do
              {
                float v205 = *v204;
                if (*v204 < 0.00001) {
                  float v205 = 0.00001;
                }
                *v204++ = v205;
                --v203;
              }
              while (v203);
            }
            vvlogf(*(float **)(a1 + 288), v177, (const int *)&__N + 1);
            fun_get_histogram(*(const float **)(a1 + 288), SHIDWORD(__N), *(_DWORD *)(a1 + 336), *(int **)(a1 + 352), *(float **)(a1 + 344));
            uint64_t v206 = *(unsigned int *)(a1 + 336);
            float v207 = 0.0;
            float v347 = 0.0;
            if ((int)v206 >= 1)
            {
              int v208 = 0;
              uint64_t v210 = *(float **)(a1 + 344);
              long long v209 = *(int **)(a1 + 352);
              int v211 = v209;
              uint64_t v212 = *(unsigned int *)(a1 + 336);
              do
              {
                int v213 = *v211++;
                v208 += v213;
                --v212;
              }
              while (v212);
              int v214 = 0;
              while (1)
              {
                int v215 = *v209++;
                v214 += v215;
                if ((float)(*(float *)(a1 + 48) * (float)v208) <= (float)v214) {
                  break;
                }
                ++v210;
                if (!--v206)
                {
                  float v216 = 0.0;
                  goto LABEL_257;
                }
              }
              float v216 = *v210;
LABEL_257:
              float v347 = v216;
            }
            float v217 = *(float *)(a1 + 572);
            float v218 = *((float *)&v364 + 1);
            if (vabds_f32(v217, *((float *)&v364 + 1)) < 3.0) {
              float v207 = 0.2;
            }
            float v344 = v362;
            float v348 = *((float *)&v360 + 1);
            if ((float)(v362 + v207) < *((float *)&v360 + 1)) {
              goto LABEL_264;
            }
            float v219 = v357;
            float v220 = expf(v347);
            if (v220 <= (float)(v355 * 0.02)) {
              float v220 = v355 * 0.02;
            }
            if (v219 >= v220) {
              BOOL v221 = (float)(fabsf(v118 - (float)(roundf(v118 / v218) * v218)) / v218) >= 0.02;
            }
            else {
LABEL_264:
            }
              BOOL v221 = 1;
            float v222 = *(float *)&v364;
            float v223 = 0.2;
            if (vabds_f32(v217, *(float *)&v364) >= 3.0) {
              float v223 = 0.0;
            }
            float v345 = *((float *)&v361 + 1);
            if ((float)(*((float *)&v361 + 1) + v223) < v348) {
              goto LABEL_272;
            }
            float v224 = *((float *)&v356 + 1);
            float v225 = expf(v347);
            if (v225 <= (float)(v355 * 0.02)) {
              float v225 = v355 * 0.02;
            }
            if (v224 >= v225) {
              BOOL v226 = (float)(fabsf(v118 - (float)(roundf(v118 / v222) * v222)) / v222) >= 0.02;
            }
            else {
LABEL_272:
            }
              BOOL v226 = 1;
            LODWORD(v227) = v361;
            float v228 = v363;
            float v229 = 0.2;
            if (vabds_f32(v217, v363) >= 3.0) {
              float v229 = 0.0;
            }
            if ((float)(*(float *)&v361 + v229) < v348) {
              goto LABEL_280;
            }
            float v230 = *(float *)&v356;
            float v231 = expf(v347);
            if (v231 <= (float)(v355 * 0.02)) {
              float v231 = v355 * 0.02;
            }
            if (v230 >= v231)
            {
              double v267 = (float)(fabsf(v118 - (float)(roundf(v118 / v228) * v228)) / v228);
              float v232 = 0.0;
              if (v221) {
                float v233 = 0.0;
              }
              else {
                float v233 = v218;
              }
              if (!v226) {
                float v232 = v222;
              }
              if (v267 < 0.02)
              {
LABEL_286:
                float v234 = 0.0;
                if (fabs(v233 + -111.1) <= 1.0) {
                  float v233 = 0.0;
                }
                double v235 = fabs(v233 + -111.1);
                if (v235 > 1.0) {
                  float v236 = v232;
                }
                else {
                  float v236 = 0.0;
                }
                unint64_t v364 = __PAIR64__(LODWORD(v233), LODWORD(v236));
                if (v235 > 1.0) {
                  float v237 = v228;
                }
                else {
                  float v237 = 0.0;
                }
                float v363 = v237;
                if (v236 <= v237) {
                  float v238 = v237;
                }
                else {
                  float v238 = v236;
                }
                if (v233 <= v238)
                {
                  BOOL v240 = 0;
                }
                else
                {
                  float v239 = v345;
                  if (v345 <= v227) {
                    float v239 = v227;
                  }
                  if (vabds_f32(v217, v233) >= 3.0) {
                    float v234 = 0.2;
                  }
                  BOOL v240 = v344 > (float)(v239 + v234);
                }
                if (v233 <= v237) {
                  float v241 = v237;
                }
                else {
                  float v241 = v233;
                }
                if (v236 <= v241)
                {
                  BOOL v244 = 0;
                }
                else
                {
                  float v242 = v344;
                  if (v344 <= v227) {
                    float v242 = v227;
                  }
                  float v243 = 0.0;
                  if (vabds_f32(v217, v236) >= 3.0) {
                    float v243 = 0.2;
                  }
                  BOOL v244 = v345 > (float)(v242 + v243);
                }
                if (v233 <= v236) {
                  float v245 = v236;
                }
                else {
                  float v245 = v233;
                }
                if (v237 <= v245)
                {
                  BOOL v248 = 0;
                }
                else
                {
                  float v246 = v344;
                  if (v344 <= v345) {
                    float v246 = v345;
                  }
                  float v247 = 0.0;
                  if (vabds_f32(v217, v237) >= 3.0) {
                    float v247 = 0.2;
                  }
                  BOOL v248 = v227 > (float)(v246 + v247);
                }
                if (v233 >= v236
                  || (float v249 = vabds_f32(v217, v236), v339 >= flt_2469EDF88[v249 < 3.0])
                  || *((float *)&v356 + 1) <= (float)(flt_2469EDF90[v249 < 3.0] * v357))
                {
                  BOOL v251 = 0;
                }
                else
                {
                  BOOL v264 = v249 < 3.0;
                  float v250 = 0.0;
                  if (v264) {
                    float v250 = 0.5;
                  }
                  BOOL v251 = (float)(v345 + v250) > v344;
                }
                if (v236 >= v237
                  || (float v252 = vabds_f32(v217, v237), v339 >= flt_2469EDF88[v252 < 3.0])
                  || *(float *)&v356 <= (float)(flt_2469EDF90[v252 < 3.0] * *((float *)&v356 + 1)))
                {
                  BOOL v254 = 0;
                }
                else
                {
                  BOOL v264 = v252 < 3.0;
                  float v253 = 0.0;
                  if (v264) {
                    float v253 = 0.5;
                  }
                  BOOL v254 = (float)(v227 + v253) > v345;
                }
                if (v237 == 0.0 && v233 == 0.0 && v236 == 0.0)
                {
                  unint64_t v353 = __PAIR64__(v358, LODWORD(v348));
                  int v255 = HIDWORD(__N);
                  float v256 = v355;
                  double v257 = (float)(v355 * 0.3);
                  float v258 = expf(v347);
                  if (v258 * 1.2 >= v257) {
                    double v257 = v258 * 1.2;
                  }
                  if ((float)(v256 * 0.2) <= v258) {
                    float v259 = v258;
                  }
                  else {
                    float v259 = v256 * 0.2;
                  }
                  int v260 = 31;
                  while (1)
                  {
                    float v236 = v118 / (float)--v260;
                    if (v236 >= 90.0)
                    {
                      v261 = *(float **)(a1 + 280);
                      int v262 = *(_DWORD *)(a1 + 60);
                      fun_get_spectrum_value(v118 / (float)v260, (uint64_t)v261, v255, v262, &v354);
                      float v263 = vabds_f32(v236, v217);
                      BOOL v264 = v263 > 3.0 && v257 < v354;
                      if (v264) {
                        break;
                      }
                      if (v263 <= 3.0 && v354 > v259) {
                        break;
                      }
                    }
                    if (v260 <= 2)
                    {
                      float v236 = v118;
                      goto LABEL_383;
                    }
                  }
                  fun_signal_noise_ratio(v60, v261, v255, v118 / (float)v260, v262, v346, (float *)&v353);
                  fun_signal_correlation(v60, v261, v255, v118 / (float)v260, v262, (float *)&v353 + 1);
LABEL_383:
                  int v270 = 1;
                  while (1)
                  {
                    float v271 = v118 / (float)v270;
                    if (vabds_f32(v236, v271) < 5.0) {
                      break;
                    }
                    if (++v270 == 31)
                    {
                      float v271 = v236;
                      break;
                    }
                  }
                  float v272 = fabsf(v271 + -100.0);
                  float v273 = fabsf(v271 + -120.0);
                  float v274 = *((float *)&v353 + 1);
                  if (v271 < 140.0 && v272 > 1.5 && v273 > 1.5 && *((float *)&v353 + 1) < 0.75)
                  {
                    if (v118 >= 140.0)
                    {
                      float v274 = *(float *)&v358;
                      unint64_t v353 = __PAIR64__(v358, LODWORD(v348));
                      float v271 = v118;
                    }
                    else
                    {
                      float v278 = 0.0;
                      if (*(float *)&v353 >= 0.5)
                      {
                        float v278 = 1.0;
                        if (*(float *)&v353 > 0.5 && *(float *)&v353 <= 0.75) {
                          float v278 = (float)(*(float *)&v353 + -0.5) * 4.0;
                        }
                      }
                      float v274 = *((float *)&v353 + 1) * v278;
                      *(float *)&unint64_t v353 = *(float *)&v353 * v278;
                      *((float *)&v353 + 1) = *((float *)&v353 + 1) * v278;
                    }
                  }
                  v279 = *(float **)(a1 + 280);
                  int v280 = HIDWORD(__N);
                  int v281 = *(_DWORD *)(a1 + 60);
                  fun_signal_correlation(v60, v279, SHIDWORD(__N), v217, v281, (float *)&v351 + 1);
                  fun_signal_noise_ratio(v60, v279, v280, v217, v281, v346, (float *)&v351);
                  if (*(float *)(a1 + 688) > 0.0
                    && vabds_f32(v217, *(float *)(a1 + 684)) < 2.0
                    && *((float *)&v351 + 1) > (float)(v274 * 5.0)
                    && *(int *)(a1 + 564) >= 19)
                  {
                    unint64_t v353 = v351;
                    float v274 = *((float *)&v351 + 1);
                    float v271 = v217;
                  }
                  if ((float)(fabsf(v217 - (float)(roundf(v217 / v271) * v271)) / v271) < 0.02)
                  {
                    BOOL v282 = 0;
                    if (v217 <= (float)(v271 + 10.0) || *((float *)&v351 + 1) <= 0.4)
                    {
LABEL_416:
                      BOOL v283 = (float)(fabsf(v271 - (float)(roundf(v271 / v217) * v217)) / v217) < 0.02
                          && v271 * 0.9 > v217
                          && *((float *)&v351 + 1) > 0.4
                          && *((float *)&v351 + 1) * 0.7 > v274
                          && *(_DWORD *)(a1 + 564) > 9;
                      int v284 = 1;
                      while (2)
                      {
                        float v285 = (float)v284;
                        for (int m = 1; m != 20; ++m)
                        {
                          if (fabsf((float)(v271 * v285) - (float)((float)m * v217)) < 0.1)
                          {
                            float v287 = v271 * v285;
                            goto LABEL_429;
                          }
                        }
                        if (++v284 != 20) {
                          continue;
                        }
                        break;
                      }
                      float v287 = 0.0;
LABEL_429:
                      BOOL v288 = vabds_f32(v287, v118) < 0.01
                          && *((float *)&v351 + 1) > 0.4
                          && vabds_f32(*((float *)&v351 + 1), v274) < 0.05
                          && *(_DWORD *)(a1 + 564) > 9;
                      if (v282 || v283 || v288)
                      {
                        uint64_t v290 = 0;
                        while (vabds_f32(v271, *(float *)(a1 + 576 + v290)) <= 3.0)
                        {
                          v290 += 4;
                          if (v290 == 32)
                          {
                            float v289 = v271;
                            if (!v288) {
                              goto LABEL_442;
                            }
                            break;
                          }
                        }
                        float v274 = *((float *)&v351 + 1);
                        HIDWORD(v353) = HIDWORD(v351);
                        float v289 = v217;
                      }
                      else
                      {
                        float v289 = v271;
                      }
LABEL_442:
                      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 580);
                      *(void *)(a1 + 592) = *(void *)(a1 + 596);
                      *(_DWORD *)(a1 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(a1 + 604);
                      *(float *)(a1 + 604) = v271;
                      memmove((void *)(a1 + 608), (const void *)(a1 + 612), 0x44uLL);
                      *(float *)(a1 + 676) = v271;
                      if (v289 <= 90.0 || fabsf(v289 + -5333.0) <= 4.0)
                      {
                        if (v217 <= 90.0 || fabsf(v217 + -5333.0) <= 4.0)
                        {
                          unint64_t v353 = 0;
                          float v274 = 0.0;
                          float v289 = 120.0;
                        }
                        else
                        {
                          float v274 = *((float *)&v351 + 1);
                          unint64_t v353 = v351;
                          float v289 = v217;
                        }
                      }
                      BOOL v291 = *(_DWORD *)(a5 + 28) != 1 && v340;
                      if (v291)
                      {
                        HIDWORD(v353) = 0;
                        float v274 = 0.0;
                      }
                      *(float *)(a5 + 8) = v274;
                      *(float *)a5 = v289;
                      v292 = (_DWORD *)(a5 + 16);
                      fun_dc_ratio(v342, v279, v280, v289, v281, v341, (float *)(a5 + 16), (float)*(int *)(a1 + 56));
                      float v293 = *(float *)a5;
                      fun_signal_correlation2(v60, *(float **)(a1 + 280), v280, *(float *)a5, *(_DWORD *)(a1 + 60), (float *)&v353 + 1);
                      float v294 = *(float *)(a5 + 16);
                      float v295 = 0.0;
                      if (v294 >= 65.0)
                      {
                        float v295 = 1.0;
                        if (v294 > 65.0 && v294 <= 70.0) {
                          float v295 = (float)(v294 + -65.0) / 5.0;
                        }
                      }
                      *(float *)(a5 + 8) = (float)(v295 * *((float *)&v353 + 1))
                                         + (float)((float)(1.0 - v295) * *(float *)(a5 + 8));
                      uint64_t v296 = *(int *)(a1 + 360);
                      *(float *)(a1 + 368 + 4 * v296) = v293;
                      v297 = (float *)(a1 + 440);
                      *(float *)(a1 + 440 + 4 * v296) = data_pulse_diff;
                      v298 = (float *)(a1 + 476);
                      uint64_t v299 = *(int *)(a1 + 364);
                      __int16 v300 = (_DWORD *)(a1 + 476 + 4 * v299);
                      *__int16 v300 = 0;
                      if (*(void *)(a1 + 696)) {
                        *__int16 v300 = *v292;
                      }
                      long long v301 = *(_OWORD *)(a1 + 420);
                      *(_OWORD *)v369 = *(_OWORD *)(a1 + 404);
                      *(_OWORD *)&v369[2] = v301;
                      LODWORD(v369[4]) = *(_DWORD *)(a1 + 436);
                      long long v302 = *(_OWORD *)((char *)&v369[2] + 4);
                      *(_OWORD *)(a1 + 404) = *(_OWORD *)((char *)v369 + 4);
                      *(_OWORD *)(a1 + 42pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v302;
                      *(_DWORD *)(a1 + 436) = *(_DWORD *)(a5 + 8);
                      *(_DWORD *)(a1 + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((int)v296 + 1) % 9;
                      *(_DWORD *)(a1 + 364) = ((int)v299 + 1) % 22;
                      int v303 = (*(_DWORD *)(a1 + 564) + 1) % 0xFFFFFFF;
                      *(_DWORD *)(a1 + 564) = v303;
                      if (v303 > 8)
                      {
                        long long v306 = *(_OWORD *)(a1 + 384);
                        *(_OWORD *)v369 = *(_OWORD *)(a1 + 368);
                        *(_OWORD *)&v369[2] = v306;
                        LODWORD(v369[4]) = *(_DWORD *)(a1 + 400);
                        *(float *)(a5 + 4) = fun_median_float((float *)v369, 9);
                        long long v307 = *(_OWORD *)(a1 + 420);
                        *(_OWORD *)v369 = *(_OWORD *)(a1 + 404);
                        *(_OWORD *)&v369[2] = v307;
                        LODWORD(v369[4]) = *(_DWORD *)(a1 + 436);
                        *(_DWORD *)(a5 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = 0;
                        float v305 = 0.0;
                        if (!v291)
                        {
                          float v305 = fun_median_float((float *)v369, 9);
                          *(float *)(a5 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v305;
                        }
                        float v308 = *(float *)(a1 + 572);
                        if (v308 <= *(float *)a5) {
                          float v309 = *(float *)a5;
                        }
                        else {
                          float v309 = *(float *)(a1 + 572);
                        }
                        if (v308 >= *(float *)a5) {
                          float v308 = *(float *)a5;
                        }
                        if ((float)(fabsf(v309 - (float)(roundf(v309 / v308) * v308)) / v308) >= 0.02
                          && *(float *)(a5 + 8) > 0.7)
                        {
                          *(_DWORD *)(a5 + 4) = *(_DWORD *)a5;
                          *(_DWORD *)(a1 + 564) = 0;
                          *(_DWORD *)(a1 + 6Matrix<double>::~Matrix((uint64_t)this + 88) = 0;
                        }
                        uint64_t v310 = 0;
                        LOBYTE(v304) = 1;
                        do
                        {
                          BOOL v304 = v304 && *(float *)(a1 + v310 + 408) > *(float *)(a1 + v310 + 404);
                          v310 += 4;
                        }
                        while (v310 != 32);
                        uint64_t v311 = 0;
                        float data_pulse_diff = *v297;
                        do
                        {
                          if (data_pulse_diff < v297[v311]) {
                            float data_pulse_diff = v297[v311];
                          }
                          ++v311;
                        }
                        while (v311 != 9);
                        int v303 = *(_DWORD *)(a1 + 564);
                        if (v303 > 21)
                        {
                          uint64_t v313 = 0;
                          float v312 = *v298;
                          do
                          {
                            if (v312 < v298[v313]) {
                              float v312 = v298[v313];
                            }
                            ++v313;
                          }
                          while (v313 != 22);
LABEL_486:
                          *(float *)(a5 + Matrix<double>::~Matrix((uint64_t)this + 24) = v312;
                          float v314 = 0.0;
                          if (data_pulse_diff >= v343)
                          {
                            BOOL v315 = v343 >= data_pulse_diff || data_pulse_diff > v338;
                            float v314 = (float)(data_pulse_diff - v343) / (float)(v338 - v343);
                            if (v315) {
                              float v314 = 1.0;
                            }
                          }
                          float v316 = *(float *)(a5 + 8);
                          if (v316 < 0.8 && *(_DWORD *)(a5 + 28) != 1)
                          {
                            float v317 = 1.0 - v314;
                            float v316 = v316 * v317;
                            float v305 = v317 * v305;
                            *(float *)(a5 + 8) = v316;
                            *(float *)(a5 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v305;
                          }
                          *(float *)(a1 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v118;
                          float v318 = *(float *)(a5 + 4);
                          *(float *)(a1 + 572) = v318;
                          *(float *)(a1 + 704) = v305;
                          if (v312 >= 30.0)
                          {
                            if (v312 <= 70.0) {
                              float v319 = (float)(v312 * 0.0067) + 0.1333;
                            }
                            else {
                              float v319 = 0.6;
                            }
                          }
                          else
                          {
                            float v319 = 0.3333;
                          }
                          float v320 = v319 * 0.6;
                          if (!v304) {
                            float v320 = v319;
                          }
                          float v321 = (float)(v305 + -0.5) * 10.0;
                          if (v321 >= 0.0) {
                            float v322 = v321 + 65.0;
                          }
                          else {
                            float v322 = 65.0;
                          }
                          int v323 = *(_DWORD *)(a5 + 28);
                          *(_DWORD *)(a1 + 692) = v323;
                          if (v323 != 3)
                          {
                            if (v323 == 1)
                            {
                              float v326 = v320 + -0.2;
                              float v327 = 0.3333;
                              if (v326 >= 0.3333) {
                                float v327 = v326;
                              }
                              if (v305 < 0.1533 || (v305 < v327 ? (BOOL v328 = v312 < v322) : (BOOL v328 = 0), !v328))
                              {
                                int v324 = 0;
                                int v325 = 3;
                                if (v312 < v322 && v305 >= 0.1533)
                                {
                                  int v324 = 1;
                                  goto LABEL_529;
                                }
LABEL_528:
                                *(_DWORD *)(a5 + 28) = v325;
LABEL_529:
                                if (vabds_f32(*(float *)(a1 + 608), v271) <= 0.5)
                                {
                                  unint64_t v330 = 0;
                                  do
                                  {
                                    unint64_t v331 = v330;
                                    if (v330 == 16) {
                                      break;
                                    }
                                    float v332 = vabds_f32(*(float *)(a1 + 612 + 4 * v330++), v271);
                                  }
                                  while (v332 <= 0.5);
                                  BOOL v329 = v331 > 0xF;
                                }
                                else
                                {
                                  BOOL v329 = 0;
                                }
                                BOOL v333 = v305 <= 0.8 || v303 <= 8;
                                int v334 = v324 & v329;
                                if (!v333) {
                                  int v334 = 1;
                                }
                                if (v334 == 1 && v323 == 1)
                                {
                                  *(float *)(a1 + 684) = v318;
                                  *(float *)(a1 + 6Matrix<double>::~Matrix((uint64_t)this + 88) = v305;
                                }
                                if (!*(_DWORD *)(a1 + 568)) {
                                  *(_DWORD *)(a1 + 568) = 1;
                                }
                                unint64_t v336 = *(void *)(a1 + 696);
                                if (v336 >= 4) {
                                  LOBYTE(v3Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
                                }
                                BOOL v337 = v318 == 120.0;
                                if (v305 != 0.0) {
                                  BOOL v337 = 0;
                                }
                                if ((v324 & 1) != 0 || v337) {
                                  *(_DWORD *)(a5 + 28) = 0;
                                }
                                uint64_t result = 0;
                                *(void *)(a1 + 696) = v336 + 1;
                                return result;
                              }
                            }
                            else if (!v323)
                            {
                              if (v305 <= v320 && (v305 <= 0.5 || v316 <= 0.5) || v312 >= v322)
                              {
                                int v324 = 0;
                                int v325 = 3;
                                if (v312 < v322 && v305 >= 0.1533) {
                                  goto LABEL_529;
                                }
                                goto LABEL_528;
                              }
LABEL_518:
                              int v325 = 1;
                              int v324 = 1;
                              goto LABEL_528;
                            }
                            int v325 = 0;
                            int v324 = 0;
                            goto LABEL_528;
                          }
                          int v324 = 0;
                          if (v312 >= (float)(v322 + -6.0) || v305 <= 0.2433) {
                            goto LABEL_529;
                          }
                          if (v305 <= v320)
                          {
                            int v325 = v316 > 0.5 && v305 > 0.8;
                            int v324 = v325;
                            goto LABEL_528;
                          }
                          goto LABEL_518;
                        }
                      }
                      else
                      {
                        BOOL v304 = 0;
                        *(_DWORD *)(a5 + 4) = *(_DWORD *)a5;
                        float v305 = *(float *)(a5 + 8);
                        *(float *)(a5 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v305;
                      }
                      float v312 = *(float *)v292;
                      goto LABEL_486;
                    }
                    if ((float)(*(float *)&v351 + 1.5) > *(float *)&v353)
                    {
                      BOOL v282 = *(_DWORD *)(a1 + 564) > 9;
                      goto LABEL_416;
                    }
                  }
                  BOOL v282 = 0;
                  goto LABEL_416;
                }
                if (v233 <= 0.0 || v236 <= 0.0 || v237 <= 0.0)
                {
                  if (v233 <= 0.0)
                  {
                    char v269 = v236 <= 0.0 || v254;
                    if (v269) {
                      goto LABEL_381;
                    }
                    goto LABEL_382;
                  }
                }
                else
                {
                  int v266 = v240 || v244;
                  if ((v266 | v248))
                  {
                    if (!v240)
                    {
                      if (!v266)
                      {
LABEL_381:
                        unint64_t v353 = __PAIR64__(v359, LODWORD(v227));
                        float v236 = v237;
                        goto LABEL_383;
                      }
LABEL_382:
                      unint64_t v353 = __PAIR64__(HIDWORD(v359), LODWORD(v345));
                      goto LABEL_383;
                    }
LABEL_376:
                    unint64_t v353 = __PAIR64__(v360, LODWORD(v344));
                    float v236 = v233;
                    goto LABEL_383;
                  }
                }
                if (v251) {
                  goto LABEL_382;
                }
                goto LABEL_376;
              }
            }
            else
            {
LABEL_280:
              float v232 = 0.0;
              if (v221) {
                float v233 = 0.0;
              }
              else {
                float v233 = v218;
              }
              if (!v226) {
                float v232 = v222;
              }
            }
            float v228 = 0.0;
            goto LABEL_286;
          }
          float64x2_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            float64x2_t v31 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v31;
          }
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            flicker_data_processing(a1, v31);
          }
        }
      }
    }
  }
  return 1;
}

float quadratic_interpolation(const float (*a1)[3], float *a2, float *a3)
{
  float v6 = quadratic_interpolation_dx(a1);
  *a2 = v6;
  float result = (float)(*a1)[1] + (float)(v6 * (float)((*a1)[0] - (float)(*a1)[2])) * -0.25;
  *a3 = result;
  return result;
}

uint64_t find_near_peak(const float *a1, float a2, unsigned int a3)
{
  uint64_t v3 = ((float)((float)a3 + a2) + 0.5);
  uint64_t v4 = (float)(a2 - (float)a3);
  if (v4 >= v3) {
    return ((float)((float)a3 + a2) + 0.5);
  }
  float v5 = a1[v3];
  LODWORD(v6) = v3;
  do
  {
    if (a1[v4] <= v5)
    {
      uint64_t v6 = v6;
    }
    else
    {
      float v5 = a1[v4];
      uint64_t v6 = v4;
    }
    ++v4;
  }
  while (v3 != v4);
  return v6;
}

float quadratic_interpolation_dx(const float (*a1)[3])
{
  float v1 = (*a1)[2];
  float v2 = (float)((*a1)[0] + (float)((float)(*a1)[1] * -2.0)) + v1;
  float result = 0.0;
  if (v2 != 0.0)
  {
    float v4 = (float)((*a1)[0] - v1) * 0.5 / v2;
    float result = 0.5;
    if (v4 <= 0.5)
    {
      float result = (float)((*a1)[0] - v1) * 0.5 / v2;
      if (v4 < -0.5) {
        return -0.5;
      }
    }
  }
  return result;
}

float quadratic_interpolation_y(const float (*a1)[3])
{
  return (float)(*a1)[1] + (float)(quadratic_interpolation_dx(a1) * (float)((*a1)[0] - (float)(*a1)[2])) * -0.25;
}

float32x4_t fun_get_calibration_param(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a1)
  {
    if (a3)
    {
      float32x4_t v3 = (float32x4_t)vdupq_n_s32(0x2F800000u);
      *(float32x4_t *)a3 = vmulq_f32(vcvtq_f32_u32(*(uint32x4_t *)(a1 + 16)), v3);
      *(float *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = (float)*(unsigned int *)(a1 + 40) * 2.3283e-10;
      *(float32x2_t *)(a3 + 16) = vmul_f32(vcvt_f32_u32(*(uint32x2_t *)(a1 + 32)), *(float32x2_t *)v3.f32);
      v4.i64[0] = *(void *)(a2 + 12);
      *(int32x2_t *)v3.f32 = vadd_s32(*(int32x2_t *)(a1 + 76), *(int32x2_t *)v4.i8);
      v4.i64[1] = v4.i64[0];
      *(float32x4_t *)(a3 + 28) = vcvtq_f32_s32(vaddq_s32(*(int32x4_t *)(a1 + 44), v4));
      *(float32x4_t *)(a3 + 44) = vcvtq_f32_s32(vaddq_s32(*(int32x4_t *)(a1 + 60), v4));
      *(float32x2_t *)(a3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = vcvt_f32_s32(*(int32x2_t *)v3.f32);
      v3.i64[0] = 0x3A0000003A000000;
      v3.i64[1] = 0x3A0000003A000000;
      *(float32x4_t *)(a3 + 68) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(a1 + 86))), v3);
      float32x4_t result = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(a1 + 94))), v3);
      *(float32x4_t *)(a3 + 84) = result;
    }
  }
  return result;
}

float getGainAndOffset(uint64_t a1, int a2, float *a3, float *a4, _DWORD *a5, _DWORD *a6)
{
  if (a1)
  {
    switch(a2)
    {
      case 0:
        *a4 = 1.0;
        *a3 = 1.0;
        *a5 = *(_DWORD *)(a1 + 28);
        uint64_t v6 = (float *)(a1 + 32);
        break;
      case 1:
        *a4 = *(float *)(a1 + 72);
        *a3 = *(float *)(a1 + 68);
        *a5 = *(_DWORD *)(a1 + 36);
        uint64_t v6 = (float *)(a1 + 40);
        break;
      case 3:
        *a4 = *(float *)(a1 + 72) * *(float *)(a1 + 80);
        *a3 = *(float *)(a1 + 68) * *(float *)(a1 + 76);
        *a5 = *(_DWORD *)(a1 + 44);
        uint64_t v6 = (float *)(a1 + 48);
        break;
      case 7:
        *a4 = (float)(*(float *)(a1 + 72) * *(float *)(a1 + 80)) * *(float *)(a1 + 88);
        *a3 = (float)(*(float *)(a1 + 68) * *(float *)(a1 + 76)) * *(float *)(a1 + 84);
        *a5 = *(_DWORD *)(a1 + 52);
        uint64_t v6 = (float *)(a1 + 56);
        break;
      default:
        *a4 = (float)((float)(*(float *)(a1 + 72) * *(float *)(a1 + 80)) * *(float *)(a1 + 88)) * *(float *)(a1 + 96);
        *a3 = (float)((float)(*(float *)(a1 + 68) * *(float *)(a1 + 76)) * *(float *)(a1 + 84)) * *(float *)(a1 + 92);
        *a5 = *(_DWORD *)(a1 + 60);
        uint64_t v6 = (float *)(a1 + 64);
        break;
    }
    float result = *v6;
    *a6 = *(_DWORD *)v6;
  }
  return result;
}

float fun_get_lux(float *a1, int a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  if (!a1) {
    return 0.0;
  }
  float v8 = -(float)(a8 - (float)(a3 * 8388600.0));
  float v9 = -(float)(a7 - (float)(a4 * 8388600.0));
  if (a2 == 1)
  {
    int32x2_t v10 = a1 + 1;
  }
  else if (v8 == 0.0 || (float)(v9 / v8) >= a1[4])
  {
    int32x2_t v10 = a1 + 6;
    a1 += 5;
  }
  else
  {
    int32x2_t v10 = a1 + 3;
    a1 += 2;
  }
  return (float)((float)-(float)(*v10 * v9) * a5) + (float)((float)(v8 * *a1) * a6);
}

uint64_t jasperDetectC(float *a1, float *a2, unsigned int a3, char a4, uint64_t a5, uint64_t a6, BOOL a7, float a8, float a9, float a10, float a11)
{
  uint64_t v21 = 0xFFFFFFFFLL;
  int v22 = H16ISP::H16ISPGetCFPreferenceNumber(@"FlickerDetectorAlphaNumerator", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
  int v23 = H16ISP::H16ISPGetCFPreferenceNumber(@"FlickerDetectorAlphaDenominator", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
  unsigned int v24 = H16ISP::H16ISPGetCFPreferenceNumber(@"FlickerDetectorIsGrimaldi", @"com.apple.coremedia", (const __CFString *)2);
  float v26 = 0.8;
  if (v22 != -1 && v23 != -1) {
    float v26 = (float)v22 / (float)v23;
  }
  *(_DWORD *)(a6 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -1;
  BOOL v27 = v24 != 0;
  if (v24 == 2) {
    BOOL v27 = a7;
  }
  if (a3 >= 0x7D0 && a1 && a2 && a5 && a6)
  {
    uint64_t v28 = a5 + 8000;
    float v29 = a11 * 1.05;
    float v30 = a10 * 1.1;
    if (a4)
    {
      LODWORD(v31) = *(_DWORD *)(a5 + 16000);
    }
    else
    {
      uint64_t v31 = 2000;
      float v32 = (float *)a5;
      do
      {
        float v33 = *a2++;
        *float v32 = (float)(v33 - v29) * a9;
        float v34 = *a1++;
        v32[2000] = (float)(v34 - v30) * a8;
        ++v32;
        --v31;
      }
      while (v31);
      a3 -= 2000;
      if (!a3) {
        goto LABEL_19;
      }
    }
    float v35 = 1.0 - v26;
    unsigned int v36 = v31;
    unsigned int v37 = a3;
    do
    {
      unsigned int v38 = v36 % 0x7D0;
      float v39 = *a2++;
      *(float *)(a5 + 4 * v38) = (float)((float)(v26 * (float)(v39 - v29)) * a9)
                                 + (float)(*(float *)(a5 + 4 * v38) * v35);
      float v40 = *a1++;
      *(float *)(v28 + 4 * v38) = (float)((float)(v26 * (float)(v40 - v30)) * a8)
                                  + (float)(*(float *)(v28 + 4 * v38) * v35);
      ++v36;
      --v37;
    }
    while (v37);
    LODWORD(v31) = (a3 + v31) % 0x7D0;
LABEL_19:
    uint64_t v41 = 0;
    *(_DWORD *)(a5 + 1600pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v31;
    float v42 = 0.0;
    float v43 = 0.0;
    float v44 = 0.0;
    float v45 = 0.0;
    do
    {
      float v43 = v43 + *(float *)(a5 + v41);
      float v42 = v42 + *(float *)(a5 + v41 + 4268);
      float v45 = v45 + *(float *)(a5 + v41 + 8000);
      float v44 = v44 + *(float *)(a5 + v41 + 12268);
      v41 += 4;
    }
    while (v41 != 2128);
    uint64_t v46 = 0;
    float v47 = 0.0;
    float v48 = 0.0;
    float v49 = 0.0;
    float v50 = 0.0;
    float v51 = 0.0;
    float v52 = 0.0;
    do
    {
      float v53 = *(float *)(a5 + v46 + 2132);
      float v51 = v51 + v53;
      float v47 = v47 + (float)(v53 * v53);
      float v54 = *(float *)(a5 + v46 + 3200);
      float v49 = v49 + v54;
      float v48 = v48 + (float)(v54 * v54);
      float v52 = v52 + *(float *)(a5 + v46 + 10132);
      float v50 = v50 + *(float *)(a5 + v46 + 11200);
      v46 += 4;
    }
    while (v46 != 532);
    uint64_t v55 = 0;
    float v56 = v47;
    float v57 = v48;
    float v58 = v49;
    float v59 = v51;
    do
    {
      float v60 = *(float *)(a5 + v55 + 2664);
      float v59 = v59 + v60;
      float v56 = v56 + (float)(v60 * v60);
      float v61 = *(float *)(a5 + v55 + 3732);
      float v58 = v58 + v61;
      float v57 = v57 + (float)(v61 * v61);
      float v52 = v52 + *(float *)(a5 + v55 + 10664);
      float v50 = v50 + *(float *)(a5 + v55 + 11732);
      v55 += 4;
    }
    while (v55 != 532);
    unint64_t v62 = 0;
    int v63 = 266;
    float v64 = 0.0;
    int v65 = 133;
    float v66 = (float *)a5;
    float v67 = 0.0;
    for (int i = 532; ; ++i)
    {
      *(float *)v25.i32 = v43 + v42;
      float v69 = v45 + v44;
      if (v27)
      {
        float v70 = v45 - v44;
        if ((float)(v45 - v44) < 0.0) {
          float v70 = -(float)(v45 - v44);
        }
        float v71 = v43 - v42;
        if ((float)(v43 - v42) < 0.0) {
          float v71 = -(float)(v43 - v42);
        }
        if (v43 < 0.0
          || v42 < 0.0
          || v45 < 0.0
          || v44 < 0.0
          || (float)((float)(v70 / v69) + (float)(v71 / *(float *)v25.i32)) > 0.125)
        {
          goto LABEL_55;
        }
      }
      float v72 = -(float)(*(float *)v25.i32 - (float)((float)(v59 + v58) * 2.0));
      float v73 = -(float)(v69 - (float)((float)(v52 + v50) * 2.0));
      if (v27)
      {
        float v64 = (float)(v73 / sqrtf(v69)) + (float)(v72 / sqrtf(*(float *)v25.i32));
        if (v64 > v67) {
          goto LABEL_43;
        }
      }
      else if ((float)(v73 - (float)(*(float *)v25.i32 - (float)((float)(v59 + v58) * 2.0))) > v67 || v72 > v67)
      {
LABEL_43:
        *(_DWORD *)a6 = v25.i32[0];
        *(float *)(a6 + 4) = v59;
        *(float *)(a6 + Matrix<double>::~Matrix((uint64_t)this + 24) = v52;
        *(float *)(a6 + 28) = v50;
        *(float *)(a6 + 16) = v51;
        *(float *)(a6 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v69;
        *(float *)(a6 + 8) = v58;
        *(float *)(a6 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v49;
        v75.f32[0] = v59 - v51;
        *(float *)v25.i32 = *(float *)v25.i32 * 0.125;
        v75.f32[1] = v51;
        v76.f32[0] = v56 - v47;
        float32x2_t v77 = (float32x2_t)vdup_lane_s32(v25, 0);
        float32x2_t v78 = vsub_f32(v75, v77);
        v76.f32[1] = v47;
        float32x2_t v79 = (float32x2_t)vdup_n_s32(0x43050000u);
        float32x2_t v80 = vmla_f32(vmul_f32(v75, vneg_f32(v75)), v79, v76);
        float32x2_t v81 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
        float32x2_t v82 = vdiv_f32(vmul_f32(v78, v78), vmaxnm_f32(v80, v81));
        v78.f32[0] = v58 - v49;
        v83.f32[0] = v57 - v48;
        v78.f32[1] = v49;
        float32x2_t v84 = vsub_f32(v78, v77);
        v83.f32[1] = v48;
        int32x2_t v25 = (int32x2_t)vdiv_f32(vmul_f32(v84, v84), vmaxnm_f32(vmla_f32(vmul_f32(v78, vneg_f32(v78)), v79, v83), v81));
        float v85 = v82.f32[1];
        if (v82.f32[0] < v82.f32[1]) {
          float v85 = v82.f32[0];
        }
        if (*(float *)v25.i32 >= *(float *)&v25.i32[1]) {
          float v86 = *(float *)&v25.i32[1];
        }
        else {
          float v86 = *(float *)v25.i32;
        }
        if (v85 >= v86) {
          float v85 = v86;
        }
        *(float *)(a6 + 32) = *(float *)&v25.i32[1] + (float)(*(float *)v25.i32 + vaddv_f32(v82));
        *(float *)(a6 + 36) = v85;
        *(_DWORD *)(a6 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v62;
        if (v73 <= 0.0) {
          float v87 = -0.0;
        }
        else {
          float v87 = v73;
        }
        float v67 = v72 + v87;
        if (v27) {
          float v67 = v64;
        }
      }
LABEL_55:
      if (v62 >= 0x5BC) {
        int v88 = -1468;
      }
      else {
        int v88 = 532;
      }
      unsigned int v89 = v88 + v62;
      if (v62 >= 0x3A5) {
        int v90 = -933;
      }
      else {
        int v90 = 1067;
      }
      if (v62 >= 0x3A5) {
        int v91 = -933;
      }
      else {
        int v91 = 1067;
      }
      unsigned int v92 = v62 + v91;
      int v93 = v62 + v90 - 2000 * ((v90 + i) / 0x7D0u);
      if (v62 >= 0x5BB) {
        int v94 = -1467;
      }
      else {
        int v94 = 533;
      }
      if (v62 >= 0x5BB) {
        int v95 = -1467;
      }
      else {
        int v95 = 533;
      }
      unsigned int v96 = v62 + v95;
      int v97 = v62 + v94 - 2000 * ((v94 + v63) / 0x7D0u);
      int v98 = v62 + v94 - 2000 * ((v94 + v65) / 0x7D0u);
      if (v62 >= 0x4B0) {
        int v99 = -1200;
      }
      else {
        int v99 = 800;
      }
      if (v62 >= 0x4B0) {
        int v100 = -1200;
      }
      else {
        int v100 = 800;
      }
      unsigned int v101 = v62 + v100;
      unsigned int v102 = v97 + 266;
      unsigned int v103 = v62 + v99 - 2000 * ((v99 + v63) / 0x7D0u) + 266;
      float v43 = v43 + (float)(*(float *)(a5 + 4 * v89) - *v66);
      float v42 = v42 + (float)(*(float *)(a5 + 4 * (v93 + 532)) - *(float *)(a5 + 4 * v92));
      float v45 = v45 + (float)(*(float *)(v28 + 4 * v89) - v66[2000]);
      float v104 = *(float *)(a5 + 4 * v102);
      float v44 = v44 + (float)(*(float *)(v28 + 4 * (v93 + 532)) - *(float *)(v28 + 4 * v92));
      float v105 = *(float *)(a5 + 4 * v96);
      float v59 = v59 + (float)(v104 - v105);
      float v56 = v56 + (float)((float)(v104 * v104) - (float)(v105 * v105));
      float v52 = v52 + (float)(*(float *)(v28 + 4 * v102) - *(float *)(v28 + 4 * v96));
      float v106 = *(float *)(a5 + 4 * (v98 + 133));
      float v51 = v51 + (float)(v106 - v105);
      float v107 = (float)(v106 * v106) - (float)(v105 * v105);
      float v108 = *(float *)(a5 + 4 * v103);
      float v109 = *(float *)(a5 + 4 * v101);
      float v47 = v47 + v107;
      float v58 = v58 + (float)(v108 - v109);
      float v57 = v57 + (float)((float)(v108 * v108) - (float)(v109 * v109));
      float v50 = v50 + (float)(*(float *)(v28 + 4 * v103) - *(float *)(v28 + 4 * v101));
      float v110 = *(float *)(a5 + 4 * (v62 + v99 - 2000 * ((v99 + v65) / 0x7D0u) + 133));
      float v49 = v49 + (float)(v110 - v109);
      ++v63;
      ++v65;
      float v48 = v48 + (float)((float)(v110 * v110) - (float)(v109 * v109));
      ++v66;
      if (++v62 == 2000)
      {
        uint64_t v21 = 0;
        *(unsigned char *)(a6 + 44) = a4;
        *(unsigned char *)(a6 + 45) = v27;
        return v21;
      }
    }
  }
  return v21;
}

uint64_t peridotDetectC(float *a1, uint64_t a2, unsigned int a3, unsigned int a4, float *a5, unsigned int a6, uint64_t a7)
{
  if (a3 < 0x506) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a2)
  {
    if (a1)
    {
      if (a5)
      {
        if (a6 >> 3 >= 0x295)
        {
          uint64_t v10 = a7;
          if (a7)
          {
            uint64_t v11 = 0;
            uint64_t v12 = 0;
            int v170 = 0;
            char v171 = 0;
            uint64_t v13 = 0;
            char v14 = 0;
            *(_DWORD *)(a7 + 76) = -1;
            float v15 = a5[1286];
            float v16 = a5[1287];
            float v17 = a5[1288];
            float v18 = a5[1289];
            float v19 = a5[1290];
            float v20 = a5[1291];
            unsigned int v21 = a5[1293];
            float v22 = a5[1292];
            float v23 = a5[1294];
            float v24 = a5[1295];
            float v25 = a5[1296];
            float v26 = a5[1297];
            float v27 = a5[1298];
            float v28 = a5[1299];
            float v136 = a5[1300];
            unsigned int v29 = a5[1301];
            float v30 = a5[1302];
            unsigned int v172 = a5[1303];
            float v31 = a5[1304];
            float v32 = a5[1305];
            float v33 = a5[1306];
            float v34 = a5[1307];
            float v35 = a5[1308];
            float v36 = a5[1309];
            float v109 = a5[1310];
            float v37 = a5[1311];
            unsigned int v38 = a5[1312];
            float v39 = a5[1313];
            float v40 = a5[1314];
            float v41 = a5[1315];
            int v42 = (a4 >> 1) - 1;
            unsigned int v43 = a4 - 1;
            float v44 = a5[1316];
            float v45 = a5[1317];
            unsigned int v46 = a4 >> 2;
            unsigned int v47 = (a4 >> 1) + (a4 >> 2);
            float v48 = a5[1318];
            float v49 = -0.25;
            float v50 = a1;
            float v51 = a5[1319];
            unsigned int v135 = a3;
            int v115 = v42;
            unsigned int v117 = a4;
            unsigned int v111 = v47;
            unsigned int v113 = a4 - 1;
            unsigned int v110 = a4 >> 2;
            while (1)
            {
              float v52 = &a1[(v11 - 1286)];
              if ((int)v11 < 1286) {
                float v52 = &a5[(int)v11];
              }
              float v53 = *v52;
              float v54 = &a5[(int)v11 + 368];
              if ((int)v11 - 918 >= 0) {
                float v54 = &a1[(v11 - 918)];
              }
              float v15 = v15 + (float)(*v54 - v53);
              uint64_t v55 = &a5[(int)v11 + 918];
              if ((int)v11 - 368 >= 0) {
                uint64_t v55 = &a1[(v11 - 368)];
              }
              float v56 = *v55;
              float v57 = &a5[(int)v11 + 1286];
              if ((int)v11 >= 0) {
                float v57 = v50;
              }
              float v16 = v16 + (float)(*v57 - v56);
              float v58 = &a5[(int)v11 + 427];
              if ((int)v11 - 859 >= 0) {
                float v58 = &a1[(v11 - 859)];
              }
              float v59 = *v58;
              float v60 = &a5[(int)v11 + 473];
              if ((int)v11 - 813 >= 0) {
                float v60 = &a1[(v11 - 813)];
              }
              float v17 = v17 + (float)(*v60 - v59);
              float v61 = &a5[(int)v11 + 533];
              if ((int)v11 - 753 >= 0) {
                float v61 = &a1[(v11 - 753)];
              }
              float v62 = *v61;
              int v63 = &a5[(int)v11 + 579];
              if ((int)v11 - 707 >= 0) {
                int v63 = &a1[(v11 - 707)];
              }
              float v18 = v18 + (float)(*v63 - v62);
              float v64 = &a5[(int)v11 + 647];
              if ((int)v11 - 639 >= 0) {
                float v64 = &a1[(v11 - 639)];
              }
              float v65 = *v64;
              float v66 = &a5[(int)v11 + 693];
              if ((int)v11 - 593 >= 0) {
                float v66 = &a1[(v11 - 593)];
              }
              float v19 = v19 + (float)(*v66 - v65);
              float v67 = &a5[(int)v11 + 754];
              if ((int)v11 - 532 >= 0) {
                float v67 = &a1[(v11 - 532)];
              }
              float v68 = *v67;
              float v69 = &a5[(int)v11 + 800];
              if ((int)v11 - 486 >= 0) {
                float v69 = &a1[(v11 - 486)];
              }
              float v20 = v20 + (float)(*v69 - v68);
              float v70 = (float)(v15 + v16) * v49;
              float v71 = (float)((float)((float)(v17 + v18) + v19) + v20) + v70;
              if (v71 > v22)
              {
                char v14 = 1;
                uint64_t v12 = v11;
                float v22 = (float)((float)((float)(v17 + v18) + v19) + v20) + v70;
                unsigned int v21 = v29;
                float v23 = v15;
                float v24 = v16;
                float v25 = v17;
                float v26 = v18;
                float v27 = v19;
                float v28 = v20;
              }
              if (v71 > v30)
              {
                int v170 = v11;
                char v171 = 1;
                float v30 = (float)((float)((float)(v17 + v18) + v19) + v20) + v70;
                unsigned int v172 = v29;
                float v31 = v15;
                float v32 = v16;
                float v33 = v17;
                float v34 = v18;
                float v35 = v19;
                float v36 = v20;
              }
              float v72 = v30;
              if (v29 == v42)
              {
                if (v172 < v46 || v172 >= v47)
                {
                  if (v171)
                  {
                    float v152 = v25;
                    float v155 = v15;
                    float v73 = v23;
                    float v146 = v19;
                    float v149 = v20;
                    float v140 = v17;
                    float v143 = v18;
                    float v137 = v16;
                    float v74 = v24;
                    float v75 = v31;
                    float v164 = v33;
                    float v167 = v32;
                    float v76 = v26;
                    float v77 = v27;
                    float v158 = v35;
                    float v161 = v34;
                    float v78 = v28;
                    float v79 = v36;
                    float v119 = v22;
                    uint64_t v80 = v13;
                    uint64_t v81 = v12;
                    float v82 = calcStd(a1, a5, v170 + 1, v170 + 919, (float)(v31 + v32) / 368.0 * 0.5);
                    float v49 = -0.25;
                    unsigned int v46 = v110;
                    unsigned int v47 = v111;
                    unsigned int v43 = v113;
                    int v42 = v115;
                    uint64_t v12 = v81;
                    uint64_t v13 = v80;
                    a4 = v117;
                    float v22 = v119;
                    float v36 = v79;
                    float v35 = v158;
                    float v34 = v161;
                    float v28 = v78;
                    float v27 = v77;
                    float v33 = v164;
                    float v32 = v167;
                    float v26 = v76;
                    float v31 = v75;
                    float v24 = v74;
                    float v16 = v137;
                    float v17 = v140;
                    float v18 = v143;
                    float v19 = v146;
                    float v15 = v155;
                    float v23 = v73;
                    float v20 = v149;
                    float v25 = v152;
                    a3 = v135;
                    float v51 = v82;
                    float v30 = -3.4028e38;
                    float v37 = v72;
                    unsigned int v38 = v172;
                    float v39 = v31;
                    float v40 = v167;
                    float v41 = v164;
                    float v44 = v161;
                    float v45 = v158;
                    float v48 = v36;
                  }
                  else
                  {
                    float v30 = -3.4028e38;
                    float v37 = v72;
                    unsigned int v38 = v172;
                    float v39 = v31;
                    float v40 = v32;
                    float v41 = v33;
                    float v44 = v34;
                    float v45 = v35;
                    float v48 = v36;
                    float v51 = v109;
                  }
                }
                else
                {
                  float v30 = -3.4028e38;
                }
              }
              if (v29 != v43) {
                goto LABEL_54;
              }
              if (v21 >= v46 && v21 < v47 && v22 >= v37) {
                break;
              }
              float v22 = -3.4028e38;
              BOOL v93 = v37 <= -3.4028e38;
              float v37 = -3.4028e38;
              if (!v93)
              {
                *(float *)(v10 + 4) = v41;
                *(float *)(v10 + 8) = v44;
                *(float *)(v10 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v45;
                *(float *)(v10 + 16) = v48;
                *(float *)(v10 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v40;
                *(float *)(v10 + Matrix<double>::~Matrix((uint64_t)this + 24) = v39;
                float v83 = v51;
                *(_DWORD *)(v10 + 76) = v38;
LABEL_53:
                *(float *)uint64_t v10 = v83;
                uint64_t v13 = 1;
                float v22 = -3.4028e38;
                float v37 = -3.4028e38;
              }
LABEL_54:
              uint64_t v11 = (v11 + 1);
              unsigned int v29 = (v29 + 1) % a4;
              ++v50;
              if (a3 == v11)
              {
                float v112 = v37;
                float v114 = v30;
                float v120 = v22;
                float v122 = v48;
                float v124 = v45;
                float v126 = v44;
                float v128 = v51;
                float v130 = v40;
                float v116 = v41;
                float v118 = v39;
                float v139 = v36;
                float v142 = v28;
                float v160 = v35;
                float v163 = v34;
                float v145 = v27;
                float v148 = v26;
                float v166 = v33;
                if (v14)
                {
                  float v94 = v23;
                  float v154 = v25;
                  float v157 = v15;
                  float v151 = v20;
                  float v95 = v19;
                  float v96 = v18;
                  float v97 = v17;
                  float v98 = v16;
                  float v99 = v24;
                  float v100 = v31;
                  float v101 = v32;
                  char v102 = v13;
                  float v103 = calcStd(a1, a5, v12 + 1, v12 + 919, (float)(v23 + v24) / 368.0 * 0.5);
                  LOBYTE(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 13) = v102;
                  float v32 = v101;
                  float v31 = v100;
                  float v24 = v99;
                  float v16 = v98;
                  float v17 = v97;
                  float v18 = v96;
                  float v19 = v95;
                  float v20 = v151;
                  float v25 = v154;
                  float v15 = v157;
                  float v23 = v94;
                  a3 = v135;
                  float v136 = v103;
                }
                float v132 = v23;
                float v134 = v24;
                float v169 = v32;
                if (v171)
                {
                  float v104 = v31;
                  char v105 = v13;
                  float v106 = calcStd(a1, a5, v170 + 1, v170 + 919, (float)(v31 + v32) / 368.0 * 0.5);
                  LOBYTE(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 13) = v105;
                  float v31 = v104;
                  a3 = v135;
                  float v109 = v106;
                }
                float v107 = v31;
                if ((v13 & 1) == 0)
                {
                  *(void *)uint64_t v10 = 0;
                  *(void *)(v10 + 8) = 0;
                  *(_DWORD *)(v10 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
                  *(void *)(v10 + 16) = 0;
                  *(_DWORD *)(v10 + 76) = -1;
                }
                *(_OWORD *)(v10 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
                *(_OWORD *)(v10 + 44) = 0u;
                *(_OWORD *)(v10 + 28) = 0u;
                *(void *)(v10 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                *(void *)(v10 + 86) = 0;
                memcpy(a5, &a1[a3 - 1286], 0x1418uLL);
                uint64_t result = 0;
                a5[1286] = v15;
                a5[1287] = v16;
                a5[1288] = v17;
                a5[1289] = v18;
                a5[1290] = v19;
                a5[1291] = v20;
                a5[1292] = v120;
                a5[1293] = (float)v21;
                a5[1294] = v132;
                a5[1295] = v134;
                a5[1296] = v25;
                a5[1297] = v148;
                a5[1298] = v145;
                a5[1299] = v142;
                a5[1300] = v136;
                a5[1301] = (float)v29;
                a5[1302] = v114;
                a5[1303] = (float)v172;
                a5[1304] = v107;
                a5[1305] = v169;
                a5[1306] = v166;
                a5[1307] = v163;
                a5[1308] = v160;
                a5[1309] = v139;
                a5[1310] = v109;
                a5[1311] = v112;
                a5[1312] = (float)v38;
                a5[1313] = v118;
                a5[1314] = v130;
                a5[1315] = v116;
                a5[1316] = v126;
                a5[1317] = v124;
                a5[1318] = v122;
                a5[1319] = v128;
                return result;
              }
            }
            *(float *)(v10 + 4) = v25;
            *(float *)(v10 + 8) = v26;
            *(float *)(v10 + H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 12) = v27;
            *(float *)(v10 + 16) = v28;
            *(float *)(v10 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v24;
            *(float *)(v10 + Matrix<double>::~Matrix((uint64_t)this + 24) = v23;
            float v83 = v136;
            *(_DWORD *)(v10 + 76) = v21;
            if (v14)
            {
              float v131 = v23;
              float v133 = v24;
              float v153 = v25;
              float v156 = v15;
              float v147 = v19;
              float v150 = v20;
              float v141 = v17;
              float v144 = v18;
              float v138 = v16;
              float v84 = v31;
              float v165 = v33;
              float v168 = v32;
              float v85 = v26;
              float v86 = v27;
              float v159 = v35;
              float v162 = v34;
              float v87 = v28;
              float v88 = v36;
              float v89 = v39;
              float v127 = v51;
              float v129 = v40;
              float v90 = v41;
              float v91 = v30;
              float v123 = v45;
              float v125 = v44;
              float v121 = v48;
              uint64_t v92 = v12;
              float v83 = calcStd(a1, a5, v12 + 1, v12 + 919, (float)(v23 + v24) / 368.0 * 0.5);
              float v49 = -0.25;
              unsigned int v46 = v110;
              unsigned int v47 = v111;
              unsigned int v43 = v113;
              int v42 = v115;
              uint64_t v12 = v92;
              a4 = v117;
              float v48 = v121;
              float v45 = v123;
              float v44 = v125;
              float v51 = v127;
              float v30 = v91;
              float v41 = v90;
              float v40 = v129;
              float v23 = v131;
              float v39 = v89;
              uint64_t v10 = a7;
              float v36 = v88;
              float v35 = v159;
              float v34 = v162;
              float v28 = v87;
              float v27 = v86;
              float v33 = v165;
              float v32 = v168;
              float v26 = v85;
              float v31 = v84;
              float v24 = v133;
              float v16 = v138;
              float v17 = v141;
              float v18 = v144;
              float v19 = v147;
              float v20 = v150;
              float v25 = v153;
              float v15 = v156;
              a3 = v135;
            }
            goto LABEL_53;
          }
        }
      }
    }
  }
  return result;
}

float calcStd(float *a1, float *a2, int a3, int a4, double a5)
{
  double v5 = 0.0;
  int v6 = -368;
  do
  {
    int v7 = a3 + v6 + 368;
    int v8 = a4 + v6 + 368;
    float v9 = &a1[a4 + v6 - 918];
    if (v8 < 1286) {
      float v9 = &a2[v8];
    }
    double v10 = v5 + (*v9 - a5) * (*v9 - a5);
    uint64_t v11 = &a1[a3 + v6 - 918];
    if (v7 < 1286) {
      uint64_t v11 = &a2[v7];
    }
    double v5 = v10 + (*v11 - a5) * (*v11 - a5);
  }
  while (!__CFADD__(v6++, 1));
  return sqrt(v5 / 368.0 * 0.5);
}

float quadratic_interpolation_y(const float (*a1)[3], float a2)
{
  return (float)(*a1)[1] + (float)((float)((*a1)[0] - (float)(*a1)[2]) * a2) * -0.25;
}

uint64_t Algo::asin(uint64_t a1, uint64_t a2)
{
  if (g_CoresNumber)
  {
    if (g_CoresNumber == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

void initThreadPool(void)
{
  if (!g_ThreadPool)
  {
    unsigned int v0 = std::thread::hardware_concurrency();
    if (v0) {
      int v1 = v0;
    }
    else {
      int v1 = 2;
    }
    g_CoresNumber = v1;
    operator new[]();
  }
}

void trigoThreadSingleArg(double *a1, double *a2, double (*a3)(double), int a4)
{
  if (a4 >= 1)
  {
    int v4 = a4;
    do
    {
      double v8 = *a1++;
      *a2++ = a3(v8);
      --v4;
    }
    while (v4);
  }
}

uint64_t Algo::sin(uint64_t a1, uint64_t a2)
{
  if (g_CoresNumber)
  {
    if (g_CoresNumber == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::atan(uint64_t a1, uint64_t a2)
{
  if (g_CoresNumber)
  {
    if (g_CoresNumber == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::atan2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (g_CoresNumber)
  {
    if (g_CoresNumber == 1) {
      std::thread::thread<void (&)(double const*,double const*,double *,double (*)(double,double),int),double const*&,double const*&,double *&,double (*)(double,double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double const*,double *,double (*)(double,double),int),double const*&,double const*&,double *&,double (*)(double,double),int &,void>();
  }
  return 0;
}

void trigoThreadMultipleArg(double *a1, double *a2, double *a3, double (*a4)(double, double), int a5)
{
  if (a5 >= 1)
  {
    int v5 = a5;
    do
    {
      double v10 = *a1++;
      double v11 = v10;
      double v12 = *a2++;
      *a3++ = a4(v11, v12);
      --v5;
    }
    while (v5);
  }
}

uint64_t Algo::tan(uint64_t a1, uint64_t a2)
{
  if (g_CoresNumber)
  {
    if (g_CoresNumber == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::acos(uint64_t a1, uint64_t a2)
{
  if (g_CoresNumber)
  {
    if (g_CoresNumber == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::cos(uint64_t a1, uint64_t a2)
{
  if (g_CoresNumber)
  {
    if (g_CoresNumber == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::cart2sph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Matrix<double>::DotSquare(a1, (uint64_t)v42);
  Matrix<double>::DotSquare(a2, (uint64_t)v41);
  Matrix<double>::operator+((uint64_t)v42, (uint64_t)v41, (uint64_t)&v47);
  Matrix<double>::Sqrt((uint64_t)&v47, (uint64_t)v43);
  Matrix<double>::~Matrix((uint64_t)&v47);
  Matrix<double>::~Matrix((uint64_t)v41);
  Matrix<double>::~Matrix((uint64_t)v42);
  if (a6)
  {
    Matrix<double>::DotSquare((uint64_t)v43, (uint64_t)v41);
    Matrix<double>::DotSquare(a3, (uint64_t)v40);
    Matrix<double>::operator+((uint64_t)v41, (uint64_t)v40, (uint64_t)v42);
    Matrix<double>::Sqrt((uint64_t)v42, (uint64_t)&v47);
    Matrix<double>::Resize(a6, v49, v50);
    memcpy(*(void **)(a6 + 8), v48, 8 * *(unsigned int *)(a6 + 16) * (unint64_t)*(unsigned int *)(a6 + 20));
    Matrix<double>::~Matrix((uint64_t)&v47);
    Matrix<double>::~Matrix((uint64_t)v42);
    Matrix<double>::~Matrix((uint64_t)v40);
    Matrix<double>::~Matrix((uint64_t)v41);
  }
  v36[0] = &unk_26FAEAF18;
  double v12 = *(const void **)(a3 + 8);
  int v13 = *(_DWORD *)(a3 + 16);
  int v14 = *(_DWORD *)(a3 + 20);
  unsigned int v47 = &unk_26FAEAF18;
  float v48 = v12;
  int v49 = v13;
  int v50 = v14;
  char v51 = 0;
  v36[1] = v12;
  int v37 = v13;
  int v38 = v14;
  char v39 = 0;
  uint64_t v15 = Matrix<double>::~Matrix((uint64_t)&v47);
  v32[0] = &unk_26FAEAF18;
  unsigned int v47 = &unk_26FAEAF18;
  float v48 = v44;
  int v49 = v45;
  int v50 = v46;
  char v51 = 0;
  v32[1] = v44;
  int v33 = v45;
  int v34 = v46;
  char v35 = 0;
  Matrix<double>::~Matrix(v15);
  Algo::atan2((uint64_t)v36, (uint64_t)v32, a5);
  Matrix<double>::~Matrix((uint64_t)v32);
  Matrix<double>::~Matrix((uint64_t)v36);
  v28[0] = &unk_26FAEAF18;
  float v16 = *(const void **)(a2 + 8);
  int v17 = *(_DWORD *)(a2 + 16);
  int v18 = *(_DWORD *)(a2 + 20);
  unsigned int v47 = &unk_26FAEAF18;
  float v48 = v16;
  int v49 = v17;
  int v50 = v18;
  char v51 = 0;
  v28[1] = v16;
  int v29 = v17;
  int v30 = v18;
  char v31 = 0;
  uint64_t v19 = Matrix<double>::~Matrix((uint64_t)&v47);
  v24[0] = &unk_26FAEAF18;
  float v20 = *(const void **)(a1 + 8);
  int v21 = *(_DWORD *)(a1 + 16);
  int v22 = *(_DWORD *)(a1 + 20);
  unsigned int v47 = &unk_26FAEAF18;
  float v48 = v20;
  int v49 = v21;
  int v50 = v22;
  char v51 = 0;
  v24[1] = v20;
  int v25 = v21;
  int v26 = v22;
  char v27 = 0;
  Matrix<double>::~Matrix(v19);
  Algo::atan2((uint64_t)v28, (uint64_t)v24, a4);
  Matrix<double>::~Matrix((uint64_t)v24);
  Matrix<double>::~Matrix((uint64_t)v28);
  Matrix<double>::~Matrix((uint64_t)v43);
  return 0;
}

void sub_246937704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  Matrix<double>::~Matrix(v29 - 96);
  Matrix<double>::~Matrix(v29 - 160);
  Matrix<double>::~Matrix((uint64_t)&a25);
  Matrix<double>::~Matrix((uint64_t)&a29);
  Matrix<double>::~Matrix(v29 - 128);
  _Unwind_Resume(a1);
}

void Matrix<double>::DotSquare(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_2469377F8(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void Algo::LinearSpace(Algo *this@<X0>, double a2@<D0>, double a3@<D1>, uint64_t a4@<X8>)
{
  unsigned int v4 = this;
  double v9 = a2;
  Matrix<double>::Matrix(a4, 1, (int)this);
  *(void *)a4 = &unk_26FAEAF48;
  double v8 = (a3 - a2) / ((double)v4 + -1.0);
  vDSPVramp<double>(&v9, &v8, *(double **)(a4 + 8), 1, v4);
}

void sub_2469378A8(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void Algo::LinearSpaceByStep(Algo *this@<X0>, double a2@<D0>, double a3@<D1>, uint64_t a4@<X8>)
{
  unsigned int v4 = this;
  double v8 = a2;
  int v6 = (int)(a3 - a2) / this + 1;
  Matrix<double>::Matrix(a4, 1, v6);
  *(void *)a4 = &unk_26FAEAF48;
  double v7 = (double)v4;
  vDSPVramp<double>(&v8, &v7, *(double **)(a4 + 8), 1, v6);
}

void sub_246937950(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t Algo::Fspecial@<X0>(int a1@<W0>, Algo *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  Matrix<double>::Matrix(a3, (int)a2, (int)a2);
  Matrix<double>::Matrix((uint64_t)v39, (int)a2, (int)a2);
  Matrix<double>::Matrix((uint64_t)v38, (int)a2, (int)a2);
  if (!a1)
  {
    Algo::LinearSpace(a2, -((double)((int)a2 - 1) * 0.5), (double)((int)a2 - 1) * 0.5, (uint64_t)v34);
    v30[0] = &unk_26FAEAF18;
    float v40 = &unk_26FAEAF18;
    float v41 = v35;
    int v42 = v36;
    int v43 = v37;
    char v44 = 0;
    v30[1] = v35;
    int v31 = v36;
    int v32 = v37;
    char v33 = 0;
    uint64_t v8 = Matrix<double>::~Matrix((uint64_t)&v40);
    v26[0] = &unk_26FAEAF18;
    float v40 = &unk_26FAEAF18;
    float v41 = v35;
    int v42 = v36;
    int v43 = v37;
    char v44 = 0;
    v26[1] = v35;
    int v27 = v36;
    int v28 = v37;
    char v29 = 0;
    Matrix<double>::~Matrix(v8);
    Algo::MeshGrid<double>((uint64_t)v30, (uint64_t)v26, (uint64_t)v39, (uint64_t)v38);
    Matrix<double>::~Matrix((uint64_t)v26);
    Matrix<double>::~Matrix((uint64_t)v30);
    Matrix<double>::DotSquare((uint64_t)v39, (uint64_t)v25);
    Matrix<double>::DotSquare((uint64_t)v38, (uint64_t)v24);
    Matrix<double>::operator+((uint64_t)v25, (uint64_t)v24, (uint64_t)&v40);
    Matrix<double>::~Matrix((uint64_t)v24);
    Matrix<double>::~Matrix((uint64_t)v25);
    int v9 = v42;
    int v10 = v43;
    if (v43 * v42)
    {
      double v11 = v41;
      double v12 = &v41[v43 * v42];
      do
      {
        double *v11 = -1.0 / ((a4 + a4) * a4) * *v11;
        ++v11;
      }
      while (v11 < v12);
    }
    Matrix<double>::Resize(a3, v9, v10);
    memcpy(*(void **)(a3 + 8), v41, 8 * *(unsigned int *)(a3 + 16) * (unint64_t)*(unsigned int *)(a3 + 20));
    int v13 = *(long double **)(a3 + 8);
    unsigned int v14 = *(_DWORD *)(a3 + 20) * *(_DWORD *)(a3 + 16);
    if (v14)
    {
      uint64_t v15 = &v13[v14];
      do
      {
        *int v13 = exp(*v13);
        ++v13;
      }
      while (v13 < v15);
      int v13 = *(long double **)(a3 + 8);
    }
    v25[0] = 0.0;
    vDSPMax<double>(v13, 1, v25, v14);
    float v16 = *(double **)(a3 + 8);
    if (a2)
    {
      double v17 = v25[0] * 2.22044605e-16;
      int v18 = a2 * a2;
      if ((a2 * a2) <= 1) {
        int v18 = 1;
      }
      double v19 = 0.0;
      do
      {
        double v20 = *v16;
        if (*v16 < v17)
        {
          *float v16 = 0.0;
          double v20 = 0.0;
        }
        double v19 = v19 + v20;
        ++v16;
        --v18;
      }
      while (v18);
      float v16 = *(double **)(a3 + 8);
    }
    else
    {
      double v19 = 0.0;
    }
    unsigned int v21 = *(_DWORD *)(a3 + 20) * *(_DWORD *)(a3 + 16);
    if (v21)
    {
      int v22 = &v16[v21];
      do
      {
        *float v16 = *v16 / v19;
        ++v16;
      }
      while (v16 < v22);
    }
    Matrix<double>::~Matrix((uint64_t)&v40);
    Matrix<double>::~Matrix((uint64_t)v34);
  }
  Matrix<double>::~Matrix((uint64_t)v38);
  return Matrix<double>::~Matrix((uint64_t)v39);
}

void sub_246937C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  Matrix<double>::~Matrix(v30 - 96);
  Matrix<double>::~Matrix((uint64_t)&a25);
  Matrix<double>::~Matrix((uint64_t)&a29);
  Matrix<double>::~Matrix(v30 - 128);
  Matrix<double>::~Matrix(v29);
  _Unwind_Resume(a1);
}

void Algo::calcWeightedCenterOfMass(uint64_t a1, void *a2, uint64_t a3, long double a4)
{
  int v7 = -1431655765 * ((uint64_t)(a2[1] - *a2) >> 3);
  Matrix<double>::Resize(a3, 3, v7);
  int v25 = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  if (v7)
  {
    uint64_t v8 = 0;
    float v24 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 16);
    while (1)
    {
      uint64_t v12 = *a2 + 24 * v9;
      if (&v25 != (int **)v12)
      {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v25, *(char **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 2);
        uint64_t v8 = (char *)v25;
        float v24 = v26;
      }
      unint64_t v13 = (unint64_t)(v24 - v8) >> 2;
      if ((int)v13 >= 1) {
        break;
      }
      double v18 = 0.0;
      double v17 = 0.0;
      double v15 = 0.0;
      if (v13) {
        goto LABEL_10;
      }
LABEL_15:
      if (++v9 == v7)
      {
        if (v8)
        {
          int v26 = v8;
          operator delete(v8);
        }
        return;
      }
    }
    uint64_t v14 = ((unint64_t)(v24 - v8) >> 2);
    double v15 = 0.0;
    float v16 = v8;
    double v17 = 0.0;
    double v18 = 0.0;
    do
    {
      uint64_t v19 = *(int *)v16;
      v16 += 4;
      long double v20 = pow(*(long double *)(v10 + 8 * v19), a4);
      double v18 = v18 + v20 * (double)((int)v19 % v11);
      double v17 = v17 + v20 * (double)((int)v19 / v11);
      double v15 = v15 + v20;
      --v14;
    }
    while (v14);
LABEL_10:
    unsigned int v21 = *(_DWORD *)(a3 + 16);
    if (!v21
      || (unint64_t v22 = *(unsigned int *)(a3 + 20), v9 >= v22)
      || (*(double *)(*(void *)(a3 + 8) + 8 * v9) = (double)(int)v13, v21 < 2)
      || (*(double *)(*(void *)(a3 + 8) + 8 * v9 + 8 * v22) = v18 / v15, v21 == 2))
    {
      __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
    }
    *(double *)(*(void *)(a3 + 8) + 8 * v9 + 8 * (2 * v22)) = v17 / v15;
    goto LABEL_15;
  }
}

void sub_246937ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Algo::StdFilter(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 > 0)
  {
    Matrix<double>::Resize(a3, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
    Matrix<double>::DotSquare(a1, (uint64_t)v12);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = &unk_26FAEAF18;
    char v11 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unsigned int v4 = &unk_26FAEAF18;
    char v7 = 0;
    ImageUtils::IntegralImage<double>();
  }
  Algo::StdFilter();
}

void sub_2469381FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  Matrix<double>::~Matrix((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  Matrix<double>::~Matrix((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Algo::NormXcorr2d(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Matrix<double>::Resize(a3, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  v13[0] = 0.0;
  vDSPVfill<double>(v13, *(double **)(a3 + 8), 1, *(_DWORD *)(a3 + 20) * *(_DWORD *)(a3 + 16));
  Matrix<double>::DotSquare(a2, (uint64_t)v13);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = &unk_26FAEAF18;
  char v12 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = &unk_26FAEAF18;
  char v8 = 0;
  ImageUtils::IntegralImage<double>();
}

void sub_24693874C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  Matrix<double>::~Matrix((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  Matrix<double>::~Matrix(v13 - 144);
  _Unwind_Resume(a1);
}

uint64_t Algo::FundMatrix3x3(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, double *a5, double a6)
{
  Matrix<double>::Matrix((uint64_t)&v128, 9, *(_DWORD *)(a1 + 20));
  float v128 = &unk_26FAEC9D8;
  int v113 = 3;
  unsigned int v114 = v130;
  int v125 = 3;
  unsigned int v126 = v130;
  char v127 = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  float v123 = &unk_26FAEB100;
  *(void *)&__CLPK_doublereal v124 = &v129[48 * v130];
  Matrix<double>::~Matrix((uint64_t)&v111);
  Matrix<double>::Matrix((uint64_t)&v120, 3, *(_DWORD *)(a2 + 20));
  float v120 = &unk_26FAEB100;
  uint64_t v119 = 0;
  memset(v118, 0, sizeof(v118));
  uint64_t v117 = 0;
  memset(v116, 0, sizeof(v116));
  Algo::Normalize2DPts(a1, (uint64_t)&v123, (uint64_t)v118);
  Algo::Normalize2DPts(a2, (uint64_t)&v120, (uint64_t)v116);
  int v113 = 1;
  unsigned int v114 = v122;
  unsigned int v104 = v122;
  char v105 = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__CLPK_doublereal v101 = &unk_26FAEAF48;
  char v102 = v121;
  unsigned int v103 = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  int v113 = 1;
  unsigned int v114 = v126;
  LODWORD(v132) = 1;
  DWORD1(v132) = v126;
  BYTE8(v132) = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__u[0] = &unk_26FAEAF48;
  __u[1] = v124;
  Matrix<double>::~Matrix((uint64_t)&v111);
  MatrixNxPts<1u,double>::DotMult((uint64_t)&v101, (uint64_t)__u, (uint64_t)&v106);
  int v113 = 1;
  unsigned int v114 = v130;
  DWORD1(v97) = v130;
  BYTE8(v97) = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  __dst[0] = &unk_26FAEAF48;
  __dst[1] = v129;
  LODWORD(v97) = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  Matrix<double>::Resize((uint64_t)__dst, v108, v109);
  memcpy(__dst[1], __src, 8 * v97 * (unint64_t)DWORD1(v97));
  Matrix<double>::~Matrix((uint64_t)__dst);
  Matrix<double>::~Matrix((uint64_t)&v106);
  Matrix<double>::~Matrix((uint64_t)__u);
  Matrix<double>::~Matrix((uint64_t)&v101);
  int v113 = 1;
  unsigned int v114 = v122;
  unsigned int v104 = v122;
  char v105 = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__CLPK_doublereal v101 = &unk_26FAEAF48;
  char v102 = v121;
  unsigned int v103 = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  int v113 = 1;
  unsigned int v114 = v126;
  LODWORD(v132) = 1;
  DWORD1(v132) = v126;
  BYTE8(v132) = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__u[0] = &unk_26FAEAF48;
  *(void *)&__u[1] = *(void *)&v124 + 8 * v126;
  Matrix<double>::~Matrix((uint64_t)&v111);
  MatrixNxPts<1u,double>::DotMult((uint64_t)&v101, (uint64_t)__u, (uint64_t)&v106);
  int v113 = 1;
  unsigned int v114 = v130;
  DWORD1(v97) = v130;
  BYTE8(v97) = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  __dst[0] = &unk_26FAEAF48;
  __dst[1] = &v129[8 * v130];
  LODWORD(v97) = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  Matrix<double>::Resize((uint64_t)__dst, v108, v109);
  memcpy(__dst[1], __src, 8 * v97 * (unint64_t)DWORD1(v97));
  Matrix<double>::~Matrix((uint64_t)__dst);
  Matrix<double>::~Matrix((uint64_t)&v106);
  Matrix<double>::~Matrix((uint64_t)__u);
  Matrix<double>::~Matrix((uint64_t)&v101);
  int v113 = 1;
  unsigned int v114 = v122;
  __srCC_SHA256_CTX c = v121;
  unsigned int v109 = v122;
  char v110 = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  float v106 = &unk_26FAEAF48;
  int v108 = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  int v113 = 1;
  unsigned int v114 = v130;
  unsigned int v104 = v130;
  char v105 = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__CLPK_doublereal v101 = &unk_26FAEAF48;
  char v102 = &v129[16 * v130];
  unsigned int v103 = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  Matrix<double>::Resize((uint64_t)&v101, v108, v109);
  memcpy(v102, __src, 8 * v103 * (unint64_t)v104);
  Matrix<double>::~Matrix((uint64_t)&v101);
  Matrix<double>::~Matrix((uint64_t)&v106);
  int v113 = 1;
  unsigned int v114 = v122;
  unsigned int v104 = v122;
  char v105 = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__CLPK_doublereal v101 = &unk_26FAEAF48;
  char v102 = &v121[8 * v122];
  unsigned int v103 = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  int v113 = 1;
  unsigned int v114 = v126;
  LODWORD(v132) = 1;
  DWORD1(v132) = v126;
  BYTE8(v132) = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__u[0] = &unk_26FAEAF48;
  __u[1] = v124;
  Matrix<double>::~Matrix((uint64_t)&v111);
  MatrixNxPts<1u,double>::DotMult((uint64_t)&v101, (uint64_t)__u, (uint64_t)&v106);
  int v113 = 1;
  unsigned int v114 = v130;
  DWORD1(v97) = v130;
  BYTE8(v97) = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  __dst[0] = &unk_26FAEAF48;
  __dst[1] = &v129[24 * v130];
  LODWORD(v97) = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  Matrix<double>::Resize((uint64_t)__dst, v108, v109);
  memcpy(__dst[1], __src, 8 * v97 * (unint64_t)DWORD1(v97));
  Matrix<double>::~Matrix((uint64_t)__dst);
  Matrix<double>::~Matrix((uint64_t)&v106);
  Matrix<double>::~Matrix((uint64_t)__u);
  Matrix<double>::~Matrix((uint64_t)&v101);
  int v113 = 1;
  unsigned int v114 = v122;
  unsigned int v104 = v122;
  char v105 = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__CLPK_doublereal v101 = &unk_26FAEAF48;
  char v102 = &v121[8 * v122];
  unsigned int v103 = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  int v113 = 1;
  unsigned int v114 = v126;
  LODWORD(v132) = 1;
  DWORD1(v132) = v126;
  BYTE8(v132) = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__u[0] = &unk_26FAEAF48;
  *(void *)&__u[1] = *(void *)&v124 + 8 * v126;
  Matrix<double>::~Matrix((uint64_t)&v111);
  MatrixNxPts<1u,double>::DotMult((uint64_t)&v101, (uint64_t)__u, (uint64_t)&v106);
  int v113 = 1;
  unsigned int v114 = v130;
  DWORD1(v97) = v130;
  BYTE8(v97) = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  __dst[0] = &unk_26FAEAF48;
  __dst[1] = &v129[32 * v130];
  LODWORD(v97) = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  Matrix<double>::Resize((uint64_t)__dst, v108, v109);
  memcpy(__dst[1], __src, 8 * v97 * (unint64_t)DWORD1(v97));
  Matrix<double>::~Matrix((uint64_t)__dst);
  Matrix<double>::~Matrix((uint64_t)&v106);
  Matrix<double>::~Matrix((uint64_t)__u);
  Matrix<double>::~Matrix((uint64_t)&v101);
  int v113 = 1;
  unsigned int v114 = v122;
  __srCC_SHA256_CTX c = &v121[8 * v122];
  unsigned int v109 = v122;
  char v110 = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  float v106 = &unk_26FAEAF48;
  int v108 = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  int v113 = 1;
  unsigned int v114 = v130;
  unsigned int v104 = v130;
  char v105 = 0;
  unsigned int v111 = &unk_26FAEAF18;
  uint64_t v112 = 0;
  char v115 = 0;
  *(void *)&__CLPK_doublereal v101 = &unk_26FAEAF48;
  char v102 = &v129[40 * v130];
  unsigned int v103 = 1;
  Matrix<double>::~Matrix((uint64_t)&v111);
  Matrix<double>::Resize((uint64_t)&v101, v108, v109);
  memcpy(v102, __src, 8 * v103 * (unint64_t)v104);
  Matrix<double>::~Matrix((uint64_t)&v101);
  Matrix<double>::~Matrix((uint64_t)&v106);
  MatrixNxPts<9u,double>::MultAxBTag<9u>((uint64_t)&v128, (uint64_t)&v128, &v111);
  bzero(&v106, 0x288uLL);
  bzero(&v101, 0x288uLL);
  double v100 = 0.0;
  long long v98 = 0u;
  long long v99 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v97 = 0u;
  MatrixMxN<9u,9u,double>::SVDMxN<9u,void>(&v111, (__CLPK_doublereal *)&v106, (__CLPK_doublereal *)__dst, &v101);
  if (a4)
  {
    uint64_t v12 = 0;
    long long v133 = v98;
    long long v134 = v99;
    double v135 = v100;
    *(_OWORD *)long long __u = *(_OWORD *)__dst;
    long long v132 = v97;
    uint64_t v13 = 1;
    do
    {
      uint64_t v14 = v13;
      int v15 = v12;
      do
      {
        if (__u[v14] < __u[v15]) {
          int v15 = v14;
        }
        ++v14;
      }
      while (v14 != 9);
      __CLPK_doublereal v16 = __u[v15];
      __u[v15] = __u[v12];
      __u[v12] = v16;
      ++v13;
      ++v12;
    }
    while (v12 != 8);
    double v17 = v135 / __u[1];
    if (a5) {
      *a5 = v17;
    }
    *a4 = v17 < a6;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 64;
  uint64_t v20 = a3;
  do
  {
    uint64_t v21 = 0;
    uint64_t v22 = v19;
    do
    {
      *(__CLPK_doublereal *)(v20 + vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 21) = *(__CLPK_doublereal *)((char *)&v101 + v22);
      v22 += 72;
      v21 += 8;
    }
    while (v21 != 24);
    ++v18;
    v19 += 216;
    v20 += 24;
  }
  while (v18 != 3);
  double v135 = 0.0;
  long long v133 = 0u;
  long long v134 = 0u;
  *(_OWORD *)long long __u = 0u;
  long long v132 = 0u;
  uint64_t v95 = 0;
  memset(v94, 0, sizeof(v94));
  __CLPK_doublereal __s = 0.0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  MatrixMxN<3u,3u,double>::SVDMxN<3u,void>((long long *)a3, __u, &__s, (__CLPK_doublereal *)v94);
  uint64_t v23 = 0;
  uint64_t v87 = 0;
  long long v90 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  __CLPK_doublereal v85 = __s;
  uint64_t v88 = v92;
  uint64_t v79 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  float v24 = __u;
  long long v75 = 0u;
  long long v76 = 0u;
  do
  {
    uint64_t v25 = 0;
    int v26 = &v85;
    do
    {
      uint64_t v27 = 0;
      double v28 = 0.0;
      uint64_t v29 = v26;
      do
      {
        double v30 = *v29;
        v29 += 3;
        double v28 = v28 + v24[v27++] * v30;
      }
      while (v27 != 3);
      *((double *)&v75 + 3 * v23 + v25++) = v28;
      ++v26;
    }
    while (v25 != 3);
    ++v23;
    v24 += 3;
  }
  while (v23 != 3);
  uint64_t v31 = 0;
  uint64_t v74 = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  int v32 = &v70;
  char v33 = v94;
  do
  {
    uint64_t v34 = 0;
    char v35 = v32;
    do
    {
      *(void *)char v35 = *(void *)((char *)v33 + v34);
      char v35 = (long long *)((char *)v35 + 24);
      v34 += 8;
    }
    while (v34 != 24);
    ++v31;
    int v32 = (long long *)((char *)v32 + 8);
    char v33 = (_OWORD *)((char *)v33 + 24);
  }
  while (v31 != 3);
  uint64_t v36 = 0;
  uint64_t v84 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  int v37 = &v75;
  do
  {
    uint64_t v38 = 0;
    char v39 = &v70;
    do
    {
      uint64_t v40 = 0;
      double v41 = 0.0;
      int v42 = (double *)v39;
      do
      {
        double v43 = *v42;
        v42 += 3;
        double v41 = v41 + *(double *)((char *)v37 + v40) * v43;
        v40 += 8;
      }
      while (v40 != 24);
      *((double *)&v80 + 3 * v36 + v38++) = v41;
      char v39 = (long long *)((char *)v39 + 8);
    }
    while (v38 != 3);
    ++v36;
    int v37 = (long long *)((char *)v37 + 24);
  }
  while (v36 != 3);
  uint64_t v44 = 0;
  long long v45 = v83;
  *(_OWORD *)(a3 + 32) = v82;
  *(_OWORD *)(a3 + 48) = v45;
  *(void *)(a3 + 64) = v84;
  long long v46 = v81;
  *(_OWORD *)a3 = v80;
  *(_OWORD *)(a3 + 16) = v46;
  uint64_t v74 = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  unsigned int v47 = &v70;
  float v48 = v116;
  long long v70 = 0u;
  long long v71 = 0u;
  do
  {
    uint64_t v49 = 0;
    int v50 = v47;
    do
    {
      *(void *)int v50 = *(void *)((char *)v48 + v49);
      int v50 = (long long *)((char *)v50 + 24);
      v49 += 8;
    }
    while (v49 != 24);
    ++v44;
    unsigned int v47 = (long long *)((char *)v47 + 8);
    float v48 = (_OWORD *)((char *)v48 + 24);
  }
  while (v44 != 3);
  uint64_t v51 = 0;
  uint64_t v79 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  float v52 = &v70;
  do
  {
    uint64_t v53 = 0;
    float v54 = (double *)a3;
    do
    {
      uint64_t v55 = 0;
      double v56 = 0.0;
      float v57 = v54;
      do
      {
        double v58 = *v57;
        v57 += 3;
        double v56 = v56 + *(double *)((char *)v52 + v55) * v58;
        v55 += 8;
      }
      while (v55 != 24);
      *((double *)&v75 + 3 * v51 + v53++) = v56;
      ++v54;
    }
    while (v53 != 3);
    ++v51;
    float v52 = (long long *)((char *)v52 + 24);
  }
  while (v51 != 3);
  uint64_t v59 = 0;
  uint64_t v84 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  float v60 = &v75;
  do
  {
    uint64_t v61 = 0;
    float v62 = v118;
    do
    {
      uint64_t v63 = 0;
      double v64 = 0.0;
      float v65 = (double *)v62;
      do
      {
        double v66 = *v65;
        v65 += 3;
        double v64 = v64 + *(double *)((char *)v60 + v63) * v66;
        v63 += 8;
      }
      while (v63 != 24);
      *((double *)&v80 + 3 * v59 + v61++) = v64;
      float v62 = (_OWORD *)((char *)v62 + 8);
    }
    while (v61 != 3);
    ++v59;
    float v60 = (long long *)((char *)v60 + 24);
  }
  while (v59 != 3);
  long long v67 = v83;
  *(_OWORD *)(a3 + 32) = v82;
  *(_OWORD *)(a3 + 48) = v67;
  *(void *)(a3 + 64) = v84;
  long long v68 = v81;
  *(_OWORD *)a3 = v80;
  *(_OWORD *)(a3 + 16) = v68;
  Matrix<double>::~Matrix((uint64_t)&v120);
  Matrix<double>::~Matrix((uint64_t)&v123);
  Matrix<double>::~Matrix((uint64_t)&v128);
  return 0;
}

void sub_246939604(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix((uint64_t)&STACK[0xA20]);
  Matrix<double>::~Matrix(v1 - 240);
  Matrix<double>::~Matrix(v1 - 208);
  _Unwind_Resume(a1);
}

uint64_t Algo::Normalize2DPts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Matrix<double>::Matrix<double const>((uint64_t)&v30, *(void *)(a1 + 8), 3, *(_DWORD *)(a1 + 20), 1);
  double v30 = &unk_26FAEB100;
  uint64_t v5 = v33;
  if (v32) {
    BOOL v6 = v33 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
  if (v32 <= 1) {
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
  if (v32 == 2) {
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
  uint64_t v7 = 0;
  char v8 = v31;
  uint64_t v9 = &v31[v33];
  uint64_t v10 = &v31[2 * v33];
  double v11 = 0.0;
  double v12 = 0.0;
  do
  {
    v8[v7] = v8[v7] / v10[v7];
    v9[v7] = v9[v7] / v10[v7];
    v10[v7] = 1.0;
    double v11 = v11 + v8[v7];
    double v12 = v12 + v9[v7++];
  }
  while (v5 != v7);
  unsigned int v13 = *(_DWORD *)(a2 + 16);
  if (!v13 || (uint64_t v14 = *(unsigned int *)(a2 + 20), !v14)) {
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
  if (v13 <= 1) {
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
  if (v13 == 2) {
    __assert_rtn("operator()", "Matrix.hpp", 119, "row < m_rows && col < m_cols");
  }
  double v15 = v11 / (double)v5;
  __CLPK_doublereal v16 = *(double **)(a2 + 8);
  double v17 = 0.0;
  uint64_t v18 = v31;
  int v19 = v5;
  double v20 = v12 / (double)v5;
  do
  {
    double v21 = *v18 - v15;
    *__CLPK_doublereal v16 = v21;
    double v22 = v18[v5] - v20;
    v16[v14] = v22;
    double v23 = sqrt(v22 * v22 + v21 * v21);
    v16[(2 * v14)] = v23;
    double v17 = v17 + v23;
    ++v16;
    ++v18;
    --v19;
  }
  while (v19);
  double v24 = 1.41421356 / (v17 / (double)v5);
  *(double *)a3 = v24;
  *(void *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = -(v24 * v15);
  *(void *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = 0;
  *(double *)(a3 + 32) = v24;
  *(double *)(a3 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -(v24 * v20);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 56) = 0;
  *(void *)(a3 + 64) = 0x3FF0000000000000;
  MatrixMxN<3u,3u,double>::operator*<3u>((const double *)a3, (uint64_t)&v30, (uint64_t)&v26);
  Matrix<double>::Resize(a2, v28, v29);
  memcpy(*(void **)(a2 + 8), __src, 8 * *(unsigned int *)(a2 + 16) * (unint64_t)*(unsigned int *)(a2 + 20));
  Matrix<double>::~Matrix((uint64_t)&v26);
  Matrix<double>::~Matrix((uint64_t)&v30);
  return 0;
}

void sub_24693995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t MatrixNxPts<9u,double>::MultAxBTag<9u>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  bzero(a3, 0x288uLL);
  uint64_t v6 = 0;
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  unint64_t v8 = *(unsigned int *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  uint64_t v10 = *(void *)(a2 + 8);
  do
  {
    if (v6 == v7 || (int v11 = *(_DWORD *)(a1 + 20)) == 0) {
      MatrixNxPts<3u,double>::CloneColumn();
    }
    unint64_t v12 = 0;
    uint64_t v13 = *(void *)(a1 + 8) + 8 * (v11 * v6);
    do
    {
      if (v12 >= v8 || !v9) {
        MatrixNxPts<3u,double>::CloneColumn();
      }
      uint64_t v14 = (double *)(v10 + 8 * (v9 * v12));
      double v15 = 0.0;
      LODWORD(result) = v11;
      double v17 = (double *)v13;
      do
      {
        double v18 = *v17++;
        double v19 = v18;
        double v20 = *v14++;
        double v15 = v15 + v19 * v20;
        uint64_t result = (result - 1);
      }
      while (result);
      *((double *)a3 + 9 * v6 + v12++) = v15;
    }
    while (v12 != 9);
    ++v6;
  }
  while (v6 != 9);
  return result;
}

uint64_t MatrixMxN<9u,9u,double>::SVDMxN<9u,void>(void *__src, __CLPK_doublereal *a2, __CLPK_doublereal *a3, __CLPK_doublereal *a4)
{
  int v7 = (int)__src;
  memcpy(__dst, __src, sizeof(__dst));
  unint64_t v8 = &__dst[1];
  int v9 = &__dst[9];
  for (uint64_t i = 1; i != 9; ++i)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v8;
    do
    {
      __CLPK_doublereal v13 = v9[v11];
      v9[v11] = *v12;
      *unint64_t v12 = v13;
      v12 += 9;
      ++v11;
    }
    while (i != v11);
    ++v8;
    v9 += 9;
  }
  MatrixMxN<3u,3u,double>::svdLapack(v7, __dst, 9, 9, a2, a3, a4);
  uint64_t v14 = a2 + 1;
  double v15 = a2 + 9;
  for (uint64_t j = 1; j != 9; ++j)
  {
    uint64_t v17 = 0;
    double v18 = v14;
    do
    {
      __CLPK_doublereal v19 = v15[v17];
      v15[v17] = *v18;
      *double v18 = v19;
      v18 += 9;
      ++v17;
    }
    while (j != v17);
    ++v14;
    v15 += 9;
  }
  return 0;
}

uint64_t Algo::RandomSample(unsigned int a1, CRandomGenerator *this, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a3 + 20);
  if (v3)
  {
    unsigned int v6 = 0;
    float v7 = (float)a1;
    do
    {
      unsigned int v8 = (float)(CRandomGenerator::UniformRand(this) * v7);
      if (v6)
      {
        uint64_t v9 = 0;
        while (*(_DWORD *)(*(void *)(a3 + 8) + 4 * v9) != v8)
        {
          if (v6 == ++v9) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        LODWORD(v9) = 0;
      }
      if (v9 == v6) {
LABEL_10:
      }
        *(_DWORD *)(*(void *)(a3 + 8) + 4 * v6++) = v8;
    }
    while (v6 < v3);
  }
  return 0;
}

uint64_t Algo::FundDist(const double *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, double a6)
{
  Matrix<double>::Matrix((uint64_t)v52, 1, *(_DWORD *)(a2 + 20));
  v52[0] = &unk_26FAEAF48;
  if (*(_DWORD *)(a2 + 20))
  {
    unint64_t v12 = 0;
    do
    {
      MatrixNxPts<3u,double>::CloneColumn(a2, v12, &v41);
      MatrixNxPts<3u,double>::CloneColumn(a3, v12, &v49);
      uint64_t v13 = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v14 = (double *)a1;
      uint64_t v48 = 0;
      do
      {
        uint64_t v15 = 0;
        double v16 = 0.0;
        uint64_t v17 = v14;
        do
        {
          double v18 = *v17;
          v17 += 3;
          double v16 = v16 + *(double *)((char *)&v49 + v15) * v18;
          v15 += 8;
        }
        while (v15 != 24);
        *((double *)&v46 + v13++) = v16;
        ++v14;
      }
      while (v13 != 3);
      uint64_t v19 = 0;
      double v20 = 0.0;
      do
      {
        double v20 = v20 + *(double *)((char *)&v46 + v19) * *(double *)((char *)&v41 + v19);
        v19 += 8;
      }
      while (v19 != 24);
      *(double *)(v52[1] + 8 * v12++) = v20;
    }
    while (v12 < *(unsigned int *)(a2 + 20));
  }
  MatrixMxN<3u,3u,double>::operator*<3u>(a1, a2, (uint64_t)&v49);
  uint64_t v21 = 0;
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  double v22 = &v41;
  do
  {
    uint64_t v23 = 0;
    double v24 = v22;
    do
    {
      *(double *)double v24 = a1[v23];
      double v24 = (long long *)((char *)v24 + 24);
      ++v23;
    }
    while (v23 != 3);
    ++v21;
    double v22 = (long long *)((char *)v22 + 8);
    a1 += 3;
  }
  while (v21 != 3);
  MatrixMxN<3u,3u,double>::operator*<3u>((const double *)&v41, a3, (uint64_t)&v46);
  Matrix<double>::DotProductInPlace((uint64_t)&v49, (uint64_t)&v49);
  Matrix<double>::DotProductInPlace((uint64_t)&v46, (uint64_t)&v46);
  MatrixNxPts<1u,double>::DotMult((uint64_t)v52, (uint64_t)v52, (uint64_t)v38);
  LODWORD(v42) = 1;
  DWORD1(v42) = v51;
  int v35 = 1;
  unsigned int v36 = v51;
  char v37 = 0;
  *(void *)&long long v41 = &unk_26FAEAF18;
  *((void *)&v41 + 1) = 0;
  BYTE8(v42) = 0;
  v34[0] = &unk_26FAEAF48;
  v34[1] = v50;
  Matrix<double>::~Matrix((uint64_t)&v41);
  LODWORD(v42) = 1;
  DWORD1(v42) = v51;
  int v31 = 1;
  unsigned int v32 = v51;
  char v33 = 0;
  *(void *)&long long v41 = &unk_26FAEAF18;
  *((void *)&v41 + 1) = 0;
  BYTE8(v42) = 0;
  int v29 = &unk_26FAEAF48;
  uint64_t v30 = v50 + 8 * v51;
  Matrix<double>::~Matrix((uint64_t)&v41);
  Matrix<double>::operator+=((uint64_t)v34, (uint64_t)&v29);
  Matrix<double>::~Matrix((uint64_t)&v29);
  LODWORD(v42) = 1;
  DWORD1(v42) = HIDWORD(v48);
  int v31 = 1;
  unsigned int v32 = HIDWORD(v48);
  char v33 = 0;
  *(void *)&long long v41 = &unk_26FAEAF18;
  *((void *)&v41 + 1) = 0;
  BYTE8(v42) = 0;
  int v29 = &unk_26FAEAF48;
  uint64_t v30 = v47;
  Matrix<double>::~Matrix((uint64_t)&v41);
  Matrix<double>::operator+=((uint64_t)v34, (uint64_t)&v29);
  Matrix<double>::~Matrix((uint64_t)&v29);
  LODWORD(v42) = 1;
  DWORD1(v42) = HIDWORD(v48);
  int v31 = 1;
  unsigned int v32 = HIDWORD(v48);
  char v33 = 0;
  *(void *)&long long v41 = &unk_26FAEAF18;
  *((void *)&v41 + 1) = 0;
  BYTE8(v42) = 0;
  int v29 = &unk_26FAEAF48;
  uint64_t v30 = v47 + 8 * HIDWORD(v48);
  Matrix<double>::~Matrix((uint64_t)&v41);
  Matrix<double>::operator+=((uint64_t)v34, (uint64_t)&v29);
  Matrix<double>::~Matrix((uint64_t)&v29);
  Matrix<double>::DotDivInPlace((uint64_t)v38, (uint64_t)v34);
  *a5 = 0;
  unint64_t v25 = v40;
  if (v40)
  {
    unsigned int v26 = 0;
    unint64_t v27 = 0;
    do
    {
      if (fabs(*(double *)(v39 + 8 * v27)) < a6)
      {
        *(_DWORD *)(*(void *)(a4 + 8) + 4 * v26) = v27;
        unsigned int v26 = *a5 + 1;
        *a5 = v26;
        unint64_t v25 = v40;
      }
      ++v27;
    }
    while (v27 < v25);
  }
  Matrix<double>::~Matrix((uint64_t)v34);
  Matrix<double>::~Matrix((uint64_t)v38);
  Matrix<double>::~Matrix((uint64_t)&v46);
  Matrix<double>::~Matrix((uint64_t)&v49);
  Matrix<double>::~Matrix((uint64_t)v52);
  return 0;
}

void sub_24693A034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  Matrix<double>::~Matrix((uint64_t)&a13);
  Matrix<double>::~Matrix((uint64_t)&a17);
  Matrix<double>::~Matrix((uint64_t)&a31);
  Matrix<double>::~Matrix(v31 - 160);
  Matrix<double>::~Matrix(v31 - 128);
  _Unwind_Resume(a1);
}

void Algo::Ransac()
{
  unsigned int v0 = &unk_26FAEAFB0;
  operator new[]();
}

void sub_24693A1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  Matrix<BOOL>::~Matrix((uint64_t)va);
  Matrix<BOOL>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Algo::Ransac(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7, uint64_t a8, double a9, double a10, uint64_t a11, unsigned int *a12)
{
  unsigned int v20 = *(_DWORD *)(a1 + 20);
  CRandomGenerator::CRandomGenerator((CRandomGenerator *)v45, a6);
  unsigned int v21 = 0;
  char v32 = 0;
  *a12 = 0;
  uint64_t v44 = 0;
  BOOL v43 = 0;
  double v22 = 1.0;
  do
  {
    if (v22 <= (double)v21) {
      break;
    }
    unsigned int v34 = v21;
    uint64_t v42 = 0;
    int v23 = 1;
    unsigned int v24 = 1;
    memset(v41, 0, sizeof(v41));
    while (v23)
    {
      Matrix<unsigned int>::Matrix((uint64_t)&v37, 1, a3);
      char v37 = &unk_26FAEC6F8;
      Algo::RandomSample(v20, (CRandomGenerator *)v45, (uint64_t)&v37);
      if (!a7) {
        goto LABEL_13;
      }
      if (a3)
      {
        uint64_t v25 = (v40 * v39);
        unsigned int v26 = (unsigned int *)__src;
        uint64_t v27 = a3;
        while (1)
        {
          if (!v25 || (uint64_t v28 = *v26, *(_DWORD *)(a8 + 20) * *(_DWORD *)(a8 + 16) <= v28)) {
            __assert_rtn("operator()", "Matrix.hpp", 131, "index < m_rows * m_cols");
          }
          if (*(unsigned char *)(*(void *)(a8 + 8) + v28)) {
            break;
          }
          --v25;
          ++v26;
          if (!--v27) {
            goto LABEL_12;
          }
        }
LABEL_13:
        Matrix<double>::Matrix((uint64_t)v36, 3, a3);
        *(void *)unsigned int v36 = &unk_26FAEB100;
        Matrix<double>::Matrix((uint64_t)v35, 3, a3);
        v35[0] = &unk_26FAEB100;
        MatrixNxPts<3u,double>::CopyCols((uint64_t)v36, a1, (uint64_t)&v37);
        MatrixNxPts<3u,double>::CopyCols((uint64_t)v35, a2, (uint64_t)&v37);
        Algo::FundMatrix3x3((uint64_t)v36, (uint64_t)v35, (uint64_t)v41, &v43, (double *)&v44, a10);
        if (v43) {
          int v23 = 0;
        }
        else {
          int v23 = a7;
        }
        Matrix<double>::~Matrix((uint64_t)v35);
        Matrix<double>::~Matrix((uint64_t)v36);
        goto LABEL_17;
      }
LABEL_12:
      int v23 = 1;
LABEL_17:
      ++v24;
      Matrix<unsigned int>::~Matrix((uint64_t)&v37);
      if (v24 > a4) {
        break;
      }
    }
    Matrix<unsigned int>::Matrix((uint64_t)&v37, 1, *(_DWORD *)(a1 + 20));
    char v37 = &unk_26FAEC6F8;
    v36[0] = 0;
    Algo::FundDist((const double *)v41, a1, a2, (uint64_t)&v37, v36, a9);
    unsigned int v29 = v36[0];
    if (v36[0] > *a12)
    {
      Matrix<float>::Resize(a11, v39, v40);
      memcpy(*(void **)(a11 + 8), __src, 4 * *(unsigned int *)(a11 + 16) * (unint64_t)*(unsigned int *)(a11 + 20));
      *a12 = v29;
      long double v30 = pow((double)v29 / (double)v20, (double)a3);
      char v32 = 1;
      double v22 = -6.90775528 / log(fmin(fmax(1.0 - v30, 2.22044605e-16), 1.0));
    }
    unsigned int v21 = v34 + 1;
    Matrix<unsigned int>::~Matrix((uint64_t)&v37);
  }
  while (v34 + 1 <= a5);
  CRandomGenerator::~CRandomGenerator((CRandomGenerator *)v45);
  return (v32 & 1u) - 1;
}

void sub_24693A5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

uint64_t Algo::RansacHomography(int a1, int a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8, _DWORD *a9)
{
  *a8 = 0;
  CRandomGenerator::CRandomGenerator((CRandomGenerator *)v10, a6);
  if ((double)0 < 1.0) {
    operator new[]();
  }
  if (a9) {
    *a9 = -1;
  }
  CRandomGenerator::~CRandomGenerator((CRandomGenerator *)v10);
  return 0xFFFFFFFFLL;
}

void sub_24693AA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

double Algo::Mean(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 == 1)
  {
    Matrix<double>::Resize(a2, 1, 1);
    double v11 = 0.0;
    vDSPMeanv<double>(*(const double **)(a1 + 8), 1, &v11, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    double result = v11;
    **(double **)(a2 + 8) = v11;
  }
  else
  {
    if (!v4) {
      Algo::Mean();
    }
    uint64_t v5 = *(unsigned int *)(a1 + 20);
    Matrix<double>::Resize(a2, 1, *(_DWORD *)(a1 + 20));
    bzero(*(void **)(a2 + 8), 8 * (*(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16)));
    unsigned int v6 = 0;
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    do
    {
      if (v5)
      {
        if (v6 < v7)
        {
          unint64_t v8 = 0;
          uint64_t v9 = *(unsigned int *)(a1 + 20);
          while (v9 != v8)
          {
            if (!*(_DWORD *)(a2 + 16) || v8 >= *(unsigned int *)(a2 + 20)) {
              GMC_Homography();
            }
            *(double *)(*(void *)(a2 + 8) + 8 * v8) = *(double *)(*(void *)(a1 + 8)
                                                                  + 8 * v9 * v6
                                                                  + 8 * v8)
                                                      + *(double *)(*(void *)(a2 + 8) + 8 * v8);
            if (v5 == ++v8) {
              goto LABEL_11;
            }
          }
        }
        MatrixNxPts<3u,double>::CloneColumn();
      }
LABEL_11:
      ++v6;
    }
    while (v6 != v4);
    double v11 = (double)v4;
    vDSPVsdiv<double>(*(const double **)(a2 + 8), 1, &v11, *(double **)(a2 + 8), 1, *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16));
  }
  return result;
}

Algo *Algo::Gcd(Algo *this, uint64_t a2)
{
  if (!a2) {
    return this;
  }
  do
  {
    uint64_t v2 = a2;
    a2 = this % a2;
    LODWORD(this) = v2;
  }
  while (a2);
  return (Algo *)v2;
}

uint64_t Algo::Lcm(Algo *this, unsigned int a2)
{
  unsigned int v2 = this;
  if (a2)
  {
    unsigned int v3 = a2;
    unsigned int v4 = this;
    do
    {
      unsigned int v2 = v3;
      unsigned int v3 = v4 % v3;
      unsigned int v4 = v2;
    }
    while (v3);
  }
  return this / v2 * a2;
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unsigned int v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  double v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>()
{
}

void sub_24693AECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double *,double (*)(double),int),double const*,double *,double (*)(double),int>>(uint64_t *a1)
{
  unsigned int v4 = a1;
  uint64_t v1 = std::__thread_local_data();
  unsigned int v2 = (const void *)*v4;
  uint64_t *v4 = 0;
  pthread_setspecific(v1->__key_, v2);
  ((void (*)(uint64_t, uint64_t, uint64_t, void))v4[1])(v4[2], v4[3], v4[4], *((unsigned int *)v4 + 10));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double *,double (*)(double),int),double const*,double *,double (*)(double),int>>::reset[abi:ne180100](&v4, 0);
  return 0;
}

void sub_24693AF7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double *,double (*)(double),int),double const*,double *,double (*)(double),int>>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double *,double (*)(double),int),double const*,double *,double (*)(double),int>>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  unsigned int v2 = *result;
  *double result = a2;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x24C53D6E0);
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x24C53D590]();
    JUMPOUT(0x24C53D6E0);
  }
  return result;
}

void std::thread::thread<void (&)(double const*,double const*,double *,double (*)(double,double),int),double const*&,double const*&,double *&,double (*)(double,double),int &,void>()
{
}

void sub_24693B14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double const*,double *,double (*)(double,double),int),double const*,double const*,double *,double (*)(double,double),int>>(uint64_t *a1)
{
  unsigned int v4 = a1;
  uint64_t v1 = std::__thread_local_data();
  unsigned int v2 = (const void *)*v4;
  uint64_t *v4 = 0;
  pthread_setspecific(v1->__key_, v2);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))v4[1])(v4[2], v4[3], v4[4], v4[5], *((unsigned int *)v4 + 12));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double const*,double *,double (*)(double,double),int),double const*,double const*,double *,double (*)(double,double),int>>::reset[abi:ne180100](&v4, 0);
  return 0;
}

void sub_24693B200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double const*,double *,double (*)(double,double),int),double const*,double const*,double *,double (*)(double,double),int>>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double const*,double *,double (*)(double,double),int),double const*,double const*,double *,double (*)(double,double),int>>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  unsigned int v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x24C53D6E0);
  }
  return result;
}

void MatrixNxPts<9u,double>::~MatrixNxPts(uint64_t a1)
{
  Matrix<double>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

uint64_t Matrix<double>::Matrix<double const>(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  *(void *)uint64_t result = &unk_26FAEAF18;
  if (a5) {
    operator new[]();
  }
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a4;
  *(unsigned char *)(result + Matrix<double>::~Matrix((uint64_t)this + 24) = a5;
  return result;
}

double Matrix<double>::operator+=(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20);
  if (v2 != *(_DWORD *)(a1 + 20) || (int v3 = *(_DWORD *)(a2 + 16), v3 != *(_DWORD *)(a1 + 16))) {
    Matrix<float>::operator-();
  }
  unsigned int v4 = v3 * v2;
  if (v4)
  {
    uint64_t v5 = *(double **)(a1 + 8);
    unsigned int v6 = &v5[v4];
    unsigned int v7 = *(double **)(a2 + 8);
    do
    {
      double v8 = *v7++;
      double result = *v5 + v8;
      *v5++ = result;
    }
    while (v5 < v6);
  }
  return result;
}

void SparseMatrix::SparseMatrix(SparseMatrix *this, int a2, int a3, const int *a4, int a5, int a6)
{
  *((_DWORD *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  *((_DWORD *)this + 11) = a6;
  *((_DWORD *)this + 8) = a5 + a3 * a6;
  *((_DWORD *)this + 9) = a3;
  SparseMatrix::allocateMem(this);
}

void SparseMatrix::allocateMem(SparseMatrix *this)
{
}

void SparseMatrix::SparseMatrix(SparseMatrix *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

double SparseMatrix::freeMem(SparseMatrix *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    MEMORY[0x24C53D6C0](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    MEMORY[0x24C53D6C0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x24C53D6C0](v4, 0x1000C8052888210);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    MEMORY[0x24C53D6C0](v5, 0x1000C8052888210);
  }
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void SparseMatrix::~SparseMatrix(SparseMatrix *this)
{
}

{
  SparseMatrix::freeMem(this);
}

void SparseMatrix::SparseMatrix(SparseMatrix *this, const SparseMatrix *a2)
{
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  SparseMatrix::allocateMem(this);
}

double SparseMatrix::SparseMatrix(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  long long v2 = a2[2];
  a1[1] = a2[1];
  a1[2] = v2;
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

{
  long long v2;
  double result;

  *a1 = *a2;
  long long v2 = a2[2];
  a1[1] = a2[1];
  a1[2] = v2;
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

SparseMatrix *SparseMatrix::operator=(SparseMatrix *a1, _OWORD *a2)
{
  SparseMatrix::freeMem(a1);
  *(_OWORD *)a1 = *a2;
  long long v4 = a2[2];
  *((_OWORD *)a1 + 1) = a2[1];
  *((_OWORD *)a1 + 2) = v4;
  *a2 = 0u;
  a2[1] = 0u;
  return a1;
}

void *SparseMatrix::AddValue(void *this, int a2, int a3, double a4)
{
  uint64_t v4 = this[3];
  int v5 = *(_DWORD *)(v4 + 4 * a3) + *(_DWORD *)(this[2] + 4 * a3);
  uint64_t v6 = this[1];
  *(double *)(*this + 8 * v5) = a4;
  *(_DWORD *)(v6 + 4 * v5) = a2;
  ++*(_DWORD *)(v4 + 4 * a3);
  return this;
}

uint64_t SparseMatrix::Expand(uint64_t this, int a2, unint64_t a3)
{
  unint64_t v3 = *(int *)(this + 44);
  if (v3 < a3) {
    SparseMatrix::Expand();
  }
  *(_DWORD *)(this + 40) += a2;
  *(_DWORD *)(this + 44) = v3 - a3;
  return this;
}

uint64_t SparseMatrix::Squeeze(uint64_t this, int a2, int a3)
{
  int v3 = *(_DWORD *)(this + 36);
  int v4 = *(_DWORD *)(this + 44) + a3;
  *(_DWORD *)(this + 40) -= a2;
  *(_DWORD *)(this + 44) = v4;
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(this + 24);
    do
      *(_DWORD *)(v6 + 4 * v5++) -= a3;
    while (v5 < *(int *)(this + 36));
  }
  return this;
}

double SparseMatrix::operator()(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(a1 + 40) <= a2 || *(_DWORD *)(a1 + 36) <= a3) {
    SparseMatrix::operator()();
  }
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 24) + 4 * a3);
  double result = 0.0;
  if ((int)v3 >= 1)
  {
    for (uint64_t i = *(int *)(*(void *)(a1 + 16) + 4 * a3); *(_DWORD *)(*(void *)(a1 + 8) + 4 * i) != a2; ++i)
    {
      if (!--v3) {
        return result;
      }
    }
    return *(double *)(*(void *)a1 + 8 * i);
  }
  return result;
}

uint64_t SparseMatrix::GetMatrixHeight(SparseMatrix *this)
{
  return *((int *)this + 10);
}

uint64_t SparseMatrix::GetMatrixWidth(SparseMatrix *this)
{
  return *((int *)this + 9);
}

void *SparseMatrix::MultATagxB@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (void *)Matrix<double>::Matrix(a3, 1, *((_DWORD *)a1 + 9));
  *double result = &unk_26FAEAF48;
  uint64_t v6 = *((unsigned int *)a1 + 9);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1[2];
    uint64_t v9 = a1[3];
    do
    {
      *(void *)(result[1] + 8 * v7) = 0;
      uint64_t v10 = *(int *)(v9 + 4 * v7);
      if ((int)v10 >= 1)
      {
        uint64_t v11 = *(int *)(v8 + 4 * v7);
        uint64_t v12 = v10 + v11;
        uint64_t v13 = *a1;
        uint64_t v14 = a1[1];
        do
        {
          *(double *)(result[1] + 8 * v7) = *(double *)(result[1] + 8 * v7)
                                          + *(double *)(v13 + 8 * v11)
                                          * *(double *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(v14 + 4 * v11));
          ++v11;
        }
        while (v11 < v12);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

void SparseMatrix::operator*(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Matrix<double>::Matrix(a3, 1, *((_DWORD *)a1 + 10));
  *(void *)a3 = &unk_26FAEAF48;
  bzero(*(void **)(a3 + 8), 8 * (*(_DWORD *)(a3 + 20) * *(_DWORD *)(a3 + 16)));
  uint64_t v6 = *((unsigned int *)a1 + 9);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1[2];
    uint64_t v9 = a1[3];
    do
    {
      uint64_t v10 = *(int *)(v9 + 4 * v7);
      if ((int)v10 >= 1)
      {
        uint64_t v11 = *(int *)(v8 + 4 * v7);
        uint64_t v12 = v10 + v11;
        uint64_t v13 = *a1;
        uint64_t v14 = a1[1];
        do
        {
          *(double *)(*(void *)(a3 + 8) + 8 * *(unsigned int *)(v14 + 4 * v11)) = *(double *)(*(void *)(a3 + 8)
                                                                                                + 8
                                                                                                * *(unsigned int *)(v14 + 4 * v11))
                                                                                    + *(double *)(v13 + 8 * v11)
                                                                                    * *(double *)(*(void *)(a2 + 8)
                                                                                                + 8 * v7);
          ++v11;
        }
        while (v11 < v12);
      }
      ++v7;
    }
    while (v7 != v6);
  }
}

void *SparseMatrix::ReverseStorageOfColumn(void *this, int a2)
{
  uint64_t v2 = *(int *)(this[3] + 4 * a2);
  if (v2)
  {
    uint64_t v3 = *(int *)(this[2] + 4 * a2);
    int v4 = (uint64_t *)(*this + 8 * v3);
    uint64_t v5 = (uint64_t *)(8 * v2 + 8 * v3 + *this - 8);
    do
    {
      if (v5 == v4) {
        break;
      }
      uint64_t v6 = *v4;
      *v4++ = *v5;
      BOOL v7 = v5 == v4;
      *v5-- = v6;
    }
    while (!v7);
    uint64_t v8 = this[1];
    uint64_t v9 = (int *)(v8 + 4 * v3);
    uint64_t v10 = (int *)(4 * v2 + 4 * v3 + v8 - 4);
    do
    {
      if (v10 == v9) {
        break;
      }
      int v11 = *v9;
      *v9++ = *v10;
      BOOL v7 = v10 == v9;
      *v10-- = v11;
    }
    while (!v7);
  }
  return this;
}

double SparseMatrix::GetColumnAsDenseVector@<D0>(SparseMatrix *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  Matrix<double>::Matrix(a3, 1, *((_DWORD *)this + 10));
  *(void *)a3 = &unk_26FAEAF48;
  bzero(*(void **)(a3 + 8), 8 * (*(_DWORD *)(a3 + 20) * *(_DWORD *)(a3 + 16)));
  uint64_t v7 = *(int *)(*((void *)this + 3) + 4 * a2);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *(int *)(*((void *)this + 2) + 4 * a2);
    uint64_t v10 = v7 + v9;
    uint64_t v11 = *(void *)this;
    do
    {
      double result = *(double *)(v11 + 8 * v9);
      *(double *)(*(void *)(a3 + 8) + 8 * *(unsigned int *)(v8 + 4 * v9++)) = result;
    }
    while (v9 < v10);
  }
  return result;
}

double SparseMatrix::CopyColumnToDenseVector(SparseMatrix *this, int a2, double *a3)
{
  bzero(a3, 8 * *((int *)this + 10));
  uint64_t v7 = *(int *)(*((void *)this + 3) + 4 * a2);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *(int *)(*((void *)this + 2) + 4 * a2);
    uint64_t v10 = v7 + v9;
    uint64_t v11 = *(void *)this;
    do
    {
      double result = *(double *)(v11 + 8 * v9);
      a3[*(int *)(v8 + 4 * v9++)] = result;
    }
    while (v9 < v10);
  }
  return result;
}

uint64_t SparseMatrix::GetColumnAsSparseVector@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(this + 40);
  int v4 = *(_DWORD *)(*(void *)(this + 24) + 4 * a2);
  uint64_t v5 = *(int *)(*(void *)(this + 16) + 4 * a2);
  uint64_t v6 = *(void *)(this + 8) + 4 * v5;
  uint64_t v7 = *(void *)this + 8 * v5;
  *(_DWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4;
  *(_DWORD *)(a3 + Matrix<double>::~Matrix((uint64_t)this + 24) = v3;
  *(unsigned char *)(a3 + 28) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(a3 + 48) = 0;
  return this;
}

uint64_t SparseMatrix::SolveLTInPlace(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 36);
  if (v2 != *(_DWORD *)(result + 40)) {
    SparseMatrix::SolveLTInPlace();
  }
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    double v5 = *(double *)result;
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v7 = *(void *)(result + 24);
    uint64_t v8 = v4 + 8;
    uint64_t v9 = *(void *)result + 8;
    do
    {
      uint64_t v10 = *(int *)(v6 + 4 * v3);
      double v11 = *(double *)(v4 + 8 * v3) / *(double *)(*(void *)&v5 + 8 * v10);
      *(double *)(v4 + 8 * v3) = v11;
      uint64_t v12 = *(unsigned int *)(v7 + 4 * v3);
      if ((int)v12 >= 2)
      {
        uint64_t v13 = (double *)(v9 + 8 * v10);
        uint64_t v14 = v12 - 1;
        double result = v8;
        do
        {
          double v15 = *v13++;
          *(double *)double result = *(double *)result - v15 * v11;
          result += 8;
          --v14;
        }
        while (v14);
      }
      ++v3;
      v8 += 8;
    }
    while (v3 != v2);
  }
  return result;
}

void SparseMatrix::Zero(void **this)
{
}

void SparseVector::SparseVector(SparseVector *this, int a2, int a3, int *a4, double *a5, char a6)
{
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = a3;
  *((_DWORD *)this + 6) = a2;
  *((unsigned char *)this + 28) = a6;
  *((_DWORD *)this + 8) = 0;
  if (a6) {
    operator new[]();
  }
  *(void *)this = a5;
  *((void *)this + 1) = a4;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = 0;
}

void SparseVector::SparseVector(SparseVector *this, int a2, int a3)
{
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = a2;
  *((unsigned char *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  operator new[]();
}

void SparseVector::~SparseVector(SparseVector *this)
{
  if (*((unsigned char *)this + 28))
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      MEMORY[0x24C53D6C0](v2, 0x1000C8052888210);
    }
    if (*(void *)this) {
      MEMORY[0x24C53D6C0](*(void *)this, 0x1000C8000313F17);
    }
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    MEMORY[0x24C53D6C0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    MEMORY[0x24C53D6C0](v4, 0x1000C8000313F17);
  }
}

__n128 SparseVector::SparseVector(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = result;
  *(unsigned char *)(a2 + 28) = 0;
  return result;
}

{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = result;
  *(unsigned char *)(a2 + 28) = 0;
  return result;
}

void SparseVector::SparseVector(SparseVector *this, const SparseVector *a2)
{
  uint64_t v2 = *(void *)((char *)a2 + 20);
  *((_DWORD *)this + 4) = v2;
  *(void *)((char *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v2;
  *((unsigned char *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  operator new[]();
}

uint64_t SparseVector::operator=(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 28)) {
    SparseVector::operator=();
  }
  if (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      MEMORY[0x24C53D6C0](v4, 0x1000C8052888210);
    }
    if (*(void *)a1) {
      MEMORY[0x24C53D6C0](*(void *)a1, 0x1000C8000313F17);
    }
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      MEMORY[0x24C53D6C0](v5, 0x1000C8052888210);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      MEMORY[0x24C53D6C0](v6, 0x1000C8000313F17);
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + Matrix<double>::~Matrix((uint64_t)this + 24) = *(_DWORD *)(a2 + 24);
    operator new[]();
  }
  memcpy(*(void **)(a1 + 8), *(const void **)(a2 + 8), 4 * *(int *)(a2 + 20));
  memcpy(*(void **)a1, *(const void **)a2, 8 * *(int *)(a2 + 20));
  *(void *)(a1 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(a2 + 20);
  return a1;
}

uint64_t SparseVector::MultATagxB(uint64_t this, const SparseVector *a2)
{
  int v2 = 0;
  LODWORD(i) = 0;
  uint64_t v4 = *(int **)(this + 8);
  int v5 = *(_DWORD *)(this + 20);
  double v6 = 0.0;
  uint64_t v7 = (int *)*((void *)a2 + 1);
  while (2)
  {
    int v8 = *v7;
LABEL_3:
    int v9 = *v4;
    ++v7;
    for (uint64_t i = (int)i; ; ++i)
    {
      if (v9 < v8)
      {
        if (++v2 >= v5) {
          return this;
        }
        --v7;
        ++v4;
        goto LABEL_3;
      }
      if (v8 >= v9) {
        break;
      }
      if ((int)i + 1 >= v5) {
        return this;
      }
      int v10 = *v7++;
      int v8 = v10;
    }
    double v6 = v6 + *(double *)(*(void *)this + 8 * v2++) * *(double *)(*(void *)a2 + 8 * i);
    if (v2 < v5)
    {
      LODWORD(i) = i + 1;
      if ((int)i < *((_DWORD *)a2 + 5))
      {
        ++v4;
        continue;
      }
    }
    return this;
  }
}

uint64_t SparseVector::AddWithFactor(uint64_t this, double **a2, double a3)
{
  if (!*(unsigned char *)(this + 28)) {
    SparseVector::AddWithFactor();
  }
  *(_DWORD *)(this + 32) = 0;
  uint64_t v3 = *((int *)a2 + 5);
  uint64_t v4 = *(double **)this;
  int v5 = *(int **)(this + 8);
  uint64_t v6 = *(int *)(this + 20);
  unint64_t v7 = *(void *)this + 8 * v6;
  int v8 = *a2;
  int v9 = a2[1];
  unint64_t v10 = (unint64_t)&(*a2)[v3];
  int v11 = 0;
  if ((int)v6 >= 1 && (int)v3 >= 1)
  {
    int v13 = *(_DWORD *)v9;
    int v14 = *v5;
    double v15 = *(_DWORD **)(this + 8);
    double v16 = *(double **)this;
    while (1)
    {
      if (v14 == v13)
      {
        if (*(_DWORD *)(this + 24) <= v13 || v11 >= *(_DWORD *)(this + 16)) {
          SparseVector::AddWithFactor();
        }
        double v17 = *v16++;
        double v18 = *v8;
        uint64_t v19 = *(void *)(this + 40);
        *(_DWORD *)(*(void *)(this + 48) + 4 * v11) = v13;
        uint64_t v20 = *(int *)(this + 32);
        *(double *)(v19 + 8 * v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v17 + a3 * v18;
        int v11 = v20 + 1;
        *(_DWORD *)(this + 32) = v11;
        LODWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 17) = v15[1];
        ++v15;
        int v14 = LODWORD(v17);
      }
      else
      {
        if (v14 < v13)
        {
          if (*(_DWORD *)(this + 24) <= v14 || v11 >= *(_DWORD *)(this + 16)) {
            SparseVector::AddWithFactor();
          }
          double v21 = *v16++;
          uint64_t v22 = *(void *)(this + 40);
          *(_DWORD *)(*(void *)(this + 48) + 4 * v11) = v14;
          uint64_t v23 = *(int *)(this + 32);
          *(double *)(v22 + 8 * v23) = v21;
          int v11 = v23 + 1;
          *(_DWORD *)(this + 32) = v11;
          LODWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 21) = v15[1];
          ++v15;
          int v14 = LODWORD(v21);
          goto LABEL_20;
        }
        if (*(_DWORD *)(this + 24) <= v13 || v11 >= *(_DWORD *)(this + 16)) {
          SparseVector::AddWithFactor();
        }
        double v24 = *v8 * a3;
        uint64_t v25 = *(void *)(this + 40);
        *(_DWORD *)(*(void *)(this + 48) + 4 * v11) = v13;
        uint64_t v26 = *(int *)(this + 32);
        *(double *)(v25 + 8 * v26) = v24;
        int v11 = v26 + 1;
        *(_DWORD *)(this + 32) = v11;
      }
      ++v8;
      int v27 = *((_DWORD *)v9 + 1);
      int v9 = (double *)((char *)v9 + 4);
      int v13 = v27;
LABEL_20:
      if ((unint64_t)v16 >= v7 || (unint64_t)v8 >= v10) {
        goto LABEL_26;
      }
    }
  }
  double v16 = *(double **)this;
  double v15 = *(_DWORD **)(this + 8);
LABEL_26:
  while ((unint64_t)v16 < v7)
  {
    if (*(_DWORD *)(this + 24) <= *v15 || v11 >= *(_DWORD *)(this + 16)) {
      SparseVector::AddWithFactor();
    }
    double v28 = *v16++;
    uint64_t v29 = *(void *)(this + 40);
    *(_DWORD *)(*(void *)(this + 48) + 4 * v11) = *v15;
    uint64_t v30 = *(int *)(this + 32);
    *(double *)(v29 + 8 * v3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v28;
    int v11 = v30 + 1;
    *(_DWORD *)(this + 32) = v11;
    ++v15;
  }
  if ((unint64_t)v8 >= v10)
  {
    uint64_t v33 = *(void *)(this + 40);
    uint64_t v32 = *(void *)(this + 48);
  }
  else
  {
    do
    {
      if (*(_DWORD *)(this + 24) <= *(_DWORD *)v9 || v11 >= *(_DWORD *)(this + 16)) {
        SparseVector::AddWithFactor();
      }
      double v31 = *v8++;
      uint64_t v33 = *(void *)(this + 40);
      uint64_t v32 = *(void *)(this + 48);
      *(_DWORD *)(v32 + 4 * v11) = *(_DWORD *)v9;
      uint64_t v34 = *(int *)(this + 32);
      *(double *)(v33 + 8 * v34) = v31 * a3;
      int v11 = v34 + 1;
      *(_DWORD *)(this + 32) = v11;
      int v9 = (double *)((char *)v9 + 4);
    }
    while ((unint64_t)v8 < v10);
  }
  *(void *)this = v33;
  *(void *)(this + 8) = v32;
  *(void *)(this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4;
  *(void *)(this + 48) = v5;
  *(_DWORD *)(this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v11;
  return this;
}

void SparseVector::operator-(uint64_t a1@<X0>, uint64_t a2@<X1>, SparseVector *a3@<X8>)
{
}

void sub_24693C758(_Unwind_Exception *a1)
{
  SparseVector::~SparseVector(v1);
  _Unwind_Resume(a1);
}

double operator+=(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 20);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(double **)a2;
    uint64_t v4 = *(_DWORD **)(a2 + 8);
    do
    {
      double v5 = *v3++;
      double v6 = v5;
      LODWORD(v5) = *v4++;
      uint64_t v7 = *(void *)(a1 + 8);
      double result = v6 + *(double *)(v7 + 8 * LODWORD(v5));
      *(double *)(v7 + 8 * LODWORD(v5)) = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

id *H16ISPDisplayStrobePrepare(int a1)
{
  v31[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = (id *)malloc_type_calloc(1uLL, 0x28uLL, 0x800402FCC0CB6uLL);
  if (!v2) {
    return v2;
  }
  [MEMORY[0x263F158F8] begin];
  [MEMORY[0x263F158F8] setValue:*MEMORY[0x263EFFB40] forKey:*MEMORY[0x263F15FC8]];
  int v3 = 0;
  uint64_t v4 = (FILE **)MEMORY[0x263EF8348];
  while (1)
  {
    uint64_t v5 = [MEMORY[0x263F15778] mainDisplay];
    v2[1] = (id)v5;
    if (v5) {
      break;
    }
    fprintf(*v4, "warning: display was expected, but was not found.  Retrying main display, attempt=%d \n", v3);
    usleep(0x7A120u);
    if (++v3 == 10)
    {
      if (!v2[1])
      {
        fwrite("warning: display was expected, but was not found.\n", 0x32uLL, 1uLL, *v4);
        [MEMORY[0x263F158F8] commit];
        free(v2);
        return 0;
      }
      break;
    }
  }
  v2[2] = (id)[MEMORY[0x263F157E8] layer];
  v2[3] = (id)[MEMORY[0x263F157E8] layer];
  id v6 = v2[2];
  [v2[1] bounds];
  objc_msgSend(v6, "setFrame:");
  CGColorRef ConstantColor = CGColorGetConstantColor((CFStringRef)*MEMORY[0x263F001C0]);
  if (ConstantColor)
  {
    CGColorRef v8 = ConstantColor;
    [v2[2] setContents:0];
    [v2[2] setBackgroundColor:v8];
  }
  double v9 = 0.0;
  double v10 = 0.0;
  if (a1)
  {
    *(_DWORD *)buffer = 0;
    io_registry_entry_t v11 = IORegistryEntryFromPath(*MEMORY[0x263F0EC88], "IODeviceTree:/product");
    if (v11
      && (CFuint64_t Property = (const __CFData *)IORegistryEntryCreateCFProperty(v11, @"island-notch-location", 0, 0)) != 0)
    {
      CFDataRef v13 = CFProperty;
      v32.length = (uint64_t)fmin((double)CFDataGetLength(CFProperty), 4.0);
      v32.location = 0;
      CFDataGetBytes(v13, v32, buffer);
      if (*(_DWORD *)buffer)
      {
        double v10 = (double)*(int *)buffer + 40.0;
LABEL_15:
        MGGetFloat32Answer();
        double v9 = v17;
        goto LABEL_16;
      }
      int v14 = *v4;
      double v15 = "warning: invalid strobe entry found in the registry";
      size_t v16 = 51;
    }
    else
    {
      int v14 = *v4;
      double v15 = "warning: strobe coordinate not found in the registry";
      size_t v16 = 52;
    }
    fwrite(v15, v16, 1uLL, v14);
    double v10 = 184.0;
    goto LABEL_15;
  }
LABEL_16:
  id v18 = v2[3];
  [v2[1] bounds];
  double v20 = v19;
  [v2[1] bounds];
  objc_msgSend(v18, "setFrame:", 0.0, v10, v20);
  [v2[3] setCornerRadius:v9];
  [v2[3] setCornerCurve:*MEMORY[0x263F15A20]];
  [v2[3] setMaskedCorners:3];
  [v2[3] setMasksToBounds:1];
  [v2[2] addSublayer:v2[3]];
  v30[0] = *MEMORY[0x263F159E0];
  uint64_t v21 = [v2[1] name];
  uint64_t v22 = *MEMORY[0x263F159E8];
  v31[0] = v21;
  v31[1] = MEMORY[0x263EFFA88];
  uint64_t v23 = *MEMORY[0x263F15A08];
  v30[1] = v22;
  void v30[2] = v23;
  void v31[2] = MEMORY[0x263EFFA88];
  uint64_t v24 = [NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:3];
  id v25 = (id)[MEMORY[0x263F15920] contextWithOptions:v24];
  *uint64_t v2 = v25;
  [v25 setLayer:v2[2]];
  LODWORD(v26) = 2139095039;
  [*v2 setLevel:v26];
  [MEMORY[0x263F158F8] commit];
  id v27 = objc_alloc_init(MEMORY[0x263F34238]);
  v2[4] = v27;
  if (v27) {
    return v2;
  }
  fwrite("error: brightness system client initialization failed.\n", 0x37uLL, 1uLL, *v4);
  H16ISPDisplayStrobeDispose(v2);
  return 0;
}

uint64_t H16ISPDisplayStrobeDispose(void **a1)
{
  if (!a1) {
    return 3758097090;
  }
  uint64_t v2 = *a1;
  if (v2)
  {
    [v2 dealloc];
    *a1 = 0;
  }
  int v3 = a1[4];
  if (v3) {
    [v3 dealloc];
  }
  free(a1);
  return 0;
}

uint64_t H16ISPDisplayStrobeSetScreenBrightness(uint64_t a1, int a2)
{
  uint64_t v2 = 3758097090;
  if (a1)
  {
    if (a2 == 1)
    {
      int v3 = *(void **)(a1 + 32);
      if (v3)
      {
        uint64_t v4 = &unk_26FAF77B8;
LABEL_8:
        if ([v3 setProperty:v4 forKey:@"PreStrobe"]) {
          return 0;
        }
        else {
          return 3758097090;
        }
      }
    }
    else
    {
      if (a2) {
        return v2;
      }
      int v3 = *(void **)(a1 + 32);
      if (v3)
      {
        uint64_t v4 = &unk_26FAF77D0;
        goto LABEL_8;
      }
    }
    return 3758097112;
  }
  return v2;
}

uint64_t H16ISPDisplayStrobeSetScreenColor(uint64_t a1, uint64_t a2)
{
  components[4] = *(CGFloat *)MEMORY[0x263EF8340];
  if (!a1) {
    return 3758097090;
  }
  [MEMORY[0x263F158F8] begin];
  [MEMORY[0x263F158F8] setValue:*MEMORY[0x263EFFB40] forKey:*MEMORY[0x263F15FC8]];
  uint64_t v4 = (void *)[MEMORY[0x263EFF980] array];
  if (_AXSInvertColorsEnabled() || _AXSClassicInvertColorsEnabled())
  {
    uint64_t v5 = [MEMORY[0x263F157C8] filterWithType:*MEMORY[0x263F15B30]];
    if (!v5) {
      goto LABEL_9;
    }
    [v4 addObject:v5];
  }
  else
  {
    uint64_t v4 = 0;
  }
  [*(id *)(a1 + 24) setFilters:v4];
LABEL_9:
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CGColorRef v8 = CGColorCreate(DeviceRGB, (const CGFloat *)a2);
  if (v8)
  {
    CGColorRef v9 = v8;
    [*(id *)(a1 + 24) setContents:0];
    [*(id *)(a1 + 24) setBackgroundColor:v9];
    CFRelease(v9);
  }
  memset(components, 0, 24);
  double v10 = 1.0;
  if (*(double *)(a2 + 24) == 0.0) {
    double v10 = 0.0;
  }
  components[3] = v10;
  CGColorRef v11 = CGColorCreate(DeviceRGB, components);
  if (!v11)
  {
    [MEMORY[0x263F158F8] commit];
    if (!DeviceRGB) {
      return 0;
    }
    goto LABEL_15;
  }
  CGColorRef v12 = v11;
  [*(id *)(a1 + 16) setContents:0];
  [*(id *)(a1 + 16) setBackgroundColor:v12];
  [MEMORY[0x263F158F8] commit];
  CFRelease(v12);
  if (DeviceRGB) {
LABEL_15:
  }
    CFRelease(DeviceRGB);
  return 0;
}

uint64_t H16ISPDisplayGetStrobeBrightnessRatio(uint64_t a1, float *a2)
{
  uint64_t v2 = 3758097090;
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = *(void **)(a1 + 32);
      if (v4)
      {
        uint64_t v5 = (void *)[v4 copyPropertyForKey:@"PreStrobeBrightnessRatio"];
        uint64_t v2 = 3758097095;
        if (v5)
        {
          [v5 floatValue];
          *a2 = v6;
          if (v6 == 0.0) {
            return 3758097095;
          }
          else {
            return 0;
          }
        }
      }
    }
  }
  return v2;
}

CFTypeRef H16ISP::CreateFormatedMetadata(uint64_t a1)
{
  v135[20] = *MEMORY[0x263EF8340];
  if (*(_WORD *)a1 != 4142) {
    return 0;
  }
  NamedValues::NamedValues((NamedValues *)&cf);
  NamedValues::NamedValues((NamedValues *)&v121);
  *(void *)__str = 20;
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v118 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v119 = *MEMORY[0x263F8C2B8];
    uint64_t v117 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    while (1)
    {
      uint64_t v5 = *(unsigned int *)(a1 + 4 * v4 + 20);
      if (v5) {
        break;
      }
LABEL_140:
      if (++v4 == v3) {
        goto LABEL_141;
      }
    }
    NamedValues::NamedValues((NamedValues *)&v120);
    uint64_t v7 = (unsigned __int16 *)(a1 + v5);
    CGColorRef v8 = "Shared AiCam";
    switch((int)v4)
    {
      case 0:
        *(void *)__str = "unknown";
        switch(*((_DWORD *)v7 + 4))
        {
          case 0:
            CGColorRef v9 = "green-red";
            goto LABEL_99;
          case 1:
            CGColorRef v9 = "red";
            goto LABEL_99;
          case 2:
            CGColorRef v9 = "blue";
            goto LABEL_99;
          case 3:
            CGColorRef v9 = "green-blue";
LABEL_99:
            *(void *)__str = v9;
            break;
          default:
            break;
        }
        __p[0] = "unknown";
        int v101 = v7[14];
        if (v101 == 2)
        {
          char v102 = "binning 1/4";
        }
        else if (v101 == 1)
        {
          char v102 = "binning 1/2";
        }
        else
        {
          if (v7[14]) {
            goto LABEL_107;
          }
          char v102 = "binning disabled";
        }
        __p[0] = (void *)v102;
LABEL_107:
        *(void *)unsigned int v130 = "unknown";
        int v103 = v7[15];
        if (v103 == 2)
        {
          unsigned int v104 = "binning 1/4";
        }
        else if (v103 == 1)
        {
          unsigned int v104 = "binning 1/2";
        }
        else
        {
          if (v7[15]) {
            goto LABEL_114;
          }
          unsigned int v104 = "binning disabled";
        }
        *(void *)unsigned int v130 = v104;
LABEL_114:
        *(void *)float v129 = "unknown";
        switch(v7[34])
        {
          case 0u:
            char v105 = "raw8";
            goto LABEL_119;
          case 1u:
            char v105 = "raw10";
            goto LABEL_119;
          case 2u:
            char v105 = "raw12";
            goto LABEL_119;
          case 3u:
            char v105 = "raw14";
LABEL_119:
            *(void *)float v129 = v105;
            break;
          default:
            break;
        }
        *(void *)unsigned int v126 = "unknown";
        if (v7[35] == 1)
        {
          float v106 = "unpacked";
        }
        else
        {
          if (v7[35])
          {
LABEL_125:
            *(void *)&double v125 = 1000;
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 43);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 44);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 45);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 46);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 47);
            LODWORD(v107) = *((_DWORD *)v7 + 12);
            double v125 = (double)v107 * 0.00390625;
            LOWORD(v108) = v7[32];
            double v125 = (double)v108 * 0.00390625;
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 72);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 73);
            double v125 = COERCE_DOUBLE(bswap64(*(void *)(v7 + 37)));
            *(void *)&double v125 = v7 + 48;
            *(void *)&double v125 = v7 + 64;
            *(void *)&double v125 = v7 + 80;
            *(void *)&double v125 = v7 + 96;
            unsigned int v109 = *((_DWORD *)v7 + 80);
            unsigned int v110 = *((_DWORD *)v7 + 81);
            unsigned int v123 = bswap32(v110);
            unsigned int v124 = bswap32(v109);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v109;
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = BYTE1(v109);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = BYTE2(v109);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = HIBYTE(v109) & 0xF;
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v109 >> 28;
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = HIBYTE(v110);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = BYTE2(v110);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = BYTE1(v110);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v110;
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = (__int16)v7[168];
            double v125 = (double)(__int16)v7[231] * 0.0000305175781 + (double)(__int16)v7[168];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 338);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 339);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 460);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 461);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[229];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[246];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[247];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[248];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[249];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 500);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 501);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[254];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[255];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[256];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[257];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 129);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 130);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 131);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 132);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 133);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 134);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 135);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[272];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[273];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[282];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[283];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[284];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[285];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[286];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[287];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[288];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[289];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 145);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 146);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[294];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 148);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 149);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 150);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 604);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 605);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 152);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 153);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 154);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[312];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[313];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[314];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[315];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 155);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 632);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[317];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 159);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 162);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[326];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[327];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[328];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[329];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 660);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 661);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 167);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 168);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[338];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[339];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[340];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[341];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 173);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[348];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[349];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[350];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[351];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[352];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[353];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[354];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[355];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[356];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[357];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[358];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[359];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[360];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[361];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[362];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[363];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[364];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[365];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[366];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[367];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[368];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[369];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[370];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[371];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[372];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[373];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 748);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 749);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((char *)v7 + 750);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[377];
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 804);
            LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 805);
            CGColorRef v8 = "Shared Input";
            goto LABEL_138;
          }
          float v106 = "packed";
        }
        *(void *)unsigned int v126 = v106;
        goto LABEL_125;
      case 1:
        double v10 = "unknown";
        *(void *)__str = "unknown";
        int v11 = *v7;
        if (v11 == 2)
        {
          CGColorRef v12 = "R'G'B'";
        }
        else if (v11 == 1)
        {
          CGColorRef v12 = "Y'CbCr 4:2:2";
        }
        else
        {
          if (*v7) {
            goto LABEL_94;
          }
          CGColorRef v12 = "Y'CbCr 4:2:0";
        }
        *(void *)__str = v12;
LABEL_94:
        __p[0] = "unknown";
        switch(v7[1])
        {
          case 0u:
            double v100 = "BackEnd";
            goto LABEL_130;
          case 1u:
            double v100 = "StatsBlock";
            goto LABEL_130;
          case 2u:
            double v100 = "RawProcBlock";
            goto LABEL_130;
          case 3u:
            double v100 = "RGBProcBlock";
            goto LABEL_130;
          case 4u:
            double v100 = "YCCProcBlock";
LABEL_130:
            __p[0] = (void *)v100;
            break;
          default:
            break;
        }
        unsigned int v111 = "RGBY";
        if (!*((unsigned char *)v7 + 9)) {
          unsigned int v111 = "RGGB";
        }
        *(void *)unsigned int v130 = v111;
        int v112 = *((_DWORD *)v7 + 1028);
        if (v112 == 1)
        {
          double v10 = "log2";
        }
        else if (!v112)
        {
          double v10 = "linear";
        }
        *(void *)float v129 = v10;
        *(void *)unsigned int v126 = 4772;
        NamedValues::NamedValues((NamedValues *)v126);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 14) = *((_DWORD *)v7 + 1027);
        double v125 = (double)v114 * 0.0625;
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 4138);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 4139);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1035);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1036);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1037);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1038);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1039);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1040);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1041);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1042);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1043);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1044);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1045);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((_DWORD *)v7 + 1046);
        LODWORD(v1H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = *((unsigned __int8 *)v7 + 4188);
        NamedValues::~NamedValues((NamedValues *)v126);
        CGColorRef v8 = "Shared Output";
LABEL_138:
LABEL_139:
        NamedValues::~NamedValues((NamedValues *)&v120);
        goto LABEL_140;
      case 2:
        *(void *)__str = 5848;
        LOWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 13) = v7[2];
        *(double *)__str = (double)v13 * 0.00390625;
        LODWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 14) = *((_DWORD *)v7 + 1313);
        *(double *)__str = (double)v14 * 0.00390625;
        LOWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 15) = v7[4];
        *(double *)__str = (double)v15 * 0.00390625;
        *(_DWORD *)__str = v7[5];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 13);
        LODWORD(v16) = *((_DWORD *)v7 + 5);
        *(double *)__str = (double)v16 * 0.0000152587891;
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 1732);
        *(_DWORD *)__str = *((_DWORD *)v7 + 434);
        *(_DWORD *)__str = v7[870];
        *(_DWORD *)__str = v7[871];
        *(_DWORD *)__str = v7[872];
        *(_DWORD *)__str = *((_DWORD *)v7 + 437);
        *(_DWORD *)__str = *((_DWORD *)v7 + 438);
        *(_DWORD *)__str = *((_DWORD *)v7 + 439);
        *(_DWORD *)__str = *((_DWORD *)v7 + 440);
        *(_DWORD *)__str = *((_DWORD *)v7 + 441);
        *(_DWORD *)__str = *((_DWORD *)v7 + 442);
        *(_DWORD *)__str = *((_DWORD *)v7 + 443);
        *(_DWORD *)__str = *((_DWORD *)v7 + 444);
        *(_DWORD *)__str = *((_DWORD *)v7 + 445);
        *(_DWORD *)__str = *((_DWORD *)v7 + 446);
        *(_DWORD *)__str = *((_DWORD *)v7 + 447);
        *(_DWORD *)__str = *((_DWORD *)v7 + 448);
        *(_DWORD *)__str = *((_DWORD *)v7 + 449);
        *(_DWORD *)__str = *((_DWORD *)v7 + 450);
        *(_DWORD *)__str = *((_DWORD *)v7 + 451);
        *(_DWORD *)__str = *((_DWORD *)v7 + 452);
        *(_DWORD *)__str = *((_DWORD *)v7 + 453);
        *(_DWORD *)__str = *((_DWORD *)v7 + 455);
        *(_DWORD *)__str = *((_DWORD *)v7 + 456);
        *(_DWORD *)__str = *((_DWORD *)v7 + 457);
        *(_DWORD *)__str = *((_DWORD *)v7 + 458);
        *(_DWORD *)__str = *((_DWORD *)v7 + 459);
        *(_DWORD *)__str = *((_DWORD *)v7 + 460);
        *(_DWORD *)__str = *((_DWORD *)v7 + 461);
        *(_DWORD *)__str = *((_DWORD *)v7 + 462);
        *(_DWORD *)__str = *((_DWORD *)v7 + 463);
        *(_DWORD *)__str = *((_DWORD *)v7 + 479);
        *(_DWORD *)__str = *((_DWORD *)v7 + 483);
        *(_DWORD *)__str = *((_DWORD *)v7 + 484);
        *(_DWORD *)__str = *((_DWORD *)v7 + 485);
        *(_DWORD *)__str = *((_DWORD *)v7 + 486);
        *(_DWORD *)__str = *((_DWORD *)v7 + 487);
        *(_DWORD *)__str = *((_DWORD *)v7 + 488);
        *(_DWORD *)__str = *((_DWORD *)v7 + 489);
        *(_DWORD *)__str = *((_DWORD *)v7 + 490);
        *(_DWORD *)__str = *((_DWORD *)v7 + 491);
        *(_DWORD *)__str = *((_DWORD *)v7 + 492);
        *(_DWORD *)__str = *((_DWORD *)v7 + 493);
        *(_DWORD *)__str = v7[988];
        *(_DWORD *)__str = v7[989];
        *(_DWORD *)__str = v7[990];
        *(_DWORD *)__str = v7[991];
        *(_DWORD *)__str = v7[992];
        *(_DWORD *)__str = *((_DWORD *)v7 + 497);
        NamedValues::NamedValues((NamedValues *)__str);
        LODWORD(__p[0]) = *((unsigned __int8 *)v7 + 592);
        LODWORD(__p[0]) = *((unsigned __int8 *)v7 + 593);
        NamedValues::NamedValues((NamedValues *)__p);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 405);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 406);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 407);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 408);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 409);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 410);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 411);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 412);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 413);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 414);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 415);
        *(_DWORD *)unsigned int v130 = *((_DWORD *)v7 + 416);
        NamedValues::~NamedValues((NamedValues *)__p);
        NamedValues::~NamedValues((NamedValues *)__str);
        CGColorRef v8 = "Shared Auto Exposure";
        goto LABEL_138;
      case 3:
        *(void *)__str = 3728;
        NamedValues::NamedValues((NamedValues *)v129);
        *(_DWORD *)__str = v7[80];
        *(_DWORD *)__str = v7[81];
        *(_DWORD *)__str = v7[82];
        *(_DWORD *)__str = v7[83];
        *(_DWORD *)__str = v7[1292];
        *(_DWORD *)__str = v7[1293];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 2716);
        *(_DWORD *)__str = v7[1360];
        *(_DWORD *)__str = v7[1361];
        *(_DWORD *)__str = *((_DWORD *)v7 + 682);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 2732);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 2733);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 2734);
        *(_DWORD *)__str = *((_DWORD *)v7 + 684);
        *(_DWORD *)__str = *((_DWORD *)v7 + 685);
        *(_DWORD *)__str = (__int16)v7[1372];
        *(_DWORD *)__str = v7[1373];
        *(_DWORD *)__str = v7[1390];
        *(_DWORD *)__str = v7[1391];
        *(_DWORD *)__str = v7[1392];
        *(_DWORD *)__str = v7[1393];
        *(_DWORD *)__str = v7[1394];
        *(_DWORD *)__str = *((_DWORD *)v7 + 775);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v132 + 8, __p);
        if (v128 >= 0) {
          double v20 = __p;
        }
        else {
          double v20 = (void **)__p[0];
        }
        NamedValue::NamedValue((NamedValue *)v130, "roiType", (const char *)v20, 0);
        if (v128 < 0) {
          operator delete(__p[0]);
        }
        NamedValues::push_back(&v120, (const void **)v130);
        NamedValue::~NamedValue((NamedValue *)v130);
        *(void *)__str = v119;
        *(void *)&__str[*(void *)(v119 - 24)] = v118;
        *(void *)&v132[0] = v117;
        *((void *)&v132[0] + 1) = MEMORY[0x263F8C318] + 16;
        if (v134 < 0) {
          operator delete(v133);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x24C53D6A0](v135);
        *(_DWORD *)__str = v7[1695];
        NamedValues::~NamedValues((NamedValues *)v129);
        CGColorRef v8 = "Shared Auto Focus";
        goto LABEL_138;
      case 4:
        *(void *)__str = 1112;
        LOWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 21) = v7[6];
        LOWORD(v22) = v7[7];
        LOWORD(v23) = v7[8];
        LOWORD(vH16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver((uint64_t)this, 25) = v7[9];
        LOWORD(v26) = v7[10];
        LOWORD(v27) = v7[11];
        LOWORD(v32) = v7[21];
        *(double *)__str = (double)v32 * 0.0000610351562;
        LOWORD(v33) = v7[22];
        *(double *)__str = (double)v33 * 0.0000610351562;
        LODWORD(v34) = *((_DWORD *)v7 + 13);
        *(double *)__str = (double)v34 * 0.000244140625;
        *(_DWORD *)__str = v7[73];
        *(_DWORD *)__str = v7[86];
        *(_DWORD *)__str = v7[87];
        *(_DWORD *)__str = v7[88];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 178);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 179);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 180);
        *(_DWORD *)__str = v7[91];
        *(_DWORD *)__str = v7[92];
        *(_DWORD *)__str = v7[93];
        *(_DWORD *)__str = v7[94];
        *(_DWORD *)__str = v7[95];
        *(_DWORD *)__str = v7[96];
        *(_DWORD *)__str = v7[97];
        *(_DWORD *)__str = v7[98];
        *(_DWORD *)__str = v7[99];
        *(_DWORD *)__str = *((_DWORD *)v7 + 68);
        *(_DWORD *)__str = *((_DWORD *)v7 + 86);
        *(_DWORD *)__str = v7[206];
        LOWORD(v35) = v7[138];
        *(double *)__str = (double)v35 * 0.0000610351562;
        LOWORD(v36) = v7[139];
        *(double *)__str = (double)v36 * 0.0000610351562;
        *(_DWORD *)__str = *((_DWORD *)v7 + 70);
        LODWORD(v37) = *((_DWORD *)v7 + 71);
        LODWORD(v38) = *((_DWORD *)v7 + 72);
        LODWORD(v39) = *((_DWORD *)v7 + 73);
        LODWORD(v41) = *((_DWORD *)v7 + 74);
        LODWORD(v42) = *((_DWORD *)v7 + 75);
        LODWORD(v43) = *((_DWORD *)v7 + 76);
        CGColorRef v8 = "Shared Auto White Balance";
        goto LABEL_138;
      case 5:
        *(void *)__str = 24;
        CGColorRef v8 = "Adaptive Tone Curve";
        goto LABEL_138;
      case 6:
        *(void *)__str = 108;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = v7[2];
        *(_DWORD *)__str = v7[3];
        *(_DWORD *)__str = v7[4];
        *(_DWORD *)__str = v7[5];
        *(_DWORD *)__str = v7[10];
        CGColorRef v8 = "Shared LTM";
        goto LABEL_138;
      case 7:
        *(void *)__str = 604;
        LODWORD(v48) = *((_DWORD *)v7 + 5);
        *(double *)__str = (double)v48 * 0.00390625;
        LODWORD(v49) = *((_DWORD *)v7 + 10);
        *(double *)__str = (double)v49 * 0.00390625;
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 60);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 61);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 62);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 63);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 64);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 65);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 66);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 67);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 68);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 69);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 70);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 71);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 72);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 73);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 74);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 75);
        *(_DWORD *)__str = v7[38];
        *(_DWORD *)__str = v7[39];
        *(_DWORD *)__str = (__int16)v7[40];
        *(_DWORD *)__str = v7[41];
        LOWORD(v5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v7[44];
        LOWORD(v51) = v7[45];
        LOWORD(v52) = v7[46];
        LOWORD(v57) = v7[56];
        *(double *)__str = (double)v57 * 0.0000610351562;
        LOWORD(v58) = v7[57];
        *(double *)__str = (double)v58 * 0.0000610351562;
        LOWORD(v59) = v7[58];
        *(double *)__str = (double)v59 * 0.000244140625;
        LOWORD(v6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v7[59];
        *(double *)__str = (double)v60 * 0.000244140625;
        LOWORD(v61) = v7[60];
        *(double *)__str = (double)v61 * 0.000244140625;
        LOWORD(v62) = v7[61];
        *(double *)__str = (double)v62 * 0.000244140625;
        LOWORD(v63) = v7[62];
        *(double *)__str = (double)v63 * 0.000244140625;
        LOWORD(v64) = v7[63];
        *(double *)__str = (double)v64 * 0.000244140625;
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 128);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 129);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 132);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 133);
        *(_DWORD *)__str = v7[67];
        *(_DWORD *)__str = v7[68];
        *(_DWORD *)__str = v7[69];
        *(_DWORD *)__str = v7[76];
        *(_DWORD *)__str = v7[77];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 160);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 161);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 162);
        *(_DWORD *)__str = *((_DWORD *)v7 + 41);
        *(_DWORD *)__str = *((_DWORD *)v7 + 44);
        *(_DWORD *)__str = *((_DWORD *)v7 + 45);
        *(_DWORD *)__str = *((_DWORD *)v7 + 46);
        *(_DWORD *)__str = *((_DWORD *)v7 + 47);
        *(_DWORD *)__str = *((_DWORD *)v7 + 48);
        *(_DWORD *)__str = *((_DWORD *)v7 + 49);
        *(_DWORD *)__str = *((_DWORD *)v7 + 50);
        *(_DWORD *)__str = *((_DWORD *)v7 + 51);
        *(_DWORD *)__str = *((_DWORD *)v7 + 52);
        *(_DWORD *)__str = *((_DWORD *)v7 + 53);
        *(_DWORD *)__str = v7[108];
        *(_DWORD *)__str = v7[109];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 243);
        *(_DWORD *)__str = (__int16)v7[149];
        *(_DWORD *)__str = (__int16)v7[154];
        *(_DWORD *)__str = (__int16)v7[155];
        *(_DWORD *)__str = *((_DWORD *)v7 + 78);
        *(_DWORD *)__str = *((_DWORD *)v7 + 79);
        *(_DWORD *)__str = *((_DWORD *)v7 + 80);
        *(_DWORD *)__str = *((_DWORD *)v7 + 81);
        *(_DWORD *)__str = *((_DWORD *)v7 + 91);
        *(_DWORD *)__str = *((_DWORD *)v7 + 92);
        *(_DWORD *)__str = *((_DWORD *)v7 + 93);
        *(_DWORD *)__str = *((_DWORD *)v7 + 94);
        uint64_t v65 = 0;
        double v66 = (unsigned __int8 *)(a1 + 250 + v5);
        do
        {
          NamedValues::NamedValues((NamedValues *)__p);
          long long v67 = &v7[8 * v65];
          *(_DWORD *)unsigned int v130 = *((_DWORD *)v67 + 61);
          *(_DWORD *)unsigned int v130 = *((unsigned __int8 *)v67 + 248);
          uint64_t v68 = 0;
          float v69 = v66;
          do
          {
            NamedValues::NamedValues((NamedValues *)v130);
            *(_DWORD *)float v129 = *(v69 - 1);
            *(_DWORD *)float v129 = *v69;
            snprintf(__str, 0x40uLL, "strength[%d]", v68);
            NamedValues::~NamedValues((NamedValues *)v130);
            ++v68;
            v69 += 2;
          }
          while (v68 != 5);
          snprintf(__str, 0x40uLL, "mbnrConfig[%d]", v65);
          NamedValues::~NamedValues((NamedValues *)__p);
          ++v65;
          v66 += 16;
        }
        while (v65 != 3);
        CGColorRef v8 = "Shared RAW Proc";
        goto LABEL_138;
      case 8:
        *(void *)__str = 776;
        *(_DWORD *)__str = v7[2];
        *(_DWORD *)__str = v7[275];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 552);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 553);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 554);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 555);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 568);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 640);
        CGColorRef v8 = "Shared RGB Proc";
        goto LABEL_138;
      case 9:
        *(void *)__str = 192;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 2);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 3);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 4);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 5);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 6);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 7);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 8);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 9);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 10);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 11);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 12);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 13);
        *(_DWORD *)__str = v7[7];
        *(_DWORD *)__str = v7[8];
        *(_DWORD *)__str = v7[9];
        *(_DWORD *)__str = v7[10];
        *(_DWORD *)__str = v7[11];
        *(_DWORD *)__str = v7[12];
        *(_DWORD *)__str = v7[79];
        *(_DWORD *)__str = v7[80];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 162);
        *(_DWORD *)__str = v7[82];
        *(_DWORD *)__str = v7[83];
        *(_DWORD *)__str = v7[84];
        *(_DWORD *)__str = *((_DWORD *)v7 + 43);
        *(_DWORD *)__str = *((_DWORD *)v7 + 44);
        *(_DWORD *)__str = *((_DWORD *)v7 + 45);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 184);
        CGColorRef v8 = "Shared YCC Proc";
        goto LABEL_138;
      case 10:
        *(void *)__str = 4;
        *(_DWORD *)__str = *(unsigned __int8 *)v7;
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 1);
        CGColorRef v8 = "Shared BES Proc";
        goto LABEL_138;
      case 11:
        *(void *)__str = 19748;
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 324);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 325);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 326);
        *(_DWORD *)__str = v7[164];
        *(_DWORD *)__str = v7[165];
        *(_DWORD *)__str = v7[166];
        *(_DWORD *)__str = v7[167];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 326);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 326);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 326);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 326);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 326);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 326);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 326);
        *(_DWORD *)__str = v7[170];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 342);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 343);
        *(_DWORD *)__str = v7[174];
        *(_DWORD *)__str = v7[175];
        *(_DWORD *)__str = v7[176];
        *(_DWORD *)__str = v7[177];
        *(_DWORD *)__str = v7[178];
        *(_DWORD *)__str = v7[179];
        *(_DWORD *)__str = v7[180];
        *(_DWORD *)__str = v7[181];
        LOWORD(v76) = v7[186];
        LOWORD(v77) = v7[187];
        LOWORD(v78) = v7[188];
        LOWORD(v8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v7[189];
        LOWORD(v81) = v7[190];
        LOWORD(v82) = v7[191];
        *(_DWORD *)__str = v7[191];
        *(_DWORD *)__str = v7[192];
        *(_DWORD *)__str = v7[198];
        *(_DWORD *)__str = v7[199];
        *(_DWORD *)__str = v7[200];
        *(_DWORD *)__str = v7[201];
        *(_DWORD *)__str = v7[204];
        *(_DWORD *)__str = v7[205];
        *(_DWORD *)__str = v7[212];
        *(_DWORD *)__str = v7[213];
        *(_DWORD *)__str = v7[214];
        *(_DWORD *)__str = v7[215];
        *(_DWORD *)__str = v7[216];
        *(_DWORD *)__str = v7[217];
        *(_DWORD *)__str = v7[340];
        *(_DWORD *)__str = v7[341];
        *(_DWORD *)__str = v7[342];
        *(_DWORD *)__str = v7[343];
        *(_DWORD *)__str = v7[344];
        *(_DWORD *)__str = v7[345];
        *(_DWORD *)__str = *((_DWORD *)v7 + 4071);
        *(_DWORD *)__str = *((_DWORD *)v7 + 4072);
        CGColorRef v8 = "Shared Stats";
        goto LABEL_138;
      case 12:
        *(void *)__str = 0x10000;
        CGColorRef v8 = "Shared Debug";
        goto LABEL_138;
      case 13:
        *(void *)__str = 59000;
        CGColorRef v8 = "Shared OIS";
        goto LABEL_138;
      case 14:
        *(void *)__str = 65608;
        CGColorRef v8 = "Shared FocusPixel";
        goto LABEL_138;
      case 15:
        *(void *)__str = 6174;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = v7[2];
        *(_DWORD *)__str = v7[3];
        *(_DWORD *)__str = v7[4];
        *(_DWORD *)__str = v7[5];
        CGColorRef v8 = "Shared LocalHist";
        goto LABEL_138;
      case 16:
        *(void *)__str = 65540;
        CGColorRef v8 = "Shared VIS";
        goto LABEL_138;
      case 17:
        *(void *)__str = 16388;
        CGColorRef v8 = "Shared TNR";
        goto LABEL_138;
      case 18:
        *(void *)__str = 64;
        *(_DWORD *)__str = (__int16)v7[8];
        *(_DWORD *)__str = (__int16)v7[9];
        *(_DWORD *)__str = (__int16)v7[10];
        *(_DWORD *)__str = (__int16)v7[11];
        *(_DWORD *)__str = (__int16)v7[12];
        *(_DWORD *)__str = (__int16)v7[13];
        *(_DWORD *)__str = (__int16)v7[14];
        *(_DWORD *)__str = (__int16)v7[15];
        *(_DWORD *)__str = v7[16];
        *(_DWORD *)__str = v7[17];
        *(_DWORD *)__str = v7[28];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 58);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 59);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 60);
        CGColorRef v8 = "Shared System";
        goto LABEL_138;
      case 19:
        *(void *)__str = 63784;
        *(_DWORD *)__str = v7[31605];
        *(_DWORD *)__str = v7[31606];
        *(_DWORD *)__str = v7[31607];
        *(_DWORD *)__str = v7[31608];
        *(_DWORD *)__str = v7[31610];
        *(_DWORD *)__str = v7[31612];
        *(_DWORD *)__str = v7[31613];
        *(_DWORD *)__str = v7[31614];
        *(_DWORD *)__str = v7[31873];
        *(_DWORD *)__str = v7[31874];
        *(_DWORD *)__str = *((_DWORD *)v7 + 15938);
        *(_DWORD *)__str = *((_DWORD *)v7 + 15939);
        *(_DWORD *)__str = v7[31880];
        *(_DWORD *)__str = v7[31881];
        CGColorRef v8 = "Shared LTM LUTs";
        goto LABEL_138;
      case 20:
        *(void *)__str = 1736;
        CGColorRef v8 = "Shared VIS Info";
        goto LABEL_138;
      case 21:
        *(void *)__str = 11008;
        CGColorRef v8 = "Shared Motion Info";
        goto LABEL_138;
      case 22:
        *(void *)__str = 4144;
        CGColorRef v8 = "Shared AF FocusMap";
        goto LABEL_138;
      case 23:
        *(void *)__str = 644;
        *(_DWORD *)__str = *(_DWORD *)v7;
        CGColorRef v8 = "Shared DMA Config";
        goto LABEL_138;
      case 24:
        *(void *)__str = 17096;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = *((_DWORD *)v7 + 1);
        *(_DWORD *)__str = *((_DWORD *)v7 + 2);
        *(_DWORD *)__str = *((_DWORD *)v7 + 3);
        *(_DWORD *)__str = *((_DWORD *)v7 + 4);
        *(_DWORD *)__str = *((_DWORD *)v7 + 5);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6);
        *(_DWORD *)__str = v7[12];
        *(_DWORD *)__str = v7[13];
        CGColorRef v8 = "Shared HITH";
        goto LABEL_138;
      case 25:
        *(void *)__str = 77528;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = *((_DWORD *)v7 + 19381);
        CGColorRef v8 = "Shared APS";
        goto LABEL_138;
      case 26:
        *(void *)__str = 786600;
        CGColorRef v8 = "Shared SideBand";
        goto LABEL_138;
      case 27:
        *(void *)__str = 33012;
        *(_DWORD *)__str = *(_DWORD *)v7;
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 4);
        CGColorRef v8 = "Shared VisionProc";
        goto LABEL_138;
      case 28:
        *(void *)__str = 116;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = v7[2];
        *(_DWORD *)__str = v7[3];
        *(_DWORD *)__str = *((_DWORD *)v7 + 2);
        *(_DWORD *)__str = *((_DWORD *)v7 + 3);
        *(_DWORD *)__str = *((_DWORD *)v7 + 4);
        *(_DWORD *)__str = *((_DWORD *)v7 + 5);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6);
        *(_DWORD *)__str = *((_DWORD *)v7 + 14);
        *(_DWORD *)__str = *((_DWORD *)v7 + 15);
        *(_DWORD *)__str = v7[14];
        *(_DWORD *)__str = v7[15];
        *(double *)__str = (double)*((int *)v7 + 8) * 0.03125;
        *(double *)__str = (double)*((int *)v7 + 9) * 0.03125;
        *(double *)__str = (double)*((int *)v7 + 10) * 0.03125;
        *(double *)__str = (double)*((int *)v7 + 11) * 0.03125;
        *(double *)__str = (double)*((int *)v7 + 12) * 0.03125;
        *(double *)__str = (double)*((int *)v7 + 13) * 0.03125;
        *(double *)__str = (double)*((int *)v7 + 16) * 0.03125;
        *(_DWORD *)__str = *((_DWORD *)v7 + 18);
        *(_DWORD *)__str = v7[34];
        *(_DWORD *)__str = *((_DWORD *)v7 + 19);
        *(_DWORD *)__str = *((_DWORD *)v7 + 20);
        CGColorRef v8 = "Shared Projector";
        goto LABEL_138;
      case 29:
        *(void *)__str = 456;
        *(_DWORD *)__str = *(_DWORD *)v7;
        *(_DWORD *)__str = *((_DWORD *)v7 + 1);
        CGColorRef v8 = "Shared BodyDetector";
        goto LABEL_138;
      case 30:
        *(void *)__str = 156;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = v7[6];
        *(_DWORD *)__str = v7[7];
        *(_DWORD *)__str = v7[8];
        *(_DWORD *)__str = v7[9];
        *(_DWORD *)__str = *((_DWORD *)v7 + 5);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7);
        *(_DWORD *)__str = *((_DWORD *)v7 + 8);
        *(_DWORD *)__str = *((_DWORD *)v7 + 9);
        *(_DWORD *)__str = *((_DWORD *)v7 + 12);
        *(_DWORD *)__str = *((_DWORD *)v7 + 13);
        *(_DWORD *)__str = *((_DWORD *)v7 + 14);
        *(_DWORD *)__str = *((_DWORD *)v7 + 15);
        *(_DWORD *)__str = v7[34];
        *(_DWORD *)__str = *((_DWORD *)v7 + 18);
        *(_DWORD *)__str = *((_DWORD *)v7 + 19);
        *(_DWORD *)__str = *((_DWORD *)v7 + 20);
        *(_DWORD *)__str = *((_DWORD *)v7 + 21);
        *(_DWORD *)__str = *((_DWORD *)v7 + 22);
        *(_DWORD *)__str = *((_DWORD *)v7 + 25);
        *(_DWORD *)__str = *((_DWORD *)v7 + 26);
        CGColorRef v8 = "Shared Distortion";
        goto LABEL_138;
      case 31:
        *(void *)__str = 1024;
        CGColorRef v8 = "BodyDetector Debug";
        goto LABEL_138;
      case 32:
        *(void *)__str = 1453212;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        CGColorRef v8 = "PDE Debug";
        goto LABEL_138;
      case 33:
        *(void *)__str = 44;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(double *)__str = (double)*((int *)v7 + 3) * 0.03125;
        *(double *)__str = (double)*((int *)v7 + 4) * 0.03125;
        *(double *)__str = (double)*((int *)v7 + 5) * 0.03125;
        *(double *)__str = (double)*((int *)v7 + 6) * 0.03125;
        *(_DWORD *)__str = *((_DWORD *)v7 + 7);
        *(_DWORD *)__str = *((_DWORD *)v7 + 8);
        *(_DWORD *)__str = *((_DWORD *)v7 + 9);
        *(_DWORD *)__str = *((_DWORD *)v7 + 10);
        CGColorRef v8 = "Shared Powersupply";
        goto LABEL_138;
      case 34:
        *(void *)__str = 2224;
        *(_DWORD *)__str = *((_DWORD *)v7 + 555);
        *(_DWORD *)__str = 0;
        if (*((_DWORD *)v7 + 555))
        {
          unint64_t v98 = 0;
          long long v99 = v7;
          do
          {
            LODWORD(__p[0]) = *v99;
            LODWORD(__p[0]) = v99[1];
            LODWORD(__p[0]) = *((_DWORD *)v99 + 1);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 2);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 3);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 4);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 5);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 6);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 7);
            LODWORD(__p[0]) = v99[16];
            LODWORD(__p[0]) = v99[17];
            LODWORD(__p[0]) = *((_DWORD *)v99 + 9);
            LODWORD(__p[0]) = v99[20];
            LODWORD(__p[0]) = v99[21];
            LODWORD(__p[0]) = v99[22];
            LODWORD(__p[0]) = *((_DWORD *)v99 + 164);
            LODWORD(__p[0]) = *((unsigned __int8 *)v99 + 51);
            LODWORD(__p[0]) = v99[24];
            LODWORD(__p[0]) = *((_DWORD *)v99 + 13);
            LODWORD(__p[0]) = (__int16)v99[28];
            LODWORD(__p[0]) = v99[29];
            LODWORD(__p[0]) = *((_DWORD *)v99 + 15);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 16);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 17);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 18);
            LODWORD(__p[0]) = *((_DWORD *)v99 + 19);
            LODWORD(__p[0]) = v99[40];
            LODWORD(__p[0]) = v99[327];
            *(_DWORD *)__str = ++v98;
            v99 += 370;
          }
          while (v98 < *((unsigned int *)v7 + 555));
        }
        CGColorRef v8 = "Shared Multi Slave";
        goto LABEL_138;
      case 35:
        *(void *)__str = 10032;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = HIWORD(*(_DWORD *)v7) & 1;
        *(_DWORD *)__str = v7[2];
        CGColorRef v8 = "Shared FD DCN";
        goto LABEL_138;
      case 36:
        *(void *)__str = 4212;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = HIWORD(*(_DWORD *)v7) & 1;
        *(_DWORD *)__str = (*(_DWORD *)v7 >> 18) & 1;
        *(_DWORD *)__str = (*(_DWORD *)v7 >> 19) & 1;
        *(_DWORD *)__str = (*(_DWORD *)v7 >> 20) & 1;
        *(_DWORD *)__str = (*(_DWORD *)v7 >> 21) & 1;
        *(_DWORD *)__str = *((_DWORD *)v7 + 1);
        *(_DWORD *)__str = *((_DWORD *)v7 + 2);
        CGColorRef v8 = "Shared FID DCN";
        goto LABEL_138;
      case 37:
        *(void *)__str = 1036;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = v7[2];
        *(_DWORD *)__str = v7[3];
        *(_DWORD *)__str = v7[4];
        *(_DWORD *)__str = v7[5];
        CGColorRef v8 = "Shared YCC Histogram";
        goto LABEL_138;
      case 38:
        *(void *)__str = 148024;
        *(_DWORD *)__str = *v7;
        CGColorRef v8 = "Shared FD DCN Debug";
        goto LABEL_138;
      case 39:
        *(void *)__str = 695440;
        *(_DWORD *)__str = *v7;
        CGColorRef v8 = "Shared FID DCN Debug";
        goto LABEL_138;
      case 40:
        *(void *)__str = 1788;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = HIWORD(*(_DWORD *)v7) & 1;
        *(_DWORD *)__str = (*(_DWORD *)v7 >> 17) & 1;
        *(_DWORD *)__str = *((_DWORD *)v7 + 1);
        CGColorRef v8 = "Shared Attention";
        goto LABEL_138;
      case 41:
        *(void *)__str = 246036;
        *(_DWORD *)__str = *v7;
        CGColorRef v8 = "Shared Attention Debug";
        goto LABEL_138;
      case 42:
        *(void *)__str = 2945604;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        CGColorRef v8 = "Shared IR PDP Debug";
        goto LABEL_138;
      case 43:
        *(void *)__str = 3848;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = *((_DWORD *)v7 + 1);
        CGColorRef v8 = "Shared MasterSlave AF";
        goto LABEL_138;
      case 44:
        *(void *)__str = 480;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = v7[2];
        *(_DWORD *)__str = *((_DWORD *)v7 + 2);
        *(_DWORD *)__str = v7[6];
        *(_DWORD *)__str = *((_DWORD *)v7 + 6);
        *(_DWORD *)__str = v7[14];
        *(_DWORD *)__str = v7[15];
        *(_DWORD *)__str = (__int16)v7[36];
        if (*((_DWORD *)v7 + 91))
        {
          *(_DWORD *)__str = v7[186];
          *(_DWORD *)__str = v7[187];
          *(_DWORD *)__str = (__int16)v7[208];
        }
        *(_DWORD *)__str = v7[38];
        *(_DWORD *)__str = v7[39];
        *(_DWORD *)__str = v7[40];
        *(_DWORD *)__str = (__int16)v7[41];
        *(_DWORD *)__str = v7[7];
        *(_DWORD *)__str = v7[8];
        *(_DWORD *)__str = v7[42];
        *(_DWORD *)__str = *((_DWORD *)v7 + 22);
        *(_DWORD *)__str = *((_DWORD *)v7 + 23);
        *(_DWORD *)__str = *((_DWORD *)v7 + 24);
        *(_DWORD *)__str = *((_DWORD *)v7 + 25);
        *(_DWORD *)__str = *((_DWORD *)v7 + 26);
        *(_DWORD *)__str = v7[37];
        CGColorRef v8 = "Shared PDE";
        goto LABEL_138;
      case 45:
        *(void *)__str = 182884;
        *(_DWORD *)__str = *(_DWORD *)v7;
        *(_DWORD *)__str = *((_DWORD *)v7 + 9);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 40);
        *(_DWORD *)__str = *((_DWORD *)v7 + 49);
        *(_DWORD *)__str = *((_DWORD *)v7 + 52);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 212);
        *(_DWORD *)__str = *((_DWORD *)v7 + 105);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 824);
        *(_DWORD *)__str = *((_DWORD *)v7 + 207);
        *(_DWORD *)__str = *((_DWORD *)v7 + 208);
        *(_DWORD *)__str = *((_DWORD *)v7 + 209);
        *(_DWORD *)__str = *((_DWORD *)v7 + 210);
        *(_DWORD *)__str = *((_DWORD *)v7 + 213);
        *(_DWORD *)__str = *((_DWORD *)v7 + 215);
        *(_DWORD *)__str = *((_DWORD *)v7 + 221);
        *(_DWORD *)__str = *((_DWORD *)v7 + 222);
        *(_DWORD *)__str = *((_DWORD *)v7 + 223);
        *(_DWORD *)__str = *((_DWORD *)v7 + 224);
        *(_DWORD *)__str = *((_DWORD *)v7 + 225);
        *(_DWORD *)__str = *((_DWORD *)v7 + 226);
        *(_DWORD *)__str = *((_DWORD *)v7 + 227);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 912);
        *(_DWORD *)__str = v7[457];
        *(_DWORD *)__str = v7[458];
        *(_DWORD *)__str = v7[459];
        *(_DWORD *)__str = v7[460];
        *(_DWORD *)__str = v7[461];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 940);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 956);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 957);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 958);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 959);
        *(_DWORD *)__str = *((_DWORD *)v7 + 240);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 964);
        *(_DWORD *)__str = *((_DWORD *)v7 + 242);
        *(_DWORD *)__str = *((_DWORD *)v7 + 243);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 992);
        *(_DWORD *)__str = (__int16)v7[497];
        *(_DWORD *)__str = *((_DWORD *)v7 + 249);
        *(_DWORD *)__str = *((_DWORD *)v7 + 250);
        *(_DWORD *)__str = v7[1182];
        *(_DWORD *)__str = *((_DWORD *)v7 + 6052);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25556);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25557);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25558);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25559);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25560);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25561);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25562);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25563);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25564);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25565);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25566);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25567);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25568);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25569);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25570);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25571);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25572);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25573);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25574);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25575);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25656);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25664);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25665);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25666);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25667);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25668);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 25669);
        *(_DWORD *)__str = (int)*((float *)v7 + 6422);
        *(_DWORD *)__str = (int)*((float *)v7 + 6711);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6985);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6986);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6987);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6988);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6994);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6995);
        *(_DWORD *)__str = *((_DWORD *)v7 + 6997);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7000);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7005);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7014);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7015);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7020);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7021);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7025);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7026);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7027);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7028);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7534);
        *(_DWORD *)__str = *((_DWORD *)v7 + 7535);
        CGColorRef v8 = "Shared CBAF Debug";
        goto LABEL_138;
      case 46:
        *(void *)__str = 131136;
        CGColorRef v8 = "Shared PDAFHW Debug";
        goto LABEL_138;
      case 47:
        *(void *)__str = 316;
        CGColorRef v8 = "Shared CRC Check";
        goto LABEL_138;
      case 48:
        *(void *)__str = 24;
        CGColorRef v8 = "Shared Calibration";
        goto LABEL_138;
      case 49:
        *(void *)__str = 32;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = (int)*((float *)v7 + 1);
        *(_DWORD *)__str = (int)*((float *)v7 + 2);
        *(_DWORD *)__str = (int)*((float *)v7 + 3);
        *(_DWORD *)__str = (int)*((float *)v7 + 4);
        *(_DWORD *)__str = (int)*((float *)v7 + 5);
        *(_DWORD *)__str = (int)*((float *)v7 + 6);
        CGColorRef v8 = "Shared Motion Stats";
        goto LABEL_138;
      case 50:
        *(void *)__str = 116;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = (int)*((float *)v7 + 1);
        *(_DWORD *)__str = (int)*((float *)v7 + 2);
        *(_DWORD *)__str = (int)*((float *)v7 + 3);
        CGColorRef v8 = "Shared APS Stats";
        goto LABEL_138;
      case 51:
        *(void *)__str = 256;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = (int)*((float *)v7 + 1);
        *(_DWORD *)__str = (int)*((float *)v7 + 4);
        *(_DWORD *)__str = (int)*((float *)v7 + 5);
        CGColorRef v8 = "Shared OIS Stats";
        goto LABEL_138;
      case 52:
        goto LABEL_138;
      case 53:
        CGColorRef v8 = "Shared AiCam Debug";
        goto LABEL_138;
      case 54:
        *(void *)__str = 64;
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = *(void *)(v7 + 2);
        *(_DWORD *)__str = v7[1];
        *(_DWORD *)__str = *((_DWORD *)v7 + 3);
        LOWORD(v87) = v7[8];
        *(double *)__str = (double)v87 * 0.00390625;
        LODWORD(vMatrix<double>::~Matrix((uint64_t)this + 88) = *((_DWORD *)v7 + 9);
        *(double *)__str = (double)v88 * 0.00390625;
        LOWORD(v89) = v7[10];
        *(double *)__str = (double)v89 * 0.00390625;
        LOWORD(v9pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v7[11];
        *(double *)__str = (double)v90 * 0.000244140625;
        LOWORD(v91) = v7[12];
        *(double *)__str = (double)v91 * 0.0009765625;
        *(_DWORD *)__str = v7[25];
        *(_DWORD *)__str = v7[26];
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 60);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 59);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 61);
        CGColorRef v8 = "Shared SIFR";
        goto LABEL_138;
      case 55:
        *(_DWORD *)__str = *(_DWORD *)v7;
        *(_DWORD *)__str = *((_DWORD *)v7 + 1);
        CGColorRef v8 = "Shared FPC";
        goto LABEL_138;
      case 56:
        *(_DWORD *)__str = *v7;
        *(_DWORD *)__str = v7[1];
        CGColorRef v8 = "Shared Reduced APS";
        goto LABEL_138;
      case 62:
        *(void *)__str = 264;
        *(_DWORD *)__str = *(unsigned __int8 *)v7;
        *(_DWORD *)__str = *(void *)(v7 + 2);
        *(_DWORD *)__str = (int)*((float *)v7 + 9);
        *(_DWORD *)__str = (int)*((float *)v7 + 10);
        *(_DWORD *)__str = (int)*((float *)v7 + 4);
        *(_DWORD *)__str = (int)*((float *)v7 + 5);
        *(_DWORD *)__str = (int)*((float *)v7 + 6);
        *(_DWORD *)__str = (int)*((float *)v7 + 17);
        *(_DWORD *)__str = (int)*((float *)v7 + 18);
        *(_DWORD *)__str = (int)*((float *)v7 + 19);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 44);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 88);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 89);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 45);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 13);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 12);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 1);
        *(_DWORD *)__str = (int)*((float *)v7 + 8);
        *(_DWORD *)__str = (int)*((float *)v7 + 20);
        *(_DWORD *)__str = (int)*((float *)v7 + 21);
        *(_DWORD *)__str = (int)*((float *)v7 + 26);
        *(_DWORD *)__str = (int)*((float *)v7 + 27);
        *(_DWORD *)__str = (int)*((float *)v7 + 28);
        *(_DWORD *)__str = *((unsigned __int8 *)v7 + 101);
        *(_DWORD *)__str = (__int16)v7[23];
        *(_DWORD *)__str = *((_DWORD *)v7 + 12);
        *(_DWORD *)__str = (__int16)v7[26];
        *(_DWORD *)__str = *((_DWORD *)v7 + 14);
        *(_DWORD *)__str = (int)*((float *)v7 + 15);
        CGColorRef v8 = "Shared Auto Focus Assist Debug";
        goto LABEL_138;
      case 69:
        *(_OWORD *)__str = 0u;
        memset(v132, 0, 48);
        NamedValues::NamedValues((NamedValues *)__p);
        for (uint64_t i = 0; i != 256; ++i)
        {
          snprintf(__str, 0x40uLL, "ch0[%03d]", i);
          *(_DWORD *)unsigned int v130 = *(_DWORD *)&v7[2 * i];
        }
        NamedValues::NamedValues((NamedValues *)v130);
        for (uint64_t j = 0; j != 256; ++j)
        {
          snprintf(__str, 0x40uLL, "ch1[%03d]", j);
          *(_DWORD *)float v129 = *(_DWORD *)(a1 + 1024 + v5 + 4 * j);
        }
        NamedValues::NamedValues((NamedValues *)v129);
        for (uint64_t k = 0; k != 256; ++k)
        {
          snprintf(__str, 0x40uLL, "ch2[%03d]", k);
          *(_DWORD *)unsigned int v126 = *(_DWORD *)(a1 + 2048 + v5 + 4 * k);
        }
        NamedValues::~NamedValues((NamedValues *)v129);
        NamedValues::~NamedValues((NamedValues *)v130);
        NamedValues::~NamedValues((NamedValues *)__p);
        CGColorRef v8 = "Shared Stats BE Histogram";
        goto LABEL_138;
      case 78:
        *(void *)__str = 288;
        CGColorRef v8 = "Shared Depth to Position Debug";
        goto LABEL_138;
      default:
        goto LABEL_139;
    }
  }
LABEL_141:
  CFTypeRef v115 = cf;
  CFRetain(cf);
  NamedValues::~NamedValues((NamedValues *)&v121);
  NamedValues::~NamedValues((NamedValues *)&cf);
  return v115;
}