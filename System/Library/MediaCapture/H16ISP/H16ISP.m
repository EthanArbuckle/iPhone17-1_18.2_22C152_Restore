void H16ISP::FastDictionarySetValueNoRetain(void ***a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  void *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void **v20;
  void *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  if (a3)
  {
    v6 = a1[1];
    v7 = v6[1];
    v8 = (unint64_t)v6[2];
    if ((unint64_t)v7 >= v8)
    {
      v10 = ((char *)v7 - (unsigned char *)*v6) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      v11 = v8 - (void)*v6;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        v13 = v12;
      }
      if (v13) {
        v14 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(v6 + 2), v13);
      }
      else {
        v14 = 0;
      }
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *(void *)v15 = a2;
      v9 = v15 + 8;
      v18 = (char *)*v6;
      v17 = (char *)v6[1];
      if (v17 != *v6)
      {
        do
        {
          v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        v17 = (char *)*v6;
      }
      *v6 = v15;
      v6[1] = v9;
      v6[2] = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *v7 = a2;
      v9 = v7 + 1;
    }
    v6[1] = v9;
    v20 = *a1;
    v21 = v20[1];
    v22 = (unint64_t)v20[2];
    if ((unint64_t)v21 >= v22)
    {
      v24 = ((char *)v21 - (unsigned char *)*v20) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      v25 = v22 - (void)*v20;
      v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
        v26 = v24 + 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        v27 = v26;
      }
      if (v27) {
        v28 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(v20 + 2), v27);
      }
      else {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(void *)v29 = a3;
      v23 = v29 + 8;
      v32 = (char *)*v20;
      v31 = (char *)v20[1];
      if (v31 != *v20)
      {
        do
        {
          v33 = *((void *)v31 - 1);
          v31 -= 8;
          *((void *)v29 - 1) = v33;
          v29 -= 8;
        }
        while (v31 != v32);
        v31 = (char *)*v20;
      }
      *v20 = v29;
      v20[1] = v23;
      v20[2] = v30;
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *v21 = a3;
      v23 = v21 + 1;
    }
    v20[1] = v23;
  }
}

uint64_t H16ISP::H16ISPFrameReceiver::SuspendReceive(H16ISP::H16ISPFrameReceiver *this)
{
  H16ISP::H16ISPFrameReceiver::stopNoDataTimer(this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  *(_DWORD *)this = 2;

  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
}

uint64_t H16ISP::H16ISPFrameReceiver::stopNoDataTimer(H16ISP::H16ISPFrameReceiver *this)
{
  v2 = (pthread_mutex_t *)((char *)this + 224);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 224));
  v3 = (__CFRunLoopTimer *)*((void *)this + 36);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 36));
    *((void *)this + 36) = 0;
  }

  return pthread_mutex_unlock(v2);
}

uint64_t H16ISPCaptureDeviceCopyProperty(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  kdebug_trace();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(3u, DerivedStorage, 0, 0, a2, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (!*(unsigned char *)DerivedStorage)
  {
    if (!*(void *)(DerivedStorage + 24))
    {
      pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
      uint64_t v8 = 4294954616;
      goto LABEL_21;
    }
    if (deviceProperties[0])
    {
      if (CFEqual((CFTypeRef)deviceProperties[0], a2))
      {
        unsigned int v9 = 0;
        v10 = deviceProperties;
LABEL_11:
        v13 = &deviceProperties[5 * v9];
        uint64_t v15 = v13[3];
        v14 = (uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t))(v13 + 3);
        if (v15)
        {
          if (IsPropertySupportedForDevice((uint64_t)v10, DerivedStorage))
          {
            uint64_t v8 = (*v14)(a3, a4, 0, 0, DerivedStorage);
            if (v8)
            {
              CFStringRef v16 = CFCopyDescription((CFTypeRef)deviceProperties[5 * v9 + 1]);
              v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v17 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
              }
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                int v19 = 136315906;
                v20 = "H16ISPCaptureDeviceCopyProperty";
                __int16 v21 = 2080;
                CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
                __int16 v23 = 2080;
                v24 = CFStringGetCStringPtr(v16, 0x8000100u);
                __int16 v25 = 1024;
                int v26 = v8;
                _os_log_impl(&dword_24680F000, v17, OS_LOG_TYPE_DEFAULT, "%s - Error getting %s %s: %d\n", (uint8_t *)&v19, 0x26u);
              }
              CFRelease(v16);
            }
          }
          else
          {
            uint64_t v8 = 4294954509;
          }
          goto LABEL_20;
        }
      }
      else
      {
        unsigned int v11 = 1;
        while (1)
        {
          v10 = &deviceProperties[5 * v11];
          if (!*v10) {
            break;
          }
          unsigned int v9 = v11;
          int v12 = CFEqual((CFTypeRef)*v10, a2);
          unsigned int v11 = v9 + 1;
          if (v12) {
            goto LABEL_11;
          }
        }
      }
    }
    uint64_t v8 = 4294954512;
LABEL_20:
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
    LogCaptureDeviceEvent(3u, DerivedStorage, 0, 0, a2, 0, 1);
    goto LABEL_21;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
  uint64_t v8 = 4294954511;
  FigSignalError(4294954511, "invalidated");
LABEL_21:
  kdebug_trace();
  return v8;
}

uint64_t CopyClock(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a2 = *(void *)(a5 + 8);
  v5 = *(const void **)(a5 + 8);
  if (v5) {
    CFRetain(v5);
  }
  return 0;
}

uint64_t CopyStreamGroupsArray(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a2 = *(void *)(a5 + 208);
  v5 = *(const void **)(a5 + 208);
  if (v5) {
    CFRetain(v5);
  }
  return 0;
}

uint64_t CopyStreamArray(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a2 = *(void *)(a5 + 120);
  v5 = *(const void **)(a5 + 120);
  if (v5) {
    CFRetain(v5);
  }
  return 0;
}

uint64_t H16ISPCaptureDeviceSetProperty(uint64_t a1, const __CFString *a2, __CFString *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  kdebug_trace();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(4u, DerivedStorage, 0, 0, a2, a3, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (!*(unsigned char *)DerivedStorage)
  {
    if (!*(void *)(DerivedStorage + 24))
    {
      pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
      uint64_t v6 = 4294954616;
      goto LABEL_21;
    }
    if (deviceProperties[0])
    {
      if (CFEqual((CFTypeRef)deviceProperties[0], a2))
      {
        unsigned int v7 = 0;
        uint64_t v8 = deviceProperties;
LABEL_11:
        unsigned int v11 = &deviceProperties[5 * v7];
        uint64_t v13 = v11[2];
        int v12 = (uint64_t (**)(__CFString *, void, void, uint64_t))(v11 + 2);
        if (v13)
        {
          if (IsPropertySupportedForDevice((uint64_t)v8, DerivedStorage))
          {
            uint64_t v6 = (*v12)(a3, 0, 0, DerivedStorage);
            if (v6)
            {
              CFStringRef v14 = CFCopyDescription((CFTypeRef)deviceProperties[5 * v7 + 1]);
              uint64_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v15 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
              }
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                int v17 = 136315906;
                v18 = "H16ISPCaptureDeviceSetProperty";
                __int16 v19 = 2080;
                CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
                __int16 v21 = 2080;
                v22 = CFStringGetCStringPtr(v14, 0x8000100u);
                __int16 v23 = 1024;
                int v24 = v6;
                _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "%s - Error setting %s %s: %d\n", (uint8_t *)&v17, 0x26u);
              }
              CFRelease(v14);
            }
          }
          else
          {
            uint64_t v6 = 4294954509;
          }
          goto LABEL_20;
        }
      }
      else
      {
        unsigned int v9 = 1;
        while (1)
        {
          uint64_t v8 = &deviceProperties[5 * v9];
          if (!*v8) {
            break;
          }
          unsigned int v7 = v9;
          int v10 = CFEqual((CFTypeRef)*v8, a2);
          unsigned int v9 = v7 + 1;
          if (v10) {
            goto LABEL_11;
          }
        }
      }
    }
    uint64_t v6 = 4294954512;
LABEL_20:
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
    LogCaptureDeviceEvent(4u, DerivedStorage, 0, 0, a2, a3, 1);
    goto LABEL_21;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
  uint64_t v6 = 4294954511;
  FigSignalError(4294954511, "invalidated");
LABEL_21:
  kdebug_trace();
  return v6;
}

uint64_t SetAudioIsPlayingToBuiltInSpeaker(const __CFBoolean *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = CFBooleanGetValue(a1) != 0;
  if (H16ISP::H16ISPDevice::SetInternalSpeakerActive(*(H16ISP::H16ISPDevice **)(a4 + 24), v5)) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::SetInternalSpeakerActive(H16ISP::H16ISPDevice *this, char a2)
{
  bzero(v5, 0xCuLL);
  __int16 v6 = 1970;
  char v7 = a2;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v5, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t SetDeviceMemoryPoolID(const __CFNumber *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  H16ISP::H16ISPDevice::ISP_SetMemoryPoolID(*(H16ISP::H16ISPDevice **)(a4 + 24), valuePtr);
  return 0;
}

uint64_t H16ISP::H16ISPDevice::ISP_SetMemoryPoolID(H16ISP::H16ISPDevice *this, unsigned int a2)
{
  v4[1] = *MEMORY[0x263EF8340];
  mach_port_t v2 = *((_DWORD *)this + 1106);
  if (!v2) {
    return 3758097084;
  }
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x50u, v4, 1u, 0, 0);
}

uint64_t CopyDeviceSupportedPropertiesDictionary(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Mutable = *(__CFDictionary **)(a5 + 96);
  if (!Mutable)
  {
    int v17 = a2;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable) {
      BOOL v7 = deviceProperties[0] == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = 0;
      CFBooleanRef v9 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
      unsigned int v10 = 1;
      unsigned int v11 = (const __CFString **)MEMORY[0x263F2C2A8];
      int v12 = deviceProperties;
      do
      {
        if (deviceProperties[5 * v8 + 2])
        {
          uint64_t v13 = (const __CFString **)MEMORY[0x263F2C2A0];
          if (!deviceProperties[5 * v8 + 3]) {
            uint64_t v13 = v11;
          }
        }
        else
        {
          uint64_t v13 = (const __CFString **)MEMORY[0x263F2C298];
        }
        CFStringRef v14 = *v13;
        if (IsPropertySupportedForDevice((uint64_t)v12, a5)) {
          addPropertyDictionaryToPropertiesDictionary(Mutable, (const __CFString *)*v12, (const __CFString *)deviceProperties[5 * v8 + 1], v14, v9);
        }
        uint64_t v8 = v10;
        int v12 = &deviceProperties[5 * v10++];
      }
      while (*v12);
    }
    *(void *)(a5 + 96) = Mutable;
    a2 = v17;
  }
  *a2 = Mutable;
  uint64_t v15 = *(const void **)(a5 + 96);
  if (v15) {
    CFRetain(v15);
  }
  return 0;
}

uint64_t IsPropertySupportedForDevice(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  if ((v3 & 0x200) != 0 && !*(unsigned char *)(*(void *)(*(void *)(a2 + 24) + 4384) + 591)) {
    return 0;
  }
  if ((v3 & 0x2000) == 0) {
    return 1;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 120)) < 1) {
    return 0;
  }
  CFIndex v5 = 0;
  do
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 120), v5);
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a2 + 24), *(_DWORD *)(DerivedStorage + 132), 1785950322);
    if (isSensorType) {
      break;
    }
    ++v5;
  }
  while (v5 < CFArrayGetCount(*(CFArrayRef *)(a2 + 120)));
  return isSensorType;
}

uint64_t SetClientIsActive(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v7 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  int v8 = H16ISP::H16ISPDevice::ISP_SetDriverProperty(*(H16ISP::H16ISPDevice **)(a4 + 24), 0, v7 == 0);
  CFBooleanRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFBooleanRef v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109376;
    v11[1] = v7 != 0;
    __int16 v12 = 1024;
    int v13 = v8;
    _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: set kFigCaptureDeviceProperty_ClientIsActive, isClientActive=%d, res=0x%08X\n\n", (uint8_t *)v11, 0xEu);
  }
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::ISP_SetDriverProperty(H16ISP::H16ISPDevice *this, unsigned int a2, unsigned int a3)
{
  input[2] = *MEMORY[0x263EF8340];
  mach_port_t v3 = *((_DWORD *)this + 1106);
  if (!v3) {
    return 3758097084;
  }
  input[0] = a2;
  input[1] = a3;
  return IOConnectCallScalarMethod(v3, 0x4Fu, input, 2u, 0, 0);
}

uint64_t SetTOFAutoFocusEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  LockStreamMutexes(*(const __CFArray **)(a4 + 120));
  if (!a1 || (CFTypeID v6 = CFGetTypeID(a1), v6 != CFBooleanGetTypeID()))
  {
    uint64_t v10 = 4294954516;
    goto LABEL_9;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)a1);
  BOOL v8 = Value != 0;
  if (dword_26B11BAE0)
  {
    CFBooleanRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFBooleanRef v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    uint64_t v10 = 0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v65 = 136315138;
      v66 = "SetTOFAutoFocusEnabled";
      _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "%s - Ignoring property value because default override is set\n", (uint8_t *)&v65, 0xCu);
      uint64_t v10 = 0;
    }
    goto LABEL_9;
  }
  int v12 = Value;
  if (CFArrayGetCount(*(CFArrayRef *)(a4 + 120)) < 1) {
    goto LABEL_29;
  }
  CFIndex v13 = 0;
  unsigned __int8 v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 120), v13);
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(DerivedStorage + 132), 1785950322))
    {
      uint64_t v16 = (uint64_t)ValueAtIndex;
      uint64_t v15 = DerivedStorage;
    }
    if (*(void *)(DerivedStorage + 136)) {
      v14 |= *(_DWORD *)(DerivedStorage + 640) != 0;
    }
    ++v13;
  }
  while (v13 < CFArrayGetCount(*(CFArrayRef *)(a4 + 120)));
  if (v15)
  {
    if (v12)
    {
      PeridotCalib = H16ISP::createPeridotCalib(*(H16ISP **)(a4 + 24), *(xpc_connection_t **)(a4 + 200), (H16ISP::H16ISPServicesRemote *)*(unsigned __int16 *)(v15 + 132));
      if (!PeridotCalib)
      {
        v48 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v48 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v48;
        }
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
          SetTOFAutoFocusEnabled(v48, v49, v50, v51, v52, v53, v54, v55);
        }
        uint64_t v10 = 0;
        *(unsigned char *)(a4 + 248) = 0;
        goto LABEL_9;
      }
      CFRelease(PeridotCalib);
    }
    if (!*(unsigned char *)(v15 + 8))
    {
      v38 = *(H16ISP::H16ISPFrameReceiver **)(v15 + 136);
      if (v38)
      {
        v39 = *(H16ISP::H16ISPTimeOfFlightColorSynchronizer **)(a4 + 240);
        if (v12) {
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::enableTofAssistance(v39, v38);
        }
        else {
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::disableTofAssistance(v39);
        }
      }
      goto LABEL_55;
    }
    uint64_t v20 = *(void *)(v15 + 136);
    if (((v12 != 0) & v14) == 1)
    {
      if (!v20)
      {
        *(unsigned char *)(a4 + 248) = v8;
        uint64_t started = StartJasperForInternalStreaming(v16);
        if (started)
        {
          uint64_t v10 = started;
          v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v22 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            SetTOFAutoFocusEnabled(v22, v23, v24, v25, v26, v27, v28, v29);
          }
          goto LABEL_9;
        }
LABEL_55:
        uint64_t v10 = 0;
        *(unsigned char *)(a4 + 248) = v8;
        goto LABEL_9;
      }
LABEL_39:
      v40 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v40 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v40;
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        SetTOFAutoFocusEnabled(v40, v41, v42, v43, v44, v45, v46, v47);
      }
      goto LABEL_55;
    }
    if (v12)
    {
      if (!v20) {
        goto LABEL_55;
      }
      goto LABEL_39;
    }
    if (!v20) {
      goto LABEL_55;
    }
    uint64_t v56 = StopJasperForInternalStreaming(v16);
    if (!v56) {
      goto LABEL_55;
    }
    uint64_t v10 = v56;
    v57 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v57 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v57;
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
      SetTOFAutoFocusEnabled(v57, v58, v59, v60, v61, v62, v63, v64);
    }
  }
  else
  {
LABEL_29:
    v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v30 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v30;
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      SetTOFAutoFocusEnabled(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    uint64_t v10 = 4294954514;
  }
LABEL_9:
  UnlockStreamMutexes(*(const __CFArray **)(a4 + 120));
  return v10;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table(uint64_t a1)
{
  mach_port_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      mach_port_t v3 = (void *)*v2;
      operator delete(v2);
      mach_port_t v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

NSObject *___ZN6H16ISP19H16ISPGraphExitNode41RegisterH16ISPFrameReceivedProcForChannelEjPFiPvyjjPNS_36H16ISPFrameReceiverImageBufferStructEE_block_invoke(NSObject *result)
{
  Class isa = result[4].isa;
  unsigned int v2 = *((_DWORD *)isa + 20);
  if (v2 <= 2)
  {
    uint64_t v3 = (uint64_t)isa + 24 * v2 + 88;
    *(v3 + 8) = result[5];
    *(_DWORD *)uint64_t v3 = result[6].isa;
    result = H16ISP::CreateFixedPrioritySerialDispatchQueue((H16ISP *)"com.apple.h16ispgraphexit.callback.queue", (const char *)0x3A);
    unsigned int v4 = *((_DWORD *)isa + 20);
    *((void *)isa + 3 * v4 + 13) = result;
    *((_DWORD *)isa + 20) = v4 + 1;
  }
  return result;
}

uint64_t H16ISP::H16ISPFilterGraphManager::Activate(H16ISP::H16ISPFilterGraphManager *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9);
  unsigned int v4 = (void *)(v2 + 8 * (*((void *)this + 11) >> 9));
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4 + 8 * (*((void *)this + 11) & 0x1FFLL);
  }
  char v6 = 0;
  uint64_t v7 = 3758097084;
  while (1)
  {
    if (v3 == v2)
    {
      uint64_t v9 = 0;
    }
    else
    {
      unint64_t v8 = *((void *)this + 12) + *((void *)this + 11);
      uint64_t v9 = *(void *)(v2 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF);
    }
    if (v5 == v9) {
      break;
    }
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v5 + 16))();
    if (v10)
    {
      uint64_t v7 = v10;
      goto LABEL_16;
    }
    v5 += 8;
    if (v5 - *v4 == 4096)
    {
      uint64_t v11 = v4[1];
      ++v4;
      uint64_t v5 = v11;
    }
    uint64_t v7 = 0;
    uint64_t v2 = *((void *)this + 8);
    uint64_t v3 = *((void *)this + 9);
    char v6 = 1;
  }
  if (v6) {
    return 0;
  }
LABEL_16:
  H16ISP::H16ISPFilterGraphManager::Deactivate(this);
  return v7;
}

uint64_t H16ISP::H16ISPGraphNullNode::Activate(H16ISP::H16ISPGraphNullNode *this)
{
  *((unsigned char *)this + 16) = 1;
  return 0;
}

uint64_t H16ISP::H16ISPFilterGraphNode::Activate(H16ISP::H16ISPFilterGraphNode *this)
{
  kdebug_trace();
  if (!*((unsigned char *)this + 16))
  {
    FixedPrioritySerialDispatchQueue = H16ISP::CreateFixedPrioritySerialDispatchQueue((H16ISP *)"com.apple.h16ispfiltergraph.message.queue", (const char *)0x3A);
    *((void *)this + 1) = FixedPrioritySerialDispatchQueue;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN6H16ISP21H16ISPFilterGraphNode8ActivateEv_block_invoke;
    block[3] = &__block_descriptor_tmp_9;
    block[4] = this;
    dispatch_async(FixedPrioritySerialDispatchQueue, block);
    *((unsigned char *)this + 16) = 1;
  }
  return 0;
}

NSObject *H16ISP::CreateFixedPrioritySerialDispatchQueue(H16ISP *this, const char *a2)
{
  int v2 = (int)a2;
  uint64_t v18 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x100uLL, "%s.root", (const char *)this);
  std::string::basic_string[abi:ne180100]<0>(&v13, (char *)this);
  unsigned int v4 = std::string::append(&v13, ".thread", 7uLL);
  uint64_t v5 = (std::string::value_type *)v4->__r_.__value_.__r.__words[0];
  std::string::size_type size = v4->__r_.__value_.__l.__size_;
  v14[0] = v4->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v14 + 3) = *(_DWORD *)((char *)&v4->__r_.__value_.__r.__words[2] + 3);
  int v7 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (pthread_attr_init(&v16)
    || pthread_attr_getschedparam(&v16, &v15)
    || (v15.sched_priority = v2, pthread_attr_setschedparam(&v16, &v15)))
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v7 < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v5, size);
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
      __p.__r_.__value_.__l.__size_ = size;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = v14[0];
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v14 + 3);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v7;
    }
    int v12 = v2;
    uint64_t v9 = dispatch_pthread_root_queue_create();
    if (v9) {
      unint64_t v8 = dispatch_queue_create((const char *)this, 0);
    }
    else {
      unint64_t v8 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v7 < 0)
  {
    operator delete(v5);
    if (!v8) {
      goto LABEL_13;
    }
  }
  else if (!v8)
  {
    goto LABEL_13;
  }
  if (v9)
  {
    dispatch_set_target_queue(v8, v9);
LABEL_14:
    dispatch_release(v9);
    return v8;
  }
LABEL_13:
  if (v9) {
    goto LABEL_14;
  }
  return v8;
}

void sub_246812B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  operator delete(v24);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string::size_type v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string::size_type v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t CopyGroupSupportedPropertiesDictionary(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(__CFDictionary **)(a4 + 24);
  if (!v7)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      uint64_t v7 = Mutable;
      uint64_t v20 = a2;
      uint64_t v10 = 0;
      CFBooleanRef v11 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
      int v12 = (const __CFString **)MEMORY[0x263F2C298];
      std::string v13 = (const __CFString **)MEMORY[0x263F2C2A0];
      unsigned __int8 v14 = (const __CFString **)MEMORY[0x263F2C2A8];
      do
      {
        sched_param v15 = &groupProperties[v10];
        if (groupProperties[v10 + 2])
        {
          if (v15[3]) {
            pthread_attr_t v16 = v13;
          }
          else {
            pthread_attr_t v16 = v14;
          }
        }
        else
        {
          pthread_attr_t v16 = v12;
        }
        CFStringRef v17 = *v16;
        if (IsPropertySupportedForGroup((uint64_t)v15, a4, a5)) {
          addPropertyDictionaryToPropertiesDictionary(v7, (const __CFString *)groupProperties[v10], (const __CFString *)groupProperties[v10 + 1], v17, v11);
        }
        v10 += 6;
      }
      while (v10 != 354);
      *(void *)(a4 + 24) = v7;
      a2 = v20;
    }
    else
    {
      uint64_t v7 = *(__CFDictionary **)(a4 + 24);
    }
  }
  *a2 = v7;
  uint64_t v18 = *(const void **)(a4 + 24);
  if (v18) {
    CFRetain(v18);
  }
  return 0;
}

BOOL IsPropertySupportedForGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 16)) < 1) {
    return 0;
  }
  CFIndex v6 = 0;
  do
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v6);
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    BOOL v8 = IsPropertySupportedForStream(a1, DerivedStorage, a3);
    if (v8) {
      break;
    }
    ++v6;
  }
  while (v6 < CFArrayGetCount(*(CFArrayRef *)(a2 + 16)));
  return v8;
}

void H16ISP::FastDictionaryRelease(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = *(const void ***)v2;
      uint64_t v4 = *(void *)(v2 + 8) - *(void *)v2;
      if (v4 < 1) {
        goto LABEL_9;
      }
      uint64_t v5 = (unint64_t)v4 >> 3;
      uint64_t v6 = v5 <= 1 ? 1 : v5;
      do
      {
        uint64_t v7 = *v3++;
        CFRelease(v7);
        --v6;
      }
      while (v6);
      uint64_t v2 = *a1;
      if (*a1)
      {
LABEL_9:
        BOOL v8 = *(const void ***)v2;
        if (*(void *)v2)
        {
          *(void *)(v2 + 8) = v8;
          operator delete(v8);
        }
        MEMORY[0x24C53D6E0](v2, 0x80C40D6874129);
      }
      *a1 = 0;
    }
    uint64_t v9 = a1[1];
    if (v9)
    {
      uint64_t v10 = *(void **)v9;
      if (*(void *)v9)
      {
        *(void *)(v9 + 8) = v10;
        operator delete(v10);
      }
      MEMORY[0x24C53D6E0](v9, 0x80C40D6874129);
    }
    free(a1);
  }
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::AllocateAndSendBuffers(H16ISP::H16ISPFrameReceiverSharedBufferPool *this, unsigned int a2)
{
  *(void *)&v27[3568] = *MEMORY[0x263EF8340];
  v22 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  if (a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = &v27[4];
    while (1)
    {
      CVPixelBufferRef pixelBuffer = 0;
      uint64_t v6 = H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(*((H16ISP::H16ISPFrameReceiverBufferPool **)this + 9), &pixelBuffer, 0);
      if (v6) {
        break;
      }
      IOSurfaceID ID = 0;
      IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
      IOSurfaceID ID = IOSurfaceGetID(IOSurface);
      CVPixelBufferRef v8 = pixelBuffer;
      p_IOSurfaceID ID = &ID;
      std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 104, &ID, (uint64_t)&std::piecewise_construct, &p_ID)[3] = v8;
      *(_OWORD *)((char *)v5 - 20) = *((_OWORD *)this + 5);
      uint64_t v9 = CVPixelBufferGetIOSurface(pixelBuffer);
      *((_DWORD *)v5 - 1) = IOSurfaceGetID(v9);
      uint64_t v10 = *((void *)this + 9);
      *(void *)&long long v11 = *(void *)(v10 + 24);
      DWORD2(v11) = *(_DWORD *)(v10 + 40);
      HIDWORD(v11) = *(_DWORD *)(v10 + 20);
      _OWORD *v5 = v11;
      if (!*((unsigned char *)this + 148))
      {
        uint64_t v12 = H16ISP::H16ISPFrameReceiverSharedBufferPool::setBufferConfig(this, pixelBuffer);
        if (v12)
        {
          uint64_t v13 = v12;
          CFStringRef v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            CFStringRef v17 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v17;
          }
          ++v4;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiverSharedBufferPool::AllocateAndSendBuffers();
          }
          goto LABEL_22;
        }
        *((unsigned char *)this + 148) = 1;
      }
      ++v4;
      uint64_t v5 = (_OWORD *)((char *)v5 + 56);
      if (a2 == v4) {
        goto LABEL_8;
      }
    }
    uint64_t v13 = v6;
    pthread_attr_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      pthread_attr_t v16 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiverSharedBufferPool::AllocateAndSendBuffers();
    }
LABEL_22:
    sched_param v15 = v22;
    if (v4)
    {
      uint64_t v18 = (unsigned int *)v27;
      do
      {
        unsigned int v19 = *v18;
        v18 += 14;
        Buffer = (__CVBuffer *)H16ISP::H16ISPFrameReceiverSharedBufferPool::FindBuffer(this, v19);
        if (Buffer) {
          H16ISP::H16ISPFrameReceiverSharedBufferPool::ReleaseBuffer(this, Buffer);
        }
        --v4;
      }
      while (v4);
    }
  }
  else
  {
LABEL_8:
    uint64_t v13 = H16ISP::H16ISPDevice::ISP_SendBuffers(*(void *)this, v26, a2, *((_DWORD *)this + 24));
    if (v13)
    {
      unsigned __int8 v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        unsigned __int8 v14 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
      }
      sched_param v15 = v22;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiverSharedBufferPool::AllocateAndSendBuffers();
      }
    }
    else
    {
      *(_DWORD *)(*((void *)this + 9) + 120) += a2;
      sched_param v15 = v22;
    }
  }
  pthread_mutex_unlock(v15);
  return v13;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  long long v11 = operator new(0x20uLL);
  *long long v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *long long v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *long long v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_246813450(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>::unordered_map(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_2468134C8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>(uint64_t a1, unsigned int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2468136E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t H16ISP::H16ISPFrameReceiver::sendInitialBuffersToFirmware(H16ISP::H16ISPFrameReceiver *this, H16ISP::H16ISPFrameReceiverBufferPool *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int8x8_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  uint64_t v5 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    int8x8_t v4 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((_DWORD *)a2 + 28);
    int v7 = *((_DWORD *)a2 + 25);
    int v9 = *((_DWORD *)a2 + 4);
    int v8 = *((_DWORD *)a2 + 5);
    *(_DWORD *)buf = 136316162;
    unint64_t v16 = "sendInitialBuffersToFirmware";
    __int16 v17 = 1024;
    int v18 = v6;
    __int16 v19 = 1024;
    int v20 = v8;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 1024;
    int v24 = v9;
    _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "%s - Sending %d initial buffers to firmware (poolID=%d, poolSize=%d, poolType=%d)\n", buf, 0x24u);
  }
  if (!*((_DWORD *)a2 + 28)) {
    return 3758097084;
  }
  CVPixelBufferRef pixelBuffer = 0;
  if (H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(a2, &pixelBuffer, 1))
  {
    unint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
    {
      unint64_t v12 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::sendInitialBuffersToFirmware();
    }
  }
  else
  {
    if (!H16ISP::H16ISPFrameReceiver::setBufferConfig(this, a2, pixelBuffer)) {
      operator new();
    }
    unint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
    {
      unint64_t v11 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::sendInitialBuffersToFirmware();
    }
  }
  return 3758097085;
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(H16ISP::H16ISPFrameReceiverBufferPool *this, __CVBuffer **a2, int a3)
{
  CVPixelBufferRef pixelBufferOut = 0;
  int v6 = (pthread_mutex_t *)((char *)this + 256);
  pthread_mutex_lock((pthread_mutex_t *)this + 4);
  if (a2)
  {
    *a2 = 0;
    if (*((void *)this + 20) || (*((unsigned char *)this + 117) & 4) != 0)
    {
      int v9 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
      if (*((unsigned char *)this + 124))
      {
        if (*((void *)this + 21))
        {
          CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (char *)this + 104);
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 21), (const void *)*MEMORY[0x263F041A8], v10);
          CFRelease(v10);
        }
        *((unsigned char *)this + 124) = 0;
      }
      if (!a3
        || (uint64_t v11 = *((void *)this + 29)) == 0
        || (unint64_t v12 = *((void *)this + 28),
            CVPixelBufferRef pixelBufferOut = *(CVPixelBufferRef *)(*(void *)(*((void *)this + 25)
                                                             + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                 + 8 * (v12 & 0x1FF)),
            CVPixelBufferRef v13 = pixelBufferOut,
            *((void *)this + 28) = v12 + 1,
            *((void *)this + 29) = v11 - 1,
            std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 192, 1),
            !v13))
      {
        if (CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(*v9, *((CVPixelBufferPoolRef *)this + 20), *((CFDictionaryRef *)this + 21), &pixelBufferOut))
        {
          BOOL v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            BOOL v14 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer();
          }
        }
      }
      pthread_mutex_unlock(v6);
      unint64_t v15 = pixelBufferOut;
      if (pixelBufferOut)
      {
        *a2 = pixelBufferOut;
        IOSurface = CVPixelBufferGetIOSurface(v15);
        IOSurfaceGetID(IOSurface);
        return 0;
      }
      else
      {
        int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v18 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
        }
        uint64_t v8 = 3758097085;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer();
        }
      }
    }
    else
    {
      pthread_mutex_unlock(v6);
      int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        int v7 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v7;
      }
      uint64_t v8 = 3758097086;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer();
      }
    }
  }
  else
  {
    pthread_mutex_unlock(v6);
    __int16 v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      __int16 v17 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v17;
    }
    uint64_t v8 = 3758097090;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer();
    }
  }
  return v8;
}

void std::deque<H16ISP::H16ISPFrameReceiverAllocatedBufferStruct *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<H16ISP::H16ISPFrameReceiverAllocatedBufferStruct *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t H16ISP::H16ISPFrameReceiver::setBufferConfig(H16ISP::H16ISPFrameReceiver *this, H16ISP::H16ISPFrameReceiverBufferPool *a2, CVPixelBufferRef pixelBuffer)
{
  *(void *)&v98[116] = *MEMORY[0x263EF8340];
  int v6 = *((_DWORD *)a2 + 28);
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  int AllocSize = IOSurfaceGetAllocSize(IOSurface);
  unint64_t PlaneCount = 0;
  uint64_t v10 = *((unsigned int *)a2 + 4);
  if ((int)v10 > 8)
  {
    if (v10 <= 0x26)
    {
      if (((1 << v10) & 0xE4000000) != 0) {
        goto LABEL_13;
      }
      if (((1 << v10) & 0x300000000) != 0)
      {
        int BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        int DataSize = CVPixelBufferGetDataSize(pixelBuffer);
        if (v10 == 32) {
          __int16 v16 = 34;
        }
        else {
          __int16 v16 = 39;
        }
        unint64_t PlaneCount = H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), v16, v6, 0, 1u, &DataSize);
        if (PlaneCount)
        {
          __int16 v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            __int16 v17 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v17;
          }
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            goto LABEL_24;
          }
        }
        return PlaneCount;
      }
      if (v10 == 38)
      {
        int DataSize = AllocSize;
        int BytesPerRow = AllocSize;
        unint64_t PlaneCount = H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), 40, v6, 0, 1u, &DataSize);
        if (PlaneCount)
        {
          __int16 v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            __int16 v19 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v19;
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::setBufferConfig();
          }
        }
        return PlaneCount;
      }
    }
    unsigned int v15 = v10 - 9;
    goto LABEL_38;
  }
  if ((int)v10 > 5)
  {
    unsigned int v15 = v10 - 6;
LABEL_38:
    if (v15 >= 2) {
      return PlaneCount;
    }
    goto LABEL_39;
  }
  if (!v10)
  {
LABEL_39:
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    unint64_t PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
    if (H16ISP::getFrameFormatMetaInfo(PixelFormatType, &v94))
    {
      bzero(&DataSize, 0x80uLL);
      CFDictionaryRef theDict = 0;
      CVPixelBufferPoolCopyIOSurfaceCreationProperties();
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(0, (const void *)*MEMORY[0x263F0EF00]);
      int v22 = *((_DWORD *)a2 + 4) - 6;
      if (v22 > 4) {
        LOWORD(v23) = 1;
      }
      else {
        int v23 = dword_2469EDD84[v22];
      }
      uint64_t valuePtr = 0;
      if (PlaneCount)
      {
        __int16 v79 = v23;
        __int16 v80 = v6;
        v81 = this;
        CFIndex v32 = 0;
        int v33 = 0;
        v90 = (void *)*MEMORY[0x263F0EE88];
        v91 = (void *)*MEMORY[0x263F0EE58];
        v89 = (void *)*MEMORY[0x263F0EE80];
        v88 = (void *)*MEMORY[0x263F0EE90];
        uint64_t v34 = (const void *)*MEMORY[0x263F0EF10];
        v87 = (void *)*MEMORY[0x263F0EF20];
        v86 = (void *)*MEMORY[0x263F0EED0];
        v85 = (void *)*MEMORY[0x263F0EEE8];
        v84 = (void *)*MEMORY[0x263F0EEC8];
        v83 = (void *)*MEMORY[0x263F0EEA8];
        key = (void *)*MEMORY[0x263F0EE70];
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v32);
          CFDictionaryRef v36 = ValueAtIndex;
          uint64_t valuePtr = 0;
          int v37 = v95;
          if (v95 == 2)
          {
            CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v91);
            if (v44)
            {
              CFNumberRef v45 = v44;
              CFTypeID v46 = CFGetTypeID(v44);
              if (v46 == CFNumberGetTypeID()) {
                CFNumberGetValue(v45, kCFNumberSInt32Type, (char *)&valuePtr + 4);
              }
            }
            CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(v36, v90);
            if (v47)
            {
              CFNumberRef v48 = v47;
              CFTypeID v49 = CFGetTypeID(v47);
              if (v49 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v48, kCFNumberSInt32Type, &valuePtr);
                *(&DataSize + 8 * v32) = valuePtr - HIDWORD(valuePtr);
              }
            }
            CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(v36, v89);
            if (v50)
            {
              CFNumberRef v51 = v50;
              CFTypeID v52 = CFGetTypeID(v50);
              if (v52 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v51, kCFNumberSInt32Type, &valuePtr);
                *(&DataSize + 8 * v32 + 1) = valuePtr;
              }
            }
            CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(v36, v88);
            if (v53)
            {
              CFNumberRef v54 = v53;
              CFTypeID v55 = CFGetTypeID(v53);
              if (v55 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v54, kCFNumberSInt32Type, &valuePtr);
                int v56 = valuePtr - HIDWORD(valuePtr);
                v57 = &DataSize + 8 * v32;
                v57[2] = valuePtr - HIDWORD(valuePtr) - *v57;
                v57[3] = v56;
              }
            }
            CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(v36, v34);
            if (v58)
            {
              CFNumberRef v59 = v58;
              CFTypeID v60 = CFGetTypeID(v58);
              if (v60 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v59, kCFNumberSInt32Type, &valuePtr);
                *(_DWORD *)&v98[32 * v32 + 4] = valuePtr - *(_DWORD *)&v98[32 * v32];
              }
            }
            CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(v36, v87);
            if (v61)
            {
              CFNumberRef v62 = v61;
              CFTypeID v63 = CFGetTypeID(v61);
              if (v63 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v62, kCFNumberSInt32Type, &valuePtr);
                *(_WORD *)&v98[32 * v32 + 8] = valuePtr;
              }
            }
            CFNumberRef v64 = (const __CFNumber *)CFDictionaryGetValue(v36, v86);
            if (v64)
            {
              CFNumberRef v65 = v64;
              CFTypeID v66 = CFGetTypeID(v64);
              if (v66 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v65, kCFNumberSInt32Type, &valuePtr);
                *(_WORD *)&v98[32 * v32 + 8] += valuePtr;
              }
            }
            CFNumberRef v67 = (const __CFNumber *)CFDictionaryGetValue(v36, v85);
            if (v67)
            {
              CFNumberRef v68 = v67;
              CFTypeID v69 = CFGetTypeID(v67);
              if (v69 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v68, kCFNumberSInt32Type, &valuePtr);
                *(_WORD *)&v98[32 * v32 + 10] = valuePtr;
              }
            }
            CFNumberRef v70 = (const __CFNumber *)CFDictionaryGetValue(v36, v84);
            if (v70)
            {
              CFNumberRef v71 = v70;
              CFTypeID v72 = CFGetTypeID(v70);
              if (v72 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v71, kCFNumberSInt32Type, &valuePtr);
                *(_WORD *)&v98[32 * v32 + 10] += valuePtr;
              }
            }
            CFNumberRef v73 = (const __CFNumber *)CFDictionaryGetValue(v36, v83);
            if (v73)
            {
              CFNumberRef v74 = v73;
              CFTypeID v75 = CFGetTypeID(v73);
              if (v75 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v74, kCFNumberSInt32Type, &valuePtr);
                *(_DWORD *)&v98[32 * v32 + 12] = valuePtr;
              }
            }
          }
          else if (!v95)
          {
            CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v34);
            if (v38)
            {
              CFNumberRef v39 = v38;
              CFTypeID v40 = CFGetTypeID(v38);
              if (v40 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v39, kCFNumberSInt32Type, &valuePtr);
                *(&DataSize + 8 * v32) = valuePtr;
              }
            }
            CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v36, key);
            if (v41)
            {
              CFNumberRef v42 = v41;
              CFTypeID v43 = CFGetTypeID(v41);
              if (v43 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v42, kCFNumberSInt32Type, &valuePtr);
                *(&DataSize + 8 * v32 + 1) = valuePtr;
              }
            }
          }
          CFIndex v32 = (unsigned __int16)++v33;
        }
        while (PlaneCount > (unsigned __int16)v33);
        CFRelease(theDict);
        if (v37)
        {
          unint64_t PlaneCount = H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*((H16ISP::H16ISPDevice **)v81 + 41), *((_DWORD *)v81 + 91), v79, v80, v37, (unsigned __int16)PlaneCount, &DataSize);
          if (PlaneCount)
          {
            v76 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              v76 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v76;
            }
            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
              H16ISP::H16ISPFrameReceiver::setBufferConfig();
            }
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        CFRelease(theDict);
      }
    }
    else
    {
      int v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        int v24 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v24;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::setBufferConfig(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      return 3758097084;
    }
    return PlaneCount;
  }
  if (v10 != 1)
  {
    if (v10 == 2)
    {
      int DataSize = AllocSize;
      int BytesPerRow = AllocSize;
      uint64_t v11 = H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), 0, v6, 0, 1u, &DataSize);
      if (v11)
      {
        unint64_t PlaneCount = v11;
        unint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          unint64_t v12 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v12;
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiver::setBufferConfig();
        }
      }
      else
      {
        unint64_t PlaneCount = H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), 8, v6, 0, 1u, &DataSize);
        if (PlaneCount)
        {
          v77 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            v77 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v77;
          }
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::setBufferConfig();
          }
        }
      }
    }
    return PlaneCount;
  }
LABEL_13:
  int BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  int DataSize = CVPixelBufferGetDataSize(pixelBuffer);
  int v13 = *((_DWORD *)a2 + 4) - 26;
  if (v13 > 5) {
    __int16 v14 = 3;
  }
  else {
    __int16 v14 = word_2469EDD78[v13];
  }
  unint64_t PlaneCount = H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), v14, v6, 0, 1u, &DataSize);
  if (PlaneCount)
  {
    int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v18 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
LABEL_24:
    }
      H16ISP::H16ISPFrameReceiver::setBufferConfig();
  }
  return PlaneCount;
}

uint64_t H16ISP::H16ISPDevice::SetBufferPoolConfiguration(H16ISP::H16ISPDevice *a1, int a2, __int16 a3, __int16 a4, int a5, unsigned int a6, const void *a7)
{
  bzero(v15, 0x9CuLL);
  __int16 v16 = 279;
  int v17 = a2;
  __int16 v18 = a3;
  __int16 v19 = a4;
  int v21 = a5;
  v20[66] = a6;
  memcpy(v20, a7, 32 * a6);
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v15, 0x9Cu, 0, 0xFFFFFFFF);
}

uint64_t CopySupportedPropertiesDictionary(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a3 + 120);
  if (!Mutable)
  {
    int v17 = a2;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable) {
      BOOL v8 = streamProperties[0] == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t v9 = 0;
      CFBooleanRef v10 = (const __CFBoolean *)*MEMORY[0x263EFFB38];
      unsigned int v11 = 1;
      unint64_t v12 = streamProperties;
      do
      {
        if (streamProperties[6 * v9 + 2])
        {
          int v13 = (const __CFString **)MEMORY[0x263F2C2A0];
          if (!streamProperties[6 * v9 + 3]) {
            int v13 = (const __CFString **)MEMORY[0x263F2C2A8];
          }
        }
        else
        {
          int v13 = (const __CFString **)MEMORY[0x263F2C298];
        }
        CFStringRef v14 = *v13;
        if (IsPropertySupportedForStream((uint64_t)v12, a3, a5)) {
          addPropertyDictionaryToPropertiesDictionary(Mutable, (const __CFString *)*v12, (const __CFString *)streamProperties[6 * v9 + 1], v14, v10);
        }
        uint64_t v9 = v11;
        unint64_t v12 = &streamProperties[6 * v11++];
      }
      while (*v12);
    }
    *(void *)(a3 + 120) = Mutable;
    a2 = v17;
  }
  *a2 = Mutable;
  unsigned int v15 = *(const void **)(a3 + 120);
  if (v15) {
    CFRetain(v15);
  }
  return 0;
}

BOOL IsPropertySupportedForStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 + 4384);
  unsigned int v8 = *(_DWORD *)(a2 + 132);
  int v9 = *(_DWORD *)(v7 + 96 * v8 + 16);
  if (*(unsigned char *)(v7 + 585)) {
    int v10 = 1;
  }
  else {
    int v10 = *(unsigned char *)(v7 + 588) != 0;
  }
  H16ISP::H16ISPDevice::GetCameraConfig(v6, v8, 0, v17, v18);
  BOOL result = 0;
  if (v9 <= 1785950321)
  {
    if (v9 == 1718186595)
    {
      if ((*(unsigned char *)(a1 + 40) & 0x10) == 0) {
        return 0;
      }
    }
    else
    {
      if (v9 != 1718775412 && v9 != 1718776695) {
        return result;
      }
      if ((*(unsigned char *)(a1 + 40) & 8) == 0) {
        return 0;
      }
    }
  }
  else if (v9 > 1919251318)
  {
    if (v9 == 1919251319)
    {
      if ((*(unsigned char *)(a1 + 40) & 4) == 0) {
        return 0;
      }
    }
    else
    {
      if (v9 != 1919251564) {
        return result;
      }
      if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
        return 0;
      }
    }
  }
  else if (v9 == 1785950322)
  {
    if ((*(unsigned char *)(a1 + 40) & 0x20) == 0) {
      return 0;
    }
  }
  else
  {
    if (v9 != 1919246706) {
      return result;
    }
    if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
      return 0;
    }
  }
  int v13 = *(_DWORD *)(a1 + 32);
  if ((v13 & 0x8000) != 0 && *(int *)(v7 + 604) < 17
    || (v13 & 1) != 0 && !*(_DWORD *)(a2 + 644) && !*(_DWORD *)(v7 + 96 * *(unsigned int *)(a2 + 132) + 24))
  {
    return 0;
  }
  if ((v13 & 0x100) == 0 || (BOOL result = 0, v18[61]) && v18[62] >= 2u)
  {
    if ((v13 & 2) != 0 && !*(_DWORD *)(a2 + 640)
      || (v13 & 4) != 0 && !*(_DWORD *)(a2 + 648)
      || (v13 & 8) != 0 && !*(unsigned char *)(v7 + 590)
      || (v13 & 0x10) != 0 && (!*(unsigned char *)(v7 + 584) || ((byte_26B11BAE8 == 0) & ~v10) != 0))
    {
      return 0;
    }
    if ((v13 & 0x20) == 0 || (BOOL result = 0, !*(unsigned char *)(a2 + 3784)) && v9 != 1785950322)
    {
      if ((v13 & 0x40) != 0 && !*(unsigned char *)(a2 + 3784) && v9 != 1785950322
        || (v13 & 0x2000) != 0 && v9 != 1785950322
        || (v13 & 0x400) != 0
        && v9 != 1919251564
        && (!*(unsigned char *)(a2 + 3784) && v9 != 1919246706 || v9 == 1718186595 && !*(unsigned char *)(a2 + 3785))
        || (v13 & 0x80) != 0 && !*(_DWORD *)(a2 + 652)
        || (v13 & 0x20000) != 0 && !*(_DWORD *)(a2 + 656) && !*(_DWORD *)(a2 + 652)
        || (v13 & 0x800) != 0 && !*(_DWORD *)(a2 + 660)
        || (v13 & 0x10000) != 0 && *(_DWORD *)(v7 + 96 * *(unsigned int *)(a2 + 132) + 60) != 1
        || (v13 & 0x200) != 0 && (!*(unsigned char *)(v7 + 591) || !*(_DWORD *)(v7 + 96 * *(unsigned int *)(a2 + 132) + 60))
        || (v13 & 0x40000) != 0 && !*(_DWORD *)(a2 + 664)
        || (v13 & 0x80000) != 0 && *(_DWORD *)(a2 + 156) == 48879)
      {
        return 0;
      }
      if ((v13 & 0x100000) == 0)
      {
        if ((v13 & 0x200000) == 0) {
          return ((v13 & 0x400000) == 0 || (v19 & 2) != 0)
        }
              && ((v13 & 0x800000) == 0 || (v19 & 1) != 0 || *(unsigned char *)(a2 + 3784))
              && ((v13 & 0x1000000) == 0 || v20)
              && ((v13 & 0x4000000) == 0
               || *(_DWORD *)(a2 + 640) && *(_DWORD *)(v7 + 96 * *(unsigned int *)(a2 + 132) + 36))
              && ((v13 & 0x2000000) == 0 || *(unsigned char *)(a2 + 2701));
LABEL_78:
        if (v19) {
          return ((v13 & 0x400000) == 0 || (v19 & 2) != 0)
        }
              && ((v13 & 0x800000) == 0 || (v19 & 1) != 0 || *(unsigned char *)(a2 + 3784))
              && ((v13 & 0x1000000) == 0 || v20)
              && ((v13 & 0x4000000) == 0
               || *(_DWORD *)(a2 + 640) && *(_DWORD *)(v7 + 96 * *(unsigned int *)(a2 + 132) + 36))
              && ((v13 & 0x2000000) == 0 || *(unsigned char *)(a2 + 2701));
        return 0;
      }
      BOOL result = 0;
      if (byte_26B11BAE9 && v9 == 1718186595)
      {
        if (H16ISP::H16ISPDevice::getSensorChannel(*(void *)(a3 + 24), 1718775412) == -1
          || CFArrayGetCount(*(CFArrayRef *)(a3 + 120)) < 1)
        {
          return 0;
        }
        CFIndex v14 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 120), v14);
          FigCaptureStreamGetFigBaseObject();
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a3 + 24), *(_DWORD *)(DerivedStorage + 132), 1718775412)) {
            break;
          }
          ++v14;
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a3 + 120));
          BOOL result = 0;
          if (v14 >= Count) {
            return result;
          }
        }
        if (!*(_DWORD *)(DerivedStorage + 640)) {
          return 0;
        }
        int v13 = *(_DWORD *)(a1 + 32);
        if ((v13 & 0x200000) == 0) {
          return ((v13 & 0x400000) == 0 || (v19 & 2) != 0)
        }
              && ((v13 & 0x800000) == 0 || (v19 & 1) != 0 || *(unsigned char *)(a2 + 3784))
              && ((v13 & 0x1000000) == 0 || v20)
              && ((v13 & 0x4000000) == 0
               || *(_DWORD *)(a2 + 640) && *(_DWORD *)(v7 + 96 * *(unsigned int *)(a2 + 132) + 36))
              && ((v13 & 0x2000000) == 0 || *(unsigned char *)(a2 + 2701));
        goto LABEL_78;
      }
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::GetCameraConfig(uint64_t a1, unsigned int a2, unsigned int a3, void *a4, void *a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 4))
  {
    unsigned int NumCameraConfigs = H16ISP::H16ISPDevice::GetNumCameraConfigs((H16ISP::H16ISPDevice *)a1, a2);
    if (NumCameraConfigs <= a3)
    {
      unsigned int v12 = NumCameraConfigs;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
      }
      uint64_t v11 = 3758097090;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v14 = *(_DWORD *)(a1 + 4748);
        int v15 = 136316162;
        __int16 v16 = "GetCameraConfig";
        __int16 v17 = 1024;
        unsigned int v18 = a2;
        __int16 v19 = 1024;
        int v20 = v14;
        __int16 v21 = 1024;
        unsigned int v22 = a3;
        __int16 v23 = 1024;
        unsigned int v24 = v12;
        _os_log_error_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s - chan: %d, numChannels: %d, index: %d, numConfigs: %d\n", (uint8_t *)&v15, 0x24u);
      }
    }
    else
    {
      memmove(a4, (const void *)(*(void *)(*(void *)(a1 + 40) + 432 * a2 + 8) + 212 * a3), 0xD4uLL);
      memmove(a5, (const void *)(*(void *)(a1 + 40) + 432 * a2 + 32), 0x190uLL);
      return 0;
    }
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    uint64_t v11 = 3758097112;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPDevice::GetCameraConfig();
    }
  }
  return v11;
}

void addPropertyDictionaryToPropertiesDictionary(__CFDictionary *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFBoolean *a5)
{
  values[3] = *(void **)MEMORY[0x263EF8340];
  if (!a2) {
    return;
  }
  memset(values, 0, 24);
  memset(keys, 0, sizeof(keys));
  if (!a3)
  {
    CFIndex v8 = 0;
    if (!a4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  keys[0] = *(void **)MEMORY[0x263F2C2B8];
  values[0] = (void *)a3;
  CFIndex v8 = 1;
  if (a4)
  {
LABEL_4:
    keys[v8] = (void *)*MEMORY[0x263F2C290];
    values[v8++] = (void *)a4;
  }
LABEL_5:
  if (a5)
  {
    keys[v8] = (void *)*MEMORY[0x263F2C2B0];
    values[v8++] = a5;
  }
  CFDictionaryRef v9 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)keys, (const void **)values, v8, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v9)
  {
    CFDictionaryRef v10 = v9;
    CFDictionaryAddValue(a1, a2, v9);
    CFRelease(v10);
  }
}

uint64_t std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void std::deque<H16ISP::H16ISPFrameReceiverAllocatedBufferStruct *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    CFIndex v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    CFDictionaryRef v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)CFIndex v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      CFNumberRef v38 = (uint64_t *)a1[1];
      CFIndex v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        CFIndex v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        CFNumberRef v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)CFNumberRef v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      CFDictionaryRef v9 = (char *)a1[1];
    }
    CFIndex v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<__CVBuffer **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, &v54);
    CFNumberRef v44 = (void *)a1[1];
    CFIndex v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    CFDictionaryRef v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      CFNumberRef v48 = (uint64_t *)a1[1];
      CFIndex v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        CFIndex v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CFNumberRef v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CFNumberRef v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      CFTypeID v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        CFIndex v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  CFNumberRef v53 = operator new(0x1000uLL);
  std::__split_buffer<__CVBuffer **>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2468156B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL getPCECalib(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  CFIndex v8 = v7;
  CFDictionaryRef v9 = (H16ISP::H16ISPDevice *)v2;
  uint64_t v23 = *MEMORY[0x263EF8340];
  int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(v2, 1718186595);
  if (SensorChannel == -1) {
    return 0;
  }
  __int16 v15 = 24577;
  int v16 = SensorChannel;
  bzero(v17, 0x33BCuLL);
  int v11 = H16ISP::H16ISPDevice::ISP_SendCommand(v9, v14, 0x33C8u, 0, 0xFFFFFFFF);
  BOOL result = 0;
  if (!v11)
  {
    if (v6)
    {
      *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)&v19[12];
      *uint64_t v6 = *(_OWORD *)v19;
    }
    if (v4)
    {
      long long v13 = v21;
      *(_OWORD *)uint64_t v4 = v20;
      *(_OWORD *)(v4 + 16) = v13;
      *(void *)(v4 + 32) = v22;
    }
    memcpy(v8, v18, 0x3370uLL);
    return v17[0] != 0;
  }
  return result;
}

unint64_t H16ISP::H16ISPDevice::getSensorChannel(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4748);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t result = 0;
  for (uint64_t i = 8; ; i += 96)
  {
    if (result <= 5 && (uint64_t v6 = *(void *)(a1 + 4384), *(_DWORD *)(v6 + i))) {
      int v7 = *(_DWORD *)(v6 + i + 8);
    }
    else {
      int v7 = -1;
    }
    if (v7 == a2) {
      break;
    }
    if (v2 == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::setBufferConfig(H16ISP::H16ISPFrameReceiverSharedBufferPool *this, CVPixelBufferRef pixelBuffer)
{
  uint64_t v2 = *((void *)this + 9);
  unsigned int v3 = *(_DWORD *)(v2 + 16);
  if (v3 > 0x28 || ((1 << v3) & 0x100C0000002) == 0) {
    return 0;
  }
  int v7 = *(_DWORD *)(v2 + 112);
  v13[1] = CVPixelBufferGetBytesPerRow(pixelBuffer);
  v13[0] = CVPixelBufferGetDataSize(pixelBuffer);
  if (v3 == 30) {
    __int16 v8 = 2;
  }
  else {
    __int16 v8 = 1;
  }
  if (v3 == 31) {
    __int16 v8 = 7;
  }
  if (v3 == 40) {
    __int16 v9 = 8;
  }
  else {
    __int16 v9 = v8;
  }
  uint64_t v10 = H16ISP::H16ISPDevice::SetSharedBufferPoolInfo(*(H16ISP::H16ISPDevice **)this, *((_WORD *)this + 72), *((_WORD *)this + 73), v9, v7, 0, 1u, v13);
  if (v10)
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiverSharedBufferPool::setBufferConfig();
    }
  }
  return v10;
}

uint64_t H16ISP::H16ISPDevice::SetSharedBufferPoolInfo(H16ISP::H16ISPDevice *a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, unsigned int a7, const void *a8)
{
  bzero(v17, 0x98uLL);
  __int16 v18 = 13322;
  __int16 v19 = a2;
  __int16 v20 = a3;
  __int16 v21 = a4;
  __int16 v22 = a5;
  v23[67] = a6;
  v23[66] = a7;
  memcpy(v23, a8, 32 * a7);
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v17, 0x98u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDeviceServiceInterestCallback(uint64_t this, void *a2, unsigned int a3, unsigned int a4, void *a5)
{
  uint64_t v5 = *(uint64_t (**)(void))(this + 56);
  if (v5) {
    return v5();
  }
  return this;
}

uint64_t H16ISP::MyCVPixelBufferPoolScanIOSurfacesCallback(H16ISP *this, H16ISP::H16ISPDevice **a2, H16ISP::H16ISPFrameReceiverBufferPool *a3)
{
  if (a2 && *((unsigned char *)a2 + 145))
  {
    IOSurfaceID ID = IOSurfaceGetID(this);
    H16ISP::H16ISPFrameReceiverBufferPool::PreMapClientSurface(a2, ID);
  }
  return 0;
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t H16ISP::H16ISPFilterGraphManager::AddEntryNode(H16ISP::H16ISPFilterGraphManager *this, H16ISP::H16ISPFilterGraphNode *a2)
{
  uint64_t v4 = a2;
  std::deque<H16ISP::H16ISPFilterGraphNode *>::push_back((void *)this + 1, &v4);
  std::deque<H16ISP::H16ISPFilterGraphNode *>::push_back((void *)this + 7, &v4);
  return 0;
}

uint64_t H16ISP::H16ISPFilterGraphNode::AddOutputNode(H16ISP::H16ISPFilterGraphNode *this, H16ISP::H16ISPFilterGraphNode *a2)
{
  long long v3 = a2;
  std::deque<H16ISP::H16ISPFilterGraphNode *>::push_back((void *)this + 3, &v3);
  return 3758097095;
}

void std::deque<H16ISP::H16ISPFilterGraphNode *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<H16ISP::H16ISPFilterGraphNode *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t H16ISP::H16ISPMetadataDictCreatorGraphNode::onMessageProcessing(H16ISP::H16ISPMetadataDictCreatorGraphNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v3 = 0;
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pthread_mutex_t *)((char *)a2 + 8);
  uint64_t v5 = (char *)a2 + 80;
  CFStringRef key = (const __CFString *)*MEMORY[0x263F2C558];
  uint64_t v6 = (char *)a2 + 104;
  do
  {
    CVPixelBufferRef v31 = 0;
    CVPixelBufferRef v32 = 0;
    CVPixelBufferRef v29 = 0;
    CVPixelBufferRef v30 = 0;
    CVPixelBufferRef v27 = 0;
    CVPixelBufferRef texture = 0;
    pthread_mutex_lock(v4);
    uint64_t v7 = &v5[312 * v3];
    int v9 = *((_DWORD *)v7 + 5);
    unint64_t v8 = (unsigned int *)(v7 + 20);
    if (v9)
    {
      unint64_t v10 = 0;
      int v11 = 0;
      uint64_t v12 = v6;
      while (2)
      {
        int v13 = *((_DWORD *)v12 + 2);
        switch(v13)
        {
          case 0:
            BOOL v14 = *(__CVBuffer **)v12;
            CVPixelBufferRef v32 = *(CVPixelBufferRef *)v12;
            goto LABEL_17;
          case 6:
            BOOL v14 = *(__CVBuffer **)v12;
            CVPixelBufferRef v31 = *(CVPixelBufferRef *)v12;
            goto LABEL_17;
          case 7:
            BOOL v14 = *(__CVBuffer **)v12;
            CVPixelBufferRef v30 = *(CVPixelBufferRef *)v12;
            goto LABEL_17;
          case 9:
            BOOL v14 = *(__CVBuffer **)v12;
            CVPixelBufferRef v29 = *(CVPixelBufferRef *)v12;
            goto LABEL_17;
          case 10:
            BOOL v14 = *(__CVBuffer **)v12;
            CVPixelBufferRef texture = *(CVPixelBufferRef *)v12;
            goto LABEL_17;
          default:
            if (v13 == 1 && v27 == 0)
            {
              BOOL v14 = *(__CVBuffer **)v12;
              CVPixelBufferRef v27 = *(CVPixelBufferRef *)v12;
            }
            else
            {
              if (v13 != 2) {
                goto LABEL_18;
              }
              BOOL v14 = *(__CVBuffer **)v12;
              int v11 = *(__CVBuffer **)v12;
            }
LABEL_17:
            CVPixelBufferRetain(v14);
LABEL_18:
            ++v10;
            v12 += 16;
            if (v10 < *v8) {
              continue;
            }
            unsigned int v16 = *(_DWORD *)&v5[312 * v3 + 16];
            pthread_mutex_unlock(v4);
            H16ISP::H16ISPDevice::ISP_GetCameraTime(*((void *)this + 10), outputStruct);
            v17.n128_u64[1] = 0;
            long long v25 = 0u;
            memset(v24, 0, sizeof(v24));
            if (v11)
            {
              if (v32) {
                std::deque<__CVBuffer *>::push_back(v24, &v32);
              }
              if (texture) {
                std::deque<__CVBuffer *>::push_back(v24, &texture);
              }
              if (v31) {
                std::deque<__CVBuffer *>::push_back(v24, &v31);
              }
            }
            else
            {
              if (v30) {
                std::deque<__CVBuffer *>::push_back(v24, &v30);
              }
              if (v29) {
                std::deque<__CVBuffer *>::push_back(v24, &v29);
              }
            }
            if (v27) {
              std::deque<__CVBuffer *>::push_back(v24, &v27);
            }
            if (*((void *)&v25 + 1))
            {
              uint64_t v18 = *((void *)this + 10);
              uint64_t v19 = *(void *)(v18 + 104);
              if (v19)
              {
                H16ISP::H16ISPMotionManager::GetOscarTimeSyncInfo(v19, &v23);
                uint64_t v18 = *((void *)this + 10);
              }
              else
              {
                long long v23 = 0uLL;
              }
              v17.n128_u64[0] = *((void *)this + 13);
              H16ISP::GenerateAndAttachCoreMediaMetaDataDictionary(*(void *)(v18 + 88), *(void *)(*(void *)(*((void *)&v24[0] + 1) + (((unint64_t)v25 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v25 & 0x1FF)), v24, *((void *)this + 11) + 40 * v16, v17);
              CFTypeRef Attachment = CVBufferGetAttachment(*(CVBufferRef *)(*(void *)(*((void *)&v24[0] + 1)+ (((unint64_t)v25 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v25 & 0x1FF)), key, 0);
              if (v11 && Attachment) {
                operator new();
              }
            }
            else
            {
              printf("H16ISPMetadataDictCreatorGraphNodeMessageProcessingProc - (chan=%d) Did not identify source buffer\n", v16);
            }
            if (v32) {
              CVPixelBufferRelease(v32);
            }
            if (v31) {
              CVPixelBufferRelease(v31);
            }
            if (texture) {
              CVPixelBufferRelease(texture);
            }
            if (v30) {
              CVPixelBufferRelease(v30);
            }
            if (v29) {
              CVPixelBufferRelease(v29);
            }
            if (v27) {
              CVPixelBufferRelease(v27);
            }
            if (v11) {
              CVPixelBufferRelease(v11);
            }
            std::deque<__CVBuffer *>::~deque[abi:ne180100](v24);
            break;
        }
        break;
      }
    }
    else
    {
      pthread_mutex_unlock(v4);
    }
    ++v3;
    v6 += 312;
  }
  while (v3 != 3);
  return 0;
}

void sub_246816190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPFrameReceiver::FrameDone(H16ISP::H16ISPFrameReceiver *this, void *a2, int a3, unint64_t *a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](this, a2);
  int v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v4;
  uint64_t v224 = *MEMORY[0x263EF8340];
  uint64_t v209 = 0;
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)(v9 + 160));
  CVPixelBufferRef v208 = 0;
  long long v206 = 0u;
  long long v207 = 0u;
  long long v205 = 0u;
  CVPixelBufferRef v203 = 0;
  CVPixelBufferRef v204 = 0;
  CVPixelBufferRef v201 = 0;
  CVPixelBufferRef v202 = 0;
  CVPixelBufferRef v199 = 0;
  CVPixelBufferRef v200 = 0;
  CVPixelBufferRef v197 = 0;
  CVPixelBufferRef v198 = 0;
  CVPixelBufferRef v195 = 0;
  CVPixelBufferRef v196 = 0;
  CVPixelBufferRef v193 = 0;
  CVPixelBufferRef v194 = 0;
  uint64_t v187 = (v6 - 2);
  if (v6 == 2)
  {
LABEL_359:
    H16ISP::H16ISPFrameReceiver::tickleNoDataTimer((H16ISP::H16ISPFrameReceiver *)v9);
    pthread_mutex_unlock((pthread_mutex_t *)(v9 + 160));
    kdebug_trace();
    return std::deque<__CVBuffer *>::~deque[abi:ne180100](&v205);
  }
  uint64_t v10 = 0;
  uint64_t v182 = 0;
  char v180 = 0;
  CVPixelBufferRef cf = 0;
  CVPixelBufferRef v179 = 0;
  int v176 = 0;
  CVPixelBufferRef v177 = 0;
  v184 = (int64x2_t *)(v9 + 736);
  uint64_t v185 = 0;
  v183 = (H16ISP::H16ISPFrameReceiverBufferPool **)(v9 + 816);
  CVPixelBufferRef v175 = 0;
  v186 = (CVPixelBufferRef *)(v9 + 384);
  v174 = (int64x2_t *)(v9 + 640);
  while (2)
  {
    CVPixelBufferRef pixelBuffer = 0;
    uint64_t v11 = *(void *)(v9 + 744);
    unint64_t v12 = *(void *)(v9 + 768);
    int v13 = (char *)(v11 + 8 * (v12 >> 9));
    uint64_t v14 = *(void *)(v9 + 752);
    if (v14 == v11) {
      __int16 v15 = 0;
    }
    else {
      __int16 v15 = (char *)(*(void *)v13 + 8 * (*(void *)(v9 + 768) & 0x1FFLL));
    }
    uint64_t v16 = (v10 + 2);
LABEL_7:
    __n128 v17 = v15;
    while (1)
    {
      if (v14 == v11) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *(void *)(v11 + (((*(void *)(v9 + 776) + v12) >> 6) & 0x3FFFFFFFFFFFFF8))
      }
            + 8 * ((*(void *)(v9 + 776) + v12) & 0x1FF);
      if (v17 == (char *)v18)
      {
        uint64_t v21 = *(void *)(v9 + 696);
        __int16 v22 = (void *)(v21 + 8 * (*(void *)(v9 + 720) >> 9));
        uint64_t v23 = *(void *)(v9 + 704);
        if (v23 == v21) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(*v22 + 8 * (*(void *)(v9 + 720) & 0x1FFLL));
        }
        while (1)
        {
          if (v23 == v21)
          {
            uint64_t v26 = 0;
          }
          else
          {
            unint64_t v25 = *(void *)(v9 + 728) + *(void *)(v9 + 720);
            uint64_t v26 = *(void *)(v21 + ((v25 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v25 & 0x1FF);
          }
          if (v24 == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v26) {
            break;
          }
          if (H16ISP::H16ISPFrameReceiverSharedBufferPool::FindBuffer(**v24, *(_DWORD *)(v8 + 8 * v16))) {
            operator new();
          }
          if ((H16ISP::H16ISPFrameReceiverSharedBufferPool ***)((char *)++v24 - *v22) == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)4096)
          {
            CVPixelBufferRef v27 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v22[1];
            ++v22;
            uint64_t v24 = v27;
          }
          uint64_t v21 = *(void *)(v9 + 696);
          uint64_t v23 = *(void *)(v9 + 704);
        }
        uint64_t v28 = *(H16ISP::H16ISPFrameReceiverDataBufferPool **)(v9 + 784);
        if (v28 && H16ISP::H16ISPFrameReceiverDataBufferPool::FindBuffer(v28, *(_DWORD *)(v8 + 8 * v16))) {
          operator new();
        }
        uint64_t v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v33 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v33;
        }
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = *(void *)(v8 + 8 * v16);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v34;
          _os_log_unreliable_impl();
        }
        goto LABEL_76;
      }
      uint64_t v19 = *(long long **)v17;
      if (*(void *)(v8 + 8 * v16) == *(_DWORD *)(*(void *)v17 + 8)) {
        break;
      }
      v17 += 8;
      v15 += 8;
      if ((char *)(*(void *)v13 + 4096) == v15)
      {
        __int16 v20 = (char *)*((void *)v13 + 1);
        v13 += 8;
        __int16 v15 = v20;
        goto LABEL_7;
      }
    }
    uint64_t v29 = *((void *)v19 + 2);
    int v30 = *(_DWORD *)(v29 + 16);
    if (v30) {
      BOOL v31 = v30 == 10;
    }
    else {
      BOOL v31 = 1;
    }
    if (v31)
    {
      if (H16ISP::gFrameReceiverCFPrefs != 1) {
        goto LABEL_42;
      }
    }
    else if (v30 != 6 || H16ISP::gFrameReceiverCFPrefs != 1)
    {
LABEL_42:
      --*(_DWORD *)(v29 + 120);
      if (*(unsigned char *)(v9 + 362) || *(unsigned char *)(v29 + 144))
      {
        CVPixelBufferRelease(*(CVPixelBufferRef *)v19);
        std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::erase(v184, v13, v15);
        goto LABEL_75;
      }
      switch(v30)
      {
        case 0:
          CVPixelBufferRef v208 = *(CVPixelBufferRef *)v19;
          break;
        case 1:
        case 40:
          std::deque<__CVBuffer *>::push_back(&v205, v19);
          break;
        case 2:
          CVPixelBufferRef v179 = *(CVPixelBufferRef *)v19;
          break;
        case 3:
          CVPixelBufferRef cf = *(CVPixelBufferRef *)v19;
          int v176 = *(_DWORD *)(v29 + 20);
          break;
        case 6:
          CVPixelBufferRef v202 = *(CVPixelBufferRef *)v19;
          break;
        case 7:
          CVPixelBufferRef v203 = *(CVPixelBufferRef *)v19;
          break;
        case 8:
          CVPixelBufferRef v177 = *(CVPixelBufferRef *)v19;
          break;
        case 9:
          CVPixelBufferRef v200 = *(CVPixelBufferRef *)v19;
          break;
        case 10:
          CVPixelBufferRef v201 = *(CVPixelBufferRef *)v19;
          break;
        case 12:
          CVPixelBufferRef v198 = *(CVPixelBufferRef *)v19;
          break;
        case 13:
          CVPixelBufferRef v197 = *(CVPixelBufferRef *)v19;
          break;
        case 15:
          CVPixelBufferRef v196 = *(CVPixelBufferRef *)v19;
          break;
        case 17:
          CVPixelBufferRef v199 = *(CVPixelBufferRef *)v19;
          break;
        case 21:
          CVPixelBufferRef v195 = *(CVPixelBufferRef *)v19;
          break;
        case 25:
          CVPixelBufferRef v175 = *(CVPixelBufferRef *)v19;
          break;
        case 29:
          CVPixelBufferRef v204 = *(CVPixelBufferRef *)v19;
          break;
        case 31:
          CVPixelBufferRef v194 = *(CVPixelBufferRef *)v19;
          break;
        case 34:
        case 35:
        case 36:
        case 37:
          ++HIDWORD(v182);
          break;
        case 38:
          CVPixelBufferRef v193 = *(CVPixelBufferRef *)v19;
          break;
        default:
          break;
      }
      uint64_t v35 = *((void *)v19 + 2);
      if (*(unsigned char *)(v35 + 116))
      {
        int v37 = &v223[v185];
        *int v37 = *(void *)v19;
        v37[1] = *(void *)(v35 + 16);
        std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::erase(v184, v13, v15);
      }
      else
      {
        if (*(_DWORD *)(v35 + 16) != 31
          || !H16ISP::H16ISPFrameReceiverBufferPool::TryStillImageBufferRemove((pthread_mutex_t *)v35, *(__CVBuffer **)v19))
        {
          if (*v183 && (uint64_t v38 = *((void *)v19 + 2), !*(_DWORD *)(v38 + 16)))
          {
            uint64_t v39 = &v223[v185];
            *(void *)uint64_t v39 = *(void *)v19;
            *((_DWORD *)v39 + 2) = 0;
            *((_DWORD *)v39 + 3) = *(_DWORD *)(v38 + 20);
            std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::erase(v184, v13, v15);
            uint64_t v185 = (v185 + 1);
            MEMORY[0x24C53D6E0](v19, 0x1020C4093CA8EA1);
            int v40 = *(_DWORD *)(v9 + 844) - 1;
            *(_DWORD *)(v9 + 844) = v40;
            if (!v40)
            {
              LODWORD(v191[0]) = *(_DWORD *)(v9 + 364);
              *(_WORD *)&v190[4] = 2049;
              *(_OWORD *)((char *)v191 + 4) = *(_OWORD *)(v9 + 824);
              int v41 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v9 + 328), v190, 0x1Cu, 0, 0xFFFFFFFF);
              if (v41)
              {
                uint64_t v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
                {
                  uint64_t v42 = os_log_create("com.apple.isp", "general");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v42;
                }
                if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v41;
                  _os_log_unreliable_impl();
                }
              }
              unsigned int v43 = *(_DWORD *)(v9 + 364);
              LOWORD(v213) = 2817;
              uint64_t v44 = *(void *)(v9 + 816);
              unsigned int v45 = *(_DWORD *)(v44 + 36) + *(_DWORD *)(v44 + 24);
              unint64_t v214 = __PAIR64__(v45, v43);
              unsigned int v221 = v45;
              int32x2_t v46 = *(int32x2_t *)(v44 + 28);
              __int32 v215 = v46.i32[0];
              int32x2_t v220 = vrev64_s32(v46);
              BOOL v47 = *(unsigned char *)(v44 + 88) == 0;
              int v217 = *(_DWORD *)(v44 + 40);
              BOOL v216 = v47;
              switch(v217)
              {
                case 1:
                  v218.i32[0] = (2 * v45 + 63) & 0xFFFFFFC0;
                  goto LABEL_134;
                case 15:
                case 16:
                  int v77 = 2 * v45;
                  goto LABEL_131;
                case 18:
                  int v77 = (2 * ((2863311531u * (unint64_t)(v45 + 2)) >> 32)) & 0xFFFFFFFC;
LABEL_131:
                  int v78 = v77 + 63;
                  goto LABEL_132;
                case 22:
                  int8x8_t v95 = vand_s8((int8x8_t)vadd_s32(vdup_n_s32(32 * v45), (int32x2_t)0x1E0000003E0), (int8x8_t)0xFFFFFE00FFFFFC00);
                  goto LABEL_167;
                case 23:
                  int8x8_t v95 = (int8x8_t)vshr_n_u32((uint32x2_t)vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32(v45), (int32x2_t)0xF0000001FLL), (uint32x2_t)0xFFFFFFFCFFFFFFFBLL), (int32x2_t)0xA0000002800), 3uLL);
LABEL_167:
                  int8x8_t v218 = v95;
                  goto LABEL_134;
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                  __int32 v48 = *(_DWORD *)(v44 + 340);
                  unsigned int v49 = *(_DWORD *)(v44 + 372);
                  v218.i32[0] = v48;
                  goto LABEL_133;
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                  __int32 v71 = *(_DWORD *)(v44 + 340);
                  int v72 = *(_DWORD *)(v44 + 372);
                  v218.i32[1] = v71;
                  int v219 = v72;
                  goto LABEL_134;
                default:
                  int v78 = v45 + 63;
LABEL_132:
                  unsigned int v49 = v78 & 0xFFFFFFC0;
                  v218.i32[0] = v49;
LABEL_133:
                  v218.i32[1] = v49;
LABEL_134:
                  int v79 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v9 + 328), (unsigned __int8 *)&outputStruct, 0x38u, 0, 0xFFFFFFFF);
                  if (v79)
                  {
                    __int16 v80 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
                    {
                      __int16 v80 = os_log_create("com.apple.isp", "general");
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v80;
                    }
                    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)&uint8_t buf[4] = v79;
                      _os_log_unreliable_impl();
                    }
                  }
                  CVPixelBufferRef v189 = 0;
                  v81 = *v183;
                  if (*((_DWORD *)*v183 + 28))
                  {
                    unsigned int v82 = 0;
                    do
                    {
                      if (!H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(v81, &v189, 0))
                      {
                        uint64_t v210 = 0;
                        operator new();
                      }
                      v81 = *v183;
                      ++v82;
                    }
                    while (v82 < *((_DWORD *)v81 + 28));
                  }
                  else if (!v79)
                  {
                    int v84 = H16ISP::H16ISPDevice::ISP_SendBuffers(*(void *)(v9 + 328), buf, 0, *(_DWORD *)(v9 + 304));
                    if (v84)
                    {
                      v85 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
                      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
                      {
                        v85 = os_log_create("com.apple.isp", "general");
                        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v85;
                      }
                      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v210) = 67109120;
                        HIDWORD(v210) = v84;
                        _os_log_unreliable_impl();
                      }
                    }
                    else
                    {
                      *(_DWORD *)(*(void *)(v9 + 816) + 120) = 0;
                      *(_DWORD *)(v9 + 844) = *(_DWORD *)(v9 + 844);
                    }
                  }
                  uint64_t v86 = *(void *)(v9 + 648);
                  unint64_t v87 = *(void *)(v9 + 672);
                  uint64_t v88 = v86 + 8 * (v87 >> 9);
                  uint64_t v89 = *(void *)(v9 + 656);
                  if (v89 == v86) {
                    v90 = 0;
                  }
                  else {
                    v90 = (char *)(*(void *)v88 + 8 * (*(void *)(v9 + 672) & 0x1FFLL));
                  }
                  break;
              }
LABEL_156:
              v91 = v90;
              while (1)
              {
                uint64_t v92 = v89 == v86
                    ? 0
                    : *(void *)(v86 + (((*(void *)(v9 + 680) + v87) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((*(void *)(v9 + 680) + v87) & 0x1FF);
                if (v91 == (char *)v92) {
                  break;
                }
                v93 = *(H16ISP::H16ISPFrameReceiverBufferPool **)v91;
                if (!*(_DWORD *)(*(void *)v91 + 16))
                {
                  std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::erase(v174, (char *)v88, v90);
                  H16ISP::H16ISPFrameReceiverBufferPool::~H16ISPFrameReceiverBufferPool(v93);
                  MEMORY[0x24C53D6E0]();
                  std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::push_back(v174, v183);
                  *v183 = 0;
                  break;
                }
                v91 += 8;
                v90 += 8;
                if ((char *)(*(void *)v88 + 4096) == v90)
                {
                  long long v94 = *(char **)(v88 + 8);
                  v88 += 8;
                  v90 = v94;
                  goto LABEL_156;
                }
              }
            }
          }
          else
          {
            H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(*((H16ISP::H16ISPFrameReceiverBufferPool **)v19 + 2), &pixelBuffer, 0);
            if (*(unsigned char *)(v9 + 853))
            {
              int v50 = *(_DWORD *)(*((void *)v19 + 2) + 16);
              if (v50 == 2) {
                operator new();
              }
              if (!v50)
              {
                CFNumberRef v51 = *(H16ISP::MOVReader **)(v9 + 856);
                if (pixelBuffer
                   ? H16ISP::MOVReader::getNextFrame(v51, pixelBuffer)
                   : H16ISP::MOVReader::getNextFrame(v51, *(__CVBuffer **)v19))
                {
                  *(unsigned char *)(v9 + 853) = 0;
                  H16ISP::MOVReader::~MOVReader(*(H16ISP::MOVReader **)(v9 + 856));
                  H16ISP::H16ISPDevice::ISP_EnableMOVReplay(*(H16ISP::H16ISPDevice **)(v9 + 328), *(_DWORD *)(v9 + 364), 0);
                }
              }
            }
            if (pixelBuffer)
            {
              CFNumberRef v53 = (H16ISP::H16ISPFrameReceiverBufferPool *)*((void *)v19 + 2);
              int v54 = *((_DWORD *)v53 + 4);
              if (v54) {
                goto LABEL_105;
              }
              int v54 = *(_DWORD *)(v9 + 840);
              if (!v54) {
                goto LABEL_109;
              }
              *(void *)buf = 0;
              H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer(v53, (__CVBuffer **)buf, 0);
              if (*(void *)buf)
              {
                long long v55 = &v223[v185];
                *long long v55 = *(void *)buf;
                v55[1] = -4294967291;
                uint64_t v185 = (v185 + 1);
                --*(_DWORD *)(v9 + 840);
              }
              CFNumberRef v53 = (H16ISP::H16ISPFrameReceiverBufferPool *)*((void *)v19 + 2);
              int v54 = *((_DWORD *)v53 + 4);
LABEL_105:
              if (v54 == 3)
              {
                uint64_t v56 = v9 + 384;
                if (*v186)
                {
                  CVPixelBufferRelease(*v186);
                  uint64_t v56 = v9 + 384;
                  CVPixelBufferRef *v186 = 0;
                }
                long long v57 = *v19;
                *(void *)(v56 + 16) = *((void *)v19 + 2);
                *(_OWORD *)uint64_t v56 = v57;
              }
              else
              {
LABEL_109:
                CFNumberRef v58 = &v223[v185];
                *(void *)CFNumberRef v58 = *(void *)v19;
                *((_DWORD *)v58 + 2) = v54;
                *((_DWORD *)v58 + 3) = *((_DWORD *)v53 + 5);
                uint64_t v185 = (v185 + 1);
              }
              *(void *)uint64_t v19 = pixelBuffer;
              IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
              IOSurfaceID ID = IOSurfaceGetID(IOSurface);
              *((_DWORD *)v19 + 2) = ID;
              CFNumberRef v61 = &v222[7 * v182];
              *CFNumberRef v61 = H16ISP::H16ISPFrameReceiver::FrameDone;
              v61[1] = v9;
              *((_DWORD *)v61 + 4) = ID;
              uint64_t v62 = *((void *)v19 + 2);
              *(void *)&long long v63 = *(void *)(v62 + 24);
              DWORD2(v63) = *(_DWORD *)(v62 + 40);
              HIDWORD(v63) = *(_DWORD *)(v62 + 20);
              *(_OWORD *)((char *)v61 + 20) = v63;
              LODWORD(v182) = v182 + 1;
            }
            else
            {
              uint64_t v64 = *((void *)v19 + 2);
              unsigned int v65 = (*(_DWORD *)(v64 + 20) - 2 * *(_DWORD *)(v9 + 364)) % 0x2Du;
              CFTypeID v66 = "UNKNOWN_TYPE";
              if (v65 <= 0x2A) {
                CFTypeID v66 = h16ispFirmwarePoolTypes[v65];
              }
              v181 = v66;
              CFNumberRef v67 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                CFNumberRef v67 = os_log_create("com.apple.isp", "general");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v67;
                uint64_t v64 = *((void *)v19 + 2);
              }
              if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
              {
                uint64_t v68 = *(void *)(v64 + 184);
                if (!v68) {
                  uint64_t v68 = *(void *)(v64 + 160);
                }
                int v69 = *(_DWORD *)(v9 + 364);
                int v70 = *(_DWORD *)(v64 + 20);
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v69;
                *(_WORD *)&buf[8] = 2080;
                *(void *)&buf[10] = v181;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v70;
                *(_WORD *)&buf[24] = 2048;
                *(void *)&buf[26] = v68;
                _os_log_unreliable_impl();
              }
              kdebug_trace();
              CFNumberRef v73 = &v222[7 * v182];
              *CFNumberRef v73 = H16ISP::H16ISPFrameReceiver::FrameDone;
              v73[1] = v9;
              *((_DWORD *)v73 + 4) = *((_DWORD *)v19 + 2);
              uint64_t v74 = *((void *)v19 + 2);
              *(void *)&long long v75 = *(void *)(v74 + 24);
              DWORD2(v75) = *(_DWORD *)(v74 + 40);
              HIDWORD(v75) = *(_DWORD *)(v74 + 20);
              *(_OWORD *)((char *)v73 + 20) = v75;
              LODWORD(v182) = v182 + 1;
              unsigned int v76 = *(_DWORD *)(*((void *)v19 + 2) + 16);
              char v180 = 1;
              if (v76 <= 0x1D)
              {
                if (((1 << v76) & 0x20000441) != 0)
                {
                  char v180 = 1;
                }
                else if (v76 == 1)
                {
                  --*((void *)&v207 + 1);
                  std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__maybe_remove_back_spare[abi:ne180100](&v205, 1);
                  char v180 = 1;
                }
              }
            }
          }
LABEL_76:
          if (++v10 != v187) {
            continue;
          }
          if (cf && HIDWORD(v182) && cf == *v186)
          {
            CFRetain(cf);
            CVPixelBufferRef v97 = v179;
            v100 = &v223[v185];
            *(void *)v100 = cf;
            *((_DWORD *)v100 + 2) = 3;
            *((_DWORD *)v100 + 3) = v176;
            uint64_t v185 = (v185 + 1);
            if ((v180 & 1) == 0)
            {
              HIDWORD(v182) = 1;
              goto LABEL_183;
            }
          }
          else
          {
            CVPixelBufferRef v97 = v179;
            if ((v180 & 1) == 0) {
              goto LABEL_183;
            }
          }
          if (*(void *)(v9 + 48))
          {
            if (v97)
            {
LABEL_179:
              uint64_t v98 = v185;
              if (!H16ISP::H16ISPDevice::ISP_GetCameraTime(*(void *)(v9 + 328), buf)) {
                operator new();
              }
              uint64_t v99 = 0;
            }
            else
            {
              uint64_t v101 = 0;
              uint64_t v102 = *(void *)(v9 + 744);
              unint64_t v103 = *(void *)(v9 + 768);
              uint64_t v104 = *(void *)(v9 + 752);
              do
              {
                if (v104 == v102) {
                  uint64_t v105 = 0;
                }
                else {
                  uint64_t v105 = *(void *)(v102 + 8 * (*(void *)(v9 + 768) >> 9)) + 8 * (*(void *)(v9 + 768) & 0x1FFLL);
                }
                v106 = (void *)(v102 + 8 * (v103 >> 9));
LABEL_189:
                uint64_t v107 = v105 - 4096;
                while (1)
                {
                  uint64_t v108 = v104 == v102
                       ? 0
                       : *(void *)(v102 + (((*(void *)(v9 + 776) + v103) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*(void *)(v9 + 776) + v103) & 0x1FF);
                  if (v105 == v108) {
                    break;
                  }
                  uint64_t v109 = *(void *)v105;
                  if (*(void *)(v8 + 8 * (v101 + 2)) == *(_DWORD *)(*(void *)v105 + 8)
                    && *(_DWORD *)(*(void *)(v109 + 16) + 16) == 2)
                  {
                    CVPixelBufferRef v97 = *(CVPixelBufferRef *)v109;
                    if (*(void *)v109) {
                      goto LABEL_179;
                    }
                    break;
                  }
                  v105 += 8;
                  v107 += 8;
                  if (*v106 == v107)
                  {
                    uint64_t v110 = v106[1];
                    ++v106;
                    uint64_t v105 = v110;
                    goto LABEL_189;
                  }
                }
                ++v101;
              }
              while (v101 != v187);
              uint64_t v99 = mach_absolute_time();
              CVPixelBufferRef v97 = 0;
              uint64_t v98 = v185;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, void))(v9 + 48))(1, HIDWORD(v99), v99, 0, 0, *(void *)(v9 + 56));
LABEL_203:
            if (v182)
            {
              int v111 = H16ISP::H16ISPDevice::ISP_SendBuffers(*(void *)(v9 + 328), v222, v182, *(_DWORD *)(v9 + 304));
              if (v111)
              {
                v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
                {
                  v112 = os_log_create("com.apple.isp", "general");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v112;
                }
                if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v111;
                  _os_log_unreliable_impl();
                }
              }
              else
              {
                uint64_t v113 = 0;
                uint64_t v114 = *(void *)(v9 + 648);
                unint64_t v115 = *(void *)(v9 + 672);
                uint64_t v116 = *(void *)(v9 + 656);
                do
                {
                  if (v116 == v114) {
                    uint64_t v117 = 0;
                  }
                  else {
                    uint64_t v117 = *(void *)(v114 + 8 * (v115 >> 9)) + 8 * (v115 & 0x1FF);
                  }
                  v118 = (void *)(v114 + 8 * (v115 >> 9));
LABEL_214:
                  uint64_t v119 = v117 - 4096;
                  while (1)
                  {
                    uint64_t v120 = v116 == v114
                         ? 0
                         : *(void *)(v114 + (((*(void *)(v9 + 680) + v115) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((*(void *)(v9 + 680) + v115) & 0x1FF);
                    if (v117 == v120) {
                      break;
                    }
                    if (*(_DWORD *)(*(void *)v117 + 20) == LODWORD(v222[7 * v113 + 4]))
                    {
                      ++*(_DWORD *)(*(void *)v117 + 120);
                      break;
                    }
                    v117 += 8;
                    v119 += 8;
                    if (*v118 == v119)
                    {
                      uint64_t v121 = v118[1];
                      ++v118;
                      uint64_t v117 = v121;
                      goto LABEL_214;
                    }
                  }
                  ++v113;
                }
                while (v113 != v182);
              }
            }
            if (v98)
            {
              memset(buf, 0, 48);
              LOBYTE(pixelBuffer) = 0;
              if (v97)
              {
                H16ISP::H16ISPFrameReceiver::ProcessFrameMetadata(v9);
                if (v208) {
                  std::deque<__CVBuffer *>::push_back(buf, &v208);
                }
                if (v201) {
                  std::deque<__CVBuffer *>::push_back(buf, &v201);
                }
                if (v202) {
                  std::deque<__CVBuffer *>::push_back(buf, &v202);
                }
                if (*((void *)&v207 + 1))
                {
                  uint64_t v122 = *((void *)&v205 + 1);
                  uint64_t v123 = v206;
                  v124 = (void *)(*((void *)&v205 + 1) + 8 * ((unint64_t)v207 >> 9));
                  if ((void)v206 == *((void *)&v205 + 1)) {
                    v125 = 0;
                  }
                  else {
                    v125 = (void *)(*v124 + 8 * (v207 & 0x1FF));
                  }
                  while (1)
                  {
                    uint64_t v130 = v123 == v122
                         ? 0
                         : *(void *)(v122 + (((*((void *)&v207 + 1) + (void)v207) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((*((void *)&v207 + 1) + v207) & 0x1FF);
                    if (v125 == (void *)v130 || !*v125) {
                      break;
                    }
                    std::deque<__CVBuffer *>::push_back(buf, v125++);
                    if ((void *)((char *)v125 - *v124) == (void *)4096)
                    {
                      v131 = (void *)v124[1];
                      ++v124;
                      v125 = v131;
                    }
                    uint64_t v122 = *((void *)&v205 + 1);
                    uint64_t v123 = v206;
                  }
                }
                if (v204) {
                  std::deque<__CVBuffer *>::push_back(buf, &v204);
                }
                if (v199) {
                  std::deque<__CVBuffer *>::push_back(buf, &v199);
                }
                if (v198) {
                  std::deque<__CVBuffer *>::push_back(buf, &v198);
                }
                if (v197) {
                  std::deque<__CVBuffer *>::push_back(buf, &v197);
                }
                if (v196) {
                  std::deque<__CVBuffer *>::push_back(buf, &v196);
                }
                if (v195) {
                  std::deque<__CVBuffer *>::push_back(buf, &v195);
                }
                if (!v194) {
                  goto LABEL_293;
                }
              }
              else
              {
                CVPixelBufferRef v97 = v177;
                if (!v177)
                {
                  CVPixelBufferRef v97 = v175;
                  if (v175)
                  {
                    H16ISP::H16ISPFrameReceiver::ProcessFrameMetadata(v9);
                    if (v199) {
                      std::deque<__CVBuffer *>::push_back(buf, &v199);
                    }
                    if (v198) {
                      std::deque<__CVBuffer *>::push_back(buf, &v198);
                    }
                    if (v197) {
                      std::deque<__CVBuffer *>::push_back(buf, &v197);
                    }
                    if (v196) {
                      std::deque<__CVBuffer *>::push_back(buf, &v196);
                    }
                    if (v195) {
                      std::deque<__CVBuffer *>::push_back(buf, &v195);
                    }
                  }
                  else
                  {
                    if (v193) {
                      std::deque<__CVBuffer *>::push_back(buf, &v193);
                    }
                    CVPixelBufferRef v97 = 0;
                  }
                  goto LABEL_293;
                }
                H16ISP::H16ISPFrameReceiver::ProcessFrameMetadata(v9);
                if (v203) {
                  std::deque<__CVBuffer *>::push_back(buf, &v203);
                }
                if (v200) {
                  std::deque<__CVBuffer *>::push_back(buf, &v200);
                }
                if (*((void *)&v207 + 1))
                {
                  uint64_t v126 = *((void *)&v205 + 1);
                  uint64_t v127 = v206;
                  v128 = (void *)(*((void *)&v205 + 1) + 8 * ((unint64_t)v207 >> 9));
                  if ((void)v206 == *((void *)&v205 + 1)) {
                    v129 = 0;
                  }
                  else {
                    v129 = (void *)(*v128 + 8 * (v207 & 0x1FF));
                  }
                  while (1)
                  {
                    uint64_t v132 = v127 == v126
                         ? 0
                         : *(void *)(v126 + (((*((void *)&v207 + 1) + (void)v207) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((*((void *)&v207 + 1) + v207) & 0x1FF);
                    if (v129 == (void *)v132 || !*v129) {
                      break;
                    }
                    std::deque<__CVBuffer *>::push_back(buf, v129++);
                    if ((void *)((char *)v129 - *v128) == (void *)4096)
                    {
                      v133 = (void *)v128[1];
                      ++v128;
                      v129 = v133;
                    }
                    uint64_t v126 = *((void *)&v205 + 1);
                    uint64_t v127 = v206;
                  }
                }
                if (v204) {
                  std::deque<__CVBuffer *>::push_back(buf, &v204);
                }
                if (!v194)
                {
LABEL_293:
                  int64_t v134 = FigHostTimeToNanoseconds();
                  CMTimeMake(&time, v134, 1000000000);
                  CFDictionaryRef v135 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x263EFFB08]);
                  uint64_t v136 = *(void *)&buf[8];
                  uint64_t v137 = *(void *)&buf[16];
                  v138 = (void *)(*(void *)&buf[8] + 8 * (*(void *)&buf[32] >> 9));
                  if (*(void *)&buf[16] == *(void *)&buf[8]) {
                    v139 = 0;
                  }
                  else {
                    v139 = (CVBufferRef *)(*v138 + 8 * (*(_WORD *)&buf[32] & 0x1FF));
                  }
                  CFStringRef v140 = (const __CFString *)*MEMORY[0x263F2C560];
                  while (1)
                  {
                    uint64_t v141 = v137 == v136
                         ? 0
                         : *(void *)(v136 + (((*(void *)&buf[40] + *(void *)&buf[32]) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((*(void *)&buf[40] + *(void *)&buf[32]) & 0x1FFLL);
                    if (v139 == (CVBufferRef *)v141 || !*v139) {
                      break;
                    }
                    CVBufferSetAttachment(*v139, @"RawMetaData", v97, kCVAttachmentMode_ShouldPropagate);
                    if (*v186) {
                      CVBufferSetAttachment(*v139, @"RawFaceDetectData", *v186, kCVAttachmentMode_ShouldPropagate);
                    }
                    if (v135) {
                      CVBufferSetAttachment(*v139, v140, v135, kCVAttachmentMode_ShouldPropagate);
                    }
                    if ((CVBufferRef *)((char *)++v139 - *v138) == (CVBufferRef *)4096)
                    {
                      v142 = (CVBufferRef *)v138[1];
                      ++v138;
                      v139 = v142;
                    }
                    uint64_t v136 = *(void *)&buf[8];
                    uint64_t v137 = *(void *)&buf[16];
                  }
                  if (v135) {
                    CFRelease(v135);
                  }
                  uint64_t v143 = v98;
                  if (*(unsigned char *)(v9 + 868))
                  {
                    H16ISP::H16ISPDevice::ISP_GetCameraTime(*(void *)(v9 + 328), &outputStruct);
                    uint64_t v145 = *(void *)(*(void *)(v9 + 328) + 104);
                    if (v145)
                    {
                      H16ISP::H16ISPMotionManager::GetOscarTimeSyncInfo(v145, v190);
                    }
                    else
                    {
                      *(void *)v190 = 0;
                      v191[0] = 0;
                    }
                    if (*(void *)&buf[40])
                    {
                      v144.n128_u64[0] = *(void *)(v9 + 408);
                      H16ISP::GenerateAndAttachCoreMediaMetaDataDictionary(*(void *)(*(void *)(v9 + 328) + 88), *(void *)(*(void *)(*(void *)&buf[8] + ((*(void *)&buf[32] >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_WORD *)&buf[32] & 0x1FF)), buf, v9 + 872, v144);
                    }
                  }
                  if (*(_DWORD *)(v9 + 804) && v208)
                  {
                    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v208);
                    OSType v147 = PixelFormatType;
                    BOOL v149 = PixelFormatType == 2037741158 || PixelFormatType == 875704422;
                    CVPixelBufferLockBaseAddress(v208, 0);
                    if (v147 == 2037741171 || v147 == 2037741158)
                    {
                      BaseAddress = CVPixelBufferGetBaseAddress(v208);
                      size_t Width = CVPixelBufferGetWidth(v208);
                      size_t Height = CVPixelBufferGetHeight(v208);
                      int BytesPerRow = (H16ISP::H16ISPFrameReceiver *)CVPixelBufferGetBytesPerRow(v208);
                      H16ISP::H16ISPFrameReceiver::InsertTestPattern(BytesPerRow, BaseAddress, Width, Height, (size_t)BytesPerRow, !v149, v149);
                    }
                    else
                    {
                      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v208, 0);
                      v155 = (char *)CVPixelBufferGetBaseAddressOfPlane(v208, 1uLL);
                      int v156 = CVPixelBufferGetWidth(v208);
                      int v157 = CVPixelBufferGetHeight(v208);
                      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v208, 0);
                      v159 = (H16ISP::H16ISPFrameReceiver *)CVPixelBufferGetBytesPerRowOfPlane(v208, 1uLL);
                      H16ISP::H16ISPFrameReceiver::InsertTestPattern_YCbCr_420_Y_UV(v159, BaseAddressOfPlane, v155, v156, v157, BytesPerRowOfPlane, (unint64_t)v159, !v149, v160, v149);
                    }
                    CVPixelBufferUnlockBaseAddress(v208, 0);
                  }
                  if (*v186)
                  {
                    uint64_t v161 = v143;
                    unint64_t v162 = 0x26B11B000;
                    if (!v203 && (v208 || v201 || v202))
                    {
                      v163 = (CVPixelBufferRef *)&v223[v143];
                      CVPixelBufferRef *v163 = *v186;
                      v163[1] = *(CVPixelBufferRef *)(*(void *)(v9 + 400) + 16);
                      uint64_t v161 = (v143 + 1);
                      *(void *)(v9 + 384) = 0;
                    }
                  }
                  else
                  {
                    uint64_t v161 = v143;
                    unint64_t v162 = 0x26B11B000uLL;
                  }
                  int v164 = pixelBuffer;
                  if ((_BYTE)pixelBuffer)
                  {
                    if (*(unsigned char *)(v9 + 944)) {
                      (*(void (**)(uint64_t, void, void, void, void, void))(v9 + 48))(1, HIDWORD(v209), v209, 0, 0, *(void *)(v9 + 56));
                    }
                    ++*(_DWORD *)(v9 + 948);
                    v165 = *(NSObject **)(v162 + 2024);
                    if (v165 == &_os_log_internal)
                    {
                      v165 = os_log_create("com.apple.isp", "general");
                      *(void *)(v162 + 2024) = v165;
                    }
                    if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
                    {
                      int v166 = *(_DWORD *)(v9 + 364);
                      int v167 = *(unsigned __int8 *)(v9 + 944);
                      __int32 v168 = *(_DWORD *)(v9 + 368);
                      int outputStruct = 67109632;
                      int v213 = v166;
                      LOWORD(v214) = 1024;
                      *(_DWORD *)((char *)&v214 + 2) = v167;
                      HIWORD(v214) = 1024;
                      __int32 v215 = v168;
                      _os_log_unreliable_impl();
                    }
                  }
                  BOOL v169 = (!*(void *)&buf[40] && *(_DWORD *)(v9 + 372) != -1 || v164 && *(unsigned char *)(v9 + 944))
                      && HIDWORD(v182) == 0;
                  v170 = *(void (**)(void, uint64_t, void, uint64_t, _OWORD *))(v9 + 32);
                  if (v170 && !v169)
                  {
                    if (*(void *)(v9 + 320)) {
                      operator new();
                    }
                    v170(*(void *)(v9 + 40), v209, *(unsigned int *)(v9 + 364), v161, v223);
                  }
                  if (v161)
                  {
                    uint64_t v171 = v161;
                    v172 = (CVBufferRef *)v223;
                    do
                    {
                      CVBufferRelease(*v172);
                      CVBufferRef *v172 = 0;
                      v172 += 2;
                      --v171;
                    }
                    while (v171);
                  }
                  std::deque<__CVBuffer *>::~deque[abi:ne180100](buf);
                  goto LABEL_359;
                }
              }
              std::deque<__CVBuffer *>::push_back(buf, &v194);
              goto LABEL_293;
            }
            goto LABEL_359;
          }
LABEL_183:
          uint64_t v98 = v185;
          goto LABEL_203;
        }
        uint64_t v36 = &v223[v185];
        *uint64_t v36 = *(void *)v19;
        v36[1] = *(void *)(*((void *)v19 + 2) + 16);
        std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::erase(v184, v13, v15);
      }
      uint64_t v185 = (v185 + 1);
LABEL_75:
      MEMORY[0x24C53D6E0](v19, 0x1020C4093CA8EA1);
      goto LABEL_76;
    }
    break;
  }
  v96 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    v96 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v96;
  }
  if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "FrameDone";
    _os_log_impl(&dword_24680F000, v96, OS_LOG_TYPE_DEFAULT, "%s - Simulating YUV buffer starvation, returning\n", buf, 0xCu);
  }
  MEMORY[0x24C53D6E0](v19, 0x1020C4093CA8EA1);
  return std::deque<__CVBuffer *>::~deque[abi:ne180100](&v205);
}

void sub_246818158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
}

uint64_t std::deque<__CVBuffer *>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<__CVBuffer **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<__CVBuffer **>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::deque<__CVBuffer *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<__CVBuffer *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t H16ISP::H16ISPDevice::ISP_SendBuffers(uint64_t a1, const void *a2, unsigned int a3, mach_port_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  kdebug_trace();
  mach_port_t v8 = *(_DWORD *)(a1 + 4424);
  if (v8)
  {
    long long v12 = 0u;
    uint64_t v9 = IOConnectCallAsyncMethod(v8, 6u, a4, &reference, 8u, 0, 0, a2, 56 * a3, 0, 0, 0, 0);
  }
  else
  {
    uint64_t v9 = 3758097084;
  }
  kdebug_trace();
  return v9;
}

uint64_t H16ISP::H16ISPFrameReceiver::tickleNoDataTimer(H16ISP::H16ISPFrameReceiver *this)
{
  unsigned int v2 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableISPBringup", @"com.apple.coremedia", 0);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 224));
  uint64_t v3 = (__CFRunLoopTimer *)*((void *)this + 36);
  if (v3)
  {
    double v4 = CFAbsoluteTimeGetCurrent() + *((double *)this + 114);
    double v5 = 200.0;
    if (!v2) {
      double v5 = 0.0;
    }
    CFRunLoopTimerSetNextFireDate(v3, v5 + v4);
  }

  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 224));
}

void std::deque<H16ISP::H16ISPFilterGraphNode *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    mach_port_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)mach_port_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      mach_port_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        mach_port_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    mach_port_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<__CVBuffer **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    mach_port_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int32 v48 = (uint64_t *)a1[1];
      mach_port_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        mach_port_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CFNumberRef v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CFNumberRef v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unsigned int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        mach_port_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  CFNumberRef v53 = operator new(0x1000uLL);
  std::__split_buffer<__CVBuffer **>::push_back(&v54, &v53);
  CVPixelBufferRef v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24681880C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<__CVBuffer *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    mach_port_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)mach_port_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      mach_port_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        mach_port_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    mach_port_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<__CVBuffer **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    mach_port_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int32 v48 = (uint64_t *)a1[1];
      mach_port_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        mach_port_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CFNumberRef v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CFNumberRef v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unsigned int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        mach_port_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  CFNumberRef v53 = operator new(0x1000uLL);
  std::__split_buffer<__CVBuffer **>::push_back(&v54, &v53);
  CVPixelBufferRef v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_246818B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned int,unsigned int>>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::__split_buffer<__CVBuffer **>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    int64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      int64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  int64_t v5 = (char *)a1[3];
  unint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    BOOL v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      uint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      CVPixelBufferRef v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      uint64_t v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      int64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      unint64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

uint64_t H16ISP::H16ISPFrameReceiver::ProcessFrameMetadata(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (!H16ISP::H16ISPDevice::ISP_GetCameraTime(*(void *)(a1 + 328), &outputStruct)) {
    operator new();
  }
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPFrameReceiver::ProcessFrameMetadata();
  }
  return 0;
}

void sub_246819578(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1020C405A04CE29);
  _Unwind_Resume(a1);
}

H16ISP::H16ISPFrameMetadata *H16ISP::H16ISPFrameMetadata::H16ISPFrameMetadata(H16ISP::H16ISPFrameMetadata *this, CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  *((void *)this + 66) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((void *)this + 67) = pixelBuffer;
  *((void *)this + 68) = lockFlags;
  *((unsigned char *)this + 552) = 0;
  if (pixelBuffer)
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags);
    BaseAddress = CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 67));
    *((void *)this + 66) = BaseAddress;
    if (BaseAddress)
    {
      unsigned int v5 = BaseAddress[4];
      if (v5)
      {
        uint64_t v6 = BaseAddress[5];
        if (v6) {
          *(void *)this = (char *)BaseAddress + v6;
        }
        if (v5 >= 2)
        {
          uint64_t v7 = BaseAddress[6];
          if (v7) {
            *((void *)this + 1) = (char *)BaseAddress + v7;
          }
          if (v5 >= 3)
          {
            uint64_t v8 = BaseAddress[7];
            if (v8) {
              *((void *)this + 2) = (char *)BaseAddress + v8;
            }
            if (v5 >= 4)
            {
              uint64_t v9 = BaseAddress[8];
              if (v9) {
                *((void *)this + 3) = (char *)BaseAddress + v9;
              }
              if (v5 >= 5)
              {
                uint64_t v10 = BaseAddress[9];
                if (v10) {
                  *((void *)this + 4) = (char *)BaseAddress + v10;
                }
                if (v5 >= 6)
                {
                  uint64_t v11 = BaseAddress[10];
                  if (v11) {
                    *((void *)this + 5) = (char *)BaseAddress + v11;
                  }
                  if (v5 >= 7)
                  {
                    uint64_t v12 = BaseAddress[11];
                    if (v12) {
                      *((void *)this + 6) = (char *)BaseAddress + v12;
                    }
                    if (v5 >= 8)
                    {
                      uint64_t v13 = BaseAddress[12];
                      if (v13) {
                        *((void *)this + 7) = (char *)BaseAddress + v13;
                      }
                      if (v5 >= 9)
                      {
                        uint64_t v14 = BaseAddress[13];
                        if (v14) {
                          *((void *)this + 8) = (char *)BaseAddress + v14;
                        }
                        if (v5 < 0xB)
                        {
                          if (v5 != 10) {
                            return this;
                          }
                        }
                        else
                        {
                          uint64_t v15 = BaseAddress[15];
                          if (v15) {
                            *((void *)this + 10) = (char *)BaseAddress + v15;
                          }
                        }
                        uint64_t v16 = BaseAddress[14];
                        if (v16) {
                          *((void *)this + 9) = (char *)BaseAddress + v16;
                        }
                        if (v5 >= 0xC)
                        {
                          uint64_t v17 = BaseAddress[16];
                          if (v17) {
                            *((void *)this + 11) = (char *)BaseAddress + v17;
                          }
                          if (v5 >= 0xD)
                          {
                            uint64_t v18 = BaseAddress[17];
                            if (v18) {
                              *((void *)this + 12) = (char *)BaseAddress + v18;
                            }
                            if (v5 >= 0xE)
                            {
                              uint64_t v19 = BaseAddress[18];
                              if (v19) {
                                *((void *)this + 13) = (char *)BaseAddress + v19;
                              }
                              if (v5 >= 0xF)
                              {
                                uint64_t v20 = BaseAddress[19];
                                if (v20) {
                                  *((void *)this + 14) = (char *)BaseAddress + v20;
                                }
                                if (v5 >= 0x10)
                                {
                                  uint64_t v21 = BaseAddress[20];
                                  if (v21) {
                                    *((void *)this + 15) = (char *)BaseAddress + v21;
                                  }
                                  if (v5 >= 0x11)
                                  {
                                    uint64_t v22 = BaseAddress[21];
                                    if (v22) {
                                      *((void *)this + 16) = (char *)BaseAddress + v22;
                                    }
                                    if (v5 >= 0x12)
                                    {
                                      uint64_t v23 = BaseAddress[22];
                                      if (v23) {
                                        *((void *)this + 17) = (char *)BaseAddress + v23;
                                      }
                                      if (v5 >= 0x13)
                                      {
                                        uint64_t v24 = BaseAddress[23];
                                        if (v24) {
                                          *((void *)this + 18) = (char *)BaseAddress + v24;
                                        }
                                        if (v5 >= 0x14)
                                        {
                                          uint64_t v25 = BaseAddress[24];
                                          if (v25) {
                                            *((void *)this + 19) = (char *)BaseAddress + v25;
                                          }
                                          if (v5 >= 0x15)
                                          {
                                            uint64_t v26 = BaseAddress[25];
                                            if (v26) {
                                              *((void *)this + 20) = (char *)BaseAddress + v26;
                                            }
                                            if (v5 >= 0x16)
                                            {
                                              uint64_t v27 = BaseAddress[26];
                                              if (v27) {
                                                *((void *)this + 21) = (char *)BaseAddress + v27;
                                              }
                                              if (v5 >= 0x17)
                                              {
                                                uint64_t v28 = BaseAddress[27];
                                                if (v28) {
                                                  *((void *)this + 22) = (char *)BaseAddress + v28;
                                                }
                                                if (v5 >= 0x18)
                                                {
                                                  uint64_t v29 = BaseAddress[28];
                                                  if (v29) {
                                                    *((void *)this + 23) = (char *)BaseAddress + v29;
                                                  }
                                                  if (v5 >= 0x19)
                                                  {
                                                    uint64_t v30 = BaseAddress[29];
                                                    if (v30) {
                                                      *((void *)this + 24) = (char *)BaseAddress + v30;
                                                    }
                                                    if (v5 >= 0x1A)
                                                    {
                                                      uint64_t v31 = BaseAddress[30];
                                                      if (v31) {
                                                        *((void *)this + 25) = (char *)BaseAddress + v31;
                                                      }
                                                      if (v5 >= 0x1B)
                                                      {
                                                        uint64_t v32 = BaseAddress[31];
                                                        if (v32) {
                                                          *((void *)this + 26) = (char *)BaseAddress + v32;
                                                        }
                                                        if (v5 >= 0x1C)
                                                        {
                                                          uint64_t v33 = BaseAddress[32];
                                                          if (v33) {
                                                            *((void *)this + 27) = (char *)BaseAddress + v33;
                                                          }
                                                          if (v5 >= 0x1D)
                                                          {
                                                            uint64_t v34 = BaseAddress[33];
                                                            if (v34) {
                                                              *((void *)this + 28) = (char *)BaseAddress + v34;
                                                            }
                                                            if (v5 >= 0x1E)
                                                            {
                                                              uint64_t v35 = BaseAddress[34];
                                                              if (v35) {
                                                                *((void *)this + 29) = (char *)BaseAddress + v35;
                                                              }
                                                              if (v5 >= 0x1F)
                                                              {
                                                                uint64_t v36 = BaseAddress[35];
                                                                if (v36) {
                                                                  *((void *)this + 30) = (char *)BaseAddress + v36;
                                                                }
                                                                if (v5 >= 0x20)
                                                                {
                                                                  uint64_t v37 = BaseAddress[36];
                                                                  if (v37) {
                                                                    *((void *)this + 31) = (char *)BaseAddress + v37;
                                                                  }
                                                                  if (v5 >= 0x21)
                                                                  {
                                                                    uint64_t v38 = BaseAddress[37];
                                                                    if (v38) {
                                                                      *((void *)this + 32) = (char *)BaseAddress + v38;
                                                                    }
                                                                    if (v5 >= 0x22)
                                                                    {
                                                                      uint64_t v39 = BaseAddress[38];
                                                                      if (v39) {
                                                                        *((void *)this + 33) = (char *)BaseAddress
                                                                      }
                                                                                               + v39;
                                                                      if (v5 >= 0x23)
                                                                      {
                                                                        uint64_t v40 = BaseAddress[39];
                                                                        if (v40) {
                                                                          *((void *)this + 34) = (char *)BaseAddress
                                                                        }
                                                                                                 + v40;
                                                                        if (v5 >= 0x24)
                                                                        {
                                                                          uint64_t v41 = BaseAddress[40];
                                                                          if (v41) {
                                                                            *((void *)this + 35) = (char *)BaseAddress + v41;
                                                                          }
                                                                          if (v5 >= 0x25)
                                                                          {
                                                                            uint64_t v42 = BaseAddress[41];
                                                                            if (v42) {
                                                                              *((void *)this + 36) = (char *)BaseAddress + v42;
                                                                            }
                                                                            if (v5 >= 0x26)
                                                                            {
                                                                              uint64_t v43 = BaseAddress[42];
                                                                              if (v43) {
                                                                                *((void *)this + 37) = (char *)BaseAddress + v43;
                                                                              }
                                                                              if (v5 >= 0x27)
                                                                              {
                                                                                uint64_t v44 = BaseAddress[43];
                                                                                if (v44) {
                                                                                  *((void *)this + 38) = (char *)BaseAddress + v44;
                                                                                }
                                                                                if (v5 >= 0x28)
                                                                                {
                                                                                  uint64_t v45 = BaseAddress[44];
                                                                                  if (v45) {
                                                                                    *((void *)this + 39) = (char *)BaseAddress + v45;
                                                                                  }
                                                                                  if (v5 >= 0x29)
                                                                                  {
                                                                                    uint64_t v46 = BaseAddress[45];
                                                                                    if (v46) {
                                                                                      *((void *)this + 40) = (char *)BaseAddress + v46;
                                                                                    }
                                                                                    if (v5 >= 0x2A)
                                                                                    {
                                                                                      uint64_t v47 = BaseAddress[46];
                                                                                      if (v47) {
                                                                                        *((void *)this + 41) = (char *)BaseAddress + v47;
                                                                                      }
                                                                                      if (v5 >= 0x2B)
                                                                                      {
                                                                                        uint64_t v48 = BaseAddress[47];
                                                                                        if (v48) {
                                                                                          *((void *)this + 42) = (char *)BaseAddress + v48;
                                                                                        }
                                                                                        if (v5 >= 0x2C)
                                                                                        {
                                                                                          uint64_t v49 = BaseAddress[48];
                                                                                          if (v49) {
                                                                                            *((void *)this + 43) = (char *)BaseAddress + v49;
                                                                                          }
                                                                                          if (v5 >= 0x2D)
                                                                                          {
                                                                                            uint64_t v50 = BaseAddress[49];
                                                                                            if (v50) {
                                                                                              *((void *)this + 44) = (char *)BaseAddress + v50;
                                                                                            }
                                                                                            if (v5 >= 0x2E)
                                                                                            {
                                                                                              uint64_t v51 = BaseAddress[50];
                                                                                              if (v51) {
                                                                                                *((void *)this + 45) = (char *)BaseAddress + v51;
                                                                                              }
                                                                                              if (v5 >= 0x2F)
                                                                                              {
                                                                                                uint64_t v52 = BaseAddress[51];
                                                                                                if (v52) {
                                                                                                  *((void *)this + 46) = (char *)BaseAddress + v52;
                                                                                                }
                                                                                                if (v5 < 0x4F)
                                                                                                {
                                                                                                  if (v5 < 0x30) {
                                                                                                    return this;
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  uint64_t v53 = BaseAddress[83];
                                                                                                  if (v53) {
                                                                                                    *((void *)this + 47) = (char *)BaseAddress + v53;
                                                                                                  }
                                                                                                }
                                                                                                uint64_t v54 = BaseAddress[52];
                                                                                                if (v54) {
                                                                                                  *((void *)this + 48) = (char *)BaseAddress + v54;
                                                                                                }
                                                                                                if (v5 >= 0x31)
                                                                                                {
                                                                                                  uint64_t v55 = BaseAddress[53];
                                                                                                  if (v55) {
                                                                                                    *((void *)this + 49) = (char *)BaseAddress + v55;
                                                                                                  }
                                                                                                  if (v5 >= 0x32)
                                                                                                  {
                                                                                                    uint64_t v56 = BaseAddress[54];
                                                                                                    if (v56) {
                                                                                                      *((void *)this + 50) = (char *)BaseAddress + v56;
                                                                                                    }
                                                                                                    if (v5 >= 0x33)
                                                                                                    {
                                                                                                      uint64_t v57 = BaseAddress[55];
                                                                                                      if (v57) {
                                                                                                        *((void *)this + 51) = (char *)BaseAddress + v57;
                                                                                                      }
                                                                                                      if (v5 >= 0x34)
                                                                                                      {
                                                                                                        uint64_t v58 = BaseAddress[56];
                                                                                                        if (v58) {
                                                                                                          *((void *)this + 52) = (char *)BaseAddress + v58;
                                                                                                        }
                                                                                                        if (v5 >= 0x35)
                                                                                                        {
                                                                                                          uint64_t v59 = BaseAddress[57];
                                                                                                          if (v59) {
                                                                                                            *((void *)this + 53) = (char *)BaseAddress + v59;
                                                                                                          }
                                                                                                          if (v5 >= 0x36)
                                                                                                          {
                                                                                                            uint64_t v60 = BaseAddress[58];
                                                                                                            if (v60) {
                                                                                                              *((void *)this + 54) = (char *)BaseAddress + v60;
                                                                                                            }
                                                                                                            if (v5 >= 0x37)
                                                                                                            {
                                                                                                              uint64_t v61 = BaseAddress[59];
                                                                                                              if (v61) {
                                                                                                                *((void *)this + 55) = (char *)BaseAddress + v61;
                                                                                                              }
                                                                                                              if (v5 >= 0x38)
                                                                                                              {
                                                                                                                uint64_t v62 = BaseAddress[60];
                                                                                                                if (v62) {
                                                                                                                  *((void *)this + 56) = (char *)BaseAddress + v62;
                                                                                                                }
                                                                                                                if (v5 >= 0x39)
                                                                                                                {
                                                                                                                  uint64_t v63 = BaseAddress[61];
                                                                                                                  if (v63) {
                                                                                                                    *((void *)this + 57) = (char *)BaseAddress + v63;
                                                                                                                  }
                                                                                                                  if (v5 >= 0x3D)
                                                                                                                  {
                                                                                                                    uint64_t v64 = BaseAddress[65];
                                                                                                                    if (v64) {
                                                                                                                      *((void *)this + 58) = (char *)BaseAddress + v64;
                                                                                                                    }
                                                                                                                    if (v5 >= 0x3F)
                                                                                                                    {
                                                                                                                      uint64_t v65 = BaseAddress[67];
                                                                                                                      if (v65) {
                                                                                                                        *((void *)this + 59) = (char *)BaseAddress + v65;
                                                                                                                      }
                                                                                                                      if (v5 >= 0x40)
                                                                                                                      {
                                                                                                                        uint64_t v66 = BaseAddress[68];
                                                                                                                        if (v66) {
                                                                                                                          *((void *)this + 60) = (char *)BaseAddress + v66;
                                                                                                                        }
                                                                                                                        if (v5 >= 0x44)
                                                                                                                        {
                                                                                                                          uint64_t v67 = BaseAddress[72];
                                                                                                                          if (v67) {
                                                                                                                            *((void *)this + 61) = (char *)BaseAddress + v67;
                                                                                                                          }
                                                                                                                          if (v5 < 0x46)
                                                                                                                          {
                                                                                                                            if (v5 != 69) {
                                                                                                                              return this;
                                                                                                                            }
                                                                                                                          }
                                                                                                                          else
                                                                                                                          {
                                                                                                                            uint64_t v68 = BaseAddress[74];
                                                                                                                            if (v68) {
                                                                                                                              *((void *)this + 62) = (char *)BaseAddress + v68;
                                                                                                                            }
                                                                                                                          }
                                                                                                                          uint64_t v69 = BaseAddress[73];
                                                                                                                          if (v69) {
                                                                                                                            *((void *)this + 63) = (char *)BaseAddress + v69;
                                                                                                                          }
                                                                                                                          if (v5 >= 0x4D)
                                                                                                                          {
                                                                                                                            uint64_t v70 = BaseAddress[81];
                                                                                                                            if (v70) {
                                                                                                                              *((void *)this + 64) = (char *)BaseAddress + v70;
                                                                                                                            }
                                                                                                                            if (v5 >= 0x4E)
                                                                                                                            {
                                                                                                                              uint64_t v71 = BaseAddress[82];
                                                                                                                              if (v71) {
                                                                                                                                *((void *)this + 65) = (char *)BaseAddress + v71;
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void H16ISP::H16ISPFrameMetadata::~H16ISPFrameMetadata(H16ISP::H16ISPFrameMetadata *this)
{
  unint64_t v2 = (__CVBuffer *)*((void *)this + 67);
  if (v2) {
    CVPixelBufferUnlockBaseAddress(v2, *((void *)this + 68));
  }
  if (*((unsigned char *)this + 552)) {
    H16ISP::H16ISPFrameMetadata::DeepFree(this);
  }
}

uint64_t H16ISP::H16ISPDevice::ISP_GetCameraTime(uint64_t a1, void *outputStruct)
{
  size_t outputStructCnt = 16;
  mach_port_t v2 = *(_DWORD *)(a1 + 4424);
  if (v2) {
    return IOConnectCallStructMethod(v2, 0xDu, 0, 0, outputStruct, &outputStructCnt);
  }
  else {
    return 3758097084;
  }
}

uint64_t H16ISP::H16ISPMotionManager::GetOscarTimeSyncInfo(uint64_t a1, _OWORD *a2)
{
  if (!*(unsigned char *)(a1 + 48)) {
    return 3758097112;
  }
  uint64_t result = 0;
  *a2 = *(_OWORD *)(a1 + 32);
  return result;
}

void *std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::erase(int64x2_t *a1, char *a2, char *a3)
{
  uint64_t v4 = a1->i64[1];
  unsigned int v5 = (char *)(v4 + 8 * ((unint64_t)a1[2].i64[0] >> 9));
  if (a1[1].i64[0] == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (char *)(*(void *)v5 + 8 * (a1[2].i64[0] & 0x1FF));
  }
  uint64_t v32 = (char **)(v4 + 8 * ((unint64_t)a1[2].i64[0] >> 9));
  uint64_t v33 = v6;
  if (v6 == a3) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = ((uint64_t)&a3[-*(void *)a2] >> 3) + ((a2 - v5) << 6) - ((uint64_t)&v6[-*(void *)v5] >> 3);
  }
  uint64_t v8 = (char **)std::__deque_iterator<__CVBuffer *,__CVBuffer **,__CVBuffer *&,__CVBuffer ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v32, v7);
  unint64_t v10 = (unint64_t)v8;
  unint64_t v11 = (unint64_t)v9;
  uint64_t v12 = a1[2].i64[1];
  if (v7 <= (unint64_t)(v12 - 1) >> 1)
  {
    uint64_t v18 = v9 - *v8;
    uint64_t v19 = v18 >> 3;
    if (v18 < -7)
    {
      unint64_t v28 = 510 - v19;
      uint64_t v21 = &v8[-(v28 >> 9)];
      uint64_t v22 = &(*v21)[8 * (~(_WORD)v28 & 0x1FF)];
    }
    else
    {
      unint64_t v20 = v19 + 1;
      uint64_t v21 = &v8[v20 >> 9];
      uint64_t v22 = &(*v21)[8 * (v20 & 0x1FF)];
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,0>(v32, v33, v8, v9, v21, v22, v34);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2469DAFB0);
    std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
  }
  else
  {
    uint64_t v13 = v9 - *v8;
    uint64_t v14 = v13 >> 3;
    if (v13 < -7)
    {
      unint64_t v23 = 510 - v14;
      uint64_t v16 = &v8[-(v23 >> 9)];
      uint64_t v17 = &(*v16)[8 * (~(_WORD)v23 & 0x1FF)];
    }
    else
    {
      unint64_t v15 = v14 + 1;
      uint64_t v16 = &v8[v15 >> 9];
      uint64_t v17 = &(*v16)[8 * (v15 & 0x1FF)];
    }
    unint64_t v24 = a1[2].i64[0] + v12;
    uint64_t v25 = a1->i64[1];
    uint64_t v26 = (char **)(v25 + 8 * (v24 >> 9));
    if (a1[1].i64[0] == v25) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = &(*v26)[8 * (v24 & 0x1FF)];
    }
    v34[0].n128_u64[0] = v10;
    v34[0].n128_u64[1] = v11;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>>>(v16, v17, v26, v27, (uint64_t)v34);
    --a1[2].i64[1];
    std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
  }
  uint64_t v29 = a1->i64[1];
  if (a1[1].i64[0] == v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 8 * ((unint64_t)a1[2].i64[0] >> 9)) + 8 * (a1[2].i64[0] & 0x1FF);
  }
  v34[0].n128_u64[0] = v29 + 8 * ((unint64_t)a1[2].i64[0] >> 9);
  v34[0].n128_u64[1] = v30;
  return std::__deque_iterator<__CVBuffer *,__CVBuffer **,__CVBuffer *&,__CVBuffer ***,long,512l>::operator+[abi:ne180100]((uint64_t)v34, v7);
}

uint64_t std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void ___ZL22H16ISPPostNotificationPK10__CFStringPKvS3__block_invoke(uint64_t a1)
{
  MEMORY[0x24C53CC80]();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32) + 4504;
  uint64_t v3 = v2 + 16 * *(unsigned int *)(a1 + 40);
  uint64_t result = notify_register_check(*(const char **)v3, (int *)(v3 + 12));
  *(unsigned char *)(v2 + 16 * *(unsigned int *)(a1 + 40) + 8) = result == 0;
  return result;
}

uint64_t SetColorPostProcessingMode(const __CFNumber *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = 0;
  if (!a1) {
    return 4294954513;
  }
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  if (H16ISP::H16ISPDevice::SetColorPostProcessingMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr))return 4294954516; {
  else
  }
    return 0;
}

uint64_t H16ISP::H16ISPDevice::SetColorPostProcessingMode(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2635;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetAEMeteringMode(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v6 |= 0x80000000;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFStringGetTypeID()) {
    return 4294954516;
  }
  if (CFEqual((CFTypeRef)*MEMORY[0x263F2D9F0], cf))
  {
    char v8 = 2;
    goto LABEL_10;
  }
  if (!CFEqual((CFTypeRef)*MEMORY[0x263F2D9E8], cf)) {
    return 4294954516;
  }
  char v8 = 3;
LABEL_10:
  if (H16ISP::H16ISPDevice::SetAEMeteringMode(*(H16ISP::H16ISPDevice **)(a4 + 24), v6, v8)) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::SetAEMeteringMode(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = -32250;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetHighlightRecoveryEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  uint64_t v8 = 4294954516;
  if (v7 == CFBooleanGetTypeID())
  {
    BOOL v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    *(unsigned char *)(a2 + 4129) = v9;
    if (H16ISP::H16ISPDevice::EnableHighlightRecovery(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v9, 0))return 4294954516; {
    else
    }
      return 0;
  }
  return v8;
}

uint64_t H16ISP::H16ISPDevice::EnableHighlightRecovery(H16ISP::H16ISPDevice *a1, int a2, int a3, int a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 4101;
  int v12 = a4;
  int v13 = a3;
  int v11 = a2;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetTimeMachineDepth(H16ISP::H16ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  bzero(v9, 0x10uLL);
  __int16 v10 = 296;
  int v11 = a2;
  __int16 v12 = a3;
  __int16 v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPServicesRemote::RunRgbj(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, __int16 a11, int a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  *(_DWORD *)&v56[16] = a15;
  *(void *)&v56[8] = a14;
  *(void *)uint64_t v56 = a13;
  uint64_t v16 = MEMORY[0x270FA5388](a1, a2);
  CFStringRef v18 = v17;
  CFStringRef v20 = v19;
  CFStringRef v22 = v21;
  unint64_t v24 = v23;
  uint64_t v25 = v16;
  uint64_t v55 = *MEMORY[0x263EF8340];
  LODWORD(v39) = 8;
  char v45 = v26;
  __int16 v48 = a11;
  int v49 = a12;
  int v50 = a9;
  int v46 = a10;
  int v47 = v27;
  uint64_t v52 = *(void *)&v56[4];
  uint64_t v53 = *(void *)&v56[12];
  char v51 = v56[0];
  int v54 = a16;
  xpc_object_t XpcFromType = H16ISP::createXpcFromType(v28, v23);
  xpc_object_t v42 = XpcFromType;
  xpc_object_t v31 = H16ISP::createXpcFromType(v20, v30);
  xpc_object_t v43 = v31;
  xpc_object_t v33 = H16ISP::createXpcFromType(v18, v32);
  xpc_object_t v44 = v33;
  xpc_object_t v35 = H16ISP::createXpcFromType(v22, v34);
  xpc_object_t v41 = v35;
  IOSurface = CVPixelBufferGetIOSurface(v24);
  xpc_object_t object = IOSurfaceCreateXPCObject(IOSurface);
  uint64_t v37 = H16ISP::H16ISPServicesRemote::SetProperty(v25, &v39);
  xpc_release(XpcFromType);
  xpc_release(v31);
  xpc_release(v33);
  xpc_release(object);
  xpc_release(v35);
  return v37;
}

uint64_t H16ISPCaptureDeviceRequestStreams(uint64_t a1, __CFString *a2, CFDictionaryRef theDict)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  if (theDict)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2C188]);
    int v7 = 2;
    if (Value)
    {
      int valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr == 3) {
        int v8 = 4;
      }
      else {
        int v8 = 2;
      }
      if (valuePtr) {
        int v7 = v8;
      }
      else {
        int v7 = 1;
      }
    }
    CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2C190]);
    if (v9) {
      BOOL v69 = CFBooleanGetValue(v9) != 0;
    }
    else {
      BOOL v69 = 0;
    }
  }
  else
  {
    BOOL v69 = 0;
    int v7 = 2;
  }
  uint64_t v10 = 4294954516;
  if (!a1 || !a2) {
    return v10;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!Mutable) {
    return 4294954510;
  }
  CFArrayRef v13 = Mutable;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(6u, DerivedStorage, 0, 0, 0, a2, 0);
  unint64_t v15 = (pthread_mutex_t *)(DerivedStorage + 32);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureDeviceRequestStreams(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    goto LABEL_21;
  }
  unsigned int v66 = v7;
  uint64_t v67 = (pthread_mutex_t *)(DerivedStorage + 32);
  uint64_t v71 = DerivedStorage;
  LockStreamMutexes(*(const __CFArray **)(DerivedStorage + 120));
  theArray = v13;
  if (CFArrayGetCount((CFArrayRef)a2))
  {
    CFIndex v24 = 0;
    uint64_t v25 = &_os_log_internal;
    uint64_t v68 = a2;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v24);
      FigCaptureStreamGetFigBaseObject();
      int v27 = (unsigned char *)CMBaseObjectGetDerivedStorage();
      CFStringRef v28 = v27;
      if (*v27) {
        break;
      }
      if (v27[2])
      {
        uint64_t v59 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v25)
        {
          uint64_t v59 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v59;
        }
        unint64_t v15 = (pthread_mutex_t *)(DerivedStorage + 32);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureDeviceRequestStreams();
        }
        UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 120));
        uint64_t v10 = 4294954516;
        goto LABEL_117;
      }
      if (!v27[1])
      {
        for (uint64_t i = 0; i != 32; i += 8)
        {
          uint64_t v30 = (CVPixelBufferRef *)&v28[i];
          if (*(void *)&v28[i + 832])
          {
            xpc_object_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v25)
            {
              xpc_object_t v31 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
            }
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              int valuePtr = 136315138;
              unsigned int v76 = "H16ISPCaptureDeviceRequestStreams";
              _os_log_impl(&dword_24680F000, v31, OS_LOG_TYPE_INFO, "%s - primaryScalerOutput.initialClientBuffers cleanup needed\n", (uint8_t *)&valuePtr, 0xCu);
            }
            CVPixelBufferRelease(v30[104]);
            v30[104] = 0;
          }
          uint64_t v32 = v30[129];
          if (v32)
          {
            CVPixelBufferRelease(v32);
            xpc_object_t v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v25)
            {
              xpc_object_t v33 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
            }
            if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              int valuePtr = 136315138;
              unsigned int v76 = "H16ISPCaptureDeviceRequestStreams";
              _os_log_impl(&dword_24680F000, v33, OS_LOG_TYPE_INFO, "%s - secondaryScalerOutput.initialClientBuffers cleanup needed\n", (uint8_t *)&valuePtr, 0xCu);
            }
            v30[129] = 0;
          }
          uint64_t v34 = *(__CVBuffer **)&v28[i + 1232];
          if (v34)
          {
            CVPixelBufferRelease(v34);
            xpc_object_t v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v25)
            {
              xpc_object_t v35 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v35;
            }
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              int valuePtr = 136315138;
              unsigned int v76 = "H16ISPCaptureDeviceRequestStreams";
              _os_log_impl(&dword_24680F000, v35, OS_LOG_TYPE_INFO, "%s - intermediateTapOutput.initialClientBuffers cleanup needed\n", (uint8_t *)&valuePtr, 0xCu);
            }
            *(void *)&v28[i + 1232] = 0;
          }
        }
        CFArrayRef v13 = theArray;
        CFArrayAppendValue(theArray, ValueAtIndex);
        a2 = v68;
      }
      if (++v24 >= (unint64_t)CFArrayGetCount((CFArrayRef)a2)) {
        goto LABEL_49;
      }
    }
    uint64_t v58 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v25)
    {
      uint64_t v58 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v58;
    }
    unint64_t v15 = (pthread_mutex_t *)(DerivedStorage + 32);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureDeviceRequestStreams();
    }
    UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 120));
LABEL_21:
    uint64_t v10 = 4294954511;
    goto LABEL_117;
  }
LABEL_49:
  uint64_t v36 = DerivedStorage;
  if (CFArrayGetCount(v13))
  {
    unint64_t v37 = 0;
    do
    {
      CFArrayGetValueAtIndex(v13, v37);
      FigCaptureStreamGetFigBaseObject();
      uint64_t v38 = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)(v38 + 4) = v66;
      if (H16ISP::H16ISPDevice::ISP_ReserveChannel(*(void *)(v71 + 24), *(_DWORD *)(v38 + 132), v66))
      {
        unint64_t v15 = v67;
        if (CFArrayGetCount(v13))
        {
          unint64_t v60 = 0;
          do
          {
            CFArrayGetValueAtIndex(v13, v60);
            FigCaptureStreamGetFigBaseObject();
            uint64_t v61 = CMBaseObjectGetDerivedStorage();
            if (*(unsigned char *)(v61 + 1))
            {
              uint64_t v62 = v61;
              H16ISP::H16ISPDevice::ISP_ReleaseChannel(*(H16ISP::H16ISPDevice **)(v71 + 24), *(_DWORD *)(v61 + 132));
              *(unsigned char *)(v62 + 1) = 0;
            }
            ++v60;
          }
          while (v60 < CFArrayGetCount(v13));
        }
        uint64_t v10 = 4294954615;
        goto LABEL_116;
      }
      *(unsigned char *)(v38 + 1) = 1;
      *(unsigned char *)(v38 + 4125) = 0;
      H16ISP::H16ISPDevice::ResetMetadataSections(*(H16ISP::H16ISPDevice **)(v71 + 24), *(_DWORD *)(v38 + 132));
      ++v37;
    }
    while (v37 < CFArrayGetCount(v13));
  }
  if (!CFArrayGetCount(v13))
  {
    uint64_t v10 = 0;
    goto LABEL_113;
  }
  unint64_t v39 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(v13, v39);
    FigCaptureStreamGetFigBaseObject();
    uint64_t v40 = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(v40 + 48) = 0;
    *(_DWORD *)(v40 + 4316) = 0;
    H16ISPResetVideoOutputConfigurationsForNewSelectedFormat(v40, v71);
    if (H16ISP::H16ISPDevice::EnableSBS(*(H16ISP::H16ISPDevice **)(v71 + 24), *(_DWORD *)(v40 + 132), *(unsigned char *)(*(void *)(v40 + 160) + 120 * *(unsigned int *)(v40 + 48) + 104)))break; {
    if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(v71 + 24), *(_DWORD *)(v40 + 132), *(_DWORD *)(*(void *)(v40 + 160) + 120 * *(unsigned int *)(v40 + 48) + 16), v72, &valuePtr))
    }
    {
      uint64_t v64 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v64 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v64;
      }
      CFArrayRef v13 = theArray;
      uint64_t v36 = v71;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureDeviceRequestStreams();
      }
      uint64_t v10 = 4294954516;
      goto LABEL_113;
    }
    *(float *)(v40 + 60) = (float)v73 * 0.0039062;
    if (!v69 && SetDefaultFormatIndexConfiguration(v71, v40))
    {
      uint64_t v10 = 3758097122;
      CFArrayRef v13 = theArray;
      goto LABEL_115;
    }
    *(unsigned char *)(v40 + 57704) = !v69;
    uint64_t v41 = *(void *)(v71 + 24);
    uint64_t v42 = *(void *)(v41 + 4384);
    BOOL hasSensorType = H16ISP::H16ISPDevice::hasSensorType(v41, 1785950322);
    if (*(_DWORD *)(v40 + 640) && *(void *)(v71 + 200))
    {
      if (!hasSensorType || (unsigned int v44 = *(_DWORD *)(v40 + 132), *(_DWORD *)(v42 + 96 * v44 + 60) != 1))
      {
        if (!H16ISP::H16ISPDevice::hasSensorType(*(void *)(v71 + 24), 1718186595) || !byte_26B11BAEA) {
          goto LABEL_85;
        }
        unsigned int v44 = *(_DWORD *)(v40 + 132);
      }
      uint64_t v74 = 0;
      snprintf(__str, 0x80uLL, "%s%d.bin", "/var/mobile/Library/ISP/PFLEstimatorState", v44);
      CFStringRef v45 = CFStringCreateWithCString(v11, __str, 0x8000100u);
      if (v45)
      {
        CFStringRef v46 = v45;
        int v47 = H16ISP::H16ISPServicesRemote::ReadData(*(xpc_connection_t **)(v71 + 200), v45, &v74);
        CFRelease(v46);
        if (v47 || !v74)
        {
          int v54 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v54 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v54;
          }
          if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
            goto LABEL_85;
          }
          int v55 = *(_DWORD *)(v40 + 132);
          *(_DWORD *)buf = 136315650;
          int v78 = "LoadPFLFile";
          __int16 v79 = 1024;
          *(_DWORD *)__int16 v80 = v55;
          *(_WORD *)&v80[4] = 1024;
          *(_DWORD *)&v80[6] = v47;
          uint64_t v52 = v54;
          uint64_t v53 = "%s - Failed to read PFL state (channel=%d): 0x%08X\n\n";
          goto LABEL_79;
        }
        if (CFDataGetLength(v74) != 4120)
        {
          uint64_t v56 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v56 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v56;
          }
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            CFIndex Length = CFDataGetLength(v74);
            *(_DWORD *)buf = 136315650;
            int v78 = "LoadPFLFile";
            __int16 v79 = 2048;
            *(void *)__int16 v80 = Length;
            *(_WORD *)&v80[8] = 2048;
            uint64_t v81 = 4120;
            _os_log_error_impl(&dword_24680F000, v56, OS_LOG_TYPE_ERROR, "%s - File size (%ld) doesn't match expected firmware size(%ld)\n\n", buf, 0x20u);
          }
          CFRelease(v74);
          goto LABEL_85;
        }
        time_t v48 = time(0);
        *((void *)CFDataGetBytePtr(v74) + 1) = v48;
        int PersistFile = H16ISP::H16ISPDevice::LoadPersistFile(*(void *)(v71 + 24), *(unsigned int *)(v40 + 132));
        CFRelease(v74);
        if (PersistFile)
        {
          int v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v50 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v50;
          }
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            int v51 = *(_DWORD *)(v40 + 132);
            *(_DWORD *)buf = 136315650;
            int v78 = "LoadPFLFile";
            __int16 v79 = 1024;
            *(_DWORD *)__int16 v80 = v51;
            *(_WORD *)&v80[4] = 1024;
            *(_DWORD *)&v80[6] = PersistFile;
            uint64_t v52 = v50;
            uint64_t v53 = "%s - Failed to load PFL state (channel=%d): 0x%08X\n\n";
LABEL_79:
            _os_log_error_impl(&dword_24680F000, v52, OS_LOG_TYPE_ERROR, v53, buf, 0x18u);
          }
        }
      }
    }
LABEL_85:
    ++v39;
    CFArrayRef v13 = theArray;
    if (v39 >= CFArrayGetCount(theArray))
    {
      uint64_t v10 = 0;
LABEL_115:
      unint64_t v15 = v67;
      uint64_t v36 = v71;
      goto LABEL_116;
    }
  }
  uint64_t v63 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v63 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v63;
  }
  uint64_t v10 = 3758097122;
  CFArrayRef v13 = theArray;
  uint64_t v36 = v71;
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
    H16ISPCaptureDeviceRequestStreams();
  }
LABEL_113:
  unint64_t v15 = v67;
LABEL_116:
  UnlockStreamMutexes(*(const __CFArray **)(v36 + 120));
LABEL_117:
  pthread_mutex_unlock(v15);
  CFRelease(v13);
  return v10;
}

uint64_t H16ISP::H16ISPDevice::ResetMetadataSections(H16ISP::H16ISPDevice *this, int a2)
{
  bzero(v5, 0x10uLL);
  __int16 v6 = 343;
  int v7 = a2;
  int v8 = 0;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::ISP_ReserveChannel(uint64_t a1, unsigned int a2, unsigned int a3)
{
  input[2] = *MEMORY[0x263EF8340];
  mach_port_t v3 = *(_DWORD *)(a1 + 4424);
  if (!v3) {
    return 3758097084;
  }
  input[0] = a2;
  input[1] = a3;
  return IOConnectCallScalarMethod(v3, 0x30u, input, 2u, 0, 0);
}

uint64_t SetFormatIndex(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unsigned int valuePtr = -1;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (valuePtr >= 2 * *(_DWORD *)(a2 + 168)) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136))
  {
    if (valuePtr == *(_DWORD *)(a2 + 48)) {
      return 0;
    }
    else {
      return 4294954612;
    }
  }
  uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  uint64_t v11 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v10 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v12 = *(_DWORD *)(a2 + 132);
    *(_DWORD *)buf = 67109376;
    unsigned int v37 = valuePtr;
    __int16 v38 = 1024;
    int v39 = v12;
    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting new format: %d of CH%d\n\n", buf, 0xEu);
  }
  CFRelease(*(CFTypeRef *)(a2 + 40));
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 112), valuePtr);
  *(void *)(a2 + 40) = ValueAtIndex;
  CFRetain(ValueAtIndex);
  unsigned int v14 = valuePtr;
  *(_DWORD *)(a2 + 48) = valuePtr;
  *(_DWORD *)(a2 + 4316) = v14;
  unsigned int v15 = *(_DWORD *)(a2 + 168);
  if (v14 < v15) {
    unsigned int v15 = 0;
  }
  unsigned int v16 = v14 - v15;
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v14 - v15) + 16), v33, buf))
  {
    *(_DWORD *)(a2 + 52) = 1106247680;
    *(_DWORD *)(a2 + 60) = 1106247680;
    goto LABEL_32;
  }
  uint64_t v17 = *(void *)(a2 + 160);
  unsigned int v18 = *(_DWORD *)(a2 + 48);
  unsigned int v19 = *(_DWORD *)(a2 + 168);
  if (v18 < v19) {
    unsigned int v19 = 0;
  }
  uint64_t v20 = 120 * (v18 - v19);
  if (v17) {
    uint64_t v21 = v17 + 120 * v16;
  }
  else {
    uint64_t v21 = v20;
  }
  float v22 = *(float *)(v21 + 108);
  if (v22 == 0.0) {
    float v23 = (float)v34;
  }
  else {
    float v23 = v22 * 256.0;
  }
  float v24 = v23 * 0.0039062;
  *(float *)(a2 + 52) = v24;
  *(float *)(a2 + 60) = v24;
  if (v24 <= 30.0)
  {
    int v25 = 1;
    goto LABEL_30;
  }
  if (v24 > 120.0)
  {
    int v25 = -1;
LABEL_30:
    *(_DWORD *)(a2 + 68) = v25;
    goto LABEL_32;
  }
  *(_DWORD *)(a2 + 68) = 0;
LABEL_32:
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a2 + 368) = 0;
  if ((dword_26B11BAD4 & 0x80000000) == 0
    && H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322))
  {
    float v26 = (float)dword_26B11BAD4;
    *(float *)(a2 + 52) = (float)dword_26B11BAD4;
    *(float *)(a2 + 56) = v26;
    *(float *)(a2 + 60) = v26;
  }
  *(void *)(a2 + 604) = -1;
  *(void *)(a2 + 612) = -1;
  *(void *)(a2 + 596) = -1;
  memset_pattern16((void *)(a2 + 3684), &xmmword_2469DACD0, 0xCuLL);
  int v27 = *(_DWORD *)(a2 + 3756);
  *(_DWORD *)(a2 + 3764) = v27;
  *(_DWORD *)(a2 + 3760) = v27;
  *(_DWORD *)(a2 + 3696) = 0;
  H16ISPResetVideoOutputConfigurationsForNewSelectedFormat(a2, a4);
  if (H16ISP::H16ISPDevice::EnableSBS(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), *(unsigned char *)(*(void *)(a2 + 160) + 120 * v16 + 104)))
  {
    CFStringRef v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v11)
    {
      CFStringRef v28 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
    }
    uint64_t v8 = 3758097122;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      SetFormatIndex();
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v29 = *(void *)(a2 + 160) + 120 * v16;
  if (H16ISP::H16ISPDevice::SetCameraConfig(*(void *)(a4 + 24), *(unsigned int *)(a2 + 132), *(unsigned int *)(v29 + 16), *(unsigned __int8 *)(v29 + 36), *(unsigned int *)(v29 + 40), *(unsigned int *)(v29 + 44), *(void *)(v29 + 48), *(void *)(v29 + 56), *(unsigned char *)(v29 + 64), *(_DWORD *)(v29 + 68), *(_DWORD *)(v29 + 72), *(void *)(v29 + 76), *(void *)(v29 + 84)))
  {
    uint64_t v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v11)
    {
      uint64_t v30 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v30;
    }
    uint64_t v8 = 3758097122;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      SetFormatIndex();
    }
  }
  else
  {
    *(unsigned char *)(a2 + 4130) = 0;
  }
  if (H16ISP::H16ISPDevice::EnableFESAutoAdjust(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1))
  {
    xpc_object_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v11)
    {
      xpc_object_t v31 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
    }
    uint64_t v8 = 3758097122;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      SetFormatIndex();
    }
  }
  if (H16ISP::H16ISPDevice::SetMaximumAllowedFrameRate(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), vcvtms_u32_f32(*(float *)(a2 + 52) * 256.0)))
  {
    uint64_t v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v11)
    {
      uint64_t v32 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v32;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      SetFormatIndex();
    }
    return 3758097122;
  }
  return v8;
}

uint64_t H16ISP::H16ISPDevice::EnableFESAutoAdjust(H16ISP::H16ISPDevice *this, __int16 a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2307;
  __int16 v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableSBS(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 315;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetMaximumAllowedFrameRate(H16ISP::H16ISPDevice *this, __int16 a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 359;
  __int16 v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetCameraConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13 = MEMORY[0x270FA5388](a1, a2);
  unsigned int v21 = v14;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v22 = 3758097090;
  if (*(unsigned char *)(v13 + 4))
  {
    float v23 = (H16ISP::H16ISPDevice *)v13;
    if (*(_DWORD *)(v13 + 4748) > v14)
    {
      int v24 = v15;
      if (*(_DWORD *)(*(void *)(v13 + 40) + 432 * v14) > v15)
      {
        unint64_t v25 = v20;
        unint64_t v26 = v19;
        int v27 = v18;
        int v28 = v17;
        int v29 = v16;
        uint64_t v22 = H16ISP::H16ISPDevice::ISP_EnableSensorPower((H16ISP::H16ISPDevice *)v13, v14, 1u, 0);
        if (!v22)
        {
          bzero(v35, 0x10uLL);
          __int16 v36 = 263;
          unsigned int v37 = v21;
          int v38 = v24;
          uint64_t v22 = H16ISP::H16ISPDevice::ISP_SendCommand(v23, v35, 0x10u, 0, 0xFFFFFFFF);
          if (!v22)
          {
            if (*((unsigned char *)v23 + 16 * v21 + 4608))
            {
              uint64_t v30 = *(NSObject **)(*((void *)v23 + 9) + 72);
              if (v30)
              {
                v32[0] = MEMORY[0x263EF8330];
                v32[1] = 0x40000000;
                v32[2] = ___ZN6H16ISP12H16ISPDevice15SetCameraConfigEjjbjj9sCIspRectbjjS1__block_invoke;
                v32[3] = &__block_descriptor_tmp_12;
                v32[4] = v23;
                unsigned int v33 = v21;
                int v34 = v24;
                dispatch_async(v30, v32);
              }
            }
            if (!v29
              || (uint64_t v22 = H16ISP::H16ISPDevice::SetFESOutputSize(v23, v21, v28, v27), !v22)
              && (uint64_t v22 = H16ISP::H16ISPDevice::SetFESCropRect(v23, v21, v26, v25), !v22))
            {
              if (!a9
                || (uint64_t v22 = H16ISP::H16ISPDevice::SetStillFESConfig(v23, v21, v24, 1, a10, a11, a12, a13), !v22))
              {
                bzero(v35, 0x10uLL);
                __int16 v36 = 270;
                unsigned int v37 = v21;
                int v38 = 1;
                uint64_t v22 = H16ISP::H16ISPDevice::ISP_SendCommand(v23, v35, 0x10u, 0, 0xFFFFFFFF);
                if (!v22)
                {
                  bzero(v35, 0xCuLL);
                  unsigned int v37 = v21;
                  __int16 v36 = 271;
                  uint64_t v22 = H16ISP::H16ISPDevice::ISP_SendCommand(v23, v35, 0xCu, 0, 0xFFFFFFFF);
                  if (v22) {
                    H16ISP::H16ISPDevice::ISP_EnableSensorPower(v23, v21, 0, 0);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    uint64_t v22 = 3758097112;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPDevice::SetCameraConfig();
    }
  }
  return v22;
}

uint64_t H16ISP::H16ISPDevice::ISP_EnableSensorPower(H16ISP::H16ISPDevice *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t input[3] = *MEMORY[0x263EF8340];
  mach_port_t v5 = *((_DWORD *)this + 1106);
  if (!v5) {
    return 3758097084;
  }
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  input[0] = a2;
  input[1] = a3;
  input[2] = a4;
  uint64_t result = IOConnectCallScalarMethod(v5, 0x15u, input, 3u, 0, 0);
  if (result) {
    return result;
  }
  if (*((unsigned char *)this + 16 * v7 + 4512))
  {
    uint64_t result = *(void *)(*((void *)this + 9) + 72);
    if (!result) {
      return result;
    }
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN6H16ISP12H16ISPDevice21ISP_EnableSensorPowerEjbb_block_invoke;
    block[3] = &__block_descriptor_tmp_244;
    unsigned int v11 = a2;
    block[4] = this;
    void block[5] = v8;
    dispatch_async((dispatch_queue_t)result, block);
  }
  return 0;
}

uint64_t SetMultipleOutputSupportEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1)
  {
    int v7 = *(unsigned __int8 *)(a2 + 674);
    CFTypeID v8 = CFGetTypeID(a1);
    if (v8 == CFBooleanGetTypeID())
    {
      int v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
      uint64_t v10 = 0;
      int v11 = v9 != 0;
      *(unsigned char *)(a2 + 674) = v11;
    }
    else
    {
      int v11 = *(unsigned __int8 *)(a2 + 674);
      uint64_t v10 = 4294954516;
    }
    if (v11 != v7) {
      InitSupportedFormatsForCaptureStream(a2, a4);
    }
  }
  else
  {
    uint64_t v10 = 4294954516;
  }
  int v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v12 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = "True";
    if (!*(unsigned char *)(a2 + 674)) {
      uint64_t v13 = "False";
    }
    int v15 = 136315394;
    int v16 = "SetMultipleOutputSupportEnabled";
    __int16 v17 = 2080;
    int v18 = v13;
    _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_INFO, "%s - %s\n", (uint8_t *)&v15, 0x16u);
  }
  return v10;
}

uint64_t InitSupportedFormatsForCaptureStream(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 168) = 0;
  uint64_t v4 = (int *)(a1 + 168);
  *(void *)(a1 + 160) = 0;
  mach_port_t v5 = *(const void **)(a1 + 112);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 160) = H16ISP::getOutputPresets(*(_DWORD *)(a1 + 156), v4, *(unsigned int *)(*(void *)(a2 + 24) + 4392), *(_DWORD *)(*(void *)(a2 + 24) + 80), **(_DWORD **)(*(void *)(a2 + 24) + 4384));
  if (*(_DWORD *)(a1 + 168))
  {
    if (*(unsigned char *)(a1 + 674)) {
      operator new[]();
    }
    int v6 = gCaptureDeviceCFPrefs[44 * *(unsigned int *)(a1 + 132) + 167];
    if (v6 != -1)
    {
      if (H16ISP::GetOutputPresetForOutputSize(*(_DWORD *)(a1 + 156), v6, *(unsigned int *)(*(void *)(a2 + 24) + 4392), *(_DWORD *)(*(void *)(a2 + 24) + 80), **(_DWORD **)(*(void *)(a2 + 24) + 4384)))
      {
        operator new[]();
      }
    }
    operator new[]();
  }
  return 0;
}

__CFArray *H16ISP::getContextSwitchList(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  uint64_t result = 0;
  if (a3 < a2 && Mutable)
  {
    unsigned int v11 = 0;
    unsigned int valuePtr = 0;
    int v12 = (_DWORD *)(a1 + 120 * a3);
    do
    {
      if (v11 != a3 && *v12 != *(_DWORD *)(a1 + 120 * v11))
      {
        int v13 = *(_DWORD *)(a1 + 120 * v11 + 16);
        if (((a4 >> v13) & 1) != 0 || v12[4] == v13)
        {
          CFNumberRef v14 = CFNumberCreate(v8, kCFNumberIntType, &valuePtr);
          if (v14)
          {
            CFNumberRef v15 = v14;
            CFArrayAppendValue(Mutable, v14);
            CFRelease(v15);
          }
        }
      }
      unsigned int v11 = valuePtr + 1;
      unsigned int valuePtr = v11;
    }
    while (v11 < a2);
    if (CFArrayGetCount(Mutable))
    {
      return Mutable;
    }
    else
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return result;
}

void H16ISPResetVideoOutputConfigurationsForNewSelectedFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 700;
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  unsigned int v6 = *(_DWORD *)(a1 + 168);
  if (v5 < v6) {
    unsigned int v6 = 0;
  }
  H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v5 - v6) + 16), &v70, v77);
  *(unsigned char *)(a1 + 680) = 0;
  *(void *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 696) = 875704438;
  uint64_t v7 = *(void *)(a1 + 160) + 120 * *(unsigned int *)(a1 + 48);
  *(void *)uint64_t v4 = *(void *)(v7 + 4);
  uint64_t v8 = *(void *)(v7 + 20);
  v9.i64[0] = v8;
  v9.i64[1] = HIDWORD(v8);
  *(float64x2_t *)(v4 + 12) = vcvtq_f64_u64(v9);
  uint64_t v10 = *(void *)(v7 + 28);
  v9.i64[0] = v10;
  v9.i64[1] = HIDWORD(v10);
  *(float64x2_t *)(v4 + 28) = vcvtq_f64_u64(v9);
  *(_DWORD *)(a1 + 744) = 3;
  if (*(_DWORD *)(*(void *)(*(void *)(a2 + 24) + 4384) + 96 * *(unsigned int *)(a1 + 132) + 16) == 1785950322) {
    *(_DWORD *)(a1 + 744) = 8;
  }
  *(unsigned char *)(a1 + 800) = 0;
  *(unsigned char *)(a1 + 764) = 0;
  *(void *)(a1 + 756) = 0;
  *(void *)(a1 + 748) = 0;
  *(void *)(a1 + 768) = 0;
  *(unsigned char *)(a1 + 776) = 0;
  *(_WORD *)(a1 + 812) = 0;
  *(void *)(a1 + 804) = 0;
  *(_DWORD *)(a1 + 820) = 255;
  unsigned int v11 = *(__CVPixelBufferPool **)(a1 + 824);
  if (v11) {
    CVPixelBufferPoolRelease(v11);
  }
  *(void *)(a1 + 824) = 0;
  for (uint64_t i = 832; i != 864; i += 8)
  {
    int v13 = *(__CVBuffer **)(a1 + i);
    if (v13)
    {
      CVPixelBufferRelease(v13);
      *(void *)(a1 + i) = 0;
    }
  }
  *(unsigned char *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 868) = 0;
  *(unsigned char *)(a1 + 872) = 0;
  *(unsigned char *)(a1 + 880) = 0;
  *(void *)(a1 + 888) = 0;
  *(_DWORD *)(a1 + 896) = 875704438;
  uint64_t v14 = *(void *)(a1 + 160) + 120 * *(unsigned int *)(a1 + 48);
  *(void *)(v4 + 200) = *(void *)(v14 + 4);
  uint64_t v15 = *(void *)(v14 + 20);
  v16.i64[0] = v15;
  v16.i64[1] = HIDWORD(v15);
  *(float64x2_t *)(a1 + 912) = vcvtq_f64_u64(v16);
  uint64_t v17 = *(void *)(v14 + 28);
  v16.i64[0] = v17;
  v16.i64[1] = HIDWORD(v17);
  *(float64x2_t *)(a1 + 928) = vcvtq_f64_u64(v16);
  *(_DWORD *)(a1 + 944) = 3;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 964) = 0;
  *(void *)(a1 + 948) = 0;
  *(void *)(a1 + 956) = 0;
  *(unsigned char *)(a1 + 976) = 0;
  *(void *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 1012) = 0;
  *(void *)(a1 + 1004) = 0;
  *(_DWORD *)(a1 + 1020) = 255;
  int v18 = *(__CVPixelBufferPool **)(a1 + 1024);
  if (v18) {
    CVPixelBufferPoolRelease(v18);
  }
  *(void *)(a1 + 1024) = 0;
  for (uint64_t j = 1032; j != 1064; j += 8)
  {
    unint64_t v20 = *(__CVBuffer **)(a1 + j);
    if (v20)
    {
      CVPixelBufferRelease(v20);
      *(void *)(a1 + j) = 0;
    }
  }
  *(unsigned char *)(a1 + 1064) = 0;
  *(_DWORD *)(a1 + 1068) = 0;
  *(unsigned char *)(a1 + 1072) = 0;
  *(unsigned char *)(a1 + 1080) = 0;
  *(void *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1096) = 875704438;
  uint64_t v21 = *(void *)(a1 + 160);
  unsigned int v22 = *(_DWORD *)(a1 + 48);
  float v23 = (void *)(a1 + 1112);
  if (*(unsigned char *)(v21 + 120 * v22 + 36))
  {
    uint64_t v24 = v21 + 120 * v22;
    unsigned int v25 = *(_DWORD *)(v24 + 40);
    *(_DWORD *)(a1 + 1100) = v25;
    LODWORD(v24) = *(_DWORD *)(v24 + 44);
    *(_DWORD *)(a1 + 1104) = v24;
    *float v23 = 0;
    *(void *)(a1 + 1120) = 0;
    *(double *)(a1 + 1128) = (double)v25;
    *(double *)(a1 + 1136) = (double)v24;
  }
  else
  {
    int v26 = v75;
    unsigned int v27 = v76;
    *(_DWORD *)(a1 + 1100) = v75;
    *(_DWORD *)(a1 + 1104) = v27;
    *float v23 = 0;
    *(void *)(a1 + 1120) = 0;
    *(double *)(a1 + 1128) = (double)v26;
    *(double *)(a1 + 1136) = (double)v27;
    if (v72)
    {
      if (v26 >= 0) {
        int v28 = v26;
      }
      else {
        int v28 = v26 + 1;
      }
      *(_DWORD *)(a1 + 1100) = v28 >> 1;
      *(double *)(a1 + 1128) = (double)v26 * 0.5;
    }
  }
  *(_DWORD *)(a1 + 1144) = 3;
  *(unsigned char *)(a1 + 1200) = 0;
  *(unsigned char *)(a1 + 1164) = 0;
  *(void *)(a1 + 1156) = 0;
  *(void *)(a1 + 1148) = 0;
  *(void *)(a1 + 1168) = 0;
  *(unsigned char *)(a1 + 1176) = 0;
  *(_WORD *)(a1 + 1212) = 0;
  *(void *)(a1 + 1204) = 0;
  *(_DWORD *)(a1 + 1220) = 255;
  int v29 = *(__CVPixelBufferPool **)(a1 + 1224);
  if (v29) {
    CVPixelBufferPoolRelease(v29);
  }
  *(void *)(a1 + 1224) = 0;
  for (uint64_t k = 1232; k != 1264; k += 8)
  {
    xpc_object_t v31 = *(__CVBuffer **)(a1 + k);
    if (v31)
    {
      CVPixelBufferRelease(v31);
      *(void *)(a1 + k) = 0;
    }
  }
  *(unsigned char *)(a1 + 1264) = 0;
  *(_DWORD *)(a1 + 1268) = 0;
  *(unsigned char *)(a1 + 1272) = 0;
  *(unsigned char *)(a1 + 1280) = 0;
  *(void *)(a1 + 1288) = 0;
  *(_DWORD *)(a1 + 1296) = 875704438;
  uint64_t v32 = *(void *)(a1 + 160);
  unsigned int v33 = *(_DWORD *)(a1 + 48);
  int v34 = (void *)(a1 + 1312);
  if (*(unsigned char *)(v32 + 120 * v33 + 64))
  {
    uint64_t v35 = v32 + 120 * v33;
    unsigned int v36 = *(_DWORD *)(v35 + 68);
    *(_DWORD *)(a1 + 1300) = v36;
    LODWORD(v35) = *(_DWORD *)(v35 + 72);
    *(_DWORD *)(a1 + 1304) = v35;
    *int v34 = 0;
    *(void *)(a1 + 1320) = 0;
    *(double *)(a1 + 1328) = (double)v36;
    *(double *)(a1 + 1336) = (double)v35;
  }
  else
  {
    int v37 = v75;
    unsigned int v38 = v76;
    *(_DWORD *)(a1 + 1300) = v75;
    *(_DWORD *)(a1 + 1304) = v38;
    *int v34 = 0;
    *(void *)(a1 + 1320) = 0;
    *(double *)(a1 + 1328) = (double)v37;
    *(double *)(a1 + 1336) = (double)v38;
    if (v72)
    {
      if (v37 >= 0) {
        int v39 = v37;
      }
      else {
        int v39 = v37 + 1;
      }
      *(_DWORD *)(a1 + 1300) = v39 >> 1;
      *(double *)(a1 + 1328) = (double)v37 * 0.5;
    }
  }
  *(_DWORD *)(a1 + 1344) = 3;
  *(unsigned char *)(a1 + 1400) = 0;
  *(unsigned char *)(a1 + 1364) = 0;
  *(void *)(a1 + 1356) = 0;
  *(void *)(a1 + 1348) = 0;
  *(void *)(a1 + 1368) = 0;
  *(unsigned char *)(a1 + 1376) = 0;
  *(_WORD *)(a1 + 1412) = 0;
  *(void *)(a1 + 1404) = 0;
  *(_DWORD *)(a1 + 1420) = 255;
  uint64_t v40 = *(__CVPixelBufferPool **)(a1 + 1424);
  if (v40) {
    CVPixelBufferPoolRelease(v40);
  }
  *(void *)(a1 + 1424) = 0;
  for (uint64_t m = 1432; m != 1464; m += 8)
  {
    uint64_t v42 = *(__CVBuffer **)(a1 + m);
    if (v42)
    {
      CVPixelBufferRelease(v42);
      *(void *)(a1 + m) = 0;
    }
  }
  *(unsigned char *)(a1 + 1464) = 0;
  *(_DWORD *)(a1 + 1468) = 1;
  *(unsigned char *)(a1 + 1472) = 0;
  *(unsigned char *)(a1 + 1480) = 0;
  *(void *)(a1 + 1488) = 0;
  *(_DWORD *)(a1 + 1496) = 875704438;
  uint64_t v43 = *(void *)(a1 + 160);
  unsigned int v44 = *(_DWORD *)(a1 + 48);
  CFStringRef v45 = (void *)(a1 + 1512);
  if (*(unsigned char *)(v43 + 120 * v44 + 64))
  {
    uint64_t v46 = v43 + 120 * v44;
    unsigned int v47 = *(_DWORD *)(v46 + 68);
    *(_DWORD *)(a1 + 1500) = v47;
    LODWORD(v46) = *(_DWORD *)(v46 + 72);
    *(_DWORD *)(a1 + 1504) = v46;
    *CFStringRef v45 = 0;
    *(void *)(a1 + 1520) = 0;
    *(double *)(a1 + 1528) = (double)v47;
    *(double *)(a1 + 1536) = (double)v46;
  }
  else
  {
    int v48 = v75;
    unsigned int v49 = v76;
    *(_DWORD *)(a1 + 1500) = v75;
    *(_DWORD *)(a1 + 1504) = v49;
    *CFStringRef v45 = 0;
    *(void *)(a1 + 1520) = 0;
    *(double *)(a1 + 1528) = (double)v48;
    *(double *)(a1 + 1536) = (double)v49;
    if (v72)
    {
      if (v48 >= 0) {
        int v50 = v48;
      }
      else {
        int v50 = v48 + 1;
      }
      *(_DWORD *)(a1 + 1500) = v50 >> 1;
      *(double *)(a1 + 1528) = (double)v48 * 0.5;
    }
  }
  *(_DWORD *)(a1 + 1544) = 3;
  *(unsigned char *)(a1 + 1600) = 0;
  *(unsigned char *)(a1 + 1564) = 0;
  *(void *)(a1 + 1556) = 0;
  *(void *)(a1 + 1548) = 0;
  *(void *)(a1 + 1568) = 0;
  *(unsigned char *)(a1 + 1576) = 0;
  *(_WORD *)(a1 + 1612) = 0;
  *(void *)(a1 + 1604) = 0;
  *(_DWORD *)(a1 + 1620) = 255;
  int v51 = *(__CVPixelBufferPool **)(a1 + 1624);
  if (v51) {
    CVPixelBufferPoolRelease(v51);
  }
  *(void *)(a1 + 1624) = 0;
  *(unsigned char *)(a1 + 1664) = 0;
  *(_DWORD *)(a1 + 1668) = 0;
  *(unsigned char *)(a1 + 1672) = 0;
  unsigned int v68 = 0;
  unsigned int v69 = 0;
  if (ConfigSupportsContextSwitchCaptures(a1, a2, &v69, &v68))
  {
    *(void *)(a1 + 1688) = 0;
    *(_DWORD *)(a1 + 1696) = 1650943796;
    unsigned int v54 = v68;
    unsigned int v53 = v69;
    *(_DWORD *)(a1 + 1700) = v69;
    *(_DWORD *)(a1 + 1704) = v54;
    *(void *)(a1 + 1720) = 0;
    *(double *)(a1 + 1728) = (double)v53;
    *(void *)(a1 + 1712) = 0;
    *(double *)(a1 + 1736) = (double)v54;
    *(_DWORD *)(a1 + 1744) = 3;
    *(unsigned char *)(a1 + 1800) = 0;
    *(unsigned char *)(a1 + 1764) = 0;
    *(void *)(a1 + 1756) = 0;
    *(void *)(a1 + 1748) = 0;
    *(void *)(a1 + 1768) = 0;
    *(unsigned char *)(a1 + 1776) = 0;
    *(_WORD *)(a1 + 1812) = 0;
    *(void *)(a1 + 1804) = 0;
    *(_DWORD *)(a1 + 1820) = 255;
    *(void *)(a1 + 1824) = 0;
    *(unsigned char *)(a1 + 1864) = 0;
    *(_DWORD *)(a1 + 1868) = 0;
    *(unsigned char *)(a1 + 1872) = 0;
  }
  *(unsigned char *)(a1 + 1680) = 0;
  *(unsigned char *)(a1 + 1880) = 0;
  *(void *)(a1 + 1896) = 0;
  *(void *)(a1 + 1888) = 0;
  *(_DWORD *)(a1 + 1904) = 0;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_DWORD *)(a1 + 1944) = 3;
  *(unsigned char *)(a1 + 2000) = 0;
  *(unsigned char *)(a1 + 1964) = 0;
  *(void *)(a1 + 1956) = 0;
  *(void *)(a1 + 1948) = 0;
  *(void *)(a1 + 1968) = 0;
  *(unsigned char *)(a1 + 1976) = 0;
  *(_WORD *)(a1 + 2012) = 0;
  *(void *)(a1 + 2004) = 0;
  *(_DWORD *)(a1 + 2020) = 255;
  *(void *)(a1 + 2024) = 0;
  *(unsigned char *)(a1 + 2064) = 0;
  *(_DWORD *)(a1 + 2068) = 0;
  *(unsigned char *)(a1 + 2072) = 0;
  *(unsigned char *)(a1 + 2080) = 0;
  *(void *)(a1 + 2096) = 0;
  *(void *)(a1 + 2088) = 0;
  *(_DWORD *)(a1 + 2104) = 0;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(void *)(a1 + 2144) = 3;
  *(_WORD *)(a1 + 2152) = 257;
  *(unsigned char *)(a1 + 2200) = 0;
  *(void *)(a1 + 2154) = 0;
  *(_DWORD *)(a1 + 2161) = 0;
  *(void *)(a1 + 2168) = 0;
  *(unsigned char *)(a1 + 2176) = 0;
  *(void *)(a1 + 2204) = 0;
  *(_WORD *)(a1 + 2212) = 0;
  *(_DWORD *)(a1 + 2220) = 255;
  *(void *)(a1 + 2224) = 0;
  *(unsigned char *)(a1 + 2264) = 0;
  *(_DWORD *)(a1 + 2268) = 0;
  *(unsigned char *)(a1 + 2272) = 0;
  *(unsigned char *)(a1 + 2280) = 0;
  *(void *)(a1 + 2288) = 0;
  *(_DWORD *)(a1 + 2296) = 1278226742;
  unsigned int v55 = v70;
  *(_DWORD *)(a1 + 2300) = v70;
  unsigned int v56 = v71;
  *(_DWORD *)(a1 + 2304) = v71;
  v57.i64[0] = v73;
  v57.i64[1] = v74;
  float64x2_t v58 = vcvtq_f64_s64(v57);
  v57.i64[0] = v75;
  v57.i64[1] = v76;
  *(float64x2_t *)(a1 + 2312) = v58;
  *(float64x2_t *)(a1 + 2328) = vcvtq_f64_u64((uint64x2_t)v57);
  *(_DWORD *)(a1 + 2344) = 3;
  *(unsigned char *)(a1 + 2400) = 0;
  *(unsigned char *)(a1 + 2364) = 0;
  *(void *)(a1 + 2348) = 0;
  *(void *)(a1 + 2356) = 0;
  *(unsigned char *)(a1 + 2376) = 0;
  *(void *)(a1 + 2368) = 0;
  *(_WORD *)(a1 + 2412) = 0;
  *(void *)(a1 + 2404) = 0;
  *(_DWORD *)(a1 + 2420) = 255;
  *(void *)(a1 + 2424) = 0;
  *(unsigned char *)(a1 + 2464) = 0;
  *(_DWORD *)(a1 + 2468) = 0;
  *(unsigned char *)(a1 + 2472) = 0;
  *(unsigned char *)(a1 + 2480) = 0;
  *(void *)(a1 + 2488) = 0;
  *(_DWORD *)(a1 + 2496) = 1278226742;
  *(_DWORD *)(a1 + 2500) = v55;
  *(_DWORD *)(a1 + 2504) = v56;
  *(void *)(a1 + 2520) = 0;
  *(void *)(a1 + 2512) = 0;
  *(double *)(a1 + 2528) = (double)v55;
  *(double *)(a1 + 2536) = (double)v56;
  *(_DWORD *)(a1 + 2544) = 3;
  *(unsigned char *)(a1 + 2600) = 0;
  *(unsigned char *)(a1 + 2564) = 0;
  *(void *)(a1 + 2548) = 0;
  *(void *)(a1 + 2556) = 0;
  *(unsigned char *)(a1 + 2576) = 0;
  *(void *)(a1 + 2568) = 0;
  *(_WORD *)(a1 + 2612) = 0;
  *(void *)(a1 + 2604) = 0;
  *(_DWORD *)(a1 + 2620) = 1;
  uint64_t v59 = *(__CVPixelBufferPool **)(a1 + 2624);
  if (v59) {
    CVPixelBufferPoolRelease(v59);
  }
  *(void *)(a1 + 2624) = 0;
  *(unsigned char *)(a1 + 2664) = 0;
  *(_DWORD *)(a1 + 2668) = 0;
  *(unsigned char *)(a1 + 2672) = 0;
  *(unsigned char *)(a1 + 3608) = 0;
  *(void *)(a1 + 3616) = 0;
  *(_DWORD *)(a1 + 3624) = 1785950320;
  *(unsigned char *)(a1 + 3640) = 0;
  *(_DWORD *)(a1 + 3636) = 8;
  unint64_t v60 = *(const void **)(a1 + 3664);
  if (v60) {
    CFRelease(v60);
  }
  *(void *)(a1 + 3664) = 0;
  unsigned int v66 = 0;
  int v67 = 0;
  int v61 = *(_DWORD *)(a1 + 156);
  if (v61 == 1425)
  {
    H16ISP::JasperConfigManager::maxPeridotCloudSize((H16ISP::JasperConfigManager *)v70, v71, &v67, &v66, v52);
    unsigned int v63 = v66;
    int v62 = v67;
  }
  else
  {
    int v62 = 0;
    unsigned int v63 = 0;
    if (v61 == 1424)
    {
      int v62 = 144;
      int v67 = 144;
      unsigned int v63 = H16ISP::JasperConfigManager::maxJasperCloudSizeBytes(0);
      unsigned int v66 = v63;
    }
  }
  *(_DWORD *)(a1 + 3628) = v63;
  *(_DWORD *)(a1 + 3632) = v62;
  *(unsigned char *)(a1 + 2680) = 0;
  *(unsigned char *)(a1 + 2792) = 0;
  *(unsigned char *)(a1 + 2712) = 0;
  *(_WORD *)(a1 + 2793) = 0;
  *(_WORD *)(a1 + 2713) = 0;
  *(unsigned char *)(a1 + 2724) = 0;
  *(void *)(a1 + 2716) = 0;
  *(_DWORD *)(a1 + 2784) = 0;
  *(_DWORD *)(a1 + 2696) = 0;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2756) = 0u;
  uint64_t v64 = *(const void **)(a1 + 2776);
  if (v64) {
    CFRelease(v64);
  }
  *(void *)(a1 + 2776) = 0;
  *(_DWORD *)(a1 + 2832) = 0;
  MetadataOutputFeatureResetConfiguration(a1 + 2840);
  MetadataOutputFeatureResetConfiguration(a1 + 2936);
  for (uint64_t n = 0; n != 384; n += 96)
    MetadataOutputFeatureResetConfiguration(a1 + 3032 + n);
  MetadataOutputFeatureResetConfiguration(a1 + 3416);
  MetadataOutputFeatureResetConfiguration(a1 + 3512);
}

void MetadataOutputFeatureResetConfiguration(uint64_t a1)
{
  *(unsigned char *)(a1 + 81) = 0;
  MetadataOutputBufferPoolRelease((CFTypeID *)a1);
  if (!*(unsigned char *)(a1 + 80))
  {
    *(_OWORD *)(a1 + 44) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 88) = 0;
  }
}

CFTypeID MetadataOutputBufferPoolRelease(CFTypeID *a1)
{
  CFTypeID v2 = *a1;
  if (v2 == CVPixelBufferPoolGetTypeID())
  {
    uint64_t v4 = a1 + 1;
    mach_port_t v3 = (__CVPixelBufferPool *)a1[1];
    if (v3)
    {
      CVPixelBufferPoolRelease(v3);
LABEL_7:
      void *v4 = 0;
      goto LABEL_8;
    }
  }
  CFTypeID v5 = *a1;
  if (v5 == CVDataBufferPoolGetTypeID())
  {
    uint64_t v4 = a1 + 1;
    unsigned int v6 = (const void *)a1[1];
    if (v6)
    {
      CFRelease(v6);
      goto LABEL_7;
    }
  }
LABEL_8:
  CFTypeID result = CFNullGetTypeID();
  *a1 = result;
  return result;
}

void *H16ISP::getOutputPresets(int a1, int *a2, uint64_t a3, int a4, int a5)
{
  if (a1 > 2130)
  {
    if (a1 <= 2391)
    {
      if (a1 <= 2322)
      {
        switch(a1)
        {
          case 2131:
            CFTypeID result = &h16ispOutputPreset_IMX853;
            int v6 = 65;
            goto LABEL_76;
          case 2307:
            CFTypeID result = &h16ispOutputPreset_IMX903;
            int v6 = 61;
            goto LABEL_76;
          case 2308:
            CFTypeID result = &h16ispOutputPreset_IMX904;
            int v6 = 44;
            goto LABEL_76;
        }
        goto LABEL_75;
      }
      if (a1 == 2323)
      {
        CFTypeID result = &h16ispOutputPreset_IMX913;
        int v6 = 25;
        goto LABEL_76;
      }
      if (a1 != 2324)
      {
        if (a1 == 2339)
        {
          CFTypeID result = &h16ispOutputPreset_IMX923;
          int v6 = 5;
          goto LABEL_76;
        }
        goto LABEL_75;
      }
      CFTypeID result = &h16ispOutputPreset_IMX914;
    }
    else
    {
      if (a1 > 2433)
      {
        if (a1 > 20583)
        {
          if (a1 != 20584)
          {
            if (a1 == 48879)
            {
              CFTypeID result = &h16ispOutputPreset_FakeSensor;
              int v6 = 1;
              goto LABEL_76;
            }
            goto LABEL_75;
          }
          CFTypeID result = &h16ispOutputPreset_VD56G8;
        }
        else
        {
          if (a1 == 2434)
          {
            CFTypeID result = &h16ispOutputPreset_IMX982;
            int v6 = 37;
            goto LABEL_76;
          }
          if (a1 != 3414) {
            goto LABEL_75;
          }
          if ((a5 - 51) <= 0x34 && ((1 << (a5 - 51)) & 0x1E00000000000FLL) != 0) {
            CFTypeID result = &h16ispOutputPreset_VD56G0_J7xx;
          }
          else {
            CFTypeID result = &h16ispOutputPreset_VD56G0;
          }
        }
LABEL_74:
        int v6 = 3;
        goto LABEL_76;
      }
      if (a1 != 2392)
      {
        if (a1 == 2418)
        {
          CFTypeID result = &h16ispOutputPreset_IMX972;
          int v6 = 43;
          goto LABEL_76;
        }
        if (a1 == 2419)
        {
          CFTypeID result = &h16ispOutputPreset_IMX973;
          int v6 = 39;
          goto LABEL_76;
        }
        goto LABEL_75;
      }
      CFTypeID result = &h16ispOutputPreset_IMX958;
    }
    int v6 = 10;
    goto LABEL_76;
  }
  if (a1 > 1424)
  {
    if (a1 <= 1810)
    {
      switch(a1)
      {
        case 1425:
          CFTypeID result = &h16ispOutputPreset_IMX591;
          int v6 = 2;
          goto LABEL_76;
        case 1556:
          CFTypeID result = &h16ispOutputPreset_IMX614;
          int v6 = 17;
          goto LABEL_76;
        case 1587:
          CFTypeID result = &h16ispOutputPreset_IMX633;
          int v6 = 36;
          goto LABEL_76;
      }
      goto LABEL_75;
    }
    if (a1 <= 2050)
    {
      if (a1 == 1811)
      {
        CFTypeID result = &h16ispOutputPreset_IMX713;
        int v6 = 34;
        goto LABEL_76;
      }
      if (a1 == 1812)
      {
        CFTypeID result = &h16ispOutputPreset_IMX714;
        int v6 = 21;
        goto LABEL_76;
      }
LABEL_75:
      int v6 = 0;
      CFTypeID result = 0;
      goto LABEL_76;
    }
    if (a1 == 2051)
    {
      CFTypeID result = &h16ispOutputPreset_IMX803;
      int v6 = 66;
      goto LABEL_76;
    }
    if (a1 != 2068) {
      goto LABEL_75;
    }
    BOOL v7 = a4 == 363;
    if (a4 == 363) {
      int v6 = 4;
    }
    else {
      int v6 = 16;
    }
    uint64_t v8 = &h16ispOutputPreset_IMX814;
    uint64x2_t v9 = &h16ispOutputPreset_IMX814_NO_FES;
    goto LABEL_57;
  }
  if (a1 > 1393)
  {
    if (a1 == 1394)
    {
      CFTypeID result = &h16ispOutputPreset_IMX572;
      int v6 = 6;
      goto LABEL_76;
    }
    if (a1 == 1395)
    {
      CFTypeID result = &h16ispOutputPreset_IMX573;
      int v6 = 4;
      goto LABEL_76;
    }
    if (a1 != 1424) {
      goto LABEL_75;
    }
    CFTypeID result = &h16ispOutputPreset_IMX590_SoftgateDefault;
    goto LABEL_74;
  }
  if (a1 != 1029)
  {
    if (a1 == 1300)
    {
      CFTypeID result = &h16ispOutputPreset_IMX514;
      int v6 = 23;
      goto LABEL_76;
    }
    if (a1 == 1368)
    {
      CFTypeID result = &h16ispOutputPreset_IMX558;
      int v6 = 8;
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  BOOL v7 = a4 == 363;
  if (a4 == 363) {
    int v6 = 12;
  }
  else {
    int v6 = 27;
  }
  uint64_t v8 = &h16ispOutputPreset_IMX405;
  uint64x2_t v9 = &h16ispOutputPreset_IMX405_NO_FES;
LABEL_57:
  if (v7) {
    CFTypeID result = v9;
  }
  else {
    CFTypeID result = v8;
  }
LABEL_76:
  *a2 = v6;
  return result;
}

uint64_t H16ISP::JasperConfigManager::maxPeridotCloudSize(H16ISP::JasperConfigManager *this, unint64_t a2, _DWORD *a3, unsigned int *a4, unsigned int *a5)
{
  double v6 = (double)(unint64_t)this;
  double v7 = (double)a2;
  *a3 = objc_msgSend(MEMORY[0x263F5D3D0], "generatedPointCloudsLengthForRawSensorDimensions:", a3, a4, a5, (double)(unint64_t)this, (double)a2);
  uint64_t result = objc_msgSend(MEMORY[0x263F5D3D0], "requiredStorageBytesForGeneratedPointCloudsForRawSensorDimensions:", v6, v7);
  *a4 = result;
  return result;
}

uint64_t H16ISP::H16ISPServicesRemote::ReadData(xpc_connection_t *this, const __CFString *a2, const __CFData **a3)
{
  LODWORD(v9[0]) = 10;
  xpc_object_t XpcFromType = H16ISP::createXpcFromType(a2, a2);
  v9[1] = XpcFromType;
  uint64_t Property = H16ISP::H16ISPServicesRemote::GetProperty(this, v9);
  if (!Property)
  {
    *a3 = H16ISP::createTypeFromXpc((H16ISP *)object, v6);
    if (object) {
      xpc_release(object);
    }
  }
  xpc_release(XpcFromType);
  return Property;
}

void H16ISP::arrayValueEnumerator(H16ISP *this, void *a2, void *a3)
{
  xpc_object_t XpcFromType = (void *)H16ISP::createXpcFromType(this, a2);
  xpc_array_append_value(a2, XpcFromType);

  xpc_release(XpcFromType);
}

void H16ISP::dictionaryValueEnumerator(const __CFString *this, H16ISP *a2, void *a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  CStringPtr = CFStringGetCStringPtr(this, 0x8000100u);
  if (CStringPtr || (CStringPtr = buffer, CFStringGetCString(this, buffer, 100, 0x8000100u)))
  {
    if (a2)
    {
      xpc_object_t XpcFromType = (void *)H16ISP::createXpcFromType(a2, v7);
      if (XpcFromType)
      {
        uint64_t v10 = XpcFromType;
        xpc_dictionary_set_value(a3, CStringPtr, XpcFromType);
        xpc_release(v10);
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      H16ISP::dictionaryValueEnumerator((uint64_t)CStringPtr);
    }
  }
}

xpc_object_t H16ISP::createXpcFromType(const __CFString *this, const void *a2)
{
  value[13] = *MEMORY[0x263EF8340];
  CFTypeID v3 = CFGetTypeID(this);
  if (v3 == CFDictionaryGetTypeID())
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    CFDictionaryApplyFunction((CFDictionaryRef)this, (CFDictionaryApplierFunction)H16ISP::dictionaryValueEnumerator, v4);
    return v4;
  }
  if (v3 == CFArrayGetTypeID())
  {
    xpc_object_t v4 = xpc_array_create(0, 0);
    v14.length = CFArrayGetCount((CFArrayRef)this);
    v14.locatiouint64_t n = 0;
    CFArrayApplyFunction((CFArrayRef)this, v14, (CFArrayApplierFunction)H16ISP::arrayValueEnumerator, v4);
    return v4;
  }
  if (v3 == CFNumberGetTypeID())
  {
    CFNumberType Type = CFNumberGetType((CFNumberRef)this);
    if ((unint64_t)Type <= kCFNumberDoubleType && ((1 << Type) & 0x3060) != 0)
    {
      value[0] = 0;
      CFNumberGetValue((CFNumberRef)this, kCFNumberDoubleType, value);
      return xpc_double_create(*(double *)value);
    }
    else
    {
      value[0] = 0;
      CFNumberGetValue((CFNumberRef)this, kCFNumberSInt64Type, value);
      return xpc_int64_create(value[0]);
    }
  }
  if (v3 == CFStringGetTypeID())
  {
    CStringPtr = CFStringGetCStringPtr(this, 0x8000100u);
    if (!CStringPtr)
    {
      if (CFStringGetCString(this, (char *)value, 100, 0x8000100u)) {
        CStringPtr = (const char *)value;
      }
      else {
        CStringPtr = 0;
      }
    }
    return xpc_string_create(CStringPtr);
  }
  if (v3 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)this);
    CFIndex Length = CFDataGetLength((CFDataRef)this);
    return xpc_data_create(BytePtr, Length);
  }
  else
  {
    if (v3 != CFBooleanGetTypeID()) {
      return 0;
    }
    BOOL v11 = CFBooleanGetValue((CFBooleanRef)this) != 0;
    return xpc_BOOL_create(v11);
  }
}

uint64_t H16ISP::H16ISPDevice::SetFESOutputSize(H16ISP::H16ISPDevice *this, int a2, int a3, int a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 2305;
  int v11 = a2;
  int v12 = a3;
  int v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::LoadPersistFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  xpc_object_t v4 = v3;
  int v6 = v5;
  __int16 v8 = v7;
  uint64x2_t v9 = (H16ISP::H16ISPDevice *)v2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  bzero(v11, 0x102CuLL);
  __int16 v12 = 358;
  __int16 v13 = v8;
  int v14 = v6;
  memcpy(v15, v4, sizeof(v15));
  return H16ISP::H16ISPDevice::ISP_SendCommand(v9, v11, 0x102Cu, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetFESCropRect(H16ISP::H16ISPDevice *a1, int a2, unint64_t a3, unint64_t a4)
{
  int v4 = a4;
  int v5 = a3;
  unint64_t v8 = HIDWORD(a3);
  unint64_t v9 = HIDWORD(a4);
  bzero(v11, 0x1CuLL);
  __int16 v12 = 2304;
  int v13 = a2;
  int v14 = v5;
  int v15 = v8;
  int v16 = v4;
  int v17 = v9;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v11, 0x1Cu, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::CacheDeviceConfigs(H16ISP::H16ISPDevice *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  *(void *)&v37[8092] = *MEMORY[0x263EF8340];
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
  }
  uint64_t v3 = &_os_log_internal;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "CacheDeviceConfigs";
    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s - caching device configurations\n", buf, 0xCu);
  }
  if (*(_DWORD *)(v2 + 4748))
  {
    bzero(buf, 0x1CuLL);
    *(_WORD *)&uint8_t buf[4] = 3;
    uint64_t LSCPolynomialCoeff = H16ISP::H16ISPDevice::ISP_SendCommand((H16ISP::H16ISPDevice *)v2, buf, 0x1Cu, 0, 0xFFFFFFFF);
    if (LSCPolynomialCoeff)
    {
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == v3) {
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPDevice::CacheDeviceConfigs();
      }
LABEL_61:
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == v3) {
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPDevice::CacheDeviceConfigs();
      }
      H16ISP::H16ISPDevice::InitDeviceConfigsCache((H16ISP::H16ISPDevice *)v2);
      return LSCPolynomialCoeff;
    }
    *(_OWORD *)(v2 + 8) = *(_OWORD *)buf;
    *(_OWORD *)(v2 + 20) = *(_OWORD *)&buf[12];
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int v28 = 136315650;
      int v29 = "CacheDeviceConfigs";
      __int16 v30 = 1024;
      int v31 = *(_DWORD *)&buf[12];
      __int16 v32 = 1024;
      int v33 = *(_DWORD *)&buf[8];
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "%s - maxChannels=%d, timeStampFrequency=%d\n", v28, 0x18u);
    }
    if (!*(void *)(v2 + 48)) {
      operator new[]();
    }
    if (!*(void *)(v2 + 40)) {
      operator new[]();
    }
    LODWORD(v13) = *(_DWORD *)(v2 + 4748);
    if (v13)
    {
      unint64_t v14 = 0;
      do
      {
        bzero(buf, 0x190uLL);
        *(_WORD *)&uint8_t buf[4] = 269;
        *(_DWORD *)&buf[8] = v14;
        uint64_t LSCPolynomialCoeff = H16ISP::H16ISPDevice::ISP_SendCommand((H16ISP::H16ISPDevice *)v2, buf, 0x190u, 0, 0xFFFFFFFF);
        if (LSCPolynomialCoeff)
        {
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPDevice::CacheDeviceConfigs();
          }
          uint64_t v3 = &_os_log_internal;
          goto LABEL_61;
        }
        *(_DWORD *)(*(void *)(v2 + 40) + 432 * v14) = v36;
        int v15 = &_os_log_internal;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v28 = 136315650;
          int v29 = "CacheDeviceConfigs";
          __int16 v30 = 1024;
          int v31 = v36;
          __int16 v32 = 1024;
          int v33 = v14;
          _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_DEFAULT, "%s - %d configurations detected for channel %d\n", v28, 0x18u);
        }
        memmove((void *)(*(void *)(v2 + 40) + 432 * v14 + 32), buf, 0x190uLL);
        uint64_t v16 = *(void *)(v2 + 40);
        if (!*(_DWORD *)(v16 + 432 * v14))
        {
LABEL_40:
          uint64_t LSCPolynomialCoeff = 0;
          goto LABEL_48;
        }
        if (!*(void *)(v16 + 432 * v14 + 8) && !*(void *)(v16 + 432 * v14 + 24)) {
          operator new[]();
        }
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        unint64_t v20 = 0;
        while (1)
        {
          bzero(buf, 0x120uLL);
          *(_WORD *)&uint8_t buf[4] = 262;
          *(_DWORD *)&buf[8] = v14;
          *(_DWORD *)&buf[12] = v20;
          uint64_t LSCPolynomialCoeff = H16ISP::H16ISPDevice::ISP_SendCommand((H16ISP::H16ISPDevice *)v2, buf, 0x120u, 0, 0xFFFFFFFF);
          if (LSCPolynomialCoeff) {
            break;
          }
          if ((v35 & 0x80) != 0) {
            unsigned int v35 = (v35 & 0xFFFFFF00) + 256;
          }
          memmove((void *)(*(void *)(*(void *)(v2 + 40) + 432 * v14 + 8) + v19), &buf[16], 0xD4uLL);
          memmove((void *)(*(void *)(*(void *)(v2 + 40) + 432 * v14 + 16) + v18), v37, 0x3CuLL);
          uint64_t LSCPolynomialCoeff = H16ISP::H16ISPDevice::ISP_GetLSCPolynomialCoeff(v2, v14, v20, (void *)(*(void *)(*(void *)(v2 + 40) + 432 * v14 + 24) + v17));
          if (LSCPolynomialCoeff)
          {
            uint64_t v24 = &_os_log_internal;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
            }
            if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              goto LABEL_48;
            }
            *(_DWORD *)int v28 = 136315650;
            int v29 = "CacheDeviceConfigs";
            __int16 v30 = 1024;
            int v31 = v14;
            __int16 v32 = 1024;
            int v33 = LSCPolynomialCoeff;
            unsigned int v22 = v24;
            float v23 = "%s - Error getting LSC polynomial - chan: %d, res: 0x%08X\n";
LABEL_53:
            _os_log_error_impl(&dword_24680F000, v22, OS_LOG_TYPE_ERROR, v23, v28, 0x18u);
            goto LABEL_48;
          }
          ++v20;
          v19 += 212;
          v18 += 60;
          v17 += 72;
          if (v20 >= *(unsigned int *)(*(void *)(v2 + 40) + 432 * v14)) {
            goto LABEL_40;
          }
        }
        uint64_t v21 = &_os_log_internal;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v28 = 136315650;
          int v29 = "CacheDeviceConfigs";
          __int16 v30 = 1024;
          int v31 = v14;
          __int16 v32 = 1024;
          int v33 = LSCPolynomialCoeff;
          unsigned int v22 = v21;
          float v23 = "%s - Error getting camera config - chan: %d, res: 0x%08X\n";
          goto LABEL_53;
        }
LABEL_48:
        uint64_t v25 = *(void *)(v2 + 48);
        if (v25) {
          H16ISP::H16ISPDevice::ISP_GetModuleParams((H16ISP::H16ISPDevice *)v2, v14, (H16ISPModuleParams *)(v25 + 156 * v14));
        }
        ++v14;
        unint64_t v13 = *(unsigned int *)(v2 + 4748);
      }
      while (v14 < v13);
      uint64_t v3 = &_os_log_internal;
      if (!LSCPolynomialCoeff) {
        goto LABEL_67;
      }
      goto LABEL_61;
    }
LABEL_67:
    *(_DWORD *)uint64_t v2 = v13;
    *(unsigned char *)(v2 + 4) = 1;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      int v27 = *(_DWORD *)(v2 + 4748);
      *(_DWORD *)int v28 = 136315394;
      int v29 = "CacheDeviceConfigs";
      __int16 v30 = 1024;
      int v31 = v27;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "%s - Success: cached configs - numChannels: %d\n", v28, 0x12u);
    }
    return 0;
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == v3) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    uint64_t LSCPolynomialCoeff = 3758097112;
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v5) {
      H16ISP::H16ISPDevice::CacheDeviceConfigs(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return LSCPolynomialCoeff;
}

uint64_t H16ISP::H16ISPDevice::ISP_SendCommand(H16ISP::H16ISPDevice *this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t input[4] = *MEMORY[0x263EF8340];
  kdebug_trace();
  mach_port_t v10 = *((_DWORD *)this + 1106);
  if (v10)
  {
    input[0] = (uint64_t)a2;
    input[1] = a3;
    input[2] = a4;
    uint64_t input[3] = a5;
    uint64_t v11 = IOConnectCallScalarMethod(v10, 0xAu, input, 4u, 0, 0);
  }
  else
  {
    uint64_t v11 = 3758097084;
  }
  kdebug_trace();
  return v11;
}

uint64_t H16ISP::H16ISPDevice::ISP_GetLSCPolynomialCoeff(uint64_t a1, unsigned int a2, unsigned int a3, void *outputStruct)
{
  input[2] = *MEMORY[0x263EF8340];
  mach_port_t v4 = *(_DWORD *)(a1 + 4424);
  if (!v4) {
    return 3758097084;
  }
  input[0] = a2;
  input[1] = a3;
  size_t v6 = 72;
  return IOConnectCallMethod(v4, 0x66u, input, 2u, 0, 0, 0, 0, outputStruct, &v6);
}

uint64_t ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32) + 4600;
  uint64_t v3 = v2 + 16 * *(unsigned int *)(a1 + 40);
  uint64_t result = notify_register_check(*(const char **)v3, (int *)(v3 + 12));
  *(unsigned char *)(v2 + 16 * *(unsigned int *)(a1 + 40) + 8) = result == 0;
  return result;
}

uint64_t SetMultiCamConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (GetNumberOfActiveChannels(*(const __CFArray **)(a4 + 120)))
  {
    size_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      size_t v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      SetMultiCamConfiguration(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 4294954514;
  }
  if (a1)
  {
    CFTypeID v16 = CFGetTypeID(a1);
    if (v16 != CFDictionaryGetTypeID()) {
      return 4294954514;
    }
  }
  uint64_t v17 = *(void *)(a4 + 184);
  if (v17)
  {
    MEMORY[0x24C53D6E0](v17, 0x1000C40009FEB1ALL);
    *(void *)(a4 + 184) = 0;
    if (H16ISP::H16ISPDevice::ISP_DestroyMultiCameraSession(*(H16ISP::H16ISPDevice **)(a4 + 24))) {
      return 4294954514;
    }
  }
  if (a1)
  {
    unint64_t Value = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C100]);
    unint64_t v19 = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C0F8]);
    CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C108]);
    CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C110]);
    if (Value | v19)
    {
      unint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unint64_t v20 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        int v28 = "SetMultiCamConfiguration";
        _os_log_impl(&dword_24680F000, v20, OS_LOG_TYPE_INFO, "%s - Creating MultiCameraSession\n", buf, 0xCu);
      }
      operator new();
    }
    return 4294954516;
  }
  else
  {
    LockStreamMutexes(*(const __CFArray **)(a4 + 120));
    if (CFArrayGetCount(*(CFArrayRef *)(a4 + 120)))
    {
      unint64_t v21 = 0;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 120), v21);
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        *(void *)(DerivedStorage + 4456) = 0;
        *(void *)(DerivedStorage + 4336) = 0;
        ++v21;
      }
      while (v21 < CFArrayGetCount(*(CFArrayRef *)(a4 + 120)));
    }
    UnlockStreamMutexes(*(const __CFArray **)(a4 + 120));
    CFArrayRef v23 = *(const __CFArray **)(a4 + 208);
    if (v23 && CFArrayGetCount(v23))
    {
      unint64_t v24 = 0;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 208), v24);
        FigCaptureSynchronizedStreamsGroupGetFigBaseObject();
        uint64_t v25 = CMBaseObjectGetDerivedStorage();
        pthread_mutex_lock((pthread_mutex_t *)(v25 + 40));
        int v26 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(v25 + 136);
        if (v26)
        {
          H16ISP::H16ISPFrameReceiverSharedBufferPool::~H16ISPFrameReceiverSharedBufferPool(v26);
          MEMORY[0x24C53D6E0]();
          *(void *)(v25 + 136) = 0;
        }
        H16ISPSensorSharedRawPoolConfigurationReset(v25, 1);
        pthread_mutex_unlock((pthread_mutex_t *)(v25 + 40));
        ++v24;
        uint64_t v14 = 0;
      }
      while (v24 < CFArrayGetCount(*(CFArrayRef *)(a4 + 208)));
    }
    else
    {
      return 0;
    }
  }
  return v14;
}

uint64_t H16ISPCaptureGroupCopyProperty(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 40));
  if (*(unsigned char *)(DerivedStorage + 32))
  {
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureGroupCopyProperty();
    }
    uint64_t v10 = 4294954511;
    goto LABEL_30;
  }
  LogCaptureDeviceEvent(0x14u, v8, 0, DerivedStorage, a2, 0, 0);
  LockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
  uint64_t v11 = 0;
  while (!CFEqual((CFTypeRef)groupProperties[v11], a2))
  {
    v11 += 6;
    if (v11 == 354)
    {
      uint64_t v10 = 4294954512;
LABEL_20:
      UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
      LogCaptureDeviceEvent(0x14u, v8, 0, DerivedStorage, a2, 0, 1);
      goto LABEL_30;
    }
  }
  uint64_t v19 = *(void *)(*(void *)(v8 + 24) + 4384);
  if (!IsPropertySupportedForGroup((uint64_t)&groupProperties[v11], DerivedStorage, v8)) {
    goto LABEL_29;
  }
  if ((groupProperties[v11 + 4] & 0x100000000) == 0) {
    goto LABEL_13;
  }
  CFArrayRef v15 = *(const __CFArray **)(DerivedStorage + 104);
  if (!v15)
  {
LABEL_29:
    UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
    uint64_t v10 = 4294954509;
    goto LABEL_30;
  }
  if (CFArrayGetCount(v15) < 1)
  {
LABEL_13:
    uint64_t v12 = 0;
LABEL_14:
    uint64_t v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))groupProperties[v11 + 3])(a3, a4, v12, DerivedStorage, v8);
    if (v10)
    {
      CFStringRef v13 = CFCopyDescription((CFTypeRef)groupProperties[v11 + 1]);
      uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v14 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        unint64_t v21 = "H16ISPCaptureGroupCopyProperty";
        __int16 v22 = 2080;
        CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
        __int16 v24 = 2080;
        uint64_t v25 = CFStringGetCStringPtr(v13, 0x8000100u);
        __int16 v26 = 1024;
        int v27 = v10;
        _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_DEFAULT, "%s - Error getting %s %s: %d\n", buf, 0x26u);
      }
      CFRelease(v13);
    }
    goto LABEL_20;
  }
  CFIndex v16 = 0;
  uint64_t v12 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 104), v16);
    FigCaptureStreamGetFigBaseObject();
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(v17 + 1)) {
      break;
    }
    if (*(unsigned char *)(v19 + 96 * *(unsigned int *)(v17 + 132) + 64)) {
      uint64_t v12 = v17;
    }
    if (++v16 >= CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 104))) {
      goto LABEL_14;
    }
  }
  UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
  uint64_t v10 = 4294954607;
LABEL_30:
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 40));
  kdebug_trace();
  return v10;
}

uint64_t H16ISPCaptureGroupSetProperty(uint64_t a1, const __CFString *a2, __CFString *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  LogCaptureDeviceEvent(0x15u, v6, 0, DerivedStorage, a2, a3, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 40));
  if (*(unsigned char *)(DerivedStorage + 32))
  {
    uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureGroupSetProperty();
    }
    uint64_t v8 = 4294954511;
    goto LABEL_30;
  }
  LockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
  uint64_t v9 = 0;
  while (!CFEqual((CFTypeRef)groupProperties[v9], a2))
  {
    v9 += 6;
    if (v9 == 354)
    {
      uint64_t v8 = 4294954512;
LABEL_11:
      UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
      goto LABEL_30;
    }
  }
  uint64_t v10 = *(void *)(*(void *)(v6 + 24) + 4384);
  if (!IsPropertySupportedForGroup((uint64_t)&groupProperties[v9], DerivedStorage, v6)) {
    goto LABEL_29;
  }
  if ((groupProperties[v9 + 4] & 0x200000000) == 0) {
    goto LABEL_14;
  }
  CFArrayRef v14 = *(const __CFArray **)(DerivedStorage + 104);
  if (!v14)
  {
LABEL_29:
    UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
    uint64_t v8 = 4294954509;
    goto LABEL_30;
  }
  if (CFArrayGetCount(v14) < 1)
  {
LABEL_14:
    uint64_t v11 = 0;
LABEL_15:
    uint64_t v8 = ((uint64_t (*)(__CFString *, uint64_t, uint64_t, uint64_t))groupProperties[v9 + 2])(a3, v11, DerivedStorage, v6);
    if (v8)
    {
      CFStringRef v12 = CFCopyDescription((CFTypeRef)groupProperties[v9 + 1]);
      CFStringRef v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFStringRef v13 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 136315906;
        uint64_t v19 = "H16ISPCaptureGroupSetProperty";
        __int16 v20 = 2080;
        CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
        __int16 v22 = 2080;
        CFArrayRef v23 = CFStringGetCStringPtr(v12, 0x8000100u);
        __int16 v24 = 1024;
        int v25 = v8;
        _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "%s - Error setting %s %s: %d\n", (uint8_t *)&v18, 0x26u);
      }
      CFRelease(v12);
    }
    goto LABEL_11;
  }
  CFIndex v15 = 0;
  uint64_t v11 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 104), v15);
    FigCaptureStreamGetFigBaseObject();
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(v16 + 1)) {
      break;
    }
    if (*(unsigned char *)(v10 + 96 * *(unsigned int *)(v16 + 132) + 64)) {
      uint64_t v11 = v16;
    }
    if (++v15 >= CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 104))) {
      goto LABEL_15;
    }
  }
  UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
  uint64_t v8 = 4294954607;
LABEL_30:
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 40));
  LogCaptureDeviceEvent(0x15u, v6, 0, DerivedStorage, a2, a3, 1);
  kdebug_trace();
  return v8;
}

uint64_t H16ISPCaptureStreamCopyProperty(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(0xCu, v8, DerivedStorage, 0, a2, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 240));
  if (*(unsigned char *)DerivedStorage)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 240));
    uint64_t v9 = 4294954511;
    FigSignalError(4294954511, "invalidated");
  }
  else
  {
    unsigned int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 128), a2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (valuePtr <= 0x169 && streamProperties[6 * valuePtr + 3])
      {
        if (!IsPropertySupportedForStream((uint64_t)&streamProperties[6 * valuePtr], DerivedStorage, v8))
        {
          pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 240));
          uint64_t v9 = 4294954509;
          goto LABEL_18;
        }
        if (!*(unsigned char *)(DerivedStorage + 1) && (streamProperties[6 * valuePtr + 4] & 0x100000000) != 0)
        {
          pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 240));
          uint64_t v9 = 4294954607;
          goto LABEL_18;
        }
        uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t))streamProperties[6 * valuePtr + 3])(a3, a4, DerivedStorage, 0, v8);
        if (v9)
        {
          CFStringRef v11 = CFCopyDescription((CFTypeRef)streamProperties[6 * valuePtr + 1]);
          CFStringRef v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFStringRef v12 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
            CFArrayRef v14 = CFStringGetCStringPtr(v11, 0x8000100u);
            *(_DWORD *)buf = 136315906;
            int v18 = "H16ISPCaptureStreamCopyProperty";
            __int16 v19 = 2080;
            __int16 v20 = CStringPtr;
            __int16 v21 = 2080;
            __int16 v22 = v14;
            __int16 v23 = 1024;
            int v24 = v9;
            _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_DEFAULT, "%s - Error getting %s %s: %d\n", buf, 0x26u);
          }
          CFRelease(v11);
        }
      }
      else
      {
        uint64_t v9 = 4294954512;
      }
    }
    else
    {
      uint64_t v9 = 4294954509;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 240));
    LogCaptureDeviceEvent(0xCu, v8, DerivedStorage, 0, a2, 0, 1);
  }
LABEL_18:
  kdebug_trace();
  return v9;
}

uint64_t H16ISPCaptureStreamSetProperty(uint64_t a1, const __CFString *a2, __CFString *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(0xDu, v6, DerivedStorage, 0, a2, a3, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 240));
  if (*(unsigned char *)DerivedStorage)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 240));
    uint64_t v7 = 4294954511;
    FigSignalError(4294954511, "invalidated");
  }
  else
  {
    unsigned int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 128), a2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (valuePtr <= 0x169 && streamProperties[6 * valuePtr + 2])
      {
        if (!IsPropertySupportedForStream((uint64_t)&streamProperties[6 * valuePtr], DerivedStorage, v6))
        {
          pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 240));
          uint64_t v7 = 4294954509;
          goto LABEL_18;
        }
        if (!*(unsigned char *)(DerivedStorage + 1) && (streamProperties[6 * valuePtr + 4] & 0x200000000) != 0)
        {
          pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 240));
          uint64_t v7 = 4294954607;
          goto LABEL_18;
        }
        uint64_t v7 = ((uint64_t (*)(__CFString *, uint64_t, void, uint64_t))streamProperties[6 * valuePtr + 2])(a3, DerivedStorage, 0, v6);
        if (v7)
        {
          CFStringRef v9 = CFCopyDescription((CFTypeRef)streamProperties[6 * valuePtr + 1]);
          uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v10 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
            CFStringRef v12 = CFStringGetCStringPtr(v9, 0x8000100u);
            *(_DWORD *)buf = 136315906;
            uint64_t v16 = "H16ISPCaptureStreamSetProperty";
            __int16 v17 = 2080;
            int v18 = CStringPtr;
            __int16 v19 = 2080;
            __int16 v20 = v12;
            __int16 v21 = 1024;
            int v22 = v7;
            _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "%s - Error setting %s %s: %d\n", buf, 0x26u);
          }
          CFRelease(v9);
        }
      }
      else
      {
        uint64_t v7 = 4294954512;
      }
    }
    else
    {
      uint64_t v7 = 4294954509;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 240));
    LogCaptureDeviceEvent(0xDu, v6, DerivedStorage, 0, a2, a3, 1);
  }
LABEL_18:
  kdebug_trace();
  return v7;
}

void LogCaptureDeviceEvent(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, __CFString *a6, int a7)
{
  if (a2)
  {
    if ((*(void *)(a2 + 152) & (1 << a1)) != 0)
    {
      CFArrayRef v9 = *(const __CFArray **)(a2 + 168);
      if (v9)
      {
        if (!*(void *)(a2 + 176) || CFArrayGetCount(v9) <= *(void *)(a2 + 176))
        {
          CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 5, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (Mutable)
          {
            __int16 v17 = Mutable;
            *(void *)&idx[1] = mach_absolute_time();
            CFNumberRef v18 = CFNumberCreate(v15, kCFNumberLongLongType, &idx[1]);
            CFDictionaryAddValue(v17, @"Timestamp", v18);
            CFRelease(v18);
            if (a1 <= 0x17) {
              CFDictionaryAddValue(v17, @"EventType", kCMEventLogger_EventTypeString[a1]);
            }
            if (a3)
            {
              CFArrayRef v19 = *(const __CFArray **)(a2 + 120);
              if (v19)
              {
                idx[0] = 0;
                if (CFArrayGetCount(v19) >= 1)
                {
                  while (1)
                  {
                    CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 120), idx[0]);
                    if (CMBaseObjectGetDerivedStorage() == a3) {
                      break;
                    }
                    CFIndex v20 = ++idx[0];
                    if (CFArrayGetCount(*(CFArrayRef *)(a2 + 120)) <= v20) {
                      goto LABEL_24;
                    }
                  }
                  CFNumberRef v30 = CFNumberCreate(v15, kCFNumberIntType, idx);
                  CFDictionaryAddValue(v17, @"StreamIndex", v30);
                  CFRelease(v30);
                }
              }
            }
LABEL_24:
            CFAllocatorRef allocator = v15;
            if (a4)
            {
              uint64_t v31 = *(unsigned int *)(a4 + 8);
              if (v31)
              {
                if (*(void *)(a4 + 16))
                {
                  if (v31 <= 2) {
                    CFDictionaryAddValue(v17, @"SyncGroup", kCMEventLogger_SynchronizationGroupString[v31]);
                  }
                  CFMutableStringRef v32 = CFStringCreateMutable(0, 0);
                  if (v32)
                  {
                    int v33 = v32;
                    if (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) >= 1)
                    {
                      CFIndex v34 = 0;
                      do
                      {
                        CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 16), v34);
                        FigCaptureStreamGetFigBaseObject();
                        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
                        if (DerivedStorage)
                        {
                          int v36 = ", ";
                          if (!v34) {
                            int v36 = "";
                          }
                          CFStringAppendFormat(v33, 0, @"%s%d", v36, *(unsigned int *)(DerivedStorage + 132));
                        }
                        ++v34;
                      }
                      while (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) > v34);
                    }
                    CFDictionaryAddValue(v17, @"SupportedGroupChannelIndex", v33);
                    CFRelease(v33);
                  }
                }
              }
            }
            switch(a1)
            {
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 7u:
                goto LABEL_45;
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
                if (a3)
                {
                  CFNumberRef v37 = CFNumberCreate(allocator, kCFNumberIntType, (const void *)(a3 + 132));
                  CFDictionaryAddValue(v17, @"CameraChannel", v37);
                  CFRelease(v37);
                }
                break;
              case 0xCu:
              case 0xDu:
              case 0x11u:
              case 0x12u:
                if (a3)
                {
                  CFNumberRef v38 = CFNumberCreate(allocator, kCFNumberIntType, (const void *)(a3 + 132));
                  CFDictionaryAddValue(v17, @"CameraChannel", v38);
                  CFRelease(v38);
                }
LABEL_45:
                if (!a5) {
                  goto LABEL_51;
                }
                CFDictionaryAddValue(v17, @"PropertyKey", a5);
                if (CFEqual(a5, (CFTypeRef)*MEMORY[0x263F2E158])) {
                  break;
                }
                if (CFEqual(a5, (CFTypeRef)*MEMORY[0x263F2E148])) {
                  break;
                }
                int v39 = CFEqual(a5, (CFTypeRef)*MEMORY[0x263F2DAF0]);
                if (!a6 || v39) {
                  break;
                }
                goto LABEL_52;
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
                if (a5) {
                  CFDictionaryAddValue(v17, @"PropertyKey", a5);
                }
LABEL_51:
                if (a6) {
LABEL_52:
                }
                  H16ISPParsePropertyValue(v17, a6);
                break;
              default:
                break;
            }
            uint64_t v40 = (const void **)MEMORY[0x263EFFB40];
            if (!a7) {
              uint64_t v40 = (const void **)MEMORY[0x263EFFB38];
            }
            CFDictionaryAddValue(v17, @"EventCompleted", *v40);
            pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
            CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 168), v17);
            pthread_mutex_unlock((pthread_mutex_t *)(a2 + 32));
            CFRelease(v17);
          }
        }
      }
      else
      {
        uint64_t v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v29 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v29;
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
          LogCaptureDeviceEvent();
        }
      }
    }
  }
  else
  {
    __int16 v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      LogCaptureDeviceEvent(v21, v22, v23, v24, v25, v26, v27, v28);
    }
  }
}

CFIndex __LockStreamMutexes(const __CFArray *a1)
{
  CFIndex result = CFArrayGetCount(a1);
  if ((int)result >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      if (CFArrayGetValueAtIndex(a1, v3))
      {
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 240));
      }
      ++v3;
      CFIndex result = CFArrayGetCount(a1);
    }
    while (v3 < (int)result);
  }
  return result;
}

uint64_t __UnlockStreamMutexes(const __CFArray *a1)
{
  uint64_t result = CFArrayGetCount(a1);
  int v3 = result;
  CFIndex v4 = (result - 1);
  if ((int)result - 1 >= 0)
  {
    do
    {
      uint64_t result = (uint64_t)CFArrayGetValueAtIndex(a1, v4);
      if (result)
      {
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 240));
      }
      --v3;
      --v4;
    }
    while (v3 > 0);
  }
  return result;
}

void UnlockStreamMutexes(const __CFArray *a1)
{
  if (StreamLockOrderValid(a1, 0))
  {
LABEL_13:
    __UnlockStreamMutexes(a1);
    return;
  }
  uint64_t v2 = StreamArrayCopyAndSort(a1);
  if (!v2)
  {
    CFIndex v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFIndex v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      UnlockStreamMutexes(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    goto LABEL_13;
  }
  int v3 = v2;
  __UnlockStreamMutexes(v2);

  CFRelease(v3);
}

void LockStreamMutexes(const __CFArray *a1)
{
  if (StreamLockOrderValid(a1, 1))
  {
LABEL_13:
    __LockStreamMutexes(a1);
    return;
  }
  uint64_t v2 = StreamArrayCopyAndSort(a1);
  if (!v2)
  {
    CFIndex v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFIndex v4 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      LockStreamMutexes(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    goto LABEL_13;
  }
  int v3 = v2;
  __LockStreamMutexes(v2);

  CFRelease(v3);
}

BOOL StreamLockOrderValid(const __CFArray *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (CFArrayGetCount(a1) < 1) {
    return 1;
  }
  CFIndex v4 = 0;
  uint64_t v5 = 0;
  while (1)
  {
    if (CFArrayGetValueAtIndex(a1, v4))
    {
      FigCaptureStreamGetFigBaseObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage) {
        break;
      }
    }
    uint64_t v7 = v5;
LABEL_9:
    ++v4;
    uint64_t v5 = v7;
    if (v4 >= CFArrayGetCount(a1)) {
      return 1;
    }
  }
  uint64_t v7 = *(unsigned int *)(DerivedStorage + 132);
  if (!v4 || v5 <= v7) {
    goto LABEL_9;
  }
  if (a2) {
    int v9 = v5;
  }
  else {
    int v9 = *(_DWORD *)(DerivedStorage + 132);
  }
  if (a2) {
    int v10 = *(_DWORD *)(DerivedStorage + 132);
  }
  else {
    int v10 = v5;
  }
  uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v11 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
  }
  BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    CFStringRef v12 = "release";
    CFArrayRef v14 = "StreamLockOrderValid";
    __int16 v15 = 2080;
    int v13 = 136315906;
    if (a2) {
      CFStringRef v12 = "acquire";
    }
    uint64_t v16 = v12;
    __int16 v17 = 1024;
    int v18 = v9;
    __int16 v19 = 1024;
    int v20 = v10;
    _os_log_error_impl(&dword_24680F000, v11, OS_LOG_TYPE_ERROR, "%s - Invalid stream lock %s order: stream #%u followed by stream #%u\n\n", (uint8_t *)&v13, 0x22u);
    return 0;
  }
  return result;
}

uint64_t SetVideoOutputHandlers(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v161 = *MEMORY[0x263EF8340];
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  if (*(unsigned char *)(a2 + 674))
  {
    BOOL v8 = isSensorType;
    int v9 = (pthread_mutex_t *)(a2 + 304);
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 304));
    if (!a1) {
      goto LABEL_174;
    }
    CFTypeID v10 = CFGetTypeID(a1);
    if (v10 != CFDictionaryGetTypeID()) {
      goto LABEL_174;
    }
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E918]);
    if (Value)
    {
      CFDictionaryRef v12 = Value;
      CFTypeID v13 = CFGetTypeID(Value);
      if (v13 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 680))
        {
          CFArrayRef v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFArrayRef v14 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputHandlers(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          goto LABEL_174;
        }
        uint64_t v23 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E8E8]);
        uint64_t v24 = (CFTypeRef *)MEMORY[0x263EFFD08];
        if (v23)
        {
          uint64_t v25 = v23;
          uint64_t v26 = *(const void **)(a2 + 792);
          if (v26)
          {
            _Block_release(v26);
            *(void *)(a2 + 792) = 0;
          }
          if (!CFEqual(v25, *v24)) {
            *(void *)(a2 + 792) = _Block_copy(v25);
          }
        }
        uint64_t v27 = CFDictionaryGetValue(v12, (const void *)*MEMORY[0x263F2E8F0]);
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(const void **)(a2 + 784);
          if (v29)
          {
            _Block_release(v29);
            *(void *)(a2 + 784) = 0;
          }
          if (!CFEqual(v28, *v24)) {
            *(void *)(a2 + 784) = _Block_copy(v28);
          }
        }
      }
    }
    CFDictionaryRef v30 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E928]);
    if (v30)
    {
      CFDictionaryRef v31 = v30;
      CFTypeID v32 = CFGetTypeID(v30);
      if (v32 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 880))
        {
          int v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v33 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
          }
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputHandlers(v33, v34, v35, v36, v37, v38, v39, v40);
          }
          goto LABEL_174;
        }
        uint64_t v41 = CFDictionaryGetValue(v31, (const void *)*MEMORY[0x263F2E8E8]);
        if (v41)
        {
          uint64_t v42 = v41;
          uint64_t v43 = *(const void **)(a2 + 992);
          if (v43)
          {
            _Block_release(v43);
            *(void *)(a2 + 992) = 0;
          }
          if (!CFEqual(v42, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 992) = _Block_copy(v42);
          }
        }
        unsigned int v44 = CFDictionaryGetValue(v31, (const void *)*MEMORY[0x263F2E8F0]);
        if (v44)
        {
          CFStringRef v45 = v44;
          uint64_t v46 = *(const void **)(a2 + 984);
          if (v46)
          {
            _Block_release(v46);
            *(void *)(a2 + 984) = 0;
          }
          if (!CFEqual(v45, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 984) = _Block_copy(v45);
          }
        }
      }
    }
    CFDictionaryRef v47 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E930]);
    if (v47)
    {
      CFDictionaryRef v48 = v47;
      CFTypeID v49 = CFGetTypeID(v47);
      if (v49 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 1280))
        {
          int v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v50 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v50;
          }
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputHandlers(v50, v51, v52, v53, v54, v55, v56, v57);
          }
          goto LABEL_174;
        }
        float64x2_t v58 = CFDictionaryGetValue(v48, (const void *)*MEMORY[0x263F2E8E8]);
        if (v58)
        {
          uint64_t v59 = v58;
          unint64_t v60 = *(const void **)(a2 + 1392);
          if (v60)
          {
            _Block_release(v60);
            *(void *)(a2 + 1392) = 0;
          }
          if (!CFEqual(v59, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 1392) = _Block_copy(v59);
          }
        }
        int v61 = CFDictionaryGetValue(v48, (const void *)*MEMORY[0x263F2E8F0]);
        if (v61)
        {
          int v62 = v61;
          unsigned int v63 = *(const void **)(a2 + 1384);
          if (v63)
          {
            _Block_release(v63);
            *(void *)(a2 + 1384) = 0;
          }
          if (!CFEqual(v62, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 1384) = _Block_copy(v62);
          }
        }
      }
    }
    CFDictionaryRef v64 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E938]);
    if (v64)
    {
      CFDictionaryRef v65 = v64;
      CFTypeID v66 = CFGetTypeID(v64);
      if (v66 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 1480))
        {
          int v67 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v67 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v67;
          }
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputHandlers(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          goto LABEL_174;
        }
        unsigned int v75 = CFDictionaryGetValue(v65, (const void *)*MEMORY[0x263F2E8E8]);
        if (v75)
        {
          unsigned int v76 = v75;
          int v77 = *(const void **)(a2 + 1592);
          if (v77)
          {
            _Block_release(v77);
            *(void *)(a2 + 1592) = 0;
          }
          if (!CFEqual(v76, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 1592) = _Block_copy(v76);
          }
        }
        uint64_t v78 = CFDictionaryGetValue(v65, (const void *)*MEMORY[0x263F2E8F0]);
        if (v78)
        {
          __int16 v79 = v78;
          __int16 v80 = *(const void **)(a2 + 1584);
          if (v80)
          {
            _Block_release(v80);
            *(void *)(a2 + 1584) = 0;
          }
          if (!CFEqual(v79, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 1584) = _Block_copy(v79);
          }
        }
      }
    }
    CFDictionaryRef v81 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E900]);
    if (v81)
    {
      CFDictionaryRef v82 = v81;
      CFTypeID v83 = CFGetTypeID(v81);
      if (v83 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 1080))
        {
          int v84 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v84 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v84;
          }
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputHandlers(v84, v85, v86, v87, v88, v89, v90, v91);
          }
          goto LABEL_174;
        }
        uint64_t v92 = CFDictionaryGetValue(v82, (const void *)*MEMORY[0x263F2E8E8]);
        if (v92)
        {
          v93 = v92;
          long long v94 = *(const void **)(a2 + 1192);
          if (v94)
          {
            _Block_release(v94);
            *(void *)(a2 + 1192) = 0;
          }
          if (!CFEqual(v93, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 1192) = _Block_copy(v93);
          }
        }
        int8x8_t v95 = CFDictionaryGetValue(v82, (const void *)*MEMORY[0x263F2E8F0]);
        if (v95)
        {
          v96 = v95;
          CVPixelBufferRef v97 = *(const void **)(a2 + 1184);
          if (v97)
          {
            _Block_release(v97);
            *(void *)(a2 + 1184) = 0;
          }
          if (!CFEqual(v96, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 1184) = _Block_copy(v96);
          }
        }
      }
    }
    CFDictionaryRef v98 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E948]);
    if (v98)
    {
      CFDictionaryRef v99 = v98;
      CFTypeID v100 = CFGetTypeID(v98);
      if (v100 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 2280)) {
          goto LABEL_174;
        }
        uint64_t v101 = CFDictionaryGetValue(v99, (const void *)*MEMORY[0x263F2E8E8]);
        if (v101)
        {
          uint64_t v102 = v101;
          unint64_t v103 = *(const void **)(a2 + 2392);
          if (v103)
          {
            _Block_release(v103);
            *(void *)(a2 + 2392) = 0;
          }
          if (!CFEqual(v102, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 2392) = _Block_copy(v102);
          }
        }
        uint64_t v104 = CFDictionaryGetValue(v99, (const void *)*MEMORY[0x263F2E8F0]);
        if (v104)
        {
          uint64_t v105 = v104;
          v106 = *(const void **)(a2 + 2384);
          if (v106)
          {
            _Block_release(v106);
            *(void *)(a2 + 2384) = 0;
          }
          if (!CFEqual(v105, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 2384) = _Block_copy(v105);
          }
        }
      }
    }
    if (ConfigSupportsContextSwitchCaptures(a2, a4, 0, 0))
    {
      CFDictionaryRef v107 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E940]);
      if (v107)
      {
        CFDictionaryRef v108 = v107;
        CFTypeID v109 = CFGetTypeID(v107);
        if (v109 == CFDictionaryGetTypeID())
        {
          if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 1680)) {
            goto LABEL_174;
          }
          uint64_t v110 = CFDictionaryGetValue(v108, (const void *)*MEMORY[0x263F2E8E8]);
          if (v110)
          {
            int v111 = v110;
            v112 = *(const void **)(a2 + 1792);
            if (v112)
            {
              _Block_release(v112);
              *(void *)(a2 + 1792) = 0;
            }
            if (!CFEqual(v111, (CFTypeRef)*MEMORY[0x263EFFD08])) {
              *(void *)(a2 + 1792) = _Block_copy(v111);
            }
          }
          uint64_t v113 = CFDictionaryGetValue(v108, (const void *)*MEMORY[0x263F2E8F0]);
          if (v113)
          {
            uint64_t v114 = v113;
            unint64_t v115 = *(const void **)(a2 + 1784);
            if (v115)
            {
              _Block_release(v115);
              *(void *)(a2 + 1784) = 0;
            }
            if (!CFEqual(v114, (CFTypeRef)*MEMORY[0x263EFFD08])) {
              *(void *)(a2 + 1784) = _Block_copy(v114);
            }
          }
        }
      }
    }
    CFDictionaryRef v116 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E8F8]);
    if (v116)
    {
      CFDictionaryRef v117 = v116;
      CFTypeID v118 = CFGetTypeID(v116);
      if (v118 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 1880)) {
          goto LABEL_174;
        }
        uint64_t v119 = CFDictionaryGetValue(v117, (const void *)*MEMORY[0x263F2E8E8]);
        if (v119)
        {
          uint64_t v120 = v119;
          uint64_t v121 = *(const void **)(a2 + 1992);
          if (v121)
          {
            _Block_release(v121);
            *(void *)(a2 + 1992) = 0;
          }
          if (!CFEqual(v120, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 1992) = _Block_copy(v120);
          }
        }
        uint64_t v122 = CFDictionaryGetValue(v117, (const void *)*MEMORY[0x263F2E8F0]);
        if (v122)
        {
          uint64_t v123 = v122;
          v124 = *(const void **)(a2 + 1984);
          if (v124)
          {
            _Block_release(v124);
            *(void *)(a2 + 1984) = 0;
          }
          if (!CFEqual(v123, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 1984) = _Block_copy(v123);
          }
        }
      }
    }
    if (*(unsigned char *)(a2 + 3784)) {
      int v125 = 1;
    }
    else {
      int v125 = v8;
    }
    if (v125 == 1)
    {
      CFDictionaryRef v126 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E920]);
      if (v126)
      {
        CFDictionaryRef v127 = v126;
        CFTypeID v128 = CFGetTypeID(v126);
        if (v128 == CFDictionaryGetTypeID())
        {
          if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 2080)) {
            goto LABEL_174;
          }
          v129 = CFDictionaryGetValue(v127, (const void *)*MEMORY[0x263F2E8E8]);
          if (v129)
          {
            uint64_t v130 = v129;
            v131 = *(const void **)(a2 + 2192);
            if (v131)
            {
              _Block_release(v131);
              *(void *)(a2 + 2192) = 0;
            }
            if (!CFEqual(v130, (CFTypeRef)*MEMORY[0x263EFFD08])) {
              *(void *)(a2 + 2192) = _Block_copy(v130);
            }
          }
          uint64_t v132 = CFDictionaryGetValue(v127, (const void *)*MEMORY[0x263F2E8F0]);
          if (v132)
          {
            v133 = v132;
            int64_t v134 = *(const void **)(a2 + 2184);
            if (v134)
            {
              _Block_release(v134);
              *(void *)(a2 + 2184) = 0;
            }
            if (!CFEqual(v133, (CFTypeRef)*MEMORY[0x263EFFD08])) {
              *(void *)(a2 + 2184) = _Block_copy(v133);
            }
          }
        }
      }
    }
    CFDictionaryRef v135 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"VisPipe");
    if (v135)
    {
      CFDictionaryRef v136 = v135;
      CFTypeID v137 = CFGetTypeID(v135);
      if (v137 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 2480)) {
          goto LABEL_174;
        }
        v138 = CFDictionaryGetValue(v136, (const void *)*MEMORY[0x263F2E8E8]);
        if (v138)
        {
          v139 = v138;
          CFStringRef v140 = *(const void **)(a2 + 2592);
          if (v140)
          {
            _Block_release(v140);
            *(void *)(a2 + 2592) = 0;
          }
          if (!CFEqual(v139, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 2592) = _Block_copy(v139);
          }
        }
        uint64_t v141 = CFDictionaryGetValue(v136, (const void *)*MEMORY[0x263F2E8F0]);
        if (v141)
        {
          v142 = v141;
          uint64_t v143 = *(const void **)(a2 + 2584);
          if (v143)
          {
            _Block_release(v143);
            *(void *)(a2 + 2584) = 0;
          }
          if (!CFEqual(v142, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 2584) = _Block_copy(v142);
          }
        }
      }
    }
    CFDictionaryRef v144 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E910]);
    if (v144)
    {
      CFDictionaryRef v145 = v144;
      CFTypeID v146 = CFGetTypeID(v144);
      if (v146 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 3608))
        {
LABEL_174:
          uint64_t v22 = 4294954516;
          goto LABEL_175;
        }
        v148 = CFDictionaryGetValue(v145, (const void *)*MEMORY[0x263F2E8E8]);
        if (v148)
        {
          BOOL v149 = v148;
          v150 = *(const void **)(a2 + 3656);
          if (v150)
          {
            _Block_release(v150);
            *(void *)(a2 + 3656) = 0;
          }
          if (!CFEqual(v149, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 3656) = _Block_copy(v149);
          }
        }
        v151 = CFDictionaryGetValue(v145, (const void *)*MEMORY[0x263F2E8D8]);
        if (v151)
        {
          v152 = v151;
          v153 = *(const void **)(a2 + 3648);
          if (v153)
          {
            _Block_release(v153);
            *(void *)(a2 + 3648) = 0;
          }
          if (!CFEqual(v152, (CFTypeRef)*MEMORY[0x263EFFD08])) {
            *(void *)(a2 + 3648) = _Block_copy(v152);
          }
        }
      }
    }
    v154 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E908]);
    uint64_t v22 = (uint64_t)v154;
    if (v154)
    {
      CFTypeID v155 = CFGetTypeID(v154);
      if (v155 == CFDictionaryGetTypeID())
      {
        if (*(void *)(a2 + 136) && *(unsigned char *)(a2 + 2680))
        {
          int v156 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v156 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v156;
          }
          uint64_t v22 = 0;
          if (!os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_175;
          }
          int v159 = 136315138;
          double v160 = "SetMetadataOutputHandler";
          _os_log_impl(&dword_24680F000, v156, OS_LOG_TYPE_DEFAULT, "%s - cannot change metadata output handler while streaming and output is enabled\n", (uint8_t *)&v159, 0xCu);
        }
        else
        {
          uint64_t v22 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)v22, (const void *)*MEMORY[0x263F2E8E0]);
          if (!v22) {
            goto LABEL_175;
          }
          int v157 = *(const void **)(a2 + 2688);
          if (v157)
          {
            _Block_release(v157);
            *(void *)(a2 + 2688) = 0;
          }
          if (!CFEqual((CFTypeRef)v22, (CFTypeRef)*MEMORY[0x263EFFD08]))
          {
            v158 = _Block_copy((const void *)v22);
            uint64_t v22 = 0;
            *(void *)(a2 + 2688) = v158;
            goto LABEL_175;
          }
        }
      }
      uint64_t v22 = 0;
    }
LABEL_175:
    pthread_mutex_unlock(v9);
    return v22;
  }
  return 4294954509;
}

BOOL H16ISP::H16ISPDevice::isSensorType(uint64_t a1, unsigned int a2, int a3)
{
  if (a2 <= 5 && (uint64_t v3 = *(void *)(a1 + 4384), *(_DWORD *)(v3 + 96 * a2 + 8))) {
    int v4 = *(_DWORD *)(v3 + 96 * a2 + 16);
  }
  else {
    int v4 = -1;
  }
  return v4 == a3;
}

BOOL ConfigSupportsContextSwitchCaptures(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int v8 = *(_DWORD *)(a1 + 48);
  unsigned int v9 = *(_DWORD *)(a1 + 168);
  if (v8 < v9) {
    unsigned int v9 = 0;
  }
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v8 - v9) + 16), v16, v20))
  {
    int v10 = 0;
    int v11 = 0;
LABEL_5:
    BOOL result = 0;
    goto LABEL_6;
  }
  int v10 = v16[0];
  int v11 = v16[1];
  uint64_t v13 = *(void *)(a2 + 24);
  unsigned int v14 = *(_DWORD *)(a1 + 132);
  if (!*(_DWORD *)(*(void *)(v13 + 4384) + 96 * v14 + 32)) {
    goto LABEL_5;
  }
  if (v18)
  {
    BOOL result = 1;
  }
  else
  {
    if (v17 == 0xFFFF || H16ISP::H16ISPDevice::GetCameraConfig(v13, v14, v17, v15, v19)) {
      goto LABEL_5;
    }
    BOOL result = v15[0] > v16[0];
    if (v15[0] > v16[0])
    {
      int v10 = v15[0];
      int v11 = v15[1];
    }
  }
LABEL_6:
  if (a3) {
    *a3 = v10;
  }
  if (a4) {
    *a4 = v11;
  }
  return result;
}

uint64_t SetMetadataSectionEnabled(uint64_t a1, uint64_t a2, int *a3, const __CFBoolean *cf)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (cf && (CFTypeID v8 = CFGetTypeID(cf), v8 == CFBooleanGetTypeID()))
  {
    int Value = CFBooleanGetValue(cf);
    int v10 = Value != 0;
    if (*(void *)(a2 + 136))
    {
      if (*((unsigned __int8 *)a3 + 4) == v10) {
        return 0;
      }
      else {
        return 4294954612;
      }
    }
    else
    {
      int v20 = Value;
      uint64_t result = H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), *(_WORD *)a3, Value != 0);
      if (result)
      {
        uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v21 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = "disable";
          int v23 = *a3;
          int v24 = *(_DWORD *)(a2 + 132);
          if (v20) {
            uint64_t v22 = "enable";
          }
          int v25 = 136315906;
          uint64_t v26 = "SetMetadataSectionEnabled";
          __int16 v27 = 2080;
          uint64_t v28 = v22;
          __int16 v29 = 1024;
          int v30 = v23;
          __int16 v31 = 1024;
          int v32 = v24;
          _os_log_error_impl(&dword_24680F000, v21, OS_LOG_TYPE_ERROR, "%s - failed to %s metadata section %d on channel=%u\n", (uint8_t *)&v25, 0x22u);
        }
        return 4294954514;
      }
      else
      {
        *((unsigned char *)a3 + 4) = v10;
      }
    }
  }
  else
  {
    CFDictionaryRef v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFDictionaryRef v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      SetMetadataSectionEnabled(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    return 4294954516;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableMetadataSection(H16ISP::H16ISPDevice *this, unsigned int a2, __int16 a3, __int16 a4)
{
  uint64_t v5 = 3758097112;
  if (*((unsigned char *)this + 4))
  {
    if (*((_DWORD *)this + 1187) <= a2)
    {
      return 3758097090;
    }
    else
    {
      bzero(v10, 0x14uLL);
      __int16 v11 = 294;
      unsigned int v12 = a2;
      __int16 v14 = a4;
      __int16 v13 = a3;
      uint64_t v5 = H16ISP::H16ISPDevice::ISP_SendCommand(this, v10, 0x14u, 0, 0xFFFFFFFF);
      if (!v5) {
        *(_DWORD *)(*((void *)this + 5) + 432 * a2 + 136) = v15;
      }
    }
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPDevice::EnableMetadataSection();
    }
  }
  return v5;
}

uint64_t SetMetadataSectionRequired(uint64_t a1, uint64_t a2, int *a3, const __CFBoolean *cf)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (cf && (CFTypeID v8 = CFGetTypeID(cf), v8 == CFBooleanGetTypeID()))
  {
    int Value = CFBooleanGetValue(cf);
    int v10 = Value;
    int v11 = Value != 0;
    if (!*((unsigned char *)a3 + 4) && Value)
    {
      unsigned int v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned int v12 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        SetMetadataSectionRequired(v12, v13, v14, v15, v16, v17, v18, v19);
      }
      return 4294954514;
    }
    if (*(void *)(a2 + 136))
    {
      if (*((unsigned __int8 *)a3 + 5) == v11) {
        return 0;
      }
      else {
        return 4294954612;
      }
    }
    else
    {
      uint64_t result = H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), *(_WORD *)a3, 0, Value != 0);
      if (result)
      {
        __int16 v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          __int16 v29 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v29;
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          int v30 = "disable";
          int v31 = *a3;
          int v32 = *(_DWORD *)(a2 + 132);
          if (v10) {
            int v30 = "enable";
          }
          int v33 = 136315906;
          uint64_t v34 = "SetMetadataSectionRequired";
          __int16 v35 = 2080;
          uint64_t v36 = v30;
          __int16 v37 = 1024;
          int v38 = v31;
          __int16 v39 = 1024;
          int v40 = v32;
          _os_log_error_impl(&dword_24680F000, v29, OS_LOG_TYPE_ERROR, "%s - failed to %s metadata required section %d on channel=%u\n\n", (uint8_t *)&v33, 0x22u);
        }
        return 4294954514;
      }
      *((unsigned char *)a3 + 5) = v11;
    }
  }
  else
  {
    uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      SetMetadataSectionRequired(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    return 4294954516;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetMetadataRequired(H16ISP::H16ISPDevice *a1, __int16 a2, __int16 a3, int a4, __int16 a5)
{
  bzero(v11, 0x14uLL);
  __int16 v12 = 335;
  __int16 v13 = a2;
  int v14 = a4;
  __int16 v15 = a3;
  __int16 v16 = a5;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v11, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t CopyCameraViewMatrix(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (H16ISP::H16ISPDevice::isSensorType(*(void *)(v2 + 24), *(_DWORD *)(v4 + 132), 1718186595))
  {
    if (getPCECalib(*(void *)(v3 + 24), (uint64_t)&v46))
    {
      uint64_t v8 = 0;
      memset(&v45, 0, sizeof(v45));
      uint64_t v9 = 8552;
      do
      {
        uint64_t v10 = 0;
        int v11 = &v45.columns[v8];
        simd_float3 v12 = *v11;
        uint64_t v13 = v9;
        do
        {
          float v14 = *(double *)((char *)v46.columns[0].i64 + v13);
          simd_float3 v42 = v12;
          *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3))) = v14;
          simd_float3 v12 = v42;
          ++v10;
          v13 += 24;
        }
        while (v10 != 3);
        v11->i32[2] = v42.i32[2];
        v11->i64[0] = v12.i64[0];
        ++v8;
        v9 += 8;
      }
      while (v8 != 3);
      float v15 = v48;
      v45.columns[3].f32[2] = v15;
      *(float32x2_t *)v45.columns[3].f32 = vcvt_f32_f64(v47);
      *(double *)&long long v16 = dsiExtrinsicsToFig(&v45);
      uint64_t v17 = 0;
      v44[0] = v16;
      v44[1] = v18;
      v44[2] = v19;
      int v20 = (UInt8 *)bytes;
      do
      {
        uint64_t v21 = 0;
        long long v22 = v44[v17];
        do
        {
          long long v41 = v22;
          *(_DWORD *)&v20[4 * v21] = *(_DWORD *)((unint64_t)&v41 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
          ++v21;
        }
        while (v21 != 4);
        ++v17;
        v20 += 16;
      }
      while (v17 != 3);
      goto LABEL_21;
    }
LABEL_20:
    CFDataRef v39 = 0;
    uint64_t result = 4294954513;
    goto LABEL_24;
  }
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(v3 + 24), *(_DWORD *)(v5 + 132), 1785950322);
  uint64_t v24 = *(H16ISP **)(v3 + 24);
  if (isSensorType)
  {
    PeridotCalib = H16ISP::createPeridotCalib(v24, *(xpc_connection_t **)(v3 + 200), (H16ISP::H16ISPServicesRemote *)*(unsigned __int16 *)(v5 + 132));
    if (PeridotCalib)
    {
      uint64_t v26 = PeridotCalib;
      PDPeridotCalibGetOperationalWideToPeridotTransform();
      v46.columns[0] = v27;
      v46.columns[1] = v28;
      v46.columns[2] = v29;
      v46.columns[3] = v30;
      *(double *)v31.i64 = dsiExtrinsicsToFig(&v46);
      uint64_t v32 = 0;
      v45.columns[0] = v31;
      v45.columns[1] = v33;
      v45.columns[2] = v34;
      __int16 v35 = (UInt8 *)bytes;
      do
      {
        uint64_t v36 = 0;
        simd_float3 v37 = v45.columns[v32];
        do
        {
          simd_float3 v43 = v37;
          *(_DWORD *)&v35[4 * v36] = *(_DWORD *)((unint64_t)&v43 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
          ++v36;
        }
        while (v36 != 4);
        ++v32;
        v35 += 16;
      }
      while (v32 != 3);
      CFRelease(v26);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  H16ISP::H16ISPDevice::GetExtrinsicData(v24, -1, *(_DWORD *)(v5 + 132), (float (*)[3][4])bytes);
  if (v38) {
    goto LABEL_20;
  }
LABEL_21:
  CFDataRef v39 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)bytes, 48);
  if (v39) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 4294954510;
  }
LABEL_24:
  *uint64_t v7 = v39;
  return result;
}

uint64_t GetNumberOfActiveChannels(const __CFArray *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(a1);
  if ((unint64_t)Count >= 0xB)
  {
    uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v3 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134217984;
      CFIndex v9 = Count;
      _os_log_impl(&dword_24680F000, v3, OS_LOG_TYPE_DEFAULT, "GetNumberOfActiveChannels: Received strange value from CFArrayGetCount: %ld\n", (uint8_t *)&v8, 0xCu);
    }
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v4 = 0;
  uint64_t v5 = 0;
  do
  {
    if (CFArrayGetValueAtIndex(a1, v4))
    {
      FigCaptureStreamGetFigBaseObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)DerivedStorage)
      {
        if (*(void *)(DerivedStorage + 136)) {
          uint64_t v5 = (v5 + 1);
        }
        else {
          uint64_t v5 = v5;
        }
      }
    }
    ++v4;
  }
  while (Count != v4);
  return v5;
}

uint64_t CopyPortType(uint64_t a1, __CFString **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = H16ISP::ModuleDescriptionToPortType(*(_DWORD *)(*(void *)(*(void *)(a5 + 24) + 4384)
                                                     + 96 * *(unsigned int *)(a3 + 132)
                                                     + 16));
  CFRetain(v6);
  *a2 = v6;
  return 0;
}

__CFString *H16ISP::ModuleDescriptionToPortType(int a1)
{
  H16ISP::GetPortTypeMap(0, a1);
  if (!v1) {
    return @"Unknown";
  }
  uint64_t v2 = *v1;
  free(v1);
  return (__CFString *)v2;
}

__n128 H16ISP::GetPortTypeMap(CFTypeRef cf1, int a2)
{
  {
    *(void *)&H16ISP::GetPortTypeMap(__CFString const*,camera_module_description)::portTypeMap[0] = *MEMORY[0x263F2C240];
    DWORD2(H16ISP::GetPortTypeMap(__CFString const*,camera_module_description)::portTypeMap[0]) = 1919246706;
    qword_26B11BFA0 = *MEMORY[0x263F2C268];
    dword_26B11BFA8 = 1919251564;
    qword_26B11BFB0 = *MEMORY[0x263F2C258];
    dword_26B11BFB8 = 1919251319;
    qword_26B11BFC0 = *MEMORY[0x263F2C270];
    dword_26B11BFC8 = 1718775412;
    qword_26B11BFD0 = *MEMORY[0x263F2C288];
    dword_26B11BFD8 = 1718776695;
    qword_26B11BFE0 = *MEMORY[0x263F2C278];
    dword_26B11BFE8 = 1718186595;
    qword_26B11BFF0 = @"BackIRCamera";
    dword_26B11BFF8 = 1769110115;
    qword_26B11C000 = *MEMORY[0x263F2C250];
    dword_26B11C008 = 1785950322;
  }
  uint64_t v4 = 0;
  while (cf1)
  {
    if (CFEqual(cf1, *(CFTypeRef *)&H16ISP::GetPortTypeMap(__CFString const*,camera_module_description)::portTypeMap[v4]))
    {
      goto LABEL_9;
    }
LABEL_7:
    if (++v4 == 8) {
      return result;
    }
  }
  if (DWORD2(H16ISP::GetPortTypeMap(__CFString const*,camera_module_description)::portTypeMap[v4]) != a2) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v6 = (__n128 *)malloc_type_calloc(0x10uLL, 1uLL, 0x77773E58uLL);
  if (v6)
  {
    __n128 result = (__n128)H16ISP::GetPortTypeMap(__CFString const*,camera_module_description)::portTypeMap[v4];
    *uint64_t v6 = result;
  }
  return result;
}

float64x2_t H16ISP::H16ISPDevice::GetExtrinsicData(H16ISP::H16ISPDevice *this, int a2, int a3, float (*a4)[3][4])
{
  bzero(v11, 0x70uLL);
  __int16 v12 = 28677;
  int v13 = a2;
  int v14 = a3;
  if (!H16ISP::H16ISPDevice::ISP_SendCommand(this, v11, 0x70u, 0, 0xFFFFFFFF))
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v10 = (float64x2_t *)&v15[2 * i];
      float64x2_t result = v10[1];
      *(float32x4_t *)&(*a4)[i][0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v10), result);
    }
  }
  return result;
}

uint64_t SetMinimumFrameRate(const __CFNumber *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unsigned int v7 = *(_DWORD *)(a2 + 48);
  unsigned int v8 = *(_DWORD *)(a2 + 168);
  if (v7 < v8) {
    unsigned int v8 = 0;
  }
  unsigned int v9 = v7 - v8;
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v7 - v8) + 16), v27, v31))return 4294954516; {
  uint64_t v11 = *(void *)(a2 + 160);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 48);
  unsigned int v13 = *(_DWORD *)(a2 + 168);
  if (v12 < v13) {
    unsigned int v13 = 0;
  }
  uint64_t v14 = 120 * (v12 - v13);
  if (v11) {
    uint64_t v15 = v11 + 120 * v9;
  }
  else {
    uint64_t v15 = v14;
  }
  float v16 = *(float *)(v15 + 108);
  float v17 = v16 * 256.0;
  BOOL v18 = v16 == 0.0;
  float v19 = (float)v28;
  if (!v18) {
    float v19 = v17;
  }
  float v20 = v19 * 0.0039062;
  float valuePtr = v19 * 0.0039062;
  float v21 = (float)v29 * 0.0039062;
  CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
  if ((dword_26B11BAD4 & 0x80000000) == 0
    && H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322))
  {
    long long v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      long long v22 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = dword_26B11BAD4;
      _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_INFO, "Forcing Jasper FPS. Setting min and max to %d\n", buf, 8u);
    }
    unsigned int v29 = dword_26B11BAD4 << 8;
    float v20 = (float)dword_26B11BAD4;
    float valuePtr = (float)dword_26B11BAD4;
  }
  float v23 = valuePtr;
  uint64_t result = 4294954516;
  if (valuePtr < v21 || valuePtr > v20 || valuePtr > *(float *)(a2 + 60)) {
    return result;
  }
  uint64_t v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v24 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
    float v23 = valuePtr;
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(double *)&uint8_t buf[4] = v23;
    _os_log_impl(&dword_24680F000, v24, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting new min frame-rate: %.3f\n\n", buf, 0xCu);
    float v23 = valuePtr;
  }
  uint64_t v25 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  if (!v25)
  {
    *(float *)(a2 + 56) = v23;
    if (v23 > *(float *)(a2 + 52)) {
      *(float *)(a2 + 52) = v23;
    }
    goto LABEL_40;
  }
  if (*(float *)(a2 + 56) <= 0.0 && v23 > 0.0)
  {
    H16ISP::H16ISPFrameReceiver::EnableFrameDoneTimer(v25, 1);
    float v23 = valuePtr;
    uint64_t v25 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  }
  *(float *)(a2 + 56) = v23;
  if (v23 <= *(float *)(a2 + 52)) {
    goto LABEL_34;
  }
  *(float *)(a2 + 52) = v23;
  if (v25)
  {
    SetMaximumFrameRateNow(a2, *(H16ISP::H16ISPDevice **)(a4 + 24));
    uint64_t v25 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
LABEL_34:
    if (v25)
    {
      if (*(float *)(a2 + 56) <= 0.0)
      {
        H16ISP::H16ISPFrameReceiver::EnableFrameDoneTimer(v25, 0);
        H16ISP::H16ISPDevice::SetMinimumFrameRate(*(H16ISP::H16ISPDevice **)(a4 + 24), *(unsigned int *)(a2 + 132));
      }
      else
      {
        SetMinimumFrameRateNow(a2, *(H16ISP::H16ISPDevice **)(a4 + 24));
      }
    }
  }
LABEL_40:
  if (!*(void *)(a2 + 4240)) {
    return 0;
  }
  uint64_t result = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  if (result)
  {
    *(void *)buf = 0;
    H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(a2 + 4240), 11, (H16ISP::H16ISPFilterGraphNode **)buf);
    if (*(void *)buf) {
      H16ISP::H16ISPJasperDepthNode::setJasperFrameRateMin(*(H16ISP::H16ISPJasperDepthNode **)buf, valuePtr);
    }
    return 0;
  }
  return result;
}

uint64_t SetMaximumFrameRate(const __CFNumber *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v7 = *(_DWORD *)(a2 + 48);
  unsigned int v8 = *(_DWORD *)(a2 + 168);
  if (v7 < v8) {
    unsigned int v8 = 0;
  }
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v7 - v8) + 16), v13, v17))return 4294954516; {
  float valuePtr = 0.0;
  }
  CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
  float v9 = valuePtr;
  if (valuePtr > *(float *)(a2 + 60) || v14 > vcvtd_n_u64_f64(valuePtr, 8uLL)) {
    return 4294954516;
  }
  uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v11 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    float v9 = valuePtr;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    double v16 = v9;
    _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting new max frame-rate: %.3f\n\n", buf, 0xCu);
    float v9 = valuePtr;
  }
  *(float *)(a2 + 52) = v9;
  if (v9 < *(float *)(a2 + 56))
  {
    *(float *)(a2 + 56) = v9;
    if (*(void *)(a2 + 136)) {
      SetMinimumFrameRateNow(a2, *(H16ISP::H16ISPDevice **)(a4 + 24));
    }
  }
  if (*(void *)(a2 + 136)) {
    SetMaximumFrameRateNow(a2, *(H16ISP::H16ISPDevice **)(a4 + 24));
  }
  return 0;
}

double H16ISPSensorSharedRawPoolConfigurationReset(uint64_t a1, char a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 144;
  do
  {
    uint64_t v6 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(v5 + v4);
    if (v6)
    {
      H16ISP::H16ISPFrameReceiverSharedBufferPool::~H16ISPFrameReceiverSharedBufferPool(v6);
      MEMORY[0x24C53D6E0]();
      *(void *)(v5 + v4) = 0;
    }
    v4 += 56;
  }
  while (v4 != 168);
  if (a2)
  {
    *(void *)(a1 + 304) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
  }
  return result;
}

uint64_t SetNRSharpeningConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }

  return ApplyNoiseReductionConfiguration(a4, a2, 0, 0, 0, (CFDictionaryRef)a1);
}

uint64_t SetAEStatsEnable(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionEnabled(a4, a2, (int *)(a2 + 3812), cf);
}

uint64_t SetDeferAdditionOfAttachments(const void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v5 = "False";
    goto LABEL_7;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  uint64_t v5 = "False";
  if (v4 != CFBooleanGetTypeID())
  {
LABEL_7:
    uint64_t v7 = 4294954516;
    goto LABEL_8;
  }
  int v6 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t v7 = 0;
  if (v6) {
    uint64_t v5 = "True";
  }
  *(unsigned char *)(a2 + 672) = v6 != 0;
LABEL_8:
  unsigned int v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v8 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315394;
    uint64_t v11 = v5;
    __int16 v12 = 1024;
    int v13 = v7;
    _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetDeferAdditionOfAttachments: %s (err=%d) \n\n", (uint8_t *)&v10, 0x12u);
  }
  return v7;
}

uint64_t SetMaximumAllowedFrameRate(const __CFNumber *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 136))
  {
    unsigned int v16 = *(_DWORD *)(a2 + 48);
    unsigned int v17 = *(_DWORD *)(a2 + 168);
    if (v16 < v17) {
      unsigned int v17 = 0;
    }
    unsigned int v18 = v16 - v17;
    if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v16 - v17) + 16), v33, v35))
    {
      float v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        float v19 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        SetMaximumAllowedFrameRate();
      }
    }
    else
    {
      uint64_t v20 = *(void *)(a2 + 160);
      unsigned int v21 = *(_DWORD *)(a2 + 48);
      unsigned int v22 = *(_DWORD *)(a2 + 168);
      if (v21 < v22) {
        unsigned int v22 = 0;
      }
      uint64_t v23 = 120 * (v21 - v22);
      if (v20) {
        uint64_t v24 = v20 + 120 * v18;
      }
      else {
        uint64_t v24 = v23;
      }
      float v25 = *(float *)(v24 + 108);
      if (v25 == 0.0) {
        float v26 = (float)v34;
      }
      else {
        float v26 = v25 * 256.0;
      }
      float v27 = v26 * 0.0039062;
      float v32 = v26 * 0.0039062;
      CFNumberGetValue(a1, kCFNumberFloatType, &v32);
      if (v32 <= v27)
      {
        uint64_t result = H16ISP::H16ISPDevice::SetMaximumAllowedFrameRate(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), vcvtms_u32_f32(v32 * 256.0));
        if (result)
        {
          unsigned int v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            unsigned int v29 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v29;
          }
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            SetMaximumAllowedFrameRate();
          }
          uint64_t result = 4294954514;
        }
        float v30 = v32;
        *(float *)(a2 + 60) = v32;
        if (v30 <= 30.0)
        {
          int v31 = 1;
        }
        else
        {
          if (v30 <= 120.0)
          {
            *(_DWORD *)(a2 + 68) = 0;
            return result;
          }
          int v31 = -1;
        }
        *(_DWORD *)(a2 + 68) = v31;
        return result;
      }
      unsigned int v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned int v28 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        SetMaximumAllowedFrameRate(&v32, v28, v27);
      }
    }
    return 4294954516;
  }
  CFTypeID v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeID v4 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    SetMaximumAllowedFrameRate(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return 4294954612;
}

uint64_t SetISPMotionDataEnabled(const void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFBooleanGetTypeID()))
  {
    int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
    uint64_t v6 = 0;
    if (!*(void *)(a2 + 136)) {
      *(unsigned char *)(a2 + 3672) = v5 != 0;
    }
  }
  else
  {
    uint64_t v6 = 4294954516;
  }
  uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = "True";
    if (!*(unsigned char *)(a2 + 3672)) {
      uint64_t v8 = "False";
    }
    int v10 = 136315394;
    uint64_t v11 = v8;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetMotionDataFromISPEnabled: %s (err=%d)\n\n", (uint8_t *)&v10, 0x12u);
  }
  return v6;
}

uint64_t SetVideoOutputsEnabled(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 674)) {
    return 4294954509;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  int Value = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E918]);
  CFTypeRef cf1 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E928]);
  CFTypeRef v68 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E900]);
  uint64_t v9 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E930]);
  int v10 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E938]);
  uint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E940]);
  __int16 v12 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E8F8]);
  CFTypeRef v63 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E920]);
  int v13 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E948]);
  CFTypeRef v65 = CFDictionaryGetValue((CFDictionaryRef)cf, @"VisPipe");
  CFTypeRef v66 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E910]);
  CFTypeRef v64 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E908]);
  if (!Value)
  {
    unint64_t v58 = 0;
    BOOL v62 = 0;
    goto LABEL_15;
  }
  unsigned int v14 = *(_DWORD *)(a2 + 48);
  unsigned int v15 = *(_DWORD *)(a2 + 168);
  if (v14 < v15) {
    unsigned int v15 = 0;
  }
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v14 - v15) + 16), (char *)v71 + 4, &buf))return 4294954516; {
  if (!v80)
  }
  {
    float v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      float v30 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v30;
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      int v72 = 136315138;
      uint64_t v73 = "SetVideoOutputsEnabled";
      _os_log_impl(&dword_24680F000, v30, OS_LOG_TYPE_DEFAULT, "%s - Primary scaler not reported on this platform\n", (uint8_t *)&v72, 0xCu);
    }
    return 4294954516;
  }
  unint64_t v58 = (unint64_t)Value;
  if (CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFB40]))
  {
    if (!*(unsigned char *)(a2 + 680))
    {
      *(unsigned char *)(a2 + 680) = 1;
      if (*(void *)(a2 + 136)) {
        ActivatePrimaryScalerOutputInFrameReceiver(a2, a4);
      }
    }
    goto LABEL_92;
  }
  if (!*(unsigned char *)(a2 + 680))
  {
LABEL_92:
    BOOL v62 = 0;
    goto LABEL_93;
  }
  *(unsigned char *)(a2 + 680) = 0;
  BOOL v62 = *(void *)(a2 + 136) != 0;
LABEL_93:
  int v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v31 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    int v32 = *(unsigned __int8 *)(a2 + 680);
    int v72 = 136315394;
    uint64_t v73 = "SetVideoOutputsEnabled";
    __int16 v74 = 1024;
    int v75 = v32;
    _os_log_impl(&dword_24680F000, v31, OS_LOG_TYPE_INFO, "%s - PrimaryScaler:%d\n\n", (uint8_t *)&v72, 0x12u);
  }
LABEL_15:
  unsigned int v17 = (CFTypeRef *)MEMORY[0x263EFFB40];
  if (!cf1)
  {
    BOOL v61 = 0;
    goto LABEL_28;
  }
  if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x263EFFB40]))
  {
    if (!*(unsigned char *)(a2 + 880))
    {
      *(unsigned char *)(a2 + 880) = 1;
      if (*(void *)(a2 + 136)) {
        ActivateSecondaryScalerOutputInFrameReceiver(a2, a4);
      }
    }
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a2 + 880))
  {
LABEL_23:
    BOOL v61 = 0;
    goto LABEL_24;
  }
  *(unsigned char *)(a2 + 880) = 0;
  BOOL v61 = *(void *)(a2 + 136) != 0;
LABEL_24:
  unsigned int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v18 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = *(unsigned __int8 *)(a2 + 880);
    int buf = 136315394;
    int v77 = "SetVideoOutputsEnabled";
    __int16 v78 = 1024;
    int v79 = v19;
    _os_log_impl(&dword_24680F000, v18, OS_LOG_TYPE_INFO, "%s - SecondaryScaler:%d\n\n", (uint8_t *)&buf, 0x12u);
  }
LABEL_28:
  if (!v68)
  {
    BOOL v60 = 0;
    goto LABEL_41;
  }
  if (CFEqual(v68, *v17))
  {
    if (!*(unsigned char *)(a2 + 1080))
    {
      *(unsigned char *)(a2 + 1080) = 1;
      if (*(void *)(a2 + 136)) {
        ActivateIntermediateTapOutputInFrameReceiver(a2, a4);
      }
    }
    goto LABEL_36;
  }
  if (!*(unsigned char *)(a2 + 1080))
  {
LABEL_36:
    BOOL v60 = 0;
    goto LABEL_37;
  }
  *(unsigned char *)(a2 + 1080) = 0;
  BOOL v60 = *(void *)(a2 + 136) != 0;
LABEL_37:
  uint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v20 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    int v21 = *(unsigned __int8 *)(a2 + 1080);
    int buf = 136315394;
    int v77 = "SetVideoOutputsEnabled";
    __int16 v78 = 1024;
    int v79 = v21;
    _os_log_impl(&dword_24680F000, v20, OS_LOG_TYPE_INFO, "%s - IntermediateTap:%d\n\n", (uint8_t *)&buf, 0x12u);
  }
LABEL_41:
  if (!v9)
  {
    BOOL v59 = 0;
    goto LABEL_54;
  }
  if (CFEqual(v9, *v17))
  {
    if (!*(unsigned char *)(a2 + 1280))
    {
      *(unsigned char *)(a2 + 1280) = 1;
      if (*(void *)(a2 + 136)) {
        ActivateStillImageOutputInFrameReceiver(a2, a4);
      }
    }
    goto LABEL_49;
  }
  if (!*(unsigned char *)(a2 + 1280))
  {
LABEL_49:
    BOOL v59 = 0;
    goto LABEL_50;
  }
  *(unsigned char *)(a2 + 1280) = 0;
  BOOL v59 = *(void *)(a2 + 136) != 0;
LABEL_50:
  unsigned int v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v22 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    int v23 = *(unsigned __int8 *)(a2 + 1280);
    int buf = 136315394;
    int v77 = "SetVideoOutputsEnabled";
    __int16 v78 = 1024;
    int v79 = v23;
    _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_INFO, "%s - StillImage:%d\n\n", (uint8_t *)&buf, 0x12u);
  }
LABEL_54:
  if (!v10)
  {
    BOOL v25 = 0;
    unint64_t v24 = (unint64_t)v68;
    goto LABEL_69;
  }
  if (CFEqual(v10, *v17))
  {
    if (!*(unsigned char *)(a2 + 1480))
    {
      *(unsigned char *)(a2 + 1480) = 1;
      unint64_t v24 = (unint64_t)v68;
      if (*(void *)(a2 + 136)) {
        ActivateStillImageIntermediateTapOutputInFrameReceiver(a2, a4);
      }
      BOOL v25 = 0;
      goto LABEL_65;
    }
    goto LABEL_63;
  }
  if (!*(unsigned char *)(a2 + 1480))
  {
LABEL_63:
    BOOL v25 = 0;
    goto LABEL_64;
  }
  *(unsigned char *)(a2 + 1480) = 0;
  BOOL v25 = *(void *)(a2 + 136) != 0;
LABEL_64:
  unint64_t v24 = (unint64_t)v68;
LABEL_65:
  float v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    float v26 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v26;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    int v27 = *(unsigned __int8 *)(a2 + 1480);
    int buf = 136315394;
    int v77 = "SetVideoOutputsEnabled";
    __int16 v78 = 1024;
    int v79 = v27;
    _os_log_impl(&dword_24680F000, v26, OS_LOG_TYPE_INFO, "%s - StillImageIntermediateTap:%d\n\n", (uint8_t *)&buf, 0x12u);
  }
LABEL_69:
  if (!v13) {
    goto LABEL_81;
  }
  if (CFEqual(v13, *v17))
  {
    if (!*(unsigned char *)(a2 + 2280))
    {
      *(unsigned char *)(a2 + 2280) = 1;
      if (*(void *)(a2 + 136)) {
        ActivateStillImageRawOutputInFrameReceiver(a2, a4);
      }
    }
    goto LABEL_76;
  }
  if (!*(unsigned char *)(a2 + 2280))
  {
LABEL_76:
    LODWORD(v13) = 0;
    goto LABEL_77;
  }
  *(unsigned char *)(a2 + 2280) = 0;
  LODWORD(v13) = *(void *)(a2 + 136) != 0;
LABEL_77:
  unsigned int v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v28 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    int v29 = *(unsigned __int8 *)(a2 + 2280);
    int buf = 136315394;
    int v77 = "SetVideoOutputsEnabled";
    __int16 v78 = 1024;
    int v79 = v29;
    _os_log_impl(&dword_24680F000, v28, OS_LOG_TYPE_INFO, "%s - StillImageRaw:%d\n\n", (uint8_t *)&buf, 0x12u);
  }
LABEL_81:
  if (v11 && ConfigSupportsContextSwitchCaptures(a2, a4, 0, 0))
  {
    if (CFEqual(v11, *v17))
    {
      if (*(void *)(a2 + 136)) {
        return 4294954612;
      }
      if (!*(unsigned char *)(a2 + 1680)) {
        *(unsigned char *)(a2 + 1680) = 1;
      }
    }
    simd_float3 v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      simd_float3 v33 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      int v34 = *(unsigned __int8 *)(a2 + 1680);
      int buf = 136315394;
      int v77 = "SetVideoOutputsEnabled";
      __int16 v78 = 1024;
      int v79 = v34;
      _os_log_impl(&dword_24680F000, v33, OS_LOG_TYPE_INFO, "%s - StillImageQuadra:%d\n\n", (uint8_t *)&buf, 0x12u);
    }
  }
  if (v12)
  {
    if (CFEqual(v12, *v17))
    {
      if (!*(unsigned char *)(a2 + 1880))
      {
        char v35 = 1;
LABEL_109:
        *(unsigned char *)(a2 + 1880) = v35;
      }
    }
    else if (*(unsigned char *)(a2 + 1880))
    {
      char v35 = 0;
      goto LABEL_109;
    }
    uint64_t v36 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v36 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v36;
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      int v37 = *(unsigned __int8 *)(a2 + 1880);
      int buf = 136315394;
      int v77 = "SetVideoOutputsEnabled";
      __int16 v78 = 1024;
      int v79 = v37;
      _os_log_impl(&dword_24680F000, v36, OS_LOG_TYPE_INFO, "%s - Depth:%d\n\n", (uint8_t *)&buf, 0x12u);
    }
  }
  if (*(unsigned char *)(a2 + 3784))
  {
    unint64_t v38 = (unint64_t)cf1;
    CFDataRef v39 = v63;
  }
  else
  {
    BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
    unint64_t v38 = (unint64_t)cf1;
    CFDataRef v39 = v63;
    if (!isSensorType) {
      goto LABEL_125;
    }
  }
  if (v39)
  {
    if (CFEqual(v39, *v17) && !*(unsigned char *)(a2 + 2080)) {
      *(unsigned char *)(a2 + 2080) = 1;
    }
    long long v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      long long v41 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
    }
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      int v42 = *(unsigned __int8 *)(a2 + 2080);
      int buf = 136315394;
      int v77 = "SetVideoOutputsEnabled";
      __int16 v78 = 1024;
      int v79 = v42;
      _os_log_impl(&dword_24680F000, v41, OS_LOG_TYPE_INFO, "%s - Raw:%d\n\n", (uint8_t *)&buf, 0x12u);
    }
  }
LABEL_125:
  if (v65)
  {
    if (CFEqual(v65, *v17))
    {
      if (!*(unsigned char *)(a2 + 2480))
      {
        *(unsigned char *)(a2 + 2480) = 1;
        if (*(void *)(a2 + 136)) {
          ActivateVisPipeOutputInFrameReceiver(a2, a4);
        }
      }
    }
  }
  if (!v66)
  {
    BOOL v43 = 0;
    goto LABEL_143;
  }
  if (CFEqual(v66, *v17))
  {
    if (!*(unsigned char *)(a2 + 3608))
    {
      *(unsigned char *)(a2 + 3608) = 1;
      if (*(void *)(a2 + 136)) {
        ActivatePointCloudOutputInFrameReceiver(a2, a4);
      }
    }
    goto LABEL_138;
  }
  if (!*(unsigned char *)(a2 + 3608))
  {
LABEL_138:
    BOOL v43 = 0;
    goto LABEL_139;
  }
  *(unsigned char *)(a2 + 3608) = 0;
  BOOL v43 = *(void *)(a2 + 136) != 0;
LABEL_139:
  unsigned int v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unsigned int v44 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
  }
  if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
  {
    int v45 = *(unsigned __int8 *)(a2 + 3608);
    int buf = 136315394;
    int v77 = "SetVideoOutputsEnabled";
    __int16 v78 = 1024;
    int v79 = v45;
    _os_log_impl(&dword_24680F000, v44, OS_LOG_TYPE_INFO, "%s - PointCloud:%d\n\n", (uint8_t *)&buf, 0x12u);
  }
LABEL_143:
  if (v64)
  {
    int v46 = CFEqual(v64, *v17);
    int v47 = v46 != 0;
    if (*(unsigned __int8 *)(a2 + 2680) == v47)
    {
      BOOL v48 = 0;
    }
    else
    {
      int v49 = v46;
      if (v46 && *(void *)(a2 + 136))
      {
        if (isExclaveAlgoEnabled((unsigned char *)a2)) {
          ConfigureExclaveGraph(a4, a2);
        }
        ActivateMetadataOutputInFrameReceiver(a2, a4);
      }
      BOOL v48 = v49 == 0;
      *(unsigned char *)(a2 + 2680) = v47;
    }
    unint64_t v24 = (unint64_t)v68;
  }
  else
  {
    BOOL v48 = 0;
  }
  if (!*(void *)(a2 + 136)) {
    goto LABEL_179;
  }
  int v50 = H16ISP::H16ISPDevice::EnableTileBasedGDC(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), *(unsigned char *)(a2 + 1355), *(unsigned char *)(a2 + 755), 0, 0);
  if (!v50)
  {
    if (v38 | v24)
    {
      int v53 = *(unsigned char *)(a2 + 1080) ? 2 : 3;
      if (H16ISP::H16ISPDevice::ISP_PreviewStreamSet(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v53))
      {
        uint64_t v54 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v54 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v54;
        }
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
          SetVideoOutputsEnabled();
        }
        return 4294954516;
      }
    }
    if (v58 | v38 && *(_DWORD *)(a2 + 3952) == 1)
    {
      int buf = 0;
      v71[0] = 0;
      int v72 = 0;
      int v70 = 0;
      char v69 = 0;
      H16ISP::H16ISPFrameReceiver::getOutputSize(*(void **)(a2 + 136), &buf, (_DWORD *)v71 + 1, &v72, v71, &v70, &v69);
      if ((v70 - 31) >= 6 && v70 != 1) {
        *(_DWORD *)(a2 + 3952) = 0;
      }
      if (H16ISP::H16ISPDevice::SetProResSharpeningTuning(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(a2 + 3952) != 0))
      {
        uint64_t v55 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v55 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v55;
        }
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
          SetVideoOutputsEnabled();
        }
        *(_DWORD *)(a2 + 3952) = 0;
      }
    }
LABEL_179:
    uint64_t v56 = a2 + 52;
    if (*(float *)(a2 + 52) > *(float *)(a2 + 60))
    {
      uint64_t v57 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v57 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v57;
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputsEnabled(v56);
      }
      return 4294954516;
    }
    if (*(void *)(a2 + 136)) {
      SuspendResumeStream(a4, a2);
    }
    if (v62) {
      DeactivatePrimaryScalerOutputInFrameReceiver(a2, a4);
    }
    if (v61) {
      DeactivateSecondaryScalerOutputInFrameReceiver(a2, a4);
    }
    if (v60) {
      DeactivateIntermediateTapOutputInFrameReceiver(a2, a4);
    }
    if (v59)
    {
      DeactivateStillImageOutputInFrameReceiver(a2);
      if (!v25)
      {
LABEL_195:
        if (!v13) {
          goto LABEL_196;
        }
        goto LABEL_202;
      }
    }
    else if (!v25)
    {
      goto LABEL_195;
    }
    DeactivateStillImageIntermediateTapOutputInFrameReceiver(a2);
    if (!v13)
    {
LABEL_196:
      if (!v48) {
        goto LABEL_197;
      }
      goto LABEL_203;
    }
LABEL_202:
    DeactivateStillImageRawOutputInFrameReceiver(a2);
    if (!v48)
    {
LABEL_197:
      if (!v43) {
        return 0;
      }
LABEL_198:
      DeactivatePointCloudOutputInFrameReceiver(a2);
      return 0;
    }
LABEL_203:
    DeactivateMetadataOutputInFrameReceiver(a2, a4);
    if (!v43) {
      return 0;
    }
    goto LABEL_198;
  }
  int v51 = v50;
  uint64_t v52 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v52 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v52;
  }
  if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
  {
    int buf = 136315394;
    int v77 = "SetVideoOutputsEnabled";
    __int16 v78 = 1024;
    int v79 = v51;
    _os_log_impl(&dword_24680F000, v52, OS_LOG_TYPE_INFO, "%s - EnableTileBasedGDC error %d\n\n", (uint8_t *)&buf, 0x12u);
  }
  return 4294954611;
}

double dsiExtrinsicsToFig(const simd::float4x3 *a1)
{
  uint64_t v1 = 0;
  simd_float3 v2 = a1->columns[2];
  simd_float3 v3 = a1->columns[3];
  v2.i32[3] = 0;
  v3.i32[3] = 1.0;
  long long v11 = (__int128)v2;
  long long v12 = (__int128)v3;
  do
  {
    *(float32x4_t *)((char *)&v13 + v1 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2469DA7C0, COERCE_FLOAT(v10[v1])), (float32x4_t)xmmword_2469DA7B0, *(float32x2_t *)&v10[v1], 1), (float32x4_t)xmmword_2469DAC50, (float32x4_t)v10[v1], 2), (float32x4_t)xmmword_2469DAC60, (float32x4_t)v10[v1], 3);
    ++v1;
  }
  while (v1 != 4);
  uint64_t v4 = 0;
  float32x4_t v5 = (float32x4_t)v13;
  float32x4_t v6 = (float32x4_t)v14;
  float32x4_t v7 = (float32x4_t)v15;
  float32x4_t v8 = (float32x4_t)v16;
  v10[0] = xmmword_2469DA7C0;
  v10[1] = xmmword_2469DA7B0;
  long long v11 = xmmword_2469DAC50;
  long long v12 = xmmword_2469DAC60;
  do
  {
    *(float32x4_t *)((char *)&v13 + v4 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(v10[v4])), v6, *(float32x2_t *)&v10[v4], 1), v7, (float32x4_t)v10[v4], 2), v8, (float32x4_t)v10[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  *(void *)&double result = vzip1q_s32(vzip1q_s32(v13, v15), vzip1q_s32(v14, v16)).u64[0];
  return result;
}

uint64_t SetLocalHistogramsClippingDataOnStreamingOutputs(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionRequired(a4, a2, (int *)(a2 + 3828), cf);
}

uint64_t SetLTMLookUpTableMetadataOnStreamingOutputs(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionRequired(a4, a2, (int *)(a2 + 3836), cf);
}

uint64_t SetLTMThumbnailMetadataOnStreamingOutputs(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionRequired(a4, a2, (int *)(a2 + 3844), cf);
}

uint64_t CopySynchronizedStreamsSlaveConfiguration(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 3758097085;
  }
  float32x4_t v7 = Mutable;
  float32x4_t v8 = (const void *)*MEMORY[0x263EFFB38];
  uint64_t v9 = (const void *)*MEMORY[0x263EFFB40];
  if (*(unsigned char *)(a3 + 3898)) {
    int v10 = (const void *)*MEMORY[0x263EFFB40];
  }
  else {
    int v10 = (const void *)*MEMORY[0x263EFFB38];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E5C8], v10);
  if (*(unsigned char *)(a3 + 3900)) {
    long long v11 = v9;
  }
  else {
    long long v11 = v8;
  }
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E5B8], v11);
  int v12 = *(_DWORD *)(a3 + 3904);
  if (v12 <= 0) {
    int v12 = (int)(float)(*(float *)(a3 + 52) / 10.0);
  }
  int valuePtr = v12;
  CFNumberRef v13 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E5C0], v13);
  CFRelease(v13);
  uint64_t result = 0;
  *a2 = v7;
  return result;
}

uint64_t SetFaceDetectionMetadataCoordinateSpace(const void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (*(void *)(a2 + 136))
  {
    if (*(unsigned char *)(a2 + 3681) == (valuePtr != 0)) {
      return 0;
    }
    else {
      return 4294954612;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 3681) = valuePtr != 0;
    float32x4_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      float32x4_t v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_DWORD *)int buf = 67109120;
      int v9 = valuePtr;
      _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting FaceDetection Metadata Coordinate Space: %d\n\n", buf, 8u);
      return 0;
    }
  }
  return result;
}

uint64_t SetLocalHistogramsClippingDataEnabled(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionEnabled(a4, a2, (int *)(a2 + 3828), cf);
}

uint64_t SetDecouplePrimaryScalerFromStreaming(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  BOOL v6 = v5 != 0;
  if (v5)
  {
    if (*(unsigned char *)(a2 + 680)) {
      return 4294954516;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(a2 + 3726) = v6;
  return result;
}

uint64_t SetLocalHistogramsOnStreamingOutputs(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionRequired(a4, a2, (int *)(a2 + 3820), cf);
}

uint64_t SetLumaHistogramsOnStreamingOutputs(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionRequired(a4, a2, (int *)(a2 + 3852), cf);
}

uint64_t SetDeviceMotionLoggingDataEnabled(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionEnabled(a4, a2, (int *)(a2 + 3876), cf);
}

uint64_t SetLTMLookUpTableMetadataEnabled(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionEnabled(a4, a2, (int *)(a2 + 3836), cf);
}

uint64_t SetForegroundSegmentationNetwork(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  int v5 = *(void **)(a2 + 4240);
  if (v5)
  {
    float32x4_t v7 = 0;
    H16ISP::H16ISPFilterGraphManager::GetNode(v5, 8, &v7);
    if (v7) {
      H16ISP::H16ISPGraphSegmentationNode::SetSegmentationNetwork((uint64_t)v7, valuePtr);
    }
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 4248) = valuePtr;
  return result;
}

uint64_t SetLTMThumbnailMetadataEnabled(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionEnabled(a4, a2, (int *)(a2 + 3844), cf);
}

uint64_t SetKeypointDetectionEnabled(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 4116) = v5 != 0;
  return result;
}

uint64_t SetHighCurrentTorchEnabled(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  int v6 = v5;
  if (*(void *)(a2 + 136))
  {
    if (*(unsigned char *)(a2 + 4040) == (v5 != 0))
    {
      return 0;
    }
    else
    {
      float32x4_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        float32x4_t v8 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        SetHighCurrentTorchEnabled();
      }
      return 4294954612;
    }
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 4040) = v6 != 0;
  }
  return result;
}

uint64_t SetFocusBlurMapEnabled(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionEnabled(a4, a2, (int *)(a2 + 3796), cf);
}

uint64_t SetEnabledFocusScores(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFArrayGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  *(_WORD *)(a2 + 3677) = 0;
  if (CFArrayGetCount((CFArrayRef)a1) >= 1)
  {
    CFIndex v6 = 0;
    float32x4_t v7 = (const void *)*MEMORY[0x263F2D820];
    float32x4_t v8 = (const void *)*MEMORY[0x263F2D818];
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v6);
      if (CFEqual(ValueAtIndex, v7)) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = CFEqual(ValueAtIndex, v8) != 0;
      }
      *(unsigned char *)(a2 + v10 + 3677) = 1;
      ++v6;
    }
    while (v6 < CFArrayGetCount((CFArrayRef)a1));
  }
  return 0;
}

uint64_t SetAutoExposureTables(const __CFDictionary *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFDictionaryRef Value = cf;
  valuePtr[1] = *MEMORY[0x263EF8340];
  valuePtr[0] = 0x400000000;
  if (!cf) {
    goto LABEL_13;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, valuePtr);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, v8);
  CFRelease(v8);
  if (!Value) {
    goto LABEL_21;
  }
  CFTypeID v9 = CFGetTypeID(Value);
  if (v9 == CFDataGetTypeID())
  {
    char v10 = 1;
    goto LABEL_14;
  }
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 != CFNumberGetTypeID())
  {
    CFDictionaryRef Value = 0;
LABEL_13:
    char v10 = 0;
    goto LABEL_14;
  }
  *(_DWORD *)unsigned int v22 = 0;
  CFNumberGetValue(Value, kCFNumberIntType, v22);
  CFDictionaryRef Value = 0;
  if (*(unsigned int *)v22 >= 7uLL) {
    char v10 = 0;
  }
  else {
    char v10 = 0x7060504020300uLL >> (8 * v22[0]);
  }
LABEL_14:
  bzero(v22, 0xD4uLL);
  __int16 v23 = 576;
  __int16 v24 = *(_DWORD *)(a2 + 132);
  int v25 = HIDWORD(valuePtr[0]);
  char v27 = v10;
  if (v10 == 1)
  {
    BytePtr = CFDataGetBytePtr(Value);
    unint64_t Length = CFDataGetLength(Value);
    unint64_t v15 = Length >> 3;
    if (Length >= 8)
    {
      int32x4_t v16 = (int *)(BytePtr + 4);
      unsigned int v17 = &v28;
      unsigned int v18 = 1;
      do
      {
        *(v17 - 1) = (1000 * *(v16 - 1));
        int v19 = *v16;
        v16 += 2;
        *(_DWORD *)unsigned int v17 = v19;
        unsigned int v17 = (uint64_t *)((char *)v17 + 12);
      }
      while (v15 > v18++);
    }
  }
  else
  {
    LOWORD(v15) = 0;
  }
  __int16 v26 = v15;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v22, 0xD4u, 0, 0xFFFFFFFF);
  if (result)
  {
LABEL_21:
    int v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      SetAutoExposureTables();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyGroupSynchronizationMaster(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(*(void *)(a5 + 24) + 4384);
  if (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) < 1)
  {
LABEL_6:
    *a2 = 0;
  }
  else
  {
    CFIndex v8 = 0;
    unsigned int v9 = 1;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 16), v8);
      FigCaptureStreamGetFigBaseObject();
      if (*(unsigned char *)(v7 + 96 * *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 132) + 64)) {
        break;
      }
      CFIndex v8 = v9;
      if (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) <= v9++) {
        goto LABEL_6;
      }
    }
    *a2 = ValueAtIndex;
    if (ValueAtIndex) {
      CFRetain(ValueAtIndex);
    }
  }
  return 0;
}

uint64_t CopyGroupSupportedStreams(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *a2 = *(void *)(a4 + 16);
  CFTypeID v4 = *(const void **)(a4 + 16);
  if (v4) {
    CFRetain(v4);
  }
  return 0;
}

float SetTemporalNoiseReductionConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a2 + 85);
  int v5 = *(unsigned __int8 *)(a2 + 86);
  unsigned int v6 = *(_DWORD *)(a2 + 92);
  unsigned int valuePtr = v6;
  float result = *(float *)(a2 + 96);
  float v38 = *(float *)(a2 + 100);
  float v39 = result;
  if (a1)
  {
    CFTypeID v11 = CFGetTypeID(a1);
    if (v11 == CFDictionaryGetTypeID())
    {
      if (*(void *)(*(void *)(a4 + 24) + 4384))
      {
        CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E5E8]);
        CFNumberRef v13 = (CFTypeRef *)MEMORY[0x263EFFB40];
        if (Value) {
          int v4 = CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFB40]);
        }
        int32x4_t v14 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E608]);
        if (v14) {
          int v5 = CFEqual(v14, *v13);
        }
        CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E5F0]);
        if (v15)
        {
          CFNumberGetValue(v15, kCFNumberSInt32Type, &valuePtr);
          unsigned int v6 = valuePtr;
        }
        BOOL v16 = v6 && v4 == 0;
        if (!v16 && v6 <= 2)
        {
          CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E5F8]);
          if (v17)
          {
            CFDictionaryRef v18 = v17;
            CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x263F2E5D8]);
            if (v19) {
              CFNumberGetValue(v19, kCFNumberFloatType, &v39);
            }
            CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v18, (const void *)*MEMORY[0x263F2E5E0]);
            if (v20) {
              CFNumberGetValue(v20, kCFNumberFloatType, &v38);
            }
            if (!v4 || !valuePtr || v38 > v39)
            {
              int v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                int v21 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
              }
              if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                SetTemporalNoiseReductionConfiguration(v21, v22, v23, v24, v25, v26, v27, v28);
              }
              return result;
            }
          }
          CFBooleanRef v29 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E600]);
          if (v29) {
            BOOL v30 = CFBooleanGetValue(v29) != 0;
          }
          else {
            BOOL v30 = 0;
          }
          CFBooleanRef v31 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E610]);
          if (v31) {
            int v32 = CFBooleanGetValue(v31) != 0;
          }
          else {
            int v32 = 0;
          }
          simd_float3 v33 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
          if (!v33) {
            goto LABEL_61;
          }
          if (!H16ISP::H16ISPFrameReceiver::IsSuspended(v33)
            && (*(unsigned char *)(a2 + 85) != (v4 != 0) || *(unsigned char *)(a2 + 86) != (v5 != 0)))
          {
            return result;
          }
          if (!*(void *)(a2 + 136) || !*(unsigned char *)(a2 + 84)) {
            goto LABEL_61;
          }
          if (*(unsigned __int8 *)(a2 + 104) != v32
            && H16ISP::H16ISPDevice::EnableHighStrengthTNR(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v32))
          {
            int v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              int v34 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v34;
            }
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
              SetTemporalNoiseReductionConfiguration();
            }
            return result;
          }
          if (*(_DWORD *)(a2 + 92) != valuePtr
            && H16ISP::H16ISPDevice::EnableBand0Modulation(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr))
          {
            char v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              char v35 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v35;
            }
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
              SetTemporalNoiseReductionConfiguration();
            }
            return result;
          }
          if (*(float *)(a2 + 96) == v39 && *(float *)(a2 + 100) == v38
            || !H16ISP::H16ISPDevice::SetBand0StrengthModThreshold(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), vcvtd_n_s64_f64(v39, 8uLL), vcvtd_n_s64_f64(v38, 8uLL)))
          {
LABEL_61:
            *(unsigned char *)(a2 + 85) = v4 != 0;
            *(unsigned char *)(a2 + 86) = v5 != 0;
            *(unsigned char *)(a2 + 88) = v30;
            *(_DWORD *)(a2 + 92) = valuePtr;
            float v37 = v38;
            float result = v39;
            *(float *)(a2 + 96) = v39;
            *(float *)(a2 + 100) = v37;
            *(unsigned char *)(a2 + 104) = v32;
            return result;
          }
          uint64_t v36 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v36 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v36;
          }
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
            SetTemporalNoiseReductionConfiguration();
          }
        }
      }
    }
  }
  return result;
}

uint64_t SetTOFAutoFocusEstimatorDataEnabled(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  int v6 = v5;
  if (*(void *)(a2 + 136))
  {
    if (*(unsigned char *)(a2 + 3680) == (v5 != 0)) {
      return 0;
    }
    else {
      return 4294954612;
    }
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 3680) = v6 != 0;
  }
  return result;
}

uint64_t SetLeaderFollowerAutoFocusEnabled(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  int v6 = v5;
  if (*(void *)(a2 + 136))
  {
    if (*(unsigned char *)(a2 + 3682) == (v5 != 0)) {
      return 0;
    }
    else {
      return 4294954612;
    }
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 3682) = v6 != 0;
  }
  return result;
}

uint64_t SetTemporalNoiseReductionEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1) {
    goto LABEL_7;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    goto LABEL_7;
  }
  int v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  unsigned int v9 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  if (!v9) {
    goto LABEL_15;
  }
  if (H16ISP::H16ISPFrameReceiver::IsSuspended(v9))
  {
    if (*(void *)(a2 + 136))
    {
      *(_OWORD *)int32x4_t v14 = *(_OWORD *)(a2 + 84);
      *(_OWORD *)&v14[12] = *(_OWORD *)(a2 + 96);
      v14[0] = v8 != 0;
      if (H16ISP::H16ISPDevice::EnableTNR(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (uint64_t)v14))
      {
LABEL_7:
        uint64_t v10 = 4294954516;
        goto LABEL_8;
      }
    }
LABEL_15:
    uint64_t v10 = 0;
    *(unsigned char *)(a2 + 84) = v8 != 0;
    goto LABEL_8;
  }
  uint64_t v10 = 4294954612;
LABEL_8:
  CFTypeID v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeID v11 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    CFTypeID v12 = "True";
    if (!*(unsigned char *)(a2 + 84)) {
      CFTypeID v12 = "False";
    }
    *(_DWORD *)int32x4_t v14 = 136315394;
    *(void *)&unsigned __int8 v14[4] = v12;
    *(_WORD *)&v14[12] = 1024;
    *(_DWORD *)&v14[14] = v10;
    _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Enable TNR: %s (err = %d)\n\n", v14, 0x12u);
  }
  return v10;
}

uint64_t SetStreamingTuningProfile(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v5 = &_os_log_internal;
  if (!a1) {
    goto LABEL_9;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != CFNumberGetTypeID()) {
    goto LABEL_9;
  }
  unsigned int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  uint64_t v9 = 0;
  if (valuePtr == *(_DWORD *)(a2 + 3952)) {
    goto LABEL_10;
  }
  uint64_t v9 = valuePtr;
  if (!valuePtr)
  {
LABEL_19:
    if (!H16ISP::H16ISPDevice::SetProResSharpeningTuning(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr != 0))
    {
      int v11 = valuePtr;
      goto LABEL_26;
    }
    uint64_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
    {
      uint64_t v15 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      SetStreamingTuningProfile();
    }
    uint64_t v9 = 4294954514;
    goto LABEL_10;
  }
  if (valuePtr != 1)
  {
LABEL_9:
    uint64_t v9 = 4294954516;
    goto LABEL_10;
  }
  uint64_t v10 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  if (!v10)
  {
    int v11 = 1;
    goto LABEL_16;
  }
  if (H16ISP::H16ISPFrameReceiver::IsSuspended(v10))
  {
    int v11 = valuePtr;
LABEL_16:
    uint64_t v9 = 0;
LABEL_26:
    *(_DWORD *)(a2 + 3952) = v11;
    goto LABEL_10;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v17 = 0;
  char v16 = 0;
  H16ISP::H16ISPFrameReceiver::getOutputSize(*(void **)(a2 + 136), (_DWORD *)&v19 + 1, &v19, (_DWORD *)&v18 + 1, &v18, &v17, &v16);
  uint64_t v9 = 0;
  if ((v17 - 31) >= 6 && v17 != 1) {
    uint64_t v9 = 4294954514;
  }
  if ((v17 - 31) < 6 || v17 == 1) {
    goto LABEL_19;
  }
LABEL_10:
  CFTypeID v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
  {
    CFTypeID v12 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v13 = *(_DWORD *)(a2 + 3952);
    unsigned int valuePtr = 136315650;
    int v21 = "SetStreamingTuningProfile";
    __int16 v22 = 1024;
    int v23 = v13;
    __int16 v24 = 1024;
    int v25 = v9;
    _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_INFO, "%s - ISP tuning profile = %d (err = %d)\n", (uint8_t *)&valuePtr, 0x18u);
  }
  return v9;
}

uint64_t SetStreamingYCbCrMatrix(CFTypeRef cf, uint64_t a2)
{
  CFTypeID v4 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  if (v4 && !H16ISP::H16ISPFrameReceiver::IsSuspended(v4)) {
    return 4294954612;
  }
  if (!cf)
  {
    int v6 = 0;
    goto LABEL_9;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 == CFStringGetTypeID())
  {
    if (CFEqual(cf, (CFTypeRef)*MEMORY[0x263F04038]))
    {
      int v6 = 1;
LABEL_9:
      uint64_t result = 0;
      *(_DWORD *)(a2 + 148) = v6;
      return result;
    }
    if (CFEqual(cf, (CFTypeRef)*MEMORY[0x263F04050]))
    {
      int v6 = 2;
      goto LABEL_9;
    }
  }
  return 4294954516;
}

uint64_t CopyAPSOffsetEstimatorInfo(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  bzero(v44, 0x58uLL);
  __int16 v45 = 1958;
  __int16 v46 = *(_DWORD *)(a3 + 132);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), v44, 0x58u, 0, 0xFFFFFFFF))
  {
    CFTypeID v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      CopyAPSOffsetEstimatorInfo();
    }
    CFMutableDictionaryRef Mutable = 0;
LABEL_7:
    uint64_t result = 4294954516;
  }
  else if (v47)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      int valuePtr = v54;
      CFNumberRef v12 = CFNumberCreate(v11, kCFNumberFloatType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C7A8], v12);
      CFRelease(v12);
      int v42 = v53;
      CFNumberRef v13 = CFNumberCreate(v11, kCFNumberFloatType, &v42);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C7B0], v13);
      CFRelease(v13);
      int v41 = v49;
      CFNumberRef v14 = CFNumberCreate(v11, kCFNumberFloatType, &v41);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C760], v14);
      CFRelease(v14);
      int v40 = v51;
      CFNumberRef v15 = CFNumberCreate(v11, kCFNumberFloatType, &v40);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C770], v15);
      CFRelease(v15);
      int v39 = v50;
      CFNumberRef v16 = CFNumberCreate(v11, kCFNumberFloatType, &v39);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C778], v16);
      CFRelease(v16);
      int v38 = v52;
      CFNumberRef v17 = CFNumberCreate(v11, kCFNumberFloatType, &v38);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C768], v17);
      CFRelease(v17);
      __int16 v37 = v58;
      CFNumberRef v18 = CFNumberCreate(v11, kCFNumberSInt16Type, &v37);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C7B8], v18);
      CFRelease(v18);
      int v36 = v57;
      CFNumberRef v19 = CFNumberCreate(v11, kCFNumberSInt32Type, &v36);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C7A0], v19);
      CFRelease(v19);
      switch(v48)
      {
        case 0:
          int v35 = 0;
          goto LABEL_28;
        case 1:
          int v21 = 1;
          goto LABEL_27;
        case 2:
          int v21 = 2;
          goto LABEL_27;
        case 3:
          int v21 = 3;
          goto LABEL_27;
        case 4:
          int v21 = 4;
          goto LABEL_27;
        case 5:
          int v21 = 5;
          goto LABEL_27;
        case 6:
          int v21 = 6;
          goto LABEL_27;
        case 7:
          int v21 = 7;
          goto LABEL_27;
        case 8:
          int v21 = 8;
LABEL_27:
          int v35 = v21;
LABEL_28:
          CFNumberRef v22 = CFNumberCreate(v11, kCFNumberSInt32Type, &v35);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C748], v22);
          CFRelease(v22);
          int v34 = v55;
          CFNumberRef v23 = CFNumberCreate(v11, kCFNumberFloatType, &v34);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C798], v23);
          CFRelease(v23);
          int v33 = v56;
          CFNumberRef v24 = CFNumberCreate(v11, kCFNumberFloatType, &v33);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C758], v24);
          CFRelease(v24);
          if (*(int *)(*(void *)(a5 + 24) + 4392) >= 17)
          {
            int v32 = v59;
            CFNumberRef v25 = CFNumberCreate(v11, kCFNumberFloatType, &v32);
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C780], v25);
            CFRelease(v25);
            int v31 = v60;
            CFNumberRef v26 = CFNumberCreate(v11, kCFNumberFloatType, &v31);
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C788], v26);
            CFRelease(v26);
            int v30 = v61;
            CFNumberRef v27 = CFNumberCreate(v11, kCFNumberFloatType, &v30);
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C790], v27);
            CFRelease(v27);
            int v29 = v62;
            CFNumberRef v28 = CFNumberCreate(v11, kCFNumberFloatType, &v29);
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C750], v28);
            CFRelease(v28);
          }
          uint64_t result = 0;
          break;
        default:
          CFNumberRef v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFNumberRef v20 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            CopyAPSOffsetEstimatorInfo();
          }
          goto LABEL_7;
      }
    }
    else
    {
      uint64_t result = 4294954510;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t result = 4294954513;
  }
  *a2 = Mutable;
  return result;
}

uint64_t SetAPSLoggingDataEnabled(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  int v6 = v5;
  if (*(void *)(a2 + 136))
  {
    if (*(unsigned char *)(a2 + 3679) == (v5 != 0)) {
      return 0;
    }
    else {
      return 4294954612;
    }
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 3679) = v6 != 0;
  }
  return result;
}

uint64_t SetAPSDataEnabled(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  LODWORD(result) = SetMetadataSectionEnabled(a4, a2, (int *)(a2 + 3804), cf);
  if (result == -12684) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t SetFocusNow(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  int v4 = -536870206;
  uint64_t valuePtr = 0;
  if (!a1) {
    goto LABEL_56;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != CFDictionaryGetTypeID()) {
    goto LABEL_56;
  }
  CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CA28]);
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CA30]);
  CFAllocatorRef v11 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CA38]);
  CFNumberRef v12 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CA10]);
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CA40]);
  CFNumberRef v14 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CA20]);
  CFNumberRef v15 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CA08]);
  CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2CA18]);
  if (Value) {
    BOOL v17 = v10 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  BOOL v20 = v17 || v11 == 0 || v12 == 0 || v13 == 0;
  CFTypeRef cf1 = v14;
  if (v20 || v14 == 0 || v15 == 0 || v16 == 0) {
    goto LABEL_26;
  }
  CFNumberRef number = v16;
  uint64_t v36 = a4;
  int v25 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v25 |= 0x80000000;
  }
  bzero(buf, 0x2CuLL);
  LOWORD(v40) = -31723;
  *(_DWORD *)int v41 = *(_DWORD *)v41 & 0x7FFF0000 | v25;
  CFNumberRef v26 = (const void *)*MEMORY[0x263EFFB40];
  v41[4] = CFEqual(v12, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  v41[5] = CFEqual(Value, v26) != 0;
  CFNumberGetValue(v10, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  int v42 = HIDWORD(valuePtr);
  if (CFEqual(v11, (CFTypeRef)*MEMORY[0x263F2E1C8]))
  {
    int v27 = 0;
    uint64_t v28 = v36;
  }
  else
  {
    uint64_t v28 = v36;
    if (CFEqual(v11, (CFTypeRef)*MEMORY[0x263F2E1B8]))
    {
      int v27 = 1;
    }
    else
    {
      if (!CFEqual(v11, (CFTypeRef)*MEMORY[0x263F2E1C0])) {
        goto LABEL_26;
      }
      int v27 = 2;
    }
  }
  int v43 = v27;
  CFNumberGetValue(v13, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  int v44 = HIDWORD(valuePtr);
  if (CFEqual(v15, (CFTypeRef)*MEMORY[0x263F2C9D0]))
  {
    int v29 = 0;
    goto LABEL_42;
  }
  if (CFEqual(v15, (CFTypeRef)*MEMORY[0x263F2C9C8]))
  {
    int v29 = 1;
    goto LABEL_42;
  }
  if (!CFEqual(v15, (CFTypeRef)*MEMORY[0x263F2C9C0]))
  {
LABEL_26:
    uint64_t v24 = 4294954516;
    int v4 = -536870206;
    goto LABEL_57;
  }
  int v29 = 2;
LABEL_42:
  int v45 = v29;
  if (!CFEqual(v14, (CFTypeRef)*MEMORY[0x263F2CA68]))
  {
    int v4 = -536870206;
    if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x263F2CA80]))
    {
      int v30 = 1;
      goto LABEL_54;
    }
    if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x263F2CA60]))
    {
      int v30 = 2;
      goto LABEL_54;
    }
    if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x263F2CA88]))
    {
      int v30 = 3;
      goto LABEL_54;
    }
    if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x263F2CA78]))
    {
      int v30 = 4;
      goto LABEL_54;
    }
    if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x263F2CA70]))
    {
      int v30 = 5;
      goto LABEL_54;
    }
LABEL_56:
    uint64_t v24 = 4294954516;
    goto LABEL_57;
  }
  int v30 = 0;
LABEL_54:
  int v46 = v30;
  CFNumberGetValue(number, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  int v47 = HIDWORD(valuePtr);
  CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C370]);
  if (v31)
  {
    CFNumberGetValue(v31, kCFNumberSInt32Type, &valuePtr);
    int v32 = valuePtr;
  }
  else
  {
    int v32 = 0;
  }
  int v48 = v32;
  int v4 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v28 + 24), buf, 0x2Cu, 0, 0xFFFFFFFF);
  if (v4) {
    uint64_t v24 = 4294954516;
  }
  else {
    uint64_t v24 = 0;
  }
LABEL_57:
  int v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v33 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67109376;
    int v40 = v24;
    *(_WORD *)int v41 = 1024;
    *(_DWORD *)&v41[2] = v4;
    _os_log_impl(&dword_24680F000, v33, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetFocusNow. err=%d, res=0x%08X\n\n", buf, 0xEu);
  }
  return v24;
}

uint64_t CopySupplementalControlForAutoFocusAssistEnabled(uint64_t a1, void *a2, uint64_t a3)
{
  if (byte_26B11BAE9)
  {
    uint64_t result = 0;
    if (*(unsigned char *)(a3 + 4113)) {
      int v4 = (void *)MEMORY[0x263EFFB40];
    }
    else {
      int v4 = (void *)MEMORY[0x263EFFB38];
    }
    *a2 = *v4;
  }
  else
  {
    int v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl(&dword_24680F000, v5, OS_LOG_TYPE_DEFAULT, "CopySupplementalControlForAutoFocusAssistEnabled: disabled by defaults\n", v6, 2u);
    }
    return 4294954516;
  }
  return result;
}

uint64_t SetSupplementalControlForAutoFocusAssistEnabled(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a4 + 24) + 4384) + 96 * *(unsigned int *)(a2 + 132) + 16) != 1718186595) {
    return 4294954516;
  }
  if (!byte_26B11BAE9)
  {
    CFAllocatorRef v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFAllocatorRef v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFNumberRef v13 = 0;
      _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_DEFAULT, "SetSupplementalControlForAutoFocusAssistEnabled: disabled by defaults\n", v13, 2u);
    }
    return 4294954516;
  }
  uint64_t v5 = 4294954516;
  if (!cf) {
    return v5;
  }
  uint64_t v7 = a2 + 4112;
  if (!*(unsigned char *)(a2 + 4112)) {
    return v5;
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v10 = CFEqual(cf, (CFTypeRef)*MEMORY[0x263EFFB40]);
  if (*(unsigned char *)(v7 + 1) == (v10 != 0)) {
    return 0;
  }
  if (!v10)
  {
    *(unsigned char *)(v7 + 1) = 0;
    if (*(void *)(a2 + 136)) {
      H16ISP::H16ISPDevice::SetPearlControlMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), *(unsigned __int8 *)(v7 + 2), 0, byte_26B11BAEA);
    }
    return 0;
  }
  *(unsigned char *)(v7 + 1) = 1;
  if (*(unsigned char *)(v7 + 2)) {
    uint64_t v5 = ConfigurePearlForExclusiveFirmwareControl(a4, a2);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*(void *)(a2 + 136)) {
    H16ISP::H16ISPDevice::SetPearlControlMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), *(unsigned __int8 *)(v7 + 2), *(unsigned __int8 *)(v7 + 1), byte_26B11BAEA);
  }
  return v5;
}

uint64_t CopyGroupMasterConfigurationSupportedKeys(const __CFAllocator *a1, __CFArray **a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
  int v4 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F2EAC0]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EAB0]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EAA8]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EAB8]);
    CFArrayAppendValue(v4, (const void *)*MEMORY[0x263F2EAC8]);
  }
  *a2 = v4;
  return 0;
}

uint64_t SetInfraredLightSourceConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ProjectorTypeFromDictionary = GetProjectorTypeFromDictionary(a1, (int *)(a2 + 3788));
  if (!ProjectorTypeFromDictionary)
  {
    int v7 = *(_DWORD *)(a2 + 3788);
    *(unsigned char *)(a2 + 3786) = v7 != 0;
    if (*(void *)(a2 + 4048))
    {
      if (v7)
      {
        if ((H16ISP::H16ISPDevice::IsProjectorAllowed(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132)) & 1) == 0)
        {
          NotifyProjectorValidationError(a2, a4);
          return ProjectorTypeFromDictionary;
        }
        H16ISP::ProjectorManager::setProjectorType(*(H16ISP::ProjectorManager **)(a2 + 4048), *(_DWORD *)(a2 + 3788));
        int v8 = 1;
      }
      else
      {
        int v8 = 0;
      }
      EnableIRProjector(v8, a2, a4);
    }
  }
  return ProjectorTypeFromDictionary;
}

uint64_t SetSphereLoggingDataEnabled(const __CFBoolean *cf, uint64_t a2, int a3, uint64_t a4)
{
  return SetMetadataSectionEnabled(a4, a2, (int *)(a2 + 3868), cf);
}

uint64_t SetISPHallDataEnabled(const void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFBooleanGetTypeID()))
  {
    int v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
    uint64_t v6 = 0;
    if (!*(void *)(a2 + 136)) {
      *(unsigned char *)(a2 + 3673) = v5 != 0;
    }
  }
  else
  {
    uint64_t v6 = 4294954516;
  }
  int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v7 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = "True";
    if (!*(unsigned char *)(a2 + 3673)) {
      int v8 = "False";
    }
    int v10 = 136315394;
    CFAllocatorRef v11 = v8;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetMotionDataFromISPEnabled: %s (err=%d)\n\n", (uint8_t *)&v10, 0x12u);
  }
  return v6;
}

uint64_t CopyDCNUCVPixelBuffer(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v30 = 0;
  CFNumberRef v31 = &v30;
  uint64_t v32 = 0x2000000000;
  uint64_t v33 = 0;
  uint64_t v26 = 0;
  int v27 = &v26;
  uint64_t v28 = 0x2000000000;
  uint64_t v29 = 0;
  if (a2)
  {
    if (*(unsigned char *)(a3 + 57688))
    {
      CFTypeID v4 = *(NSObject **)(a3 + 4496);
      if (v4)
      {
        block[0] = MEMORY[0x263EF8330];
        block[1] = 0x40000000;
        block[2] = ___ZL21CopyDCNUCVPixelBufferPK13__CFAllocatorPvP19H16ISPCaptureStreamP18H16ISPCaptureGroupP19H16ISPCaptureDevice_block_invoke;
        block[3] = &unk_2651E8CF0;
        block[4] = &v26;
        void block[5] = &v30;
        void block[6] = a3;
        dispatch_sync(v4, block);
        int v5 = (__CVBuffer *)v31[3];
        if (v5)
        {
          CVBufferSetAttachment(v5, (CFStringRef)*MEMORY[0x263F2C558], (CFTypeRef)v27[3], kCVAttachmentMode_ShouldPropagate);
          CVBufferSetAttachment((CVBufferRef)v31[3], (CFStringRef)*MEMORY[0x263F2C628], @"/var/mobile/Library/ISP/CalData/DCNUPixbuf_0", kCVAttachmentMode_ShouldPropagate);
          CVBufferSetAttachment((CVBufferRef)v31[3], (CFStringRef)*MEMORY[0x263F2C620], @"/var/mobile/Library/ISP/CalData/DCNUMetadata_0", kCVAttachmentMode_ShouldPropagate);
          CFRelease((CFTypeRef)v27[3]);
          uint64_t v6 = 0;
LABEL_18:
          *a2 = v31[3];
          goto LABEL_19;
        }
        CFNumberRef v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v15 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          CopyDCNUCVPixelBuffer(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        CFNumberRef v23 = (const void *)v27[3];
        if (v23) {
          CFRelease(v23);
        }
      }
      else
      {
        int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v7 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          CopyDCNUCVPixelBuffer(v7, v8, v9, v10, v11, v12, v13, v14);
        }
      }
    }
    uint64_t v6 = 4294954513;
    goto LABEL_18;
  }
  uint64_t v6 = 4294954516;
LABEL_19:
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  return v6;
}

void sub_246825F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPDevice::ISP_CreateMultiCameraSession(uint64_t a1, void *inputStruct)
{
  mach_port_t v2 = *(_DWORD *)(a1 + 4424);
  if (v2) {
    return IOConnectCallStructMethod(v2, 0x44u, inputStruct, 0x34uLL, 0, 0);
  }
  else {
    return 3758097084;
  }
}

uint64_t CopyGroupMinSkippingRatio(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = *(_DWORD *)(a4 + 112);
  *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  return 0;
}

uint64_t SetGroupMinSkippingRatio(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  if (*(_DWORD *)(a3 + 112) == valuePtr) {
    return 0;
  }
  CFArrayRef v9 = *(const __CFArray **)(a3 + 104);
  if (v9)
  {
    if (GetNumberOfActiveChannels(v9))
    {
      uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        SetGroupMinSkippingRatio();
      }
      return 4294954516;
    }
    CFArrayRef v11 = *(const __CFArray **)(a3 + 104);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(a4 + 24) + 4384);
      if (CFArrayGetCount(v11))
      {
        unint64_t v13 = 0;
        char v14 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v13);
          FigCaptureStreamGetFigBaseObject();
          if (*(_DWORD *)(v12 + 96 * *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 132) + 16) == 1785950322) {
            char v14 = 1;
          }
          ++v13;
        }
        while (v13 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
        if (v14) {
          goto LABEL_28;
        }
      }
    }
  }
  CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), 0);
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v16 = *(unsigned __int16 *)(DerivedStorage + 132);
  if (*(void *)(DerivedStorage + 3888) && !*(unsigned char *)(DerivedStorage + 3908)) {
    v16 |= 0x80000000;
  }
  if (!H16ISP::H16ISPDevice::SetMinimumFrameSkippingRatio(*(H16ISP::H16ISPDevice **)(a4 + 24), v16, valuePtr))
  {
LABEL_28:
    uint64_t result = 0;
    *(_DWORD *)(a3 + 112) = valuePtr;
  }
  else
  {
    uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v17 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      SetGroupMinSkippingRatio();
    }
    return 4294954514;
  }
  return result;
}

uint64_t CopyGroupActiveStreams(uint64_t a1, CFArrayRef *a2, uint64_t a3, uint64_t a4)
{
  CFArrayRef v5 = *(const __CFArray **)(a4 + 104);
  if (v5) {
    CFArrayRef Copy = CFArrayCreateCopy(0, v5);
  }
  else {
    CFArrayRef Copy = 0;
  }
  *a2 = Copy;
  return 0;
}

uint64_t SetStreamMemoryPoolID(const __CFNumber *a1, uint64_t a2)
{
  int valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  *(_DWORD *)(a2 + 4044) = valuePtr;
  return 0;
}

uint64_t CopyFormatIndex(uint64_t a1, CFNumberRef *a2, uint64_t a3)
{
  *a2 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a3 + 48));
  return 0;
}

uint64_t H16ISP::H16ISPDevice::EnableRawPDPCorrection(H16ISP::H16ISPDevice *this, __int16 a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = -14847;
  __int16 v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetSynchronizedSensorRawOutputRetainedBufferCount(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t valuePtr = 0;
  int v24 = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v5 = CFGetTypeID(a1);
  if (v5 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, (char *)&valuePtr + 4);
  CFArrayRef v6 = *(const __CFArray **)(a3 + 104);
  if (!v6) {
    return 0;
  }
  if (!CFArrayGetCount(v6))
  {
LABEL_11:
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  CFIndex v7 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v7);
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    int v9 = HIDWORD(valuePtr);
    *(_DWORD *)(DerivedStorage + 4352) = HIDWORD(valuePtr);
    if (v9 < 1) {
      goto LABEL_11;
    }
    uint64_t v10 = DerivedStorage;
    if (!*(void *)(DerivedStorage + 136)) {
      goto LABEL_10;
    }
    uint64_t v11 = resizeStillMetaPool(DerivedStorage, 1, (int *)&valuePtr, &v24);
    if (v11) {
      break;
    }
    uint64_t v12 = resizeThumbnailRawPool(v10, 1, 0, &v24);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v22 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315906;
        int v27 = "SetSynchronizedSensorRawOutputRetainedBufferCount";
        __int16 v28 = 1024;
        int v29 = v13;
        __int16 v30 = 1024;
        int v31 = valuePtr;
        __int16 v32 = 1024;
        int v33 = v24;
        CFNumberRef v23 = "%s - Unable to modify thumbnail raw pool, err = %d, FWprimeCount= %d, clientRetainCount=%d\n";
        goto LABEL_30;
      }
      goto LABEL_12;
    }
LABEL_10:
    if (++v7 >= (unint64_t)CFArrayGetCount(*(CFArrayRef *)(a3 + 104))) {
      goto LABEL_11;
    }
  }
  uint64_t v13 = v11;
  uint64_t v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v22 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315906;
    int v27 = "SetSynchronizedSensorRawOutputRetainedBufferCount";
    __int16 v28 = 1024;
    int v29 = v13;
    __int16 v30 = 1024;
    int v31 = valuePtr;
    __int16 v32 = 1024;
    int v33 = v24;
    CFNumberRef v23 = "%s - Unable to modify still meta pool, err = %d, FWprimeCount= %d, clientRetainCount=%d\n";
LABEL_30:
    _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, 0x1Eu);
  }
LABEL_12:
  char v14 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(a3 + 136);
  if (v14)
  {
    if (*(unsigned char *)H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(v14))
    {
      uint64_t Pool = H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(*(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(a3 + 136));
      int v16 = HIDWORD(valuePtr) + *(_DWORD *)(Pool + 112);
      uint64_t v17 = (pthread_mutex_t *)H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(*(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(a3 + 136));
      int v18 = H16ISP::H16ISPFrameReceiverBufferPool::ModifyBufferCount(v17, v16);
      if (v18)
      {
        int v19 = v18;
        uint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v20 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315650;
          int v27 = "SetSynchronizedSensorRawOutputRetainedBufferCount";
          __int16 v28 = 1024;
          int v29 = v19;
          __int16 v30 = 1024;
          int v31 = v16;
          _os_log_impl(&dword_24680F000, v20, OS_LOG_TYPE_DEFAULT, "%s - unable to modify pool buffer count for shared raw pool, res=%d buffer count %d\n", buf, 0x18u);
        }
        return 4294954516;
      }
    }
  }
  return v13;
}

uint64_t SetVideoRecordingInProgress()
{
  return 0;
}

uint64_t SetSceneClassifierVersion(const void *a1, uint64_t a2)
{
  int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  if (*(void *)(a2 + 136))
  {
    if (*(_DWORD *)(a2 + 4120) == valuePtr)
    {
      return 0;
    }
    else
    {
      CFArrayRef v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFArrayRef v6 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        SetSceneClassifierVersion();
      }
      return 4294954612;
    }
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a2 + 4120) = valuePtr;
  }
  return result;
}

uint64_t Apply3AWindowSettings()
{
  return 0;
}

uint64_t SetAutoFocusHintNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 76)) {
    return 4294954608;
  }
  int v6 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v6 |= 0x80000000;
  }
  bzero(v7, 0xCuLL);
  __int16 v8 = -31725;
  int v9 = v9 & 0x7FFF0000 | v6;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v7, 0xCu, 0, 0xFFFFFFFF)) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t SetUseAuxRawPool(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  char v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  *(unsigned char *)(a2 + 4126) = v9;
  uint64_t v10 = *(H16ISP::H16ISPDevice **)(a4 + 24);
  int v11 = *(_DWORD *)(a2 + 132);

  return H16ISP::H16ISPDevice::EnableRawPDPCorrection(v10, v11, v9);
}

uint64_t ___ZN6H16ISP12H16ISPDevice21ISP_EnableSensorPowerEjbb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32) + 4504;
  notify_set_state(*(_DWORD *)(v2 + 16 * *(unsigned int *)(a1 + 48) + 12), *(void *)(a1 + 40));
  simd_float3 v3 = *(const char **)(v2 + 16 * *(unsigned int *)(a1 + 48));

  return notify_post(v3);
}

void ___ZN6H16ISP35H16ISPTimeOfFlightColorSynchronizer37TimeOfFlightColorSynchronizerInternal17handleAggregationEP17ADStreamSyncMatch_block_invoke(uint64_t a1, void *a2)
{
  id v13 = a2;
  simd_float3 v3 = [v13 data];
  [*(id *)(a1 + 32) addObject:v3];
  [v13 timestamp];
  if (v4 != 0.0)
  {
    [v13 timestamp];
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v5
                                                                + *(double *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                            + 24);
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }
  int v6 = [v13 metadata];
  CFTypeID v7 = v6;
  if (v6)
  {
    __int16 v8 = [v6 objectForKeyedSubscript:*MEMORY[0x263F2CFD8]];
    int v9 = [v8 intValue];

    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    int v11 = *(_DWORD *)(v10 + 24);
    if (!v11 || v11 > v9) {
      *(_DWORD *)(v10 + 24) = v9;
    }
  }
}

void sub_246826A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void H16ISP::TimeOfFlightColorInfieldCalibrationManager::handleMatch(H16ISP::TimeOfFlightColorInfieldCalibrationManager *this, __CVBuffer *a2, NSDictionary *a3, NSArray *a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  CFTypeID v7 = a3;
  __int16 v8 = a4;
  if (*(void *)this
    && *((unsigned int *)this + 16) <= (mach_absolute_time() - *((void *)this + 7))
                                     * *((unsigned int *)this + 12)
                                     / *((unsigned int *)this + 13)
                                     / 0xF4240)
  {
    if (*((unsigned char *)this + 108))
    {
      int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        os_log_t v10 = os_log_create("com.apple.isp", "general");
        int v11 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;

        int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "RGBJ-TofManager-Verbose: reached infield calibration handleMatch\n", buf, 2u);
      }
    }
    ++*((_DWORD *)this + 19);
    if (*((void *)this + 1))
    {
      if (objc_msgSend(MEMORY[0x263F26BE8], "isColorFrameValid:withMetadata:andPipelineParameters:", a2, v7))
      {
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a2, 0);
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
        double v15 = fmin((double)(HeightOfPlane * BytesPerRowOfPlane), 1000000.0);
        if ((unsigned __int16)(unint64_t)v15)
        {
          unsigned int v16 = 0;
          int v17 = 0xFFFF;
          do
          {
            unsigned int v18 = 128;
            do
            {
              if ((v18 & *BaseAddressOfPlane) != 0) {
                __int16 v19 = ~(_WORD)v17;
              }
              else {
                __int16 v19 = v17;
              }
              if (v19 < 0) {
                int v17 = (2 * v17) ^ 0x1021;
              }
              else {
                v17 *= 2;
              }
              BOOL v20 = v18 >= 2;
              v18 >>= 1;
            }
            while (v20);
            ++BaseAddressOfPlane;
            ++v16;
          }
          while (v16 < (unsigned __int16)(unint64_t)v15);
        }
        else
        {
          LOWORD(v17) = -1;
        }
        CVPixelBufferUnlockBaseAddress(a2, 1uLL);
        uint64_t v21 = v8;
        id v22 = objc_alloc_init(MEMORY[0x263EFF980]);
        int v45 = [*((id *)this + 5) dictionaryRepresentation];
        if ([(NSArray *)v21 count])
        {
          CFNumberRef v23 = [*((id *)this + 4) peridotCamera];
          int v46 = [v23 dictionaryRepresentation];
        }
        else
        {
          int v46 = 0;
        }
        for (unint64_t i = 0; ; ++i)
        {
          unint64_t v25 = [(NSArray *)v21 count];
          if (i >= v25) {
            break;
          }
          uint64_t v26 = [(NSArray *)v21 objectAtIndexedSubscript:i];
          int v27 = [v26 data];

          __int16 v28 = [v27 dictionaryRepresentation];
          [v22 addObject:v28];
        }
        int v29 = 1;
        if (v22 && v46 && v45)
        {
          if (*((unsigned char *)this + 108))
          {
            __int16 v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              os_log_t v31 = os_log_create("com.apple.isp", "general");
              __int16 v32 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v31;

              __int16 v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            }
            unint64_t v25 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
            if (v25)
            {
              *(_WORD *)int buf = 0;
              _os_log_impl(&dword_24680F000, v30, OS_LOG_TYPE_DEFAULT, "RGBJ-TofManager-Verbose: infield calibration sending command to demon (RunRgbj)\n", buf, 2u);
            }
            int v33 = *((unsigned __int8 *)this + 108);
          }
          else
          {
            int v33 = 0;
          }
          uint64_t v44 = *(void *)this;
          int v34 = *((_DWORD *)this + 6);
          int v35 = *((_DWORD *)this + 17);
          int FrameMode = H16ISP::JasperConfigManager::getFrameMode((H16ISP::JasperConfigManager *)v25);
          *(_OWORD *)&v43[4] = *(_OWORD *)((char *)this + 92);
          v43[0] = *((unsigned char *)this + 80);
          int v29 = H16ISP::H16ISPServicesRemote::RunRgbj(v44, (uint64_t)a2, (uint64_t)v7, (uint64_t)v22, (uint64_t)v45, (uint64_t)v46, 0, v33 != 0, v34, v35, v17, FrameMode, *(uint64_t *)v43, *(_OWORD *)&v43[4] >> 32, *(int *)&v43[16], *((_DWORD *)this + 18));
          if (v29 == 3)
          {
            if (*((unsigned char *)this + 108))
            {
              __int16 v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                os_log_t v38 = os_log_create("com.apple.isp", "general");
                int v39 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v38;

                __int16 v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              }
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)int buf = 0;
                _os_log_impl(&dword_24680F000, v37, OS_LOG_TYPE_DEFAULT, "RGBJ-TofManager-Verbose: infield calibration network is busy\n", buf, 2u);
              }
            }
            goto LABEL_57;
          }
        }
        *((void *)this + 7) = mach_absolute_time();
        if (v29 == 5)
        {
          *((unsigned char *)this + 80) = 1;
          *((_DWORD *)this + 16) = *((_DWORD *)this + 21);
          if (*((unsigned char *)this + 108))
          {
            int v40 = GetCameraUserspaceLogStream();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              int v41 = *((_DWORD *)this + 16);
              *(_DWORD *)int buf = 67109120;
              int v48 = v41;
              _os_log_impl(&dword_24680F000, v40, OS_LOG_TYPE_DEFAULT, "RGBJ-TofManager-Verbose: infield calibration setting interval HighToLow %dms\n", buf, 8u);
            }
            goto LABEL_56;
          }
        }
        else
        {
          if (v29 != 4)
          {
            if (v29 == 1) {
              H16ISP::TimeOfFlightColorInfieldCalibrationManager::deactivate(this);
            }
            goto LABEL_57;
          }
          *((unsigned char *)this + 80) = 0;
          *((_DWORD *)this + 16) = *((_DWORD *)this + 22);
          if (*((unsigned char *)this + 108))
          {
            int v40 = GetCameraUserspaceLogStream();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              int v42 = *((_DWORD *)this + 16);
              *(_DWORD *)int buf = 67109120;
              int v48 = v42;
              _os_log_impl(&dword_24680F000, v40, OS_LOG_TYPE_DEFAULT, "RGBJ-TofManager-Verbose: infield calibration setting interval LowToHigh %dms\n", buf, 8u);
            }
LABEL_56:
          }
        }
LABEL_57:
      }
    }
  }
}

void sub_246826FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPGraphFrameSyncNode::onMessageProcessing(H16ISP::H16ISPGraphFrameSyncNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  double v4 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  uint64_t v5 = 0;
  char v6 = 0;
  char v7 = 0;
  __int16 v8 = (char *)a2 + 80;
  do
  {
    if (*(_DWORD *)((char *)a2 + v5 + 100))
    {
      BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*((void *)this + 39), *(_DWORD *)((char *)a2 + v5 + 96), 1785950322);
      v7 |= isSensorType;
      v6 |= !isSensorType;
    }
    v5 += 312;
  }
  while (v5 != 936);
  if (v6 & 1 | ((v7 & 1) == 0))
  {
    uint64_t v10 = 0;
    for (unint64_t i = (char *)a2 + 112; ; i += 312)
    {
      uint64_t v12 = *(unsigned int *)&v8[312 * v10 + 20];
      if (v12) {
        break;
      }
LABEL_21:
      if (++v10 == 3)
      {
        pthread_mutex_unlock(v4);
        return 3758097130;
      }
    }
    uint64_t v13 = 0;
    while (!*((unsigned char *)this + v13 + 80) || *(_DWORD *)((char *)this + v13 + 84) != *(_DWORD *)&v8[312 * v10 + 16])
    {
      v13 += 72;
      if (v13 == 216) {
        goto LABEL_21;
      }
    }
    char v14 = i;
    do
    {
      if (*v14 == 8 || *v14 == 2) {
        operator new();
      }
      v14 += 4;
      --v12;
    }
    while (v12);
  }
  pthread_mutex_unlock(v4);
  return 0;
}

void sub_2468275F4(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1020C405A04CE29);
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPGraphFrameSyncNode::CheckForSynchronization(uint64_t a1, int a2)
{
  v32[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = mach_absolute_time();
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = 324;
  if (!a2) {
    uint64_t v9 = 320;
  }
  memset(v32, 0, 24);
  unsigned int v10 = *(_DWORD *)(a1 + v9);
  do
  {
    if (!*(unsigned char *)(a1 + v5 + 80)) {
      goto LABEL_13;
    }
    if (a2)
    {
      if (a2 != 1 || !*(void *)(a1 + v5 + 144)) {
        goto LABEL_13;
      }
      uint64_t v11 = a1 + v5 + 120;
    }
    else
    {
      if (!*(void *)(a1 + v5 + 112)) {
        goto LABEL_13;
      }
      uint64_t v11 = a1 + 72 * v6 + 88;
    }
    if (*(_DWORD *)(v11 + 8) == v10)
    {
      v32[v8++] = v11;
      int v7 = *(_DWORD *)(v11 + 12);
    }
LABEL_13:
    v5 += 72;
    ++v6;
  }
  while (v5 != 216);
  if (v8 && v7 == v8) {
    H16ISP::H16ISPGraphFrameSyncNode::AllocateAndSendGraphMessage((H16ISP::H16ISPFilterGraphMessage *)a1);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (a2) {
    unsigned int v14 = 75;
  }
  else {
    unsigned int v14 = 50;
  }
  while (2)
  {
    if (!*(unsigned char *)(a1 + v12 + 80)) {
      goto LABEL_40;
    }
    if (!a2)
    {
      if (!*(void *)(a1 + v12 + 112)) {
        goto LABEL_40;
      }
      uint64_t v15 = a1 + 72 * v13 + 88;
LABEL_27:
      if ((double)((v4 - *(void *)v15) * *(unsigned int *)(a1 + 296) / *(unsigned int *)(a1 + 300)) / 1000000.0 <= (double)v14)
      {
        if (*(_DWORD *)(v15 + 8) >= v10) {
          goto LABEL_40;
        }
        if (*(_DWORD *)(v15 + 12) >= 2u)
        {
          BOOL v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            BOOL v20 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v20;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            int v21 = *(_DWORD *)(*(void *)(v15 + 24) + 16);
            *(_DWORD *)int buf = 67109376;
            int v29 = v21;
            __int16 v30 = 1024;
            int v31 = a2;
            unsigned int v18 = v20;
            __int16 v19 = "H16ISPGraphFrameSyncNode::CheckForSynchronization - Newer frame on another channel detected, ejecting "
                  "without synchronization (channel=%d, frameCategory = %d)\n"
                  "\n";
            goto LABEL_38;
          }
        }
      }
      else
      {
        unsigned int v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          unsigned int v16 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v16;
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = *(_DWORD *)(*(void *)(v15 + 24) + 16);
          *(_DWORD *)int buf = 67109376;
          int v29 = v17;
          __int16 v30 = 1024;
          int v31 = a2;
          unsigned int v18 = v16;
          __int16 v19 = "H16ISPGraphFrameSyncNode::CheckForSynchronization - Ejecting expired frame without synchronization (chan"
                "nel=%d, frameCategory=%d)\n"
                "\n";
LABEL_38:
          _os_log_impl(&dword_24680F000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 0xEu);
        }
      }
      H16ISP::H16ISPGraphFrameSyncNode::AllocateAndSendGraphMessage((H16ISP::H16ISPFilterGraphMessage *)a1);
    }
    if (a2 == 1 && *(void *)(a1 + v12 + 144))
    {
      uint64_t v15 = a1 + v12 + 120;
      goto LABEL_27;
    }
LABEL_40:
    v12 += 72;
    ++v13;
    if (v12 != 216) {
      continue;
    }
    break;
  }
  uint64_t v22 = 0;
  int v23 = 0;
  do
  {
    uint64_t v24 = a1 + v22;
    if (*(unsigned char *)(a1 + v22 + 80))
    {
      if (*(void *)(v24 + 112)) {
        ++v23;
      }
      if (*(void *)(v24 + 144)) {
        ++v23;
      }
    }
    v22 += 72;
  }
  while (v22 != 216);
  if (v23)
  {
    if (!*(unsigned char *)(a1 + 328))
    {
      *(unsigned char *)(a1 + 328) = 1;
      unint64_t v25 = *(NSObject **)(a1 + 304);
      if (v25)
      {
        dispatch_time_t v26 = dispatch_time(0xFFFFFFFFFFFFFFFELL, 5000000);
        dispatch_source_set_timer(v25, v26, 0x4C4B40uLL, 0xF4240uLL);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 328))
  {
    int v27 = *(NSObject **)(a1 + 304);
    if (v27) {
      dispatch_source_set_timer(v27, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    *(unsigned char *)(a1 + 328) = 0;
  }
}

void H16ISP::H16ISPGraphFrameSyncNode::AllocateAndSendGraphMessage(H16ISP::H16ISPFilterGraphMessage *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  H16ISP::H16ISPFilterGraphMessage::CreateH16ISPFilterGraphMessage(a1);
}

uint64_t H16ISP::H16ISPJasperColorNode::EnqueueMessage(H16ISP::H16ISPJasperColorNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v4 = (H16ISP::H16ISPTimeOfFlightColorSynchronizer *)*((void *)this + 10);
  if (v4 && *((unsigned char *)v4 + 8)) {
    H16ISP::H16ISPTimeOfFlightColorSynchronizer::pushColorMessage(v4, a2);
  }
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = *((void *)this + 5);
  int v7 = (void *)(v5 + 8 * (*((void *)this + 7) >> 9));
  if (v6 == v5) {
    int v8 = 0;
  }
  else {
    int v8 = (uint64_t *)(*v7 + 8 * (*((void *)this + 7) & 0x1FFLL));
  }
  while (1)
  {
    if (v6 == v5)
    {
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v11 = *((void *)this + 8) + *((void *)this + 7);
      uint64_t v12 = *(void *)(v5 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF);
    }
    if (v8 == (uint64_t *)v12) {
      break;
    }
    uint64_t v9 = *v8++;
    (*(void (**)(uint64_t, H16ISP::H16ISPFilterGraphMessage *))(*(void *)v9 + 32))(v9, a2);
    if ((uint64_t *)((char *)v8 - *v7) == (uint64_t *)4096)
    {
      unsigned int v10 = (uint64_t *)v7[1];
      ++v7;
      int v8 = v10;
    }
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = *((void *)this + 5);
  }
  return 0;
}

void MyH16ISPFrameReceivedFilterGraphEntryProc(H16ISP::H16ISPFilterGraphMessage *a1)
{
}

void H16ISP::H16ISPFilterGraphMessage::CreateH16ISPFilterGraphMessage(H16ISP::H16ISPFilterGraphMessage *this)
{
}

void sub_246827F94(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10A0C40CAB968D5);
  _Unwind_Resume(a1);
}

H16ISP::H16ISPFilterGraphMessage *H16ISP::H16ISPFilterGraphMessage::H16ISPFilterGraphMessage(H16ISP::H16ISPFilterGraphMessage *this)
{
  *((void *)this + 127) = (char *)this + 1016;
  *((void *)this + 128) = (char *)this + 1016;
  *((void *)this + 129) = 0;
  *(_DWORD *)this = 1;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), 0);
  for (uint64_t i = 80; i != 1016; i += 312)
    bzero((char *)this + i, 0x138uLL);
  *((void *)this + 9) = 0;
  return this;
}

void sub_24682801C(_Unwind_Exception *a1)
{
  std::__list_imp<H16ISP::H16ISPFilterGraphNode *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPFilterGraphManager::EnqueueMessage(H16ISP::H16ISPFilterGraphManager *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = (void *)(v4 + 8 * (*((void *)this + 5) >> 9));
  if (v5 == v4) {
    int v7 = 0;
  }
  else {
    int v7 = (void *)(*v6 + 8 * (*((void *)this + 5) & 0x1FFLL));
  }
  for (uint64_t result = 3758097084; ; uint64_t result = 0)
  {
    if (v5 == v4)
    {
      uint64_t v10 = 0;
    }
    else
    {
      unint64_t v9 = *((void *)this + 6) + *((void *)this + 5);
      uint64_t v10 = *(void *)(v4 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF);
    }
    if (v7 == (void *)v10) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(void, H16ISP::H16ISPFilterGraphMessage *))(*(void *)*v7 + 32))(*v7, a2);
    if (result) {
      break;
    }
    if ((void *)((char *)++v7 - *v6) == (void *)4096)
    {
      unint64_t v11 = (void *)v6[1];
      ++v6;
      int v7 = v11;
    }
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = *((void *)this + 3);
  }
  return result;
}

uint64_t ___ZN6H16ISP21H16ISPFilterGraphNode14EnqueueMessageEPNS_24H16ISPFilterGraphMessageE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v2 + 64))(v2, *(void *)(a1 + 40)) != -536870166)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    uint64_t v4 = *(void *)(v2 + 40);
    uint64_t v5 = (void *)(v3 + 8 * (*(void *)(v2 + 56) >> 9));
    if (v4 == v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = (uint64_t *)(*v5 + 8 * (*(void *)(v2 + 56) & 0x1FFLL));
    }
    while (1)
    {
      if (v4 == v3)
      {
        uint64_t v10 = 0;
      }
      else
      {
        unint64_t v9 = *(void *)(v2 + 64) + *(void *)(v2 + 56);
        uint64_t v10 = *(void *)(v3 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF);
      }
      if (v6 == (uint64_t *)v10) {
        break;
      }
      uint64_t v7 = *v6++;
      (*(void (**)(uint64_t, void))(*(void *)v7 + 32))(v7, *(void *)(a1 + 40));
      if ((uint64_t *)((char *)v6 - *v5) == (uint64_t *)4096)
      {
        int v8 = (uint64_t *)v5[1];
        ++v5;
        uint64_t v6 = v8;
      }
      uint64_t v3 = *(void *)(v2 + 32);
      uint64_t v4 = *(void *)(v2 + 40);
    }
  }
  H16ISP::H16ISPFilterGraphMessage::Release(*(H16ISP::H16ISPFilterGraphMessage **)(a1 + 40));
  --*(_DWORD *)(v2 + 72);

  return kdebug_trace();
}

uint64_t H16ISP::H16ISPGraphNullNode::EnqueueMessage(H16ISP::H16ISPGraphNullNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  if (!*((unsigned char *)this + 16)) {
    return 3758097112;
  }
  uint64_t v4 = *((void *)this + 4);
  uint64_t v5 = *((void *)this + 5);
  uint64_t v6 = (void *)(v4 + 8 * (*((void *)this + 7) >> 9));
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (uint64_t *)(*v6 + 8 * (*((void *)this + 7) & 0x1FFLL));
  }
  while (1)
  {
    if (v5 == v4)
    {
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v11 = *((void *)this + 8) + *((void *)this + 7);
      uint64_t v12 = *(void *)(v4 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF);
    }
    if (v7 == (uint64_t *)v12) {
      break;
    }
    uint64_t v9 = *v7++;
    (*(void (**)(uint64_t, H16ISP::H16ISPFilterGraphMessage *))(*(void *)v9 + 32))(v9, a2);
    if ((uint64_t *)((char *)v7 - *v6) == (uint64_t *)4096)
    {
      uint64_t v10 = (uint64_t *)v6[1];
      ++v6;
      uint64_t v7 = v10;
    }
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *((void *)this + 5);
  }
  return 0;
}

uint64_t H16ISP::H16ISPFilterGraphMessage::Release(H16ISP::H16ISPFilterGraphMessage *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  if ((*(_DWORD *)this)-- == 1)
  {
    H16ISP::H16ISPFilterGraphMessage::~H16ISPFilterGraphMessage(this);
    JUMPOUT(0x24C53D6E0);
  }

  return pthread_mutex_unlock(v2);
}

uint64_t H16ISP::H16ISPFilterGraphNode::EnqueueMessage(H16ISP::H16ISPFilterGraphNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  if (!*((unsigned char *)this + 16)) {
    return 3758097112;
  }
  uint64_t v4 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  ++*(_DWORD *)a2;
  pthread_mutex_unlock(v4);
  unsigned int v5 = (*(uint64_t (**)(H16ISP::H16ISPFilterGraphNode *))(*(void *)this + 72))(this);
  if (v5)
  {
    int v6 = v5;
    if (*((_DWORD *)this + 18) >= v5)
    {
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFilterGraphNode::EnqueueMessage((uint64_t)this, v6, v9);
      }
      goto LABEL_11;
    }
  }
  uint64_t v7 = *((void *)this + 1);
  if (!v7)
  {
LABEL_11:
    H16ISP::H16ISPFilterGraphMessage::Release(a2);
    return 0;
  }
  ++*((_DWORD *)this + 18);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  _OWORD v10[2] = ___ZN6H16ISP21H16ISPFilterGraphNode14EnqueueMessageEPNS_24H16ISPFilterGraphMessageE_block_invoke;
  v10[3] = &__block_descriptor_tmp_3_1;
  unsigned __int8 v10[4] = this;
  v10[5] = a2;
  dispatch_async(v7, v10);
  return 0;
}

uint64_t H16ISP::H16ISPFilterGraphNode::getMessageQueueSizeLimit(H16ISP::H16ISPFilterGraphNode *this)
{
  return 0;
}

void H16ISP::H16ISPFilterGraphMessage::~H16ISPFilterGraphMessage(H16ISP::H16ISPFilterGraphMessage *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (CVPixelBufferRef *)((char *)this + 104);
  do
  {
    uint64_t v4 = (const void *)*((void *)this + 39 * v2 + 46);
    if (v4) {
      CFRelease(v4);
    }
    unsigned int v5 = (char *)this + 312 * v2;
    uint64_t v6 = *((void *)v5 + 47);
    if (v6)
    {
      uint64_t v7 = v5 + 376;
      MEMORY[0x24C53D6E0](v6, 0x1000C406DBD42B9);
      *uint64_t v7 = 0;
    }
    int v8 = (char *)this + 312 * v2;
    int v10 = *((_DWORD *)v8 + 25);
    uint64_t v9 = (unsigned int *)(v8 + 100);
    if (v10)
    {
      unint64_t v11 = 0;
      uint64_t v12 = v3;
      do
      {
        CVPixelBufferRelease(*v12);
        ++v11;
        v12 += 2;
      }
      while (v11 < *v9);
    }
    ++v2;
    v3 += 39;
  }
  while (v2 != 3);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
  std::__list_imp<H16ISP::H16ISPFilterGraphNode *>::clear((void *)this + 127);
}

void *std::__list_imp<H16ISP::H16ISPFilterGraphNode *>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPGraphExitNode::onMessageProcessing(H16ISP::H16ISPGraphExitNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (pthread_mutex_t *)((char *)a2 + 8);
  uint64_t v4 = (char *)a2 + 80;
  do
  {
    pthread_mutex_lock(v3);
    if (*(_DWORD *)&v4[312 * v2 + 20]) {
      operator new();
    }
    pthread_mutex_unlock(v3);
    ++v2;
  }
  while (v2 != 3);
  return 0;
}

uint64_t H16ISP::H16ISPPearlCalibrationNode_Remote::onMessageProcessing(H16ISP::H16ISPPearlCalibrationNode_Remote *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 14)) {
    goto LABEL_73;
  }
  int v4 = *((_DWORD *)this + 26);
  if (v4 == 3)
  {
    if (*((unsigned char *)this + 94))
    {
      unsigned int v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        unsigned int v5 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_24680F000, v5, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI): Checking if algorithm completed in daemon\n", buf, 2u);
      }
    }
    CFDictionaryRef theDict = 0;
    if (H16ISP::H16ISPServicesRemote::GetRgbIrReport(*((xpc_connection_t **)this + 14), &theDict))
    {
      if (*((unsigned char *)this + 94))
      {
        uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v6 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v6;
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPPearlCalibrationNode_Remote::onMessageProcessing();
        }
      }
      *((_DWORD *)this + 26) = 0;
      goto LABEL_15;
    }
    if (!theDict) {
      goto LABEL_15;
    }
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"DebugInfo");
    *((void *)this + 24) = Value;
    if (Value) {
      CFDictionaryRemoveValue(theDict, @"DebugInfo");
    }
    *((void *)this + 23) = theDict;
    if (*((unsigned char *)this + 94))
    {
      __int16 v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        __int16 v37 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v37;
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_24680F000, v37, OS_LOG_TYPE_DEFAULT, "Pearl Calibration (MI): algorithm has completed successfully in daemon\n", buf, 2u);
      }
    }
    *((_DWORD *)this + 26) = 4;
    if (!*((unsigned char *)this + 128)) {
      goto LABEL_15;
    }
    int v38 = *((_DWORD *)this + 38);
    int v39 = *((_DWORD *)this + 39) + 1;
    *((_DWORD *)this + 39) = v39;
    if (v38 == 2)
    {
      if (*((unsigned char *)this + 94))
      {
        int v51 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v51 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v51;
          int v39 = *((_DWORD *)this + 39);
        }
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          int v52 = *((_DWORD *)this + 43);
          *(_DWORD *)int buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v39;
          __int16 v77 = 1024;
          int v78 = v52;
          _os_log_impl(&dword_24680F000, v51, OS_LOG_TYPE_DEFAULT, "Pearl Calibration Low Cost Detector (%d/%d)\n", buf, 0xEu);
          int v39 = *((_DWORD *)this + 39);
        }
      }
      if (v39 < *((_DWORD *)this + 43)) {
        goto LABEL_113;
      }
      *((void *)this + 19) = 0;
    }
    else if (v38 == 1)
    {
      int v40 = CFDictionaryGetValue(theDict, @"execute");
      int v41 = CFDictionaryGetValue(theDict, @"deltaRotationX");
      int v42 = CFDictionaryGetValue(theDict, @"deltaRotationY");
      int v43 = CFDictionaryGetValue(theDict, @"deltaRotationZ");
      *(double *)int buf = 0.0;
      H16ISP::updateLargest((uint64_t)v41, (const __CFNumber *)buf, v44);
      H16ISP::updateLargest((uint64_t)v42, (const __CFNumber *)buf, v45);
      H16ISP::updateLargest((uint64_t)v43, (const __CFNumber *)buf, v46);
      double v47 = *(double *)buf;
      CFTypeID v48 = CFGetTypeID(v40);
      if (v48 == CFNumberGetTypeID())
      {
        *(_DWORD *)int buf = 0;
        if (!CFNumberGetValue((CFNumberRef)v40, kCFNumberIntType, buf) || *(int *)buf <= 0)
        {
LABEL_133:
          if (*((_DWORD *)this + 39) < *((_DWORD *)this + 40))
          {
            if (*((unsigned char *)this + 94))
            {
              CFTypeRef v64 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                CFTypeRef v64 = os_log_create("com.apple.isp", "general");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v64;
              }
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
              {
                int v65 = *((_DWORD *)this + 39);
                int v66 = *((_DWORD *)this + 40);
                *(_DWORD *)int buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v65;
                __int16 v77 = 1024;
                int v78 = v66;
                _os_log_impl(&dword_24680F000, v64, OS_LOG_TYPE_DEFAULT, "Pearl Calibration Low Cost Detector (%d/%d): No low std found. Will try again\n", buf, 0xEu);
              }
            }
LABEL_113:
            uint64_t v53 = mach_absolute_time();
LABEL_152:
            *((void *)this + 18) = v53;
            *((_DWORD *)this + 26) = 5;
            goto LABEL_15;
          }
          if (!*((unsigned char *)this + 94)) {
            goto LABEL_15;
          }
          int v67 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            int v67 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v67;
          }
          if (!os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_15;
          }
          int v68 = *((_DWORD *)this + 39);
          int v69 = *((_DWORD *)this + 40);
          *(_DWORD *)int buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v68;
          __int16 v77 = 1024;
          int v78 = v69;
          int v61 = "Pearl Calibration Low Cost Detector (%d/%d): No low std found. Won't try again\n";
          int v62 = v67;
          uint32_t v63 = 14;
          goto LABEL_145;
        }
      }
      else
      {
        CFTypeID v56 = CFGetTypeID(v40);
        if (v56 != CFBooleanGetTypeID() || !CFBooleanGetValue((CFBooleanRef)v40)) {
          goto LABEL_133;
        }
      }
      if (v47 >= (double)*((int *)this + 42))
      {
        if (*((unsigned char *)this + 94))
        {
          int v70 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            int v70 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v70;
          }
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            int v71 = *((_DWORD *)this + 39);
            int v72 = *((_DWORD *)this + 40);
            int v73 = *((_DWORD *)this + 42);
            int v74 = *((_DWORD *)this + 43);
            *(_DWORD *)int buf = 67110144;
            *(_DWORD *)&uint8_t buf[4] = v71;
            __int16 v77 = 1024;
            int v78 = v72;
            __int16 v79 = 2048;
            double v80 = v47;
            __int16 v81 = 1024;
            int v82 = v73;
            __int16 v83 = 1024;
            int v84 = v74;
            _os_log_impl(&dword_24680F000, v70, OS_LOG_TYPE_DEFAULT, "Pearl Calibration Low Cost Detector (%d/%d): Found low std. Max rotation (%4.2lf) over threshold (%d). Will run %d times\n", buf, 0x24u);
          }
        }
        *((void *)this + 19) = 2;
        uint64_t v53 = mach_absolute_time();
        goto LABEL_152;
      }
      if (!*((unsigned char *)this + 94)) {
        goto LABEL_15;
      }
      int v57 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        int v57 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v57;
      }
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      int v58 = *((_DWORD *)this + 39);
      int v59 = *((_DWORD *)this + 40);
      int v60 = *((_DWORD *)this + 42);
      *(_DWORD *)int buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v58;
      __int16 v77 = 1024;
      int v78 = v59;
      __int16 v79 = 2048;
      double v80 = v47;
      __int16 v81 = 1024;
      int v82 = v60;
      int v61 = "Pearl Calibration Low Cost Detector (%d/%d): Found low std. Max rotation (%4.2lf) under threshold (%d), Won't try again\n";
      int v62 = v57;
      uint32_t v63 = 30;
LABEL_145:
      _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_DEFAULT, v61, buf, v63);
    }
LABEL_15:
    int v4 = *((_DWORD *)this + 26);
  }
  if (v4 == 2 || v4 == 4) {
    goto LABEL_21;
  }
  if (v4 == 5 && *((unsigned char *)this + 128))
  {
    int v29 = *((_DWORD *)this + 38);
    if (v29 == 1)
    {
      if ((mach_absolute_time() - *((void *)this + 18))
         * *((unsigned int *)this + 34)
         / *((unsigned int *)this + 35)
         / 0xF4240 < *((int *)this + 41))
        return 0;
      int v29 = *((_DWORD *)this + 38);
    }
    if (v29 != 2
      || (mach_absolute_time() - *((void *)this + 18))
       * *((unsigned int *)this + 34)
       / *((unsigned int *)this + 35)
       / 0xF4240 >= *((int *)this + 44))
    {
LABEL_21:
      *((_WORD *)this + 46) = 1;
      pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
      uint64_t v8 = 0;
      unsigned __int16 v9 = 0;
      int v10 = 0;
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = (char *)a2 + 80;
      int v16 = *((unsigned __int16 *)this + 45);
      int v17 = *((unsigned __int16 *)this + 44);
      unsigned int v18 = (char *)a2 + 112;
      __int16 v19 = (char *)a2 + 104;
      unsigned __int16 v20 = -1;
      do
      {
        int v21 = *(_DWORD *)&v15[312 * v8 + 16];
        if (v21 == v16)
        {
          uint64_t v22 = *(unsigned int *)&v15[312 * v8 + 20];
          int v23 = v18;
          if (v22)
          {
            while (*v23)
            {
              v23 += 4;
              if (!--v22) {
                goto LABEL_28;
              }
            }
            unsigned int v14 = (__CVBuffer *)*((void *)v23 - 1);
          }
        }
LABEL_28:
        if (v21 == v17)
        {
          uint64_t v24 = *(unsigned int *)&v15[312 * v8 + 20];
          if (v24)
          {
            unint64_t v25 = v19;
            do
            {
              int v26 = *((_DWORD *)v25 + 2);
              if (v26 <= 1)
              {
                if (v26)
                {
                  if (v26 == 1) {
                    uint64_t v13 = *(__CVBuffer **)v25;
                  }
                }
                else
                {
                  unint64_t v11 = *(__CVBuffer **)v25;
                }
              }
              else
              {
                switch(v26)
                {
                  case 2:
                    int v10 = *(__CVBuffer **)v25;
                    break;
                  case 15:
                    if (!v12)
                    {
                      uint64_t v12 = *(__CVBuffer **)v25;
                      *((unsigned char *)this + 92) = 0;
                    }
                    break;
                  case 17:
                    uint64_t v12 = *(__CVBuffer **)v25;
                    *((unsigned char *)this + 92) = 1;
                    break;
                }
              }
              v25 += 16;
              --v24;
            }
            while (v24);
          }
          unsigned __int16 v20 = v9;
        }
        ++v8;
        ++v9;
        v18 += 312;
        v19 += 312;
      }
      while (v8 != 3);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
      int v27 = (CFStringRef *)MEMORY[0x263F2C558];
      if (v13)
      {
        CFTypeRef Attachment = (__CFDictionary *)CVBufferGetAttachment(v13, (CFStringRef)*MEMORY[0x263F2C558], 0);
        if (Attachment)
        {
LABEL_50:
          if (!Attachment && v11) {
            CFTypeRef Attachment = (__CFDictionary *)CVBufferGetAttachment(v11, *v27, 0);
          }
          if (*((_DWORD *)this + 26) == 4)
          {
            if (Attachment) {
              (*(void (**)(H16ISP::H16ISPPearlCalibrationNode_Remote *, __CFDictionary *))(*(void *)this + 80))(this, Attachment);
            }
            return 0;
          }
          if (!v12)
          {
            if (*((unsigned char *)this + 94))
            {
              uint64_t v49 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                uint64_t v49 = os_log_create("com.apple.isp", "general");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v49;
              }
              if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPPearlCalibrationNode_Remote::onMessageProcessing();
              }
            }
            return 0;
          }
          if (v10)
          {
            H16ISP::H16ISPFrameMetadata::H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)buf, v10, 1uLL);
            int shouldProcessByPearlMetadata = H16ISP::H16ISPPearlCalibrationNodeBase::shouldProcessByPearlMetadata(this, (const H16ISP::H16ISPFrameMetadata *)buf, a2, v20);
            H16ISP::H16ISPFrameMetadata::~H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)buf);
            if (!shouldProcessByPearlMetadata) {
              return 0;
            }
          }
          if (!v14)
          {
            if (*((unsigned char *)this + 94))
            {
              int v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                int v50 = os_log_create("com.apple.isp", "general");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v50;
              }
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPPearlCalibrationNode_Remote::onMessageProcessing();
              }
            }
            return 0;
          }
          CFTypeRef v31 = CVBufferGetAttachment(v14, *v27, 0);
          if (!Attachment)
          {
            if (*((unsigned char *)this + 94))
            {
              int v54 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                int v54 = os_log_create("com.apple.isp", "general");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v54;
              }
              if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPPearlCalibrationNode_Remote::onMessageProcessing();
              }
            }
            return 0;
          }
          CFTypeRef v32 = v31;
          if (!v31)
          {
            if (*((unsigned char *)this + 94))
            {
              int v55 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                int v55 = os_log_create("com.apple.isp", "general");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v55;
              }
              if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPPearlCalibrationNode_Remote::onMessageProcessing();
              }
            }
            return 0;
          }
          int v33 = (*(uint64_t (**)(H16ISP::H16ISPPearlCalibrationNode_Remote *, __CVBuffer *, __CVBuffer *, __CVBuffer *, CFTypeRef, __CFDictionary *))(*(void *)this + 88))(this, v14, v13, v12, v31, Attachment);
          if (v33 == 1) {
            return 0;
          }
          if (v33 != 2)
          {
            *((_DWORD *)this + 26) = 3;
            if (!(*(unsigned int (**)(H16ISP::H16ISPPearlCalibrationNode_Remote *, __CVBuffer *, __CVBuffer *, __CVBuffer *, __CVBuffer *, CFTypeRef, __CFDictionary *))(*(void *)this + 96))(this, v14, v13, v12, v10, v32, Attachment))
            {
              CFDictionarySetValue(Attachment, @"MutualInformation-TheFrame", (const void *)*MEMORY[0x263EFFB40]);
              return 0;
            }
          }
LABEL_73:
          *((_DWORD *)this + 26) = 0;
          return 0;
        }
      }
      else
      {
        if (*((unsigned char *)this + 121))
        {
          if (*((unsigned char *)this + 94))
          {
            int v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              int v35 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v35;
            }
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
              H16ISP::H16ISPPearlCalibrationNode_Remote::onMessageProcessing();
            }
          }
          return 0;
        }
        CFTypeRef Attachment = 0;
      }
      if (v12) {
        CFTypeRef Attachment = (__CFDictionary *)CVBufferGetAttachment(v12, *v27, 0);
      }
      goto LABEL_50;
    }
  }
  return 0;
}

void sub_246829500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  H16ISP::H16ISPFrameMetadata::~H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)va);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::pushColorMessage(H16ISP::H16ISPTimeOfFlightColorSynchronizer *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  int v41 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  uint64_t v3 = 0;
  int v4 = (char *)a2 + 80;
  CFStringRef v5 = (const __CFString *)*MEMORY[0x263F2C558];
  uint64_t v46 = *MEMORY[0x263F2D5B8];
  uint64_t v43 = *MEMORY[0x263F2D5C8];
  uint64_t v42 = *MEMORY[0x263F2C240];
  uint64_t v44 = *MEMORY[0x263F2D520];
  int v40 = (NSMutableDictionary *)*MEMORY[0x263F2D4B0];
  int v39 = (NSString *)*MEMORY[0x263F2D660];
  int v38 = (NSMutableDictionary *)*MEMORY[0x263F2D4A0];
  __int16 v37 = (NSString *)*MEMORY[0x263F2D630];
  uint64_t v6 = (char *)a2 + 112;
  uint64_t v36 = (NSMutableDictionary *)*MEMORY[0x263F2D490];
  int v35 = (NSString *)*MEMORY[0x263F2D178];
  int v45 = (char *)a2 + 80;
  do
  {
    uint64_t v7 = &v4[312 * v3];
    int v9 = *((_DWORD *)v7 + 5);
    uint64_t v8 = (unsigned int *)(v7 + 20);
    if (!v9) {
      goto LABEL_34;
    }
    unint64_t v10 = 0;
    unint64_t v11 = v6;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    char v15 = 0;
    CFTypeID v48 = v6;
    do
    {
      int v16 = *v11;
      if (*v11 == 7 || v16 == 1)
      {
        char v15 = 1;
      }
      else if (!v16)
      {
        unsigned int v14 = (__CVBuffer *)*((void *)v11 - 1);
        uint64_t v18 = CVBufferGetAttachment(v14, v5, 0);

        int v16 = *v11;
        uint64_t v12 = (void *)v18;
      }
      if (v16 == 10)
      {
        uint64_t v13 = (__CVBuffer *)*((void *)v11 - 1);
        if (!v12)
        {
          uint64_t v12 = CVBufferGetAttachment(*((CVBufferRef *)v11 - 1), v5, 0);
        }
      }
      ++v10;
      v11 += 4;
    }
    while (v10 < *v8);
    __int16 v19 = [v12 objectForKeyedSubscript:v46];
    int v4 = v45;
    char v20 = [v19 isEqual:&unk_26FAF77E8];

    if (!((*(unsigned char *)(*(void *)(*((void *)this + 3) + 8) + 225) == 0 || (v20 & 1) == 0) | v15 & 1))
    {
      int v21 = [v12 objectForKeyedSubscript:v43];
      uint64_t v22 = [v21 objectForKeyedSubscript:v42];
      int v23 = [v22 objectForKeyedSubscript:v44];
      int v24 = [v23 isEqual:&unk_26FAF77E8];

      if (v24) {
        [v22 setObject:&unk_26FAF7800 forKeyedSubscript:v44];
      }
    }
    if ((unint64_t)v14 | (unint64_t)v13
      && *(_DWORD *)&v45[312 * v3 + 16] == *((unsigned __int16 *)this + 16))
    {
      if (v14)
      {
        CFTypeRef Attachment = CVBufferGetAttachment(v14, v5, 0);
        if (Attachment)
        {
          DeepCFArrayRef Copy = (void *)H16ISP::dictionaryCreateDeepCopy(Attachment, v26);
LABEL_32:
          CVPixelBufferRetain(v14);
          int v33 = *((void *)this + 2);
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZN6H16ISP35H16ISPTimeOfFlightColorSynchronizer16pushColorMessageEPNS_24H16ISPFilterGraphMessageE_block_invoke;
          block[3] = &__block_descriptor_64_e5_v8__0l;
          block[4] = this;
          void block[5] = v13;
          void block[6] = v14;
          void block[7] = DeepCopy;
          dispatch_async(v33, block);
          goto LABEL_33;
        }
      }
      else
      {
        if (v13)
        {
          CFTypeRef v28 = CVBufferGetAttachment(v13, v5, 0);
          if (v28)
          {
            DeepCFArrayRef Copy = (id)H16ISP::dictionaryCreateDeepCopy(v28, v29);
            H16ISP::updateMetadataReplaceField((H16ISP *)DeepCopy, v40, v39, v30);
            H16ISP::updateMetadataReplaceField((H16ISP *)DeepCopy, v38, v37, v31);
            H16ISP::updateMetadataReplaceField((H16ISP *)DeepCopy, v36, v35, v32);
          }
          else
          {
            DeepCFArrayRef Copy = 0;
          }
          unsigned int v14 = v13;
          goto LABEL_32;
        }
        unsigned int v14 = 0;
      }
      DeepCFArrayRef Copy = 0;
      goto LABEL_32;
    }
LABEL_33:

    uint64_t v6 = v48;
LABEL_34:
    ++v3;
    v6 += 312;
  }
  while (v3 != 3);
  return pthread_mutex_unlock(v41);
}

void sub_2468298D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void H16ISP::updateMetadataReplaceField(H16ISP *this, NSMutableDictionary *a2, NSString *a3, NSString *a4)
{
  unint64_t v10 = this;
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  uint64_t v8 = [(H16ISP *)v10 objectForKeyedSubscript:v6];

  if (v8)
  {
    int v9 = [(H16ISP *)v10 objectForKeyedSubscript:v6];
    [(H16ISP *)v10 setObject:v9 forKeyedSubscript:v7];

    [(H16ISP *)v10 setObject:0 forKeyedSubscript:v6];
  }
}

void sub_2468299E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t AttachIntrinsicMatrix(__CVBuffer *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v25 = *(float64x2_t *)MEMORY[0x263F00148];
  float v24 = 1.0;
  objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x263F2D3F0]), "intValue");
  CVPixelBufferGetWidth(a1);
  CVPixelBufferGetHeight(a1);
  FigMotionComputeLensPositionScalingFactor();
  uint64_t v26 = 0;
  uint64_t v8 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x263F2D3D0]];
  if (!v8)
  {
    v28[0] = *(unsigned char *)(a5 + 2);
    *(void *)&v28[24] = *(void *)(a5 + 24);
    *(_OWORD *)&uint8_t v28[4] = *(_OWORD *)(a5 + 4);
    *(_DWORD *)&v28[20] = *(_DWORD *)(a5 + 20);
    if (*(unsigned char *)a5 || *(unsigned char *)(a5 + 1))
    {
      int GravityZ = FigMotionGetGravityZ();
      float v12 = *((float *)&v26 + 1);
      if (!GravityZ)
      {
        if (!FigMotionCalculateAdjustedLensPosition())
        {
LABEL_7:
          float v10 = *(float *)&v26;
          goto LABEL_8;
        }
        float v12 = *((float *)&v26 + 1);
      }
      double v21 = v12;
    }
    else
    {
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x263F2D3E0]), "floatValue");
      *(float *)&uint64_t v26 = v24 * (float)((float)(v20 * 1000.0) * *(float *)(a5 + 28));
      if (*(float *)&v26 != 0.0 || !FigMotionCalculateAdjustedLensPosition()) {
        goto LABEL_7;
      }
      double v21 = 0.0;
    }
    NSLog(&cfstr_FocalLengthCal.isa, *(void *)&v21, v24);
    goto LABEL_7;
  }
  [v8 floatValue];
  float v10 = v24 * (float)(v9 * *(float *)(a5 + 28));
LABEL_8:
  float v22 = v10;
  if (v10 == 0.0
    || (CFDictionaryRef v13 = (const __CFDictionary *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x263F2C560], 0)) == 0
    || (CFDictionaryRef v14 = v13,
        CMTimeMakeFromDictionary(&time, v13),
        CMTimeGetSeconds(&time),
        int v15 = FigMotionComputePrincipalPoint(),
        CFRelease(v14),
        v15))
  {
    NSLog(&cfstr_OpticalCenterC.isa, v22);
    return 3758097131;
  }
  else
  {
    *(float32x2_t *)&long long v16 = vcvt_f32_f64(v25);
    LODWORD(v17) = 0;
    *((float *)&v17 + 1) = v22;
    *((void *)&v16 + 1) = __PAIR64__(HIDWORD(v25.f64[1]), 1.0);
    long long v27 = LODWORD(v22);
    *(_OWORD *)CFTypeRef v28 = v17;
    *(_OWORD *)&v28[16] = v16;
    uint64_t v18 = (void *)[objc_alloc(MEMORY[0x263EFF8F8]) initWithBytes:&v27 length:48];
    CVBufferSetAttachment(a1, @"CameraIntrinsicMatrixPrivate", v18, kCVAttachmentMode_ShouldPropagate);

    return 0;
  }
}

CFPropertyListRef H16ISP::dictionaryCreateDeepCopy(CFPropertyListRef propertyList, const __CFDictionary *a2)
{
  return CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], propertyList, 2uLL);
}

uint64_t H16ISP::H16ISPJasperDepthNode::getMessageQueueSizeLimit(H16ISP::H16ISPJasperDepthNode *this)
{
  return *((unsigned int *)this + 58);
}

uint64_t H16ISP::H16ISPJasperDepthNode::onMessageProcessing(H16ISP::H16ISPJasperDepthNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v2 = *((void *)this + 28);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN6H16ISP21H16ISPJasperDepthNode19onMessageProcessingEPNS_24H16ISPFilterGraphMessageE_block_invoke;
  block[3] = &unk_2651F0308;
  block[4] = &v6;
  void block[5] = this;
  void block[6] = a2;
  dispatch_async_and_wait(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ActivatePointCloudOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 136))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 168);
    if (v4 < v5) {
      unsigned int v5 = 0;
    }
    if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v4 - v5) + 16), v13, v15))
    {
      uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v6 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        ActivatePointCloudOutputInFrameReceiver();
      }
    }
    else
    {
      if (*(unsigned char *)(*(void *)(a1 + 136) + 453)) {
        goto LABEL_11;
      }
      v11[10] = v13[10];
      v11[11] = v13[11];
      v11[12] = v13[12];
      int v12 = v14;
      v11[6] = v13[6];
      v11[7] = v13[7];
      v11[8] = v13[8];
      v11[9] = v13[9];
      _DWORD v11[2] = v13[2];
      v11[3] = v13[3];
      unsigned __int8 v11[4] = v13[4];
      v11[5] = v13[5];
      v11[0] = v13[0];
      v11[1] = v13[1];
      if (!AddRawPoolToFrameReceiver(a1, a2, (uint64_t)v11))
      {
LABEL_11:
        SetMetaDataOptionsOnFrameReceiver(a1, a2);
        uint64_t v7 = *(void **)(a1 + 4240);
        if (v7)
        {
          *(void *)float v10 = 0;
          if (!H16ISP::H16ISPFilterGraphManager::GetNode(v7, 11, (H16ISP::H16ISPFilterGraphNode **)v10))
          {
            H16ISP::H16ISPJasperDepthNode::setProcessingMode(*(uint64_t *)v10, 1);
            uint64_t v8 = *(const void **)(a1 + 3664);
            if (v8) {
              H16ISP::H16ISPJasperDepthNode::setBufferPool(*(uint64_t *)v10, v8);
            }
          }
        }
      }
      else
      {
        int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v9 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          ActivatePointCloudOutputInFrameReceiver();
        }
      }
    }
  }
}

uint64_t AddRawPoolToFrameReceiver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  unsigned __int8 v32 = 0;
  *(void *)CFTypeRef v31 = 0;
  unsigned __int8 v30 = 0;
  *(void *)CFDictionaryRef v29 = 0;
  unsigned int v5 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(a1 + 4336);
  if (!v5)
  {
    uint64_t v9 = *(void *)(a1 + 4344);
    float v10 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(a1 + 4456);
    if (!v10 || (unsigned int v5 = *v10) == 0)
    {
      if (!v9) {
        uint64_t v9 = *(void *)(a1 + 4360);
      }
      uint64_t RawBufferConfig = H16ISP::H16ISPDevice::GetRawBufferConfig(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), &v32, &v31[1], v31, &v30, &v29[1], v29);
      if (RawBufferConfig)
      {
        uint64_t v6 = RawBufferConfig;
        int v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v12 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          AddRawPoolToFrameReceiver();
        }
        return v6;
      }
      if (*(unsigned char *)(a1 + 752)) {
        goto LABEL_27;
      }
      if (!*(unsigned char *)(a1 + 952)
        && !*(unsigned char *)(a1 + 1152)
        && !*(unsigned char *)(a1 + 1352)
        && !*(unsigned char *)(a1 + 1552)
        && !*(unsigned char *)(a1 + 2080)
        && !*(unsigned char *)(a1 + 2280)
        && !*(unsigned char *)(a1 + 3608)
        && !doesDisabledTofRequireBuffers(a2, a1)
        && !*(unsigned char *)(a1 + 1680)
        && (!*(unsigned char *)(a1 + 1880) || !*(unsigned char *)(a1 + 3976)))
      {
        int v13 = 0;
LABEL_57:
        if (*(unsigned char *)(a1 + 8)
          && H16ISP::H16ISPDevice::isSensorType(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), 1785950322))
        {
          v13 += 4;
        }
        if (*(unsigned char *)(a1 + 4114)
          && H16ISP::H16ISPDevice::isSensorType(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), 1718186595))
        {
          v13 += 4;
        }
        int v14 = *(_DWORD *)(a1 + 132);
        if (gCaptureDeviceCFPrefs[44 * v14 + 203]) {
          int v15 = gCaptureDeviceCFPrefs[44 * v14 + 203];
        }
        else {
          int v15 = v13;
        }
        if (gCaptureDeviceCFPrefs[0] || *(unsigned char *)(a1 + 4126)) {
          uint64_t v16 = (int *)(a3 + 60);
        }
        else {
          uint64_t v16 = (int *)(a3 + 48);
        }
        int v17 = *(unsigned __int8 *)(a1 + 2080);
        int v18 = v32;
        int v19 = *v16;
        H16ISP::H16ISPDevice::GetPoolInfoExtended(*(H16ISP::H16ISPDevice **)(a2 + 24), v14, 3, &v27);
        int v20 = v15 + v17;
        if (*(unsigned char *)(a1 + 544) && (v28 - 2) >= 2 && v28 != 5)
        {
          double v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            double v21 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
          }
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            AddRawPoolToFrameReceiver();
          }
        }
        if (v9 && *(_WORD *)(a3 + 144)) {
          v32 += v30;
        }
        uint64_t v6 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 1, v19);
        float v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          float v22 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 67109632;
          int v34 = v20 + v18;
          __int16 v35 = 1024;
          int v36 = v32;
          __int16 v37 = 1024;
          int v38 = v6;
          _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_INFO, "AddRawPoolToFrameReceiver - RAW pool size=%d,prime=%d (res=0x%08X)\n\n", buf, 0x14u);
        }
        if (v6) {
          goto LABEL_84;
        }
        if (!v9 && *(_WORD *)(a3 + 144) && v30)
        {
          int v25 = v20 + v30;
          uint64_t v6 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 29, *(_DWORD *)(a3 + 160));
          uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v26 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v26;
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)int buf = 67109632;
            int v34 = v25;
            __int16 v35 = 1024;
            int v36 = v30;
            __int16 v37 = 1024;
            int v38 = v6;
            _os_log_impl(&dword_24680F000, v26, OS_LOG_TYPE_INFO, "AddRawPoolToFrameReceiver - SIFR-RAW pool size=%d,prime=%d (res=0x%08X)\n\n", buf, 0x14u);
          }
          if (v6)
          {
LABEL_84:
            int v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              int v23 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
            }
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
              AddRawPoolToFrameReceiver();
            }
          }
        }
        return v6;
      }
      if (*(unsigned char *)(a1 + 752)) {
LABEL_27:
      }
        int v13 = *(_DWORD *)(a1 + 744);
      else {
        int v13 = 0;
      }
      if (*(unsigned char *)(a1 + 952) && *(_DWORD *)(a1 + 944) > v13) {
        int v13 = *(_DWORD *)(a1 + 944);
      }
      if (*(unsigned char *)(a1 + 1152) && *(_DWORD *)(a1 + 1144) > v13) {
        int v13 = *(_DWORD *)(a1 + 1144);
      }
      if (*(unsigned char *)(a1 + 1352) && *(_DWORD *)(a1 + 1344) > v13) {
        int v13 = *(_DWORD *)(a1 + 1344);
      }
      if (*(unsigned char *)(a1 + 1552) && *(_DWORD *)(a1 + 1544) > v13) {
        int v13 = *(_DWORD *)(a1 + 1544);
      }
      if (*(unsigned char *)(a1 + 2080) && *(_DWORD *)(a1 + 2144) > v13) {
        int v13 = *(_DWORD *)(a1 + 2144);
      }
      if (*(unsigned char *)(a1 + 2280) && *(_DWORD *)(a1 + 2344) > v13) {
        int v13 = *(_DWORD *)(a1 + 2344);
      }
      if (*(unsigned char *)(a1 + 1680) && *(_DWORD *)(a1 + 1744) > v13) {
        int v13 = *(_DWORD *)(a1 + 1744);
      }
      if ((*(unsigned char *)(a1 + 3608) || doesDisabledTofRequireBuffers(a2, a1)) && *(_DWORD *)(a1 + 3636) > v13) {
        int v13 = *(_DWORD *)(a1 + 3636);
      }
      if (*(unsigned char *)(a1 + 1880) && *(unsigned char *)(a1 + 3976) && *(_DWORD *)(a1 + 1944) > v13) {
        int v13 = *(_DWORD *)(a1 + 1944);
      }
      goto LABEL_57;
    }
  }
  uint64_t v6 = H16ISP::H16ISPFrameReceiver::addSharedBufferPoolToFrameReceiver(*(H16ISP::H16ISPFrameReceiver **)(a1 + 136), v5);
  if (v6)
  {
    uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      AddRawPoolToFrameReceiver();
    }
  }
  return v6;
}

uint64_t H16ISP::H16ISPFrameReceiver::addSharedBufferPoolToFrameReceiver(H16ISP::H16ISPFrameReceiver *this, H16ISP::H16ISPFrameReceiverSharedBufferPool *a2)
{
  unsigned int v4 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  uint64_t v5 = *((void *)this + 87);
  uint64_t v6 = (void *)(v5 + 8 * (*((void *)this + 90) >> 9));
  uint64_t v7 = *((void *)this + 88);
  if (v7 == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(*v6 + 8 * (*((void *)this + 90) & 0x1FFLL));
  }
  while (1)
  {
    if (v7 == v5)
    {
      uint64_t v10 = 0;
    }
    else
    {
      unint64_t v9 = *((void *)this + 91) + *((void *)this + 90);
      uint64_t v10 = *(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF);
    }
    if (v8 == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v10) {
      operator new();
    }
    int v11 = *(_DWORD *)(H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(**v8) + 20);
    if (v11 == *(_DWORD *)(H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(a2) + 20)) {
      break;
    }
    if ((H16ISP::H16ISPFrameReceiverSharedBufferPool ***)((char *)++v8 - *v6) == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)4096)
    {
      int v12 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v6[1];
      ++v6;
      uint64_t v8 = v12;
    }
    uint64_t v5 = *((void *)this + 87);
    uint64_t v7 = *((void *)this + 88);
  }
  pthread_mutex_unlock(v4);
  return 3758097122;
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(H16ISP::H16ISPFrameReceiverSharedBufferPool *this)
{
  return *((void *)this + 9);
}

void std::deque<H16ISP::H16ISPFrameReceiverSharedPoolStruct *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<H16ISP::H16ISPFrameReceiverSharedPoolStruct *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<H16ISP::H16ISPFrameReceiverSharedPoolStruct *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<__CVBuffer **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      CFTypeID v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  CFTypeID v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<__CVBuffer **>::push_back(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)&v54, v27);
  }
  CFDictionaryRef v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24682ADD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPJasperDepthNode::setProcessingMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 136) = a2;
  return result;
}

void H16ISP::H16ISPJasperDepthNode::setBufferPool(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 144);
  if (v3 != cf)
  {
    if (v3) {
      CFRelease(v3);
    }
    *(void *)(a1 + 144) = cf;
    if (cf) {
      CFRetain(cf);
    }
  }
  uint64_t v5 = *(void **)(a1 + 104);
  if (v5)
  {
    if (*v5)
    {
      uint64_t v6 = *(NSObject **)(a1 + 224);
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 144);
        if (v7)
        {
          CFRetain(*(CFTypeRef *)(a1 + 144));
          uint64_t v6 = *(NSObject **)(a1 + 224);
        }
        v8[0] = MEMORY[0x263EF8330];
        v8[1] = 3221225472;
        v8[2] = ___ZN6H16ISP21H16ISPJasperDepthNode13setBufferPoolEP18__CVDataBufferPool_block_invoke;
        v8[3] = &__block_descriptor_48_e5_v8__0l;
        v8[4] = a1;
        v8[5] = v7;
        dispatch_async(v6, v8);
      }
    }
  }
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::RegisterCompletionCallback(uint64_t this, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(this + 80) = a2;
  *(void *)(this + 88) = a3;
  *(_DWORD *)(this + 96) = a4;
  return this;
}

uint64_t H16ISP::H16ISPDevice::GetRawBufferConfig(H16ISP::H16ISPDevice *this, __int16 a2, unsigned __int8 *a3, unsigned int *a4, unsigned int *a5, unsigned __int8 *a6, unsigned int *a7, unsigned int *a8)
{
  bzero(v19, 0x24uLL);
  __int16 v20 = 342;
  __int16 v21 = a2;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v19, 0x24u, 0, 0xFFFFFFFF);
  if (!result)
  {
    *a3 = v22;
    unsigned int v17 = v24;
    *a4 = v23;
    *a5 = v17;
    *a6 = v27;
    unsigned int v18 = v26;
    *a7 = v25;
    *a8 = v18;
  }
  return result;
}

void H16ISP::H16ISPDevice::GetPoolInfo(H16ISP::H16ISPDevice *a1, int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  H16ISP::H16ISPDevice::GetPoolInfoExtended(a1, a2, a3, &v8);
  if (!v7)
  {
    if (a4) {
      *a4 = WORD1(v8);
    }
    if (a5) {
      *a5 = DWORD2(v8);
    }
  }
}

uint64_t AddThumbnailRawPoolToFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v23 = 0;
  if (*(unsigned char *)(a1 + 1353) || *(unsigned char *)(a1 + 1553) || *(unsigned char *)(a1 + 2353))
  {
    H16ISP::H16ISPDevice::GetPoolInfoExtended(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 33, &v24);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v5 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        AddThumbnailRawPoolToFrameReceiver();
      }
    }
    else
    {
      if (v25 != 35)
      {
        uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v6 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          AddThumbnailRawPoolToFrameReceiver();
        }
      }
      if (HIWORD(v24) <= 3u) {
        int v7 = 3;
      }
      else {
        int v7 = HIWORD(v24);
      }
      int v8 = resizeThumbnailRawPool(a1, 0, HIWORD(v24), &v23);
      if (v8)
      {
        int v9 = v8;
        uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v10 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315394;
          unsigned __int8 v27 = "AddThumbnailRawPoolToFrameReceiver";
          __int16 v28 = 1024;
          int v29 = v9;
          _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "%s - resize thumbnail raw pool failed err=%d\n", buf, 0x12u);
        }
      }
      int v11 = v7 + v23 + 1;
      uint64_t v12 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 30, WORD1(v24));
      uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (v12)
      {
        uint64_t v4 = v12;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v13 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          AddThumbnailRawPoolToFrameReceiver();
        }
      }
      else
      {
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v13 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 136315906;
          unsigned __int8 v27 = "AddThumbnailRawPoolToFrameReceiver";
          __int16 v28 = 1024;
          int v29 = v11;
          __int16 v30 = 1024;
          int v31 = v7;
          __int16 v32 = 1024;
          int v33 = 0;
          _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_INFO, "%s - RAW pool size=%d,prime=%d (res=0x%08X)\n", buf, 0x1Eu);
        }
        return 0;
      }
    }
  }
  else
  {
    BOOL v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      BOOL v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    uint64_t v4 = 3758097084;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      AddThumbnailRawPoolToFrameReceiver(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return v4;
}

__n128 H16ISP::H16ISPDevice::GetPoolInfoExtended(H16ISP::H16ISPDevice *a1, int a2, int a3, _OWORD *a4)
{
  if (a3 <= 44)
  {
    bzero(v12, 0x5B0uLL);
    __int16 v13 = 278;
    int v14 = a2;
    unsigned int v15 = 45;
    if (!H16ISP::H16ISPDevice::ISP_SendCommand(a1, v12, 0x5B0u, 0, 0xFFFFFFFF))
    {
      uint64_t v9 = v15;
      if (v15)
      {
        for (uint64_t i = (unsigned __int16 *)&v16; *i != a3; i += 16)
        {
          if (!--v9) {
            return result;
          }
        }
        __n128 result = *(__n128 *)i;
        long long v11 = *((_OWORD *)i + 1);
        *a4 = *(_OWORD *)i;
        a4[1] = v11;
      }
    }
  }
  return result;
}

uint64_t resizeThumbnailRawPool(uint64_t a1, int a2, unsigned int FirmwarePrimeCount, int *a4)
{
  *a4 = 0;
  int v8 = *(unsigned __int8 *)(a1 + 1353);
  if (*(unsigned char *)(a1 + 1353))
  {
    int v8 = *(_DWORD *)(a1 + 1344);
    if (v8 < 1) {
      int v8 = 0;
    }
    else {
      *a4 = v8;
    }
  }
  if (*(unsigned char *)(a1 + 1553))
  {
    int v9 = *(_DWORD *)(a1 + 1544);
    if (v9 > v8)
    {
      *a4 = v9;
      int v8 = v9;
    }
  }
  if (*(unsigned char *)(a1 + 2353))
  {
    int v10 = *(_DWORD *)(a1 + 2344);
    if (v10 > v8)
    {
      *a4 = v10;
      int v8 = v10;
    }
  }
  if (*(void *)(a1 + 4336) || *(void *)(a1 + 4344))
  {
    int v11 = *(_DWORD *)(a1 + 4352);
    if (v11 > v8) {
      *a4 = v11;
    }
  }
  SensorRawComputeRetainedCountForCompanionPools(a1, a4);
  if (FirmwarePrimeCount)
  {
    if (FirmwarePrimeCount <= 3) {
      FirmwarePrimeCFIndex Count = 3;
    }
    if (!a2) {
      return 0;
    }
  }
  else
  {
    FirmwarePrimeCFIndex Count = H16ISP::H16ISPFrameReceiver::getFirmwarePrimeCount(*(void *)(a1 + 136), 30);
    if (!a2) {
      return 0;
    }
  }
  int v12 = *a4;
  if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 30)) {
    return 0;
  }
  uint64_t v13 = H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(*(void *)(a1 + 136), 30, FirmwarePrimeCount + 2 * v12 + 1);
  if (v13)
  {
    int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      resizeThumbnailRawPool();
    }
  }
  return v13;
}

uint64_t SetMaximumFrameRateNow(uint64_t result, H16ISP::H16ISPDevice *this)
{
  if (*(void *)(result + 136))
  {
    uint64_t v3 = result;
    H16ISP::H16ISPDevice::SetMaximumFrameRate(this, *(unsigned int *)(result + 132));
    __n128 result = *(void *)(v3 + 4240);
    if (result)
    {
      uint64_t v6 = 0;
      H16ISP::H16ISPFilterGraphManager::GetNode((void *)result, 9, &v6);
      if (v6) {
        H16ISP::H16ISPGraphVIOCameraControlNode::AdjustStreamFrameRate(v6, *(float *)(v3 + 52), v4);
      }
      __n128 result = H16ISP::H16ISPDevice::isSensorType((uint64_t)this, *(_DWORD *)(v3 + 132), 1785950322);
      if (result)
      {
        uint64_t v5 = 0;
        H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(v3 + 4240), 11, &v5);
        __n128 result = (uint64_t)v5;
        if (v5) {
          return H16ISP::H16ISPJasperDepthNode::setJasperFrameRateMax(v5, *(float *)(v3 + 52));
        }
      }
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPFilterGraphManager::GetNode(void *a1, int a2, H16ISP::H16ISPFilterGraphNode **a3)
{
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[9];
  int v8 = (void *)(v6 + 8 * (a1[11] >> 9));
  if (v7 == v6) {
    int v9 = 0;
  }
  else {
    int v9 = (H16ISP::H16ISPFilterGraphNode **)(*v8 + 8 * (a1[11] & 0x1FFLL));
  }
  uint64_t v10 = 3758097084;
  while (1)
  {
    if (v7 == v6)
    {
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v11 = a1[12] + a1[11];
      uint64_t v12 = *(void *)(v6 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF);
    }
    if (v9 == (H16ISP::H16ISPFilterGraphNode **)v12) {
      break;
    }
    uint64_t v13 = *v9;
    if (H16ISP::H16ISPFilterGraphNode::GetType(*v9) == a2)
    {
      uint64_t v10 = 0;
      *a3 = v13;
    }
    if ((H16ISP::H16ISPFilterGraphNode **)((char *)++v9 - *v8) == (H16ISP::H16ISPFilterGraphNode **)4096)
    {
      int v14 = (H16ISP::H16ISPFilterGraphNode **)v8[1];
      ++v8;
      int v9 = v14;
    }
    uint64_t v6 = a1[8];
    uint64_t v7 = a1[9];
  }
  return v10;
}

uint64_t H16ISP::H16ISPFilterGraphNode::GetType(H16ISP::H16ISPFilterGraphNode *this)
{
  return *((unsigned int *)this + 19);
}

uint64_t H16ISP::CreateH16ISPDeviceController(H16ISP *this, H16ISP::H16ISPDeviceController **a2, int (*a3)(H16ISP::H16ISPDeviceController *, void *, H16ISP::H16ISPDevice *), void *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  pthread_t v9 = 0;
  H16ISP::H16ISPThreadReadySyncer::H16ISPThreadReadySyncer((H16ISP::H16ISPThreadReadySyncer *)&v11);
  v10[0] = 0;
  v10[1] = a2;
  int v10[2] = a3;
  v10[3] = &v11;
  sched_param v8 = (sched_param)48;
  pthread_attr_init(&v12);
  pthread_attr_setschedparam(&v12, &v8);
  pthread_attr_setdetachstate(&v12, 1);
  pthread_create(&v9, &v12, (void *(__cdecl *)(void *))H16ISP::H16ISPServicesThreadStart, v10);
  pthread_attr_destroy(&v12);
  H16ISP::H16ISPThreadReadySyncer::wait(&v11);
  *(void *)this = v10[0];
  H16ISP::H16ISPThreadReadySyncer::~H16ISPThreadReadySyncer((H16ISP::H16ISPThreadReadySyncer *)&v11);
  return 0;
}

void sub_24682B8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t H16ISP::CreateH16ISPFrameReceiver(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  pthread_t v5 = 0;
  H16ISP::H16ISPThreadReadySyncer::H16ISPThreadReadySyncer((H16ISP::H16ISPThreadReadySyncer *)&v17);
  uint64_t v6 = 0;
  long long v7 = *(_OWORD *)(a1 + 40);
  long long v8 = *(_OWORD *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 8);
  long long v10 = *(_OWORD *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96);
  int v14 = &v17;
  int v15 = *(_DWORD *)(a1 + 104);
  long long v16 = *(_OWORD *)(a1 + 72);
  uint64_t v4 = 48;
  pthread_attr_init(&v18);
  pthread_attr_setschedparam(&v18, (const sched_param *)&v4);
  pthread_attr_setdetachstate(&v18, 2);
  pthread_create(&v5, &v18, (void *(__cdecl *)(void *))H16ISP::H16ISPFrameReceiverRTThreadStart, &v6);
  pthread_attr_destroy(&v18);
  H16ISP::H16ISPThreadReadySyncer::wait(&v17);
  **(void **)a1 = v6;
  if (v6) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = 3758097084;
  }
  H16ISP::H16ISPThreadReadySyncer::~H16ISPThreadReadySyncer((H16ISP::H16ISPThreadReadySyncer *)&v17);
  return v2;
}

void sub_24682BA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void H16ISP::H16ISPThreadReadySyncer::~H16ISPThreadReadySyncer(H16ISP::H16ISPThreadReadySyncer *this)
{
}

H16ISP::H16ISPThreadReadySyncer *H16ISP::H16ISPThreadReadySyncer::H16ISPThreadReadySyncer(H16ISP::H16ISPThreadReadySyncer *this)
{
  return this;
}

uint64_t H16ISP::H16ISPThreadReadySyncer::wait(pthread_mutex_t *this)
{
  return pthread_cond_wait((pthread_cond_t *)&this[1], this);
}

uint64_t ___ZN6H16ISP42CreateFixedPrioritySerialDispatchQueue_arcEPKcj_block_invoke(uint64_t a1)
{
  uint64_t v2 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  pthread_setname_np(v2);
  uint64_t v3 = pthread_self();
  uint64_t v4 = (H16ISP *)pthread_mach_thread_np(v3);
  uint64_t v5 = H16ISP::H16ISPSetMachThreadPriority(v4, *(_DWORD *)(a1 + 56));

  return MEMORY[0x270EDB018](v5);
}

uint64_t ___ZN6H16ISP38CreateFixedPrioritySerialDispatchQueueEPKcj_block_invoke(uint64_t a1)
{
  uint64_t v2 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  pthread_setname_np(v2);
  uint64_t v3 = pthread_self();
  uint64_t v4 = (H16ISP *)pthread_mach_thread_np(v3);
  uint64_t v5 = H16ISP::H16ISPSetMachThreadPriority(v4, *(_DWORD *)(a1 + 56));

  return MEMORY[0x270EDB018](v5);
}

uint64_t H16ISP::H16ISPSetMachThreadPriority(H16ISP *this, int a2)
{
  thread_act_t v3 = this;
  uint64_t v12 = *MEMORY[0x263EF8340];
  integer_t v8 = 0;
  pid_t v4 = getpid();
  if (proc_pidinfo(v4, 2, 0, buffer, 232) <= 0)
  {
    fwrite("H16ISPSetMachThreadPriority - proc_pidinfo() failed\n", 0x34uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    return 0xFFFFFFFFLL;
  }
  else
  {
    integer_t policy_info = a2 - v11;
    uint64_t v5 = thread_policy_set(v3, 3u, &policy_info, 1u);
    if (v5)
    {
      uint64_t v6 = v5;
      fprintf((FILE *)*MEMORY[0x263EF8348], "H16ISPSetMachThreadPriority - thread_policy_set(...,THREAD_PRECEDENCE_POLICY,...) failed, err=%d\n", v5);
    }
    else
    {
      uint64_t v6 = thread_policy_set(v3, 1u, &v8, 1u);
      if (v6) {
        fprintf((FILE *)*MEMORY[0x263EF8348], "H16ISPSetMachThreadPriority - thread_policy_set(...,THREAD_EXTENDED_POLICY,...) failed, err=%d\n", v6);
      }
    }
  }
  return v6;
}

void H16ISP::H16ISPDevice::H16ISPDevice(H16ISP::H16ISPDevice *this, H16ISP::H16ISPDeviceController *a2, int a3)
{
  uint64_t v4 = 0;
  *((unsigned char *)this + 4) = 0;
  *(_DWORD *)this = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 9) = a2;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  do
  {
    uint64_t v5 = (char *)this + v4;
    v5[144] = 0;
    *((void *)v5 + 17) = 0;
    *((_DWORD *)v5 + 32) = -1;
    v4 += 48;
  }
  while (v4 != 96);
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 4324) = 0u;
  *(_OWORD *)((char *)this + 434pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((unsigned char *)this + 4368) = 0;
  *((_DWORD *)this + 1093) = 0;
  *((void *)this + 551) = 0;
  *(void *)((char *)this + 442pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *((unsigned char *)this + 4496) = 0;
  *((_DWORD *)this + 1199) = 0;
  *(_OWORD *)((char *)this + 4748) = 0u;
  *(_OWORD *)((char *)this + 4764) = 0u;
  *(_OWORD *)((char *)this + 478pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((_DWORD *)this + 1104) = a3;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  uint64_t v6 = &byte_26B11BF25;
  byte_26B11BF50 = H16ISP::H16ISPGetCFPreferenceNumber(@"LsInterpMode", @"com.apple.coremedia", (const __CFString *)1);
  dword_26B11BF54 = H16ISP::H16ISPGetCFPreferenceNumber(@"LsBypassVerify", @"com.apple.coremedia", 0);
  byte_26B11BF58 = H16ISP::H16ISPGetCFPreferenceNumber(@"LsEnableGreenAvg", @"com.apple.coremedia", 0) != 0;
  byte_26B11BF59 = H16ISP::H16ISPGetCFPreferenceNumber(@"RadialGainEnable", @"com.apple.coremedia", (const __CFString *)1) != 0;
  byte_26B11BF5A = H16ISP::H16ISPGetCFPreferenceNumber(@"IgnoreUnitInfoPlist", @"com.apple.coremedia", 0) != 0;
  dword_26B11BF5C = H16ISP::H16ISPGetCFPreferenceNumber(@"UnitInfoNVMChannelMask", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
  uint64_t v7 = 0;
  byte_26B11BF60 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableExclaveDebug", @"com.apple.coremedia", 0) != 0;
  do
  {
    CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"LsAdjustEnableCam%d", v7);
    *(_DWORD *)(v6 - 5) = H16ISP::H16ISPGetCFPreferenceNumber(v8, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v8);
    CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"LsAdjustInvertCam%d", v7);
    *(v6 - 1) = H16ISP::H16ISPGetCFPreferenceNumber(v9, @"com.apple.coremedia", 0) != 0;
    CFRelease(v9);
    CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"LsIdealPctCam%d", v7);
    *uint64_t v6 = H16ISP::H16ISPGetCFPreferenceNumber(v10, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    v6 += 8;
    CFRelease(v10);
    ++v7;
  }
  while (v7 != 6);
  *((void *)this + 11) = 0;
  H16ISP::InitSupportedMetadataPropertiesDict((CFDictionaryRef *)this + 11, v11);
}

void sub_24682C138(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::H16ISPFrameReceiverBufferPool(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, long long *a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, unsigned int a15, CFTypeRef cf, __CVPixelBufferPool *pixelBufferPool, int a18)
{
  *(_DWORD *)&v36[24] = a14;
  *(void *)&v36[16] = a13;
  *(void *)&v36[8] = a12;
  *(void *)uint64_t v36 = a11;
  uint64_t v35 = *MEMORY[0x263EF8340];
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 24) = a5;
  uint64_t v19 = (void *)(a1 + 24);
  *(_DWORD *)(a1 + 28) = a6;
  uint64_t v20 = (void *)(a1 + 28);
  *(_DWORD *)(a1 + 32) = a7;
  uint64_t v21 = (void *)(a1 + 32);
  *(_DWORD *)(a1 + 36) = a8;
  unsigned __int8 v22 = (void *)(a1 + 36);
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a4;
  *(_DWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a9;
  long long v23 = *a10;
  *(_OWORD *)(a1 + 72) = a10[1];
  *(_OWORD *)(a1 + 56) = v23;
  *(unsigned char *)(a1 + 88) = v36[0];
  *(_OWORD *)(a1 + 92) = *(_OWORD *)&v36[4];
  *(void *)(a1 + 108) = *(void *)&v36[20];
  *(void *)(a1 + 116) = a15;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(a1 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a18;
  *(void *)(a1 + 328) = 0;
  pthread_mutexattr_init(&v34);
  pthread_mutexattr_settype(&v34, 2);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 256), &v34);
  pthread_mutexattr_destroy(&v34);
  if (pixelBufferPool)
  {
    *(void *)(a1 + 184) = CVPixelBufferPoolRetain(pixelBufferPool);
    *(_DWORD *)(a1 + 10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = CVPixelBufferPoolGetMinBufferCount();
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(pixelBufferPool);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F04240]);
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt32Type, v19);
    }
    CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F04118]);
    if (v26) {
      CFNumberGetValue(v26, kCFNumberSInt32Type, v20);
    }
    CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F040D8]);
    if (v27) {
      CFNumberGetValue(v27, kCFNumberSInt32Type, v21);
    }
    CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F040F8]);
    if (v28) {
      CFNumberGetValue(v28, kCFNumberSInt32Type, v22);
    }
  }
  unsigned int v29 = *(_DWORD *)(a1 + 100);
  if (*(_DWORD *)(a1 + 104) < v29) {
    *(_DWORD *)(a1 + 104) = v29;
  }
  CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(void *)(a1 + 168) = Mutable;
  if (Mutable)
  {
    CFNumberRef v32 = CFNumberCreate(v30, kCFNumberSInt32Type, (const void *)(a1 + 104));
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 168), (const void *)*MEMORY[0x263F041A8], v32);
    CFRelease(v32);
  }
  if (cf) {
    *(void *)(a1 + 176) = CFRetain(cf);
  }
  H16ISP::gFrameReceiverBufferPoolPrefs = H16ISP::H16ISPGetCFPreferenceNumber(@"VerboseBufferTracking", @"com.apple.coremedia", 0);
  H16ISP::gFrameReceiverBufferPoolPrefs = H16ISP::H16ISPGetCFPreferenceNumber(@"UseIOSurfaceWiringAssertion", @"com.apple.coremedia", (const __CFString *)1);
  *(unsigned char *)(a1 + 248) = H16ISP::gFrameReceiverBufferPoolPrefs != 0;
  *(void *)(a1 + 152) = CFArrayCreateMutable(v30, 0, MEMORY[0x263EFFF70]);
  return a1;
}

{
  uint64_t v18;

  return H16ISP::H16ISPFrameReceiverBufferPool::H16ISPFrameReceiverBufferPool(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, cf, pixelBufferPool, a18);
}

void sub_24682C434(_Unwind_Exception *a1)
{
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)(v1 + 192));
  _Unwind_Resume(a1);
}

const __CFString *H16ISP::H16ISPGetCFPreferenceNumber(const __CFString *this, const __CFString *a2, const __CFString *a3)
{
  CFStringRef v4 = (const __CFString *)CFPreferencesCopyValue(this, a2, (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  if (v4)
  {
    CFStringRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID())
    {
      IntCFNumberRef Value = CFStringGetIntValue(v5);
      if (!IntValue)
      {
        CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
        CStringPtr = CFStringGetCStringPtr(v5, SystemEncoding);
        if (!CStringPtr || (IntCFNumberRef Value = strtol(CStringPtr, 0, 0), !IntValue))
        {
          IntCFNumberRef Value = 1;
          if (CFStringCompare(v5, @"true", 1uLL))
          {
            IntCFNumberRef Value = 1;
            if (CFStringCompare(v5, @"yes", 1uLL))
            {
              if (CFStringCompare(v5, @"false", 1uLL) == kCFCompareEqualTo
                || CFStringCompare(v5, @"no", 1uLL) == kCFCompareEqualTo
                || (IntCFNumberRef Value = (uint64_t)a3, CFStringCompare(v5, @"0", 1uLL) == kCFCompareEqualTo))
              {
                IntCFNumberRef Value = 0;
              }
            }
          }
        }
      }
    }
    else
    {
      CFTypeID v10 = CFGetTypeID(v5);
      if (v10 == CFNumberGetTypeID())
      {
        unsigned int valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr)) {
          IntCFNumberRef Value = valuePtr;
        }
        else {
          IntCFNumberRef Value = a3;
        }
      }
      else
      {
        CFTypeID v11 = CFGetTypeID(v5);
        IntCFNumberRef Value = (uint64_t)a3;
        if (v11 == CFBooleanGetTypeID()) {
          IntCFNumberRef Value = CFEqual(v5, (CFTypeRef)*MEMORY[0x263EFFB40]);
        }
      }
    }
    CFRelease(v5);
    return (const __CFString *)IntValue;
  }
  return a3;
}

void H16ISP::InitSupportedMetadataPropertiesDict(CFDictionaryRef *this, __CFDictionary **a2)
{
  if (*this) {
    CFDictionaryGetCount(*this);
  }
  malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
  operator new();
}

H16ISP::SystemStatus *H16ISP::SystemStatus::SystemStatus(H16ISP::SystemStatus *this, const __CFString *a2)
{
  if (objc_opt_class())
  {
    if (!H16ISP::stMediaStatusDomainPublisher) {
      H16ISP::stMediaStatusDomainPublisher = (uint64_t)objc_alloc_init(MEMORY[0x263F7C2F0]);
    }
    *(void *)this = a2;
  }
  return this;
}

uint64_t H16ISP::H16ISPDevice::InitDeviceConfigsCache(H16ISP::H16ISPDevice *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
  }
  uint64_t v2 = &_os_log_internal;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315138;
    uint64_t v13 = "InitDeviceConfigsCache";
    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s - Initializing device configuration cache\n", (uint8_t *)&v12, 0xCu);
  }
  if (*((unsigned char *)this + 4))
  {
    *((unsigned char *)this + 4) = 0;
    *(_DWORD *)this = 0;
    thread_act_t v3 = (uint64_t *)((char *)this + 40);
    if (*((void *)this + 5))
    {
      if (!*((_DWORD *)this + 1187)) {
        goto LABEL_17;
      }
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *v3;
        uint64_t v7 = *(void *)(*v3 + v4 + 8);
        if (v7)
        {
          MEMORY[0x24C53D6C0](v7, 0x1000C80FB5347CALL);
          uint64_t v6 = *v3;
          *(void *)(*v3 + v4 + 8) = 0;
        }
        uint64_t v8 = *(void *)(v6 + v4 + 16);
        if (v8)
        {
          MEMORY[0x24C53D6C0](v8, 0x1000C803CB23258);
          uint64_t v6 = *v3;
          *(void *)(*v3 + v4 + 16) = 0;
        }
        uint64_t v9 = *(void *)(v6 + v4 + 24);
        if (v9)
        {
          MEMORY[0x24C53D6C0](v9, 0x1000C80FF89C88ELL);
          uint64_t v6 = *v3;
          *(void *)(*v3 + v4 + 24) = 0;
        }
        *(_DWORD *)(v6 + v4) = 0;
        bzero((void *)(v6 + v4 + 32), 0x190uLL);
        ++v5;
        v4 += 432;
      }
      while (v5 < *((unsigned int *)this + 1187));
      if (*v3) {
LABEL_17:
      }
        MEMORY[0x24C53D6C0]();
      uint64_t v10 = *((void *)this + 6);
      if (v10) {
        MEMORY[0x24C53D6C0](v10, 0x1000C804C8AD114);
      }
      uint64_t *v3 = 0;
      *((void *)this + 6) = 0;
    }
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == v2) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315138;
      uint64_t v13 = "InitDeviceConfigsCache";
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "%s - cache is already invalid - exiting\n", (uint8_t *)&v12, 0xCu);
    }
  }
  return 0;
}

uint64_t H16ISP::H16ISPDevice::EnableDeviceMessages(uint64_t this)
{
  if (!*(_DWORD *)(this + 4420)) {
    return IOServiceAddInterestNotification(*(IONotificationPortRef *)(*(void *)(this + 72) + 16), *(_DWORD *)(this + 4416), "IOGeneralInterest", (IOServiceInterestCallback)H16ISP::H16ISPDeviceServiceInterestCallback, (void *)this, (io_object_t *)(this + 4420));
  }
  return this;
}

void ___ZN6H16ISP35H16ISPTimeOfFlightColorSynchronizer15pushJasperCloudEP10__CVBufferPK14__CFDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 8)) {
    H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::processCloud(*(H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal **)(v2 + 24), *(__CVBuffer **)(a1 + 40), *(const __CFDictionary **)(a1 + 48));
  }
  CVBufferRelease(*(CVBufferRef *)(a1 + 40));
  thread_act_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
  }
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::processCloud(H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal *this, __CVBuffer *a2, const __CFDictionary *a3)
{
  if (*((unsigned char *)this + 336))
  {
    uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      os_log_t v7 = os_log_create("com.apple.isp", "general");
      uint64_t v8 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v7;

      uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.value) = 0;
      _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_DEFAULT, "RGBJ-TofSync-Verbose: processCloud\n", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v9 = [MEMORY[0x263F26C90] makeWithDataBuffer:a2];
  if (v9)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x263F2C560]);
    memset(&buf, 0, sizeof(buf));
    CMTimeMakeFromDictionary(&buf, Value);
    uint64_t v11 = 0;
    while (v11 < (int)[v9 length])
    {
      if (!*(unsigned __int8 *)([v9 bankIds] + v11++))
      {
        [*((id *)this + 29) reset];
        break;
      }
    }
    uint64_t v13 = (void *)*((void *)this + 29);
    CMTime time = buf;
    Float64 Seconds = CMTimeGetSeconds(&time);
    int v15 = (double *)MEMORY[0x263EF89A8];
    long long v16 = objc_msgSend(v13, "pushData:streamIndex:timestamp:pose:meta:", v9, 0, a3, Seconds, *MEMORY[0x263EF89A8], *(double *)(MEMORY[0x263EF89A8] + 16), *(double *)(MEMORY[0x263EF89A8] + 32), *(double *)(MEMORY[0x263EF89A8] + 48));
    if (v16)
    {
      if (*((unsigned char *)this + 336))
      {
        pthread_mutex_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          os_log_t v18 = os_log_create("com.apple.isp", "general");
          uint64_t v19 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;

          pthread_mutex_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long v23 = 0;
          _os_log_impl(&dword_24680F000, v17, OS_LOG_TYPE_DEFAULT, "RGBJ-TofSync-Verbose: processCloud found match\n", v23, 2u);
        }
      }
      H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::handleAggregation((uint64_t)this, v16);
    }
    uint64_t v20 = (void *)*((void *)this + 30);
    CMTime v22 = buf;
    uint64_t v21 = objc_msgSend(v20, "pushData:streamIndex:timestamp:pose:meta:", v9, 0, a3, CMTimeGetSeconds(&v22), *v15, v15[2], v15[4], v15[6]);

    if (v21) {
      H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::handleInfieldMatch(this, v21);
    }
  }
}

void sub_24683111C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN6H16ISP35H16ISPTimeOfFlightColorSynchronizer16pushColorMessageEPNS_24H16ISPFilterGraphMessageE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 8))
  {
    H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::logColorBuffer(*(H16ISP::TimeOfFlightAutoFocusAssistant ***)(v2 + 24), *(void *)(a1 + 40) != 0, *(__CVBuffer **)(a1 + 48), *(NSDictionary **)(a1 + 56));
    H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::processBuffer(*(H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal **)(v2 + 24), *(__CVBuffer **)(a1 + 48), *(const __CFDictionary **)(a1 + 56));
  }
  thread_act_t v3 = *(const void **)(a1 + 56);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(__CVBuffer **)(a1 + 48);

  CVPixelBufferRelease(v4);
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::logColorBuffer(H16ISP::TimeOfFlightAutoFocusAssistant **this, int a2, __CVBuffer *a3, NSDictionary *a4)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  os_log_t v7 = a4;
  if (*((unsigned char *)this + 336))
  {
    PreviewMasterCFNumberType Type = H16ISP::TimeOfFlightAutoFocusAssistant::getPreviewMasterType(this[1]);
    uint64_t v9 = "SuperWide";
    if (PreviewMasterType == 1919251564) {
      uint64_t v10 = "Tele";
    }
    else {
      uint64_t v10 = "Unknown";
    }
    if (PreviewMasterType != 1919251319) {
      uint64_t v9 = v10;
    }
    if (PreviewMasterType == 1919246706) {
      uint64_t v11 = "Wide";
    }
    else {
      uint64_t v11 = v9;
    }
    int v12 = [(NSDictionary *)v7 objectForKeyedSubscript:*MEMORY[0x263F2D660]];
    [v12 floatValue];
    float v14 = v13;

    [MEMORY[0x263F26C60] getFrameTransformsFromMetadataDictionary:v7 sensorCropRect:v35 rawSensorSize:v33 postReadCropRect:v34];
    int v15 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      os_log_t v16 = os_log_create("com.apple.isp", "general");
      pthread_mutex_t v17 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v16;

      int v15 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    os_log_t v18 = v15;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      CFNumberRef v32 = v11;
      uint64_t v20 = v35[0];
      uint64_t v19 = v35[1];
      if (a2) {
        uint64_t v21 = "secondary";
      }
      else {
        uint64_t v21 = "primary";
      }
      uint64_t v23 = v35[2];
      uint64_t v22 = v35[3];
      uint64_t v24 = v33[0];
      uint64_t v27 = v33[1];
      uint64_t v28 = v34[0];
      uint64_t v29 = v34[1];
      uint64_t v30 = v34[2];
      uint64_t v31 = v34[3];
      size_t Width = CVPixelBufferGetWidth(a3);
      size_t Height = CVPixelBufferGetHeight(a3);
      *(_DWORD *)CMTime buf = 136318722;
      __int16 v37 = v21;
      __int16 v38 = 2048;
      double v39 = v14;
      __int16 v40 = 2048;
      uint64_t v41 = v20;
      __int16 v42 = 2048;
      uint64_t v43 = v19;
      __int16 v44 = 2048;
      uint64_t v45 = v23;
      __int16 v46 = 2048;
      uint64_t v47 = v22;
      __int16 v48 = 2048;
      uint64_t v49 = v24;
      __int16 v50 = 2048;
      uint64_t v51 = v27;
      __int16 v52 = 2048;
      uint64_t v53 = v28;
      __int16 v54 = 2048;
      uint64_t v55 = v29;
      __int16 v56 = 2048;
      uint64_t v57 = v30;
      __int16 v58 = 2048;
      uint64_t v59 = v31;
      __int16 v60 = 2048;
      size_t v61 = Width;
      __int16 v62 = 2048;
      size_t v63 = Height;
      __int16 v64 = 2080;
      int v65 = v32;
      _os_log_impl(&dword_24680F000, v18, OS_LOG_TYPE_DEFAULT, "Got Wide buffer from %s scaler. Zoom factor: %f. Sensor crop: (%.1f, %.1f, %.1f, %.1f), readout size: (%.1f, %.1f), ISP crop: (%.1f, %.1f, %.1f, %.1f), image size: (%zu, %zu). Preview master: %s\n", buf, 0x98u);
    }
  }
}

void sub_246831464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::processBuffer(H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal *this, __CVBuffer *a2, const __CFDictionary *a3)
{
  if (a2)
  {
    if (a3)
    {
      if (H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::doesNeedColor((H16ISP::TimeOfFlightColorInfieldCalibrationManager **)this))
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x263F2C560]);
        if (Value)
        {
          CFDictionaryRef v7 = Value;
          if (*((unsigned char *)this + 336))
          {
            uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              os_log_t v9 = os_log_create("com.apple.isp", "general");
              uint64_t v10 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v9;

              uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            }
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.value) = 0;
              _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_DEFAULT, "RGBJ-TofSync-Verbose: process buffer\n", (uint8_t *)&buf, 2u);
            }
          }
          memset(&buf, 0, sizeof(buf));
          CMTimeMakeFromDictionary(&buf, v7);
          uint64_t v11 = (__CVBuffer *)*((void *)this + 34);
          if (v11) {
            CVPixelBufferRelease(v11);
          }
          int v12 = (const void *)*((void *)this + 35);
          if (v12) {
            CFRelease(v12);
          }
          *((void *)this + 34) = CVPixelBufferRetain(a2);
          *((void *)this + 35) = CFRetain(a3);
          *((unsigned char *)this + 296) = 0;
          CMTime time = buf;
          double Seconds = CMTimeGetSeconds(&time);
          double v14 = *((double *)this + 36);
          if (v14 != 0.0)
          {
            unsigned int v15 = (vabdd_f64(Seconds, v14) * 1000.0 * 0.5 + 1.0);
            if (*((_DWORD *)this + 62) != v15) {
              *((_DWORD *)this + 62) = v15;
            }
            if (*((_DWORD *)this + 64) != v15)
            {
              if (*((_DWORD *)this + 63) < v15) {
                unsigned int v15 = *((_DWORD *)this + 63);
              }
              *((_DWORD *)this + 64) = v15;
            }
          }
          *((double *)this + 36) = Seconds;
          if (*((void *)this + 38)) {
            H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::handleTofMatch(this);
          }
          os_log_t v16 = (void *)*((void *)this + 30);
          CMTime v18 = buf;
          pthread_mutex_t v17 = objc_msgSend(v16, "pushData:streamIndex:timestamp:pose:meta:", a2, 1, a3, CMTimeGetSeconds(&v18), *MEMORY[0x263EF89A8], *(double *)(MEMORY[0x263EF89A8] + 16), *(double *)(MEMORY[0x263EF89A8] + 32), *(double *)(MEMORY[0x263EF89A8] + 48));
          if (v17) {
            H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::handleInfieldMatch(this, v17);
          }
        }
      }
    }
  }
}

void sub_2468316B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::doesNeedColor(H16ISP::TimeOfFlightColorInfieldCalibrationManager **this)
{
  BOOL result = 0;
  if (*((unsigned char *)this + 216))
  {
    uint64_t v2 = *this;
    if (v2)
    {
      if (H16ISP::TimeOfFlightColorInfieldCalibrationManager::doesNeedColor(v2)) {
        return 1;
      }
    }
    thread_act_t v3 = this[1];
    if (v3)
    {
      if (*((unsigned char *)v3 + 224)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t H16ISP::TimeOfFlightColorInfieldCalibrationManager::doesNeedColor(H16ISP::TimeOfFlightColorInfieldCalibrationManager *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 108))
  {
    uint64_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      os_log_t v3 = os_log_create("com.apple.isp", "general");
      uint64_t v4 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v3;

      uint64_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *((unsigned __int8 *)this + 20);
      v7[0] = 67109120;
      v7[1] = v5;
      _os_log_impl(&dword_24680F000, v2, OS_LOG_TYPE_DEFAULT, "RGBJ-TofManager-Verbose: doesNeedColor returned %d\n", (uint8_t *)v7, 8u);
    }
  }
  return *((unsigned __int8 *)this + 20);
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::handleTofMatch(H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*((void *)this + 38))
  {
    uint64_t v2 = &_os_log_internal;
    if (*((unsigned char *)this + 336))
    {
      os_log_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        os_log_t v4 = os_log_create("com.apple.isp", "general");
        int v5 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v4;

        os_log_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v25[0]) = 0;
        _os_log_impl(&dword_24680F000, v3, OS_LOG_TYPE_DEFAULT, "RGBJ-TofSync-Verbose: reached main handleTofMatch with valid cloud\n", (uint8_t *)v25, 2u);
      }
    }
    uint64_t v6 = (__CVBuffer **)((char *)this + 272);
    if (*((unsigned char *)this + 296)
      || (float v13 = *v6) == 0
      || (*((unsigned char *)this + 296) = 1,
          (H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::updateColorCalibration((id *)this, v13, *((const __CFDictionary **)this + 35)) & 1) != 0))
    {
      CFDictionaryRef v7 = (H16ISP::TimeOfFlightAutoFocusAssistant *)*((void *)this + 1);
      if (v7)
      {
        if (*((unsigned char *)v7 + 25))
        {
          if (!*((unsigned char *)this + 328))
          {
            if (!*((unsigned char *)this + 216)
              || !*((unsigned char *)v7 + 224)
              || (double v8 = *((double *)this + 40),
                  double v9 = *((double *)this + 36),
                  H16ISP::TimeOfFlightAutoFocusAssistant::getPreviewMasterType(v7) != 1919251564)
              || !*v6
              || (double v11 = vabdd_f64(v8, v9), LODWORD(v10) = *((_DWORD *)this + 62), v12 = (double)v10 / 1000.0, v11 < v12)
              || (LODWORD(v12) = *((_DWORD *)this + 67), v11 > (double)*(unint64_t *)&v12 / 1000.0))
            {
              H16ISP::TimeOfFlightAutoFocusAssistant::handleMatch(*((void *)this + 1), *((void **)this + 38), *((void **)this + 39));
              *((unsigned char *)this + 328) = 1;
            }
          }
        }
      }
      if (*((unsigned char *)this + 336))
      {
        pthread_mutex_t v17 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v2)
        {
          os_log_t v18 = os_log_create("com.apple.isp", "general");
          uint64_t v19 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;

          pthread_mutex_t v17 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        }
        uint64_t v20 = v17;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = [*((id *)this + 35) objectForKeyedSubscript:*MEMORY[0x263F2CFD8]];
          int v22 = [v21 intValue];
          uint64_t v23 = [*((id *)this + 35) objectForKeyedSubscript:*MEMORY[0x263F2D500]];
          [v23 floatValue];
          v25[0] = 67109376;
          v25[1] = v22;
          __int16 v26 = 2048;
          double v27 = v24;
          _os_log_impl(&dword_24680F000, v20, OS_LOG_TYPE_DEFAULT, "RGBJ-TofSync-Verbose: main handleTofMatch fps = %d temperature = %f\n", (uint8_t *)v25, 0x12u);
        }
      }
    }
    else
    {
      if (*((unsigned char *)this + 336))
      {
        double v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v2)
        {
          os_log_t v15 = os_log_create("com.apple.isp", "general");
          os_log_t v16 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;

          double v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v25[0]) = 0;
          _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_DEFAULT, "RGBJ-TofSync-Verbose: main handleTofMatch updateColorCalibration failed\n", (uint8_t *)v25, 2u);
        }
      }
      CVPixelBufferRelease(*((CVPixelBufferRef *)this + 34));
      CFRelease(*((CFTypeRef *)this + 35));
      *uint64_t v6 = 0;
      *((void *)this + 35) = 0;
    }
  }
}

void sub_246831B4C(_Unwind_Exception *a1)
{
  os_log_t v4 = v1;

  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::updateColorCalibration(id *this, CVPixelBufferRef pixelBuffer, const __CFDictionary *a3)
{
  uint64_t v3 = 0;
  if (a3 && this[24])
  {
    size_t Width = CVPixelBufferGetWidth(pixelBuffer);
    size_t Height = CVPixelBufferGetHeight(pixelBuffer);
    CFDictionaryRef v9 = a3;
    unint64_t v10 = [(__CFDictionary *)v9 objectForKeyedSubscript:*MEMORY[0x263F2D630]];

    if (v10 && CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)v10, &rect))
    {
      double v11 = (double)Width / (double)Height;
      if (v11 > rect.size.width / rect.size.height * 0.998 && v11 < rect.size.width / rect.size.height * 1.002)
      {
        uint64_t v3 = objc_msgSend(this[24], "updateForFrameWithDimensions:metadataDictionary:", v9);
        goto LABEL_11;
      }
      NSLog(&cfstr_Jaspercolorsyn.isa, (double)Width, (double)Height, *(void *)&rect.size.width, *(void *)&rect.size.height);
    }
    uint64_t v3 = 0;
LABEL_11:
  }
  return v3;
}

void sub_246831CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CopyMaxZoomFactor(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)double v12 = 0;
  if (H16ISP::H16ISPDevice::GetZoomFactorLimits(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v12[1], v12))
  {
    CFNumberRef v7 = 0;
    uint64_t v8 = 4294954513;
  }
  else
  {
    LOWORD(v6) = v12[1];
    float v9 = (double)v6 * 0.0009765625;
    float valuePtr = v9;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    uint64_t v8 = 0;
  }
  *a2 = v7;
  return v8;
}

uint64_t H16ISP::H16ISPDevice::GetZoomFactorLimits(H16ISP::H16ISPDevice *this, int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  bzero(v9, 0x10uLL);
  __int16 v10 = 2063;
  int v11 = a2;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x10u, 0, 0xFFFFFFFF);
  if (!result)
  {
    *a3 = v12;
    *a4 = v13;
  }
  return result;
}

H16ISP::H16ISPFrameReceiver *SetMinimumFrameRateNow(uint64_t a1, H16ISP::H16ISPDevice *a2)
{
  uint64_t result = *(H16ISP::H16ISPFrameReceiver **)(a1 + 136);
  if (result)
  {
    float v5 = *(float *)(a1 + 56);
    double v6 = 5.0;
    if (v5 > 2.0) {
      double v6 = 3.0;
    }
    BOOL v7 = v5 <= 3.0;
    double v8 = 2.0;
    if (v7) {
      double v8 = v6;
    }
    H16ISP::H16ISPFrameReceiver::SetFrameDoneTimeoutDuration(result, v8);
    uint64_t v9 = *(unsigned int *)(a1 + 132);
    return (H16ISP::H16ISPFrameReceiver *)H16ISP::H16ISPDevice::SetMinimumFrameRate(a2, v9);
  }
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiver::SetFrameDoneTimeoutDuration(H16ISP::H16ISPFrameReceiver *this, double a2)
{
  if (a2 < 2.0) {
    a2 = 2.0;
  }
  *((double *)this + 114) = a2;
  H16ISP::H16ISPFrameReceiver::tickleNoDataTimer(this);
  return 0;
}

uint64_t SetROIForCameraControls(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  *(void *)int v11 = 0;
  *(void *)unsigned __int16 v12 = 0;
  unsigned int v10 = 0;
  if (H16ISPGetRectParamsFromDict((const __CFDictionary *)a1, &v12[2], v12, &v11[2], v11, &v10, 0)) {
    return 4294954516;
  }
  int v9 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v9 |= 0x80000000;
  }
  if (H16ISP::H16ISPDevice::SetCameraControlROI(*(H16ISP::H16ISPDevice **)(a4 + 24), v9, v12[2], v12[0], v11[2], v11[0]))return 4294954516; {
  else
  }
    return 0;
}

uint64_t H16ISP::H16ISPDevice::SetCameraControlROI(H16ISP::H16ISPDevice *this, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  bzero(v13, 0x14uLL);
  __int16 v14 = 2069;
  int v15 = a2;
  __int16 v16 = a3;
  __int16 v17 = a4;
  __int16 v18 = a5;
  __int16 v19 = a6;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v13, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t SetAFWindowParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v82[124] = *MEMORY[0x263EF8340];
  long long v67 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  *(_OWORD *)values = 0u;
  if (!a1)
  {
    float v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      float v24 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      SetAFWindowParams(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
  {
    if (v7 == CFArrayGetTypeID())
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
      if ((unint64_t)(Count - 17) > 0xFFFFFFFFFFFFFFEFLL)
      {
        v83.locatiouint64_t n = 0;
        v83.length = Count;
        CFArrayGetValues((CFArrayRef)a1, v83, (const void **)values);
        goto LABEL_4;
      }
      CFNumberRef v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v32 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v32;
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        SetAFWindowParams();
      }
    }
    else
    {
      int v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v33 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        SetAFWindowParams(v33, v34, v35, v36, v37, v38, v39, v40);
      }
    }
    return 4294954516;
  }
  values[0] = (void *)a1;
  CFIndex Count = 1;
LABEL_4:
  int v9 = *(unsigned __int16 *)(a2 + 132);
  uint64_t v50 = a4;
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v9 |= 0x80000000;
  }
  int v49 = v9;
  uint64_t v10 = 0;
  unsigned __int16 valuePtr = 0;
  CFStringRef key = (void *)*MEMORY[0x263F2C488];
  CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x263EFFB38];
  uint64_t v51 = (void *)*MEMORY[0x263F2C378];
  int v11 = v82;
  unsigned __int16 v12 = -1;
  unsigned __int16 v52 = -1;
  do
  {
    int v58 = 0;
    *(void *)__int16 v56 = 0;
    uint64_t v57 = 0;
    CFTypeID v13 = CFGetTypeID(values[v10]);
    if (v13 != CFDictionaryGetTypeID())
    {
      __int16 v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        __int16 v42 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v42;
      }
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        SetAFWindowParams();
      }
      return 4294954514;
    }
    if (H16ISPGetRectParamsFromDict((const __CFDictionary *)values[v10], &v58, (char *)&v57 + 4, &v57, &v56[1], v56, 1u))
    {
      uint64_t v43 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v43 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v43;
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        SetAFWindowParams();
      }
      return 4294954514;
    }
    CFIndex v14 = Count;
    unsigned __int16 v15 = WORD2(v57);
    unsigned __int16 v16 = v58;
    *(v11 - 2) = v58;
    *(v11 - 1) = v15;
    unsigned __int16 v17 = v56[1];
    unsigned __int16 v18 = v57;
    *int v11 = v57;
    v11[1] = v17;
    BOOL v19 = LOBYTE(v56[0]) == 0;
    int v54 = LOBYTE(v56[0]);
    v80[v10] = v56[0];
    if (v19) {
      LOWORD(v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    else {
      int v20 = 1 << v10;
    }
    uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v21 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)CMTime buf = 136316674;
      int v69 = "SetAFWindowParamsCombined";
      __int16 v70 = 2048;
      *(void *)int v71 = v10;
      *(_WORD *)&v71[8] = 1024;
      *(_DWORD *)int v72 = v16;
      *(_WORD *)&v72[4] = 1024;
      int v73 = v15;
      __int16 v74 = 1024;
      int v75 = v18;
      __int16 v76 = 1024;
      int v77 = v17;
      __int16 v78 = 1024;
      int v79 = v54;
      _os_log_debug_impl(&dword_24680F000, v21, OS_LOG_TYPE_DEBUG, "%s - AF window %ld hStart=%hu, vStart=%hu, width=%hu, height=%hu, weight=%hhu\n", buf, 0x34u);
    }
    CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)values[v10], key);
    if (Value && !CFEqual(Value, cf2))
    {
      CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)values[v10], v51);
      if (!v23)
      {
        __int16 v48 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          __int16 v48 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v48;
        }
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
          SetAFWindowParams();
        }
        return 4294954514;
      }
      CFNumberGetValue(v23, kCFNumberSInt16Type, &valuePtr);
      unsigned __int16 v52 = v10;
    }
    v12 ^= v20;
    ++v10;
    v11 += 4;
    CFIndex Count = v14;
  }
  while (v14 != v10);
  __int16 v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    __int16 v44 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
  }
  BOOL v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG);
  __int16 v46 = valuePtr;
  if (v45)
  {
    *(_DWORD *)CMTime buf = 136315906;
    int v69 = "SetAFWindowParamsCombined";
    __int16 v70 = 1024;
    *(_DWORD *)int v71 = v52;
    *(_WORD *)&v71[4] = 1024;
    *(_DWORD *)&v71[6] = valuePtr;
    *(_WORD *)int v72 = 1024;
    *(_DWORD *)&v72[2] = v12;
    _os_log_debug_impl(&dword_24680F000, v44, OS_LOG_TYPE_DEBUG, "%s - FD AF window ID=%hu scale=%hu mask=0x%hx\n", buf, 0x1Eu);
    __int16 v46 = valuePtr;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetCombinedAFWindow(*(H16ISP::H16ISPDevice **)(v50 + 24), v49, v52, v46, (unsigned __int16)v14, __src, v80, v12);
  if (result)
  {
    uint64_t v47 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v47 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v47;
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
      SetAFWindowParams();
    }
    return 4294954514;
  }
  return result;
}

uint64_t H16ISPGetRectParamsFromDict(const __CFDictionary *a1, void *a2, void *a3, void *a4, void *a5, unsigned int *a6, unsigned int a7)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2C490]);
  if (!Value) {
    return 4294954516;
  }
  CFNumberRef v15 = Value;
  CFNumberType v16 = CFNumberIsFloatType(Value) ? kCFNumberFloatType : kCFNumberIntType;
  CFNumberGetValue(v15, v16, a2);
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2C4C0]);
  if (!v17) {
    return 4294954516;
  }
  CFNumberRef v18 = v17;
  CFNumberType v19 = CFNumberIsFloatType(v17) ? kCFNumberFloatType : kCFNumberIntType;
  CFNumberGetValue(v18, v19, a3);
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2C4D0]);
  if (!v20) {
    return 4294954516;
  }
  CFNumberRef v21 = v20;
  CFNumberType v22 = CFNumberIsFloatType(v20) ? kCFNumberFloatType : kCFNumberIntType;
  CFNumberGetValue(v21, v22, a4);
  CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2C498]);
  if (!v23) {
    return 4294954516;
  }
  CFNumberRef v24 = v23;
  if (CFNumberIsFloatType(v23)) {
    CFNumberType v25 = kCFNumberFloatType;
  }
  else {
    CFNumberType v25 = kCFNumberIntType;
  }
  CFNumberGetValue(v24, v25, a5);
  if (!a6) {
    return 0;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x263F2C4C8]);
  if (result)
  {
    CFNumberGetValue((CFNumberRef)result, kCFNumberIntType, a6);
    return 0;
  }
  *a6 = a7;
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetCombinedAFWindow(H16ISP::H16ISPDevice *a1, int a2, __int16 a3, __int16 a4, unsigned int a5, void *__src, const void *a7, __int16 a8)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  __int16 v18 = 0;
  long long v17 = 0u;
  uint64_t v12 = 0x841B00000000;
  memset(v16, 0, sizeof(v16));
  int v13 = a2;
  __int16 v14 = a3;
  __int16 v15 = a4;
  LOWORD(v17) = a5;
  size_t v10 = a5;
  __int16 v19 = a8;
  memcpy(v16, __src, 8 * a5);
  memcpy((char *)&v17 + 2, a7, v10);
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v12, 0xA4u, 0, 0xFFFFFFFF);
}

uint64_t ___ZN6H16ISP12H16ISPDevice15SetCameraConfigEjjbjj9sCIspRectbjjS1__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32) + 4600;
  notify_set_state(*(_DWORD *)(v2 + 16 * *(unsigned int *)(a1 + 40) + 12), *(unsigned int *)(a1 + 44));
  uint64_t v3 = *(const char **)(v2 + 16 * *(unsigned int *)(a1 + 40));

  return notify_post(v3);
}

uint64_t ___ZN6H16ISP19H16ISPFrameReceiver20ProcessFrameMetadataEP10__CVBufferPyNS_33H16ISPFrameReceiverBufferPoolTypeEbPh_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  notify_set_state(*(_DWORD *)(v1 + 476), *(unsigned int *)(a1 + 40));
  uint64_t v2 = *(const char **)(v1 + 464);

  return notify_post(v2);
}

uint64_t CopyGroupBaseZoomFactors(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    uint64_t v9 = *(void *)(*(void *)(a5 + 24) + 4384);
    if (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) >= 1)
    {
      CFIndex v10 = 0;
      unsigned int v11 = 1;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 16), v10);
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        int v13 = H16ISP::ModuleDescriptionToPortType(*(_DWORD *)(v9 + 96 * *(unsigned int *)(DerivedStorage + 132) + 16));
        setValueCFDict<float>(Mutable, v13, *(float *)(DerivedStorage + 3912));
        CFIndex v10 = v11;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) > v11++);
    }
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 4294954516;
  }
  *a2 = Mutable;
  return result;
}

void setValueCFDict<float>(__CFDictionary *a1, const void *a2, float a3)
{
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberFloatType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void __copy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

#error "246832AA0: too big function (funcsize=0)"

void sub_246843B0C(_Unwind_Exception *a1)
{
}

void H16ISP::FastDictionarySetValue(void ***a1, uint64_t a2, CFTypeRef cf)
{
  if (cf)
  {
    double v6 = a1[1];
    CFTypeID v7 = v6[1];
    unint64_t v8 = (unint64_t)v6[2];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v10 = ((char *)v7 - (unsigned char *)*v6) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v8 - (void)*v6;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        __int16 v14 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(v6 + 2), v13);
      }
      else {
        __int16 v14 = 0;
      }
      __int16 v15 = &v14[8 * v10];
      CFNumberType v16 = &v14[8 * v13];
      *(void *)__int16 v15 = a2;
      uint64_t v9 = v15 + 8;
      __int16 v18 = (char *)*v6;
      long long v17 = (char *)v6[1];
      if (v17 != *v6)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        long long v17 = (char *)*v6;
      }
      *double v6 = v15;
      v6[1] = v9;
      v6[2] = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *CFTypeID v7 = a2;
      uint64_t v9 = v7 + 1;
    }
    v6[1] = v9;
    uint64_t v20 = *a1;
    CFTypeRef v21 = CFRetain(cf);
    CFNumberType v22 = v20[1];
    unint64_t v23 = (unint64_t)v20[2];
    if ((unint64_t)v22 >= v23)
    {
      uint64_t v25 = ((char *)v22 - (unsigned char *)*v20) >> 3;
      if ((unint64_t)(v25 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v23 - (void)*v20;
      uint64_t v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
        uint64_t v27 = v25 + 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        uint64_t v29 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(v20 + 2), v28);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = &v29[8 * v25];
      uint64_t v31 = &v29[8 * v28];
      *(void *)uint64_t v30 = v21;
      CFNumberRef v24 = v30 + 8;
      int v33 = (char *)*v20;
      CFNumberRef v32 = (char *)v20[1];
      if (v32 != *v20)
      {
        do
        {
          uint64_t v34 = *((void *)v32 - 1);
          v32 -= 8;
          *((void *)v30 - 1) = v34;
          v30 -= 8;
        }
        while (v32 != v33);
        CFNumberRef v32 = (char *)*v20;
      }
      NSObject *v20 = v30;
      v20[1] = v24;
      v20[2] = v31;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      void *v22 = v21;
      CFNumberRef v24 = v22 + 1;
    }
    v20[1] = v24;
  }
}

long double H16ISP::CalculateAdditionalMetadataParameters(H16ISP *this, int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, double a10, double a11, double a12, double a13, unsigned int a14, unsigned __int16 a15, int a16, unsigned int a17, long double *a18, double *a19, double *a20,double *a21,double *a22)
{
  unsigned int v29 = a14;
  if (a9 <= 0.0) {
    a9 = 0.0001;
  }
  if (a8) {
    unsigned int v30 = a8;
  }
  else {
    unsigned int v30 = 128;
  }
  if (!a14) {
    unsigned int v29 = 128;
  }
  if (a7 <= 4) {
    unsigned int v31 = 4;
  }
  else {
    unsigned int v31 = a7;
  }
  double v32 = (double)v31;
  *(double *)&unint64_t v33 = (double)v30 * 0.00390625 * (double)a15 * 0.00390625 * (double)v29;
  double v34 = *(double *)&v33 * 0.00390625;
  LODWORD(v33) = a16;
  *a18 = log2((double)v31 / (a9 * (v34 * (double)v33 * 0.00390625) * a13) / 67.2);
  *a19 = v34 * (double)(unsigned __int16)a17 / ((double)HIWORD(a17) * 0.00390625);
  double v35 = ((double)(int)(8 * v30 - 2048) * a12 + (double)(int)(2048 - v30) * a11) / (double)(int)(7 * v30);
  if (v30 > 0x800) {
    double v35 = a12;
  }
  if (v30 < 0x100) {
    double v35 = a11;
  }
  long double v36 = log10(v32 / v34 / a10 / sqrt(v32 / v34 / a10 + v35 * v35)) * 20.0;
  long double result = v36 + log10(sqrt((double)(a3 * a2) / (double)(a5 * a4))) * -20.0;
  *a20 = result;
  *a21 = v36;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  double v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (long double result = *v6; result; long double result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::piecewise_construct_t const&,std::tuple<eCIspDpcTypes const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_2468441E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SetHDRImageStatisticsEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  char v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  uint64_t result = H16ISP::H16ISPDevice::EnableDolbyVisionMetadata(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8);
  if (result)
  {
    uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetHDRImageStatisticsEnabled();
    }
    return 4294954514;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableDolbyVisionMetadata(H16ISP::H16ISPDevice *this, __int16 a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 4103;
  __int16 v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetLSCStrength(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 != CFNumberGetTypeID()) {
      return 4294954516;
    }
    int valuePtr = -1082130432;
    CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
    float v8 = *(float *)&valuePtr;
  }
  else
  {
    int valuePtr = -1082130432;
    float v8 = -1.0;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetLSCStrength(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8);
  if (result)
  {
    char v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      char v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetLSCStrength();
    }
    return 4294954514;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetLSCStrength(H16ISP::H16ISPDevice *this, int a2, float a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2636;
  int v9 = a2;
  float v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetColorSpace(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  int v8 = 0;
  int v9 = 1;
  int v10 = 1;
  int v11 = 1;
  switch(valuePtr)
  {
    case 0:
    case 1:
    case 2:
      int v11 = 0;
      int v8 = 0;
      int v9 = valuePtr;
      break;
    case 3:
      break;
    case 4:
      int v8 = 1;
      break;
    case 5:
      int v10 = 0;
      int v8 = 0;
      int v11 = 3;
      int v9 = 2;
      break;
    default:
      float v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        float v13 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        SetColorSpace();
      }
      int v9 = 0;
      int v11 = 0;
      int v8 = 0;
      int v10 = 1;
      break;
  }
  if (!*(unsigned char *)(a2 + 680)
    && !*(unsigned char *)(a2 + 880)
    && !*(unsigned char *)(a2 + 1080)
    && !*(unsigned char *)(a2 + 1280)
    && !*(unsigned char *)(a2 + 1480))
  {
    *(_DWORD *)(a2 + 392pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v11;
    *(_DWORD *)(a2 + 3924) = v10;
    *(unsigned char *)(a2 + 3928) = v8;
    *(_DWORD *)(a2 + 3916) = v9;
    ApplyColorSpaceConfiguration(a4, a2);
    return 0;
  }
  if (*(_DWORD *)(a2 + 3916) == v9)
  {
    if (*(_DWORD *)(a2 + 3920) == v11)
    {
      if (*(_DWORD *)(a2 + 3924) == v10)
      {
        if (*(unsigned __int8 *)(a2 + 3928) == v8) {
          return 0;
        }
        unint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          unint64_t v17 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          SetColorSpace();
        }
      }
      else
      {
        unint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          unint64_t v16 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          SetColorSpace();
        }
      }
    }
    else
    {
      BOOL v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        BOOL v15 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        SetColorSpace();
      }
    }
  }
  else
  {
    float v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      float v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      SetColorSpace();
    }
  }
  return 4294954612;
}

void ApplyColorSpaceConfiguration(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 3924);
  if (H16ISP::H16ISPDevice::LTMGammaSet(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(a2 + 3920)))
  {
    unint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      ApplyColorSpaceConfiguration();
    }
  }
  else if (H16ISP::H16ISPDevice::LTMModeSet(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), v4))
  {
    double v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      double v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ApplyColorSpaceConfiguration();
    }
  }
  else if (H16ISP::H16ISPDevice::EnableHDRC(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), *(unsigned char *)(a2 + 3928)))
  {
    CFTypeID v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ApplyColorSpaceConfiguration();
    }
  }
  else if (H16ISP::H16ISPDevice::SetAWBRGBColorspace(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), *(unsigned char *)(a2 + 3916)))
  {
    int v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      ApplyColorSpaceConfiguration();
    }
  }
}

uint64_t H16ISP::H16ISPDevice::SetAWBRGBColorspace(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = -31971;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::LTMGammaSet(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 8202;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::LTMModeSet(H16ISP::H16ISPDevice *this, int a2, __int16 a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 8196;
  int v9 = a2;
  __int16 v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableHDRC(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2632;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t EnableIRProjector(int a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 3784)
    || (uint64_t result = H16ISP::H16ISPDevice::isSensorType(*(void *)(a3 + 24), *(_DWORD *)(a2 + 132), 1785950322),
        result))
  {
    CFTypeID v7 = *(H16ISP::H16ISPDevice **)(a3 + 24);
    int v8 = *(_DWORD *)(a2 + 132);
    if (a1)
    {
      uint64_t result = H16ISP::H16ISPDevice::IsProjectorAllowed(v7, v8);
      if (result)
      {
        int v9 = *(H16ISP::H16ISPDevice **)(a3 + 24);
        int v10 = *(_DWORD *)(a2 + 132);
        return H16ISP::H16ISPDevice::SetProjectorOn(v9, v10);
      }
    }
    else
    {
      return H16ISP::H16ISPDevice::SetProjectorOff(v7, v8);
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::IsProjectorAllowed(H16ISP::H16ISPDevice *this, char a2)
{
  return (*((_DWORD *)this + 1186) >> a2) & 1;
}

void ActivatePrimaryScalerOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 136)) {
    return;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 168);
  if (v4 < v5) {
    unsigned int v5 = 0;
  }
  unsigned int v6 = v4 - v5;
  int v7 = dword_26B11BA34;
  uint64_t v8 = *(void *)(a1 + 160);
  if (!dword_26B11BA34) {
    int v7 = *(_DWORD *)(v8 + 120 * v6 + 116);
  }
  int v9 = *(_DWORD *)(a1 + 68);
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(v8 + 120 * v6 + 16), &v70, v91))
  {
    int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      ActivatePrimaryScalerOutputInFrameReceiver();
    }
    return;
  }
  int v11 = v7 - v9;
  unsigned int v12 = *(_DWORD *)(a1 + 676);
  if (v12)
  {
    double v13 = (double)v12 / 1000000.0;
    uint64_t v14 = *(void *)(a1 + 160);
    unsigned int v15 = *(_DWORD *)(a1 + 48);
    unsigned int v16 = *(_DWORD *)(a1 + 168);
    if (v15 < v16) {
      unsigned int v16 = 0;
    }
    if (v14) {
      uint64_t v17 = v14 + 120 * v6;
    }
    else {
      uint64_t v17 = 120 * (v15 - v16);
    }
    float v18 = *(float *)(v17 + 108);
    if (v18 == 0.0) {
      float v19 = (float)HIDWORD(v70);
    }
    else {
      float v19 = v18 * 256.0;
    }
    if (v11 + 2 * (v13 / (1.0 / (float)(v19 * 0.0039062))) >= 0xA) {
      int v11 = 10;
    }
    else {
      v11 += 2 * (v13 / (1.0 / (float)(v19 * 0.0039062)));
    }
  }
  int valuePtr = -*(_DWORD *)(a1 + 704) & 0xF;
  uint64_t v20 = *(__CVPixelBufferPool **)(a1 + 824);
  if (v20)
  {
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v20);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F040D8]);
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    }
  }
  int32x2_t v90 = 0;
  uint64_t v68 = 0;
  if (H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(a1 + 696), &v66))
  {
    int v59 = DWORD1(v66);
    BOOL v23 = BYTE8(v66) != 0;
  }
  else
  {
    CFNumberRef v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v24 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      ActivatePrimaryScalerOutputInFrameReceiver();
    }
    int v59 = 0;
    BOOL v23 = 0;
  }
  uint64_t v25 = *(__CVPixelBufferPool **)(a1 + 824);
  if (!v25)
  {
    HIDWORD(v68) = *(_DWORD *)(a1 + 700);
    LODWORD(v68) = *(_DWORD *)(a1 + 704);
    goto LABEL_37;
  }
  CFDictionaryRef v26 = CVPixelBufferPoolGetPixelBufferAttributes(v25);
  if (v26)
  {
    CFDictionaryRef v27 = v26;
    CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v26, (const void *)*MEMORY[0x263F04240]);
    CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v27, (const void *)*MEMORY[0x263F04118]);
    CFNumberGetValue(v28, kCFNumberIntType, (char *)&v68 + 4);
    CFNumberGetValue(v29, kCFNumberIntType, &v68);
LABEL_37:
    if (HIDWORD(v66) <= 0x1B && ((1 << SBYTE12(v66)) & 0xE000002) != 0
      || (*(_DWORD *)(a1 + 3920) | 2) == 3 && HIDWORD(v66) <= 0x13 && ((1 << SBYTE12(v66)) & 0xC0001) != 0
      || (*(_DWORD *)(a1 + 3916) - 1) < 2)
    {
      char v57 = 0;
      char v58 = 0;
    }
    else
    {
      char v57 = v23;
      char v58 = 1;
    }
    long long v64 = 0u;
    long long v65 = 0u;
    GenerateBufferTagsForOutput(a1, a1 + 680, (uint64_t)&v64);
    uint64_t v30 = *(void *)(a1 + 136);
    long long v62 = v64;
    long long v63 = v65;
    int v31 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v30, 0, SDWORD1(v71));
    double v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      double v32 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v32;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      int v33 = v11 + 1 + *(_DWORD *)(a1 + 744);
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v85 = "ActivatePrimaryScalerOutputInFrameReceiver";
      __int16 v86 = 1024;
      int v87 = v33;
      __int16 v88 = 1024;
      int v89 = v11;
      _os_log_impl(&dword_24680F000, v32, OS_LOG_TYPE_INFO, "%s - YUV pool size=%d,prime=%d\n", buf, 0x18u);
    }
    if (v31)
    {
      double v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        double v34 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v34;
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        ActivatePrimaryScalerOutputInFrameReceiver();
      }
    }
    else
    {
      Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(a1 + 136), 0);
      unint64_t v55 = *(double *)(a1 + 728) | ((unint64_t)*(double *)(a1 + 736) << 32);
      unint64_t v56 = (int)*(double *)(a1 + 712) | ((unint64_t)(int)*(double *)(a1 + 720) << 32);
      if (v67 == 2 || DWORD1(v66) == 35 || DWORD1(v66) == 36) {
        int32x2_t v90 = *(int32x2_t *)(BufferPool + 44);
      }
      if (*(unsigned char *)(a1 + 755) && (uint64_t v36 = *(void *)(a1 + 160), *(unsigned char *)(v36 + 120 * v6 + 92)))
      {
        uint64_t v37 = v36 + 120 * v6;
        unsigned int v38 = *(_DWORD *)(v37 + 100);
        LODWORD(v54) = *(_DWORD *)(v37 + 96);
        BYTE4(v54) = 1;
      }
      else
      {
        uint64_t v54 = 0;
        unsigned int v38 = 0;
      }
      uint64_t v40 = *(H16ISP::H16ISPDevice **)(a2 + 24);
      unsigned int v41 = *(_DWORD *)(a1 + 132);
      unsigned int v42 = *(unsigned __int16 *)(a1 + 700);
      int v43 = *(unsigned __int16 *)(a1 + 704);
      int v44 = valuePtr;
      int v45 = HIDWORD(v68);
      int v46 = v68;
      int v47 = ColorRangeForOutput(a1, a1 + 680);
      if (H16ISP::H16ISPDevice::SetPrimaryBESConfig(v40, v41, v56, v55, v42, v43, v44, v45, v46, v59, v47, &v90, SBYTE4(v54), v54, v38))
      {
        __int16 v48 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          __int16 v48 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v48;
        }
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
          ActivatePrimaryScalerOutputInFrameReceiver();
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 752)) {
          goto LABEL_100;
        }
        if (*(unsigned char *)(*(void *)(a1 + 136) + 453)) {
          goto LABEL_100;
        }
        v60[10] = v80;
        v60[11] = v81;
        v60[12] = v82;
        int v61 = v83;
        v60[6] = v76;
        v60[7] = v77;
        v60[8] = v78;
        v60[9] = v79;
        v60[2] = v72;
        v60[3] = v73;
        v60[4] = v74;
        v60[5] = v75;
        v60[0] = v70;
        v60[1] = v71;
        if (AddRawPoolToFrameReceiver(a1, a2, (uint64_t)v60))
        {
          uint64_t v53 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v53 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v53;
          }
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            ActivatePrimaryScalerOutputInFrameReceiver();
          }
        }
        else
        {
LABEL_100:
          if (*(unsigned char *)(a1 + 3784)
            && *(_DWORD *)(a1 + 696) == 1278226736
            && H16ISP::H16ISPDevice::SetSensorInterfacePixelFormat(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 15, 1, 0, 0))
          {
            int v49 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              int v49 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v49;
            }
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
              ActivatePrimaryScalerOutputInFrameReceiver();
            }
          }
          else
          {
            uint64_t v50 = *(H16ISP::H16ISPFrameReceiver **)(a1 + 136);
            if ((*(_DWORD *)v50 - 1) <= 1
              && H16ISP::H16ISPFrameReceiver::SendFWInitialBuffers(v50, 0))
            {
              uint64_t v51 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v51 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v51;
              }
              if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
                ActivatePrimaryScalerOutputInFrameReceiver();
              }
            }
            else if (H16ISP::H16ISPDevice::SetScalerChromaSampleOffset(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), v57, v58, 0))
            {
              unsigned __int16 v52 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                unsigned __int16 v52 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v52;
              }
              if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
                ActivatePrimaryScalerOutputInFrameReceiver();
              }
            }
            else
            {
              SetMetaDataOptionsOnFrameReceiver(a1, a2);
            }
          }
        }
      }
    }
    return;
  }
  uint64_t v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v39 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v39;
  }
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
    ActivatePrimaryScalerOutputInFrameReceiver();
  }
}

uint64_t H16ISP::H16ISPDevice::SetPrimaryBESConfig(H16ISP::H16ISPDevice *a1, unsigned int a2, unint64_t a3, unint64_t a4, unsigned int a5, int a6, int a7, int a8, int a9, int a10, int a11, int32x2_t *a12, char a13, unsigned int a14, unsigned int a15)
{
  if (*((_DWORD *)a1 + 1187) <= a2) {
    return 3758097090;
  }
  int v17 = a4;
  unsigned int v18 = a3;
  unint64_t v21 = HIDWORD(a3);
  unint64_t v22 = HIDWORD(a4);
  if (a13)
  {
    bzero(v33, 0x24uLL);
    __int16 v34 = 2838;
    unsigned int v35 = a2;
    unsigned int v36 = v18;
    int v37 = v21;
    int v38 = v17;
    int v39 = v22;
    *(void *)uint64_t v40 = __PAIR64__(a15, a14);
    BOOL v23 = a1;
    unsigned int v24 = 36;
  }
  else
  {
    bzero(v33, 0x1CuLL);
    __int16 v34 = 2049;
    unsigned int v35 = a2;
    unsigned int v36 = v18;
    int v37 = v21;
    int v38 = v17;
    int v39 = v22;
    BOOL v23 = a1;
    unsigned int v24 = 28;
  }
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(v23, v33, v24, 0, 0xFFFFFFFF);
  if (!result)
  {
    bzero(v33, 0x38uLL);
    __int16 v34 = 2817;
    unsigned int v35 = a2;
    unsigned int v36 = a5;
    int v37 = a6;
    int v38 = a11;
    int v44 = a8;
    int v41 = a7;
    int v42 = a9;
    switch(a10)
    {
      case 0:
        char v43 = 0;
        goto LABEL_17;
      case 1:
        char v43 = 0;
        int v39 = 1;
        *(_DWORD *)uint64_t v40 = (2 * a8 + 63) & 0xFFFFFFC0;
        return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v33, 0x38u, 0, 0xFFFFFFFF);
      case 13:
        char v43 = 1;
LABEL_17:
        unsigned int v27 = (a8 + 63) & 0xFFFFFFC0;
        int v39 = 0;
        goto LABEL_18;
      case 15:
        int v28 = 18;
        char v43 = 0;
        goto LABEL_21;
      case 16:
        int v28 = 18;
        char v43 = 1;
LABEL_21:
        int v29 = 2 * a8;
        goto LABEL_23;
      case 18:
        int v28 = 19;
        char v43 = 0;
        int v29 = (2 * ((2863311531u * (unint64_t)(a8 + 2)) >> 32)) & 0xFFFFFFFC;
LABEL_23:
        int v39 = v28;
        *(_DWORD *)uint64_t v40 = (v29 + 63) & 0xFFFFFFC0;
        *(_DWORD *)&v40[4] = *(_DWORD *)v40;
        return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v33, 0x38u, 0, 0xFFFFFFFF);
      case 22:
        int v39 = 0;
        char v43 = 1;
        int32x2_t v26 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(vdup_n_s32(32 * a5), (int32x2_t)0x1E0000003E0), (int8x8_t)0x3FFE00003FFC00);
        goto LABEL_12;
      case 23:
        int v39 = 19;
        char v43 = 1;
        int32x2_t v26 = vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32(a5), (int32x2_t)0xF0000001FLL), (uint32x2_t)0xFFFFFFFCFFFFFFFBLL), (int32x2_t)0x14000000500);
        goto LABEL_12;
      case 24:
      case 26:
      case 28:
        int v39 = 0;
        goto LABEL_11;
      case 25:
      case 27:
      case 29:
        int v39 = 19;
LABEL_11:
        char v43 = 1;
        int32x2_t v26 = *a12;
LABEL_12:
        *(int32x2_t *)uint64_t v40 = v26;
        return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v33, 0x38u, 0, 0xFFFFFFFF);
      case 31:
      case 32:
      case 33:
      case 34:
        int v39 = 26;
        char v43 = 1;
        goto LABEL_29;
      case 35:
        int v30 = 25;
        goto LABEL_28;
      case 36:
        int v30 = 26;
LABEL_28:
        int v39 = v30;
        char v43 = 0;
LABEL_29:
        *(int32x2_t *)&v40[4] = *a12;
        break;
      default:
        char v43 = 0;
        unsigned int v27 = (a8 + 63) & 0xFFFFFFC0;
        int v39 = a10;
LABEL_18:
        *(_DWORD *)uint64_t v40 = v27;
        *(_DWORD *)&v40[4] = v27;
        break;
    }
    return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v33, 0x38u, 0, 0xFFFFFFFF);
  }
  return result;
}

uint64_t CopyOutputConfigurations(const __CFAllocator *a1, __CFDictionary **a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int v10 = Mutable;
  int v11 = *(_DWORD *)(*(void *)(*(void *)(a5 + 24) + 4384) + 96 * a3[33] + 16);
  switch(v11)
  {
    case 1919251564:
      int32x2_t v26 = (H16ISP::DepthRearConfigurations *)a3[985];
      if (v26 > 4) {
        goto LABEL_15;
      }
      int HeightOfPreset = H16ISP::DepthRearConfigurations::getHeightOfPreset(v26);
      int WidthOfPreset = H16ISP::DepthRearConfigurations::getWidthOfPreset((H16ISP::DepthRearConfigurations *)a3[985]);
      int v29 = a3[486];
      addConfiguration(a1, v10, (const __CFString *)*MEMORY[0x263F2C7C0], 825306677, 0x3FFF, 320, 240, v29, v34, v35);
      addConfiguration(a1, v10, (const __CFString *)*MEMORY[0x263F2C7F8], 825306677, 0x3FFF, WidthOfPreset, HeightOfPreset, v29, v34, v35);
      CFStringRef v19 = (const __CFString *)*MEMORY[0x263F2C7D0];
      CFAllocatorRef v20 = a1;
      unint64_t v21 = v10;
      int v22 = 1932996149;
      int v23 = 320;
      int v24 = 240;
LABEL_13:
      int v25 = v29;
LABEL_14:
      addConfiguration(v20, v21, v19, v22, 0x3FFF, v23, v24, v25, v34, v35);
      goto LABEL_15;
    case 1919246706:
      int v30 = (H16ISP::DepthRearConfigurations *)a3[985];
      if (v30 > 4) {
        goto LABEL_15;
      }
      int v31 = H16ISP::DepthRearConfigurations::getHeightOfPreset(v30);
      int v32 = H16ISP::DepthRearConfigurations::getWidthOfPreset((H16ISP::DepthRearConfigurations *)a3[985]);
      int v29 = a3[486];
      addConfiguration(a1, v10, (const __CFString *)*MEMORY[0x263F2C7C0], 825306677, 0x3FFF, 240, 320, v29, v34, v35);
      addConfiguration(a1, v10, (const __CFString *)*MEMORY[0x263F2C7D0], 1932996149, 0x3FFF, 240, 320, v29, v34, v35);
      CFStringRef v19 = (const __CFString *)*MEMORY[0x263F2C7F8];
      CFAllocatorRef v20 = a1;
      unint64_t v21 = v10;
      int v22 = 825306677;
      int v23 = v32;
      int v24 = v31;
      goto LABEL_13;
    case 1718186595:
      unsigned int v12 = (H16ISP::DepthFrontConfigurations *)a3[985];
      if (v12 <= 4)
      {
        int v13 = H16ISP::DepthFrontConfigurations::getHeightOfPreset(v12);
        int v14 = H16ISP::DepthFrontConfigurations::getWidthOfPreset((H16ISP::DepthFrontConfigurations *)a3[985]);
        int v15 = a3[486];
        bzero(&v34, 0x68uLL);
        LOWORD(v35) = 1565;
        unsigned int v36 = a3[33];
        int v16 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a5 + 24), (unsigned __int8 *)&v34, 0x68u, 0, 0xFFFFFFFF);
        int v17 = 608;
        int v18 = 656;
        if (!v16 && v37 == 10)
        {
          int v13 = H16ISP::DepthFrontRotatedConfigurations::getHeightOfPreset((H16ISP::DepthFrontRotatedConfigurations *)a3[985]);
          int v14 = H16ISP::DepthFrontRotatedConfigurations::getWidthOfPreset((H16ISP::DepthFrontRotatedConfigurations *)a3[985]);
          int v17 = 432;
          int v18 = 504;
        }
        addConfiguration(a1, v10, (const __CFString *)*MEMORY[0x263F2C7D8], 825437747, 0, v14, v13, v15, v34, v35);
        addConfiguration(a1, v10, (const __CFString *)*MEMORY[0x263F2C7F8], 825306677, 0x3FFF, v14, v13, v15, v34, v35);
        addConfiguration(a1, v10, (const __CFString *)*MEMORY[0x263F2C7C0], 825306677, 0x3FFF, v17, v18, v15, v34, v35);
        CFStringRef v19 = (const __CFString *)*MEMORY[0x263F2C7D0];
        CFAllocatorRef v20 = a1;
        unint64_t v21 = v10;
        int v22 = 1932996149;
        int v23 = v17;
        int v24 = v18;
        int v25 = v15;
        goto LABEL_14;
      }
LABEL_15:
      uint64_t result = 0;
      *a2 = v10;
      return result;
  }
  CFRelease(Mutable);
  return 4294954514;
}

void addConfiguration(const __CFAllocator *a1, __CFDictionary *a2, const __CFString *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  int v29 = a5;
  int valuePtr = a4;
  int v27 = a7;
  int v28 = a6;
  int v25 = 128;
  int v26 = 64;
  int v24 = a8;
  CFNumberRef v13 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v14 = CFNumberCreate(a1, kCFNumberSInt32Type, &v29);
  CFNumberRef v15 = CFNumberCreate(a1, kCFNumberSInt32Type, &v28);
  CFNumberRef v16 = CFNumberCreate(a1, kCFNumberSInt32Type, &v27);
  CFNumberRef v17 = CFNumberCreate(a1, kCFNumberSInt32Type, &v26);
  CFNumberRef v18 = CFNumberCreate(a1, kCFNumberSInt32Type, &v25);
  CFNumberRef v19 = CFNumberCreate(a1, kCFNumberSInt32Type, &v24);
  CFNumberRef v20 = v19;
  if (v13 && v14 && v15 && v16 && v17 && v18 && v19)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    int v22 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C898], v13);
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x263F2C890], v14);
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x263F2C8A0], v15);
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x263F2C888], v16);
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x263F2C870], v17);
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x263F2C880], v18);
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x263F2C878], v20);
      CFDictionarySetValue(a2, a3, v22);
    }
  }
  else
  {
    int v22 = 0;
    int v23 = 0;
    if (!v13) {
      goto LABEL_12;
    }
  }
  CFRelease(v13);
  int v23 = v22;
LABEL_12:
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v23) {
    CFRelease(v23);
  }
}

double SetOptionsForMetadataNode(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  memset(v14, 0, sizeof(v14));
  v9[0] = 1;
  uint64_t v7 = a3 + 3677;
  v9[1] = *(_DWORD *)(a3 + 3736) == 0;
  __int16 v10 = *(_WORD *)(a3 + 3677);
  char v11 = a4;
  char v12 = a5;
  __int16 v13 = *(_WORD *)(a3 + 3674);
  LOBYTE(v14[0]) = *(unsigned char *)(a3 + 3676);
  BYTE2(v14[0]) = H16ISP::H16ISPDevice::hasSensorType(*(void *)(a2 + 24), 1785950322);
  BYTE3(v14[0]) = *(unsigned char *)(a3 + 3681);
  BYTE4(v14[0]) = *(unsigned char *)(v7 + 449);
  *(_WORD *)((char *)v14 + 5) = *(_WORD *)(a3 + 3679);
  BYTE8(v14[0]) = *(unsigned char *)(a3 + 3848);
  *(void *)((char *)v14 + 12) = *(void *)(a3 + 4252);
  WORD2(v14[1]) = *(_WORD *)(a3 + 4260);
  BYTE7(v14[0]) = *(unsigned char *)(a3 + 3682);
  if (byte_26B11BAB0) {
    BYTE10(v14[0]) = 1;
  }
  if (byte_26B11BAB1) {
    BYTE11(v14[0]) = 1;
  }
  *((void *)&v14[1] + 1) = 0;
  BYTE1(v14[0]) = *(_DWORD *)(a3 + 648) != 0;
  *(void *)&double result = H16ISP::H16ISPMetadataDictCreatorGraphNode::setMetaDataOptions(a1, *(_DWORD *)(a3 + 132), (uint64_t)v9).n128_u64[0];
  return result;
}

__n128 H16ISP::H16ISPMetadataDictCreatorGraphNode::setMetaDataOptions(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 88) + 40 * a2;
  __n128 result = *(__n128 *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  *(void *)(v3 + 32) = *(void *)(a3 + 32);
  *(__n128 *)uint64_t v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  return result;
}

void ActivateStillImageOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 136)) {
    return;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 168);
  if (v4 < v5) {
    unsigned int v5 = 0;
  }
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v4 - v5) + 16), v76, v100))
  {
    unsigned int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
    return;
  }
  bzero(v71, 0x1CuLL);
  int v73 = *(_DWORD *)(a1 + 132);
  __int16 v72 = 2827;
  int32x2_t v74 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(a1 + 1312)));
  int32x2_t v75 = vmovn_s64((int64x2_t)vcvtq_u64_f64(*(float64x2_t *)(a1 + 1328)));
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a2 + 24), v71, 0x1Cu, 0, 0xFFFFFFFF))
  {
    uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
    return;
  }
  int v8 = *(_DWORD *)(a1 + 1344);
  uint64_t valuePtr = 0;
  int v9 = (int *)(a1 + 1296);
  if (H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(a1 + 1296), &v68))
  {
    int v10 = DWORD1(v68);
  }
  else
  {
    char v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      char v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
    int v10 = 0;
  }
  char v12 = *(__CVPixelBufferPool **)(a1 + 1424);
  if (v12)
  {
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v12);
    if (!PixelBufferAttributes)
    {
      int v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v28 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageOutputInFrameReceiver();
      }
      return;
    }
    CFDictionaryRef v14 = PixelBufferAttributes;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F04240]);
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v14, (const void *)*MEMORY[0x263F04118]);
    CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
    CFNumberGetValue(v16, kCFNumberIntType, &valuePtr);
  }
  else
  {
    HIDWORD(valuePtr) = *(_DWORD *)(a1 + 1300);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 1304);
  }
  if (HIDWORD(v68) > 0x1B || ((1 << SBYTE12(v68)) & 0xE000002) == 0)
  {
    int v29 = *v9;
    char v17 = 1;
    if (*v9 > 1885745711)
    {
      if (v29 != 1885745712 && v29 != 2019963440)
      {
        int v30 = 2037741158;
LABEL_51:
        char v18 = 1;
        if (v29 != v30) {
          char v17 = 0;
        }
        goto LABEL_28;
      }
    }
    else if (v29 != 641230384 && v29 != 645424688)
    {
      int v30 = 875704422;
      goto LABEL_51;
    }
    char v18 = 1;
    goto LABEL_28;
  }
  char v17 = 0;
  char v18 = 0;
LABEL_28:
  char v58 = v18;
  char v59 = v17;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v60 = a1 + 1280;
  GenerateBufferTagsForOutput(a1, a1 + 1280, (uint64_t)&v66);
  uint64_t v19 = *(void *)(a1 + 136);
  long long v64 = v66;
  long long v65 = v67;
  int v20 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v19, 7, SDWORD2(v77));
  unint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  uint64_t v22 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    unint64_t v21 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)CMTime buf = 136315650;
    int32x2_t v90 = "ActivateStillImageOutputInFrameReceiver";
    LOWORD(v91) = 1024;
    *(_DWORD *)((char *)&v91 + 2) = v8;
    HIWORD(v91) = 1024;
    int v92 = 0;
    _os_log_impl(&dword_24680F000, v21, OS_LOG_TYPE_INFO, "%s - STILL pool size=%d,prime=%d\n", buf, 0x18u);
  }
  if (v20)
  {
    int v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v22)
    {
      int v23 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
    return;
  }
  Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(a1 + 136), 7);
  unsigned int v26 = *(_DWORD *)(BufferPool + 44);
  unsigned int v25 = *(_DWORD *)(BufferPool + 48);
  bzero(buf, 0x38uLL);
  int v27 = *(_DWORD *)(a1 + 132);
  LOWORD(v9pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 2823;
  uint64_t v91 = *(void *)(a1 + 1300);
  HIDWORD(v9pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v27;
  int v96 = 0;
  switch(v10)
  {
    case 0:
      BOOL v98 = 0;
      goto LABEL_58;
    case 1:
      BOOL v98 = 0;
      int v93 = 1;
      LODWORD(v94) = (2 * HIDWORD(valuePtr) + 63) & 0xFFFFFFC0;
      break;
    case 13:
      BOOL v98 = 1;
LABEL_58:
      unsigned int v31 = (HIDWORD(valuePtr) + 63) & 0xFFFFFFC0;
      int v93 = 0;
      goto LABEL_59;
    case 15:
      int v32 = 18;
      BOOL v98 = 0;
      int v33 = 2 * HIDWORD(valuePtr);
      goto LABEL_62;
    case 18:
      int v32 = 19;
      BOOL v98 = 0;
      int v33 = (2 * ((2863311531u * (unint64_t)(HIDWORD(valuePtr) + 2)) >> 32)) & 0xFFFFFFFC;
LABEL_62:
      int v93 = v32;
      LODWORD(v94) = (v33 + 63) & 0xFFFFFFC0;
      HIDWORD(v94) = v94;
      break;
    case 22:
      unint64_t v94 = (unint64_t)vand_s8((int8x8_t)vadd_s32(vdup_n_s32(32 * HIDWORD(valuePtr)), (int32x2_t)0x1E0000003E0), (int8x8_t)0xFFFFFE00FFFFFC00);
      int v93 = 0;
      goto LABEL_65;
    case 23:
      int v34 = (const float *)&valuePtr + 1;
      int32x2_t v35 = (int32x2_t)vld1_dup_f32(v34);
      unint64_t v94 = (unint64_t)vshr_n_u32((uint32x2_t)vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(v35, (int32x2_t)0xF0000001FLL), (uint32x2_t)0xFFFFFFFCFFFFFFFBLL), (int32x2_t)0xA0000002800), 3uLL);
      int v93 = 19;
LABEL_65:
      BOOL v98 = 1;
      break;
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      BOOL v98 = v69 != 0;
      int v93 = HIDWORD(v68);
      unint64_t v94 = __PAIR64__(v25, v26);
      break;
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      BOOL v98 = v69 != 0;
      int v93 = HIDWORD(v68);
      HIDWORD(v94) = v26;
      unsigned int v95 = v25;
      break;
    default:
      BOOL v98 = 0;
      unsigned int v31 = (HIDWORD(valuePtr) + 63) & 0xFFFFFFC0;
      int v93 = v10;
LABEL_59:
      LODWORD(v94) = v31;
      HIDWORD(v94) = v31;
      break;
  }
  uint64_t v36 = v22;
  int v37 = ColorRangeForOutput(a1, v60);
  int v99 = HIDWORD(valuePtr);
  int v92 = v37;
  int v97 = valuePtr;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a2 + 24), buf, 0x38u, 0, 0xFFFFFFFF))
  {
    uint64_t v38 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v22)
    {
      uint64_t v38 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v38;
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
    return;
  }
  if (*(unsigned char *)(a1 + 752)
    || *(unsigned char *)(a1 + 952)
    || *(unsigned char *)(a1 + 1152)
    || *(unsigned char *)(a1 + 1352)
    || *(unsigned char *)(a1 + 1552))
  {
    BOOL v39 = 1;
  }
  else
  {
    BOOL v39 = *(unsigned char *)(a1 + 2080) || *(unsigned char *)(a1 + 2280) || *(unsigned char *)(a1 + 3608) || *(unsigned char *)(a1 + 1680) != 0;
    uint64_t v36 = v22;
  }
  uint64_t v40 = *(void *)(a1 + 136);
  if (v39 && !*(unsigned char *)(v40 + 453))
  {
    v62[10] = v82;
    v62[11] = v83;
    v62[12] = v84;
    int v63 = v85;
    v62[6] = v78;
    v62[7] = v79;
    v62[8] = v80;
    v62[9] = v81;
    v62[2] = v76[2];
    v62[3] = v76[3];
    v62[4] = v76[4];
    v62[5] = v77;
    v62[0] = v76[0];
    v62[1] = v76[1];
    if (AddRawPoolToFrameReceiver(a1, a2, (uint64_t)v62))
    {
      int v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
      {
        int v41 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageOutputInFrameReceiver();
      }
      return;
    }
    uint64_t v40 = *(void *)(a1 + 136);
  }
  if (!H16ISP::H16ISPFrameReceiver::HasPool((void *)v40, 30)
    && *(unsigned char *)(a1 + 1353)
    && AddThumbnailRawPoolToFrameReceiver(a1, a2))
  {
    int v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
    {
      int v42 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v42;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
  }
  else if (*(unsigned char *)(a1 + 3784) {
         && *v9 == 1278226736
  }
         && H16ISP::H16ISPDevice::SetSensorInterfacePixelFormat(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 15, 1, 0, 0))
  {
    char v43 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
    {
      char v43 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v43;
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
  }
  else if (v69 == 2 {
         && (uint64_t v44 = H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(a1 + 136), 7),
  }
             H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 7, 1, 2, 2u, (const void *)(v44 + 336))))
  {
    int v45 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
    {
      int v45 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v45;
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
  }
  else if (*(unsigned char *)(a1 + 1400) && AddSushiRawPoolToFrameReceiver(a1, a2, v60))
  {
    int v46 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
    {
      int v46 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v46;
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
  }
  else if (*(_DWORD *)(a1 + 1404) && AddSashimiRawPoolToFrameReceiver(a1, a2, v60))
  {
    int v47 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
    {
      int v47 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v47;
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
  }
  else if (*(_DWORD *)(a1 + 1408) && AddFocusPixelDataToFrameReceiver(a1, a2, v60))
  {
    __int16 v48 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
    {
      __int16 v48 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v48;
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
  }
  else if (*(unsigned char *)(a1 + 1376) && AddSplitPixelDataToFrameReceiver(a1, a2, v60))
  {
    int v49 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
    {
      int v49 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v49;
    }
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageOutputInFrameReceiver();
    }
  }
  else
  {
    if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 8))
    {
      uint64_t v61 = 0;
      int v50 = resizeStillMetaPool(a1, 0, (int *)&v61 + 1, (int *)&v61);
      if (v50)
      {
        int v51 = v50;
        unsigned __int16 v52 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
        {
          unsigned __int16 v52 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v52;
        }
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int16 v86 = 136315394;
          *(void *)int v87 = "ActivateStillImageOutputInFrameReceiver";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)__int16 v88 = v51;
          _os_log_impl(&dword_24680F000, v52, OS_LOG_TYPE_DEFAULT, "%s - resize still meta pool failed err= %d\n", v86, 0x12u);
        }
      }
      int v53 = v61 + HIDWORD(v61);
      if (HIDWORD(v61) >= 0x10) {
        int v54 = 16;
      }
      else {
        int v54 = HIDWORD(v61);
      }
      int v55 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 8, v101);
      unint64_t v56 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
      {
        unint64_t v56 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v56;
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int16 v86 = 67109632;
        *(_DWORD *)int v87 = v53;
        *(_WORD *)&v87[4] = 1024;
        *(_DWORD *)&v87[6] = v54;
        *(_WORD *)__int16 v88 = 1024;
        *(_DWORD *)&v88[2] = v55;
        _os_log_impl(&dword_24680F000, v56, OS_LOG_TYPE_INFO, "ActivateStillImageOutputInFrameReceiver STILLMETA pool size=%d,prime=%d res =%d\n\n", v86, 0x14u);
      }
    }
    if (H16ISP::H16ISPDevice::SetScalerChromaSampleOffset(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), v59, v58, 2))
    {
      char v57 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v36)
      {
        char v57 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v57;
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageOutputInFrameReceiver();
      }
    }
    else
    {
      SetMetaDataOptionsOnFrameReceiver(a1, a2);
    }
  }
}

BOOL H16ISP::H16ISPFrameReceiver::HasPool(void *a1, int a2)
{
  return H16ISP::H16ISPFrameReceiver::getBufferPool(a1, a2) != 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::getBufferPool(void *a1, int a2)
{
  uint64_t v2 = a1[81];
  unint64_t v3 = a1[84];
  unsigned int v4 = (void *)(v2 + 8 * (v3 >> 9));
  uint64_t v5 = a1[82];
  if (v5 == v2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v4 + 8 * (a1[84] & 0x1FFLL);
  }
LABEL_4:
  uint64_t v7 = v6 - 4096;
  while (1)
  {
    uint64_t v8 = v5 == v2 ? 0 : *(void *)(v2 + (((a1[85] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[85] + v3) & 0x1FF);
    if (v6 == v8) {
      return 0;
    }
    uint64_t v9 = *(void *)v6;
    if (*(_DWORD *)(*(void *)v6 + 16) == a2) {
      return v9;
    }
    v6 += 8;
    v7 += 8;
    if (*v4 == v7)
    {
      uint64_t v10 = v4[1];
      ++v4;
      uint64_t v6 = v10;
      goto LABEL_4;
    }
  }
}

uint64_t SetMetaDataOptionsOnFrameReceiver(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 136);
  if (!v2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = result + 3677;
  if (!*(unsigned char *)(result + 674))
  {
    int v6 = *(unsigned __int8 *)(v2 + 453);
LABEL_13:
    BOOL v5 = v6 != 0;
    goto LABEL_14;
  }
  if (!*(unsigned char *)(result + 752)
    && !*(unsigned char *)(result + 952)
    && !*(unsigned char *)(result + 1152)
    && !*(unsigned char *)(result + 1352)
    && !*(unsigned char *)(result + 1552)
    && !*(unsigned char *)(result + 1680)
    && !*(unsigned char *)(result + 2080)
    && !*(unsigned char *)(result + 3608))
  {
    int v6 = *(unsigned __int8 *)(result + 2280);
    goto LABEL_13;
  }
  BOOL v5 = 1;
LABEL_14:
  if (dword_26B11B9EC) {
    BOOL v5 = 1;
  }
  memset(v10, 0, sizeof(v10));
  v7[0] = v5;
  v7[1] = *(_DWORD *)(v2 + 456) == 0;
  __int16 v8 = *(_WORD *)v4;
  int v9 = *(_DWORD *)(result + 3672);
  LOBYTE(v10[0]) = *(unsigned char *)(result + 3676);
  BYTE2(v10[0]) = H16ISP::H16ISPDevice::hasSensorType(*(void *)(a2 + 24), 1785950322);
  BYTE3(v10[0]) = *(unsigned char *)(v3 + 3681);
  BYTE4(v10[0]) = *(unsigned char *)(v4 + 449);
  *(_WORD *)((char *)v10 + 5) = *(_WORD *)(v3 + 3679);
  BYTE8(v10[0]) = *(unsigned char *)(v3 + 3848);
  *(void *)((char *)v10 + 12) = *(void *)(v3 + 4252);
  WORD2(v10[1]) = *(_WORD *)(v3 + 4260);
  BYTE7(v10[0]) = *(unsigned char *)(v3 + 3682);
  if (byte_26B11BAB0) {
    BYTE10(v10[0]) = 1;
  }
  if (byte_26B11BAB1) {
    BYTE11(v10[0]) = 1;
  }
  *((void *)&v10[1] + 1) = 0;
  BYTE1(v10[0]) = *(_DWORD *)(v3 + 648) != 0;
  return H16ISP::H16ISPFrameReceiver::SetMetaDataOptions(*(void *)(v3 + 136), (long long *)v7);
}

uint64_t H16ISP::H16ISPFrameReceiver::SetMetaDataOptions(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)(a1 + 904) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 872) = v2;
  *(_OWORD *)(a1 + 888) = v3;
  return 0;
}

uint64_t SetDepthEngineConfiguration(const void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  int v6 = a2[984];
  if (a1)
  {
    uint64_t v8 = *(void *)(*(void *)(a4 + 24) + 4384);
    CFTypeID v9 = CFGetTypeID(a1);
    if (v9 != CFDictionaryGetTypeID()) {
      return 4294954516;
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C810]);
    if (Value)
    {
      CFArrayRef v11 = Value;
      CFTypeID v12 = CFGetTypeID(Value);
      if (v12 == CFArrayGetTypeID())
      {
        a2[986] = 0;
        CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C828]);
        if (v13)
        {
          int valuePtr = 0;
          if (CFNumberGetValue(v13, kCFNumberIntType, &valuePtr))
          {
            if (valuePtr == 1278226536 || valuePtr == 1751411059 || valuePtr == 1751410032) {
              a2[986] = 1;
            }
          }
        }
        a2[984] = 0;
        v79.length = CFArrayGetCount(v11);
        v79.locatiouint64_t n = 0;
        CFStringRef key = (void *)*MEMORY[0x263F2C7C0];
        if (CFArrayContainsValue(v11, v79, (const void *)*MEMORY[0x263F2C7C0])) {
          a2[984] |= 1u;
        }
        v80.length = CFArrayGetCount(v11);
        v80.locatiouint64_t n = 0;
        __int16 v72 = (void *)*MEMORY[0x263F2C7D0];
        if (CFArrayContainsValue(v11, v80, (const void *)*MEMORY[0x263F2C7D0])) {
          a2[984] |= 2u;
        }
        v81.length = CFArrayGetCount(v11);
        v81.locatiouint64_t n = 0;
        long long v71 = (void *)*MEMORY[0x263F2C7F0];
        if (CFArrayContainsValue(v11, v81, (const void *)*MEMORY[0x263F2C7F0])) {
          a2[984] |= 4u;
        }
        v82.length = CFArrayGetCount(v11);
        v82.locatiouint64_t n = 0;
        long long v70 = (void *)*MEMORY[0x263F2C7D8];
        if (CFArrayContainsValue(v11, v82, (const void *)*MEMORY[0x263F2C7D8])) {
          a2[984] |= 0x20u;
        }
        v83.length = CFArrayGetCount(v11);
        CFDictionaryRef v14 = (const void *)*MEMORY[0x263F2C7F8];
        v83.locatiouint64_t n = 0;
        int v15 = CFArrayContainsValue(v11, v83, (const void *)*MEMORY[0x263F2C7F8]);
        int v16 = a2[984];
        if (v15)
        {
          a2[984] = v16 | 8;
          int v16 = 1;
        }
        H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), a2[33], 44, v16 != 0);
        CFBooleanRef v17 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C860]);
        if (v17 && *(_DWORD *)(v8 + 96 * a2[33] + 16) != 1718186595 && CFBooleanGetValue(v17) == 1) {
          a2[984] |= 0x1000u;
        }
        int v18 = *(_DWORD *)(v8 + 96 * a2[33] + 16);
        a2[985] = 0;
        if (v18 == 1718186595) {
          int RegistrationOfPreset = H16ISP::DepthFrontConfigurations::getRegistrationOfPreset(0);
        }
        else {
          int RegistrationOfPreset = H16ISP::DepthRearConfigurations::getRegistrationOfPreset(0);
        }
        int v21 = RegistrationOfPreset;
        CFStringRef v22 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C808]);
        if (v22)
        {
          CFStringRef v23 = v22;
          CFTypeID v24 = CFGetTypeID(v22);
          if (v24 == CFStringGetTypeID()
            && *(_DWORD *)(v8 + 96 * a2[33] + 16) == 1718186595
            && (CFEqual(v23, (CFStringRef)*MEMORY[0x263F2C270])
             || CFEqual(v23, (CFStringRef)*MEMORY[0x263F2C288])))
          {
            a2[985] = 2;
            int v21 = 1;
          }
        }
        uint64_t v74 = 0;
        unsigned int v25 = (H16ISP::DepthFrontConfigurations *)a2[985];
        if (*(_DWORD *)(v8 + 96 * a2[33] + 16) == 1718186595)
        {
          HIDWORD(v74) = H16ISP::DepthFrontConfigurations::getWidthOfPreset(v25);
          int HeightOfPreset = H16ISP::DepthFrontConfigurations::getHeightOfPreset((H16ISP::DepthFrontConfigurations *)a2[985]);
        }
        else
        {
          HIDWORD(v74) = H16ISP::DepthRearConfigurations::getWidthOfPreset(v25);
          int HeightOfPreset = H16ISP::DepthRearConfigurations::getHeightOfPreset((H16ISP::DepthRearConfigurations *)a2[985]);
        }
        LODWORD(v74) = HeightOfPreset;
        CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C830]);
        if (v27)
        {
          CFNumberRef v28 = v27;
          CFTypeID v29 = CFGetTypeID(v27);
          if (v29 == CFNumberGetTypeID()) {
            CFNumberGetValue(v28, kCFNumberSInt32Type, (char *)&v74 + 4);
          }
        }
        CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C820]);
        if (v30)
        {
          CFNumberRef v31 = v30;
          CFTypeID v32 = CFGetTypeID(v30);
          if (v32 == CFNumberGetTypeID()) {
            CFNumberGetValue(v31, kCFNumberSInt32Type, &v74);
          }
        }
        int v33 = (const void *)*MEMORY[0x263F2C818];
        if (CFDictionaryContainsKey((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C818]))
        {
          CFBooleanRef v34 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, v33);
          BOOL v35 = CFBooleanGetValue(v34) != 0;
        }
        else
        {
          BOOL v35 = 0;
        }
        *((unsigned char *)a2 + 3956) = v35;
        uint64_t v36 = (const void *)*MEMORY[0x263F2C868];
        if (CFDictionaryContainsKey((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C868]))
        {
          CFBooleanRef v37 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, v36);
          BOOL v38 = CFBooleanGetValue(v37) != 0;
        }
        else
        {
          BOOL v38 = 0;
        }
        *((unsigned char *)a2 + 3976) = v38;
        if (*(_DWORD *)(v8 + 96 * a2[33] + 16) == 1718186595)
        {
          int Preset = H16ISP::DepthFrontConfigurations::getPreset((H16ISP::DepthFrontConfigurations *)HIDWORD(v74), v74, v21);
          if (Preset == 5)
          {
            uint64_t v40 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v40 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v40;
            }
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              int v41 = "out";
              if (v21) {
                int v41 = "";
              }
              int valuePtr = 67109634;
              *(_DWORD *)long long v76 = HIDWORD(v74);
              *(_WORD *)&v76[4] = 1024;
              *(_DWORD *)&v76[6] = v74;
              *(_WORD *)long long v77 = 2080;
              *(void *)&v77[2] = v41;
              _os_log_error_impl(&dword_24680F000, v40, OS_LOG_TYPE_ERROR, "H16ISPCaptureDevice: Unknown configuration: %dx%d with%s perspective change\n\n", (uint8_t *)&valuePtr, 0x18u);
            }
            return 4294954516;
          }
          a2[985] = Preset;
          CFBooleanRef v47 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C838]);
          if (v47)
          {
            CFBooleanRef v48 = v47;
            CFTypeID v49 = CFGetTypeID(v47);
            if (v49 == CFBooleanGetTypeID())
            {
              int v50 = CFBooleanGetValue(v48) != 0;
              a2[987] = v50;
              int v51 = dword_26B11BA8C;
              if (dword_26B11BA8C <= 2 && dword_26B11BA8C != v50)
              {
                unsigned __int16 v52 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  unsigned __int16 v52 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v52;
                  int v51 = dword_26B11BA8C;
                }
                if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                {
                  int v53 = a2[987];
                  int valuePtr = 136315650;
                  *(void *)long long v76 = "SetDepthEngineConfiguration";
                  *(_WORD *)&v76[8] = 1024;
                  *(_DWORD *)long long v77 = v53;
                  *(_WORD *)&v77[4] = 1024;
                  *(_DWORD *)&v77[6] = v51;
                  _os_log_impl(&dword_24680F000, v52, OS_LOG_TYPE_DEFAULT, "%s - Would change fusion mode to %d, but preferences force mode %d\n", (uint8_t *)&valuePtr, 0x18u);
                  int v51 = dword_26B11BA8C;
                }
                a2[987] = v51;
              }
            }
          }
          CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C858]);
          if (v54)
          {
            CFNumberRef v55 = v54;
            CFTypeID v56 = CFGetTypeID(v54);
            if (v56 == CFNumberGetTypeID()) {
              CFNumberGetValue(v55, kCFNumberSInt32Type, a2 + 990);
            }
          }
          CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C850]);
          if (v57)
          {
            CFNumberRef v58 = v57;
            CFTypeID v59 = CFGetTypeID(v57);
            if (v59 == CFNumberGetTypeID()) {
              CFNumberGetValue(v58, kCFNumberSInt32Type, a2 + 991);
            }
          }
          CFNumberRef v60 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C840]);
          if (v60)
          {
            CFNumberRef v61 = v60;
            CFTypeID v62 = CFGetTypeID(v60);
            if (v62 == CFNumberGetTypeID()) {
              CFNumberGetValue(v61, kCFNumberSInt32Type, a2 + 992);
            }
          }
          CFNumberRef v63 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C848]);
          if (v63)
          {
            CFNumberRef v64 = v63;
            CFTypeID v65 = CFGetTypeID(v63);
            if (v65 == CFNumberGetTypeID()) {
              CFNumberGetValue(v64, kCFNumberSInt32Type, a2 + 993);
            }
          }
          if (*((unsigned char *)a2 + 3956) && a2[987] && (a2[990] > 0 || a2[991] != 0x7FFFFFFF || a2[993] != 0x7FFFFFFF))
          {
            long long v66 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              long long v66 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v66;
            }
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              int valuePtr = 136315138;
              *(void *)long long v76 = "SetDepthEngineConfiguration";
              _os_log_impl(&dword_24680F000, v66, OS_LOG_TYPE_DEFAULT, "%s - Can not use HW GDR along with minimum depth threshold fusion\n", (uint8_t *)&valuePtr, 0xCu);
            }
            return 4294954516;
          }
          goto LABEL_105;
        }
        int v42 = H16ISP::DepthRearConfigurations::getPreset((H16ISP::DepthRearConfigurations *)HIDWORD(v74), v74, v21);
        if (v42 != 5)
        {
          a2[985] = v42;
LABEL_105:
          if (H16ISP::H16ISPDevice::hasSensorType(*(void *)(a4 + 24), 1919251564)
            && H16ISP::H16ISPDevice::hasSensorType(*(void *)(a4 + 24), 1919246706)
            && H16ISP::H16ISPDevice::hasSensorType(*(void *)(a4 + 24), 1919251319)
            && !H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), a2[33], 1919251564))
          {
            H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), a2[33], 1919246706);
          }
          CFDictionaryRef v67 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C800]);
          if (v67)
          {
            CFDictionaryRef v68 = v67;
            CFTypeID v69 = CFGetTypeID(v67);
            if (v69 == CFDictionaryGetTypeID())
            {
              *((void *)a2 + 50pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = CFDictionaryGetValue(v68, key);
              *((void *)a2 + 501) = CFDictionaryGetValue(v68, v72);
              *((void *)a2 + 502) = CFDictionaryGetValue(v68, v14);
              *((void *)a2 + 503) = CFDictionaryGetValue(v68, v71);
              *((void *)a2 + 504) = CFDictionaryGetValue(v68, v70);
            }
          }
          goto LABEL_28;
        }
      }
      return 4294954516;
    }
  }
  a2[984] = 0;
LABEL_28:
  if (*((void *)a2 + 17))
  {
    int v20 = a2[984];
    if (v6)
    {
      if (!v20)
      {
        if (*((unsigned char *)a2 + 3784))
        {
          H16ISP::ProjectorManager::setProjectorType(*((H16ISP::ProjectorManager **)a2 + 506), 0);
        }
        else if (CFArrayGetCount(*((CFArrayRef *)a2 + 486)))
        {
          unint64_t v44 = 0;
          do
          {
            CFArrayGetValueAtIndex(*((CFArrayRef *)a2 + 486), v44);
            FigCaptureStreamGetFigBaseObject();
            uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
            if (*(_DWORD *)(DerivedStorage + 3932) != 1)
            {
              uint64_t v46 = DerivedStorage;
              H16ISP::H16ISPDevice::EnablePDEOutput(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(DerivedStorage + 132), 0, 0);
              *(_DWORD *)(v46 + 3932) = 1;
            }
            ++v44;
          }
          while (v44 < CFArrayGetCount(*((CFArrayRef *)a2 + 486)));
        }
        H16ISP::H16ISPFrameReceiver::DisablePDEStreaming(*((H16ISP::H16ISPFrameReceiver **)a2 + 17));
      }
    }
    else if (v20)
    {
      EnablePCEStreamingInFrameReceiver(a4, (uint64_t)a2);
    }
  }
  return 0;
}

BOOL H16ISP::H16ISPDevice::hasSensorType(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4748);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  while (1)
  {
    if (v4 <= 5 && (uint64_t v5 = *(void *)(a1 + 4384) + v3, *(_DWORD *)(v5 + 8))) {
      int v6 = *(_DWORD *)(v5 + 16);
    }
    else {
      int v6 = -1;
    }
    if (v6 == a2) {
      break;
    }
    ++v4;
    v3 += 96;
    if (v2 == v4) {
      return 0;
    }
  }
  return v4 != 0xFFFFFFFF;
}

uint64_t H16ISP::DepthRearConfigurations::getHeightOfPreset(H16ISP::DepthRearConfigurations *this)
{
  if (this <= 4) {
    return *((unsigned int *)&H16ISP::PCERearPresets + 3 * this + 1);
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::DepthRearConfigurations::getWidthOfPreset(H16ISP::DepthRearConfigurations *this)
{
  if (this <= 4) {
    return *((unsigned int *)&H16ISP::PCERearPresets + 3 * this);
  }
  else {
    return 0;
  }
}

uint64_t CopyVideoOutputsColorInfo(uint64_t a1, __CFDictionary **a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 674))
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v7)
      {
        uint64_t v8 = v7;
        *(_OWORD *)value = 0u;
        *(_OWORD *)int v18 = 0u;
        GenerateBufferTagsForOutput(a3, a3 + 680, (uint64_t)value);
        if (value[0]) {
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F03ED8], value[0]);
        }
        if (value[1]) {
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F04020], value[1]);
        }
        if (v18[0]) {
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F03FC0], v18[0]);
        }
        if (v18[1]) {
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x263F03F90], v18[1]);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E918], v8);
        CFRelease(v8);
      }
      CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v9)
      {
        uint64_t v10 = v9;
        *(_OWORD *)value = 0u;
        *(_OWORD *)int v18 = 0u;
        GenerateBufferTagsForOutput(a3, a3 + 880, (uint64_t)value);
        if (value[0]) {
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F03ED8], value[0]);
        }
        if (value[1]) {
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F04020], value[1]);
        }
        if (v18[0]) {
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F03FC0], v18[0]);
        }
        if (v18[1]) {
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x263F03F90], v18[1]);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E928], v10);
        CFRelease(v10);
      }
      CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v11)
      {
        CFTypeID v12 = v11;
        *(_OWORD *)value = 0u;
        *(_OWORD *)int v18 = 0u;
        GenerateBufferTagsForOutput(a3, a3 + 1080, (uint64_t)value);
        if (value[0]) {
          CFDictionarySetValue(v12, (const void *)*MEMORY[0x263F03ED8], value[0]);
        }
        if (value[1]) {
          CFDictionarySetValue(v12, (const void *)*MEMORY[0x263F04020], value[1]);
        }
        if (v18[0]) {
          CFDictionarySetValue(v12, (const void *)*MEMORY[0x263F03FC0], v18[0]);
        }
        if (v18[1]) {
          CFDictionarySetValue(v12, (const void *)*MEMORY[0x263F03F90], v18[1]);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E900], v12);
        CFRelease(v12);
      }
      CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v13)
      {
        CFDictionaryRef v14 = v13;
        *(_OWORD *)value = 0u;
        *(_OWORD *)int v18 = 0u;
        GenerateBufferTagsForOutput(a3, a3 + 1280, (uint64_t)value);
        if (value[0]) {
          CFDictionarySetValue(v14, (const void *)*MEMORY[0x263F03ED8], value[0]);
        }
        if (value[1]) {
          CFDictionarySetValue(v14, (const void *)*MEMORY[0x263F04020], value[1]);
        }
        if (v18[0]) {
          CFDictionarySetValue(v14, (const void *)*MEMORY[0x263F03FC0], v18[0]);
        }
        if (v18[1]) {
          CFDictionarySetValue(v14, (const void *)*MEMORY[0x263F03F90], v18[1]);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E930], v14);
        CFRelease(v14);
      }
      uint64_t result = (uint64_t)CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (result)
      {
        int v16 = (__CFDictionary *)result;
        *(_OWORD *)value = 0u;
        *(_OWORD *)int v18 = 0u;
        GenerateBufferTagsForOutput(a3, a3 + 1480, (uint64_t)value);
        if (value[0]) {
          CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F03ED8], value[0]);
        }
        if (value[1]) {
          CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F04020], value[1]);
        }
        if (v18[0]) {
          CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F03FC0], v18[0]);
        }
        if (v18[1]) {
          CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F03F90], v18[1]);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E938], v16);
        CFRelease(v16);
        uint64_t result = 0;
      }
    }
    else
    {
      uint64_t result = 4294954510;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t result = 4294954509;
  }
  *a2 = Mutable;
  return result;
}

void GenerateBufferTagsForOutput(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v5 = a1 + 1280;
  uint64_t v6 = a1 + 1480;
  if (a1 + 680 == a2 || a1 + 880 == a2 || a1 + 1080 == a2 || v5 == a2 || v6 == a2)
  {
    BOOL v16 = v5 == a2 || v6 == a2;
    int v17 = *(_DWORD *)(a1 + 3916);
    int v18 = (void *)MEMORY[0x263F03F00];
    if (v17 != 2)
    {
      if (v17 == 1)
      {
        if (*(unsigned char *)(a1 + 3928)) {
          int v19 = v16;
        }
        else {
          int v19 = 1;
        }
        if (v19) {
          int v18 = (void *)MEMORY[0x263F03F20];
        }
      }
      else
      {
        int v18 = (void *)MEMORY[0x263F03F08];
      }
    }
    *(void *)a3 = *v18;
    int v20 = ColorRangeForOutput(a1, a2);
    int v21 = (void *)MEMORY[0x263F04028];
    CFStringRef v22 = (void *)MEMORY[0x263F04050];
    if (v20 != 2) {
      CFStringRef v22 = (void *)MEMORY[0x263F04038];
    }
    if (v20 == 4) {
      CFStringRef v22 = (void *)MEMORY[0x263F04028];
    }
    *(void *)(a3 + 8) = *v22;
    if (*(unsigned char *)(a1 + 3928)) {
      char v23 = v16;
    }
    else {
      char v23 = 1;
    }
    if ((v23 & 1) == 0) {
      *(void *)(a3 + 8) = *v21;
    }
    int v24 = *(_DWORD *)(a1 + 3920);
    if (v24 == 1)
    {
      unsigned int v26 = (void *)MEMORY[0x263F03FD0];
    }
    else
    {
      if (v24 == 3)
      {
        uint64_t v25 = *MEMORY[0x263F03F98];
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v25;
        return;
      }
      unsigned int v26 = (void *)MEMORY[0x263F03FD8];
    }
    *(void *)(a3 + 16) = *v26;
    *(void *)(a3 + 24) = 0;
  }
  else
  {
    CFMutableDictionaryRef v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFMutableDictionaryRef v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      GenerateBufferTagsForOutput(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

uint64_t ColorRangeForOutput(uint64_t a1, uint64_t a2)
{
  BOOL v4 = a1 + 1480 == a2 || a1 + 1280 == a2;
  uint64_t v5 = 148;
  if (v4) {
    uint64_t v5 = 152;
  }
  uint64_t v6 = *(unsigned int *)(a1 + v5);
  if ((H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(a2 + 16), &v12) & 1) == 0)
  {
    CFMutableDictionaryRef v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFMutableDictionaryRef v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ColorRangeForOutput();
    }
  }
  if (BYTE8(v12))
  {
    if (v6 == 2)
    {
      uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v8 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        ColorRangeForOutput();
      }
    }
    if (*(_DWORD *)(a1 + 3920) == 3)
    {
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        ColorRangeForOutput();
      }
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 3920) == 3) {
    return 4;
  }
  if (v6)
  {
    if (v6 != 1 && v6 != 2)
    {
      uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        ColorRangeForOutput();
      }
      return 0;
    }
  }
  else if (*(int *)(a2 + 20) <= 959)
  {
    return 1;
  }
  else
  {
    return 2;
  }
  return v6;
}

uint64_t H16ISP::getFrameFormatMetaInfo(int a1, _OWORD *a2)
{
  if (!a2) {
    return 0;
  }
  bzero(a2, 0x14uLL);
  uint64_t v4 = 0;
  while (*(_DWORD *)&supportedFormatMap[v4] != a1)
  {
    v4 += 20;
    if (v4 == 1280) {
      return 0;
    }
  }
  uint64_t v6 = &supportedFormatMap[v4];
  long long v7 = *(_OWORD *)v6;
  *((_DWORD *)a2 + 4) = *((_DWORD *)v6 + 4);
  *a2 = v7;
  return 1;
}

uint64_t H16ISP::DepthRearConfigurations::getPreset(H16ISP::DepthRearConfigurations *this, int a2, int a3)
{
  int v3 = (int)this;
  uint64_t result = 0;
  uint64_t v5 = &dword_2469DA8BC;
  do
  {
    if (*(v5 - 1) == v3 && *v5 == a2 && a3 == 0) {
      break;
    }
    v5 += 3;
    ++result;
  }
  while (result != 5);
  return result;
}

uint64_t H16ISP::DepthRearConfigurations::getRegistrationOfPreset(H16ISP::DepthRearConfigurations *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPDevice::SetScalerChromaSampleOffset(H16ISP::H16ISPDevice *a1, int a2, char a3, char a4, int a5)
{
  bzero(v11, 0x14uLL);
  __int16 v12 = 2826;
  int v13 = a2;
  char v14 = a3;
  char v15 = a4;
  int v16 = a5;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v11, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::DepthFrontConfigurations::getHeightOfPreset(H16ISP::DepthFrontConfigurations *this)
{
  if (this <= 4) {
    return *((unsigned int *)&H16ISP::PCEFrontPresets + 3 * this + 1);
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::DepthFrontConfigurations::getWidthOfPreset(H16ISP::DepthFrontConfigurations *this)
{
  if (this <= 4) {
    return *((unsigned int *)&H16ISP::PCEFrontPresets + 3 * this);
  }
  else {
    return 0;
  }
}

uint64_t resizeStillMetaPool(uint64_t a1, int a2, int *a3, int *a4)
{
  *a3 = 0;
  *a4 = 0;
  if (*(unsigned char *)(a1 + 1364))
  {
    uint64_t v8 = (_DWORD *)(a1 + 1368);
LABEL_7:
    int v9 = 2 * *v8 + 5;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 2364))
  {
    uint64_t v8 = (_DWORD *)(a1 + 2368);
    goto LABEL_7;
  }
  if (*(unsigned char *)(a1 + 1564))
  {
    uint64_t v8 = (_DWORD *)(a1 + 1568);
    goto LABEL_7;
  }
  int v9 = 3;
LABEL_8:
  *a3 = v9;
  int v10 = *(_DWORD *)(a1 + 1344);
  int v11 = *a4;
  if (v10 > *a4)
  {
    *a4 = v10;
    int v11 = v10;
  }
  int v12 = *(_DWORD *)(a1 + 1544);
  if (v12 > v11)
  {
    *a4 = v12;
    int v11 = v12;
  }
  int v13 = *(_DWORD *)(a1 + 2344);
  if (v13 > v11)
  {
    *a4 = v13;
    int v11 = v13;
  }
  if (*(void *)(a1 + 4336) || *(void *)(a1 + 4344))
  {
    int v14 = *(_DWORD *)(a1 + 4352);
    if (v14 > v11) {
      *a4 = v14;
    }
  }
  SensorRawComputeRetainedCountForCompanionPools(a1, a4);
  if (!a2) {
    return 0;
  }
  int v15 = *a4;
  int v16 = *a3;
  if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 8)) {
    return 0;
  }
  uint64_t v17 = H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(*(void *)(a1 + 136), 8, v16 + v15);
  if (v17)
  {
    int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v18 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      resizeStillMetaPool();
    }
  }
  return v17;
}

uint64_t SensorRawComputeRetainedCountForCompanionPools(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void **)(result + 4456);
  if (*(void *)(result + 4336) || v2 && (*v2 || v2[7] || v2[14]))
  {
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      if (v2 && v2[v3]) {
        v4 += HIDWORD(v2[v3 + 5]) & ~(SHIDWORD(v2[v3 + 5]) >> 31);
      }
      v3 += 7;
    }
    while (v3 != 21);
  }
  else
  {
    uint64_t v5 = 0;
    int v4 = 0;
    char v6 = 1;
    do
    {
      char v7 = v6;
      if (*(void *)(result + 48 * v5 + 4360)) {
        v4 += *(_DWORD *)(result + 48 * v5 + 4400) & ~(*(int *)(result + 48 * v5 + 4400) >> 31);
      }
      char v6 = 0;
      uint64_t v5 = 1;
    }
    while ((v7 & 1) != 0);
  }
  if (v4 > *a2) {
    *a2 = v4;
  }
  return result;
}

BOOL H16ISP::DepthFrontConfigurations::getRegistrationOfPreset(H16ISP::DepthFrontConfigurations *this)
{
  return (this - 2) < 3;
}

unint64_t H16ISP::DepthFrontConfigurations::getPreset(H16ISP::DepthFrontConfigurations *this, int a2, int a3)
{
  int v3 = (int)this;
  unint64_t result = 0;
  uint64_t v5 = &dword_2469DA880;
  do
  {
    if (*(v5 - 1) == v3 && result < 2 != a3 && *v5 == a2) {
      break;
    }
    v5 += 3;
    ++result;
  }
  while (result != 5);
  return result;
}

uint64_t SetSynchronizedStreamsSlaveConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1 || (CFTypeID v7 = CFGetTypeID(a1), v7 != CFDictionaryGetTypeID()))
  {
    int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      SetSynchronizedStreamsSlaveConfiguration();
    }
    return 4294954516;
  }
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E5C8]);
  int v9 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E5B8]);
  if (!Value)
  {
    int v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      SetSynchronizedStreamsSlaveConfiguration();
    }
    return 4294954516;
  }
  int v10 = v9;
  int v11 = (const void *)*MEMORY[0x263EFFB40];
  *(unsigned char *)(a2 + 3898) = CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  if (!v10)
  {
    uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v17 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      SetSynchronizedStreamsSlaveConfiguration();
    }
    return 4294954516;
  }
  *(unsigned char *)(a2 + 390pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = CFEqual(v10, v11) != 0;
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2E5C0]);
  if (v12)
  {
    int valuePtr = 0;
    CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
    int v13 = valuePtr;
  }
  else
  {
    int v13 = 0;
  }
  *(_DWORD *)(a2 + 3904) = v13;
  if (!*(void *)(a2 + 3888)) {
    return 0;
  }
  SuspendResumeStream(a4, a2);
  if (ApplySlaveConfiguration(a4, a2)) {
    return 4294954514;
  }
  else {
    return 0;
  }
}

uint64_t SetGroupMasterConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID() || !*(void *)(a3 + 104)) {
    return 4294954516;
  }
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2EAC0]);
  int v9 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2EAB0]);
  int v10 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2EAA8]);
  int v11 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2EAB8]);
  CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2EAC8]);
  if (Value) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = v9 == 0;
  }
  BOOL v15 = v13 && v10 == 0 && v11 == 0;
  CFDictionaryRef theDict = v12;
  if (v15 && v12 == 0)
  {
    CFArrayGetCount(*(CFArrayRef *)(a3 + 104));
    CFArrayRef Value = 0;
    int v9 = 0;
    goto LABEL_74;
  }
  if (*(_DWORD *)(a3 + 8) != 1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a3 + 104));
  int v18 = (CFTypeRef *)MEMORY[0x263EFFD08];
  if (Value)
  {
    if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFD08]))
    {
      v59.locatiouint64_t n = 0;
      v59.length = Count;
      if (!CFArrayContainsValue(*(CFArrayRef *)(a3 + 104), v59, Value)) {
        return 4294954516;
      }
    }
  }
  if (v9)
  {
    if (!CFEqual(v9, *v18))
    {
      v60.locatiouint64_t n = 0;
      v60.length = Count;
      if (!CFArrayContainsValue(*(CFArrayRef *)(a3 + 104), v60, v9)) {
        return 4294954516;
      }
    }
  }
  if (v10)
  {
    if (!CFEqual(v10, *v18))
    {
      v61.locatiouint64_t n = 0;
      v61.length = Count;
      if (!CFArrayContainsValue(*(CFArrayRef *)(a3 + 104), v61, v10)) {
        return 4294954516;
      }
    }
  }
  if (v11)
  {
    if (!CFEqual(v11, *v18))
    {
      v62.locatiouint64_t n = 0;
      v62.length = Count;
      if (!CFArrayContainsValue(*(CFArrayRef *)(a3 + 104), v62, v11)) {
        return 4294954516;
      }
    }
  }
  if (v10 && CFEqual(v9, *v18)) {
    int v9 = v10;
  }
  if (v11 && CFEqual(v9, *v18)) {
    int v9 = v11;
  }
  if (Value && CFEqual(Value, *v18)) {
    CFArrayRef Value = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), 0);
  }
  if (!theDict)
  {
LABEL_74:
    if (CFArrayGetCount(*(CFArrayRef *)(a3 + 104)))
    {
      unint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v37);
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (Value)
        {
          int v42 = CFEqual(ValueAtIndex, Value);
          *(unsigned char *)(DerivedStorage + 3896) = v42 != 0;
          if (v42) {
            uint64_t v39 = DerivedStorage;
          }
          SuspendResumeStream(a4, DerivedStorage);
        }
        if (v9)
        {
          int v43 = CFEqual(ValueAtIndex, v9);
          *(unsigned char *)(DerivedStorage + 3897) = v43 != 0;
          if (v43) {
            uint64_t v38 = DerivedStorage;
          }
        }
        ++v37;
      }
      while (v37 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
      if (Value
        && v39
        && H16ISP::H16ISPDevice::SetMaster(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(v39 + 132), *(_DWORD *)(v39 + 132)))
      {
        return 4294954514;
      }
      if (!v9) {
        return 0;
      }
      if (v38)
      {
        int SensorChannel = *(_DWORD *)(v38 + 132);
        int v45 = 1;
        goto LABEL_92;
      }
    }
    else if (!v9)
    {
      return 0;
    }
    int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(a4 + 24), 1919246706);
    int v45 = 0;
LABEL_92:
    if (!H16ISP::H16ISPDevice::SetStatsMaster(*(H16ISP::H16ISPDevice **)(a4 + 24), SensorChannel, v45)) {
      return 0;
    }
    return 4294954514;
  }
  memset(v57, 0, sizeof(v57));
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 104)))
  {
    CFIndex v19 = 0;
    uint64_t v52 = 0;
    int v54 = 0;
    int v20 = 0;
    unsigned __int16 v51 = 0;
    CFStringRef key = (void *)*MEMORY[0x263F2E5C8];
    CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x263EFFB40];
    CFTypeID v49 = (void *)*MEMORY[0x263F2E5D0];
    CFBooleanRef v48 = (void *)*MEMORY[0x263F2E5C0];
    while (1)
    {
      int v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v19);
      FigCaptureStreamGetFigBaseObject();
      uint64_t v22 = CMBaseObjectGetDerivedStorage();
      int v23 = *(_DWORD *)(*(void *)(*(void *)(a4 + 24) + 4384) + 96 * *(unsigned int *)(v22 + 132) + 16);
      int v24 = H16ISP::ModuleDescriptionToPortType(v23);
      CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v24);
      if (v25)
      {
        CFDictionaryRef v26 = v25;
        CFNumberRef v27 = CFDictionaryGetValue(v25, key);
        *(unsigned char *)(v22 + 3898) = CFEqual(v27, cf2) != 0;
        if (v23 == 1919246706)
        {
          if (H16ISP::H16ISPTimeOfFlightColorSynchronizer::isTeleDensificationEnabled(*(H16ISP::H16ISPTimeOfFlightColorSynchronizer **)(a4 + 240))
            && H16ISP::H16ISPTimeOfFlightColorSynchronizer::isTeleDensificationForceWideAllowed(*(uint64_t **)(a4 + 240), *(_DWORD *)(a3 + 8))&& !*(unsigned char *)(v22 + 3898))
          {
            if (H16ISP::H16ISPTimeOfFlightColorSynchronizer::isVerbose(*(H16ISP::H16ISPTimeOfFlightColorSynchronizer **)(a4 + 240)))
            {
              uint64_t v36 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v36 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v36;
              }
              log = v36;
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)int valuePtr = 0;
                _os_log_impl(&dword_24680F000, log, OS_LOG_TYPE_DEFAULT, "TimeOfFlightAutoFocusAssistant: Forcing wide\n", valuePtr, 2u);
              }
            }
            char v28 = 1;
            *(unsigned char *)(v22 + 3898) = 1;
          }
          else
          {
            char v28 = 0;
          }
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setWideForcedToStream(*(void *)(a4 + 240), v28);
        }
        CFTypeID v29 = CFDictionaryGetValue(v26, v49);
        *(unsigned char *)(v22 + 3899) = CFEqual(v29, cf2) != 0;
        *(_DWORD *)int valuePtr = 0;
        CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v26, v48);
        CFNumberGetValue(v30, kCFNumberSInt32Type, valuePtr);
        int v31 = *(_DWORD *)valuePtr;
        *(_DWORD *)(v22 + 3904) = *(_DWORD *)valuePtr;
        *(unsigned char *)(v22 + 390pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v31 > 1;
        CFTypeID v32 = &v57[v20];
        *(unsigned char *)CFTypeID v32 = *(_DWORD *)(v22 + 132);
        *((_DWORD *)v32 + 2) = v31;
        *((unsigned char *)v32 + 12) = *(unsigned char *)(v22 + 3899);
        *((_DWORD *)v32 + 1) = *(unsigned char *)(v22 + 3898) == 0;
        ++v20;
      }
      if (Value)
      {
        BOOL v33 = CFEqual(v21, Value) != 0;
        *(unsigned char *)(v22 + 3896) = v33;
        if (!v33) {
          goto LABEL_56;
        }
      }
      else if (!*(unsigned char *)(v22 + 3896))
      {
        goto LABEL_56;
      }
      unsigned __int16 v51 = *(_WORD *)(v22 + 132);
      if (v23 == 1919246706) {
        H16ISP::H16ISPTimeOfFlightColorSynchronizer::setWideForcedToStream(*(void *)(a4 + 240), 0);
      }
LABEL_56:
      if (!v9)
      {
        if (!*(unsigned char *)(v22 + 3897)) {
          goto LABEL_59;
        }
LABEL_58:
        LODWORD(v52) = *(_DWORD *)(v22 + 132);
        HIDWORD(v52) = 1;
        goto LABEL_59;
      }
      BOOL v34 = CFEqual(v21, v9) != 0;
      *(unsigned char *)(v22 + 3897) = v34;
      if (v34) {
        goto LABEL_58;
      }
LABEL_59:
      if (*(unsigned char *)(v22 + 3899))
      {
        int v35 = v54;
        if (!*(unsigned char *)(v22 + 3896)) {
          int v35 = v54 + 1;
        }
        int v54 = v35;
      }
      SuspendResumeStream(a4, v22);
      if (++v19 >= (unint64_t)CFArrayGetCount(*(CFArrayRef *)(a3 + 104))) {
        goto LABEL_95;
      }
    }
  }
  unsigned __int16 v51 = 0;
  uint64_t v52 = 0;
  LOBYTE(v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v54 = 0;
LABEL_95:
  if (v54 > *(_DWORD *)(a3 + 120)) {
    return 4294954516;
  }
  if (H16ISP::H16ISPDevice::SetMultiCamMasterSlaveConfiguration(*(H16ISP::H16ISPDevice **)(a4 + 24), v51 | 0x80000000, v51, v52, SHIDWORD(v52), v20, v57))return 4294954514; {
  return 0;
  }
}

uint64_t SuspendResumeStream(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 136))
  {
    if ((*(unsigned char *)(a2 + 680)
       || *(unsigned char *)(a2 + 880)
       || *(unsigned char *)(a2 + 1080)
       || *(unsigned char *)(a2 + 2480)
       || *(unsigned char *)(a2 + 2080)
       || *(unsigned char *)(a2 + 3608)
       || doesDisabledTofRequireBuffers(result, a2)
       || *(unsigned char *)(a2 + 1880)
       || *(unsigned char *)(a2 + 2680))
      && (!*(void *)(a2 + 3888) || *(unsigned char *)(a2 + 3896)))
    {
      unint64_t result = H16ISP::H16ISPFrameReceiver::IsSuspended(*(H16ISP::H16ISPFrameReceiver **)(a2 + 136));
      if (result)
      {
        int v3 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
        return H16ISP::H16ISPFrameReceiver::ResumeReceive(v3);
      }
    }
    else
    {
      unint64_t result = H16ISP::H16ISPFrameReceiver::IsSuspended(*(H16ISP::H16ISPFrameReceiver **)(a2 + 136));
      if ((result & 1) == 0)
      {
        int v4 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
        return H16ISP::H16ISPFrameReceiver::SuspendReceive(v4);
      }
    }
  }
  return result;
}

BOOL H16ISP::H16ISPFrameReceiver::IsSuspended(H16ISP::H16ISPFrameReceiver *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  BOOL v3 = *(_DWORD *)this == 2;
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t ApplySlaveConfiguration(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 132);
  int v5 = gCaptureDeviceCFPrefs[44 * v4 + 186];
  if (v5 == -1) {
    int v5 = *(_DWORD *)(a2 + 3904);
  }
  if (*(unsigned char *)(a2 + 3900)) {
    int v6 = v5;
  }
  else {
    int v6 = 1;
  }
  uint64_t v7 = H16ISP::H16ISPDevice::SetFrameSkippingRatio(*(H16ISP::H16ISPDevice **)(a1 + 24), v4, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      ApplySlaveConfiguration();
    }
  }
  else
  {
    uint64_t v8 = H16ISP::H16ISPDevice::SetSlaveProcessingConfig(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), *(unsigned char *)(a2 + 3898) == 0);
    if (v8)
    {
      int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        ApplySlaveConfiguration();
      }
    }
  }
  return v8;
}

uint64_t H16ISP::H16ISPDevice::SetSlaveProcessingConfig(H16ISP::H16ISPDevice *a1, __int16 a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 318;
  __int16 v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetFrameSkippingRatio(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 316;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

BOOL doesDisabledTofRequireBuffers(uint64_t a1, uint64_t a2)
{
  if (H16ISP::H16ISPDevice::getSensorType(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132)) != 1785950322) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 248)) {
    return 0;
  }
  int v4 = *(_WORD **)(a1 + 184);
  if (!v4 || !*v4) {
    return 0;
  }
  int v5 = 1 << *(_DWORD *)(a2 + 132);
  uint64_t v6 = (unsigned __int16)*v4 - 1;
  uint64_t v7 = v4 + 14;
  do
  {
    int v8 = *v7;
    v7 += 4;
    BOOL result = (v5 & v8) != 0;
  }
  while ((v5 & v8) == 0 && v6-- != 0);
  return result;
}

uint64_t H16ISP::H16ISPDevice::getSensorType(H16ISP::H16ISPDevice *this, unsigned int a2)
{
  if (a2 <= 5 && (uint64_t v2 = *((void *)this + 548), *(_DWORD *)(v2 + 96 * a2 + 8))) {
    return *(unsigned int *)(v2 + 96 * a2 + 16);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t SetGroupZoomFactor(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v30 = *(void *)(*(void *)(a4 + 24) + 4384);
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 4294954510;
  }
  int v11 = Mutable;
  float valuePtr = 1.0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
  float v12 = *(float *)(a2 + 3912);
  uint64_t v29 = a4;
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 104)))
  {
    unint64_t v13 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v13);
      FigCaptureStreamGetFigBaseObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(float *)(DerivedStorage + 3912) < v12) {
        float v12 = *(float *)(DerivedStorage + 3912);
      }
      ++v13;
    }
    while (v13 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 104)))
  {
    CFIndex v16 = 0;
    uint64_t v17 = (const void *)*MEMORY[0x263F2E918];
    int v18 = (const void *)*MEMORY[0x263F2E928];
    CFIndex v19 = (const void *)*MEMORY[0x263F2E900];
    while (1)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v16);
      FigCaptureStreamGetFigBaseObject();
      uint64_t v20 = CMBaseObjectGetDerivedStorage();
      int v21 = *(_DWORD *)(v30 + 96 * *(unsigned int *)(v20 + 132) + 16);
      int v31 = 1065353216;
      CFMutableDictionaryRef v22 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (!v22) {
        break;
      }
      int v23 = v22;
      float v24 = valuePtr * (float)(v12 / *(float *)(v20 + 3912));
      if (v24 < 1.0) {
        float v24 = 1.0;
      }
      int v31 = LODWORD(v24);
      CFNumberRef v25 = CFNumberCreate(v9, kCFNumberFloatType, &v31);
      CFDictionaryAddValue(v23, v17, v25);
      CFDictionaryAddValue(v23, v18, v25);
      CFDictionaryAddValue(v23, v19, v25);
      CFDictionaryRef v26 = H16ISP::ModuleDescriptionToPortType(v21);
      CFDictionaryAddValue(v11, v26, v23);
      CFRelease(v23);
      CFRelease(v25);
      if (++v16 >= (unint64_t)CFArrayGetCount(*(CFArrayRef *)(a3 + 104))) {
        goto LABEL_15;
      }
    }
    CFRelease(v11);
    return 4294954510;
  }
LABEL_15:
  uint64_t v27 = SetGroupZoomFactorsByOutput(v11, v15, a3, v29);
  CFRelease(v11);
  return v27;
}

uint64_t SetGroupZoomFactorsByOutput(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) + 4384);
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v27 = v7;
  char v28 = (uint64_t *)v29;
  float valuePtr = (void *)MEMORY[0x263F2E918];
  *((_DWORD *)std::__tree<std::__value_type<__CFString const*,eCIspOutputSelect>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,eCIspOutputSelect>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,eCIspOutputSelect>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v28, MEMORY[0x263F2E918], (uint64_t)&std::piecewise_construct, &valuePtr)+ 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  float valuePtr = (void *)MEMORY[0x263F2E928];
  *((_DWORD *)std::__tree<std::__value_type<__CFString const*,eCIspOutputSelect>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,eCIspOutputSelect>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,eCIspOutputSelect>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v28, MEMORY[0x263F2E928], (uint64_t)&std::piecewise_construct, &valuePtr)+ 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
  float valuePtr = (void *)MEMORY[0x263F2E900];
  *((_DWORD *)std::__tree<std::__value_type<__CFString const*,eCIspOutputSelect>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,eCIspOutputSelect>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,eCIspOutputSelect>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v28, MEMORY[0x263F2E900], (uint64_t)&std::piecewise_construct, &valuePtr)+ 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 2;
  if (a1 && (CFTypeID v8 = CFGetTypeID(a1), v8 == CFDictionaryGetTypeID()))
  {
    CFDictionaryRef v25 = a1;
    unint64_t v9 = 0;
    unsigned int v10 = 0;
    uint64_t v26 = a3;
    while (v9 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)))
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v9);
      FigCaptureStreamGetFigBaseObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      float v12 = H16ISP::ModuleDescriptionToPortType(*(_DWORD *)(v27 + 96 * *(unsigned int *)(DerivedStorage + 132) + 16));
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, v12);
      if (Value)
      {
        uint64_t v14 = 0;
        v31[4 * v10] = *(_DWORD *)(DerivedStorage + 132);
        do
        {
          v31[4 * v10 + 1 + v14] = vcvts_n_s32_f32(*(float *)(DerivedStorage + 3684 + 4 * v14), 0xAuLL);
          ++v14;
        }
        while (v14 != 3);
        uint64_t v15 = v28;
        if (v28 != (uint64_t *)v29)
        {
          do
          {
            CFIndex v16 = (const void *)v15[4];
            uint64_t v17 = *((unsigned int *)v15 + 10);
            LODWORD(valuePtr) = 1065353216;
            CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(Value, v16);
            if (v18)
            {
              CFNumberGetValue(v18, kCFNumberFloatType, &valuePtr);
              float v19 = *(float *)&valuePtr;
              *(_DWORD *)(DerivedStorage + 4 * v17 + 3684) = valuePtr;
              v31[4 * v10 + 1 + v17] = vcvts_n_s32_f32(v19, 0xAuLL);
            }
            uint64_t v20 = (uint64_t *)v15[1];
            if (v20)
            {
              do
              {
                int v21 = v20;
                uint64_t v20 = (uint64_t *)*v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                int v21 = (uint64_t *)v15[2];
                BOOL v22 = *v21 == (void)v15;
                uint64_t v15 = v21;
              }
              while (!v22);
            }
            uint64_t v15 = v21;
          }
          while (v21 != (uint64_t *)v29);
        }
        ++v10;
        a1 = v25;
        a3 = v26;
      }
      ++v9;
    }
    if (v10)
    {
      if (H16ISP::H16ISPDevice::SetMultiCamZoomFactor(*(H16ISP::H16ISPDevice **)(a4 + 24), v10, v31)) {
        uint64_t v23 = 4294954514;
      }
      else {
        uint64_t v23 = 0;
      }
    }
    else
    {
      uint64_t v23 = 4294954514;
    }
  }
  else
  {
    uint64_t v23 = 4294954516;
  }
  std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::destroy((uint64_t)&v28, v29[0]);
  return v23;
}

void sub_246849940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

uint64_t **std::__tree<std::__value_type<__CFString const*,eCIspOutputSelect>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,eCIspOutputSelect>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,eCIspOutputSelect>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    unsigned __int8 v11[4] = **a4;
    *((_DWORD *)v11 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t SetGroupActiveStreams(CFTypeRef cf, int a2, uint64_t a3, uint64_t a4)
{
  if (cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 != CFArrayGetTypeID()) {
      return 4294954516;
    }
    if (GetNumberOfActiveChannels((const __CFArray *)cf)) {
      return 4294954514;
    }
  }
  CFArrayRef v8 = *(const __CFArray **)(a3 + 104);
  if (v8)
  {
    if (GetNumberOfActiveChannels(v8)) {
      return 4294954514;
    }
  }
  if (*(void *)(a3 + 136) && *(void *)(a4 + 184))
  {
    unint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetGroupActiveStreams(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    return 4294954514;
  }
  if (cf && CFArrayGetCount((CFArrayRef)cf))
  {
    CFIndex v17 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v17);
      CFArrayRef v19 = *(const __CFArray **)(a3 + 16);
      v24.length = CFArrayGetCount(v19);
      v24.locatiouint64_t n = 0;
      if (!CFArrayContainsValue(v19, v24, ValueAtIndex)) {
        return 4294954516;
      }
      FigCaptureStreamGetFigBaseObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(DerivedStorage + 132), 1785950322)) {
        return 4294954516;
      }
    }
    while (++v17 < (unint64_t)CFArrayGetCount((CFArrayRef)cf));
  }
  if (ResetGroupSynchronization(a4, a3, *(CFArrayRef *)(a3 + 16), 0)) {
    return 4294954514;
  }
  BOOL v22 = *(const void **)(a3 + 104);
  if (v22) {
    CFRelease(v22);
  }
  if (cf)
  {
    CFArrayRef Copy = CFArrayCreateCopy(0, (CFArrayRef)cf);
    *(void *)(a3 + 104) = Copy;
    if (Copy && ResetGroupSynchronization(a4, a3, Copy, 1)) {
      return 4294954514;
    }
  }
  else
  {
    *(void *)(a3 + 104) = 0;
  }
  return 0;
}

uint64_t ResetGroupSynchronization(uint64_t a1, uint64_t a2, CFArrayRef theArray, int a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 4384);
  if (CFArrayGetCount(theArray))
  {
    unint64_t v8 = 0;
    char v9 = 0;
    char v10 = 0;
    int v11 = -1;
    do
    {
      if (CFArrayGetValueAtIndex(theArray, v8))
      {
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        unsigned int v13 = *(_DWORD *)(DerivedStorage + 132);
        if (*(_DWORD *)(v7 + 96 * v13 + 16) == 1785950322)
        {
          char v10 = 1;
        }
        else if (*(unsigned char *)(v7 + 96 * v13 + 64))
        {
          char v9 = 1;
          int v11 = *(_DWORD *)(DerivedStorage + 132);
        }
        else if (!(v9 & 1 | (v11 != -1)))
        {
          int v11 = *(_DWORD *)(DerivedStorage + 132);
        }
      }
      ++v8;
    }
    while (v8 < CFArrayGetCount(theArray));
  }
  else
  {
    char v10 = 0;
    int v11 = -1;
  }
  unint64_t v14 = 0;
  v50[0] = 0;
  v50[1] = 0;
  CFTypeID v49 = v50;
  unsigned int v15 = -536870212;
  uint64_t v16 = a2;
  while (v14 < CFArrayGetCount(theArray))
  {
    if (CFArrayGetValueAtIndex(theArray, v14))
    {
      FigCaptureStreamGetFigBaseObject();
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)(v17 + 3904) = -1;
      *(_DWORD *)(v17 + 3896) = 0;
      CFNumberRef v18 = *(const void **)(v17 + 3888);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(v17 + 3888) = 0;
      }
      if (a4 && (*(void *)(v17 + 3888) = theArray, CFRetain(theArray), *(void *)(v17 + 3888)))
      {
        if (*(_DWORD *)(a2 + 8) == 2) {
          int v19 = 2;
        }
        else {
          int v19 = 1;
        }
      }
      else
      {
        int v19 = 0;
      }
      unsigned int v15 = H16ISP::H16ISPDevice::SetMasterSlaveSync(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(v17 + 132), v19);
      if (v15)
      {
        BOOL v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          BOOL v22 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          ResetGroupSynchronization();
        }
        goto LABEL_47;
      }
      if (v11 == *(_DWORD *)(v17 + 132))
      {
        int v20 = v11;
        if (*(_DWORD *)(a2 + 8) == 1)
        {
          unsigned int v15 = H16ISP::H16ISPDevice::SetMaster(*(H16ISP::H16ISPDevice **)(a1 + 24), v11, v11);
          if (v15)
          {
            CFRange v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              CFRange v24 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              ResetGroupSynchronization();
            }
            goto LABEL_47;
          }
          int v20 = *(_DWORD *)(v17 + 132);
        }
        unsigned int v15 = H16ISP::H16ISPDevice::SetStatsMaster(*(H16ISP::H16ISPDevice **)(a1 + 24), v20, 0);
        if (v15)
        {
          uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v23 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            ResetGroupSynchronization();
          }
LABEL_47:
          uint64_t v16 = a2;
          break;
        }
        *(unsigned char *)(v17 + 3896) = 1;
      }
      if (v10)
      {
        int v21 = (int *)(v7 + 96 * *(unsigned int *)(v17 + 132) + 16);
        std::__tree<camera_module_description>::__emplace_unique_key_args<camera_module_description,camera_module_description const&>(&v49, v21, v21);
      }
      unsigned int v15 = 0;
    }
    ++v14;
  }
  H16ISP::H16ISPTimeOfFlightColorSynchronizer::setWideForcedToStream(*(void *)(a1 + 240), 0);
  CFArrayRef v25 = *(const __CFArray **)(v16 + 104);
  if (v25) {
    BOOL v26 = v15 == 0;
  }
  else {
    BOOL v26 = 0;
  }
  char v27 = !v26;
  char v28 = v27 | v10;
  if (v26) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v15;
  }
  if ((v28 & 1) == 0)
  {
    CFArrayGetValueAtIndex(v25, 0);
    FigCaptureStreamGetFigBaseObject();
    uint64_t v30 = CMBaseObjectGetDerivedStorage();
    int v31 = *(unsigned __int16 *)(v30 + 132);
    if (*(void *)(v30 + 3888) && !*(unsigned char *)(v30 + 3908)) {
      v31 |= 0x80000000;
    }
    uint64_t v29 = H16ISP::H16ISPDevice::SetMinimumFrameSkippingRatio(*(H16ISP::H16ISPDevice **)(a1 + 24), v31, *(_DWORD *)(v16 + 112));
    if (v29)
    {
      uint64_t v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v32 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v32;
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        ResetGroupSynchronization();
      }
    }
  }
  BOOL v33 = (void *)v50[0];
  if (v10)
  {
    if (!v50[0]) {
      goto LABEL_77;
    }
    BOOL v34 = (int *)v50;
    int v35 = (int *)v50[0];
    do
    {
      uint64_t v36 = v35;
      unint64_t v37 = v34;
      int v38 = v35[7];
      if (v38 >= 1919246706) {
        BOOL v34 = v35;
      }
      else {
        v35 += 2;
      }
      int v35 = *(int **)v35;
    }
    while (v35);
    if (v34 == (int *)v50) {
      goto LABEL_77;
    }
    if (v38 < 1919246706) {
      uint64_t v36 = v37;
    }
    if (v36[7] > 1919246706) {
LABEL_77:
    }
      BOOL v34 = (int *)v50;
    if (v50[0])
    {
      uint64_t v39 = (int *)v50;
      uint64_t v40 = (int *)v50[0];
      do
      {
        int v41 = v40;
        int v42 = v39;
        int v43 = v40[7];
        if (v43 >= 1919251319) {
          uint64_t v39 = v40;
        }
        else {
          v40 += 2;
        }
        uint64_t v40 = *(int **)v40;
      }
      while (v40);
      if (v39 != (int *)v50)
      {
        if (v43 < 1919251319) {
          int v41 = v42;
        }
        if (v41[7] <= 1919251319 && v34 == (int *)v50)
        {
          int v45 = *(H16ISP::H16ISPDevice **)(a1 + 24);
          int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel((uint64_t)v45, 1919251319);
          H16ISP::H16ISPDevice::WritePropertyValue(v45, SensorChannel, 1344, 1, 0xFFFFFFFF);
          BOOL v33 = (void *)v50[0];
        }
      }
    }
  }
  std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::destroy((uint64_t)&v49, v33);
  return v29;
}

void sub_24684A0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t H16ISP::H16ISPDevice::SetMasterSlaveSync(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 312;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t **std::__tree<camera_module_description>::__emplace_unique_key_args<camera_module_description,camera_module_description const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        __int16 v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    __int16 v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  BOOL result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      BOOL v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            int v9 = (uint64_t **)a2[2];
          }
          else
          {
            int v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _OWORD v10[2] = (uint64_t)v2;
              BOOL v3 = (uint64_t *)v2[2];
            }
            unsigned char v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *int v9 = v2;
            v2[2] = (uint64_t)v9;
            BOOL v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            BOOL v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          BOOL v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::setWideForcedToStream(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(this + 24) + 8) + 225) = a2;
  return this;
}

uint64_t H16ISP::H16ISPDevice::SetStatsMaster(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 30;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetMaster(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 314;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetMinimumFrameSkippingRatio(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 340;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetMultiCamZoomFactor(H16ISP::H16ISPDevice *a1, unsigned int a2, const void *a3)
{
  if (a2 > 6) {
    return 3758097090;
  }
  *(void *)&v12[82] = v3;
  uint64_t v13 = v4;
  bzero(v9, 0x3CuLL);
  __int16 v10 = 13314;
  __int16 v11 = a2;
  memcpy(v12, a3, 8 * a2);
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v9, 0x3Cu, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetMultiCamMasterSlaveConfiguration(H16ISP::H16ISPDevice *a1, int a2, char a3, char a4, int a5, unsigned int a6, const void *a7)
{
  bzero(v15, 0x58uLL);
  __int16 v16 = 13318;
  int v17 = a2;
  char v18 = a3;
  char v19 = a4;
  int v20 = a5;
  char v21 = a6;
  memcpy(&v22, a7, 16 * a6);
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v15, 0x58u, 0, 0xFFFFFFFF);
}

uint64_t CopyMFDCameraFaceUp(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (H16ISP::H16ISPDevice::GetAFMinimumObjectDistance(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v11))
  {
    CFNumberRef v7 = 0;
    uint64_t v8 = 4294954513;
  }
  else
  {
    float valuePtr = (float)SHIDWORD(v11) * 0.0039062;
    CFNumberRef v7 = CFNumberCreate(a1, kCFNumberFloatType, &valuePtr);
    uint64_t v8 = 0;
  }
  *a2 = v7;
  return v8;
}

uint64_t CopyMFDCameraFaceDown(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (H16ISP::H16ISPDevice::GetAFMinimumObjectDistance(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v11))
  {
    CFNumberRef v7 = 0;
    uint64_t v8 = 4294954513;
  }
  else
  {
    float valuePtr = (float)(int)v11 * 0.0039062;
    CFNumberRef v7 = CFNumberCreate(a1, kCFNumberFloatType, &valuePtr);
    uint64_t v8 = 0;
  }
  *a2 = v7;
  return v8;
}

uint64_t H16ISP::H16ISPDevice::GetAFMinimumObjectDistance(H16ISP::H16ISPDevice *a1, int a2, void *a3)
{
  bzero(v7, 0x14uLL);
  __int16 v8 = 1966;
  int v9 = a2;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x14u, 0, 0xFFFFFFFF);
  if (!result) {
    *a3 = v10;
  }
  return result;
}

uint64_t H16ISP::PoolAllocatorThreadStart(uint64_t a1)
{
  pthread_setname_np("H16ISPFrameReceiverPoolAllocatorThread");
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)(v2 + 8 * (*(void *)(a1 + 32) >> 9));
  if (v3 == v2) {
    int v5 = 0;
  }
  else {
    int v5 = (H16ISP::H16ISPFrameReceiverBufferPool **)(*v4 + 8 * (*(void *)(a1 + 32) & 0x1FFLL));
  }
  for (int i = -536870212; ; int i = 0)
  {
    if (v3 == v2)
    {
      uint64_t v8 = 0;
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 40) + *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(v2 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF);
    }
    if (v5 == (H16ISP::H16ISPFrameReceiverBufferPool **)v8) {
      break;
    }
    int i = H16ISP::H16ISPFrameReceiverBufferPool::activatePool(*v5, 0);
    if (i) {
      break;
    }
    if ((H16ISP::H16ISPFrameReceiverBufferPool **)((char *)++v5 - *v4) == (H16ISP::H16ISPFrameReceiverBufferPool **)4096)
    {
      int v9 = (H16ISP::H16ISPFrameReceiverBufferPool **)v4[1];
      ++v4;
      int v5 = v9;
    }
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(a1 + 16);
  }
  *(_DWORD *)(a1 + 48) = i;
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::startReceive(H16ISP::H16ISPFrameReceiver *this)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  pthread_t v78 = 0;
  memset(v76, 0, sizeof(v76));
  int32x2_t v75 = 0;
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  if (!*(_DWORD *)this)
  {
    kdebug_trace();
    int v4 = *((unsigned __int8 *)this + 808);
    if (!*((unsigned char *)this + 808))
    {
      std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::operator=(v76, (void *)this + 80);
      *(void *)CFRange v79 = 48;
      pthread_attr_init(&inputStruct);
      pthread_attr_setschedparam(&inputStruct, (const sched_param *)v79);
      pthread_attr_setdetachstate(&inputStruct, 1);
      pthread_create(&v78, &inputStruct, (void *(__cdecl *)(void *))H16ISP::PoolAllocatorThreadStart, v76);
      pthread_attr_destroy(&inputStruct);
    }
    *((unsigned char *)this + 362) = 0;
    *(_DWORD *)this = 1;
    *((void *)this + 48) = 0;
    *((void *)this + 46) = -1;
    *((_WORD *)this + 188) = 1;
    *((unsigned char *)this + 378) = 0;
    uint64_t v5 = &_os_log_internal;
    if (*((unsigned char *)this + 361))
    {
      int v6 = *((_DWORD *)this + 84);
      LODWORD(inputStruct.__sig) = *((_DWORD *)this + 91);
      *(_DWORD *)&inputStruct.__opaque[16] = v6;
      *(void *)inputStruct.__opaque = H16ISP::H16ISPFrameReceiver::EPipeDone;
      *(void *)&inputStruct.__opaque[8] = this;
      if (H16ISP::H16ISPDevice::ISP_RegisterEPipeDoneCallback(*((void *)this + 41), &inputStruct))
      {
        unint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
        {
          unint64_t v7 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v7;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiver::startReceive();
        }
      }
    }
    if (*((unsigned char *)this + 452))
    {
      uint64_t started = H16ISP::H16ISPFrameReceiver::StartFaceDetect((H16ISP::H16ISPDevice **)this);
      if (started)
      {
        uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
        {
          uint64_t v8 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v8;
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiver::startReceive();
        }
      }
    }
    else
    {
      uint64_t started = 0;
    }
    int v74 = 0;
    H16ISP::H16ISPDevice::GetCameraCurrentConfig(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), &v74, (uint64_t)&inputStruct);
    if (v9)
    {
      uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
      {
        uint64_t v10 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::startReceive();
      }
    }
    if (inputStruct.__opaque[8]) {
      unsigned int v11 = (*(_DWORD *)&inputStruct.__opaque[8] >> 8) + 1;
    }
    else {
      unsigned int v11 = *(_DWORD *)&inputStruct.__opaque[8] >> 8;
    }
    if (*((_DWORD *)this + 111)) {
      H16ISP::H16ISPDevice::SetMaximumFrameRate(*((H16ISP::H16ISPDevice **)this + 41), *((unsigned int *)this + 91));
    }
    if (*((_DWORD *)this + 112) >= v11) {
      H16ISP::H16ISPDevice::SetMinimumFrameRate(*((H16ISP::H16ISPDevice **)this + 41), *((unsigned int *)this + 91));
    }
    if (*((unsigned char *)this + 416)
      && H16ISP::H16ISPDevice::EnableTNR(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), (uint64_t)this + 416))
    {
      uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
      {
        uint64_t v12 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v12;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::startReceive();
      }
    }
    if (*((unsigned char *)this + 920))
    {
      uint64_t v13 = *((void *)this + 81);
      unint64_t v14 = (void *)(v13 + 8 * (*((void *)this + 84) >> 9));
      uint64_t v15 = *((void *)this + 82);
      if (v15 == v13) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = (H16ISP::H16ISPFrameReceiverBufferPool **)(*v14 + 8 * (*((void *)this + 84) & 0x1FFLL));
      }
      while (1)
      {
        if (v15 == v13)
        {
          uint64_t v22 = 0;
        }
        else
        {
          unint64_t v21 = *((void *)this + 85) + *((void *)this + 84);
          uint64_t v22 = *(void *)(v13 + ((v21 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v21 & 0x1FF);
        }
        if (v16 == (H16ISP::H16ISPFrameReceiverBufferPool **)v22) {
          break;
        }
        int v17 = *v16;
        if (*(unsigned char *)*v16)
        {
          int v18 = *((_DWORD *)v17 + 4);
          if (v18 == 38 || v18 == 2) {
            H16ISP::H16ISPFrameReceiver::sendInitialBuffersToFirmware(this, v17);
          }
        }
        if ((H16ISP::H16ISPFrameReceiverBufferPool **)((char *)++v16 - *v14) == (H16ISP::H16ISPFrameReceiverBufferPool **)4096)
        {
          int v20 = (H16ISP::H16ISPFrameReceiverBufferPool **)v14[1];
          ++v14;
          __int16 v16 = v20;
        }
        uint64_t v13 = *((void *)this + 81);
        uint64_t v15 = *((void *)this + 82);
      }
      uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
      {
        uint64_t v23 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v23;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *((_DWORD *)this + 91);
        BOOL v25 = *((unsigned char *)this + 360) == 0;
        *(_DWORD *)CFRange v79 = 136315906;
        *(void *)&v79[4] = "startReceive";
        __int16 v80 = 1024;
        int v81 = 1912;
        __int16 v82 = 1024;
        int v83 = v24;
        __int16 v84 = 1024;
        BOOL v85 = v25;
        _os_log_impl(&dword_24680F000, v23, OS_LOG_TYPE_DEFAULT, "%s - [%d] [CIL] Call ISP_CILRequestPerChannel (%u/%u)\n", v79, 0x1Eu);
      }
      int v26 = H16ISP::H16ISPDevice::ISP_CILRequestPerChannel(*((mach_port_t **)this + 41), *((_DWORD *)this + 91), *((unsigned char *)this + 360) == 0);
      if (v26)
      {
        char v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
        {
          char v27 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v27;
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          int v70 = *((_DWORD *)this + 91);
          BOOL v71 = *((unsigned char *)this + 360) == 0;
          *(_DWORD *)CFRange v79 = 136316162;
          *(void *)&v79[4] = "startReceive";
          __int16 v80 = 1024;
          int v81 = 1918;
          __int16 v82 = 1024;
          int v83 = v26;
          __int16 v84 = 1024;
          BOOL v85 = v70;
          __int16 v86 = 1024;
          BOOL v87 = v71;
          _os_log_error_impl(&dword_24680F000, v27, OS_LOG_TYPE_ERROR, "%s - Calling ISP_CILRequestPerChannel(Line:%d) error: 0x%08X (%u/%u)\n", v79, 0x24u);
        }
      }
      if (!H16ISP::H16ISPDevice::StartCamera(*((H16ISP::H16ISPDevice **)this + 41), 1 << *((_DWORD *)this + 91)))
      {
        *((unsigned char *)this + 363) = 1;
        if (v4) {
          goto LABEL_69;
        }
        goto LABEL_94;
      }
      char v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
      {
        char v28 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v28;
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::startReceive();
      }
    }
    if (v4) {
      goto LABEL_69;
    }
LABEL_94:
    pthread_join(v78, &v75);
    if (v77)
    {
      uint64_t started = 3758097085;
      goto LABEL_128;
    }
    *((unsigned char *)this + 808) = 1;
    uint64_t v46 = *((void *)this + 81);
    CFBooleanRef v47 = (void *)(v46 + 8 * (*((void *)this + 84) >> 9));
    uint64_t v48 = *((void *)this + 82);
    if (v48 == v46) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *v47 + 8 * (*((void *)this + 84) & 0x1FFLL);
    }
    while (1)
    {
      if (v48 == v46)
      {
        uint64_t v62 = 0;
      }
      else
      {
        unint64_t v61 = *((void *)this + 85) + *((void *)this + 84);
        uint64_t v62 = *(void *)(v46 + ((v61 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v61 & 0x1FF);
      }
      if (v49 == v62) {
        break;
      }
      CFNumberRef v57 = (void (*)(uint64_t, void, void, uint64_t, void, void))*((void *)this + 6);
      if (v57)
      {
        uint64_t v58 = *(void *)v49;
        uint64_t v59 = *(void *)(*(void *)v49 + 184);
        if (!v59) {
          uint64_t v59 = *(void *)(v58 + 160);
        }
        v57(7, *(unsigned int *)(v58 + 16), 0, v59, *(void *)(v58 + 168), *((void *)this + 7));
      }
      v49 += 8;
      if (v49 - *v47 == 4096)
      {
        uint64_t v60 = v47[1];
        ++v47;
        uint64_t v49 = v60;
      }
      uint64_t v46 = *((void *)this + 81);
      uint64_t v48 = *((void *)this + 82);
    }
LABEL_69:
    unsigned int v29 = *((_DWORD *)this + 216);
    if (v29 <= 0x64)
    {
      unsigned int v30 = *((_DWORD *)this + 91);
      if (v30 <= 1) {
        H16ISP::H16ISPDevice::SetOISContactStop(*((H16ISP::H16ISPDevice **)this + 41), v30, v29);
      }
    }
    uint64_t v31 = *((void *)this + 87);
    uint64_t v32 = (void *)(v31 + 8 * (*((void *)this + 90) >> 9));
    uint64_t v33 = *((void *)this + 88);
    if (v33 == v31) {
      BOOL v34 = 0;
    }
    else {
      BOOL v34 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)(*v32 + 8 * (*((void *)this + 90) & 0x1FFLL));
    }
    while (1)
    {
      if (v33 == v31)
      {
        uint64_t v39 = 0;
      }
      else
      {
        unint64_t v38 = *((void *)this + 91) + *((void *)this + 90);
        uint64_t v39 = *(void *)(v31 + ((v38 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v38 & 0x1FF);
      }
      if (v34 == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v39) {
        break;
      }
      int v35 = *v34;
      uint64_t Pool = H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(**v34);
      if ((*(unsigned char *)(Pool + 116) & 1) == 0)
      {
        if (*((unsigned char *)v35 + 8))
        {
          if (*(_DWORD *)(Pool + 112))
          {
            uint64_t started = H16ISP::H16ISPFrameReceiver::sendInitialBuffersToFirmware((H16ISP::H16ISPFrameReceiver *)Pool, *v35);
            if (started) {
              goto LABEL_128;
            }
          }
        }
      }
      if ((H16ISP::H16ISPFrameReceiverSharedBufferPool ***)((char *)++v34 - *v32) == (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)4096)
      {
        unint64_t v37 = (H16ISP::H16ISPFrameReceiverSharedBufferPool ***)v32[1];
        ++v32;
        BOOL v34 = v37;
      }
      uint64_t v31 = *((void *)this + 87);
      uint64_t v33 = *((void *)this + 88);
    }
    if (started) {
      goto LABEL_128;
    }
    uint64_t v40 = (H16ISP::H16ISPFrameReceiverDataBufferPool *)*((void *)this + 98);
    if (v40 && (uint64_t started = H16ISP::H16ISPFrameReceiver::sendInitialDataBuffersToFirmware(this, v40), started))
    {
      int v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
      {
        int v41 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v41;
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::startReceive();
      }
    }
    else
    {
      uint64_t v42 = *((void *)this + 81);
      int v43 = (void *)(v42 + 8 * (*((void *)this + 84) >> 9));
      uint64_t v44 = *((void *)this + 82);
      if (v44 == v42) {
        int v45 = 0;
      }
      else {
        int v45 = (H16ISP::H16ISPFrameReceiverBufferPool **)(*v43 + 8 * (*((void *)this + 84) & 0x1FFLL));
      }
      while (1)
      {
        if (v44 == v42)
        {
          uint64_t v51 = 0;
        }
        else
        {
          unint64_t v50 = *((void *)this + 85) + *((void *)this + 84);
          uint64_t v51 = *(void *)(v42 + ((v50 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v50 & 0x1FF);
        }
        if (v45 == (H16ISP::H16ISPFrameReceiverBufferPool **)v51) {
          break;
        }
        uint64_t v52 = *v45;
        if (!*((_DWORD *)*v45 + 30))
        {
          if (*((_DWORD *)v52 + 28))
          {
            int v54 = *((_DWORD *)v52 + 29);
            if ((v54 & 0x400) == 0)
            {
              if (v54)
              {
                if (H16ISP::getPixelFormatFromMetaInfo(*((_DWORD *)v52 + 10), *((unsigned __int8 *)v52 + 88), &inputStruct))
                {
                  if (*((_DWORD *)v52 + 4) == 7 && *(_DWORD *)&inputStruct.__opaque[8] == 2)
                  {
                    uint64_t started = H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*((H16ISP::H16ISPDevice **)this + 41), *((_DWORD *)this + 91), 7, 1, 2, 2u, (char *)v52 + 336);
                    if (started)
                    {
                      CFNumberRef v55 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
                      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
                      {
                        CFNumberRef v55 = os_log_create("com.apple.isp", "general");
                        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v55;
                      }
                      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                        H16ISP::H16ISPFrameReceiver::startReceive();
                      }
                      goto LABEL_128;
                    }
                  }
                }
              }
              else
              {
                uint64_t started = H16ISP::H16ISPFrameReceiver::sendInitialBuffersToFirmware(this, *v45);
                if (started) {
                  goto LABEL_128;
                }
              }
            }
          }
        }
        if ((H16ISP::H16ISPFrameReceiverBufferPool **)((char *)++v45 - *v43) == (H16ISP::H16ISPFrameReceiverBufferPool **)4096)
        {
          int v53 = (H16ISP::H16ISPFrameReceiverBufferPool **)v43[1];
          ++v43;
          int v45 = v53;
        }
        uint64_t v42 = *((void *)this + 81);
        uint64_t v44 = *((void *)this + 82);
      }
      if (!*((unsigned char *)this + 920))
      {
        CFNumberRef v63 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
        {
          CFNumberRef v63 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v63;
        }
        BOOL v64 = os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
        unsigned int v65 = *((_DWORD *)this + 91);
        if (v64)
        {
          BOOL v66 = *((unsigned char *)this + 360) == 0;
          LODWORD(inputStruct.__sig) = 136315906;
          *(uint64_t *)((char *)&inputStruct.__sig + 4) = (uint64_t)"startReceive";
          *(_WORD *)&inputStruct.__opaque[4] = 1024;
          *(_DWORD *)&inputStruct.__opaque[6] = 2034;
          *(_WORD *)&inputStruct.__opaque[10] = 1024;
          *(_DWORD *)&inputStruct.__opaque[12] = v65;
          *(_WORD *)&inputStruct.__opaque[16] = 1024;
          *(_DWORD *)&inputStruct.__opaque[18] = v66;
          _os_log_impl(&dword_24680F000, v63, OS_LOG_TYPE_DEFAULT, "%s - [%d] [CIL] Call ISP_CILRequestPerChannel (%u/%u)\n", (uint8_t *)&inputStruct, 0x1Eu);
          unsigned int v65 = *((_DWORD *)this + 91);
        }
        int v67 = H16ISP::H16ISPDevice::ISP_CILRequestPerChannel(*((mach_port_t **)this + 41), v65, *((unsigned char *)this + 360) == 0);
        if (v67)
        {
          CFDictionaryRef v68 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
          {
            CFDictionaryRef v68 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v68;
          }
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            int v72 = *((_DWORD *)this + 91);
            BOOL v73 = *((unsigned char *)this + 360) == 0;
            LODWORD(inputStruct.__sig) = 136316162;
            *(uint64_t *)((char *)&inputStruct.__sig + 4) = (uint64_t)"startReceive";
            *(_WORD *)&inputStruct.__opaque[4] = 1024;
            *(_DWORD *)&inputStruct.__opaque[6] = 2038;
            *(_WORD *)&inputStruct.__opaque[10] = 1024;
            *(_DWORD *)&inputStruct.__opaque[12] = v67;
            *(_WORD *)&inputStruct.__opaque[16] = 1024;
            *(_DWORD *)&inputStruct.__opaque[18] = v72;
            *(_WORD *)&inputStruct.__opaque[22] = 1024;
            *(_DWORD *)&inputStruct.__opaque[24] = v73;
            _os_log_error_impl(&dword_24680F000, v68, OS_LOG_TYPE_ERROR, "%s - Calling ISP_CILRequestPerChannel(Line:%d) error: 0x%08X (%u/%u)\n", (uint8_t *)&inputStruct, 0x24u);
          }
        }
        uint64_t started = H16ISP::H16ISPDevice::StartCamera(*((H16ISP::H16ISPDevice **)this + 41), 1 << *((_DWORD *)this + 91));
        if (started)
        {
          CFTypeID v69 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v5)
          {
            CFTypeID v69 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v69;
          }
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::startReceive();
          }
          goto LABEL_128;
        }
        *((unsigned char *)this + 363) = 1;
      }
      if (*((_DWORD *)this + 112)) {
        H16ISP::H16ISPFrameReceiver::startNoDataTimer(this);
      }
      if (*((unsigned char *)this + 512)) {
        H16ISP::H16ISPFrameReceiver::startProjectorWatchdogTimer(this);
      }
      uint64_t started = 0;
    }
LABEL_128:
    pthread_mutex_unlock(v2);
    kdebug_trace();
    goto LABEL_129;
  }
  pthread_mutex_unlock(v2);
  uint64_t started = 3758097122;
LABEL_129:
  std::deque<__CVBuffer *>::~deque[abi:ne180100](v76);
  return started;
}

void sub_24684B510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  uint64_t v6 = *(void *)(a1 + 648);
  unint64_t v7 = *(void *)(a1 + 672);
  uint64_t v8 = (void *)(v6 + 8 * (v7 >> 9));
  uint64_t v9 = *(void *)(a1 + 656);
  if (v9 == v6) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *v8 + 8 * (*(void *)(a1 + 672) & 0x1FFLL);
  }
LABEL_4:
  uint64_t v11 = v10 - 4096;
  while (1)
  {
    uint64_t v12 = v9 == v6
        ? 0
        : *(void *)(v6 + (((*(void *)(a1 + 680) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(void *)(a1 + 680) + v7) & 0x1FF);
    if (v10 == v12) {
      operator new();
    }
    if (*(_DWORD *)(*(void *)v10 + 20) == a3) {
      break;
    }
    v10 += 8;
    v11 += 8;
    if (*v8 == v11)
    {
      uint64_t v13 = v8[1];
      ++v8;
      uint64_t v10 = v13;
      goto LABEL_4;
    }
  }
  pthread_mutex_unlock(v5);
  return 3758097122;
}

void sub_24684B9A0(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10E0C404726C66ELL);
  _Unwind_Resume(a1);
}

void MyH16ISPFrameReceiverMessageProc(int a1, unsigned int a2, int a3, void *a4, void *a5, void *a6)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v12 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)CMTime buf = 67109120;
    int v42 = a1;
    _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_INFO, "MyH16ISPFrameReceiverMessageProc: msg = 0x%08X\n\n", buf, 8u);
  }
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  if (a1 == 2)
  {
    *(unsigned char *)(DerivedStorage + 528) = 0;
    return;
  }
  uint64_t v15 = v14;
  if (a1 == 1)
  {
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      int64_t v22 = FigHostTimeToNanoseconds();
      CMTimeMake(&time, v22, 1000000000);
      CFDictionaryRef v23 = CMTimeCopyAsDictionary(&time, v20);
      if (v23)
      {
        CFDictionaryRef v24 = v23;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D6E8], v23);
        CFRelease(v24);
      }
    }
    BOOL v25 = (const __CFString **)MEMORY[0x263F2D700];
    goto LABEL_27;
  }
  if (!a1)
  {
    __int16 v16 = (const void *)*MEMORY[0x263F2D710];
    H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D710], a6, 0);
    if ((*(unsigned char *)(v15 + 154) & 4) != 0)
    {
      uint64_t v17 = v15;
      uint64_t v18 = DerivedStorage;
      char v19 = v16;
LABEL_10:
      LogCaptureDeviceEvent(0x12u, v17, v18, 0, v19, 0, 1);
      return;
    }
    return;
  }
  if ((a1 - 3) <= 2)
  {
    CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      int64_t v27 = FigHostTimeToNanoseconds();
      CMTimeMake(&v39, v27, 1000000000);
      CFDictionaryRef v28 = CMTimeCopyAsDictionary(&v39, v26);
      if (v28)
      {
        CFDictionaryRef v29 = v28;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D6E0], v28);
        CFRelease(v29);
      }
      unsigned int v30 = (const void **)MEMORY[0x263F2EA98];
      if (!(a3 | a2))
      {
        unsigned int v30 = (const void **)MEMORY[0x263F2EAA0];
LABEL_25:
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D6D8], *v30);
        goto LABEL_26;
      }
      if ((a1 - 3) < 2) {
        goto LABEL_25;
      }
      if (*(unsigned char *)(DerivedStorage + 528))
      {
        unsigned int v30 = (const void **)MEMORY[0x263F2EA98];
        goto LABEL_25;
      }
    }
LABEL_26:
    BOOL v25 = (const __CFString **)MEMORY[0x263F2D6F0];
LABEL_27:
    CFStringRef v31 = *v25;
    H16ISPPostNotification(*v25, a6, Mutable);
    if ((*(unsigned char *)(v15 + 154) & 4) != 0) {
      LogCaptureDeviceEvent(0x12u, v15, DerivedStorage, 0, v31, (__CFString *)Mutable, 1);
    }
    if (!Mutable) {
      return;
    }
    uint64_t v32 = Mutable;
    goto LABEL_31;
  }
  if (a1 == 7)
  {
    if (a2 > 0x13
      || ((1 << a2) & 0x806C1) == 0
      && (a2 != 1 || !*(unsigned char *)(DerivedStorage + 1680) && !*(unsigned char *)(DerivedStorage + 2280)))
    {
      return;
    }
    uint64_t v33 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v33) {
      return;
    }
    BOOL v34 = v33;
    switch(a2)
    {
      case 0u:
        int v35 = (const void *)*MEMORY[0x263F2D7F8];
        uint64_t v36 = (__CFString **)MEMORY[0x263F2E918];
        goto LABEL_63;
      case 1u:
        if (*(unsigned char *)(DerivedStorage + 1680)) {
          CFDictionarySetValue(v33, (const void *)*MEMORY[0x263F2D7F8], (const void *)*MEMORY[0x263F2E940]);
        }
        if (!*(unsigned char *)(DerivedStorage + 2280)) {
          goto LABEL_65;
        }
        int v35 = (const void *)*MEMORY[0x263F2D7F8];
        uint64_t v36 = (__CFString **)MEMORY[0x263F2E948];
LABEL_63:
        unint64_t v37 = *v36;
        break;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 8u:
        goto LABEL_65;
      case 6u:
        int v35 = (const void *)*MEMORY[0x263F2D7F8];
        uint64_t v36 = (__CFString **)MEMORY[0x263F2E900];
        goto LABEL_63;
      case 7u:
        int v35 = (const void *)*MEMORY[0x263F2D7F8];
        uint64_t v36 = (__CFString **)MEMORY[0x263F2E948];
        if (!*(unsigned char *)(DerivedStorage + 3784)) {
          uint64_t v36 = (__CFString **)MEMORY[0x263F2E930];
        }
        goto LABEL_63;
      case 9u:
        int v35 = (const void *)*MEMORY[0x263F2D7F8];
        uint64_t v36 = (__CFString **)MEMORY[0x263F2E938];
        goto LABEL_63;
      case 0xAu:
        int v35 = (const void *)*MEMORY[0x263F2D7F8];
        uint64_t v36 = (__CFString **)MEMORY[0x263F2E928];
        goto LABEL_63;
      default:
        if (a2 != 19) {
          goto LABEL_65;
        }
        int v35 = (const void *)*MEMORY[0x263F2D7F8];
        unint64_t v37 = @"VisPipe";
        break;
    }
    CFDictionarySetValue(v34, v35, v37);
LABEL_65:
    CFDictionarySetValue(v34, (const void *)*MEMORY[0x263F2D800], a4);
    CFDictionarySetValue(v34, (const void *)*MEMORY[0x263F2D808], a5);
    unint64_t v38 = (const void *)*MEMORY[0x263F2D718];
    H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D718], a6, v34);
    if ((*(unsigned char *)(v15 + 154) & 4) != 0) {
      LogCaptureDeviceEvent(0x12u, v15, DerivedStorage, 0, v38, 0, 1);
    }
    uint64_t v32 = v34;
LABEL_31:
    CFRelease(v32);
    return;
  }
  if (a1 == 6)
  {
    if (*(_DWORD *)(DerivedStorage + 76) && *(void *)(DerivedStorage + 3712)) {
      DisableDisplayStrobeOverlay(DerivedStorage);
    }
    if (dword_26B11BA30 == -1) {
      H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D708], a6, 0);
    }
    if ((*(unsigned char *)(v15 + 154) & 4) != 0)
    {
      char v19 = (const void *)*MEMORY[0x263F2D708];
      uint64_t v17 = v15;
      uint64_t v18 = DerivedStorage;
      goto LABEL_10;
    }
  }
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::activatePool(H16ISP::H16ISPFrameReceiverBufferPool *this, char a2)
{
  int v4 = (pthread_mutex_t *)((char *)this + 256);
  pthread_mutex_lock((pthread_mutex_t *)this + 4);
  *((unsigned char *)this + 145) = a2;
  if (*((void *)this + 20)) {
    goto LABEL_2;
  }
  kdebug_trace();
  uint64_t v6 = (__CVPixelBufferPool *)*((void *)this + 23);
  if (v6)
  {
    CVPixelBufferPoolRef v7 = CVPixelBufferPoolRetain(v6);
  }
  else
  {
    unsigned int v8 = *((_DWORD *)this + 29);
    if ((v8 & 0x400) != 0)
    {
      *(unsigned char *)this = 1;
LABEL_2:
      pthread_mutex_unlock(v4);
      return 0;
    }
    unsigned int v9 = (*((unsigned int *)this + 4) < 0x20uLL) & (0xA01806C3 >> *((_DWORD *)this + 4));
    int v10 = *((_DWORD *)this + 6);
    int v11 = *((_DWORD *)this + 7);
    int v12 = *((_DWORD *)this + 8);
    int v13 = *((_DWORD *)this + 9);
    int v14 = *((_DWORD *)this + 10);
    long long v15 = *(_OWORD *)((char *)this + 72);
    v85[0] = *(_OWORD *)((char *)this + 56);
    v85[1] = v15;
    CVPixelBufferPoolRef v7 = H16ISP::H16ISPCreateCVBufferPool(v10, v11, v12, v13, v14, (uint64_t)v85, *((unsigned int *)this + 25), *((unsigned __int8 *)this + 88), *((float *)this + 33), *(void *)((char *)this + 92), HIDWORD(*(void *)((char *)this + 92)), *((_DWORD *)this + 27), v9, v8, *((_DWORD *)this + 32), *((void **)this + 22), *((_DWORD *)this + 34), H16ISP::gFrameReceiverBufferPoolPrefs != 0, *((_DWORD *)this + 80));
  }
  *((void *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v7;
  if (v7)
  {
    CVPixelBufferPoolScanIOSurfaces();
    CFDictionaryRef v84 = 0;
    if (!CVPixelBufferPoolCopyIOSurfaceCreationProperties())
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v84, (const void *)*MEMORY[0x263F0ED30]);
      if (Value) {
        CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)this + 140);
      }
      CFRelease(v84);
    }
    kdebug_trace();
    if (H16ISP::getPixelFormatFromMetaInfo(*((_DWORD *)this + 10), *((unsigned __int8 *)this + 88), &v82))
    {
      bzero((char *)this + 336, 0x80uLL);
      CFDictionaryRef theDict = 0;
      CVPixelBufferPoolCopyIOSurfaceCreationProperties();
      CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(0, (const void *)*MEMORY[0x263F0EF00]);
      if (v17)
      {
        CFArrayRef v18 = v17;
        CFIndex Count = CFArrayGetCount(v17);
        if (Count)
        {
          unint64_t v20 = Count;
          CFIndex v21 = 0;
          int v22 = 0;
          pthread_t v78 = (void *)*MEMORY[0x263F0EE58];
          CFDictionaryRef v68 = (char *)this + 22;
          int v77 = (void *)*MEMORY[0x263F0EE88];
          long long v76 = (void *)*MEMORY[0x263F0EE80];
          int32x2_t v75 = (void *)*MEMORY[0x263F0EE90];
          CFDictionaryRef v23 = (const void *)*MEMORY[0x263F0EF10];
          int v74 = (void *)*MEMORY[0x263F0EF20];
          BOOL v73 = (void *)*MEMORY[0x263F0EED0];
          int v72 = (void *)*MEMORY[0x263F0EEE8];
          BOOL v71 = (void *)*MEMORY[0x263F0EEC8];
          int v70 = (void *)*MEMORY[0x263F0EEA8];
          CFStringRef key = (void *)*MEMORY[0x263F0EE70];
          do
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v21);
            CFDictionaryRef v25 = ValueAtIndex;
            int valuePtr = 0;
            if (v83 == 2)
            {
              int v79 = 0;
              CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v78);
              if (v33)
              {
                CFNumberRef v34 = v33;
                CFTypeID v35 = CFGetTypeID(v33);
                if (v35 == CFNumberGetTypeID()) {
                  CFNumberGetValue(v34, kCFNumberSInt32Type, &v79);
                }
              }
              CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v25, v77);
              if (v36)
              {
                CFNumberRef v37 = v36;
                CFTypeID v38 = CFGetTypeID(v36);
                if (v38 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v37, kCFNumberSInt32Type, &valuePtr);
                  *((_DWORD *)this + 8 * v21 + 84) = valuePtr - v79;
                }
              }
              CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(v25, v76);
              if (v39)
              {
                CFNumberRef v40 = v39;
                CFTypeID v41 = CFGetTypeID(v39);
                if (v41 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v40, kCFNumberSInt32Type, &valuePtr);
                  int v42 = valuePtr;
                  *((_DWORD *)this + 8 * v21 + 85) = valuePtr;
                  *((_DWORD *)this + v21 + 11) = v42;
                }
              }
              CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v25, v75);
              if (v43)
              {
                CFNumberRef v44 = v43;
                CFTypeID v45 = CFGetTypeID(v43);
                if (v45 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v44, kCFNumberSInt32Type, &valuePtr);
                  int v46 = valuePtr - v79;
                  CFBooleanRef v47 = (_DWORD *)((char *)this + 32 * v21);
                  v47[87] = valuePtr - v79;
                  v47[86] = v46 - v47[84];
                }
              }
              CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(v25, v23);
              if (v48)
              {
                CFNumberRef v49 = v48;
                CFTypeID v50 = CFGetTypeID(v48);
                if (v50 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v49, kCFNumberSInt32Type, &valuePtr);
                  *((_DWORD *)this + 8 * v21 + 88) = valuePtr - *((_DWORD *)this + 8 * v21 + 87);
                }
              }
              CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(v25, v74);
              if (v51)
              {
                CFNumberRef v52 = v51;
                CFTypeID v53 = CFGetTypeID(v51);
                if (v53 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v52, kCFNumberSInt32Type, &valuePtr);
                  *((_WORD *)this + 16 * v21 + 178) = valuePtr;
                }
              }
              CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(v25, v73);
              if (v54)
              {
                CFNumberRef v55 = v54;
                CFTypeID v56 = CFGetTypeID(v54);
                if (v56 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v55, kCFNumberSInt32Type, &valuePtr);
                  *((_WORD *)this + 16 * v21 + 178) += valuePtr;
                }
              }
              CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(v25, v72);
              if (v57)
              {
                CFNumberRef v58 = v57;
                CFTypeID v59 = CFGetTypeID(v57);
                if (v59 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v58, kCFNumberSInt32Type, &valuePtr);
                  *(_WORD *)&v68[32 * v21 + 336] = valuePtr;
                }
              }
              CFNumberRef v60 = (const __CFNumber *)CFDictionaryGetValue(v25, v71);
              if (v60)
              {
                CFNumberRef v61 = v60;
                CFTypeID v62 = CFGetTypeID(v60);
                if (v62 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v61, kCFNumberSInt32Type, &valuePtr);
                  *(_WORD *)&v68[32 * v21 + 336] += valuePtr;
                }
              }
              CFNumberRef v63 = (const __CFNumber *)CFDictionaryGetValue(v25, v70);
              if (v63)
              {
                CFNumberRef v64 = v63;
                CFTypeID v65 = CFGetTypeID(v63);
                if (v65 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v64, kCFNumberSInt32Type, &valuePtr);
                  *((_DWORD *)this + 8 * v21 + 9pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = valuePtr;
                }
              }
            }
            else if (!v83)
            {
              CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v23);
              if (v26)
              {
                CFNumberRef v27 = v26;
                CFTypeID v28 = CFGetTypeID(v26);
                if (v28 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v27, kCFNumberSInt32Type, &valuePtr);
                  *((_DWORD *)this + 8 * v21 + 84) = valuePtr;
                }
              }
              CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v25, key);
              if (v29)
              {
                CFNumberRef v30 = v29;
                CFTypeID v31 = CFGetTypeID(v29);
                if (v31 == CFNumberGetTypeID())
                {
                  CFNumberGetValue(v30, kCFNumberSInt32Type, &valuePtr);
                  int v32 = valuePtr;
                  *((_DWORD *)this + 8 * v21 + 85) = valuePtr;
                  *((_DWORD *)this + v21 + 11) = v32;
                }
              }
            }
            CFIndex v21 = (unsigned __int16)++v22;
          }
          while (v20 > (unsigned __int16)v22);
        }
      }
      CFRelease(theDict);
    }
    uint64_t v5 = 0;
    *(unsigned char *)this = 1;
  }
  else
  {
    uint64_t v5 = 3758097084;
    kdebug_trace();
    BOOL v66 = (H16ISP::H16ISPDevice *)*((void *)this + 1);
    if (v66) {
      H16ISP::H16ISPDevice::ISP_MemoryDiagnostics(v66);
    }
  }
  pthread_mutex_unlock(v4);
  return v5;
}

uint64_t H16ISP::getPixelFormatFromMetaInfo(int a1, int a2, _OWORD *a3)
{
  uint64_t v4 = 0;
  while (*(_DWORD *)&supportedFormatMap[v4 + 4] != a1 || supportedFormatMap[v4 + 8] != a2)
  {
    v4 += 20;
    if (v4 == 1280) {
      return 0;
    }
  }
  uint64_t v6 = &supportedFormatMap[v4];
  uint64_t v5 = *(unsigned int *)&supportedFormatMap[v4];
  if (a3)
  {
    bzero(a3, 0x14uLL);
    long long v7 = *(_OWORD *)v6;
    *((_DWORD *)a3 + 4) = *((_DWORD *)v6 + 4);
    *a3 = v7;
  }
  return v5;
}

void std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

CVPixelBufferPoolRef H16ISP::H16ISPCreateCVBufferPool(int a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, float a9, int a10, int a11, int a12, char a13, unsigned int a14, int a15, void *a16, int a17, unsigned __int8 a18, int a19)
{
  int v21 = a19;
  v80[4] = *MEMORY[0x263EF8340];
  int v78 = a2;
  int valuePtr = a1;
  int v76 = a4;
  int v77 = a3;
  uint64_t v75 = a7;
  float v74 = a9;
  CVPixelBufferPoolRef poolOut = 0;
  switch(a5)
  {
    case 0:
      int v23 = 875704422;
      if (!a8) {
        int v23 = 875704438;
      }
      goto LABEL_76;
    case 2:
      int v72 = 1650943796;
      if ((a14 & 4) != 0)
      {
        int v23 = 1735549492;
      }
      else if ((a14 & 8) != 0)
      {
        int v23 = 1919379252;
      }
      else
      {
        if ((a14 & 0x20) == 0) {
          goto LABEL_77;
        }
        int v23 = 1734505012;
      }
      goto LABEL_76;
    case 3:
      int v23 = 825437747;
      goto LABEL_76;
    case 4:
      int v23 = 825306677;
      goto LABEL_76;
    case 5:
      int v23 = 1932996149;
      goto LABEL_76;
    case 6:
    case 7:
    case 10:
    case 19:
    case 43:
      int v23 = 1278226488;
      goto LABEL_76;
    case 8:
      int v23 = 1278226742;
      goto LABEL_76;
    case 11:
      int v23 = 1751411059;
      goto LABEL_76;
    case 12:
      int v23 = 1278226736;
      goto LABEL_76;
    case 13:
      int v23 = 1530422832;
      if (a8) {
        goto LABEL_76;
      }
      goto LABEL_38;
    case 14:
      int v23 = 2100848176;
      if (a8) {
        goto LABEL_76;
      }
      goto LABEL_38;
    case 15:
      int v23 = 2016686640;
      if (!a8) {
        goto LABEL_76;
      }
      goto LABEL_34;
    case 16:
      if (a8) {
        int v23 = 1534617136;
      }
      else {
        int v23 = 1534621232;
      }
      goto LABEL_76;
    case 17:
      if (a8)
      {
        int v24 = 2100848176;
        goto LABEL_41;
      }
      int v26 = 2100848176;
      goto LABEL_66;
    case 18:
      int v23 = 1882468912;
      if (a8) {
LABEL_34:
      }
        v23 += 3276800;
      goto LABEL_76;
    case 20:
      if ((a14 & 2) == 0) {
        goto LABEL_36;
      }
      int v23 = 1651847472;
      goto LABEL_76;
    case 21:
LABEL_36:
      int v23 = 1650943796;
      goto LABEL_76;
    case 22:
      int v23 = 641230384;
      if (!a8) {
LABEL_38:
      }
        v23 |= 0x1000u;
      goto LABEL_76;
    case 23:
      if (a8)
      {
        int v24 = 641230384;
LABEL_41:
        int v23 = v24 | 0x400000;
      }
      else
      {
        int v26 = 641230384;
LABEL_66:
        int v23 = v26 | 0x401000;
      }
      goto LABEL_76;
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      uint64_t v22 = 0;
      break;
    case 30:
      int v23 = 1751410032;
      goto LABEL_76;
    case 37:
      int v23 = 1651519798;
      goto LABEL_76;
    case 38:
      if ((a14 & 2) != 0)
      {
        int v23 = 1651587122;
      }
      else
      {
        int v72 = 1650946096;
        if ((a14 & 4) != 0)
        {
          int v23 = 1735553072;
        }
        else
        {
          if ((a14 & 8) != 0)
          {
            int v25 = 1919378232;
          }
          else
          {
            if ((a14 & 0x20) == 0) {
              goto LABEL_77;
            }
            int v25 = 1734501176;
          }
          int v23 = v25 + 3320;
        }
      }
      goto LABEL_76;
    case 39:
      int v23 = 1650946100;
      goto LABEL_76;
    case 40:
      if ((a14 & 2) != 0)
      {
        int v23 = 1651925816;
      }
      else
      {
        int v72 = 1650942776;
        if ((a14 & 4) != 0)
        {
          int v23 = 1735549752;
        }
        else if ((a14 & 8) != 0)
        {
          int v23 = 1919378232;
        }
        else
        {
          if ((a14 & 0x20) == 0) {
            goto LABEL_77;
          }
          int v23 = 1734501176;
        }
      }
      goto LABEL_76;
    case 41:
      int v23 = 1652056888;
      goto LABEL_76;
    case 42:
      if ((a14 & 2) != 0) {
        int v23 = 1651519537;
      }
      else {
        int v23 = 1278226481;
      }
      goto LABEL_76;
    case 44:
      int v23 = 1650946098;
      goto LABEL_76;
    case 45:
      int v23 = 893595958;
      goto LABEL_76;
    case 46:
      int v23 = 1111970369;
      goto LABEL_76;
    default:
      int v23 = 2037741158;
      if (!a8) {
        int v23 = 2037741171;
      }
      goto LABEL_76;
  }
  while (*(_DWORD *)&supportedFormatMap[v22 + 4] != a5 || supportedFormatMap[v22 + 8] != a8)
  {
    v22 += 20;
    if (v22 == 1280)
    {
      int v23 = 0;
      goto LABEL_76;
    }
  }
  int v23 = *(_DWORD *)&supportedFormatMap[v22];
LABEL_76:
  int v72 = v23;
LABEL_77:
  CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CVPixelBufferPoolRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (result)
  {
    CFNumberRef v29 = result;
    int v67 = v21;
    int v68 = a18;
    CFNumberRef v30 = CFNumberCreate(v27, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04240], v30);
    CFRelease(v30);
    CFNumberRef v31 = CFNumberCreate(v27, kCFNumberIntType, &v78);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04118], v31);
    CFRelease(v31);
    if (v77)
    {
      CFNumberRef v32 = CFNumberCreate(v27, kCFNumberIntType, &v77);
      CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F040D8], v32);
      CFRelease(v32);
    }
    value = a16;
    CFNumberRef v33 = CFNumberCreate(v27, kCFNumberIntType, &v72);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04180], v33);
    CFRelease(v33);
    int v34 = v72;
    bzero(&v70, 0x14uLL);
    uint64_t v35 = 0;
    while (*(_DWORD *)&supportedFormatMap[v35] != v34)
    {
      v35 += 20;
      if (v35 == 1280) {
        goto LABEL_85;
      }
    }
    CFNumberRef v36 = &supportedFormatMap[v35];
    long long v70 = *(_OWORD *)v36;
    int v71 = *((_DWORD *)v36 + 4);
LABEL_85:
    BOOL v37 = a5 != 43 && v71 == 2;
    int v38 = !v37;
    CFNumberRef v39 = (const void **)MEMORY[0x263EFFB40];
    if (!v37)
    {
      LODWORD(v80[0]) = a10;
      CFNumberRef v40 = CFNumberCreate(v27, kCFNumberIntType, v80);
      CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04078], v40);
      CFRelease(v40);
      if (v76)
      {
        CFNumberRef v41 = CFNumberCreate(v27, kCFNumberIntType, &v76);
        CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F040F8], v41);
        CFRelease(v41);
      }
      if ((a14 & 0x80) != 0) {
        CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F040E0], *v39);
      }
      if (a15)
      {
        CFNumberRef v42 = CFNumberCreate(v27, kCFNumberIntType, &a15);
        CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04230], v42);
        CFRelease(v42);
      }
      if (v74 != 0.0)
      {
        CFNumberRef v43 = CFNumberCreate(v27, kCFNumberFloatType, &v74);
        CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04110], v43);
        CFRelease(v43);
      }
      if (a17 != -1)
      {
        CFNumberRef v44 = CFNumberCreate(v27, kCFNumberIntType, &a17);
        CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04108], v44);
        CFRelease(v44);
      }
      int v69 = a11;
      CFNumberRef v45 = CFNumberCreate(v27, kCFNumberIntType, &v69);
      CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04198], v45);
      CFRelease(v45);
    }
    int v46 = *v39;
    CFBooleanRef v47 = (const void *)*MEMORY[0x263EFFB38];
    if (v68) {
      CFNumberRef v48 = v46;
    }
    else {
      CFNumberRef v48 = (const void *)*MEMORY[0x263EFFB38];
    }
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04148], v48);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v67)
    {
      CFNumberRef v50 = CFNumberCreate(v27, kCFNumberIntType, &a19);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0ED38], v50);
      CFRelease(v50);
    }
    if (v38)
    {
      if (a13 && (v68 & 1) == 0) {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0EF30], v47);
      }
      if ((a14 & 0x40) != 0) {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0EF48], v46);
      }
      LODWORD(v80[0]) = a12;
      CFNumberRef v51 = CFNumberCreate(0, kCFNumberIntType, v80);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0ED58], v51);
      CFRelease(v51);
    }
    CFDictionaryAddValue(v29, (const void *)*MEMORY[0x263F04130], Mutable);
    CFRelease(Mutable);
    if (v78 != 8)
    {
      CFNumberRef v52 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v52)
      {
        CFTypeID v53 = v52;
        uint64_t v54 = 0;
        while (*(_DWORD *)&supportedFormatMap[v54] != v72)
        {
          v54 += 20;
          if (v54 == 1280) {
            goto LABEL_123;
          }
        }
        CFNumberRef v55 = &supportedFormatMap[v54];
        long long v70 = *(_OWORD *)v55;
        int v71 = *((_DWORD *)v55 + 4);
        if ((HIDWORD(v70) - 25) <= 1)
        {
          CFTypeID v56 = (const void *)*MEMORY[0x263F03E58];
          CFNumberRef v57 = (const void *)*MEMORY[0x263F03E98];
          goto LABEL_124;
        }
LABEL_123:
        uint64_t v58 = *MEMORY[0x263F03E90];
        v80[0] = *MEMORY[0x263F03E98];
        v80[1] = v58;
        uint64_t v59 = *MEMORY[0x263F03E70];
        v80[2] = *MEMORY[0x263F03E88];
        v80[3] = v59;
        CFTypeID v56 = (const void *)*MEMORY[0x263F03E58];
        CFNumberRef v57 = (const void *)v80[(a14 >> 8) & 3];
LABEL_124:
        CFDictionarySetValue(v52, v56, v57);
        if (*(void *)a6) {
          CFDictionarySetValue(v53, (const void *)*MEMORY[0x263F03ED8], *(const void **)a6);
        }
        CFNumberRef v60 = *(const void **)(a6 + 8);
        if (v60) {
          CFDictionarySetValue(v53, (const void *)*MEMORY[0x263F04020], v60);
        }
        CFNumberRef v61 = *(const void **)(a6 + 16);
        if (v61) {
          CFDictionarySetValue(v53, (const void *)*MEMORY[0x263F03FC0], v61);
        }
        CFTypeID v62 = *(const void **)(a6 + 24);
        if (v62) {
          CFDictionarySetValue(v53, (const void *)*MEMORY[0x263F03F90], v62);
        }
        CFDictionaryAddValue(v29, (const void *)*MEMORY[0x263F03DF8], v53);
        CFRelease(v53);
      }
    }
    CFNumberRef v63 = CFDictionaryCreateMutable(v27, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v63)
    {
      CFNumberRef v64 = v63;
      if (value) {
        CFDictionarySetValue(v63, (const void *)*MEMORY[0x263F041D0], value);
      }
      CFNumberRef v65 = CFNumberCreate(0, kCFNumberCFIndexType, &v75);
      CFDictionaryAddValue(v64, (const void *)*MEMORY[0x263F041C0], v65);
      CFRelease(v65);
      CVPixelBufferPoolCreate(v27, v64, v29, &poolOut);
      CFRelease(v64);
    }
    CFRelease(v29);
    return poolOut;
  }
  return result;
}

void H16ISPPostNotification(const __CFString *a1, const void *a2, const void *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CFRetain(a1);
  uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v6 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)CMTime buf = 136315138;
    CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
    _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_INFO, "Sending notification: %s\n", buf, 0xCu);
  }
  if (a3) {
    CFRetain(a3);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZL22H16ISPPostNotificationPK10__CFStringPKvS3__block_invoke;
  block[3] = &__block_descriptor_tmp_1665;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async(global_queue, block);
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::addPreallocatedBuffer(pthread_mutex_t *this, __CVBuffer *a2)
{
  CVPixelBufferRef pixelBuffer = a2;
  uint64_t v4 = this + 4;
  pthread_mutex_lock(this + 4);
  CVPixelBufferRetain(a2);
  std::deque<__CVBuffer *>::push_back(&this[3].__sig, &pixelBuffer);
  if ((this[1].__opaque[45] & 4) != 0)
  {
    extraRowsOnBottouint64_t m = 0;
    size_t extraColumnsOnRight = 0;
    *(_DWORD *)&this[5].__opaque[12] = CVPixelBufferGetBytesPerRow(pixelBuffer);
    *(_DWORD *)&this[5].__opaque[8] = CVPixelBufferGetDataSize(pixelBuffer);
    *(_DWORD *)&this->__opaque[16] = CVPixelBufferGetWidth(pixelBuffer);
    *(_DWORD *)&this->__opaque[20] = CVPixelBufferGetHeight(pixelBuffer);
    CVPixelBufferGetExtendedPixels(pixelBuffer, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
    int v5 = extraColumnsOnRight;
    *(_DWORD *)&this->__opaque[24] = extraRowsOnBottom;
    *(_DWORD *)&this->__opaque[28] = v5;
  }
  pthread_mutex_unlock(v4);
  return 0;
}

void std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unsigned int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        CFNumberRef v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)CFNumberRef v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unsigned int v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<__CVBuffer **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, &v54);
    CFNumberRef v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unsigned int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      CFNumberRef v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CFNumberRef v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CFNumberRef v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      CFNumberRef v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  CFTypeID v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  CFTypeID v53 = operator new(0x1000uLL);
  std::__split_buffer<__CVBuffer **>::push_back(&v54, &v53);
  CFAllocatorRef v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<__CVBuffer **>::push_front((uint64_t)&v54, v27);
  }
  CFNumberRef v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24684D70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPDevice::ISP_CILRequestPerChannel(mach_port_t *this, unsigned int a2, unsigned int a3)
{
  input[2] = *MEMORY[0x263EF8340];
  if (a3) {
    H16ISP::H16ISPDevice::NotifySystemStatusForCIL((H16ISP::H16ISPDevice *)this, a2, 1);
  }
  if (!this[1106])
  {
    uint64_t v6 = 3758097084;
    if (a3) {
      return v6;
    }
    goto LABEL_9;
  }
  input[0] = a2;
  input[1] = a3;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPDevice::ISP_CILRequestPerChannel();
  }
  uint64_t v6 = IOConnectCallScalarMethod(this[1106], 0x57u, input, 2u, 0, 0);
  if ((a3 & 1) == 0) {
LABEL_9:
  }
    H16ISP::H16ISPDevice::NotifySystemStatusForCIL((H16ISP::H16ISPDevice *)this, a2, 0);
  return v6;
}

uint64_t H16ISP::H16ISPDevice::NotifySystemStatusForCIL(H16ISP::H16ISPDevice *this, char a2, int a3)
{
  BOOL v3 = (H16ISP::SystemStatus *)*((void *)this + 27);
  if (v3)
  {
    int v7 = *((_DWORD *)this + 56);
    unint64_t v8 = (char *)this + 228;
    if (strstr((char *)this + 228, "mediaserverd") || strstr(v8, "cameracaptured"))
    {
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG)) {
        H16ISP::H16ISPDevice::NotifySystemStatusForCIL();
      }
    }
    else
    {
      int v19 = v7 | (1 << a2);
      if (!a3) {
        int v19 = v7 & ~(1 << a2);
      }
      *((_DWORD *)this + 56) = v19;
      if (v7)
      {
        if (!v19)
        {
          long long v20 = *(_OWORD *)((char *)this + 4340);
          *(_OWORD *)v38.val = *(_OWORD *)((char *)this + 4324);
          *(_OWORD *)&v38.val[4] = v20;
          H16ISP::SystemStatus::updateData(v3, &v38, 0);
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
          }
          BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v21) {
            H16ISP::H16ISPDevice::NotifySystemStatusForCIL(v21, v22, v23, v24, v25, v26, v27, v28);
          }
        }
      }
      else if (v19)
      {
        long long v29 = *(_OWORD *)((char *)this + 4340);
        *(_OWORD *)v39.val = *(_OWORD *)((char *)this + 4324);
        *(_OWORD *)&v39.val[4] = v29;
        H16ISP::SystemStatus::updateData(v3, &v39, 1);
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
        }
        BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v30) {
          H16ISP::H16ISPDevice::NotifySystemStatusForCIL(v30, v31, v32, v33, v34, v35, v36, v37);
        }
      }
    }
    return 0;
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    uint64_t v9 = 3758097084;
    BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v10) {
      H16ISP::H16ISPDevice::NotifySystemStatusForCIL(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  return v9;
}

void H16ISP::H16ISPDevice::ISP_CILRequestPerChannel()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  v0[0] = 136315906;
  OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_5_0();
  _os_log_error_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_ERROR, "[%s:%d] [CIL] ISP_CILRequestPerChannel calls kernel (%u/%u)\n\n", (uint8_t *)v0, 0x1Eu);
}

uint64_t H16ISP::H16ISPDevice::StartCamera(H16ISP::H16ISPDevice *this, unsigned int a2)
{
  v6[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = 3758097112;
  mach_port_t v4 = *((_DWORD *)this + 1106);
  if (!v4) {
    return 3758097084;
  }
  if (*((unsigned char *)this + 4))
  {
    v6[0] = a2;
    return IOConnectCallScalarMethod(v4, 0x36u, v6, 1u, 0, 0);
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPDevice::StartCamera();
    }
  }
  return v3;
}

void OUTLINED_FUNCTION_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

uint64_t H16ISP::H16ISPDevice::SetMinimumFrameRate(H16ISP::H16ISPDevice *this, uint64_t a2)
{
  unint64_t v2 = (H16ISP::H16ISPDevice *)MEMORY[0x270FA5388](this, a2);
  int v5 = v4;
  unsigned int v6 = v3;
  int v7 = v2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v8)
  {
    return H16ISP::H16ISPDevice::ISP_SetExclaveMinimumFrameRate(v2, v3, v4);
  }
  else
  {
    bzero(v10, 0x10uLL);
    __int16 v11 = 522;
    unsigned int v12 = v6;
    int v13 = v5;
    return H16ISP::H16ISPDevice::ISP_SendCommand(v7, v10, 0x10u, 0, 0xFFFFFFFF);
  }
}

uint64_t H16ISP::H16ISPDevice::SetMaximumFrameRate(H16ISP::H16ISPDevice *this, uint64_t a2)
{
  unint64_t v2 = (H16ISP::H16ISPDevice *)MEMORY[0x270FA5388](this, a2);
  int v5 = v4;
  unsigned int v6 = v3;
  int v7 = v2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v8)
  {
    return H16ISP::H16ISPDevice::ISP_SetExclaveMaximumFrameRate(v2, v3, v4);
  }
  else
  {
    bzero(v10, 0x10uLL);
    __int16 v11 = 520;
    unsigned int v12 = v6;
    int v13 = v5;
    return H16ISP::H16ISPDevice::ISP_SendCommand(v7, v10, 0x10u, 0, 0xFFFFFFFF);
  }
}

void *std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::operator=(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    int v7 = (char **)(v5 + 8 * (v4 >> 9));
    if (v6 == v5)
    {
      int v8 = 0;
      __int16 v11 = 0;
      BOOL v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
    }
    else
    {
      int v8 = &(*v7)[8 * (v4 & 0x1FF)];
      unint64_t v9 = a2[5] + v4;
      BOOL v10 = (char *)(v5 + 8 * (v9 >> 9));
      __int16 v11 = (char *)(*(void *)v10 + 8 * (v9 & 0x1FF));
    }
    std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::assign<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool * const*,H16ISP::H16ISPFrameReceiverBufferPool * const&,H16ISP::H16ISPFrameReceiverBufferPool * const* const*,long,512l>,0>(a1, v7, v8, v10, v11);
  }
  return a1;
}

void *std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::assign<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool * const*,H16ISP::H16ISPFrameReceiverBufferPool * const&,H16ISP::H16ISPFrameReceiverBufferPool * const* const*,long,512l>,0>(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  }
  return std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__assign_with_size_random_access[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool * const*,H16ISP::H16ISPFrameReceiverBufferPool * const&,H16ISP::H16ISPFrameReceiverBufferPool * const* const*,long,512l>>(a1, a2, a3, v5);
}

void *std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__assign_with_size_random_access[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool * const*,H16ISP::H16ISPFrameReceiverBufferPool * const&,H16ISP::H16ISPFrameReceiverBufferPool * const* const*,long,512l>>(void *a1, char **a2, char *a3, unint64_t a4)
{
  long long v20 = a2;
  BOOL v21 = a3;
  unint64_t v7 = a1[5];
  if (v7 >= a4)
  {
    uint64_t v14 = a1[1];
    uint64_t v15 = (char *)(v14 + 8 * (a1[4] >> 9));
    if (a1[2] == v14) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *(void *)v15 + 8 * (a1[4] & 0x1FFLL);
    }
    v22[0] = a2;
    v22[1] = a3;
    uint64_t v18 = (char **)std::__deque_iterator<__CVBuffer *,__CVBuffer **,__CVBuffer *&,__CVBuffer ***,long,512l>::operator+[abi:ne180100]((uint64_t)v22, a4);
    uint64_t v23 = v15;
    uint64_t v24 = v16;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>>>(a2, a3, v18, v19, (uint64_t)&v23);
    return (void *)std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__erase_to_end((uint64_t)a1, v23, v24);
  }
  else
  {
    unint64_t v9 = (char **)std::__deque_iterator<__CVBuffer *,__CVBuffer **,__CVBuffer *&,__CVBuffer ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v20, v7);
    BOOL v10 = (uint64_t *)v8;
    uint64_t v11 = a1[1];
    if (a1[2] == v11) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = *(void *)(v11 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
    }
    uint64_t v23 = (char *)(v11 + 8 * (a1[4] >> 9));
    uint64_t v24 = v12;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>>>(v20, v21, v9, v8, (uint64_t)&v23);
    return std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__append_with_size[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool * const*,H16ISP::H16ISPFrameReceiverBufferPool * const&,H16ISP::H16ISPFrameReceiverBufferPool * const* const*,long,512l>>(a1, v9, v10, a4 - a1[5]);
  }
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    BOOL v10 = __src;
  }
  else
  {
    int v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool **,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      unint64_t v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool **,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    BOOL v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool **,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,0>(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool **,std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool **,H16ISP::H16ISPFrameReceiverBufferPool *&,H16ISP::H16ISPFrameReceiverBufferPool ***,long,512l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    unint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    BOOL v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      int v13 = (char *)*v6++;
      BOOL v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void *std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__append_with_size[abi:ne180100]<std::__deque_iterator<H16ISP::H16ISPFrameReceiverBufferPool *,H16ISP::H16ISPFrameReceiverBufferPool * const*,H16ISP::H16ISPFrameReceiverBufferPool * const&,H16ISP::H16ISPFrameReceiverBufferPool * const* const*,long,512l>>(void *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 6) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__add_back_capacity(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  int v13 = (void *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v11 & 0x1FF);
  }
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  double result = std::__deque_iterator<__CVBuffer *,__CVBuffer **,__CVBuffer *&,__CVBuffer ***,long,512l>::operator+[abi:ne180100]((uint64_t)v23, a4);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        int v19 = (void *)v14;
        do
        {
          uint64_t v20 = *a3++;
          *v19++ = v20;
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
          {
            BOOL v21 = (uint64_t *)a2[1];
            ++a2;
            a3 = v21;
          }
        }
        while (v19 != (void *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result) {
        break;
      }
      uint64_t v22 = v13[1];
      ++v13;
      uint64_t v14 = v22;
    }
    while (v22 != v16);
    a1[5] = v17;
  }
  return result;
}

void *std::__deque_iterator<__CVBuffer *,__CVBuffer **,__CVBuffer *&,__CVBuffer ***,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  double result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

void std::deque<H16ISP::H16ISPFrameReceiverBufferPool *>::__add_back_capacity(void *a1, unint64_t a2)
{
  unsigned int v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          long long v29 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          unsigned int v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            unsigned int v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            unsigned int v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            unsigned int v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          unsigned int v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)unsigned int v3 = v18;
      unsigned int v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<__CVBuffer **>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<__CVBuffer **>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        BOOL v66 = (char *)a1[2];
        do
        {
          int v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              int v79 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v78);
              int v81 = &v79[8 * (v78 >> 2)];
              long long v82 = (uint64_t *)a1[1];
              BOOL v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                BOOL v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                BOOL v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)BOOL v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              BOOL v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                BOOL v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                BOOL v66 = (char *)a1[1];
              }
              int v77 = &v66[-8 * (v74 >> 1)];
              BOOL v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)BOOL v66 = v69;
          BOOL v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v91 = a1 + 3;
      if (v13) {
        long long v15 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v13);
      }
      else {
        long long v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        __int16 v88 = operator new(0x1000uLL);
        std::__split_buffer<__CVBuffer **>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        audit_token_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100]((uint64_t)v91, v48);
              CFNumberRef v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              CFTypeID v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          audit_token_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      CFNumberRef v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<__CVBuffer **>::push_front((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_24684E8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double H16ISP::H16ISPDevice::GetCameraCurrentConfig(H16ISP::H16ISPDevice *a1, int a2, _DWORD *a3, uint64_t a4)
{
  bzero(v16, 0xE4uLL);
  __int16 v17 = 261;
  int v18 = a2;
  if (!H16ISP::H16ISPDevice::ISP_SendCommand(a1, v16, 0xE4u, 0, 0xFFFFFFFF))
  {
    *a3 = v19;
    long long v9 = v21;
    *(_OWORD *)a4 = v20;
    *(_OWORD *)(a4 + 16) = v9;
    long long v10 = v25;
    *(_OWORD *)(a4 + 64) = v24;
    *(_OWORD *)(a4 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v10;
    long long v11 = v23;
    *(_OWORD *)(a4 + 32) = v22;
    *(_OWORD *)(a4 + 48) = v11;
    long long v12 = v29;
    *(_OWORD *)(a4 + 128) = v28;
    *(_OWORD *)(a4 + 144) = v12;
    long long v13 = v27;
    *(_OWORD *)(a4 + 96) = v26;
    *(_OWORD *)(a4 + 112) = v13;
    *(_DWORD *)(a4 + 208) = v33;
    long long v14 = v32;
    double result = *(double *)&v31;
    long long v15 = v30;
    *(_OWORD *)(a4 + 176) = v31;
    *(_OWORD *)(a4 + 192) = v14;
    *(_OWORD *)(a4 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v15;
  }
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiver::startNoDataTimer(H16ISP::H16ISPFrameReceiver *this)
{
  unsigned int v2 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableISPBringup", @"com.apple.coremedia", 0);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 224));
  unsigned int v3 = (__CFRunLoopTimer *)*((void *)this + 36);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 36));
    *((void *)this + 36) = 0;
  }
  context.versiouint64_t n = 0;
  context.info = this;
  memset(&context.retain, 0, 24);
  double v4 = CFAbsoluteTimeGetCurrent() + *((double *)this + 114);
  double v5 = 200.0;
  if (!v2) {
    double v5 = 0.0;
  }
  unint64_t v6 = CFRunLoopTimerCreate(0, v5 + v4, 0.0, 0, 0, (CFRunLoopTimerCallBack)H16ISP::H16ISPFrameReceiver::NoDataTimeout, &context);
  *((void *)this + 36) = v6;
  if (v6) {
    CFRunLoopAddTimer(*((CFRunLoopRef *)this + 1), v6, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 224));
}

uint64_t H16ISP::H16ISPFrameReceiver::StartFaceDetect(H16ISP::H16ISPDevice **this)
{
  if (*((unsigned char *)this + 452)) {
    return H16ISP::H16ISPDevice::StartFaceDetect(this[41], *((unsigned int *)this + 91));
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::StartFaceDetect(H16ISP::H16ISPDevice *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  char v4 = v3;
  char v6 = v5;
  int v8 = v7;
  long long v9 = (H16ISP::H16ISPDevice *)v2;
  uint64_t v18 = *MEMORY[0x263EF8340];
  bzero(v12, 0x1CuLL);
  int v14 = v8;
  __int16 v13 = 3330;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(v9, v12, 0x1Cu, 0, 0xFFFFFFFF);
  if (!result)
  {
    int v11 = v16;
    bzero(v12, 0x18uLL);
    __int16 v13 = 3331;
    int v14 = v8;
    int v15 = v11;
    LOBYTE(v16) = v6 & 1;
    BYTE1(v16) = (v6 & 2) != 0;
    BYTE2(v16) = (v6 & 4) != 0;
    HIBYTE(v16) = (v6 & 8) == 0;
    BOOL v17 = (v6 & 0x10) == 0;
    uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(v9, v12, 0x18u, 0, 0xFFFFFFFF);
    if (!result)
    {
      bzero(v12, 0x10uLL);
      int v14 = v8;
      __int16 v13 = 3333;
      LOBYTE(v15) = v4;
      uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(v9, v12, 0x10u, 0, 0xFFFFFFFF);
      if (!result)
      {
        bzero(v12, 0xCuLL);
        int v14 = v8;
        __int16 v13 = 3328;
        return H16ISP::H16ISPDevice::ISP_SendCommand(v9, v12, 0xCu, 0, 0xFFFFFFFF);
      }
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiver::sendInitialBuffersToFirmware(H16ISP::H16ISPFrameReceiver *this, H16ISP::H16ISPFrameReceiverSharedBufferPool *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t Pool = (_DWORD *)H16ISP::H16ISPFrameReceiverSharedBufferPool::GetPool(a2);
  uint64_t v4 = H16ISP::H16ISPFrameReceiverSharedBufferPool::AllocateAndSendBuffers(a2, Pool[28]);
  char v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    char v5 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = Pool[28];
    int v7 = Pool[25];
    int v9 = Pool[4];
    int v8 = Pool[5];
    int v11 = 136316418;
    long long v12 = "sendInitialBuffersToFirmware";
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 1024;
    int v16 = v8;
    __int16 v17 = 1024;
    int v18 = v7;
    __int16 v19 = 1024;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = v4;
    _os_log_impl(&dword_24680F000, v5, OS_LOG_TYPE_DEFAULT, "%s - Sending %d buffers to firmware (poolID=%d, poolSize=%d, poolType=%d) result=0x%08X\n\n", (uint8_t *)&v11, 0x2Au);
  }
  return v4;
}

void H16ISP::H16ISPFrameReceiver::startProjectorWatchdogTimer(H16ISP::H16ISPFrameReceiver *this)
{
  uint64_t v2 = dispatch_queue_create("com.apple.projwdt.queue", 0);
  *((void *)this + 116) = v2;
  if (v2)
  {
    char v3 = dispatch_source_create(MEMORY[0x263EF8400], 0, 0, v2);
    *((void *)this + 117) = v3;
    if (v3)
    {
      dispatch_source_set_timer(v3, 0, 0xEE6B2800uLL, 0xF4240uLL);
      uint64_t v4 = *((void *)this + 117);
      handler[0] = MEMORY[0x263EF8330];
      handler[1] = 0x40000000;
      handler[2] = ___ZN6H16ISP19H16ISPFrameReceiver27startProjectorWatchdogTimerEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_64;
      handler[4] = this;
      dispatch_source_set_event_handler(v4, handler);
      dispatch_resume(*((dispatch_object_t *)this + 117));
    }
  }
}

uint64_t ApplyNoiseReductionConfiguration(uint64_t a1, uint64_t a2, int a3, int a4, int a5, CFDictionaryRef theDict)
{
  char v12 = 0x80;
  unsigned int valuePtr = 128;
  if (theDict)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2D6C8]);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      char v12 = valuePtr;
      if (valuePtr > 0xFF) {
        return 4294954516;
      }
    }
    else
    {
      char v12 = 0x80;
    }
  }
  int v14 = (int *)(a2 + 132);
  if (H16ISP::H16ISPDevice::SetRNFStrength(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), a3, v12))
  {
    __int16 v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v15 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      ApplyNoiseReductionConfiguration();
    }
  }
  else
  {
    char v16 = 0x80;
    unsigned int v60 = 128;
    if (theDict)
    {
      CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2D6D0]);
      if (v17) {
        CFNumberGetValue(v17, kCFNumberSInt32Type, &v60);
      }
      char v16 = v60;
      if (v60 > 0xFF) {
        return 4294954516;
      }
    }
    if (H16ISP::H16ISPDevice::SetSharpness(*(H16ISP::H16ISPDevice **)(a1 + 24), *v14, a4, v16))
    {
      int v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v18 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        ApplyNoiseReductionConfiguration();
      }
    }
    else
    {
      char v19 = 0x80;
      unsigned int v58 = 128;
      if (theDict)
      {
        CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2D6B8]);
        if (v20) {
          CFNumberGetValue(v20, kCFNumberSInt32Type, &v58);
        }
        char v19 = v58;
        if (v58 > 0xFF) {
          return 4294954516;
        }
      }
      if (H16ISP::H16ISPDevice::SetLCEStrength(*(H16ISP::H16ISPDevice **)(a1 + 24), *v14, a5, v19))
      {
        int v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v22 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v22;
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          ApplyNoiseReductionConfiguration();
        }
      }
      else
      {
        char v59 = 0x80;
        unsigned int v58 = -2139062144;
        char v57 = 0x80;
        int v56 = -2139062144;
        char v55 = 1;
        int v54 = 16843009;
        if (theDict
          && (CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2D6C0])) != 0)
        {
          CFDictionaryRef v24 = v23;
          long long v25 = CFDictionaryGetValue(v23, (const void *)*MEMORY[0x263F2D6A0]);
          long long v26 = (CFTypeRef *)MEMORY[0x263EFFB40];
          if (v25 && CFEqual((CFTypeRef)*MEMORY[0x263EFFB40], v25))
          {
            unsigned int v27 = *(_DWORD *)(a2 + 48);
            unsigned int v28 = *(_DWORD *)(a2 + 168);
            if (v27 < v28) {
              unsigned int v28 = 0;
            }
            if (!*(unsigned char *)(*(void *)(a2 + 160) + 120 * (v27 - v28) + 104))
            {
              uint64_t v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v44 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v44;
              }
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                ApplyNoiseReductionConfiguration();
              }
              return 4294954516;
            }
            int v52 = 1;
          }
          else
          {
            int v52 = 0;
          }
          int v33 = CFDictionaryGetValue(v24, (const void *)*MEMORY[0x263F2D6B0]);
          if (v33) {
            BOOL v34 = CFEqual(*v26, v33) != 0;
          }
          else {
            BOOL v34 = 0;
          }
          uint64_t v35 = CFDictionaryGetValue(v24, (const void *)*MEMORY[0x263F2D690]);
          if (v35) {
            char v29 = CFEqual(*v26, v35) != 0;
          }
          else {
            char v29 = 0;
          }
          CFArrayRef v36 = (const __CFArray *)CFDictionaryGetValue(v24, (const void *)*MEMORY[0x263F2D6A8]);
          if (v36)
          {
            CFArrayRef v37 = v36;
            CFIndex Count = CFArrayGetCount(v36);
            uint64_t v39 = 5;
            if (!v34) {
              uint64_t v39 = 1;
            }
            if (Count != v39) {
              return 4294954516;
            }
            CFIndex v40 = Count;
            if (Count < 1)
            {
              CFIndex i = 0;
            }
            else
            {
              for (CFIndex i = 0; v40 != i; ++i)
              {
                unsigned int v53 = 0;
                CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v37, i);
                CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &v53);
                unsigned int v43 = v53;
                *((unsigned char *)&v58 + i) = v53;
                if (v43 > 0xFF) {
                  break;
                }
              }
            }
            if (i != v40) {
              return 4294954516;
            }
          }
          CFArrayRef v45 = (const __CFArray *)CFDictionaryGetValue(v24, (const void *)*MEMORY[0x263F2D698]);
          if (v45)
          {
            CFArrayRef v46 = v45;
            CFIndex v47 = CFArrayGetCount(v45);
            uint64_t v48 = v34 ? 5 : 1;
            if (v47 != v48) {
              return 4294954516;
            }
            for (CFIndex j = 0; j != v48; ++j)
            {
              unsigned int v53 = 0;
              CFNumberRef v50 = (const __CFNumber *)CFArrayGetValueAtIndex(v46, j);
              CFNumberGetValue(v50, kCFNumberSInt32Type, &v53);
              unsigned int v51 = v53;
              *((unsigned char *)&v56 + j) = v53;
              if (v51 > 0xFF) {
                break;
              }
            }
            if (v48 != j) {
              return 4294954516;
            }
          }
          if (v52) {
            int v30 = v34;
          }
          else {
            int v30 = 2;
          }
        }
        else
        {
          char v29 = 0;
          int v30 = 2;
        }
        if (H16ISP::H16ISPDevice::EnableMBNR(*(H16ISP::H16ISPDevice **)(a1 + 24), *v14, a3, v30, v29))
        {
          long long v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v31 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
          }
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            ApplyNoiseReductionConfiguration();
          }
        }
        else
        {
          uint64_t result = H16ISP::H16ISPDevice::SetMBNRConfiguration(*(H16ISP::H16ISPDevice **)(a1 + 24), *v14, a3, 5u, (char *)&v54, (char *)&v58, (char *)&v56);
          if (!result) {
            return result;
          }
          long long v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v32 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v32;
          }
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            ApplyNoiseReductionConfiguration();
          }
        }
      }
    }
  }
  return 4294954514;
}

uint64_t H16ISP::H16ISPDevice::SetMBNRConfiguration(H16ISP::H16ISPDevice *a1, __int16 a2, int a3, unsigned int a4, char *a5, char *a6, char *a7)
{
  if (a4 > 5) {
    return 3758097090;
  }
  *(void *)&v28[70] = v7;
  uint64_t v29 = v8;
  bzero(v23, 0x20uLL);
  __int16 v24 = 2619;
  __int16 v25 = a2;
  int v26 = a3;
  if (a4)
  {
    uint64_t v17 = a4;
    int v18 = v28;
    char v19 = v27;
    do
    {
      char v20 = *a5++;
      *v18++ = v20;
      char v21 = *a6++;
      *(v19 - 1) = v21;
      char v22 = *a7++;
      *char v19 = v22;
      v19 += 2;
      --v17;
    }
    while (v17);
  }
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v23, 0x20u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetRNFStrength(H16ISP::H16ISPDevice *a1, __int16 a2, int a3, char a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 2621;
  __int16 v11 = a2;
  int v12 = a3;
  char v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetLCEStrength(H16ISP::H16ISPDevice *a1, __int16 a2, int a3, char a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 2624;
  __int16 v11 = a2;
  int v12 = a3;
  char v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetSharpness(H16ISP::H16ISPDevice *a1, int a2, int a3, char a4)
{
  bzero(v9, 0x10uLL);
  __int16 v10 = 2579;
  int v11 = a2;
  int v12 = 1;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v9, 0x10u, 0, 0xFFFFFFFF);
  if (!result)
  {
    bzero(v9, 0x14uLL);
    __int16 v10 = 2569;
    int v11 = a2;
    int v12 = a3;
    char v13 = a4;
    return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v9, 0x14u, 0, 0xFFFFFFFF);
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableMBNR(H16ISP::H16ISPDevice *a1, __int16 a2, int a3, int a4, char a5)
{
  bzero(v11, 0x18uLL);
  __int16 v12 = 2618;
  __int16 v13 = a2;
  int v14 = a3;
  int v15 = a4;
  char v16 = a5;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v11, 0x18u, 0, 0xFFFFFFFF);
}

const char *___ZN6H16ISP19H16ISPFrameReceiverC2EPNS_12H16ISPDeviceEjP21H16ISPTNRConfigStructjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(const char **)(v1 + 464);
  if (v2) {
    *(unsigned char *)(v1 + 472) = notify_register_check(v2, (int *)(v1 + 476)) == 0;
  }
  char v3 = *(const char **)(v1 + 488);
  if (v3) {
    *(unsigned char *)(v1 + 496) = notify_register_check(v3, (int *)(v1 + 500)) == 0;
  }
  uint64_t v4 = *(const char **)(v1 + 528);
  if (v4) {
    *(unsigned char *)(v1 + 536) = notify_register_check(v4, (int *)(v1 + 540)) == 0;
  }
  char v5 = *(const char **)(v1 + 544);
  if (v5) {
    *(unsigned char *)(v1 + 552) = notify_register_check(v5, (int *)(v1 + 556)) == 0;
  }
  int v6 = *(const char **)(v1 + 560);
  if (v6) {
    *(unsigned char *)(v1 + 568) = notify_register_check(v6, (int *)(v1 + 572)) == 0;
  }
  uint64_t v7 = *(const char **)(v1 + 576);
  if (v7) {
    *(unsigned char *)(v1 + 584) = notify_register_check(v7, (int *)(v1 + 588)) == 0;
  }
  uint64_t v8 = *(const char **)(v1 + 592);
  if (v8) {
    *(unsigned char *)(v1 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = notify_register_check(v8, (int *)(v1 + 604)) == 0;
  }
  int v9 = *(const char **)(v1 + 608);
  if (v9) {
    *(unsigned char *)(v1 + 616) = notify_register_check(v9, (int *)(v1 + 620)) == 0;
  }
  uint64_t result = *(const char **)(v1 + 624);
  if (result)
  {
    uint64_t result = (const char *)notify_register_check(result, (int *)(v1 + 636));
    *(unsigned char *)(v1 + 632) = result == 0;
  }
  return result;
}

uint64_t ___ZN6H16ISP35H16ISPTimeOfFlightColorSynchronizer8activateEPK8__CFDatajj_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 8) = 1;
  return result;
}

uint64_t SetRawBufferCompandingEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  if (*(void *)(a2 + 136)) {
    return 4294954612;
  }
  *(unsigned char *)(a2 + 544) = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  if (ConfigSensorFormat(a4, a2)) {
    return 4294954514;
  }
  else {
    return 0;
  }
}

uint64_t ConfigSensorFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  BOOL v4 = 1;
  if (!*(unsigned char *)(a2 + 752)
    && !*(unsigned char *)(a2 + 952)
    && !*(unsigned char *)(a2 + 1152)
    && !*(unsigned char *)(a2 + 1352)
    && !*(unsigned char *)(a2 + 1552)
    && !*(unsigned char *)(a2 + 2552)
    && !*(unsigned char *)(a2 + 2280)
    && !*(unsigned char *)(a2 + 2080)
    && !*(void *)(a2 + 4344)
    && !*(void *)(a2 + 4360)
    && !*(void *)(a2 + 4336))
  {
    char v16 = *(void **)(a2 + 4456);
    if (!v16 || !*v16 && !v16[14]) {
      BOOL v4 = 0;
    }
  }
  unsigned int v5 = *(_DWORD *)(a2 + 48);
  unsigned int v6 = *(_DWORD *)(a2 + 168);
  if (v5 < v6) {
    unsigned int v6 = 0;
  }
  unsigned int v7 = v5 - v6;
  uint64_t CameraConfig = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a1 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v5 - v6) + 16), v17, v19);
  if (!CameraConfig)
  {
    if (dword_26B11BAA8 != -1) {
      *(unsigned char *)(a2 + 544) = dword_26B11BAA8 != 0;
    }
    if (dword_26B11BA48 == -1)
    {
      if (v18 != 1 || *(unsigned char *)(a2 + 3784)) {
        *(unsigned char *)(a2 + 545) = 0;
      }
    }
    else
    {
      *(unsigned char *)(a2 + 545) = dword_26B11BA48 != 0;
    }
    *(_DWORD *)(a2 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    unsigned int v9 = *(_DWORD *)(a2 + 132);
    int v10 = gCaptureDeviceCFPrefs[44 * v9 + 175];
    if (v10 == -1)
    {
      if (*(unsigned char *)(a2 + 545)) {
        char v11 = v4;
      }
      else {
        char v11 = 1;
      }
      if ((v11 & 1) != 0 || *(unsigned char *)(a2 + 544))
      {
LABEL_30:
        *(_DWORD *)(a2 + 536) = 3;
        int v12 = gCaptureDeviceCFPrefs[44 * v9 + 174];
        if (v12 == -1)
        {
          if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), v9, 1785950322))
          {
            int v12 = 0;
          }
          else
          {
            if (!*(unsigned char *)(a2 + 545))
            {
LABEL_36:
              if (*(unsigned char *)(a2 + 544)) {
                *(_DWORD *)(a2 + 536) = 0;
              }
              if (*(_DWORD *)(a2 + 548) != -1
                && !*(unsigned char *)(a2 + 3784)
                && !H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *(_DWORD *)(a2 + 132), 1785950322))
              {
                *(_DWORD *)(a2 + 536) = *(_DWORD *)(a2 + 548);
              }
              if (v19[376]) {
                char v13 = *(_DWORD *)(a2 + 540) != 0;
              }
              else {
                char v13 = 0;
              }
              uint64_t CameraConfig = H16ISP::H16ISPDevice::SetSensorInterfacePixelFormat(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(a2 + 536), *(unsigned char *)(a2 + 545) ^ 1u, v13, *(unsigned char *)(a2 + 544));
              if (CameraConfig)
              {
                int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  int v14 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
                }
                if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                  ConfigSensorFormat();
                }
              }
              return CameraConfig;
            }
            int v12 = 1;
          }
        }
        *(_DWORD *)(a2 + 536) = v12;
        goto LABEL_36;
      }
      int v10 = *(unsigned __int8 *)(*(void *)(a2 + 160) + 120 * v7 + 105);
    }
    *(_DWORD *)(a2 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v10;
    goto LABEL_30;
  }
  return CameraConfig;
}

uint64_t H16ISP::H16ISPDevice::SetSensorInterfacePixelFormat(H16ISP::H16ISPDevice *this, int a2, char a3, char a4, char a5, char a6)
{
  bzero(v13, 0x14uLL);
  __int16 v14 = 277;
  int v15 = a2;
  char v16 = a3;
  char v17 = a4;
  char v18 = a5;
  char v19 = a6;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v13, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t SetChromaNoiseReductionEnabled(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v4 = cf;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFBooleanGetTypeID())
    {
      int v8 = CFEqual(v4, (CFTypeRef)*MEMORY[0x263EFFB40]);
      LODWORD(v4) = v8 != 0;
      if (!H16ISP::H16ISPDevice::EnableCNR(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (int)v4))
      {
        uint64_t v9 = 0;
        *(unsigned char *)(a2 + 3752) = v8 != 0;
        goto LABEL_7;
      }
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  uint64_t v9 = 4294954516;
LABEL_7:
  int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v10 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    char v11 = "False";
    if (v4) {
      char v11 = "True";
    }
    int v13 = 136315138;
    __int16 v14 = v11;
    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Enable CNR: %s\n\n", (uint8_t *)&v13, 0xCu);
  }
  return v9;
}

uint64_t H16ISP::H16ISPDevice::EnableCNR(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  if (a3)
  {
    bzero(v7, 0xCuLL);
    __int16 v5 = 2607;
  }
  else
  {
    bzero(v7, 0xCuLL);
    __int16 v5 = 2608;
  }
  __int16 v8 = v5;
  int v9 = a2;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0xCu, 0, 0xFFFFFFFF);
}

H16ISP::ProjectorManager *H16ISP::ProjectorManager::ProjectorManager(H16ISP::ProjectorManager *this, H16ISP::H16ISPDevice *a2, H16ISP::H16ISPDevice *a3, uint64_t a4, uint64_t a5, int *a6)
{
  *(_DWORD *)this = a3;
  *((void *)this + 1) = a2;
  *((void *)this + 51) = 7680;
  *((unsigned char *)this + 416) = 0;
  *((_OWORD *)this + 1) = xmmword_2469D2AA0;
  H16ISP::ProjectorManager::getProjectorVersion(a2, a3, &v11, &v10, (int *)this + 7, a6);
  int v7 = *((_DWORD *)this + 7) - 8;
  if (v7 > 3) {
    __int16 v8 = &H16ISP::g_ProjectorSettings_Pearl;
  }
  else {
    __int16 v8 = *(&off_2651E8970 + v7);
  }
  *((void *)this + 5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v8;
  H16ISP::ProjectorManager::populateProjectorModes(this);
  return this;
}

uint64_t H16ISP::ProjectorManager::getProjectorVersion(H16ISP::ProjectorManager *this, H16ISP::H16ISPDevice *a2, _DWORD *a3, int *a4, int *a5, int *a6)
{
  int v9 = (int)a2;
  uint64_t v21 = *MEMORY[0x263EF8340];
  bzero(v15, 0x68uLL);
  __int16 v16 = 1565;
  int v17 = v9;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v15, 0x68u, 0, 0xFFFFFFFF);
  int v12 = v18;
  int v13 = v19;
  int v14 = v20;
  if (result)
  {
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
  }
  *a3 = v12;
  *a4 = v13;
  *a5 = v14;
  return result;
}

uint64_t H16ISP::ProjectorManager::populateProjectorModes(H16ISP::ProjectorManager *this)
{
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0);
  H16ISP::ProjectorManager::setEntryFlood((int *)this, 1u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 2u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 3u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 4u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 5u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 6u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 7u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 8u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 9u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0xAu);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0xBu);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0xCu);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0xDu);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0xEu);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0xFu);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0x10u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0x11u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0x12u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0x13u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0x14u);
  H16ISP::ProjectorManager::setEntryFlood((int *)this, 0x15u);
  H16ISP::ProjectorManager::setEntryFlood((int *)this, 0x16u);
  H16ISP::ProjectorManager::setEntryFlood((int *)this, 0x17u);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0x1Au);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0x1Bu);
  H16ISP::ProjectorManager::setEntryPattern((int *)this, 0x18u);
  H16ISP::ProjectorManager::setEntryFlood((int *)this, 0x19u);

  return H16ISP::ProjectorManager::initializeAEParams((uint64_t)this);
}

uint64_t H16ISP::ProjectorManager::setEntryPattern(int *a1, unsigned int a2)
{
  uint64_t v2 = (int32x2_t *)(*((void *)a1 + 50) + 20 * a2);
  unsigned int v3 = v2[2].u32[0];
  int32x2_t v5 = *v2;
  int32x2_t v4 = v2[1];
  *(int32x2_t *)v6.i8 = vrev64_s32(*v2);
  v6.u64[1] = (unint64_t)v4;
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v6, v6))))
  {
    int8x8_t v7 = (int8x8_t)vcgtz_s32(v5);
    __int16 v11 = 1563;
    int v12 = *a1;
    int v13 = 1;
    __int16 v15 = 1;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    __int16 v14 = a2;
    *(int32x2_t *)__int16 v16 = v5;
    int8x8_t v8 = (int8x8_t)vdup_n_s32(v3);
    int8x8_t v21 = vand_s8(v8, v7);
    *(_DWORD *)&_OWORD v16[8] = 0;
    int v22 = 0;
    int32x2_t v17 = v4;
    int8x8_t v23 = vand_s8(v8, (int8x8_t)vcgtz_s32(v4));
  }
  else
  {
    __int16 v11 = 1563;
    int v12 = *a1;
    int v13 = 1;
    __int16 v15 = 1;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    __int16 v14 = a2;
    int v20 = 0;
    v21.i32[0] = v3;
    v21.i32[1] = v3;
    int v22 = 0;
    int32x2_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    v23.i32[0] = v3;
    v23.i32[1] = v3;
  }
  return H16ISP::H16ISPDevice::ISP_SendCommand(*((H16ISP::H16ISPDevice **)a1 + 1), v10, 0x6Cu, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::ProjectorManager::setEntryFlood(int *a1, unsigned int a2)
{
  uint64_t v2 = (int *)(*((void *)a1 + 50) + 20 * a2);
  int v3 = *v2;
  LODWORD(v2) = v2[4];
  __int16 v6 = 1563;
  int v7 = *a1;
  int v8 = 1;
  __int16 v10 = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  __int16 v9 = a2;
  uint64_t v11 = 0;
  uint64_t v17 = 0;
  int v12 = v3;
  int v18 = (int)v2;
  uint64_t v13 = 0;
  uint64_t v19 = 0;
  return H16ISP::H16ISPDevice::ISP_SendCommand(*((H16ISP::H16ISPDevice **)a1 + 1), v5, 0x6Cu, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::ProjectorManager::initializeAEParams(uint64_t this)
{
  *(_OWORD *)(this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(void *)(this + 392) = 0;
  *(_OWORD *)(this + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(this + 376) = 0u;
  *(_OWORD *)(this + 328) = 0u;
  *(_OWORD *)(this + 344) = 0u;
  *(_OWORD *)(this + 296) = 0u;
  *(_OWORD *)(this + 312) = 0u;
  *(_OWORD *)(this + 232) = 0u;
  *(_OWORD *)(this + 248) = 0u;
  *(_OWORD *)(this + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(this + 216) = 0u;
  *(_OWORD *)(this + 168) = 0u;
  *(_OWORD *)(this + 184) = 0u;
  *(_OWORD *)(this + 136) = 0u;
  *(_OWORD *)(this + 152) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_OWORD *)(this + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(this + 264) = 0u;
  int v1 = *(_DWORD *)(this + 408);
  if (v1 >= 15360) {
    int v2 = 15360;
  }
  else {
    int v2 = *(_DWORD *)(this + 408);
  }
  if (v1 >= 7680) {
    int v3 = 7680;
  }
  else {
    int v3 = *(_DWORD *)(this + 408);
  }
  if (v1 >= 3840) {
    int v4 = 3840;
  }
  else {
    int v4 = *(_DWORD *)(this + 408);
  }
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 36) = v2;
  int32x2_t v5 = *(_DWORD **)(this + 400);
  *(_DWORD *)(this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5[9];
  *(_DWORD *)(this + 44) = v2;
  *(_DWORD *)(this + 52) = v3;
  int v6 = v5[14];
  *(_DWORD *)(this + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(_DWORD *)(this + 64) = v6;
  int v7 = v5[54];
  *(_DWORD *)(this + 68) = v4;
  *(_DWORD *)(this + 72) = v7;
  *(_DWORD *)(this + 76) = v3;
  *(_DWORD *)(this + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v6;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 88) = v7;
  *(_DWORD *)(this + 92) = v2;
  *(_DWORD *)(this + 96) = v6;
  *(_DWORD *)(this + 10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  int v8 = v3;
  int v9 = *(_DWORD *)(this + 28);
  if (v9 != 8)
  {
    int v8 = v3;
    if (v9 != 11)
    {
      if (v1 >= 1280) {
        int v8 = 1280;
      }
      else {
        int v8 = v1;
      }
    }
  }
  *(_DWORD *)(this + 104) = v5[94];
  *(_DWORD *)(this + 108) = v8;
  *(_DWORD *)(this + 112) = v5[104];
  *(_DWORD *)(this + 116) = v8;
  *(_DWORD *)(this + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5[109];
  *(_DWORD *)(this + 164) = v8;
  *(_DWORD *)(this + 168) = v5[119];
  *(_DWORD *)(this + 172) = v8;
  *(_DWORD *)(this + 392) = v5[139];
  *(_DWORD *)(this + 396) = v8;
  int v10 = v5[34];
  *(_DWORD *)(this + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v10;
  *(_DWORD *)(this + 124) = v4;
  int v11 = v5[74];
  *(_DWORD *)(this + 128) = v11;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 136) = v10;
  *(_DWORD *)(this + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(_DWORD *)(this + 144) = v11;
  *(_DWORD *)(this + 148) = v2;
  *(_DWORD *)(this + 152) = v10;
  *(_DWORD *)(this + 156) = v3;
  *(_DWORD *)(this + 176) = v5[19];
  *(_DWORD *)(this + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4;
  *(_DWORD *)(this + 184) = v5[24];
  *(_DWORD *)(this + 188) = v4;
  *(_DWORD *)(this + 192) = v5[29];
  *(_DWORD *)(this + 196) = v4;
  *(_DWORD *)(this + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5[59];
  *(_DWORD *)(this + 204) = v3;
  *(_DWORD *)(this + 208) = v5[64];
  *(_DWORD *)(this + 212) = v3;
  int v12 = v5[69];
  *(_DWORD *)(this + 216) = v12;
  *(_DWORD *)(this + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(_DWORD *)(this + 224) = v5[39];
  *(_DWORD *)(this + 228) = v4;
  *(_DWORD *)(this + 232) = v5[44];
  *(_DWORD *)(this + 236) = v4;
  *(_DWORD *)(this + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5[49];
  *(_DWORD *)(this + 244) = v4;
  *(_DWORD *)(this + 248) = v5[79];
  *(_DWORD *)(this + 252) = v3;
  *(_DWORD *)(this + 256) = v5[84];
  *(_DWORD *)(this + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(_DWORD *)(this + 264) = v5[89];
  *(_DWORD *)(this + 268) = v3;
  *(_DWORD *)(this + 272) = v12;
  *(_DWORD *)(this + 276) = v2;
  int v13 = v5[124];
  *(_DWORD *)(this + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v13;
  *(_DWORD *)(this + 284) = 15360;
  *(_DWORD *)(this + 288) = v13;
  *(_DWORD *)(this + 292) = 10240;
  return this;
}

uint64_t ___ZN6H16ISPL39H16ISPMotionManagerInitializationThreadEPNS_19H16ISPMotionManagerE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mach_timebase_info(&info);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  *(unsigned char *)(v6 + 48) = 1;
  if (*(_DWORD *)(v6 + 24)
    || (result = H16ISP::H16ISPDevice::GetISPCounterFrequency(*(H16ISP::H16ISPDevice **)v6, (unsigned int *)(v6 + 24), (double *)(v6 + 16)), uint64_t v6 = *(void *)(a1 + 32), *(_DWORD *)(v6 + 24)))
  {
    uint64_t result = H16ISP::H16ISPDevice::ISP_GetCameraTime(*(void *)v6, outputStruct);
    if (!result) {
      return H16ISP::H16ISPDevice::SetOscarToISPClockSync(**(H16ISP::H16ISPDevice ***)(a1 + 32), a3, (unint64_t)((double)outputStruct[1]+ -1.0 / *(double *)(*(void *)(a1 + 32) + 16) * (double)(outputStruct[0] - a2)));
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetOscarToISPClockSync(H16ISP::H16ISPDevice *this, uint64_t a2, uint64_t a3)
{
  bzero(v7, 0x18uLL);
  __int16 v8 = 12;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t CopyCalibratedRotationAngle(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int valuePtr = 0;
  H16ISP::H16ISPDevice::GetRotationCorrectionCalibration(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), (float *)&valuePtr);
  if (v7)
  {
    __int16 v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v8 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      CopyCalibratedRotationAngle();
    }
    return 4294954514;
  }
  else
  {
    CFNumberRef v10 = CFNumberCreate(a1, kCFNumberFloatType, &valuePtr);
    uint64_t result = 0;
    *a2 = v10;
  }
  return result;
}

float H16ISP::H16ISPDevice::GetRotationCorrectionCalibration(H16ISP::H16ISPDevice *this, __int16 a2, float *a3)
{
  bzero(v7, 0x24uLL);
  __int16 v9 = a2;
  __int16 v8 = 362;
  if (!H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x24u, 0, 0xFFFFFFFF))
  {
    float result = v10;
    *a3 = v10;
  }
  return result;
}

uint64_t SetAWBTemporalStabilizationEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  unsigned __int8 v8 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  uint64_t result = H16ISP::H16ISPDevice::EnableAWBTemporalStabilizer(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8);
  if (result)
  {
    float v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      float v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetAWBTemporalStabilizationEnabled();
    }
    return 4294954514;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableAWBTemporalStabilizer(H16ISP::H16ISPDevice *this, int a2, unsigned __int8 a3)
{
  if (*((_DWORD *)this + 1187) < (unsigned __int16)a2) {
    return 3758097090;
  }
  uint64_t v4 = 0x832700000000;
  int v5 = a2;
  int v6 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISPCaptureStreamAddAttachmentsToSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v6 + 154)) {
    LogCaptureDeviceEvent(0x10u, v6, DerivedStorage, 0, 0, 0, 0);
  }
  if (!a2)
  {
    uint64_t v26 = 4294954516;
    goto LABEL_38;
  }
  ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  unsigned __int8 v8 = ImageBuffer;
  if (!ImageBuffer)
  {
    CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a2);
    unsigned __int8 v8 = (__CVBuffer *)CMGetAttachment(DataBuffer, (CFStringRef)*MEMORY[0x263F00E18], 0);
    if (!v8) {
      goto LABEL_33;
    }
  }
  CFStringRef v10 = (const __CFString *)*MEMORY[0x263F2C558];
  CFTypeRef Attachment = CVBufferGetAttachment(v8, (CFStringRef)*MEMORY[0x263F2C558], 0);
  int v12 = (CFStringRef *)MEMORY[0x263F2C530];
  if (!ImageBuffer || Attachment) {
    goto LABEL_14;
  }
  CFNumberRef Value = (__CVBuffer *)CVBufferGetAttachment(ImageBuffer, @"RawMetaData", 0);
  if (!Value)
  {
    CFDictionaryRef v31 = (const __CFDictionary *)CVBufferGetAttachment(ImageBuffer, *v12, 0);
    if (!v31 || (CFNumberRef Value = (__CVBuffer *)CFDictionaryGetValue(v31, (const void *)*MEMORY[0x263F2C1A0])) == 0)
    {
      long long v32 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        long long v32 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v32;
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315138;
        *(void *)&uint8_t buf[4] = "H16ISPCaptureStreamAddAttachmentsToSampleBuffer";
        _os_log_impl(&dword_24680F000, v32, OS_LOG_TYPE_DEFAULT, "%s - Unable to find metadata pixel buffer\n", buf, 0xCu);
      }
LABEL_33:
      uint64_t v26 = 4294954513;
      goto LABEL_38;
    }
  }
  CFDataRef v14 = (const __CFData *)CVBufferGetAttachment(Value, @"PluginMetadata", 0);
  if (!v14)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 32));
    if (*(unsigned char *)DerivedStorage || *(unsigned char *)v6)
    {
      uint64_t v26 = 4294954511;
    }
    else
    {
      if (*(void *)(v6 + 24))
      {
        CreateH16ISPPluginMetadata(v6, DerivedStorage, buf);
        pthread_mutex_unlock((pthread_mutex_t *)(v6 + 32));
        goto LABEL_11;
      }
      uint64_t v26 = 4294954616;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 32));
    goto LABEL_38;
  }
  BytePtr = CFDataGetBytePtr(v14);
  *(_OWORD *)CMTime buf = *(_OWORD *)BytePtr;
  long long v16 = *((_OWORD *)BytePtr + 4);
  long long v18 = *((_OWORD *)BytePtr + 1);
  long long v17 = *((_OWORD *)BytePtr + 2);
  v39[1] = *((_OWORD *)BytePtr + 3);
  long long v40 = v16;
  *(_OWORD *)&buf[16] = v18;
  v39[0] = v17;
  CVBufferRemoveAttachment(Value, @"PluginMetadata");
LABEL_11:
  *(void *)&long long v40 = a3;
  CFStringRef v19 = *v12;
  CFTypeRef v20 = CMGetAttachment(a2, *v12, 0);
  if (v20) {
    CVBufferSetAttachment(ImageBuffer, v19, v20, kCVAttachmentMode_ShouldPropagate);
  }
  CFArrayRef v37 = ImageBuffer;
  std::deque<__CVBuffer *>::deque((uint64_t)v36, (uint64_t *)&v37, 1);
  v21.n128_u64[0] = *(void *)(DerivedStorage + 3744);
  H16ISP::GenerateAndAttachCoreMediaMetaDataDictionary(*(void *)(*(void *)(v6 + 24) + 88), ImageBuffer, v36, v39, v21);
  std::deque<__CVBuffer *>::~deque[abi:ne180100](v36);
LABEL_14:
  CFTypeRef v22 = CVBufferGetAttachment(v8, v10, 0);
  if (v22)
  {
    CMSetAttachment(a2, v10, v22, 1u);
    int8x8_t v23 = (__CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x263F2C578], 0);
    __int16 v24 = (const void **)MEMORY[0x263F2C4F0];
    if (v23) {
      CFDictionarySetValue(v23, (const void *)*MEMORY[0x263F2C4F0], v22);
    }
    __int16 v25 = (__CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x263F2C590], 0);
    if (v25) {
      CFDictionarySetValue(v25, *v24, v22);
    }
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = 4294954616;
  }
  CFStringRef v27 = *v12;
  CFTypeRef v28 = CVBufferGetAttachment(v8, *v12, 0);
  if (v28) {
    CMSetAttachment(a2, v27, v28, 1u);
  }
  if (ImageBuffer)
  {
    CFStringRef v29 = (const __CFString *)*MEMORY[0x263F2C520];
    CFTypeRef v30 = CVBufferGetAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x263F2C520], 0);
    if (v30) {
      CMSetAttachment(a2, v29, v30, 1u);
    }
  }
LABEL_38:
  if (*(unsigned char *)(v6 + 154)) {
    LogCaptureDeviceEvent(0x10u, v6, DerivedStorage, 0, 0, 0, 1);
  }
  if (dword_26B11B9E8)
  {
    int v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v33 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      int v34 = *(_DWORD *)(DerivedStorage + 132);
      *(_DWORD *)CMTime buf = 136315650;
      *(void *)&uint8_t buf[4] = "H16ISPCaptureStreamAddAttachmentsToSampleBuffer";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v34;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v26;
      _os_log_impl(&dword_24680F000, v33, OS_LOG_TYPE_INFO, "%s - camChannel=%d, err=%d\n\n", buf, 0x18u);
    }
  }
  return v26;
}

void sub_246850D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SetLumaHistogramEnabled(const __CFBoolean *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && (CFTypeID v7 = CFGetTypeID(a1), v7 == CFBooleanGetTypeID()))
  {
    int Value = CFBooleanGetValue(a1);
    int v9 = Value != 0;
    if (!*(void *)(a2 + 136))
    {
      int v19 = Value;
      if (H16ISP::H16ISPDevice::EnableYCCHistogram(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), Value != 0))
      {
        CFTypeRef v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFTypeRef v20 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          SetLumaHistogramEnabled();
        }
      }
      else
      {
        uint64_t result = H16ISP::H16ISPDevice::EnableMetadataSection(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), *(_WORD *)(a2 + 3852), v19 != 0);
        if (!result)
        {
          *(unsigned char *)(a2 + 3856) = v9;
          return result;
        }
        __n128 v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          __n128 v21 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          SetLumaHistogramEnabled();
        }
      }
      return 4294954514;
    }
    if (*(unsigned __int8 *)(a2 + 3856) == v9) {
      return 0;
    }
    else {
      return 4294954612;
    }
  }
  else
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      SetLumaHistogramEnabled(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    return 4294954516;
  }
}

uint64_t H16ISP::H16ISPDevice::EnableYCCHistogram(H16ISP::H16ISPDevice *this, __int16 a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2616;
  __int16 v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetContentAwareEnhancement(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  __int16 v8 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  if (v8 && !H16ISP::H16ISPFrameReceiver::IsSuspended(v8)) {
    return 4294954612;
  }
  char v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  *(unsigned char *)(a2 + 3753) = v9;
  uint64_t result = H16ISP::H16ISPDevice::EnableNRSemanticVideo(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v9);
  if (result)
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      SetContentAwareEnhancement();
    }
    return 4294954516;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableNRSemanticVideo(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2839;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetContentAwareAWBEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  __int16 v8 = *(H16ISP::H16ISPFrameReceiver **)(a2 + 136);
  if (v8 && !H16ISP::H16ISPFrameReceiver::IsSuspended(v8)) {
    return 4294954612;
  }
  char v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  *(unsigned char *)(a2 + 3754) = v9;
  uint64_t result = H16ISP::H16ISPDevice::EnableAWBSemanticVideo(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v9);
  if (result)
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      SetContentAwareAWBEnabled();
    }
    return 4294954516;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableAWBSemanticVideo(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2840;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetAEMaxGain(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  uint64_t v8 = *(void *)(a2 + 136);
  int v9 = H16ISP::H16ISPDevice::SetGainCap(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  if (v8)
  {
    char v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      char v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    *(_DWORD *)CMTime buf = 67109376;
    int v15 = valuePtr;
    __int16 v16 = 1024;
    int v17 = v9;
    int v11 = "H16ISPCaptureDevice: Setting Gain Cap: 0x%08X, result=0x%08X\n\n";
  }
  else
  {
    *(_DWORD *)(a2 + 72) = valuePtr;
    char v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      char v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    *(_DWORD *)CMTime buf = 67109376;
    int v15 = valuePtr;
    __int16 v16 = 1024;
    int v17 = v9;
    int v11 = "H16ISPCaptureDevice: Caching Gain Cap for next stream start: 0x%08X, result=0x%08X\n\n";
  }
  _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_INFO, v11, buf, 0xEu);
LABEL_14:
  if (v9) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::SetGainCap(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 524;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t ___ZN6H16ISP24H16ISPGraphFrameSyncNode13EnableChannelEj_block_invoke(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(result + 40);
  do
  {
    if (*(unsigned char *)(v2 + v1 + 80))
    {
      if (*(_DWORD *)(v2 + v1 + 84) == *(_DWORD *)(result + 48)) {
        *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      }
    }
    v1 += 72;
  }
  while (v1 != 216);
  if (*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = v2 + v3;
      if (!*(unsigned char *)(v2 + v3 + 80)) {
        break;
      }
      v3 += 72;
      if (v3 == 216) {
        return result;
      }
    }
    *(unsigned char *)(v4 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
    *(_DWORD *)(v4 + 84) = *(_DWORD *)(result + 48);
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  return result;
}

uint64_t SetAPSMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  if (gCaptureDeviceCFPrefs[44 * *(unsigned int *)(a2 + 132) + 180] != -1) {
    return 0;
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  uint64_t result = H16ISP::H16ISPDevice::SetAPSMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  if (result)
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetAPSMode();
    }
    return 4294954514;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetAPSMode(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 1924;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetMaxIntegrationTime(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  double valuePtr = 0.0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
  double v8 = valuePtr;
  *(double *)(a2 + 368) = valuePtr;
  int v9 = H16ISP::H16ISPDevice::SetMaxIntegrationTime(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), (v8 * 1000.0));
  int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v10 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)CMTime buf = 134218240;
    double v14 = valuePtr;
    __int16 v15 = 1024;
    int v16 = v9;
    _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting Maximum Integration Time (in Milliseconds): %.3f, result=0x%08X\n\n", buf, 0x12u);
  }
  if (v9) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::SetMaxIntegrationTime(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 526;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetMainToSIFRFrameRateRatio(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 1;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr <= 0)
  {
    int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SetMainToSIFRFrameRateRatio();
    }
    return 4294954516;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetSIFRSkipInterval(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
  if (result)
  {
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SetMainToSIFRFrameRateRatio();
    }
    return 4294954514;
  }
  else
  {
    *(_DWORD *)(a2 + 64) = valuePtr;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetSIFRSkipInterval(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  if (*((_DWORD *)this + 1187) < (unsigned __int16)a2) {
    return 3758097090;
  }
  uint64_t v4 = 0x100800000000;
  int v5 = a2;
  int v6 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::ISP_PowerOnCamera(H16ISP::H16ISPDevice *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v92 = *MEMORY[0x263EF8340];
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v86 = 136315138;
    *(void *)&uint8_t v86[4] = "ISP_PowerOnCamera";
    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "%s - powering on camera\n", v86, 0xCu);
  }
  kdebug_trace();
  uint64_t v3 = 3758097084;
  if (*(_DWORD *)(v2 + 4424))
  {
    if ((H16ISP::H16ISPDevice::ISP_IsPowered((H16ISP::H16ISPDevice *)v2) & 1) == 0 && *(unsigned char *)(v2 + 4)) {
      H16ISP::H16ISPDevice::InitDeviceConfigsCache((H16ISP::H16ISPDevice *)v2);
    }
    unsigned int v59 = IOConnectCallScalarMethod(*(_DWORD *)(v2 + 4424), 0xBu, 0, 0, 0, 0);
    if (!v59)
    {
      mach_port_t v4 = *(_DWORD *)(v2 + 4424);
      if (!v4) {
        return v3;
      }
      *(void *)uint64_t v86 = 63;
      uint64_t v3 = IOConnectCallScalarMethod(v4, 0x3Au, (const uint64_t *)v86, 1u, 0, 0);
      if (v3) {
        return v3;
      }
      int v5 = (_DWORD *)(v2 + 4748);
      if (*(_DWORD *)(v2 + 4748)) {
        goto LABEL_19;
      }
      if (H16ISP::H16ISPDevice::ISP_GetNumChannels((H16ISP::H16ISPDevice *)v2, (unsigned int *)(v2 + 4748)))
      {
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPDevice::ISP_PowerOnCamera();
        }
      }
      if (*v5)
      {
LABEL_19:
        uint64_t v7 = 0;
        unsigned int v59 = 0;
        do
        {
          bzero(v89, 0x9CuLL);
          *(void *)unsigned int v60 = v7;
          H16ISP::H16ISPDevice::ISP_GetModuleParams((H16ISP::H16ISPDevice *)v2, v7, (H16ISPModuleParams *)v89);
          bzero(v86, 0x211CuLL);
          H16ISP::H16ISPDevice::ISP_GetNVMParams(v2, v7, 0, v86);
          bzero(v85, 0x211CuLL);
          H16ISP::H16ISPDevice::ISP_GetNVMParams(v2, v7, 1u, v85);
          bzero(v84, 0x211CuLL);
          H16ISP::H16ISPDevice::ISP_GetNVMParams(v2, v7, 2u, v84);
          if ((_BYTE)v90 && !v91) {
            operator new();
          }
          ++v7;
        }
        while (*(void *)v60 + 1 < (unint64_t)*v5);
      }
      else
      {
        unsigned int v59 = 0;
      }
      if (!*(unsigned char *)(v2 + 4)) {
        H16ISP::H16ISPDevice::CacheDeviceConfigs((H16ISP::H16ISPDevice *)v2, v6);
      }
      if (*(unsigned char *)(*(void *)(v2 + 4384) + 584) && !*(void *)(v2 + 104))
      {
        if (!*(unsigned char *)(v2 + 4496)) {
          operator new();
        }
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
        }
        unsigned int v59 = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v86 = 136315138;
          *(void *)&uint8_t v86[4] = "ISP_PowerOnCamera";
          _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s - bypassMotionManagerInitialization!\n", v86, 0xCu);
          unsigned int v59 = 0;
        }
      }
    }
  }
  else
  {
    unsigned int v59 = -536870212;
  }
  if (*(_DWORD *)(v2 + 4748))
  {
    unint64_t v8 = 0;
    int v9 = (unsigned char *)(v2 + 4608);
    uint64_t v10 = 16;
    do
    {
      int v11 = *(_DWORD *)(*(void *)(v2 + 4384) + v10);
      if (v11 <= 1785950321)
      {
        if (v11 == 1718186595)
        {
          uint64_t v13 = 0;
          uint64_t v12 = "com.apple.isp.frontirsensorpower";
          goto LABEL_47;
        }
        if (v11 == 1718775412 || v11 == 1718776695)
        {
          uint64_t v12 = "com.apple.isp.frontcamerapower";
          uint64_t v13 = "com.apple.isp.frontcamerasensorconfig";
          goto LABEL_47;
        }
      }
      else if (v11 > 1919251318)
      {
        if (v11 == 1919251319)
        {
          uint64_t v12 = "com.apple.isp.backsuperwidecamerapower";
          uint64_t v13 = "com.apple.isp.backsuperwidesensorconfig";
LABEL_47:
          *((void *)v9 - 13) = v12;
          *((void *)v9 - 1) = v13;
          if (!*(v9 - 96))
          {
            __int16 v15 = *(NSObject **)(*(void *)(v2 + 72) + 72);
            if (v15)
            {
              block[0] = MEMORY[0x263EF8330];
              block[1] = 0x40000000;
              block[2] = ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke;
              block[3] = &__block_descriptor_tmp_225;
              block[4] = v2;
              int v77 = v8;
              dispatch_sync(v15, block);
              uint64_t v13 = (const char *)*((void *)v9 - 1);
            }
          }
          if (v13)
          {
            if (!*v9)
            {
              int v16 = *(NSObject **)(*(void *)(v2 + 72) + 72);
              if (v16)
              {
                v74[0] = MEMORY[0x263EF8330];
                v74[1] = 0x40000000;
                v74[2] = ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke_2;
                v74[3] = &__block_descriptor_tmp_226;
                v74[4] = v2;
                int v75 = v8;
                dispatch_sync(v16, v74);
              }
            }
          }
          goto LABEL_54;
        }
        if (v11 == 1919251564)
        {
          uint64_t v12 = "com.apple.isp.backtelecamerapower";
          uint64_t v13 = "com.apple.isp.backtelecamerasensorconfig";
          goto LABEL_47;
        }
      }
      else
      {
        if (v11 == 1785950322)
        {
          uint64_t v13 = 0;
          uint64_t v12 = "com.apple.isp.backtofsensorpower";
          goto LABEL_47;
        }
        if (v11 == 1919246706)
        {
          uint64_t v12 = "com.apple.isp.backcamerapower";
          uint64_t v13 = "com.apple.isp.backcamerasensorconfig";
          goto LABEL_47;
        }
      }
      *((void *)v9 - 13) = 0;
      *((void *)v9 - 1) = 0;
LABEL_54:
      ++v8;
      v9 += 16;
      v10 += 96;
    }
    while (v8 < *(unsigned int *)(v2 + 4748));
  }
  if (!*(unsigned char *)(v2 + 4704))
  {
    *(void *)(v2 + 4696) = "com.apple.isp.cameratorch";
    uint64_t v17 = *(NSObject **)(*(void *)(v2 + 72) + 72);
    if (v17)
    {
      v73[0] = MEMORY[0x263EF8330];
      v73[1] = 0x40000000;
      v73[2] = ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke_3;
      v73[3] = &__block_descriptor_tmp_228;
      v73[4] = v2;
      dispatch_sync(v17, v73);
    }
  }
  if (!*(unsigned char *)(v2 + 4720))
  {
    *(void *)(v2 + 4712) = "com.apple.isp.cameratorchcoolcurrent";
    uint64_t v18 = *(NSObject **)(*(void *)(v2 + 72) + 72);
    if (v18)
    {
      v72[0] = MEMORY[0x263EF8330];
      v72[1] = 0x40000000;
      v72[2] = ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke_4;
      v72[3] = &__block_descriptor_tmp_230;
      v72[4] = v2;
      dispatch_sync(v18, v72);
    }
  }
  if (!*(unsigned char *)(v2 + 4736))
  {
    *(void *)(v2 + 4728) = "com.apple.isp.cameratorchwarmcurrent";
    int v19 = *(NSObject **)(*(void *)(v2 + 72) + 72);
    if (v19)
    {
      v71[0] = MEMORY[0x263EF8330];
      v71[1] = 0x40000000;
      v71[2] = ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke_5;
      v71[3] = &__block_descriptor_tmp_232;
      unsigned __int8 v71[4] = v2;
      dispatch_sync(v19, v71);
    }
  }
  int IsPowered = H16ISP::H16ISPDevice::ISP_IsPowered((H16ISP::H16ISPDevice *)v2);
  unsigned int v21 = v59;
  if (IsPowered && *(unsigned char *)(v2 + 4) && !v59)
  {
    if (*(_DWORD *)(v2 + 4748))
    {
      unsigned int v22 = 0;
      unsigned int v23 = 0;
      do
      {
        sprintf(v85, "/usr/local/share/firmware/isp/cam%dclocks.txt", v22);
        __int16 v24 = fopen(v85, "r");
        if (v24)
        {
          __int16 v25 = &_os_log_internal;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
          {
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
            __int16 v25 = &_os_log_internal;
          }
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(__dst[0]) = 67109120;
            DWORD1(__dst[0]) = v22;
            uint64_t v26 = &_os_log_internal;
            CFStringRef v27 = "Found camera clock override information file for camera channel %d\n";
LABEL_74:
            _os_log_impl(&dword_24680F000, v26, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)__dst, 8u);
          }
          while (fgets(v86, 256, v24))
          {
            CFTypeRef v28 = strtok(v86, "=");
            if (v28)
            {
              CFStringRef v29 = v28;
              if (!strncmp(v28, "clockdiv", 8uLL))
              {
                uint64_t v35 = strtok(0, " \n");
                if (v35)
                {
                  int v36 = strtoul(v35, 0, 0);
                  CFArrayRef v37 = &_os_log_internal;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
                  {
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                    CFArrayRef v37 = &_os_log_internal;
                  }
                  uint64_t v38 = v37;
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(__dst[0]) = 67109120;
                    DWORD1(__dst[0]) = v36;
                    uint64_t v26 = v38;
                    CFStringRef v27 = "Set clock divider reg to 0x%08X\n";
                    goto LABEL_74;
                  }
                }
                else
                {
                  CFNumberRef v50 = &_os_log_internal;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
                  {
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                    CFNumberRef v50 = &_os_log_internal;
                  }
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
                    H16ISP::H16ISPDevice::ISP_PowerOnCamera(&v69, v70);
                  }
                }
              }
              else if (!strncmp(v29, "property", 8uLL))
              {
                uint64_t v39 = strtok(0, " :");
                if (v39)
                {
                  int v40 = strtoul(v39, 0, 0);
                  uint64_t v41 = strtok(0, " \n");
                  if (v41)
                  {
                    int v42 = strtoul(v41, 0, 0);
                    unsigned int v43 = &_os_log_internal;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
                    {
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                      unsigned int v43 = &_os_log_internal;
                    }
                    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                    {
                      LODWORD(__dst[0]) = 67109376;
                      DWORD1(__dst[0]) = v40;
                      WORD4(__dst[0]) = 1024;
                      *(_DWORD *)((char *)__dst + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v42;
                      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "Setting FW property 0x%08x to 0x%08X\n", (uint8_t *)__dst, 0xEu);
                    }
                    int v44 = H16ISP::H16ISPDevice::WritePropertyValue((H16ISP::H16ISPDevice *)v2, v22, v40, v42, 0xFFFFFFFF);
                    if (v44)
                    {
                      CFArrayRef v45 = &_os_log_internal;
                      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
                      {
                        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                        CFArrayRef v45 = &_os_log_internal;
                      }
                      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
                        H16ISP::H16ISPDevice::ISP_PowerOnCamera(v82, v44, v83);
                      }
                    }
                  }
                  else
                  {
                    int v54 = &_os_log_internal;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
                    {
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                      int v54 = &_os_log_internal;
                    }
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
                      H16ISP::H16ISPDevice::ISP_PowerOnCamera(&v65, v66);
                    }
                  }
                }
                else
                {
                  int v52 = &_os_log_internal;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
                  {
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                    int v52 = &_os_log_internal;
                  }
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
                    H16ISP::H16ISPDevice::ISP_PowerOnCamera(&v67, v68);
                  }
                }
              }
              else if (!strncmp(v29, "FWOBJECTSPECIALFUNC", 0x13uLL))
              {
                unint64_t v46 = 0;
                memset(__dst, 0, 48);
                do
                {
                  unint64_t v47 = v46;
                  *((void *)__dst + v46) = v29;
                  CFStringRef v29 = strtok(0, ":");
                  unint64_t v46 = v47 + 1;
                  if (v29) {
                    BOOL v48 = v47 >= 5;
                  }
                  else {
                    BOOL v48 = 1;
                  }
                }
                while (!v48);
                int v49 = H16ISP::H16ISPDevice::SendFirmwareObjectSpecialFunc((H16ISP::H16ISPDevice *)v2, v46, (const char **)__dst);
                if (v49) {
                  printf("Sending special debug function to firmware object returned error : 0x%08x\n", v49);
                }
              }
              else
              {
                int v30 = strtoul(v29, 0, 0);
                CFDictionaryRef v31 = strtok(0, " \n");
                if (v31)
                {
                  if (v23 > 0x3F)
                  {
                    unsigned int v53 = &_os_log_internal;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
                    {
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                      unsigned int v53 = &_os_log_internal;
                    }
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
                      H16ISP::H16ISPDevice::ISP_PowerOnCamera(&v61, v62);
                    }
                  }
                  else
                  {
                    int v32 = strtoul(v31, 0, 0);
                    int v33 = &_os_log_internal;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
                    {
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                      int v33 = &_os_log_internal;
                    }
                    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
                    {
                      LODWORD(__dst[0]) = 67109376;
                      DWORD1(__dst[0]) = v30;
                      WORD4(__dst[0]) = 1024;
                      *(_DWORD *)((char *)__dst + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v32;
                      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "Set sensor reg 0x%08x to val 0x%08X\n", (uint8_t *)__dst, 0xEu);
                    }
                    v84[v23] = v30;
                    *((unsigned char *)v82 + v23++ + 0x200pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v32;
                  }
                }
                else
                {
                  unsigned int v51 = &_os_log_internal;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
                  {
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                    unsigned int v51 = &_os_log_internal;
                  }
                  if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
                    H16ISP::H16ISPDevice::ISP_PowerOnCamera(&v63, v64);
                  }
                }
              }
            }
            else
            {
              int v34 = &_os_log_internal;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
              {
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                int v34 = &_os_log_internal;
              }
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPDevice::ISP_PowerOnCamera(&v78, v79);
              }
            }
          }
          fclose(v24);
          if (v23)
          {
            int v55 = H16ISP::H16ISPDevice::SetSensorCustomSettings((H16ISP::H16ISPDevice *)v2, v22, v23, v84, (unsigned __int8 *)&v81);
            int v56 = &_os_log_internal;
            if (v55)
            {
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
              {
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                int v56 = &_os_log_internal;
              }
              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPDevice::ISP_PowerOnCamera(v89, v55, &v90);
              }
            }
            else
            {
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal)
              {
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
                int v56 = &_os_log_internal;
              }
              char v57 = v56;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(__dst[0]) = 67109376;
                DWORD1(__dst[0]) = v22;
                WORD4(__dst[0]) = 1024;
                *(_DWORD *)((char *)__dst + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v23;
                _os_log_impl(&dword_24680F000, v57, OS_LOG_TYPE_DEFAULT, "Successfully sent camera %d sensor register over-ride values for %d registers\n", (uint8_t *)__dst, 0xEu);
              }
            }
          }
        }
        ++v22;
      }
      while (v22 < *(_DWORD *)(v2 + 4748));
    }
    unsigned int v21 = v59;
  }
  if (!v21) {
    H16ISP::H16ISPDevice::ValidateProjectorToken((H16ISP::H16ISPDevice *)v2);
  }
  kdebug_trace();
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
  }
  uint64_t v3 = v59;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v86 = 136315394;
    *(void *)&uint8_t v86[4] = "ISP_PowerOnCamera";
    __int16 v87 = 1024;
    unsigned int v88 = v59;
    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "%s - status: 0x%08X\n", v86, 0x12u);
  }
  return v3;
}

void sub_246853EAC(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10A0C40DE8F937BLL);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPDevice::ISP_GetNVMParams(uint64_t a1, unsigned int a2, unsigned int a3, void *outputStruct)
{
  input[2] = *MEMORY[0x263EF8340];
  uint64_t result = 3758097084;
  if (!outputStruct) {
    return 3758097090;
  }
  mach_port_t v6 = *(_DWORD *)(a1 + 4424);
  if (v6)
  {
    size_t v7 = 8476;
    input[0] = a2;
    input[1] = a3;
    return IOConnectCallMethod(v6, 0x5Fu, input, 2u, 0, 0, 0, 0, outputStruct, &v7);
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::ISP_IsPowered(H16ISP::H16ISPDevice *this)
{
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  uint64_t result = *((unsigned int *)this + 1106);
  if (result) {
    return !IOConnectCallScalarMethod(result, 5u, 0, 0, &output, &outputCnt) && output == 1;
  }
  return result;
}

void H16ISP::H16ISPMetadataDictCreatorGraphNode::H16ISPMetadataDictCreatorGraphNode(H16ISP::H16ISPMetadataDictCreatorGraphNode *this, H16ISP::H16ISPDevice *a2)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 4);
  void *v3 = &unk_26FAEBB58;
  v3[10] = a2;
  operator new[]();
}

void sub_246854350(_Unwind_Exception *exception_object)
{
}

uint64_t H16ISP::H16ISPDevice::ISP_GetModuleParams(H16ISP::H16ISPDevice *this, unsigned int a2, H16ISPModuleParams *outputStruct)
{
  input[1] = *MEMORY[0x263EF8340];
  size_t v5 = 156;
  mach_port_t v3 = *((_DWORD *)this + 1106);
  if (!v3) {
    return 3758097084;
  }
  input[0] = a2;
  return IOConnectCallMethod(v3, 0xEu, input, 1u, 0, 0, 0, 0, outputStruct, &v5);
}

double H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26FAEC5B0;
  *(void *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a2;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_26FAEC5B0;
  *(void *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a2;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t H16ISP::H16ISPDevice::ISP_GetNumChannels(H16ISP::H16ISPDevice *this, unsigned int *a2)
{
  mach_port_t v2 = *((_DWORD *)this + 1106);
  if (!v2) {
    return 3758097084;
  }
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  uint64_t result = IOConnectCallScalarMethod(v2, 0x24u, 0, 0, &output, &outputCnt);
  if (!result) {
    *a2 = output;
  }
  return result;
}

void H16ISP::H16ISPServicesThreadStart(uint64_t a1)
{
}

void sub_246854558(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10A0C40EFE94C02);
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPFrameReceiverRTThreadStart(uint64_t a1)
{
}

void sub_246854814(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10F0C4014BAEE9BLL);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPThreadReadySyncer::signalAndUnlock(H16ISP::H16ISPThreadReadySyncer *this)
{
  pthread_cond_signal((pthread_cond_t *)((char *)this + 64));

  return pthread_mutex_unlock((pthread_mutex_t *)this);
}

uint64_t H16ISP::H16ISPFrameReceiver::H16ISPFrameReceiver(uint64_t a1, uint64_t a2, int a3, long long *a4, int a5, int a6)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 328) = a2;
  *(_DWORD *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(a1 + 364) = a3;
  *(_DWORD *)(a1 + 444) = a5;
  *(_DWORD *)(a1 + 448) = a6;
  *(unsigned char *)(a1 + 512) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 844) = 0;
  *(_OWORD *)(a1 + 64pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 72pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 793) = 0u;
  *(unsigned char *)(a1 + 852) = 1;
  *(unsigned char *)(a1 + 868) = 1;
  *(void *)(a1 + 912) = 0x4000000000000000;
  *(unsigned char *)(a1 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 22) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 96), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  *(void *)(a1 + 288) = 0;
  H16ISP::gFrameReceiverCFPrefs = H16ISP::H16ISPGetCFPreferenceNumber(@"SmileAndBlinkFD", @"com.apple.coremedia", 0);
  H16ISP::gFrameReceiverCFPrefs = (uint64_t)H16ISP::H16ISPGetCFPreferenceString(@"MOVReplay", @"com.apple.coremedia", 0, v8);
  H16ISP::gFrameReceiverCFPrefs = H16ISP::H16ISPGetCFPreferenceNumber(@"oisContactStopOffset", @"com.apple.coremedia", (const __CFString *)0x65);
  H16ISP::gFrameReceiverCFPrefs = H16ISP::H16ISPGetCFPreferenceNumber(@"FrameDropRequestEnabled", @"com.apple.coremedia", (const __CFString *)1);
  H16ISP::gFrameReceiverCFPrefs = H16ISP::H16ISPGetCFPreferenceNumber(@"SimulateYUVBufferStarvation", @"com.apple.coremedia", 0);
  pthread_mutexattr_init(&v21);
  pthread_mutexattr_settype(&v21, 2);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 160), &v21);
  pthread_mutexattr_destroy(&v21);
  unsigned int v20 = 0;
  H16ISP::H16ISPDevice::GetISPCounterFrequency(*(H16ISP::H16ISPDevice **)(a1 + 328), &v20, (double *)(a1 + 408));
  int v9 = (_OWORD *)(a1 + 416);
  if (a4)
  {
    long long v10 = *a4;
    uint64_t v11 = *((void *)a4 + 2);
    *(_DWORD *)(a1 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *((_DWORD *)a4 + 6);
    *(void *)(a1 + 432) = v11;
    *int v9 = v10;
  }
  else
  {
    bzero(v9, 0x1CuLL);
  }
  *(void *)(a1 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0xFFFF00000004;
  *(_WORD *)(a1 + 452) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(void *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 96pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  uint64_t v12 = (void *)(a1 + 488);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 56pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  uint64_t v13 = *(void *)(a1 + 328);
  int v14 = *(_DWORD *)(*(void *)(v13 + 4384) + 96 * *(unsigned int *)(a1 + 364) + 16);
  if (v14 > 1785950321)
  {
    if (v14 > 1919251318)
    {
      if (v14 == 1919251319)
      {
        *uint64_t v12 = "com.apple.isp.backsuperwidetemperature";
        __int16 v15 = "com.apple.isp.backsuperwidefocusing";
      }
      else
      {
        if (v14 != 1919251564) {
          goto LABEL_21;
        }
        *uint64_t v12 = "com.apple.isp.backtelesensortemperature";
        __int16 v15 = "com.apple.isp.backtelefocusing";
      }
      goto LABEL_20;
    }
    if (v14 != 1785950322)
    {
      if (v14 != 1919246706) {
        goto LABEL_21;
      }
      *uint64_t v12 = "com.apple.isp.backsensortemperature";
      __int16 v15 = "com.apple.isp.focusing";
      goto LABEL_20;
    }
    *(unsigned char *)(a1 + 512) = 1;
    *(void *)(a1 + 488) = "com.apple.isp.backtofsensortemperature";
    *(void *)(a1 + 544) = "com.apple.isp.backtofprojector.ntctempidle";
    *(void *)(a1 + 56pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = "com.apple.isp.backtofprojector.ntctempstandby";
    *(void *)(a1 + 576) = "com.apple.isp.backtofprojector.ntctempactive";
    *(void *)(a1 + 592) = "com.apple.isp.backtofprojector.dietempidle";
    *(void *)(a1 + 608) = "com.apple.isp.backtofprojector.dietempstandby";
    int v16 = "com.apple.isp.backtofprojector.dietempactive";
LABEL_18:
    *(void *)(a1 + 624) = v16;
    goto LABEL_21;
  }
  if (v14 == 1718186595)
  {
    *(unsigned char *)(a1 + 512) = 1;
    *(void *)(a1 + 488) = "com.apple.isp.frontirsensortemperature";
    *(void *)(a1 + 528) = "com.apple.isp.frontirfloodtemperature";
    *(void *)(a1 + 544) = "com.apple.isp.frontirprojector.ntctempidle";
    *(void *)(a1 + 56pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = "com.apple.isp.frontirprojector.ntctempstandby";
    *(void *)(a1 + 576) = "com.apple.isp.frontirprojector.ntctempactive";
    *(void *)(a1 + 592) = "com.apple.isp.frontirprojector.dietempidle";
    *(void *)(a1 + 608) = "com.apple.isp.frontirprojector.dietempstandby";
    int v16 = "com.apple.isp.frontirprojector.dietempactive";
    goto LABEL_18;
  }
  if (v14 == 1718775412 || v14 == 1718776695)
  {
    *uint64_t v12 = "com.apple.isp.frontsensortemperature";
    __int16 v15 = "com.apple.isp.frontfocusing";
LABEL_20:
    *(void *)(a1 + 464) = v15;
  }
LABEL_21:
  uint64_t v17 = *(NSObject **)(*(void *)(v13 + 72) + 72);
  if (v17)
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN6H16ISP19H16ISPFrameReceiverC2EPNS_12H16ISPDeviceEjP21H16ISPTNRConfigStructjj_block_invoke;
    block[3] = &__block_descriptor_tmp_8;
    block[4] = a1;
    dispatch_sync(v17, block);
  }
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 84pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  mach_timebase_info((mach_timebase_info_t)(a1 + 516));
  *(_DWORD *)(a1 + 848) = H16ISP::gFrameReceiverCFPrefs;
  *(unsigned char *)(a1 + 853) = 0;
  if (H16ISP::gFrameReceiverCFPrefs) {
    operator new();
  }
  *(_DWORD *)(a1 + 864) = H16ISP::gFrameReceiverCFPrefs;
  *(unsigned char *)(a1 + 944) = H16ISP::gFrameReceiverCFPrefs != 0;
  return a1;
}

void sub_246854DB4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x24C53D6E0](v4, 0x1060C408B80C50CLL);
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)(v1 + 736));
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)(v1 + 688));
  std::deque<__CVBuffer *>::~deque[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPDevice::GetISPCounterFrequency(H16ISP::H16ISPDevice *this, unsigned int *a2, double *a3)
{
  if (*((unsigned char *)this + 4))
  {
    mach_timebase_info(&info);
    uint64_t v6 = 0;
    *a2 = *((_DWORD *)this + 4);
    LODWORD(v7) = *((_DWORD *)this + 4);
    LODWORD(v8) = info.numer;
    *a3 = 1.0 / (double)v7 * 1000000000.0 * ((double)(info.denom | 0x41CDCD6500000000uLL) / (double)v8);
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    uint64_t v6 = 3758097112;
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      H16ISP::H16ISPDevice::GetISPCounterFrequency(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  return v6;
}

const __CFString *H16ISP::H16ISPGetCFPreferenceString(const __CFString *this, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  CFPropertyListRef v5 = CFPreferencesCopyValue(this, a2, (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  if (v5)
  {
    CFPropertyListRef v6 = v5;
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFStringGetTypeID()) {
      return (const __CFString *)v6;
    }
  }
  return a3;
}

uint64_t H16ISP::H16ISPFrameReceiver::addIODispatcherToRunLoop(H16ISP::H16ISPFrameReceiver *this)
{
  uint64_t v2 = IOCreateReceivePort(0x39u, (mach_port_t *)this + 84);
  if (!v2)
  {
    uint64_t v2 = IOCreateReceivePort(0x39u, (mach_port_t *)this + 76);
    if (!v2)
    {
      uint64_t v2 = 3758097085;
      Boolean shouldFreeInfo = 0;
      context.versiouint64_t n = 1;
      context.mach_timebase_info info = this;
      memset(&context.retain, 0, 24);
      CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      uint64_t v4 = (void (__cdecl *)(CFMachPortRef, void *, CFIndex, void *))MEMORY[0x263F0EBE0];
      CFMachPortRef v5 = CFMachPortCreateWithPort((CFAllocatorRef)*MEMORY[0x263EFFB08], *((_DWORD *)this + 84), MEMORY[0x263F0EBE0], &context, &shouldFreeInfo);
      *((void *)this + 43) = v5;
      CFPropertyListRef v6 = CFMachPortCreateWithPort(v3, *((_DWORD *)this + 76), v4, &context, &shouldFreeInfo);
      *((void *)this + 37) = v6;
      if (v6 && v5 != 0)
      {
        CFRunLoopSourceRef RunLoopSource = CFMachPortCreateRunLoopSource(v3, v6, 0);
        *((void *)this + 39) = RunLoopSource;
        CFRunLoopSourceRef v9 = CFMachPortCreateRunLoopSource(v3, *((CFMachPortRef *)this + 43), 0);
        *((void *)this + 44) = v9;
        if (v9) {
          BOOL v10 = RunLoopSource == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10)
        {
          CFStringRef v11 = (const __CFString *)*MEMORY[0x263EFFE88];
          CFRunLoopAddSource(*((CFRunLoopRef *)this + 1), *((CFRunLoopSourceRef *)this + 39), (CFRunLoopMode)*MEMORY[0x263EFFE88]);
          CFRunLoopAddSource(*((CFRunLoopRef *)this + 1), *((CFRunLoopSourceRef *)this + 44), v11);
          return 0;
        }
      }
    }
  }
  return v2;
}

H16ISP::H16ISPDeviceController *H16ISP::H16ISPDeviceController::H16ISPDeviceController(H16ISP::H16ISPDeviceController *this, int (*a2)(H16ISPDeviceController *, void *, H16ISP::H16ISPDevice *), void *a3)
{
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 80), 0);
  pthread_cond_init((pthread_cond_t *)this + 3, 0);
  *((unsigned char *)this + 192) = 0;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a3;
  *((void *)this + 8) = pthread_self();
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  *((void *)this + 6) = CFRetain(Current);
  *((void *)this + 9) = 0;
  return this;
}

uint64_t H16ISP::H16ISPDeviceController::SetupDeviceController(H16ISP::H16ISPDeviceController *this)
{
  callBacks.versiouint64_t n = 0;
  callBacks.retaiuint64_t n = 0;
  callBacks.copyDescriptiouint64_t n = 0;
  callBacks.equal = 0;
  callBacks.release = (CFArrayReleaseCallBack)H16ISP::cfArrayReleaseH16ISPUnitObject;
  CFMutableArrayRef v2 = CFArrayCreateMutable(0, 0, &callBacks);
  *(void *)this = v2;
  if (!v2) {
    return 3758097085;
  }
  uint64_t v3 = IOMasterPort(*MEMORY[0x263EF87F0], (mach_port_t *)this + 2);
  if (!v3)
  {
    CFDictionaryRef v4 = IOServiceMatching("AppleH16CamIn");
    CFMachPortRef v5 = IONotificationPortCreate(*((_DWORD *)this + 2));
    *((void *)this + 2) = v5;
    if (v5)
    {
      CFRunLoopSourceRef RunLoopSource = IONotificationPortGetRunLoopSource(v5);
      *((void *)this + 3) = RunLoopSource;
      if (RunLoopSource)
      {
        CFRunLoopAddSource(*((CFRunLoopRef *)this + 6), RunLoopSource, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
        uint64_t v3 = IOServiceAddMatchingNotification(*((IONotificationPortRef *)this + 2), "IOServiceFirstPublish", v4, (IOServiceMatchingCallback)H16ISP::deviceArrivedCallback, this, (io_iterator_t *)this + 14);
        if (!v3)
        {
          *((void *)this + 9) = dispatch_queue_create("com.apple.h16ispdevicecontroller.notifications.queue", 0);
          H16ISP::deviceArrivedCallback((CFArrayRef *)this, *((_DWORD *)this + 14));
          pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
          CFTypeID v7 = (unsigned __int8 *)this + 192;
          if (*((unsigned char *)this + 192))
          {
            uint64_t v3 = 0;
          }
          else
          {
            clock_gettime(_CLOCK_REALTIME, &__tp);
            __tp.tv_sec += 2;
            uint64_t v3 = pthread_cond_timedwait((pthread_cond_t *)this + 3, (pthread_mutex_t *)((char *)this + 80), &__tp);
            if (v3 && !*v7)
            {
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
              }
              uint64_t v3 = 3758097110;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPDeviceController::SetupDeviceController(v7);
              }
            }
          }
          pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 80));
        }
        return v3;
      }
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPDeviceController::SetupDeviceController();
      }
      IONotificationPortDestroy(*((IONotificationPortRef *)this + 2));
      *((void *)this + 2) = 0;
    }
    else
    {
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPDeviceController::SetupDeviceController();
      }
    }
    return 3758097086;
  }
  return v3;
}

uint64_t H16ISP::deviceArrivedCallback(CFArrayRef *this, io_iterator_t iterator)
{
  CFMutableDictionaryRef properties = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMachPortRef v5 = (pthread_mutex_t *)(this + 10);
  CFPropertyListRef v6 = (pthread_cond_t *)(this + 18);
  while (1)
  {
    uint64_t result = IOIteratorNext(iterator);
    if (!result) {
      break;
    }
    if (!IORegistryEntryCreateCFProperties(result, &properties, v4, 0))
    {
      if (!CFArrayGetCount(*this)) {
        operator new();
      }
      CFRelease(properties);
      pthread_mutex_lock(v5);
      *((unsigned char *)this + 192) = 1;
      pthread_cond_broadcast(v6);
      pthread_mutex_unlock(v5);
    }
  }
  return result;
}

void sub_2468554B4(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10F0C40A17A2036);
  _Unwind_Resume(a1);
}

__n128 H16ISP::H16ISPSetfileSelector::H16ISPSetfileSelector(H16ISP::H16ISPSetfileSelector *this, int a2, int a3, unsigned int a4, int a5, unsigned int a6, unsigned __int8 *a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned __int16 a11, unsigned __int16 a12, unsigned __int8 a13)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  if (a2 <= 2130)
  {
    if (a2 <= 1555)
    {
      if (a2 <= 1367)
      {
        if (a2 == 1029)
        {
          if ((a5 & 0xFFFFFFFE) == 0x1E)
          {
            *(void *)this = &H16ISP::IMX405_setfile_9724_01XX;
            *((_DWORD *)this + 2) = 38436;
            uint64_t v13 = "/usr/local/share/firmware/isp/9724_01XX.dat";
          }
          else
          {
            *(void *)this = &H16ISP::IMX405_setfile_9723_01XX;
            *((_DWORD *)this + 2) = 37576;
            uint64_t v13 = "/usr/local/share/firmware/isp/9723_01XX.dat";
          }
        }
        else
        {
          if (a2 != 1300) {
            return result;
          }
          *(void *)this = &H16ISP::IMX514_setfile_2820_01XX;
          *((_DWORD *)this + 2) = 41368;
          uint64_t v13 = "/usr/local/share/firmware/isp/2820_01XX.dat";
        }
      }
      else
      {
        switch(a2)
        {
          case 1368:
            if (a5 == 16 || a5 == 9)
            {
              *(void *)this = &H16ISP::IMX558_setfile_1922_02XX;
              *((_DWORD *)this + 2) = 44352;
              uint64_t v13 = "/usr/local/share/firmware/isp/1922_02XX.dat";
            }
            else
            {
              *(void *)this = &H16ISP::IMX558_setfile_1921_01XX;
              *((_DWORD *)this + 2) = 44352;
              uint64_t v13 = "/usr/local/share/firmware/isp/1921_01XX.dat";
            }
            break;
          case 1394:
            *(void *)this = &H16ISP::IMX572_setfile_1020_03XX;
            *((_DWORD *)this + 2) = 24392;
            uint64_t v13 = "/usr/local/share/firmware/isp/1020_03XX.dat";
            break;
          case 1395:
            *(void *)this = &H16ISP::IMX573_setfile_0019_02XX;
            *((_DWORD *)this + 2) = 14260;
            uint64_t v13 = "/usr/local/share/firmware/isp/0019_02XX.dat";
            break;
          default:
            return result;
        }
      }
      goto LABEL_70;
    }
    if (a2 <= 1811)
    {
      switch(a2)
      {
        case 1556:
          if ((a5 & 0xFFFFFFFE) == 0x1E)
          {
            *(void *)this = &H16ISP::IMX614_setfile_2924_01XX;
            *((_DWORD *)this + 2) = 60780;
            uint64_t v13 = "/usr/local/share/firmware/isp/2924_01XX.dat";
          }
          else
          {
            *(void *)this = &H16ISP::IMX614_setfile_2921_02XX;
            *((_DWORD *)this + 2) = 60780;
            uint64_t v13 = "/usr/local/share/firmware/isp/2921_02XX.dat";
          }
          break;
        case 1587:
          if ((a5 - 69) > 1)
          {
            if ((a5 - 71) > 1)
            {
              *(void *)this = &H16ISP::IMX633_setfile_3623_01XX;
              *((_DWORD *)this + 2) = 65748;
              uint64_t v13 = "/usr/local/share/firmware/isp/3623_01XX.dat";
            }
            else
            {
              *(void *)this = &H16ISP::IMX633_setfile_3624_01XX;
              *((_DWORD *)this + 2) = 65748;
              uint64_t v13 = "/usr/local/share/firmware/isp/3624_01XX.dat";
            }
          }
          else
          {
            *(void *)this = &H16ISP::IMX633_setfile_3624_02XX;
            *((_DWORD *)this + 2) = 65748;
            uint64_t v13 = "/usr/local/share/firmware/isp/3624_02XX.dat";
          }
          break;
        case 1811:
          *(void *)this = &H16ISP::IMX713_setfile_4723_01XX;
          *((_DWORD *)this + 2) = 37400;
          uint64_t v13 = "/usr/local/share/firmware/isp/4723_01XX.dat";
          break;
        default:
          return result;
      }
      goto LABEL_70;
    }
    if (a2 == 1812)
    {
      *(void *)this = &H16ISP::IMX714_setfile_2022_01XX;
      *((_DWORD *)this + 2) = 41368;
      uint64_t v13 = "/usr/local/share/firmware/isp/2022_01XX.dat";
      goto LABEL_70;
    }
    if (a2 != 2051)
    {
      if (a2 != 2068) {
        return result;
      }
      *(void *)this = &H16ISP::IMX814_setfile_2123_01XX;
      *((_DWORD *)this + 2) = 127884;
      uint64_t v13 = "/usr/local/share/firmware/isp/2123_01XX.dat";
      goto LABEL_70;
    }
    goto LABEL_40;
  }
  if (a2 <= 2391)
  {
    if (a2 > 2322)
    {
      switch(a2)
      {
        case 2323:
          if (a5 != 67 || a13)
          {
            if ((a5 - 69) > 1)
            {
              *(void *)this = &H16ISP::IMX913_setfile_4523_02XX;
              *((_DWORD *)this + 2) = 138436;
              uint64_t v13 = "/usr/local/share/firmware/isp/4523_02XX.dat";
            }
            else
            {
              *(void *)this = &H16ISP::IMX913_setfile_4524_01XX;
              *((_DWORD *)this + 2) = 138436;
              uint64_t v13 = "/usr/local/share/firmware/isp/4524_01XX.dat";
            }
          }
          else
          {
            *(void *)this = &H16ISP::IMX913_setfile_4523_01XX;
            *((_DWORD *)this + 2) = 37420;
            uint64_t v13 = "/usr/local/share/firmware/isp/4523_01XX.dat";
          }
          break;
        case 2324:
          *(void *)this = &H16ISP::IMX914_setfile_2325_01XX;
          *((_DWORD *)this + 2) = 58560;
          uint64_t v13 = "/usr/local/share/firmware/isp/2325_01XX.dat";
          break;
        case 2339:
          *(void *)this = &H16ISP::IMX923_setfile_8824_01XX;
          *((_DWORD *)this + 2) = 36168;
          uint64_t v13 = "/usr/local/share/firmware/isp/8824_01XX.dat";
          break;
        default:
          return result;
      }
      goto LABEL_70;
    }
    if (a2 != 2131)
    {
      if (a2 == 2307)
      {
        *(void *)this = &H16ISP::IMX903_setfile_7424_01XX;
        *((_DWORD *)this + 2) = 152192;
        uint64_t v13 = "/usr/local/share/firmware/isp/7424_01XX.dat";
      }
      else
      {
        if (a2 != 2308) {
          return result;
        }
        *(void *)this = &H16ISP::IMX904_setfile_7524_01XX;
        *((_DWORD *)this + 2) = 149496;
        uint64_t v13 = "/usr/local/share/firmware/isp/7524_01XX.dat";
      }
      goto LABEL_70;
    }
LABEL_40:
    *(void *)this = &H16ISP::IMX803_setfile_7623_01XX;
    *((_DWORD *)this + 2) = 149496;
    uint64_t v13 = "/usr/local/share/firmware/isp/7623_01XX.dat";
LABEL_70:
    long long v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)((char *)this + 12) = *(_OWORD *)v13;
    *(_OWORD *)((char *)this + 28) = v14;
    __n128 result = *(__n128 *)(v13 + 28);
    *(__n128 *)((char *)this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = result;
    return result;
  }
  if (a2 <= 2433)
  {
    switch(a2)
    {
      case 2392:
        *(void *)this = &H16ISP::IMX958_setfile_2224_01XX;
        *((_DWORD *)this + 2) = 28660;
        uint64_t v13 = "/usr/local/share/firmware/isp/2224_01XX.dat";
        break;
      case 2418:
        *(void *)this = &H16ISP::IMX972_setfile_3524_01XX;
        *((_DWORD *)this + 2) = 172804;
        uint64_t v13 = "/usr/local/share/firmware/isp/3524_01XX.dat";
        break;
      case 2419:
        *(void *)this = &H16ISP::IMX973_setfile_4425_01XX;
        *((_DWORD *)this + 2) = 132136;
        uint64_t v13 = "/usr/local/share/firmware/isp/4425_01XX.dat";
        break;
      default:
        return result;
    }
    goto LABEL_70;
  }
  if (a2 == 2434)
  {
    *(void *)this = &H16ISP::IMX982_setfile_7324_01XX;
    *((_DWORD *)this + 2) = 149364;
    uint64_t v13 = "/usr/local/share/firmware/isp/7324_01XX.dat";
    goto LABEL_70;
  }
  if (a2 == 3414 || a2 == 20584)
  {
    if (a3 == 2)
    {
      *(void *)this = &H16ISP::VD56G0_setfile_6222_01XX;
      *((_DWORD *)this + 2) = 7040;
      uint64_t v13 = "/usr/local/share/firmware/isp/6222_01XX.dat";
    }
    else
    {
      *(void *)this = &H16ISP::VD56G0_setfile_6221_01XX;
      *((_DWORD *)this + 2) = 7040;
      uint64_t v13 = "/usr/local/share/firmware/isp/6221_01XX.dat";
    }
    goto LABEL_70;
  }
  return result;
}

double H16ISP::H16ISPSetfileSelector::H16ISPSetfileSelector(H16ISP::H16ISPSetfileSelector *this, int a2, int a3, unsigned int a4, int a5, unsigned int a6, unsigned __int8 *a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned __int16 a11, unsigned __int16 a12, unsigned __int8 a13)
{
  *(void *)&double result = H16ISP::H16ISPSetfileSelector::H16ISPSetfileSelector(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, 0, a13).n128_u64[0];
  return result;
}

pthread_mutex_t *H16ISP::H16ISPMotionManager::H16ISPMotionManager(pthread_mutex_t *this, H16ISP::H16ISPDevice *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)&this->__opaque[48] = 0;
  uint64_t v3 = (pthread_t *)&this->__opaque[48];
  *(void *)&this->__opaque[8] = 0;
  this->__sig = (uint64_t)a2;
  *(void *)this->__opaque = 0;
  *(_DWORD *)&this->__opaque[16] = 0;
  *(void *)&this->__opaque[24] = 0;
  *(void *)&this->__opaque[32] = 0;
  this->__opaque[40] = 0;
  pthread_mutex_init(this + 1, 0);
  pthread_attr_init(&v5);
  pthread_attr_setdetachstate(&v5, 1);
  pthread_create(v3, &v5, (void *(__cdecl *)(void *))H16ISP::H16ISPMotionManagerInitializationThread, this);
  pthread_attr_destroy(&v5);
  return this;
}

uint64_t MyH16ISPDeviceControllerNotification(H16ISP::H16ISPDeviceController *a1, void *a2, H16ISP::H16ISPDevice *a3)
{
  return 0;
}

uint64_t SetObjectDetectionConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t v38 = a4;
  int valuePtr = 0;
  unsigned int v45 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v40 = 0;
  int v31 = *(unsigned __int8 *)(a2 + 81);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D798]);
  CFRunLoopSourceRef v9 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D760]);
  CFTypeRef cf1 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D768]);
  BOOL v10 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D758]);
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D790]);
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D780]);
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D770]);
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D7B8]);
  CFNumberRef number = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D7A0]);
  CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D788]);
  CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D778]);
  CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D7C0]);
  CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D7B0]);
  CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D7A8]);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    int v15 = valuePtr;
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v17 = (CFTypeRef *)MEMORY[0x263EFFB40];
  if (v9 && CFEqual(v9, (CFTypeRef)*MEMORY[0x263EFFB40])) {
    ++v15;
  }
  if (cf1 && CFEqual(cf1, *v17)) {
    ++v15;
  }
  if (v10 && CFEqual(v10, *v17)) {
    ++v15;
  }
  if (v11)
  {
    CFNumberGetValue(v11, kCFNumberSInt32Type, &v45);
    v15 += v45;
  }
  if (v12)
  {
    CFNumberGetValue(v12, kCFNumberSInt32Type, &v44);
    v15 += v44;
  }
  if (v13)
  {
    CFNumberGetValue(v13, kCFNumberSInt32Type, &v43);
    v15 += v43;
  }
  if (v14)
  {
    CFNumberGetValue(v14, kCFNumberSInt32Type, (char *)&v41 + 4);
    v15 += HIDWORD(v41);
  }
  if (number)
  {
    CFNumberGetValue(number, kCFNumberSInt32Type, (char *)&v44 + 4);
    v15 += HIDWORD(v44);
  }
  if (v33)
  {
    CFNumberGetValue(v33, kCFNumberSInt32Type, (char *)&v43 + 4);
    v15 += HIDWORD(v43);
  }
  if (v34)
  {
    CFNumberGetValue(v34, kCFNumberSInt32Type, (char *)&v42 + 4);
    v15 += HIDWORD(v42);
  }
  if (v35)
  {
    CFNumberGetValue(v35, kCFNumberSInt32Type, &v42);
    v15 += v42;
  }
  if (v36)
  {
    CFNumberGetValue(v36, kCFNumberSInt32Type, &v41);
    v15 += v41;
  }
  if (v37)
  {
    CFNumberGetValue(v37, kCFNumberSInt32Type, &v40);
    v15 += v40;
  }
  *(unsigned char *)(a2 + 81) = v15 != 0;
  *(_DWORD *)(a2 + 3696) = 0;
  if (v9 && CFEqual(v9, *v17)) {
    *(_DWORD *)(a2 + 3696) |= 4u;
  }
  if (v10 && CFEqual(v10, *v17)) {
    *(_DWORD *)(a2 + 3696) |= 2u;
  }
  if (cf1 && CFEqual(cf1, *v17)) {
    *(_DWORD *)(a2 + 3696) |= 1u;
  }
  if (HIDWORD(v41)) {
    *(_DWORD *)(a2 + 3696) |= 0x10u;
  }
  if (v45
     + valuePtr
     + HIDWORD(v44)
     + v44
     + HIDWORD(v43)
     + v43
     + HIDWORD(v42)
     + v42
     + v41
     + v40)
  {
    *(_DWORD *)(a2 + 3696) |= 8u;
  }
  if (Value && (CFTypeID v18 = CFGetTypeID(Value), v18 == CFNumberGetTypeID()))
  {
    *(_DWORD *)CMTime buf = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, buf);
    unsigned int v19 = *(_DWORD *)buf;
    if ((*(_DWORD *)buf & 0x80000000) != 0)
    {
      unsigned int v19 = 0;
    }
    else
    {
      uint64_t v20 = 3764;
      if (!*(void *)(a2 + 136)) {
        uint64_t v20 = 3756;
      }
      unsigned int v21 = *(_DWORD *)(a2 + v20);
      if (*(_DWORD *)buf >= v21) {
        unsigned int v19 = v21;
      }
    }
  }
  else if (*(void *)(a2 + 136))
  {
    unsigned int v19 = *(_DWORD *)(a2 + 3764);
  }
  else
  {
    unsigned int v19 = *(_DWORD *)(a2 + 3756);
  }
  *(_DWORD *)(a2 + 376pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v19;
  v22.i64[0] = __PAIR64__(HIDWORD(v44), v45);
  v22.i64[1] = __PAIR64__(HIDWORD(v42), v43);
  v23.i64[0] = __PAIR64__(HIDWORD(v43), v44);
  v23.i64[1] = __PAIR64__(HIDWORD(v41), v42);
  *(int8x8_t *)(a2 + 4252) = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v22), (int16x8_t)vceqzq_s32(v23)))), (int8x8_t)0x101010101010101);
  *(unsigned char *)(a2 + 426pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v41 != 0;
  BOOL v25 = H16ISP::H16ISPDevice::getANSTVersion(*(H16ISP::H16ISPDevice **)(v38 + 24), *(_DWORD *)(a2 + 132)) >= 2.1
     && v40 != 0;
  *(unsigned char *)(a2 + 4261) = v25;
  uint64_t v26 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v26 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v26;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    int v27 = *(_DWORD *)(a2 + 3696);
    int v28 = *(_DWORD *)(a2 + 3760);
    *(_DWORD *)CMTime buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v27;
    __int16 v48 = 1024;
    int v49 = v28;
    _os_log_impl(&dword_24680F000, v26, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetObjectDetectionConfiguration, fdFeatureFlags=%d, maxFaces=%d\n\n", buf, 0xEu);
  }
  if (!*(void *)(a2 + 136)) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 81) != (v31 != 0)
    && *(unsigned char *)(a2 + 81)
    && ActivateFaceDetectionOutputInFrameReceiver(a2, v38)
    || H16ISP::H16ISPDevice::ReconfigureFaceDetect(*(H16ISP::H16ISPDevice **)(v38 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(a2 + 3696), *(_DWORD *)(a2 + 3760)))
  {
    return 4294954514;
  }
  uint64_t result = *(void *)(a2 + 4240);
  if (result)
  {
    *(void *)CMTime buf = 0;
    H16ISP::H16ISPFilterGraphManager::GetNode((void *)result, 4, (H16ISP::H16ISPFilterGraphNode **)buf);
    if (*(void *)buf)
    {
      if (*(unsigned char *)(a2 + 3672)) {
        char v29 = 1;
      }
      else {
        char v29 = *(unsigned char *)(a2 + 3675) != 0;
      }
      char v30 = *(unsigned char *)(a2 + 3673) || *(unsigned char *)(a2 + 3674) || *(unsigned char *)(a2 + 3676) != 0;
      SetOptionsForMetadataNode(*(uint64_t *)buf, v38, a2, v29, v30);
    }
    return 0;
  }
  return result;
}

float H16ISP::H16ISPDevice::getANSTVersion(H16ISP::H16ISPDevice *this, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 4))
  {
    H16ISP::H16ISPDevice::GetCameraConfig((uint64_t)this, a2, 0, v12, v13);
    return (float)((float)v13[317] / 10.0) + (float)v13[318];
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    float v2 = -536870000.0;
    if (v3) {
      H16ISP::H16ISPDevice::getANSTVersion(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  return v2;
}

uint64_t GetProjectorTypeFromDictionary(const void *a1, int *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  IntDictionaryCFNumberRef Value = getIntDictionaryValue((const __CFDictionary *)a1, (const __CFString *)*MEMORY[0x263F2CB38]);
  int v6 = getIntDictionaryValue((const __CFDictionary *)a1, (const __CFString *)*MEMORY[0x263F2CB40]);
  int v7 = getIntDictionaryValue((const __CFDictionary *)a1, (const __CFString *)*MEMORY[0x263F2CB48]);
  BOOL v8 = v6 == 1;
  if (dword_26B11BA78 == 2)
  {
    if (v6 == 1)
    {
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v15 = 0;
        _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "SetInfraredLightSourceConfiguration: forcing high-power mode\n", v15, 2u);
      }
    }
    BOOL v8 = 0;
  }
  else if (dword_26B11BA78 == 1)
  {
    if (v6 == 1)
    {
      BOOL v8 = 1;
    }
    else
    {
      CFNumberRef v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v12 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
      }
      BOOL v8 = 1;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)CMTime buf = 0;
        _os_log_impl(&dword_24680F000, v12, OS_LOG_TYPE_INFO, "SetInfraredLightSourceConfiguration: forcing low-power mode\n", buf, 2u);
      }
    }
  }
  int v10 = 0;
  switch(IntDictionaryValue)
  {
    case -1:
    case 0:
      goto LABEL_27;
    case 1:
      int v10 = 1;
      goto LABEL_27;
    case 2:
      BOOL v13 = !v8;
      if (v7 == 1)
      {
        int v10 = 4;
        int v14 = 11;
      }
      else
      {
        int v10 = 5;
        int v14 = 12;
      }
      goto LABEL_25;
    case 3:
      BOOL v13 = !v8;
      if (v7 == 1)
      {
        int v10 = 6;
        int v14 = 13;
      }
      else
      {
        int v10 = 7;
        int v14 = 14;
      }
LABEL_25:
      if (!v13) {
        int v10 = v14;
      }
LABEL_27:
      uint64_t result = 0;
      *a2 = v10;
      break;
    default:
      return 4294954516;
  }
  return result;
}

uint64_t getIntDictionaryValue(const __CFDictionary *a1, const __CFString *a2)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0xFFFFFFFFLL;
  }
  CFNumberRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  TypeIOSurfaceID ID = CFNumberGetTypeID();
  uint64_t result = 0xFFFFFFFFLL;
  if (v4 == TypeID)
  {
    unsigned int valuePtr = -1;
    if (CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr)) {
      return valuePtr;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void ___ZN6H16ISP21H16ISPJasperDepthNode10onActivateEv_block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) setDataBufferPool:*(void *)(a1 + 40)];
  float v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

uint64_t SetAEFaceDetectionMetering(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t valuePtr = 0;
  int v30 = 0;
  int v29 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D908]);
  if (!Value) {
    return 4294954516;
  }
  CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D990]);
  if (!v9) {
    return 4294954516;
  }
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D958]);
  if (!v10) {
    return 4294954516;
  }
  CFNumberGetValue(v10, kCFNumberIntType, &v30);
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D9F8]);
  if (!v11) {
    return 4294954516;
  }
  CFNumberGetValue(v11, kCFNumberIntType, &v29);
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D9D8]);
  if (!v12) {
    return 4294954516;
  }
  CFNumberGetValue(v12, kCFNumberIntType, (char *)&v28 + 4);
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D8F8]);
  if (!v13) {
    return 4294954516;
  }
  CFNumberGetValue(v13, kCFNumberIntType, &v28);
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D8A8]);
  if (!v14) {
    return 4294954516;
  }
  CFNumberGetValue(v14, kCFNumberIntType, (char *)&v27 + 4);
  CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D900]);
  if (!v15) {
    return 4294954516;
  }
  CFNumberGetValue(v15, kCFNumberIntType, &v27);
  CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D9C8]);
  if (!v16) {
    return 4294954516;
  }
  CFNumberGetValue(v16, kCFNumberIntType, (char *)&v26 + 4);
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D998]);
  if (!v17) {
    return 4294954516;
  }
  CFNumberGetValue(v17, kCFNumberIntType, &v26);
  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D8B0]);
  if (!v18) {
    return 4294954516;
  }
  CFNumberGetValue(v18, kCFNumberIntType, (char *)&v25 + 4);
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D960]);
  if (!v19) {
    return 4294954516;
  }
  CFNumberGetValue(v19, kCFNumberIntType, &v25);
  int v20 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v20 |= 0x80000000;
  }
  int v21 = H16ISP::H16ISPDevice::SetAEFDSceneMeteringConfig(*(H16ISP::H16ISPDevice **)(a4 + 24), v20, SWORD2(valuePtr), valuePtr, v30, v29, SWORD2(v28), v28, SWORD2(v27), SHIWORD(v27), v27, SWORD1(v27), SWORD2(v26), SHIWORD(v26));
  if (v21) {
    uint64_t v22 = 4294954516;
  }
  else {
    uint64_t v22 = 0;
  }
  int32x4_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int32x4_t v23 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)CMTime buf = 67109120;
    int v33 = v21;
    _os_log_impl(&dword_24680F000, v23, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetAEFDSceneMeteringConfig (result=0x%08X)\n\n", buf, 8u);
  }
  return v22;
}

uint64_t H16ISP::H16ISPDevice::SetAEFDSceneMeteringConfig(H16ISP::H16ISPDevice *this, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11, __int16 a12, __int16 a13, __int16 a14)
{
  bzero(v23, 0x24uLL);
  __int16 v24 = -32242;
  int v25 = a2;
  __int16 v26 = a3;
  __int16 v27 = a4;
  __int16 v28 = a5;
  __int16 v29 = a6;
  __int16 v30 = a7;
  __int16 v31 = a8;
  __int16 v32 = a9;
  __int16 v33 = a10;
  __int16 v34 = a11;
  __int16 v35 = a12;
  __int16 v36 = a13;
  __int16 v37 = a14;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v23, 0x24u, 0, 0xFFFFFFFF);
}

uint64_t SetAEMatrixMetadataEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  CFNumberRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (v8)
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    __int16 v14 = 0;
    CFNumberRef v10 = "H16ISPCaptureDevice: Enable AE-matrix metadata collection\n\n";
    CFNumberRef v11 = (uint8_t *)&v14;
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    __int16 v13 = 0;
    CFNumberRef v10 = "H16ISPCaptureDevice: Disable AE-matrix metadata collection\n\n";
    CFNumberRef v11 = (uint8_t *)&v13;
  }
  _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, v10, v11, 2u);
LABEL_15:
  if (H16ISP::H16ISPDevice::EnableAEMatrixMetadata(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8 != 0))return 4294954516; {
  else
  }
    return 0;
}

uint64_t H16ISP::H16ISPDevice::EnableAEMatrixMetadata(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = -32245;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t MyH16ISPDeviceMessageNotification(H16ISP::H16ISPDevice *a1, int a2, void *a3, void *a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  if (a2 > 561145202)
  {
    if (a2 <= 561213548)
    {
      if (a2 != 561145203)
      {
        if (a2 != 561212528) {
          return 0;
        }
        int v9 = (pthread_mutex_t *)(DerivedStorage + 32);
        pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
        if (*(unsigned char *)v8)
        {
          int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v10 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            MyH16ISPDeviceMessageNotification();
          }
        }
        else
        {
          H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2C120], a4, 0);
        }
        CFNumberRef v16 = v9;
LABEL_36:
        pthread_mutex_unlock(v16);
        return 0;
      }
LABEL_19:
      CFNumberRef v12 = (pthread_mutex_t *)(DerivedStorage + 32);
      pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
      if (*(unsigned char *)v8)
      {
        __int16 v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          __int16 v13 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          MyH16ISPDeviceMessageNotification();
        }
        goto LABEL_35;
      }
      uint64_t v17 = *(void *)(*(void *)(v8 + 24) + 4384);
      if (!CFArrayGetCount(*(CFArrayRef *)(v8 + 120))) {
        goto LABEL_35;
      }
      CFIndex v18 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 120), v18);
        FigCaptureStreamGetFigBaseObject();
        uint64_t v20 = CMBaseObjectGetDerivedStorage();
        if (*(_DWORD *)(v20 + 132) == a3)
        {
          uint64_t v21 = v20;
          if (!*(unsigned char *)v20) {
            break;
          }
        }
        if (++v18 >= (unint64_t)CFArrayGetCount(*(CFArrayRef *)(v8 + 120))) {
          goto LABEL_35;
        }
      }
      if (!ValueAtIndex) {
        goto LABEL_35;
      }
      if (a2 != 561214572)
      {
        if (a2 != 561145203)
        {
          if (a2 == 561145196)
          {
            if (!*(unsigned char *)(v20 + 4125)) {
              H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D730], ValueAtIndex, 0);
            }
            *(unsigned char *)(v21 + 4125) = 0;
          }
          else if (a2 == 560363379 && dword_26B11BA30 == -1)
          {
            H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D708], ValueAtIndex, 0);
          }
        }
        goto LABEL_35;
      }
      if (!*(unsigned char *)(v20 + 1) && !*(unsigned char *)(v20 + 2) || *(_DWORD *)(v20 + 4) >= HIDWORD(a3))
      {
LABEL_35:
        CFNumberRef v16 = v12;
        goto LABEL_36;
      }
      memset(valuePtr, 0, sizeof(valuePtr));
      LockStreamMutexes(*(const __CFArray **)(v8 + 120));
      CFArrayRef v31 = *(const __CFArray **)(v21 + 3888);
      if (v31)
      {
        if (!CFArrayGetCount(v31))
        {
          LODWORD(v32) = 0;
          unint64_t v40 = STACK[0x800000008];
          STACK[0x800000008] = 0;
          *(void *)&valuePtr[0] = v40;
LABEL_78:
          LOBYTE(v37) = 1;
LABEL_79:
          if (!GetNumberOfActiveChannels(*(const __CFArray **)(v8 + 120)))
          {
            uint64_t v41 = *(void *)(v8 + 184);
            if (v41)
            {
              MEMORY[0x24C53D6E0](v41, 0x1000C40009FEB1ALL);
              *(void *)(v8 + 184) = 0;
              H16ISP::H16ISPDevice::ISP_DestroyMultiCameraSession(*(H16ISP::H16ISPDevice **)(v8 + 24));
            }
          }
          if ((v37 & 1) == 0)
          {
            CFStringRef v42 = (const __CFString *)*MEMORY[0x263F2D738];
            uint64_t v43 = v32;
            uint64_t v44 = (const void **)valuePtr;
            do
            {
              unsigned int v45 = *v44;
              FigCaptureStreamGetFigBaseObject();
              uint64_t v46 = CMBaseObjectGetDerivedStorage();
              uint64_t v47 = v46;
              if (*(unsigned char *)(v46 + 1) || *(unsigned char *)(v46 + 2))
              {
                H16ISP::H16ISPDevice::ISP_ReleaseChannel(*(H16ISP::H16ISPDevice **)(v8 + 24), *(_DWORD *)(v46 + 132));
                *(_WORD *)(v47 + 1) = 0;
                H16ISPPostNotification(v42, v45, 0);
              }
              ++v44;
              --v43;
            }
            while (v43);
          }
          UnlockStreamMutexes(*(const __CFArray **)(v8 + 120));
          goto LABEL_35;
        }
        unint64_t v32 = 0;
        unsigned int v33 = 0;
        do
        {
          unsigned int v34 = v32;
          *((void *)valuePtr + v32) = CFArrayGetValueAtIndex(*(CFArrayRef *)(v21 + 3888), v32);
          FigCaptureStreamGetFigBaseObject();
          ++v32;
          if (*(unsigned char *)(v17 + 96 * *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 132) + 64)) {
            unsigned int v33 = v34;
          }
        }
        while (v32 < CFArrayGetCount(*(CFArrayRef *)(v21 + 3888)));
        __int16 v35 = (char *)valuePtr + 8 * v32;
        uint64_t v36 = *((void *)v35 - 1);
        *((void *)v35 - 1) = *((void *)valuePtr + v33);
        *((void *)valuePtr + v33) = v36;
        if (!v32) {
          goto LABEL_78;
        }
      }
      else
      {
        *(void *)&valuePtr[0] = ValueAtIndex;
        LODWORD(v32) = 1;
      }
      uint64_t v37 = v32;
      uint64_t v38 = (uint64_t *)valuePtr;
      do
      {
        uint64_t v39 = *v38++;
        H16ISPCaptureStreamStopInternal(v39, v30);
        --v37;
      }
      while (v37);
      goto LABEL_79;
    }
    if (a2 == 561213549) {
      goto LABEL_24;
    }
    int v11 = 561214572;
LABEL_18:
    if (a2 != v11) {
      return 0;
    }
    goto LABEL_19;
  }
  if (a2 > 560363378)
  {
    if (a2 == 560363379) {
      goto LABEL_19;
    }
    int v11 = 561145196;
    goto LABEL_18;
  }
  if (a2 != 560296804 && a2 != 560363366) {
    return 0;
  }
LABEL_24:
  __int16 v14 = (pthread_mutex_t *)(DerivedStorage + 32);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (*(unsigned char *)v8)
  {
    CFNumberRef v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v15 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      MyH16ISPDeviceMessageNotification();
    }
    CFNumberRef v16 = v14;
    goto LABEL_36;
  }
  LockStreamMutexes(*(const __CFArray **)(v8 + 120));
  if (CFArrayGetCount(*(CFArrayRef *)(v8 + 120)))
  {
    unint64_t v23 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 120), v23);
      FigCaptureStreamGetFigBaseObject();
      *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 1) = 0;
      ++v23;
    }
    while (v23 < CFArrayGetCount(*(CFArrayRef *)(v8 + 120)));
  }
  UnlockStreamMutexes(*(const __CFArray **)(v8 + 120));
  pthread_mutex_unlock((pthread_mutex_t *)(v8 + 32));
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    __int16 v26 = Mutable;
    LODWORD(valuePtr[0]) = -12682;
    CFNumberRef v27 = CFNumberCreate(v24, kCFNumberSInt32Type, valuePtr);
    CFDictionarySetValue(v26, (const void *)*MEMORY[0x263F2C118], v27);
    CFRelease(v27);
    if (a2 == 561213549)
    {
      int v48 = 1;
      CFNumberRef v28 = CFNumberCreate(v24, kCFNumberSInt32Type, &v48);
      __int16 v29 = a3 ? @"Spmi1ErrorCount" : @"Spmi0ErrorCount";
      CFDictionarySetValue(v26, v29, v28);
      if (v28) {
        CFRelease(v28);
      }
    }
    H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2C128], a4, v26);
    CFRelease(v26);
  }
  else
  {
    H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2C128], a4, 0);
  }
  return 0;
}

uint64_t H16ISPCaptureStreamStart(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeID v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  uint64_t v5 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    CFTypeID v4 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v6 = *(_DWORD *)(DerivedStorage + 132);
    int v16 = 136315394;
    uint64_t v17 = "H16ISPCaptureStreamStart";
    __int16 v18 = 1024;
    int v19 = v6;
    _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_INFO, "%s - Starting streaming on channel  %d\n\n", (uint8_t *)&v16, 0x12u);
  }
  LogCaptureDeviceEvent(0xEu, v3, DerivedStorage, 0, 0, 0, 0);
  if (!*(void *)(v3 + 24))
  {
    int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v5)
    {
      int v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStart();
    }
    goto LABEL_12;
  }
  if (!*(unsigned char *)(DerivedStorage + 376))
  {
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 32));
    CFArrayRef v12 = *(const __CFArray **)(v3 + 120);
    if (v12)
    {
      CFRetain(*(CFTypeRef *)(v3 + 120));
      pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
      LockStreamMutexes(v12);
      if (*(unsigned char *)DerivedStorage)
      {
        __int16 v14 = "invalidated";
        uint64_t started = 4294954511;
        uint64_t v15 = 4294954511;
      }
      else
      {
        if (*(unsigned char *)(DerivedStorage + 1))
        {
          uint64_t started = H16ISPCaptureStreamStartInternal(a1, v13);
          goto LABEL_22;
        }
        __int16 v14 = "stream not controlled";
        uint64_t started = 4294954607;
        uint64_t v15 = 4294954607;
      }
      FigSignalError(v15, v14);
LABEL_22:
      UnlockStreamMutexes(v12);
      CFRelease(v12);
      LogCaptureDeviceEvent(0xEu, v3, DerivedStorage, 0, 0, 0, 1);
      return started;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
LABEL_12:
    CFTypeID v7 = "device invalidated";
    uint64_t started = 4294954511;
    uint64_t v9 = 4294954511;
    goto LABEL_13;
  }
  CFTypeID v7 = "processRawSessionStarted";
  uint64_t started = 4294954516;
  uint64_t v9 = 4294954516;
LABEL_13:
  FigSignalError(v9, v7);
  return started;
}

uint64_t H16ISP::H16ISPDevice::EnableTNR(H16ISP::H16ISPDevice *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 3758097090;
  if (!a3 || *((_DWORD *)a1 + 1187) <= a2) {
    return v3;
  }
  if (!*(unsigned char *)a3)
  {
    bzero(v14, 0xCuLL);
    __int16 v15 = -16108;
    unsigned int v16 = a2;
    uint64_t v3 = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v14, 0xCu, 0, 0xFFFFFFFF);
    if (v3) {
      return v3;
    }
    if (*(unsigned char *)(a3 + 3))
    {
      bzero(v14, 0xCuLL);
      __int16 v15 = -16125;
      unsigned int v16 = a2;
      uint64_t v3 = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v14, 0xCu, 0, 0xFFFFFFFF);
      if (v3) {
        return v3;
      }
    }
    bzero(v14, 0xCuLL);
    __int16 v15 = -16127;
    unsigned int v16 = a2;
    return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v14, 0xCu, 0, 0xFFFFFFFF);
  }
  bzero(v14, 0x18uLL);
  __int16 v15 = -16128;
  unsigned int v16 = a2;
  char v17 = *(unsigned char *)(a3 + 1);
  int v7 = *(unsigned __int8 *)(a3 + 4);
  int v18 = *(unsigned __int8 *)(a3 + 2);
  int v19 = v7;
  uint64_t v3 = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v14, 0x18u, 0, 0xFFFFFFFF);
  if (v3) {
    return v3;
  }
  uint64_t v8 = H16ISP::H16ISPDevice::EnableHighStrengthTNR(a1, a2, *(unsigned char *)(a3 + 20));
  if (v8)
  {
    uint64_t v3 = v8;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPDevice::EnableTNR();
    }
    return v3;
  }
  int v10 = *(_DWORD *)(a3 + 8);
  bzero(v20, 0x10uLL);
  __int16 v21 = -16100;
  unsigned int v22 = a2;
  int v23 = v10;
  uint64_t v11 = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v20, 0x10u, 0, 0xFFFFFFFF);
  if (v11)
  {
    uint64_t v3 = v11;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPDevice::EnableTNR();
    }
    return v3;
  }
  uint64_t v12 = H16ISP::H16ISPDevice::SetBand0StrengthModThreshold(a1, a2, vcvtd_n_s64_f64(*(float *)(a3 + 12), 8uLL), vcvtd_n_s64_f64(*(float *)(a3 + 16), 8uLL));
  if (!v12)
  {
    if (*(unsigned char *)(a3 + 3))
    {
      bzero(v20, 0xCuLL);
      __int16 v21 = -16126;
      unsigned int v22 = a2;
      uint64_t v3 = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v20, 0xCu, 0, 0xFFFFFFFF);
      if (v3) {
        return v3;
      }
    }
    return H16ISP::H16ISPDevice::TNRResume(a1, a2);
  }
  uint64_t v3 = v12;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPDevice::EnableTNR();
  }
  return v3;
}

uint64_t H16ISP::H16ISPDevice::TNRResume(H16ISP::H16ISPDevice *this, int a2)
{
  bzero(v5, 0xCuLL);
  __int16 v6 = -16109;
  int v7 = a2;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v5, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetBand0StrengthModThreshold(H16ISP::H16ISPDevice *this, int a2, int a3, int a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = -16099;
  int v11 = a2;
  int v12 = a3;
  int v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableHighStrengthTNR(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = -16096;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke_5(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = v1 + 4728;
  uint64_t result = notify_register_check(*(const char **)(v1 + 4728), (int *)(v1 + 4740));
  *(unsigned char *)(v2 + 8) = result == 0;
  return result;
}

uint64_t ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke_4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = v1 + 4712;
  uint64_t result = notify_register_check(*(const char **)(v1 + 4712), (int *)(v1 + 4724));
  *(unsigned char *)(v2 + 8) = result == 0;
  return result;
}

uint64_t ___ZN6H16ISP12H16ISPDevice17ISP_PowerOnCameraEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = v1 + 4696;
  uint64_t result = notify_register_check(*(const char **)(v1 + 4696), (int *)(v1 + 4708));
  *(unsigned char *)(v2 + 8) = result == 0;
  return result;
}

void CopyGDCCoefficients(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  operator new();
}

uint64_t CopyNarrowerCalibratedOpticalCenter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (H16ISP::H16ISPDevice::GetDistortionData(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v5 + 132), 1, v8))
  {
    DictionaryRepresentatiouint64_t n = 0;
    uint64_t result = 4294954513;
  }
  else
  {
    v10.x = v8[548];
    v10.y = v8[549];
    DictionaryRepresentatiouint64_t n = CGPointCreateDictionaryRepresentation(v10);
    if (DictionaryRepresentation) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 4294954510;
    }
  }
  CFDictionaryRef *v3 = DictionaryRepresentation;
  return result;
}

void CopyOpticalCenter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v2 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t H16ISP::H16ISPDevice::GetDistortionData(H16ISP::H16ISPDevice *a1, __int16 a2, int a3, void *a4)
{
  bzero(a4, 0x1118uLL);
  *((_WORD *)a4 + 4) = a2;
  *((_WORD *)a4 + 2) = 28674;
  *((_DWORD *)a4 + 3) = a3;

  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)a4, 0x1118u, 0, 0xFFFFFFFF);
}

BOOL H16ISP::setPeridotCalib(H16ISP *this, xpc_connection_t *a2, H16ISP::H16ISPServicesRemote *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  PeridotCalib = H16ISP::createPeridotCalib(this, a2, 0);
  if (!PeridotCalib) {
    return 0;
  }
  __int16 v6 = PeridotCalib;
  int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  uint64_t v8 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    os_log_t v9 = os_log_create("com.apple.isp", "general");
    CGPoint v10 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v9;

    int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 136315138;
    int v18 = "setPeridotCalib";
    _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_DEFAULT, "%s - updating firmware\n", (uint8_t *)&v17, 0xCu);
  }
  BOOL v12 = H16ISP::savePeridotCalibToFW(this, a3, (unsigned __int16)v6, v11);
  if (!v12)
  {
    int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v8)
    {
      os_log_t v14 = os_log_create("com.apple.isp", "general");
      __int16 v15 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;

      int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136315138;
      int v18 = "setPeridotCalib";
      _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "%s - failed to update firmware\n", (uint8_t *)&v17, 0xCu);
    }
  }
  CFRelease(v6);
  return v12;
}

BOOL H16ISP::savePeridotCalibToFW(H16ISP *this, H16ISP::H16ISPDevice *a2, unsigned __int16 a3, const void *a4)
{
  int v4 = (int)a2;
  uint64_t v31 = *MEMORY[0x263EF8340];
  H16ISP::JasperConfigManager::getJasperOptionsDict(this);
  CFDataRef IspFirmwareCalibWithOptions = (const __CFData *)PDPeridotCalibCreateIspFirmwareCalibWithOptions();
  if (IspFirmwareCalibWithOptions)
  {
    CFDataRef v7 = IspFirmwareCalibWithOptions;
    if (CFDataGetLength(IspFirmwareCalibWithOptions) == 536)
    {
      bzero(buf, 0x228uLL);
      LOWORD(v26) = 14087;
      HIDWORD(v26) = v4;
      v32.locatiouint64_t n = 0;
      v32.length = 536;
      CFDataGetBytes(v7, v32, (UInt8 *)&Length + 2);
      int v8 = H16ISP::H16ISPDevice::ISP_SendCommand(this, buf, 0x228u, 0, 0xFFFFFFFF);
      os_log_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        os_log_t v10 = os_log_create("com.apple.isp", "general");
        int v11 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;

        os_log_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 136315394;
        unsigned int v22 = "savePeridotCalibToFW";
        __int16 v23 = 1024;
        int v24 = v8;
        _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "%s - updating firmware: %d\n", (uint8_t *)&v21, 0x12u);
      }
      CFRelease(v7);
      return v8 == 0;
    }
    int v17 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      os_log_t v18 = os_log_create("com.apple.isp", "general");
      uint64_t v19 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v18;

      int v17 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    uint64_t v20 = v17;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      __int16 v26 = "savePeridotCalibToFW";
      __int16 v27 = 2048;
      CFIndex Length = CFDataGetLength(v7);
      __int16 v29 = 2048;
      uint64_t v30 = 536;
      _os_log_impl(&dword_24680F000, v20, OS_LOG_TYPE_DEFAULT, "%s - updating firmware: unexpected size: %ld != %lu\n", buf, 0x20u);
    }

    CFRelease(v7);
    return 0;
  }
  int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    os_log_t v14 = os_log_create("com.apple.isp", "general");
    __int16 v15 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;

    int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  }
  BOOL v16 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v16)
  {
    *(_DWORD *)CMTime buf = 136315138;
    __int16 v26 = "savePeridotCalibToFW";
    _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "%s - updating firmware: bad input\n", buf, 0xCu);
    return 0;
  }
  return result;
}

void sub_246858470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t H16ISP::JasperConfigManager::getJasperOptionsDict(H16ISP::JasperConfigManager *this)
{
  return qword_26B11C168;
}

uint64_t ___ZN6H16ISP21H16ISPFilterGraphNode8ActivateEv_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32));

  return kdebug_trace();
}

uint64_t H16ISP::H16ISPMetadataDictCreatorGraphNode::onActivate(H16ISP::H16ISPMetadataDictCreatorGraphNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPGraphExitNode::onActivate(H16ISP::H16ISPGraphExitNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPPearlCalibrationNode_Remote::onActivate(H16ISP::H16ISPPearlCalibrationNode_Remote *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPGraphFrameSyncNode::onActivate(H16ISP::H16ISPGraphFrameSyncNode *this)
{
  uint64_t v2 = *((void *)this + 1);
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 0x40000000;
  handler[2] = ___ZN6H16ISP24H16ISPGraphFrameSyncNode10onActivateEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_6;
  handler[4] = this;
  uint64_t v3 = dispatch_source_create(MEMORY[0x263EF8400], 0, 0, v2);
  int v4 = v3;
  if (v3)
  {
    dispatch_source_set_event_handler(v3, handler);
    dispatch_activate(v4);
  }
  *((void *)this + 38) = v4;
  *((void *)this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *((unsigned char *)this + 328) = 0;
  return 0;
}

uint64_t H16ISP::H16ISPJasperDepthNode::onActivate(H16ISP::H16ISPJasperDepthNode *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 152) = 0;
  if (*((void *)this + 20)
    || (H16ISP::CreateFixedPrioritySerialDispatchQueue_arc((H16ISP *)"com.apple.H16ispjasperdepthnode.activate", (const char *)0x3A), uint64_t v2 = objc_claimAutoreleasedReturnValue(), v3 = (void *)*((void *)this + 20), *((void *)this + 20) = v2, v3, *((void *)this + 20)))
  {
    *((void *)this + 24) = 0;
    if (*((void *)this + 27)) {
      goto LABEL_17;
    }
    memset(v17, 0, sizeof(v17));
    long long v16 = 0u;
    long long v15 = 0u;
    int v14 = 799564724;
    if (os_workgroup_attr_set_flags()) {
      H16ISP::H16ISPJasperDepthNode::onActivate();
    }
    uint64_t v4 = os_workgroup_create();
    uint64_t v5 = (void *)*((void *)this + 27);
    *((void *)this + 27) = v4;

    if (*((void *)this + 27))
    {
LABEL_17:
      if (!*((void *)this + 28))
      {
        dispatch_workloop_t inactive = dispatch_workloop_create_inactive("com.apple.h16jaspernode.workloop");
        CFDataRef v7 = (void *)*((void *)this + 28);
        *((void *)this + 28) = inactive;

        dispatch_workloop_set_os_workgroup(*((dispatch_workloop_t *)this + 28), *((os_workgroup_t *)this + 27));
        dispatch_activate(*((dispatch_object_t *)this + 28));
      }
      int v8 = *((void *)this + 20);
      v13[0] = MEMORY[0x263EF8330];
      v13[1] = 3221225472;
      v13[2] = ___ZN6H16ISP21H16ISPJasperDepthNode10onActivateEv_block_invoke;
      v13[3] = &__block_descriptor_40_e5_v8__0l;
      unsigned __int8 v13[4] = this;
      dispatch_async(v8, v13);
      *((unsigned char *)this + 153) = 0;
    }
    else
    {
      os_log_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        os_log_t v11 = os_log_create("com.apple.isp", "general");
        BOOL v12 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;

        os_log_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPJasperDepthNode::onActivate(v10);
      }
    }
  }
  return 0;
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::activate(pthread_mutex_t *this, const __CFData *a2, uint64_t a3, uint64_t a4)
{
  int v8 = this + 2;
  pthread_mutex_lock(this + 2);
  uint64_t v9 = [MEMORY[0x263F5D3E0] calibrationDataWithPeridotCalib:a2 platformId:a3 sensorVersion:a4];
  os_log_t v10 = *(void **)this[3].__opaque;
  *(void *)this[3].__opaque = v9;

  *(_DWORD *)&this[3].__opaque[8] = a3;
  *(_DWORD *)&this[3].__opaque[12] = a4;
  uint64_t v11 = *(void *)this->__opaque;
  int32x4_t v12 = *(int32x4_t *)(v11 + 96);
  int32x4_t v13 = *(int32x4_t *)(v11 + 112);
  int32x4_t v14 = *(int32x4_t *)(v11 + 128);
  int32x4_t v15 = vzip2q_s32(v12, v14);
  float32x4_t v16 = (float32x4_t)vzip1q_s32(vzip1q_s32(v12, v14), v13);
  float32x4_t v17 = (float32x4_t)vtrn2q_s32(v12, v13);
  v17.i32[2] = HIDWORD(*(void *)(v11 + 128));
  float32x4_t v18 = (float32x4_t)vzip1q_s32(v15, vdupq_laneq_s32(v13, 2));
  float32x4_t v19 = vnegq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)(v11 + 144))), v17, *(float32x2_t *)(v11 + 144), 1), v18, *(float32x4_t *)(v11 + 144), 2));
  *(_DWORD *)&this->__opaque[48] = v14.i32[0];
  *(void *)&this->__opaque[40] = v16.i64[0];
  *(_DWORD *)&this->__opaque[52] = 0;
  *(_DWORD *)this[1].__opaque = v14.i32[1];
  this[1].__sig = v17.i64[0];
  *(_DWORD *)&this[1].__opaque[4] = 0;
  *(_DWORD *)&this[1].__opaque[16] = v14.i32[2];
  *(void *)&this[1].__opaque[8] = v18.i64[0];
  *(_DWORD *)&this[1].__opaque[20] = 0;
  *(_DWORD *)&this[1].__opaque[32] = v19.i32[2];
  *(void *)&this[1].__opaque[24] = v19.i64[0];
  *(_DWORD *)&this[1].__opaque[36] = 0;
  if (*(float *)&this[1].__opaque[40] != 0.0) {
    H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::activateColor((H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal *)this);
  }
  uint64_t v20 = *(void *)&this->__opaque[8];
  *(void *)(v20 + 32) = mach_absolute_time();

  return pthread_mutex_unlock(v8);
}

void ___ZN6H16ISP21H16ISPJasperDepthNode10onActivateEv_block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  PeridotCalib = H16ISP::createPeridotCalib(*(H16ISP **)(v1 + 80), *(xpc_connection_t **)(v1 + 88), 0);
  if (PeridotCalib)
  {
    uint64_t v3 = PeridotCalib;
    CFDataRef v4 = (const __CFData *)CFRetain(PeridotCalib);
    if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(v1 + 80), *(_DWORD *)(v1 + 124), 0, v29, v30))
    {
      CFRelease(v3);
    }
    else
    {
      uint64_t v5 = [MEMORY[0x263F5D3E0] calibrationDataWithPeridotCalib:v4 platformId:*(unsigned int *)(v1 + 120) sensorVersion:(unsigned __int16)v31];
      if (v5)
      {
        H16ISP::JasperDepthNodeInternal::validate(*(void *)(v1 + 104), *(void *)(v1 + 80), *(unsigned __int16 *)(v1 + 124), *(void *)(v1 + 88), v5, *(float *)(v1 + 112), *(float *)(v1 + 116));
        id v6 = **(id **)(v1 + 104);
        CFDataRef v7 = *(xpc_connection_t **)(v1 + 88);
        if (v7)
        {
          theDict.columns[0].i64[0] = 0;
          H16ISP::H16ISPServicesRemote::ReadDictionary(v7, @"/var/mobile/Library/ISP/JasperL/session_persistency.plist", (const __CFDictionary **)&theDict);
          if (theDict.columns[0].i64[0])
          {
            MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, (CFDictionaryRef)theDict.columns[0].i64[0]);
            CFRelease((CFTypeRef)theDict.columns[0].i64[0]);
          }
          else
          {
            MutableCFArrayRef Copy = 0;
          }
        }
        else
        {
          uint64_t v9 = [NSDictionary dictionaryWithContentsOfFile:@"/var/mobile/Library/ISP/JasperL/session_persistency.plist"];
          MutableCFArrayRef Copy = (CFMutableDictionaryRef)[v9 mutableCopy];

          if (MutableCopy) {
            os_log_t v10 = MutableCopy;
          }
        }
        *(void *)(v1 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = MutableCopy;
        uint64_t v11 = [(__CFDictionary *)MutableCopy objectForKeyedSubscript:@"DepthProcessor"];
        if (v11) {
          [v6 setInternalState:v11];
        }
        int32x4_t v12 = *(void **)(v1 + 144);
        if (v12)
        {
          CFTypeRef v13 = CFRetain(v12);
          int32x4_t v14 = *(NSObject **)(v1 + 224);
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZN6H16ISP21H16ISPJasperDepthNode10onActivateEv_block_invoke_2;
          block[3] = &unk_2651F02E0;
          id v27 = v6;
          CFTypeRef v28 = v13;
          dispatch_async(v14, block);
        }
        if (*(unsigned char *)(v1 + 155)) {
          int32x4_t v12 = (void *)[v6 setGmoDebugMode];
        }
        BOOL isValidSequenceApplied = H16ISP::JasperConfigManager::isValidSequenceApplied((H16ISP::JasperConfigManager *)v12);
        if (!isValidSequenceApplied) {
          NSLog(&cfstr_Jasperdepthnod_1.isa);
        }
        int FrameMode = H16ISP::JasperConfigManager::getFrameMode((H16ISP::JasperConfigManager *)isValidSequenceApplied);
        if (FrameMode == 108) {
          uint64_t v17 = 2;
        }
        else {
          uint64_t v17 = FrameMode == 104;
        }
        [*(id *)(*(void *)(v1 + 104) + 8) setGmoFlowBitmask:0];
        [**(id **)(v1 + 104) setGmoFlowBitmap:0];
        LODWORD(v18) = *(_DWORD *)(v1 + 128);
        LODWORD(v19) = *(_DWORD *)(v1 + 132);
        objc_msgSend(v6, "prepareForPeridotPreset:rawSensorDimensions:", v17, (double)v18, (double)v19);
        uint64_t v20 = *(H16ISP::H16ISPTimeOfFlightColorSynchronizer **)(v1 + 96);
        if (v20
          && (*(_DWORD *)(v1 + 136)
           || H16ISP::H16ISPTimeOfFlightColorSynchronizer::isAutoFocusAssistanceActive(v20)))
        {
          PDPeridotCalibGetOperationalWideToPeridotTransform();
          theDict.columns[0] = v21;
          theDict.columns[1] = v22;
          theDict.columns[2] = v23;
          theDict.columns[3] = v24;
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setWideToTofExtrinsics(*(H16ISP::H16ISPTimeOfFlightColorSynchronizer **)(v1 + 96), &theDict);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::setFWProjectorMode(*(void *)(v1 + 96), 1);
          H16ISP::H16ISPTimeOfFlightColorSynchronizer::activate(*(H16ISP::H16ISPTimeOfFlightColorSynchronizer **)(v1 + 96), v4, *(unsigned int *)(v1 + 120), (unsigned __int16)v31);
        }
        [v6 startNewStatisticsSession];
        H16ISP::H16ISPJasperDepthNode::setJasperMode((id **)v1);
        *(unsigned char *)(v1 + 152) = 1;
        CFRelease(v3);
      }
      else
      {
        CFRelease(v3);
      }
    }
  }
  else
  {
    NSLog(&cfstr_Jasperdepthnod_0.isa);
  }
}

void sub_246858BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::setFWProjectorMode(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 24) + 8) + 28) = a2;
  return result;
}

void H16ISP::TimeOfFlightColorInfieldCalibrationManager::activate(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  *(unsigned char *)(a1 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(a1 + 16) != 0;
  *(_DWORD *)(a1 + 24) = a2;
  objc_storeStrong((id *)(a1 + 40), a3);
  objc_storeStrong((id *)(a1 + 32), a4);
  if (*(unsigned char *)(a1 + 108))
  {
    os_log_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      os_log_t v11 = os_log_create("com.apple.isp", "general");
      int32x4_t v12 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v11;

      os_log_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 20);
      v14[0] = 67109120;
      v14[1] = v13;
      _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "RGBJ-TofManager-Verbose: active mode: %d\n", (uint8_t *)v14, 8u);
    }
  }
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::activate(H16ISP::H16ISPTimeOfFlightColorSynchronizer *this, const __CFData *a2, uint64_t a3, uint64_t a4)
{
  id v8 = *((void *)this + 2);
  if (!v8)
  {
    uint64_t v9 = H16ISP::CreateFixedPrioritySerialDispatchQueue_arc((H16ISP *)"com.apple.H16ispjaspercolorcalibration", (const char *)0x3A);
    os_log_t v10 = (void *)*((void *)this + 2);
    *((void *)this + 2) = v9;

    id v8 = *((void *)this + 2);
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN6H16ISP35H16ISPTimeOfFlightColorSynchronizer8activateEPK8__CFDatajj_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = this;
  dispatch_async(v8, block);
  H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::enableClouds(*((void *)this + 3), 2);
  return H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::activate(*((pthread_mutex_t **)this + 3), a2, a3, a4);
}

NSObject *H16ISP::CreateFixedPrioritySerialDispatchQueue_arc(H16ISP *this, const char *a2)
{
  int v2 = (int)a2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  CFDataRef v4 = dispatch_queue_create((const char *)this, 0);
  if (v4)
  {
    snprintf(__str, 0x100uLL, "%s.root", (const char *)this);
    std::string::basic_string[abi:ne180100]<0>(&v14, (char *)this);
    uint64_t v5 = std::string::append(&v14, ".thread", 7uLL);
    id v6 = (std::string::value_type *)v5->__r_.__value_.__r.__words[0];
    std::string::size_type size = v5->__r_.__value_.__l.__size_;
    v15[0] = v5->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
    int v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (v8 < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v6, size);
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      __p.__r_.__value_.__l.__size_ = size;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = v15[0];
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v15 + 3);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v8;
    }
    int v13 = v2;
    uint64_t v9 = dispatch_pthread_root_queue_create();
    if (v9)
    {
      os_log_t v10 = v9;
      dispatch_set_target_queue(v4, v9);
    }
    else
    {
      os_log_t v10 = v4;
      CFDataRef v4 = 0;
    }

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else if ((v8 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v6);
  }
LABEL_12:

  return v4;
}

void sub_246859054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  operator delete(v24);

  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::enableClouds(uint64_t this, int a2)
{
  uint64_t v2 = this;
  if (!*(unsigned char *)(this + 217) || *(_DWORD *)(this + 220) != a2)
  {
    *(unsigned char *)(this + 217) = 1;
    *(_DWORD *)(this + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
    id v3 = objc_alloc(MEMORY[0x263F26CF0]);
    LODWORD(v4) = *(_DWORD *)(v2 + 260);
    uint64_t v5 = [v3 initWithStreamCount:1 allowedMatchTimeInterval:(double)v4 / 1000.0];
    id v6 = *(void **)(v2 + 232);
    *(void *)(v2 + 232) = v5;

    LODWORD(v7) = *(_DWORD *)(v2 + 260);
    objc_msgSend(*(id *)(v2 + 232), "setStream:queueSize:aggregationCount:allowedAggregationInterval:", 0, 2 * *(int *)(v2 + 220), (double)v7 / 1000.0);
    id v8 = objc_alloc(MEMORY[0x263F26CF0]);
    LODWORD(v9) = *(_DWORD *)(v2 + 256);
    uint64_t v10 = [v8 initWithStreamCount:2 allowedMatchTimeInterval:(double)v9 / 1000.0];
    os_log_t v11 = *(void **)(v2 + 240);
    *(void *)(v2 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v10;

    LODWORD(v12) = *(_DWORD *)(v2 + 264);
    objc_msgSend(*(id *)(v2 + 240), "setStream:queueSize:aggregationCount:allowedAggregationInterval:", 0, 2 * *(int *)(v2 + 220), (double)v12 / 1000.0);
    int v13 = *(void **)(v2 + 240);
    return [v13 setStream:1 queueSize:2];
  }
  return this;
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::activateColor(H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal *this)
{
  long long v25 = *((_OWORD *)this + 3);
  long long v28 = *((_OWORD *)this + 4);
  long long v31 = *((_OWORD *)this + 6);
  long long v34 = *((_OWORD *)this + 5);
  uint64_t v2 = [*((id *)this + 25) peridotCamera];
  [v2 cameraToPlatformTransform];
  float32x4_t v23 = v4;
  float32x4_t v24 = v3;
  float32x4_t v21 = v6;
  float32x4_t v22 = v5;
  long long v7 = v31;
  HIDWORD(v7) = 1.0;
  long long v8 = v34;
  HIDWORD(v8) = 0;
  long long v32 = v7;
  long long v35 = v8;
  long long v9 = v28;
  HIDWORD(v9) = 0;
  long long v29 = v9;
  long long v10 = v25;
  HIDWORD(v1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  long long v26 = v10;

  uint64_t v11 = 0;
  v37[0] = v26;
  v37[1] = v29;
  v37[2] = v35;
  v37[3] = v32;
  do
  {
    *(long long *)((char *)&v38 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(v37[v11])), v23, *(float32x2_t *)&v37[v11], 1), v22, (float32x4_t)v37[v11], 2), v21, (float32x4_t)v37[v11], 3);
    ++v11;
  }
  while (v11 != 4);
  double v33 = *(double *)&v40;
  double v36 = *(double *)&v41;
  double v27 = *(double *)&v38;
  double v30 = *(double *)&v39;
  id v12 = objc_alloc(MEMORY[0x263F5D3D8]);
  LODWORD(v13) = *((_DWORD *)this + 28);
  uint64_t v14 = objc_msgSend(v12, "initWithPixelSize:gdcModel:cameraToPlatformTransform:", *((void *)this + 4), v13, v27, v30, v33, v36);
  uint64_t v15 = (void *)*((void *)this + 24);
  *((void *)this + 24) = v14;

  float32x4_t v16 = (void *)*((void *)this + 24);
  if (v16)
  {
    int v17 = *((_DWORD *)this + 56);
    if (v17 == 2 || v17 == 1 && *((_DWORD *)this + 52) == 66)
    {
      H16ISP::TimeOfFlightAutoFocusAssistant::enableTeleDensification(*((void *)this + 1), 1, v16);
      float32x4_t v16 = (void *)*((void *)this + 24);
    }
    uint64_t v18 = *(void *)this;
    int v19 = *((_DWORD *)this + 53);
    uint64_t v20 = (void *)*((void *)this + 25);
    H16ISP::TimeOfFlightColorInfieldCalibrationManager::activate(v18, v19, v16, v20);
  }
}

void sub_246859334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 H16ISP::H16ISPTimeOfFlightColorSynchronizer::setWideToTofExtrinsics(H16ISP::H16ISPTimeOfFlightColorSynchronizer *this, const simd_float4x3 *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 3) + 8);
  int32x4_t v3 = (int32x4_t)a2->columns[1];
  int32x4_t v4 = (int32x4_t)a2->columns[2];
  float32x4_t v5 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a2->columns[0], v4), v3);
  float32x4_t v6 = (float32x4_t)vtrn2q_s32((int32x4_t)a2->columns[0], v3);
  v6.i32[2] = HIDWORD(a2->columns[2].i64[0]);
  float32x4_t v7 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a2->columns[0], v4), vdupq_laneq_s32(v3, 2));
  float32x4_t v8 = vnegq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(*(_OWORD *)&a2->columns[3])), v6, *(float32x2_t *)a2->columns[3].f32, 1), v7, (float32x4_t)a2->columns[3], 2));
  *(_DWORD *)(v2 + 104) = v4.i32[0];
  *(_DWORD *)(v2 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4.i32[1];
  *(void *)(v2 + 96) = v5.i64[0];
  *(void *)(v2 + 112) = v6.i64[0];
  *(_DWORD *)(v2 + 136) = v4.i32[2];
  *(void *)(v2 + 128) = v7.i64[0];
  *(_DWORD *)(v2 + 152) = v8.i32[2];
  *(void *)(v2 + 144) = v8.i64[0];
  long long v9 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v2 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v2 + 176) = v9;
  __n128 result = *(__n128 *)(v2 + 128);
  long long v11 = *(_OWORD *)(v2 + 144);
  *(__n128 *)(v2 + 192) = result;
  *(_OWORD *)(v2 + 208) = v11;
  return result;
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::setCloudsPerImage(H16ISP::H16ISPTimeOfFlightColorSynchronizer *this, int a2)
{
  return H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::enableClouds(*((void *)this + 3), a2);
}

uint64_t H16ISP::JasperDepthNodeInternal::validate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, float a6, float a7)
{
  id v13 = a5;
  uint64_t v14 = *(void **)(a1 + 8);
  if (!v14 || ![v14 isSameDevice:a2])
  {
    int v17 = [[JasperDepthProvider alloc] initWithDevice:a2 andChannel:a3 andRemote:a4];
    uint64_t v18 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v17;

    uint64_t v20 = *(void **)(a1 + 8);
    if (v20)
    {
      *(float *)&double v19 = a6;
      [v20 setJasperFrameRateMin:v19];
      *(float *)&double v21 = a7;
      [*(id *)(a1 + 8) setJasperFrameRateMax:v21];
      uint64_t v22 = [objc_alloc(MEMORY[0x263F5D3D0]) initWithSystemCalibrationData:v13];
      id v23 = *(id *)a1;
      *(void *)a1 = v22;

      float32x4_t v24 = *(void **)(a1 + 8);
      if (*(void *)a1)
      {
        [*(id *)a1 setDelegate:v24];
        unsigned int v25 = H16ISP::H16ISPGetCFPreferenceNumber(@"JasperDumpRawBuffers", @"com.apple.coremedia", 0);
        *(unsigned char *)(a1 + 16) = v25 != 0;
        if (v25)
        {
          long long v26 = NSTemporaryDirectory();
          uint64_t v27 = [v26 stringByAppendingPathComponent:@"JasperRawBuffers"];
          long long v28 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v27;

          NSLog(&cfstr_DumpingTofRawB.isa, *(void *)(a1 + 32));
          long long v29 = [MEMORY[0x263F08850] defaultManager];
          uint64_t v30 = *(void *)(a1 + 32);
          id v36 = 0;
          [v29 createDirectoryAtPath:v30 withIntermediateDirectories:1 attributes:0 error:&v36];
          id v31 = v36;

          uint64_t v32 = objc_opt_new();
          double v33 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v32;

          [*(id *)(a1 + 24) setDateFormat:@"yyyyMMdd-HHmmss-SSS"];
        }
        goto LABEL_8;
      }
      *(void *)(a1 + 8) = 0;
    }
    uint64_t v34 = 0;
    goto LABEL_11;
  }
  *(float *)&double v15 = a6;
  [*(id *)(a1 + 8) setJasperFrameRateMin:v15];
  *(float *)&double v16 = a7;
  [*(id *)(a1 + 8) setJasperFrameRateMax:v16];
LABEL_8:
  uint64_t v34 = 1;
LABEL_11:

  return v34;
}

void sub_2468595BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

H16ISP::H16ISPTimeOfFlightColorSynchronizer *H16ISP::H16ISPJasperDepthNode::setJasperMode(id **this)
{
  int v2 = [*this[13] expectedBanksPerFrame];
  if (v2 < 1) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 8u / v2;
  }
  __n128 result = (H16ISP::H16ISPTimeOfFlightColorSynchronizer *)this[12];
  if (result)
  {
    return (H16ISP::H16ISPTimeOfFlightColorSynchronizer *)H16ISP::H16ISPTimeOfFlightColorSynchronizer::setCloudsPerImage(result, v3);
  }
  return result;
}

uint64_t H16ISP::H16ISPFilterGraphNode::onActivate(H16ISP::H16ISPFilterGraphNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPServicesRemote::ReadDictionary(xpc_connection_t *this, const __CFString *a2, const __CFDictionary **a3)
{
  LODWORD(v9[0]) = 9;
  xpc_object_t XpcFromType = H16ISP::createXpcFromType(a2, a2);
  v9[1] = XpcFromType;
  uint64_t Property = H16ISP::H16ISPServicesRemote::GetProperty(this, v9);
  if (!Property)
  {
    *a3 = H16ISP::createTypeFromXpc((H16ISP *)object, v6);
    if (object) {
      xpc_release(object);
    }
  }
  xpc_release(XpcFromType);
  return Property;
}

uint64_t H16ISP::H16ISPServicesRemote::RegisterDeviceID(H16ISP::H16ISPServicesRemote *this, const char *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  int32x4_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v10 = *MEMORY[0x263EF8340];
  bzero(&v8, 0x3378uLL);
  LODWORD(v8) = 20;
  xpc_object_t object = xpc_string_create(v4);
  if (!object) {
    return 3758097084;
  }
  uint64_t v6 = H16ISP::H16ISPServicesRemote::SetPropertyAsync(v5, &v8);
  xpc_release(object);
  return v6;
}

uint64_t H16ISP::H16ISPServicesRemote::SetPropertyAsync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int32x4_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
  {
    int32x4_t v4 = os_log_create("com.apple.isp", "services");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)a2;
    v7[0] = 67109120;
    v7[1] = v5;
    _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "H16ISPServicesRemote: SetProperty (async) %d (sent)\n", (uint8_t *)v7, 8u);
  }
  return H16ISP::H16ISPServicesRemote::SetPropertyInternal(a1, a2, 0);
}

uint64_t H16ISP::H16ISPServicesRemote::SetProperty(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int32x4_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
  uint64_t v5 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
  {
    int32x4_t v4 = os_log_create("com.apple.isp", "services");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)a2;
    int v11 = 67109120;
    int v12 = v6;
    _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "H16ISPServicesRemote: SetProperty %d (sent)\n", (uint8_t *)&v11, 8u);
  }
  uint64_t v7 = H16ISP::H16ISPServicesRemote::SetPropertyInternal(a1, a2, 1);
  uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == v5)
  {
    uint64_t v8 = os_log_create("com.apple.isp", "services");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v8;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)a2;
    int v11 = 67109376;
    int v12 = v9;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_DEFAULT, "H16ISPServicesRemote: SetProperty %d (reply=0x%08X)\n", (uint8_t *)&v11, 0xEu);
  }
  return v7;
}

uint64_t H16ISP::H16ISPServicesRemote::SetPropertyInternal(uint64_t a1, xpc_object_t *a2, int a3)
{
  int64_t v3 = 3758097085;
  if (!*(void *)a1) {
    return 3758097111;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7)
  {
    uint64_t v8 = v7;
    xpc_dictionary_set_uint64(v7, "H16ISPServicesRemoteTypeKey", 1uLL);
    xpc_dictionary_set_data(v8, "H16ISPServicesRemoteDataKey", a2, 0x3378uLL);
    switch(*(_DWORD *)a2)
    {
      case 7:
        int v9 = a2 + 1;
        uint64_t v10 = "H16ISPServicesRemoteJasperCalibObjectKey";
        goto LABEL_10;
      case 8:
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteRGBJBufferKey", a2[1]);
        int v9 = a2 + 2;
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteRGBJOriginalCloudBanksKey", a2[3]);
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteRGBJJasperCalibrationKey", a2[5]);
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteRGBJColorCalibrationKey", a2[4]);
        uint64_t v10 = "H16ISPServicesRemoteRGBJMetadataKey";
        goto LABEL_10;
      case 9:
      case 0xA:
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteCFTypeNameKey", a2[1]);
        int v9 = a2 + 2;
        uint64_t v10 = "H16ISPServicesRemoteCFTypeDataKey";
        goto LABEL_10;
      case 0x11:
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteRGBIRBufferColorKey", a2[1]);
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteRGBIRBufferIRKey", a2[2]);
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteRGBIRBufferDepthKey", a2[3]);
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteRGBIRMetadataColorKey", a2[4]);
        xpc_dictionary_set_value(v8, "H16ISPServicesRemoteRGBIRMetadataIRKey", a2[5]);
        int v9 = a2 + 6;
        uint64_t v10 = "H16ISPServicesRemoteRGBIRPCEConfigKey";
        goto LABEL_10;
      case 0x14:
        int v9 = a2 + 1;
        uint64_t v10 = "H16ISPServicesRemoteDeviceID";
LABEL_10:
        xpc_dictionary_set_value(v8, v10, *v9);
        break;
      default:
        break;
    }
    if (a3)
    {
      int64_t v3 = H16ISP::H16ISPServicesRemote::sendMessageSync((xpc_connection_t *)a1, v8);
    }
    else
    {
      int v11 = *(_DWORD *)a2;
      int v12 = *(_xpc_connection_s **)a1;
      __int16 v13 = *(NSObject **)(a1 + 8);
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 0x40000000;
      _DWORD v15[2] = ___ZN6H16ISP20H16ISPServicesRemote16sendMessageAsyncEPv28H16ISPServicesRemoteProperty_block_invoke;
      v15[3] = &__block_descriptor_tmp_5;
      unsigned __int8 v15[4] = a1;
      int v16 = v11;
      xpc_connection_send_message_with_reply(v12, v8, v13, v15);
      int64_t v3 = 0;
    }
    xpc_release(v8);
  }
  return v3;
}

const void *H16ISP::createPeridotCalib(H16ISP *this, xpc_connection_t *a2, H16ISP::H16ISPServicesRemote *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  uint64_t v6 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    os_log_t v7 = os_log_create("com.apple.isp", "general");
    uint64_t v8 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v7;

    uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CMTime buf = 136315138;
    uint64_t v20 = "createPeridotCalib";
    _os_log_impl(&dword_24680F000, v5, OS_LOG_TYPE_DEFAULT, "%s - get calibration\n", buf, 0xCu);
  }
  if (a2)
  {
    CFTypeRef cf = 0;
    int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v6)
    {
      os_log_t v10 = os_log_create("com.apple.isp", "general");
      int v11 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v10;

      int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315138;
      uint64_t v20 = "createPeridotCalib";
      _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "%s - reading from daemon\n", buf, 0xCu);
    }
    int JasperCalibData = H16ISP::H16ISPServicesRemote::CreateJasperCalibData(a2, (const __CFData **)&cf);
    uint64_t v13 = 0;
    if (!JasperCalibData && cf)
    {
      uint64_t v13 = PDPeridotCalibCreateWithBinaryRepresentation();
      CFRelease(cf);
    }
  }
  else
  {
    int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v6)
    {
      os_log_t v15 = os_log_create("com.apple.isp", "general");
      int v16 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;

      int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315138;
      uint64_t v20 = "createPeridotCalib";
      _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_DEFAULT, "%s - reading locally\n", buf, 0xCu);
    }
    return JasperCalibration::get(this, 0);
  }
  return (const void *)v13;
}

uint64_t H16ISP::H16ISPServicesRemote::CreateJasperCalibData(xpc_connection_t *this, const __CFData **a2)
{
  LODWORD(v6) = 7;
  uint64_t Property = H16ISP::H16ISPServicesRemote::GetProperty(this, &v6);
  if (!Property)
  {
    *a2 = H16ISP::createTypeFromXpc((H16ISP *)object, v3);
    if (object) {
      xpc_release(object);
    }
  }
  return Property;
}

uint64_t H16ISP::H16ISPServicesRemote::GetProperty(xpc_connection_t *a1, xpc_object_t *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int32x4_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
  uint64_t v5 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
  {
    int32x4_t v4 = os_log_create("com.apple.isp", "services");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)a2;
    int v11 = 67109120;
    int v12 = v6;
    _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "H16ISPServicesRemote: GetProperty (%d) (sent)\n", (uint8_t *)&v11, 8u);
  }
  uint64_t PropertyInternal = H16ISP::H16ISPServicesRemote::GetPropertyInternal(a1, a2);
  uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == v5)
  {
    uint64_t v8 = os_log_create("com.apple.isp", "services");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v8;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)a2;
    int v11 = 67109376;
    int v12 = v9;
    __int16 v13 = 1024;
    int v14 = PropertyInternal;
    _os_log_impl(&dword_24680F000, v8, OS_LOG_TYPE_DEFAULT, "H16ISPServicesRemote: GetProperty (%d) (reply=0x%08X)\n", (uint8_t *)&v11, 0xEu);
  }
  return PropertyInternal;
}

uint64_t H16ISP::H16ISPServicesRemote::GetPropertyInternal(xpc_connection_t *a1, xpc_object_t *a2)
{
  uint64_t v2 = 3758097084;
  if (!*a1) {
    return 3758097111;
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (!v5) {
    return 3758097085;
  }
  int v6 = v5;
  xpc_dictionary_set_uint64(v5, "H16ISPServicesRemoteTypeKey", 2uLL);
  xpc_dictionary_set_data(v6, "H16ISPServicesRemoteDataKey", a2, 0xE60uLL);
  if ((*(_DWORD *)a2 - 9) >= 2)
  {
    if (*(_DWORD *)a2 != 19) {
      goto LABEL_10;
    }
    os_log_t v7 = "H16ISPServicesRemoteRGBIRFinalInputPCEConfigKey";
  }
  else
  {
    os_log_t v7 = "H16ISPServicesRemoteCFTypeNameKey";
  }
  xpc_dictionary_set_value(v6, v7, a2[1]);
LABEL_10:
  int64_t v8 = H16ISP::H16ISPServicesRemote::sendMessageSync(a1, v6);
  size_t length = 0;
  data = xpc_dictionary_get_data(v6, "H16ISPServicesRemoteDataKey", &length);
  if (length == 3680)
  {
    uint64_t v2 = v8;
    memcpy(a2, data, 0xE60uLL);
    int v10 = *(_DWORD *)a2;
    if (*(int *)a2 > 17)
    {
      if (v10 == 19)
      {
        if (!v8)
        {
          int v11 = "H16ISPServicesRemoteRGBIRFinalOutputPCEConfigKey";
          goto LABEL_27;
        }
        goto LABEL_23;
      }
      if (v10 == 18)
      {
        if (v8)
        {
LABEL_21:
          a2[1] = 0;
          goto LABEL_29;
        }
        int v12 = "H16ISPServicesRemoteRGBIRReportKey";
LABEL_25:
        xpc_object_t value = xpc_dictionary_get_value(v6, v12);
        a2[1] = value;
LABEL_28:
        xpc_retain(value);
      }
    }
    else
    {
      if ((v10 - 9) < 2)
      {
        if (!v8)
        {
          int v11 = "H16ISPServicesRemoteCFTypeDataKey";
LABEL_27:
          xpc_object_t value = xpc_dictionary_get_value(v6, v11);
          a2[2] = value;
          goto LABEL_28;
        }
LABEL_23:
        a2[2] = 0;
        goto LABEL_29;
      }
      if (v10 == 7)
      {
        if (v8) {
          goto LABEL_21;
        }
        int v12 = "H16ISPServicesRemoteJasperCalibObjectKey";
        goto LABEL_25;
      }
    }
LABEL_29:
    xpc_release(v6);
  }
  return v2;
}

int64_t H16ISP::H16ISPServicesRemote::sendMessageSync(xpc_connection_t *this, void *a2)
{
  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(*this, a2);
  if (v4)
  {
    xpc_object_t v5 = v4;
    uint64_t v6 = MEMORY[0x24C53EF40]();
    if (v6 == MEMORY[0x263EF8708])
    {
      size_t length = 3680;
      double v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
      {
        double v19 = os_log_create("com.apple.isp", "services");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v19;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        H16ISP::H16ISPServicesRemote::sendMessageSync(v19);
      }
      int64_t int64 = xpc_dictionary_get_int64(v5, "H16ISPServicesRemoteReturnKey");
      data = xpc_dictionary_get_data(v5, "H16ISPServicesRemoteDataKey", &length);
      xpc_dictionary_set_data(a2, "H16ISPServicesRemoteDataKey", data, length);
      xpc_object_t value = xpc_dictionary_get_value(v5, "H16ISPServicesRemoteJasperCalibObjectKey");
      xpc_dictionary_set_value(a2, "H16ISPServicesRemoteJasperCalibObjectKey", value);
      xpc_object_t v22 = xpc_dictionary_get_value(v5, "H16ISPServicesRemoteRGBIRReportKey");
      xpc_dictionary_set_value(a2, "H16ISPServicesRemoteRGBIRReportKey", v22);
      xpc_object_t v23 = xpc_dictionary_get_value(v5, "H16ISPServicesRemoteRGBIRFinalOutputPCEConfigKey");
      xpc_dictionary_set_value(a2, "H16ISPServicesRemoteRGBIRFinalOutputPCEConfigKey", v23);
      xpc_object_t v24 = xpc_dictionary_get_value(v5, "H16ISPServicesRemoteCFTypeNameKey");
      xpc_dictionary_set_value(a2, "H16ISPServicesRemoteCFTypeNameKey", v24);
      xpc_object_t v25 = xpc_dictionary_get_value(v5, "H16ISPServicesRemoteCFTypeDataKey");
      xpc_dictionary_set_value(a2, "H16ISPServicesRemoteCFTypeDataKey", v25);
    }
    else
    {
      int64_t int64 = 3758097084;
      if (v6 == MEMORY[0x263EF8720])
      {
        uint64_t v8 = MEMORY[0x24C53EE30](v5);
        if (v8)
        {
          int v9 = (void *)v8;
          int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
          {
            int v10 = os_log_create("com.apple.isp", "services");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v10;
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPServicesRemote::sendMessageSync();
          }
          free(v9);
        }
        int64_t int64 = 3758097111;
        if (v5 != (void *)MEMORY[0x263EF86A8]) {
          xpc_connection_cancel(*this);
        }
      }
    }
    xpc_release(v5);
  }
  else
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "services");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v11;
    }
    int64_t int64 = 3758097084;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPServicesRemote::sendMessageSync(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  return int64;
}

uint64_t ___ZN6H16ISPL23createDictionaryFromXpcEPv_block_invoke(uint64_t a1, void *a2, H16ISP *this)
{
  uint64_t TypeFromXpc = H16ISP::createTypeFromXpc(this, a2);
  if (TypeFromXpc)
  {
    uint64_t v6 = (const void *)TypeFromXpc;
    CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)a2, 0x8000100u);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v7, v6);
    CFRelease(v7);
    CFRelease(v6);
  }
  return 1;
}

CFDataRef H16ISP::createTypeFromXpc(H16ISP *this, void *a2)
{
  uint64_t v3 = MEMORY[0x24C53EF40](this, a2);
  if (v3 == MEMORY[0x263EF8708])
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    double applier = MEMORY[0x263EF8330];
    uint64_t v16 = 0x40000000;
    uint64_t v17 = ___ZN6H16ISPL23createDictionaryFromXpcEPv_block_invoke;
    uint64_t v18 = &__block_descriptor_tmp_55;
    CFMutableDictionaryRef v19 = Mutable;
    xpc_dictionary_apply(this, &applier);
    return Mutable;
  }
  if (v3 == MEMORY[0x263EF86D8])
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    double applier = MEMORY[0x263EF8330];
    uint64_t v16 = 0x40000000;
    uint64_t v17 = ___ZN6H16ISPL18createArrayFromXpcEPv_block_invoke;
    uint64_t v18 = &__block_descriptor_tmp_57;
    CFMutableDictionaryRef v19 = Mutable;
    xpc_array_apply(this, &applier);
    return Mutable;
  }
  if (v3 == MEMORY[0x263EF8738])
  {
    double applier = COERCE_DOUBLE(xpc_int64_get_value(this));
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFNumberType v6 = kCFNumberSInt64Type;
    return CFNumberCreate(v5, v6, &applier);
  }
  if (v3 == MEMORY[0x263EF8710])
  {
    double applier = xpc_double_get_value(this);
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFNumberType v6 = kCFNumberDoubleType;
    return CFNumberCreate(v5, v6, &applier);
  }
  if (v3 == MEMORY[0x263EF8798])
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    string_ptr = xpc_string_get_string_ptr(this);
    return (CFDataRef)CFStringCreateWithCString(v8, string_ptr, 0x8000100u);
  }
  else
  {
    if (v3 != MEMORY[0x263EF86F8])
    {
      if (v3 != MEMORY[0x263EF86E0]) {
        return 0;
      }
      BOOL value = xpc_BOOL_get_value(this);
      uint64_t v14 = MEMORY[0x263EFFB40];
      if (!value) {
        uint64_t v14 = MEMORY[0x263EFFB38];
      }
      return *(CFDataRef *)v14;
    }
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    bytes_ptr = (const UInt8 *)xpc_data_get_bytes_ptr(this);
    CFIndex length = xpc_data_get_length(this);
    return CFDataCreate(v10, bytes_ptr, length);
  }
}

BOOL H16ISP::JasperConfigManager::isValidSequenceApplied(H16ISP::JasperConfigManager *this)
{
  return qword_26B11C114 != -1;
}

H16ISP::H16ISPJasperDepthNode *___ZN6H16ISP21H16ISPJasperDepthNode19onMessageProcessingEPNS_24H16ISPFilterGraphMessageE_block_invoke(uint64_t a1)
{
  __n128 result = *(H16ISP::H16ISPJasperDepthNode **)(a1 + 40);
  if (!*((unsigned char *)result + 236))
  {
    __n128 result = (H16ISP::H16ISPJasperDepthNode *)H16ISP::H16ISPJasperDepthNode::processJasper(result, *(H16ISP::H16ISPFilterGraphMessage **)(a1 + 48));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t H16ISP::H16ISPJasperDepthNode::processJasper(H16ISP::H16ISPJasperDepthNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  xpc_object_t v4 = (void *)MEMORY[0x24C53DF70]();
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  uint64_t v5 = 0;
  CFNumberType v6 = 0;
  CFStringRef v7 = (char *)a2 + 80;
  CFAllocatorRef v8 = (char *)a2 + 112;
  do
  {
    if (*(_DWORD *)&v7[312 * v5 + 16] == *((_DWORD *)this + 31))
    {
      uint64_t v9 = *(unsigned int *)&v7[312 * v5 + 20];
      if (v9)
      {
        CFAllocatorRef v10 = v8;
        do
        {
          if (*v10 == 1) {
            CFNumberType v6 = (__CVBuffer *)*((void *)v10 - 1);
          }
          v10 += 4;
          --v9;
        }
        while (v9);
      }
    }
    ++v5;
    v8 += 312;
  }
  while (v5 != 3);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
  if (!v6) {
    goto LABEL_48;
  }
  uint64_t v11 = 3758097130;
  H16ISP::JasperDepthNodeInternal::saveBuffer(*((H16ISP::JasperDepthNodeInternal **)this + 13), v6);
  ++*((void *)this + 24);
  CFStringRef v12 = (const __CFString *)*MEMORY[0x263F2C558];
  CFTypeRef Attachment = (__CFDictionary *)CVBufferGetAttachment(v6, (CFStringRef)*MEMORY[0x263F2C558], 0);
  if (!H16ISP::H16ISPJasperDepthNode::updateJasperMetadata(this, v6, Attachment)) {
    goto LABEL_49;
  }
  id v14 = *(id *)(*((void *)this + 13) + 8);
  BOOL v15 = ([v14 isValid] & 1) == 0
     && [*(id *)(*((void *)this + 13) + 8) gmoFlowBitmask] != 0;

  CVPixelBufferLockBaseAddress(v6, 1uLL);
  CVPixelBufferGetBaseAddress(v6);
  uint64_t v16 = *((void *)this + 12);
  if (v16)
  {
    char shouldProcessForAutoFocus = H16ISP::H16ISPTimeOfFlightColorSynchronizer::shouldProcessForAutoFocus(v16);
    CVPixelBufferUnlockBaseAddress(v6, 1uLL);
    if (shouldProcessForAutoFocus) {
      goto LABEL_23;
    }
  }
  else
  {
    CVPixelBufferUnlockBaseAddress(v6, 1uLL);
  }
  uint64_t v18 = (H16ISP::H16ISPTimeOfFlightColorSynchronizer *)*((void *)this + 12);
  if (v18 && H16ISP::H16ISPTimeOfFlightColorSynchronizer::isFWAFOwner(v18))
  {
    if (!v15) {
      goto LABEL_49;
    }
    goto LABEL_23;
  }
  if (!*((_DWORD *)this + 34))
  {
LABEL_48:
    uint64_t v11 = 0;
    goto LABEL_49;
  }
LABEL_23:
  if (!*((unsigned char *)this + 152)) {
    goto LABEL_48;
  }
  CVPixelBufferLockBaseAddress(v6, 1uLL);
  kdebug_trace();
  CFDataRef v19 = (const __CFData *)*((void *)this + 26);
  if (!v19) {
    goto LABEL_28;
  }
  unint64_t Length = CFDataGetLength(v19);
  if (Length < CVPixelBufferGetDataSize(v6)) {
    CFRelease(*((CFTypeRef *)this + 26));
  }
  uint64_t v21 = (__CFData *)*((void *)this + 26);
  if (!v21)
  {
LABEL_28:
    CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex DataSize = CVPixelBufferGetDataSize(v6);
    CFMutableDictionaryRef Mutable = CFDataCreateMutable(v22, DataSize);
    *((void *)this + 26) = Mutable;
    CFIndex v25 = CVPixelBufferGetDataSize(v6);
    CFDataSetLength(Mutable, v25);
    uint64_t v21 = (__CFData *)*((void *)this + 26);
  }
  BOOL v46 = v15;
  MutableBytePtr = CFDataGetMutableBytePtr(v21);
  BaseAddress = CVPixelBufferGetBaseAddress(v6);
  size_t v28 = CVPixelBufferGetDataSize(v6);
  memcpy(MutableBytePtr, BaseAddress, v28);
  kdebug_trace();
  kdebug_trace();
  id v29 = **((id **)this + 13);
  memset(&v49, 0, sizeof(v49));
  uint64_t v47 = v29;
  int64_t v30 = FigHostTimeToNanoseconds();
  CMTimeMake(&v49, v30, 1000000000);
  uint64_t v31 = *((void *)this + 26);
  CMTime v48 = v49;
  uint64_t v32 = [v29 generatePointCloudFromRawFrame:v31 timestamp:&v48];
  double v33 = (char *)CVPixelBufferGetBaseAddress(v6);
  uint64_t v34 = 63088;
  if (v33[7] < 0) {
    uint64_t v34 = 126208;
  }
  int v35 = v33[v34 + 2053];
  CVPixelBufferUnlockBaseAddress(v6, 1uLL);
  [v32 length];
  id v36 = (H16ISP::H16ISPTimeOfFlightColorSynchronizer *)kdebug_trace();
  if (v32)
  {
    uint64_t v37 = (__CVBuffer *)[v32 dataBuffer];
    long long v38 = v37;
    if (v37)
    {
      CFDictionaryRef v39 = (const __CFDictionary *)CVBufferGetAttachment(v37, @"Metadata", 0);
      long long v40 = (void *)CVBufferGetAttachment(v6, v12, 0);
      if (v39 && v40)
      {
        CFDictionaryApplyFunction(v39, (CFDictionaryApplierFunction)H16ISP::AppendDictionary, v40);
        CVBufferRemoveAttachment(v38, @"Metadata");
      }
      CVBufferSetAttachment(v6, @"PointCloudRidingOnRaw", v38, kCVAttachmentMode_ShouldPropagate);
    }
    if (v46)
    {
      id v41 = *(id *)(*((void *)this + 13) + 8);
      if ([v41 isValid])
      {
      }
      else
      {
        int v45 = [*(id *)(*((void *)this + 13) + 8) gmoFlowBitmask];

        if (*((unsigned char *)this + 154) && v45)
        {
          NSLog(&cfstr_Jasperdepthnod_2.isa);

          goto LABEL_49;
        }
      }
    }
    *((unsigned char *)this + 153) = 1;
    id v36 = (H16ISP::H16ISPTimeOfFlightColorSynchronizer *)*((void *)this + 12);
    if (v36 && v38 && *((unsigned char *)v36 + 8)) {
      H16ISP::H16ISPTimeOfFlightColorSynchronizer::pushJasperCloud(v36, v38, Attachment);
    }
  }
  char isBurstAllowed = H16ISP::JasperConfigManager::isBurstAllowed(v36);
  char v43 = v35 == 3 ? 0 : isBurstAllowed;

  if ((v43 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_49:
  return v11;
}

void sub_24685ADF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::shouldProcessForAutoFocus(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 24) + 8) + 25);
}

void H16ISP::JasperDepthNodeInternal::saveBuffer(H16ISP::JasperDepthNodeInternal *this, CVPixelBufferRef pixelBuffer)
{
  if (pixelBuffer && *((unsigned char *)this + 16))
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    xpc_object_t v4 = (void *)MEMORY[0x263EFF8F8];
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
    id v12 = [v4 dataWithBytesNoCopy:BaseAddress length:CVPixelBufferGetDataSize(pixelBuffer) freeWhenDone:0];
    CFNumberType v6 = NSString;
    CFStringRef v7 = (void *)*((void *)this + 3);
    uint64_t v8 = *((void *)this + 4);
    uint64_t v9 = [MEMORY[0x263EFF910] now];
    CFAllocatorRef v10 = [v7 stringFromDate:v9];
    uint64_t v11 = [v6 stringWithFormat:@"%@/buffer-%@.raw", v8, v10];

    [v12 writeToFile:v11 atomically:1];
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
}

void sub_24685AF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPJasperDepthNode::updateJasperMetadata(H16ISP::H16ISPJasperDepthNode *this, CVPixelBufferRef pixelBuffer, __CFDictionary *a3)
{
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  size_t DataSize = CVPixelBufferGetDataSize(pixelBuffer);
  ChannelSensorIOSurfaceID ID = (H16ISP::JasperConfigManager *)H16ISP::H16ISPDevice::GetChannelSensorID(*((H16ISP::H16ISPDevice **)this + 10), *((_DWORD *)this + 31));
  if (ChannelSensorID == 1425)
  {
    if (DataSize <= 0x13F)
    {
      NSLog(&cfstr_UnexpectedPeri.isa, DataSize);
      goto LABEL_14;
    }
    if (BaseAddress[63] != 4) {
      NSLog(&cfstr_UnexpectedPeri_0.isa, BaseAddress[63], 4);
    }
    CFDataRef v19 = &BaseAddress[9280 * BaseAddress[51]];
    if (v19 + 384 > &BaseAddress[DataSize])
    {
      NSLog(&cfstr_BadPeridotFram.isa, BaseAddress[51]);
      goto LABEL_14;
    }
    char v29 = v19[132] - 1;
    int FrameMode = H16ISP::JasperConfigManager::getFrameMode(ChannelSensorID);
    if (FrameMode == 108)
    {
      __int16 v22 = 6;
    }
    else if (FrameMode == 104)
    {
      __int16 v22 = 5;
    }
    else
    {
      __int16 v22 = 1;
    }
    __int16 v28 = v22;
    CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFNumberRef v24 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt16Type, &v28);
    CFDictionarySetValue(a3, (const void *)*MEMORY[0x263F2D610], v24);
    CFRelease(v24);
    CFNumberRef v17 = CFNumberCreate(v23, kCFNumberSInt8Type, &v29);
    CFDictionarySetValue(a3, @"JasperBankId", v17);
    uint64_t v18 = (__CFString *)*MEMORY[0x263F2D608];
    goto LABEL_23;
  }
  uint64_t v9 = 126208;
  if ((char)BaseAddress[7] >= 0) {
    uint64_t v9 = 63088;
  }
  CFAllocatorRef v10 = (unsigned int *)&BaseAddress[v9];
  int v11 = *(_DWORD *)&BaseAddress[v9];
  if ((v11 - 9) < 2)
  {
    if (!a3)
    {
LABEL_24:
      uint64_t v20 = 1;
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      return v20;
    }
    __int16 v12 = [MEMORY[0x263F5D3E8] getPresetFromOperationModeNumber:*((unsigned __int16 *)v10 + 3)] == 0;
    __int16 valuePtr = 4 * v12;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFNumberRef v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a3, @"JasperPresetIndex", v14);
    CFRelease(v14);
    __int16 v26 = v12;
    CFNumberRef v15 = CFNumberCreate(v13, kCFNumberSInt16Type, &v26);
    CFDictionarySetValue(a3, (const void *)*MEMORY[0x263F2D610], v15);
    CFRelease(v15);
    CFNumberRef v16 = CFNumberCreate(v13, kCFNumberSInt8Type, (char *)v10 + 2053);
    CFDictionarySetValue(a3, @"JasperBankId", v16);
    CFDictionarySetValue(a3, (const void *)*MEMORY[0x263F2D608], v16);
    CFRelease(v16);
    CFNumberRef v17 = CFNumberCreate(v13, kCFNumberSInt16Type, v10 + 2);
    uint64_t v18 = @"JasperConfigId";
LABEL_23:
    CFDictionarySetValue(a3, v18, v17);
    CFRelease(v17);
    goto LABEL_24;
  }
  if (v11 != -1)
  {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
    NSLog(&cfstr_JasperFrameVDE.isa, *v10, 9);
    return 0;
  }
LABEL_14:
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  return 0;
}

uint64_t H16ISP::JasperConfigManager::getFrameMode(H16ISP::JasperConfigManager *this)
{
  return HIDWORD(qword_26B11C114);
}

uint64_t H16ISP::H16ISPDevice::GetChannelSensorID(H16ISP::H16ISPDevice *this, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = &_os_log_internal;
  if (*((unsigned char *)this + 4))
  {
    if (*((_DWORD *)this + 1187) > a2)
    {
      uint64_t v4 = *(unsigned int *)(*((void *)this + 5) + 432 * a2 + 64);
      goto LABEL_9;
    }
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPDevice::GetChannelSensorID();
    }
  }
  uint64_t v4 = 0;
LABEL_9:
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == v3) {
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    CFStringRef v7 = "GetChannelSensorID";
    __int16 v8 = 1024;
    int v9 = v4;
    __int16 v10 = 1024;
    unsigned int v11 = a2;
    _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "%s - sensorID: 0x%04X, chan: %d\n", (uint8_t *)&v6, 0x18u);
  }
  return v4;
}

uint64_t SetHDRFusionEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  *(unsigned char *)(a2 + 413pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v8 != 0;
  if (v8)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 48);
    unsigned int v10 = *(_DWORD *)(a2 + 168);
    if (v9 < v10) {
      unsigned int v10 = 0;
    }
    if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v9 - v10) + 16), v22, v24))
    {
      unsigned int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned int v11 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        SetHDRFusionEnable(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      return 4294954516;
    }
    if (!v23)
    {
      uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v21 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        SetHDRFusionEnable();
      }
      return 4294954516;
    }
    char v20 = *(unsigned char *)(a2 + 4130) != 0;
  }
  else
  {
    char v20 = 0;
  }
  if (H16ISP::H16ISPDevice::EnableHDRFusion(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v20))return 4294954516; {
  else
  }
    return 0;
}

uint64_t H16ISP::H16ISPDevice::EnableHDRFusion(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 4102;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetHistogramParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D910]);
  if (result)
  {
    int v9 = (const void *)result;
    CFTypeID v10 = CFGetTypeID((CFTypeRef)result);
    if (v10 == CFBooleanGetTypeID())
    {
      int v11 = *(unsigned __int16 *)(a2 + 132);
      if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
        v11 |= 0x80000000;
      }
      uint64_t v12 = *(H16ISP::H16ISPDevice **)(a4 + 24);
      char v13 = CFEqual(v9, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
      int v14 = H16ISP::H16ISPDevice::EnableHistogram(v12, v11, v13);
      uint64_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v15 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v16[0] = 67109120;
        v16[1] = v14;
        _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting Histogram Parameters (result=0x%08X)\n\n", (uint8_t *)v16, 8u);
      }
      if (v14) {
        return 4294954516;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableHistogram(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2575;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetExposureBias(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t valuePtr = 0;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 == CFDictionaryGetTypeID())
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2DD00]);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
      if (!HIWORD(valuePtr))
      {
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C370]);
        if (v9) {
          CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
        }
        goto LABEL_11;
      }
    }
    return 4294954516;
  }
  CFTypeID v10 = CFGetTypeID(a1);
  if (v10 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, (char *)&valuePtr + 4);
  if (HIWORD(valuePtr)) {
    return 4294954516;
  }
LABEL_11:
  int v12 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v12 |= 0x80000000;
  }
  int v13 = H16ISP::H16ISPDevice::SetExposureBias(*(H16ISP::H16ISPDevice **)(a4 + 24), v12, SWORD2(valuePtr), valuePtr);
  int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v14 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)CMTime buf = 67109632;
    int v17 = HIDWORD(valuePtr);
    __int16 v18 = 1024;
    int v19 = valuePtr;
    __int16 v20 = 1024;
    int v21 = v13;
    _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting Exposure Bias: 0x%08X, tag=0x%08X, result=0x%08X\n\n", buf, 0x14u);
  }
  if (v13) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::SetExposureBias(H16ISP::H16ISPDevice *this, int a2, __int16 a3, int a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 516;
  int v11 = a2;
  __int16 v12 = a3;
  int v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t CopyFlashCalibrationData(const __CFAllocator *a1, CFDataRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v8 = *(H16ISP::H16ISPDevice **)(a5 + 24);
  uint64_t v9 = *((void *)v8 + 548);
  bzero(&v18, 0x14uLL);
  H16ISP::H16ISPDevice::GetStrobeLEDCalibrationValues(v8, *(_DWORD *)(a3 + 132), v20);
  if (v10)
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      CopyFlashCalibrationData();
    }
    CFDataRef v12 = 0;
    uint64_t v13 = 4294954514;
    goto LABEL_7;
  }
  if (!v20[1])
  {
    CFDataRef v12 = 0;
    uint64_t v13 = 4294954513;
    goto LABEL_7;
  }
  if (v20[0] == 2)
  {
    int v18 = 0;
    long long v19 = v22;
    goto LABEL_17;
  }
  if (v20[0] == 3 && !v21)
  {
    int v18 = 1;
    goto LABEL_15;
  }
  if (v20[0] == 3 && v21 - 1 <= 1)
  {
    int v18 = 2;
    int v17 = *(_DWORD *)(v9 + 96 * *(unsigned int *)(a3 + 132) + 16);
    switch(v17)
    {
      case 1919251564:
        uint64_t v15 = v25;
        goto LABEL_16;
      case 1919251319:
        uint64_t v15 = v24;
        goto LABEL_16;
      case 1919246706:
LABEL_15:
        uint64_t v15 = v23;
LABEL_16:
        *(void *)&long long v19 = v15;
        break;
    }
  }
LABEL_17:
  CFDataRef v12 = CFDataCreate(a1, (const UInt8 *)&v18, 20);
  if (v12)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v16 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      CopyFlashCalibrationData();
    }
    CFDataRef v12 = 0;
    uint64_t v13 = 4294954510;
  }
LABEL_7:
  *a2 = v12;
  return v13;
}

double H16ISP::H16ISPDevice::GetStrobeLEDCalibrationValues(H16ISP::H16ISPDevice *a1, __int16 a2, _OWORD *a3)
{
  bzero(v8, 0x38uLL);
  __int16 v9 = 1582;
  __int16 v10 = a2;
  if (!H16ISP::H16ISPDevice::ISP_SendCommand(a1, v8, 0x38u, 0, 0xFFFFFFFF))
  {
    long long v7 = *(_OWORD *)v12;
    *a3 = v11;
    a3[1] = v7;
    double result = *(double *)&v12[12];
    *(_OWORD *)((char *)a3 + 28) = *(_OWORD *)&v12[12];
  }
  return result;
}

uint64_t ___ZN6H16ISP19H16ISPFrameReceiver20ProcessFrameMetadataEP10__CVBufferPyNS_33H16ISPFrameReceiverBufferPoolTypeEbPh_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  notify_set_state(*(_DWORD *)(v2 + 500), *(__int16 *)(a1 + 68));
  uint64_t result = notify_post(*(const char **)(v2 + 488));
  if (*(unsigned char *)(a1 + 70))
  {
    if (*(unsigned char *)(v2 + 536))
    {
      notify_set_state(*(_DWORD *)(v2 + 540), *(int *)(a1 + 40));
      uint64_t result = notify_post(*(const char **)(v2 + 528));
    }
    if (*(unsigned char *)(v2 + 552))
    {
      notify_set_state(*(_DWORD *)(v2 + 556), *(int *)(a1 + 44));
      uint64_t result = notify_post(*(const char **)(v2 + 544));
    }
    if (*(unsigned char *)(v2 + 568))
    {
      notify_set_state(*(_DWORD *)(v2 + 572), *(int *)(a1 + 48));
      uint64_t result = notify_post(*(const char **)(v2 + 560));
    }
    if (*(unsigned char *)(v2 + 584))
    {
      notify_set_state(*(_DWORD *)(v2 + 588), *(int *)(a1 + 52));
      uint64_t result = notify_post(*(const char **)(v2 + 576));
    }
    if (*(unsigned char *)(v2 + 600))
    {
      notify_set_state(*(_DWORD *)(v2 + 604), *(int *)(a1 + 56));
      uint64_t result = notify_post(*(const char **)(v2 + 592));
    }
    if (*(unsigned char *)(v2 + 616))
    {
      notify_set_state(*(_DWORD *)(v2 + 620), *(int *)(a1 + 60));
      uint64_t result = notify_post(*(const char **)(v2 + 608));
    }
    if (*(unsigned char *)(v2 + 632))
    {
      notify_set_state(*(_DWORD *)(v2 + 636), *(int *)(a1 + 64));
      uint64_t v4 = *(const char **)(v2 + 624);
      return notify_post(v4);
    }
  }
  return result;
}

uint64_t H16ISPCaptureStreamStartInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v374 = *MEMORY[0x263EF8340];
  v294 = (void *)v2;
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v302 = (char *)CMBaseObjectGetDerivedStorage();
  if ((v302[107] & 0x40) != 0)
  {
    uint64_t v4 = *(void *)(DerivedStorage + 4480);
    if (v4)
    {
      *(void *)(v4 + 8) = mach_absolute_time();
      *(unsigned char *)(DerivedStorage + 4488) = 1;
    }
    else
    {
      uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v5 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }
  }
  v303 = (unsigned int *)(DerivedStorage + 132);
  kdebug_trace();
  uint64_t v13 = *((void *)v302 + 3);
  v304 = (H16ISP::H16ISPDevice **)(v302 + 24);
  if (*(unsigned char *)(DerivedStorage + 3672)) {
    __int16 v14 = 1;
  }
  else {
    __int16 v14 = *(unsigned char *)(DerivedStorage + 3675) != 0;
  }
  __int16 v299 = v14;
  uint64_t v295 = *(void *)(v13 + 4384);
  __int16 v15 = *(unsigned char *)(DerivedStorage + 3673) || *(unsigned char *)(DerivedStorage + 3674) || *(unsigned char *)(DerivedStorage + 3676) != 0;
  __int16 v300 = v15;
  int v16 = *(unsigned __int8 *)(*(void *)(v13 + 4384) + 96 * *(unsigned int *)(DerivedStorage + 132) + 64);
  BOOL hasSensorType = H16ISP::H16ISPDevice::hasSensorType(v13, 1785950322);
  BOOL v18 = v16 != 0;
  if (hasSensorType)
  {
    BOOL v19 = v16 != 0;
    if (IsJasperSyncGroup(*v304, *(CFArrayRef *)(DerivedStorage + 3888)))
    {
      int NumberOfActiveChannels = GetNumberOfActiveChannels(*(const __CFArray **)(DerivedStorage + 3888));
      BOOL v18 = 0;
      BOOL v21 = NumberOfActiveChannels == 0;
    }
    else
    {
      BOOL v21 = 0;
      BOOL v18 = v19;
    }
  }
  else
  {
    BOOL v21 = 0;
  }
  BOOL v296 = v21;
  BOOL v297 = v18;
  int v301 = v18 || v21;
  int v293 = 0;
  if (!*(unsigned char *)(DerivedStorage + 752)
    && !*(unsigned char *)(DerivedStorage + 952)
    && !*(unsigned char *)(DerivedStorage + 1152)
    && !*(unsigned char *)(DerivedStorage + 1352)
    && !*(unsigned char *)(DerivedStorage + 1552)
    && !*(unsigned char *)(DerivedStorage + 2552)
    && !*(unsigned char *)(DerivedStorage + 2280)
    && !*(unsigned char *)(DerivedStorage + 2080)
    && !*(void *)(DerivedStorage + 4344)
    && !*(void *)(DerivedStorage + 4360)
    && !*(void *)(DerivedStorage + 4336))
  {
    char v65 = *(void **)(DerivedStorage + 4456);
    if (!v65 || !*v65 && !v65[14]) {
      int v293 = 1;
    }
  }
  CFArrayRef v22 = *(const __CFArray **)(DerivedStorage + 3888);
  int v23 = v301;
  if (!v22) {
    int v23 = 1;
  }
  if (v23 == 1)
  {
    if (!*(void *)(DerivedStorage + 4240))
    {
      memset(outputStruct, 0, 32);
      *(_DWORD *)&unsigned char outputStruct[16] = 1065353216;
      int valuePtr = -1;
      if (v22)
      {
        unint64_t v25 = 0;
        uint64_t v26 = &_os_log_internal;
        while (v25 < CFArrayGetCount(v22))
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 3888), v25);
          FigCaptureStreamGetFigBaseObject();
          uint64_t v27 = CMBaseObjectGetDerivedStorage();
          uint64_t v29 = v27;
          if (*(unsigned char *)(v27 + 3784))
          {
            if ((*(unsigned char *)(v27 + 3936) & 0x28) != 0)
            {
              LODWORD(buf) = 0;
              ProjectorVersiouint64_t n = H16ISP::ProjectorManager::getProjectorVersion(*v304, (H16ISP::H16ISPDevice *)*(unsigned int *)(v27 + 132), &buf, (int *)&buf, &valuePtr, v28);
              if (ProjectorVersion)
              {
                uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v26)
                {
                  uint64_t v31 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
                }
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CFNumberRef number = 136315394;
                  *(void *)&number[4] = "CreateFaceTrackingNode";
                  *(_WORD *)&number[12] = 1024;
                  *(_DWORD *)&number[14] = ProjectorVersion;
                  _os_log_error_impl(&dword_24680F000, v31, OS_LOG_TYPE_ERROR, "%s - Error retrieving projector version res=0x%08X\n\n", number, 0x12u);
                }
              }
            }
          }
          if (*(unsigned char *)(v29 + 812))
          {
            *(void *)CFNumberRef number = *(unsigned int *)(v29 + 132);
            std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>((uint64_t)outputStruct, (unsigned int *)number, number);
          }
          else if (*(unsigned char *)(v29 + 1012))
          {
            *(_DWORD *)CFNumberRef number = *(_DWORD *)(v29 + 132);
            *(_DWORD *)&number[4] = 10;
            std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>((uint64_t)outputStruct, (unsigned int *)number, number);
          }
          else if (*(unsigned char *)(v29 + 1212))
          {
            *(_DWORD *)CFNumberRef number = *(_DWORD *)(v29 + 132);
            *(_DWORD *)&number[4] = 6;
            std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>((uint64_t)outputStruct, (unsigned int *)number, number);
          }
          ++v25;
          CFArrayRef v22 = *(const __CFArray **)(DerivedStorage + 3888);
        }
      }
      else if (*(unsigned char *)(DerivedStorage + 812))
      {
        *(void *)CFNumberRef number = *v303;
        std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>((uint64_t)outputStruct, (unsigned int *)number, number);
      }
      else if (*(unsigned char *)(DerivedStorage + 1012))
      {
        *(_DWORD *)CFNumberRef number = *v303;
        *(_DWORD *)&number[4] = 10;
        std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>((uint64_t)outputStruct, (unsigned int *)number, number);
      }
      else if (*(unsigned char *)(DerivedStorage + 1212))
      {
        *(_DWORD *)CFNumberRef number = *v303;
        *(_DWORD *)&number[4] = 6;
        std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>((uint64_t)outputStruct, (unsigned int *)number, number);
      }
      if (*(void *)&outputStruct[12]) {
        operator new();
      }
      if (dword_26B11BA88)
      {
        *(void *)CFNumberRef number = *v303;
        std::__hash_table<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::__unordered_map_hasher<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::hash<eCIspDpcTypes>,std::equal_to<eCIspDpcTypes>,true>,std::__unordered_map_equal<eCIspDpcTypes,std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>,std::equal_to<eCIspDpcTypes>,std::hash<eCIspDpcTypes>,true>,std::allocator<std::__hash_value_type<eCIspDpcTypes,FigCaptureStreamDefectivePixelsType>>>::__emplace_unique_key_args<eCIspDpcTypes,std::pair<eCIspDpcTypes const,FigCaptureStreamDefectivePixelsType> const&>((uint64_t)outputStruct, (unsigned int *)number, number);
        operator new();
      }
      operator new();
    }
    uint64_t v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v24 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_78;
  }
  uint64_t v32 = *(void **)(DerivedStorage + 4240);
  if (v32)
  {
    *(void *)uint64_t outputStruct = 0;
    *(void *)CFNumberRef number = 0;
    H16ISP::H16ISPFilterGraphManager::GetNode(v32, 6, (H16ISP::H16ISPFilterGraphNode **)outputStruct);
    H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(DerivedStorage + 4240), 8, (H16ISP::H16ISPFilterGraphNode **)number);
    if (*(void *)outputStruct | *(void *)number)
    {
      if (*(_DWORD *)(DerivedStorage + 648)) {
        __int16 v33 = 1;
      }
      else {
        __int16 v33 = v300;
      }
      __int16 v34 = v299;
      if (!*(_DWORD *)(DerivedStorage + 648)) {
        __int16 v34 = 1;
      }
      __int16 v299 = v34;
      __int16 v300 = v33;
    }
  }
  if (H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 13, v300)
    || H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 21, v299 & (unsigned __int16)(v300 ^ 1)))
  {
    goto LABEL_78;
  }
  int v39 = (unsigned __int16)*(_DWORD *)(DerivedStorage + 132);
  if (*(void *)(DerivedStorage + 3888) && !*(unsigned char *)(DerivedStorage + 3908)) {
    v39 |= 0x80000000;
  }
  uint64_t v35 = 3758097122;
  if (*(unsigned char *)(DerivedStorage + 4127) && !*(unsigned char *)(DerivedStorage + 4128)) {
    goto LABEL_79;
  }
  if (*(unsigned char *)(DerivedStorage + 4041))
  {
    H16ISP::H16ISPDevice::DisableTorch(*((H16ISP::H16ISPDevice **)v302 + 3), *(_DWORD *)(DerivedStorage + 132));
    H16ISP::H16ISPDevice::ISP_EnableSensorPower(*((H16ISP::H16ISPDevice **)v302 + 3), *v303, 0, 0);
    uint64_t v40 = *((void *)v302 + 25);
    if (v40)
    {
      *(_DWORD *)uint64_t outputStruct = 101;
      LOBYTE(outputStruct[4]) = 0;
      H16ISP::H16ISPServicesRemote::SetProperty(v40, (xpc_object_t *)outputStruct);
    }
    else
    {
      id v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        id v41 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t outputStruct = 136315138;
        *(void *)&void outputStruct[2] = "H16ISPCaptureStreamStartInternal";
        _os_log_impl(&dword_24680F000, v41, OS_LOG_TYPE_INFO, "%s - Could not set strobe state\n", (uint8_t *)outputStruct, 0xCu);
      }
    }
  }
  *(_WORD *)(DerivedStorage + 404pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v42 = GetNumberOfActiveChannels(*((const __CFArray **)v302 + 15));
  CFArrayRef v43 = *(const __CFArray **)(DerivedStorage + 3888);
  if (v43)
  {
    int v44 = GetNumberOfActiveChannels(v43);
    int v45 = v297;
    if (v44) {
      int v45 = 1;
    }
    char v46 = v45 | v296;
    if (v45) {
      int v47 = v44;
    }
    else {
      int v47 = 0;
    }
    if ((v46 & 1) == 0)
    {
      CMTime v48 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CMTime v48 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v48;
      }
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
  }
  else
  {
    int v47 = 0;
  }
  CMTime v49 = (_WORD *)*((void *)v302 + 23);
  if (v49)
  {
    uint64_t v50 = (unsigned __int16)*v49;
    if (!*v49)
    {
LABEL_115:
      unsigned int v53 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned int v53 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v53;
      }
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    unsigned int v51 = v49 + 14;
    while (1)
    {
      int v52 = *v51;
      v51 += 4;
      if (((1 << *v303) & v52) != 0) {
        break;
      }
      if (!--v50) {
        goto LABEL_115;
      }
    }
  }
  else
  {
    BOOL v54 = v42 == v47 && *(void *)(DerivedStorage + 3888) != 0;
    if (!v54 && v42)
    {
LABEL_79:
      if (*(void *)(DerivedStorage + 136))
      {
        id v36 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          id v36 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v36;
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureStreamStartInternal();
        }
        GraphTeardown(DerivedStorage, v301);
        H16ISP::DestroyH16ISPFrameReceiver(*(H16ISP **)(DerivedStorage + 136), v37);
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(*v304, *(_DWORD *)(DerivedStorage + 132), 0, 0);
        *(void *)(DerivedStorage + 136) = 0;
      }
      goto LABEL_85;
    }
  }
  if (*(void *)(DerivedStorage + 3888))
  {
    if (*(_DWORD *)(DerivedStorage + 3904) == -1)
    {
      *(_DWORD *)(DerivedStorage + 3904) = 0;
      if (ApplySlaveConfiguration((uint64_t)v302, DerivedStorage))
      {
LABEL_78:
        uint64_t v35 = 4294954514;
        goto LABEL_79;
      }
    }
  }
  if (H16ISP::H16ISPDevice::EnableFESAutoAdjust(*v304, *v303, 1))
  {
    int v55 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v55 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v55;
    }
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
LABEL_148:
    uint64_t v35 = 0;
    goto LABEL_85;
  }
  if (H16ISP::H16ISPDevice::EnableNewCBAFStats(*v304, *v303, 1))
  {
    int v56 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v56 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v56;
    }
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_148;
  }
  if (H16ISP::H16ISPDevice::EnableFirmwareFocusHint(*v304, *(_DWORD *)(DerivedStorage + 132), *(unsigned char *)(DerivedStorage + 4124)))
  {
    char v57 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      char v57 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v57;
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_148;
  }
  if (H16ISP::H16ISPDevice::EnableSlowSyncFlash(*v304, *v303, byte_26B11BAEC))
  {
    unsigned int v58 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v58 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v58;
    }
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_148;
  }
  if (dword_26B11B88C && H16ISP::H16ISPDevice::WritePropertyValue(*v304, *v303, 2306, 0, 0xFFFFFFFF))
  {
    unsigned int v59 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v59 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v59;
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  if (dword_26B11BA54 != -1
    && H16ISP::H16ISPDevice::WritePropertyValue(*v304, *v303, 514, dword_26B11BA54, 0xFFFFFFFF))
  {
    unsigned int v60 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v60 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v60;
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  if (dword_26B11BA58 != -1
    && H16ISP::H16ISPDevice::EnableStaticLUTForLTM(*v304, *v303, dword_26B11BA58 != 0))
  {
    char v61 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      char v61 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v61;
    }
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  unsigned int v62 = *v303;
  int v63 = gCaptureDeviceCFPrefs[44 * *v303 + 189];
  if (v63 != -1)
  {
    bzero(outputStruct, 0x10uLL);
    void outputStruct[2] = 1870;
    outputStruct[4] = v62;
    *(_DWORD *)&outputStruct[6] = v63;
    if (H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)outputStruct, 0x10u, 0, 0xFFFFFFFF))
    {
      uint64_t v64 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v64 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v64;
      }
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    unsigned int v62 = *v303;
  }
  if (gCaptureDeviceCFPrefs[44 * v62 + 190] != -1)
  {
    if (H16ISP::H16ISPDevice::WritePropertyValue(*v304, v62, 1322, gCaptureDeviceCFPrefs[44 * v62 + 190], 0xFFFFFFFF))
    {
      BOOL v66 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        BOOL v66 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v66;
      }
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    unsigned int v62 = *v303;
  }
  int v67 = gCaptureDeviceCFPrefs[44 * v62 + 191];
  if (v67 != -1)
  {
    if (H16ISP::H16ISPDevice::EnableAPSModeSwitch(*v304, v62, v67 != 0))
    {
      int v68 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v68 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v68;
      }
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    unsigned int v62 = *v303;
  }
  int v69 = gCaptureDeviceCFPrefs[44 * v62 + 193];
  if (v69 != -1)
  {
    if (H16ISP::H16ISPDevice::EnableDACClamp(*v304, v62, v69 != 0))
    {
      uint64_t v70 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v70 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v70;
      }
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    unsigned int v62 = *v303;
  }
  int v71 = gCaptureDeviceCFPrefs[44 * v62 + 194];
  if (v71 != -1)
  {
    if (H16ISP::H16ISPDevice::SetAPSManualOffset(*v304, v62, v71))
    {
      uint64_t v72 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v72 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v72;
      }
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    unsigned int v62 = *v303;
  }
  if (gCaptureDeviceCFPrefs[44 * v62 + 195] != -1)
  {
    if (H16ISP::H16ISPDevice::WritePropertyValue(*v304, v62, 1370, gCaptureDeviceCFPrefs[44 * v62 + 195], 0xFFFFFFFF))
    {
      uint64_t v73 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v73 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v73;
      }
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    unsigned int v62 = *v303;
  }
  if (dword_26B11BAA4 != -1)
  {
    if (H16ISP::H16ISPDevice::WritePropertyValue(*v304, v62, 276, dword_26B11BAA4, 0xFFFFFFFF))
    {
      uint64_t v74 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v74 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v74;
      }
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    unsigned int v62 = *v303;
  }
  if (*(unsigned char *)(DerivedStorage + 4112))
  {
    H16ISP::H16ISPDevice::SetPearlControlMode(*v304, v62, *(unsigned __int8 *)(DerivedStorage + 4114), *(unsigned __int8 *)(DerivedStorage + 4113), byte_26B11BAEA);
    unsigned int v62 = *(_DWORD *)(DerivedStorage + 132);
  }
  int v75 = *(_DWORD *)(v295 + 96 * v62 + 60);
  __int16 v76 = H16ISP::H16ISPDevice::hasSensorType((uint64_t)*v304, 1718186595);
  if (v75 == 2) {
    __int16 v77 = v76;
  }
  else {
    __int16 v77 = 0;
  }
  H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *(_DWORD *)(DerivedStorage + 132), 48, v77);
  H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *(_DWORD *)(DerivedStorage + 132), 34, *(void *)(DerivedStorage + 3888) != 0);
  __int16 v78 = *(unsigned char *)(DerivedStorage + 3680) || *(unsigned char *)(DerivedStorage + 3679) || *(unsigned char *)(DerivedStorage + 3682);
  H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *(_DWORD *)(DerivedStorage + 132), 50, v78);
  if (*(unsigned char *)(DerivedStorage + 2797))
  {
    H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 24, 1);
    H16ISP::H16ISPDevice::SetMetadataRequired(*v304, *v303, 24, 0, 1);
  }
  if (*(unsigned char *)(DerivedStorage + 2795)
    && H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 67, 1))
  {
    int v79 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v79 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v79;
    }
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_78;
  }
  if (*(_DWORD *)(DerivedStorage + 640)) {
    H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 55, 1);
  }
  if (dword_26B11B890) {
    H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 14, 1);
  }
  if (dword_26B11B894) {
    H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 25, 1);
  }
  if (dword_26B11B898) {
    H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 17, 1);
  }
  if (dword_26B11B888)
  {
    H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 19, 1);
    H16ISP::H16ISPDevice::SetMetadataRequired(*v304, *v303, 19, 0, 1);
    H16ISP::H16ISPDevice::SetMetadataRequired(*v304, *v303, 19, 1, 1);
  }
  if (dword_26B11BA4C) {
    H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 26, 1);
  }
  if (dword_26B11BA74) {
    H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 43, 1);
  }
  if (dword_26B11B89C)
  {
    H16ISP::H16ISPDevice::EnableLocalHistogram(*v304, *v303, 1);
    H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 15, 1);
  }
  for (uint64_t i = 0; i != 79; ++i)
  {
    if (gCaptureDeviceCFPrefs[i + 12] == 1)
    {
      H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, i, 1);
      H16ISP::H16ISPDevice::SetMetadataRequired(*v304, *v303, i, 1, 1);
      H16ISP::H16ISPDevice::SetMetadataRequired(*v304, *v303, i, 0, 1);
    }
  }
  unsigned int v81 = dword_26B11B9DC;
  if (dword_26B11B9DC)
  {
    for (int j = 0; j != 47; ++j)
    {
      if ((v81 >> j))
      {
        H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, j + 32, 1);
        H16ISP::H16ISPDevice::SetMetadataRequired(*v304, *v303, j + 32, 1, 1);
        H16ISP::H16ISPDevice::SetMetadataRequired(*v304, *v303, j + 32, 0, 1);
        unsigned int v81 = dword_26B11B9DC;
      }
    }
  }
  char v83 = dword_26B11BA60;
  if (dword_26B11BA60 != -1)
  {
    if (!dword_26B11BA60)
    {
      *(unsigned char *)(DerivedStorage + 140pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
LABEL_269:
      *(unsigned char *)(DerivedStorage + 160pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v83;
      goto LABEL_270;
    }
    if (*(unsigned char *)(DerivedStorage + 1280)) {
      *(unsigned char *)(DerivedStorage + 140pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
    }
    if (*(unsigned char *)(DerivedStorage + 1480))
    {
      char v83 = 1;
      goto LABEL_269;
    }
  }
LABEL_270:
  uint64_t v84 = &gCaptureDeviceCFPrefs[44 * *v303];
  unsigned int v85 = v84[177];
  unsigned int v86 = v84[176];
  if (v85 < 0x100 || v86 <= 0xFF)
  {
    if (v85 > 0xFF) {
      LOBYTE(v85) = v86;
    }
    if (v86 > 0xFF) {
      LOBYTE(v86) = v85;
    }
    H16ISP::H16ISPDevice::SetAEConvergenceSpeed2Way(*v304, *v303, v86, v85);
  }
  if (dword_26B11B878 != -1 || dword_26B11B87C != -1 || dword_26B11B880 != -1 || dword_26B11B884 != -1) {
    H16ISP::H16ISPDevice::SetVISParams(*v304, *v303, dword_26B11B878, dword_26B11B87C, dword_26B11B880, dword_26B11B884);
  }
  if (dword_26B11B9E0 >= 1) {
    H16ISP::H16ISPDevice::WritePropertyValue(*v304, *v303, 2057, 1, 0xFFFFFFFF);
  }
  int v87 = *(_DWORD *)(DerivedStorage + 176);
  switch(v87)
  {
    case -1:
      if (*(unsigned char *)(DerivedStorage + 674))
      {
        unsigned int v88 = *v304;
        int v89 = *(_DWORD *)(DerivedStorage + 132);
        if (*(unsigned char *)(DerivedStorage + 754)) {
          H16ISP::H16ISPDevice::EnableVIS(v88, v89, 1, 1);
        }
        else {
          H16ISP::H16ISPDevice::EnableVIS(v88, v89, 0, 0);
        }
      }
      break;
    case 1:
      H16ISP::H16ISPDevice::EnableVIS(*v304, *v303, 1, 1);
      H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 16, 1);
      H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 18, 1);
      break;
    case 2:
      H16ISP::H16ISPDevice::EnableVIS(*v304, *v303, 1, 0);
      H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 16, 1);
      H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 18, 1);
      break;
    default:
      H16ISP::H16ISPDevice::EnableVIS(*v304, *v303, 0, 0);
      H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 16, 0);
      H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *v303, 18, 0);
      break;
  }
  H16ISP::H16ISPDevice::EnableTileBasedGDC(*v304, *(_DWORD *)(DerivedStorage + 132), *(unsigned char *)(DerivedStorage + 1355), *(unsigned char *)(DerivedStorage + 755), 0, 0);
  if (*(unsigned char *)(DerivedStorage + 1355))
  {
    float v90 = *(float *)(DerivedStorage + 1356);
    if (v90 > 0.0)
    {
      float v91 = *(float *)(DerivedStorage + 756);
LABEL_299:
      H16ISP::H16ISPDevice::SetGDCStrength(*v304, *v303, v91, v90);
      goto LABEL_300;
    }
  }
  if (*(unsigned char *)(DerivedStorage + 755))
  {
    float v91 = *(float *)(DerivedStorage + 756);
    if (v91 > 0.0)
    {
      float v90 = *(float *)(DerivedStorage + 1356);
      goto LABEL_299;
    }
  }
LABEL_300:
  if (*(_DWORD *)(DerivedStorage + 180) != -1)
  {
    H16ISP::H16ISPDevice::SuspendAEHdrRatioUpdate(*v304, *(_DWORD *)(DerivedStorage + 132));
    H16ISP::H16ISPDevice::SetHDRRatioManual(*v304, *(_DWORD *)(DerivedStorage + 132), *(_DWORD *)(DerivedStorage + 180));
  }
  unsigned int v92 = *(_DWORD *)(DerivedStorage + 48);
  unsigned int v93 = *(_DWORD *)(DerivedStorage + 168);
  if (H16ISP::H16ISPDevice::UpdateChannelConfigCache(*v304, *(_DWORD *)(DerivedStorage + 132)))
  {
    unint64_t v94 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v94 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v94;
    }
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  if (v92 >= v93) {
    unsigned int v95 = v93;
  }
  else {
    unsigned int v95 = 0;
  }
  unsigned int v96 = v92 - v95;
  if (H16ISP::H16ISPDevice::GetCameraConfig((uint64_t)*v304, *(_DWORD *)(DerivedStorage + 132), *(_DWORD *)(*(void *)(DerivedStorage + 160) + 120 * v96 + 16), &v332, v356))
  {
    int v97 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v97 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v97;
    }
    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *(_DWORD *)(DerivedStorage + 132), 30, (v357 & 3) != 0);
  H16ISP::H16ISPDevice::EnableMetadataSection(*v304, *(_DWORD *)(DerivedStorage + 132), 54, (_WORD)v341 != 0);
  uint64_t v98 = *(void *)(DerivedStorage + 160);
  uint64_t v99 = v98 + 120 * v96;
  v298 = *(H16ISP::H16ISPFilterGraphNode **)(v99 + 20);
  unint64_t v100 = *(void *)(v99 + 28);
  if (*(_DWORD *)(DerivedStorage + 144) == 1)
  {
    if (*(unsigned char *)(v98 + 120 * v96 + 112)) {
      int v101 = 2;
    }
    else {
      int v101 = 1;
    }
  }
  else
  {
    int v101 = 0;
  }
  if (*(int *)(DerivedStorage + 668) >= 1)
  {
    bzero(outputStruct, 0x10uLL);
    void outputStruct[2] = 292;
    *(_DWORD *)&outputStruct[4] = *v303;
    *(_DWORD *)&outputStruct[6] = 1;
    H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)outputStruct, 0x10u, 0, 0xFFFFFFFF);
  }
  int v102 = *(_DWORD *)(DerivedStorage + 172);
  if (v102 != -1)
  {
    if (v102) {
      H16ISP::H16ISPDevice::EnableFullResLSC(*v304, *v303);
    }
    else {
      H16ISP::H16ISPDevice::DisableFullResLSC(*v304, *v303);
    }
  }
  int v103 = *(_DWORD *)(DerivedStorage + 184);
  if (v103 != -1) {
    H16ISP::H16ISPDevice::EnableFocusPixels(*v304, v39, v103 != 0);
  }
  int v104 = *(_DWORD *)(DerivedStorage + 188);
  if (v104 != -1) {
    H16ISP::H16ISPDevice::EnableContinuousFocus(*v304, v39, v104 != 0, *(unsigned char *)(DerivedStorage + 192));
  }
  int v105 = *(_DWORD *)(DerivedStorage + 220);
  if (v105 != -1)
  {
    if (v105) {
      H16ISP::H16ISPDevice::BinningCompensationStart(*v304, *v303);
    }
    else {
      H16ISP::H16ISPDevice::BinningCompensationStop(*v304, *v303);
    }
  }
  int v106 = *(_DWORD *)(DerivedStorage + 200);
  if (v106 == -1)
  {
    int v107 = *(_DWORD *)(DerivedStorage + 204);
    if (v107 != -1)
    {
      if (v107) {
        H16ISP::H16ISPDevice::StartHighlightRecovery(*v304, *v303);
      }
      else {
        H16ISP::H16ISPDevice::StopHighlightRecovery(*v304, *v303);
      }
    }
  }
  else if (v106)
  {
    H16ISP::H16ISPDevice::StartHighlightRecovery(*v304, *v303);
    H16ISP::H16ISPDevice::StartLocalToneMapping(*v304, *v303);
  }
  else
  {
    H16ISP::H16ISPDevice::StopHighlightRecovery(*v304, *v303);
    H16ISP::H16ISPDevice::StopLocalToneMapping(*v304, *v303);
  }
  unsigned int v108 = *(_DWORD *)(DerivedStorage + 224) - 1;
  if (v108 <= 2) {
    H16ISP::H16ISPDevice::EnableContextSwitching(*v304, *v303, v108);
  }
  if (!*(unsigned char *)(DerivedStorage + 674))
  {
LABEL_370:
    CFDictionaryRef v116 = (int *)(*(void *)(DerivedStorage + 160) + 120 * v96);
    if (H16ISP::H16ISPDevice::SetPrimaryBESConfig(*v304, *(_DWORD *)(DerivedStorage + 132), (unint64_t)v298, v100, (unsigned __int16)v116[1], (unsigned __int16)v116[2], v116[3], v116[1], v116[2], *(_DWORD *)(DerivedStorage + 48) >= *(_DWORD *)(DerivedStorage + 168), v101, 0, 0, 0, 0))
    {
      CFDictionaryRef v117 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFDictionaryRef v117 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v117;
      }
      if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    goto LABEL_375;
  }
  if (*(unsigned char *)(DerivedStorage + 1364))
  {
    CFTypeID v109 = (int *)(DerivedStorage + 1368);
    uint64_t v110 = (int *)(DerivedStorage + 1372);
LABEL_353:
    int v112 = *v109;
    int v111 = *v110;
    goto LABEL_354;
  }
  if (*(unsigned char *)(DerivedStorage + 1564))
  {
    CFTypeID v109 = (int *)(DerivedStorage + 1568);
    uint64_t v110 = (int *)(DerivedStorage + 1572);
    goto LABEL_353;
  }
  LOWORD(v111) = *(unsigned __int8 *)(DerivedStorage + 2364);
  if (*(unsigned char *)(DerivedStorage + 2364))
  {
    CFTypeID v109 = (int *)(DerivedStorage + 2368);
    uint64_t v110 = (int *)(DerivedStorage + 2372);
    goto LABEL_353;
  }
  LOWORD(v112) = 0;
LABEL_354:
  if (H16ISP::H16ISPDevice::SetTimeMachineDepth(*v304, *v303, v112, v111))
  {
    uint64_t v113 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v113 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v113;
    }
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_148;
  }
  char v114 = *(unsigned char *)(DerivedStorage + 752)
      || *(unsigned char *)(DerivedStorage + 952)
      || *(unsigned char *)(DerivedStorage + 1152)
      || *(unsigned char *)(DerivedStorage + 3608)
      || *(unsigned char *)(DerivedStorage + 2080) != 0;
  if (H16ISP::H16ISPDevice::SetRawPreviewConfig(*v304, *v303, v114))
  {
    unint64_t v115 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unint64_t v115 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v115;
    }
    if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_148;
  }
  if (!*(unsigned char *)(DerivedStorage + 674)) {
    goto LABEL_370;
  }
LABEL_375:
  unsigned int v331 = 0;
  H16ISP::H16ISPDevice::ISP_SelectBestMIPIFrequencyIndex(*((H16ISP::H16ISPDevice **)v302 + 3), *v303, &v331);
  unsigned int v330 = 0;
  H16ISP::H16ISPDevice::ISP_SelectBestChargePumpFrequencyIndex(*((H16ISP::H16ISPDevice **)v302 + 3), *v303, &v330);
  unsigned int v329 = 0;
  H16ISP::H16ISPDevice::ISP_SelectBestPixClockFrequencyIndex(*((H16ISP::H16ISPDevice **)v302 + 3), *v303, &v329);
  if (v302[224])
  {
    H16ISP::H16ISPDevice::SetMIPIFrequencyIndex(*v304, *v303, v331);
    if (v330 != -1) {
      H16ISP::H16ISPDevice::SetChargePumpFrequencyIndex(*v304, *v303, v330);
    }
    unsigned int v118 = v329;
    if (v329 != -1)
    {
      unsigned int v119 = *v303;
      if (*(_DWORD *)(v295 + 96 * *v303 + 72))
      {
        if (*(void *)(DerivedStorage + 3888))
        {
          if (*(unsigned char *)(v295 + 96 * v119 + 64)) {
            *((_DWORD *)v302 + 57) = v329;
          }
          else {
            unsigned int v118 = *((_DWORD *)v302 + 57);
          }
        }
        H16ISP::H16ISPDevice::SetPixClockFrequencyIndex(*v304, v119, v118);
      }
    }
    bzero(outputStruct, 0x84uLL);
    if (!H16ISP::H16ISPDevice::ISP_GetCurrentToFClockBanks((uint64_t)*v304, *v303, outputStruct)) {
      H16ISP::H16ISPDevice::ISP_SetCurrentToFClockBanks((uint64_t)*v304, *v303, outputStruct);
    }
  }
  if (!*(unsigned char *)(DerivedStorage + 3784) && *(_DWORD *)(v295 + 96 * *v303 + 16) != 1785950322) {
    ApplyColorSpaceConfiguration((uint64_t)v302, DerivedStorage);
  }
  if (*(_DWORD *)(DerivedStorage + 216) != -1) {
    H16ISP::H16ISPDevice::SetAWBScheme(*v304, *v303, *(_DWORD *)(DerivedStorage + 216));
  }
  int v120 = *(_DWORD *)(DerivedStorage + 196);
  if (v120 != -1)
  {
    if (v120) {
      H16ISP::H16ISPDevice::SNFStart(*v304, *v303);
    }
    else {
      H16ISP::H16ISPDevice::SNFStop(*v304, *v303);
    }
  }
  int v121 = *(_DWORD *)(DerivedStorage + 632);
  if (v121 != -1 && !*v303 && H16ISP::H16ISPDevice::EnableHighFrameRateAF(*v304, 0, v121 != 0))
  {
    CFStringRef v140 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFStringRef v140 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v140;
    }
    if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
  }
  H16ISP::H16ISPDevice::AttachOldRawToPreview(*v304, *(_DWORD *)(DerivedStorage + 132), 0);
  if (*(unsigned char *)(DerivedStorage + 80) == 1)
  {
    if (gCaptureDeviceCFPrefs[0] || *(unsigned char *)(DerivedStorage + 4126)) {
      int v122 = HIDWORD(v335);
    }
    else {
      int v122 = v335;
    }
  }
  else
  {
    int v122 = -1;
  }
  uint64_t v123 = *v304;
  int v124 = *v303;
  if (dword_26B11B9E4)
  {
    H16ISP::H16ISPDevice::SetAEBracketingWaitForFocusParams(v123, v124, 1, 1000 * dword_26B11B9E4);
    unsigned int v125 = dword_26B11B9E4 / 0x3E8u + 4;
  }
  else
  {
    H16ISP::H16ISPDevice::SetAEBracketingWaitForFocusParams(v123, v124, 0, 0);
    unsigned int v125 = 4;
  }
  *(_DWORD *)(DerivedStorage + 3704) = v125;
  uint64_t v126 = *(void *)(DerivedStorage + 160);
  if (*(unsigned char *)(v126 + 120 * v96 + 36))
  {
    *(void *)(DerivedStorage + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(v126 + 120 * v96 + 40);
  }
  else
  {
    unsigned int v127 = DWORD2(v340);
    *(void *)(DerivedStorage + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *((void *)&v340 + 1);
    if (BYTE12(v339)) {
      *(_DWORD *)(DerivedStorage + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v127 >> 1;
    }
  }
  CFTypeID v128 = (uint64_t *)(DerivedStorage + 136);
  v129 = *v304;
  *(void *)CFNumberRef number = DerivedStorage + 136;
  *(void *)&number[8] = v129;
  *(_DWORD *)&number[16] = v356[26];
  int v359 = v356[30];
  int v130 = *(_DWORD *)(DerivedStorage + 128);
  int v360 = *(_DWORD *)(DerivedStorage + 132);
  int v361 = v356[25];
  if (*(unsigned char *)(DerivedStorage + 81) == 1) {
    int v131 = v356[29];
  }
  else {
    int v131 = -1;
  }
  int v362 = v131;
  if (*(unsigned char *)(DerivedStorage + 674))
  {
    if (v130 <= *(_DWORD *)(DerivedStorage + 744)) {
      int v130 = *(_DWORD *)(DerivedStorage + 744);
    }
    if (v130 <= *(_DWORD *)(DerivedStorage + 944)) {
      int v130 = *(_DWORD *)(DerivedStorage + 944);
    }
    if (v130 <= *(_DWORD *)(DerivedStorage + 1344)) {
      int v130 = *(_DWORD *)(DerivedStorage + 1344);
    }
    if (v130 <= *(_DWORD *)(DerivedStorage + 1544)) {
      int v130 = *(_DWORD *)(DerivedStorage + 1544);
    }
    if (v130 <= *(_DWORD *)(DerivedStorage + 1144)) {
      int v130 = *(_DWORD *)(DerivedStorage + 1144);
    }
    if (v130 <= *(_DWORD *)(DerivedStorage + 2344)) {
      int v130 = *(_DWORD *)(DerivedStorage + 2344);
    }
    if (v130 <= *(_DWORD *)(DerivedStorage + 2544)) {
      int v130 = *(_DWORD *)(DerivedStorage + 2544);
    }
  }
  int v363 = v130;
  v368 = H16ISPEPipeReceivedProc;
  v369 = v294;
  int v132 = *(unsigned __int8 *)(DerivedStorage + 84);
  v133 = MyH16ISPFrameReceivedFilterGraphEntryProc;
  if (!*(void *)(DerivedStorage + 4240)) {
    v133 = MyH16ISPFrameReceivedProc;
  }
  v364 = v133;
  v365 = v294;
  v366 = MyH16ISPFrameReceiverMessageProc;
  v367 = v294;
  if (v132) {
    uint64_t v134 = DerivedStorage + 84;
  }
  else {
    uint64_t v134 = 0;
  }
  uint64_t v370 = v134;
  float v135 = *(float *)(DerivedStorage + 52);
  if (v135 > *(float *)(DerivedStorage + 60))
  {
    CFDictionaryRef v136 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFDictionaryRef v136 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v136;
    }
    if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
    {
      int v147 = *(_DWORD *)(DerivedStorage + 132);
      double v148 = *(float *)(DerivedStorage + 52);
      double v149 = *(float *)(DerivedStorage + 60);
      *(_DWORD *)uint64_t outputStruct = 136315906;
      *(void *)&void outputStruct[2] = "H16ISPCaptureStreamStartInternal";
      outputStruct[6] = 1024;
      *(_DWORD *)&outputStruct[7] = v147;
      outputStruct[9] = 2048;
      *(double *)&outputStruct[10] = v148;
      outputStruct[14] = 2048;
      *(double *)&outputStruct[15] = v149;
      _os_log_error_impl(&dword_24680F000, v136, OS_LOG_TYPE_ERROR, "%s - CH%d maxFrameRate %.3f is larger than maxAllowedFrameRate %.3f\n\n", (uint8_t *)outputStruct, 0x26u);
    }
    uint64_t v35 = 4294954516;
    goto LABEL_79;
  }
  unsigned int v371 = vcvtms_u32_f32(v135 * 256.0);
  int v137 = *(_DWORD *)(DerivedStorage + 4044);
  unsigned int v372 = vcvtps_u32_f32(*(float *)(DerivedStorage + 56) * 256.0);
  int v373 = v137;
  if (ALSModeForStreaming(DerivedStorage, (uint64_t)v302) == 2
    && H16ISP::H16ISPDevice::EnableALS(*v304, *v303, 2))
  {
    v138 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v138 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v138;
    }
    uint64_t v35 = 3758097084;
    if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  *(_DWORD *)(DerivedStorage + 3764) = *(_DWORD *)(DerivedStorage + 3760);
  if (H16ISP::H16ISPDevice::GetErrorCount(*v304, *(_DWORD *)(DerivedStorage + 132), 2, (unsigned int *)(DerivedStorage + 4312)))
  {
    v139 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v139 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v139;
    }
    uint64_t v35 = 3758097084;
    if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  if (H16ISP::CreateH16ISPFrameReceiver((uint64_t)number))
  {
    uint64_t v141 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v141 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v141;
    }
    if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  if (H16ISP::H16ISPDevice::isSensorType((uint64_t)*v304, *v303, 1785950322)) {
    H16ISP::H16ISPFrameReceiver::SendFWStartCmdBeforeDeliveringBuffers(*v128, 0);
  }
  *(_WORD *)(*(void *)(DerivedStorage + 136) + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_WORD *)(DerivedStorage + 2700);
  if (*(unsigned char *)(DerivedStorage + 3794))
  {
    *(unsigned char *)(DerivedStorage + 3794) = 0;
    if (H16ISP::H16ISPDevice::EnableVibeMitigation(*v304, *(_DWORD *)(DerivedStorage + 132), 0))
    {
      v142 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v142 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v142;
      }
      if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
    }
  }
  if (*(unsigned char *)(DerivedStorage + 4127) && *(unsigned char *)(DerivedStorage + 4128)) {
    H16ISP::H16ISPFrameReceiver::SendFWStartCmdBeforeDeliveringBuffers(*v128, 0);
  }
  if ((v293 & 1) == 0) {
    H16ISP::H16ISPFrameReceiver::SendFWStartCmdBeforeDeliveringBuffers(*v128, 0);
  }
  if (*(unsigned char *)(DerivedStorage + 674))
  {
    if (*(unsigned char *)(DerivedStorage + 8)) {
      v293 &= !H16ISP::H16ISPDevice::isSensorType((uint64_t)*v304, *v303, 1785950322);
    }
    uint64_t v143 = *v304;
    unsigned int v144 = *(_DWORD *)(DerivedStorage + 132);
    if (*(unsigned char *)(DerivedStorage + 4114))
    {
      char v145 = v293 & ~H16ISP::H16ISPDevice::isSensorType((uint64_t)v143, v144, 1718186595);
      uint64_t v143 = *v304;
      unsigned int v144 = *v303;
      if (v145)
      {
LABEL_480:
        __int16 v146 = 1;
        goto LABEL_489;
      }
    }
    else if (v293)
    {
      goto LABEL_480;
    }
    __int16 v146 = *(unsigned char *)(DerivedStorage + 4126) != 0;
LABEL_489:
    if (H16ISP::H16ISPDevice::EnableLocalRawBufferMode(v143, v144, v146))
    {
      v152 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v152 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v152;
      }
      if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    __int16 v153 = *(unsigned char *)(DerivedStorage + 1353)
        || *(unsigned char *)(DerivedStorage + 1553)
        || *(unsigned char *)(DerivedStorage + 2353) != 0;
    if (H16ISP::H16ISPDevice::EnableLocalThumbnailRawBufferMode(*v304, *v303, v153 ^ 1u))
    {
      v154 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v154 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v154;
      }
      if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
    if (*(unsigned char *)(DerivedStorage + 1680))
    {
      if (BYTE14(v337)) {
        __int16 v156 = 2;
      }
      else {
        __int16 v156 = 1;
      }
      uint64_t v157 = H16ISP::H16ISPDevice::EnableFullResCapture(*v304, *v303, v156);
      if (v157)
      {
        v158 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v158 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v158;
        }
        if (!os_log_type_enabled(v158, OS_LOG_TYPE_ERROR)) {
          goto LABEL_648;
        }
        goto LABEL_515;
      }
    }
    else
    {
      uint64_t v157 = H16ISP::H16ISPDevice::EnableFullResCapture(*v304, *v303, 0);
      if (v157)
      {
        unint64_t v162 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          unint64_t v162 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v162;
        }
        if (!os_log_type_enabled(v162, OS_LOG_TYPE_ERROR)) {
          goto LABEL_648;
        }
LABEL_515:
        H16ISPCaptureStreamStartInternal();
LABEL_648:
        uint64_t v35 = v157;
        goto LABEL_79;
      }
    }
    uint64_t v163 = ConfigSensorFormat((uint64_t)v302, DerivedStorage);
    if (v163)
    {
      int v164 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v164 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v164;
      }
      if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
    }
    if (!(_WORD)v341)
    {
LABEL_609:
      if (*(unsigned char *)(DerivedStorage + 1080)) {
        int v184 = 2;
      }
      else {
        int v184 = 3;
      }
      if (H16ISP::H16ISPDevice::ISP_PreviewStreamSet(*v304, *(_DWORD *)(DerivedStorage + 132), v184))
      {
        uint64_t v185 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v185 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v185;
        }
        if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureStreamStartInternal();
        }
        goto LABEL_78;
      }
      if (*(unsigned char *)(DerivedStorage + 8) && H16ISP::H16ISPDevice::isSensorType((uint64_t)*v304, *v303, 1785950322))
      {
        v321[10] = v342;
        v321[11] = v343;
        v321[12] = v344;
        int v322 = v345;
        v321[6] = v338;
        v321[7] = v339;
        v321[8] = v340;
        v321[9] = v341;
        v321[2] = v334;
        v321[3] = v335;
        v321[4] = v336;
        v321[5] = v337;
        v321[0] = v332;
        v321[1] = v333;
        AddRawPoolToFrameReceiver(DerivedStorage, (uint64_t)v302, (uint64_t)v321);
      }
      if (*(void *)(DerivedStorage + 4344)
        || *(void *)(DerivedStorage + 4360)
        || *(void *)(DerivedStorage + 4336)
        || (v284 = *(void **)(DerivedStorage + 4456)) != 0 && *v284)
      {
        v319[10] = v342;
        v319[11] = v343;
        v319[12] = v344;
        int v320 = v345;
        v319[6] = v338;
        v319[7] = v339;
        v319[8] = v340;
        v319[9] = v341;
        v319[2] = v334;
        v319[3] = v335;
        v319[4] = v336;
        v319[5] = v337;
        v319[0] = v332;
        v319[1] = v333;
        AddRawPoolToFrameReceiver(DerivedStorage, (uint64_t)v302, (uint64_t)v319);
      }
      if (!*(void *)(DerivedStorage + 4408))
      {
        uint64_t v186 = *(void *)(DerivedStorage + 4456);
        if (!v186) {
          goto LABEL_661;
        }
        if (!*(void *)(v186 + 56))
        {
LABEL_629:
          if (*(void *)(v186 + 112)) {
            AddRawPlusPoolToFrameReceiver(DerivedStorage);
          }
          goto LABEL_661;
        }
      }
      AddHiResRawPoolToFrameReceiver(DerivedStorage);
      uint64_t v186 = *(void *)(DerivedStorage + 4456);
      if (v186) {
        goto LABEL_629;
      }
LABEL_661:
      if (*(unsigned char *)(DerivedStorage + 680)) {
        ActivatePrimaryScalerOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 880)) {
        ActivateSecondaryScalerOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 1080)) {
        ActivateIntermediateTapOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 1280)) {
        ActivateStillImageOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 1480)) {
        ActivateStillImageIntermediateTapOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 1680)) {
        ActivateStillImageQuadraOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 2080)) {
        ActivateRawOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 2280)) {
        ActivateStillImageRawOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 2480)) {
        ActivateVisPipeOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 3608)) {
        ActivatePointCloudOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (*(unsigned char *)(DerivedStorage + 2680)) {
        ActivateMetadataOutputInFrameReceiver(DerivedStorage, (uint64_t)v302);
      }
      if (H16ISP::H16ISPDevice::isSensorType((uint64_t)*v304, *v303, 1718186595)
        && *(unsigned char *)(DerivedStorage + 3976)
        && !*(unsigned char *)(*v128 + 453))
      {
        v317[10] = v342;
        v317[11] = v343;
        v317[12] = v344;
        int v318 = v345;
        v317[6] = v338;
        v317[7] = v339;
        v317[8] = v340;
        v317[9] = v341;
        v317[2] = v334;
        v317[3] = v335;
        v317[4] = v336;
        v317[5] = v337;
        v317[0] = v332;
        v317[1] = v333;
        AddRawPoolToFrameReceiver(DerivedStorage, (uint64_t)v302, (uint64_t)v317);
      }
      if (*(unsigned char *)(DerivedStorage + 4114)
        && H16ISP::H16ISPDevice::isSensorType((uint64_t)*v304, *v303, 1718186595)
        && !*(unsigned char *)(*v128 + 453))
      {
        v315[10] = v342;
        v315[11] = v343;
        v315[12] = v344;
        int v316 = v345;
        v315[6] = v338;
        v315[7] = v339;
        v315[8] = v340;
        v315[9] = v341;
        v315[2] = v334;
        v315[3] = v335;
        v315[4] = v336;
        v315[5] = v337;
        v315[0] = v332;
        v315[1] = v333;
        AddRawPoolToFrameReceiver(DerivedStorage, (uint64_t)v302, (uint64_t)v315);
      }
      uint64_t v194 = 0;
      char v195 = 0;
      outputStruct[0] = *(_DWORD *)(DerivedStorage + 132);
      do
      {
        unsigned int v196 = vcvts_n_s32_f32(*(float *)(DerivedStorage + 3684 + 4 * v194), 0xAuLL);
        outputStruct[v194 + 1] = v196;
        v195 |= v196 > 0x400;
        ++v194;
      }
      while (v194 != 3);
      if ((v195 & 1) != 0 && H16ISP::H16ISPDevice::SetMultiCamZoomFactor(*v304, 1u, outputStruct))
      {
        CVPixelBufferRef v197 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CVPixelBufferRef v197 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v197;
        }
        if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureStreamStartInternal();
        }
      }
      goto LABEL_539;
    }
    if (*(unsigned char *)(DerivedStorage + 1280) && *(unsigned char *)(DerivedStorage + 1364))
    {
      v165 = (unsigned __int8 *)(DerivedStorage + 1464);
    }
    else
    {
      if (!*(unsigned char *)(DerivedStorage + 1480) || !*(unsigned char *)(DerivedStorage + 1564))
      {
        int v177 = 0;
        BOOL v176 = 1;
LABEL_593:
        if (*(unsigned char *)(DerivedStorage + 2280) && *(unsigned char *)(DerivedStorage + 2364))
        {
          BOOL v176 = *(unsigned char *)(DerivedStorage + 2464) == 0;
          int v177 = *(_DWORD *)(DerivedStorage + 1468);
        }
        if (gCaptureDeviceCFPrefs[44 * *v303 + 201] == -1) {
          int v181 = v176;
        }
        else {
          int v181 = gCaptureDeviceCFPrefs[44 * *v303 + 201];
        }
        if (H16ISP::H16ISPDevice::SetCameraControl(*v304, *v303, 3, v181))
        {
          uint64_t v182 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v182 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v182;
          }
          if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR)) {
            H16ISPCaptureStreamStartInternal();
          }
          goto LABEL_78;
        }
        if (H16ISP::H16ISPDevice::SetCameraControl(*v304, *v303, 4, v177))
        {
          v183 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v183 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v183;
          }
          if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR)) {
            H16ISPCaptureStreamStartInternal();
          }
          goto LABEL_78;
        }
        goto LABEL_609;
      }
      v165 = (unsigned __int8 *)(DerivedStorage + 1664);
    }
    BOOL v176 = *v165 == 0;
    int v177 = *(_DWORD *)(DerivedStorage + 1468);
    goto LABEL_593;
  }
  uint64_t v150 = *(void *)(DerivedStorage + 136);
  long long v327 = 0u;
  long long v328 = 0u;
  if (H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v150, 0, SDWORD1(v333)))
  {
    v151 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v151 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v151;
    }
    if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  if (H16ISP::H16ISPDevice::SetScalerChromaSampleOffset(*v304, *(_DWORD *)(DerivedStorage + 132), *(_DWORD *)(DerivedStorage + 144) == 0, 1, 0))
  {
    CFTypeID v155 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v155 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v155;
    }
    if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_78;
  }
  if (v122 != -1)
  {
    uint64_t v159 = *(void *)(DerivedStorage + 136);
    long long v325 = 0u;
    long long v326 = 0u;
    if (H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v159, 1, v122)
      || (uint64_t v160 = *(void *)(DerivedStorage + 136),
          long long v323 = 0u,
          long long v324 = 0u,
          H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v160, 29, v342)))
    {
      uint64_t v161 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v161 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v161;
      }
      if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_79;
    }
  }
  uint64_t v163 = 0;
LABEL_539:
  if (*(_DWORD *)(DerivedStorage + 3952) == 1)
  {
    *(_DWORD *)uint64_t outputStruct = 0;
    int valuePtr = 0;
    LODWORD(buf) = 0;
    uint64_t v314 = 0;
    BYTE4(v309) = 0;
    H16ISP::H16ISPFrameReceiver::getOutputSize((void *)*v128, outputStruct, &valuePtr, &buf, (_DWORD *)&v314 + 1, &v314, (unsigned char *)&v309 + 4);
    if ((v314 - 31) >= 6 && v314 != 1) {
      *(_DWORD *)(DerivedStorage + 3952) = 0;
    }
    if (H16ISP::H16ISPDevice::SetProResSharpeningTuning(*v304, *(_DWORD *)(DerivedStorage + 132), *(_DWORD *)(DerivedStorage + 3952) != 0))
    {
      int v166 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v166 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v166;
      }
      if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      *(_DWORD *)(DerivedStorage + 3952) = 0;
    }
  }
  unsigned int v167 = *v303;
  int v168 = *(_DWORD *)(v295 + 96 * *v303 + 16);
  if (v168 == 1919246706 || v168 == 1919251564 || v168 == 1919251319)
  {
    BOOL v172 = v168 == 1919246706 && dword_26B11BA50 == 2;
    BOOL v173 = dword_26B11BA50 == 1 && v168 == 1919251564;
    int v174 = *(_DWORD *)(DerivedStorage + 3936);
    if (!v173 && !v172)
    {
      if (!v174) {
        goto LABEL_583;
      }
    }
    else
    {
      *(_DWORD *)(DerivedStorage + 3936) = v174 | 5;
      if (dword_26B11BA64) {
        *(_DWORD *)(DerivedStorage + 3936) = v174 | 7;
      }
    }
    if (*(void *)(DerivedStorage + 3888))
    {
      if (v168 != 1919251564 && (v168 != 1919251319 || *(_DWORD *)(DerivedStorage + 636) != -1)) {
        goto LABEL_633;
      }
      int v178 = dword_26B11BA6C;
      if (dword_26B11BA6C == -1) {
        int v178 = 1;
      }
      if (dword_26B11BA68 == -1) {
        int v179 = v178;
      }
      else {
        int v179 = dword_26B11BA68;
      }
      int v180 = H16ISP::H16ISPDevice::SetFocusMultiCamBehavior(*v304, v167, v179);
      goto LABEL_590;
    }
LABEL_583:
    if (*(_DWORD *)(DerivedStorage + 3932) == 2)
    {
      H16ISP::H16ISPDevice::EnablePDEOutput(*v304, v167, 0, 0);
      *(_DWORD *)(DerivedStorage + 3932) = 1;
    }
    if (v168 != 1919251564 && (v168 != 1919251319 || *(_DWORD *)(DerivedStorage + 636) != -1)) {
      goto LABEL_633;
    }
    if (dword_26B11BA68 == -1) {
      int v179 = 2;
    }
    else {
      int v179 = dword_26B11BA68;
    }
    int v180 = H16ISP::H16ISPDevice::SetFocusMultiCamBehavior(*v304, *v303, v179);
LABEL_590:
    if (!v180) {
      *(_DWORD *)(DerivedStorage + 636) = v179;
    }
  }
LABEL_633:
  if (*(unsigned char *)(DerivedStorage + 3784))
  {
    if (H16ISP::H16ISPDevice::IsProjectorAllowed(*v304, *v303)) {
      operator new();
    }
    if (*(_DWORD *)(DerivedStorage + 3936)) {
      NotifyProjectorValidationError(DerivedStorage, (uint64_t)v302);
    }
  }
  else if (*(_DWORD *)(DerivedStorage + 3936))
  {
    EnablePCEStreamingInFrameReceiver((uint64_t)v302, DerivedStorage);
  }
  if (H16ISP::H16ISPDevice::isSensorType((uint64_t)*v304, *v303, 1785950322))
  {
    v188 = (H16ISP::JasperConfigManager *)H16ISP::JasperConfigManager::applyFrameMode(*((H16ISP::JasperConfigManager **)v302 + 3), (H16ISP::H16ISPDevice *)*(unsigned int *)(DerivedStorage + 132), *(_DWORD *)(DerivedStorage + 4104), *((xpc_connection_t **)v302 + 25), v187);
    uint64_t v157 = (uint64_t)v188;
    if (v188)
    {
      if (H16ISP::JasperConfigManager::getFrameMode(v188) != -1)
      {
        CVPixelBufferRef v189 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CVPixelBufferRef v189 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v189;
        }
        if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureStreamStartInternal();
        }
        H16ISPPostNotification(@"BadJasperCalibrationNotification", v294, 0);
        goto LABEL_648;
      }
    }
    else if (H16ISP::H16ISPDevice::IsProjectorAllowed(*v304, *v303))
    {
      *(unsigned char *)(DerivedStorage + 3786) = 1;
      v190 = *(void **)(DerivedStorage + 4240);
      if (v190)
      {
        *(void *)uint64_t outputStruct = 0;
        Node = (H16ISP::JasperConfigManager *)H16ISP::H16ISPFilterGraphManager::GetNode(v190, 11, (H16ISP::H16ISPFilterGraphNode **)outputStruct);
        if (!Node)
        {
          v192 = *(H16ISP::H16ISPJasperDepthNode **)outputStruct;
          if (*(void *)outputStruct)
          {
            H16ISP::JasperConfigManager::getFrameMode(Node);
            H16ISP::H16ISPTimeOfFlightColorSynchronizer::setFWisAFOwner(*((void *)v302 + 30), v302[249]);
            H16ISP::H16ISPTimeOfFlightColorSynchronizer::setPreviewMasterCallback(*((void *)v302 + 30), (unsigned __int16 (*)(void *))getTofGroupPreviewMasterChannel, v302);
            H16ISP::H16ISPTimeOfFlightColorSynchronizer::setFWProjectorMode(*((void *)v302 + 30), 1);
            CVPixelBufferRef v193 = (H16ISP::H16ISPTimeOfFlightColorSynchronizer *)*((void *)v302 + 30);
            if (v302[248]) {
              H16ISP::H16ISPTimeOfFlightColorSynchronizer::enableTofAssistance(v193, (H16ISP::H16ISPFrameReceiver *)*v128);
            }
            else {
              H16ISP::H16ISPTimeOfFlightColorSynchronizer::disableTofAssistance(v193);
            }
            H16ISP::H16ISPJasperDepthNode::setJasperFrameRateMin(v192, *(float *)(DerivedStorage + 56));
            H16ISP::H16ISPJasperDepthNode::setJasperFrameRateMax(v192, *(float *)(DerivedStorage + 52));
          }
        }
      }
      H16ISP::H16ISPDevice::SetTOFPriRandomSwapMode(*v304, *v303, 1, 512, 3072);
    }
    else
    {
      NotifyProjectorValidationError(DerivedStorage, (uint64_t)v302);
    }
  }
  if (*(unsigned char *)(DerivedStorage + 3786)) {
    EnableIRProjector(1, DerivedStorage, (uint64_t)v302);
  }
  int v198 = *(_DWORD *)(DerivedStorage + 556);
  int v199 = *(_DWORD *)(DerivedStorage + 560);
  if (!*(void *)(DerivedStorage + 556)) {
    goto LABEL_705;
  }
  bzero(outputStruct, 0x3CuLL);
  void outputStruct[2] = -16366;
  *(_DWORD *)&outputStruct[4] = *v303;
  *(_DWORD *)&outputStruct[6] = v198;
  *(_DWORD *)&outputStruct[8] = v199;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)outputStruct, 0x3Cu, 0, 0xFFFFFFFF))
  {
    CVPixelBufferRef v201 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CVPixelBufferRef v201 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v201;
    }
    if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    goto LABEL_79;
  }
  if (*(_DWORD *)(DerivedStorage + 556))
  {
    CVPixelBufferRef v208 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CVPixelBufferRef v208 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v208;
    }
    if (os_log_type_enabled(v208, OS_LOG_TYPE_INFO))
    {
      LOWORD(valuePtr) = 0;
      _os_log_impl(&dword_24680F000, v208, OS_LOG_TYPE_INFO, "Adding buffer-pool to receiver for horizontal edge map\n\n", (uint8_t *)&valuePtr, 2u);
    }
    uint64_t v209 = *(void *)(DerivedStorage + 136);
    long long v312 = 0u;
    long long v313 = 0u;
    H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v209, 4, *(int *)&outputStruct[16]);
    *(_DWORD *)(DerivedStorage + 584) = *(_DWORD *)&outputStruct[16];
    CFDataRef v210 = *(const __CFData **)(DerivedStorage + 568);
    if (v210)
    {
      BytePtr = CFDataGetBytePtr(v210);
      if (BytePtr)
      {
        bzero(&valuePtr, 0x24uLL);
        __int16 valuePtr_4 = -16368;
        int valuePtr_8 = 0;
        int v212 = *(_DWORD *)(DerivedStorage + 556) - 6;
        if (v212 <= 3)
        {
          LODWORD(valuePtr_12) = dword_2469DAD10[v212];
          WORD2(valuePtr_12) = 0x1000000010000uLL >> (16 * v212);
        }
        for (uint64_t k = 0; k != 9; ++k)
        {
          float v214 = *(float *)&BytePtr[4 * k];
          LOWORD(v215) = vcvts_n_s32_f32(v214, 0xDuLL);
          unsigned int v216 = vcvts_n_s32_f32(fabsf(v214), 0xDuLL);
          if (v214 < 0.0) {
            int v215 = -v216;
          }
          *((_WORD *)outputStruct + k + 13) = v215;
        }
        if (H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)&valuePtr, 0x24u, 0, 0xFFFFFFFF))
        {
          int v217 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v217 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v217;
          }
          if (!os_log_type_enabled(v217, OS_LOG_TYPE_ERROR)) {
            goto LABEL_79;
          }
          goto LABEL_751;
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 584) = -1;
  }
  if (!*(_DWORD *)(DerivedStorage + 560))
  {
    *(_DWORD *)(DerivedStorage + 588) = -1;
    goto LABEL_705;
  }
  v236 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    v236 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v236;
  }
  if (os_log_type_enabled(v236, OS_LOG_TYPE_INFO))
  {
    LOWORD(valuePtr) = 0;
    _os_log_impl(&dword_24680F000, v236, OS_LOG_TYPE_INFO, "Adding buffer-pool to receiver for vertical edge map\n\n", (uint8_t *)&valuePtr, 2u);
  }
  uint64_t v237 = *(void *)(DerivedStorage + 136);
  long long v310 = 0u;
  long long v311 = 0u;
  H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v237, 4, v354);
  *(_DWORD *)(DerivedStorage + 588) = v354;
  CFDataRef v238 = *(const __CFData **)(DerivedStorage + 576);
  if (v238)
  {
    v239 = CFDataGetBytePtr(v238);
    if (v239)
    {
      bzero(&valuePtr, 0x24uLL);
      __int16 valuePtr_4 = -16368;
      int valuePtr_8 = 1;
      int v240 = *(_DWORD *)(DerivedStorage + 560) - 6;
      if (v240 <= 3)
      {
        LODWORD(valuePtr_12) = dword_2469DAD10[v240];
        WORD2(valuePtr_12) = 0x1000000010000uLL >> (16 * v240);
      }
      for (uint64_t m = 0; m != 9; ++m)
      {
        float v242 = *(float *)&v239[4 * m];
        LOWORD(v243) = vcvts_n_s32_f32(v242, 0xDuLL);
        unsigned int v244 = vcvts_n_s32_f32(fabsf(v242), 0xDuLL);
        if (v242 < 0.0) {
          int v243 = -v244;
        }
        *((_WORD *)outputStruct + m + 13) = v243;
      }
      if (H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)&valuePtr, 0x24u, 0, 0xFFFFFFFF))
      {
        v245 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v245 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v245;
        }
        if (!os_log_type_enabled(v245, OS_LOG_TYPE_ERROR)) {
          goto LABEL_79;
        }
LABEL_751:
        H16ISPCaptureStreamStartInternal();
        goto LABEL_79;
      }
    }
  }
LABEL_705:
  if (*(_DWORD *)(DerivedStorage + 596) != -1
    && *(_DWORD *)(DerivedStorage + 600) != -1
    && !H16ISP::H16ISPFrameReceiver::setNewOutputSize(*(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136)))
  {
    uint64_t v314 = 0;
    uint64_t v309 = 0;
    int v308 = 0;
    char v307 = 0;
    H16ISP::H16ISPFrameReceiver::getOutputSize((void *)*v128, (_DWORD *)&v314 + 1, &v314, (_DWORD *)&v309 + 1, &v309, &v308, &v307);
    bzero(&valuePtr, 0x1CuLL);
    int valuePtr_8 = *v303;
    __int16 valuePtr_4 = 2049;
    long long valuePtr_12 = *(_OWORD *)(DerivedStorage + 604);
    if (H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)&valuePtr, 0x1Cu, 0, 0xFFFFFFFF))
    {
      v235 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v235 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v235;
      }
      if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
    }
    else
    {
      bzero(outputStruct, 0x38uLL);
      unsigned int v261 = *v303;
      void outputStruct[2] = 2817;
      unsigned int v262 = v309 + HIDWORD(v314);
      *(_DWORD *)&outputStruct[4] = v261;
      *(_DWORD *)&outputStruct[6] = v309 + HIDWORD(v314);
      *(_DWORD *)&outputStruct[8] = v314;
      int v351 = HIDWORD(v309);
      switch(v308)
      {
        case 0:
          LOBYTE(v353) = 0;
          goto LABEL_917;
        case 1:
          LOBYTE(v353) = 0;
          *(_DWORD *)&outputStruct[12] = 1;
          *(_DWORD *)&outputStruct[14] = (2 * v262 + 63) & 0xFFFFFFC0;
          goto LABEL_925;
        case 13:
          LOBYTE(v353) = 1;
LABEL_917:
          *(_DWORD *)&outputStruct[12] = 0;
          *(_DWORD *)&outputStruct[14] = (v262 + 63) & 0xFFFFFFC0;
          *(_DWORD *)&unsigned char outputStruct[16] = *(_DWORD *)&outputStruct[14];
          goto LABEL_925;
        case 15:
          int v290 = 18;
          LOBYTE(v353) = 0;
          goto LABEL_920;
        case 16:
          int v290 = 18;
          LOBYTE(v353) = 1;
LABEL_920:
          int v291 = 2 * v262;
          goto LABEL_922;
        case 18:
          int v290 = 19;
          LOBYTE(v353) = 0;
          int v291 = (2 * ((2863311531u * (unint64_t)(v262 + 2)) >> 32)) & 0xFFFFFFFC;
LABEL_922:
          unsigned int v266 = (v291 + 63) & 0xFFFFFFC0;
          *(_DWORD *)&outputStruct[12] = v290;
          goto LABEL_923;
        case 22:
          *(int8x8_t *)&outputStruct[14] = vand_s8((int8x8_t)vadd_s32(vdup_n_s32(32 * v262), (int32x2_t)0x1E0000003E0), (int8x8_t)0xFFFFFE00FFFFFC00);
          *(_DWORD *)&outputStruct[12] = 0;
          LOBYTE(v353) = 1;
          goto LABEL_925;
        case 23:
          *(_DWORD *)&outputStruct[12] = 19;
          LOBYTE(v353) = 1;
          *(uint32x2_t *)&outputStruct[14] = vshr_n_u32((uint32x2_t)vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32(v262), (int32x2_t)0xF0000001FLL), (uint32x2_t)0xFFFFFFFCFFFFFFFBLL), (int32x2_t)0xA0000002800), 3uLL);
          goto LABEL_925;
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
          Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool((void *)*v128, 0);
          H16ISP::getFrameFormatMetaInfo(v308, &buf);
          *(_DWORD *)&outputStruct[12] = HIDWORD(buf);
          uint64_t v264 = 336;
          if (v306) {
            uint64_t v264 = 340;
          }
          uint64_t v265 = 368;
          if (v306) {
            uint64_t v265 = 372;
          }
          unsigned int v266 = *(_DWORD *)(BufferPool + v265);
          int v267 = *(_DWORD *)(BufferPool + v264);
          LOBYTE(v353) = v306 != 0;
          *(_DWORD *)&outputStruct[14] = v267;
          goto LABEL_924;
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
          uint64_t v285 = H16ISP::H16ISPFrameReceiver::getBufferPool((void *)*v128, 0);
          H16ISP::getFrameFormatMetaInfo(v308, &buf);
          *(_DWORD *)&outputStruct[12] = HIDWORD(buf);
          uint64_t v286 = 336;
          if (v306) {
            uint64_t v286 = 340;
          }
          uint64_t v287 = 368;
          if (v306) {
            uint64_t v287 = 372;
          }
          int v288 = *(_DWORD *)(v285 + v287);
          int v289 = *(_DWORD *)(v285 + v286);
          LOBYTE(v353) = v306 != 0;
          *(_DWORD *)&unsigned char outputStruct[16] = v289;
          *(_DWORD *)&outputStruct[18] = v288;
          goto LABEL_925;
        default:
          LOBYTE(v353) = 0;
          unsigned int v266 = (v262 + 63) & 0xFFFFFFC0;
          *(_DWORD *)&outputStruct[12] = v308;
LABEL_923:
          *(_DWORD *)&outputStruct[14] = v266;
LABEL_924:
          *(_DWORD *)&unsigned char outputStruct[16] = v266;
LABEL_925:
          int v354 = v309 + HIDWORD(v314);
          *(_DWORD *)&outputStruct[10] = v307 == 0;
          int v352 = v314;
          if (!H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)outputStruct, 0x38u, 0, 0xFFFFFFFF))goto LABEL_708; {
          v292 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          }
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v292 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v292;
          }
          if (os_log_type_enabled(v292, OS_LOG_TYPE_ERROR)) {
            H16ISPCaptureStreamStartInternal();
          }
          break;
      }
    }
    goto LABEL_78;
  }
LABEL_708:
  if (dword_26B11BA84) {
    char v200 = 0;
  }
  else {
    char v200 = *(unsigned char *)(DerivedStorage + 672) == 0;
  }
  H16ISP::H16ISPFrameReceiver::EnableMetaDataDictionaryCreationOnRealTimeThread((H16ISP::H16ISPFrameReceiver *)*v128, v200);
  int v202 = *(_DWORD *)(DerivedStorage + 72);
  if (v202)
  {
    if (H16ISP::H16ISPDevice::SetGainCap(*v304, *v303, v202))
    {
      CVPixelBufferRef v203 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CVPixelBufferRef v203 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v203;
      }
      if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
    }
    *(_DWORD *)(DerivedStorage + 72) = 0;
  }
  if (!*(unsigned char *)(DerivedStorage + 674))
  {
    float v206 = *(float *)(DerivedStorage + 3684);
    if (v206 != 1.0)
    {
      if (H16ISP::H16ISPDevice::SetZoomFactor(*v304, *v303, vcvts_n_s32_f32(v206, 0xAuLL)))
      {
        long long v207 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          long long v207 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v207;
        }
        if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureStreamStartInternal((float *)(DerivedStorage + 3684));
        }
      }
    }
  }
  float v204 = *(float *)(DerivedStorage + 56);
  if (v204 <= 3.0)
  {
    long long v205 = (H16ISP::H16ISPFrameReceiver *)*v128;
    if (v204 <= 2.0) {
      H16ISP::H16ISPFrameReceiver::SetFrameDoneTimeoutDuration(v205, 5.0);
    }
    else {
      H16ISP::H16ISPFrameReceiver::SetFrameDoneTimeoutDuration(v205, 3.0);
    }
  }
  else
  {
    H16ISP::H16ISPFrameReceiver::SetFrameDoneTimeoutDuration((H16ISP::H16ISPFrameReceiver *)*v128, 2.0);
  }
  uint64_t v218 = *(void *)(DerivedStorage + 136);
  *(unsigned char *)(DerivedStorage + 3732) = *(unsigned char *)(v218 + 453);
  *(_DWORD *)(DerivedStorage + 3736) = *(_DWORD *)(v218 + 456);
  *(void *)(DerivedStorage + 3744) = *(void *)(v218 + 408);
  SetMetaDataOptionsOnFrameReceiver(DerivedStorage, (uint64_t)v302);
  *(_DWORD *)(DerivedStorage + 532) = 0;
  if (dword_26B11BA38 >= 1) {
    H16ISP::H16ISPDevice::EnableCFOV(*v304, *v303, 1);
  }
  if ((unsigned __int16)word_26B11BA44 != 0xFFFF) {
    H16ISP::H16ISPDevice::EnableFocus(*v304, *v303, 0, word_26B11BA44);
  }
  if (!*(unsigned char *)(DerivedStorage + 3784))
  {
    int v232 = gCaptureDeviceCFPrefs[44 * *v303 + 178];
    if (v232 != -1
      && !*(unsigned char *)(DerivedStorage + 2480)
      && H16ISP::H16ISPDevice::EnableDPM(*v304, *v303, v232 != 0))
    {
      v260 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v260 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v260;
      }
      if (os_log_type_enabled(v260, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
    }
    int v233 = gCaptureDeviceCFPrefs[44 * *v303 + 179];
    if (v233 != -1 && H16ISP::H16ISPDevice::EnableDPMAssistedAE(*v304, *v303, v233 != 0))
    {
      v234 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v234 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v234;
      }
      if (os_log_type_enabled(v234, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
    }
  }
  int v219 = gCaptureDeviceCFPrefs[44 * *v303 + 188];
  if (v219 != -1 && H16ISP::H16ISPDevice::EnableAEStageDetect(*v304, *v303, v219 != 0))
  {
    int32x2_t v220 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int32x2_t v220 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v220;
    }
    if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
  }
  int v221 = gCaptureDeviceCFPrefs[44 * *v303 + 180];
  if (v221 != -1 && H16ISP::H16ISPDevice::SetAPSMode(*v304, *v303, v221))
  {
    v222 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v222 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v222;
    }
    if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
  }
  int v223 = *v303;
  int v224 = gCaptureDeviceCFPrefs[44 * *v303 + 202];
  if (v224)
  {
    H16ISP::H16ISPDevice::WritePropertyValue(*v304, v223, 1320, v224, 0xFFFFFFFF);
    int v223 = *v303;
  }
  int v225 = gCaptureDeviceCFPrefs[44 * v223 + 182];
  if (v225 != -1)
  {
    H16ISP::H16ISPDevice::WritePropertyValue(*v304, v223, 3076, v225, 0xFFFFFFFF);
    int v223 = *v303;
  }
  int v226 = LOWORD(gCaptureDeviceCFPrefs[44 * v223 + 184]) | (gCaptureDeviceCFPrefs[44 * v223 + 183] << 16);
  if (v226)
  {
    H16ISP::H16ISPDevice::WritePropertyValue(*v304, v223, 5127, v226, 0xFFFFFFFF);
    int v223 = *v303;
  }
  int v227 = gCaptureDeviceCFPrefs[44 * v223 + 197];
  if (v227 != -1) {
    H16ISP::H16ISPDevice::WritePropertyValue(*v304, v223, 1317, v227, 0xFFFFFFFF);
  }
  v228 = *(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136);
  *(_DWORD *)(DerivedStorage + 372pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -1;
  *(_WORD *)(DerivedStorage + 3724) = -1;
  H16ISP::H16ISPFrameReceiver::SetFDMode(v228, *(unsigned char *)(DerivedStorage + 3700));
  H16ISP::H16ISPFrameReceiver::SetFDFeatureFlags(*(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136), *(_DWORD *)(DerivedStorage + 3696));
  if (!*(unsigned char *)(DerivedStorage + 680)
    && !*(unsigned char *)(DerivedStorage + 880)
    && !*(unsigned char *)(DerivedStorage + 1080)
    && !*(unsigned char *)(DerivedStorage + 1280)
    && !*(unsigned char *)(DerivedStorage + 1480)
    && !*(unsigned char *)(DerivedStorage + 1680)
    && (*(unsigned char *)(DerivedStorage + 1880) || *(unsigned char *)(DerivedStorage + 2080) || *(unsigned char *)(DerivedStorage + 2280)))
  {
    bzero(outputStruct, 0x68uLL);
    void outputStruct[2] = 1565;
    *(_DWORD *)&outputStruct[4] = *v303;
    H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)outputStruct, 0x68u, 0, 0xFFFFFFFF);
    if (v355 != 10)
    {
      bzero(&valuePtr, 0x10uLL);
      __int16 valuePtr_4 = 331;
      int valuePtr_8 = *v303;
      LODWORD(valuePtr_12) = 2;
      H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)&valuePtr, 0x10u, 0, 0xFFFFFFFF);
    }
  }
  v229 = *(H16ISP::H16ISPFilterGraphManager **)(DerivedStorage + 4240);
  if (v229)
  {
    *(void *)uint64_t outputStruct = 0;
    int v230 = v301;
    if (!*(void *)(DerivedStorage + 3888)) {
      int v230 = 1;
    }
    if (v230 == 1)
    {
      if (H16ISP::H16ISPFilterGraphManager::Activate(v229))
      {
        v231 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v231 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v231;
        }
        if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR)) {
          H16ISPCaptureStreamStartInternal();
        }
        goto LABEL_78;
      }
      H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(DerivedStorage + 4240), 9, (H16ISP::H16ISPFilterGraphNode **)outputStruct);
      if (*(void *)outputStruct) {
        H16ISP::H16ISPGraphVIOCameraControlNode::SetFrameReceiver(*(uint64_t *)outputStruct, (H16ISP::H16ISPFrameReceiver *)*v128);
      }
    }
    *(void *)uint64_t outputStruct = 0;
    H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(DerivedStorage + 4240), 4, (H16ISP::H16ISPFilterGraphNode **)outputStruct);
    if (*(void *)outputStruct) {
      SetOptionsForMetadataNode(*(uint64_t *)outputStruct, (uint64_t)v302, DerivedStorage, v299, v300);
    }
    *(void *)uint64_t outputStruct = 0;
    H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(DerivedStorage + 4240), 2, (H16ISP::H16ISPFilterGraphNode **)outputStruct);
    if (*(void *)outputStruct) {
      H16ISP::H16ISPGraphExitNode::RegisterH16ISPFrameReceivedProcForChannel(*(uint64_t *)outputStruct, *v303, (uint64_t)MyH16ISPFrameReceivedProc);
    }
    if (*(void *)(DerivedStorage + 3888))
    {
      *(void *)uint64_t outputStruct = 0;
      H16ISP::H16ISPFilterGraphManager::GetNode(*(void **)(DerivedStorage + 4240), 3, (H16ISP::H16ISPFilterGraphNode **)outputStruct);
      if (*(void *)outputStruct) {
        H16ISP::H16ISPGraphFrameSyncNode::EnableChannel(*(H16ISP::H16ISPGraphFrameSyncNode **)outputStruct, *v303);
      }
    }
  }
  bzero((void *)(DerivedStorage + 4272), 0x28uLL);
  int started = H16ISP::H16ISPFrameReceiver::startReceive(*(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136));
  if (started)
  {
    v247 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v247 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v247;
    }
    if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR)) {
      H16ISPCaptureStreamStartInternal();
    }
    if (started == -536870211) {
      H16ISP::H16ISPDevice::ISP_MemoryDiagnostics(*v304);
    }
LABEL_846:
    H16ISP::H16ISPFrameReceiver::stopReceive((H16ISP::H16ISPFrameReceiver *)*v128);
    goto LABEL_79;
  }
  *(void *)(DerivedStorage + 4272) = mach_absolute_time();
  v248 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  uint64_t v249 = &_os_log_internal;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    v248 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v248;
  }
  if (os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v250 = *v303;
    *(_DWORD *)uint64_t outputStruct = 67109120;
    *(_DWORD *)&void outputStruct[2] = v250;
    _os_log_impl(&dword_24680F000, v248, OS_LOG_TYPE_DEFAULT, "H16ISPCaptureStreamStart - Camera channel %d started.\n\n", (uint8_t *)outputStruct, 8u);
  }
  double v251 = *(double *)(DerivedStorage + 368);
  if (v251 != 0.0) {
    H16ISP::H16ISPDevice::SetMaxIntegrationTime(*v304, *v303, (v251 * 1000.0));
  }
  int v252 = *(_DWORD *)(DerivedStorage + 3760);
  if (v252 != *(_DWORD *)(DerivedStorage + 3756))
  {
    bzero(outputStruct, 0x18uLL);
    void outputStruct[2] = 3331;
    *(_DWORD *)&outputStruct[4] = *(_DWORD *)(DerivedStorage + 132);
    *(_DWORD *)&outputStruct[6] = v252;
    int v253 = *(_DWORD *)(DerivedStorage + 3696);
    LOBYTE(outputStruct[8]) = v253 & 1;
    HIBYTE(outputStruct[8]) = (v253 & 2) != 0;
    LOBYTE(outputStruct[9]) = (v253 & 4) != 0;
    HIBYTE(outputStruct[9]) = (v253 & 8) == 0;
    LOBYTE(outputStruct[10]) = (v253 & 0x10) == 0;
    H16ISP::H16ISPDevice::ISP_SendCommand(*v304, (unsigned __int8 *)outputStruct, 0x18u, 0, 0xFFFFFFFF);
  }
  if (*(unsigned char *)(DerivedStorage + 4127)) {
    H16ISP::H16ISPFrameReceiver::SuspendReceive((H16ISP::H16ISPFrameReceiver *)*v128);
  }
  if (*(void *)(DerivedStorage + 3888)) {
    SuspendResumeStream((uint64_t)v302, DerivedStorage);
  }
  uint64_t v254 = *((void *)v302 + 25);
  if (v254)
  {
    unsigned int v255 = *v303;
    *(_DWORD *)uint64_t outputStruct = 2;
    *(_DWORD *)&outputStruct[4] = v255;
    LOBYTE(outputStruct[6]) = 1;
    uint64_t v35 = H16ISP::H16ISPServicesRemote::SetProperty(v254, (xpc_object_t *)outputStruct);
    if (v35)
    {
      v256 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v249)
      {
        v256 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v256;
      }
      if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal();
      }
      goto LABEL_846;
    }
  }
  if (v302[248] && *(_DWORD *)(DerivedStorage + 640))
  {
    if (CFArrayGetCount(*((CFArrayRef *)v302 + 15)) < 1) {
      goto LABEL_894;
    }
    CFIndex v257 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v302 + 15), v257);
      FigCaptureStreamGetFigBaseObject();
      uint64_t v259 = CMBaseObjectGetDerivedStorage();
      if (H16ISP::H16ISPDevice::isSensorType(*((void *)v302 + 3), *(_DWORD *)(v259 + 132), 1785950322)) {
        break;
      }
      if (++v257 >= CFArrayGetCount(*((CFArrayRef *)v302 + 15))) {
        goto LABEL_894;
      }
    }
    if (ValueAtIndex)
    {
      if (!*(void *)(v259 + 136) && *(unsigned char *)(v259 + 8)) {
        uint64_t v163 = StartJasperForInternalStreaming((uint64_t)ValueAtIndex);
      }
    }
    else
    {
LABEL_894:
      v268 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v249)
      {
        v268 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v268;
      }
      if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal(v268, v269, v270, v271, v272, v273, v274, v275);
      }
    }
    if (v163)
    {
      v276 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v249)
      {
        v276 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v276;
      }
      if (os_log_type_enabled(v276, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureStreamStartInternal(v276, v277, v278, v279, v280, v281, v282, v283);
      }
      H16ISP::H16ISPFrameReceiver::stopReceive((H16ISP::H16ISPFrameReceiver *)*v128);
      uint64_t v35 = v163;
      goto LABEL_79;
    }
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = v163;
  }
  if (!*(unsigned char *)(DerivedStorage + 8)) {
    H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D740], v294, 0);
  }
  if (v35) {
    goto LABEL_79;
  }
LABEL_85:
  kdebug_trace();
  return v35;
}

void sub_246861DA8(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x1020C40DC499AC6);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPFilterGraphManager::AddNode(H16ISP::H16ISPFilterGraphManager *this, H16ISP::H16ISPFilterGraphNode *a2)
{
  uint64_t v3 = a2;
  std::deque<H16ISP::H16ISPFilterGraphNode *>::push_back((void *)this + 7, &v3);
  return 0;
}

uint64_t H16ISP::H16ISPFilterGraphManager::ConnectNodes(H16ISP::H16ISPFilterGraphManager *this, H16ISP::H16ISPFilterGraphNode *a2, H16ISP::H16ISPFilterGraphNode *a3)
{
  unint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 8);
  uint64_t v5 = *((void *)this + 9);
  uint64_t v6 = (H16ISP::H16ISPFilterGraphNode ***)(v4 + 8 * (v3 >> 9));
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = &(*v6)[*((void *)this + 11) & 0x1FFLL];
  }
  int v8 = 0;
  int v9 = 0;
LABEL_5:
  uint64_t v10 = v7 - 512;
  while (1)
  {
    uint64_t v11 = v5 == v4
        ? 0
        : *(void *)(v4 + (((*((void *)this + 12) + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*((void *)this + 12) + v3) & 0x1FF);
    if (v7 == (H16ISP::H16ISPFilterGraphNode **)v11) {
      break;
    }
    uint64_t v12 = *v7++;
    v8 |= v12 == a2;
    v9 |= v12 == a3;
    if (*v6 == ++v10)
    {
      uint64_t v13 = v6[1];
      ++v6;
      uint64_t v7 = v13;
      goto LABEL_5;
    }
  }
  if (v8 & v9) {
    return H16ISP::H16ISPFilterGraphNode::AddOutputNode(a2, a3);
  }
  else {
    return 3758097084;
  }
}

uint64_t H16ISP::H16ISPDevice::SetCameraControl(H16ISP::H16ISPDevice *this, __int16 a2, int a3, int a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 321;
  __int16 v11 = a2;
  int v12 = a3;
  int v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableVIS(H16ISP::H16ISPDevice *this, int a2, int a3, int a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 18176;
  int v11 = a2;
  int v12 = a3;
  int v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::ISP_SelectBestChargePumpFrequencyIndex(H16ISP::H16ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  input[1] = *MEMORY[0x263EF8340];
  mach_port_t v3 = *((_DWORD *)this + 1106);
  if (!v3) {
    return 3758097084;
  }
  uint64_t output = 0;
  input[0] = a2;
  uint32_t outputCnt = 1;
  uint64_t result = IOConnectCallScalarMethod(v3, 0x2Cu, input, 1u, &output, &outputCnt);
  if (!result) {
    *a3 = output;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::ISP_SelectBestPixClockFrequencyIndex(H16ISP::H16ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  input[1] = *MEMORY[0x263EF8340];
  mach_port_t v3 = *((_DWORD *)this + 1106);
  if (!v3) {
    return 3758097084;
  }
  uint64_t output = 0;
  input[0] = a2;
  uint32_t outputCnt = 1;
  uint64_t result = IOConnectCallScalarMethod(v3, 0x3Bu, input, 1u, &output, &outputCnt);
  if (!result) {
    *a3 = output;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetAEBracketingWaitForFocusParams(H16ISP::H16ISPDevice *this, int a2, int a3, int a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 578;
  int v11 = a2;
  int v12 = a3;
  int v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableLocalThumbnailRawBufferMode(H16ISP::H16ISPDevice *this, int a2, __int16 a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 361;
  int v9 = a2;
  __int16 v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::ISP_SelectBestMIPIFrequencyIndex(H16ISP::H16ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  input[1] = *MEMORY[0x263EF8340];
  mach_port_t v3 = *((_DWORD *)this + 1106);
  if (!v3) {
    return 3758097084;
  }
  uint64_t output = 0;
  input[0] = a2;
  uint32_t outputCnt = 1;
  uint64_t result = IOConnectCallScalarMethod(v3, 0x18u, input, 1u, &output, &outputCnt);
  if (!result) {
    *a3 = output;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::ISP_GetCurrentToFClockBanks(uint64_t a1, unsigned int a2, void *outputStruct)
{
  input[1] = *MEMORY[0x263EF8340];
  mach_port_t v3 = *(_DWORD *)(a1 + 4424);
  if (!v3) {
    return 3758097084;
  }
  input[0] = a2;
  size_t v5 = 132;
  return IOConnectCallMethod(v3, 0x47u, input, 1u, 0, 0, 0, 0, outputStruct, &v5);
}

uint64_t H16ISP::H16ISPDevice::UpdateChannelConfigCache(H16ISP::H16ISPDevice *this, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  bzero(__src, 0x190uLL);
  __int16 v7 = 269;
  unsigned int v8 = a2;
  uint64_t v4 = H16ISP::H16ISPDevice::ISP_SendCommand(this, __src, 0x190u, 0, 0xFFFFFFFF);
  if (!v4) {
    memmove((void *)(*((void *)this + 5) + 432 * a2 + 32), __src, 0x190uLL);
  }
  return v4;
}

uint64_t H16ISP::H16ISPDevice::EnableLocalRawBufferMode(H16ISP::H16ISPDevice *this, int a2, __int16 a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 293;
  int v9 = a2;
  __int16 v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableFirmwareFocusHint(H16ISP::H16ISPDevice *this, __int16 a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 1039;
  __int16 v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetMIPIFrequencyIndex(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 283;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::AttachOldRawToPreview(H16ISP::H16ISPDevice *this, int a2, __int16 a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 299;
  int v9 = a2;
  __int16 v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::ISP_PreviewStreamSet(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2829;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableFullResCapture(H16ISP::H16ISPDevice *this, int a2, __int16 a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 305;
  int v9 = a2;
  __int16 v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetRawPreviewConfig(H16ISP::H16ISPDevice *this, int a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 364;
  int v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableSlowSyncFlash(H16ISP::H16ISPDevice *this, __int16 a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 597;
  __int16 v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableTileBasedGDC(H16ISP::H16ISPDevice *this, int a2, char a3, char a4, char a5, char a6)
{
  bzero(v13, 0x14uLL);
  __int16 v14 = 2626;
  int v15 = a2;
  char v19 = a3;
  char v16 = a4;
  char v17 = a5;
  char v18 = a6;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v13, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableNewCBAFStats(H16ISP::H16ISPDevice *this, __int16 a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 1041;
  __int16 v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::GetErrorCount(H16ISP::H16ISPDevice *this, int a2, __int16 a3, unsigned int *a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 289;
  int v11 = a2;
  __int16 v12 = a3;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x14u, 0, 0xFFFFFFFF);
  if (!result) {
    *a4 = v13;
  }
  return result;
}

uint64_t ALSModeForStreaming(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a1 + 212);
  uint64_t result = *(unsigned int *)(a1 + 208);
  if (!v3 && result)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 168);
    if (v5 < v6) {
      unsigned int v6 = 0;
    }
    unsigned int v7 = v5 - v6;
    int CameraConfig = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v5 - v6) + 16), v16, v18);
    uint64_t result = 0;
    if (!CameraConfig)
    {
      uint64_t result = 0;
      unsigned int v9 = *(_DWORD *)(a1 + 48);
      unsigned int v10 = *(_DWORD *)(a1 + 168);
      if (v9 < v10) {
        unsigned int v10 = 0;
      }
      unsigned int v11 = v9 - v10;
      uint64_t v12 = *(void *)(a1 + 160);
      uint64_t v13 = 120 * v11;
      if (v12) {
        uint64_t v13 = v12 + 120 * v7;
      }
      float v14 = *(float *)(v13 + 108);
      if (v14 == 0.0) {
        float v15 = (float)v17;
      }
      else {
        float v15 = v14 * 256.0;
      }
      if ((float)(v15 * 0.0039062) < 60.0) {
        return *(unsigned int *)(a1 + 208);
      }
    }
  }
  return result;
}

BOOL IsJasperSyncGroup(H16ISP::H16ISPDevice *a1, CFArrayRef theArray)
{
  if (!theArray || !CFArrayGetCount(theArray)) {
    return 0;
  }
  unint64_t v4 = 0;
  do
  {
    CFArrayGetValueAtIndex(theArray, v4);
    FigCaptureStreamGetFigBaseObject();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType((uint64_t)a1, *(_DWORD *)(DerivedStorage + 132), 1785950322);
    if (isSensorType) {
      break;
    }
    ++v4;
  }
  while (v4 < CFArrayGetCount(theArray));
  return isSensorType;
}

uint64_t H16ISP::H16ISPGraphExitNode::RegisterH16ISPFrameReceivedProcForChannel(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return 3758097112;
  }
  int v3 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN6H16ISP19H16ISPGraphExitNode41RegisterH16ISPFrameReceivedProcForChannelEjPFiPvyjjPNS_36H16ISPFrameReceiverImageBufferStructEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_0;
  void block[4] = a1;
  void block[5] = a3;
  int v6 = a2;
  dispatch_async(v3, block);
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::SetFDMode(H16ISP::H16ISPFrameReceiver *this, char a2)
{
  *((unsigned char *)this + 852) = a2;
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::EnableMetaDataDictionaryCreationOnRealTimeThread(H16ISP::H16ISPFrameReceiver *this, char a2)
{
  *((unsigned char *)this + 868) = a2;
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::SetFDFeatureFlags(H16ISP::H16ISPFrameReceiver *this, int a2)
{
  *((_DWORD *)this + 212) = a2;
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiver::SendFWStartCmdBeforeDeliveringBuffers(uint64_t this, char a2)
{
  *(unsigned char *)(this + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  return this;
}

uint64_t H16ISP::H16ISPDevice::EnableDPM(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 20486;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::EnableDPMAssistedAE(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 585;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

double H16ISP::H16ISPFilterGraphManager::H16ISPFilterGraphManager(H16ISP::H16ISPFilterGraphManager *this)
{
  *(void *)this = &unk_26FAEB330;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_26FAEB330;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

H16ISP::H16ISPGraphExitNode *H16ISP::H16ISPGraphExitNode::H16ISPGraphExitNode(H16ISP::H16ISPGraphExitNode *this)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 2);
  *(void *)uint64_t v2 = &unk_26FAEC038;
  *(_DWORD *)(v2 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  bzero((void *)(v2 + 88), 0x48uLL);
  return this;
}

{
  uint64_t v2;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 2);
  *(void *)uint64_t v2 = &unk_26FAEC038;
  *(_DWORD *)(v2 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  bzero((void *)(v2 + 88), 0x48uLL);
  return this;
}

void ActivateStillImageRawOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 136)) {
    return;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 168);
  if (v4 < v5) {
    unsigned int v5 = 0;
  }
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v4 - v5) + 16), v43, v66))
  {
    int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v6 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ActivateStillImageRawOutputInFrameReceiver();
    }
    return;
  }
  if (!*(unsigned char *)(a1 + 1280))
  {
    bzero(v38, 0x1CuLL);
    int v40 = *(_DWORD *)(a1 + 132);
    __int16 v39 = 2827;
    int32x2_t v41 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(a1 + 2312)));
    int32x2_t v42 = vmovn_s64((int64x2_t)vcvtq_u64_f64(*(float64x2_t *)(a1 + 2328)));
    if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a2 + 24), v38, 0x1Cu, 0, 0xFFFFFFFF))
    {
      int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageRawOutputInFrameReceiver();
      }
      return;
    }
    int v15 = *(_DWORD *)(a1 + 2344);
    bzero(buf, 0x38uLL);
    int v16 = *(_DWORD *)(a1 + 132);
    LOWORD(v58) = 2823;
    *((void *)&v58 + 1) = *(void *)(a1 + 2300);
    int v63 = 0;
    int v17 = *(_DWORD *)(a1 + 2296);
    BOOL v19 = v17 == 2037741171 || v17 == 2037741158;
    DWORD1(v58) = v16;
    BOOL v60 = v19;
    int v20 = ColorRangeForOutput(a1, a1 + 2280);
    int v21 = *(_DWORD *)(a1 + 2300);
    int v65 = v21;
    int v22 = *(_DWORD *)(a1 + 2304);
    int v59 = v20;
    int v64 = v22;
    if (v60)
    {
      unsigned int v23 = (2 * v21 + 63) & 0xFFFFFFC0;
    }
    else
    {
      unsigned int v23 = (v21 + 63) & 0xFFFFFFC0;
      unsigned int v62 = v23;
    }
    unsigned int v61 = v23;
    if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a2 + 24), buf, 0x38u, 0, 0xFFFFFFFF))
    {
      unint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unint64_t v25 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageRawOutputInFrameReceiver();
      }
      return;
    }
    uint64_t v32 = *(void *)(a1 + 136);
    long long v36 = 0u;
    long long v37 = 0u;
    H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v32, 7, SDWORD2(v44));
    __int16 v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v33 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)unsigned int v53 = 67109376;
      int v54 = v15;
      __int16 v55 = 1024;
      int v56 = 0;
      _os_log_impl(&dword_24680F000, v33, OS_LOG_TYPE_INFO, "ActivateStillImageRawOutputInFrameReceiver STILL pool size=%d,prime=%d\n\n", v53, 0xEu);
    }
  }
  uint64_t v7 = *(void *)(a1 + 136);
  if (*(unsigned char *)(v7 + 453))
  {
LABEL_12:
    if (!H16ISP::H16ISPFrameReceiver::HasPool((void *)v7, 30)
      && *(unsigned char *)(a1 + 2353)
      && AddThumbnailRawPoolToFrameReceiver(a1, a2))
    {
      __int16 v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        __int16 v8 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageOutputInFrameReceiver();
      }
    }
    else if (*(unsigned char *)(a1 + 3784) {
           && *(_DWORD *)(a1 + 2296) == 1278226736
    }
           && H16ISP::H16ISPDevice::SetSensorInterfacePixelFormat(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), 15, 1, 0, 0))
    {
      int v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v9 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageRawOutputInFrameReceiver();
      }
    }
    else if (*(unsigned char *)(a1 + 2280) {
           && *(unsigned char *)(a1 + 2400)
    }
           && AddSushiRawPoolToFrameReceiver(a1, a2, a1 + 2280))
    {
      unsigned int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        unsigned int v11 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageRawOutputInFrameReceiver();
      }
    }
    else if (*(_DWORD *)(a1 + 2404) && AddSashimiRawPoolToFrameReceiver(a1, a2, a1 + 2280))
    {
      uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v13 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageRawOutputInFrameReceiver();
      }
    }
    else if (*(_DWORD *)(a1 + 2408) && AddFocusPixelDataToFrameReceiver(a1, a2, a1 + 2280))
    {
      float v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        float v14 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageRawOutputInFrameReceiver();
      }
    }
    else if (*(unsigned char *)(a1 + 2376) && AddSplitPixelDataToFrameReceiver(a1, a2, a1 + 2280))
    {
      uint64_t v24 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v24 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v24;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        ActivateStillImageRawOutputInFrameReceiver();
      }
    }
    else
    {
      if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a1 + 136), 8))
      {
        *(_DWORD *)long long v38 = 0;
        *(_DWORD *)unsigned int v53 = 0;
        int v26 = resizeStillMetaPool(a1, 0, (int *)v38, (int *)v53);
        if (v26)
        {
          int v27 = v26;
          __int16 v28 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            __int16 v28 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v28;
          }
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            *(void *)&long long v58 = "ActivateStillImageRawOutputInFrameReceiver";
            WORD4(v58) = 1024;
            *(_DWORD *)((char *)&v58 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v27;
            _os_log_impl(&dword_24680F000, v28, OS_LOG_TYPE_DEFAULT, "%s - resize still meta pool failed err=%d\n", buf, 0x12u);
          }
        }
        int v29 = *(_DWORD *)v53 + *(_DWORD *)v38;
        if (*(_DWORD *)v38 >= 0x10u) {
          int v30 = 16;
        }
        else {
          int v30 = *(_DWORD *)v38;
        }
        H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 8, v67);
        uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v31 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 67109376;
          LODWORD(v58) = v29;
          WORD2(v58) = 1024;
          *(_DWORD *)((char *)&v58 + 6) = v30;
          _os_log_impl(&dword_24680F000, v31, OS_LOG_TYPE_INFO, "ActivateStillImageRawOutputInFrameReceiver STILLMETA pool size=%d,prime=%d\n\n", buf, 0xEu);
        }
      }
      SetMetaDataOptionsOnFrameReceiver(a1, a2);
    }
    return;
  }
  v34[10] = v49;
  v34[11] = v50;
  v34[12] = v51;
  int v35 = v52;
  v34[6] = v45;
  v34[7] = v46;
  v34[8] = v47;
  v34[9] = v48;
  __n128 v34[2] = v43[2];
  v34[3] = v43[3];
  void v34[4] = v43[4];
  v34[5] = v44;
  v34[0] = v43[0];
  v34[1] = v43[1];
  if (!AddRawPoolToFrameReceiver(a1, a2, (uint64_t)v34))
  {
    uint64_t v7 = *(void *)(a1 + 136);
    goto LABEL_12;
  }
  uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v12 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    ActivateStillImageRawOutputInFrameReceiver();
  }
}

BOOL isExclaveAlgoEnabled(unsigned char *a1)
{
  if (!a1[2701]) {
    return 0;
  }
  if (a1[2696] || a1[2697] || a1[2698] || a1[2699] || a1[2792] || a1[2713] || a1[2714]) {
    return 1;
  }
  return a1[2715] != 0;
}

uint64_t H16ISP::H16ISPGraphFrameSyncNode::EnableChannel(H16ISP::H16ISPGraphFrameSyncNode *this, unsigned int a2)
{
  uint64_t v10 = 0;
  unsigned int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = -536870210;
  if (H16ISP::H16ISPDevice::isSensorType(*((void *)this + 39), a2, 1785950322))
  {
    uint64_t v4 = 0;
  }
  else
  {
    unsigned int v5 = *((void *)this + 1);
    if (v5)
    {
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = ___ZN6H16ISP24H16ISPGraphFrameSyncNode13EnableChannelEj_block_invoke;
      block[3] = &unk_2651E9240;
      unsigned int v9 = a2;
      void block[4] = &v10;
      void block[5] = this;
      dispatch_sync(v5, block);
    }
    if (*((_DWORD *)v11 + 6))
    {
      int v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        int v6 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphFrameSyncNode::EnableChannel(v6);
      }
    }
    uint64_t v4 = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return v4;
}

void sub_2468639CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPDevice::SetFocusMultiCamBehavior(H16ISP::H16ISPDevice *a1, __int16 a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = -31718;
  __int16 v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetProjectorOn(H16ISP::H16ISPDevice *this, int a2)
{
  bzero(v5, 0x10uLL);
  __int16 v6 = 1547;
  int v7 = a2;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v5, 0x10u, 0, 0xFFFFFFFF);
}

float H16ISP::H16ISPDevice::ISP_GetOpticalPixelSize(H16ISP::H16ISPDevice *this, unsigned int a2)
{
  float result = -1.0;
  if (*((unsigned char *)this + 4))
  {
    if (*((_DWORD *)this + 1187) > a2) {
      return *(float *)(*((void *)this + 6) + 156 * a2 + 148);
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::setPreviewMasterCallback(uint64_t this, unsigned __int16 (*a2)(void *), void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(this + 24) + 8);
  *(void *)(v3 + 232) = a2;
  *(void *)(v3 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a3;
  return this;
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::setIsfStepDetectionMode(uint64_t result, int a2)
{
  *(_DWORD *)(**(void **)(result + 24) + 72) = a2;
  return result;
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::enableTofAssistance(H16ISP::H16ISPTimeOfFlightColorSynchronizer *this, H16ISP::H16ISPFrameReceiver *a2)
{
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::setFWisAFOwner(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(this + 24) + 8) + 24) = a2;
  return this;
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::setRgbjMode(uint64_t result, int a2)
{
  *(_DWORD *)(**(void **)(result + 24) + 16) = a2;
  return result;
}

uint64_t H16ISP::H16ISPPearlCalibrationNode_Remote::H16ISPPearlCalibrationNode_Remote(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, int a6, char a7, char a8)
{
  uint64_t v11 = H16ISP::H16ISPPearlCalibrationNodeBase::H16ISPPearlCalibrationNodeBase(a1, a2, a4, a5, a6, a8);
  *(void *)uint64_t v11 = &unk_26FAEC420;
  *(void *)(v11 + 112) = a3;
  *(unsigned char *)(v11 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a7;
  *(unsigned char *)(v11 + 121) = 1;
  mach_timebase_info((mach_timebase_info_t)(v11 + 136));
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  return a1;
}

void sub_246863BA8(_Unwind_Exception *a1)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(v1);
  _Unwind_Resume(a1);
}

void H16ISP::TimeOfFlightAutoFocusAssistant::activate(H16ISP::TimeOfFlightAutoFocusAssistant *this, H16ISP::H16ISPFrameReceiver *a2)
{
  if (!*((unsigned char *)this + 25) || *((H16ISP::H16ISPFrameReceiver **)this + 4) != a2)
  {
    int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(*(void *)this, 1785950322);
    *((_DWORD *)this + 2) = SensorChannel;
    *((unsigned char *)this + 25) = 0;
    *((void *)this + 4) = a2;
    *((_DWORD *)this + 17) = 0;
    *((_DWORD *)this + 18) = 0;
    int v20 = 0;
    H16ISP::H16ISPDevice::GetPoolInfo(*(H16ISP::H16ISPDevice **)this, SensorChannel, 29, &v20, 0);
    if (v5)
    {
      NSLog(&cfstr_Jasperdepthnod_3.isa);
    }
    else
    {
      if (H16ISP::H16ISPFrameReceiver::getBufferPool(*((void **)this + 4), 27))
      {
        *((unsigned char *)this + 25) = 1;
      }
      else
      {
        uint64_t v6 = *((void *)this + 4);
        memset(v19, 0, sizeof(v19));
        LODWORD(v17) = 0;
        *(_DWORD *)&v16[20] = 1;
        *(void *)&unsigned char v16[12] = 0;
        *(void *)&unsigned __int8 v16[4] = 10;
        *(_DWORD *)int v16 = 128;
        if (H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v6, 27, v20)) {
          NSLog(&cfstr_Jasperdepthnod_4.isa, v19, 1, *(void *)v16, *(void *)&v16[8], *(void *)&v16[16], 0, @"AF-Assist", 0, 0, 0, 1, v17);
        }
        else {
          *((unsigned char *)this + 25) = 1;
        }
      }
      *((_DWORD *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = H16ISP::H16ISPGetCFPreferenceNumber(@"AutoFocusAssistanceDump", @"com.apple.coremedia", 0);
      int v7 = H16ISP::H16ISPGetCFPreferenceNumber(@"AutoFocusAssistanceVerbose", @"com.apple.coremedia", 0) != 0;
      *((unsigned char *)this + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v7;
      if (*((_DWORD *)this + 10))
      {
        __int16 v8 = NSTemporaryDirectory();
        uint64_t v9 = [v8 stringByAppendingPathComponent:@"JasperAFBuffers"];
        int v10 = (void *)*((void *)this + 7);
        *((void *)this + 7) = v9;

        NSLog(&cfstr_DumpingTofAfBu.isa, *((void *)this + 7));
        uint64_t v11 = [MEMORY[0x263F08850] defaultManager];
        uint64_t v12 = *((void *)this + 7);
        id v18 = 0;
        [v11 createDirectoryAtPath:v12 withIntermediateDirectories:1 attributes:0 error:&v18];
        id v13 = v18;

        uint64_t v14 = objc_opt_new();
        int v15 = (void *)*((void *)this + 6);
        *((void *)this + 6) = v14;

        [*((id *)this + 6) setDateFormat:@"yyyyMMdd-HHmmss-SSS"];
        int v7 = *((unsigned __int8 *)this + 80);
      }
      if (v7) {
        NSLog(&cfstr_Timeofflightau_1.isa, *((unsigned int *)this + 2), *((unsigned __int8 *)this + 24), *((unsigned __int8 *)this + 25), *((unsigned int *)this + 7), 0);
      }
      H16ISP::H16ISPDevice::SetTOFControlMode(*(H16ISP::H16ISPDevice **)this, *((_DWORD *)this + 2), *((unsigned char *)this + 24), *((unsigned char *)this + 25), *((_DWORD *)this + 7), 0);
    }
  }
}

void sub_246863E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPPearlCalibrationNodeBase::H16ISPPearlCalibrationNodeBase(uint64_t a1, uint64_t a2, char a3, char a4, int a5, char a6)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode(a1, 7);
  uint64_t v12 = 0;
  *(void *)uint64_t v13 = &unk_26FAEC340;
  *(void *)(v13 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  *(_DWORD *)(v13 + 88) = -1;
  *(_WORD *)(v13 + 92) = 0;
  *(unsigned char *)(v13 + 94) = a6;
  *(unsigned char *)(v13 + 95) = a3;
  *(unsigned char *)(v13 + 96) = a4;
  uint64_t v14 = (int *)(*(void *)(a2 + 4384) + 16);
  int v15 = 0xFFFF;
  *(_DWORD *)(v13 + 10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a5;
  *(_DWORD *)(v13 + 104) = 2;
  int v16 = 0xFFFF;
  do
  {
    int v18 = *v14;
    v14 += 24;
    int v17 = v18;
    if (v18 == 1718776695 || v17 == 1718775412)
    {
      int v16 = (unsigned __int16)v12;
      *(_WORD *)(a1 + 9pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v12;
    }
    else if (v17 == 1718186595)
    {
      int v15 = (unsigned __int16)v12;
      *(_WORD *)(a1 + 88) = v12;
    }
    ++v12;
  }
  while (v12 != 6);
  if (v16 == 0xFFFF || v15 == 0xFFFF)
  {
    *(_DWORD *)(a1 + 104) = 0;
    int v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v20 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v20;
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPPearlCalibrationNodeBase::H16ISPPearlCalibrationNodeBase();
    }
  }
  return a1;
}

uint64_t H16ISP::JasperConfigManagerInternal::apply(H16ISP::JasperConfigManagerInternal *this, H16ISP::H16ISPDevice *a2, uint64_t a3, unsigned int a4, xpc_connection_t *a5)
{
  if (*((_DWORD *)this + 1) == -1) {
    return 4294954516;
  }
  if (!*((unsigned char *)this + 32))
  {
    H16ISP::setPeridotCalib(a2, a5, (H16ISP::H16ISPServicesRemote *)(unsigned __int16)a3);
    if (*((_DWORD *)this + 1) == 4)
    {
      __int16 v11 = 14083;
      int v12 = a3;
      int v13 = 8;
      uint64_t v14 = -1;
      uint64_t v15 = -1;
      NSLog(&cfstr_SChDSettingBui.isa, "apply", a3, 8);
      uint64_t v9 = H16ISP::H16ISPDevice::ISP_SendCommand(a2, v10, 0x20u, 0, 0xFFFFFFFF);
      if (!v9)
      {
        H16ISP::H16ISPDevice::ISP_SetTimeOfFlightProjectorMode(a2, 1u);
        return 0;
      }
      NSLog(&cfstr_SSettingBuiltI.isa, "apply", v9);
    }
    return 4294954516;
  }

  return H16ISP::JasperConfigManagerInternal::applyFromDictionary(this, a2, a3);
}

mach_timebase_info *H16ISP::H16ISPGraphFrameSyncNode::H16ISPGraphFrameSyncNode(mach_timebase_info *this, H16ISP::H16ISPDevice *a2)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 3);
  void *v4 = &unk_26FAEC250;
  v4[39] = a2;
  for (uint64_t i = 10; i != 37; i += 9)
    bzero(&this[i], 0x48uLL);
  mach_timebase_info(this + 37);
  this[38] = 0;
  return this;
}

void sub_246864150(_Unwind_Exception *a1)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(v1);
  _Unwind_Resume(a1);
}

void H16ISP::H16ISPJasperDepthNode::H16ISPJasperDepthNode(H16ISP::H16ISPJasperDepthNode *this, H16ISP::H16ISPDevice *a2, int a3, int a4, int a5, H16ISP::H16ISPServicesRemote *a6)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 11);
  *(void *)uint64_t v12 = &unk_26FAECDE8;
  *(void *)(v12 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  *(void *)(v12 + 88) = a6;
  *(void *)(v12 + 96) = 0;
  *(void *)(v12 + 104) = 0;
  *(int32x2_t *)(v12 + 112) = vdup_n_s32(0x42F00000u);
  *(_DWORD *)(v12 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a3;
  *(_DWORD *)(v12 + 128) = a4;
  *(_DWORD *)(v12 + 132) = a5;
  *(_DWORD *)(v12 + 136) = 0;
  *(void *)(v12 + 144) = 0;
  *(_WORD *)(v12 + 152) = 0;
  *(void *)(v12 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(unsigned char *)(v12 + 172) = 1;
  mach_timebase_info((mach_timebase_info_t)(v12 + 176));
  *(_OWORD *)((char *)this + 221) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 31) = H16ISP::H16ISPDevice::getSensorChannel((uint64_t)a2, 1785950322);
  *((_DWORD *)this + 58) = H16ISP::H16ISPGetCFPreferenceNumber(@"JasperCongestionLimit", @"com.apple.coremedia", (const __CFString *)2);
  operator new();
}

void sub_246864288(_Unwind_Exception *a1)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode((H16ISP::H16ISPFilterGraphNode *)v1);
  _Unwind_Resume(a1);
}

BOOL H16ISP::H16ISPJasperDepthNode::setGmoShouldDropBeforeWakeup(H16ISP::H16ISPJasperDepthNode *this, char a2)
{
  int v2 = *((unsigned __int8 *)this + 152);
  if (!*((unsigned char *)this + 152)) {
    *((unsigned char *)this + 154) = a2;
  }
  return v2 == 0;
}

uint64_t H16ISP::H16ISPJasperDepthNode::setJasperFrameRateMin(H16ISP::H16ISPJasperDepthNode *this, float a2)
{
  *((float *)this + 28) = a2;
  return objc_msgSend(*(id *)(*((void *)this + 13) + 8), "setJasperFrameRateMin:");
}

uint64_t H16ISP::H16ISPJasperDepthNode::setJasperFrameRateMax(H16ISP::H16ISPJasperDepthNode *this, float a2)
{
  *((float *)this + 29) = a2;
  return objc_msgSend(*(id *)(*((void *)this + 13) + 8), "setJasperFrameRateMax:");
}

BOOL H16ISP::H16ISPJasperDepthNode::setGmoDebugMode(H16ISP::H16ISPJasperDepthNode *this, char a2)
{
  int v2 = *((unsigned __int8 *)this + 152);
  if (!*((unsigned char *)this + 152)) {
    *((unsigned char *)this + 155) = a2;
  }
  return v2 == 0;
}

uint64_t H16ISP::H16ISPJasperDepthNode::setCalibration(uint64_t this, H16ISP::H16ISPTimeOfFlightColorSynchronizer *a2)
{
  *(void *)(this + 96) = a2;
  return this;
}

void H16ISP::H16ISPJasperColorNode::H16ISPJasperColorNode(H16ISP::H16ISPJasperColorNode *this)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 12);
  void *v1 = &unk_26FAECEA0;
  v1[10] = 0;
}

{
  void *v1;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 12);
  void *v1 = &unk_26FAECEA0;
  v1[10] = 0;
}

uint64_t H16ISP::H16ISPJasperColorNode::setCalibration(uint64_t this, H16ISP::H16ISPTimeOfFlightColorSynchronizer *a2)
{
  *(void *)(this + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  return this;
}

uint64_t H16ISP::JasperConfigManager::applyFrameMode(H16ISP::JasperConfigManager *this, H16ISP::H16ISPDevice *a2, unsigned int a3, xpc_connection_t *a4, H16ISP::H16ISPServicesRemote *a5)
{
  return H16ISP::JasperConfigManagerInternal::apply((H16ISP::JasperConfigManagerInternal *)&H16ISP::_frameConfigManager, this, (uint64_t)a2, a4, a4);
}

H16ISP::ProjectorManager *H16ISP::ProjectorManager::setFrameRate(H16ISP::ProjectorManager *this, float a2)
{
  if (a2 == 0.0) {
    a2 = 30.0;
  }
  if (a2 < 256.0) {
    a2 = a2 * 256.0;
  }
  unsigned int v2 = (int)a2 & 0xFFFFFF00;
  if (v2 != *((_DWORD *)this + 102))
  {
    uint64_t v3 = this;
    *((_DWORD *)this + 102) = v2;
    H16ISP::ProjectorManager::initializeAEParams((uint64_t)this);
    unsigned int v4 = *((_DWORD *)v3 + 4);
    return (H16ISP::ProjectorManager *)H16ISP::ProjectorManager::setProjectorType(v3, v4);
  }
  return this;
}

uint64_t H16ISP::H16ISPDevice::EnableALS(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2588;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::ISP_SetTimeOfFlightProjectorMode(H16ISP::H16ISPDevice *this, unsigned int a2)
{
  v4[1] = *MEMORY[0x263EF8340];
  mach_port_t v2 = *((_DWORD *)this + 1106);
  if (!v2) {
    return 3758097084;
  }
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x4Au, v4, 1u, 0, 0);
}

uint64_t H16ISP::H16ISPDevice::SetChargePumpFrequencyIndex(H16ISP::H16ISPDevice *this, __int16 a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 326;
  __int16 v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::ISP_SetCurrentToFClockBanks(uint64_t a1, unsigned int a2, void *inputStruct)
{
  input[1] = *MEMORY[0x263EF8340];
  mach_port_t v3 = *(_DWORD *)(a1 + 4424);
  if (!v3) {
    return 3758097084;
  }
  input[0] = a2;
  return IOConnectCallMethod(v3, 0x48u, input, 1u, inputStruct, 0x84uLL, 0, 0, 0, 0);
}

uint64_t H16ISP::H16ISPDevice::SetTOFPriRandomSwapMode(H16ISP::H16ISPDevice *this, __int16 a2, char a3, __int16 a4, __int16 a5)
{
  bzero(v11, 0x14uLL);
  __int16 v12 = 13064;
  __int16 v13 = a2;
  char v14 = a3;
  __int16 v15 = a4;
  __int16 v16 = a5;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v11, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetPearlControlMode(H16ISP::H16ISPDevice *this, __int16 a2, int a3, int a4, int a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a5)
  {
    bzero(&v10, 0x10uLL);
    LOWORD(v11) = 24583;
    WORD2(v11) = a2;
    LOBYTE(v12) = a3;
    HIBYTE(v12) = a4;
    return H16ISP::H16ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v10, 0x10u, 0, 0xFFFFFFFF);
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO);
    if (result)
    {
      int v10 = 136315650;
      __int16 v11 = "SetPearlControlMode";
      __int16 v12 = 1024;
      int v13 = a4;
      __int16 v14 = 1024;
      int v15 = a3;
      _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "%s - Would have sent command (enable:%d exclusive:%d)\n", (uint8_t *)&v10, 0x18u);
      return 0;
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetTOFControlMode(H16ISP::H16ISPDevice *this, __int16 a2, char a3, char a4, int a5, char a6)
{
  bzero(v13, 0x18uLL);
  __int16 v14 = 13063;
  __int16 v15 = a2;
  char v16 = a3;
  int v17 = a5;
  char v18 = a4;
  char v19 = a6;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v13, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetGDCStrength(H16ISP::H16ISPDevice *this, int a2, float a3, float a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 2631;
  int v11 = a2;
  float v12 = a3;
  float v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t SetAFSearchPositions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 == CFArrayGetTypeID())
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)int v17 = 0u;
    long long v18 = 0u;
    unsigned int Count = CFArrayGetCount((CFArrayRef)a1);
    if (Count >= 0x100) {
      uint64_t v9 = 256;
    }
    else {
      uint64_t v9 = Count;
    }
    if (v9)
    {
      CFIndex v10 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v10);
        CFTypeID v12 = CFGetTypeID(ValueAtIndex);
        if (v12 != CFNumberGetTypeID()) {
          break;
        }
        int valuePtr = 0;
        CFNumberRef v13 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v10);
        CFNumberGetValue(v13, kCFNumberIntType, &valuePtr);
        v17[v10++] = valuePtr;
        if (v9 == v10) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      LODWORD(v1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    if (v10 == v9)
    {
LABEL_12:
      unsigned int v14 = *(unsigned __int16 *)(a2 + 132);
      if (*(void *)(a2 + 3888))
      {
        if (!*(unsigned char *)(a2 + 3908)) {
          v14 |= 0x80000000;
        }
      }
      H16ISP::H16ISPDevice::SetAFSearchPositions(*(H16ISP::H16ISPDevice **)(a4 + 24), v14, v9, v17);
    }
  }
  return 4294954516;
}

void H16ISP::H16ISPDevice::SetAFSearchPositions(H16ISP::H16ISPDevice *this, unsigned int a2, unsigned int a3, unsigned __int8 *a4)
{
}

uint64_t SetAutoFocusMode(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v6 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v6 |= 0x80000000;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFStringGetTypeID()) {
    return 4294954516;
  }
  if (!CFEqual((CFTypeRef)*MEMORY[0x263F2C358], cf))
  {
    if (CFEqual((CFTypeRef)*MEMORY[0x263F2C350], cf))
    {
      int v8 = H16ISP::H16ISPDevice::SetFocusMode(*(H16ISP::H16ISPDevice **)(a4 + 24), v6, 1);
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
      }
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_17;
      }
      int v12 = 67109120;
      int v13 = v8;
      CFIndex v10 = "H16ISPCaptureDevice: SetFocusMode (CISP_AF_FOCUS_MODE_MATRIX), result=0x%08X\n\n";
      goto LABEL_16;
    }
    return 4294954516;
  }
  int v8 = H16ISP::H16ISPDevice::SetFocusMode(*(H16ISP::H16ISPDevice **)(a4 + 24), v6, 0);
  uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v9 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
  }
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
    goto LABEL_17;
  }
  int v12 = 67109120;
  int v13 = v8;
  CFIndex v10 = "H16ISPCaptureDevice: SetFocusMode (CISP_AF_FOCUS_MODE_WEIGHTED_SUM), result=0x%08X\n\n";
LABEL_16:
  _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v12, 8u);
LABEL_17:
  if (v8) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::SetFocusMode(H16ISP::H16ISPDevice *this, int a2, __int16 a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = -31735;
  int v9 = a2;
  __int16 v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t EnablePCEStreamingInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 3784))
  {
    H16ISP::ProjectorManager::setProjectorType(*(H16ISP::ProjectorManager **)(a2 + 4048), *(_DWORD *)(a2 + 3788));
    H16ISP::H16ISPFrameReceiver::setPCEPreset(*(void *)(a2 + 136), *(_DWORD *)(a2 + 3940));
    H16ISP::H16ISPFrameReceiver::setPCEOutputFormat(*(void *)(a2 + 136), *(_DWORD *)(a2 + 3944));
    H16ISP::H16ISPFrameReceiver::setFuseMode(*(void *)(a2 + 136), *(_DWORD *)(a2 + 3948));
    H16ISP::H16ISPFrameReceiver::setHwGdrMode(*(void *)(a2 + 136), *(unsigned char *)(a2 + 3956));
    H16ISP::H16ISPFrameReceiver::setCinVidMode(*(void *)(a2 + 136), *(unsigned char *)(a2 + 3976));
    uint64_t v3 = *(void *)(a2 + 136);
    uint64_t v4 = *(unsigned int *)(a2 + 3936);
    return H16ISP::H16ISPFrameReceiver::EnablePDEStreaming(v3, v4);
  }
  else
  {
    CFArrayRef v7 = *(const __CFArray **)(a2 + 3888);
    if (v7 && CFArrayGetCount(v7))
    {
      unint64_t v8 = 0;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 3888), v8);
        FigCaptureStreamGetFigBaseObject();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (*(_DWORD *)(DerivedStorage + 3932))
        {
          uint64_t v10 = DerivedStorage;
          H16ISP::H16ISPDevice::EnablePDEOutput(*(H16ISP::H16ISPDevice **)(a1 + 24), *(_DWORD *)(DerivedStorage + 132), 1, 1);
          *(_DWORD *)(v10 + 3932) = 0;
        }
        ++v8;
      }
      while (v8 < CFArrayGetCount(*(CFArrayRef *)(a2 + 3888)));
    }
    int v11 = *(_DWORD *)(a2 + 128);
    if (*(unsigned char *)(a2 + 680) && *(_DWORD *)(a2 + 744) > v11) {
      int v11 = *(_DWORD *)(a2 + 744);
    }
    if (*(unsigned char *)(a2 + 880) && *(_DWORD *)(a2 + 944) > v11) {
      int v11 = *(_DWORD *)(a2 + 944);
    }
    if (*(unsigned char *)(a2 + 1080) && *(_DWORD *)(a2 + 1144) > v11) {
      int v11 = *(_DWORD *)(a2 + 1144);
    }
    if (v11 <= 11) {
      int v12 = 11;
    }
    else {
      int v12 = v11;
    }
    if (*(unsigned char *)(a2 + 1280)) {
      int v13 = *(_DWORD *)(a2 + 1344) & ~(*(int *)(a2 + 1344) >> 31);
    }
    else {
      int v13 = 0;
    }
    if (*(unsigned char *)(a2 + 1480) && *(_DWORD *)(a2 + 1544) > v13) {
      int v13 = *(_DWORD *)(a2 + 1544);
    }
    uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      int v15 = 136315650;
      char v16 = "EnablePCEStreamingInFrameReceiver";
      __int16 v17 = 1024;
      int v18 = v13 + v12;
      __int16 v19 = 1024;
      int v20 = 4;
      _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_INFO, "%s - Depth pool size=%d,prime=%d\n", (uint8_t *)&v15, 0x18u);
    }
    H16ISP::H16ISPFrameReceiver::setPCEPreset(*(void *)(a2 + 136), *(_DWORD *)(a2 + 3940));
    H16ISP::H16ISPFrameReceiver::setPCEOutputFormat(*(void *)(a2 + 136), *(_DWORD *)(a2 + 3944));
    H16ISP::H16ISPFrameReceiver::setHwGdrMode(*(void *)(a2 + 136), *(unsigned char *)(a2 + 3956));
    H16ISP::H16ISPFrameReceiver::setCinVidMode(*(void *)(a2 + 136), *(unsigned char *)(a2 + 3976));
    return H16ISP::H16ISPFrameReceiver::EnablePDEStreaming(*(void *)(a2 + 136), *(unsigned int *)(a2 + 3936));
  }
}

uint64_t H16ISP::H16ISPFrameReceiver::setPCEOutputFormat(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  return this;
}

uint64_t H16ISP::H16ISPFrameReceiver::setCinVidMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 29) = a2;
  return this;
}

uint64_t H16ISP::H16ISPFrameReceiver::setPCEPreset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t H16ISP::H16ISPFrameReceiver::setHwGdrMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 28) = a2;
  return this;
}

uint64_t H16ISP::H16ISPDevice::EnablePDEOutput(H16ISP::H16ISPDevice *this, __int16 a2, char a3, char a4)
{
  bzero(v9, 0x10uLL);
  __int16 v10 = 20483;
  __int16 v11 = a2;
  char v12 = a3;
  char v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPFrameReceiver::EnablePDEStreaming(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unsigned int v10 = v9;
  uint64_t v11 = v2;
  uint64_t v89 = *MEMORY[0x263EF8340];
  H16ISP::ValidatePDECalibration(*(H16ISP **)(v2 + 328), (H16ISP::H16ISPDevice *)*(unsigned int *)(v2 + 364));
  unsigned int v12 = *(_DWORD *)(v11 + 16);
  if (H16ISP::H16ISPDevice::isSensorType(*(void *)(v11 + 328), *(_DWORD *)(v11 + 364), 1718186595))
  {
    bzero(v83, 0x68uLL);
    __int16 v84 = 1565;
    int v85 = *(_DWORD *)(v11 + 364);
    int v13 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v11 + 328), v83, 0x68u, 0, 0xFFFFFFFF);
    BOOL v14 = v87 == 10 && v13 == 0;
    int v15 = 1;
    goto LABEL_9;
  }
  if (!H16ISP::H16ISPDevice::isSensorType(*(void *)(v11 + 328), *(_DWORD *)(v11 + 364), 1919246706))
  {
    BOOL v14 = !H16ISP::H16ISPDevice::hasSensorType(*(void *)(v11 + 328), 1718186595);
    int v15 = 3;
LABEL_9:
    if (v14) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = v15;
    }
    goto LABEL_12;
  }
  unsigned int v16 = 5;
LABEL_12:
  if (v12 <= 4) {
    __int16 v17 = (H16ISP::DepthFrontRotatedConfigurations *)v12;
  }
  else {
    __int16 v17 = 0;
  }
  bzero(v79, 0x5B0uLL);
  __int16 v80 = 278;
  int v81 = *(_DWORD *)(v11 + 364);
  int v82 = 45;
  uint64_t v18 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v11 + 328), v79, 0x5B0u, 0, 0xFFFFFFFF);
  if (v18)
  {
    uint64_t v20 = v18;
    uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v21 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v21;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::EnablePDEStreaming();
    }
    return v20;
  }
  switch(v16)
  {
    case 1u:
    case 2u:
      __int16 v84 = 24577;
      int v85 = *(_DWORD *)(v11 + 364);
      bzero(v86, 0x33BCuLL);
      if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v11 + 328), v83, 0x33C8u, 0, 0xFFFFFFFF)|| !v86[0])
      {
        return 0;
      }
      *(_DWORD *)__int16 v77 = v4;
      if (v16 == 2)
      {
        HIDWORD(v76) = H16ISP::DepthFrontRotatedConfigurations::getWidthOfPreset(v17);
        LOWORD(v76) = H16ISP::DepthFrontRotatedConfigurations::getHeightOfPreset(v17);
        BOOL RegistrationOfPreset = H16ISP::DepthFrontRotatedConfigurations::getRegistrationOfPreset(v17);
      }
      else
      {
        if (v16 != 1)
        {
          uint64_t v76 = 0;
          BOOL v24 = 0;
          goto LABEL_34;
        }
        HIDWORD(v76) = H16ISP::DepthFrontConfigurations::getWidthOfPreset(v17);
        LOWORD(v76) = H16ISP::DepthFrontConfigurations::getHeightOfPreset(v17);
        BOOL RegistrationOfPreset = H16ISP::DepthFrontConfigurations::getRegistrationOfPreset(v17);
      }
      BOOL v24 = RegistrationOfPreset;
LABEL_34:
      __int16 v25 = 656;
      int v26 = 608;
      goto LABEL_35;
    case 3u:
      *(_DWORD *)__int16 v77 = v4;
      HIDWORD(v76) = H16ISP::DepthRearConfigurations::getWidthOfPreset(v17);
      LOWORD(v76) = H16ISP::DepthRearConfigurations::getHeightOfPreset(v17);
      BOOL v24 = 0;
      __int16 v25 = 240;
      int v26 = 320;
      goto LABEL_35;
    case 4u:
      *(_DWORD *)__int16 v77 = v4;
      LOWORD(v76) = H16ISP::DepthRearConfigurations::getWidthOfPreset(v17);
      HIDWORD(v76) = H16ISP::DepthRearConfigurations::getHeightOfPreset(v17);
      BOOL v24 = 0;
      __int16 v25 = 320;
      int v26 = 240;
      goto LABEL_35;
    case 5u:
      *(_DWORD *)__int16 v77 = v4;
      HIDWORD(v76) = H16ISP::DepthRearConfigurations::getWidthOfPreset(v17);
      LOWORD(v76) = H16ISP::DepthRearConfigurations::getHeightOfPreset(v17);
      BOOL v24 = 0;
      __int16 v25 = 320;
      int v26 = 240;
      goto LABEL_35;
    default:
      *(_DWORD *)__int16 v77 = v4;
      int v26 = 0;
      __int16 v25 = 0;
      LOWORD(v76) = 0;
      HIDWORD(v76) = 0;
      BOOL v24 = 0;
LABEL_35:
      if ((v10 & 1) != 0
        && H16ISP::H16ISPFrameReceiver::ConfigurePDEBufferPool(v11, (uint64_t)v79, 12, 0, 0xCu, v8, v6, 4, (v10 >> 10) & 4, v26, SHIWORD(v26), v25))
      {
        long long v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          long long v27 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v27;
        }
        uint64_t v20 = 3758097095;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiver::EnablePDEStreaming(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        return v20;
      }
      if ((v10 & 2) != 0
        && H16ISP::H16ISPFrameReceiver::ConfigurePDEBufferPool(v11, (uint64_t)v79, 13, 1, 0xDu, v8, v6, 5, (v10 >> 10) & 4, v26, SHIWORD(v26), v25))
      {
        int v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v35 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v35;
        }
        uint64_t v20 = 3758097095;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiver::EnablePDEStreaming(v35, v36, v37, v38, v39, v40, v41, v42);
        }
        return v20;
      }
      if ((v10 & 4) != 0)
      {
        *(_DWORD *)char v83 = 0;
        v78[0] = 0;
        H16ISP::H16ISPGetYUVSBufferParamsForDataBufferSize(80896, (unsigned int *)v83, v78, v19);
        if (H16ISP::H16ISPFrameReceiver::ConfigurePDEBufferPool(v11, (uint64_t)v79, 14, 2, 0xEu, v8, v6, 7, 0, *(__int16 *)v83, *(__int16 *)&v83[2], v78[0]))
        {
          CFArrayRef v43 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            CFArrayRef v43 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v43;
          }
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::EnablePDEStreaming(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          return 3758097095;
        }
      }
      int v51 = *(_DWORD *)(v11 + 20);
      if (v51 == 1) {
        int v52 = v24 | 2;
      }
      else {
        int v52 = v24;
      }
      if (v51 == 1) {
        int v53 = 11;
      }
      else {
        int v53 = 4;
      }
      if (v51 == 1) {
        int v54 = 30;
      }
      else {
        int v54 = 3;
      }
      int v75 = v54;
      if ((v10 & 8) != 0)
      {
        if (*(unsigned char *)(v11 + 28)) {
          int v55 = v52 | 8;
        }
        else {
          int v55 = v52;
        }
        if (*(unsigned char *)(v11 + 29)) {
          v55 |= 0x10u;
        }
        if (H16ISP::H16ISPFrameReceiver::ConfigurePDEBufferPool(v11, (uint64_t)v79, 15, 3, 0xFu, v8, v6, v53, v55, SWORD2(v76), SHIWORD(v76), v76))
        {
          int v56 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            int v56 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v56;
          }
          uint64_t v20 = 3758097095;
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
            H16ISP::H16ISPFrameReceiver::EnablePDEStreaming(v56, v57, v58, v59, v60, v61, v62, v63);
          }
          return v20;
        }
      }
      int v64 = *(_DWORD *)(v11 + 24);
      if (v64)
      {
        if (v64 == 1)
        {
          if (*(unsigned char *)(v11 + 28) || v16 > 2) {
            goto LABEL_81;
          }
        }
        else if (v16 > 2)
        {
          goto LABEL_88;
        }
        H16ISP::H16ISPFrameReceiver::ConfigurePDEBufferPool(v11, (uint64_t)v79, 16, 5, 0x15u, v8, v6, v53, v52, SWORD2(v76), SHIWORD(v76), v76);
      }
LABEL_81:
      if ((v10 & 0x20) != 0
        && v16 <= 2
        && H16ISP::H16ISPFrameReceiver::ConfigurePDEBufferPool(v11, (uint64_t)v79, 17, 4, 0x11u, v8, v6, v75, v52, SWORD2(v76), SHIWORD(v76), v76))
      {
        int v65 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v65 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v65;
        }
        uint64_t v20 = 3758097095;
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiver::EnablePDEStreaming(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        return v20;
      }
LABEL_88:
      if (!H16ISP::H16ISPDevice::EnableOutofBoundDepth(*(H16ISP::H16ISPDevice **)(v11 + 328), *(_DWORD *)(v11 + 364), v77[0]))
      {
        if (*(_DWORD *)v77)
        {
          if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(v11 + 328), *(_DWORD *)(v11 + 364), 0, v78, v83))
          {
            uint64_t v74 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              uint64_t v74 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v74;
            }
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
              H16ISP::H16ISPFrameReceiver::EnablePDEStreaming();
            }
            return 3758097095;
          }
          H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v11, 25, v88);
        }
        return 0;
      }
      uint64_t v73 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
      {
        uint64_t v73 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v73;
      }
      uint64_t v20 = 3758097095;
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::EnablePDEStreaming();
      }
      return v20;
  }
}

BOOL H16ISP::ValidatePDECalibration(H16ISP *this, H16ISP::H16ISPDevice *a2)
{
  unsigned int v2 = a2;
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v4 = NSDictionary;
  uint64_t v5 = NSString;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&g_baseConfigurationDirectory, (const void **)"calibration", (uint64_t)&v18);
  uint64_t v6 = std::string::append(&v18, ".plist", 6uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v17 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v17 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  uint64_t v9 = objc_msgSend(v4, "dictionaryWithContentsOfFile:", objc_msgSend(v5, "stringWithUTF8String:", v8));
  unsigned int v10 = (void *)v9;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    if (!v10) {
      return 0;
    }
  }
  else if (!v9)
  {
    return 0;
  }
  uint64_t v11 = [v10 objectForKey:@"sensorSerialNum"];
  if (!v11) {
    return 0;
  }
  H16ISP::H16ISPDevice::ISP_GetModuleParams(this, v2, (H16ISPModuleParams *)&v18);
  unsigned int v12 = objc_msgSend(NSString, "stringWithFormat:", @"%02X%02X%02X%02X%02X%02X%02X%02X", v19, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v13 = [v12 compare:v11];
  BOOL v14 = v13 == 0;
  if (v13) {
    NSLog(&cfstr_WarningSerialN.isa, v11, v12);
  }
  return v14;
}

void sub_246865DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  unsigned int v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t H16ISP::H16ISPFrameReceiver::ConfigurePDEBufferPool(uint64_t a1, uint64_t a2, int a3, __int16 a4, unsigned int a5, uint64_t a6, uint64_t a7, int a8, int a9, __int16 a10, __int16 a11, __int16 a12)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(unsigned int *)(a2 + 12);
  uint64_t v13 = &_os_log_internal;
  if (!v12) {
    goto LABEL_13;
  }
  unsigned int v16 = (unsigned __int16 *)(a2 + 18);
  while (*(v16 - 1) != a3)
  {
    v16 += 16;
    if (!--v12) {
      goto LABEL_13;
    }
  }
  int v25 = *v16;
  int64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    int64_t v17 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v17;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v27 = "ConfigurePDEBufferPool";
    __int16 v28 = 1024;
    int v29 = v25;
    _os_log_impl(&dword_24680F000, v17, OS_LOG_TYPE_DEFAULT, "%s - pdePoolID=%d\n", buf, 0x12u);
  }
  if (v25 == 0xFFFF)
  {
LABEL_13:
    unsigned __int8 v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v13)
    {
      unsigned __int8 v19 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v19;
    }
    uint64_t v20 = 3758097095;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiver::ConfigurePDEBufferPool();
    }
  }
  else
  {
    if ((a8 - 6) > 4) {
      LOWORD(v18) = 2;
    }
    else {
      int v18 = dword_2469EDD64[a8 - 6];
    }
    bzero(buf, 0x18uLL);
    LOWORD(v27) = 24578;
    HIDWORD(v27) = *(_DWORD *)(a1 + 364);
    __int16 v28 = a4;
    int v31 = a9;
    LOWORD(v29) = a10;
    HIWORD(v29) = a12;
    __int16 v30 = (v18 * a10 + 63) & 0xFFC0;
    uint64_t v20 = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a1 + 328), buf, 0x18u, 0, 0xFFFFFFFF);
    if (v20)
    {
      unsigned __int8 v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == v13)
      {
        unsigned __int8 v22 = os_log_create("com.apple.isp", "general");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v22;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPFrameReceiver::ConfigurePDEBufferPool();
      }
    }
    else
    {
      H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(a1, a5, v25);
    }
  }
  return v20;
}

uint64_t H16ISP::H16ISPDevice::EnableOutofBoundDepth(H16ISP::H16ISPDevice *this, __int16 a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 354;
  __int16 v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPFrameReceiver::setFuseMode(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t H16ISP::ProjectorManager::setProjectorType(H16ISP::ProjectorManager *this, unsigned int a2)
{
  unsigned int v2 = a2;
  if (a2 == 47)
  {
    if (H16ISP::g_UserDefinedProjectorType)
    {
      return H16ISP::ProjectorManager::applyUserDefinedType(this);
    }
    unsigned int v2 = 0;
  }
  *(void *)((char *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x4000000040;
  __int16 v10 = 1572;
  int v11 = *(_DWORD *)this;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v20, 0, 128);
  uint64_t v5 = H16ISP::ProjectorManager::_projectorSequences[129 * v2];
  if ((int)v5 >= 1)
  {
    size_t v6 = &H16ISP::ProjectorManager::_projectorSequences[129 * v2 + 2];
    long long v7 = v20;
    do
    {
      *(v7 - 64) = *(v6 - 1);
      unsigned int v8 = *v6;
      v6 += 2;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  H16ISP::ProjectorManager::updateOnChange((H16ISP::H16ISPDevice **)this, *((_DWORD *)this + 2 * v2 + 8), *((_DWORD *)this + 2 * v2 + 9));
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(*((H16ISP::H16ISPDevice **)this + 1), v9, 0x12Cu, 0, 0xFFFFFFFF);
  *((_DWORD *)this + 4) = v2;
  return result;
}

H16ISP::H16ISPDevice **H16ISP::ProjectorManager::updateOnChange(H16ISP::H16ISPDevice **this, int a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = this;
    if (*((unsigned char *)this + 416))
    {
      if (*((_DWORD *)this + 103) == a3) {
        return this;
      }
    }
    else
    {
      H16ISP::H16ISPDevice::EnableAE(this[1], *(_DWORD *)this, 0);
      *((unsigned char *)v5 + 416) = 1;
    }
    size_t v6 = v5[1];
    int v7 = *((_DWORD *)v6 + 24);
    if (v7 != *(_DWORD *)v5)
    {
      H16ISP::H16ISPDevice::SetMinimumFrameRate(v6, *(unsigned int *)v5);
      H16ISP::H16ISPDevice::SetMaximumFrameRate(v5[1], *(unsigned int *)v5);
      size_t v6 = v5[1];
      int v7 = *(_DWORD *)v5;
    }
    this = (H16ISP::H16ISPDevice **)H16ISP::H16ISPDevice::SetAEIntegrationTimeAndGains(v6, v7, a2, 256, 256, 256, 0, a3, 0, 0, 0, 0);
    *((_DWORD *)v5 + 103) = a3;
  }
  return this;
}

uint64_t H16ISP::H16ISPDevice::EnableAE(H16ISP::H16ISPDevice *this, unsigned int a2, int a3)
{
  if (*((_DWORD *)this + 1187) <= a2) {
    return 3758097090;
  }
  if (a3)
  {
    bzero(v8, 0xCuLL);
    __int16 v9 = 512;
    unsigned int v10 = a2;
    uint64_t v5 = this;
    unsigned int v6 = 12;
  }
  else
  {
    bzero(v8, 0x10uLL);
    __int16 v9 = 513;
    unsigned int v10 = a2;
    uint64_t v5 = this;
    unsigned int v6 = 16;
  }
  return H16ISP::H16ISPDevice::ISP_SendCommand(v5, v8, v6, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetAEIntegrationTimeAndGains(H16ISP::H16ISPDevice *this, int a2, int a3, __int16 a4, __int16 a5, __int16 a6, int a7, int a8, unsigned int a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int16 a12)
{
  bzero(v21, 0x2CuLL);
  __int16 v22 = 572;
  int v23 = a2;
  int v24 = a3;
  __int16 v25 = a4;
  __int16 v26 = a5;
  __int16 v27 = a6;
  int v28 = a7;
  int v29 = a8;
  unsigned int v30 = a9;
  unsigned __int16 v31 = a10;
  unsigned __int16 v32 = a11;
  unsigned __int16 v33 = a12;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v21, 0x2Cu, 0, 0xFFFFFFFF);
}

uint64_t SetActiveNondisruptiveSwitchingFormats(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  CFArrayRef v7 = *(const __CFArray **)(a2 + 4328);
  if (v7 && (Count = CFArrayGetCount(v7), CFIndex v9 = *(unsigned int *)(a2 + 48), Count > v9))
  {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 4328), v9);
    if (!a1) {
      return 4294954516;
    }
  }
  else
  {
    CFArrayRef ValueAtIndex = 0;
    if (!a1) {
      return 4294954516;
    }
  }
  CFTypeID v11 = CFGetTypeID(a1);
  TypeIOSurfaceID ID = CFArrayGetTypeID();
  uint64_t result = 4294954516;
  if (v11 == TypeID && ValueAtIndex)
  {
    unsigned int valuePtr = 0;
    *(unsigned char *)(a2 + 4464) = 0;
    if (CFArrayGetCount((CFArrayRef)a1) < 1)
    {
      int v16 = 0;
    }
    else
    {
      CFIndex v14 = 0;
      int v15 = 0;
      int v16 = 0;
      do
      {
        CFNumberRef v17 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v14);
        if (v17)
        {
          CFNumberRef v18 = v17;
          CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr);
          v36.CFIndex length = CFArrayGetCount(ValueAtIndex);
          v36.locatiouint64_t n = 0;
          if (CFArrayContainsValue(ValueAtIndex, v36, v18))
          {
            unsigned int v19 = *(_DWORD *)(a2 + 168);
            if (valuePtr < v19) {
              unsigned int v19 = 0;
            }
            unsigned int v20 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * (valuePtr - v19) + 16);
            if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), v20, v25, v34))
            {
              unsigned __int8 v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                unsigned __int8 v21 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v21;
              }
              if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              {
                int v22 = *(_DWORD *)(a2 + 132);
                *(_DWORD *)long long buf = 136315650;
                int v29 = "ActiveNondisruptiveSwitchingFormatsTrackIncludedConfigs";
                __int16 v30 = 1024;
                int v31 = v22;
                __int16 v32 = 1024;
                unsigned int v33 = v20;
                _os_log_error_impl(&dword_24680F000, v21, OS_LOG_TYPE_ERROR, "%s - ch%u: failed to load camera config=%u\n", buf, 0x18u);
              }
            }
            else if (v26 >> 8 >= 0x21 && v27 >> 5 >= 0xBD)
            {
              *(unsigned char *)(a2 + 4464) = 1;
            }
            v16 |= 1 << v20;
          }
        }
        CFIndex v14 = (unsigned __int16)++v15;
      }
      while (CFArrayGetCount((CFArrayRef)a1) > (unsigned __int16)v15);
    }
    uint64_t result = H16ISP::H16ISPDevice::EnableContextSwitching(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v16);
    if (result)
    {
      int v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v23 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        SetActiveNondisruptiveSwitchingFormats();
      }
      return 4294954516;
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableContextSwitching(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x14uLL);
  __int16 v8 = -32510;
  int v9 = a2;
  int v10 = a3;
  int v11 = 0;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x14u, 0, 0xFFFFFFFF);
}

CFIndex SetSensorRawOutputBufferPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFArrayRef v7 = *(const __CFArray **)(a3 + 104);
  if (v7)
  {
    if (CFArrayGetCount(v7))
    {
      unint64_t v8 = 0;
      int v9 = 0;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v8);
        FigCaptureStreamGetFigBaseObject();
        v9 |= 1 << *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 132);
        ++v8;
      }
      while (v8 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
    }
    else
    {
      LOWORD(v9) = 0;
    }
    if (GetNumberOfActiveChannels(*(const __CFArray **)(a3 + 104)))
    {
      int v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v10 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        SetSensorRawOutputBufferPool(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      return 4294954514;
    }
  }
  else
  {
    LOWORD(v9) = 0;
  }
  if (*(void *)(a3 + 136))
  {
    if (H16ISP::H16ISPDevice::SetSharedBufferPoolConfiguration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_WORD *)(a3 + 8) - 1, v9, 1, 0))return 4294954514; {
    CFNumberRef v18 = *(H16ISP::H16ISPFrameReceiverSharedBufferPool **)(a3 + 136);
    }
    if (v18)
    {
      H16ISP::H16ISPFrameReceiverSharedBufferPool::~H16ISPFrameReceiverSharedBufferPool(v18);
      MEMORY[0x24C53D6E0]();
    }
    *(void *)(a3 + 136) = 0;
  }
  if (a1)
  {
    if (!H16ISP::H16ISPDevice::SetSharedBufferPoolConfiguration(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_WORD *)(a3 + 8) - 1, v9, 1, 1)&& !H16ISP::H16ISPDevice::GetSharedBufferPoolInfo(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_WORD *)(a3 + 8) - 1, v9, 1, v21))
    {
      H16ISP::getCVPixelFormat((H16ISP *)v23, v24, *(unsigned __int16 *)v22);
      operator new();
    }
    return 4294954514;
  }
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a3 + 104));
  if (result)
  {
    unint64_t v20 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v20);
      FigCaptureStreamGetFigBaseObject();
      *(void *)(CMBaseObjectGetDerivedStorage() + 4336) = *(void *)(a3 + 136);
      ++v20;
    }
    while (v20 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
    return 0;
  }
  return result;
}

void sub_246866CEC(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10A0C409E841ECDLL);
  _Unwind_Resume(a1);
}

uint64_t CopySensorRawOutputBufferPoolRequirements(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFArrayRef v8 = *(const __CFArray **)(a4 + 104);
  if (v8 && CFArrayGetCount(v8))
  {
    unint64_t v9 = 0;
    int v10 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 104), v9);
      FigCaptureStreamGetFigBaseObject();
      v10 |= 1 << *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 132);
      ++v9;
    }
    while (v9 < CFArrayGetCount(*(CFArrayRef *)(a4 + 104)));
  }
  else
  {
    LOWORD(v1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  if (H16ISP::H16ISPDevice::GetSharedBufferPoolInfo(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_WORD *)(a4 + 8) - 1, v10, 1, v21))
  {
    uint64_t v11 = 0;
    uint64_t result = 4294954513;
  }
  else
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    uint64_t v11 = (__CFDictionary *)result;
    if (result)
    {
      CFNumberRef v14 = CFNumberCreate(v13, kCFNumberSInt16Type, &v22[2]);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F04078], v14);
      CFRelease(v14);
      CFNumberRef v15 = CFNumberCreate(v13, kCFNumberSInt16Type, v22);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F04198], v15);
      CFRelease(v15);
      CFNumberRef v16 = CFNumberCreate(v13, kCFNumberIntType, &v24);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F04240], v16);
      CFRelease(v16);
      CFNumberRef v17 = CFNumberCreate(v13, kCFNumberIntType, (char *)&v24 + 4);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F04118], v17);
      CFRelease(v17);
      CFNumberRef v18 = CFNumberCreate(v13, kCFNumberSInt16Type, &v23);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F041C0], v18);
      CFRelease(v18);
      int valuePtr = H16ISP::getCVPixelFormat((H16ISP *)v26, v27, *(unsigned __int16 *)v25);
      CFNumberRef v19 = CFNumberCreate(v13, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x263F04180], v19);
      CFRelease(v19);
      uint64_t result = 0;
    }
  }
  *a2 = v11;
  return result;
}

uint64_t H16ISP::getCVPixelFormat(H16ISP *this, int a2, int a3)
{
  uint64_t v3 = 1651925816;
  if ((this - 1) >= 3)
  {
    if (this)
    {
      if (this == 5)
      {
        return 1652056888;
      }
      else
      {
        uint64_t v3 = 1651847472;
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s: Unsupported companding mode: %d");
      }
    }
    else
    {
      uint64_t v3 = 1278226488;
      switch(a2)
      {
        case 0:
          return v3;
        case 1:
          if (a3) {
            uint64_t v3 = 1651847472;
          }
          else {
            uint64_t v3 = 1651587122;
          }
          break;
        case 2:
        case 3:
          uint64_t v3 = 1650943796;
          break;
        default:
          if (a2 == 15)
          {
            uint64_t v3 = 1651519798;
          }
          else
          {
            uint64_t v3 = 1651847472;
            fprintf((FILE *)*MEMORY[0x263EF8348], "%s: Invalid pixel format for shared buffer pool, compandingMode:%d, format:%d packType:%d ");
          }
          break;
      }
    }
  }
  return v3;
}

uint64_t H16ISP::H16ISPDevice::GetSharedBufferPoolInfo(H16ISP::H16ISPDevice *a1, __int16 a2, __int16 a3, __int16 a4, void *a5)
{
  bzero(a5, 0x34uLL);
  *((_WORD *)a5 + 2) = 13321;
  *((_WORD *)a5 + 4) = a2;
  *((_WORD *)a5 + 5) = a3;
  *((_WORD *)a5 + 6) = a4;

  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)a5, 0x34u, 0, 0xFFFFFFFF);
}

H16ISP::H16ISPFrameReceiverSharedBufferPool *H16ISP::H16ISPFrameReceiverSharedBufferPool::H16ISPFrameReceiverSharedBufferPool(H16ISP::H16ISPFrameReceiverSharedBufferPool *this, H16ISP::H16ISPDevice *a2, H16ISP::H16ISPFrameReceiverBufferPool *a3, __int16 a4, __int16 a5)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(_OWORD *)((char *)this + 104) = 0u;
  *(void *)this = a2;
  *(_OWORD *)((char *)this + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = a3;
  *((_DWORD *)this + 24) = 0;
  *((_DWORD *)this + 34) = 1065353216;
  *((_WORD *)this + 72) = a4;
  *((_WORD *)this + 73) = a5;
  *((unsigned char *)this + 148) = 0;
  *((void *)this + 19) = 0;
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::clear((void *)this + 13);
  pthread_mutexattr_init(&v7);
  pthread_mutexattr_settype(&v7, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), &v7);
  pthread_mutexattr_destroy(&v7);
  return this;
}

void sub_2468671E8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        unsigned int v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t H16ISP::getFrameFormat(H16ISP *this)
{
  int v1 = (int)this;
  uint64_t result = 0xFFFFFFFFLL;
  if (v1 <= 1651587121)
  {
    if (v1 <= 796419633)
    {
      if (v1 > 758674991)
      {
        if (v1 <= 762869297)
        {
          if (v1 > 762865201)
          {
            if (v1 != 762865202)
            {
              unsigned __int16 v3 = 30256;
              goto LABEL_91;
            }
          }
          else if (v1 != 758674992)
          {
            unsigned __int16 v3 = 26160;
LABEL_91:
            int v19 = v3 | 0x2D780000;
            goto LABEL_110;
          }
LABEL_111:
          bzero(&v27, 0x14uLL);
          uint64_t v25 = 0;
          while (*(_DWORD *)&supportedFormatMap[v25] != v1)
          {
            v25 += 20;
            if (v25 == 1280) {
              return DWORD1(v27);
            }
          }
          goto LABEL_133;
        }
        if (v1 <= 792229423)
        {
          if (v1 != 762869298)
          {
            int v19 = 792225328;
            goto LABEL_110;
          }
          goto LABEL_111;
        }
        if (v1 == 792229424) {
          goto LABEL_111;
        }
        unsigned __int16 v24 = 26160;
        goto LABEL_109;
      }
      if (v1 > 645424689)
      {
        if (v1 <= 645428785)
        {
          if (v1 == 645424690) {
            goto LABEL_111;
          }
          BOOL v16 = v1 == 645428784;
          unsigned int v17 = 23;
          goto LABEL_94;
        }
        if (v1 == 645428786) {
          goto LABEL_111;
        }
        int v19 = 758670896;
LABEL_110:
        if (v1 != v19) {
          return result;
        }
        goto LABEL_111;
      }
      int v4 = 641230384;
      unsigned int v5 = 22;
      if (v1 == 645424688) {
        int v23 = 23;
      }
      else {
        int v23 = -1;
      }
      if (v1 == 641234480) {
        unsigned int v7 = 22;
      }
      else {
        unsigned int v7 = v23;
      }
LABEL_118:
      if (v1 == v4) {
        return v5;
      }
      else {
        return v7;
      }
    }
    if (v1 <= 1530422831)
    {
      if (v1 > 875704421)
      {
        if (v1 <= 1111970368)
        {
          if (v1 == 875704438) {
            unsigned int v18 = 0;
          }
          else {
            unsigned int v18 = -1;
          }
          if (v1 == 875704422) {
            return 0;
          }
          else {
            return v18;
          }
        }
        if (v1 == 1111970369) {
          return 46;
        }
        int v19 = 1278226488;
        goto LABEL_110;
      }
      if (v1 == 796419634 || v1 == 796423728) {
        goto LABEL_111;
      }
      unsigned __int16 v24 = 30258;
LABEL_109:
      int v19 = v24 | 0x2F780000;
      goto LABEL_110;
    }
    if (v1 > 1650943795)
    {
      int v8 = 1650946097;
      if (v1 == 1650946100) {
        int v20 = 2;
      }
      else {
        int v20 = -1;
      }
      if (v1 == 1650946098) {
        unsigned int v10 = 21;
      }
      else {
        unsigned int v10 = v20;
      }
      int v11 = 1650943796;
      int v12 = 2;
      BOOL v13 = v1 == 1650946096;
      int v14 = 20;
    }
    else
    {
      int v8 = 1534617135;
      if (v1 == 1534621232) {
        int v9 = 16;
      }
      else {
        int v9 = -1;
      }
      if (v1 == 1534617136) {
        unsigned int v10 = 16;
      }
      else {
        unsigned int v10 = v9;
      }
      int v11 = 1530422832;
      int v12 = 13;
      BOOL v13 = v1 == 1530426928;
      int v14 = 13;
    }
LABEL_66:
    if (!v13) {
      int v14 = -1;
    }
    if (v1 == v11) {
      unsigned int v22 = v12;
    }
    else {
      unsigned int v22 = v14;
    }
    if (v1 <= v8) {
      return v22;
    }
    else {
      return v10;
    }
  }
  if (v1 > 2016686641)
  {
    if (v1 > 2088265263)
    {
      if (v1 <= 2100848175)
      {
        if (v1 > 2088269359)
        {
          if (v1 == 2088269360) {
            goto LABEL_111;
          }
          unsigned __int16 v15 = 30258;
        }
        else
        {
          if (v1 == 2088265264) {
            goto LABEL_111;
          }
          unsigned __int16 v15 = 26162;
        }
        int v19 = v15 | 0x7C780000;
        goto LABEL_110;
      }
      int v8 = 2105042479;
      if (v1 == 2105046576) {
        int v21 = 17;
      }
      else {
        int v21 = -1;
      }
      if (v1 == 2105042480) {
        unsigned int v10 = 17;
      }
      else {
        unsigned int v10 = v21;
      }
      int v11 = 2100848176;
      int v12 = 14;
      BOOL v13 = v1 == 2100852272;
      int v14 = 14;
      goto LABEL_66;
    }
    if (v1 <= 2037741157)
    {
      if (v1 == 2016686642) {
        goto LABEL_111;
      }
      if (v1 == 2019963440) {
        return 15;
      }
      int v19 = 2019963442;
      goto LABEL_110;
    }
    if (v1 > 2084070959)
    {
      if (v1 == 2084070960) {
        goto LABEL_111;
      }
      int v19 = 2084075056;
      goto LABEL_110;
    }
    int v4 = 2037741158;
    unsigned int v5 = 1;
    BOOL v6 = v1 == 2037741171;
    unsigned int v7 = 1;
    goto LABEL_116;
  }
  if (v1 > 1735553071)
  {
    if (v1 <= 1885745713)
    {
      if (v1 <= 1882468913)
      {
        int v4 = 1735553072;
        unsigned int v5 = 20;
        BOOL v6 = v1 == 1882468912;
        unsigned int v7 = 18;
        goto LABEL_116;
      }
      if (v1 == 1882468914) {
        goto LABEL_111;
      }
      BOOL v16 = v1 == 1885745712;
      unsigned int v17 = 18;
LABEL_94:
      if (v16) {
        return v17;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    if (v1 <= 1919381551)
    {
      if (v1 == 1885745714) {
        goto LABEL_111;
      }
      BOOL v16 = v1 == 1919379252;
      unsigned int v17 = 2;
      goto LABEL_94;
    }
    int v4 = 1919381552;
    unsigned int v5 = 20;
    BOOL v6 = v1 == 2016686640;
    unsigned int v7 = 15;
LABEL_116:
    if (!v6) {
      unsigned int v7 = -1;
    }
    goto LABEL_118;
  }
  if (v1 <= 1652056887)
  {
    if (v1 == 1651587122)
    {
      bzero(&v27, 0x14uLL);
      uint64_t v25 = 0;
      while (*(_DWORD *)&supportedFormatMap[v25] != 1651587122)
      {
        v25 += 20;
        if (v25 == 1280) {
          return DWORD1(v27);
        }
      }
      goto LABEL_133;
    }
    if (v1 != 1651847472)
    {
      int v19 = 1651925816;
      goto LABEL_110;
    }
    bzero(&v27, 0x14uLL);
    uint64_t v25 = 0;
    while (*(_DWORD *)&supportedFormatMap[v25] != 1651847472)
    {
      v25 += 20;
      if (v25 == 1280) {
        return DWORD1(v27);
      }
    }
  }
  else
  {
    if (v1 > 1734505011)
    {
      int v4 = 1734505012;
      unsigned int v5 = 2;
      BOOL v6 = v1 == 1735549492;
      unsigned int v7 = 2;
      goto LABEL_116;
    }
    if (v1 != 1652056888)
    {
      BOOL v16 = v1 == 1734504496;
      unsigned int v17 = 20;
      goto LABEL_94;
    }
    bzero(&v27, 0x14uLL);
    uint64_t v25 = 0;
    while (*(_DWORD *)&supportedFormatMap[v25] != 1652056888)
    {
      v25 += 20;
      if (v25 == 1280) {
        return DWORD1(v27);
      }
    }
  }
LABEL_133:
  unsigned __int16 v26 = &supportedFormatMap[v25];
  long long v27 = *(_OWORD *)v26;
  int v28 = *((_DWORD *)v26 + 4);
  return DWORD1(v27);
}

uint64_t H16ISP::H16ISPDevice::SetSharedBufferPoolConfiguration(H16ISP::H16ISPDevice *this, __int16 a2, __int16 a3, __int16 a4, char a5)
{
  bzero(v11, 0x14uLL);
  __int16 v12 = 13320;
  __int16 v13 = a2;
  __int16 v14 = a3;
  char v15 = a5;
  int v17 = 1;
  __int16 v16 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v11, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t SetLuxAdaptiveParameters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  uint64_t v54 = a4;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D8D0]);
  CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D8C8]);
  CFArrayRef v10 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2DA70]);
  CFArrayRef v11 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2DA68]);
  CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D8E0]);
  CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D8D8]);
  CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D8C0]);
  CFArrayRef v55 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D8B8]);
  if (Value) {
    BOOL v15 = v9 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    int v16 = 0;
    unsigned int v17 = 0;
  }
  else
  {
    CFIndex Count = CFArrayGetCount(Value);
    if (Count <= 8
      && (uint64_t v20 = Count, CFArrayGetCount(v9) == Count)
      && (H16ISP::H16ISPDevice::GetLuxAdaptiveSettings(*(H16ISP::H16ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 132), 0, &v75), !v21))
    {
      LOWORD(v67) = 0;
      HIDWORD(v68) = v76;
      bzero((char *)&v67 + 2, 0x1AuLL);
      WORD1(v67) = v20;
      if (v20 >= 1)
      {
        for (CFIndex i = 0; i != v20; ++i)
        {
          LODWORD(v65) = 0;
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(Value, i);
          CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &v65);
          *((_WORD *)&v67 + i + 2) = v65;
          CFNumberRef v38 = (const __CFNumber *)CFArrayGetValueAtIndex(v9, i);
          CFNumberGetValue(v38, kCFNumberIntType, &v65);
          *((unsigned char *)&v68 + i + 4) = v65;
        }
      }
      unsigned int v17 = -12780;
      if (H16ISP::H16ISPDevice::DisableKnobManualMode(*(H16ISP::H16ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 132), 0))
      {
        int v16 = 0;
      }
      else
      {
        uint64_t v45 = *(H16ISP::H16ISPDevice **)(v54 + 24);
        int v46 = *(_DWORD *)(a2 + 132);
        v60[0] = v67;
        v60[1] = v68;
        int v47 = H16ISP::H16ISPDevice::SetLuxAdaptiveSettings(v45, v46, v60);
        int v16 = v47 == 0;
        if (v47) {
          unsigned int v17 = -12780;
        }
        else {
          unsigned int v17 = 0;
        }
      }
    }
    else
    {
      int v16 = 0;
      unsigned int v17 = -12780;
    }
  }
  if (v10) {
    BOOL v22 = v11 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22) {
    goto LABEL_21;
  }
  CFIndex v23 = CFArrayGetCount(v10);
  if (v23 > 8
    || (uint64_t v24 = v23, CFArrayGetCount(v11) != v23)
    || (H16ISP::H16ISPDevice::GetLuxAdaptiveSettings(*(H16ISP::H16ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 132), 1, &v73), v25))
  {
    unsigned int v17 = -12780;
LABEL_21:
    CFArrayRef v26 = v55;
    goto LABEL_22;
  }
  LOWORD(v65) = 1;
  HIDWORD(v66) = v74;
  bzero((char *)&v65 + 2, 0x1AuLL);
  WORD1(v65) = v24;
  if (v24 >= 1)
  {
    for (CFIndex j = 0; j != v24; ++j)
    {
      LODWORD(v63) = 0;
      CFNumberRef v40 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, j);
      CFNumberGetValue(v40, kCFNumberIntType, &v63);
      *((_WORD *)&v65 + j + 2) = v63;
      CFNumberRef v41 = (const __CFNumber *)CFArrayGetValueAtIndex(v11, j);
      CFNumberGetValue(v41, kCFNumberIntType, &v63);
      *((unsigned char *)&v66 + j + 4) = v63;
    }
  }
  CFArrayRef v26 = v55;
  if (H16ISP::H16ISPDevice::DisableKnobManualMode(*(H16ISP::H16ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 132), 1))
  {
    unsigned int v17 = -12780;
  }
  else
  {
    uint64_t v48 = *(H16ISP::H16ISPDevice **)(v54 + 24);
    int v49 = *(_DWORD *)(a2 + 132);
    v59[0] = v65;
    v59[1] = v66;
    if (H16ISP::H16ISPDevice::SetLuxAdaptiveSettings(v48, v49, v59)) {
      unsigned int v17 = -12780;
    }
    else {
      ++v16;
    }
  }
LABEL_22:
  if (v12 && v13)
  {
    CFIndex v27 = CFArrayGetCount(v12);
    if (v27 <= 8)
    {
      uint64_t v28 = v27;
      if (CFArrayGetCount(v13) == v27)
      {
        H16ISP::H16ISPDevice::GetLuxAdaptiveSettings(*(H16ISP::H16ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 132), 2, &v71);
        if (!v29)
        {
          LOWORD(v63) = 2;
          HIDWORD(v64) = v72;
          bzero((char *)&v63 + 2, 0x1AuLL);
          WORD1(v63) = v28;
          if (v28 >= 1)
          {
            for (CFIndex k = 0; k != v28; ++k)
            {
              LODWORD(v61) = 0;
              CFNumberRef v43 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, k);
              CFNumberGetValue(v43, kCFNumberIntType, &v61);
              *((_WORD *)&v63 + k + 2) = v61;
              CFNumberRef v44 = (const __CFNumber *)CFArrayGetValueAtIndex(v13, k);
              CFNumberGetValue(v44, kCFNumberIntType, &v61);
              *((unsigned char *)&v64 + k + 4) = v61;
            }
          }
          if (H16ISP::H16ISPDevice::DisableKnobManualMode(*(H16ISP::H16ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 132), 2))
          {
            unsigned int v17 = -12780;
          }
          else
          {
            int v52 = *(H16ISP::H16ISPDevice **)(v54 + 24);
            int v53 = *(_DWORD *)(a2 + 132);
            v58[0] = v63;
            v58[1] = v64;
            if (H16ISP::H16ISPDevice::SetLuxAdaptiveSettings(v52, v53, v58)) {
              unsigned int v17 = -12780;
            }
            else {
              ++v16;
            }
          }
          CFArrayRef v26 = v55;
          if (!v14) {
            goto LABEL_38;
          }
          goto LABEL_29;
        }
      }
    }
    unsigned int v17 = -12780;
  }
  if (v14)
  {
LABEL_29:
    if (v26)
    {
      CFIndex v30 = CFArrayGetCount(v14);
      if (v30 > 8) {
        goto LABEL_37;
      }
      uint64_t v31 = v30;
      if (CFArrayGetCount(v26) != v30) {
        goto LABEL_37;
      }
      H16ISP::H16ISPDevice::GetLuxAdaptiveSettings(*(H16ISP::H16ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 132), 4, &v69);
      if (v32) {
        goto LABEL_37;
      }
      LOWORD(v61) = 4;
      HIDWORD(v62) = v70;
      bzero((char *)&v61 + 2, 0x1AuLL);
      WORD1(v61) = v31;
      if (v31 >= 1)
      {
        for (CFIndex m = 0; m != v31; ++m)
        {
          int valuePtr = 0;
          CFNumberRef v34 = (const __CFNumber *)CFArrayGetValueAtIndex(v14, m);
          CFNumberGetValue(v34, kCFNumberIntType, &valuePtr);
          *((_WORD *)&v61 + m + 2) = valuePtr;
          CFNumberRef v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, m);
          CFNumberGetValue(v35, kCFNumberIntType, &valuePtr);
          *((unsigned char *)&v62 + m + 4) = valuePtr;
        }
      }
      if (H16ISP::H16ISPDevice::DisableKnobManualMode(*(H16ISP::H16ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 132), 4))
      {
LABEL_37:
        unsigned int v17 = -12780;
      }
      else
      {
        uint64_t v50 = *(H16ISP::H16ISPDevice **)(v54 + 24);
        int v51 = *(_DWORD *)(a2 + 132);
        v57[0] = v61;
        v57[1] = v62;
        if (H16ISP::H16ISPDevice::SetLuxAdaptiveSettings(v50, v51, v57)) {
          unsigned int v17 = -12780;
        }
        else {
          ++v16;
        }
      }
    }
  }
LABEL_38:
  if (v16) {
    return v17;
  }
  else {
    return 4294954516;
  }
}

uint64_t H16ISP::H16ISPDevice::SetLuxAdaptiveSettings(H16ISP::H16ISPDevice *a1, int a2, long long *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  bzero(v8, 0x2CuLL);
  __int16 v9 = 2581;
  int v10 = a2;
  long long v6 = a3[1];
  long long v11 = *a3;
  long long v12 = v6;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v8, 0x2Cu, 0, 0xFFFFFFFF);
}

double H16ISP::H16ISPDevice::GetLuxAdaptiveSettings(H16ISP::H16ISPDevice *a1, int a2, __int16 a3, _OWORD *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  bzero(v9, 0x2CuLL);
  __int16 v10 = 2582;
  int v11 = a2;
  __int16 v12 = a3;
  if (!H16ISP::H16ISPDevice::ISP_SendCommand(a1, v9, 0x2Cu, 0, 0xFFFFFFFF))
  {
    *a4 = *(_OWORD *)v13;
    double result = *(double *)&v13[14];
    *(_OWORD *)((char *)a4 + 14) = *(_OWORD *)&v13[14];
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::DisableKnobManualMode(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2580;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t ___ZN6H16ISP19H16ISPFrameReceiver20ProcessFrameMetadataEP10__CVBufferPyNS_33H16ISPFrameReceiverBufferPoolTypeEbPh_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  notify_set_state(*(_DWORD *)(v1 + 476), 0xFFFFuLL);
  unsigned int v2 = *(const char **)(v1 + 464);

  return notify_post(v2);
}

void H16ISP::JasperConfigManagerInternal::setFrameModeDictionaryLocation(H16ISP::JasperConfigManagerInternal *this, NSString *a2)
{
  int v4 = [(NSString *)a2 lastPathComponent];
  unsigned int v5 = [(NSString *)a2 stringByDeletingLastPathComponent];
  long long v6 = (void *)*((void *)this + 2);
  if (v6)
  {

    *((void *)this + 2) = 0;
  }
  CFTypeID v7 = (void *)*((void *)this + 3);
  if (v7)
  {

    *((void *)this + 3) = 0;
  }
  *((unsigned char *)this + 32) = 1;
  if (!v4 || (uint64_t v8 = [(__CFString *)v4 length], !a2) || !v8) {
    int v4 = @"JasperFrameModes.plist";
  }
  *((void *)this + 2) = [(__CFString *)v4 copy];
  if (!v5 || (uint64_t v9 = [(__CFString *)v5 length], !a2) || !v9) {
    unsigned int v5 = @"/var/mobile/Documents/JasperL";
  }
  int v10 = (void *)[(__CFString *)v5 copy];
  *((void *)this + 3) = v10;
  uint64_t v11 = [v10 stringByAppendingPathComponent:*((void *)this + 2)];
  char v12 = objc_msgSend((id)objc_msgSend(MEMORY[0x263F08850], "defaultManager"), "fileExistsAtPath:", v11);
  if (a2)
  {
    NSLog(&cfstr_JasperFrameCon_13.isa, v11);
  }
  else if ((v12 & 1) == 0)
  {
    *((unsigned char *)this + 32) = 0;
  }
}

uint64_t H16ISP::H16ISPMotionManagerInitializationThread(pthread_mutex_t *this, H16ISP::H16ISPMotionManager *a2)
{
  pthread_setname_np("H16ISPMotionManagerInitializationThread");
  id v3 = objc_alloc_init(MEMORY[0x263F01788]);
  if (v3)
  {
    int v4 = v3;
    if (objc_opt_respondsToSelector())
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
      v8[0] = MEMORY[0x263EF8330];
      v8[1] = 3221225472;
      v8[2] = ___ZN6H16ISPL39H16ISPMotionManagerInitializationThreadEPNS_19H16ISPMotionManagerE_block_invoke;
      v8[3] = &__block_descriptor_40_e11_v24__0Q8Q16l;
      unsigned __int8 v8[4] = this;
      [v4 setSidebandTimeSyncHandler:v8];
      v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - rep;
      if (v6.__d_.__rep_ >= 501000000) {
        printf("H16ISPMotionManager: setSidebandTimeSyncHandler delayed, execution time %llu ms\n", (unint64_t)v6.__d_.__rep_ / 0xF4240);
      }
    }
    else
    {
      puts("H16ISPMotionManager::EnableMotionDataFeedToISPCPU - CMMotionManager doesn't support setSidebandTimeSyncHandler");
    }
    pthread_mutex_lock(this + 1);
    *(void *)this->__opaque = v4;
    pthread_mutex_unlock(this + 1);
  }
  return 0;
}

uint64_t SetMatrixFocusParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C410]);
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C400]);
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C3F8]);
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C408]);
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C3F0]);
  BOOL v13 = !Value || v9 == 0;
  if (v13 || v10 == 0) {
    return 4294954516;
  }
  CFNumberRef v16 = v12;
  int valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  *(_DWORD *)CFIndex v23 = 0;
  CFNumberGetValue(v9, kCFNumberIntType, v23);
  *(_DWORD *)BOOL v22 = 0;
  CFNumberGetValue(v10, kCFNumberIntType, v22);
  *(_DWORD *)int v21 = 0;
  if (v11) {
    CFNumberGetValue(v11, kCFNumberIntType, v21);
  }
  else {
    *(_DWORD *)int v21 = 20;
  }
  *(_DWORD *)uint64_t v20 = 0;
  if (v16) {
    CFNumberGetValue(v16, kCFNumberIntType, v20);
  }
  else {
    *(_DWORD *)uint64_t v20 = 42;
  }
  int v17 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v17 |= 0x80000000;
  }
  int v18 = H16ISP::H16ISPDevice::SetAFMatrixModeConfig(*(H16ISP::H16ISPDevice **)(a4 + 24), v17, valuePtr, v23[0], v22[0], v21[0], v20[0]);
  int v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v19 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v26 = v18;
    _os_log_impl(&dword_24680F000, v19, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetAFMatrixModeConfig, result=0x%08X\n\n", buf, 8u);
  }
  if (v18) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::SetAFMatrixModeConfig(H16ISP::H16ISPDevice *this, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7)
{
  bzero(v15, 0x18uLL);
  __int16 v16 = -31733;
  int v17 = a2;
  __int16 v18 = a3;
  __int16 v19 = a4;
  __int16 v20 = a5;
  __int16 v21 = a6;
  __int16 v22 = a7;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v15, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t CopyVideoOutputConfigurations(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v335 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a3 + 674))
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t result = 4294954509;
    goto LABEL_323;
  }
  uint64_t v8 = (unsigned int *)(a3 + 132);
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), 1785950322);
  uint64_t v323 = *(void *)(*(void *)(a5 + 24) + 4384);
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    uint64_t result = 4294954510;
    goto LABEL_323;
  }
  BOOL v322 = isSensorType;
  uint64_t v324 = a5;
  CFNumberRef v12 = (uint64_t *)(a3 + 700);
  CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v14 = (const void **)MEMORY[0x263EFFB38];
  BOOL v15 = (const void **)MEMORY[0x263EFFB40];
  if (v13)
  {
    __int16 v16 = v13;
    CFNumberRef v17 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 688));
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E850], v17);
    CFRelease(v17);
    CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 696));
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E898], v18);
    CFRelease(v18);
    CFNumberRef v19 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 700));
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E8D0], v19);
    CFRelease(v19);
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 704));
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E880], v20);
    CFRelease(v20);
    DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 712));
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E858], DictionaryRepresentation);
    CFRelease(DictionaryRepresentation);
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 744));
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E8A0], v22);
    CFRelease(v22);
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 748));
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E820], v23);
    CFRelease(v23);
    uint64_t v24 = *v14;
    int v25 = (const void *)*MEMORY[0x263EFFB40];
    if (*(unsigned char *)(a3 + 752)) {
      int v26 = (const void *)*MEMORY[0x263EFFB40];
    }
    else {
      int v26 = *v14;
    }
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E818], v26);
    if (*(unsigned char *)(a3 + 754)) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = v24;
    }
    BOOL v15 = (const void **)MEMORY[0x263EFFB40];
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E9B8], v27);
    if (*(unsigned char *)(v323 + 621))
    {
      if (*(unsigned char *)(a3 + 755)) {
        uint64_t v28 = v15;
      }
      else {
        uint64_t v28 = v14;
      }
      CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E9B0], *v28);
    }
    if (H16ISP::H16ISPDevice::isSensorType(*(void *)(v324 + 24), *v8, 1919251319) && *(unsigned char *)(v323 + 621))
    {
      bzero(&__dst, 0x78uLL);
      unsigned int v29 = *(_DWORD *)(a3 + 48);
      unsigned int v30 = *(_DWORD *)(a3 + 168);
      if (v29 < v30) {
        unsigned int v30 = 0;
      }
      uint64_t v31 = (unsigned int *)(*(void *)(a3 + 160) + 120 * (v29 - v30));
      memmove(&__dst, v31, 0x78uLL);
      int32x4_t v330 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(a3 + 712)), (int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(a3 + 728)));
      uint64_t v329 = *v12;
      int CameraConfig = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(v324 + 24), *(_DWORD *)(a3 + 132), v31[4], v331, &valuePtr);
      uint64_t v34 = &_os_log_internal;
      if (CameraConfig)
      {
        CFNumberRef v35 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v35 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v35;
        }
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          CopyVideoOutputConfigurations();
        }
      }
      H16ISP::H16ISPDevice::GetGDCMaxStrength(*(H16ISP::H16ISPDevice **)(v324 + 24), *(_DWORD *)(a3 + 132), (uint64_t)&__dst, v331, (float *)(a3 + 760), v33);
      if (v36)
      {
        uint64_t v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v34)
        {
          uint64_t v37 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v37;
        }
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          CopyVideoOutputConfigurations();
        }
      }
      CFNumberRef v38 = CFNumberCreate(0, kCFNumberFloat32Type, (const void *)(a3 + 756));
      CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E878], v38);
      CFRelease(v38);
      CFNumberRef v39 = CFNumberCreate(0, kCFNumberFloat32Type, (const void *)(a3 + 760));
      CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E8A8], v39);
      CFRelease(v39);
      CFNumberRef v12 = (uint64_t *)(a3 + 700);
      uint64_t v14 = (const void **)MEMORY[0x263EFFB38];
      BOOL v15 = (const void **)MEMORY[0x263EFFB40];
    }
    CFNumberRef v40 = *(const void **)(a3 + 824);
    if (v40) {
      CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E828], v40);
    }
    LODWORD(valuePtr) = 64;
    CFNumberRef v41 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E830], v41);
    CFRelease(v41);
    LODWORD(valuePtr) = 128;
    CFNumberRef v42 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E840], v42);
    CFRelease(v42);
    int v43 = dword_26B11BA34;
    LODWORD(valuePtr) = dword_26B11BA34;
    if (!dword_26B11BA34)
    {
      unsigned int v44 = *(_DWORD *)(a3 + 48);
      unsigned int v45 = *(_DWORD *)(a3 + 168);
      if (v44 < v45) {
        unsigned int v45 = 0;
      }
      int v43 = *(_DWORD *)(*(void *)(a3 + 160) + 120 * (v44 - v45) + 116);
    }
    LODWORD(valuePtr) = v43 - *(_DWORD *)(a3 + 68) + 1;
    if (H16ISP::H16ISPDevice::isSensorType(*(void *)(v324 + 24), *(_DWORD *)(a3 + 132), 1919246706))
    {
      if (*(void *)(v324 + 184))
      {
        char SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(v324 + 24), 1785950322);
        int v47 = *(_WORD **)(v324 + 184);
        uint64_t v48 = (unsigned __int16)*v47;
        if (*v47)
        {
          int v49 = v47 + 14;
          while (1)
          {
            int v50 = *v49;
            v49 += 4;
            if (((1 << SensorChannel) & v50) != 0) {
              break;
            }
            if (!--v48) {
              goto LABEL_46;
            }
          }
          LODWORD(valuePtr) = valuePtr + 2;
        }
      }
    }
LABEL_46:
    CFNumberRef v52 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2E838], v52);
    CFRelease(v52);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E918], v16);
    CFRelease(v16);
  }
  if (v322) {
    goto LABEL_150;
  }
  CFMutableDictionaryRef v53 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v53)
  {
    uint64_t v54 = v53;
    CFNumberRef v55 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 888));
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E850], v55);
    CFRelease(v55);
    CFNumberRef v56 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 896));
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E898], v56);
    CFRelease(v56);
    CFNumberRef v57 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 900));
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E8D0], v57);
    CFRelease(v57);
    CFNumberRef v58 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 904));
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E880], v58);
    CFRelease(v58);
    CFDictionaryRef v59 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 912));
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E858], v59);
    CFRelease(v59);
    CFNumberRef v60 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 944));
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E8A0], v60);
    CFRelease(v60);
    CFNumberRef v61 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 948));
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E820], v61);
    CFRelease(v61);
    long long v62 = *v14;
    long long v63 = *v15;
    if (*(unsigned char *)(a3 + 952)) {
      long long v64 = v63;
    }
    else {
      long long v64 = *v14;
    }
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E818], v64);
    if (*(unsigned char *)(a3 + 954)) {
      long long v65 = v63;
    }
    else {
      long long v65 = v62;
    }
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E9B8], v65);
    long long v66 = *(const void **)(a3 + 1024);
    if (v66) {
      CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E828], v66);
    }
    LODWORD(valuePtr) = 64;
    CFNumberRef v67 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E830], v67);
    CFRelease(v67);
    LODWORD(valuePtr) = 128;
    CFNumberRef v68 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E840], v68);
    CFRelease(v68);
    int v69 = dword_26B11BA34;
    LODWORD(valuePtr) = dword_26B11BA34;
    if (!dword_26B11BA34)
    {
      unsigned int v70 = *(_DWORD *)(a3 + 48);
      unsigned int v71 = *(_DWORD *)(a3 + 168);
      if (v70 < v71) {
        unsigned int v71 = 0;
      }
      int v69 = *(_DWORD *)(*(void *)(a3 + 160) + 120 * (v70 - v71) + 116);
    }
    LODWORD(valuePtr) = v69 - *(_DWORD *)(a3 + 68) + 1;
    BOOL v72 = H16ISP::H16ISPDevice::isSensorType(*(void *)(v324 + 24), *(_DWORD *)(a3 + 132), 1919246706);
    BOOL v15 = (const void **)MEMORY[0x263EFFB40];
    if (v72)
    {
      if (*(void *)(v324 + 184))
      {
        char v73 = H16ISP::H16ISPDevice::getSensorChannel(*(void *)(v324 + 24), 1785950322);
        int v74 = *(_WORD **)(v324 + 184);
        uint64_t v75 = (unsigned __int16)*v74;
        if (*v74)
        {
          int v76 = v74 + 14;
          while (1)
          {
            int v77 = *v76;
            v76 += 4;
            if (((1 << v73) & v77) != 0) {
              break;
            }
            if (!--v75) {
              goto LABEL_69;
            }
          }
          LODWORD(valuePtr) = valuePtr + 2;
        }
      }
    }
LABEL_69:
    CFNumberRef v78 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v54, (const void *)*MEMORY[0x263F2E838], v78);
    CFRelease(v78);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E928], v54);
    CFRelease(v54);
  }
  CFMutableDictionaryRef v79 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v79)
  {
    __int16 v80 = v79;
    CFNumberRef v81 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 1088));
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E850], v81);
    CFRelease(v81);
    CFNumberRef v82 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1096));
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E898], v82);
    CFRelease(v82);
    CFNumberRef v83 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1100));
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E8D0], v83);
    CFRelease(v83);
    CFNumberRef v84 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1104));
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E880], v84);
    CFRelease(v84);
    CFDictionaryRef v85 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 1112));
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E858], v85);
    CFRelease(v85);
    CFNumberRef v86 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1144));
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E8A0], v86);
    CFRelease(v86);
    CFNumberRef v87 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1148));
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E820], v87);
    CFRelease(v87);
    if (*(unsigned char *)(a3 + 1152)) {
      int v88 = v15;
    }
    else {
      int v88 = v14;
    }
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E818], *v88);
    uint64_t v89 = *(const void **)(a3 + 1224);
    if (v89) {
      CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E828], v89);
    }
    LODWORD(valuePtr) = 64;
    CFNumberRef v90 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E830], v90);
    CFRelease(v90);
    LODWORD(valuePtr) = 128;
    CFNumberRef v91 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E840], v91);
    CFRelease(v91);
    int v92 = dword_26B11BA34;
    LODWORD(valuePtr) = dword_26B11BA34;
    if (!dword_26B11BA34)
    {
      unsigned int v93 = *(_DWORD *)(a3 + 48);
      unsigned int v94 = *(_DWORD *)(a3 + 168);
      if (v93 < v94) {
        unsigned int v94 = 0;
      }
      int v92 = *(_DWORD *)(*(void *)(a3 + 160) + 120 * (v93 - v94) + 116);
    }
    LODWORD(valuePtr) = v92 - *(_DWORD *)(a3 + 68) + 1;
    CFNumberRef v95 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v80, (const void *)*MEMORY[0x263F2E838], v95);
    CFRelease(v95);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E900], v80);
    CFRelease(v80);
  }
  CFMutableDictionaryRef v96 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v96)
  {
    int v97 = v96;
    int v320 = a2;
    CFNumberRef v98 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 1288));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E850], v98);
    CFRelease(v98);
    CFNumberRef v99 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1296));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E898], v99);
    CFRelease(v99);
    unint64_t v100 = v12 + 75;
    CFNumberRef v101 = CFNumberCreate(0, kCFNumberSInt32Type, v12 + 75);
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E8D0], v101);
    CFRelease(v101);
    CFNumberRef v102 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1304));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E880], v102);
    CFRelease(v102);
    CFDictionaryRef v103 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 1312));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E858], v103);
    CFRelease(v103);
    CFNumberRef v104 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1344));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E8A0], v104);
    CFRelease(v104);
    CFNumberRef v105 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1348));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E820], v105);
    CFRelease(v105);
    int v106 = *v14;
    int v107 = *v15;
    if (*(unsigned char *)(a3 + 1352)) {
      unsigned int v108 = *v15;
    }
    else {
      unsigned int v108 = v106;
    }
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E818], v108);
    if (*(unsigned char *)(a3 + 1400)) {
      CFTypeID v109 = v107;
    }
    else {
      CFTypeID v109 = v106;
    }
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E540], v109);
    CFNumberRef v110 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1404));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E538], v110);
    CFRelease(v110);
    CFNumberRef v111 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1408));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E520], v111);
    CFRelease(v111);
    int v327 = *(_DWORD *)(a3 + 3992);
    CFNumberRef v112 = CFNumberCreate(0, kCFNumberIntType, &v327);
    if (v112)
    {
      CFNumberRef v113 = v112;
      CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E580], v112);
      CFRelease(v113);
    }
    if (*(unsigned char *)(a3 + 1364)) {
      char v114 = v107;
    }
    else {
      char v114 = v106;
    }
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E550], v114);
    CFNumberRef v115 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1368));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E558], v115);
    CFRelease(v115);
    BOOL v326 = *(_DWORD *)(a3 + 1372) == 1;
    CFNumberRef v116 = CFNumberCreate(0, kCFNumberSInt32Type, &v326);
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E548], v116);
    CFRelease(v116);
    if (*(unsigned char *)(a3 + 1464)) {
      CFDictionaryRef v117 = v107;
    }
    else {
      CFDictionaryRef v117 = v106;
    }
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E560], v117);
    if (*(unsigned char *)(a3 + 1376)) {
      unsigned int v118 = v107;
    }
    else {
      unsigned int v118 = v106;
    }
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E518], v118);
    CFNumberRef v119 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1468));
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E528], v119);
    CFRelease(v119);
    int v120 = *(const void **)(a3 + 1424);
    if (v120) {
      CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E828], v120);
    }
    int v325 = 64;
    CFNumberRef v121 = CFNumberCreate(0, kCFNumberSInt32Type, &v325);
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E830], v121);
    CFRelease(v121);
    int v325 = 128;
    CFNumberRef v122 = CFNumberCreate(0, kCFNumberSInt32Type, &v325);
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E840], v122);
    CFRelease(v122);
    int v325 = 0;
    CFNumberRef v123 = CFNumberCreate(0, kCFNumberSInt32Type, &v325);
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E838], v123);
    CFRelease(v123);
    uint64_t v14 = (const void **)MEMORY[0x263EFFB38];
    if (*(unsigned char *)(v323 + 621))
    {
      if (*(unsigned char *)(a3 + 1355)) {
        int v124 = v15;
      }
      else {
        int v124 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E9B0], *v124);
    }
    if (H16ISP::H16ISPDevice::isSensorType(*(void *)(v324 + 24), *v8, 1919251319) && *(unsigned char *)(v323 + 621))
    {
      bzero(&__dst, 0x78uLL);
      unsigned int v125 = *(_DWORD *)(a3 + 48);
      unsigned int v126 = *(_DWORD *)(a3 + 168);
      if (v125 < v126) {
        unsigned int v126 = 0;
      }
      unsigned int v127 = (unsigned int *)(*(void *)(a3 + 160) + 120 * (v125 - v126));
      memmove(&__dst, v127, 0x78uLL);
      int32x4_t v330 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(a3 + 1312)), (int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(a3 + 1328)));
      uint64_t v329 = *v100;
      if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(v324 + 24), *(_DWORD *)(a3 + 132), v127[4], v331, &valuePtr))
      {
        v129 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v129 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v129;
        }
        if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR)) {
          CopyVideoOutputConfigurations();
        }
      }
      H16ISP::H16ISPDevice::GetGDCMaxStrength(*(H16ISP::H16ISPDevice **)(v324 + 24), *(_DWORD *)(a3 + 132), (uint64_t)&__dst, v331, (float *)(a3 + 1360), v128);
      if (v130)
      {
        int v131 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v131 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v131;
        }
        BOOL v132 = os_log_type_enabled(v131, OS_LOG_TYPE_ERROR);
        BOOL v15 = (const void **)MEMORY[0x263EFFB40];
        if (v132) {
          CopyVideoOutputConfigurations();
        }
      }
      CFNumberRef v133 = CFNumberCreate(0, kCFNumberFloat32Type, (const void *)(a3 + 1356));
      CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E878], v133);
      CFRelease(v133);
      CFNumberRef v134 = CFNumberCreate(0, kCFNumberFloat32Type, (const void *)(a3 + 1360));
      CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E8A8], v134);
      CFRelease(v134);
    }
    if (*(unsigned char *)(a3 + 3928))
    {
      float v135 = (const void **)MEMORY[0x263F04028];
      a2 = v320;
    }
    else
    {
      uint64_t v136 = *(int *)(a3 + 152);
      a2 = v320;
      if (v136 > 2)
      {
LABEL_126:
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E930], v97);
        CFRelease(v97);
        goto LABEL_127;
      }
      float v135 = (const void **)qword_2651E8E38[v136];
    }
    CFDictionarySetValue(v97, (const void *)*MEMORY[0x263F2E568], *v135);
    goto LABEL_126;
  }
LABEL_127:
  CFMutableDictionaryRef v137 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v137)
  {
    v138 = v137;
    CFNumberRef v139 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 1488));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E850], v139);
    CFRelease(v139);
    CFNumberRef v140 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1496));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E898], v140);
    CFRelease(v140);
    CFNumberRef v141 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1500));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E8D0], v141);
    CFRelease(v141);
    CFNumberRef v142 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1504));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E880], v142);
    CFRelease(v142);
    CFDictionaryRef v143 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 1512));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E858], v143);
    CFRelease(v143);
    CFNumberRef v144 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1544));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E8A0], v144);
    CFRelease(v144);
    CFNumberRef v145 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1548));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E820], v145);
    CFRelease(v145);
    __int16 v146 = v15;
    int v147 = *v14;
    double v148 = *v146;
    if (*(unsigned char *)(a3 + 1552)) {
      double v149 = *v146;
    }
    else {
      double v149 = *v14;
    }
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E818], v149);
    if (*(unsigned char *)(a3 + 1600)) {
      uint64_t v150 = v148;
    }
    else {
      uint64_t v150 = v147;
    }
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E540], v150);
    CFNumberRef v151 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1604));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E538], v151);
    CFRelease(v151);
    CFNumberRef v152 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1608));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E520], v152);
    CFRelease(v152);
    LODWORD(valuePtr) = *(_DWORD *)(a3 + 3992);
    CFNumberRef v153 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v153)
    {
      CFNumberRef v154 = v153;
      CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E580], v153);
      CFRelease(v154);
    }
    if (*(unsigned char *)(a3 + 1564)) {
      CFTypeID v155 = v148;
    }
    else {
      CFTypeID v155 = v147;
    }
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E550], v155);
    CFNumberRef v156 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1568));
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E558], v156);
    CFRelease(v156);
    *(_DWORD *)unsigned int v331 = *(_DWORD *)(a3 + 1572) == 1;
    CFNumberRef v157 = CFNumberCreate(0, kCFNumberSInt32Type, v331);
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E548], v157);
    CFRelease(v157);
    if (*(unsigned char *)(a3 + 1576)) {
      v158 = v148;
    }
    else {
      v158 = v147;
    }
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E518], v158);
    uint64_t v159 = *(const void **)(a3 + 1624);
    if (v159) {
      CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E828], v159);
    }
    int __dst = 64;
    CFNumberRef v160 = CFNumberCreate(0, kCFNumberSInt32Type, &__dst);
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E830], v160);
    CFRelease(v160);
    int __dst = 128;
    CFNumberRef v161 = CFNumberCreate(0, kCFNumberSInt32Type, &__dst);
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E840], v161);
    CFRelease(v161);
    int __dst = 0;
    CFNumberRef v162 = CFNumberCreate(0, kCFNumberSInt32Type, &__dst);
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E838], v162);
    CFRelease(v162);
    BOOL v15 = (const void **)MEMORY[0x263EFFB40];
    if (*(unsigned char *)(a3 + 3928))
    {
      uint64_t v163 = (const void **)MEMORY[0x263F04028];
    }
    else
    {
      uint64_t v164 = *(int *)(a3 + 152);
      if (v164 > 2)
      {
LABEL_149:
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E938], v138);
        CFRelease(v138);
        goto LABEL_150;
      }
      uint64_t v163 = (const void **)qword_2651E8E38[v164];
    }
    CFDictionarySetValue(v138, (const void *)*MEMORY[0x263F2E568], *v163);
    goto LABEL_149;
  }
LABEL_150:
  if (ConfigSupportsContextSwitchCaptures(a3, v324, 0, 0))
  {
    CFMutableDictionaryRef v165 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v165)
    {
      int v166 = v165;
      CFNumberRef v167 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 1688));
      CFDictionarySetValue(v166, (const void *)*MEMORY[0x263F2E850], v167);
      CFRelease(v167);
      CFNumberRef v168 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1696));
      CFDictionarySetValue(v166, (const void *)*MEMORY[0x263F2E898], v168);
      CFRelease(v168);
      CFNumberRef v169 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1700));
      CFDictionarySetValue(v166, (const void *)*MEMORY[0x263F2E8D0], v169);
      CFRelease(v169);
      CFNumberRef v170 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1704));
      CFDictionarySetValue(v166, (const void *)*MEMORY[0x263F2E880], v170);
      CFRelease(v170);
      CFDictionaryRef v171 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 1712));
      CFDictionarySetValue(v166, (const void *)*MEMORY[0x263F2E858], v171);
      CFRelease(v171);
      CFNumberRef v172 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1744));
      CFDictionarySetValue(v166, (const void *)*MEMORY[0x263F2E8A0], v172);
      CFRelease(v172);
      CFNumberRef v173 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1748));
      CFDictionarySetValue(v166, (const void *)*MEMORY[0x263F2E820], v173);
      CFRelease(v173);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E940], v166);
      CFRelease(v166);
    }
  }
  CFMutableDictionaryRef v174 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v174)
  {
    CVPixelBufferRef v175 = v174;
    CFNumberRef v176 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 2288));
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E850], v176);
    CFRelease(v176);
    CFNumberRef v177 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2296));
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E898], v177);
    CFRelease(v177);
    CFNumberRef v178 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2300));
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E8D0], v178);
    CFRelease(v178);
    CFNumberRef v179 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2304));
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E880], v179);
    CFRelease(v179);
    CFDictionaryRef v180 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 2312));
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E858], v180);
    CFRelease(v180);
    CFNumberRef v181 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2344));
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E8A0], v181);
    CFRelease(v181);
    CFNumberRef v182 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2348));
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E820], v182);
    CFRelease(v182);
    v183 = *v14;
    int v184 = (const void *)*MEMORY[0x263EFFB40];
    if (*(unsigned char *)(a3 + 2352)) {
      uint64_t v185 = (const void *)*MEMORY[0x263EFFB40];
    }
    else {
      uint64_t v185 = *v14;
    }
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E818], v185);
    if (*(unsigned char *)(a3 + 2364)) {
      uint64_t v186 = v184;
    }
    else {
      uint64_t v186 = v183;
    }
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E550], v186);
    CFNumberRef v187 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2368));
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E558], v187);
    CFRelease(v187);
    LODWORD(valuePtr) = *(_DWORD *)(a3 + 2372) == 1;
    CFNumberRef v188 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E548], v188);
    CFRelease(v188);
    if (*(unsigned char *)(a3 + 2376)) {
      CVPixelBufferRef v189 = v184;
    }
    else {
      CVPixelBufferRef v189 = v183;
    }
    BOOL v15 = (const void **)MEMORY[0x263EFFB40];
    CFDictionarySetValue(v175, (const void *)*MEMORY[0x263F2E518], v189);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E948], v175);
    CFRelease(v175);
  }
  if (*(unsigned char *)(a3 + 3784))
  {
    CFMutableDictionaryRef v190 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v190)
    {
      v191 = v190;
      CFNumberRef v192 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 1888));
      CFDictionarySetValue(v191, (const void *)*MEMORY[0x263F2E850], v192);
      CFRelease(v192);
      CFNumberRef v193 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1944));
      CFDictionarySetValue(v191, (const void *)*MEMORY[0x263F2E8A0], v193);
      CFRelease(v193);
      if (*(unsigned char *)(a3 + 1952)) {
        uint64_t v194 = v15;
      }
      else {
        uint64_t v194 = v14;
      }
      CFDictionarySetValue(v191, (const void *)*MEMORY[0x263F2E818], *v194);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E8F8], v191);
      CFRelease(v191);
    }
  }
  if (*(unsigned char *)(a3 + 3784)) {
    int v195 = 1;
  }
  else {
    int v195 = v322;
  }
  if (v195 == 1)
  {
    CFMutableDictionaryRef v196 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v196)
    {
      CVPixelBufferRef v197 = v196;
      CFNumberRef v198 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 2088));
      CFDictionarySetValue(v197, (const void *)*MEMORY[0x263F2E850], v198);
      CFRelease(v198);
      CFNumberRef v199 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2096));
      CFDictionarySetValue(v197, (const void *)*MEMORY[0x263F2E898], v199);
      CFRelease(v199);
      CFNumberRef v200 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2100));
      CFDictionarySetValue(v197, (const void *)*MEMORY[0x263F2E8D0], v200);
      CFRelease(v200);
      CFNumberRef v201 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2104));
      CFDictionarySetValue(v197, (const void *)*MEMORY[0x263F2E880], v201);
      CFRelease(v201);
      CFNumberRef v202 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2144));
      CFDictionarySetValue(v197, (const void *)*MEMORY[0x263F2E8A0], v202);
      CFRelease(v202);
      CFDictionarySetValue(v197, (const void *)*MEMORY[0x263F2E818], *v15);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E920], v197);
      CFRelease(v197);
    }
  }
  CFMutableDictionaryRef v203 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  float v204 = v203;
  if (v322)
  {
    if (v203)
    {
      CFNumberRef v205 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 3616));
      CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E850], v205);
      CFRelease(v205);
      CFNumberRef v206 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 3628));
      CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E868], v206);
      CFRelease(v206);
      CFNumberRef v207 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 3624));
      CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E898], v207);
      CFRelease(v207);
      CFNumberRef v208 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 3632));
      CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E890], v208);
      CFRelease(v208);
      CFNumberRef v209 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 3636));
      CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E8A0], v209);
      CFRelease(v209);
      if (*(unsigned char *)(a3 + 3640)) {
        CFDataRef v210 = v15;
      }
      else {
        CFDataRef v210 = v14;
      }
      CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E818], *v210);
      v211 = *(const void **)(a3 + 3664);
      if (v211) {
        CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E828], v211);
      }
      int v212 = (__CFString *)*MEMORY[0x263F2E910];
LABEL_195:
      CFDictionarySetValue(Mutable, v212, v204);
      CFRelease(v204);
    }
  }
  else if (v203)
  {
    CFNumberRef v213 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 2488));
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E850], v213);
    CFRelease(v213);
    CFNumberRef v214 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2496));
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E898], v214);
    CFRelease(v214);
    CFNumberRef v215 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2620));
    CFDictionarySetValue(v204, @"VisPipeRawBitDepth", v215);
    CFRelease(v215);
    CFNumberRef v216 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2500));
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E8D0], v216);
    CFRelease(v216);
    CFNumberRef v217 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2504));
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E880], v217);
    CFRelease(v217);
    CFDictionaryRef v218 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 2512));
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E858], v218);
    CFRelease(v218);
    CFNumberRef v219 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 2544));
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E8A0], v219);
    CFRelease(v219);
    if (*(unsigned char *)(a3 + 2552)) {
      int32x2_t v220 = v15;
    }
    else {
      int32x2_t v220 = v14;
    }
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E818], *v220);
    int v221 = *(const void **)(a3 + 2624);
    if (v221) {
      CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E828], v221);
    }
    LODWORD(valuePtr) = 64;
    CFNumberRef v222 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E830], v222);
    CFRelease(v222);
    LODWORD(valuePtr) = 128;
    CFNumberRef v223 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E840], v223);
    CFRelease(v223);
    int v224 = dword_26B11BA34;
    LODWORD(valuePtr) = dword_26B11BA34;
    if (!dword_26B11BA34)
    {
      unsigned int v225 = *(_DWORD *)(a3 + 48);
      unsigned int v226 = *(_DWORD *)(a3 + 168);
      if (v225 < v226) {
        unsigned int v226 = 0;
      }
      int v224 = *(_DWORD *)(*(void *)(a3 + 160) + 120 * (v225 - v226) + 116);
    }
    LODWORD(valuePtr) = v224 + 1;
    CFNumberRef v227 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v204, (const void *)*MEMORY[0x263F2E838], v227);
    CFRelease(v227);
    int v212 = @"VisPipe";
    goto LABEL_195;
  }
  CFMutableDictionaryRef v228 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v228)
  {
    v229 = v228;
    if (!*(unsigned char *)(a3 + 2795)) {
      goto LABEL_249;
    }
    int v230 = (unsigned __int16 *)malloc_type_calloc(2uLL, 0x20uLL, 0x1000040E0EAB150uLL);
    v231 = v230;
    v321 = a2;
    if (v230)
    {
      *int v230 = 34;
      v230[16] = 39;
      if (H16ISP::H16ISPDevice::GetPoolInfoBatched(*(H16ISP::H16ISPDevice **)(v324 + 24), *v8, v230, 2))
      {
        int v232 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v232 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v232;
        }
        if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR)) {
          CopyVideoOutputConfigurations();
        }
      }
      else
      {
        int v249 = 1278226481;
        *(_DWORD *)(a3 + 2856) = *((_DWORD *)v231 + 2);
        int v250 = *((_DWORD *)v231 + 4);
        *(_DWORD *)(a3 + 2864) = *((_DWORD *)v231 + 5);
        *(_DWORD *)(a3 + 2868) = v231[3];
        *(_DWORD *)(a3 + 2872) = v231[2];
        *(_DWORD *)(a3 + 288pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v231[7];
        *(_DWORD *)(a3 + 2876) = v231[6];
        *(_WORD *)(a3 + 2896) = v231[1];
        *(_DWORD *)(a3 + 2892) = *((_DWORD *)v231 + 6);
        *(_DWORD *)(a3 + 2888) = *v231;
        if (*(_DWORD *)(a3 + 2832) == 2 && !*(_DWORD *)(a3 + 2800))
        {
          if (*(_DWORD *)(a3 + 2804)) {
            int v249 = 1278226481;
          }
          else {
            int v249 = 1651519537;
          }
        }
        *(_DWORD *)(a3 + 286pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 8 * v250;
        *(void *)(a3 + 290pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x2A00000020;
        *(_DWORD *)(a3 + 2908) = v249;
        int v251 = *((_DWORD *)v231 + 10);
        *(_DWORD *)(a3 + 2952) = v251;
        *(_DWORD *)(a3 + 2968) = v231[18];
        *(_DWORD *)(a3 + 2976) = v231[23];
        *(_WORD *)(a3 + 2992) = v231[17];
        *(_DWORD *)(a3 + 2988) = *((_DWORD *)v231 + 14);
        *(_DWORD *)(a3 + 2984) = v231[16];
        *(_DWORD *)(a3 + 2956) = v251;
        *(_DWORD *)(a3 + 296pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
        *(_DWORD *)(a3 + 2964) = v251;
        *(_DWORD *)(a3 + 2972) = 8;
        *(_DWORD *)(a3 + 2996) = 33;
        *(void *)(a3 + 300pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x4C3030380000002BLL;
      }
    }
    else
    {
      v241 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v241 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v241;
      }
      if (os_log_type_enabled(v241, OS_LOG_TYPE_ERROR)) {
        CopyVideoOutputConfigurations(v241, v242, v243, v244, v245, v246, v247, v248);
      }
    }
    free(v231);
    CopyMetadataOutputFeatureConfiguration(v229, (uint64_t *)(a3 + 2840));
    if (*(_DWORD *)(a3 + 2832) != 2)
    {
LABEL_242:
      CopyMetadataOutputFeatureConfiguration(v229, (uint64_t *)(a3 + 2936));
      *(void *)&long long valuePtr = 0;
      v276 = (const void *)*MEMORY[0x263F2CC88];
      int ValueIfPresent = CFDictionaryGetValueIfPresent(v229, (const void *)*MEMORY[0x263F2CC88], (const void **)&valuePtr);
      if (!ValueIfPresent) {
        *(void *)&long long valuePtr = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      }
      CFNumberRef v278 = CFNumberCreate(v10, kCFNumberSInt32Type, (const void *)(a3 + 2952));
      if (v278)
      {
        CFNumberRef v279 = v278;
        CFDictionarySetValue((CFMutableDictionaryRef)valuePtr, (const void *)*MEMORY[0x263F2E868], v278);
        CFRelease(v279);
      }
      if (!ValueIfPresent)
      {
        CFDictionarySetValue(v229, v276, (const void *)valuePtr);
        CFRelease((CFTypeRef)valuePtr);
      }
      a2 = v321;
LABEL_249:
      if (!*(unsigned char *)(a3 + 2796))
      {
LABEL_272:
        if (*(unsigned char *)(a3 + 2797))
        {
          if (*(unsigned char *)(a3 + 3496))
          {
            BOOL v297 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              BOOL v297 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v297;
            }
            if (os_log_type_enabled(v297, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr) = 136315138;
              *(void *)((char *)&valuePtr + 4) = "HITHFeatureGetPoolRequirements";
              _os_log_impl(&dword_24680F000, v297, OS_LOG_TYPE_DEFAULT, "%s - using cached HITH pool info\n", (uint8_t *)&valuePtr, 0xCu);
            }
          }
          else
          {
            H16ISP::H16ISPDevice::GetPoolInfoExtended(*(H16ISP::H16ISPDevice **)(v324 + 24), *v8, 42, &valuePtr);
            if (v298)
            {
              __int16 v299 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                __int16 v299 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v299;
              }
              if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR)) {
                CopyVideoOutputConfigurations();
              }
            }
            else
            {
              *(_DWORD *)(a3 + 3432) = DWORD2(valuePtr);
              *(void *)(a3 + 3436) = v333;
              *(_DWORD *)(a3 + 3444) = WORD3(valuePtr);
              *(_DWORD *)(a3 + 3448) = WORD2(valuePtr);
              int v300 = HIWORD(valuePtr);
              *(_DWORD *)(a3 + 3456) = HIWORD(valuePtr);
              *(_WORD *)(a3 + 3472) = WORD1(valuePtr);
              *(_DWORD *)(a3 + 3468) = v334;
              *(_DWORD *)(a3 + 3464) = (unsigned __int16)valuePtr;
              *(_DWORD *)(a3 + 3476) = 39;
              *(void *)(a3 + 348pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x354331360000002DLL;
              *(_DWORD *)(a3 + 3452) = v300;
              *(unsigned char *)(a3 + 3496) = 1;
            }
          }
          CopyMetadataOutputFeatureConfiguration(v229, (uint64_t *)(a3 + 3416));
        }
        if (*(unsigned char *)(a3 + 2701))
        {
          int v301 = (const void *)*MEMORY[0x263EFFB40];
          v302 = (const void *)*MEMORY[0x263EFFB38];
          if (*(unsigned char *)(a3 + 2697)) {
            v303 = (const void *)*MEMORY[0x263EFFB40];
          }
          else {
            v303 = (const void *)*MEMORY[0x263EFFB38];
          }
          CFDictionarySetValue(v229, (const void *)*MEMORY[0x263F2E208], v303);
          if (*(unsigned char *)(a3 + 2699)) {
            v304 = v301;
          }
          else {
            v304 = v302;
          }
          CFDictionarySetValue(v229, (const void *)*MEMORY[0x263F2CD18], v304);
          if (*(unsigned char *)(a3 + 2698)) {
            v305 = v301;
          }
          else {
            v305 = v302;
          }
          CFDictionarySetValue(v229, (const void *)*MEMORY[0x263F2CCE8], v305);
          if (*(unsigned char *)(a3 + 2696)) {
            int v306 = v301;
          }
          else {
            int v306 = v302;
          }
          CFDictionarySetValue(v229, (const void *)*MEMORY[0x263F2CCF8], v306);
          if (*(unsigned char *)(a3 + 2792)) {
            char v307 = v301;
          }
          else {
            char v307 = v302;
          }
          CFDictionarySetValue(v229, (const void *)*MEMORY[0x263F2CCA0], v307);
          if (*(unsigned char *)(a3 + 2713)) {
            int v308 = v301;
          }
          else {
            int v308 = v302;
          }
          CFDictionarySetValue(v229, (const void *)*MEMORY[0x263F2CCB8], v308);
          if (*(unsigned char *)(a3 + 2714)) {
            uint64_t v309 = v301;
          }
          else {
            uint64_t v309 = v302;
          }
          CFDictionarySetValue(v229, (const void *)*MEMORY[0x263F2CCE0], v309);
        }
        if (*(unsigned char *)(a3 + 2798))
        {
          if (*(unsigned char *)(a3 + 3592))
          {
            long long v310 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              long long v310 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v310;
            }
            if (os_log_type_enabled(v310, OS_LOG_TYPE_INFO))
            {
              LODWORD(valuePtr) = 136315138;
              *(void *)((char *)&valuePtr + 4) = "ANSTThumbnailFeatureGetPoolRequirements";
              _os_log_impl(&dword_24680F000, v310, OS_LOG_TYPE_INFO, "%s - using cached ANST Thumbnail pool info\n", (uint8_t *)&valuePtr, 0xCu);
            }
          }
          else
          {
            H16ISP::H16ISPDevice::GetPoolInfoExtended(*(H16ISP::H16ISPDevice **)(v324 + 24), *v8, 44, &valuePtr);
            if (v311)
            {
              long long v312 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                long long v312 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v312;
              }
              if (os_log_type_enabled(v312, OS_LOG_TYPE_ERROR)) {
                CopyVideoOutputConfigurations();
              }
            }
            else
            {
              *(_DWORD *)(a3 + 3528) = DWORD2(valuePtr);
              *(void *)(a3 + 3532) = v333;
              *(_DWORD *)(a3 + 354pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = WORD3(valuePtr);
              *(_DWORD *)(a3 + 3544) = WORD2(valuePtr);
              *(_DWORD *)(a3 + 3552) = HIWORD(valuePtr);
              *(_DWORD *)(a3 + 3548) = WORD6(valuePtr);
              *(_WORD *)(a3 + 3568) = WORD1(valuePtr);
              *(_DWORD *)(a3 + 3564) = v334;
              *(_DWORD *)(a3 + 356pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (unsigned __int16)valuePtr;
              *(_DWORD *)(a3 + 3572) = 41;
              *(_DWORD *)(a3 + 3576) = H16ISP::getFrameFormat((H16ISP *)0x42475241);
              *(_DWORD *)(a3 + 358pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1111970369;
              *(_DWORD *)(a3 + 3548) = *(_DWORD *)(a3 + 3552);
              *(unsigned char *)(a3 + 3592) = 1;
            }
          }
          CopyMetadataOutputFeatureConfiguration(v229, (uint64_t *)(a3 + 3512));
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2E908], v229);
        CFRelease(v229);
        goto LABEL_322;
      }
      uint64_t v280 = 0;
      char v281 = 1;
      do
      {
        v281 &= *(unsigned char *)(a3 + 3112 + v280) != 0;
        v280 += 96;
      }
      while (v280 != 384);
      if (v281)
      {
        uint64_t v282 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v282 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v282;
        }
        if (os_log_type_enabled(v282, OS_LOG_TYPE_INFO))
        {
          LODWORD(valuePtr) = 136315138;
          *(void *)((char *)&valuePtr + 4) = "ANSTFeatureGetPoolRequirements";
          _os_log_impl(&dword_24680F000, v282, OS_LOG_TYPE_INFO, "%s - using cached semantic masks pool info\n", (uint8_t *)&valuePtr, 0xCu);
        }
      }
      else
      {
        uint64_t v283 = (unsigned __int16 *)malloc_type_calloc(4uLL, 0x20uLL, 0x1000040E0EAB150uLL);
        if (v283)
        {
          v284 = v283;
          uint64_t v285 = 0;
          uint64_t v286 = v283;
          do
          {
            *uint64_t v286 = v285 + 35;
            v286 += 16;
            ++v285;
          }
          while (v285 != 4);
          if (H16ISP::H16ISPDevice::GetPoolInfoBatched(*(H16ISP::H16ISPDevice **)(v324 + 24), *v8, v283, 4))
          {
            uint64_t v287 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v287 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v287;
            }
            if (os_log_type_enabled(v287, OS_LOG_TYPE_ERROR)) {
              CopyVideoOutputConfigurations();
            }
          }
          else
          {
            uint64_t v313 = 0;
            uint64_t v314 = v284 + 7;
            v315 = &dword_2469DACB0;
            do
            {
              uint64_t v316 = a3 + v313;
              *(_DWORD *)(v316 + 3048) = *(_DWORD *)(v314 - 3);
              *(void *)(a3 + v313 + 3052) = *(void *)(v314 + 1);
              *(_DWORD *)(v316 + 306pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(v314 - 4);
              *(_DWORD *)(v316 + 3064) = *(v314 - 5);
              unsigned int v317 = *v314;
              *(_WORD *)(v316 + 3088) = *(v314 - 6);
              *(_DWORD *)(v316 + 3084) = *(_DWORD *)(v314 + 5);
              *(_DWORD *)(v316 + 308pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(v314 - 7);
              *(int32x2_t *)(a3 + v313 + 3068) = vdup_n_s32(v317);
              int v318 = *v315++;
              *(_DWORD *)(v316 + 3092) = v318;
              *(void *)(v316 + 3096) = 0x4C30303800000007;
              *(unsigned char *)(v316 + 3112) = 1;
              v313 += 96;
              v314 += 16;
            }
            while (v313 != 384);
          }
          goto LABEL_270;
        }
        int v288 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v288 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v288;
        }
        if (os_log_type_enabled(v288, OS_LOG_TYPE_ERROR)) {
          CopyVideoOutputConfigurations(v288, v289, v290, v291, v292, v293, v294, v295);
        }
      }
      v284 = 0;
LABEL_270:
      free(v284);
      for (uint64_t i = 0; i != 384; i += 96)
        CopyMetadataOutputFeatureConfiguration(v229, (uint64_t *)(a3 + 3032 + i));
      goto LABEL_272;
    }
    *(void *)&long long valuePtr = 0;
    int v252 = (const void *)*MEMORY[0x263F2CCA8];
    int v253 = CFDictionaryGetValueIfPresent(v229, (const void *)*MEMORY[0x263F2CCA8], (const void **)&valuePtr);
    if (v253)
    {
      if ((void)valuePtr)
      {
LABEL_221:
        CFNumberRef v254 = CFNumberCreate(v10, kCFNumberSInt32Type, (const void *)(a3 + 2800));
        if (v254)
        {
          CFNumberRef v255 = v254;
          CFDictionarySetValue((CFMutableDictionaryRef)valuePtr, (const void *)*MEMORY[0x263F2CBC0], v254);
          CFRelease(v255);
        }
        CFNumberRef v256 = CFNumberCreate(v10, kCFNumberSInt32Type, (const void *)(a3 + 2804));
        if (v256)
        {
          CFNumberRef v257 = v256;
          CFDictionarySetValue((CFMutableDictionaryRef)valuePtr, (const void *)*MEMORY[0x263F2CBC8], v256);
          CFRelease(v257);
        }
        CFNumberRef v258 = CFNumberCreate(v10, kCFNumberSInt32Type, (const void *)(a3 + 2808));
        if (v258)
        {
          CFNumberRef v259 = v258;
          CFDictionarySetValue((CFMutableDictionaryRef)valuePtr, (const void *)*MEMORY[0x263F2CBD0], v258);
          CFRelease(v259);
        }
        v319 = v8;
        CFNumberRef v260 = CFNumberCreate(v10, kCFNumberSInt32Type, (const void *)(a3 + 2812));
        if (v260)
        {
          CFNumberRef v261 = v260;
          CFDictionarySetValue((CFMutableDictionaryRef)valuePtr, (const void *)*MEMORY[0x263F2CBB8], v260);
          CFRelease(v261);
        }
        CFMutableArrayRef v262 = CFArrayCreateMutable(v10, 4, MEMORY[0x263EFFF70]);
        if (v262)
        {
          v263 = v262;
          uint64_t v264 = v252;
          for (uint64_t j = 0; j != 16; j += 4)
          {
            CFNumberRef v266 = CFNumberCreate(v10, kCFNumberSInt32Type, (const void *)(a3 + 2816 + j));
            if (v266)
            {
              CFNumberRef v267 = v266;
              CFArrayAppendValue(v263, v266);
              CFRelease(v267);
            }
          }
          CFRelease(v263);
          int v252 = v264;
        }
        uint64_t v8 = v319;
        if (!v253)
        {
          CFDictionarySetValue(v229, v252, (const void *)valuePtr);
          CFRelease((CFTypeRef)valuePtr);
        }
        goto LABEL_242;
      }
    }
    else
    {
      *(void *)&long long valuePtr = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if ((void)valuePtr) {
        goto LABEL_221;
      }
    }
    v268 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v268 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v268;
    }
    if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR)) {
      CopyVideoOutputConfigurations(v268, v269, v270, v271, v272, v273, v274, v275);
    }
    goto LABEL_242;
  }
  int v233 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v233 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v233;
  }
  uint64_t result = os_log_type_enabled(v233, OS_LOG_TYPE_ERROR);
  if (result)
  {
    CopyVideoOutputConfigurations(v233, v234, v235, v236, v237, v238, v239, v240);
LABEL_322:
    uint64_t result = 0;
  }
LABEL_323:
  *a2 = Mutable;
  return result;
}

void CopyMetadataOutputFeatureConfiguration(__CFDictionary *a1, uint64_t *a2)
{
  int v4 = (const void **)MEMORY[0x263EFFB40];
  if (!*((unsigned char *)a2 + 81)) {
    int v4 = (const void **)MEMORY[0x263EFFB38];
  }
  CFDictionarySetValue(a1, *(const void **)a2[9], *v4);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    CFTypeID v7 = Mutable;
    uint64_t v8 = *a2;
    if (v8 == CVPixelBufferPoolGetTypeID() && (CFNumberRef v9 = (const void *)a2[1]) != 0
      || (v10 = *a2, v10 == CVDataBufferPoolGetTypeID()) && (CFNumberRef v9 = (const void *)a2[1]) != 0)
    {
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E828], v9);
    }
    CFNumberRef v11 = CFNumberCreate(v5, kCFNumberSInt32Type, (char *)a2 + 20);
    if (v11)
    {
      CFNumberRef v12 = v11;
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E8D0], v11);
      CFRelease(v12);
    }
    CFNumberRef v13 = CFNumberCreate(v5, kCFNumberSInt32Type, a2 + 3);
    if (v13)
    {
      CFNumberRef v14 = v13;
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E880], v13);
      CFRelease(v14);
    }
    CFNumberRef v15 = CFNumberCreate(v5, kCFNumberSInt32Type, (char *)a2 + 28);
    if (v15)
    {
      CFNumberRef v16 = v15;
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E830], v15);
      CFRelease(v16);
    }
    CFNumberRef v17 = CFNumberCreate(v5, kCFNumberSInt32Type, a2 + 4);
    if (v17)
    {
      CFNumberRef v18 = v17;
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E840], v17);
      CFRelease(v18);
    }
    CFNumberRef v19 = CFNumberCreate(v5, kCFNumberSInt32Type, (char *)a2 + 68);
    if (v19)
    {
      CFNumberRef v20 = v19;
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E898], v19);
      CFRelease(v20);
    }
    int valuePtr = *((_DWORD *)a2 + 9) + 1;
    CFNumberRef v21 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
    if (v21)
    {
      CFNumberRef v22 = v21;
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x263F2E838], v21);
      CFRelease(v22);
    }
    CFDictionarySetValue(a1, *(const void **)(a2[9] + 8), v7);
    CFRelease(v7);
  }
  else
  {
    CFNumberRef v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v23 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      CopyMetadataOutputFeatureConfiguration(v23, v24, v25, v26, v27, v28, v29, v30);
    }
  }
}

uint64_t H16ISP::H16ISPDevice::GetPoolInfoBatched(H16ISP::H16ISPDevice *a1, int a2, _OWORD *a3, uint64_t a4)
{
  bzero(v19, 0x5B0uLL);
  __int16 v20 = 278;
  int v21 = a2;
  unsigned int v22 = 45;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v19, 0x5B0u, 0, 0xFFFFFFFF);
  if (!result)
  {
    uint64_t v9 = v22;
    if (v22)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      do
      {
        if (a4)
        {
          CFNumberRef v12 = &v19[32 * v10];
          int v15 = *((unsigned __int16 *)v12 + 8);
          CFNumberRef v13 = v12 + 16;
          int v14 = v15;
          CFNumberRef v16 = a3;
          uint64_t v17 = a4;
          do
          {
            if (*(unsigned __int16 *)v16 == v14)
            {
              long long v18 = v13[1];
              *CFNumberRef v16 = *v13;
              v16[1] = v18;
              ++v11;
            }
            v16 += 2;
            --v17;
          }
          while (v17);
        }
        ++v10;
      }
      while (v10 != v9);
    }
    else
    {
      uint64_t v11 = 0;
    }
    if (v11 == a4) {
      return 0;
    }
    else {
      return 3758097136;
    }
  }
  return result;
}

float H16ISP::H16ISPDevice::GetGDCMaxStrength(H16ISP::H16ISPDevice *a1, int a2, uint64_t a3, unsigned __int16 *a4, float *a5, float result)
{
  if (a3 && a4 && a5)
  {
    bzero(v14, 0x54uLL);
    __int16 v15 = 2630;
    int v11 = *a4;
    int v12 = a4[1] >> (a4[72] == 1);
    int v16 = v11;
    int v17 = v12;
    int v18 = *((_DWORD *)a4 + 2);
    if (*(unsigned char *)(a3 + 36))
    {
      uint64_t v13 = *(void *)(a3 + 48);
      int v12 = *(_DWORD *)(a3 + 60);
      int v11 = *(_DWORD *)(a3 + 56) << (*((unsigned char *)a4 + 124) != 0);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v19 = v13;
    int v20 = v11;
    int v21 = v12;
    long long v22 = *(_OWORD *)(a3 + 20);
    uint64_t v23 = *(void *)(a3 + 4);
    if (!H16ISP::H16ISPDevice::ISP_GetGDCBesOutputValidRect(a1, a2, a3, a4, &v24, 1.0)
      && !H16ISP::H16ISPDevice::ISP_SendCommand(a1, v14, 0x54u, 0, 0xFFFFFFFF))
    {
      uint64_t result = v25;
      *a5 = v25;
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::ISP_GetGDCBesOutputValidRect(H16ISP::H16ISPDevice *a1, int a2, uint64_t a3, unsigned __int16 *a4, _OWORD *a5, float a6)
{
  uint64_t v6 = 3758097090;
  if (a3 && a4 && a5)
  {
    uint64_t v13 = H16ISP::H16ISPDevice::EnableFESAutoAdjust(a1, a2, 1);
    if (v13)
    {
      uint64_t v6 = v13;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPDevice::ISP_GetGDCBesOutputValidRect();
      }
    }
    else
    {
      bzero(v20, 0x54uLL);
      __int16 v21 = 2837;
      int v14 = *a4;
      int v22 = a2;
      int v23 = v14;
      int v15 = a4[1] >> (a4[72] == 1);
      int v16 = *((_DWORD *)a4 + 2);
      int v24 = v15;
      int v25 = v16;
      long long v17 = 0uLL;
      if (*(unsigned char *)(a3 + 36))
      {
        uint64_t v18 = *(void *)(a3 + 48);
        int v15 = *(_DWORD *)(a3 + 60);
        int v14 = *(_DWORD *)(a3 + 56) << (*((unsigned char *)a4 + 124) != 0);
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t v26 = v18;
      int v27 = v14;
      int v28 = v15;
      if (!*(unsigned char *)(a3 + 92)) {
        long long v17 = *(_OWORD *)(a3 + 20);
      }
      long long v29 = v17;
      uint64_t v30 = *(void *)(a3 + 4);
      float v31 = a6;
      uint64_t v6 = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v20, 0x54u, 0, 0xFFFFFFFF);
      if (!v6) {
        *a5 = v32;
      }
    }
  }
  return v6;
}

uint64_t SetSphereMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFStringGetTypeID()) {
    return 4294954516;
  }
  if (!*(_DWORD *)(a2 + 648))
  {
    int v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v11 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = *(_DWORD *)(a2 + 132);
      int v16 = 67109120;
      int v17 = v12;
      _os_log_impl(&dword_24680F000, v11, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: SetSphereMode: camChannel = %d \n\n", (uint8_t *)&v16, 8u);
    }
    return 0;
  }
  if (CFEqual((CFTypeRef)*MEMORY[0x263F2E328], a1))
  {
    int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0);
    if (!v8) {
      int v8 = H16ISP::H16ISPDevice::SetOISActuator(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0, 0);
    }
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v16 = 67109120;
      int v17 = v8;
      uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Inactive  (res=0x%08X)\n\n";
LABEL_57:
      _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v16, 8u);
    }
  }
  else if (CFEqual((CFTypeRef)*MEMORY[0x263F2E310], a1))
  {
    int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 1);
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v16 = 67109120;
      int v17 = v8;
      uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Active  (res=0x%08X)\n\n";
      goto LABEL_57;
    }
  }
  else if (CFEqual((CFTypeRef)*MEMORY[0x263F2E330], a1))
  {
    int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 2);
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v16 = 67109120;
      int v17 = v8;
      uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Lock  (res=0x%08X)\n\n";
      goto LABEL_57;
    }
  }
  else if (CFEqual((CFTypeRef)*MEMORY[0x263F2E318], a1))
  {
    int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 3);
    if (!v8) {
      int v8 = H16ISP::H16ISPDevice::SetOISPosition(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 0, 0);
    }
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v16 = 67109120;
      int v17 = v8;
      uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_CenterLock  (res=0x%08X)\n\n";
      goto LABEL_57;
    }
  }
  else if (CFEqual((CFTypeRef)*MEMORY[0x263F2E320], a1))
  {
    int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 7);
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v16 = 67109120;
      int v17 = v8;
      uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_CenterSagLock  (res=0x%08X)\n\n";
      goto LABEL_57;
    }
  }
  else if (CFEqual((CFTypeRef)*MEMORY[0x263F2E338], a1))
  {
    int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 4);
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v16 = 67109120;
      int v17 = v8;
      uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Off  (res=0x%08X)\n\n";
      goto LABEL_57;
    }
  }
  else if (CFEqual((CFTypeRef)*MEMORY[0x263F2E340], a1))
  {
    int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 9);
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v16 = 67109120;
      int v17 = v8;
      uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_StillPreviewActive  (res=0x%08X)\n\n";
      goto LABEL_57;
    }
  }
  else if (CFEqual((CFTypeRef)*MEMORY[0x263F2E348], a1))
  {
    int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 5);
    uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v9 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v16 = 67109120;
      int v17 = v8;
      uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Video  (res=0x%08X)\n\n";
      goto LABEL_57;
    }
  }
  else
  {
    int v13 = CFEqual((CFTypeRef)*MEMORY[0x263F2E350], a1);
    int v14 = *(int **)(a4 + 24);
    if (v13)
    {
      int v8 = H16ISP::H16ISPDevice::SetOISMode((H16ISP::H16ISPDevice *)v14, *(_DWORD *)(a2 + 132), 10);
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v16 = 67109120;
        int v17 = v8;
        uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_VideoHighRange  (res=0x%08X)\n\n";
        goto LABEL_57;
      }
    }
    else
    {
      if (v14[1098] < 17) {
        return 4294954516;
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x263F2E360], a1))
      {
        int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 11);
        uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v9 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int v16 = 67109120;
          int v17 = v8;
          uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_VideoWithRecentering  (res=0x%08X)\n\n";
          goto LABEL_57;
        }
      }
      else
      {
        if (!CFEqual((CFTypeRef)*MEMORY[0x263F2E358], a1)) {
          return 4294954516;
        }
        int v8 = H16ISP::H16ISPDevice::SetOISMode(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), 12);
        uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v9 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int v16 = 67109120;
          int v17 = v8;
          uint64_t v10 = "H16ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_VideoHighRangeWithRecentering  (res=0x%08X)\n\n";
          goto LABEL_57;
        }
      }
    }
  }
  if (!v8) {
    return 0;
  }
  return 4294954516;
}

uint64_t H16ISP::H16ISPDevice::SetOISMode(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 1859;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t _GLOBAL__sub_I_H16ISPDepthProcessing_mm()
{
  std::string::basic_string[abi:ne180100]<0>(g_baseConfigurationDirectory, "/var/mobile/Library/ISP/Pearl/");
  v0 = (void (*)(void *))MEMORY[0x263F8C0B8];

  return __cxa_atexit(v0, g_baseConfigurationDirectory, &dword_24680F000);
}

uint64_t CopyAEMaxGain(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v10 = 0;
  if (H16ISP::H16ISPDevice::GetGainCap(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v10))
  {
    CFNumberRef v6 = 0;
    uint64_t v7 = 4294954513;
  }
  else
  {
    int valuePtr = v10;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    uint64_t v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t H16ISP::H16ISPDevice::GetGainCap(H16ISP::H16ISPDevice *this, int a2, unsigned __int16 *a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 523;
  int v9 = a2;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
  *a3 = v10;
  return result;
}

uint64_t H16ISP::H16ISPDevice::H16ISPDeviceOpen(H16ISP::H16ISPDevice *this, int (*a2)(H16ISP::H16ISPDevice *, unsigned int, void *, void *), void *a3)
{
  v12[1] = *MEMORY[0x263EF8340];
  CFNumberRef v6 = (pthread_mutex_t *)((char *)this + 4432);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 4432));
  if (*((_DWORD *)this + 1106))
  {
    pthread_mutex_unlock(v6);
    return 3758097093;
  }
  else
  {
    unsigned int v8 = IOServiceOpen(*((_DWORD *)this + 1104), *MEMORY[0x263EF8960], 0x2Au, (io_connect_t *)this + 1106);
    mach_port_t v9 = *((_DWORD *)this + 1106);
    if (v9) {
      ProcNameAndAuditTokeuint64_t n = v8;
    }
    else {
      ProcNameAndAuditTokeuint64_t n = 3758097084;
    }
    if (!ProcNameAndAuditToken)
    {
      v12[0] = 0;
      ProcNameAndAuditTokeuint64_t n = IOConnectCallScalarMethod(v9, 3u, v12, 1u, 0, 0);
      if (!ProcNameAndAuditToken)
      {
        *((void *)this + 7) = a2;
        *((void *)this + 8) = a3;
        H16ISP::H16ISPDevice::ISP_GetVersion((uint64_t)this, (_DWORD *)this + 1098);
        H16ISP::H16ISPDevice::ISP_GetRevision(this, (unsigned int *)this + 20);
        uint64_t ExclavePlatformStatus = H16ISP::H16ISPDevice::ISP_GetExclavePlatformStatus(this, (BOOL *)this + 4368);
        if (ExclavePlatformStatus)
        {
          ProcNameAndAuditTokeuint64_t n = ExclavePlatformStatus;
          *((unsigned char *)this + 4368) = 0;
        }
        else
        {
          ProcNameAndAuditTokeuint64_t n = H16ISP::H16ISPDevice::GetProcNameAndAuditToken(this);
        }
      }
    }
    pthread_mutex_unlock(v6);
  }
  return ProcNameAndAuditToken;
}

uint64_t H16ISP::H16ISPDevice::ISP_GetExclavePlatformStatus(H16ISP::H16ISPDevice *this, BOOL *a2)
{
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  mach_port_t v2 = *((_DWORD *)this + 1106);
  if (!v2) {
    return 3758097084;
  }
  uint64_t v4 = IOConnectCallScalarMethod(v2, 0x5Cu, 0, 0, &output, &outputCnt);
  if (v4)
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPDevice::ISP_GetExclavePlatformStatus();
    }
  }
  else
  {
    *a2 = output != 0;
  }
  return v4;
}

uint64_t H16ISP::H16ISPDevice::GetProcNameAndAuditToken(H16ISP::H16ISPDevice *this)
{
  mach_msg_type_number_t task_info_outCnt = 8;
  pid_t v2 = getpid();
  if (proc_pidpath(v2, (char *)this + 228, 0x1000u) <= 0)
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    uint64_t v3 = 3758097084;
    BOOL v12 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v12) {
      H16ISP::H16ISPDevice::GetProcNameAndAuditToken(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else if (task_info(*MEMORY[0x263EF8960], 0xFu, (task_info_t)this + 1081, &task_info_outCnt))
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    uint64_t v3 = 3758097084;
    BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v4) {
      H16ISP::H16ISPDevice::GetProcNameAndAuditToken(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG)) {
      H16ISP::H16ISPDevice::GetProcNameAndAuditToken((uint64_t)this + 228, (int *)this + 1081, this);
    }
    return 0;
  }
  return v3;
}

uint64_t H16ISP::H16ISPDevice::ISP_GetRevision(H16ISP::H16ISPDevice *this, unsigned int *a2)
{
  mach_port_t v2 = *((_DWORD *)this + 1106);
  if (!v2) {
    return 3758097084;
  }
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  uint64_t result = IOConnectCallScalarMethod(v2, 0x23u, 0, 0, &output, &outputCnt);
  if (!result) {
    *a2 = output;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::ISP_GetVersion(uint64_t a1, _DWORD *a2)
{
  mach_port_t v2 = *(_DWORD *)(a1 + 4424);
  if (!v2) {
    return 3758097084;
  }
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  uint64_t result = IOConnectCallScalarMethod(v2, 0x22u, 0, 0, &output, &outputCnt);
  if (!result) {
    *a2 = output;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_H16ISPPCECalibration_mm()
{
  allowFdrForTof = H16ISP::H16ISPGetCFPreferenceNumber(@"FdrForTof", @"com.apple.coremedia", (const __CFString *)1) != 0;
  authorizedRepairManager = 0;
  qword_26B11C030 = 0;

  return __cxa_atexit((void (*)(void *))AuthorizedRepairManager::~AuthorizedRepairManager, &authorizedRepairManager, &dword_24680F000);
}

unint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::setWideConfiguration(pthread_mutex_t **this, const __CFDictionary *a2, const simd_float4x3 *a3, float a4)
{
  H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::enableColor(this[3], a2, a3, a4);
  unint64_t result = H16ISP::H16ISPDevice::getSensorChannel((uint64_t)*this, 1919246706);
  *((_WORD *)this + 16) = result;
  return result;
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::enableColor(pthread_mutex_t *this, const __CFDictionary *a2, const simd_float4x3 *a3, float a4)
{
  uint64_t v8 = this + 2;
  pthread_mutex_lock(this + 2);
  this[3].__opaque[16] = 1;
  uint64_t v9 = *(const void **)&this->__opaque[24];
  if (v9)
  {
    CFRelease(v9);
    *(void *)&this->__opaque[24] = 0;
  }
  if (a2) {
    *(void *)&this->__opaque[24] = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  }
  float v10 = a4 * 0.001;
  *(float *)&this[1].__opaque[40] = v10;
  simd_float3 v11 = a3->columns[0];
  simd_float3 v12 = a3->columns[1];
  simd_float3 v13 = a3->columns[3];
  *(simd_float3 *)&this[1].__opaque[8] = a3->columns[2];
  *(simd_float3 *)&this[1].__opaque[24] = v13;
  *(simd_float3 *)&this->__opaque[40] = v11;
  *(simd_float3 *)&this[1].__sig = v12;
  if (*(void *)this[3].__opaque && !this[3].__sig) {
    H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::activateColor((H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal *)this);
  }

  return pthread_mutex_unlock(v8);
}

uint64_t SetCAREnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  int v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]);
  uint64_t result = H16ISP::H16ISPDevice::EnableCAR(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v8 != 0);
  if (result) {
    return 4294954514;
  }
  *(unsigned char *)(a2 + 3793) = v8 != 0;
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableCAR(H16ISP::H16ISPDevice *this, __int16 a2, char a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 356;
  __int16 v9 = a2;
  char v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t CopyMaximumFrameRate(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v12 = 0;
  if (H16ISP::H16ISPDevice::GetMaximumFrameRate(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v12))
  {
    CFNumberRef v7 = 0;
    uint64_t v8 = 4294954513;
  }
  else
  {
    LOWORD(v6) = v12;
    float v9 = (double)v6 * 0.00390625;
    float valuePtr = v9;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    uint64_t v8 = 0;
  }
  *a2 = v7;
  return v8;
}

uint64_t H16ISP::H16ISPDevice::GetMaximumFrameRate(H16ISP::H16ISPDevice *this, int a2, unsigned __int16 *a3)
{
  if ((*((_DWORD *)this + 1093) >> a2))
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  else
  {
    bzero(v7, 0x10uLL);
    __int16 v8 = 519;
    int v9 = a2;
    uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
    if (!result) {
      *a3 = v10;
    }
  }
  return result;
}

uint64_t SetAEConvergenceSpeed(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int valuePtr = -1;
  int v4 = *(_DWORD *)(a2 + 132);
  if (gCaptureDeviceCFPrefs[44 * v4 + 177] < 0x100
    || gCaptureDeviceCFPrefs[44 * v4 + 176] < 0x100)
  {
    return 0;
  }
  if (!cf) {
    return 4294954516;
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
  unsigned int v10 = valuePtr;
  if (valuePtr > 0xFF) {
    return 4294954516;
  }
  int v11 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v11 |= 0x80000000;
  }
  int v12 = H16ISP::H16ISPDevice::SetAEConvergenceSpeed2Way(*(H16ISP::H16ISPDevice **)(a4 + 24), v11, valuePtr, valuePtr);
  simd_float3 v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    simd_float3 v13 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109632;
    unsigned int v16 = valuePtr;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    __int16 v19 = 1024;
    int v20 = v12;
    _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting AE Convergence Speed - long2shortSpeed:0x%02X, short2longSpeed:0x%02X, result=0x%08X\n\n", buf, 0x14u);
  }
  if (v12) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::H16ISPDevice::SetAEConvergenceSpeed2Way(H16ISP::H16ISPDevice *this, int a2, char a3, char a4)
{
  bzero(v9, 0x10uLL);
  __int16 v10 = 579;
  int v11 = a2;
  char v12 = a3;
  char v13 = a4;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v9, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISPCaptureDeviceCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  kdebug_trace();
  CFTypeRef cf = 0;
  mach_timebase_info(&info);
  uint64_t v67 = mach_absolute_time();
  uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v3 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int buf = 136315138;
    *(void *)buf_4 = "H16ISPCaptureDeviceCreate";
    _os_log_impl(&dword_24680F000, v3, OS_LOG_TYPE_INFO, "%s - Creating capture device\n\n", (uint8_t *)&buf, 0xCu);
  }
  FigCaptureDeviceGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    uint64_t DerivedStorage = 0;
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)(DerivedStorage + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(void *)(DerivedStorage + 24) = 0;
    *(void *)(DerivedStorage + 216) = 0;
    *(void *)(DerivedStorage + 176) = 0;
    *(void *)(DerivedStorage + 184) = 0;
    *(unsigned char *)(DerivedStorage + 224) = 1;
    *(_DWORD *)(DerivedStorage + 228) = -1;
    *(void *)(DerivedStorage + 128) = 0;
    *(void *)(DerivedStorage + 168) = 0;
    dword_26B11B9F0 = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPVerboseFlags", @"com.apple.coremedia", 0);
    dword_26B11B9E8 = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPVerboseLogging", @"com.apple.coremedia", 0);
    dword_26B11BA24 = H16ISP::H16ISPGetCFPreferenceNumber(@"CamSave2File", @"com.apple.coremedia", 0);
    dword_26B11BA28 = H16ISP::H16ISPGetCFPreferenceNumber(@"DumpPCEDepth", @"com.apple.coremedia", 0);
    dword_26B11BA2C = H16ISP::H16ISPGetCFPreferenceNumber(@"DumpPCEFusion", @"com.apple.coremedia", 0);
    dword_26B11B9F8 = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPFirmwareLogging", @"com.apple.coremedia", 0);
    dword_26B11B9FC = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPFirmwareLoggingInfoLoggerOut", @"com.apple.coremedia", 0);
    dword_26B11BA00 = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPFirmwareLoggingPollInterval", @"com.apple.coremedia", (const __CFString *)0xA);
    dword_26B11BA04 = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPFirmwareLoggingThreadPriority", @"com.apple.coremedia", 0);
    dword_26B11BA34 = H16ISP::H16ISPGetCFPreferenceNumber(@"CamFWPoolPrimeCount", @"com.apple.coremedia", 0);
    gCaptureDeviceCFPrefs[0] = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPUseAuxRawPool", @"com.apple.coremedia", 0);
    dword_26B11BA80 = H16ISP::H16ISPGetCFPreferenceNumber(@"DumpRGBIRInput", @"com.apple.coremedia", 0);
    dword_26B11B874 = H16ISP::H16ISPGetCFPreferenceNumber(@"TorchLevelOverride", @"com.apple.coremedia", 0);
    dword_26B11B878 = H16ISP::H16ISPGetCFPreferenceNumber(@"visSphereControl", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11B87C = H16ISP::H16ISPGetCFPreferenceNumber(@"visBaseCountControl", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11B880 = H16ISP::H16ISPGetCFPreferenceNumber(@"visLogDerivedStepControl", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11B884 = H16ISP::H16ISPGetCFPreferenceNumber(@"visOverScanPercentageControl", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11B880 = H16ISP::H16ISPGetCFPreferenceNumber(@"visLogDerivedStepControl", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11B9E0 = H16ISP::H16ISPGetCFPreferenceNumber(@"visMaxZoomEnhancement", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11B888 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableLTMLuts", @"com.apple.coremedia", 0);
    dword_26B11B88C = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableRawGyroData", @"com.apple.coremedia", 0);
    dword_26B11B890 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableFocusPixelMetadata", @"com.apple.coremedia", 0);
    dword_26B11B894 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableAPSDebugMetadata", @"com.apple.coremedia", 0);
    dword_26B11B898 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableTNRMetadata", @"com.apple.coremedia", 0);
    dword_26B11B89C = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableLocalHist", @"com.apple.coremedia", 0);
    dword_26B11B9DC = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableMetadataSectionsHigh", @"com.apple.coremedia", 0);
    dword_26B11B9E4 = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPBCapAFTimeout", @"com.apple.coremedia", (const __CFString *)0x1F4);
    dword_26B11B9EC = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPRawMetaInDict", @"com.apple.coremedia", 0);
    dword_26B11B9F4 = H16ISP::H16ISPGetCFPreferenceNumber(@"H16ISPFullStats", @"com.apple.coremedia", 0);
    qword_26B11BA08 = (int)H16ISP::H16ISPGetCFPreferenceNumber(@"CaptureDeviceEventLogging", @"com.apple.coremedia", 0);
    qword_26B11BA10 = (int)H16ISP::H16ISPGetCFPreferenceNumber(@"CaptureDeviceEventMaximumLogLength", @"com.apple.coremedia", (const __CFString *)0x7D0);
    byte_26B11BA18 = (int)H16ISP::H16ISPGetCFPreferenceNumber(@"SavePreBracketingFrame", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL) > 0;
    LODWORD(qword_26B11BA1C) = H16ISP::H16ISPGetCFPreferenceNumber(@"AFPeakTracking", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    HIDWORD(qword_26B11BA1C) = H16ISP::H16ISPGetCFPreferenceNumber(@"HighFrameRateAF", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA30 = H16ISP::H16ISPGetCFPreferenceNumber(@"DisableFrameDoneTimeoutRecovery", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA38 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableCFOV", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA3C = H16ISP::H16ISPGetCFPreferenceNumber(@"DisplayStrobeOverride", @"com.apple.coremedia", 0);
    dword_26B11BA40 = H16ISP::H16ISPGetCFPreferenceNumber(@"BypassFrameDelivery", @"com.apple.coremedia", 0);
    word_26B11BA44 = (unsigned __int16)H16ISP::H16ISPGetCFPreferenceNumber(@"DisableFocusWithDACSetting", @"com.apple.coremedia", (const __CFString *)0xFFFF);
    dword_26B11BA48 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableCamPackedRaw", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA4C = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableSidebandMetadata", @"com.apple.coremedia", 0);
    dword_26B11BA60 = H16ISP::H16ISPGetCFPreferenceNumber(@"AttachSushiRaw", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA54 = H16ISP::H16ISPGetCFPreferenceNumber(@"LTMVersion", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA50 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableSDOF", @"com.apple.coremedia", 0);
    dword_26B11BA58 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableLTMStaticCLUT", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA5C = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableWorkProcessor", @"com.apple.coremedia", 0);
    dword_26B11BA64 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableDYWithSDOF", @"com.apple.coremedia", 0);
    dword_26B11BA68 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableConcurrentFocus", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA6C = H16ISP::H16ISPGetCFPreferenceNumber(@"FocusBehaviorSDOF", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA70 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableLTMPadding", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BA74 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableMasterSlaveAFMetadata", @"com.apple.coremedia", 0);
    dword_26B11BA78 = H16ISP::H16ISPGetCFPreferenceNumber(@"ForceRomeoPower", @"com.apple.coremedia", 0);
    dword_26B11BA7C = H16ISP::H16ISPGetCFPreferenceNumber(@"CamRequireAllSensors", @"com.apple.coremedia", (const __CFString *)1);
    dword_26B11BA84 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableFilterGraph", @"com.apple.coremedia", 0);
    dword_26B11BA88 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableFaceTrackingNode", @"com.apple.coremedia", 0);
    dword_26B11BA8C = H16ISP::H16ISPGetCFPreferenceNumber(@"DefaultFusionMode", @"com.apple.coremedia", (const __CFString *)3);
    byte_26B11BA90 = (int)H16ISP::H16ISPGetCFPreferenceNumber(@"BypassPearlCalibration", @"com.apple.coremedia", 0) > 0;
    dword_26B11BA94 = H16ISP::H16ISPGetCFPreferenceNumber(@"ANFDDevProp", @"com.apple.coremedia", 0);
    dword_26B11BA98 = H16ISP::H16ISPGetCFPreferenceNumber(@"ANFDTestProp", @"com.apple.coremedia", 0);
    dword_26B11BA9C = H16ISP::H16ISPGetCFPreferenceNumber(@"PassCalibrationFrames", @"com.apple.coremedia", 0);
    byte_26B11BAA0 = H16ISP::H16ISPGetCFPreferenceNumber(@"DumpGmcIrBuffer", @"com.apple.coremedia", 0) != 0;
    dword_26B11BAA4 = H16ISP::H16ISPGetCFPreferenceNumber(@"AELuxLevel", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BAA8 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableRawBufferCompanding", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BAAC = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableISPBringup", @"com.apple.coremedia", 0);
    byte_26B11BAB0 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableSPDMetadata", @"com.apple.coremedia", 0) != 0;
    byte_26B11BAB1 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableDepthToPositionMetadata", @"com.apple.coremedia", 0) != 0;
    dword_26B11BAB4 = H16ISP::H16ISPGetCFPreferenceNumber(@"RGBJDilutionRate", @"com.apple.coremedia", 0);
    dword_26B11BAB8 = H16ISP::H16ISPGetCFPreferenceNumber(@"RGBJDilutionLowRate", @"com.apple.coremedia", 0);
    dword_26B11BABC = H16ISP::H16ISPGetCFPreferenceNumber(@"RGBJDilutionHighRate", @"com.apple.coremedia", 0);
    LODWORD(qword_26B11BACpthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = H16ISP::H16ISPGetCFPreferenceNumber(@"RGBJInitialMode", @"com.apple.coremedia", (const __CFString *)3);
    HIDWORD(qword_26B11BACpthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = H16ISP::H16ISPGetCFPreferenceNumber(@"JasperISFStepDetectionMode", @"com.apple.coremedia", (const __CFString *)1);
    dword_26B11BAC8 = H16ISP::H16ISPGetCFPreferenceNumber(@"GMODropBeforeWakeup", @"com.apple.coremedia", (const __CFString *)1);
    dword_26B11BACC = H16ISP::H16ISPGetCFPreferenceNumber(@"GMOFlowMask", @"com.apple.coremedia", (const __CFString *)0xFFFF);
    dword_26B11BAD0 = H16ISP::H16ISPGetCFPreferenceNumber(@"DumpStillsJasperFrames", @"com.apple.coremedia", 0);
    dword_26B11BAD4 = H16ISP::H16ISPGetCFPreferenceNumber(@"ForceJasperFPS", @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
    dword_26B11BAD8 = H16ISP::H16ISPGetCFPreferenceNumber(@"PearlISFStepDetectionMode", @"com.apple.coremedia", 0);
    dword_26B11BADC = H16ISP::H16ISPGetCFPreferenceNumber(@"UseRgbp", @"com.apple.coremedia", (const __CFString *)1);
    dword_26B11BAE0 = H16ISP::H16ISPGetCFPreferenceNumber(@"AutoFocusAssistanceMode", @"com.apple.coremedia", 0);
    byte_26B11BAE4 = H16ISP::H16ISPGetCFPreferenceNumber(@"AutoFocusAssistanceDump", @"com.apple.coremedia", 0) != 0;
    byte_26B11BAE5 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableSetfileUnitInfo", @"com.apple.coremedia", 0) != 0;
    byte_26B11BAE7 = H16ISP::H16ISPGetCFPreferenceNumber(@"RgbIrVerbose", @"com.apple.coremedia", 0) != 0;
    byte_26B11BAE6 = H16ISP::H16ISPGetCFPreferenceNumber(@"RemoteRgbIr", @"com.apple.coremedia", (const __CFString *)1) != 0;
    byte_26B11BAE8 = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableFakeIMUData", @"com.apple.coremedia", 0) != 0;
    byte_26B11BAE9 = H16ISP::H16ISPGetCFPreferenceNumber(@"SlafCmApi", @"com.apple.coremedia", (const __CFString *)1) != 0;
    byte_26B11BAEA = H16ISP::H16ISPGetCFPreferenceNumber(@"SlafFwApi", @"com.apple.coremedia", (const __CFString *)1) != 0;
    byte_26B11BAEB = (int)H16ISP::H16ISPGetCFPreferenceNumber(@"BypassMotionManagerInit", @"com.apple.coremedia", 0) > 0;
    byte_26B11BAEC = H16ISP::H16ISPGetCFPreferenceNumber(@"EnableSlowSyncFlash", @"com.apple.coremedia", (const __CFString *)1) != 0;
    H16ISP::H16ISPGetCFPreferenceArray(@"EnableMetadataSections", @"com.apple.coremedia", (const __CFString *)&xmmword_26B11B8A0, (unsigned int *)0x4F);
    uint64_t v5 = 0;
    unint64_t v6 = &dword_26B11BB9C;
    do
    {
      CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"Cam%dCAFHintAction", v5);
      *(v6 - 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = H16ISP::H16ISPGetCFPreferenceNumber(v7, @"com.apple.coremedia", 0);
      CFRelease(v7);
      CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"Cam%dFullLSC", v5);
      *(v6 - 43) = H16ISP::H16ISPGetCFPreferenceNumber(v8, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v8);
      CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"Cam%dSNF", v5);
      *(v6 - 42) = H16ISP::H16ISPGetCFPreferenceNumber(v9, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v9);
      CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"Cam%dBinningCompensation", v5);
      *(v6 - 41) = H16ISP::H16ISPGetCFPreferenceNumber(v10, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v10);
      CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"Cam%dHRLTM", v5);
      *(v6 - 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = H16ISP::H16ISPGetCFPreferenceNumber(v11, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v11);
      CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"Cam%dHR", v5);
      *(v6 - 22) = H16ISP::H16ISPGetCFPreferenceNumber(v12, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v12);
      CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"Cam%dContextSwitching", v5);
      *(v6 - 39) = H16ISP::H16ISPGetCFPreferenceNumber(v13, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v13);
      CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"Cam%dAWBScheme", v5);
      *(v6 - 38) = H16ISP::H16ISPGetCFPreferenceNumber(v14, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v14);
      CFStringRef v15 = CFStringCreateWithFormat(0, 0, @"Cam%dALS", v5);
      *(v6 - 37) = H16ISP::H16ISPGetCFPreferenceNumber(v15, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v15);
      CFStringRef v16 = CFStringCreateWithFormat(0, 0, @"Cam%dSIFPixelFormat", v5);
      *(v6 - 29) = H16ISP::H16ISPGetCFPreferenceNumber(v16, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v16);
      CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"Cam%dSIFCompressed", v5);
      *(v6 - 28) = H16ISP::H16ISPGetCFPreferenceNumber(v17, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v17);
      CFStringRef v18 = CFStringCreateWithFormat(0, 0, @"Cam%dSingleFormatOverride", v5);
      *(v6 - 36) = H16ISP::H16ISPGetCFPreferenceNumber(v18, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v18);
      CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"Cam%dVIS", v5);
      *(v6 - 35) = H16ISP::H16ISPGetCFPreferenceNumber(v19, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v19);
      CFStringRef v20 = CFStringCreateWithFormat(0, 0, @"Cam%dDebugMetadata", v5);
      *(v6 - 34) = H16ISP::H16ISPGetCFPreferenceNumber(v20, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v20);
      CFStringRef v21 = CFStringCreateWithFormat(0, 0, @"Cam%dsHDRRatio", v5);
      *(v6 - 33) = H16ISP::H16ISPGetCFPreferenceNumber(v21, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v21);
      CFStringRef v22 = CFStringCreateWithFormat(0, 0, @"Cam%dFocusPixels", v5);
      *(v6 - 32) = H16ISP::H16ISPGetCFPreferenceNumber(v22, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v22);
      CFStringRef v23 = CFStringCreateWithFormat(0, 0, @"Cam%dContinuousFocus", v5);
      *(v6 - 31) = H16ISP::H16ISPGetCFPreferenceNumber(v23, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v23);
      CFStringRef v24 = CFStringCreateWithFormat(0, 0, @"Cam%dShort2LongSpeed", v5);
      *(v6 - 26) = H16ISP::H16ISPGetCFPreferenceNumber(v24, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v24);
      CFStringRef v25 = CFStringCreateWithFormat(0, 0, @"Cam%dLong2ShortSpeed", v5);
      *(v6 - 27) = H16ISP::H16ISPGetCFPreferenceNumber(v25, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v25);
      CFStringRef v26 = CFStringCreateWithFormat(0, 0, @"Cam%dEnableDPM", v5);
      *(v6 - 25) = H16ISP::H16ISPGetCFPreferenceNumber(v26, @"com.apple.coremedia", (const __CFString *)1);
      CFRelease(v26);
      CFStringRef v27 = CFStringCreateWithFormat(0, 0, @"Cam%dEnableDPMAssistedAE", v5);
      *(v6 - 24) = H16ISP::H16ISPGetCFPreferenceNumber(v27, @"com.apple.coremedia", (const __CFString *)1);
      CFRelease(v27);
      CFStringRef v28 = CFStringCreateWithFormat(0, 0, @"Cam%dEnableAPS", v5);
      *(v6 - 23) = H16ISP::H16ISPGetCFPreferenceNumber(v28, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v28);
      CFStringRef v29 = CFStringCreateWithFormat(0, 0, @"Cam%dEnableSensorCrop", v5);
      *(v6 - 21) = H16ISP::H16ISPGetCFPreferenceNumber(v29, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v29);
      CFStringRef v30 = CFStringCreateWithFormat(0, 0, @"Cam%dCalCropOffsetX", v5);
      *(v6 - 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = H16ISP::H16ISPGetCFPreferenceNumber(v30, @"com.apple.coremedia", 0);
      CFRelease(v30);
      CFStringRef v31 = CFStringCreateWithFormat(0, 0, @"Cam%dCalCropOffsetY", v5);
      *(v6 - 19) = H16ISP::H16ISPGetCFPreferenceNumber(v31, @"com.apple.coremedia", 0);
      CFRelease(v31);
      CFStringRef v32 = CFStringCreateWithFormat(0, 0, @"Cam%dOisMetaFileMode", v5);
      *(v6 - 18) = H16ISP::H16ISPGetCFPreferenceNumber(v32, @"com.apple.coremedia", 0);
      CFRelease(v32);
      CFStringRef v33 = CFStringCreateWithFormat(0, 0, @"Cam%dFrameSkipRatio", v5);
      *(v6 - 17) = H16ISP::H16ISPGetCFPreferenceNumber(v33, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v33);
      CFStringRef v34 = CFStringCreateWithFormat(0, 0, @"Cam%dDisableZoom", v5);
      *((unsigned char *)v6 - 64) = H16ISP::H16ISPGetCFPreferenceNumber(v34, @"com.apple.coremedia", 0) != 0;
      CFRelease(v34);
      CFStringRef v35 = CFStringCreateWithFormat(0, 0, @"Cam%dEnableAEStageDetect", v5);
      *(v6 - 15) = H16ISP::H16ISPGetCFPreferenceNumber(v35, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v35);
      CFStringRef v36 = CFStringCreateWithFormat(0, 0, @"Cam%dOisActivePreviewLimit", v5);
      *(v6 - 14) = H16ISP::H16ISPGetCFPreferenceNumber(v36, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v36);
      CFStringRef v37 = CFStringCreateWithFormat(0, 0, @"Cam%dOisInnerLoopClose", v5);
      *(v6 - 13) = H16ISP::H16ISPGetCFPreferenceNumber(v37, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v37);
      CFStringRef v38 = CFStringCreateWithFormat(0, 0, @"Cam%dApsModeSwitchEnable", v5);
      *(v6 - 12) = H16ISP::H16ISPGetCFPreferenceNumber(v38, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v38);
      CFStringRef v39 = CFStringCreateWithFormat(0, 0, @"Cam%dApsOffsetCalcEnable", v5);
      *(v6 - 11) = H16ISP::H16ISPGetCFPreferenceNumber(v39, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v39);
      CFStringRef v40 = CFStringCreateWithFormat(0, 0, @"Cam%dApsDacClampEnable", v5);
      *(v6 - 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = H16ISP::H16ISPGetCFPreferenceNumber(v40, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v40);
      CFStringRef v41 = CFStringCreateWithFormat(0, 0, @"Cam%dApsOffsetManual", v5);
      *(v6 - 9) = H16ISP::H16ISPGetCFPreferenceNumber(v41, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v41);
      CFStringRef v42 = CFStringCreateWithFormat(0, 0, @"Cam%dApsInnerLoopClose", v5);
      *(v6 - 8) = H16ISP::H16ISPGetCFPreferenceNumber(v42, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v42);
      CFStringRef v43 = CFStringCreateWithFormat(0, 0, @"Cam%dApsOffsetCorrectionScheme", v5);
      *(v6 - 7) = H16ISP::H16ISPGetCFPreferenceNumber(v43, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v43);
      CFStringRef v44 = CFStringCreateWithFormat(0, 0, @"Cam%dSpikeDetection", v5);
      *(v6 - 6) = H16ISP::H16ISPGetCFPreferenceNumber(v44, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v44);
      CFStringRef v45 = CFStringCreateWithFormat(0, 0, @"Cam%dAiCamMode", v5);
      *(v6 - 5) = H16ISP::H16ISPGetCFPreferenceNumber(v45, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v45);
      CFStringRef v46 = CFStringCreateWithFormat(0, 0, @"Cam%dLockAWBWithoutLSC", v5);
      *(v6 - 4) = H16ISP::H16ISPGetCFPreferenceNumber(v46, @"com.apple.coremedia", 0);
      CFRelease(v46);
      CFStringRef v47 = CFStringCreateWithFormat(0, 0, @"Cam%dLockAWBWithoutALS", v5);
      *(v6 - 3) = H16ISP::H16ISPGetCFPreferenceNumber(v47, @"com.apple.coremedia", 0);
      CFRelease(v47);
      CFStringRef v48 = CFStringCreateWithFormat(0, 0, @"Cam%dSIFRControlMode", v5);
      *(v6 - 2) = H16ISP::H16ISPGetCFPreferenceNumber(v48, @"com.apple.coremedia", (const __CFString *)0xFFFFFFFFLL);
      CFRelease(v48);
      CFStringRef v49 = CFStringCreateWithFormat(0, 0, @"Cam%dOISRecenterOffset", v5);
      *(v6 - 1) = H16ISP::H16ISPGetCFPreferenceNumber(v49, @"com.apple.coremedia", 0);
      CFRelease(v49);
      CFStringRef v50 = CFStringCreateWithFormat(0, 0, @"Cam%dRawPoolRetainedCount", v5);
      *unint64_t v6 = H16ISP::H16ISPGetCFPreferenceNumber(v50, @"com.apple.coremedia", 0);
      CFRelease(v50);
      ++v5;
      v6 += 44;
    }
    while (v5 != 6);
    int v51 = dword_26B11B9F0;
    *(_DWORD *)(DerivedStorage + 104) = dword_26B11B9F0;
    *(unsigned char *)(DerivedStorage + 248) = dword_26B11BAE0 != 0;
    *(unsigned char *)(DerivedStorage + 249) = 0;
    *(unsigned char *)(DerivedStorage + 25pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = byte_26B11BAE4;
    if (v51)
    {
      CFNumberRef v52 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v52 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v52;
      }
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        int v53 = *(_DWORD *)(DerivedStorage + 104);
        int buf = 67109120;
        *(_DWORD *)buf_4 = v53;
        _os_log_impl(&dword_24680F000, v52, OS_LOG_TYPE_DEFAULT, "H16ISPVerboseFlags: 0x%08X\n\n", (uint8_t *)&buf, 8u);
      }
    }
    pthread_mutexattr_init(&v72);
    pthread_mutexattr_settype(&v72, 2);
    pthread_mutex_init((pthread_mutex_t *)(DerivedStorage + 32), &v72);
    pthread_mutexattr_destroy(&v72);
    uint64_t H16ISPDeviceController = H16ISP::CreateH16ISPDeviceController((H16ISP *)(DerivedStorage + 16), (H16ISP::H16ISPDeviceController **)MyH16ISPDeviceControllerNotification, (int (*)(H16ISP::H16ISPDeviceController *, void *, H16ISP::H16ISPDevice *))cf, v54);
    uint64_t v4 = H16ISPDeviceController;
    CFNumberRef v56 = *(CFArrayRef **)(DerivedStorage + 16);
    if (v56)
    {
      if (!H16ISPDeviceController)
      {
        if (*v56)
        {
          if (CFArrayGetCount(*v56))
          {
            unint64_t v57 = 0;
            do
            {
              CFNumberRef ValueAtIndex = (H16ISP::H16ISPDevice *)CFArrayGetValueAtIndex(**(CFArrayRef **)(DerivedStorage + 16), v57);
              *(void *)(DerivedStorage + 24) = ValueAtIndex;
              if (!H16ISP::H16ISPDevice::H16ISPDeviceOpen(ValueAtIndex, 0, 0)) {
                break;
              }
              *(void *)(DerivedStorage + 24) = 0;
              ++v57;
            }
            while (v57 < CFArrayGetCount(**(CFArrayRef **)(DerivedStorage + 16)));
          }
          if (*(void *)(DerivedStorage + 24))
          {
            __source[0] = 0;
            operator new();
          }
          CFNumberRef v61 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFNumberRef v61 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v61;
          }
          uint64_t v4 = 3758097088;
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
            H16ISPCaptureDeviceCreate_cold_3();
          }
        }
        else
        {
          CFNumberRef v60 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFNumberRef v60 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v60;
          }
          uint64_t v4 = 3758097088;
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
            H16ISPCaptureDeviceCreate_cold_2();
          }
        }
      }
    }
    else
    {
      CFDictionaryRef v59 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFDictionaryRef v59 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v59;
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
        H16ISPCaptureDeviceCreate_cold_1();
      }
      uint64_t v4 = 3758097088;
    }
  }
  if (cf)
  {
    H16ISPCaptureDeviceInvalidate();
    CFRelease(cf);
    uint64_t DerivedStorage = 0;
  }
  long long v62 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    long long v62 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v62;
  }
  if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
  {
    int buf = 67109376;
    *(_DWORD *)buf_4 = v4;
    *(_WORD *)&buf_4[4] = 2048;
    *(void *)&buf_4[6] = a3;
    _os_log_impl(&dword_24680F000, v62, OS_LOG_TYPE_INFO, "H16ISPCaptureDeviceCreate complete. err=0x%08X, newCaptureDeviceOut=%p\n\n", (uint8_t *)&buf, 0x12u);
  }
  LogCaptureDeviceEvent(0, DerivedStorage, 0, 0, 0, 0, 1);
  kdebug_trace();
  return v4;
}

void sub_246870FB8(_Unwind_Exception *exception_object)
{
}

uint64_t H16ISP::H16ISPDevice::GetRelativeZoomFactor(H16ISP::H16ISPDevice *this, __int16 a2, unsigned __int16 *a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2068;
  __int16 v9 = a2;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
  if (!result) {
    *a3 = v10;
  }
  return result;
}

void DCNUInit(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (H16ISP::H16ISPDevice::isSensorType(*(void *)(a1 + 24), *(_DWORD *)(a2 + 132), 1919246706))
  {
    bzero((void *)(a2 + 4504), 0xCFC0uLL);
    if (stat("/var/mobile/Library/ISP/CalData/DCNUPixbuf_0", &v14)
      || stat("/var/mobile/Library/ISP/CalData/DCNUMetadata_0", &v14))
    {
      uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v3 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v3;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136315138;
        CFStringRef v16 = "DCNUInitInternal";
        _os_log_impl(&dword_24680F000, v3, OS_LOG_TYPE_INFO, "%s - DCNU files not present... skipping DCNU operations\n", buf, 0xCu);
      }
      *(unsigned char *)(a2 + 57688) = 0;
      *(void *)(a2 + 4496) = 0;
    }
    else
    {
      *(unsigned char *)(a2 + 57688) = 1;
      uint64_t v4 = dispatch_queue_create("com.apple.isp.dcnu", 0);
      *(void *)(a2 + 4496) = v4;
      if (v4)
      {
        block[0] = MEMORY[0x263EF8330];
        block[1] = 0x40000000;
        block[2] = ___ZL8DCNUInitP19H16ISPCaptureDeviceP19H16ISPCaptureStream_block_invoke;
        block[3] = &__block_descriptor_tmp_1655;
        void block[4] = a2;
        dispatch_async(v4, block);
      }
      else
      {
        uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v5 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          DCNUInit(v5, v6, v7, v8, v9, v10, v11, v12);
        }
      }
    }
  }
}

uint64_t MetadataOutputFeatureInitConfiguration(uint64_t result)
{
  uint64_t v1 = 0;
  *(void *)(result + 232) = kMetadataOutputConfigurationKeys;
  *(unsigned char *)(result + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(result + 248) = 0;
  *(void *)(result + 328) = &unk_26B11C068;
  *(unsigned char *)(result + 336) = 0;
  *(void *)(result + 344) = 0;
  mach_port_t v2 = (void *)(result + 440);
  do
  {
    *(v2 - 2) = &kMetadataOutputConfigurationKeys[3 * dword_2469DACC0[v1]];
    *((unsigned char *)v2 - 8) = 0;
    void *v2 = 0;
    v2 += 12;
    ++v1;
  }
  while (v1 != 4);
  *(void *)(result + 808) = &qword_26B11C0E0;
  *(unsigned char *)(result + 816) = 0;
  *(void *)(result + 824) = 0;
  *(void *)(result + 904) = &unk_26B11C0F8;
  *(unsigned char *)(result + 912) = 0;
  *(void *)(result + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  return result;
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::H16ISPTimeOfFlightColorSynchronizer(H16ISP::H16ISPTimeOfFlightColorSynchronizer *this, H16ISP::H16ISPDevice *a2, H16ISP::H16ISPServicesRemote *a3)
{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  operator new();
}

void sub_246871424(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10E0C40AAE68789);

  _Unwind_Resume(a1);
}

void H16ISP::H16ISPGetCFPreferenceArray(const __CFString *this, const __CFString *a2, const __CFString *a3, unsigned int *a4)
{
  unsigned int v4 = a4;
  CFArrayRef v7 = (const __CFArray *)CFPreferencesCopyValue(this, a2, (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  if (a3)
  {
    CFArrayRef v8 = v7;
    if (v7)
    {
      unsigned int valuePtr = 0;
      CFTypeID v9 = CFGetTypeID(v7);
      if (v9 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount(v8) >= 1
          && (v10 = CFArrayGetValueAtIndex(v8, 0), CFTypeID v11 = CFGetTypeID(v10), v11 == CFStringGetTypeID()))
        {
          if (CFArrayGetCount(v8) < 1)
          {
            unsigned int v15 = 0;
          }
          else
          {
            CFIndex v12 = 0;
            do
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v12);
              IntCFNumberRef Value = CFStringGetIntValue(ValueAtIndex);
              unsigned int v15 = IntValue;
              if (IntValue < v4) {
                *((_DWORD *)&a3->isa + IntValue) = 1;
              }
              ++v12;
            }
            while (CFArrayGetCount(v8) > v12);
          }
          unsigned int valuePtr = v15;
        }
        else if (CFArrayGetCount(v8) >= 1)
        {
          CFStringRef v22 = CFArrayGetValueAtIndex(v8, 0);
          CFTypeID v23 = CFGetTypeID(v22);
          if (v23 == CFNumberGetTypeID() && CFArrayGetCount(v8) >= 1)
          {
            CFIndex v24 = 0;
            do
            {
              CFNumberRef v25 = (const __CFNumber *)CFArrayGetValueAtIndex(v8, v24);
              CFNumberGetValue(v25, kCFNumberSInt32Type, &valuePtr);
              if (valuePtr < v4) {
                *((_DWORD *)&a3->isa + valuePtr) = 1;
              }
              ++v24;
            }
            while (CFArrayGetCount(v8) > v24);
          }
        }
      }
      else if (CFStringCompare(this, @"EnableMetadataSections", 1uLL) == kCFCompareEqualTo)
      {
        unsigned int v16 = CFStringGetIntValue((CFStringRef)v8);
        if (v16
          || (CFStringEncoding SystemEncoding = CFStringGetSystemEncoding(),
              (CStringPtr = CFStringGetCStringPtr((CFStringRef)v8, SystemEncoding)) != 0)
          && (unsigned int v16 = strtol(CStringPtr, 0, 0)) != 0)
        {
          uint64_t v17 = 0;
          int32x4_t v18 = (int32x4_t)xmmword_2469DB250;
          uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(v16);
          v20.i64[0] = 0x100000001;
          v20.i64[1] = 0x100000001;
          v21.i64[0] = 0x400000004;
          v21.i64[1] = 0x400000004;
          do
          {
            *(int8x16_t *)((char *)&a3->isa + v17) = vandq_s8((int8x16_t)vshlq_u32(v19, (uint32x4_t)vnegq_s32(v18)), v20);
            int32x4_t v18 = vaddq_s32(v18, v21);
            v17 += 16;
          }
          while (v17 != 128);
        }
      }
      CFRelease(v8);
    }
  }
}

H16ISP::H16ISPServicesRemote *H16ISP::H16ISPServicesRemote::H16ISPServicesRemote(H16ISP::H16ISPServicesRemote *this)
{
  *(void *)this = 0;
  *((void *)this + 4) = "com.apple.appleh16camerad";
  mach_port_t v2 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
  {
    mach_port_t v2 = os_log_create("com.apple.isp", "services");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v2;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl(&dword_24680F000, v2, OS_LOG_TYPE_DEFAULT, "Creating remote service object\n", v4, 2u);
  }
  *((void *)this + 1) = dispatch_queue_create(*((const char **)this + 4), 0);
  return this;
}

uint64_t H16ISP::H16ISPServicesRemote::Connect(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  v29[1647] = *(xpc_object_t *)MEMORY[0x263EF8340];
  if (*(void *)v2)
  {
    uint64_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
    {
      uint64_t v6 = os_log_create("com.apple.isp", "services");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v6;
    }
    uint64_t v7 = 3758097084;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPServicesRemote::Connect(v6, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  else
  {
    uint64_t v7 = v5;
    uint64_t v15 = v4;
    uint64_t v16 = v3;
    uint64_t v17 = (xpc_connection_t *)v2;
    *(void *)(v2 + 16) = v3;
    *(void *)(v2 + 24) = v4;
    mach_service = xpc_connection_create_mach_service(*(const char **)(v2 + 32), *(dispatch_queue_t *)(v2 + 8), 0);
    xpc_connection_t *v17 = mach_service;
    handler[0] = MEMORY[0x263EF8330];
    handler[1] = 0x40000000;
    handler[2] = ___ZN6H16ISP20H16ISPServicesRemote7ConnectEPFv25H16ISPServicesRemoteEventPvES2_b_block_invoke;
    handler[3] = &__block_descriptor_tmp_22;
    handler[4] = v17;
    void handler[5] = v16;
    handler[6] = v15;
    xpc_connection_set_event_handler(mach_service, handler);
    xpc_connection_activate(*v17);
    if (v7)
    {
      bzero(v29, 0x3378uLL);
      LODWORD(v29[0]) = 1;
      uint64_t v7 = H16ISP::H16ISPServicesRemote::SetProperty((uint64_t)v17, v29);
      if (v7)
      {
        uint32x4_t v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
        {
          uint32x4_t v19 = os_log_create("com.apple.isp", "services");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v19;
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPServicesRemote::Connect(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        H16ISP::H16ISPServicesRemote::Disconnect(v17);
      }
    }
  }
  return v7;
}

uint64_t H16ISP::H16ISPDevice::RegisterDeviceMessageNotificationProc(uint64_t this, int (*a2)(H16ISP::H16ISPDevice *, unsigned int, void *, void *), void *a3)
{
  *(void *)(this + 56) = a2;
  *(void *)(this + 64) = a3;
  return this;
}

uint64_t H16ISP::H16ISPDevice::ISP_GetExclaveEnablementStatus(H16ISP::H16ISPDevice *this, BOOL *a2)
{
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  mach_port_t v2 = *((_DWORD *)this + 1106);
  if (!v2) {
    return 3758097084;
  }
  uint64_t v4 = IOConnectCallScalarMethod(v2, 0x5Bu, 0, 0, &output, &outputCnt);
  if (v4)
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPDevice::ISP_GetExclaveEnablementStatus();
    }
  }
  else
  {
    *a2 = output != 0;
  }
  return v4;
}

uint64_t H16ISP::H16ISPDevice::ISP_GetDriverLoggingFlags(H16ISP::H16ISPDevice *this, unsigned int *a2)
{
  mach_port_t v2 = *((_DWORD *)this + 1106);
  if (!v2) {
    return 3758097084;
  }
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  uint64_t result = IOConnectCallScalarMethod(v2, 0x20u, 0, 0, &output, &outputCnt);
  if (!result) {
    *a2 = output;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::RegisterRemoteConnection(uint64_t this, H16ISP::H16ISPServicesRemote *a2)
{
  *(void *)(this + 112) = a2;
  return this;
}

uint64_t H16ISP::H16ISPDevice::ISP_ColdBootHint(H16ISP::H16ISPDevice *this, BOOL *a2)
{
  uint64_t result = 3758097084;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  if (!a2) {
    return 3758097090;
  }
  mach_port_t v4 = *((_DWORD *)this + 1106);
  if (v4)
  {
    uint64_t result = IOConnectCallScalarMethod(v4, 0x69u, 0, 0, &output, &outputCnt);
    if (!result) {
      *a2 = output == 1;
    }
  }
  return result;
}

uint64_t SetAEStability(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(_DWORD *)uint64_t v20 = -1;
  unsigned int valuePtr = -1;
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    if (valuePtr <= 0xFF)
    {
      int v8 = H16ISP::H16ISPDevice::SetAEStability(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), valuePtr);
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 67109376;
        unsigned int v23 = valuePtr;
        __int16 v24 = 1024;
        int v25 = v8;
        _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting AE Stability: 0x%02X, result=0x%08X\n\n", buf, 0xEu);
      }
      BOOL v10 = v8 == 0;
LABEL_9:
      if (v10) {
        return 0;
      }
      else {
        return 4294954516;
      }
    }
    return 4294954516;
  }
  CFTypeID v12 = CFGetTypeID(a1);
  if (v12 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D860]);
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2D858]);
  if (!Value || v14 == 0) {
    return 4294954516;
  }
  CFNumberRef v16 = v14;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  CFNumberGetValue(v16, kCFNumberIntType, v20);
  uint64_t result = 4294954516;
  if (valuePtr <= 0xFF && *(_DWORD *)v20 <= 0xFFu)
  {
    int v17 = *(unsigned __int16 *)(a2 + 132);
    if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
      v17 |= 0x80000000;
    }
    int v18 = H16ISP::H16ISPDevice::SetAEStability(*(H16ISP::H16ISPDevice **)(a4 + 24), v17, valuePtr);
    if (!v18) {
      int v18 = H16ISP::H16ISPDevice::SetAEStability_UnstableToStable(*(H16ISP::H16ISPDevice **)(a4 + 24), v17, v20[0]);
    }
    uint32x4_t v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint32x4_t v19 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 67109632;
      unsigned int v23 = valuePtr;
      __int16 v24 = 1024;
      int v25 = *(_DWORD *)v20;
      __int16 v26 = 1024;
      int v27 = v18;
      _os_log_impl(&dword_24680F000, v19, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Setting AE Stability: 0x%02X/0x%02X, result=0x%08X\n\n", buf, 0x14u);
    }
    BOOL v10 = v18 == 0;
    goto LABEL_9;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetAEStability_UnstableToStable(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 553;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetAEStability(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 538;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

void ___ZN6H16ISP19H16ISPGraphExitNode19onMessageProcessingEPNS_24H16ISPFilterGraphMessageE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  (*(void (**)(void, void, void, void, uint64_t))(*(void *)(a1 + 32)
                                                                  + 24 * *(unsigned int *)(a1 + 48)
                                                                  + 96))(*(void *)v2, *(void *)(v2 + 8), *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v2 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v3 + 20))
  {
    unint64_t v4 = 0;
    uint64_t v5 = 24;
    do
    {
      CVPixelBufferRelease(*(CVPixelBufferRef *)(v3 + v5));
      ++v4;
      uint64_t v3 = *(void *)(a1 + 40);
      v5 += 16;
    }
    while (v4 < *(unsigned int *)(v3 + 20));
  }

  JUMPOUT(0x24C53D6E0);
}

uint64_t MyH16ISPFrameReceivedProc(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  unsigned int allocator = v5;
  unsigned int v296 = v6;
  CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)v2;
  uint64_t v369 = *MEMORY[0x263EF8340];
  long long v366 = 0u;
  long long v367 = 0u;
  mach_timebase_info(&info);
  double valuePtr = 0.0;
  double v346 = 0.0;
  int v345 = 0;
  memset(v365, 0, sizeof(v365));
  memset(v364, 0, 28);
  long long v363 = 0u;
  long long v362 = 0u;
  long long v361 = 0u;
  long long v360 = 0u;
  long long v359 = 0u;
  long long v358 = 0u;
  long long v357 = 0u;
  long long v356 = 0u;
  long long v355 = 0u;
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v328 = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  long long v312 = (pthread_mutex_t *)(DerivedStorage + 304);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 304));
  if ((*(unsigned char *)(v328 + 154) & 2) != 0)
  {
    LogCaptureDeviceEvent(0x11u, v328, DerivedStorage, 0, 0, 0, 0);
    theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 10, MEMORY[0x263EFFF70]);
  }
  else
  {
    theArray = 0;
  }
  if (!allocator)
  {
    int v334 = 0;
    CVPixelBufferRef v27 = 0;
    imageBuffer = 0;
    sourceBuffer = 0;
    CVBufferRef v316 = 0;
    CVPixelBufferRef pixelBuffer = 0;
    CVPixelBufferRef v319 = 0;
    CVPixelBufferRef v303 = 0;
    v304 = 0;
    CVPixelBufferRef v25 = 0;
    __int16 v26 = 0;
    uint64_t v324 = 0;
    CVPixelBufferRef texturea = 0;
    CVPixelBufferRef v302 = 0;
    uint64_t v313 = 0;
    CVPixelBufferRef value = 0;
    CVPixelBufferRef v297 = 0;
    CVPixelBufferRef v309 = 0;
    CVPixelBufferRef v311 = 0;
    CVBufferRef buffer = 0;
    CVPixelBufferRef v298 = 0;
    long long v318 = 0uLL;
    CVBufferRef v308 = 0;
    CFMutableDictionaryRef v307 = 0;
    CVPixelBufferRef v299 = 0;
    goto LABEL_70;
  }
  CVPixelBufferRef texture = 0;
  CVPixelBufferRef v332 = 0;
  CVBufferRef v333 = 0;
  uint64_t v7 = allocator;
  uint64_t v8 = allocator;
  uint64_t v9 = v4;
  do
  {
    int v10 = *(_DWORD *)(v9 + 8);
    if (v10 <= 0x19 && ((1 << v10) & 0x2000104) != 0)
    {
      IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)v9);
      IOSurfaceGetID(IOSurface);
      kdebug_trace();
      int v10 = *(_DWORD *)(v9 + 8);
    }
    if (v10 <= 24)
    {
      if (v10 == 2)
      {
        CVBufferRef v333 = *(CVBufferRef *)v9;
        strcat((char *)v365, "M ");
        goto LABEL_21;
      }
      if (v10 != 8) {
        goto LABEL_21;
      }
      CVPixelBufferRef v332 = *(CVPixelBufferRef *)v9;
      size_t v13 = strlen((const char *)v365);
      int v14 = 2116947;
      goto LABEL_20;
    }
    if (v10 == 25)
    {
      CVPixelBufferRef texture = *(CVPixelBufferRef *)v9;
      size_t v13 = strlen((const char *)v365);
      int v14 = 2116944;
LABEL_20:
      *(_DWORD *)((char *)v365 + v13) = v14;
      goto LABEL_21;
    }
    if (v10 == 38)
    {
      *(_DWORD *)((char *)v365 + strlen((const char *)v365)) = 2116933;
      EnqueueExclaveSensorMetadata();
    }
LABEL_21:
    v9 += 16;
    --v8;
  }
  while (v8);
  if (v333 || v332 || texture) {
    operator new();
  }
  CVPixelBufferRef v27 = 0;
  CVPixelBufferRef v298 = 0;
  CVPixelBufferRef v299 = 0;
  long long v318 = 0uLL;
  CFMutableDictionaryRef v307 = 0;
  CVBufferRef v308 = 0;
  CVPixelBufferRef v309 = 0;
  CVPixelBufferRef v311 = 0;
  CVBufferRef buffer = 0;
  CVBufferRef v316 = 0;
  uint64_t v313 = 0;
  CVPixelBufferRef value = 0;
  CVPixelBufferRef v297 = 0;
  v304 = 0;
  CVPixelBufferRef v302 = 0;
  CVPixelBufferRef v303 = 0;
  sourceBuffer = 0;
  uint64_t v324 = 0;
  int v334 = 0;
  CVPixelBufferRef texturea = 0;
  __int16 v26 = 0;
  CVPixelBufferRef v25 = 0;
  CVPixelBufferRef v319 = 0;
  CVPixelBufferRef pixelBuffer = 0;
  imageBuffer = 0;
  CVPixelBufferRef v329 = (CVPixelBufferRef)*((void *)&v367 + 1);
  CVPixelBufferRef v22 = (CVPixelBufferRef)v367;
  CVPixelBufferRef cf = (CVPixelBufferRef)*((void *)&v366 + 1);
  do
  {
    uint64_t v15 = *(unsigned int *)(v4 + 8);
    *((_DWORD *)&v355 + v15) = *(_DWORD *)(v4 + 12);
    switch((int)v15)
    {
      case 0:
        imageBuffer = *(__CVBuffer **)v4;
        CFNumberRef v16 = (char *)v365 + strlen((const char *)v365);
        __int16 v17 = 8271;
        goto LABEL_46;
      case 1:
        strcat((char *)v365, "R ");
        CVPixelBufferRef pixelBuffer = *(CVPixelBufferRef *)v4;
        break;
      case 3:
        v304 = *(__CVBuffer **)v4;
        CFNumberRef v16 = (char *)v365 + strlen((const char *)v365);
        __int16 v17 = 8262;
        goto LABEL_46;
      case 4:
        size_t v18 = strlen((const char *)v365);
        int v19 = 2118977;
        goto LABEL_62;
      case 5:
        CVPixelBufferRef v298 = *(CVPixelBufferRef *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2117715;
        goto LABEL_62;
      case 6:
        CVPixelBufferRef v25 = *(CVPixelBufferRef *)v4;
        CFNumberRef v16 = (char *)v365 + strlen((const char *)v365);
        __int16 v17 = 8259;
        goto LABEL_46;
      case 7:
        __int16 v26 = *(__CVBuffer **)v4;
        CFNumberRef v16 = (char *)v365 + strlen((const char *)v365);
        __int16 v17 = 8275;
        goto LABEL_46;
      case 9:
        uint64_t v324 = *(__CVBuffer **)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2115923;
        goto LABEL_62;
      case 10:
        CVPixelBufferRef texturea = *(CVPixelBufferRef *)v4;
        CFNumberRef v16 = (char *)v365 + strlen((const char *)v365);
        __int16 v17 = 8242;
        goto LABEL_46;
      case 12:
        CVPixelBufferRef v311 = *(CVPixelBufferRef *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2119748;
        goto LABEL_62;
      case 13:
        CVBufferRef v308 = *(CVBufferRef *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2120004;
        goto LABEL_62;
      case 14:
        CFMutableDictionaryRef v307 = *(CFMutableDictionaryRef *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2116935;
        goto LABEL_62;
      case 15:
        *((void *)&v318 + 1) = *(void *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2119758;
        goto LABEL_62;
      case 17:
        *(void *)&long long v318 = *(void *)v4;
        CFNumberRef v16 = (char *)v365 + strlen((const char *)v365);
        __int16 v17 = 8260;
LABEL_46:
        *(_WORD *)CFNumberRef v16 = v17;
        _DWORD v16[2] = 0;
        break;
      case 19:
        uint64_t v313 = *(__CVBuffer **)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2110034;
        goto LABEL_62;
      case 20:
        CVPixelBufferRef v303 = *(CVPixelBufferRef *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2118226;
        goto LABEL_62;
      case 21:
        CVPixelBufferRef v299 = *(CVPixelBufferRef *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2110030;
        goto LABEL_62;
      case 22:
        CVPixelBufferRef v302 = *(CVPixelBufferRef *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2118224;
        goto LABEL_62;
      case 23:
        size_t v18 = strlen((const char *)v365);
        int v19 = 2117702;
        goto LABEL_62;
      case 24:
        CVPixelBufferRef v297 = *(CVPixelBufferRef *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2115926;
        goto LABEL_62;
      case 26:
        CVPixelBufferRef v309 = *(CVPixelBufferRef *)v4;
        uint64_t v20 = (char *)v365 + strlen((const char *)v365);
        unsigned __int16 v21 = 20563;
        goto LABEL_31;
      case 29:
        *(_DWORD *)((char *)v365 + strlen((const char *)v365)) = 2118227;
        CVPixelBufferRef v319 = *(CVPixelBufferRef *)v4;
        break;
      case 30:
        *(_DWORD *)((char *)v365 + strlen((const char *)v365)) = 2118228;
        int v334 = *(__CVBuffer **)v4;
        break;
      case 31:
        sourceBuffer = *(__CVBuffer **)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2119747;
        goto LABEL_62;
      case 32:
        unsigned int v23 = (char *)v365 + strlen((const char *)v365);
        int v24 = 1297368659;
        goto LABEL_58;
      case 33:
        uint64_t v20 = (char *)v365 + strlen((const char *)v365);
        unsigned __int16 v21 = 20555;
LABEL_31:
        *(_DWORD *)uint64_t v20 = v21 | 0x20440000;
        unsigned __int8 v20[4] = 0;
        break;
      case 34:
        CVPixelBufferRef v27 = *(CVPixelBufferRef *)v4;
        unsigned int v23 = (char *)v365 + strlen((const char *)v365);
        int v24 = 1347833171;
        goto LABEL_58;
      case 35:
        CVPixelBufferRef cf = *(CVPixelBufferRef *)v4;
        strcat((char *)v365, "SMVSK ");
        break;
      case 36:
        CVPixelBufferRef v22 = *(CVPixelBufferRef *)v4;
        unsigned int v23 = (char *)v365 + strlen((const char *)v365);
        int v24 = 1213615443;
        goto LABEL_58;
      case 37:
        CVPixelBufferRef v329 = *(CVPixelBufferRef *)v4;
        unsigned int v23 = (char *)v365 + strlen((const char *)v365);
        int v24 = 1398164819;
        goto LABEL_58;
      case 39:
        CVBufferRef buffer = *(CVBufferRef *)v4;
        unsigned int v23 = (char *)v365 + strlen((const char *)v365);
        int v24 = 1213483336;
LABEL_58:
        *(_DWORD *)unsigned int v23 = v24;
        *((_WORD *)v23 + 2) = 32;
        break;
      case 40:
        CVPixelBufferRef value = *(CVPixelBufferRef *)v4;
        size_t v18 = strlen((const char *)v365);
        int v19 = 2108242;
LABEL_62:
        *(_DWORD *)((char *)v365 + v18) = v19;
        break;
      case 41:
        CVBufferRef v316 = *(CVBufferRef *)v4;
        *(void *)((char *)v365 + strlen((const char *)v365)) = 0x20485454534E41;
        break;
      default:
        break;
    }
    if (theArray)
    {
      uint64_t v28 = *(unsigned int *)(v4 + 8);
      if ((int)v28 <= 43) {
        CFArrayAppendValue(theArray, kCMEventLogger_BufferPoolTypeString[v28]);
      }
    }
    v4 += 16;
    --v7;
  }
  while (v7);
  *(void *)&long long v367 = v22;
  *((void *)&v367 + 1) = v329;
  *((void *)&v366 + 1) = cf;
LABEL_70:
  *(void *)&long long v366 = v27;
  uint64_t v29 = DerivedStorage;
  CVBufferRef destinationBuffer = v26;
  if (v26 || v324)
  {
    CFStringRef v34 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFStringRef v34 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v34;
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      int v35 = *(_DWORD *)(DerivedStorage + 132);
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v35;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = allocator;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = v365;
      CFStringRef v32 = v34;
      os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
LABEL_81:
      _os_log_impl(&dword_24680F000, v32, v33, "%s - (channel %d): (count=%d) %s\n", buf, 0x22u);
    }
  }
  else if (dword_26B11B9E8)
  {
    CFStringRef v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFStringRef v30 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v30;
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      int v31 = *(_DWORD *)(DerivedStorage + 132);
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v31;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = allocator;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = v365;
      CFStringRef v32 = v30;
      os_log_type_t v33 = OS_LOG_TYPE_INFO;
      goto LABEL_81;
    }
  }
  if (!v26 && sourceBuffer)
  {
    if (*(unsigned char *)(DerivedStorage + 2280))
    {
      CVBufferRef destinationBuffer = 0;
    }
    else
    {
      LOBYTE(v289) = 0;
      CVBufferRef destinationBuffer = H16ISP::H16ISPCreateCVBuffer(0x40u, 0x40u, 0, 0, 0, 1, 0.0, 64, 64, 0, v289, 0, 0, -1);
      CVBufferPropagateAttachments(sourceBuffer, destinationBuffer);
      CVBufferRemoveAllAttachments(sourceBuffer);
      uint64_t v29 = DerivedStorage;
    }
  }
  if ((unint64_t)destinationBuffer | (unint64_t)v324) {
    CFStringRef v36 = 0;
  }
  else {
    CFStringRef v36 = v25;
  }
  CVBufferRef v301 = v36;
  CFStringRef v37 = texturea;
  if ((unint64_t)destinationBuffer | (unint64_t)v324) {
    CFStringRef v37 = 0;
  }
  int v306 = v37;
  if (!*(unsigned char *)(v29 + 674))
  {
    if (!imageBuffer) {
      goto LABEL_103;
    }
    CFStringRef v41 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFStringRef v41 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v41;
    }
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      MyH16ISPFrameReceivedProc();
    }
LABEL_101:
    MyH16ISPFrameReceiverMessageProc(5, 0, 0, 0, 0, theDict);
    pthread_mutex_unlock(v312);
    kdebug_trace();
    return 0;
  }
  if ((unint64_t)destinationBuffer | (unint64_t)v324
    || (unint64_t)imageBuffer | (unint64_t)v37 | (unint64_t)v301 | (unint64_t)v313)
  {
    CFStringRef v38 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFStringRef v38 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v38;
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      MyH16ISPFrameReceivedProc();
    }
    goto LABEL_101;
  }
LABEL_103:
  CFStringRef v39 = (unsigned char *)(v29 + 4488);
  if ((*(unsigned char *)(v328 + 107) & 0x40) != 0 && *v39)
  {
    if (*(void *)(v29 + 4480))
    {
      if (snprintf(buf, 0x80uLL, "H16ISPCaptureDevice: [ch%d] Time from stream start to first frame", *(_DWORD *)(v29 + 132)) <= 0x7F)CFStringRef v40 = buf; {
      else
      }
        CFStringRef v40 = "H16ISPCaptureDevice: Time from stream start to first frame";
      H16ISP::H16ISPTimeLogger::end(*(H16ISP::H16ISPTimeLogger **)(v29 + 4480), v40, 0, 1);
      unsigned char *v39 = 0;
LABEL_119:
      uint64_t v29 = DerivedStorage;
    }
    else
    {
      CFStringRef v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFStringRef v42 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v42;
      }
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        MyH16ISPFrameReceivedProc(v42, v43, v44, v45, v46, v47, v48, v49);
        goto LABEL_119;
      }
    }
  }
  if (!v39[1])
  {
    v39[1] = 1;
    CFStringRef v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFStringRef v50 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v50;
    }
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      int v51 = *(_DWORD *)(v29 + 132);
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v51;
      _os_log_impl(&dword_24680F000, v50, OS_LOG_TYPE_INFO, "%s - First frame received on channel %d\n", buf, 0x12u);
    }
  }
  CFNumberRef v52 = imageBuffer;
  if (imageBuffer) {
    goto LABEL_127;
  }
  CFNumberRef v52 = v306;
  if (v306) {
    goto LABEL_127;
  }
  uint64_t v54 = v324;
  if (destinationBuffer) {
    uint64_t v54 = destinationBuffer;
  }
  CFNumberRef v52 = v301 ? v301 : v54;
  if (v301 || destinationBuffer || v324 || (CFNumberRef v52 = pixelBuffer) != 0 || (CFNumberRef v52 = v319) != 0 || (CFNumberRef v52 = v313) != 0) {
LABEL_127:
  }
    CFTypeRef Attachment = CVBufferGetAttachment(v52, (CFStringRef)*MEMORY[0x263F2C558], 0);
  else {
    CFTypeRef Attachment = 0;
  }
  CMAttachmentBearerRef target = 0;
  int64_t v53 = FigHostTimeToNanoseconds();
  CMTimeMake(&v342, v53, 1000000000);
  if (*(_DWORD *)(*(void *)(*(void *)(v328 + 24) + 4384) + 96 * v296 + 16) == 1919246706) {
    H16ISP::H16ISPTimeOfFlightColorSynchronizer::isWideForcedToStream(*(H16ISP::H16ISPTimeOfFlightColorSynchronizer **)(v328 + 240));
  }
  uint64_t v55 = DerivedStorage;
  if (!*(unsigned char *)(DerivedStorage + 674))
  {
    uint64_t v55 = DerivedStorage;
    if (CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(DerivedStorage + 24)) >= 2 && !v298)
    {
      CFAllocatorRef v63 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        int64_t v65 = FigHostTimeToNanoseconds();
        CMTimeMake(&time, v65, 1000000000);
        CFDictionaryRef v66 = CMTimeCopyAsDictionary(&time, v63);
        if (v66)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2D6E8], v66);
          CFRelease(v66);
        }
        H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D700], theDict, Mutable);
        CFRelease(Mutable);
      }
      else
      {
        H16ISPPostNotification((const __CFString *)*MEMORY[0x263F2D700], theDict, 0);
      }
      kdebug_trace();
      pthread_mutex_unlock(v312);
      return 0;
    }
  }
  *(_OWORD *)&sampleTiming.duration.CVPixelBufferRef value = *MEMORY[0x263F01090];
  CMTimeEpoch v56 = *(void *)(MEMORY[0x263F01090] + 16);
  sampleTiming.presentationTimeStamp = v342;
  sampleTiming.duration.epoch = v56;
  *(_OWORD *)&sampleTiming.decodeTimeStamp.CVPixelBufferRef value = *(_OWORD *)&sampleTiming.duration.value;
  sampleTiming.decodeTimeStamp.epoch = v56;
  if (imageBuffer && !*(unsigned char *)(v55 + 674))
  {
    if (*(void *)(v55 + 504))
    {
      if (CVPixelBufferGetWidth(imageBuffer) == *(void *)(DerivedStorage + 512))
      {
        size_t Height = CVPixelBufferGetHeight(imageBuffer);
        uint64_t v86 = DerivedStorage;
        if (Height == *(void *)(DerivedStorage + 520)) {
          goto LABEL_250;
        }
      }
      FigFormatDescriptionRelease();
      CFAllocatorRef v87 = CFGetAllocator(*(CFTypeRef *)(DerivedStorage + 16));
      CMVideoFormatDescriptionCreateForImageBuffer(v87, imageBuffer, (CMVideoFormatDescriptionRef *)(v55 + 504));
      size_t Width = CVPixelBufferGetWidth(imageBuffer);
    }
    else
    {
      CFAllocatorRef v101 = CFGetAllocator(*(CFTypeRef *)(v55 + 16));
      CMVideoFormatDescriptionCreateForImageBuffer(v101, imageBuffer, (CMVideoFormatDescriptionRef *)(v55 + 504));
      size_t Width = CVPixelBufferGetWidth(imageBuffer);
    }
    *(void *)(DerivedStorage + 512) = Width;
    size_t v102 = CVPixelBufferGetHeight(imageBuffer);
    uint64_t v86 = DerivedStorage;
    *(void *)(DerivedStorage + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v102;
LABEL_250:
    CFAllocatorRef v103 = CFGetAllocator(*(CFTypeRef *)(v86 + 16));
    uint64_t v55 = DerivedStorage;
    if (!CMSampleBufferCreateForImageBuffer(v103, imageBuffer, 1u, 0, 0, *(CMVideoFormatDescriptionRef *)(DerivedStorage + 504), &sampleTiming, (CMSampleBufferRef *)&target))goto LABEL_146; {
    CFNumberRef v104 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    }
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v104 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v104;
    }
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR)) {
      MyH16ISPFrameReceivedProc();
    }
    CFMutableDictionaryRef theDicta = 0;
    uint64_t v89 = 0;
    long long v310 = 0;
    cfa = 0;
    goto LABEL_648;
  }
LABEL_146:
  if (*(unsigned char *)(v55 + 80)
    || *(unsigned char *)(v55 + 674)
    && (*(unsigned char *)(v55 + 752)
     || *(unsigned char *)(v55 + 952)
     || *(unsigned char *)(v55 + 1152)
     || *(unsigned char *)(v55 + 1352)
     || *(unsigned char *)(v55 + 1552)
     || *(unsigned char *)(v55 + 1880)
     || *(unsigned char *)(v55 + 3608)))
  {
    CFAllocatorRef v57 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFNumberRef v58 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionaryRef v59 = v58;
    if (v58)
    {
      if (Attachment) {
        CFDictionarySetValue(v58, (const void *)*MEMORY[0x263F2C4F0], Attachment);
      }
      CFNumberRef v60 = (const void **)MEMORY[0x263F2C4E8];
      if (pixelBuffer) {
        CFDictionarySetValue(v59, (const void *)*MEMORY[0x263F2C4E8], pixelBuffer);
      }
      if (value) {
        CFDictionarySetValue(v59, *v60, value);
      }
    }
    if (v319 != 0)
    {
      CFNumberRef v61 = CFDictionaryCreateMutable(v57, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      long long v62 = v61;
      if (v61)
      {
        if (Attachment) {
          CFDictionarySetValue(v61, (const void *)*MEMORY[0x263F2C4F0], Attachment);
        }
        if (v319) {
          CFDictionarySetValue(v62, (const void *)*MEMORY[0x263F2C4E8], v319);
        }
      }
    }
    else
    {
      long long v62 = 0;
    }
  }
  else
  {
    long long v62 = 0;
    CFDictionaryRef v59 = 0;
  }
  if (imageBuffer && target)
  {
    if (Attachment) {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x263F2C558], Attachment, 1u);
    }
    if (v59) {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x263F2C578], v59, 1u);
    }
    if (v62) {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x263F2C590], v62, 1u);
    }
  }
  CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (v309
    && (uint64_t v67 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]), (theDicta = v67) != 0))
  {
    CFDictionarySetValue(v67, @"SPD", v309);
  }
  else
  {
    CFMutableDictionaryRef theDicta = 0;
  }
  CFNumberRef v68 = (__CVBuffer *)operator new(0x38uLL);
  int v69 = v62;
  unsigned int v70 = v59;
  uint64_t v71 = 0;
  *(void *)CFNumberRef v68 = pixelBuffer;
  *((void *)v68 + 1) = v319;
  *((void *)v68 + 2) = v334;
  *((void *)v68 + 3) = 0;
  *((void *)v68 + 4) = sourceBuffer;
  *((void *)v68 + 5) = value;
  CVPixelBufferRef textureb = v68;
  *((void *)v68 + 6) = 0;
  CFStringRef v72 = (const __CFString *)*MEMORY[0x263F04238];
  do
  {
    if (*(void *)((char *)textureb + v71))
    {
      *(_DWORD *)int buf = 3;
      CFNumberRef v74 = CFNumberCreate(allocatora, kCFNumberSInt32Type, buf);
      if (v74)
      {
        CVBufferSetAttachment(*(CVBufferRef *)((char *)textureb + v71), v72, v74, kCVAttachmentMode_ShouldPropagate);
        CFRelease(v74);
      }
    }
    v71 += 8;
  }
  while (v71 != 56);
  uint64_t v75 = DerivedStorage;
  int v76 = pixelBuffer;
  int v77 = Attachment;
  cfa = v70;
  long long v310 = v69;
  if (v334)
  {
    CFNumberRef v78 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v78)
    {
      if (v293)
      {
        v370.size.width = (double)v293;
        v370.size.height = (double)v292;
        v370.origin.y = (double)v290;
        v370.origin.x = (double)v291;
        DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v370);
        if (DictionaryRepresentation)
        {
          CFDictionarySetValue(v78, (const void *)*MEMORY[0x263F2D640], DictionaryRepresentation);
          CVBufferSetAttachment(v334, (CFStringRef)*MEMORY[0x263F2C558], v78, kCVAttachmentMode_ShouldPropagate);
          CFRelease(DictionaryRepresentation);
        }
      }
      CFRelease(v78);
    }
  }
  int v80 = *(_DWORD *)(DerivedStorage + 76);
  if (!*(unsigned char *)(DerivedStorage + 674))
  {
    if (!dword_26B11BA40 && CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 24), target))
    {
      CFNumberRef v105 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v105 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v105;
      }
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR)) {
        MyH16ISPFrameReceivedProc();
      }
    }
    uint64_t v89 = 0;
    goto LABEL_647;
  }
  if (!v80) {
    goto LABEL_267;
  }
  BOOL v81 = ((unint64_t)destinationBuffer | (unint64_t)v324) != 0;
  if (pixelBuffer) {
    BOOL v81 = 1;
  }
  if (v81 || v319 || value)
  {
    int v83 = *(unsigned __int8 *)(DerivedStorage + 1280);
    if (!destinationBuffer || !*(unsigned char *)(DerivedStorage + 1280))
    {
      int v84 = *(unsigned __int8 *)(DerivedStorage + 1480);
      if (!*(unsigned char *)(DerivedStorage + 1480) || !v324)
      {
        int v82 = *(unsigned __int8 *)(DerivedStorage + 1680);
        if (!*(unsigned char *)(DerivedStorage + 1680) || !pixelBuffer) {
          goto LABEL_211;
        }
      }
    }
LABEL_232:
    int v90 = v80 - 1;
    *(_DWORD *)(DerivedStorage + 76) = v80 - 1;
    CFNumberRef v91 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    uint64_t v92 = &_os_log_internal;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v91 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v91;
      int v90 = *(_DWORD *)(DerivedStorage + 76);
    }
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      int v93 = *(_DWORD *)(DerivedStorage + 132);
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v93;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 0;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v90;
      _os_log_impl(&dword_24680F000, v91, OS_LOG_TYPE_DEFAULT, "%s - (channel %d): Still frame received: prebracket=%d, (%d pending)\n", buf, 0x1Eu);
      int v90 = *(_DWORD *)(DerivedStorage + 76);
    }
    if (!v90)
    {
      unsigned int v94 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v92)
      {
        unsigned int v94 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v94;
      }
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        int v95 = *(_DWORD *)(DerivedStorage + 132);
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v95;
        _os_log_impl(&dword_24680F000, v94, OS_LOG_TYPE_DEFAULT, "%s - (channel %d): Capture complete\n", buf, 0x12u);
      }
      dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 3776), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      float v96 = *(float *)(DerivedStorage + 56);
      double v97 = 5.0;
      if (v96 > 2.0) {
        double v97 = 3.0;
      }
      BOOL v98 = v96 <= 3.0;
      double v99 = 2.0;
      if (v98) {
        double v99 = v97;
      }
      H16ISP::H16ISPFrameReceiver::SetFrameDoneTimeoutDuration(*(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136), v99);
      uint64_t v100 = *(void *)(v328 + 200);
      if (v100)
      {
        *(_DWORD *)int buf = 101;
        uint8_t buf[8] = 0;
        H16ISP::H16ISPServicesRemote::SetPropertyAsync(v100, (xpc_object_t *)buf);
      }
      else
      {
        int v106 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v92)
        {
          int v106 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v106;
        }
        if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 136315138;
          *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
          _os_log_impl(&dword_24680F000, v106, OS_LOG_TYPE_INFO, "%s - Could not set strobe state\n", buf, 0xCu);
        }
      }
    }
    goto LABEL_267;
  }
  int v82 = *(unsigned __int8 *)(DerivedStorage + 1680);
  if (!sourceBuffer || !*(unsigned char *)(DerivedStorage + 2280)) {
    goto LABEL_267;
  }
  int v83 = *(unsigned __int8 *)(DerivedStorage + 1280);
  int v84 = *(unsigned __int8 *)(DerivedStorage + 1480);
LABEL_211:
  if (!(v83 | v82 | v84) && (unint64_t)imageBuffer | (unint64_t)v306
    || *(unsigned char *)(DerivedStorage + 2280) && (pixelBuffer || v319 || sourceBuffer || value))
  {
    goto LABEL_232;
  }
LABEL_267:
  if (!((unint64_t)v318 | (unint64_t)v311) && !v308 && !v307 && !*((void *)&v318 + 1))
  {
    int v300 = 0;
    uint64_t v294 = 0;
    int v107 = 0;
    uint64_t v89 = 0;
    goto LABEL_303;
  }
  unsigned int v108 = dword_26B11BA28;
  if (dword_26B11BA28 >= 1)
  {
    double v109 = valuePtr;
    double v110 = v346;
    {
      H16ISPDebugDepthFrameFileWriter(int,__CVBuffer *,__CVBuffer *,__CFDictionary const*,double,double)::queue = (uint64_t)dispatch_queue_create("Debug PCE Depth Writer", MEMORY[0x263EF83A8]);
    }
    int v111 = H16ISPDebugDepthFrameFileWriter(int,__CVBuffer *,__CVBuffer *,__CFDictionary const*,double,double)::savedFrameCounter;
    if (!(H16ISPDebugDepthFrameFileWriter(int,__CVBuffer *,__CVBuffer *,__CFDictionary const*,double,double)::savedFrameCounter
         % v108))
    {
      CVPixelBufferRetain((CVPixelBufferRef)v318);
      CVPixelBufferRetain(*((CVPixelBufferRef *)&v318 + 1));
      if (Attachment) {
        CFRetain(Attachment);
      }
      *(void *)int buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZL31H16ISPDebugDepthFrameFileWriteriP10__CVBufferS0_PK14__CFDictionarydd_block_invoke;
      *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_1765;
      *(_OWORD *)&unsigned char buf[32] = v318;
      CFTypeRef v352 = Attachment;
      double v353 = v109;
      double v354 = v110;
      dispatch_async((dispatch_queue_t)H16ISPDebugDepthFrameFileWriter(int,__CVBuffer *,__CVBuffer *,__CFDictionary const*,double,double)::queue, buf);
      int v111 = H16ISPDebugDepthFrameFileWriter(int,__CVBuffer *,__CVBuffer *,__CFDictionary const*,double,double)::savedFrameCounter;
    }
    H16ISPDebugDepthFrameFileWriter(int,__CVBuffer *,__CVBuffer *,__CFDictionary const*,double,double)::savedFrameCounter = v111 + 1;
  }
  CFNumberRef v112 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v89 = v112;
  if (!v112) {
    goto LABEL_301;
  }
  if ((void)v318) {
    CFDictionarySetValue(v112, (const void *)*MEMORY[0x263F2C7D8], (const void *)v318);
  }
  if (v311) {
    CFDictionarySetValue(v89, (const void *)*MEMORY[0x263F2C7C0], v311);
  }
  if (v308) {
    CFDictionarySetValue(v89, (const void *)*MEMORY[0x263F2C7D0], v308);
  }
  if (v307) {
    CFDictionarySetValue(v89, (const void *)*MEMORY[0x263F2C7F0], v307);
  }
  if (*((void *)&v318 + 1)) {
    CFDictionarySetValue(v89, (const void *)*MEMORY[0x263F2C7F8], *((const void **)&v318 + 1));
  }
  if (v299) {
    CFDictionarySetValue(v89, @"NormDX2", v299);
  }
  if (valuePtr != 0.0 || v346 != 0.0)
  {
    CFNumberRef v113 = CFNumberCreate(allocatora, kCFNumberFloat64Type, &valuePtr);
    if (v113)
    {
      CFDictionarySetValue(v89, (const void *)*MEMORY[0x263F2C7E8], v113);
      CFRelease(v113);
    }
    CFNumberRef v114 = CFNumberCreate(allocatora, kCFNumberFloat64Type, &v346);
    if (v114)
    {
      CFDictionarySetValue(v89, (const void *)*MEMORY[0x263F2C7E0], v114);
      CFRelease(v114);
    }
  }
  if (v311)
  {
    CFNumberRef v115 = CFNumberCreate(allocatora, kCFNumberSInt32Type, &v345);
    if (v115)
    {
      CFDictionarySetValue(v89, (const void *)*MEMORY[0x263F2C7C8], v115);
      CFRelease(v115);
      int v300 = (__CVBuffer *)*((void *)&v318 + 1);
      int v107 = (__CVBuffer *)v318;
      uint64_t v294 = v311;
      goto LABEL_303;
    }
LABEL_301:
    int v300 = (__CVBuffer *)*((void *)&v318 + 1);
    int v107 = (__CVBuffer *)v318;
    uint64_t v294 = v311;
  }
  else
  {
    uint64_t v294 = 0;
    int v300 = (__CVBuffer *)*((void *)&v318 + 1);
    int v107 = (__CVBuffer *)v318;
  }
LABEL_303:
  uint64_t v116 = *(void *)(v328 + 24);
  unsigned int v117 = *(_DWORD *)(DerivedStorage + 132);
  int v118 = *(_DWORD *)(*(void *)(v116 + 4384) + 96 * v117 + 16);
  if (v118 == 1718186595 || v118 == 1769110115 || v118 == 1785950322)
  {
    if (destinationBuffer)
    {
      HIDWORD(v356) = DWORD1(v355);
      CVBufferRef destinationBuffer = pixelBuffer;
    }
    else
    {
      CVBufferRef destinationBuffer = 0;
    }
    if (imageBuffer || H16ISP::H16ISPDevice::isSensorType(v116, v117, 1785950322))
    {
      LODWORD(v355) = DWORD1(v355);
      imageBuffer = pixelBuffer;
    }
    else
    {
      imageBuffer = 0;
    }
    char v305 = 1;
    if (pixelBuffer && Attachment)
    {
      char v305 = 1;
      CVBufferSetAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x263F2C558], Attachment, kCVAttachmentMode_ShouldPropagate);
    }
  }
  else
  {
    char v305 = 0;
  }
  if (imageBuffer && *(unsigned char *)(DerivedStorage + 680) && *(void *)(DerivedStorage + 784))
  {
    if (cfa)
    {
      char v121 = v305;
      if (!*(unsigned char *)(DerivedStorage + 752)) {
        char v121 = 1;
      }
      if ((v121 & 1) == 0) {
        CVBufferSetAttachment(imageBuffer, (CFStringRef)*MEMORY[0x263F2C578], cfa, kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (v69)
    {
      char v122 = v305;
      if (!*(unsigned char *)(DerivedStorage + 752)) {
        char v122 = 1;
      }
      if ((v122 & 1) == 0) {
        CVBufferSetAttachment(imageBuffer, (CFStringRef)*MEMORY[0x263F2C590], v69, kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (v89) {
      CVBufferSetAttachment(imageBuffer, (CFStringRef)*MEMORY[0x263F2C520], v89, kCVAttachmentMode_ShouldPropagate);
    }
    if (v297) {
      CVBufferSetAttachment(imageBuffer, (CFStringRef)*MEMORY[0x263F2C5E0], v297, kCVAttachmentMode_ShouldPropagate);
    }
    if (v316 && *(unsigned char *)(DerivedStorage + 3593))
    {
      CFStringRef v123 = *(void *)(DerivedStorage + 3600)
           ? *(const __CFString **)(DerivedStorage + 3600)
           : (const __CFString *)*MEMORY[0x263F2E908];
      if (CFEqual(v123, (CFStringRef)*MEMORY[0x263F2E918])) {
        CVBufferSetAttachment(imageBuffer, (CFStringRef)*MEMORY[0x263F2CD58], v316, kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (buffer && *(unsigned char *)(DerivedStorage + 3497))
    {
      CFStringRef v124 = *(void *)(DerivedStorage + 3504)
           ? *(const __CFString **)(DerivedStorage + 3504)
           : (const __CFString *)*MEMORY[0x263F2E908];
      if (CFEqual(v124, (CFStringRef)*MEMORY[0x263F2E918])) {
        CVBufferSetAttachment(imageBuffer, (CFStringRef)*MEMORY[0x263F2CD60], buffer, kCVAttachmentMode_ShouldPropagate);
      }
    }
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(imageBuffer);
    H16ISP::getFrameFormatMetaInfo(PixelFormatType, &v368);
    if (!dword_26B11BA40)
    {
      if (!*(void *)(DerivedStorage + 4280))
      {
        uint64_t v126 = mach_absolute_time();
        *(void *)(DerivedStorage + 428pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v126;
        uint64_t v127 = *(void *)(DerivedStorage + 4272);
        uint32_t numer = info.numer;
        denoCFIndex m = info.denom;
        int v130 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v130 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v130;
        }
        int v76 = pixelBuffer;
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          int v131 = *(_DWORD *)(DerivedStorage + 132);
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v131;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = (double)(unint64_t)((double)numer / (double)denom * (double)(v126 - v127))
                              / 1000000.0;
          _os_log_impl(&dword_24680F000, v130, OS_LOG_TYPE_DEFAULT, "%s - First channel %d PrimaryScaler frame delivered to client after %8.3f msec\n\n", buf, 0x1Cu);
        }
      }
      (*(void (**)(void))(*(void *)(DerivedStorage + 784) + 16))();
      int v77 = Attachment;
      BOOL v132 = *(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136);
      unsigned int v133 = v355;
      CFNumberRef v134 = CVPixelBufferGetIOSurface(imageBuffer);
      IOSurfaceID ID = IOSurfaceGetID(v134);
      H16ISP::H16ISPFrameReceiver::updateTrackingExternal(v132, v296, v133, ID, 2);
    }
  }
  if (v306 && *(unsigned char *)(DerivedStorage + 880) && *(void *)(DerivedStorage + 984))
  {
    if (cfa && *(unsigned char *)(DerivedStorage + 952)) {
      CVBufferSetAttachment(v306, (CFStringRef)*MEMORY[0x263F2C578], cfa, kCVAttachmentMode_ShouldPropagate);
    }
    if (v310 && *(unsigned char *)(DerivedStorage + 952)) {
      CVBufferSetAttachment(v306, (CFStringRef)*MEMORY[0x263F2C590], v310, kCVAttachmentMode_ShouldPropagate);
    }
    if (v89) {
      CVBufferSetAttachment(v306, (CFStringRef)*MEMORY[0x263F2C520], v89, kCVAttachmentMode_ShouldPropagate);
    }
    if (v316 && *(unsigned char *)(DerivedStorage + 3593))
    {
      CFStringRef v136 = *(void *)(DerivedStorage + 3600)
           ? *(const __CFString **)(DerivedStorage + 3600)
           : (const __CFString *)*MEMORY[0x263F2E908];
      if (CFEqual(v136, (CFStringRef)*MEMORY[0x263F2E928])) {
        CVBufferSetAttachment(v306, (CFStringRef)*MEMORY[0x263F2CD58], v316, kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (buffer && *(unsigned char *)(DerivedStorage + 3497))
    {
      CFStringRef v137 = *(void *)(DerivedStorage + 3504)
           ? *(const __CFString **)(DerivedStorage + 3504)
           : (const __CFString *)*MEMORY[0x263F2E908];
      if (CFEqual(v137, (CFStringRef)*MEMORY[0x263F2E928])) {
        CVBufferSetAttachment(v306, (CFStringRef)*MEMORY[0x263F2CD60], buffer, kCVAttachmentMode_ShouldPropagate);
      }
    }
    OSType v138 = CVPixelBufferGetPixelFormatType(v306);
    H16ISP::getFrameFormatMetaInfo(v138, &v368);
    if (!dword_26B11BA40)
    {
      if (!*(void *)(DerivedStorage + 4288))
      {
        uint64_t v139 = mach_absolute_time();
        *(void *)(DerivedStorage + 4288) = v139;
        uint64_t v140 = *(void *)(DerivedStorage + 4272);
        uint32_t v141 = info.numer;
        uint32_t v142 = info.denom;
        CFDictionaryRef v143 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFDictionaryRef v143 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v143;
        }
        int v76 = pixelBuffer;
        if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
        {
          int v144 = *(_DWORD *)(DerivedStorage + 132);
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v144;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = (double)(unint64_t)((double)v141 / (double)v142 * (double)(v139 - v140))
                              / 1000000.0;
          _os_log_impl(&dword_24680F000, v143, OS_LOG_TYPE_DEFAULT, "%s - First channel %d SecondaryScaler frame delivered to client after %8.3f msec\n\n", buf, 0x1Cu);
        }
      }
      (*(void (**)(void))(*(void *)(DerivedStorage + 984) + 16))();
      int v77 = Attachment;
      CFNumberRef v145 = *(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136);
      unsigned int v146 = DWORD2(v357);
      int v147 = CVPixelBufferGetIOSurface(v306);
      IOSurfaceID v148 = IOSurfaceGetID(v147);
      H16ISP::H16ISPFrameReceiver::updateTrackingExternal(v145, v296, v146, v148, 2);
    }
  }
  if (v301 && *(unsigned char *)(DerivedStorage + 1080) && *(void *)(DerivedStorage + 1184))
  {
    if (v77) {
      CVBufferSetAttachment(v301, (CFStringRef)*MEMORY[0x263F2C558], v77, kCVAttachmentMode_ShouldPropagate);
    }
    if (v89) {
      CVBufferSetAttachment(v301, (CFStringRef)*MEMORY[0x263F2C520], v89, kCVAttachmentMode_ShouldPropagate);
    }
    if (cfa && *(unsigned char *)(DerivedStorage + 1152)) {
      CVBufferSetAttachment(v301, (CFStringRef)*MEMORY[0x263F2C578], cfa, kCVAttachmentMode_ShouldPropagate);
    }
    if (v310 && *(unsigned char *)(DerivedStorage + 1152)) {
      CVBufferSetAttachment(v301, (CFStringRef)*MEMORY[0x263F2C590], v310, kCVAttachmentMode_ShouldPropagate);
    }
    if (v316 && *(unsigned char *)(DerivedStorage + 3593))
    {
      CFStringRef v149 = *(void *)(DerivedStorage + 3600)
           ? *(const __CFString **)(DerivedStorage + 3600)
           : (const __CFString *)*MEMORY[0x263F2E908];
      if (CFEqual(v149, (CFStringRef)*MEMORY[0x263F2E900])) {
        CVBufferSetAttachment(v301, (CFStringRef)*MEMORY[0x263F2CD58], v316, kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (buffer && *(unsigned char *)(DerivedStorage + 3497))
    {
      CFStringRef v150 = *(void *)(DerivedStorage + 3504)
           ? *(const __CFString **)(DerivedStorage + 3504)
           : (const __CFString *)*MEMORY[0x263F2E908];
      if (CFEqual(v150, (CFStringRef)*MEMORY[0x263F2E900])) {
        CVBufferSetAttachment(v301, (CFStringRef)*MEMORY[0x263F2CD60], buffer, kCVAttachmentMode_ShouldPropagate);
      }
    }
    OSType v151 = CVPixelBufferGetPixelFormatType(v301);
    H16ISP::getFrameFormatMetaInfo(v151, &v368);
    if (!dword_26B11BA40)
    {
      if (!*(void *)(DerivedStorage + 4296))
      {
        uint64_t v152 = mach_absolute_time();
        *(void *)(DerivedStorage + 4296) = v152;
        uint64_t v153 = *(void *)(DerivedStorage + 4272);
        uint32_t v154 = info.numer;
        uint32_t v155 = info.denom;
        CFNumberRef v156 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v156 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v156;
        }
        int v76 = pixelBuffer;
        if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
        {
          int v157 = *(_DWORD *)(DerivedStorage + 132);
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v157;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = (double)(unint64_t)((double)v154 / (double)v155 * (double)(v152 - v153))
                              / 1000000.0;
          _os_log_impl(&dword_24680F000, v156, OS_LOG_TYPE_DEFAULT, "%s - First channel %d IntermediateTap frame delivered to client after %8.3f msec\n\n", buf, 0x1Cu);
        }
      }
      (*(void (**)(void))(*(void *)(DerivedStorage + 1184) + 16))();
      int v77 = Attachment;
      v158 = *(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136);
      unsigned int v159 = DWORD2(v356);
      CFNumberRef v160 = CVPixelBufferGetIOSurface(v301);
      IOSurfaceID v161 = IOSurfaceGetID(v160);
      H16ISP::H16ISPFrameReceiver::updateTrackingExternal(v158, v296, v159, v161, 2);
    }
  }
  if (destinationBuffer && *(unsigned char *)(DerivedStorage + 1280) && *(void *)(DerivedStorage + 1384))
  {
    if (cfa && *(unsigned char *)(DerivedStorage + 1352)) {
      CVBufferSetAttachment(destinationBuffer, (CFStringRef)*MEMORY[0x263F2C578], cfa, kCVAttachmentMode_ShouldPropagate);
    }
    if (v310 && *(unsigned char *)(DerivedStorage + 1352)) {
      CVBufferSetAttachment(destinationBuffer, (CFStringRef)*MEMORY[0x263F2C590], v310, kCVAttachmentMode_ShouldPropagate);
    }
    if (v334 && *(unsigned char *)(DerivedStorage + 1353)) {
      CVBufferSetAttachment(destinationBuffer, (CFStringRef)*MEMORY[0x263F2C580], v334, kCVAttachmentMode_ShouldPropagate);
    }
    if (v303 && *(unsigned char *)(DerivedStorage + 1400)) {
      CVBufferSetAttachment(destinationBuffer, (CFStringRef)*MEMORY[0x263F2C5C8], v303, kCVAttachmentMode_ShouldPropagate);
    }
    if (v302 && *(_DWORD *)(DerivedStorage + 1404)) {
      CVBufferSetAttachment(destinationBuffer, (CFStringRef)*MEMORY[0x263F2C5A0], v302, kCVAttachmentMode_ShouldPropagate);
    }
    char v162 = v305 ^ 1;
    if (!v89) {
      char v162 = 1;
    }
    if ((v162 & 1) == 0) {
      CVBufferSetAttachment(destinationBuffer, (CFStringRef)*MEMORY[0x263F2C520], v89, kCVAttachmentMode_ShouldPropagate);
    }
    if (theDicta && *(unsigned char *)(DerivedStorage + 1376)) {
      CVBufferSetAttachment(destinationBuffer, (CFStringRef)*MEMORY[0x263F2C518], theDicta, kCVAttachmentMode_ShouldPropagate);
    }
    if (!dword_26B11BA40)
    {
      (*(void (**)(void))(*(void *)(DerivedStorage + 1384) + 16))();
      uint64_t v163 = *(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136);
      unsigned int v164 = HIDWORD(v356);
      CFMutableDictionaryRef v165 = CVPixelBufferGetIOSurface(destinationBuffer);
      IOSurfaceID v166 = IOSurfaceGetID(v165);
      H16ISP::H16ISPFrameReceiver::updateTrackingExternal(v163, v296, v164, v166, 2);
    }
  }
  if (v324 && *(unsigned char *)(DerivedStorage + 1480) && *(void *)(DerivedStorage + 1584))
  {
    if (cfa && *(unsigned char *)(DerivedStorage + 1552)) {
      CVBufferSetAttachment(v324, (CFStringRef)*MEMORY[0x263F2C578], cfa, kCVAttachmentMode_ShouldPropagate);
    }
    if (v310 && *(unsigned char *)(DerivedStorage + 1552)) {
      CVBufferSetAttachment(v324, (CFStringRef)*MEMORY[0x263F2C590], v310, kCVAttachmentMode_ShouldPropagate);
    }
    if (v334 && *(unsigned char *)(DerivedStorage + 1553)) {
      CVBufferSetAttachment(v324, (CFStringRef)*MEMORY[0x263F2C580], v334, kCVAttachmentMode_ShouldPropagate);
    }
    if (v303
      && (*(unsigned char *)(DerivedStorage + 1280) && *(unsigned char *)(DerivedStorage + 1400)
       || *(unsigned char *)(DerivedStorage + 1480) && *(unsigned char *)(DerivedStorage + 1600)))
    {
      CVBufferSetAttachment(v324, (CFStringRef)*MEMORY[0x263F2C5C8], v303, kCVAttachmentMode_ShouldPropagate);
    }
    if (v302 && *(_DWORD *)(DerivedStorage + 1404)) {
      CVBufferSetAttachment(destinationBuffer, (CFStringRef)*MEMORY[0x263F2C5A0], v302, kCVAttachmentMode_ShouldPropagate);
    }
    char v167 = v305 ^ 1;
    if (!v89) {
      char v167 = 1;
    }
    if ((v167 & 1) == 0) {
      CVBufferSetAttachment(v324, (CFStringRef)*MEMORY[0x263F2C520], v89, kCVAttachmentMode_ShouldPropagate);
    }
    if (theDicta && *(unsigned char *)(DerivedStorage + 1576)) {
      CVBufferSetAttachment(v324, (CFStringRef)*MEMORY[0x263F2C518], theDicta, kCVAttachmentMode_ShouldPropagate);
    }
    if (!dword_26B11BA40)
    {
      (*(void (**)(void))(*(void *)(DerivedStorage + 1584) + 16))();
      CFNumberRef v168 = *(H16ISP::H16ISPFrameReceiver **)(DerivedStorage + 136);
      unsigned int v169 = DWORD1(v357);
      CFNumberRef v170 = CVPixelBufferGetIOSurface(v324);
      IOSurfaceID v171 = IOSurfaceGetID(v170);
      H16ISP::H16ISPFrameReceiver::updateTrackingExternal(v168, v296, v169, v171, 2);
    }
  }
  if (v89 && *(unsigned char *)(DerivedStorage + 1880))
  {
    if (destinationBuffer) {
      BOOL v172 = 1;
    }
    else {
      BOOL v172 = *(void *)(DerivedStorage + 1984) == 0;
    }
    int v174 = v172 || v324 != 0;
    BOOL v175 = ((unint64_t)v318 | (unint64_t)v311) != 0;
    if (*((void *)&v318 + 1)) {
      BOOL v175 = 1;
    }
    if (v308) {
      BOOL v175 = 1;
    }
    if (v174 != 1 && v175)
    {
      if ((void)v318)
      {
        unsigned int v176 = DWORD1(v359);
        CFDictionaryRemoveValue(v89, (const void *)*MEMORY[0x263F2C7D8]);
        CFNumberRef v177 = v107;
      }
      else if (*((void *)&v318 + 1))
      {
        unsigned int v176 = HIDWORD(v358);
        CFDictionaryRemoveValue(v89, (const void *)*MEMORY[0x263F2C7F8]);
        CFNumberRef v177 = v300;
      }
      else if (v311)
      {
        unsigned int v176 = v358;
        CFDictionaryRemoveValue(v89, (const void *)*MEMORY[0x263F2C7C0]);
        CFNumberRef v177 = v294;
      }
      else
      {
        unsigned int v176 = DWORD1(v358);
        CFDictionaryRemoveValue(v89, (const void *)*MEMORY[0x263F2C7D0]);
        CFNumberRef v177 = v308;
      }
      CFNumberRef v178 = v177;
      CVBufferSetAttachment(v177, (CFStringRef)*MEMORY[0x263F2C520], v89, kCVAttachmentMode_ShouldPropagate);
      if (cfa && *(unsigned char *)(DerivedStorage + 1952)) {
        CVBufferSetAttachment(v178, (CFStringRef)*MEMORY[0x263F2C578], cfa, kCVAttachmentMode_ShouldPropagate);
      }
      if (v310 && *(unsigned char *)(DerivedStorage + 1952)) {
        CVBufferSetAttachment(v178, (CFStringRef)*MEMORY[0x263F2C590], v310, kCVAttachmentMode_ShouldPropagate);
      }
      if (!dword_26B11BA40)
      {
        if (!*(void *)(DerivedStorage + 4304))
        {
          uint64_t v179 = mach_absolute_time();
          *(void *)(DerivedStorage + 4304) = v179;
          uint64_t v180 = *(void *)(DerivedStorage + 4272);
          uint32_t v181 = info.numer;
          uint32_t v182 = info.denom;
          v183 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v183 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v183;
          }
          uint64_t v75 = DerivedStorage;
          if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
          {
            int v184 = *(_DWORD *)(DerivedStorage + 132);
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "MyH16ISPFrameReceivedProc";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v184;
            *(_WORD *)&buf[18] = 2048;
            *(double *)&buf[20] = (double)(unint64_t)((double)v181 / (double)v182 * (double)(v179 - v180))
                                / 1000000.0;
            _os_log_impl(&dword_24680F000, v183, OS_LOG_TYPE_DEFAULT, "%s - first channel %d Depth frame delivered to client after %8.3f msec\n\n", buf, 0x1Cu);
          }
        }
        (*(void (**)(void))(*(void *)(v75 + 1984) + 16))();
        int v76 = pixelBuffer;
        int v77 = Attachment;
        uint64_t v185 = *(H16ISP::H16ISPFrameReceiver **)(v75 + 136);
        uint64_t v186 = CVPixelBufferGetIOSurface(v178);
        IOSurfaceID v187 = IOSurfaceGetID(v186);
        H16ISP::H16ISPFrameReceiver::updateTrackingExternal(v185, v296, v176, v187, 2);
      }
    }
  }
  if (v76 && *(unsigned char *)(v75 + 2080) && *(void *)(v75 + 2184))
  {
    if (v89) {
      CVBufferSetAttachment(v76, (CFStringRef)*MEMORY[0x263F2C520], v89, kCVAttachmentMode_ShouldPropagate);
    }
    if (v77) {
      CVBufferSetAttachment(v76, (CFStringRef)*MEMORY[0x263F2C558], v77, kCVAttachmentMode_ShouldPropagate);
    }
    if (!dword_26B11BA40)
    {
      (*(void (**)(void))(*(void *)(v75 + 2184) + 16))();
      CFNumberRef v188 = *(H16ISP::H16ISPFrameReceiver **)(v75 + 136);
      unsigned int v189 = DWORD1(v355);
      CFMutableDictionaryRef v190 = CVPixelBufferGetIOSurface(v76);
      IOSurfaceID v191 = IOSurfaceGetID(v190);
      H16ISP::H16ISPFrameReceiver::updateTrackingExternal(v188, v296, v189, v191, 2);
    }
  }
  if (v313 && *(unsigned char *)(v75 + 2480) && *(void *)(v75 + 2584))
  {
    if (cfa)
    {
      char v192 = v305;
      if (!*(unsigned char *)(v75 + 2552)) {
        char v192 = 1;
      }
      if ((v192 & 1) == 0) {
        CVBufferSetAttachment(v313, (CFStringRef)*MEMORY[0x263F2C578], cfa, kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (v310)
    {
      char v193 = v305;
      if (!*(unsigned char *)(v75 + 2552)) {
        char v193 = 1;
      }
      if ((v193 & 1) == 0) {
        CVBufferSetAttachment(v313, (CFStringRef)*MEMORY[0x263F2C590], v310, kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (v77) {
      CVBufferSetAttachment(v313, (CFStringRef)*MEMORY[0x263F2C558], v77, kCVAttachmentMode_ShouldPropagate);
    }
    if (v89) {
      CVBufferSetAttachment(v313, (CFStringRef)*MEMORY[0x263F2C520], v89, kCVAttachmentMode_ShouldPropagate);
    }
    if (!dword_26B11BA40)
    {
      (*(void (**)(void))(*(void *)(v75 + 2584) + 16))();
      uint64_t v194 = *(H16ISP::H16ISPFrameReceiver **)(v75 + 136);
      unsigned int v195 = HIDWORD(v359);
      CFMutableDictionaryRef v196 = CVPixelBufferGetIOSurface(v313);
      IOSurfaceID v197 = IOSurfaceGetID(v196);
      H16ISP::H16ISPFrameReceiver::updateTrackingExternal(v194, v296, v195, v197, 2);
    }
  }
  if (v76)
  {
    if (*(unsigned char *)(v75 + 3608))
    {
      if (*(void *)(v75 + 3648))
      {
        CFNumberRef v198 = (__CVBuffer *)CVBufferGetAttachment(v76, @"PointCloudRidingOnRaw", 0);
        CFNumberRef v199 = v198;
        if (v198)
        {
          CVBufferRetain(v198);
          CVBufferRemoveAttachment(v76, @"PointCloudRidingOnRaw");
          if (cfa && *(unsigned char *)(v75 + 3640)) {
            CVBufferSetAttachment(v199, (CFStringRef)*MEMORY[0x263F2C578], cfa, kCVAttachmentMode_ShouldPropagate);
          }
          if (v310 && *(unsigned char *)(v75 + 3640)) {
            CVBufferSetAttachment(v199, (CFStringRef)*MEMORY[0x263F2C590], v310, kCVAttachmentMode_ShouldPropagate);
          }
          if (v77) {
            CVBufferSetAttachment(v199, (CFStringRef)*MEMORY[0x263F2C558], v77, kCVAttachmentMode_ShouldPropagate);
          }
          if (!dword_26B11BA40) {
            (*(void (**)(void))(*(void *)(v75 + 3648) + 16))();
          }
          CVBufferRelease(v199);
        }
      }
    }
  }
  if (*(unsigned char *)(v75 + 2680))
  {
    uint64_t v200 = *(void *)(v328 + 24);
    memset(buf, 0, 24);
    if (v304)
    {
      CFNumberRef v201 = 0;
      uint64_t v202 = 0;
      CFMutableDictionaryRef v203 = &v366;
      int v204 = -1;
      do
      {
        if (*((void *)&v366 + v202) && *(unsigned char *)(DerivedStorage + 96 * v202 + 3113))
        {
          if ((unint64_t)v201 >= *(void *)&buf[16])
          {
            CFNumberRef v205 = *(__CVBuffer **)buf;
            uint64_t v206 = ((uint64_t)v201 - *(void *)buf) >> 2;
            unint64_t v207 = v206 + 1;
            if ((unint64_t)(v206 + 1) >> 62) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v208 = *(void *)&buf[16] - *(void *)buf;
            if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 1 > v207) {
              unint64_t v207 = v208 >> 1;
            }
            if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v209 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v209 = v207;
            }
            if (v209)
            {
              CFDataRef v210 = (char *)std::allocator<unsigned int>::allocate_at_least[abi:ne180100]((uint64_t)&buf[16], v209);
              CFNumberRef v201 = *(__CVBuffer **)&buf[8];
              CFNumberRef v205 = *(__CVBuffer **)buf;
            }
            else
            {
              CFDataRef v210 = 0;
            }
            v211 = &v210[4 * v206];
            *(_DWORD *)v211 = v202;
            int v76 = (__CVBuffer *)(v211 + 4);
            while (v201 != v205)
            {
              int v212 = *((_DWORD *)v201 - 1);
              CFNumberRef v201 = (__CVBuffer *)((char *)v201 - 4);
              *((_DWORD *)v211 - 1) = v212;
              v211 -= 4;
            }
            *(void *)int buf = v211;
            *(void *)&uint8_t buf[8] = v76;
            *(void *)&uint8_t buf[16] = &v210[4 * v209];
            if (v205) {
              operator delete(v205);
            }
          }
          else
          {
            *(_DWORD *)CFNumberRef v201 = v202;
            int v76 = (__CVBuffer *)((char *)v201 + 4);
          }
          *(void *)&uint8_t buf[8] = v76;
          CFNumberRef v201 = v76;
        }
        ++v202;
      }
      while (v202 != 4);
      uint64_t v75 = DerivedStorage;
      if (*(__CVBuffer **)buf != v201)
      {
        if (H16ISP::H16ISPDevice::ISP_GetCameraTime(v200, &outputStruct))
        {
          CFNumberRef v213 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFNumberRef v213 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v213;
          }
          if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
          {
            MyH16ISPFrameReceivedProc(v213, v214, v215, v216, v217, v218, v219, v220);
            goto LABEL_592;
          }
          goto LABEL_618;
        }
        CFMutableDictionaryRef v221 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (v221)
        {
          if (CVPixelBufferLockBaseAddress(v304, 1uLL))
          {
            CFNumberRef v222 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              CFNumberRef v222 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v222;
            }
            if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR)) {
              MyH16ISPFrameReceivedProc();
            }
            goto LABEL_612;
          }
          BaseAddress = CVPixelBufferGetBaseAddress(v304);
          int v232 = BaseAddress;
          if (BaseAddress)
          {
            LODWORD(v202) = BaseAddress[5243];
            int v204 = BaseAddress[5244];
            LODWORD(v203) = BaseAddress[5245];
            LODWORD(v76) = BaseAddress[5246];
          }
          CVPixelBufferUnlockBaseAddress(v304, 1uLL);
          if (v232)
          {
            v371.origin.x = (double)(int)v202;
            v371.origin.y = (double)v204;
            v371.size.width = (double)v203;
            v371.size.height = (double)v76;
            uint64_t v75 = DerivedStorage;
            CFDictionaryRef v233 = CGRectCreateDictionaryRepresentation(v371);
            if (v233)
            {
              CFDictionaryRef v234 = v221;
              uint64_t v235 = *(unsigned int **)buf;
              uint64_t v236 = *(unsigned int **)&buf[8];
              if (*(void *)buf == *(void *)&buf[8])
              {
LABEL_611:
                CFRelease(v233);
                uint64_t v75 = DerivedStorage;
                CFDictionaryRef Copy = CFDictionaryCreateCopy(allocatora, v234);
                CFRelease(v234);
                int64_t v243 = FigHostTimeToNanoseconds();
                CMTimeMake(&v368, v243, 1000000000);
                CMTime v349 = v368;
                (*(void (**)(void))(*(void *)(DerivedStorage + 2688) + 16))();
                CFRelease(Copy);
              }
              else
              {
                CVBufferRef v335 = (CVBufferRef)*MEMORY[0x263F2D630];
                CFStringRef v237 = (const __CFString *)*MEMORY[0x263F2C558];
                while (1)
                {
                  uint64_t v238 = *v235;
                  uint64_t v239 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                  uint64_t v240 = v239;
                  if (!v239) {
                    break;
                  }
                  CFDictionarySetValue(v239, v335, v233);
                  v241 = (__CVBuffer *)*((void *)&v366 + v238);
                  CVBufferSetAttachment(v241, v237, v240, kCVAttachmentMode_ShouldPropagate);
                  CFRelease(v240);
                  CFDictionarySetValue(v234, *(const void **)(*(void *)(DerivedStorage + 96 * v238 + 3104) + 16), v241);
                  if (++v235 == v236) {
                    goto LABEL_611;
                  }
                }
                char v281 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  char v281 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v281;
                }
                if (os_log_type_enabled(v281, OS_LOG_TYPE_ERROR)) {
                  MyH16ISPFrameReceivedProc(v281, v282, v283, v284, v285, v286, v287, v288);
                }
                CFRelease(v233);
                uint64_t v75 = DerivedStorage;
                CFRelease(v234);
              }
              goto LABEL_618;
            }
            uint64_t v273 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v273 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v273;
            }
            if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
            {
              MyH16ISPFrameReceivedProc(v273, v274, v275, v276, v277, v278, v279, v280);
LABEL_616:
              uint64_t v75 = DerivedStorage;
            }
          }
          else
          {
LABEL_612:
            uint64_t v244 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v244 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v244;
            }
            uint64_t v75 = DerivedStorage;
            if (os_log_type_enabled(v244, OS_LOG_TYPE_ERROR))
            {
              MyH16ISPFrameReceivedProc(v244, v245, v246, v247, v248, v249, v250, v251);
              goto LABEL_616;
            }
          }
          CFRelease(v221);
          goto LABEL_618;
        }
        CFNumberRef v223 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v223 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v223;
        }
        if (os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
        {
          MyH16ISPFrameReceivedProc(v223, v224, v225, v226, v227, v228, v229, v230);
LABEL_592:
          uint64_t v75 = DerivedStorage;
        }
LABEL_618:
        CFNumberRef v201 = *(__CVBuffer **)buf;
      }
      if (v201)
      {
        *(void *)&uint8_t buf[8] = v201;
        operator delete(v201);
      }
    }
    if (*(void *)(v75 + 2688))
    {
      int v252 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (v252)
      {
        if (*(unsigned char *)(v75 + 3497) && buffer)
        {
          CFStringRef v253 = *(void *)(v75 + 3504) ? *(const __CFString **)(v75 + 3504) : (const __CFString *)*MEMORY[0x263F2E908];
          if (CFEqual(v253, (CFStringRef)*MEMORY[0x263F2E908])) {
            CFDictionarySetValue(v252, (const void *)*MEMORY[0x263F2CD60], buffer);
          }
        }
        if (*(unsigned char *)(v75 + 3593) && v316)
        {
          CFStringRef v254 = *(void *)(v75 + 3600) ? *(const __CFString **)(v75 + 3600) : (const __CFString *)*MEMORY[0x263F2E908];
          if (CFEqual(v254, (CFStringRef)*MEMORY[0x263F2E908])) {
            CFDictionarySetValue(v252, (const void *)*MEMORY[0x263F2CD58], v316);
          }
        }
        CFDictionaryRef v255 = CFDictionaryCreateCopy(allocatora, v252);
        CFRelease(v252);
        if (v255)
        {
          (*(void (**)(void))(*(void *)(v75 + 2688) + 16))();
          CFRelease(v255);
        }
        else
        {
          uint64_t v264 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v264 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v264;
          }
          if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR)) {
            MyH16ISPFrameReceivedProc(v264, v265, v266, v267, v268, v269, v270, v271);
          }
        }
      }
      else
      {
        CFNumberRef v256 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v256 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v256;
        }
        if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR)) {
          MyH16ISPFrameReceivedProc(v256, v257, v258, v259, v260, v261, v262, v263);
        }
      }
    }
  }
LABEL_647:
  operator delete(textureb);
LABEL_648:
  if (target) {
    CFRelease(target);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (v310) {
    CFRelease(v310);
  }
  if (v89) {
    CFRelease(v89);
  }
  if (theDicta) {
    CFRelease(theDicta);
  }
  if ((*(unsigned char *)(v328 + 154) & 2) != 0)
  {
    LogCaptureDeviceEvent(0x11u, v328, DerivedStorage, 0, @"FrameReceivedArray", (__CFString *)theArray, 1);
    if (theArray) {
      CFRelease(theArray);
    }
  }
  pthread_mutex_unlock(v312);
  kdebug_trace();
  return 0;
}

void sub_246877AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int64_t v65 = (void *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    STACK[0x4A8] = (unint64_t)v65;
    operator delete(v65);
  }
  operator delete(a64);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPTimeOfFlightColorSynchronizer::isWideForcedToStream(H16ISP::H16ISPTimeOfFlightColorSynchronizer *this)
{
  return *(unsigned __int8 *)(*(void *)(*((void *)this + 3) + 8) + 225);
}

uint64_t SetDeviceOrientation(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  unsigned int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  int v8 = *(unsigned __int16 *)(a2 + 132);
  if (*(void *)(a2 + 3888) && !*(unsigned char *)(a2 + 3908)) {
    v8 |= 0x80000000;
  }
  uint64_t v9 = &_os_log_internal;
  if (valuePtr > 3
    || (uint64_t v10 = H16ISP::H16ISPDevice::SetDeviceOrientation(*(H16ISP::H16ISPDevice **)(a4 + 24), v8, dword_2469DAD00[valuePtr]), v10))
  {
    CFTypeID v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
    {
      CFTypeID v12 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      SetDeviceOrientation();
    }
    uint64_t v10 = 4294954516;
  }
  size_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (valuePtr > 3)
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
    {
      size_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      int v14 = "H16ISPCaptureDevice: Set Device Orientation: Unknown orientation\n\n";
      uint64_t v15 = v13;
      uint32_t v16 = 2;
      goto LABEL_25;
    }
  }
  else
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == v9)
    {
      size_t v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 67109376;
      unsigned int v19 = valuePtr;
      __int16 v20 = 1024;
      int v21 = -1;
      int v14 = "H16ISPCaptureDevice: Set Device Orientation: %d (rotation: %d) \n\n";
      uint64_t v15 = v13;
      uint32_t v16 = 14;
LABEL_25:
      _os_log_impl(&dword_24680F000, v15, OS_LOG_TYPE_INFO, v14, buf, v16);
    }
  }
  return v10;
}

uint64_t H16ISP::H16ISPDevice::SetDeviceOrientation(H16ISP::H16ISPDevice *this, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 3335;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::TimeOfFlightColorSynchronizerInternal(H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal *this, H16ISP::H16ISPDevice *a2, H16ISP::H16ISPServicesRemote *a3)
{
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  operator new();
}

void sub_246878048(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v2, 0x1020C405CE9ABE8);
  H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::{unnamed type#3}::~TimeOfFlightColorSynchronizerInternal(v1 + 38);

  _Unwind_Resume(a1);
}

H16ISP::TimeOfFlightColorInfieldCalibrationManager *H16ISP::TimeOfFlightColorInfieldCalibrationManager::TimeOfFlightColorInfieldCalibrationManager(H16ISP::TimeOfFlightColorInfieldCalibrationManager *this, H16ISP::H16ISPDevice *a2, H16ISP::H16ISPServicesRemote *a3)
{
  *(void *)this = a3;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  mach_timebase_info((mach_timebase_info_t)this + 6);
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 17) = H16ISP::H16ISPGetCFPreferenceNumber(@"tofColorInfieldCalibrationFeatureVectorSize", @"com.apple.coremedia", (const __CFString *)0xA);
  *((void *)this + 7) = mach_absolute_time();
  *((unsigned char *)this + 108) = H16ISP::H16ISPGetCFPreferenceNumber(@"tofColorInfieldCalibrationManagerVerbose", @"com.apple.coremedia", 0) != 0;
  *(void *)((char *)this + 10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x200000010;
  *(_OWORD *)((char *)this + 84) = xmmword_2469EE6F0;
  *((unsigned char *)this + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
  *((_DWORD *)this + 16) = 400;
  id v4 = objc_alloc_init(MEMORY[0x263F26BF0]);
  unsigned int v5 = (void *)*((void *)this + 1);
  *((void *)this + 1) = v4;

  return this;
}

void sub_246878180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

mach_timebase_info *H16ISP::NearEventComplianceHandler::NearEventComplianceHandler(mach_timebase_info *this, H16ISP::H16ISPDevice *a2)
{
  this[5] = (mach_timebase_info)a2;
  LOWORD(this[6].numer) = -1;
  BYTE2(this[6].numer) = 1;
  *(double *)this = (double)(int)H16ISP::H16ISPGetCFPreferenceNumber(@"JasperComplianceNoDepthPerc", @"com.apple.coremedia", (const __CFString *)0x60)/ 100.0;
  *(double *)&this[1] = (double)(int)H16ISP::H16ISPGetCFPreferenceNumber(@"JasperComplianceNoDepthMaxValue", @"com.apple.coremedia", (const __CFString *)0x32)/ 100.0;
  this[2].uint32_t numer = H16ISP::H16ISPGetCFPreferenceNumber(@"JasperComplianceTimeout", @"com.apple.coremedia", (const __CFString *)0x168);
  return this;
}

uint64_t SetMidFrameSynchronizationEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFArrayRef v5 = *(const __CFArray **)(a3 + 104);
  if (!v5) {
    return 4294954516;
  }
  int NumberOfActiveChannels = GetNumberOfActiveChannels(v5);
  uint64_t result = 4294954516;
  if (!a1 || NumberOfActiveChannels) {
    return result;
  }
  CFTypeID v10 = CFGetTypeID(a1);
  if (v10 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  BOOL v11 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), 0);
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v13 = *(unsigned __int16 *)(DerivedStorage + 132);
  if (*(void *)(DerivedStorage + 3888) && !*(unsigned char *)(DerivedStorage + 3908)) {
    v13 |= 0x80000000;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetMultiCamSyncOffset(*(H16ISP::H16ISPDevice **)(a4 + 24), v13, v11);
  if (result)
  {
    int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      SetMidFrameSynchronizationEnabled();
    }
    return 4294954514;
  }
  else
  {
    *(_DWORD *)(a3 + 128) = v11;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetMultiCamSyncOffset(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 13319;
  int v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

void ___ZN6H16ISP19H16ISPFrameReceiver27startProjectorWatchdogTimerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  bzero(v4, 0x10uLL);
  int v2 = *(_DWORD *)(v1 + 364);
  __int16 v5 = 1569;
  int v6 = v2;
  int v7 = 5;
  if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v1 + 328), v4, 0x10u, 0, 0xFFFFFFFF))
  {
    uint64_t v3 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v3 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v3;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___ZN6H16ISP19H16ISPFrameReceiver27startProjectorWatchdogTimerEv_block_invoke_cold_1();
    }
  }
}

uint64_t SetGroupMaxSlaveStreams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = 0;
  bzero(&v14, 4uLL);
  CFArrayRef v7 = *(const __CFArray **)(a3 + 104);
  if (!v7) {
    return 4294954516;
  }
  int NumberOfActiveChannels = GetNumberOfActiveChannels(v7);
  uint64_t result = 4294954516;
  if (!a1 || NumberOfActiveChannels) {
    return result;
  }
  CFTypeID v10 = CFGetTypeID(a1);
  if (v10 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  LOWORD(v14) = valuePtr;
  CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), 0);
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v12 = *(unsigned __int16 *)(DerivedStorage + 132);
  if (*(void *)(DerivedStorage + 3888) && !*(unsigned char *)(DerivedStorage + 3908)) {
    v12 |= 0x80000000;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetMultiCamSlaveProperties(*(H16ISP::H16ISPDevice **)(a4 + 24), v12, 1, v14);
  if (result)
  {
    int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetGroupMaxSlaveStreams();
    }
    return 4294954514;
  }
  else
  {
    *(_DWORD *)(a3 + 116) = valuePtr;
  }
  return result;
}

uint64_t SetGroupMaxSlaveStreamsProcessingEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  bzero(&v20, 4uLL);
  CFArrayRef v7 = *(const __CFArray **)(a3 + 104);
  if (!v7) {
    return 4294954516;
  }
  if (CFArrayGetCount(v7) >= 1)
  {
    CFIndex v8 = 0;
    while (1)
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v8))
      {
        FigCaptureStreamGetFigBaseObject();
        int v9 = *(H16ISP::H16ISPFrameReceiver **)(CMBaseObjectGetDerivedStorage() + 136);
        if (v9)
        {
          if (!H16ISP::H16ISPFrameReceiver::IsSuspended(v9)) {
            break;
          }
        }
      }
      if (++v8 >= CFArrayGetCount(*(CFArrayRef *)(a3 + 104))) {
        goto LABEL_8;
      }
    }
    unsigned int v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v19 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315138;
      unsigned int v23 = "SetGroupMaxSlaveStreamsProcessingEnabled";
      _os_log_impl(&dword_24680F000, v19, OS_LOG_TYPE_DEFAULT, "%s - Unable to change processing while stream is active\n", buf, 0xCu);
    }
    return 4294954516;
  }
LABEL_8:
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v10 = CFGetTypeID(a1);
  if (v10 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  BOOL isTeleDensificationForceWideAllowed = H16ISP::H16ISPTimeOfFlightColorSynchronizer::isTeleDensificationForceWideAllowed(*(uint64_t **)(a4 + 240), *(_DWORD *)(a3 + 8));
  __int16 v12 = valuePtr;
  if (isTeleDensificationForceWideAllowed)
  {
    CFIndex v13 = valuePtr;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a3 + 104));
    __int16 v12 = valuePtr;
    if (Count - 1 > v13) {
      __int16 v12 = ++valuePtr;
    }
  }
  HIWORD(v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v12;
  CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), 0);
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v16 = *(unsigned __int16 *)(DerivedStorage + 132);
  if (*(void *)(DerivedStorage + 3888) && !*(unsigned char *)(DerivedStorage + 3908)) {
    v16 |= 0x80000000;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetMultiCamSlaveProperties(*(H16ISP::H16ISPDevice **)(a4 + 24), v16, 2, v20);
  if (result)
  {
    size_t v18 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      size_t v18 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v18;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      SetGroupMaxSlaveStreams();
    }
    return 4294954514;
  }
  else
  {
    *(_DWORD *)(a3 + 124) = valuePtr;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetMultiCamSlaveProperties(H16ISP::H16ISPDevice *a1, int a2, int a3, int a4)
{
  bzero(v9, 0x14uLL);
  __int16 v10 = 13316;
  int v12 = a4;
  int v13 = a3;
  int v11 = a2;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v9, 0x14u, 0, 0xFFFFFFFF);
}

BOOL H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::isTeleDensificationForceWideAllowed(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 228)) {
    return 0;
  }
  int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(a3, 1919246706);
  if (SensorChannel == -1 || *(_DWORD *)(*(void *)(a3 + 4384) + 96 * SensorChannel + 60) != a2) {
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 224);
  if (v7 != 2)
  {
    if (v7 == 1) {
      return *(_DWORD *)(a1 + 208) == 66;
    }
    return 0;
  }
  return 1;
}

BOOL H16ISP::H16ISPTimeOfFlightColorSynchronizer::isTeleDensificationForceWideAllowed(uint64_t *a1, int a2)
{
  return H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::isTeleDensificationForceWideAllowed(a1[3], a2, *a1);
}

uint64_t SetGroupMaxSlaveTimeMachines(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = 0;
  CFArrayRef v5 = *(const __CFArray **)(a3 + 104);
  if (!v5) {
    return 4294954516;
  }
  int NumberOfActiveChannels = GetNumberOfActiveChannels(v5);
  uint64_t result = 4294954516;
  if (!a1 || NumberOfActiveChannels) {
    return result;
  }
  CFTypeID v10 = CFGetTypeID(a1);
  if (v10 != CFNumberGetTypeID()) {
    return 4294954516;
  }
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), 0);
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v12 = *(unsigned __int16 *)(DerivedStorage + 132);
  if (*(void *)(DerivedStorage + 3888) && !*(unsigned char *)(DerivedStorage + 3908)) {
    v12 |= 0x80000000;
  }
  uint64_t result = H16ISP::H16ISPDevice::SetMultiCamTimeMachineProperties(*(H16ISP::H16ISPDevice **)(a4 + 24), v12, valuePtr);
  if (result)
  {
    int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetGroupMaxSlaveTimeMachines();
    }
    return 4294954514;
  }
  else
  {
    *(_DWORD *)(a3 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = valuePtr;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetMultiCamTimeMachineProperties(H16ISP::H16ISPDevice *this, int a2, __int16 a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 13317;
  int v9 = a2;
  __int16 v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, v7, 0x10u, 0, 0xFFFFFFFF);
}

void ___ZN6H16ISP20H16ISPServicesRemote16sendMessageAsyncEPv28H16ISPServicesRemoteProperty_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = *(xpc_connection_t **)(a1 + 32);
  uint64_t v5 = MEMORY[0x24C53EF40](a2);
  if (v5 == MEMORY[0x263EF8708])
  {
    int int64 = xpc_dictionary_get_int64(a2, "H16ISPServicesRemoteReturnKey");
    __int16 v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
    {
      __int16 v10 = os_log_create("com.apple.isp", "services");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(_DWORD *)(a1 + 40);
      v12[0] = 67109376;
      v12[1] = v11;
      __int16 v13 = 1024;
      int v14 = int64;
      _os_log_impl(&dword_24680F000, v10, OS_LOG_TYPE_DEFAULT, "H16ISPServicesRemote: SetProperty (async) %d (reply=0x%08X)\n", (uint8_t *)v12, 0xEu);
    }
  }
  else if (v5 == MEMORY[0x263EF8720])
  {
    uint64_t v6 = MEMORY[0x24C53EE30](a2);
    if (v6)
    {
      int v7 = (void *)v6;
      __int16 v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog == &_os_log_internal)
      {
        __int16 v8 = os_log_create("com.apple.isp", "services");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_servicesLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        ___ZN6H16ISP20H16ISPServicesRemote16sendMessageAsyncEPv28H16ISPServicesRemoteProperty_block_invoke_cold_1();
      }
      free(v7);
    }
    if (a2 != (void *)MEMORY[0x263EF86A8]) {
      xpc_connection_cancel(*v4);
    }
  }
}

uint64_t SetAEMatchIntegrationTimes(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954516;
  }
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID()) {
    return 4294954516;
  }
  CFArrayRef v8 = *(const __CFArray **)(a3 + 104);
  if (!v8)
  {
    int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      SetAEMatchIntegrationTimes(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    return 4294954514;
  }
  CFArrayGetValueAtIndex(v8, 0);
  FigCaptureStreamGetFigBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v10 = *(unsigned __int16 *)(DerivedStorage + 132);
  if (*(void *)(DerivedStorage + 3888) && !*(unsigned char *)(DerivedStorage + 3908)) {
    v10 |= 0x80000000;
  }
  unsigned __int8 v11 = CFEqual(a1, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  uint64_t result = H16ISP::H16ISPDevice::EnableAEMatching(*(H16ISP::H16ISPDevice **)(a4 + 24), v10, v11);
  if (result)
  {
    __int16 v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      __int16 v13 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      SetAEMatchIntegrationTimes();
    }
    return 4294954514;
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::EnableAEMatching(H16ISP::H16ISPDevice *this, int a2, unsigned __int8 a3)
{
  if (*((_DWORD *)this + 1187) < (unsigned __int16)a2) {
    return 3758097090;
  }
  uint64_t v4 = 0x340C00000000;
  int v5 = a2;
  int v6 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t SetTimeOfFlightConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322);
  uint64_t v8 = 4294954516;
  if (!a1 || !isSensorType) {
    return v8;
  }
  CFTypeID v9 = CFGetTypeID(a1);
  if (v9 != CFDictionaryGetTypeID()) {
    return 4294954516;
  }
  int valuePtr = 1;
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2EBA0]);
  uint64_t v8 = (uint64_t)Value;
  if (Value)
  {
    CFTypeID v11 = CFGetTypeID(Value);
    if (v11 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)v8, kCFNumberIntType, &valuePtr);
      int v12 = valuePtr;
      __int16 v13 = (int *)(a2 + 4088);
      *(_DWORD *)(a2 + 4088) = 1;
      uint64_t v8 = 0;
      uint64_t v14 = 4;
      switch(v12)
      {
        case 0:
          uint64_t v8 = 0;
          int *v13 = 0;
          break;
        case 1:
          goto LABEL_10;
        case 5:
          uint64_t v8 = 0;
          uint64_t v14 = 104;
          break;
        case 6:
          uint64_t v8 = 0;
          uint64_t v14 = 108;
          break;
        default:
          uint64_t v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v20 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v20;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            SetTimeOfFlightConfiguration();
          }
          int *v13 = 0;
          uint64_t v8 = 4294954516;
          goto LABEL_9;
      }
      goto LABEL_10;
    }
    return 4294954516;
  }
  __int16 v13 = (int *)(a2 + 4088);
  *(_DWORD *)(a2 + 4088) = 1;
LABEL_9:
  uint64_t v14 = 4;
LABEL_10:
  BOOL v15 = H16ISP::JasperConfigManager::configureFrameMode((H16ISP::JasperConfigManager *)v14);
  if (*(void *)(a2 + 136) && v15)
  {
    if (H16ISP::JasperConfigManager::applyFrameMode(*(H16ISP::JasperConfigManager **)(a4 + 24), (H16ISP::H16ISPDevice *)*(unsigned int *)(a2 + 132), *(_DWORD *)(a2 + 4104), *(xpc_connection_t **)(a4 + 200), v16))
    {
      EnableIRProjector(0, a2, a4);
      FigStreamRef = GetFigStreamRef(a2, a4);
      H16ISPPostNotification(@"BadJasperCalibrationNotification", FigStreamRef, 0);
      return 4294954516;
    }
    EnableIRProjector(1, a2, a4);
  }
  uint64_t v21 = 0;
  uint64_t v19 = *(void **)(a2 + 4240);
  if (v19)
  {
    H16ISP::H16ISPFilterGraphManager::GetNode(v19, 11, &v21);
    if (v21) {
      H16ISP::H16ISPJasperDepthNode::setProcessingMode((uint64_t)v21, *v13);
    }
  }
  return v8;
}

BOOL H16ISP::JasperConfigManager::configureFrameMode(H16ISP::JasperConfigManager *this)
{
  int v1 = qword_26B11C114;
  HIDWORD(qword_26B11C114) = this;
  int v2 = 4;
  if ((int)this > 103)
  {
    if (this != 104 && this != 108) {
      goto LABEL_7;
    }
  }
  else if (this != 4 && this != 44)
  {
LABEL_7:
    int v2 = (int)this;
  }
  LODWORD(qword_26B11C114) = v2;
  return v2 != v1;
}

uint64_t H16ISP::H16ISPDevice::ValidateProjectorToken(H16ISP::H16ISPDevice *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  *(void *)size_t outputStructCnt = 24;
  mach_port_t v2 = *((_DWORD *)this + 1106);
  if (v2)
  {
    uint64_t v3 = IOConnectCallStructMethod(v2, 0xFu, 0, 0, outputStruct, (size_t *)outputStructCnt);
    if (!v3)
    {
      BOOL v28 = (v32 | v33) != 0;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
      }
      BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO);
      if (v4)
      {
        int v5 = "";
        if (v33) {
          int v6 = "";
        }
        else {
          int v6 = "n't";
        }
        if (!v32) {
          int v5 = "n't";
        }
        *(_DWORD *)size_t outputStructCnt = 136315394;
        *(void *)&outputStructCnt[4] = v6;
        *(_WORD *)&outputStructCnt[12] = 2080;
        *(void *)&outputStructCnt[14] = v5;
        _os_log_impl(&dword_24680F000, &_os_log_internal, OS_LOG_TYPE_INFO, "This is%s an internal build, and FDR was%s validated\n", outputStructCnt, 0x16u);
      }
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v27 = 0;
      uint64_t v3 = 0;
      uint64_t v9 = 282;
      BOOL isVaderProjectorCompliant = H16ISP::isVaderProjectorCompliant((H16ISP *)v4);
      while (1)
      {
        uint64_t v11 = *((void *)this + 548) + v7;
        if (*(_DWORD *)(v11 + 8))
        {
          int v12 = *(_DWORD *)(v11 + 16);
          if (v12 == 1785950322 || v12 == 1718186595) {
            break;
          }
        }
LABEL_45:
        ++v8;
        v9 += 432;
        v7 += 96;
        if (v8 == 6) {
          return v3;
        }
      }
      unsigned __int8 v14 = *((unsigned char *)this + 4);
      if (v14) {
        unsigned __int8 v14 = v8 < *(unsigned int *)this && *(unsigned char *)(*((void *)this + 5) + v9) != 0;
      }
      if (((v12 == 1718186595) & v14) != 0) {
        unsigned __int8 v14 = isVaderProjectorCompliant;
      }
      if ((v14 & 1) == 0)
      {
        uint64_t v16 = (xpc_connection_t *)*((void *)this + 14);
        if (!v16) {
          goto LABEL_35;
        }
        if (v12 == 1718186595) {
          int v17 = 5;
        }
        else {
          int v17 = 6;
        }
        *(_DWORD *)size_t outputStructCnt = v17;
        int Property = H16ISP::H16ISPServicesRemote::GetProperty(v16, (xpc_object_t *)outputStructCnt);
        int v15 = 0;
        if (Property || !outputStructCnt[8]) {
          goto LABEL_36;
        }
        uint64_t v19 = time(0);
        uint64_t v20 = mach_continuous_time();
        if (*(uint64_t *)&outputStructCnt[16] <= v19)
        {
LABEL_35:
          int v15 = 0;
          goto LABEL_36;
        }
        double v21 = difftime(*(time_t *)&outputStructCnt[16], v19);
        mach_timebase_info(&info);
        LODWORD(v2mach_timebase_info(this + 3) = info.numer;
        LODWORD(v22) = info.denom;
        uint64_t v27 = v20 + (unint64_t)(v21 * 1000000000.0 * (double)v22 / (double)v23);
      }
      int v15 = 1;
LABEL_36:
      if (((v12 == 1718186595) & v15) != 0) {
        int v15 = v28;
      }
      if (v15 == 1)
      {
        *((_DWORD *)this + 1186) |= 1 << v8;
        bzero(&info, 0xCuLL);
        LOWORD(info.denom) = 1568;
        int v30 = v8;
        uint64_t v3 = H16ISP::H16ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&info, 0xCu, 0, 0xFFFFFFFF);
        if (v12 == 1718186595)
        {
          mach_port_t v24 = *((_DWORD *)this + 1106);
          if (v24)
          {
            *(void *)size_t outputStructCnt = 1;
            *(void *)&outputStructCnt[8] = v27;
            *(void *)&outputStructCnt[16] = isVaderProjectorCompliant;
            IOConnectCallScalarMethod(v24, 0x33u, (const uint64_t *)outputStructCnt, 3u, 0, 0);
          }
        }
      }
      else if (v12 == 1718186595)
      {
        mach_port_t v25 = *((_DWORD *)this + 1106);
        if (v25)
        {
          *(void *)size_t outputStructCnt = 0;
          *(void *)&outputStructCnt[8] = 0;
          *(void *)&outputStructCnt[16] = isVaderProjectorCompliant;
          IOConnectCallScalarMethod(v25, 0x33u, (const uint64_t *)outputStructCnt, 3u, 0, 0);
        }
      }
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v3 = 3758097084;
  }
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog == &_os_log_internal) {
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_deviceLog = (uint64_t)os_log_create("com.apple.isp", "device");
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    H16ISP::H16ISPDevice::ValidateProjectorToken();
  }
  return v3;
}

BOOL H16ISP::isVaderProjectorCompliant(H16ISP *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "JYKY");
  CFDictionaryRef v1 = IOServiceNameMatching("product");
  mach_port_t v2 = *MEMORY[0x263F0EC88];
  io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x263F0EC88], v1);
  io_object_t v4 = MatchingService;
  if (!MatchingService)
  {
    BOOL v18 = 1;
    goto LABEL_44;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDataRef v6 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"rosaline-serial-num", (CFAllocatorRef)*MEMORY[0x263EFFB08], 3u);
  CFDataRef v7 = v6;
  if (v6)
  {
    BytePtr = CFDataGetBytePtr(v6);
    int Length = CFDataGetLength(v7);
    std::string::basic_string[abi:ne180100]<0>(&v26, "");
    if (Length)
    {
      for (int i = 0; i != Length; ++i)
      {
        int v12 = *BytePtr++;
        std::string::value_type v11 = v12;
        if (!v12) {
          break;
        }
        if ((i - 11) <= 3) {
          std::string::push_back(&v26, v11);
        }
      }
    }
    uint64_t v13 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    unint64_t v15 = v28;
    if ((v28 & 0x80u) != 0) {
      unint64_t v15 = (unint64_t)__p[1];
    }
    if (size == v15)
    {
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((*((unsigned char *)&v26.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
        {
          int v17 = &v26;
          while (v17->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
          {
            int v17 = (std::string *)((char *)v17 + 1);
            uint64_t v16 = (void **)((char *)v16 + 1);
            if (!--v13) {
              goto LABEL_28;
            }
          }
          goto LABEL_27;
        }
LABEL_28:
        CFDictionaryRef v21 = IOServiceNameMatching("AppleProxHIDEventDriver");
        io_service_t v22 = IOServiceGetMatchingService(v2, v21);
        io_object_t v19 = v22;
        if (v22)
        {
          CFNumberRef v23 = (const __CFNumber *)IORegistryEntrySearchCFProperty(v22, "IOService", @"floodComplianceRevision", v5, 3u);
          CFNumberRef v20 = v23;
          if (v23)
          {
            int valuePtr = 0;
            if (CFNumberGetValue(v23, kCFNumberSInt32Type, &valuePtr))
            {
              BOOL v18 = (valuePtr & 0xC0) != 0;
              goto LABEL_36;
            }
            NSLog(&cfstr_ErrorConvertin.isa);
          }
          else
          {
            NSLog(&cfstr_CouldnTReadVad.isa);
            CFNumberRef v20 = 0;
          }
        }
        else
        {
          NSLog(&cfstr_UnableToFindPr.isa);
          CFNumberRef v20 = 0;
          io_object_t v19 = 0;
        }
        BOOL v18 = 0;
LABEL_36:
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        goto LABEL_38;
      }
      if (!memcmp(v26.__r_.__value_.__l.__data_, v16, v26.__r_.__value_.__l.__size_)) {
        goto LABEL_28;
      }
    }
LABEL_27:
    CFNumberRef v20 = 0;
    io_object_t v19 = 0;
    BOOL v18 = 1;
    goto LABEL_36;
  }
  io_object_t v19 = 0;
  CFNumberRef v20 = 0;
  BOOL v18 = 1;
LABEL_38:
  IOObjectRelease(v4);
  if (v7) {
    CFRelease(v7);
  }
  if (v19) {
    IOObjectRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }
LABEL_44:
  if ((char)v28 < 0) {
    operator delete(__p[0]);
  }
  return v18;
}

void sub_24687979C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SetVideoOutputConfigurations(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v1127 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 674)) {
    return 4294954509;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 48);
  if (v6 >= *(_DWORD *)(a2 + 168)) {
    int v7 = *(_DWORD *)(a2 + 168);
  }
  else {
    int v7 = 0;
  }
  if (!cf || (uint64_t v9 = *(void *)(*(void *)(a4 + 24) + 4384), v10 = CFGetTypeID(cf), v10 != CFDictionaryGetTypeID()))
  {
    io_object_t v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      io_object_t v19 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v19;
    }
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      return 4294954516;
    }
    *(_DWORD *)int buf = 136315138;
    v1091 = "SetVideoOutputConfigurations";
    unint64_t v15 = "%s - Input property is invalid\n";
    uint64_t v16 = buf;
    int v17 = v19;
    uint32_t v18 = 12;
    goto LABEL_16;
  }
  unsigned int v11 = v6 - v7;
  int CameraConfig = H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * v11 + 16), &v981, buf);
  if (CameraConfig)
  {
    int v13 = CameraConfig;
    unsigned __int8 v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned __int8 v14 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v14;
    }
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      return 4294954516;
    }
    *(_DWORD *)v1116 = 136315394;
    *(void *)&v1116[4] = "SetVideoOutputConfigurations";
    *(_WORD *)&v1116[12] = 1024;
    *(_DWORD *)&v1116[14] = v13;
    unint64_t v15 = "%s - Failed to get camera config, res=0x%08X\n";
    uint64_t v16 = v1116;
    int v17 = v14;
    uint32_t v18 = 18;
LABEL_16:
    _os_log_impl(&dword_24680F000, v17, OS_LOG_TYPE_DEFAULT, v15, v16, v18);
    return 4294954516;
  }
  uint64_t v1126 = *(void *)(a2 + 872);
  long long v22 = *(_OWORD *)(a2 + 856);
  long long v1124 = *(_OWORD *)(a2 + 840);
  long long v1125 = v22;
  long long v23 = *(_OWORD *)(a2 + 792);
  long long v1120 = *(_OWORD *)(a2 + 776);
  long long v1121 = v23;
  long long v24 = *(_OWORD *)(a2 + 824);
  long long v1122 = *(_OWORD *)(a2 + 808);
  long long v1123 = v24;
  CGSize v25 = *(CGSize *)(a2 + 728);
  v1117.origiuint64_t n = *(CGPoint *)(a2 + 712);
  v1117.CGSize size = v25;
  long long v26 = *(_OWORD *)(a2 + 760);
  long long v1118 = *(_OWORD *)(a2 + 744);
  long long v1119 = v26;
  long long v27 = *(_OWORD *)(a2 + 696);
  *(_OWORD *)v1116 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)&v1116[16] = v27;
  v964 = (unsigned char *)(a2 + 680);
  v965 = (unsigned char *)(a2 + 880);
  long long v28 = *(_OWORD *)(a2 + 1008);
  long long v1063 = *(_OWORD *)(a2 + 1024);
  long long v1064 = *(_OWORD *)(a2 + 1040);
  long long v1065 = *(_OWORD *)(a2 + 1056);
  uint64_t v1066 = *(void *)(a2 + 1072);
  long long v29 = *(_OWORD *)(a2 + 944);
  long long v1059 = *(_OWORD *)(a2 + 960);
  long long v30 = *(_OWORD *)(a2 + 992);
  long long v1060 = *(_OWORD *)(a2 + 976);
  long long v1061 = v30;
  long long v1062 = v28;
  long long v31 = *(_OWORD *)(a2 + 880);
  long long v1055 = *(_OWORD *)(a2 + 896);
  long long v32 = *(_OWORD *)(a2 + 928);
  long long v1056 = *(_OWORD *)(a2 + 912);
  long long v1057 = v32;
  long long v1058 = v29;
  long long v1054 = v31;
  long long v33 = *(_OWORD *)(a2 + 1208);
  long long v1050 = *(_OWORD *)(a2 + 1224);
  long long v34 = *(_OWORD *)(a2 + 1256);
  long long v1051 = *(_OWORD *)(a2 + 1240);
  long long v1052 = v34;
  uint64_t v1053 = *(void *)(a2 + 1272);
  long long v35 = *(_OWORD *)(a2 + 1192);
  long long v1047 = *(_OWORD *)(a2 + 1176);
  long long v1048 = v35;
  long long v1049 = v33;
  long long v36 = *(_OWORD *)(a2 + 1128);
  long long v1043 = *(_OWORD *)(a2 + 1112);
  long long v1044 = v36;
  long long v37 = *(_OWORD *)(a2 + 1160);
  long long v1045 = *(_OWORD *)(a2 + 1144);
  long long v1046 = v37;
  long long v38 = *(_OWORD *)(a2 + 1096);
  v963 = (unsigned char *)(a2 + 1080);
  long long v1041 = *(_OWORD *)(a2 + 1080);
  long long v1042 = v38;
  v968 = (unsigned char *)(a2 + 1280);
  long long v39 = *(_OWORD *)(a2 + 1424);
  long long v40 = *(_OWORD *)(a2 + 1456);
  long long v1038 = *(_OWORD *)(a2 + 1440);
  long long v1039 = v40;
  uint64_t v1040 = *(void *)(a2 + 1472);
  long long v41 = *(_OWORD *)(a2 + 1360);
  long long v42 = *(_OWORD *)(a2 + 1392);
  long long v1034 = *(_OWORD *)(a2 + 1376);
  long long v1035 = v42;
  long long v1036 = *(_OWORD *)(a2 + 1408);
  long long v1037 = v39;
  long long v43 = *(_OWORD *)(a2 + 1296);
  long long v44 = *(_OWORD *)(a2 + 1328);
  long long v1030 = *(_OWORD *)(a2 + 1312);
  long long v1031 = v44;
  long long v1032 = *(_OWORD *)(a2 + 1344);
  long long v1033 = v41;
  long long v1028 = *(_OWORD *)(a2 + 1280);
  long long v1029 = v43;
  long long v45 = *(_OWORD *)(a2 + 1656);
  long long v1025 = *(_OWORD *)(a2 + 1640);
  long long v1026 = v45;
  uint64_t v1027 = *(void *)(a2 + 1672);
  long long v46 = *(_OWORD *)(a2 + 1592);
  long long v1021 = *(_OWORD *)(a2 + 1576);
  long long v1022 = v46;
  long long v47 = *(_OWORD *)(a2 + 1624);
  long long v1023 = *(_OWORD *)(a2 + 1608);
  long long v1024 = v47;
  long long v48 = *(_OWORD *)(a2 + 1528);
  long long v1017 = *(_OWORD *)(a2 + 1512);
  long long v1018 = v48;
  long long v49 = *(_OWORD *)(a2 + 1560);
  long long v1019 = *(_OWORD *)(a2 + 1544);
  long long v1020 = v49;
  long long v50 = *(_OWORD *)(a2 + 1496);
  v966 = (unsigned char *)(a2 + 1480);
  long long v1015 = *(_OWORD *)(a2 + 1480);
  long long v1016 = v50;
  uint64_t v941 = *(void *)(a2 + 1680);
  uint64_t v939 = *(void *)(a2 + 1688);
  long long v51 = *(_OWORD *)(a2 + 1696);
  long long v52 = *(_OWORD *)(a2 + 1728);
  long long v1013 = *(_OWORD *)(a2 + 1712);
  long long v1014 = v52;
  int v938 = *(_DWORD *)(a2 + 1744);
  int v940 = *(_DWORD *)(a2 + 1748);
  long long v53 = *(_OWORD *)(a2 + 1816);
  long long v54 = *(_OWORD *)(a2 + 1848);
  long long v1009 = *(_OWORD *)(a2 + 1832);
  long long v1010 = v54;
  long long v1011 = *(_OWORD *)(a2 + 1864);
  long long v1012 = v51;
  long long v55 = *(_OWORD *)(a2 + 1752);
  long long v56 = *(_OWORD *)(a2 + 1784);
  long long v1005 = *(_OWORD *)(a2 + 1768);
  long long v1006 = v56;
  long long v1007 = *(_OWORD *)(a2 + 1800);
  long long v1008 = v53;
  uint64_t v937 = *(void *)(a2 + 1880);
  uint64_t v933 = *(void *)(a2 + 1888);
  long long v1003 = *(_OWORD *)(a2 + 1928);
  long long v1004 = v55;
  long long v57 = *(_OWORD *)(a2 + 1912);
  long long v1001 = *(_OWORD *)(a2 + 1896);
  long long v1002 = v57;
  int v936 = *(_DWORD *)(a2 + 1944);
  int v935 = *(_DWORD *)(a2 + 1948);
  char v934 = *(unsigned char *)(a2 + 1952);
  long long v58 = *(_OWORD *)(a2 + 1953);
  long long v59 = *(_OWORD *)(a2 + 1969);
  long long v60 = *(_OWORD *)(a2 + 2001);
  long long v1111 = *(_OWORD *)(a2 + 1985);
  long long v1112 = v60;
  long long v1109 = v58;
  long long v1110 = v59;
  long long v61 = *(_OWORD *)(a2 + 2017);
  long long v62 = *(_OWORD *)(a2 + 2033);
  long long v63 = *(_OWORD *)(a2 + 2049);
  *(_OWORD *)((char *)v1115 + 15) = *(_OWORD *)(a2 + 2064);
  long long v1114 = v62;
  v1115[0] = v63;
  long long v1113 = v61;
  uint64_t v932 = *(void *)(a2 + 2080);
  uint64_t v928 = *(void *)(a2 + 2088);
  int v64 = *(_DWORD *)(a2 + 2096);
  long long v65 = *(_OWORD *)(a2 + 2100);
  long long v66 = *(_OWORD *)(a2 + 2116);
  *(_OWORD *)((char *)v1108 + 12) = *(_OWORD *)(a2 + 2128);
  long long v1107 = v65;
  v1108[0] = v66;
  int v930 = *(_DWORD *)(a2 + 2144);
  int v931 = v64;
  int v929 = *(_DWORD *)(a2 + 2148);
  char v927 = *(unsigned char *)(a2 + 2152);
  long long v67 = *(_OWORD *)(a2 + 2153);
  long long v68 = *(_OWORD *)(a2 + 2169);
  long long v69 = *(_OWORD *)(a2 + 2201);
  long long v1102 = *(_OWORD *)(a2 + 2185);
  long long v1103 = v69;
  long long v1100 = v67;
  long long v1101 = v68;
  long long v70 = *(_OWORD *)(a2 + 2217);
  long long v71 = *(_OWORD *)(a2 + 2233);
  long long v72 = *(_OWORD *)(a2 + 2249);
  *(_OWORD *)((char *)v1106 + 15) = *(_OWORD *)(a2 + 2264);
  long long v1105 = v71;
  v1106[0] = v72;
  long long v1104 = v70;
  long long v73 = *(_OWORD *)(a2 + 2280);
  long long v74 = *(_OWORD *)(a2 + 2296);
  long long v75 = *(_OWORD *)(a2 + 2312);
  long long v76 = *(_OWORD *)(a2 + 2344);
  long long v77 = *(_OWORD *)(a2 + 2360);
  long long v991 = *(_OWORD *)(a2 + 2328);
  long long v992 = v76;
  long long v989 = v74;
  long long v990 = v75;
  long long v78 = *(_OWORD *)(a2 + 2376);
  long long v79 = *(_OWORD *)(a2 + 2408);
  long long v80 = *(_OWORD *)(a2 + 2424);
  long long v995 = *(_OWORD *)(a2 + 2392);
  long long v996 = v79;
  long long v993 = v77;
  long long v994 = v78;
  long long v81 = *(_OWORD *)(a2 + 2440);
  long long v82 = *(_OWORD *)(a2 + 2456);
  v962 = (unsigned char *)(a2 + 2280);
  uint64_t v1000 = *(void *)(a2 + 2472);
  long long v998 = v81;
  long long v999 = v82;
  long long v997 = v80;
  uint64_t v925 = *(void *)(a2 + 2488);
  uint64_t v926 = *(void *)(a2 + 2480);
  uint64_t v83 = *(void *)(a2 + 2512);
  uint64_t v84 = *(void *)(a2 + 2520);
  double v85 = *(double *)(a2 + 2528);
  double v86 = *(double *)(a2 + 2536);
  long long v87 = *(_OWORD *)(a2 + 2569);
  long long v88 = *(_OWORD *)(a2 + 2601);
  long long v1098 = *(_OWORD *)(a2 + 2585);
  v1099[0] = v88;
  *(_DWORD *)((char *)v1099 + 15) = *(_DWORD *)(a2 + 2616);
  long long v1096 = *(_OWORD *)(a2 + 2553);
  long long v1097 = v87;
  long long v987 = *(_OWORD *)(a2 + 2664);
  long long v988 = v73;
  long long v89 = *(_OWORD *)(a2 + 2648);
  long long v985 = *(_OWORD *)(a2 + 2632);
  long long v986 = v89;
  *(void *)((char *)v1095 + 15) = *(void *)(a2 + 3656);
  v1095[0] = *(_OWORD *)(a2 + 3641);
  int v924 = *(_DWORD *)(a2 + 2496);
  int v945 = *(_DWORD *)(a2 + 2500);
  int v946 = *(_DWORD *)(a2 + 2504);
  int v947 = *(_DWORD *)(a2 + 2508);
  int v967 = *(_DWORD *)(a2 + 2544);
  int v948 = *(_DWORD *)(a2 + 2548);
  char v943 = *(unsigned char *)(a2 + 2552);
  int v944 = *(_DWORD *)(a2 + 2620);
  pixelBufferuint64_t Pool = *(__CVPixelBufferPool **)(a2 + 2624);
  uint64_t v950 = *(void *)(a2 + 3608);
  int v953 = *(_DWORD *)(a2 + 3624);
  int v954 = *(_DWORD *)(a2 + 3628);
  int v949 = *(_DWORD *)(a2 + 3632);
  int v952 = *(_DWORD *)(a2 + 3636);
  char v951 = *(unsigned char *)(a2 + 3640);
  CFTypeRef cfa = *(CFTypeRef *)(a2 + 3664);
  uint64_t v956 = *(void *)(a2 + 3616);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E918]);
  CFDictionaryRef v91 = Value;
  if (Value)
  {
    CFTypeID v92 = CFGetTypeID(Value);
    if (v92 == CFDictionaryGetTypeID())
    {
      if (!v1094)
      {
        int v93 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v93 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v93;
        }
        if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_103;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        unsigned int v94 = "%s - Primary scaler not reported on this platform\n";
        goto LABEL_102;
      }
      if (CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E550])
        || CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E558])
        || CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E548])
        || CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E568])
        || CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E888])
        || CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E8A8])
        || CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E530]))
      {
        int v93 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v93 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v93;
        }
        if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_103;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        unsigned int v94 = "%s - Invalid property for primary scaler\n";
LABEL_102:
        _os_log_impl(&dword_24680F000, v93, OS_LOG_TYPE_DEFAULT, v94, valuePtr, 0xCu);
LABEL_103:
        BOOL v969 = 0;
        BOOL dict = 0;
        LODWORD(v91) = 0;
        BOOL v957 = 0;
        BOOL v960 = 0;
        BOOL v95 = 0;
        BOOL v923 = 0;
LABEL_104:
        int v108 = 0;
LABEL_105:
        uint64_t v20 = 4294954516;
        goto LABEL_106;
      }
      CFNumberRef v252 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E850]);
      CFNumberRef v253 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E898]);
      CFNumberRef v254 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E8D0]);
      CFNumberRef v970 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E880]);
      CFDictionaryRef dicta = (const __CFDictionary *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E858]);
      CFNumberRef v961 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E8A0]);
      CFNumberRef v958 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E820]);
      CFNumberRef numbera = (CFNumberRef)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E818]);
      CFNumberRef v904 = (CFNumberRef)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E9B8]);
      CFDictionaryRef v255 = CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E9B0]);
      CFNumberRef v897 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E878]);
      cf1a = (void *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E828]);
      CFDictionaryRef theDicta = (const __CFDictionary *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E8C0]);
      CFTypeRef v884 = CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E870]);
      CFNumberRef v878 = (CFNumberRef)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x263F2E8B8]);
      if (v252)
      {
        *(void *)int valuePtr = 0;
        CFNumberGetValue(v252, kCFNumberLongLongType, valuePtr);
        *(void *)&v1116[8] = *(void *)valuePtr;
      }
      if (!v253)
      {
LABEL_497:
        if (v255)
        {
          int v324 = CFEqual(v255, (CFTypeRef)*MEMORY[0x263EFFB40]);
          if (*v964)
          {
            CFNumberRef v256 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              CFNumberRef v256 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v256;
            }
            if (!os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_506;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            uint64_t v257 = "%s - Cannot change GDC Enable while streaming\n";
LABEL_503:
            int v325 = valuePtr;
LABEL_504:
            BOOL v326 = v256;
            uint32_t v327 = 12;
LABEL_505:
            _os_log_impl(&dword_24680F000, v326, OS_LOG_TYPE_DEFAULT, v257, v325, v327);
LABEL_506:
            LODWORD(v91) = 0;
            BOOL v922 = 0;
            BOOL v923 = 0;
LABEL_507:
            uint64_t v20 = 4294954516;
LABEL_508:
            BOOL v969 = 0;
            BOOL dict = 0;
            BOOL v957 = 0;
            BOOL v960 = 0;
            int v108 = 0;
LABEL_1611:
            BOOL v95 = v922;
            goto LABEL_106;
          }
          BYTE11(v1118) = v324 != 0;
        }
        BOOL v922 = dicta != 0;
        if (!dicta) {
          goto LABEL_595;
        }
        if (!CGRectMakeWithDictionaryRepresentation(dicta, (CGRect *)valuePtr))
        {
          CFNumberRef v256 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFNumberRef v256 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v256;
          }
          if (!os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_506;
          }
          *(_DWORD *)v1086 = 136315138;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          uint64_t v257 = "%s - Failed to read Crop Rect\n";
          int v325 = v1086;
          goto LABEL_504;
        }
        unsigned int v328 = *(double *)valuePtr;
        unsigned int v329 = *(double *)&valuePtr[16];
        uint64_t v330 = *(void *)(a2 + 160);
        if (*(unsigned char *)(v330 + 120 * v11 + 92)) {
          BOOL v331 = BYTE11(v1118) == 0;
        }
        else {
          BOOL v331 = 1;
        }
        if (v331)
        {
          if (!*(unsigned char *)(v330 + 120 * v11 + 36))
          {
            uint64_t v339 = v984;
            if (v983) {
              int v340 = 2 * v328;
            }
            else {
              int v340 = *(double *)valuePtr;
            }
            if (v983) {
              int v341 = 2 * v329;
            }
            else {
              int v341 = *(double *)&valuePtr[16];
            }
            goto LABEL_559;
          }
          uint64_t v339 = *(void *)(v330 + 120 * v11 + 40);
        }
        else
        {
          uint64_t v339 = *(void *)(v330 + 120 * v11 + 96);
        }
        int v340 = *(double *)valuePtr;
        int v341 = *(double *)&valuePtr[16];
LABEL_559:
        int v342 = v339;
        if (v341 + v340 > v339)
        {
          long long v343 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v343 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v343;
          }
          if (!os_log_type_enabled(v343, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_506;
          }
          *(_DWORD *)v1086 = 136315906;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = v340;
          HIWORD(v1087) = 1024;
          unsigned int v1088 = v341;
          LOWORD(v1089[0]) = 1024;
          *(_DWORD *)((char *)v1089 + 2) = v342;
          uint64_t v257 = "%s - Invalid crop x(%d)/width(%d) for selected output width %d\n";
          int v325 = v1086;
          BOOL v326 = v343;
          uint32_t v327 = 30;
          goto LABEL_505;
        }
        int v344 = HIDWORD(v339);
        if (*(double *)&valuePtr[8] + *(double *)&valuePtr[24] > (double)HIDWORD(v339))
        {
          int v334 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v334 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v334;
          }
          if (!os_log_type_enabled(v334, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_506;
          }
          *(_DWORD *)v1086 = 136315394;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = v344;
          uint64_t v257 = "%s - Invalid crop y/height for selected output height %d\n";
          goto LABEL_613;
        }
        if ((v328 & 1) != 0
          || (*(double *)&valuePtr[8] & 1) != 0
          || v329 % v1092
          || (*(double *)&valuePtr[24] & 1) != 0)
        {
          int v334 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            int v334 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v334;
          }
          if (!os_log_type_enabled(v334, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_506;
          }
          *(_DWORD *)v1086 = 136315394;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = v1092;
          uint64_t v257 = "%s - Invalid crop params, must be divisible by 2 (width by %d)\n";
LABEL_613:
          int v325 = v1086;
          goto LABEL_614;
        }
        CGRect v1117 = *(CGRect *)valuePtr;
LABEL_595:
        if (v254)
        {
          *(_DWORD *)int valuePtr = 0;
          CFNumberGetValue(v254, kCFNumberSInt32Type, valuePtr);
          int v353 = *(_DWORD *)valuePtr;
          if (v1117.size.width < (double)*(int *)valuePtr || v1117.size.width * 0.25 > (double)*(int *)valuePtr)
          {
            long long v355 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              long long v355 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v355;
            }
            if (os_log_type_enabled(v355, OS_LOG_TYPE_ERROR)) {
              SetVideoOutputConfigurations((uint64_t)valuePtr, (uint64_t)&v1117.size);
            }
            goto LABEL_506;
          }
          if (*(_DWORD *)valuePtr % v1093)
          {
            long long v356 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              long long v356 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v356;
            }
            if (os_log_type_enabled(v356, OS_LOG_TYPE_ERROR)) {
              SetVideoOutputConfigurations(v356, v357, v358, v359, v360, v361, v362, v363);
            }
            goto LABEL_506;
          }
          if (*v964)
          {
            CGRect v371 = *(__CVPixelBufferPool **)(a2 + 824);
            if (v371)
            {
              *(_DWORD *)v1086 = 0;
              CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v371);
              if (!PixelBufferAttributes)
              {
                v456 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  v456 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v456;
                }
                if (!os_log_type_enabled(v456, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_506;
                }
                goto LABEL_851;
              }
              CFNumberRef v373 = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F04240]);
              if (!v373)
              {
                v493 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  v493 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v493;
                }
                if (os_log_type_enabled(v493, OS_LOG_TYPE_ERROR)) {
                  SetVideoOutputConfigurations(v493, v494, v495, v496, v497, v498, v499, v500);
                }
                goto LABEL_506;
              }
              CFNumberGetValue(v373, kCFNumberSInt32Type, v1086);
              int v353 = *(_DWORD *)valuePtr;
              if (*(_DWORD *)v1086 < *(_DWORD *)valuePtr)
              {
                uint64_t v374 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  uint64_t v374 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v374;
                }
                if (!os_log_type_enabled(v374, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_506;
                }
                goto LABEL_646;
              }
            }
            else
            {
              v416 = *(void **)(a2 + 136);
              if (v416)
              {
                Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool(v416, 0);
                int v353 = *(_DWORD *)valuePtr;
                if (BufferPool)
                {
                  if (*(_DWORD *)(BufferPool + 24) < *(_DWORD *)valuePtr)
                  {
                    v418 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                    {
                      v418 = os_log_create("com.apple.isp", "plugin");
                      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v418;
                    }
                    if (!os_log_type_enabled(v418, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_506;
                    }
LABEL_646:
                    SetVideoOutputConfigurations();
                    goto LABEL_506;
                  }
                }
              }
            }
          }
          *(_DWORD *)&v1116[20] = v353;
        }
        if (!v970) {
          goto LABEL_860;
        }
        *(_DWORD *)int valuePtr = 0;
        CFNumberGetValue(v970, kCFNumberSInt32Type, valuePtr);
        int v419 = *(_DWORD *)valuePtr;
        if (v1117.size.height < (double)*(int *)valuePtr || v1117.size.height * 0.25 > (double)*(int *)valuePtr)
        {
          v421 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v421 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v421;
          }
          if (os_log_type_enabled(v421, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputConfigurations((uint64_t)valuePtr, (uint64_t)&v1117.size.height);
          }
          goto LABEL_506;
        }
        if (valuePtr[0])
        {
          v426 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v426 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v426;
          }
          if (os_log_type_enabled(v426, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputConfigurations(v426, v427, v428, v429, v430, v431, v432, v433);
          }
          goto LABEL_506;
        }
        if (!*v964)
        {
LABEL_859:
          *(_DWORD *)&v1116[24] = v419;
LABEL_860:
          BOOL v923 = ((unint64_t)v254 | (unint64_t)v970) != 0;
          if (v961)
          {
            *(_DWORD *)v1086 = 0;
            CFNumberGetValue(v961, kCFNumberSInt32Type, v1086);
            if (*v964)
            {
              v467 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v467 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v467;
              }
              if (!os_log_type_enabled(v467, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_1297;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v468 = "%s - Cannot change Retained Buffer Count while streaming\n";
              goto LABEL_1296;
            }
            LODWORD(v1118) = *(_DWORD *)v1086;
          }
          if (v958)
          {
            *(_DWORD *)v1086 = 0;
            CFNumberGetValue(v958, kCFNumberSInt32Type, v1086);
            if (*v964)
            {
              v467 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v467 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v467;
              }
              if (!os_log_type_enabled(v467, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_1297;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v468 = "%s - Cannot change Buffer Cache Mode while streaming\n";
              goto LABEL_1296;
            }
            DWORD1(v1118) = *(_DWORD *)v1086;
          }
          if (numbera)
          {
            int v469 = CFEqual(numbera, (CFTypeRef)*MEMORY[0x263EFFB40]);
            if (*v964)
            {
              v467 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v467 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v467;
              }
              if (!os_log_type_enabled(v467, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_1297;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v468 = "%s - Cannot change Attach Raw while streaming\n";
              goto LABEL_1296;
            }
            BYTE8(v1118) = v469 != 0;
          }
          if (v904)
          {
            int v470 = CFEqual(v904, (CFTypeRef)*MEMORY[0x263EFFB40]);
            if (*v964)
            {
              v467 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v467 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v467;
              }
              if (!os_log_type_enabled(v467, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_1297;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v468 = "%s - Cannot change Stabilization Enable while streaming\n";
              goto LABEL_1296;
            }
            BYTE10(v1118) = v470 != 0;
          }
          if (v897)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v897, kCFNumberFloat32Type, valuePtr);
            if (*v964)
            {
LABEL_1297:
              LODWORD(v91) = 0;
              goto LABEL_507;
            }
            HIDWORD(v1118) = *(_DWORD *)valuePtr;
          }
          if (!theDicta)
          {
LABEL_1290:
            if (!cf1a) {
              goto LABEL_1305;
            }
            if (*v964)
            {
              v467 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v467 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v467;
              }
              if (!os_log_type_enabled(v467, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_1297;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v468 = "%s - Cannot change Client Buffer Pool while streaming\n";
              goto LABEL_1296;
            }
            if ((void)v1123)
            {
              CVPixelBufferPoolRelease((CVPixelBufferPoolRef)v1123);
              *(void *)&long long v1123 = 0;
            }
            for (uint64_t i = 0; i != 32; i += 8)
            {
              v633 = *(__CVBuffer **)((char *)&v1123 + i + 8);
              if (v633)
              {
                CVPixelBufferRelease(v633);
                *(void *)((char *)&v1123 + i + 8) = 0;
              }
            }
            if (CFEqual(cf1a, (CFTypeRef)*MEMORY[0x263EFFD08]))
            {
LABEL_1305:
              LODWORD(v91) = 0;
              goto LABEL_1306;
            }
            CFDictionaryRef v638 = CVPixelBufferPoolGetPixelBufferAttributes((CVPixelBufferPoolRef)cf1a);
            if (!v638)
            {
              v671 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v671 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v671;
              }
              if (os_log_type_enabled(v671, OS_LOG_TYPE_ERROR)) {
                SetVideoOutputConfigurations(v671, v672, v673, v674, v675, v676, v677, v678);
              }
              goto LABEL_1297;
            }
            CFDictionaryRef v639 = v638;
            *(_DWORD *)v1086 = 0;
            unsigned int v979 = 0;
            CFNumberRef v640 = (const __CFNumber *)CFDictionaryGetValue(v638, (const void *)*MEMORY[0x263F04240]);
            CFNumberGetValue(v640, kCFNumberIntType, v1086);
            CFNumberRef v641 = (const __CFNumber *)CFDictionaryGetValue(v639, (const void *)*MEMORY[0x263F04118]);
            CFNumberGetValue(v641, kCFNumberIntType, &v979);
            if (*(_DWORD *)v1086 < *(_DWORD *)&v1116[20] || v979 < *(_DWORD *)&v1116[24])
            {
              v642 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v642 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v642;
              }
              if (os_log_type_enabled(v642, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int valuePtr = 136316162;
                *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
                *(_WORD *)&valuePtr[12] = 1024;
                *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
                *(_WORD *)&valuePtr[18] = 1024;
                *(_DWORD *)&valuePtr[20] = v979;
                *(_WORD *)&valuePtr[24] = 1024;
                *(_DWORD *)&valuePtr[26] = *(_DWORD *)&v1116[20];
                *(_WORD *)&valuePtr[30] = 1024;
                *(_DWORD *)&valuePtr[32] = *(_DWORD *)&v1116[24];
                _os_log_error_impl(&dword_24680F000, v642, OS_LOG_TYPE_ERROR, "%s - PrimaryScaler ClientBufferPool %dx%d is smaller than OutputSize %dx%d\n", valuePtr, 0x24u);
              }
              goto LABEL_1297;
            }
            *(void *)&long long v1123 = CVPixelBufferPoolRetain((CVPixelBufferPoolRef)cf1a);
            MinBufferCFIndex Count = CVPixelBufferPoolGetMinBufferCount();
            int v696 = dword_26B11BA34;
            if (!dword_26B11BA34)
            {
              unsigned int v697 = *(_DWORD *)(a2 + 48);
              unsigned int v698 = *(_DWORD *)(a2 + 168);
              if (v697 < v698) {
                unsigned int v698 = 0;
              }
              int v696 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v697 - v698) + 116);
            }
            int v699 = v696 - *(_DWORD *)(a2 + 68);
            LODWORD(v1118) = ~v699 + MinBufferCount;
            if ((int)v1118 >= 0)
            {
              v700 = CVPixelBufferPoolRetain((CVPixelBufferPoolRef)v1123);
              *(_DWORD *)v1086 = 0;
              *(_DWORD *)v1086 = CVPixelBufferPoolGetMinBufferCount();
              CFAllocatorRef v701 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              if (Mutable)
              {
                v703 = Mutable;
                CFNumberRef v704 = CFNumberCreate(v701, kCFNumberSInt32Type, v1086);
                CFDictionarySetValue(v703, (const void *)*MEMORY[0x263F041A8], v704);
                CFRelease(v704);
                CFNumberRef v973 = (CFNumberRef)(int)fmin((double)v699, 4.0);
                if ((int)v973 >= 1)
                {
                  v705 = (void *)&v1123 + 1;
                  CFNumberRef v706 = v973;
                  do
                  {
                    *(void *)int valuePtr = 0;
                    CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(v701, v700, v703, (CVPixelBufferRef *)valuePtr);
                    *v705++ = *(void *)valuePtr;
                    CFNumberRef v706 = (CFNumberRef)((char *)v706 - 1);
                  }
                  while (v706);
                }
                LODWORD(v91) = (int)v973 > 0;
                CFRelease(v703);
              }
              else
              {
                LODWORD(v91) = 0;
              }
              CVPixelBufferPoolRelease(v700);
LABEL_1306:
              if (v884
                && (int v634 = CFEqual(v884, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0,
                    BYTE4(v1122) = v634,
                    *(void *)(a2 + 136))
                && *(unsigned __int8 *)(a2 + 812) != v634)
              {
                v636 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  v636 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v636;
                }
                if (!os_log_type_enabled(v636, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_1329;
                }
                *(_DWORD *)int valuePtr = 136315138;
                *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
                v637 = "%s - Cannot change Face Tracking Enable while streaming\n";
              }
              else
              {
                if (!v878
                  || (int v635 = CFEqual(v878, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0,
                      BYTE5(v1122) = v635,
                      !*(void *)(a2 + 136))
                  || *(unsigned __int8 *)(a2 + 813) == v635)
                {
                  BOOL v95 = dicta != 0;
                  goto LABEL_36;
                }
                v636 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  v636 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v636;
                }
                if (!os_log_type_enabled(v636, OS_LOG_TYPE_DEFAULT))
                {
LABEL_1329:
                  uint64_t v20 = 4294954612;
                  goto LABEL_508;
                }
                *(_DWORD *)int valuePtr = 136315138;
                *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
                v637 = "%s - Cannot change Segmentation Enable while streaming\n";
              }
              _os_log_impl(&dword_24680F000, v636, OS_LOG_TYPE_DEFAULT, v637, valuePtr, 0xCu);
              goto LABEL_1329;
            }
            v467 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v467 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v467;
            }
            if (!os_log_type_enabled(v467, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_1297;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v468 = "%s - Not enough buffers in client pool\n";
LABEL_1296:
            _os_log_impl(&dword_24680F000, v467, OS_LOG_TYPE_DEFAULT, v468, valuePtr, 0xCu);
            goto LABEL_1297;
          }
          v486 = (unsigned char *)(a2 + 4136);
          if (!CFDictionaryGetCount(theDicta))
          {
LABEL_1289:
            unsigned char *v486 = 0;
            goto LABEL_1290;
          }
          if (*(void *)(a2 + 3888) && !*(unsigned char *)(v9 + 96 * *(unsigned int *)(a2 + 132) + 64))
          {
            v467 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v467 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v467;
            }
            if (!os_log_type_enabled(v467, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_1297;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v468 = "%s - Cannot change Vision Data Config on slave camera\n";
            goto LABEL_1296;
          }
          unsigned char *v486 = 1;
          CFNumberRef v487 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA38]);
          float v488 = 0.0;
          float v489 = 0.0;
          if (v487)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v487, kCFNumberFloatType, valuePtr);
            float v489 = (float)*(float *)valuePtr;
          }
          *(float *)(a2 + 4144) = v489;
          CFNumberRef v490 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA30]);
          if (v490)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v490, kCFNumberFloatType, valuePtr);
            float v488 = (float)*(float *)valuePtr;
          }
          *(float *)(a2 + 4148) = v488;
          CFDictionaryRef v491 = (const __CFDictionary *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA28]);
          if (v491)
          {
            memset(valuePtr, 0, 24);
            CMTimeMakeFromDictionary((CMTime *)valuePtr, v491);
            CMTime time = *(CMTime *)valuePtr;
            unsigned int v492 = (CMTimeGetSeconds(&time) * 1000.0);
          }
          else
          {
            unsigned int v492 = 2000;
          }
          *(_DWORD *)(a2 + 4152) = v492;
          CFNumberRef v574 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA00]);
          if (v574)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v574, kCFNumberSInt32Type, valuePtr);
            int v575 = *(_DWORD *)valuePtr;
          }
          else
          {
            int v575 = 4;
          }
          *(_DWORD *)(a2 + 4156) = v575;
          CFNumberRef v576 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2E9F8]);
          if (v576)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v576, kCFNumberFloatType, valuePtr);
            unsigned int v577 = *(float *)valuePtr;
          }
          else
          {
            unsigned int v577 = 2;
          }
          *(_DWORD *)(a2 + 416pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v577;
          CFNumberRef v578 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA40]);
          if (v578)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v578, kCFNumberSInt32Type, valuePtr);
            int v579 = *(_DWORD *)valuePtr;
          }
          else
          {
            int v579 = 5000;
          }
          *(_DWORD *)(a2 + 4164) = v579;
          CFNumberRef v580 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA18]);
          if (v580)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v580, kCFNumberFloatType, valuePtr);
            unsigned int v581 = *(float *)valuePtr;
          }
          else
          {
            unsigned int v581 = 45;
          }
          *(_DWORD *)(a2 + 4168) = v581;
          v582 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2E9D8]);
          *(unsigned char *)(a2 + 418pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v582 && CFEqual(v582, (CFTypeRef)*MEMORY[0x263EFFB40]);
          v583 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2E9F0]);
          *(unsigned char *)(a2 + 4181) = !v583 || CFEqual(v583, (CFTypeRef)*MEMORY[0x263EFFB40]);
          CFNumberRef v599 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA50]);
          if (v599)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v599, kCFNumberSInt32Type, valuePtr);
            int v600 = *(_DWORD *)valuePtr;
          }
          else
          {
            int v600 = 3;
          }
          *(_DWORD *)(a2 + 4172) = v600;
          v601 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2E9D0]);
          if (v601) {
            BOOL v602 = CFEqual(v601, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
          }
          else {
            BOOL v602 = 0;
          }
          *(unsigned char *)(a2 + 418mach_timebase_info(this + 3) = v602;
          CFNumberRef v603 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA10]);
          if (v603)
          {
            *(_WORD *)int valuePtr = 0;
            CFNumberGetValue(v603, kCFNumberSInt16Type, valuePtr);
            int v604 = *(unsigned __int16 *)valuePtr;
          }
          else
          {
            int v604 = 1;
          }
          *(_DWORD *)(a2 + 4188) = v604;
          CFNumberRef v605 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA68]);
          if (v605)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v605, kCFNumberSInt32Type, valuePtr);
            int v606 = *(_DWORD *)valuePtr;
          }
          else
          {
            int v606 = 9;
          }
          *(_DWORD *)(a2 + 4192) = v606;
          CFNumberRef v607 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA60]);
          if (v607)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v607, kCFNumberFloatType, valuePtr);
            int v608 = *(_DWORD *)valuePtr;
          }
          else
          {
            int v608 = 1045220557;
          }
          *(_DWORD *)(a2 + 4196) = v608;
          CFNumberRef v609 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA58]);
          if (v609)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v609, kCFNumberFloatType, valuePtr);
            float v610 = *(float *)valuePtr;
          }
          else
          {
            float v610 = 0.5;
          }
          *(float *)(a2 + 420pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v610;
          CFNumberRef v611 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA08]);
          if (v611)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v611, kCFNumberSInt32Type, valuePtr);
            int v612 = *(_DWORD *)valuePtr;
          }
          else
          {
            int v612 = 180;
          }
          *(_DWORD *)(a2 + 4204) = v612;
          CFNumberRef v613 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA48]);
          if (v613)
          {
            *(_DWORD *)int valuePtr = 0;
            CFNumberGetValue(v613, kCFNumberFloatType, valuePtr);
            float v614 = *(float *)valuePtr;
          }
          else
          {
            float v614 = 20.0;
          }
          *(float *)(a2 + 4208) = v614;
          CFNumberRef v615 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2E9E0]);
          if (v615)
          {
            valuePtr[0] = 0;
            CFNumberGetValue(v615, kCFNumberSInt8Type, valuePtr);
            char v616 = valuePtr[0];
          }
          else
          {
            char v616 = 1;
          }
          *(unsigned char *)(a2 + 4212) = v616;
          CFDataRef v617 = (const __CFData *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2EA20]);
          if (v617 && (CFDataRef v618 = v617, v619 = CFGetTypeID(v617), v619 == CFDataGetTypeID()))
          {
            LOBYTE(v846) = 0;
            CFIndex Length = CFDataGetLength(v618);
            v621 = H16ISP::H16ISPCreateCVBuffer(0x40u, (Length / 64) + 1, 0, 0, 7, 0, 0.0, 64, 128, 0, v846, 0, 0, -1);
            *(void *)(a2 + 4216) = v621;
            if (v621)
            {
              CVPixelBufferLockBaseAddress(v621, 0);
              BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 4216));
              if (BaseAddress)
              {
                v623 = BaseAddress;
                BytePtr = CFDataGetBytePtr(v618);
                CFIndex v625 = CFDataGetLength(v618);
                memcpy(v623, BytePtr, v625);
              }
              CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 4216), 0);
              goto LABEL_1285;
            }
            v670 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v670 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v670;
            }
            if (!os_log_type_enabled(v670, OS_LOG_TYPE_DEFAULT))
            {
LABEL_1284:
              *(void *)(a2 + 4216) = 0;
LABEL_1285:
              v630 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x263F2E9E8]);
              if (v630) {
                BOOL v631 = CFEqual(v630, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
              }
              else {
                BOOL v631 = 0;
              }
              *(unsigned char *)(a2 + 421mach_timebase_info(this + 3) = v631;
              *(_DWORD *)(a2 + 414pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(a2 + 52);
              v486 = (unsigned char *)(a2 + 4184);
              goto LABEL_1289;
            }
            *(_DWORD *)int valuePtr = 136315394;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            *(_WORD *)&valuePtr[12] = 1024;
            *(_DWORD *)&valuePtr[14] = 0;
            v627 = "%s - Unable to create CV Pixel buffer for LACC, err = %d\n";
            v628 = v670;
            uint32_t v629 = 18;
          }
          else
          {
            v626 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v626 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v626;
            }
            if (!os_log_type_enabled(v626, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_1284;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v627 = "%s - Unable to get LACC configuration from CoreMedia\n";
            v628 = v626;
            uint32_t v629 = 12;
          }
          _os_log_impl(&dword_24680F000, v628, OS_LOG_TYPE_DEFAULT, v627, valuePtr, v629);
          goto LABEL_1284;
        }
        v422 = *(__CVPixelBufferPool **)(a2 + 824);
        if (!v422)
        {
          v464 = *(void **)(a2 + 136);
          if (v464)
          {
            uint64_t v465 = H16ISP::H16ISPFrameReceiver::getBufferPool(v464, 0);
            int v419 = *(_DWORD *)valuePtr;
            if (v465)
            {
              if (*(_DWORD *)(v465 + 28) < *(_DWORD *)valuePtr)
              {
                v466 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  v466 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v466;
                }
                if (!os_log_type_enabled(v466, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_506;
                }
LABEL_802:
                SetVideoOutputConfigurations();
                goto LABEL_506;
              }
            }
          }
          goto LABEL_859;
        }
        *(_DWORD *)v1086 = 0;
        CFDictionaryRef v423 = CVPixelBufferPoolGetPixelBufferAttributes(v422);
        if (v423)
        {
          CFNumberRef v424 = (const __CFNumber *)CFDictionaryGetValue(v423, (const void *)*MEMORY[0x263F04118]);
          if (!v424)
          {
            v531 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v531 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v531;
            }
            if (os_log_type_enabled(v531, OS_LOG_TYPE_ERROR)) {
              SetVideoOutputConfigurations(v531, v532, v533, v534, v535, v536, v537, v538);
            }
            goto LABEL_506;
          }
          CFNumberGetValue(v424, kCFNumberSInt32Type, v1086);
          int v419 = *(_DWORD *)valuePtr;
          if (*(_DWORD *)v1086 < *(_DWORD *)valuePtr)
          {
            v425 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v425 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v425;
            }
            if (!os_log_type_enabled(v425, OS_LOG_TYPE_ERROR)) {
              goto LABEL_506;
            }
            goto LABEL_802;
          }
          goto LABEL_859;
        }
        v456 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v456 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v456;
        }
        if (!os_log_type_enabled(v456, OS_LOG_TYPE_ERROR)) {
          goto LABEL_506;
        }
LABEL_851:
        SetVideoOutputConfigurations(v456, v457, v458, v459, v460, v461, v462, v463);
        goto LABEL_506;
      }
      *(_DWORD *)v1086 = 0;
      CFNumberGetValue(v253, kCFNumberSInt32Type, v1086);
      if (*v964)
      {
        CFNumberRef v256 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v256 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v256;
        }
        if (!os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_506;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        uint64_t v257 = "%s - Cannot change pixel format while streaming\n";
        goto LABEL_503;
      }
      int v294 = *(_DWORD *)v1086;
      if (*(unsigned char *)(a2 + 3784))
      {
        if (*(_DWORD *)v1086 == 1278226736 || *(_DWORD *)v1086 == 1278226742) {
          goto LABEL_496;
        }
        int v295 = *(_DWORD *)SupportedOutputFormatsPrimaryScaler;
        if (*(_DWORD *)SupportedOutputFormatsPrimaryScaler)
        {
          char v296 = 0;
          CVPixelBufferRef v297 = &SupportedOutputFormatsPrimaryScaler[4];
          do
          {
            v296 |= v295 == *(_DWORD *)v1086;
            int v298 = *(_DWORD *)v297;
            v297 += 4;
            int v295 = v298;
          }
          while (v298);
          if (v296)
          {
            int v294 = 1278226742;
LABEL_496:
            *(_DWORD *)&v1116[16] = v294;
            goto LABEL_497;
          }
        }
        int v334 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v334 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v334;
        }
        if (!os_log_type_enabled(v334, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_506;
        }
        *(_DWORD *)int valuePtr = 136315394;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
        uint64_t v257 = "%s - Selected IR pixel format not supported 0x%08X\n";
      }
      else
      {
        int v320 = *(_DWORD *)SupportedOutputFormatsPrimaryScaler;
        if (*(_DWORD *)SupportedOutputFormatsPrimaryScaler)
        {
          char v321 = 0;
          BOOL v322 = &SupportedOutputFormatsPrimaryScaler[4];
          do
          {
            v321 |= v320 == *(_DWORD *)v1086;
            int v323 = *(_DWORD *)v322;
            v322 += 4;
            int v320 = v323;
          }
          while (v323);
          if (v321) {
            goto LABEL_496;
          }
        }
        int v334 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v334 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v334;
        }
        if (!os_log_type_enabled(v334, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_506;
        }
        *(_DWORD *)int valuePtr = 136315394;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
        uint64_t v257 = "%s - Selected pixel format not supported 0x%08X\n";
      }
      int v325 = valuePtr;
LABEL_614:
      BOOL v326 = v334;
      uint32_t v327 = 18;
      goto LABEL_505;
    }
    LODWORD(v91) = 0;
  }
  BOOL v95 = 0;
  BOOL v923 = 0;
LABEL_36:
  CFDictionaryRef v96 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E928]);
  if (!v96 || (CFDictionaryRef v97 = v96, v98 = CFGetTypeID(v96), v98 != CFDictionaryGetTypeID()))
  {
    BOOL dict = 0;
    BOOL v960 = 0;
    goto LABEL_52;
  }
  if (CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E550])
    || CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E558])
    || CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E548])
    || CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E568])
    || CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E9B0])
    || CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E878])
    || CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E8A8])
    || CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E530]))
  {
    double v99 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      double v99 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v99;
    }
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      _os_log_impl(&dword_24680F000, v99, OS_LOG_TYPE_DEFAULT, "%s - Invalid property for secondary scaler\n", valuePtr, 0xCu);
    }
    BOOL v969 = 0;
    BOOL dict = 0;
    BOOL v957 = 0;
    BOOL v960 = 0;
    goto LABEL_104;
  }
  BOOL v922 = v95;
  int theDict = (int)v91;
  CFNumberRef v277 = (const __CFNumber *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E850]);
  CFNumberRef v278 = (const __CFNumber *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E898]);
  CFNumberRef v279 = (const __CFNumber *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E8D0]);
  CFNumberRef dictb = (const __CFNumber *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E880]);
  CFDictionaryRef v280 = (const __CFDictionary *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E858]);
  CFNumberRef v971 = (const __CFNumber *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E8A0]);
  CFNumberRef v959 = (const __CFNumber *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E820]);
  CFNumberRef numberb = (CFNumberRef)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E818]);
  CFNumberRef v905 = (const __CFNumber *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E888]);
  CFNumberRef v898 = (CFNumberRef)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E9B8]);
  cf1b = (__CVPixelBufferPool *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E828]);
  CFTypeRef v885 = CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E870]);
  CFNumberRef v879 = (CFNumberRef)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E8B8]);
  CFNumberRef v873 = (CFNumberRef)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x263F2E8B0]);
  if (v277)
  {
    *(void *)int valuePtr = 0;
    CFNumberGetValue(v277, kCFNumberLongLongType, valuePtr);
    *((void *)&v1054 + 1) = *(void *)valuePtr;
  }
  if (v278)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v278, kCFNumberSInt32Type, v1086);
    if (*v965)
    {
      char v281 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        char v281 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v281;
      }
      if (!os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_673;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      uint64_t v282 = "%s - Cannot change Pixel Format while streaming\n";
      uint64_t v283 = valuePtr;
      goto LABEL_557;
    }
    int v310 = *(_DWORD *)SupportedOutputFormatsSecondaryScaler;
    if (!*(_DWORD *)SupportedOutputFormatsSecondaryScaler) {
      goto LABEL_539;
    }
    char v311 = 0;
    long long v312 = &SupportedOutputFormatsSecondaryScaler[4];
    do
    {
      v311 |= v310 == *(_DWORD *)v1086;
      int v313 = *(_DWORD *)v312;
      v312 += 4;
      int v310 = v313;
    }
    while (v313);
    if ((v311 & 1) == 0)
    {
LABEL_539:
      long long v318 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        long long v318 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v318;
      }
      if (!os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_673;
      }
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
      uint64_t v282 = "%s - Selected pixel format not supported 0x%08X\n";
      uint64_t v283 = valuePtr;
      goto LABEL_671;
    }
    LODWORD(v1055) = *(_DWORD *)v1086;
  }
  if (v280)
  {
    if (CGRectMakeWithDictionaryRepresentation(v280, (CGRect *)valuePtr))
    {
      uint64_t v316 = *(void *)(a2 + 160);
      if (*(unsigned char *)(v316 + 120 * v11 + 36))
      {
        double v317 = *(double *)&valuePtr[16];
        LODWORD(v314) = *(_DWORD *)(v316 + 120 * v11 + 40);
        if (*(double *)valuePtr + *(double *)&valuePtr[16] > (double)v314)
        {
          long long v318 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v318 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v318;
          }
          if (!os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_673;
          }
          int v319 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * v11 + 40);
          *(_DWORD *)v1086 = 136315394;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = v319;
          uint64_t v282 = "%s - Invalid crop x/width for selected output width %d\n";
          goto LABEL_670;
        }
        double v368 = *(double *)&valuePtr[8];
        double v369 = *(double *)&valuePtr[24];
        LODWORD(v315) = *(_DWORD *)(v316 + 120 * v11 + 44);
        if (*(double *)&valuePtr[8] + *(double *)&valuePtr[24] > (double)v315)
        {
          long long v318 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v318 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v318;
          }
          if (!os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_673;
          }
          int v370 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * v11 + 44);
          *(_DWORD *)v1086 = 136315394;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = v370;
          uint64_t v282 = "%s - Invalid crop y/height for selected output height %d\n";
          goto LABEL_670;
        }
        unsigned int v364 = *(double *)valuePtr;
      }
      else
      {
        unsigned int v364 = *(double *)valuePtr;
        double v317 = *(double *)&valuePtr[16];
        unsigned int v365 = *(double *)valuePtr << (v983 != 0);
        unsigned int v366 = *(double *)&valuePtr[16] << (v983 != 0);
        if (v365 + v366 > v984)
        {
          long long v367 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v367 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v367;
          }
          if (!os_log_type_enabled(v367, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_673;
          }
          *(_DWORD *)v1086 = 136315906;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = v365;
          HIWORD(v1087) = 1024;
          unsigned int v1088 = v366;
          LOWORD(v1089[0]) = 1024;
          *(_DWORD *)((char *)v1089 + 2) = v984;
          uint64_t v282 = "%s - Invalid crop x(%d)/width(%d) for selected output width %d\n";
          uint64_t v283 = v1086;
          long long v337 = v367;
          uint32_t v338 = 30;
          goto LABEL_672;
        }
        double v368 = *(double *)&valuePtr[8];
        double v369 = *(double *)&valuePtr[24];
        LODWORD(v315) = HIDWORD(v984);
        if (*(double *)&valuePtr[8] + *(double *)&valuePtr[24] > (double)v315)
        {
          long long v318 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v318 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v318;
          }
          if (!os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_673;
          }
          *(_DWORD *)v1086 = 136315394;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = HIDWORD(v984);
          uint64_t v282 = "%s - Invalid crop y/height for selected output height %d\n";
LABEL_670:
          uint64_t v283 = v1086;
LABEL_671:
          long long v337 = v318;
          uint32_t v338 = 18;
          goto LABEL_672;
        }
      }
      if ((v364 & 1) == 0
        && (v368 & 1) == 0
        && (v317 & 1) == 0
        && (v369 & 1) == 0)
      {
        *(void *)&long long v1056 = *(void *)valuePtr;
        *((double *)&v1056 + 1) = v368;
        *(double *)&long long v1057 = v317;
        *((double *)&v1057 + 1) = v369;
        goto LABEL_707;
      }
      char v281 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        char v281 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v281;
      }
      if (!os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_673;
      }
      *(_DWORD *)v1086 = 136315138;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      uint64_t v282 = "%s - Invalid crop params, must be divisible by 2\n";
    }
    else
    {
      char v281 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        char v281 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v281;
      }
      if (!os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_673;
      }
      *(_DWORD *)v1086 = 136315138;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      uint64_t v282 = "%s - Failed to read Crop Rect\n";
    }
    uint64_t v283 = v1086;
LABEL_557:
    long long v337 = v281;
    uint32_t v338 = 12;
LABEL_672:
    _os_log_impl(&dword_24680F000, v337, OS_LOG_TYPE_DEFAULT, v282, v283, v338);
LABEL_673:
    BOOL dict = 0;
    BOOL v960 = 0;
LABEL_674:
    uint64_t v20 = 4294954516;
LABEL_675:
    BOOL v969 = 0;
    BOOL v957 = 0;
LABEL_676:
    int v108 = 0;
    goto LABEL_2178;
  }
LABEL_707:
  if (v279)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v279, kCFNumberSInt32Type, valuePtr);
    int v391 = *(_DWORD *)valuePtr;
    if (*(double *)&v1057 < (double)*(int *)valuePtr || *(double *)&v1057 * 0.25 > (double)*(int *)valuePtr)
    {
      v393 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v393 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v393;
      }
      if (os_log_type_enabled(v393, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations((uint64_t)valuePtr, (uint64_t)&v1057);
      }
      goto LABEL_673;
    }
    if (valuePtr[0])
    {
      v398 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v398 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v398;
      }
      if (os_log_type_enabled(v398, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations(v398, v399, v400, v401, v402, v403, v404, v405);
      }
      goto LABEL_673;
    }
    if (*v965)
    {
      v394 = *(__CVPixelBufferPool **)(a2 + 1024);
      if (v394)
      {
        *(_DWORD *)v1086 = 0;
        CFDictionaryRef v395 = CVPixelBufferPoolGetPixelBufferAttributes(v394);
        if (!v395)
        {
          v478 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v478 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v478;
          }
          if (!os_log_type_enabled(v478, OS_LOG_TYPE_ERROR)) {
            goto LABEL_673;
          }
          goto LABEL_913;
        }
        CFNumberRef v396 = (const __CFNumber *)CFDictionaryGetValue(v395, (const void *)*MEMORY[0x263F04240]);
        if (!v396)
        {
          v515 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v515 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v515;
          }
          if (os_log_type_enabled(v515, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputConfigurations(v515, v516, v517, v518, v519, v520, v521, v522);
          }
          goto LABEL_673;
        }
        CFNumberGetValue(v396, kCFNumberSInt32Type, v1086);
        int v391 = *(_DWORD *)valuePtr;
        if (*(_DWORD *)v1086 < *(_DWORD *)valuePtr)
        {
          v397 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v397 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v397;
          }
          if (!os_log_type_enabled(v397, OS_LOG_TYPE_ERROR)) {
            goto LABEL_673;
          }
          goto LABEL_725;
        }
      }
      else
      {
        v434 = *(void **)(a2 + 136);
        if (v434)
        {
          uint64_t v435 = H16ISP::H16ISPFrameReceiver::getBufferPool(v434, 10);
          int v391 = *(_DWORD *)valuePtr;
          if (v435)
          {
            if (*(_DWORD *)(v435 + 24) < *(_DWORD *)valuePtr)
            {
              v436 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v436 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v436;
              }
              if (!os_log_type_enabled(v436, OS_LOG_TYPE_ERROR)) {
                goto LABEL_673;
              }
LABEL_725:
              SetVideoOutputConfigurations();
              goto LABEL_673;
            }
          }
        }
      }
    }
    DWORD1(v1055) = v391;
  }
  if (!dictb) {
    goto LABEL_952;
  }
  *(_DWORD *)int valuePtr = 0;
  CFNumberGetValue(dictb, kCFNumberSInt32Type, valuePtr);
  int v437 = *(_DWORD *)valuePtr;
  if (*((double *)&v1057 + 1) < (double)*(int *)valuePtr || *((double *)&v1057 + 1) * 0.25 > (double)*(int *)valuePtr)
  {
    v439 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v439 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v439;
    }
    if (os_log_type_enabled(v439, OS_LOG_TYPE_ERROR)) {
      SetVideoOutputConfigurations((uint64_t)valuePtr, (uint64_t)&v1057 + 8);
    }
    goto LABEL_673;
  }
  if (valuePtr[0])
  {
    v444 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v444 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v444;
    }
    if (os_log_type_enabled(v444, OS_LOG_TYPE_ERROR)) {
      SetVideoOutputConfigurations(v444, v445, v446, v447, v448, v449, v450, v451);
    }
    goto LABEL_673;
  }
  if (*v965)
  {
    v440 = *(__CVPixelBufferPool **)(a2 + 1024);
    if (!v440)
    {
      v507 = *(void **)(a2 + 136);
      if (v507)
      {
        uint64_t v508 = H16ISP::H16ISPFrameReceiver::getBufferPool(v507, 10);
        int v437 = *(_DWORD *)valuePtr;
        if (v508)
        {
          if (*(_DWORD *)(v508 + 28) < *(_DWORD *)valuePtr)
          {
            v509 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v509 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v509;
            }
            if (!os_log_type_enabled(v509, OS_LOG_TYPE_ERROR)) {
              goto LABEL_673;
            }
LABEL_833:
            SetVideoOutputConfigurations();
            goto LABEL_673;
          }
        }
      }
      goto LABEL_951;
    }
    *(_DWORD *)v1086 = 0;
    CFDictionaryRef v441 = CVPixelBufferPoolGetPixelBufferAttributes(v440);
    if (v441)
    {
      CFNumberRef v442 = (const __CFNumber *)CFDictionaryGetValue(v441, (const void *)*MEMORY[0x263F04118]);
      if (!v442)
      {
        v540 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v540 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v540;
        }
        if (os_log_type_enabled(v540, OS_LOG_TYPE_ERROR)) {
          SetVideoOutputConfigurations(v540, v541, v542, v543, v544, v545, v546, v547);
        }
        goto LABEL_673;
      }
      CFNumberGetValue(v442, kCFNumberSInt32Type, v1086);
      int v437 = *(_DWORD *)valuePtr;
      if (*(_DWORD *)v1086 < *(_DWORD *)valuePtr)
      {
        v443 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v443 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v443;
        }
        if (!os_log_type_enabled(v443, OS_LOG_TYPE_ERROR)) {
          goto LABEL_673;
        }
        goto LABEL_833;
      }
      goto LABEL_951;
    }
    v478 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v478 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v478;
    }
    if (!os_log_type_enabled(v478, OS_LOG_TYPE_ERROR)) {
      goto LABEL_673;
    }
LABEL_913:
    SetVideoOutputConfigurations(v478, v479, v480, v481, v482, v483, v484, v485);
    goto LABEL_673;
  }
LABEL_951:
  DWORD2(v1055) = v437;
LABEL_952:
  BOOL v960 = ((unint64_t)dictb | (unint64_t)v279 | (unint64_t)v280) != 0;
  if (v971)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v971, kCFNumberSInt32Type, v1086);
    if (*v965)
    {
      v510 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v510 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v510;
      }
      if (!os_log_type_enabled(v510, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1096;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v511 = "%s - Cannot change Retained Buffer Count while streaming\n";
LABEL_1095:
      _os_log_impl(&dword_24680F000, v510, OS_LOG_TYPE_DEFAULT, v511, valuePtr, 0xCu);
LABEL_1096:
      BOOL dict = 0;
      goto LABEL_674;
    }
    LODWORD(v1058) = *(_DWORD *)v1086;
  }
  if (v959)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v959, kCFNumberSInt32Type, v1086);
    if (*v965)
    {
      v510 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v510 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v510;
      }
      if (!os_log_type_enabled(v510, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1096;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v511 = "%s - Cannot change Buffer Cache Mode while streaming\n";
      goto LABEL_1095;
    }
    DWORD1(v1058) = *(_DWORD *)v1086;
  }
  if (numberb)
  {
    int v512 = CFEqual(numberb, (CFTypeRef)*MEMORY[0x263EFFB40]);
    if (*v965)
    {
      v510 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v510 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v510;
      }
      if (!os_log_type_enabled(v510, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1096;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v511 = "%s - Cannot change Attach Raw while streaming\n";
      goto LABEL_1095;
    }
    BYTE8(v1058) = v512 != 0;
  }
  if (v905)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v905, kCFNumberFloatType, v1086);
    if (*v965)
    {
      v513 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v513 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v513;
      }
      if (os_log_type_enabled(v513, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        _os_log_impl(&dword_24680F000, v513, OS_LOG_TYPE_DEFAULT, "%s - Cannot change Max Output Framerate while output is enabled\n", valuePtr, 0xCu);
      }
      uint64_t v20 = 4294954514;
LABEL_1029:
      BOOL dict = 0;
      goto LABEL_675;
    }
    if (*(float *)v1086 > *(float *)(a2 + 52))
    {
      v529 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v529 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v529;
      }
      if (os_log_type_enabled(v529, OS_LOG_TYPE_DEFAULT))
      {
        double v530 = *(float *)(a2 + 52);
        *(_DWORD *)int valuePtr = 136315394;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        *(_WORD *)&valuePtr[12] = 2048;
        *(double *)&valuePtr[14] = v530;
        _os_log_impl(&dword_24680F000, v529, OS_LOG_TYPE_DEFAULT, "%s - Cannot be greater than streaming max framerate %.3f\n", valuePtr, 0x16u);
      }
      uint64_t v20 = 4294954516;
      goto LABEL_1029;
    }
    DWORD2(v1062) = *(_DWORD *)v1086;
  }
  if (v898)
  {
    int v558 = CFEqual(v898, (CFTypeRef)*MEMORY[0x263EFFB40]);
    if (*v965)
    {
      v510 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v510 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v510;
      }
      if (!os_log_type_enabled(v510, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1096;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v511 = "%s - Cannot change Stabilization Enable while streaming\n";
      goto LABEL_1095;
    }
    BYTE10(v1058) = v558 != 0;
  }
  if (!cf1b) {
    goto LABEL_1148;
  }
  if (*v965)
  {
    v510 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v510 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v510;
    }
    if (!os_log_type_enabled(v510, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_1096;
    }
    *(_DWORD *)int valuePtr = 136315138;
    *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
    v511 = "%s - Cannot change Client Buffer Pool while streaming\n";
    goto LABEL_1095;
  }
  if ((void)v1063)
  {
    CVPixelBufferPoolRelease((CVPixelBufferPoolRef)v1063);
    *(void *)&long long v1063 = 0;
  }
  for (uint64_t j = 0; j != 32; j += 8)
  {
    v570 = *(__CVBuffer **)((char *)&v1063 + j + 8);
    if (v570)
    {
      CVPixelBufferRelease(v570);
      *(void *)((char *)&v1063 + j + 8) = 0;
    }
  }
  if (!CFEqual(cf1b, (CFTypeRef)*MEMORY[0x263EFFD08]))
  {
    CFDictionaryRef v657 = CVPixelBufferPoolGetPixelBufferAttributes(cf1b);
    if (!v657)
    {
      v687 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v687 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v687;
      }
      if (os_log_type_enabled(v687, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations(v687, v688, v689, v690, v691, v692, v693, v694);
      }
      goto LABEL_1096;
    }
    CFDictionaryRef v658 = v657;
    *(_DWORD *)v1086 = 0;
    unsigned int v979 = 0;
    CFNumberRef v659 = (const __CFNumber *)CFDictionaryGetValue(v657, (const void *)*MEMORY[0x263F04240]);
    CFNumberGetValue(v659, kCFNumberIntType, v1086);
    CFNumberRef v660 = (const __CFNumber *)CFDictionaryGetValue(v658, (const void *)*MEMORY[0x263F04118]);
    CFNumberGetValue(v660, kCFNumberIntType, &v979);
    if (*(_DWORD *)v1086 < DWORD1(v1055) || v979 < DWORD2(v1055))
    {
      v661 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v661 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v661;
      }
      if (os_log_type_enabled(v661, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int valuePtr = 136316162;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = v979;
        *(_WORD *)&valuePtr[24] = 1024;
        *(_DWORD *)&valuePtr[26] = DWORD1(v1055);
        *(_WORD *)&valuePtr[30] = 1024;
        *(_DWORD *)&valuePtr[32] = DWORD2(v1055);
        _os_log_error_impl(&dword_24680F000, v661, OS_LOG_TYPE_ERROR, "%s - SecondaryScaler ClientBufferPool %dx%d is smaller than OutputSize %dx%d\n", valuePtr, 0x24u);
      }
      goto LABEL_1096;
    }
    *(void *)&long long v1063 = CVPixelBufferPoolRetain(cf1b);
    int v712 = CVPixelBufferPoolGetMinBufferCount();
    int v713 = dword_26B11BA34;
    if (!dword_26B11BA34)
    {
      unsigned int v714 = *(_DWORD *)(a2 + 48);
      unsigned int v715 = *(_DWORD *)(a2 + 168);
      if (v714 < v715) {
        unsigned int v715 = 0;
      }
      int v713 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v714 - v715) + 116);
    }
    int v716 = v713 - *(_DWORD *)(a2 + 68);
    LODWORD(v1058) = ~v716 + v712;
    if ((int)v1058 < 0)
    {
      v510 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v510 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v510;
      }
      if (!os_log_type_enabled(v510, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1096;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v511 = "%s - Not enough buffers in client pool\n";
      goto LABEL_1095;
    }
    v717 = CVPixelBufferPoolRetain((CVPixelBufferPoolRef)v1063);
    *(_DWORD *)v1086 = 0;
    *(_DWORD *)v1086 = CVPixelBufferPoolGetMinBufferCount();
    CFAllocatorRef v718 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef v719 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v719)
    {
      v720 = v719;
      CFNumberRef v721 = CFNumberCreate(v718, kCFNumberSInt32Type, v1086);
      CFDictionarySetValue(v720, (const void *)*MEMORY[0x263F041A8], v721);
      CFRelease(v721);
      CFDictionaryRef dictc = (CFDictionaryRef)(int)fmin((double)v716, 4.0);
      if ((int)dictc >= 1)
      {
        v722 = (void *)&v1063 + 1;
        CFDictionaryRef v723 = dictc;
        do
        {
          *(void *)int valuePtr = 0;
          CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(v718, v717, v720, (CVPixelBufferRef *)valuePtr);
          *v722++ = *(void *)valuePtr;
          CFDictionaryRef v723 = (CFDictionaryRef)((char *)v723 - 1);
        }
        while (v723);
      }
      BOOL dict = (int)dictc > 0;
      CFRelease(v720);
    }
    else
    {
      BOOL dict = 0;
    }
    CVPixelBufferPoolRelease(v717);
  }
  else
  {
LABEL_1148:
    BOOL dict = 0;
  }
  if (v885)
  {
    int v571 = CFEqual(v885, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    BYTE4(v1062) = v571;
    if (*(void *)(a2 + 136))
    {
      if (*(unsigned __int8 *)(a2 + 1012) != v571)
      {
        v651 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v651 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v651;
        }
        if (!os_log_type_enabled(v651, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_1368;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v652 = "%s - Cannot change Face Tracking Enable while streaming\n";
        goto LABEL_1367;
      }
    }
  }
  if (v879)
  {
    int v572 = CFEqual(v879, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    BYTE5(v1062) = v572;
    if (*(void *)(a2 + 136))
    {
      if (*(unsigned __int8 *)(a2 + 1013) != v572)
      {
        v651 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v651 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v651;
        }
        if (!os_log_type_enabled(v651, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_1368;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v652 = "%s - Cannot change Segmentation Enable while streaming\n";
LABEL_1367:
        _os_log_impl(&dword_24680F000, v651, OS_LOG_TYPE_DEFAULT, v652, valuePtr, 0xCu);
LABEL_1368:
        uint64_t v20 = 4294954612;
        goto LABEL_675;
      }
    }
  }
  if (v873)
  {
    if (*v965)
    {
      v573 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v573 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v573;
      }
      if (os_log_type_enabled(v573, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        _os_log_impl(&dword_24680F000, v573, OS_LOG_TYPE_DEFAULT, "%s - Cannot change Sources from Primary Scaler while streaming\n", valuePtr, 0xCu);
      }
      goto LABEL_674;
    }
    LOBYTE(v1066) = CFEqual(v873, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  LODWORD(v91) = theDict;
  BOOL v95 = v922;
LABEL_52:
  CFDictionaryRef v100 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E900]);
  BOOL v922 = v95;
  if (!v100 || (CFDictionaryRef v101 = v100, v102 = CFGetTypeID(v100), v102 != CFDictionaryGetTypeID()))
  {
    BOOL v969 = 0;
    BOOL v957 = 0;
    goto LABEL_70;
  }
  if (CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E9B8])
    || CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E550])
    || CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E548])
    || CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E568])
    || CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E558])
    || CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E9B0])
    || CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E8B0])
    || CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E878])
    || CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E8A8])
    || CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E530]))
  {
    CFAllocatorRef v103 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFAllocatorRef v103 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v103;
    }
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      _os_log_impl(&dword_24680F000, v103, OS_LOG_TYPE_DEFAULT, "%s - Invalid property for intermediate tap\n", valuePtr, 0xCu);
    }
    BOOL v969 = 0;
    BOOL v957 = 0;
    goto LABEL_104;
  }
  int theDict = (int)v91;
  CFNumberRef v345 = (const __CFNumber *)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E850]);
  CFNumberRef v346 = (const __CFNumber *)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E8D0]);
  CFNumberRef v347 = (const __CFNumber *)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E880]);
  CFDictionaryRef numberc = (const __CFDictionary *)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E858]);
  CFNumberRef v972 = (const __CFNumber *)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E8A0]);
  CFNumberRef v906 = (const __CFNumber *)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E820]);
  CFNumberRef v899 = (CFNumberRef)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E818]);
  CFNumberRef v348 = (const __CFNumber *)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E898]);
  CFNumberRef cf1c = (const __CFNumber *)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E888]);
  v886 = (__CVPixelBufferPool *)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E828]);
  CFNumberRef v880 = (CFNumberRef)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E870]);
  CFNumberRef v874 = (CFNumberRef)CFDictionaryGetValue(v101, (const void *)*MEMORY[0x263F2E8B8]);
  if (v345)
  {
    *(void *)int valuePtr = 0;
    CFNumberGetValue(v345, kCFNumberLongLongType, valuePtr);
    *((void *)&v1041 + 1) = *(void *)valuePtr;
  }
  if (v348)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v348, kCFNumberSInt32Type, v1086);
    if (*v963)
    {
      CMTime v349 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CMTime v349 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v349;
      }
      if (!os_log_type_enabled(v349, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_992;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v350 = "%s - Cannot change pixel format while streaming\n";
      int v351 = valuePtr;
      goto LABEL_756;
    }
    int v378 = *(_DWORD *)SupportedOutputFormatsIntermediateTap;
    if (!*(_DWORD *)SupportedOutputFormatsIntermediateTap) {
      goto LABEL_742;
    }
    char v379 = 0;
    v380 = &SupportedOutputFormatsIntermediateTap[4];
    do
    {
      v379 |= v378 == *(_DWORD *)v1086;
      int v381 = *(_DWORD *)v380;
      v380 += 4;
      int v378 = v381;
    }
    while (v381);
    if ((v379 & 1) == 0)
    {
LABEL_742:
      v386 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v386 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v386;
      }
      if (!os_log_type_enabled(v386, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_992;
      }
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
      v350 = "%s - Selected pixel format not supported 0x%08X\n";
      int v351 = valuePtr;
      goto LABEL_990;
    }
    LODWORD(v1042) = *(_DWORD *)v1086;
  }
  BOOL v957 = numberc != 0;
  if (numberc)
  {
    if (CGRectMakeWithDictionaryRepresentation(numberc, (CGRect *)valuePtr))
    {
      uint64_t v384 = *(void *)(a2 + 160);
      if (*(unsigned char *)(v384 + 120 * v11 + 36))
      {
        double v385 = *(double *)&valuePtr[16];
        LODWORD(v382) = *(_DWORD *)(v384 + 120 * v11 + 40);
        if (*(double *)valuePtr + *(double *)&valuePtr[16] > (double)v382)
        {
          v386 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v386 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v386;
          }
          if (!os_log_type_enabled(v386, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_992;
          }
          int v387 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * v11 + 40);
          *(_DWORD *)v1086 = 136315394;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = v387;
          v350 = "%s - Invalid crop x/width for selected output width %d\n";
          goto LABEL_989;
        }
        double v471 = *(double *)&valuePtr[8];
        double v472 = *(double *)&valuePtr[24];
        LODWORD(v38mach_timebase_info(this + 3) = *(_DWORD *)(v384 + 120 * v11 + 44);
        if (*(double *)&valuePtr[8] + *(double *)&valuePtr[24] > (double)v383)
        {
          v386 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v386 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v386;
          }
          if (!os_log_type_enabled(v386, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_992;
          }
          int v473 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * v11 + 44);
          *(_DWORD *)v1086 = 136315394;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = v473;
          v350 = "%s - Invalid crop y/height for selected output height %d\n";
          goto LABEL_989;
        }
        unsigned int v452 = *(double *)valuePtr;
      }
      else
      {
        unsigned int v452 = *(double *)valuePtr;
        double v385 = *(double *)&valuePtr[16];
        unsigned int v453 = *(double *)valuePtr << (v983 != 0);
        unsigned int v454 = *(double *)&valuePtr[16] << (v983 != 0);
        if (v453 + v454 > v984)
        {
          v455 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v455 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v455;
          }
          if (!os_log_type_enabled(v455, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_992;
          }
          *(_DWORD *)v1086 = 136315906;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = v453;
          HIWORD(v1087) = 1024;
          unsigned int v1088 = v454;
          LOWORD(v1089[0]) = 1024;
          *(_DWORD *)((char *)v1089 + 2) = v984;
          v350 = "%s - Invalid crop x(%d)/width(%d) for selected output width %d\n";
          int v351 = v1086;
          v412 = v455;
          uint32_t v413 = 30;
          goto LABEL_991;
        }
        double v471 = *(double *)&valuePtr[8];
        double v472 = *(double *)&valuePtr[24];
        LODWORD(v38mach_timebase_info(this + 3) = HIDWORD(v984);
        if (*(double *)&valuePtr[8] + *(double *)&valuePtr[24] > (double)v383)
        {
          v386 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v386 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v386;
          }
          if (!os_log_type_enabled(v386, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_992;
          }
          *(_DWORD *)v1086 = 136315394;
          *(void *)&v1086[4] = "SetVideoOutputConfigurations";
          LOWORD(v1087) = 1024;
          *(_DWORD *)((char *)&v1087 + 2) = HIDWORD(v984);
          v350 = "%s - Invalid crop y/height for selected output height %d\n";
LABEL_989:
          int v351 = v1086;
LABEL_990:
          v412 = v386;
          uint32_t v413 = 18;
          goto LABEL_991;
        }
      }
      if ((v452 & 1) == 0
        && (v471 & 1) == 0
        && (v385 & 1) == 0
        && (v472 & 1) == 0)
      {
        *(void *)&long long v1043 = *(void *)valuePtr;
        *((double *)&v1043 + 1) = v471;
        *(double *)&long long v1044 = v385;
        *((double *)&v1044 + 1) = v472;
        goto LABEL_1004;
      }
      CMTime v349 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CMTime v349 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v349;
      }
      if (!os_log_type_enabled(v349, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_992;
      }
      *(_DWORD *)v1086 = 136315138;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      v350 = "%s - Invalid crop params, must be divisible by 2\n";
    }
    else
    {
      CMTime v349 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CMTime v349 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v349;
      }
      if (!os_log_type_enabled(v349, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_992;
      }
      *(_DWORD *)v1086 = 136315138;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      v350 = "%s - Failed to read Crop Rect\n";
    }
    int v351 = v1086;
LABEL_756:
    v412 = v349;
    uint32_t v413 = 12;
LABEL_991:
    _os_log_impl(&dword_24680F000, v412, OS_LOG_TYPE_DEFAULT, v350, v351, v413);
LABEL_992:
    BOOL v969 = 0;
    BOOL v957 = 0;
LABEL_993:
    uint64_t v20 = 4294954516;
    goto LABEL_676;
  }
LABEL_1004:
  if (v346)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v346, kCFNumberSInt32Type, valuePtr);
    int v523 = *(_DWORD *)valuePtr;
    if (*(double *)&v1044 != (double)*(int *)valuePtr)
    {
      v524 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v524 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v524;
      }
      if (os_log_type_enabled(v524, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations();
      }
      goto LABEL_992;
    }
    if (*v963)
    {
      v525 = *(__CVPixelBufferPool **)(a2 + 1224);
      if (v525)
      {
        *(_DWORD *)v1086 = 0;
        CFDictionaryRef v526 = CVPixelBufferPoolGetPixelBufferAttributes(v525);
        if (!v526)
        {
          v584 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v584 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v584;
          }
          if (!os_log_type_enabled(v584, OS_LOG_TYPE_ERROR)) {
            goto LABEL_992;
          }
          goto LABEL_1184;
        }
        CFNumberRef v527 = (const __CFNumber *)CFDictionaryGetValue(v526, (const void *)*MEMORY[0x263F04240]);
        if (!v527)
        {
          v643 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v643 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v643;
          }
          if (os_log_type_enabled(v643, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputConfigurations(v643, v644, v645, v646, v647, v648, v649, v650);
          }
          goto LABEL_992;
        }
        CFNumberGetValue(v527, kCFNumberSInt32Type, v1086);
        int v523 = *(_DWORD *)valuePtr;
        if (*(_DWORD *)v1086 < *(_DWORD *)valuePtr)
        {
          v528 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v528 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v528;
          }
          if (!os_log_type_enabled(v528, OS_LOG_TYPE_ERROR)) {
            goto LABEL_992;
          }
          goto LABEL_1018;
        }
      }
      else
      {
        v559 = *(void **)(a2 + 136);
        if (v559)
        {
          uint64_t v560 = H16ISP::H16ISPFrameReceiver::getBufferPool(v559, 6);
          int v523 = *(_DWORD *)valuePtr;
          if (v560)
          {
            if (*(_DWORD *)(v560 + 24) < *(_DWORD *)valuePtr)
            {
              v561 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v561 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v561;
              }
              if (!os_log_type_enabled(v561, OS_LOG_TYPE_ERROR)) {
                goto LABEL_992;
              }
LABEL_1018:
              SetVideoOutputConfigurations();
              goto LABEL_992;
            }
          }
        }
      }
    }
    DWORD1(v1042) = v523;
  }
  if (!v347) {
    goto LABEL_1209;
  }
  *(_DWORD *)int valuePtr = 0;
  CFNumberGetValue(v347, kCFNumberSInt32Type, valuePtr);
  int v562 = *(_DWORD *)valuePtr;
  if (*((double *)&v1044 + 1) != (double)*(int *)valuePtr)
  {
    v563 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v563 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v563;
    }
    if (os_log_type_enabled(v563, OS_LOG_TYPE_ERROR)) {
      SetVideoOutputConfigurations();
    }
    goto LABEL_992;
  }
  if (*v963)
  {
    v564 = *(__CVPixelBufferPool **)(a2 + 1224);
    if (!v564)
    {
      v593 = *(void **)(a2 + 136);
      if (v593)
      {
        uint64_t v594 = H16ISP::H16ISPFrameReceiver::getBufferPool(v593, 6);
        int v562 = *(_DWORD *)valuePtr;
        if (v594)
        {
          if (*(_DWORD *)(v594 + 28) < *(_DWORD *)valuePtr)
          {
            v595 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v595 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v595;
            }
            if (!os_log_type_enabled(v595, OS_LOG_TYPE_ERROR)) {
              goto LABEL_992;
            }
LABEL_1119:
            SetVideoOutputConfigurations();
            goto LABEL_992;
          }
        }
      }
      goto LABEL_1208;
    }
    *(_DWORD *)v1086 = 0;
    CFDictionaryRef v565 = CVPixelBufferPoolGetPixelBufferAttributes(v564);
    if (v565)
    {
      CFNumberRef v566 = (const __CFNumber *)CFDictionaryGetValue(v565, (const void *)*MEMORY[0x263F04118]);
      if (!v566)
      {
        v662 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v662 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v662;
        }
        if (os_log_type_enabled(v662, OS_LOG_TYPE_ERROR)) {
          SetVideoOutputConfigurations(v662, v663, v664, v665, v666, v667, v668, v669);
        }
        goto LABEL_992;
      }
      CFNumberGetValue(v566, kCFNumberSInt32Type, v1086);
      int v562 = *(_DWORD *)valuePtr;
      if (*(_DWORD *)v1086 < *(_DWORD *)valuePtr)
      {
        v567 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v567 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v567;
        }
        if (!os_log_type_enabled(v567, OS_LOG_TYPE_ERROR)) {
          goto LABEL_992;
        }
        goto LABEL_1119;
      }
      goto LABEL_1208;
    }
    v584 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v584 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v584;
    }
    if (!os_log_type_enabled(v584, OS_LOG_TYPE_ERROR)) {
      goto LABEL_992;
    }
LABEL_1184:
    SetVideoOutputConfigurations(v584, v585, v586, v587, v588, v589, v590, v591);
    goto LABEL_992;
  }
LABEL_1208:
  DWORD2(v1042) = v562;
LABEL_1209:
  if (v972)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v972, kCFNumberSInt32Type, v1086);
    if (*v963)
    {
      v596 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v596 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v596;
      }
      if (!os_log_type_enabled(v596, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1424;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v597 = "%s - Cannot change Retained Buffer Count while streaming\n";
      goto LABEL_1422;
    }
    LODWORD(v1045) = *(_DWORD *)v1086;
  }
  if (v906)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v906, kCFNumberSInt32Type, v1086);
    if (*v963)
    {
      v596 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v596 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v596;
      }
      if (!os_log_type_enabled(v596, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1424;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v597 = "%s - Cannot change Buffer Cache Mode while streaming\n";
      goto LABEL_1422;
    }
    DWORD1(v1045) = *(_DWORD *)v1086;
  }
  if (v899)
  {
    int v598 = CFEqual(v899, (CFTypeRef)*MEMORY[0x263EFFB40]);
    if (*v963)
    {
      v596 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v596 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v596;
      }
      if (!os_log_type_enabled(v596, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1424;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v597 = "%s - Cannot change Attach Raw while streaming\n";
      goto LABEL_1422;
    }
    BYTE8(v1045) = v598 != 0;
  }
  if (cf1c)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(cf1c, kCFNumberFloatType, v1086);
    if (*v963)
    {
      v596 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v596 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v596;
      }
      if (!os_log_type_enabled(v596, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1424;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v597 = "%s - Cannot change Max Output Framerate while output is active\n";
      goto LABEL_1422;
    }
    if (*(float *)v1086 > *(float *)(a2 + 52))
    {
      v653 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v653 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v653;
      }
      if (!os_log_type_enabled(v653, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1424;
      }
      double v654 = *(float *)(a2 + 52);
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 2048;
      *(double *)&valuePtr[14] = v654;
      v597 = "%s - Cannot be greater than streaming max framerate %.3f\n";
      v655 = v653;
      uint32_t v656 = 22;
      goto LABEL_1423;
    }
    DWORD2(v1049) = *(_DWORD *)v1086;
  }
  if (!v886) {
    goto LABEL_1432;
  }
  if (*v963)
  {
    v596 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v596 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v596;
    }
    if (!os_log_type_enabled(v596, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_1424;
    }
    *(_DWORD *)int valuePtr = 136315138;
    *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
    v597 = "%s - Cannot change Client Buffer Pool while streaming\n";
    goto LABEL_1422;
  }
  if ((void)v1050)
  {
    CVPixelBufferPoolRelease((CVPixelBufferPoolRef)v1050);
    *(void *)&long long v1050 = 0;
  }
  for (uint64_t k = 0; k != 32; k += 8)
  {
    v683 = *(__CVBuffer **)((char *)&v1050 + k + 8);
    if (v683)
    {
      CVPixelBufferRelease(v683);
      *(void *)((char *)&v1050 + k + 8) = 0;
    }
  }
  if (!CFEqual(v886, (CFTypeRef)*MEMORY[0x263EFFD08]))
  {
    CFDictionaryRef v707 = CVPixelBufferPoolGetPixelBufferAttributes(v886);
    if (!v707)
    {
      v729 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v729 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v729;
      }
      if (os_log_type_enabled(v729, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations(v729, v730, v731, v732, v733, v734, v735, v736);
      }
      goto LABEL_1424;
    }
    CFDictionaryRef v708 = v707;
    *(_DWORD *)v1086 = 0;
    unsigned int v979 = 0;
    CFNumberRef v709 = (const __CFNumber *)CFDictionaryGetValue(v707, (const void *)*MEMORY[0x263F04240]);
    CFNumberGetValue(v709, kCFNumberIntType, v1086);
    CFNumberRef v710 = (const __CFNumber *)CFDictionaryGetValue(v708, (const void *)*MEMORY[0x263F04118]);
    CFNumberGetValue(v710, kCFNumberIntType, &v979);
    if (*(_DWORD *)v1086 < DWORD1(v1042) || v979 < DWORD2(v1042))
    {
      v711 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v711 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v711;
      }
      if (os_log_type_enabled(v711, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int valuePtr = 136316162;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = v979;
        *(_WORD *)&valuePtr[24] = 1024;
        *(_DWORD *)&valuePtr[26] = DWORD1(v1042);
        *(_WORD *)&valuePtr[30] = 1024;
        *(_DWORD *)&valuePtr[32] = DWORD2(v1042);
        _os_log_error_impl(&dword_24680F000, v711, OS_LOG_TYPE_ERROR, "%s - IntermediateTap ClientBufferPool %dx%d is smaller than OutputSize %dx%d\n", valuePtr, 0x24u);
      }
      goto LABEL_1424;
    }
    *(void *)&long long v1050 = CVPixelBufferPoolRetain(v886);
    int v747 = CVPixelBufferPoolGetMinBufferCount();
    int v748 = dword_26B11BA34;
    if (!dword_26B11BA34)
    {
      unsigned int v749 = *(_DWORD *)(a2 + 48);
      unsigned int v750 = *(_DWORD *)(a2 + 168);
      if (v749 < v750) {
        unsigned int v750 = 0;
      }
      int v748 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v749 - v750) + 116);
    }
    int v751 = v748 - *(_DWORD *)(a2 + 68);
    LODWORD(v1045) = ~v751 + v747;
    if ((int)v1045 < 0)
    {
      v596 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v596 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v596;
      }
      if (!os_log_type_enabled(v596, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1424;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v597 = "%s - Not enough buffers in client pool\n";
LABEL_1422:
      v655 = v596;
      uint32_t v656 = 12;
LABEL_1423:
      _os_log_impl(&dword_24680F000, v655, OS_LOG_TYPE_DEFAULT, v597, valuePtr, v656);
LABEL_1424:
      BOOL v969 = 0;
      goto LABEL_993;
    }
    v752 = CVPixelBufferPoolRetain((CVPixelBufferPoolRef)v1050);
    *(_DWORD *)v1086 = 0;
    *(_DWORD *)v1086 = CVPixelBufferPoolGetMinBufferCount();
    CFAllocatorRef v753 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef v754 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v754)
    {
      v755 = v754;
      CFNumberRef v756 = CFNumberCreate(v753, kCFNumberSInt32Type, v1086);
      CFDictionarySetValue(v755, (const void *)*MEMORY[0x263F041A8], v756);
      CFRelease(v756);
      CFNumberRef v974 = (CFNumberRef)(int)fmin((double)v751, 4.0);
      if ((int)v974 >= 1)
      {
        v757 = (void *)&v1050 + 1;
        CFNumberRef v758 = v974;
        do
        {
          *(void *)int valuePtr = 0;
          CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(v753, v752, v755, (CVPixelBufferRef *)valuePtr);
          *v757++ = *(void *)valuePtr;
          CFNumberRef v758 = (CFNumberRef)((char *)v758 - 1);
        }
        while (v758);
      }
      BOOL v969 = (int)v974 > 0;
      CFRelease(v755);
    }
    else
    {
      BOOL v969 = 0;
    }
    CVPixelBufferPoolRelease(v752);
  }
  else
  {
LABEL_1432:
    BOOL v969 = 0;
  }
  if (v880)
  {
    int v684 = CFEqual(v880, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    BYTE4(v1049) = v684;
    if (*(void *)(a2 + 136))
    {
      if (*(unsigned __int8 *)(a2 + 1212) != v684)
      {
        v414 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v414 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v414;
        }
        if (!os_log_type_enabled(v414, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_762;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v415 = "%s - Cannot change Face Tracking Enable while streaming\n";
        goto LABEL_761;
      }
    }
  }
  if (v874)
  {
    int v685 = CFEqual(v874, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    BYTE5(v1049) = v685;
    if (*(void *)(a2 + 136))
    {
      if (*(unsigned __int8 *)(a2 + 1213) != v685)
      {
        v414 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v414 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v414;
        }
        if (!os_log_type_enabled(v414, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_762;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v415 = "%s - Cannot change Segmentation Enable while streaming\n";
        goto LABEL_761;
      }
    }
  }
  BOOL v957 = numberc != 0;
  LODWORD(v91) = theDict;
LABEL_70:
  CFDictionaryRef v104 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E930]);
  if (!v104 || (CFDictionaryRef v105 = v104, v106 = CFGetTypeID(v104), v106 != CFDictionaryGetTypeID()))
  {
    int theDict = (int)v91;
    int v108 = 0;
    goto LABEL_81;
  }
  if (CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E9B8])
    || CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E888])
    || CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E8B0])
    || CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E8A8]))
  {
    int v107 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v107 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v107;
    }
    BOOL v95 = v922;
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      _os_log_impl(&dword_24680F000, v107, OS_LOG_TYPE_DEFAULT, "%s - Invalid property for still image\n", valuePtr, 0xCu);
    }
    goto LABEL_104;
  }
  int theDict = (int)v91;
  CFNumberRef v158 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E850]);
  CFNumberRef v159 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E898]);
  CFNumberRef v160 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E8D0]);
  CFNumberRef number = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E880]);
  CFDictionaryRef v161 = (const __CFDictionary *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E858]);
  CFNumberRef v896 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E8A0]);
  CFNumberRef v903 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E820]);
  CFTypeRef cf1 = CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E818]);
  CFTypeRef v869 = CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E540]);
  CFNumberRef v872 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E538]);
  CFNumberRef v877 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E520]);
  CFTypeRef v883 = CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E550]);
  CFNumberRef v866 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E558]);
  CFNumberRef pool = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E548]);
  BOOLeauint64_t n = (const __CFBoolean *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E518]);
  v858 = (__CVPixelBufferPool *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E828]);
  CFTypeRef v856 = CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E870]);
  CFTypeRef v854 = CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E8B8]);
  CFTypeRef v852 = CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E560]);
  CFNumberRef v851 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E528]);
  CFTypeRef v850 = CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E568]);
  CFTypeRef v849 = CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E9B0]);
  CFNumberRef v848 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E878]);
  char v162 = CFDictionaryGetValue(v105, (const void *)*MEMORY[0x263F2E530]);
  if (v158)
  {
    *(void *)int valuePtr = 0;
    CFNumberGetValue(v158, kCFNumberLongLongType, valuePtr);
    *((void *)&v1028 + 1) = *(void *)valuePtr;
  }
  if (v159)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v159, kCFNumberSInt32Type, v1086);
    if (*v968)
    {
      uint64_t v163 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v163 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v163;
      }
      if (!os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_252;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      unsigned int v164 = "%s - Cannot change Pixel Format while streaming\n";
      goto LABEL_250;
    }
    int v247 = *(_DWORD *)v1086;
    if (*(unsigned char *)(a2 + 3784))
    {
      if (*(_DWORD *)v1086 == 1278226736 || *(_DWORD *)v1086 == 1278226742) {
        goto LABEL_371;
      }
      int v248 = *(_DWORD *)SupportedOutputFormatsStillImage;
      if (*(_DWORD *)SupportedOutputFormatsStillImage)
      {
        char v249 = 0;
        uint64_t v250 = &SupportedOutputFormatsStillImage[4];
        do
        {
          v249 |= v248 == *(_DWORD *)v1086;
          int v251 = *(_DWORD *)v250;
          v250 += 4;
          int v248 = v251;
        }
        while (v251);
        if (v249)
        {
          int v247 = 1278226742;
LABEL_371:
          LODWORD(v1029) = v247;
          goto LABEL_372;
        }
      }
      uint64_t v274 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v274 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v274;
      }
      if (!os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_252;
      }
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
      unsigned int v164 = "%s - Selected IR pixel format not supported 0x%08X\n";
    }
    else
    {
      int v258 = *(_DWORD *)SupportedOutputFormatsStillImage;
      if (*(_DWORD *)SupportedOutputFormatsStillImage)
      {
        char v259 = 0;
        uint64_t v260 = &SupportedOutputFormatsStillImage[4];
        do
        {
          v259 |= v258 == *(_DWORD *)v1086;
          int v261 = *(_DWORD *)v260;
          v260 += 4;
          int v258 = v261;
        }
        while (v261);
        if (v259) {
          goto LABEL_371;
        }
      }
      uint64_t v274 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v274 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v274;
      }
      if (!os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_252;
      }
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
      unsigned int v164 = "%s - Selected pixel format not supported 0x%08X\n";
    }
    CFMutableDictionaryRef v165 = v274;
    uint32_t v166 = 18;
    goto LABEL_251;
  }
LABEL_372:
  if (v161)
  {
    if (!CGRectMakeWithDictionaryRepresentation(v161, (CGRect *)valuePtr))
    {
      uint64_t v269 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v269 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v269;
      }
      if (!os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_434;
      }
      *(_DWORD *)v1086 = 136315138;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      uint64_t v270 = "%s - Failed to read Crop Rect\n";
      uint64_t v271 = v1086;
LABEL_380:
      uint64_t v272 = v269;
      uint32_t v273 = 12;
      goto LABEL_433;
    }
    unsigned int v262 = *(double *)valuePtr;
    unsigned int v263 = *(double *)&valuePtr[16];
    uint64_t v264 = *(void *)(a2 + 160);
    if (*(unsigned char *)(v264 + 120 * v11 + 64))
    {
      uint64_t v265 = v264 + 120 * v11;
      unsigned int v266 = *(_DWORD *)(v265 + 68);
      unsigned int v847 = *(_DWORD *)(v265 + 72);
      int v267 = *(double *)valuePtr;
      int v268 = *(double *)&valuePtr[16];
    }
    else
    {
      unsigned int v266 = v984;
      unsigned int v847 = HIDWORD(v984);
      if (v983) {
        int v267 = 2 * v262;
      }
      else {
        int v267 = *(double *)valuePtr;
      }
      if (v983) {
        int v268 = 2 * v263;
      }
      else {
        int v268 = *(double *)&valuePtr[16];
      }
    }
    if (v268 + v267 > v266)
    {
      uint64_t v275 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v275 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v275;
      }
      if (!os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_434;
      }
      *(_DWORD *)v1086 = 136315906;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      LOWORD(v1087) = 1024;
      *(_DWORD *)((char *)&v1087 + 2) = v267;
      HIWORD(v1087) = 1024;
      unsigned int v1088 = v268;
      LOWORD(v1089[0]) = 1024;
      *(_DWORD *)((char *)v1089 + 2) = v266;
      uint64_t v270 = "%s - Invalid crop x(%d)/width(%d) for selected output width %d\n";
      uint64_t v271 = v1086;
      uint64_t v272 = v275;
      uint32_t v273 = 30;
LABEL_433:
      _os_log_impl(&dword_24680F000, v272, OS_LOG_TYPE_DEFAULT, v270, v271, v273);
LABEL_434:
      int v108 = 0;
LABEL_2177:
      uint64_t v20 = 4294954516;
      goto LABEL_2178;
    }
    if (*(double *)&valuePtr[8] + *(double *)&valuePtr[24] > (double)v847)
    {
      uint64_t v276 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v276 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v276;
      }
      if (!os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_434;
      }
      *(_DWORD *)v1086 = 136315394;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      LOWORD(v1087) = 1024;
      *(_DWORD *)((char *)&v1087 + 2) = v847;
      uint64_t v270 = "%s - Invalid crop y/height for selected output height %d\n";
      goto LABEL_432;
    }
    if ((v262 & 1) != 0
      || (*(double *)&valuePtr[8] & 1) != 0
      || v263 % v1092
      || (*(double *)&valuePtr[24] & 1) != 0)
    {
      uint64_t v276 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v276 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v276;
      }
      if (!os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_434;
      }
      *(_DWORD *)v1086 = 136315394;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      LOWORD(v1087) = 1024;
      *(_DWORD *)((char *)&v1087 + 2) = v1092;
      uint64_t v270 = "%s - Invalid crop params, must be divisible by 2 (width by %d)\n";
LABEL_432:
      uint64_t v271 = v1086;
      uint64_t v272 = v276;
      uint32_t v273 = 18;
      goto LABEL_433;
    }
    long long v1030 = *(_OWORD *)valuePtr;
    long long v1031 = *(_OWORD *)&valuePtr[16];
  }
  if (v160)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v160, kCFNumberSInt32Type, valuePtr);
    if (*(double *)&v1031 < (double)*(int *)valuePtr || *(double *)&v1031 * 0.25 > (double)*(int *)valuePtr)
    {
      uint64_t v285 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v285 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v285;
      }
      if (os_log_type_enabled(v285, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations((uint64_t)valuePtr, (uint64_t)&v1031);
      }
      goto LABEL_434;
    }
    if (*(_DWORD *)valuePtr % v1093)
    {
      uint64_t v286 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v286 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v286;
      }
      if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations(v286, v287, v288, v289, v290, v291, v292, v293);
      }
      goto LABEL_434;
    }
    DWORD1(v1029) = *(_DWORD *)valuePtr;
  }
  if (number)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(number, kCFNumberSInt32Type, valuePtr);
    if (*((double *)&v1031 + 1) < (double)*(int *)valuePtr || *((double *)&v1031 + 1) * 0.25 > (double)*(int *)valuePtr)
    {
      int v300 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v300 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v300;
      }
      if (os_log_type_enabled(v300, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations((uint64_t)valuePtr, (uint64_t)&v1031 + 8);
      }
      goto LABEL_434;
    }
    if (valuePtr[0])
    {
      CVBufferRef v301 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CVBufferRef v301 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v301;
      }
      if (os_log_type_enabled(v301, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations(v301, v302, v303, v304, v305, v306, v307, v308);
      }
      goto LABEL_434;
    }
    DWORD2(v1029) = *(_DWORD *)valuePtr;
  }
  if (v896)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v896, kCFNumberSInt32Type, valuePtr);
    LODWORD(v1032) = *(_DWORD *)valuePtr;
  }
  if (v903)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v903, kCFNumberSInt32Type, v1086);
    if (*v968)
    {
      uint64_t v269 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v269 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v269;
      }
      if (!os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_434;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      uint64_t v270 = "%s - Cannot change Buffer Cache Mode while streaming\n";
      uint64_t v271 = valuePtr;
      goto LABEL_380;
    }
    DWORD1(v1032) = *(_DWORD *)v1086;
  }
  if (cf1)
  {
    int v309 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x263EFFB40]);
    if (*v968)
    {
      uint64_t v163 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v163 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v163;
      }
      if (!os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_434;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      unsigned int v164 = "%s - Cannot change Attach Raw while streaming\n";
LABEL_250:
      CFMutableDictionaryRef v165 = v163;
      uint32_t v166 = 12;
LABEL_251:
      _os_log_impl(&dword_24680F000, v165, OS_LOG_TYPE_DEFAULT, v164, valuePtr, v166);
LABEL_252:
      int v108 = 0;
LABEL_1955:
      uint64_t v20 = 4294954516;
      goto LABEL_2178;
    }
    BYTE8(v1032) = v309 != 0;
  }
  if (v162)
  {
    int v332 = CFEqual(v162, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    if (*(unsigned __int8 *)(a2 + 1353) != v332)
    {
      if (*(void *)(a2 + 136))
      {
        CVBufferRef v335 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CVBufferRef v335 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v335;
        }
        if (os_log_type_enabled(v335, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          long long v336 = "%s - Cannot change Attach Thumbnail Raw while streaming\n";
LABEL_588:
          _os_log_impl(&dword_24680F000, v335, OS_LOG_TYPE_DEFAULT, v336, valuePtr, 0xCu);
          int v108 = 0;
LABEL_589:
          uint64_t v20 = 4294954612;
LABEL_2178:
          LODWORD(v91) = theDict;
          goto LABEL_1611;
        }
        goto LABEL_615;
      }
      if (*v968)
      {
        uint64_t v163 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v163 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v163;
        }
        if (!os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_434;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        unsigned int v164 = "%s - Cannot change Attach Thumbnail Raw while output is enabled\n";
        goto LABEL_250;
      }
    }
    BYTE9(v1032) = v332;
  }
  if (v869) {
    BYTE8(v1035) = CFEqual(v869, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  if (v872)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v872, kCFNumberSInt32Type, valuePtr);
    HIDWORD(v1035) = *(_DWORD *)valuePtr;
  }
  if (v877)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v877, kCFNumberSInt32Type, valuePtr);
    LODWORD(v1036) = *(_DWORD *)valuePtr;
  }
  if (v883)
  {
    int v333 = CFEqual(v883, (CFTypeRef)*MEMORY[0x263EFFB40]);
    if (*v968)
    {
      uint64_t v163 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v163 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v163;
      }
      if (!os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_434;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      unsigned int v164 = "%s - Cannot change Time Machine Enable while streaming\n";
      goto LABEL_250;
    }
    if (*(void *)(a2 + 136))
    {
      int v352 = v333 != 0;
      if (*(unsigned __int8 *)(a2 + 1364) != v352)
      {
        CVBufferRef v335 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CVBufferRef v335 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v335;
        }
        if (os_log_type_enabled(v335, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          long long v336 = "%s - Cannot change Time Machine Enable while streaming\n";
          goto LABEL_588;
        }
LABEL_615:
        int v108 = 0;
LABEL_616:
        uint64_t v20 = 4294954612;
        goto LABEL_2178;
      }
    }
    else
    {
      LOBYTE(v352) = v333 != 0;
    }
    BYTE4(v103mach_timebase_info(this + 3) = v352;
  }
  if (v866)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v866, kCFNumberSInt32Type, v1086);
    if (*v968)
    {
      v375 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v375 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v375;
      }
      if (os_log_type_enabled(v375, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        _os_log_impl(&dword_24680F000, v375, OS_LOG_TYPE_DEFAULT, "%s - Cannot change Time Machine Ring Buffer Capacity while streaming\n", valuePtr, 0xCu);
      }
      goto LABEL_993;
    }
    if (!*(void *)(a2 + 136) || *(_DWORD *)v1086 == *(_DWORD *)(a2 + 1368))
    {
      DWORD2(v103mach_timebase_info(this + 3) = *(_DWORD *)v1086;
      int v108 = 1;
      goto LABEL_659;
    }
    v414 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v414 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v414;
    }
    if (!os_log_type_enabled(v414, OS_LOG_TYPE_DEFAULT))
    {
LABEL_762:
      uint64_t v20 = 4294954612;
      goto LABEL_676;
    }
    *(_DWORD *)int valuePtr = 136315138;
    *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
    v415 = "%s - Cannot change Time Machine Ring Buffer Capacity while streaming\n";
LABEL_761:
    _os_log_impl(&dword_24680F000, v414, OS_LOG_TYPE_DEFAULT, v415, valuePtr, 0xCu);
    goto LABEL_762;
  }
  int v108 = 0;
LABEL_659:
  if (pool)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(pool, kCFNumberSInt32Type, v1086);
    if (*v968)
    {
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Cannot change Time Machine Buffer Replacement Scheme while streaming\n";
      goto LABEL_1808;
    }
    if (*(_DWORD *)v1086 >= 2u)
    {
      *(_DWORD *)v1086 = -1;
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Not a recognized buffer replacement scheme\n";
      goto LABEL_1808;
    }
    HIDWORD(v103mach_timebase_info(this + 3) = *(_DWORD *)v1086;
    int v108 = 1;
  }
  if (BOOLean)
  {
    int v388 = CFBooleanGetValue(BOOLean) != 0;
    if (*(unsigned __int8 *)(a2 + 1376) != v388)
    {
      if (*(void *)(a2 + 136))
      {
        v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v410 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
        }
        if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_616;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v411 = "%s - Cannot attach debug pixel buffer while streaming\n";
        goto LABEL_2012;
      }
      if (*v968)
      {
        v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v389 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
        }
        if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v390 = "%s - Cannot attach debug pixel while output is enabled\n";
        goto LABEL_1954;
      }
    }
    LOBYTE(v1034) = v388;
  }
  if (v858)
  {
    if (*v968)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change Client Buffer Pool while streaming\n";
LABEL_1954:
      _os_log_impl(&dword_24680F000, v389, OS_LOG_TYPE_DEFAULT, v390, valuePtr, 0xCu);
      goto LABEL_1955;
    }
    if ((void)v1037)
    {
      CVPixelBufferPoolRelease((CVPixelBufferPoolRef)v1037);
      *(void *)&long long v1037 = 0;
    }
    if (!CFEqual(v858, (CFTypeRef)*MEMORY[0x263EFFD08]))
    {
      CFDictionaryRef v501 = CVPixelBufferPoolGetPixelBufferAttributes(v858);
      if (!v501)
      {
        v548 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v548 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v548;
        }
        if (os_log_type_enabled(v548, OS_LOG_TYPE_ERROR)) {
          SetVideoOutputConfigurations(v548, v549, v550, v551, v552, v553, v554, v555);
        }
        goto LABEL_2177;
      }
      CFDictionaryRef v502 = v501;
      *(_DWORD *)v1086 = 0;
      unsigned int v979 = 0;
      CFNumberRef v503 = (const __CFNumber *)CFDictionaryGetValue(v501, (const void *)*MEMORY[0x263F04240]);
      CFNumberGetValue(v503, kCFNumberIntType, v1086);
      CFNumberRef v504 = (const __CFNumber *)CFDictionaryGetValue(v502, (const void *)*MEMORY[0x263F04118]);
      CFNumberGetValue(v504, kCFNumberIntType, &v979);
      if (*(_DWORD *)v1086 < DWORD1(v1029) || v979 < DWORD2(v1029))
      {
        v505 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v505 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v505;
        }
        if (!os_log_type_enabled(v505, OS_LOG_TYPE_ERROR)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136316162;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = v979;
        *(_WORD *)&valuePtr[24] = 1024;
        *(_DWORD *)&valuePtr[26] = DWORD1(v1029);
        *(_WORD *)&valuePtr[30] = 1024;
        *(_DWORD *)&valuePtr[32] = DWORD2(v1029);
        v506 = "%s - StillImage ClientBufferPool %dx%d is smaller than OutputSize %dx%d\n";
        goto LABEL_939;
      }
      *(void *)&long long v1037 = CVPixelBufferPoolRetain(v858);
      LODWORD(v1032) = CVPixelBufferPoolGetMinBufferCount();
      if ((int)v1032 <= 0)
      {
        v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v389 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
        }
        if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v390 = "%s - Not enough buffers in client pool\n";
        goto LABEL_1954;
      }
    }
  }
  if (v856)
  {
    if (*v968)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change Face Tracking Enable while streaming\n";
      goto LABEL_1954;
    }
    if (*(void *)(a2 + 136))
    {
      v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v410 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
      }
      if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_616;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v411 = "%s - Cannot change Face Tracking Enable while streaming\n";
LABEL_2012:
      _os_log_impl(&dword_24680F000, v410, OS_LOG_TYPE_DEFAULT, v411, valuePtr, 0xCu);
      goto LABEL_589;
    }
    BYTE4(v1036) = CFEqual(v856, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  if (v854)
  {
    if (*v968)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change Segmentation Enable while streaming\n";
      goto LABEL_1954;
    }
    if (*(void *)(a2 + 136))
    {
      v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v410 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
      }
      if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_616;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v411 = "%s - Cannot change Segmentation Enable while streaming\n";
      goto LABEL_2012;
    }
    BYTE5(v1036) = CFEqual(v854, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  if (v852)
  {
    int v568 = CFEqual(v852, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    if (*v968)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change Time Machine SIFR Enable while output is enabled\n";
      goto LABEL_1954;
    }
    if (*(void *)(a2 + 136) && *(unsigned __int8 *)(a2 + 1464) != v568)
    {
      v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v410 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
      }
      if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_616;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v411 = "%s - Cannot change Time Machine SIFR Enable while streaming\n";
      goto LABEL_2012;
    }
    BYTE8(v1039) = v568;
  }
  if (v851)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v851, kCFNumberSInt32Type, v1086);
    if (*v968)
    {
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Cannot change maximum bracket SIFR count while output is enabled\n";
      goto LABEL_1808;
    }
    if (*(void *)(a2 + 136) && *(_DWORD *)(a2 + 1468) != *(_DWORD *)v1086)
    {
      v679 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v679 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v679;
      }
      if (!os_log_type_enabled(v679, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_616;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v680 = "%s - Cannot change maximum bracket SIFR count while output is enabled\n";
      goto LABEL_1455;
    }
    HIDWORD(v1039) = *(_DWORD *)v1086;
  }
  if (v850)
  {
    if (*v968 || *v966)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change YCbCrMatrix while streaming\n";
      goto LABEL_1954;
    }
    if (CFEqual(v850, (CFTypeRef)*MEMORY[0x263F04038]))
    {
      int v686 = 1;
    }
    else if (CFEqual(v850, (CFTypeRef)*MEMORY[0x263F04050]))
    {
      int v686 = 2;
    }
    else
    {
      if (!CFEqual(v850, (CFTypeRef)*MEMORY[0x263EFFD08]))
      {
        v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v389 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
        }
        if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v390 = "%s - Unrecognized still YCbCrMatrix\n";
        goto LABEL_1954;
      }
      int v686 = 0;
    }
    *(_DWORD *)(a2 + 152) = v686;
  }
  if (v849)
  {
    int v737 = CFEqual(v849, (CFTypeRef)*MEMORY[0x263EFFB40]);
    if (*v968)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change GDC Enable while streaming\n";
      goto LABEL_1954;
    }
    BYTE11(v1032) = v737 != 0;
  }
  if (v848)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v848, kCFNumberFloat32Type, valuePtr);
    if (*v968) {
      goto LABEL_2177;
    }
    HIDWORD(v1032) = *(_DWORD *)valuePtr;
  }
LABEL_81:
  CFDictionaryRef v109 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E938]);
  BOOL v95 = v922;
  if (!v109) {
    goto LABEL_1585;
  }
  CFDictionaryRef v110 = v109;
  CFTypeID v111 = CFGetTypeID(v109);
  if (v111 != CFDictionaryGetTypeID()) {
    goto LABEL_1585;
  }
  if (CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E9B8])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E8D0])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E880])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E858])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E888])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E870])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E8B8])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E9B0])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E8B0])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E878])
    || CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E8A8]))
  {
    CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
    }
    LODWORD(v91) = theDict;
    if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_105;
    }
    *(_DWORD *)int valuePtr = 136315138;
    *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
    CFNumberRef v113 = "%s - Invalid property for still image intermediate tap\n";
    goto LABEL_2171;
  }
  CFNumberRef v406 = (const __CFNumber *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E850]);
  CFNumberRef v407 = (const __CFNumber *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E898]);
  CFNumberRef v408 = (const __CFNumber *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E8A0]);
  CFNumberRef v409 = (const __CFNumber *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E820]);
  CFNumberRef numberd = (CFNumberRef)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E818]);
  CFNumberRef v881 = (CFNumberRef)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E540]);
  CFNumberRef v887 = (const __CFNumber *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E538]);
  CFNumberRef cf1d = (const __CFNumber *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E520]);
  CFNumberRef v900 = (CFNumberRef)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E550]);
  CFNumberRef v875 = (const __CFNumber *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E558]);
  CFNumberRef v870 = (const __CFNumber *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E548]);
  CFBooleanRef v867 = (const __CFBoolean *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E518]);
  poola = (__CVPixelBufferPool *)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E828]);
  CFBooleanRef BOOLeana = (CFBooleanRef)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E568]);
  CFNumberRef v907 = (CFNumberRef)CFDictionaryGetValue(v110, (const void *)*MEMORY[0x263F2E530]);
  if (v406)
  {
    *(void *)int valuePtr = 0;
    CFNumberGetValue(v406, kCFNumberLongLongType, valuePtr);
    *((void *)&v1015 + 1) = *(void *)valuePtr;
  }
  if (v407)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v407, kCFNumberSInt32Type, v1086);
    if (*v966)
    {
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Cannot change Pixel Format while streaming\n";
      goto LABEL_1808;
    }
    int v474 = *(_DWORD *)SupportedOutputFormatsStillImageIntermediateTap;
    if (!*(_DWORD *)SupportedOutputFormatsStillImageIntermediateTap) {
      goto LABEL_980;
    }
    char v475 = 0;
    v476 = &SupportedOutputFormatsStillImageIntermediateTap[4];
    do
    {
      v475 |= v474 == *(_DWORD *)v1086;
      int v477 = *(_DWORD *)v476;
      v476 += 4;
      int v474 = v477;
    }
    while (v477);
    if ((v475 & 1) == 0)
    {
LABEL_980:
      v514 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v514 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v514;
      }
      if (!os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      goto LABEL_1772;
    }
    LODWORD(v1016) = *(_DWORD *)v1086;
  }
  if (v408)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v408, kCFNumberSInt32Type, valuePtr);
    LODWORD(v1019) = *(_DWORD *)valuePtr;
  }
  if (v409)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v409, kCFNumberSInt32Type, v1086);
    if (*v966)
    {
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Cannot change Buffer Cache Mode while streaming\n";
      goto LABEL_1808;
    }
    DWORD1(v1019) = *(_DWORD *)v1086;
  }
  if (numberd)
  {
    int v539 = CFEqual(numberd, (CFTypeRef)*MEMORY[0x263EFFB40]);
    if (*v966)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change Attach Raw while streaming\n";
      goto LABEL_1954;
    }
    BYTE8(v1019) = v539 != 0;
  }
  if (v907)
  {
    int v556 = CFEqual(v907, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    if (*(unsigned __int8 *)(a2 + 1553) != v556)
    {
      if (*(void *)(a2 + 136))
      {
        v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v410 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
        }
        if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_616;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v411 = "%s - Cannot change Attach Thumbnail Raw while streaming\n";
        goto LABEL_2012;
      }
      if (*v966)
      {
        v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v389 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
        }
        if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v390 = "%s - Cannot change Attach Thumbnail Raw while output is enabled\n";
        goto LABEL_1954;
      }
    }
    BYTE9(v1019) = v556;
  }
  if (v881) {
    BYTE8(v1022) = CFEqual(v881, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  if (v887)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(v887, kCFNumberSInt32Type, valuePtr);
    HIDWORD(v1022) = *(_DWORD *)valuePtr;
  }
  if (cf1d)
  {
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue(cf1d, kCFNumberSInt32Type, valuePtr);
    LODWORD(v102mach_timebase_info(this + 3) = *(_DWORD *)valuePtr;
  }
  if (v900)
  {
    int v557 = CFEqual(v900, (CFTypeRef)*MEMORY[0x263EFFB40]);
    if (*v966)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change Time Machine Enable while streaming\n";
      goto LABEL_1954;
    }
    if (*(void *)(a2 + 136))
    {
      int v592 = v557 != 0;
      if (*(unsigned __int8 *)(a2 + 1564) != v592)
      {
        v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v410 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
        }
        if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_616;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v411 = "%s - Cannot change Time Machine Enable while streaming\n";
        goto LABEL_2012;
      }
    }
    else
    {
      LOBYTE(v592) = v557 != 0;
    }
    BYTE4(v102pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v592;
  }
  if (v875)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v875, kCFNumberSInt32Type, v1086);
    if (*v966)
    {
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Cannot change Time Machine Ring Buffer Capacity while streaming\n";
      goto LABEL_1808;
    }
    if (*(void *)(a2 + 136) && *(_DWORD *)v1086 != *(_DWORD *)(a2 + 1568))
    {
      v679 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v679 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v679;
      }
      if (!os_log_type_enabled(v679, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_616;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v680 = "%s - Cannot change Time Machine Ring Buffer Capacity while streaming\n";
      goto LABEL_1455;
    }
    DWORD2(v102pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)v1086;
    int v108 = 1;
  }
  if (v870)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v870, kCFNumberSInt32Type, v1086);
    if (*v966)
    {
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Cannot change Time Machine Buffer Replacement Scheme while streaming\n";
      goto LABEL_1808;
    }
    if (*(_DWORD *)v1086 >= 2u)
    {
      *(_DWORD *)v1086 = -1;
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Not a recognized buffer replacement scheme\n";
      goto LABEL_1808;
    }
    HIDWORD(v102pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)v1086;
    int v108 = 1;
  }
  if (v867)
  {
    int v681 = CFBooleanGetValue(v867) != 0;
    if (*(unsigned __int8 *)(a2 + 1576) != v681)
    {
      if (*(void *)(a2 + 136))
      {
        v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v410 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
        }
        if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_616;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v411 = "%s - Cannot attach debug pixel buffer while streaming\n";
        goto LABEL_2012;
      }
      if (*v966)
      {
        v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v389 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
        }
        if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v390 = "%s - Cannot attach debug pixel while output is enabled\n";
        goto LABEL_1954;
      }
    }
    LOBYTE(v1021) = v681;
  }
  if (poola)
  {
    if (*v966)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change Client Buffer Pool while streaming\n";
      goto LABEL_1954;
    }
    if (*(void *)(a2 + 1624))
    {
      CVPixelBufferPoolRelease((CVPixelBufferPoolRef)v1024);
      *(void *)&long long v1024 = 0;
    }
    if (!CFEqual(poola, (CFTypeRef)*MEMORY[0x263EFFD08]))
    {
      CFDictionaryRef v724 = CVPixelBufferPoolGetPixelBufferAttributes(poola);
      if (!v724)
      {
        v739 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v739 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v739;
        }
        if (os_log_type_enabled(v739, OS_LOG_TYPE_ERROR)) {
          SetVideoOutputConfigurations(v739, v740, v741, v742, v743, v744, v745, v746);
        }
        goto LABEL_2177;
      }
      CFDictionaryRef v725 = v724;
      *(_DWORD *)v1086 = 0;
      unsigned int v979 = 0;
      CFNumberRef v726 = (const __CFNumber *)CFDictionaryGetValue(v724, (const void *)*MEMORY[0x263F04240]);
      CFNumberGetValue(v726, kCFNumberIntType, v1086);
      CFNumberRef v727 = (const __CFNumber *)CFDictionaryGetValue(v725, (const void *)*MEMORY[0x263F04118]);
      CFNumberGetValue(v727, kCFNumberIntType, &v979);
      int v728 = DWORD1(v1016);
      if (*(_DWORD *)v1086 >= DWORD1(v1016) && v979 >= DWORD2(v1016))
      {
        *(void *)&long long v1024 = CVPixelBufferPoolRetain(poola);
        LODWORD(v1019) = CVPixelBufferPoolGetMinBufferCount();
        if ((int)v1019 <= 0)
        {
          v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v389 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
          }
          if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          v390 = "%s - Not enough buffers in client pool\n";
          goto LABEL_1954;
        }
        goto LABEL_1477;
      }
      v505 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v505 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v505;
      }
      if (!os_log_type_enabled(v505, OS_LOG_TYPE_ERROR)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136316162;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
      *(_WORD *)&valuePtr[18] = 1024;
      *(_DWORD *)&valuePtr[20] = v979;
      *(_WORD *)&valuePtr[24] = 1024;
      *(_DWORD *)&valuePtr[26] = v728;
      *(_WORD *)&valuePtr[30] = 1024;
      *(_DWORD *)&valuePtr[32] = DWORD2(v1016);
      v506 = "%s - StillImageIntermediateTap ClientBufferPool %dx%d is smaller than OutputSize %dx%d\n";
LABEL_939:
      _os_log_error_impl(&dword_24680F000, v505, OS_LOG_TYPE_ERROR, v506, valuePtr, 0x24u);
      goto LABEL_2177;
    }
  }
LABEL_1477:
  if (BOOLeana)
  {
    if (*v968 || *v966)
    {
      v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v389 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
      }
      if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      v390 = "%s - Cannot change YCbCrMatrix while streaming\n";
      goto LABEL_1954;
    }
    if (CFEqual(BOOLeana, (CFTypeRef)*MEMORY[0x263F04038]))
    {
      int v738 = 1;
    }
    else if (CFEqual(BOOLeana, (CFTypeRef)*MEMORY[0x263F04050]))
    {
      int v738 = 2;
    }
    else
    {
      if (!CFEqual(BOOLeana, (CFTypeRef)*MEMORY[0x263EFFD08]))
      {
        v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v389 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
        }
        if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v390 = "%s - Unrecognized still YCbCrMatrix\n";
        goto LABEL_1954;
      }
      int v738 = 0;
    }
    *(_DWORD *)(a2 + 152) = v738;
  }
LABEL_1585:
  CFDictionaryRef v759 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E940]);
  LODWORD(v91) = theDict;
  if (v759)
  {
    CFDictionaryRef v760 = v759;
    CFTypeID v761 = CFGetTypeID(v759);
    if (v761 == CFDictionaryGetTypeID())
    {
      if (!ConfigSupportsContextSwitchCaptures(a2, a4, 0, 0))
      {
        uint64_t v20 = 4294954516;
        goto LABEL_1611;
      }
      if (CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E9B8])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E8D0])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E880])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E858])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E818])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E898])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E550])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E558])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E548])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E888])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E870])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E8B8])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E568])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E9B0])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E8B0])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E878])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E8A8])
        || CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E530]))
      {
        CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
        }
        BOOL v95 = v922;
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_105;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        CFNumberRef v113 = "%s - Invalid property for still image quadra\n";
        goto LABEL_2171;
      }
      CFNumberRef v762 = (const __CFNumber *)CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E850]);
      CFNumberRef v763 = (const __CFNumber *)CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E8A0]);
      CFNumberRef v764 = (const __CFNumber *)CFDictionaryGetValue(v760, (const void *)*MEMORY[0x263F2E820]);
      if (v762)
      {
        *(void *)int valuePtr = 0;
        CFNumberGetValue(v762, kCFNumberLongLongType, valuePtr);
        uint64_t v939 = *(void *)valuePtr;
      }
      if (v763)
      {
        *(_DWORD *)int valuePtr = 0;
        CFNumberGetValue(v763, kCFNumberSInt32Type, valuePtr);
        int v938 = *(_DWORD *)valuePtr;
      }
      if (v764)
      {
        *(_DWORD *)v1086 = 0;
        CFNumberGetValue(v764, kCFNumberSInt32Type, v1086);
        if (*(unsigned char *)(a2 + 1680))
        {
          v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v376 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
          }
          if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          v377 = "%s - Cannot change Buffer Cache Mode while streaming\n";
          goto LABEL_1808;
        }
        int v940 = *(_DWORD *)v1086;
      }
      LODWORD(v91) = theDict;
    }
  }
  CFDictionaryRef v765 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E8F8]);
  if (v765)
  {
    CFDictionaryRef v766 = v765;
    CFTypeID v767 = CFGetTypeID(v765);
    if (v767 == CFDictionaryGetTypeID())
    {
      if (CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E898])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E8D0])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E880])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E858])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E820])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E9B8])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E550])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E558])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E548])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E888])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E540])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E870])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E8B8])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E568])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E9B0])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E8B0])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E878])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E8A8])
        || CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E530]))
      {
        CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
        }
        BOOL v95 = v922;
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_105;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        CFNumberRef v113 = "%s - Invalid property for depth output\n";
        goto LABEL_2171;
      }
      int theDict = (int)v91;
      CFNumberRef v768 = (const __CFNumber *)CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E850]);
      CFNumberRef v769 = (const __CFNumber *)CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E8A0]);
      v770 = CFDictionaryGetValue(v766, (const void *)*MEMORY[0x263F2E818]);
      if (v768)
      {
        *(void *)int valuePtr = 0;
        CFNumberGetValue(v768, kCFNumberLongLongType, valuePtr);
        uint64_t v933 = *(void *)valuePtr;
      }
      if (v769)
      {
        *(_DWORD *)v1086 = 0;
        CFNumberGetValue(v769, kCFNumberSInt32Type, v1086);
        if (*(unsigned char *)(a2 + 1880))
        {
          v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v376 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
          }
          if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          v377 = "%s - Cannot change Retained Buffer Count while streaming\n";
          goto LABEL_1808;
        }
        int v936 = *(_DWORD *)v1086;
      }
      if (v770)
      {
        int v771 = CFEqual(v770, (CFTypeRef)*MEMORY[0x263EFFB40]);
        if (*(unsigned char *)(a2 + 1880))
        {
          v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v389 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
          }
          if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          v390 = "%s - Cannot change Attach Raw while streaming\n";
          goto LABEL_1954;
        }
        char v934 = v771 != 0;
      }
      LODWORD(v91) = theDict;
    }
  }
  CFDictionaryRef v772 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E920]);
  if (v772)
  {
    CFDictionaryRef v773 = v772;
    CFTypeID v774 = CFGetTypeID(v772);
    if (v774 == CFDictionaryGetTypeID())
    {
      if (!*(unsigned char *)(a2 + 3784))
      {
        CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
        }
        BOOL v95 = v922;
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_105;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        CFNumberRef v113 = "%s - Must be an IR sensor to set raw output\n";
LABEL_2171:
        v807 = v112;
        uint32_t v808 = 12;
LABEL_2172:
        _os_log_impl(&dword_24680F000, v807, OS_LOG_TYPE_DEFAULT, v113, valuePtr, v808);
        goto LABEL_105;
      }
      if (CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E8D0])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E880])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E858])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E820])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E9B8])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E550])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E558])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E548])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E888])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E540])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E870])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E8B8])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E568])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E9B0])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E8B0])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E878])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E8A8])
        || CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E530]))
      {
        CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
        }
        BOOL v95 = v922;
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_105;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        CFNumberRef v113 = "%s - Invalid property for raw output\n";
        goto LABEL_2171;
      }
      int theDict = (int)v91;
      CFNumberRef v819 = (const __CFNumber *)CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E850]);
      CFNumberRef v820 = (const __CFNumber *)CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E898]);
      CFNumberRef v821 = (const __CFNumber *)CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E8A0]);
      CFNumberRef numberh = (CFNumberRef)CFDictionaryGetValue(v773, (const void *)*MEMORY[0x263F2E818]);
      if (v819)
      {
        *(void *)int valuePtr = 0;
        CFNumberGetValue(v819, kCFNumberLongLongType, valuePtr);
        uint64_t v928 = *(void *)valuePtr;
      }
      if (v820)
      {
        *(_DWORD *)v1086 = 0;
        CFNumberGetValue(v820, kCFNumberSInt32Type, v1086);
        if (*(unsigned char *)(a2 + 2080))
        {
          v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v376 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
          }
          if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          v377 = "%s - Cannot change Pixel Format while streaming\n";
          goto LABEL_1808;
        }
        int v822 = *(_DWORD *)v1086;
        if (*(_DWORD *)v1086 != 1278226736 && *(_DWORD *)v1086 != 1278226742)
        {
          v514 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v514 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v514;
          }
          if (!os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315394;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          *(_WORD *)&valuePtr[12] = 1024;
          *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
          v377 = "%s - Selected IR pixel format not supported 0x%08X\n";
          goto LABEL_1773;
        }
      }
      else
      {
        int v822 = 1278226742;
      }
      int v931 = v822;
      if (v821)
      {
        *(_DWORD *)v1086 = 0;
        CFNumberGetValue(v821, kCFNumberSInt32Type, v1086);
        if (*(unsigned char *)(a2 + 2080))
        {
          v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v376 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
          }
          if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          v377 = "%s - Cannot change Retained Buffer Count while streaming\n";
          goto LABEL_1808;
        }
        int v930 = *(_DWORD *)v1086;
      }
      if (numberh)
      {
        int v828 = CFEqual(numberh, (CFTypeRef)*MEMORY[0x263EFFB40]);
        if (*(unsigned char *)(a2 + 2080))
        {
          v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v389 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
          }
          if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          v390 = "%s - Cannot change Attach Raw while streaming\n";
          goto LABEL_1954;
        }
        char v927 = v828 != 0;
      }
      LODWORD(v91) = theDict;
    }
  }
  CFDictionaryRef v775 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E948]);
  BOOL v95 = v922;
  if (v775)
  {
    CFDictionaryRef v776 = v775;
    CFTypeID v777 = CFGetTypeID(v775);
    if (v777 == CFDictionaryGetTypeID())
    {
      if (CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E9B8])
        || CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E888])
        || CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E870])
        || CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E8B8])
        || CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E568])
        || CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E9B0])
        || CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E8B0])
        || CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E878])
        || CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E8A8]))
      {
        CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
        }
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_105;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        CFNumberRef v113 = "%s - Invalid property for still image raw output\n";
        goto LABEL_2171;
      }
      int theDict = (int)v91;
      CFNumberRef v778 = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E850]);
      CFNumberRef v779 = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E898]);
      CFNumberRef v780 = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E8D0]);
      CFNumberRef numbere = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E880]);
      CFDictionaryRef v908 = (const __CFDictionary *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E858]);
      CFNumberRef cf1e = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E8A0]);
      CFNumberRef v901 = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E820]);
      CFTypeRef v888 = CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E818]);
      CFNumberRef poolb = (CFNumberRef)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E540]);
      CFNumberRef v868 = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E538]);
      CFNumberRef v871 = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E520]);
      CFNumberRef v876 = (CFNumberRef)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E550]);
      CFNumberRef BOOLeanb = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E558]);
      CFNumberRef v859 = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E548]);
      CFBooleanRef v857 = (const __CFBoolean *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E518]);
      CFNumberRef v882 = (CFNumberRef)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E530]);
      CFTypeRef v855 = CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E560]);
      CFNumberRef v853 = (const __CFNumber *)CFDictionaryGetValue(v776, (const void *)*MEMORY[0x263F2E528]);
      if (v778)
      {
        *(void *)int valuePtr = 0;
        CFNumberGetValue(v778, kCFNumberLongLongType, valuePtr);
        *((void *)&v988 + 1) = *(void *)valuePtr;
      }
      if (!v779) {
        goto LABEL_1729;
      }
      *(_DWORD *)v1086 = 0;
      CFNumberGetValue(v779, kCFNumberSInt32Type, v1086);
      if (*v962)
      {
        v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v376 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
        }
        if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v377 = "%s - Cannot change Pixel Format while streaming\n";
        goto LABEL_1808;
      }
      if (!*(unsigned char *)(a2 + 3784)
        && !H16ISP::H16ISPDevice::isSensorType(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), 1785950322))
      {
        v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v376 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
        }
        if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v377 = "%s - Cannot change Pixel Format on unsupported stream\n";
        goto LABEL_1808;
      }
      int v781 = *(_DWORD *)v1086;
      if (*(_DWORD *)v1086 == 1278226736 || *(_DWORD *)v1086 == 1278226742)
      {
LABEL_1728:
        LODWORD(v989) = v781;
LABEL_1729:
        if (v780)
        {
          *(_DWORD *)v1086 = 0;
          CFNumberGetValue(v780, kCFNumberSInt32Type, v1086);
          if (*v962)
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Cannot change Width while streaming\n";
            goto LABEL_1808;
          }
          if ((v1086[0] & 1) != 0 || *(int *)v1086 > v981 || *(int *)v1086 < v981 >> 2)
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Invalid width for raw width or alignment\n";
            goto LABEL_1808;
          }
          DWORD1(v989) = *(_DWORD *)v1086;
        }
        if (numbere)
        {
          *(_DWORD *)v1086 = 0;
          CFNumberGetValue(numbere, kCFNumberSInt32Type, v1086);
          if (*v962)
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Cannot change Height while streaming\n";
            goto LABEL_1808;
          }
          if ((v1086[0] & 1) != 0 || *(int *)v1086 > v982 || *(int *)v1086 < v982 >> 2)
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Invalid height for raw height or alignment\n";
            goto LABEL_1808;
          }
          DWORD2(v989) = *(_DWORD *)v1086;
        }
        if (v908)
        {
          if (!CGRectMakeWithDictionaryRepresentation(v908, (CGRect *)valuePtr))
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)v1086 = 136315138;
            *(void *)&v1086[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Failed to read Crop Rect\n";
            goto LABEL_1768;
          }
          LOWORD(v782) = v981;
          if (*(double *)valuePtr + *(double *)&valuePtr[16] > (double)v782)
          {
            v514 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v514 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v514;
            }
            if (!os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)v1086 = 136315394;
            *(void *)&v1086[4] = "SetVideoOutputConfigurations";
            LOWORD(v1087) = 1024;
            *(_DWORD *)((char *)&v1087 + 2) = v981;
            v377 = "%s - Invalid crop x/width for selected output width %d\n";
            goto LABEL_1793;
          }
          LOWORD(v78mach_timebase_info(this + 3) = v982;
          if (*(double *)&valuePtr[8] + *(double *)&valuePtr[24] > (double)v783)
          {
            v514 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v514 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v514;
            }
            if (!os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            goto LABEL_1782;
          }
          int v785 = DWORD1(v989);
          if (*(double *)valuePtr + *(double *)&valuePtr[16] < (double)SDWORD1(v989))
          {
            v514 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v514 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v514;
            }
            if (!os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)v1086 = 136315394;
            *(void *)&v1086[4] = "SetVideoOutputConfigurations";
            LOWORD(v1087) = 1024;
            *(_DWORD *)((char *)&v1087 + 2) = v785;
            v377 = "%s - Invalid crop x/width for selected output width %d\n";
            goto LABEL_1793;
          }
          int v786 = DWORD2(v989);
          if (*(double *)&valuePtr[8] + *(double *)&valuePtr[24] < (double)SDWORD2(v989))
          {
            v514 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v514 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v514;
            }
            if (!os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)v1086 = 136315394;
            *(void *)&v1086[4] = "SetVideoOutputConfigurations";
            LOWORD(v1087) = 1024;
            *(_DWORD *)((char *)&v1087 + 2) = v786;
            v377 = "%s - Invalid crop y/height for selected output height %d\n";
            goto LABEL_1793;
          }
          if ((*(double *)valuePtr & 1) != 0
            || (*(double *)&valuePtr[8] & 1) != 0
            || (*(double *)&valuePtr[16] & 1) != 0
            || (*(double *)&valuePtr[24] & 1) != 0)
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)v1086 = 136315138;
            *(void *)&v1086[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Invalid crop params, must be divisible by 2\n";
            goto LABEL_1768;
          }
          long long v990 = *(_OWORD *)valuePtr;
          long long v991 = *(_OWORD *)&valuePtr[16];
        }
        if (cf1e)
        {
          *(_DWORD *)int valuePtr = 0;
          CFNumberGetValue(cf1e, kCFNumberSInt32Type, valuePtr);
          LODWORD(v992) = *(_DWORD *)valuePtr;
        }
        if (v901)
        {
          *(_DWORD *)v1086 = 0;
          CFNumberGetValue(v901, kCFNumberSInt32Type, v1086);
          if (*v962)
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Cannot change Buffer Cache Mode while streaming\n";
            goto LABEL_1808;
          }
          DWORD1(v992) = *(_DWORD *)v1086;
        }
        if (v888)
        {
          int v789 = CFEqual(v888, (CFTypeRef)*MEMORY[0x263EFFB40]);
          if (*v962)
          {
            v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v389 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
            }
            if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v390 = "%s - Cannot change Attach Raw while streaming\n";
            goto LABEL_1954;
          }
          BYTE8(v992) = v789 != 0;
        }
        if (v882)
        {
          int v790 = CFEqual(v882, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
          if (*(unsigned __int8 *)(a2 + 2353) != v790)
          {
            if (*(void *)(a2 + 136))
            {
              v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v410 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
              }
              if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_616;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v411 = "%s - Cannot change Attach Thumbnail Raw while streaming\n";
              goto LABEL_2012;
            }
            if (*v962)
            {
              v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v389 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
              }
              if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_2177;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v390 = "%s - Cannot change Attach Thumbnail Raw while output is enabled\n";
              goto LABEL_1954;
            }
          }
          BYTE9(v992) = v790;
        }
        if (poolb) {
          BYTE8(v995) = CFEqual(poolb, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
        }
        if (v868)
        {
          *(_DWORD *)int valuePtr = 0;
          CFNumberGetValue(v868, kCFNumberSInt32Type, valuePtr);
          HIDWORD(v995) = *(_DWORD *)valuePtr;
        }
        if (v871)
        {
          *(_DWORD *)int valuePtr = 0;
          CFNumberGetValue(v871, kCFNumberSInt32Type, valuePtr);
          LODWORD(v996) = *(_DWORD *)valuePtr;
        }
        if (v876)
        {
          int v791 = CFEqual(v876, (CFTypeRef)*MEMORY[0x263EFFB40]);
          if (*v962)
          {
            v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v389 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
            }
            if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v390 = "%s - Cannot change Time Machine Enable while streaming\n";
            goto LABEL_1954;
          }
          if (*(void *)(a2 + 136))
          {
            int v792 = v791 != 0;
            if (*(unsigned __int8 *)(a2 + 2364) != v792)
            {
              v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v410 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
              }
              if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_616;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v411 = "%s - Cannot change Time Machine Enable while streaming\n";
              goto LABEL_2012;
            }
          }
          else
          {
            LOBYTE(v792) = v791 != 0;
          }
          BYTE4(v99mach_timebase_info(this + 3) = v792;
        }
        if (BOOLeanb)
        {
          *(_DWORD *)v1086 = 0;
          CFNumberGetValue(BOOLeanb, kCFNumberSInt32Type, v1086);
          if (*v962)
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Cannot change Time Machine Ring Buffer Capacity while streaming\n";
            goto LABEL_1808;
          }
          if (*(void *)(a2 + 136) && *(_DWORD *)v1086 != *(_DWORD *)(a2 + 2368))
          {
            v679 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v679 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v679;
            }
            if (!os_log_type_enabled(v679, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_616;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v680 = "%s - Cannot change Time Machine Ring Buffer Capacity while streaming\n";
            goto LABEL_1455;
          }
          DWORD2(v99mach_timebase_info(this + 3) = *(_DWORD *)v1086;
          int v108 = 1;
        }
        if (v859)
        {
          *(_DWORD *)v1086 = 0;
          CFNumberGetValue(v859, kCFNumberSInt32Type, v1086);
          if (*v962)
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Cannot change Time Machine Buffer Replacement Scheme while streaming\n";
            goto LABEL_1808;
          }
          if (*(_DWORD *)v1086 >= 2u)
          {
            *(_DWORD *)v1086 = -1;
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Not a recognized buffer replacement scheme\n";
            goto LABEL_1808;
          }
          HIDWORD(v99mach_timebase_info(this + 3) = *(_DWORD *)v1086;
          int v108 = 1;
        }
        if (v857)
        {
          int v793 = CFBooleanGetValue(v857) != 0;
          if (*(unsigned __int8 *)(a2 + 2376) != v793)
          {
            if (*(void *)(a2 + 136))
            {
              v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v410 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
              }
              if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_616;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v411 = "%s - Cannot attach debug pixel buffer while streaming\n";
              goto LABEL_2012;
            }
            if (*v962)
            {
              v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v389 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
              }
              if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_2177;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v390 = "%s - Cannot attach debug pixel while output is enabled\n";
              goto LABEL_1954;
            }
          }
          LOBYTE(v994) = v793;
        }
        if (v855)
        {
          int v794 = CFEqual(v855, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
          if (*v962)
          {
            v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v389 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
            }
            if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v390 = "%s - Cannot change Time Machine SIFR Enable while output is enabled\n";
            goto LABEL_1954;
          }
          if (*(void *)(a2 + 136) && *(unsigned __int8 *)(a2 + 2464) != v794)
          {
            v410 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v410 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v410;
            }
            if (!os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_616;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v411 = "%s - Cannot change Time Machine SIFR Enable while streaming\n";
            goto LABEL_2012;
          }
          BYTE8(v999) = v794;
        }
        if (!v853) {
          goto LABEL_1912;
        }
        *(_DWORD *)v1086 = 0;
        CFNumberGetValue(v853, kCFNumberSInt32Type, v1086);
        if (*v962)
        {
          v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v376 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
          }
          if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          v377 = "%s - Cannot change maximum bracket SIFR count while output is enabled\n";
          goto LABEL_1808;
        }
        if (!*(void *)(a2 + 136) || *(_DWORD *)(a2 + 2468) == *(_DWORD *)v1086)
        {
          HIDWORD(v999) = *(_DWORD *)v1086;
LABEL_1912:
          LODWORD(v91) = theDict;
          goto LABEL_1913;
        }
        v679 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v679 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v679;
        }
        if (!os_log_type_enabled(v679, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_616;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v680 = "%s - Cannot change maximum bracket SIFR count while output is enabled\n";
LABEL_1455:
        _os_log_impl(&dword_24680F000, v679, OS_LOG_TYPE_DEFAULT, v680, valuePtr, 0xCu);
        goto LABEL_616;
      }
      if ((*(_DWORD *)v1086 & 0xFFFFFFEF) == 0x34323066)
      {
        int v781 = 1278226742;
        goto LABEL_1728;
      }
      v514 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v514 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v514;
      }
      if (!os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
LABEL_1772:
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
      v377 = "%s - Selected pixel format not supported 0x%08X\n";
LABEL_1773:
      v784 = valuePtr;
LABEL_1794:
      v787 = v514;
      uint32_t v788 = 18;
LABEL_1810:
      _os_log_impl(&dword_24680F000, v787, OS_LOG_TYPE_DEFAULT, v377, v784, v788);
      goto LABEL_2177;
    }
  }
LABEL_1913:
  CFDictionaryRef v795 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x263F2E910]);
  if (!v795) {
    goto LABEL_1969;
  }
  CFDictionaryRef v796 = v795;
  CFTypeID v797 = CFGetTypeID(v795);
  if (v797 != CFDictionaryGetTypeID()) {
    goto LABEL_1969;
  }
  int theDict = (int)v91;
  CFNumberRef v798 = (const __CFNumber *)CFDictionaryGetValue(v796, (const void *)*MEMORY[0x263F2E850]);
  CFNumberRef v799 = (const __CFNumber *)CFDictionaryGetValue(v796, (const void *)*MEMORY[0x263F2E898]);
  CFNumberRef v800 = (const __CFNumber *)CFDictionaryGetValue(v796, (const void *)*MEMORY[0x263F2E868]);
  CFNumberRef v801 = (const __CFNumber *)CFDictionaryGetValue(v796, (const void *)*MEMORY[0x263F2E8A0]);
  CFNumberRef v909 = (CFNumberRef)CFDictionaryGetValue(v796, (const void *)*MEMORY[0x263F2E818]);
  CFNumberRef numberf = (CFNumberRef)CFDictionaryGetValue(v796, (const void *)*MEMORY[0x263F2E828]);
  if (v798)
  {
    *(void *)int valuePtr = 0;
    CFNumberGetValue(v798, kCFNumberLongLongType, valuePtr);
    uint64_t v956 = *(void *)valuePtr;
  }
  if (v799)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v799, kCFNumberSInt32Type, v1086);
    BOOL v95 = v922;
    if (*(unsigned char *)(a2 + 3608))
    {
      CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
      }
      LODWORD(v91) = theDict;
      if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      CFNumberRef v113 = "%s - Cannot change Pixel Format while streaming\n";
      goto LABEL_2171;
    }
    int v802 = *(_DWORD *)SupportedOutputFormatsPointCloud;
    if (!*(_DWORD *)SupportedOutputFormatsPointCloud) {
      goto LABEL_1935;
    }
    char v803 = 0;
    v804 = &SupportedOutputFormatsPointCloud[4];
    do
    {
      v803 |= v802 == *(_DWORD *)v1086;
      int v805 = *(_DWORD *)v804;
      v804 += 4;
      int v802 = v805;
    }
    while (v805);
    if ((v803 & 1) == 0)
    {
LABEL_1935:
      v806 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v806 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v806;
      }
      LODWORD(v91) = theDict;
      if (!os_log_type_enabled(v806, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = *(_DWORD *)v1086;
      CFNumberRef v113 = "%s - Selected pixel format not supported 0x%08X\n";
      v807 = v806;
      uint32_t v808 = 18;
      goto LABEL_2172;
    }
    int v953 = *(_DWORD *)v1086;
  }
  else
  {
    BOOL v95 = v922;
  }
  if (v800)
  {
    *(_DWORD *)v1086 = 0;
    CFNumberGetValue(v800, kCFNumberSInt32Type, v1086);
    if (*(unsigned char *)(a2 + 3608))
    {
      CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      LODWORD(v91) = theDict;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
      }
      if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      CFNumberRef v113 = "%s - Can not change height while streaming\n";
      goto LABEL_2171;
    }
    int v954 = *(_DWORD *)v1086;
  }
  if (!v801)
  {
LABEL_1948:
    if (v909)
    {
      int v810 = CFEqual(v909, (CFTypeRef)*MEMORY[0x263EFFB40]);
      if (*(unsigned char *)(a2 + 3608))
      {
        v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v389 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
        }
        if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v390 = "%s - Cannot change Attach Raw while streaming\n";
        goto LABEL_1954;
      }
      char v951 = v810 != 0;
    }
    if (numberf)
    {
      *(void *)int valuePtr = 0;
      v811 = *(void **)(a2 + 4240);
      if (v811) {
        H16ISP::H16ISPFilterGraphManager::GetNode(v811, 11, (H16ISP::H16ISPFilterGraphNode **)valuePtr);
      }
      if (cfa)
      {
        CFRelease(cfa);
        if (*(void *)valuePtr) {
          H16ISP::H16ISPJasperDepthNode::setBufferPool(*(uint64_t *)valuePtr, 0);
        }
      }
      if (CFEqual(numberf, (CFTypeRef)*MEMORY[0x263EFFD08]))
      {
        CFTypeRef cfa = 0;
      }
      else
      {
        CFTypeRef cfa = CFRetain(numberf);
        if (*(void *)valuePtr) {
          H16ISP::H16ISPJasperDepthNode::setBufferPool(*(uint64_t *)valuePtr, cfa);
        }
      }
    }
    LODWORD(v91) = theDict;
LABEL_1969:
    CFDictionaryRef v812 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"VisPipe");
    if (!v812 || (CFDictionaryRef v813 = v812, v814 = CFGetTypeID(v812), v814 != CFDictionaryGetTypeID()))
    {
LABEL_2123:
      if (*(unsigned char *)(a2 + 2701))
      {
        HandleSecureStreamOutputConfig((const __CFDictionary *)cf, a2, a4);
        v833 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          v833 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v833;
        }
        if (os_log_type_enabled(v833, OS_LOG_TYPE_DEFAULT))
        {
          int v834 = *(_DWORD *)(a2 + 132);
          v835 = "enabled";
          if (*(unsigned char *)(a2 + 2680)) {
            v836 = "enabled";
          }
          else {
            v836 = "disabled";
          }
          if (*(unsigned char *)(a2 + 2696)) {
            v837 = "enabled";
          }
          else {
            v837 = "disabled";
          }
          if (*(unsigned char *)(a2 + 2697)) {
            v838 = "enabled";
          }
          else {
            v838 = "disabled";
          }
          if (*(unsigned char *)(a2 + 2698)) {
            v839 = "enabled";
          }
          else {
            v839 = "disabled";
          }
          if (*(unsigned char *)(a2 + 2699)) {
            v840 = "enabled";
          }
          else {
            v840 = "disabled";
          }
          if (*(unsigned char *)(a2 + 2792)) {
            v841 = "enabled";
          }
          else {
            v841 = "disabled";
          }
          if (*(unsigned char *)(a2 + 2712)) {
            v842 = "enabled";
          }
          else {
            v842 = "disabled";
          }
          if (*(unsigned char *)(a2 + 2793)) {
            v843 = "enabled";
          }
          else {
            v843 = "disabled";
          }
          if (*(unsigned char *)(a2 + 2713)) {
            v844 = "enabled";
          }
          else {
            v844 = "disabled";
          }
          if (*(unsigned char *)(a2 + 2714)) {
            v845 = "enabled";
          }
          else {
            v845 = "disabled";
          }
          if (!*(unsigned char *)(a2 + 2715)) {
            v835 = "disabled";
          }
          *(_DWORD *)int valuePtr = 136318210;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          *(_WORD *)&valuePtr[12] = 1024;
          *(_DWORD *)&valuePtr[14] = v834;
          *(_WORD *)&valuePtr[18] = 2080;
          *(void *)&valuePtr[20] = v836;
          *(_WORD *)&valuePtr[28] = 2080;
          *(void *)&valuePtr[30] = v837;
          __int16 v1068 = 2080;
          v1069 = v838;
          __int16 v1070 = 2080;
          v1071 = v839;
          __int16 v1072 = 2080;
          v1073 = v840;
          __int16 v1074 = 2080;
          v1075 = v841;
          __int16 v1076 = 2080;
          v1077 = v842;
          __int16 v1078 = 2080;
          v1079 = v843;
          __int16 v1080 = 2080;
          v1081 = v844;
          __int16 v1082 = 2080;
          v1083 = v845;
          __int16 v1084 = 2080;
          v1085 = v835;
          _os_log_impl(&dword_24680F000, v833, OS_LOG_TYPE_DEFAULT, "%s - channel %d meta output:%s exclave FD:%s AD:%s ER:%s FT:%s PreCheck:%s FDOD:%s PO:%s MD:%s DPD:%s BaselineStreaming:%s\n", valuePtr, 0x80u);
        }
      }
      if (SetMetadataOutputConfiguration((const __CFDictionary *)cf, (int32x4_t *)a2, a4))
      {
        CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        BOOL v95 = v922;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
        }
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_105;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        CFNumberRef v113 = "%s - Failed to set metadata output configuration\n";
      }
      else
      {
        uint64_t v20 = 0;
        BOOL v95 = v922;
        if (*((float *)&v1062 + 2) <= 0.0 || *((float *)&v1049 + 2) <= 0.0) {
          goto LABEL_106;
        }
        CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
        }
        if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_105;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        CFNumberRef v113 = "%s - Unable to have decimation enabled on both secondary and intermediate outputs\n";
      }
      goto LABEL_2171;
    }
    if (CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E820])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E898])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E9B8])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E550])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E558])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E548])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E888])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E540])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E848])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E870])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E8B8])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E568])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E9B0])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E8B0])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E878])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E8A8])
      || CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E530]))
    {
      CFNumberRef v112 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v112 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v112;
      }
      BOOL v95 = v922;
      if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      CFNumberRef v113 = "%s - Invalid property for vis pipe output\n";
      goto LABEL_2171;
    }
    int theDict = (int)v91;
    CFNumberRef v815 = (const __CFNumber *)CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E850]);
    CFNumberRef v816 = (const __CFNumber *)CFDictionaryGetValue(v813, @"VisPipeRawBitDepth");
    CFNumberRef v817 = (const __CFNumber *)CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E8D0]);
    CFNumberRef numberg = (const __CFNumber *)CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E880]);
    CFDictionaryRef v818 = (const __CFDictionary *)CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E858]);
    CFNumberRef v910 = (const __CFNumber *)CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E8A0]);
    CFNumberRef v902 = (CFNumberRef)CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E818]);
    cf1f = (__CVPixelBufferPool *)CFDictionaryGetValue(v813, (const void *)*MEMORY[0x263F2E828]);
    if (v815)
    {
      *(void *)int valuePtr = 0;
      CFNumberGetValue(v815, kCFNumberLongLongType, valuePtr);
      uint64_t v925 = *(void *)valuePtr;
    }
    if (v816)
    {
      *(_DWORD *)v1086 = 0;
      if (*(unsigned char *)(a2 + 2480))
      {
        v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v376 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
        }
        if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v377 = "%s - Cannot change Raw Bit Depth while streaming\n";
        goto LABEL_1808;
      }
      CFNumberGetValue(v816, kCFNumberSInt32Type, v1086);
      int v944 = *(_DWORD *)v1086;
    }
    if (!v818) {
      goto LABEL_2065;
    }
    BOOL v823 = CGRectMakeWithDictionaryRepresentation(v818, (CGRect *)valuePtr);
    if (*(unsigned char *)(a2 + 2480))
    {
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)v1086 = 136315138;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Cannot change Crop Rect while streaming\n";
      goto LABEL_1768;
    }
    if (v823)
    {
      unsigned int v825 = *(double *)valuePtr;
      unsigned int v826 = *(double *)&valuePtr[16];
      if (*(double *)&valuePtr[16] + *(double *)valuePtr > v981)
      {
        v827 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v827 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v827;
        }
        if (!os_log_type_enabled(v827, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)v1086 = 136315906;
        *(void *)&v1086[4] = "SetVideoOutputConfigurations";
        LOWORD(v1087) = 1024;
        *(_DWORD *)((char *)&v1087 + 2) = v825;
        HIWORD(v1087) = 1024;
        unsigned int v1088 = v826;
        LOWORD(v1089[0]) = 1024;
        *(_DWORD *)((char *)v1089 + 2) = v981;
        v377 = "%s - Invalid crop x(%d)/width(%d) for selected output width %d\n";
        v784 = v1086;
        v787 = v827;
        uint32_t v788 = 30;
        goto LABEL_1810;
      }
      LOWORD(v824) = v982;
      if (*(double *)&valuePtr[8] + *(double *)&valuePtr[24] > (double)v824)
      {
        v514 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v514 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v514;
        }
        if (!os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
LABEL_1782:
        *(_DWORD *)v1086 = 136315394;
        *(void *)&v1086[4] = "SetVideoOutputConfigurations";
        LOWORD(v1087) = 1024;
        *(_DWORD *)((char *)&v1087 + 2) = v982;
        v377 = "%s - Invalid crop y/height for selected output height %d\n";
LABEL_1793:
        v784 = v1086;
        goto LABEL_1794;
      }
      if ((v825 & 1) == 0
        && ((*(double *)&valuePtr[8] | v826) & 1) == 0
        && (*(double *)&valuePtr[24] & 1) == 0)
      {
        double v86 = *(double *)&valuePtr[24];
        double v85 = *(double *)&valuePtr[16];
        uint64_t v84 = *(void *)&valuePtr[8];
        uint64_t v83 = *(void *)valuePtr;
LABEL_2065:
        if (v817)
        {
          *(_DWORD *)v1086 = 0;
          if (*(unsigned char *)(a2 + 2480))
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Cannot change Width while streaming\n";
            goto LABEL_1808;
          }
          CFNumberGetValue(v817, kCFNumberSInt32Type, v1086);
          if ((v1086[0] & 1) != 0 || v85 < (double)*(int *)v1086 || v85 * 0.125 > (double)*(int *)v1086)
          {
            v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              v376 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
            }
            if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_2177;
            }
            *(_DWORD *)int valuePtr = 136315138;
            *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
            v377 = "%s - Invalid width for crop width or alignment\n";
            goto LABEL_1808;
          }
          int v945 = *(_DWORD *)v1086;
        }
        if (!numberg)
        {
LABEL_2089:
          if (v910)
          {
            *(_DWORD *)int valuePtr = 0;
            if (*(unsigned char *)(a2 + 2480)) {
              goto LABEL_2177;
            }
            CFNumberGetValue(v910, kCFNumberSInt32Type, valuePtr);
            int v967 = *(_DWORD *)valuePtr;
          }
          if (v902)
          {
            if (*(unsigned char *)(a2 + 2480))
            {
              v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v389 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
              }
              if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_2177;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v390 = "%s - Cannot change Attach Raw while streaming\n";
              goto LABEL_1954;
            }
            char v943 = CFEqual(v902, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
          }
          if (cf1f)
          {
            if (*(unsigned char *)(a2 + 2480))
            {
              v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                v389 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
              }
              if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_2177;
              }
              *(_DWORD *)int valuePtr = 136315138;
              *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
              v390 = "%s - Cannot change Client Buffer Pool while streaming\n";
              goto LABEL_1954;
            }
            if (pixelBufferPool) {
              CVPixelBufferPoolRelease(pixelBufferPool);
            }
            if (CFEqual(cf1f, (CFTypeRef)*MEMORY[0x263EFFD08]))
            {
              pixelBufferuint64_t Pool = 0;
            }
            else
            {
              pixelBufferuint64_t Pool = CVPixelBufferPoolRetain(cf1f);
              int v829 = CVPixelBufferPoolGetMinBufferCount();
              int v830 = dword_26B11BA34;
              if (!dword_26B11BA34)
              {
                unsigned int v831 = *(_DWORD *)(a2 + 48);
                unsigned int v832 = *(_DWORD *)(a2 + 168);
                if (v831 < v832) {
                  unsigned int v832 = 0;
                }
                int v830 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * (v831 - v832) + 116);
              }
              int v967 = ~v830 + v829;
              if (v967 < 0)
              {
                v389 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  v389 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v389;
                }
                if (!os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_2177;
                }
                *(_DWORD *)int valuePtr = 136315138;
                *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
                v390 = "%s - Not enough buffers in client pool\n";
                goto LABEL_1954;
              }
            }
          }
          LODWORD(v91) = theDict;
          goto LABEL_2123;
        }
        *(_DWORD *)v1086 = 0;
        if (*(unsigned char *)(a2 + 2480))
        {
          v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v376 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
          }
          if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_2177;
          }
          *(_DWORD *)int valuePtr = 136315138;
          *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
          v377 = "%s - Cannot change Height while streaming\n";
          goto LABEL_1808;
        }
        CFNumberGetValue(numberg, kCFNumberSInt32Type, v1086);
        if ((v1086[0] & 1) == 0 && v86 >= (double)*(int *)v1086 && v86 * 0.125 <= (double)*(int *)v1086)
        {
          int v946 = *(_DWORD *)v1086;
          goto LABEL_2089;
        }
        v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v376 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
        }
        if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_2177;
        }
        *(_DWORD *)int valuePtr = 136315138;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        v377 = "%s - Invalid height for crop height or alignment\n";
LABEL_1808:
        v784 = valuePtr;
        goto LABEL_1809;
      }
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)v1086 = 136315138;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Invalid crop params, must be divisible by 2\n";
    }
    else
    {
      v376 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        v376 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v376;
      }
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_2177;
      }
      *(_DWORD *)v1086 = 136315138;
      *(void *)&v1086[4] = "SetVideoOutputConfigurations";
      v377 = "%s - Failed to read Crop Rect\n";
    }
LABEL_1768:
    v784 = v1086;
LABEL_1809:
    v787 = v376;
    uint32_t v788 = 12;
    goto LABEL_1810;
  }
  *(_DWORD *)v1086 = 0;
  CFNumberGetValue(v801, kCFNumberSInt32Type, v1086);
  if (!*(unsigned char *)(a2 + 3608))
  {
    int v952 = *(_DWORD *)v1086;
    goto LABEL_1948;
  }
  v809 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    v809 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v809;
  }
  if (os_log_type_enabled(v809, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int valuePtr = 136315138;
    *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
    _os_log_impl(&dword_24680F000, v809, OS_LOG_TYPE_DEFAULT, "%s - Cannot change Retained Buffer Count while streaming\n", valuePtr, 0xCu);
  }
  uint64_t v20 = 4294954516;
  LODWORD(v91) = theDict;
LABEL_106:
  if (v108)
  {
    if (BYTE4(v1033))
    {
      __int16 v114 = WORD4(v1033);
      __int16 v115 = WORD6(v1033);
    }
    else if (BYTE4(v1020))
    {
      __int16 v114 = WORD4(v1020);
      __int16 v115 = WORD6(v1020);
    }
    else
    {
      __int16 v115 = BYTE4(v993);
      if (BYTE4(v993))
      {
        __int16 v114 = WORD4(v993);
        __int16 v115 = WORD6(v993);
      }
      else
      {
        __int16 v114 = 0;
      }
    }
    uint64_t v116 = H16ISP::H16ISPDevice::SetTimeMachineDepth(*(H16ISP::H16ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 132), v114, v115);
    if (v116)
    {
      uint64_t v117 = v116;
      int v118 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v118 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v118;
      }
      if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
      {
        char v129 = SetVideoOutputConfigurations(v117, (uint64_t)v118, v91 == 0);
        uint64_t v20 = 4294954514;
        BOOL v119 = dict;
        BOOL v120 = v969;
        if ((v129 & 1) == 0)
        {
LABEL_122:
          for (uint64_t m = 0; m != 32; m += 8)
          {
            char v122 = *(__CVBuffer **)((char *)&v1123 + m + 8);
            if (v122)
            {
              CVPixelBufferRelease(v122);
              *(void *)((char *)&v1123 + m + 8) = 0;
            }
          }
        }
LABEL_126:
        if (v119)
        {
          for (uint64_t n = 0; n != 32; n += 8)
          {
            CFStringRef v124 = *(__CVBuffer **)((char *)&v1063 + n + 8);
            if (v124)
            {
              CVPixelBufferRelease(v124);
              *(void *)((char *)&v1063 + n + 8) = 0;
            }
          }
        }
        if (v120)
        {
          for (iuint64_t i = 0; ii != 32; ii += 8)
          {
            uint64_t v126 = *(__CVBuffer **)((char *)&v1050 + ii + 8);
            if (v126)
            {
              CVPixelBufferRelease(v126);
              *(void *)((char *)&v1050 + ii + 8) = 0;
            }
          }
        }
        return v20;
      }
      uint64_t v20 = 4294954514;
      goto LABEL_120;
    }
  }
  if (v20) {
    goto LABEL_120;
  }
  if (!*(void *)(a2 + 136))
  {
    BOOL v127 = 1;
    goto LABEL_323;
  }
  if (!v95 || !*v964) {
    goto LABEL_157;
  }
  if (v923)
  {
    if (*v965 && *(unsigned char *)(a2 + 1072))
    {
      int updated = PrimaryAndSecondaryScalerConfigUpdateAtomically(a4, a2, (uint64_t)v1116, (uint64_t)&v1054);
      BOOL v960 = 0;
      goto LABEL_156;
    }
    if (v957 && *v963)
    {
      int updated = IntermediateTapAndScalerConfigUpdateAtomically(a4, a2, (uint64_t)&v1041, (uint64_t)v1116, 2845);
      BOOL v957 = 0;
      goto LABEL_156;
    }
    int v130 = ScalerOutputConfigUpdateAtomically(a4, a2, (uint64_t)v1116, 2843);
LABEL_155:
    int updated = v130;
LABEL_156:
    if (updated)
    {
LABEL_182:
      int v147 = 0;
      uint64_t v20 = 4294954514;
      goto LABEL_290;
    }
LABEL_157:
    if (!v957) {
      goto LABEL_178;
    }
    goto LABEL_158;
  }
  if (!CGRectEqualToRect(*(CGRect *)(a2 + 712), v1117))
  {
    int v130 = SetPrimaryScalerCrop(a4, a2, (double *)v1116);
    goto LABEL_155;
  }
  if (!v957) {
    goto LABEL_178;
  }
LABEL_158:
  if (*v963)
  {
    if (v960 && *v965)
    {
      int updated = IntermediateTapAndScalerConfigUpdateAtomically(a4, a2, (uint64_t)&v1041, (uint64_t)&v1054, 2846);
      BOOL v960 = 0;
    }
    else
    {
      *(void *)v1086 = 0;
      if (*(void *)(a2 + 136))
      {
        int v131 = (int)v91;
        *(_WORD *)&v1086[4] = 2832;
        int v132 = (int)*(double *)&v1043;
        int v133 = (int)*((double *)&v1043 + 1);
        unsigned int v134 = *(double *)&v1044;
        *(_DWORD *)&v1086[8] = *(_DWORD *)(a2 + 132);
        LODWORD(v1087) = (int)*(double *)&v1043;
        HIDWORD(v1087) = (int)*((double *)&v1043 + 1);
        unsigned int v1088 = *(double *)&v1044;
        unsigned int v135 = *((double *)&v1044 + 1);
        v1089[0] = *((double *)&v1044 + 1);
        CFStringRef v136 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFStringRef v136 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v136;
        }
        if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int valuePtr = 136316162;
          *(void *)&valuePtr[4] = "IntermediateTapOutputConfigUpdateAtomically";
          *(_WORD *)&valuePtr[12] = 1024;
          *(_DWORD *)&valuePtr[14] = v134;
          *(_WORD *)&valuePtr[18] = 1024;
          *(_DWORD *)&valuePtr[20] = v135;
          *(_WORD *)&valuePtr[24] = 1024;
          *(_DWORD *)&valuePtr[26] = v132;
          *(_WORD *)&valuePtr[30] = 1024;
          *(_DWORD *)&valuePtr[32] = v133;
          _os_log_debug_impl(&dword_24680F000, v136, OS_LOG_TYPE_DEBUG, "%s - sent cropWidth=%u cropHeight=%u x=%d y=%d\n", valuePtr, 0x24u);
        }
        int updated = H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(a4 + 24), v1086, 0x1Cu, 0, 0xFFFFFFFF);
        if (updated)
        {
          CFStringRef v137 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          LODWORD(v91) = v131;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFStringRef v137 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v137;
          }
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR)) {
            SetVideoOutputConfigurations();
          }
        }
        else
        {
          LODWORD(v91) = v131;
        }
      }
      else
      {
        OSType v138 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          OSType v138 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v138;
        }
        int updated = -536870201;
        if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
          SetVideoOutputConfigurations(v138, v139, v140, v141, v142, v143, v144, v145);
        }
      }
    }
    if (updated) {
      goto LABEL_182;
    }
  }
LABEL_178:
  if (v960)
  {
    if (*v965)
    {
      int v146 = ScalerOutputConfigUpdateAtomically(a4, a2, (uint64_t)&v1054, 2844);
      if (v146)
      {
        int updated = v146;
        goto LABEL_182;
      }
    }
  }
  if (*v968 && BYTE8(v1035) || *v966 && BYTE8(v1022) || *v962 && BYTE8(v995))
  {
    if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 20))
    {
      if (*v968 && BYTE8(v1035))
      {
        IOSurfaceID v148 = &v1028;
      }
      else if (*v966 && BYTE8(v1022))
      {
        IOSurfaceID v148 = &v1015;
      }
      else
      {
        if (!*v962 || !BYTE8(v995)) {
          goto LABEL_215;
        }
        IOSurfaceID v148 = &v988;
      }
      int v151 = AddSushiRawPoolToFrameReceiver(a2, a4, (uint64_t)v148);
      if (v151)
      {
        int updated = v151;
        uint64_t v152 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v152 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v152;
        }
        if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR)) {
          SetVideoOutputConfigurations();
        }
        goto LABEL_288;
      }
    }
  }
  else if (H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 20))
  {
    if (*(_DWORD *)(a2 + 76))
    {
      CFStringRef v149 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFStringRef v149 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v149;
      }
      if (!os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_279;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      CFStringRef v150 = "%s - Cannot disable Sushi Raw during capture\n";
      goto LABEL_278;
    }
    int v153 = H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a2 + 136), 20);
    if (v153)
    {
      int updated = v153;
      uint32_t v154 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint32_t v154 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v154;
      }
      if (!os_log_type_enabled(v154, OS_LOG_TYPE_ERROR)) {
        goto LABEL_349;
      }
      goto LABEL_348;
    }
  }
LABEL_215:
  if (*v968 && HIDWORD(v1035) || *v966 && HIDWORD(v1022) || *v962 && HIDWORD(v995))
  {
    if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 22))
    {
      if (*v968 && HIDWORD(v1035))
      {
        uint32_t v155 = &v1028;
      }
      else if (*v966 && HIDWORD(v1022))
      {
        uint32_t v155 = &v1015;
      }
      else
      {
        if (!*v962 || !HIDWORD(v995)) {
          goto LABEL_258;
        }
        uint32_t v155 = &v988;
      }
      int v156 = AddSashimiRawPoolToFrameReceiver(a2, a4, (uint64_t)v155);
      if (v156)
      {
        int updated = v156;
        int v157 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v157 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v157;
        }
        if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR)) {
          SetVideoOutputConfigurations();
        }
        goto LABEL_288;
      }
    }
  }
  else if (H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 22))
  {
    if (*(_DWORD *)(a2 + 76))
    {
      CFStringRef v149 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFStringRef v149 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v149;
      }
      if (!os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_279;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      CFStringRef v150 = "%s - Cannot disable Sashimi Raw during capture\n";
      goto LABEL_278;
    }
    int v167 = H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a2 + 136), 22);
    if (v167)
    {
      int updated = v167;
      CFNumberRef v168 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v168 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v168;
      }
      if (!os_log_type_enabled(v168, OS_LOG_TYPE_ERROR)) {
        goto LABEL_349;
      }
      goto LABEL_348;
    }
  }
LABEL_258:
  if ((!*v968 || !v1036) && (!*v966 || !v1023) && (!*v962 || !v996))
  {
    if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 23)) {
      goto LABEL_265;
    }
    if (*(_DWORD *)(a2 + 76))
    {
      CFStringRef v149 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFStringRef v149 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v149;
      }
      if (!os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_279;
      }
      *(_DWORD *)int valuePtr = 136315138;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      CFStringRef v150 = "%s - Cannot disable Focus Pixel Data during capture\n";
LABEL_278:
      _os_log_impl(&dword_24680F000, v149, OS_LOG_TYPE_DEFAULT, v150, valuePtr, 0xCu);
LABEL_279:
      int updated = 0;
LABEL_288:
      int v147 = 0;
      uint64_t v20 = 4294954516;
      goto LABEL_290;
    }
    int updated = H16ISP::H16ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(void *)(a2 + 136), 23);
    if (!updated)
    {
      uint64_t v20 = 0;
      int v147 = 1;
      goto LABEL_290;
    }
    uint64_t v246 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v246 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v246;
    }
    if (!os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
    {
LABEL_349:
      int v147 = 0;
      uint64_t v20 = 4294954516;
      goto LABEL_290;
    }
LABEL_348:
    SetVideoOutputConfigurations();
    goto LABEL_349;
  }
  if (H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 23))
  {
LABEL_265:
    int updated = 0;
    goto LABEL_289;
  }
  if (*v968 && v1036)
  {
    unsigned int v169 = &v1028;
    goto LABEL_283;
  }
  if (*v966 && v1023)
  {
    unsigned int v169 = &v1015;
    goto LABEL_283;
  }
  int updated = 0;
  int v147 = 1;
  if (!*v962)
  {
    uint64_t v20 = 0;
    goto LABEL_290;
  }
  uint64_t v20 = 0;
  if (v996)
  {
    unsigned int v169 = &v988;
LABEL_283:
    int updated = AddFocusPixelDataToFrameReceiver(a2, a4, (uint64_t)v169);
    if (updated)
    {
      CFNumberRef v170 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v170 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v170;
      }
      if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR)) {
        SetVideoOutputConfigurations();
      }
      goto LABEL_288;
    }
LABEL_289:
    uint64_t v20 = 0;
    int v147 = 1;
  }
LABEL_290:
  if (*(_DWORD *)(a2 + 1344) != v1032)
  {
    if (H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 7)) {
      int updated = H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(*(void *)(a2 + 136), 7, v1032);
    }
    if (*(unsigned char *)(a2 + 674) && *v968 && *(unsigned char *)(a2 + 1400) && BYTE8(v1035)) {
      int updated = H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(*(void *)(a2 + 136), 20, v1032);
    }
  }
  int v171 = v1019;
  if (*(_DWORD *)(a2 + 1544) != v1019)
  {
    if (H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 9)) {
      int updated = H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(*(void *)(a2 + 136), 9, v171);
    }
    if (*(unsigned char *)(a2 + 674) && *v966 && *(unsigned char *)(a2 + 1600) && BYTE8(v1022)) {
      int updated = H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(*(void *)(a2 + 136), 20, v171);
    }
  }
  int v172 = v992;
  if (*(_DWORD *)(a2 + 2344) != v992 && H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(a2 + 136), 7)) {
    int updated = H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(*(void *)(a2 + 136), 7, v172);
  }
  if (*(_DWORD *)(a2 + 2544) != v967
    && (*(unsigned char *)(a2 + 752)
     || *(unsigned char *)(a2 + 952)
     || *(unsigned char *)(a2 + 1152)
     || *(unsigned char *)(a2 + 1352)
     || *(unsigned char *)(a2 + 1552)
     || *(unsigned char *)(a2 + 2480)))
  {
    int v173 = dword_26B11BA34;
    if (!dword_26B11BA34) {
      int v173 = *(_DWORD *)(*(void *)(a2 + 160) + 120 * v11 + 116);
    }
    int updated = H16ISP::H16ISPFrameReceiver::ModifyPoolBufferCount(*(void *)(a2 + 136), 19, v967 + v173 + 1);
  }
  if (updated == -536870211)
  {
    uint64_t v20 = 4294954510;
    goto LABEL_120;
  }
  if (updated)
  {
    uint64_t v20 = 4294954516;
    goto LABEL_120;
  }
  if (!v147)
  {
LABEL_120:
    BOOL v119 = dict;
    BOOL v120 = v969;
    goto LABEL_121;
  }
  BOOL v127 = *(void *)(a2 + 136) == 0;
LABEL_323:
  *(void *)(a2 + 168pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v941;
  *(void *)(a2 + 1688) = v939;
  *(_DWORD *)(a2 + 1744) = v938;
  *(_DWORD *)(a2 + 1748) = v940;
  *(void *)(a2 + 188pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v937;
  *(void *)(a2 + 1888) = v933;
  *(_DWORD *)(a2 + 1944) = v936;
  *(_DWORD *)(a2 + 1948) = v935;
  *(unsigned char *)(a2 + 1952) = v934;
  *(void *)(a2 + 208pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v932;
  *(void *)(a2 + 2088) = v928;
  *(_DWORD *)(a2 + 2096) = v931;
  *(_DWORD *)(a2 + 2144) = v930;
  *(_DWORD *)(a2 + 2148) = v929;
  *(unsigned char *)(a2 + 2152) = v927;
  *(void *)(a2 + 248pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v926;
  *(void *)(a2 + 2488) = v925;
  *(_DWORD *)(a2 + 2496) = v924;
  *(void *)(a2 + 872) = v1126;
  long long v174 = v1125;
  *(_OWORD *)(a2 + 84pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v1124;
  *(_OWORD *)(a2 + 856) = v174;
  long long v175 = v1121;
  *(_OWORD *)(a2 + 776) = v1120;
  *(_OWORD *)(a2 + 792) = v175;
  long long v176 = v1123;
  *(_OWORD *)(a2 + 808) = v1122;
  *(_OWORD *)(a2 + 824) = v176;
  CGSize size = v1117.size;
  *(CGPoint *)(a2 + 712) = v1117.origin;
  *(CGSize *)(a2 + 728) = size;
  long long v178 = v1119;
  *(_OWORD *)(a2 + 744) = v1118;
  *(_OWORD *)(a2 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v178;
  long long v179 = *(_OWORD *)&v1116[16];
  *(_OWORD *)v964 = *(_OWORD *)v1116;
  *(_OWORD *)(a2 + 696) = v179;
  *(void *)(a2 + 1072) = v1066;
  long long v180 = v1063;
  long long v181 = v1065;
  *(_OWORD *)(a2 + 104pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v1064;
  *(_OWORD *)(a2 + 1056) = v181;
  long long v182 = v1059;
  long long v183 = v1061;
  *(_OWORD *)(a2 + 976) = v1060;
  *(_OWORD *)(a2 + 992) = v183;
  *(_OWORD *)(a2 + 1008) = v1062;
  *(_OWORD *)(a2 + 1024) = v180;
  long long v184 = v1055;
  long long v185 = v1057;
  *(_OWORD *)(a2 + 912) = v1056;
  *(_OWORD *)(a2 + 928) = v185;
  *(_OWORD *)(a2 + 944) = v1058;
  *(_OWORD *)(a2 + 96pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v182;
  *(_OWORD *)v965 = v1054;
  *(_OWORD *)(a2 + 896) = v184;
  *(void *)(a2 + 1272) = v1053;
  long long v186 = v1050;
  long long v187 = v1052;
  *(_OWORD *)(a2 + 124pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v1051;
  *(_OWORD *)(a2 + 1256) = v187;
  long long v188 = v1048;
  *(_OWORD *)(a2 + 1176) = v1047;
  *(_OWORD *)(a2 + 1192) = v188;
  *(_OWORD *)(a2 + 1208) = v1049;
  *(_OWORD *)(a2 + 1224) = v186;
  long long v189 = v1044;
  *(_OWORD *)(a2 + 1112) = v1043;
  *(_OWORD *)(a2 + 1128) = v189;
  long long v190 = v1046;
  *(_OWORD *)(a2 + 1144) = v1045;
  *(_OWORD *)(a2 + 116pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v190;
  long long v191 = v1042;
  *(_OWORD *)v963 = v1041;
  *(_OWORD *)(a2 + 1096) = v191;
  *(void *)(a2 + 1472) = v1040;
  long long v192 = v1039;
  *(_OWORD *)(a2 + 144pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v1038;
  *(_OWORD *)(a2 + 1456) = v192;
  long long v193 = v1035;
  *(_OWORD *)(a2 + 1376) = v1034;
  *(_OWORD *)(a2 + 1392) = v193;
  long long v194 = v1037;
  *(_OWORD *)(a2 + 1408) = v1036;
  *(_OWORD *)(a2 + 1424) = v194;
  long long v195 = v1031;
  *(_OWORD *)(a2 + 1312) = v1030;
  *(_OWORD *)(a2 + 1328) = v195;
  long long v196 = v1033;
  *(_OWORD *)(a2 + 1344) = v1032;
  *(_OWORD *)(a2 + 136pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v196;
  long long v197 = v1029;
  *(_OWORD *)v968 = v1028;
  *(_OWORD *)(a2 + 1296) = v197;
  *(void *)(a2 + 1672) = v1027;
  long long v198 = v1026;
  *(_OWORD *)(a2 + 164pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v1025;
  *(_OWORD *)(a2 + 1656) = v198;
  long long v199 = v1022;
  *(_OWORD *)(a2 + 1576) = v1021;
  *(_OWORD *)(a2 + 1592) = v199;
  long long v200 = v1024;
  *(_OWORD *)(a2 + 1608) = v1023;
  *(_OWORD *)(a2 + 1624) = v200;
  long long v201 = v1018;
  *(_OWORD *)(a2 + 1512) = v1017;
  *(_OWORD *)(a2 + 1528) = v201;
  long long v202 = v1020;
  *(_OWORD *)(a2 + 1544) = v1019;
  *(_OWORD *)(a2 + 156pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v202;
  long long v203 = v1016;
  *(_OWORD *)v966 = v1015;
  *(_OWORD *)(a2 + 1496) = v203;
  long long v204 = v1013;
  long long v205 = v1014;
  long long v206 = v1011;
  *(_OWORD *)(a2 + 1696) = v1012;
  *(_OWORD *)(a2 + 1712) = v204;
  *(_OWORD *)(a2 + 1728) = v205;
  long long v207 = v1009;
  long long v208 = v1010;
  long long v209 = v1007;
  *(_OWORD *)(a2 + 1816) = v1008;
  *(_OWORD *)(a2 + 1832) = v207;
  *(_OWORD *)(a2 + 1848) = v208;
  *(_OWORD *)(a2 + 1864) = v206;
  long long v210 = v1005;
  long long v211 = v1006;
  long long v212 = v1003;
  *(_OWORD *)(a2 + 1752) = v1004;
  *(_OWORD *)(a2 + 1768) = v210;
  *(_OWORD *)(a2 + 1784) = v211;
  *(_OWORD *)(a2 + 180pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v209;
  long long v213 = v1002;
  *(_OWORD *)(a2 + 1896) = v1001;
  *(_OWORD *)(a2 + 1912) = v213;
  *(_OWORD *)(a2 + 1928) = v212;
  long long v214 = v1112;
  *(_OWORD *)(a2 + 1985) = v1111;
  *(_OWORD *)(a2 + 2001) = v214;
  long long v215 = v1110;
  *(_OWORD *)(a2 + 195mach_timebase_info(this + 3) = v1109;
  *(_OWORD *)(a2 + 1969) = v215;
  *(_OWORD *)(a2 + 2064) = *(_OWORD *)((char *)v1115 + 15);
  long long v216 = v1115[0];
  long long v217 = v1113;
  *(_OWORD *)(a2 + 203mach_timebase_info(this + 3) = v1114;
  *(_OWORD *)(a2 + 2049) = v216;
  *(_OWORD *)(a2 + 2017) = v217;
  long long v218 = v1107;
  long long v219 = v1108[0];
  *(_OWORD *)(a2 + 2128) = *(_OWORD *)((char *)v1108 + 12);
  *(_OWORD *)(a2 + 210pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v218;
  *(_OWORD *)(a2 + 2116) = v219;
  long long v220 = v1100;
  long long v221 = v1101;
  long long v222 = v1103;
  *(_OWORD *)(a2 + 2185) = v1102;
  *(_OWORD *)(a2 + 2201) = v222;
  *(_OWORD *)(a2 + 215mach_timebase_info(this + 3) = v220;
  *(_OWORD *)(a2 + 2169) = v221;
  long long v223 = v1104;
  long long v224 = v1105;
  long long v225 = v1106[0];
  *(_OWORD *)(a2 + 2264) = *(_OWORD *)((char *)v1106 + 15);
  *(_OWORD *)(a2 + 223mach_timebase_info(this + 3) = v224;
  *(_OWORD *)(a2 + 2249) = v225;
  *(_OWORD *)(a2 + 2217) = v223;
  long long v226 = v989;
  long long v227 = v991;
  long long v228 = v992;
  *(_OWORD *)(a2 + 2312) = v990;
  *(_OWORD *)(a2 + 2328) = v227;
  long long v229 = v987;
  *(_OWORD *)v962 = v988;
  *(_OWORD *)(a2 + 2296) = v226;
  long long v230 = v993;
  long long v231 = v995;
  long long v232 = v996;
  *(_OWORD *)(a2 + 2376) = v994;
  *(_OWORD *)(a2 + 2392) = v231;
  *(_OWORD *)(a2 + 2344) = v228;
  *(_OWORD *)(a2 + 236pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v230;
  long long v233 = v997;
  long long v234 = v998;
  long long v235 = v999;
  *(void *)(a2 + 2472) = v1000;
  *(_OWORD *)(a2 + 244pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v234;
  *(_OWORD *)(a2 + 2456) = v235;
  *(_OWORD *)(a2 + 2408) = v232;
  *(_OWORD *)(a2 + 2424) = v233;
  *(_DWORD *)(a2 + 250pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v945;
  *(_DWORD *)(a2 + 2504) = v946;
  *(_DWORD *)(a2 + 2508) = v947;
  *(void *)(a2 + 2512) = v83;
  *(void *)(a2 + 252pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v84;
  *(double *)(a2 + 2528) = v85;
  *(double *)(a2 + 2536) = v86;
  *(_DWORD *)(a2 + 2544) = v967;
  *(_DWORD *)(a2 + 2548) = v948;
  *(unsigned char *)(a2 + 2552) = v943;
  long long v236 = v1099[0];
  *(_OWORD *)(a2 + 2585) = v1098;
  *(_OWORD *)(a2 + 2601) = v236;
  *(_DWORD *)(a2 + 2616) = *(_DWORD *)((char *)v1099 + 15);
  long long v237 = v1097;
  *(_OWORD *)(a2 + 255mach_timebase_info(this + 3) = v1096;
  *(_OWORD *)(a2 + 2569) = v237;
  *(_DWORD *)(a2 + 262pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v944;
  *(void *)(a2 + 2624) = pixelBufferPool;
  long long v238 = v986;
  *(_OWORD *)(a2 + 2632) = v985;
  *(_OWORD *)(a2 + 2648) = v238;
  *(_OWORD *)(a2 + 2664) = v229;
  *(void *)(a2 + 3608) = v950;
  *(void *)(a2 + 3616) = v956;
  *(_DWORD *)(a2 + 3624) = v953;
  *(_DWORD *)(a2 + 3628) = v954;
  *(_DWORD *)(a2 + 3632) = v949;
  *(_DWORD *)(a2 + 3636) = v952;
  *(unsigned char *)(a2 + 364pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v951;
  *(_OWORD *)(a2 + 3641) = v1095[0];
  *(void *)(a2 + 3656) = *(void *)((char *)v1095 + 15);
  *(void *)(a2 + 3664) = cfa;
  if (v127) {
    return 0;
  }
  if (!*(void *)(a2 + 4336))
  {
    int v243 = resizeRawPool(a4, a2);
    if (v243)
    {
      int v244 = v243;
      uint64_t v245 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v245 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v245;
      }
      if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int valuePtr = 136315394;
        *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = v244;
        _os_log_impl(&dword_24680F000, v245, OS_LOG_TYPE_DEFAULT, "%s - unable to resize raw pool err = %d\n", valuePtr, 0x12u);
      }
    }
  }
  *(_DWORD *)v1086 = 0;
  unsigned int v979 = 0;
  int v239 = resizeStillMetaPool(a2, 1, (int *)v1086, (int *)&v979);
  if (v239)
  {
    int v240 = v239;
    v241 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      v241 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v241;
    }
    if (os_log_type_enabled(v241, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = v240;
      _os_log_impl(&dword_24680F000, v241, OS_LOG_TYPE_DEFAULT, "%s - unable to resize still meta pool err = %d\n", valuePtr, 0x12u);
    }
  }
  uint64_t v20 = resizeThumbnailRawPool(a2, 1, 0, (int *)&v979);
  if (v20)
  {
    uint64_t v242 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v242 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v242;
    }
    BOOL v119 = dict;
    BOOL v120 = v969;
    if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "SetVideoOutputConfigurations";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = v20;
      _os_log_impl(&dword_24680F000, v242, OS_LOG_TYPE_DEFAULT, "%s - unable to resize thumbnail pool err = %d\n", valuePtr, 0x12u);
    }
LABEL_121:
    if (v91) {
      goto LABEL_122;
    }
    goto LABEL_126;
  }
  return v20;
}

uint64_t SetMetadataOutputConfiguration(const __CFDictionary *a1, int32x4_t *a2, uint64_t a3)
{
  uint64_t v154 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  if (!CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x263F2E908], &cf)) {
    return 0;
  }
  if (a2[167].i8[8])
  {
    CFAllocatorRef v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFAllocatorRef v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    uint64_t v13 = 3758097084;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      SetMetadataOutputConfiguration(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    return v13;
  }
  if (cf && (CFTypeID v14 = CFGetTypeID(cf), v14 == CFDictionaryGetTypeID()))
  {
    CFDictionaryRef v15 = (const __CFDictionary *)cf;
    if (a2[174].i8[11])
    {
      uint64_t v16 = SetMetadataOutputFeatureEnabled((uint64_t)&a2[177].i64[1], (CFDictionaryRef)cf, (void *)*MEMORY[0x263F2CCB0]);
      if (v16)
      {
        uint64_t v13 = v16;
        int v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          int v17 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v17;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          SetMetadataOutputConfiguration(v17, v18, v19, v20, v21, v22, v23, v24);
        }
LABEL_82:
        char v121 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          char v121 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v121;
        }
        if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
          SetMetadataOutputConfiguration();
        }
        return v13;
      }
      CVPixelBufferRef value = 0;
      if (CFDictionaryGetValueIfPresent(v15, (const void *)*MEMORY[0x263F2CCA8], (const void **)&value))
      {
        if (a2[182].i8[9])
        {
          long long v33 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v33 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v33;
          }
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v33, v34, v35, v36, v37, v38, v39, v40);
          }
          uint64_t v13 = 3758097095;
LABEL_62:
          CFTypeID v92 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFTypeID v92 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v92;
          }
          if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          goto LABEL_82;
        }
        uint64_t v13 = 3758097090;
        CFDictionaryRef v41 = (const __CFDictionary *)value;
        *(void *)int v153 = 0;
        if (LightSourceMaskGetTunableParameterValue((const __CFDictionary *)value, (const __CFString *)*MEMORY[0x263F2CBC0], &a2[175]) == -536870206)
        {
          long long v42 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v42 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v42;
          }
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v42, v43, v44, v45, v46, v47, v48, v49);
          }
LABEL_58:
          uint64_t v84 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v84 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v84;
          }
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v84, v85, v86, v87, v88, v89, v90, v91);
          }
          goto LABEL_62;
        }
        if (LightSourceMaskGetTunableParameterValue(v41, (const __CFString *)*MEMORY[0x263F2CBC8], (char *)a2[175].i64 + 4) == -536870206)
        {
          long long v50 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v50 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v50;
          }
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v50, v51, v52, v53, v54, v55, v56, v57);
          }
          goto LABEL_58;
        }
        if (LightSourceMaskGetTunableParameterValue(v41, (const __CFString *)*MEMORY[0x263F2CBD0], &a2[175].u64[1]) == -536870206)
        {
          long long v58 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v58 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v58;
          }
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v58, v59, v60, v61, v62, v63, v64, v65);
          }
          goto LABEL_58;
        }
        if (LightSourceMaskGetTunableParameterValue(v41, (const __CFString *)*MEMORY[0x263F2CBB8], (char *)&a2[175].u64[1] + 4) == -536870206)
        {
          long long v66 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v66 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v66;
          }
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v66, v67, v68, v69, v70, v71, v72, v73);
          }
          goto LABEL_58;
        }
        if (CFDictionaryGetValueIfPresent(v41, (const void *)*MEMORY[0x263F2CBD8], (const void **)v153))
        {
          if (!*(void *)v153 || (CFTypeID v74 = CFGetTypeID(*(CFTypeRef *)v153), v74 != CFArrayGetTypeID()))
          {
            long long v76 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              long long v76 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v76;
            }
            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
              SetMetadataOutputConfiguration(v76, v77, v78, v79, v80, v81, v82, v83);
            }
            goto LABEL_58;
          }
          if (CFArrayGetCount(*(CFArrayRef *)v153) > 4)
          {
            long long v75 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              long long v75 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v75;
            }
            if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
              SetMetadataOutputConfiguration((CFArrayRef *)v153, v75);
            }
            goto LABEL_58;
          }
          if (CFArrayGetCount(*(CFArrayRef *)v153) >= 1)
          {
            CFIndex v100 = 0;
            CFDictionaryRef v101 = a2 + 176;
            do
            {
              CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)v153, v100);
              if (ValueAtIndex) {
                CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, v101);
              }
              ++v100;
              CFDictionaryRef v101 = (int32x4_t *)((char *)v101 + 4);
            }
            while (v100 < CFArrayGetCount(*(CFArrayRef *)v153));
          }
          a2[177].i32[0] = 1;
        }
        uint64_t v103 = SetMetadataOutputBufferPoolConfiguration((uint64_t)&a2[177].i64[1], (const __CFDictionary *)value);
        if (v103)
        {
          uint64_t v13 = v103;
          CFDictionaryRef v104 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFDictionaryRef v104 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v104;
          }
          if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v104, v105, v106, v107, v108, v109, v110, v111);
          }
          goto LABEL_62;
        }
      }
      uint64_t v112 = SetMetadataOutputFeatureEnabled((uint64_t)&a2[183].i64[1], v15, (void *)*MEMORY[0x263F2CC90]);
      if (v112)
      {
        uint64_t v13 = v112;
        CFNumberRef v113 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v113 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v113;
        }
        if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR)) {
          SetMetadataOutputConfiguration(v113, v114, v115, v116, v117, v118, v119, v120);
        }
        goto LABEL_82;
      }
      CVPixelBufferRef value = 0;
      if (CFDictionaryGetValueIfPresent(v15, (const void *)*MEMORY[0x263F2CC88], (const void **)&value))
      {
        uint64_t v122 = SetMetadataOutputBufferPoolConfiguration((uint64_t)&a2[183].i64[1], (const __CFDictionary *)value);
        if (v122)
        {
          uint64_t v13 = v122;
          CFStringRef v123 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          CFStringRef v124 = &_os_log_internal;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFStringRef v123 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v123;
          }
          if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int v153 = 136315138;
            *(void *)&v153[4] = "SetKeypointDescriptorDataConfiguration";
            _os_log_error_impl(&dword_24680F000, v123, OS_LOG_TYPE_ERROR, "%s - failed to set keypoint descriptor data configuration\n", v153, 0xCu);
            CFStringRef v123 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          }
          if (v123 == v124)
          {
            CFStringRef v123 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v123;
          }
          if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v123, v125, v126, v127, v128, v129, v130, v131);
          }
          goto LABEL_82;
        }
      }
      CFDictionaryRef v15 = (const __CFDictionary *)cf;
    }
    uint64_t v132 = 0;
    *(void *)int v153 = 0;
    while (1)
    {
      uint64_t v13 = SetMetadataOutputFeatureEnabled((uint64_t)&a2[v132 + 189].i64[1], v15, *(void **)a2[v132 + 194].i64[0]);
      if (v13) {
        break;
      }
      v132 += 6;
      if (v132 == 24) {
        goto LABEL_105;
      }
    }
    int v133 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v133 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v133;
    }
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
      SetMetadataOutputConfiguration();
    }
LABEL_105:
    uint64_t v134 = 0;
    while (2)
    {
      uint64_t v135 = (uint64_t)&a2[6 * v134++ + 189].i64[1];
      while (!CFDictionaryGetValueIfPresent(v15, *(const void **)(*(void *)(v135 + 72) + 8), (const void **)v153))
      {
        ++v134;
        v135 += 96;
        if (v134 == 5)
        {
          if (v13)
          {
LABEL_114:
            CFStringRef v136 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              CFStringRef v136 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v136;
            }
            if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR)) {
              SetMetadataOutputConfiguration();
            }
            return v13;
          }
          goto LABEL_118;
        }
      }
      uint64_t v13 = SetMetadataOutputBufferPoolConfiguration(v135, *(const __CFDictionary **)v153);
      if (v13)
      {
        CFStringRef v150 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFStringRef v150 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v150;
        }
        if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR)) {
          SetMetadataOutputConfiguration();
        }
        goto LABEL_114;
      }
      if (v134 != 4) {
        continue;
      }
      break;
    }
LABEL_118:
    CFStringRef v137 = SetHITHFeatureConfiguration((uint64_t)&a2[167].i64[1], (const __CFDictionary *)cf);
    if (v137)
    {
      uint64_t v13 = (uint64_t)v137;
      OSType v138 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        OSType v138 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v138;
      }
      if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
        SetMetadataOutputConfiguration();
      }
    }
    else
    {
      uint64_t v139 = SetANSTThumbnailFeatureConfiguration((uint64_t)&a2[167].i64[1], (const __CFDictionary *)cf);
      if (v139)
      {
        uint64_t v13 = (uint64_t)v139;
        uint64_t v140 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v140 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v140;
        }
        if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR)) {
          SetMetadataOutputConfiguration();
        }
      }
      else
      {
        if (!a2[174].i8[11]) {
          return 0;
        }
        uint64_t v13 = LightSourceMaskTunableConfigurationSendToFirmware(a3, a2[8].i32[1], a2 + 175);
        if (v13)
        {
          uint64_t v141 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v141 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v141;
          }
          if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR)) {
            SetMetadataOutputConfiguration(v141, v142, v143, v144, v145, v146, v147, v148);
          }
        }
      }
    }
  }
  else
  {
    CGSize v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CGSize v25 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
    }
    uint64_t v13 = 3758097090;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      SetMetadataOutputConfiguration(v25, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return v13;
}

float SetSwitchingFormatIndex(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  if (!a1 || (CFTypeID v7 = CFGetTypeID(a1), v7 == CFNumberGetTypeID()) || v7 == CFDictionaryGetTypeID())
  {
    if (*(void *)(a2 + 4328))
    {
      unsigned int idx = -1;
      unsigned int v79 = 0;
      uint64_t valuePtr = 0;
      float v77 = 0.0;
      float64x2_t v76 = *(float64x2_t *)MEMORY[0x263F00148];
      if (a1)
      {
        if (*(int *)(*(void *)(a4 + 24) + 4392) <= 16) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = (CGPoint *)&v76;
        }
        if (!ParseSwitchingFormatIndex(a1, *(_DWORD *)(a2 + 4316), &idx, &v79, v8))
        {
          uint64_t v23 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v23 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v23;
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            SetSwitchingFormatIndex(v23, v24, v25, v26, v27, v28, v29, v30);
          }
          return result;
        }
        CFTypeID v9 = CFGetTypeID(a1);
        if (v9 == CFDictionaryGetTypeID())
        {
          *(void *)idx_4 = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C418], (const void **)idx_4))
          {
            CFNumberGetValue(*(CFNumberRef *)idx_4, kCFNumberFloatType, (char *)&valuePtr + 4);
            if (*((float *)&valuePtr + 1) < 0.0)
            {
              uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v10 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
              }
              if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
                SetSwitchingFormatIndex((uint64_t)&valuePtr + 4);
              }
              return result;
            }
          }
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C420], (const void **)idx_4))
          {
            CFNumberGetValue(*(CFNumberRef *)idx_4, kCFNumberFloatType, &valuePtr);
            if (*(float *)&valuePtr < 0.0)
            {
              uint64_t v56 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v56 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v56;
              }
              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
                SetSwitchingFormatIndex((uint64_t)&valuePtr);
              }
              return result;
            }
          }
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C428], (const void **)idx_4))
          {
            CFNumberGetValue(*(CFNumberRef *)idx_4, kCFNumberFloatType, &v77);
            if (v77 < 0.0)
            {
              uint64_t v57 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v57 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v57;
              }
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
                SetSwitchingFormatIndex((uint64_t)&v77);
              }
              return result;
            }
          }
        }
      }
      else
      {
        unsigned int idx = *(_DWORD *)(a2 + 4316);
      }
      if (*(void *)(a2 + 40))
      {
        unsigned int v13 = *(_DWORD *)(a2 + 48);
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 4328), v13);
        if (CFEqual((CFTypeRef)*MEMORY[0x263EFFD08], ValueAtIndex))
        {
          CFDictionaryRef v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            CFDictionaryRef v15 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v15;
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            SetSwitchingFormatIndex(v15, v16, v17, v18, v19, v20, v21, v22);
          }
          return result;
        }
        CFNumberRef v47 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &idx);
        if (!v47)
        {
LABEL_72:
          CFRelease(v47);
          return result;
        }
        v93.CFIndex length = CFArrayGetCount((CFArrayRef)ValueAtIndex);
        v93.locatiouint64_t n = 0;
        if (CFArrayContainsValue((CFArrayRef)ValueAtIndex, v93, v47)) {
          BOOL v48 = 1;
        }
        else {
          BOOL v48 = idx == v13;
        }
        if (!v48)
        {
          long long v58 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            long long v58 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v58;
          }
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            uint64_t v62 = *(void *)(a2 + 160);
            int v63 = *(_DWORD *)(v62 + 120 * v13);
            LODWORD(v62) = *(_DWORD *)(v62 + 120 * idx);
            int v64 = *(_DWORD *)(a2 + 132);
            *(_DWORD *)idx_4 = 136316418;
            *(void *)&idx_4[4] = "SetSwitchingFormatIndex";
            __int16 v82 = 1024;
            int v83 = v64;
            __int16 v84 = 1024;
            unsigned int v85 = v13;
            __int16 v86 = 1024;
            int v87 = v63;
            __int16 v88 = 1024;
            unsigned int v89 = idx;
            __int16 v90 = 1024;
            int v91 = v62;
            _os_log_error_impl(&dword_24680F000, v58, OS_LOG_TYPE_ERROR, "%s - CH%d switching from %d(%d) to %d(%d) is not in the context switch list\n", idx_4, 0x2Au);
          }
          goto LABEL_72;
        }
        CFRelease(v47);
        CFRelease(*(CFTypeRef *)(a2 + 40));
        uint64_t v49 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 112), idx);
        *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v49;
        CFRetain(v49);
        H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a4 + 24), *(_DWORD *)(a2 + 132), *(_DWORD *)(*(void *)(a2 + 160) + 120 * idx + 16), v75, idx_4);
        unsigned int v50 = idx;
        *(_DWORD *)(a2 + 48) = idx;
        int v65 = *(_DWORD *)(a2 + 132);
        uint64_t v51 = *(void *)(a2 + 160);
        uint64_t v52 = v51 + 120 * v50;
        __int16 v66 = *(_DWORD *)(v52 + 16);
        unsigned int v67 = v79;
        int8x8_t v68 = vand_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(v76)), (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32(v75[204] == 0), 0x1FuLL)));
        LODWORD(v52) = *(unsigned __int8 *)(v52 + 36);
        char v69 = v52;
        if (v52)
        {
          uint64_t v53 = v51 + 120 * v50;
          long long v70 = *(_OWORD *)(v53 + 48);
          uint64_t v71 = *(void *)(v53 + 40);
        }
        if (*(unsigned char *)(v51 + 120 * v50 + 64))
        {
          uint64_t v54 = v51 + 120 * v50;
          long long v73 = *(_OWORD *)(v54 + 76);
          uint64_t v74 = *(void *)(v54 + 68);
        }
        if (H16ISP::H16ISPDevice::SetContextSwitch(*(H16ISP::H16ISPDevice **)(a4 + 24), 1u, &v65, vcvtms_u32_f32(*((float *)&valuePtr + 1) * 256.0), vcvtms_u32_f32(*(float *)&valuePtr * 256.0), vcvtms_u32_f32(v77 * 256.0)))
        {
          uint64_t v55 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v55 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v55;
          }
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
            SetSwitchingFormatIndex();
          }
        }
        else
        {
          float result = *(float *)&valuePtr;
          if (*(float *)&valuePtr <= 0.0) {
            float result = *(float *)(a2 + 52);
          }
          *(float *)(a2 + 52) = result;
          float v59 = v77;
          if (v77 <= 0.0) {
            float v59 = *(float *)(a2 + 56);
          }
          *(float *)(a2 + 56) = v59;
          int v60 = HIDWORD(valuePtr);
          if (*((float *)&valuePtr + 1) > 0.0)
          {
            float result = fminf(result, *((float *)&valuePtr + 1));
            float v61 = fminf(v59, *((float *)&valuePtr + 1));
            *(float *)(a2 + 52) = result;
            *(float *)(a2 + 56) = v61;
            *(_DWORD *)(a2 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v60;
          }
        }
      }
      else
      {
        uint64_t v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v39 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v39;
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
          SetSwitchingFormatIndex(v39, v40, v41, v42, v43, v44, v45, v46);
        }
      }
    }
    else
    {
      uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v12 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v12;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        SetSwitchingFormatIndex();
      }
    }
  }
  else
  {
    uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v31 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      SetSwitchingFormatIndex(v31, v32, v33, v34, v35, v36, v37, v38);
    }
  }
  return result;
}

uint64_t H16ISP::H16ISPDevice::SetContextSwitch(H16ISP::H16ISPDevice *a1, unsigned int a2, const void *a3, int a4, int a5, int a6)
{
  bzero(v13, 0x1E4uLL);
  __int16 v14 = -32506;
  unsigned int v15 = a2;
  v16[114] = a4;
  v16[116] = a5;
  v16[115] = a6;
  memcpy(v16, a3, 76 * a2);
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v13, 0x1E4u, 0, 0xFFFFFFFF);
}

BOOL ParseSwitchingFormatIndex(const void *a1, unsigned int a2, unsigned int *a3, unsigned int *a4, CGPoint *a5)
{
  CFTypeID v10 = CFGetTypeID(a1);
  if (v10 == CFNumberGetTypeID())
  {
    BOOL v11 = CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, a3) == 0;
  }
  else
  {
    if (v10 != CFDictionaryGetTypeID()) {
      return 0;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C3A8]);
    if (Value)
    {
      CFNumberRef v13 = Value;
      if (CFEqual(Value, (CFTypeRef)*MEMORY[0x263EFFD08]))
      {
        *a3 = a2;
        BOOL v14 = 1;
      }
      else
      {
        BOOL v14 = CFNumberGetValue(v13, kCFNumberIntType, a3) != 0;
      }
    }
    else
    {
      BOOL v14 = 0;
    }
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C370]);
    if (v14 && v16) {
      BOOL v14 = CFNumberGetValue(v16, kCFNumberIntType, a4) != 0;
    }
    if (a5)
    {
      CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x263F2C468]);
      if (v14)
      {
        if (v17) {
          BOOL v14 = CGPointMakeWithDictionaryRepresentation(v17, a5);
        }
      }
    }
    BOOL v11 = !v14;
  }
  return !v11;
}

void ActivateSecondaryScalerOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 136)) {
    return;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 168);
  if (v4 < v5) {
    unsigned int v5 = 0;
  }
  unsigned int v6 = v4 - v5;
  int v7 = dword_26B11BA34;
  uint64_t v8 = *(void *)(a1 + 160);
  if (!dword_26B11BA34) {
    int v7 = *(_DWORD *)(v8 + 120 * v6 + 116);
  }
  int v9 = *(_DWORD *)(a1 + 68);
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(v8 + 120 * v6 + 16), v71, v87))
  {
    CFTypeID v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      CFTypeID v10 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v10;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      ActivateSecondaryScalerOutputInFrameReceiver();
    }
    return;
  }
  int v11 = v7 - v9;
  unsigned int v12 = *(_DWORD *)(a1 + 676);
  if (v12)
  {
    double v13 = (double)v12 / 1000000.0;
    uint64_t v14 = *(void *)(a1 + 160);
    unsigned int v15 = *(_DWORD *)(a1 + 48);
    unsigned int v16 = *(_DWORD *)(a1 + 168);
    if (v15 < v16) {
      unsigned int v16 = 0;
    }
    if (v14) {
      uint64_t v17 = v14 + 120 * v6;
    }
    else {
      uint64_t v17 = 120 * (v15 - v16);
    }
    float v18 = *(float *)(v17 + 108);
    if (v18 == 0.0) {
      float v19 = (float)HIDWORD(v71[0]);
    }
    else {
      float v19 = v18 * 256.0;
    }
    if (v11 + 2 * (v13 / (1.0 / (float)(v19 * 0.0039062))) >= 0xA) {
      int v11 = 10;
    }
    else {
      v11 += 2 * (v13 / (1.0 / (float)(v19 * 0.0039062)));
    }
  }
  unsigned int valuePtr = -*(_DWORD *)(a1 + 904) & 0xF;
  uint64_t v20 = *(__CVPixelBufferPool **)(a1 + 1024);
  if (v20)
  {
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v20);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x263F040D8]);
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    }
  }
  int32x2_t v86 = 0;
  uint64_t v69 = 0;
  if (H16ISP::getFrameFormatMetaInfo(*(_DWORD *)(a1 + 896), &v67))
  {
    int v23 = DWORD1(v67);
    BOOL v24 = BYTE8(v67) != 0;
  }
  else
  {
    uint64_t v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      uint64_t v25 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v25;
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      ActivateSecondaryScalerOutputInFrameReceiver();
    }
    int v23 = 0;
    BOOL v24 = 0;
  }
  uint64_t v26 = *(__CVPixelBufferPool **)(a1 + 1024);
  if (!v26)
  {
    HIDWORD(v69) = *(_DWORD *)(a1 + 900);
    LODWORD(v69) = *(_DWORD *)(a1 + 904);
LABEL_37:
    if (H16ISP::H16ISPDevice::SetSecondaryScalerSource(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), *(unsigned __int8 *)(a1 + 1072)))
    {
      uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v31 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v31;
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        ActivateSecondaryScalerOutputInFrameReceiver();
      }
    }
    else
    {
      if (HIDWORD(v67) <= 0x1B && ((1 << SBYTE12(v67)) & 0xE000002) != 0
        || (*(_DWORD *)(a1 + 3920) | 2) == 3 && HIDWORD(v67) <= 0x13 && ((1 << SBYTE12(v67)) & 0xC0001) != 0
        || (*(_DWORD *)(a1 + 3916) - 1) < 2)
      {
        char v32 = 0;
        char v33 = 0;
      }
      else
      {
        char v33 = 1;
        char v32 = v24;
      }
      long long v65 = 0u;
      long long v66 = 0u;
      GenerateBufferTagsForOutput(a1, a1 + 880, (uint64_t)&v65);
      uint64_t v34 = *(void *)(a1 + 136);
      long long v63 = v65;
      long long v64 = v66;
      int v35 = H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(v34, 10, v72);
      uint64_t v36 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v36 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v36;
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        int v37 = v11 + 1 + *(_DWORD *)(a1 + 944);
        *(_DWORD *)int buf = 136315650;
        uint64_t v81 = "ActivateSecondaryScalerOutputInFrameReceiver";
        __int16 v82 = 1024;
        int v83 = v37;
        __int16 v84 = 1024;
        int v85 = v11;
        _os_log_impl(&dword_24680F000, v36, OS_LOG_TYPE_INFO, "%s - YUV2 pool size=%d,prime=%d\n", buf, 0x18u);
      }
      if (v35)
      {
        uint64_t v38 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v38 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v38;
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          ActivateSecondaryScalerOutputInFrameReceiver();
        }
      }
      else
      {
        char v57 = v32;
        char v58 = v33;
        Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(a1 + 136), 10);
        unint64_t v59 = *(double *)(a1 + 928) | ((unint64_t)*(double *)(a1 + 936) << 32);
        unint64_t v60 = (int)*(double *)(a1 + 912) | ((unint64_t)(int)*(double *)(a1 + 920) << 32);
        if (v68 == 2 || DWORD1(v67) == 35 || DWORD1(v67) == 36) {
          int32x2_t v86 = *(int32x2_t *)(BufferPool + 44);
        }
        uint64_t v41 = *(void *)(a2 + 24);
        uint64_t v42 = *(unsigned int *)(a1 + 132);
        uint64_t v43 = *(unsigned __int16 *)(a1 + 900);
        uint64_t v44 = *(unsigned __int16 *)(a1 + 904);
        uint64_t v45 = valuePtr;
        uint64_t v46 = HIDWORD(v69);
        int v47 = v69;
        int v48 = ColorRangeForOutput(a1, a1 + 880);
        if (H16ISP::H16ISPDevice::SetSecondaryBESConfig(v41, v42, v60, v59, v43, v44, v45, v46, v47, v23, v48, &v86))
        {
          uint64_t v49 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            uint64_t v49 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v49;
          }
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
            ActivateSecondaryScalerOutputInFrameReceiver();
          }
        }
        else
        {
          unsigned int v50 = *(H16ISP::H16ISPFrameReceiver **)(a1 + 136);
          if ((*(_DWORD *)v50 - 1) <= 1
            && H16ISP::H16ISPFrameReceiver::SendFWInitialBuffers(v50, 10))
          {
            uint64_t v51 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              uint64_t v51 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v51;
            }
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
              ActivateSecondaryScalerOutputInFrameReceiver();
            }
          }
          else
          {
            if (!*(unsigned char *)(a1 + 952)) {
              goto LABEL_102;
            }
            if (*(unsigned char *)(*(void *)(a1 + 136) + 453)) {
              goto LABEL_102;
            }
            v61[10] = v76;
            v61[11] = v77;
            v61[12] = v78;
            int v62 = v79;
            v61[6] = v72;
            v61[7] = v73;
            v61[8] = v74;
            v61[9] = v75;
            v61[2] = v71[2];
            v61[3] = v71[3];
            v61[4] = v71[4];
            v61[5] = v71[5];
            v61[0] = v71[0];
            v61[1] = v71[1];
            if (AddRawPoolToFrameReceiver(a1, a2, (uint64_t)v61))
            {
              uint64_t v56 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v56 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v56;
              }
              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
                ActivateSecondaryScalerOutputInFrameReceiver();
              }
            }
            else
            {
LABEL_102:
              if (H16ISP::H16ISPDevice::SetScalerChromaSampleOffset(*(H16ISP::H16ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 132), v57, v58, 1))
              {
                uint64_t v52 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  uint64_t v52 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v52;
                }
                if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
                  ActivateSecondaryScalerOutputInFrameReceiver();
                }
              }
              else
              {
                unsigned int v53 = vcvtms_u32_f32(*(float *)(a1 + 1016) * 256.0);
                if (v53) {
                  int v54 = v53;
                }
                else {
                  int v54 = HIDWORD(v71[0]);
                }
                if (H16ISP::H16ISPDevice::ISP_SetMaxOutputRate(*(H16ISP::H16ISPDevice **)(a2 + 24), 9, v54))
                {
                  uint64_t v55 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                  {
                    uint64_t v55 = os_log_create("com.apple.isp", "plugin");
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v55;
                  }
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                    ActivateSecondaryScalerOutputInFrameReceiver();
                  }
                }
                else
                {
                  SetMetaDataOptionsOnFrameReceiver(a1, a2);
                }
              }
            }
          }
        }
      }
    }
    return;
  }
  CFDictionaryRef v27 = CVPixelBufferPoolGetPixelBufferAttributes(v26);
  if (v27)
  {
    CFDictionaryRef v28 = v27;
    CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v27, (const void *)*MEMORY[0x263F04240]);
    CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v28, (const void *)*MEMORY[0x263F04118]);
    CFNumberGetValue(v29, kCFNumberIntType, (char *)&v69 + 4);
    CFNumberGetValue(v30, kCFNumberIntType, &v69);
    goto LABEL_37;
  }
  uint64_t v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    uint64_t v39 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v39;
  }
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
    ActivateSecondaryScalerOutputInFrameReceiver();
  }
}

uint64_t H16ISP::H16ISPDevice::SetSecondaryScalerSource(H16ISP::H16ISPDevice *a1, __int16 a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 2070;
  __int16 v9 = a2;
  int v10 = a3;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::H16ISPDevice::SetSecondaryBESConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, int32x2_t *a12)
{
  unsigned int v12 = (H16ISP::H16ISPDevice *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v12 + 1187) <= v13) {
    return 3758097090;
  }
  int v20 = v19;
  int v21 = v18;
  unsigned int v22 = v17;
  unsigned int v23 = v16;
  uint64_t v24 = v15;
  unint64_t v25 = v14;
  unsigned int v26 = v13;
  CFDictionaryRef v27 = v12;
  uint64_t v28 = H16ISP::H16ISPDevice::ISP_EnableSensorPower(v12, v13, 1u, 0);
  if (!v28)
  {
    bzero(v35, 0x1CuLL);
    __int16 v36 = 2060;
    unsigned int v37 = v26;
    unint64_t v38 = v25;
    uint64_t v39 = v24;
    uint64_t v28 = H16ISP::H16ISPDevice::ISP_SendCommand(v27, v35, 0x1Cu, 0, 0xFFFFFFFF);
    if (!v28)
    {
      bzero(v35, 0x38uLL);
      __int16 v36 = 2825;
      unsigned int v37 = v26;
      unint64_t v38 = __PAIR64__(v22, v23);
      LODWORD(v39) = a11;
      int v44 = v20;
      int v41 = v21;
      int v42 = a9;
      switch(a10)
      {
        case 0:
          char v43 = 0;
          goto LABEL_16;
        case 1:
          char v43 = 0;
          HIDWORD(v39) = 1;
          *(_DWORD *)uint64_t v40 = (2 * v20 + 63) & 0xFFFFFFC0;
          break;
        case 13:
          char v43 = 1;
LABEL_16:
          unsigned int v31 = (v20 + 63) & 0xFFFFFFC0;
          HIDWORD(v39) = 0;
          goto LABEL_17;
        case 15:
          int v32 = 18;
          char v43 = 0;
          goto LABEL_20;
        case 16:
          int v32 = 18;
          char v43 = 1;
LABEL_20:
          int v33 = 2 * v20;
          goto LABEL_22;
        case 18:
          int v32 = 19;
          char v43 = 0;
          int v33 = (2 * ((2863311531u * (unint64_t)(v20 + 2)) >> 32)) & 0xFFFFFFFC;
LABEL_22:
          HIDWORD(v39) = v32;
          *(_DWORD *)uint64_t v40 = (v33 + 63) & 0xFFFFFFC0;
          *(_DWORD *)&v40[4] = *(_DWORD *)v40;
          break;
        case 22:
          HIDWORD(v39) = 0;
          char v43 = 1;
          int32x2_t v30 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(vdup_n_s32(32 * v23), (int32x2_t)0x1E0000003E0), (int8x8_t)0x3FFE00003FFC00);
          goto LABEL_11;
        case 23:
          HIDWORD(v39) = 19;
          char v43 = 1;
          int32x2_t v30 = vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32(v23), (int32x2_t)0xF0000001FLL), (uint32x2_t)0xFFFFFFFCFFFFFFFBLL), (int32x2_t)0x14000000500);
          goto LABEL_11;
        case 24:
        case 26:
        case 28:
          HIDWORD(v39) = 0;
          goto LABEL_10;
        case 25:
        case 27:
        case 29:
          HIDWORD(v39) = 19;
LABEL_10:
          char v43 = 1;
          int32x2_t v30 = *a12;
LABEL_11:
          *(int32x2_t *)uint64_t v40 = v30;
          break;
        case 31:
        case 32:
        case 33:
        case 34:
          HIDWORD(v39) = 26;
          char v43 = 1;
          goto LABEL_28;
        case 35:
          int v34 = 25;
          goto LABEL_27;
        case 36:
          int v34 = 26;
LABEL_27:
          HIDWORD(v39) = v34;
          char v43 = 0;
LABEL_28:
          *(int32x2_t *)&v40[4] = *a12;
          break;
        default:
          char v43 = 0;
          unsigned int v31 = (v20 + 63) & 0xFFFFFFC0;
          HIDWORD(v39) = a10;
LABEL_17:
          *(_DWORD *)uint64_t v40 = v31;
          *(_DWORD *)&v40[4] = v31;
          break;
      }
      uint64_t v28 = H16ISP::H16ISPDevice::ISP_SendCommand(v27, v35, 0x38u, 0, 0xFFFFFFFF);
      if (v28) {
        H16ISP::H16ISPDevice::ISP_EnableSensorPower(v27, v26, 0, 0);
      }
    }
  }
  return v28;
}

uint64_t H16ISP::H16ISPDevice::ISP_SetMaxOutputRate(H16ISP::H16ISPDevice *a1, int a2, int a3)
{
  bzero(v7, 0x10uLL);
  __int16 v8 = 21;
  int v9 = a3;
  int v10 = a2;
  return H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t (*_GLOBAL__sub_I_H16ISPCaptureDevice_cpp())(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v0 = *MEMORY[0x263F2CCA8];
  kMetadataOutputConfigurationKeys[0] = *MEMORY[0x263F2CCB0];
  *(void *)algn_26B11C058 = v0;
  uint64_t v1 = *MEMORY[0x263F2CC90];
  qword_26B11C060 = *MEMORY[0x263F2CD48];
  unk_26B11C068 = v1;
  uint64_t v2 = *MEMORY[0x263F2CD40];
  qword_26B11C070 = *MEMORY[0x263F2CC88];
  unk_26B11C078 = v2;
  uint64_t v3 = *MEMORY[0x263F2CC58];
  qword_26B11C080 = *MEMORY[0x263F2CC60];
  unk_26B11C088 = v3;
  uint64_t v4 = *MEMORY[0x263F2CC80];
  qword_26B11C090 = *MEMORY[0x263F2CD28];
  unk_26B11C098 = v4;
  uint64_t v5 = *MEMORY[0x263F2CD38];
  qword_26B11C0A0 = *MEMORY[0x263F2CC78];
  unk_26B11C0A8 = v5;
  uint64_t v6 = *MEMORY[0x263F2CC68];
  qword_26B11C0B0 = *MEMORY[0x263F2CC70];
  unk_26B11C0B8 = v6;
  uint64_t v7 = *MEMORY[0x263F2CD08];
  qword_26B11C0C0 = *MEMORY[0x263F2CD30];
  unk_26B11C0C8 = v7;
  uint64_t v8 = *MEMORY[0x263F2CD80];
  qword_26B11C0D0 = *MEMORY[0x263F2CD00];
  unk_26B11C0D8 = v8;
  uint64_t v9 = *MEMORY[0x263F2CCD0];
  qword_26B11C0E0 = *MEMORY[0x263F2CCD8];
  unk_26B11C0E8 = v9;
  uint64_t v10 = *MEMORY[0x263F2CCC8];
  qword_26B11C0F0 = *MEMORY[0x263F2CD60];
  unk_26B11C0F8 = v10;
  uint64_t v11 = *MEMORY[0x263F2CD58];
  qword_26B11C100 = *MEMORY[0x263F2CCC0];
  unk_26B11C108 = v11;
  xmmword_26B11B9CC = 0u;
  xmmword_26B11B9B0 = 0u;
  unk_26B11B9C0 = 0u;
  xmmword_26B11B990 = 0u;
  unk_26B11B9A0 = 0u;
  xmmword_26B11B970 = 0u;
  unk_26B11B980 = 0u;
  xmmword_26B11B950 = 0u;
  unk_26B11B960 = 0u;
  xmmword_26B11B930 = 0u;
  unk_26B11B940 = 0u;
  xmmword_26B11B910 = 0u;
  unk_26B11B920 = 0u;
  xmmword_26B11B8F0 = 0u;
  unk_26B11B900 = 0u;
  xmmword_26B11B8D0 = 0u;
  unk_26B11B8E0 = 0u;
  xmmword_26B11B8B0 = 0u;
  unk_26B11B8C0 = 0u;
  xmmword_26B11B8A0 = 0u;
  uint64_t v12 = *MEMORY[0x263F2C2C8];
  streamProperties[0] = *MEMORY[0x263F2DBC8];
  *(void *)algn_26B11C1B8 = v12;
  qword_26B11C1C0 = 0;
  unk_26B11C1C8 = CopyBufferQueue;
  qword_26B11C1D0 = 0x300000000;
  dword_26B11C1D8 = 63;
  qword_26B11C1E0 = *MEMORY[0x263F2E048];
  unk_26B11C1E8 = v12;
  qword_26B11C1F0 = 0;
  unk_26B11C1F8 = CopyStillImageBufferQueue;
  qword_26B11C200 = 0x300000000;
  dword_26B11C208 = 31;
  uint64_t v13 = *MEMORY[0x263F2C2D8];
  qword_26B11C210 = *MEMORY[0x263F2E088];
  unk_26B11C218 = v13;
  qword_26B11C220 = 0;
  unk_26B11C228 = CopySupportedFormatsArray;
  qword_26B11C230 = 0x300000000;
  dword_26B11C238 = 63;
  uint64_t v14 = *MEMORY[0x263F2C2E0];
  qword_26B11C240 = *MEMORY[0x263F2DD68];
  unk_26B11C248 = v14;
  qword_26B11C250 = 0;
  unk_26B11C258 = CopyFormatDescription;
  qword_26B11C260 = 0x300000000;
  dword_26B11C268 = 63;
  uint64_t v15 = *MEMORY[0x263F2C2E8];
  qword_26B11C270 = *MEMORY[0x263F2DEF0];
  unk_26B11C278 = v15;
  qword_26B11C280 = (uint64_t)SetMaximumFrameRate;
  qword_26B11C288 = (uint64_t)CopyMaximumFrameRate;
  qword_26B11C290 = 0x300000000;
  dword_26B11C298 = 63;
  qword_26B11C2A0 = *MEMORY[0x263F2DEE8];
  unk_26B11C2A8 = v15;
  qword_26B11C2B0 = (uint64_t)SetMaximumAllowedFrameRate;
  qword_26B11C2B8 = (uint64_t)CopyMaximumAllowedFrameRate;
  qword_26B11C2C0 = 0x300000000;
  dword_26B11C2C8 = 63;
  qword_26B11C2D0 = *MEMORY[0x263F2C4E0];
  uint64_t v16 = qword_26B11C2D0;
  unk_26B11C2D8 = v13;
  qword_26B11C2E0 = 0;
  unk_26B11C2E8 = CopySupportedPropertiesDictionary;
  qword_26B11C2F0 = 0;
  dword_26B11C2F8 = 63;
  qword_26B11C300 = *MEMORY[0x263F2DD70];
  unk_26B11C308 = v15;
  qword_26B11C310 = (uint64_t)SetFormatIndex;
  qword_26B11C318 = (uint64_t)CopyFormatIndex;
  qword_26B11C320 = 0x300000000;
  dword_26B11C328 = 63;
  qword_26B11C330 = *MEMORY[0x263F2DF20];
  unk_26B11C338 = v15;
  qword_26B11C340 = (uint64_t)SetMinimumFrameRate;
  qword_26B11C348 = (uint64_t)CopyMinimumFrameRate;
  qword_26B11C350 = 0x300000000;
  dword_26B11C358 = 63;
  uint64_t v17 = *MEMORY[0x263F2C2F8];
  qword_26B11C360 = *MEMORY[0x263F2E050];
  uint64_t v55 = qword_26B11C360;
  unk_26B11C368 = v17;
  qword_26B11C370 = (uint64_t)StillImageCaptureNow;
  unk_26B11C378 = 0;
  qword_26B11C380 = 0x300000000;
  dword_26B11C388 = 31;
  qword_26B11C390 = *MEMORY[0x263F2DB78];
  unk_26B11C398 = v17;
  qword_26B11C3A0 = (uint64_t)AutoAENow;
  unk_26B11C3A8 = 0;
  qword_26B11C3B0 = 0x300000000;
  dword_26B11C3B8 = 31;
  qword_26B11C3C0 = *MEMORY[0x263F2DBA0];
  qword_26B11C3C8 = v17;
  uint64_t v54 = qword_26B11C3C0;
  qword_26B11C3D0 = (uint64_t)AutoFocusNow;
  qword_26B11C3D8 = 0;
  qword_26B11C3E0 = 0x300000002;
  dword_26B11C3E8 = 31;
  qword_26B11C3F0 = *MEMORY[0x263F2DC80];
  qword_26B11C3F8 = *MEMORY[0x263F2C2C0];
  uint64_t v18 = qword_26B11C3F8;
  qword_26B11C400 = (uint64_t)SetDeferAdditionOfAttachments;
  qword_26B11C408 = (uint64_t)CopyDeferAdditionOfAttachments;
  qword_26B11C410 = 0x300000000;
  dword_26B11C418 = 63;
  qword_26B11C420 = *MEMORY[0x263F2DF98];
  qword_26B11C428 = *MEMORY[0x263F2C2F0];
  uint64_t v19 = qword_26B11C428;
  qword_26B11C430 = 0;
  qword_26B11C438 = (uint64_t)CopyPortType;
  qword_26B11C440 = 0;
  dword_26B11C448 = 63;
  qword_26B11C450 = *MEMORY[0x263F2E0B8];
  qword_26B11C458 = qword_26B11C3F8;
  qword_26B11C460 = (uint64_t)SetTemporalNoiseReductionEnabled;
  qword_26B11C468 = (uint64_t)CopyTemporalNoiseReductionEnabled;
  qword_26B11C470 = 0x300000000;
  dword_26B11C478 = 31;
  qword_26B11C480 = *MEMORY[0x263F2E0A8];
  qword_26B11C488 = v13;
  qword_26B11C490 = (uint64_t)SetTemporalNoiseReductionConfiguration;
  qword_26B11C498 = (uint64_t)CopyTemporalNoiseReductionConfiguration;
  qword_26B11C4A0 = 0x300000000;
  dword_26B11C4A8 = 31;
  qword_26B11C4B0 = *MEMORY[0x263F2E0B0];
  qword_26B11C4B8 = v13;
  qword_26B11C4C0 = 0;
  qword_26B11C4C8 = (uint64_t)CopyTemporalNoiseReductionConfigurationSupportedKeys;
  qword_26B11C4D0 = 0x100000000;
  dword_26B11C4D8 = 31;
  qword_26B11C4E0 = *MEMORY[0x263F2DD18];
  qword_26B11C4E8 = qword_26B11C3F8;
  qword_26B11C4F0 = (uint64_t)SetFaceDetectionEnabled;
  qword_26B11C4F8 = (uint64_t)CopyFaceDetectionEnabled;
  qword_26B11C500 = 0x300000000;
  dword_26B11C508 = 31;
  qword_26B11C510 = @"FaceDetectionMode";
  qword_26B11C518 = v15;
  qword_26B11C520 = (uint64_t)SetFaceDetectionMode;
  qword_26B11C528 = (uint64_t)CopyFaceDetectionMode;
  qword_26B11C530 = 0x300000000;
  dword_26B11C538 = 31;
  qword_26B11C540 = *MEMORY[0x263F2DE98];
  qword_26B11C548 = v13;
  qword_26B11C550 = (uint64_t)SetLuxAdaptiveParameters;
  qword_26B11C558 = (uint64_t)CopyLuxAdaptiveParameters;
  qword_26B11C560 = 0x300000000;
  dword_26B11C568 = 31;
  qword_26B11C570 = *MEMORY[0x263F2DF28];
  qword_26B11C578 = v13;
  qword_26B11C580 = 0;
  qword_26B11C588 = (uint64_t)CopyModuleInfo;
  qword_26B11C590 = 0x300000000;
  dword_26B11C598 = 63;
  qword_26B11C5A0 = *MEMORY[0x263F2DC20];
  qword_26B11C5A8 = v13;
  qword_26B11C5B0 = 0;
  qword_26B11C5B8 = (uint64_t)CopyColorHistogram;
  qword_26B11C5C0 = 0x300000020;
  dword_26B11C5C8 = 31;
  qword_26B11C5D0 = *MEMORY[0x263F2DB30];
  qword_26B11C5D8 = v15;
  qword_26B11C5E0 = (uint64_t)SetAWBScheme;
  qword_26B11C5E8 = (uint64_t)CopyAWBScheme;
  qword_26B11C5F0 = 0x300000020;
  dword_26B11C5F8 = 31;
  qword_26B11C600 = *MEMORY[0x263F2DED8];
  qword_26B11C608 = v15;
  qword_26B11C610 = (uint64_t)SetMaxIntegrationTime;
  qword_26B11C618 = (uint64_t)CopyMaxIntegrationTime;
  qword_26B11C620 = 0x300000000;
  dword_26B11C628 = 31;
  qword_26B11C630 = *MEMORY[0x263F2DF08];
  qword_26B11C638 = v15;
  qword_26B11C640 = 0;
  qword_26B11C648 = (uint64_t)CopyMinIntegrationTime;
  qword_26B11C650 = 0x300000000;
  dword_26B11C658 = 31;
  qword_26B11C660 = *MEMORY[0x263F2E018];
  qword_26B11C668 = v15;
  qword_26B11C670 = 0;
  qword_26B11C678 = (uint64_t)CopySensorTemperature;
  qword_26B11C680 = 0x300000000;
  dword_26B11C688 = 31;
  qword_26B11C690 = *MEMORY[0x263F2DFE0];
  qword_26B11C698 = v15;
  qword_26B11C6A0 = 0;
  qword_26B11C6A8 = (uint64_t)CopySensorPixelClock;
  qword_26B11C6B0 = 0x300000000;
  dword_26B11C6B8 = 15;
  qword_26B11C6C0 = *MEMORY[0x263F2DB60];
  qword_26B11C6C8 = v13;
  qword_26B11C6D0 = 0;
  qword_26B11C6D8 = (uint64_t)CopyAlternateOutputSizeLimits;
  qword_26B11C6E0 = 0x300000000;
  dword_26B11C6E8 = 31;
  qword_26B11C6F0 = *MEMORY[0x263F2DAE8];
  qword_26B11C6F8 = qword_26B11C3F8;
  qword_26B11C700 = (uint64_t)SetAEStatsEnable;
  qword_26B11C708 = 0;
  qword_26B11C710 = 0x300000000;
  dword_26B11C718 = 31;
  qword_26B11C720 = *MEMORY[0x263F2DAC8];
  qword_26B11C728 = v15;
  qword_26B11C730 = (uint64_t)SetAEMaxGain;
  qword_26B11C738 = (uint64_t)CopyAEMaxGain;
  qword_26B11C740 = 0x300000000;
  dword_26B11C748 = 31;
  qword_26B11C750 = *MEMORY[0x263F2DAD8];
  qword_26B11C758 = v15;
  qword_26B11C760 = (uint64_t)SetAEMinGain;
  qword_26B11C768 = (uint64_t)CopyAEMinGain;
  qword_26B11C770 = 0x300000000;
  dword_26B11C778 = 31;
  qword_26B11C780 = *MEMORY[0x263F2DAB0];
  qword_26B11C788 = v15;
  qword_26B11C790 = (uint64_t)SetAEGainThresholdForFlickerZoneIntegrationTimeTransition;
  qword_26B11C798 = (uint64_t)CopyAEGainThresholdForFlickerZoneIntegrationTimeTransition;
  qword_26B11C7A0 = 0x300000000;
  dword_26B11C7A8 = 31;
  qword_26B11C7B0 = *MEMORY[0x263F2DAB8];
  qword_26B11C7B8 = v15;
  qword_26B11C7C0 = (uint64_t)SetAEIntegrationTimeForUnityGainToMinGainTransition;
  qword_26B11C7C8 = (uint64_t)CopyAEIntegrationTimeForUnityGainToMinGainTransition;
  qword_26B11C7D0 = 0x300000000;
  dword_26B11C7D8 = 31;
  qword_26B11C7E0 = *MEMORY[0x263F2DCF0];
  qword_26B11C7E8 = v13;
  qword_26B11C7F0 = 0;
  qword_26B11C7F8 = (uint64_t)CopyErrorCounters;
  qword_26B11C800 = 0x300000000;
  dword_26B11C808 = 63;
  qword_26B11C810 = *MEMORY[0x263F2DD28];
  qword_26B11C818 = v13;
  qword_26B11C820 = (uint64_t)SetFaceDetectionRectangleOfInterest;
  qword_26B11C828 = (uint64_t)CopyFaceDetectionRectangleOfInterest;
  qword_26B11C830 = 0x300000000;
  dword_26B11C838 = 31;
  qword_26B11C840 = *MEMORY[0x263F2DB98];
  qword_26B11C848 = qword_26B11C428;
  uint64_t v53 = qword_26B11C840;
  qword_26B11C850 = (uint64_t)SetAutoFocusMode;
  qword_26B11C858 = (uint64_t)CopyAutoFocusMode;
  qword_26B11C860 = 0x300000002;
  dword_26B11C868 = 31;
  qword_26B11C870 = *MEMORY[0x263F2DEC8];
  qword_26B11C878 = v13;
  uint64_t v52 = qword_26B11C870;
  qword_26B11C880 = (uint64_t)SetMatrixFocusParams;
  qword_26B11C888 = (uint64_t)CopyMatrixFocusParams;
  qword_26B11C890 = 0x300000002;
  dword_26B11C898 = 31;
  qword_26B11C8A0 = *MEMORY[0x263F2C4D8];
  qword_26B11C8A8 = v13;
  qword_26B11C8B0 = 0;
  qword_26B11C8B8 = (uint64_t)CopyMatrixFocusDebugData;
  qword_26B11C8C0 = 0x300000002;
  dword_26B11C8C8 = 31;
  qword_26B11C8D0 = *MEMORY[0x263F2DF10];
  qword_26B11C8D8 = v15;
  qword_26B11C8E0 = 0;
  qword_26B11C8E8 = (uint64_t)CopyMFDCameraFaceDown;
  qword_26B11C8F0 = 0x100000002;
  dword_26B11C8F8 = 15;
  qword_26B11C900 = *MEMORY[0x263F2DF18];
  qword_26B11C908 = v15;
  qword_26B11C910 = 0;
  qword_26B11C918 = (uint64_t)CopyMFDCameraFaceUp;
  qword_26B11C920 = 0x100000002;
  dword_26B11C928 = 15;
  qword_26B11C930 = *MEMORY[0x263F2DC18];
  qword_26B11C938 = v15;
  qword_26B11C940 = (uint64_t)SetClientMaxBufferCountHint;
  qword_26B11C948 = 0;
  qword_26B11C950 = 0x300000000;
  dword_26B11C958 = 63;
  qword_26B11C960 = *MEMORY[0x263F2DB70];
  qword_26B11C968 = qword_26B11C3F8;
  qword_26B11C970 = (uint64_t)SetAttachRAW;
  qword_26B11C978 = 0;
  qword_26B11C980 = 0x300000000;
  dword_26B11C988 = 63;
  qword_26B11C990 = *MEMORY[0x263F2DC30];
  qword_26B11C998 = qword_26B11C428;
  qword_26B11C9A0 = (uint64_t)SetColorRange;
  qword_26B11C9A8 = 0;
  qword_26B11C9B0 = 0x300000020;
  dword_26B11C9B8 = 31;
  qword_26B11C9C0 = *MEMORY[0x263F2DE70];
  qword_26B11C9C8 = v17;
  uint64_t v51 = qword_26B11C9C0;
  qword_26B11C9D0 = (uint64_t)LockAWBNow;
  qword_26B11C9D8 = 0;
  qword_26B11C9E0 = 0x300000020;
  dword_26B11C9E8 = 31;
  qword_26B11C9F0 = *MEMORY[0x263F2E118];
  qword_26B11C9F8 = v17;
  uint64_t v50 = qword_26B11C9F0;
  qword_26B11CA00 = (uint64_t)UnlockAWBNow;
  qword_26B11CA08 = 0;
  qword_26B11CA10 = 0x300000020;
  dword_26B11CA18 = 31;
  qword_26B11CA20 = *MEMORY[0x263F2DE60];
  qword_26B11CA28 = v17;
  uint64_t v49 = qword_26B11CA20;
  qword_26B11CA30 = (uint64_t)LockAENow;
  qword_26B11CA38 = 0;
  qword_26B11CA40 = 0x300000000;
  dword_26B11CA48 = 31;
  qword_26B11CA50 = *MEMORY[0x263F2E110];
  qword_26B11CA58 = v17;
  uint64_t v48 = qword_26B11CA50;
  qword_26B11CA60 = (uint64_t)UnlockAENow;
  qword_26B11CA68 = 0;
  qword_26B11CA70 = 0x300000000;
  dword_26B11CA78 = 31;
  qword_26B11CA80 = *MEMORY[0x263F2E100];
  qword_26B11CA88 = v15;
  qword_26B11CA90 = (uint64_t)SetTorchLevel;
  qword_26B11CA98 = 0;
  qword_26B11CAA0 = 1;
  dword_26B11CAA8 = 31;
  qword_26B11CAB0 = *MEMORY[0x263F2DB20];
  qword_26B11CAB8 = v13;
  uint64_t v47 = qword_26B11CAB0;
  qword_26B11CAC0 = (uint64_t)SetAFWindowParams;
  qword_26B11CAC8 = 0;
  qword_26B11CAD0 = 0x300000000;
  dword_26B11CAD8 = 31;
  qword_26B11CAE0 = *MEMORY[0x263F2DAF8];
  uint64_t v46 = qword_26B11CAE0;
  qword_26B11CAE8 = v13;
  qword_26B11CB10 = *MEMORY[0x263F2DB68];
  qword_26B11CAF0 = (uint64_t)SetAEWindowParams;
  qword_26B11CAF8 = 0;
  qword_26B11CB00 = 0x300000000;
  dword_26B11CB08 = 31;
  qword_26B11CB18 = v17;
  qword_26B11CB20 = (uint64_t)Apply3AWindowSettings;
  qword_26B11CB28 = 0;
  qword_26B11CB30 = 0x300000000;
  dword_26B11CB38 = 31;
  qword_26B11CB40 = *MEMORY[0x263F2DAA0];
  uint64_t v20 = qword_26B11CB40;
  qword_26B11CB48 = v13;
  qword_26B11CB50 = (uint64_t)SetAEFaceDetectionMetering;
  qword_26B11CB58 = 0;
  qword_26B11CB60 = 0x300000000;
  dword_26B11CB68 = 31;
  qword_26B11CB70 = *MEMORY[0x263F2DD00];
  qword_26B11CB78 = v13;
  uint64_t v45 = qword_26B11CB70;
  qword_26B11CB80 = (uint64_t)SetExposureBias;
  qword_26B11CB88 = 0;
  qword_26B11CB90 = 0x300000000;
  dword_26B11CB98 = 31;
  qword_26B11CBA0 = *MEMORY[0x263F2DA90];
  qword_26B11CBA8 = v15;
  uint64_t v44 = qword_26B11CBA0;
  qword_26B11CBB0 = (uint64_t)SetAEConvergenceSpeed;
  qword_26B11CBB8 = 0;
  qword_26B11CBC0 = 0x300000000;
  dword_26B11CBC8 = 31;
  qword_26B11CBD0 = *MEMORY[0x263F2DAE0];
  qword_26B11CBD8 = v15;
  uint64_t v43 = qword_26B11CBD0;
  qword_26B11CBE0 = (uint64_t)SetAEStability;
  qword_26B11CBE8 = 0;
  qword_26B11CBF0 = 0x300000000;
  dword_26B11CBF8 = 31;
  qword_26B11CC00 = *MEMORY[0x263F2DB18];
  qword_26B11CC08 = v13;
  uint64_t v42 = qword_26B11CC00;
  qword_26B11CC10 = (uint64_t)SetAFSearchPositions;
  qword_26B11CC18 = 0;
  qword_26B11CC20 = 0x300000002;
  dword_26B11CC28 = 31;
  qword_26B11CC30 = *MEMORY[0x263F2DEB8];
  uint64_t v41 = qword_26B11CC30;
  qword_26B11CC38 = v13;
  qword_26B11CC60 = *MEMORY[0x263F2E170];
  qword_26B11CC40 = (uint64_t)ManualFocusNow;
  qword_26B11CC48 = 0;
  qword_26B11CC50 = 0x300000002;
  dword_26B11CC58 = 31;
  qword_26B11CC68 = qword_26B11C3F8;
  qword_26B11CC70 = (uint64_t)SetVideoRecordingInProgress;
  qword_26B11CC78 = 0;
  qword_26B11CC80 = 0x300000000;
  dword_26B11CC88 = 31;
  qword_26B11CC90 = *MEMORY[0x263F2DDC8];
  qword_26B11CC98 = v13;
  uint64_t v40 = qword_26B11CC90;
  qword_26B11CCA0 = (uint64_t)SetHistogramParams;
  qword_26B11CCA8 = 0;
  qword_26B11CCB0 = 0x300000000;
  dword_26B11CCB8 = 31;
  qword_26B11CCC0 = *MEMORY[0x263F2DAD0];
  uint64_t v39 = qword_26B11CCC0;
  qword_26B11CCC8 = qword_26B11C428;
  qword_26B11CCF0 = *MEMORY[0x263F2DD38];
  qword_26B11CCD0 = (uint64_t)SetAEMeteringMode;
  qword_26B11CCD8 = 0;
  qword_26B11CCE0 = 0x300000000;
  dword_26B11CCE8 = 31;
  qword_26B11CCF8 = qword_26B11C428;
  qword_26B11CD00 = (uint64_t)SetFlashMode;
  qword_26B11CD08 = 0;
  qword_26B11CD10 = 0x300000001;
  dword_26B11CD18 = 31;
  qword_26B11CD20 = *MEMORY[0x263F2DB08];
  uint64_t v38 = qword_26B11CD20;
  qword_26B11CD28 = v13;
  qword_26B11CD50 = *MEMORY[0x263F2DAC0];
  qword_26B11CD30 = (uint64_t)SetAFEarlyOutParams;
  qword_26B11CD38 = 0;
  qword_26B11CD40 = 0x300000002;
  dword_26B11CD48 = 31;
  qword_26B11CD58 = qword_26B11C3F8;
  qword_26B11CD60 = (uint64_t)SetAEMatrixMetadataEnable;
  qword_26B11CD80 = *MEMORY[0x263F2DEB0];
  qword_26B11CD68 = 0;
  qword_26B11CD70 = 0x300000000;
  dword_26B11CD78 = 31;
  qword_26B11CD88 = v13;
  qword_26B11CD90 = (uint64_t)ManualAENow;
  qword_26B11CDB0 = *MEMORY[0x263F2DFB0];
  qword_26B11CD98 = 0;
  qword_26B11CDA0 = 0x300000000;
  dword_26B11CDA8 = 31;
  qword_26B11CDB8 = v13;
  qword_26B11CDC0 = (uint64_t)RawImageProcessBegin;
  qword_26B11CDE0 = *MEMORY[0x263F2DFC8];
  qword_26B11CDC8 = 0;
  qword_26B11CDD0 = 0x300000000;
  dword_26B11CDD8 = 31;
  qword_26B11CDE8 = v13;
  qword_26B11CDF0 = (uint64_t)RawImageProcessPrepare;
  qword_26B11CE10 = *MEMORY[0x263F2DFC0];
  qword_26B11CDF8 = 0;
  qword_26B11CE00 = 0x300000000;
  dword_26B11CE08 = 31;
  qword_26B11CE18 = v17;
  qword_26B11CE20 = (uint64_t)RawImageProcessGo;
  qword_26B11CE40 = *MEMORY[0x263F2DFB8];
  qword_26B11CE28 = 0;
  qword_26B11CE30 = 0x300000000;
  dword_26B11CE38 = 31;
  qword_26B11CE48 = v17;
  qword_26B11CE50 = (uint64_t)RawImageProcessEnd;
  qword_26B11CE70 = *MEMORY[0x263F2DAA8];
  qword_26B11CE58 = 0;
  qword_26B11CE60 = 0x300000000;
  dword_26B11CE68 = 31;
  qword_26B11CE78 = qword_26B11C3F8;
  qword_26B11CE80 = (uint64_t)SetAEGainConvergenceNormalizationEnable;
  qword_26B11CE88 = 0;
  qword_26B11CE90 = 0x300000000;
  dword_26B11CE98 = 31;
  qword_26B11CEA0 = *MEMORY[0x263F2DCD8];
  qword_26B11CEA8 = v15;
  uint64_t v37 = qword_26B11CEA0;
  qword_26B11CEB0 = (uint64_t)SetDeviceOrientation;
  qword_26B11CEB8 = 0;
  qword_26B11CEC0 = 0x300000000;
  dword_26B11CEC8 = 63;
  qword_26B11CED0 = *MEMORY[0x263F2DE78];
  qword_26B11CED8 = v17;
  uint64_t v36 = qword_26B11CED0;
  qword_26B11CEE0 = (uint64_t)LockBLCNow;
  qword_26B11CEE8 = 0;
  qword_26B11CEF0 = 0x300000000;
  dword_26B11CEF8 = 31;
  qword_26B11CF00 = *MEMORY[0x263F2E120];
  uint64_t v35 = qword_26B11CF00;
  qword_26B11CF08 = v17;
  qword_26B11CF30 = *MEMORY[0x263F2DCE0];
  qword_26B11CF10 = (uint64_t)UnlockBLCNow;
  qword_26B11CF18 = 0;
  qword_26B11CF20 = 0x300000000;
  dword_26B11CF28 = 31;
  qword_26B11CF38 = v15;
  qword_26B11CF40 = (uint64_t)SetDiagnosticMode;
  qword_26B11CF60 = *MEMORY[0x263F2DDE8];
  qword_26B11CF48 = 0;
  qword_26B11CF50 = 0x300000000;
  dword_26B11CF58 = 31;
  qword_26B11CF68 = v13;
  qword_26B11CF70 = (uint64_t)SetImageMapParams;
  qword_26B11CF90 = *MEMORY[0x263F2DB58];
  qword_26B11CF78 = 0;
  qword_26B11CF80 = 0x300000000;
  dword_26B11CF88 = 31;
  qword_26B11CF98 = v13;
  qword_26B11CFA0 = (uint64_t)SetAlternateOutputSize;
  qword_26B11CFC0 = *MEMORY[0x263F2E130];
  qword_26B11CFA8 = 0;
  qword_26B11CFB0 = 0x300000000;
  dword_26B11CFB8 = 31;
  qword_26B11CFC8 = qword_26B11C3F8;
  qword_26B11CFD0 = (uint64_t)SetUsePreviewBufferQueueForRawReprocessing;
  qword_26B11CFD8 = 0;
  qword_26B11CFE0 = 0x300000000;
  dword_26B11CFE8 = 31;
  qword_26B11CFF0 = *MEMORY[0x263F2DB10];
  uint64_t v34 = qword_26B11CFF0;
  qword_26B11CFF8 = qword_26B11C3F8;
  qword_26B11D020 = *MEMORY[0x263F2DA98];
  qword_26B11D000 = (uint64_t)SetAFPeakPredictionEnabled;
  qword_26B11D008 = 0;
  qword_26B11D010 = 0x300000000;
  dword_26B11D018 = 31;
  qword_26B11D028 = qword_26B11C3F8;
  qword_26B11D030 = (uint64_t)SetAEEnabled;
  qword_26B11D050 = *MEMORY[0x263F2DB28];
  qword_26B11D038 = 0;
  qword_26B11D040 = 0x300000000;
  dword_26B11D048 = 31;
  qword_26B11D058 = v13;
  qword_26B11D060 = (uint64_t)SetAWB1stGainManual;
  qword_26B11D080 = *MEMORY[0x263F2DE48];
  qword_26B11D068 = 0;
  qword_26B11D070 = 0x300000020;
  dword_26B11D078 = 31;
  qword_26B11D088 = v13;
  qword_26B11D090 = (uint64_t)SetLimitAERange;
  qword_26B11D0B0 = *MEMORY[0x263F2DC08];
  qword_26B11D098 = 0;
  qword_26B11D0A0 = 0x300000000;
  dword_26B11D0A8 = 31;
  qword_26B11D0B8 = qword_26B11C3F8;
  qword_26B11D0C0 = (uint64_t)SetChromaNoiseReductionEnabled;
  qword_26B11D0C8 = 0;
  qword_26B11D0D0 = 0x300000000;
  dword_26B11D0D8 = 31;
  qword_26B11D0E0 = *MEMORY[0x263F2DF88];
  qword_26B11D0E8 = v13;
  uint64_t v33 = qword_26B11D0E0;
  qword_26B11D0F0 = (uint64_t)PeakTrackingFocusNow;
  qword_26B11D0F8 = 0;
  qword_26B11D100 = 0x300000002;
  dword_26B11D108 = 31;
  qword_26B11D110 = *MEMORY[0x263F2DE80];
  qword_26B11D118 = v17;
  uint64_t v32 = qword_26B11D110;
  qword_26B11D120 = (uint64_t)LockLTMNow;
  qword_26B11D128 = 0;
  qword_26B11D130 = 0x300000000;
  dword_26B11D138 = 31;
  qword_26B11D140 = *MEMORY[0x263F2E128];
  uint64_t v31 = qword_26B11D140;
  qword_26B11D148 = v17;
  qword_26B11D170 = *MEMORY[0x263F2D9D0];
  qword_26B11D150 = (uint64_t)UnlockLTMNow;
  qword_26B11D158 = 0;
  qword_26B11D160 = 0x300000000;
  dword_26B11D168 = 31;
  qword_26B11D178 = v15;
  qword_26B11D180 = (uint64_t)SetMaxPerFrameExposureDelta;
  qword_26B11D188 = (uint64_t)CopyMaxPerFrameExposureDelta;
  qword_26B11D1A0 = *MEMORY[0x263F2DD50];
  qword_26B11D190 = 0x300000000;
  dword_26B11D198 = 31;
  qword_26B11D1A8 = v13;
  qword_26B11D1B0 = 0;
  qword_26B11D1B8 = (uint64_t)CopyFocusLastScanHistory;
  qword_26B11D1D0 = *MEMORY[0x263F2E040];
  qword_26B11D1C0 = 0x300000002;
  dword_26B11D1C8 = 31;
  qword_26B11D1D8 = qword_26B11C428;
  qword_26B11D1E0 = (uint64_t)SetSphereMode;
  qword_26B11D1E8 = (uint64_t)CopySphereMode;
  qword_26B11D200 = *MEMORY[0x263F2DF30];
  qword_26B11D1F0 = 0x300000004;
  dword_26B11D1F8 = 31;
  qword_26B11D208 = qword_26B11C3F8;
  qword_26B11D210 = (uint64_t)SetMotionDataFromISPEnabled;
  qword_26B11D230 = *MEMORY[0x263F2E178];
  qword_26B11D218 = 0;
  qword_26B11D220 = 0x300000010;
  dword_26B11D228 = 63;
  qword_26B11D238 = qword_26B11C3F8;
  qword_26B11D240 = (uint64_t)SetVideoStabilizationISPDebugDataEnabled;
  qword_26B11D260 = *MEMORY[0x263F2DED0];
  qword_26B11D248 = 0;
  qword_26B11D250 = 0x300000010;
  dword_26B11D258 = 31;
  qword_26B11D268 = v13;
  qword_26B11D270 = (uint64_t)SetMaxFrameCoalescingDuration;
  qword_26B11D278 = (uint64_t)CopyMaxFrameCoalescingDuration;
  qword_26B11D280 = 0x300000000;
  dword_26B11D288 = 31;
  qword_26B11D290 = *MEMORY[0x263F2DC50];
  uint64_t v21 = qword_26B11D290;
  qword_26B11D298 = v13;
  qword_26B11D2A0 = (uint64_t)SetContinuousAutoFocusNow;
  qword_26B11D2A8 = 0;
  qword_26B11D2B0 = 0x30000000ALL;
  dword_26B11D2B8 = 31;
  qword_26B11D2C0 = *MEMORY[0x263F2DE68];
  uint64_t v30 = qword_26B11D2C0;
  qword_26B11D2C8 = v17;
  qword_26B11D2F0 = *MEMORY[0x263F2DEC0];
  qword_26B11D2D0 = (uint64_t)SetLockAFNow;
  qword_26B11D2D8 = 0;
  qword_26B11D2E0 = 0x300000002;
  dword_26B11D2E8 = 31;
  qword_26B11D2F8 = v13;
  qword_26B11D300 = (uint64_t)SetManualWhiteBalanceGain;
  qword_26B11D320 = *MEMORY[0x263F2DDD8];
  qword_26B11D308 = 0;
  qword_26B11D310 = 0x300000000;
  dword_26B11D318 = 31;
  qword_26B11D328 = qword_26B11C3F8;
  qword_26B11D330 = (uint64_t)SetISPHallDataEnabled;
  qword_26B11D350 = *MEMORY[0x263F2DDE0];
  qword_26B11D338 = 0;
  qword_26B11D340 = 0x300000004;
  dword_26B11D348 = 63;
  qword_26B11D358 = qword_26B11C3F8;
  qword_26B11D360 = (uint64_t)SetISPMotionDataEnabled;
  qword_26B11D380 = *MEMORY[0x263F2DC58];
  qword_26B11D368 = 0;
  qword_26B11D370 = 0x300000010;
  dword_26B11D378 = 63;
  qword_26B11D388 = qword_26B11C3F8;
  qword_26B11D390 = (uint64_t)SetDebugHallDataFromISPEnabled;
  qword_26B11D3B0 = *MEMORY[0x263F2DC60];
  qword_26B11D398 = 0;
  qword_26B11D3A0 = 0x300000004;
  dword_26B11D3A8 = 63;
  qword_26B11D3B8 = qword_26B11C3F8;
  qword_26B11D3C0 = (uint64_t)SetDebugMotionDataFromISPEnabled;
  qword_26B11D3E0 = *MEMORY[0x263F2DD10];
  qword_26B11D3C8 = 0;
  qword_26B11D3D0 = 0x300000010;
  dword_26B11D3D8 = 63;
  qword_26B11D3E8 = v13;
  qword_26B11D3F0 = (uint64_t)SetFaceDetectionConfiguration;
  qword_26B11D3F8 = 0;
  qword_26B11D400 = 0x300000000;
  dword_26B11D408 = 31;
  qword_26B11D410 = *MEMORY[0x263F2E1B0];
  uint64_t v22 = qword_26B11D410;
  qword_26B11D418 = v15;
  qword_26B11D420 = (uint64_t)SetZoomFactor;
  qword_26B11D428 = (uint64_t)CopyZoomFactor;
  qword_26B11D440 = *MEMORY[0x263F2DEE0];
  qword_26B11D430 = 0x300000000;
  dword_26B11D438 = 31;
  qword_26B11D448 = v15;
  qword_26B11D450 = 0;
  qword_26B11D458 = (uint64_t)CopyMaxZoomFactor;
  qword_26B11D470 = *MEMORY[0x263F2E198];
  qword_26B11D460 = 0x300000000;
  dword_26B11D468 = 31;
  qword_26B11D478 = v13;
  qword_26B11D480 = 0;
  qword_26B11D488 = (uint64_t)CopyWhiteBalanceCalibrations;
  qword_26B11D4A0 = *MEMORY[0x263F2E1A0];
  qword_26B11D490 = 0x300000020;
  dword_26B11D498 = 31;
  qword_26B11D4A8 = v13;
  qword_26B11D4B0 = 0;
  qword_26B11D4B8 = (uint64_t)CopyWhiteBalanceGain;
  qword_26B11D4D0 = *MEMORY[0x263F2E180];
  qword_26B11D4C0 = 0x300000020;
  dword_26B11D4C8 = 31;
  qword_26B11D4D8 = qword_26B11C3F8;
  qword_26B11D4E0 = (uint64_t)SetVideoStabilizationISPOutputVectorsEnabled;
  qword_26B11D4E8 = 0;
  qword_26B11D4F0 = 0x300000010;
  dword_26B11D4F8 = 31;
  qword_26B11D500 = *MEMORY[0x263F2DB90];
  uint64_t v23 = qword_26B11D500;
  qword_26B11D508 = v17;
  qword_26B11D530 = *MEMORY[0x263F2DD40];
  qword_26B11D510 = (uint64_t)SetAutoFocusHintNow;
  qword_26B11D518 = 0;
  qword_26B11D520 = 0x30000000ALL;
  dword_26B11D528 = 31;
  qword_26B11D538 = v15;
  qword_26B11D540 = 0;
  qword_26B11D548 = (uint64_t)CopyFocalLength;
  qword_26B11D560 = *MEMORY[0x263F2DF90];
  qword_26B11D550 = 0x300000000;
  dword_26B11D558 = 63;
  qword_26B11D568 = v15;
  qword_26B11D570 = 0;
  qword_26B11D578 = (uint64_t)CopyPixelSize;
  qword_26B11D590 = *MEMORY[0x263F2DE30];
  qword_26B11D580 = 0x300000000;
  dword_26B11D588 = 63;
  qword_26B11D598 = qword_26B11C3F8;
  qword_26B11D5A0 = (uint64_t)SetLeaderFollowerAutoFocusEnabled;
  qword_26B11D5C0 = *MEMORY[0x263F2DE38];
  qword_26B11D5A8 = 0;
  qword_26B11D5B0 = 0x300000002;
  dword_26B11D5B8 = 31;
  qword_26B11D5C8 = v15;
  qword_26B11D5D0 = 0;
  qword_26B11D5D8 = (uint64_t)CopyLensFNumber;
  qword_26B11D5F0 = *MEMORY[0x263F2DD20];
  qword_26B11D5E0 = 0x300000000;
  dword_26B11D5E8 = 63;
  qword_26B11D5F8 = v15;
  qword_26B11D600 = (uint64_t)SetFaceDetectionMetadataCoordinateSpace;
  qword_26B11D620 = *MEMORY[0x263F2DF40];
  qword_26B11D608 = 0;
  qword_26B11D610 = 0x300000000;
  dword_26B11D618 = 31;
  qword_26B11D628 = qword_26B11C3F8;
  qword_26B11D630 = (uint64_t)SetMultipleOutputSupportEnabled;
  qword_26B11D638 = (uint64_t)CopyMultipleOutputSupportEnabled;
  qword_26B11D650 = *MEMORY[0x263F2E158];
  qword_26B11D640 = 0x300000000;
  dword_26B11D648 = 63;
  qword_26B11D658 = v13;
  qword_26B11D660 = (uint64_t)SetVideoOutputHandlers;
  qword_26B11D680 = *MEMORY[0x263F2E168];
  qword_26B11D668 = 0;
  qword_26B11D670 = 0x300000000;
  dword_26B11D678 = 63;
  qword_26B11D688 = v13;
  qword_26B11D690 = (uint64_t)SetVideoOutputsEnabled;
  qword_26B11D698 = (uint64_t)CopyVideoOutputsEnabled;
  qword_26B11D6B0 = *MEMORY[0x263F2E148];
  qword_26B11D6A0 = 0x300000000;
  dword_26B11D6A8 = 63;
  qword_26B11D6B8 = v13;
  qword_26B11D6C0 = (uint64_t)SetVideoOutputConfigurations;
  qword_26B11D6C8 = (uint64_t)CopyVideoOutputConfigurations;
  qword_26B11D6E0 = *MEMORY[0x263F2E160];
  qword_26B11D6D0 = 0x300000000;
  dword_26B11D6D8 = 63;
  qword_26B11D6E8 = v13;
  qword_26B11D6F0 = 0;
  qword_26B11D6F8 = (uint64_t)CopyVideoOutputsColorInfo;
  qword_26B11D710 = *MEMORY[0x263F2E150];
  qword_26B11D700 = 0x300000000;
  dword_26B11D708 = 63;
  qword_26B11D718 = v13;
  qword_26B11D720 = 0;
  qword_26B11D728 = (uint64_t)CopyGeometricDistortionCorrectedRects;
  qword_26B11D740 = *MEMORY[0x263F2DC68];
  qword_26B11D730 = 0x300000000;
  dword_26B11D738 = 63;
  qword_26B11D748 = qword_26B11C3F8;
  qword_26B11D750 = (uint64_t)SetDecouplePrimaryScalerFromStreaming;
  qword_26B11D758 = (uint64_t)CopyDecouplePrimaryScalerFromStreaming;
  qword_26B11D760 = 0x300000000;
  dword_26B11D768 = 31;
  qword_26B11D770 = *MEMORY[0x263F2DD58];
  uint64_t v24 = qword_26B11D770;
  qword_26B11D778 = v13;
  qword_26B11D7A0 = *MEMORY[0x263F2E140];
  qword_26B11D780 = (uint64_t)SetFocusNow;
  qword_26B11D788 = 0;
  qword_26B11D790 = 0x30000000ALL;
  dword_26B11D798 = 31;
  qword_26B11D7A8 = v13;
  qword_26B11D7B0 = 0;
  qword_26B11D7B8 = (uint64_t)CopyVibeMitigationInfo;
  qword_26B11D7D0 = *MEMORY[0x263F2E138];
  qword_26B11D7C0 = 2;
  dword_26B11D7C8 = 31;
  qword_26B11D7D8 = qword_26B11C3F8;
  qword_26B11D7E0 = (uint64_t)SetVibeMitigationEnabled;
  qword_26B11D800 = *MEMORY[0x263F2E0A0];
  qword_26B11D7E8 = 0;
  qword_26B11D7F0 = 0x4000000;
  dword_26B11D7F8 = 31;
  qword_26B11D808 = v13;
  qword_26B11D810 = (uint64_t)SetSynchronizedStreamsSlaveConfiguration;
  qword_26B11D818 = (uint64_t)CopySynchronizedStreamsSlaveConfiguration;
  qword_26B11D830 = *MEMORY[0x263F2E078];
  qword_26B11D820 = 0x300000200;
  dword_26B11D828 = 63;
  qword_26B11D838 = v13;
  qword_26B11D840 = 0;
  qword_26B11D848 = (uint64_t)CopySupportedColorSpaces;
  qword_26B11D860 = *MEMORY[0x263F2DC38];
  qword_26B11D850 = 0x300000000;
  dword_26B11D858 = 31;
  qword_26B11D868 = v15;
  qword_26B11D870 = (uint64_t)SetColorSpace;
  qword_26B11D878 = (uint64_t)CopyColorSpace;
  qword_26B11D890 = *MEMORY[0x263F2DDB0];
  qword_26B11D880 = 0x300000020;
  dword_26B11D888 = 31;
  qword_26B11D898 = v13;
  qword_26B11D8A0 = 0;
  qword_26B11D8A8 = (uint64_t)CopyAutoFocusPositionSensor;
  qword_26B11D8C0 = *MEMORY[0x263F2DD80];
  qword_26B11D8B0 = 0x300000000;
  dword_26B11D8B8 = 31;
  qword_26B11D8C8 = v13;
  qword_26B11D8D0 = 0;
  qword_26B11D8D8 = (uint64_t)CopyGDCCoefficients;
  qword_26B11D8F0 = *MEMORY[0x263F2DF68];
  qword_26B11D8E0 = 0x300800000;
  dword_26B11D8E8 = 31;
  qword_26B11D8F8 = v13;
  qword_26B11D900 = 0;
  qword_26B11D908 = (uint64_t)CopyOpticalCenter;
  qword_26B11D910 = 0x300800000;
  dword_26B11D918 = 31;
  qword_26B11D920 = @"EnablePDEStreaming";
  qword_26B11D928 = v15;
  qword_26B11D950 = *MEMORY[0x263F2DBB0];
  qword_26B11D930 = (uint64_t)SetPDEStreaming;
  qword_26B11D938 = 0;
  qword_26B11D940 = 0x300000040;
  dword_26B11D948 = 31;
  qword_26B11D958 = v15;
  qword_26B11D960 = (uint64_t)SetAPSMode;
  qword_26B11D968 = (uint64_t)CopyAPSMode;
  qword_26B11D980 = *MEMORY[0x263F2DDB8];
  qword_26B11D970 = 0x300020000;
  dword_26B11D978 = 31;
  qword_26B11D988 = qword_26B11C3F8;
  qword_26B11D990 = (uint64_t)SetHighCurrentTorchEnabled;
  qword_26B11D9B0 = *MEMORY[0x263F2DB80];
  qword_26B11D998 = 0;
  qword_26B11D9A0 = 1;
  dword_26B11D9A8 = 31;
  qword_26B11D9B8 = v13;
  qword_26B11D9C0 = (uint64_t)SetAFCalibrationData;
  qword_26B11D9C8 = (uint64_t)CopyAFCalibrationData;
  qword_26B11D9E0 = *MEMORY[0x263F2E028];
  qword_26B11D9D0 = 0x300000002;
  dword_26B11D9D8 = 31;
  qword_26B11D9E8 = v13;
  qword_26B11D9F0 = (uint64_t)SetSphereCalibrationData;
  qword_26B11D9F8 = (uint64_t)CopySphereCalibrationData;
  qword_26B11DA10 = *MEMORY[0x263F2E030];
  qword_26B11DA00 = 0x300000004;
  dword_26B11DA08 = 31;
  qword_26B11DA18 = v13;
  qword_26B11DA20 = (uint64_t)SetSphereEndStopCalibrationData;
  qword_26B11DA28 = (uint64_t)CopySphereEndStopCalibrationData;
  qword_26B11DA40 = *MEMORY[0x263F2DBC0];
  qword_26B11DA30 = 0x300000004;
  dword_26B11DA38 = 31;
  qword_26B11DA48 = v13;
  qword_26B11DA50 = (uint64_t)SetAPSSphereInterCalibrationData;
  qword_26B11DA58 = (uint64_t)CopyAPSSphereInterCalibrationData;
  qword_26B11DA70 = *MEMORY[0x263F2DE00];
  qword_26B11DA60 = 0x300000084;
  dword_26B11DA68 = 31;
  qword_26B11DA78 = qword_26B11C3F8;
  qword_26B11DA80 = (uint64_t)SetKeypointDetectionEnabled;
  qword_26B11DA88 = (uint64_t)CopyKeypointDetectionEnabled;
  qword_26B11DAA0 = *MEMORY[0x263F2DDF8];
  qword_26B11DA90 = 0x300000000;
  dword_26B11DA98 = 31;
  qword_26B11DAA8 = v13;
  qword_26B11DAB0 = (uint64_t)SetKeypointDetectionConfiguration;
  qword_26B11DAB8 = (uint64_t)CopyKeypointDetectionConfiguration;
  qword_26B11DAD0 = *MEMORY[0x263F2DFD8];
  qword_26B11DAC0 = 0x300000000;
  dword_26B11DAC8 = 31;
  qword_26B11DAD8 = v15;
  qword_26B11DAE0 = (uint64_t)SetSceneClassifierVersion;
  qword_26B11DAE8 = (uint64_t)CopySceneClassifierVersion;
  qword_26B11DB00 = *MEMORY[0x263F2DE20];
  qword_26B11DAF0 = 0x300000000;
  dword_26B11DAF8 = 31;
  qword_26B11DB08 = qword_26B11C3F8;
  qword_26B11DB10 = (uint64_t)SetLTMLookUpTableMetadataEnabled;
  qword_26B11DB18 = (uint64_t)CopyLTMLookUpTableMetadataEnabled;
  qword_26B11DB30 = *MEMORY[0x263F2DE88];
  qword_26B11DB20 = 0x300000000;
  dword_26B11DB28 = 31;
  qword_26B11DB38 = qword_26B11C3F8;
  qword_26B11DB40 = (uint64_t)SetLumaHistogramEnabled;
  qword_26B11DB48 = (uint64_t)CopyLumaHistogramEnabled;
  qword_26B11DB60 = *MEMORY[0x263F2DAF0];
  qword_26B11DB50 = 0x300000000;
  dword_26B11DB58 = 31;
  qword_26B11DB68 = v13;
  qword_26B11DB70 = (uint64_t)SetAutoExposureTables;
  qword_26B11DB78 = (uint64_t)CopyAutoExposureTables;
  qword_26B11DB90 = *MEMORY[0x263F2E0D8];
  qword_26B11DB80 = 0x300000000;
  dword_26B11DB88 = 31;
  qword_26B11DB98 = v17;
  qword_26B11DBA0 = (uint64_t)TimeMachineSuspendNow;
  qword_26B11DBC0 = *MEMORY[0x263F2E0D0];
  qword_26B11DBA8 = 0;
  qword_26B11DBB0 = 0x300000000;
  dword_26B11DBB8 = 31;
  qword_26B11DBC8 = v17;
  qword_26B11DBD0 = (uint64_t)TimeMachineResumeNow;
  qword_26B11DBF0 = *MEMORY[0x263F2E0C8];
  qword_26B11DBD8 = 0;
  qword_26B11DBE0 = 0x300000000;
  dword_26B11DBE8 = 31;
  qword_26B11DBF8 = v13;
  qword_26B11DC00 = 0;
  qword_26B11DC08 = (uint64_t)CopyTimeMachinePTSRange;
  qword_26B11DC20 = *MEMORY[0x263F2DB00];
  qword_26B11DC10 = 0x300000000;
  dword_26B11DC18 = 31;
  qword_26B11DC28 = qword_26B11C3F8;
  qword_26B11DC30 = (uint64_t)SetFirmwareFocusTriggerEnabled;
  qword_26B11DC38 = (uint64_t)CopyFirmwareFocusTriggerEnabled;
  qword_26B11DC50 = *MEMORY[0x263F2DC48];
  qword_26B11DC40 = 0x300000002;
  dword_26B11DC48 = 31;
  qword_26B11DC58 = qword_26B11C3F8;
  qword_26B11DC60 = (uint64_t)SetContentAwareEnhancement;
  qword_26B11DC68 = (uint64_t)CopyContentAwareEnhancement;
  qword_26B11DC80 = *MEMORY[0x263F2DC40];
  qword_26B11DC70 = 0x300000000;
  dword_26B11DC78 = 15;
  qword_26B11DC88 = qword_26B11C3F8;
  qword_26B11DC90 = (uint64_t)SetContentAwareAWBEnabled;
  qword_26B11DC98 = (uint64_t)CopyContentAwareAWBEnabled;
  qword_26B11DCB0 = *MEMORY[0x263F2DF48];
  qword_26B11DCA0 = 0x300000000;
  dword_26B11DCA8 = 15;
  qword_26B11DCB8 = v13;
  qword_26B11DCC0 = (uint64_t)SetNRSharpeningConfiguration;
  qword_26B11DCC8 = (uint64_t)CopyNRSharpeningConfiguration;
  qword_26B11DCE0 = *MEMORY[0x263F2E068];
  qword_26B11DCD0 = 0x300000800;
  dword_26B11DCD8 = 31;
  qword_26B11DCE8 = v15;
  qword_26B11DCF0 = 0;
  qword_26B11DCF8 = (uint64_t)CopyStructuredLightStandbyTemperature;
  qword_26B11DD10 = *MEMORY[0x263F2DBA8];
  qword_26B11DD00 = 64;
  dword_26B11DD08 = 31;
  qword_26B11DD18 = qword_26B11C3F8;
  qword_26B11DD20 = (uint64_t)SetAPSLoggingDataEnabled;
  qword_26B11DD40 = *MEMORY[0x263F2E038];
  qword_26B11DD28 = 0;
  qword_26B11DD30 = 0x300000080;
  dword_26B11DD38 = 31;
  qword_26B11DD48 = qword_26B11C3F8;
  qword_26B11DD50 = (uint64_t)SetSphereLoggingDataEnabled;
  qword_26B11DD70 = *MEMORY[0x263F2DCD0];
  qword_26B11DD58 = 0;
  qword_26B11DD60 = 0x300000004;
  dword_26B11DD68 = 31;
  qword_26B11DD78 = qword_26B11C3F8;
  qword_26B11DD80 = (uint64_t)SetDeviceMotionLoggingDataEnabled;
  qword_26B11DDA0 = *MEMORY[0x263F2DBB8];
  qword_26B11DD88 = 0;
  qword_26B11DD90 = 0x300000010;
  dword_26B11DD98 = 31;
  qword_26B11DDA8 = v13;
  qword_26B11DDB0 = 0;
  qword_26B11DDB8 = (uint64_t)CopyAPSOffsetEstimatorInfo;
  qword_26B11DDC0 = 0x300000080;
  dword_26B11DDC8 = 31;
  qword_26B11DDD0 = *MEMORY[0x263F2DFD0];
  uint64_t v25 = qword_26B11DDD0;
  qword_26B11DDD8 = v13;
  qword_26B11DE00 = *MEMORY[0x263F2DD48];
  qword_26B11DDE0 = (uint64_t)SetROIForCameraControls;
  qword_26B11DDE8 = 0;
  qword_26B11DDF0 = 0x300000000;
  dword_26B11DDF8 = 31;
  qword_26B11DE08 = qword_26B11C3F8;
  qword_26B11DE10 = (uint64_t)SetFocusBlurMapEnabled;
  qword_26B11DE30 = *MEMORY[0x263F2DDD0];
  qword_26B11DE18 = 0;
  qword_26B11DE20 = 0x300000000;
  dword_26B11DE28 = 31;
  qword_26B11DE38 = qword_26B11C3F8;
  qword_26B11DE40 = (uint64_t)SetAPSDataEnabled;
  qword_26B11DE60 = *MEMORY[0x263F2E1A8];
  qword_26B11DE48 = 0;
  qword_26B11DE50 = 0x300000080;
  dword_26B11DE58 = 31;
  qword_26B11DE68 = qword_26B11C428;
  qword_26B11DE70 = (uint64_t)SetStreamingYCbCrMatrix;
  qword_26B11DE78 = (uint64_t)CopyStreamingYCbCrMatrix;
  qword_26B11DE90 = *MEMORY[0x263F2E058];
  qword_26B11DE80 = 0x300000000;
  dword_26B11DE88 = 31;
  qword_26B11DE98 = v15;
  qword_26B11DEA0 = (uint64_t)SetForegroundSegmentationNetwork;
  qword_26B11DEA8 = (uint64_t)CopyForegroundSegmentationNetwork;
  qword_26B11DEC0 = *MEMORY[0x263F2E060];
  qword_26B11DEB0 = 0x300000000;
  dword_26B11DEB8 = 31;
  qword_26B11DEC8 = v15;
  qword_26B11DED0 = (uint64_t)SetStreamingTuningProfile;
  qword_26B11DED8 = (uint64_t)CopyStreamingTuningProfile;
  qword_26B11DEF0 = *MEMORY[0x263F2DD08];
  qword_26B11DEE0 = 0x300000000;
  dword_26B11DEE8 = 15;
  qword_26B11DEF8 = v13;
  qword_26B11DF00 = 0;
  qword_26B11DF08 = (uint64_t)CopyFPCCoefficients;
  qword_26B11DF20 = *MEMORY[0x263F2E190];
  qword_26B11DF10 = 0x100000002;
  dword_26B11DF18 = 15;
  qword_26B11DF28 = qword_26B11C3F8;
  qword_26B11DF30 = (uint64_t)SetVisionDataSuspended;
  qword_26B11DF50 = *MEMORY[0x263F2DCE8];
  qword_26B11DF38 = 0;
  qword_26B11DF40 = 0x300000000;
  dword_26B11DF48 = 31;
  qword_26B11DF58 = v13;
  qword_26B11DF60 = (uint64_t)SetEnabledFocusScores;
  qword_26B11DF80 = *MEMORY[0x263F2DE18];
  qword_26B11DF68 = 0;
  qword_26B11DF70 = 0x300000000;
  dword_26B11DF78 = 31;
  qword_26B11DF88 = v15;
  qword_26B11DF90 = (uint64_t)SetLTMCurve;
  qword_26B11DFB0 = *MEMORY[0x263F2DE40];
  qword_26B11DF98 = 0;
  qword_26B11DFA0 = 0x300000000;
  dword_26B11DFA8 = 31;
  qword_26B11DFB8 = v15;
  qword_26B11DFC0 = (uint64_t)SetLSCStrength;
  qword_26B11DFC8 = (uint64_t)CopyLSCStrength;
  qword_26B11DFE0 = *MEMORY[0x263F2DFA0];
  qword_26B11DFD0 = 0x300000000;
  dword_26B11DFD8 = 31;
  qword_26B11DFE8 = qword_26B11C3F8;
  qword_26B11DFF0 = (uint64_t)SetRawBufferCompandingEnabled;
  qword_26B11E010 = *MEMORY[0x263F2E0C0];
  qword_26B11DFF8 = 0;
  qword_26B11E000 = 0x300080000;
  dword_26B11E008 = 31;
  qword_26B11E018 = v13;
  qword_26B11E020 = (uint64_t)SetTimeLapseCaptureConfiguration;
  qword_26B11E028 = (uint64_t)CopyTimeLapseCaptureConfiguration;
  qword_26B11E040 = *MEMORY[0x263F2DDA8];
  qword_26B11E030 = 0x300000000;
  dword_26B11E038 = 31;
  qword_26B11E048 = qword_26B11C3F8;
  qword_26B11E050 = (uint64_t)SetHDRImageStatisticsEnabled;
  qword_26B11E070 = *MEMORY[0x263F2DBF8];
  qword_26B11E058 = 0;
  qword_26B11E060 = 0x300000000;
  dword_26B11E068 = 31;
  qword_26B11E078 = v13;
  qword_26B11E080 = 0;
  qword_26B11E088 = (uint64_t)CopyBackWideCalibratedExtrinsics;
  qword_26B11E0A0 = *MEMORY[0x263F2DD88];
  qword_26B11E090 = 0x300000000;
  dword_26B11E098 = 4;
  qword_26B11E0A8 = v13;
  qword_26B11E0B0 = 0;
  qword_26B11E0B8 = (uint64_t)CopyBackWideCalibratedGDCCoefficients;
  qword_26B11E0D0 = *MEMORY[0x263F2DF70];
  qword_26B11E0C0 = 0x300000000;
  dword_26B11E0C8 = 4;
  qword_26B11E0D8 = v13;
  qword_26B11E0E0 = 0;
  qword_26B11E0E8 = (uint64_t)CopyBackWideCalibratedOpticalCenter;
  dword_26B11E0F8 = 4;
  qword_26B11E100 = *MEMORY[0x263F2DD98];
  qword_26B11E0F0 = 0x300000000;
  qword_26B11E108 = v15;
  qword_26B11E118 = (uint64_t)CopyAmbientViewingLevel;
  qword_26B11E130 = *MEMORY[0x263F2E0E8];
  qword_26B11E110 = 0;
  qword_26B11E120 = 0x300000000;
  dword_26B11E128 = 15;
  qword_26B11E138 = v13;
  qword_26B11E148 = (uint64_t)CopyTOFAutoFocusEstimatorResults;
  qword_26B11E160 = *MEMORY[0x263F2E0E0];
  qword_26B11E140 = 0;
  qword_26B11E150 = 0x300000002;
  dword_26B11E158 = 15;
  qword_26B11E170 = (uint64_t)SetTOFAutoFocusEstimatorDataEnabled;
  qword_26B11E190 = *MEMORY[0x263F2DB88];
  qword_26B11E168 = qword_26B11C3F8;
  qword_26B11E178 = 0;
  qword_26B11E180 = 0x300000002;
  dword_26B11E188 = 15;
  qword_26B11E198 = v13;
  qword_26B11E1A8 = (uint64_t)CopyAutoFocusDriverShortStats;
  qword_26B11E1C0 = *MEMORY[0x263F2DE58];
  qword_26B11E1A0 = 0;
  qword_26B11E1B0 = 0x300000002;
  dword_26B11E1B8 = 15;
  qword_26B11E1C8 = qword_26B11C3F8;
  qword_26B11E1D0 = (uint64_t)SetLocalHistogramsEnabled;
  qword_26B11E1D8 = (uint64_t)CopyLocalHistogramsEnabled;
  qword_26B11E1F0 = *MEMORY[0x263F2DCA0];
  qword_26B11E1E0 = 0x300000000;
  dword_26B11E1E8 = 31;
  qword_26B11E200 = (uint64_t)SetLocalHistogramsOnStreamingOutputs;
  qword_26B11E220 = *MEMORY[0x263F2DE50];
  qword_26B11E1F8 = qword_26B11C3F8;
  qword_26B11E208 = 0;
  qword_26B11E210 = 0x300000000;
  dword_26B11E218 = 31;
  qword_26B11E230 = (uint64_t)SetLocalHistogramsClippingDataEnabled;
  qword_26B11E250 = *MEMORY[0x263F2DC98];
  qword_26B11E228 = qword_26B11C3F8;
  qword_26B11E238 = 0;
  qword_26B11E240 = 0x300000000;
  dword_26B11E248 = 31;
  qword_26B11E260 = (uint64_t)SetLocalHistogramsClippingDataOnStreamingOutputs;
  qword_26B11E280 = *MEMORY[0x263F2DC88];
  qword_26B11E258 = qword_26B11C3F8;
  qword_26B11E268 = 0;
  qword_26B11E270 = 0x300000000;
  dword_26B11E278 = 31;
  qword_26B11E290 = (uint64_t)SetLTMLookUpTableMetadataOnStreamingOutputs;
  qword_26B11E2B0 = *MEMORY[0x263F2DE28];
  qword_26B11E288 = qword_26B11C3F8;
  qword_26B11E298 = 0;
  qword_26B11E2A0 = 0x300000000;
  dword_26B11E2A8 = 31;
  qword_26B11E2C0 = (uint64_t)SetLTMThumbnailMetadataEnabled;
  qword_26B11E2E0 = *MEMORY[0x263F2DC90];
  qword_26B11E2B8 = qword_26B11C3F8;
  qword_26B11E2C8 = 0;
  qword_26B11E2D0 = 0x300000000;
  dword_26B11E2D8 = 31;
  qword_26B11E2F0 = (uint64_t)SetLTMThumbnailMetadataOnStreamingOutputs;
  qword_26B11E310 = @"ReplaySIFDMAMode";
  qword_26B11E2E8 = qword_26B11C3F8;
  qword_26B11E2F8 = 0;
  qword_26B11E300 = 0x300000000;
  dword_26B11E308 = 31;
  qword_26B11E320 = (uint64_t)SetReplaySIFDMA;
  qword_26B11E340 = @"TorchColor";
  qword_26B11E318 = qword_26B11C3F8;
  qword_26B11E328 = 0;
  qword_26B11E330 = 0x300000000;
  dword_26B11E338 = 31;
  qword_26B11E350 = (uint64_t)SetTorchColor;
  qword_26B11E370 = @"OISPosition";
  qword_26B11E348 = v13;
  qword_26B11E358 = 0;
  qword_26B11E360 = 1;
  dword_26B11E368 = 31;
  qword_26B11E378 = v13;
  qword_26B11E380 = (uint64_t)SetOISPosition;
  qword_26B11E388 = (uint64_t)CopyOISPosition;
  qword_26B11E3A0 = @"OISActuator";
  qword_26B11E390 = 0x300000004;
  dword_26B11E398 = 31;
  qword_26B11E3B0 = (uint64_t)SetOISActuator;
  qword_26B11E3D0 = @"OISTemperature";
  qword_26B11E3A8 = v13;
  qword_26B11E3B8 = 0;
  qword_26B11E3C0 = 0x300000004;
  dword_26B11E3C8 = 31;
  qword_26B11E3D8 = v15;
  qword_26B11E3E8 = (uint64_t)CopyOISTemperature;
  qword_26B11E400 = @"AFTestScriptLoad";
  qword_26B11E3E0 = 0;
  qword_26B11E3F0 = 0x300000004;
  dword_26B11E3F8 = 31;
  qword_26B11E410 = (uint64_t)SetAFTestScriptLoad;
  qword_26B11E430 = @"SensorSidebandEnable";
  qword_26B11E408 = v13;
  qword_26B11E418 = 0;
  qword_26B11E420 = 0x300000004;
  dword_26B11E428 = 63;
  qword_26B11E440 = (uint64_t)SetSensorSidebandEnabled;
  qword_26B11E460 = @"ReloadNVM";
  qword_26B11E438 = qword_26B11C3F8;
  qword_26B11E448 = 0;
  qword_26B11E450 = 0x300000000;
  dword_26B11E458 = 31;
  qword_26B11E470 = (uint64_t)SetReloadNVM;
  qword_26B11E490 = @"ChromaNoiseReductionLevel";
  qword_26B11E468 = v17;
  qword_26B11E478 = 0;
  qword_26B11E480 = 0x300000000;
  dword_26B11E488 = 31;
  qword_26B11E498 = v15;
  qword_26B11E4A0 = (uint64_t)SetChromaNoiseReductionLevel;
  qword_26B11E4A8 = (uint64_t)CopyChromaNoiseReductionLevel;
  qword_26B11E4C0 = @"ISPProcessingConfig";
  qword_26B11E4B0 = 0x300000000;
  dword_26B11E4B8 = 31;
  qword_26B11E4D0 = (uint64_t)SetISPProcessingConfig;
  qword_26B11E4F0 = @"NoiseReductionLevel";
  qword_26B11E4C8 = v15;
  qword_26B11E4D8 = 0;
  qword_26B11E4E0 = 0x300000000;
  dword_26B11E4E8 = 31;
  qword_26B11E4F8 = v15;
  qword_26B11E500 = (uint64_t)SetNoiseReductionLevel;
  qword_26B11E508 = (uint64_t)CopyNoiseReductionLevel;
  qword_26B11E520 = *MEMORY[0x263F2DDF0];
  qword_26B11E510 = 0x300000000;
  dword_26B11E518 = 31;
  qword_26B11E530 = (uint64_t)SetInfraredLightSourceConfiguration;
  qword_26B11E550 = @"IRProjectorParams";
  qword_26B11E528 = v13;
  qword_26B11E538 = 0;
  qword_26B11E540 = 0x300000040;
  dword_26B11E548 = 31;
  qword_26B11E560 = (uint64_t)SetIRProjectorParams;
  qword_26B11E580 = @"GenericProjectorType";
  qword_26B11E558 = v13;
  qword_26B11E568 = 0;
  qword_26B11E570 = 0x300000040;
  dword_26B11E578 = 63;
  qword_26B11E590 = (uint64_t)SetGenericProjectorType;
  qword_26B11E5B0 = @"ProjectorValid";
  qword_26B11E588 = v13;
  qword_26B11E598 = 0;
  qword_26B11E5A0 = 0x300000040;
  dword_26B11E5A8 = 31;
  qword_26B11E5B8 = qword_26B11C3F8;
  qword_26B11E5C8 = (uint64_t)CopyProjectorValid;
  qword_26B11E5E0 = @"ValidateCompliance";
  qword_26B11E5C0 = 0;
  qword_26B11E5D0 = 0x300000040;
  dword_26B11E5D8 = 63;
  qword_26B11E5E8 = qword_26B11C3F8;
  qword_26B11E5F8 = (uint64_t)CopyValidateCompliance;
  qword_26B11E610 = @"ValidateComplianceWithDetails";
  qword_26B11E5F0 = 0;
  qword_26B11E600 = 0x300000040;
  dword_26B11E608 = 63;
  qword_26B11E618 = v15;
  qword_26B11E628 = (uint64_t)CopyValidateComplianceWithDetails;
  qword_26B11E640 = @"ProjectorFaultStatus";
  qword_26B11E620 = 0;
  qword_26B11E630 = 0x300000040;
  dword_26B11E638 = 63;
  qword_26B11E648 = v15;
  qword_26B11E658 = (uint64_t)CopyProjectorFaultStatus;
  qword_26B11E670 = @"ProjectorRosalineFaultStatus";
  qword_26B11E650 = 0;
  qword_26B11E660 = 0x300000040;
  dword_26B11E668 = 31;
  qword_26B11E678 = v15;
  qword_26B11E688 = (uint64_t)CopyProjectorRosalineFaultStatus;
  qword_26B11E6A0 = @"DynamicVoltageEnable";
  qword_26B11E680 = 0;
  qword_26B11E690 = 0x300000040;
  dword_26B11E698 = 31;
  qword_26B11E6B0 = (uint64_t)SetDynamicVoltageEnable;
  qword_26B11E6D0 = @"ProjectorRikerFaultStatus";
  qword_26B11E6A8 = qword_26B11C3F8;
  qword_26B11E6B8 = 0;
  qword_26B11E6C0 = 0x300000000;
  dword_26B11E6C8 = 31;
  qword_26B11E6D8 = v15;
  qword_26B11E6E0 = 0;
  qword_26B11E6E8 = (uint64_t)CopyProjectorRikerFaultStatus;
  qword_26B11E700 = @"ProjectorQuarkFaultStatus";
  qword_26B11E6F0 = 0x300002000;
  dword_26B11E6F8 = 32;
  qword_26B11E708 = v13;
  qword_26B11E718 = (uint64_t)CopyProjectorQuarkFaultStatus;
  qword_26B11E730 = @"ProjectorWillFaultStatus";
  qword_26B11E710 = 0;
  qword_26B11E720 = 0x300002000;
  dword_26B11E728 = 32;
  qword_26B11E738 = v15;
  qword_26B11E748 = (uint64_t)CopyProjectorWillFaultStatus;
  qword_26B11E760 = @"RikerResistance";
  qword_26B11E740 = 0;
  qword_26B11E750 = 0x300002000;
  dword_26B11E758 = 32;
  qword_26B11E768 = v15;
  qword_26B11E770 = 0;
  qword_26B11E778 = (uint64_t)CopyRikerResistance;
  qword_26B11E790 = @"RikerState";
  qword_26B11E780 = 0x100002000;
  dword_26B11E788 = 32;
  qword_26B11E798 = v15;
  qword_26B11E7A8 = (uint64_t)CopyRikerState;
  qword_26B11E7C0 = @"ProjectorRikerStatus";
  qword_26B11E7A0 = 0;
  qword_26B11E7B0 = 0x100002000;
  dword_26B11E7B8 = 32;
  qword_26B11E7C8 = v15;
  qword_26B11E7D8 = (uint64_t)CopyProjectorRikerStatus;
  qword_26B11E7F0 = @"BaneResistance";
  qword_26B11E7D0 = 0;
  qword_26B11E7E0 = 0x300002000;
  dword_26B11E7E8 = 32;
  qword_26B11E7F8 = v15;
  qword_26B11E808 = (uint64_t)CopyBaneResistance;
  qword_26B11E820 = @"BaneState";
  qword_26B11E800 = 0;
  qword_26B11E810 = 0x300000040;
  dword_26B11E818 = 31;
  qword_26B11E828 = v15;
  qword_26B11E838 = (uint64_t)CopyBaneState;
  qword_26B11E850 = @"ProjectorMamaBearStatus";
  qword_26B11E830 = 0;
  qword_26B11E840 = 0x300000040;
  dword_26B11E848 = 31;
  qword_26B11E858 = v15;
  qword_26B11E868 = (uint64_t)CopyProjectorMamaBearStatus;
  qword_26B11E880 = @"ProjectorRigelPulseCount";
  qword_26B11E860 = 0;
  qword_26B11E870 = 0x300000040;
  dword_26B11E878 = 31;
  qword_26B11E888 = v15;
  qword_26B11E898 = (uint64_t)CopyProjectorRigelPulseCount;
  qword_26B11E8B0 = @"RigelSerialNumber";
  qword_26B11E890 = 0;
  qword_26B11E8A0 = 0x300000040;
  dword_26B11E8A8 = 31;
  qword_26B11E8B8 = qword_26B11C428;
  qword_26B11E8C0 = 0;
  qword_26B11E8C8 = (uint64_t)CopyProjectorRigelSerialNumber;
  qword_26B11E8E0 = @"GuadLastResistance";
  qword_26B11E8D0 = 0x100000040;
  dword_26B11E8D8 = 31;
  qword_26B11E8E8 = v15;
  qword_26B11E8F8 = (uint64_t)CopyGuadaloupLastResistance;
  qword_26B11E910 = @"GuadRecordRegisters";
  qword_26B11E8F0 = 0;
  qword_26B11E900 = 0x100000040;
  dword_26B11E908 = 31;
  qword_26B11E918 = v15;
  qword_26B11E928 = (uint64_t)CopyGuadaloupRecordRegisters;
  qword_26B11E940 = @"RigelFaultInterruptMask";
  qword_26B11E920 = 0;
  qword_26B11E930 = 0x100000040;
  dword_26B11E938 = 31;
  qword_26B11E950 = (uint64_t)SetRigelFaultInterruptMask;
  qword_26B11E970 = @"CollapseMBSupplyToForceOpenCircuitFault";
  qword_26B11E948 = qword_26B11C3F8;
  qword_26B11E958 = 0;
  qword_26B11E960 = 0x300000040;
  dword_26B11E968 = 31;
  qword_26B11E980 = (uint64_t)ForceOpenCircuitFault;
  qword_26B11E9A0 = @"YogiFaultCSpecialFunctions";
  qword_26B11E978 = qword_26B11C3F8;
  qword_26B11E988 = 0;
  qword_26B11E990 = 0x300000040;
  dword_26B11E998 = 31;
  qword_26B11E9B0 = (uint64_t)SetYogiFaultCSpecialFunctions;
  qword_26B11E9D0 = @"ProjectorSpecCalibrationValue";
  qword_26B11E9A8 = qword_26B11C3F8;
  qword_26B11E9B8 = 0;
  qword_26B11E9C0 = 0x300000040;
  dword_26B11E9C8 = 31;
  qword_26B11E9D8 = v15;
  qword_26B11E9E0 = (uint64_t)SetRosalineCalCurrent;
  qword_26B11E9E8 = (uint64_t)CopyProjectorSpecCalibrationValue;
  qword_26B11EA00 = @"ProjectorSpecCalibrationPw";
  qword_26B11E9F0 = 0x300000040;
  dword_26B11E9F8 = 31;
  qword_26B11EA08 = v15;
  qword_26B11EA10 = (uint64_t)SetRosalineCalPulseWidth;
  qword_26B11EA18 = (uint64_t)CopyProjectorSpecCalibrationPw;
  qword_26B11EA30 = @"ProjectorVersion";
  qword_26B11EA20 = 0x300000040;
  dword_26B11EA28 = 31;
  qword_26B11EA38 = v15;
  qword_26B11EA48 = (uint64_t)CopyProjectorVersion;
  qword_26B11EA60 = @"ProjectorHWVersion";
  qword_26B11EA40 = 0;
  qword_26B11EA50 = 0x300000040;
  dword_26B11EA58 = 31;
  qword_26B11EA68 = v15;
  qword_26B11EA78 = (uint64_t)CopyProjectorHWVersion;
  qword_26B11EA90 = @"ProjectorTokenVersion";
  qword_26B11EA70 = 0;
  qword_26B11EA80 = 0x300000040;
  dword_26B11EA88 = 31;
  qword_26B11EA98 = v15;
  qword_26B11EAA8 = (uint64_t)CopyProjectorTokenVersion;
  qword_26B11EAC0 = @"PCEPreset";
  qword_26B11EAA0 = 0;
  qword_26B11EAB0 = 0x300000040;
  dword_26B11EAB8 = 63;
  qword_26B11EAD0 = (uint64_t)SetPDEPreset;
  qword_26B11EAF0 = @"PCEOutputFormat";
  qword_26B11EAC8 = v15;
  qword_26B11EAD8 = 0;
  qword_26B11EAE0 = 0x300000040;
  dword_26B11EAE8 = 31;
  qword_26B11EAF8 = v15;
  qword_26B11EB00 = (uint64_t)SetPCEOutputFormat;
  qword_26B11EB20 = @"FusionMode";
  qword_26B11EB08 = 0;
  qword_26B11EB10 = 0x200000040;
  dword_26B11EB18 = 31;
  qword_26B11EB30 = (uint64_t)SetFusionMode;
  qword_26B11EB50 = @"EnableHwGdr";
  qword_26B11EB28 = v15;
  qword_26B11EB38 = 0;
  qword_26B11EB40 = 0x200000040;
  dword_26B11EB48 = 31;
  qword_26B11EB60 = (uint64_t)SetHwGdrMode;
  *(_OWORD *)&streamProperties[1335] = 0u;
  qword_26B11EB80 = @"EnableCinVid";
  qword_26B11EB58 = v18;
  dword_26B11EB78 = 31;
  qword_26B11EB88 = v18;
  qword_26B11EB90 = (uint64_t)SetCinVidMode;
  *(_OWORD *)&streamProperties[1341] = 0u;
  qword_26B11EBB0 = *MEMORY[0x263F2DCB0];
  dword_26B11EBA8 = 31;
  qword_26B11EBB8 = v13;
  qword_26B11EBC0 = (uint64_t)SetDepthEngineConfiguration;
  qword_26B11EBE0 = *MEMORY[0x263F2E080];
  qword_26B11EBC8 = 0;
  qword_26B11EBD0 = 0x300000400;
  dword_26B11EBD8 = 31;
  qword_26B11EBE8 = v13;
  qword_26B11EBF0 = 0;
  qword_26B11EBF8 = (uint64_t)CopySupportedDepthPerspectivePortTypes;
  qword_26B11EC10 = *MEMORY[0x263F2DCC0];
  qword_26B11EC00 = 0x300000000;
  dword_26B11EC08 = 31;
  qword_26B11EC18 = v13;
  qword_26B11EC20 = 0;
  qword_26B11EC28 = (uint64_t)CopySupportedOutputConfigurations;
  qword_26B11EC40 = *MEMORY[0x263F2DCB8];
  qword_26B11EC30 = 0x300000400;
  dword_26B11EC38 = 31;
  qword_26B11EC48 = v13;
  qword_26B11EC50 = 0;
  qword_26B11EC58 = (uint64_t)CopyOutputConfigurations;
  qword_26B11EC70 = @"ValidateCalibration";
  qword_26B11EC60 = 0x300000400;
  dword_26B11EC68 = 31;
  qword_26B11EC78 = v18;
  qword_26B11EC80 = 0;
  qword_26B11EC88 = (uint64_t)CopyValidateCalibration;
  qword_26B11ECA0 = @"EnableFIDMetadata";
  qword_26B11EC90 = 0x300000040;
  dword_26B11EC98 = 63;
  qword_26B11ECA8 = v18;
  qword_26B11ECB0 = (uint64_t)SetEnableFIDMetadata;
  qword_26B11ECD0 = @"EnableFIDDebugMetadata";
  qword_26B11ECB8 = 0;
  qword_26B11ECC0 = 0x300000040;
  dword_26B11ECC8 = 31;
  qword_26B11ECD8 = v18;
  qword_26B11ECE0 = (uint64_t)SetEnableFIDDebugMetadata;
  qword_26B11ED00 = @"FIDEnabled";
  qword_26B11ECE8 = 0;
  qword_26B11ECF0 = 0x300000040;
  dword_26B11ECF8 = 31;
  qword_26B11ED08 = v18;
  qword_26B11ED10 = (uint64_t)SetEnableFID;
  qword_26B11ED30 = @"AEMode";
  qword_26B11ED18 = 0;
  qword_26B11ED20 = 0x300000040;
  dword_26B11ED28 = 31;
  qword_26B11ED38 = v15;
  qword_26B11ED40 = (uint64_t)SetAEMode;
  qword_26B11ED60 = @"AETarget";
  qword_26B11ED48 = 0;
  qword_26B11ED50 = 0x300000040;
  dword_26B11ED58 = 31;
  qword_26B11ED68 = v15;
  qword_26B11ED70 = (uint64_t)SetAETarget;
  qword_26B11ED78 = (uint64_t)CopyAETarget;
  qword_26B11ED90 = @"FIDState";
  qword_26B11ED80 = 0x300000040;
  dword_26B11ED88 = 31;
  qword_26B11ED98 = v15;
  qword_26B11EDA0 = (uint64_t)SetFIDState;
  qword_26B11EDC0 = @"EnableIRFramesToPDE";
  qword_26B11EDA8 = 0;
  qword_26B11EDB0 = 0x300000040;
  dword_26B11EDB8 = 31;
  qword_26B11EDC8 = v15;
  qword_26B11EDD0 = (uint64_t)EnableIRFramesToPDE;
  qword_26B11EDF0 = @"GMCDebug";
  qword_26B11EDD8 = 0;
  qword_26B11EDE0 = 0x300000040;
  dword_26B11EDE8 = 31;
  qword_26B11EDF8 = v15;
  qword_26B11EE00 = (uint64_t)SetGMCDebug;
  qword_26B11EE20 = @"ColorGMCDebug";
  qword_26B11EE08 = 0;
  qword_26B11EE10 = 0x300000040;
  dword_26B11EE18 = 31;
  qword_26B11EE28 = v15;
  qword_26B11EE30 = (uint64_t)SetColorGMCDebug;
  qword_26B11EE50 = @"SIFROverrideMode";
  qword_26B11EE38 = 0;
  qword_26B11EE40 = 0x300000040;
  dword_26B11EE48 = 31;
  qword_26B11EE58 = v15;
  qword_26B11EE60 = (uint64_t)SetSIFROverrideMode;
  qword_26B11EE80 = @"SplitPDOverrideMode";
  qword_26B11EE68 = 0;
  qword_26B11EE70 = 0x300000020;
  dword_26B11EE78 = 15;
  qword_26B11EE88 = v15;
  qword_26B11EE90 = (uint64_t)SetSplitPDOverrideMode;
  qword_26B11EEB0 = @"APSActuator";
  qword_26B11EE98 = 0;
  qword_26B11EEA0 = 0x300000000;
  dword_26B11EEA8 = 31;
  qword_26B11EEB8 = v15;
  qword_26B11EEC0 = (uint64_t)SetAPSActuator;
  qword_26B11EEE0 = @"MasterSlaveAPSFocusEnable";
  qword_26B11EEC8 = 0;
  qword_26B11EED0 = 0x300000080;
  dword_26B11EED8 = 31;
  qword_26B11EEE8 = v18;
  qword_26B11EEF0 = (uint64_t)SetMasterSlaveAPSFocus;
  qword_26B11EF10 = @"MasterSlaveContrastFocusEnable";
  qword_26B11EEF8 = 0;
  qword_26B11EF00 = 0x300000200;
  dword_26B11EF08 = 31;
  qword_26B11EF18 = v18;
  qword_26B11EF20 = (uint64_t)SetMasterSlaveContrastFocus;
  qword_26B11EF40 = @"ForceSingleChannelCommands";
  qword_26B11EF28 = 0;
  qword_26B11EF30 = 0x300000200;
  dword_26B11EF38 = 31;
  qword_26B11EF48 = v18;
  qword_26B11EF50 = (uint64_t)SetForceSingleChannelCommands;
  qword_26B11EF70 = @"TorchManualParameters";
  qword_26B11EF58 = 0;
  qword_26B11EF60 = 0x300000200;
  dword_26B11EF68 = 31;
  qword_26B11EF78 = v13;
  qword_26B11EF80 = (uint64_t)SetTorchManualParameters;
  qword_26B11EFA0 = @"LPDPFilterEnable";
  qword_26B11EF88 = 0;
  qword_26B11EF90 = 1;
  dword_26B11EF98 = 31;
  qword_26B11EFA8 = v18;
  qword_26B11EFB0 = (uint64_t)SetLPDPFilterEnable;
  qword_26B11EFD0 = @"HighSpeedOutputLevel";
  qword_26B11EFB8 = 0;
  qword_26B11EFC0 = 0x300000000;
  dword_26B11EFC8 = 31;
  qword_26B11EFD8 = v15;
  qword_26B11EFE0 = (uint64_t)SetHighSpeedOutputLevel;
  qword_26B11F000 = @"SupportedLinkFrequencies";
  qword_26B11EFE8 = 0;
  qword_26B11EFF0 = 0x300000000;
  dword_26B11EFF8 = 63;
  qword_26B11F008 = v13;
  qword_26B11F010 = 0;
  qword_26B11F018 = (uint64_t)CopySupportedLinkFrequencies;
  qword_26B11F030 = @"LinkFrequencyIndex";
  qword_26B11F020 = 0x300000000;
  dword_26B11F028 = 63;
  qword_26B11F038 = v15;
  qword_26B11F040 = (uint64_t)SetLinkFrequencyIndex;
  qword_26B11F048 = (uint64_t)CopyLinkFrequencyIndex;
  qword_26B11F060 = @"TestPattern";
  qword_26B11F050 = 0x300000000;
  dword_26B11F058 = 63;
  qword_26B11F068 = v19;
  qword_26B11F070 = (uint64_t)SetTestPattern;
  qword_26B11F078 = (uint64_t)CopySupportedTestPatterns;
  qword_26B11F090 = @"APSDistance";
  qword_26B11F080 = 0x300000000;
  dword_26B11F088 = 31;
  qword_26B11F098 = v15;
  qword_26B11F0A0 = (uint64_t)SetAPSDistance;
  qword_26B11F0C0 = @"APSPosition";
  qword_26B11F0A8 = 0;
  qword_26B11F0B0 = 0x200000080;
  dword_26B11F0B8 = 63;
  qword_26B11F0C8 = v15;
  qword_26B11F0D0 = (uint64_t)SetAPSPosition;
  qword_26B11F0F0 = @"APSSearchRange";
  qword_26B11F0D8 = 0;
  qword_26B11F0E0 = 0x200000080;
  dword_26B11F0E8 = 63;
  qword_26B11F0F8 = v13;
  qword_26B11F100 = (uint64_t)SetAPSSearchRange;
  qword_26B11F120 = @"DynamicVoltage";
  qword_26B11F108 = 0;
  qword_26B11F110 = 0x200000080;
  dword_26B11F118 = 63;
  qword_26B11F128 = v13;
  qword_26B11F130 = (uint64_t)SetDynamicVoltageLevel;
  qword_26B11F150 = @"LPDPEqualization";
  qword_26B11F138 = 0;
  qword_26B11F140 = 0x200000000;
  dword_26B11F148 = 63;
  qword_26B11F158 = v13;
  qword_26B11F160 = (uint64_t)SetLPDPEqualization;
  qword_26B11F180 = @"LPDPRC";
  qword_26B11F168 = 0;
  qword_26B11F170 = 0x200000000;
  dword_26B11F178 = 31;
  qword_26B11F188 = v13;
  qword_26B11F190 = 0;
  qword_26B11F198 = (uint64_t)CopyLPDPRC;
  qword_26B11F1B0 = @"SensorNVM";
  qword_26B11F1A0 = 0x300000000;
  dword_26B11F1A8 = 31;
  qword_26B11F1B8 = v13;
  qword_26B11F1C0 = 0;
  qword_26B11F1C8 = (uint64_t)CopySensorNVM;
  qword_26B11F1E0 = @"EnablePDEStreaming";
  qword_26B11F1F0 = (uint64_t)SetPDEStreaming;
  qword_26B11F210 = @"PCECalib";
  qword_26B11F1D0 = 0x300000000;
  dword_26B11F1D8 = 63;
  qword_26B11F1E8 = v15;
  qword_26B11F1F8 = 0;
  qword_26B11F200 = 0x300000040;
  dword_26B11F208 = 31;
  qword_26B11F218 = v17;
  qword_26B11F220 = (uint64_t)SetPCECalibration;
  qword_26B11F228 = (uint64_t)CopyPCECalibration;
  qword_26B11F240 = @"PCEShiftParams";
  qword_26B11F230 = 0x300000040;
  dword_26B11F238 = 31;
  qword_26B11F248 = v17;
  qword_26B11F250 = 0;
  qword_26B11F258 = (uint64_t)CopyPCEShiftParams;
  qword_26B11F270 = @"PCEDepthConfig";
  qword_26B11F260 = 0x100000040;
  dword_26B11F268 = 31;
  qword_26B11F278 = v17;
  qword_26B11F280 = 0;
  qword_26B11F288 = (uint64_t)CopyPCEDepthConfig;
  qword_26B11F2A0 = @"RawImageProcessStillFlowEnabled";
  qword_26B11F290 = 0x100000040;
  dword_26B11F298 = 31;
  qword_26B11F2A8 = v18;
  qword_26B11F2B0 = (uint64_t)SetRawImageProcessStillFlowEnabled;
  qword_26B11F2D0 = @"ProximityMonitoringEnabled";
  qword_26B11F2B8 = 0;
  qword_26B11F2C0 = 0x300000000;
  dword_26B11F2C8 = 31;
  qword_26B11F2D8 = v18;
  qword_26B11F2E0 = (uint64_t)SetProximityMonitoringEnabled;
  qword_26B11F300 = @"PCERFCLockEnabled";
  qword_26B11F2E8 = 0;
  qword_26B11F2F0 = 0x300000040;
  dword_26B11F2F8 = 31;
  qword_26B11F308 = v18;
  qword_26B11F310 = (uint64_t)SetPCERFCLockEnabled;
  qword_26B11F330 = @"PCERegsUpdateTweak";
  qword_26B11F318 = 0;
  qword_26B11F320 = 0x300000040;
  dword_26B11F328 = 31;
  qword_26B11F338 = v15;
  qword_26B11F340 = (uint64_t)SetPCERegsUpdateTweak;
  qword_26B11F360 = *MEMORY[0x263F2DFA8];
  qword_26B11F348 = 0;
  qword_26B11F350 = 0x300000040;
  dword_26B11F358 = 31;
  qword_26B11F368 = v18;
  qword_26B11F370 = (uint64_t)SetUseAuxRawPool;
  float result = CopyUseAuxRawPool;
  qword_26B11F390 = @"MamaBearCapacitance";
  qword_26B11F378 = (uint64_t)CopyUseAuxRawPool;
  qword_26B11F380 = 0x300000000;
  dword_26B11F388 = 31;
  qword_26B11F398 = v15;
  qword_26B11F3A0 = 0;
  qword_26B11F3A8 = (uint64_t)CopyMamaBearCapacitance;
  qword_26B11F3C0 = @"MamaBearState";
  qword_26B11F3B0 = 0x100000040;
  dword_26B11F3B8 = 31;
  qword_26B11F3C8 = v15;
  qword_26B11F3D0 = 0;
  qword_26B11F3D8 = (uint64_t)CopyMamaBearState;
  qword_26B11F3F0 = @"UseAuxRawPool";
  qword_26B11F400 = (uint64_t)SetUseAuxRawPool;
  qword_26B11F408 = (uint64_t)CopyUseAuxRawPool;
  qword_26B11F420 = @"ReplayEnable";
  qword_26B11F3E0 = 0x100000040;
  dword_26B11F3E8 = 31;
  qword_26B11F3F8 = v18;
  qword_26B11F410 = 0x300000040;
  dword_26B11F418 = 63;
  qword_26B11F428 = v18;
  qword_26B11F430 = (uint64_t)SetReplayEnabled;
  qword_26B11F438 = (uint64_t)CopyReplayEnabled;
  qword_26B11F450 = @"ReplayFrame";
  qword_26B11F440 = 0x300000000;
  dword_26B11F448 = 31;
  qword_26B11F458 = v13;
  qword_26B11F460 = (uint64_t)SetReplayFrame;
  qword_26B11F480 = @"ProjectorErrorProtectionEnabled";
  qword_26B11F468 = 0;
  qword_26B11F470 = 0x300000000;
  dword_26B11F478 = 31;
  qword_26B11F488 = v18;
  qword_26B11F490 = (uint64_t)SetProjectorErrorProtectionEnabled;
  qword_26B11F498 = (uint64_t)CopyProjectorErrorProtectionEnabled;
  qword_26B11F4B0 = @"GDCMetadataEnabled";
  qword_26B11F4A0 = 0x300000040;
  dword_26B11F4A8 = 31;
  qword_26B11F4B8 = v18;
  qword_26B11F4C0 = (uint64_t)SetGDCMetadataEnabled;
  qword_26B11F4E0 = @"ManualControl";
  qword_26B11F4C8 = 0;
  qword_26B11F4D0 = 0x300000000;
  dword_26B11F4D8 = 31;
  qword_26B11F4E8 = v13;
  qword_26B11F4F0 = (uint64_t)SetManualControl;
  qword_26B11F510 = @"PackedRawAttachmentsEnabled";
  qword_26B11F4F8 = 0;
  qword_26B11F500 = 0x300000000;
  dword_26B11F508 = 31;
  qword_26B11F518 = v18;
  qword_26B11F520 = (uint64_t)SetPackedRawAttachmentsEnabled;
  qword_26B11F540 = *MEMORY[0x263F2DF80];
  qword_26B11F550 = (uint64_t)SetPackedRawAttachmentsEnabled;
  qword_26B11F528 = (uint64_t)CopyPackedRawAttachmentsEnabled;
  qword_26B11F558 = (uint64_t)CopyPackedRawAttachmentsEnabled;
  qword_26B11F570 = @"ForceVideoRawBitDepth";
  qword_26B11F530 = 0x300000000;
  dword_26B11F538 = 31;
  qword_26B11F548 = v18;
  qword_26B11F560 = 0x300000000;
  dword_26B11F568 = 31;
  qword_26B11F578 = v15;
  qword_26B11F580 = (uint64_t)SetForceVideoRawBitDepth;
  qword_26B11F5A0 = @"ImageCaptureWaitForAEEnabled";
  qword_26B11F588 = 0;
  qword_26B11F590 = 0x200000000;
  dword_26B11F598 = 15;
  qword_26B11F5A8 = v18;
  qword_26B11F5B0 = (uint64_t)SetImageCaptureWaitForAEEnabled;
  qword_26B11F5D0 = *MEMORY[0x263F2DDC0];
  qword_26B11F5B8 = 0;
  qword_26B11F5C0 = 0x300000000;
  dword_26B11F5C8 = 31;
  qword_26B11F5D8 = v18;
  qword_26B11F5E0 = (uint64_t)SetHighlightRecoveryEnabled;
  qword_26B11F600 = *MEMORY[0x263F2E188];
  qword_26B11F5E8 = 0;
  qword_26B11F5F0 = 0x300000020;
  dword_26B11F5F8 = 15;
  qword_26B11F608 = v15;
  qword_26B11F610 = (uint64_t)SetVisionDataKeypointDetectionThreshold;
  qword_26B11F630 = *MEMORY[0x263F2E108];
  qword_26B11F618 = 0;
  qword_26B11F620 = 0x300000000;
  dword_26B11F628 = 31;
  qword_26B11F638 = v17;
  qword_26B11F640 = (uint64_t)SetTriggerVisionDataBurst;
  qword_26B11F660 = @"MultiplePearlCalibration";
  qword_26B11F648 = 0;
  qword_26B11F650 = 0x300000000;
  dword_26B11F658 = 31;
  qword_26B11F668 = v18;
  qword_26B11F670 = (uint64_t)SetMultiplePearlCalibration;
  qword_26B11F690 = @"PearlCalibrationDebugInfo";
  qword_26B11F678 = 0;
  qword_26B11F680 = 0x300000040;
  dword_26B11F688 = 31;
  qword_26B11F698 = v13;
  qword_26B11F6A0 = 0;
  qword_26B11F6A8 = (uint64_t)CopyPearlCalibrationDebugInfo;
  qword_26B11F6C0 = @"ProjectorOverheatLimit";
  qword_26B11F6B0 = 0x100000040;
  dword_26B11F6B8 = 31;
  qword_26B11F6C8 = v15;
  qword_26B11F6D0 = (uint64_t)SetProjectorOverheatLimit;
  qword_26B11F6D8 = (uint64_t)CopyProjectorOverheatLimit;
  qword_26B11F6F0 = @"ToFCapturingPresetIndex";
  qword_26B11F6E0 = 0x200000040;
  dword_26B11F6E8 = 31;
  qword_26B11F6F8 = v15;
  qword_26B11F700 = (uint64_t)SetToFCapturingPresetIndex;
  qword_26B11F708 = (uint64_t)CopyToFCapturingPresetIndex;
  qword_26B11F720 = @"JasperPreset";
  qword_26B11F710 = 0x300002000;
  dword_26B11F718 = 32;
  qword_26B11F728 = v19;
  qword_26B11F730 = (uint64_t)SetJasperPreset;
  qword_26B11F738 = (uint64_t)CopyJasperPreset;
  qword_26B11F750 = @"JasperProcessingMode";
  qword_26B11F740 = 0x300002000;
  dword_26B11F748 = 32;
  qword_26B11F758 = v15;
  qword_26B11F760 = (uint64_t)SetJasperProcessingMode;
  qword_26B11F768 = (uint64_t)CopyJasperProcessingMode;
  qword_26B11F780 = @"JasperRgbMode";
  qword_26B11F770 = 0x300002000;
  dword_26B11F778 = 32;
  qword_26B11F788 = v15;
  qword_26B11F790 = (uint64_t)SetJasperRgbMode;
  qword_26B11F7B0 = @"JasperBuiltInSequence";
  qword_26B11F798 = 0;
  qword_26B11F7A0 = 0x200002000;
  dword_26B11F7A8 = 32;
  qword_26B11F7B8 = v13;
  qword_26B11F7C0 = (uint64_t)SetJasperBuiltInSequence;
  qword_26B11F7E0 = @"JasperBurstSize";
  qword_26B11F7C8 = 0;
  qword_26B11F7D0 = 0x200002000;
  dword_26B11F7D8 = 32;
  qword_26B11F7E8 = v15;
  qword_26B11F7F0 = (uint64_t)SetJasperBurstSize;
  qword_26B11F7F8 = (uint64_t)CopyJasperBurstSize;
  qword_26B11F810 = @"JasperFrameModeList";
  qword_26B11F800 = 0x300002000;
  dword_26B11F808 = 32;
  qword_26B11F818 = v19;
  qword_26B11F820 = (uint64_t)SetFrameModeDictionaryLocation;
  qword_26B11F840 = @"JapserCalibData";
  qword_26B11F828 = 0;
  qword_26B11F830 = 0x200002000;
  dword_26B11F838 = 32;
  qword_26B11F848 = v13;
  qword_26B11F850 = 0;
  qword_26B11F858 = (uint64_t)CopyJasperCalibData;
  qword_26B11F870 = @"JasperFrameConfig";
  qword_26B11F860 = 0x100002000;
  dword_26B11F868 = 32;
  qword_26B11F878 = v13;
  qword_26B11F880 = (uint64_t)SetJasperFrameConfig;
  qword_26B11F8A0 = @"JasperPreloadFrameConfig";
  qword_26B11F888 = 0;
  qword_26B11F890 = 0x200002000;
  dword_26B11F898 = 32;
  qword_26B11F8A8 = v13;
  qword_26B11F8B0 = (uint64_t)SetJasperPreloadFrameConfig;
  qword_26B11F8D0 = @"JasperFrameOffset";
  qword_26B11F8B8 = 0;
  qword_26B11F8C0 = 0x200002000;
  dword_26B11F8C8 = 32;
  qword_26B11F8D8 = v13;
  qword_26B11F8E0 = (uint64_t)SetJasperFrameOffset;
  qword_26B11F900 = @"JasperSequence";
  qword_26B11F8E8 = 0;
  qword_26B11F8F0 = 0x200002000;
  dword_26B11F8F8 = 32;
  qword_26B11F908 = v13;
  qword_26B11F910 = (uint64_t)SetJasperSequence;
  qword_26B11F930 = @"JasperCalib";
  qword_26B11F918 = 0;
  qword_26B11F920 = 0x200002000;
  dword_26B11F928 = 32;
  qword_26B11F938 = v17;
  qword_26B11F940 = (uint64_t)SetJasperCalibration;
  qword_26B11F948 = (uint64_t)CopyJasperCalibration;
  qword_26B11F960 = @"JasperGmoDebugMode";
  qword_26B11F950 = 0x300002000;
  dword_26B11F958 = 32;
  qword_26B11F968 = v18;
  qword_26B11F970 = (uint64_t)SetJasperGmoDebugMode;
  qword_26B11F990 = @"JasperGmoFlowBits";
  qword_26B11F978 = 0;
  qword_26B11F980 = 0x200002000;
  dword_26B11F988 = 32;
  qword_26B11F998 = v15;
  qword_26B11F9A0 = (uint64_t)SetJasperGmoFlow;
  qword_26B11F9C0 = @"JasperLockAfFrequency";
  qword_26B11F9A8 = 0;
  qword_26B11F9B0 = 0x200002000;
  dword_26B11F9B8 = 32;
  qword_26B11F9C8 = v15;
  qword_26B11F9D0 = (uint64_t)SetJasperLockAfFrequency;
  qword_26B11F9F0 = *MEMORY[0x263F2E0F0];
  qword_26B11F9D8 = 0;
  qword_26B11F9E0 = 0x200002000;
  dword_26B11F9E8 = 32;
  qword_26B11F9F8 = v13;
  qword_26B11FA00 = (uint64_t)SetTimeOfFlightConfiguration;
  qword_26B11FA08 = (uint64_t)CopyTimeOfFlightConfiguration;
  qword_26B11FA20 = *MEMORY[0x263F2E098];
  qword_26B11FA10 = 0x300002000;
  dword_26B11FA18 = 32;
  qword_26B11FA28 = v13;
  qword_26B11FA30 = 0;
  qword_26B11FA38 = (uint64_t)CopySupportedTimeOfFlightProjectorModes;
  qword_26B11FA50 = @"OverrideJasperWideExtrinsics";
  qword_26B11FA40 = 0x100002000;
  dword_26B11FA48 = 32;
  qword_26B11FA58 = v13;
  qword_26B11FA60 = (uint64_t)SetJasperWideExtrinsics;
  qword_26B11FA80 = @"RgbjConfiguration";
  qword_26B11FA68 = 0;
  qword_26B11FA70 = 0x200002000;
  dword_26B11FA78 = 32;
  qword_26B11FA88 = v13;
  qword_26B11FA90 = (uint64_t)SetRgbjConfiguration;
  qword_26B11FAB0 = @"RgbjReport";
  qword_26B11FA98 = 0;
  qword_26B11FAA0 = 0x200002000;
  dword_26B11FAA8 = 32;
  qword_26B11FAB8 = v13;
  qword_26B11FAC0 = 0;
  qword_26B11FAC8 = (uint64_t)CopyRgbjReport;
  qword_26B11FAE0 = @"RgbjForceSaveCalib";
  qword_26B11FAD0 = 0x200002000;
  dword_26B11FAD8 = 32;
  qword_26B11FAE8 = v17;
  qword_26B11FAF0 = (uint64_t)RgbjForceSaveCalib;
  dword_26B11FB08 = 32;
  qword_26B11FB10 = @"ManualColorCalGain";
  qword_26B11FAF8 = 0;
  qword_26B11FB00 = 0x200002000;
  qword_26B11FB18 = v13;
  qword_26B11FB20 = (uint64_t)SetManualColorCalGain;
  qword_26B11FB40 = *MEMORY[0x263F2DF58];
  qword_26B11FB28 = 0;
  qword_26B11FB30 = 0x300000000;
  dword_26B11FB38 = 31;
  qword_26B11FB48 = v13;
  qword_26B11FB50 = (uint64_t)SetObjectDetectionConfiguration;
  qword_26B11FB70 = *MEMORY[0x263F2DF60];
  qword_26B11FB80 = (uint64_t)SetFaceDetectionRectangleOfInterest;
  qword_26B11FB88 = (uint64_t)CopyFaceDetectionRectangleOfInterest;
  qword_26B11FBA0 = *MEMORY[0x263F2DE08];
  qword_26B11FB58 = 0;
  qword_26B11FB60 = 0x300000000;
  dword_26B11FB68 = 31;
  qword_26B11FB78 = v13;
  qword_26B11FB90 = 0x300000000;
  dword_26B11FB98 = 31;
  qword_26B11FBA8 = v13;
  qword_26B11FBB0 = 0;
  qword_26B11FBB8 = (uint64_t)CopyLSCGainGrid;
  qword_26B11FBD0 = *MEMORY[0x263F2DDA0];
  qword_26B11FBC0 = 0x300000000;
  dword_26B11FBC8 = 31;
  qword_26B11FBD8 = v18;
  qword_26B11FBE0 = (uint64_t)SetHDRFusionEnable;
  qword_26B11FBE8 = (uint64_t)CopyHDRFusionEnable;
  qword_26B11FC00 = *MEMORY[0x263F2DC10];
  qword_26B11FBF0 = 0x300000020;
  dword_26B11FBF8 = 15;
  qword_26B11FC08 = v18;
  qword_26B11FC10 = (uint64_t)SetCAREnable;
  qword_26B11FC18 = (uint64_t)CopyCAREnable;
  qword_26B11FC30 = *MEMORY[0x263F2DF00];
  qword_26B11FC20 = 0x300040000;
  dword_26B11FC28 = 15;
  qword_26B11FC38 = v15;
  qword_26B11FC40 = (uint64_t)SetStreamMemoryPoolID;
  qword_26B11FC60 = *MEMORY[0x263F2DF50];
  qword_26B11FC48 = 0;
  qword_26B11FC50 = 0x300000000;
  dword_26B11FC58 = 63;
  qword_26B11FC68 = v15;
  qword_26B11FC70 = (uint64_t)SetSwitchingFormatIndex;
  qword_26B11FC78 = (uint64_t)CopySwitchingFormatIndex;
  qword_26B11FC90 = *MEMORY[0x263F2DFE8];
  qword_26B11FC80 = 0x300000000;
  dword_26B11FC88 = 31;
  qword_26B11FC98 = v13;
  qword_26B11FCA0 = 0;
  qword_26B11FCA8 = (uint64_t)CopySensorDimensions;
  qword_26B11FCC0 = *MEMORY[0x263F2DB48];
  qword_26B11FCB0 = 0x100000000;
  dword_26B11FCB8 = 31;
  qword_26B11FCC8 = v13;
  qword_26B11FCD0 = (uint64_t)SetActiveNondisruptiveSwitchingFormats;
  qword_26B11FCF0 = *MEMORY[0x263F2E8C8];
  qword_26B11FCD8 = 0;
  qword_26B11FCE0 = 0x300000000;
  dword_26B11FCE8 = 31;
  qword_26B11FCF8 = v13;
  qword_26B11FD00 = 0;
  qword_26B11FD08 = (uint64_t)CopyVisionDataConfigurationSupportedKeys;
  qword_26B11FD20 = *MEMORY[0x263F2DCA8];
  qword_26B11FD10 = 0x100000000;
  dword_26B11FD18 = 31;
  qword_26B11FD28 = v18;
  qword_26B11FD30 = (uint64_t)SetLumaHistogramsOnStreamingOutputs;
  qword_26B11FD50 = *MEMORY[0x263F2DE10];
  qword_26B11FD38 = 0;
  qword_26B11FD40 = 0x300000000;
  dword_26B11FD48 = 31;
  qword_26B11FD58 = v13;
  qword_26B11FD60 = 0;
  qword_26B11FD68 = (uint64_t)CopyLSCQuadraCICGainGrid;
  qword_26B11FD80 = *MEMORY[0x263F2DD60];
  qword_26B11FD70 = 0x101000000;
  dword_26B11FD78 = 31;
  qword_26B11FD88 = v13;
  qword_26B11FD90 = 0;
  qword_26B11FD98 = (uint64_t)CopyFocusPixelMap;
  qword_26B11FDB0 = *MEMORY[0x263F2DC00];
  qword_26B11FDA0 = 0x100000000;
  dword_26B11FDA8 = 15;
  qword_26B11FDB8 = v13;
  qword_26B11FDC0 = 0;
  qword_26B11FDC8 = (uint64_t)CopyNarrowerCalibratedExtrinsics;
  qword_26B11FDE0 = *MEMORY[0x263F2DD90];
  qword_26B11FDD0 = 0x300400000;
  dword_26B11FDD8 = 31;
  qword_26B11FDE8 = v13;
  qword_26B11FDF0 = 0;
  qword_26B11FDF8 = (uint64_t)CopyNarrowerCalibratedGDCCoefficients;
  qword_26B11FE10 = *MEMORY[0x263F2DF78];
  qword_26B11FE00 = 0x300400000;
  dword_26B11FE08 = 31;
  qword_26B11FE18 = v13;
  qword_26B11FE20 = 0;
  qword_26B11FE28 = (uint64_t)CopyNarrowerCalibratedOpticalCenter;
  qword_26B11FE40 = *MEMORY[0x263F2DBE0];
  qword_26B11FE30 = 0x300400000;
  dword_26B11FE38 = 31;
  qword_26B11FE48 = v15;
  qword_26B11FE50 = 0;
  qword_26B11FE58 = (uint64_t)CopyNarrowerFOVCalibratedValidRadius;
  qword_26B11FE70 = *MEMORY[0x263F2DBD8];
  qword_26B11FE60 = 0x100400000;
  dword_26B11FE68 = 31;
  qword_26B11FE78 = v15;
  qword_26B11FE80 = 0;
  qword_26B11FE88 = (uint64_t)CopyFullFOVCalibratedValidRadius;
  qword_26B11FEA0 = *MEMORY[0x263F2DBF0];
  qword_26B11FE90 = 0x100200000;
  dword_26B11FE98 = 31;
  qword_26B11FEA8 = v13;
  qword_26B11FEB0 = 0;
  qword_26B11FEB8 = (uint64_t)CopyCameraViewMatrix;
  qword_26B11FED0 = *MEMORY[0x263F2DB38];
  qword_26B11FEC0 = 0;
  dword_26B11FEC8 = 63;
  qword_26B11FED8 = v13;
  qword_26B11FEE0 = 0;
  qword_26B11FEE8 = (uint64_t)CopyAbsoluteColorCalibrations;
  qword_26B11FF00 = *MEMORY[0x263F2E070];
  qword_26B11FEF0 = 0x100000000;
  dword_26B11FEF8 = 15;
  qword_26B11FF08 = v18;
  qword_26B11FF10 = (uint64_t)SetSupplementalControlForAutoFocusAssistEnabled;
  qword_26B11FF18 = (uint64_t)CopySupplementalControlForAutoFocusAssistEnabled;
  dword_26B11FF28 = 16;
  qword_26B11FF30 = *MEMORY[0x263F2DD30];
  qword_26B11FF20 = 0x300100000;
  qword_26B11FF38 = v13;
  qword_26B11FF40 = 0;
  qword_26B11FF48 = (uint64_t)CopyFlashCalibrationData;
  dword_26B11FF58 = 7;
  qword_26B11FF60 = *MEMORY[0x263F2DC28];
  qword_26B11FF50 = 0x300000001;
  qword_26B11FF68 = v15;
  qword_26B11FF70 = (uint64_t)SetColorPostProcessingMode;
  qword_26B11FF90 = *MEMORY[0x263F2DE90];
  qword_26B11FF78 = 0;
  qword_26B11FF80 = 0x300000000;
  dword_26B11FF88 = 31;
  qword_26B11FF98 = v13;
  qword_26B11FFA0 = (uint64_t)SetLumaHistogramROI;
  qword_26B11FFC0 = *MEMORY[0x263F2DC70];
  qword_26B11FFA8 = 0;
  qword_26B11FFB0 = 0x300000000;
  dword_26B11FFB8 = 31;
  qword_26B11FFC8 = v13;
  qword_26B11FFD0 = 0;
  qword_26B11FFD8 = (uint64_t)CopyDefectivePixelTable;
  qword_26B11FFF0 = *MEMORY[0x263F2E008];
  qword_26B11FFE0 = 0x300000000;
  dword_26B11FFE8 = 31;
  qword_26B11FFF8 = v15;
  qword_26B120000 = (uint64_t)SetSensorRawOutputRetainedBufferCount;
  qword_26B120020 = *MEMORY[0x263F2DFF8];
  qword_26B120008 = 0;
  qword_26B120010 = 0x300000000;
  dword_26B120018 = 31;
  qword_26B120028 = v13;
  qword_26B120030 = 0;
  qword_26B120038 = (uint64_t)CopyUnsynchronizedSensorRawOutputBufferPoolRequirements;
  qword_26B120050 = *MEMORY[0x263F2DFF0];
  qword_26B120040 = 0x300000000;
  dword_26B120048 = 31;
  qword_26B120058 = v13;
  qword_26B120060 = (uint64_t)SetUnsynchronizedSensorRawOutputBufferPool;
  qword_26B120080 = @"StrobeYetiStatus";
  qword_26B120068 = 0;
  qword_26B120070 = 0x300000000;
  dword_26B120078 = 31;
  qword_26B120088 = v15;
  qword_26B120090 = 0;
  qword_26B120098 = (uint64_t)CopyStrobeYetiStatus;
  qword_26B1200B0 = *MEMORY[0x263F2DCF8];
  qword_26B1200A0 = 0x300000001;
  dword_26B1200A8 = 1;
  qword_26B1200B8 = v18;
  qword_26B1200C0 = (uint64_t)SetExclusivelyForSecureProcessing;
  qword_26B1200C8 = (uint64_t)CopyExclusivelyForSecureProcessing;
  qword_26B1200E0 = @"TorchSegmentParameters";
  qword_26B1200D0 = 0x302000000;
  dword_26B1200D8 = 24;
  qword_26B1200E8 = v13;
  qword_26B1200F0 = (uint64_t)SetTorchSegmentParameters;
  qword_26B120110 = @"FocusBehavior";
  qword_26B1200F8 = 0;
  qword_26B120100 = 1;
  dword_26B120108 = 31;
  qword_26B120118 = v15;
  qword_26B120120 = (uint64_t)SetFocusBehavior;
  qword_26B120140 = @"ExclaveTestSuite";
  qword_26B120128 = 0;
  qword_26B120130 = 0x200000000;
  dword_26B120138 = 31;
  qword_26B120148 = v13;
  qword_26B120150 = (uint64_t)SetExclaveTestSuite;
  dword_26B120168 = 24;
  qword_26B120170 = *MEMORY[0x263F2DEA8];
  qword_26B120158 = 0;
  qword_26B120160 = 0x302000000;
  qword_26B120178 = v15;
  qword_26B120180 = (uint64_t)SetMainToSIFRFrameRateRatio;
  qword_26B120188 = (uint64_t)CopyMainToSIFRFrameRateRatio;
  qword_26B1201A0 = *MEMORY[0x263F2DC78];
  qword_26B120190 = 0x300000020;
  dword_26B120198 = 15;
  qword_26B1201A8 = v13;
  qword_26B1201B0 = 0;
  qword_26B1201B8 = (uint64_t)CopyDefectivePixels;
  *(&dword_26B11C1D8 + 4092) = 31;
  qword_26B1201D0 = @"AWBTemporalStabilizationEnabled";
  qword_26B1201C0 = 0x300000000;
  qword_26B1201D8 = v18;
  qword_26B1201E0 = (uint64_t)SetAWBTemporalStabilizationEnabled;
  *(&dword_26B11C1D8 + 4104) = 15;
  qword_26B120200 = *MEMORY[0x263F2E020];
  qword_26B1201E8 = 0;
  qword_26B1201F0 = 0x300000000;
  qword_26B120208 = v13;
  qword_26B120210 = 0;
  *(&dword_26B11C1D8 + 4116) = 1;
  qword_26B120218 = (uint64_t)CopyDCNUCVPixelBuffer;
  qword_26B120230 = @"ExternalSyncModeEnabled";
  qword_26B120220 = 0x300000000;
  qword_26B120238 = v17;
  qword_26B120240 = (uint64_t)SetExternalSyncModeEnabled;
  *(&dword_26B11C1D8 + 4128) = 31;
  qword_26B120260 = *MEMORY[0x263F2DEA0];
  qword_26B120248 = 0;
  qword_26B120250 = 0x200000000;
  qword_26B120268 = v13;
  qword_26B120270 = (uint64_t)SetMLVNRConfiguration;
  *(&dword_26B11C1D8 + 414pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 15;
  qword_26B120290 = *MEMORY[0x263F2E090];
  qword_26B120278 = 0;
  qword_26B120280 = 0x300000000;
  qword_26B120298 = v13;
  qword_26B1202A0 = 0;
  qword_26B1202A8 = (uint64_t)CopySupportedSphereModes;
  *(&dword_26B11C1D8 + 4152) = 63;
  qword_26B1202C0 = *MEMORY[0x263F2DD78];
  qword_26B1202B0 = 0x300000004;
  qword_26B1202C8 = v15;
  qword_26B1202D0 = (uint64_t)SetPrimaryFrameSkip;
  *(&dword_26B11C1D8 + 4164) = 15;
  qword_26B1202F0 = *MEMORY[0x263F2DB40];
  qword_26B1202D8 = 0;
  qword_26B1202E0 = 0x300000000;
  qword_26B1202F8 = v13;
  qword_26B120300 = (uint64_t)SetActiveNondisruptiveStreamingFormats;
  *(&dword_26B11C1D8 + 4176) = 31;
  qword_26B120320 = *MEMORY[0x263F2DB50];
  qword_26B120308 = 0;
  qword_26B120310 = 0x200008000;
  qword_26B120328 = v13;
  qword_26B120330 = 0;
  qword_26B120338 = (uint64_t)CopyStreamSensorRawOutputBufferPoolRequirements;
  CFDictionaryRef v27 = (uint64_t *)MEMORY[0x263F2E000];
  *(&dword_26B11C1D8 + 4188) = 31;
  qword_26B120350 = *v27;
  qword_26B120340 = 0x100008000;
  qword_26B120358 = v13;
  qword_26B120360 = (uint64_t)SetStreamSensorRawOutputBufferPools;
  uint64_t v28 = (uint64_t *)MEMORY[0x263F2E010];
  *(&dword_26B11C1D8 + 420pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 31;
  qword_26B120380 = *v28;
  qword_26B120368 = 0;
  qword_26B120370 = 0x200008000;
  qword_26B120388 = v13;
  qword_26B120390 = (uint64_t)SetStreamSensorRawOutputRetainedBufferCounts;
  *(&dword_26B11C1D8 + 4212) = 31;
  qword_26B1203B0 = *MEMORY[0x263F2DBD0];
  qword_26B120398 = 0;
  qword_26B1203A0 = 0x200008000;
  qword_26B1203B8 = v15;
  qword_26B1203C0 = 0;
  qword_26B1203C8 = (uint64_t)CopyCalibratedRotationAngle;
  *(&dword_26B11C1D8 + 4224) = 15;
  qword_26B1203E0 = *MEMORY[0x263F2E0F8];
  qword_26B1203D0 = 0x300000000;
  qword_26B1203E8 = v15;
  qword_26B1203F0 = (uint64_t)SetTorchBeamWidth;
  *(&dword_26B11C1D8 + 4236) = 31;
  qword_26B120410 = *MEMORY[0x263F2DF38];
  qword_26B1203F8 = 0;
  qword_26B120400 = 257;
  qword_26B120418 = v18;
  qword_26B120420 = (uint64_t)SetMultiIlluminantWhiteBalanceEnabled;
  qword_26B120428 = (uint64_t)CopyMultiIlluminantWhiteBalanceEnabled;
  *(&dword_26B11C1D8 + 4248) = 15;
  qword_26B120440 = *MEMORY[0x263F2DEF8];
  qword_26B120430 = 0x300008000;
  qword_26B120448 = v15;
  qword_26B120450 = (uint64_t)SetMaximumFrameRateForBufferAllocation;
  *(&dword_26B11C1D8 + 426pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 31;
  qword_26B120470 = @"SIFRControlMode_Private";
  qword_26B120458 = 0;
  qword_26B120460 = 0x300008000;
  qword_26B120478 = v15;
  qword_26B120480 = (uint64_t)SetSIFRControlMode;
  *(&dword_26B11C1D8 + 4272) = 15;
  qword_26B1204A0 = *MEMORY[0x263F2DBE8];
  qword_26B120488 = 0;
  qword_26B120490 = 0x300000020;
  qword_26B1204A8 = v15;
  *(&dword_26B11C1D8 + 4284) = 15;
  qword_26B1204B0 = (uint64_t)SetCameraControlsCacheExpiryDuration;
  qword_26B1204D0 = *MEMORY[0x263F2DCC8];
  qword_26B1204B8 = 0;
  qword_26B1204C0 = 0x300008000;
  qword_26B1204D8 = v18;
  *(&dword_26B11C1D8 + 4296) = 8;
  qword_26B1204E0 = (uint64_t)SetDeskViewEnabled;
  qword_26B120500 = @"DCSDataFileLoad_Private";
  qword_26B1204E8 = 0;
  qword_26B1204F0 = 0x300000000;
  qword_26B120508 = v13;
  qword_26B120510 = (uint64_t)SetDCSDataFileLoad;
  *(&dword_26B11C1D8 + 4308) = 63;
  qword_26B120530 = @"DCSDataFileUnload_Private";
  qword_26B120518 = 0;
  qword_26B120520 = 0x200000000;
  qword_26B120538 = v15;
  qword_26B120540 = (uint64_t)SetDCSDataFileUnload;
  *(&dword_26B11C1D8 + 432pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 63;
  *(_OWORD *)((char *)&streamProperties[2169] + 4) = 0u;
  qword_26B120548 = 0;
  qword_26B120550 = 0x200000000;
  xmmword_26B120570 = 0u;
  xmmword_26B120560 = 0u;
  groupProperties[0] = v16;
  unk_26B120A20 = v13;
  qword_26B120A28 = 0;
  unk_26B120A30 = CopyGroupSupportedPropertiesDictionary;
  qword_26B120A48 = *MEMORY[0x263F2EB80];
  unk_26B120A50 = v13;
  qword_26B120A38 = 0;
  dword_26B120A40 = 63;
  qword_26B120A58 = 0;
  unk_26B120A60 = CopyGroupSupportedStreams;
  qword_26B120A78 = *MEMORY[0x263F2EB00];
  unk_26B120A80 = v13;
  qword_26B120A68 = 0;
  dword_26B120A70 = 63;
  qword_26B120A88 = 0;
  unk_26B120A90 = CopyGroupBaseZoomFactors;
  qword_26B120AA8 = *MEMORY[0x263F2EB08];
  unk_26B120AB0 = v13;
  qword_26B120A98 = 0;
  dword_26B120AA0 = 31;
  qword_26B120AB8 = 0;
  unk_26B120AC0 = CopyGroupExtrinsics;
  qword_26B120AD8 = *MEMORY[0x263F2EB88];
  unk_26B120AE0 = v13;
  qword_26B120AC8 = 0;
  dword_26B120AD0 = 63;
  qword_26B120AE8 = 0;
  unk_26B120AF0 = CopyGroupSynchronizationMaster;
  qword_26B120B08 = *MEMORY[0x263F2EAF8];
  unk_26B120B10 = v13;
  qword_26B120AF8 = 0;
  dword_26B120B00 = 63;
  qword_26B120B18 = (uint64_t)SetGroupActiveStreams;
  qword_26B120B20 = (uint64_t)CopyGroupActiveStreams;
  qword_26B120B38 = *MEMORY[0x263F2EB48];
  unk_26B120B40 = v15;
  qword_26B120B28 = 0;
  dword_26B120B30 = 63;
  qword_26B120B48 = (uint64_t)SetGroupMinSkippingRatio;
  qword_26B120B50 = (uint64_t)CopyGroupMinSkippingRatio;
  qword_26B120B68 = *MEMORY[0x263F2EB18];
  unk_26B120B70 = v13;
  qword_26B120B58 = 0x300000000;
  dword_26B120B60 = 63;
  qword_26B120B78 = (uint64_t)SetGroupMasterConfiguration;
  qword_26B120B80 = (uint64_t)CopyGroupMasterConfiguration;
  qword_26B120B98 = *MEMORY[0x263F2EB20];
  unk_26B120BA0 = v13;
  qword_26B120B88 = 0x300010000;
  dword_26B120B90 = 63;
  qword_26B120BA8 = 0;
  unk_26B120BB0 = CopyGroupMasterConfigurationSupportedKeys;
  qword_26B120BC8 = *MEMORY[0x263F2EB90];
  unk_26B120BD0 = v13;
  qword_26B120BB8 = 0x10000;
  dword_26B120BC0 = 63;
  qword_26B120BF8 = *MEMORY[0x263F2EB38];
  unk_26B120C00 = v15;
  qword_26B120BD8 = (uint64_t)SetGroupZoomFactorsByOutput;
  unk_26B120BE0 = 0;
  qword_26B120BE8 = 0x300004000;
  dword_26B120BF0 = 31;
  qword_26B120C08 = (uint64_t)SetGroupMaxSlaveStreams;
  qword_26B120C10 = (uint64_t)CopyGroupMaxSlaveStreams;
  qword_26B120C28 = *MEMORY[0x263F2EB28];
  qword_26B120C18 = 0x300000000;
  dword_26B120C20 = 63;
  qword_26B120C30 = v15;
  qword_26B120C38 = (uint64_t)SetGroupMaxSlaveTimeMachines;
  qword_26B120C40 = (uint64_t)CopyGroupMaxSlaveTimeMachines;
  qword_26B120C58 = *MEMORY[0x263F2EB30];
  qword_26B120C48 = 0x300000000;
  dword_26B120C50 = 63;
  qword_26B120C60 = v15;
  qword_26B120C68 = (uint64_t)SetGroupMaxSlaveStreamsProcessingEnabled;
  qword_26B120C70 = (uint64_t)CopyGroupMaxSlaveStreamsProcessingEnabled;
  qword_26B120C88 = *MEMORY[0x263F2EB40];
  qword_26B120C78 = 0x300000000;
  dword_26B120C80 = 63;
  qword_26B120C90 = v18;
  qword_26B120C98 = (uint64_t)SetMidFrameSynchronizationEnabled;
  qword_26B120CA0 = (uint64_t)CopyGroupMidFrameSynchronizationEnabled;
  qword_26B120CB8 = *MEMORY[0x263F2EB58];
  qword_26B120CA8 = 0x300000000;
  dword_26B120CB0 = 63;
  qword_26B120CC0 = v13;
  qword_26B120CC8 = (uint64_t)SetSensorRawOutputBufferPool;
  qword_26B120CE8 = *MEMORY[0x263F2EB60];
  qword_26B120CD0 = 0;
  qword_26B120CD8 = 0x300000000;
  dword_26B120CE0 = 63;
  qword_26B120CF0 = v13;
  qword_26B120CF8 = 0;
  qword_26B120D00 = (uint64_t)CopySensorRawOutputBufferPoolRequirements;
  qword_26B120D18 = *MEMORY[0x263F2EAE8];
  qword_26B120D08 = 0x300000000;
  dword_26B120D10 = 63;
  qword_26B120D20 = v13;
  qword_26B120D28 = (uint64_t)SetGroupNondisruptiveSwitchingFormatIndices;
  qword_26B120D48 = *MEMORY[0x263F2EB70];
  qword_26B120D30 = 0;
  qword_26B120D38 = 0x300000000;
  dword_26B120D40 = 63;
  qword_26B120D50 = v15;
  qword_26B120D58 = (uint64_t)SetSynchronizedSensorRawOutputRetainedBufferCount;
  qword_26B120D78 = *MEMORY[0x263F2EAD0];
  qword_26B120D60 = 0;
  qword_26B120D68 = 0x300000000;
  dword_26B120D70 = 63;
  qword_26B120D80 = v18;
  qword_26B120D88 = (uint64_t)SetAEMatchIntegrationTimes;
  qword_26B120DA8 = *MEMORY[0x263F2EAF0];
  qword_26B120D90 = 0;
  qword_26B120D98 = 0x300000000;
  dword_26B120DA0 = 31;
  qword_26B120DB0 = v13;
  qword_26B120DB8 = 0;
  qword_26B120DC0 = (uint64_t)CopySynchronizedStreamsSensorRawOutputBufferPoolRequirements;
  qword_26B120DD8 = *MEMORY[0x263F2EB68];
  qword_26B120DC8 = 0x100008000;
  dword_26B120DD0 = 31;
  qword_26B120DE0 = v13;
  qword_26B120DE8 = (uint64_t)SetSynchronizedStreamsSensorRawOutputBufferPools;
  qword_26B120E08 = *MEMORY[0x263F2EB78];
  qword_26B120DF0 = 0;
  qword_26B120DF8 = 0x200008000;
  dword_26B120E00 = 31;
  qword_26B120E10 = v13;
  qword_26B120E18 = (uint64_t)SetSynchronizedStreamsSensorRawOutputRetainedBufferCounts;
  qword_26B120E38 = *MEMORY[0x263F2EAD8];
  qword_26B120E20 = 0;
  qword_26B120E28 = 0x200008000;
  dword_26B120E30 = 31;
  qword_26B120E40 = v13;
  qword_26B120E48 = (uint64_t)SetGroupAEWindowParams;
  qword_26B120E68 = *MEMORY[0x263F2EAE0];
  qword_26B120E50 = 0;
  qword_26B120E58 = 0x300000000;
  dword_26B120E60 = 31;
  qword_26B120E70 = v13;
  qword_26B120E78 = (uint64_t)SetGroupAFWindowParams;
  qword_26B120E98 = *MEMORY[0x263F2EB50];
  qword_26B120E80 = 0;
  qword_26B120E88 = 0x300000000;
  dword_26B120E90 = 31;
  qword_26B120EA0 = v13;
  qword_26B120EA8 = (uint64_t)SetGroupROIForCameraControls;
  qword_26B120EC8 = *MEMORY[0x263F2EB10];
  qword_26B120EB0 = 0;
  qword_26B120EB8 = 0x300000000;
  dword_26B120EC0 = 31;
  qword_26B120ED0 = v13;
  qword_26B120ED8 = (uint64_t)SetGroupLumaHistogramROI;
  qword_26B120EF8 = v51;
  qword_26B120F08 = (uint64_t)LockAWBNow;
  qword_26B120F28 = v50;
  qword_26B120F38 = (uint64_t)UnlockAWBNow;
  qword_26B120F58 = v49;
  qword_26B120F68 = (uint64_t)LockAENow;
  qword_26B120F88 = v48;
  qword_26B120F98 = (uint64_t)UnlockAENow;
  qword_26B120FB8 = v54;
  qword_26B120FC8 = (uint64_t)AutoFocusNow;
  qword_26B120FE8 = v47;
  qword_26B120FF8 = (uint64_t)SetAFWindowParams;
  qword_26B121018 = v46;
  qword_26B121028 = (uint64_t)SetAEWindowParams;
  qword_26B121048 = v25;
  qword_26B121058 = (uint64_t)SetROIForCameraControls;
  qword_26B121078 = v20;
  qword_26B1210A8 = v20;
  qword_26B121088 = (uint64_t)SetAEFaceDetectionMetering;
  qword_26B1210B8 = (uint64_t)SetAEFaceDetectionMetering;
  qword_26B1210D8 = v45;
  qword_26B1210E8 = (uint64_t)SetExposureBias;
  qword_26B121108 = v44;
  qword_26B121118 = (uint64_t)SetAEConvergenceSpeed;
  qword_26B121138 = v43;
  qword_26B121148 = (uint64_t)SetAEStability;
  qword_26B121168 = v42;
  qword_26B121178 = (uint64_t)SetAFSearchPositions;
  qword_26B121198 = v41;
  qword_26B1211A8 = (uint64_t)ManualFocusNow;
  qword_26B1211C8 = v40;
  qword_26B1211D8 = (uint64_t)SetHistogramParams;
  qword_26B1211F8 = v39;
  qword_26B121208 = (uint64_t)SetAEMeteringMode;
  qword_26B121228 = v38;
  qword_26B121238 = (uint64_t)SetAFEarlyOutParams;
  qword_26B121258 = v37;
  qword_26B121268 = (uint64_t)SetDeviceOrientation;
  dword_26B121280 = 63;
  qword_26B121288 = v36;
  qword_26B121298 = (uint64_t)LockBLCNow;
  qword_26B1212B8 = v35;
  qword_26B1212C8 = (uint64_t)UnlockBLCNow;
  qword_26B1212E8 = v34;
  qword_26B1212F8 = (uint64_t)SetAFPeakPredictionEnabled;
  qword_26B121318 = v33;
  qword_26B121328 = (uint64_t)PeakTrackingFocusNow;
  qword_26B121348 = v32;
  qword_26B121358 = (uint64_t)LockLTMNow;
  qword_26B121378 = v31;
  qword_26B121388 = (uint64_t)UnlockLTMNow;
  qword_26B1213A8 = v53;
  qword_26B1213B8 = (uint64_t)SetAutoFocusMode;
  qword_26B1213C0 = (uint64_t)CopyAutoFocusMode;
  qword_26B1213D8 = v52;
  qword_26B1213E8 = (uint64_t)SetMatrixFocusParams;
  qword_26B1213F0 = (uint64_t)CopyMatrixFocusParams;
  qword_26B121408 = v21;
  qword_26B121418 = (uint64_t)SetContinuousAutoFocusNow;
  qword_26B121438 = v30;
  qword_26B120EE0 = 0;
  qword_26B120EE8 = 0x300000000;
  dword_26B120EF0 = 31;
  qword_26B120F00 = v17;
  qword_26B120F10 = 0;
  qword_26B120F18 = 0x300000020;
  dword_26B120F20 = 31;
  qword_26B120F30 = v17;
  qword_26B120F40 = 0;
  qword_26B120F48 = 0x300000020;
  dword_26B120F50 = 31;
  qword_26B120F60 = v17;
  qword_26B120F70 = 0;
  qword_26B120F78 = 0x300000000;
  dword_26B120F80 = 31;
  qword_26B120F90 = v17;
  qword_26B120FA0 = 0;
  qword_26B120FA8 = 0x300000000;
  dword_26B120FB0 = 31;
  qword_26B120FC0 = v17;
  qword_26B120FD0 = 0;
  qword_26B120FD8 = 0x300000002;
  dword_26B120FE0 = 31;
  qword_26B120FF0 = v13;
  qword_26B121000 = 0;
  qword_26B121008 = 0x300000000;
  dword_26B121010 = 31;
  qword_26B121020 = v13;
  qword_26B121030 = 0;
  qword_26B121038 = 0x300000000;
  dword_26B121040 = 31;
  qword_26B121050 = v13;
  qword_26B121060 = 0;
  qword_26B121068 = 0x300000000;
  dword_26B121070 = 31;
  qword_26B121080 = v13;
  qword_26B121090 = 0;
  qword_26B121098 = 0x300000000;
  dword_26B1210A0 = 31;
  qword_26B1210B0 = v13;
  qword_26B1210C0 = 0;
  qword_26B1210C8 = 0x300000000;
  dword_26B1210D0 = 31;
  qword_26B1210E0 = v13;
  qword_26B1210F0 = 0;
  qword_26B1210F8 = 0x300000000;
  dword_26B121100 = 31;
  qword_26B121110 = v15;
  qword_26B121120 = 0;
  qword_26B121128 = 0x300000000;
  dword_26B121130 = 31;
  qword_26B121140 = v15;
  qword_26B121150 = 0;
  qword_26B121158 = 0x300000000;
  dword_26B121160 = 31;
  qword_26B121170 = v13;
  qword_26B121180 = 0;
  qword_26B121188 = 0x300000002;
  dword_26B121190 = 31;
  qword_26B1211A0 = v13;
  qword_26B1211B0 = 0;
  qword_26B1211B8 = 0x300000002;
  dword_26B1211C0 = 31;
  qword_26B1211D0 = v13;
  qword_26B1211E0 = 0;
  qword_26B1211E8 = 0x300000000;
  dword_26B1211F0 = 31;
  qword_26B121200 = v19;
  qword_26B121210 = 0;
  qword_26B121218 = 0x300000000;
  dword_26B121220 = 31;
  qword_26B121230 = v13;
  qword_26B121240 = 0;
  qword_26B121248 = 0x300000002;
  dword_26B121250 = 31;
  qword_26B121260 = v15;
  qword_26B121270 = 0;
  qword_26B121278 = 0x300000000;
  qword_26B121290 = v17;
  qword_26B1212A0 = 0;
  qword_26B1212A8 = 0x300000000;
  dword_26B1212B0 = 31;
  qword_26B1212C0 = v17;
  qword_26B1212D0 = 0;
  qword_26B1212D8 = 0x300000000;
  dword_26B1212E0 = 31;
  qword_26B1212F0 = v18;
  qword_26B121300 = 0;
  qword_26B121308 = 0x300000000;
  dword_26B121310 = 31;
  qword_26B121320 = v13;
  qword_26B121330 = 0;
  qword_26B121338 = 0x300000002;
  dword_26B121340 = 31;
  qword_26B121350 = v17;
  qword_26B121360 = 0;
  qword_26B121368 = 0x300000000;
  dword_26B121370 = 31;
  qword_26B121380 = v17;
  qword_26B121390 = 0;
  qword_26B121398 = 0x300000000;
  dword_26B1213A0 = 31;
  qword_26B1213B0 = v19;
  qword_26B1213C8 = 0x300000002;
  dword_26B1213D0 = 31;
  qword_26B1213E0 = v13;
  qword_26B1213F8 = 0x300000002;
  dword_26B121400 = 31;
  qword_26B121410 = v13;
  qword_26B121420 = 0;
  qword_26B121428 = 0x30000000ALL;
  dword_26B121430 = 31;
  qword_26B121440 = v17;
  qword_26B121448 = (uint64_t)SetLockAFNow;
  qword_26B121450 = 0;
  qword_26B121458 = 0x300000002;
  dword_26B121460 = 31;
  qword_26B121468 = v22;
  qword_26B121470 = v15;
  qword_26B121478 = (uint64_t)SetGroupZoomFactor;
  qword_26B121498 = v23;
  qword_26B121480 = 0;
  qword_26B121488 = 0x300000000;
  dword_26B121490 = 31;
  qword_26B1214A0 = v17;
  qword_26B1214A8 = (uint64_t)SetAutoFocusHintNow;
  qword_26B1214B0 = 0;
  qword_26B1214B8 = 0x30000000ALL;
  dword_26B1214C0 = 31;
  qword_26B1214C8 = v55;
  qword_26B1214D0 = v13;
  qword_26B1214D8 = (uint64_t)GroupStillImageCaptureNow;
  qword_26B1214F8 = v24;
  qword_26B1214E0 = 0;
  qword_26B1214E8 = 0x300000000;
  dword_26B1214F0 = 31;
  qword_26B121500 = v13;
  qword_26B121508 = (uint64_t)SetFocusNow;
  qword_26B121510 = 0;
  qword_26B121518 = 0x30000000ALL;
  dword_26B121520 = 31;
  deviceProperties[0] = v16;
  *(void *)algn_26B120598 = v13;
  qword_26B1205A0 = 0;
  unk_26B1205A8 = CopyDeviceSupportedPropertiesDictionary;
  dword_26B1205B0 = 0;
  uint64_t v29 = *MEMORY[0x263F2C2D0];
  qword_26B1205B8 = *MEMORY[0x263F2C140];
  unk_26B1205C0 = v29;
  qword_26B1205C8 = 0;
  unk_26B1205D0 = CopyClock;
  dword_26B1205D8 = 0;
  qword_26B1205E0 = *MEMORY[0x263F2C168];
  unk_26B1205E8 = v13;
  qword_26B1205F0 = 0;
  unk_26B1205F8 = CopyStreamArray;
  dword_26B120600 = 0;
  qword_26B120608 = *MEMORY[0x263F2C148];
  unk_26B120610 = v19;
  qword_26B120618 = 0;
  unk_26B120620 = CopyFirmwareVersion;
  dword_26B120628 = 0;
  qword_26B120630 = *MEMORY[0x263F2C170];
  unk_26B120638 = v13;
  qword_26B120640 = 0;
  unk_26B120648 = CopyStreamGroupsArray;
  dword_26B120650 = 0;
  qword_26B120658 = *MEMORY[0x263F2C160];
  unk_26B120660 = v13;
  qword_26B120668 = (uint64_t)SetMultiCamConfiguration;
  qword_26B120670 = (uint64_t)CopyMultiCamConfiguration;
  dword_26B120678 = 0;
  qword_26B120680 = *MEMORY[0x263F2C138];
  unk_26B120688 = v18;
  qword_26B120690 = (uint64_t)SetClientIsActive;
  unk_26B120698 = 0;
  dword_26B1206A0 = 0;
  qword_26B1206A8 = *MEMORY[0x263F2C130];
  unk_26B1206B0 = v18;
  qword_26B1206B8 = (uint64_t)SetAudioIsPlayingToBuiltInSpeaker;
  unk_26B1206C0 = 0;
  dword_26B1206C8 = 0;
  qword_26B1206D0 = *MEMORY[0x263F2C178];
  unk_26B1206D8 = v18;
  qword_26B1206E0 = (uint64_t)SetTOFAutoFocusEnabled;
  qword_26B1206E8 = (uint64_t)CopyTOFAutoFocusEnabled;
  dword_26B1206F0 = 0x2000;
  qword_26B1206F8 = @"DARTCacheParameters";
  unk_26B120700 = v13;
  qword_26B120708 = (uint64_t)SetDARTCacheParameters;
  unk_26B120710 = 0;
  dword_26B120718 = 0;
  qword_26B120720 = @"DiagnosticsLogDump";
  unk_26B120728 = v17;
  qword_26B120730 = (uint64_t)SetDiagnosticsLogDump;
  unk_26B120738 = 0;
  dword_26B120740 = 0;
  qword_26B120748 = @"SensorAgileClockingEnable";
  unk_26B120750 = v18;
  qword_26B120758 = (uint64_t)SetSensorAgileClockingEnable;
  unk_26B120760 = 0;
  dword_26B120768 = 0;
  qword_26B120770 = @"FactoryFeaturesMode";
  unk_26B120778 = v17;
  qword_26B120780 = (uint64_t)SetFactoryFeaturesMode;
  unk_26B120788 = 0;
  dword_26B120790 = 0;
  qword_26B120798 = @"ForgetFirmwareDuringPluginTeardown";
  qword_26B1207A0 = v17;
  qword_26B1207A8 = (uint64_t)SetForgetFirmwareDuringPluginTeardown;
  qword_26B1207B0 = 0;
  dword_26B1207B8 = 0;
  qword_26B1207C0 = @"MotionDataSamplingRate";
  qword_26B1207C8 = v15;
  qword_26B1207D0 = (uint64_t)SetMotionDataSamplingRate;
  qword_26B1207D8 = 0;
  dword_26B1207E0 = 0;
  qword_26B1207E8 = *MEMORY[0x263F2C180];
  qword_26B1207F0 = v13;
  qword_26B1207F8 = 0;
  qword_26B120800 = (uint64_t)CopyUnitInfo;
  dword_26B120808 = 0;
  qword_26B120810 = @"MulticamSessionStatus";
  qword_26B120818 = v13;
  qword_26B120820 = 0;
  qword_26B120828 = (uint64_t)CopyMultiCamSessionStatus;
  dword_26B120830 = 0;
  qword_26B120838 = *MEMORY[0x263F2C158];
  qword_26B120840 = v15;
  qword_26B120848 = (uint64_t)SetDeviceMemoryPoolID;
  qword_26B120850 = 0;
  dword_26B120858 = 0;
  qword_26B120860 = @"DCSAudioAccelTimeReference_Private";
  qword_26B120868 = v13;
  qword_26B120870 = 0;
  qword_26B120878 = (uint64_t)CopyDCSAudioAccelTimeReference;
  dword_26B120880 = 0;
  qword_26B120888 = @"DCSAudioAccelSampleCallback_Private";
  qword_26B120890 = v13;
  qword_26B120898 = (uint64_t)SetDCSAudioAccelCallback;
  qword_26B1208A0 = 0;
  dword_26B1208A8 = 0;
  qword_26B1208B0 = @"DCSAudioAccelMessageCallback_Private";
  qword_26B1208B8 = v13;
  qword_26B1208C0 = (uint64_t)SetDCSAudioAccelMessageCallback;
  qword_26B1208C8 = 0;
  dword_26B1208D0 = 0;
  qword_26B1208D8 = @"DCSAudioAccelConfigTestMode_Private";
  qword_26B1208E0 = v18;
  qword_26B1208E8 = (uint64_t)SetDCSAudioAccelTestMode;
  qword_26B1208F0 = 0;
  dword_26B1208F8 = 0;
  qword_26B120900 = @"DCSAudioAccelDevicePropertyStreamingEnabled_Private";
  qword_26B120908 = v18;
  qword_26B120910 = (uint64_t)SetDCSAudioAccelStreaming;
  qword_26B120918 = (uint64_t)CopyDCSAudioAccelStreaming;
  dword_26B120920 = 0;
  qword_26B120928 = @"DCSFPGAControl_Private";
  qword_26B120930 = v15;
  qword_26B120938 = (uint64_t)SetDCSFPGAControl;
  qword_26B120940 = 0;
  dword_26B120948 = 0;
  qword_26B120950 = @"DCSFPGAStatus_Private";
  qword_26B120958 = v13;
  qword_26B120960 = 0;
  qword_26B120968 = (uint64_t)CopyDCSFPGAStatus;
  dword_26B120970 = 0;
  qword_26B120978 = @"DCSFPGASyncOffsetControl_Private";
  qword_26B120980 = v13;
  qword_26B120988 = (uint64_t)SetDCSFPGASyncOffsetControl;
  qword_26B120990 = 0;
  dword_26B120998 = 0;
  qword_26B1209A0 = @"DCSFPGASyncControl_Private";
  qword_26B1209A8 = v13;
  qword_26B1209B0 = (uint64_t)SetDCSFPGASyncControl;
  qword_26B1209B8 = 0;
  dword_26B1209C0 = 0;
  qword_26B1209C8 = *MEMORY[0x263F2C150];
  qword_26B1209D0 = v18;
  qword_26B1209D8 = (uint64_t)SetLowMemoryMode;
  qword_26B1209E0 = (uint64_t)CopyLowMemoryMode;
  dword_26B1209E8 = 0;
  dword_26B120A10 = 0;
  xmmword_26B120A00 = 0u;
  xmmword_26B1209F0 = 0u;
  processingSessionProperties[0] = v16;
  unk_26B121530 = v13;
  qword_26B121538 = 0;
  unk_26B121540 = CopyProcessingSessionSupportedPropertiesDictionary;
  dword_26B121548 = 0;
  qword_26B121550 = *MEMORY[0x263F2C218];
  unk_26B121558 = v13;
  qword_26B121560 = 0;
  unk_26B121568 = CopyProcessingSessionInputPixelBufferAttributes;
  dword_26B121570 = 0;
  qword_26B121578 = *MEMORY[0x263F2C228];
  unk_26B121580 = v13;
  qword_26B121588 = 0;
  unk_26B121590 = CopyProcessingSessionOutputPixelBufferAttributes;
  dword_26B121598 = 0;
  qword_26B1215A0 = *MEMORY[0x263F2C208];
  unk_26B1215A8 = v13;
  qword_26B1215B0 = (uint64_t)SetProcessingSessionDefaultProcessingParameters;
  qword_26B1215B8 = (uint64_t)CopyProcessingSessionDefaultProcessingParameters;
  dword_26B1215C0 = 0;
  qword_26B1215C8 = *MEMORY[0x263F2C220];
  unk_26B1215D0 = v17;
  qword_26B1215D8 = (uint64_t)SetProcessingSessionOutputHandler;
  unk_26B1215E0 = 0;
  dword_26B1215E8 = 0;
  qword_26B1215F0 = *MEMORY[0x263F2C230];
  unk_26B1215F8 = v13;
  qword_26B121600 = 0;
  unk_26B121608 = CopyProcessingSessionSupportedOutputs;
  dword_26B121610 = 0;
  qword_26B121618 = *MEMORY[0x263F2C210];
  unk_26B121620 = v18;
  qword_26B121628 = (uint64_t)SetProcessingSessionDeferAdditionOfAttachments;
  qword_26B121630 = (uint64_t)CopyProcessingSessionDeferAdditionOfAttachments;
  dword_26B121638 = 0;
  dword_26B121660 = 0;
  xmmword_26B121640 = 0u;
  *(_OWORD *)algn_26B121650 = 0u;
  return result;
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::handleInfieldMatch(unsigned char *a1, void *a2)
{
  id v3 = a2;
  if (a1[336])
  {
    uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      os_log_t v5 = os_log_create("com.apple.isp", "general");
      uint64_t v6 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;

      uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "RGBJ-TofSync-Verbose: Got infield match\n", v13, 2u);
    }
  }
  if (*(void *)a1 && *(unsigned char *)(*(void *)a1 + 20))
  {
    uint64_t v7 = [v3 matchedObjectsForStream:0];
    uint64_t v8 = [v3 matchedObjectsForStream:1];
    uint64_t v9 = [v8 objectAtIndexedSubscript:0];

    uint64_t v10 = *(H16ISP::TimeOfFlightColorInfieldCalibrationManager **)a1;
    uint64_t v11 = [v9 data];
    uint64_t v12 = [v9 metadata];
    H16ISP::TimeOfFlightColorInfieldCalibrationManager::handleMatch(v10, v11, v12, v7);
  }
}

void sub_24688DF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24688DF90()
{
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::handleAggregation(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 336))
  {
    uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      os_log_t v5 = os_log_create("com.apple.isp", "general");
      uint64_t v6 = (void *)GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;

      uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_24680F000, v4, OS_LOG_TYPE_DEFAULT, "RGBJ-TofSync-Verbose: reached  handleAggregation\n", buf, 2u);
    }
  }
  uint64_t v7 = [v3 matchedObjectsForStream:0];
  uint64_t v8 = [v7 count];
  uint64_t v9 = [MEMORY[0x263EFF980] arrayWithCapacity:v8];
  *(void *)int buf = 0;
  uint64_t v32 = buf;
  uint64_t v33 = 0x2020000000;
  uint64_t v34 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2020000000;
  int v30 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  int v26 = 0;
  uint64_t v15 = MEMORY[0x263EF8330];
  uint64_t v16 = 3221225472;
  uint64_t v17 = ___ZN6H16ISP35H16ISPTimeOfFlightColorSynchronizer37TimeOfFlightColorSynchronizerInternal17handleAggregationEP17ADStreamSyncMatch_block_invoke;
  uint64_t v18 = &unk_2651F0350;
  id v10 = v9;
  id v19 = v10;
  uint64_t v20 = buf;
  uint64_t v21 = &v27;
  uint64_t v22 = &v23;
  [v7 enumerateObjectsUsingBlock:&v15];
  int v11 = *((_DWORD *)v28 + 6);
  if (v11 >= 1) {
    *((double *)v32 + mach_timebase_info(this + 3) = *((double *)v32 + 3) / (double)v11;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint64_t v13 = *((unsigned int *)v24 + 6);
    if ((int)v13 >= 1) {
      H16ISP::TimeOfFlightAutoFocusAssistant::updateDecimationRate(v12, v13, *(_DWORD *)(a1 + 220));
    }
  }
  uint64_t v14 = objc_msgSend(MEMORY[0x263F26C90], "pointCloudByMergingPointClouds:", v10, v15, v16, v17, v18);
  objc_storeStrong((id *)(a1 + 304), v14);
  *(void *)(a1 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *((void *)v32 + 3);
  *(unsigned char *)(a1 + 328) = 0;
  objc_storeStrong((id *)(a1 + 312), v7);
  H16ISP::NearEventComplianceHandler::handleEvent(*(void *)(a1 + 16), v14, *((_DWORD *)v24 + 6), *(_DWORD *)(a1 + 220));
  H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal::handleTofMatch((H16ISP::H16ISPTimeOfFlightColorSynchronizer::TimeOfFlightColorSynchronizerInternal *)a1);

  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(buf, 8);
}

void sub_24688E200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 96), 8);

  _Unwind_Resume(a1);
}

void H16ISP::H16ISPTimeOfFlightColorSynchronizer::pushJasperCloud(H16ISP::H16ISPTimeOfFlightColorSynchronizer *this, CVBufferRef buffer, const __CFDictionary *a3)
{
  CVBufferRetain(buffer);
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v6 = *((void *)this + 2);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN6H16ISP35H16ISPTimeOfFlightColorSynchronizer15pushJasperCloudEP10__CVBufferPK14__CFDictionary_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  void block[4] = this;
  void block[5] = buffer;
  void block[6] = a3;
  dispatch_async(v6, block);
}

uint64_t H16ISP::TimeOfFlightAutoFocusAssistant::updateDecimationRate(uint64_t this, uint64_t a2, int a3)
{
  if (*(_DWORD *)(this + 68) != a2)
  {
    double v3 = (double)(int)a2 / (double)a3;
    double v4 = 8.0;
    if (v3 <= 8.0)
    {
      double v4 = 1.0;
      if (v3 >= 1.0) {
        double v4 = (double)(int)vcvtmd_s64_f64(v3);
      }
    }
    *(_DWORD *)(this + 68) = a2;
    *(_DWORD *)(this + 72) = vcvtpd_s64_f64(v3 / v4);
    float v5 = v3;
    return H16ISP::H16ISPServicesRemote::UpdateFlickerIRSignalRateHint(*(H16ISP::H16ISPServicesRemote **)(this + 16), v5, a2);
  }
  return this;
}

H16ISP::JasperConfigManagerInternal *H16ISP::JasperConfigManagerInternal::JasperConfigManagerInternal(H16ISP::JasperConfigManagerInternal *this)
{
  *(void *)this = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 2) = -1;
  *((void *)this + 5) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + mach_timebase_info(this + 3) = 0;
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x4FFFF00000001;
  *((void *)this + 12) = 0;
  *((void *)this + 1mach_timebase_info(this + 3) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -1;
  H16ISP::JasperConfigManagerInternal::setFrameModeDictionaryLocation(this, 0);
  *((_OWORD *)this + mach_timebase_info(this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  id v2 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  *((void *)this + 11) = v2;
  [v2 setValue:&unk_26FAF76E0 forKey:@"Version"];
  return this;
}

void sub_24688E3F0(_Unwind_Exception *exception_object)
{
  double v3 = v2;
  float v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 104) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t H16ISP::H16ISPServicesRemote::UpdateFlickerIRSignalRateHint(H16ISP::H16ISPServicesRemote *this, float a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](this, a3);
  uint64_t v8 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 14;
  int v7 = v4;
  return H16ISP::H16ISPServicesRemote::SetProperty(v3, &v6);
}

uint64_t H16ISP::JasperConfigManager::isBurstAllowed(H16ISP::JasperConfigManager *this)
{
  return 0;
}

uint64_t ActivateFaceDetectionOutputInFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 136)) {
    return 4294954516;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 48);
  unsigned int v4 = *(_DWORD *)(a1 + 168);
  if (v3 < v4) {
    unsigned int v4 = 0;
  }
  if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(a2 + 24), *(_DWORD *)(a1 + 132), *(_DWORD *)(*(void *)(a1 + 160) + 120 * (v3 - v4) + 16), v9, v10))
  {
    float v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      float v5 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v5;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      ActivateFaceDetectionOutputInFrameReceiver();
    }
    return 4294954516;
  }
  if (H16ISP::H16ISPFrameReceiver::addBufferPoolToFrameReceiver(*(void *)(a1 + 136), 3, v11))
  {
    int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v7 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v7;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ActivateFaceDetectionOutputInFrameReceiver();
    }
    return 4294954510;
  }
  else
  {
    H16ISP::H16ISPFrameReceiver::SetFDMode(*(H16ISP::H16ISPFrameReceiver **)(a1 + 136), *(unsigned char *)(a1 + 3700));
    uint64_t result = H16ISP::H16ISPFrameReceiver::StartFaceDetect(*(H16ISP::H16ISPDevice ***)(a1 + 136));
    if (result)
    {
      uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v8 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v8;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        ActivateFaceDetectionOutputInFrameReceiver();
      }
      return 4294954516;
    }
  }
  return result;
}

void _GLOBAL__sub_I_RgbIrCalibration_mm()
{
  uint64_t v0 = (void *)MEMORY[0x24C53DF70]();
  uint64_t v1 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], &gOutputDirName, &dword_24680F000);
  __cxa_atexit(v1, &gCurrFrameId, &dword_24680F000);
}

void _GLOBAL__sub_I_PortableBuffer_mm()
{
  uint64_t v0 = (void *)MEMORY[0x24C53DF70]();
  __cxa_atexit(MEMORY[0x263F8C0B8], &PortableBuffer::m_outputDir, &dword_24680F000);
}

uint64_t _GLOBAL__sub_I_H16ISPJasperConfigManager_mm()
{
  H16ISP::JasperConfigManagerInternal::JasperConfigManagerInternal((H16ISP::JasperConfigManagerInternal *)&H16ISP::_frameConfigManager);

  return __cxa_atexit((void (*)(void *))H16ISP::JasperConfigManagerInternal::~JasperConfigManagerInternal, &H16ISP::_frameConfigManager, &dword_24680F000);
}

void H16ISPGraphExclaveANDKNode::H16ISPGraphExclaveANDKNode(uint64_t a1, H16ISPGraphExclaveANDKNode *this, int a3, int a4)
{
  *(void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode(a1, 28, this, a3, a4) = &unk_26FAEAE00;
}

uint64_t H16ISPGraphExclaveANDKNode::onMessageProcessing(H16ISPGraphExclaveANDKNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  if (a2)
  {
    if ((*((void *)a2 + 9) & (1 << H16ISP::H16ISPFilterGraphNode::GetType(this))) != 0)
    {
      uint64_t v4 = (*(uint64_t (**)(H16ISPGraphExclaveANDKNode *, H16ISP::H16ISPFilterGraphMessage *))(*(void *)this + 80))(this, a2);
      if (v4)
      {
        float v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          float v5 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v5;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          H16ISPGraphExclaveANDKNode::onMessageProcessing(v4, v5);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    int v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v7 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v7;
    }
    uint64_t v4 = 3758097090;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      H16ISPGraphExclaveANDKNode::onMessageProcessing(v7);
    }
  }
  return v4;
}

void H16ISPGraphExclaveRGBANDKNode::H16ISPGraphExclaveRGBANDKNode(H16ISPGraphExclaveRGBANDKNode *this, H16ISP::H16ISPDevice *a2, int a3)
{
  *(void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode((uint64_t)this, 28, a2, a3, 1) = &unk_26FAEAE68;
}

{
  *(void *)H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode((uint64_t)this, 28, a2, a3, 1) = &unk_26FAEAE68;
}

uint64_t H16ISPGraphExclaveRGBANDKNode::runANDKAlgorithm(H16ISPGraphExclaveRGBANDKNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  int v5 = *((_DWORD *)a2 + 90);
  pthread_mutex_unlock(v4);
  if (H16ISP::H16ISPExclaveGraphNode::Verbose((H16ISP::H16ISPDevice **)this))
  {
    xpc_object_t v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      xpc_object_t v6 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v6;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109376;
      int v17 = H16ISP::H16ISPExclaveGraphNode::Channel(this);
      __int16 v18 = 1024;
      int v19 = v5;
      _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_DEFAULT, "ANDK runkit ch=%u reqid=0x%08x\n", buf, 0xEu);
    }
  }
  uint64_t v7 = H16ISP::H16ISPExclaveGraphNode::ConclaveClient(this);
  if (v7)
  {
    uint64_t v8 = v7;
    *(_DWORD *)int buf = H16ISP::H16ISPExclaveGraphNode::Channel(this);
    int v17 = 9;
    kdebug_trace();
    LODWORD(v8) = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchrunkitandk(v8, (uint64_t)buf);
    kdebug_trace();
    if (v8)
    {
      uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v13 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v13;
      }
      uint64_t v10 = 3758097084;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        H16ISPGraphExclaveRGBANDKNode::runANDKAlgorithm(v13);
      }
    }
    else
    {
      uint64_t v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v9 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v9;
      }
      uint64_t v10 = 0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v14 = 67109120;
        int v15 = v5;
        _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "ANDK algorithm did not run for reqid: 0x%08x\n", v14, 8u);
        return 0;
      }
    }
  }
  else
  {
    uint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v12 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v12;
    }
    uint64_t v10 = 3758097136;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      H16ISPGraphExclaveRGBANDKNode::runANDKAlgorithm(v12);
    }
  }
  return v10;
}

uint64_t H16ISP::H16ISPFilterGraphNode::GetNodeProcessingState(H16ISP::H16ISPFilterGraphNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPFilterGraphNode::onDeactivate(H16ISP::H16ISPFilterGraphNode *this)
{
  return 0;
}

void H16ISPGraphExclaveRGBANDKNode::~H16ISPGraphExclaveRGBANDKNode(H16ISPGraphExclaveRGBANDKNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

void JacobianMatrix::JacobianMatrix(JacobianMatrix *this, int a2)
{
  SparseMatrix::SparseMatrix(this);
  JacobianMatrix::JacobianMatrix((JacobianMatrix *)v3, a2, 1);
}

void sub_24688EE10(_Unwind_Exception *a1)
{
  SparseMatrix::~SparseMatrix(v1);
  _Unwind_Resume(a1);
}

void JacobianMatrix::JacobianMatrix(JacobianMatrix *this, int a2, int a3)
{
  SparseMatrix::SparseMatrix(this);
  *(unsigned char *)(v5 + 48) = a3;
  if (a3) {
    int v6 = 4;
  }
  else {
    int v6 = 3;
  }
  int v7 = v6 + 3 * a2;
  *(_DWORD *)(v5 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 4 * a2;
  *(_DWORD *)(v5 + 44) = 1;
  *(_DWORD *)(v5 + 32) = v7 + (2 * v6 + 10) * a2;
  *(_DWORD *)(v5 + 36) = v7;
  SparseMatrix::allocateMem((SparseMatrix *)v5);
}

void sub_24688EF7C(_Unwind_Exception *a1)
{
  SparseMatrix::~SparseMatrix(v1);
  _Unwind_Resume(a1);
}

void JacobianMatrix::Solve(SparseMatrix *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((unsigned __int8 *)this + 48) + 3;
  do
  {
    int v6 = &v11[v4];
    *((void *)v6 + 2) = 1;
    v6[24] = 0;
    *(void *)int v6 = &unk_26FAEAF48;
    *((void *)v6 + 1) = 0;
    v4 += 32;
  }
  while (v4 != 128);
  uint64_t v7 = 0;
  uint64_t v8 = v11;
  do
  {
    SparseMatrix::GetColumnAsDenseVector(this, v7, (uint64_t)v10);
    Matrix<double>::ReferTo((uint64_t)v8, (uint64_t)v10);
    Matrix<double>::~Matrix((uint64_t)v10);
    ++v7;
    v8 += 32;
  }
  while (v5 != v7);
  Matrixsize_t Width = SparseMatrix::GetMatrixWidth(this);
  Matrix<double>::Matrix((uint64_t)a2, 1, MatrixWidth);
  *a2 = &unk_26FAEAF48;
  SparseMatrix::GetMatrixWidth(this);
  operator new[]();
}

void sub_24688FF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  SparseVector::~SparseVector((SparseVector *)&a35);
  SparseVector::~SparseVector((SparseVector *)&a42);
  SparseVector::~SparseVector((SparseVector *)&a49);
  SparseVector::~SparseVector((SparseVector *)&a56);
  for (uint64_t i = 96; i != -32; i -= 32)
    Matrix<double>::~Matrix((uint64_t)&STACK[0x240] + i);
  SparseMatrix::~SparseMatrix((SparseMatrix *)&a63);
  Matrix<double>::~Matrix(v63);
  for (uint64_t j = 96; j != -32; j -= 32)
    Matrix<double>::~Matrix((uint64_t)&STACK[0x2C0] + j);
  _Unwind_Resume(a1);
}

double Matrix<double>::ReferTo(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      MEMORY[0x24C53D6C0](v4, 0x1000C8000313F17);
    }
  }
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

double MatrixNxPts<1u,double>::MultATagxB<1u,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  if (v2 != *(_DWORD *)(a2 + 20)) {
    MatrixNxPts<1u,double>::MultATagxB<1u,void>();
  }
  if (!v2) {
    return 0.0;
  }
  unsigned int v3 = *(double **)(a1 + 8);
  uint64_t v4 = *(double **)(a2 + 8);
  double result = 0.0;
  do
  {
    double v6 = *v3++;
    double v7 = v6;
    double v8 = *v4++;
    double result = result + v7 * v8;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t Matrix<double>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEAF18;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x24C53D6C0]();
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void Matrix<double>::~Matrix(uint64_t a1)
{
  Matrix<double>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

uint64_t Matrix<double>::Matrix(uint64_t result, int a2, int a3)
{
  *(void *)double result = &unk_26FAEAF18;
  if (a3 * a2) {
    operator new[]();
  }
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a3;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

void MatrixNxPts<1u,double>::~MatrixNxPts(uint64_t a1)
{
  Matrix<double>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

uint64_t MobileProjectorToken::remove(int a1)
{
  uint64_t v2 = (void *)[MEMORY[0x263F08850] defaultManager];
  uint64_t v3 = [NSString stringWithUTF8String:ProjectorTokenPath[a1]];
  if ([v2 fileExistsAtPath:v3]
    && (id v5 = 0, ([v2 removeItemAtPath:v3 error:&v5] & 1) == 0))
  {
    NSLog(&cfstr_FailedToRemove.isa, ProjectorTargetName[a1], [v5 description]);
    return 0;
  }
  else
  {
    log("token was removed");
    return 1;
  }
}

void log(const char *a1, ...)
{
  va_start(va, a1);
  uint64_t v10 = 0;
  uint64_t v1 = vasprintf(&v10, a1, va);
  if (v10)
  {
    id v2 = objc_alloc_init(MEMORY[0x263F08790]);
    [v2 setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    uint64_t v3 = NSString;
    uint64_t v4 = objc_msgSend(v2, "stringFromDate:", objc_msgSend(MEMORY[0x263EFF910], "date"));
    id v5 = (void *)[v3 stringWithFormat:@"%@ %s\n", v4, v10, va];

    free(v10);
    uint64_t v10 = 0;
    double v6 = fopen("/var/mobile/Documents/Tokens.log", "a");
    if (v6)
    {
      double v7 = v6;
      fwrite((const void *)[v5 UTF8String], objc_msgSend(v5, "length"), 1uLL, v6);
      fclose(v7);
    }
    else
    {
      NSLog(&cfstr_FailedToOpenTo.isa, v8, v9);
    }
  }
  else
  {
    NSLog(&cfstr_FailedToCreate_7.isa, v1, v1);
  }
}

BOOL MobileProjectorToken::create(unsigned int a1, unsigned int a2, unsigned int *a3, int a4, int a5, const char *a6, unsigned int a7)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a1 >= 0xA8C1)
  {
    NSLog(&cfstr_TheRequestedTi.isa, 43200);
    return 0;
  }
  time_t v14 = time(0);
  if (v14 == -1)
  {
    NSLog(&cfstr_FailedToGetCur.isa);
    return 0;
  }
  uint64_t v15 = v14;
  if (!readChipID(v25)) {
    return 0;
  }
  uint64_t v16 = ProjectorTokenDir[a7];
  uint64_t v22 = v15 + a1;
  uint64_t v23 = a7;
  bzero(v26, 0x800uLL);
  for (uint64_t i = 0; ; ++i)
  {
    int v18 = v16[i];
    v26[i] = v18;
    if (v18 == 47 || v18 == 0)
    {
      if (stat(v26, &v24) && mkdir(v26, 0x1FFu))
      {
        NSLog(&cfstr_FailedToCreate_6.isa, ProjectorTargetName[v23]);
        return 0;
      }
      if (!v16[i]) {
        break;
      }
    }
  }
  ProjectorToken::ProjectorToken((ProjectorToken *)v26, v25, a2, a3, v15, v22, a4, a5, a6);
  BOOL v20 = ProjectorToken::writeToFile((ProjectorToken *)v26, ProjectorTokenPath[v23]);
  if (v20) {
    log("Token created. Created on: %ld, Timeout: %d (Valid until: %ld), Activations: %d, Resets on boot: %d, Comment: %s", v15, a1, v22, a4, a5, a6);
  }
  return v20;
}

BOOL readChipID(char *a1)
{
  CFNumberRef v2 = (const __CFNumber *)MGCopyAnswer();
  CFNumberRef v3 = v2;
  if (v2)
  {
    uint64_t valuePtr = 0;
    CFNumberGetValue(v2, kCFNumberSInt64Type, &valuePtr);
    snprintf(a1, 0x20uLL, "%lld", valuePtr);
    CFRelease(v3);
  }
  else
  {
    NSLog(&cfstr_FailedToReadUn_0.isa);
  }
  return v3 != 0;
}

uint64_t MobileProjectorToken::use(int a1, int a2, time_t *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  double v6 = (void *)[MEMORY[0x263F08850] defaultManager];
  double v7 = ProjectorTokenPath[a2];
  if ((objc_msgSend(v6, "fileExistsAtPath:", objc_msgSend(NSString, "stringWithUTF8String:", v7)) & 1) == 0)
  {
    log("Can't activate %s projector: no projector token found");
    return 0;
  }
  ProjectorToken::ProjectorToken((ProjectorToken *)__s2);
  if ((ProjectorToken::readFromFile((ProjectorToken *)__s2, v7) & 1) == 0)
  {
    log("Failed to read %s projector token file. Token will be removed.");
    goto LABEL_23;
  }
  time_t v8 = time(0);
  time_t v9 = v18;
  if (v8 > v18)
  {
    log("%s token timeout was reached (current time %ld). Token will be removed.");
LABEL_23:
    MobileProjectorToken::remove(a2);
    return 0;
  }
  if (v8 > v17 + 43200)
  {
    log("%s token has exceeded max allowed timeout. Token will be removed.");
    goto LABEL_23;
  }
  if (!readChipID(__s1))
  {
    log("Failed to read unique chip ID");
    return 0;
  }
  if (strcmp(__s1, (const char *)__s2))
  {
    log("%s token does not match device. Token will be removed.");
    goto LABEL_23;
  }
  unint64_t v10 = 0;
  while (v10 >= __s2[16] || __s2[v10 + 17] != a1 || a1 == 0)
  {
    if (++v10 == 8)
    {
      log("%s token doesn't match platform. Token will be removed.");
      goto LABEL_23;
    }
  }
  if (v20)
  {
    uint64_t LastBootTime = getLastBootTime();
    if (LastBootTime == -1 || LastBootTime > v17)
    {
      log("System performed boot since %s token creation (boot time: %ld). Token will be removed.");
      goto LABEL_23;
    }
  }
  if (!v19)
  {
    log("Number of allowed activations has reached zero. %s token will be removed.");
    goto LABEL_23;
  }
  int v14 = v19 - 1;
  if (v19 >= 1)
  {
    --v19;
    if (v14)
    {
      if (!ProjectorToken::writeToFile((ProjectorToken *)__s2, v7))
      {
        log("Failed to update %s token file. Will return false so someone looks at that...");
        return 0;
      }
      log("%s token activation count updated to %d", ProjectorTargetName[a2], v19);
    }
    else
    {
      log("Using last allowed activation. %s token will be removed.", ProjectorTargetName[a2]);
      MobileProjectorToken::remove(a2);
    }
  }
  if (a3) {
    *a3 = v9;
  }
  return 1;
}

uint64_t getLastBootTime(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v4 = 0x1500000001;
  size_t v2 = 16;
  if (sysctl(v4, 2u, &v3, &v2, 0, 0) || (uint64_t result = v3) == 0)
  {
    uint64_t v1 = __error();
    NSLog(&cfstr_FailedToReadBo.isa, *v1);
    return -1;
  }
  return result;
}

uint64_t MobileProjectorToken::print(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  size_t v2 = (void *)[MEMORY[0x263F08850] defaultManager];
  uint64_t v3 = a1;
  uint64_t v4 = ProjectorTokenPath[a1];
  if (objc_msgSend(v2, "fileExistsAtPath:", objc_msgSend(NSString, "stringWithUTF8String:", v4)))
  {
    ProjectorToken::ProjectorToken((ProjectorToken *)v7);
    uint64_t v5 = ProjectorToken::readFromFile((ProjectorToken *)v7, v4);
    if (v5) {
      ProjectorToken::print((ProjectorToken *)v7);
    }
    else {
      NSLog(&cfstr_FailedToReadSP_0.isa, ProjectorTargetName[v3]);
    }
  }
  else
  {
    NSLog(&cfstr_NoSProjectorTo.isa, ProjectorTargetName[v3]);
    return 0;
  }
  return v5;
}

H16ISP::H16ISPFirmwareLogger *H16ISP::H16ISPFirmwareLogger::H16ISPFirmwareLogger(H16ISP::H16ISPFirmwareLogger *this, H16ISP::H16ISPDevice *a2, void (*a3)(void *, const char *), void *a4, char a5, int a6, int a7)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = a3;
  time_t v9 = (_OWORD *)((char *)this + 8);
  *(void *)this = a2;
  *((void *)this + 2) = a4;
  *((_DWORD *)this + 6) = a6;
  unint64_t v10 = (void *)((char *)this + 24);
  *((_DWORD *)this + 7) = a7;
  H16ISP::H16ISPThreadReadySyncer::H16ISPThreadReadySyncer((H16ISP::H16ISPThreadReadySyncer *)&v14);
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 56) = 0;
  uint64_t v11 = *(void *)this;
  *((void *)this + 5) = &v14;
  *((void *)this + 6) = v11;
  *((_OWORD *)this + 4) = *v9;
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *v10;
  *((void *)this + 4) = this;
  *((unsigned char *)this + 88) = a5;
  pthread_attr_init(&v13);
  pthread_attr_setdetachstate(&v13, 1);
  pthread_create((pthread_t *)this + 12, &v13, (void *(__cdecl *)(void *))H16ISP::H16ISPFirmwareLoggerThreadStart, (char *)this + 32);
  pthread_attr_destroy(&v13);
  H16ISP::H16ISPThreadReadySyncer::wait(&v14);
  H16ISP::H16ISPThreadReadySyncer::~H16ISPThreadReadySyncer((H16ISP::H16ISPThreadReadySyncer *)&v14);
  return this;
}

void sub_246890C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t H16ISP::H16ISPFirmwareLoggerThreadStart(uint64_t a1)
{
  pthread_setname_np("H16ISPFirmwareLoggerThread");
  H16ISP::H16ISPThreadReadySyncer::lock(*(pthread_mutex_t **)(a1 + 8));
  if (!*(void *)(a1 + 16))
  {
    H16ISP::H16ISPThreadReadySyncer::signalAndUnlock(*(H16ISP::H16ISPThreadReadySyncer **)(a1 + 8));
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 52);
  if (v2) {
    H16ISP::H16ISPFirmwareLogger::SetFirmwareLoggerThreadPriority(*(H16ISP::H16ISPFirmwareLogger **)a1, v2);
  }
  H16ISP::H16ISPThreadReadySyncer::signalAndUnlock(*(H16ISP::H16ISPThreadReadySyncer **)(a1 + 8));
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    printf("%s: Unable to allocate CFDictionary for IOSurface properties\n", "H16ISPFirmwareLoggerThreadStart");
    goto LABEL_20;
  }
  uint64_t v5 = Mutable;
  size_t valuePtr = 0x40000;
  CFNumberRef v6 = CFNumberCreate(v3, kCFNumberLongType, &valuePtr);
  CFDictionaryAddValue(v5, (const void *)*MEMORY[0x263F0ED30], v6);
  CFRelease(v6);
  double v7 = IOSurfaceCreate(v5);
  if (!v7)
  {
    printf("%s: Unable to create IOSurface for client logging buffer\n", "H16ISPFirmwareLoggerThreadStart");
    CFRelease(v5);
    goto LABEL_20;
  }
  uint64_t v8 = v7;
  uint32_t seed = 0;
  IOSurfaceLock(v7, 0, &seed);
  IOSurfaceID ID = IOSurfaceGetID(v8);
  BaseAddress = IOSurfaceGetBaseAddress(v8);
  if (BaseAddress)
  {
    bzero(BaseAddress, valuePtr);
    ClientLoggingSessiouint64_t n = H16ISP::H16ISPDevice::ISP_CreateClientLoggingSession(*(H16ISP::H16ISPDevice **)(a1 + 16), ID, *(unsigned __int8 *)(a1 + 56));
    int v12 = ClientLoggingSession;
    if (ClientLoggingSession)
    {
      printf("%s: ISP_CreateClientLoggingSession returned 0x%08x\n", "H16ISPFirmwareLoggerThreadStart", ClientLoggingSession);
      CFRelease(v8);
      uint64_t v8 = 0;
      IOSurfaceID ID = 0;
    }
  }
  else
  {
    int v12 = -536870212;
  }
  IOSurfaceUnlock(v8, 0, &seed);
  CFRelease(v5);
  if (!v8)
  {
    if (v12 == -536870201) {
      return 0;
    }
LABEL_20:
    (*(void (**)(void, const char *))(a1 + 32))(*(void *)(a1 + 40), "Firmware logging aborted\n");
    return 0;
  }
  while (!*(unsigned char *)(a1 + 24))
  {
    H16ISP::_ProcessLogWork(v8, a1);
    usleep(1000 * *(_DWORD *)(a1 + 48));
  }
  int v13 = H16ISP::H16ISPDevice::ISP_TerminateClientLoggingSession(*(H16ISP::H16ISPDevice **)(a1 + 16), ID);
  if (v13) {
    printf("%s: ISP_TerminateClientLoggingSession returned 0x%08x\n", "H16ISPFirmwareLoggerThreadStart", v13);
  }
  H16ISP::_ProcessLogWork(v8, a1);
  CFRelease(v8);
  return 0;
}

void H16ISP::H16ISPFirmwareLogger::~H16ISPFirmwareLogger(pthread_t *this)
{
  int v2 = 0;
  H16ISP::H16ISPFirmwareLogger::SetFirmwareLoggerThreadPriority((H16ISP::H16ISPFirmwareLogger *)this, 47);
  *((unsigned char *)this + 56) = 1;
  pthread_join(this[12], &v2);
  this[12] = 0;
}

uint64_t H16ISP::H16ISPFirmwareLogger::SetFirmwareLoggerThreadPriority(H16ISP::H16ISPFirmwareLogger *this, int a2)
{
  int v2 = (_opaque_pthread_t *)*((void *)this + 12);
  if (!v2) {
    return 3758097086;
  }
  uint64_t v4 = (H16ISP *)pthread_mach_thread_np(v2);
  H16ISP::H16ISPSetMachThreadPriority(v4, a2);
  return 0;
}

void __clang_call_terminate(void *a1)
{
}

__IOSurface *H16ISP::_ProcessLogWork(__IOSurface *result, uint64_t a2)
{
  if (a2)
  {
    CFAllocatorRef v3 = result;
    IOSurfaceLock(result, 0, 0);
    size_t AllocSize = IOSurfaceGetAllocSize(v3);
    BaseAddress = (char *)IOSurfaceGetBaseAddress(v3);
    LODWORD(v6) = *((_DWORD *)BaseAddress + 1);
    unsigned int v7 = *((_DWORD *)BaseAddress + 16);
    if (v6 != v7)
    {
      uint64_t v8 = BaseAddress;
      do
      {
        time_t v9 = *(void (**)(void, char *))(a2 + 32);
        if (v9)
        {
          v9(*(void *)(a2 + 40), &v8[v6]);
          LODWORD(v6) = *((_DWORD *)v8 + 1);
          unsigned int v7 = *((_DWORD *)v8 + 16);
        }
        size_t v6 = (v6 + 128);
        if (AllocSize <= v6) {
          LODWORD(v6) = 128;
        }
        *((_DWORD *)v8 + 1) = v6;
        if (v7 < 0x80 || AllocSize <= v7)
        {
          unint64_t v10 = *(void (**)(void, const char *))(a2 + 32);
          if (v10)
          {
            v10(*(void *)(a2 + 40), "Logging Buffer Corruption.  Aborting Logging\n");
            LODWORD(v6) = *((_DWORD *)v8 + 1);
            unsigned int v7 = *((_DWORD *)v8 + 16);
          }
          *(unsigned char *)(a2 + 24) = 1;
        }
      }
      while (v6 != v7);
    }
    return (__IOSurface *)IOSurfaceUnlock(v3, 0, 0);
  }
  return result;
}

CFDictionaryRef CreateNamedValue(const char *cStr, const char *a2, __CFArray *a3)
{
  keys[3] = *(void **)MEMORY[0x263EF8340];
  memset(keys, 0, 24);
  values = 0;
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  __int16 v9 = 0;
  uint64_t v5 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (cStr)
  {
    keys[0] = @"Name";
    values = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], cStr, 0x8000100u);
    unsigned int v6 = 1;
    LOBYTE(v9) = 1;
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v6 = 0;
  if (a2)
  {
LABEL_3:
    keys[v6] = @"Value";
    *(&values + v6) = (void *)CFStringCreateWithCString(*v5, a2, 0x8000100u);
    *(unsigned char *)((unint64_t)&v9 | v6++) = 1;
  }
LABEL_4:
  if (a3)
  {
    keys[v6] = @"List";
    *(&values + v6++) = a3;
  }
  else if (!v6)
  {
    return 0;
  }
  CFDictionaryRef v7 = CFDictionaryCreate(*v5, (const void **)keys, (const void **)&values, v6, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if ((_BYTE)v9) {
    CFRelease(values);
  }
  if (HIBYTE(v9)) {
    CFRelease(cf);
  }
  return v7;
}

void ReleaseNamedValue(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFDictionaryRef Name(const __CFDictionary *result)
{
  CVPixelBufferRef value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, @"Name", (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

CFDictionaryRef Value(const __CFDictionary *result)
{
  CVPixelBufferRef value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, @"Value", (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

CFDictionaryRef List(const __CFDictionary *result)
{
  CVPixelBufferRef value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, @"List", (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

CFMutableArrayRef CreateNamedValues(void)
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
}

void ReleaseNamedValues(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void ClearNamedValues(CFMutableArrayRef theArray)
{
  if (theArray) {
    CFArrayRemoveAllValues(theArray);
  }
}

void AppendNamedValue(CFMutableArrayRef theArray, const void *value)
{
  if (theArray) {
    CFArrayAppendValue(theArray, value);
  }
}

CFArrayRef CountNamedValues(const __CFArray *theArray)
{
  if (theArray) {
    return (const __CFArray *)CFArrayGetCount(theArray);
  }
  return theArray;
}

CFArrayRef GetNamedValue(const __CFArray *result, int a2)
{
  if (result) {
    return (const __CFArray *)CFArrayGetValueAtIndex(result, a2);
  }
  return result;
}

void NamedValue::NamedValue(NamedValue *this)
{
  *(void *)this = 0;
}

{
  *(void *)this = 0;
}

void NamedValue::NamedValue(NamedValue *this, const char *a2, const char *a3, __CFArray *a4)
{
  *(void *)this = 0;
  NamedValue::Set((const void **)this, a2, a3, a4);
}

{
  *(void *)this = 0;
  NamedValue::Set((const void **)this, a2, a3, a4);
}

CFDictionaryRef NamedValue::Set(const void **this, const char *cStr, const char *a3, __CFArray *a4)
{
  uint64_t v8 = *this;
  if (v8) {
    CFRelease(v8);
  }
  CFDictionaryRef result = CreateNamedValue(cStr, a3, a4);
  *this = result;
  return result;
}

void NamedValue::~NamedValue(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void NamedValue::Name(Name *this)
{
  CFDictionaryRef v1 = *(const __CFDictionary **)this;
  CVPixelBufferRef value = 0;
  if (v1) {
    CFDictionaryGetValueIfPresent(v1, @"Name", (const void **)&value);
  }
}

const __CFDictionary *NamedValue::Value(const __CFDictionary **this)
{
  CFDictionaryRef result = *this;
  CVPixelBufferRef value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, @"Value", (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

const __CFDictionary *NamedValue::List(const __CFDictionary **this)
{
  CFDictionaryRef result = *this;
  CVPixelBufferRef value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, @"List", (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

void NamedValues::NamedValues(NamedValues *this)
{
  *(void *)this = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
}

{
  *(void *)this = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
}

void NamedValues::~NamedValues(const void **this)
{
  CFDictionaryRef v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void NamedValues::push_back(__CFArray **this, const void **a2)
{
  int v2 = *this;
  if (v2) {
    CFArrayAppendValue(v2, *a2);
  }
}

const __CFArray *NamedValues::size(const __CFArray **this)
{
  CFArrayRef result = *this;
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

void NamedValues::clear(__CFArray **this)
{
  CFDictionaryRef v1 = *this;
  if (v1) {
    CFArrayRemoveAllValues(v1);
  }
}

void ProjectorToken::ProjectorToken(ProjectorToken *this, const char *a2, unsigned int a3, unsigned int *a4, uint64_t a5, uint64_t a6, int a7, char a8, const char *a9)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + mach_timebase_info(this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 16) = a3;
  *((void *)this + 1mach_timebase_info(this + 3) = a5;
  *((void *)this + 14) = a6;
  *((_DWORD *)this + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a7;
  *((unsigned char *)this + 124) = a8;
  strncpy((char *)this, a2, 0x20uLL);
  if (a9)
  {
    strncpy((char *)this + 32, a9, 0x20uLL);
    *((unsigned char *)this + 6mach_timebase_info(this + 3) = 0;
  }
  if (a3 >= 8) {
    *((_DWORD *)this + 16) = 8;
  }
  bzero((char *)this + 68, 0x20uLL);
  memcpy((char *)this + 68, a4, 4 * *((unsigned int *)this + 16));
}

{
  ProjectorToken::ProjectorToken(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL ProjectorToken::writeToFile(ProjectorToken *this, const char *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int __ptr = 3;
  strncpy(v10, (const char *)this + 32, 0x20uLL);
  strncpy(v11, (const char *)this, 0x20uLL);
  bzero(v12, 0x20uLL);
  long long v4 = *(_OWORD *)((char *)this + 84);
  v12[0] = *(_OWORD *)((char *)this + 68);
  v12[1] = v4;
  _DWORD v12[2] = *(_OWORD *)((char *)this + 104);
  int v5 = *((unsigned __int8 *)this + 124);
  int v13 = *((_DWORD *)this + 30);
  int v14 = v5;
  uint64_t v6 = SCRAMBLING_OFFSET;
  if ((unint64_t)SCRAMBLING_OFFSET <= 0x7B)
  {
    do
    {
      v10[v6 - 4] ^= SCRAMBLE[v6 & 7];
      ++v6;
    }
    while (v6 != 124);
  }
  CFDictionaryRef v7 = fopen(a2, "w");
  if (v7)
  {
    fwrite(&__ptr, 1uLL, 0x7CuLL, v7);
    fclose(v7);
  }
  return v7 != 0;
}

uint64_t ProjectorToken::readFromFile(ProjectorToken *this, const char *__filename)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t)fopen(__filename, "r");
  if (result)
  {
    long long v4 = (FILE *)result;
    BOOL v5 = fread(&__ptr, 1uLL, 0x24uLL, (FILE *)result) == 36 && __ptr == 3;
    if (v5 && fread(&v11[SCRAMBLING_OFFSET - 4], 1uLL, 0x58uLL, v4) == 88)
    {
      uint64_t v6 = SCRAMBLING_OFFSET;
      if ((unint64_t)SCRAMBLING_OFFSET <= 0x7B)
      {
        do
        {
          v11[v6 - 4] ^= SCRAMBLE[v6 & 7];
          ++v6;
        }
        while (v6 != 124);
      }
      strncpy((char *)this, v12, 0x20uLL);
      *(_OWORD *)((char *)this + 104) = v13;
      int v7 = v15;
      *((_DWORD *)this + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v14;
      *((unsigned char *)this + 124) = v7 != 0;
      strncpy((char *)this + 32, v11, 0x20uLL);
      *((unsigned char *)this + 6mach_timebase_info(this + 3) = 0;
      bzero((char *)this + 68, 0x20uLL);
      uint64_t v8 = 0;
      *((_DWORD *)this + 16) = 8;
      while (1)
      {
        int v9 = *(_DWORD *)&v12[4 * v8 + 32];
        *((_DWORD *)this + v8 + 17) = v9;
        if (!v9) {
          break;
        }
        if (++v8 == 8) {
          return 1;
        }
      }
      *((_DWORD *)this + 16) = v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ProjectorToken::print(ProjectorToken *this)
{
  printf("Chip ID: %s\n", (const char *)this);
  printf("Created on: ");
  printTime(*((void *)this + 13));
  putchar(10);
  uint64_t v2 = *((unsigned int *)this + 16);
  puts("Created for platforms:");
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      if (i >= *((unsigned int *)this + 16)) {
        int v4 = 0;
      }
      else {
        int v4 = *((_DWORD *)this + i + 17);
      }
      printf("0x%04x\n", v4);
    }
  }
  putchar(10);
  printf("Valid through: ");
  printTime(*((void *)this + 14));
  putchar(10);
  printf("Remaining activations: ");
  if (*((_DWORD *)this + 30) == -1) {
    puts("INF");
  }
  else {
    printf("%d\n", *((_DWORD *)this + 30));
  }
  if (*((unsigned char *)this + 124)) {
    BOOL v5 = "YES";
  }
  else {
    BOOL v5 = "NO";
  }
  printf("Resets on boot: %s\n", v5);
  return printf("Comment: %s\n", (const char *)this + 32);
}

uint64_t printTime(time_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  time_t v3 = a1;
  CFDictionaryRef v1 = localtime(&v3);
  strftime(v4, 0x20uLL, "%F %T", v1);
  return printf("%s", v4);
}

void H16ISP::JasperConfigManagerInternal::~JasperConfigManagerInternal(H16ISP::JasperConfigManagerInternal *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2) {

  }
  time_t v3 = (void *)*((void *)this + 3);
  if (v3) {

  }
  int v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    free(v4);
    *((void *)this + 5) = 0;
  }

  uint64_t v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 1mach_timebase_info(this + 3) = v5;
    operator delete(v5);
  }
}

char *H16ISP::JasperConfigManagerInternal::initJasperSpecs(char *this)
{
  if (!*((void *)this + 5))
  {
    CFDictionaryRef v1 = this;
    this = (char *)malloc_type_calloc(1uLL, 0x62700uLL, 0xDCEA9C46uLL);
    uint64_t v2 = 0;
    v1[5] = this;
    do
    {
      v1[v2 + 6] = this;
      this += 100800;
      ++v2;
    }
    while (v2 != 4);
  }
  return this;
}

uint64_t H16ISP::JasperConfigManagerInternal::setJasperProjectorBanksStatus(H16ISP::JasperConfigManagerInternal *this, H16ISP::H16ISPDevice *a2, const BOOL *a3, int a4)
{
  uint64_t v4 = 0;
  int v5 = 0;
  int v12 = a4;
  __int16 v11 = 1570;
  uint64_t v13 = 0xC00000007;
  int v14 = 0;
  do
  {
    if (a3[v4]) {
      int v6 = 1 << v4;
    }
    else {
      int v6 = 0;
    }
    v5 |= v6;
    ++v4;
  }
  while (v4 != 8);
  int v15 = v5;
  uint64_t v7 = H16ISP::H16ISPDevice::ISP_SendCommand(a2, v10, 0x4Cu, 0, 0xFFFFFFFF);
  uint64_t v8 = v7;
  if (v7) {
    NSLog(&cfstr_FailToSendComm.isa, v7);
  }
  return v8;
}

uint64_t H16ISP::JasperConfigManagerInternal::setJasperBurstSize(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 86) = a2;
  return this;
}

uint64_t H16ISP::JasperConfigManagerInternal::getJasperBurstSize(H16ISP::JasperConfigManagerInternal *this)
{
  return *((unsigned __int16 *)this + 43);
}

uint64_t H16ISP::JasperConfigManagerInternal::setTofFrame(H16ISP::JasperConfigManagerInternal *this, H16ISP::H16ISPDevice *a2, int a3, uint64_t a4, NSDictionary *a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v10 = [(NSDictionary *)a5 objectForKey:@"file"];
  char v11 = objc_msgSend(-[NSDictionary objectForKey:](a5, "objectForKey:", @"bank"), "intValue");
  if (([v10 hasPrefix:@"/"] & 1) == 0) {
    id v10 = (id)[NSString stringWithFormat:@"%@/%@", *((void *)this + 3), v10];
  }
  int v12 = fopen((const char *)[v10 UTF8String], "rb");
  if (!v12)
  {
    NSLog(&cfstr_JasperFrameCon.isa, v10);
    return 4294954516;
  }
  uint64_t v13 = v12;
  fseeko(v12, 0, 2);
  off_t v14 = ftello(v13);
  fseeko(v13, 0, 0);
  if (v14 != 2048)
  {
    NSLog(&cfstr_JasperFrameCon_0.isa, 2048, v14);
    fclose(v13);
    return 4294954516;
  }
  __int16 v18 = 13057;
  int v19 = a3;
  char v20 = v11;
  char v21 = v11;
  char v22 = 0;
  __int16 v23 = 0;
  *(_DWORD *)&v24[2050] = a4;
  size_t v15 = fread(v24, 1uLL, 0x800uLL, v13);
  fclose(v13);
  if (v15 != 2048)
  {
    NSLog(&cfstr_JasperFrameCon_1.isa, v10);
    return 4294954516;
  }
  NSLog(&cfstr_JasperFrameCon_2.isa, a4, v10);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(a2, v17, 0x818u, 0, 0xFFFFFFFF)) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::JasperConfigManagerInternal::setTofFrameOffset(H16ISP::JasperConfigManagerInternal *this, H16ISP::H16ISPDevice *a2, int a3, int a4, NSDictionary *a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  __int16 v22 = 13058;
  int v23 = a3;
  char v26 = 0;
  __int16 v27 = 0;
  int v35 = a4;
  unsigned int v7 = objc_msgSend(-[NSDictionary objectForKey:](a5, "objectForKey:", @"bank"), "intValue");
  if (v7 > 3) {
    return 4294954516;
  }
  char v24 = v7;
  char v25 = v7;
  int v9 = objc_msgSend(-[NSDictionary objectForKey:](a5, "objectForKey:", @"deltaX"), "intValue");
  int v10 = objc_msgSend(-[NSDictionary objectForKey:](a5, "objectForKey:", @"deltaY"), "intValue");
  uint64_t result = 4294954516;
  if (v9 == (char)v9 && v10 >= -128 && v10 <= 127)
  {
    char v28 = v9;
    char v29 = v10;
    unsigned int v11 = objc_msgSend(-[NSDictionary objectForKey:](a5, "objectForKey:", @"refSpX0"), "intValue");
    unsigned int v12 = objc_msgSend(-[NSDictionary objectForKey:](a5, "objectForKey:", @"refSpX1"), "intValue");
    uint64_t result = 4294954516;
    if (v11 <= 0xFF && v12 <= 0xFF)
    {
      char v30 = v11;
      char v31 = v12;
      unsigned int v13 = objc_msgSend(-[NSDictionary objectForKey:](a5, "objectForKey:", @"laserIntensity"), "intValue");
      if (HIWORD(v13)) {
        return 4294954516;
      }
      __int16 v33 = v13;
      unsigned int v14 = objc_msgSend(-[NSDictionary objectForKey:](a5, "objectForKey:", @"trefmaxtof"), "intValue");
      if (v14 > 0x1FF) {
        return 4294954516;
      }
      __int16 v34 = v14;
      if (objc_msgSend(-[NSDictionary objectForKey:](a5, "objectForKey:", @"setplscgDelay"), "intValue") > 0x3F)return 4294954516; {
      id v15 = [(NSDictionary *)a5 objectForKey:@"priper"];
      }
      id v16 = [(NSDictionary *)a5 objectForKey:@"prirep"];
      uint64_t v17 = [v15 count];
      if (v17 != [v16 count]
        || (unint64_t)[v15 count] > 0x10
        || ![v15 count])
      {
        return 4294954516;
      }
      bzero(v32, 0x41uLL);
      v32[0] = [v15 count] - 1;
      if ([v15 count])
      {
        uint64_t v18 = 0;
        unsigned int v19 = 1;
        do
        {
          *(_WORD *)&v32[4 * v18 + 3] = objc_msgSend((id)objc_msgSend(v16, "objectAtIndex:", v18), "intValue");
          uint64_t v18 = v19;
        }
        while ([v15 count] > (unint64_t)v19++);
      }
      if (H16ISP::H16ISPDevice::ISP_SendCommand(a2, v21, 0xC4u, 0, 0xFFFFFFFF)) {
        return 4294954516;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

BOOL H16ISP::JasperConfigManagerInternal::setInitialBanks(H16ISP::JasperConfigManagerInternal *this, H16ISP::H16ISPDevice *a2, int a3, NSDictionary *a4)
{
  *(void *)&v25[2050] = *MEMORY[0x263EF8340];
  if (a4)
  {
    BOOL v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      id v9 = -[NSDictionary objectForKey:](a4, "objectForKey:", objc_msgSend(NSString, "stringWithFormat:", @"%d", v8));
      if (v9)
      {
        int v10 = v9;
        if (([v9 hasPrefix:@"/"] & 1) == 0) {
          int v10 = (void *)[NSString stringWithFormat:@"%@/%@", *((void *)this + 3), v10];
        }
        unsigned int v11 = fopen((const char *)[v10 UTF8String], "rb");
        if (!v11)
        {
          NSLog(&cfstr_JasperBankConf.isa, v10);
          return v7;
        }
        unsigned int v12 = v11;
        fseeko(v11, 0, 2);
        off_t v13 = ftello(v12);
        fseeko(v12, 0, 0);
        if (v13 != 2048)
        {
          NSLog(&cfstr_JasperBankConf_0.isa, 2048, v13);
          fclose(v12);
          return v7;
        }
        __int16 v20 = 13056;
        int v21 = a3;
        char v22 = v8;
        __int16 v23 = 4;
        __int16 v24 = 0;
        size_t v14 = fread(v25, 1uLL, 0x800uLL, v12);
        fclose(v12);
        if (v14 != 2048)
        {
          NSLog(&cfstr_JasperBankConf_1.isa, v10);
          return v7;
        }
        NSLog(&cfstr_JasperBankConf_2.isa, v10);
        uint64_t v15 = H16ISP::H16ISPDevice::ISP_SendCommand(a2, v19, 0x814u, 0, 0xFFFFFFFF);
        if (v15) {
          break;
        }
      }
      int v16 = v8 + 1;
      BOOL v7 = v8 > 2;
      uint64_t v8 = (v8 + 1);
      if (v16 == 4) {
        return 1;
      }
    }
    NSLog(&cfstr_JasperBankConf_3.isa, v15);
  }
  else
  {
    return 1;
  }
  return v7;
}

BOOL H16ISP::JasperConfigManagerInternal::setMode(H16ISP::JasperConfigManagerInternal *this, int a2)
{
  int v2 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 2) = a2;
  int v3 = 4;
  if (a2 > 103)
  {
    if (a2 != 104 && a2 != 108) {
      goto LABEL_7;
    }
  }
  else if (a2 != 4 && a2 != 44)
  {
LABEL_7:
    int v3 = a2;
  }
  *((_DWORD *)this + 1) = v3;
  return v3 != v2;
}

uint64_t H16ISP::JasperConfigManagerInternal::getMode(H16ISP::JasperConfigManagerInternal *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t H16ISP::JasperConfigManagerInternal::isBurstAllowed(H16ISP::JasperConfigManagerInternal *this)
{
  return 0;
}

uint64_t H16ISP::JasperConfigManagerInternal::applyModeFromDictionary(H16ISP::JasperConfigManagerInternal *this, H16ISP::H16ISPDevice *a2, int a3, NSDictionary *a4)
{
  char v8 = objc_msgSend(-[NSDictionary objectForKey:](a4, "objectForKey:", @"tbcnum"), "intValue");
  NSLog(&cfstr_JasperFrameCon_3.isa, *((unsigned int *)this + 1));
  if (!H16ISP::JasperConfigManagerInternal::setInitialBanks(this, a2, a3, (NSDictionary *)[(NSDictionary *)a4 objectForKey:@"banks"]))return 4294954516; {
  id v9 = [(NSDictionary *)a4 objectForKey:@"sequences"];
  }
  *((_DWORD *)this + mach_timebase_info(this + 3) = 0;
  int v27 = a3;
  v26[2] = 13059;
  bzero(v28, 0x62uLL);
  v28[0] = [v9 count];
  v28[1] = v8;
  if (!v28[0]) {
    return 4294954516;
  }
  if ([v9 count])
  {
    uint64_t v10 = 0;
    unsigned int v25 = 0;
    __int16 v23 = v9;
    do
    {
      unsigned int v11 = (void *)[v9 objectAtIndex:v10];
      unsigned int v12 = (void *)[v11 objectForKey:@"repeat"];
      if (v12) {
        __int16 v24 = [v12 intValue];
      }
      else {
        __int16 v24 = 1;
      }
      off_t v13 = (void *)[v11 objectForKey:@"sequence"];
      if ([v13 count])
      {
        uint64_t v14 = 0;
        unsigned int v15 = 0;
        do
        {
          int v16 = (NSDictionary *)[v13 objectAtIndex:v14];
          uint64_t v17 = [(NSDictionary *)v16 objectForKey:@"type"];
          if (v17) {
            uint64_t v18 = (__CFString *)v17;
          }
          else {
            uint64_t v18 = @"frame";
          }
          if ([(__CFString *)v18 isEqualToString:@"frame"])
          {
            if (H16ISP::JasperConfigManagerInternal::setTofFrame(this, a2, a3, v15 + *(_DWORD *)this, v16))return 4294954516; {
          }
            }
          else
          {
            unsigned int v19 = (H16ISP::JasperConfigManagerInternal *)[(__CFString *)v18 isEqualToString:@"offset"];
            if (!v19)
            {
              NSLog(&cfstr_JasperFrameCon_4.isa, v18);
              return 4294954516;
            }
            if (H16ISP::JasperConfigManagerInternal::setTofFrameOffset(v19, a2, a3, v15 + *(_DWORD *)this, v16))return 4294954516; {
          }
            }
          uint64_t v14 = ++v15;
        }
        while ([v13 count] > (unint64_t)v15);
      }
      __int16 v20 = &v26[3 * v10];
      int v21 = *(_DWORD *)this;
      v20[7] = *(_DWORD *)this;
      v20[8] = [v13 count] + v21 - 1;
      v20[9] = v24;
      *(_DWORD *)this += [v13 count];
      *((_DWORD *)this + 3) += [v13 count];
      id v9 = v23;
      uint64_t v10 = ++v25;
    }
    while ([v23 count] > (unint64_t)v25);
  }
  NSLog(&cfstr_JasperFrameCon_5.isa, v29, v30);
  if (H16ISP::H16ISPDevice::ISP_SendCommand(a2, (unsigned __int8 *)v26, 0x70u, 0, 0xFFFFFFFF)) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::JasperConfigManagerInternal::applyFromDictionary(H16ISP::JasperConfigManagerInternal *this, H16ISP::H16ISPDevice *a2, int a3)
{
  int v6 = (void *)[NSDictionary dictionaryWithContentsOfFile:objc_msgSend(NSString, "stringWithFormat:", @"%@/%@", *((void *)this + 3), *((void *)this + 2))];
  if (!v6)
  {
    uint64_t v14 = [NSString stringWithFormat:@"%@/%@", *((void *)this + 3), *((void *)this + 2)];
    NSLog(&cfstr_JasperFrameCon_6.isa, v14, v16);
    return 4294954516;
  }
  uint64_t v7 = [v6 objectForKey:@"FrameModes"];
  if (!v7)
  {
    NSLog(&cfstr_JasperFrameCon_7.isa, v13, v15);
    return 4294954516;
  }
  char v8 = (void *)v7;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v9 = *((unsigned int *)this + 1);
    if ([v8 count] > v9)
    {
      uint64_t v10 = (NSDictionary *)[v8 objectAtIndex:*((unsigned int *)this + 1)];
      goto LABEL_10;
    }
    NSLog(&cfstr_JasperFrameCon_8.isa, *((unsigned int *)this + 1), [v8 count]);
    return 4294954516;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    NSLog(&cfstr_JasperFrameCon_10.isa, v13, v15);
    return 4294954516;
  }
  uint64_t v10 = (NSDictionary *)[v8 objectForKey:objc_msgSend(NSString, "stringWithFormat:", @"%d", *((unsigned int *)this + 1))];
  if (!v10)
  {
    NSLog(&cfstr_JasperFrameCon_9.isa, *((unsigned int *)this + 1), v15);
    return 4294954516;
  }
LABEL_10:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    NSLog(&cfstr_JasperFrameCon_11.isa, *((unsigned int *)this + 1), v15);
    return 4294954516;
  }
  uint64_t v11 = H16ISP::JasperConfigManagerInternal::applyModeFromDictionary(this, a2, a3, v10);
  if (v11) {
    NSLog(&cfstr_JasperFrameCon_12.isa, *((unsigned int *)this + 1));
  }
  return v11;
}

BOOL H16ISP::JasperConfigManagerInternal::describe(H16ISP::JasperConfigManagerInternal *this, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  int v4 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    *a3 = *((_DWORD *)this + 3);
    *a4 = *(_DWORD *)this - 1;
    *a2 = *((_DWORD *)this + 1);
  }
  return v4 != 0;
}

uint64_t H16ISP::JasperConfigManagerInternal::GetFrameSequenceNumber(H16ISP::JasperConfigManagerInternal *this, CVPixelBufferRef pixelBuffer)
{
  return *((unsigned __int16 *)CVPixelBufferGetBaseAddress(pixelBuffer) + 2);
}

uint64_t H16ISP::JasperConfigManagerInternal::GetLastFrameSequenceNumber(H16ISP::JasperConfigManagerInternal *this)
{
  return *((unsigned __int16 *)this + 42);
}

uint64_t H16ISP::JasperConfigManagerInternal::aggregateJasperSpecData(H16ISP::JasperConfigManagerInternal *this, _WORD *a2, unint64_t a3, char a4)
{
  H16ISP::JasperConfigManagerInternal::initJasperSpecs((char *)this);
  uint64_t v7 = 63104;
  if (*((char *)a2 + 7) >= 0) {
    uint64_t v7 = 31544;
  }
  char v8 = (char *)&a2[v7];
  unint64_t v9 = HIBYTE(a2[v7 + 1026]);
  if (v9 <= 3)
  {
    uint64_t v10 = *((void *)this + v9 + 6);
    if (v10)
    {
      uint64_t v11 = v8 + 154;
      unsigned int v12 = a2 + 222;
      uint64_t v13 = -144;
      do
      {
        if (v11[v13 + 144])
        {
          uint64_t v14 = (_DWORD *)(v10 + 4 * (v11[v13] + 140 * v11[v13 + 144]));
          *(v14 - 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(v12 - 3);
          if ((a4 & 1) == 0)
          {
            *(v14 - 139) = *(v12 - 1);
            *uint64_t v14 = *(v12 - 2);
            v14[1] = *v12;
          }
        }
        v12 += 108;
      }
      while (!__CFADD__(v13++, 1));
      *((_WORD *)this + 42) = a2[2];
    }
  }
  return 0;
}

__CVBuffer *H16ISP::JasperConfigManagerInternal::RenderToYUV(H16ISP::JasperConfigManagerInternal *this, int a2, int a3)
{
  LOBYTE(v2mach_timebase_info(this + 3) = 0;
  int v4 = H16ISP::H16ISPCreateCVBuffer(0xB4u, 0x8Cu, a2, a3, 0, 1, 0.0, 64, 4096, 0, v23, 0, 0, -1);
  CVPixelBufferLockBaseAddress(v4, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v4, 0);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v4, 0);
  uint64_t v7 = CVPixelBufferGetBaseAddressOfPlane(v4, 1uLL);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v4, 1uLL);
  size_t v9 = CVPixelBufferGetBytesPerRowOfPlane(v4, 1uLL);
  memset(v7, 128, v9 * HeightOfPlane);
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v11 = (_DWORD *)*((void *)this + i + 6);
    unsigned int v12 = v11;
    uint64_t v13 = 25200;
    do
    {
      if (v11 && *((_DWORD *)this + 20) < *v12) {
        *((_DWORD *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *v12;
      }
      ++v12;
      --v13;
    }
    while (v13);
  }
  for (uint64_t j = 0; j != 180; ++j)
  {
    for (uint64_t k = 0; k != 140; ++k)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = *(void *)((char *)this + v16 + 48);
        if (v18)
        {
          unint64_t v19 = *(unsigned int *)(v18 + 4 * (k + 140 * j));
          if (v17 <= v19) {
            unint64_t v17 = v19;
          }
        }
        v16 += 8;
      }
      while (v16 != 32);
      BaseAddressOfPlane[(139 - k) * BytesPerRowOfPlane - j + 179] = 255 * v17 / *((unsigned int *)this + 20);
    }
  }
  CVPixelBufferUnlockBaseAddress(v4, 0);
  uint64_t v20 = 0;
  *((_DWORD *)this + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
  int v21 = (char *)this + 48;
  do
  {
    bzero(*(void **)&v21[v20], 0x189C0uLL);
    v20 += 8;
  }
  while (v20 != 32);
  return v4;
}

BOOL H16ISP::JasperConfigManagerInternal::isValidSequenceApplied(H16ISP::JasperConfigManagerInternal *this)
{
  return *((_DWORD *)this + 1) != -1;
}

uint64_t H16ISP::JasperConfigManagerInternal::getSequenceId(H16ISP::JasperConfigManagerInternal *this)
{
  uint64_t v1 = *((void *)this + 12);
  if (*((void *)this + 13) == v1) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 + 2052 * *((int *)this + 30));
  }
}

uint64_t H16ISP::JasperConfigManagerInternal::describeSequence(H16ISP::JasperConfigManagerInternal *this, int *a2, int *a3)
{
  *a2 = 0;
  *a3 = 8;
  return 1;
}

uint64_t H16ISP::JasperConfigManager::overrideJasperConfig(H16ISP::JasperConfigManager *this, const __CFDictionary *a2)
{
  [(id)qword_26B11C168 removeAllObjects];
  [(id)qword_26B11C168 setValue:&unk_26FAF76E0 forKey:@"Version"];
  int v3 = (void *)qword_26B11C168;

  return [v3 addEntriesFromDictionary:this];
}

BOOL H16ISP::JasperConfigManager::FrameModeDescription(H16ISP::JasperConfigManager *this, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  int v4 = H16ISP::_frameConfigManager;
  if (H16ISP::_frameConfigManager)
  {
    *a2 = dword_26B11C11C;
    *a3 = H16ISP::_frameConfigManager - 1;
    *(_DWORD *)this = qword_26B11C114;
  }
  return v4 != 0;
}

void H16ISP::JasperConfigManager::setFrameModeDictionaryLocation(NSString *this, const __CFString *a2)
{
}

uint64_t H16ISP::JasperConfigManager::GetFrameSequenceNumber(H16ISP::JasperConfigManager *this, __CVBuffer *a2)
{
  return *((unsigned __int16 *)CVPixelBufferGetBaseAddress(this) + 2);
}

uint64_t H16ISP::JasperConfigManager::GetLastFrameSequenceNumber(H16ISP::JasperConfigManager *this)
{
  return (unsigned __int16)word_26B11C164;
}

uint64_t H16ISP::JasperConfigManager::getAggregatedBufferPointer(H16ISP::JasperConfigManager *this, unint64_t *a2)
{
  *(void *)this = 403200;
  return qword_26B11C138;
}

uint64_t H16ISP::JasperConfigManager::aggregateJasperSpecData(H16ISP::JasperConfigManager *this, void *a2, unint64_t a3)
{
  return 0;
}

uint64_t H16ISP::JasperConfigManager::aggregateJasperSpecData(H16ISP::JasperConfigManager *this, __CVBuffer *a2)
{
  char v2 = (char)a2;
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  CVPixelBufferGetDataSize(this);
  H16ISP::JasperConfigManagerInternal::aggregateJasperSpecData((H16ISP::JasperConfigManagerInternal *)&H16ISP::_frameConfigManager, BaseAddress, v5, v2);
  return 0;
}

__CVBuffer *H16ISP::JasperConfigManager::RenderToYUV(H16ISP::JasperConfigManager *this, int a2)
{
  return H16ISP::JasperConfigManagerInternal::RenderToYUV((H16ISP::JasperConfigManagerInternal *)&H16ISP::_frameConfigManager, (int)this, a2);
}

uint64_t H16ISP::JasperConfigManager::setFrameFromArray(H16ISP::JasperConfigManager *this, H16ISP::H16ISPDevice *a2, void *cf, const void *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!cf || (v5 = (int)a2, CFTypeID v7 = CFGetTypeID(cf), v7 != CFArrayGetTypeID()))
  {
    NSLog(&cfstr_JasperFrameFro.isa);
    return 4294954516;
  }
  if ((unint64_t)[cf count] <= 2)
  {
    NSLog(&cfstr_JasperFrameFro_0.isa);
    return 4294954516;
  }
  size_t v9 = (void *)[cf objectAtIndex:0];
  uint64_t v10 = (void *)[cf objectAtIndex:1];
  uint64_t v11 = [cf objectAtIndex:2];
  if (!v9 || (unsigned int v12 = (void *)v11, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperFrameFro_1.isa);
    return 4294954516;
  }
  if (!v10 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperFrameFro_2.isa);
    return 4294954516;
  }
  if (!v12 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperFrameFro_3.isa);
    return 4294954516;
  }
  if ([v12 length] != 2048)
  {
    NSLog(&cfstr_JasperFrameFro_4.isa, [v12 length], 2048);
    return 4294954516;
  }
  __int16 v14 = 13057;
  int v15 = v5;
  char v16 = [v9 intValue];
  char v17 = v16;
  char v18 = 0;
  __int16 v19 = 0;
  *(_DWORD *)&v20[2050] = [v10 intValue];
  [v12 getBytes:v20 length:2048];
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v13, 0x818u, 0, 0xFFFFFFFF);
  if (result)
  {
    NSLog(&cfstr_JasperFrameFro_5.isa, result);
    return 4294954516;
  }
  return result;
}

uint64_t H16ISP::JasperConfigManager::preloadFrameFromArray(H16ISP::JasperConfigManager *this, H16ISP::H16ISPDevice *a2, void *cf, const void *a4)
{
  *(void *)&v18[2050] = *MEMORY[0x263EF8340];
  if (!cf || (v5 = (int)a2, CFTypeID v7 = CFGetTypeID(cf), v7 != CFArrayGetTypeID()))
  {
    NSLog(&cfstr_JasperPreloadF.isa);
    return 4294954516;
  }
  if ((unint64_t)[cf count] <= 1)
  {
    NSLog(&cfstr_JasperPreloadF_0.isa);
    return 4294954516;
  }
  size_t v9 = (void *)[cf objectAtIndex:0];
  uint64_t v10 = [cf objectAtIndex:1];
  if (!v9 || (uint64_t v11 = (void *)v10, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperPreloadF_1.isa);
    return 4294954516;
  }
  if (!v11 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperPreloadF_2.isa);
    return 4294954516;
  }
  if ([v11 length] != 2048)
  {
    NSLog(&cfstr_JasperPreloadF_3.isa, [v11 length], 2048);
    return 4294954516;
  }
  __int16 v13 = 13056;
  int v14 = v5;
  char v15 = [v9 intValue];
  __int16 v16 = 4;
  __int16 v17 = 0;
  [v11 getBytes:v18 length:2048];
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v12, 0x814u, 0, 0xFFFFFFFF);
  if (result)
  {
    NSLog(&cfstr_JasperPreloadF_4.isa, result);
    return 4294954516;
  }
  return result;
}

uint64_t H16ISP::JasperConfigManager::setFrameOffsetFromArray(H16ISP::JasperConfigManager *this, H16ISP::H16ISPDevice *a2, void *cf, const void *a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (!cf || (v5 = (int)a2, CFTypeID v7 = CFGetTypeID(cf), v7 != CFArrayGetTypeID()))
  {
    NSLog(&cfstr_JasperFrameOff.isa);
    return 4294954516;
  }
  if ((unint64_t)[cf count] <= 2)
  {
    NSLog(&cfstr_JasperFrameOff_0.isa);
    return 4294954516;
  }
  size_t v9 = (void *)[cf objectAtIndex:0];
  uint64_t v10 = (void *)[cf objectAtIndex:1];
  uint64_t v11 = [cf objectAtIndex:2];
  if (!v9 || (unsigned int v12 = (void *)v11, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperFrameOff_1.isa);
    return 4294954516;
  }
  if (!v10 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperFrameOff_2.isa);
    return 4294954516;
  }
  if (!v12 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperFrameOff_3.isa);
    return 4294954516;
  }
  char v13 = [v9 intValue];
  *(_OWORD *)int v27 = 0u;
  long long v28 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_WORD *)&v27[4] = 13058;
  *(_DWORD *)&v27[8] = v5;
  WORD2(v28) = 0;
  int v39 = 0;
  LODWORD(v38) = [v10 intValue];
  LOBYTE(v28) = v13;
  BYTE1(v28) = v13;
  int v14 = (void *)[v12 objectForKey:@"JasperOffset_DXY"];
  if (v14)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      NSLog(&cfstr_JasperFrameOff_4.isa);
      return 4294954516;
    }
    char v15 = (void *)[v14 objectAtIndex:0];
    uint64_t v16 = [v14 objectAtIndex:1];
    if (!v15
      || (__int16 v17 = (void *)v16, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
      || !v17
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      NSLog(&cfstr_JasperFrameOff_5.isa);
      return 4294954516;
    }
    int v18 = [v15 intValue];
    int v19 = [v17 intValue];
    if (v18 != (char)v18 || v19 < -128 || v19 >= 128)
    {
      NSLog(&cfstr_JasperFrameOff_6.isa);
      return 4294954516;
    }
    BYTE6(v28) = v18;
    BYTE7(v28) = v19;
    *(_DWORD *)&unsigned char v27[12] = 1;
  }
  uint64_t v20 = [v12 objectForKey:@"JasperOffset_AXY"];
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      NSLog(&cfstr_JasperFrameOff_7.isa);
      return 4294954516;
    }
    char v22 = (void *)[v21 objectAtIndex:0];
    uint64_t v23 = [v21 objectAtIndex:1];
    if (!v22
      || (__int16 v24 = (void *)v23, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
      || !v24
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      NSLog(&cfstr_JasperFrameOff_8.isa);
      return 4294954516;
    }
    int v25 = [v22 intValue];
    int v26 = [v24 intValue];
    if (v25 != (char)v25 || v26 < -128 || v26 >= 128)
    {
      NSLog(&cfstr_JasperFrameOff_9.isa);
      return 4294954516;
    }
    BYTE6(v28) = v25;
    BYTE7(v28) = v26;
    *(_DWORD *)&unsigned char v27[12] = 32769;
  }
  else if (!v14)
  {
    NSLog(&cfstr_JasperFrameOff_10.isa);
    return 4294954516;
  }
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v27, 0xC4u, 0, 0xFFFFFFFF);
  if (result)
  {
    NSLog(&cfstr_JasperFrameOff_11.isa, result);
    return 4294954516;
  }
  return result;
}

uint64_t H16ISP::JasperConfigManager::setSequenceFromArray(H16ISP::JasperConfigManager *this, H16ISP::H16ISPDevice *a2, void *cf, const void *a4)
{
  if (!cf || (v5 = (int)a2, CFTypeID v7 = CFGetTypeID(cf), v7 != CFArrayGetTypeID()))
  {
    NSLog(&cfstr_JasperSequence.isa);
    return 4294954516;
  }
  if ((unint64_t)[cf count] <= 1)
  {
    NSLog(&cfstr_JasperSequence_0.isa);
    return 4294954516;
  }
  uint64_t v10 = (void *)[cf objectAtIndex:0];
  uint64_t v11 = [cf objectAtIndex:1];
  if (!v10 || (unsigned int v12 = (void *)v11, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperSequence_1.isa);
    return 4294954516;
  }
  if (!v12 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSLog(&cfstr_JasperSequence_2.isa);
    return 4294954516;
  }
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0xA012000000;
  int v25 = __Block_byref_object_copy_;
  int v26 = __Block_byref_object_dispose_;
  int v27 = "";
  int v29 = v5;
  __int16 v28 = 13059;
  bzero(&v30, 0x62uLL);
  char v13 = [v12 count];
  *((unsigned char *)v23 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v13;
  char v14 = [v10 intValue];
  *((unsigned char *)v23 + 61) = v14;
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = ___ZN6H16ISP19JasperConfigManager20setSequenceFromArrayEPNS_12H16ISPDeviceEjPKv_block_invoke;
  v17[3] = &unk_2651E8950;
  unsigned __int8 v17[4] = &v18;
  v17[5] = &v22;
  [v12 enumerateObjectsUsingBlock:v17];
  char v15 = (unsigned __int8 *)(v23 + 6);
  *((unsigned char *)v23 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *((_DWORD *)v19 + 6);
  uint64_t v16 = H16ISP::H16ISPDevice::ISP_SendCommand(this, v15, 0x70u, 0, 0xFFFFFFFF);
  if (v16)
  {
    NSLog(&cfstr_JasperSequence_6.isa, v16);
    uint64_t v8 = 4294954516;
  }
  else
  {
    uint64_t v8 = 0;
    qword_26B11C114 = -1;
  }
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  return v8;
}

void sub_24689379C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v5;
  return result;
}

void ___ZN6H16ISP19JasperConfigManager20setSequenceFromArrayEPNS_12H16ISPDeviceEjPKv_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  if (a2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if ((unint64_t)[a2 count] > 2)
    {
      if (*(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < 16)
      {
        uint64_t v8 = (void *)[a2 objectAtIndex:0];
        size_t v9 = (void *)[a2 objectAtIndex:1];
        uint64_t v10 = (void *)[a2 objectAtIndex:2];
        *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8)
                 + 6 * *(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
                 + 62) = [v8 intValue];
        *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8)
                 + 6 * *(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
                 + 64) = [v9 intValue];
        *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8)
                 + 6 * (int)(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++
                 + 66) = [v10 intValue];
      }
      else
      {
        NSLog(&cfstr_JasperSequence_5.isa, 16);
        *a4 = 1;
      }
    }
    else
    {
      NSLog(&cfstr_JasperSequence_4.isa, a3);
    }
  }
  else
  {
    NSLog(&cfstr_JasperSequence_3.isa, a3);
  }
}

uint64_t H16ISP::JasperConfigManager::maxJasperCloudSizeBytes(H16ISP::JasperConfigManager *this)
{
  return [MEMORY[0x263F26C90] requiredStorageBytesForLength:432];
}

uint64_t H16ISP::JasperConfigManager::onlineUpdate(H16ISP::H16ISPDevice *a1, uint64_t a2, void *__src)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  __int16 v8 = 14092;
  int v9 = a2;
  memcpy(v10, __src, sizeof(v10));
  NSLog(&cfstr_SChDSendingPer.isa, "onlineUpdate", a2);
  uint64_t v5 = H16ISP::H16ISPDevice::ISP_SendCommand(a1, v7, 0x3D0u, 0, 0xFFFFFFFF);
  if (!v5) {
    return v11;
  }
  NSLog(&cfstr_SSendingPerido.isa, "onlineUpdate", v5);
  return 0;
}

uint64_t H16ISP::JasperConfigManager::describeSequence(H16ISP::JasperConfigManager *this, int *a2, int *a3)
{
  *(_DWORD *)this = 0;
  *a2 = 8;
  return 1;
}

uint64_t H16ISP::JasperConfigManager::setJasperProjectorBanksStatus(H16ISP::JasperConfigManager *this, H16ISP::H16ISPDevice *a2, const BOOL *a3)
{
  return H16ISP::JasperConfigManagerInternal::setJasperProjectorBanksStatus(this, this, (const BOOL *)a2, (int)a3);
}

uint64_t H16ISP::JasperConfigManager::setJasperBurstSize(uint64_t this)
{
  word_26B11C166 = this;
  return this;
}

uint64_t H16ISP::JasperConfigManager::getJasperBurstSize(H16ISP::JasperConfigManager *this)
{
  return (unsigned __int16)word_26B11C166;
}

uint64_t ImageUtils::IntegralImage<double>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 20);
  uint64_t result = Matrix<double>::Resize(a2, v4, v5);
  CFTypeID v7 = *(double **)(a1 + 8);
  __int16 v8 = *(double **)(a2 + 8);
  if (v5)
  {
    double v9 = 0.0;
    int v10 = v5;
    do
    {
      double v11 = *v7++;
      double v9 = v9 + v11;
      *v8++ = v9;
      --v10;
    }
    while (v10);
  }
  if (v4 >= 2)
  {
    uint64_t v12 = *(double **)(a2 + 8);
    for (int i = 1; i != v4; ++i)
    {
      if (v5)
      {
        double v14 = 0.0;
        int v15 = v5;
        do
        {
          double v16 = *v7++;
          double v14 = v14 + v16;
          double v17 = *v12++;
          *v8++ = v14 + v17;
          --v15;
        }
        while (v15);
      }
    }
  }
  return result;
}

uint64_t Matrix<double>::Resize(uint64_t result, int a2, int a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 16) != a2 || *(_DWORD *)(result + 20) != a3)
  {
    if (*(void *)(result + 8))
    {
      if (*(unsigned char *)(result + 24)) {
        MEMORY[0x24C53D6C0]();
      }
    }
    *(_DWORD *)(v5 + 16) = a2;
    *(_DWORD *)(v5 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a3;
    operator new[]();
  }
  return result;
}

void ImageUtils::AdaptiveThreshold<double>(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3) {
    AdaptiveThreshold<double,true>(a1, a2, a4);
  }
  AdaptiveThreshold<double,false>(a1, a2, a4);
}

void AdaptiveThreshold<double,true>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 20);
  if (v3 > a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 16);
    if (v4 > a2)
    {
      Matrix<BOOL>::Resize(a3, v4, v3);
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v5 = &unk_26FAEAF18;
      char v8 = 0;
      ImageUtils::IntegralImage<double>();
    }
  }
  AdaptiveThreshold<double,true>();
}

void sub_246894340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void AdaptiveThreshold<double,false>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 20);
  if (v3 > a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 16);
    if (v4 > a2)
    {
      Matrix<BOOL>::Resize(a3, v4, v3);
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v5 = &unk_26FAEAF18;
      char v8 = 0;
      ImageUtils::IntegralImage<double>();
    }
  }
  AdaptiveThreshold<double,true>();
}

void sub_246894ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::TraceOuterBoundaries(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  long long v74 = &unk_26FAEAF80;
  char v77 = 0;
  PadImage1<unsigned short>(a1, (uint64_t)&v74);
  uint64_t v5 = HIDWORD(v76);
  int v7 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a1 + 20);
  v93[1] = 1;
  v93[2] = HIDWORD(v76);
  v93[3] = -1;
  v92[1] = 1;
  v92[2] = v6;
  v92[3] = -1;
  int32x2_t v8 = vsub_s32((int32x2_t)0x100000000, vdup_n_s32(HIDWORD(v76)));
  v93[0] = v8.i32[0];
  int32x2_t v85 = v8;
  int v86 = 1;
  int v87 = HIDWORD(v76) + 1;
  int v88 = HIDWORD(v76);
  int v89 = HIDWORD(v76) - 1;
  int v90 = -1;
  int v91 = ~HIDWORD(v76);
  int32x2_t v9 = vsub_s32((int32x2_t)0x100000000, vdup_n_s32(v6));
  v92[0] = v9.i32[0];
  int32x2_t v78 = v9;
  int v79 = 1;
  unsigned int v80 = v6 + 1;
  unsigned int v81 = v6;
  unsigned int v82 = v6 - 1;
  int v83 = -1;
  int v84 = ~v6;
  if (a2 == 4)
  {
    long long v65 = (int32x2_t *)v92;
    long long v66 = &unk_2469D28A0;
    int v10 = (int32x2_t *)v93;
  }
  else
  {
    if (a2 != 8) {
      return Matrix<unsigned short>::~Matrix((uint64_t)&v74);
    }
    long long v65 = &v78;
    long long v66 = &unk_2469D28B0;
    int v10 = &v85;
  }
  if ((int)(v7 * v6) >= 1)
  {
    LOWORD(v11) = 0;
    uint64_t v12 = *(unsigned __int16 **)(a1 + 8);
    uint64_t v13 = &v12[v7 * v6];
    do
    {
      unsigned int v15 = *v12++;
      unsigned int v14 = v15;
      if (v15 <= (unsigned __int16)v11) {
        unint64_t v11 = (unsigned __int16)v11;
      }
      else {
        unint64_t v11 = v14;
      }
    }
    while (v12 < v13);
    if (v11)
    {
      std::string __p = 0;
      long long v72 = 0;
      uint64_t v73 = 0;
      std::vector<ImageUtils::Blob>::resize(a3, v11, (uint64_t)&__p);
      double v16 = a3;
      if (!v7) {
        goto LABEL_70;
      }
      int v17 = 0;
      int v18 = 0;
      uint64_t v19 = v75 + 2 * v5;
      int v58 = v7;
      unsigned int v59 = v6;
      while (1)
      {
        if (!v6) {
          goto LABEL_69;
        }
        int v60 = v17;
        int v20 = v6 + v18;
        int v62 = v6 + v18;
        do
        {
          uint64_t v21 = v19;
          int v23 = *(unsigned __int16 *)(v19 + 2);
          v19 += 2;
          int v22 = v23;
          if (!v23) {
            goto LABEL_67;
          }
          unint64_t v24 = (v22 - 1);
          if (0xAAAAAAAAAAAAAAABLL * ((v16[1] - *v16) >> 3) <= v24) {
            std::vector<ImageUtils::Blob>::__throw_out_of_range[abi:ne180100]();
          }
          int v25 = (char **)(*v16 + 24 * v24);
          int v26 = v25[1];
          if (v26 != *v25) {
            goto LABEL_67;
          }
          LOBYTE(v27) = 0;
          unsigned int v28 = 0;
          int v29 = v25 + 2;
          int v30 = 255;
          int v31 = v18;
          uint64_t v32 = 1;
          long long v70 = v25;
          while (1)
          {
            int v33 = 0;
LABEL_21:
            uint64_t v34 = v27;
            uint64_t v35 = v32 + v10->i32[v27];
            if (*(unsigned __int16 *)(v21 + 2 * v35) != v22) {
              break;
            }
            int v27 = v66[v27];
            if (v32 == 1)
            {
              ++v28;
              if (v27 == v30 || v28 > 3) {
                goto LABEL_67;
              }
              int v30 = v66[v34];
            }
            int v69 = v30;
            if ((unint64_t)v26 >= *v29)
            {
              unsigned int v63 = v28;
              int v68 = v31;
              uint64_t v64 = v19;
              long long v38 = *v25;
              uint64_t v39 = (v26 - *v25) >> 2;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62) {
                goto LABEL_74;
              }
              uint64_t v41 = *v29 - (void)v38;
              if (v41 >> 1 > v40) {
                unint64_t v40 = v41 >> 1;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v40;
              }
              long long v67 = v29;
              if (v42)
              {
                uint64_t v43 = (char *)std::allocator<unsigned int>::allocate_at_least[abi:ne180100]((uint64_t)v29, v42);
                long long v38 = *v70;
                int v26 = v70[1];
                int v29 = v67;
              }
              else
              {
                uint64_t v43 = 0;
              }
              uint64_t v44 = &v43[4 * v39];
              *(_DWORD *)uint64_t v44 = v68;
              long long v37 = v44 + 4;
              while (v26 != v38)
              {
                int v45 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v44 - 1) = v45;
                v44 -= 4;
              }
              int v25 = v70;
              *long long v70 = v44;
              v70[1] = v37;
              v70[2] = &v43[4 * v42];
              if (v38)
              {
                operator delete(v38);
                int v29 = v67;
                int v25 = v70;
              }
              double v16 = a3;
              uint64_t v19 = v64;
              int v20 = v62;
              unsigned int v28 = v63;
              int v31 = v68;
            }
            else
            {
              *(_DWORD *)int v26 = v31;
              long long v37 = v26 + 4;
            }
            v25[1] = v37;
            v31 += v65->i32[v34];
            int v26 = v37;
            uint64_t v32 = v35;
            int v30 = v69;
          }
          LOBYTE(v27) = (v27 + 1) & (a2 - 1);
          if (++v33 < a2) {
            goto LABEL_21;
          }
          if (v28) {
            goto LABEL_67;
          }
          if ((unint64_t)v26 < *v29)
          {
            *(_DWORD *)int v26 = v31;
            uint64_t v46 = v26 + 4;
            goto LABEL_66;
          }
          uint64_t v47 = *v25;
          uint64_t v48 = (v26 - *v25) >> 2;
          unint64_t v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62) {
LABEL_74:
          }
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          int v50 = v31;
          uint64_t v51 = v19;
          uint64_t v52 = *v29 - (void)v47;
          if (v52 >> 1 > v49) {
            unint64_t v49 = v52 >> 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v49;
          }
          if (v53)
          {
            uint64_t v54 = (char *)std::allocator<unsigned int>::allocate_at_least[abi:ne180100]((uint64_t)v29, v53);
            uint64_t v47 = *v70;
            int v26 = v70[1];
          }
          else
          {
            uint64_t v54 = 0;
          }
          uint64_t v55 = &v54[4 * v48];
          *(_DWORD *)uint64_t v55 = v50;
          uint64_t v46 = v55 + 4;
          while (v26 != v47)
          {
            int v56 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v55 - 1) = v56;
            v55 -= 4;
          }
          int v25 = v70;
          *long long v70 = v55;
          v70[1] = v46;
          v70[2] = &v54[4 * v53];
          if (v47)
          {
            operator delete(v47);
            int v25 = v70;
          }
          double v16 = a3;
          uint64_t v19 = v51;
          int v20 = v62;
LABEL_66:
          v25[1] = v46;
LABEL_67:
          ++v18;
        }
        while (v18 != v20);
        int v18 = v20;
        int v7 = v58;
        unsigned int v6 = v59;
        int v17 = v60;
LABEL_69:
        v19 += 4;
        if (++v17 == v7)
        {
LABEL_70:
          if (__p)
          {
            long long v72 = __p;
            operator delete(__p);
          }
          return Matrix<unsigned short>::~Matrix((uint64_t)&v74);
        }
      }
    }
  }
  return Matrix<unsigned short>::~Matrix((uint64_t)&v74);
}

void sub_246894FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  Matrix<unsigned short>::~Matrix((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void PadImage1<unsigned short>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 20) + 2;
  Matrix<unsigned short>::Resize(a2, *(_DWORD *)(a1 + 16) + 2, v4);
  uint64_t v5 = *(char **)(a2 + 8);
  unsigned int v6 = *(char **)(a1 + 8);
  size_t v7 = 2 * v4;
  bzero(v5, v7);
  int32x2_t v8 = &v5[v7];
  if (*(_DWORD *)(a1 + 16))
  {
    unsigned int v9 = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    do
    {
      *(_WORD *)int32x2_t v8 = 0;
      unint64_t v11 = v8 + 2;
      memcpy(v11, v6, 2 * v10);
      unsigned int v12 = *(_DWORD *)(a1 + 16);
      uint64_t v10 = *(unsigned int *)(a1 + 20);
      uint64_t v13 = &v11[2 * v10];
      v6 += 2 * v10;
      *(_WORD *)uint64_t v13 = 0;
      int32x2_t v8 = v13 + 2;
      ++v9;
    }
    while (v9 < v12);
  }

  bzero(v8, v7);
}

void std::vector<ImageUtils::Blob>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<ImageUtils::Blob>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        unint64_t v11 = *(void **)(v9 - 24);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

uint64_t ImageUtils::ErodeRect2x2(uint64_t a1, uint64_t a2)
{
  Matrix<BOOL>::Resize(a2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  if (v5 < 3 || v4 <= 2) {
    ImageUtils::ErodeRect2x2();
  }
  unint64_t v7 = *(unsigned char **)(a1 + 8);
  uint64_t v8 = *(unsigned char **)(a2 + 8);
  memset(v8, 1, v5 * v4);
  if (!*v7) {
    *uint64_t v8 = 0;
  }
  uint64_t v9 = v8 + 1;
  uint64_t v10 = v5 - 2;
  uint64_t v11 = v10 + 2;
  unsigned int v12 = v7 + 1;
  unsigned int v13 = v5 - 1;
  unsigned int v14 = v5 - 1;
  do
  {
    if (!*v12++) {
      *(_WORD *)(v9 - 1) = 0;
    }
    ++v9;
    --v14;
  }
  while (v14);
  double v16 = &v7[v11];
  uint64_t v17 = -(uint64_t)*(unsigned int *)(a1 + 20);
  uint64_t v18 = (uint64_t)&v7[2 * v10 + 5];
  uint64_t v19 = (uint64_t)&v7[v10 + 3];
  LODWORD(result) = 1;
  do
  {
    uint64_t v21 = v9;
    int v22 = (unsigned __int8 *)v18;
    if (!*v16)
    {
      *uint64_t v9 = 0;
      v9[v17] = 0;
    }
    uint64_t v23 = 0;
    unint64_t v24 = &v9[-*(unsigned int *)(a1 + 20)];
    do
    {
      if (!*(unsigned char *)(v19 + v23))
      {
        *(_WORD *)&v21[v23] = 0;
        *(_WORD *)&v24[v23] = 0;
      }
      ++v23;
    }
    while (v13 != v23);
    v16 += v11;
    v18 += v11;
    v19 += v11;
    uint64_t v9 = &v21[v23 + 1];
    BOOL v25 = result == v4 - 2;
    uint64_t result = (result + 1);
  }
  while (!v25);
  if (!*v16)
  {
    v21[v23 + 1] = 0;
    v21[v23 - *(unsigned int *)(a1 + 20) + 1] = 0;
  }
  uint64_t v26 = 0;
  int v27 = &v21[-*(unsigned int *)(a1 + 20)];
  do
  {
    if (!*v22++)
    {
      int v29 = &v21[v26 + v23];
      v29[1] = 0;
      unsigned int v29[2] = 0;
      int v30 = &v27[v26 + v23];
      v30[1] = 0;
      v30[2] = 0;
    }
    ++v26;
  }
  while (v13 != v26);
  return result;
}

uint64_t Matrix<BOOL>::Resize(uint64_t result, int a2, int a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 16) != a2 || *(_DWORD *)(result + 20) != a3)
  {
    if (*(void *)(result + 8))
    {
      if (*(unsigned char *)(result + 24)) {
        MEMORY[0x24C53D6C0]();
      }
    }
    *(_DWORD *)(v5 + 16) = a2;
    *(_DWORD *)(v5 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a3;
    operator new[]();
  }
  return result;
}

uint64_t ErodeOrDilateRect3x3<false>(uint64_t a1, uint64_t a2)
{
  Matrix<BOOL>::Resize(a2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  uint64_t v6 = v5 - 3;
  if (v5 < 3 || v4 <= 2) {
    ErodeOrDilateRect3x3<false>();
  }
  uint64_t v8 = *(unsigned char **)(a1 + 8);
  uint64_t v9 = *(_WORD **)(a2 + 8);
  memset(v9, 1, v5 * v4);
  if (!*v8)
  {
    *uint64_t v9 = 0;
    *(_WORD *)((char *)v9 + *(unsigned int *)(a1 + 20)) = 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v6 + 2;
  unsigned int v12 = v5 - 2;
  unsigned int v13 = (char *)v9 + *(unsigned int *)(a1 + 20);
  do
  {
    if (!v8[v10 + 1])
    {
      unsigned int v14 = (char *)v9 + v10;
      *(_WORD *)unsigned int v14 = 0;
      _DWORD v14[2] = 0;
      unsigned int v15 = &v13[v10];
      *(_WORD *)unsigned int v15 = 0;
      _DWORD v15[2] = 0;
    }
    ++v10;
  }
  while (v12 != v10);
  double v16 = &v8[v11];
  uint64_t v17 = (_WORD *)((char *)v9 + v10);
  uint64_t v18 = (char *)v17 + 1;
  if (!v8[v11])
  {
    _WORD *v17 = 0;
    *(_WORD *)((char *)v17 + *(unsigned int *)(a1 + 20)) = 0;
  }
  uint64_t v19 = v17 + 1;
  uint64_t v20 = *(unsigned int *)(a1 + 20);
  uint64_t v21 = v6 + 3;
  uint64_t v22 = (uint64_t)&v8[v6 + 4];
  int v23 = 1;
  uint64_t result = v20 + 1;
  do
  {
    BOOL v25 = v18;
    if (!v16[1])
    {
      *uint64_t v19 = 0;
      v18[2] = 0;
      *(_WORD *)&v19[-v20] = 0;
      *(_WORD *)&v19[v20] = 0;
    }
    uint64_t v26 = 0;
    uint64_t v27 = *(unsigned int *)(a1 + 20);
    unsigned int v28 = &v18[v27 + 1];
    int v29 = &v25[-v27 + 1];
    do
    {
      if (!*(unsigned char *)(v22 + v26))
      {
        int v30 = &v25[v26];
        v30[1] = 0;
        *((_WORD *)v30 + 1) = 0;
        int v31 = &v29[v26];
        *(_WORD *)int v31 = 0;
        unsigned int v31[2] = 0;
        uint64_t v32 = &v28[v26];
        *(_WORD *)uint64_t v32 = 0;
        v32[2] = 0;
      }
      ++v26;
    }
    while (v12 != v26);
    v16 += v21;
    int v33 = &v25[v26];
    if (!*v16)
    {
      *(_WORD *)(v33 + 1) = 0;
      *(_WORD *)&v25[1 - v20 + v26] = 0;
      *(_WORD *)&v25[result + v26] = 0;
    }
    uint64_t v18 = v33 + 2;
    uint64_t v19 = v33 + 3;
    v22 += v21;
  }
  while (v23++ != v4 - 2);
  uint64_t v35 = v16 + 1;
  long long v36 = &v25[v26];
  long long v37 = &v25[v26 + 3];
  if (!v16[1])
  {
    *long long v37 = 0;
    v36[4] = 0;
    *(_WORD *)&v36[-*(unsigned int *)(a1 + 20) + 3] = 0;
  }
  long long v38 = v16 + 2;
  uint64_t v39 = -(uint64_t)*(unsigned int *)(a1 + 20);
  do
  {
    if (!*v38)
    {
      *(_WORD *)long long v37 = 0;
      v37[2] = 0;
      unint64_t v40 = &v37[v39];
      *(_WORD *)unint64_t v40 = 0;
      v40[2] = 0;
    }
    ++v38;
    ++v37;
    --v12;
  }
  while (v12);
  if (!v35[v11])
  {
    *(_WORD *)long long v37 = 0;
    *(_WORD *)&v37[-*(unsigned int *)(a1 + 20)] = 0;
  }
  return result;
}

void ErodeOrDilateRect2x2<true>(uint64_t a1, uint64_t a2)
{
  Matrix<BOOL>::Resize(a2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  uint64_t v6 = v4 - 2;
  if (v4 < 2 || v5 <= 1) {
    ErodeOrDilateRect2x2<true>();
  }
  unsigned int v8 = v4 - 1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(char **)(a2 + 8);
  bzero(v10, v4 * v5);
  int v11 = 0;
  uint64_t v12 = *(unsigned int *)(a1 + 20);
  uint64_t v13 = v6 + 1;
  do
  {
    uint64_t v14 = 0;
    unsigned int v15 = v10;
    double v16 = &v10[*(unsigned int *)(a1 + 20)];
    do
    {
      if (*(unsigned char *)(v9 + v14))
      {
        *(_WORD *)&v10[v14] = 257;
        *(_WORD *)&v16[v14] = 257;
      }
      ++v14;
    }
    while (v8 != v14);
    if (*(unsigned char *)(v9 + v13))
    {
      uint64_t v17 = &v10[v14];
      char *v17 = 1;
      v17[v12] = 1;
    }
    v9 += v13 + 1;
    v10 += v14 + 1;
  }
  while (v11++ != v5 - 2);
  uint64_t v19 = 0;
  do
  {
    if (*(unsigned char *)(v9 + v19))
    {
      uint64_t v20 = &v15[v19 + v14];
      v20[1] = 1;
      unsigned __int16 v20[2] = 1;
    }
    ++v19;
  }
  while (v8 != v19);
  if (*(unsigned char *)(v9 + v13)) {
    v15[v19 + 1 + v14] = 1;
  }
}

uint64_t ErodeOrDilateRect3x3<true>(uint64_t a1, uint64_t a2)
{
  Matrix<BOOL>::Resize(a2, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  uint64_t v6 = v5 - 3;
  if (v5 < 3 || v4 <= 2) {
    ErodeOrDilateRect3x3<false>();
  }
  unsigned int v8 = *(unsigned char **)(a1 + 8);
  uint64_t v9 = *(_WORD **)(a2 + 8);
  bzero(v9, v5 * v4);
  if (*v8)
  {
    *uint64_t v9 = 257;
    *(_WORD *)((char *)v9 + *(unsigned int *)(a1 + 20)) = 257;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v6 + 2;
  unsigned int v12 = v5 - 2;
  uint64_t v13 = (char *)v9 + *(unsigned int *)(a1 + 20);
  do
  {
    if (v8[v10 + 1])
    {
      uint64_t v14 = (char *)v9 + v10;
      *uint64_t v14 = 1;
      v14[1] = 1;
      _DWORD v14[2] = 1;
      unsigned int v15 = &v13[v10];
      *(_WORD *)unsigned int v15 = 257;
      _DWORD v15[2] = 1;
    }
    ++v10;
  }
  while (v12 != v10);
  double v16 = &v8[v11];
  uint64_t v17 = (char *)v9 + v10;
  uint64_t v18 = v17 + 1;
  if (v8[v11])
  {
    v17[1] = 1;
    unsigned char *v17 = 1;
    uint64_t v19 = &v17[*(unsigned int *)(a1 + 20)];
    v19[1] = 1;
    *uint64_t v19 = 1;
  }
  uint64_t v20 = v17 + 2;
  uint64_t v21 = *(unsigned int *)(a1 + 20);
  uint64_t v22 = v6 + 3;
  uint64_t v23 = (uint64_t)&v8[v6 + 4];
  uint64_t result = v21 + 1;
  int v25 = 1;
  do
  {
    uint64_t v26 = v18;
    if (v16[1])
    {
      unsigned char *v20 = 1;
      v18[2] = 1;
      *(_WORD *)&v20[-v21] = 257;
      *(_WORD *)&v20[v21] = 257;
    }
    uint64_t v27 = 0;
    uint64_t v28 = *(unsigned int *)(a1 + 20);
    int v29 = &v18[v28 + 1];
    int v30 = &v26[-v28 + 1];
    do
    {
      if (*(unsigned char *)(v23 + v27))
      {
        int v31 = &v26[v27];
        v31[1] = 1;
        unsigned int v31[2] = 1;
        v31[3] = 1;
        uint64_t v32 = &v30[v27];
        *(_WORD *)uint64_t v32 = 257;
        v32[2] = 1;
        int v33 = &v29[v27];
        *(_WORD *)int v33 = 257;
        void v33[2] = 1;
      }
      ++v27;
    }
    while (v12 != v27);
    v16 += v22;
    uint64_t v34 = &v26[v27];
    if (*v16)
    {
      *(_WORD *)(v34 + 1) = 257;
      *(_WORD *)&v26[1 - v21 + v27] = 257;
      *(_WORD *)&v26[result + v27] = 257;
    }
    uint64_t v18 = v34 + 2;
    uint64_t v20 = v34 + 3;
    v23 += v22;
  }
  while (v25++ != v4 - 2);
  long long v36 = v16 + 1;
  long long v37 = &v26[v27];
  long long v38 = &v26[v27 + 3];
  if (v16[1])
  {
    unsigned char *v38 = 1;
    _OWORD v37[4] = 1;
    *(_WORD *)&v37[-*(unsigned int *)(a1 + 20) + 3] = 257;
  }
  uint64_t v39 = v16 + 2;
  uint64_t v40 = -(uint64_t)*(unsigned int *)(a1 + 20);
  do
  {
    if (*v39)
    {
      *(_WORD *)long long v38 = 257;
      v38[2] = 1;
      uint64_t v41 = &v38[v40];
      *(_WORD *)uint64_t v41 = 257;
      v41[2] = 1;
    }
    ++v39;
    ++v38;
    --v12;
  }
  while (v12);
  if (v36[v11])
  {
    *(_WORD *)long long v38 = 257;
    *(_WORD *)&v38[-*(unsigned int *)(a1 + 20)] = 257;
  }
  return result;
}

uint64_t ImageUtils::CloseRect2x2(uint64_t a1, uint64_t a2)
{
  v4[1] = 0;
  int v4[2] = 0;
  v4[0] = &unk_26FAEAFB0;
  char v5 = 0;
  ErodeOrDilateRect2x2<true>(a1, (uint64_t)v4);
  ImageUtils::ErodeRect2x2((uint64_t)v4, a2);
  return Matrix<BOOL>::~Matrix((uint64_t)v4);
}

void sub_2468959F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ImageUtils::CloseRect3x3(uint64_t a1, uint64_t a2)
{
  v4[1] = 0;
  int v4[2] = 0;
  v4[0] = &unk_26FAEAFB0;
  char v5 = 0;
  ErodeOrDilateRect3x3<true>(a1, (uint64_t)v4);
  ErodeOrDilateRect3x3<false>((uint64_t)v4, a2);
  return Matrix<BOOL>::~Matrix((uint64_t)v4);
}

void sub_246895A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ImageUtils::Scale<double>(uint64_t a1, uint64_t a2, double a3)
{
  return Scale<double>(a1, 1, a2, a3, a3);
}

uint64_t Scale<double>(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  int v10 = *(_DWORD *)(a1 + 16);
  uint64_t v11 = *(int *)(a1 + 20);
  int v12 = vcvtpd_u64_f64((double)v10 * a4);
  LODWORD(v5) = vcvtpd_u64_f64((double)(int)v11 * a5);
  Matrix<double>::Matrix((uint64_t)v68, v10, v5);
  Matrix<double>::Resize(a3, v12, v5);
  uint64_t v63 = a3;
  uint64_t v13 = v69;
  BOOL v14 = a5 < 1.0;
  if ((v14 & a2) != 0) {
    double v15 = 4.0 / a5;
  }
  else {
    double v15 = 4.0;
  }
  unsigned int v16 = vcvtpd_u64_f64(v15);
  if ((v14 & a2) != 0) {
    double v17 = a5;
  }
  else {
    double v17 = 1.0;
  }
  BOOL v18 = a4 < 1.0;
  if ((v18 & a2) != 0) {
    double v19 = 4.0 / a4;
  }
  else {
    double v19 = 4.0;
  }
  if ((v18 & a2) != 0) {
    double v20 = a4;
  }
  else {
    double v20 = 1.0;
  }
  unsigned int v21 = vcvtpd_u64_f64(v19);
  if (v21 <= v16) {
    unsigned int v22 = v16;
  }
  else {
    unsigned int v22 = v21;
  }
  Matrix<double>::Matrix((uint64_t)&v66, 1, v22 + 4);
  long long v66 = &unk_26FAEAF48;
  if (v5)
  {
    uint64_t v23 = 0;
    unint64_t v24 = v13 + 8 * (v10 * v5);
    do
    {
      uint64_t v65 = 0;
      CalculateWeightsForScale<double>((uint64_t)&v66, v16, (int *)&v65 + 1, &v65, v15, ((double)v23 + 0.5) / a5 + -0.5, v17);
      int v25 = v65;
      if ((int)v65 >= (int)v11) {
        int v26 = v65 - v11 + 1;
      }
      else {
        int v26 = 0;
      }
      uint64_t v27 = (double *)(v69 + 8 * v23);
      if ((unint64_t)v27 < v24)
      {
        unsigned int v28 = -HIDWORD(v65) & (SHIDWORD(v65) >> 31);
        if ((int)v65 >= (int)v11) {
          int v25 = v11 - 1;
        }
        uint64_t v29 = *(void *)(a1 + 8);
        unint64_t v30 = v29 + 8 * v25;
        int v31 = (double *)(v29 + 8 * (HIDWORD(v65) & ~(SHIDWORD(v65) >> 31)));
        do
        {
          uint64_t v32 = v67;
          if (v28)
          {
            unsigned int v33 = 0;
            double v34 = 0.0;
            do
            {
              double v35 = *v32++;
              double v34 = v34 + v35 * *v31;
              ++v33;
            }
            while (v33 < v28);
          }
          else
          {
            double v34 = 0.0;
          }
          if ((unint64_t)v31 >= v30)
          {
            long long v37 = v31;
          }
          else
          {
            uint64_t v36 = 0;
            do
            {
              double v34 = v34 + v32[v36] * v31[v36];
              long long v37 = &v31[++v36];
            }
            while ((unint64_t)&v31[v36] < v30);
            uint64_t v32 = (double *)((char *)v32 + v36 * 8);
          }
          double v38 = *v37;
          double v39 = v34 + *v32 * *v37;
          if (v26)
          {
            uint64_t v40 = v32 + 1;
            int v41 = v26;
            do
            {
              double v42 = *v40++;
              double v39 = v39 + v42 * v38;
              --v41;
            }
            while (v41);
          }
          *uint64_t v27 = v39;
          v27 += v5;
          v31 += v11;
          v30 += 8 * v11;
        }
        while ((unint64_t)v27 < v24);
      }
      ++v23;
    }
    while (v23 != v5);
  }
  if (v12)
  {
    unsigned int v43 = 0;
    uint64_t v44 = *(double **)(v63 + 8);
    do
    {
      uint64_t v65 = 0;
      CalculateWeightsForScale<double>((uint64_t)&v66, v21, (int *)&v65 + 1, &v65, v19, ((double)v43 + 0.5) / a4 + -0.5, v20);
      int v45 = v65;
      if ((int)v65 >= v10) {
        int v46 = v65 - v10 + 1;
      }
      else {
        int v46 = 0;
      }
      if (v5)
      {
        unsigned int v47 = -HIDWORD(v65) & (SHIDWORD(v65) >> 31);
        uint64_t v48 = &v44[v5];
        if ((int)v65 >= v10) {
          int v45 = v10 - 1;
        }
        unint64_t v49 = v69 + 8 * (v45 * v5);
        int v50 = (double *)(v69 + 8 * (HIDWORD(v65) & ~(SHIDWORD(v65) >> 31)) * v5);
        do
        {
          uint64_t v51 = v67;
          if (v47)
          {
            unsigned int v52 = 0;
            double v53 = 0.0;
            do
            {
              double v54 = *v51++;
              double v53 = v53 + v54 * *v50;
              ++v52;
            }
            while (v52 < v47);
          }
          else
          {
            double v53 = 0.0;
          }
          for (int i = v50; (unint64_t)i < v49; i += v5)
          {
            double v56 = *v51++;
            double v53 = v53 + v56 * *i;
          }
          double v57 = *i;
          double v58 = v53 + *v51 * *i;
          if (v46)
          {
            unsigned int v59 = v51 + 1;
            int v60 = v46;
            do
            {
              double v61 = *v59++;
              double v58 = v58 + v61 * v57;
              --v60;
            }
            while (v60);
          }
          *v44++ = v58;
          ++v50;
          v49 += 8;
        }
        while (v44 < v48);
      }
      ++v43;
    }
    while (v43 != v12);
  }
  Matrix<double>::~Matrix((uint64_t)&v66);
  return Matrix<double>::~Matrix((uint64_t)v68);
}

void sub_246895E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::Scale<unsigned short>(uint64_t a1, uint64_t a2, double a3)
{
  return Scale<unsigned short>(a1, 1, a2, a3, a3);
}

uint64_t Scale<unsigned short>(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = *(int *)(a1 + 20);
  int v13 = vcvtpd_u64_f64((double)v11 * a4);
  LODWORD(v5) = vcvtpd_u64_f64((double)(int)v12 * a5);
  Matrix<double>::Matrix((uint64_t)v68, v11, v5);
  Matrix<double>::Resize(a3, v13, v5);
  uint64_t v64 = a3;
  uint64_t v14 = v69;
  BOOL v15 = a5 < 1.0;
  if ((v15 & a2) != 0) {
    double v16 = 4.0 / a5;
  }
  else {
    double v16 = 4.0;
  }
  unsigned int v17 = vcvtpd_u64_f64(v16);
  if ((v15 & a2) != 0) {
    double v18 = a5;
  }
  else {
    double v18 = 1.0;
  }
  BOOL v19 = a4 < 1.0;
  if ((v19 & a2) != 0) {
    double v20 = 4.0 / a4;
  }
  else {
    double v20 = 4.0;
  }
  if ((v19 & a2) != 0) {
    double v21 = a4;
  }
  else {
    double v21 = 1.0;
  }
  unsigned int v22 = vcvtpd_u64_f64(v20);
  if (v22 <= v17) {
    unsigned int v23 = v17;
  }
  else {
    unsigned int v23 = v22;
  }
  Matrix<double>::Matrix((uint64_t)&v66, 1, v23 + 4);
  long long v66 = &unk_26FAEAF48;
  if (v5)
  {
    uint64_t v24 = 0;
    unint64_t v25 = v14 + 8 * (v11 * v5);
    do
    {
      uint64_t v65 = 0;
      CalculateWeightsForScale<double>((uint64_t)&v66, v17, (int *)&v65 + 1, &v65, v16, ((double)v24 + 0.5) / a5 + -0.5, v18);
      int v28 = v65;
      if ((int)v65 >= (int)v12) {
        int v29 = v65 - v12 + 1;
      }
      else {
        int v29 = 0;
      }
      unint64_t v30 = (double *)(v69 + 8 * v24);
      if ((unint64_t)v30 < v25)
      {
        unsigned int v31 = -HIDWORD(v65) & (SHIDWORD(v65) >> 31);
        if ((int)v65 >= (int)v12) {
          int v28 = v12 - 1;
        }
        uint64_t v32 = *(void *)(a1 + 8);
        unint64_t v33 = v32 + 2 * v28;
        double v34 = (_WORD *)(v32 + 2 * (HIDWORD(v65) & ~(SHIDWORD(v65) >> 31)));
        do
        {
          double v35 = v67;
          if (v31)
          {
            unsigned int v36 = 0;
            LOWORD(v26) = *v34;
            double v27 = (double)*(unint64_t *)&v26;
            double v37 = 0.0;
            do
            {
              double v38 = *v35++;
              double v37 = v37 + v38 * v27;
              ++v36;
            }
            while (v36 < v31);
          }
          else
          {
            double v37 = 0.0;
          }
          for (i = v34; (unint64_t)i < v33; double v37 = v37 + v27 * (double)LODWORD(v40))
          {
            double v40 = *v35++;
            double v27 = v40;
            LODWORD(v4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (unsigned __int16)*i++;
          }
          LOWORD(v27) = *i;
          double v27 = (double)*(unint64_t *)&v27;
          double v26 = v37 + *v35 * v27;
          if (v29)
          {
            int v41 = v35 + 1;
            int v42 = v29;
            do
            {
              double v43 = *v41++;
              double v26 = v26 + v43 * v27;
              --v42;
            }
            while (v42);
          }
          double *v30 = v26;
          v30 += v5;
          v34 += v12;
          v33 += 2 * v12;
        }
        while ((unint64_t)v30 < v25);
      }
      ++v24;
    }
    while (v24 != v5);
  }
  if (v13)
  {
    unsigned int v44 = 0;
    int v45 = *(double **)(v64 + 8);
    do
    {
      uint64_t v65 = 0;
      CalculateWeightsForScale<double>((uint64_t)&v66, v22, (int *)&v65 + 1, &v65, v20, ((double)v44 + 0.5) / a4 + -0.5, v21);
      int v46 = v65;
      if ((int)v65 >= v11) {
        int v47 = v65 - v11 + 1;
      }
      else {
        int v47 = 0;
      }
      if (v5)
      {
        unsigned int v48 = -HIDWORD(v65) & (SHIDWORD(v65) >> 31);
        unint64_t v49 = &v45[v5];
        if ((int)v65 >= v11) {
          int v46 = v11 - 1;
        }
        unint64_t v50 = v69 + 8 * (v46 * v5);
        uint64_t v51 = (double *)(v69 + 8 * (HIDWORD(v65) & ~(SHIDWORD(v65) >> 31)) * v5);
        do
        {
          unsigned int v52 = v67;
          if (v48)
          {
            unsigned int v53 = 0;
            double v54 = 0.0;
            do
            {
              double v55 = *v52++;
              double v54 = v54 + v55 * *v51;
              ++v53;
            }
            while (v53 < v48);
          }
          else
          {
            double v54 = 0.0;
          }
          for (uint64_t j = v51; (unint64_t)j < v50; j += v5)
          {
            double v57 = *v52++;
            double v54 = v54 + v57 * *j;
          }
          double v58 = *j;
          double v59 = v54 + *v52 * *j;
          if (v47)
          {
            int v60 = v52 + 1;
            int v61 = v47;
            do
            {
              double v62 = *v60++;
              double v59 = v59 + v62 * v58;
              --v61;
            }
            while (v61);
          }
          *v45++ = v59;
          ++v51;
          v50 += 8;
        }
        while (v45 < v49);
      }
      ++v44;
    }
    while (v44 != v13);
  }
  Matrix<double>::~Matrix((uint64_t)&v66);
  return Matrix<double>::~Matrix((uint64_t)v68);
}

void sub_246896238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::Scale<unsigned char>(uint64_t a1, uint64_t a2, double a3)
{
  return Scale<unsigned char>(a1, 1, a2, a3, a3);
}

uint64_t Scale<unsigned char>(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = *(int *)(a1 + 20);
  int v13 = vcvtpd_u64_f64((double)v11 * a4);
  LODWORD(v5) = vcvtpd_u64_f64((double)(int)v12 * a5);
  Matrix<double>::Matrix((uint64_t)v72, v11, v5);
  Matrix<double>::Resize(a3, v13, v5);
  uint64_t v68 = a3;
  uint64_t v14 = v73;
  BOOL v15 = a5 < 1.0;
  if ((v15 & a2) != 0) {
    double v16 = 4.0 / a5;
  }
  else {
    double v16 = 4.0;
  }
  unsigned int v17 = vcvtpd_u64_f64(v16);
  if ((v15 & a2) != 0) {
    double v18 = a5;
  }
  else {
    double v18 = 1.0;
  }
  BOOL v19 = a4 < 1.0;
  if ((v19 & a2) != 0) {
    double v20 = 4.0 / a4;
  }
  else {
    double v20 = 4.0;
  }
  if ((v19 & a2) != 0) {
    double v21 = a4;
  }
  else {
    double v21 = 1.0;
  }
  unsigned int v22 = vcvtpd_u64_f64(v20);
  if (v22 <= v17) {
    unsigned int v23 = v17;
  }
  else {
    unsigned int v23 = v22;
  }
  Matrix<double>::Matrix((uint64_t)&v70, 1, v23 + 4);
  long long v70 = &unk_26FAEAF48;
  if (v5)
  {
    uint64_t v24 = 0;
    unint64_t v25 = v14 + 8 * (v11 * v5);
    do
    {
      uint64_t v69 = 0;
      CalculateWeightsForScale<double>((uint64_t)&v70, v17, (int *)&v69 + 1, &v69, v16, ((double)v24 + 0.5) / a5 + -0.5, v18);
      unsigned int v29 = HIDWORD(v69);
      if (v69 < 0)
      {
        unsigned int v30 = -HIDWORD(v69);
        HIDWORD(v69) = 0;
        unsigned int v29 = 0;
      }
      else
      {
        unsigned int v30 = 0;
      }
      int v31 = v69;
      if ((int)v69 >= (int)v12)
      {
        int v32 = v69 - v12 + 1;
        LODWORD(v69) = v12 - 1;
        int v31 = v12 - 1;
      }
      else
      {
        int v32 = 0;
      }
      unint64_t v33 = (double *)(v73 + 8 * v24);
      if ((unint64_t)v33 < v25)
      {
        uint64_t v34 = *(void *)(a1 + 8);
        uint64_t v35 = v31;
        unsigned int v36 = (unsigned char *)(v34 + v31);
        double v37 = (unsigned char *)(v34 + v29);
        uint64_t v38 = v35 - v29;
        do
        {
          double v39 = v71;
          if (v30)
          {
            unsigned int v40 = 0;
            LOBYTE(v26) = *v37;
            double v27 = (double)*(unint64_t *)&v26;
            double v41 = 0.0;
            do
            {
              double v42 = *v39++;
              double v28 = v42;
              double v41 = v41 + v42 * v27;
              ++v40;
            }
            while (v40 < v30);
          }
          else
          {
            double v41 = 0.0;
          }
          if (v37 >= v36)
          {
            unsigned int v44 = v37;
          }
          else
          {
            uint64_t v43 = 0;
            do
            {
              double v27 = v39[v43];
              LOBYTE(v28) = v37[v43];
              double v28 = (double)*(unint64_t *)&v28;
              double v41 = v41 + v27 * v28;
              ++v43;
            }
            while (v38 != v43);
            v39 += v38;
            unsigned int v44 = v36;
          }
          double v28 = *v39;
          LOBYTE(v27) = *v44;
          double v27 = (double)*(unint64_t *)&v27;
          double v26 = v41 + *v39 * v27;
          if (v32)
          {
            int v45 = v39 + 1;
            int v46 = v32;
            do
            {
              double v47 = *v45++;
              double v28 = v47;
              double v26 = v26 + v47 * v27;
              --v46;
            }
            while (v46);
          }
          *unint64_t v33 = v26;
          v33 += v5;
          v37 += v12;
          v36 += v12;
        }
        while ((unint64_t)v33 < v25);
      }
      ++v24;
    }
    while (v24 != v5);
  }
  if (v13)
  {
    unsigned int v48 = 0;
    unint64_t v49 = *(double **)(v68 + 8);
    do
    {
      uint64_t v69 = 0;
      CalculateWeightsForScale<double>((uint64_t)&v70, v22, (int *)&v69 + 1, &v69, v20, ((double)v48 + 0.5) / a4 + -0.5, v21);
      int v50 = v69;
      if ((int)v69 >= v11) {
        int v51 = v69 - v11 + 1;
      }
      else {
        int v51 = 0;
      }
      if (v5)
      {
        unsigned int v52 = -HIDWORD(v69) & (SHIDWORD(v69) >> 31);
        unsigned int v53 = &v49[v5];
        if ((int)v69 >= v11) {
          int v50 = v11 - 1;
        }
        unint64_t v54 = v73 + 8 * (v50 * v5);
        double v55 = (double *)(v73 + 8 * (HIDWORD(v69) & ~(SHIDWORD(v69) >> 31)) * v5);
        do
        {
          double v56 = v71;
          if (v52)
          {
            unsigned int v57 = 0;
            double v58 = 0.0;
            do
            {
              double v59 = *v56++;
              double v58 = v58 + v59 * *v55;
              ++v57;
            }
            while (v57 < v52);
          }
          else
          {
            double v58 = 0.0;
          }
          for (int i = v55; (unint64_t)i < v54; i += v5)
          {
            double v61 = *v56++;
            double v58 = v58 + v61 * *i;
          }
          double v62 = *i;
          double v63 = v58 + *v56 * *i;
          if (v51)
          {
            uint64_t v64 = v56 + 1;
            int v65 = v51;
            do
            {
              double v66 = *v64++;
              double v63 = v63 + v66 * v62;
              --v65;
            }
            while (v65);
          }
          *v49++ = v63;
          ++v55;
          v54 += 8;
        }
        while (v49 < v53);
      }
      ++v48;
    }
    while (v48 != v13);
  }
  Matrix<double>::~Matrix((uint64_t)&v70);
  return Matrix<double>::~Matrix((uint64_t)v72);
}

void sub_246896658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::Scale<BOOL>(uint64_t a1, uint64_t a2, double a3)
{
  return Scale<BOOL>(a1, 1, a2, a3, a3);
}

uint64_t Scale<BOOL>(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = *(int *)(a1 + 20);
  int v13 = vcvtpd_u64_f64((double)v11 * a4);
  LODWORD(v5) = vcvtpd_u64_f64((double)(int)v12 * a5);
  Matrix<double>::Matrix((uint64_t)v73, v11, v5);
  Matrix<double>::Resize(a3, v13, v5);
  uint64_t v69 = a3;
  uint64_t v14 = v74;
  BOOL v15 = a5 < 1.0;
  if ((v15 & a2) != 0) {
    double v16 = 4.0 / a5;
  }
  else {
    double v16 = 4.0;
  }
  unsigned int v17 = vcvtpd_u64_f64(v16);
  if ((v15 & a2) != 0) {
    double v18 = a5;
  }
  else {
    double v18 = 1.0;
  }
  BOOL v19 = a4 < 1.0;
  if ((v19 & a2) != 0) {
    double v20 = 4.0 / a4;
  }
  else {
    double v20 = 4.0;
  }
  if ((v19 & a2) != 0) {
    double v21 = a4;
  }
  else {
    double v21 = 1.0;
  }
  unsigned int v22 = vcvtpd_u64_f64(v20);
  if (v22 <= v17) {
    unsigned int v23 = v17;
  }
  else {
    unsigned int v23 = v22;
  }
  Matrix<double>::Matrix((uint64_t)&v71, 1, v23 + 4);
  uint64_t v71 = &unk_26FAEAF48;
  if (v5)
  {
    uint64_t v24 = 0;
    unint64_t v25 = v14 + 8 * (v11 * v5);
    do
    {
      uint64_t v70 = 0;
      CalculateWeightsForScale<double>((uint64_t)&v71, v17, (int *)&v70 + 1, &v70, v16, ((double)v24 + 0.5) / a5 + -0.5, v18);
      int v26 = v70;
      if ((int)v70 >= (int)v12) {
        int v27 = v70 - v12 + 1;
      }
      else {
        int v27 = 0;
      }
      double v28 = (double *)(v74 + 8 * v24);
      if ((unint64_t)v28 < v25)
      {
        unsigned int v29 = -HIDWORD(v70) & (SHIDWORD(v70) >> 31);
        if ((int)v70 >= (int)v12) {
          int v26 = v12 - 1;
        }
        uint64_t v30 = HIDWORD(v70) & ~(SHIDWORD(v70) >> 31);
        uint64_t v31 = *(void *)(a1 + 8);
        uint64_t v32 = v26;
        unint64_t v33 = (unsigned char *)(v31 + v26);
        uint64_t v34 = (unsigned char *)(v31 + v30);
        uint64_t v35 = v32 - v30;
        do
        {
          unsigned int v36 = v72;
          if (v29)
          {
            unsigned int v37 = 0;
            double v38 = 0.0;
            if (*v34) {
              double v39 = 1.0;
            }
            else {
              double v39 = 0.0;
            }
            do
            {
              double v40 = *v36++;
              double v38 = v38 + v40 * v39;
              ++v37;
            }
            while (v37 < v29);
          }
          else
          {
            double v38 = 0.0;
          }
          if (v34 >= v33)
          {
            uint64_t v43 = v34;
          }
          else
          {
            uint64_t v41 = 0;
            do
            {
              if (v34[v41]) {
                double v42 = 1.0;
              }
              else {
                double v42 = 0.0;
              }
              double v38 = v38 + v36[v41++] * v42;
            }
            while (v35 != v41);
            v36 += v35;
            uint64_t v43 = v33;
          }
          if (*v43) {
            double v44 = 1.0;
          }
          else {
            double v44 = 0.0;
          }
          double v45 = v38 + *v36 * v44;
          if (v27)
          {
            int v46 = v36 + 1;
            int v47 = v27;
            do
            {
              double v48 = *v46++;
              double v45 = v45 + v48 * v44;
              --v47;
            }
            while (v47);
          }
          *double v28 = v45;
          v28 += v5;
          v34 += v12;
          v33 += v12;
        }
        while ((unint64_t)v28 < v25);
      }
      ++v24;
    }
    while (v24 != v5);
  }
  if (v13)
  {
    unsigned int v49 = 0;
    int v50 = *(double **)(v69 + 8);
    do
    {
      uint64_t v70 = 0;
      CalculateWeightsForScale<double>((uint64_t)&v71, v22, (int *)&v70 + 1, &v70, v20, ((double)v49 + 0.5) / a4 + -0.5, v21);
      int v51 = v70;
      if ((int)v70 >= v11) {
        int v52 = v70 - v11 + 1;
      }
      else {
        int v52 = 0;
      }
      if (v5)
      {
        unsigned int v53 = -HIDWORD(v70) & (SHIDWORD(v70) >> 31);
        unint64_t v54 = &v50[v5];
        if ((int)v70 >= v11) {
          int v51 = v11 - 1;
        }
        unint64_t v55 = v74 + 8 * (v51 * v5);
        double v56 = (double *)(v74 + 8 * (HIDWORD(v70) & ~(SHIDWORD(v70) >> 31)) * v5);
        do
        {
          unsigned int v57 = v72;
          if (v53)
          {
            unsigned int v58 = 0;
            double v59 = 0.0;
            do
            {
              double v60 = *v57++;
              double v59 = v59 + v60 * *v56;
              ++v58;
            }
            while (v58 < v53);
          }
          else
          {
            double v59 = 0.0;
          }
          for (int i = v56; (unint64_t)i < v55; i += v5)
          {
            double v62 = *v57++;
            double v59 = v59 + v62 * *i;
          }
          double v63 = *i;
          double v64 = v59 + *v57 * *i;
          if (v52)
          {
            int v65 = v57 + 1;
            int v66 = v52;
            do
            {
              double v67 = *v65++;
              double v64 = v64 + v67 * v63;
              --v66;
            }
            while (v66);
          }
          *v50++ = v64;
          ++v56;
          v55 += 8;
        }
        while (v50 < v54);
      }
      ++v49;
    }
    while (v49 != v13);
  }
  Matrix<double>::~Matrix((uint64_t)&v71);
  return Matrix<double>::~Matrix((uint64_t)v73);
}

void sub_246896A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::Scale<double>(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  return Scale<double>(a1, 1, a5, a2, a3);
}

double ImageUtils::Gradient<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = *(unsigned int *)(a1 + 20);
  Matrix<double>::Resize(a2, v7, v6);
  Matrix<double>::Resize(a3, v7, v6);
  unsigned int v8 = *(double **)(a1 + 8);
  uint64_t v9 = *(double **)(a2 + 8);
  int v10 = *(double **)(a3 + 8);
  int v11 = v8 + 1;
  *uint64_t v9 = v8[1] - *v8;
  uint64_t v12 = v9 + 1;
  double *v10 = v8[v6] - *v8;
  int v13 = v10 + 1;
  unsigned int v14 = v6 - 1;
  if ((v6 - 1) >= 2)
  {
    uint64_t v15 = 0;
    int v16 = v6 - 2;
    do
    {
      v12[v15] = (v8[v15 + 2] - v8[v15]) * 0.5;
      v13[v15] = v8[v6 + 1 + v15] - v8[v15 + 1];
      ++v15;
      --v16;
    }
    while (v16);
    unsigned int v8 = (double *)((char *)v8 + v15 * 8);
    int v11 = v8 + 1;
    uint64_t v12 = (double *)((char *)v12 + v15 * 8);
    int v13 = (double *)((char *)v13 + v15 * 8);
  }
  *uint64_t v12 = *v11 - *v8;
  unsigned int v17 = v12 + 1;
  double *v13 = v11[v6] - *v11;
  double v18 = v13 + 1;
  BOOL v19 = v11 + 1;
  if ((v7 - 1) >= 2)
  {
    int v20 = 1;
    do
    {
      v12[1] = v11[2] - v11[1];
      v13[1] = (v19[v6] - v19[-v6]) * 0.5;
      v12 += 2;
      v13 += 2;
      if (v14 < 2)
      {
        v11 += 2;
      }
      else
      {
        uint64_t v21 = 0;
        int v22 = v6 - 2;
        do
        {
          v12[v21] = (v11[v21 + 3] - v11[v21 + 1]) * 0.5;
          v13[v21] = (v11[v6 + 2 + v21] - *(double *)((char *)v11 + 16 - 8 * v6 + v21 * 8)) * 0.5;
          ++v21;
          --v22;
        }
        while (v22);
        int v13 = (double *)((char *)v13 + v21 * 8);
        uint64_t v12 = (double *)((char *)v12 + v21 * 8);
        int v11 = (double *)((char *)v11 + v21 * 8 + 16);
      }
      double *v13 = (v11[v6] - v11[-v6]) * 0.5;
      double v18 = v13 + 1;
      *uint64_t v12 = *v11 - *(v11 - 1);
      unsigned int v17 = v12 + 1;
      ++v20;
      BOOL v19 = v11 + 1;
    }
    while (v20 != v7 - 1);
  }
  double *v17 = v11[2] - v11[1];
  unsigned int v23 = v17 + 1;
  double *v18 = v11[1] - v19[-v6];
  uint64_t v24 = v18 + 1;
  if (v14 < 2)
  {
    int v27 = v19 + 1;
  }
  else
  {
    uint64_t v25 = 0;
    int v26 = v6 - 2;
    do
    {
      v23[v25] = (v19[v25 + 2] - v19[v25]) * 0.5;
      v24[v25] = v19[v25 + 1] - v19[v25 + 1 - v6];
      ++v25;
      --v26;
    }
    while (v26);
    BOOL v19 = (double *)((char *)v19 + v25 * 8);
    int v27 = v19 + 1;
    unsigned int v23 = (double *)((char *)v23 + v25 * 8);
    uint64_t v24 = (double *)((char *)v24 + v25 * 8);
  }
  *unsigned int v23 = *v27 - *v19;
  double result = *v27 - v27[-v6];
  double *v24 = result;
  return result;
}

uint64_t ImageUtils::Fliplr<double>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  uint64_t result = Matrix<double>::Resize(a2, v5, v4);
  if (v5)
  {
    unsigned int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *(void **)(a2 + 8);
    do
    {
      if (v4)
      {
        int v10 = (uint64_t *)(*(void *)(a1 + 8) + 8 * v4 - 8 + 8 * v7);
        int v11 = v4;
        do
        {
          uint64_t v12 = *v10--;
          *v9++ = v12;
          --v11;
        }
        while (v11);
      }
      ++v8;
      v7 += v4;
    }
    while (v8 != v5);
  }
  return result;
}

uint64_t ImageUtils::Flipud<double>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  uint64_t result = Matrix<double>::Resize(a2, v5, v4);
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void **)(a2 + 8);
    do
    {
      if (v4)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a1 + 8) + 8 * ((v5 + ~v7) * v4));
        int v10 = v4;
        do
        {
          uint64_t v11 = *v9++;
          *v8++ = v11;
          --v10;
        }
        while (v10);
      }
      ++v7;
    }
    while (v7 != v5);
  }
  return result;
}

uint64_t ImageUtils::Rot90<double>(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v6 = *(_DWORD *)(result + 16);
  uint64_t v5 = *(unsigned int *)(result + 20);
  switch(a2)
  {
    case 0:
      uint64_t v7 = *(const void **)(result + 8);
      Matrix<double>::Resize(a3, v6, v5);
      uint64_t v8 = *(void **)(a3 + 8);
      uint64_t result = (uint64_t)memcpy(v8, v7, 8 * (v6 * v5));
      break;
    case 1:
      uint64_t result = Matrix<double>::Resize(a3, v5, v6);
      if (v5)
      {
        uint64_t v9 = 0;
        int v10 = *(void **)(a3 + 8);
        uint64_t v11 = 8 * (v5 - 1);
        do
        {
          if (v6)
          {
            uint64_t v12 = (void *)(*(void *)(v4 + 8) + v11);
            int v13 = v6;
            do
            {
              *v10++ = *v12;
              v12 += v5;
              --v13;
            }
            while (v13);
          }
          ++v9;
          v11 -= 8;
        }
        while (v9 != v5);
      }
      break;
    case 2:
      uint64_t result = Matrix<double>::Resize(a3, v6, v5);
      int v14 = v6 * v5;
      if (v6 * v5)
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v4 + 8) + 8 * (v14 - 1));
        int v16 = *(void **)(a3 + 8);
        do
        {
          uint64_t v17 = *v15--;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      break;
    case 3:
      uint64_t result = Matrix<double>::Resize(a3, v5, v6);
      if (v5)
      {
        uint64_t v18 = 0;
        BOOL v19 = *(void **)(a3 + 8);
        uint64_t v20 = 8 * ((v6 - 1) * v5);
        do
        {
          if (v6)
          {
            uint64_t v21 = (void *)(*(void *)(v4 + 8) + v20);
            int v22 = v6;
            do
            {
              *v19++ = *v21;
              v21 -= v5;
              --v22;
            }
            while (v22);
          }
          ++v18;
          v20 += 8;
        }
        while (v18 != v5);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ImageUtils::Rot90<BOOL>(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v6 = *(_DWORD *)(result + 16);
  uint64_t v5 = *(unsigned int *)(result + 20);
  switch(a2)
  {
    case 0:
      uint64_t v7 = *(const void **)(result + 8);
      Matrix<BOOL>::Resize(a3, v6, v5);
      uint64_t v8 = *(void **)(a3 + 8);
      uint64_t result = (uint64_t)memcpy(v8, v7, (v6 * v5));
      break;
    case 1:
      uint64_t result = Matrix<BOOL>::Resize(a3, v5, v6);
      if (v5)
      {
        uint64_t v9 = 0;
        int v10 = *(unsigned char **)(a3 + 8);
        do
        {
          if (v6)
          {
            uint64_t v11 = (unsigned char *)(*(void *)(v4 + 8) + (v5 - 1) - v9);
            int v12 = v6;
            do
            {
              *v10++ = *v11;
              v11 += v5;
              --v12;
            }
            while (v12);
          }
          ++v9;
        }
        while (v9 != v5);
      }
      break;
    case 2:
      uint64_t result = Matrix<BOOL>::Resize(a3, v6, v5);
      int v13 = v6 * v5;
      if (v6 * v5)
      {
        int v14 = (char *)(*(void *)(v4 + 8) + (v13 - 1));
        uint64_t v15 = *(unsigned char **)(a3 + 8);
        do
        {
          char v16 = *v14--;
          *v15++ = v16;
          --v13;
        }
        while (v13);
      }
      break;
    case 3:
      uint64_t result = Matrix<BOOL>::Resize(a3, v5, v6);
      if (v5)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(unsigned char **)(a3 + 8);
        do
        {
          if (v6)
          {
            BOOL v19 = (unsigned char *)(*(void *)(v4 + 8) + ((v6 - 1) * v5) + v17);
            int v20 = v6;
            do
            {
              *v18++ = *v19;
              v19 -= v5;
              --v20;
            }
            while (v20);
          }
          ++v17;
        }
        while (v17 != v5);
      }
      break;
    default:
      return result;
  }
  return result;
}

void ImageUtils::OtsuThreshold(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  unsigned int v3 = *(_DWORD *)(a1 + 20);
  uint64_t v4 = *(double **)(a1 + 8);
  double v5 = *v4;
  int v6 = v3 * v2;
  if (v3 * v2 >= 2)
  {
    uint64_t v7 = v4 + 1;
    int v8 = v6 - 1;
    double v9 = v5;
    while (1)
    {
      double v10 = *v7;
      if (*v7 < v9) {
        break;
      }
      if (v10 <= v5) {
        goto LABEL_6;
      }
LABEL_7:
      ++v7;
      double v5 = v10;
      if (!--v8) {
        goto LABEL_10;
      }
    }
    double v9 = *v7;
LABEL_6:
    double v10 = v5;
    goto LABEL_7;
  }
  double v9 = *v4;
  double v10 = *v4;
LABEL_10:
  if (v9 != v10)
  {
    uint64_t v11 = malloc_type_calloc(0x100uLL, 8uLL, 0x100004000313F17uLL);
    int v12 = v11;
    if (v6)
    {
      int v13 = *(double **)(a1 + 8);
      do
      {
        double v14 = *v13++;
        unsigned int v15 = vcvtad_u64_f64((v14 - v9) / (v10 - v9) * 255.0);
        *(double *)&v11[v15] = 1.0 / ((double)v2 * (double)v3) + *(double *)&v11[v15];
        --v6;
      }
      while (v6);
    }
    char v16 = malloc_type_malloc(0x800uLL, 0x100004000313F17uLL);
    uint64_t v17 = malloc_type_malloc(0x800uLL, 0x100004000313F17uLL);
    uint64_t v18 = v17;
    uint64_t v19 = 0;
    *char v16 = *v12;
    void *v17 = *v12;
    unsigned int v20 = 2;
    uint64_t v21 = v17;
    int v22 = v16;
    do
    {
      ++v21;
      ++v22;
      *(double *)&v16[v19 + 1] = *(double *)&v16[v19] + *(double *)&v12[v19 + 1];
      double v23 = *(double *)&v17[v19] + *(double *)&v12[v19 + 1] * (double)v20;
      *(double *)&v17[++v19] = v23;
      ++v20;
    }
    while ((v19 * 8) != 2040);
    uint64_t v24 = 0;
    int v25 = 0;
    double v26 = *(double *)&v16[v19 - 255];
    double v27 = -(*(double *)&v17[v19 - 255] - v23 * v26);
    double v28 = v27 * v27 / (v26 * (1.0 - v26));
    int v29 = 1;
    int v30 = 1;
    do
    {
      uint64_t v31 = (double *)&v22[v24 - 254];
      double v32 = -(*(double *)&v21[v24 - 254] - v23 * *v31);
      double v33 = v32 * v32 / (*v31 * (1.0 - *v31));
      if (v33 <= v28)
      {
        if (v33 == v28)
        {
          v25 += v24 + 1;
          ++v30;
        }
        double v33 = v28;
      }
      else
      {
        int v30 = 1;
        int v25 = v29;
      }
      ++v29;
      ++v24;
      double v28 = v33;
    }
    while (v24 != 254);
    uint64_t v34 = &v12[v19 - 255];
    free(v16);
    free(v18);
    free(v34);
  }
}

uint64_t ImageUtils::ExtractPatch<double>(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, uint64_t a6)
{
  unsigned int v10 = a2;
  uint64_t v11 = *(unsigned int *)(a1 + 20);
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t result = Matrix<double>::Resize(a6, a3 - a2 + 1, a5 - a4 + 1);
  if (a3 >= v10)
  {
    uint64_t v14 = v12 + 8 * v11 * v10;
    unsigned int v15 = *(void **)(a6 + 8);
    do
    {
      for (unsigned int i = a4; i <= a5; ++i)
        *v15++ = *(void *)(v14 + 8 * i);
      ++v10;
      v14 += 8 * v11;
    }
    while (v10 <= a3);
  }
  return result;
}

void ImageUtils::Conv2<double>()
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v0 = &unk_26FAEAF18;
  char v3 = 0;
  ImageUtils::Rot90<double>();
}

void sub_246897588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ImageUtils::Filter2<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a3) {
    ImageUtils::Filter2<double>();
  }
  Matrix<double>::Resize(a3, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  int v6 = *(const double **)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 20);
  double v9 = *(const double **)(a2 + 8);
  unsigned int v10 = *(double **)(a3 + 8);
  int v11 = *(_DWORD *)(a2 + 16);
  int v12 = *(_DWORD *)(a2 + 20);

  vDSPImgfir<double>(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t ImageUtils::Conv2<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[1] = 0;
  uint64_t v6[2] = 0;
  v6[0] = &unk_26FAEAFE0;
  char v7 = 0;
  ImageUtils::Rot90<float>(a2, 2, (uint64_t)v6);
  ImageUtils::Filter2<float>(a1, (uint64_t)v6, a3);
  return Matrix<float>::~Matrix((uint64_t)v6);
}

void sub_246897684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ImageUtils::Rot90<float>(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v6 = *(_DWORD *)(result + 16);
  uint64_t v5 = *(unsigned int *)(result + 20);
  switch(a2)
  {
    case 0:
      char v7 = *(const void **)(result + 8);
      Matrix<float>::Resize(a3, v6, v5);
      int v8 = *(void **)(a3 + 8);
      uint64_t result = (uint64_t)memcpy(v8, v7, 4 * (v6 * v5));
      break;
    case 1:
      uint64_t result = Matrix<float>::Resize(a3, v5, v6);
      if (v5)
      {
        uint64_t v9 = 0;
        unsigned int v10 = *(_DWORD **)(a3 + 8);
        uint64_t v11 = 4 * (v5 - 1);
        do
        {
          if (v6)
          {
            int v12 = (_DWORD *)(*(void *)(v4 + 8) + v11);
            int v13 = v6;
            do
            {
              *v10++ = *v12;
              v12 += v5;
              --v13;
            }
            while (v13);
          }
          ++v9;
          v11 -= 4;
        }
        while (v9 != v5);
      }
      break;
    case 2:
      uint64_t result = Matrix<float>::Resize(a3, v6, v5);
      int v14 = v6 * v5;
      if (v6 * v5)
      {
        unsigned int v15 = (int *)(*(void *)(v4 + 8) + 4 * (v14 - 1));
        char v16 = *(_DWORD **)(a3 + 8);
        do
        {
          int v17 = *v15--;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      break;
    case 3:
      uint64_t result = Matrix<float>::Resize(a3, v5, v6);
      if (v5)
      {
        uint64_t v18 = 0;
        uint64_t v19 = *(_DWORD **)(a3 + 8);
        uint64_t v20 = 4 * ((v6 - 1) * v5);
        do
        {
          if (v6)
          {
            uint64_t v21 = (_DWORD *)(*(void *)(v4 + 8) + v20);
            int v22 = v6;
            do
            {
              *v19++ = *v21;
              v21 -= v5;
              --v22;
            }
            while (v22);
          }
          ++v18;
          v20 += 4;
        }
        while (v18 != v5);
      }
      break;
    default:
      return result;
  }
  return result;
}

void ImageUtils::Filter2<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a3) {
    ImageUtils::Filter2<double>();
  }
  Matrix<float>::Resize(a3, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  int v6 = *(const float **)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 20);
  uint64_t v9 = *(const float **)(a2 + 8);
  unsigned int v10 = *(float **)(a3 + 8);
  int v11 = *(_DWORD *)(a2 + 16);
  int v12 = *(_DWORD *)(a2 + 20);

  vDSPImgfir<float>(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t ImageUtils::ConnectedComp<BOOL>(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(unsigned char **)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 20);
  Matrix<unsigned short>::Resize(a3, v7, v8);
  uint64_t v9 = *(_WORD **)(a3 + 8);
  DisjointSet::DisjointSet((DisjointSet *)&v86);
  DisjointSet::SetCapacity((uint64_t)&v86, 0xFFFEu);
  *(_DWORD *)int v87 = 0;
  unsigned int v10 = v86;
  if (!v86) {
    __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
  }
  int v11 = v88;
  _WORD *v88 = 0;
  unsigned int v12 = 1;
  *(_DWORD *)int v87 = 1;
  if (*v6)
  {
    if (v10 <= 1) {
      __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
    }
    int v13 = 1;
    v11[1] = 1;
    unsigned int v12 = 2;
    *(_DWORD *)int v87 = 2;
  }
  else
  {
    int v13 = 0;
  }
  *uint64_t v9 = v13;
  if (v8 != 1)
  {
    for (uint64_t i = 0; v8 - 1 != i; ++i)
    {
      if (v6[i + 1])
      {
        if (!v9[(int)i] || !v6[(int)i] || (__int16 v15 = v9[i]) == 0)
        {
          if (v13 <= 65531)
          {
            if (v12 >= v10) {
              __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
            }
            v11[v12] = v12;
            *(_DWORD *)int v87 = v12 + 1;
            v9[i + 1] = v12;
            ++v13;
            ++v12;
            continue;
          }
          __int16 v15 = v12 - 1;
        }
        v9[i + 1] = v15;
      }
      else
      {
        v9[i + 1] = 0;
      }
    }
  }
  uint64_t v80 = a3;
  int v85 = v8;
  int v81 = v7;
  if (a2 == 4)
  {
    int v43 = v7 - 1;
    if (!v43) {
      goto LABEL_132;
    }
    int v44 = 1 - v8;
    unsigned int v45 = v8;
    while (1)
    {
      uint64_t v46 = v45;
      if (!v6[v45])
      {
        v9[v45] = 0;
        goto LABEL_108;
      }
      unsigned int v47 = v45 - v8;
      if (v9[(int)v46 - v8])
      {
        if (v6[v47])
        {
          int v48 = (unsigned __int16)v9[v47];
          if (v48) {
            goto LABEL_107;
          }
        }
      }
      int v49 = *(_DWORD *)v87;
      if (v13 > 65531) {
        break;
      }
      if (*(_DWORD *)v87 >= v86) {
        __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
      }
      v88[*(unsigned int *)v87] = v87[0];
      *(_DWORD *)int v87 = v49 + 1;
      v9[v46] = v49;
      ++v13;
LABEL_108:
      if (v8 != 1)
      {
        int v50 = 0;
        int v51 = v44 + v46;
        while (1)
        {
          int v52 = v46 + v50;
          uint64_t v53 = (v46 + v50 + 1);
          if (v6[v53]) {
            break;
          }
          v9[v53] = 0;
LABEL_125:
          ++v50;
          if (!(v44 + v50))
          {
            unsigned int v45 = v46 + v50 + 1;
            int v8 = v85;
            goto LABEL_131;
          }
        }
        if (v9[v52] && v6[v52]) {
          unsigned int v54 = (unsigned __int16)v9[v52];
        }
        else {
          unsigned int v54 = 0;
        }
        int v55 = v51 + v50;
        uint64_t v56 = (unsigned __int16)v9[v51 + v50];
        if (v54 != v56 && v9[v55] && v6[v55])
        {
          if (v54)
          {
            DisjointSet::Unite((DisjointSet *)&v86, v56, v54);
LABEL_124:
            v9[v53] = v54;
            goto LABEL_125;
          }
          unsigned int v54 = (unsigned __int16)v9[v51 + v50];
        }
        if (!v54)
        {
          int v57 = *(_DWORD *)v87;
          if (v13 > 65531)
          {
            v9[v53] = v87[0] - 1;
          }
          else
          {
            if (*(_DWORD *)v87 >= v86) {
              __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
            }
            v88[*(unsigned int *)v87] = v87[0];
            *(_DWORD *)int v87 = v57 + 1;
            v9[v53] = v57;
            ++v13;
          }
          goto LABEL_125;
        }
        goto LABEL_124;
      }
      unsigned int v45 = v46 + 1;
LABEL_131:
      if (!--v43) {
        goto LABEL_132;
      }
    }
    LOWORD(v48) = v87[0] - 1;
LABEL_107:
    v9[v46] = v48;
    goto LABEL_108;
  }
  if (a2 != 8) {
    goto LABEL_132;
  }
  int v16 = v7 - 1;
  if (v81 == 1) {
    goto LABEL_132;
  }
  int v17 = v8 - 2;
  int v82 = -v8;
  int v18 = v8;
  do
  {
    if (v6[v18])
    {
      int v19 = v18 - v8;
      if (v9[v18 - v8] && v6[v19]) {
        unsigned int v20 = (unsigned __int16)v9[v19];
      }
      else {
        unsigned int v20 = 0;
      }
      int v21 = v19 + 1;
      uint64_t v22 = (unsigned __int16)v9[v21];
      if (v20 != v22 && v9[v21] && v6[v21])
      {
        if (v20)
        {
          DisjointSet::Unite((DisjointSet *)&v86, v22, v20);
LABEL_36:
          v9[v18] = v20;
          goto LABEL_37;
        }
        unsigned int v20 = (unsigned __int16)v9[v21];
      }
      if (!v20)
      {
        int v41 = *(_DWORD *)v87;
        if (v13 > 65531)
        {
          v9[v18] = v87[0] - 1;
        }
        else
        {
          if (*(_DWORD *)v87 >= v86) {
            __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
          }
          v88[*(unsigned int *)v87] = v87[0];
          *(_DWORD *)int v87 = v41 + 1;
          v9[v18] = v41;
          ++v13;
        }
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    v9[v18] = 0;
LABEL_37:
    if (v8 == 2)
    {
      unsigned int v23 = v18 + 1;
      goto LABEL_72;
    }
    int v84 = v16;
    int v24 = 0;
    int v25 = v82 + v18;
    do
    {
      int v26 = v18 + v24;
      uint64_t v27 = (v18 + v24 + 1);
      if (!v6[v27])
      {
        v9[v27] = 0;
        goto LABEL_66;
      }
      if (v9[v26] && v6[v26]) {
        unsigned int v28 = (unsigned __int16)v9[v26];
      }
      else {
        unsigned int v28 = 0;
      }
      int v29 = v25 + v24;
      uint64_t v30 = (unsigned __int16)v9[v25 + v24];
      if (v28 != v30 && v9[v29] && v6[v29])
      {
        if (v28) {
          DisjointSet::Unite((DisjointSet *)&v86, v30, v28);
        }
        else {
          unsigned int v28 = (unsigned __int16)v9[v29];
        }
      }
      int v31 = v29 + 1;
      uint64_t v32 = (unsigned __int16)v9[v29 + 1];
      if (v28 != v32 && v9[v31] && v6[v31])
      {
        if (v28) {
          DisjointSet::Unite((DisjointSet *)&v86, v32, v28);
        }
        else {
          unsigned int v28 = (unsigned __int16)v9[v29 + 1];
        }
      }
      int v33 = v29 + 2;
      uint64_t v34 = (unsigned __int16)v9[v29 + 2];
      if (v28 != v34 && v9[v33] && v6[v33])
      {
        if (v28)
        {
          DisjointSet::Unite((DisjointSet *)&v86, v34, v28);
LABEL_65:
          v9[v27] = v28;
          goto LABEL_66;
        }
        unsigned int v28 = (unsigned __int16)v9[v29 + 2];
      }
      if (v28) {
        goto LABEL_65;
      }
      int v35 = *(_DWORD *)v87;
      if (v13 > 65531)
      {
        v9[v27] = v87[0] - 1;
      }
      else
      {
        if (*(_DWORD *)v87 >= v86) {
          __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
        }
        v88[*(unsigned int *)v87] = v87[0];
        *(_DWORD *)int v87 = v35 + 1;
        v9[v27] = v35;
        ++v13;
      }
LABEL_66:
      ++v24;
    }
    while (v17 != v24);
    v18 += v24;
    unsigned int v23 = v18 + 1;
    int v16 = v84;
    int v8 = v85;
LABEL_72:
    uint64_t v36 = v23;
    if (v6[v23])
    {
      unsigned int v37 = v23 - v8;
      int v38 = v36 - v8 - 1;
      if (v9[v38] && v6[v38]) {
        unsigned int v39 = (unsigned __int16)v9[v38];
      }
      else {
        unsigned int v39 = 0;
      }
      uint64_t v40 = (unsigned __int16)v9[v37];
      if (v39 != v40 && v9[v37] && v6[v37])
      {
        if (v39)
        {
          DisjointSet::Unite((DisjointSet *)&v86, v40, v39);
          goto LABEL_89;
        }
        unsigned int v39 = (unsigned __int16)v9[v37];
      }
      if (v39)
      {
LABEL_89:
        v9[v36] = v39;
      }
      else
      {
        int v42 = *(_DWORD *)v87;
        if (v13 > 65531)
        {
          v9[v36] = v87[0] - 1;
        }
        else
        {
          if (*(_DWORD *)v87 >= v86) {
            __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
          }
          v88[*(unsigned int *)v87] = v87[0];
          *(_DWORD *)int v87 = v42 + 1;
          v9[v36] = v42;
          ++v13;
        }
      }
    }
    else
    {
      v9[v23] = 0;
    }
    v18 += 2;
    --v16;
  }
  while (v16);
LABEL_132:
  uint64_t v58 = DisjointSet::Compact((DisjointSet *)&v86, v87[0], 0);
  double v59 = *(_WORD **)(v80 + 8);
  int v60 = v81 * v8;
  if (a4)
  {
    std::vector<ImageUtils::Blob>::resize(a4, (v58 - 1));
    double v61 = a4;
    if (v60)
    {
      for (int j = 0; j != v60; ++j)
      {
        uint64_t v63 = (unsigned __int16)v88[(unsigned __int16)*v59];
        *double v59 = v63;
        if (v63)
        {
          unint64_t v64 = (v63 - 1);
          if (0xAAAAAAAAAAAAAAABLL * ((v61[1] - *v61) >> 3) <= v64) {
            std::vector<ImageUtils::Blob>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v65 = *v61 + 24 * v64;
          int v66 = *(_DWORD **)(v65 + 8);
          unint64_t v67 = *(void *)(v65 + 16);
          if ((unint64_t)v66 >= v67)
          {
            uint64_t v69 = *(_DWORD **)v65;
            uint64_t v70 = ((uint64_t)v66 - *(void *)v65) >> 2;
            unint64_t v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 62) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v72 = v67 - (void)v69;
            if (v72 >> 1 > v71) {
              unint64_t v71 = v72 >> 1;
            }
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              uint64_t v74 = (char *)std::allocator<unsigned int>::allocate_at_least[abi:ne180100](v65 + 16, v73);
              uint64_t v69 = *(_DWORD **)v65;
              int v66 = *(_DWORD **)(v65 + 8);
            }
            else
            {
              uint64_t v74 = 0;
            }
            uint64_t v75 = &v74[4 * v70];
            *(_DWORD *)uint64_t v75 = j;
            uint64_t v68 = v75 + 4;
            while (v66 != v69)
            {
              int v76 = *--v66;
              *((_DWORD *)v75 - 1) = v76;
              v75 -= 4;
            }
            *(void *)uint64_t v65 = v75;
            *(void *)(v65 + 8) = v68;
            *(void *)(v65 + 16) = &v74[4 * v73];
            if (v69) {
              operator delete(v69);
            }
            double v61 = a4;
          }
          else
          {
            _DWORD *v66 = j;
            uint64_t v68 = v66 + 1;
          }
          *(void *)(v65 + 8) = v68;
        }
        ++v59;
      }
    }
  }
  else if (v60 >= 1)
  {
    char v77 = v88;
    unsigned int v78 = v60 + 1;
    do
    {
      *double v59 = v77[(unsigned __int16)*v59];
      ++v59;
      --v78;
    }
    while (v78 > 1);
  }
  DisjointSet::~DisjointSet((DisjointSet *)&v86);
  return v58;
}

void sub_246898174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

uint64_t Matrix<unsigned short>::Resize(uint64_t result, int a2, int a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 16) != a2 || *(_DWORD *)(result + 20) != a3)
  {
    if (*(void *)(result + 8))
    {
      if (*(unsigned char *)(result + 24)) {
        MEMORY[0x24C53D6C0]();
      }
    }
    *(_DWORD *)(v5 + 16) = a2;
    *(_DWORD *)(v5 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a3;
    operator new[]();
  }
  return result;
}

uint64_t DisjointSet::Unite(DisjointSet *this, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a2;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = a2;
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = *(unsigned __int16 *)(v5 + 2 * v6);
  }
  while (v7 > v6);
  if (a2 != a3)
  {
    unsigned int v8 = a3;
    do
    {
      unsigned int v9 = v8;
      unsigned int v8 = *(unsigned __int16 *)(v5 + 2 * v8);
    }
    while (v9 > v8);
    if (v7 >= v9) {
      uint64_t v7 = v9;
    }
    else {
      uint64_t v7 = v7;
    }
    DisjointSet::SetRoot((uint64_t)this, a3, v7);
  }
  DisjointSet::SetRoot((uint64_t)this, v3, v7);
  return v7;
}

void std::vector<ImageUtils::Blob>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<ImageUtils::Blob>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unsigned int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unsigned int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t ImageUtils::ConnectedComp<MatrixMxN<1u,3u,double>>(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, double a5)
{
  uint64_t v156 = *(void *)(a1 + 8);
  int v9 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 20);
  Matrix<unsigned short>::Resize(a3, v9, v8);
  CFNumberRef v158 = *(_WORD **)(a3 + 8);
  DisjointSet::DisjointSet((DisjointSet *)&v161);
  DisjointSet::SetCapacity((uint64_t)&v161, 0xFFFEu);
  *(_DWORD *)char v162 = 0;
  unsigned int v10 = v161;
  if (!v161) {
    __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
  }
  uint64_t v11 = 0;
  unsigned int v12 = v163;
  _WORD *v163 = 0;
  *(_DWORD *)char v162 = 1;
  do
  {
    double v13 = *(double *)(v156 + v11);
    BOOL v14 = v13 == 0.0 || v11 == 16;
    v11 += 8;
  }
  while (!v14);
  if (v13 == 0.0)
  {
    int v15 = 0;
    unsigned int v16 = 1;
  }
  else
  {
    if (v10 <= 1) {
      __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
    }
    int v15 = 1;
    v12[1] = 1;
    unsigned int v16 = 2;
    *(_DWORD *)char v162 = 2;
  }
  _WORD *v158 = v15;
  if (v8 != 1)
  {
    int v17 = 0;
    int v18 = v8 - 2;
    uint64_t v19 = v156 + 24;
    int v20 = 1;
    do
    {
      uint64_t v21 = 0;
      int v22 = v18;
      uint64_t v23 = v20;
      uint64_t v24 = v156 + 24 * v20;
      do
      {
        double v25 = *(double *)(v19 + v21);
        BOOL v26 = v25 == 0.0 || v21 == 16;
        v21 += 8;
      }
      while (!v26);
      if (v25 == 0.0)
      {
        v158[v23] = 0;
      }
      else
      {
        if (!v158[(int)v23 - 1]) {
          goto LABEL_26;
        }
        uint64_t v27 = 0;
        double v28 = 0.0;
        do
        {
          double v28 = v28 + *(double *)(v24 + v27) * *(double *)(v156 + 24 * v17 + v27);
          v27 += 8;
        }
        while (v27 != 24);
        if (fabs(v28) <= (double)(int)a5 / 1000.0 || (__int16 v29 = v158[(v23 - 1)]) == 0)
        {
LABEL_26:
          if (v15 <= 65531)
          {
            if (v16 >= v10) {
              __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
            }
            v12[v16] = v16;
            *(_DWORD *)char v162 = v16 + 1;
            v158[v23] = v16;
            ++v15;
            ++v16;
            goto LABEL_32;
          }
          __int16 v29 = v16 - 1;
        }
        v158[v23] = v29;
      }
LABEL_32:
      int v20 = v23 + 1;
      int v18 = v22 - 1;
      v19 += 24;
      ++v17;
    }
    while (v22);
  }
  int v152 = v15;
  int v155 = v8;
  uint64_t v148 = a3;
  int v149 = v9;
  if (a2 == 4)
  {
    int v95 = v9 - 1;
    uint64_t v96 = v156;
    uint64_t v97 = v158;
    if (v9 == 1) {
      goto LABEL_200;
    }
    int v98 = v155;
    double v99 = (double)(int)a5 / 1000.0;
    while (1)
    {
      uint64_t v100 = 0;
      CFDictionaryRef v101 = (long long *)(v96 + 24 * v98);
      long long v159 = *v101;
      uint64_t v160 = *((void *)v101 + 2);
      do
      {
        double v102 = *(double *)((char *)&v159 + v100);
        BOOL v103 = v102 == 0.0 || v100 == 16;
        v100 += 8;
      }
      while (!v103);
      if (v102 == 0.0)
      {
        v97[v98] = 0;
        goto LABEL_167;
      }
      int v104 = v98 - v155;
      if (v97[v98 - v155])
      {
        uint64_t v105 = 0;
        double v106 = 0.0;
        do
        {
          double v106 = v106 + *(double *)(v96 + 24 * v98 + v105) * *(double *)(v96 + 24 * v104 + v105);
          v105 += 8;
        }
        while (v105 != 24);
        if (fabs(v106) > v99)
        {
          int v107 = (unsigned __int16)v97[v104];
          if (v107) {
            goto LABEL_166;
          }
        }
      }
      int v108 = *(_DWORD *)v162;
      if (v152 > 65531) {
        break;
      }
      if (*(_DWORD *)v162 >= v161) {
        __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
      }
      v163[*(unsigned int *)v162] = v162[0];
      *(_DWORD *)char v162 = v108 + 1;
      v97[v98] = v108;
      ++v152;
LABEL_167:
      unsigned int v109 = v98 + 1;
      if (v155 != 1)
      {
        int v110 = 1 - v155 + v98;
        int v111 = v155 - 2;
        while (1)
        {
          uint64_t v112 = 0;
          int v113 = v111;
          uint64_t v114 = v96 + 24 * (int)v109;
          uint64_t v115 = v109;
          uint64_t v116 = (long long *)(v96 + 24 * v109);
          long long v159 = *v116;
          uint64_t v160 = *((void *)v116 + 2);
          do
          {
            double v117 = *(double *)((char *)&v159 + v112);
            BOOL v118 = v117 == 0.0 || v112 == 16;
            v112 += 8;
          }
          while (!v118);
          if (v117 != 0.0) {
            break;
          }
          v97[v115] = 0;
LABEL_198:
          unsigned int v109 = v115 + 1;
          int v111 = v113 - 1;
          ++v98;
          ++v110;
          if (!v113) {
            goto LABEL_199;
          }
        }
        if (!v97[v98]) {
          goto LABEL_181;
        }
        uint64_t v119 = 0;
        double v120 = 0.0;
        do
        {
          double v120 = v120 + *(double *)(v114 + v119) * *(double *)(v96 + 24 * v98 + v119);
          v119 += 8;
        }
        while (v119 != 24);
        if (fabs(v120) > v99) {
          unsigned int v121 = (unsigned __int16)v97[v98];
        }
        else {
LABEL_181:
        }
          unsigned int v121 = 0;
        uint64_t v122 = (unsigned __int16)v158[(v115 - v155)];
        if (v121 != v122)
        {
          if (v158[(int)v115 - v155])
          {
            uint64_t v123 = 0;
            double v124 = 0.0;
            do
            {
              double v124 = v124 + *(double *)(v114 + v123) * *(double *)(v96 + 24 * v110 + v123);
              v123 += 8;
            }
            while (v123 != 24);
            if (fabs(v124) > v99)
            {
              if (v121)
              {
                DisjointSet::Unite((DisjointSet *)&v161, v122, v121);
                goto LABEL_192;
              }
              unsigned int v121 = (unsigned __int16)v158[(v115 - v155)];
            }
          }
        }
        if (v121)
        {
LABEL_192:
          uint64_t v97 = v158;
          v158[v115] = v121;
        }
        else
        {
          int v125 = *(_DWORD *)v162;
          if (v152 <= 65531)
          {
            uint64_t v96 = v156;
            uint64_t v97 = v158;
            if (*(_DWORD *)v162 >= v161) {
              __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
            }
            v163[*(unsigned int *)v162] = v162[0];
            *(_DWORD *)char v162 = v125 + 1;
            v158[v115] = v125;
            ++v152;
            goto LABEL_198;
          }
          uint64_t v97 = v158;
          v158[v115] = v162[0] - 1;
        }
        uint64_t v96 = v156;
        goto LABEL_198;
      }
LABEL_199:
      int v98 = v109;
      if (!--v95) {
        goto LABEL_200;
      }
    }
    LOWORD(v107) = v162[0] - 1;
LABEL_166:
    v97[v98] = v107;
    goto LABEL_167;
  }
  uint64_t v30 = v156;
  int v31 = v158;
  if (a2 == 8)
  {
    int v32 = v9 - 1;
    if (v9 != 1)
    {
      int v33 = v155;
      double v34 = (double)(int)a5 / 1000.0;
      do
      {
        uint64_t v35 = 0;
        do
        {
          double v36 = *(double *)(v30 + 24 * v33 + v35);
          BOOL v37 = v36 == 0.0 || v35 == 16;
          v35 += 8;
        }
        while (!v37);
        if (v36 == 0.0)
        {
          v31[v33] = 0;
          goto LABEL_66;
        }
        int v38 = v33 - v155;
        if (!v31[v33 - v155]) {
          goto LABEL_49;
        }
        uint64_t v39 = 0;
        uint64_t v40 = v30 + 24 * v33;
        uint64_t v41 = v30 + 24 * v38;
        double v42 = 0.0;
        do
        {
          double v42 = v42 + *(double *)(v40 + v39) * *(double *)(v41 + v39);
          v39 += 8;
        }
        while (v39 != 24);
        if (fabs(v42) > v34) {
          unsigned int v43 = (unsigned __int16)v31[v38];
        }
        else {
LABEL_49:
        }
          unsigned int v43 = 0;
        int v44 = v38 + 1;
        uint64_t v45 = (unsigned __int16)v158[v38 + 1];
        if (v43 != v45)
        {
          if (v158[v44])
          {
            uint64_t v46 = 0;
            double v47 = 0.0;
            do
            {
              double v47 = v47 + *(double *)(v156 + 24 * v33 + v46) * *(double *)(v156 + 24 * v44 + v46);
              v46 += 8;
            }
            while (v46 != 24);
            if (fabs(v47) > v34)
            {
              if (v43)
              {
                DisjointSet::Unite((DisjointSet *)&v161, v45, v43);
LABEL_60:
                int v31 = v158;
                v158[v33] = v43;
LABEL_65:
                uint64_t v30 = v156;
                goto LABEL_66;
              }
              unsigned int v43 = (unsigned __int16)v158[v44];
            }
          }
        }
        if (v43) {
          goto LABEL_60;
        }
        int v48 = *(_DWORD *)v162;
        if (v152 > 65531)
        {
          int v31 = v158;
          v158[v33] = v162[0] - 1;
          goto LABEL_65;
        }
        uint64_t v30 = v156;
        int v31 = v158;
        if (*(_DWORD *)v162 >= v161) {
          __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
        }
        v163[*(unsigned int *)v162] = v162[0];
        *(_DWORD *)char v162 = v48 + 1;
        v158[v33] = v48;
        ++v152;
LABEL_66:
        int v151 = v32;
        unsigned int v49 = v33 + 1;
        if (v155 != 2)
        {
          int v51 = v33 - v155;
          int v52 = 1 - v155 + v33;
          int v53 = 2 - v155 + v33;
          int v54 = v155 - 3;
          while (1)
          {
            uint64_t v55 = 0;
            int v50 = v49;
            int v56 = v54;
            uint64_t v57 = v30 + 24 * v53;
            uint64_t v58 = v30 + 24 * (int)v49;
            uint64_t v59 = v30 + 24 * v52;
            int v60 = (long long *)(v30 + 24 * v49);
            long long v159 = *v60;
            uint64_t v160 = *((void *)v60 + 2);
            do
            {
              double v61 = *(double *)((char *)&v159 + v55);
              BOOL v62 = v61 == 0.0 || v55 == 16;
              v55 += 8;
            }
            while (!v62);
            if (v61 != 0.0) {
              break;
            }
            v31[v49] = 0;
LABEL_114:
            unsigned int v49 = v50 + 1;
            int v54 = v56 - 1;
            ++v33;
            ++v51;
            ++v52;
            ++v53;
            if (!v56) {
              goto LABEL_115;
            }
          }
          unsigned int v157 = v49;
          int v154 = v54;
          uint64_t v153 = v49;
          if (!v31[v33]) {
            goto LABEL_81;
          }
          uint64_t v63 = 0;
          double v64 = 0.0;
          do
          {
            double v64 = v64 + *(double *)(v58 + v63) * *(double *)(v30 + 24 * v33 + v63);
            v63 += 8;
          }
          while (v63 != 24);
          if (fabs(v64) > v34) {
            unsigned int v65 = (unsigned __int16)v31[v33];
          }
          else {
LABEL_81:
          }
            unsigned int v65 = 0;
          unsigned int v66 = v49 - v155;
          int v67 = v49 - v155 - 1;
          uint64_t v68 = (unsigned __int16)v158[v67];
          if (v65 != v68)
          {
            if (v158[v67])
            {
              uint64_t v69 = 0;
              double v70 = 0.0;
              do
              {
                double v70 = v70 + *(double *)(v58 + v69) * *(double *)(v30 + 24 * v51 + v69);
                v69 += 8;
              }
              while (v69 != 24);
              if (fabs(v70) > v34)
              {
                if (v65) {
                  DisjointSet::Unite((DisjointSet *)&v161, v68, v65);
                }
                else {
                  unsigned int v65 = v68;
                }
              }
            }
          }
          uint64_t v71 = (unsigned __int16)v158[v66];
          if (v65 != v71)
          {
            if (v158[v66])
            {
              uint64_t v72 = 0;
              double v73 = 0.0;
              do
              {
                double v73 = v73 + *(double *)(v58 + v72) * *(double *)(v59 + v72);
                v72 += 8;
              }
              while (v72 != 24);
              if (fabs(v73) > v34)
              {
                if (v65) {
                  DisjointSet::Unite((DisjointSet *)&v161, v71, v65);
                }
                else {
                  unsigned int v65 = (unsigned __int16)v158[v66];
                }
              }
            }
          }
          uint64_t v74 = (unsigned __int16)v158[v66 + 1];
          if (v65 != v74)
          {
            if (v158[v66 + 1])
            {
              uint64_t v75 = 0;
              double v76 = 0.0;
              do
              {
                double v76 = v76 + *(double *)(v58 + v75) * *(double *)(v57 + v75);
                v75 += 8;
              }
              while (v75 != 24);
              if (fabs(v76) > v34)
              {
                if (v65)
                {
                  DisjointSet::Unite((DisjointSet *)&v161, v74, v65);
                  goto LABEL_108;
                }
                unsigned int v65 = (unsigned __int16)v158[v66 + 1];
              }
            }
          }
          if (v65)
          {
LABEL_108:
            int v31 = v158;
            v158[v153] = v65;
          }
          else
          {
            int v77 = *(_DWORD *)v162;
            if (v152 <= 65531)
            {
              uint64_t v30 = v156;
              int v31 = v158;
              int v50 = v157;
              int v56 = v154;
              if (*(_DWORD *)v162 >= v161) {
                __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
              }
              v163[*(unsigned int *)v162] = v162[0];
              *(_DWORD *)char v162 = v77 + 1;
              v158[v153] = v77;
              ++v152;
              goto LABEL_114;
            }
            int v31 = v158;
            v158[v153] = v162[0] - 1;
          }
          uint64_t v30 = v156;
          int v50 = v157;
          int v56 = v154;
          goto LABEL_114;
        }
        int v50 = v33;
LABEL_115:
        uint64_t v78 = 0;
        uint64_t v79 = v49;
        uint64_t v80 = v30 + 24 * v49;
        do
        {
          double v81 = *(double *)(v80 + v78);
          BOOL v82 = v81 == 0.0 || v78 == 16;
          v78 += 8;
        }
        while (!v82);
        if (v81 != 0.0)
        {
          int v83 = v79 - v155;
          int v84 = v79 - v155 - 1;
          if (v31[v84])
          {
            uint64_t v85 = 0;
            uint64_t v86 = v30 + 24 * (int)v79;
            uint64_t v87 = v30 + 24 * v84;
            double v88 = 0.0;
            do
            {
              double v88 = v88 + *(double *)(v86 + v85) * *(double *)(v87 + v85);
              v85 += 8;
            }
            while (v85 != 24);
            int v89 = v50;
            if (fabs(v88) > v34)
            {
              unsigned int v90 = (unsigned __int16)v31[v84];
LABEL_130:
              uint64_t v91 = (unsigned __int16)v158[v83];
              if (v90 != v91)
              {
                if (v158[v83])
                {
                  uint64_t v92 = 0;
                  double v93 = 0.0;
                  do
                  {
                    double v93 = v93 + *(double *)(v156 + 24 * (int)v79 + v92) * *(double *)(v156 + 24 * v83 + v92);
                    v92 += 8;
                  }
                  while (v92 != 24);
                  if (fabs(v93) > v34)
                  {
                    if (v90)
                    {
                      DisjointSet::Unite((DisjointSet *)&v161, v91, v90);
                      goto LABEL_139;
                    }
                    unsigned int v90 = (unsigned __int16)v158[v83];
                  }
                }
              }
              if (v90)
              {
LABEL_139:
                int v31 = v158;
                v158[v79] = v90;
              }
              else
              {
                int v94 = *(_DWORD *)v162;
                if (v152 <= 65531)
                {
                  uint64_t v30 = v156;
                  int v31 = v158;
                  if (*(_DWORD *)v162 >= v161) {
                    __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
                  }
                  int v50 = v89;
                  v163[*(unsigned int *)v162] = v162[0];
                  *(_DWORD *)char v162 = v94 + 1;
                  v158[v79] = v94;
                  ++v152;
                  goto LABEL_145;
                }
                int v31 = v158;
                v158[v79] = v162[0] - 1;
              }
              uint64_t v30 = v156;
              int v50 = v89;
              goto LABEL_145;
            }
          }
          else
          {
            int v89 = v50;
          }
          unsigned int v90 = 0;
          goto LABEL_130;
        }
        v31[v79] = 0;
LABEL_145:
        int v33 = v50 + 2;
        int v32 = v151 - 1;
      }
      while (v151 != 1);
    }
  }
LABEL_200:
  uint64_t v126 = DisjointSet::Compact((DisjointSet *)&v161, v162[0], 0);
  uint64_t v127 = *(_WORD **)(v148 + 8);
  int v128 = v149 * v155;
  if (a4)
  {
    std::vector<ImageUtils::Blob>::resize(a4, (v126 - 1));
    uint64_t v129 = a4;
    if (v128)
    {
      for (int i = 0; i != v128; ++i)
      {
        uint64_t v131 = (unsigned __int16)v163[(unsigned __int16)*v127];
        *uint64_t v127 = v131;
        if (v131)
        {
          unint64_t v132 = (v131 - 1);
          if (0xAAAAAAAAAAAAAAABLL * ((v129[1] - *v129) >> 3) <= v132) {
            std::vector<ImageUtils::Blob>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v133 = *v129 + 24 * v132;
          uint64_t v134 = *(_DWORD **)(v133 + 8);
          unint64_t v135 = *(void *)(v133 + 16);
          if ((unint64_t)v134 >= v135)
          {
            CFStringRef v137 = *(_DWORD **)v133;
            uint64_t v138 = ((uint64_t)v134 - *(void *)v133) >> 2;
            unint64_t v139 = v138 + 1;
            if ((unint64_t)(v138 + 1) >> 62) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v140 = v135 - (void)v137;
            if (v140 >> 1 > v139) {
              unint64_t v139 = v140 >> 1;
            }
            if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v141 = v139;
            }
            if (v141)
            {
              uint64_t v142 = (char *)std::allocator<unsigned int>::allocate_at_least[abi:ne180100](v133 + 16, v141);
              CFStringRef v137 = *(_DWORD **)v133;
              uint64_t v134 = *(_DWORD **)(v133 + 8);
            }
            else
            {
              uint64_t v142 = 0;
            }
            uint64_t v143 = &v142[4 * v138];
            *(_DWORD *)uint64_t v143 = i;
            CFStringRef v136 = v143 + 4;
            while (v134 != v137)
            {
              int v144 = *--v134;
              *((_DWORD *)v143 - 1) = v144;
              v143 -= 4;
            }
            *(void *)uint64_t v133 = v143;
            *(void *)(v133 + 8) = v136;
            *(void *)(v133 + 16) = &v142[4 * v141];
            if (v137) {
              operator delete(v137);
            }
            uint64_t v129 = a4;
          }
          else
          {
            *uint64_t v134 = i;
            CFStringRef v136 = v134 + 1;
          }
          *(void *)(v133 + 8) = v136;
        }
        ++v127;
      }
    }
  }
  else if (v128 >= 1)
  {
    uint64_t v145 = v163;
    unsigned int v146 = v128 + 1;
    do
    {
      *uint64_t v127 = v145[(unsigned __int16)*v127];
      ++v127;
      --v146;
    }
    while (v146 > 1);
  }
  DisjointSet::~DisjointSet((DisjointSet *)&v161);
  return v126;
}

void sub_246899124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void *std::vector<ImageUtils::Blob>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  int v9 = (void *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      int v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        *int v9 = 0;
        v9[1] = 0;
        xpc_object_t v9[2] = 0;
        uint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      int v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v21 = result;
    if (v13) {
      BOOL v14 = (char *)std::allocator<ImageUtils::Blob>::allocate_at_least[abi:ne180100]((uint64_t)result, v13);
    }
    else {
      BOOL v14 = 0;
    }
    int v17 = v14;
    int v18 = &v14[24 * v10];
    uint64_t v19 = v18;
    int v20 = &v14[24 * v13];
    std::__split_buffer<ImageUtils::Blob>::__construct_at_end(&v17, a2, a3);
    std::vector<ImageUtils::Blob>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<ImageUtils::Blob>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_2468992C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ImageUtils::Blob>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<ImageUtils::Blob>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  unint64_t v4 = (void *)result[2];
  if (a2)
  {
    unint64_t v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      int v4[2] = 0;
      uint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    unint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_246899364(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ImageUtils::Blob>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ImageUtils::Blob>,std::reverse_iterator<ImageUtils::Blob*>,std::reverse_iterator<ImageUtils::Blob*>,std::reverse_iterator<ImageUtils::Blob*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_246899444(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<unsigned int>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<unsigned int>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2651E5968, MEMORY[0x263F8C060]);
}

void sub_246899504(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::allocator<unsigned int>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptiouint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *std::allocator<ImageUtils::Blob>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ImageUtils::Blob>,std::reverse_iterator<ImageUtils::Blob*>,std::reverse_iterator<ImageUtils::Blob*>,std::reverse_iterator<ImageUtils::Blob*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  _DWORD v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,std::reverse_iterator<ImageUtils::Blob*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,std::reverse_iterator<ImageUtils::Blob*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,std::reverse_iterator<ImageUtils::Blob*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,std::reverse_iterator<ImageUtils::Blob*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<ImageUtils::Blob>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<ImageUtils::Blob>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<ImageUtils::Blob>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2651E5970, MEMORY[0x263F8C068]);
}

void sub_246899818(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t DisjointSet::SetRoot(uint64_t this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(void *)(this + 8);
  uint64_t v5 = (_WORD *)(v4 + 2 * a2);
  unint64_t v6 = (unsigned __int16)*v5;
  if (v6 < a2)
  {
    do
    {
      if (v3 < a3) {
        DisjointSet::SetRoot();
      }
      unint64_t v3 = v6;
      _WORD *v5 = a3;
      uint64_t v5 = (_WORD *)(v4 + 2 * v6);
      unint64_t v6 = (unsigned __int16)*v5;
    }
    while (v3 > v6);
  }
  if (v3 < a3) {
    DisjointSet::SetRoot();
  }
  _WORD *v5 = a3;
  return this;
}

void std::vector<ImageUtils::Blob>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::allocator<ImageUtils::Blob>::allocate_at_least[abi:ne180100](v4, v11);
    }
    else {
      char v12 = 0;
    }
    int v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    int v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    int v17 = &v16[v14];
    std::vector<ImageUtils::Blob>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<ImageUtils::Blob>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_246899A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ImageUtils::Blob>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Matrix<unsigned short>::~Matrix(uint64_t a1)
{
  Matrix<unsigned short>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

uint64_t Matrix<unsigned short>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEAF80;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x24C53D6C0]();
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void Matrix<BOOL>::~Matrix(uint64_t a1)
{
  Matrix<BOOL>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

uint64_t Matrix<BOOL>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEAFB0;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x24C53D6C0]();
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t CalculateWeightsForScale<double>(uint64_t result, int a2, int *a3, _DWORD *a4, double a5, double a6, double a7)
{
  int v7 = vcvtmd_s64_f64(a6 + a5 * -0.5);
  int v8 = v7;
  int v9 = v7 + a2;
  double v10 = (a6 - (double)v7) * a7;
  double v11 = fabs(v10);
  double v12 = v10 * v10;
  double v13 = v10 * v10 * v11;
  double v14 = 1.0;
  if (v11 <= 1.0)
  {
    double v15 = v12 * -2.5 + v13 * 1.5;
LABEL_5:
    double v16 = v15 + v14;
    if (v16 != 0.0) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  double v14 = 2.0;
  if (v11 <= 2.0)
  {
    double v15 = v12 * 2.5 + v13 * -0.5 + v11 * -4.0;
    goto LABEL_5;
  }
  do
  {
LABEL_6:
    double v17 = (a6 - (double)++v8) * a7;
    double v18 = fabs(v17);
    double v19 = v17 * v17;
    double v20 = v17 * v17 * v18;
    if (v18 <= 1.0)
    {
      double v16 = v19 * -2.5 + v20 * 1.5 + 1.0;
    }
    else
    {
      double v16 = 0.0;
      if (v18 <= 2.0) {
        double v16 = v19 * 2.5 + v20 * -0.5 + v18 * -4.0 + 2.0;
      }
    }
  }
  while (v16 == 0.0);
LABEL_11:
  uint64_t v21 = *(double **)(result + 8);
  *uint64_t v21 = v16;
  int v22 = v21 + 1;
  if (v8 < v9)
  {
    int v23 = v8;
    do
    {
      double v24 = (a6 - (double)++v23) * a7;
      double v25 = fabs(v24);
      double v26 = v24 * v24;
      double v27 = v24 * v24 * v25;
      if (v25 <= 1.0)
      {
        double v28 = v26 * -2.5 + v27 * 1.5 + 1.0;
      }
      else
      {
        double v28 = 0.0;
        if (v25 <= 2.0) {
          double v28 = v26 * 2.5 + v27 * -0.5 + v25 * -4.0 + 2.0;
        }
      }
      *v22++ = v28;
      double v16 = v16 + v28;
    }
    while (v9 != v23);
  }
  uint64_t v29 = 0;
  uint64_t v30 = v22 - 1;
  do
    double v31 = v30[v29--];
  while (v31 == 0.0);
  int v32 = v7 + a2;
  int v33 = v32 - v8 + v29;
  int v34 = v32 + 1 + v29;
  int v35 = v33 + 2;
  if (v35)
  {
    double v36 = *(double **)(result + 8);
    BOOL v37 = &v36[v35];
    do
    {
      *double v36 = *v36 / v16;
      ++v36;
    }
    while (v36 < v37);
  }
  *a3 = v8;
  *a4 = v34;
  return result;
}

void Matrix<float>::~Matrix(uint64_t a1)
{
  Matrix<float>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

uint64_t Matrix<float>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEAFE0;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x24C53D6C0]();
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t Matrix<float>::Resize(uint64_t result, int a2, int a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 16) != a2 || *(_DWORD *)(result + 20) != a3)
  {
    if (*(void *)(result + 8))
    {
      if (*(unsigned char *)(result + 24)) {
        MEMORY[0x24C53D6C0]();
      }
    }
    *(_DWORD *)(v5 + 16) = a2;
    *(_DWORD *)(v5 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a3;
    operator new[]();
  }
  return result;
}

uint64_t GMC_EssentialMatrix(double *a1, double *a2, uint64_t a3)
{
  double v3 = a2[3];
  double v49 = a2[2] / v3;
  double v4 = a2[1];
  *(double *)&v50[1] = *a2 / v3;
  *(double *)&v51[1] = v49;
  *(double *)&v51[2] = v4 / v3;
  double v5 = a2[9];
  double v6 = a2[10];
  double v7 = a2[8];
  v48[2] = a2[7] / v6;
  v50[0] = 0;
  v51[0] = 0;
  v51[3] = 0;
  v51[4] = 0;
  v51[5] = 0x3FF0000000000000;
  v48[0] = v5 / v6;
  v48[1] = 0.0;
  v48[3] = 0.0;
  v48[4] = v5 / v6;
  v48[5] = v7 / v6;
  int v8 = v50;
  int v9 = v51;
  v48[6] = 0.0;
  v48[7] = 0.0;
  v48[8] = 1.0;
  for (uint64_t i = 1; i != 3; ++i)
  {
    uint64_t v11 = 0;
    double v12 = v8;
    do
    {
      uint64_t v13 = v9[v11];
      v9[v11] = *v12;
      *double v12 = v13;
      v12 += 3;
      ++v11;
    }
    while (i != v11);
    ++v8;
    v9 += 3;
  }
  uint64_t v14 = 0;
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  double v15 = &v49;
  do
  {
    uint64_t v16 = 0;
    double v17 = a1;
    do
    {
      uint64_t v18 = 0;
      double v19 = 0.0;
      double v20 = v17;
      do
      {
        double v21 = *v20;
        v20 += 3;
        double v19 = v19 + v15[v18++] * v21;
      }
      while (v18 != 3);
      *((double *)v41 + 3 * v14 + v16++) = v19;
      ++v17;
    }
    while (v16 != 3);
    ++v14;
    v15 += 3;
  }
  while (v14 != 3);
  uint64_t v22 = 0;
  uint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  int v23 = v41;
  do
  {
    uint64_t v24 = 0;
    double v25 = v48;
    do
    {
      uint64_t v26 = 0;
      double v27 = 0.0;
      double v28 = v25;
      do
      {
        double v29 = *v28;
        v28 += 3;
        double v27 = v27 + *(double *)((char *)v23 + v26) * v29;
        v26 += 8;
      }
      while (v26 != 24);
      *((double *)&v43 + 3 * v22 + v24++) = v27;
      ++v25;
    }
    while (v24 != 3);
    ++v22;
    int v23 = (_OWORD *)((char *)v23 + 24);
  }
  while (v22 != 3);
  long long v30 = v46;
  *(_OWORD *)(a3 + 32) = v45;
  *(_OWORD *)(a3 + 48) = v30;
  *(void *)(a3 + 64) = v47;
  long long v31 = v44;
  *(_OWORD *)a3 = v43;
  *(_OWORD *)(a3 + 16) = v31;
  int v32 = (void *)(a3 + 8);
  uint64_t v33 = a3 + 24;
  for (uint64_t j = 1; j != 3; ++j)
  {
    uint64_t v35 = 0;
    double v36 = v32;
    do
    {
      uint64_t v37 = *(void *)(v33 + 8 * v35);
      *(void *)(v33 + 8 * v35) = *v36;
      *double v36 = v37;
      v36 += 3;
      ++v35;
    }
    while (j != v35);
    ++v32;
    v33 += 24;
  }
  for (uint64_t k = 0; k != 3; ++k)
  {
    for (uint64_t m = 0; m != 24; m += 8)
      *(double *)(a3 + m) = -*(double *)(a3 + m);
    a3 += 24;
  }
  return 0;
}

void H16ISP::H16ISPGraphExclaveEyeReliefNode::H16ISPGraphExclaveEyeReliefNode(H16ISP::H16ISPGraphExclaveEyeReliefNode *this, H16ISP::H16ISPDevice *a2, int a3)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 20);
  *(void *)uint64_t v5 = &unk_26FAEB010;
  *(unsigned char *)(v5 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(v5 + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

{
  uint64_t v5;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 20);
  *(void *)uint64_t v5 = &unk_26FAEB010;
  *(unsigned char *)(v5 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(void *)(v5 + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

void H16ISP::H16ISPGraphExclaveEyeReliefNode::~H16ISPGraphExclaveEyeReliefNode(H16ISP::H16ISPGraphExclaveEyeReliefNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPGraphExclaveEyeReliefNode::onActivate(H16ISP::H16ISPGraphExclaveEyeReliefNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)double v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_INFO, "[Exclaves] H16ISPGraphEyeReliefNode::onActivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveEyeReliefNode::onDeactivate(H16ISP::H16ISPGraphExclaveEyeReliefNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)double v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_INFO, "[Exclaves] H16ISPGraphEyeReliefNode::onDeactivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveEyeReliefNode::onMessageProcessing(H16ISP::H16ISPDevice **this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 9) & (1 << H16ISP::H16ISPFilterGraphNode::GetType((H16ISP::H16ISPFilterGraphNode *)this));
  *((unsigned char *)this + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v4 != 0;
  if (v4)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
    int v5 = *((_DWORD *)a2 + 90);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(this[11]))
    {
      double v6 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        double v6 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v6;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *((_DWORD *)this + 24);
        *(_DWORD *)int buf = 136315650;
        *(void *)double v25 = "onMessageProcessing";
        *(_WORD *)&v25[8] = 1024;
        *(_DWORD *)&v25[10] = v5;
        __int16 v26 = 1024;
        int v27 = v7;
        _os_log_impl(&dword_24680F000, v6, OS_LOG_TYPE_DEFAULT, "[Exclaves] H16ISPGraphExclaveEyeReliefNode::%s RunKit ER reqid 0x%08X camChan %d\n", buf, 0x18u);
      }
    }
    v23[0] = *((_DWORD *)this + 24);
    v23[1] = 3;
    uint64_t v8 = *((void *)this[11] + 17);
    if (v8)
    {
      kdebug_trace();
      int v9 = ispirexclavekitmodule_ispirexclavekit_sendcmdchrunkiter(v8, (uint64_t)v23);
      kdebug_trace();
      if (v9) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v22[0] == 0;
      }
      if (!v10)
      {
        if (H16ISP::H16ISPDevice::enabledExclaveDebug(this[11]))
        {
          uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
          {
            uint64_t v16 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v16;
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 67109632;
            *(_DWORD *)double v25 = v23[0];
            *(_WORD *)&v25[4] = 2048;
            *(double *)&v25[6] = v21;
            __int16 v26 = 1024;
            int v27 = v20;
            _os_log_impl(&dword_24680F000, v16, OS_LOG_TYPE_DEFAULT, "[Exclaves]: IR Eye Relief IDL Success: channel=%u dist %f status %d\n", buf, 0x18u);
          }
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (Mutable)
        {
          uint64_t v18 = Mutable;
          setValueCFDict<int>(Mutable, (const void *)*MEMORY[0x263F2E200], v20);
          if (v20 == 1) {
            setValueCFDict<float>(v18, (const void *)*MEMORY[0x263F2E1F8], v21);
          }
          pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
          CFDictionarySetValue(*((CFMutableDictionaryRef *)a2 + 46), (const void *)*MEMORY[0x263F2CD78], v18);
          pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
          CFRelease(v18);
        }
        return 0;
      }
      uint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v11 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v11;
      }
      uint64_t v12 = 3758097130;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphExclaveEyeReliefNode::onMessageProcessing(v22, v5, v11);
      }
    }
    else
    {
      uint64_t v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v14 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v14;
      }
      uint64_t v12 = 3758097130;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphExclaveEyeReliefNode::onMessageProcessing(v14);
      }
    }
  }
  else
  {
    uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v13 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v13;
    }
    uint64_t v12 = 0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315138;
      *(void *)double v25 = "onMessageProcessing";
      _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "[Exclaves] H16ISPGraphExclaveEyeReliefNode::%s Skipped processing secure eye relief algorithm\n", buf, 0xCu);
      return 0;
    }
  }
  return v12;
}

uint64_t H16ISP::H16ISPGraphExclaveEyeReliefNode::GetNodeProcessingState(H16ISP::H16ISPGraphExclaveEyeReliefNode *this)
{
  return *((unsigned __int8 *)this + 80);
}

void setValueCFDict<int>(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void vDSPMtranspose<float>(const float *a1, int a2, float *a3, int a4, int a5, int a6)
{
}

void vDSPMtranspose<double>(const double *a1, int a2, double *a3, int a4, int a5, int a6)
{
}

void vDSPVfill<float>(const float *a1, float *a2, int a3, int a4)
{
}

void vDSPVfill<double>(const double *a1, double *a2, int a3, int a4)
{
}

void vDSPVfill<int>(const int *a1, int *a2, int a3, int a4)
{
}

void vDSPMinv<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPMinv<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPMax<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPMax<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPSve<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPSve<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPVsq<float>(const float *a1, int a2, float *a3, int a4, int a5)
{
}

void vDSPVsq<double>(const double *a1, int a2, double *a3, int a4, int a5)
{
}

void vDSPVmul<float,float>(const float *a1, int a2, const float *a3, int a4, float *a5, int a6, int a7)
{
}

void vDSPVmul<double,double>(const double *a1, int a2, const double *a3, int a4, double *a5, int a6, int a7)
{
}

void vDSPVsmul<float>(const float *a1, int a2, const float *a3, float *a4, int a5, int a6)
{
}

void vDSPVsmul<double>(const double *a1, int a2, const double *a3, double *a4, int a5, int a6)
{
}

void vDSPVsadd<float>(const float *a1, int a2, const float *a3, float *a4, int a5, int a6)
{
}

void vDSPVsadd<double>(const double *a1, int a2, const double *a3, double *a4, int a5, int a6)
{
}

void vDSPVsadd<int>(const int *a1, int a2, const int *a3, int *a4, int a5, int a6)
{
}

void vDSPMmul<float>(const float *a1, int a2, const float *a3, int a4, float *a5, int a6, int a7, int a8, vDSP_Length a9)
{
}

void vDSPMmul<double>(const double *a1, int a2, const double *a3, int a4, double *a5, int a6, int a7, int a8, vDSP_Length a9)
{
}

void vDSPVsdiv<float>(const float *a1, int a2, const float *a3, float *a4, int a5, int a6)
{
}

void vDSPVsdiv<double>(const double *a1, int a2, const double *a3, double *a4, int a5, int a6)
{
}

void vDSPVsdiv<int>(const int *a1, int a2, const int *a3, int *a4, int a5, int a6)
{
}

void vDSPVsort<float>(float *a1, int a2, int a3)
{
}

void vDSPVsort<double>(double *a1, int a2, int a3)
{
}

void vDSPVdiv<float>(const float *__A, int a2, const float *__B, int a4, float *a5, int a6, int a7)
{
}

void vDSPVdiv<double>(const double *__A, int a2, const double *__B, int a4, double *a5, int a6, int a7)
{
}

void vDSPVdiv<int>(int *__A, int a2, int *__B, int a4, int *a5, int a6, int a7)
{
}

void vDSPSvdiv<float>(const float *a1, const float *a2, uint64_t a3, float *a4, int a5, int a6)
{
}

void vDSPSvdiv<double>(const double *a1, const double *a2, uint64_t a3, double *a4, int a5, int a6)
{
}

void vDSPVadd<float>(const float *a1, int a2, const float *a3, int a4, float *a5, int a6, int a7)
{
}

void vDSPVadd<double>(const double *a1, int a2, const double *a3, int a4, double *a5, int a6, int a7)
{
}

void vDSPVadd<int>(const int *a1, int a2, const int *a3, int a4, int *a5, int a6, int a7)
{
}

void vDSPVsub<float>(const float *__A, int a2, const float *__B, int a4, float *a5, int a6, int a7)
{
}

void vDSPVsub<double>(const double *__A, int a2, const double *__B, int a4, double *a5, int a6, int a7)
{
}

void vDSPSvesq<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPSvesq<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPMmov<float>(const float *a1, float *a2, int a3, int a4, int a5, int a6)
{
}

void vDSPMmov<double>(const double *a1, double *a2, int a3, int a4, int a5, int a6)
{
}

void vDSPVsma<float>(const float *a1, int a2, const float *a3, const float *a4, int a5, float *a6, int a7, int a8)
{
}

void vDSPVsma<double>(const double *a1, int a2, const double *a3, const double *a4, int a5, double *a6, int a7, int a8)
{
}

void vDSPMeanv<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPMeanv<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPVabs<float>(const float *a1, int a2, float *a3, int a4, int a5)
{
}

void vDSPVabs<double>(const double *a1, int a2, double *a3, int a4, int a5)
{
}

void vDSPVabs<int>(const int *a1, int a2, int *a3, int a4, int a5)
{
}

void vDSPVramp<float>(const float *a1, const float *a2, float *a3, int a4, int a5)
{
}

void vDSPVramp<double>(const double *a1, const double *a2, double *a3, int a4, int a5)
{
}

void vDSPImgfir<float>(const float *a1, int a2, int a3, const float *a4, float *a5, int a6, int a7)
{
}

void vDSPImgfir<double>(const double *a1, int a2, int a3, const double *a4, double *a5, int a6, int a7)
{
}

double H16ISP::H16ISPFusionNode::H16ISPFusionNode(H16ISP::H16ISPFusionNode *this, H16ISP::H16ISPDevice *a2, __int16 a3, __int16 a4)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 5);
  *(void *)uint64_t v7 = &unk_26FAEB088;
  *(void *)(v7 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  *(_WORD *)(v7 + 88) = a3;
  *(_WORD *)(v7 + 9pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a4;
  *(_DWORD *)(v7 + 92) = 0;
  *(unsigned char *)(v7 + 96) = 0;
  double result = 3.53369413e72;
  *(_OWORD *)(v7 + 10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = xmmword_2469D2940;
  *(_DWORD *)(v7 + 116) = 0;
  return result;
}

{
  uint64_t v7;
  double result;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 5);
  *(void *)uint64_t v7 = &unk_26FAEB088;
  *(void *)(v7 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  *(_WORD *)(v7 + 88) = a3;
  *(_WORD *)(v7 + 9pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a4;
  *(_DWORD *)(v7 + 92) = 0;
  *(unsigned char *)(v7 + 96) = 0;
  double result = 3.53369413e72;
  *(_OWORD *)(v7 + 10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = xmmword_2469D2940;
  *(_DWORD *)(v7 + 116) = 0;
  return result;
}

void H16ISP::H16ISPFusionNode::~H16ISPFusionNode(H16ISP::H16ISPFusionNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPFusionNode::onDeactivate(H16ISP::H16ISPFusionNode *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPFusionNode::onMessageProcessing(H16ISP::H16ISPFusionNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v4 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  uint64_t v5 = 0;
  double v6 = (char *)a2 + 80;
  uint64_t v7 = (_DWORD *)((char *)a2 + 96);
  unsigned int v8 = 0xFFFF;
  do
  {
    if (*v7 == *((unsigned __int16 *)this + 44)) {
      unsigned int v8 = v5;
    }
    ++v5;
    v7 += 78;
  }
  while (v5 != 3);
  if (v8 != 0xFFFF)
  {
    int v9 = *((_DWORD *)this + 23);
    if (v9)
    {
      if (v9 != 1) {
        goto LABEL_23;
      }
      if (!*((unsigned char *)this + 96))
      {
        uint64_t v10 = *(unsigned int *)&v6[312 * v8 + 20];
        if (v10)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          uint64_t v14 = (char *)a2 + 312 * v8 + 104;
          do
          {
            int v15 = *((_DWORD *)v14 + 2);
            switch(v15)
            {
              case 2:
                uint64_t v11 = *(__CVBuffer **)v14;
                break;
              case 21:
                uint64_t v12 = *(__CVBuffer **)v14;
                break;
              case 15:
                uint64_t v13 = *(__CVBuffer **)v14;
                break;
            }
            v14 += 16;
            --v10;
          }
          while (v10);
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v12 = 0;
          uint64_t v11 = 0;
        }
        H16ISP::H16ISPFusionNode::fuseDXBuffers((size_t)this, v13, v12, v11);
      }
    }
    H16ISP::H16ISPFilterGraphNode::RemoveFrame((uint64_t)this, (uint64_t)&v6[312 * v8], 21);
    if (v16) {
      CVPixelBufferRelease(v16);
    }
  }
LABEL_23:
  pthread_mutex_unlock(v4);
  return 0;
}

size_t H16ISP::H16ISPFusionNode::fuseDXBuffers(size_t this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, __CVBuffer *a4)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  if (pixelBuffer)
  {
    if (a3)
    {
      if (a4)
      {
        uint64_t v7 = (float *)this;
        size_t Width = CVPixelBufferGetWidth(pixelBuffer);
        this = CVPixelBufferGetWidth(a3);
        if (Width == this)
        {
          size_t Height = CVPixelBufferGetHeight(pixelBuffer);
          this = CVPixelBufferGetHeight(a3);
          if (Height == this)
          {
            size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
            this = CVPixelBufferGetBytesPerRow(a3);
            if (BytesPerRow == this)
            {
              uint64_t v75 = a3;
              double v82 = 1.0;
              double valuePtr = 0.0;
              double v70 = v7 + 25;
              uint64_t v72 = (unsigned int *)v7;
              if (v7[25] <= 0.0 && v7[26] >= 2147500000.0 && v7[27] >= 2147500000.0)
              {
                LOWORD(v15) = 0;
                unsigned int v14 = 0;
                unsigned int v78 = 0;
                unsigned int v12 = 0;
                BOOL v71 = 0;
              }
              else
              {
                H16ISP::H16ISPFrameMetadata::H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)__str, a4, 1uLL);
                BOOL v71 = v86 != 0;
                if (v86)
                {
                  double valuePtr = *(double *)(v86 + 348);
                  double v11 = *(double *)(v86 + 356);
                  unsigned int v12 = (int)((1000.0 / v7[25] - valuePtr) / v11);
                  unsigned int v78 = (int)((1000.0 / v7[26] - valuePtr) / v11);
                  float v13 = v7[28];
                  unsigned int v14 = (int)((1000.0 / v7[27] - valuePtr) / v11);
                  double v82 = v11;
                  int v15 = (int)((1000.0 / v13 - valuePtr) / v11);
                }
                else
                {
                  uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
                  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
                  {
                    uint64_t v16 = os_log_create("com.apple.isp", "general");
                    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v16;
                  }
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
                    H16ISP::H16ISPFusionNode::fuseDXBuffers(v16);
                  }
                  LOWORD(v15) = 0;
                  unsigned int v14 = 0;
                  unsigned int v78 = 0;
                  unsigned int v12 = 0;
                }
                H16ISP::H16ISPFrameMetadata::~H16ISPFrameMetadata((H16ISP::H16ISPFrameMetadata *)__str);
              }
              pixelBuffera = pixelBuffer;
              size_t v17 = CVPixelBufferGetWidth(pixelBuffer);
              size_t v18 = CVPixelBufferGetHeight(pixelBuffer);
              size_t v19 = CVPixelBufferGetBytesPerRow(pixelBuffer);
              CVPixelBufferLockBaseAddress(pixelBuffer, 0);
              CVPixelBufferLockBaseAddress(v75, 1uLL);
              BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
              float v21 = (char *)CVPixelBufferGetBaseAddress(v75);
              size_t v77 = v19 >> 1;
              unint64_t v22 = v72[29];
              if ((int)v22 <= 0)
              {
                int v24 = 0;
                ++H16ISP::H16ISPFusionNode::fuseDXBuffers(__CVBuffer *,__CVBuffer *,__CVBuffer *)::frameNum;
              }
              else if (H16ISP::H16ISPFusionNode::fuseDXBuffers(__CVBuffer *,__CVBuffer *,__CVBuffer *)::frameNum++ {
                      % v22)
              }
              {
                int v24 = 0;
              }
              else
              {
                time_t v79 = 0;
                setlocale(0, "");
                time(&v79);
                double v25 = localtime(&v79);
                strftime(v84, 0x14uLL, "%m%d%g_%H%M%S", v25);
                int v26 = snprintf(__str, 0x400uLL, "/var/mobile/Media/DCIM/%s-%05lu-", v84, H16ISP::H16ISPFusionNode::fuseDXBuffers(__CVBuffer *,__CVBuffer *,__CVBuffer *)::frameNum);
                OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffera);
                char v81 = 0;
                uint64_t v69 = &__str[v26];
                snprintf(v69, 0x400uLL, "dx.%lux%lu.%s", v17, v18, (const char *)&PixelFormatType);
                int v27 = fopen(__str, "wb");
                if (v27)
                {
                  if (v18)
                  {
                    uint64_t v28 = BaseAddress;
                    size_t v29 = v18;
                    do
                    {
                      fwrite(v28, 2 * v17, 1uLL, v27);
                      v28 += 2 * v77;
                      --v29;
                    }
                    while (v29);
                  }
                  fclose(v27);
                }
                snprintf(v69, 0x400uLL, "dx2.%lux%lu.%s", v17, v18, (const char *)&PixelFormatType);
                __CGSize size = fopen(__str, "wb");
                if (__size)
                {
                  if (v18)
                  {
                    long long v30 = v21;
                    size_t v31 = v18;
                    do
                    {
                      fwrite(v30, 2 * v17, 1uLL, __size);
                      v30 += 2 * v77;
                      --v31;
                    }
                    while (v31);
                  }
                  fclose(__size);
                }
                CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                CFNumberRef v34 = CFNumberCreate(v32, kCFNumberFloat64Type, &valuePtr);
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C7E8], v34);
                CFRelease(v34);
                CFNumberRef v35 = CFNumberCreate(v32, kCFNumberFloat64Type, &v82);
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F2C7E0], v35);
                CFRelease(v35);
                CFNumberRef v36 = CFNumberCreate(v32, kCFNumberFloat32Type, v70);
                CFDictionarySetValue(Mutable, @"FusionMinDepthThreshold", v36);
                CFRelease(v36);
                CFNumberRef v37 = CFNumberCreate(v32, kCFNumberFloat32Type, v72 + 26);
                CFDictionarySetValue(Mutable, @"FusionMaxDepthThreshold", v37);
                CFRelease(v37);
                CFNumberRef v38 = CFNumberCreate(v32, kCFNumberFloat32Type, v72 + 28);
                CFDictionarySetValue(Mutable, @"FusionFixedDepthValue", v38);
                CFRelease(v38);
                CFNumberRef v39 = CFNumberCreate(v32, kCFNumberFloat32Type, v72 + 27);
                CFDictionarySetValue(Mutable, @"FusionFixedDepthThreshold", v39);
                CFRelease(v39);
                strcpy(v69, "params.plist");
                CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
                CFStringRef __sizea = CFStringCreateWithCString(v32, __str, SystemEncoding);
                CFURLRef v41 = CFURLCreateWithFileSystemPath(v32, __sizea, kCFURLPOSIXPathStyle, 0);
                uint64_t v42 = CFWriteStreamCreateWithFile(v32, v41);
                CFWriteStreamOpen(v42);
                CFPropertyListWrite(Mutable, v42, kCFPropertyListXMLFormat_v1_0, 0, 0);
                CFWriteStreamClose(v42);
                CFRelease(v42);
                CFRelease(v41);
                CFRelease(__sizea);
                *uint64_t v69 = 0;
                int v24 = 1;
              }
              if (v71)
              {
                if (v82 <= 0.0)
                {
                  if (v18)
                  {
                    for (uint64_t i = 0; i != v18; ++i)
                    {
                      if (v17)
                      {
                        uint64_t v57 = &v21[2 * i * v77];
                        uint64_t v58 = &BaseAddress[2 * i * v77];
                        size_t v59 = v17;
                        do
                        {
                          if (*(_WORD *)v58 == 0x1FFF)
                          {
                            unsigned int v60 = *(unsigned __int16 *)v57;
                            BOOL v61 = v60 != 0x1FFF && v60 > v14;
                            __int16 v62 = v15;
                            if (v61 || (v60 >= v12 ? (v63 = v60 > v78) : (v63 = 1), __int16 v62 = *(_WORD *)v57, !v63)) {
                              *(_WORD *)uint64_t v58 = v62;
                            }
                          }
                          v58 += 2;
                          v57 += 2;
                          --v59;
                        }
                        while (v59);
                      }
                    }
                  }
                }
                else if (v18)
                {
                  for (uint64_t j = 0; j != v18; ++j)
                  {
                    if (v17)
                    {
                      long long v44 = &v21[2 * j * v77];
                      long long v45 = &BaseAddress[2 * j * v77];
                      size_t v46 = v17;
                      do
                      {
                        if (*(_WORD *)v45 == 0x1FFF)
                        {
                          unsigned int v47 = *(unsigned __int16 *)v44;
                          BOOL v48 = v47 == 0x1FFF || v47 >= v14;
                          __int16 v49 = v15;
                          if (!v48 || (v47 <= v12 ? (v50 = v47 >= v78) : (v50 = 0), __int16 v49 = *(_WORD *)v44, v50)) {
                            *(_WORD *)long long v45 = v49;
                          }
                        }
                        v45 += 2;
                        v44 += 2;
                        --v46;
                      }
                      while (v46);
                    }
                  }
                }
              }
              else if (v18)
              {
                uint64_t v51 = 0;
                uint64_t v52 = 2 * v77;
                v53.i64[0] = 0xE000E000E000E000;
                v53.i64[1] = 0xE000E000E000E000;
                do
                {
                  if (v17)
                  {
                    uint64_t v54 = 0;
                    for (size_t k = 0; k < v17; k += 8)
                    {
                      *(int8x16_t *)&BaseAddress[v54] = vbslq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&BaseAddress[v54], v53), *(int8x16_t *)&v21[v54], *(int8x16_t *)&BaseAddress[v54]);
                      v54 += 16;
                    }
                  }
                  ++v51;
                  v21 += v52;
                  BaseAddress += v52;
                }
                while (v51 != v18);
              }
              if (v24)
              {
                size_t v64 = strlen(__str);
                snprintf(&__str[v64], 0x400uLL, "fusedDx.%lux%lu.%s", v17, v18, (const char *)&PixelFormatType);
                unsigned int v65 = fopen(__str, "wb");
                if (v65)
                {
                  unsigned int v66 = (char *)CVPixelBufferGetBaseAddress(pixelBuffera);
                  if (v18)
                  {
                    int v67 = v66;
                    size_t v68 = 2 * v17;
                    do
                    {
                      fwrite(v67, v68, 1uLL, v65);
                      v67 += 2 * v77;
                      --v18;
                    }
                    while (v18);
                  }
                  fclose(v65);
                }
              }
              CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
              return CVPixelBufferUnlockBaseAddress(v75, 1uLL);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t H16ISP::H16ISPFusionNode::SetDumpSkipRatio(uint64_t this, int a2)
{
  *(_DWORD *)(this + 116) = a2;
  return this;
}

uint64_t H16ISP::H16ISPFusionNode::SetFusionMode(H16ISP::H16ISPFusionNode *this, int a2, int a3)
{
  *((_DWORD *)this + 2mach_timebase_info(this + 3) = a2;
  *((unsigned char *)this + 96) = a3;
  if (a2 == 2)
  {
    int v5 = 1;
  }
  else
  {
    if (a2 != 1)
    {
      uint64_t result = H16ISP::H16ISPDevice::SetIrRgbStereo(*((H16ISP::H16ISPDevice **)this + 10), 0);
      if (!a2) {
        return result;
      }
      goto LABEL_9;
    }
    if (a3) {
      int v5 = 2;
    }
    else {
      int v5 = 1;
    }
  }
  H16ISP::H16ISPDevice::SetIrRgbStereo(*((H16ISP::H16ISPDevice **)this + 10), v5);
LABEL_9:
  uint64_t v7 = (H16ISP::H16ISPDevice *)*((void *)this + 10);
  __int16 v8 = *((_WORD *)this + 45);

  return H16ISP::H16ISPDevice::EnablePDEOutput(v7, v8, 1, 1);
}

float H16ISP::H16ISPFusionNode::SetFusionThresholds(float32x2_t *this, int a2, unsigned int a3, unsigned int a4, int a5)
{
  this[12].f32[1] = (float)a2;
  int8x8_t v5 = (int8x8_t)vceqz_s32((int32x2_t)__PAIR64__(a4, a3));
  this[13] = vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(void *)&v5 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8((int8x8_t)__PAIR64__(a4, a3), v5)));
  float result = (float)a5;
  this[14].f32[0] = (float)a5;
  return result;
}

uint64_t GMC_Homography(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0;
  double v5 = *(double *)(a3 + 16);
  double v6 = *(double *)(a3 + 24);
  double v7 = *(double *)(a3 + 8);
  v66[2] = *(double *)a3 / v6;
  v66[0] = v5 / v6;
  v66[1] = 0.0;
  v66[3] = 0.0;
  v66[4] = v5 / v6;
  v66[5] = v7 / v6;
  v66[6] = 0.0;
  v66[7] = 0.0;
  v66[8] = 1.0;
  long long v8 = *(_OWORD *)(a3 + 336);
  v64[2] = *(_OWORD *)(a3 + 320);
  v64[3] = v8;
  uint64_t v65 = *(void *)(a3 + 352);
  long long v9 = *(_OWORD *)(a3 + 304);
  v64[0] = *(_OWORD *)(a3 + 288);
  v64[1] = v9;
  memset(v63, 0, sizeof(v63));
  do
  {
    *(double *)&v63[v4] = *(double *)(a3 + v4 * 8 + 360) - *(double *)(a3 + v4 * 8 + 32);
    ++v4;
  }
  while (v4 != 3);
  uint64_t v10 = 0;
  uint64_t v62 = *(void *)(a3 + 504);
  long long v61 = *(_OWORD *)(a3 + 488);
  double v11 = *(double *)(a3 + 480);
  uint64_t v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  unsigned int v12 = &v54;
  float v13 = v64;
  do
  {
    uint64_t v14 = 0;
    int v15 = v12;
    do
    {
      *(void *)int v15 = *(void *)((char *)v13 + v14);
      int v15 = (long long *)((char *)v15 + 24);
      v14 += 8;
    }
    while (v14 != 24);
    ++v10;
    unsigned int v12 = (long long *)((char *)v12 + 8);
    float v13 = (_OWORD *)((char *)v13 + 24);
  }
  while (v10 != 3);
  uint64_t v16 = 0;
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  size_t v17 = v47;
  do
  {
    uint64_t v18 = 0;
    double v19 = *(double *)&v63[v16];
    do
    {
      *(double *)((char *)v17 + v18) = v19 * *(double *)((char *)&v61 + v18) + 0.0;
      v18 += 8;
    }
    while (v18 != 24);
    ++v16;
    size_t v17 = (_OWORD *)((char *)v17 + 24);
  }
  while (v16 != 3);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  *(_OWORD *)__src = 0u;
  long long v50 = 0u;
  do
  {
    for (uint64_t i = 0; i != 24; i += 8)
      *(double *)((char *)&__src[v20] + i) = *(double *)((char *)v47 + v20 * 8 + i) / v11;
    ++v21;
    v20 += 3;
  }
  while (v21 != 3);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v60 = 0;
  memset(v59, 0, sizeof(v59));
  do
  {
    for (uint64_t j = 0; j != 24; j += 8)
      *(double *)((char *)v59 + v23 * 8 + j) = *(double *)((char *)&v54 + v23 * 8 + j)
                                             - *(double *)((char *)&__src[v23] + j);
    ++v24;
    v23 += 3;
  }
  while (v24 != 3);
  uint64_t v26 = 0;
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  *(_OWORD *)__src = 0u;
  long long v50 = 0u;
  int v27 = v66;
  do
  {
    uint64_t v28 = 0;
    size_t v29 = v59;
    do
    {
      uint64_t v30 = 0;
      double v31 = 0.0;
      CFAllocatorRef v32 = (double *)v29;
      do
      {
        double v33 = *v32;
        v32 += 3;
        double v31 = v31 + v27[v30++] * v33;
      }
      while (v30 != 3);
      *((double *)&__src[3 * v26] + v28++) = v31;
      size_t v29 = (_OWORD *)((char *)v29 + 8);
    }
    while (v28 != 3);
    ++v26;
    v27 += 3;
  }
  while (v26 != 3);
  MatrixMxN<3u,3u,double>::Inverse<3u,void>((uint64_t)v66, (uint64_t)v47);
  uint64_t v34 = 0;
  uint64_t v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  CFNumberRef v35 = __src;
  do
  {
    uint64_t v36 = 0;
    CFNumberRef v37 = v47;
    do
    {
      uint64_t v38 = 0;
      double v39 = 0.0;
      uint64_t v40 = (double *)v37;
      do
      {
        double v41 = *v40;
        v40 += 3;
        double v39 = v39 + *(double *)&v35[v38++] * v41;
      }
      while (v38 != 3);
      *((double *)&v54 + 3 * v34 + v36++) = v39;
      CFNumberRef v37 = (_OWORD *)((char *)v37 + 8);
    }
    while (v36 != 3);
    ++v34;
    v35 += 3;
  }
  while (v34 != 3);
  MatrixMxN<3u,3u,double>::operator*<3u>((const double *)&v54, a2, (uint64_t)__src);
  Matrix<double>::Resize(a2, v50, SDWORD1(v50));
  memcpy(*(void **)(a2 + 8), __src[1], 8 * *(unsigned int *)(a2 + 16) * (unint64_t)*(unsigned int *)(a2 + 20));
  Matrix<double>::~Matrix((uint64_t)__src);
  uint64_t v42 = *(unsigned int *)(a2 + 20);
  if (v42)
  {
    if (*(_DWORD *)(a2 + 16) < 3u) {
      GMC_Homography();
    }
    uint64_t v43 = 0;
    uint64_t v44 = 8 * (2 * v42);
    uint64_t v45 = 8 * v42;
    do
    {
      *(double *)(*(void *)(a2 + 8) + v4mach_timebase_info(this + 3) = *(double *)(*(void *)(a2 + 8) + v43)
                                             / *(double *)(*(void *)(a2 + 8) + v43 + v44);
      *(double *)(*(void *)(a2 + 8) + v45 + v4mach_timebase_info(this + 3) = *(double *)(*(void *)(a2 + 8) + v45 + v43)
                                                   / *(double *)(*(void *)(a2 + 8) + v44 + v43);
      *(void *)(*(void *)(a2 + 8) + v44 + v4mach_timebase_info(this + 3) = 0x3FF0000000000000;
      v43 += 8;
    }
    while (v45 != v43);
  }
  return 0;
}

void sub_24689BB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MatrixMxN<3u,3u,double>::Inverse<3u,void>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  double v3 = 0.0;
  uint64_t v4 = 0xFFFFFFFF00000000;
  do
  {
    if (v2 == 2) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v2 + 1;
    }
    uint64_t v6 = v4 >> 32;
    if (!v2) {
      uint64_t v6 = 2;
    }
    double v3 = v3
       + *(double *)(result + 8 * v2)
       * (*(double *)(result + 24 + 8 * v5) * *(double *)(result + 48 + 8 * v6)
        - *(double *)(result + 24 + 8 * v6) * *(double *)(result + 48 + 8 * v5));
    v4 += 0x100000000;
    ++v2;
  }
  while (v2 != 3);
  unint64_t v7 = 0;
  do
  {
    uint64_t v8 = 0;
    if (v7 > 1) {
      int v9 = -2;
    }
    else {
      int v9 = 1;
    }
    unsigned int v10 = v7 + v9;
    unsigned int v11 = v7 - 1;
    if (v7++ == 0) {
      unsigned int v11 = 2;
    }
    uint64_t v13 = 0xFFFFFFFF00000000;
    uint64_t v14 = (double *)a2;
    do
    {
      if (v8 == 2) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v8 + 1;
      }
      uint64_t v16 = v8 + 1;
      uint64_t v17 = v13 >> 32;
      if (!v8) {
        uint64_t v17 = 2;
      }
      *uint64_t v14 = (*(double *)(result + 24 * v10 + 8 * v15) * *(double *)(result + 24 * v11 + 8 * v17)
            - *(double *)(result + 24 * v10 + 8 * v17) * *(double *)(result + 24 * v11 + 8 * v15))
           / v3;
      v14 += 3;
      v13 += 0x100000000;
      ++v8;
    }
    while (v16 != 3);
    a2 += 8;
  }
  while (v7 != 3);
  return result;
}

uint64_t MatrixMxN<3u,3u,double>::operator*<3u>@<X0>(const double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MatrixMxN<3u,3u,double>::operator*(a1, a2, (uint64_t)&v7);
  uint64_t v4 = v8;
  int v5 = v9;
  *(unsigned char *)(a3 + 24) = v10;
  uint64_t v8 = 0;
  char v10 = 0;
  *(void *)a3 = &unk_26FAEB100;
  *(void *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = 3;
  *(_DWORD *)(a3 + 2H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v5;
  return Matrix<double>::~Matrix((uint64_t)&v7);
}

void MatrixMxN<3u,3u,double>::operator*(const double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 16) == 3)
  {
    Matrix<double>::Matrix(a3, 3, *(_DWORD *)(a2 + 20));
    LODWORD(v6) = 3;
    vDSPMmul<double>(a1, 1, *(const double **)(a2 + 8), 1, *(double **)(a3 + 8), 1, 3, *(_DWORD *)(a2 + 20), v6);
  }
  else
  {
    *(void *)a3 = &unk_26FAEAF18;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
}

void sub_24689BDB8(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void MatrixNxPts<3u,double>::~MatrixNxPts(uint64_t a1)
{
  Matrix<double>::~Matrix(a1);

  JUMPOUT(0x24C53D6E0);
}

void H16ISP::H16ISPFrameReceiverBufferPool::~H16ISPFrameReceiverBufferPool(H16ISP::H16ISPFrameReceiverBufferPool *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 256);
  pthread_mutex_lock((pthread_mutex_t *)this + 4);
  *(unsigned char *)this = 0;
  CFArrayRef v3 = (const __CFArray *)*((void *)this + 19);
  if (v3)
  {
    unsigned int v4 = 0;
    unsigned int valuePtr = 0;
    while (1)
    {
      CFIndex Count = CFArrayGetCount(v3);
      CFArrayRef v6 = (const __CFArray *)*((void *)this + 19);
      if (Count <= v4) {
        break;
      }
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v4);
      if (ValueAtIndex)
      {
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        H16ISP::H16ISPDevice::ISP_ReleasePreMappedClientSurface(*((H16ISP::H16ISPDevice **)this + 1), valuePtr);
      }
      ++v4;
      CFArrayRef v3 = (const __CFArray *)*((void *)this + 19);
    }
    CFRelease(v6);
  }
  while (1)
  {
    uint64_t v8 = *((void *)this + 29);
    if (!v8) {
      break;
    }
    int v9 = *(__CVBuffer **)(*(void *)(*((void *)this + 25) + ((*((void *)this + 28) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (*((void *)this + 28) & 0x1FFLL));
    ++*((void *)this + 28);
    *((void *)this + 29) = v8 - 1;
    std::deque<__CVBuffer *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 192, 1);
    CVPixelBufferRelease(v9);
  }
  if (*((void *)this + 20))
  {
    kdebug_trace();
    CVPixelBufferPoolRelease(*((CVPixelBufferPoolRef *)this + 20));
    *((void *)this + 2H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
    kdebug_trace();
  }
  char v10 = (const void *)*((void *)this + 21);
  if (v10) {
    CFRelease(v10);
  }
  unsigned int v11 = (const void *)*((void *)this + 30);
  if (v11) {
    CFRelease(v11);
  }
  unsigned int v12 = (const void *)*((void *)this + 22);
  if (v12) {
    CFRelease(v12);
  }
  CVPixelBufferPoolRelease(*((CVPixelBufferPoolRef *)this + 23));
  *((void *)this + 2mach_timebase_info(this + 3) = 0;
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  *((_DWORD *)this + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)this + 24);
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::PreMapClientSurface(H16ISP::H16ISPDevice **this, unsigned int a2)
{
  unsigned int valuePtr = a2;
  uint64_t v3 = H16ISP::H16ISPDevice::ISP_PreMapClientSurface(this[1], a2);
  if (v3)
  {
    unsigned int v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      unsigned int v4 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiverBufferPool::PreMapClientSurface();
    }
    printf("H16ISPFrameReceiverBufferPool::%s - ISP_PreMapClientSurface failed: 0x%08X\n", "PreMapClientSurface", v3);
  }
  else if (this[19])
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
    CFArrayAppendValue(this[19], v5);
    CFRelease(v5);
  }
  return v3;
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::deactivatePool(H16ISP::H16ISPFrameReceiverBufferPool *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 256);
  pthread_mutex_lock((pthread_mutex_t *)this + 4);
  if (*((void *)this + 20))
  {
    *(unsigned char *)this = 0;
    kdebug_trace();
    CVPixelBufferPoolRelease(*((CVPixelBufferPoolRef *)this + 20));
    *((void *)this + 2H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
    *((_DWORD *)this + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
    bzero((char *)this + 336, 0x80uLL);
    kdebug_trace();
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 3758097122;
  }
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::updateTracking(H16ISP::H16ISPFrameReceiverBufferPool *this)
{
  return 0;
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::ModifyBufferCount(pthread_mutex_t *this, int a2)
{
  uint64_t v4 = 3758097085;
  CFNumberRef v5 = this + 4;
  pthread_mutex_lock(this + 4);
  if (*(void *)&this[2].__opaque[24])
  {
    if (a2 < 1)
    {
      uint64_t v4 = 3758097090;
    }
    else
    {
      kdebug_trace();
      if (*(void *)&this[2].__opaque[48] || !CVPixelBufferPoolSetMinBufferCount())
      {
        uint64_t v4 = 0;
        *(_DWORD *)&this[1].__opaque[28] = a2;
        *(_DWORD *)&this[1].__opaque[32] = a2;
        this[1].__opaque[52] = 1;
      }
      kdebug_trace();
    }
  }
  else
  {
    uint64_t v4 = 3758097086;
  }
  pthread_mutex_unlock(v5);
  return v4;
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::SetCapacity(pthread_mutex_t *this, int a2)
{
  uint64_t v4 = 3758097084;
  CFNumberRef v5 = this + 4;
  pthread_mutex_lock(this + 4);
  kdebug_trace();
  if (*(void *)&this[2].__opaque[24])
  {
    if (*(void *)&this[2].__opaque[48] || !CVPixelBufferPoolSetMinBufferCount())
    {
      uint64_t v4 = 0;
      *(_DWORD *)&this[1].__opaque[28] = a2;
      *(_DWORD *)&this[1].__opaque[32] = a2;
      this[1].__opaque[52] = 1;
    }
  }
  else
  {
    uint64_t v4 = 3758097131;
  }
  kdebug_trace();
  pthread_mutex_unlock(v5);
  return v4;
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::AddPendingStillImageBuffers(pthread_mutex_t *this, uint64_t a2)
{
  uint64_t v4 = this + 4;
  pthread_mutex_lock(this + 4);
  *(void *)this[5].__opaque += a2;

  return pthread_mutex_unlock(v4);
}

BOOL H16ISP::H16ISPFrameReceiverBufferPool::TryStillImageBufferRemove(pthread_mutex_t *this, __CVBuffer *a2)
{
  uint64_t v3 = this + 4;
  pthread_mutex_lock(this + 4);
  uint64_t v4 = *(void *)this[5].__opaque;
  if (v4) {
    *(void *)this[5].__opaque = v4 - 1;
  }
  BOOL v5 = v4 != 0;
  pthread_mutex_unlock(v3);
  return v5;
}

uint64_t H16ISP::H16ISPFrameReceiverBufferPool::dumpTracking(H16ISP::H16ISPFrameReceiverBufferPool *this)
{
  return 0;
}

void H16ISP::H16ISPFrameReceiverSharedBufferPool::~H16ISPFrameReceiverSharedBufferPool(H16ISP::H16ISPFrameReceiverBufferPool **this)
{
  uint64_t v2 = (pthread_mutex_t *)(this + 1);
  pthread_mutex_lock((pthread_mutex_t *)(this + 1));
  H16ISP::H16ISPFrameReceiverSharedBufferPool::ReleaseAllBuffers((H16ISP::H16ISPFrameReceiverSharedBufferPool *)this);
  uint64_t v3 = this[9];
  if (v3)
  {
    H16ISP::H16ISPFrameReceiverBufferPool::~H16ISPFrameReceiverBufferPool(v3);
    MEMORY[0x24C53D6E0]();
    this[9] = 0;
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table((uint64_t)(this + 13));
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::ReleaseAllBuffers(H16ISP::H16ISPFrameReceiverSharedBufferPool *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  for (uint64_t i = (uint64_t **)*((void *)this + 15); i; uint64_t i = (uint64_t **)*i)
    CVPixelBufferRelease((CVPixelBufferRef)i[3]);
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::clear((void *)this + 13);
  *(_DWORD *)(*((void *)this + 9) + 12H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *((void *)this + 19) = 0;

  return pthread_mutex_unlock(v2);
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::FindBuffer(H16ISP::H16ISPFrameReceiverSharedBufferPool *this, unsigned int a2)
{
  unsigned int v7 = a2;
  uint64_t v3 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  uint64_t v4 = (void *)((char *)this + 104);
  if (std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::find<unsigned int>(v4, &v7))
  {
    uint64_t v8 = &v7;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v4, &v7, (uint64_t)&std::piecewise_construct, &v8)[3];
  }
  else
  {
    uint64_t v5 = 0;
  }
  pthread_mutex_unlock(v3);
  return v5;
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::ReleaseBuffer(H16ISP::H16ISPFrameReceiverSharedBufferPool *this, __CVBuffer *a2)
{
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  IOSurface = CVPixelBufferGetIOSurface(a2);
  IOSurfaceID ID = IOSurfaceGetID(IOSurface);
  if (std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::find<unsigned int>((void *)this + 13, &ID))
  {
    CVPixelBufferRelease(a2);
    std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__erase_unique<unsigned int>((void *)this + 13, &ID);
  }
  --*(_DWORD *)(*((void *)this + 9) + 120);
  return pthread_mutex_unlock(v4);
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::SendStillImageBuffers(H16ISP::H16ISPFrameReceiverSharedBufferPool *this, uint64_t a2)
{
  *(void *)&v26[3568] = *MEMORY[0x263EF8340];
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  if (a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *((void *)this + 9);
    unsigned int v7 = &v26[4];
    do
    {
      CVPixelBufferRef pixelBuffer = 0;
      IOSurfaceID ID = 0;
      uint64_t v8 = H16ISP::H16ISPFrameReceiverBufferPool::allocateBuffer((H16ISP::H16ISPFrameReceiverBufferPool *)v6, &pixelBuffer, 0);
      if (v8)
      {
        uint64_t v12 = v8;
        uint64_t v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v17 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v17;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiverSharedBufferPool::SendStillImageBuffers();
        }
        goto LABEL_30;
      }
      if (!v5 && !*((unsigned char *)this + 148))
      {
        v23[0] = CVPixelBufferGetDataSize(pixelBuffer);
        v23[1] = CVPixelBufferGetBytesPerRow(pixelBuffer);
      }
      IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
      IOSurfaceID ID = IOSurfaceGetID(IOSurface);
      CVPixelBufferRef v10 = pixelBuffer;
      p_IOSurfaceID ID = &ID;
      std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 104, &ID, (uint64_t)&std::piecewise_construct, &p_ID)[3] = v10;
      *(_OWORD *)((char *)v7 - 2H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = *((_OWORD *)this + 5);
      *((_DWORD *)v7 - 1) = ID;
      uint64_t v6 = *((void *)this + 9);
      *(void *)&long long v11 = *(void *)(v6 + 24);
      DWORD2(v11) = *(_DWORD *)(v6 + 40);
      HIDWORD(v11) = *(_DWORD *)(v6 + 20);
      *unsigned int v7 = v11;
      unsigned int v7 = (_OWORD *)((char *)v7 + 56);
      ++v5;
    }
    while (a2 != v5);
    if (*((unsigned char *)this + 148)) {
      goto LABEL_9;
    }
    uint64_t v18 = H16ISP::H16ISPDevice::SetSharedBufferPoolInfo(*(H16ISP::H16ISPDevice **)this, *((_WORD *)this + 72), *((_WORD *)this + 73), 7, a2, 0, 1u, v23);
    if (!v18)
    {
      *((unsigned char *)this + 148) = 1;
LABEL_9:
      uint64_t v12 = H16ISP::H16ISPDevice::ISP_SendBuffers(*(void *)this, v25, a2, *((_DWORD *)this + 24));
      if (v12)
      {
        uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v13 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v13;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiverSharedBufferPool::SendStillImageBuffers();
        }
        uint64_t v14 = (unsigned int *)v26;
        do
        {
          unsigned int v15 = *v14;
          v14 += 14;
          Buffer = (__CVBuffer *)H16ISP::H16ISPFrameReceiverSharedBufferPool::FindBuffer(this, v15);
          if (Buffer) {
            H16ISP::H16ISPFrameReceiverSharedBufferPool::ReleaseBuffer(this, Buffer);
          }
          --a2;
        }
        while (a2);
      }
      else
      {
        *(_DWORD *)(*((void *)this + 9) + 120) += a2;
        *((void *)this + 19) += a2;
      }
      goto LABEL_30;
    }
    uint64_t v12 = v18;
    double v19 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      double v19 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v19;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiverSharedBufferPool::SendStillImageBuffers();
    }
  }
  else
  {
    uint64_t v12 = 3758097084;
  }
LABEL_30:
  pthread_mutex_unlock(v4);
  return v12;
}

BOOL H16ISP::H16ISPFrameReceiverSharedBufferPool::TryStillImageBufferRemove(H16ISP::H16ISPFrameReceiverSharedBufferPool *this, __CVBuffer *a2)
{
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  if (*((void *)this + 19))
  {
    IOSurface = CVPixelBufferGetIOSurface(a2);
    IOSurfaceID ID = IOSurfaceGetID(IOSurface);
    uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::find<unsigned int>((void *)this + 13, &ID);
    BOOL v7 = v6 != 0;
    if (v6)
    {
      std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__erase_unique<unsigned int>((void *)this + 13, &ID);
      --*(_DWORD *)(*((void *)this + 9) + 120);
      --*((void *)this + 19);
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  pthread_mutex_unlock(v4);
  return v7;
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::InitiateShutdown(H16ISP::H16ISPFrameReceiverSharedBufferPool *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  uint64_t v3 = H16ISP::H16ISPDevice::ReturnAllSharedBuffersInPool(*(H16ISP::H16ISPDevice **)this, *((_WORD *)this + 72), *((_WORD *)this + 73), *(_DWORD *)(*((void *)this + 9) + 20));
  if (v3)
  {
    uint64_t v4 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v4 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v4;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiverSharedBufferPool::InitiateShutdown();
    }
  }
  *((unsigned char *)this + 148) = 0;
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::SendBuffer(H16ISP::H16ISPFrameReceiverSharedBufferPool *this, __CVBuffer *a2)
{
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  long long v10 = *((_OWORD *)this + 5);
  IOSurface = CVPixelBufferGetIOSurface(a2);
  IOSurfaceID ID = IOSurfaceGetID(IOSurface);
  uint64_t v6 = *((void *)this + 9);
  uint64_t v12 = *(void *)(v6 + 24);
  int v13 = *(_DWORD *)(v6 + 40);
  int v14 = *(_DWORD *)(v6 + 20);
  uint64_t v7 = H16ISP::H16ISPDevice::ISP_SendBuffers(*(void *)this, &v10, 1u, *((_DWORD *)this + 24));
  if (v7)
  {
    uint64_t v8 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v8 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPFrameReceiverSharedBufferPool::SendBuffer();
    }
  }
  pthread_mutex_unlock(v4);
  return v7;
}

uint64_t H16ISP::H16ISPFrameReceiverSharedBufferPool::GetNumAllocatedBuffers(H16ISP::H16ISPFrameReceiverSharedBufferPool *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::H16ISPFrameReceiverDataBufferPool(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 4H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = a5;
  kdebug_trace();
  pthread_mutex_init((pthread_mutex_t *)(a1 + 112), 0);
  if (a3)
  {
    *(void *)(a1 + 24) = CFRetain(a3);
    H16ISP::H16ISPFrameReceiverDataBufferPool::IOSurfaceAllocSize((H16ISP::H16ISPFrameReceiverDataBufferPool *)a1);
  }
  H16ISP::H16ISPFrameReceiverDataBufferPool::createDataBufferPoolAuxAttributes((H16ISP::H16ISPFrameReceiverDataBufferPool *)a1, a4);
  kdebug_trace();
  return a1;
}

void sub_24689CC2C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::IOSurfaceAllocSize(H16ISP::H16ISPFrameReceiverDataBufferPool *this)
{
  unsigned int valuePtr = 0;
  if (!*((void *)this + 3))
  {
    uint64_t v5 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v5 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v5;
    }
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    H16ISP::H16ISPFrameReceiverDataBufferPool::IOSurfaceAllocSize(v5, v6, v7, v8, v9, v10, v11, v12);
    return 0;
  }
  CFDictionaryRef DataBufferAttributes = (const __CFDictionary *)CVDataBufferPoolGetDataBufferAttributes();
  if (!DataBufferAttributes)
  {
    int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      int v13 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v13;
    }
    uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    H16ISP::H16ISPFrameReceiverDataBufferPool::IOSurfaceAllocSize(v13, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(DataBufferAttributes, (const void *)*MEMORY[0x263F03E00]);
  if (!Value)
  {
    uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
    {
      uint64_t v21 = os_log_create("com.apple.isp", "general");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v21;
    }
    uint64_t result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    H16ISP::H16ISPFrameReceiverDataBufferPool::IOSurfaceAllocSize(v21, v22, v23, v24, v25, v26, v27, v28);
    return 0;
  }
  CFNumberRef v3 = (const __CFNumber *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x263F0ED30]);
  if (v3)
  {
    CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
    return valuePtr;
  }
  size_t v29 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    size_t v29 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v29;
  }
  uint64_t result = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  if (result)
  {
    H16ISP::H16ISPFrameReceiverDataBufferPool::IOSurfaceAllocSize(v29, v30, v31, v32, v33, v34, v35, v36);
    return 0;
  }
  return result;
}

void H16ISP::H16ISPFrameReceiverDataBufferPool::createDataBufferPoolAuxAttributes(H16ISP::H16ISPFrameReceiverDataBufferPool *this, uint64_t a2)
{
  uint64_t valuePtr = a2;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *((void *)this + 4) = Mutable;
  if (Mutable)
  {
    CFNumberRef v5 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 4), (const void *)*MEMORY[0x263F03E08], v5);
      CFRelease(v6);
    }
  }
}

void H16ISP::H16ISPFrameReceiverDataBufferPool::~H16ISPFrameReceiverDataBufferPool(H16ISP::H16ISPFrameReceiverDataBufferPool *this)
{
  if (*((void *)this + 10)) {
    kdebug_trace();
  }
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = (const void *)*((void *)this + 4);
  if (v3) {
    CFRelease(v3);
  }
  if (*((void *)this + 10))
  {
    kdebug_trace();
    uint64_t v4 = (H16ISP::H16ISPFrameReceiverBufferPool *)*((void *)this + 10);
    if (v4)
    {
      H16ISP::H16ISPFrameReceiverBufferPool::~H16ISPFrameReceiverBufferPool(v4);
      MEMORY[0x24C53D6E0]();
    }
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 112));
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::~__hash_table((uint64_t)this + 40);
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::lock(H16ISP::H16ISPFrameReceiverDataBufferPool *this)
{
  return pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::unlock(H16ISP::H16ISPFrameReceiverDataBufferPool *this)
{
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 112));
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::allocateBuffer(H16ISP::H16ISPFrameReceiverDataBufferPool *this, __CVBuffer **a2)
{
  uint64_t v9 = 0;
  if (CVDataBufferPoolCreateDataBufferWithAuxAttributes()) {
    return 3758097085;
  }
  IOSurface = (__IOSurface *)CVDataBufferGetIOSurface();
  IOSurfaceID ID = IOSurfaceGetID(IOSurface);
  CFNumberRef v6 = v9;
  p_IOSurfaceID ID = &ID;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 40, &ID, (uint64_t)&std::piecewise_construct, &p_ID);
  uint64_t result = 0;
  v7[3] = v6;
  *a2 = v9;
  return result;
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::NumBuffersSent(H16ISP::H16ISPFrameReceiverDataBufferPool *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 112);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  uint64_t v3 = *(unsigned int *)(*((void *)this + 10) + 120);
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::AllocateBuffer(H16ISP::H16ISPFrameReceiverDataBufferPool *this, __CVBuffer **a2)
{
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 112);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  uint64_t Buffer = H16ISP::H16ISPFrameReceiverDataBufferPool::allocateBuffer(this, a2);
  pthread_mutex_unlock(v4);
  return Buffer;
}

BOOL H16ISP::H16ISPFrameReceiverDataBufferPool::removeBufferWithRelease(H16ISP::H16ISPFrameReceiverDataBufferPool *this, __CVBuffer *a2, int a3)
{
  IOSurface = (__IOSurface *)CVDataBufferGetIOSurface();
  IOSurfaceID ID = IOSurfaceGetID(IOSurface);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::find<unsigned int>((void *)this + 5, &ID);
  if (v7)
  {
    if (a3) {
      CVBufferRelease(a2);
    }
    std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__erase_unique<unsigned int>((void *)this + 5, &ID);
    --*(_DWORD *)(*((void *)this + 10) + 120);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 112));
  return v7 != 0;
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::ReleaseBuffer(H16ISP::H16ISPFrameReceiverDataBufferPool *this, __CVBuffer *a2)
{
  if (H16ISP::H16ISPFrameReceiverDataBufferPool::removeBufferWithRelease(this, a2, 1)) {
    return 0;
  }
  else {
    return 3758097136;
  }
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::RemoveBuffer(H16ISP::H16ISPFrameReceiverDataBufferPool *this, __CVBuffer *a2)
{
  if (H16ISP::H16ISPFrameReceiverDataBufferPool::removeBufferWithRelease(this, a2, 0)) {
    return 0;
  }
  else {
    return 3758097136;
  }
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::SetCapacity(CFMutableDictionaryRef *this, __CFDictionary *a2)
{
  uint64_t v2 = a2;
  uint64_t valuePtr = a2;
  uint64_t v4 = (pthread_mutex_t *)(this + 14);
  pthread_mutex_lock((pthread_mutex_t *)(this + 14));
  if (!*((unsigned char *)this + 16))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (CVDataBufferPoolSetMinBufferCount())
    {
      uint64_t v5 = 3758097084;
      goto LABEL_5;
    }
    if (this[4])
    {
      CFNumberRef v8 = CFNumberCreate(v6, kCFNumberIntType, &valuePtr);
      if (v8)
      {
        CFNumberRef v9 = v8;
        CFDictionarySetValue(this[4], (const void *)*MEMORY[0x263F03E08], v8);
        CFRelease(v9);
      }
    }
    uint64_t v2 = valuePtr;
  }
  uint64_t v5 = 0;
  this[1] = v2;
LABEL_5:
  pthread_mutex_unlock(v4);
  return v5;
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::SendBuffer(H16ISP::H16ISPFrameReceiverDataBufferPool *this, __CVBuffer *a2)
{
  long long v7 = *(_OWORD *)((char *)this + 88);
  IOSurface = (__IOSurface *)CVDataBufferGetIOSurface();
  IOSurfaceID ID = IOSurfaceGetID(IOSurface);
  int DataSize = CVDataBufferGetDataSize();
  int v10 = 1;
  uint64_t v4 = *((void *)this + 10);
  int v11 = *(_DWORD *)(v4 + 40);
  int v12 = *(_DWORD *)(v4 + 20);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  uint64_t v5 = H16ISP::H16ISPDevice::ISP_SendBuffers(*(void *)this, &v7, 1u, *((_DWORD *)this + 26));
  if (!v5) {
    ++*(_DWORD *)(*((void *)this + 10) + 120);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 112));
  return v5;
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::FindBuffer(H16ISP::H16ISPFrameReceiverDataBufferPool *this, unsigned int a2)
{
  unsigned int v7 = a2;
  uint64_t v3 = (pthread_mutex_t *)((char *)this + 112);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  uint64_t v4 = (void *)((char *)this + 40);
  if (std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::find<unsigned int>(v4, &v7))
  {
    CFNumberRef v8 = &v7;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v4, &v7, (uint64_t)&std::piecewise_construct, &v8)[3];
  }
  else
  {
    uint64_t v5 = 0;
  }
  pthread_mutex_unlock(v3);
  return v5;
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::ReleaseBuffers(H16ISP::H16ISPFrameReceiverDataBufferPool *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 112);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  for (uint64_t i = (uint64_t **)*((void *)this + 7); i; uint64_t i = (uint64_t **)*i)
    CVBufferRelease((CVBufferRef)i[3]);
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::clear((void *)this + 5);
  *(_DWORD *)(*((void *)this + 10) + 12H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;

  return pthread_mutex_unlock(v2);
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::SendInitialFirmwareBuffers(H16ISP::H16ISPFrameReceiverDataBufferPool *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 112);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  uint64_t v3 = *((void *)this + 10);
  if (*(_DWORD *)(v3 + 120))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 3758097085;
    size_t v6 = *(unsigned int *)(v3 + 112);
    if ((v6 - 65) >= 0xFFFFFFC0)
    {
      uint64_t v4 = (char *)malloc_type_calloc(v6, 0x38uLL, 0x1080040782C1A1FuLL);
      if (v4)
      {
        uint64_t v7 = 0;
        while (1)
        {
          uint64_t v30 = 0;
          uint64_t v8 = H16ISP::H16ISPFrameReceiverDataBufferPool::allocateBuffer(this, &v30);
          if (v8) {
            break;
          }
          CFNumberRef v9 = &v4[v7];
          *(_OWORD *)&v4[v7] = *(_OWORD *)((char *)this + 88);
          IOSurface = (__IOSurface *)CVDataBufferGetIOSurface();
          *((_DWORD *)v9 + 4) = IOSurfaceGetID(IOSurface);
          *((_DWORD *)v9 + 5) = CVDataBufferGetDataSize();
          *((_DWORD *)v9 + 6) = 1;
          uint64_t v11 = *((void *)this + 10);
          int v12 = *(_DWORD *)(v11 + 40);
          LODWORD(v11) = *(_DWORD *)(v11 + 20);
          *((_DWORD *)v9 + 7) = v12;
          *((_DWORD *)v9 + 8) = v11;
          v7 += 56;
          if (56 * v6 == v7)
          {
            uint64_t v5 = H16ISP::H16ISPDevice::ISP_SendBuffers(*(void *)this, v4, v6, *((_DWORD *)this + 26));
            if (v5)
            {
              int v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                int v13 = os_log_create("com.apple.isp", "general");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v13;
              }
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                H16ISP::H16ISPFrameReceiverDataBufferPool::SendInitialFirmwareBuffers(v13, v14, v15, v16, v17, v18, v19, v20);
              }
            }
            else
            {
              *(_DWORD *)(*((void *)this + 10) + 12H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v6;
            }
            goto LABEL_19;
          }
        }
        uint64_t v5 = v8;
        uint64_t v21 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          uint64_t v21 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v21;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPFrameReceiverDataBufferPool::SendInitialFirmwareBuffers(v21, v22, v23, v24, v25, v26, v27, v28);
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 3758097095;
    }
  }
LABEL_19:
  pthread_mutex_unlock(v2);
  free(v4);
  return v5;
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::GetPool(H16ISP::H16ISPFrameReceiverDataBufferPool *this)
{
  return *((void *)this + 10);
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::SetDestructionInProgress(uint64_t this)
{
  *(unsigned char *)(*(void *)(this + 80) + 144) = 1;
  return this;
}

uint64_t H16ISP::H16ISPFrameReceiverDataBufferPool::RegisterCompletionCallback(uint64_t this, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(this + 88) = a2;
  *(void *)(this + 96) = a3;
  *(_DWORD *)(this + 104) = a4;
  return this;
}

void std::__split_buffer<__CVBuffer **>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      uint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::allocator<__CVBuffer **>::allocate_at_least[abi:ne180100](*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        uint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,__CVBuffer *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,__CVBuffer *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,__CVBuffer *>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_2_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void H16ISP::H16ISPGraphExclaveFaceTrackingNode::H16ISPGraphExclaveFaceTrackingNode(H16ISP::H16ISPGraphExclaveFaceTrackingNode *this, H16ISP::H16ISPDevice *a2, int a3)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 22);
  *(void *)uint64_t v5 = &unk_26FAEB138;
  *(unsigned char *)(v5 + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *(void *)(v5 + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

{
  uint64_t v5;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 22);
  *(void *)uint64_t v5 = &unk_26FAEB138;
  *(unsigned char *)(v5 + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *(void *)(v5 + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

void H16ISP::H16ISPGraphExclaveFaceTrackingNode::~H16ISPGraphExclaveFaceTrackingNode(H16ISP::H16ISPGraphExclaveFaceTrackingNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPGraphExclaveFaceTrackingNode::onActivate(H16ISP::H16ISPGraphExclaveFaceTrackingNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int8x8_t v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_INFO, "[Exclaves] H16ISPGraphExclaveFaceTrackingNode::onActivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveFaceTrackingNode::onDeactivate(H16ISP::H16ISPGraphExclaveFaceTrackingNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int8x8_t v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_INFO, "[Exclaves] H16ISPGraphExclaveFaceTrackingNode::onDeactivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveFaceTrackingNode::onMessageProcessing(H16ISP::H16ISPGraphExclaveFaceTrackingNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveFaceTrackingNode::GetNodeProcessingState(H16ISP::H16ISPGraphExclaveFaceTrackingNode *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t H16ISP::H16ISPGraphExclaveObjectDetectionNode::H16ISPGraphExclaveObjectDetectionNode(uint64_t a1, H16ISP::H16ISPDevice *this, int a3, long long *a4, int a5)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v7 = H16ISP::H16ISPExclaveGraphNode::H16ISPExclaveGraphNode(a1, 21, this, a3, a5);
  *(void *)uint64_t v7 = &unk_26FAEB1B0;
  unint64_t v8 = (_DWORD *)(v7 + 96);
  long long v10 = *a4;
  long long v9 = a4[1];
  *(_DWORD *)(v7 + 128) = *((_DWORD *)a4 + 8);
  *(_OWORD *)(v7 + 96) = v10;
  *(_OWORD *)(v7 + 112) = v9;
  if (*(_DWORD *)(v7 + 96) >= 0xBu)
  {
    unint64_t v11 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      unint64_t v11 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v11;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveObjectDetectionNode::H16ISPGraphExclaveObjectDetectionNode();
    }
    *unint64_t v8 = 10;
  }
  if (*(_DWORD *)(a1 + 104) >= 0xBu)
  {
    unint64_t v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      unint64_t v12 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v12;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveObjectDetectionNode::H16ISPGraphExclaveObjectDetectionNode();
    }
    *(_DWORD *)(a1 + 104) = 10;
  }
  if (*(_DWORD *)(a1 + 100) >= 0x15u)
  {
    uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v13 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v13;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveObjectDetectionNode::H16ISPGraphExclaveObjectDetectionNode((int *)(a1 + 100), v13, v14);
    }
    *(_DWORD *)(a1 + 10H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 20;
  }
  if ((vaddvq_s32(*(int32x4_t *)(a1 + 108)) + *(_DWORD *)(a1 + 124) + *(_DWORD *)(a1 + 128)) >= 0x15)
  {
    uint64_t v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v15 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v27 = *(_DWORD *)(a1 + 108);
      int v28 = *(_DWORD *)(a1 + 112);
      int v29 = *(_DWORD *)(a1 + 116);
      int v30 = *(_DWORD *)(a1 + 120);
      int v31 = *(_DWORD *)(a1 + 124);
      int v32 = *(_DWORD *)(a1 + 128);
      int v33 = 136316930;
      uint64_t v34 = "H16ISPGraphExclaveObjectDetectionNode";
      __int16 v35 = 1024;
      int v36 = v27;
      __int16 v37 = 1024;
      int v38 = v28;
      __int16 v39 = 1024;
      int v40 = v29;
      __int16 v41 = 1024;
      int v42 = v30;
      __int16 v43 = 1024;
      int v44 = v31;
      __int16 v45 = 1024;
      int v46 = v32;
      __int16 v47 = 1024;
      int v48 = 20;
      _os_log_error_impl(&dword_24680F000, v15, OS_LOG_TYPE_ERROR, "%s - [Exclaves]: Number of requested objects: HumanBody=%u, HumanFullBody=%u, DogBody=%u, DogHead=%u, CatBody=%u, CatHead=%u! Max ANST Supported Objects is %u, truncating output!\n", (uint8_t *)&v33, 0x36u);
    }
  }
  if (H16ISP::H16ISPExclaveGraphNode::Verbose((H16ISP::H16ISPDevice **)a1))
  {
    uint64_t v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v16 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(_DWORD *)(a1 + 104);
      int v18 = *(_DWORD *)(a1 + 108);
      int v19 = *(_DWORD *)(a1 + 96);
      int v20 = *(_DWORD *)(a1 + 100);
      int v21 = *(_DWORD *)(a1 + 112);
      int v22 = *(_DWORD *)(a1 + 116);
      int v23 = *(_DWORD *)(a1 + 120);
      int v24 = *(_DWORD *)(a1 + 124);
      int v25 = *(_DWORD *)(a1 + 128);
      int v33 = 136317442;
      uint64_t v34 = "H16ISPGraphExclaveObjectDetectionNode";
      __int16 v35 = 1024;
      int v36 = v19;
      __int16 v37 = 1024;
      int v38 = v17;
      __int16 v39 = 1024;
      int v40 = v18;
      __int16 v41 = 1024;
      int v42 = v21;
      __int16 v43 = 1024;
      int v44 = v20;
      __int16 v45 = 1024;
      int v46 = v22;
      __int16 v47 = 1024;
      int v48 = v23;
      __int16 v49 = 1024;
      int v50 = v24;
      __int16 v51 = 1024;
      int v52 = v25;
      _os_log_impl(&dword_24680F000, v16, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]: Number of requested objects: HumanFaces=%u, HumanHeads=%u, HumanBody=%u, HumanFullBody=%u, HumanHands=%u, DogBody=%u, DogHead=%u, CatBody=%u, CatHead=%u!\n", (uint8_t *)&v33, 0x42u);
    }
  }
  return a1;
}

void sub_24689E180(_Unwind_Exception *exception_object)
{
}

uint64_t H16ISP::H16ISPGraphExclaveObjectDetectionNode::onMessageProcessing(H16ISP::H16ISPGraphExclaveObjectDetectionNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 9) & (1 << H16ISP::H16ISPFilterGraphNode::GetType(this));
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  uint64_t v5 = *((void *)a2 + 11);
  int v6 = *((_DWORD *)a2 + 90);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
  if (v4)
  {
    if (H16ISP::H16ISPExclaveGraphNode::Verbose((H16ISP::H16ISPDevice **)this))
    {
      uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        uint64_t v7 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v7;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136315906;
        unint64_t v12 = "onMessageProcessing";
        __int16 v13 = 1024;
        int v14 = H16ISP::H16ISPExclaveGraphNode::Channel(this);
        __int16 v15 = 1024;
        int v16 = v6;
        __int16 v17 = 2048;
        uint64_t v18 = v5;
        _os_log_impl(&dword_24680F000, v7, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]: Runkit Object Detection channel=%d, reqID=0x%08X, pts=%llu\n", (uint8_t *)&v11, 0x22u);
      }
    }
    return (*(uint64_t (**)(H16ISP::H16ISPGraphExclaveObjectDetectionNode *, H16ISP::H16ISPFilterGraphMessage *))(*(void *)this + 80))(this, a2);
  }
  else
  {
    long long v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      long long v9 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v9;
    }
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v10)
    {
      int v11 = 136315138;
      unint64_t v12 = "onMessageProcessing";
      _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]: Skipped processing object detection algorithm!\n", (uint8_t *)&v11, 0xCu);
      return 0;
    }
  }
  return result;
}

void *H16ISP::H16ISPGraphExclaveIRObjectDetectionNode::H16ISPGraphExclaveIRObjectDetectionNode(H16ISP::H16ISPGraphExclaveIRObjectDetectionNode *this, H16ISP::H16ISPDevice *a2, int a3, unsigned int *a4)
{
  uint64_t result = (void *)H16ISP::H16ISPGraphExclaveObjectDetectionNode::H16ISPGraphExclaveObjectDetectionNode((uint64_t)this, a2, a3, (long long *)a4, 0);
  *uint64_t result = &unk_26FAEB218;
  return result;
}

{
  void *result;

  uint64_t result = (void *)H16ISP::H16ISPGraphExclaveObjectDetectionNode::H16ISPGraphExclaveObjectDetectionNode((uint64_t)this, a2, a3, (long long *)a4, 0);
  *uint64_t result = &unk_26FAEB218;
  return result;
}

uint64_t H16ISP::H16ISPGraphExclaveIRObjectDetectionNode::InvokeEKRunKit(H16ISP::H16ISPGraphExclaveIRObjectDetectionNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v17[0] = H16ISP::H16ISPExclaveGraphNode::Channel(this);
  v17[1] = 4;
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
  uint64_t v4 = H16ISP::H16ISPExclaveGraphNode::ConclaveClient(this);
  if (v4)
  {
    uint64_t v5 = v4;
    kdebug_trace();
    ispirexclavekitmodule_ispirexclavekit_sendcmdchrunkitfd(v5, (uint64_t)v17);
    kdebug_trace();
    int v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v16 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveIRObjectDetectionNode::InvokeEKRunKit();
    }
    return 3758097130;
  }
  else
  {
    uint64_t v7 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v7 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v7;
    }
    uint64_t v8 = 3758097088;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveIRObjectDetectionNode::InvokeEKRunKit(v7, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  return v8;
}

void *H16ISP::H16ISPGraphExclaveRGBObjectDetectionNode::H16ISPGraphExclaveRGBObjectDetectionNode(H16ISP::H16ISPGraphExclaveRGBObjectDetectionNode *this, H16ISP::H16ISPDevice *a2, int a3, unsigned int *a4)
{
  uint64_t result = (void *)H16ISP::H16ISPGraphExclaveObjectDetectionNode::H16ISPGraphExclaveObjectDetectionNode((uint64_t)this, a2, a3, (long long *)a4, 1);
  *uint64_t result = &unk_26FAEB280;
  return result;
}

{
  void *result;

  uint64_t result = (void *)H16ISP::H16ISPGraphExclaveObjectDetectionNode::H16ISPGraphExclaveObjectDetectionNode((uint64_t)this, a2, a3, (long long *)a4, 1);
  *uint64_t result = &unk_26FAEB280;
  return result;
}

uint64_t H16ISP::H16ISPGraphExclaveRGBObjectDetectionNode::InvokeEKRunKit(H16ISP::H16ISPGraphExclaveRGBObjectDetectionNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pthread_mutex_t *)((char *)a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
  pthread_mutex_unlock(v4);
  uint64_t v5 = H16ISP::H16ISPExclaveGraphNode::ConclaveClient(this);
  v29[0] = H16ISP::H16ISPExclaveGraphNode::Channel(this);
  v29[1] = 4;
  if (v5)
  {
    kdebug_trace();
    int v6 = isprgbexclavekitmodule_isprgbexclavekit_sendcmdchrunkitanstv150(v5, (uint64_t)v29);
    kdebug_trace();
    if (v6 || !v28[1436])
    {
      int v25 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        int v25 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v25;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphExclaveRGBObjectDetectionNode::InvokeEKRunKit();
      }
      return 3758097130;
    }
    else
    {
      H16ISP::GenerateRGBObjectDictionary((uint64_t)a2, v26, (unsigned int *)this + 24);
      if (!H16ISP::H16ISPExclaveGraphNode::Verbose((H16ISP::H16ISPDevice **)this)) {
        return 0;
      }
      uint64_t v7 = v27;
      uint64_t v8 = &_os_log_internal;
      if (v27)
      {
        uint64_t v9 = v28;
        do
        {
          if (*v9 == 9)
          {
            uint64_t v10 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v8)
            {
              uint64_t v10 = os_log_create("com.apple.isp", "exclaves");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v10;
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              int v11 = *(v9 - 2);
              unsigned int v12 = *(v9 - 1);
              *(_DWORD *)int buf = 136315650;
              int v31 = "PrintInvalidANSTDetections";
              __int16 v32 = 1024;
              int v33 = v11;
              __int16 v34 = 1024;
              unsigned int v35 = v12;
              _os_log_error_impl(&dword_24680F000, v10, OS_LOG_TYPE_ERROR, "%s - [Exclaves]: ObjectID=%u, GroupID=%u has an INVALID category!\n", buf, 0x18u);
            }
          }
          v9 += 9;
          --v7;
        }
        while (v7);
      }
      uint64_t v13 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == v8)
      {
        uint64_t v13 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v13;
      }
      uint64_t v14 = 0;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = H16ISP::H16ISPExclaveGraphNode::Channel(this);
        *(_DWORD *)int buf = 136316162;
        int v31 = "InvokeEKRunKit";
        __int16 v32 = 1024;
        int v33 = v15;
        __int16 v34 = 1024;
        unsigned int v35 = v26[0];
        __int16 v36 = 1024;
        unsigned int v37 = v27;
        __int16 v38 = 1024;
        int v39 = v28[1432];
        _os_log_impl(&dword_24680F000, v13, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]: RGB Object Detection IDL Success: channel=%u, numfaces=%u, numobjects=%u, valid=%u\n", buf, 0x24u);
        return 0;
      }
    }
  }
  else
  {
    __int16 v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      __int16 v17 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v17;
    }
    uint64_t v14 = 3758097088;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      H16ISP::H16ISPGraphExclaveRGBObjectDetectionNode::InvokeEKRunKit(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v14;
}

void H16ISP::GenerateRGBObjectDictionary(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v296 = *MEMORY[0x263EF8340];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  int v248 = (pthread_mutex_t *)(a1 + 8);
  uint64_t v249 = a1;
  uint64_t v252 = *(void *)(a1 + 88);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 8));
  uint64_t v285 = Mutable;
  if (Mutable)
  {
    unsigned int v6 = *a3;
    int v251 = a3;
    if (*a3)
    {
      unint64_t v7 = *a2;
      *(void *)uint64_t valuePtr = v252;
      CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      uint64_t v9 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
      CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      CFNumberRef v11 = v10;
      if (v8) {
        BOOL v12 = v9 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12 || v10 == 0)
      {
        long long v174 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          long long v174 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v174;
        }
        if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR)) {
          H16ISP::GenerateRGBObjectDictionary(v174, v175, v176, v177, v178, v179, v180, v181);
        }
      }
      else
      {
        CFNumberRef value = v10;
        int theDict = v8;
        if (v7)
        {
          unsigned int v14 = 0;
          CFStringRef key = (void *)*MEMORY[0x263F2CFB8];
          CFMutableDictionaryRef v267 = (CFMutableDictionaryRef)*MEMORY[0x263F2C910];
          CFMutableDictionaryRef v258 = (CFMutableDictionaryRef)*MEMORY[0x263F2C918];
          uint64_t v250 = (void *)*MEMORY[0x263F2D440];
          CFMutableDictionaryRef v255 = (CFMutableDictionaryRef)*MEMORY[0x263F2D0B8];
          CFNumberRef v253 = (void *)*MEMORY[0x263F2CEF0];
          int v15 = (const void *)*MEMORY[0x263F2CEE0];
          int v16 = (const void *)*MEMORY[0x263F2CEE8];
          __int16 v17 = a2 + 8;
          unint64_t v18 = 1;
          do
          {
            if (*((unsigned char *)v17 + 32) == 1)
            {
              uint64_t v19 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              float v294 = *(float *)v17;
              CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt32Type, &v294);
              CFDictionarySetValue(v19, key, v20);
              CFRelease(v20);
              int v293 = *(v17 - 6);
              CFNumberRef v21 = CFNumberCreate(0, kCFNumberSInt32Type, &v293);
              CFDictionarySetValue(v19, v267, v21);
              CFRelease(v21);
              int v292 = *(v17 - 7);
              CFNumberRef v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v292);
              CFDictionarySetValue(v19, v258, v22);
              CFRelease(v22);
              v297.origin.x = *((float *)v17 - 4);
              v297.origin.y = *((float *)v17 - 3);
              v297.size.width = *((float *)v17 - 2);
              v297.size.height = *((float *)v17 - 1);
              DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v297);
              if (DictionaryRepresentation)
              {
                CFDictionaryRef v24 = DictionaryRepresentation;
                CFDictionarySetValue(v19, v250, DictionaryRepresentation);
                CFRelease(v24);
              }
              double v291 = *((float *)v17 + 7);
              CFNumberRef v25 = CFNumberCreate(0, kCFNumberCGFloatType, &v291);
              CFDictionarySetValue(v19, v255, v25);
              CFRelease(v25);
              unsigned int v290 = v17[3];
              CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt32Type, &v290);
              CFDictionarySetValue(v19, v253, v26);
              CFRelease(v26);
              unsigned int v289 = v17[5];
              CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v289);
              CFDictionarySetValue(v19, v15, v27);
              CFRelease(v27);
              unsigned int v288 = v17[4];
              CFNumberRef v28 = CFNumberCreate(0, kCFNumberSInt32Type, &v288);
              CFDictionarySetValue(v19, v16, v28);
              CFRelease(v28);
              CFArrayAppendValue(v9, v19);
              CFRelease(v19);
              ++v14;
            }
            if (v18 >= v7) {
              break;
            }
            v17 += 16;
            ++v18;
          }
          while (v14 < v6);
        }
        CFMutableDictionaryRef v8 = theDict;
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F2C988], v9);
        CFNumberRef v11 = value;
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x263F2D620], value);
        CFDictionarySetValue(v285, (const void *)*MEMORY[0x263F2C958], theDict);
      }
      if (v8) {
        CFRelease(v8);
      }
      a3 = v251;
      if (v9) {
        CFRelease(v9);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
    unsigned int v29 = a3[2];
    if (v29)
    {
      unint64_t v30 = *a2;
      *(void *)uint64_t valuePtr = v252;
      CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      __int16 v32 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
      CFNumberRef v33 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      CFNumberRef v34 = v33;
      if (v31) {
        BOOL v35 = v32 == 0;
      }
      else {
        BOOL v35 = 1;
      }
      if (v35 || v33 == 0)
      {
        long long v182 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          long long v182 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v182;
        }
        if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR)) {
          H16ISP::GenerateRGBObjectDictionary(v182, v183, v184, v185, v186, v187, v188, v189);
        }
      }
      else
      {
        CFNumberRef v254 = v33;
        CFNumberRef v256 = v31;
        if (v30)
        {
          unsigned int v37 = 0;
          keya = (void *)*MEMORY[0x263F2CFB8];
          CFMutableDictionaryRef v268 = (CFMutableDictionaryRef)*MEMORY[0x263F2C910];
          __int16 v38 = (const void *)*MEMORY[0x263F2C918];
          CFMutableDictionaryRef v259 = (CFMutableDictionaryRef)*MEMORY[0x263F2D440];
          int v39 = (const void *)*MEMORY[0x263F2D0B8];
          uint64_t v40 = a2 + 8;
          unint64_t v41 = 1;
          do
          {
            if (!*((unsigned char *)v40 + 32))
            {
              int v42 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              float v294 = *(float *)v40;
              CFNumberRef v43 = CFNumberCreate(0, kCFNumberSInt32Type, &v294);
              CFDictionarySetValue(v42, keya, v43);
              CFRelease(v43);
              int v293 = *(v40 - 6);
              CFNumberRef v44 = CFNumberCreate(0, kCFNumberSInt32Type, &v293);
              CFDictionarySetValue(v42, v268, v44);
              CFRelease(v44);
              int v292 = *(v40 - 7);
              CFNumberRef v45 = CFNumberCreate(0, kCFNumberSInt32Type, &v292);
              CFDictionarySetValue(v42, v38, v45);
              CFRelease(v45);
              v298.origin.x = *((float *)v40 - 4);
              v298.origin.y = *((float *)v40 - 3);
              v298.size.width = *((float *)v40 - 2);
              v298.size.height = *((float *)v40 - 1);
              CFDictionaryRef v46 = CGRectCreateDictionaryRepresentation(v298);
              if (v46)
              {
                CFDictionaryRef v47 = v46;
                CFDictionarySetValue(v42, v259, v46);
                CFRelease(v47);
              }
              double v291 = *((float *)v40 + 7);
              CFNumberRef v48 = CFNumberCreate(0, kCFNumberCGFloatType, &v291);
              CFDictionarySetValue(v42, v39, v48);
              CFRelease(v48);
              CFArrayAppendValue(v32, v42);
              CFRelease(v42);
              ++v37;
            }
            if (v41 >= v30) {
              break;
            }
            v40 += 16;
            ++v41;
          }
          while (v37 < v29);
        }
        CFMutableDictionaryRef v31 = v256;
        CFDictionarySetValue(v256, (const void *)*MEMORY[0x263F2C988], v32);
        CFNumberRef v34 = v254;
        CFDictionarySetValue(v256, (const void *)*MEMORY[0x263F2D620], v254);
        CFDictionarySetValue(v285, (const void *)*MEMORY[0x263F2C970], v256);
      }
      if (v31) {
        CFRelease(v31);
      }
      a3 = v251;
      if (v32) {
        CFRelease(v32);
      }
      if (v34) {
        CFRelease(v34);
      }
    }
    unsigned int v49 = a3[1];
    if (v49)
    {
      uint64_t v50 = a2[161];
      *(void *)uint64_t valuePtr = v252;
      CFMutableDictionaryRef v51 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      int v52 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
      CFNumberRef v53 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      CFNumberRef v54 = v53;
      if (v51) {
        BOOL v55 = v52 == 0;
      }
      else {
        BOOL v55 = 1;
      }
      if (v55 || v53 == 0)
      {
        long long v190 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          long long v190 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v190;
        }
        if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR)) {
          H16ISP::GenerateRGBObjectDictionary(v190, v191, v192, v193, v194, v195, v196, v197);
        }
      }
      else
      {
        CFMutableDictionaryRef v257 = v53;
        uint64_t v260 = v51;
        if (v50)
        {
          unsigned int v57 = 0;
          keyb = (void *)*MEMORY[0x263F2C918];
          uint64_t v58 = (const void *)*MEMORY[0x263F2CFB8];
          size_t v59 = (const void *)*MEMORY[0x263F2C910];
          CFMutableDictionaryRef v269 = (CFMutableDictionaryRef)*MEMORY[0x263F2D440];
          uint64_t v60 = (const void *)*MEMORY[0x263F2C908];
          long long v61 = (float *)(a2 + 169);
          do
          {
            if ((*((_DWORD *)v61 - 5) - 7) <= 1)
            {
              if (v57 >= v49) {
                break;
              }
              uint64_t v62 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              *(float *)&double v291 = *(v61 - 7);
              CFNumberRef v63 = CFNumberCreate(0, kCFNumberSInt32Type, &v291);
              CFDictionarySetValue(v62, keyb, v63);
              CFRelease(v63);
              float v294 = *v61;
              CFNumberRef v64 = CFNumberCreate(0, kCFNumberSInt32Type, &v294);
              CFDictionarySetValue(v62, v58, v64);
              CFRelease(v64);
              int v293 = *((_DWORD *)v61 - 6);
              CFNumberRef v65 = CFNumberCreate(0, kCFNumberSInt32Type, &v293);
              CFDictionarySetValue(v62, v59, v65);
              CFRelease(v65);
              v299.origin.x = *(v61 - 4);
              v299.origin.y = *(v61 - 3);
              v299.size.width = *(v61 - 2);
              v299.size.height = *(v61 - 1);
              CFDictionaryRef v66 = CGRectCreateDictionaryRepresentation(v299);
              if (v66)
              {
                CFDictionaryRef v67 = v66;
                CFDictionarySetValue(v62, v269, v66);
                CFRelease(v67);
              }
              int v292 = *((_DWORD *)v61 - 5) != 8;
              CFNumberRef v68 = CFNumberCreate(0, kCFNumberSInt32Type, &v292);
              CFDictionarySetValue(v62, v60, v68);
              CFRelease(v68);
              CFArrayAppendValue(v52, v62);
              CFRelease(v62);
              ++v57;
            }
            v61 += 9;
            --v50;
          }
          while (v50);
        }
        CFMutableDictionaryRef v51 = v260;
        CFDictionarySetValue(v260, (const void *)*MEMORY[0x263F2C988], v52);
        CFNumberRef v54 = v257;
        CFDictionarySetValue(v260, (const void *)*MEMORY[0x263F2D620], v257);
        CFDictionarySetValue(v285, (const void *)*MEMORY[0x263F2C968], v260);
      }
      if (v51) {
        CFRelease(v51);
      }
      a3 = v251;
      if (v52) {
        CFRelease(v52);
      }
      if (v54) {
        CFRelease(v54);
      }
    }
    unsigned int v69 = a3[4];
    if (v69)
    {
      uint64_t v70 = a2[161];
      *(void *)uint64_t valuePtr = v252;
      CFMutableDictionaryRef v71 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      uint64_t v72 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
      CFNumberRef v73 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      CFNumberRef v74 = v73;
      if (v71) {
        BOOL v75 = v72 == 0;
      }
      else {
        BOOL v75 = 1;
      }
      if (v75 || v73 == 0)
      {
        long long v198 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          long long v198 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v198;
        }
        if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR)) {
          H16ISP::GenerateRGBObjectDictionary(v198, v199, v200, v201, v202, v203, v204, v205);
        }
      }
      else
      {
        CFMutableDictionaryRef v261 = v73;
        uint64_t v270 = v71;
        if (v70)
        {
          unsigned int v77 = 0;
          unsigned int v78 = (const void *)*MEMORY[0x263F2C918];
          time_t v79 = (const void *)*MEMORY[0x263F2CFB8];
          uint64_t v80 = (const void *)*MEMORY[0x263F2C910];
          keyc = (void *)*MEMORY[0x263F2D440];
          char v81 = (float *)(a2 + 169);
          do
          {
            if (*((_DWORD *)v81 - 5) == 6)
            {
              if (v77 >= v69) {
                break;
              }
              double v82 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              *(float *)&double v291 = *(v81 - 7);
              CFNumberRef v83 = CFNumberCreate(0, kCFNumberSInt32Type, &v291);
              CFDictionarySetValue(v82, v78, v83);
              CFRelease(v83);
              float v294 = *v81;
              CFNumberRef v84 = CFNumberCreate(0, kCFNumberSInt32Type, &v294);
              CFDictionarySetValue(v82, v79, v84);
              CFRelease(v84);
              int v293 = *((_DWORD *)v81 - 6);
              CFNumberRef v85 = CFNumberCreate(0, kCFNumberSInt32Type, &v293);
              CFDictionarySetValue(v82, v80, v85);
              CFRelease(v85);
              v300.origin.x = *(v81 - 4);
              v300.origin.y = *(v81 - 3);
              v300.size.width = *(v81 - 2);
              v300.size.height = *(v81 - 1);
              CFDictionaryRef v86 = CGRectCreateDictionaryRepresentation(v300);
              if (v86)
              {
                CFDictionaryRef v87 = v86;
                CFDictionarySetValue(v82, keyc, v86);
                CFRelease(v87);
              }
              CFArrayAppendValue(v72, v82);
              CFRelease(v82);
              ++v77;
            }
            v81 += 9;
            --v70;
          }
          while (v70);
        }
        CFMutableDictionaryRef v71 = v270;
        CFDictionarySetValue(v270, (const void *)*MEMORY[0x263F2C988], v72);
        CFNumberRef v74 = v261;
        CFDictionarySetValue(v270, (const void *)*MEMORY[0x263F2D620], v261);
        CFDictionarySetValue(v285, (const void *)*MEMORY[0x263F2C960], v270);
      }
      if (v71) {
        CFRelease(v71);
      }
      a3 = v251;
      if (v72) {
        CFRelease(v72);
      }
      if (v74) {
        CFRelease(v74);
      }
    }
    unsigned int v88 = a3[3];
    if (v88)
    {
      uint64_t v89 = a2[161];
      *(void *)uint64_t valuePtr = v252;
      CFMutableDictionaryRef v90 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      uint64_t v91 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
      CFNumberRef v92 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      CFNumberRef v93 = v92;
      if (v90 && v91 && v92)
      {
        CFMutableDictionaryRef v262 = v92;
        uint64_t v271 = v90;
        if (v89)
        {
          unsigned int v94 = 0;
          int v95 = (const void *)*MEMORY[0x263F2C918];
          uint64_t v96 = (const void *)*MEMORY[0x263F2CFB8];
          uint64_t v97 = (const void *)*MEMORY[0x263F2C910];
          keyd = (void *)*MEMORY[0x263F2D440];
          int v98 = (float *)(a2 + 169);
          do
          {
            if (*((_DWORD *)v98 - 5) == 1)
            {
              if (v94 >= v88) {
                break;
              }
              double v99 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              *(float *)&double v291 = *(v98 - 7);
              CFNumberRef v100 = CFNumberCreate(0, kCFNumberSInt32Type, &v291);
              CFDictionarySetValue(v99, v95, v100);
              CFRelease(v100);
              float v294 = *v98;
              CFNumberRef v101 = CFNumberCreate(0, kCFNumberSInt32Type, &v294);
              CFDictionarySetValue(v99, v96, v101);
              CFRelease(v101);
              int v293 = *((_DWORD *)v98 - 6);
              CFNumberRef v102 = CFNumberCreate(0, kCFNumberSInt32Type, &v293);
              CFDictionarySetValue(v99, v97, v102);
              CFRelease(v102);
              v301.origin.x = *(v98 - 4);
              v301.origin.y = *(v98 - 3);
              v301.size.width = *(v98 - 2);
              v301.size.height = *(v98 - 1);
              CFDictionaryRef v103 = CGRectCreateDictionaryRepresentation(v301);
              if (v103)
              {
                CFDictionaryRef v104 = v103;
                CFDictionarySetValue(v99, keyd, v103);
                CFRelease(v104);
              }
              CFArrayAppendValue(v91, v99);
              CFRelease(v99);
              ++v94;
            }
            v98 += 9;
            --v89;
          }
          while (v89);
        }
        CFMutableDictionaryRef v90 = v271;
        CFDictionarySetValue(v271, (const void *)*MEMORY[0x263F2C988], v91);
        CFNumberRef v93 = v262;
        CFDictionarySetValue(v271, (const void *)*MEMORY[0x263F2D620], v262);
        CFDictionarySetValue(v285, (const void *)*MEMORY[0x263F2C950], v271);
      }
      else
      {
        long long v206 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          long long v206 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v206;
        }
        if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR)) {
          H16ISP::GenerateRGBObjectDictionary(v206, v207, v208, v209, v210, v211, v212, v213);
        }
      }
      if (v90) {
        CFRelease(v90);
      }
      a3 = v251;
      if (v91) {
        CFRelease(v91);
      }
      if (v93) {
        CFRelease(v93);
      }
    }
    unsigned int v105 = a3[7];
    if (v105)
    {
      uint64_t v106 = a2[161];
      *(void *)uint64_t valuePtr = v252;
      CFMutableDictionaryRef v107 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      int v108 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
      CFNumberRef v109 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      CFNumberRef v110 = v109;
      if (v107 && v108 && v109)
      {
        CFMutableDictionaryRef v263 = v109;
        uint64_t v272 = v107;
        if (v106)
        {
          unsigned int v111 = 0;
          uint64_t v112 = (const void *)*MEMORY[0x263F2C918];
          int v113 = (const void *)*MEMORY[0x263F2CFB8];
          uint64_t v114 = (const void *)*MEMORY[0x263F2C910];
          keye = (void *)*MEMORY[0x263F2D440];
          uint64_t v115 = (float *)(a2 + 169);
          do
          {
            if (*((_DWORD *)v115 - 5) == 2)
            {
              if (v111 >= v105) {
                break;
              }
              uint64_t v116 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              *(float *)&double v291 = *(v115 - 7);
              CFNumberRef v117 = CFNumberCreate(0, kCFNumberSInt32Type, &v291);
              CFDictionarySetValue(v116, v112, v117);
              CFRelease(v117);
              float v294 = *v115;
              CFNumberRef v118 = CFNumberCreate(0, kCFNumberSInt32Type, &v294);
              CFDictionarySetValue(v116, v113, v118);
              CFRelease(v118);
              int v293 = *((_DWORD *)v115 - 6);
              CFNumberRef v119 = CFNumberCreate(0, kCFNumberSInt32Type, &v293);
              CFDictionarySetValue(v116, v114, v119);
              CFRelease(v119);
              v302.origin.x = *(v115 - 4);
              v302.origin.y = *(v115 - 3);
              v302.size.width = *(v115 - 2);
              v302.size.height = *(v115 - 1);
              CFDictionaryRef v120 = CGRectCreateDictionaryRepresentation(v302);
              if (v120)
              {
                CFDictionaryRef v121 = v120;
                CFDictionarySetValue(v116, keye, v120);
                CFRelease(v121);
              }
              CFArrayAppendValue(v108, v116);
              CFRelease(v116);
              ++v111;
            }
            v115 += 9;
            --v106;
          }
          while (v106);
        }
        CFMutableDictionaryRef v107 = v272;
        CFDictionarySetValue(v272, (const void *)*MEMORY[0x263F2C988], v108);
        CFNumberRef v110 = v263;
        CFDictionarySetValue(v272, (const void *)*MEMORY[0x263F2D620], v263);
        CFDictionarySetValue(v285, (const void *)*MEMORY[0x263F2C930], v272);
      }
      else
      {
        long long v214 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          long long v214 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v214;
        }
        if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR)) {
          H16ISP::GenerateRGBObjectDictionary(v214, v215, v216, v217, v218, v219, v220, v221);
        }
      }
      if (v107) {
        CFRelease(v107);
      }
      a3 = v251;
      if (v108) {
        CFRelease(v108);
      }
      if (v110) {
        CFRelease(v110);
      }
    }
    unsigned int v122 = a3[8];
    if (v122)
    {
      uint64_t v123 = a2[161];
      *(void *)uint64_t valuePtr = v252;
      CFMutableDictionaryRef v124 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      int v125 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
      CFNumberRef v126 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      CFNumberRef v127 = v126;
      if (v124 && v125 && v126)
      {
        CFMutableDictionaryRef v264 = v126;
        uint32_t v273 = v124;
        if (v123)
        {
          unsigned int v128 = 0;
          uint64_t v129 = (const void *)*MEMORY[0x263F2C918];
          uint64_t v130 = (const void *)*MEMORY[0x263F2CFB8];
          uint64_t v131 = (const void *)*MEMORY[0x263F2C910];
          keyf = (void *)*MEMORY[0x263F2D440];
          unint64_t v132 = (float *)(a2 + 169);
          do
          {
            if (*((_DWORD *)v132 - 5) == 3)
            {
              if (v128 >= v122) {
                break;
              }
              uint64_t v133 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              *(float *)&double v291 = *(v132 - 7);
              CFNumberRef v134 = CFNumberCreate(0, kCFNumberSInt32Type, &v291);
              CFDictionarySetValue(v133, v129, v134);
              CFRelease(v134);
              float v294 = *v132;
              CFNumberRef v135 = CFNumberCreate(0, kCFNumberSInt32Type, &v294);
              CFDictionarySetValue(v133, v130, v135);
              CFRelease(v135);
              int v293 = *((_DWORD *)v132 - 6);
              CFNumberRef v136 = CFNumberCreate(0, kCFNumberSInt32Type, &v293);
              CFDictionarySetValue(v133, v131, v136);
              CFRelease(v136);
              v303.origin.x = *(v132 - 4);
              v303.origin.y = *(v132 - 3);
              v303.size.width = *(v132 - 2);
              v303.size.height = *(v132 - 1);
              CFDictionaryRef v137 = CGRectCreateDictionaryRepresentation(v303);
              if (v137)
              {
                CFDictionaryRef v138 = v137;
                CFDictionarySetValue(v133, keyf, v137);
                CFRelease(v138);
              }
              CFArrayAppendValue(v125, v133);
              CFRelease(v133);
              ++v128;
            }
            v132 += 9;
            --v123;
          }
          while (v123);
        }
        CFMutableDictionaryRef v124 = v273;
        CFDictionarySetValue(v273, (const void *)*MEMORY[0x263F2C988], v125);
        CFNumberRef v127 = v264;
        CFDictionarySetValue(v273, (const void *)*MEMORY[0x263F2D620], v264);
        CFDictionarySetValue(v285, (const void *)*MEMORY[0x263F2C938], v273);
      }
      else
      {
        long long v222 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          long long v222 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v222;
        }
        if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR)) {
          H16ISP::GenerateRGBObjectDictionary(v222, v223, v224, v225, v226, v227, v228, v229);
        }
      }
      if (v124) {
        CFRelease(v124);
      }
      a3 = v251;
      if (v125) {
        CFRelease(v125);
      }
      if (v127) {
        CFRelease(v127);
      }
    }
    unsigned int v139 = a3[5];
    if (v139)
    {
      uint64_t v140 = a2[161];
      *(void *)uint64_t valuePtr = v252;
      CFMutableDictionaryRef v141 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      uint64_t v142 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
      CFNumberRef v143 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      CFNumberRef v144 = v143;
      if (v141 && v142 && v143)
      {
        CFMutableDictionaryRef v265 = v143;
        uint64_t v274 = v141;
        if (v140)
        {
          unsigned int v145 = 0;
          unsigned int v146 = (const void *)*MEMORY[0x263F2C918];
          uint64_t v147 = (const void *)*MEMORY[0x263F2CFB8];
          uint64_t v148 = (const void *)*MEMORY[0x263F2C910];
          keyg = (void *)*MEMORY[0x263F2D440];
          int v149 = (float *)(a2 + 169);
          do
          {
            if (*((_DWORD *)v149 - 5) == 4)
            {
              if (v145 >= v139) {
                break;
              }
              CFStringRef v150 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              *(float *)&double v291 = *(v149 - 7);
              CFNumberRef v151 = CFNumberCreate(0, kCFNumberSInt32Type, &v291);
              CFDictionarySetValue(v150, v146, v151);
              CFRelease(v151);
              float v294 = *v149;
              CFNumberRef v152 = CFNumberCreate(0, kCFNumberSInt32Type, &v294);
              CFDictionarySetValue(v150, v147, v152);
              CFRelease(v152);
              int v293 = *((_DWORD *)v149 - 6);
              CFNumberRef v153 = CFNumberCreate(0, kCFNumberSInt32Type, &v293);
              CFDictionarySetValue(v150, v148, v153);
              CFRelease(v153);
              v304.origin.x = *(v149 - 4);
              v304.origin.y = *(v149 - 3);
              v304.size.width = *(v149 - 2);
              v304.size.height = *(v149 - 1);
              CFDictionaryRef v154 = CGRectCreateDictionaryRepresentation(v304);
              if (v154)
              {
                CFDictionaryRef v155 = v154;
                CFDictionarySetValue(v150, keyg, v154);
                CFRelease(v155);
              }
              CFArrayAppendValue(v142, v150);
              CFRelease(v150);
              ++v145;
            }
            v149 += 9;
            --v140;
          }
          while (v140);
        }
        CFMutableDictionaryRef v141 = v274;
        CFDictionarySetValue(v274, (const void *)*MEMORY[0x263F2C988], v142);
        CFNumberRef v144 = v265;
        CFDictionarySetValue(v274, (const void *)*MEMORY[0x263F2D620], v265);
        CFDictionarySetValue(v285, (const void *)*MEMORY[0x263F2C940], v274);
      }
      else
      {
        long long v230 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          long long v230 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v230;
        }
        if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR)) {
          H16ISP::GenerateRGBObjectDictionary(v230, v231, v232, v233, v234, v235, v236, v237);
        }
      }
      if (v141) {
        CFRelease(v141);
      }
      a3 = v251;
      if (v142) {
        CFRelease(v142);
      }
      if (v144) {
        CFRelease(v144);
      }
    }
    unsigned int v156 = a3[6];
    if (v156)
    {
      uint64_t v157 = a2[161];
      *(void *)uint64_t valuePtr = v252;
      CFMutableDictionaryRef v158 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      long long v159 = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
      CFNumberRef v160 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
      CFNumberRef v161 = v160;
      if (v158 && v159 && v160)
      {
        CFMutableDictionaryRef v266 = v160;
        uint64_t v275 = v158;
        if (v157)
        {
          unsigned int v162 = 0;
          uint64_t v163 = (const void *)*MEMORY[0x263F2C918];
          unsigned int v164 = (const void *)*MEMORY[0x263F2CFB8];
          CFMutableDictionaryRef v165 = (const void *)*MEMORY[0x263F2C910];
          keyh = (void *)*MEMORY[0x263F2D440];
          uint32_t v166 = (float *)(a2 + 169);
          do
          {
            if (*((_DWORD *)v166 - 5) == 5)
            {
              if (v162 >= v156) {
                break;
              }
              int v167 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              *(float *)&double v291 = *(v166 - 7);
              CFNumberRef v168 = CFNumberCreate(0, kCFNumberSInt32Type, &v291);
              CFDictionarySetValue(v167, v163, v168);
              CFRelease(v168);
              float v294 = *v166;
              CFNumberRef v169 = CFNumberCreate(0, kCFNumberSInt32Type, &v294);
              CFDictionarySetValue(v167, v164, v169);
              CFRelease(v169);
              int v293 = *((_DWORD *)v166 - 6);
              CFNumberRef v170 = CFNumberCreate(0, kCFNumberSInt32Type, &v293);
              CFDictionarySetValue(v167, v165, v170);
              CFRelease(v170);
              v305.origin.x = *(v166 - 4);
              v305.origin.y = *(v166 - 3);
              v305.size.width = *(v166 - 2);
              v305.size.height = *(v166 - 1);
              CFDictionaryRef v171 = CGRectCreateDictionaryRepresentation(v305);
              if (v171)
              {
                CFDictionaryRef v172 = v171;
                CFDictionarySetValue(v167, keyh, v171);
                CFRelease(v172);
              }
              CFArrayAppendValue(v159, v167);
              CFRelease(v167);
              ++v162;
            }
            v166 += 9;
            --v157;
          }
          while (v157);
        }
        CFMutableDictionaryRef v158 = v275;
        CFDictionarySetValue(v275, (const void *)*MEMORY[0x263F2C988], v159);
        CFNumberRef v161 = v266;
        CFDictionarySetValue(v275, (const void *)*MEMORY[0x263F2D620], v266);
        CFDictionarySetValue(v285, (const void *)*MEMORY[0x263F2C948], v275);
      }
      else
      {
        long long v238 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          long long v238 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v238;
        }
        if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR)) {
          H16ISP::GenerateRGBObjectDictionary(v238, v239, v240, v241, v242, v243, v244, v245);
        }
      }
      if (v158) {
        CFRelease(v158);
      }
      if (v159) {
        CFRelease(v159);
      }
      if (v161) {
        CFRelease(v161);
      }
    }
    pthread_mutex_lock(v248);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v249 + 368), (const void *)*MEMORY[0x263F2CD70], v285);
    pthread_mutex_unlock(v248);
    CFRelease(v285);
  }
  else
  {
    int v173 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      int v173 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v173;
    }
    if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t valuePtr = 136315138;
      *(void *)&valuePtr[4] = "GenerateRGBObjectDictionary";
      _os_log_impl(&dword_24680F000, v173, OS_LOG_TYPE_DEFAULT, "%s - [Exclaves]: Could not allocate memory for detected objects info dictionary!\n", valuePtr, 0xCu);
    }
  }
}

void H16ISP::H16ISPGraphExclaveIRObjectDetectionNode::~H16ISPGraphExclaveIRObjectDetectionNode(H16ISP::H16ISPGraphExclaveIRObjectDetectionNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

void H16ISP::H16ISPGraphExclaveRGBObjectDetectionNode::~H16ISPGraphExclaveRGBObjectDetectionNode(H16ISP::H16ISPGraphExclaveRGBObjectDetectionNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x18u);
}

uint64_t H16ISP::H16ISPFilterGraphManager::Deactivate(H16ISP::H16ISPFilterGraphManager *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = (void *)(v2 + 8 * (*((void *)this + 11) >> 9));
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (uint64_t *)(*v4 + 8 * (*((void *)this + 11) & 0x1FFLL));
  }
  while (1)
  {
    if (v3 == v2)
    {
      uint64_t v9 = 0;
    }
    else
    {
      unint64_t v8 = *((void *)this + 12) + *((void *)this + 11);
      uint64_t v9 = *(void *)(v2 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF);
    }
    if (v5 == (uint64_t *)v9) {
      break;
    }
    uint64_t v6 = *v5++;
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    if ((uint64_t *)((char *)v5 - *v4) == (uint64_t *)4096)
    {
      unint64_t v7 = (uint64_t *)v4[1];
      ++v4;
      uint64_t v5 = v7;
    }
    uint64_t v2 = *((void *)this + 8);
    uint64_t v3 = *((void *)this + 9);
  }
  return 0;
}

void H16ISP::H16ISPFilterGraphManager::~H16ISPFilterGraphManager(H16ISP::H16ISPFilterGraphManager *this)
{
  *(void *)this = &unk_26FAEB330;
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = (void *)(v2 + 8 * (*((void *)this + 11) >> 9));
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (void *)(*v4 + 8 * (*((void *)this + 11) & 0x1FFLL));
  }
  while (1)
  {
    if (v3 == v2)
    {
      uint64_t v8 = 0;
    }
    else
    {
      unint64_t v7 = *((void *)this + 12) + *((void *)this + 11);
      uint64_t v8 = *(void *)(v2 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF);
    }
    if (v5 == (void *)v8) {
      break;
    }
    if (*v5) {
      (*(void (**)(void))(*(void *)*v5 + 8))(*v5);
    }
    if ((void *)((char *)++v5 - *v4) == (void *)4096)
    {
      uint64_t v6 = (void *)v4[1];
      ++v4;
      uint64_t v5 = v6;
    }
    uint64_t v2 = *((void *)this + 8);
    uint64_t v3 = *((void *)this + 9);
  }
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)this + 7);
  std::deque<__CVBuffer *>::~deque[abi:ne180100]((void *)this + 1);
}

{
  uint64_t vars8;

  H16ISP::H16ISPFilterGraphManager::~H16ISPFilterGraphManager(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::ProjectorManager::setProjectorType(H16ISP::ProjectorManager *this, CFDictionaryRef theDict)
{
  H16ISP::ProjectorManager::setUserDefinedProjectorType(theDict, theDict);

  return H16ISP::ProjectorManager::setProjectorType(this, 0x2Fu);
}

CFDictionaryRef H16ISP::ProjectorManager::setUserDefinedProjectorType(CFDictionaryRef theDict, const __CFDictionary *a2)
{
  if (H16ISP::g_UserDefinedProjectorType)
  {
    CFRelease((CFTypeRef)H16ISP::g_UserDefinedProjectorType);
    H16ISP::g_UserDefinedProjectorCFNumberType Type = 0;
  }
  CFDictionaryRef result = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theDict);
  H16ISP::g_UserDefinedProjectorCFNumberType Type = (uint64_t)result;
  return result;
}

BOOL H16ISP::ProjectorManager::applyUserDefinedType(H16ISP::ProjectorManager *this)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (!H16ISP::g_UserDefinedProjectorType) {
    return 1;
  }
  CFTypeID v2 = CFGetTypeID((CFTypeRef)H16ISP::g_UserDefinedProjectorType);
  if (v2 != CFDictionaryGetTypeID()) {
    return 1;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)H16ISP::g_UserDefinedProjectorType, @"GenericProjectorTypeFrameRate");
  if (Value)
  {
    CFNumberRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue(v4, kCFNumberIntType, &valuePtr);
      CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)H16ISP::g_UserDefinedProjectorType, @"GenericProjectorTypeModes");
      if (!v6 || (v7 = v6, CFTypeID v8 = CFGetTypeID(v6), v8 != CFArrayGetTypeID()))
      {
        int v15 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v15 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v15;
        }
        BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
        if (result)
        {
          H16ISP::ProjectorManager::applyUserDefinedType();
          return 0;
        }
        return result;
      }
      CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)H16ISP::g_UserDefinedProjectorType, @"GenericProjectorTypeSequence");
      if (!v9 || (v10 = v9, CFTypeID v11 = CFGetTypeID(v9), v11 != CFArrayGetTypeID()))
      {
        int v16 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v16 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v16;
        }
        BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
        if (result)
        {
          H16ISP::ProjectorManager::applyUserDefinedType();
          return 0;
        }
        return result;
      }
      if (CFArrayGetCount(v10) >= 64)
      {
        BOOL v12 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          BOOL v12 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v12;
        }
        BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
        if (result)
        {
          H16ISP::ProjectorManager::applyUserDefinedType(v10, v12);
          return 0;
        }
        return result;
      }
      int Count = CFArrayGetCount(v7);
      if (Count + 28 <= *((_DWORD *)this + 5))
      {
        *((_DWORD *)this + 5) = 28;
        *((_DWORD *)this + 6) = Count + 28;
      }
      else
      {
        int v18 = *((_DWORD *)this + 6);
        if (v18 + Count > 64)
        {
          __int16 v38 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
          {
            __int16 v38 = os_log_create("com.apple.isp", "general");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v38;
          }
          BOOL result = os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
          if (result)
          {
            H16ISP::ProjectorManager::applyUserDefinedType();
            return 0;
          }
          return result;
        }
        *((_DWORD *)this + 5) = v18;
        *((_DWORD *)this + 6) = v18 + Count;
      }
      if (CFArrayGetCount(v7) < 1)
      {
        int v20 = 0;
      }
      else
      {
        CFIndex v19 = 0;
        int v20 = 0;
        while (2)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v19);
          CFTypeID v22 = CFGetTypeID(ValueAtIndex);
          if (v22 != CFArrayGetTypeID())
          {
            CFNumberRef v43 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              CFNumberRef v43 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v43;
            }
            BOOL result = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
            if (result)
            {
              H16ISP::ProjectorManager::applyUserDefinedType();
              return 0;
            }
            return result;
          }
          if (CFArrayGetCount((CFArrayRef)ValueAtIndex) != 6)
          {
            CFNumberRef v44 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              CFNumberRef v44 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v44;
            }
            BOOL result = os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
            if (result)
            {
              H16ISP::ProjectorManager::applyUserDefinedType((const __CFArray *)ValueAtIndex, v19, v44);
              return 0;
            }
            return result;
          }
          __int16 v50 = 1563;
          int v51 = *(_DWORD *)this;
          LODWORD(v52[0]) = 1;
          WORD3(v52[0]) = 1;
          memset((char *)v52 + 12, 0, 48);
          *(_OWORD *)((char *)&v52[3] + 8) = 0u;
          uint64_t v23 = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 5);
          TypeIOSurfaceID ID = CFNumberGetTypeID();
          if (TypeID != CFGetTypeID(v23))
          {
            CFNumberRef v45 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              CFNumberRef v45 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v45;
            }
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
              H16ISP::ProjectorManager::applyUserDefinedType();
            }
            return 0;
          }
          *(_DWORD *)int buf = 0;
          CFNumberGetValue((CFNumberRef)v23, kCFNumberIntType, buf);
          CFIndex v25 = 0;
          if (*(int *)buf > v20 || v19 == 0) {
            int v20 = *(_DWORD *)buf;
          }
          int v47 = v20;
          WORD2(v52[0]) = *((_WORD *)this + 10) + v19;
          CFNumberRef v27 = (_DWORD *)&v52[3] + 1;
          do
          {
            CFNumberRef v28 = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, v25);
            CFTypeID v29 = CFNumberGetTypeID();
            if (v29 != CFGetTypeID(v28))
            {
              unint64_t v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
              {
                unint64_t v30 = os_log_create("com.apple.isp", "general");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v30;
              }
              if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                H16ISP::ProjectorManager::applyUserDefinedType();
              }
              return 0;
            }
            CFNumberGetValue((CFNumberRef)v28, kCFNumberIntType, v27 - 10);
            *v27++ = *(_DWORD *)buf;
            ++v25;
          }
          while (v25 != 5);
          if (H16ISP::H16ISPDevice::ISP_SendCommand(*((H16ISP::H16ISPDevice **)this + 1), v49, 0x6Cu, 0, 0xFFFFFFFF))
          {
            CFDictionaryRef v46 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              CFDictionaryRef v46 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v46;
            }
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
              H16ISP::ProjectorManager::applyUserDefinedType((_WORD *)v52 + 2, v19, v46);
            }
            return 0;
          }
          ++v19;
          int v20 = v47;
          if (CFArrayGetCount(v7) > v19) {
            continue;
          }
          break;
        }
      }
      int v31 = v20;
      __int16 v50 = 1572;
      int v51 = *(_DWORD *)this;
      memset(v52, 0, 256);
      if (CFArrayGetCount(v10) >= 1)
      {
        CFIndex v32 = 0;
        while (1)
        {
          CFNumberRef v33 = CFArrayGetValueAtIndex(v10, v32);
          CFTypeID v34 = CFNumberGetTypeID();
          if (v34 != CFGetTypeID(v33)) {
            break;
          }
          int v48 = 0;
          CFNumberGetValue((CFNumberRef)v33, kCFNumberIntType, &v48);
          CFIndex v35 = v48;
          if (CFArrayGetCount(v7) <= v35)
          {
            uint64_t v40 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
            {
              uint64_t v40 = os_log_create("com.apple.isp", "general");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v40;
            }
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              int v41 = v48;
              CFIndex v42 = CFArrayGetCount(v7);
              *(_DWORD *)int buf = 67109632;
              int v55 = v32;
              __int16 v56 = 1024;
              int v57 = v41;
              __int16 v58 = 2048;
              CFIndex v59 = v42;
              _os_log_error_impl(&dword_24680F000, v40, OS_LOG_TYPE_ERROR, "User defined projector mode: sequence value %d refers to unknown mode %d (over the maximum %ld)\n", buf, 0x18u);
            }
            return 0;
          }
          __int16 v36 = &v49[2 * v32];
          *((_WORD *)v36 + 6) = *((_WORD *)this + 10) + v48;
          *((_WORD *)v36 + 7H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 1;
          if (CFArrayGetCount(v10) <= ++v32) {
            goto LABEL_57;
          }
        }
        int v39 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          int v39 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v39;
        }
        BOOL result = os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
        if (result)
        {
          H16ISP::ProjectorManager::applyUserDefinedType();
          return 0;
        }
        return result;
      }
LABEL_57:
      H16ISP::ProjectorManager::updateOnChange((H16ISP::H16ISPDevice **)this, v31, valuePtr << 8);
      if (H16ISP::H16ISPDevice::ISP_SendCommand(*((H16ISP::H16ISPDevice **)this + 1), v49, 0x12Cu, 0, 0xFFFFFFFF))
      {
        unsigned int v37 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
        {
          unsigned int v37 = os_log_create("com.apple.isp", "general");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v37;
        }
        BOOL result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
        if (result)
        {
          H16ISP::ProjectorManager::applyUserDefinedType();
          return 0;
        }
        return result;
      }
      return 1;
    }
  }
  unsigned int v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog == &_os_log_internal)
  {
    unsigned int v14 = os_log_create("com.apple.isp", "general");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_generalLog = (uint64_t)v14;
  }
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    H16ISP::ProjectorManager::applyUserDefinedType();
    return 0;
  }
  return result;
}

uint64_t H16ISP::ProjectorManager::getProjectorType(H16ISP::ProjectorManager *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t H16ISP::ProjectorManager::setEntry(H16ISP::H16ISPDevice **this, __int16 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12)
{
  __int16 v14 = 1563;
  int v15 = *(_DWORD *)this;
  int v16 = 1;
  __int16 v18 = 1;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  __int16 v17 = a2;
  int v26 = 0;
  int v27 = a4;
  int v19 = a3;
  int v20 = a5;
  int v28 = a6;
  int v29 = a8;
  int v21 = a7;
  int v22 = a9;
  int v23 = a11;
  int v30 = a10;
  int v31 = a12;
  return H16ISP::H16ISPDevice::ISP_SendCommand(this[1], v13, 0x6Cu, 0, 0xFFFFFFFF);
}

uint64_t H16ISP::ProjectorManager::setParams(uint64_t this, int a2, int a3, int a4)
{
  uint64_t v4 = this + 8 * a2;
  *(_DWORD *)(v4 + 32) = a3;
  *(_DWORD *)(v4 + 36) = a4;
  return this;
}

uint64_t H16ISP::ProjectorManager::getFloodProjectorCalibrationValue(H16ISP::ProjectorManager *this, H16ISP::H16ISPDevice *a2, _DWORD *a3, int *a4, int *a5)
{
  int v7 = (int)a2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  bzero(v11, 0x68uLL);
  __int16 v12 = 1565;
  int v13 = v7;
  uint64_t result = H16ISP::H16ISPDevice::ISP_SendCommand(this, v11, 0x68u, 0, 0xFFFFFFFF);
  if (!result)
  {
    int v10 = v15;
    *a3 = v14;
    *a4 = v10;
  }
  return result;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void OUTLINED_FUNCTION_1_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

uint64_t svd_os(uint64_t a1, double *a2, double *a3, double *a4, double *a5, int8x16_t a6, int8x16_t a7, int8x16_t a8)
{
  v82[53] = *(double *)MEMORY[0x263EF8340];
  if ((unint64_t)(a1 - 10) < 0xFFFFFFFFFFFFFFF7) {
    return 4294967197;
  }
  __int16 v12 = a2;
  uint64_t v14 = a1 - 1;
  if (a1 == 1)
  {
    a6.i64[0] = *(uint64_t *)a2;
    a7.i64[0] = 1.0;
    v15.f64[0] = NAN;
    v15.f64[1] = NAN;
    *(void *)a3 = vbslq_s8((int8x16_t)vnegq_f64(v15), a7, a6).u64[0];
    *a4 = fabs(*a2);
    *a5 = 1.0;
    if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) {
      return 0;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    householder(a1, a2, 1, a6, *(double *)a7.i64, a8);
    *(void *)a4 = v16;
    if ((v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    else
    {
      BOOL v75 = a5;
      double v76 = a3;
      uint64_t v17 = 0;
      uint64_t v8 = 0;
      uint64_t v72 = a4;
      uint64_t v73 = a1 - 2;
      unsigned int v77 = v12;
      uint64_t v18 = a1;
      uint64_t v71 = v14;
      uint64_t v70 = &v82[v14];
      while (1)
      {
        applyHouseholder(1, a1 + v8, a1 + v8 - 1, v12, 1, &v12[v18], a1);
        if (a1 + v8 == 2) {
          break;
        }
        householder(a1 + v8 - 1, &v12[v18], a1, v19, *(double *)v20.i64, v21);
        v82[v17] = v27;
        if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
          return -(int)v8;
        }
        applyHouseholder(0, a1 + v8 - 1, a1 + v8 - 1, &v12[v18], a1, &v12[v18 + 1], a1);
        householder(--v8 + a1, &v12[v18 + 1], 1, v28, v29, v30);
        a4[++v17] = v31;
        v12 += a1 + 1;
        if ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
          return v8;
        }
      }
      CFIndex v32 = a4;
      v82[v73] = v12[a1];
      double v33 = v12[v18 + 1];
      uint64_t v34 = v14;
      v72[v14] = v33;
      uint64_t v35 = v34 + v34 * a1;
      __int16 v36 = v76;
      v76[v35] = 1.0;
      if (a1 < 2)
      {
        CFNumberRef v63 = v75;
        v75[v35] = 1.0;
        *BOOL v75 = 1.0;
        CFNumberRef v64 = &v82[v14];
      }
      else
      {
        uint64_t v69 = a1 * a1;
        uint64_t v37 = (uint64_t)&v76[a1 * a1 - 2];
        unint64_t v74 = (v18 * 8) ^ 0xFFFFFFFFFFFFFFF8;
        uint64_t v38 = 8 * a1 * v14 - 8;
        int v39 = (char *)v76 + v38;
        uint64_t v40 = (char *)v77 + v38;
        uint64_t v41 = 1;
        uint64_t v42 = a1 - 2;
        do
        {
          uint64_t v43 = v34;
          uint64_t v34 = v42;
          uint64_t v78 = v37;
          CFNumberRef v44 = (void *)v37;
          uint64_t v45 = v41;
          if (v43 < a1)
          {
            do
            {
              *CFNumberRef v44 = 0;
              CFNumberRef v44 = (void *)((char *)v44 + v18 * 8);
              --v45;
            }
            while (v45);
          }
          uint64_t v46 = v34 + v34 * a1;
          applyHouseholder(1, a1 - v34, a1 - v34 - 1, &v77[v46], 1, &v76[v34 + v43 * a1], a1);
          double v33 = v77[v46];
          *(double *)v20.i64 = 1.0 - v33;
          v76[v46] = 1.0 - v33;
          if (v43 < a1)
          {
            uint64_t v47 = 0;
            double v33 = -v33;
            do
            {
              *(double *)v20.i64 = *(double *)&v40[8 * v47] * v33;
              *(void *)&v39[8 * v47++] = v20.i64[0];
            }
            while (v41 != v47);
          }
          ++v41;
          uint64_t v37 = v78 + v74;
          v39 += v74;
          v40 += v74;
          uint64_t v42 = v34 - 1;
        }
        while (v34 >= 1);
        v75[v71 + v71 * a1] = 1.0;
        uint64_t v48 = v71;
        if (a1 > 2)
        {
          uint64_t v49 = 0;
          unint64_t v79 = (v18 * 8) ^ 0xFFFFFFFFFFFFFFF8;
          uint64_t v50 = (uint64_t)&v75[v69 - 2];
          uint64_t v51 = (uint64_t)&v77[v69 - 3];
          uint64_t v52 = 1;
          uint64_t v53 = a1 - 2;
          do
          {
            uint64_t v54 = v48;
            uint64_t v55 = v53;
            if (v48 < a1) {
              bzero((char *)&v75[v71 * a1 - 1] + v79 * v49, 8 * v49 + 8);
            }
            uint64_t v56 = a1 - v55;
            uint64_t v57 = v55 * a1;
            uint64_t v58 = v55;
            CFIndex v59 = &v77[v48 + v55 * a1];
            uint64_t v48 = v58;
            uint64_t v60 = &v75[v57 + v58];
            applyHouseholder(0, v56, v56, v59 - 2, a1, v60, a1);
            double v33 = *(v59 - 2);
            *(double *)v20.i64 = 1.0 - v33;
            *uint64_t v60 = 1.0 - v33;
            if (v54 < a1)
            {
              uint64_t v61 = 0;
              double v33 = -v33;
              uint64_t v62 = v52;
              do
              {
                *(double *)v20.i64 = *(double *)(v51 + v61) * v33;
                *(void *)(v50 + v61) = v20.i64[0];
                v61 += v18 * 8;
                --v62;
              }
              while (v62);
            }
            uint64_t v53 = v48 - 1;
            ++v49;
            ++v52;
            v50 += v79;
            v51 += v79;
          }
          while (v49 != v73);
        }
        CFNumberRef v63 = v75;
        __int16 v36 = v76;
        *BOOL v75 = 1.0;
        CFIndex v32 = v72;
        CFNumberRef v64 = v70;
        uint64_t v65 = 1;
        uint64_t v66 = a1;
        do
        {
          v75[v66] = 0.0;
          v75[v65++] = 0.0;
          v66 += a1;
        }
        while (a1 != v65);
      }
      uint64_t v80 = a1;
      uint64_t v81 = 0;
      int v67 = dbdsqr_(&v80, &v80, &v80, v32, v82, v63, &v80, v36, v33, v20, v21, v22, v23, v24, v25, v26, &v80, v64, &v81);
      return (v67 | v81) != 0;
    }
  }
}

uint64_t householder(uint64_t result, double *a2, uint64_t a3, int8x16_t a4, double a5, int8x16_t a6)
{
  if (result < 2) {
    goto LABEL_5;
  }
  uint64_t v6 = result - 1;
  uint64_t v7 = 8 * a3;
  a4.i64[0] = 0;
  uint64_t v8 = 8 * a3;
  uint64_t v9 = result - 1;
  do
  {
    *(double *)a4.i64 = *(double *)a4.i64 + *(double *)((char *)a2 + v8) * *(double *)((char *)a2 + v8);
    v8 += v7;
    --v9;
  }
  while (v9);
  if (*(double *)a4.i64 == 0.0)
  {
LABEL_5:
    *a2 = 0.0;
  }
  else
  {
    double v10 = *a2;
    *(double *)a4.i64 = sqrt(*(double *)a4.i64 + v10 * v10);
    *(double *)a6.i64 = -*a2;
    v11.f64[0] = NAN;
    v11.f64[1] = NAN;
    double v12 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v11), a4, a6).i64;
    *a2 = (v12 - *a2) / v12;
    int v13 = &a2[a3];
    double v14 = 1.0 / (v10 - v12);
    do
    {
      double *v13 = v14 * *v13;
      int v13 = (double *)((char *)v13 + v7);
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t applyHouseholder(uint64_t result, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double *a6, uint64_t a7)
{
  if (a2 >= 2 && a3 >= 1 && *a4 != 0.0)
  {
    if (result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * a5;
      uint64_t v9 = a6;
      do
      {
        uint64_t v10 = 8 * a5;
        uint64_t v11 = 1;
        double v12 = a6[v7 * a7];
        do
        {
          double v12 = v12 + *(double *)((char *)a4 + v10) * v9[v11++];
          v10 += v8;
        }
        while (a2 != v11);
        double v13 = v12 * *a4;
        a6[v7 * a7] = a6[v7 * a7] - v13;
        double v14 = &a4[a5];
        for (uint64_t i = 1; i != a2; ++i)
        {
          v9[i] = v9[i] + -v13 * *v14;
          double v14 = (double *)((char *)v14 + v8);
        }
        ++v7;
        v9 += a7;
      }
      while (v7 != a3);
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = 8 * a7;
      uint64_t v18 = &a6[a7];
      uint64_t v19 = 8 * a5;
      do
      {
        double v20 = a6[v16];
        if ((unint64_t)a3 < 2)
        {
          a6[v16] = v20 - v20 * *a4;
        }
        else
        {
          uint64_t v21 = 8 * a5;
          int8x16_t v22 = v18;
          uint64_t v23 = 1;
          double v24 = a6[v16];
          do
          {
            double v24 = v24 + *(double *)((char *)a4 + v21) * *v22;
            ++v23;
            int8x16_t v22 = (double *)((char *)v22 + v17);
            v21 += v19;
          }
          while (a3 != v23);
          double v25 = v24 * *a4;
          a6[v16] = v20 - v25;
          uint64_t v26 = 0;
          double v27 = &a4[a5];
          uint64_t v28 = a3 - 1;
          do
          {
            *(double *)((char *)v18 + v26) = *(double *)((char *)v18 + v26) + -v25 * *v27;
            v26 += v17;
            double v27 = (double *)((char *)v27 + v19);
            --v28;
          }
          while (v28);
        }
        ++v16;
        ++v18;
      }
      while (v16 != a2);
    }
  }
  return result;
}

uint64_t bidiagonalSVD(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, __n128 a12, __n128 a13, int8x16_t a14)
{
  uint64_t v16 = a1;
  uint64_t v17 = 0;
  int v14 = dbdsqr_(&v16, &v16, &v16, a2, a3, a5, &v16, a4, a7, a8, a9, a10, a11, a12, a13, a14, &v16, a6, &v17);
  return v14 | v17;
}

uint64_t dbdsqr_(uint64_t *a1, uint64_t *a2, uint64_t *a3, double *a4, double *a5, double *a6, uint64_t *a7, double *a8, double a9, int8x16_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, __n128 a14, __n128 a15, int8x16_t a16, uint64_t *a17, double *a18, uint64_t *a19)
{
  double v266 = 0.0;
  v267[0] = 0;
  uint64_t v21 = *a7;
  uint64_t v22 = *a17;
  double v264 = 0.0;
  double v265 = 0.0;
  double v262 = 0.0;
  uint64_t v263 = 0;
  double v260 = 0.0;
  double v261 = 0.0;
  double v258 = 0.0;
  double v259 = 0.0;
  double v257 = 0.0;
  *a19 = 0;
  uint64_t v23 = *a1;
  if (!*a1) {
    return 0;
  }
  double v24 = a7;
  double v27 = a4 - 1;
  uint64_t v28 = v23 - 1;
  if (v23 == 1) {
    goto LABEL_18;
  }
  double v29 = a5;
  double v30 = fabs(*a4);
  if (*a4 != 0.0)
  {
    uint64_t v31 = v23 - 2;
    if (v23 >= 2)
    {
      CFIndex v32 = a4 + 1;
      double v33 = a5;
      double v34 = v30;
      do
      {
        double v35 = *v32++;
        double v36 = fabs(v35);
        double v37 = *v33++;
        *(double *)a12.i64 = v34 + fabs(v37);
        double v34 = v36 * (v34 / *(double *)a12.i64);
        if (v30 >= v34) {
          double v30 = v34;
        }
        BOOL v38 = v30 == 0.0 || v31-- == 0;
      }
      while (!v38);
    }
  }
  double v39 = v30 / sqrt((double)v23) * 9.99200722e-15;
  uint64_t v237 = 6 * v23 * v23;
  a11.i64[0] = 0x8000000000000;
  if (v39 <= (double)v237 * COERCE_DOUBLE(0x8000000000000)) {
    double v40 = (double)v237 * COERCE_DOUBLE(0x8000000000000);
  }
  else {
    double v40 = v39;
  }
  if (v23 <= 1) {
    goto LABEL_17;
  }
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v204 = &a6[~v21];
  uint64_t v223 = &a8[~v22];
  long long v238 = a5 - 1;
  uint64_t v219 = (double *)((char *)a18 + ((16 * v28) | 8) - 8);
  uint64_t v220 = a18 - 1;
  long long v222 = a5 - 2;
  uint64_t v71 = a4 + 1;
  uint64_t v211 = &a18[3 * v23 - 5];
  uint64_t v210 = &a18[2 * v23 - 4];
  int v251 = &a18[v23 - 1];
  uint64_t v216 = 8 * v23;
  uint64_t v203 = a5 + 1;
  uint64_t v72 = -1;
  uint64_t v218 = &a18[3 * v28];
  v73.f64[0] = NAN;
  v73.f64[1] = NAN;
  float64x2_t v74 = vnegq_f64(v73);
  int8x16_t v206 = (int8x16_t)v74;
  uint64_t v208 = a18 - 2;
  uint64_t v209 = a18 - 3;
  double v217 = 0.0;
  uint64_t v249 = &a18[2 * v23 - 2];
  uint64_t v250 = &a18[3 * v23 - 3];
  double v75 = 0.0;
  double v76 = 0.0;
  double v77 = 0.0;
  double v78 = 0.0;
  a15.n128_u64[0] = 0;
  a14.n128_u64[0] = 0;
  uint64_t v79 = -1;
  uint64_t v221 = v22;
  uint64_t v229 = a4 - 1;
  uint64_t v207 = a3;
  long long v214 = a2;
  uint64_t v239 = a1;
  uint64_t v205 = v21;
  while (2)
  {
    BOOL v80 = v69 > v237;
    if (v69 <= v237)
    {
      uint64_t v81 = v23 - 1;
      double v82 = &v229[v23];
      CFNumberRef v83 = &v238[v23 - 1];
      uint64_t v215 = &v229[v23 - 1];
      uint64_t v213 = v23;
      CFNumberRef v84 = &v222[v23];
      CFNumberRef v85 = &a4[v23 - 2];
      uint64_t v231 = v82;
      uint64_t v232 = v23 - 2;
      uint64_t v86 = v72;
      uint64_t v252 = v216 + 8 * v23;
      uint64_t v254 = v23;
      uint64_t v233 = v83;
      uint64_t v224 = v85;
      uint64_t v225 = v84;
LABEL_47:
      uint64_t v72 = v86;
      while (2)
      {
        uint64_t v87 = 0;
        v74.f64[0] = fabs(*v82);
        while (1)
        {
          *(double *)a10.i64 = fabs(v84[v87]);
          if (*(double *)a10.i64 <= v40) {
            break;
          }
          *(double *)a11.i64 = fabs(v85[v87]);
          if (v74.f64[0] <= *(double *)a11.i64) {
            v74.f64[0] = *(double *)a11.i64;
          }
          if (v74.f64[0] <= *(double *)a10.i64) {
            v74.f64[0] = *(double *)a10.i64;
          }
          --v87;
          if (!(v81 + v87))
          {
            uint64_t v88 = 0;
            goto LABEL_58;
          }
        }
        v84[v87] = 0.0;
        if (v87)
        {
          uint64_t v88 = v81 + v87;
LABEL_58:
          uint64_t v86 = v88 + 1;
          if (v88 + 1 != v81)
          {
            if (v88 >= v79 || v23 < v72)
            {
              *(double *)a16.i64 = a4[v88];
              double v90 = fabs(*(double *)a16.i64);
              v19.i64[0] = *(uint64_t *)v82;
              double v89 = fabs(*v82);
              if (v90 >= v89) {
                goto LABEL_65;
              }
              uint64_t v70 = 2;
            }
            else
            {
              if (v70 == 1)
              {
                v19.i64[0] = *(uint64_t *)v82;
                double v89 = fabs(*v82);
LABEL_65:
                *(double *)a11.i64 = v89 * 9.99200722e-15;
                if (fabs(*v83) > *(double *)a11.i64)
                {
                  *(double *)a16.i64 = a4[v88];
                  double v91 = fabs(*(double *)a16.i64);
                  if (v23 > v86)
                  {
                    uint64_t v92 = v88;
                    *(double *)a11.i64 = v91;
                    while (1)
                    {
                      *(double *)a12.i64 = fabs(v29[v92]);
                      *(double *)a13.i64 = *(double *)a11.i64 * 9.99200722e-15;
                      if (*(double *)a12.i64 <= *(double *)a11.i64 * 9.99200722e-15) {
                        break;
                      }
                      *(double *)a11.i64 = *(double *)a11.i64
                                         / (*(double *)a11.i64 + *(double *)a12.i64)
                                         * fabs(v71[v92]);
                      if (v91 >= *(double *)a11.i64) {
                        double v91 = *(double *)a11.i64;
                      }
                      if (v81 == ++v92)
                      {
                        v267[0] = v81;
                        uint64_t v70 = 1;
                        int v97 = 1;
                        goto LABEL_91;
                      }
                    }
                    uint64_t v96 = v92 + 1;
                    uint64_t v70 = 1;
                    goto LABEL_88;
                  }
                  v267[0] = v81;
                  int v97 = 1;
                  uint64_t v70 = 1;
                  goto LABEL_91;
                }
                CFNumberRef v93 = v83;
                uint64_t v70 = 1;
                goto LABEL_84;
              }
              *(double *)a16.i64 = a4[v88];
              double v90 = fabs(*(double *)a16.i64);
            }
            CFNumberRef v93 = &v29[v88];
            *(double *)a11.i64 = fabs(*v93);
            if (*(double *)a11.i64 > v90 * 9.99200722e-15)
            {
              v19.i64[0] = *(uint64_t *)v82;
              double v91 = fabs(*v82);
              if (v81 > v88)
              {
                uint64_t v94 = v232;
                *(double *)a11.i64 = v91;
                while (1)
                {
                  *(double *)a12.i64 = fabs(v29[v94]);
                  *(double *)a13.i64 = *(double *)a11.i64 * 9.99200722e-15;
                  if (*(double *)a12.i64 <= *(double *)a11.i64 * 9.99200722e-15) {
                    break;
                  }
                  *(double *)a11.i64 = *(double *)a11.i64 / (*(double *)a11.i64 + *(double *)a12.i64) * fabs(a4[v94]);
                  if (v91 >= *(double *)a11.i64) {
                    double v91 = *(double *)a11.i64;
                  }
                  if (v94-- <= v88) {
                    goto LABEL_90;
                  }
                }
                uint64_t v96 = v94 + 1;
LABEL_88:
                v238[v96] = 0.0;
                if (!v80) {
                  continue;
                }
                goto LABEL_242;
              }
LABEL_90:
              int v97 = 0;
              v267[0] = v88 + 1;
LABEL_91:
              uint64_t v98 = *v239;
              uint64_t v99 = ~v88;
              __n128 v241 = a15;
              __n128 v243 = a14;
              uint64_t v240 = v88 + 1;
              uint64_t v245 = v88;
              if (v91 / v74.f64[0] * ((double)*v239 * 9.99200722e-15) <= 1.11022302e-16) {
                goto LABEL_97;
              }
              int8x16_t v226 = a16;
              int8x16_t v246 = v19;
              if (v97)
              {
                double v100 = fabs(*(double *)a16.i64);
                CFNumberRef v101 = a3;
                uint64_t v102 = v69;
                uint64_t v103 = *v239;
                singularValues2x2(*v215, *v83, *(double *)v19.i64, &v260, &v266);
                int8x16_t v19 = v246;
                a16 = v226;
                uint64_t v98 = v103;
                unsigned int v105 = a4 + 1;
                CFNumberRef v83 = v233;
                __n128 v107 = v241;
                __n128 v106 = v243;
                uint64_t v69 = v102;
                uint64_t v86 = v240;
                double v82 = v231;
                a3 = v101;
                double v24 = a7;
              }
              else
              {
                double v100 = fabs(*(double *)v19.i64);
                int v108 = v24;
                CFNumberRef v109 = a3;
                uint64_t v110 = v69;
                uint64_t v111 = *v239;
                singularValues2x2(*(double *)a16.i64, a5[v88], v229[v88 + 2], &v260, &v266);
                int8x16_t v19 = v246;
                a16 = v226;
                uint64_t v98 = v111;
                unsigned int v105 = a4 + 1;
                CFNumberRef v83 = v233;
                __n128 v107 = v241;
                __n128 v106 = v243;
                uint64_t v69 = v110;
                uint64_t v86 = v240;
                double v82 = v231;
                a3 = v109;
                double v24 = v108;
                a2 = v214;
              }
              uint64_t v23 = v254;
              if (v100 <= 0.0 || v260 / v100 * (v260 / v100) >= 1.11022302e-16)
              {
                uint64_t v112 = v69 + v254 + v99;
                if (v260 != 0.0)
                {
                  double v147 = v266;
                  if (v97)
                  {
                    v104.i64[0] = 1.0;
                    double v148 = (fabs(*(double *)a16.i64) - v260)
                         * (*(double *)vbslq_s8(v206, v104, a16).i64 + v260 / *(double *)a16.i64);
                    uint64_t v149 = v254 - v86;
                    double v29 = a5;
                    if (v254 > v86)
                    {
                      uint64_t v150 = 0;
                      double v151 = a5[v245];
                      CFNumberRef v152 = &v203[v245];
                      uint64_t v153 = v86;
                      CFDictionaryRef v154 = &v105[v245];
                      do
                      {
                        if (v151 == 0.0)
                        {
                          v106.n128_u64[0] = 1.0;
                          v107.n128_u64[0] = 0;
                        }
                        else if (v148 == 0.0)
                        {
                          v106.n128_u64[0] = 0;
                          v107.n128_u64[0] = 1.0;
                          double v148 = v151;
                        }
                        else
                        {
                          double v155 = sqrt(v151 * v151 + v148 * v148);
                          BOOL v156 = fabs(v148) > fabs(v151);
                          BOOL v157 = v148 / v155 < 0.0;
                          if (v156 && v157) {
                            v107.n128_f64[0] = -(v151 / v155);
                          }
                          else {
                            v107.n128_f64[0] = v151 / v155;
                          }
                          if (v156 && v157) {
                            v106.n128_f64[0] = -(v148 / v155);
                          }
                          else {
                            v106.n128_f64[0] = v148 / v155;
                          }
                          if (v156 && v157) {
                            double v148 = -v155;
                          }
                          else {
                            double v148 = v155;
                          }
                          if ((*(void *)&v148 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                            return 0xFFFFFFFFLL;
                          }
                        }
                        if (v153 > v86) {
                          v152[v150 - 2] = v148;
                        }
                        double v158 = v154[v150 - 1];
                        double v159 = v152[v150 - 1];
                        double v147 = v107.n128_f64[0] * v159 + v106.n128_f64[0] * v158;
                        v152[v150 - 1] = v106.n128_f64[0] * v159 - v107.n128_f64[0] * v158;
                        double v160 = v154[v150];
                        double v151 = v107.n128_f64[0] * v160;
                        double v161 = v106.n128_f64[0] * v160;
                        v154[v150] = v161;
                        if (v151 == 0.0)
                        {
                          double v78 = 1.0;
                          double v77 = 0.0;
                        }
                        else if (v147 == 0.0)
                        {
                          double v78 = 0.0;
                          double v77 = 1.0;
                          double v147 = v151;
                        }
                        else
                        {
                          double v162 = sqrt(v151 * v151 + v147 * v147);
                          BOOL v163 = fabs(v147) > fabs(v151);
                          BOOL v164 = v147 / v162 < 0.0;
                          if (v163 && v164) {
                            double v77 = -(v151 / v162);
                          }
                          else {
                            double v77 = v151 / v162;
                          }
                          if (v163 && v164) {
                            double v78 = -(v147 / v162);
                          }
                          else {
                            double v78 = v147 / v162;
                          }
                          if (v163 && v164) {
                            double v147 = -v162;
                          }
                          else {
                            double v147 = v162;
                          }
                          if ((*(void *)&v147 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                            return 0xFFFFFFFFLL;
                          }
                        }
                        v154[v150 - 1] = v147;
                        double v165 = v152[v150 - 1];
                        v154[v150] = v78 * v161 - v77 * v165;
                        if (v153 < v81)
                        {
                          double v166 = v152[v150];
                          double v151 = v77 * v166;
                          v152[v150] = v78 * v166;
                        }
                        ++v153;
                        double v148 = v161 * v77 + v78 * v165;
                        a18[v150] = v106.n128_f64[0];
                        v251[v150] = v107.n128_f64[0];
                        v249[v150] = v78;
                        v250[v150++] = v77;
                      }
                      while (v254 != v153);
                    }
                    __n128 v241 = v107;
                    __n128 v243 = v106;
                    uint64_t v227 = v70;
                    uint64_t v234 = v112;
                    double v266 = v147;
                    double *v83 = v148;
                    uint64_t v167 = v149 + 1;
                    v267[0] = v149 + 1;
                    dlasr_("L", "F", v267, a2, a18, &v220[v98], &a6[v245], v24);
                    v267[0] = v167;
                    uint64_t v22 = v221;
                    dlasr_("R", "F", a3, v267, v219, v218, &v223[v86 * v221 + 1], a17);
                    CFNumberRef v83 = v233;
                    if (fabs(*v233) <= v40) {
                      *uint64_t v233 = 0.0;
                    }
LABEL_127:
                    uint64_t v23 = v254;
                    uint64_t v69 = v234;
                    uint64_t v71 = a4 + 1;
                    CFNumberRef v84 = v225;
                    uint64_t v70 = v227;
                    a15 = v241;
                    a14 = v243;
                    CFNumberRef v85 = v224;
                    uint64_t v86 = v240;
                    goto LABEL_152;
                  }
                  v104.i64[0] = 1.0;
                  double v168 = (fabs(*(double *)v19.i64) - v260)
                       * (*(double *)vbslq_s8(v206, v104, v19).i64 + v260 / *(double *)v19.i64);
                  uint64_t v169 = v245 + 2;
                  double v29 = a5;
                  if (v254 >= v245 + 2)
                  {
                    double v170 = *v83;
                    CFDictionaryRef v171 = &v211[-v245];
                    CFDictionaryRef v172 = &v210[-v245];
                    int v173 = &v209[-v245];
                    long long v174 = v222;
                    uint64_t v175 = a4 - 2;
                    uint64_t v176 = v254;
                    uint64_t v177 = &v208[-v245];
                    do
                    {
                      if (v170 == 0.0)
                      {
                        v106.n128_u64[0] = 1.0;
                        v107.n128_u64[0] = 0;
                      }
                      else if (v168 == 0.0)
                      {
                        v106.n128_u64[0] = 0;
                        v107.n128_u64[0] = 1.0;
                        double v168 = v170;
                      }
                      else
                      {
                        double v178 = sqrt(v170 * v170 + v168 * v168);
                        BOOL v179 = fabs(v168) > fabs(v170);
                        BOOL v180 = v168 / v178 < 0.0;
                        if (v179 && v180) {
                          v107.n128_f64[0] = -(v170 / v178);
                        }
                        else {
                          v107.n128_f64[0] = v170 / v178;
                        }
                        if (v179 && v180) {
                          v106.n128_f64[0] = -(v168 / v178);
                        }
                        else {
                          v106.n128_f64[0] = v168 / v178;
                        }
                        if (v179 && v180) {
                          double v168 = -v178;
                        }
                        else {
                          double v168 = v178;
                        }
                        if ((*(void *)&v168 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                          return 0xFFFFFFFFLL;
                        }
                      }
                      if (v176 < v254) {
                        v174[v213 + 1] = v168;
                      }
                      double v181 = v174[v213];
                      double v182 = v175[v213 + 1];
                      v174[v213] = v106.n128_f64[0] * v181 - v107.n128_f64[0] * v182;
                      double v147 = v107.n128_f64[0] * v181 + v106.n128_f64[0] * v182;
                      double v183 = v175[v213];
                      double v170 = v107.n128_f64[0] * v183;
                      double v184 = v106.n128_f64[0] * v183;
                      v175[v213] = v184;
                      if (v170 == 0.0)
                      {
                        double v78 = 1.0;
                        double v77 = 0.0;
                      }
                      else if (v147 == 0.0)
                      {
                        double v78 = 0.0;
                        double v77 = 1.0;
                        double v147 = v170;
                      }
                      else
                      {
                        double v185 = sqrt(v170 * v170 + v147 * v147);
                        BOOL v186 = fabs(v147) > fabs(v170);
                        BOOL v187 = v147 / v185 < 0.0;
                        if (v186 && v187) {
                          double v77 = -(v170 / v185);
                        }
                        else {
                          double v77 = v170 / v185;
                        }
                        if (v186 && v187) {
                          double v78 = -(v147 / v185);
                        }
                        else {
                          double v78 = v147 / v185;
                        }
                        if (v186 && v187) {
                          double v147 = -v185;
                        }
                        else {
                          double v147 = v185;
                        }
                        if ((*(void *)&v147 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                          return 0xFFFFFFFFLL;
                        }
                      }
                      v175[v213 + 1] = v147;
                      double v188 = v174[v213];
                      v175[v213] = v78 * v184 - v77 * v188;
                      if (v176 > v169)
                      {
                        double v189 = v174[v213 - 1];
                        double v170 = v77 * v189;
                        v174[v213 - 1] = v78 * v189;
                      }
                      --v176;
                      v177[v213] = v106.n128_f64[0];
                      *(double *)((char *)v173 + v252) = -v107.n128_f64[0];
                      v172[v213] = v78;
                      v171[v213] = -v77;
                      double v168 = v184 * v77 + v78 * v188;
                      --v171;
                      --v172;
                      --v173;
                      --v177;
                      --v175;
                      --v174;
                    }
                    while (v176 + 1 > v169);
                  }
                  __n128 v242 = v107;
                  __n128 v244 = v106;
                  double v266 = v147;
                  double v190 = 0.0;
                  if (fabs(v168) > v40) {
                    double v190 = v168;
                  }
                  a5[v245] = v190;
                  v267[0] = v254 - v86 + 1;
                  uint64_t v235 = v112;
                  dlasr_("L", "B", v267, a2, v219, v218, &a6[v245], v24);
                  v267[0] = v254 - v86 + 1;
                  uint64_t v22 = v221;
                  double v82 = v231;
                  dlasr_("R", "B", a3, v267, a18, &v220[*v239], &v223[v86 * v221 + 1], a17);
                  uint64_t v71 = a4 + 1;
                  CFNumberRef v83 = v233;
                  a15 = v242;
                  a14 = v244;
                  uint64_t v69 = v235;
                  uint64_t v23 = v254;
LABEL_151:
                  CFNumberRef v85 = v224;
                  CFNumberRef v84 = v225;
LABEL_152:
                  uint64_t v79 = v23;
                  BOOL v80 = v69 > v237;
                  if (v69 <= v237) {
                    goto LABEL_47;
                  }
                  goto LABEL_242;
                }
              }
              else
              {
LABEL_97:
                double v260 = 0.0;
                uint64_t v112 = v69 + v23 + v99;
              }
              double v261 = 1.0;
              uint64_t v234 = v112;
              if (v97)
              {
                uint64_t v113 = v23 - v86;
                if (v23 > v86)
                {
                  uint64_t v247 = v23 - v86;
                  uint64_t v114 = 0;
                  uint64_t v115 = &v238[v245];
                  double v116 = 1.0;
                  uint64_t v117 = v86;
                  double v118 = 1.0;
                  CFNumberRef v119 = &a4[v245];
                  while (1)
                  {
                    double v120 = v118 * v119[v114];
                    double v121 = v115[v114 + 1];
                    double v122 = 0.0;
                    if (v121 == 0.0)
                    {
                      double v121 = v118 * v119[v114];
                      double v118 = 1.0;
                    }
                    else if (v120 == 0.0)
                    {
                      double v118 = 0.0;
                      double v122 = 1.0;
                    }
                    else
                    {
                      double v123 = sqrt(v121 * v121 + v120 * v120);
                      double v124 = v121 / v123;
                      BOOL v125 = fabs(v120) > fabs(v121);
                      BOOL v126 = v120 / v123 < 0.0;
                      if (v125 && v126) {
                        double v121 = -v123;
                      }
                      else {
                        double v121 = v123;
                      }
                      if (v125 && v126) {
                        double v118 = -(v120 / v123);
                      }
                      else {
                        double v118 = v120 / v123;
                      }
                      if (v125 && v126) {
                        double v122 = -v124;
                      }
                      else {
                        double v122 = v124;
                      }
                      if ((*(void *)&v121 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                        return 0xFFFFFFFFLL;
                      }
                    }
                    if (v117 > v86) {
                      v115[v114] = v75 * v121;
                    }
                    if (givensRotation(v116 * v121, v122 * v119[v114 + 1], &v261, &v258, &v119[v114])) {
                      return 0xFFFFFFFFLL;
                    }
                    a18[v114] = v118;
                    v251[v114] = v122;
                    double v116 = v261;
                    v249[v114] = v261;
                    ++v117;
                    double v75 = v258;
                    v250[v114++] = v258;
                    if (v254 == v117)
                    {
                      uint64_t v227 = v70;
                      v19.i64[0] = *(uint64_t *)v82;
                      uint64_t v98 = *v239;
                      double v76 = v75;
                      a3 = v207;
                      a2 = v214;
                      double v29 = a5;
                      CFNumberRef v83 = v233;
                      uint64_t v127 = v245;
                      uint64_t v113 = v247;
                      goto LABEL_124;
                    }
                  }
                }
                uint64_t v227 = v70;
                double v121 = v266;
                double v116 = 1.0;
                double v118 = 1.0;
                double v29 = a5;
                double v76 = v217;
                uint64_t v127 = v245;
LABEL_124:
                double v266 = v121;
                *double v82 = v118 * *(double *)v19.i64 * v116;
                double *v83 = v118 * *(double *)v19.i64 * v76;
                uint64_t v132 = v113 + 1;
                v267[0] = v113 + 1;
                dlasr_("L", "F", v267, a2, a18, &v220[v98], &a6[v127], v24);
                v267[0] = v132;
                uint64_t v22 = v221;
                dlasr_("R", "F", a3, v267, v219, v218, &v223[v240 * v221 + 1], a17);
                CFNumberRef v83 = v233;
                double v217 = v76;
                if (fabs(*v233) <= v40) {
                  *uint64_t v233 = 0.0;
                }
                double v75 = v76;
                goto LABEL_127;
              }
              uint64_t v128 = v245;
              if (v23 >= v245 + 2)
              {
                uint64_t v133 = &v211[-v245];
                CFNumberRef v134 = &v210[-v245];
                double v130 = 1.0;
                CFNumberRef v135 = &v209[-v245];
                CFNumberRef v136 = v222;
                CFDictionaryRef v137 = a4;
                uint64_t v138 = v23;
                double v131 = 1.0;
                unsigned int v139 = &v208[-v245];
                while (1)
                {
                  double v140 = v131 * v137[v213 - 1];
                  double v129 = v136[v23];
                  double v141 = 0.0;
                  if (v129 == 0.0)
                  {
                    double v129 = v131 * v137[v213 - 1];
                    double v131 = 1.0;
                  }
                  else if (v140 == 0.0)
                  {
                    double v131 = 0.0;
                    double v141 = 1.0;
                  }
                  else
                  {
                    double v142 = sqrt(v129 * v129 + v140 * v140);
                    double v143 = v129 / v142;
                    BOOL v144 = fabs(v140) > fabs(v129);
                    BOOL v145 = v140 / v142 < 0.0;
                    if (v144 && v145) {
                      double v129 = -v142;
                    }
                    else {
                      double v129 = v142;
                    }
                    if (v144 && v145) {
                      double v131 = -(v140 / v142);
                    }
                    else {
                      double v131 = v140 / v142;
                    }
                    if (v144 && v145) {
                      double v141 = -v143;
                    }
                    else {
                      double v141 = v143;
                    }
                    if ((*(void *)&v129 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                      return 0xFFFFFFFFLL;
                    }
                  }
                  if (v138 < v23) {
                    v136[v213 + 1] = v76 * v129;
                  }
                  if (givensRotation(v130 * v129, v141 * v137[v213 - 2], &v261, &v258, &v137[v213 - 1])) {
                    return 0xFFFFFFFFLL;
                  }
                  --v138;
                  v139[v213] = v131;
                  *(double *)((char *)v135 + v252) = -v141;
                  double v130 = v261;
                  v134[v213] = v261;
                  double v76 = v258;
                  v133[v213] = -v258;
                  --v133;
                  --v134;
                  --v135;
                  --v139;
                  --v137;
                  --v136;
                  uint64_t v23 = v254;
                  if (v138 + 1 <= v245 + 2)
                  {
                    uint64_t v128 = v245;
                    *(double *)a16.i64 = a4[v245];
                    double v217 = v76;
                    double v75 = v76;
                    double v24 = a7;
                    a3 = v207;
                    a2 = v214;
                    double v29 = a5;
                    uint64_t v86 = v240;
                    goto LABEL_148;
                  }
                }
              }
              double v129 = v266;
              double v130 = 1.0;
              double v131 = 1.0;
              double v29 = a5;
LABEL_148:
              double v266 = v129;
              a4[v128] = v131 * *(double *)a16.i64 * v130;
              v29[v128] = v131 * *(double *)a16.i64 * v75;
              uint64_t v146 = v23 - v86 + 1;
              v267[0] = v146;
              dlasr_("L", "B", v267, a2, v219, v218, &a6[v128], v24);
              v267[0] = v146;
              uint64_t v22 = v221;
              dlasr_("R", "B", a3, v267, a18, &v220[*v239], &v223[v86 * v221 + 1], a17);
              if (fabs(v29[v245]) <= v40) {
                v29[v245] = 0.0;
              }
              double v76 = v75;
              uint64_t v23 = v254;
              CFNumberRef v83 = v233;
              uint64_t v69 = v234;
              uint64_t v71 = a4 + 1;
              a15 = v241;
              a14 = v243;
              double v82 = v231;
              goto LABEL_151;
            }
LABEL_84:
            double *v93 = 0.0;
            if (!v80) {
              continue;
            }
            goto LABEL_242;
          }
          uint64_t v248 = v79;
          uint64_t v253 = v72;
          uint64_t v228 = v70;
          uint64_t v236 = v69;
          double v262 = a15.n128_f64[0];
          uint64_t v263 = a14.n128_u64[0];
          double v264 = v77;
          double v265 = v78;
          v267[0] = v81;
          uint64_t v191 = v83;
          dlasv2_(v215, v83, v82, &v259, &v257, &v262, (double *)&v263, &v264, (int8x16_t)v74, a10, a11, a12, a13, a14.n128_f64[0], a15.n128_f64[0], a16, &v265);
          *uint64_t v215 = v257;
          double *v191 = 0.0;
          *double v82 = v259;
          uint64_t v192 = *a2;
          a15.n128_f64[0] = v262;
          a14.n128_u64[0] = v263;
          if (*a2 >= 1)
          {
            uint64_t v193 = (int8x16_t *)&v204[v81 + v205];
            float64x2_t v74 = (float64x2_t)vdupq_lane_s64(v263, 0);
            uint64_t v194 = 8 * *v24;
            do
            {
              a10 = *v193;
              a12.i64[1] = v193->i64[1];
              *(double *)a12.i64 = -*(double *)v193->i64;
              int8x16_t v195 = (int8x16_t)vmulq_n_f64((float64x2_t)a12, a15.n128_f64[0]);
              a11 = (int8x16_t)vmlaq_f64((float64x2_t)vextq_s8(v195, v195, 8uLL), *(float64x2_t *)v193, v74);
              *uint64_t v193 = a11;
              uint64_t v193 = (int8x16_t *)((char *)v193 + v194);
              --v192;
            }
            while (v192);
          }
          uint64_t v196 = *a3;
          double v77 = v264;
          double v78 = v265;
          double v27 = a4 - 1;
          a1 = v239;
          uint64_t v69 = v236;
          uint64_t v71 = a4 + 1;
          if (*a3 >= 1)
          {
            uint64_t v197 = &v223[v81 * v22 + 1];
            long long v198 = &v223[v254 * v22 + 1];
            do
            {
              double v199 = *v197;
              double v200 = *v198;
              *(double *)a11.i64 = v77 * *v198 + v78 * *v197;
              *v197++ = *(double *)a11.i64;
              *v198++ = v78 * v200 - v199 * v77;
              --v196;
            }
            while (v196);
          }
          uint64_t v81 = v232;
          uint64_t v70 = v228;
          uint64_t v72 = v253;
          uint64_t v79 = v248;
        }
        else
        {
          double v262 = a15.n128_f64[0];
          uint64_t v263 = a14.n128_u64[0];
          double v264 = v77;
          double v265 = v78;
          v267[0] = v81;
          double v27 = a4 - 1;
          a1 = v239;
        }
        break;
      }
      uint64_t v23 = v81;
      if (v81 > 1) {
        continue;
      }
LABEL_17:
      uint64_t v23 = *a1;
      if (*a1 >= 1)
      {
LABEL_18:
        uint64_t v41 = 1;
        uint64_t v42 = a6;
        do
        {
          double v43 = v27[v41];
          if (v43 < 0.0)
          {
            v27[v41] = -v43;
            uint64_t v44 = *a2;
            if (*a2 >= 1)
            {
              uint64_t v45 = 8 * *v24;
              uint64_t v46 = v42;
              do
              {
                *uint64_t v46 = -*v46;
                uint64_t v46 = (double *)((char *)v46 + v45);
                --v44;
              }
              while (v44);
            }
          }
          ++v42;
          BOOL v38 = v41++ == v23;
        }
        while (!v38);
        if (v23 >= 2)
        {
          uint64_t v47 = v23 + 1;
          uint64_t v48 = 8 * v23 - 8;
          uint64_t v49 = (char *)a8 + v22 * v48;
          uint64_t v50 = 1;
          uint64_t v51 = v23;
          do
          {
            double v52 = *a4;
            uint64_t v53 = v47 - v50;
            if (v47 - v50 >= 2)
            {
              uint64_t v55 = 1;
              uint64_t v54 = 1;
              do
              {
                double v56 = a4[v55];
                if (v56 <= v52) {
                  uint64_t v54 = v55 + 1;
                }
                uint64_t v57 = v55 + 1;
                if (v56 <= v52) {
                  double v52 = a4[v55];
                }
                ++v55;
              }
              while (v51 != v57);
            }
            else
            {
              uint64_t v54 = 1;
            }
            if (v54 != v53)
            {
              v27[v54] = v27[v53];
              v27[v53] = v52;
              uint64_t v58 = *a2;
              uint64_t v59 = 8 * v54;
              if (*a2 >= 1)
              {
                uint64_t v60 = 8 * *v24;
                uint64_t v61 = v59 - 8;
                uint64_t v62 = a6;
                do
                {
                  uint64_t v63 = *(void *)((char *)v62 + v61);
                  *(double *)((char *)v62 + v61) = *(double *)((char *)v62 + v48);
                  *(void *)((char *)v62 + v48) = v63;
                  uint64_t v62 = (double *)((char *)v62 + v60);
                  --v58;
                }
                while (v58);
              }
              uint64_t v64 = *a3;
              if (*a3 >= 1)
              {
                uint64_t v65 = (uint64_t *)((char *)a8 + v22 * (v59 - 8));
                uint64_t v66 = (uint64_t *)v49;
                do
                {
                  uint64_t v67 = *v65;
                  *v65++ = *v66;
                  *v66++ = v67;
                  --v64;
                }
                while (v64);
              }
            }
            ++v50;
            --v51;
            v48 -= 8;
            v49 -= 8 * v22;
          }
          while (v50 != v23);
        }
      }
      return 0;
    }
    break;
  }
LABEL_242:
  *a19 = 0;
  if (*v239 < 2) {
    return 0;
  }
  uint64_t v201 = 0;
  uint64_t v202 = *v239 - 1;
  uint64_t result = 0;
  do
  {
    if (*v29 != 0.0) {
      *a19 = ++v201;
    }
    ++v29;
    --v202;
  }
  while (v202);
  return result;
}

uint64_t dlasv2_(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, double a14, double a15, int8x16_t a16, double *a17)
{
  int8x16_t v19 = a17;
  double v20 = *a1;
  double v21 = fabs(*a1);
  double v22 = fabs(*a3);
  uint64_t v23 = 1;
  if (v22 > v21) {
    double v24 = v22;
  }
  else {
    double v24 = v21;
  }
  if (v22 > v21) {
    double v25 = v21;
  }
  else {
    double v25 = v22;
  }
  if (v22 > v21) {
    a11.i64[0] = *(uint64_t *)a3;
  }
  else {
    a11.i64[0] = *(uint64_t *)a1;
  }
  if (v22 > v21) {
    uint64_t v23 = 3;
  }
  else {
    double v20 = *a3;
  }
  a13.i64[0] = *(uint64_t *)a2;
  if (*a2 == 0.0)
  {
    *a4 = v25;
    *a5 = v24;
    double v26 = 0.0;
    double v27 = 1.0;
    double v28 = 1.0;
    double v29 = 0.0;
  }
  else
  {
    double v30 = fabs(*(double *)a13.i64);
    if (v30 > v24)
    {
      if (v24 / v30 < 1.11022302e-16)
      {
        *a5 = v30;
        if (v25 <= 1.0) {
          double v31 = v25 * (v24 / v30);
        }
        else {
          double v31 = v24 / (v30 / v25);
        }
        *a4 = v31;
        double v47 = v20 / *(double *)a13.i64;
        double v48 = *(double *)a11.i64 / *(double *)a13.i64;
        BOOL v49 = v22 <= v21;
        if (v22 <= v21) {
          double v50 = v47;
        }
        else {
          double v50 = v48;
        }
        if (v49) {
          double v51 = v48;
        }
        else {
          double v51 = v47;
        }
        *a17 = 1.0;
        *a8 = v50;
        *a7 = v51;
        *a6 = 1.0;
        a9.i64[0] = 1.0;
        goto LABEL_53;
      }
      uint64_t v23 = 2;
    }
    *(double *)a16.i64 = v24 - v25;
    double v32 = (v24 - v25) / v24;
    v17.i64[0] = 1.0;
    if (v24 - v25 == v24) {
      double v32 = 1.0;
    }
    double v33 = *(double *)a13.i64 / *(double *)a11.i64;
    v18.i64[0] = 2.0;
    double v34 = 2.0 - v32;
    double v35 = sqrt(v34 * v34 + v33 * v33);
    double v36 = fabs(*(double *)a13.i64 / *(double *)a11.i64);
    double v37 = sqrt(v33 * v33 + v32 * v32);
    if (v32 != 0.0) {
      double v36 = v37;
    }
    double v38 = (v35 + v36) * 0.5;
    *a4 = v25 / v38;
    *a5 = v24 * v38;
    v39.f64[0] = NAN;
    v39.f64[1] = NAN;
    int8x16_t v40 = (int8x16_t)vnegq_f64(v39);
    double v41 = *(double *)a13.i64 / *(double *)vbslq_s8(v40, a16, a11).i64 + v33 / v34;
    double v42 = *(double *)vbslq_s8(v40, v18, a11).i64 * *(double *)vbslq_s8(v40, v17, a13).i64;
    if (v32 != 0.0) {
      double v42 = v41;
    }
    if (v33 * v33 != 0.0) {
      double v42 = (v33 / (v34 + v35) + v33 / (v32 + v36)) * (v38 + 1.0);
    }
    double v43 = sqrt(v42 * v42 + 4.0);
    double v28 = 2.0 / v43;
    double v29 = v42 / v43;
    double v27 = (v28 + v29 * v33) / v38;
    double v26 = v20 / *(double *)a11.i64 * v29 / v38;
  }
  BOOL v44 = v22 <= v21;
  if (v22 <= v21) {
    double v45 = v27;
  }
  else {
    double v45 = v29;
  }
  if (v44) {
    double v46 = v26;
  }
  else {
    double v46 = v28;
  }
  if (v44) {
    double v26 = v28;
  }
  *a17 = v45;
  *a8 = v46;
  if (v44) {
    *(double *)a9.i64 = v29;
  }
  else {
    *(double *)a9.i64 = v27;
  }
  *a7 = v26;
  *a6 = *(double *)a9.i64;
  if (v23 != 2)
  {
    if (v23 == 1)
    {
      a9.i64[0] = *(uint64_t *)a7;
      a2 = a1;
    }
    else
    {
      int8x16_t v19 = a8;
      a2 = a3;
    }
  }
LABEL_53:
  a10.i64[0] = 1.0;
  v52.f64[0] = NAN;
  v52.f64[1] = NAN;
  int8x16_t v53 = (int8x16_t)vnegq_f64(v52);
  int8x16_t v54 = vbslq_s8(v53, a10, a9);
  a12.i64[0] = *(uint64_t *)v19;
  int8x16_t v55 = vbslq_s8(v53, a10, a12);
  *(double *)v54.i64 = *(double *)v54.i64 * *(double *)v55.i64;
  v55.i64[0] = *(uint64_t *)a2;
  int8x16_t v56 = vbslq_s8(v53, a10, v55);
  *(double *)v54.i64 = *(double *)v54.i64 * *(double *)v56.i64;
  v56.i64[0] = *(uint64_t *)a5;
  int8x16_t v57 = vbslq_s8(v53, v56, v54);
  *a5 = *(double *)v57.i64;
  v57.i64[0] = *(uint64_t *)a1;
  int8x16_t v58 = vbslq_s8(v53, a10, v57);
  *(double *)v54.i64 = *(double *)v54.i64 * *(double *)v58.i64;
  v58.i64[0] = *(uint64_t *)a3;
  int8x16_t v59 = vbslq_s8(v53, a10, v58);
  *(double *)v54.i64 = *(double *)v54.i64 * *(double *)v59.i64;
  v59.i64[0] = *(uint64_t *)a4;
  *(void *)a4 = vbslq_s8(v53, v59, v54).u64[0];
  return 0;
}

double *singularValues2x2(double a1, double a2, double a3, double *result, double *a5)
{
  double v5 = fabs(a1);
  double v6 = fabs(a2);
  double v7 = fabs(a3);
  if (v5 >= v7) {
    double v8 = v7;
  }
  else {
    double v8 = v5;
  }
  if (v5 > v7) {
    double v7 = v5;
  }
  if (v8 == 0.0)
  {
    *uint64_t result = 0.0;
    if (v7 != 0.0)
    {
      if (v7 >= v6) {
        double v9 = v6;
      }
      else {
        double v9 = v7;
      }
      if (v7 > v6) {
        double v6 = v7;
      }
      double v6 = v6 * sqrt(v6 + v9 / v6 * (v9 / v6));
    }
  }
  else
  {
    double v10 = v8 / v7 + 1.0;
    double v11 = (v7 - v8) / v7;
    if (v6 >= v7)
    {
      double v13 = v7 / v6;
      double v14 = 2.0 / (sqrt(v13 * v10 * (v13 * v10) + 1.0) + sqrt(v13 * v11 * (v13 * v11) + 1.0));
      *uint64_t result = v13 * (v8 * v14);
      double v6 = v6 / v14;
    }
    else
    {
      double v12 = 2.0 / (sqrt(v6 / v7 * (v6 / v7) + v10 * v10) + sqrt(v6 / v7 * (v6 / v7) + v11 * v11));
      *uint64_t result = v8 * v12;
      double v6 = v7 / v12;
    }
  }
  *a5 = v6;
  return result;
}

BOOL givensRotation(double a1, double a2, double *a3, double *a4, double *a5)
{
  if (a2 == 0.0)
  {
    uint64_t v5 = 0;
    *a3 = 1.0;
    *a4 = 0.0;
    *a5 = a1;
  }
  else if (a1 == 0.0)
  {
    uint64_t v5 = 0;
    *a3 = 0.0;
    *a4 = 1.0;
    *a5 = a2;
  }
  else
  {
    double v6 = sqrt(a2 * a2 + a1 * a1);
    *a5 = v6;
    *a3 = a1 / v6;
    *a4 = a2 / *a5;
    if (fabs(a1) > fabs(a2) && *a3 < 0.0)
    {
      *a3 = -*a3;
      *a4 = -*a4;
      *a5 = -*a5;
    }
    return (*(void *)a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
  }
  return v5;
}

uint64_t dlasr_(const char *a1, const char *a2, uint64_t *a3, uint64_t *a4, double *a5, double *a6, double *a7, uint64_t *a8)
{
  uint64_t v8 = *a3;
  if (*a3)
  {
    uint64_t v9 = *a4;
    if (*a4)
    {
      double v10 = a5 - 1;
      double v11 = a6 - 1;
      uint64_t v12 = *a8;
      int v13 = *(unsigned __int8 *)a2;
      if (*a1 == 76)
      {
        if (v13 == 70)
        {
          if (v8 >= 2)
          {
            double v14 = a7 + 1;
            uint64_t v15 = 8 * v12;
            for (uint64_t i = 1; i != v8; ++i)
            {
              double v17 = v10[i];
              double v18 = v11[i];
              BOOL v20 = v18 == 0.0 && v17 == 1.0 || v9 < 1;
              if (!v20)
              {
                double v21 = v14;
                uint64_t v22 = v9;
                do
                {
                  double v23 = *(v21 - 1);
                  double v24 = v23 * -v18 + v17 * *v21;
                  *(v21 - 1) = v17 * v23 + v18 * *v21;
                  *double v21 = v24;
                  double v21 = (double *)((char *)v21 + v15);
                  --v22;
                }
                while (v22);
              }
              ++v14;
            }
          }
        }
        else if (v8 >= 2)
        {
          double v34 = &a7[v8 - 1];
          do
          {
            double v35 = v10[v8 - 1];
            double v36 = v11[v8 - 1];
            if ((v36 != 0.0 || v35 != 1.0) && v9 >= 1)
            {
              float64x2_t v39 = v34;
              uint64_t v40 = v9;
              do
              {
                double v41 = *(v39 - 1);
                double v42 = v41 * -v36 + v35 * *v39;
                *(v39 - 1) = v35 * v41 + v36 * *v39;
                double *v39 = v42;
                v39 += v12;
                --v40;
              }
              while (v40);
            }
            --v34;
            BOOL v20 = v8-- <= 2;
          }
          while (!v20);
        }
      }
      else if (v13 == 70)
      {
        if (v9 >= 2)
        {
          uint64_t v25 = v12;
          for (uint64_t j = 1; j != v9; ++j)
          {
            double v27 = v10[j];
            double v28 = v11[j];
            if ((v28 != 0.0 || v27 != 1.0) && v8 >= 1)
            {
              double v31 = a7;
              uint64_t v32 = v8;
              do
              {
                double v33 = v31[v25];
                v31[v25] = *v31 * -v28 + v27 * v33;
                *double v31 = v27 * *v31 + v28 * v33;
                ++v31;
                --v32;
              }
              while (v32);
            }
            a7 = (double *)((char *)a7 + v25 * 8);
          }
        }
      }
      else if (v9 >= 2)
      {
        double v43 = (double *)((char *)a7 + v12 * (8 * v9 - 16));
        uint64_t v44 = -8 * v12;
        double v45 = (double *)((char *)a7 + v12 * (8 * v9 - 8));
        do
        {
          double v46 = v10[v9 - 1];
          double v47 = v11[v9 - 1];
          if ((v47 != 0.0 || v46 != 1.0) && v8 >= 1)
          {
            double v50 = v45;
            double v51 = v43;
            uint64_t v52 = v8;
            do
            {
              double v53 = *v50;
              *double v50 = *v51 * -v47 + v46 * *v50;
              ++v50;
              *double v51 = v46 * *v51 + v47 * v53;
              ++v51;
              --v52;
            }
            while (v52);
          }
          double v43 = (double *)((char *)v43 + v44);
          double v45 = (double *)((char *)v45 + v44);
          BOOL v20 = v9-- <= 2;
        }
        while (!v20);
      }
    }
  }
  return 0;
}

uint64_t JasperCalibration::nvmToDictionary(JasperCalibration *this, H16ISP::H16ISPDevice *a2)
{
  NvmPeridotInputFactory::pDevice = (uint64_t)this;
  v5[0] = 0;
  v5[1] = 0;
  v4[0] = &unk_26FAEB3E0;
  v4[1] = v5;
  uint64_t v6 = 0;
  NvmPeridotInputFactory::validate((NvmPeridotInputFactory *)v4, (uint64_t)a2);
  uint64_t v2 = v6;
  NvmPeridotInputFactory::~NvmPeridotInputFactory((NvmPeridotInputFactory *)v4);
  return v2;
}

void sub_2468A35D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  NvmPeridotInputFactory::~NvmPeridotInputFactory((NvmPeridotInputFactory *)va);
  _Unwind_Resume(a1);
}

uint64_t NvmPeridotInputFactory::validate(NvmPeridotInputFactory *this, uint64_t a2)
{
  uint64_t v2 = (NvmPeridotInputFactory *)MEMORY[0x270FA5388](this, a2);
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = NvmPeridotInputFactory::pDevice;
  if (NvmPeridotInputFactory::pDevice)
  {
    H16ISP::H16ISPDevice::CacheNumChannels((H16ISP::H16ISPDevice *)NvmPeridotInputFactory::pDevice);
    int SensorChannel = H16ISP::H16ISPDevice::getSensorChannel(NvmPeridotInputFactory::pDevice, 1785950322);
    if (SensorChannel == -1)
    {
      NSLog(&cfstr_DefaultCalibra.isa);
    }
    else
    {
      uint64_t v5 = (unsigned __int16)SensorChannel;
      CFDataRef SensorNVM = NvmPeridotInputFactory::readSensorNVM(v2, (H16ISP::H16ISPDevice *)NvmPeridotInputFactory::pDevice, (unsigned __int16)SensorChannel, v10, 0xA000u);
      if (SensorNVM)
      {
        CFDataRef v7 = SensorNVM;
        CFDataRef DeviceNVM = NvmPeridotInputFactory::readDeviceNVM((int)v2, NvmPeridotInputFactory::pDevice, v5, 13, v10, 0xA000u);
        if (DeviceNVM)
        {
          CFDataRef v9 = DeviceNVM;
          *((void *)v2 + 4) = PDPeridotCalibCalibrationBlobsFromNVM();
          CFRelease(v7);
          CFRelease(v9);
          if (*((void *)v2 + 4))
          {
            NSLog(&cfstr_DefaultCalibra_3.isa);
            return 1;
          }
          NSLog(&cfstr_DefaultCalibra_2.isa);
        }
        else
        {
          NSLog(&cfstr_DefaultCalibra_1.isa);
          CFRelease(v7);
        }
      }
      else
      {
        NSLog(&cfstr_DefaultCalibra_0.isa);
      }
    }
    return 0;
  }
  return result;
}

uint64_t PCECalibrationManager<FDRInputFactory>::PCECalibrationManager(uint64_t a1)
{
  uint64_t result = CalibrationManager<FDRInputFactory>::CalibrationManager(a1);
  *(void *)uint64_t result = &unk_26FAEB360;
  *(unsigned char *)(result + 7mach_timebase_info(this + 3) = 1;
  if (*(unsigned char *)(result + 72)) {
    *(unsigned char *)(result + 72) = *(unsigned char *)(result + 41);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = CalibrationManager<FDRInputFactory>::CalibrationManager(a1);
  *(void *)uint64_t result = &unk_26FAEB360;
  *(unsigned char *)(result + 7mach_timebase_info(this + 3) = 1;
  if (*(unsigned char *)(result + 72)) {
    *(unsigned char *)(result + 72) = *(unsigned char *)(result + 41);
  }
  return result;
}

uint64_t CalibrationManager<FDRInputFactory>::CalibrationManager(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEB660;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = &unk_26FAEB680;
  *(void *)(a1 + 16) = a1 + 24;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 4H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 72) = FDRInputFactory::validate((FDRInputFactory *)(a1 + 8));
  return a1;
}

void sub_2468A3830(_Unwind_Exception *a1)
{
  FDRInputFactory::~FDRInputFactory(v1);
  _Unwind_Resume(a1);
}

uint64_t JasperCalibrationManager<FDRInputFactory>::JasperCalibrationManager(uint64_t a1)
{
  uint64_t v2 = (void *)CalibrationManager<FDRInputFactory>::CalibrationManager(a1);
  void *v2 = &unk_26FAEB380;
  JasperCalibrationManager<FDRInputFactory>::readSerialNumber((uint64_t)v2);
  if (*(unsigned char *)(a1 + 72)) {
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a1 + 57);
  }
  return a1;
}

void sub_2468A38E8(_Unwind_Exception *a1)
{
  void *v1 = &unk_26FAEB660;
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)(v1 + 1));
  _Unwind_Resume(a1);
}

void JasperCalibrationManager<FDRInputFactory>::readSerialNumber(uint64_t a1)
{
  *(unsigned char *)(a1 + 7mach_timebase_info(this + 3) = 0;
  uint64_t v1 = (char *)(a1 + 73);
  mach_port_t v2 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v3 = IOServiceNameMatching("AppleH16CamIn");
  io_service_t MatchingService = IOServiceGetMatchingService(v2, v3);
  CFDataRef v5 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"JasperSNUM", (CFAllocatorRef)*MEMORY[0x263EFFB08], 3u);
  if (!v5) {
    return;
  }
  CFDataRef v6 = v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == CFDataGetTypeID())
  {
    BytePtr = (const char *)CFDataGetBytePtr(v6);
    goto LABEL_7;
  }
  CFTypeID v9 = CFGetTypeID(v6);
  if (v9 == CFStringGetTypeID())
  {
    BytePtr = CFStringGetCStringPtr((CFStringRef)v6, 0x8000100u);
LABEL_7:
    if (BytePtr) {
      strncpy(v1, BytePtr, 0x20uLL);
    }
  }

  CFRelease(v6);
}

BOOL FileInputFactory::overrideFilesAllowed(FileInputFactory *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!FileInputFactory::_entitlementsChecked)
  {
    NSLog(&cfstr_TestingIfAfdrM.isa);
    FileInputFactory::_entitlementsChecked = 1;
    FileInputFactory::_overrideFilesAllowed = 0;
    if ((pceConfiguration & 2) != 0)
    {
      FileInputFactory::_overrideFilesAllowed = 1;
      NSLog(&cfstr_AfdrMayBeUsed.isa);
    }
    else
    {
      __int16 v12 = 0;
      uint64_t v2 = MGCopyAnswer();
      if (!v2)
      {
        NSLog(&cfstr_CouldnTGetBoot.isa);
        return 0;
      }
      CFDictionaryRef v3 = (void *)v2;
      uint64_t v4 = (void *)MGCopyAnswer();
      if (!v4)
      {
        NSLog(&cfstr_CouldnTGetCryp.isa);
        return 0;
      }
      CFDataRef v5 = v4;
      if (([v4 isEqualToString:@"sha2-384"] & 1) == 0)
      {
        NSLog(&cfstr_CryptoHashMeth.isa, v5, "sha2-384");
        return 0;
      }
      CFDataRef v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x263F53618], "sharedDataAccessor"), "copyPathForPersonalizedData:error:", 2, 0);
      uint64_t v7 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v6];
      if (!v7)
      {
        NSLog(&cfstr_CouldnTFindApT.isa, v6);

        return 0;
      }
      uint64_t v8 = (void *)v7;

      [v8 bytes];
      [v8 length];
      if (AMSupportDigestSha384())
      {
        NSLog(&cfstr_FailedToDigest.isa);
        return 0;
      }
      if (memcmp(__s1, (const void *)[v3 bytes], 0x30uLL))
      {
        NSLog(&cfstr_ApTicketDigest.isa);
        return 0;
      }
      if (Img4DecodeInitManifest([v8 bytes], objc_msgSend(v8, "length"), (uint64_t)v13))
      {
        NSLog(&cfstr_FailedToInitia.isa);
        return 1;
      }
      if (Img4DecodeGetBooleanFromSection((uint64_t)v13, 0, 1717660003, (BOOL *)&v12)) {
        LOBYTE(v12) = 0;
      }
      if (Img4DecodeGetBooleanFromSection((uint64_t)v13, 0, 1717663091, (BOOL *)&v12 + 1))
      {
        uint64_t v10 = 0;
        HIBYTE(v12) = 0;
      }
      else
      {
        uint64_t v10 = HIBYTE(v12);
      }
      FileInputFactory::_overrideFilesAllowed = v12 | v10;
      if (v12 | v10) {
        uint64_t v11 = "";
      }
      else {
        uint64_t v11 = " not";
      }
      NSLog(&cfstr_AfdrMaySBeUsed.isa, v11, v12, v10);
    }
    int v1 = FileInputFactory::_overrideFilesAllowed;
    return v1 != 0;
  }
  int v1 = FileInputFactory::_overrideFilesAllowed;
  return v1 != 0;
}

uint64_t PCECalibration::configure(uint64_t this)
{
  pceConfiguratiouint64_t n = this;
  return this;
}

uint64_t PCECalibration::readRosalineConfiguration(PCECalibration *this, unsigned __int16 *a2)
{
  CalibrationManager<FileInputFactory>::CalibrationManager((uint64_t)&v10);
  uint64_t v10 = &unk_26FAEB728;
  char v13 = 1;
  if (v12 && (PCECalibrationManager<FileInputFactory>::readPFCL((uint64_t)&v10, this) & 1) != 0)
  {
    uint64_t PFCL = 1;
  }
  else
  {
    CalibrationManager<FDRInputFactory>::CalibrationManager((uint64_t)&v5);
    CFDataRef v5 = &unk_26FAEB360;
    char v9 = 1;
    if (v8 && (char v8 = v7) != 0) {
      uint64_t PFCL = PCECalibrationManager<FileInputFactory>::readPFCL((uint64_t)&v5, this);
    }
    else {
      uint64_t PFCL = 0;
    }
    CFDataRef v5 = &unk_26FAEB660;
    FDRInputFactory::~FDRInputFactory((FDRInputFactory *)&v6);
  }
  uint64_t v10 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory(&v11);
  return PFCL;
}

void sub_2468A3DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)(v13 + 8));
  FileInputFactory::~FileInputFactory((CFTypeRef *)va);
  _Unwind_Resume(a1);
}

void *PCECalibrationManager<FDRInputFactory>::~PCECalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB660;
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)(a1 + 1));
  return a1;
}

uint64_t PCECalibrationManager<FileInputFactory>::~PCECalibrationManager(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory((CFTypeRef *)(a1 + 8));
  return a1;
}

const void *PCECalibration::readNVMBuffer(size_t *this, unint64_t *a2)
{
  CFDictionaryRef v3 = fopen("/var/mobile/Library/ISP/Pearl/NVM.bin", "rb");
  if (v3)
  {
    uint64_t v4 = v3;
    fseeko(v3, 0, 2);
    *this = ftello(v4);
    fseeko(v4, 0, 0);
    if (*this > 0xC7) {
      operator new[]();
    }
    fclose(v4);
  }
  CalibrationManager<FileInputFactory>::CalibrationManager((uint64_t)&v14);
  double v14 = &unk_26FAEB728;
  char v17 = 1;
  if (v16)
  {
    PWCL = (const void *)PCECalibrationManager<FileInputFactory>::readPWCL((uint64_t)&v14, this);
    if (PWCL) {
      goto LABEL_12;
    }
  }
  CalibrationManager<FDRInputFactory>::CalibrationManager((uint64_t)&v9);
  char v9 = &unk_26FAEB360;
  char v13 = 1;
  if (v12 && (char v12 = v11) != 0) {
    PWCL = (const void *)PCECalibrationManager<FileInputFactory>::readPWCL((uint64_t)&v9, this);
  }
  else {
    PWCL = 0;
  }
  char v9 = &unk_26FAEB660;
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)&v10);
  if (PWCL)
  {
LABEL_12:
    int v6 = open_dprotected_np("/var/mobile/Library/ISP/Pearl/NVM.bin", 513, 4, 0, 511);
    char v7 = fdopen(v6, "wb");
    if (v7)
    {
      fwrite(PWCL, 1uLL, *this, v7);
      fclose(v7);
    }
  }
  double v14 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory(&v15);
  return PWCL;
}

void sub_2468A40F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)(v13 + 8));
  FileInputFactory::~FileInputFactory((CFTypeRef *)va);
  _Unwind_Resume(a1);
}

uint64_t PCECalibration::readColorAssembly(uint64_t a1)
{
  CalibrationManager<FileInputFactory>::CalibrationManager((uint64_t)&v10);
  uint64_t v10 = &unk_26FAEB728;
  char v12 = 1;
  if (PCECalibrationManager<FileInputFactory>::readPCVE((uint64_t)&v10, a1)
    && (PCECalibrationManager<FileInputFactory>::readPCVI((uint64_t)&v10), (v2 & 1) != 0))
  {
    uint64_t v3 = 1;
  }
  else
  {
    CalibrationManager<FDRInputFactory>::CalibrationManager((uint64_t)&v6);
    int v6 = &unk_26FAEB360;
    char v9 = 1;
    if (v8) {
      char v8 = v7[33];
    }
    if (PCECalibrationManager<FileInputFactory>::readPCVE((uint64_t)&v6, a1))
    {
      PCECalibrationManager<FileInputFactory>::readPCVI((uint64_t)&v6);
      uint64_t v3 = v4;
    }
    else
    {
      uint64_t v3 = 0;
    }
    int v6 = &unk_26FAEB660;
    FDRInputFactory::~FDRInputFactory((FDRInputFactory *)v7);
  }
  uint64_t v10 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory(&v11);
  return v3;
}

void sub_2468A42AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  FileInputFactory::~FileInputFactory((CFTypeRef *)va);
  _Unwind_Resume(a1);
}

uint64_t PCECalibrationManager<FileInputFactory>::readPCVE(uint64_t a1, uint64_t a2)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 4);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*Input + 16))(Input);
  if (result)
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v11, 4);
    if (v11 == 1)
    {
      uint64_t result = Input::readAll<pcve>((const char *)Input, (uint64_t)v7);
      if (result)
      {
        long long v5 = v7[3];
        *(_OWORD *)(a2 + 32) = v7[2];
        *(_OWORD *)(a2 + 48) = v5;
        *(void *)(a2 + 64) = v8;
        long long v6 = v7[1];
        *(_OWORD *)a2 = v7[0];
        *(_OWORD *)(a2 + 16) = v6;
        *(_OWORD *)(a2 + 72) = v9;
        *(void *)(a2 + 88) = v10;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void PCECalibrationManager<FileInputFactory>::readPCVI(uint64_t a1)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 3);
  if ((*(unsigned int (**)(uint64_t *))(*Input + 16))(Input))
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v3, 4);
    switch(v3)
    {
      case 3:
        PCECalibrationManager<FileInputFactory>::readPCIIv3(a1, (uint64_t)Input);
        break;
      case 2:
        PCECalibrationManager<FileInputFactory>::readPCIIv2(a1, (uint64_t)Input);
        break;
      case 1:
        PCECalibrationManager<FileInputFactory>::readPCIIv1(a1, (uint64_t)Input);
        break;
    }
  }
}

void PCECalibration::resetFdrValidation(PCECalibration *this)
{
  FDRInputFactory::_fdr3SupportChecked = 0;
}

BOOL saveEntireCalibration(const void *a1)
{
  CFDataRef v1 = (const __CFData *)CFRetain(a1);
  if (!v1) {
    return 0;
  }
  CFDataRef v2 = v1;
  BytePtr = CFDataGetBytePtr(v1);
  CFIndex Length = CFDataGetLength(v2);
  int v5 = open_dprotected_np("/var/mobile/Library/ISP/JasperL/JasperLCalib.bin", 513, 4, 0, 511);
  long long v6 = fdopen(v5, "wb");
  BOOL v7 = v6 != 0;
  if (v6)
  {
    uint64_t v8 = v6;
    fwrite(BytePtr, 1uLL, Length, v6);
    fclose(v8);
  }
  CFRelease(v2);
  return v7;
}

{
  int v2;
  FILE *v3;

  CFDataRef v2 = open_dprotected_np("/var/mobile/Library/ISP/Pearl/PCECalib.bin", 513, 4, 0, 511);
  int v3 = fdopen(v2, "wb");
  if (v3)
  {
    fwrite(a1, 1uLL, 0x3370uLL, v3);
    fclose(v3);
  }
  return v3 != 0;
}

BOOL PCECalibration::isOverridden(PCECalibration *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  FileInput::FileInput((uint64_t)&v3, "/var/mobile/Documents/Pearl", 9u);
  CFDataRef v1 = v4;
  int v3 = &unk_26FAEB5C0;
  if (v4) {
    fclose(v4);
  }
  return v1 != 0;
}

BOOL FileInput::isValid(FileInput *this)
{
  return *((void *)this + 33) != 0;
}

void FileInput::~FileInput(FileInput *this)
{
  *(void *)this = &unk_26FAEB5C0;
  CFDataRef v1 = (FILE *)*((void *)this + 33);
  if (v1) {
    fclose(v1);
  }
}

{
  FILE *v1;
  uint64_t vars8;

  *(void *)this = &unk_26FAEB5C0;
  CFDataRef v1 = (FILE *)*((void *)this + 33);
  if (v1) {
    fclose(v1);
  }

  JUMPOUT(0x24C53D6E0);
}

uint64_t PCECalibration::fill(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v33 = *MEMORY[0x263EF8340];
  NSLog(&cfstr_PearlCalibrati_50.isa);
  umask(0);
  if ((makeDirectories("/var/mobile/Library/ISP/Pearl", v6) & 1) == 0)
  {
    NSLog(&cfstr_CouldnTValidat.isa);
    return 0;
  }
  NSLog(&cfstr_LookingForLoca.isa);
  BOOL v7 = fopen("/var/mobile/Library/ISP/Pearl/PCECalib.bin", "rb");
  if (!v7) {
    goto LABEL_27;
  }
  uint64_t v8 = v7;
  fread(v5, 1uLL, 0x3370uLL, v7);
  if (!v3) {
    goto LABEL_20;
  }
  NSLog(&cfstr_ValidatingCali.isa);
  CalibrationManager<FileInputFactory>::CalibrationManager((uint64_t)&v24);
  double v24 = &unk_26FAEB728;
  char v29 = 0;
  if ((PCECalibrationManager<FileInputFactory>::readPRF1((uint64_t)&v24, (uint64_t)&v30) & 1) == 0)
  {
    CalibrationManager<FDRInputFactory>::CalibrationManager((uint64_t)&v20);
    BOOL v20 = &unk_26FAEB360;
    if (v22) {
      char v22 = v21[33];
    }
    char v23 = 0;
    if ((PCECalibrationManager<FDRInputFactory>::readPRF1((uint64_t)&v20, (uint64_t)&v30) & 1) == 0)
    {
      NSLog(&cfstr_FailedToReadUu.isa);
      BOOL v20 = &unk_26FAEB660;
      FDRInputFactory::~FDRInputFactory((FDRInputFactory *)v21);
      double v24 = &unk_26FAEB538;
      FileInputFactory::~FileInputFactory(v25);
      goto LABEL_25;
    }
    BOOL v20 = &unk_26FAEB660;
    FDRInputFactory::~FDRInputFactory((FDRInputFactory *)v21);
  }
  uint64_t v9 = 0;
  BOOL v11 = v5[1] != v31[0] || v5[2] != v31[1];
  char v12 = @"Cached UUID: 0x";
  do
    char v12 = (__CFString *)[(__CFString *)v12 stringByAppendingFormat:@"%02X", *((unsigned __int8 *)v5 + v9++ + 8)];
  while (v9 != 16);
  uint64_t v13 = (void *)[(__CFString *)v12 stringByAppendingString:@", calibration: 0x"];
  for (uint64_t i = 8; i != 24; ++i)
    uint64_t v13 = objc_msgSend(v13, "stringByAppendingFormat:", @"%02X", *((unsigned __int8 *)&v31[-1] + i));
  NSLog(&stru_26FAEE998.isa, v13);
  double v24 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory(v25);
  if (!v11)
  {
LABEL_20:
    if (*(_DWORD *)v5 == 6)
    {
      NSLog(&cfstr_Found.isa);
      fclose(v8);
      return 1;
    }
    NSLog(&cfstr_IgnoringUnexpe.isa, *(unsigned int *)v5, 6);
    goto LABEL_26;
  }
LABEL_25:
  deleteDirectoryContent("/var/mobile/Library/ISP/Pearl");
  NSLog(&cfstr_CalibrationUui.isa);
LABEL_26:
  fclose(v8);
LABEL_27:
  NSLog(&cfstr_LookingForLoca_0.isa);
  CalibrationManager<FileInputFactory>::CalibrationManager((uint64_t)&v30);
  double v30 = &unk_26FAEB728;
  char v32 = 1;
  PCECalibrationManager<FileInputFactory>::read((uint64_t)&v30, v5);
  if (v16) {
    goto LABEL_31;
  }
  NSLog(&cfstr_LookingForFdrD.isa);
  NSLog(&cfstr_ReadingFromFdr.isa);
  CalibrationManager<FDRInputFactory>::CalibrationManager((uint64_t)&v24);
  double v24 = &unk_26FAEB360;
  if (v27) {
    char v27 = v26;
  }
  BOOL v28 = (pceConfiguration & 1) == 0;
  PCECalibrationManager<FDRInputFactory>::read((uint64_t)&v24, v5);
  char v18 = v17;
  double v24 = &unk_26FAEB660;
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)v25);
  if (v18)
  {
LABEL_31:
    NSLog(&cfstr_CreatingLocalC.isa);
    *(_DWORD *)uint64_t v5 = 6;
    kdebug_trace();
    BOOL v15 = saveEntireCalibration(v5);
  }
  else
  {
    NSLog(&cfstr_DidnTFindCalib.isa);
    BOOL v15 = 0;
  }
  double v30 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory(v31);
  return v15;
}

void sub_2468A4BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  FileInputFactory::~FileInputFactory((CFTypeRef *)va);
  _Unwind_Resume(a1);
}

uint64_t makeDirectories(const char *a1, const char *a2)
{
  int v3 = mkdir("/var/mobile/Library/ISP", 0x1FFu);
  if (v3)
  {
    int v4 = v3;
    if (*__error() != 17)
    {
      printf("\tCan't create %s! (%d)\n", "/var/mobile/Library/ISP", v4);
      return 0;
    }
  }
  int v5 = open_dprotected_np("/var/mobile/Library/ISP", 0, 0, 1);
  fcntl(v5, 64, 4);
  close(v5);
  int v6 = mkdir(a1, 0x1FFu);
  if (v6)
  {
    int v7 = v6;
    if (*__error() != 17)
    {
      printf("\tCan't create %s! (%d)\n", a1, v7);
      return 0;
    }
  }
  uint64_t v8 = 1;
  int v9 = open_dprotected_np(a1, 0, 0, 1);
  fcntl(v9, 64, 4);
  close(v9);
  return v8;
}

uint64_t deleteDirectoryContent(const char *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v2 = (void *)[MEMORY[0x263F08850] defaultManager];
  int v3 = objc_msgSend(v2, "contentsOfDirectoryAtPath:error:", objc_msgSend(NSString, "stringWithUTF8String:", a1), 0);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t result = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * v7);
        int v9 = (void *)[MEMORY[0x263F08850] defaultManager];
        [v9 removeItemAtPath:objc_msgSend(NSString, "stringWithFormat:", @"%s/%@", a1, v8), 0 error];
        ++v7;
      }
      while (v5 != v7);
      uint64_t result = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void PCECalibrationManager<FileInputFactory>::read(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    bzero(a2, 0x3370uLL);
    PCECalibrationManager<FileInputFactory>::readPCIC(a1, (uint64_t)a2);
    if (v4)
    {
      PCECalibrationManager<FileInputFactory>::readPCII(a1);
      if (v5)
      {
        if ((pceConfiguration & 4) != 0
          || (PCECalibrationManager<FileInputFactory>::readPCVC(a1, (uint64_t)a2), v6)
          && (PCECalibrationManager<FileInputFactory>::readPCVI(a1), v7)
          && (PCECalibrationManager<FileInputFactory>::readPCVE(a1, (uint64_t)a2 + 8552) & 1) != 0
          || (pceConfiguration & 0x10) != 0)
        {
          if (PCECalibrationManager<FileInputFactory>::readPBAS(a1, (uint64_t)a2 + 8648)
            && PCECalibrationManager<FileInputFactory>::readPMPC(a1, (uint64_t)a2 + 8672)
            && PCECalibrationManager<FileInputFactory>::initRuntime(a1, (uint64_t)a2))
          {
            if (PCECalibrationManager<FileInputFactory>::readPRF1(a1, (uint64_t)a2))
            {
              PCECalibrationManager<FileInputFactory>::readPSD2(a1);
              (*(void (**)(uint64_t, void *))(*(void *)(a1 + 8) + 32))(a1 + 8, a2);
            }
          }
        }
      }
    }
  }
}

void PCECalibrationManager<FDRInputFactory>::read(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    bzero(a2, 0x3370uLL);
    PCECalibrationManager<FDRInputFactory>::readPCIC(a1, (uint64_t)a2);
    if (v4)
    {
      PCECalibrationManager<FileInputFactory>::readPCII(a1);
      if (v5)
      {
        if ((pceConfiguration & 4) != 0
          || (PCECalibrationManager<FileInputFactory>::readPCVC(a1, (uint64_t)a2), v6)
          && (PCECalibrationManager<FileInputFactory>::readPCVI(a1), v7)
          && (PCECalibrationManager<FileInputFactory>::readPCVE(a1, (uint64_t)a2 + 8552) & 1) != 0
          || (pceConfiguration & 0x10) != 0)
        {
          if (PCECalibrationManager<FileInputFactory>::readPBAS(a1, (uint64_t)a2 + 8648)
            && PCECalibrationManager<FileInputFactory>::readPMPC(a1, (uint64_t)a2 + 8672)
            && PCECalibrationManager<FileInputFactory>::initRuntime(a1, (uint64_t)a2))
          {
            if (PCECalibrationManager<FDRInputFactory>::readPRF1(a1, (uint64_t)a2))
            {
              PCECalibrationManager<FileInputFactory>::readPSD2(a1);
              (*(void (**)(uint64_t, void *))(*(void *)(a1 + 8) + 32))(a1 + 8, a2);
            }
          }
        }
      }
    }
  }
}

const void *JasperCalibration::get(JasperCalibration *this, H16ISP::H16ISPDevice *a2)
{
  int v2 = (int)a2;
  uint64_t v38 = *MEMORY[0x263EF8340];
  NvmPeridotInputFactory::pDevice = (uint64_t)this;
  NSLog(&cfstr_JasperCalibrat.isa);
  umask(0);
  if ((makeDirectories("/var/mobile/Library/ISP/JasperL", v4) & 1) == 0)
  {
    NSLog(&cfstr_CouldnTValidat.isa);
    return 0;
  }
  NSLog(&cfstr_LookingForLoca.isa);
  if ([MEMORY[0x263EFF8F8] dataWithContentsOfFile:@"/var/mobile/Library/ISP/JasperL/JasperLCalib.bin"])
  {
    int v5 = (const void *)PDPeridotCalibCreateWithBinaryRepresentation();
    if (v5)
    {
      int v6 = v5;
      if (AuthorizedRepairManager::process((AuthorizedRepairManager *)&authorizedRepairManager, this, v5)) {
        saveEntireCalibration(v6);
      }
      if (!v2) {
        goto LABEL_21;
      }
      NSLog(&cfstr_ValidatingCali_0.isa);
      JasperCalibrationManager<FileInputFactory>::JasperCalibrationManager((uint64_t)&v35);
      OnlyBlob = JasperCalibrationManager<FileInputFactory>::readOnlyBlob((uint64_t)&v35, 18);
      if (!OnlyBlob)
      {
        if (!allowFdrForTof
          || (JasperCalibrationManager<FDRInputFactory>::JasperCalibrationManager((uint64_t)&v33),
              OnlyBlob = JasperCalibrationManager<FileInputFactory>::readOnlyBlob((uint64_t)&v33, 18),
              uint64_t v33 = &unk_26FAEB660,
              FDRInputFactory::~FDRInputFactory((FDRInputFactory *)v34),
              !OnlyBlob))
        {
          NSLog(&cfstr_ValidtingSnReg.isa);
          uint64_t v15 = (void *)PDPeridotCalibCopySerialNumber();
          char v16 = v15;
          if (v15)
          {
            char v17 = (const char *)[v15 UTF8String];
            size_t v18 = strlen(v37);
            if (v18 == strlen(v17))
            {
              int v10 = strncmp(v37, v17, v18);
              NSLog(&cfstr_CachedSerialNu.isa, v17, v37);
              CFRelease(v16);
              goto LABEL_20;
            }
            NSLog(&cfstr_SerialNubmersS.isa);
            CFRelease(v16);
          }
          else
          {
            NSLog(&cfstr_CanTReadSerial.isa);
          }
          double v35 = &unk_26FAEB538;
          FileInputFactory::~FileInputFactory(v36);
LABEL_30:
          deleteDirectoryContent("/var/mobile/Library/ISP/JasperL");
          NSLog(&cfstr_CalibrationUui.isa);
          CFRelease(v6);
          goto LABEL_31;
        }
      }
      uint64_t v33 = 0;
      v34[0] = 0;
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      PDPeridotCalibGetMpcUUID();
      PDPeridotCalibGetMpcUUIDFromCalibrationBlob();
      unint64_t v8 = bswap64((unint64_t)v33);
      unint64_t v9 = bswap64(0);
      if (v8 == v9 && (unint64_t v8 = bswap64(v34[0]), v9 = bswap64(v32), v8 == v9))
      {
        int v10 = 0;
      }
      else if (v8 < v9)
      {
        int v10 = -1;
      }
      else
      {
        int v10 = 1;
      }
      uint64_t v11 = 0;
      long long v12 = @"Cached UUID: 0x";
      do
        long long v12 = (__CFString *)[(__CFString *)v12 stringByAppendingFormat:@"%02X", *((unsigned __int8 *)&v34[-1] + v11++)];
      while (v11 != 16);
      long long v13 = (void *)[(__CFString *)v12 stringByAppendingString:@", calibration: 0x"];
      for (uint64_t i = 0; i != 16; ++i)
        long long v13 = objc_msgSend(v13, "stringByAppendingFormat:", @"%02X", *((unsigned __int8 *)&v31 + i));
      NSLog(&stru_26FAEE998.isa, v13);
      CFRelease(OnlyBlob);
LABEL_20:
      double v35 = &unk_26FAEB538;
      FileInputFactory::~FileInputFactory(v36);
      if (!v10)
      {
LABEL_21:
        NSLog(&cfstr_Found.isa);
        return v6;
      }
      goto LABEL_30;
    }
  }
LABEL_31:
  NSLog(&cfstr_LookingForLoca_0.isa);
  JasperCalibrationManager<FileInputFactory>::JasperCalibrationManager((uint64_t)&v35);
  int v6 = (const void *)JasperCalibrationManager<FileInputFactory>::read((uint64_t)&v35, 0);
  if (v6) {
    goto LABEL_32;
  }
  if (allowFdrForTof)
  {
    NSLog(&cfstr_LookingForFdrD.isa);
    CFDictionaryRef v20 = IOServiceNameMatching("isp");
    io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x263F0EC88], v20);
    CFDataRef v22 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"pearl-calibration-data", (CFAllocatorRef)*MEMORY[0x263EFFB08], 3u);
    CFDataRef v23 = v22;
    if (v22)
    {
      int Length = CFDataGetLength(v22);
      BytePtr = CFDataGetBytePtr(v23);
      char v26 = fopen("/var/mobile/Library/ISP/JasperL/JasperRecalibration.bin", "rb");
      char v27 = v26;
      if (v26)
      {
        fseeko(v26, 0, 2);
        off_t v28 = ftello(v27);
        fseeko(v27, 0, 0);
        if (v28 == Length) {
          operator new[]();
        }
        fclose(v27);
      }
      objc_msgSend((id)objc_msgSend(MEMORY[0x263F08850], "defaultManager"), "removeItemAtPath:error:", @"/var/mobile/Library/ISP/JasperL/JasperLCalib.bin", 0);
      char v29 = fopen("/var/mobile/Library/ISP/JasperL/JasperRecalibration.bin", "wb");
      if (v29)
      {
        fwrite(BytePtr, Length, 1uLL, v29);
        fclose(v29);
      }
    }
    NSLog(&cfstr_ReadingFromFdr.isa);
    JasperCalibrationManager<FDRInputFactory>::JasperCalibrationManager((uint64_t)&v33);
    int v6 = (const void *)JasperCalibrationManager<FDRInputFactory>::read((uint64_t)&v33, v23);
    if (v23) {
      CFRelease(v23);
    }
    uint64_t v33 = &unk_26FAEB660;
    FDRInputFactory::~FDRInputFactory((FDRInputFactory *)v34);
    if (v6) {
      goto LABEL_32;
    }
  }
  NSLog(&cfstr_LookingForCali.isa);
  JasperCalibrationManager<NvmPeridotInputFactory>::JasperCalibrationManager((uint64_t)&v33, v30);
  int v6 = (const void *)JasperCalibrationManager<NvmPeridotInputFactory>::read((uint64_t)&v33, 0);
  uint64_t v33 = &unk_26FAEB630;
  NvmPeridotInputFactory::~NvmPeridotInputFactory((NvmPeridotInputFactory *)v34);
  if (v6)
  {
LABEL_32:
    AuthorizedRepairManager::process((AuthorizedRepairManager *)&authorizedRepairManager, this, v6);
    NSLog(&cfstr_CreatingLocalC.isa);
    kdebug_trace();
    saveEntireCalibration(v6);
  }
  else
  {
    NSLog(&cfstr_DidnTFindCalib.isa);
    int v6 = 0;
  }
  double v35 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory(v36);
  return v6;
}

void sub_2468A5810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,CFTypeRef a28)
{
}

uint64_t AuthorizedRepairManager::process(AuthorizedRepairManager *this, H16ISP::H16ISPDevice *a2, const void *a3)
{
  if (a3)
  {
    int v4 = *(_DWORD *)this;
    if ((*(_DWORD *)this - 1) >= 2 && v4 != 4)
    {
      if (v4 == 3)
      {
        NSLog(&cfstr_ComponentValid.isa, a2);
        PDPeridotCalibResetStray();
        *(_DWORD *)this = 4;
        return 1;
      }
      v11[0] = 0;
      v11[1] = v11;
      _DWORD v11[2] = 0x3052000000;
      void v11[3] = __Block_byref_object_copy__0;
      int v7 = (void *)MEMORY[0x263EFFA68];
      unsigned __int8 v11[4] = __Block_byref_object_dispose__0;
      long long v12 = (void *)MEMORY[0x263EFFA68];
      int v8 = **((_DWORD **)a2 + 548) - 66;
      if v8 < 5 && ((0x1Bu >> v8))
      {
        int v7 = *(&off_2651E89D8 + v8);
        long long v12 = v7;
      }
      if ([v7 count])
      {
        unint64_t v9 = *((void *)this + 1);
        if (!v9)
        {
          unint64_t v9 = dispatch_queue_create("com.apple.component-replacement.test", 0);
          *((void *)this + 1) = v9;
        }
        *(_DWORD *)this = 2;
        v10[0] = MEMORY[0x263EF8330];
        v10[1] = 3221225472;
        _OWORD v10[2] = ___ZN23AuthorizedRepairManager7processEPN6H16ISP12H16ISPDeviceEPKv_block_invoke;
        v10[3] = &unk_2651E89B8;
        unsigned __int8 v10[4] = v11;
        v10[5] = this;
        dispatch_async(v9, v10);
      }
      else
      {
        *(_DWORD *)this = 4;
      }
      _Block_object_dispose(v11, 8);
    }
  }
  return 0;
}

void sub_2468A5A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t JasperCalibrationManager<FileInputFactory>::read(uint64_t a1, const void *a2)
{
  if (!*(unsigned char *)(a1 + 80)) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v5 = 0;
  if (JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x13u, Mutable))
  {
    if (JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x14u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x15u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x16u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x17u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x11u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x12u, Mutable))
    {
      JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x18u, Mutable);
      if (a2) {
        CFDictionarySetValue(Mutable, (const void *)[NSString stringWithUTF8String:"PrCL"], a2);
      }
      else {
        JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x1Au, Mutable);
      }
      uint64_t v5 = PDPeridotCalibCreateWithCalibrationDictionary();
      if (v5) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 24))(a1 + 8, v5);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  CFRelease(Mutable);
  return v5;
}

uint64_t JasperCalibrationManager<FDRInputFactory>::read(uint64_t a1, const void *a2)
{
  if (!*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v5 = 0;
  if (JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x13u, Mutable))
  {
    if (JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x14u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x15u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x16u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x17u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x11u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x12u, Mutable))
    {
      JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x18u, Mutable);
      if (a2) {
        CFDictionarySetValue(Mutable, (const void *)[NSString stringWithUTF8String:"PrCL"], a2);
      }
      else {
        JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x1Au, Mutable);
      }
      uint64_t v5 = PDPeridotCalibCreateWithCalibrationDictionary();
      if (v5) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 24))(a1 + 8, v5);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  CFRelease(Mutable);
  return v5;
}

void *JasperCalibrationManager<FDRInputFactory>::~JasperCalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB660;
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)(a1 + 1));
  return a1;
}

uint64_t JasperCalibrationManager<NvmPeridotInputFactory>::read(uint64_t a1, const void *a2)
{
  if (!*(unsigned char *)(a1 + 48)) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v5 = 0;
  if (JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x13u, Mutable))
  {
    if (JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x14u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x15u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x16u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x17u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x11u, Mutable)
      && JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x12u, Mutable))
    {
      JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x18u, Mutable);
      if (a2) {
        CFDictionarySetValue(Mutable, (const void *)[NSString stringWithUTF8String:"PrCL"], a2);
      }
      else {
        JasperCalibrationManager<FileInputFactory>::readBlob(a1, 0x1Au, Mutable);
      }
      uint64_t v5 = PDPeridotCalibCreateWithCalibrationDictionary();
      if (v5) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 24))(a1 + 8, v5);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  CFRelease(Mutable);
  return v5;
}

void *JasperCalibrationManager<NvmPeridotInputFactory>::~JasperCalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB630;
  NvmPeridotInputFactory::~NvmPeridotInputFactory((NvmPeridotInputFactory *)(a1 + 1));
  return a1;
}

uint64_t JasperCalibrationManager<FileInputFactory>::~JasperCalibrationManager(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory((CFTypeRef *)(a1 + 8));
  return a1;
}

void *JasperCalibration::copyCalibData(JasperCalibration *this, H16ISP::H16ISPDevice *a2)
{
  unsigned int v16 = a2;
  uint64_t v22 = *MEMORY[0x263EF8340];
  size_t v18 = objc_opt_new();
  uint64_t v2 = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  do
  {
    uint64_t v4 = [NSString stringWithUTF8String:&CalibrationDataTypeName[v2 + 4352]];
    uint64_t v5 = fopen((const char *)[(id)objc_msgSend(NSString stringWithFormat:@"%s/%@.bin", "/var/mobile/Documents/JasperL", v4), "UTF8String"], "rb");
    if (v5)
    {
      int v6 = v5;
      fseeko(v5, 0, 2);
      off_t v7 = ftello(v6);
      fseeko(v6, 0, 0);
      CFMutableDictionaryRef Mutable = CFDataCreateMutable(v3, v7);
      if (Mutable)
      {
        unint64_t v9 = Mutable;
        MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
        fread(MutableBytePtr, v7, 1uLL, v6);
        CFDataSetLength(v9, v7);
        [v18 setObject:v9 forKey:v4];
        CFRelease(v9);
      }
      fclose(v6);
    }
    v2 += 256;
  }
  while (v2 != 2816);
  uint64_t v11 = JasperCalibration::get(this, 0);
  if (v11)
  {
    long long v12 = v11;
    CFTypeRef v13 = CFRetain(v11);
    if (v13)
    {
      double v14 = v13;
      [v18 setObject:v13 forKey:@"JasperLCalib"];
      CFRelease(v14);
    }
    CFRelease(v12);
  }
  if (this)
  {
    objc_msgSend(v18, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", **((unsigned int **)this + 548)), @"PlatformId");
    if (!H16ISP::H16ISPDevice::GetCameraConfig((uint64_t)this, v16, 0, v19, v20)) {
      objc_msgSend(v18, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedShort:", v21), @"SensorVersion");
    }
  }
  return v18;
}

void PCECalibrationManager<FDRInputFactory>::~PCECalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB660;
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)(a1 + 1));

  JUMPOUT(0x24C53D6E0);
}

void JasperCalibrationManager<FDRInputFactory>::~JasperCalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB660;
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)(a1 + 1));

  JUMPOUT(0x24C53D6E0);
}

void NvmPeridotInputFactory::~NvmPeridotInputFactory(NvmPeridotInputFactory *this)
{
  NvmPeridotInputFactory::~NvmPeridotInputFactory(this);

  JUMPOUT(0x24C53D6E0);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26FAEB3E0;
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }

  InputFactory::~InputFactory(this);
}

uint64_t NvmPeridotInputFactory::processNewTofCalib(NvmPeridotInputFactory *this, const void *a2)
{
  return PDPeridotCalibResetStray();
}

void NvmPeridotInputFactory::createInput()
{
}

void sub_2468A6384(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10F1C4036AB8DBFLL);
  _Unwind_Resume(a1);
}

uint64_t DictionaryInput::DictionaryInput(uint64_t a1, const __CFDictionary *a2, unsigned int a3)
{
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 28H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  uint64_t v5 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  *(void *)a1 = &unk_26FAEB488;
  CFStringRef v6 = CFStringCreateWithCString(*v5, &CalibrationDataTypeName[256 * (unint64_t)a3], 0x8000100u);
  CFNumberRef Value = CFDictionaryGetValue(a2, v6);
  CFRelease(v6);
  if (Value)
  {
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 == CFDataGetTypeID())
    {
      *(void *)(a1 + 264) = Value;
      CFRetain(Value);
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 264));
      *(void *)(a1 + 272) = BytePtr;
      *(void *)(a1 + 28H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = BytePtr;
      *(_DWORD *)(a1 + 288) = CFDataGetLength(*(CFDataRef *)(a1 + 264));
    }
    else
    {
      CFRelease(Value);
    }
  }
  return a1;
}

void sub_2468A6498(_Unwind_Exception *a1)
{
  BufferInput::~BufferInput(v1);
  _Unwind_Resume(a1);
}

void BufferInput::~BufferInput(BufferInput *this)
{
  *(void *)this = &unk_26FAEB500;
  uint64_t v1 = (const void *)*((void *)this + 33);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  BufferInput::~BufferInput(this);

  JUMPOUT(0x24C53D6E0);
}

void DictionaryInput::~DictionaryInput(DictionaryInput *this)
{
  BufferInput::~BufferInput(this);

  JUMPOUT(0x24C53D6E0);
}

BOOL BufferInput::isValid(BufferInput *this)
{
  return *((void *)this + 33) != 0;
}

void *BufferInput::readBuffer(const void **this, void *__dst, int a3)
{
  uint64_t result = memcpy(__dst, this[35], a3);
  this[35] = (char *)this[35] + a3;
  return result;
}

uint64_t BufferInput::size(BufferInput *this)
{
  return (*((_DWORD *)this + 72) + *((_DWORD *)this + 68) - *((_DWORD *)this + 70));
}

CFDataRef NvmPeridotInputFactory::readSensorNVM(NvmPeridotInputFactory *this, H16ISP::H16ISPDevice *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  LODWORD(length) = a5;
  bzero(a4, a5);
  int SensorNVMBytes = H16ISP::H16ISPDevice::GetSensorNVMBytes(a2, a3, a4, 0, (unsigned int *)&length);
  if (SensorNVMBytes == -536870184)
  {
    H16ISP::H16ISPDevice::CacheDeviceConfigs(a2, v9);
    int SensorNVMBytes = H16ISP::H16ISPDevice::GetSensorNVMBytes(a2, a3, a4, 0, (unsigned int *)&length);
  }
  if (SensorNVMBytes) {
    return 0;
  }
  else {
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a4, length);
  }
}

CFDataRef NvmPeridotInputFactory::readDeviceNVM(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned int a6)
{
  LODWORD(length) = a6;
  bzero(a5, a6);
  if (H16ISP::H16ISPDevice::GetDeviceNVMBytes(a2, a3, a4, (uint64_t)a5, 0, &length)) {
    return 0;
  }
  else {
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)a5, length);
  }
}

void InputFactory::~InputFactory(InputFactory *this)
{
  *(void *)this = &unk_26FAEB448;
  uint64_t v2 = (uint64_t **)((char *)this + 8);
  CFAllocatorRef v3 = (uint64_t *)*((void *)this + 1);
  uint64_t v4 = (uint64_t *)((char *)this + 16);
  while (v3 != v4)
  {
    uint64_t v5 = v3[5];
    std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__remove_node_pointer(v2, v3);
    operator delete(v3);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    CFAllocatorRef v3 = *v2;
  }
  std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::destroy((uint64_t)v2, *((void **)this + 2));
}

uint64_t *std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      CFAllocatorRef v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      CFAllocatorRef v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  CFStringRef v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  CFAllocatorRef v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      CFAllocatorRef v3 = a2;
      goto LABEL_7;
    }
    do
    {
      CFAllocatorRef v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  CFStringRef v6 = (uint64_t **)v3[2];
  off_t v7 = *v6;
  if (*v6 == v3)
  {
    *CFStringRef v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      off_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      off_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      CFTypeRef v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      off_t v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      unsigned int v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *off_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        _DWORD v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        _DWORD v7[2] = (uint64_t)v15;
        unsigned int v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      double v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      _OWORD v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    unsigned int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    char v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      char v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    off_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    _DWORD v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    off_t v7 = *(uint64_t **)v12;
  }
  int8x16_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  CFDictionaryRef v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    char v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    CFDictionaryRef v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    unsigned __int16 v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    _DWORD v7[2] = (uint64_t)v20;
    int8x16_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  double v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  _OWORD v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t CalibrationManager<FileInputFactory>::~CalibrationManager(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory((CFTypeRef *)(a1 + 8));
  return a1;
}

void CalibrationManager<FileInputFactory>::~CalibrationManager(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory((CFTypeRef *)(a1 + 8));

  JUMPOUT(0x24C53D6E0);
}

void FileInputFactory::~FileInputFactory(CFTypeRef *this)
{
  *this = &unk_26FAEB568;
  if (*((unsigned char *)this + 40)) {
    CFRelease(this[6]);
  }
  if (*((unsigned char *)this + 56)) {
    CFRelease(this[8]);
  }

  InputFactory::~InputFactory((InputFactory *)this);
}

{
  uint64_t vars8;

  FileInputFactory::~FileInputFactory(this);

  JUMPOUT(0x24C53D6E0);
}

BOOL FileInputFactory::validate(FileInputFactory *this)
{
  uint64_t v2 = (const char *)*((void *)this + 4);
  if (!v2)
  {
    BOOL result = FileInputFactory::overrideFilesAllowed(this);
    if (!result) {
      return result;
    }
    uint64_t v2 = (const char *)*((void *)this + 4);
  }
  if (!v2) {
    uint64_t v2 = "/var/mobile/Documents/Pearl";
  }
  uint64_t v4 = objc_msgSend(NSString, "stringWithFormat:", @"%s/%s.bin", v2, "PlCl");
  uint64_t v5 = [objc_alloc(NSDictionary) initWithContentsOfFile:v4];
  if (v5)
  {
    *((unsigned char *)this + 4H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 1;
    *((void *)this + 6) = v5;
  }
  CFStringRef v6 = (const char *)*((void *)this + 4);
  if (!v6) {
    CFStringRef v6 = "/var/mobile/Documents/JasperL";
  }
  uint64_t v7 = objc_msgSend(NSString, "stringWithFormat:", @"%s/%s.bin", v6, "JpCl");
  uint64_t v8 = [objc_alloc(NSDictionary) initWithContentsOfFile:v7];
  BOOL result = 1;
  if (v8)
  {
    *((unsigned char *)this + 56) = 1;
    *((void *)this + 8) = v8;
  }
  return result;
}

uint64_t FileInputFactory::createInput(uint64_t a1, unsigned int a2)
{
  if (a2 <= 0x10)
  {
    if (*(unsigned char *)(a1 + 40)) {
      operator new();
    }
    operator new();
  }
  if (a2 - 17 <= 0xA)
  {
    if (*(unsigned char *)(a1 + 56)) {
      operator new();
    }
    operator new();
  }
  return 0;
}

void sub_2468A7074(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10A1C40FE679CB8);
  _Unwind_Resume(a1);
}

uint64_t FileInput::FileInput(uint64_t a1, const char *a2, unsigned int a3)
{
  *(void *)a1 = &unk_26FAEB5C0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (const char *)(a1 + 8);
  snprintf((char *)(a1 + 8), 0x100uLL, "%s/%s.bin", a2, &CalibrationDataTypeName[256 * (unint64_t)a3]);
  *(void *)(a1 + 264) = fopen(v4, "rb");
  return a1;
}

size_t FileInput::readBuffer(FILE **this, void *__ptr, int a3)
{
  return fread(__ptr, 1uLL, a3, this[33]);
}

uint64_t FileInput::size(FILE **this)
{
  off_t v2 = ftello(this[33]);
  fseeko(this[33], 0, 2);
  int v3 = ftello(this[33]);
  fseeko(this[33], v2, 0);
  return (v3 - v2);
}

void AuthorizedRepairManager::~AuthorizedRepairManager(AuthorizedRepairManager *this)
{
  off_t v2 = *((void *)this + 1);
  if (v2)
  {
    *(_DWORD *)this = 1;
    dispatch_sync(v2, &__block_literal_global);
    dispatch_release(*((dispatch_object_t *)this + 1));
    *((void *)this + 1) = 0;
  }
}

uint64_t PCECalibrationManager<FileInputFactory>::readPRF1(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 9);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*Input + 16))(Input);
  if (result)
  {
    CFStringRef v6 = (_WORD *)(a2 + 8704);
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v9, 4);
    if (v9 == 3)
    {
      (*(void (**)(uint64_t *, long long *, uint64_t))(*Input + 24))(Input, &v10, 19);
      unsigned int v7 = v13;
      *CFStringRef v6 = v11;
      *(_WORD *)(a2 + 8706) = v12;
      *(_OWORD *)(a2 + 8) = v10;
    }
    else
    {
      if (v9 == 2)
      {
        (*(void (**)(uint64_t *, long long *, uint64_t))(*Input + 24))(Input, &v10, 3);
        unsigned int v7 = BYTE2(v10);
        *CFStringRef v6 = v10;
        *(_WORD *)(a2 + 8706) = BYTE1(v10);
      }
      else
      {
        if (v9 != 1) {
          return 0;
        }
        (*(void (**)(uint64_t *, long long *, uint64_t))(*Input + 24))(Input, &v10, 1);
        unsigned int v7 = v10;
        *(_DWORD *)CFStringRef v6 = 0;
      }
      bzero((void *)(a2 + 8), 0x10uLL);
    }
    uint64_t result = 1;
    if (*(unsigned char *)(a1 + 81) && v7)
    {
      unsigned int v8 = 1;
      do
      {
        (*(void (**)(uint64_t *, long long *, uint64_t))(*Input + 24))(Input, &v10, 22);
        if (v10 > 3) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = PCECalibrationManager<FileInputFactory>::prepareReferencesByType(a1, (uint64_t)Input, (uint64_t)&v10);
        }
        if (v8 >= v7) {
          break;
        }
        ++v8;
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t PCECalibrationManager<FDRInputFactory>::readPRF1(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 9);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*Input + 16))(Input);
  if (result)
  {
    CFStringRef v6 = (_WORD *)(a2 + 8704);
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v9, 4);
    if (v9 == 3)
    {
      (*(void (**)(uint64_t *, long long *, uint64_t))(*Input + 24))(Input, &v10, 19);
      unsigned int v7 = v13;
      *CFStringRef v6 = v11;
      *(_WORD *)(a2 + 8706) = v12;
      *(_OWORD *)(a2 + 8) = v10;
    }
    else
    {
      if (v9 == 2)
      {
        (*(void (**)(uint64_t *, long long *, uint64_t))(*Input + 24))(Input, &v10, 3);
        unsigned int v7 = BYTE2(v10);
        *CFStringRef v6 = v10;
        *(_WORD *)(a2 + 8706) = BYTE1(v10);
      }
      else
      {
        if (v9 != 1) {
          return 0;
        }
        (*(void (**)(uint64_t *, long long *, uint64_t))(*Input + 24))(Input, &v10, 1);
        unsigned int v7 = v10;
        *(_DWORD *)CFStringRef v6 = 0;
      }
      bzero((void *)(a2 + 8), 0x10uLL);
    }
    uint64_t result = 1;
    if (*(unsigned char *)(a1 + 73) && v7)
    {
      unsigned int v8 = 1;
      do
      {
        (*(void (**)(uint64_t *, long long *, uint64_t))(*Input + 24))(Input, &v10, 22);
        if (v10 > 3) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = PCECalibrationManager<FileInputFactory>::prepareReferencesByType(a1, (uint64_t)Input, (uint64_t)&v10);
        }
        if (v8 >= v7) {
          break;
        }
        ++v8;
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t PCECalibrationManager<FileInputFactory>::prepareReferencesByType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a3 + 4) <= 3u) {
    operator new[]();
  }
  return 0;
}

uint64_t *InputFactory::getInput(uint64_t **a1, int a2)
{
  int v10 = a2;
  off_t v2 = a1[2];
  int v3 = a1 + 1;
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v4 = a1 + 2;
  do
  {
    int v5 = *((_DWORD *)v2 + 8);
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      unsigned int v7 = (uint64_t **)v2;
    }
    else {
      unsigned int v7 = (uint64_t **)(v2 + 1);
    }
    if (!v6) {
      uint64_t v4 = (uint64_t **)v2;
    }
    off_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 2 || *((_DWORD *)v4 + 8) > a2)
  {
LABEL_11:
    unsigned int v8 = (uint64_t *)((uint64_t (*)(uint64_t **))(*a1)[5])(a1);
    unsigned __int8 v11 = &v10;
    std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__emplace_unique_key_args<CalibrationDataTypes,std::piecewise_construct_t const&,std::tuple<CalibrationDataTypes const&>,std::tuple<>>(v3, &v10, (uint64_t)&std::piecewise_construct, &v11)[5] = v8;
  }
  unsigned __int8 v11 = &v10;
  return std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__emplace_unique_key_args<CalibrationDataTypes,std::piecewise_construct_t const&,std::tuple<CalibrationDataTypes const&>,std::tuple<>>(v3, &v10, (uint64_t)&std::piecewise_construct, &v11)[5];
}

uint64_t **std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__emplace_unique_key_args<CalibrationDataTypes,std::piecewise_construct_t const&,std::tuple<CalibrationDataTypes const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    unsigned __int8 v11 = operator new(0x30uLL);
    unsigned char v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<CalibrationDataTypes,Input *>,std::__map_value_compare<CalibrationDataTypes,std::__value_type<CalibrationDataTypes,Input *>,std::less<CalibrationDataTypes>,true>,std::allocator<std::__value_type<CalibrationDataTypes,Input *>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void ___ZN23AuthorizedRepairManager7processEPN6H16ISP12H16ISPDeviceEPKv_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  off_t v2 = *(int **)(a1 + 40);
  NSLog(&cfstr_ComponentValid_0.isa);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  int v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        if (*v2 == 1)
        {
          int v10 = 0;
          goto LABEL_13;
        }
        uint64_t v8 = [*(id *)(*((void *)&v11 + 1) + 8 * i) integerValue];
        uint64_t v9 = CRGetComponentState();
        if ((v9 - 2) <= 2)
        {
          NSLog(&cfstr_ComponentValid_2.isa, v8, v9);
          int v10 = 3;
          goto LABEL_13;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  int v10 = 4;
LABEL_13:
  int *v2 = v10;
}

__CFData *JasperCalibrationManager<FileInputFactory>::readOnlyBlob(uint64_t a1, int a2)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), a2);
  if (!(*(unsigned int (**)(uint64_t *))(*Input + 16))(Input)) {
    return 0;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  int v4 = (*(uint64_t (**)(uint64_t *))(*Input + 32))(Input);
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(v3, v4);
  int v6 = (*(uint64_t (**)(uint64_t *))(*Input + 32))(Input);
  CFDataSetLength(Mutable, v6);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*Input + 32))(Input);
  (*(void (**)(uint64_t *, UInt8 *, uint64_t))(*Input + 24))(Input, MutableBytePtr, v8);
  return Mutable;
}

void *CalibrationManager<NvmPeridotInputFactory>::~CalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB630;
  NvmPeridotInputFactory::~NvmPeridotInputFactory((NvmPeridotInputFactory *)(a1 + 1));
  return a1;
}

void CalibrationManager<NvmPeridotInputFactory>::~CalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB630;
  NvmPeridotInputFactory::~NvmPeridotInputFactory((NvmPeridotInputFactory *)(a1 + 1));

  JUMPOUT(0x24C53D6E0);
}

uint64_t FDRInputFactory::validate(FDRInputFactory *this)
{
  if ((pceConfiguration & 8) != 0) {
    return 0;
  }
  FDRInputFactory::checkUnifiedInputs(this);
  if (*((unsigned char *)this + 33) && *((unsigned char *)this + 32))
  {
    uint64_t result = (uint64_t)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "PlCl", 0x8000100u);
    if (!result) {
      return result;
    }
    CFAllocatorRef v3 = (const void *)result;
    *((void *)this + 5) = AMFDRSealingMapCopyLocalDictForClass();
    CFRelease(v3);
  }
  if (*((unsigned char *)this + 49) && *((unsigned char *)this + 48))
  {
    uint64_t result = (uint64_t)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "JpCl", 0x8000100u);
    if (!result) {
      return result;
    }
    int v4 = (const void *)result;
    *((void *)this + 7) = AMFDRSealingMapCopyLocalDictForClass();
    CFRelease(v4);
  }
  return 1;
}

void *CalibrationManager<FDRInputFactory>::~CalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB660;
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)(a1 + 1));
  return a1;
}

void CalibrationManager<FDRInputFactory>::~CalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB660;
  FDRInputFactory::~FDRInputFactory((FDRInputFactory *)(a1 + 1));

  JUMPOUT(0x24C53D6E0);
}

void FDRInputFactory::~FDRInputFactory(FDRInputFactory *this)
{
  FDRInputFactory::~FDRInputFactory(this);

  JUMPOUT(0x24C53D6E0);
}

{
  const void *v2;
  const void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26FAEB680;
  off_t v2 = (const void *)*((void *)this + 5);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = (const void *)*((void *)this + 7);
  if (v3) {
    CFRelease(v3);
  }

  InputFactory::~InputFactory(this);
}

void FDRInputFactory::createInput(uint64_t a1, unsigned int a2)
{
  if (a2 <= 0x10 && *(unsigned char *)(a1 + 32)) {
    operator new();
  }
  if (a2 - 17 <= 0xA)
  {
    if (*(unsigned char *)(a1 + 48)) {
      operator new();
    }
  }
  operator new();
}

void sub_2468A84E8(_Unwind_Exception *a1)
{
  MEMORY[0x24C53D6E0](v1, 0x10F1C4036AB8DBFLL);
  _Unwind_Resume(a1);
}

uint64_t FDRInput::FDRInput(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 28H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *(void *)a1 = &unk_26FAEB6D8;
  CFAllocatorRef v3 = (const char *)(a1 + 8);
  strcpy((char *)(a1 + 8), &CalibrationDataTypeName[256 * (unint64_t)a2]);
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v3, 0x8000100u);
  *(void *)(a1 + 264) = AMFDRSealingMapCopyLocalDataForClass();
  CFRelease(v4);
  if (*(void *)(a1 + 264))
  {
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 264));
    *(void *)(a1 + 272) = BytePtr;
    *(void *)(a1 + 28H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = BytePtr;
    *(_DWORD *)(a1 + 288) = CFDataGetLength(*(CFDataRef *)(a1 + 264));
  }
  return a1;
}

void sub_2468A8628(_Unwind_Exception *a1)
{
  BufferInput::~BufferInput(v1);
  _Unwind_Resume(a1);
}

void FDRInput::~FDRInput(FDRInput *this)
{
  BufferInput::~BufferInput(this);

  JUMPOUT(0x24C53D6E0);
}

void FDRInputFactory::checkUnifiedInputs(FDRInputFactory *this)
{
  if (!FDRInputFactory::_fdr3SupportChecked)
  {
    FDRInputFactory::_fdr3SupportChecked = 1;
    FDRInputFactory::_tofUnified = 0;
    FDRInputFactory::_pearlUnified = 0;
    FDRInputFactory::_tofAvailable = 0;
    FDRInputFactory::_pearlAvailable = 0;
    uint64_t v8 = (const void *)*((void *)this + 7);
    if (v8)
    {
      CFRelease(v8);
      *((void *)this + 7) = 0;
    }
    uint64_t v9 = (const void *)*((void *)this + 5);
    if (v9)
    {
      CFRelease(v9);
      *((void *)this + 5) = 0;
    }
    mach_port_t v10 = *MEMORY[0x263F0EC88];
    CFDictionaryRef v11 = IOServiceNameMatching("AppleH16CamIn");
    io_service_t MatchingService = IOServiceGetMatchingService(v10, v11);
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFTypeRef v14 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"JasperSNUM", (CFAllocatorRef)*MEMORY[0x263EFFB08], 3u);
    if (v14)
    {
      FDRInputFactory::_tofAvailable = 1;
      CFRelease(v14);
    }
    CFTypeRef v15 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"SavageSNUM", v13, 3u);
    if (v15)
    {
      FDRInputFactory::_pearlAvailable = 1;
      CFRelease(v15);
    }
    if (FDRInputFactory::_pearlAvailable)
    {
      CFStringRef v16 = CFStringCreateWithCString(v13, "PlCl", 0x8000100u);
      if (v16)
      {
        CFStringRef v17 = v16;
        uint64_t v18 = (const void *)AMFDRSealingMapCopyLocalDictForClass();
        CFRelease(v17);
        FDRInputFactory::_pearlUnified = v18 != 0;
        if (v18) {
          CFRelease(v18);
        }
      }
    }
    if (FDRInputFactory::_tofAvailable)
    {
      CFStringRef v19 = CFStringCreateWithCString(v13, "JpCl", 0x8000100u);
      if (v19)
      {
        CFStringRef v20 = v19;
        BOOL v21 = (const void *)AMFDRSealingMapCopyLocalDictForClass();
        CFRelease(v20);
        FDRInputFactory::_tofUnified = v21 != 0;
        if (v21) {
          CFRelease(v21);
        }
      }
    }
  }
  int v2 = FDRInputFactory::_pearlUnified;
  *((unsigned char *)this + 32) = FDRInputFactory::_pearlUnified;
  int v3 = FDRInputFactory::_tofUnified;
  *((unsigned char *)this + 48) = FDRInputFactory::_tofUnified;
  int v4 = FDRInputFactory::_pearlAvailable;
  *((unsigned char *)this + 3mach_timebase_info(this + 3) = FDRInputFactory::_pearlAvailable;
  int v5 = FDRInputFactory::_tofAvailable;
  *((unsigned char *)this + 49) = FDRInputFactory::_tofAvailable;
  if (v2) {
    int v6 = "unified";
  }
  else {
    int v6 = "not unified";
  }
  if (!v4) {
    int v6 = "unavailable";
  }
  if (v3) {
    unsigned int v7 = "unified";
  }
  else {
    unsigned int v7 = "not unified";
  }
  if (!v5) {
    unsigned int v7 = "unavailable";
  }
  NSLog(&cfstr_PearlFdrIsSTof.isa, v6, v7);
}

uint64_t CalibrationManager<FileInputFactory>::CalibrationManager(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEB538;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = &unk_26FAEB568;
  *(void *)(a1 + 16) = a1 + 24;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *(unsigned char *)(a1 + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = FileInputFactory::validate((FileInputFactory *)(a1 + 8));
  return a1;
}

void sub_2468A89AC(_Unwind_Exception *a1)
{
  FileInputFactory::~FileInputFactory(v1);
  _Unwind_Resume(a1);
}

void PCECalibrationManager<FileInputFactory>::~PCECalibrationManager(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory((CFTypeRef *)(a1 + 8));

  JUMPOUT(0x24C53D6E0);
}

uint64_t PCECalibrationManager<FileInputFactory>::readPFCL(uint64_t a1, _WORD *a2)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 14);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*Input + 16))(Input);
  if (result)
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v6, 4);
    if (v6 == 0x1000000)
    {
      uint64_t result = Input::readAll<pfcl>((const char *)Input, (uint64_t)v5);
      if (result) {
        *a2 = v5[3];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL Input::readAll<pfcl>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 8) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 8);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 8, v4);
  }
  return v5 == 8;
}

uint64_t PCECalibrationManager<FileInputFactory>::readPWCL(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 13);
  if ((*(unsigned int (**)(uint64_t *))(*Input + 16))(Input))
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v5, 4);
    if (v5 == 50331648)
    {
      (*(void (**)(uint64_t *, unsigned char *, uint64_t))(*Input + 24))(Input, v6, 125);
      *a2 = bswap32(v7) >> 16;
      operator new[]();
    }
  }
  return 0;
}

BOOL Input::readAll<pcve>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 96) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 96);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 96, v4);
  }
  return v5 == 96;
}

BOOL PCECalibrationManager<FileInputFactory>::readPCIIv1(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  BOOL v5 = Input::readAll<pcii_v1>(v4, (uint64_t)&v11);
  if (v5)
  {
    uint64_t v6 = 0;
    double v7 = *(double *)v3;
    *(float64x2_t *)(v3 + 8) = vmulq_n_f64(v11, *(double *)v3);
    *(double *)(v3 + 24) = v7 * v12;
    uint64_t v8 = (float64x2_t *)v3;
    do
    {
      uint64_t v9 = (const double *)&v13[v6];
      float64x2x2_t v14 = vld2q_f64(v9);
      v8[2] = vmulq_n_f64(v14.val[0], v7);
      v8[130] = vmulq_n_f64(v14.val[1], v7);
      v6 += 32;
      ++v8;
    }
    while (v6 != 4096);
    bzero((void *)(v3 + 4128), 0x40uLL);
    bzero((void *)(v3 + 4192), 0x40uLL);
  }
  return v5;
}

BOOL PCECalibrationManager<FileInputFactory>::readPCIIv2(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  BOOL v5 = Input::readAll<pcii_v1>(v4, (uint64_t)&v10);
  if (v5)
  {
    uint64_t v6 = 0;
    double v7 = *(double *)v3;
    *(float64x2_t *)(v3 + 8) = vmulq_n_f64(v10, *(double *)v3);
    *(double *)(v3 + 24) = v7 * v11;
    do
    {
      uint64_t v8 = (float64x2_t *)(v3 + v6);
      v8[2] = vmulq_n_f64(*(float64x2_t *)&v12[v6], v7);
      v8[130] = vmulq_n_f64(*(float64x2_t *)&v12[v6 + 2048], v7);
      v6 += 16;
    }
    while (v6 != 2048);
    bzero((void *)(v3 + 4128), 0x40uLL);
    bzero((void *)(v3 + 4192), 0x40uLL);
  }
  return v5;
}

double PCECalibrationManager<FileInputFactory>::readPCIIv3(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  if (Input::readAll<pcii_v3>(v4, (uint64_t)&v13))
  {
    uint64_t v6 = 0;
    double v7 = *(double *)v3;
    *(float64x2_t *)(v3 + 8) = vmulq_n_f64(v13, *(double *)v3);
    *(double *)(v3 + 24) = v7 * v14;
    do
    {
      uint64_t v8 = (float64x2_t *)(v3 + v6);
      v8[2] = vmulq_n_f64(*(float64x2_t *)&v15[v6], v7);
      v8[130] = vmulq_n_f64(*(float64x2_t *)&v15[v6 + 2048], v7);
      v6 += 16;
    }
    while (v6 != 2048);
    long long v9 = v17;
    *(_OWORD *)(v3 + 4128) = v16;
    *(_OWORD *)(v3 + 4144) = v9;
    long long v10 = v19;
    *(_OWORD *)(v3 + 416H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v18;
    *(_OWORD *)(v3 + 4176) = v10;
    long long v11 = v21;
    *(_OWORD *)(v3 + 4192) = v20;
    *(_OWORD *)(v3 + 4208) = v11;
    double result = *(double *)&v22;
    long long v12 = v23;
    *(_OWORD *)(v3 + 4224) = v22;
    *(_OWORD *)(v3 + 424H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v12;
  }
  return result;
}

BOOL Input::readAll<pcii_v1>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 4144) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 4144);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 4144, v4);
  }
  return v5 == 4144;
}

BOOL Input::readAll<pcii_v3>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 4248) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 4248);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 4248, v4);
  }
  return v5 == 4248;
}

uint64_t JasperCalibrationManager<FileInputFactory>::JasperCalibrationManager(uint64_t a1)
{
  uint64_t v2 = (void *)CalibrationManager<FileInputFactory>::CalibrationManager(a1);
  void *v2 = &unk_26FAEB760;
  JasperCalibrationManager<FileInputFactory>::readSerialNumber((uint64_t)v2);
  return a1;
}

void sub_2468A923C(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory((CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void JasperCalibrationManager<FileInputFactory>::readSerialNumber(uint64_t a1)
{
  *(unsigned char *)(a1 + 81) = 0;
  uint64_t v1 = (char *)(a1 + 81);
  mach_port_t v2 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v3 = IOServiceNameMatching("AppleH16CamIn");
  io_service_t MatchingService = IOServiceGetMatchingService(v2, v3);
  CFDataRef v5 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"JasperSNUM", (CFAllocatorRef)*MEMORY[0x263EFFB08], 3u);
  if (!v5) {
    return;
  }
  CFDataRef v6 = v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == CFDataGetTypeID())
  {
    BytePtr = (const char *)CFDataGetBytePtr(v6);
    goto LABEL_7;
  }
  CFTypeID v9 = CFGetTypeID(v6);
  if (v9 == CFStringGetTypeID())
  {
    BytePtr = CFStringGetCStringPtr((CFStringRef)v6, 0x8000100u);
LABEL_7:
    if (BytePtr) {
      strncpy(v1, BytePtr, 0x20uLL);
    }
  }

  CFRelease(v6);
}

void JasperCalibrationManager<FileInputFactory>::~JasperCalibrationManager(uint64_t a1)
{
  *(void *)a1 = &unk_26FAEB538;
  FileInputFactory::~FileInputFactory((CFTypeRef *)(a1 + 8));

  JUMPOUT(0x24C53D6E0);
}

double PCECalibrationManager<FileInputFactory>::readPCIC(uint64_t a1, uint64_t a2)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 0);
  if ((*(unsigned int (**)(uint64_t *))(*Input + 16))(Input))
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v6, 4);
    switch(v6)
    {
      case 1:
        if (Input::readAll<pcic_v1>((const char *)Input, (uint64_t)&v7)) {
          goto LABEL_8;
        }
        break;
      case 2:
        if (Input::readAll<pcic_v2>((const char *)Input, (uint64_t)&v7)) {
          goto LABEL_8;
        }
        break;
      case 3:
        if (Input::readAll<pcic_v3>((const char *)Input, (uint64_t)&v7))
        {
LABEL_8:
          *(_DWORD *)(a2 + 428H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v7;
          double result = v8;
          *(double *)(a2 + 24) = v8;
        }
        break;
      case 4:
        double result = PCECalibrationManager<FileInputFactory>::readPCICv4(a1, (const char *)Input, a2);
        break;
      default:
        return result;
    }
  }
  return result;
}

void PCECalibrationManager<FileInputFactory>::readPCII(uint64_t a1)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 2);
  if ((*(unsigned int (**)(uint64_t *))(*Input + 16))(Input))
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v3, 4);
    switch(v3)
    {
      case 3:
        PCECalibrationManager<FileInputFactory>::readPCIIv3(a1, (uint64_t)Input);
        break;
      case 2:
        PCECalibrationManager<FileInputFactory>::readPCIIv2(a1, (uint64_t)Input);
        break;
      case 1:
        PCECalibrationManager<FileInputFactory>::readPCIIv1(a1, (uint64_t)Input);
        break;
    }
  }
}

void PCECalibrationManager<FileInputFactory>::readPCVC(uint64_t a1, uint64_t a2)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 1);
  if ((*(unsigned int (**)(uint64_t *))(*Input + 16))(Input))
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v5, 4);
    if (v5 == 3)
    {
      PCECalibrationManager<FileInputFactory>::readPCVCv3(a1, (const char *)Input, a2);
    }
    else if (v5 == 2)
    {
      PCECalibrationManager<FileInputFactory>::readPCVCv2(a1, (const char *)Input, a2);
    }
    else if (v5 == 1 && Input::readAll<pcic_v1>((const char *)Input, (uint64_t)&v6))
    {
      *(_DWORD *)(a2 + 8544) = v6;
      *(void *)(a2 + 4288) = v7;
      *(void *)(a2 + 876H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
      *(void *)(a2 + 8776) = 0;
      *(void *)(a2 + 8768) = 0;
    }
  }
}

uint64_t PCECalibrationManager<FileInputFactory>::readPBAS(uint64_t a1, uint64_t a2)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 5);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*Input + 16))(Input);
  if (result)
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v7, 4);
    if (v7 == 1)
    {
      uint64_t result = Input::readAll<pbas>((const char *)Input, (uint64_t)&v5);
      if (result)
      {
        *(_OWORD *)a2 = v5;
        *(void *)(a2 + 16) = v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t PCECalibrationManager<FileInputFactory>::readPMPC(uint64_t a1, uint64_t a2)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 6);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*Input + 16))(Input);
  if (result)
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v8, 4);
    if (v8 == 1)
    {
      uint64_t result = Input::readAll<pmpc>((const char *)Input, (uint64_t)&v5);
      if (result)
      {
        *(void *)a2 = v5;
        *(_OWORD *)(a2 + 8) = v6;
        *(void *)(a2 + 24) = v7;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t PCECalibrationManager<FileInputFactory>::initRuntime(uint64_t a1, uint64_t a2)
{
  memcpy((void *)(a2 + 8784), (const void *)(a2 + 24), 0x10A8uLL);
  uint64_t v3 = 0;
  int v4 = (double *)(a2 + 13048);
  do
  {
    uint64_t v5 = 0;
    long long v6 = v4;
    do
    {
      if (v3 == v5) {
        double v7 = 1.0;
      }
      else {
        double v7 = 0.0;
      }
      *long long v6 = v7;
      v6 += 3;
      ++v5;
    }
    while (v5 != 3);
    ++v3;
    ++v4;
  }
  while (v3 != 3);
  *(_OWORD *)(a2 + 1312H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = *(_OWORD *)(a2 + 8648);
  *(void *)(a2 + 13136) = *(void *)(a2 + 8664);
  if (*(double *)(a2 + 8768) == 0.0 && *(double *)(a2 + 8776) == 0.0)
  {
    double v8 = *(double *)(a2 + 4296);
    if (v8 != 0.0) {
      *(double *)(a2 + 8768) = v8;
    }
  }
  return 1;
}

uint64_t PCECalibrationManager<FileInputFactory>::readPSD2(uint64_t a1)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 12);
  if ((*(unsigned int (**)(uint64_t *))(*Input + 16))(Input))
  {
    (*(void (**)(uint64_t *))(*Input + 32))(Input);
    operator new[]();
  }
  return 0;
}

double PCECalibrationManager<FileInputFactory>::readPCICv4(uint64_t a1, const char *a2, uint64_t a3)
{
  if (Input::readAll<pcic_v4>(a2, (uint64_t)&v6))
  {
    *(_DWORD *)(a3 + 428H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v6;
    double v5 = v7;
    *(double *)(a3 + 24) = v7;
    *(void *)(a3 + 8712) = v10;
    *(double *)(a3 + 872H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v5 * v8;
    *(double *)(a3 + 8728) = v5 * v9;
    *(double *)(a3 + 8736) = v5 * v12;
    double result = v5 * v11;
    *(double *)(a3 + 8744) = result;
    *(double *)(a3 + 8752) = result;
  }
  return result;
}

BOOL Input::readAll<pcic_v1>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 12) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 12);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 12, v4);
  }
  return v5 == 12;
}

BOOL Input::readAll<pcic_v2>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 20) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 20);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 20, v4);
  }
  return v5 == 20;
}

BOOL Input::readAll<pcic_v3>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 36) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 36);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 36, v4);
  }
  return v5 == 36;
}

BOOL Input::readAll<pcic_v4>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 84) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 84);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 84, v4);
  }
  return v5 == 84;
}

double PCECalibrationManager<FileInputFactory>::readPCVCv2(uint64_t a1, const char *a2, uint64_t a3)
{
  if (Input::readAll<pcic_v2>(a2, (uint64_t)&v5))
  {
    *(_DWORD *)(a3 + 8544) = v5;
    *(void *)(a3 + 4288) = v6;
    *(void *)(a3 + 876H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v7;
    double result = 0.0;
    *(_OWORD *)(a3 + 8768) = 0u;
  }
  return result;
}

double PCECalibrationManager<FileInputFactory>::readPCVCv3(uint64_t a1, const char *a2, uint64_t a3)
{
  if (Input::readAll<pcic_v3>(a2, (uint64_t)&v7))
  {
    *(_DWORD *)(a3 + 8544) = v7;
    double v5 = v8;
    uint64_t v6 = v9;
    *(double *)(a3 + 4288) = v8;
    *(void *)(a3 + 876H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v6;
    *(double *)(a3 + 8768) = v5 * v10;
    double result = v5 * v11;
    *(double *)(a3 + 8776) = result;
  }
  return result;
}

BOOL Input::readAll<pbas>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 24) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 24);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 24, v4);
  }
  return v5 == 24;
}

BOOL Input::readAll<pmpc>(const char *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(const char *))(*(void *)a1 + 32))(a1);
  int v5 = v4;
  if (v4 == 32) {
    (*(void (**)(const char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 32);
  }
  else {
    printf("Expected file %s to be of size %ld. Actual size: %d\n", a1 + 8, 32, v4);
  }
  return v5 == 32;
}

double PCECalibrationManager<FDRInputFactory>::readPCIC(uint64_t a1, uint64_t a2)
{
  Input = InputFactory::getInput((uint64_t **)(a1 + 8), 0);
  if ((*(unsigned int (**)(uint64_t *))(*Input + 16))(Input))
  {
    (*(void (**)(uint64_t *, int *, uint64_t))(*Input + 24))(Input, &v6, 4);
    switch(v6)
    {
      case 1:
        if (Input::readAll<pcic_v1>((const char *)Input, (uint64_t)&v7)) {
          goto LABEL_8;
        }
        break;
      case 2:
        if (Input::readAll<pcic_v2>((const char *)Input, (uint64_t)&v7)) {
          goto LABEL_8;
        }
        break;
      case 3:
        if (Input::readAll<pcic_v3>((const char *)Input, (uint64_t)&v7))
        {
LABEL_8:
          *(_DWORD *)(a2 + 428H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v7;
          double result = v8;
          *(double *)(a2 + 24) = v8;
        }
        break;
      case 4:
        double result = PCECalibrationManager<FileInputFactory>::readPCICv4(a1, (const char *)Input, a2);
        break;
      default:
        return result;
    }
  }
  return result;
}

BOOL JasperCalibrationManager<FileInputFactory>::readBlob(uint64_t a1, unsigned int a2, __CFDictionary *a3)
{
  OnlyBlob = JasperCalibrationManager<FileInputFactory>::readOnlyBlob(a1, a2);
  if (OnlyBlob)
  {
    CFDictionarySetValue(a3, (const void *)[NSString stringWithUTF8String:&CalibrationDataTypeName[256 * (unint64_t)a2]], OnlyBlob);
    CFRelease(OnlyBlob);
  }
  else
  {
    NSLog(&cfstr_SCouldnTOpenIn.isa, &CalibrationDataTypeName[256 * (unint64_t)a2]);
  }
  return OnlyBlob != 0;
}

uint64_t JasperCalibrationManager<NvmPeridotInputFactory>::JasperCalibrationManager(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)CalibrationManager<NvmPeridotInputFactory>::CalibrationManager(a1, a2);
  void *v3 = &unk_26FAEB798;
  JasperCalibrationManager<NvmPeridotInputFactory>::readSerialNumber((uint64_t)v3);
  return a1;
}

void sub_2468AA2B0(_Unwind_Exception *a1)
{
  void *v1 = &unk_26FAEB630;
  NvmPeridotInputFactory::~NvmPeridotInputFactory((NvmPeridotInputFactory *)(v1 + 1));
  _Unwind_Resume(a1);
}

uint64_t CalibrationManager<NvmPeridotInputFactory>::CalibrationManager(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FAEB630;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *(void *)(a1 + 8) = &unk_26FAEB3E0;
  *(void *)(a1 + 16) = a1 + 24;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 48) = NvmPeridotInputFactory::validate((NvmPeridotInputFactory *)(a1 + 8), a2);
  return a1;
}

void sub_2468AA35C(_Unwind_Exception *a1)
{
  NvmPeridotInputFactory::~NvmPeridotInputFactory(v1);
  _Unwind_Resume(a1);
}

void JasperCalibrationManager<NvmPeridotInputFactory>::readSerialNumber(uint64_t a1)
{
  *(unsigned char *)(a1 + 49) = 0;
  uint64_t v1 = (char *)(a1 + 49);
  mach_port_t v2 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v3 = IOServiceNameMatching("AppleH16CamIn");
  io_service_t MatchingService = IOServiceGetMatchingService(v2, v3);
  CFDataRef v5 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"JasperSNUM", (CFAllocatorRef)*MEMORY[0x263EFFB08], 3u);
  if (!v5) {
    return;
  }
  CFDataRef v6 = v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == CFDataGetTypeID())
  {
    BytePtr = (const char *)CFDataGetBytePtr(v6);
    goto LABEL_7;
  }
  CFTypeID v9 = CFGetTypeID(v6);
  if (v9 == CFStringGetTypeID())
  {
    BytePtr = CFStringGetCStringPtr((CFStringRef)v6, 0x8000100u);
LABEL_7:
    if (BytePtr) {
      strncpy(v1, BytePtr, 0x20uLL);
    }
  }

  CFRelease(v6);
}

void JasperCalibrationManager<NvmPeridotInputFactory>::~JasperCalibrationManager(void *a1)
{
  *a1 = &unk_26FAEB630;
  NvmPeridotInputFactory::~NvmPeridotInputFactory((NvmPeridotInputFactory *)(a1 + 1));

  JUMPOUT(0x24C53D6E0);
}

void H16ISP::H16ISPGraphSegmentationNode::H16ISPGraphSegmentationNode(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode(a1, 8);
  *(void *)uint64_t v13 = &unk_26FAEB7D0;
  *(void *)(v13 + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = a2;
  *(_DWORD *)(v13 + 88) = a3;
  *(_DWORD *)(v13 + 92) = a4;
  *(_DWORD *)(v13 + 96) = a5;
  *(_DWORD *)(v13 + 10H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = a6;
  *(_DWORD *)(v13 + 104) = a7;
  *(void *)(v13 + 112) = 0;
  *(_DWORD *)(v13 + 12H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 1;
  *(void *)(v13 + 128) = 0;
  *(void *)(v13 + 136) = 0;
}

{
  uint64_t v13;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode(a1, 8);
  *(void *)uint64_t v13 = &unk_26FAEB7D0;
  *(void *)(v13 + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = a2;
  *(_DWORD *)(v13 + 88) = a3;
  *(_DWORD *)(v13 + 92) = a4;
  *(_DWORD *)(v13 + 96) = a5;
  *(_DWORD *)(v13 + 10H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = a6;
  *(_DWORD *)(v13 + 104) = a7;
  *(void *)(v13 + 112) = 0;
  *(_DWORD *)(v13 + 12H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 1;
  *(void *)(v13 + 128) = 0;
  *(void *)(v13 + 136) = 0;
}

void H16ISP::H16ISPGraphSegmentationNode::~H16ISPGraphSegmentationNode(H16ISP::H16ISPGraphSegmentationNode *this)
{
  *(void *)this = &unk_26FAEB7D0;
  H16ISP::H16ISPGraphSegmentationNode::onDeactivate(this);

  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);
}

{
  uint64_t vars8;

  H16ISP::H16ISPGraphSegmentationNode::~H16ISPGraphSegmentationNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPGraphSegmentationNode::SetSegmentationNetwork(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = a2;
  return result;
}

uint64_t H16ISP::H16ISPGraphSegmentationNode::onActivate(H16ISP::H16ISPGraphSegmentationNode *this)
{
  *((void *)this + 14) = CVASegmentationCreate();
  return 3758097084;
}

uint64_t H16ISP::H16ISPGraphSegmentationNode::onDeactivate(H16ISP::H16ISPGraphSegmentationNode *this)
{
  mach_port_t v2 = (const void *)*((void *)this + 14);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 14) = 0;
  }
  CFDictionaryRef v3 = (const void *)*((void *)this + 16);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 16) = 0;
  }
  int v4 = (const void *)*((void *)this + 17);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 17) = 0;
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphSegmentationNode::onMessageProcessing(H16ISP::H16ISPGraphSegmentationNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  int v2 = *((_DWORD *)this + 30);
  if (v2)
  {
    v34[0] = 0;
    v34[1] = v34;
    __n128 v34[2] = 0x2000000000;
    v34[3] = 0;
    CVPixelBufferRef v33 = 0;
    CVPixelBufferRef v32 = 0;
    dispatch_semaphore_create(0);
    uint64_t v31 = *(void *)(*((void *)this + 10) + 4384);
    int v5 = *((_DWORD *)this + 22);
    int v6 = *((_DWORD *)this + 23);
    uint64_t v27 = (pthread_mutex_t *)((char *)a2 + 8);
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
    CFTypeID v7 = 0;
    CVPixelBufferRef texture = 0;
    CFTypeRef Attachment = 0;
    uint64_t v9 = 0;
    double v10 = (char *)a2 + 80;
    CFStringRef key = (const __CFString *)*MEMORY[0x263F2C558];
    double v11 = (char *)a2 + 112;
    off_t v28 = (char *)a2 + 80;
    while (1)
    {
      double v12 = &v10[312 * v9];
      unsigned int v15 = *((_DWORD *)v12 + 5);
      double v14 = (unsigned int *)(v12 + 20);
      unint64_t v13 = v15;
      if (v15) {
        break;
      }
LABEL_23:
      ++v9;
      v11 += 312;
      double v10 = v28;
      if (v9 == 3)
      {
        uint64_t v25 = Attachment;
        if (v7) {
          CVPixelBufferRetain(v7);
        }
        if (texture) {
          CVPixelBufferRetain(texture);
        }
        if (v25) {
          CFRetain(v25);
        }
        if (v33) {
          CVPixelBufferRetain(v33);
        }
        if (v32) {
          CVPixelBufferRetain(v32);
        }
        pthread_mutex_unlock(v27);
        operator new();
      }
    }
    unint64_t v16 = 0;
    long long v17 = &v10[312 * v9 + 16];
    long long v18 = v11;
    long long v19 = v7;
    while (1)
    {
      CFTypeID v7 = (__CVBuffer *)*((void *)v18 - 1);
      unsigned int v20 = *(_DWORD *)v17;
      if (v2 == 2 && *(_DWORD *)(v31 + 96 * v20 + 16) == 1718186595)
      {
        if (*v18 == 15)
        {
          long long v21 = &v33;
        }
        else
        {
          if (*v18 != 2) {
            goto LABEL_12;
          }
          long long v21 = &v32;
        }
        *long long v21 = v7;
      }
LABEL_12:
      if (v20 != v5) {
        goto LABEL_21;
      }
      int v22 = *v18;
      if (*v18 != v6)
      {
        if (v22 == 15)
        {
          CVPixelBufferRef v33 = v7;
        }
        else
        {
          BOOL v23 = v22 == 2;
          double v24 = texture;
          if (v23) {
            double v24 = v7;
          }
          CVPixelBufferRef texture = v24;
        }
LABEL_21:
        CFTypeID v7 = v19;
        goto LABEL_22;
      }
      CFTypeRef Attachment = CVBufferGetAttachment(v7, key, 0);
      unint64_t v13 = *v14;
LABEL_22:
      ++v16;
      v18 += 4;
      long long v19 = v7;
      if (v16 >= v13) {
        goto LABEL_23;
      }
    }
  }
  return 0;
}

void sub_2468AB284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  MEMORY[0x24C53D6E0](a16, 0x1020C405A04CE29);
  _Block_object_dispose((const void *)(v16 - 128), 8);
  _Unwind_Resume(a1);
}

intptr_t ___ZN6H16ISP27H16ISPGraphSegmentationNode19onMessageProcessingEPNS_24H16ISPFilterGraphMessageE_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  CFRetain(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  CFDictionaryRef v3 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v3);
}

void H16ISP::createPixelBufferPool(H16ISP *this, int a2, int a3, int a4, CVPixelBufferPoolRef *a5, __CVPixelBufferPool **a6)
{
  int v19 = a2;
  int valuePtr = (int)this;
  int v17 = a4;
  int v18 = a3 + 3;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return;
  }
  CFMutableDictionaryRef v9 = Mutable;
  CFNumberRef v10 = CFNumberCreate(v7, kCFNumberIntType, &v17);
  if (!v10)
  {
    uint64_t v16 = v9;
LABEL_15:
    CFRelease(v16);
    return;
  }
  CFNumberRef v11 = v10;
  CFNumberRef v12 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
  if (!v12)
  {
    CFNumberRef v13 = 0;
    goto LABEL_19;
  }
  CFNumberRef v13 = CFNumberCreate(v7, kCFNumberIntType, &v19);
  if (!v13)
  {
LABEL_19:
    CFNumberRef v14 = 0;
    goto LABEL_20;
  }
  CFNumberRef v14 = CFNumberCreate(v7, kCFNumberIntType, &v18);
  if (!v14)
  {
LABEL_20:
    uint64_t v16 = 0;
    goto LABEL_8;
  }
  unsigned int v15 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v16 = v15;
  if (v15)
  {
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x263F04130], v9);
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F04180], v11);
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F04240], v12);
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F04118], v13);
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F041C0], v14);
    CVPixelBufferPoolCreate(v7, 0, v16, a5);
  }
LABEL_8:
  CFRelease(v9);
  CFRelease(v11);
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v16) {
    goto LABEL_15;
  }
}

void H16ISP::H16ISPGraphExclaveAttentionDetectionNode::H16ISPGraphExclaveAttentionDetectionNode(H16ISP::H16ISPGraphExclaveAttentionDetectionNode *this, H16ISP::H16ISPDevice *a2, int a3)
{
  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 17);
  *(void *)uint64_t v5 = &unk_26FAEB848;
  *(unsigned char *)(v5 + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *(void *)(v5 + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

{
  uint64_t v5;

  H16ISP::H16ISPFilterGraphNode::H16ISPFilterGraphNode((uint64_t)this, 17);
  *(void *)uint64_t v5 = &unk_26FAEB848;
  *(unsigned char *)(v5 + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
  *(void *)(v5 + 88) = a2;
  *(_DWORD *)(v5 + 96) = a3;
}

void H16ISP::H16ISPGraphExclaveAttentionDetectionNode::~H16ISPGraphExclaveAttentionDetectionNode(H16ISP::H16ISPGraphExclaveAttentionDetectionNode *this)
{
  H16ISP::H16ISPFilterGraphNode::~H16ISPFilterGraphNode(this);

  JUMPOUT(0x24C53D6E0);
}

uint64_t H16ISP::H16ISPGraphExclaveAttentionDetectionNode::onActivate(H16ISP::H16ISPGraphExclaveAttentionDetectionNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)CFDictionaryRef v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_INFO, "[Exclaves]: H16ISPGraphAttentionDetectionNode::onActivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveAttentionDetectionNode::onDeactivate(H16ISP::H16ISPGraphExclaveAttentionDetectionNode *this)
{
  uint64_t v1 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    uint64_t v1 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v1;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)CFDictionaryRef v3 = 0;
    _os_log_impl(&dword_24680F000, v1, OS_LOG_TYPE_INFO, "[Exclaves]: H16ISPGraphAttentionDetectionNode::onDeactivate\n", v3, 2u);
  }
  return 0;
}

uint64_t H16ISP::H16ISPGraphExclaveAttentionDetectionNode::AddAttentionDetectionMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v42 = a4;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  CFNumberRef v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFNumberRef v12 = CFArrayCreateMutable(v8, 0, MEMORY[0x263EFFF70]);
  CFNumberRef v13 = CFDictionaryCreateMutable(v8, 0, v9, v10);
  CFNumberRef v14 = CFDictionaryCreateMutable(v8, 0, v9, v10);
  CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v8, 0, v9, v10);
  uint64_t v16 = v15;
  if (Mutable) {
    BOOL v17 = v12 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17 || v13 == 0 || v14 == 0 || v15 == 0)
  {
    uint64_t v21 = 3758097086;
    goto LABEL_35;
  }
  if (*(float *)(a3 + 24) >= 0.0)
  {
    *(_DWORD *)int buf = *(_DWORD *)(a3 + 44);
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
    CFDictionarySetValue(v13, (const void *)*MEMORY[0x263F2D0D8], v23);
    CFRelease(v23);
    int valuePtr = (int)*(float *)(a3 + 32);
    CFNumberRef v24 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v13, (const void *)*MEMORY[0x263F2CEF0], v24);
    CFRelease(v24);
    int valuePtr = (int)*(float *)(a3 + 36);
    CFNumberRef v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v13, (const void *)*MEMORY[0x263F2CEE8], v25);
    CFRelease(v25);
    int valuePtr = (int)*(float *)(a3 + 28);
    CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v13, (const void *)*MEMORY[0x263F2CEE0], v26);
    CFRelease(v26);
    v43.origin.x = *(float *)(a3 + 8);
    v43.origin.y = *(float *)(a3 + 12);
    v43.size.width = *(float *)(a3 + 16);
    v43.size.height = *(float *)(a3 + 20);
    DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v43);
    if (DictionaryRepresentation)
    {
      CFDictionaryRef v28 = DictionaryRepresentation;
      CFDictionarySetValue(v13, (const void *)*MEMORY[0x263F2D440], DictionaryRepresentation);
      CFRelease(v28);
    }
    int v39 = (int)(float)(*(float *)(a3 + 4) * 1000.0);
    CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
    CFDictionarySetValue(v13, (const void *)*MEMORY[0x263F2CF08], v29);
    CFRelease(v29);
    int v38 = (int)(float)(*(float *)(a3 + 24) * 1000.0);
    CFNumberRef v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
    CFDictionarySetValue(v13, (const void *)*MEMORY[0x263F2CFB8], v30);
    CFRelease(v30);
    if (*(float *)(a3 + 4) == 0.0)
    {
      uint64_t v31 = (const void *)*MEMORY[0x263EFFB38];
      CVPixelBufferRef v32 = (const void *)*MEMORY[0x263EFFB38];
    }
    else
    {
      CVPixelBufferRef v32 = (const void *)*MEMORY[0x263EFFB38];
      if (*(unsigned char *)a3) {
        uint64_t v31 = (const void *)*MEMORY[0x263EFFB40];
      }
      else {
        uint64_t v31 = (const void *)*MEMORY[0x263EFFB38];
      }
    }
    CFDictionarySetValue(v13, (const void *)*MEMORY[0x263F2CF00], v31);
    if (a5)
    {
      int v33 = *(_DWORD *)(a3 + 48);
      if (v33 == 2048 || v33 == 32) {
        CVPixelBufferRef v32 = (const void *)*MEMORY[0x263EFFB40];
      }
      CFDictionarySetValue(v13, (const void *)*MEMORY[0x263F2D0D0], v32);
    }
    CFArrayAppendValue(v12, v13);
    goto LABEL_34;
  }
  int v22 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
  {
    int v22 = os_log_create("com.apple.isp", "exclaves");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v22;
  }
  uint64_t v21 = 0;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_24680F000, v22, OS_LOG_TYPE_DEFAULT, "[Exclaves]: Face confidence is less than 0.0 (i.e., no face in FOV). Return empty dictionary\n", buf, 2u);
LABEL_34:
    uint64_t v21 = 0;
  }
LABEL_35:
  if (v16) {
    BOOL v34 = v14 == 0;
  }
  else {
    BOOL v34 = 1;
  }
  if (!v34 && v12 != 0)
  {
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2C988], v12);
    CFNumberRef v36 = CFNumberCreate(0, kCFNumberLongLongType, &v42);
    CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F2D620], v36);
    CFRelease(v36);
    CFDictionarySetValue(v14, (const void *)*MEMORY[0x263F2C958], v16);
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 8));
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 368), (const void *)*MEMORY[0x263F2CD70], v14);
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 8));
  }
  if (v13) {
    CFRelease(v13);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v21;
}

uint64_t H16ISP::H16ISPGraphExclaveAttentionDetectionNode::onMessageProcessing(H16ISP::H16ISPGraphExclaveAttentionDetectionNode *this, H16ISP::H16ISPFilterGraphMessage *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 9) & (1 << H16ISP::H16ISPFilterGraphNode::GetType(this));
  *((unsigned char *)this + 8H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v4 != 0;
  if (v4)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
    int v5 = *((_DWORD *)a2 + 90);
    uint64_t v6 = *((void *)a2 + 11);
    int v7 = *((unsigned __int8 *)a2 + 385);
    int v8 = *((unsigned __int8 *)a2 + 386);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
    if (H16ISP::H16ISPDevice::enabledExclaveDebug(*((H16ISP::H16ISPDevice **)this + 11)))
    {
      CFMutableDictionaryRef v9 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        CFMutableDictionaryRef v9 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v9;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *((_DWORD *)this + 24);
        *(_DWORD *)int buf = 136315650;
        BOOL v34 = "onMessageProcessing";
        __int16 v35 = 1024;
        int v36 = v5;
        __int16 v37 = 1024;
        int v38 = v10;
        _os_log_impl(&dword_24680F000, v9, OS_LOG_TYPE_DEFAULT, "[Exclaves] H16ISPGraphAttentionDetectionNode::%s RunKit AD reqid 0x%08X channel %d\n", buf, 0x18u);
      }
    }
    if (!H16ISP::H16ISPDevice::isSensorType(*((void *)this + 11), *((_DWORD *)this + 24), 1718186595)) {
      return 0;
    }
    uint64_t v11 = *(void *)(*((void *)this + 11) + 136);
    if (v11)
    {
      v32[0] = *((_DWORD *)this + 24);
      v32[1] = 5;
      kdebug_trace();
      int v12 = ispirexclavekitmodule_ispirexclavekit_sendcmdchrunkitad(v11, (uint64_t)v32);
      kdebug_trace();
      if (v12 || !v40[0])
      {
        uint64_t v31 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          uint64_t v31 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v31;
        }
        uint64_t v21 = 3758097130;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          H16ISP::H16ISPGraphExclaveAttentionDetectionNode::onMessageProcessing(v40, v12, v31);
        }
      }
      else
      {
        uint64_t v13 = H16ISP::H16ISPDevice::enabledExclaveDebug(*((H16ISP::H16ISPDevice **)this + 11));
        if (v13)
        {
          CFNumberRef v14 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
          {
            CFNumberRef v14 = os_log_create("com.apple.isp", "exclaves");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v14;
          }
          uint64_t v13 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          if (v13)
          {
            *(_DWORD *)double v41 = 67109376;
            *(_DWORD *)uint64_t v42 = v32[0];
            *(_WORD *)&v42[4] = 1024;
            *(_DWORD *)&v42[6] = buf[0];
            _os_log_impl(&dword_24680F000, v14, OS_LOG_TYPE_DEFAULT, "[Exclaves]: IR AD IDL Success: channel=%u, hasAttention=%d\n", v41, 0xEu);
          }
        }
        H16ISP::H16ISPGraphExclaveAttentionDetectionNode::AddAttentionDetectionMetadata(v13, (uint64_t)a2, (uint64_t)buf, v6, v8 != 0);
        int v15 = H16ISP::H16ISPDevice::enabledExclaveDebug(*((H16ISP::H16ISPDevice **)this + 11));
        if (v7)
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (Mutable)
          {
            BOOL v17 = Mutable;
            CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
            CFDictionarySetValue(v17, (const void *)*MEMORY[0x263F2E588], v18);
            CFRelease(v18);
            if (buf[0]) {
              int v19 = (const void **)MEMORY[0x263EFFB40];
            }
            else {
              int v19 = (const void **)MEMORY[0x263EFFB38];
            }
            CFDictionarySetValue(v17, (const void *)*MEMORY[0x263F2E590], *v19);
            pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 8));
            CFDictionarySetValue(*((CFMutableDictionaryRef *)a2 + 46), (const void *)*MEMORY[0x263F2CD20], v17);
            pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 8));
            CFRelease(v17);
          }
        }
        if (!v15) {
          return 0;
        }
        unsigned int v20 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
        {
          unsigned int v20 = os_log_create("com.apple.isp", "exclaves");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v20;
        }
        uint64_t v21 = 0;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          if (buf[0]) {
            int v22 = "true";
          }
          else {
            int v22 = "false";
          }
          *(_DWORD *)double v41 = 136315650;
          *(void *)uint64_t v42 = "AddFaceIDMetadata";
          *(_WORD *)&v42[8] = 1024;
          int v43 = v39;
          __int16 v44 = 2080;
          double v45 = v22;
          CFNumberRef v23 = "%s - [Exclaves]: Face ID PreCheck uxFeedback=0x%08X readiness=%s\n";
          CFNumberRef v24 = v41;
          CFNumberRef v25 = v20;
          uint32_t v26 = 28;
          goto LABEL_34;
        }
      }
    }
    else
    {
      CFNumberRef v30 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
      {
        CFNumberRef v30 = os_log_create("com.apple.isp", "exclaves");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v30;
      }
      uint64_t v21 = 3758097130;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        H16ISP::H16ISPGraphExclaveAttentionDetectionNode::onMessageProcessing(v30);
      }
    }
  }
  else
  {
    uint64_t v27 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog == &_os_log_internal)
    {
      uint64_t v27 = os_log_create("com.apple.isp", "exclaves");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_exclavesLog = (uint64_t)v27;
    }
    uint64_t v21 = 0;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = *((unsigned __int8 *)this + 80);
      *(_DWORD *)int buf = 136315394;
      BOOL v34 = "onMessageProcessing";
      __int16 v35 = 1024;
      int v36 = v28;
      CFNumberRef v23 = "[Exclaves] H16ISPGraphAttentionDetectionNode::%s Skipped processing secure attention detection algorithm alg"
            "oProcessing %d\n";
      CFNumberRef v24 = buf;
      CFNumberRef v25 = v27;
      uint32_t v26 = 18;
LABEL_34:
      _os_log_impl(&dword_24680F000, v25, OS_LOG_TYPE_DEFAULT, v23, v24, v26);
      return 0;
    }
  }
  return v21;
}

uint64_t H16ISP::H16ISPGraphExclaveAttentionDetectionNode::GetNodeProcessingState(H16ISP::H16ISPGraphExclaveAttentionDetectionNode *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t H16ISP::LoadPDEFiles(H16ISP *this, H16ISP::H16ISPDevice *a2)
{
  int v2 = (H16ISP::H16ISPDevice *)MEMORY[0x270FA5388](this, a2);
  uint64_t v3 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_DWORD *)(*((void *)v2 + 548) + 8);
  int v5 = -1;
  int v6 = -1;
  do
  {
    int v7 = v4[2];
    if (v7 == 1785950322)
    {
      if (*v4) {
        int v6 = v3;
      }
    }
    else if (v7 == 1718186595 && *v4)
    {
      int v5 = v3;
    }
    ++v3;
    v4 += 24;
  }
  while (v3 != 6);
  int v8 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (v5 == -1)
  {
    NSLog(&cfstr_FoundNoIrSenso.isa);
    goto LABEL_67;
  }
  mach_port_t v9 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v10 = IOServiceNameMatching("AppleH16CamIn");
  io_service_t MatchingService = IOServiceGetMatchingService(v9, v10);
  CFAllocatorRef v12 = *v8;
  CFTypeRef v13 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"SavageSNUM", *v8, 3u);
  if (v13)
  {
    CFRelease(v13);
    int v15 = 0;
  }
  else
  {
    NSLog(&cfstr_LoadpdefilesNo.isa);
    int v15 = 8;
  }
  isOverriddeuint64_t n = PCECalibration::isOverridden(v14);
  BOOL v17 = isOverridden;
  NSLog(&cfstr_LoadpdefilesIs.isa, isOverridden);
  id v59 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v58, "");
  CFNumberRef v18 = objc_msgSend((id)objc_msgSend(MEMORY[0x263F53618], "sharedDataAccessor"), "copyPathForPersistentData:error:", 101, &v59);
  if (v59)
  {

    if (!v17) {
      NSLog(&cfstr_CouldNotFindSe.isa);
    }
  }
  else
  {
    int v19 = v18;
    std::string::__assign_external(&v58, (const std::string::value_type *)[v18 UTF8String]);
    std::string::append(&v58, "/", 1uLL);

    if (!v17)
    {
      getMultiReferenceFileName((const void **)&v58.__r_.__value_.__l.__data_, 5, __p);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v20 = __p;
      }
      else {
        unsigned int v20 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      uint64_t v21 = fopen((const char *)v20, "r");
      int v22 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      if (v21)
      {
        CFNumberRef v23 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFNumberRef v23 = __p;
        }
        NSLog(&cfstr_FoundReference.isa, v23);
        v15 |= 1u;
        fclose(v21);
      }
      else
      {
        std::string::size_type v24 = __p[0].__r_.__value_.__r.__words[0];
        CFNumberRef v25 = __error();
        uint32_t v26 = __p;
        if (v22 < 0) {
          uint32_t v26 = (std::string *)v24;
        }
        NSLog(&cfstr_CouldNotFindRe.isa, v26, *v25);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
  }
  H16ISP::H16ISPDevice::ISP_GetCameraStatus((uint64_t)v2, outputStruct);
  int v27 = outputStruct[11];
  int IsSupportedFrontAutoFocus = H16ISP::H16ISPDevice::ISP_IsSupportedFrontAutoFocus(v2);
  if (v27) {
    int v29 = v15 | 2;
  }
  else {
    int v29 = v15;
  }
  if (IsSupportedFrontAutoFocus) {
    int v30 = 4;
  }
  else {
    int v30 = 16;
  }
  uint64_t v31 = (PCECalibration *)PCECalibration::configure(v29 | v30);
  PCECalibration::resetFdrValidation(v31);
  __p[0].__r_.__value_.__r.__words[0] = 0;
  if (PCECalibration::readNVMBuffer((size_t *)__p, v32)) {
    operator new[]();
  }
  NSLog(&cfstr_ErrorCouldnTSe.isa);
  bzero(__p, 0x14uLL);
  NSLog(&cfstr_ReadingRosalin.isa);
  CFDictionaryRef v33 = IOServiceNameMatching("product");
  io_service_t v34 = IOServiceGetMatchingService(v9, v33);
  CFDataRef v35 = (const __CFData *)IORegistryEntrySearchCFProperty(v34, "IOService", @"rosaline-serial-num", v12, 3u);
  CFDataRef v36 = v35;
  if (!v35)
  {
    NSLog(&cfstr_CouldnTReadSer.isa);
    goto LABEL_54;
  }
  BytePtr = CFDataGetBytePtr(v35);
  unsigned int Length = CFDataGetLength(v36);
  memcpy(&__p[0].__r_.__value_.__s.__data_[2], BytePtr, Length);
  NSLog(&cfstr_ReadingRosalin_0.isa);
  LOBYTE(BytePtr) = PCECalibration::readRosalineConfiguration((PCECalibration *)__p, v39);
  CFRelease(v36);
  if ((BytePtr & 1) == 0)
  {
    NSLog(&cfstr_ReadingRosalin_1.isa);
    CFDictionaryRef v40 = IOServiceNameMatching("AppleProxHIDEventDriver");
    io_service_t v41 = IOServiceGetMatchingService(v9, v40);
    CFNumberRef v42 = (const __CFNumber *)IORegistryEntrySearchCFProperty(v41, "IOService", @"floodCalibrationCurrent", v12, 3u);
    CFNumberRef v43 = v42;
    if (v42)
    {
      unsigned int valuePtr = 0;
      if (CFNumberGetValue(v42, kCFNumberSInt32Type, &valuePtr))
      {
        LOWORD(__p[0].__r_.__value_.__l.__data_) = valuePtr;
        if (valuePtr < 0x10000)
        {
          CFRelease(v43);
          goto LABEL_51;
        }
        NSLog(&cfstr_ErrorConvertin_0.isa);
      }
      else
      {
        NSLog(&cfstr_ErrorConvertin_1.isa);
      }
      CFRelease(v43);
    }
    else
    {
      NSLog(&cfstr_CouldNotReadCa.isa);
    }
    NSLog(&cfstr_ReadingRosalin_2.isa);
    CFDictionaryRef v44 = IOServiceNameMatching("isp");
    io_service_t v45 = IOServiceGetMatchingService(v9, v44);
    CFDataRef v46 = (const __CFData *)IORegistryEntrySearchCFProperty(v45, "IOService", @"rosaline-calibration-current", v12, 3u);
    CFDataRef v47 = v46;
    if (!v46)
    {
      NSLog(&cfstr_CouldNotReadCa_0.isa);
      goto LABEL_54;
    }
    LOWORD(__p[0].__r_.__value_.__l.__data_) = *((_WORD *)CFDataGetBytePtr(v46) + 1);
    CFRelease(v47);
  }
LABEL_51:
  NSLog(&cfstr_SendingRosalin.isa, &__p[0].__r_.__value_.__s.__data_[2], LOWORD(__p[0].__r_.__value_.__l.__data_));
  uint64_t DataFile = H16ISP::H16ISPDevice::ISP_LoadDataFile(v2, v5, (const unsigned __int8 *)__p, 0x14u, 6u);
  if (!DataFile) {
    goto LABEL_55;
  }
  NSLog(&cfstr_FailedToSendRo_0.isa, DataFile);
LABEL_54:
  NSLog(&cfstr_ErrorCouldnTSe_0.isa);
LABEL_55:
  bzero(__p, 0x3370uLL);
  if ((PCECalibration::fill((uint64_t)v2, (uint64_t)__p) & 1) == 0)
  {
    NSLog(&cfstr_FailedToReadPc.isa);
    goto LABEL_64;
  }
  if (v29) {
    BOOL v49 = &v58;
  }
  else {
    BOOL v49 = (std::string *)g_baseConfigurationDirectory;
  }
  if (sendReferences((uint64_t)v2, (const void **)&v49->__r_.__value_.__l.__data_, v5))
  {
    NSLog(&cfstr_FailedToSendRe.isa);
LABEL_64:
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    NSLog(&cfstr_FailedToLoadPd.isa);
    goto LABEL_67;
  }
  if (H16ISP::H16ISPDevice::ISP_LoadDataFile(v2, v5, (const unsigned __int8 *)__p, 0x3370u, 0xFFu))
  {
    NSLog(&cfstr_FailedToSendPc.isa);
    goto LABEL_64;
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
LABEL_67:
  if (v6 != -1)
  {
    H16ISP::H16ISPDevice::ISP_GetCameraStatus((uint64_t)v2, __p);
    int v50 = __p[0].__r_.__value_.__s.__data_[11];
    CFDictionaryRef v51 = IOServiceNameMatching("AppleH16CamIn");
    io_service_t v52 = IOServiceGetMatchingService(*MEMORY[0x263F0EC90], v51);
    CFTypeRef v53 = IORegistryEntrySearchCFProperty(v52, "IOService", @"JasperSNUM", *v8, 3u);
    uint64_t v54 = (2 * v50);
    if (v53)
    {
      CFRelease(v53);
    }
    else
    {
      NSLog(&cfstr_LoadpdefilesNo_0.isa);
      uint64_t v54 = v54 | 8;
    }
    PCECalibration::configure(v54);
    int8x16_t v55 = JasperCalibration::get(v2, (H16ISP::H16ISPDevice *)1);
    if (v55)
    {
      CFRelease(v55);
    }
    else
    {
      NSLog(&cfstr_FailedToCreate_8.isa);
      NSLog(&cfstr_FailedToLoadJa.isa);
    }
  }
  return 1;
}

void sub_2468AC8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void getMultiReferenceFileName(const void **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (const void **)"reference", (uint64_t)&v13);
  if ((a2 - 4) > 0xA) {
    int v5 = "";
  }
  else {
    int v5 = off_2651E8A70[a2 - 4];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  if ((v12 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  int v8 = std::string::append(&v13, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  CFDictionaryRef v10 = std::string::append(&v14, ".plist", 6uLL);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_2468ACA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sendReferences(uint64_t a1, const void **a2, int a3)
{
  int v19 = 256;
  int v6 = NSDictionary;
  std::string::size_type v7 = NSString;
  getMultiReferenceFileName(a2, 4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  processReferenceList(a1, a3, objc_msgSend(v6, "dictionaryWithContentsOfFile:", objc_msgSend(v7, "stringWithUTF8String:", p_p)), (uint64_t)a2, 2, (uint64_t)&v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v9 = NSDictionary;
  CFDictionaryRef v10 = NSString;
  getMultiReferenceFileName(a2, 5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &__p;
  }
  else {
    uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v12 = processReferenceList(a1, a3, objc_msgSend(v9, "dictionaryWithContentsOfFile:", objc_msgSend(v10, "stringWithUTF8String:", v11)), (uint64_t)a2, 1, (uint64_t)&v19);
  uint64_t v13 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13) {
      return v13;
    }
  }
  else if (v12)
  {
    return v13;
  }
  std::string v14 = NSDictionary;
  int v15 = NSString;
  getMultiReferenceFileName(a2, 12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &__p;
  }
  else {
    uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  processReferenceList(a1, a3, objc_msgSend(v14, "dictionaryWithContentsOfFile:", objc_msgSend(v15, "stringWithUTF8String:", v16)), (uint64_t)a2, 3, (uint64_t)&v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_2468ACC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t H16ISP::DepthFrontRotatedConfigurations::Count(H16ISP::DepthFrontRotatedConfigurations *this)
{
  return 5;
}

unint64_t H16ISP::DepthFrontRotatedConfigurations::getPreset(H16ISP::DepthFrontRotatedConfigurations *this, int a2, int a3)
{
  int v3 = (int)this;
  unint64_t result = 0;
  int v5 = &dword_2469DA844;
  do
  {
    if (*(v5 - 1) == v3 && result < 2 != a3 && *v5 == a2) {
      break;
    }
    v5 += 3;
    ++result;
  }
  while (result != 5);
  return result;
}

uint64_t H16ISP::DepthFrontRotatedConfigurations::getWidthOfPreset(H16ISP::DepthFrontRotatedConfigurations *this)
{
  if (this <= 4) {
    return *((unsigned int *)&H16ISP::PCEFrontRotatedPresets + 3 * this);
  }
  else {
    return 0;
  }
}

uint64_t H16ISP::DepthFrontRotatedConfigurations::getHeightOfPreset(H16ISP::DepthFrontRotatedConfigurations *this)
{
  if (this <= 4) {
    return *((unsigned int *)&H16ISP::PCEFrontRotatedPresets + 3 * this + 1);
  }
  else {
    return 0;
  }
}

BOOL H16ISP::DepthFrontRotatedConfigurations::getRegistrationOfPreset(H16ISP::DepthFrontRotatedConfigurations *this)
{
  return (this - 2) < 3;
}

uint64_t H16ISP::DepthFrontConfigurations::Count(H16ISP::DepthFrontConfigurations *this)
{
  return 5;
}

uint64_t H16ISP::DepthRearConfigurations::Count(H16ISP::DepthRearConfigurations *this)
{
  return 5;
}

BOOL H16ISP::DepthRearConfigurations::supports(H16ISP::DepthRearConfigurations *this, unsigned int a2, const H16ISPPlatformInfoStruct *a3)
{
  return (this & 0xFFFFFFFD) != 1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    std::string::size_type v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 2mach_timebase_info(this + 3) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

uint64_t processReferenceList(uint64_t a1, int a2, void *a3, uint64_t a4, int a5, uint64_t a6)
{
  v32[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = 3758097084;
  if (a3)
  {
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x2020000000;
    int v31 = 0;
    uint64_t v13 = (void *)[a3 allKeys];
    v32[0] = [MEMORY[0x263F08B30] sortDescriptorWithKey:@"doubleValue" ascending:1];
    std::string v14 = objc_msgSend(v13, "sortedArrayUsingDescriptors:", objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:count:", v32, 1));
    uint64_t v26 = 0;
    int v27 = &v26;
    uint64_t v28 = 0x2020000000;
    int v29 = 1;
    int v15 = (void *)[a3 objectForKey:@"FormatDR"];
    if (v15)
    {
      int v16 = [v15 intValue];
      *((_DWORD *)v27 + 6) = v16;
    }
    v25[0] = 0;
    v25[1] = v25;
    unsigned __int8 v25[2] = 0x3052000000;
    v25[3] = __Block_byref_object_copy__1;
    CFTypeRef v25[4] = __Block_byref_object_dispose__1;
    v25[5] = &unk_26FAF7848;
    uint64_t v21 = 0;
    int v22 = &v21;
    uint64_t v23 = 0x2020000000;
    char v24 = 1;
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    v18[2] = ___ZL20processReferenceListPN6H16ISP12H16ISPDeviceEjP12NSDictionaryRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiPi_block_invoke;
    v18[3] = &unk_2651E8A50;
    v18[4] = a3;
    v18[5] = v25;
    int v19 = a2;
    int v20 = a5;
    v18[10] = a1;
    v18[11] = a6;
    v18[6] = v30;
    v18[7] = &v26;
    v18[8] = &v21;
    v18[9] = a4;
    [v14 enumerateObjectsUsingBlock:v18];
    if (*((unsigned char *)v22 + 24)) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 3758097084;
    }
    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(v25, 8);
    _Block_object_dispose(&v26, 8);
    _Block_object_dispose(v30, 8);
  }
  return v6;
}

void sub_2468AD060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void ___ZL20processReferenceListPN6H16ISP12H16ISPDeviceEjP12NSDictionaryRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiPi_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) containsObject:a2] & 1) == 0)
  {
    std::string::size_type v7 = (void *)[*(id *)(a1 + 32) objectForKey:a2];
    if (v7)
    {
      int v8 = *(const void ***)(a1 + 72);
      unint64_t v9 = (const char *)[v7 UTF8String];
      unint64_t v10 = v9;
      if (*((char *)v8 + 23) >= 0) {
        size_t v11 = *((unsigned __int8 *)v8 + 23);
      }
      else {
        size_t v11 = (size_t)v8[1];
      }
      size_t v12 = strlen(v9);
      uint64_t v13 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + v12);
      if (v25 < 0) {
        uint64_t v13 = (void **)__p[0];
      }
      if (v11)
      {
        if (*((char *)v8 + 23) >= 0) {
          std::string v14 = v8;
        }
        else {
          std::string v14 = *v8;
        }
        memmove(v13, v14, v11);
      }
      int v15 = (char *)v13 + v11;
      if (v12) {
        memmove(v15, v10, v12);
      }
      v15[v12] = 0;
      if (v25 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      BOOL v17 = *(_DWORD **)(a1 + 88);
      uint64_t v18 = *v17;
      _DWORD *v17 = v18 + 1;
      uint64_t v19 = *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      [a2 doubleValue];
      uint64_t v21 = v20;
      NSLog(&cfstr_SendingReferen.isa, v16, v18);
      NSLog(&cfstr_TryingToLoadRe.isa, v16, v18, v19, v21);
      int v22 = fopen((const char *)v16, "rb");
      uint64_t v23 = v22;
      if (v22)
      {
        fseeko(v22, 0, 2);
        ftello(v23);
        fseeko(v23, 0, 0);
        operator new[]();
      }
      NSLog(&cfstr_CouldNotOpenIn.isa, v16);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
      *a4 = 1;
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_2468AD388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AppleH16PhotonDetectorDevice::AppleH16PhotonDetectorDevice(AppleH16PhotonDetectorDevice *this, int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = 0;
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), &v3);
  pthread_mutexattr_destroy(&v3);
}

void AppleH16PhotonDetectorDevice::~AppleH16PhotonDetectorDevice(AppleH16PhotonDetectorDevice *this)
{
  if (*((_DWORD *)this + 1)) {
    AppleH16PhotonDetectorDevice::DeviceClose(this);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
  *(_DWORD *)this = 0;
}

uint64_t AppleH16PhotonDetectorDevice::DeviceClose(AppleH16PhotonDetectorDevice *this)
{
  int v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  mach_port_t v3 = *((_DWORD *)this + 1);
  if (v3)
  {
    IOConnectCallScalarMethod(v3, 1u, 0, 0, 0, 0);
    IOServiceClose(*((_DWORD *)this + 1));
    uint64_t v4 = 0;
    *((_DWORD *)this + 1) = 0;
  }
  else
  {
    uint64_t v4 = 3758097101;
  }
  pthread_mutex_unlock(v2);
  return v4;
}

uint64_t AppleH16PhotonDetectorDevice::DeviceOpen(io_service_t *this)
{
  int v2 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  if (this[1])
  {
    uint64_t v3 = 3758097093;
  }
  else
  {
    unsigned int v4 = IOServiceOpen(*this, *MEMORY[0x263EF8960], 0x63u, this + 1);
    mach_port_t v5 = this[1];
    if (v5) {
      uint64_t v3 = v4;
    }
    else {
      uint64_t v3 = 3758097088;
    }
    if (!v3) {
      uint64_t v3 = IOConnectCallScalarMethod(v5, 0, 0, 0, 0, 0);
    }
  }
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t AppleH16PhotonDetectorDevice::PowerOnDevice(AppleH16PhotonDetectorDevice *this)
{
  mach_port_t v1 = *((_DWORD *)this + 1);
  if (v1) {
    return IOConnectCallScalarMethod(v1, 2u, 0, 0, 0, 0);
  }
  else {
    return 3758097101;
  }
}

uint64_t AppleH16PhotonDetectorDevice::PowerOffDevice(AppleH16PhotonDetectorDevice *this)
{
  mach_port_t v1 = *((_DWORD *)this + 1);
  if (v1) {
    return IOConnectCallScalarMethod(v1, 3u, 0, 0, 0, 0);
  }
  else {
    return 3758097101;
  }
}

uint64_t AppleH16PhotonDetectorDevice::GetGainInfo(AppleH16PhotonDetectorDevice *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  __int16 outputStruct = 0;
  size_t v7 = 2;
  mach_port_t v3 = *((_DWORD *)this + 1);
  if (!v3) {
    return 3758097101;
  }
  uint64_t result = IOConnectCallStructMethod(v3, 4u, 0, 0, &outputStruct, &v7);
  if (!result)
  {
    *a2 = outputStruct;
    *a3 = HIBYTE(outputStruct);
  }
  return result;
}

uint64_t AppleH16PhotonDetectorDevice::ReadReg(AppleH16PhotonDetectorDevice *this, char a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  memset(&inputStruct[1], 0, 14);
  outputStruct[0] = 0;
  outputStruct[1] = 0;
  size_t v8 = 16;
  inputStruct[0] = a2;
  inputStruct[15] = a4;
  mach_port_t v4 = *((_DWORD *)this + 1);
  if (!v4) {
    return 3758097101;
  }
  uint64_t result = IOConnectCallStructMethod(v4, 5u, inputStruct, 0x10uLL, outputStruct, &v8);
  if (!result)
  {
    memcpy(a3, (char *)outputStruct + 1, a4);
    return 0;
  }
  return result;
}

uint64_t AppleH16PhotonDetectorDevice::WriteReg(AppleH16PhotonDetectorDevice *this, char a2, unsigned __int8 *__src, size_t __n)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = 3758097090;
  if (__n <= 0xE)
  {
    memset(v9, 0, sizeof(v9));
    char inputStruct = a2;
    char v10 = __n;
    memcpy(v9, __src, __n);
    mach_port_t v6 = *((_DWORD *)this + 1);
    if (v6) {
      return IOConnectCallStructMethod(v6, 6u, &inputStruct, 0x10uLL, 0, 0);
    }
    else {
      return 3758097101;
    }
  }
  return v4;
}

void AppleH16PhotonDetectorDevice::ReadCalibrationData(AppleH16PhotonDetectorDevice *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 && a3)
  {
    mach_port_t v5 = *MEMORY[0x263F0EC88];
    CFDictionaryRef v6 = IOServiceNameMatching("AppleH16CamIn");
    io_service_t MatchingService = IOServiceGetMatchingService(v5, v6);
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDataRef v9 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"photon-detector-cal-data", (CFAllocatorRef)*MEMORY[0x263EFFB08], 3u);
    if (v9)
    {
      CFDataRef v10 = v9;
      CFIndex Length = CFDataGetLength(v9);
      BytePtr = CFDataGetBytePtr(v10);
      memmove(a2, BytePtr, Length);
      CFRelease(v10);
    }
    CFDataRef v13 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"photon-detector-cal-data-offset", v8, 3u);
    if (v13)
    {
      CFDataRef v14 = v13;
      CFIndex v15 = CFDataGetLength(v13);
      int v16 = CFDataGetBytePtr(v14);
      memmove(a3, v16, v15);
      CFRelease(v14);
    }
  }
  else
  {
    BOOL v17 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog == &_os_log_internal)
    {
      BOOL v17 = os_log_create("com.apple.isp", "photon");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_photonLog = (uint64_t)v17;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      AppleH16PhotonDetectorDevice::ReadCalibrationData(v17);
    }
  }
}

uint64_t CopyBufferQueue(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 674))
  {
    *a2 = 0;
    return 4294954509;
  }
  else
  {
    *a2 = *(void *)(a3 + 24);
    uint64_t result = *(void *)(a3 + 24);
    if (result)
    {
      CFRetain((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

uint64_t CopyStillImageBufferQueue(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 674))
  {
    *a2 = 0;
    return 4294954509;
  }
  else
  {
    *a2 = *(void *)(a3 + 32);
    uint64_t result = *(void *)(a3 + 32);
    if (result)
    {
      CFRetain((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

uint64_t CopySupportedFormatsArray(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  *(void *)((char *)&v457[2] + 4) = *MEMORY[0x263EF8340];
  BOOL isSensorType = H16ISP::H16ISPDevice::isSensorType(*(void *)(a5 + 24), *(_DWORD *)(a3 + 132), 1785950322);
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (!theArray) {
    return 4294954516;
  }
  uint64_t v382 = *(void *)(*(void *)(v5 + 24) + 4384);
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 112)))
  {
    unint64_t v9 = 0;
    unsigned int v381 = 0;
    CFStringRef key = (void *)*MEMORY[0x263F2EC80];
    long long v343 = (void *)*MEMORY[0x263F2ECB8];
    int v342 = (void *)*MEMORY[0x263F2ECD8];
    int v352 = (void *)*MEMORY[0x263F2EC78];
    int v341 = (void *)*MEMORY[0x263F2ECF0];
    int v370 = (void *)*MEMORY[0x263F2ECA8];
    CFDataRef v10 = (const void *)*MEMORY[0x263EFFB38];
    double v369 = (void *)*MEMORY[0x263F2EC88];
    double v368 = (void *)*MEMORY[0x263F2EC90];
    long long v367 = (void *)*MEMORY[0x263F2ECB0];
    unsigned int v366 = (void *)*MEMORY[0x263F2ECE8];
    unsigned int v365 = (void *)*MEMORY[0x263F2ECC8];
    unsigned int v364 = (void *)*MEMORY[0x263F2ECE0];
    uint64_t v363 = (void *)*MEMORY[0x263F2E798];
    uint64_t v362 = (void *)*MEMORY[0x263F2E780];
    uint64_t v361 = (const void *)*MEMORY[0x263F2E7F0];
    uint64_t v360 = (const void *)*MEMORY[0x263F2ECD0];
    uint64_t v359 = (const void *)*MEMORY[0x263F2E7E0];
    uint64_t v358 = (const void *)*MEMORY[0x263F2ECC0];
    uint64_t v357 = (void *)*MEMORY[0x263F2E7F8];
    long long v356 = (void *)*MEMORY[0x263F2E7C0];
    long long v355 = (void *)*MEMORY[0x263F2E7B8];
    int v340 = (void *)*MEMORY[0x263F2EC98];
    v350 = (void *)*MEMORY[0x263F2ECA0];
    double v354 = (void *)*MEMORY[0x263F2E7D8];
    uint64_t v300 = 136315394;
    unsigned int v329 = (void *)*MEMORY[0x263F2E810];
    long long v337 = (void *)*MEMORY[0x263F2E790];
    long long v336 = (void *)*MEMORY[0x263F2E788];
    CFNumberRef v348 = (void *)*MEMORY[0x263F2E7A8];
    CFNumberRef v347 = (void *)*MEMORY[0x263F2E7B0];
    CFNumberRef v346 = (void *)*MEMORY[0x263F2E7E8];
    CMTime v349 = (void *)*MEMORY[0x263F2E7D0];
    CFTypeRef cf1 = (CFTypeRef)*MEMORY[0x263EFFD08];
    char v311 = (void *)*MEMORY[0x263F2E800];
    CVBufferRef v335 = (void *)*MEMORY[0x263F2E7C8];
    int v325 = (void *)*MEMORY[0x263F2E7A0];
    char v379 = (void *)*MEMORY[0x263F2E980];
    int v378 = (void *)*MEMORY[0x263F2E970];
    v377 = (void *)*MEMORY[0x263F2E968];
    v376 = (void *)*MEMORY[0x263F2E960];
    int v333 = (void *)*MEMORY[0x263F2E990];
    int v332 = (void *)*MEMORY[0x263F2E860];
    unsigned int v372 = (void *)*MEMORY[0x263F2E9C8];
    CGRect v371 = (void *)*MEMORY[0x263F2E9C0];
    int v323 = (void *)*MEMORY[0x263F2E988];
    BOOL v322 = (void *)*MEMORY[0x263F2E978];
    int v353 = (void *)*MEMORY[0x263F2E950];
    v375 = (void *)*MEMORY[0x263F2E958];
    uint64_t v374 = (void *)*MEMORY[0x263F2E998];
    CFNumberRef v373 = (void *)*MEMORY[0x263F2E9A8];
    int v324 = (void *)*MEMORY[0x263F2E918];
    BOOL v11 = isSensorType;
    char v321 = (void *)*MEMORY[0x263F2E928];
    size_t v12 = SupportedOutputFormatsRaw;
    if (isSensorType) {
      size_t v12 = SupportedOutputFormatsJasperSensor;
    }
    int v319 = (int *)v12;
    int v320 = (void *)*MEMORY[0x263F2E900];
    unsigned int v328 = (void *)*MEMORY[0x263F2E580];
    uint32_t v327 = (void *)*MEMORY[0x263F2E578];
    int v334 = (void *)*MEMORY[0x263F2E570];
    long long v318 = (void *)*MEMORY[0x263F2E930];
    CGRect v305 = (void *)*MEMORY[0x263F2E938];
    double v317 = (void *)*MEMORY[0x263F2E948];
    uint64_t v316 = (void *)*MEMORY[0x263F2E940];
    unint64_t v315 = (void *)*MEMORY[0x263F2E920];
    CGRect v303 = (void *)*MEMORY[0x263F2E9A0];
    int v310 = (void *)*MEMORY[0x263F2E890];
    int v309 = (void *)*MEMORY[0x263F2E868];
    uint64_t v308 = (void *)*MEMORY[0x263F2E910];
    unint64_t v314 = (void *)*MEMORY[0x263F2CD48];
    int v313 = (void *)*MEMORY[0x263F2CD40];
    CGRect v304 = (void *)*MEMORY[0x263F2CD88];
    long long v312 = (void *)*MEMORY[0x263F2CD70];
    CGRect v302 = (void *)*MEMORY[0x263F2CD50];
    CGRect v301 = (void *)*MEMORY[0x263F2CD68];
    uint64_t v307 = (void *)*MEMORY[0x263F2CD78];
    uint64_t v306 = (void *)*MEMORY[0x263F2CD20];
    BOOL v331 = (void *)*MEMORY[0x263F2E908];
    CFNumberRef v345 = (void *)*MEMORY[0x263F2E808];
    CFNumberRef value = (void *)*MEMORY[0x263EFFB40];
    if (isSensorType) {
      CFDataRef v13 = (void *)*MEMORY[0x263EFFB38];
    }
    else {
      CFDataRef v13 = (void *)*MEMORY[0x263EFFB40];
    }
    uint64_t v330 = v13;
    uint64_t v384 = (void *)*MEMORY[0x263EFFB38];
    uint64_t v338 = v5;
    while (1)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable) {
        break;
      }
LABEL_325:
      if (++v9 >= CFArrayGetCount(*(CFArrayRef *)(a3 + 112))) {
        goto LABEL_329;
      }
    }
    CFIndex v15 = Mutable;
    if (v9 >= *(unsigned int *)(a3 + 168)) {
      int v16 = *(_DWORD *)(a3 + 168);
    }
    else {
      int v16 = 0;
    }
    if (!*(unsigned char *)(a3 + 674))
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 112), v9);
      CFDictionarySetValue(v15, key, ValueAtIndex);
    }
    CFIndex v18 = (v9 - v16);
    if (H16ISP::H16ISPDevice::GetCameraConfig(*(void *)(v5 + 24), *(_DWORD *)(a3 + 132), *(_DWORD *)(*(void *)(a3 + 160) + 120 * v18 + 16), &v414, v446))
    {
      unsigned int v381 = -12780;
    }
    else
    {
      uint64_t v20 = *(void *)(a3 + 160);
      unsigned int v21 = *(_DWORD *)(a3 + 48);
      unsigned int v22 = *(_DWORD *)(a3 + 168);
      if (v21 < v22) {
        unsigned int v22 = 0;
      }
      uint64_t v23 = 120 * (v21 - v22);
      if (v20) {
        uint64_t v24 = v20 + 120 * v18;
      }
      else {
        uint64_t v24 = v23;
      }
      float v25 = *(float *)(v24 + 108);
      if (v25 == 0.0) {
        float v26 = (float)v419;
      }
      else {
        float v26 = v25 * 256.0;
      }
      *(float *)unsigned int valuePtr = v26 * 0.0039062;
      CFNumberRef v27 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
      CFDictionarySetValue(v15, v343, v27);
      CFRelease(v27);
      if ((_BYTE)v420) {
        int v28 = (v420 >> 8) + 1;
      }
      else {
        int v28 = v420 >> 8;
      }
      __dst[0] = v28;
      CFNumberRef v29 = CFNumberCreate(0, kCFNumberIntType, __dst);
      CFDictionarySetValue(v15, v342, v29);
      CFRelease(v29);
    }
    if (!*(unsigned char *)(*(void *)(a3 + 160) + 120 * v18 + 114) || v9 >= *(unsigned int *)(a3 + 168)) {
      CFDictionarySetValue(v15, v352, value);
    }
    if (!*(unsigned char *)(a3 + 674))
    {
      *(_DWORD *)unsigned int valuePtr = 0;
      LOWORD(v19) = v416;
      float v30 = (float)*(unsigned int *)(*(void *)(a3 + 160) + 120 * v18 + 4) / (double)v19;
      *(float *)unsigned int valuePtr = v30;
      CFNumberRef v31 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
      CFDictionarySetValue(v15, v341, v31);
      CFRelease(v31);
    }
    if (v417 | v418) {
      CVPixelBufferRef v32 = value;
    }
    else {
      CVPixelBufferRef v32 = v10;
    }
    CFDictionarySetValue(v15, v370, v32);
    int v413 = 1;
    if (v417 == 2)
    {
      int v33 = 4;
    }
    else
    {
      if (v417 != 1) {
        goto LABEL_42;
      }
      int v33 = 2;
    }
    int v413 = v33;
LABEL_42:
    CFNumberRef v34 = CFNumberCreate(0, kCFNumberIntType, &v413);
    CFDictionarySetValue(v15, v369, v34);
    CFRelease(v34);
    int v412 = 1;
    if (v418 == 2)
    {
      int v35 = 4;
    }
    else
    {
      if (v418 != 1) {
        goto LABEL_47;
      }
      int v35 = 2;
    }
    int v412 = v35;
LABEL_47:
    CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, &v412);
    CFDictionarySetValue(v15, v368, v36);
    CFRelease(v36);
    if (v421 >= 0xFFFF) {
      __int16 v37 = v10;
    }
    else {
      __int16 v37 = value;
    }
    CFDictionarySetValue(v15, v367, v37);
    if (v422 > 2)
    {
      if (v422 == 3)
      {
        int v38 = 14;
        goto LABEL_60;
      }
      if (v422 == 15)
      {
        int v38 = 16;
LABEL_60:
        int v411 = v38;
LABEL_61:
        CFNumberRef v39 = CFNumberCreate(0, kCFNumberIntType, &v411);
        CFDictionarySetValue(v15, v366, v39);
        CFRelease(v39);
        int v410 = v424;
        CFNumberRef v40 = CFNumberCreate(0, kCFNumberSInt32Type, &v410);
        CFDictionarySetValue(v15, v365, v40);
        CFRelease(v40);
        int v409 = v425;
        CFNumberRef v41 = CFNumberCreate(0, kCFNumberSInt32Type, &v409);
        CFDictionarySetValue(v15, v364, v41);
        CFRelease(v41);
        float v408 = (float)v426;
        CFNumberRef v42 = CFNumberCreate(0, kCFNumberFloatType, &v408);
        CFDictionarySetValue(v15, v363, v42);
        CFRelease(v42);
        int v407 = v427;
        CFNumberRef v43 = CFNumberCreate(0, kCFNumberSInt32Type, &v407);
        CFDictionarySetValue(v15, v362, v43);
        CFRelease(v43);
        unsigned int v406 = v429;
        CFNumberRef v44 = CFNumberCreate(0, kCFNumberIntType, &v406);
        if (*(unsigned char *)(a3 + 674)) {
          io_service_t v45 = v361;
        }
        else {
          io_service_t v45 = v360;
        }
        CFDictionarySetValue(v15, v45, v44);
        CFRelease(v44);
        int v405 = v430;
        CFNumberRef v46 = CFNumberCreate(0, kCFNumberIntType, &v405);
        if (*(unsigned char *)(a3 + 674)) {
          CFDataRef v47 = v359;
        }
        else {
          CFDataRef v47 = v358;
        }
        CFDictionarySetValue(v15, v47, v46);
        CFRelease(v46);
        if (*(unsigned char *)(*(void *)(a3 + 160) + 120 * v18 + 104)) {
          double v48 = value;
        }
        else {
          double v48 = v10;
        }
        CFDictionarySetValue(v15, v357, v48);
        if (v431) {
          BOOL v49 = value;
        }
        else {
          BOOL v49 = v10;
        }
        CFDictionarySetValue(v15, v356, v49);
        int v404 = v432;
        CFNumberRef v50 = CFNumberCreate(0, kCFNumberIntType, &v404);
        CFDictionarySetValue(v15, v355, v50);
        CFRelease(v50);
        if (!*(unsigned char *)(a3 + 674))
        {
          int8x16_t v55 = (_DWORD *)(*(void *)(a3 + 160) + 120 * v18);
          LODWORD(v51) = v55[5];
          LODWORD(v52) = v55[6];
          v458.origin.x = (double)v51;
          v458.origin.y = (double)v52;
          LODWORD(v5mach_timebase_info(this + 3) = v55[7];
          LODWORD(v54) = v55[8];
          v458.size.width = (double)v53;
          v458.size.height = (double)v54;
          DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v458);
          CFDictionarySetValue(v15, v340, DictionaryRepresentation);
          CFRelease(DictionaryRepresentation);
        }
        unsigned int v57 = *(_DWORD *)(a3 + 132);
        if (*(_DWORD *)(v382 + 96 * v57 + 8))
        {
          bzero(valuePtr, 0x9CuLL);
          if (H16ISP::H16ISPDevice::ISP_GetModuleParams(*(H16ISP::H16ISPDevice **)(v5 + 24), v57, (H16ISPModuleParams *)valuePtr))std::string v58 = 0; {
          else
          }
            std::string v58 = (float *)&v445;
        }
        else
        {
          std::string v58 = 0;
        }
        int v403 = 0;
        *(void *)uint64_t v402 = 0;
        unsigned int v401 = 0;
        uint64_t v59 = *(void *)(a3 + 160);
        uint64_t v60 = v59 + 120 * v18;
        int v61 = *(unsigned __int8 *)(v60 + 92);
        CFDataRef v10 = v384;
        if (*(unsigned char *)(v60 + 36))
        {
          uint64_t v62 = (_DWORD *)(v59 + 120 * v18);
          int v63 = v62[12];
          int v64 = v62[13];
          unsigned int v65 = v62[14];
          unsigned int v66 = v62[15];
          unsigned int v67 = v62[10];
          unsigned int v68 = v62[11];
          unsigned int v69 = v62[5];
          unsigned int v70 = v62[6];
          uint64_t v71 = (_DWORD *)(v59 + 120 * v18);
          if (v61)
          {
            unsigned int v73 = v71[24];
            unsigned int v72 = v71[25];
          }
          else
          {
            unsigned int v73 = v71[7];
            unsigned int v72 = v71[8];
          }
          H16ISP::CalculateTotalCrop(0, 0, v63, v64, v65, v66, v67, v68, v69, v70, v73, v72, &v403, &v402[1], v402, &v401, (unsigned int *)v300);
        }
        else
        {
          if (*(unsigned char *)(v60 + 92))
          {
            int v74 = 0;
            int v403 = 0;
            v402[1] = 0;
            uint64_t v75 = v59 + 120 * v18;
            double v76 = (unsigned int *)(v75 + 96);
            double v77 = (unsigned int *)(v75 + 100);
          }
          else
          {
            double v78 = (_DWORD *)(v59 + 120 * v18);
            int v74 = v78[5];
            int v403 = v74;
            v402[1] = v78[6];
            double v76 = v78 + 7;
            double v77 = v78 + 8;
          }
          unsigned int v79 = *v76;
          v402[0] = v79;
          unsigned int v401 = *v77;
          if (v428)
          {
            v402[0] = 2 * v79;
            int v403 = 2 * v74;
          }
        }
        if (v417 >= 3u)
        {
          fprintf((FILE *)*MEMORY[0x263EF8348], "Unexpected binning mode 0x%08x \n", v417);
          double v80 = 1.0;
          if (!v58) {
            goto LABEL_101;
          }
        }
        else
        {
          double v80 = dbl_2469DAD70[(__int16)v417];
          if (!v58) {
            goto LABEL_101;
          }
        }
        float v81 = v58[3];
        if (v81 <= 0.0)
        {
          LODWORD(v52) = v402[0];
          double v83 = v80 * (double)v52;
          if (v433[0] == 2) {
            float v84 = 2.0;
          }
          else {
            float v84 = 1.0;
          }
          double v82 = atan(v83 * (float)(v58[2] * v84) / 1000.0 / (float)(v58[1] + v58[1])) * 114.591559;
        }
        else
        {
          double v82 = v81;
        }
        *(double *)unsigned int valuePtr = v82;
        CFNumberRef v85 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
        CFDictionarySetValue(v15, v350, v85);
        CFRelease(v85);
LABEL_101:
        BOOL v400 = v423 != 0;
        CFNumberRef v86 = CFNumberCreate(0, kCFNumberSInt32Type, &v400);
        CFDictionarySetValue(v15, v354, v86);
        CFRelease(v86);
        if (H16ISP::H16ISPDevice::GetLSCCoefficients(*(void *)(v5 + 24), *(_DWORD *)(a3 + 132), *(_DWORD *)(*(void *)(a3 + 160) + 120 * v18 + 16), __dst))
        {
          unsigned int v381 = -12780;
        }
        else
        {
          CFMutableArrayRef v89 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
          if (v89)
          {
            double v90 = v89;
            *(double *)unsigned int valuePtr = (double)v393 * 1.38777878e-17;
            CFNumberRef v91 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
            CFArrayAppendValue(v90, v91);
            CFRelease(v91);
            *(double *)unsigned int valuePtr = (double)v394 * 1.38777878e-17;
            CFNumberRef v92 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
            CFArrayAppendValue(v90, v92);
            CFRelease(v92);
            *(double *)unsigned int valuePtr = (double)v395 * 1.38777878e-17;
            CFNumberRef v93 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
            CFArrayAppendValue(v90, v93);
            CFRelease(v93);
            *(double *)unsigned int valuePtr = (double)v396 * 1.38777878e-17;
            CFNumberRef v94 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
            CFArrayAppendValue(v90, v94);
            CFRelease(v94);
            *(double *)unsigned int valuePtr = (double)v397 * 1.38777878e-17;
            CFNumberRef v95 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
            CFArrayAppendValue(v90, v95);
            CFRelease(v95);
            *(double *)unsigned int valuePtr = (double)v398 * 1.38777878e-17;
            CFNumberRef v96 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
            CFArrayAppendValue(v90, v96);
            CFRelease(v96);
            *(double *)unsigned int valuePtr = (double)v399 * 1.38777878e-17;
            CFNumberRef v97 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
            CFArrayAppendValue(v90, v97);
            CFRelease(v97);
            CFDictionarySetValue(v15, v329, v90);
            CFRelease(v90);
          }
          CFDataRef v10 = v384;
        }
        if (!*(unsigned char *)(a3 + 674)) {
          goto LABEL_324;
        }
        uint64_t v98 = *(void *)(a3 + 160);
        uint64_t v99 = v98 + 120 * v18;
        int v101 = *(unsigned __int8 *)(v99 + 36);
        double v100 = (unsigned char *)(v99 + 36);
        if (v101 || v428)
        {
          *(_DWORD *)unsigned int valuePtr = 0;
          HIDWORD(v391) = 0;
          if (*v100)
          {
            uint64_t v102 = v98 + 120 * v18;
            *(_DWORD *)unsigned int valuePtr = *(_DWORD *)(v102 + 40);
            HIDWORD(v391) = *(_DWORD *)(v102 + 44);
          }
          else
          {
            *(_DWORD *)unsigned int valuePtr = v429;
            HIDWORD(v391) = v430;
            if (v428) {
              *(_DWORD *)unsigned int valuePtr = v429 >> 1;
            }
          }
          CFNumberRef v103 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
          CFDictionarySetValue(v15, v337, v103);
          CFRelease(v103);
          CFNumberRef v104 = CFNumberCreate(0, kCFNumberIntType, (char *)&v391 + 4);
          CFDictionarySetValue(v15, v336, v104);
          CFRelease(v104);
        }
        if (v433[0])
        {
          CFNumberRef v105 = CFNumberCreate(v8, kCFNumberIntType, v433);
          CFDictionaryAddValue(v15, v348, v105);
          CFRelease(v105);
          LOWORD(v106) = v438;
          *(float *)&unint64_t v106 = (double)v106 * 0.00390625;
          HIDWORD(v391) = v106;
          CFNumberRef v107 = CFNumberCreate(v8, kCFNumberFloatType, (char *)&v391 + 4);
          CFDictionarySetValue(v15, v347, v107);
          CFRelease(v107);
          LODWORD(v391) = 0;
          H16ISP::H16ISPDevice::ISP_GetModuleParams(*(H16ISP::H16ISPDevice **)(v5 + 24), *(_DWORD *)(a3 + 132), (H16ISPModuleParams *)valuePtr);
          switch(v444)
          {
            case 0:
              int v108 = 1735549492;
              goto LABEL_120;
            case 1:
              int v108 = 1919379252;
              goto LABEL_120;
            case 2:
              int v108 = 1650943796;
              goto LABEL_120;
            case 3:
              int v108 = 1734505012;
LABEL_120:
              LODWORD(v391) = v108;
              break;
            default:
              break;
          }
          CFNumberRef v109 = CFNumberCreate(v8, kCFNumberIntType, &v391);
          CFDictionaryAddValue(v15, v346, v109);
          CFRelease(v109);
        }
        v459.origin.x = (double)v434;
        v459.origin.y = (double)v435;
        LODWORD(v87) = v436;
        LODWORD(v88) = v437;
        v459.size.width = (double)v87;
        v459.size.height = (double)v88;
        CFDictionaryRef v110 = CGRectCreateDictionaryRepresentation(v459);
        CFDictionaryAddValue(v15, v349, v110);
        CFRelease(v110);
        CFArrayRef v111 = *(const __CFArray **)(a3 + 4328);
        if (v111)
        {
          if (CFArrayGetCount(v111) > v18)
          {
            uint64_t v112 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 4328), v18);
            if (!CFEqual(cf1, v112)) {
              CFDictionarySetValue(v15, v311, v112);
            }
          }
        }
        CFDataRef v10 = v384;
        if (*(int *)(*(void *)(v5 + 24) + 4392) >= 17)
        {
          uint64_t v113 = v439 ? value : v384;
          CFDictionaryAddValue(v15, v335, v113);
          if (*(int *)(*(void *)(v5 + 24) + 4392) >= 17)
          {
            if (v440) {
              uint64_t v114 = value;
            }
            else {
              uint64_t v114 = v384;
            }
            CFDictionaryAddValue(v15, v325, v114);
          }
        }
        int theDict = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (!theDict) {
          goto LABEL_324;
        }
        uint64_t v115 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (!v115)
        {
LABEL_166:
          if (*(unsigned char *)(a3 + 3784)) {
            char v142 = 1;
          }
          else {
            char v142 = v11;
          }
          if ((v142 & 1) == 0)
          {
            double v143 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v143)
            {
              BOOL v144 = v143;
              SetSupportedFormats(v143, (int *)SupportedOutputFormatsSecondaryScaler, 0, v451);
              *(_DWORD *)unsigned int valuePtr = 0;
              uint64_t v145 = *(void *)(a3 + 160);
              if (*(unsigned char *)(v145 + 120 * v18 + 36))
              {
                unsigned int v146 = *(_DWORD *)(v145 + 120 * v18 + 40);
              }
              else
              {
                unsigned int v146 = v429;
                if (v428) {
                  unsigned int v146 = v429 >> 1;
                }
              }
              *(_DWORD *)unsigned int valuePtr = v146;
              CFNumberRef v147 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(v144, v379, v147);
              CFRelease(v147);
              HIDWORD(v391) = 0;
              uint64_t v148 = *(void *)(a3 + 160) + 120 * v18;
              int v149 = *(unsigned __int8 *)(v148 + 36);
              uint64_t v150 = (int *)(v148 + 44);
              if (!v149) {
                uint64_t v150 = &v430;
              }
              HIDWORD(v391) = *v150;
              CFNumberRef v151 = CFNumberCreate(0, kCFNumberIntType, (char *)&v391 + 4);
              CFDictionarySetValue(v144, v378, v151);
              CFRelease(v151);
              LODWORD(v391) = 1048576000;
              CFNumberRef v152 = CFNumberCreate(0, kCFNumberFloatType, &v391);
              CFDictionarySetValue(v144, v377, v152);
              CFRelease(v152);
              float v153 = (float)v447 / (float)*(unsigned int *)valuePtr;
              if (v153 >= 1.0) {
                float v153 = 1.0;
              }
              unsigned int v390 = LODWORD(v153);
              CFNumberRef v154 = CFNumberCreate(0, kCFNumberFloatType, &v390);
              CFDictionarySetValue(v144, v376, v154);
              CFRelease(v154);
              CFDictionarySetValue(v144, v372, v384);
              CFDictionarySetValue(v144, v371, v384);
              LODWORD(v155) = *(_DWORD *)valuePtr;
              v461.size.width = (double)v155;
              LODWORD(v155) = HIDWORD(v391);
              v461.size.height = (double)v155;
              v461.origin.x = 0.0;
              v461.origin.y = 0.0;
              CFDictionaryRef v156 = CGRectCreateDictionaryRepresentation(v461);
              if (v156)
              {
                CFDictionaryRef v157 = v156;
                CFDictionarySetValue(v144, v353, v156);
                CFRelease(v157);
              }
              CFDictionarySetValue(v144, v375, value);
              CFDictionarySetValue(v144, v374, value);
              CFDictionarySetValue(v144, v373, v384);
              CFDictionarySetValue(theDict, v321, v144);
              CFRelease(v144);
            }
          }
          if (*(unsigned char *)(a3 + 3784)) {
            char v158 = 1;
          }
          else {
            char v158 = v11;
          }
          if ((v158 & 1) == 0)
          {
            double v159 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v159)
            {
              double v160 = v159;
              SetSupportedFormats(v159, (int *)SupportedOutputFormatsIntermediateTap, 0, v451);
              *(_DWORD *)unsigned int valuePtr = 0;
              uint64_t v161 = *(void *)(a3 + 160);
              if (*(unsigned char *)(v161 + 120 * v18 + 36))
              {
                BOOL v162 = v11;
                unsigned int v163 = *(_DWORD *)(v161 + 120 * v18 + 40);
              }
              else
              {
                unsigned int v163 = v429;
                BOOL v162 = v11;
                if (v428) {
                  unsigned int v163 = v429 >> 1;
                }
              }
              *(_DWORD *)unsigned int valuePtr = v163;
              CFNumberRef v164 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(v160, v379, v164);
              CFRelease(v164);
              HIDWORD(v391) = 0;
              uint64_t v165 = *(void *)(a3 + 160) + 120 * v18;
              int v166 = *(unsigned __int8 *)(v165 + 36);
              uint64_t v167 = (int *)(v165 + 44);
              if (!v166) {
                uint64_t v167 = &v430;
              }
              HIDWORD(v391) = *v167;
              CFNumberRef v168 = CFNumberCreate(0, kCFNumberIntType, (char *)&v391 + 4);
              CFDictionarySetValue(v160, v378, v168);
              CFRelease(v168);
              LODWORD(v391) = 1065353216;
              CFNumberRef v169 = CFNumberCreate(0, kCFNumberFloatType, &v391);
              CFDictionarySetValue(v160, v376, v169);
              CFRelease(v169);
              unsigned int v390 = 1065353216;
              CFNumberRef v170 = CFNumberCreate(0, kCFNumberFloatType, &v390);
              CFDictionarySetValue(v160, v377, v170);
              CFRelease(v170);
              CFDictionarySetValue(v160, v372, v384);
              CFDictionarySetValue(v160, v371, v384);
              LODWORD(v171) = *(_DWORD *)valuePtr;
              v462.size.width = (double)v171;
              LODWORD(v171) = HIDWORD(v391);
              v462.size.height = (double)v171;
              v462.origin.x = 0.0;
              v462.origin.y = 0.0;
              CFDictionaryRef v172 = CGRectCreateDictionaryRepresentation(v462);
              if (v172)
              {
                CFDictionaryRef v173 = v172;
                CFDictionarySetValue(v160, v353, v172);
                CFRelease(v173);
              }
              CFDictionarySetValue(v160, v375, value);
              CFDictionarySetValue(v160, v374, value);
              CFDictionarySetValue(v160, v373, v384);
              CFDictionarySetValue(theDict, v320, v160);
              CFRelease(v160);
              BOOL v11 = v162;
              uint64_t v5 = v338;
            }
          }
          if (!v11)
          {
            long long v174 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v174)
            {
              uint64_t v175 = v174;
              int v176 = *(_DWORD *)(*(void *)(*(void *)(v5 + 24) + 4384) + 96 * *(unsigned int *)(a3 + 132) + 16);
              uint64_t v177 = SupportedOutputFormatsIRSensor;
              if (v176 != 1718186595) {
                uint64_t v177 = SupportedOutputFormatsStillImage;
              }
              if (v176 == 1785950322) {
                double v178 = (int *)SupportedOutputFormatsJasperSensor;
              }
              else {
                double v178 = (int *)v177;
              }
              SetSupportedFormats(v174, v178, 0, v451);
              *(_DWORD *)unsigned int valuePtr = 0;
              uint64_t v179 = *(void *)(a3 + 160);
              if (*(unsigned char *)(v179 + 120 * v18 + 64))
              {
                unsigned int v180 = *(_DWORD *)(v179 + 120 * v18 + 68);
              }
              else
              {
                unsigned int v180 = v429;
                if (v428) {
                  unsigned int v180 = v429 >> 1;
                }
              }
              *(_DWORD *)unsigned int valuePtr = v180;
              CFNumberRef v181 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(v175, v379, v181);
              CFRelease(v181);
              HIDWORD(v391) = 0;
              uint64_t v182 = *(void *)(a3 + 160) + 120 * v18;
              int v183 = *(unsigned __int8 *)(v182 + 64);
              double v184 = (int *)(v182 + 72);
              if (!v183) {
                double v184 = &v430;
              }
              HIDWORD(v391) = *v184;
              CFNumberRef v185 = CFNumberCreate(0, kCFNumberIntType, (char *)&v391 + 4);
              CFDictionarySetValue(v175, v378, v185);
              CFRelease(v185);
              if (*(unsigned char *)(a3 + 3784)) {
                float v186 = 1.0;
              }
              else {
                float v186 = 0.25;
              }
              *(float *)&uint64_t v391 = v186;
              CFNumberRef v187 = CFNumberCreate(0, kCFNumberFloatType, &v391);
              CFDictionarySetValue(v175, v377, v187);
              CFRelease(v187);
              unsigned int v390 = 1065353216;
              CFNumberRef v188 = CFNumberCreate(0, kCFNumberFloatType, &v390);
              CFDictionarySetValue(v175, v376, v188);
              CFRelease(v188);
              CFDictionarySetValue(v175, v372, v384);
              if (*(unsigned char *)(v382 + 621))
              {
                CFDictionarySetValue(v175, v371, value);
                CFNumberRef v189 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                CFDictionarySetValue(v175, v323, v189);
                CFRelease(v189);
                CFNumberRef v190 = CFNumberCreate(0, kCFNumberIntType, (char *)&v391 + 4);
                CFDictionarySetValue(v175, v322, v190);
                CFRelease(v190);
              }
              else
              {
                CFDictionarySetValue(v175, v371, v384);
              }
              LODWORD(v191) = *(_DWORD *)valuePtr;
              v463.size.width = (double)v191;
              LODWORD(v191) = HIDWORD(v391);
              v463.size.height = (double)v191;
              v463.origin.x = 0.0;
              v463.origin.y = 0.0;
              CFDictionaryRef v192 = CGRectCreateDictionaryRepresentation(v463);
              if (v192)
              {
                CFDictionaryRef v193 = v192;
                CFDictionarySetValue(v175, v353, v192);
                CFRelease(v193);
              }
              int v389 = *(_DWORD *)(a3 + 3992);
              CFNumberRef v194 = CFNumberCreate(0, kCFNumberIntType, &v389);
              if (v194)
              {
                CFNumberRef v195 = v194;
                CFDictionarySetValue(v175, v328, v194);
                CFRelease(v195);
              }
              int v388 = *(_DWORD *)(a3 + 3992);
              CFNumberRef v196 = CFNumberCreate(0, kCFNumberIntType, &v388);
              if (v196)
              {
                CFNumberRef v197 = v196;
                CFDictionarySetValue(v175, v327, v196);
                CFRelease(v197);
              }
              CFDictionarySetValue(v175, v334, value);
              CFDictionarySetValue(v175, v375, value);
              CFDictionarySetValue(v175, v374, value);
              CFDictionarySetValue(v175, v373, v384);
              CFDictionarySetValue(theDict, v318, v175);
              CFRelease(v175);
            }
            if (!*(unsigned char *)(a3 + 3784))
            {
              long long v198 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              if (v198)
              {
                double v199 = v198;
                SetSupportedFormats(v198, (int *)SupportedOutputFormatsStillImageIntermediateTap, 0, v451);
                *(_DWORD *)unsigned int valuePtr = 0;
                uint64_t v200 = *(void *)(a3 + 160);
                if (*(unsigned char *)(v200 + 120 * v18 + 64))
                {
                  unsigned int v201 = *(_DWORD *)(v200 + 120 * v18 + 68);
                }
                else
                {
                  unsigned int v201 = v429;
                  if (v428) {
                    unsigned int v201 = v429 >> 1;
                  }
                }
                *(_DWORD *)unsigned int valuePtr = v201;
                CFNumberRef v202 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                CFDictionarySetValue(v199, v379, v202);
                CFRelease(v202);
                HIDWORD(v391) = 0;
                uint64_t v203 = *(void *)(a3 + 160) + 120 * v18;
                int v204 = *(unsigned __int8 *)(v203 + 64);
                uint64_t v205 = (int *)(v203 + 72);
                if (!v204) {
                  uint64_t v205 = &v430;
                }
                HIDWORD(v391) = *v205;
                CFNumberRef v206 = CFNumberCreate(0, kCFNumberIntType, (char *)&v391 + 4);
                CFDictionarySetValue(v199, v378, v206);
                CFRelease(v206);
                LODWORD(v391) = 1065353216;
                CFNumberRef v207 = CFNumberCreate(0, kCFNumberFloatType, &v391);
                CFDictionarySetValue(v199, v376, v207);
                CFRelease(v207);
                unsigned int v390 = 1065353216;
                CFNumberRef v208 = CFNumberCreate(0, kCFNumberFloatType, &v390);
                CFDictionarySetValue(v199, v377, v208);
                CFRelease(v208);
                CFDictionarySetValue(v199, v372, v384);
                CFDictionarySetValue(v199, v371, v384);
                LODWORD(v209) = *(_DWORD *)valuePtr;
                v464.size.width = (double)v209;
                LODWORD(v209) = HIDWORD(v391);
                v464.size.height = (double)v209;
                v464.origin.x = 0.0;
                v464.origin.y = 0.0;
                CFDictionaryRef v210 = CGRectCreateDictionaryRepresentation(v464);
                if (v210)
                {
                  CFDictionaryRef v211 = v210;
                  CFDictionarySetValue(v199, v353, v210);
                  CFRelease(v211);
                }
                int v389 = *(_DWORD *)(a3 + 3992);
                CFNumberRef v212 = CFNumberCreate(0, kCFNumberIntType, &v389);
                if (v212)
                {
                  CFNumberRef v213 = v212;
                  CFDictionarySetValue(v199, v328, v212);
                  CFRelease(v213);
                }
                int v388 = *(_DWORD *)(a3 + 3992);
                CFNumberRef v214 = CFNumberCreate(0, kCFNumberIntType, &v388);
                if (v214)
                {
                  CFNumberRef v215 = v214;
                  CFDictionarySetValue(v199, v327, v214);
                  CFRelease(v215);
                }
                CFDictionarySetValue(v199, v334, value);
                CFDictionarySetValue(v199, v375, v384);
                CFDictionarySetValue(v199, v374, v384);
                CFDictionarySetValue(v199, v373, v384);
                CFDictionarySetValue(theDict, v305, v199);
                CFRelease(v199);
              }
            }
            uint64_t v216 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v216)
            {
              double v217 = v216;
              if (*(unsigned char *)(a3 + 3784)) {
                uint64_t v218 = SupportedOutputFormatsIRSensor;
              }
              else {
                uint64_t v218 = SupportedOutputFormatsStillImageRaw;
              }
              SetSupportedFormats(v216, (int *)v218, 0, v451);
              *(_DWORD *)unsigned int valuePtr = v414;
              CFNumberRef v219 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(v217, v379, v219);
              CFRelease(v219);
              HIDWORD(v391) = v415;
              CFNumberRef v220 = CFNumberCreate(0, kCFNumberIntType, (char *)&v391 + 4);
              CFDictionarySetValue(v217, v378, v220);
              CFRelease(v220);
              LODWORD(v391) = 1065353216;
              CFNumberRef v221 = CFNumberCreate(0, kCFNumberFloatType, &v391);
              CFDictionarySetValue(v217, v376, v221);
              CFRelease(v221);
              unsigned int v390 = 1065353216;
              CFNumberRef v222 = CFNumberCreate(0, kCFNumberFloatType, &v390);
              CFDictionarySetValue(v217, v377, v222);
              CFRelease(v222);
              CFDictionarySetValue(v217, v372, v384);
              CFDictionarySetValue(v217, v371, v384);
              LODWORD(v22mach_timebase_info(this + 3) = *(_DWORD *)valuePtr;
              v465.size.width = (double)v223;
              LODWORD(v22mach_timebase_info(this + 3) = HIDWORD(v391);
              v465.size.height = (double)v223;
              v465.origin.x = 0.0;
              v465.origin.y = 0.0;
              CFDictionaryRef v224 = CGRectCreateDictionaryRepresentation(v465);
              if (v224)
              {
                CFDictionaryRef v225 = v224;
                CFDictionarySetValue(v217, v353, v224);
                CFRelease(v225);
              }
              int v389 = *(_DWORD *)(a3 + 3992);
              CFNumberRef v226 = CFNumberCreate(0, kCFNumberIntType, &v389);
              CFDictionarySetValue(v217, v328, v226);
              CFRelease(v226);
              int v389 = *(_DWORD *)(a3 + 3992);
              CFNumberRef v227 = CFNumberCreate(0, kCFNumberIntType, &v389);
              CFDictionarySetValue(v217, v327, v227);
              CFRelease(v227);
              CFDictionarySetValue(v217, v334, value);
              CFDictionarySetValue(v217, v375, v384);
              CFDictionarySetValue(v217, v374, v384);
              CFDictionarySetValue(v217, v373, v384);
              CFDictionarySetValue(theDict, v317, v217);
              CFRelease(v217);
            }
          }
          uint64_t v391 = 0;
          uint64_t v228 = (__CFDictionary *)ConfigSupportsContextSwitchCaptures(a3, v5, (_DWORD *)&v391 + 1, &v391);
          CFDataRef v10 = v384;
          if (v228)
          {
            uint64_t v228 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v228)
            {
              long long v230 = v228;
              SetSupportedFormats(v228, (int *)SupportedOutputFormatsStillImageQuadra, 0, v451);
              *(_DWORD *)unsigned int valuePtr = HIDWORD(v391);
              CFNumberRef v231 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(v230, v379, v231);
              CFRelease(v231);
              unsigned int v390 = v391;
              CFNumberRef v232 = CFNumberCreate(0, kCFNumberIntType, &v390);
              CFDictionarySetValue(v230, v378, v232);
              CFRelease(v232);
              int v389 = 1065353216;
              CFNumberRef v233 = CFNumberCreate(0, kCFNumberFloatType, &v389);
              CFDictionarySetValue(v230, v376, v233);
              CFRelease(v233);
              int v388 = 1065353216;
              CFNumberRef v234 = CFNumberCreate(0, kCFNumberFloatType, &v388);
              CFDictionarySetValue(v230, v377, v234);
              CFRelease(v234);
              CFDictionarySetValue(v230, v372, v384);
              CFDictionarySetValue(v230, v371, v384);
              LODWORD(v235) = HIDWORD(v391);
              v466.size.width = (double)v235;
              LODWORD(v235) = v391;
              v466.size.height = (double)v235;
              v466.origin.x = 0.0;
              v466.origin.y = 0.0;
              CFDictionaryRef v236 = CGRectCreateDictionaryRepresentation(v466);
              if (v236)
              {
                CFDictionaryRef v237 = v236;
                CFDictionarySetValue(v230, v353, v236);
                CFRelease(v237);
              }
              CFDictionarySetValue(v230, v375, v384);
              CFDictionarySetValue(v230, v374, v384);
              CFDictionarySetValue(v230, v373, v384);
              CFDictionarySetValue(theDict, v316, v230);
              CFRelease(v230);
              uint64_t v5 = v338;
            }
          }
          if (*(unsigned char *)(a3 + 3784)) {
            int v238 = 1;
          }
          else {
            int v238 = v11;
          }
          if (v238 == 1)
          {
            uint64_t v228 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v228)
            {
              uint64_t v239 = v228;
              SetSupportedFormats(v228, v319, 0, v451);
              *(_DWORD *)unsigned int valuePtr = v414;
              CFNumberRef v240 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(v239, v379, v240);
              CFRelease(v240);
              unsigned int v390 = v415;
              CFNumberRef v241 = CFNumberCreate(0, kCFNumberIntType, &v390);
              CFDictionarySetValue(v239, v378, v241);
              CFRelease(v241);
              int v389 = 1065353216;
              CFNumberRef v242 = CFNumberCreate(0, kCFNumberFloatType, &v389);
              CFDictionarySetValue(v239, v376, v242);
              CFRelease(v242);
              int v388 = 1065353216;
              CFNumberRef v243 = CFNumberCreate(0, kCFNumberFloatType, &v388);
              CFDictionarySetValue(v239, v377, v243);
              CFRelease(v243);
              CFDictionarySetValue(v239, v372, v384);
              CFDictionarySetValue(v239, v371, v384);
              LODWORD(v244) = *(_DWORD *)valuePtr;
              v467.size.width = (double)v244;
              LODWORD(v244) = v390;
              v467.size.height = (double)v244;
              v467.origin.x = 0.0;
              v467.origin.y = 0.0;
              CFDictionaryRef v245 = CGRectCreateDictionaryRepresentation(v467);
              if (v245)
              {
                CFDictionaryRef v246 = v245;
                CFDictionarySetValue(v239, v353, v245);
                CFRelease(v246);
              }
              CFDictionarySetValue(v239, v375, v384);
              CFDictionarySetValue(v239, v374, v384);
              CFDictionarySetValue(v239, v373, v384);
              CFDictionarySetValue(theDict, v315, v239);
              CFRelease(v239);
              uint64_t v5 = v338;
            }
          }
          if (v11)
          {
            *(_DWORD *)unsigned int valuePtr = 0;
            unsigned int v390 = 0;
            int v247 = *(_DWORD *)(a3 + 156);
            if (v247 == 1425)
            {
              H16ISP::JasperConfigManager::maxPeridotCloudSize((H16ISP::JasperConfigManager *)v414, v415, valuePtr, &v390, v229);
            }
            else
            {
              if (v247 != 1424) {
                goto LABEL_273;
              }
              *(_DWORD *)unsigned int valuePtr = 144;
              unsigned int v390 = H16ISP::JasperConfigManager::maxJasperCloudSizeBytes(v228);
            }
            if (*(_DWORD *)valuePtr)
            {
              CFMutableDictionaryRef v264 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              if (v264)
              {
                double v265 = v264;
                int v389 = 0;
                CFMutableArrayRef v266 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
                if (v266)
                {
                  CFMutableDictionaryRef v267 = v266;
                  int v389 = 1785950320;
                  CFNumberRef v268 = CFNumberCreate(0, kCFNumberIntType, &v389);
                  CFArrayAppendValue(v267, v268);
                  CFRelease(v268);
                  CFDictionarySetValue(v265, v303, v267);
                  CFRelease(v267);
                }
                CFNumberRef v269 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                CFDictionarySetValue(v265, v310, v269);
                CFRelease(v269);
                CFNumberRef v270 = CFNumberCreate(0, kCFNumberIntType, &v390);
                CFDictionarySetValue(v265, v309, v270);
                CFRelease(v270);
                CFDictionarySetValue(theDict, v308, v265);
                CFRelease(v265);
                CFDataRef v10 = v384;
              }
            }
          }
          else
          {
            uint64_t v248 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v248)
            {
              uint64_t v249 = v248;
              SetSupportedFormats(v248, (int *)SupportedOutputFormatsVisPipe, 0, v451);
              *(_DWORD *)unsigned int valuePtr = v414;
              CFNumberRef v250 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(v249, v379, v250);
              CFRelease(v250);
              unsigned int v390 = v415;
              CFNumberRef v251 = CFNumberCreate(0, kCFNumberIntType, &v390);
              CFDictionarySetValue(v249, v378, v251);
              CFRelease(v251);
              int v389 = 1065353216;
              CFNumberRef v252 = CFNumberCreate(0, kCFNumberFloatType, &v389);
              CFDictionarySetValue(v249, v376, v252);
              CFRelease(v252);
              int v388 = 1040187392;
              CFNumberRef v253 = CFNumberCreate(0, kCFNumberFloatType, &v388);
              CFDictionarySetValue(v249, v377, v253);
              CFRelease(v253);
              CFMutableArrayRef v254 = CFArrayCreateMutable(a1, 0, MEMORY[0x263EFFF70]);
              if (v254)
              {
                CFMutableDictionaryRef v255 = v254;
                int v387 = 0;
                CFNumberRef v256 = CFNumberCreate(0, kCFNumberIntType, &v387);
                CFArrayAppendValue(v255, v256);
                CFRelease(v256);
                int v387 = 1;
                CFNumberRef v257 = CFNumberCreate(0, kCFNumberIntType, &v387);
                CFArrayAppendValue(v255, v257);
                CFRelease(v257);
                int v387 = 2;
                CFNumberRef v258 = CFNumberCreate(0, kCFNumberIntType, &v387);
                CFArrayAppendValue(v255, v258);
                CFRelease(v258);
                int v387 = 3;
                CFNumberRef v259 = CFNumberCreate(0, kCFNumberIntType, &v387);
                CFArrayAppendValue(v255, v259);
                CFRelease(v259);
                int v387 = 4;
                CFNumberRef v260 = CFNumberCreate(0, kCFNumberIntType, &v387);
                CFArrayAppendValue(v255, v260);
                CFRelease(v260);
                CFDictionarySetValue(v249, @"VisPipeSupportedRawBitDepth", v255);
                CFRelease(v255);
              }
              CFDataRef v10 = v384;
              CFDictionarySetValue(v249, v372, v384);
              CFDictionarySetValue(v249, v371, v384);
              LODWORD(v261) = *(_DWORD *)valuePtr;
              v468.size.width = (double)v261;
              LODWORD(v261) = v390;
              v468.size.height = (double)v261;
              v468.origin.x = 0.0;
              v468.origin.y = 0.0;
              CFDictionaryRef v262 = CGRectCreateDictionaryRepresentation(v468);
              if (v262)
              {
                CFDictionaryRef v263 = v262;
                CFDictionarySetValue(v249, v353, v262);
                CFRelease(v263);
              }
              CFDictionarySetValue(v249, v375, v384);
              CFDictionarySetValue(v249, v374, v384);
              CFDictionarySetValue(v249, v373, v384);
              CFDictionarySetValue(theDict, @"VisPipe", v249);
              CFRelease(v249);
            }
          }
LABEL_273:
          CFMutableDictionaryRef v271 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (!v271)
          {
LABEL_323:
            CFDictionarySetValue(v15, v345, theDict);
            CFRelease(theDict);
LABEL_324:
            CFArrayAppendValue(theArray, v15);
            CFRelease(v15);
            goto LABEL_325;
          }
          uint64_t v272 = v271;
          uint64_t v273 = v5;
          if (*(unsigned char *)(a3 + 2796))
          {
            for (uint64_t i = 0; i != 384; i += 96)
            {
              uint64_t v275 = *(const void **)(*(void *)(a3 + 3104 + i) + 16);
              CFDictionaryRef v276 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              if (v276)
              {
                CFDictionaryRef v277 = v276;
                CFDictionarySetValue(v272, v275, v276);
                CFRelease(v277);
              }
              else
              {
                CFNumberRef v278 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  CFNumberRef v278 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v278;
                }
                if (os_log_type_enabled(v278, OS_LOG_TYPE_ERROR)) {
                  CopySupportedFormatsArray(v452, &v453, v278);
                }
              }
            }
          }
          uint64_t v5 = v273;
          BOOL v11 = isSensorType;
          if (*(unsigned char *)(a3 + 2797))
          {
            CFDictionaryRef v279 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v279)
            {
              CFDictionaryRef v280 = v279;
              CFDictionarySetValue(v272, *(const void **)(*(void *)(a3 + 3488) + 16), v279);
              CFRelease(v280);
            }
            else
            {
              char v281 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                char v281 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v281;
              }
              if (os_log_type_enabled(v281, OS_LOG_TYPE_ERROR)) {
                CopySupportedFormatsArray(v454, &v455, v281);
              }
            }
          }
          if (*(unsigned char *)(a3 + 2795))
          {
            CFDictionaryRef v282 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v282)
            {
              CFDictionaryRef v283 = v282;
              CFDictionarySetValue(v272, v314, v282);
              CFRelease(v283);
            }
            CFDictionaryRef v284 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v284)
            {
              CFDictionaryRef v285 = v284;
              CFDictionarySetValue(v272, v313, v284);
              CFRelease(v285);
            }
          }
          if (!*(unsigned char *)(a3 + 2701)
            || (CFDictionaryRef v286 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90])) == 0)
          {
LABEL_315:
            if (*(unsigned char *)(a3 + 2798))
            {
              CFDictionaryRef v295 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              if (v295)
              {
                CFDictionaryRef v296 = v295;
                CFDictionarySetValue(v272, *(const void **)(*(void *)(a3 + 3584) + 16), v295);
                CFRelease(v296);
              }
              else
              {
                CGRect v297 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                {
                  CGRect v297 = os_log_create("com.apple.isp", "plugin");
                  GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v297;
                }
                if (os_log_type_enabled(v297, OS_LOG_TYPE_ERROR)) {
                  CopySupportedFormatsArray(v456, v457, v297);
                }
              }
            }
            CFDictionarySetValue(theDict, v331, v272);
            CFRelease(v272);
            CFDataRef v10 = v384;
            goto LABEL_323;
          }
          CFDictionaryRef v287 = v286;
          if (H16ISP::H16ISPDevice::isSensorType(*(void *)(v5 + 24), *(_DWORD *)(a3 + 132), 1718186595))
          {
            CFDictionarySetValue(v272, v307, v287);
            CFDictionarySetValue(v272, v312, v287);
            CFDictionarySetValue(v272, v306, v287);
            uint64_t v288 = *(void *)(v5 + 24);
            if (!v288 || (*(unsigned char *)(*(void *)(v288 + 4384) + 96 * *(unsigned int *)(a3 + 132) + 96) & 1) == 0) {
              goto LABEL_314;
            }
            unsigned int v289 = v272;
            unsigned int v290 = v302;
            goto LABEL_309;
          }
          if (!H16ISP::H16ISPDevice::isSensorType(*(void *)(v5 + 24), *(_DWORD *)(a3 + 132), 1718775412)
            && !H16ISP::H16ISPDevice::isSensorType(*(void *)(v5 + 24), *(_DWORD *)(a3 + 132), 1718776695))
          {
            float v294 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              float v294 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v294;
            }
            if (os_log_type_enabled(v294, OS_LOG_TYPE_ERROR))
            {
              int v298 = *(_DWORD *)(a3 + 132);
              *(_DWORD *)unsigned int valuePtr = v300;
              *(void *)&valuePtr[4] = "ExclavesAnnounceSupport";
              __int16 v442 = 1024;
              int v443 = v298;
              _os_log_error_impl(&dword_24680F000, v294, OS_LOG_TYPE_ERROR, "%s - Invalid sensor is given for Exclave support (camChannel:%u)\n", valuePtr, 0x12u);
            }
            goto LABEL_314;
          }
          CFDictionarySetValue(v272, v304, v287);
          CFDictionarySetValue(v272, v312, v287);
          uint64_t v291 = *(void *)(v5 + 24);
          if (v291)
          {
            int v292 = *(_DWORD *)(*(void *)(v291 + 4384) + 96 * *(unsigned int *)(a3 + 132) + 96);
            if (v292)
            {
              CFDictionarySetValue(v272, v302, v287);
              uint64_t v293 = *(void *)(v5 + 24);
              if (!v293) {
                goto LABEL_314;
              }
              int v292 = *(_DWORD *)(*(void *)(v293 + 4384) + 96 * *(unsigned int *)(a3 + 132) + 96);
            }
            if ((v292 & 2) != 0)
            {
              unsigned int v289 = v272;
              unsigned int v290 = v301;
LABEL_309:
              CFDictionarySetValue(v289, v290, v287);
            }
          }
LABEL_314:
          CFRelease(v287);
          goto LABEL_315;
        }
        double v116 = v115;
        int v117 = *(_DWORD *)(v382 + 96 * *(unsigned int *)(a3 + 132) + 16);
        double v118 = SupportedOutputFormatsIRSensor;
        if (v117 != 1718186595) {
          double v118 = SupportedOutputFormatsPrimaryScaler;
        }
        if (v117 == 1785950322) {
          CFNumberRef v119 = (int *)SupportedOutputFormatsJasperSensor;
        }
        else {
          CFNumberRef v119 = (int *)v118;
        }
        SetSupportedFormats(v115, v119, 0, v451);
        *(_DWORD *)unsigned int valuePtr = 0;
        HIDWORD(v391) = 0;
        uint64_t v120 = *(void *)(a3 + 160);
        if (*(unsigned char *)(v120 + 120 * v18 + 36))
        {
          uint64_t v121 = v120 + 120 * v18;
          *(_DWORD *)unsigned int valuePtr = *(_DWORD *)(v121 + 40);
          int v122 = *(_DWORD *)(v121 + 44);
        }
        else
        {
          unsigned int v123 = v429;
          if (v428) {
            unsigned int v123 = v429 >> 1;
          }
          *(_DWORD *)unsigned int valuePtr = v123;
          int v122 = v430;
        }
        HIDWORD(v391) = v122;
        CFNumberRef v124 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
        CFDictionarySetValue(v116, v379, v124);
        CFRelease(v124);
        CFNumberRef v125 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v391 + 4);
        CFDictionarySetValue(v116, v378, v125);
        CFRelease(v125);
        if (*(unsigned char *)(a3 + 3784)) {
          int v126 = 1;
        }
        else {
          int v126 = v11;
        }
        if (v126) {
          float v127 = 1.0;
        }
        else {
          float v127 = 0.25;
        }
        *(float *)&uint64_t v391 = v127;
        CFNumberRef v128 = CFNumberCreate(0, kCFNumberFloatType, &v391);
        CFDictionarySetValue(v116, v377, v128);
        CFRelease(v128);
        unsigned int v390 = 1065353216;
        CFNumberRef v129 = CFNumberCreate(0, kCFNumberFloatType, &v390);
        CFDictionarySetValue(v116, v376, v129);
        CFRelease(v129);
        int v389 = v449;
        CFNumberRef v130 = CFNumberCreate(0, kCFNumberIntType, &v389);
        CFDictionarySetValue(v116, v333, v130);
        CFRelease(v130);
        int v388 = v448;
        CFNumberRef v131 = CFNumberCreate(0, kCFNumberIntType, &v388);
        CFDictionarySetValue(v116, v332, v131);
        CFRelease(v131);
        if (v11)
        {
          CFDictionarySetValue(v116, v372, v384);
        }
        else
        {
          CFDictionarySetValue(v116, v372, value);
          if (*(unsigned char *)(v382 + 621))
          {
            CFDictionarySetValue(v116, v371, value);
            int v387 = 0;
            int v386 = 0;
            uint64_t v132 = *(void *)(a3 + 160) + 120 * v18;
            int v133 = *(unsigned __int8 *)(v132 + 92);
            CFNumberRef v134 = (int *)(v132 + 96);
            CFNumberRef v135 = (int *)(v132 + 100);
            BOOL v136 = v133 == 0;
            CFDictionaryRef v137 = (int *)valuePtr;
            if (v136) {
              CFNumberRef v135 = (int *)&v391 + 1;
            }
            else {
              CFDictionaryRef v137 = v134;
            }
            int v387 = *v137;
            int v386 = *v135;
            CFNumberRef v138 = CFNumberCreate(0, kCFNumberIntType, &v387);
            CFDictionarySetValue(v116, v323, v138);
            CFRelease(v138);
            CFNumberRef v139 = CFNumberCreate(0, kCFNumberIntType, &v386);
            CFDictionarySetValue(v116, v322, v139);
            CFRelease(v139);
            goto LABEL_161;
          }
        }
        CFDictionarySetValue(v116, v371, v384);
LABEL_161:
        v460.size.width = (double)*(int *)valuePtr;
        v460.size.height = (double)SHIDWORD(v391);
        v460.origin.x = 0.0;
        v460.origin.y = 0.0;
        CFDictionaryRef v140 = CGRectCreateDictionaryRepresentation(v460);
        if (v140)
        {
          CFDictionaryRef v141 = v140;
          CFDictionarySetValue(v116, v353, v140);
          CFRelease(v141);
        }
        CFDictionarySetValue(v116, v375, v330);
        CFDictionarySetValue(v116, v374, v330);
        CFDictionarySetValue(v116, v373, v330);
        if (v450) {
          CFDictionarySetValue(theDict, v324, v116);
        }
        CFRelease(v116);
        goto LABEL_166;
      }
    }
    else
    {
      if (!v422)
      {
        int v38 = 8;
        goto LABEL_60;
      }
      if (v422 == 2)
      {
        int v411 = 12;
        goto LABEL_61;
      }
    }
    int v38 = 10;
    goto LABEL_60;
  }
  unsigned int v381 = 0;
LABEL_329:
  *a2 = theArray;
  return v381;
}

uint64_t CopyFormatDescription(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)(a3 + 40);
  mach_port_t v3 = *(const void **)(a3 + 40);
  if (v3) {
    CFRetain(v3);
  }
  return 0;
}

uint64_t CopyMaximumAllowedFrameRate(uint64_t a1, CFNumberRef *a2, uint64_t a3)
{
  int valuePtr = *(_DWORD *)(a3 + 60);
  *a2 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  return 0;
}

uint64_t CopyMinimumFrameRate(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v12 = 0;
  if (H16ISP::H16ISPDevice::GetMinimumFrameRate(*(H16ISP::H16ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 132), &v12))
  {
    CFNumberRef v7 = 0;
    uint64_t v8 = 4294954513;
  }
  else
  {
    LOWORD(v6) = v12;
    float v9 = (double)v6 * 0.00390625;
    float valuePtr = v9;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    uint64_t v8 = 0;
  }
  *a2 = v7;
  return v8;
}

uint64_t StillImageCaptureNow(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  CFNumberRef v7 = (const void *)v2;
  uint64_t v798 = *MEMORY[0x263EF8340];
  int v8 = *(unsigned __int8 *)(v5 + 3752);
  bzero(&v797, 0x10uLL);
  bzero(__src, 0x79CuLL);
  LOWORD(__src[1]) = 2623;
  v744[3] = 0;
  *(unsigned int *)((char *)&v744[1] + mach_timebase_info(this + 3) = 0;
  bzero(v744, 0xE8uLL);
  uint64_t v9 = *(void *)(*(void *)(v4 + 24) + 4384);
  CFArrayRef v10 = *(const __CFArray **)(v6 + 3888);
  if (v10)
  {
    CFRetain(*(CFTypeRef *)(v6 + 3888));
    BOOL v11 = (pthread_mutex_t *)(v6 + 240);
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 240));
    LockStreamMutexes(v10);
  }
  else
  {
    BOOL v11 = 0;
  }
  if (*(_DWORD *)(v6 + 76) || !*(void *)(v6 + 136))
  {
    uint64_t v12 = 4294954608;
    goto LABEL_6;
  }
  int v696 = *(_DWORD *)(v6 + 232);
  uint64_t v740 = v4;
  uint64_t v685 = v9;
  BOOL v725 = v8;
  if (!v7 || (CFTypeID v14 = CFGetTypeID(v7), v14 != CFDictionaryGetTypeID()))
  {
    uint64_t v677 = 0;
    uint64_t v678 = 0;
    uint64_t v676 = 0;
    LOBYTE(v70H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
    CFDictionaryRef v19 = 0;
    int v690 = 0;
    CFDictionaryRef v20 = 0;
    uint64_t v688 = 0;
    CFArrayRef v689 = 0;
    int v681 = 0;
    unsigned int v736 = 0;
    unsigned int v670 = 0;
    uint64_t v671 = 0;
    __int16 v21 = 0;
    CFArrayRef v22 = 0;
    CFArrayRef v684 = 0;
    CFDictionaryRef v686 = 0;
    unint64_t v687 = 0;
    __int16 v669 = 0;
    __int16 v675 = 0;
    char v23 = 0;
    BOOL v24 = 0;
    uint64_t v25 = 0;
    CFArrayRef theArray = 0;
    unint64_t cf2 = 0;
    CFArrayRef key = 0;
    CFTypeRef v691 = 0;
    int v704 = 0;
    int v707 = 0;
    int v712 = 0;
    char v731 = 0;
    CFDictionaryRef theDict = 0;
    CFArrayRef v694 = 0;
    CFArrayRef v695 = 0;
    uint64_t v12 = 4294954516;
    __int16 v683 = -1;
    int v26 = 4;
    goto LABEL_15;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2D848]);
  int v16 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2D9B0]);
  BOOL v17 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2DA00]);
  CFTypeRef cf = CFDictionaryGetValue((CFDictionaryRef)v7, @"BioCapBracketedCaptureParams");
  CFTypeRef v697 = CFDictionaryGetValue((CFDictionaryRef)v7, @"ProbePatternBracketedCaptureParams");
  CFIndex v18 = CFDictionaryGetValue((CFDictionaryRef)v7, @"ProjectorBracketedCaptureParams");
  CFArrayRef v664 = (CFArrayRef)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E440]);
  if (v664) {
    CFDictionaryRef v686 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E408]);
  }
  else {
    CFDictionaryRef v686 = 0;
  }
  CFArrayRef v694 = Value;
  if (!Value) {
    goto LABEL_1196;
  }
  *(void *)uint64_t v732 = v6;
  CFNumberRef v39 = v11;
  CFNumberRef v40 = v16;
  CFNumberRef v41 = v7;
  CFNumberRef v42 = v18;
  CFArrayRef v43 = v10;
  CFNumberRef v44 = v17;
  CFTypeID v45 = CFGetTypeID(Value);
  BOOL v55 = v45 == CFArrayGetTypeID();
  BOOL v17 = v44;
  CFArrayRef v10 = v43;
  CFIndex v18 = v42;
  CFNumberRef v7 = v41;
  int v16 = v40;
  BOOL v11 = v39;
  uint64_t v6 = *(void *)v732;
  if (v55)
  {
    int v690 = 0;
    uint64_t v688 = 0;
    int v704 = 0;
    int v707 = 0;
    int v712 = 1;
  }
  else
  {
LABEL_1196:
    if (v16 && (CFTypeID v46 = CFGetTypeID(v16), v46 == CFArrayGetTypeID()))
    {
      int v690 = 0;
      uint64_t v688 = 0;
      int v704 = 0;
      int v712 = 0;
      int v707 = 1;
    }
    else if (v17 && (CFTypeID v47 = CFGetTypeID(v17), v47 == CFDictionaryGetTypeID()))
    {
      int v690 = 0;
      uint64_t v688 = 0;
      int v707 = 0;
      int v712 = 0;
      int v704 = 1;
    }
    else if (cf && (CFTypeID v48 = CFGetTypeID(cf), v48 == CFDictionaryGetTypeID()))
    {
      uint64_t v688 = 0;
      int v704 = 0;
      int v707 = 0;
      int v712 = 0;
      int v690 = 1;
    }
    else if (v697 && (CFTypeID v49 = CFGetTypeID(v697), v49 == CFDictionaryGetTypeID()))
    {
      int v690 = 0;
      int v704 = 0;
      int v707 = 0;
      int v712 = 0;
      uint64_t v688 = 0x100000000;
    }
    else if (v18)
    {
      CFTypeID v50 = CFGetTypeID(v18);
      int v690 = 0;
      int v704 = 0;
      int v707 = 0;
      int v712 = 0;
      uint64_t v688 = v50 == CFArrayGetTypeID();
    }
    else
    {
      int v690 = 0;
      uint64_t v688 = 0;
      int v704 = 0;
      int v707 = 0;
      int v712 = 0;
    }
  }
  unint64_t v51 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2D918]);
  CFTypeRef v691 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2D880]);
  CFArrayRef v695 = (const __CFArray *)v16;
  CFArrayRef v689 = (const __CFArray *)v18;
  if (v51)
  {
    CFTypeID v52 = CFGetTypeID(v51);
    if (v52 == CFStringGetTypeID())
    {
      if (CFEqual(v51, (CFTypeRef)*MEMORY[0x263F2D898]))
      {
        if (*(void *)(v6 + 3888)) {
          __int16 v53 = 7;
        }
        else {
          __int16 v53 = 2;
        }
        goto LABEL_170;
      }
      if (CFEqual(v51, (CFTypeRef)*MEMORY[0x263F2D888]))
      {
        if (*(void *)(v6 + 3888)) {
          __int16 v53 = 5;
        }
        else {
          __int16 v53 = 0;
        }
        goto LABEL_170;
      }
      if (CFEqual(v51, (CFTypeRef)*MEMORY[0x263F2D890]))
      {
        if (*(void *)(v6 + 3888)) {
          __int16 v53 = 6;
        }
        else {
          __int16 v53 = 1;
        }
        goto LABEL_170;
      }
      if (CFEqual(v51, (CFTypeRef)*MEMORY[0x263F2D8A0]))
      {
        if (*(void *)(v6 + 3888)) {
          __int16 v53 = 16;
        }
        else {
          __int16 v53 = 15;
        }
        goto LABEL_170;
      }
    }
  }
  __int16 v53 = -1;
LABEL_170:
  CFNumberRef v96 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2DA40]);
  CFNumberRef v97 = (CFTypeRef *)MEMORY[0x263EFFB40];
  if (v96) {
    BOOL v700 = CFEqual(v96, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  else {
    BOOL v700 = 0;
  }
  uint64_t v98 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2DA78]);
  int v99 = 4;
  unint64_t v687 = (unint64_t)v98;
  if (v98)
  {
    if (CFEqual(v98, *v97)) {
      int v99 = 1;
    }
    else {
      int v99 = 4;
    }
  }
  unint64_t cf2 = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E418]);
  if (cf2)
  {
    if (!CFEqual((CFTypeRef)*MEMORY[0x263F2E310], (CFTypeRef)cf2)) {
      goto LABEL_227;
    }
    int v99 = 1;
  }
  unsigned int v693 = v99;
  double v100 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3E0]);
  if (v100)
  {
    BOOL v101 = CFEqual(v100, *v97) != 0;
    H16ISP::H16ISPDevice::EnableHighlightRecovery(*(H16ISP::H16ISPDevice **)(v4 + 24), *(_DWORD *)(v6 + 132), v101, 1);
  }
  LODWORD(__b[0]) = 0;
  CFNumberRef v102 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E438]);
  if (v102 && (CFNumberRef v103 = v102, v104 = CFGetTypeID(v102), v104 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(v103, kCFNumberIntType, __b);
    int v105 = __b[0];
  }
  else
  {
    int v105 = 0;
  }
  BOOL v106 = v105 == 1;
  bzero(v796, 0x2AuLL);
  bzero(v795, 0x2AuLL);
  CFArrayRef v107 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, @"FocusDeltaParams");
  __int16 v683 = v53;
  CFDictionaryRef theDict = (const __CFDictionary *)v17;
  char v731 = v106;
  if (v107 && (CFArrayRef v108 = v107, v109 = CFGetTypeID(v107), v109 == CFArrayGetTypeID()))
  {
    CFIndex Count = CFArrayGetCount(v108);
    uint64_t v12 = 4294954516;
    if (Count > 21) {
      goto LABEL_6;
    }
    CFIndex v111 = Count;
    if (!Count) {
      goto LABEL_6;
    }
    if (Count < 1)
    {
      uint64_t v114 = Count;
    }
    else
    {
      CFIndex v112 = 0;
      uint64_t v113 = v796;
      do
      {
        uint64_t v114 = v111;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v108, v112);
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v113);
        CFIndex v111 = v114;
        ++v112;
        ++v113;
      }
      while (v114 != v112);
    }
  }
  else
  {
    uint64_t v114 = 0;
  }
  CFArrayRef v116 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, @"FocusDeltaParamsSlave");
  if (v116)
  {
    CFArrayRef v117 = v116;
    CFTypeID v118 = CFGetTypeID(v116);
    if (v118 == CFArrayGetTypeID())
    {
      CFIndex v119 = CFArrayGetCount(v117);
      uint64_t v12 = 4294954516;
      if (v119 != v114 || v119 > 21 || !v119) {
        goto LABEL_6;
      }
      if (v114 < 1) {
        goto LABEL_209;
      }
      CFIndex v120 = 0;
      uint64_t v121 = v795;
      do
      {
        CFNumberRef v122 = (const __CFNumber *)CFArrayGetValueAtIndex(v117, v120);
        CFNumberGetValue(v122, kCFNumberIntType, v121);
        ++v120;
        ++v121;
      }
      while (v114 != v120);
    }
  }
  if ((v704 | v707 | v712) == 1 && v114 >= 1)
  {
    bzero(&buf, 0x64uLL);
    uint64_t v123 = 0;
    buf.timescale = buf.timescale & 0x7FFF0000 | *(unsigned __int16 *)(v6 + 132) | ((*(void *)(v6 + 3888) != 0) << 31);
    WORD2(buf.value) = 586;
    LOWORD(buf.flags) = v114;
    do
    {
      CFNumberRef v124 = (char *)&buf + 2 * v123;
      *((_WORD *)v124 + 7) = v796[v123];
      *((_WORD *)v124 + 28) = v795[v123++];
    }
    while (v114 != v123);
    if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v740 + 24), (unsigned __int8 *)&buf, 0x64u, 0, 0xFFFFFFFF))goto LABEL_208; {
  }
    }
LABEL_209:
  CFNumberRef v125 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3A0]);
  if (v125) {
    BOOL v725 = CFEqual(v125, *v97) != 0;
  }
  int v126 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E390]);
  if (v126)
  {
    float v127 = v126;
    if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(v6 + 136), 20)) {
      goto LABEL_227;
    }
    BOOL v128 = CFEqual(v127, *v97) != 0;
  }
  else
  {
    BOOL v128 = dword_26B11BA60 == 1;
  }
  HIDWORD(v678) = v128;
  CFNumberRef v129 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E388]);
  if (v129)
  {
    if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(v6 + 136), 22)) {
      goto LABEL_227;
    }
    if (CFEqual(v129, *v97)) {
      int v130 = -1;
    }
    else {
      int v130 = 0;
    }
  }
  else
  {
    int v130 = 0;
  }
  if (!CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E380]))
  {
    HIDWORD(v676) = 0;
    goto LABEL_229;
  }
  if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(v6 + 136), 23))
  {
LABEL_227:
    uint64_t v12 = 4294954516;
    goto LABEL_6;
  }
  if (CFEqual(v129, *v97)) {
    int v131 = -1;
  }
  else {
    int v131 = 0;
  }
  HIDWORD(v676) = v131;
LABEL_229:
  uint64_t v132 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E420]);
  if (v132) {
    BOOL v24 = CFEqual(v132, *v97) != 0;
  }
  else {
    BOOL v24 = 0;
  }
  int v133 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3F0]);
  if (v133) {
    char v134 = CFEqual(v133, *v97) != 0;
  }
  else {
    char v134 = *(unsigned char *)(v6 + 4116);
  }
  *(unsigned char *)(v6 + 4117) = v134;
  CFNumberRef v135 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3A8]);
  if (v135) {
    int v681 = CFEqual(v135, *v97) != 0;
  }
  else {
    int v681 = 0;
  }
  BOOL v136 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3C0]);
  if (v136) {
    LOWORD(v678) = CFEqual(v136, *v97) != 0;
  }
  else {
    LOWORD(v678) = 0;
  }
  CFDictionaryRef v137 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3B8]);
  if (v137) {
    WORD2(v677) = CFEqual(v137, *v97) != 0;
  }
  else {
    WORD2(v677) = 0;
  }
  CFNumberRef v138 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3B0]);
  if (v138) {
    LOWORD(v677) = CFEqual(v138, *v97) != 0;
  }
  else {
    LOWORD(v677) = 0;
  }
  CFArrayRef v139 = *(const __CFArray **)(v6 + 3888);
  LODWORD(v676) = v130;
  if (v139)
  {
    if (!CFArrayGetCount(v139))
    {
      char v141 = 0;
      LOWORD(v144) = 0;
      v794[0] = 0;
      goto LABEL_261;
    }
    unint64_t v140 = 0;
    char v141 = 0;
    int v142 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 3888), v140);
      FigCaptureStreamGetFigBaseObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(DerivedStorage + 3784))
      {
        int v142 = *(_DWORD *)(DerivedStorage + 3788);
        char v141 = 1;
      }
      ++v140;
    }
    while (v140 < CFArrayGetCount(*(CFArrayRef *)(v6 + 3888)));
    v794[0] = v142;
    if (v141)
    {
      int v144 = v142;
      uint64_t v145 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3E8]);
      if (!v145)
      {
        uint64_t v12 = 4294954516;
        goto LABEL_310;
      }
      uint64_t ProjectorTypeFromDictionary = GetProjectorTypeFromDictionary(v145, v794);
      if (!ProjectorTypeFromDictionary)
      {
        uint64_t v12 = 0;
        int v144 = v794[0];
LABEL_310:
        uint64_t ProjectorTypeFromDictionary = 4294954516;
        switch(v144)
        {
          case 0:
            goto LABEL_262;
          case 1:
            LOWORD(v144) = 4096;
            goto LABEL_262;
          case 4:
            LOWORD(v144) = 2;
            goto LABEL_262;
          case 5:
            LOWORD(v144) = 1;
            goto LABEL_262;
          case 11:
            LOWORD(v144) = 4;
            goto LABEL_262;
          case 12:
            LOWORD(v144) = 3;
            goto LABEL_262;
          default:
            break;
        }
      }
LABEL_395:
      uint64_t v12 = ProjectorTypeFromDictionary;
      goto LABEL_6;
    }
  }
  else
  {
    char v141 = 0;
  }
  LOWORD(v144) = 0;
LABEL_261:
  uint64_t v12 = 4294954516;
LABEL_262:
  __int16 v675 = v144;
  CFDictionaryRef v146 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E430]);
  unsigned int v662 = v12;
  char v668 = v141;
  if (v146)
  {
    CFDictionaryRef v147 = v146;
    if (*(unsigned char *)(v6 + 1364))
    {
      uint64_t v148 = (int *)(v6 + 1368);
    }
    else if (*(unsigned char *)(v6 + 1564))
    {
      uint64_t v148 = (int *)(v6 + 1568);
    }
    else
    {
      if (!*(unsigned char *)(v6 + 2364))
      {
        int v149 = 0;
LABEL_272:
        if (*(unsigned char *)(v6 + 1352))
        {
          uint64_t v150 = v11;
        }
        else
        {
          uint64_t v150 = v11;
          if (!*(unsigned char *)(v6 + 1552))
          {
            __int16 v151 = *(unsigned char *)(v6 + 2280) != 0;
            goto LABEL_276;
          }
        }
        __int16 v151 = 1;
LABEL_276:
        CFNumberRef v152 = (const __CFNumber *)CFDictionaryGetValue(v146, (const void *)*MEMORY[0x263F2E628]);
        if (v152)
        {
          LODWORD(buf.value) = 0;
          CFNumberGetValue(v152, kCFNumberSInt32Type, &buf);
          unsigned int v153 = buf.value;
          BOOL v154 = SLODWORD(buf.value) <= v149;
          uint64_t v155 = v740;
          if (!v154)
          {
            uint64_t ProjectorTypeFromDictionary = 4294954516;
            BOOL v11 = v150;
            goto LABEL_395;
          }
        }
        else
        {
          unsigned int v153 = 0;
          uint64_t v155 = v740;
        }
        unsigned int v736 = v153;
        __int16 v673 = v151 ^ 1;
        CFDictionaryRef v156 = (const __CFDictionary *)CFDictionaryGetValue(v147, (const void *)*MEMORY[0x263F2E630]);
        if (v156)
        {
          CFDictionaryRef v157 = v156;
          BOOL v11 = v150;
          if (H16ISP::H16ISPDevice::ISP_GetCameraTime(*(void *)(v155 + 24), v783))
          {
            uint64_t ProjectorTypeFromDictionary = 4294954514;
            goto LABEL_395;
          }
          CMTimeMakeFromDictionary(&buf, v157);
          CMTime time = buf;
          CMTimeGetSeconds(&time);
          uint64_t v158 = *(void *)&v783[0];
          uint64_t v671 = (unint64_t)((double)*((unint64_t *)&v783[0] + 1)
                                  - (double)(v158 - FigNanosecondsToHostTime()) / *(double *)(v6 + 3744));
        }
        else
        {
          uint64_t v671 = 0;
          BOOL v11 = v150;
        }
        uint64_t v12 = v662;
        __int16 v21 = v673;
        goto LABEL_286;
      }
      uint64_t v148 = (int *)(v6 + 2368);
    }
    int v149 = *v148;
    goto LABEL_272;
  }
  unsigned int v736 = 0;
  uint64_t v671 = 0;
  __int16 v21 = 0;
LABEL_286:
  CFArrayRef v159 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E428]);
  int v26 = v693;
  CFArrayRef v684 = v159;
  if (v159)
  {
    LODWORD(buf.value) = 0;
    unsigned int v160 = CFArrayGetCount(v159);
    unsigned int v670 = v160;
    if (v160)
    {
      CFIndex v161 = 0;
      unsigned int v736 = 0;
      CFArrayRef theArraya = (CFArrayRef)*MEMORY[0x263F2E638];
      keya = (void *)*MEMORY[0x263F2E508];
      uint64_t v674 = v160;
      while (1)
      {
        CFDictionaryRef v162 = (const __CFDictionary *)CFArrayGetValueAtIndex(v684, v161);
        CFNumberRef v163 = (const __CFNumber *)CFDictionaryGetValue(v162, theArraya);
        if (v163) {
          CFNumberGetValue(v163, kCFNumberSInt8Type, (char *)&v797 + 2 * v736);
        }
        CFNumberRef v164 = (const __CFNumber *)CFDictionaryGetValue(v162, keya);
        if (v164 && (CFNumberGetValue(v164, kCFNumberSInt32Type, &buf), LODWORD(buf.value)))
        {
          if (!v736)
          {
            uint64_t v165 = 0;
LABEL_299:
            ++v736;
            *((unsigned char *)&v797 + 2 * v165 + 1) = 1;
            goto LABEL_300;
          }
          uint64_t v165 = v736;
          if (*((unsigned __int8 *)&v797 + 2 * v736 - 2) != *((unsigned __int8 *)&v797 + 2 * v736)) {
            goto LABEL_299;
          }
          int v166 = (char *)&v797 + 2 * v736 - 2;
          int v168 = v166[1];
          uint64_t v167 = v166 + 1;
          if (v168) {
            goto LABEL_299;
          }
          *uint64_t v167 = 2;
        }
        else
        {
          *((unsigned char *)&v797 + 2 * v736++ + 1) = 0;
        }
LABEL_300:
        GetPerFrameTuningParam(v162, (uint64_t)&__src[16 * (unint64_t)LOBYTE(__src[3]) + 4], (unsigned char *)v6);
        char v169 = __src[3];
        __src[16 * (unint64_t)LOBYTE(__src[3]) + 9] = 1;
        LOBYTE(__src[3]) = v169 + 1;
        if (v674 == ++v161) {
          goto LABEL_304;
        }
      }
    }
    unsigned int v736 = 0;
LABEL_304:
    if (*(unsigned char *)(v6 + 1352))
    {
      __int16 v170 = 1;
      uint64_t v12 = v662;
      int v26 = v693;
    }
    else
    {
      uint64_t v12 = v662;
      int v26 = v693;
      if (*(unsigned char *)(v6 + 1552)) {
        __int16 v170 = 1;
      }
      else {
        __int16 v170 = *(unsigned char *)(v6 + 2280) != 0;
      }
    }
    __int16 v21 = v170 ^ 1;
    __int16 v669 = 1;
  }
  else
  {
    __int16 v669 = 0;
    unsigned int v670 = v736;
  }
  CFArrayRef v216 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3F8]);
  CFArrayRef key = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E400]);
  CFArrayRef theArray = v216;
  if (v216
    && (v683 != 6 && v683 != 1 ? (uint64_t v217 = 1) : !v700 ? (uint64_t v217 = 1) : (uint64_t v217 = 2),
        BOOL v55 = CFArrayGetCount(v216) == v217,
        int v26 = v693,
        !v55)
    || key
    && (v683 != 6 && v683 != 1 ? (uint64_t v218 = 1) : !v700 ? (uint64_t v218 = 1) : (uint64_t v218 = 2),
        BOOL v55 = CFArrayGetCount(key) == v218,
        int v26 = v693,
        !v55))
  {
    uint64_t ProjectorTypeFromDictionary = 4294954516;
    goto LABEL_395;
  }
  char v23 = v668;
  uint64_t v25 = v114;
  CFArrayRef v22 = v664;
  CFDictionaryRef v19 = (const __CFDictionary *)cf;
  CFDictionaryRef v20 = (const __CFDictionary *)v697;
LABEL_15:
  char v666 = v23;
  CFDictionaryRef v698 = v20;
  CFDictionaryRef cfa = v19;
  uint64_t v667 = v25;
  __int16 v672 = v21;
  CFArrayRef v27 = *(const __CFArray **)(v6 + 3888);
  unsigned int v692 = v26;
  if (v27)
  {
    if (CFArrayGetCount(v27))
    {
      unint64_t v28 = 0;
      do
      {
        if (CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 3888), v28))
        {
          FigCaptureStreamGetFigBaseObject();
          uint64_t v29 = CMBaseObjectGetDerivedStorage();
          if (*(void *)(v29 + 136))
          {
            if (*(unsigned char *)(v29 + 3896) || !v24)
            {
              if (*(unsigned char *)(v29 + 3896)) {
                uint64_t v6 = v29;
              }
              uint64_t v31 = v745++;
              v750[v31] = v29;
            }
          }
        }
        ++v28;
      }
      while (v28 < CFArrayGetCount(*(CFArrayRef *)(v6 + 3888)));
    }
  }
  else
  {
    v750[0] = v6;
    unsigned int v745 = 1;
  }
  if (!v745) {
    goto LABEL_208;
  }
  int v32 = *(_DWORD *)(v6 + 3704);
  int v749 = 5;
  int v748 = v32;
  int v33 = *(_DWORD *)(v6 + 132);
  if (v745 != 1)
  {
    int v33 = (unsigned __int16)*(_DWORD *)(v6 + 132);
    if (*(void *)(v6 + 3888))
    {
      if (!*(unsigned char *)(v6 + 3908)) {
        v33 |= 0x80000000;
      }
    }
  }
  if (H16ISP::H16ISPDevice::EnableSqrtToneCurve(*(H16ISP::H16ISPDevice **)(v740 + 24), v33, v731)) {
    goto LABEL_6;
  }
  if (H16ISP::H16ISPDevice::EnableCNRForStillCapture(*(H16ISP::H16ISPDevice **)(v740 + 24), v33, v725))
  {
LABEL_208:
    uint64_t v12 = 4294954611;
    goto LABEL_6;
  }
  unsigned int v34 = v745;
  CFArrayRef v665 = v22;
  if (v7 && v696 == 1 && !v22 && v745 == 1)
  {
    int v35 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E500]);
    CFArrayRef v36 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3F8]);
    __int16 v37 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3D0]);
    if (v37) {
      BOOL v38 = CFEqual(v37, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
    }
    else {
      BOOL v38 = 0;
    }
    BOOL v54 = *(unsigned char *)(v6 + 1280) || *(unsigned char *)(v6 + 1480) || *(unsigned char *)(v6 + 2280) != 0;
    if (v35) {
      BOOL v55 = v36 == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (v55) {
      BOOL v38 = 1;
    }
    if (!v38 && v54 || *(unsigned char *)(v6 + 2280))
    {
      int v726 = v33;
      __src[2] = *(_DWORD *)(v750[0] + 132);
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, (CFDictionaryRef)v7);
      CFArrayRef v22 = v665;
      if (v36 && CFArrayGetCount(v36) >= 1)
      {
        unsigned int v57 = CFArrayGetValueAtIndex(v36, 0);
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x263F2E4C8], v57);
      }
      GetPerFrameTuningParam(MutableCopy, (uint64_t)&__src[4], (unsigned char *)v6);
      CFRelease(MutableCopy);
      LOBYTE(__src[3]) = 1;
      __src[9] = 1;
      __src[484] = 0;
      uint64_t v12 = 0;
      if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v740 + 24), (unsigned __int8 *)__src, 0x79Cu, 0, 0xFFFFFFFF))goto LABEL_6; {
      uint64_t v12 = 0;
      }
      unsigned int v58 = v745;
      goto LABEL_113;
    }
    unsigned int v34 = v745;
    CFArrayRef v22 = v665;
  }
  if (!v34) {
    goto LABEL_123;
  }
  int v726 = v33;
  unint64_t v59 = 0;
  do
  {
    uint64_t v60 = v750[v59];
    CFArrayRef v61 = theArray;
    if (!*(unsigned char *)(v60 + 3896))
    {
      if (*(void *)(v60 + 3888)) {
        CFArrayRef v61 = key;
      }
      else {
        CFArrayRef v61 = theArray;
      }
    }
    if (v61)
    {
      if (CFArrayGetCount(v61) == 2)
      {
        CFDictionaryRef v62 = (const __CFDictionary *)CFArrayGetValueAtIndex(v61, 0);
        CFArrayRef v61 = (const __CFArray *)CFArrayGetValueAtIndex(v61, 1);
        if (v62)
        {
          uint64_t ProjectorTypeFromDictionary = ApplyNoiseReductionConfiguration(v740, v750[v59], 2, 2, 2, v62);
          if (ProjectorTypeFromDictionary) {
            goto LABEL_395;
          }
        }
      }
      else if (CFArrayGetCount(v61) == 1)
      {
        CFArrayRef v61 = (const __CFArray *)CFArrayGetValueAtIndex(v61, 0);
      }
      else
      {
        CFArrayRef v61 = 0;
      }
    }
    uint64_t ProjectorTypeFromDictionary = ApplyNoiseReductionConfiguration(v740, v750[v59], 1, 1, 1, v61);
    if (ProjectorTypeFromDictionary) {
      goto LABEL_395;
    }
    ++v59;
    unsigned int v58 = v745;
  }
  while (v59 < v745);
  CFArrayRef v22 = v665;
LABEL_113:
  if (!v58) {
    goto LABEL_122;
  }
  CFNumberRef v660 = v11;
  unint64_t v64 = 0;
  do
  {
    bzero(&buf, 0x14uLL);
    CMTimeScale v65 = *(_DWORD *)(v750[v64] + 132);
    WORD2(buf.value) = 320;
    buf.timescale = v65;
    buf.flags = HIDWORD(v678);
    LOBYTE(buf.epoch) = v676 != 0;
    BYTE1(buf.epoch) = HIDWORD(v676) != 0;
    if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v740 + 24), (unsigned __int8 *)&buf, 0x14u, 0, 0xFFFFFFFF)|| (v681 |= dword_26B11B888 != 0, H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(v740 + 24), *(_DWORD *)(v750[v64] + 132), 19, 1, v681 & 1))|| H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(v740 + 24), *(_DWORD *)(v750[v64] + 132), 37, 1, v678)|| H16ISP::H16ISPDevice::SetMetadataRequired(
                         *(H16ISP::H16ISPDevice **)(v740 + 24),
                         *(_DWORD *)(v750[v64] + 132),
                         15,
                         1,
                         SWORD2(v677))
      || H16ISP::H16ISPDevice::SetMetadataRequired(*(H16ISP::H16ISPDevice **)(v740 + 24), *(_DWORD *)(v750[v64] + 132), 63, 1, v677))
    {
      uint64_t v12 = 4294954611;
      goto LABEL_146;
    }
    ++v64;
  }
  while (v64 < v745);
  uint64_t v12 = v12;
  CFArrayRef v22 = v665;
LABEL_122:
  int v33 = v726;
LABEL_123:
  if (v712)
  {
    unsigned int v66 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v66 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v66;
    }
    unsigned int v661 = v12;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.value) = 136315138;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"StillImageCaptureNow";
      _os_log_impl(&dword_24680F000, v66, OS_LOG_TYPE_DEFAULT, "%s - Initiating AE bracketed capture\n", (uint8_t *)&buf, 0xCu);
    }
    CFIndex v67 = CFArrayGetCount(v694);
    if (v67 > 21) {
      goto LABEL_372;
    }
    uint64_t v68 = v67;
    if (!v67) {
      goto LABEL_372;
    }
    CFNumberRef v660 = v11;
    if (v67 >= 1)
    {
      CFIndex v69 = 0;
      unsigned int v70 = __b;
      do
      {
        CFNumberRef v71 = (const __CFNumber *)CFArrayGetValueAtIndex(v694, v69);
        CFNumberGetValue(v71, kCFNumberDoubleType, v70);
        ++v69;
        ++v70;
      }
      while (v68 != v69);
    }
    unsigned int v72 = v736;
    if (!*(void *)(v6 + 3888)) {
      goto LABEL_355;
    }
    CFArrayRef v73 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2D850]);
    CFArrayRef v74 = v73;
    if (!v73 || (CFTypeID v75 = CFGetTypeID(v73), v75 != CFArrayGetTypeID()))
    {
      int v76 = 0;
      goto LABEL_349;
    }
    if (CFArrayGetCount(v74) != v68) {
      goto LABEL_144;
    }
    int v76 = 1;
LABEL_349:
    unsigned int v72 = v736;
    if (v68 >= 1)
    {
      CFIndex v206 = 0;
      CFNumberRef v207 = v794;
      do
      {
        if (v76)
        {
          CFNumberRef v208 = (const __CFNumber *)CFArrayGetValueAtIndex(v74, v206);
          CFNumberGetValue(v208, kCFNumberDoubleType, v207);
          unsigned int v72 = v736;
        }
        else
        {
          *(void *)CFNumberRef v207 = __b[v206];
        }
        ++v206;
        v207 += 2;
      }
      while (v68 != v206);
    }
LABEL_355:
    int v209 = v72 + v68 + 1;
    if (v676 == -1) {
      int v210 = v72 + v68;
    }
    else {
      int v210 = 0;
    }
    if (HIDWORD(v676) == -1) {
      int v211 = v72 + v68;
    }
    else {
      int v211 = 0;
    }
    if (v745)
    {
      uint64_t v212 = 0;
      if (HIDWORD(v678)) {
        int v213 = v72 + v68 + 1;
      }
      else {
        int v213 = 0;
      }
      do
      {
        uint64_t v214 = v750[v212];
        *(unsigned char *)(v214 + 552) = v700;
        if (AllocateAndSendOneShotBuffers(v214, v209, v213, v210, v211, 0)) {
          goto LABEL_619;
        }
      }
      while (++v212 < (unint64_t)v745);
    }
    __int16 v215 = v683;
    if (v683 == -1)
    {
      if (*(void *)(v6 + 3888)) {
        __int16 v215 = 6;
      }
      else {
        __int16 v215 = 1;
      }
    }
    if (H16ISP::H16ISPDevice::SetAEBracketingMode(*(H16ISP::H16ISPDevice **)(v740 + 24), v33, v215, v692))
    {
LABEL_372:
      uint64_t v12 = v661;
      goto LABEL_6;
    }
    LOWORD(v234) = (_WORD)v691;
    if (v691)
    {
      CFTypeID v235 = CFGetTypeID(v691);
      if (v235 == CFDictionaryGetTypeID())
      {
        CFArrayRef v236 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v691, (const void *)*MEMORY[0x263F2DB20]);
        if (!v236) {
          goto LABEL_579;
        }
        CFArrayRef v237 = v236;
        CFTypeID v238 = CFGetTypeID(v236);
        if (v238 != CFArrayGetTypeID()) {
          goto LABEL_372;
        }
        if (CFArrayGetCount(v237))
        {
          unint64_t v239 = 0;
          CFNumberRef v240 = (_WORD *)v783 + 3;
          while (1)
          {
            CFDictionaryRef v241 = (const __CFDictionary *)CFArrayGetValueAtIndex(v237, v239);
            if (!v241) {
              break;
            }
            CFDictionaryRef v242 = v241;
            CFTypeID v243 = CFGetTypeID(v241);
            if (v243 != CFDictionaryGetTypeID()) {
              break;
            }
            LODWORD(buf.value) = 0;
            v793[0] = 0;
            v792[0] = 0;
            v791[0] = 0;
            v742[1] = 0;
            if (H16ISPGetRectParamsFromDict(v242, &buf, v793, v792, v791, &v742[1], 1u)) {
              break;
            }
            *(_DWORD *)(v240 - mach_timebase_info(this + 3) = v239;
            *(v240 - 1) = buf.value;
            *CFNumberRef v240 = v793[0];
            v240[1] = v792[0];
            v240[2] = v791[0];
            unint64_t v234 = v239 + 1;
            unsigned int v244 = CFArrayGetCount(v237);
            if (v239 <= 0xE)
            {
              v240 += 6;
              ++v239;
              if (v234 < v244) {
                continue;
              }
            }
            goto LABEL_698;
          }
          LOWORD(v234) = v239;
        }
        else
        {
LABEL_579:
          LOWORD(v234) = 0;
        }
LABEL_698:
        LODWORD(buf.value) = 0;
        CFNumberRef v407 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v691, (const void *)*MEMORY[0x263F2DAC8]);
        if (v407)
        {
          CFNumberRef v408 = v407;
          CFTypeID v409 = CFGetTypeID(v407);
          if (v409 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v408, kCFNumberIntType, &buf);
            __int16 v296 = buf.value;
            if (!WORD1(buf.value)) {
              goto LABEL_703;
            }
LABEL_144:
            BOOL v11 = v660;
            goto LABEL_372;
          }
        }
        __int16 v296 = 0;
LABEL_703:
        v793[0] = 0;
        CFNumberRef v410 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v691, (const void *)*MEMORY[0x263F2DED8]);
        CFNumberRef v295 = v410;
        if (v410)
        {
          CFTypeID v411 = CFGetTypeID(v410);
          if (v411 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v295, kCFNumberIntType, v793);
            LODWORD(v295) = v793[0];
          }
          else
          {
            LODWORD(v295) = 0;
          }
        }
LABEL_519:
        unsigned int v297 = v745;
        if (v745)
        {
          int v298 = v750;
          uint64_t v299 = v745;
          do
          {
            uint64_t v300 = *v298++;
            *(_DWORD *)(v300 + 76) += v209;
            --v299;
          }
          while (v299);
        }
        if (*(void *)(v6 + 3888))
        {
          int v301 = v297 > 1;
          bzero(&buf, 0x164uLL);
          if (v667 <= 0) {
            __int16 v302 = 583;
          }
          else {
            __int16 v302 = 591;
          }
          WORD2(buf.value) = v302;
          buf.timescale = *(unsigned __int16 *)(v6 + 132) | (v301 << 31) | buf.timescale & 0x7FFF0000;
          LOWORD(buf.flags) = v68;
          __int16 v767 = v234;
          *(_OWORD *)&v773[32] = v783[7];
          *(_OWORD *)&v773[16] = v783[6];
          *(_OWORD *)CFDictionaryRef v773 = v783[5];
          long long v772 = v783[4];
          *(_OWORD *)&v773[96] = v783[11];
          *(_OWORD *)&v773[80] = v783[10];
          *(_OWORD *)&v773[64] = v783[9];
          *(_OWORD *)&v773[48] = v783[8];
          long long v768 = v783[0];
          long long v769 = v783[1];
          long long v770 = v783[2];
          long long v771 = v783[3];
          LOWORD(v774) = v296;
          *(_DWORD *)&v773[112] = v295;
          WORD1(v774) = 256;
          BOOL v11 = v660;
          unint64_t v303 = 0x26B11B000;
          CGRect v304 = &_os_log_internal;
          if (v68 >= 1)
          {
            p_CMTime buf = &buf;
            uint64_t v306 = (double *)v794;
            uint64_t v307 = (double *)__b;
            do
            {
              HIWORD(p_buf->flags) = vcvtd_n_s64_f64(*v307, 8uLL);
              __int16 v308 = v675;
              if ((v666 & 1) == 0) {
                __int16 v308 = vcvtd_n_s64_f64(*v306, 8uLL);
              }
              LOWORD(p_buf[13].value) = v308;
              p_CMTime buf = (CMTime *)((char *)p_buf + 2);
              ++v306;
              ++v307;
              --v68;
            }
            while (v68);
          }
          if (v736)
          {
            BYTE4(v774) = 1;
            *(_WORD *)&v775[6] = v736;
            *(void *)&v775[12] = v671;
            *(_WORD *)&v775[4] = v672;
            if (v671) {
              __int16 v309 = 1;
            }
            else {
              __int16 v309 = 2;
            }
            *(_WORD *)&v775[8] = v309;
          }
          int v310 = LaunchStillImageCapture(v740, v744, (unsigned __int8 *)&buf, 0x164u);
        }
        else
        {
          bzero(&buf, 0x138uLL);
          if (v667 <= 0) {
            __int16 v311 = 546;
          }
          else {
            __int16 v311 = 588;
          }
          WORD2(buf.value) = v311;
          buf.timescale = buf.timescale & 0x7FFF0000 | *(unsigned __int16 *)(v6 + 132);
          LOWORD(buf.flags) = v68;
          __int16 v767 = v234;
          *(_OWORD *)&v773[32] = v783[7];
          *(_OWORD *)&v773[16] = v783[6];
          *(_OWORD *)CFDictionaryRef v773 = v783[5];
          long long v772 = v783[4];
          *(_OWORD *)&v773[96] = v783[11];
          *(_OWORD *)&v773[80] = v783[10];
          *(_OWORD *)&v773[64] = v783[9];
          *(_OWORD *)&v773[48] = v783[8];
          long long v768 = v783[0];
          long long v769 = v783[1];
          long long v770 = v783[2];
          long long v771 = v783[3];
          LOWORD(v774) = v296;
          *(_DWORD *)&v773[112] = v295;
          WORD1(v774) = 256;
          if (v68 >= 1)
          {
            long long v312 = (_WORD *)&buf.flags + 1;
            int v313 = (double *)__b;
            do
            {
              double v314 = *v313++;
              *v312++ = vcvtd_n_s64_f64(v314, 8uLL);
              --v68;
            }
            while (v68);
          }
          if (v736)
          {
            BYTE4(v774) = 1;
            *(_WORD *)&v775[6] = v736;
            *(void *)&v775[12] = v671;
            *(_WORD *)&v775[4] = v672;
            if (v671) {
              __int16 v315 = 1;
            }
            else {
              __int16 v315 = 2;
            }
            *(_WORD *)&v775[8] = v315;
          }
          int v310 = LaunchStillImageCapture(v740, v744, (unsigned __int8 *)&buf, 0x138u);
          BOOL v11 = v660;
          unint64_t v303 = 0x26B11B000uLL;
          CGRect v304 = &_os_log_internal;
        }
        uint64_t v316 = *(NSObject **)(v303 + 1904);
        if (v316 == v304)
        {
          uint64_t v316 = os_log_create("com.apple.isp", "plugin");
          *(void *)(v303 + 1904) = v316;
        }
        if (os_log_type_enabled(v316, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.value) = 67109120;
          HIDWORD(buf.value) = v310;
          _os_log_impl(&dword_24680F000, v316, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating delta-EV bracketed capture operation. result=0x%08X\n\n", (uint8_t *)&buf, 8u);
        }
        if (!v310)
        {
          uint64_t v12 = 0;
          goto LABEL_6;
        }
        uint64_t v317 = v745;
        if (v745)
        {
          long long v318 = v750;
          do
          {
            uint64_t v319 = *v318++;
            *(_DWORD *)(v319 + 76) = 0;
            --v317;
          }
          while (v317);
        }
        goto LABEL_372;
      }
      LOWORD(v234) = 0;
    }
    LODWORD(v295) = 0;
    __int16 v296 = 0;
    goto LABEL_519;
  }
  if (v707)
  {
    double v77 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      double v77 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v77;
    }
    int v727 = v33;
    unsigned int v661 = v12;
    CFNumberRef v660 = v11;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.value) = 136315138;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"StillImageCaptureNow";
      _os_log_impl(&dword_24680F000, v77, OS_LOG_TYPE_DEFAULT, "%s - Initiating manual bracketed capture\n", (uint8_t *)&buf, 0xCu);
    }
    memset_pattern16(v794, &unk_2469DACE0, 0x54uLL);
    memset_pattern16(__b, &unk_2469DACF0, 0x54uLL);
    memset_pattern16(v792, &unk_2469DACE0, 0x54uLL);
    memset_pattern16(v793, &unk_2469DACF0, 0x54uLL);
    CFIndex v78 = CFArrayGetCount(v695);
    if ((unint64_t)(v78 - 22) < 0xFFFFFFFFFFFFFFEBLL) {
      goto LABEL_144;
    }
    CFIndex v171 = 0;
    *(void *)uint64_t v733 = v78;
    int v708 = v736 + v78;
    int v713 = v736 + v78 + 1;
    CFTypeRef cf2a = (CFTypeRef)*MEMORY[0x263F2D980];
    CFArrayRef theArrayb = (CFArrayRef)*MEMORY[0x263F2D950];
    do
    {
      CFDictionaryRef v172 = (const __CFDictionary *)CFArrayGetValueAtIndex(v695, v171);
      if (!v172) {
        break;
      }
      CFDictionaryRef v173 = v172;
      CFTypeID v174 = CFGetTypeID(v172);
      if (v174 != CFDictionaryGetTypeID()) {
        break;
      }
      CFNumberRef v175 = (const __CFNumber *)CFDictionaryGetValue(v173, cf2a);
      CFNumberRef v176 = (const __CFNumber *)CFDictionaryGetValue(v173, theArrayb);
      if (!v175) {
        break;
      }
      CFNumberRef v177 = v176;
      if (!v176) {
        break;
      }
      CFNumberGetValue(v175, kCFNumberSInt32Type, (char *)__b + 4 * v171);
      CFNumberGetValue(v177, kCFNumberSInt32Type, &v794[v171]);
      uint64_t v178 = v745;
      if (v745)
      {
        int v179 = *((_DWORD *)__b + v171);
        unsigned int v180 = v746;
        do
        {
          *v180++ += v179;
          --v178;
        }
        while (v178);
      }
      CFIndex v171 = (v171 + 1);
    }
    while (v171 < *(_DWORD *)v733);
    if (*(void *)(v6 + 3888))
    {
      CFArrayRef v181 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2D9B8]);
      CFArrayRef v182 = v181;
      if (v181 && (CFTypeID v183 = CFGetTypeID(v181), v183 == CFArrayGetTypeID()))
      {
        if (CFArrayGetCount(v182) != *(void *)v733) {
          goto LABEL_144;
        }
        int v184 = 1;
      }
      else
      {
        int v184 = 0;
      }
      CFIndex v245 = 0;
      unsigned int v246 = 1;
      do
      {
        if (v184)
        {
          CFDictionaryRef v247 = (const __CFDictionary *)CFArrayGetValueAtIndex(v182, v245);
          if (!v247) {
            break;
          }
          CFDictionaryRef v248 = v247;
          CFTypeID v249 = CFGetTypeID(v247);
          if (v249 != CFDictionaryGetTypeID()) {
            break;
          }
          CFNumberRef v250 = (const __CFNumber *)CFDictionaryGetValue(v248, cf2a);
          CFNumberRef v251 = (const __CFNumber *)CFDictionaryGetValue(v248, theArrayb);
          if (!v250) {
            break;
          }
          CFNumberRef v252 = v251;
          if (!v251) {
            break;
          }
          CFNumberGetValue(v250, kCFNumberSInt32Type, &v793[v245]);
          CFNumberGetValue(v252, kCFNumberSInt32Type, &v792[v245]);
        }
        else
        {
          v793[v245] = *((_DWORD *)__b + v245);
          v792[v245] = v794[v245];
        }
        CFIndex v245 = v246;
        BOOL v154 = *(void *)v733 > (unint64_t)v246++;
      }
      while (v154);
    }
    if (v676 == -1) {
      int v253 = v708;
    }
    else {
      int v253 = 0;
    }
    if (HIDWORD(v676) == -1) {
      int v254 = v708;
    }
    else {
      int v254 = 0;
    }
    __int16 v255 = v683;
    int v256 = v713;
    if (v745)
    {
      uint64_t v257 = 0;
      if (HIDWORD(v678)) {
        int v258 = v713;
      }
      else {
        int v258 = 0;
      }
      while (1)
      {
        uint64_t v259 = v750[v257];
        *(unsigned char *)(v259 + 552) = v700;
        if (AllocateAndSendOneShotBuffers(v259, v713, v258, v253, v254, 0)) {
          break;
        }
        if (++v257 >= (unint64_t)v745) {
          goto LABEL_450;
        }
      }
      uint64_t v12 = 4294954610;
      goto LABEL_6;
    }
LABEL_450:
    if (v683 == -1)
    {
      if (*(void *)(v6 + 3888)) {
        __int16 v255 = 7;
      }
      else {
        __int16 v255 = 2;
      }
    }
    uint64_t v12 = v661;
    if (H16ISP::H16ISPDevice::SetAEBracketingMode(*(H16ISP::H16ISPDevice **)(v740 + 24), v727, v255, v692))goto LABEL_6; {
    LOWORD(v26H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = (_WORD)v691;
    }
    if (v691)
    {
      CFTypeID v261 = CFGetTypeID(v691);
      if (v261 == CFDictionaryGetTypeID())
      {
        CFArrayRef v262 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v691, (const void *)*MEMORY[0x263F2DB20]);
        if (!v262) {
          goto LABEL_664;
        }
        CFArrayRef v263 = v262;
        CFTypeID v264 = CFGetTypeID(v262);
        if (v264 != CFArrayGetTypeID()) {
          goto LABEL_144;
        }
        if (CFArrayGetCount(v263))
        {
          unint64_t v265 = 0;
          CFMutableArrayRef v266 = (_WORD *)v783 + 3;
          while (1)
          {
            CFDictionaryRef v267 = (const __CFDictionary *)CFArrayGetValueAtIndex(v263, v265);
            if (!v267) {
              break;
            }
            CFDictionaryRef v268 = v267;
            CFTypeID v269 = CFGetTypeID(v267);
            if (v269 != CFDictionaryGetTypeID()) {
              break;
            }
            LODWORD(buf.value) = 0;
            v791[0] = 0;
            *(void *)uint64_t v742 = 0;
            unsigned int v741 = 0;
            if (H16ISPGetRectParamsFromDict(v268, &buf, v791, &v742[1], v742, &v741, 1u)) {
              break;
            }
            *(_DWORD *)(v266 - mach_timebase_info(this + 3) = v265;
            *(v266 - 1) = buf.value;
            *CFMutableArrayRef v266 = v791[0];
            v266[1] = v742[1];
            v266[2] = v742[0];
            unint64_t v260 = v265 + 1;
            unsigned int v270 = CFArrayGetCount(v263);
            if (v265 <= 0xE)
            {
              v266 += 6;
              ++v265;
              if (v260 < v270) {
                continue;
              }
            }
            goto LABEL_780;
          }
          LOWORD(v26H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v265;
        }
        else
        {
LABEL_664:
          LOWORD(v26H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
        }
LABEL_780:
        unint64_t v328 = *(void *)v733;
        int v256 = v713;
LABEL_781:
        unsigned int v447 = v745;
        if (v745)
        {
          int v448 = v750;
          uint64_t v449 = v745;
          do
          {
            uint64_t v450 = *v448++;
            *(_DWORD *)(v450 + 76) += v256;
            --v449;
          }
          while (v449);
        }
        if (*(void *)(v6 + 3888))
        {
          int v451 = v447 > 1;
          bzero(&buf, 0x204uLL);
          uint64_t v452 = 0;
          if (v667 <= 0) {
            __int16 v453 = 582;
          }
          else {
            __int16 v453 = 590;
          }
          WORD2(buf.value) = v453;
          buf.timescale = buf.timescale & 0x7FFF0000 | (v451 << 31) | *(unsigned __int16 *)(v6 + 132);
          LOWORD(buf.flags) = v328;
          *(_WORD *)&v773[2] = v260;
          *(_OWORD *)&v773[36] = v783[2];
          *(_OWORD *)&v773[52] = v783[3];
          *(_OWORD *)&v773[4] = v783[0];
          *(_OWORD *)&v773[20] = v783[1];
          *(_OWORD *)&v773[100] = v783[6];
          long long v774 = v783[7];
          *(_OWORD *)&v773[68] = v783[4];
          *(_OWORD *)&v773[84] = v783[5];
          long long v776 = v783[10];
          long long v777 = v783[11];
          *(_OWORD *)CFDictionaryRef v775 = v783[8];
          *(_OWORD *)&v775[16] = v783[9];
          do
          {
            unsigned int v454 = (char *)&buf + 4 * v452;
            *((_DWORD *)v454 + 4) = *((_DWORD *)__b + v452);
            uint64_t v455 = (char *)&buf + 2 * v452;
            *((_WORD *)v455 + 5H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = v794[v452];
            *((_DWORD *)v454 + 97) = v793[v452];
            *((_WORD *)v455 + 236) = v792[v452++];
          }
          while (v328 > v452);
          if (v736)
          {
            char v778 = 1;
            __int16 v780 = v736;
            uint64_t v782 = v671;
            __int16 v779 = v672;
            if (v671) {
              __int16 v456 = 1;
            }
            else {
              __int16 v456 = 2;
            }
            __int16 v781 = v456;
          }
          uint64_t v457 = v740;
          unsigned int v458 = 516;
        }
        else
        {
          bzero(&buf, 0x184uLL);
          uint64_t v459 = 0;
          if (v667 <= 0) {
            __int16 v460 = 563;
          }
          else {
            __int16 v460 = 587;
          }
          WORD2(buf.value) = v460;
          buf.timescale = *(unsigned __int16 *)(v6 + 132) | buf.timescale & 0x7FFF0000;
          LOWORD(buf.flags) = v328;
          *(_WORD *)&v773[2] = v260;
          *(_OWORD *)&v773[36] = v783[2];
          *(_OWORD *)&v773[52] = v783[3];
          *(_OWORD *)&v773[4] = v783[0];
          *(_OWORD *)&v773[20] = v783[1];
          *(_OWORD *)&v773[100] = v783[6];
          long long v774 = v783[7];
          *(_OWORD *)&v773[68] = v783[4];
          *(_OWORD *)&v773[84] = v783[5];
          long long v776 = v783[10];
          long long v777 = v783[11];
          *(_OWORD *)CFDictionaryRef v775 = v783[8];
          *(_OWORD *)&v775[16] = v783[9];
          do
          {
            *((_DWORD *)&buf.epoch + v459) = *((_DWORD *)__b + v459);
            *((_WORD *)&v770 + v459 + 4) = v794[v459];
            ++v459;
          }
          while (v328 > v459);
          if (v736)
          {
            char v778 = 1;
            __int16 v780 = v736;
            uint64_t v782 = v671;
            __int16 v779 = v672;
            if (v671) {
              __int16 v461 = 1;
            }
            else {
              __int16 v461 = 2;
            }
            __int16 v781 = v461;
          }
          uint64_t v457 = v740;
          unsigned int v458 = 388;
        }
        int v462 = LaunchStillImageCapture(v457, v744, (unsigned __int8 *)&buf, v458);
        CGRect v463 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CGRect v463 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v463;
        }
        if (os_log_type_enabled(v463, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.value) = 67109120;
          HIDWORD(buf.value) = v462;
          _os_log_impl(&dword_24680F000, v463, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating manual bracketed capture operation. result=0x%08X\n\n", (uint8_t *)&buf, 8u);
        }
        if (v462)
        {
          uint64_t v464 = v745;
          if (v745)
          {
            CGRect v465 = v750;
            do
            {
              uint64_t v466 = *v465++;
              *(_DWORD *)(v466 + 76) = 0;
              --v464;
            }
            while (v464);
          }
          goto LABEL_144;
        }
LABEL_816:
        uint64_t v12 = 0;
        goto LABEL_146;
      }
      LOWORD(v26H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
    }
    unint64_t v328 = *(void *)v733;
    goto LABEL_781;
  }
  if (v704)
  {
    unsigned int v79 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      unsigned int v79 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v79;
    }
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.value) = 136315138;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"StillImageCaptureNow";
      _os_log_impl(&dword_24680F000, v79, OS_LOG_TYPE_DEFAULT, "%s - Initiating OIS bracketed capture\n", (uint8_t *)&buf, 0xCu);
    }
    double v80 = (const void *)*MEMORY[0x263F2D750];
    CFArrayRef v81 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F2D750]);
    if (!v81) {
      goto LABEL_6;
    }
    CFArrayRef v82 = v81;
    unsigned int v661 = v12;
    CFIndex v83 = CFArrayGetCount(v81);
    if (v83 > 21) {
      goto LABEL_372;
    }
    uint64_t v84 = v83;
    if (!v83) {
      goto LABEL_372;
    }
    CFNumberRef v85 = v80;
    CFNumberRef v660 = v11;
    int v753 = 0;
    memset(__b, 0, sizeof(__b));
    memset(v794, 0, 84);
    if (v83 >= 1)
    {
      CFIndex v86 = 0;
      unint64_t v87 = __b;
      do
      {
        CFNumberRef v88 = (const __CFNumber *)CFArrayGetValueAtIndex(v82, v86);
        CFNumberGetValue(v88, kCFNumberSInt32Type, v87);
        ++v86;
        unint64_t v87 = (void *)((char *)v87 + 4);
      }
      while (v84 != v86);
    }
    unsigned int v89 = v736;
    if (!*(void *)(v6 + 3888)) {
      goto LABEL_588;
    }
    CFDictionaryRef v90 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2DA08]);
    CFDictionaryRef v91 = v90;
    if (v90)
    {
      CFTypeID v92 = CFGetTypeID(v90);
      if (v92 == CFDictionaryGetTypeID())
      {
        CFDictionaryRef v93 = (const __CFDictionary *)CFDictionaryGetValue(v91, v85);
        CFDictionaryRef v91 = v93;
        if (v93)
        {
          CFTypeID v94 = CFGetTypeID(v93);
          if (v94 == CFArrayGetTypeID())
          {
            if (CFArrayGetCount(v91) != v84) {
              goto LABEL_144;
            }
            int v95 = 1;
            goto LABEL_582;
          }
        }
      }
      else
      {
        CFDictionaryRef v91 = 0;
      }
    }
    int v95 = 0;
LABEL_582:
    unsigned int v89 = v736;
    if (v84 >= 1)
    {
      CFIndex v329 = 0;
      uint64_t v330 = v794;
      do
      {
        if (v95)
        {
          CFNumberRef v331 = (const __CFNumber *)CFArrayGetValueAtIndex(v91, v329);
          CFNumberGetValue(v331, kCFNumberSInt32Type, v330);
          unsigned int v89 = v736;
        }
        else
        {
          *uint64_t v330 = *((_DWORD *)__b + v329);
        }
        ++v329;
        ++v330;
      }
      while (v84 != v329);
    }
LABEL_588:
    int v332 = v89 + v84 + 1;
    if (v676 == -1) {
      int v333 = v89 + v84;
    }
    else {
      int v333 = 0;
    }
    if (HIDWORD(v676) == -1) {
      int v334 = v89 + v84;
    }
    else {
      int v334 = 0;
    }
    if (!v745)
    {
LABEL_600:
      if (cf2 | v687) {
        int v338 = v692;
      }
      else {
        int v338 = 1;
      }
      if (*(void *)(v6 + 3888)) {
        __int16 v339 = 8;
      }
      else {
        __int16 v339 = 3;
      }
      if (H16ISP::H16ISPDevice::SetAEBracketingMode(*(H16ISP::H16ISPDevice **)(v740 + 24), v33, v339, v338))goto LABEL_144; {
      if (!v691)
      }
        goto LABEL_620;
      CFTypeID v340 = CFGetTypeID(v691);
      if (v340 != CFDictionaryGetTypeID()) {
        goto LABEL_620;
      }
      CFArrayRef v341 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v691, (const void *)*MEMORY[0x263F2DB20]);
      if (!v341) {
        goto LABEL_620;
      }
      CFArrayRef v342 = v341;
      CFTypeID v343 = CFGetTypeID(v341);
      if (v343 != CFArrayGetTypeID()) {
        goto LABEL_144;
      }
      if (CFArrayGetCount(v342))
      {
        unint64_t v344 = 0;
        CFNumberRef v345 = (_WORD *)v783 + 3;
        while (1)
        {
          CFDictionaryRef v346 = (const __CFDictionary *)CFArrayGetValueAtIndex(v342, v344);
          if (!v346) {
            break;
          }
          CFDictionaryRef v347 = v346;
          CFTypeID v348 = CFGetTypeID(v346);
          if (v348 != CFDictionaryGetTypeID()) {
            break;
          }
          LODWORD(buf.value) = 0;
          v793[0] = 0;
          v792[0] = 0;
          v791[0] = 0;
          v742[1] = 0;
          if (H16ISPGetRectParamsFromDict(v347, &buf, v793, v792, v791, &v742[1], 1u)) {
            break;
          }
          *(_DWORD *)(v345 - mach_timebase_info(this + 3) = v344;
          *(v345 - 1) = buf.value;
          *CFNumberRef v345 = v793[0];
          v345[1] = v792[0];
          v345[2] = v791[0];
          unint64_t v349 = v344 + 1;
          unsigned int v350 = CFArrayGetCount(v342);
          if (v344 <= 0xE)
          {
            v345 += 6;
            ++v344;
            if (v349 < v350) {
              continue;
            }
          }
          goto LABEL_621;
        }
        LOWORD(v349) = v344;
      }
      else
      {
LABEL_620:
        LOWORD(v349) = 0;
      }
LABEL_621:
      unsigned int v351 = v745;
      if (v745)
      {
        int v352 = v750;
        uint64_t v353 = v745;
        do
        {
          uint64_t v354 = *v352++;
          *(_DWORD *)(v354 + 76) += v332;
          --v353;
        }
        while (v353);
      }
      if (*(void *)(v6 + 3888))
      {
        int v355 = v351 > 1;
        bzero(&buf, 0x164uLL);
        if (v667 <= 0) {
          __int16 v356 = 584;
        }
        else {
          __int16 v356 = 592;
        }
        WORD2(buf.value) = v356;
        buf.timescale = *(unsigned __int16 *)(v6 + 132) | (v355 << 31) | buf.timescale & 0x7FFF0000;
        LOWORD(buf.flags) = v84;
        if (v84 >= 1)
        {
          uint64_t v357 = &buf;
          uint64_t v358 = v794;
          uint64_t v359 = (int *)__b;
          do
          {
            int v360 = *v359++;
            HIWORD(v357->flags) = v360;
            LOWORD(v361) = v675;
            if ((v666 & 1) == 0) {
              int v361 = *v358;
            }
            LOWORD(v357[13].value) = v361;
            uint64_t v357 = (CMTime *)((char *)v357 + 2);
            ++v358;
            --v84;
          }
          while (v84);
        }
        __int16 v767 = v349;
        *(_OWORD *)&v773[48] = v783[8];
        *(_OWORD *)&v773[64] = v783[9];
        *(_OWORD *)&v773[80] = v783[10];
        *(_OWORD *)&v773[96] = v783[11];
        long long v772 = v783[4];
        *(_OWORD *)CFDictionaryRef v773 = v783[5];
        *(_OWORD *)&v773[16] = v783[6];
        *(_OWORD *)&v773[32] = v783[7];
        long long v768 = v783[0];
        long long v769 = v783[1];
        long long v770 = v783[2];
        long long v771 = v783[3];
        LOWORD(v774) = 0;
        *(_DWORD *)&v773[112] = 0;
        if (v736)
        {
          BYTE4(v774) = 1;
          *(_WORD *)&v775[6] = v736;
          *(void *)&v775[12] = v671;
          *(_WORD *)&v775[4] = v672;
          if (v671) {
            __int16 v362 = 1;
          }
          else {
            __int16 v362 = 2;
          }
          *(_WORD *)&v775[8] = v362;
        }
        uint64_t v363 = v740;
        unsigned int v364 = 356;
      }
      else
      {
        bzero(&buf, 0x138uLL);
        if (v667 <= 0) {
          __int16 v397 = 573;
        }
        else {
          __int16 v397 = 589;
        }
        WORD2(buf.value) = v397;
        buf.timescale = buf.timescale & 0x7FFF0000 | *(unsigned __int16 *)(v6 + 132);
        LOWORD(buf.flags) = v84;
        if (v84 >= 1)
        {
          uint64_t v398 = (_WORD *)&buf.flags + 1;
          uint64_t v399 = (int *)__b;
          do
          {
            int v400 = *v399++;
            *v398++ = v400;
            --v84;
          }
          while (v84);
        }
        __int16 v767 = v349;
        *(_OWORD *)&v773[48] = v783[8];
        *(_OWORD *)&v773[64] = v783[9];
        *(_OWORD *)&v773[80] = v783[10];
        *(_OWORD *)&v773[96] = v783[11];
        long long v772 = v783[4];
        *(_OWORD *)CFDictionaryRef v773 = v783[5];
        *(_OWORD *)&v773[16] = v783[6];
        *(_OWORD *)&v773[32] = v783[7];
        long long v768 = v783[0];
        long long v769 = v783[1];
        long long v770 = v783[2];
        long long v771 = v783[3];
        LOWORD(v774) = 0;
        *(_DWORD *)&v773[112] = 0;
        if (v736)
        {
          BYTE4(v774) = 1;
          *(_WORD *)&v775[6] = v736;
          *(void *)&v775[12] = v671;
          *(_WORD *)&v775[4] = v672;
          if (v671) {
            __int16 v401 = 1;
          }
          else {
            __int16 v401 = 2;
          }
          *(_WORD *)&v775[8] = v401;
        }
        uint64_t v363 = v740;
        unsigned int v364 = 312;
      }
      int v402 = LaunchStillImageCapture(v363, v744, (unsigned __int8 *)&buf, v364);
      int v403 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        int v403 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v403;
      }
      if (os_log_type_enabled(v403, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.value) = 67109120;
        HIDWORD(buf.value) = v402;
        _os_log_impl(&dword_24680F000, v403, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating OIS bracketed capture operation. result=0x%08X\n\n", (uint8_t *)&buf, 8u);
      }
      if (v402)
      {
        uint64_t v404 = v745;
        if (v745)
        {
          int v405 = v750;
          do
          {
            uint64_t v406 = *v405++;
            *(_DWORD *)(v406 + 76) = 0;
            --v404;
          }
          while (v404);
        }
        goto LABEL_144;
      }
      goto LABEL_816;
    }
    uint64_t v335 = 0;
    if (HIDWORD(v678)) {
      int v336 = v89 + v84 + 1;
    }
    else {
      int v336 = 0;
    }
    while (1)
    {
      uint64_t v337 = v750[v335];
      *(unsigned char *)(v337 + 552) = v700;
      if (AllocateAndSendOneShotBuffers(v337, v332, v336, v333, v334, 0)) {
        break;
      }
      if (++v335 >= (unint64_t)v745) {
        goto LABEL_600;
      }
    }
LABEL_619:
    uint64_t v12 = 4294954610;
LABEL_146:
    BOOL v11 = v660;
    goto LABEL_6;
  }
  CFNumberRef v660 = v11;
  if (v690)
  {
    uint64_t v185 = v12;
    LOWORD(v794[0]) = 0;
    LOWORD(v793[0]) = 0;
    *(void *)&v783[0] = 0;
    float v186 = CFDictionaryGetValue(cfa, @"NumDoublets");
    CFNumberRef v187 = CFDictionaryGetValue(cfa, @"Randomize");
    CFNumberRef v188 = CFDictionaryGetValue(cfa, @"PowerProfile");
    CFNumberRef v189 = CFDictionaryGetValue(cfa, @"Nonce");
    if (v186)
    {
      if (v187)
      {
        if (v188)
        {
          CFNumberRef v190 = v189;
          if (v189)
          {
            CFTypeID v191 = CFGetTypeID(v186);
            if (v191 == CFNumberGetTypeID())
            {
              CFTypeID v192 = CFGetTypeID(v187);
              if (v192 == CFBooleanGetTypeID())
              {
                CFTypeID v193 = CFGetTypeID(v188);
                if (v193 == CFNumberGetTypeID())
                {
                  CFTypeID v194 = CFGetTypeID(v190);
                  if (v194 == CFNumberGetTypeID())
                  {
                    CFNumberGetValue((CFNumberRef)v186, kCFNumberSInt16Type, v794);
                    __int16 v195 = CFEqual(v187, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
                    CFNumberGetValue((CFNumberRef)v188, kCFNumberSInt16Type, v793);
                    CFNumberGetValue((CFNumberRef)v190, kCFNumberSInt64Type, v783);
                    __int16 v196 = v794[0];
                    if (LOWORD(v794[0]))
                    {
                      uint64_t v197 = v745;
                      if (v745)
                      {
                        int v198 = 2 * LOWORD(v794[0]);
                        double v199 = v750;
                        do
                        {
                          uint64_t v200 = *v199++;
                          *(_DWORD *)(v200 + 76) = v198;
                          --v197;
                        }
                        while (v197);
                      }
                      bzero(&buf, 0x64uLL);
                      WORD2(buf.value) = 12291;
                      buf.timescale = *(_DWORD *)(v6 + 132);
                      LOWORD(buf.flags) = v196;
                      HIWORD(buf.flags) = v195;
                      LOWORD(buf.epoch) = v793[0];
                      int v201 = LaunchStillImageCapture(v740, v744, (unsigned __int8 *)&buf, 0x64u);
                      CFNumberRef v202 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
                      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
                      {
                        CFNumberRef v202 = os_log_create("com.apple.isp", "plugin");
                        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v202;
                      }
                      if (os_log_type_enabled(v202, OS_LOG_TYPE_INFO))
                      {
                        LODWORD(__b[0]) = 67109120;
                        HIDWORD(__b[0]) = v201;
                        _os_log_impl(&dword_24680F000, v202, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating Bio bracketed capture operation. result=0x%08X\n\n", (uint8_t *)__b, 8u);
                      }
                      if (!v201) {
                        goto LABEL_816;
                      }
                      uint64_t v203 = v745;
                      if (v745)
                      {
                        int v204 = v750;
                        do
                        {
                          uint64_t v205 = *v204++;
                          *(_DWORD *)(v205 + 76) = 0;
                          --v203;
                        }
                        while (v203);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_415;
  }
  if (HIDWORD(v688))
  {
    uint64_t v185 = v12;
    LOWORD(__b[0]) = 0;
    CFNumberRef v219 = CFDictionaryGetValue(v698, @"UseDoublets");
    CFNumberRef v220 = CFDictionaryGetValue(v698, @"Pattern");
    if (v219)
    {
      CFNumberRef v221 = v220;
      if (v220)
      {
        CFTypeID v222 = CFGetTypeID(v219);
        if (v222 == CFBooleanGetTypeID())
        {
          CFTypeID v223 = CFGetTypeID(v221);
          if (v223 == CFNumberGetTypeID())
          {
            int v224 = CFEqual(v219, (CFTypeRef)*MEMORY[0x263EFFB40]);
            CFNumberGetValue((CFNumberRef)v221, kCFNumberSInt16Type, __b);
            uint64_t v225 = v745;
            if (v745)
            {
              if (v224) {
                int v226 = 2;
              }
              else {
                int v226 = 1;
              }
              CFNumberRef v227 = v750;
              do
              {
                uint64_t v228 = *v227++;
                *(_DWORD *)(v228 + 76) = v226;
                --v225;
              }
              while (v225);
            }
            bzero(&buf, 0x14uLL);
            WORD2(buf.value) = 12292;
            buf.timescale = *(_DWORD *)(v6 + 132);
            LOWORD(buf.flags) = v224 != 0;
            HIWORD(buf.flags) = __b[0];
            int v229 = LaunchStillImageCapture(v740, v744, (unsigned __int8 *)&buf, 0x14u);
            long long v230 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
            if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
            {
              long long v230 = os_log_create("com.apple.isp", "plugin");
              GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v230;
            }
            if (os_log_type_enabled(v230, OS_LOG_TYPE_INFO))
            {
              LODWORD(v783[0]) = 67109120;
              DWORD1(v783[0]) = v229;
              _os_log_impl(&dword_24680F000, v230, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating Probe-pattern bracketed capture operation. result=0x%08X\n\n", (uint8_t *)v783, 8u);
            }
            if (!v229) {
              goto LABEL_816;
            }
            uint64_t v231 = v745;
            if (v745)
            {
              CFNumberRef v232 = v750;
              do
              {
                uint64_t v233 = *v232++;
                *(_DWORD *)(v233 + 76) = 0;
                --v231;
              }
              while (v231);
            }
          }
        }
      }
    }
LABEL_415:
    BOOL v11 = v660;
    uint64_t v12 = v185;
    goto LABEL_6;
  }
  unsigned int v663 = v12;
  CFArrayRef v659 = v10;
  if (v688)
  {
    *(void *)uint64_t v734 = v6;
    unsigned int v271 = CFArrayGetCount(v689);
    bzero(v783, 0x54uLL);
    bzero(__b, 0x54uLL);
    bzero(v794, 0x54uLL);
    bzero(v793, 0x54uLL);
    bzero(v792, 0x54uLL);
    unsigned int v699 = v271;
    if (v271)
    {
      CFIndex v272 = 0;
      CFArrayRef theArrayc = (CFArrayRef)*MEMORY[0x263F2D950];
      CFTypeRef cf2b = (CFTypeRef)*MEMORY[0x263F2D980];
      CFArrayRef v709 = (CFArrayRef)*MEMORY[0x263F2CB40];
      unsigned int v714 = (void *)*MEMORY[0x263F2CB38];
      int v737 = __b;
      uint64_t v273 = v794;
      uint64_t v274 = v793;
      int v728 = v792;
      v705 = (void *)*MEMORY[0x263F2CB48];
      do
      {
        LODWORD(buf.value) = 0;
        v791[0] = 0;
        v742[1] = 0;
        CFIndex v275 = v272;
        CFDictionaryRef v276 = (const __CFDictionary *)CFArrayGetValueAtIndex(v689, v272);
        if (!v276) {
          break;
        }
        CFDictionaryRef v277 = v276;
        CFTypeID v278 = CFGetTypeID(v276);
        if (v278 != CFDictionaryGetTypeID()) {
          break;
        }
        CFNumberRef v279 = (const __CFNumber *)CFDictionaryGetValue(v277, cf2b);
        CFNumberRef v280 = (const __CFNumber *)CFDictionaryGetValue(v277, theArrayc);
        CFNumberRef v281 = (const __CFNumber *)CFDictionaryGetValue(v277, v714);
        CFNumberRef v282 = (const __CFNumber *)CFDictionaryGetValue(v277, v709);
        CFNumberRef v283 = (const __CFNumber *)CFDictionaryGetValue(v277, v705);
        CFNumberRef v284 = (const __CFNumber *)CFDictionaryGetValue(v277, @"AdditionalBlankingTime");
        CFNumberRef v285 = (const __CFNumber *)CFDictionaryGetValue(v277, @"Pattern");
        if (!v281) {
          break;
        }
        CFNumberRef v286 = v285;
        CFNumberGetValue(v281, kCFNumberSInt32Type, &buf);
        if (v279) {
          CFNumberGetValue(v279, kCFNumberSInt32Type, v737);
        }
        if (v280) {
          CFNumberGetValue(v280, kCFNumberSInt32Type, v273);
        }
        if (v282) {
          CFNumberGetValue(v282, kCFNumberSInt32Type, v791);
        }
        if (v283) {
          CFNumberGetValue(v283, kCFNumberSInt32Type, &v742[1]);
        }
        if (v284) {
          CFNumberGetValue(v284, kCFNumberSInt32Type, v274);
        }
        if (v286) {
          CFNumberGetValue(v286, kCFNumberSInt32Type, v728);
        }
        if (LODWORD(buf.value) == 2)
        {
          if (v742[1] == 1) {
            int v288 = v791[0] == 1 ? 4 : 2;
          }
          else {
            int v288 = v791[0] == 1 ? 3 : 1;
          }
          CFIndex v287 = v275;
          *((_DWORD *)v783 + v275) = v288;
        }
        else
        {
          CFIndex v287 = v275;
          *((_DWORD *)v783 + v275) = LODWORD(buf.value) == 1 ? 4096 : 0;
        }
        CFIndex v272 = v287 + 1;
        int v737 = (void *)((char *)v737 + 4);
        ++v273;
        ++v274;
        ++v728;
      }
      while (v699 != v272);
    }
    if (v676 == -1) {
      int v289 = v699;
    }
    else {
      int v289 = 0;
    }
    if (HIDWORD(v676) == -1) {
      int v290 = v699;
    }
    else {
      int v290 = 0;
    }
    if (!v745)
    {
      unsigned int v294 = 0;
LABEL_640:
      bzero(&buf, 0x138uLL);
      WORD2(buf.value) = 12290;
      buf.timescale = buf.timescale & 0x7FFF0000 | *(unsigned __int16 *)(*(void *)v734 + 132) | ((*(void *)(*(void *)v734 + 3888) != 0) << 31);
      LOWORD(buf.flags) = v699;
      if (v699)
      {
        uint64_t v365 = v699;
        unsigned int v366 = &v773[2];
        long long v367 = &v773[44];
        double v368 = (int *)v783;
        double v369 = (int *)__b;
        int v370 = v794;
        CGRect v371 = v793;
        unsigned int v372 = v792;
        do
        {
          int v373 = *v368++;
          *unsigned int v366 = v373;
          int v374 = *v369++;
          *(v367 - 42) = v374;
          int v375 = *v370++;
          *(v366 - 21) = v375;
          int v376 = *v371++;
          *v367++ = v376;
          int v377 = *v372++;
          v366[63] = v377;
          ++v366;
          --v365;
        }
        while (v365);
      }
      if (v294)
      {
        uint64_t v378 = v294;
        char v379 = v750;
        do
        {
          uint64_t v380 = *v379++;
          *(_DWORD *)(v380 + 76) += v699;
          --v378;
        }
        while (v378);
      }
      int v381 = LaunchStillImageCapture(v740, v744, (unsigned __int8 *)&buf, 0x138u);
      uint64_t v382 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v382 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v382;
      }
      if (os_log_type_enabled(v382, OS_LOG_TYPE_INFO))
      {
        v791[0] = 67109120;
        v791[1] = v381;
        _os_log_impl(&dword_24680F000, v382, OS_LOG_TYPE_INFO, "H16ISPCaptureDevice: Initiating projector bracketed capture operation. result=0x%08X\n\n", (uint8_t *)v791, 8u);
      }
      if (!v381) {
        goto LABEL_1102;
      }
      uint64_t v383 = v745;
      if (v745)
      {
        uint64_t v384 = v750;
        do
        {
          uint64_t v385 = *v384++;
          *(_DWORD *)(v385 + 76) = 0;
          --v383;
        }
        while (v383);
      }
      goto LABEL_1188;
    }
    unint64_t v291 = 0;
    if (HIDWORD(v678)) {
      int v292 = v699;
    }
    else {
      int v292 = 0;
    }
    while (1)
    {
      uint64_t v293 = v750[v291];
      *(unsigned char *)(v293 + 552) = v700;
      if (AllocateAndSendOneShotBuffers(v293, v699, v292, v289, v290, 0)) {
        goto LABEL_909;
      }
      ++v291;
      unsigned int v294 = v745;
      if (v291 >= v745) {
        goto LABEL_640;
      }
    }
  }
  int v729 = v33;
  if (!v22)
  {
    if (!v696)
    {
      if (*(unsigned char *)(v6 + 1680))
      {
        ++*(_DWORD *)(v6 + 76);
        if (H16ISP::H16ISPDevice::CaptureNow(*(H16ISP::H16ISPDevice **)(v740 + 24), *(_DWORD *)(v6 + 132), 0))
        {
          *(_DWORD *)(v6 + 76) = 0;
          goto LABEL_1188;
        }
        CFNumberRef v504 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v504 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v504;
        }
        if (!os_log_type_enabled(v504, OS_LOG_TYPE_INFO)) {
          goto LABEL_1102;
        }
        buf.CFNumberRef value = 67109120;
        v505 = "H16ISPCaptureDevice: Initiating context-switch capture operation. result=0x%08X\n\n";
      }
      else
      {
        uint64_t v496 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          uint64_t v496 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v496;
        }
        if (os_log_type_enabled(v496, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.value) = 136315138;
          *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"StillImageCaptureNow";
          _os_log_impl(&dword_24680F000, v496, OS_LOG_TYPE_DEFAULT, "%s - Initiating time machine capture\n", (uint8_t *)&buf, 0xCu);
        }
        if (v736 <= 1) {
          __int16 v497 = 1;
        }
        else {
          __int16 v497 = v736;
        }
        if (v736) {
          int v498 = v670;
        }
        else {
          int v498 = 1;
        }
        uint64_t v499 = LOBYTE(__src[3]);
        LODWORD(v50H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = LOBYTE(__src[3]);
        if (v676 == -1)
        {
          if (LOBYTE(__src[3]))
          {
            v540 = (char *)&__src[14] + 2;
            do
            {
              unsigned char *v540 = 1;
              v540 += 64;
              --v499;
            }
            while (v499);
          }
          int v501 = v498;
        }
        else
        {
          int v501 = 0;
          if (LOBYTE(__src[3]))
          {
            CFDictionaryRef v502 = (unsigned __int8 *)&__src[14] + 2;
            do
            {
              int v503 = *v502;
              v502 += 64;
              v501 += v503;
              --v499;
            }
            while (v499);
          }
        }
        if (HIDWORD(v676) == -1)
        {
          if (v500)
          {
            uint64_t v500 = v500;
            uint64_t v544 = (char *)&__src[14] + 3;
            do
            {
              *uint64_t v544 = 1;
              v544 += 64;
              --v500;
            }
            while (v500);
          }
          int v541 = v498;
        }
        else
        {
          int v541 = 0;
          if (v500)
          {
            uint64_t v500 = v500;
            uint64_t v542 = (unsigned __int8 *)&__src[14] + 3;
            do
            {
              int v543 = *v542;
              v542 += 64;
              v541 += v543;
              --v500;
            }
            while (v500);
          }
        }
        if (!*(unsigned char *)(v6 + 674) || !*(unsigned char *)(v6 + 1280) && !*(unsigned char *)(v6 + 1480) && !*(unsigned char *)(v6 + 2280)) {
          goto LABEL_1188;
        }
        if (v745)
        {
          uint64_t v545 = 0;
          if (HIDWORD(v678)) {
            int v546 = v498;
          }
          else {
            int v546 = 0;
          }
          while (1)
          {
            uint64_t v547 = LOBYTE(__src[3]);
            if (LOBYTE(__src[3]))
            {
              int v548 = 0;
              uint64_t v549 = (char *)&__src[17] + 1;
              do
              {
                char v550 = *v549;
                v549 += 64;
                if ((v550 & 0xFE) == 2) {
                  ++v548;
                }
                --v547;
              }
              while (v547);
            }
            else
            {
              int v548 = 0;
            }
            uint64_t v551 = v750[v545];
            if (*(unsigned char *)(v551 + 3784)) {
              int v548 = 0;
            }
            if (AllocateAndSendOneShotBuffers(v551, v498 - v548, v546, v501, v541, 0)) {
              break;
            }
            if (++v545 >= (unint64_t)v745) {
              goto LABEL_972;
            }
          }
LABEL_909:
          uint64_t v12 = 4294954610;
          goto LABEL_1103;
        }
LABEL_972:
        if (H16ISP::H16ISPDevice::SetAEBracketingMode(*(H16ISP::H16ISPDevice **)(v740 + 24), v33, v683, 4))goto LABEL_1188; {
        uint64_t v552 = v745;
        }
        if (v745)
        {
          uint64_t v553 = v750;
          do
          {
            uint64_t v554 = *v553++;
            *(_DWORD *)(v554 + 76) += v498;
            --v552;
          }
          while (v552);
        }
        __src[2] = *(_DWORD *)(v6 + 132);
        if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v740 + 24), (unsigned __int8 *)__src, 0x79Cu, 0, 0xFFFFFFFF))goto LABEL_1188; {
        if (!LOBYTE(__src[3]) && (*(unsigned char *)(v6 + 1280) || *(unsigned char *)(v6 + 1480)) && *(unsigned char *)(v6 + 2280))
        }
          __int16 v672 = *(unsigned char *)(v6 + 3784) == 0;
        LaunchStillImageCapture(v740, v744, 0, 0);
        int v555 = H16ISP::H16ISPDevice::TimeMachineCapture(*(H16ISP::H16ISPDevice **)(v740 + 24), v33, v497, v672, v671, v669, &v797);
        if (v555)
        {
          int v556 = v555;
          if (v745)
          {
            for (unint64_t i = 0; i < v745; ++i)
            {
              uint64_t v558 = v750[i];
              *(_DWORD *)(v558 + 76) = 0;
              dispatch_source_set_timer(*(dispatch_source_t *)(v558 + 3776), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
            }
          }
          if (v556 == -536870186) {
            uint64_t v12 = v663;
          }
          else {
            uint64_t v12 = 4294954608;
          }
          goto LABEL_1103;
        }
        CFNumberRef v504 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          CFNumberRef v504 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v504;
        }
        if (!os_log_type_enabled(v504, OS_LOG_TYPE_INFO)) {
          goto LABEL_1102;
        }
        buf.CFNumberRef value = 67109120;
        v505 = "H16ISPCaptureDevice: Initiating time-machine capture operation. result=0x%08X\n\n";
      }
      v506 = (uint8_t *)&buf;
LABEL_1101:
      _os_log_impl(&dword_24680F000, v504, OS_LOG_TYPE_INFO, v505, v506, 8u);
      goto LABEL_1102;
    }
    int v386 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v386 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v386;
    }
    BOOL v387 = os_log_type_enabled(v386, OS_LOG_TYPE_DEFAULT);
    if (v387)
    {
      LODWORD(buf.value) = 136315138;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"StillImageCaptureNow";
      _os_log_impl(&dword_24680F000, v386, OS_LOG_TYPE_DEFAULT, "%s - Initiating flash capture\n", (uint8_t *)&buf, 0xCu);
    }
    BOOL ExternalStrobeAttached = H16ISP::getExternalStrobeAttached((H16ISP *)v387);
    ConfigureExternalStrobeParameters(v740, *(_DWORD *)(v6 + 132), ExternalStrobeAttached);
    if (v7)
    {
      CFTypeID v390 = CFGetTypeID(v7);
      TypeIOSurfaceID ID = CFDictionaryGetTypeID();
      if (v390 == TypeID)
      {
        uint64_t v391 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2D868]);
        if (v391) {
          __int16 v738 = CFEqual(v391, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
        }
        else {
          __int16 v738 = 0;
        }
        v507 = CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3D0]);
        if (v507) {
          BOOL v508 = CFEqual(v507, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
        }
        else {
          BOOL v508 = 0;
        }
        TypeIOSurfaceID ID = (CFTypeID)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E3D8]);
        if (TypeID)
        {
          TypeIOSurfaceID ID = CFEqual((CFTypeRef)TypeID, (CFTypeRef)*MEMORY[0x263EFFB40]);
          BOOL v509 = TypeID != 0;
        }
        else
        {
          BOOL v509 = 0;
        }
        LODWORD(v7) = v508 && v509;
        if ((!v508 || !v509) && v508)
        {
          if (*(void *)(v6 + 3888)) {
            LODWORD(v7) = 2;
          }
          else {
            LODWORD(v7) = 1;
          }
        }
      }
      else
      {
        __int16 v738 = 0;
        LODWORD(v7) = 0;
      }
    }
    else
    {
      __int16 v738 = 0;
    }
    if (v745)
    {
      for (unint64_t j = 0; j < v745; ++j)
      {
        uint64_t v511 = LOBYTE(__src[3]);
        if (LOBYTE(__src[3]))
        {
          LODWORD(v512) = 0;
          v513 = (char *)&__src[17] + 1;
          do
          {
            char v514 = *v513;
            v513 += 64;
            if ((v514 & 0xFE) == 2) {
              LODWORD(v512) = v512 + 1;
            }
            --v511;
          }
          while (v511);
        }
        else
        {
          LODWORD(v512) = 0;
        }
        uint64_t v515 = v750[j];
        int v516 = *(unsigned __int8 *)(v515 + 3784);
        int v517 = 1;
        *((unsigned char *)v794 + j) = 1;
        if (v7 == 1 || v7 == 2 && *(unsigned char *)(v515 + 3896))
        {
          int v517 = 2;
          *((unsigned char *)v794 + j) = 2;
        }
        uint64_t v512 = v512;
        if (v516) {
          uint64_t v512 = 0;
        }
        if (HIDWORD(v678)) {
          int v518 = v517;
        }
        else {
          int v518 = 0;
        }
        TypeIOSurfaceID ID = AllocateAndSendOneShotBuffers(v515 - 57712 * v512, v517, v518, v676 == -1, HIDWORD(v676) == -1, 0);
      }
      if (TypeID) {
        goto LABEL_909;
      }
    }
    unsigned int v519 = *(_DWORD *)(v6 + 132);
    if (*(_DWORD *)(v685 + 96 * v519 + 24))
    {
      if (!*(void *)(v6 + 3712) && !ExternalStrobeAttached)
      {
        TypeIOSurfaceID ID = (CFTypeID)H16ISPDisplayStrobePrepare(*(unsigned __int8 *)(v685 + 626));
        *(void *)(v6 + 3712) = TypeID;
        unsigned int v519 = *(_DWORD *)(v6 + 132);
      }
    }
    int v521 = *(_DWORD *)(v685 + 96 * v519 + 16);
    if (v521 == 1919246706 || v521 == 1919251564 || v521 == 1919251319)
    {
      LODWORD(buf.value) = 0;
      TypeIOSurfaceID ID = H16ISP::H16ISPDevice::ISP_PPMAdmissionCheck(*(void *)(v740 + 24), 1u, 0, 0x10000u, &buf);
      int v524 = buf.value;
      if (LODWORD(buf.value) >= 0x10000) {
        int v524 = 0x10000;
      }
      if (TypeID) {
        int CameraStrobeMaxLoad = -1;
      }
      else {
        int CameraStrobeMaxLoad = v524;
      }
    }
    else
    {
      int CameraStrobeMaxLoad = -1;
    }
    if (*(void *)(v6 + 3712)) {
      char v526 = ExternalStrobeAttached;
    }
    else {
      char v526 = 1;
    }
    if (v526)
    {
LABEL_1074:
      if (CameraStrobeMaxLoad == -1) {
        int CameraStrobeMaxLoad = H16ISP::getCameraStrobeMaxLoad((H16ISP *)TypeID);
      }
      bzero(v783, 0x30uLL);
      WORD2(v783[0]) = 540;
      int v609 = DWORD2(v783[0]) & 0x7FFF0000 | *(unsigned __int16 *)(v6 + 132);
      uint64_t v610 = v745;
      WORD6(v783[0]) = v738;
      *(void *)((char *)v783 + 14) = 0;
      *(void *)((char *)&v783[1] + 4) = 0;
      WORD6(v783[1]) = -1;
      DWORD2(v783[0]) = v609 | ((v745 > 1uLL) << 31);
      *(void *)&v783[2] = __PAIR64__(CameraStrobeMaxLoad, v692);
      HIDWORD(v783[2]) = v7;
      if (v745)
      {
        CFNumberRef v611 = v750;
        int v612 = v794;
        do
        {
          int v614 = *(unsigned __int8 *)v612;
          int v612 = (int *)((char *)v612 + 1);
          int v613 = v614;
          uint64_t v615 = *v611++;
          *(_DWORD *)(v615 + 76) += v613;
          --v610;
        }
        while (v610);
      }
      LODWORD(buf.value) = 101;
      LOBYTE(buf.timescale) = 1;
      if (LaunchStillImageCapture(v740, v744, (unsigned __int8 *)v783, 0x30u))
      {
        uint64_t v616 = v745;
        if (v745)
        {
          CFDataRef v617 = v750;
          do
          {
            uint64_t v618 = *v617++;
            *(_DWORD *)(v618 + 76) = 0;
            --v616;
          }
          while (v616);
        }
        if (*(void *)(v6 + 3712)) {
          DisableDisplayStrobeOverlay(v6);
        }
        LOBYTE(buf.timescale) = 0;
        uint64_t v619 = *(void *)(v740 + 200);
        if (v619)
        {
          H16ISP::H16ISPServicesRemote::SetProperty(v619, (xpc_object_t *)&buf);
        }
        else
        {
          v621 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
          if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
          {
            v621 = os_log_create("com.apple.isp", "plugin");
            GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v621;
          }
          if (os_log_type_enabled(v621, OS_LOG_TYPE_INFO))
          {
            LODWORD(__b[0]) = 136315138;
            *(void *)((char *)__b + 4) = "StillImageCaptureNow";
            _os_log_impl(&dword_24680F000, v621, OS_LOG_TYPE_INFO, "%s - Could not set strobe state\n", (uint8_t *)__b, 0xCu);
          }
        }
        goto LABEL_1188;
      }
      uint64_t v620 = *(void *)(v740 + 200);
      if (v620)
      {
        H16ISP::H16ISPServicesRemote::SetProperty(v620, (xpc_object_t *)&buf);
      }
      else
      {
        v622 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          v622 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v622;
        }
        if (os_log_type_enabled(v622, OS_LOG_TYPE_INFO))
        {
          LODWORD(__b[0]) = 136315138;
          *(void *)((char *)__b + 4) = "StillImageCaptureNow";
          _os_log_impl(&dword_24680F000, v622, OS_LOG_TYPE_INFO, "%s - Could not set strobe state\n", (uint8_t *)__b, 0xCu);
        }
      }
      CFNumberRef v504 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v504 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v504;
      }
      if (!os_log_type_enabled(v504, OS_LOG_TYPE_INFO)) {
        goto LABEL_1102;
      }
      __b[0] = 67109120;
      v505 = "H16ISPCaptureDevice: Initiating shutter+strobe operation. result=0x%08X\n\n";
      v506 = (uint8_t *)__b;
      goto LABEL_1101;
    }
    if (H16ISP::H16ISPDevice::PrepareCommand(*(H16ISP::H16ISPDevice **)(v740 + 24), *(_DWORD *)(v6 + 132), 1))
    {
      uint64_t v12 = 4294954611;
      goto LABEL_1103;
    }
    H16ISPDisplayStrobeSetScreenBrightness(*(void *)(v6 + 3712), 0);
    if (dword_26B11BA3C)
    {
      double v528 = (double)HIBYTE(dword_26B11BA3C);
      double v529 = (double)BYTE2(dword_26B11BA3C);
      double v530 = (double)BYTE1(dword_26B11BA3C);
      double v531 = (double)dword_26B11BA3C;
      uint64_t v532 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        uint64_t v532 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v532;
      }
      double v533 = v528 * 0.00390625;
      double v534 = v529 * 0.00390625;
      double v535 = v530 * 0.00390625;
      double v536 = v531 * 0.00390625;
      if (!os_log_type_enabled(v532, OS_LOG_TYPE_INFO)) {
        goto LABEL_1071;
      }
      LODWORD(buf.value) = 134218752;
      *(double *)((char *)&buf.value + 4) = v533;
      LOWORD(buf.flags) = 2048;
      *(double *)((char *)&buf.flags + 2) = v534;
      HIWORD(buf.epoch) = 2048;
      *(double *)CFNumberRef v764 = v535;
      *(_WORD *)&v764[8] = 2048;
      double v765 = v531 * 0.00390625;
      uint64_t v537 = "Override Display Strobe RGBA Params R=%4.3f G=%4.3f B=%4.3f A=%4.3f\n\n";
      uint64_t v538 = v532;
      uint32_t v539 = 42;
    }
    else
    {
      LOWORD(v527) = *(_WORD *)(v6 + 3720);
      double v600 = (double)v527;
      LOWORD(v527) = *(_WORD *)(v6 + 3722);
      double v601 = (double)v527;
      LOWORD(v527) = *(_WORD *)(v6 + 3724);
      double v602 = (double)v527;
      CFNumberRef v603 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        CFNumberRef v603 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v603;
      }
      double v533 = v600 * 0.0000152587891;
      double v534 = v601 * 0.0000152587891;
      double v535 = v602 * 0.0000152587891;
      double v536 = 1.0;
      if (!os_log_type_enabled(v603, OS_LOG_TYPE_INFO)) {
        goto LABEL_1071;
      }
      int v604 = *(unsigned __int16 *)(v6 + 3720);
      int v605 = *(unsigned __int16 *)(v6 + 3722);
      int v606 = *(unsigned __int16 *)(v6 + 3724);
      LODWORD(buf.value) = 67110400;
      HIDWORD(buf.value) = v604;
      LOWORD(buf.timescale) = 2048;
      *(double *)((char *)&buf.timescale + 2) = v533;
      WORD1(buf.epoch) = 1024;
      HIDWORD(buf.epoch) = v605;
      *(_WORD *)CFNumberRef v764 = 2048;
      *(double *)&v764[2] = v534;
      LOWORD(v765) = 1024;
      *(_DWORD *)((char *)&v765 + 2) = v606;
      HIWORD(v765) = 2048;
      double v766 = v535;
      uint64_t v537 = "Current AWB RGBEstimate R=0x%04X (%4.3f) G=0x%04X (%4.3f) B=0x%04X (%4.3f)\n\n";
      uint64_t v538 = v603;
      uint32_t v539 = 50;
    }
    _os_log_impl(&dword_24680F000, v538, OS_LOG_TYPE_INFO, v537, (uint8_t *)&buf, v539);
LABEL_1071:
    *(double *)&buf.CFNumberRef value = v533;
    *(double *)&buf.timescale = v534;
    *(double *)&buf.epoch = v535;
    *(double *)CFNumberRef v764 = v536;
    H16ISPDisplayStrobeSetScreenColor(*(void *)(v6 + 3712), (uint64_t)&buf);
    LODWORD(v783[0]) = 0;
    int StrobeBrightnessRatio = H16ISPDisplayGetStrobeBrightnessRatio(*(void *)(v6 + 3712), (float *)v783);
    unsigned int v608 = vcvtd_n_u64_f64(*(float *)v783, 0x10uLL);
    if (!StrobeBrightnessRatio) {
      int CameraStrobeMaxLoad = v608;
    }
    TypeIOSurfaceID ID = usleep(0x3A98u);
    goto LABEL_1074;
  }
  *(void *)uint64_t v735 = v6;
  int v320 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
  char v321 = (const void **)MEMORY[0x263F2E398];
  if (!*(void *)(v6 + 3888))
  {
    if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
    {
      int v320 = os_log_create("com.apple.isp", "plugin");
      GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v320;
    }
    if (os_log_type_enabled(v320, OS_LOG_TYPE_DEFAULT))
    {
      CMTimeFlags v392 = *(_DWORD *)(v6 + 132);
      LODWORD(buf.value) = 136315394;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"StillImageCaptureNow";
      LOWORD(buf.flags) = 1024;
      *(CMTimeFlags *)((char *)&buf.flags + 2) = v392;
      _os_log_impl(&dword_24680F000, v320, OS_LOG_TYPE_DEFAULT, "%s - Initiating unified bracketed capture CH%d\n\n", (uint8_t *)&buf, 0x12u);
    }
    bzero(v783, 0x1214uLL);
    HIDWORD(v783[17]) = *(_DWORD *)(v6 + 132);
    LODWORD(__b[0]) = 500;
    WORD2(v783[0]) = 605;
    *((void *)&v783[0] + 1) = HIDWORD(v783[17]) | 0x1000100000000;
    __src[2] = HIDWORD(v783[17]);
    __src[485] = 17;
    uint64_t v393 = (H16ISP *)HasFlashBracket(v665);
    char theArrayd = (char)v393;
    if (!v686 || v393)
    {
      if (v393)
      {
        __src[484] = 1;
        BOOL v419 = H16ISP::getExternalStrobeAttached(v393);
        ConfigureExternalStrobeParameters(v740, *(_DWORD *)(v6 + 132), v419);
        LODWORD(buf.value) = 0;
        int v420 = H16ISP::H16ISPDevice::ISP_PPMAdmissionCheck(*(void *)(v740 + 24), 1u, 0, 0x10000u, &buf);
        int v421 = buf.value;
        if (LODWORD(buf.value) >= 0x10000) {
          int v421 = 0x10000;
        }
        if (v420) {
          int v421 = 0x10000;
        }
        DWORD2(v783[1]) = v421;
      }
    }
    else
    {
      GetPerFrameTuningParam(v686, (uint64_t)&__src[16 * (unint64_t)LOBYTE(__src[3]) + 4], (unsigned char *)v6);
      char v394 = __src[3];
      __src[16 * (unint64_t)LOBYTE(__src[3]) + 9] = 2;
      LOBYTE(__src[3]) = v394 + 1;
      uint64_t v395 = CFDictionaryGetValue(v686, (const void *)*MEMORY[0x263F2E470]);
      if (v395 && CFEqual(v395, (CFTypeRef)*MEMORY[0x263EFFB40])) {
        __src[484] = 1;
      }
      CFBooleanRef v396 = (const __CFBoolean *)CFDictionaryGetValue(v686, (const void *)*MEMORY[0x263F2E460]);
      if (v396) {
        LOBYTE(__src[486]) = CFBooleanGetValue(v396) != 0;
      }
    }
    CFNumberRef v422 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v7, *v321);
    if (v422)
    {
      CFNumberGetValue(v422, kCFNumberSInt32Type, __b);
      char v423 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
      if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
      {
        char v423 = os_log_create("com.apple.isp", "plugin");
        GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v423;
      }
      if (os_log_type_enabled(v423, OS_LOG_TYPE_ERROR)) {
        StillImageCaptureNow();
      }
      int v424 = 4;
    }
    else
    {
      int v424 = 0;
    }
    int v748 = v424;
    DWORD1(v783[1]) = __b[0];
    uint64_t v425 = (unsigned __int16)CFArrayGetCount(v665);
    if (v425)
    {
      if (!H16ISP::H16ISPFrameReceiver::HasPool(*(void **)(v6 + 136), 31)
        && AddCntxSwRawPoolToFrameReceiver(v6, v740))
      {
        unsigned int v426 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
        if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
        {
          unsigned int v426 = os_log_create("com.apple.isp", "plugin");
          GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v426;
        }
        if (os_log_type_enabled(v426, OS_LOG_TYPE_ERROR)) {
          StillImageCaptureNow();
        }
        goto LABEL_1188;
      }
      CFArrayRef v711 = (CFArrayRef)NumberOfClientRequestedHiResStillImageCaptures(v665);
      CFIndex v427 = 0;
      unsigned __int16 v428 = 0;
      do
      {
        CFDictionaryRef v429 = (const __CFDictionary *)CFArrayGetValueAtIndex(v665, v427);
        if (v429)
        {
          int v430 = (float32x2_t *)((char *)&v783[18] + 68 * v428);
          GetPerFrameBracketParams(v429, v430, (uint64_t)&__src[16 * (unint64_t)LOBYTE(__src[3]) + 4], v6);
          if (v428)
          {
            if (v430->i8[6] == 1 && !*((unsigned char *)&v783[14] + 68 * v428 + 2))
            {
              __int16 v431 = (char *)&v783[18] + 68 * --v428;
              v431[6] = 2;
              v431[5] = v430->i8[5];
              *((_WORD *)v431 + 1) = v430->i16[1];
              bzero(v430, 0x44uLL);
            }
          }
          else
          {
            unsigned __int16 v428 = 0;
          }
          char v432 = __src[3];
          __src[16 * (unint64_t)LOBYTE(__src[3]) + 9] = 1;
          uint64_t v433 = v745;
          if (v745)
          {
            int v434 = (char *)&v783[18] + 68 * v428;
            int v435 = v434[4];
            unsigned int v436 = *((_DWORD *)v434 + 3);
            if (v435 == 3) {
              unsigned int v437 = v436;
            }
            else {
              unsigned int v437 = 0;
            }
            __int16 v438 = v746;
            do
            {
              *v438++ += v437;
              unsigned int v439 = v747;
              if (v436 > v747) {
                unsigned int v439 = v436;
              }
              unsigned int v747 = v439;
              --v433;
            }
            while (v433);
          }
          else
          {
            int v435 = *((unsigned __int8 *)&v783[18] + 68 * v428 + 4);
          }
          uint64_t v6 = *(void *)v735;
          int v440 = v748;
          if (v435 == 3) {
            int v440 = 6;
          }
          int v748 = v440;
          LOBYTE(__src[3]) = v432 + 1;
          ++v428;
        }
        ++v427;
      }
      while (v427 != v425);
    }
    else
    {
      CFArrayRef v711 = (CFArrayRef)NumberOfClientRequestedHiResStillImageCaptures(v665);
      unsigned __int16 v428 = 0;
    }
    unsigned __int16 v441 = CFArrayGetCount(v665);
    HIWORD(v783[0]) = v428;
    if (v691 && GetAFWindowParam((const __CFDictionary *)v691, (uint64_t)&v783[5] + 12, &v783[1])) {
      goto LABEL_1188;
    }
    if (v684)
    {
      v441 += CFArrayGetCount(v684);
      __int16 v784 = 298;
      int v785 = v785 & 0x7FFF0000 | WORD4(v783[0]);
      __int16 v787 = v736;
      __int16 v786 = v672;
      __int16 v788 = 2;
      __int16 v789 = 1;
      long long v790 = v797;
    }
    if (H16ISP::H16ISPDevice::SetAEBracketingMode(*(H16ISP::H16ISPDevice **)(v740 + 24), v729, 15, v692)) {
      goto LABEL_1188;
    }
    uint64_t v442 = LOBYTE(__src[3]);
    if (v676 == -1)
    {
      if (LOBYTE(__src[3]))
      {
        v559 = (char *)&__src[14] + 2;
        uint64_t v560 = LOBYTE(__src[3]);
        do
        {
          unsigned char *v559 = 1;
          v559 += 64;
          --v560;
        }
        while (v560);
      }
      int v443 = v441 + 1;
    }
    else
    {
      int v443 = 0;
      if (!LOBYTE(__src[3]))
      {
        int v561 = 0;
        if (HIDWORD(v676) != -1)
        {
LABEL_1011:
          if (!v745)
          {
LABEL_1050:
            if (!*(unsigned char *)(*(void *)v735 + 1280)
              && !*(unsigned char *)(*(void *)v735 + 1480)
              && !*(unsigned char *)(*(void *)v735 + 2280)
              || *(unsigned char *)(*(void *)v735 + 3784)
              || (!v748 ? (unsigned int v599 = -1) : (unsigned int v599 = v748),
                  !H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v740 + 24), (unsigned __int8 *)__src, 0x79Cu, 0, v599)))
            {
              float v595 = (double)(v747 / 0x3E8) / 1000.0;
              if (v595 > 1.0) {
                H16ISP::H16ISPFrameReceiver::SetFrameDoneTimeoutDuration(*(H16ISP::H16ISPFrameReceiver **)(*(void *)v735 + 136), v595 + 2.0);
              }
              LODWORD(buf.value) = 101;
              LOBYTE(buf.timescale) = theArrayd;
              if (!LaunchStillImageCapture(v740, v744, (unsigned __int8 *)v783, 0x1214u))
              {
                uint64_t v656 = *(void *)(v740 + 200);
                if (!v656) {
                  goto LABEL_1102;
                }
                char v657 = theArrayd;
                goto LABEL_1181;
              }
              uint64_t v596 = v745;
              if (v745)
              {
                v597 = v750;
                do
                {
                  uint64_t v598 = *v597++;
                  *(_DWORD *)(v598 + 76) = 0;
                  --v596;
                }
                while (v596);
              }
            }
            goto LABEL_1188;
          }
          unint64_t v570 = 0;
          int v571 = v441;
          while (1)
          {
            int v572 = &v744[2 * v570];
            uint64_t v574 = *((void *)v572 + 17);
            v573 = (uint64_t *)(v572 + 34);
            *(unsigned char *)(v574 + 552) = v686 != 0;
            BOOL v730 = __src[484] == 0;
            CFArrayRef v575 = *(const __CFArray **)(v574 + 4320);
            if (v575) {
              int v739 = CFArrayGetCount(v575);
            }
            else {
              int v739 = 0;
            }
            uint64_t v576 = LOBYTE(__src[3]);
            if (LOBYTE(__src[3]))
            {
              int v577 = 0;
              CFNumberRef v578 = (char *)&__src[17] + 1;
              do
              {
                char v579 = *v578;
                v578 += 64;
                if ((v579 & 0xFE) == 2) {
                  ++v577;
                }
                --v576;
              }
              while (v576);
            }
            else
            {
              int v577 = 0;
            }
            uint64_t v580 = *v573;
            if (*(unsigned char *)(*v573 + 3784)) {
              int v577 = 0;
            }
            int cf2c = v577;
            if (v739)
            {
              Bufferuint64_t Pool = H16ISP::H16ISPFrameReceiver::getBufferPool(*(void **)(*(void *)v735 + 136), 31);
              CFIndex v582 = 0;
              while (1)
              {
                v583 = (__CVBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*v573 + 4320), v582);
                int v584 = H16ISP::H16ISPFrameReceiver::AddPreallocatedBuffer(*(void **)(*v573 + 136), 31, v583);
                if (v584) {
                  break;
                }
                if (v739 == ++v582) {
                  goto LABEL_1039;
                }
              }
              int v585 = v584;
              uint64_t v586 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                uint64_t v586 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v586;
              }
              if (os_log_type_enabled(v586, OS_LOG_TYPE_ERROR))
              {
                CMTimeFlags v591 = *(_DWORD *)(*v573 + 132);
                LODWORD(buf.value) = 136315650;
                *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"StillImageCaptureNow";
                LOWORD(buf.flags) = 1024;
                *(CMTimeFlags *)((char *)&buf.flags + 2) = v591;
                WORD1(buf.epoch) = 1024;
                HIDWORD(buf.epoch) = v585;
                _os_log_error_impl(&dword_24680F000, v586, OS_LOG_TYPE_ERROR, "%s - AddPreallocatedBuffer() CH %d returns error 0x%x\n", (uint8_t *)&buf, 0x18u);
              }
LABEL_1039:
              H16ISP::H16ISPDevice::SetBufferPoolConfiguration(*(H16ISP::H16ISPDevice **)(v740 + 24), *(_DWORD *)(*v573 + 132), 32, *(_WORD *)(BufferPool + 232), 0, 1u, (const void *)(BufferPool + 336));
            }
            else if (v711 {
                   && *(void *)(v580 + 4408)
            }
                   && *(int *)(v580 + 4448) >= 1
                   && H16ISP::H16ISPFrameReceiver::AllocateAndSendStillImageBuffers(*(void *)(v580 + 136), 31, (uint64_t)v711))
            {
              CFDictionaryRef v658 = GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog;
              if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
              {
                CFDictionaryRef v658 = os_log_create("com.apple.isp", "plugin");
                GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v658;
              }
              if (os_log_type_enabled(v658, OS_LOG_TYPE_ERROR)) {
                StillImageCaptureNow();
              }
LABEL_1187:
              unsigned int v663 = -12686;
LABEL_1188:
              BOOL v11 = v660;
              uint64_t v12 = v663;
              goto LABEL_1189;
            }
            if (HIDWORD(v678)) {
              int v587 = v571 + v730;
            }
            else {
              int v587 = 0;
            }
            int v588 = AllocateAndSendOneShotBuffers(*v573, v571 + v730 - cf2c, v587, v443, v561, v739);
            uint64_t v589 = *(const void **)(*v573 + 4320);
            if (v589)
            {
              CFRelease(v589);
              *(void *)(*v573 + 432H16ISP::H16ISPDevice::EnablePDEOutput(*((H16ISP::H16ISPDevice **)this + 10), *((_WORD *)this + 45), 0, 0) = 0;
            }
            if (v588) {
              goto LABEL_1187;
            }
            ++v570;
            uint64_t v590 = v745;
            if (v570 >= v745)
            {
              if (v745)
              {
                int v592 = v750;
                int v593 = v571 + (__src[484] == 0);
                do
                {
                  uint64_t v594 = *v592++;
                  *(_DWORD *)(v594 + 76) += v593;
                  --v590;
                }
                while (v590);
              }
              goto LABEL_1050;
            }
          }
        }
LABEL_1010:
        int v561 = v441 + 1;
        goto LABEL_1011;
      }
      int v444 = (unsigned __int8 *)&__src[14] + 2;
      uint64_t v445 = LOBYTE(__src[3]);
      do
      {
        int v446 = *v444;
        v444 += 64;
        v443 += v446;
        --v445;
      }
      while (v445);
    }
    if (HIDWORD(v676) != -1)
    {
      int v561 = 0;
      if (v442)
      {
        int v562 = (unsigned __int8 *)&__src[14] + 3;
        do
        {
          int v563 = *v562;
          v562 += 64;
          v561 += v563;
          --v442;
        }
        while (v442);
      }
      goto LABEL_1011;
    }
    if (v442)
    {
      v569 = (char *)&__src[14] + 3;
      do
      {
        unsigned char *v569 = 1;
        v569 += 64;
        --v442;
      }
      while (v442);
    }
    goto LABEL_1010;
  }
  if (GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog == &_os_log_internal)
  {
    int v320 = os_log_create("com.apple.isp", "plugin");
    GetCameraUserspaceLogStream(CameraUserspaceLoggingCategory)::_pluginLog = (uint64_t)v320;
  }
  if (os_log_type_enabled(v320, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.value) = 136315138;
    *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"StillImageCaptureNow";
    _os_log_impl(&dword_24680F000, v320, OS_LOG_TYPE_DEFAULT, "%s - Initiating dual unified bracketed capture\n", (uint8_t *)&buf, 0xCu);
  }
  bzero(__b, 0x264uLL);
  v794[0] = 500;
  WORD2(__b[0]) = 604;
  int v322 = *(_DWORD *)(v6 + 132);
  LODWORD(__b[1]) = __b[1] & 0x7FFF0000 | (unsigned __int16)v322 | ((v745 > 1) << 31);
  __src[2] = v322;
  __src[485] = 16;
  WORD2(v783[0]) = __src[1];
  CFBooleanRef v323 = (const __CFBoolean *)HasFlashBracket(v665);
  int v706 = (int)v323;
  if (v686 && !v323)
  {
    GetPerFrameTuningParam(v686, (uint64_t)&__src[16 * (unint64_t)LOBYTE(__src[3]) + 4], (unsigned char *)v6);
    char v324 = __src[3];
    __src[16 * (unint64_t)LOBYTE(__src[3]) + 9] = 2;
    LOBYTE(__src[3]) = v324 + 1;
    int v325 = CFDictionaryGetValue(v686, (const void *)*MEMORY[0x263F2E470]);
    if (v325 && CFEqual(v325, (CFTypeRef)*MEMORY[0x263EFFB40])) {
      __src[484] = 1;
    }
    CFBooleanRef v323 = (const __CFBoolean *)CFDictionaryGetValue(v686, (const void *)*MEMORY[0x263F2E460]);
    if (v323)
    {
      CFBooleanRef v323 = (const __CFBoolean *)CFBooleanGetValue(v323);
      LOBYTE(__src[486]) = v323 != 0;
    }
  }
  if (v745)
  {
    uint64_t v326 = 0;
    while (*(unsigned char *)(v750[v326] + 3896))
    {
      if (v745 == ++v326)
      {
        int v327 = 0;
        LODWORD(v326) = v745;
        goto LABEL_712;
      }
    }
    int v327 = v326;
  }
  else
  {
    LODWORD(v326) = 0;
    int v327 = 0;
  }
LABEL_712:
  if (v706)
  {
    __src[484] = 1;
    BOOL v412 = H16ISP::getExternalStrobeAttached(v323);
    ConfigureExternalStrobeParameters(v740, v326, v412);
  }
  CFNumberRef v413 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v7, *v321);
  if (v413)
  {
    CFNumberGetValue(v413, kCFNumberSInt32Type, v794);
    int v748 = 4;
  }
  LODWORD(__b[2]) = v794[0];
  unsigned __int16 v414 = CFArrayGetCount(v665);
  memcpy(v783, __src, 0x79CuLL);
  CFArrayRef v710 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E448]);
  if (v710)
  {
    if (CFArrayGetCount(v710) != v414) {
      goto LABEL_841;
    }
    CFDictionaryRef v415 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v7, (const void *)*MEMORY[0x263F2E410]);
    if (!v415 || v706)
    {
      if (v706) {
        LODWORD(v783[121]) = 1;
      }
    }
    else
    {
      CFDictionaryRef v416 = v415;
      GetPerFrameTuningParam(v415, (uint64_t)&v783[4 * (unint64_t)LOBYTE(__src[3]) - 3], (unsigned char *)v750[v327]);
      *((_DWORD *)&v783[4 * (unint64_t)LOBYTE(__src[3]) - 1] - mach_timebase_info(this + 3) = 2;
      unsigned __int16 v417 = CFDictionaryGetValue(v416, (const void *)*MEMORY[0x263F2E470]);
      if (v417 && CFEqual(v417, (CFTypeRef)*MEMORY[0x263EFFB40])) {
        LODWORD(v783[121]) = 1;
      }
      CFBooleanRef v418 = (const __CFBoolean *)CFDictionaryGetValue(v686, (const void *)*MEMORY[0x263F2E460]);
      if (v418) {
        BYTE8(v783[121]) = CFBooleanGetValue(v418) != 0;
      }
    }
  }
  CFArrayRef theArraye = (CFArrayRef)v414;
  if (v414)
  {
    CFIndex v467 = 0;
    int v468 = 0;
    if (v710) {
      char v469 = v666;
    }
    else {
      char v469 = 1;
    }
    char v470 = v666 ^ 1;
    if (!v710) {
      char v470 = 1;
    }
    char v701 = v470;
    while (1)
    {
      CFDictionaryRef v471 = (const __CFDictionary *)CFArrayGetValueAtIndex(v665, v467);
      if (!v471) {
        break;
      }
      uint64_t v472 = (unsigned __int16)v468;
      int v473 = &v754[(unsigned __int16)v468];
      GetPerFrameBracketParamForDualUB(v471, (uint64_t)v473, (uint64_t)&__src[16 * (unint64_t)LOBYTE(__src[3]) + 4], (unsigned char *)v6);
      uint64_t v474 = LOBYTE(__src[3]);
      __src[16 * (unint64_t)LOBYTE(__src[3]) + 9] = 1;
      if (v469)
      {
        char v475 = &v754[(unsigned __int16)v468 + 21];
        if (v701)
        {
          *char v475 = *v473;
          v476 = &__src[16 * v474 + 4];
          int v477 = &v783[4 * v474 + 1];
          long long v478 = v476[1];
          *int v477 = *v476;
          v477[1] = v478;
          long long v479 = v476[3];
          v477[2] = v476[2];
          v477[3] = v479;
        }
        else
        {
          *(_WORD *)char v475 = v675;
        }
      }
      else
      {
        CFDictionaryRef v480 = (const __CFDictionary *)CFArrayGetValueAtIndex(v710, v467);
        GetPerFrameBracketParamForDualUB(v480, (uint64_t)&v754[(unsigned __int16)v468 + 21], (uint64_t)&v783[4 * (unint64_t)LOBYTE(__src[3]) + 1], (unsigned char *)v750[v327]);
        LOBYTE(v474) = __src[3];
        DWORD1(v783[4 * (unint64_t)LOBYTE(__src[3]) + 2]) = 1;
        if (*((unsigned __int8 *)v473 + 6) != BYTE6(v754[(unsigned __int16)v468 + 21])) {
          break;
        }
      }
      if ((_WORD)v468)
      {
        if (*((unsigned char *)v473 + 6) == 1 && !BYTE6(v754[(unsigned __int16)v468 - 1]))
        {
          uint64_t v481 = &v754[(unsigned __int16)--v468];
          *((unsigned char *)v481 + 6) = 2;
          *((unsigned char *)v481 + 5) = *((unsigned char *)v473 + 5);
          *((_WORD *)v481 + 1) = *((_WORD *)v473 + 1);
          uint64_t v482 = &v754[(unsigned __int16)v468 + 21];
          *((unsigned char *)v482 + 6) = 2;
          uint64_t v483 = &v754[v472 + 21];
          *((unsigned char *)v482 + 5) = *((unsigned char *)v483 + 5);
          *((_WORD *)v482 + 1) = *((_WORD *)v483 + 1);
        }
      }
      else
      {
        int v468 = 0;
      }
      uint64_t v6 = *(void *)v735;
      char v484 = v474 + 1;
      LOBYTE(__src[3]) = v484;
      ++v468;
      if (theArraye == (CFArrayRef)++v467) {
        goto LABEL_843;
      }
    }
LABEL_841:
    uint64_t v12 = 4294954516;
    goto LABEL_1103;
  }
  LOWORD(v468) = 0;
  char v484 = __src[3];
LABEL_843:
  BYTE12(v783[0]) = v484;
  WORD2(__b[1]) = v468;
  unsigned __int16 v485 = CFArrayGetCount(v665);
  if (v691 && GetAFWindowParam((const __CFDictionary *)v691, (uint64_t)&__b[2] + 4, (_WORD *)&__b[1] + 3)) {
    goto LABEL_1102;
  }
  if (v684)
  {
    v485 += CFArrayGetCount(v684);
    __int16 v755 = 298;
    int v756 = v756 & 0x7FFF0000 | LOWORD(__b[1]) | ((v745 > 1) << 31);
    __int16 v758 = v736;
    __int16 v757 = v672;
    __int16 v759 = 2;
    __int16 v760 = 1;
    long long v761 = v797;
    long long v762 = v797;
  }
  *(unsigned char *)(*(void *)v735 + 552) = v686 != 0;
  if (H16ISP::H16ISPDevice::SetAEBracketingMode(*(H16ISP::H16ISPDevice **)(v740 + 24), v729, 16, v692)) {
    goto LABEL_1102;
  }
  uint64_t v486 = LOBYTE(__src[3]);
  if (v676 == -1)
  {
    if (LOBYTE(__src[3]))
    {
      v564 = (char *)&__src[14] + 2;
      uint64_t v565 = LOBYTE(__src[3]);
      do
      {
        unsigned char *v564 = 1;
        v564 += 64;
        --v565;
      }
      while (v565);
    }
    unsigned int v566 = BYTE12(v783[0]);
    if (BYTE12(v783[0]))
    {
      v567 = (char *)&v783[3] + 10;
      uint64_t v568 = BYTE12(v783[0]);
      do
      {
        unsigned char *v567 = 1;
        v567 += 64;
        --v568;
      }
      while (v568);
    }
    int v487 = v485 + 1;
    unsigned int v491 = v566;
    int v492 = v487;
  }
  else
  {
    int v487 = 0;
    if (LOBYTE(__src[3]))
    {
      float v488 = (unsigned __int8 *)&__src[14] + 2;
      uint64_t v489 = LOBYTE(__src[3]);
      do
      {
        int v490 = *v488;
        v488 += 64;
        v487 += v490;
        --v489;
      }
      while (v489);
    }
    unsigned int v491 = BYTE12(v783[0]);
    if (BYTE12(v783[0]))
    {
      int v492 = 0;
      v493 = (unsigned __int8 *)&v783[3] + 10;
      uint64_t v494 = BYTE12(v783[0]);
      do
      {
        int v495 = *v493;
        v493 += 64;
        v492 += v495;
        --v494;
      }
      while (v494);
    }
    else
    {
      int v492 = 0;
    }
  }
  if (HIDWORD(v676) == -1)
  {
    if (v486)
    {
      v630 = (char *)&__src[14] + 3;
      do
      {
        unsigned char *v630 = 1;
        v630 += 64;
        --v486;
      }
      while (v486);
    }
    if (v491)
    {
      uint64_t v631 = v491;
      v632 = (char *)&v783[3] + 11;
      do
      {
        unsigned char *v632 = 1;
        v632 += 64;
        --v631;
      }
      while (v631);
    }
    int v623 = v485 + 1;
    int v626 = v623;
  }
  else
  {
    int v623 = 0;
    if (v486)
    {
      v624 = (unsigned __int8 *)&__src[14] + 3;
      do
      {
        int v625 = *v624;
        v624 += 64;
        v623 += v625;
        --v486;
      }
      while (v486);
    }
    int v626 = 0;
    if (v491)
    {
      uint64_t v627 = v491;
      v628 = (unsigned __int8 *)&v783[3] + 11;
      do
      {
        int v629 = *v628;
        v628 += 64;
        v626 += v629;
        --v627;
      }
      while (v627);
    }
  }
  if (!v745)
  {
    unint64_t v646 = 0;
    goto LABEL_1154;
  }
  for (unint64_t k = 0; k < v745; ++k)
  {
    int v634 = (unsigned char *)v750[k];
    int v635 = v634[3896];
    if (v634[3896]) {
      int v636 = v487;
    }
    else {
      int v636 = v492;
    }
    if (v634[3896]) {
      int v637 = v623;
    }
    else {
      int v637 = v626;
    }
    v634[552] = v686 != 0;
    if (v635)
    {
      uint64_t v638 = LOBYTE(__src[3]);
      if (!LOBYTE(__src[3])) {
        goto LABEL_1141;
      }
      int v639 = 0;
      CFNumberRef v640 = (char *)&__src[17] + 1;
      do
      {
        char v641 = *v640;
        v640 += 64;
        if ((v641 & 0xFE) == 2) {
          ++v639;
        }
        --v638;
      }
      while (v638);
    }
    else
    {
      if (!v491)
      {
LABEL_1141:
        int v639 = 0;
        goto LABEL_1142;
      }
      int v639 = 0;
      uint64_t v642 = v491;
      v643 = (char *)&v783[4] + 5;
      do
      {
        char v644 = *v643;
        v643 += 64;
        if ((v644 & 0xFE) == 2) {
          ++v639;
        }
        --v642;
      }
      while (v642);
    }
LABEL_1142:
    if (v634[3784]) {
      int v639 = 0;
    }
    if (HIDWORD(v678)) {
      int v645 = v485 + (__src[484] == 0);
    }
    else {
      int v645 = 0;
    }
    if (AllocateAndSendOneShotBuffers((uint64_t)v634, v485 + (__src[484] == 0) - v639, v645, v636, v637, 0))goto LABEL_909; {
    unint64_t v646 = v745;
    }
  }
  if (v745)
  {
    uint64_t v647 = v750;
    int v648 = v485 + (__src[484] == 0);
    uint64_t v649 = v745;
    do
    {
      uint64_t v650 = *v647++;
      *(_DWORD *)(v650 + 76) += v648;
      --v649;
    }
    while (v649);
  }
LABEL_1154:
  if ((*(unsigned char *)(*(void *)v735 + 1280)
     || *(unsigned char *)(*(void *)v735 + 1480)
     || *(unsigned char *)(*(void *)v735 + 2280))
    && !*(unsigned char *)(*(void *)v735 + 3784))
  {
    uint64_t v12 = 0;
    if (!H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v740 + 24), (unsigned __int8 *)__src, 0x79Cu, 0, 0xFFFFFFFF))
    {
      unint64_t v646 = v745;
      if (v745) {
        goto LABEL_1159;
      }
      goto LABEL_1172;
    }
  }
  else
  {
    if (v646)
    {
LABEL_1159:
      unint64_t v651 = 0;
      do
      {
        uint64_t v652 = v750[v651];
        if ((*(unsigned char *)(v652 + 1280) || *(unsigned char *)(v652 + 1480) || *(unsigned char *)(v652 + 2280))
          && !*(unsigned char *)(v652 + 3896)
          && !*(unsigned char *)(v652 + 3784))
        {
          DWORD2(v783[0]) = *(_DWORD *)(v652 + 132);
          if (H16ISP::H16ISPDevice::ISP_SendCommand(*(H16ISP::H16ISPDevice **)(v740 + 24), (unsigned __int8 *)v783, 0x79Cu, 0, 0xFFFFFFFF))goto LABEL_1102; {
          unint64_t v646 = v745;
          }
        }
        ++v651;
      }
      while (v651 < v646);
    }
LABEL_1172:
    LODWORD(buf.value) = 101;
    LOBYTE(buf.timescale) = v706;
    if (LaunchStillImageCapture(v740, v744, (unsigned __int8 *)__b, 0x264u))
    {
      uint64_t v653 = v745;
      if (v745)
      {
        double v654 = v750;
        do
        {
          uint64_t v655 = *v654++;
          *(_DWORD *)(v655 + 76) = 0;
          --v653;
        }
        while (v653);
      }
      goto LABEL_1102;
    }
    uint64_t v656 = *(void *)(v740 + 200);
    if (!v656) {
      goto LABEL_1102;
    }
    char v657 = v706;
LABEL_1181:
    if (v657) {
      H16ISP::H16ISPServicesRemote::SetProperty(v656, (xpc_object_t *)&buf);
    }
LABEL_1102:
    uint64_t v12 = 0;
  }
LABEL_1103:
  BOOL v11 = v660;
LABEL_1189:
  CFArrayRef v10 = v659;
LABEL_6:
  if (v10)
  {
    UnlockStreamMutexes(v10);
    pthread_mutex_lock(v11);
    CFRelease(v10);
  }
  return v12;
}